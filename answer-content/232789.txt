<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Often on project Euler, it is useful to solve a problem "backwards". What do I mean by this? Well, "forwards" would be to generate a list of primes, and check all consecutive sums for primality and length, a "bottom up" approach. This takes a very long time and is rather undirected. </p>

<p>Because you're building <em>up</em> from the smallest length, you need to keep building your consecutive sums, even when you've found potential answers!</p>

<hr>

<p>A better solution would be to start with an ordered list of primes whose sum is below <code>10**6</code> (which can easily be generated with a sieve as you have done). Then, put them <em>all</em> together in a list and find the sum. Then, do the following:</p>

<ul>
<li>Remove a prime from the beginning</li>
<li>Check the sum for primality</li>
<li>Add it back and remove a prime from the end </li>
<li>Check the sum for primality</li>
<li>Remove both</li>
<li>Check the sum for primality</li>
<li>...</li>
</ul>

<p>This means as soon as you find a prime from those sums, you have guaranteed it is the largest, simply by working backwards.</p>

<hr>

<p>Now that you have the basic algorithm, you can start making efficiency improvements. Things like improving your initial sieve; or making optimisations to your python code using generators, fewer function calls etc.</p>

<p>Finally, there are all sorts of great answers on the project Euler forums which you have access to if you submit a correct answer. It's always worth skimming them having completed a problem; there's always someone with a better way of doing it!</p>

<hr>

<h3>Pseudocode of example:</h3>

<p>I'll show how this algorithm could be used to generate the answer 41 for the largest prime below 100 constructed from consecutive primes.</p>

<p>Using a sieve, generate a list of primes, <code>p</code> whose sum is <code>&lt;= 100</code>: <code>p = [2, 3, 5, 7, 11, 13, 17, 19, 23]</code></p>

<p>Remove the largest prime from the list and evaluate if the sum is prime:</p>

<pre><code>p -&gt; p = [2, 3, 5, 7, 11, 13, 17, 19]
sum = 77
is_prime(sum) &gt;&gt;&gt; False
</code></pre>

<p>Add the largest prime (<code>23</code>) back to the list, remove the smallest prime (<code>2</code>) and try again:</p>

<pre><code>p -&gt; p = [3, 5, 7, 11, 13, 17, 19, 23]
sum = 98
is_prime(sum) &gt;&gt;&gt; False
</code></pre>

<p>Add the smallest prime (<code>2</code>) back, then remove the <em>two</em> largest primes (<code>19, 23</code>):</p>

<pre><code>p -&gt; p = [2, 3, 5, 7, 11, 13, 17]
sum = 58
is_prime(sum) &gt;&gt;&gt; False
</code></pre>

<p>Add back the largest prime, remove the smallest:</p>

<pre><code>p -&gt; p = [3, 5, 7, 11, 13, 17, 19]
sum = 75
is_prime(sum) &gt;&gt;&gt; False
</code></pre>

<p>Add back the smallest, remove the two largest:</p>

<pre><code>p -&gt; p = [2, 3, 5, 7, 11, 13]
sum = 41
is_prime(sum) &gt;&gt;&gt; True
# Success!
return sum
</code></pre>
    </div>