<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since this is labelled TypeScript, I'm going to review it as such. First of all, you aren't using <em>types</em>, which defeats the purpose of using <strong>Type</strong>Script. You should define what your objects look like</p>

<pre><code>interface Datum { //not sure what to call it
    continent: string,
    country: string,
    year: string,
    value: number
}
</code></pre>

<p>I'm not a TypeScript expert or anything, but even as a beginner, I'd expect something <em>at least</em> like this. With this, we get that the year is apparently a string. Maybe it's not an issue but it's something to note. Before defining the type I just glanced at the object and assumed it was a number.</p>

<p>Which means that your <code>array</code> declaration should now look like this </p>

<pre><code>const array : Array&lt;Datum&gt; = [
  {continent: 'Africa', country:'Algeria', year:'2018', value:10},
  {continent: 'Africa', country:'Algeria', year:'2017', value:15},
  {continent: 'Africa', country:'Algeria', year:'2016', value:2},
  {continent: 'Africa', country:'Egypt', year:'2018', value:20},
  {continent: 'Africa', country:'Egypt', year:'2017', value:1},
  {continent: 'Africa', country:'Egypt', year:'2016', value:20},
]
</code></pre>

<p>and the compiler would know what you are working with providing type safety for future operations. </p>

<p>Now, let's take a look at some other declarations</p>

<pre><code>const yearsTemp : Array&lt;string&gt; = Array.from(new Set(dataset.map((datum: Datum) =&gt; datum.year)).values())
</code></pre>

<p>Assuming <code>dataset</code> has a content similar to <code>array</code> in the beginning, the types we annotate are <code>Datum</code> for each variable. This means that we are mapping each <code>year</code> value and get an array of string. However, calling <code>.values()</code> on the <code>Set</code> is superfluous - <code>Array.from()</code> works fine with just being passed a <code>Set</code>. So, you can drop that.</p>

<p>But what about the next line</p>

<pre><code>const years: Array&lt;string&gt; = yearsTemp.map(year =&gt; year.toString())
</code></pre>

<p>So, we take an array of strings and produce an array of strings. That's <em>fine</em> normally, but to do that you call <code>.toString()</code> on each value. That's a pointless operation <code>"some value".toString()</code> is the same thing. It's also <em>dangerous</em>, as <code>null.toString()</code> would cause an error. For future reference, a way that wouldn't throw a null pointer exception is to pass the value through the <code>String</code> constructor function but <em>don't</em> use the keyword <code>new</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>let numericValue = 42;

let stringValue = String(numericValue);

console.log("typeof stringValue", typeof stringValue);
console.log('stringValue === "42"', stringValue === "42");

//this creates a new object string, not a string primitive
let dontDoThis = new String(numericValue);

console.log("typeof dontDoThis", typeof dontDoThis);
console.log('dontDoThis === "42"', dontDoThis === "42"); //not the same type
console.log('dontDoThis === new String("42")', dontDoThis === new String("42")); //not the same object</code></pre>
</div>
</div>


<p>Passing the value <code>null</code> or <code>undefined</code> through <code>String</code> will not cause an error but it will produce the string <code>"null"</code> or <code>"undefined"</code> respectively. You can filter those out, if you don't want them</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>let objectsWithNumericValues = [{year: 2018}, {year: 2019}, {year: 2019}, {year: 2020}, {year: null}];

let extractedYears = objectsWithNumericValues.map(obj =&gt; obj.year);
let resultWithNull = Array.from(new Set(extractedYears))
  .map(String); //&lt;-- convert to string

let resultWithoutNull = Array.from(new Set(extractedYears))
  .filter(Boolean) //&lt;-- filter anything falsey
  .map(String);
  
console.log(resultWithNull);
console.log(resultWithoutNull);</code></pre>
</div>
</div>


<p>On a separate note, the above code shows how you can avoid temporary variables by chaining operations. It saves some typing and it's clearer by not having clutter like throw-away variable names. But it also depends on the coding style.</p>

<p>Anyway, back on the topic of getting the years and turning them into strings - just drop the line that does <code>toString</code> and rename <code>const yearsTemp</code> to <code>const years</code></p>

<p>As for the rest it seems OK, as long as you add the types. It's not clear where the <code>continent</code> variable is coming from when you call <code>filter(dataset, { continent: continent, year: year })</code> but I'd assume you have that in context. The other strange this is <code>dataset[0].continent</code>. I'm not sure if that's correct or not, as it would take the same <code>continent</code> for each new produced value and it's not necessarily going to be the correct one unless <code>dataset[0].continent === continent</code>. But that might be a typo when transcribing the code here. Perhaps the same is true for <code>country: ''</code></p>

<p>The only change I'd make is separate the functionality instead of put all the processing into <code>.map()</code>. The chaining of array operation makes the separation of intentions clearer and if you need to extract functionality, it's cleaner.</p>

<pre><code>years
    .map(year =&gt; filter(dataset, { continent: continent, year: year }))
    .map(filtered =&gt; {
        const mean = filtered.reduce((acc, item) =&gt; acc + item.value, 0) / filtered.length
        return {
            continent: dataset[0].continent,
            country: '',
            year: year,
            value: mean
        }
    })
</code></pre>

<p>this way if you decide that either or both functionalities are reusable, you can separate them and your logic turns into</p>

<pre><code>years
    .map(getResultsWithTheSameYear)
    .map(calculateMean)
</code></pre>

<p>and you can use these functions elsewhere. Perhaps you will have some other functionality where you do </p>

<pre><code>countries
    .map(getResultsWithSameCountry)
    .map(calculateMean)
</code></pre>
    </div>