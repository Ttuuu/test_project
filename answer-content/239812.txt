<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks well organized, and has a clear coding style. Good separation of responsibility between classes, almost no raw pointers (except for those coming from the C API of SDL of course), and no global variables. Nice! But there are still some areas of improvement:</p>

<h1>Only use <code>SDL_assert()</code> to check for programming errors</h1>

<p>Assertions are a tool to help find bugs in your program. However, in release builds, these assertions are typically compiled out. Thus, they should not be used to check for errors that can reasonably happen. For example:</p>

<pre><code>SDL_assert(m_Window != NULL);
</code></pre>

<p>It is very possible that, without any bugs in your program, an SDL window could not be created, for example because of an out of memory condition, or the program being run without a display server running. So instead, you have to use a regular <code>if</code>-statement to check for this condition, and then handle the error appropriately. You could use exceptions for that, like so:</p>

<pre><code>#include &lt;stdexcept&gt;

...

if (!m_Window)
{
    throw std::runtime_error("Failed to create window");
}
</code></pre>

<h1>Use <code>nullptr</code> instead of <code>NULL</code></h1>

<p><code>NULL</code> should be used in C code, in C++ you should use <a href="https://stackoverflow.com/questions/1282295/what-exactly-is-nullptr"><code>nullptr</code></a>. However, you can also avoid writing it entirely in most cases. For example, instead of <code>if (foo != nullptr)</code>, you can just write <code>if (foo)</code>. Also, instead of <code>Foo *foo = nullptr</code> you can write <code>Foo *foo = {}</code>.</p>

<p>Whether you want to use <code>nullptr</code> explicitly or use the shorter notations is up to the code style you are using.</p>

<h1>Avoid unnecessary indirection</h1>

<p>One of things you do in the constructor of <code>Engine</code> is to allocate a new instance of <code>Board</code> and store the pointer in <code>m_Board</code>. But why allocate this way, when you can just store a <code>Board</code> directly in <code>Engine</code>, like so:</p>

<pre><code>class Engine {
    ...
    private:
        Board m_Board;
};
</code></pre>

<p>The constructor should then ensure it initializes it like so:</p>

<pre><code>Conway::Engine::Engine(int ScreenWidth, int ScreenHeight)
    : m_ScreenWidth{ScreenWidth}, m_ScreenHeight{ScreenHeight}
    , m_Board({ScreenWidth, ScreenHeight})
{
    ...
</code></pre>

<h1>Don't draw in the constructor of <code>Engine</code></h1>

<p>It should not be necessary to call <code>Draw()</code> from the constructor, instead this is done in <code>Run()</code>. In general, avoid having functions do more than necessary.</p>

<h1>Don't reset member variables in the destructor</h1>

<p>There is no pointing in setting <code>m_Window</code> and <code>m_Renderer</code> to <code>NULL</code> in the destructor of <code>Engine</code>, since those variables will be gone as soon as the function exits.</p>

<h1>Add a <code>default</code> statement to the <code>switch</code> in <code>HandleEvents</code></h1>

<p>Be explicit and tell the compiler what behaviour you want if <code>Event.type</code> doesn't match any of the <code>case</code>-statements. Otherwise, when enabling warnings, the compiler might warn about unhandled event types. It just has to be:</p>

<pre><code>default:
    break;
</code></pre>

<h1>Improve <code>class Coord</code></h1>

<p>Your <code>class Coord</code> is basically the same as <a href="https://en.cppreference.com/w/cpp/utility/pair" rel="nofollow noreferrer"><code>std::pair</code></a>. So, if you really wanted to have coordinate pairs where each coordinate can have its own type, you should just have written <code>std::pair&lt;int, int&gt;</code> instead of <code>Coord&lt;int, int&gt;</code>. However, in your code you always use <code>int</code>s for coordinates. So there really is no need for a template at all. Furthermore, you clearly want x and y-coordinates, so just make that explicit:</p>

<pre><code>struct Coord
{
    int x;
    int y;
};
</code></pre>

<p>Be consistent in how you name things. In your code, you use <code>i</code>, <code>first</code> and <code>somethingX</code> as names for variables related to the x coordinate. Make sure it has <code>x</code> in the name everywhere. Also, do use your <code>class Coord</code> wherever you have a pair of coordinate. Here is how it would look:</p>

<pre><code>int Conway::Board::CountAliveNeighbors(Coord GridCell)
{
    int count = 0;
    for (int dx = -1; dx &lt;= 1; ++dx)
    {
        for (int dy = -1; dy &lt;= 1; ++dy)
        {
            Coord absolute;
            absolute.x = GridCell.x + dx;
            absolute.y = GridCell.y + dy;
            ...
</code></pre>

<h1>Don't use arbitrary delays</h1>

<p>You are calling <code>SDL_Delay(100)</code>, which limits your code to run at less than 10 frames per second. Maybe you want to have the evolution of the board go at a rate of 10 Hz, but it is in general better to decouple rendering from the timesteps of your simulation. You already set the <code>SDL_RENDERER_PRESENTVSYNC</code> flag, so you can drop the call to <code>SDL_Delay()</code> and have your code render at the same framerate as your monitor.</p>

<p>If you want to limit how often the board updates, then I suggest you use <code>SDL_GetTicks()</code> to keep track of time, and only call <code>Update()</code> when enough time has passed.</p>

<h1>Pass coordinate pairs to <code>ReadCell()</code></h1>

<p>The fact that <code>class Board</code> stores cells as a one-dimensional <code>std::vector</code> should not have to be exposed to other classes. So it is better if <code>ReadCell()</code> takes x and y-coordinates in the form of a <code>Coord</code>, and converts them to an index itself, so in <code>Engine::Draw()</code> you can write:</p>

<pre><code>if (m_Board.ReadCell({x, y}) == Board::Cell::Alive)
</code></pre>

<h1>Rename <code>ToggleClickedCell()</code> to <code>ToggleCell()</code></h1>

<p>You have a very good separation of responsibility in your code: <code>class Board</code> implements the logics of the board, while <code>class Engine</code> handles user input and rendering. This makes it easy to change the <code>Engine</code> while keeping the functionality of the <code>Board</code> the same. For example, you could make a text-only version of your program by changing <code>Engine</code> such that it would not use SDL but render the board as ASCII art for example. In that case, you would not use a mouse but the keyboard to toggle cells, so it would be strange to have to call <code>ToggleClickedCell()</code> when no clicking is involved.</p>

<p>You should also just pass the grid x and y coordinates to <code>ToggleCell()</code>, not the mouse coordinates. Converting mouse coordinates to grid coordinates should be done by <code>Engine</code>.</p>

<h1>Make member functions <code>const</code> where appropriate</h1>

<p>Apart from variables, you can also make member functions <code>const</code>. You should do this when the member function doesn't change any of the member variables of its class. That allows the compiler to optimize the code better. You just have to add it right after the declaration in the header files, like so:</p>

<pre><code>int CountAliveNeighbors(Coord GridCell) const;
</code></pre>

<h1>Avoid repeatedly using a function to get the same value</h1>

<p>In <code>Board::Update()</code> there are three calls to <code>CountAliveNeighbors({j, i})</code>. Apart from the code duplication, if the compiler cannot see that each call will produce exactly the same result, it will perform more function calls than necessary. While there are ways to make the compiler optimize this anyway (using <a href="https://en.cppreference.com/w/cpp/language/attributes" rel="nofollow noreferrer">function attributes</a> like <code>[[gnu::const]]</code> or <a href="https://en.wikipedia.org/wiki/Interprocedural_optimization#WPO_and_LTO" rel="nofollow noreferrer">link-time optimization</a>), you can easily improve the code yourself by calling the function once and storing the result in a variable:</p>

<pre><code>auto aliveNeigbors = CountAliveNeighbors({x, y});

if (ReadCell({x, y}) == Cell::Alive)
{
    if (aliveNeighbors &lt; 2 || aliveNeighbors &gt; 3)
    {
        ...
</code></pre>

<h1>Keep two vectors of cells in memory</h1>

<p>In <code>Board::Update()</code>, you create a temporary <code>std::vector&lt;Cell&gt;</code>, write the new cell state to it, and at the end copy the temporary vector into <code>m_Grid</code>, and then you destroy the temporary. If this was something you would only do sporadically, that could be fine, but this is where your program spents a large part of its time, so you should try to optimize this. A simple way to do this is to keep two vectors for storage, and a variable to keep track of the "current" vector. For example, in <code>Board.h</code>:</p>

<pre><code>class Board
{
    ...
    private:
    std::vector&lt;Cell&gt; m_Grids[2];
    int m_CurrentGrid = 0;
};
</code></pre>

<p>Then, in <code>Update()</code>, do something like:</p>

<pre><code>auto &amp;m_Grid = m_Grids[m_CurrentGrid];     // Get a reference to the current grid
auto &amp;temp   = m_Grids[m_CurrentGrid ^ 1]; // Get a reference to the temporary grid

for (...)
{
    ...
}

m_CurrentGrid ^= 1; // Swap the temporary and current grid
</code></pre>

<p>Of course, everywhere you used <code>m_Grid</code> before, you have to ensure you use the current grid. This makes it even more important to use a member function to get cell at a given coordinate, instead of reading a vector directly, even inside <code>class Board</code> itself, because then you only need one place where you put the logic which of the two vectors to read.</p>
    </div>