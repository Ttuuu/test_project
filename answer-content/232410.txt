<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with a list like you did:</p>

<pre><code>rps = ['Rock', 'Paper', 'Scissors']
</code></pre>

<p>What do we notice with the ordering? Each one always beats the previous one: Paper beats Rock, Scissors beats Paper &amp; Rock beats Scissors (when we wrap around).</p>

<p>We can exploit that logic:</p>

<pre><code>difference = rps.index(first_shape) - rps.index(second_shape)
</code></pre>

<p>This difference means we now have a very simple way of determining the winner. If it's zero, it's a tie, otherwise the difference tells us who won, and we'll be using the ability to use negative list indexes:</p>

<p>For a length 3 list: <code>lst[-1] == lst[2]</code> and <code>lst[-2] == lst[1]</code>.  So a difference of 1 means the first player won, and a difference of 2 means the second player won, and python is gonna handle the negative cases for us automatically. Nice!</p>

<p>So we can just use this directly to figure out who won with the help of a <code>winner_lookup</code> list that makes this </p>

<pre><code>winner_lookup = ["\nDraw! Roll again!", 
                 f"\n{first_shape} beats {second_shape}!", 
                 f"\n{second_shape} beats {first_shape}!"]
print(winner_lookup[difference])
</code></pre>

<p>Now we can change the input/output strings without fear of damaging our business logic.</p>

<p>To diverge entirely from using strings for business, let's make our choices as just the index of the choice we want:</p>

<pre><code>first_shape, second_shape = random.randint(0, 2), random.randint(0, 2)
</code></pre>

<p>To take player input, we'd just use <code>rps.index(player_input)</code> to get the index of their choice. This also means all the prints need to use <code>rps[shape]</code> to get the string instead of the index.</p>

<p>We can pull all of the strings outside of the play function, which all together gives us:</p>

<pre><code>import random

rps = ['Rock', 'Paper', 'Scissors']
match_string = "Roll:\n{} vs {}"
tie_string = "\nDraw! Roll again!"
winner_string = "\n{} beats {}!"

def autoplay():
    first, second = random.randint(0, 2), random.randint(0, 2)
    difference = first - second
    winner_lookup = [tie_string, 
                     winner_string.format(rps[first], rps[second]),
                     winner_string.format(rps[second], rps[first])]
    print(match_string.format(rps[first], rps[second]))
    print(winner_lookup[difference])
</code></pre>

<p>Where you may want to use classes and objects instead of this is if you wanted to implement RPSLS (Rock Paper Scissors Lizard Spock), as this implementation relies on the game rules being only <em>each entry is beaten by the next entry</em>. But if we wanted to change any of the strings, we don't affect the code at all.</p>
    </div>