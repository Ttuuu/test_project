<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>def is_invalid_position(maze, node):
</code></pre>
</blockquote>

<p>Why <code>node</code>? The only things used by this method are <code>maze</code> and <code>node.position</code>, so to me it would make more sense to take those as parameters.</p>

<hr>

<blockquote>
<pre><code>            found_in_list = False
            for node in nodes:
                if new_node == node and new_node.distance_from_start &gt; node.distance_from_start:
                    found_in_list = True
                    break

            if (found_in_list):
                continue
            nodes.append(new_node)
</code></pre>
</blockquote>

<p>Surely if you find a shorter route to the same position you want to <em>replace</em> the previous node, not just append a new one to the list?</p>

<p>Well, actually it's better to use <code>dict</code> from position to <code>Node</code> and then to update the existing node, for a simple reason:</p>

<blockquote>
<pre><code>            new_node = Node(node_position, current_node)
            if (is_invalid_position(maze, new_node)):
                continue

            if (visited_nodes[new_node.position]):
                continue

            new_node.distance_from_target = get_squared_distance(new_node, end_node)
            new_node.cost = new_node.distance_from_start + new_node.distance_from_target
</code></pre>
</blockquote>

<p>calculates <code>get_squared_distance</code> every time the node is seen. The heuristic shouldn't change, and could potentially be a lot more expensive, so it makes sense to calculate it only the first time and then to essentially cache it in the node.</p>

<hr>

<blockquote>
<pre><code>    while len(nodes) &gt; 0:
        ...

        if current_node == end_node:
            return get_path_from_node(current_node)

        ...

    return []
</code></pre>
</blockquote>

<p>As evidenced by the comments on the question, a comment in the code along the lines of "No route exists" to explain the sentinel return value would help.</p>

<hr>

<blockquote>
<pre><code>        current_index = 0
        for index in range(len(nodes)):
            if nodes[index].cost &lt; nodes[current_index].cost:
                current_index = index
</code></pre>
</blockquote>

<p>is horribly slow. Since the graph is unweighted you can implement a very nice heap using an array of <code>set</code>. You'll probably have to implement <code>__hash__</code>, but I expect that best practices call for doing that whenever you implement <code>__eq__</code> anyway.</p>

<hr>

<p>To me this looks too tightly composed. A* is a graph algorithm for general graphs. This implementation hard-codes a grid graph for which A* is unnecessary: you can find the shortest path by just changing one coordinate in single steps until it matches, and then changing the other in the same way.</p>

<p>It's also inconsistently OO. If <code>Node</code> is worthy of a class, surely <code>Maze</code> is too? I would prefer to see an implementation which works for a general graph and an implementation of a grid graph with its neighbourhood rules and heuristic.</p>
    </div>