<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can avoid checking <em>every</em> string by growing the substring on both ends. That way you can quit the inner for loop as soon as the substring isn't a palindrome anymore and use the previous iteration's substring as the palindrome.</p>

<pre><code>if(input_str.empty())return 0;
size_t largest = 1; //if string is not empty then the first character is always a palindrome.
size_t start = 0;
std::string_view view = input_str; //create string view to avoid casting each substr call.
for (int center = 1; center &lt; str.length(); center++)
{
    //even length palindromes
    for (int j = 1; center - j &gt;= 0 &amp;&amp; center + j &lt; str.length(); j++)
    {
        if (center - j &lt; 0 || center + j &gt;= str.length() || !isPalindrome(view.substr(center - j, center + j)))
        {
            int length = 2*(j-1);
            if(length &gt; largest){
                start = center - j;
                largest = length;
            }
            break;
        }
    }

    //odd length palindromes
    for (int j = 1; center - j &gt;= 0 &amp;&amp; center + j + 1 &lt; str.length; j++)
    {
        if (center - j &lt; 0 || center + j + 1 &gt;= str.length() || !isPalindrome(view.substr(center - j, center + j + 1)))
        {
            int length = 2*(j-1) + 1;
            if(length &gt; largest){
                start = center - j;
                largest = length;
            }
            break;
        }
    }
}
</code></pre>

<p>Also I use <code>std::string_view</code> to pass to <code>isPalindrome</code> to avoid allocating a new strings every time. <code>std::string_view</code> creates a view into the string and taking the substring of it is a constant time operation with no allocations.</p>
    </div>