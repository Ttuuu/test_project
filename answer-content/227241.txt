<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Kudos on using modern OpenGL for this! We see a lot of OpenGL code around here relying on deprecated functionality, so this is a breath of fresh air.</p>
<h1>Naming</h1>
<p>I think your naming needs some work. The name <code>convert_pixels_to_render_coordinates</code> is highly confusing. When I think of pixels, I generally think of an array of RGB(A) values (or possibly in some other color space). While I have seen OpenGL code that stuffs x,y,z coordinates into an image, this code doesn't appear to be doing that. So the name just seems wrong. It's not converting pixels to anything. It appears to be converting some sort of length from one coordinate system to another.</p>
<p>Next are the arguments to the function. The header calls the first parameter <code>image_height</code>. The implementation calls it <code>image_dim</code>. I'm guessing that since the other parameters have names like <code>y_offset</code> and <code>height</code> that you expect it to be used for calculating something related to height. The comment that goes with the function doesn't illuminate much for me as a reader who has never seen this code. What are "render coordinates"? Are these world coordinates? Normalized device coordinates? Object coordinates? I can't tell from your usage example what these various coordinates and dimensions are supposed to be. You pass in 256 for the <code>image_height</code>, but you haven't loaded the image yet. How do you know it's 256 pixels high? Then you pass 0 and 74 for the <code>px_0</code> and <code>px_1</code> values. Is that the width? Given the ratios you calculate, I can't tell at all what this is doing. Are you just trying to calculate normalized texture coordinates from the size of the image? Is this getting something out of a texture atlas? Suffice to say, I can't tell what's going on from the name of the function or the arguments.</p>
<p>In the <code>struct image</code>, the <code>render_data</code> pointer has a meaningless name. In general, you should avoid using words like data, info, record, object, etc. in the names of types because those words describe all types. That leaves "render" which is equally meaningless because all of this code is related to rendering. What you're passing here are vertex attributes, so I recommend calling it <code>vertex_attributes</code> or something like that.</p>
<p>The function name <code>rectangle_vertices()</code> is also not very descriptive. I suggest something along the lines of <code>image_coordinates_to_vertex_coordinates()</code>, or <code>object_coordinates_to_vertex_coordinates()</code>. (Note that the use of <code>object</code> here is not in a type definition, so the above rule doesn't apply. "Object Space" is a term commonly used to refer to a rendered object's local coordinate space.)</p>
<h1>Constants</h1>
<p>It's nice to see you using named constants for some things rather than magic numbers. I recommend you change these macros to be just indexes, though:</p>
<pre><code>#define VERTEX_BUFFER buffers[0]
#define UV_BUFFER buffers[1]
</code></pre>
<p>Rather than making them macros, I'd define them as an enum, like this:</p>
<pre><code>typedef enum {
    VERTEX_BUFFER = 0,
    UV_BUFFER = 1
};
</code></pre>
<p>And then you can use them like this:</p>
<pre><code>glBindBuffer(GL_ARRAY_BUFFER, impl-&gt;buffers [ VERTEX_BUFFER ]);
</code></pre>
<p>That's more idiomatic C.</p>
<h1>Your Questions</h1>
<p>To answer your questions, I think you've done fine separating the interface from the implementation. I just think your interface could be better. I can't comment more on <code>convert_pixels_to_render_coordinates</code> because I don't know what it's doing.</p>
    </div>