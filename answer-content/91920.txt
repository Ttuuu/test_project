<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will try to take several things into account but to keep things simple. A few remarks:</p>

<ul>
<li><p>First, it seems that you have a typo here:</p>

<pre><code>if ((num1 &lt; num2) &amp;&amp; (num3 &lt;&lt; num1))
</code></pre>

<p>I think that you meant <code>num3 &lt; num1</code> instead of <code>num3 &lt;&lt; num1</code> in your second condition.</p></li>
<li><p>As @Josay says, you better write small functions. I would add that you better separate the input/output operations (that you can keep in <code>main</code>) and the sorting function. In my opinion, this would be a good enough signature for the sorting function:</p>

<pre><code>void sort3(int&amp; a, int&amp; b, int&amp; c);
</code></pre>

<p>You would give three variables to it and it would sort them in-place so that you end up with \$ a \le b \le c \$.</p></li>
<li><p>Now, let's choose an algorithm. For three values, the easiest is to implement a <a href="https://en.wikipedia.org/wiki/Bubble_sort" rel="nofollow noreferrer">bubble sort</a> which shouldn't be really slower than other algorithms (when you want to sort more values, it becomes horribly slower though).</p>

<pre><code>void sort3(int&amp; a, int&amp; b, int&amp; c)
{
    if (a &gt; b)
    {
        std::swap(a, b);
    }
    if (b &gt; c)
    {
        std::swap(b, c);
    }
    if (a &gt; b)
    {
        std::swap(a, b);
    }
}
</code></pre>

<p>Most sorting algorithms heavily rely on swapping values. The one I just implemented sorts your values with only three comparisons and at most three swaps and is, in my opinion, far simpler to understand than what you had.</p>

<p><em>Note that there are <a href="https://stackoverflow.com/a/31939937/1364752">more efficient algorithms</a> but I deliberately chose to present one that is not that bad while easy to understand.</em></p></li>
<li><p>This is not a problem in your case, but we can't stress out enough that <a href="https://stackoverflow.com/q/1452721/1364752"><code>using namespace std;</code> is often considered bad practice</a>. It is the case when used in a header file, especially in a library header file since it will pollute the global namespace of every file including it. That's not a problem for you since you're probably doing everything in a <code>.cpp</code> file but it's better to keep that in mind.</p></li>
<li><p>You don't need to <code>return 0;</code> at the end of <code>main</code>. If the compiler reaches the end of the <code>main</code> function without having encountered a <code>return</code> statement, it automagically adds a <code>return 0;</code> for you. Note that it only works with <code>main</code> though. Dropping this line is an interesting way to document that your program cannot return error codes and that it will only ever return <code>0</code>.</p></li>
</ul>
    </div>