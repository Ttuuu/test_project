<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, fairly good.</p>

<blockquote>
  <p>Am I doing anything dangerous in this?</p>
</blockquote>

<p><strong>Lack of comments</strong></p>

<p>I'd expect at least some commentary about the roll of the functions and how to use them near the function declaration section.</p>

<p>Assume a user will read the header and not delve into implementation.</p>

<p><strong>Unexpected type change</strong></p>

<p>The stored ellement is a <code>void *</code>, changing the return type to <code>const</code> is not good.</p>

<pre><code>// const void* vv_read_index(void_vector *vv, size_t index)
void* vv_read_index(void_vector *vv, size_t index)
</code></pre>

<p><strong>Overuse of <code>NULL</code></strong></p>

<p><code>vv_pop(), vv_read_index()</code> return <code>NULL</code> as an error indicator and can return <code>NULL</code> as a valid return.  If <code>NULL</code> is not to be allowed (which I think is a bad idea) as a storable <code>void *</code>, <code>vv_push(&amp;vv, NULL)</code> should error.</p>

<p>I'd re-work calls to return an error code on <code>vv_pop()</code>, like <code>vv_err vv_pop(void_vector **vv, void **el)</code>.</p>

<p>It seems odd to have 2 forms of error signaling: error codes and <code>NULL</code>.</p>

<p><strong>"default size"</strong></p>

<p>I see no real value in a default size of 16.  Suggest setting aside <code>size == 0</code> as something special and allow an initial vector size of 0.  Add code to handle doubling array size when size is 0.  </p>

<p>Create a <code>VV_DEFAULT_SIZE 16u</code> if desired for the user to call with <code>new_void_vector(VV_DEFAULT_SIZE)</code>.</p>

<p><strong>Overflow</strong></p>

<p>I'd detect overflow in size computations.</p>

<p><strong>Tolerate freeing <code>NULL</code></strong></p>

<p><code>free(NULL)</code> is well defined.  I'd expect the same with <code>delete_void_vector(NULL, foo)</code>.  Currently code dies on this.</p>

<blockquote>
  <p>Is the code clear, what can I do to make it easier to follow?</p>
</blockquote>

<p><strong>Naming convention</strong></p>

<p>Recommend to use the same one prefix with all external types, names and functions.  </p>

<pre><code>// void_vector.h
vv.h

// VOID_VECTOR_H
VV_H

// void_vector* new_void_vector(size_t size);
void_vector* vv_new(size_t size);
</code></pre>

<p>Or use <code>void_vector</code> instead of <code>vv</code> throughout, not both.</p>

<p><strong>Allocate to the size of the object, not type</strong></p>

<p>Allocating to the size of the referenced object is 1) less error prone, 2) easier to review 3) easier to maintain than allocating to the type.</p>

<pre><code>// void_vector* vv = malloc(sizeof(void_vector) + sizeof(void*) * size);
void_vector* vv = malloc(sizeof *vv + sizeof *vv-&gt;data * size);
</code></pre>

<p><strong>Avoid unnecessary suffixes</strong></p>

<p>An <code>L</code>, <code>l</code>, <code>LL</code>, <code>ll</code> is needed a lot less than one thinks.  In the following case, <code>L</code> certainty not needed.  The <code>u</code> <em>is</em> useful though.  I am curios as to why OP thought is was needed - what issue was of concern?</p>

<pre><code>/// #define defualt_size 16ul
#define defualt_size 16u
</code></pre>

<p><strong>Use <code>const</code></strong></p>

<p><code>const</code> would help convey that the function is not altering <code>*vv</code></p>

<pre><code>// vv_read_index(void_vector *vv ...
vv_read_index(const void_vector *vv ...
</code></pre>

<blockquote>
  <p>Is there an obvious way to greatly improve the efficiency?</p>
</blockquote>

<p>Allocations only increase as <code>vv_pop()</code> does not reduce things. This can make for an inefficiency of memory usage.</p>

<p>IMO, a more advanced  scheme could decrease by 1/2 when size needed falls below 25% or 33%.</p>

<blockquote>
  <p>General style comments</p>
</blockquote>

<p><strong>Spell check</strong></p>

<pre><code>// #define defualt_size 16ul
#define default_size 16ul
</code></pre>

<p><strong><code>!</code> vs. <code>&gt;</code></strong></p>

<p>Minor: With arithmetic concerns, <code>&gt;</code> is more readily understood that <code>!</code> negation.</p>

<pre><code>// if (!size)
if (size &gt; 0)
</code></pre>

<blockquote>
  <p>I'm not overly concerned about the contents of void_vector_tb.c.</p>
</blockquote>

<p><strong>Avoid naked magic numbers</strong></p>

<p>Replace <code>10</code> with <code>#define VV_STR_N 10</code>,  <code>32</code> with <code>#define VV_STR_SZ 3</code>2,</p>

<p><strong>Cast not needed</strong></p>

<pre><code>// while(s = (char*) vv_pop(vv)) {
while(s = vv_pop(vv)) {
</code></pre>
    </div>