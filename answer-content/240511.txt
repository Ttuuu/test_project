<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Const operators</h2>

<pre><code>bool operator==(const Node&amp; node) {
</code></pre>

<p>should be</p>

<pre><code>bool operator==(const Node&amp; node) const {
</code></pre>

<p>Likewise for <code>long edgeLength(const Node&amp; node1, const Node&amp; node2)</code>, <code>edgeExists</code>, <code>printGraph</code>, etc.</p>

<h2>Construction</h2>

<p>This function:</p>

<pre><code>void createGraph() {
    std::cout &lt;&lt; "Enter the number of Nodes: ";
    std::cin &gt;&gt; count;
    for (int i = 0; i &lt; count; i++) {
        std::vector&lt;int&gt; v;
        node_list.push_back(Node(i + 1));
        for (int j = 0; j &lt; count; j++) {
            long temp;
            std::cin &gt;&gt; temp;
            v.push_back(temp);
        }
        matrix.push_back(v);
    }
}
</code></pre>

<p>is mostly code that belongs in a constructor. The constructor in this case would accept an <code>istream&amp;</code> and would not <code>cout</code>; that could be done by the caller. The advantage of this approach is that</p>

<ol>
<li>it is more flexible - you could deserialize from a file, for example;</li>
<li>it is more decoupled.</li>
</ol>

<p>I realize that <code>createGraph</code> is a private which is called by the existing constructor, which is fine; but I would stop short of baking in <code>cout</code>/<code>cin</code>.</p>

<h2>Pointer madness</h2>

<p>This:</p>

<pre><code>*(&amp;adj_matrix + 1)
</code></pre>

<p>will not do what you want. Have you tried executing this method? Based on the <a href="https://www.geeksforgeeks.org/how-to-find-size-of-array-in-cc-without-using-sizeof-operator/" rel="nofollow noreferrer">link you gave me</a>, it seems you were attempting to do a hack that requires that you have a reference to an array with defined size, but you do not - you only have bare pointers. </p>

<p>Just pass in integral matrix dimensions.</p>

<h2>Boolean expressions</h2>

<pre><code>    if (std::find(edge_list.begin(), edge_list.end(), Edge(node1, node2)) == edge_list.end()) {
        return false;
    }
    return true;
</code></pre>

<p>can be</p>

<pre><code>    return std::find(edge_list.begin(), edge_list.end(), Edge(node1, node2)) != edge_list.end();
</code></pre>
    </div>