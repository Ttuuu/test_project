<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>a short test to validate that all committed files in the repo are
  formatted.</p>
</blockquote>

<hr>

<p>Here are some notes I made while reading your code.</p>

<hr>

<p>For a real-world code review, code should be correct, maintainable, reasonably efficient, and, most importantly, readable.</p>

<p>Writing code is a process of stepwise refinement.</p>

<p>Define the problem with an outline of a solution.</p>

<pre><code>// checkGoFmt checks that Go source files have been formatted with go fmt or gofmt.
// checkGoFmt returns a newline separated list of files
// whose formatting differs from gofmt's and any error.
func checkGoFmt(root string) (string, error) {
    // Command gofmt
    // https://golang.org/cmd/gofmt/
    // $ gofmt -help
    // usage: gofmt [flags] [path ...]
    //  -l  list files whose formatting differs from gofmt's
    // $
}
</code></pre>

<p>Read the documentation for the <code>gofmt</code> command.</p>

<p>Write some code to construct and run the <code>gofmt</code> command. The <code>goFiles</code> function is a stub.</p>

<pre><code>func goFiles(root string) ([]string, error) {
    var files []string
    return files, nil
}

// checkGoFmt checks that Go source files have been formatted with go fmt or gofmt.
// checkGoFmt returns a newline separated list of files
// whose formatting differs from gofmt's and any error.
func checkGoFmt(root string) (string, error) {
    // Command gofmt
    // https://golang.org/cmd/gofmt/
    // $ gofmt -help
    // usage: gofmt [flags] [path ...]
    //  -l  list files whose formatting differs from gofmt's
    // $

    files, err := goFiles(root)
    if err != nil {
        return "", err
    }
    if len(files) == 0 {
        return "", nil
    }

    args := make([]string, 0, 1+len(files))
    args = append(args, "-l")
    args = append(args, files...)
    out, err := exec.Command("gofmt", args...).Output()
    return string(out), err
}
</code></pre>

<p>Pay attention to program structure. The specific implementation of <code>goFiles</code> is hidden from <code>checkGoFmt</code>. If the end result is not as expected, start by looking at the list of files returned from <code>goFiles</code>. Consider writing a test for the <code>goFiles</code> function. <code>checkGoFmt</code> can be called from a <code>testing</code> package function or a program <code>main</code> function. </p>

<p>The documentation for <code>gofmt</code> states: "Without an explicit path, it processes the standard input." To ensure that <code>TestGoFormatting</code> does not wait on <code>stdin</code>, check that at least one Go file is found. Also, if there is nothing to do then exit.</p>

<p>If possible, make reasonable estimates of slice capacity to minimize allocations.</p>

<p>Read the documentation for <code>filepath.Walk</code> and <code>filepath.WalkFunc</code>.</p>

<blockquote>
  <p>func Walk</p>
  
  <p><code>func Walk(root string, walkFn WalkFunc) error</code></p>
  
  <p>Walk walks the file tree rooted at root, calling walkFn for each file
  or directory in the tree, including root. All errors that arise
  visiting files and directories are filtered by walkFn.</p>
  
  <p><code>type WalkFunc</code></p>
  
  <p>WalkFunc is the type of the function called for each file or directory
  visited by Walk. The path argument contains the argument to Walk as a
  prefix; that is, if Walk is called with "dir", which is a directory
  containing the file "a", the walk function will be called with
  argument "dir/a". The info argument is the os.FileInfo for the named
  path.</p>
  
  <p>If there was a problem walking to the file or directory named by path,
  the incoming error will describe the problem and the function can
  decide how to handle that error (and Walk will not descend into that
  directory). In the case of an error, the info argument will be nil. If
  an error is returned, processing stops. The sole exception is when the
  function returns the special value SkipDir. If the function returns
  SkipDir when invoked on a directory, Walk skips the directory's
  contents entirely. If the function returns SkipDir when invoked on a
  non-directory file, Walk skips the remaining files in the containing
  directory.</p>
  
  <p>type WalkFunc func(path string, info os.FileInfo, err error) error</p>
</blockquote>

<p>Write code for the <code>goFiles</code> stub.</p>

<pre><code>func goFiles(root string) ([]string, error) {
    var files []string

    err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
        if err != nil {
            return err
        }
        if info == nil {
            return nil
        }
        if !info.Mode().IsRegular() {
            return nil
        }
        if filepath.Ext(path) != ".go" {
            return nil
        }
        absPath, e := filepath.Abs(path)
        if e != nil {
            return e
        }
        files = append(files, absPath)
        return nil
    })
    if err != nil {
        return nil, err
    }

    return files, nil
}
</code></pre>

<p>If an error is passed to the <code>WalkFunc</code> don't ignore it.</p>

<p>Don't <code>panic</code> if the <code>info</code> argument is <code>nil</code>.</p>

<p>The documentation for <code>gofmt</code> states: "Given a file, it operates on that file; given a directory, it operates on all .go files in that directory, recursively."</p>

<p>Only process regular files. If the directory is processed too, the file will be duplicated. For example,</p>

<pre><code>├── fmt.dir.go
│   ├── fmt.file.go
</code></pre>

<p><code>fmt.dir.go</code> and <code>fmt.file.go</code> will be appended to the <code>files</code> list and <code>fmt.file.go</code> will be formatted twice, once as a member of directory <code>fmt.dir.go</code> and once as <code>file fmt.file.go</code>.</p>

<p>Read the documentation for the Go <code>testing</code> package.</p>

<p>Write a Go <code>testing</code> package function.</p>

<pre><code>// TestGoFormatting checks that Go source files have been formatted.
func TestGoFormatting(t *testing.T) {
    // TODO: Set root to a variable value?
    root := "../.."
    out, err := checkGoFmt(root)
    if err != nil {
        t.Error(err)
    }
    if len(out) &gt; 0 {
        t.Error(out)
    }
}
</code></pre>

<p>The Go <code>testing</code> package prints the test function name, <code>TestGoFormatting</code>, on failure, There is no need for redundant logging of a test title. <code>TestGoFormatting</code> is more meaningful than <code>TestFormatting</code>. The <code>testing</code> package <code>T.Error</code> method merges the <code>T.Log</code> and <code>T.Fail</code> methods. Eliminate redundant argument <code>error.Error()</code> methods.</p>

<p>Obtaining a value for <code>root</code> requires more thought.</p>

<p>We can also write a program <code>main</code> function.</p>

<pre><code>func main() {
    exit := 0
    // TODO: Set root to a variable value?
    root := "../.."
    out, err := checkGoFmt(root)
    if err != nil {
        exit = 2
        fmt.Fprintln(os.Stderr, err)
    }
    if len(out) &gt; 0 {
        exit = 2
        fmt.Fprintln(os.Stderr, out)
    }
    os.Exit(exit)
}
</code></pre>

<p>And so on.</p>

<p>In Go, don't ignore errors.</p>

<hr>

<p>Here is the complete code for a first draft of <code>TestGoFormatting</code>, a <code>testing</code> function:</p>

<pre><code>package pack

import (
    "os"
    "os/exec"
    "path/filepath"
    "testing"
)

func goFiles(root string) ([]string, error) {
    var files []string

    err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
        if err != nil {
            return err
        }
        if info == nil {
            return nil
        }
        if !info.Mode().IsRegular() {
            return nil
        }
        if filepath.Ext(path) != ".go" {
            return nil
        }
        absPath, e := filepath.Abs(path)
        if e != nil {
            return e
        }
        files = append(files, absPath)
        return nil
    })
    if err != nil {
        return nil, err
    }

    return files, nil
}

// checkGoFmt checks that Go source files have been formatted with go fmt or gofmt.
// checkGoFmt returns a newline separated list of files
// whose formatting differs from gofmt's and any error.
func checkGoFmt(root string) (string, error) {
    // Command gofmt
    // https://golang.org/cmd/gofmt/
    // $ gofmt -help
    // usage: gofmt [flags] [path ...]
    //  -l  list files whose formatting differs from gofmt's
    // $

    files, err := goFiles(root)
    if err != nil {
        return "", err
    }
    if len(files) == 0 {
        return "", nil
    }

    args := make([]string, 0, 1+len(files))
    args = append(args, "-l")
    args = append(args, files...)
    out, err := exec.Command("gofmt", args...).Output()
    return string(out), err
}

// TestGoFormatting checks that Go source files have been formatted.
func TestGoFormatting(t *testing.T) {
    // TODO: Set root to a variable value?
    root := "../.."
    out, err := checkGoFmt(root)
    if err != nil {
        t.Error(err)
    }
    if len(out) &gt; 0 {
        t.Error(out)
    }
}
</code></pre>
    </div>