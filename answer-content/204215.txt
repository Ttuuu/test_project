<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would change</p>

<pre><code>public int getDecimal(char character)
{
    for (int i = 0; i &lt;= 255; i++)
    {
         if (character == (char) i)
         {
              return i;
          }
     }
     return -1;
}
</code></pre>

<p>To just</p>

<pre><code>public int getDecimal(char character)
{
     if(character&lt;0||character&gt;255)
          return -1;
     return character;
}
</code></pre>

<p>, As <code>char</code> is a number, too.</p>

<p>Also try using <code>&gt;&gt;</code> operator to get <code>n</code>th binary digit, which means division by 2.</p>

<pre><code>number = (int) (number / 2);
</code></pre>

<p>To </p>

<pre><code>number = number &gt;&gt;1;
</code></pre>

<p>I don't know if it would be faster in java, but it  works faster in old computer's assembly program(Division was expensive than just shifting)</p>

<p>If you use assembly you can access carry flags and optimize it.</p>

<p>For more information about it, refer <a href="https://stackoverflow.com/a/28640775/8614565">here.</a></p>

<p>Provided that <code>al</code> holds the target number and <code>bx</code> holds the target string address, and <code>cx</code> holds 8,</p>

<blockquote>
<pre><code>L1:                  ; This is the loop
mov dl, '0'      ; Ascii character zero
shl al, 1          ; Upper bit now in carry flag
adc dl, 0        ; Adds carry flag - 0 or 1
mov [bx], dl   ; Save digit to current position
inc bx             ; Next position
loop L1          ; Counts down cx
mov [bx], 0    ; Zero terminate (might need to use register)
</code></pre>
</blockquote>
    </div>