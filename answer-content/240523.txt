<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming things</h1>

<p>Be consistent in the way you name things. This applies to the words chosen, whether you abbreviate things or not, whether you separate multiple words or not. There are some names you are using that are not consistent. For example:</p>

<pre><code>def get_size_and_fcount_pathlib(scan_path):
</code></pre>

<p>You start with fully spelled out words separated by underscores, and then suddenly there is <code>fcount</code>, two words without separators and with one word being abbreviated. I would start by writing this out consistently as:</p>

<pre><code>def get_size_and_file_count_pathlib(scan_path):
</code></pre>

<p>If you want to reduce the size of the name, I would rather omit redundant parts of it. Is <code>pathlib</code> really adding anything to this? If <code>get_size_and_file_count()</code> gives you enough context to deduce what the function does, I would go for that.</p>

<p>Another issue is with this variable:</p>

<pre><code>file_count_collection = [size_gb, all_types_count, file_count, folder_count]
</code></pre>

<p>It says it is a file count collection, but it also contains the total size. I would change this to <code>size_and_file_count_collection</code>, to make it clear it also contains the size, and this also better matches the name of the function. Again, if you want to make it shorter, I would then drop <code>_collection</code> from the name, since <code>size_and_file_count</code> already implies it is more than one bit of information.</p>

<p>Arguably, <code>size_and_file_count</code> is also not completely descriptive since it also includes directory count and a count of all types of filesystem entities.
There might be an even better name for this, perhaps <code>directory_statistics</code>?</p>

<h1>Use a <code>class</code> to represent structured data</h1>

<p>The <code>file_count_collection</code> is just a list. Unless you read the code of this function, it is not obvious in which order you stored the size and counts in this list. It is better to create a <code>class</code> that represents this collection of data, where each piece will get its own name, like so:</p>

<pre><code>class size_and_file_count:
   def __init__(self, size_gb, all_types_count, file_count, folder_count):
       self.size_gb = size_gb
       self.all_types_count = all_types_count
       self.file_count = file_count
       self.folder_count = folder_count
</code></pre>

<p>Then, in <code>get_size_and_file_count()</code>, you can replace the last two lines with:</p>

<pre><code>return size_and_file_count(size_gb, all_types_count, file_count, folder_count)
</code></pre>

<p>And in the code that calls that function, instead of writing:</p>

<pre><code>result = get_size_and_file_count("...")
file_count = result[2]
</code></pre>

<p>You can now write:</p>

<pre><code>result = get_size_and_file_count("...")
file_count = result.file_count
</code></pre>

<h1>Don't convert values too early</h1>

<p>You are calculating the total size, and then converting it to a value in gigabytes (with only 2 decimals), and only storing that final result. What if I want to get the size of a directory that contains less than 10 megabytes of data? Your function will tell me it is 0.00 gigabytes big, which is not helpful. It is better to store the size in bytes, and only convert to gigabytes when printing the result, like so:</p>

<pre><code>print('Directory size in GB:         {:.2f} GB'.format(total_size / 1.0e9))
</code></pre>

<p>And of course also store the total size in bytes in the returned collection.</p>

<h1>Separate obtaining results from printing results</h1>

<p>Your function does two things at once: it calculates the results and it prints them. It is best to separate the two issues, and have <code>get_size_and_file_count()</code> only calculate the results and <code>return</code> them, and then have a seperate function that takes a <code>size_and_file_count</code> variables as a parameter and prints the values to the screen.</p>

<p>If you have made a <code>class size_and_file_count</code>, you could make the function that prints the results a member function of that class.</p>

<h1>What is <code>all_types_count</code>?</h1>

<p>There are many different types of filesystem entries besides regular files and directories; there are fifos, sockets, symlinks, character devices and so on.
I would expect a variable named <code>all_types_count</code> to count all of them. However, in your code you actually disregard all things that are neither regular file nor directory, and instead <code>all_types_count</code> just counts those regular files whose name does not start with <code>.</code>. So actually your <code>all_types_count</code> is just a <code>non_hidden_files_count</code>. Either this was your intention, in which case you should rename the variable, or you actually wanted to count all filesystem items, in which case your count is wrong.</p>

<h1>Optimizing the code</h1>

<p>If you want to make the code as fast as possible, there are several ways to do that. First, I would start by replacing the call to <code>glob()</code> with <code>os.walk()</code>. Since you want all files and directories anyway, the glob function is likely incurring an unnecessary overhead of comparing each item it finds against the glob pattern you gave. Also, <code>os.walk()</code> already splits the results for each directory in a list of file names and list of directory names, making your life a bit easier. It would look like:</p>

<pre><code>for root, dirs, files in os.walk(root_directory):
    folder_count += len(dirs)
    for f in files:
        if Path(root, f).is_file():
            ...
</code></pre>

<p>If you want more speed, then there are two other ways to consider, that can even be combined. First, write the function in C, and make a Python wrapper function around the C code. Second, you could try to paralellize the code, for example by scanning multiple directories in parallel. However, the latter is a lot of work, and there is a good chance it will not be faster at all, since you might actually not be CPU bound but I/O bound, and even if you are CPU bound, then the overhead of spawning multiple threads or tasks and synchronizing them might be more than the performance gain from the actual parallel execution of the code.</p>

<p>When you are interested in optimizing the code, start with <a href="https://stackoverflow.com/questions/1593019/is-there-any-simple-way-to-benchmark-python-script">benchmarking</a> it, and then see if the suggestions actually help with performance. Also, before trying to parallelize the code, actually check if your Python code is actually using 100% CPU when scanning directories. If not, it's not worth going that route.</p>
    </div>