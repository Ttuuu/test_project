<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>As a function</h2>
<p>When you write code, even as an example, always write it as a function. A function is returnable, and thus can be written differently than non returnable flat execution.</p>
<h2>Comment code mismatch</h2>
<blockquote>
<p><em>"Comments are just lies in waiting."</em><br>
<sub>...by unknown guru.</sub></p>
</blockquote>
<p>Your comments do not match the code. The comments specify lowercase status, your code capitalists the status. Which is correct is anyone's guess. <strike>I will assume the comments are correct and that the status is formatted upon display. (It makes the solution simpler)</strike> Changed my mind and will assume the code has been tested and is correct.</p>
<h2>Inefficiency === Inelegance</h2>
<p>The nested statements are not inelegant (in a function it would not need any <code>else</code> statements), its the two <code>Array.map</code> and three <code>Array.includes</code> that are very inefficient for the task at hand, which to me is ugly inelegance.</p>
<h2>Solution</h2>
<p>It is the number of online, connected children that you need to know.</p>
<p>If the number of online children</p>
<ul>
<li>is the same as the number of children then all are online.</li>
<li>is the less than as the number of children and not zero then some are online.</li>
<li>is zero then none are online</li>
</ul>
<p>The same applies for connected children.</p>
<p>Thus count the two types and use the counts to return the status, as follows</p>
<pre><code>function connectionStatus(clients) {
    const count = clients.length;
    var onC = 0, conC = 0;   
    for (const {connected, online} of clients) {
        conC += connected;
        onC += online;
    }
    if (onC === count) {
        if (conC === count) { return "Connected" }
        return conC ? "Partially disconnected" : "Disconnected";
    }
    return onC ? "Partially offline" : "Offline";
}

connectionStatus(parent.children);
</code></pre>
    </div>