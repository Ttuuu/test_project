<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I use this Extension method to ""fallback" to UTC so I can properly convert between exchange time, server time and clients local time. </p>

<pre><code>public static DateTime AsUTC(this DateTime dt)
 {
       switch (dt.Kind)
       {
            case DateTimeKind.Unspecified:
                return new DateTime(dt.Ticks, DateTimeKind.Utc);
            case DateTimeKind.Utc:
                return dt;
            case DateTimeKind.Local:
                return dt.ToUniversalTime();
             default:
                throw new NotSupportedException($"The provided {dt.Kind} did not exist when delivering this model, please update to latest version to support this date time type");                    
       }
}
</code></pre>

<p>I have noticed that sometime the DateTime.SpecifyKind is not working as expected on a given Service pack where creat a new date time always does. The method Specify Kind is just a wrapper around the create  this method anyway (when it works)
<a href="https://i.stack.imgur.com/tAe1O.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/tAe1O.png" alt="enter image description here"></a></p>

<p>We throw the error incase the framework updated and there is a not implemented method than to just leave ambiguity in a default implementation.</p>

<p>When reading data from the database call </p>

<pre><code>var myUtcDate= myDate.AsUTC();
</code></pre>

<p>As the it's a value type one doesn't update the instance, you'd have to write it in a new variable. </p>

<p>alternatively you can do something like this when reading:</p>

<pre><code>someClass.MyDateValue = reader.GetDateTime("FieldName").AsUTC();
</code></pre>
    </div>