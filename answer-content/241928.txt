<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a couple of comments here.</p>

<h3>Move "yayy" but copy "nay"?</h3>

<p>I do understand why you don't keep the size information as a template parameter on the type, but is there a real reason why not to keep it on the instance? I mean, why do you only have <code>int y</code> rather than <code>int x, y</code>?</p>

<p>I think this:</p>

<pre><code>// We can't do a copy since we don't know
// what size to allocate the array.
</code></pre>

<p>Is quite problematic. Not having a copying mechanism is (most of the time) due to resource sharing not being practical in the context. But for matrices, it seems very intuitive to copy them. That's one thing to think of, although your design might require (or be satisfied) with uncopyable matrices.</p>

<p>Another argument here is the way you want invalid access to the array to fail. Currently, it seems that you're going to access your array in the following way: <code>arr[2][5]</code>. What happens if your array has a size of 5*5 but you access it on <code>arr[6][10]</code>? That's right, a segmentation fault.</p>

<p>You do want your type to "fail safely", whether that's by emitting an exception or returning a default value and logging the error. Maybe today you handle calls to the array in the following way</p>

<pre><code>int x = 5, y = 5;
Array2D arr(x, y);
// ...

int requiredX = ..., requiredY = ..., value = 0;
if (requiredX &lt; x &amp;&amp; requiredY &lt; y) {
    value = arr[requiredX][requiredY];
}
</code></pre>

<p>In this case, you do have to manage your X and Y. Why not do it inside your class?</p>

<p>The only other way I see to properly guarantee memory safety is using a single pair of <code>const</code> (or <code>#define</code>d) height and width for your array. And in this case, why not include it in the type anyway, right? (not really, but I'm just making a point)</p>

<p>Anyway, I suggest putting the "height" of the matrix as a member. After all, it's just 4/8 more bytes and it's going to save you a fortune.</p>

<h3>Why is your size signed?</h3>

<p>Your array cannot have negative indices, right? Make your <code>x</code> and <code>y</code> members of an unsigned type (preferably the pointer type on the system, which is <code>size_t</code>)</p>

<h3>Destructor may throw</h3>

<p><code>delete[]</code> is not a safe operation in C++, it may throw. Now, it might be due to memory corruption around your <code>data</code> member, and it really <em>shouldn't</em> happen, but it may. Destructors shouldn't throw, says the law. So make sure it doesn't throw. You can just <code>try{} catch(...) {}</code> around the delete statement and log the error if anything happens.</p>

<h3>Use a middleware type for array access?</h3>

<p>As I mentioned earlier, you don't seem to restrict access to the array. The most idiomatic way, in my opinion, is to make a middleware mini-type to reference rows in the array. Have a simple implementation (ignoring any ownership discipline and move semantics):</p>

<pre><code>template &lt;class T&gt;
class ArrayRow {
public:
    ArrayRow(T* ptr, size_t size) : .... {}

    T&amp; operator[](size_t index) &amp;&amp; {
        if (index &gt;= row_size) throw ...
        return row[row_size];
    }

private:
    T* row;
    size_t row_size;
}
</code></pre>

<p>Of course, implement <code>const</code> aware access to this class, etcetera etcetera. The array should implement member access in the following way (again, ignoring many other concerns)</p>

<pre><code>ArrayRow operator[](size_t index) {
    if (index &gt;= x) throw ...
    return ArrayRow(data + y * index, y);
}
</code></pre>

<p>The only atrocity we are afraid to commit in this case is thus:</p>

<pre><code>ArrayRow row(nullptr, 0);
{
    Array2D arr(x, y);
    // ...
    row = arr[3];
}

int x = row[2]; // This happens after arr was released
</code></pre>

<p>This can be solved by restricting assignments to ArrayRow, and having that <code>&amp;&amp;</code> qualifier on the <code>operator[]</code> function (that requires the ArrayRow to be an rvalue or xvalue reference, practically saying it has to be the return value of a function, such as <code>Array2D::operator[]</code>.</p>

<h3>Just a couple more notes</h3>

<ol>
<li><p>I would implement the non-<code>const</code> array access in terms of the <code>const</code> one (cast <code>*this</code> to <code>const Array2D&lt;T&gt;</code>, then call the <code>[]</code> operator, then cast the result back to non-<code>const</code>. That way you don't have code repetition and make it easier to change the way array access is implemented.</p></li>
<li><p>I would create a non-throwing swap method and just call it from the assignment operator. Although it's not highly relevant to your case, I would still look at <a href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-throwing_swap" rel="nofollow noreferrer">Why you should create a non-throwing swap() function</a></p></li>
<li><p>As a style note, I would put your private members in the bottom of the class declaration and not at the top (are the clients of this class really going to be interested in the private fields more than in the public interface?)</p></li>
<li><p>Also a style note, but consider initializing stuff with uniform initialization syntax <code>{}</code> rather than default initialization syntax <code>()</code>. If your <code>Array2D&lt;T&gt;</code>'s <code>T</code>s are not going to have a constructor which takes an <code>std::initializer_list</code>, it's not really error-prone and generally preferable.</p></li>
</ol>
    </div>