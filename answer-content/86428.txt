<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In computer geometry, <strong>always use vectors</strong> if possible! Code gets more complicated if you try to work with Cartesian co-ordinates \$ (x, y) \$ or with line equations \$ y = mx + b \$. Here, for example, you have special cases for horizontal lines, \$ m = 0 \$, and vertical lines, \$ m = \infty \$.</p>

<p>So let's try to program this, sticking to vectors throughout.</p>

<p>First, let's review the problem. We have a line segment from <code>p1.p</code> to <code>p2.p</code> and we want to find the points of intersection with a circle centred at <code>self.p</code> and radius <code>self.r</code>. I'm going to write these as \$ p_1 \$, \$ p_2 \$, \$ q \$, and \$ r \$ respectively:</p>

<p><img src="https://i.stack.imgur.com/69nSy.png" alt="Circle with centre q with line segment p1-p2 crossing it"></p>

<p>Any point on the line segment can be written \$ p_1 + t(p_2 - p_1) \$ for a scalar parameter \$ t \$ between 0 and 1. We'll be using \$ p_2 - p_1 \$ often, so let's write \$ v = p_2 - p_1 \$.</p>

<p>Let's set this up in Python. I'm assuming that all the points are <a href="http://www.pygame.org/docs/ref/math.html#pygame.math.Vector2" rel="noreferrer"><code>pygame.math.Vector2</code></a> objects, so that we can add them and take dot products and so on. I'm also assuming that we're using Python 3, so that division returns a <code>float</code>. If you're using Python 2, then you'll need:</p>

<pre><code>from __future__ import division
</code></pre>

<p>I'm going to use capital letters for vectors and lower case for scalars:</p>

<pre><code>Q = self.p                  # Centre of circle
r = self.r                  # Radius of circle
P1 = constraint.point1      # Start of line segment
V = constraint.point2 - P1  # Vector along line segment
</code></pre>

<p>Now, a point \$ x \$ is on the circle if its distance from the centre of the circle is equal to the circle's radius, that is, if $$ \lvert x - q \rvert = r. $$ So the line intersects the circle when $$ \lvert p_1 + tv - q \rvert = r. $$ Squaring both sides gives $$ \lvert p_1 + tv - q \rvert^2 = r^2, $$ and now we can use a property of the <a href="https://en.wikipedia.org/wiki/Dot_product" rel="noreferrer">dot product</a> (namely \$ \lvert A \rvert^2 = A·A \$ for any vector \$ A \$) to get $$ (p_1 + tv - q)·(p_1 + tv - q) = r^2. $$ Expanding the dot product and collecting powers of \$ t \$ gives $$ t^2(v·v)+2t(v·(p_1 − q)) + (p_1·p_1 + q·q − 2p_1·q − r^2) = 0 $$ which is a quadratic equation in \$ t \$ with coefficients</p>

<p>$$\begin{array}{rl} a &amp;= v·v \\ b &amp;= 2(v·(p_1 − q)) \\ c &amp;= p_1·p_1 + q·q − 2p_1·q − r^2\end{array}$$</p>

<p>and solutions $$ t = { −b ± \sqrt{b^2 − 4ac} \over 2a }. $$ Let's compute the coefficients in Python:</p>

<pre><code>a = V.dot(V)
b = 2 * V.dot(P1 - Q)
c = P1.dot(P1) + Q.dot(Q) - 2 * P1.dot(Q) - r**2
</code></pre>

<p>The value \$ b^2 − 4ac \$ inside the square root is known as the <a href="https://en.wikipedia.org/wiki/Discriminant" rel="noreferrer"><em>discriminant</em></a>. If this is negative, then there are no real solutions to the quadratic equation; that means that the line misses the circle entirely.</p>

<pre><code>disc = b**2 - 4 * a * c
if disc &lt; 0:
    return False, None
</code></pre>

<p>Otherwise, let's call the two solutions \$ t_1 \$ and \$ t_2 \$.</p>

<pre><code>sqrt_disc = math.sqrt(disc)
t1 = (-b + sqrt_disc) / (2 * a)
t2 = (-b - sqrt_disc) / (2 * a)
</code></pre>

<p>If neither of these is between 0 and 1, then the line segment misses the circle (but would hit it if extended):</p>

<pre><code>if not (0 &lt;= t1 &lt;= 1 or 0 &lt;= t2 &lt;= 1):
    return False, None
</code></pre>

<p>It's not clear to me from your code exactly what you want to return in the case where there is an intersection, but it looks as if you want the closest point on the line segment to the centre of the circle. (Can you explain the geometric significance of this?)</p>

<p>Now, the closest point on the extended line to the centre of the circle is \$ p_1 + tv \$ where $$ t = { (q - p_1)·v \over \lvert v \rvert^2 } = { -b \over 2a }. $$ <a href="https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Vector_formulation" rel="noreferrer">See Wikipedia for an explanation</a>. But we want to ensure that the point is on the line segment, so we must clamp \$ t \$ to lie between 0 and 1.</p>

<pre><code>t = max(0, min(1, - b / (2 * a)))
return True, P1 + t * V
</code></pre>

<p>Notes</p>

<ol>
<li><p>I've changed the <code>return</code> statements so that instead of sometimes returning <code>False</code> and sometimes returning a point of intersection, the function always returns a tuple whose first element is a Boolean indicating whether there was an intersection, and whose second element is the point of intersection. When a function always returns the same kind of data, it's less likely that the caller will make a mistake in handling it.</p></li>
<li><p>I haven't tested any of the code in this answer (since I don't have a version of PyGame that supports <a href="http://www.pygame.org/docs/ref/math.html#pygame.math.Vector2" rel="noreferrer"><code>pygame.math.Vector2</code></a>). So there might be a bug or two. But <a href="http://garethrees.org/2015/04/09/collision/" rel="noreferrer">here's a JavaScript demo</a> I wrote using the technique described here.</p></li>
</ol>
    </div>