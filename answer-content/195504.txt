<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Other side of the coin</h3>
<blockquote>
<p>Is there are better solution then deleting the unnecessary sub-object?</p>
</blockquote>
<p>After thinking about this a little more, I feel like one could utilize <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" rel="nofollow noreferrer"><code>Object.entries()</code></a> with a recrusive assignment function and more es-6 features like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring" rel="nofollow noreferrer">Array Destructuring</a> to avoid the <code>delete</code> operation:</p>
<pre><code>const facesAttributes = {};
const handleEntries = ([key, value]) =&gt; typeof value === "object" ? Object.entries(value).forEach(handleEntries) : facesAttributes[key] = value;
Object.entries(json[0]).forEach(handleEntries);
</code></pre>
<p>So while it may not be any shorter, there is no need to use the <code>delete</code> operation. I tried using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" rel="nofollow noreferrer">Array.reduce()</a> but wasn't able to find a way to have a one-line arrow function that both assigned values to the accumulator object and returned the accumulator object.</p>
<h3><code>const</code> instead of <code>let</code></h3>
<p>I know it has already been mentioned that <code>const</code> can be used instead of <code>var</code> for some values that don't change (e.g. <code>imgUrl</code>, <code>initObject</code>, etc.). There are also some block-scoped variables declared using <code>let</code> that can be declared using <code>const</code> since they are never re-assigned: <code>facesAttributes</code> and <code>listItems</code>.</p>
<h3>Updated code</h3>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>(function(window) {
  var headersObject = new Headers();
  var photo = document.getElementById('analyzedPhoto');
  var attributesList = document.getElementById('attributes');

  headersObject.append('Ocp-Apim-Subscription-Key', '32fee7696d9545bdab41fd09ffb00034');
  headersObject.append('Content-Type', 'application/json');

  document
    .getElementById('analyse')
    .addEventListener('click', () =&gt; {
      const imgUrl = document.getElementById('imageUrl').value;

      const initObject = {
        headers: headersObject,
        method: 'post',
        body: '{"url": "' + imgUrl + '"}'
      }

      photo.src = imgUrl;

      const output = [{"faceId":"950c26ae-70f0-4365-8279-fcd987f56e70","faceRectangle":{"top":75,"left":32,"width":117,"height":117},"faceAttributes":{"gender":"male","age":37.0,"emotion":{"anger":0.0,"contempt":0.0,"disgust":0.0,"fear":0.0,"happiness":0.007,"neutral":0.992,"sadness":0.0,"surprise":0.0}}}];
const p1 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 100, output);
  });
        p1.then((json) =&gt; {
        
          const facesAttributes = {};
          const handleEntries = ([key, value]) =&gt; typeof value === "object" ? Object.entries(value).forEach(handleEntries) : facesAttributes[key] = value;
          Object.entries(json[0]).forEach(handleEntries);
      
          const listItems = [];

          for (let key in facesAttributes) {
            listItems.push('&lt;li class="list-item"&gt;&lt;span class="list-item-key"&gt;' +
              (key.slice(0, 1).toUpperCase()) +
              (key.slice(1)) + '&lt;/span&gt;: ' + facesAttributes[key] +
              '&lt;/li&gt;');
          }

          attributesList.innerHTML = listItems.join('');
        })
        .catch((error) =&gt; {
          console.dir(error);
          attributesList.innerHTML = 'Have you entered a valid image URL?';
        });
    });
})(window);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>html {
  overflow-y: scroll;
  background-color: rgba(245, 245, 245, 1.0);
  font-family: "Trebuchet MS", "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Tahoma, sans-serif;
}

.main-wrap {
  margin: 0 auto 30px;
  max-width: 800px;
}

#imageUrl {
  display: inline-block;
  width: 100%;
  max-width: 780px;
}

#analyzedPhoto {
  margin: 15px;
  border-radius: 3px;
  max-width: 100%;
  height: auto;
}

#attributes {
  list-style: none;
  padding-left: 0;
}

#attributes .list-item {
  margin-bottom: 10px;
}

.list-item-key {
  font-weight: 900;
  color: rgba(20, 20, 20, 1.0);
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="main-wrap"&gt;
  &lt;h1&gt;Enter Image URL&lt;/h1&gt;

  &lt;section&gt;
    &lt;p&gt;
      &lt;input type="text" value="https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Tesla3.jpg/220px-Tesla3.jpg" id="imageUrl" /&gt;
    &lt;/p&gt;
    &lt;button id="analyse"&gt;Analyse&lt;/button&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;img src="" id="analyzedPhoto" alt="Photo to analyze" /&gt;
  &lt;/section&gt;

  &lt;section&gt;
    &lt;h2&gt;Attributes&lt;/h2&gt;
    &lt;ul id="attributes"&gt;&lt;/ul&gt;
  &lt;/section&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>