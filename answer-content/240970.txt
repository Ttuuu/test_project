<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following proposed code:</p>

<ol>
<li>cleanly compiles</li>
<li>performs the desired functionality</li>
<li>takes into account the comments to the OPs question</li>
<li>properly checks for errors when calling <code>malloc()</code> and <code>realloc()</code> and <code>fopen()</code> and <code>fscanf()</code></li>
<li>the <code>while()</code> loop uses the function: <code>fscanf()</code> rather than a '1' as the loop condition</li>
<li>uses the value in <code>i</code> to determine when the end of the data is reached</li>
<li>sets the last instance of the struct to NULL per the OPs request </li>
<li>per Reinderien's answer and for ease of readability, statements like <code>&amp;(line_pointer + i)-&gt;value1</code> (which uses pointer addition) could be replaced with: <code>&amp;(line_pointer[i].value1</code> (which uses indexing)</li>
</ol>

<p>and now, the proposed code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

struct csv_line {
  int value1;
  float value3;
  int value2;
  char char1;
};

struct csv_line *line_pointer = NULL;

int main(void) 
{
    FILE *csvFile = NULL;
    csvFile = fopen("test.txt", "r");
    if (csvFile == NULL)
    {
        perror( "fopen failed" );
        exit(1);
    }

    size_t i = 1;
    line_pointer = malloc( sizeof(struct csv_line) * i );
    if( ! line_pointer )
    {
        perror( "malloc failed" );
        fclose( csvFile );
        exit( EXIT_FAILURE );
    }

    while ( (fscanf(csvFile, "%d,%f,%d,%c",
                &amp;(line_pointer + i)-&gt;value1,
                &amp;(line_pointer + i)-&gt;value3,
                &amp;(line_pointer + i)-&gt;value2,
                &amp;(line_pointer + i)-&gt;char1) ) == 4 )
    {
        i++;
        struct csv_line *temp = realloc(line_pointer, sizeof(struct csv_line) * i );
        if( ! temp )
        {
            perror( "realloc failed" );
            free( line_pointer );
            fclose( csvFile );
            exit( EXIT_FAILURE );
        }
    }

    fclose(csvFile);

    // per the request that the last entry contains NULL
    memset( &amp;line_pointer[i], 0, sizeof( struct csv_line ) );

    for( size_t k=0; k &lt; (i-1); k++ ) 
    {
        printf("%d, %.2f, %d, %c",
                (line_pointer + k)-&gt;value1,
                (line_pointer + k)-&gt;value3,
                (line_pointer + k)-&gt;value2,
                (line_pointer + k)-&gt;char1);
        printf("\n");
    }

    free(line_pointer);

    return EXIT_SUCCESS;
}
</code></pre>

<p>you could try this loop instead:</p>

<pre><code>size_t i = 0;

do
{
    i++;
    struct csv_line *temp = realloc(line_pointer, sizeof(struct csv_line) * i );
    if( ! temp )
    {
        perror( "realloc failed" );
        free( line_pointer );
        fclose( csvFile );
        exit( EXIT_FAILURE );
    }
} while ( (fscanf(csvFile, "%d,%f,%d,%c",
            &amp;(line_pointer + i)-&gt;value1,
            &amp;(line_pointer + i)-&gt;value3,
            &amp;(line_pointer + i)-&gt;value2,
            &amp;(line_pointer + i)-&gt;char1) ) == 4 );
</code></pre>

<p>so there is only one place allocating memory</p>
    </div>