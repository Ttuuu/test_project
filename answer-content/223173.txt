<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>I design my class exactly the same. The main difference I see is that you have a single <code>friend void swap()</code> standalone function where I break this into two separate functions. I have a member swap that does all the work and then a standalone swap that simply calls the member function.</p>

<pre><code> class X
 {
      public:
          void swap(X&amp; rhs) noexcept {}
 };
 void swap(X&amp; lhs, X&amp; rhs) {lhs.swap(rhs);}
</code></pre>

<h2>Code Review</h2>

<p>Why are you exposing implementation details about the internals of the class?</p>

<pre><code>public:
    struct Node
    {
        T m_data;
        Node* p_next = nullptr;
    };
</code></pre>

<hr>

<p>This is a bug:</p>

<pre><code>        auto iter = il.begin();
        pHead = new Node{*iter};
</code></pre>

<p>The list can easily be empty.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;initializer_list&gt;

struct X
{
        explicit X(std::initializer_list&lt;int&gt; const&amp; x) { std::cout &lt;&lt; x.size() &lt;&lt; "\n";}
};

int main()
{
    X   a{1};
    X   b{};
}

&gt; ./a.out
1
0
</code></pre>

<hr>

<p>Normally when you use iterators you only compare with <code>!=</code>. It will work with an initializer list. But I can see this causing <code>cut/paste</code> errors when you also start supporting <code>std::list&lt;T&gt;</code> in the future.</p>

<pre><code>        for (; iter &lt; il.end(); ++iter) {
        }
</code></pre>

<hr>

<p>Again we are assuming the other list has at least one node.</p>

<pre><code>    SimpleList(const SimpleList&amp; rhs)
        : SimpleList()
    {
        pHead = new Node{rhs.pHead-&gt;m_data};
</code></pre>

<hr>

<p>This loop looks more suitable with a <code>for(;;)</code> loop.</p>

<pre><code>        while(rhs_node = rhs_node-&gt;p_next){
            node-&gt;p_next = new Node{rhs_node-&gt;m_data};
            node = node-&gt;p_next;
        }
</code></pre>

<hr>

<p>Don't think you can gurantee <code>noexcept</code> here. You use the Copy Constructor which itself calls new which can throw. Thus you can't guarantee that no exception will be thrown during construction.</p>

<pre><code>SimpleList&amp; operator=(const SimpleList&amp; rhs) noexcept
</code></pre>

<hr>

<p>Looks like a good place for a <code>for(;;)</code> loop.</p>

<pre><code>        auto node = pHead;
        while(node = node-&gt;p_next)
        {
            delete pHead;
            pHead = node;
        }
</code></pre>

<hr>

<p>I see you are looking to return a quick fail.<br>
But I think this is flawed. Two empty list should compare equal should they not?</p>

<pre><code>        if(!pHead || !rhs.pHead || mSize != rhs.mSize){
            return false;
        }

TEST(CCTOR, equalityOfEmptyList)
{
    SimpleList&lt;int&gt; s0{};
    SimpleList&lt;int&gt; s1{};
    EXPECT_TRUE(s0 == s1);
}
</code></pre>
    </div>