<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that we don't have a fully-compilable program, or the example data. But you do! So you can actually measure what's taking up the time using a profiler.</p>

<hr>

<p>However, I would guess that the following lines are the problem:</p>

<pre><code>    QString line = QString::fromLatin1(line_BA);
    // Split line by spaces
    QStringList words = line.split(QRegExp("\\s+"), QString::SkipEmptyParts);
</code></pre>

<p>I guess that <code>fromLatin1()</code> effectively copies the <code>QByteArray</code> (i.e. memory allocation, then iterate over everything and copy it).</p>

<p>Then the regex will split every word, which involves something like iterating over the string to match the regex, memory allocation for each separate word, then copying each word.</p>

<p>None of this processing / memory allocation / copying is actually necessary to extract the data required.</p>

<p>Using the C++ standard library instead of Qt things, we could do something like:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cctype&gt;
#include &lt;cerrno&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

bool try_parse_float(char const*&amp; start, char const* end, float&amp; value)
{
    errno = 0;
    auto cend = const_cast&lt;char*&gt;(end);
    float v = std::strtof(start, &amp;cend);

    if (end == start)
        return false; // no conversion.

    if (errno == ERANGE)
        return false; // float out of range.

    // success!
    value = v;
    start = cend;

    return true;
}

bool parse(std::string const&amp; filename)
{
    std::ifstream file(filename);

    if (!file)
        return false;

    std::string line;
    while (std::getline(file, line))
    {
        auto i = line.data();
        auto end = line.data() + line.size();

        // parse whitespace
        while (i != end &amp;&amp; std::isspace(static_cast&lt;unsigned char&gt;(*i)))
            ++i;

        // empty line
        if (i == end)
            continue;

        // check for "vertex" prefix
        char const prefix[] = "vertex";
        auto prefix_size = sizeof(prefix) - 1;
        auto starts_with = std::strncmp(i, prefix, std::min&lt;std::size_t&gt;(prefix_size, end - i));

        if (starts_with != 0)
            return false; // "vertex" is missing or malformed.

        i += prefix_size;

        // convert floats (discards leading whitespace internally)
        float x;
        if (!try_parse_float(i, end, x))
            return false;

        float y;
        if (!try_parse_float(i, end, y))
            return false;

        float z;
        if (!try_parse_float(i, end, z))
            return false;

        // parse any trailing whitespace
        while (i != end &amp;&amp; std::isspace(static_cast&lt;unsigned char&gt;(*i)))
            ++i;

        if (i != end)
            return false; // there's something else on this line!

        std::cout &lt;&lt; "vertex: " &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; " " &lt;&lt; z &lt;&lt; "\n"; // (... or copy vertex to vector)
    }

    return true;
}

int main()
{
    std::cout &lt;&lt; (parse("test.stl") ? "success" : "failure") &lt;&lt; "\n";
}
</code></pre>

<p>Which is rather more fiddly, but does no extra copying. The messiness can be hidden neatly into separate functions if necessary.</p>

<hr>

<p>As a side note, you might want to return a bool indicating success / failure from that function. At the moment there would be no obvious difference between failing to read a file, or a valid file that just contains no data.</p>
    </div>