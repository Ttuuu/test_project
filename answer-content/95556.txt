<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think that caching should look the same on every function,</p>

<pre><code>cached_f(args):
    if args not in cache:
        cache[args] = f(args)
    return cache[args]
</code></pre>

<p>So Fibonacci becomes:</p>

<pre><code>cache = {}    
def fib(n):
    if n not in cache.keys():
        cache[n] = _fib(n)
    return cache[n]

def _fib(n):
    if n &lt; 2:
        return n
    else:
        return fib(n-1) + fib(n-2)
</code></pre>

<p>I'm not sure why the cache should not be global (other than namespace pollution), you could end with duplication of the results and also missing a cached result making you compute again what you wanted to avoid computing.</p>

<p>Also, you may initialize the cache with the base cases and skip them when writing the recursion, but that is not so clean.</p>
    </div>