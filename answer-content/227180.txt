<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(Note: Martin York posted an answer when this answer is halfway done.  The already written part will be left as is, but I try to avoid duplicating content after that.  Make sure you read that answer as well!)</p>

<h1>General</h1>

<p>These are general suggestions:</p>

<ol>
<li><p>First of all, please write the declaration of a template class on two lines and use more spaces — rather than:</p>

<pre><code>template&lt;class T&gt; class my_list;
</code></pre>

<p>this is more readble:</p>

<pre><code>template &lt;class T&gt;
class my_list;
</code></pre></li>
<li><p><code>public:</code> and <code>private:</code> labels usually go one indentation level left, e.g.:</p>

<pre><code>template &lt;class T&gt;
class my_list {
    using Foo = T*;
public:
    Foo foo();
private:
    Foo bar();
};
</code></pre></li>
<li><p>Do not use <code>0</code> as a null pointer constant.  Use <code>nullptr</code> instead.  See <a href="https://stackoverflow.com/q/1282295">What exactly is nullptr?</a>.</p></li>
<li><p>Use alias-declarations rather than <code>typedef</code>.  For example, instead of</p>

<pre><code>typedef my_list_iterator&lt;T&gt; iterator;
typedef my_list_const_iterator&lt;T&gt; const_iterator;
typedef T value_type;
typedef std::size_t size_type;
</code></pre>

<p>we prefer</p>

<pre><code>using iterator = my_list_iterator&lt;T&gt;;
using const_iterator = my_list_const_iterator&lt;T&gt;;
using value_type = T;
using size_type = std::size_t;
</code></pre>

<p>in modern C++.  They are <a href="https://stackoverflow.com/q/10747810">semantically equivalent</a>, but the second form is more readable, especially with complex types (e.g., <code>typedef void (&amp;MyFunc)(int,int);</code> vs. <code>using MyFunc = void(&amp;)(int,int);</code>).</p></li>
<li><p>Don't squash everything together like this:</p>

<pre><code>my_list(const my_list&amp; rhs) {create(rhs.begin(),rhs.end());}
</code></pre>

<p>At least use spaces:</p>

<pre><code>my_list(const my_list&amp; rhs) { create(rhs.begin(), rhs.end()); }
</code></pre>

<p>If I were you, I would probably make it even more readable:</p>

<pre><code>my_list(const my_list&amp; rhs)
{
    create(rhs.begin(), rhs.end());
}
</code></pre></li>
<li><p>I'm pretty sure the functionality you want to expose is <code>my_list</code> — all the rest is implementation detail and should not be accessed directly.  You can put everything in a namespace and use a conventional "detail" namespace:</p>

<pre><code>// replace "unicorn9378" with your own name for the namespace
namespace unicorn9378 {

    namespace detail {
        // implementation detail
    }

    // public interface

}
</code></pre>

<p>and then drop <code>my_</code> because "me" can be anyone.  Namespaces will help you with ADL (argument dependent lookup), so don't hesitate to use them even for small projects.</p></li>
<li><p>Since you are trying to imitate the standard <code>std::list</code>, there is some missing functionality.  I suggest that you check against a <a href="https://en.cppreference.com/w/cpp/container/list" rel="nofollow noreferrer">reference</a>.  Some features are nontrivial to implement (e.g., allocator support) but some of them really should be implemented (e.g., move operations).</p></li>
</ol>

<h1>Code</h1>

<p>So let's go through the code and find something else to improve:</p>

<hr>

<blockquote>
<pre><code>#ifndef my_list_h
#define my_list_h
</code></pre>
</blockquote>

<p>Macros are usually ALL_CAPS — use <code>MY_LIST_H</code>.  Also, this name is short and will cause name clash.  My solution is to add a <a href="https://www.random.org/strings/?num=1&amp;len=10&amp;digits=on&amp;upperalpha=on&amp;loweralpha=on" rel="nofollow noreferrer">random string</a> after it — for example, <code>MY_LIST_H_RwxhY7ucBR</code>.</p>

<hr>

<blockquote>
<pre><code>#include &lt;cstdlib&gt;
</code></pre>
</blockquote>

<p>If you include this header for <code>std::size_t</code>, use <code>#include &lt;cstddef&gt;</code> instead.  It is much cheaper and everyone knows that <code>&lt;cstddef&gt;</code> defines <code>std::size_t</code>.</p>

<hr>

<blockquote>
<pre><code>// forward declarations
template&lt;class T&gt; class my_list;
template&lt;class Value,class Pointer,class Reference&gt; class 
my_bidirectional_iterator;
template&lt;class T&gt; class my_list_iterator;
template&lt;class T&gt; class my_list_const_iterator;
</code></pre>
</blockquote>

<p>This really hurts my eyes.  As I mentioned before, use spaces and newlines.</p>

<hr>

<blockquote>
<pre><code>template&lt;class T&gt; class node {
    node(const T&amp; t = T()):data(t),next(0),prev(0) {}
    T data;
    node* next;
    node* prev;

    friend class my_list&lt;T&gt;;
    friend class my_bidirectional_iterator&lt;node&lt;T&gt;,T*,T&amp;&gt;;
    friend class my_bidirectional_iterator&lt;node&lt;T&gt;,const T*,const T&amp;&gt;;
};
</code></pre>
</blockquote>

<p>Rather than making everything private and friend everyone, just make things public — this is already implementation detail, after all.  The constructor is unnecessary and introduces an unneeded copy — just leave it out.  Like this:</p>

<pre><code>template &lt;class T&gt;
struct node {
    T data;
    node* next{nullptr};
    node* prev{nullptr};
};
</code></pre>

<p>Then this class will be an <a href="https://stackoverflow.com/q/4178175">aggregate</a> and you will be using <a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization" rel="nofollow noreferrer">aggregate initialization</a> to create nodes like this:</p>

<pre><code>node&lt;T&gt;{value, next_ptr, prev_ptr}
</code></pre>

<hr>

<blockquote>
<pre><code>template&lt;class Value,class Pointer,class Reference&gt; class my_bidirectional_iterator {
    public:
        // increment and decrement operators
        my_bidirectional_iterator operator++();
        my_bidirectional_iterator operator++(int);
        my_bidirectional_iterator operator--();
        my_bidirectional_iterator operator--(int);

        // bool comparison iterators
        bool operator==(const my_bidirectional_iterator&amp; other) const {return pos_==other.pos_;}
        bool operator!=(const my_bidirectional_iterator&amp; other) const {return pos_!=other.pos_;}

        // member access
        Reference operator*() const {return pos_-&gt;data;}
        Pointer operator-&gt;() const {return &amp;(pos_-&gt;data);}

    private:
        explicit my_bidirectional_iterator(Value* p=0):pos_(p) {}
        Value* pos_;
        template&lt;class U&gt; friend class my_list_iterator;
        template&lt;class U&gt; friend class my_const_list_iterator;
        template&lt;class U&gt; friend class my_list;
};

template&lt;class T&gt; class my_list_iterator: public my_bidirectional_iterator&lt;node&lt;T&gt;,T*,T&amp;&gt; {
    using my_bidirectional_iterator&lt;node&lt;T&gt;,T*,T&amp;&gt;::my_bidirectional_iterator;
    friend class my_list_const_iterator&lt;T&gt;;
    public:
        operator my_list_const_iterator&lt;T&gt;() {return my_list_const_iterator&lt;T&gt;(this-&gt;pos_);}
};

template&lt;class T&gt; class my_list_const_iterator: public my_bidirectional_iterator&lt;node&lt;T&gt;,const T*,const T&amp;&gt;
{
    friend class my_list_iterator&lt;T&gt;;
    using my_bidirectional_iterator&lt;node&lt;T&gt;,const T*,const T&amp;&gt;::my_bidirectional_iterator;
};
</code></pre>
</blockquote>

<p>Prefix <code>++</code> and <code>--</code> should return a <em>reference</em> to <code>*this</code>.</p>

<p>I don't really think you need the <code>bidirectional_iterator</code> class — just implement the two iterator types separately, there isn't very much boilerplate code.  If you insist to reduce duplicate code by extracting the common part into a base class, things will quickly get complicated — you need to use the CRTP (curiously recurring template pattern).  You will have to pass the derived classes as a template parameter to the base class for the base class to return the correct types.</p>

<p>Also, you forgot the required types: <code>value_type</code>, <code>iterator_category</code>, etc.  You can either supply them directly in the iterator classes:</p>

<pre><code>template &lt;class T&gt;
class list_iterator {
public:
    using value_type = T;
    using reference = T&amp;;
    using pointer = T*;
    using difference_type = std::ptrdiff_t;
    using iterator_category = std::bidirectional_iterator_tag;

    explicit list_iterator(node&lt;T&gt;* p = nullptr)
        :pos{p}
    {
    }

    list_iterator&amp; operator++();
    list_iterator&amp; operator--();
    list_iterator operator++(int);
    list_iterator operator--(int);

    bool operator==(const my_bidirectional_iterator&amp; other) const
    {
        return pos == other.pos;
    }
    bool operator!=(const my_bidirectional_iterator&amp; other) const
    {
        return pos != other.pos;
    }

    reference operator*() const
    {
        return pos-&gt;data;
    }
    pointer operator-&gt;() const
    {
        return &amp;pos-&gt;data;
    }

private:
    node&lt;T&gt;* pos;
};

// list_const_iterator similar
</code></pre>

<p>or you can specialize <code>std::iterator_traits</code>.  Note that this is a requirement of an <a href="https://en.cppreference.com/w/cpp/named_req/Iterator" rel="nofollow noreferrer">iterator</a>; if you don't implement these types, yours does not qualify as a real "iterator" and it will be undefined behavior to use it with the, say, standard algorithms.  </p>

<p>(<code>iterator_category</code> is one of <code>input_iterator_tag</code>, <code>output_iterator_tag</code>, <code>forward_iterator_tag</code>, <code>bidirectional_iterator_tag</code>, and <code>random_access_iterator_tag</code>, and represents the iterator category of the iterator.  The algorithms can usually provide better performance for more advanced iterators, and this information is not easily available otherwise.  For example, <code>lower_bound</code> will perform much better on random access iterators.)</p>

<hr>

<blockquote>
<pre><code>typedef my_list_iterator&lt;T&gt; iterator;
typedef my_list_const_iterator&lt;T&gt; const_iterator;
typedef T value_type;
typedef std::size_t size_type;
</code></pre>
</blockquote>

<p>Missing some of them.</p>

<hr>

<blockquote>
<pre><code>// constructors
my_list() {create();}
explicit my_list(size_type n,const T&amp; t=T()) {create(n,t);}
</code></pre>
</blockquote>

<p>The <code>create</code> function is a bit unidiomatic in C++.  Use member initializers (later) and make the default constructor <code>= default</code>.  Also, the size constructor is C++03 style — elements are default constructed (i.e., value initialized) instead of copy constructed from a default constructed element since C++11:</p>

<pre><code>my_list() = default; // requires member initializers
explicit my_list(size_type n)
{
    insert(end(), n); // I'll talk about this later
}
</code></pre>

<p>And there are <a href="https://en.cppreference.com/w/cpp/container/list/list" rel="nofollow noreferrer">many more constructors</a>.</p>

<hr>

<blockquote>
<pre><code>// copy constructor
my_list(const my_list&amp; rhs) {create(rhs.begin(),rhs.end());}
// assignment operator
my_list&amp; operator=(const my_list&amp;);
// destructor
~my_list() {clear();}
</code></pre>
</blockquote>

<p>Make a general iterator overload for <code>insert</code>.  No need for a special <code>create</code> function.</p>

<hr>

<blockquote>
<pre><code>// element access
T&amp; front() {return head_-&gt;data;}
const T&amp; front() const {return head_-&gt;data;}
T&amp; back() {return tail_-&gt;prev-&gt;data;}
const T&amp; back() const {return tail_-&gt;prev-&gt;data;}
</code></pre>
</blockquote>

<p>Good.</p>

<hr>

<blockquote>
<pre><code>// iterators
iterator begin() {return iterator(head_);}
const_iterator begin() const {return const_iterator(head_);}
iterator end() {return iterator(tail_);}
const_iterator end() const {return const_iterator(tail_);}
</code></pre>
</blockquote>

<p>Good.  Better if you add <code>cbegin</code>, <code>cend</code>, <code>rbegin</code>, etc.</p>

<hr>

<blockquote>
<pre><code>// capacity
bool size() const {return size_;}
bool empty() const {return size_==0;}
</code></pre>
</blockquote>

<p>There's a blatant typo here, can you find it?</p>

<hr>

<blockquote>
<pre><code>// modifiers
void clear();
iterator insert(iterator,const T&amp;);
iterator erase(iterator);
</code></pre>
</blockquote>

<p>You are missing a lot of overloads — see <a href="https://en.cppreference.com/w/cpp/container/list/insert" rel="nofollow noreferrer"><code>insert</code></a> and <a href="https://en.cppreference.com/w/cpp/container/list/erase" rel="nofollow noreferrer"><code>erase</code></a>.</p>

<hr>

<blockquote>
<pre><code>void push_back(const T&amp; t) {insert(end(),t);}
void push_front(const T&amp; t) {insert(begin(),t);}
void pop_back() {erase(iterator(tail_-&gt;prev));}
void pop_front() {erase(iterator(head_));}
</code></pre>
</blockquote>

<p>Good.  Also, <code>back</code> before <code>front</code>?  A little weird to me.</p>

<hr>

<blockquote>
<pre><code>void resize(size_type);
</code></pre>
</blockquote>

<p>There's another overload <code>resize(n, value)</code>.</p>

<hr>

<blockquote>
<pre><code>private:
    node&lt;T&gt; *head_,*tail_;
    size_type size_;
</code></pre>
</blockquote>

<p><em>Don't declare multiple entities in one declaration like this.</em>  It's easy to go wrong, both for the reader and the writer.  Declare one entity on one line and use member initializers:</p>

<pre><code>node&lt;T&gt;* head_{nullptr};
node&lt;T&gt;* tail_{nullptr};
size_type size_{0};
</code></pre>

<hr>

<blockquote>
<pre><code>void create();
void create(size_type, const T&amp; t = T());
void create(const_iterator,const_iterator);
void insertInternal(node&lt;T&gt;*,const T&amp;);
friend class my_list_iterator&lt;T&gt;;
friend class my_list_const_iterator&lt;T&gt;;
</code></pre>
</blockquote>

<p>As I said before, these <code>create</code> functions do not appear to be necessary — just use <code>insert</code>.</p>

<hr>

<blockquote>
<pre><code>template&lt;class Value,class Pointer,class Reference&gt; 
my_bidirectional_iterator&lt;Value,Pointer,Reference&gt; my_bidirectional_iterator&lt;Value,Pointer,Reference&gt;::operator++()
{
    pos_ = pos_-&gt;next;
    return *this;
}
</code></pre>
</blockquote>

<p>As I said before, this should return a reference.  Also, use a trailing return type to save some typing.  And I would implement it in the class definition directly.</p>

<hr>

<blockquote>
<pre><code>template&lt;class Value,class Pointer,class Reference&gt; 
my_bidirectional_iterator&lt;Value,Pointer,Reference&gt; 
my_bidirectional_iterator&lt;Value,Pointer,Reference&gt;::operator++(int)
{
    Value* prev= pos_;
    pos_ = pos_-&gt;next;
    return my_bidirectional_iterator(prev);
}
</code></pre>
</blockquote>

<p>You can use <code>std::exchange</code> for such things:</p>

<pre><code>template &lt;class T&gt;
list_iterator&lt;T&gt;&amp; list_iterator&lt;T&gt;::operator++(int)
{
    return list_iterator{std::exchange(pos, pos-&gt;next)};
}
</code></pre>

<hr>

<blockquote>
<pre><code>template&lt;class Value,class Pointer,class Reference&gt; 
my_bidirectional_iterator&lt;Value,Pointer,Reference&gt; 
my_bidirectional_iterator&lt;Value,Pointer,Reference&gt;::operator--()
{
    pos_ = pos_-&gt;prev;
    return *this;
}

template&lt;class Value,class Pointer,class Reference&gt; 
my_bidirectional_iterator&lt;Value,Pointer,Reference&gt; 
my_bidirectional_iterator&lt;Value,Pointer,Reference&gt;::operator--(int)
{
    Value* next= pos_;
    pos_ = pos_-&gt;prev;
    return my_bidirectional_iterator(next);
}
</code></pre>
</blockquote>

<p>See above.</p>

<hr>

<blockquote>
<pre><code>template&lt;class T&gt; my_list&lt;T&gt;&amp; my_list&lt;T&gt;::operator=(const my_list&amp; rhs)
{
    if (this!=&amp;rhs)
    {
        clear();
        create(rhs.begin(),rhs.end());
    }
    return *this;
}
</code></pre>
</blockquote>

<p>No, no, no.  Don't reinvent it.  Use the <a href="https://stackoverflow.com/q/3279543">copy and swap idiom</a>:</p>

<pre><code>template &lt;class T&gt;
list&lt;T&gt;&amp; list&lt;T&gt;::operator=(list other) // pass by value
{
    swap(other);
    return *this;
}
</code></pre>

<p>(You need to implement <code>swap</code>.)</p>

<hr>

<blockquote>
<pre><code>template&lt;class T&gt; void my_list&lt;T&gt;::clear()
{
    if (size_!=0)
    {
        node&lt;T&gt;* first = head_;
        while (first!=0)
        {
            node&lt;T&gt;* next = first-&gt;next;
            delete first;
            first = next;
        }
    }
    head_=tail_=0;
    size_=0;
}
</code></pre>
</blockquote>

<p>As Martin York mentioned, the <code>size != 0</code> check is redundant.  And you can avoid reimplementing the iterator:</p>

<pre><code>for (auto it = begin(); it != end();)
    delete (it++).pos;
</code></pre>

<hr>

<blockquote>
  <p>(The code for <code>insert</code> and <code>erase</code>)</p>
</blockquote>

<p>The <code>insert</code> and <code>erase</code> functions are too complex because you have to consider a lot of edge cases.  They have bugs, so fix them first.  If you redesign the list to use a sentinel, these functions will be simpler.</p>

<hr>

<blockquote>
<pre><code>template&lt;class T&gt; void my_list&lt;T&gt;::resize(size_type n)
{
    while (n&lt;size_)
        pop_back();
    while (n&gt;size)
        push_back(T());
}
</code></pre>
</blockquote>

<p><code>size</code> is the name of a function and cannot be compared to a variable of type <code>size_type</code>.  Typo?</p>

<h1>Conclusion</h1>

<p>This may seem like a lot of problems, but since you are fairly new to C++, I think this is good enough.  I'd say your code is quite nice in general.  In the future, remember that you have to instantiate all template functions (including member functions of class templates) to test them because of two-phase lookup, so make sure that every function is included your tests.  This should avoid the typo problems.  Also, since this is a linked list, an obvious edge case is zero, so test every function on an empty list to see if they work correctly.  Good work!</p>
    </div>