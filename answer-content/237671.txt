<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, great implementation. Getting the maximum amount of characters for the next chunk, finding the last space in that and then using it to get the correct chunk is fast and works well.
Other ideas that spring to mind would be to split the string into words first and rebuild with a loop, but I think this would be slower.</p>

<p>Yes this is O(n) - the solution's speed is proportional to the amount of input passed.</p>

<p>Your solution is a loop, not a recursion. A recursive solution would be a function which calls itself. If you want to see this style, let me know and I can post it.</p>

<p>Some improvements:</p>

<ul>
<li>You don't need to wrap the <code>exampleTxt</code> variable in backticks. This creates a template literal, which is unnecessary here - you can just use normal quotes.</li>
<li>Running the function with a 1 character string causes it to run the while loop, instead of returning early.</li>
<li>You can simplify the levels of nesting in the <code>if ... else</code> by returning early. If one of the <code>return</code>s is triggered then nothing after it will be run.</li>
</ul>

<pre><code>if (msg.length &lt; 1) {
    return 0;
}

if (msg.length &gt;= 1 &amp; msg.length &lt; 153) {
    return 1;
}

// while loop

return messages.length;
</code></pre>

<ul>
<li>In the <code>else if</code> you have <code>&amp;</code> (Bitwise AND) instead of <code>&amp;&amp;</code> (Logical AND).</li>
<li>Your <code>while</code> loop mutates the state of the <code>msg</code> variable. Mutation can lead to hard to find bugs - clone the string first (<code>remainingMsg = msg</code>) and use that in the loop instead.</li>
<li>It's not necessary to have the <code>getIndexOfLastSpace</code> function separate. You can use something like this:</li>
</ul>

<pre><code>var nextChunk = msg.substring(0, 153);
nextChunk = nextChunk.substring(0, nextChunk.lastIndexOf(' '));
</code></pre>

<ul>
<li>To make the function more reusable you could return the message chunks directly instead of the length. The user can then call <code>.length</code> on the returned value if that's all they want.</li>
<li>You could also pass the chunk length into the function as a parameter, so that it can handle chunking to any length.</li>
<li>If using the point above, setting some standard values as <code>const</code>s is a good practice.</li>
</ul>

<pre><code>const SMS_MESSAGE_MAX_LENGTH = 153;
// ...
getMessagesNumber(msg, SMS_MESSAGE_MAX_LENGTH);
</code></pre>

<ul>
<li>For a higher level abstraction you could use a curryable function to create new functions with specific chunk lengths. I've used ES5 format as that's how the question was asked.</li>
</ul>

<pre><code>var chunk = function(chunkLength) {
    return (function splitChunks (message) {
        // ...
    });
};

var chunkSmsMessage = chunk(153);
chunkSmsMessage('Lorem ipsum...');
</code></pre>
    </div>