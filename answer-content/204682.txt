<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>The name <code>nextperm</code> is misleading as (i) it generates permutations that <em>precede</em> its argument; (ii) it generates multiple permutations, not just one. So a name like <code>preceding_permutations</code> would be clearer.</p></li>
<li><p>There is no need for <code>try: ... finally:</code> or <code>raise StopIteration</code> or <code>return</code>. If we try to get additional values from a generator that has finished, then Python automatically raises <code>StopIteration</code>. For example:</p>

<pre><code>&gt;&gt;&gt; def generator():
...     yield 1
&gt;&gt;&gt; g = generator()
&gt;&gt;&gt; next(g)
1
&gt;&gt;&gt; next(g)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre></li>
<li><p>It's not necessary to convert <code>word</code> to a list on each iteration of the <code>while</code> loop, because on subsequent iterations we already have this list in the variable <code>wordlist</code>.</p></li>
<li><p>All the permutations are the same length, so it is not necessary to reassign <code>length</code> on each loop.</p></li>
<li><p>This loop goes all the way down to <code>index_1</code>:</p>

<pre><code>for index_2 in range(length, index_1-1, -1):
</code></pre>

<p>But when <code>index_2 == index_1</code>, the condition <code>wordlist[index_2] &lt; wordlist[index_1]</code> can never be true. So this iteration is wasted. It would be better to write the second loop like this:</p>

<pre><code>for index_2 in range(length, index_1, -1):
</code></pre></li>
<li><p>Reversed ranges are quite tricky to reason about, and this kind of mistake is easy to make, so we should consider using <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer"><code>reversed</code></a> instead to make things simpler:</p>

<pre><code>for index_2 in reversed(range(index_1 + 1, length + 1)):
</code></pre>

<p>(And similarly for <code>index_1</code>.)</p></li>
<li><p>When I read the name "length", I expect this to be the length of the word, not the length of the word minus one. So it would be easier to follow the logic if we had <code>length = len(wordlist)</code>, and adjusted the ranges accordingly.</p></li>
<li><p>The code reverses the last part of <code>wordlist</code>, leaving the first part unchanged:</p>

<pre><code>_first = wordlist[0:index_1+1]
_second = wordlist[-1:index_1:-1]
wordlist = _first + _second
</code></pre>

<p>It would make sense to implement this using a <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">slice assignment</a>:</p>

<pre><code>wordlist[index_1 + 1:] = reversed(wordlist[index_1 + 1:])
</code></pre>

<p>This has several advantages: we avoid having to take the slice for the first part of the list, we reuse the memory in <code>wordlist</code>, and the use of <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer"><code>reversed</code></a> makes it clear what is happenig and reduces the risk of getting the slice indexes wrong.</p></li>
<li><p>The names <code>index_1</code> and <code>index_2</code> are used a lot: it would shorten the code and make it easier to read if we had names like <code>i</code> and <code>j</code>.</p></li>
<li><p>The <code>stoploop</code> logic can be removed if we introduce a local function that generates pairs of indexes:</p>

<pre><code>def indexes():
    for i in reversed(range(length - 1)):
        for j in reversed(range(i + 1, length)):
            yield i, j
</code></pre>

<p>Now the two loops over the indexes can be combined into one:</p>

<pre><code>for i, j in indexes():
</code></pre>

<p>and since we now have a single loop, we can break out of it using <code>break</code>, with no need for <code>stoploop</code>.</p></li>
</ol>

<h3>2. Revised code</h3>

<pre><code>def preceding_permutations(word):
    """Generate the permutations of word that precede it, in reverse
    lexicographical order.

    &gt;&gt;&gt; ' '.join(preceding_permutations('bdca'))
    'bdac bcda bcad badc bacd adcb adbc acdb acbd abdc abcd'

    """
    word = list(word)
    length = len(word)
    def indexes():
        for i in reversed(range(length - 1)):
            for j in reversed(range(i + 1, length)):
                yield i, j
    while True:
        for i, j in indexes():
            if word[j] &lt; word[i]:
                word[j], word[i] = word[i], word[j]
                word[i + 1:] = reversed(word[i + 1:])
                yield ''.join(word)
                break
        else:
            break
</code></pre>
    </div>