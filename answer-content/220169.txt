<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>

<p>There is a case that requires NFA instead of simple DFA to recognize string (of course it is possible to convert NFA to DFA):</p>

<pre><code>eval("aaab", "a*ab");
</code></pre>

<p>Gives false, even though the string matches the regex. Disallowing same character after * fixes the problem too.</p>

<h2>Style</h2>

<p><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">why-is-using-namespace-std-considered-bad-practice</a>.</p>

<hr>

<p>Pass by const reference for read-only access. In the case of <code>eval</code> and availability of C++17, one could use <code>std::string_view</code>. I would advise taking the input range as input iterator, that would allow matching files, input from console, etc.</p>

<hr>

<pre><code>(int)p[i+1] == 42
</code></pre>

<p>I do not see why that is preferred to</p>

<pre><code>p[i + 1] == '*'
</code></pre>

<p>more readable version makes comment obsolete.</p>

<hr>

<pre><code>if(j &lt; s.length()) return false;
    else return true; 
</code></pre>

<p>Could be rewritten as</p>

<pre><code>return j == s.length();
</code></pre>

<p>Note that for this a bug about running over the string should be fixed, the bug is described below. <code>&gt;=</code> will work too.</p>

<hr>

<p>There are also no checks if string is already fully traversed in conditions with *. Although all implementations that I know of store null terminator at the end, this will not work on arbitrary ranges of characters.</p>

<hr>

<p>I agree with <a href="https://codereview.stackexchange.com/users/308/konrad-rudolph">KonradRudolph</a> that comments do not contribute anything useful. </p>

<pre><code>// is next character is wildcard
</code></pre>

<p>This comment is misleading. * is called <a href="https://en.wikipedia.org/wiki/Kleene_star" rel="nofollow noreferrer">Kleene star</a>. Without looking at ASCII table one would assume there is a bug.</p>

<hr>

<h2>Runtime complexity</h2>

<p>I believe runtime is <span class="math-container">\$\mathcal{O}(n)\$</span> in the worst case, where <span class="math-container">\$n\$</span> is length of input string. Think about it: the code does a single pass over a string, and doesn't reroll. </p>

<hr>

<h2>Theory</h2>

<p>I would advise learning method of transforming NFA to DFA. It's great to learn parsing techniques, but there tools for that like flex, bison, etc exist, if you just want to hammer the nail into it's place.</p>

<hr>

<p>I would assume <code>.*</code> means match any sequence of characters, as by logic in the question even doing <code>|</code> for all characters in the alphabet will make it impossible to describe just any combination of letters in the alphabet. Note that such a language is in the set of regular languages, as it is possible to construct DFA for it. May be I am wrong though, as my assumption stems from javascript regex.</p>
    </div>