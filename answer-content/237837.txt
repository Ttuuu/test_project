<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With regard to if you need multiple exceptions or not:<br>
I'd argue not in this particular situation, multiple exceptions are great for if you want to do different logic to handle them(so you plan to catch <code>PasswordFormatException</code> because that needs to be handled differently to your other validation errors).</p>

<p>To solve this you can add multiple constants on the same class if you want to return the code for what's invalid at the point you throw it:</p>

<pre class="lang-php prettyprint-override"><code>class CaliException extends \Exception {
    const INVALID_USERNAME = "DM:USERCA:0001";
    const INVALID_PASSWORD = "DM:USERCA:0002";
    const INVALID_LAST_ACTIVITY_TIME = "DM:USERCA:0003";
    const INVALID_CREATION_TIME = "DM:USERCA:0004";

    private $caliCode;

    // Note that caliCode is now required, forcing you to pass in a constant
    // to say what the error is
    public function __construct(string $caliCode, string $message = "",
                                int $code = 0, Throwable $previous = null) {
        parent::__construct($message, $code, $previous);

        $this-&gt;caliCode = $caliCode;
    }

    function getCaliCode(): string {
        return $this-&gt;caliCode;
    }
}

// ....
// And then when you use it you now say it's a username or password field that failed validation

throw new CaliException(CaliException::INVALID_USERNAME, 'Username must not contain special characters');
</code></pre>

<p>As for if this should extend InvalidArgumentException:<br>
I'd argue not, this feels more like you should have a class for UserInputValidationError or similar and extend this for your purpose. Failing validation of user input is not a fundamental problem with the program which InvalidArgumentException would imply but instead a natural consequence of having to handle user inputs.</p>
    </div>