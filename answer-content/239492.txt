<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use The Rule</h3>
<p>Don't search for words that match the rule! You already know the rule.  Use it to generate the BFF words.  That is, start with a common pet and filter out all the words that aren't two letters longer or that don't have all the letters in the common pet.  The result is a list of the BFF words for that pet.  The non-BFF words are generated using the same rule, but starting from an uncommon pet.  Runs in about 125 ms.</p>
<pre><code>import random
from collections import Counter

COMMON_PET = ["dog", "cat", "lizard", "rabbit", "hamster", "fish"]
UNCOMMON_PET = ["bear", "rhino", "lion", "tiger", "viper", "hyena"]

def BFF_word(pet, word_list):
    word_len = len(pet) + 2
    count = {letter:pet.count(letter) for letter in pet}

# only keep words that have the right length, no punctuation,
# and the right numbers of letters, and also don't contain
# the common pet, e.g. 'rabbited' -&gt; 'rabbit' (too easy). 
BFFs = [word for word in word_list
            if len(word) == word_len
            if word.isalpha()
            if all(count[letter]&lt;=word.count(letter) for letter in count)
            if pet not in word
            ]


    # uncomment to see how many BFFs there are and the first few
    #print(pet, len(BFFs), BFFs[:5])

    return random.choice(BFFs)

    
def main():
    # I just used a local word list
    with open("/usr/share/dict/words") as f:
        words = [line.strip().lower() for line in f]

    print("BFF words")
    for pet in COMMON_PET:
        word = BFF_word(pet, words)
        print(f'{word} -&gt; {pet}')

    print("non-BFF words")
    for pet in UNCOMMON_PET:
        word = BFF_word(pet, words)
        print(f'{word} -&gt; {pet}')

if __name__ == "__main__":
    main()
</code></pre>
    </div>