<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not familiar with the Clang sanitization command-line options so I can't give any feedback about those,
but regarding the CMake code I would suggest the following <em>CMakeLists.txt</em> file</p>

<pre class="lang-none prettyprint-override"><code>cmake_minimum_required(VERSION 3.13)
project(FirstProject C)

find_package(Curses REQUIRED)

add_executable(${CMAKE_PROJECT_NAME} main.c)

target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE ${CURSES_INCLUDE_DIR})
target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE ${CURSES_LIBRARIES})

if(NOT CMAKE_C_COMPILER_ID STREQUAL "Clang")
  message(WARNING "Use the Clang compiler instead. "
                  "FirstProject officially supports Clang "
                  "(although other compilers might work).") 
endif()       

target_compile_features(${CMAKE_PROJECT_NAME} PRIVATE c_std_99)
target_compile_options(${CMAKE_PROJECT_NAME} PRIVATE
  $&lt;$&lt;C_COMPILER_ID:Clang&gt;:
    -Weverything
    -fsanitize=undefined,integer,implicit-conversion,nullability,address,leak,cfi
    -flto
    -fvisibility=default&gt;)
target_link_options(${CMAKE_PROJECT_NAME} PRIVATE
  $&lt;$&lt;C_COMPILER_ID:Clang&gt;:
    -fsanitize=undefined,integer,implicit-conversion,nullability,address,leak,cfi
    -flto&gt;)
</code></pre>

<h1>Some comments</h1>

<h2>Avoid using FILE(GLOB) to specify source code files</h2>

<p>Avoid using <a href="https://cmake.org/cmake/help/latest/command/file.html?highlight=file" rel="nofollow noreferrer"><code>FILE(GLOB)</code></a>, instead specify the source code files explicitly either by</p>

<pre class="lang-none prettyprint-override"><code>add_executable(${CMAKE_PROJECT_NAME} main.c)
</code></pre>

<p>or</p>

<pre class="lang-none prettyprint-override"><code>add_executable(${CMAKE_PROJECT_NAME})
target_sources(${CMAKE_PROJECT_NAME} PRIVATE main.c)
</code></pre>

<p>Åšee also <a href="https://stackoverflow.com/questions/32411963/why-is-cmake-file-glob-evil">https://stackoverflow.com/questions/32411963/why-is-cmake-file-glob-evil</a></p>

<h2>Use target_* commands</h2>

<p>Avoid</p>

<ul>
<li>using <a href="https://cmake.org/cmake/help/latest/command/include_directories.html?highlight=include_directories#command:include_directories" rel="nofollow noreferrer"><code>include_directories()</code></a></li>
<li>setting <a href="https://cmake.org/cmake/help/latest/envvar/CFLAGS.html?highlight=cmake_c_flags" rel="nofollow noreferrer"><code>CMAKE_C_FLAGS</code></a> directly</li>
</ul>

<p>Instead use</p>

<ul>
<li><a href="https://cmake.org/cmake/help/latest/command/target_compile_features.html?highlight=target_compile_features#command:target_compile_features" rel="nofollow noreferrer"><code>target_compile_features()</code></a></li>
<li><a href="https://cmake.org/cmake/help/latest/command/target_compile_options.html?highlight=target_compile_options#command:target_compile_options" rel="nofollow noreferrer"><code>target_compile_options()</code></a></li>
<li><a href="https://cmake.org/cmake/help/latest/command/target_include_directories.html?highlight=target_include_directories#command:target_include_directories" rel="nofollow noreferrer"><code>target_include_directories()</code></a></li>
<li><a href="https://cmake.org/cmake/help/latest/command/target_link_libraries.html?highlight=target_link_libraries#command:target_link_libraries" rel="nofollow noreferrer"><code>target_link_libraries()</code></a></li>
<li><a href="https://cmake.org/cmake/help/latest/command/target_link_options.html?highlight=target_link_options#command:target_link_options" rel="nofollow noreferrer"><code>target_link_options()</code></a></li>
</ul>

<p>The <a href="https://cmake.org/cmake/help/latest/module/FindCurses.html?highlight=ncurses" rel="nofollow noreferrer">FindCurses</a> module does not yet support imported targets as of today (2 January 2019, CMake 3.13.2) so it needs to 
be used in the old style </p>

<pre class="lang-none prettyprint-override"><code>target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE ${CURSES_INCLUDE_DIR})
target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE ${CURSES_LIBRARIES})
</code></pre>

<p>In the future (when support has been added to CMake for imported targets in FindCurses) the two lines should be replaced by the line:</p>

<pre class="lang-none prettyprint-override"><code>target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE Curses::Curses)
</code></pre>

<p>Instead of setting the CMake variable <a href="https://cmake.org/cmake/help/latest/variable/CMAKE_C_STANDARD.html?highlight=cmake_c_standard" rel="nofollow noreferrer"><code>CMAKE_C_STANDARD</code></a></p>

<pre class="lang-none prettyprint-override"><code>set(CMAKE_C_STANDARD 99)
</code></pre>

<p>is good practice to use  <a href="https://cmake.org/cmake/help/latest/command/target_compile_features.html?highlight=target_compile_features#command:target_compile_features" rel="nofollow noreferrer"><code>target_compile_features()</code></a> instead </p>

<pre class="lang-none prettyprint-override"><code> target_compile_features(${CMAKE_PROJECT_NAME} PRIVATE c_std_99)
</code></pre>

<p>In this very case it makes no practical difference  but for a
 C++ header-only library, such compile features could be specified in the INTERFACE</p>

<pre class="lang-none prettyprint-override"><code> add_library(myheaderonly INTERFACE)
 target_compile_features(headeronlylib INTERFACE cxx_std_11)
</code></pre>

<p>to provide usage requirements for consumers of the library (see also <a href="https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html" rel="nofollow noreferrer">https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html</a>)</p>

<p>The <code>target_link_options()</code> line was added to be able to build the executable. (I am not sure it is correct).</p>

<h2>Use generator expressions</h2>

<p>The <a href="https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html" rel="nofollow noreferrer">generator expression</a></p>

<pre class="lang-none prettyprint-override"><code>$&lt;$&lt;C_COMPILER_ID:Clang&gt;:-Weverything -fsanitize=undefined,integer,implicit-conversion,nullability,address,leak,cfi -flto -fvisibility=default&gt;
</code></pre>

<p>is expanded to </p>

<pre class="lang-none prettyprint-override"><code>-Weverything -fsanitize=undefined,integer,implicit-conversion,nullability,address,leak,cfi -flto -fvisibility=default
</code></pre>

<p>when the Clang compiler is used, but for other compilers it is expanded to nothing.</p>

<h2>Avoid setting CMAKE_C_COMPILER</h2>

<p>Instead of setting the CMake variable <code>CMAKE_C_COMPILER</code>, give a <code>WARNING</code> or a <code>FATAL_ERROR</code> whenever a  non-supported C compiler is used.</p>

<pre class="lang-none prettyprint-override"><code>if(NOT CMAKE_C_COMPILER_ID STREQUAL "Clang")
  message(WARNING "Use the Clang compiler instead. FirstProject officially supports Clang (although other compilers might work).") 
endif()       
</code></pre>

<p>(<code>WARNING</code> could be replaced by <code>FATAL_ERROR</code> to prevent the use of any other C compiler than Clang)</p>

<p>To compile the project, specify the C compiler with the environment variable <a href="https://cmake.org/cmake/help/latest/envvar/CC.html?highlight=cmake_c_compiler" rel="nofollow noreferrer"><code>CC</code></a> </p>

<pre class="lang-none prettyprint-override"><code>mkdir /tmp/build
cd /tmp/build
CC=clang cmake -G Ninja ~/FirstProject
ninja -v
</code></pre>

<p>Use the <a href="https://ninja-build.org/" rel="nofollow noreferrer">ninja</a> command-line flag <code>-v</code>  if you want to see the actual commands being run.</p>
    </div>