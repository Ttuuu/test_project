<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The following solution in Java should be within the boundaries of time and space complexity:</p>

<pre><code>public int solution(int[] A)
{
    java.util.HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(A.length); //O(n) space
    for (int i : A) // O(N)
    {
        if (!map.containsKey(i))
        {
            map.put(i, i);
        }
    }
    int smallestPositive = 1;
    for (int i = 1; i &lt; 1000001; i++) // ~O(N)
    {
        if (map.containsKey(i) &amp;&amp; map.get(i) &lt;= smallestPositive)
        {
            smallestPositive = map.get(i) + 1;
        }
    }
    return smallestPositive;
}
</code></pre>

<p>I was about to write that you might even ditch the <code>HashMap</code> and loop over <code>A</code> in the second loop as 1,000,000 is a constant and should be negligible, but it looks like they specifically made a point in the question that \$N\$ is 100,000 which is smaller so you can consider the second loop to be of \$O(n)\$ time.</p>

<p>It sums up to \$O(n) + O(n) = O(n)\$ time and \$O(n)\$ space for the map.</p>
    </div>