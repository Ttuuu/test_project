<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I reviewed <code>LangtonsAnt.java</code> only.</p>

<h2>Observe Separation of concerns</h2>

<p>The class violates this <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">principle</a> . The class is responsible for both applying Langton's Ant rules, and implementing the world as two dimension array. these are two separate topics that may have multiple implementations. the rules engine should be concerned with deciding where is the next position of the ant and possibly color change of one or more cells. the world can be implemented as array, some collection or something else (even a <code>String</code> is viable, as it have indices of its characters) and it knows how to represent state and movement, it knows to get current position of the ant (possibly multiple ants?), and perhaps other features (undo?)</p>

<h2>Avoid magic numbers and String literals</h2>

<p>instead of explaining the possible values a cell can have in comments, make constants:<br>
<code>public static final int WHITE_CELL = 0;</code><br>
or better yet - if a variable can hold a finite predefined set of values - make it an enum. this is especially useful for the direction literals. this way you get the compiler to check for typos.</p>

<p>another added bonus of enum is that it supports conversion of String value from/to int (ordinal). so you do not need to ask on the String value when populating the matrix with int values.</p>

<h2>Express the state machine in map</h2>

<p>applying the rules of Langton's Ant is implemented as a set of if statements. this is error prone and cumbersome. a better way is to implement the rules as set of key-value pairs that can be put in a map. you can concatenate the key factors (color + direction) and get the desired direction. this way you can read the rules from file as String key value pairs and support different set of rules! (and have it in one <code>RuleEngine</code> class that is responsible for that only!)</p>

<h2>Duplicated Code</h2>

<p>The constructor fills the world with zeros. but this is exactly what's done in <code>clear()</code></p>

<h2>Fill array with zeros</h2>

<p>while on the subject, Java 8 added <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#setAll-int:A-java.util.function.IntUnaryOperator-" rel="nofollow noreferrer"><code>setAll()</code></a> to Arrays class. it works on one dimensional array, so it saves the inner loop. However, it so happens that <code>0</code> is the default value for uninitialized int, so declaring a new (one dimension) array gives you the desired result.  </p>
    </div>