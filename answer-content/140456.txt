<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't have to run the same regex twice by first checking if it matches and then replacing parts. You can do everything in a single call to <code>Regex.Replace</code>. If it won't match then the string remains unchanged.</p>

<pre><code>foreach (var toMatch in searchStrings)
{
    toSearchInside = Regex.Replace(
        toSearchInside, 
        string.Format(pattern, toMatch), 
        CreateReplacement(toMatch), 
        RegexOptions.IgnoreCase);
}
</code></pre>

<hr>

<p>If you need more control over the replacement process you can use the <code>MatchEvaluator</code>. This will allow you to evaluate each single replacement.</p>

<p>This is not exactly what you are doing in your code but in case you should need it here's an example:</p>

<pre><code>foreach (var toMatch in searchStrings)
{
    var regex = new Regex(string.Format(pattern, toMatch), RegexOptions.IgnoreCase);

    // Evaluate each match and create a replacement for it.
    toSearchInside = regex.Replace(toSearchInside, m 
        =&gt; CreateReplacement(m.Groups[1].Value));
}
</code></pre>

<p>where the <code>m</code> is a <code>Match</code> object for the current match.</p>
    </div>