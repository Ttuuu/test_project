<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>In <code>get_raw_bytes</code> you should use <code>with</code> to close the file.
Without using a <code>with</code> or <code>.close</code> the file is not guaranteed to close and so can cause problems depending on how nice Python is feeling on being to you.</p>

<p>Don't leave bugs to change.</p></li>
<li><p>The code is fairly good, but <code>get_debiased_bytes</code> is doing three things at once.</p>

<ol>
<li><p>Converting bytes (<span class="math-container">\$2^8\$</span>) to crumbs (<span class="math-container">\$2^2\$</span>).</p>

<pre class="lang-py prettyprint-override"><code>for byte in raw_bytes:
    for k in range(0, 8, 2):
        bit1 = byte &gt;&gt; k &amp; 1
        bit2 = byte &gt;&gt; k + 1 &amp; 1
</code></pre></li>
<li><p>Debiasing the crumbs to bits.</p>

<pre class="lang-py prettyprint-override"><code>if bit1 != bit2:
    debiased_byte = debiased_byte &lt;&lt; 1 | bit1
</code></pre></li>
<li><p>Joining bits to bytes.</p>

<pre class="lang-py prettyprint-override"><code>debiased_byte = debiased_byte &lt;&lt; 1 | bit1
bit_counter += 1
if bit_counter == 8:
    arr_debiased_bytes.append(debiased_byte)
    debiased_byte = 0
    bit_counter = 0
</code></pre></li>
</ol>

<p>Bundling all this together is making your code harder to read.</p></li>
<li><p>When extracting the above functions I would use <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator functions</a>.
This has a couple of benefits:</p>

<ol>
<li>In Python the <a href="https://en.wikipedia.org/wiki/Iterator_pattern" rel="nofollow noreferrer">iterator pattern</a> has a lot of sugar.</li>
<li>By using a generator we have more options on how to deal with the length.
We can truncate the size on the input, or only take <code>length</code> amount of items from the sequence after it's been made.</li>
</ol></li>
<li><p>I'm not a fan of using <code>byte &gt;&gt; k</code> to get the bits / crumb.</p>

<p>Since bit operators are not commonly used their order of precedence can be confusing.
This doesn't help when you're mixing both bitwise and integer operators.</p>

<p>By using this you're adding a requirement for naming <code>k</code> when there is no need.</p></li>
<li><p>You can extract the nibble in a readable form by using <code>byte &amp; 0b11</code>.</p></li>
<li><p>The code to debiase the crumbs is smart, but not exactly readable.</p>

<p>We know only two of the four states can yield data.
And so just hard coding the values can allow people to just read the code and figure it out faster.</p>

<p>By using the <code>0b</code> prefix this can make the code really quite simple.</p></li>
<li><p>The code for building the bytes is ok. It's fairly easy to read.</p></li>
<li><p>The code for building the bytes can silently swallow data.</p>

<p>I personally would not be a fan of this. Instead I would yield the byte regardless.
There are two forms this can take, padding the bits on the left or right.</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>def bytes_to_crumbs(bytes):
    for byte in bytes:
        for _ in range(4):
            yield byte &amp; 0b11
            byte &gt;&gt;= 2


def debiase_crumbs(crumbs):
    for crumb in crumbs:
        if crumb == 0b10:
            yield 1
        elif crumb == 0b01:
            yield 0


def bits_to_bytes(bits):
    """Just discard."""
    try:
        while True:
            byte = next(bits)
            for _ in range(7):
                byte &lt;&lt;= 1
                byte |= next(bits)
            yield byte
    except StopIteration:
        pass


def bits_to_bytes(bits):
    """Pad to the right - 1111000."""
    try:
        while True:
            byte = next(bits)
            for _ in range(7):
                byte &lt;&lt;= 1
                byte |= next(bits, 0)
            yield byte
    except StopIteration:
        pass


def bits_to_bytes(bits):
    """Pad to the left - 00001111."""
    try:
        while True:
            byte = next(bits)
            for _ in range(7):
                try:
                    bit = next(bits)
                except StopIteration:
                    yield byte
                    return
                byte &lt;&lt;= 1
                byte |= bit
    except StopIteration:
        pass


def get_debiased_bytes(length):
    with open('/dev/hwrng', 'rb') as f:
        _bytes = f.read(length)
    return bytes(bits_to_bytes(debiase_crumbs(bytes_to_crumbs(_bytes))))
</code></pre>
    </div>