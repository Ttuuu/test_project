<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd be inclined to write that big lambda as a private static function:</p>

<pre><code>class interval {
private:
    static void callback(void* this_interval) {
        reinterpret_cast&lt;interval*&gt;(this_interval)-&gt;do_it();
    }

    void do_it() {
        if (running &amp;&amp; function) {
            function(); 
        }
        // Check again as the called function might stop the interval
        if (running) {
            start();
        }
    }
};
</code></pre>

<p>Note that I've added a check that <code>function</code> isn't empty - particularly important given that's the state of a default-constructed <code>interval</code>.  You may prefer to just let it throw <code>std::bad_function_call</code> - if so, that's certainly worth a comment.</p>

<hr>

<p>I'd re-order the condition in <code>start()</code> so it doesn't need to recurse:</p>

<pre><code>void interval::start() {
    if (running) { stop(); }

    running = true;
    // etc.
</code></pre>

<hr>

<p>I see there's a reasonable move-assignment operator, but what about move construction?  That needs to be implemented or explicitly deleted.  And copy construct or assignment?  If you explicitly <code>delete</code> or <code>default</code> copy/move assignment and constructor, it helps show which operations you've considered.</p>

<hr>

<p>Also, be aware that if <code>function()</code> takes some time to run, then starting the timer after it has finished will gradually drift from a standard repeating timer.  That may or may not be a concern for your use, but make sure you've thought about it!</p>
    </div>