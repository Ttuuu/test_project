<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A small contribution. I noticed that you would have blocks of code like this...</p>

<pre><code>if (File.Exists("settings.txt")
{
    string settings = System.IO.File.ReadAllLines("settings.txt");
    ...
}
</code></pre>

<p>I'm quite a big hater of nesting, if it can be avoided so I would suggest to do it this way instead</p>

<pre><code>// check to see if the file exists. If not, throw an exception.
if (!File.Exists("settings.txt") throw new Exception("The settings file could not be found.");

// grab the contents of the file
string setttings = System.IO.File.ReadAllLines("settings.txt");
</code></pre>

<p>I would also continue on this block and say that you should notj just blindly accept the contents of the <code>settings.txt</code> file and you should always lean towards not trusting external input, especially if it has the opportunity to be tampered with (like in this case a malformed settings file).</p>

<p>At the bare minimum you can  do</p>

<pre><code>// check if the settings file is empty
if (String.IsNullOrEmpty(settings) throw new Exception("The settings file is empty.");
</code></pre>

<p>In order to reduce the complexity of dealing with formatting, parsing and validation there are plenty of string formats to represent objects and configurations (JSON, XML, INF, etc)</p>

<ul>
<li>INF has been a long standing "Windows" format</li>
<li>XML is basically frowned upon these days but used to be very popular</li>
<li>JSON is becoming very popular (I would recommend to go with this at a beginner level)</li>
</ul>

<p>Just as an example the string would appear like</p>

<pre><code>"Settings":
{
    "Console":
    {
        "ForegroundColor": "Grey",
        "BackgroundColor": "Black",
        "Encoding": "UTF-8"
    }
    "Game":
    {
        "Difficulty": 10.5,
        "Autosave": false
    }
}
</code></pre>

<p>and this would be very easily turned into an object in C# (just grab the library for it), which would then allow you write easy to read code like so...</p>

<pre><code>boolean autosave = settings.Game.Autosave;
</code></pre>
    </div>