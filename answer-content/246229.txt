<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, the answer by <a href="https://codereview.stackexchange.com/a/246221/54459">Mike Brant</a> indicated partly what was wrong with my original approach, as in iterating <code>str2</code> potentially 2 times (if all characters would have been unique).</p>
<p>I still don't think I have to map each letter by key for <code>str1</code>, in fact I see <code>str1</code> as pretty much irrelevant, and only for verifying if a letter occurs at least as many times as it does in <code>str2</code>.</p>
<p>So, to make it less compact but only iterate <code>str2</code> once, I went for the following solution</p>
<pre><code>function scramble(str1, str2) {
  if (str1.length &lt; str2.length) {
    return false;
  }
  const set = new Set();
  let c;
  for (let i = str2.length; i--;) {
    c = str2.charAt(i);
    if (set.has(c)) {
      continue;
    }
    if ( str2.split(c).length &gt; str1.split(c).length) {
      return false;
    }
    set.add(c);
  }
  return true;
}
</code></pre>
<p>And if I make a map of <code>str1</code> first, I went for the following solution</p>
<pre><code>function createMap(str) {
  let result = {};
  let c;
  for (let i = str.length; i--;) {
    c = str.charAt(i);
    result[c] = (result[c] || 0) + 1;
  }
  return result;
}

function scramble(str1, str2) {
  if (str1.length &lt; str2.length) {
    return false;
  }
  const set = new Set();
  const map = createMap(str1);
  let c;
  for (let i = str2.length; i--;) {
    c = str2.charAt(i);
    if (set.has(c)) {
      continue;
    }
    if (!map[c] || str2.split(c).length - 1 &gt; map[c]) {
      return false;
    }
    set.add(c);
  }
  return true;
}
</code></pre>
<p>Both solutions are in the same ballpark when it comes to performance</p>
    </div>