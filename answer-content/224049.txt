<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will focus on..</p>

<blockquote>
  <p>Creating custom objects with custom properties using generics  </p>
</blockquote>

<p>Which you do in this method..</p>

<blockquote>
<pre><code>public static KeyValuePair&lt;TCity, IEnumerable&lt;TBuilding&gt;&gt; GetData&lt;TCity, TBuilding&gt;()
    where TCity : City, new()
    where TBuilding : Building, new()
{
    TCity city = new TCity();
    IEnumerable&lt;TBuilding&gt; buildings = new List&lt;TBuilding&gt;();
    return new KeyValuePair&lt;TCity, IEnumerable&lt;TBuilding&gt;&gt;(city, buildings);
}
</code></pre>
</blockquote>

<ul>
<li>A <code>KeyValuePair</code> is archaic, you can use a <code>ValueTuple</code> nowadays</li>
<li><code>TBuilding</code> does not require the <code>new()</code> constraint in this method</li>
<li>The choice for <code>IEnumerable</code> over <code>IList</code> is questionable, since you retrieve the items later on and have no way of adding them to an <code>IEnumerable</code>. So why create the <code>IEnumerable</code> in this method?</li>
<li>The name should reflect what you are doing. <code>CreateCity</code> seems more appropriate.</li>
</ul>

<p>I would refactor this method..</p>

<pre><code>public static (TCity city, IList&lt;TBuilding&gt; buildings) CreateCity&lt;TCity, TBuilding&gt;()
    where TCity : City, new()
    where TBuilding : Building
{
    var city = new TCity();
    var buildings = new List&lt;TBuilding&gt;();
    return (city, buildings);
}
</code></pre>

<p>EDIT:</p>

<p>Thinking about the refactored method. This doesn't even need to be a method anymore. It doesn't do anything but create objects for the types you specify.</p>

<p>What I would really do is throw out this ancient way of ORM, and use an existing API (EF, NHibernate, Dapper).</p>
    </div>