<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a neat little implementation. It's nice that <code>LruCacheEntry</code> is a private inner class. It does indeed look to be thread-safe in its current state.</p>

<hr>

<p>When calling <code>Add</code>, if the <code>key</code> is already present, then a new node is added to <code>LruList</code> before the code crashes because the key is already present in the dictionary. This means you could end up with an ever growing <code>LruList</code>, which would be bad.</p>

<p>You should probably check if <code>key</code> is already present and decide what to do after that... you might want to replace the value, or do nothing, or... (consult dfhwze's answer)</p>

<hr>

<p>Generally type-parmeters follow the pattern <code>TName</code> in .NET: in you case I would expect <code>TKey</code> and <code>TValue</code>. Whatever you do, you should be consistent between classes, but you'd be better off just removing <code>&lt;KeyType, ValueType&gt;</code>, since <code>LRUCacheEntry</code> already knows about <code>K</code> and <code>V</code>. <code>LRUCacheEntry</code> should be <code>LruCacheEntry</code> to be consistent with <code>LruCache</code> and the .NET naming conventions.</p>

<hr>

<p>I would attach an <code>else</code> to <code>if (!isCached)</code> so that the control flow is clearer and the static checker can tell you when you accidently comment out <code>return false</code>.</p>

<hr>

<p>I'm always glad to see inline documentation of the public (and private) API, but the comments here are really not very helpful. </p>

<p>Some of your comments could generally be better:</p>

<ul>
<li><p>Spelling error: "inplementation"</p></li>
<li><p>"Thingy" is a tad vague</p></li>
<li><p>It is not documented that <code>null</code> is an invalid key</p></li>
<li><p>There is nothing explaining that it is a Least-Recently User eviction policy (<code>Lru</code> wouldn't cut it for me)</p></li>
<li><p>I'd probably want a comment attached to the <code>private</code> method indicating the lock must be taken. An assert would be even better:</p>

<pre><code>Debug.Assert(Monitor.IsEntered(_lock));
</code></pre></li>
</ul>

<hr>

<p>As Henrik Hansen says, you can't really avoid a mutex with this implementation, but you may be able to reduce the amount of stuff that is inside the <code>lock</code>.</p>

<p>One possible option could be to use a <code>ConcurrentDictionary</code>, as dfhwze has suggested: when you try to get a value, you ask the dictionary. If it finds it, <em>then</em> you take the lock and update the linked list (you don't take a lock if it isn't present, and you hold the lock for less time): you need to check your node is still in the inked list, because it might been removed before you took the lock, because it may have been replaced already.</p>

<p>When adding, you perform a check (as mentioned above), and if a change needs to be made, you again take the lock, perform the check again, and perform the add (update the list and dictionary) inside the lock if you need to. All this effort may or may not reduce the time spent in the lock, and so the amount of contention.</p>

<p>Unless you use a linked-list designed for concurrent use, I don't think you are going to be able to avoid a mutex when modifying <code>_lruList</code> without fundamentally changing how the cache works.</p>
    </div>