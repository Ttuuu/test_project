<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your first problem is that you're trying to cram too much information onto one line. As a result, you loose the overview. Here is a simple refactoring:</p>

<pre><code>def is_abundant(n):
    max_divisor = int(n / 2) + 1
    sum = 0
    for x in range(1, max_divisor):
        if n % x == 0:
            sum += x  
    return sum &gt; n

abundants = list(x for x in range(1, 28123) if is_abundant(x))

sums = 0
for i in range(12, 28123):
    for abundant in abundants:
        if abundant &gt;= i and is_abundant(i + abundant):
            sums += i
print(sums)
</code></pre>

<ul>
<li>The <code>== True</code> tests are unecessary and were removed.</li>
<li>Naming was improved: <code>isabundant</code> â†’ <code>is_abundant</code>.</li>
<li>The long statement in <code>is_abundant</code> was split up.</li>
</ul>

<p>Now we can think about how this could be optimized.</p>

<p>One subproblem is calculating all divisors of a number. We could put the relevant code into its own function. We can furthermore exploit that if <code>n % i == 0</code>, then there must be another integer <code>k</code> so that <code>n == i * k</code>. This means that we only have to look at a lot less numbers: only the <code>range(2, 1 + int(sqrt(n)))</code> is interesting.</p>

<pre><code>def divisors(n):
    """
    Returns all nontrivial divisors of an integer, but makes no guarantees on the order.
    """
    # "1" is always a divisor (at least for our purposes)
    yield 1

    largest = int(math.sqrt(n))

    # special-case square numbers to avoid yielding the same divisor twice
    if largest * largest == n:
        yield largest
    else:
        largest += 1

    # all other divisors
    for i in range(2, largest):
        if n % i == 0:
            yield i
            yield n / i
</code></pre>

<p>We can now rewrite our <code>is_abundant</code> to the simpler:</p>

<pre><code>def is_abundant(n):
    if n &lt; 12:
        return False
    return sum(divisors(n)) &gt; n
</code></pre>

<p>Later, in your main loop, you are doing a rather weird calculation. What were we supposed to do?</p>

<blockquote>
  <p>Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.</p>
</blockquote>

<p>We furthermore know that all integers <em>above</em> 28123 can be written as such a sum. Thus we have to look at the <code>range(1, 28123 + 1)</code>! How can we decide if a number <code>n</code> can be written as a sum of abundant numbers <code>i</code> and <code>k</code>? There exists any abundant number <code>i</code> with the constraint <code>i &lt; n</code>, and another abundant number with the constraints <code>k &lt; n and n - i == k</code>. Here is one clever way to write this:</p>

<pre><code>def is_abundant_sum(n):
   for i in abundants_smaller_than_n:
       if (n - i) in abundants_smaller_than_n:
           return True
   return False
</code></pre>

<p>Because we don't want to calculate the <code>abundants_smaller_than_n</code> each time, we just take all possible <code>abundants</code> and bail out if we get larger than <code>n</code>:</p>

<pre><code>def is_abundant_sum(n):
   for i in abundants:
       if i &gt; n:  # assume "abundants" is ordered
         return False
       if (n - i) in abundants:
           return True
   return False
</code></pre>

<p>where <code>abundants = [x for x in range(1, 28123 + 1) if is_abundant(x)]</code>.</p>

<p>Now, all that is left to do is to sum those numbers where this condition does <em>not</em> hold true:</p>

<pre><code>sum_of_non_abundants = sum(x for x in range(1, 28123 + 1) if not is_abundant_sum(x))
</code></pre>

<p>We could perform one optimization: <code>abundants</code> is a list, which is an ordered data structure. If we search for an element that is not contained in the list, all elements would have to be searched. The <code>set()</code> data structure is faster, so:</p>

<pre><code>abundants_set = set(abundants)
def is_abundant_sum(n):
   for i in abundants:
       if i &gt; n:  # assume "abundants" is ordered
         return False
       if (n - i) in abundants_set:
           return True
   return False
</code></pre>
    </div>