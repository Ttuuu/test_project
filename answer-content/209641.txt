<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Does this site work? I am starting to doubt it...</p>
</blockquote>

<p>Well, AFAIK, the front page can filter by "my tags" or sort by "date" but not both? So it's very easy for something to get stuck on the second page forever. One thing you could try is, after posting a snippet for review, go over to the <a href="https://cpplang-inviter.cppalliance.org" rel="nofollow noreferrer">C++ Slack</a> and ask if anyone there would like to give you a review.</p>

<hr>

<pre><code>template &lt;class V, typename Mem, Mem V::*member&gt;
</code></pre>

<p>This works, but it's kind of cumbersome. As you noticed:</p>

<pre><code>template &lt;class V, typename Mem, Mem V::*member&gt; class IndexedVector { ... }
IndexedVector&lt;A, decltype(A::key), &amp;A::key&gt; s;
</code></pre>

<p>In C++17 you could get a similar effect by writing simply</p>

<pre><code>template &lt;class V, auto member&gt; class IndexedVector { ... }
IndexedVector&lt;A, &amp;A::key&gt; s;
</code></pre>

<p>However, there are other problems associated with pointers-to-members. For example, you can't use your approach to key on a <code>key</code> that doesn't have a type — so, no keying on bit-fields. And you can't use your approach (pre-C++17) to key on a member that isn't a member of <code>A</code> — so, no keying on <em>inherited</em> data members.</p>

<p>So the canonical C++ way to do this is to provide a <em>class type</em> that encapsulates the appropriate behavior. Like how <code>std::hash</code> and <code>std::less</code> do it. We'd write:</p>

<pre><code>template &lt;class V, class KeyFunction&gt; class IndexedVector { ... }
struct MyKeyFunction { int operator()(const A&amp; a) const { return a.key; } };
IndexedVector&lt;A, MyKeyFunction&gt; s;
</code></pre>

<p>Finally: I strongly recommend <code>CamelCase</code> for all template parameter names. So I'd write <code>Member</code>, not <code>member</code>.</p>

<hr>

<pre><code>#define TEST(n) if ((n)) { std::cout &lt;&lt; "OK\n"; } else { std::cout &lt;&lt; "NOT OK\n"; }
</code></pre>

<p>The double-parentheses around <code>n</code> aren't necessary; double parens don't do anything here that single parens wouldn't. Also, for hygiene, you should wrap every statement-like macro in <code>do ... while(0)</code> — even though in this case I <em>think</em> you're safe.</p>

<pre><code>#define TEST(n) do { \
    if ((n)) { std::cout &lt;&lt; "OK\n"; } \
    else { std::cout &lt;&lt; "NOT OK\n"; } \
} while (0)
</code></pre>

<hr>

<pre><code>bool operator==(const A&amp; a1, const A&amp; a2) 
</code></pre>

<p>Any time you have <code>==</code> you should also have <code>!=</code>. You get a pass here because this is just test code.</p>

<hr>

<pre><code>size_t idx(key_type key) { ... }
const std::vector&lt;V&gt;&amp; getValues() { return values; }
size_t size() { return values.size(); }
</code></pre>

<p>All three of these methods should be <code>const</code>-qualified.</p>

<hr>

<pre><code>    hashed_iter it = indices.find(key);
    auto hiter = indices.find(key);
</code></pre>

<p>It's mildly confusing to the reader that you sometimes say <code>it</code> and sometimes say <code>hiter</code>. I would stick with <code>it</code>, unless you're worried that the reader might need to distinguish hash iterators from other iterators. (And in that case, I'd say just <code>hit</code>, and I'd never use <code>it</code> to refer to a hash iterator.)</p>

<p>It's also unusual to abbreviate <code>iterator</code> in the name of a typedef. I'd replace all your uses of <code>hashed_iter</code> with <code>hash_iterator</code>.</p>

<hr>

<pre><code>using hashed_pair = std::pair&lt;key_type, size_t&gt;;
[...]
indices.insert(hashed_pair(key, vi));
</code></pre>

<p>What does this gain you, compared to using the two-argument <a href="https://en.cppreference.com/w/cpp/container/unordered_map/emplace" rel="nofollow noreferrer"><code>emplace</code></a>?</p>

<pre><code>indices.emplace(key, vi);
</code></pre>

<p>In fact, this exact situation just came up a few hours ago on the C++ Slack — someone pointed out that it's too easy to get the <code>hashed_pair</code> typedef wrong and end up making unnecessary copies! And then what do you do? You get the typedef wrong!</p>

<pre><code>using hashed_pair = std::pair&lt;/*oops no const*/ key_type, size_t&gt;;
[...]
indices.insert(hashed_pair(key, vi));
</code></pre>

<p>This code constructs a <code>pair&lt;key_type, size_t&gt;</code>. Then it calls <code>indices.insert</code>, which wants a parameter of type <code>pair&lt;const key_type, size_t&gt;</code>; so it has to construct a <code>pair&lt;const key_type, size_t&gt;</code> out of the pair you already constructed...</p>

<p>Well, actually <code>insert</code> also has an overload taking any old <code>P&amp;&amp;</code> type (<a href="https://en.cppreference.com/w/cpp/container/unordered_map/insert" rel="nofollow noreferrer">overload #2 here</a>), so what you wrote is just a <em>hair</em> less efficient than the <code>.emplace(key, vi)</code> version. (It costs just one extra move/destroy.) But what you wrote is more verbose and causes the reader to go, "Huh?"; so, I would recommend against it.</p>

<hr>

<pre><code>size_t idx(key_type key)
{
    auto hiter = indices.find(key);
    if (hiter == indices.end())
    {
       return -1;
    }
    else
    {
        return hiter-&gt;second;
    }
}
</code></pre>

<p>Since <code>key_type</code> might be something heavyweight, like <code>std::string</code>, shouldn't this method take <code>(const key_type&amp; key)</code> instead of <code>(key_type key)</code>?</p>

<p>Also, utter nitpick, but many C++ programmers find code easier to read when they can see more of it on the screen at once. (Up to a point, of course!) So that leads to a general preference for more compact bracing styles:</p>

<pre><code>size_t idx(const key_type&amp; key) const {
    auto it = indices.find(key);
    if (it != indices.end()) {
        return it-&gt;second;
    } else {
        return -1;
    }
}
</code></pre>

<p>And once it's in this form, we can reduce the number of indented lines and perhaps more directly express our intent by writing:</p>

<pre><code>size_t idx(const key_type&amp; key) const {
    auto it = indices.find(key);
    if (it != indices.end()) {
        return it-&gt;second;
    }
    return -1;
}
</code></pre>

<p>Some compilers might complain about the implicit conversion of <code>-1</code> to <code>size_t</code>. I might try to be explicit there; or even assert that such a case ought to be impossible, if that's what I meant.</p>

<pre><code>    return size_t(-1);
// or
    assert(false);
</code></pre>

<p><a href="https://godbolt.org/z/AF4gna" rel="nofollow noreferrer">Compilers will <em>definitely</em> complain</a> about your comparison of <code>size_t</code> with <code>-1</code> down in the test cases; I'd definitely fix that.</p>

<pre><code>TEST(s.idx(a1.key) == size_t(-1));
</code></pre>
    </div>