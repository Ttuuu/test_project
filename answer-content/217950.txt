<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Surprising</h1>

<p>This is a gross violation of the Principle of Least Surprise. The only possible reaction I could have seeing this in the wild would be, "What the heck?" This is not a normal way of using exceptions. New developers approaching the code are likely to have a similar reaction. </p>

<p>One particular thing that would trip me up and force me to spend time investigating what in the world is going on is this code:</p>

<pre><code>throw ("SettingNotFoundException", $"Setting {fullName.ToString().QuoteWith("'")} not found.").ToDynamicException());
</code></pre>

<p>During a quick skim, I'm unlikely to see the <code>ToDynamicException</code> call, which makes me stop and wonder if you somehow introduced new syntax to the language.</p>

<p>You should also note that your design has forced you to basically re-implement or wrap a lot of the standard exception functionality (e.g., filtering). Needing to re-implement something that was already done for you is a good indicator that you're going outside the normal way of using your tools.</p>

<h1>Is this really an improvement?</h1>

<p>I'm not sure how your code is actually any better than the standard approach. You already found you had to create a "template" class to achieve what you were after:</p>

<p>Yours:</p>

<pre><code>public class SettingNotFoundExceptionTemplate : DynamicExceptionTemplate
{
    public override string Message =&gt; $"Setting {SettingName.QuoteWith("'")} not found.";
    public string SettingName { get; set; }
}
</code></pre>

<p>But judicious use of standard exception patterns and constructors doesn't seem any worse than your class here:</p>

<pre><code>public class SettingNotFoundException : Exception
{
    public string SettingName { get; }

    public SettingNotFoundException(string settingName, Exception innerException = null)
        : base($"Setting {SettingName.QuoteWith("'")} not found.", innerException)
    {
        this.SettingName = settingName;
    }
}
</code></pre>

<p>Yours saves about 3 lines of code at the expense of being unable to write <code>catch(SettingNotFoundException)</code> and normal looking <code>throw</code>s. Seems like a bad trade off to me.</p>

<p>Your test assertions aren't really an improvement over existing frameworks, either. Assuming you're using NUnit 3, then combined with the exception type above, you can use <code>Throws</code> and <code>AreEqual</code> for your example:</p>

<pre><code>var ex = Assert.Throws&lt;SettingNotFoundException&gt;(
    () =&gt;
    {
        // code that throws a SettingNotFoundException
    }
);
Assert.AreEqual("expectedSettingName", ex.SettingName);
</code></pre>

<p>If you don't want to have several <em>files</em> for a set of exceptions, feel free to establish a standard of centralizing exceptions into a single file. While a little unorthodox, this won't lead to the kind of confusion and extra time spent trying to understand your code that your approach will.</p>

<h1>Why do you need so many Exception classes?</h1>

<p>I gather that your <code>SettingNotFoundException</code> is only an example and that you are using this code to generate <em>many</em> exception types. But this begs the question of why you're creating so many exceptions that what I describe above is overly burdensome.</p>

<p>You mentioned <a href="https://chat.stackexchange.com/transcript/message/40428925#40428925">in chat</a>:</p>

<blockquote>
  <p>You should already know what [happened] by not even reading the message.</p>
</blockquote>

<p>This is not how C# was designed to work, so you need to let this go if you're going to write C# code. It's more important that your code is easy to understand and work with for other developers than it is for your code to be in line with your ideal. No language is ideal; they're all going to have some approaches and norms you don't like.</p>

<p>It also looks like you might be trying to have a different exception for all the different situations you need to assert on in your tests. This also isn't how exceptions are normally used, so this appears to be an example of "test induced design damage."</p>

<p>You normally have a <em>small number</em> of general exceptions that are reused throughout a library of classes, and then you rarely have a couple more specific ones that match up to very specific and situational <code>catch</code> blocks.</p>

<p>In other words, you need to rethink your approach of creating a ton of exception types. You won't be <code>catch</code>ing most of them explicitly outside of your tests, and the ones you don't are very unlikely to be actually needed. Your tests will be fine asserting on less specific exceptions. If you feel it's absolutely necessary to distinguish from other causes, you might perform a limited assertion on the message (such as a string contains check), but even this has questionable value. You might also consider organizing your code under test differently, in such a way that it's impossible or very unlikely for it to throw an exception for the wrong reason, to reduce your risk without creating all this cognitive overhead.</p>

<h1>Norms and Standards</h1>

<p>The bottom line is that there are already existing norms and standards that will reduce the amount of work you're trying to avoid. Find ways to use them, instead of trying to revise how the language works. You need to let go of your notions of how a language should work and let the language work in the way it was designed to.</p>
    </div>