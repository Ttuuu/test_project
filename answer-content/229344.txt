<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>numpy</h3>

<p><code>numpy.random</code> has functions to generate random arrays. So, this:  </p>

<pre><code>activitiesInteractionList = []
for i in range(0, numActivities**2):
    activitiesInteractionList.append(random.randint(1, 10))

activitiesInteractionMatrix = np.array(activitiesInteractionList).reshape(
    [numActivities, numActivities])
</code></pre>

<p>becomes this:</p>

<pre><code>activitiesInteractionMatrix = np.random.randint(1, 11, size=[numActivities, numActivities])
</code></pre>

<p>and this:</p>

<pre><code>activityTimeInteractionList = []
for i in range(0, numActivities * len(timesOfDay)):
    activityTimeInteractionList.append(random.randint(1, 10) / 10)

activityTimeInteractionMatrix = np.array(
    activityTimeInteractionList).reshape(numActivities, len(timesOfDay))
</code></pre>

<p>becomes:</p>

<pre><code>activityTimeInteractionList = np.random.random(size=[numActivities, numActivities]))
activityTimeInteractionList = activityTimeInteractionList * (1 - .1) + .1
</code></pre>

<p><code>np.array()</code> can take a list of lists.</p>

<pre><code>customActivitiesInteractionMatrix = np.array([[0,0,5,10,15,20,25,30],
                                              [0,0,0,5,10,15,20,25],
                                              [5,0,0,0,5,10,15,20],
                                              [10,5,0,0,0,5,10,15],
                                              [15,10,5,0,0,0,5,10],
                                              [20,15,10,5,0,0,0,5],
                                              [25,20,15,10,5,0,0,0],
                                              [30,25,15,10,5,0,0,0]])
</code></pre>

<p>If things named <code>custom...</code> are for testing, put them in a proper test, or at least put it in an <code>if</code> block so you don't need to delete them to get proper operation.  You can just set TESTING to True/False to enable/disable the code:</p>

<pre><code>if TESTING:
    customActivitiesInteractionMatrix = ...
    ActivitiesInteractionMatrix = customActivitiesInteractionMatrix
    etc.
</code></pre>

<h3>list.extend</h3>

<p>Use the <code>extend()</code> method to add multiple elements to the end of a list.</p>

<pre><code>quantaClassifications = []
for i in range(len(timesOfDay)):
    quantaClassifications.extend(dailyQuanta // len(timesOfDay) * [i])

quantaClassifications.extend((dailyQuanta - len(quantaClassifications)) * [len(timesOfDay) - 1])
</code></pre>

<h3>list comprehension:</h3>

<p>Or in this case, use a list comprehension:</p>

<pre><code>quantaClassifications = [i*len(timesOfDay)//dailyQuanta for i in range(dailyQuanta)]
</code></pre>

<h3>enumerate() and zip()</h3>

<p>When looping over a sequence, like a list, and the index and value are needed, it would be better to use <code>for i,value in enumerate(sequence):</code> rather than <code>for i in range(len(sequence)):</code>.  To iterate over multiple sequences in parallel, use <code>zip()</code>.  Use slice assignment and itertools.repeat() to eliminate an explicit loop.  Like so:</p>

<pre><code>def ScheduleListGenerator(durationGenes, startTimeGenes):
    schedule = ["-"] * dailyQuanta
    for g,(start,duration) in enumerate(durationGenes, startTimeGenes):
        end = min(start + duration, dailyQuanta))
        schedule[start:end] = itertools.repeat(g, end-start)

    return schedule
</code></pre>

<h3>readability</h3>

<p>Code should be written to be read and understood.  Descriptive names help.  But, lines of code that are too long or that wrap to the next line are more difficult to read than shorter lines.  So there is a balance between how descriptive a name is and how long it is. </p>

<h3>misc</h3>

<p><code>return</code> doesn't need parens.  <code>return schedule</code> instead of <code>return(schedule)</code></p>

<p>The default start for <code>range()</code> is '0', so <code>range(99)</code> is the same as <code>range(0, 99)</code>.</p>

<p>Try to avoid magic numbers: <code>sessionLengthsCosts.append((18 - i) * 5)</code>.  Where do the 5 and 18 come from? If the code is edited somewhere else (like the size of a data structure, or the value of <code>quantaDuration</code>) how do you know if these numbers should change?  Are they used anywhere else in the code?  It would be better to make them a constant, or at least add a doc string or comment to explain them.</p>

<p>Short, one letter, variable names often have a customary usage or implied meaning.  For example, it is common to use variables i,j,k as integer indexes, or x,y,z as floating point coordinates.  When they are used for something else (e.g. <code>for i in self.list</code>) it can be confusing.</p>
    </div>