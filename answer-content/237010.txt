<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe the code is slow because you are using normal Dijkstra, which takes <code>O(V^2)</code> where <code>V</code> is the number of vertices (Here, <code>V</code> would be <code>N*M</code>).</p>

<p>This is because you are searching for the minimum by iterating through all the unvisited elements, which takes <code>O(V)</code> time. Repeat this for <code>V</code> times and it becomes <code>O(V^2)</code>.</p>

<p>You can reduce this to <code>O(V * log V)</code> by using a heap, which would increase your code's performance dramatically.</p>

<p>This is a trick most competitive programmers use ;-)</p>

<p>You can refer on how to use the heaps here:<br>
<a href="https://courses.cs.washington.edu/courses/cse326/07au/lectures/lect22.pdf" rel="nofollow noreferrer">https://courses.cs.washington.edu/courses/cse326/07au/lectures/lect22.pdf</a></p>

<p>(This one is for graphs, but you can incorporate it for mazes as well)</p>
    </div>