<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, let's start by refactoring the <code>Dice</code> class:</p>

<pre><code>public sealed class Die
{
    private readonly Func&lt;int, int, int&gt; randomNumberGenerator;

    public int MinimumValue { get; }
    public int NumberOfSides { get; }

    public Die(int minimumValue, int numberOfSides, Func&lt;int, int, int&gt; randomNumberGenerator) {
        this.randomNumberGenerator = randomNumberGenerator;

        this.MinimumValue = minimumValue;
        this.NumberOfSides = checked(numberOfSides + 1);
    }

    public IEnumerable&lt;int&gt; Roll(int numberOfDice) {
        if (0 == numberOfDice) {
            yield break;
        }
        else {
            for (var i = 0; (i &lt; numberOfDice); i++) {
                yield return randomNumberGenerator(MinimumValue, NumberOfSides);
            }
        }
    }
    public int Roll() =&gt; Roll(1).Single();
    public long RollAndSum(int numberOfDice) =&gt; Roll(numberOfDice).Select(d =&gt; ((long)d)).Sum();
}
</code></pre>

<p>By saving a dedicated random number generator delegate during construction we can save the overhead of calling <code>new Random()</code> during repeated calls to <code>Roll</code>. In addition, the static member <code>sides</code> has been converted into an instance member because sharing that value amongst all <code>Dice</code> seemed like a very restrictive choice.</p>

<p>Altering the <code>Roll</code> method so that it returns a set of values gives us a bit of flexibility and allows us to get rid of the duplicate code that was in <code>rollDiceNoShow</code> (now called <code>RollAndSum</code>).</p>

<p>Now we need something to hold the metadata for our players:</p>

<pre><code>public class BettingPlayer
{
    public long CurrentAmount { get; }
    public string Name { get; }
    public Func&lt;int, int, int&gt; RandomNumberGenerator { get; }
    public long WagerAmount { get; }

    public BettingPlayer(long currentAmount, string name, Func&lt;int, int, int&gt; randomNumberGenerator, long wagerAmount) {
        this.CurrentAmount = currentAmount;
        this.Name = name;
        this.RandomNumberGenerator = randomNumberGenerator;
        this.WagerAmount = wagerAmount;
    }

    public BettingPlayer Lost(long newWager) =&gt; new BettingPlayer((CurrentAmount - WagerAmount), Name, RandomNumberGenerator, newWager);
    public BettingPlayer Lost() =&gt; Lost(WagerAmount);
    public BettingPlayer Won(long newWager) =&gt; new BettingPlayer((CurrentAmount + WagerAmount), Name, RandomNumberGenerator, newWager);
    public BettingPlayer Won() =&gt; Won(WagerAmount);
}
</code></pre>

<p>This allows us to shuttle state around and grants us the ability us assign each player their own (potentially biased) random number generator; can be used to assign a handicap or advantage to certain players. Finally, the game class itself:</p>

<pre><code>public sealed class BettingGame
{
    private readonly int minimumValuePerDie;
    private readonly int numberOfDice;
    private readonly int numberOfSidesPerDie;

    private BettingPlayer[] players;

    public int NumberOfGamesPlayed { get; private set; }

    public BettingGame(int numberOfDice, int numberOfSidesPerDie, int minimumValuePerDie, params BettingPlayer[] players) {
        this.minimumValuePerDie = minimumValuePerDie;
        this.numberOfDice = numberOfDice;
        this.numberOfSidesPerDie = numberOfSidesPerDie;
        this.players = players;

        this.NumberOfGamesPlayed = 0;
    }

    public BettingPlayer GetWinner() =&gt; players.Aggregate((x, y) =&gt; (x.CurrentAmount &gt; y.CurrentAmount) ? x : y);
    public void PlayRound() {
        var highScoreIds = new List&lt;long&gt;();
        var highScoreValue = 0L;
        var numberOfPlayers = players.Length;

        for (var i = 0; (i &lt; numberOfPlayers); i++) {
            var currentPlayer = players[i];
            var score = new Die(minimumValuePerDie, numberOfSidesPerDie, currentPlayer.RandomNumberGenerator).RollAndSum(numberOfDice);

            if (score &gt; highScoreValue) {
                highScoreIds.Clear();
                highScoreIds.Add(i);

                highScoreValue = score;
            }
            else if (score == highScoreValue) {
                highScoreIds.Add(i);
            }
        }

        var results = new BettingPlayer[numberOfPlayers];

        for (var i = 0; (i &lt; highScoreIds.Count); i++) {
            var playerId = highScoreIds[i];

            results[playerId] = players[playerId].Won();
        }

        for (var i = 0; (i &lt; results.Length); i++) {
            var temp = results[i];

            if (temp == null) {
                results[i] = players[i].Lost();
            }
        }

        players = results;

        NumberOfGamesPlayed++;
    }

    private static int GetIntegerInput(string message) {
        Console.Write($"{message}: ");

        while (true) {
            if (int.TryParse(Console.ReadLine(), out int numberOfPlayers)) {
                return numberOfPlayers;
            }
        }
    }

    public static int GetNumberOfPlayers() =&gt; GetIntegerInput("enter the number of players");
    public static long GetPlayerWager(int playerNumber) =&gt; GetIntegerInput($"enter the wager amount for player {playerNumber}");
    public static long GetPlayerStartingCash(int playerNumber) =&gt; GetIntegerInput($"enter the starting cash for player {playerNumber}");
    public static BettingGame Initalize(int numberOfDice, int numberOfSidesPerDie) {
        var minimumValuePerDie = 0;
        var numberOfPlayers = GetNumberOfPlayers();
        var players = new BettingPlayer[numberOfPlayers];

        for (var i = 0; (i &lt; numberOfPlayers); i++) {
            var rng = new Random();

            players[i] = new BettingPlayer(GetPlayerStartingCash(i), $"Player {i}", rng.Next, GetPlayerWager(i));
        }

        return new BettingGame(numberOfDice, numberOfSidesPerDie, minimumValuePerDie, players);
    }
}
</code></pre>

<p>The BettingGame class encapsulates the state required to play; the core logic of the game has been separated from everything else in order to clean everything up a bit and an initialization step has been added to allow for a variable number of players/settings.</p>

<p><strong>Example Usage:</strong></p>

<pre><code>class Program
{
    static void Main(string[] args) {
        var game = BettingGame.Initalize(numberOfDice: 1, numberOfSidesPerDie: 1);

        game.PlayRound();

        var winner = game.GetWinner();

        Console.WriteLine($"the winner is: {winner.Name}");
        Console.WriteLine($"they ended the game with: {winner.CurrentAmount}");
        Console.ReadKey();
    }
}
</code></pre>

<p><strong>Notes:</strong></p>

<ul>
<li><code>GetWinner</code> doesn't handle the case where one or more players end the series a tie; I was too lazy to come up with something better</li>
<li>there are bits of code that were intentionally left out (such as the <code>rules</code> method); again, out of laziness</li>
</ul>
    </div>