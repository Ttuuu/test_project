<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start by talking about the requirements. </p>

<p><strong>Implement a thread-safe queue with an underlying stack</strong>. This is pretty basic, and has many ways to implement. However, the catch here is <strong>Enqueue and Dequeue need to be parallel</strong>. This is actually problematic, because as long as a lock is used, blocking will occur. So one can either not use locks, or try to limit their affects.</p>

<h2>Your Implementation</h2>

<p>Let's talk about your implementation. The first clear thing is that you are using locks, which means blocking is likely.</p>

<p>You have 2 locks, a good thought to try and separate the methods. You also have 2 stacks, each corresponding to a lock. Again, good thought, a single lock must be responsible for all the usage of a specific data source.</p>

<p>The usage of  the <code>Stack</code> class however, is a problem. Not only is <code>Stack</code> a outdated collection class, you must also be aware that it extends <code>Vector</code> and each method in it is <code>synchronized</code>. Luckily, as we will see, most of this doesn't have much functionality impact, but rather more of a performance issue. I would recommend using a <code>Dequeue</code> instead. </p>

<p>Another clear part is that it is an <code>int</code> only implementation. In reality, implementing it generically isn't that different or complicated, since an underlying data structure that supports generics is used.</p>

<h3>Enqueue</h3>

<p>Your enqueue is quite basic. Take the addition lock, add an element, notify about this addition, and release the lock.</p>

<p>The notifying part, tells us that there is waiting somewhere. I'm assuming this is a blocking queue then. This is both not defined in the requirements, and will cause blocking between the threads. Although, the use of <code>notifyAll</code> may cause a problem.</p>

<p>Otherwise, this is quite straightforward. However, it is already obvious that for the <code>dequeue</code> to work, <code>addStack</code> must be accessed, and thus <code>addLock</code> must be touched. This already tells us that blocking will occur.</p>

<h3>Dequeue</h3>

<p>Now comes the complicated part. </p>

<p>You start by entering a <code>synchronized</code> block of <code>removeLock</code>, this is quite expected, given how the stacks require usage of the locks. </p>

<p>You then check if the <code>removeStack</code> is empty or not. If it isn't you simply <code>pop</code> and return that value. This might seem like a basic example of a <code>dequeue</code> implementation, but that is not true. Because values are not added directly into <code>removeStack</code>, so it being empty means nothing about the actual queue.</p>

<p>Now, if <code>removeStack</code> is empty... then comes the problematic part. The moment <code>addLock</code> is used, we know blocking between the two method will occur. </p>

<p>If <code>addStack</code> is empty, you wait on <code>addLock</code> until it is notified. This is a blocking queue operation. Which again, is not specified as needed. A non-blocking queue operation would be simply to throw some exception indicating that no value is available. Let's return to the use of <code>notifyAll</code>. If multiple <code>dequeue</code> calls are done, all of them will reach the <code>wait</code>, since the locks are not actually taken while waiting. When <code>enqueue</code> is called and <code>notifyAll</code> is done, only one element was added, however all the waiting threads will wake up, and compete on getting the lone element. Perhaps it is best to just use <code>notify</code>.</p>

<p>if <code>addStack</code> is not empty, you copy the values from it to <code>removeStack</code>, and then pop from it and return a value. This still causes blocking between <code>enqueue</code> and <code>dequeue</code>. Luckily, if <code>enqueue</code> runs longer, the blocking will be decreased, since the values will already be in <code>removeStack</code>.</p>

<p>Catching of <code>InterruptedException</code> here is not really a good idea. When you have a blocking method (method that waits), throwing an <code>InterruptedException</code> is important, since this exception is thrown when the thread is interrupted and the user likely wants to stop the operations running.</p>

<h3>Summary</h3>

<p>Although it has some good logic behind it, in reality this implementation both doesn't accomplish the full requirements, and adds some complications. However, because stack is LIFO, the complexity in <code>dequeue</code> cannot be avoided. Luckily, this blocking is actually pretty short. So it might be even negligible enough to not care about it.</p>

<p>If <code>enqueue</code> is used more than <code>dequeue</code>, the blocking in <code>dequeue</code> will be longer for the first call, but because <code>removeStack</code> stores stuff, subsequent runs may be faster. If <code>dequeue</code> is used more than <code>enqueue</code>, <code>dequeue</code> will simply be blocked most of the time, because it is waiting.</p>

<p>Unfortunately using stack is not a good option for implementing a queue, because the 2 are completely reversed. There are more ways to implement, however they will all be blocking. So this really depends on how each method is used in relation to the other (frequency of calls, amount of read/write threads). </p>

<h3>Snapshot on <code>addStack</code></h3>

<p>An example for another implementation is to use a single stack, and limit the holding of the lock by taking a snapshot of it:</p>

<pre><code>private Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();

public int dequeue() {
    Stack&lt;Integer&gt; reverse = new Stack&lt;&gt;();
    Stack&lt;Integer&gt; copy;
    synchronized(lock) {
        copy = new Stack&lt;&gt;(stack);
    }

    while (!copy.isEmpty()) {
        reverse.push(copy.pop());
    }

    if (reverse.isEmpty()) {
        throw new NoSuchElementException(); 
    }

    return reverse.pop();
}
</code></pre>

<p>Of course, if <code>stack</code> has a lot of elements, the synchronized block may take some time. However it is just a complexity of <code>o(n)</code>.</p>

<h2>Not using a stack</h2>

<p>Of course not using a stack is always an option. There are many other data structures which can be used to implement a queue. However, the real problem is <strong>Enqueue and Dequeue need to be parallel</strong>.</p>

<p>There are 2 ways to safely deal with data in a concurrent environment:</p>

<ul>
<li>Locks</li>
<li>Atomic operations</li>
</ul>

<p>Locks, inherently can cause blocking. However, atomic operations, do not. So a true non-blocking implementation lays in using atomic operation.</p>

<h3>Lock-free queue</h3>

<p>The concept of a lock-free queue is to implement a queue, which is safe for use in concurrent environments, without using locks, which only leaves us with atomic operations for use. </p>

<p>This is actually well known, but difficult to implement. Depending on the amount of read/write threads, the difficulty can increase.</p>

<p>When working with a single writer thread, and a single reader thread it is actually quite simple.</p>
    </div>