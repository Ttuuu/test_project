<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that the Visual Studio C# code editor has an integrated code beautifier. Depending on your setup, it can be executed with different shortcut keys. Call it from the menu for the first time, so that you can see the active shortcut keys (it is Ctrl-E-D for me). Menu: <code>Edit &gt; Advanced &gt; Format Document</code>.</p>
<p>By using a technique called <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/" rel="noreferrer">LINQ (Language INtegrated  Query)</a>, you can get the management object easier. It uses <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" rel="noreferrer">extension methods</a> from the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/namespaces/" rel="noreferrer">namespace</a> <code>System.Linq</code>. Therefore, you must include a <code>using System.Linq;</code> at the top of your code. Then you can query with</p>
<pre><code>ManagementObject managementObject = moc.FirstOrDefault();
if (managementObject == null) {
     // Handle error (output text or throw exception)
     Console.WriteLine("Could not find a management object!");
} else {
     ...
}
</code></pre>
<p>This <code>FirstOrDefault</code> extension method calls <code>GetEnumerator</code> and <code>MoveNext</code> internally and returns <code>null</code> if no object is available.</p>
<p>Do not give it the name <code>obj</code>. Almost everything is an object, so this name is not very informative.</p>
<p>Exceptions are a complex matter. It raises a lot of questions like "should I throw an exception or output a message to the user?", "should I create my own exception types?", "should I log the exception?" etc., etc. There is no single best answer to these questions. Therefore, I content myself with giving you a link: <a href="https://stackify.com/csharp-exception-handling-best-practices/" rel="noreferrer">C# Exception Handling Best Practices</a>.</p>
<p>If you intend to reuse this functionality, you could encapsulate it into your own class:</p>
<pre><code>public enum OperationResult
{
    Failure,
    NoDriveFound,
    DriveIsOpenOrEmpty,
    MediaIsLoaded
}

public class OpticalDriveCloser
{
    public OperationResult CloseFirst()
    {
        ...
    }

    public OperationResult[] CloseAll()
    {
        ...
    }
}
</code></pre>
<p>It returns an operation status as <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum" rel="noreferrer">enumeration type</a> and lets the calling application decide how to proceed. I.e. it does neither call <code>Console.WriteLine</code> nor throw exceptions and focuses on pure, non-UI logic. A console application will have a different UI-logic than a windows forms application or a web application.</p>
    </div>