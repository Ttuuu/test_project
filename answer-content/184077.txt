<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a few suggestions for improving your code.</p>

<ul>
<li><p>Good job using docstrings. Perhaps you should mention what the parameters actually represent, e.g. <code>lst</code> represents the list to be sorted.</p></li>
<li><blockquote>
<pre><code>if lst == []:
    return []
if len(lst) == 1:
    return [lst[0]]
</code></pre>
</blockquote>

<p>This could be replaced by:</p>

<pre><code>if len(lst) &lt;= 1:
    return lst[:]
</code></pre>

<p>The <code>[:]</code> is slice notation for a copy of the entire list.</p></li>
<li><blockquote>
<pre><code>def insert(val, lst, i):
    """Inserts [val] into [lst] at index [i] """

    return lst[:i] + [val] + lst[i:]
</code></pre>
</blockquote>

<p>Since <code>lst</code> is already guaranteed to be a copy here, no need to make four new lists. Just insert the item into the existing <code>lst</code> and return it, e.g.</p>

<pre><code>lst.insert(i, val)
return lst
</code></pre></li>
<li><blockquote>
<pre><code>def push_up(val, lst):
    """Pushes [val] up the list until it reaches its sorted position.
    Precondition: lst is sorted"""
    start = 0
    while start &lt; len(lst) and lst[start] &lt; val:
        start += 1
</code></pre>
</blockquote>

<p>It is not Pythonic to increment your own index to iterate over a list. Instead you should use the builtin <code>enumerate</code>:</p>

<pre><code>for (pos, item) in enumerate(lst):
    if item &gt;= val:
        return insert(val, lst, pos)
# if not found
lst.append(item)
return lst
</code></pre></li>
</ul>
    </div>