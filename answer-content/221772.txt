<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In JPA you could use <a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaSpecificationExecutor.html" rel="nofollow noreferrer"><code>JpaSpecificationExecutor&lt;T&gt;</code></a> in repository, with that you could utilize it's method.</p>

<h3>TransactionRepository</h3>

<pre><code>public interface TransactionRepository extends JpaRepository&lt;Transaction, Long&gt;,
                                                JpaSpecificationExecutor&lt;Transaction&gt; {


}
</code></pre>

<p>If you look at the source of <code>JpaSpecificationExecutor</code> it has,</p>

<blockquote>
<pre><code>Page&lt; T &gt; findAll(@Nullable Specification&lt;T&gt; spec, Pageable pageable);
</code></pre>
</blockquote>

<p>With that you just pass the specification and Pageable to return what you expected.</p>

<h3>Specification</h3>

<pre><code>@AllArgsConstructor
class TransactionSpecification implements Specification&lt;Transaction&gt; {

       private TransactionFilter transactionFilter;

       @Override
        public Predicate toPredicate(Root&lt;DataImport&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder criteriaBuilder) {
            // You could add multiple Predicates based on the transactionFilter
            return criteriaBuilder.equal(root.get("table_name"), "value");
        }
}
</code></pre>

<h3>Controller</h3>

<pre><code>    @Autowired
    private TransactionRepository transactionRepository;

    @GetMapping
    public Page&lt;TransactionDTO&gt; find(TransactionFilterDTO filter, Pageable page) {
        TransactionFilter transactionFilter = mapper.toFilter(filter);
        return transactionRepository.findAll(new TransactionSpecification(transactionFilter), page);
    }
</code></pre>

<p>I am pretty late answering but you could give it a try</p>
    </div>