<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Is there a specific standard that I should adhere to?</em></p>

<p>Pick one, and stick to it. I use this one: <a href="https://github.com/airbnb/javascript" rel="nofollow noreferrer">https://github.com/airbnb/javascript</a></p>

<p><em>One of the specifications for the tech interview process is that I use idiomatic JavaScript</em></p>

<p>I understand that as follow the community conventions for writing code. Using a common standard helps.</p>

<p><em>Is there a better way for me to optimize time and space in my code?</em></p>

<p>I does not get much better than this, though you could drop the use of <code>currentH1</code>, <code>currentH2</code>, and <code>currentMa</code>.</p>

<p><em>When I assign values to variables within loops, are there rules that I should be aware of for when I shouldn't?</em></p>

<p>In my mind, if you are going to use the assigned value only once, then it does not make sense to assign it.</p>

<p><em>Is there something that I may not be aware of by checking current against undefined instead of checking the current index against the size of the array?</em></p>

<p>Absolutely, your code breaks in a test case where the array contains <code>undefined</code> as a value</p>

<p><em>When I assign values to variables outside of loops but within the function, are there space complexities that I should pay attention to or does garbage collection take care of this?</em></p>

<p>Nah</p>

<p><em>Is this O(1) space complexity as I'm just keeping track of the indices?</em></p>

<p>That is my understanding</p>

<p><em>I believe I've accounted for the edge cases that I can think of, but are there more that I should be aware of?</em></p>

<p>As I mentioned, dupe values across the two halfs. It changes the paradigm of the routine completely. Also, as mentioned before, an array with <code>undefined</code> as a value.</p>

<p><code>I placed the if condition for checking lengths at the top even before the index definitions because I figured that if they aren't even the same size, why bother with doing anything else. Is that weird?</code></p>

<p>Not at all, however I only do this in functions that are very frequently called. </p>

<p>Other than, I tried to write this 'the proper way' by checking from the first value to the last, and it looked worse.</p>

<p>From a naming convention, <code>mergedArray</code> is a bit of misnomer, you don't whether it is a merged array.</p>

<p>It annoys me personally that you assign a value to <code>currentH1</code> in a loop, but then declare it as <code>const</code>. It is not wrong technically, but it reads wrong to me.</p>

<p>I rewrote the code a bit with my comments in mind:</p>

<pre><code>function isMergedArray(half1, half2, list) {
  if ((half1.length + half2.length) != list.length ) {
    return false;
  }

  let i = list.length - 1,
      h1 = half1.length - 1,
      h2 = half2.length - 1;

  while (i &gt;= 0) {

    let currentElement = list[i];

    if (h1 != -1 &amp;&amp; half1[h1] === currentElement) {
      h1--;
    } else if (h2 != -1 &amp;&amp; half2[h2] === currentElement) {
      h2--;
    } else {
      return false;
    }
    i--;
  }

  return true;
}
</code></pre>
    </div>