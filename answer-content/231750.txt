<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it makes sense to use dictionaries to store values for win/tie/loss:</p>

<pre><code>    def __init__(self):
        """
        Initialize the variables for the class
        """
        self.options = {'rock': 0, 'paper': 1, 'scissors': 2}
        self.outcome_count = {
            "tie": 0,
            "win": 0,
            "loss": 0,
        }
</code></pre>

<p>This makes <code>check_win</code> a bit more "mechanical" since you can now refer to the outcomes by name and by looking things up in static data, instead of needing a bunch of if/else:</p>

<pre class="lang-py prettyprint-override"><code>    def check_win(self, player, opponent):
        """
        Check if the player wins or loses.
        :param player: Numeric representation of player choice from self.options
        :param opponent: Numeric representation of computer choice from self.options
        :return: Nothing, but will print whether win or lose.
        """

        result = ["tie", "win", "loss"][(player - opponent) % 3]

        self.outcome_count[result] += 1

        outcome_message = {
            "tie":  "The game is a tie! You are a most worthy opponent!",
            "win":  "You win! My honor demands a rematch!",
            "loss": "Haha, I am victorious! Dare you challenge me again?",
        }
        print(outcome_message[result])
</code></pre>

<p>though of course it ends up making <code>print_score</code> less self-explanatory:</p>

<pre class="lang-py prettyprint-override"><code>    def print_score(self):
        """
        Prints a string reflecting the current player score.
        :return: Nothing, just prints current score.
        """
        wins   = self.outcome_count["win"]
        losses = self.outcome_count["loss"]
        ties   = self.outcome_count["tie"]
        print(f"You have {wins} wins, {losses} losses, and {ties} ties.")
</code></pre>

<p>Lastly, I think that the <code>run_game</code> loop can be made slightly clearer by writing instead</p>

<pre class="lang-py prettyprint-override"><code>        while True:
            userchoice = input("Choices are 'rock', 'paper', or 'scissors'.\nWhich do you choose? ").lower()
            if userchoice in self.options.keys():
                break
            print("Invalid input, try again!")
</code></pre>

<p>I find an explicit "early-exit" with no <code>else</code> to be easier to follow [note that the condition is not inverted, which I think helps for clarity in this case] though this could be jarring if it's not conventional for the larger codebase.</p>
    </div>