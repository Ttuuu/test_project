<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Functional programming</strong></p>

<p>Since you've tagged this post with <code>functional-programming</code> I guess that the goal of this exercise may have been to practice functional programming or to present you skills in functional programming. This way or another, I'll stick to the assumption that it was supposed to be written in the functional programming paradigm.</p>

<p>When working with functional code, a function returning a <code>Unit</code> is a huge warning sign. In functional programming we compose programs of functions which are (<a href="https://twitter.com/jdegoes/status/936301872066977792" rel="nofollow noreferrer">quoting John De Goes</a>):</p>

<blockquote>
  <ol>
  <li>Total: They return an output for every input. </li>
  <li>Deterministic: They return the same output for the same input. </li>
  <li>Pure: Their only effect is computing the output.</li>
  </ol>
</blockquote>

<p>In FP, if a function returns a Unit, it basically means that the function does nothing, as the only thing a function can do is to return a result.</p>

<p><strong>rotatedMatrix</strong></p>

<p>In FP preallocating the <code>rotatedMatrix</code> doesn't make sens, because in order to stay Pure <code>rotateByOne</code> is disallowed to mutate the <code>rotatedMatrix</code>. And the solution is simple, the <code>rotateByOne</code> should allocate and <strong>return</strong> a rotated matrix.</p>

<p><strong>rotateByOne</strong></p>

<p>While moving the allocation of <code>rotatedMatrix</code> into the <code>rotateByOne</code> would make <code>rotateByOne</code> a pure function, the implementation of the function would still be clattered with state mutations, and generally much more complex than it needs to be.</p>

<p>So let's have a look at how it can be improved. </p>

<p>Edge-case/error handling aside, I would expect the problem to be solved with a <code>def rotateByOne(in: Array[Array[Int]]): Array[Array[Int]]</code>. That function would have to create a new matrix of the same dimensions, finding a new value of each cell in the matrix. It's implementation could look like</p>

<pre><code>  def rotateByOne(in: Array[Array[Int]]): Array[Array[Int]] = {
    val size = in.length
    (0 until size).map { i =&gt;
      (0 until size).map { j =&gt;
        newValueAt(in, i, j)
      }.toArray
    }.toArray
  }
</code></pre>

<p>Now all that's left is to implement the <code>def newValueAt(in: Array[Array[Int]], i: Int, j: Int): Int</code> which is again - <em>a pure function</em> - doing nothing but returning an <code>Int</code>. There are 5 cases to be considered, in <code>newValueAt</code>. Using the value of the cell:
below, above, on the right, on the left, and the same cell.  </p>

<p>For 3 x 3 matrix it's:</p>

<pre><code>b l l
b s a
r r a
</code></pre>

<p>For 4 x 4 matrix it's:</p>

<pre><code>b l l l
b b l a
b r a a
r r r a
</code></pre>

<p>After a few minutes of trial and error, I've ended up with the following implementation:</p>

<pre><code>  def newValueAt(in: Array[Array[Int]], i: Int, j: Int): Int = {
    val s = in.size - 1
    if      (i &gt;= j &amp;&amp; s - i &gt;  j) in(i + 1)(j) // 'b'
    else if (i &lt;  j &amp;&amp; s - i &gt;= j) in(i)(j - 1) // 'l'
    else if (i &lt;= j &amp;&amp; s - i &lt;  j) in(i - 1)(j) // 'a'
    else if (i &gt;  j &amp;&amp; s - i &lt;= j) in(i)(j + 1) // 'r'
    else                           in(i)(j)     // 's'
  }
</code></pre>
    </div>