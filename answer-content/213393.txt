<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Access</h2>

<p>I don't like the fact that <code>Access</code> gives you a reference to the object directly. This leads to issues with somebody accidentally keeping a reference to the object after the <code>Accesses</code> object is destroyed or accidentally making a copy of the object.</p>

<pre><code>T&amp;  myRef = wrapped.access().obj_;   // Now I have a reference to the object
                                     // But the Accesses object is gone.

myRef.doStuffWithNoLock();


// or

T   myCopy = wrapped.access().obj_;  // I made a copy of the object.
</code></pre>

<p>How about <code>Access</code> delegating all accesses via operator <code>-&gt;</code>? That way you don't leak the object to external code.</p>

<pre><code>class Access
{
    public:
        T* operator-&gt;() {return &amp;obj_;}
    private:
        T&amp;  obj_;
};
</code></pre>

<p>Now you can use <code>Access</code> like it was a <code>T*</code>:</p>

<pre><code>auto foo = wrapper.access();
foo-&gt;fun1(args);
foo-&gt;fun2(args);
</code></pre>

<h2>Initializer list</h2>

<p>The order of initialization of members is the order of declaration. If you define the order deferently in the initializer list this can be confusing (most compilers will warn you about it).</p>

<pre><code>class Access {
    public:
    Access(std::mutex&amp; m, T&amp; obj)
        : sl_(m)             // This is not the order they are
        , obj_(obj)          // initialized in. The obj_ will be done first
    {}

    T&amp; obj_;

    private:
    std::scoped_lock&lt;std::mutex&gt; sl_;//mutex is locked here (by RAII)
};
</code></pre>

<p>Best practice is to keep the initializer list in the same order as the declaration order in the class.</p>
    </div>