<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I suggest using a unit test framework. </p>

<h1>Test Cases</h1>

<p>You test multiple test cases in one function. Write a test in the format of "Arrange Act Assert". You should have a single act - a single call to <code>HighCard::Play</code> in each test. </p>

<h1>Assert</h1>

<p>You are asserting the output of the game. This makes the tests fragile because a change in the presentation will break tests.</p>

<p>Separate logic from the presentation and test the logic. The tests will become shorter and clear.</p>

<h1>Random</h1>

<ul>
<li><p>You should not have a test code on your production code.</p></li>
<li><p>A way to handle random logic in tests is to replace it with mocks.</p></li>
</ul>

<h2><code>test_win</code> and <code>test_wildcard</code></h2>

<p>Separate the logic of who is the winning card to another function like this <code>WinStatus whoWin(rank1,suit1,rank2,suit2,card2)</code>.</p>

<p>Now, you can test <code>whoWin</code> and there are no calls to <code>rand</code>.Also, it creates documentation for the rules.</p>

<h2>Retries tests</h2>

<p>I see a few options here:</p>

<ol>
<li>Mock <code>rand</code> calls. Wrap the calls to <code>rand</code> with a class and use mock to return different values for each call. This is what you did but with mocks.</li>
<li><p>Mock <code>takeCard</code>.
The following lines are the logic of taking a card from the deck:</p>

<p><code>rank1 = f() % NUM_OF_CARDS + 1;<br>
suit1 = f() % 4 + 1;</code></p>

<p>Use mock to return different values for each call. Having a Card class will help here.</p></li>
<li><p>Mock the result of <code>whoWin</code>. You still call <code>rand</code> in tests but it doesn't affect anything.</p></li>
</ol>

<p>I prefer the second option because it tests more logic in a single test.</p>
    </div>