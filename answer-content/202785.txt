<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>def check_if_condition_was_met( row, condition ):
    condition_met = True
    for key, val in condition.iteritems():
        if key == 'in':
            for condition_key, condition_val in val.iteritems():
            """Since continuing on 'in' and only manipulating 'not in's"""
                if row[condition_key] not in condition_val:
                    condition_met = False
                    break
        elif key == 'not in':               
            for condition_key, condition_val in val.iteritems():
            """Again continuing on 'not in' only manipulating 'in's"""
                if row[condition_key] in condition_val: 
                    condition_met = False
                    break
        elif key == 'max':         
            for condition_key, condition_val in val.iteritems():
                if not row[condition_key]:
                    condition_met = False
                    break
                """Same can  eliminate the the continue statements by changing this """
                elif int(row[condition_key]) &gt;= int(condition_val): # elif 
                    condition_met = False
                    break
        elif key == 'min':
            for condition_key, condition_val in val.iteritems():
            """Again only manipulating the '&lt;=' reached by else"""
                if int(row[condition_key]) &lt;= int(condition_val): 
                    condition_met = False
                    break
    return condition_met


if __name__ == '__main__':
    # data
    test_data = [
         {'Flag1':'Y', 'Flag2':'Canada','Number':35}
        ,{'Flag1':'Y', 'Flag2':'United States','Number':35}
        ,{'Flag1':'N', 'Flag2':'United States','Number':35}
        ,{'Flag1':'N', 'Flag2':'England','Number':35}
        ,{'Flag1':'N', 'Flag2':'Canada','Number':35}
        ,{'Flag1':'N', 'Flag2':'Canada','Number':5}
    ]

    # configuration
    test_conditions = [
         { 'in':{'Flag1':['N'], 'Flag2':['United States']} }
        ,{ 'in':{'Flag1':['Y'],'Flag2':['Canada']}, 'max':{'Number':7} }
        ,{ 'in':{'Flag1':['Y'],'Flag2':['Canada']}, 'min':{'Number':7} }
        ,{ 'not in':{'Flag1':['Y']}, 'min':{'Number':7} }
    ]

    for condition_id, condition in enumerate(test_conditions):
        # print? is this being used for a newline? if so remove and add \n to next print
        print('\nnow testing for condition %i' % condition_id) #newline ()'s for print
        for data_id, data in enumerate(test_data):
            print('%s | %s' % ( data_id, check_if_condition_was_met(data,condition) ))
            #wrap print with ()'s again
</code></pre>

<p>Here are some things I would look at that can be done to get to the values you are altering more efficiently </p>
    </div>