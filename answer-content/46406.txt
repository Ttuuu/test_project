<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not familiar with Android development nor SQLite, so just a few minor generic notes:</p>

<ol>
<li><p>You have the following method in the <code>EntityHelper</code>:</p>

<blockquote>
<pre><code>/**
 * Bind a record to an entity for insert.
 * Remember to not bind the entity id!
 * 
 * @param cursor Cursor from DB
 * @return The binded entity
 */
protected abstract T bind(Cursor cursor);
</code></pre>
</blockquote>

<p>Despite the javadoc comment the implementation contains an id setting:</p>

<blockquote>
<pre><code> /**
 * {@inheritDoc}
 */
protected Alarm bind(Cursor cursor) {
    Alarm alarm = new Alarm();
    //
    alarm.setId(cursor.getLong(Columns._id.ordinal()));
    ...
</code></pre>
</blockquote>

<p>Are you sure that this is right?</p>

<p>If that's important I'd check it in the <code>EntityHelper</code> and throw an exception if the child class was not implemented properly. (See: <em>The Pragmatic Programmer: From Journeyman to Master</em> by <em>Andrew Hunt</em> and <em>David Thomas</em>: <em>Dead Programs Tell No Lies</em>)</p></li>
<li><p>You could eliminate the <code>retv</code> variable with two return statements:</p>

<pre><code>if (cursor.moveToFirst()) {
    return bind(cursor);
}
return null;
</code></pre></li>
<li><p>Comments like this are rather noise:</p>

<blockquote>
<pre><code>T retv = null;
//
SQLiteDatabase db = dbHelper.getReadableDatabase();     
</code></pre>
</blockquote>

<p>I'd remove them.</p></li>
<li><p>You could change</p>

<blockquote>
<pre><code>if(cursor.moveToFirst()) {
    do {
        retv.add(bind(cursor));
    } while(cursor.moveToNext());
    }
</code></pre>
</blockquote>

<p>to a simpler <code>while</code> loop:</p>

<pre><code>while (cursor.moveToNext()) {
    retv.add(bind(cursor));
}
</code></pre></li>
<li><p>I usually try to avoid abbreviations like <code>retv</code>. They are not too readable and I suppose you have autocomplete (if not, use an IDE, it helps a lot), so using longer names does not mean more typing but it would help readers and maintainers since they don't have to remember the purpose of each variable - the name would express the programmers intent and doesn't force readers to decode the abbreviations every time they read/maintain the code.</p></li>
<li><p>I would rename the following method to <code>getTableName()</code>:</p>

<blockquote>
<pre><code>public abstract String getTable();
</code></pre>
</blockquote>

<p>It would describe better what it actually does.</p></li>
</ol>
    </div>