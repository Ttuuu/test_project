<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Alternative Approach</h2>

<p>Here is an alternative implementation that is currently the fastest on LeetCode:</p>

<p><strong>1-</strong> First, let's create two dictionaries, one all for the abscissae (x-axis) and the other for the ordinates (y-axis) :</p>

<pre><code>var xAxisDictionary: [Int:Set&lt;Int&gt;] = [:]
var yAxisDictionary: [Int:Set&lt;Int&gt;] = [:]
</code></pre>

<p>Each dictionary will store the indices of the elements of <code>points</code> that have a certain coordinate. Abscissae are the keys of <code>xAxisDictionary</code>. Ordinates are the keys of <code>yAxisDictionary</code>.</p>

<p><strong>2-</strong> <code>pointsCoordinates</code> will store unique strings that would represent points, this is faster than creating a struct and relying on the automatic hashing system:</p>

<pre><code>var pointsCoordinates: Set&lt;String&gt; = []
</code></pre>

<p>Using a set rather than an array gives better execution time. In fact, if an array is used, the time limit would be exceeded. As shown by the following graph, <code>Array.contains</code> is faster for less than 16 elements. <code>SortedArray.contains</code> would be the fastest from approximately 16 up to 256 elements. <code>Set.contains</code> is the fastest from 256 up to 500 points : </p>

<p><a href="https://i.stack.imgur.com/unKRm.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/unKRm.jpg" alt="Contains"></a></p>

<p><strong>3-</strong> <code>indicesToConsider</code> is a set of indices of points that may be part of a rectangle :</p>

<pre><code>var indicesToConsider: Set&lt;Int&gt; = []
</code></pre>

<p><strong>4-</strong> Let's fill the dictionaries:</p>

<pre><code>for (index, point) in points.enumerated() {
    if var set = xAxisDictionary[point[0]] {
        set.insert(index)
        xAxisDictionary[point[0]] = set
    } else {
        xAxisDictionary[point[0]] = Set([index])
    }

    if var set = yAxisDictionary[point[1]] {
        set.insert(index)
        yAxisDictionary[point[1]] = set
    } else {
        yAxisDictionary[point[1]] = Set([index])
    }
}
</code></pre>

<p>Notice that optional binding is done using <code>if var</code> for <code>set</code> to be mutable.</p>

<p><strong>5-</strong> Then, we only keep points that may be part of a rectangle :</p>

<pre><code>for (_, indicesSet) in xAxisDictionary {
    // A vertical side of a rectangle, as described in this problem, has to have two points with the same x coordinate
    if indicesSet.count &lt; 2 {
        continue
    }

    // Likewise, a horizontal side of a rectangle, as described in this problem, has to have two points with the same y coordinate
    for pointIndex in indicesSet {
        if yAxisDictionary[points[pointIndex][1]]!.count &gt; 1 {
            indicesToConsider.insert(pointIndex)
            pointsCoordinates.insert("\(points[pointIndex][0])_\(points[pointIndex][1])")
        }
    }
}
</code></pre>

<p>Force-unwrapping is safe here, it serves also for brevity.</p>

<p><strong>6-</strong> Let's traverse the considered indices from smallest to largest :</p>

<pre><code>let indicesToConsiderArray = indicesToConsider.sorted()
</code></pre>

<p>Using a sorted array makes a 500ms difference on LeetCode. </p>

<p><strong>7-</strong> Initially, we'll consider that the minimum area is as big as possible :</p>

<pre><code>var result = Int.max
</code></pre>

<p>The maximum value of <code>result</code> is <code>40_000 * 40_000</code> since all the coordinates belong to the interval [0, 40000].  </p>

<p>On LeetCode, defining <code>result</code> as an integer, initially equal to <code>Int.max</code>, was little bit faster than: defining <code>result</code> as an optional integer initially equal to <code>nil</code>, updating it using <code>result = min(abs((x2 - x1) * (y2 - y1)), result ?? Int.max)</code>, and returning <code>result ?? 0</code>.</p>

<p><strong>8-</strong> Now, traverse the <code>indicesToConsiderArray</code>, and calculate the area of the rectangle which is confined between a bottom left corner, and a top right corner :</p>

<pre><code>for pointIndex in indicesToConsiderArray {
    let x1 = points[pointIndex][0]
    let y1 = points[pointIndex][1]
    let xPeers = xAxisDictionary[x1]!
    let yPeers = yAxisDictionary[y1]!

    for xPeer in xPeers {
        if xPeer &lt;= pointIndex {
            continue
        }
        let y2 = points[xPeer][1]
        for yPeer in yPeers {
            if yPeer &lt;= pointIndex {
                continue
            }
            let x2 = points[yPeer][0]
            if pointsCoordinates.contains("\(x2)_\(y2)") {
                result = min(abs((x2 - x1) * (y2 - y1)), result)
            }
        }
    }
}
</code></pre>

<p>Looping through <code>xPeers</code> (or <code>yPeers</code>) could also be written this way : </p>

<pre><code>for case let xPeer in xPeers where xPeer &gt; pointIndex { ... }
</code></pre>

<p>Meanwhile, we update <code>result</code> if a smaller area is found.</p>

<p><strong>9-</strong> At the end of our function, if the value of <code>result</code> isn't changed, then we'll return <code>0</code>, meaning that no rectangle can be formed using <code>points</code> : </p>

<pre><code>return result &lt; Int.max ? result : 0
</code></pre>

<hr>

<p>For convenience, here is the whole solution :</p>

<pre><code>class Solution {
    func minAreaRect(_ points: [[Int]]) -&gt; Int {
        var xAxisDictionary: [Int:Set&lt;Int&gt;] = [:]
        var yAxisDictionary: [Int:Set&lt;Int&gt;] = [:]
        var pointsCoordinates: Set&lt;String&gt; = []
        var indicesToConsider: Set&lt;Int&gt; = []

        for (index, point) in points.enumerated() {
            if var set = xAxisDictionary[point[0]] {
                set.insert(index)
                xAxisDictionary[point[0]] = set
            } else {
                xAxisDictionary[point[0]] = Set([index])
            }

            if var set = yAxisDictionary[point[1]] {
                set.insert(index)
                yAxisDictionary[point[1]] = set
            } else {
                yAxisDictionary[point[1]] = Set([index])
            }
        }

        for (_, indicesSet) in xAxisDictionary {
            if indicesSet.count &lt; 2 {
                continue
            }

            for pointIndex in indicesSet {
                if yAxisDictionary[points[pointIndex][1]]!.count &gt; 1 {
                    indicesToConsider.insert(pointIndex)
                    pointsCoordinates.insert("\(points[pointIndex][0])_\(points[pointIndex][1])")
                }
            }
        }

        let indicesToConsiderArray = indicesToConsider.sorted()

        var result = Int.max

        for pointIndex in indicesToConsiderArray {
            let x1 = points[pointIndex][0]
            let y1 = points[pointIndex][1]
            let xPeers = xAxisDictionary[x1]!   //Force unwrapping is safe here
            let yPeers = yAxisDictionary[y1]!   //and here

            for xPeer in xPeers {
                if xPeer &lt;= pointIndex {
                    continue
                }
                let y2 = points[xPeer][1]
                for yPeer in yPeers {
                    if yPeer &lt;= pointIndex {
                        continue
                    }
                    let x2 = points[yPeer][0]
                    if pointsCoordinates.contains("\(x2)_\(y2)") {
                        result = min(abs((x2 - x1) * (y2 - y1)), result)
                    }
                }
            }
        }

        return result &lt; Int.max ? result : 0
    }
}
</code></pre>

<p>The execution time on LeetCode is <code>1472 ms</code> :</p>

<p><a href="https://i.stack.imgur.com/szZYD.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/szZYD.png" alt="100%"></a></p>

<p>Compared to <code>3404 ms</code> for the accepted answer (which is faster than 0.00%)</p>
    </div>