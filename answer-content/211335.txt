<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can make the call to recieve_from async by creating a temp struct with the variables you need to keep alive and the buffer. Then you can put it in a shared_ptr (to account for the potential copies and capture that shared_ptr in the lambda:</p>

<pre><code>void GameServer::handlePacket()
{
    unsigned int available = socket.available();
    struct rec_data{
        std::vector&lt;unsigned char&gt; buffer;
        asio::ip::udp::endpoint senderEndpoint;
    }

    std::shared_ptr&lt;rec_data&gt; data = std::make_shared&lt;rec_data&gt;();
    data-&gt;buffer.resize(available);

    socket.receive_from(asio::buffer(data -&gt;buffer.data(), available), 
         data -&gt;senderEndpoint, 0, 
         [data](const std::error_code&amp; error, 
                std::size_t bytes_transferred)
         {
             if(!error)
                 asyncParsePacket(data-&gt;buffer.data(), bytes_transferred, data-&gt;senderEndpoint);
         });
}
</code></pre>

<p>The int you use for <code>registerHandler</code> is a magic number. Make it an enum and give each message type a name. Make sure to share the header between the sender and receiver.</p>
    </div>