<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After I examine the codes you have written, I could see some things that are not rightly done. Below are the few things I highlighted:</p>
<ul>
<li>The structuring of the codebase is not okay hence it can be maintainable and scalable if the codebase grows.</li>
<li>The RESTful API naming convention is not an acceptable one. Endpoints of any REST API should contain only resources (nouns) and use HTTP methods (verbs) for actions. You named your endpoint as <strong>/qanda</strong> instead of <strong>/qandas</strong>. I recommend you read this <a href="https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9" rel="nofollow noreferrer">RESTful API Designing guidelines</a> by Mahesh Haldar posted at Hackernoon. It's a great resource for developers.</li>
<li>Thirdly, you did not separate your server from express; they are both coupled together. It's not best practice to do so.</li>
<li>When API is being consumed by other applications, upgrading the APIs with some changes would also lead to breaking the existing services contract - this has been noticed by a lot of applications that provide API services. It is a best practice to always prefix all your URLs with <strong>/api/v1/users</strong> . If there is any major breaking update, we can name the new set of APIs as <strong>v2, v3, or v1.X.X</strong>. respectively.</li>
</ul>
<p>From my experience, this is how I would approach it:</p>
<ul>
<li>Firstly, I will create a directory called, <strong>qanda-api</strong>, inside it, I'll create other directories called <strong>src</strong> and two files <strong>app.js and server.js</strong> that reside inside the root directory with <strong>src</strong></li>
<li>Secondly, inside <strong>src</strong> I will create two sub-directories called <strong>routes and controllers</strong></li>
<li>Thirdly, I will initialize an npm registry in the root of the project directory that keeps track of all <strong>npm</strong> installed packages by typing the command below via the terminal:</li>
</ul>
<blockquote>
<p>npm init</p>
</blockquote>
<ul>
<li>After that, I will install the three dependencies that I will be using via the same terminal, but this time you must have internet access:</li>
</ul>
<blockquote>
<p>npm install express dotenv morgan</p>
</blockquote>
<ul>
<li>If the above process executes successfully, you will see the installed packages inside a file called <strong>package.json</strong></li>
</ul>
<h1>Now let's do the coding by getting our hands dirty</h1>
<ul>
<li>Let's first create a file named <strong>controllers/qandaController.js</strong> in other to write our qanda logic that will be exported to its route file.</li>
</ul>
<pre><code>exports.getAllQandas = (req, res) =&gt; {
    res.status(200).json({
        status: 'success',
        message: 'Documments retrieved successfully',
        data: 'The data goes here from the data!'
    });
};

exports.getQanda = (req, res) =&gt; {
    res.status(200).json({
        status: 'success',
        message: 'Doc retrieved successfully',
        data: 'The data goes here from the data!'
    });
};

exports.createQanda = (req, res) =&gt; {
    res.status(201).json({
        status: 'success',
        message: 'Qanda created successfully',
        data: 'Return the created data here!'
    });
};

exports.updateQanda = (req, res) =&gt; {
    res.status(200).json({
        status: 'success',
        message: 'Doc updated successfully',
        data: 'The updated data goes here!'
    });
};

exports.deleteQanda = (req, res) =&gt; {
    res.status(200).json({
        status: 'success',
        message: 'Doc deleted!',
        data: 'Return the Deleted data'
    });
};
</code></pre>
<ul>
<li>Now, it's time for us to create our <strong>qanda</strong> route in <strong>routes/qandaRoutes.js</strong>. We will then import the controller logic in its route handler below.</li>
</ul>
<pre><code>const express = require('express');
/**
 * import the qanda controller
 */
const qandaController = require('./../controllers/qandaController');

const router = express.Router();

router
    .route('/')
    .get(qandaController.getAllQandas)
    .post(qandaController.createQanda);

router
    .route('/:id')
    .get(qandaController.getQanda)
    .patch(qandaController.updateQanda)
    .delete(qandaController.deleteQanda);

module.exports = router;
</code></pre>
<ul>
<li>Let's open the file we created earlier on called <strong>app.js</strong> in other to make use of the express we had installed. The content of this file is only for express which is then exported to its server:</li>
</ul>
<pre><code>const express = require('express');
const morgan = require('morgan');

const qandaRouter = require('./routes/qandaRoutes');

const app = express();
    
if (process.env.NODE_ENV === 'development') app.use(morgan('dev'));

// ROUTES
app.use('/api/v1/qandas', qandaRouter);
    
/*
 ** HANDLING UNHANDLED ROUTES
 */
app.all('*', (req, res, next) =&gt; {
    res.status(404).json({
        status: 'fail',
            message: `Can't find ${req.originalUrl} on this Server!`
    });
});
   
module.exports = app;
</code></pre>
<ul>
<li>Let's create our server which becomes our entry point to the application. This where the actual execution happens whereby the exported <strong>app.js</strong> get used by inserting it as an argument in the createServer() function.</li>
</ul>
<pre><code>require('dotenv').config({ path: '.env' });
const http = require('http');

const app = require('./app');

const port = process.env.PORT || 5000;

const server = http.createServer(app);

server.listen(port, () =&gt; console.log(`App running on port ${port}`));
</code></pre>
<h2>Conclusion</h2>
<p>It's highly recommended to always have separation of concerns while writing codes and to aptly have a clean codebase that is maintainable and scalable over time. There's more to code organization when it comes to API design, one of it is the <strong>DRY</strong> principle (Don't Repeat Yourself). If you want to learn more about API design in Node.JS I recommend you take this course by <a href="https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/" rel="nofollow noreferrer">Jonas</a>. He demystifies the abstract concepts and taught best practices to the core. I've wrapped this answer with API design projects in Github: <a href="https://github.com/akeren/stackoverflow-answer" rel="nofollow noreferrer">API</a> and <a href="https://github.com/akeren/nodejs-tours-api" rel="nofollow noreferrer">Tourism API</a>. Feel free to clone or modify as you need.</p>
    </div>