<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Appending to an array</h1>

<p><code>INDX46=[INDX46; i;];</code> is a very slow way of appending to a vector. Instead, do <code>INDX46(end+1) = i;</code>.</p>

<p>When appending to the matrix in this preferred way, MATLAB actually extends the storage of the vector. MATLAB will double the underlying memory block size so that repeated appending will be optimal (O(log <em>n</em>) rather than O(<em>n</em>)). That is, most of the loop iterations the data will not need to be copied to extend the array.</p>

<p>In contrast, the first method of appending actually creates a new array, and copies the old array and the new value into it. The interpreter does not use the optimal O(log n) method of extending the array.</p>

<p>See <a href="https://stackoverflow.com/questions/48351041/matlab-adding-array-elements-iteratively-time-behavior">this Q&amp;A on Stack Overflow</a> for an experiment that demonstrates the above.</p>

<h1>Finding strings</h1>

<p>There's no data in the OP that can be easily used to test modifications, but as I see it, the double loop is comparing each of the elements of <code>list46</code> to each of the elements of <code>elec.label</code> to find the indices in the latter that contain an element of the former. This loop can be sped up greatly by first sorting alphabetically the two lists. With two sorted lists, one need to go through both lists only once to find all matches. The algorithm goes from O(<em>nm</em>) to O(<em>n</em>+<em>m</em>), with <em>n</em> and <em>m</em> the lengths of the two arrays.</p>

<p>MATLAB has a function <a href="https://www.mathworks.com/help/matlab/ref/ismember.html" rel="nofollow noreferrer"><code>ismember</code></a> that does just this:</p>

<pre class="lang-matlab prettyprint-override"><code>INDX46 = ismember(elec.label, list46);
</code></pre>
    </div>