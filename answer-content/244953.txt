<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>This line is equivalent to your code which you were likely trying to make and using 2d array for</strong></p>
<pre><code> np.max(
    prices[np.arange(0, len(prices) - 5).reshape(-1, 1) + np.arange(1, 6)].squeeze()
    / prices[np.arange(0, len(prices) - 5)]
)
</code></pre>
<p>Hmm, it's not easy to understand. Let's break it into chunks.</p>
<pre><code>np.arange(0, len(prices) - 5).reshape(-1, 1) 
</code></pre>
<p>gives</p>
<pre><code>array([[  0],
       [  1],
       [  2],
       [  3],
       .....
       .....
       [  994]])
</code></pre>
<p>Next, here, something called as "broadcasting" is taking place.</p>
<pre><code>np.arange(0, len(prices) - 5).reshape(-1, 1) + np.arange(1, 6)
</code></pre>
<p>gives</p>
<pre><code>array([[  1,   2,   3,   4,   5],
       [  2,   3,   4,   5,   6],
       [  3,   4,   5,   6,   7],
       ...,
       [993, 994, 995, 996, 997],
       [994, 995, 996, 997, 998],
       [995, 996, 997, 998, 999]])
</code></pre>
<p>After getting the right index we take the prices at those indices, but it will return a 3d matrix. Therefore we use "squeeze" to remove one of the dimensions.</p>
<pre><code>prices[np.arange(0, len(prices) - 5).reshape(-1, 1) + np.arange(1, 6)].squeeze()
</code></pre>
<p>Finally we use vector division and return the maximum of the matrix.</p>
<p><strong>Alternate method:</strong>
Well numpy is good but this broadcasting and some stuff is often unclear to me and always keeps me in the dilemma if my matrices are being multiplied right.Sure I can use assert but there's a Python package "Numba" which optimizes your Python code.You should definitely check it out.</p>
    </div>