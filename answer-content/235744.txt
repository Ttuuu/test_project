<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few possible improvements.</p>

<hr>

<h1>Variable Naming</h1>

<p>According to <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">PEP 8</a>, variable names, including parameters, should be in <code>snake_case</code>, not <code>camelCase</code>. This will apply to all the improvements made below.</p>

<h1>Type Hints</h1>

<p>You can use type hints to display what types of parameters are accepted, if any, and what types, if any, are returned by the function. Observe:</p>

<pre><code>def my_function(string: str, length: int) -&gt; bool:
    return len(string) == length
</code></pre>

<p>This is a very short example, but displays both points in action. You can clearly see that <code>string</code> should be of type <code>str</code>, and <code>length</code> should be of type <code>int</code>. You can also see that the function returns a boolean (<code>bool</code>) value.</p>

<h1><code>word_loader</code></h1>

<p>This function can be improved to the following:</p>

<pre><code>def word_loader() -&gt; str:
    """Loads a random word from the word list."""
    with open("words.txt") as file:
        lines = file.readlines()
    return random.choice(lines).strip()
</code></pre>

<p>Instead of generating a random number within the length of the file, you can instead use <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer"><code>random.choice</code></a> to select a random value within the list. Then, you can use <a href="https://www.programiz.com/python-programming/methods/string/strip" rel="nofollow noreferrer"><code>.strip()</code></a> to remove the newline from the end of the word.</p>

<h1><code>word_printer</code></h1>

<p>This function can be improved to the following:</p>

<pre><code>def word_printer(word: str, guess_count: int, guessed_letters: list) -&gt; None:
    """Prints out underscores for unguessed letters and the letter for correctly guessed letters."""
    word_data = ["_" for _ in enumerate(word)]
    word_data = info_adder(word_data, guessed_letters)
    print(" ".join(word_data)) # Prints the list with each character separated by a space
    print(f"You have {guess_count} wrong guesses left")
</code></pre>

<p>You can use <a href="https://www.pythonforbeginners.com/basics/list-comprehensions-in-python" rel="nofollow noreferrer">list comprehension</a> to create the list <code>word_data</code> in one line. Note that <code>None</code> is being used as a type hint. <code>None</code>, returned from a function, can indicate a Null Object, or it may signal that the function doesn't really return anything.</p>

<h1><code>win_checker</code></h1>

<p>This function can be improved to the following:</p>

<pre><code>def win_checker(word: str, guessed_letters: list) -&gt; bool:
    """Checks if game has been won."""
    correct_letters = sum(1 if letter[1] in guessed_letters else 0 for letter in enumerate(word))
    return correct_letters == len(word)
</code></pre>

<p>Two main improvements have been made in this function. </p>

<p>One, the use of <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generators</a>. This is paired with the use of <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code></a>. What the first line does is sets <code>1</code> if the boolean condition (<code>if letter[1] in guessed_letters</code>), and if it isn't, <code>0</code>. This goes through the entire generator (<code>for letter in enumerate(word)</code>). <code>sum()</code> then returns an integer value, representing the sum of the generator expression.</p>

<p>Two, returning boolean expressions. Instead of <code>if x &gt; y return True else return False</code>, you can simply <code>return x &gt; y</code>. Since <code>x &gt; y</code> results in a boolean value, returning the expression results in retuning the value returned by the expression. I may have worded that weirdly, so here are three identical statements:</p>

<pre><code>if x &gt; y:
    return True
return False
</code></pre>

<pre><code>if x &gt; y:
    return True
else:
    return False
</code></pre>

<pre><code>return x &gt; y
</code></pre>

<p>These do the exact same thing. The last one is nicer and a lot shorter.</p>
    </div>