<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Return early, there's no need to touch files if the current file is &lt;5mb.</li>
<li>DRY your code, move the <code>"{}{}.{}".format</code> into it's own function.</li>
<li>Don't use comprehensions for mutations. Use an explicit <code>for</code> loop for that.</li>
<li><p>As you want idiomatic code, you should be aware that some people discourage the use of <code>__</code> as it performs name mangling.</p>

<p>If the function is intended to be private, not protected, then it should be ok.</p></li>
<li>You can use the <code>pairwise</code> recipe to make the reversed pairwise loop. I think it's more readable, however you may not.</li>
<li>It's unidiomatic to put brackets on if statements. Unless the statement spans multiple lines.</li>
<li>It's idiomatic to put two newlines around top level classes and functions.</li>
<li>I'm a bit confused why you want to touch everything.</li>
<li>You may want to split all the different aspects of <code>rotate</code> into smaller functions to follow SRP.</li>
</ol>

<p>Your code's pretty idiomatic otherwise, your naming conventions are good, you've used a main guard and you've got white space where it should be.</p>

<pre><code>from os import listdir
from os.path import getsize, exists
from shutil import copyfile
from argparse import ArgumentParser
import itertools


def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = itertools.tee(iterable)
    next(b, None)
    return zip(a, b)


SIZE_5MB = 5e6
MAX_LOG_FILES_COUNT = 5


class LogRotator(object):
    def __init__(self, prefix, suffix):
        self.prefix = prefix
        self.suffix = suffix

    def __str__(self):
        return  "{}[x].{}".format(self.suffix, self.prefix)

    def __touch(self, file_name):
        open(file_name, 'w').close()

    def _gen_file_name(self, name):
        return "{}{}.{}".format(self.prefix, name, self.suffix)

    def rotate(self):
        current_log = self._gen_file_name('')
        if getsize(current_log) &lt; SIZE_5MB:
            return

        files = [
            self._gen_file_name(i)
            for i in range(1, MAX_LOG_FILES_COUNT + 1)
        ]

        for file in files:
            if not exests(file):
                self.__touch(f)

        for older, newer in pairwise(reversed([current_log] + files)):
            copyfile(newer, older)

        self.__touch(current_log)


if __name__ == '__main__':
    parser = ArgumentParser(description="Rotate log files")
    parser.add_argument("-prefix", help="log file prefix")
    parser.add_argument("-suffix", help="log file suffix")

    args = parser.parse_args()

    log_rotator = LogRotator(args.prefix, args.suffix)
    log_rotator.rotate()
</code></pre>
    </div>