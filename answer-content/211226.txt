<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Fully functional example :</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class Calculator extends React.Component {
	constructor(props) {
		super(props)

		this.state = {
			currentNumber: ''
		}
	}

	addChar = char =&gt; ev =&gt; {
		if (!(this.state.currentNumber || ' ').endsWith(' ') || !char.endsWith(' ')){
			this.setState(prevState =&gt; ({
				currentNumber: prevState.currentNumber + char
			}))
		}
	}

	solve = () =&gt; {
		this.setState({
			currentNumber: eval(this.state.currentNumber)
		})
	}

	clear = () =&gt; {
		this.setState({
			currentNumber: ''
		})
	}

	render() {
		const layout = [
			[
				{ name: 'C', func: this.clear },
				{ name: ' / ' },
				{ name: ' * ' },
				{ name: ' - ' },
			], 
			[
				{ name: '7' },
				{ name: '8' },
				{ name: '9' },
				{ name: ' + ' },
			], 
			[
				{ name: '4' },
				{ name: '5' },
				{ name: '6' },
				{ name: ' + ' },
			], 
			[
				{ name: '1' },
				{ name: '2' },
				{ name: '3' },
				{ name: 'E', func: this.solve },
			],
			[
				{ name: '0' },
				{ name: '0'},
				{ name: '.' },
				{ name: 'E', func: this.solve },
			]
		]

		return (
			&lt;div&gt;
				&lt;h1&gt;This here Cal-Q-lator&lt;/h1&gt;
				&lt;div&gt;
					&lt;input value={this.state.currentNumber || '0'} /&gt;
					{layout.map((line, i) =&gt; 
						&lt;div key={i}&gt;
							{line.map((field, i2) =&gt; &lt;button key={i2} onClick={field.func || this.addChar(field.name)} className="btn-1"&gt;{field.name.trim()}&lt;/button&gt;)}
						&lt;/div&gt;
					)}
				&lt;/div&gt;
			&lt;/div&gt;
		)
	}
}

ReactDOM.render(
	&lt;Calculator /&gt;,
	document.getElementById('root')
);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;div id='root'/&gt;</code></pre>
</div>
</div>


<p>For this review I will be using a class extending <code>React.Component</code>.</p>

<p>First, your initial data. By default your calculator will be showing a <code>0</code> in the input field. Since this value is simply going to be deleted once the user types anything into the calculator interface, I suggest setting the default value of your input into an empty string, and just showing a <code>0</code> on the render side when the string is empty :</p>

<p>State:</p>

<pre><code>constructor(props) {
   super(props)

   this.state = {
       currentNumber: ''
   }
}
</code></pre>

<p>Clear function: </p>

<pre><code>clear = () =&gt; {
    this.setState({
        currentNumber: ''
    })
}
</code></pre>

<p>Render: </p>

<pre><code>&lt;input value={this.state.currentNumber || '0'} /&gt;
</code></pre>

<p>Next up, handling operators and values. Both operators and value will do the same thing, adding characters to your <code>currentNumber</code>, the only difference being that operators will add spaces and cannot be displayed next to each other or at the beginning of the input.</p>

<p>When setting a state value depending on an older one, you should avoid using the raw <code>this.state</code> and use the callback version of <code>setState</code>, allowing you to get the previous state and avoid any unexpected behavior :</p>

<pre><code>addChar = char =&gt; ev =&gt; {
    if (!(this.state.currentNumber || ' ').endsWith(' ') || !char.endsWith(' ')){
        this.setState(prevState =&gt; ({
            currentNumber: prevState.currentNumber + char
        }))
    }
}
</code></pre>

<p>Finally, layout.</p>

<p>Every single button is made out of the same node, with the same classname. This part of the code can be drastically reduced. First, let's make an array containing what differs between every button: what is shown, and the action it does when you click it:</p>

<pre><code>const layout = [
    [
        { name: 'C', func: this.clear },
        { name: ' / ' },
        { name: ' * ' },
        { name: ' - ' },
    ],
    [
        { name: '7' },
        { name: '8' },
        { name: '9' },
        { name: ' + ' },
    ],
    [
        { name: '4' },
        { name: '5' },
        { name: '6' },
        { name: ' + ' },
    ],
    [
        { name: '1' },
        { name: '2' },
        { name: '3' },
        { name: 'E', func: this.solve },
    ],
    [
        { name: '0' },
        { name: '0' },
        { name: '.' },
        { name: 'E', func: this.solve },
    ]
]
</code></pre>

<p>By default, every button will call the <code>addChar</code> function we made earlier, allowing use to reduce the code even further and make an nested array of JSON objects containing mostly button names.</p>

<p>We can now render it by mapping every element to make buttons:</p>

<pre><code>{layout.map((line, i) =&gt; 
    &lt;div key={i}&gt;
        {line.map((field, i2) =&gt; &lt;button key={i2} onClick={field.func || this.addChar(field.name)} className="btn-1"&gt;{field.name.trim()}&lt;/button&gt;)}
    &lt;/div&gt;
)}
</code></pre>

<p><em>Yes, I know this question is from 2017</em></p>
    </div>