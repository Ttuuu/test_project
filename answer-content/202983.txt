<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have implemented a new way of the delete method, I took some of the suggestions that @mdfst13 suggested, and I am pretty happy about it, but would really like some feedback on it.</p>

<p>New code:</p>

<pre><code>public void delete(int data) {
    delete(root, root, data);
}

private void delete(Node parent, Node current, int data) {

    if(current == null) return;

    if(data &lt; current.getData())
        delete(current, current.getLeftNode(), data);
    else if(data &gt; current.getData())
        delete(current, current.getRightNode(), data);
    else { //found, current is equal to the node to be deleted.

        boolean isLeft = true;
        //Here I am checking to see which of the left and right references
        //I need to update for the parent, for case 1 and 2.
        if(parent.getLeftNode().getData() == current.getData()) isLeft = true;
        else isLeft = false;

        //Case 1: If node to be removed is a leaf, no children.
        if(current.getLeftNode() == null &amp;&amp; current.getRightNode() == null) {
            if(isLeft) parent.setLeftNode(null);
            else //Meaning the node to be deleted is the right node of the parent.
                parent.setRightNode(null);
        }
        //Case 2: If node to be removed has 1 child.
        else if(current.getLeftNode() != null &amp;&amp; current.getRightNode() == null) {
            if(isLeft) parent.setLeftNode(current.getLeftNode());
            else parent.setRightNode(current.getLeftNode());
        }
        else if(current.getRightNode() != null &amp;&amp; current.getLeftNode() == null) {
            if(isLeft) parent.setLeftNode(current.getRightNode());
            else parent.setRightNode(current.getRightNode());
        }
        else {
            //Case 3: If node to be deleted has 2 children.
            Node smallest = findSmallest(current.getRightNode());
            current.setData(smallest.getData());
            delete(current, current.getRightNode(), smallest.getData());
        }
    }
}

public Node findSmallest() {
    return findSmallest(root);
}

private Node findSmallest(Node start) {

    Node smallest = start;

    while(smallest.getLeftNode() != null) {
        smallest = smallest.getLeftNode();
    }
    return smallest;
}
</code></pre>
    </div>