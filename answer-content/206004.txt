<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This can be heavily simplified using pattern matching:</p>

<pre><code>bool IsPositive(object sender)
{
  switch (sender)
  {
    case SymbolIcon icon:
      return icon.Symbol == Symbol.Add;
    case ContentControl c when c.Content is SymbolIcon icon:
      return icon.Symbol == Symbol.Add;
    case ViewBox v when v.Child is SymbolIcon icon:
      return icon.Symbol == Symbol.Add;
  }
  throw new InvalidOperationException([..]);
}
</code></pre>

<p>Notice the repetition in the case blocks? At this point one might be tempted to try and merge these, but you won't be able to. Even the Roslyn 2.0 compiler doesn't allow you to declare a  variable with the same name in the same scope twice. </p>

<p>That said, something here is weird and dangerous. The name <code>sender</code> implies that you're doing some event processing here.
That in turn implies that you have the same event handler for multiple different components, otherwise how will you end up putting many different components into the same <code>IsPositive</code> method.</p>

<p>The code I presented above might be more succinct (and use the latest fancy gimmicks), but it still smells.</p>

<p>The <strong>correct</strong> solution here is to have distinct event handlers for the separate components. That way you don't need to deal with any unexpected layouts in that method. It also makes dealing with the SymbolIcon very easy.</p>

<p><strong>But wait: This thing shows an underlying issue with how your program is designed.</strong></p>

<p>As it stands, you're using the UI controls to <strong>store business logic state</strong>. Don't do that. Instead use proper MVC / MVVM concern separation. Don't store booleans in Symbols. Instead expose booleans from your model and convert them using a custom  converter to set your SymbolIcons from that. </p>
    </div>