<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good job using <code>const</code> for <code>values</code>, as well as <code>let</code> for re-assignable values like <code>counter</code> and <code>rejected</code>.</p>

<p>Did you test this code? My presumption is that it didn't happen, because when <a href="https://jsbin.com/zumeculobe/edit?js,console,output" rel="nofollow noreferrer">I tried running it</a>, I see the following error:</p>

<blockquote>
  <p>error promise.then is not a function</p>
</blockquote>

<p>This is because the promises are spread out:</p>

<blockquote>
<pre><code>function all (...promises) {
</code></pre>
</blockquote>

<p>Without the spread operator it appears to run as I would expect, as long as each entry in <code>promises</code> is a promise. </p>

<p>I must admit I compared with <a href="https://medium.com/@muralikv/implementing-promise-all-in-javascript-732076497946" rel="nofollow noreferrer">another implementation of <code>Promise.all()</code></a>. In comparison with that function, yours tracks <code>rejected</code>, whereas the other one simply calls <code>reject</code> whenever a promise is rejected.</p>

<p>Another thing I noticed is that the variable name <code>promise</code> is reused - both for the outer promise to be returned by <code>all()</code> as well as the callback to <code>promises.forEach()</code>. It would be wise to use different names to improve readability. In fact there is little need to assign the outer promise - it can simply be returned without being assigned to a variable since it isn't modified after being instantiated.</p>

<p>Another aspect to consider is that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" rel="nofollow noreferrer"><code>Promise.all()</code></a> can accept promises or non-promises - e.g. the MDN documentation gives an example like this:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const promise1 = Promise.resolve(3);
const promise2 = 42; // &lt;- not really a promise
const promise3 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 100, 'foo');
});

Promise.all([promise1, promise2, promise3]).then(function(values) {
  console.log(values);
}).catch(error =&gt; {
   console.log('error: ', error.message); 
});
// expected output: Array [3, 42, "foo"]</code></pre>
</div>
</div>


<p>With your code, it throws the error <code>promise.then is not a function</code> so it might be wise to check if each item is a promise before calling <code>.then()</code> on it.</p>
    </div>