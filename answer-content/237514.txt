<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The first solution</h3>

<p>There's a bug in the first loop:</p>

<blockquote>
<pre><code>    for w in wdict:
        if s.startswith(w):
            if len(s) == len(w):
                ans.append(w)
                return ans
                ^^^^^^^^^^ should not do this!
            st.append((w, 0, [w]))
</code></pre>
</blockquote>

<p>It's not correct to return when one of the words is the same as the sentence,
because there might be other words to compose that sentence.
At it is, the program produces incorrect result for the input:</p>

<blockquote>
<pre><code>"foobar"
["foobar", "foo", "bar"]
</code></pre>
</blockquote>

<hr>

<p>The first loop duplicates some of the logic of the second loop.
You can remove the first loop completely if you initialize <code>st</code> like this:</p>

<pre><code>st = [('', 0, [])]
</code></pre>

<hr>

<p>This solution is much slower than the second,
because unlike the second,
it doesn't do anything to avoid repeated computation of sub-problems.
For example, if the input string is <code>"foobar" + some_very_long_string</code>,
and the word list has <code>"foo"</code>, <code>"bar"</code>, and <code>"foobar"</code>, then the sentences for <code>some_very_long_string</code> will be computed twice at least, for the <code>"foo bar"</code> and <code>"foobar"</code> prefixes.</p>

<h3>The second solution</h3>

<p>The posted code is broken, probably you copy-pasted a work-in-progress version:</p>

<blockquote>
<pre><code>result_of_rest = helper(s[len(word):], wordDict, memo)
</code></pre>
</blockquote>

<p>This line references the nonexistent function <code>helper</code>,
and the nonexistent variable <code>wordDict</code>.
The fix is easy enough:</p>

<pre><code>result_of_rest = inverse_helper(s[len(word):], wdict, memo)
</code></pre>

<p>Next time please make sure to post working, verified code!</p>

<hr>

<p>This solution implements memoization manually.
Python has a cool technique to make this easier,
using <code>lru_cache</code> from the <code>functools</code> package.
In a nutshell,
all you need is a function with hashable arguments,
and then you can simply annotate it with <code>@lru_cache</code> to benefit from easy memoization.</p>

<pre><code>from functools import lru_cache


def word_break_helper(text, wdict):
    @lru_cache(maxsize=128)
    def helper(s):
        res = []
        for word in wdict:
            if not s.startswith(word):
                continue
            if len(word) == len(s):
                res.append(word)
            else:
                for sentence in helper(s[len(word):]):
                    res.append(word + ' ' + sentence)
        return res

    return helper(text)
</code></pre>

<h3>Use better names</h3>

<p>The names used in both solutions are quite poor.</p>

<p>I don't know what's "inverse" about these solutions.
Sure, the first one uses a stack, to which it appends and pops values,
but it's not really important anyway.
So I don't get "inverse" in these names.</p>

<p><code>res</code>, and <code>ans</code> are poor as well. Why not naturally <code>sentences</code>?</p>

<p><code>wordDict</code> doesn't follow Python naming conventions (should be <code>snake_case</code>).</p>

<h3>Further improving performance</h3>

<p>Although it doesn't seem to be important in this puzzle,
looping over the list of supported words to find possible prefixes would be inefficient with a large number of words.
You could use a more efficient data structure to retrieve potential prefix words without iterating over all the supported words.</p>
    </div>