<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some general comments and some things that may help you improve your program.</p>
<h2>Consider whether this is the right API for you</h2>
<p>Vulkan is a very powerful but very difficult and verbose API to use.</p>
<blockquote>
<p>I find graphics programs super hard to debug so like logging everything and want the best way to do this.</p>
</blockquote>
<p>If you find graphics programs super hard to debug, Vulkan is going to make your life even more difficult.  Consider getting up to speed with something a little easier to master such as OpenGL.</p>
<p>With that said, almost all of the code in the question is verbatim from the tutorial, so I will restrict my review solely to the <code>checkRequiredExtensions</code> call you created.</p>
<h2>Pass by value for small parameters</h2>
<p>The code currently declares the function like so:</p>
<pre><code>void checkRequiredExtensions(std::vector&lt;std::string&gt; requiredExtensions, const Verbosity &amp;&amp;verbose);
</code></pre>
<p>The second argument does not need to be a move reference.  Just pass it by value.</p>
<pre><code>void checkRequiredExtensions(std::vector&lt;std::string&gt;&amp; requiredExtensions, const Verbosity verbose);
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/15673889/correct-usage-of-rvalue-references-as-parameters">this question</a> for an more detailed explanation.</p>
<h2>Consider the use of <code>std::copy</code></h2>
<p>Printing the extensions is currently done like this:</p>
<pre><code>for (auto &amp;extension: requiredExtensions)
    std::cerr &lt;&lt; extension &lt;&lt; ", ";
std::cerr &lt;&lt; '\n';
</code></pre>
<p>That's not terrible (although I would use <code>const auto&amp;</code> instead), but you might also consider using <code>std::copy</code> for this:</p>
<pre><code>std::copy(requiredExtensions.begin(), requiredExtensions.end(), 
        std::ostream_iterator&lt;std::string&gt;(std::cerr, ", "));
</code></pre>
<p>If you want to get fancy and omit the final <code>,</code>, see if your compiler and libraries support <a href="https://en.cppreference.com/w/cpp/experimental/ostream_joiner" rel="nofollow noreferrer"><code>std::experimental::ostream_joiner</code></a>.</p>
<p>Also, note that you could print the required extensions directly using <code>copy</code>:</p>
<pre><code>std::copy(glfwExtensions, &amp;glfwExtensions[glfwExtensionCount],
        std::ostream_iterator&lt;const char *&gt;(std::cerr, ", "));
</code></pre>
<h2>Check for errors</h2>
<p>The calls to <code>vkEnumerateInstanceExtensionProperties</code> can fail, so you should check for a return value of <code>VK_SUCCESS</code> at the very least.</p>
<h2>Simplify by avoiding copies</h2>
<p>The code gathers a vector of <code>VkExtensionProperties</code> but then copies it into an unordered set.  There's not much point to that, since you could simply print directly from the vector:</p>
<pre><code>std::cerr &lt;&lt; "Available extensions: ";
for (auto &amp;extension: supportedExtensions) {
    std::cerr &lt;&lt; extension.extensionName &lt;&lt; ", ";
}
std::cerr &lt;&lt; '\n';
</code></pre>
<h2>Understand the API</h2>
<p>The code to check for the presence of required extensions is not really required.  The way Vulkan works is that the required extensions are enumerated explicitly:</p>
<pre><code>createInfo.enabledExtensionCount = glfwExtensionCount;
createInfo.ppEnabledExtensionNames = glfwExtensions;
</code></pre>
<p>When <code>vkCreateInstance</code> is called, it will return <code>VK_ERROR_EXTENSION_NOT_PRESENT</code> if any of the enumerated extensions are missing.</p>
    </div>