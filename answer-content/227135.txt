<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are making the test <code>!Indexs.Contains(Index)</code>. Since <code>Indexs</code> is a <code>List&lt;int&gt;</code> you have a look up time of <code>O(n)</code>. A <code>HashSet&lt;T&gt;</code> has an approximate look up time of <code>O(1)</code>. Create a hash set for this test. Since a set is not ordered, you still need the list.</p>

<pre><code>var Indexs = new List&lt;int&gt;();
var indexTest = new HashSet&lt;int&gt;();

Indexs.Add(0);
indexTest.Add(0);
</code></pre>

<p>and</p>

<pre><code>int i = GetPreference(BorderPixels[LastIndex], Possible.ToArray(), BorderPixels);
Indexs.Add(i);
indexTest.Add(i);
</code></pre>

<p>and of course now test with</p>

<pre><code>if (!indexTest.Contains(Index))
</code></pre>

<ul>
<li><p>Another point is the repeated indexed access of border pixels. Store the pixels in a temp. This also makes the code more readable.</p></li>
<li><p>You can merge all the if-statements into one conditional expression. Because of the <a href="https://www.c-sharpcorner.com/article/short-circuit-evaluation-in-c-sharp/" rel="nofollow noreferrer">Short-Circuit Evaluation In C#</a>, the evaluation will stop at the first term evaluating to <code>true</code>.</p></li>
<li><p>You have duplicated some cases. You have 12 instead of 8. Reordering the conditions in a logical way makes it easier: x-1, x, x+1 combined with y-1, y, y+1.</p></li>
<li><p>The Boolean temp <code>Working</code> can be inlined.</p></li>
<li><p>You can initialize collections in the constructor or with collection initializers.</p></li>
<li><p>The <a href="https://github.com/ktaranov/naming-convention/blob/master/C%23%20Coding%20Standards%20and%20Naming%20Conventions.md" rel="nofollow noreferrer">C# naming conventions</a> use camelCase for parameter names and local variables.</p></li>
<li><p>Since neither <code>data</code> nor <code>borderPixels</code> are altered, copying <code>data</code> into <code>borderPixels</code> seems superfluous. I simply renamed <code>data</code> to <code>borderPixels</code>. This change requires the type of the last parameter of <code>GetPreference</code> to be changed from <code>List&lt;Vector2F&gt;</code> to <code>Vector2F[]</code> and <code>borderPixels.Count</code> must be changed to <code>borderPixels.Length</code>.</p></li>
<li><p>If you change the type of the corresponding parameter in <code>GetPreference</code>, the conversion of the <code>possible</code> list to array is not necessary. Since the collection is not altered in <code>GetPreference</code>, we don't need to make this copy. Note that <code>IList&lt;T&gt;</code> is compatible to <code>List&lt;T&gt;</code> as well as to <code>T[]</code>.</p></li>
</ul>

<p>The new <code>ReorderBorder</code> method:</p>

<pre><code>private Vector2F[] ReorderBorder(Vector2F[] borderPixels)
{
    var indexes = new List&lt;int&gt; { 0 };
    var indexTest = new HashSet&lt;int&gt; { 0 };

    while (indexes.Count &lt; borderPixels.Length) {
        int lastIndex = indexes.Last();
        Vector2F last = borderPixels[lastIndex];

        var possible = new List&lt;int&gt;();
        for (int index = 0; index &lt; borderPixels.Length; index++) {
            if (!indexTest.Contains(index)) {
                Vector2F current = borderPixels[index];
                if (new Vector2F(last.X - 1, last.Y - 1) == current ||
                    new Vector2F(last.X - 1, last.Y) == current ||
                    new Vector2F(last.X - 1, last.Y + 1) == current ||
                    new Vector2F(last.X, last.Y - 1) == current ||
                    new Vector2F(last.X, last.Y + 1) == current ||
                    new Vector2F(last.X + 1, last.Y - 1) == current ||
                    new Vector2F(last.X + 1, last.Y) == current ||
                    new Vector2F(last.X + 1, last.Y + 1) == current)
                {
                    possible.Add(index);
                }
            }
        }

        int preferredIndex = GetPreference(last, possible, borderPixels);
        indexes.Add(preferredIndex);
        indexTest.Add(preferredIndex);
    }

    var vertices = new List&lt;Vector2F&gt;();
    for (int index = 0; index &lt; indexes.Count; index++) {
        vertices.Add(borderPixels[indexes[index]]);
    }

    return vertices.ToArray();
}
</code></pre>

<hr>

<p>Now, to the <code>GetPreference</code> method.</p>

<ul>
<li><p>We can apply the C# naming conventions.</p></li>
<li><p>If we change the type of the <code>inidces</code> and <code>borderPixels</code> parameters to <code>IList&lt;T&gt;</code>, we will be able to pass arrays or lists. The caller gains some flexibility.</p></li>
<li><p>The <code>indicesTest</code> array must store two integers but is of <code>Vector2F[]</code> type based on <code>float</code>. We could use a <a href="https://blogs.msdn.microsoft.com/mazhou/2017/05/26/c-7-series-part-1-value-tuples/" rel="nofollow noreferrer">ValueTuple</a> (since C# 7.0) here. If you don't want this, at least use a vector type based on <code>int</code>. I will be using an array of <code>(int index, int relativity)</code>. I rename it to <code>relativeIndices</code>.</p></li>
<li><p>Instead of describing the relativity numbers in a comment, we can make them constants. This eliminates <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic numbers</a>.</p></li>
<li><p>We can store the double index lookup <code>borderPixels[Indices[Index]]</code> in temps.</p></li>
</ul>



<pre><code>private int GetPreference(Vector2F origin, IList&lt;int&gt; indices, IList&lt;Vector2F&gt; borderPixels)
{
    /* Relativity */  const int Up = 0, UpRight = 1, Right = 2, DownRight = 3, 
                                Down = 4, DownLeft = 5, Left = 6, UpLeft = 7;

    if (indices.Count == 1) return indices[0];

    var relativeIndices = new (int index, int relativity)[indices.Count];
    for (int index = 0; index &lt; indices.Count; index++) {
        int pixelIndex = indices[index];
        Vector2F pixel = borderPixels[pixelIndex];
        if (new Vector2F(origin.X, origin.Y - 1) == pixel)
            relativeIndices[index] = (index: pixelIndex, relativity: Up);
        else if (new Vector2F(origin.X + 1, origin.Y - 1) == pixel)
            relativeIndices[index] = (index: pixelIndex, relativity: UpRight);
        else if (new Vector2F(origin.X + 1, origin.Y) == pixel)
            relativeIndices[index] = (index: pixelIndex, relativity: Right);
        else if (new Vector2F(origin.X + 1, origin.Y + 1) == pixel)
            relativeIndices[index] = (index: pixelIndex, relativity: DownRight);
        else if (new Vector2F(origin.X, origin.Y + 1) == pixel)
            relativeIndices[index] = (index: pixelIndex, relativity: Down);
        else if (new Vector2F(origin.X - 1, origin.Y + 1) == pixel)
            relativeIndices[index] = (index: pixelIndex, relativity: DownLeft);
        else if (new Vector2F(origin.X - 1, origin.Y) == pixel)
            relativeIndices[index] = (index: pixelIndex, relativity: Left);
        else if (new Vector2F(origin.X - 1, origin.Y - 1) == pixel)
            relativeIndices[index] = (index: pixelIndex, relativity: UpLeft);
    }

    if (relativeIndices.Length &gt; 0) {
        Array.Sort(relativeIndices, CompareRelativity);
        return relativeIndices[0].index;
    }
    return 0;
}
</code></pre>

<ul>
<li>We must adapt the <code>CompareY</code> method to the new type of the array. I rename it to <code>CompareRelativity</code> and flatten the if-statements. There is no need for else-statements, since we return.</li>
</ul>



<pre><code>private int CompareRelativity(
    (int index, int relativity) left,
    (int index, int relativity) right)
{
    if (left.relativity &lt; right.relativity) return -1;
    if (left.relativity == right.relativity) return 0;
    return 1;
}
</code></pre>

<p>I did not question the algorithm. Since your now deleted picture shows borders all over the place, a simple sorting might not be the right approach for finding the preferred pixel.</p>
    </div>