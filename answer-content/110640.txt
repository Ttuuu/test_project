<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm pretty sure there's no better way to do this but I thought a consensus on here might be nice. Let me know what you think.  </p>
</blockquote>

<p>At first glance it seems to be ok but one could assume that he/she is always getting <strong>either</strong> the value <strong>or</strong> the default value. If one would get the default value for e.g if the dictionary is empty, why shouldn't he/she get the default value if the dictionary is <code>null</code> or the <code>key</code> is <code>null</code> ?  </p>

<p>If this isn't the way the method should work, then you need some documentation which cleary states the purpose and any expected exceptions.  </p>

<p>Now, what happens if the method is called either like so  </p>

<pre><code>Dictionary&lt;string, int&gt; dict = null;
dict.GetValueOrDefault("someKey");
</code></pre>

<p>or (assuming the method lives in the "DictionaryExtensions" class)</p>

<pre><code>Dictionary&lt;string, int&gt; dict = null;
DictionaryExtensions.GetValueOrDefault(dict, "someKey");  
</code></pre>

<p>sure you get a <code>NullReferenceException</code> but is this the type of exception one would expect ? If I call a method with an parameter being <code>null</code> I would expect to get either no exception or to get an <code>ArgumentNullException</code>.  </p>

<p>What about if the <code>key</code> is <code>null</code> ? Sure you get an <code>ArgumentNullException</code> but it takes some time because it is thrown at the <code>FindEntry()</code> method of the <code>Dictionary</code> and this is also shown in the <code>StackTrace</code>.  </p>

<p>IMO it would be better to check this cases inside the <code>GetValueOrDefault()</code> method and throw the exceptions there. </p>

<pre><code>public static TValue GetValueOrDefault&lt;TKey, TValue&gt;(this Dictionary&lt;TKey, TValue&gt; dictionary, TKey key, TValue defaultValue = default(TValue))
{
    if (dictionary == null) { throw new ArgumentNullException(nameof(dictionary)); } // using C# 6
    if (key == null) { throw new ArgumentNullException(nameof(key)); } //  using C# 6

    TValue value;
    return dictionary.TryGetValue(key, out value) ? value : defaultValue;
}  
</code></pre>
    </div>