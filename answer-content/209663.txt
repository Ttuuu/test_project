<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You already have a good review of the algorithm; I'll just look at the implementation here.</p>
<hr>
<h1>Representation</h1>
<p>A pair of corresponding containers is more error-prone to use than a container of pairs.  Prefer to keep related data together.</p>
<p>In this case, what we have is a <em>bag</em> (aka <em>multiset</em>), which might be best represented as a map from denomination to count.</p>
<h1>Pass by reference</h1>
<p>Don't pass large objects by value unless you really need a copy.  It seems that <code>x</code>, <code>coins</code> and <code>quantity</code> can all be passed as reference to <code>const</code> (this change alone reduced my run times by over 50%).</p>
<h1>Loops</h1>
<p>Unless you're stuck with C++03, the loops can be made clearer (and therefore less error-prone) by using range-based <code>for</code>.  For example:</p>
<pre><code>int money(const std::map&lt;int, int&gt;&amp; x)
{
    int sum=0;
    for (auto const&amp; element: x) {
        sum += element.first * element.second;
    }
    return sum;
}
</code></pre>
<p>With a structured binding (since C++17), the intent can be clearer:</p>
<pre><code>    for (auto const [denomination, quantity]: x) {
        sum += denomination * quantity;
    }
</code></pre>
<p>You will find that a container-of-pairs representation lends itself better to range-based <code>for</code>, as we don't need to track corresponding indexes.</p>
<h1>Let <code>operator[]</code> create entries</h1>
<p>This code looks to me like unnecessary work:</p>
<blockquote>
<pre><code>    if(ctq.find(coins[i]) == ctq.end())
    {
        ctq.insert(std::make_pair(coins[i], quantity[i]));
    }
    else
    {
        ctq[coins[i]] += quantity[i];
    }
</code></pre>
</blockquote>
<p>If <code>coins[i]</code> isn't present in <code>ctq</code>, then simply accessing <code>ctq[coins[i]]</code> will do exactly what we need: create an entry with a default-initialised value (i.e. <code>0</code>).  So we can simplify that <code>if</code>/<code>else</code> to just:</p>
<pre><code>    ctq[coins[i]] += quantity[i];
</code></pre>
<h1>Consider using unsigned types</h1>
<p>Since coin denominations and quantities can't be negative, an unsigned type may be more appropriate.  That would double the range that you can represent (the current input set isn't in imminent danger of exceeding <code>INT_MAX</code> - which must be at least 32767 - but it wouldn't take much to overstep that mark).</p>
<h1>Explain corrective factors</h1>
<p>Here, we have a correction of <code>-1</code>:</p>
<blockquote>
<pre><code>return sums.size()-1;
</code></pre>
</blockquote>
<p>It's my <em>guess</em> that the <code>-1</code> is because we don't consider <code>0</code> to be one of the valid results to be counted.  It would be worthwhile to have a comment to confirm that guess (or to provide the correct explanation if I'm wrong).</p>
    </div>