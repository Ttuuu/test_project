<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would not make this to complicated. Your <code>passSingleton::generatePass()</code> method could simply return the password as a <code>std::string</code> with the password length as a parameter. Initialization of the random engine should be done from <code>main.cpp</code> and could also be passed as a parameter. Remove the class, keep the <code>generatePass()</code> method in main.</p>

<p>The check of the password length should generate an exception. If you cannot use exceptions, because of your embedded context, return a <code>std::optional&lt;std::string&gt;</code> if you're on C++17 or a <code>std::tuple&lt;bool, std::string&gt;</code> where the <code>bool</code> indicates success and the <code>std::string</code> contains the result.</p>

<p>When compiling, use at least <code>-Wall</code> it gives usefull hints on how to improve your code:</p>

<pre><code>main.cpp:29:13: warning: unused variable 'this_option_optind'
      [-Wunused-variable]
        int this_option_optind = optind ? optind : 1;
            ^
</code></pre>

<p>Your application requires a minimum length of 8 characters, but if I run</p>

<pre><code>sjank@WSDEBE16040-LXL&gt; ./main -q 3 
!
-
h
</code></pre>

<p>the length defaults to <code>1</code>. Is a minimum length really reasonable? You could give a warning instead. Use a sensible default length and make the <code>-l</code> parameter optional. </p>

<ul>
<li><p>prefer <code>#include &lt;ctime&gt;</code> over <code>#include &lt;time.h&gt;</code>, remove <code>&lt;iostream&gt;</code> (see above) and <code>&lt;stdlib.h&gt;</code> (use <code>&lt;cstdlib&gt;</code> in c++).</p></li>
<li><p>Is writing passwords to a file is required? Is it best practice of storing passwords? Could the user achieve the same functionality otherwise (redirect)? </p></li>
</ul>
    </div>