<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code works correctly – but only if the array elements are <em>mutually different.</em> For arrays with repeated elements, such as ["a", "a", "b"],
it leads to an infinite loop. (This is – of course – handled correctly
in Knuth's "Algorithm L", the problem is only in the above implementation).</p>

<p>It can be fixed by changing the comparison operators in the steps
L2 and L3 from <code>&gt;</code> to <code>&gt;=</code>:</p>

<pre><code>mutating func permute() -&gt; Bool {

    // Nothing to do for empty or single-element arrays:
    if count &lt;= 1 {
        return false
    }

    // L2: Find last j such that self[j] &lt; self[j+1]. Terminate if no such j
    // exists.
    var j = count - 2
    while j &gt;= 0 &amp;&amp; self[j] &gt;= self[j+1] {
        j -= 1
    }
    if j == -1 {
        return false
    }

    // L3: Find last l such that self[j] &lt; self[l], then exchange elements j and l:
    var l = count - 1
    while self[j] &gt;= self[l] {
        l -= 1
    }
    swap(&amp;self[j], &amp;self[l])

    // L4: Reverse elements j+1 ... count-1:
    var lo = j + 1
    var hi = count - 1
    while lo &lt; hi {
        swap(&amp;self[lo], &amp;self[hi])
        lo += 1
        hi -= 1
    }
    return true
}
</code></pre>

<p>Example:</p>

<pre><code>var a = [1, 1, 2]
repeat {
    print(a)
} while a.permute()
</code></pre>

<p>Output:</p>

<pre>
[1, 1, 2]
[1, 2, 1]
[2, 1, 1]
</pre>

<p>The same applies to the <code>permute2()</code> method, where replacing <code>&lt;=</code>
by <code>&lt;</code> makes it work with arbitrary arrays.</p>

<hr>

<p><em>Remark:</em> For <strong>Swift 4</strong> one has to replace the <code>swap()</code> invocations by the <code>swapAt()</code> method of the <code>MutableCollection</code> protocol (compare
<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0173-swap-indices.md" rel="nofollow noreferrer">SE-0173 Add <code>MutableCollection.swapAt(_:_:)</code></a>). For example,</p>

<pre><code>swap(&amp;self[j], &amp;self[l])
</code></pre>

<p>becomes</p>

<pre><code>self.swapAt(j, l)
</code></pre>
    </div>