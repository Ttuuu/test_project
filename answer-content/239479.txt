<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In terms of conventions there is nothing to poke at there.</p>

<p>Where I find that approach lacking is that it tries to merge two different concepts. Namely a point in time an a time difference (or offset). Another non .NET example that I can think of is swift which has <code>Date</code> and <code>TimeInterval</code>. <code>TimeInterval</code> being an alias for a double which represents the offset in seconds.</p>

<p>Most libraries (.NET included) have distinct types to separate these two concepts.</p>

<p>To illustrate where it goes wrong I would expect</p>

<pre><code>Utc.Now == DateTime.Now
</code></pre>

<p>But it is not.</p>

<p>I understand the convenience for have the common type and using the type system to enforce this for you but consumers of the API would have some trouble with it.</p>

<p>Two alternatives: </p>

<ol>
<li>Use a built in library type. Either <code>DateTime</code> to specify the exact time of execution or <code>TimeSpan</code>.</li>
</ol>

<p>In this case <code>DateTime</code> provides the utility of <code>ToUniversalTime()</code> but that would require the implementer of the interface <code>IApi</code> to ensure that this is done. As long as you clearly document what you expect it is OK.</p>

<p>An added benefit is that you don't have to reinvent the wheel and your code is now more portable between all .NET platforms. These types include <code>IComparable</code> and <code>IEquatable</code> already which is one less thing to worry about for the future.</p>

<ol start="2">
<li>Keep the type <code>Utc</code> but make sure you keep the underlying type consistent to either by an offset or a fixed time.</li>
</ol>

<p>Either one works. I would lean to storing the backing data as <code>TimeSpan</code>. Converting a time to the time interval from when it was called.</p>

<p>The implicit conversions in this case are a good idea.</p>
    </div>