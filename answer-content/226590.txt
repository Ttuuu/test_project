<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your shuffle implementation suffers from a deceptive flaw. It will currently only allow up to a maximum of <code>2^32</code> permutations on the initial shuffle. To put that into perspective, a standard deck of cards has <code>52!</code> permutations, which is vastly beyond orders of magnitudes more.</p>

<p>If you look at the method in isolation, you will understand why.</p>

<blockquote>
<pre><code>            var rng = Instance;
            int n = values.Length;
            while (n &gt; 1) {
                n--;
                int k = rng.Next(n + 1);
                var temp = values[k];
                values[k] = values[n];
                values[n] = temp;
            }
</code></pre>
</blockquote>

<p>The <code>Random</code> instance will always be seeded with some <code>Int32</code> value. Given a specified array to be shuffled along with any seed and the algorithm, the sequence generated is <em>completely deterministic</em>.</p>

<p>What does all of that actually imply? Lets say you have a blackjack program with only 1 thread. Lets assume as a user, I don't know the seed, but I do know the algorithm and the first shuffled deck sequence. Because there are only <code>2^32</code> permutations, I can easily pre-calculate all of them based upon every possible seed. Once I find the sequence that matches the shuffled deck, I now also know the seed used. Once I know the seed used, I can now calculate every subsequent shuffled deck.</p>
    </div>