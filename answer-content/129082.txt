<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice pice of code!</p>

<p>Did you run performance tests? It would be interesting to know if the cached version is more performant as a non-cached version depending on complexity of the dependend objects.</p>

<hr>

<p>However, some notes:</p>

<pre><code>if(dependencies == null || dependencies.Any(d =&gt; d == null))
        throw new ArgumentNullException("dependancies");
</code></pre>

<p>Is it desired, that properties that are null are not allowed? If so, it is also possible that dependent properties become null after the LazyProperty was created - so IMHO that restriction can be removed.</p>

<hr>

<p>The naming of you API is very compact. Actally, I didn't understand what exactly the code does just by looking on the <code>Multiplication</code> class. Conside to use a more descriptive naming like:</p>

<pre><code>public int Result =&gt; PropertyRepository
    .AddLazy(() =&gt; Arg1 * Arg2)
    .WithDependencies(() =&gt; Arg1, () =&gt; Arg2);
</code></pre>

<hr>

<p>You change tracking does not indicate changes in complex objects. But maybe that is not the main use case... However, to avoid accidentally misusage, you could restrict the types of dependent properties to types that implement <code>IComparable&lt;T&gt;</code>.</p>

<hr>
    </div>