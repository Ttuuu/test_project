<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At the <a href="https://codereview.stackexchange.com/a/220033/98493">end of their answer</a>, <a href="https://codereview.stackexchange.com/users/100620/ajneufeld">@AJNeufeld</a> has the right idea to improve the algorithm even further (in pure Python). You want to minimize the amount of numbers you have to mark off as being composite for every new prime you find. In order to do this, you can actually start at <code>current_prime * current_prime</code>, since you should already have marked up all smaller multiples of <code>current_prime</code> when you found all primes smaller than <code>current_prime</code>.</p>

<p>In addition I would use a slightly different data structure. Instead of having a list of all numbers up to limit, just have a list of <code>True</code>/<code>False</code>, indicating whether or not the number is (potentially) prime. You can immediately mark off 0 and 1 as not prime (by the usual definition) and then just need to proceed to the next <code>True</code> in the array, the index of which is the next prime number. Then mark off all multiples off that prime number as composite (<code>False</code>).</p>

<pre><code>def prime_sieve(limit):
    prime = [True] * limit
    prime[0] = prime[1] = False

    for i, is_prime in enumerate(prime):
        if is_prime:
            yield i
            for n in range(i * i, limit, i):
                prime[n] = False
</code></pre>

<p>This function is a generator. You can just iterate over it to get one prime number at a time, or consume the whole generator using <code>list(prime_sieve(1000))</code>.</p>

<p>Using a <code>for</code> loop to mark off composites can be improved further using slicing:</p>

<pre><code>prime[i*i:limit:i] = [False] * len(range(i*i, limit, i))
</code></pre>

<p>This uses the fact that the <code>range</code> object in Python 3 is a generator-like object which has a quick calculation of <code>len</code> implemented.</p>

<p>As for timings, here are a few. In the end, compiling it with <code>numba</code> is usually going to win, but you can get a factor of two just by making the algorithm a bit easier. And this factor of two carries through when jitting this answer as well.</p>

<p><a href="https://i.stack.imgur.com/XKvlC.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/XKvlC.png" alt="enter image description here"></a></p>
    </div>