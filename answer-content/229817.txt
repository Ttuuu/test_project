<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can make it go quite a bit faster by using wheel factorization to eliminate processing or storing multiples of small primes.  As @tinstaaf said, you can easily eliminate the even numbers and deal with 2 as special case when you're almost done.  </p>

<p>You can consider an odds-only sieve as the first level of wheel factorization.  A mod 6 wheel eliminate multiple of 2 and 3, a mod 30 wheel eliminates multiples of 2, 3, and 5, and is a sweet spot. If you look at numbers starting with 7 and skip multiples of 2, 3, and 5, only 8 out of the next 30 can possibly be prime.  Since there are 8 bits in a byte, one byte can represent 30 prime candidates so you can squeeze a lot of data about primes into a small bit array.  </p>

<p>But prime wheels beyond odds-only are more complex. <a href="https://en.wikipedia.org/wiki/Wheel_factorization" rel="nofollow noreferrer">Wikipedia</a> has a good introduction to the subject.</p>
    </div>