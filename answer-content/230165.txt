<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, a minor thing here:</p>

<pre><code>def (me: Me) send[Receiver, OutMsg] (receiver: Receiver, msg: OutMsg) (given Entity[Receiver, OutMsg], Entity[Me, InMsg]): Unit
</code></pre>

<p>The second <code>given</code> parameter is actually redundant - it's literally the same type as  <code>this</code>, and with contextual parameters, there shouldn't be any other instance.</p>

<p>In fact, implementation of <code>send</code> in <code>Person</code> shows that you can have a default impl:</p>

<pre><code>def (me: Me) send[Receiver, OutMsg] (receiver: Receiver, msg: OutMsg) (given Entity[Receiver, OutMsg]): Unit =
  receiver.receive(me, msg)(given this)
</code></pre>

<hr>

<p>Next, something more subtle:</p>

<pre><code>def (me: Me) receive[Sender, ReplyMsg] (sender: Sender, msg: InMsg) (given Entity[Sender, ReplyMsg]): Unit
</code></pre>

<p>Whoever is implementing this will have to support <em>any</em> <code>ReplyMsg</code>, and therefore won't be able to create one (without breaking type system by casting or nulls). Try implementing it in a way that sends something back - you won't be able to make a call to <code>send</code> compile with normal code. If it's desirable, you can simplify the signature using existentials:</p>

<pre><code>def (me: Me) receive[Sender] (sender: Sender, msg: InMsg) (given Entity[Sender, ?]): Unit
</code></pre>

<p>But I think it's not, as you wanted to reply to things. You'll have to work out a way to make it work - the simplest one being having 3 parameters - <code>Entity[Me, In, Out]</code> and accepting something that has <code>Me[Other, Out, In]</code>.</p>
    </div>