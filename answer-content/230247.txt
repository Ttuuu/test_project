<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An offline code review came up with a critical piece of feedback:</p>

<p>The constructor for Task takes an <code>Action&lt;T&gt;</code>.  The async delegate therefore generates an <code>async void</code> method, which has 2 implications:</p>

<ol>
<li>If an unhandled exception is thrown from the <code>async void</code> method, it will crash the process (unlikely, since it's just calling <code>Task.Delay()</code>, but it's an unintended risk - especially if the code is changed/refactored later).</li>
<li>The <code>async void</code> will return when it reaches the first await.  An explanation on why is <a href="https://devblogs.microsoft.com/pfxteam/potential-pitfalls-to-avoid-when-passing-around-async-lambdas/" rel="nofollow noreferrer">here</a>.  The continuation will then run almost immediately.  The unit test coverage happened to miss this behavior because the continuation was scheduled on the <code>DeterministicTaskScheduler</code>, so it wasn't made apparent that the code wasn't actually waiting for the <code>Task.Delay()</code> to return.  (The tests could be changed to not use <code>RunTasksUntilIdle()</code> since it hides how many tasks are scheduled then executed, and instead better inspect/execute the order that code was run.)</li>
</ol>

<p>TL;DR: don't pass an async delegate to an <code>Action&lt;...&gt;</code> parameter.  Instead find an overload that takes in <code>Func&lt;..., Task&gt;</code>, or implement the delegate as synchronous code.</p>
    </div>