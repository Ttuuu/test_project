<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Sorry for the poor <strong>code formatting</strong>, looks like 8-width tabs didn't carry over so well.</p>
</blockquote>
<p>A well known problem on StackExchange...<br>
I looked at your text in a separate editor and can vouch that your indentations are fine except on the lines that define the labels <em>deci</em>, <em>addts</em>, and <em>sumtm</em>.</p>
<blockquote>
<p>Best <strong>practices for naming</strong>? Is there a common length limit for labels? (From the examples I've seen, it seems like variable names are often very terse and somewhat cryptic.) Common casing convention?</p>
</blockquote>
<p>Important identifiers should always have descriptive names. In the second snippet e.g. you used <em>deci</em> and <em>addts</em>. I find both not very informative. Since you've written them on a separate line (and thus could not claim 'lack of space'), there's nothing that prevents you from writing the longer <em>DecrementIndex</em> and <em>AddToTheSum</em>. Much clearer!</p>
<blockquote>
<p><strong>Choosing registers</strong>? This is the biggest trouble for me. The names are not very intuitive to me, and I'm not sure if there's a commonly-accepted set of guidelines on when to choose what. I was slightly influenced by caller-saved/callee-saved (e.g., use caller-saved registers in a function so as to not worry about pushing/popping it) and the use of explicit registers in certain operations (e.g., reuse <code>%rax</code> as divisor, reuse <code>%rsi</code> as second parameter for <code>printf</code>).</p>
</blockquote>
<p>Because you know that division imperatively uses the <code>%rax</code> register, you should perhaps not put <em>i</em> in <code>%rax</code>. Maybe use <code>mov $999, %r9  # i = 999</code>. No more need for the many <code>push</code>/<code>pop</code>'s around these divisions.</p>
<p>The clever choice you've made in the third program to build the sum in <code>%rsi</code> (for use by <em>printf</em>), would equally work in the other programs.</p>
<blockquote>
<p>Is it common/good practice to <strong>follow the ABI</strong>'s callee/caller-saved registers even in small code snippets like this, and when you have complete control over the code? I'd assume that this is much more important when writing a library, but how important is it for completely self-contained code?</p>
</blockquote>
<p>In case you're writing your own code, you can and should make the most of the registers that you have at your disposal. Also don't put too much thought in this. Use the registers that give you a comfortable feeling and if need be, the occasional <code>push</code>/<code>pop</code> around a library call won't kill you.</p>
<blockquote>
<p>Verbosity/<strong>comment density</strong>? Is this abnormal?</p>
</blockquote>
<p>Your commenting is good, but keep in mind that these 3 code snippets must stand on their own. So if you find it useful to write next comments in the first and third programs:</p>
<pre><code>xor     %rax, %rax  # clear this (for printf to work properly)
call    printf
xor     %rax, %rax  # return(0)
ret
</code></pre>
<p>you should also mention them in the second program, so that a person that only sees the second program can benefit from your observation.</p>
<blockquote>
<p><strong>Overall efficiency</strong>/operator choice?</p>
</blockquote>
<p>Intel advices against using the 64-bit division with the 128-bit dividend <code>%rdx:%rax</code>. Whenever possible use the 32-bit division with the 64-bit dividend <code>%edx:%eax</code>. In all of these little programs there's nothing that stands in the way of following this advice.</p>
<p>In fact most everything in these here programs can benefit from using the 32-bit registers instead of the 64-bit registers. The <em>REX</em> prefix will not get encoded and the CPU will zero the high dword automatically. Read about this in the Intel manual.</p>
<p>Lastly and FWIW, a 1-instruction replacement for <code>mov %rax, %rcx</code> <code>inc %rcx</code> is <code>lea 1(%rax), %rcx</code>.</p>
    </div>