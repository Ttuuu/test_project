<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would personally prefer that (1) you <em>yield</em> elements one by one, and (2) that you use the built-in functions as much as possible.  Python comes with the <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> function that allows you to iterate over elements with the same index.  That is, <code>zip(* ['ab', 'xyz'])</code> will yield <code>('a', 'x')</code> and then <code>('b', 'y')</code>.  Notice that it only yields elements up to the shortest string has been exhausted, hence the bounds are dealt with automatically.  Notice also that since <code>zip(* ['ab', 'abc', 'abx'])</code> yields <code>('a', 'a', 'a')</code> and <code>('b', 'b', 'b')</code>, you can use <code>len(set(elt)) == 1</code> to verify that the characters are all the same.</p>

<p>Depending on how you want to use the function, I would perhaps <em>yield</em> elements, and perhaps make a <em>wrapper function</em> to turn the result into a string.</p>

<pre class="lang-py prettyprint-override"><code>def _common_prefix(seq):
    """A generator that yields common elements of a sequence of sequences."""
    for e in zip(*seq):
        if len(set(e)) != 1:
            break
        yield e[0]


def common_prefix(seq):
    """Compute the common prefix of a sequence of sequence"""
    return "".join(_common_prefix(seq))
</code></pre>
    </div>