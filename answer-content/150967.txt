<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can bring this from two loops down to one:</p>

<pre><code>int numbersIndex = 0;
for (int currentVal = min; currentVal &lt; max; currentVal ++)
{
    actualSum += numbers[numbersIndex++];
    expectedSum += currentVal;
}

expectedSum += max;
</code></pre>

<p>It won't help your big-O runtime (the version you posted with \$O(2n)\$ runtime reduces down to \$O(n)\$, so by big-O my version is just as fast) but it will help your <em>actual</em> runtime.</p>

<p>Of course, this creates the problem of <code>int</code> overflow (as does your solution).</p>

<pre><code>var array = new int[] { int.MaxValue - 2, int.MaxValue };
var missingNumber = MissingNumber(array, int.MaxValue - 2, int.MaxValue);
Console.WriteLine(missingNumber + " : " + (int.MaxValue - 1));
</code></pre>

<p>To fix that:</p>

<pre><code>private static int MissingNumber(int[] numbers, int min, int max)
{
    int missing = 0;

    // Eventually we could cache this if we use the results a lot
    int numbersIndex = 0;
    for (int i = min; i &lt; max; i++)
    {
        missing += i;
        missing -= numbers[numbersIndex++];
    }
    missing += max;

    return missing;
}
</code></pre>

<p>Simply subtract and add together. Then we solve all the problems (mostly). :)</p>

<p>We can still run into a problem of int overflow if the range is large enough, and the values are in the right order. Without using a <code>long</code> type it's difficult to solve that if we don't first order the array. (Which increases runtime obviously.)</p>
    </div>