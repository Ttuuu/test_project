<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Graipher answer is nice, but there is one possible inefficiency not taken into account: choice.</p>

<p>If you have a lot of anagrams, it's better to replace the generic version with the explicit formula for pair:</p>

<pre><code>def count_pairs(n):
    return  (n * (n-1)) // 2
</code></pre>

<p>here some timings, with a big list with only a few different canonical anagrams:</p>

<pre><code>def random_anagram(w):
    l = w[:]
    random.shuffle(l)
    return "".join(l)

base_anagrams = [random.choices(string.ascii_lowercase, k=30) for i in range(4)]

x4 = [random_anagram(random.choice(base_anagrams)) for _ in range(100000)]

def anagram_counter5(words):                                            
    count = Counter("".join(sorted(word)) for word in words)
    return sum(count_pairs(x) for x in count.values() if x &gt; 1)
</code></pre>

<p>gives on my machine</p>

<pre><code>%timeit anagram_counter2(x)
353 ms ± 2.09 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
%timeit anagram_counter5(x)
253 ms ± 4.74 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
    </div>