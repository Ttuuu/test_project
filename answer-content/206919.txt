<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code works, which I have double-checked with an exhaustive test. An exhaustive test for this takes a while, but not an unreasonable amount of time, so that can be used just to be 100% certain. Using a few manually-entered test cases is not as reliable for obvious reasons.</p>

<p>There are many simpler ways to do it without a loop, just a couple of operations. For example:</p>

<ul>
<li>XOR by -1: <code>n ^ -1</code>. XOR inverts those bits indicated by the mask, so if the mask indicates all bits it simply inverts all bits.</li>
<li>Subtract from -1: <code>-1 - n</code>. Consider the single bit case, subtracting a single bit from 1 would flip it: either subtract 0 and leave 1, or subtract 1 and leave 0. This principle extends trivially to more bits, there is never a borrow so there are no complicated cases to consider. An other way to look at it is using an identity such as <code>x - y = ~(~x + y)</code>, then we have <code>-1 - n = ~(~-1 + n) = ~(0 + n) = ~n</code>.</li>
<li>Negate and decrement: <code>-n - 1</code>. Negation is defined as <code>-x = ~x + 1</code> (at least that is one of the definitions), so if we just undo the <code>+1</code> step we get the plain complement.</li>
<li>Increment and negate: <code>-(n + 1)</code>. Using the alternative definition of negation, <code>-x = ~(x - 1)</code>, cancel the <code>- 1</code> to get a complement.</li>
</ul>
    </div>