<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Improving the general implementation</h1>

<p>Generally we want to avoid <code>append</code>ing to a list too many times if we can help it. This is because lists are dynamic arrays, so <code>appends</code> can be unnecessarily expensive (though the <em>dynamic</em> part helps with the efficiency). Instead, when we know the size of the input set (i.e. the number of pixels in the image), we can take advantage of that information. But in this case, that will be unnecessary because <code>Image</code> provides us with some handy helper methods to handle this very situation:</p>

<pre><code>from PIL import Image

def picture_reset_pixels(filename, from_color, to_color, target_color):
    img = Image.open(filename)
    pixels = img.load()
    for i in range(img.size[0]):
        for j in range(img.size[1]):
            if all(from_color[k] &lt;= pixels[i, j][k] &lt;= to_color[k] for k in range(3)):
                pixels[i, j] = target_color + (255,)
    return img
</code></pre>

<p>Assigning <code>pixels</code> to <code>img.load()</code> allows us to take advantage of directly editing the image. Since copying the image into another list was unnecessary originally (to clarify, the <code>img</code> variable doesn't affect the file on disk that <code>img</code> originated from, i.e. the file at location <code>filename</code>), editing directly is the best way.</p>

<p><strong>Edit 2:</strong> Looking at it again, I think @Reinderien's point about clarity has merit because <code>range</code> has an exclusive upper bound, which may be confusing because it is asymmetric relative to both of its arguments. I have edited to use the comparison operators <code>&lt;=</code> and <code>&gt;=</code> instead of the <code>range</code> check I mention ahead. The caveat only I have is that using the <code>in range</code> form is more similar to how I think a dedicated <code>ColorRange</code> object (mentioned ahead in the section <strong>Going beyond the current form</strong>) should handle a range check, since it's not necessary to expose the object's implementation details (though internally, it could still use comparison operators for the check).</p>

<p>Another general improvement I've taken advantage of in this implementation is using <code>range</code> to check if each of the RGB values of a pixel are between the two pixel boundaries of the input arguments. <a href="https://docs.python.org/3.5/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> serves the purpose that the <code>and</code> statements in the original version served: it requires that all the pixels compared in the iterator <code>pixels[i, j][k] in range(from_color[k], to_color[k] + 1) for k in range(3)</code> are in the required range for the condition to be true.</p>

<p><strong>Edit 1:</strong> the concern was raised in comments that testing for <code>in range(from_color[k], to_color[k] + 1)</code> would be extremely inefficient. However, this is mistaken and arises from a misunderstanding of how Python 3.x implement the <code>range</code> object. Checking if a number is in a <code>range</code> is a constant time operation. I would recommend reading <a href="https://stackoverflow.com/a/30081318/8117067">this answer</a> to understand Python 3.x's range implementation.</p>

<h1>Going beyond the current form</h1>

<p>While I've shown you a way to use your current parameter requirements in a more efficient implementation, I think there are some improvements you can make so <code>picture_reset_pixels</code> has more functionality. I think combining <code>from_color</code>, <code>to_color</code>, and <code>target_color</code> into a single dict parameter <code>color_replacements</code> could make this more versatile (where the key-value pairs would derive something like <code>{(from_color, to_color): target_color}</code>; you could even create a custom <code>ColorRange</code> class to encapsulate the idea of a range of colors).</p>

<p>There's also another issue I find with your current implementation: it can only support certain image types. I tried your algorithm on a <code>GIF</code> file and it failed because the pixels in a <code>GIF</code> file are ints, not four-tuples like <code>PNG</code>s. You also do not support the fourth alpha channel of PNG, because your pixel range bounds are only 3-tuples. You might want to consider investigating that further if you want to support multiple image types.</p>
    </div>