<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's looking good and it works. A few remarks within the code</p>
<pre><code>function showTime() {
  const date = new Date();
  let hours = date.getHours();
  let minutes = date.getMinutes();
  let seconds = date.getSeconds();
  let session = (hours &lt; 12) ? "AM" : "PM";
  // You can stringify the minutes and seconds using a template string, 
  // for later zero padding (see snippet).

  if (hours === 0) {
    hours = 12;
  } else if (hours &gt; 12) {
    hours -= 12;
  }
  // ^ this can be a bit shorter using a ternary operator
  // or you can even do without it using hours % 12 (see snippet)
  hours = (hours &lt; 10) ? '0' + hours : hours;
  minutes = (minutes &lt; 10) ? '0' + minutes : minutes;
  seconds = (seconds &lt; 10) ? '0' + seconds : seconds;
  // ^ modern es20xx knows a native string method called 'padStart'

  const time = `${hours} : ${minutes} : ${seconds} ${session}`;
  document.querySelector('div').innerHTML = time;
  //                            ^ you may want to use textContent 
  // ^ if there's more in your document you may want to use an identifier 
  // (e.g. id or a data-attribute)

  setTimeout(showTime,1000)
  //                       ^ do not forget semicolons
}

showTime()
//        ^ do not forget semicolons
</code></pre>
<p>A note for the html within the snippet: you do not need a complete html document in code review snippets, your html will be automatically wrapped in a document.</p>
<p>For the rationale to use semicolons, see <a href="https://www.freecodecamp.org/news/codebyte-why-are-explicit-semicolons-important-in-javascript-49550bea0b82/" rel="nofollow noreferrer">this article</a>.</p>
<p>Why <code>textContent</code>? From <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML" rel="nofollow noreferrer">MDN</a></p>
<blockquote>
<p>It is not uncommon to see innerHTML used to insert text into a web
page. There is potential for this to become an attack vector on a
site, creating a potential security risk.</p>
</blockquote>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function showTime() {
  const date = new Date();
  // converting hour/minutes/seconds to zero padded strings right away
  const hours = `${(date.getHours() % 12) || 12}`.padStart(2, 0);
  // ^ hours: if the value is 0, js considers it to be 'falsy'
  // that's why we can use this 'short-circuit evaluation`
  const minutes = `${date.getMinutes()}`.padStart(2, 0);
  const seconds = `${date.getSeconds()}`.padStart(2, 0);
  const session = date.getHours() &lt; 12 ? "AM" : "PM";
  //            ^ because hours now is a string (and &lt; 12)
  const time = `${hours} : ${minutes} : ${seconds} ${session}`;
    
  // use an identifier (data-attribute), and use textContent
  document.querySelector('div[data-isclock]').textContent = time;

  setTimeout(showTime,1000);
}

showTime();</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!-- added data-isclock --&gt;
&lt;div data-isclock="1"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

<p>The clock method may even be shorter:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const currentTime = date =&gt; 
  `${`${(date.getHours() % 12) || 12}`.padStart(2, 0)} : ${
    `${date.getMinutes()}`.padStart(2, 0)} : ${
      `${date.getSeconds()}`.padStart(2, 0)} ${
        date.getHours() &lt; 12 ? "AM" : "PM"}`;
setInterval(() =&gt; 
  document.querySelector("div[data-isclock]")
    .textContent = currentTime(new Date()), 1000);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div data-isclock&gt;&lt;/div&gt;</code></pre>
</div>
</div>

    </div>