<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Graph</code> is a strange name for something designed to manipulate friendships.  As indicated by @greybeard in the comments, it doesn't really represent anything at the moment.</p>

<p><strong>print</strong></p>

<p>I hate seeing methods like <code>printFriends</code>  on classes.  They very rarely belong.  If you want to have the class provide a method/<code>toString</code> implementation that can be used by it's controller to write to the console / log / outputStream then that's one thing.  However, hardcoding <code>System.out.println</code> into classes really does limit their usefulness.</p>

<p><strong>control + error checking</strong></p>

<p>Is it valid to call <code>addFriendShip</code> twice for the same friends?  To Remove it twice?  What are you expecting in this scenario:</p>

<pre><code>facebook.newFriendship(sara, robert);
facebook.newFriendship(robert, sara);
</code></pre>

<p>Sara ends up with two friends, both of whom are Robert.  This seems wrong.</p>

<p><strong>Friendship is a two way street</strong></p>

<p>This is nitpicky, but <code>newFriendShip</code> tells both supplied <code>Person</code>s that they have a new friend.  Having the parameter names <code>from</code> and <code>to</code> suggests a one directional, rather than two way relationship.</p>

<p><strong>List</strong></p>

<p><code>getFriendList</code> returns a list of <code>String</code>s, unless there's a good reason not to, I'd set the return type appropriately, rather than just returning a basic <code>List</code>.  You should also consider using the <code>Stream</code> libraries, they can make your code more concise:</p>

<pre><code>public List&lt;String&gt; getFriendList(){
    return friends.stream().map(f-&gt;f.name).collect(Collectors.toList());
}
</code></pre>

<p><strong>Graph</strong></p>

<p>There are various structures that Graph could use to keep track of what <code>Person</code>s it knows about.  However, there isn't really enough information at the moment to suggest the correct method.  Some things to consider include, does Graph need to support adding and removing? If a Person is added, does the graph need to keep track of all that <code>Persons</code> friends as well?  How about their friends and so on?  What operations are you going to want <code>Graph</code> to support that will use the <code>Person</code>s it knows about?</p>
    </div>