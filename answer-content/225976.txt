<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some improvements:</p>

<ul>
<li>If you don't want the first arg, <code>skip</code> it

<ul>
<li><code>env::args().skip(1).collect()</code></li>
</ul></li>
<li>Get the reference (last arg) with <code>pop</code></li>
<li>Get the book (remaining args) with <code>join</code>

<ul>
<li><code>args.join(" ")</code></li>
</ul></li>
<li>Use <code>&amp;str</code> when possible

<ul>
<li><code>get_file(book: &amp;str)</code></li>
</ul></li>
<li>Match the book to the file, with <code>match</code>

<ul>
<li><code>match book {...}</code></li>
</ul></li>
<li>Use an <code>Option/Some/None</code> so that <code>main</code> can handle the error

<ul>
<li><code>get_file(...) -&gt; Option&lt;&amp;str&gt;</code></li>
</ul></li>
</ul>

<pre><code>use std::env;

fn main() {
    let mut args: Vec&lt;String&gt; = env::args().skip(1).collect();
    let reference = args.pop()
        .expect("Expected 2+ parameters: &lt;book of the Bible&gt; &lt;reference&gt;");
    let book = args.join(" ");
    let file = get_file(&amp;book)
        .expect("Not a valid book");
    println!("{}, {}, {}", book, reference, file);
}

fn get_file(book: &amp;str) -&gt; Option&lt;&amp;str&gt; {
    match book {
        "Genesis" =&gt; Some("mhc1.txt"),
        "First Samuel" =&gt; Some("mhc2.txt"),
        "Song of Solmon" =&gt; Some("mhc3.txt"),
        "Acts of the Apostles" =&gt; Some("mhc6.txt"),
        "First Corinthians" =&gt; Some("mhc6.txt"),
        "Galatians" =&gt; Some("mhc6.txt"),
        _ =&gt; None
    }
}
</code></pre>

<p>Thanks to <a href="https://codereview.stackexchange.com/a/225145/95032">Aurora0001</a> and <a href="https://codereview.stackexchange.com/a/225170/95032">JayDepp</a> for the helpful feedback (that make up 90% of the advice above). This code is a lot more natural now.</p>
    </div>