<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is fairly readable, which is good. I see a few things that could be improved, though.</p>
<h1>Bugs</h1>
<p>In <code>main()</code> you are allocating <code>n + 1</code> elements and then iterating from 1 to <code>n</code>. C-based languages use 0-based arrays, so always allocating 1 extra and ignoring index 0 is likely to introduce bugs as future programmers (including a future you) assume that an array goes from 0 to <code>n - 1</code>. I know this because I've had to maintain such code and it was a source of bugs. It's also wasteful because every array has an extra element in it that's never used.</p>
<p>That said you have a current bug in this code:</p>
<pre><code>edges = new vector&lt;int&gt;[n + 1];
for (int j = 0; j &lt; m; ++j) {
    int s, e;
    cin &gt;&gt; s &gt;&gt; e;
    edges[s].push_back(e);
}
</code></pre>
<p>The instructions say there are <code>m</code> edges. You've allocated <code>n + 1</code> edges which may be too many or too few. If it's too few, then you will overwrite memory and mess up your heap.</p>
<h1>Simplify</h1>
<p>Your <code>length()</code> function runs a loop when it doesn't need to. You can do it like this:</p>
<pre><code>int length(const int n)
{
    if ((n == 0) || (n == 1))
    {
        return 1;
    }
    
    return ceil(log10(n));
}
</code></pre>
<p>Likewise, your <code>concat()</code> function could remove the loop with a call to <code>log10()</code> and a call to <code>pow()</code>.</p>
<p>Whether either of these is faster than what you've written or not probably depends on the number of decimal digits in the vertices. I recommend trying it and profiling to see which is faster.</p>
<p>The end of your <code>dfs()</code> function is written very confusingly and is redundant. I would simplify it by doing this instead:</p>
<pre><code>if (q == -1)
{
    valueC[i][reminder] = -2;
}
else
{
    valueC[i][reminder] = concat(value[i], q);
}
return valueC[i][reminder];
</code></pre>
    </div>