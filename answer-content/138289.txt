<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>To be using strict null checks, you must be on <code>"typescript": "^2.0.0"</code>. Thus, my example will be using this version of typescript with <code>"compilerOptions":{"strictNullChecks": true}</code>.</p>

<p>It does seem that the <code>filter</code> solution is the most elegant solution to the titular question. Sadly, it seems that the typescript static analysis is unable to track this behavior:</p>

<pre class="lang-typescript prettyprint-override"><code>const source: (string|undefined)[] = ["one", "two", "three", undefined, "five"]
const filtered: string[] = source.filter(element =&gt; element !== undefined)
//  [ts]
//    Type '(string | undefined)[]' is not assignable to type 'string[]'.
//      Type 'string | undefined' is not assignable to type 'string'.
//        Type 'undefined' is not assignable to type 'string'.
</code></pre>

<p>This seems to be the case because of the declaration of the <code>filter</code> method:</p>

<pre class="lang-typescript prettyprint-override"><code>/** Returns the elements of an array that meet the condition specified in a callback function. */
(method) Array&lt;string | undefined&gt;.filter(callbackfn: (value: string | undefined, index: number, array: (string | undefined)[]) =&gt; any, thisArg?: any): (string | undefined)[]
</code></pre>

<p>In this case, our own type logic beats out the compiler's. It's these cases that is the reason that <a href="https://stackoverflow.com/q/19461479/3019990">Type Assertion</a> is part of the language spec. Thus:</p>

<pre class="lang-typescript prettyprint-override"><code>const source: (string|undefined)[] = ["one", "two", "three", undefined, "five"]
const filtered: string[] = source.filter(element =&gt; element !== undefined) as string[]
</code></pre>

<p>This transpiles exactly as you would expect -- in this case, transpiling is as simple as just removing the type information. If you need to convince the language to convert two unrelated types, you need to step through any to tell the compiler to back off: <code>object as any as string</code>.</p>

<hr>

<p>Now, looking at the rest of the code:</p>

<p><code>shortFlagWithArgument</code> and <code>shortFlagWithoutArgument</code> can be <code>const</code>s, as you do not mutate their values.</p>

<p>Personally, I would add an explicit final <code>return</code> to the <code>flagDescriptions.map</code> operation. This makes explicit why the <code>undefined</code> needs to be in the results array in the first place.</p>

<p>The regex patterns seem good candidates for refactoring into a reusable constant. Depending on your project ecosystem, however, it may be better just to leave them inlined.</p>
    </div>