<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Is there a good reason we're wrapping this in a class? Unless you're creating a whole bunch of these objects (which might then be better named <code>Person</code> with a property <code>bmi</code> and <code>bmi_desc</code>. Logically, why would we have more than one BMI? What would that even mean?)</p>

<p>This seems very functional to me, not object-oriented. Let's drop the class completely.</p>

<pre><code>def run():

    # Get weight
    while True:
        try:
            weight = float(input("Please enter your weight(kg): "))
        except ValueError:
            continue  # ask again
        else:
            if weight &lt; 0:
                print("Invalid value")
                continue  # ask again
            else:
                break  # keep going

    # Get height
    while True:
        try:
            height = float(input("Please enter your height(m): "))
        except ValueError:
            continue  # ask again
        else:
            if height &lt; 0:
                print("Invalid value")
                continue  # ask again
            else:
                break  # keep going

    bmi = round(weight / (height**2), 2)

    # N.B. I changed the ranges here slightly. You had a subtle bug previously -- see if you can find it!
    if bmi &lt; 18.5:
        print("Under-Weight")
    elif 18.5 &lt;= bmi &lt; 25:
        print("Healthy Weight")
    elif 25 &lt;= bmi &lt; 30:
        print("Over-weight")
    elif bmi &gt;= 30:
        print("Obese")

run()
</code></pre>

<p>You'll notice you're getting two bounded values. You could refactor those.</p>

<pre><code>def bounded_input(prompt, limitlow=None, limithigh=None, typecast=None):
    while True:
        user_in = input(prompt)
        if typecast is not None:
            try:
                user_in = typecast(user_in)
            except Exception:
                print("Input value {} cannot be coerced to required type {}".format(
                    user_in, typecast))
                continue  # skip the rest of validation
        if limitlow is not None:
            if user_in &lt; limitlow:
                print("Input value {} is beneath minimum value ({})".format(
                        user_in, limitlow))
        elif limithigh is not None:
            if user_in &gt; limithigh:
                print("Input value {} is above maximum value ({})".format(
                        user_in, limithigh))
        else:
            return user_in
</code></pre>

<p>Then rewrite the "get height" and "get weight" portions as:</p>

<pre><code>def run():
    weight = bounded_input("Please enter your weight(kg): ",
                           limitlow=0,
                           typecast=float)
    height = bounded_input("Please enter your height(m): ",
                           limitlow=0,
                           typecast=float)
    ...
</code></pre>
    </div>