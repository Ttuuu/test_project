<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>check</code> target always succeeds (because the last command in the pipeline is <code>echo</code>).  We'd like it to fail if any of the tests fail, so we should just write them one per line.  Instead of testing for the existence of the files, we should make the <code>check</code> target <em>depend</em> on them:</p>
<pre><code>check: $(script_name_1)  $(script_name_2)
    sha512sum --check SHA512SUMS
    @echo "OK: Files are prepared. You may use make install command now."
</code></pre>
<p>BTW, <code>script_name_1</code> and <code>script_name_2</code> are completely unhelpful variable names.  How about <code>encrypt</code> and <code>decrypt</code>, for example?</p>
<hr>
<p>I think the <code>install</code> target should depend on <code>check</code> - we really don't want to install if the check fails:</p>
<pre><code>install: check
</code></pre>
<hr>
<p>I'm not convinced that this is a good thing:</p>
<pre><code>user_id=$(shell whoami)
group_id=$(shell id -gn)
</code></pre>
<p>When we install software, we normally make it owned by an appropriate user on the system, not the person doing the installing.  In most cases, programs are owned by <code>root</code>, so that no ordinary user can accidentally overwrite them (or any other harmful action).</p>
<hr>
<p>Make provides a <code>$(RM)</code> definition to give you a more portable command for deleting files.</p>
<hr>
<p>It's great that you've thought about install location and about overridability of such parameters.  You probably ought to know the conventional variables that are used for these:</p>
<ul>
<li><strong><code>DESTDIR</code></strong> specifies where the root directory is.  This is usually empty, but packaging tools set this to a suitable working directory to build a (partial) filesystem image that can be archived.</li>
<li><strong><code>PREFIX</code></strong> works somewhat like your <code>DESTDIR</code> or <code>install_path</code> (I'm not sure why you have two names for the same thing).</li>
</ul>
<hr>
<p>This is a rare Makefile that doesn't need <code>.DELETE_ON_ERROR:</code> (since it contains no non-PHONY targets).</p>
<hr>
<h1>Modified code</h1>
<p>This is what I ended up with:</p>
<pre><code>PREFIX = /usr/local

install_path = $(DESTDIR)$(PREFIX)/bin

encrypt = encrypt-file-aes256
decrypt = decrypt-file-aes256

check: $(encrypt)  $(decrypt)
    sha512sum --check SHA512SUMS
    @echo "OK: Files are prepared. You may use make install command now."

install: check
    install --d -D $(install_path)
    install -m 0755 -t $(install_path) $(encrypt) $(decrypt)

uninstall:
    $(RM) $(install_path)/$(encrypt) $(install_path)/$(decrypt)


.PHONY: check install uninstall
</code></pre>
<p>Note that Make variables specified on the command line will override those in the Makefile, so you can write</p>
<pre class="lang-sh prettyprint-override"><code>make install PREFIX="$(HOME)/testing"
</code></pre>
<p>to install to your test directory, for example.</p>
    </div>