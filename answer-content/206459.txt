<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm also in the (early) process of learning Haskell, so please take my advice with a grain of salt.</p>

<h1>First, let's talk about your coding style</h1>

<ul>
<li>I am assuming the indentation is only messed up in your question, as the code in your post would not compile.</li>
<li>I am also going to assume that you are either supposed to implement the cipher recursively or don't know a better method, yet (<code>map</code>). You also seem not to know about function composition (using <code>.</code> and <code>$</code>). In case you do, you should generally* use it wherever possible (*unless it reduces readability, but I haven't seen such a case yet).</li>
<li><code>xs</code> is not used to represent scalar (single) values, but values such as lists that can contain many <em>x's</em>. Pattern matching a list using cons is often written as <code>x:xs</code>, <code>f:fs</code>, etc.</li>
<li><p>Using guards to check the same value for equality multiple times is redundant. Using a <code>case ... of</code> expression is more concise and readable:</p>

<pre><code>cipher x n = case x of
  'x' -&gt; 'a' 
  'y' -&gt; 'b'
  'z' -&gt; 'c'
  _   -&gt; [xs..'z'] !! n
-- alternatively: cipher 'x' n = 'a' etc.
</code></pre></li>
<li><p><code>even (pos)</code> can be written as <code>even pos</code>.</p></li>
<li><p>I think using guards instead of if .. then .. else would make your code more readable. Instead of</p>

<pre><code>caesarCipherAux codedMessage pos (xs:s) n = 
  if even (pos) then
    -- things
  else
    -- other things
</code></pre>

<p>write</p>

<pre><code>caesarCipherAux codedMessage pos (x:xs) n
  | even pos  = -- things
  | otherwise = -- other things
</code></pre></li>
<li><p>Your use of whitespace is not always consistent (<code>++</code> in lines 8 &amp; 10).</p></li>
<li><p>Consider surrounding infix operators by whitespace to increase readability. In my opinion something like <code>f (x+1)</code> is fine, but <code>| xs == 'x'='c'</code> decreases readability.</p></li>
<li><p>Avoid <code>++</code>. Appending lists repeatedly can get somewhat costly (in this case the cost is negligible, but when theres a better way why not choose it). Given that you only append a char, a better way of doing so is consing it: <code>toUpper xs : codedMessage</code> instead of <code>codedMessage++[toUpper xs]</code>. This means, of course, that the end result needs to be reversed: <code>caesarCipher = reverse . caesarCipherAux [] 0</code> with function composition or <code>caesarCipher = reverse (caesarCipherAux [] 0)</code> without. In cases where you want to append two lists, such as two strings, you can use a list of strings, cons (<code>:</code>) the lists and <code>concat</code> them at the end.</p></li>
<li><p>Avoid <code>!!</code> and if you use it, make sure its safe. <code>caesarCipher "Hello" 30</code> will result in an exception. Instead of <code>[xs..'z'] !! n</code> use something like</p>

<pre><code>let abc = [xs..'z']
in abc !! mod (length abc) n
</code></pre>

<p>Unless <code>abc</code> is empty, this is safe. <code>abc</code> will be empty if <code>xs &gt; 'z'</code>, so you have to check that beforehand. Still, not using <code>!!</code> in the first place  would be better.</p></li>
</ul>

<h1>About the implementation</h1>

<p>I think your implementation is a good effort for a beginner, but flawed. As long as letters are not shifted past z (or a, if n is negative), it works. It they are, your code either a) yields the wrong result or b) crashes. </p>

<p>a) You tried to implement wrapping letters by hardcoding cases for <code>'x'</code>, <code>'y'</code> and <code>'z'</code>, but those are only correct for <code>n=3</code>. If <code>n</code> is not <code>3</code>, the result will be incorrect: <code>caesarCipher "xyz" (-1)</code> is <code>"XbZ"</code> in your implementation (<code>y + 3 = b</code>, where y, b are numerical representations of 'y', 'b'). But it should be <code>"XxZ"</code> because <code>y - 1 = x</code>. </p>

<p>b) Applying <code>caesarCipher</code> to <code>"xwz" 10</code> results in an exception (<code>*** Exception: Prelude.!!: index too large</code>) because <code>['w'..'z']</code> only contains four characters and you did not harcode a case for <code>'w'</code> (or any of the other letters).</p>

<p>Also, your function does not handle characters outside of <code>['a'..'z']</code>. I assume that this is outside the scope of your exercise.</p>

<h1>Fixing it</h1>

<p>Prelude contains <code>ord :: Char -&gt; Int</code> and <code>chr :: Int -&gt; Char</code> to convert a Char to Int and vice-versa. In conjunction with <code>mod</code>, which returns the remainder of an Integral division, those functions are enough to implement letter shifting accurately and safely. Consider this example (w/o function composition):</p>

<pre><code>shift :: Char -&gt; Int -&gt; Char
shift ch n = chr x'
    where r  = 26 -- length alphabet
          a  = ord 'a'
          x  = ord ch
          x' = a + mod (x - a + n) r

works      = shift 'a' 26 == 'a'
stillworks = shift 'b' (-26) == 'b'
wontbreak  = shift 'c' (26 * 4234789) == 'c'
</code></pre>

<p>This implementation fixes both problems because it does not use unsafe functions such as <code>!!</code> and works on any character (no hardcoded cases). If you apply it to characters outside the <code>'a'..'z'</code> range, it will still evaluate successfully and the result will be constrained to said range (which is probably not what you want, so only apply this function to characters that are in the alphabet). To shift upper case letters properly, convert them to lower-case first before applying the function, then they can be converted back (again, not using composition):</p>

<pre><code>foo (x:xs) n acc
    | isUpper x = foo xs n ((toUpper (shift (toLower x))):acc)
    | otherwise = foo xs n (shift x:acc)
</code></pre>

<p>Finally, instead of checking for an even/odd number, you can take two characters at once; one will be even, the other odd:</p>

<pre><code>foo []       = "null"
foo [x]      = "x is even"
foo (x:y:xs) = "x is even, y is odd"
</code></pre>

<p>Thats all, I think. I hope it helps.</p>
    </div>