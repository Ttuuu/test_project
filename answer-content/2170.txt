<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think in this case you're best off just writing out the mapping -- there are only ten letter/digit pairs, and writing code to generate that mapping doesn't buy you much.</p>

<pre><code>def crypt(s):
  substitutions = {
    'a' :  '0',
    'e' :  '1',
    'i' :  '2',
    'o' :  '3',
    'u' :  '4',
    'A' :  '0',
    'E' :  '1',
    'I' :  '2',
    'O' :  '3',
    'U' :  '4'
  }

  for before, after in substitutions.items():
    s =  s.replace(before, after)

  return s
</code></pre>

<p>If you were writing a more general transliteration tool, say, with more complicated <code>substitution</code> rules, then the situation would be different. It's fun to come up with neat ways to build that mapping... for instance:</p>

<pre><code>substitutions = dict(zip('aeiou','01234') + zip('AEIOU', '01234'))
</code></pre>

<p>Cute, except it isn't -- you're going to hate yourself in a couple weeks (or days!) when someone comes along with "AND SOMETIMES Y!!!", right?</p>

<p>Given the small scale of the problem statement, I'd say just spit out the mapping and be done with it.</p>
    </div>