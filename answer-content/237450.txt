<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>First, a Code Review</h1>

<h2>Anti-pattern</h2>

<p>Please don't do this:</p>

<pre><code>record = new String();
</code></pre>

<p>This is (barring compiler heroics), creating a brand new empty string literal, when a perfectly good interned string literal is available:</p>

<pre><code>record = "";
</code></pre>

<p>Using this interned literal <code>""</code> prevents the creation of a number of identical tiny objects, and will improve the performance of the JVM.  This is the same reason for preferring <code>Integer.valueOf(some_string)</code> over <code>new Integer(some_string)</code>.</p>

<h2>Primitives -vs- Objects</h2>

<p>In Java, a primitive value is a light-weight - uh - value thing.  It can stored in a register, or in a couple of bytes of memory.  It has no "identity"; there is no difference between <code>5678</code> and <code>5678</code> ... they are simply equal values.  In contrast, an <code>Object</code> is a heavy weight thing.  It is always stored in the heap, requires dozens of bytes of memory, access via indirection, and has identity.  Identity means <code>new Integer(5678)</code> and <code>new Integer(5678)</code> are <strong>different</strong> objects which contain the same numerical value; they exist in different areas of memory.</p>

<p><code>boolean</code> is a value; <code>Boolean</code> is an object which holds a <code>boolean</code> value.</p>

<pre><code>Boolean inUse = false;
</code></pre>

<p>Here, you are declaring a <code>Boolean</code> object, and attempting to storing a <code>boolean</code> value in that variable.  The compiler autoboxes the <code>false</code> value into the singleton <code>Boolean.FALSE</code> for you, and stores a reference to that object in <code>inUse</code>.  Additionally, it may increases a reference count of <code>Boolean.FALSE</code>, in order to properly manage the object heap, find unreferenced objects, and perform garbage collection.</p>

<p>If instead, you used:</p>

<pre><code>boolean inUse = false;
</code></pre>

<p>the compiler would move a false value into a temporary register.</p>

<p>Compare the amount of behind the scenes work described in those paragraphs.  Your code will run much faster when you use values instead of objects.</p>

<p>Reading further into your code, I see lines like these:</p>

<pre><code>           /*int ID*/Integer.valueOf(bin.readLine())
           /*double price*/Double.valueOf(bin.readLine()),
</code></pre>

<p>The comments suggested these values are being passed to an <code>int</code> and a <code>double</code> parameter.  However <code>Integer.valueOf(...)</code> returns an <code>Integer</code> object and <code>Double.valueOf(...)</code> returns a <code>Double</code> object.  This means you've again asked the JVM to do more work than necessary.  After reading the line, <code>Integer.valueOf(...)</code> converts the string into a <code>int</code>. (It internally uses <code>int</code> in the conversion process for efficiency.)  After the conversion is complete, it boxes the <code>int</code> value into an <code>Integer</code> (allocated on the heap, if it cannot intern the value), and returns this object.  Then, since the returned value is being passed to an <code>int</code> parameter, the <code>Integer</code> object is unboxed back into an <code>int</code>.   </p>

<p>If instead you used:</p>

<pre><code>           /*int ID*/Integer.parseInt(bin.readLine())
           /*double price*/Double.parseDouble(bin.readLine()),
</code></pre>

<p>these function would return an <code>int</code> and a <code>double</code> respectively.  No boxing and subsequent unboxing is required.  Again, less work means faster, more efficient code.</p>

<h2>AutoCloseable</h2>

<p>Most reader and writer objects are <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/AutoCloseable.html" rel="noreferrer"><code>AutoCloseable</code></a>, which means they can be used with Java's try-with-resources statement.  This ensures the operating system resources are properly closed at the end of normal and exceptional execution paths.  It also means you don't have to call <code>bin.close()</code>, if you write your code correctly.</p>

<p>Instead of:</p>

<pre><code>FileReader reader;

reader = new FileReader(Filename);
BufferedReader bin = new BufferedReader(reader);

/* ... read code omitted for brevity ... */

bin.close();
bin =null;
</code></pre>

<p>You should write:</p>

<pre><code>try (FileReader reader = new FileReader(Filename);
        BufferedReader bin = new BufferedReader(reader))
    {
    /* ... read code omitted for brevity ... */
    }
</code></pre>

<p>Notice the absence of <code>bin.close()</code>.  Resources declared and opened inside <code>try ( ... )</code> are closed for you at the end of the try block.  If an exception is thrown inside the try, the resources are still properly closed for you; something which your code currently does not handle.</p>

<h2>Coding Conventions</h2>

<p>Variable and member names should not start with an upper case letter; class names start with upper case letters.  In <code>reader = new FileReader(Filename);</code>, it looks like a <code>Filename</code> is a class.</p>

<p>Use spaces liberally, including after commas, around operators, after <code>if</code>, <code>for</code>, <code>while</code>, and before <code>{</code>.  Compare:</p>

<pre><code>if(chosenProduct.getMaximumStockLevel()==0||chosenProduct.getMinimumStockLevel()==0){
    reOrderPossible=false;    
}
</code></pre>

<p>and</p>

<pre><code>if (chosenProduct.getMaximumStockLevel() == 0  ||  chosenProduct.getMinimumStockLevel() == 0) {
    reOrderPossible = false;    
}
</code></pre>

<p>Notice the double space around the <code>||</code> which helps suggest the order of precedence of the operations.</p>

<h2>@Override</h2>

<p>You have:</p>

<pre><code>class Product {
    public Product loadFromFile(Product aProduct, BufferedReader bin) throws IOException, ParseException { ... }
    ...
}
</code></pre>

<p>and </p>

<pre><code>class KitchenProduct : public Product {
    public Product loadFromFile(KitchenProduct kProduct, BufferedReader bin) throws IOException, ParseException { ... }
    ...
}
</code></pre>

<p>First thing to note is neither of these is a <code>static</code> method.  This means they must be called with a receiver, the <code>this</code> object.</p>

<p>In your code, you call:</p>

<pre><code>  KitchenProduct kProduct = new KitchenProduct();          
  ...( kProduct.loadFromFile(kProduct, bin) ); 
</code></pre>

<p>So when <code>kProduct.loadFromFile(...)</code> is invoked, <code>this</code> will be the value of <code>kProduct</code> from the caller, and the first argument will be the value of <code>kProduct</code> from the caller.</p>

<p>In <code>KitchenProduct::loadFromFile(KitchenProduct kProduct, ...)</code>, you call <code>kProduct.setFragile(...)</code>.  You could have just as easily written <code>this.setFragile(...)</code> because <code>this</code> has the same value as the first argument to the function.  Or less verbosely, you could simply write <code>setFragile(...)</code> because <code>this.</code> is implicit.</p>

<p>Improved code (step 1):</p>

<pre><code>public KitchenProduct loadFromFile(KitchenProduct kProduct, BufferedReader bin) throws IOException, ParseException{
    super.loadFromFile(this, bin);

    setFragile(super.convertTextToBoolean(bin.readLine()));

    return this;
}
</code></pre>

<p>Similarly, <code>Produce::loadFromFile(Product aProduct, ...)</code> is being called with the receiver (<code>this</code>) the same as the first argument (<code>aProduct</code>), so it can be rewritten:</p>

<pre><code>public Product loadFromFile(Product aProduct, BufferedReader bin) throws IOException, ParseException{

    edit(
         /* ... omitted for brevity ... */
    );

    return this;
}
</code></pre>

<p>Note that neither <code>Product::loadFromFile(...)</code> nor <code>KitchenProduct::loadFromFile(...)</code> are using their first argument anymore.  These can be removed, leaving just the <code>BufferedReader bin</code> argument.  At this point, the function arguments become identical, which allows us to use the annotation <code>@Override</code>.</p>

<pre><code>class Product {

    public Product loadFromFile(BufferedReader bin) throws IOException, ParseException {
        edit( /* ... omitted for brevity ... */ );
        return this;
    }

    ...
}

class KitchenProduct {

    @Override
    public KitchenProduct loadFromFile(BufferedReader bin) throws IOException, ParseException {
        super.loadFromFile(bin)
        setFragile(convertTextToBoolean(bin.readLine()));
        return this;
    }

    ...
}


...

    case "Kitchen":
        KitchenProduct kProduct = new KitchenProduct();          
        Products.add(kProduct.loadFromFile(bin)); 
        break;
</code></pre>

<hr>

<h1>Improving the Load</h1>

<p>We're now ready to start improving the dynamic loading code.</p>

<p>First of all, all <code>Product</code> classes now <code>@Override</code> a common base class <code>loadFromFile</code> method.  This means we can call the method on any derived class from the base class, without knowing what kind of base class we have.</p>

<p>So this code:</p>

<pre><code>switch(bin.readLine()){

    case "Electronic":
      ElectronicProduct eProduct = new ElectronicProduct();          
      Products.add(eProduct.loadFromFile(eProduct,bin)); 
      break;

    case "Kitchen":
      KitchenProduct kProduct = new KitchenProduct();          
      Products.add(kProduct.loadFromFile(kProduct,bin)); 
      break;

    case "Food":
      FoodProduct fProduct = new FoodProduct();          
      Products.add(fProduct.loadFromFile(fProduct,bin)); 
      break;

    case "Book":
      BookProduct bProduct = new BookProduct();          
      Products.add(bProduct.loadFromFile(bProduct,bin)); 
      break;
}
</code></pre>

<p>can now be written as:</p>

<pre><code>Product product = null;

switch (bin.readLine()) {
    case "Electronic":
        product = new ElectronicProduct();          
        break;

    case "Kitchen":
        product = new KitchenProduct();          
        break;

    case "Food":
        product = new FoodProduct();          
        break;

    case "Book":
        product = new BookProduct();          
        break;
}

if (product != null) {
    Products.add(product.loadFromFile(bin));
}
</code></pre>

<p>As a further improvement, I'd make all of the <code>loadFromFile(...)</code> methods return <code>void</code>, and write:</p>

<pre><code>if (product != null) {
    product.loadFromFile(bin);
    Products.add(product);
}
</code></pre>

<p>Now, you can create a factory method which turns a string into the correct product class, and write the code as:</p>

<pre><code>String product_name = bin.readLine();
Product product = create_product(product_name);
product.loadFromFile(bin);
Products.add(product);
</code></pre>

<p>And your factory method might look like:</p>

<pre><code>private static Product create_product(String product_name) {
    switch (product_name) {
        case "Electronic": return new ElectronicProduct();
        case "Kitchen":    return new KitchenProduct();
        case "Food":       return new FoodProduct();
        case "Book":       return new BookProduct();
        default: throw new UnknownProductException(product_name);
    }
}
</code></pre>

<h1>Dynamic Construction</h1>

<p>It has been a long road, but to finish, this is one way to implement dynamic construction (untested):</p>

<pre><code>@SuppressWarnings("unchecked")
private static Product create_product(String product_name) {
    try {
        Class&lt;?&gt; product_class = Class.forName(product_name + "Product");
        return (Product) product_class.getDeclaredConstructor().newInstance();
    } except (ReflectiveOperationException e) {
        throw new UnknownProductException(product_name);
    }
}
</code></pre>

<p>You will need <code>"your.package." + product_name + "Product"</code> if your derived <code>Product</code> classes exist in a package.</p>
    </div>