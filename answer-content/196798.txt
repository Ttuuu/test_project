<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As noted in your previous question (where the full context for this routine was exposed), you have added complications where none was necessary.</p>

<pre><code>Public Sub writeArrToWS(arr() As Variant, startCell As Range, fromTop As Boolean, nRows As Long, nCols As Long)
</code></pre>

<p>Knowing this context, I know that:</p>

<ul>
<li>Arr() is a two dimensional array</li>
<li>nRows = UBound(arr,1)</li>
<li>nCols = UBound(Arr,2)</li>
<li>You only call it once and <code>FromTop</code> is <code>True</code></li>
</ul>

<p>As such,  your spaghetti can be reduced to the following to meet your contextual need.</p>

<pre><code>Public Sub writeArrToWS(arr() As Variant, startCell As Range)
    Dim targetRange As Range
    Set targetRange = startCell ' assumes startCell is a single cell. Could do error checking here!
    Set targetRange = targetRange.Resize(UBound(arr, 1), UBound(arr, 2))
    targetRange.ClearContents ' don't even think this is necessary.
    targetRange = arr
End Sub
</code></pre>

<p>(Tested and worked for me)</p>

<p>For future re-use, simply reverse the array before you enter the sub-routine - this would be the quickest and most efficient means.</p>

<p>Here are two test routines, the first forwards, the second backwards (*) - Range L3:O15 was filled with test data:</p>

<pre><code>Sub test1()
    Dim tArr() As Variant
    tArr = Range("L3:O15").Value
    writeArrToWS tArr, Me.Range("A3")
End Sub

Sub test2a()
    Dim tArr() As Variant
    Dim tArr2() As Variant
    Dim ti As Long ' iterator
    Dim tj As Long ' iterator
    Dim tLengthArr As Long ' handy variable - easier to read than UBound etc. But is equivalent to UBound(tarr,1)
    Dim tWidthArr As Long ' handy variable - easier to read than UBound etc. But is equivalent to UBound(tarr,2)
    tArr = Range("L3:O15").Value
    tLengthArr = UBound(tArr, 1)
    tWidthArr = UBound(tArr, 2)
    ReDim tArr2(tLengthArr, tWidthArr)
    For ti = 1 To tLengthArr
        For tj = 1 To tWidthArr
            tArr2(ti, tj) = tArr(tLengthArr - ti + 1, tj)
        Next tj
    Next ti
    writeArrToWS tArr2, Me.Range("A3")
End Sub
</code></pre>

<p>(*) I struck an interesting problem on the backwards version. I used debug to prove the array was filling correctly and had the right dimensions. I even checked to see if the <code>targetRange</code> was the correct range. But when the data was written, the first column was blank and the next three columns were the first three columns. Yes, <code>Option explicit</code> is on. Don't understand!</p>
    </div>