<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Algorithm</h3>

<blockquote>
  <ol>
  <li>Every call must generate a unique string of alpha numeric characters.</li>
  <li>Most important: Zero chance of string duplication.</li>
  </ol>
</blockquote>

<p>"zero chance" is really hard to achieve, if it's even possible.
Your algorithm is essentially based on the current time in microseconds.
Since systems may adjust their clock, for example with NTP,
the same microsecond may happen again,
resulting in a non-unique string.</p>

<p>Striving for a unique random string is known challenge,
see for example the <a href="http://php.net/manual/en/function.uniqid.php" rel="noreferrer"><code>uniqid</code></a> function.
The documentation offers some recommendations for cryptographic security,
and I think it might be a good idea to incorporate <code>uniqid</code> into your algorithm.</p>

<blockquote>
  <ol start="4">
  <li>Repeat calls should reflect a high degree of dissimilarity.</li>
  </ol>
</blockquote>

<p>If I call the function twice in a row I get values with a similar prefix, for example:</p>

<blockquote>
<pre><code>qf1p1dojax7n7m08no1f
qf1p1drbj0nbnahjqg1f

gp70pxdfghnbnaetckpa
gp70pxg8j0q4q3hlfcpa
</code></pre>
</blockquote>

<p>This is because in the microseconds parts are too similar in consecutive calls.
You seem to be using the microseconds part as a 6-digit random number.
You would get better results with a proper pseudo random generator,
for example one of the recommendations from <a href="http://php.net/manual/en/function.uniqid.php" rel="noreferrer"><code>uniqid</code></a>.</p>

<h3>Readability</h3>

<p>The implemented algorithm is quite straightforward:</p>

<ul>
<li>Prepare 3 strings of at least 10-digits:

<ul>
<li>a 12-digit string from the first 6 decimal digits of the microseconds elapsed since the current timestamp seconds, concatenated with its reverse</li>
<li>a 10-digit string from the current timestamp</li>
<li>a 10-digit string from the reverse of the current timestamp</li>
</ul></li>
<li>Count from 0 until 9 to generate a 20-letter string:

<ul>
<li>Create a 3-digit number using i-th positions from the prepared strings</li>
<li>Encode the 3-digit number as a base-36 number, so that it becomes a 2-letter string</li>
<li>Concatenate the 2-letter encoded strings to get a 20-letter string</li>
</ul></li>
</ul>

<p>Unfortunately this flow of logic is not easy to see in the implementation,
because the variable names are not helping.</p>

<ul>
<li><p>Instead of the array <code>$time_array</code>,
it would be better to use 3 variables with descriptive names.</p></li>
<li><p>If you extract the big logical steps to functions, for example one to generate a 3-digit number, and another to encode a 3-digit number in base-36, the code could read almost like a story.</p></li>
</ul>

<h3>Technique</h3>

<p>Instead of <code>$mod = $num - ($mult * 36)</code> you could simply use the modulo operator: <code>$mod = $num % 36</code>.</p>

<p>Instead of hard-coding 36, which has to be the length of <code>$letters</code>,
it would be better to store it in a variable, and derive its value from the length of <code>$letters</code>.
So that if one day you change the alphabet (for example add capital letters too),
then you won't have to remember to replace all the 36 with the new value,
the program will "just work".</p>

<p>Instead of implementing base-36 encoding yourself,
you could use the existing <a href="http://us3.php.net/manual/en/function.base-convert.php#52450" rel="noreferrer"><code>base_convert</code></a> function.
It's not 100% the same, because it uses slightly different alphabet,
and you would need to convert the number parameter to string.</p>
    </div>