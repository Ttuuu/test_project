<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the above, these are my comments:</p>

<h2>API completeness</h2>

<p>One of the attractive features of a linked list is adding elements in O(1) anywhere in the list, given a Node*. But this API only allows for adding new elements in the middle in O(n) via add(int, position). I would at least allow a method of adding after a node, given a Node*.</p>

<h2>Encapsulation</h2>

<p>Usually you don't want classes to have public members (one exception is static constexpr). So move head, tail and length to private.</p>

<h2>Code compactness</h2>

<ol>
<li>You don't need the constructor, because you can initialize the members using {} in their declaration. <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es23-prefer-the--initializer-syntax" rel="nofollow noreferrer">prefer {}</a></li>
<li>Conceptually, add(int data) is a private case of add(int data, int position), so the code should reflect that IMO.</li>
</ol>

<h2>Readability</h2>

<ol>
<li>Since the length cannot be negative, it's better to use size_t instead of int.</li>
<li><p>Const correctness. Add the const specifier at the end of functions that don't change the list, like: getters, print() etc: <code>int get_length() const;</code>. Note that this would prevent changing head in print() - which is good because you don't expect the list to change if you're merely printing it.</p></li>
<li><p>Use the shorter <code>length += 1;</code> notation.</p></li>
</ol>

<h2>Reusability</h2>

<p>One big thing to remember when writing a container is to templatize it. Since you're now doing your first steps in C++ I understand that you want to take one step at time, so just int as the type is fine.</p>

<pre><code>template&lt;typename T&gt;
class LinkedList
{
...
}
</code></pre>

<h2>Memory management</h2>

<ol>
<li>In add() use a self-managed std::shared_ptr instead of raw pointers and new. Read about smart pointers, they're one of the best features in C++11.</li>
<li>I don't see a reason for the <code>new LinkedList();</code> in main(). Just a <code>LinkedList list;</code> would be enough.</li>
</ol>

<h2>Efficiency</h2>

<p>In add(int data, int position), why continue traversing the while loop if you have already added the element?</p>

<h2>Unit tests</h2>

<p>Testing is really important. I would suggest using a testing framework (I work with gtests) and writing some unit tests. Going through each public method and thinking how to test it -  by itself, or in conjunction with other functions - and writing unit tests to prove correctness is a sure way to increase quality.</p>

<p>Note that the implementation for delete_node() is missing. Make sure that it reuses the node search code that <code>add(data, position)</code> has.</p>
    </div>