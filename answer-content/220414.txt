<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Much of this review is about style. Style's important, especially in
joint projects. It's best if style matches what the community has come
to expect.</p>

<p>That said, it'd be natural to start off with an unconstrained array
type for <code>Set</code>:</p>

<pre><code>type Set is array (Natural range &lt;&gt;) of Integer;
</code></pre>

<p>Naming is important. The function doesn't <em>find</em> a subset (clue: it
returns a <code>Boolean</code>).</p>

<pre><code>function Check_For_Subset
</code></pre>

<p>Parameter names are important too. They should be written from the
point of view of the caller, not from that of the implementer. It's
good if they make sense when using named parameter assignment;
<code>Check_For_Subset (Of_Set =&gt; Arr, Summing_To =&gt; 0)</code>. Note also, we
don't need the <code>N</code> parameter, because the parameter <code>Of_Set</code> carries
with it the array bounds, length etc in the form of attributes. Using
the attributes adds to the code volume, but improves flexibility, and
is pretty-much mandatory when using unconstrained parameters.</p>

<pre><code>  (Of_Set : Set; Summing_To : Integer) return Boolean is
begin
</code></pre>

<p>I think I have the intent of the algorithm correct in the code
comments.</p>

<pre><code>   --  Check whether the recursion should terminate.
   if Summing_To = 0 then
      --  If the required sum is zero, it would be possible to meet
      --  it by using an empty set, even if the current set isn't
      --  empty.
      return True;
</code></pre>

<p>Here we use the attribute <code>'Length</code>.</p>

<pre><code>   elsif Of_Set'Length = 0 then
      --  Summing_to is non-zero, but there are no further
      --  elements to contribute to it.
      return False;
   end if;
</code></pre>

<p>Here we use the attribute <code>'Last</code>, the last index of the actual
parameter.</p>

<pre><code>   if (Of_Set (Of_Set'Last)) &gt; Summing_To then
</code></pre>

<p><code>Of_Set (Of_Set'First .. Of_Set'Last - 1)</code> is a "slice" of the array,
extending from the first to the last-but-one element. Note, it's
possible for the last index of the slice to be less than the first,
which corresponds to an empty slice.</p>

<p>I think there's a problem here if <code>Summing_To</code> is negative! Perhaps it
should be a <code>Natural</code>?</p>

<pre><code>      --  If the last element is already bigger than the requirred
      --  sum, it cannot contribute; so ignore it and check the
      --  remainder.
      return Check_For_Subset (Of_Set (Of_Set'First .. Of_Set'Last - 1),
                               Summing_To);
   end if;
</code></pre>

<p>And then</p>

<pre><code>   return
     --  We may be able to find a subset by excluding the last
     --  element ..
     Check_For_Subset (Of_Set (Of_Set'First .. Of_Set'Last - 1),
                       Summing_To)
     or else
     --  .. or by taking the last element away from the required
     --  sum, and checking the remainder of the input set (this
     --  effectively *includes* the last element).
     Check_For_Subset (Of_Set (Of_Set'First .. Of_Set'Last - 1),
                       Summing_To - Of_Set(Of_Set'Last));
end Check_For_Subset;
</code></pre>

<p>Finally. this declares a <code>Set</code> object with the desired range, to be
used by the main program. I do question whether it might be better to
arrange for indexing by <code>Positive</code>, which would have eliminated the 
<code>N - 1</code>'s in the original code.</p>

<pre><code>Arr : Set (0 .. 4);
</code></pre>

<hr>

<p>I wrote some notes on style in the mid-1990â€™s, updated (a bit) <a href="https://forward-in-code.blogspot.com/2019/05/coding-guidelines.html" rel="nofollow noreferrer">here</a>.</p>
    </div>