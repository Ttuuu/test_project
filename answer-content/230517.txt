<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like that your braces and indentation is beautifully consistent. But, this is C#, and your Java is showing ;-) - Kudos for the mostly-consistent <code>PascalCase</code> type and member names, but it's the K&amp;R same-line <code>{</code> opening brace that clashes with the typical Allman next-line <code>{</code> opening brace standard most people would <em>expect</em> of C# code:</p>

<blockquote>
<pre><code>public DMatrix(int n)
{
    if (n &lt; 1)
    {
        throw new Exception($"Cannot create matrix," +
                            $" N should be greater or equal to 1.\n\tN = {n}");
    }

    NbRows = NbCols = n;
    Fill(0);
}
</code></pre>
</blockquote>

<p>I would write auto-properties on a single line:</p>

<pre><code>public int NbRows { get; private set; }

public int NbCols { get; private set; }
</code></pre>

<p>Or rather, I'd make these <code>get</code>-only:</p>

<pre><code>public int Rows =&gt; _rows;

public int Columns =&gt; _columns;
</code></pre>

<p>..and have the corresponding private fields. Now maybe I'm old-school, but I like that underscore for private fields: it removes the need to qualify private fields with <code>this</code> when you'd like a local variable by that name. But, something feels wrong about needing to store this kind of metadata in private fields... let's keep reading..</p>

<blockquote>
<pre><code>public static int Precision {
    get;
    set;
}
</code></pre>
</blockquote>

<p>Uh-oh. Assuming it's used elsewhere and not just in the <code>ToString</code> implementation (why then?), it's almost guaranteed you don't want a <code>static</code> modifier here: a <code>static</code> property belongs to the <em>type</em>, not the <em>object/instance</em> - if I have two <code>DMatrix</code> objects and I say <code>matrix1.Precision = 4</code> and then two lines later I say <code>matrix2.Precision = 1</code>, it's perfectly reasonable to expect <code>matrix1.Precision</code> to not start claiming its value is now <code>1</code>... right?</p>

<blockquote>
<pre><code>public DMatrix(DMatrix A) : this(A.data) { }
</code></pre>
</blockquote>

<p>Hm, I was about to write something about <em>constructor chaining</em>.. there's not enough of that:</p>

<pre><code>public DMatrix() : this(1) { }

public DMatrix(int size) : this(size, size)

public DMatrix(int width, int height) : this(width, height, default) { }

public DMatrix(int width, int height, int fillValue) : this(new double[width, height](), fillValue) { }

public DMatrix(double[,] matrix, int fillValue = default)
{
    /* one place */
}
</code></pre>

<p>I'd make the encapsulated <code>data</code> array <code>readonly</code> (that makes <em>the array reference</em> read-only, not the array elements; the compiler will prevent assigning to the array outside a constructor).</p>

<pre><code>    private readonly double[,] _data;
</code></pre>

<p>And then, the <code>Rows</code> and <code>Cols</code> don't need a setter anymore:</p>

<pre><code>public int Rows { get; }
public int Columns { get; }
</code></pre>

<p>They can only be assigned in a constructor.</p>

<p>Careful with operator overloads - it's not clear how the rather obscure <a href="https://stackoverflow.com/a/387429/1188513">unary one's complement operator</a> turns into an implicit shorthand for <s>applying the <code>~</code> operator to each element</s> ...transposing:</p>

<blockquote>
<pre><code>public static DMatrix operator ~(DMatrix A) {
    return A.Transpose();
}
</code></pre>
</blockquote>

<p>There's already a <code>Transpose</code> method for that.</p>

<p>I see you <code>throw Exception</code> - avoid that: you want to throw a meaningful exception type, such that you know what the problem is just with the type name. When throwing in a guard clause that's validating the given arguments, you want to throw an <code>ArgumentException</code> for example.</p>

<blockquote>
<pre><code>if (NbCols != NbRows) {
    throw new Exception($"Cannot compute trace, matrix is not square:\n\t" +
                        $"A : {NbRows}x{NbCols}");
}
</code></pre>
</blockquote>

<p>This particular condition should be handled in the constructor IMO (where <code>NbCols/Columns</code> and <code>NbRows/Rows</code> are assigned), and then here a <code>System.Diagnostics.Debug.Assert</code> call should suffice to cover this rather unlikely scenario - it's the job of the constructor(s) to ensure the object is in a valid state.</p>

<p>This one however:</p>

<blockquote>
<pre><code>if (m &lt; 1) {
    throw new Exception($"Cannot create matrix," +
                        $" M should be greater or equal to 1.\n\tM = {m}");
}
</code></pre>
</blockquote>

<p>...worries me. If <code>NbRows = NbCols = n</code>, and then <code>data = new double[m, n];</code>, it means our parameterization is 1-based, but the matrix itself is 0-based... so we ask for 1x1 and actually get a 2x2 where <code>[0,0]</code> is shoved under the proverbial carpet! </p>

<p>A note here:</p>

<blockquote>
<pre><code>public double Det_recursive() {
</code></pre>
</blockquote>

<p>The common guidelines would scream for <code>PascalCase</code> here, and I would suggest that the recursive nature of the implementation is ..an implementation detail, and so I would have gone with <code>Determinant</code> for a name.</p>

<p>I like how you antagonized <code>+</code> and <code>-</code> operators, and I know you really like the K&amp;R braces, but this:</p>

<blockquote>
<pre><code>public static DMatrix operator -(DMatrix A, double x) {
    return A + (-x);
}
</code></pre>
</blockquote>

<p>could be:</p>

<pre><code>public static DMatrix operator -(DMatrix A, double x) =&gt; A + (-x);
</code></pre>

<p>Look ma, no <s>hands</s> braces!</p>

<hr>

<p>There's definitely other things to say, notably about <code>Utils</code>, its name and <code>static</code> nature, and how this impacts coupling, and how this coupling impacts testability... but I'll let other reviewers cover other aspects of this code.</p>
    </div>