<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the unfortunate things you'll notice about coding challenges is that the requirements often force you to write code that isn't ideal. I'm going to call these out, even though in this case they're outside of your control.</p>

<p><strong>Silly requirement:</strong> The method is named <code>solution</code>. This name tells us nothing about the behavior of the function. Also (although less importantly), it goes against the C# method naming convention of <code>PascalCase</code>. A much better name would be something like <code>IsPermutation</code>.</p>

<p><strong>Silly requirement:</strong> The parameter is named <code>A</code>. Single-letter variable names are almost never a good idea. Also (although less importantly), it goes against the C# parameter naming convention of <code>camelCase</code>. It's hard to be descriptive about the context here (since it's just a coding challenge and not a "real life" business problem), but even something like <code>values</code> would be better.</p>

<p><strong>Silly requirement:</strong> The return type of the function is <code>int</code>. The given array is either a permutation of 1..N or it isn't. We don't have a range of possible return values; we have a true/false condition. A better return type would be <code>bool</code>.</p>

<p><strong>Algorithm inefficiency:</strong> There's no need to initialize two new <code>int[]</code>. As you discovered, one new array is sufficient to track unique values.</p>

<p><strong>Algorithm inefficiency:</strong> Again, you've already discovered this. If an array has the correct elements in some order, its sum will necessarily match that of the unordered array. Meanwhile the converse is not true; there are many arrays with the same sum which are not permutations. So you needn't bother tracking the sum at all.</p>

<p><strong>Syntax:</strong> If you take only one piece of my advice, let it be this one: <em>for loops are not the answer</em>. If you are iterating over the indexes of an array, and the only thing you use the index for is to grab the <code>ith</code> element, <em>use a foreach</em>. The situation where you actually <em>need</em> to know the index, and therefore need a for loop, is very rare.</p>

<p><strong>Semantics:</strong> Does an array of <code>int</code> take less space in memory than an array of <code>bool</code>? I don't know, and I don't care. If all I'm tracking is true/false values, I'm going to choose a <code>bool[]</code>. Because that choice tells the person reading the code <em>why</em> I created the variable.</p>

<p><strong>Formatting:</strong> Another major difference between formatting conventions in C# and Java (besides the PascalCase/camelCase conventions I already mentioned) is C#'s convention of putting opening curly braces on the next line (known as <a href="https://en.wikipedia.org/wiki/Indentation_style#K&amp;R_style" rel="noreferrer">K&amp;R style</a>).</p>

<hr>

<p>With all of that advice applied, and some XML documentation comments (which enable Intellisense information when hovering or typing in Visual Studio), we'll end up with something like this:</p>



<pre class="lang-cs prettyprint-override"><code>/// &lt;summary&gt;
/// Check whether the given array contains each integer 1..N exactly once.
/// &lt;/summary&gt;
/// &lt;returns&gt;
/// True if &lt;paramref name="values" /&gt; is a permutation of 1..N,
/// False otherwise.
/// &lt;/returns&gt;
public static bool IsPermutation(int[] values)
{
    var seen = new bool[values.length];

    foreach (var value in values)
    {
        if (value &lt; 1 || value &gt; values.length)
        {
            // Out of range: not a permutation
            return false;
        }
        else if (seen[value - 1])
        {
            // Duplicated value: not a permutation
            return false;
        }
        else
        {
            // Value is OK. Mark as seen.
            seen[value - 1] = true;
        }
    }

    // All values in range, no duplicates: a valid permutation
    return true;
}
</code></pre>
    </div>