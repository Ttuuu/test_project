<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General</h2>

<p>You labeled this as C++11; I'll try and stick to that feature set. </p>

<p>Everything after <code>public:</code> or <code>private:</code> gains that access qualifier, so you only have to use it once. </p>

<p>You use <code>using</code>: that is a good practice, <code>using PointsIt = typename std::vector&lt;Point&gt;::iterator;</code> but in most cases where you would need to use an iterator, <code>auto</code> has the same effect and is less work if you change your containers. The other reason why you'll most likely never write access an iterator type directly is that a <em>ranged based <code>for</code> loop</em> should be used instead. </p>

<blockquote>
<pre><code>QuadTree(const Range &amp;BOUNDARY) : mBoundary(BOUNDARY) {}`
</code></pre>
</blockquote>

<p>Capitalization is usually preserved for constants or compile time definitions; <code>boundary</code> would do nicely. The members <code>NW</code>, <code>NE</code>, etc. are not marked as members by your own convention should be <code>mNW</code>, etc. at least. </p>

<p>Your <code>Range</code> which you use with the variable name  <code>mBoundary</code>, that is basically the extent or bounding box of the area of the node. There is nothing wrong with using the same name as the class name for a member variable, and it looks like you weren't quite happy with <code>Range</code> as you named the member variable differently. Boundary seems to be a better term than range anyway, 'Extent', 'BoundingBox' would also work. </p>

<p>There doesn't seem to be any specific reason to make the range a class inside of the <code>QuadTree</code>; it's just as comfortable on the outside as on the inside.</p>

<p>I personally prefer the public parts above the private section, but that is really a taste issue.</p>

<h2><code>Range</code></h2>

<p>The you declared the default constructor, but that lets you construct an invalid range. There is no need to make the quadtree a friend; if you just want to save the writing effort, <code>Range</code> could as well be a <code>struct</code> with member access. The defaulted constructor will leave the members in your range uninitialized, that is not a good thing. You could initialize things with <code>{0}</code> but depending on your application that might not be the correct thing to do.</p>

<p>Have you noticed that all the operations you do on your <code>Range</code> structure need to calculate the actual bounds?   You would be better off storing the left, right, top and bottom bounds and checking against those.</p>

<h2>QuadTree</h2>

<p>To help with some of the suggestions in the following paragraph, I'd probably split the node type and the tree type. </p>

<p>In most operations you check for each quadrant if the point is in the quadrant, at the worst case (SE) that is 4 <code>Contains</code> calls, but you are trying to insert the point into a quad, besides being totally out of bounds of the tree, the test for the quadrant can be down with 2 checks. The point is either north or south of the horizontal midline, and east or west of the vertical midline. You can ascertain once at the root node if the point is within bounds and then you just need to check which quadrant you want to add the point to. Determining the quadrant for insertion before doing the insertion will reduce the complexity of your code as you will move from the pattern that you have </p>

<pre><code>NW-&gt;DoOperation(point) || NE-&gt;DoOperation(point) || SW-&gt;DoOperation(point) || SE-&gt;DoOperation(point)
</code></pre>

<p>to</p>

<pre><code>auto node = GetQuadrant(point);
node-&gt;DoOperation(point);
</code></pre>

<p>Even with 4 nodes replacing your member <code>NW</code>, <code>NE</code>, etc with an array of nodes will reduce complexity somewhat and increase readability.</p>

<p>Depending on the actual use, it might be better to amortize merges, i.e. not immediately merge empty nodes as the tree grows. In a dynamic system with a somewhat constant number of points, you would eventually reach an equilibrium and stop have to allocate new nodes of your tree. As the grid that you are partitioning is regular, a new split would be along the same lines as the old split. If you want, you could give the user a function to collapse the tree back to its minimal form.</p>

<h3>Floating point comparisons</h3>

<p>I don't know how you use this, but unless the values passed into this function for the point are <em>exactly the same</em> as the ones that you added this will fail. In graphical applications and games, floating point values would be compared by looking at an interval; if the values are within the interval they would be considered the same. So unless you pass exactly the same floating point value to functions like <code>Search()</code> or <code>Remove()</code> they will fail.</p>

<h3><code>Insert()</code></h3>

<p>Your insert function already checks if the node is in the bounds, so there is no need to check again; the array with the points can be cleared at the end of the iteration, as all points are moved to their respective quadrants. Using a range-based <code>for</code> loop will also be more idiomatic. I'd also change some of the checks to positive to reduce complexity. As you are iterating over all points you can clear the bucket in one step once you are done.</p>

<h3><code>Remove()</code></h3>

<p>There is no need to introduce the temporary <code>begin</code> and <code>end</code>:</p>

<pre><code>  m_bucket.erase(m_bucket.begin(), m_bucket.end(), point), m_bucket.end());
</code></pre>

<p>works as well</p>

<p>But the return value <code>true</code> only indicates that the point was within the boundary, <em>not</em> that it was actually deleted. </p>

<h3><code>Search()</code></h3>

<p>What is the use for this?  Within the domain of a program the user of your API usually knows that whether they added a point to the tree or not.  Being able to look it up might not really be helpful.</p>

<h3><code>Query()</code></h3>

<p>Executing a callback for each found point might not yield the best performance. Depending on use, I'd probably prefer an interface that just returns the points that are part of the query. What this is doing here is more <code>ProcessPointsInRange()</code>. If you allow the user to pass in the results array then you can even amortize allocations over time.</p>
    </div>