<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Simplified: Lines-of-Code</h1>

<h2>Sorting &amp; Extracting</h2>

<p>You are sorting lists of values, storing these in variables, and then extracting only the first entries from these lists.  You can use an array slice to keep only the first two entries from the sorted lists, and extract these:</p>

<pre><code>    a1, a2 = sorted(a, key=a.get)[:2]
    b1, b2 = sorted(b, key=b.get)[:2]
</code></pre>

<h2>If / Else</h2>

<p>You test <code>a1 != b1</code>, and if that is <code>True</code>, you return a value.  If not, you again test these values with <code>a1 == b1</code>, and based that, you return different values, or raise an error.</p>

<p>What are the possibilities for <code>a1 != b1</code> and <code>a1 == b1</code>?  Can the first and the second conditions ever both be <code>False</code>?  Either they are equal, or they are not equal.  Or something very strange is going on.  Since the values are keys to a dictionary, tests for equality must be possible and consistent, so this raising of an error looks like it can never be reached.</p>

<p>So you are left with an <code>if</code> and and <code>else</code> case.  In the <code>else</code> case, you again have two possibilities, so we can make the whole thing into one <code>if</code>/<code>elif</code>/<code>else</code> statement:</p>

<pre><code>    if a1 != b1:
        return a1, b1
    elif a[a1] + b[b2] &lt; a[a2] + b[b1]:
        return a1, b2
    else:
        return a2, b1
</code></pre>

<h1>Simplified: Time Complexity</h1>

<p>Python's sorting is an <span class="math-container">\$O(N \log N)\$</span> time-complexity operation.  This is done twice, once for the <code>a</code> dictionary and once for the <code>b</code> dictionary, but that doesn't change the complexity.</p>

<p>After sorting, the two smallest entries are retrieved.  You are taking a <span class="math-container">\$O(N \log N)\$</span> time complexity hit to extract the smallest and the second smallest entries.</p>

<p>Finding the minimum is a <span class="math-container">\$O(N)\$</span> operation:</p>

<pre><code>    a1 = min(a, key=a.get)
    b1 = min(b, key=b.get)
</code></pre>

<p>Finding the second smallest can also be done in <span class="math-container">\$O(N)\$</span> time:</p>

<pre><code>    a2 = min((k for k in a if k != a1), key=a.get)
    b2 = min((k for k in b if k != b1), key=b.get)
</code></pre>

<p>The above is doing two <span class="math-container">\$O(N)\$</span> passes over each list.  You can also find the lowest two values in a list using only a single pass by iterating over the list and maintaining the smallest and second smallest values (and their keys).  Implementation left to student.</p>

<p>Finally, you can use the Python <a href="https://docs.python.org/2.7/library/heapq.html#heapq.nsmallest" rel="nofollow noreferrer"><code>heapq.nsmallest</code></a> function.</p>

<pre><code>  a1, a2 = heapq.nsmallest(2, a, key=a.get)
  b1, b2 = heapq.nsmallest(2, b, key=b.get)
</code></pre>
    </div>