<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Errors in the code</h2>

<p>This piece</p>

<pre><code>array(i) &gt; array(pivot) .and. i &lt;= length
</code></pre>

<p>is not valid code. If <code>i &gt; length</code> you will get an out of bounds access with <code>array(i)</code>.
If you rewrite it as</p>

<pre><code>i &lt;= length .and. array(i) &gt; array(pivot)
</code></pre>

<p>it is still wrong, because there is no short circuiting in Fortran. Or to be more precise: Fortran operators are neither short-circuit nor eager. The language specification allows the compiler to select the method for optimization. In your case the compiler reorders and short circuits apparently.
The only way to write it reliably correctly is unfortunately:</p>

<pre><code>if (i &lt;= length) then
    if (array(i) &gt; array(pivot)) then
        ...
</code></pre>

<hr>

<p>A declaration with a number literal like <code>real(kind=8)</code> is not portable. You might think, that it is 8 bytes and/or double precision, but the actual integer value for different kinds is implementation dependent. It just happens to be the case, that <code>gfortran</code> and <code>ifort</code> use the kind value <code>8</code> to denote double precision, but on another compiler this might be wrong.
You should always use</p>

<pre><code>integer, parameter :: dp = selected_real_kind(15, 307)
</code></pre>

<p>if you want to have a certain range and precision or</p>

<pre><code>use, intrinsic :: iso_fortran_env, only: real64
</code></pre>

<p>if you want to have a float with 8 bytes.
(Of course these both will be the same on most architectures today.)</p>

<hr>

<p>There is no <code>implicit none</code> in the module. Strictly speaking this is not an error and you declared all variables correctly, but code without <code>implicit none</code> should be considered faulty.</p>

<h2>Major Code improvements</h2>

<p>You should always add one of <code>intent(in), intent(out), intent(inout)</code> to the dummy arguments of your procedures.</p>

<hr>

<p><s>
Fortran arrays can be declared with arbitrary numerical indices. You implicitly assumed in your code, that they start at 1 (which is the default).
If you want your routine to work with differently indexed arrays, it is necessary to query the upper and lower bounds.</s></p>

<pre><code>do i = lbound(array, dim=1), ubound(array, dim=1)
</code></pre>

<p>This makes it also explicit when you really mean the size, and when the bounds.</p>

<p></p>

<p>What I initially wrote is wrong. If you use assumed-shape arrays, the dummy argument becomes again 1-indexed by default.
Had to learn that myself the hard way. Sorry. :-/</p>

<hr>

<p>I agree you with you that these &lt;40 lines don't require comments for the most parts, but you can write it more readable without comments, by defining a <code>swap</code> subroutine. This would also reduce the clutter of local variables.</p>

<p>If you define a <code>get_pivot</code> function, it will be easy to change to different pivoting strategies.</p>

<hr>

<p>You have superfluous assignments to <code>length</code> in your code.
IMHO you don't need this variable anyway, because you can insert <code>size(array)</code> at every appearance. Any decent compiler will do common-subexpression-elimination on these calls.</p>

<hr>

<p>Where possible I would use <code>pure</code> and <code>elemental</code> on your procedures.
They are amazing. ;-)</p>

<h2>Architecture</h2>

<p>I would always make all names in a module <code>private</code> and export explicitly with <code>public</code>. On the other hand I would only import used names.</p>

<hr>

<p>In the long run, you want to have a second argument where one can pass a <code>pure logical</code> function that compares two elements. Doing so, the user can sort according to his/her constraints.</p>

<h2>Formatting</h2>

<p>Thank you for writing <code>Fortran</code> and not <code>FORTRAN</code> code.
If you don't scream at people it is much easier to read your code. ;-)</p>

<hr>

<p>Of course this is opinion based so, whatever I say, stick to the style of your environment. <strong>But</strong> for example the whitespace around your binary operators was not consistent. An indentation of two spaces is IMHO too short.</p>

<hr>

<p>I assume that you are from science and you and your peers use python. In this case it is quite easy to stick to the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">python formatting guidelines</a> in Fortran.</p>

<h2>Minor Code improvements</h2>

<p>I agree that the code mostly does not require comments,
but at least public functions of a module should get a docstring on how to use them.</p>

<hr>

<p><code>size</code> in the program can be made constant.</p>

<hr>

<p>The upper and lower bound in array slices can be ommited <code>A(lbound(A, 1) : 5) == A(: 5)</code></p>

<hr>

<p>I would not use <code>p</code> as program name. If you do so, you can't use it as variable name anymore.</p>

<hr>

<p>There is <code>random_number</code> to generate an array of real numbers.</p>

<h2>Possible improved version</h2>

<pre><code>module sort
    implicit none
    private
    public :: dp, qsort
    integer, parameter :: dp = selected_real_kind(15, 307)

    abstract interface
        logical pure function compare_t(a, b)
            import :: dp
            real(dp), intent(in) :: a, b
        end function
    end interface

contains

    !&gt; @brief
    !&gt;      Sort array inplace according to comparison function comp.
    !&gt;
    !&gt; @details
    !&gt; The comparison function has to be a pure, logical function
    !&gt; that compares two elements of array in a strict partial order.
    !&gt; That means equality has to evaluate to false.
    pure recursive subroutine qsort(array, comp)
        real(kind=dp), intent(inout) :: array(:)
        procedure(compare_t) :: comp

        integer :: pivot, i, j

        i = 0
        j = 0
        pivot = get_pivot(array)
        if (size(array) &gt; 1) then
            i = lbound(array, dim=1)
            j = ubound(array, dim=1)
            do while (i &lt;= j)
                do while (comp(array(i), array(pivot)))
                    i = i + 1
                end do
                do while (comp(array(pivot), array(j)))
                    j = j - 1
                end do
                if (i &gt;= j) exit
                call swap(array(i), array(j))
                i = i + 1
                j = j - 1
            end do
            call swap(array(pivot), array(j))
            call qsort(array(: j - 1), comp)
            call qsort(array(j + 1 : ), comp)
        end if
    end subroutine qsort

    pure subroutine swap(a, b)
        real(dp), intent(inout) :: a, b
        real(dp) :: temp
        temp = a
        a = b
        b = temp
    end subroutine

    pure function get_pivot(array) result(res)
        real(dp), intent(in) :: array(:)
        integer :: res
        res = lbound(array, dim=1)
    end function
  end module sort


program test_qsort_procedures
    use sort, only: dp, qsort
    implicit none
    integer, parameter :: size_ = 100
    real(kind=dp), allocatable :: b6(:)

    allocate(b6(size_))
    call random_number(b6)

    print *, "unsorted: ", b6
    call qsort(b6, increasing)
    print *,"increasing a= ", b6
    call qsort(b6, decreasing)
    print *,"decreasing a= ", b6

    contains

    logical pure function increasing(a, b)
        real(dp), intent(in) :: a, b
        increasing = a &lt; b
    end function

    logical pure function decreasing(a, b)
        real(dp), intent(in) :: a, b
        decreasing = a &gt; b
    end function
end program test_qsort_procedures
</code></pre>
    </div>