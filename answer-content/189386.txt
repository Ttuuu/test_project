<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Provide a type for your <code>full_name</code> argument and a more specific type than <code>Object</code> for the return type:</p>

<pre><code>interface SplitNameData {  // Does anybody have a better interface name?
  FirstName: string;
  MiddleName: string;
  LastName: string;
}

ProcessFullName(full_name: string): SplitNameData {
  const Obj: SplitNameData = {
    firstName: '',
    middleName: '',
    lastName: ''
  };
</code></pre></li>
<li><p>I think it would be cleaner to use <code>null</code> as a marker for non-existing names instead of the empty string even though the empty is probably not a valid name anywhere in the world.</p></li>
<li><p>What is your function supposed to do with names having more than three parts?</p></li>
<li><p>Consider using <code>const</code> wherever possible and <code>let</code> in all other cases. I recommend to never use <code>var</code>. â‡’ <code>const Obj</code>, <code>const splitName</code>.</p></li>
<li><p>Use a more descriptive name for <code>Obj</code>, e.g. <code>splitNameData</code> or <code>separatedNames</code>. In this case, I would recommend to rename <code>splitName</code> to something like <code>nameParts</code> as well to avoid confusion.</p></li>
<li><p>Use a consistent naming scheme: <code>fullName</code> instead of <code>full_name</code>, <code>firstName</code> instead of <code>FirstName</code> and so on.</p></li>
<li><p>Use array destructuring:</p>

<pre><code>case 2:
  [Obj.FirstName, Obj.LastName] = splitName;
  break;
case 3:
  [Obj.FirstName, Obj.MiddleName, Obj.LastName] = splitName;
  break;
</code></pre></li>
<li><p>ad performance: for this computationally simple task, any optimization would be <a href="https://softwareengineering.stackexchange.com/questions/80084/is-premature-optimization-really-the-root-of-all-evil">premature optimization</a> in my opinion.</p></li>
<li><p>Alternative (maybe cleaner?) solution using <a href="http://exploringjs.com/es2018-es2019/ch_regexp-named-capture-groups.html" rel="nofollow noreferrer">named RegExp capture groups</a>:</p>

<pre><code>const NAME_PATTERN = /^(?&lt;firstName&gt;[^ ]*) ((?&lt;middleName&gt;[^ ]*) )?(?&lt;lastName&gt;[^ ]*)$/;

const emptyNameData = {
  firstName: '', middleName: '', lastName: ''
};

const {
  groups: {
    firstName,
    middleName = '',
    lastName
  } = emptyNameData
} = NAME_PATTERN.exec(fullName) || {};
alert([firstName, middleName, lastName]);
</code></pre>

<p>I am not very keen on the <code>|| {}</code> part, maybe an if-else checking the match object for <code>null</code> would be a better solution.</p></li>
</ul>
    </div>