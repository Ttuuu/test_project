<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've been thinking about this question literally for weeks.</p>

<p>It always seemed like this implementation suffers from "hammer syndrome" - if you have a really good hammer, you want to think every problem is a nail. Functional coding is a great tool for many things, but in this case, it has a problem.</p>

<p>The reason why algorithms use <em>mutable</em> rather than immutable heaps is asymptotic performance. In a heap sort, a mutable heap gives you log n time per element, but an immutable heap would have n time per element (because you have to copy the entire heap of size n in addition to doing the re-heap with time log n).</p>

<p>Similarly, a k-way merge implemented with immutable heaps will run in nk time, rather than n log k time. That's fine if k is small but even with modest sized k, will become a significant performance hit.</p>

<p>It would have been helpful if test cases had been included so that reviewers could take a look at performance numbers with various possible changes.</p>

<p>The code itself looks fine to me. The fact that nobody wrote a review could mean that most people who read the question came to the same conclusion. As an academic exercise, I say, good job. In the long run, I doubt such an algorithm is genuinely useful except in truly unusual circumstances</p>
    </div>