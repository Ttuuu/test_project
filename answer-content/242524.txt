<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Proxies are weird and slow. Their main <em>useful</em> purpose in real code is when a bad script <em>that you don't have control over</em> is calling <em>your</em> code in an undesirable manner, and you need to intercept property access / function calls / etc so as to run custom code rather than simply returning the value or calling the function. (I suppose proxies are also arguably useful in esoteric Javascript trivia quizzes.)</p>

<p>But they're there as a <em>workaround</em> for a bad situation, not as a solution-of-choice. Their behavior is somewhat unintuitive and hard-to-understand at a glance.</p>

<p>If you want to include both your custom methods <em>and</em> built-in methods, consider creating a class which has your custom methods, and then iterate over the built-in methods and assign them as methods to the class too:</p>

<pre><code>class CustomCollection {
  constructor(selector, root = document) {
    const elements = root.querySelectorAll(selector);
    Object.assign(this, elements);
    this.length = elements.length;
  }
  _iterate(callback, ...possibleArgs) {
    for (let i = 0; i &lt; this.length; i++) {
      callback(this[i]);
    }
    return this;
  }
  toggleClass(className) {
    this._iterate(el =&gt; el.classList.toggle(className));
  }
  // etc - other custom methods that reference _iterate
}
// Assign methods on Element.prototype to CustomCollection.prototype:
const descriptors = Object.getOwnPropertyDescriptors(Element.prototype);
for (const [key, { value }] of Object.entries(descriptors)) {
  // Only assign plain functions (don't invoke getters)
  if (typeof value !== 'function') {
    continue;
  }
  CustomCollection.prototype[key] = function(...args) {
    for (let i = 0; i &lt; this.length; i++) {
      value.apply(this[i], args);
    }
    return this;
  };
}
</code></pre>

<p>A class is arguably the right tool for the job here because you want to create collections of persistent elements (data) associated with methods which operate on those elements. So, don't be afraid of using <code>this</code> - in a class method, it'll refer to the current instance, which is just what you'll need in order to reference the elements on the instance.</p>

<p>It's quite possible to write this without classes and <code>this</code>, but I think the class approach is most understandable at a glance.</p>

<p>Other notes:</p>

<p>In order to emulate the iteration over collections (and like jQuery does it), I assigned the elements of the collection to the instance in the constructor, as you can see above. Since all the methods need to iterate over the selected elements, call a function whose first argument is the element, and finally return the collection itself (so that the methods are chainable), I made a <code>_iterate</code> method for that.</p>

<p>Regarding</p>

<pre><code>addClass: (el, classNames) =&gt; {
  classNames = !(classNames.constructor instanceof Array) 
    ? [classNames] : classNames;
  classNames.forEach(cn =&gt; el.classList.add(cn));
},
</code></pre>

<p>This logic is incorrect. To check whether an expression is an array, the standard method to use is <code>Array.isArray</code>:</p>

<pre><code>const classNamesArr = Array.isArray(classNames) ? classNames : [classNames];
</code></pre>

<p>The constructor property will be a function, which will never be an instance of an array:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const something = [];
console.log(something.constructor instanceof Array);</code></pre>
</div>
</div>


<p>Also, regarding the above, It's good to avoid reassigning variables when not necessary - code is more readable when you know, at a particular point where a variable is declared, the variable will always contain that value where it's declared. (see linting rule <a href="https://eslint.org/docs/rules/no-param-reassign" rel="nofollow noreferrer">no-param-reassign</a>) That's why I declared the <code>classNamesArr</code> rather than reassigning the <code>classNames</code> parameter.</p>

<p>You have</p>

<pre><code>span.appendChild(document.createTextNode(" HI, i'm added tot this &lt;p&gt;"));
</code></pre>

<p>When you want to set the text content of an element which starts out empty, it's less verbose to simply assign to the <code>textContent</code> property:</p>

<pre><code>span.textContent = " HI, i'm added tot this &lt;p&gt;";
</code></pre>

<p>Live snippet:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const $ = (() =&gt; {
  // Create a persistent CustomCollection class in this closure:
  class CustomCollection {
    constructor(selector, root = document, elements = root.querySelectorAll(selector)) {
      Object.assign(this, elements);
      this.length = elements.length;
    }
    _iterate(callback, ...possibleArgs) {
      for (let i = 0; i &lt; this.length; i++) {
        callback(this[i]);
      }
      return this;
    }
    toggleClass(className) {
      this._iterate(el =&gt; el.classList.toggle(className));
    }
    addClass(classNames) {
      const classNamesArr = Array.isArray(classNames) ? classNames : [classNames];
      return this._iterate((el) =&gt; {
        classNamesArr.forEach(cn =&gt; el.classList.add(cn));
      });
    }
    removeClass(classNames) {
      const classNamesArr = Array.isArray(classNames) ? classNames : [classNames];
      return this._iterate((el) =&gt; {
        classNamesArr.forEach(cn =&gt; el.classList.delete(cn));
      });
    }
    attr(key, value) {
      return this._iterate(el =&gt; el.setAttribute(key, value));
    }
    text(value) {
      return this._iterate(el =&gt; el.textContent = value);
    }
    toggleAttr(key, value) {
      return this._iterate((el) =&gt; {
        el[el.hasAttribute(key) ? 'removeAttribute' : 'setAttribute'](key, value);
      });
    }
    each(callback) {
      return this._iterate(callback)
    }
    // duplicate method with new name - kinda weird
    forEach(callback) {
      return this._iterate(callback)
    }
    get first() {
      return this[0];
    }
  }
  // Assign functions on Element.prototype to CustomCollection.prototype:
  const descriptors = Object.getOwnPropertyDescriptors(Element.prototype);
  for (const [key, { value }] of Object.entries(descriptors)) {
    // Only assign plain functions (don't invoke getters)
    if (typeof value !== 'function') {
      continue;
    }
    CustomCollection.prototype[key] = function(...args) {
      for (let i = 0; i &lt; this.length; i++) {
        value.apply(this[i], args);
      }
      return this;
    };
  }
  return (...args) =&gt; new CustomCollection(...args);
})();


if (document.documentMode) {
  alert("Internet explorer is not supported, sorry");
}
const log = (...txt) =&gt; {
  const logElem = $("#log")[0];
  logElem.textContent += txt.join("\n") + "\n";
  logElem.scrollTop = logElem.scrollHeight;
};
const createSpan = () =&gt; {
  const span = document.createElement("span");
  span.textContent = " HI, i'm added tot this &lt;p&gt;";
  return span;
}
// native forEach
$("p[data-addtxt]").forEach(el =&gt; el.appendChild(createSpan()));

// extensions each/text/toggleClass
$("span")
  .each(el =&gt; el.style.backgroundColor = "#eee")
  .text(" --- backgroundColor added from $([...]).each")
  .toggleClass("green");

document.addEventListener("click", evt =&gt; {
  const origin = evt.target;

  if (origin.nodeName === "BUTTON") {
    if (origin.id == "nothing") {
      // extension toggleAttr
      $("p").toggleAttr("data-nada", "Nothing");
      log("Toggled data-nada");
    }
    if (origin.id === "blue") {
      // native setAttribute
      const isBlue = origin.style.color === "blue";
      $("[data-maybeblue]").setAttribute("style", isBlue ? "color:back" : "color:blue");
      origin.textContent = isBlue ? "Make me blue" : "Make me black";
      log(`it's ${isBlue ? "black" : "blue"}`);
    }
    if (!origin.id) {
      // extension toggleClass
      $("p").toggleClass("red"); // extension toggleClass
      log(`Toggled color by class`);
      origin.textContent = `Toggle all &lt;p&gt; ${
            $("p").first.classList.contains("red") ? "black" : "red"}`;
    }
  }
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  font: 12px/15px normal verdana, arial;
  margin: 0.5rem;
}

.red {
  color: red;
}

.green {
  color: green;
}

[data-nada]:before {
  content: attr(data-nada)' ';
  color: green;
  font-weight: bold;
}

#log {
  max-height: 200px;
  overflow: auto;
}

button {
  margin: 0.4rem 0;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;p&gt;Hi&lt;/p&gt;
&lt;p&gt;There&lt;/p&gt;
&lt;p&gt;How are you?&lt;/p&gt;
&lt;p data-addtxt&gt;text1&lt;/p&gt;
&lt;p data-addtxt&gt;text2&lt;/p&gt;
&lt;button&gt;Toggle all &amp;lt;p&gt; red&lt;/button&gt; (extension toggleClass)&lt;br&gt;
&lt;button id="nothing"&gt;Toggle all &amp;lt;p&gt; attribute&lt;/button&gt; (extension toggleAttr)&lt;br&gt;
&lt;button id="blue" data-maybeblue&gt;Make me blue&lt;/button&gt; (native setAttribute)
&lt;pre id="log" data-maybeblue&gt;&lt;/pre&gt;</code></pre>
</div>
</div>

    </div>