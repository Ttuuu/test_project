<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>welcome to code review!</p>

<p>The first thing I want to do, is to put the code into a function. This separates it from anything else you might run, and allows you more control. I've used the name <code>quadratic_solver</code> and instead of taking input(), it now takes three arguments which are the coefficients. I've also added a docstring which briefly explains the function's purpose. </p>

<p>My German's not very good so I've just left your comments in; apologies if they're now incorrect. As per PEP8 (python's style guide), I've put your import before the function at the start of the file.</p>

<pre class="lang-py prettyprint-override"><code>import time


def quadratic_solver(a, b, c):
    """
    Solves quadratic equations of the form ax**2 + bx + c
    """

    print("ax^2+bx+c ausrechen UwU, Bitte Achte!!! Bei Kommazahlen . benutzen, nicht , Beispiel: 0.5 0.7 1.6")

...

</code></pre>

<p>Now, if you want to check the type of your arguments you can do a simple:</p>

<p><code>type(val) is int</code> or <code>type(val) is str</code> for example. </p>

<p>To loop over several values we can use a generator. Here, we loop over all values in a list <code>[a, b, c]</code> and ensure they are NOT all ints:</p>

<pre class="lang-py prettyprint-override"><code>if not all(type(coeff) is int for coeff in [a, b, c]):
</code></pre>

<p>I'm not 100% sure why you're checking the type but perhaps your inputs are delicate in some way.</p>

<p>The rest of the code is fairly unchanged. I have however removed a lot of the casting to floats and strings.</p>

<p>If you want to concatenate strings with variables, you can use an fstring. This is of the form:</p>

<pre class="lang-py prettyprint-override"><code>print(f"Nullstelle1= {result1}")
</code></pre>

<p>Where any variables are given in <code>{}</code> and an f at the start of the string denotes to put the variable inside the string <em>as a string</em>.</p>

<p>fstrings can also contain code, so I've used a ternary operator instead of your if else statement:</p>

<pre class="lang-py prettyprint-override"><code>print(f"Nach {'oben' if a &gt; 0 else 'unten'} geöffnete Funktion")
</code></pre>

<p>I've eliminated a few extra variables and brackets too, just for neatness. I'd recommend changing your variable names perhaps to something clearer, and adding a few comments to show what's going on.</p>

<p>Putting this all together, we get:</p>

<pre class="lang-py prettyprint-override"><code>import time


def quadratic_solver(a, b, c):
    """
    Solves quadratic equations of the form ax**2 + bx + c
    """

    print("ax^2+bx+c ausrechen UwU, Bitte Achte!!! Bei Kommazahlen . benutzen, nicht , Beispiel: 0.5 0.7 1.6")

    if not all(type(val) is int for val in [a, b, c]):
        print("doing some math")

        numer = b * b - 4 * a * c
        if numer &gt; 0:
            q = numer ** (1 / 2)

            result1 = (-b + q) / (2 * a)
            result2 = (-b - q) / (2 * a)

            print(f"Nullstelle1= {result1}")
            print(f"Nullstelle2= {result2}")

            abc = -b / (2 * a)
            moo = (4 * a * c - b ** 2) / (4 * a)

            print(f"Scheitelpunkt: ({abc}|{moo})")

            print(f"Nach {'oben' if a &gt; 0 else 'unten'} geöffnete Funktion")
            print(f"Schnittpunkt mit der Y-Achse ist {c}")

        else:
            print("sorry, geht nicht da eine negative zahl unter der wurzel sein würde")
            time.sleep(3)
    else:
        print("nur Zahlen bitte")

</code></pre>

<p>Finally, to call your function, you can now put the following:</p>

<pre class="lang-py prettyprint-override"><code>if __name__ == '__main__':
    quadratic_solver(1.0, 2.0, 3.0)

</code></pre>

<p>Wrapping the function in the <code>if __name__ == '__main__':</code> ensures the function is being run from the right place and not externally. <code>1.0</code>, <code>2.0</code> and <code>3.0</code> are just some example coefficients.</p>

<p>I would also consider removing the <code>time.sleep(3)</code>; what is it for?</p>

<p>EDIT:</p>

<p>For the type checking, per @AlexV's comment, if you're checking an input is of a valid type, it's better to check it IS that type, rather than ISN'T another type. So the condition would actually become:</p>

<pre class="lang-py prettyprint-override"><code>if all(type(coeff) is float for coeff in [a, b, c]):
</code></pre>

<p>You could even use Python's new type hinting if you like:</p>

<pre class="lang-py prettyprint-override"><code>def quadratic_solver(a: float, b: float, c: float):
    ...

<span class="math-container">```</span>
</code></pre>
    </div>