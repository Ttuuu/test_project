<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I ended up writing a builder for the test. The builder made the unit test a lot more readable and maintainable. I am not exactly where I wanted to get, but I am close. Find below the the test with builder. </p>

<pre><code>class CreatorResponderBuilder extends TestCase
{
    private $validator;
    private $repositoryFactory;
    private $httpResponseFactory;

    public static function getInstance(): CreatorResponderBuilder
    {
        return new self();
    }

    public function __construct()
    {
        $this-&gt;validator = $this-&gt;createMock(ValidatorInterface::class);
        $this-&gt;repositoryFactory = $this-&gt;createMock(
            RepositoryFactoryInterface::class
        );
        $this-&gt;httpResponseFactory = $this-&gt;createMock(
            HttpResponseFactoryInterface::class
        );


    }

    public function withValidValidatorResponse() : self
    {
        $validatorResponse = new ValidatorResponse(true, []);

        $this-&gt;validator-&gt;method('validate')
            -&gt;willReturn($validatorResponse);

        $this-&gt;withHttpResponseFactoryForValidResponse();

        return $this;
    }

    private function withHttpResponseFactoryForValidResponse(): void
    {
        $this-&gt;httpResponseFactory-&gt;method('create')
            -&gt;willReturn(new SimpleHttpResponse(200, 'Test content.'));

    }

    public function withInvalidValidatorResponse(): self
    {
        $validatorResponse = new ValidatorResponse(false, ['An error message.']);

        $this-&gt;validator-&gt;method('validate')
            -&gt;willReturn($validatorResponse);

        $this-&gt;withHttpResponseFactoryForInvalidResponse();

        return $this;
    }

    private function withHttpResponseFactoryForInvalidResponse(): void
    {
        $this-&gt;httpResponseFactory-&gt;method('create')
            -&gt;willReturn(new SimpleHttpResponse(422, 'An error message.'));
    }

    public function withRepositoryFactory() : self
    {
        $this-&gt;repositoryFactory-&gt;expects($this-&gt;any())
            -&gt;method('create')
            -&gt;with($this-&gt;isInstanceOf(AbstractEntity::class))
            -&gt;willReturn(
                $this-&gt;createMock(RepositoryInterface::class)
            );

        return $this;
    }

    public function build() : CreatorResponder
    {
        $this-&gt;withValidValidatorResponse()
            -&gt;withRepositoryFactory();

        return new CreatorResponder(
            $this-&gt;validator,
            $this-&gt;repositoryFactory,
            $this-&gt;httpResponseFactory
        );
    }
}
</code></pre>

<p>And the test:</p>

<pre><code>class CreatorResponderTest extends TestCase
{
    public function testPrepareForValidEntity(): void
    {
        $creatorResponder = CreatorResponderBuilder::getInstance()
            -&gt;withValidValidatorResponse()
            -&gt;build();

        $response = $creatorResponder-&gt;prepare(
            $this-&gt;createMock(AbstractEntity::class)
        );

        $this-&gt;assertInstanceOf(SimpleHttpResponseInterface::class, $response);
        $this-&gt;assertEquals(200, $response-&gt;getStatusCode());
        $this-&gt;assertEquals('Test content.', $response-&gt;getContent());
    }

    public function testPrepareForInvalidEntity(): void
    {
        $creatorResponder = CreatorResponderBuilder::getInstance()
            -&gt;withInvalidValidatorResponse()
            -&gt;build();

        $response = $creatorResponder-&gt;prepare(
            $this-&gt;createMock(AbstractEntity::class)
        );

        $this-&gt;assertEquals(422, $response-&gt;getStatusCode());
        $this-&gt;assertEquals('An error message.', $response-&gt;getContent());
    }
}
</code></pre>
    </div>