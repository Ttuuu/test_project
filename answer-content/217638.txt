<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are indeed a few aspects of your code that need work. The following review will use some techniques introduced in Python 3. If you're not yet using Python 3, you definitely should, especially if you do not already have a large code base that only works in Python 2. Python 2 will only be actively maintained <a href="https://www.python.org/dev/peps/pep-0373/" rel="nofollow noreferrer">until 2020</a>.</p>

<h2>Style and Structure</h2>

<p>First, the obligatory note about Python's official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide</a>, often just called PEP8 fort short. You definitely should read and probably also follow it since it is quite a neat collection of general best practices when it comes to code style and structure in Python. I will walk through some aspects in more detail in the following.</p>

<p>The first point I would like to talk about in more detail is documentation. You have shown the will to document your functions. The Style Guide prescribes the preferred way to document functions and the like in the section <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">Documentation Strings</a>. Using <code>"""..."""</code> to document your code has not only the benefit of being style guide compliant, but also helps Python's built-in help function and almost all Python IDEs to pick up this documentation. It would be used like this:</p>

<pre class="lang-py prettyprint-override"><code>def diceRoll(num):
    """Rolls a certain number sided dice"""
    # your other code here
</code></pre>

<p>While we are at names, the <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">official recommendation</a> for variable and function names is <code>snake_case</code>. Most Python programmers tend to follow this recommendation, but as long as you use a consistent style I would accept alternatives. The code piece above could simply be rewritten to follow the style guide as follows:</p>

<pre class="lang-py prettyprint-override"><code>def dice_roll(num):
    """Rolls a certain number sided dice"""
    # your other code here
</code></pre>

<p>Another thing to note about names that is independent of the Style Guide or the language you use, are the names themselves. It might not be an issue with simple code like yours, but later on if the code gets more complex, you will start to hate yourself if the variable and function names hint in one direction and do something else. I would consider <code>chanceOfChest()</code> a good (or bad?) example for this. <code>chanceOfChest()</code> sounds like a function that would return a probability of how likely it is that a player can find a chest. Instead of this, there is a whole event chain scripted inside that decides a) if the player finds a chest at all and b) generates the content of the chest using another function. I think something like <code>generate_chest_event()</code> or the like yould be more appropriate here. That applys to a lot of your other functions as well. The example from above is also quite interesting in that context since it is one of a few functions that break the "do something" name scheme. To be more in line with the rest of the code I would make another edit there:</p>

<pre class="lang-py prettyprint-override"><code>def roll_dice(n_sides):
    """Rolls a certain number sided dice"""
    # your other code here
</code></pre>

<p>After looking at the code on a zoomed in manner for quite a while now, I would like to take a step back with you and look at the greater <strong>structure</strong> of it. For the time being, think about structure more as the (superficial) strucural appearance of the code, not the algorithmic structure. You seem to understand that blank lines can greatly help to visually group code blocks that belong together. Unfortunately, you're not doing a great job when it comes to applying that principal to your code. Let's look at an example from your question:</p>

<pre class="lang-py prettyprint-override"><code>import random

#Rolls a certian number sided dice
def diceRoll(num):

    roll = random.randint(1 , num)

    #print("The roll was: ", roll)

    return roll

############
print("")
############

#Generates a dungeon with a number of rooms based on the dice and roll
def generateDungeon():
    diceRoll(6)

    numberOfRooms = diceRoll(6)

    #print("The roll was: ", roll6)

    if numberOfRooms &gt; 1:
        print("There are ", numberOfRooms, "rooms in this dungeon.")

    else:
        print("There is only 1 room in this dungeon.")

    return numberOfRooms
</code></pre>

<p>Blank lines literally everywhere. Again, PEP8 has <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">guidelines</a> on how to use blank lines to actually support the structure of your code, and not distort it. Applying these guidelines to that snippet together with the aspects mentioned above would lead to code that looks more like the following snippet:</p>

<pre class="lang-py prettyprint-override"><code>import random


def roll_dice(n_sides):
    """Rolls a certain number sided dice"""
    roll = random.randint(1, n_sides)
    #print(f"The roll was {roll}")
    return roll


def choose_random_dungeon_size():
    """Generates a dungeon with a number of rooms based on the dice and roll"""
    number_of_rooms = roll_dice(6)
    if number_of_rooms &gt; 1:
        print(f"There are {number_of_rooms} rooms in this dungeon.")
    else:
        print("There is only 1 room in this dungeon.")
    return number_of_rooms
</code></pre>

<p>Quite a few things<sup>1</sup> have happened while getting there, so let me talk you through it. I massively cut down on blank lines within the functions, and added a few where they are more appropriate. Here "appropriate" means that there are two blank lines between larger pieces of code that work on their own, such as the <code>import</code> section as well as between each of the two functions. I also got rid of the loose pieces like the dice roll whose value was never assigned to a variable and thus had no effect and one of those weird print statements that are found quite often in your code. There is no need for those prints since all they will buy you are a number of blank lines before your code is printing its first output to the console. It neither helps you, a revier nor the Python interpreter to make any more sense of the written code.</p>

<p>Since running has just come up, let me introduce you to another best practice when writing Python code that is supposed to be run as script. There is general distinction between parts of code you would write to use/import as a library such as <code>random</code> (or countless other modules/libraries shipped with Python be default) and parts to be used as scripts that use those library functions to actually "do something". While looking at code written by more experienced Python programmers you will often find a code block saying</p>

<pre class="lang-py prettyprint-override"><code>if __name__ == "__main__":
    main()
</code></pre>

<p>often quite at the bottom or the top of a script. That is the Python way of checking if the current source code is run as a script (in which case <code>__name__ == "__main__"</code> is <code>True</code>) versus someone uses it as a library. In that case the <code>main</code> function would be run. If you were to import the file from another Python file you have written, <code>__name__</code> would be different and <code>main</code> would not be executed, but you could use all the other functions (theoretically also main) at your discretion. See also the <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">Python documentation</a> and <a href="https://stackoverflow.com/a/419185/5682996">this</a> SO post for further reading.</p>

<p>Incorporating all or parts of these changes in your code will greatly improve the code's readability and maintainabilty.</p>

<hr>

<p>Since this answer is alreay quite long, I will stop here and leave comments on the code itself to other members of the community or maybe even future-me.</p>

<hr>

<p><sup>1</sup>I also introduced so called <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="nofollow noreferrer">f-strings</a>, which is as of Python 3.6 the recommended way of producing formatted strings. There is a nice blog post <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">here</a> presenting and comparing all the string formatting techniques available in Python and how to properly use them.</p>
    </div>