<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Speed up the bouncy function</h1>

<p>Since you are timing it, I guess speed if of essence. You are sorting a list twice, while you actually don't need to sort it at all. Instead, just check the digits two at a time and see that the difference never change sign. That is <code>O(n)</code> instead of <code>O(n*log(n))</code> as sorting.</p>

<p>Here's the code. Further changes are highlighted in comments. It only runs slightly faster, 5.8 seconds instead of 8.1 on my machien. My guess is that the reason for the small performance improvement is that Python sorts in C, which makes it comparably fast. But that's just a guess.</p>

<pre><code>import time


# The big change is speeding up this function.
def bouncy(n): # Lower case n
    '''Function determines whether arbitrary number N is a bouncy number.'''
    # We can index directly into the string. No need to make a list of it.
    number = str(n)
    allowed_direction = 0
    # This could probably be done with cool fancy iterators somehow.
    for i in range(0, len(number) - 1):
        direction = cmp(number[i], number[i + 1])
        if allowed_direction == 0:
            allowed_direction = direction
        elif direction != 0 and allowed_direction != direction:
            return True
    return False

def cmp(a, b):
    return (a &gt; b) - (a &lt; b) 

def find():
    # Clearer variable names.
    # The start variable was the same as total, so I removed it.
    total_count = 100 # Start at 100, no bouncy numbers below anyway!
    bouncy_count = 0
    while True:
        if bouncy(total_count):
            bouncy_count += 1
        if bouncy_count / total_count &gt;= 0.99:
            # No need for a break here. We can just return instead.
            return total_count
        total_count += 1

# Cleaner to have this together.
start = time.time()
print(find())
print(time.time() - start)
</code></pre>

<h1>You want it faster?</h1>

<p>This brute force approach of checking each number is simple, but not fast. When you are at 150 000, you know that the next non bouncy number is going to be 155 555. The 5 555 number in between that you are checking is just a waste of CPU cycles.</p>

<p>Implementing this is significantly harder, and is therefore left as an exercise for the reader.</p>

<p><em>Edit: <a href="https://repl.it/repls/AlienatedWobblyImplementation" rel="nofollow noreferrer">Here's</a> a ballpark non solution using the above approach. It runs in 0.15 s on my machine.</em></p>
    </div>