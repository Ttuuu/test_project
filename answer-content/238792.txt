<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of the list-list value in</p>

<blockquote>
  <p><code>var graph = new Dictionary&lt;int, List&lt;List&lt;int&gt;&gt;&gt;();</code></p>
</blockquote>

<p>you could use a named tuple:</p>

<pre><code>var graph = new Dictionary&lt;int, List&lt;(int V, int W)&gt;&gt;();

foreach (var edge in times)
{
  if (!graph.TryGetValue(edge[0], out var temp))
  {
    temp = graph[edge[0]] = new List&lt;(int V, int W)&gt;();
  }

  temp.Add((edge[1], edge[2]));
}
</code></pre>

<p>which will make it more clear what the elements in the graph represent.</p>

<hr>

<blockquote>
<pre><code>    // find a vertex which is not visited
    // and has the lowest distance from all unvisited vertices
    for (int i = 1; i &lt;= N; ++i)
    {
      if (!visited[i] &amp;&amp; _dist[i] &lt; candDist)
      {
        candDist = _dist[i];
        candNode = i;
      }
    }
</code></pre>
</blockquote>

<p>I think the above will be a bottleneck for larger graphs, because you repeatedly check all distances even if the node has been visited. A priority queue would probably be a better choice. </p>

<hr>

<p>This:</p>

<blockquote>
<pre><code>            int ans = 0;
            foreach (var cand in _dist.Values)
            {
                if (cand == int.MaxValue)
                {
                    return -1;
                }
                ans = Math.Max(ans, cand);
            }
            return ans;
</code></pre>
</blockquote>

<p>can be simplified to:</p>

<pre><code>  int ans = _dist.Values.Max();
  return ans == int.MaxValue ? -1 : ans;
</code></pre>

<p>But it may not be a performance improvement because of your early return if you find a <code>int.MaxValue</code>.</p>
    </div>