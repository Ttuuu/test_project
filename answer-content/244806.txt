<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Update 30 June 2020 with a new Updated/Improved Version.</h2>
<p>While maintaining the same concept of using the Single Loop String Triples (SLTS) method, the code has been updated and improved as follows:</p>
<ul>
<li>Variables names are now more readable.</li>
<li>Use of <code>let</code> instead of <code>var</code>.</li>
<li>Removed the counter <code>var ‘j’</code> to track the scale positions. Now computed from the triplet position.</li>
<li>Words are concatenated by the addition assignment operator (+=).</li>
<li>The need to use <code>trim()</code> to trim trailing spaces from concatenated "wordified" numbers is no longer necessary.</li>
<li>Added unit testing code to test the accuracy of the outputs.</li>
<li>Scale names and units, tens arrays are being moved to the top of their scope before code execution; gives a slight performance improvement.</li>
<li>Generating the scales (thousands, millions, etc.) needs one statement.</li>
<li>Generating the words for numbers from 1 to 999 needs only two (2) statements:</li>
</ul>
<pre><code>if (DigitTensUnits&lt;20) WordUnitsTens = UnitsTensTable[DigitTensUnits]; // Word 1 to 99
else WordUnitsTens = EntiesTable[Number(Triplet[1])] + Hyphen +
     UnitsTensTable[Number(Triplet[2])];

WordHundreds = DigitHundreds &gt; 0 ? UnitsTensTable[DigitHundreds] + " Hundred" : ""; // Word 100 to 900
</code></pre>
<ul>
<li>Other improvements suggested in the posts.</li>
</ul>
<p>The code using the SLTS method has been benchmarked against other methods and is found to be of better performance; in some cases is almost over twice faster.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/*********************************************************************
* @function    : NumToWordsUnsignedInt()
* @purpose     : Converts Unsigned Integers to Words (Wordify Number)
*                Using the SLST Method.
* @version     : 0.12
* @author      : Mohsen Alyafei
* @date        : 28 June 2020
* @param       : {number} [integer numeric or string]
* @returns     : {string} The wordified number string
**********************************************************************/

var  UnitsTensTable = ["","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"],
     EntiesTable    = ["","","Twenty","Thirty","Forty","Fifty","Sixty","Seventy","Eighty","Ninety"],
     ScaleTable     = ["","Thousand","Million","Billion","Trillion","Quadrillion","Quintillion","Sextillion","Septillion","Octillion","Nonillion","Decillion"];

function NumToWordsUnsignedInt(NumIn=0) {
if (NumIn===0) return "Zero";
let Result = "";
NumIn += "";
NumIn = "0".repeat(NumIn.length * 2 % 3) + NumIn; // Create shortest string triplets 0 padded

for (let TripletCount = NumIn.length; TripletCount&gt; 0; TripletCount-=3){ // Loop thru all  triplets
     TripletPosition  = (NumIn.length - TripletCount);                   // Triplet position
     let Triplet = NumIn.substring(TripletPosition,TripletPosition+3);   // 1 triplet

     if (Triplet !== "000"){                               // Skip empty triplets
        let Hyphen        = Triplet[2] !== "0" ? "-" : "", // Hyphens only for 21 to 99
            DigitHundreds = Number(Triplet[0]),            // Hundreds digit
            DigitTensUnits= Number(Triplet.substr(1)),     // Lowest digits (01 to 99)
            WordScales    = ScaleTable[TripletCount/3-1];  // Scale Name

        if (DigitTensUnits &lt; 20) WordUnitsTens = UnitsTensTable[DigitTensUnits]; // Word 1- to 99
        else WordUnitsTens = EntiesTable[Number(Triplet[1])] + Hyphen +
             UnitsTensTable[Number(Triplet[2])];
        WordHundreds = DigitHundreds &gt; 0 ? UnitsTensTable[DigitHundreds] + " Hundred" : ""; // Word 100 to 900

        // Join Unit, Tens, Hund, and Scale Name (insert necessary spaces if needed)
        Result   += (Result ? " " : "") + WordHundreds + 
                    (DigitHundreds &amp;&amp; DigitTensUnits ? " " : "") + WordUnitsTens;
        Result   += (Result &amp;&amp; WordScales ? " " : "") + WordScales;
    }
}
return Result;
}

//=========================================
//             Test Code
//=========================================
var r=0; // test tracker
r |= test(0,"Zero");
r |= test(5,"Five");
r |= test(10,"Ten");
r |= test(19,"Nineteen");
r |= test(33,"Thirty-Three");
r |= test(100,"One Hundred");
r |= test(111,"One Hundred Eleven");
r |= test(890,"Eight Hundred Ninety");
r |= test(1234,"One Thousand Two Hundred Thirty-Four");
r |= test(12345,"Twelve Thousand Three Hundred Forty-Five");
r |= test(123456,"One Hundred Twenty-Three Thousand Four Hundred Fifty-Six");
r |= test(1234567,"One Million Two Hundred Thirty-Four Thousand Five Hundred Sixty-Seven");
r |= test(12345678,"Twelve Million Three Hundred Forty-Five Thousand Six Hundred Seventy-Eight");
r |= test(123456789,"One Hundred Twenty-Three Million Four Hundred Fifty-Six Thousand Seven Hundred Eighty-Nine");
r |= test(1234567890,"One Billion Two Hundred Thirty-Four Million Five Hundred Sixty-Seven Thousand Eight Hundred Ninety");
r |= test(1001,"One Thousand One");
r |= test(10001,"Ten Thousand One");
r |= test(100001,"One Hundred Thousand One");
r |= test(1000001,"One Million One");
r |= test(10000001,"Ten Million One");
r |= test(100000001,"One Hundred Million One");
r |= test(12012,"Twelve Thousand Twelve");
r |= test(120012,"One Hundred Twenty Thousand Twelve");
r |= test(1200012,"One Million Two Hundred Thousand Twelve");
r |= test(12000012,"Twelve Million Twelve");
r |= test(120000012,"One Hundred Twenty Million Twelve");
r |= test(75075,"Seventy-Five Thousand Seventy-Five");
r |= test(750075,"Seven Hundred Fifty Thousand Seventy-Five");
r |= test(7500075,"Seven Million Five Hundred Thousand Seventy-Five");
r |= test(75000075,"Seventy-Five Million Seventy-Five");
r |= test(750000075,"Seven Hundred Fifty Million Seventy-Five");
r |= test(1000,"One Thousand");
r |= test(1000000,"One Million");
r |= test(1000000000,"One Billion");
r |= test(1000000000000,"One Trillion");
r |= test("1000000000000000","One Quadrillion");
r |= test("1000000000000000000","One Quintillion");
r |= test("1000000000100100100100","One Sextillion One Hundred Billion One Hundred Million One Hundred Thousand One Hundred");

if (r==0) console.log("All Passed.");

function test(n,should) {
let result = NumToWordsUnsignedInt(n);
if (result !== should) {console.log(`${n} Output   : ${result}\n${n} Should be: ${should}`);return 1;}
}</code></pre>
</div>
</div>

    </div>