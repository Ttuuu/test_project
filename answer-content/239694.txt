<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, nice code. I like the documentation and the type hints. One thing you could do is to follow a style convention for your docstrings; see some examples <a href="https://stackoverflow.com/questions/3898572/what-is-the-standard-python-docstring-format">here</a>.</p>

<p>For me, I think the most glaring thing is that you have all of your tests in a main function. I would separate these tests by type and move them over to individual files, and I would personally use (and recommend) pytest; you could pass in an instance of your class as a fixture. If you end up with a few files of tests, I'd keep these in a separate folder and would create a <code>Makefile</code> for running them.</p>

<p>One thing I noticed is that you specify return type <code>Any</code> for some methods that don't really return anything, such as <code>Attr.set</code>.</p>

<p>You also have some repeated code that you could refactor out; see the methods of <code>Path</code>:</p>

<pre><code>def set(self, obj: Any, value: Any) -&gt; Any:
    """Set the leaf node to the entered value."""
    root_obj = obj
    for node in self._nodes[:-1]:
        obj = node.get(root_obj, obj)
    self._nodes[-1].set(root_obj, obj, value)

def delete(self, obj: Any) -&gt; Any:
    """Delete the leaf node."""
    root_obj = obj
    for node in self._nodes[:-1]:
        obj = node.get(root_obj, obj)
    self._nodes[-1].delete(root_obj, obj)
</code></pre>

<p>which could be something like:</p>

<pre><code>def set(self, root_obj: Any, value: Any) -&gt; None:
    """Set the leaf node to the entered value."""
    self._nodes[-1].set(
        root_obj,
        find_node(root_obj),
        value
    )

def delete(self, root_obj: Any, value: Any) -&gt; None:
    """Delete the leaf node."""
    self._nodes[-1].delete(
        root_obj,
        find_node(root_obj)
    )

def find_node(self, root_obj: Any) -&gt; Any:
    """Traverses tree and finds leaf node"""
    obj = root_obj
    for node in self._nodes[:-1]:
        obj = node.get(root_obj, obj)
    return obj
</code></pre>

<p>Finally, there are some places where I think you would benefit from more whitespace---one example is just before the following in the function <code>_parse</code>.</p>

<pre><code>    if segment:
        yield from _convert(split, segment)
</code></pre>
    </div>