<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You currently run this algorithm in <span class="math-container">\$O(n)\$</span>; while you can't cut that down <em>according to Big-O</em> you can still cut it down. If we look at the actual algorithm, you're doing it in three loops that all loop the entire array, so really it's <span class="math-container">\$O(3n)\$</span>, we can make it <span class="math-container">\$O(n/2)\$</span>.</p>

<p>First, remember that our elements have to be palindromes <em>as far as how many zero vs. non-zero elements there are</em>. If we theoretically replace non-zero elements with <code>1</code>, our array has to be a palindrome.</p>

<p>I.e.: <code>1,2,4,0,0,0,3,4,5</code> replace non-zero's with <code>1</code> =&gt; <code>1,1,1,0,0,0,1,1,1</code> =&gt; <code>isPalindrome</code> = <code>true</code>.</p>

<p>To determine if it's a palindrome we only need to loop <span class="math-container">\$\lceil{n/2}\rceil\$</span> times (the <span class="math-container">\$\lceil\$</span><span class="math-container">\$\rceil\$</span> indicate round-up).</p>

<p>So, that said, let's rewrite this a little:</p>

<pre><code>private static int isHollow(int[] array) {
    int arrayLength = array.length;
    int length = (int)Math.ceil(arrayLength / 2.0);
    int zeros = 0;
    int notZeros = 0;

    for (int i = 0; i &lt; length; i++) {
        int currentElement = array[i] == 0 ? 0 : 1;
        int oppositeElement = array[arrayLength - 1 - i] == 0 ? 0 : 1;
        if (currentElement == 0 &amp;&amp; notZeros &gt; 0) {
            zeros++;
        } else {
            if (zeros &gt; 0 || notZeros == 0) {
                return 0;
            }
            notZeros++;
        }

        if (currentElement == oppositeElement) {
            return 0;
        }
    }

    return zeros &gt;= 3;
}
</code></pre>
    </div>