<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Imports and layout have already been addressed by Bryan Oakley, so I will focus on the remaining two questions:</p>

<ul>
<li>Is the MVC pattern OK this way?</li>
</ul>

<p>Your <code>Controller</code> does not serve any purpose right now. It just passes the value from the <code>View</code> class through to the <code>Model</code>.<br>
The <code>Model</code> on the other hand does all the work like checking what operator to apply and so on. But I think that's OK for now.<br>
What is definitely missing is a reference to <code>View</code> in the <code>Controller</code> class. The task of the Controller is to establish the connection between View and Model and to validate the data which is sent across these two.<br>
As you stated error handling is not part of your implementation yet, but division by zero would be a great example where your <code>Controller</code> definitely needs a reference to the <code>View</code>.<br>
In the current implementation your program would throw a <code>ZeroDivisionError</code> in <code>Model.operator()</code>. You could catch that there, but what next? You have no means to communicate this information back to the view.<br>
The <code>Controller</code> should be responsible to check for a possible division by zero. In your current implementation, <code>Controller.operator()</code> would be the correct place for that. In case of an error you might want to notify the <code>View</code> to display an error message and reset all data in your model.</p>

<p>Furthermore, if your <code>Controller</code> holds a reference to the <code>View</code>, you could also get rid of the Observer pattern. Instead of letting the <code>Model</code> notify its <code>View</code> observer, the <code>digit</code> and <code>operator</code> methods can pass the value of <code>_temp</code> back to the <code>View</code> after calling the corresponding methods on the <code>Model</code>.</p>

<hr>

<ul>
<li>What's the best way to check passed parameters of methods? (see Model.digit(int))</li>
</ul>

<p>I guess that you want to make sure that the method actually received an integer. Your current implementation (taken from the <code>Model</code> class, although validating the inputs coming from the view should be in the responsibility of the <code>Controller</code>) will only detect if <code>None</code> is passed to it. A string, float or any other type will pass through undetected, potentially causing a <code>TypeError</code> in the second to last line:</p>

<pre><code>def digit(self, digit: int):
    if digit is None:
        raise TypeError
    if self._operator == Operator.EQUALS:
        self.reset()
    self._temp = self._temp * 10 + digit
    self.notify_all()
</code></pre>

<p>If you want to validate the type of a parameter beforehand you can da an <code>isinstance</code> check with a suitable superclass. In case of an integer, you would import <code>numbers.Integral</code> and check <code>isinstance(digit, numbers.Integral)</code>. You could also directly check <code>isinstance(digit, int)</code>, but that narrows down the possible data types to actual <code>int</code>, whereas <code>numbers.Integral</code> also allows for other compatible types which are registered as a virtual subclass of itself.<br>
The same goes for other types. If you want to allow for any iterable, you would check against <code>collections.abc.Iterable</code> instead of <code>list</code> or <code>tuple</code> or whatever.</p>

<p>It is worth mentioning that in Python it is a widespread practice to not check the type at all and just put the critical code in a <code>try ... except</code> block and catching a possible <code>TypeError</code>. In your MVC example however this is not feasible since you want to validate the type already in the <code>Controller</code> before passing it to the <code>Model</code> which does the actual computation.</p>
    </div>