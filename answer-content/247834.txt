<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Many of your methods can be simplified (?) with iterators.  Here's a few examples:</p>
<hr>
<pre><code>fn get_distance(&amp;self, vertex: Vertex) -&gt; u32 {
    let mut ret = 0;

    for r in &amp;self.roads {
        if r.vertex == vertex {
            ret = r.distance;
        }
    }

    ret
}
</code></pre>
<p>becomes</p>
<pre><code>fn get_distance(&amp;self, vertex: Vertex) -&gt; u32 {
    self.roads
        .iter()
        .rev()
        .find(|road| road.vertex == vertex)
        .map(|road| road.distance)
        .unwrap_or(0)
}
</code></pre>
<hr>
<pre><code>fn get_road_mut(&amp;mut self, vertex: &amp;Vertex) -&gt; Option&lt;&amp;mut Road&gt; {
    for r in &amp;mut self.roads {
        if r.vertex == *vertex {
            return Some(r);
        }
    }

    None
}
</code></pre>
<p>becomes</p>
<pre><code>fn get_road_mut(&amp;mut self, vertex: &amp;Vertex) -&gt; Option&lt;&amp;mut Road&gt; {
    self.roads
        .iter_mut()
        .find(|road| road.vertex == vertex)
}
</code></pre>
<hr>
<pre><code>fn remove(&amp;mut self, v : &amp;Vertex) {
    let mut index = 0;
    while index &lt; self.unvisited.len() {
        let toremove = &amp;self.unvisited[index];
        if v == toremove {
            self.unvisited.remove(index);
            break
        }
        index += 1;
    }
}
</code></pre>
<p>becomes</p>
<pre><code>fn remove(&amp;mut self, v: &amp;Vertex) {
    let index = self.unvisited.iter().position(|vertex| vertex == v);
    if let Some(index) = index {
        self.unvisited.remove(index);
    }
}
</code></pre>
    </div>