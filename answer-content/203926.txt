<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's some nicely presented code.  I found it very easy to read and understand.</p>
<p>A vector of rows isn't the best structure for a matrix.  The reason is that each vector has its storage elsewhere, so you lose locality of access.  A better structure is a flat array (or vector) of elements, and a knowledge of the <em>stride</em> from one row to the next.  (we can make the stride be the same as the row length, for simplicity; separate members for width and stride can be useful in more advanced scenarios).</p>
<pre><code>    std::vector&lt;int&gt; m;
    std::size_t width;
    
public:
    # Constraint: x * y must not overflow size_t
    matrix(std::size_t x, std::size_t y)
        : m(x*y, 0),
          width{x}
    {
    }
</code></pre>
<p>I've made the dimensions be <code>size_t</code>, as that's the natural type for a size or count in C++.</p>
<p>Now, when we need to index into the array, we need to multiply the <em>y</em> value by <code>width</code> and add <em>x</em>:</p>
<pre><code>int get_value(std::size_t x, std::size_t y)
{
    return m[x + y*width];
}
</code></pre>
<p>We can improve on this, by returning a <em>reference</em> to the value.  Instead of having a "get" and "set" method, we have a single method (for now), and we can give it a more convenient name:</p>
<pre><code>int&amp; operator()(std::size_t x, std::size_t y)
{
    return m[x + y*width];
}
</code></pre>
<p>This means that instead of having to write</p>
<pre><code>mm.assign_value(0,0,1); 
</code></pre>
<p>we can instead use the more intuitive</p>
<pre><code>mm(0,0) = 1;
</code></pre>
<p>Now it's time admit to a slight lie above.  We actually need two methods, because if we have a <code>const</code> matrix, we should be allowed to read, but not write, its elements.  So we also need:</p>
<pre><code>const int&amp; operator()(std::size_t x, std::size_t y) const
{
    return m[x + y*width];
}
</code></pre>
<hr>
<p>For printing, it's helpful to provide an <code>operator&lt;&lt;()</code>.  Mine would look like this:</p>
<pre><code>friend auto&amp; operator&lt;&lt;(std::ostream&amp; os, const matrix&amp; m)
{
    for (std::size_t row = 0;  row &lt; m.height;  ++row) {
        for (std::size_t col = 0;  col &lt; m.width;  ++col) {
            os &lt;&lt; m.m[col + row*m.width] &lt;&lt; ' ';
        }
        os &lt;&lt; '\n';
    }
    return os;
}
</code></pre>
<p>I added a <code>height</code> member to make this easier.</p>
<hr>
<p>With these changes, see how much easier it is to use:</p>
<pre><code>#include &lt;iostream&gt;

int main()
{
    // create a matrix object
    matrix mm(4,6);

    // print elements
    std::cout &lt;&lt; mm;

    // grab a value and print it to console
    std::cout &lt;&lt; mm(0,0) &lt;&lt; std::endl;

    // assign a new value (v = 1) to element (0,0)
    mm(0,0) = 1;

    // re-print the updated matrix
    std::cout &lt;&lt; mm;
}
</code></pre>
<hr>
<p>Here's the full version of <code>matrix</code> after my edits:</p>
<pre><code>#include &lt;ostream&gt;
#include &lt;vector&gt;

class matrix {
    std::vector&lt;int&gt; m;
    std::size_t width;
    std::size_t height;

public:
    matrix(std::size_t x, std::size_t y)
        : m(x*y, 0),
          width{x},
          height{y}
    {
    }

    int&amp; operator()(std::size_t x, std::size_t y)
    {
        return m[x + y*width];
    }

    const int&amp; operator()(std::size_t x, std::size_t y) const
    {
        return m[x + y*width];
    }

    friend auto&amp; operator&lt;&lt;(std::ostream&amp; os, const matrix&amp; m)
    {
        for (std::size_t row = 0;  row &lt; m.height;  ++row) {
            for (std::size_t col = 0;  col &lt; m.width;  ++col) {
                os &lt;&lt; m.m[col + row*m.width] &lt;&lt; ' ';
            }
            os &lt;&lt; '\n';
        }
        return os;
    }
};
</code></pre>
<hr>
<h2>Further exercises</h2>
<ul>
<li>If you actually want a public <code>get_row()</code> (and <code>get_column()</code>), these will need new implementations, perhaps copying values.</li>
<li>Think about providing a <code>get_subarray(x, y, width, height)</code> to give a <em>view</em> of part of the matrix - you'll need new members for <em>offset</em> and <em>stride</em>.  See how we can now more easily implement <code>get_row()</code> and <code>get_column()</code> using this new method.</li>
<li>Make the matrix a template, so we can have elements of whatever type we choose, rather than only <code>int</code>.</li>
</ul>
    </div>