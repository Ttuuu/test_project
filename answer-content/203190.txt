<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>in this portion of your encryption method you can actually stack the using statements so that you don't have to indent them so much</p>

<blockquote>
<pre><code>using (MemoryStream mstream = new MemoryStream())
{
    using (AesCryptoServiceProvider aesProvider = new AesCryptoServiceProvider())
    {
        using (CryptoStream cryptoStream = new CryptoStream(mstream, aesProvider.CreateEncryptor(Key, IV), CryptoStreamMode.Write))
        {
            cryptoStream.Write(bytesToEncrypt, 0, bytesToEncrypt.Length);
        }
    }
    encrypted = mstream.ToArray();
}
</code></pre>
</blockquote>

<p>And you can actually put that assignment to the <code>encrypted</code> variable inside the inner most using statement, it won't harm anything and will allow you to make this stack of usings the least indented possible, which lends itself to easier reading.</p>

<p>Now it looks like this:</p>

<pre><code>using (MemoryStream mstream = new MemoryStream())
using (AesCryptoServiceProvider aesProvider = new AesCryptoServiceProvider())
using (CryptoStream cryptoStream = new CryptoStream(mstream, aesProvider.CreateEncryptor(Key, IV), CryptoStreamMode.Write))
{  
    cryptoStream.Write(bytesToEncrypt, 0, bytesToEncrypt.Length);
    encrypted = mstream.ToArray();
}
</code></pre>

<hr>

<p>and your Decrypt statement can be made a little cleaner as well because we can return directly from the using blocks.</p>

<p>a feature of the using block is that no matter what happens when the scope leaves the using block it will automatically call the dispose method of those objects before scope moves onto something else, kind of like a Try/Finally.</p>

<p>you can also get rid of the Decrypted Variable because we are going to return inside of the using statement.</p>

<p>I also moved the Padding Change into a Property initializer</p>

<p>so instead of this:</p>

<blockquote>
<pre><code>public static byte[] Decrypt(byte[] bytesToDecrypt, string password)
{
    (byte[] messageLengthAs32Bits, byte[] bytesWithIv) = bytesToDecrypt.Shift(4); // get the message length
    (byte[] ivSeed, byte[] encrypted) = bytesWithIv.Shift(16);                    // get the initialization vector

    var length = BitConverter.ToInt32(messageLengthAs32Bits, 0);

    var rfc = new Rfc2898DeriveBytes(password, ivSeed);
    byte[] Key = rfc.GetBytes(16);
    byte[] IV = rfc.GetBytes(16);

    byte[] decrypted;
    using (MemoryStream mStream = new MemoryStream(encrypted))
    {
        using (AesCryptoServiceProvider aesProvider = new AesCryptoServiceProvider())
        {
            aesProvider.Padding = PaddingMode.None;
            using (CryptoStream cryptoStream = new CryptoStream(mStream,aesProvider.CreateDecryptor(Key, IV), CryptoStreamMode.Read))
            {
                cryptoStream.Read(encrypted, 0, length);
            }
        }
        decrypted = mStream.ToArray().Take(length).ToArray();
    }
    return decrypted;
}
</code></pre>
</blockquote>

<p>you get this:</p>

<pre><code>public static byte[] Decrypt(byte[] bytesToDecrypt, string password)
{
    (byte[] messageLengthAs32Bits, byte[] bytesWithIv) = bytesToDecrypt.Shift(4); // get the message length
    (byte[] ivSeed, byte[] encrypted) = bytesWithIv.Shift(16);                    // get the initialization vector

    var length = BitConverter.ToInt32(messageLengthAs32Bits, 0);

    var rfc = new Rfc2898DeriveBytes(password, ivSeed);
    byte[] Key = rfc.GetBytes(16);
    byte[] IV = rfc.GetBytes(16);

    using (MemoryStream mStream = new MemoryStream(encrypted))
    using (AesCryptoServiceProvider aesProvider = new AesCryptoServiceProvider() { Padding = PaddingMode.None })
    using (CryptoStream cryptoStream = new CryptoStream(mStream, aesProvider.CreateDecryptor(Key, IV), CryptoStreamMode.Read))
    {
        cryptoStream.Read(encrypted, 0, length);
        return mStream.ToArray().Take(length).ToArray();
    }
}
</code></pre>

<h3>Kudos:</h3>

<p>I like your Comments on the Message Length and Initialization Vector</p>
    </div>