<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I do not like the code and question itself. If we are to implement a stack, then it needs to be implemented through and through. Using all of the already defined names and methods from <code>list</code> means that nothing is actually being implemented. All that is being done is we have changed the name <code>list</code> to <code>Stack</code>.</p>

<p>To properly implement a stack, you will want to make a Circular Linked List, with nodes (where nodes are defined in a <code>class Nodes</code>).
To make a Circular Linked List, just make a <code>class LinkedList</code> such that <code>self.head</code> and <code>self.tail</code> are defined, and when <code>self.stacksize</code> is full, have:</p>

<pre><code>self.tail.next = self.head
self.head = Node(value, prevNode, nextNode)
</code></pre>

<p>To begin the LinkedList class:</p>

<pre><code>class LinkedList:
  def __init__(self, value=None, stacksize=10):
    self.stacksize = stacksize
    self.tail      = None
    self.head      = None
    self.curIndex  = -1 #Dropping support for negative indexing
    if value is not None:
      self.append(value)
  '''
  TODO METHODS:
  def __eq__(self, other):
  def __str__(self):
  def __iter__(self):
  def isfull(self):
  '''
  def append(self, value):
    ''' append to last inserted node '''
    self.curIndex += 1
    if self.head is None:
      self.head = self.tail = Node(value, None, None)
    elif self.isFull():
      ''' write a method returning self.tail.index == self.stacksize'''
      if self.curIndex == self.stacksize:
         self.curIndex -= self.stacksize
      self.tail.next = Node(value, self.tail, self.head.next)
      self.head = self.tail.next
    else:
      self.tail.next = Node(value, self.tail, None)
    return self.tail
</code></pre>

<p>And then <code>class Node</code>...</p>

<pre><code>class Node:
  def __init__(self, value=None, prev=None, next=None, index=0):
    self.value = value
    self.prev = prev
    self.next = next
    if prev:
      index = prev.index+1
    self.index = index
  '''
  TODO METHODS:
  def __eq__(self, other):
  def __str__(self):
  def __iter__(self):
  '''
</code></pre>
    </div>