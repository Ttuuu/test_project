<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without leaking the better algorithm, I'll highlight one area where this code can be dramatically improved.</p>

<p>You are ignoring a pair of important facts:</p>

<ul>
<li>0 &lt;= <code>len(blocked)</code> &lt;= 200</li>
<li>0 &lt;= <code>blocked[i][j]</code> &lt; <span class="math-container">\$10^6\$</span></li>
</ul>

<p><a href="https://en.wikipedia.org/wiki/Pigeonhole_principle" rel="nofollow noreferrer">Pigeonhole principle</a>: if you have more holes than pigeons, some holes will be empty.  On your grid, you have at least 999800 rows that will be empty, and at least 999800 columns that will be empty.  Using a BFS wave that traverses the grid space can result in taking a lot of steps which can be optimized away.</p>

<pre><code>x_min = min(block[0] for block in blocked)
x_max = max(block[0] for block in blocked)
y_min = min(block[1] for block in blocked)
y_max = max(block[1] for block in blocked)
</code></pre>

<p>The above will quickly determine the bounds of all blocked cells.</p>

<pre><code>                                 :
                                 0
            x_min                :                x_max
          0|0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|0
          -+-------------------------------------------+-
          0|0 1 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0|0 y_min
          0|1 0 1 0 1 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0|0
... 0 ... 0|0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 1 1 1 0|0 ... 0 ...
          0|0 0 1 0 1 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 1|0
          0|0 0 0 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 1 0 1 0|0
          0|0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0|0 y_min
          -+-------------------------------------------+-
          0|0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|0
                                 :
                                 0
                                 :
</code></pre>

<p>If your starting point is to the left of <code>x_min</code>, or above <code>y_min</code>, or to the right of <code>x_max</code>, or below <code>y_max</code>, <strong>and</strong>  your target point is to the left of <code>x_min</code>, or above <code>y_min</code>, or to the right of <code>x_max</code>, or below <code>y_max</code> <strong>then</strong> the path cannot be blocked.  Fast succeed for the trivial cases, verses the wave propagation which might have to create a wavefront from one side of the grid to the other.</p>

<p>But wait!  It is possible for <code>[0,0]</code> and <code>[999999,999999]</code> to both be in <code>blocked</code> which makes the bounding box <code>[[x_min, y_min], [x_max, y_max]]</code> encompass the entire grid.</p>

<p>Again, by the pigeon hole principle, with only 200 blocked grid spots, if <code>x_max - x_min + 1 &gt; 200</code>, there will be a column in between those limits which is completely unblocked.  Similarly, if <code>y_max - y_min + 1 &gt; 200</code>, there will be a row in between those limits which is completely unblocked.  Either one will allow you to subdivide the grid into two (or more) bounding boxes whose sides are less than 200 cells in length.  In the above figure, you could divide the region into two sub regions: one 12 cells wide and the other 5 cells wide.  After partitioning, the left region becomes 12x5 and the right region is 5x4.  If the starting point and the target point are both outside of all bounding boxes, then the path cannot be blocked.</p>

<p>If either, or both, of the path end points are within a <code>blocked</code> bounding box, you can use your BFS wavefront to attempt to escape the bounding box.  If both end points can escape, the path is not blocked.  If both path end points are within the same bounding box, then if the wavefronts meet, then the path is not blocked.  In any case, your BFS wavefront algorithm need only operate in at most a 200x200 grid area, not the entire <span class="math-container">\$10^6 x 10^6\$</span> problem grid.</p>
    </div>