<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Obey PSR coding standards.  As a starting point, use proper indentation and spacing.  Here's a place to begin your research: <a href="https://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">https://www.php-fig.org/psr/psr-2/</a></p></li>
<li><p>If you haven't already, narrow how your incoming submitted data is delivered to your script.  If you expect your user's data to be coming from a form with  <code>method=POST</code>, then use <code>$_POST</code> instead of <code>$_REQUEST</code>.  This will reduce the points of data entry and make your coding intention clearer to future human readers of your script.</p></li>
<li><p>Variable naming is important! If you have incoming data that holds a "phone number", use a variable name that will never lead to confusion.  <code>phone_number</code>, <code>phone</code>, or <code>mobile_phone</code>, etc might be better choices than <code>$numbers</code> which comes from <code>$_REQUEST["number"]</code>. Truth be told, I don't know if the incoming data is a phone numbet, a serial number, or a chemical that makes things <em>numb</em>. What probably concerns me more than the term is the sudden change from singular to plural.  Is this data an array of numbers? I have to assume not based on the script to follow, but then why use a plural variable name.</p></li>
<li><p>I wanted to recommend some investigation into the possibility of using an autoincremented primary id with two unique columns, <a href="https://stackoverflow.com/q/5416548/2943403">https://stackoverflow.com/q/5416548/2943403</a> but there seems to be some debate about stability and suitable environments.  Furthermore, I don't want to make any incorrect assumptions about your coding logic.  Ultimately, I always encourage developers to seek solutions that execute the least number of calls to the database.  If this script can be done by sending one INSERT query and processing the response, that would get a nod from me.</p></li>
<li><p>Because you are hunting for a specific <code>id</code> value and a specific <code>numbers</code> value, write those conditions directly into your SELECT query's WHERE clause.  This with speed up your processing, eliminate your <code>break</code> requirement, and simply make your code more direct / intuitive.</p></li>
<li><p>Since the purpose of your SELECT query is to determine if an id or number exists, you can write your SELECT clause depending on the response quality that you intend to deliver to the end user. 1. If you don't intend to inform the user about which value already exists in the database table, use <code>COUNT(*)</code>. 2. If you are going to explain which value already exists, <code>SELECT id, numbers</code> with a LIMIT of 1.</p></li>
<li><p>Rather than extracting the full result set then feeding it to the <code>foreach()</code>, I recommend fetching as you iterate.  <a href="https://stackoverflow.com/a/12970800/2943403">https://stackoverflow.com/a/12970800/2943403</a> That said, I think your code should only be processing a single row of data at most.</p></li>
<li><p>You could improve your variable naming in your loop.  <code>$k</code> actually represents the "index" of the current row in the result set, so <code>$i</code> would be meaningful, <code>$index</code> would be more so, but best would be to omit the declaration entirely because you never use it in your script.  <code>$v</code> is the current row's data.  I recommend <code>$row</code>.</p></li>
<li><p>Try to avoid using boolean flags like <code>$present</code>.  In most cases, after a bit of careful thought, you can redesign your script to <code>break</code> or <code>continue</code> or conditionally call a custom function as a means to avoid this extra declaration.</p></li>
<li><p>Your INSERT query is not using the prepared statement / named placeholders / binding properly.  <a href="http://php.net/manual/en/pdo.prepare.php" rel="nofollow noreferrer">http://php.net/manual/en/pdo.prepare.php</a>  First, I would the <code>id</code> column is to receive a static <code>NULL</code> value -- you don't need a variable for this, just hardcode it directly into the query.  Second, never write variable values into your prepared statement -- see my link to the pdo manual regarding the proper syntax.</p></li>
<li><p>Finally, never present the raw <code>$e-&gt;getMessage()</code> details to the public.  You may wish to offer generalized feedback but don't give the specifics as a matter of good security practices.</p></li>
</ul>
    </div>