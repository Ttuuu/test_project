<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>
<p>Looks good overall.</p>
<p>The design works perfectly for sorting integers. But in C++ we can potentially sort anything. So why not allow your sorting algorithm to work with any sortable type.</p>
<p>To do this learn templates:</p>
<pre><code> void merge_sort(vector&lt;int&gt; &amp;arr);

 // Change to:

 template&lt;typename T&gt;
 void merge_sort(vector&lt;T&gt;&amp; arr);
</code></pre>
<p>The next thing to think about is that <code>vector&lt;&gt;</code> is not the only thing that can be sorted. There are lots of container types that can be sorted. Normally we don't care about the container type and we abstract the container away and specific what what we want to sort in terms of iterators.</p>
<p>So the next subject to learn are iterarators'. Then you can specify what you want to sort in terms of the beginning and end of a range.</p>
<pre><code>template&lt;typename I&gt;
void merge_sort(I begin, I end);
</code></pre>
<p>The next thing you should think about is the memory requirements your algorithm uses. Currently your algorithm uses 2 times the current size of the array you want to sort (in addition the vector). You can change this so you only use 1 times the current size of the vector.</p>
<p>To achieve this you want to allocate the memory once outside the recursive sort function then pass in this temporary memory into the merge sort.</p>
<pre><code>// The wrapper
template&lt;typename I&gt;
void merge_sort(I begin, I end)

    // Create a single buffer are to be be re-used.
    std::vector&lt;int&gt;  tmpData(std::distance(begin, end));

    merge_sort_with_buffer(begin, end, std::begin(tmpData) std::end(tmpData));
}

template&lt;typename I1, template I2&gt;
void merge_sort_with_buffer(I1 b , I1 e, I2 tb, I2 te)
{
    std::size_t s = std::distance(begin, end);

    if (s &lt; 2) {
        return;
    }

    I1 m   = std::next(begin, s/2);
    I2 tm  = std::next(tBegin, s/2);

    merge_sort_with_buffer(b, m, tb, tm);
    merge_sort_with_buffer(m, e, tm, te);
    merge(tb, tm, te, b);
}

template&lt;typename I2, template I1&gt;
void merge(I2 tb, I2 tm, I2 te, I1 dst)
{
    // copy tb-&gt;tm
    // copy tm-&gt;te
    //
    // To the destination
}
</code></pre>
<h2>Code Review</h2>
<p>Not a fan of bad comments:</p>
<pre><code>#include &lt;vector&gt; // will use the vector class  to make things like list slicing very easy
</code></pre>
<p>Do you use slicing?</p>
<hr>
<p>Stop doing this:</p>
<pre><code>using namespace std;
</code></pre>
<p>It might be useful in books where space is limited. But in real code it actually causes problems. I recomend you stop using it because it becomes a habit. This is a bad one. When you have a bad habit you will just use it without thinking and accidentally cause on f the problems.</p>
<p>See: <a href="https://stackoverflow.com/q/1452721/14065">Why is “using namespace std;” considered bad practice?</a> Personally I find the second answer the <a href="https://stackoverflow.com/a/1453605/14065">best</a>.</p>
<hr>
<p>In C++ it is more normal to put the <code>&amp;</code> with the type in the declaration.</p>
<pre><code>void merge_sort(vector&lt;int&gt; &amp;arr);

// Like this:

void merge_sort(vector&lt;int&gt;&amp; arr);
</code></pre>
<p>Note: This is the opposite of what is common in C.</p>
<hr>
<p>Please always add the curly craces '{}'</p>
<pre><code>    for (int i: my_vector)
        cout &lt;&lt; i &lt;&lt; ',';

    // Like this:

    for (int i: my_vector) {
        cout &lt;&lt; i &lt;&lt; ',';
    }
</code></pre>
<p>The trouble is people still make silly macros that are multiple lines. Not using the braces can put you in funny situations where only part of your code is executed by the loop when you least expect it.</p>
<p>More importantly to me it makes it much simpler to read.</p>
<hr>
<p>In C++ the last return in <code>main()</code> is not needed.</p>
<pre><code>    return 0;
</code></pre>
<p>If you don't provide one the compiler automatically adds a <code>return 0</code> at the end of main.</p>
<p>It has been common practice to not include a <code>return 0</code> if main does not ever return anything else. So if I see a <code>return 0</code> at the end I start looking for other error detection code that would return another value.</p>
<hr>
<p>This is a subtle one:</p>
<pre><code>        if (left[j] &lt; right[k]) {
</code></pre>
<p>If you use the less here then if they are equal you will choose the one from the right. Keep that in mind.</p>
<p>There is an important mathematical principle around sorting called "Stability" (when sorting). If items that are equal retain there original relative order the sort is considered stable otherwise it is not.</p>
<p>If you choose from the right when the items are equal your algorithm is not stable. So by using <code>&lt;=</code> you automatically make your algorithm stable.</p>
<pre><code>        if (left[j] &lt;= right[k]) {
</code></pre>
<hr>
<p>Note this is a copy operation:</p>
<pre><code>        results[i] = left[j];
</code></pre>
<p>Now for integers this makes absolutely no different. But when you make this work for other types this mean copying an object. This can be expensive so we would prefer to use move rather than copy.</p>
<pre><code>        results[i] = std::move(left[j]);
</code></pre>
<hr>
<p>Sure these work.</p>
<pre><code>    while (j &lt; L_size) {
        results[i] = left[j];
        j++; i++;
    }
    while (k &lt; R_size) {
        results[i] = right[k];
        k++; i++;
    }
</code></pre>
<p>But much easier to use standard algorithms</p>
<pre><code>    std::copy(&amp;left[j],  &amp;left[L_size],  &amp;result[i]);
    std::copy(&amp;right[k], &amp;right[R_size], &amp;result[i]);
</code></pre>
<p>But then we remember that we want to use move rather than copy.</p>
<pre><code>    std::move(&amp;left[j],  &amp;left[L_size],  &amp;result[i]);
    std::move(&amp;right[k], &amp;right[R_size], &amp;result[i]);
</code></pre>
    </div>