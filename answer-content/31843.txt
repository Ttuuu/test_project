<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>You don't need to implement <code>Dispose</code> pattern if you have no unmanaged resources to dispose. Unless you get paid per line of code, that is :)</li>
<li><p>You should not dispose objects you did not create (unless you implement a wrapper). In your case, you should not dispose reset event in <code>WorkItem</code> class, since you did not create it there. Instead, you should use</p>

<pre><code>using(var reset = new ManualResetEventSlim())
{
    _workItems.Enqueue (new WorkItem (d, state, reset));
    ...
}
</code></pre></li>
<li><p>this code:</p>

<pre><code>while (true) 
{
    synchronizationContext.Send(_ =&gt; Console.WriteLine("Hello!"), null)

    while (synchronizationContext.HasWorkItems) {
        synchronizationContext.ExecuteWorkItem ();
    }
}
</code></pre>

<p>will hang your application. You should either remove resetEvent from <code>Send</code> method and simply execute all queued <code>WorkItem</code>s there (bad approach) or move this loop:</p>

<pre><code>    while (synchronizationContext.HasWorkItems) {
        synchronizationContext.ExecuteWorkItem ();
    }
</code></pre>

<p>to sepatrate thread (better approach). Might look like:</p>

<pre><code>public sealed class CustomSynchronizationContext : SynchronizationContext, IDisposable
{
     public CustomSynchronizationContext()
     {
         _thread = new Thread(() =&gt; 
               {
                   while(true)
                   {
                       _itemQueuedEvent.WaitOne();
                       if (_disposed) return;
                       ExecuteWorkItem();
                   }
               });
         _thread.Start();
     }

 ........
}
</code></pre>

<p>You will probably encounter some synchronization issues, but nothing that can not be solved.</p></li>
</ol>
    </div>