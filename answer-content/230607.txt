<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Convenience <code>typedef</code>s</h2>

<p>Consider adding convenience <code>typedef</code> declarations on your <code>struct</code>s and <code>enum</code>s, i.e.</p>

<pre><code>struct Value {
   // ...
};
</code></pre>

<p>becomes</p>

<pre><code>typedef struct ValueTag {
   // ...
} Value;
</code></pre>

<p>You've already done this with <code>Stack</code>, though I recommend renaming the tag:</p>

<pre><code>typedef struct TagStack
{
    struct Value *array;
    size_t used;
    size_t size;
} Stack;
</code></pre>

<h2>Uniformity of reference</h2>

<pre><code>struct Value top(const Stack stack)
</code></pre>

<p>should be</p>

<pre><code>struct Value top(const Stack *stack)
</code></pre>

<p>since your other functions (correctly) accept pointers. Also, have a read through this:</p>

<p><a href="https://stackoverflow.com/questions/44157072/const-in-c-function-declaration-and-implementation">https://stackoverflow.com/questions/44157072/const-in-c-function-declaration-and-implementation</a></p>

<p>Your declaration and definition should agree on the <code>const</code>-ness of the argument.</p>

<h2>Makefile variables</h2>

<p>This:</p>

<pre><code>OBJS = Combinator.o Function.o Interpret.o RawCode.o Stack.o Show.o
</code></pre>

<p>shouldn't include <code>.o</code> in its members. For more flexibility, to get this list just use extension substitution, a la</p>

<p><a href="https://stackoverflow.com/questions/12069457/how-to-change-the-extension-of-each-file-in-a-list-with-multiple-extensions-in-g#12071918">https://stackoverflow.com/questions/12069457/how-to-change-the-extension-of-each-file-in-a-list-with-multiple-extensions-in-g#12071918</a></p>

<h2>Use auto-variables</h2>

<p>in this:</p>

<pre><code>main : ${OBJS} main.o
    @echo Linking...
    ${CC} ${CCFLAGS} ${OBJS} main.o -o main
</code></pre>

<p>you can instead do</p>

<pre><code>main: main.o ${OBJS}
    @echo Linking...
    ${CC} ${CCFLAGS} $^ -o $@
</code></pre>

<p>Refer to <a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html" rel="nofollow noreferrer">https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html</a></p>

<h2>Object compilation</h2>

<p>For these rules:</p>

<pre><code>Stack.o : Stack.c
    ${CC} ${CCFLAGS} -c Stack.c
</code></pre>

<p>In the typical case you shouldn't even need to define them; make has a built-in extension-based rule for this. If you insist on defining it yourself, then you should use a pattern rule covering all of your objects at once; refer to</p>

<p><a href="https://www.gnu.org/software/make/manual/html_node/Pattern-Rules.html" rel="nofollow noreferrer">https://www.gnu.org/software/make/manual/html_node/Pattern-Rules.html</a></p>

<h2>Memory span fragility</h2>

<p>This:</p>

<pre><code>if (dico-&gt;used == dico-&gt;size)
{
    dico-&gt;size *= 2;
</code></pre>

<p>is slightly fragile in an edge case: what if <code>used</code> exceeds <code>size</code>? Even if this "shouldn't usually happen", it's better to write it as if it could:</p>

<pre><code>if (dico-&gt;used &gt;= dico-&gt;size)
{
    dico-&gt;size = 2*dico-&gt;used;
</code></pre>
    </div>