<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code makes <code>isUnique()</code> O(n), where n is the size of <code>dictionary_abbr</code>:</p>
<pre><code>for key in self.dictionary_abbn.keys():
    if key != word and self.dictionary_abbn[key] == abbn:
        return False
</code></pre>
<p>Calculating the abbreviation of a word is O(1), so it doesn't make sense to build a dict mapping words to their abbreviations. However, looking up an abbreviation to find the word could benefit from having a dict to keep that an O(1) operation.</p>
<pre><code>from typing import List

class ValidWordAbbr:

    def __init__(self, words: List[str]):
        self.lookup = defaultdict(list)

        for word in words:
            abbn = self.abbreviate(word)
            self.lookup[abbn].append(word)

    def abbreviate(self, word: str) -&gt; bool:
        return f"{word[0]}{len(word)}{word[-1]}" if len(word) &gt; 2 else word

    def isUnique(self, word: str) -&gt; bool:
        abbn = self.abbreviate(word)

        words = self.lookup.get(abbn, [])

        #it is unique if the there are no words with that abbreviation or
        # there is only 1 word and it's the same as the one being checked
        return len(words) == 0 or len(words) == 1 and word in words
</code></pre>
    </div>