<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Throw an exception on invalid use</h1>

<p>You have these two functions:</p>

<pre><code>void commit() { if (!finished) { *db &lt;&lt; "commit;"; finished = true; } };
void rollback() { if (!finished) { *db &lt;&lt; "rollback;"; finished = true; } };
</code></pre>

<p>These allow me to do write this code:</p>

<pre><code>SqlTransaction tx(db);
db &lt;&lt; "some query...";
tx.commit();
tx.rollback();
</code></pre>

<p>Should the end result be committed or rolled back? The call to <code>rollback()</code> is not doing anything here, but if I wrote it in the code I probably really meant for the transaction to roll back. So this is without doubt a programming error. The same goes for calling <code>commit()</code> after a <code>rollback()</code>, and calling <code>commit()</code> or <code>rollback()</code> multiple times for the same transaction is probably also bad. So you should throw an exception in these cases, either a <code>std::logic_error</code> or a custom exception derived from it:</p>

<pre><code>void commit() {
    if (finished)
        throw std::logic_error("commit() called on finished transaction");
    *db &lt;&lt; "commit;";
    finished = true;
}

void rollback() {
    if (finished)
        throw std::logic_error("rollback() called on finished transaction");
    *db &lt;&lt; "rollback;";
    finished = true;
}
</code></pre>

<p>You might also consider throwing an exception in the destructor if there was no explicit <code>commit()</code> or <code>rollback()</code>.</p>
    </div>