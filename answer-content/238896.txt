<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type hints</h2>

<p>PEP484 type hints will help; an example:</p>

<pre><code>def is_file_valid(filepath: str) -&gt; bool:
</code></pre>

<h2>Function contracts</h2>

<p><code>is_file_valid</code> isn't actually what's happening. You're using this function to do two things:</p>

<ul>
<li>Cast an input string to whatever the program needs through the argparse system</li>
<li>Verify that the input string is correct</li>
</ul>

<p>The <a href="https://docs.python.org/3.8/library/argparse.html#type" rel="nofollow noreferrer">documentation</a> shows how this should actually be done:</p>

<pre><code>parser.add_argument('bar', type=open)
</code></pre>

<p>This will call <code>open</code> and give you back a file object, or fail if the file doesn't exist.</p>

<h2>Parsing</h2>

<p>The <code>get_switches_from_file</code> can use tuple unpacking:</p>

<pre><code>community, port, ip = (t.strip() for t in line.split(','))
</code></pre>

<p>This has the added advantage that irregular lines with more than three parts will cause an error rather than being silently ignored.</p>

<p>Better yet, delegate this to a class:</p>

<pre><code>class Switch:
    def __init__(self, line: str):
        self.community, self.port, self.ip = (
            field.strip() for field in line.split(',')
        )
</code></pre>

<h2>Avoid iterative concatenation</h2>

<p>Rather than maintaining <code>switches_info</code>, simply <code>yield</code> each dictionary from the inner loop. This will cause your method to go from O(n) memory to O(1) memory, at a probable slight cost to runtime.</p>

<p>If you use the <code>Switch</code> class above, this could look like</p>

<pre><code>    args = get_cli_arguments().parse_args()
    with args.file as switches_info_fp:
        for line in switches_info_fp:
            yield Switch(line)
</code></pre>

<h2>Separation of concerns</h2>

<p><code>parse_neighbours_ports_result</code> has an odd return format. It's not clear that the first and third string are useful. Either return a 2-tuple with the actual port values, or return a named tuple or class instance.</p>

<h2>Implicit tuple unpacking</h2>

<pre><code>for (error_indication, error_status, error_index, var_binds)
</code></pre>

<p>can lose the parens.</p>

<h2>Imports</h2>

<p>To abbreviate your code, do some <code>from x import y</code>:</p>

<pre><code>from argparse import ArgumentParser
from itertools import zip_longest
</code></pre>
    </div>