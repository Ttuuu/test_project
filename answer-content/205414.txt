<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, your code can indeed be simplified, as Xiaoy312 already demonstrated:</p>

<pre><code>// Obtain the Relations array:
return JObject.Parse(jsonString)["Relations"]
     // Take the categories of all relations, flattening them into a single enumerable:
    .SelectMany(relation =&gt; relation["Categories"])
    // Filter out duplicate category objects (JToken.EqualityComparer uses DeepEquals internally):
    .Distinct(JToken.EqualityComparer)
    // Materialize the results into a list:
    .ToList();
</code></pre>

<p>This is also more efficient:</p>

<ul>
<li>Using <code>dynamic</code> means that several things (such as method overload resolution) cannot be done at compile-time but must be done at run-time, which involves additional work.</li>
<li><code>Distinct</code> uses a set internally, so it doesn't need to compare a new category against all other categories found so far - an internal hashcode lookup is often sufficient.</li>
</ul>

<p><code>dynamic</code> can be useful, but it doesn't work with extension methods (which Linq heavily depends on), so in this case it's more of a hindrance. About the only benefit here is that <code>relation.Categories</code> is slightly easier to write than <code>relation["Categories"]</code>, but you do pay for that at run-time, and it handicaps your tools (no compile-time checks, no automated refactoring). Also keep in mind that <code>dynamic</code> is 'contagious': any expression involving something <code>dynamic</code> also becomes <code>dynamic</code>.</p>

<p>Another problem is that dynamic code is less self-descriptive. Is <code>category.Name</code> a string, or could it be a <code>{ "name": "Identity", "id": "5" }</code> object? That sort of uncertainty makes code more difficult to maintain, at least in my experience. Static typing can be more restrictive and cumbersome, but it gives you more guarantees and tells you more about what sort of data your program expects to handle. Unless you have a good reason to stick with <code>dynamic</code> (in that case, throw a <code>.Cast&lt;dynamic&gt;()</code> in just before the <code>.ToList()</code> call) I would recommend creating a <code>Category</code> class.</p>

<p>Finally, I would make the filename a parameter and rename <code>Method</code> to something more descriptive such as <code>LoadCategoriesFromJsonFile</code>, and I would put some thoughts into error handling (what if the file doesn't exist, or if it's corrupted).</p>
    </div>