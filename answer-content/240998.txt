<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>remark: I focused on syntax//features, not on the program itself.</p>

<h1>shuffled</h1>

<p>I'm taking the explanatory route<br>
<strong>also</strong>  </p>

<pre><code>val indices: MutableList&lt;Int&gt; = (0..genome_size).toMutableList()
indices.shuffle()
</code></pre>

<p>This function can be rewritten with <code>also</code>:</p>

<pre><code>val indices = (0..genome_size).toMutableList()
    .also{ it.shuffle() }
</code></pre>

<p>The object on which an extension-function is called is called <strong>receiver</strong>.<br>
<code>also</code> allows you to provide a lambda in which you can access the receiver using <code>it</code>.<br>
<code>also</code> returns the receiver itself.</p>

<p><strong>apply</strong><br>
The next step from also is <code>apply</code>:<br>
<code>apply</code> is the same as <code>also</code>, but you use <code>this</code> to refer to the receiver.<br>
This means the code can be rewritten as:</p>

<pre><code>val indices = (0..genome_size).toMutableList()
    .apply { this.shuffle() }
</code></pre>

<p>and because you can skip <code>this</code> to refer to something, you can use:</p>

<pre><code>val indices = (0..genome_size).toMutableList()
    .apply { shuffle() }
</code></pre>

<p>Why did I tell you this?<br>
There is already a function that does <code>.toMutableList().apply { shuffle() }</code>, named <code>shuffled</code>.
Therefor, you can rewrite this function with: </p>

<pre><code>val indices: List&lt;Int&gt; = (0..genome_size).shuffled()
</code></pre>

<h1>oneliner function</h1>

<p>You can simplify functions which start with return:</p>

<pre><code>fun countBad(age: age_t): Int {
    return genes.get(0, age).cardinality()
}
</code></pre>

<p>This can be simplified to:</p>

<pre><code>fun countBad(age: age_t): Int = genes.get(0, age).cardinality()
//or to 
fun countBad(age: age_t) = genes.get(0, age).cardinality()
</code></pre>

<h1>constructors</h1>

<p>In kotlin, constructors can define properties and default constructor parameters.</p>

<pre><code>class FishingPopulation(
    nMax: Int, 
    nZero: Int, 
    fishingProb: Double, 
    fishingAge: Int
) : Population(nMax, nZero) {
    private var fishProb: Double = 0.0
    private var fishAge: Int = 0

    init {
        fishProb = fishingProb
        fishAge = fishingAge
    }
}
</code></pre>

<p>can be rewritten to:</p>

<pre><code>class FishingPopulation(
    nMax: Int, 
    nZero: Int, 
    private var fishProb: Double = 0.0, 
    private var fishAge: Int = 0
) : Population(nMax, nZero)
</code></pre>

<p>There is one small difference between this code and the previous code:<br>
<code>fishProb</code> and <code>fishAge</code> now have default-params, which means that they don't have to be specified during construction:</p>

<p><code>FishingPopulation(1, 2)</code> is now the same as <code>FishingPopulation(1, 2, 0, 0)</code><br>
Also <code>FishingPopulation(1, 2, fishAge = 1)</code> is the same as <code>FishingPopulation(1, 2, 0, 1)</code></p>

<h1>List</h1>

<h2>MutableList vs ArrayList</h2>

<p>In your code you use the following:</p>

<pre><code>protected var population: MutableList&lt;Animal&gt; = ArrayList()
</code></pre>

<p>This is perfectly fine, if it <strong>must</strong> be an ArrayList.<br>
If this is not required, you could better create the list by it's interface: </p>

<pre><code>protected var population: MutableList&lt;Animal&gt; = mutableListOf()
//or
protected var population = mutableListOf&lt;Animal&gt;()
</code></pre>

<h2>List vs MutableList</h2>

<p><code>List</code> doesn't allow mutation whereas <code>MutableList</code> does.<br>
When you have code which requires that you mutate a particular list for example if the list is being observed actively for changes, then you need MutableList.<br>
In every other case it's probably enough to have a normal List.  </p>

<p>For example, the code where you create your parents (inside population) doesn't mutate at all, so copying it to a <code>MutableList</code> is unnecesary.</p>

<pre><code>val parents: MutableList&lt;Animal&gt; = 
    population.filter { it.isPregnant() }
        .toMutableList()
</code></pre>

<h1>transformation-operations</h1>

<p>The code</p>

<pre><code>val parents: MutableList&lt;Animal&gt; = population
    .filter { it.isPregnant() }
val babies : MutableList&lt;Animal&gt; = ArrayList()
for(animal in parents){
    babies.add(animal.giveBirth())
}
</code></pre>

<p>can be simplified using map:</p>

<pre><code>val babies = population
    .filter { it.isPregnant() }
    .map{ it.giveBirth() }
</code></pre>

<p>You add the babies afterwards to a bigger list.<br>
Using mapTo, you can add it to the bigger list immediately:</p>

<pre><code>val babies = population
    .filter { it.isPregnant() }
    .mapTo(population){ it.giveBirth() }
</code></pre>

<p>Both access Population, but it will work because transformation-operations will work with a pattern:</p>

<ol>
<li>create a new collection</li>
<li>process the items and add to the collection when needed.</li>
<li>return the new collection.</li>
</ol>

<p>Therefor, after the filter-function, population is not accessed anymore.<br>
This also means that it isn't very performant...
When you don't want to create a new list every time, you should use <a href="https://kotlinlang.org/docs/reference/sequences.html" rel="nofollow noreferrer">sequences</a>.</p>

<p>see <a href="https://kotlinlang.org/docs/tutorials/koans.html" rel="nofollow noreferrer">Kotlin Koans</a> if you want to learn more about filter, map, zip, window, etc.</p>

<h1>small remarks</h1>

<ul>
<li><code>nextDouble(0.0,1.0)</code> is the same as <code>nextDouble(1.0)</code></li>
<li><code>removeIf</code> is from Java. use <code>removeAll</code> instead</li>
</ul>
    </div>