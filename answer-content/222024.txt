<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You have a god-class <code>Mozaika</code>, you should define image mutations on another class <code>Image</code>.</li>
<li><p>You have <em>three mutating containers</em> that hold the information you need. This is <em>really really really bad</em>. If I were an interviewer the second I see that I'd know I wouldn't want you.</p>

<p>This is because it makes your code hard to read, and really fragile.</p></li>
</ul>

<p>Below is what, a segment of, your code would look like without these two <em>massive</em> problems:</p>

<pre><code>import cv2
import numpy as np
import random
from math import ceil


class Image:
    def __init__(self, image):
        self._image = image
        self.height, self.width = image.shape[:2]

    @property
    def ratio(self):
        return max(self.height, self.width) / min(self.height, self.width)

    def square(self):
        if self.height &gt; self.width:
            cut = int((self.height - self.width) / 2)
            return Image(self._image[cut : -cut, :self.width])
        else:
            cut = int((self.width - self.height) / 2)
            return Image(self._image[:self.height, cut : -cut])

    def make_horizontal_rectangle(self):
        ratio = self.ratio
        if ratio &lt; 2:
            cut = int((self.height - ratio * self.height / 2) / 2)
            return Image(self._image[cut : -cut, : self.width])
        elif ratio &gt; 2:
            if self.width &gt; self.height:
                cut = int((self.height - 2 * self.height / ratio) / 2)
                return Image(self._image[: self.height, cut : -cut])
        return self

    def make_vertical_rectangle(self):
        ratio = self.ratio
        if ratio &lt; 2:
            cut = int((self.width - ratio * self.width / 2) / 2)
            return Image(self._image[: self.height, cut : -cut])
        elif ratio &gt; 2:
            cut = int((self.width - 2 * self.width / ratio) / 2)
            return Image(self._image[cut : -cut, : self.width])
        return self

    def resize(self, width, height):
        return cv2.resize(self._image, (width, height))

    def merge(self, other, horizontally=True):
        axis = 0 if horizontally else 1
        return Image((self._image, other._image), axis=axis)


class Mozaika:
    def __init__(self, image_list, losowo, w=2048, h=2048):
        self.losowo = losowo # defines whether image position is random
        self.w = int(w) # width of output image
        self.h = int(h) # height of output image
        self.output_image = 0

        self.images = [Image(i) for i in image_list]
        if self.losowo == 1:
            random.shuffle(self.images)
        self.how_many_images()

    def how_many_images(self):
        number_of_images = len(self.image_dict) # checks how many images is given
        if number_of_images == 1:
            self.output_image = self.images[0].square().resize(self.w, self.h)
        elif number_of_images == 2:
            self.output_image = self.rectangle_image(2)[0]
        elif number_of_images == 3 or number_of_images == 4:
            self.grid2x2()
        elif number_of_images &gt; 4:
            self.grid3x3()

    def rectangle_image(self, images=1):
        largest = max(self.images, key=lambda i: i.ratio)
        maxratio = largest.ratio

        if images == 1:
            if largest.width &gt; largest.height:
                return largest.make_horizontal_rectangle(), 0
            elif self.width &lt; self.height:
                return largest.make_vertical_rectangle(), 1
        elif images == 2:
            # ...
</code></pre>

<p>To get a better review you should change the rest of the code to follow the same style the above is. To help you out I'll give you some 'rules':</p>

<ul>
<li><p>You're only allowed to overwrite <code>self.images</code>.</p>

<p>This means:</p>

<pre><code># Not allowed
self.images[0] = ...
images = self.images
images[0] = ...
self.images = images

# Allowed
self.images = [...]

import copy
images = copy.copy(self.images)
images[0] = ...
self.images = images
</code></pre>

<p>Mutating data can lead to unpredictable things to happen. Overwriting data allows people to understand everything that's happening. Even if it's more verbose.</p>

<p>If you post another question someone will probably say my recommendations are bad. And they are in their own way, but doing by following them you'll have gotten rid of some <em>larger</em> problems, that almost makes your code <em>un-reviewable</em>.</p></li>
<li><p>You're only allowed to overwrite <code>Mozakia.images</code> <em>once</em> per function call.</p></li>
<li><p>Only <code>Mozaika.images</code> is allowed to contain <code>Image</code>s.</p>

<p>You are allowed local variables that hold <code>Image</code>s too. (Like <code>images</code> in the above code snippet.)</p></li>
<li><p>You're not allowed to touch <code>Image._image</code> outside of <code>Image</code>.</p></li>
<li>Only <code>Image.merge</code> is allowed to be passed another <code>Image</code>.</li>
<li>You're not allowed to change <code>Image.merge</code>.</li>
</ul>

<p>This will mean that your code doesn't abuse mutations, and your code will be split up correctly into different segments. Meaning that it'll be <em>far easier</em> to review.</p>

<p>I <em>highly</em> recommend you follow the above rules and come back and post another question.</p>

<hr>

<p>Additional notes:</p>

<ul>
<li>All the functions in <code>Image</code> return a new <code>Image</code>, in your code, sometimes the code wouldn't mutate <code>Mozaika.image_list</code>, and so in these cases they return <code>self</code>.</li>
<li>Your code looks like it has some bugs, you always do <code>if a &gt; b: elif a &lt; b:</code> never with an <code>else</code>. This means that your code can fail <code>if a == b</code>.</li>
<li><code>make_horizontal_rectangle</code> has an additional <code>if</code> that <code>make_vertical_rectangle</code>. That looks like a bug.</li>
</ul>
    </div>