<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here you want to move away from <code>for</code> loops for two reasons:</p>

<ol>
<li>your number of <code>for</code> loops depends on your number of datasets, so using <code>for</code> loops prevents you from generalizing your code to any number of datasets.</li>
<li>many <code>for</code> loops will likely slow down your code execution when working with a larger number of datasets.</li>
</ol>

<p>I think the key to vectorizing your <code>for</code> loops is to use the <code>expand.grid</code> function. If you have</p>

<pre><code>n &lt;- 4
</code></pre>

<p>datasets, then you have</p>

<pre><code>p &lt;- n * (n - 1) / 2    # 6
</code></pre>

<p>degrees of freedom (the number of <code>for</code> loops in your code, or the number of items on the lower triangle of each matrix). If for each of these you can pick among</p>

<pre><code>w &lt;- seq(from = 0, to = 1, length.out = n)
</code></pre>

<p>then you can build the matrix of all possible combinations by doing:</p>

<pre><code>W &lt;- as.matrix(expand.grid(rep(list(w), p)))
</code></pre>

<p>Here <code>W</code> is a big matrix with 4096 rows, each row representing a different combination of your <code>(i1, i2, i3, i4, i5, i6)</code> variables:</p>

<pre><code>&gt; head(W)
          Var1      Var2 Var3 Var4 Var5 Var6
[1,] 0.0000000 0.0000000    0    0    0    0
[2,] 0.3333333 0.0000000    0    0    0    0
[3,] 0.6666667 0.0000000    0    0    0    0
[4,] 1.0000000 0.0000000    0    0    0    0
[5,] 0.0000000 0.3333333    0    0    0    0
[6,] 0.3333333 0.3333333    0    0    0    0
</code></pre>

<p>These <code>6</code> columns are only part of the <code>n * n = 16</code> values needed in each matrix. We can expand using the following:</p>

<pre><code>X &lt;- matrix(1:(n*n), n, n) # pattern matrix of indices
A &lt;- matrix(0, nrow(W), n * n)
A[,    X[lower.tri(X)]] &lt;- W
A[, t(X)[lower.tri(X)]] &lt;- W
</code></pre>

<p><code>A</code> is similar to <code>W</code> in that it is a matrix with <code>4096</code> rows, but each row now has the <code>n * n = 16</code> values of a symmetric matrix.</p>

<p>From there, you can reshape <code>A</code> into a 3D array:</p>

<pre><code>dim(A) &lt;- c(nrow(W), n, n)
</code></pre>

<p>and your <code>4096</code> matrices can be accessed as follows:</p>

<pre><code>A[1, , ]
#      [,1] [,2] [,3] [,4]
# [1,]    0    0    0    0
# [2,]    0    0    0    0
# [3,]    0    0    0    0
# [4,]    0    0    0    0

A[10, , ]
#           [,1]      [,2]      [,3] [,4]
# [1,] 0.0000000 0.3333333 0.6666667    0
# [2,] 0.3333333 0.0000000 0.0000000    0
# [3,] 0.6666667 0.0000000 0.0000000    0
# [4,] 0.0000000 0.0000000 0.0000000    0

A[4096, , ]
#      [,1] [,2] [,3] [,4]
# [1,]    0    1    1    1
# [2,]    1    0    1    1
# [3,]    1    1    0    1
# [4,]    1    1    1    0
</code></pre>

<p>If I were you I would probably stop here, i.e., keep the data in this form. A 3d array might allow you to continue writing vectorized code if the rest of your analysis allows for it. However if you absolutely want a list of matrices, you can do:</p>

<pre><code>C_list2 &lt;- lapply(seq(nrow(A)), function(i) A[i, , ])
</code></pre>

<p>(note that the order of the matrices in my data and yours do not match. Let me know if this is a concern, it's probably a matter of reorganizing the rows and/or columns of the <code>W</code> matrix.)</p>
    </div>