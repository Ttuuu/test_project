<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>\$O(1)\$ Discussion</h2>

<blockquote>
  <p>Is it possible to calculate the distance in \$O(1)\$ time complexity?</p>
</blockquote>

<p>Yes, it is.</p>

<p>This problem is called the <em>"Knight's distance"</em> problem, and googling it find a number of references.</p>

<p>This problem was posed as part of the South African "Computer Olympiad" in 2007 for high-school students to solve.... (I know, kids these days.... :) ). The specification was such that some input values for the programs were large enough that \$O(n)\$ solutions would fail to compute in the required time limits, so to get full marks you needed to (devise, and) compute the \$O(1)\$ system.</p>

<p>The <a href="http://olympiad.cs.uct.ac.za/old/saco2007/day1_2007.pdf" rel="noreferrer">problem description</a>, and enough of the description of <a href="http://olympiad.cs.uct.ac.za/old/saco2007/day1_2007_solutions.pdf" rel="noreferrer">the \$O(1)\$ solution are</a> available. In case the .za net goes dead, here's the description of the solution:</p>

<blockquote>
  <p><strong>4 The Knights Who Say Ni</strong></p>
  
  <p>The (x, y)-coordinates in the 50% constraints are small enough to
  generate a full grid of the minimum number of moves required to get
  from any point to (0,0). The grid can be generated by a breadth-first
  search (BFS).</p>
  
  <p>We know that getting to (0,0) requires 0 moves. We therefore know that
  the points (1,2), (2,1) and the other six movements each require 1
  move. From each of those points with a shortest distance of 1, we can
  take another step in each direction for a shortest path of 2. However,
  some moves will bring us back to a point we have already found a
  shorter distance for and we therefore discard such moves. We continue
  this until the grid is full and then use the grid to find the
  distances for each knight.</p>
  
  <p>To get 100%, a lot of scribbling on paper is required to make some key
  observations and work out some formulae. The first thing to note is
  that the grid is symetrical along the x, y axis and the lines <code>y = ±x</code>.
  You can therefore convert all points <code>(x, y)</code> into an equivalent
  point such that the new <code>0 ≤ y ≤ x</code>.</p>
  
  <p>The magic formula is:</p>
  
  <p>$$
f(x, y) = \left\{
 \begin{array}{ll}
  2 \left\lfloor \frac{y - \delta}{3} \right\rfloor  + \delta &amp; \mbox{if } y &gt; \delta \\
  \delta - 2 \left\lfloor \frac{\delta - y}{4} \right\rfloor &amp; \mbox{otherwise}
 \end{array}
\right.
$$</p>
  
  <p>where \$δ = x − y\$.</p>
</blockquote>

<h2>Are there mistakes</h2>

<p>Yes.... All squares are accessible to the knight. Why do you have a restriction?</p>

<p>I put your code in to an Ideone that loops through the 100 targets in positions (0,0) through (9,9).... and <a href="http://ideone.com/Akyx2M" rel="noreferrer">its results are disappointing</a>... Does your code work?</p>

<p>NO. it does not. It produces wildly wrong values.....</p>

<p>Now, the algorithm I referenced above does not seem to be producing good values either (at least a short range....), but seriously? Your code hardly works at all :(</p>

<p>Lots, and lots of -1 distances, and lots and lots of 0.....</p>
    </div>