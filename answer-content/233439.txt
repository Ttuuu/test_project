<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Ways of optimizing</h3>

<ul>
<li><p><strong><code>_validate_mappings</code></strong> function<br>Two lists <code>keys = []</code> and <code>values = []</code> are just used for accumulation and membership check, though inefficiently.<br>Instead, the more optimized way is to rely on <code>dict.values()</code> <em>view</em> object converted to <code>set</code> for fast containment check.<br>The optimized function would look as (<em>docstrings</em> are skipped for demo):</p>

<pre><code>def _validate_mappings(mappings: dict) -&gt; None:
    values = set(mappings.values())
    for key, value in mappings.items():
        if key in values:
            raise _KeyValueConflictException(_KEY_VALUE_CONFLICT_EXCEPTION_MSG.format(key, value))
</code></pre></li>
<li><p><code>mapping_replace</code> function in <strong><code>use_regex=True</code></strong> mode and dealing with multiple regex replacements.<br>To replace a loop of numerous subsequent regex compilations and substitutions I would suggest a "single-pass" substitution powered by the following features:</p>

<ul>
<li><em>regex alternation group</em> <code>(...)|(...)|(...)</code> to combine all raw patterns into one</li>
<li>Python <code>dict</code> preserves its insertion order since 3.7</li>
<li>the respective <em>replacement</em> string is found using <a href="https://docs.python.org/3/library/re.html#re.Match.lastindex" rel="noreferrer"><code>Match.lastindex</code></a> feature (the integer index of the last matched capturing group)</li>
</ul>

<p>Although, this trick may require non-overlapping patterns provided in <code>mappings</code> dict.<br>The crucial <strong><code>if use_regex:</code></strong> block:</p>

<pre><code>...
if use_regex:
    keys_list = list(mappings.keys())
    replacer = lambda m: mappings[keys_list[m.lastindex - 1]]
    pat = fr"{'|'.join(f'({k})' for k in mappings.keys())}"   # composing regex alternation group
    replaced_string = re.sub(pat, replacer, replaced_string)
</code></pre></li>
</ul>

<hr>

<p>I've added some extended test case (3rd one) to show how's the regex trick goes:</p>

<pre><code>print(mapping_replace("simple test", {"simple": "complex", "test": "haha"}))
print(mapping_replace("124233 test", {r"\d+": "letters"}, True))
print(mapping_replace("011 test ABCbb11www", {"\d+": "symbols", "[A-Z]+": "@", "w+": "W3W"}, True))
print(mapping_replace("Hello world", {"H": "J", "J": "Y"}, False, validate_mappings=False))  # No exception!
print(mapping_replace("Hello world", {"H": "J", "J": "Y"}))
</code></pre>

<p>The output:</p>

<pre><code>complex haha
letters test
symbols test @bbsymbolsW3W
Yello world
raise _KeyValueConflictException(_KEY_VALUE_CONFLICT_EXCEPTION_MSG.format(key, value))
__main__._KeyValueConflictException: The key of 'J' -&gt; 'Y' conflicts with a separate mapping containing the value 'J'.
</code></pre>
    </div>