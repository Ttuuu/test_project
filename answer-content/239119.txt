<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some tips:</p>

<p><strong>Tip 1</strong></p>

<pre><code>@Autowired
AccountRepository accountRepository;

@Autowired
BCryptPasswordEncoder bCryptPasswordEncoder;
...
</code></pre>

<p>Setter injection is considered as bad practice prefer constructor injection to gain more control and to avoid NullPointerExceptions.
<a href="http://olivergierke.de/2013/11/why-field-injection-is-evil/" rel="nofollow noreferrer">Why field injection is evil</a></p>

<p><strong>Tip 2</strong></p>

<pre><code>@Id
private String id = UUID.randomUUID().toString();
</code></pre>

<p>Encapsulate id generation into some component class eg. IDGenerator.nextId() where IDGenerator is an interface and you would provide some implementation class for that. You'll have more control in testing.</p>

<p><strong>Tip 3</strong></p>

<pre><code>Optional&lt;Account&gt; optionalAccount = accountRepository.findByUsername(s);

if (!optionalAccount.isPresent()) {
    throw new UsernameNotFoundException("Account named " + s + " not found");
}

return new AccountDetails(optionalAccount.get());
</code></pre>

<p>Using Optional like that is considered as bad practice. Something like that would be a lot better:</p>

<pre><code>Account account = accountRepository.findByUsername(s).orElseThrow(UsernameNotFoundException::new)
return new AccountDetails(account)
</code></pre>

<p><strong>Tip 4</strong></p>

<pre><code>throw new RuntimeException();
</code></pre>

<p>You should throw more specific exceptions.</p>

<p><strong>Tip 5 UPDATE</strong></p>

<p>I think that <code>AccountService.remove(AccountDTO accountDTO)</code> is too complex.
I believe in that case would be better to just write own deletion method in repository:</p>

<pre><code>public void remove(AccountDTO accountDTO) {
    Objects.requireNonNull(accountDTO);
    accountRepository.deleteByUsername(accountDTO.getUsername());
}
</code></pre>

<p><strong>Tip 6</strong></p>

<p><code>AccountService</code> and <code>AccountDetailsService</code> could be as one class, these classes have similar responsibilities.</p>

<p><strong>Tip 7</strong></p>

<blockquote>
  <p>Then where should we use loadbyusername method?</p>
</blockquote>

<p>Spring security needs class which implements this interface when we use some other user data store than in memory.
When some client app try to login / generate token this method 
would be invoked by spring and whether if user exists or not spring
would respond with 400 Bad Request or 200 OK.</p>
    </div>