<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, the function name is misleading. Character count could imply the length of the input, or a map of unique characters and their counts, and I would not guess the current behavior from this name. This is more like some sort of compression. Actually this happens to have a name: <a href="https://en.m.wikipedia.org/wiki/Run-length_encoding" rel="nofollow noreferrer">Run Length Encoding</a>. </p>

<p>The program tries to get the first character without verifying that there is a first character. JavaScript let's you get away with it, returning an empty string when the index is invalid, but this is sloppy coding. It would be better to reorganize the logic to avoid such practices.</p>

<p>Declaring <code>var i</code> inside the <code>for</code> loop is not a good practice, because that syntax send to imply that the variable's scope is in the loop, but that's not the case in JavaScript.</p>

<p>After the check on <code>str.length</code> where you return in the <code>if</code> branch, you could eliminate the <code>else</code> branch, reducing the nesting level of the code, making it easier to read.</p>

<p>Putting the above together, this would be slightly better:</p>

<pre><code>var result,
    count = 1,
    i;

if (!str) {
    return "";
}

result = str.charAt(0);
for (i = 1; i &lt; str.length; i++) {
    if (str.charAt(i) != str.charAt(i-1)) {
        result += count + str.charAt(i);
        count = 1;
    } else {
        count++;
    }
}

return result + count;
</code></pre>
    </div>