<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, I think the algorithm is pretty smart which is, for my humble experience, not so common for a college student. So congrats if you came up with it by yourself! If you're looking for smart implementations I would recommend functional ones, e.g. <a href="https://gist.github.com/ihabunek/81e7da0c705689fe743a#file-1-short-life-hs" rel="nofollow noreferrer">in Haskell</a>; see also <a href="https://codegolf.stackexchange.com/questions/3434/shortest-game-of-life">Shortest game of life</a>.</p>
<p>Now, beware of smartness. A good code should be <strong>easy to read</strong>, <strong>easy to understand</strong>. This is of course not always possible when dealing with complex algorithm but I believe that it should be a target.</p>
<blockquote>
<p><em>jjjjjjjjjjjj said:</em><br>
Note: most comments have been taken out because they don't add much to the readability of the code</p>
</blockquote>
<p>The point of comments is to help people understand your code (generally speaking, focus on the "why" rather than on the "what"). Here, to help people understand you had to add <em>a lot</em> of text to your post. Ideally this isn't needed because the code is:</p>
<ul>
<li>self-documented,</li>
<li>commented to clear complex/implicit stuff up.</li>
</ul>
<p>For instance, here is a quick rewrite of your code in an attempt to make the code more expressive:</p>
<p><code>GameOfLife.java</code></p>
<pre class="lang-java prettyprint-override"><code>/**
 * Computes the next state of the automaton by using Conway's original rules.
 */
public class GameOfLife extends CellularAutomaton {

    /**
     * Stores all cells in a two-dimensional matrix. The value stored is
     * the number of live neighbors of the cell, +10 if the cell is alive.
     */
    private int board[][];
    private int dim;
    /*
     * index(cell) = cellX * dim + cellY
     */
    private Stack&lt;Integer&gt; indexesOfCellsAliveAtNextGeneration;
    private HashMap&lt;Integer, Integer&gt; cellsMaybeAliveAtNextGeneration;

    public GameOfLife(int d, Stack&lt;Integer&gt; s){
        board = new int[d][d];
        dim = d;
        indexesOfCellsAliveAtNextGeneration = s;
        cellsMaybeAliveAtNextGeneration = new HashMap&lt;&gt;();
    }

    public String newGeneration() {
        populateWorldWithAliveCellsFromPreviousGeneration();
        computeCellsMaybeAliveAtNextGeneration();
        return boardAsString();
    }

    private void populateWorldWithAliveCellsFromPreviousGeneration() {
        for (Map.Entry&lt;Integer, Integer&gt; cell : cellsMaybeAliveAtNextGeneration.entrySet()) {
            int cellIndex = cell.getKey();
            int cellValue = cell.getValue();
            
            if(willBeAlive(cellValue)){
              indexesOfCellsAliveAtNextGeneration.add(cellIndex);
            }

            board[cellIndex/dim][cellIndex%dim] = 0;
        }
    }

    private static boolean willBeAlive(int cell){
        return (!isAlive(cell) &amp;&amp; nbOfNeighbors(cell) == 3) 
            || (isAlive(cell) &amp;&amp; (nbOfNeighbors(cell) == 2 || nbOfNeighbors(cell) == 3));
    }
    
    private static boolean isAlive(int cell) {
        return cell &gt;= 10;
    }
    
    private static int nbOfNeighbors(int cell) {
        return cell % 10;
    }

    private void computeCellsMaybeAliveAtNextGeneration() {
        cellsMaybeAliveAtNextGeneration.clear();

        while(!indexesOfCellsAliveAtNextGeneration.isEmpty()) {
            int cellIndex = indexesOfCellsAliveAtNextGeneration.pop();

            int cellX = cellIndex / dim;
            int cellY = cellIndex % dim;
            int topLeftNeighbourX = (cellX &lt;= 0) ? 0 : cellX - 1;
            int topLeftNeighbourY = (cellY &lt;= 0) ? 0 : cellY - 1;
            int bottomRightNeighbourX = (cellX &gt;= dim - 1) ? cellX + 1 : cellX + 2;
            int bottomRightNeighbourY = (cellY &gt;= dim - 1) ? cellY + 1 : cellY + 2;

            // Iterate through every cell's neighbor to increate their neighbor number

            for(int i = topLeftNeighbourX; i &lt; bottomRightNeighbourX; ++i) {
                for(int j = topLeftNeighbourY; j &lt; bottomRightNeighbourY; ++j) {
                    boolean isNeighbor = i != cellX || j != cellY;
                    if (isNeighbor) {
                        int neighborIndex = i * dim + j;
                        cellsMaybeAliveAtNextGeneration.put(neighborIndex, incrementedNumberOfNeighbors(i, j));
                    }
                }
            }
            cellsMaybeAliveAtNextGeneration.put(cellIndex, makeAlive(cellX, cellY));
        }
    }
    
    private int incrementedNumberOfNeighbors(int x, int y) {
        return ++board[x][y];
    }
    
    private int makeAlive(int x, int y) {
        return board[x][y] += 10;
    }

    private String boardAsString() {
        StringBuilder s = new StringBuilder();

        for(int[] cells : board) {
            for(int cell : cells) {
                if(isAlive(cell)){
                    s.append("* ");
                }
                else {
                    s.append("  ");
                }
            }
            s.append("\n");
        }

        return s.toString().trim();
    }
}
</code></pre>
<p>I mostly renamed some variables/methods and introduced some utility methods. The code is a bit longer ands feels more verbose but is IMHO also easier to understand. It is still very procedural (which is not bad per se, especially for such a simple program) but you may want to try to add more expressiveness by introducing new classes such as <code>Board</code> or <code>Cell</code>. You'll find such OO implementations <a href="https://github.com/dersoz/Game-of-Life" rel="nofollow noreferrer">on GitHub</a>.</p>
<p>Your code may also run into memory issues with large boards. Indeed, your <code>board[][]</code> variable stores <em>all</em> the cells, even dead ones. With a 10000 x 10000 board containing only ~5/6 cells you'll waste a lot of memory. A solution is to use a <a href="https://en.wikipedia.org/wiki/Sparse_matrix" rel="nofollow noreferrer">sparse array</a> (basically, a set containing only alive cells).</p>
<p>As a side note, a few years ago I also tried to model a highly-configurable GoL in a "pure" OO way; my code <a href="https://github.com/echebbi/game-of-life" rel="nofollow noreferrer">is on GitHub</a> if you want to check it out. The method computing the next generation of the world is <a href="https://github.com/echebbi/game-of-life/blob/e3c6533f55f88777ab045f385336c21ab7cc00ae/src/main/java/fr/kazejiyu/gameoflife/game/ImmutableGeneration.java#L194-L204" rel="nofollow noreferrer">ImmutableGeneration::nextGeneration</a>; given a set of alive cells, it basically: 1) compute all neighbors cells then 2) keep only those that will be alive. Rules indicating whether a cell will be alive or dead are implemented in <a href="https://github.com/echebbi/game-of-life/blob/e3c6533f55f88777ab045f385336c21ab7cc00ae/src/main/java/fr/kazejiyu/gameoflife/game/rules/Rule.java#L50-L58" rel="nofollow noreferrer">Rule.java</a>.</p>
<hr>
<p><strong>EDIT</strong>: <em><strong>personal</strong></em> opinion on conciseness versus verbosity when it comes to naming to answer a comment</p>
<p>First of all, I believe that there are no right answers: it's all about tradeoffs and personal preferences. Naming is hard and you'll find plenty of articles on the subject.</p>
<blockquote>
<p>There are only two hard things in Computer Science: cache invalidation and naming things<br>
— Phil Karlton</p>
</blockquote>
<p>My take is that conciveness is pleasant but can lead to ambiguities. And ambiguity, especially hidden one, is a threat.  The first example that comes to my mind is mistakenly mixing units:</p>
<pre class="lang-java prettyprint-override"><code>// Everything looks good...
double pathLength = distanceFromGoal + distanceToTarget;

// ... but adding units makes easy to spot bugs
double pathLengthInKilometers = distanceFromGoalInMeters + distanceToTargetInMillimeters;
</code></pre>
<p>That being said, long names do make the code harder to read. They can be reduced by taking two things into account:</p>
<ul>
<li>the context (e.g. name of the enclosing method / class / package),</li>
<li>the scope (a local variable in a 3-line method may be fine with a short name whereas a function used multiple times across the whole codebase may need a longer one).</li>
</ul>
<p>That's also what is advised by <a href="https://google.github.io/styleguide/cppguide.html#General_Naming_Rules" rel="nofollow noreferrer">Google's naming conventions</a>.</p>
<p>As a last note, as you suggested very long names may be seen as code smells. Usually, the issue is <a href="https://dzone.com/articles/single-responsibility-principle-done-right" rel="nofollow noreferrer">a lack of cohesion</a> (the class/method does too much different things — once again, no clear metrics on this, it's up to developer's feeling). For instance, in the code I proposed we may think of <code>populateWorldWithAliveCellsFromPreviousGeneration</code> as a method holding responsibilities: 1) computing the cells that will be alive at the next generation and 2) populating the world. We could thus split it in two: <code>populateWorldWith(aliveCellsFromPreviousGeneration())</code>.</p>
<p>In the same way we could gather the attributes which name ends with "atNextGeneration" under a new <code>Generation</code> class:</p>
<pre class="lang-java prettyprint-override"><code>public class GameOfLife extends CellularAutomaton {

    private Generation lastGeneration;

    public String newGeneration() {
        this.lastGeneration = lastGeneration.nextGeneration();
        return this.lastGeneration.toString();
    }
}

public class Generation {

    public Generation nextGeneration() {
        return new Generation(aliveAtNextGeneration(this.aliveCells));
    }

    ...

}
</code></pre>
<p>But splitting the logic into too much classes will also increase the architecture complexity and make harder to understand the flow.</p>
<p>As a conclusion I would advise you to keep in mind that any piece of code is susceptible to be modified by developers having no previous knowledge on the project and who must understand what the code does and <strong>why</strong> it does it so that they can maintain it or reuse parts without introducing regressions. There's no silverbullet: only tradeoffs, and what matters when you make a choice is that:</p>
<ul>
<li>you can identify the tradeoff,</li>
<li>you understand the pros and cons of each alternative and choose one of them knowingly.</li>
</ul>
<p>(but don't push too much pressure on you: <a href="https://en.wikipedia.org/wiki/KISS_principle" rel="nofollow noreferrer">KISS</a> and remember that code can be refactored thereafter)</p>
    </div>