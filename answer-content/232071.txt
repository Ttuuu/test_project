<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Docstrings</h1>

<p>You should always use triple double quotes for docstrings. <code>'''</code> should be replaced with <code>"""</code>  </p>

<h1>Comments</h1>

<p>Don't fill your code with comments. The actual code is harder to read. Comments should be used only while explaining something which others can't understand by themselves.</p>

<h1>Making the code shorter</h1>

<p><strong>Functions other than poker</strong></p>

<ul>
<li><p>You can remove <code>import string</code> as you don't use it</p></li>
<li><ol>
<li>You can use <code>print()</code> instead of creating a new function</li>
<li>You can use <code>list_players</code> directly, instead of <code>list_bids</code> or <code>list_balances</code>  </li>
</ol></li>
</ul>

<p><strong>In the poker function</strong>  </p>

<ul>
<li><pre><code>n_players = int(input('Number Of Players?... '))
player_names = []

for n in range(n_players):
    player = input('Player # ' + str(n+1) + ' .... ')
    player_names.append(player)
</code></pre>

<p>can be rewritten as</p>

<pre><code>n_players = int(input('Number Of Players?... '))
player_names = [input(f'Player # {n+1} .... ') for n in range(n_players)]
</code></pre></li>
<li><p>While beginning, len(player_names) is the same as <code>n_players</code>. Therefore, we can write</p>

<pre><code>balances = [ 90 for n in range(n_players)]  
bids = [10 for n in range(len(player_names))]
fold_code = [ 0 for n in range(len(player_names)) ]
</code></pre>

<p>as</p>

<pre><code>balances = [90] * n_players
bids = [10] * n_players
fold_code = [0] * n_players
</code></pre></li>
</ul>

<p>Final code after implementing the above ideas and making some negligible changes:</p>

<pre class="lang-py prettyprint-override"><code>def get_space(pos_list, pos_string, string, extra_length):
    h_length = max(len(string) for string in pos_list) + extra_length
    return string * ( h_length - len(pos_string))

def list_players(player_names, n_players, list_):
    for i in range(n_players):
        print(player_names[i] + get_space(player_names, player_names[i], ' ', 1) + ': ' + str(list_[i]))

def poker():
    n_players = int(input('Number Of Players?... '))
    player_names = [input(f'Player # {n+1} .... ') for n in range(n_players)]

    balances = [90] * n_players
    bids = [10] * n_players
    fold_code = [0] * n_players

    total = sum(bids)

    input('Press Enter To Continue...')
    print('Starting Game...')

    this_round = ''

    while True:
        print('Current Balances:')
        list_players(player_names, n_players, balances)
        print('Current Bids:')
        list_players(player_names, n_players, bids)

        if this_round == 'y':
            print('Who Won?')
            winner = input()

            balances[player_names.index(winner)] += total

            print()
            print(winner, 'Won This Round')
            print()

            print('Current Balances:')
            list_players(player_names, n_players, balances)

            for var in range(n_players):
                if 0 in balances:
                    ind_0 = balances.index(0)

                    print(player_names[ind_0].upper(), 'Is Out...')

                    n_players -= 1
                    player_names.pop(ind_0)
                    bids.pop(ind_0)
                    balances.pop(ind_0)

            for player in player_names:
                balances[player_names.index(player)] -= 10

            bids = [10] * n_players
            fold_code = [0] * n_players

            print('Deducting 10$ from all players for the new round...')
            print()

            print('Current Balances:')
            list_players(player_names, n_players, balances)
            print()

            print('Current Bids:')
            list_players(player_names, n_players, bids)
            print()

            print('-' * 35)

        for player_index in range(n_players):
            player = player_names[player_index]

            if fold_code[player_names.index(player)] == 1:
                continue

            print('&gt;' * 15, player.upper(), '&gt;' * 15 )
            action = input()

            if action == 'c':
                bid = max(bids) - bids[player_index]
                print(player, 'Called...')

            elif action == 'r':
                print('Raise By?')
                r = int(input())
                bid = max(bids) - bids[player_index]
                print(player, 'Raised By', r)

            elif action == 'f':
               fold_code[player_names.index(player)] = 1
               bid = 0
               print(player, 'Folded For the round')

            else:
                bid = 0
                print(player, 'Checked...')

            balances[player_names.index(player)] -= bid
            bids[player_names.index(player)] += bid
            total = sum(bids)

            print()
            print('Current Balances:')
            list_players(player_names, n_players, balances)

            print()
            print('Current Biddings:')
            list_players(player_names, n_players, bids)

            print()
            print('Total Bid : ' + str(total))

            print()
            print()

            print('-' * 35)

        print('Round Over?')
        this_round = input()

print('\n' * 20)
poker()

</code></pre>

<p>If you have any suggestions or if you find any mistakes, please point them out in the comments.</p>

<p>Hope this helps!</p>
    </div>