<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OK, <strong>only if you're really looking for performance</strong> (please profile, profile and then profile again) otherwise just go with <a href="https://codereview.stackexchange.com/a/163677/13424">Heslacher's review</a> and keep your code easy to read (which is almost always the best thing to do).</p>

<p>Scanning byte by byte is slow because:</p>

<ul>
<li>You need to dereference a pointer for each read.</li>
<li>You should check generated assembly code (at run-time) but if compiler can't safely remove bounds checking then it will hit performance.</li>
<li>You need a comparison for each byte (and possibly a jump but branch prediction will work pretty well in this case then we can ignore this).</li>
</ul>

<p>Given that any modern CPU is able to compare 32 bits as fast as 8 bits and that there are good chances that reading/comparing <strong>4 bytes at a time is more efficient</strong> than reading 1 byte (especially assuming that memory is aligned, you might check how to align memory in C#, unfortunately it's not trivial and painless).</p>

<p>You need to use unsafe code then it may not be applicable in  your case but it's a possible (untested!) proof of concept:</p>

<pre><code>public unsafe static int GetPositionOfLastByteWithData(this byte[] array)
{
    fixed(byte* pArray = array)
    {
        for (int* ptr=(int*)pArray; ptr != pArray; --ptr)
        {
            if (*ptr != 0)
            {
                // Compare individual bytes, a simple
                // if ((*ptr &amp; 0xff000000) != 0)
                // Repeated for each byte might be enough but
                // You may want to try searching for first set bit
                // Because it's much faster.
            }
        }
    }

    return array.Length - 1;
}
</code></pre>

<p>You might want to adjust the beginning of the search to start with an <strong>aligned address</strong> (and do a <em>normal</em> comparison for the bytes left off). On <strong>64 bit</strong> machines you should compare 8 bytes at a time (<code>long</code>).</p>

<p>You may check real-world <code>strlen()</code> implementations for some more ideas to optimize your code here.</p>
    </div>