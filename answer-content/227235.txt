<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Utilize the query object, this type of querying is more suitable there than as params.</li>
<li>Use object destructuring.</li>
<li>Dry your code, see how we're mapping over <code>[countryId, stateId]</code> to check the validity of the input. Ideally, you would have been using a module like <code>Joi</code> for that.</li>
<li>Maintain a <a href="https://en.wikipedia.org/wiki/Happy_path" rel="nofollow noreferrer">happy path</a> and break out of the function early when erroring.</li>
<li>Use <code>async/await</code> instead of <code>.then()</code>.</li>
<li>Return a <code>400</code> when the input is invalid.</li>
<li>User proper camelCase (in both the DB and the backend).</li>
<li>Check the array length instead of checking the existence of the first element. So <code>if (arr.length)</code> not <code>if (arr[0])</code>. The reason for that is at some cases the first element of the array could be 'falsy' (such as <code>''</code> and <code>0</code>) which can be valid sometimes.</li>
<li>When erroring, return an <code>error</code> field, not a <code>msg</code> one.</li>
<li>Study javascript's array methods such as <code>map</code>, <code>reduce</code>, <code>filter</code>, and <code>every</code>. They will save your life more often than you thought.</li>
</ul>

<pre><code>router.get("/citylist", async (req, res) =&gt; {
  try {

    const { countryid, stateId } = req.query

    const validInput = [countryid, stateid].map(mongoose.Types.ObjectId.isValid).every(Boolean)
    if (!validInput) return res.status(400).json({ error: "Country or State Id is not valid" })

    const cities = await CityModel.find({ countryId, stateId })
    if (!cities || cities.length) return res.status(404).json({ error: "City not found" })

    res.json(cities);

  } catch (error) {
    res.status(500).json({ error })
  }
});
</code></pre>
    </div>