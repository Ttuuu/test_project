<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a bug, which is that if a <code>'min'</code> or a <code>'max'</code> value is <code>0</code>, then it will be ignored.</p>

<p>For readability,</p>

<ul>
<li>Follow the PEP 8 standard, and use <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="nofollow noreferrer">four spaces per level of indentation</a>.</li>
<li>Define functions and helper functions.</li>
<li>Use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code><em>str</em>.join(<em>generator expression</em>)</code></a> to eliminate the proliferation of <code>value_first</code> and <code>dict_first</code> variables.</li>
<li>In Python 3, prefer to use <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-strings</a> rather than the <code>%</code> operator for string interpolation.</li>
</ul>



<pre><code>def filter_expr(filters):
    def range_expr(key, min_max):
        lb = f'{key} &gt;= {min_max["min"]}' if 'min' in min_max else None
        ub = f'{key} &lt;= {min_max["max"]}' if 'max' in min_max else None
        return f'({lb} and {ub})' if (ub and lb) else lb or ub

    def ranges_expr(key, values):
        if len(values) == 1:
            return range_expr(key, values[0])
        else:
            return '(' + ' or '.join(
                range_expr(key, min_max) for min_max in values
            ) + ')'

    return ' and '.join(
        f"{key} = '{value}'" if isinstance(value, str) else 
        ranges_expr(key, value)
        for key, value in filters.items()
    )

# goal : type == 'human' and ((age &gt;= 4 and age &lt;= 8) or (age &gt;= 15 and age &lt;= 30)) and size &gt;= 60
filters = {
  "type": 'human',
  "age": [{'min': 4, 'max': 8}, {'min': 15, 'max': 30}],
  "size": [{'min': 60}],
}
print(filter_expr(filters))
</code></pre>
    </div>