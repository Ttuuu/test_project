<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As already explained <a href="https://codereview.stackexchange.com/a/229807/35991">in this answer</a>, there is no need to use a class with an instance method here. In addition, the convention for function names in Python is to use <code>snake_case</code>, not <code>camelCase</code>. </p>

<p>On the other hand, this template is given on the <a href="https://leetcode.com/problems/super-ugly-number/" rel="nofollow noreferrer">LeetCode submission template</a>, so you are not free to change it. </p>

<p>What you can do is to make the required solution method a wrapper for a free function (which then is universally usable):</p>

<pre><code>def nth_super_ugly_number(n: int, primes: List[int]) -&gt; int:
    # ...


class Solution:
    def nthSuperUglyNumber(self, n: int, primes: List[int]) -&gt; int:
        return nth_super_ugly_number(n, primes)
</code></pre>

<p><em>Generating</em> the ugly numbers can be separated from <em>counting</em> them (until the nth ugly number is reached) if the former is done with a <em>generator.</em> The generator is now a reusable function as well, and you might want to add a docstring comment:</p>

<pre><code>def super_ugly_numbers(primes: List[int]) -&gt; int:
    """Generate super ugly numbers.

    Super ugly numbers are positive integers whose all prime factors are in
    the given prime list.
    """

    heap = [1]
    seen = set()
    while True:
        num = heapq.heappop(heap)
        yield num
        for p in primes:
            if num * p not in seen:
                seen.add(num * p)
                heapq.heappush(heap, num * p)


def nth_super_ugly_number(n: int, primes: List[int]) -&gt; int:
    ugly_numbers = super_ugly_numbers(primes)
    for _ in range(n - 1):
        next(ugly_numbers)
    return next(ugly_numbers)
</code></pre>

<p>The last function can be simplified using <code>itertools.islice</code>:</p>

<pre><code>import itertools

def nth_super_ugly_number(n: int, primes: List[int]) -&gt; int:
    ugly_numbers = super_ugly_numbers(primes)
    return next(itertools.islice(ugly_numbers, n - 1, n))
</code></pre>
    </div>