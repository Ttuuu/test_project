<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Re-thinking the problem &amp; re-working your code (unfortunately I have only the basic test case), please see following solution (comments inline):</p>

<pre><code>...
  private void run() {
    // back to LinkedList, since it *is* the "perfect" data structure for this problem/game.
    final LinkedList&lt;String&gt; lst = new LinkedList&lt;&gt;();
    final Scanner sc = new Scanner(System.in);
    final int length = sc.nextInt();
    for (int i = 0; i &lt; length; i++) {
        lst.add(sc.next());
    }
    final int count = sc.nextInt();
    // and we use it via ListIterator, it supports constant time next()(, previous()), remove() and add() operations.
    // ...arrayList offers the same functionality but with more "arraycopy".
    ListIterator&lt;String&gt; it = lst.listIterator();
    // Initialize with (/skip) "Alice" 
    it.next();
    for (int i = 0; i &lt; count; i++) { // &lt;- O(count)
        // command
        final String cmd = sc.next(); // &lt;- O(1)
        // switch (with strings since java7)
        switch (cmd) { // &lt;- O(1)
            case "JOIN": {// join:
                // add "before current next()"
                it.add(sc.next()); // &lt;- O(1)
                // ... and set iterator to "correct" position.
                it.previous();// == name // &lt;- O(1)
                break;
            }
            case "LEAVE": { // leave:
                // remove current player (iterator at correct position)
                it.remove(); // &lt;- O(1)
                break;
            }
            case "NEXT": { // next: (do nothing special, iterator at correct position)
                break;
            }
            default: {
                // throw illegal argument exception...
                break;
            }
        } // end-switch(cmd)
        // checkoverflow
        it = checkOverflow(it, lst); // &lt;- O(1)
        // print next &amp; iterate
        System.out.println(it.next()); // &lt;- O(1)
    } // end-for
  } // end-run()

  /* utility function: resets iterator, when it reached the end of list (!hasNext()) */
  private static ListIterator&lt;String&gt; checkOverflow(ListIterator&lt;String&gt; it, LinkedList&lt;String&gt; lst) {
    return it.hasNext() ? it : lst.listIterator(); // &lt;- O(1)
  }
</code></pre>

<p>see: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html</a></p>

<hr>

<p>Sure, welcome! :) ...</p>

<p>As we found (in <a href="https://codereview.stackexchange.com/a/212798/8740">my intial/quick answer</a>), the <code>O(n)</code> complexities <em>were</em> our bottlenecks (to pass the hard test cases).</p>

<p>We need a data structure wich supports the <em>most efficient</em>:</p>

<ul>
<li>NEXT (iterate/next())</li>
<li>JOIN (at current position/add())</li>
<li>and LEAVE (at current position/remove())</li>
</ul>

<p>... operations. Looking around (all of the known data structures), <em>all these operations</em> can be accomplished by a "(doubly) linked list iterator" in <code>O(1)</code> (constant) time, which made me comment:</p>

<blockquote>
  <p>it <em>is</em> the "perfect" data structure for this problem/game.</p>
</blockquote>

<p>(until "Q(uantum)List" is found ... :))
(due to my usage to &amp; convenience to <code>java.util.Iterator</code> ... I was blinded and <em>forgot</em> about <code>java.util.ListIterator</code>! ... and the "fine advantages" of its usage (<code>Iterator</code> is the parent/lighter interface))</p>

<p>And this enables us to accomplish the task in <code>O(Q) (Q &lt;= 200,000)</code> steps, without actually ever "enumerating the whole list".</p>

<p>The rest is no rocket science (hopefully):</p>

<ul>
<li><code>final</code> keywords on "final variables".</li>
<li>save lines/vars (<code>String name = sc.next()</code>, ... , but also DS gives us "new access").</li>
<li>in intial <code>it.next();</code> we skip "Alice", as implied by the "expected output".</li>
<li>each "command iteration" is started by <code>final String cmd = sc.next();</code></li>
<li><code>switch(cmd) case</code> ...

<ul>
<li>in case of <code>JOIN</code> we (<code>it.add()</code> &amp;) have to reset the cursor/iterator back for one position (<code>it.previous();</code>). (In terms of the game and "main iteration")</li>
<li>in case of <code>LEAVE</code> <code>it.remove()</code> leaves the cursor in correct position (in terms of the game and "main iteration").</li>
</ul></li>
<li><code>checkOverflow</code> before ...</li>
<li>the "main iteration" ("throw ball action" = NEXT ...but also on JOIN and LEAVE <code>= it.next()</code>) happens as last statement of each "command iteration" ...squeezed into <code>System.out.println(it.next())</code>.</li>
</ul>

<p>I think that's it.</p>
    </div>