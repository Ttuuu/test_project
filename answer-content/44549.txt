<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is basically fine, and your unit tests are good.  All I have is nitpicks.</p>

<p>"Excel" in the method names are a bit redundant.</p>

<p>In <code>getExcelColumnNumber()</code>, group <code>- 'A' + 1</code> with parentheses as <code>- ('A' - 1)</code>.  Then the compiler can generate <code>64</code> as a constant.</p>

<p>In <code>getExcelColumnName()</code>, the similarly named variables <code>number</code>, <code>num</code>, and <code>numChar</code> are confusing.</p>

<p>The complexity O(log <em>n</em>) is correct.  (With Big-O notation, the base of the logarithm is an unimportant detail, since the base just scales the logarithm by a constant factor, and constant factors are conventionally discarded with Big-O.  For example, O(log_26 <em>n</em>) = O(ln <em>n</em> / ln 26) = O(ln <em>n</em>).)</p>

<pre><code>public final class ExcelColumn {

    private ExcelColumn() {}

    public static int toNumber(String name) {
        int number = 0;
        for (int i = 0; i &lt; name.length(); i++) {
            number = number * 26 + (name.charAt(i) - ('A' - 1));
        }
        return number;
    }

    public static String toName(int number) {
        StringBuilder sb = new StringBuilder();
        while (number-- &gt; 0) {
            sb.append((char)('A' + (number % 26)));
            number /= 26;
        }
        return sb.reverse().toString();
    }
}
</code></pre>
    </div>