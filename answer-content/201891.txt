<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is quite good, but I believe it can be made more readable and idiomatic.</p>

<h2>Iterator-based design</h2>

<p>I find the question:</p>

<blockquote>
  <p>Is the design of the iterator idiomatic for C++?</p>
</blockquote>

<p>a bit ambiguous because, whereas iterators are a building block of C++ programming, I would say that your program doesn't use them. You write a <code>class</code> named after them, but that doesn't offer an iterator's interface. It's a pity, because your intuition is very correct, and your algorithm can be implemented very elegantly with iterators (and without any memory allocation). The basic block would have this signature:</p>

<pre><code>Iterator parse_digit(int digit, Iterator first, Iterator last);
</code></pre>

<p>If successful, <code>parse_digit</code> find the character corresponding to digit, swap it with the last character of the <code>[first, last)</code> range and return <code>--last</code>. If not, it returns last.</p>

<p>You can then compose <code>parse_two_digits_number</code> over it, and then your date parser.</p>

<p>Without further ado, here's what it would look like:</p>

<pre><code>#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;array&gt;
#include &lt;sstream&gt;
#include &lt;iomanip&gt;

template &lt;typename Iterator&gt;
auto remove_digit(int digit, Iterator first, Iterator last) {
    auto it = std::find(first, last, '0'+digit);
    if (it != last) {
        std::iter_swap(it, std::prev(last));
        return std::prev(last);
    }
    else return last;
}

template &lt;typename Iterator&gt;
auto consume_two_digits_number(int n, Iterator first, Iterator last) {
    auto first_digit = remove_digit(n/10, first, last);
    if (first_digit != last) {
        auto second_digit = remove_digit(n%10, first, first_digit);
        if (second_digit != first_digit) return second_digit;
    }
    return last;
}

template &lt;typename Iterator&gt;    
std::string max_datetime(Iterator first, Iterator last) {
    static constexpr std::array month_lengths = 
        {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};  
    for (int month = 12; month &gt;= 1; --month) {
        auto month_it = consume_two_digits_number(month, first, last);
        if (month_it == last) continue;
        for (int day = month_lengths[month]; day &gt;= 1; --day) {
            auto day_it = consume_two_digits_number(day, first, month_it);
            if (day_it == month_it) continue;
            for (int hour = 23; hour &gt;= 0; --hour) {
                auto hour_it = consume_two_digits_number(hour, first, day_it);
                if (hour_it == day_it) continue;
                for (int min = 59; min &gt;= 0; --min) {
                    auto min_it = consume_two_digits_number(min, first, hour_it);
                    if (hour_it == min_it) continue;
                    else {
                        std::stringstream ss;
                        ss &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; month &lt;&lt; '/' &lt;&lt; day &lt;&lt; ' ' &lt;&lt; hour &lt;&lt; ':' &lt;&lt; min;
                        return ss.str();
                    }
                }
            }
        }
    }
    return "";                    
}
</code></pre>

<h2>Miscellaneous</h2>

<p>You'll also notice I replaced your <code>month_lengths</code> array by a <code>std::array</code> (more idiomatic -that said, I should have specified the type and the size, since deduction guides are a C++17 feature), and used a <code>std::stringstream</code> to compose the return string: it has abysmal performance, but it doesn't matter here and it's more readable.</p>
    </div>