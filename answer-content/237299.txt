<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use resource value itself</h1>

<ul>
<li>dialogBuilder.setMessage accepts a messageId.</li>
<li>SetPositiveButton accepts txtId</li>
<li>setTitle accepts titleId</li>
 - 
</ul>

<h1>Use lambda's</h1>

<p>setPositiveButton accepts a functional interface. due to sam-conversions, you can pass in a lambda.</p>

<pre><code>setPositiveButton(
    resources.getString(R.string.ok), 
     DialogInterface.OnClickListener { dialog, _id -&gt;
         dialog.cancel()
     }
)
</code></pre>

<p>therefor becomes:</p>

<pre><code>setPositiveButton(
    resources.getString(R.string.ok), 
     { dialog, _id -&gt; dialog.cancel() }
)
</code></pre>

<p>In kotlin, you can write a lmabda outside the parenthesis if they are the last argument.<br>
The code therefor becomes:</p>

<pre><code>setPositiveButton(resources.getString(R.string.ok)){ dialog, _id -&gt; 
    dialog.cancel()
)
</code></pre>

<p>And due to the former chapter, it can be rewritten to:
    setPositiveButton(R.string.ok){ dialog, _id -&gt; 
        dialog.cancel()
    )</p>

<p>. Therefor it's not needed to get the string  yourself.
I personally love to us when to make the incrementation way smaller, even if you use it for it then.</p>

<h1>extension-functions</h1>

<p>In Kotlin you can define functions in a way that it looks like they're part of the class.
We can use this to simplify the following code:</p>

<pre><code>chat_button.visibility = if (ShopHours.chatEnabled) {
    View.VISIBLE
} else {
    View.GONE
}
</code></pre>

<p>by adding:</p>

<pre><code>fun View.setVisible(visible: Boolean){
    this.visibility = if(visible) View.Visible else View.Gone
}
</code></pre>

<p>You can write
    chat_button.setVisible(ShopHours.chatEnabled)</p>

<p>You can do this with properties to:</p>

<pre><code>var View.isVisible : Boolean
    get() = this.visibility == View.Visible
    set(value) {
        this.visibility = if(value) View.Visible else View.Gone
    }
</code></pre>

<p>Which allows us to write the former code as:
    chat_button.isVisible = ShopHours.chatEnabled</p>

<p>This property is also provided in <a href="https://developer.android.com/kotlin/ktx" rel="nofollow noreferrer">kotlin-ktx</a>, Androidx.core.view to be precise.</p>

<h1>strings with params</h1>

<p>When you are doing it correct by using string-resources, why not go all the way?<br>
You can get a string with parameters in Android, see <a href="https://developer.android.com/guide/topics/resources/string-resource#FormattingAndStyling" rel="nofollow noreferrer">formatting</a>.<br>
When you want to add a string as parameter use % + paramNumber + $S and pass the params through getString.</p>

<p>example:</p>

<pre><code>&lt;string name="sayHi"&gt;I say %1$S %2$S. &lt;/string&gt;
getString(R.strings.sayHi, "hello", "you")
</code></pre>

<h1>coroutines</h1>

<p>Kotlin has a concept called <a href="https://kotlinlang.org/docs/reference/coroutines-overview.html" rel="nofollow noreferrer">coroutines</a>.<br>
Google has a tutorial <a href="https://codelabs.developers.google.com/codelabs/kotlin-coroutines/#0" rel="nofollow noreferrer">here</a>.<br>
This are lightweight threads and compiler magic.</p>

<p>In pawCache you can write:</p>

<pre><code>suspend fun Request.getResponse(url : String) = suspendCoroutine&lt;Response&gt; {
    client.newCall(request)
        .enqueue(object : Callback {
            override fun onResponse(call: Call, response: Response) {
                if (!response.isSuccessful) it.resume(response)
            }

            override fun onFailure(call: Call, e: IOException) {
                it.resumeWithException(e)
            }
        })
}
</code></pre>

<p>And then you can rewrite your other functions:</p>

<pre><code>suspend fun requestContent(url: String) = 
    Request.Builder().url(url).build().getResponse()
</code></pre>

<p>This will return null for the case where you said doNothing and you have to catch the exception of OnFailure.</p>

<pre><code>suspend fun requestImage(imageUrl: String, dest: ImageView) {
    val uiThreadHandler=Handler()
    if( cache.containsKey(imageUrl)){
        dest.setImageBitmap(cache[imageUrl])
        return
    }
    try {
        val response = Request.Builder().url(imageUrl).build().getResponse() ?: return
        val bm = BitmapFactory.decodeStream(response.body!!.byteStream())
        withContext(Dispatchers.Main){
            cache[imageUrl]=bm
            dest.setImageBitmap(bm)
        }
    } catch(e : Exception){
        println(e.message)
    }
}
</code></pre>

<h1>println</h1>

<p>Assuming you don't have pure-java modules, you use the <a href="https://developer.android.com/reference/java/util/logging/Logger" rel="nofollow noreferrer">android logger</a>.<br>
There is a possibility to extend this by using libraries.<br>
The only one I really heard of isis <a href="https://github.com/JakeWharton/timber" rel="nofollow noreferrer">Timber</a>( <a href="https://medium.com/mindorks/better-logging-in-android-using-timber-72e40cc2293d" rel="nofollow noreferrer">medium article</a> ), but most of the time I'm just using the Android logger.</p>

<h1>Anko</h1>

<p><a href="https://github.com/Kotlin/anko" rel="nofollow noreferrer">Anko</a> is old, not maintained well, but still useful.
For example, You wrote: </p>

<pre><code>val intent : Intent = Intent( context, PetBrowserActivity::class.java)
intent.putExtra("loadurl",content_url)
intent.putExtra("petname",petname)
context.startActivity( intent )
</code></pre>

<p>using <a href="https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Intents" rel="nofollow noreferrer">Anko/commons</a> you can rewrite this to:</p>

<pre><code>startActivity&lt;PerBrowserActivity&gt;(
    "loadurl" to content_url,
    "petName" to petname
)
</code></pre>

<h1>architecture</h1>

<p>You shoulld seperate view, logic and data code should be seperated.
Therefor take a look <a href="https://developer.android.com/topic/libraries/architecture" rel="nofollow noreferrer">at Android architecture components</a>, <a href="https://android.jlelse.eu/architecture-components-mvp-mvvm-237eaa831096" rel="nofollow noreferrer">mvp / mvvm</a> or the <a href="https://badoo.github.io/MVICore/" rel="nofollow noreferrer">mviCore library</a></p>

<p>Hope this helps.</p>
    </div>