<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can remove the concatenation and the manual iteration over <code>iterrows</code> using <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Index.repeat.html#pandas.Index.repeat" rel="nofollow noreferrer"><code>pandas.Index.repeat</code></a>; which uses <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html#numpy.repeat" rel="nofollow noreferrer"><code>numpy.repeat</code></a> under the hood. You can feed this function an int, and each index will be repeated this amount of time; or an array of ints and each index will be repeated the amount of time the corresponding entry in the array.</p>

<p>Combine that with filtering negative values and accessing elements by index using <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html#pandas.DataFrame.loc" rel="nofollow noreferrer"><code>pandas.DataFrame.loc</code></a> and you can end up with:</p>

<pre><code>dfMergedArg = dfGroupArg.merge(dfGroupSelf, how='inner', on=lstOutputColumns)
dfNeededRepetitions = dfMergedArg.iloc[:, -1] - dfMergedArg.iloc[:, -2]
dfNeededRepetitions[dfNeededRepetitions &lt; 0] = 0
dfLessArg = dfMergedArg.loc[dfMergedArg.index.repeat(dfNeededRepetitions)][lstOutputColumns]
</code></pre>

<p>Now the rest of the code would benefit a bit from <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, naming style (lower_case_with_underscore for variable names) and by <a href="https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/" rel="nofollow noreferrer">not prefixing variable names with their type</a> (dfSomething, lstFooâ€¦). Lastly, checking for <code>NaN</code>s should be done using <code>np.isnan</code> and not <code>==</code>:</p>

<pre><code>def __sub__(self, args):
    columns = self.columns.tolist()
    group_self = self.groupby(columns, as_index=False).size().reset_index()
    group_args = args.groupby(columns, as_index=False).size().reset_index()

    duplicated = group_args.merge(group_self, how='inner', on=columns)
    repetitions = duplicated.iloc[:, -1] - duplicated.iloc[:, -2]
    repetitions[repetitions &lt; 0] = 0
    duplicates_remaining = duplicated.loc[duplicated.index.repeat(repetitions)][columns]

    uniques = self.DataFrameIns.merge(group_args, how='left', on=columns)
    uniques = uniques[np.isnan(uniques.iloc[:, -1])][columns]
    return uniques.append(duplicates_remaining).reset_index()
</code></pre>
    </div>