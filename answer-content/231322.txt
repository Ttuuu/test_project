<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not familiar with Java and I don't fully understand the purpose of Handler / parent - it would help us to better review the code if it was explained as pseudocode or via an interface.</p>

<ul>
<li><p>Considering the way <code>get_handler()</code> is implemented... do you really intend to change <code>parent</code>'s handler at runtime? Can't you just set the handler at class instantiation or something? Also, currently, changing <code>parent</code> at runtime is not thread-safe.</p></li>
<li><p>I doubt that you want your logger to be a template. If you use it across all your codebase then either all of the code is a template (which is very troublesome currently for developers and the compiler...) or you end up with using a single version of the logger. Instead consider usage of an interface class <code>ILogHandler</code> so that you could run applications with different handlers without them needing to know anything about it. Sure, calling a virtual function is slower than a regular function but it pales in comparison to everything else the logger needs to do upon a function call. Though, you'd need to implement in the logger what to do with <code>T... args</code>, not in the Handler.</p></li>
<li>Add <code>verbose_level</code>, not just <code>severity_level</code>. At times you'd want to see info_level log from a high level function but ignore warning/errors logs from low level functions.</li>
<li>Also consider writing implementation of short functions when declaring them. It doesn't hinder view of the whole class declaration and you can see the implementation without the need to search for it. I might be spoiled with Visual Studio but it allows to hide implementation of functions in its text editor so in this case even long functions provide little to hindrance when their implementation is written inside class declaration.</li>
<li>Since you work with C++17, consider using <code>std::string_view</code> instead of <code>const std::string&amp;</code>.</li>
<li><p>Use <code>std::forward&lt;T&gt;(args)...</code> when you forward data in template functions as otherwise you might end up with unnecessary data copying:</p>

<pre><code>template&lt;class Handler&gt;
template&lt;class... T&gt;
void bran::basic_logger&lt;Handler&gt;::debug(const std::string&amp; message, T... args) {
     log(log_severity::DEBUG, message, std::forward&lt;T&gt;(args)...);
}
</code></pre></li>
</ul>
    </div>