<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>code:</strong></p>

<ul>
<li><p>Longitude is misspelled as <code>longitutde</code> a few times.</p></li>
<li><p>Use <code>std::int32_t</code> etc. instead of <code>int32_t</code>. The C versions are in the global namespace, but the C++ ones are in namespace <code>std</code>.</p></li>
<li><p>In the <code>Graph</code> class <code>_keyToNode</code> and <code>_coordinatesToNode</code> duplicate data already contained in the <code>Node</code> class (key and screen coordinates respectively). We can either:</p>

<ol>
<li><p>use an <a href="https://en.cppreference.com/w/cpp/container/unordered_set" rel="nofollow noreferrer"><code>unordered_set</code></a> and supply custom <code>Hash</code> and <code>KeyEquals</code> types as template arguments or</p></li>
<li><p>move these data out of the <code>Node</code> class.</p></li>
</ol></li>
<li><p>A named function (e.g. <code>FindNode</code>) may be preferable to overloading the <code>Graph::operator[]</code> (the user may have preconceptions as to what <code>operator[]</code> should do on failure to find a node).</p></li>
<li><p>The <code>protected</code> <code>Graph</code> constructor is a bit weird. Is there any special reason to restrict the construction of a <code>Graph</code> to derived objects / friends, and allow the <code>GraphFactory</code> access to all private class members? If not, just leave the constructor public.</p></li>
<li><p>The <code>std::pair&lt;uint16_t, uint16_t&gt;</code> hash function could probably <a href="https://stackoverflow.com/questions/2590677/how-do-i-combine-hash-values-in-c0x">use a better technique to combine hashes</a>.</p></li>
</ul>

<hr>

<p><strong>concepts:</strong></p>

<p>C++ has the notion of <em>concepts</em>, where classes of different types may adhere to the same static interface. These currently exist in the form of <em><a href="https://en.cppreference.com/w/cpp/named_req" rel="nofollow noreferrer">named requirements</a></em>, and <a href="https://en.cppreference.com/w/cpp/language/constraints" rel="nofollow noreferrer">will soon be in the language itself</a>.</p>

<p>While a <em>concept</em> itself may be named something like <code>Associable</code>, this label refers to the static interface, and not to a concrete class. A more suitable name for the class itself would be <code>Associates</code> or simply <code>Neighbours</code>, and the class would adhere to the <code>Associable</code> <em>concept</em> by providing the appropriate static interface (functions, members, typedefs, etc.).</p>

<p>Template classes or functions would then expect to receive types that adhere to the relevant <em>concept</em>. In this case, the <code>Graph</code> class might instead be templated on <code>Node</code>, and expect it to be e.g. <code>Associable</code> and <code>Identifiable</code>.</p>

<p>Anywya, since the classes shown above are concrete classes, I'd recommend naming them more like this:</p>

<ul>
<li><code>Localizable::Earth -&gt; EarthCoords</code></li>
<li><code>Localizable::Screen -&gt; ScreenCoords</code></li>
<li><code>Associable -&gt; Neighbours</code></li>
<li><code>Identifiable -&gt; Id</code></li>
</ul>

<p>Note that there's no actual relationship between <code>Localizable::Earth</code> and <code>Localizable::Screen</code> so there's no reason for them to share a namespace.</p>

<hr>

<p><strong>pointers:</strong></p>

<p><code>std::shared_ptr</code> implies shared ownership. This is seldom something we actually want or need, as it makes object lifetime much harder to determine.</p>

<p>In this case, there doesn't seem to be any sharing going on. As long as we ensure the lifetime of a <code>Node</code> object is longer than the lifetimes of any <code>Node*</code>s that refer to it, we can use raw pointers safely. In other words, the <code>std::shared_ptr&lt;Node&gt;</code> in the <code>Graph</code> class can be changed to <code>std::unique_ptr&lt;Node&gt;</code>, and all of the <code>std::weak_ptr&lt;Node&gt;</code>s can be <code>Node*</code>s.</p>

<p>Note, however, that we don't actually need to use pointers here at all. We can simply store the node index instead. </p>

<hr>

<p><strong>Graph:</strong></p>

<p>The <code>Graph</code> doesn't need to know about most of what's in the <code>Node</code> class. The minimal data required for a <code>Graph</code> is an adjacency list. Grouping this together with the edge weights into a <code>WeightedGraph</code> is reasonable:</p>

<pre><code>template&lt;class IndexT, class WeightT, class IndexPairHashT = std::hash&lt;std::pair&lt;IndexT, IndexT&gt;&gt;&gt;
struct WeightedGraph
{
    std::unordered_map&lt;IndexT, std::vector&lt;IndexT&gt;&gt; _adjacency;
    std::unordered_map&lt;std::pair&lt;IndexT, IndexT&gt;, WeightT, IndexPairHashT&gt; _edgeWeights;
};
</code></pre>

<p>The <code>Graph</code> now depends only on the index type and weight type, and we're free to store nodes however we want (or not at all) outside of it, which is a lot more flexible.</p>

<p>Note that the screen coordinates are unrelated to the <code>Graph</code>. (In fact, we might want a separate data structure to accelerate finding the nearest point to a mouse click, like a <code>PointQuadTree&lt;ScreenCoords, NodeIndex&gt;</code>.)</p>

<hr>

<p><strong>Dijkstra algorithm:</strong></p>

<ul>
<li>This should be a free function, not a class. It could return the path as a <code>std::vector&lt;Node&gt;</code>, or a struct containing the path and any additional data needed.</li>
<li>It shouldn't throw on failure to find a path (it's would be quite reasonable to encounter unconnected nodes, and we shouldn't use exceptions for flow control).</li>
</ul>

<hr>

<p><strong>misc:</strong></p>

<p>Your xml file has latitude and longitude switched around! I think the data may also be horizontally (longitudinally) stretched, but I could be wrong about that.</p>
    </div>