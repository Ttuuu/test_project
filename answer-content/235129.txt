<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't really see much that's notable. This is some nice looking code.</p>

<p>Minor things though:</p>

<p>If you're going to use type-hints, I think I'd take it a step further and use the generic <code>Dict</code> to specify what types the dictionaries hold:</p>

<pre><code>from typing import Dict

. . .

def get_earthquake_data() -&gt; Dict[str, str]:
   . . .
</code></pre>

<p>And then similarly for the other cases. <code>dict</code> (currently?) doesn't support generic type hints, so <code>Dict</code>, a generic type alias, can be used. Now, for example:</p>

<pre><code>data = get_earthquake_data()
val = data[some_key]  # It can typecheck the key now
val  # And it knows that this is a String
</code></pre>

<p>That also better communicates to the reader what types are involved. </p>

<hr>

<p>I'm on my phone so it's a pain to check, but here:</p>

<pre><code>except Exception as error: 
    print(f'Twilio API error: {error}')
</code></pre>

<p>Is there really not a more specific exception that Twilio throws? I'd see if it has its own base class that you can catch. You don't want to accidentally catch a non-API error there and mask a bug.</p>

<hr>

<pre><code>data = get_earthquake_data().get('data')
eq_magnitude = data.get('mag')
</code></pre>

<p>I'd probably use subscripting there instead of <code>get</code>. Sure, that will allow for a <code>KeyError</code>, but that will cause a more sensical error than it will if <code>None</code> is returned by <code>get</code> and you end up with <code>float(None)</code>. I only use <code>get</code> if I'm expecting a potentially invalid key and I want to handle it by checking the return for <code>None</code> (or a sentinal that I specify). I think avoiding the <code>KeyError</code> like this causes more issues than it solves by allowing bad data to be passed on instead of just dying where the error happened. </p>
    </div>