<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several things to point out here.</p>

<p>For the record, I rewrote and tested the process without a class on my localhost -- the adjustment for you to convert my snippet to suit your class should be simple.</p>

<p>New Snippet:</p>

<pre><code>$slugs = &lt;&lt;&lt;SLUGS
AMERIS BANCORP
ALCENTRA CAPITAL CORP
ABEONA THERAPEUTICS INC
SLUGS;  // yes, I tested the entire battery

const COMPANY_STOPWORDS = '11000th|american|and|beneficial|bond|class|common|company|corporation|corp|commodity|cumulative|co|daily|dep|depositary|depository|debentures|diversified|due|each|etf|equal|equity|exchange|financial|fund|fixedtofloating|fixed|floating|group|healthcare|holdings|holding|inc|incorporated|interests|interest|in|index|income|junior|liability|limited|lp|llc|ltd|long|markets|maturity|municipal|muni|monthly|noncumulative|notes|no|of|one|or|portfolio|pay|partnership|partner|par|perpetual|per|perp|pfd|preference|preferred|redeemable|repstg|representing|represents|rate|sa|smallcap|series|shs|shares|share|short|stock|subordinated|ser|senior|the|three|term|to|traded|trust|two|ultrashort|ultra|value|warrant|weight|[a-z]';

function slugCompany($slug){
    return trim(preg_replace(['/[^\da-z\s]+|\b(?:' . COMPANY_STOPWORDS . ')\b/', '/\s+/'], ['', '-'], strtolower($slug)), '-');
}

foreach (explode(PHP_EOL, $slugs) as $slug) {
    echo "&lt;div&gt;$slug =&gt; " , slugCompany($slug) , "&lt;/div&gt;";
}
</code></pre>

<p>Output:</p>

<pre><code>AMERIS BANCORP =&gt; ameris-bancorp
ALCENTRA CAPITAL CORP =&gt; alcentra-capital
ABEONA THERAPEUTICS INC =&gt; abeona-therapeutics
</code></pre>

<hr>

<p>First about your code...</p>

<pre><code>public static function slugCompany($c){
    $c=strtolower($c);
    $c=preg_replace('/[^\da-z\s]/i', '', $c);
    $words=self::COMPANY_STOPWORDS;
    $c=preg_replace('/\b('.$words.')\b/i', '', $c);
    $c=preg_replace('/(\s+)/i', '-', trim($c));
    return $c; 
}
</code></pre>

<ul>
<li>You are making three separate passes through the string(s).</li>
<li>You are inefficiently finding-replacing each individual "non-digit/non-alpha/non-space" character.</li>
<li>You are making case-insensitive matching, but you know everything is already lowercase.</li>
<li>The capture group on the third <code>preg_replace()</code> call is unnecessary.</li>
<li>You should use one space on either side of the <code>=</code> assignment operator.</li>
</ul>

<hr>

<p>Regarding ArtisticPhoenix's post, it makes a single <code>preg_replace()</code> call and places some importance on readability, but...</p>

<pre><code>public static function slugCompany($company){
    $replace = [
        '/[^\da-z\s]/i'                        =&gt; '', //remove punctuation I guess
        '/\b('.self::COMPANY_STOPWORDS.')\b/i' =&gt; '', //remove these companies
         '/^\s+|\s+$/'                         =&gt; '', //trim
         '/\s+/'                               =&gt; '-' //replace space with -
    ];

    return preg_replace(array_keys($replace), $replace, strtolower($company));
}
</code></pre>

<ul>
<li><code>preg_replace()</code> is making too many separate passes through the string(s).</li>
<li>Case-insensitive matching is used, but everything is already lowercase.</li>
</ul>

<hr>

<p>Some basic principles:</p>

<ol>
<li>Avoid using regular expressions if there is a single non-regex function that can do the same job in a sensible/readable manner.  In my snippet, I am using <code>trim(..., '-')</code> to trim the leading/trailing hyphens rather than another replacement pass of <code>~^-+|-+$~</code>.</li>
<li>Endeavor to reduce total function calls where it doesn't negatively impact your script logic.  In this case, there is no use in calling <code>preg_replace()</code> multiple times because the function is happy to receive an array of patterns and an array of replacements.</li>
<li>When multiple patterns share a duplicate replacement string, try to merge the two patterns -- this means the task is completed in one pass.</li>
<li>When the intention is to matching multiple characters that may possibly be side-by-side, match as many as possible.  <strong>Consider this scenario, you are standing over an open carton of eggs.  I ask you to pick up all the eggs.  Doing 12 squats to extract each egg individually (while good for personal health) is an obviously inefficient choice.  Just reach down one time and pick up the whole carton -- done in one pass.</strong></li>
<li>Don't use capture groups unless you actually need to capture substrings.  While this extends the pattern length by 2 characters, it is a clear indication of pattern intention and removes the possibility of numbered backreferences associated with capture groups.  In other words, use <code>(?:...)</code> versus <code>(...)</code>.</li>
<li>Avoid declaring single-use variables.  There are a few exceptions to this rule (like adding clarity to a line of code via a descriptive variable name AND to reduce horizontal scrolling in a script for devs), but in this case I felt returning a one-liner was tolerable.</li>
<li>You can condense 26 of the alternatives in your <code>const</code> by writing <code>[a-z]</code> versus individually listing letters.  This will improve pattern efficiency and pattern length.</li>
<li>If pattern efficient is the highest priority <strong>AND</strong> the piped <code>const</code> values are very rarely modified, you <em>could</em> go the extra mile and try to reduce the number of "alternatives".  For instance, you can combine <code>...|of|or|o|...</code> to be <code>...|o[fr]?|...</code> and so on.  Some would say that this comes at a cost of readability/maintainability.</li>
</ol>
    </div>