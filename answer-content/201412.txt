<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's an updated version that I made with the help of the answers JVApen and hoffmale posted.</p>

<p>Instead of storing the full string in terminal Trie nodes (this can actually increase the space complexity e.g. for the case of a unary tree), I modified <code>prefix_apply</code> to generate this strings as needed. This also lets us do away with the inheritance.</p>

<p><code>unique_ptr</code> can take care of all the memory management.</p>

<p>I added an erase member function.</p>

<p>Definitely a big improvement! Thanks for the help!</p>

<pre><code>#include &lt;utility&gt;
#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;iostream&gt; // for example usage


struct TrieNode {
    // unique_ptr + trees are a great match since every vertex has a unique parent
    std::map&lt;char, std::unique_ptr&lt;TrieNode&gt;&gt; children;
};

class Trie {
private:
    TrieNode root;

    TrieNode const* find(std::string const&amp; w) const  {
        // Return a pointer to the TrieNode for the last character in w, or nullptr if it doesn't exist.
        TrieNode const* node = &amp;root;
        for (char const c: w) {
            auto const it = node-&gt;children.find(c);
            if (it != node-&gt;children.end()) {
                node = it-&gt;second.get();
            } else return nullptr;
        }
        return node;
    }

    template&lt;typename StringFunction&gt;
    void prefix_apply_helper(TrieNode const* node, std::string&amp; w, StringFunction&amp; f) const{
        // Recursively apply f to all strings at or beneath node in the Trie.
        // w should be the (possibly incomplete) word represented by node.
        if (node-&gt;children.find('\0') != node-&gt;children.end())
            f(w);
        for (auto const&amp; cw: node-&gt;children) {
            if (cw.first != '\0') {
                w.push_back(cw.first);
                prefix_apply_helper(cw.second.get(), w, f);
                w.pop_back();
            }
        }
    }
public:
    void insert(std::string const&amp; w) {
        // Insert a word into the Trie.
        TrieNode* node = &amp; root;
        for (char const c: w) {
            auto const it = node-&gt;children.find(c);
            if (it != node-&gt;children.end()) {
                node = it-&gt;second.get();
            } else {
                auto* new_node = new TrieNode();
                node-&gt;children[c] = std::unique_ptr&lt;TrieNode&gt;(new_node);
                node = new_node;
            }
        }
        node-&gt;children['\0'];
    }

    bool contains(std::string const&amp; w) const {
        // Check if the Trie contains the word
        auto const* node = find(w);
        if (node)
            return node-&gt;children.find('\0') != node-&gt;children.end();
        else return false;
    }

    void erase(std::string const&amp; w) {
        // Remove the word from the Trie.
        TrieNode* node = &amp;root;
        bool one_child_chain = false;
        TrieNode* one_child_chain_start = nullptr;
        char one_child_chain_first = '\0';

        for (char const c: w) {
            auto const it = node-&gt;children.find(c);
            if (it != node-&gt;children.end()) {
                if (!one_child_chain &amp;&amp; it-&gt;second-&gt;children.size() == 1) {
                    one_child_chain = true;
                    one_child_chain_start = node;
                    one_child_chain_first = c;
                } else if (it-&gt;second-&gt;children.size() != 1) {
                    one_child_chain = false;
                }
                node = it-&gt;second.get();
            } else return;
        }
        node-&gt;children.erase('\0');
        if (one_child_chain)
            one_child_chain_start-&gt;children.erase(one_child_chain_first);

    }

    template&lt;typename StringFunction&gt;
    void prefix_apply(std::string prefix, StringFunction&amp; f) const {
        // Apply f to every word in the Trie that has the given prefix
        auto const* node = find(prefix);
        if (node)
            prefix_apply_helper(node, prefix, f);
    }
};

int main(int argc, const char * argv[]) {
    Trie t;
    t.insert("apple");
    t.insert("app");
    t.insert("appalachians");
    t.insert("banana");
    t.erase("appalachians");
    t.insert("appalled");
    t.prefix_apply("app", [](std::string const&amp; w) { std::cout &lt;&lt; w &lt;&lt; '\n'; });
}
</code></pre>
    </div>