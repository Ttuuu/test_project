<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I thought I might compliment the other answers with an approach that follows the OP intuition closer.</p>

<p>I made it recursive, and factored out the creation of the sequence to a helper function :</p>

<pre><code>def nth_label(n,symbols,accumulator=""):
  q = n // len(symbols)
  m = n % len(symbols)
  if q==0:
    return symbols[m]+accumulator
  else:
    return nth_label(q-1,symbols,symbols[m]+accumulator)

def generate_labels():
  i = 0
  while True:
     yield nth_label(i, "abcdefghijklmnopqrstuvwxyz")
     i += 1
</code></pre>

<p>Please be aware I just tested the equivalent javascript, not this python version!</p>

<p>Note that though this uses a recursive function, the depth of the recursion is only logarithmic on the number, with the base being the number of symbols (so a small number of recursions in practice).</p>

<p>It's easy to convert it to an iterative function, if a little less elegant IMO. It might be easier to see how this is different from  itertools.product in the explicitly iterative version:</p>

<pre><code>def nth_label(n,symbols):
  result = ""
  q = n // len(symbols)
  m = n % len(symbols)
  while q&gt;0:
    result = symbols[m]+result
    n = q - 1
    q = n // len(symbols)
    m = n % len(symbols)

  return symbols[m]+result

def generate_labels():
  i = 0
  while True:
     yield nth_label(i, "abcdefghijklmnopqrstuvwxyz")
     i += 1
</code></pre>

<p>It's proportional to log_k of n, where k is the number of symbols, in both space and time.</p>

<p>Sorry for the previous errors, this one <a href="https://tio.run/##dZDdTsMwDIXv@xRWJKRUK1rGJVL3FNwhhNLOtAHHbfPD6F6@ZOmEJmC5so@T7xxnnEM/8MOyHPANOPSvpBskyZWfbTOQr3TbRhtJh8HVQpSPBYBDHylADUKkbkoFw3YLhCwvr8qk26zf/ZaPvSGEaa/OpCvW5cqzfdmsWh5zmkxwD7vc3bK6YZajhuj4H3hx3rdDRqcDrkt7mbczCaV@gj65iGtSmA3S4eqPTAVCN20Cdb15/yDLwzg5H@Ln8Ws@iTVYwm3qFL8YneEgyfggT2aUf6wrcJo7lDulVJnOsnwD" rel="nofollow noreferrer">is tested ;)</a></p>
    </div>