<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some things:</p>

<ul>
<li>It seems the global structure could be easier understood by pulling out <code>Interval</code> as a top level class and then creating an <code>IntervalList</code> class (maybe as a child of <code>List</code>). <code>IntervalList</code> could then have a dummy constructor which takes nothing and creates an empty list plus an <code>addInterval</code> method which adds a single <code>Interval</code> to the list. This way as far as I can tell nothing has to be static and the merge code can be simpler.</li>
<li>The <code>toString</code> method is redundant.</li>
<li><code>shouldBeCalculatedCorrectlyWhenOneIntervalIsSubsumedByTheOther</code> tests subsumption with both a single and multiple intervals. To me this is a hint that the refactoring suggestion at the top of this list will simplify things, since the second part of that test is pointless if the looping happens in the caller.</li>
<li><code>mergeRanges</code> tests various combinations of intervals, and like <code>shouldBeCalculatedCorrectlyWhenOneIntervalIsSubsumedByTheOther</code> should be redundant after a refactoring.</li>
<li>In general, names like <code>shouldBeCalculatedCorrectlyWhenâ€¦</code> are not helpful. First, obviously you aren't going to test when things are calculated <em>incorrectly,</em> so it's a vacuous statement. Second, it's not the most precise statement you can make about what you expect it to do. From what I understand it seems the purpose is to verify that the original interval is returned when merged with a contained interval (pointing towards something like <code>shouldReturnOriginalIntervalAfterMergingWithSubsumedInterval</code>), alternatively that the <code>List</code> of <code>Interval</code>s is unchanged after merging with a contained interval (hinting at something like <code>shouldNotChangeIntervalWhenMergedWithSubsumedInterval</code>). I'm being deliberately vague here because it's very context dependent what the test should be called - the idea is to concisely give the reader as much information as possible about how the code should operate.</li>
<li>Always test the entire result. The first test in <code>shouldBeCalculatedCorrectlyWhenOneIntervalIsSubsumedByTheOther</code> checks the first element of <code>mergedIntervals</code>, but it doesn't verify that that is the <em>only</em> element in there. It would be very easy for a bug to sneak in where there are more elements in the list than you are checking. In this case I would simply check equality of the entire <code>mergedIntervals</code>.</li>
</ul>
    </div>