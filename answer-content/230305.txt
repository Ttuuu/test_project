<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So you don't need two loops here. You can just use one loop to </p>

<ol>
<li>First, get the selected items</li>
<li>Remove the selected items from the actual array. So you can later put them in the index you want.</li>
</ol>

<p>So to do that, first, you have to retrieve the indices where the selected obj is there. Then spice it. IN the loop</p>

<pre><code>for (let index in list) {
    const item = list[index];

    if (item.selected) {
        selected.push(item);
        list.spice(index,1)
    }
}

</code></pre>

<p>So you don't have to run another loop to remove the null values. You can now simply just put the values using another spice. That saves you a loop.</p>

<p>You shouldn't be using <code>for ... in</code> for the reasons you have got in RoToRa's answer.</p>

<p><strong>My approach:</strong> I prefer using just one filter. In that, you can do the same thing.</p>

<pre><code>function drag_and_drop(list, before_index) {
  const selected = list.filter((obj,i) =&gt; obj.selected ? list.splice(i,1) : obj.selected)
  list.splice(before_index - selected.length , 0, ...selected)
  return list
}
</code></pre>

<p>So here, first we check if the object is selected and if it is then we'll just splice it off and if we didn't got a selected item then we can just return the selected item in the selected loop.</p>

<p>So now you have inside selected, the values which have <code>item.selected</code> as true and your list don't have them now because you did splice already in the filter, so you can just splice them with another splice. </p>

<p>Now the index is not anymore <code>before_index</code> it's two values more, because we took out two objects. So to balance that, we will do <code>before_index - selected.length</code> because that's the number of indexes we are going to drop.</p>
    </div>