<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think what you are missing is dependency injection and dependency inversion.</p>

<p>You should have something like</p>

<pre><code>let keychainService = KeychainService()
let apiClient = ApiClient(keychainService: keychainService)
let loginService = LoginService(apiClient: apiClient, keychainService: keychainService)
let loginViewController = LoginViewController(loginService: loginService)
</code></pre>

<p>everything about headers and http goes to ApiClient, as well as adding the token to some requests, and retries.
everything about requesting a new user goes to loginService.
for reading and saving tokens and perhaps current user info, you can use KeychainService.</p>

<p>Note that you have to use protocols, so, the view controller relies on an abstraction, not a concrete implementation.</p>

<p>To manage this, you can use factory methods (a method that returns the view controller properly initialised) or frameworks like winject or DIP.</p>

<p>BTW, when using dependency inversion and injection, it is super easy to apply unit testing. You can very easily to create a mock of the login service and test that your view controller works fine.</p>
    </div>