<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Handling values not in dict in <code>prime_factorization</code></strong></p>

<p>In 2 places in <code>prime_factorization</code>, we end up performing dictionnary lookup to set the default value 0 when needed.</p>

<p>There are various other ways to do so:</p>

<p>We could use a variable to store the coefficient for the current divisor:</p>

<pre><code>    # dealing with even prime numbers - e.g. 2
    d = 2
    coef = 0
    while n % d == 0:
        coef += 1
        n = n // d
    if coef:
        prime_dict[d] = coef

    # dealing with odd numbers
    for d in range(3, int(sqrt(n))+1):
        coef = 0
        while n % d == 0:
            coef += 1
            n = n // d
        if coef:
            prime_dict[d] = coef
</code></pre>

<p>(Note that <code>if coef</code> is not required if we do not mind having 0s in our dictionnary).</p>

<p>An alternative could be to use an appropriate data structure.</p>

<pre><code>import collections

def prime_factorization(n: int) -&gt; dict:
    '''
    Returns a dict with the prime factorization of the integer n, where the keys of the dict are the prime numbers
    and the values are the powers in the factorization for the appropriate prime number key.
    :param n: an integer we want to compute he's prime factorization
    '''
    prime_dict = collections.defaultdict(int)

    # dealing with even prime numbers - e.g. 2
    d = 2
    while n % d == 0:
        prime_dict[d] += 1
        n = n // d

    # dealing with odd numbers
    for d in range(3, int(sqrt(n))+1):
        while n % d == 0:
            prime_dict[d] += 1
            n = n // d
</code></pre>

<p>Or a Counter:</p>

<pre><code>import collections

def prime_factorization(n: int) -&gt; dict:
    '''
    Returns a dict with the prime factorization of the integer n, where the keys of the dict are the prime numbers
    and the values are the powers in the factorization for the appropriate prime number key.
    :param n: an integer we want to compute he's prime factorization
    '''
    prime_dict = collections.Counter()

    # dealing with even prime numbers - e.g. 2
    d = 2
    while n % d == 0:
        prime_dict[d] += 1
        n = n // d

    # dealing with odd numbers
    for d in range(3, int(sqrt(n))+1):
        while n % d == 0:
            prime_dict[d] += 1
            n = n // d
</code></pre>

<p>However, my preference is to completely split the concerns between the logic generating the prime divisors and the one counting them. Using a generator, we can get something like:</p>

<pre><code>import collections

def yield_prime_factors(n: int):
    '''Yield prime factors.'''
    d = 2
    while n % d == 0:
        yield d
        n = n // d

    # dealing with odd numbers
    for d in range(3, int(sqrt(n))+1):
        while n % d == 0:
            yield d
            n = n // d

    # In case n is prime by itself
    if n &gt; 1:
        yield n


def prime_factorization(n: int) -&gt; dict:
    '''
    Returns a dict with the prime factorization of the integer n, where the keys of the dict are the prime numbers
    and the values are the powers in the factorization for the appropriate prime number key.
    :param n: an integer we want to compute he's prime factorization
    '''
    return collections.Counter(yield_prime_factors(n))
</code></pre>

<p><strong>Iterating over keys and values in <code>smallest_dividable_num</code></strong></p>

<p>You use <code>for k,_ in tmp_dict.items()</code> which dumps the values from the dict and use <code>tmp_dict[k]</code> which gets the values from the dict.</p>

<p>You could as well just write:</p>

<pre><code>    tmp_dict = prime_factorization(i)
    for k, v in tmp_dict.items():
        if k not in prime_dict or prime_dict[k] &lt; v:
            prime_dict[k] = v
</code></pre>

<p>which can also be written:</p>

<pre><code>    for k, v in prime_factorization(i).items():
        if k not in prime_dict or prime_dict[k] &lt; v:
            prime_dict[k] = v
</code></pre>

<p><strong>Using max and default values</strong></p>

<p>The snippet just above could be written by taking advantage of the Python builtins:</p>

<pre><code>        prime_dict[k] = max(v, prime_dict.get(k, 0))
</code></pre>

<p><strong>Using in place operator</strong></p>

<p>You can write things such as:</p>

<pre><code>        n //= d
</code></pre>

<p>or</p>

<pre><code>    res *= (k**v)
</code></pre>

<p>to avoid repeating the left member of the operand.</p>

<p><strong>A different algorithm</strong></p>

<p>The algorithm is all about computing <a href="https://en.wikipedia.org/wiki/Least_common_multiple" rel="nofollow noreferrer">Least Common Multiple</a> which can be easily computed with the <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor" rel="nofollow noreferrer">Greatest Common Divisor</a>.</p>

<p>When this is implemented and tests cases are rewritten to ensure benchmark gives relevant timing:</p>

<pre><code>from timeit import default_timer as timer
import functools

def gcd(a, b):
    """Computes gcd for 2 numbers."""
    while b:
        a, b = b, a % b
    return a


def lcm(a, b):
    """Computes lcm for 2 numbers."""
    return a * b // gcd(a, b)


def lcmm(*args):
    """Computes lcm for numbers."""
    return functools.reduce(lcm, args)

def smallest_dividable_num(n:int) -&gt; int:
    '''
    Returns the smallest integer whose dividable by all the numbers from 1 to n.
    :param n: an integer upper bound which we want to compute the smallest divisable num from 1 to it.
    '''
    return lcmm(*range(1, n + 1))


if __name__ == "__main__":
    start = timer()
    for i in range(20):
        assert smallest_dividable_num(10) == 2520
        assert smallest_dividable_num(6) == 60
        assert smallest_dividable_num(20) == 232792560
    for i in range(1, 40):
        smallest_dividable_num(i)
    end = timer()
    print(end - start)
</code></pre>
    </div>