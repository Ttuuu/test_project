<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    var result = new List&lt;ScrapCategory&gt;();
    ...
                if (!result.Contains(parent))
</code></pre>
</blockquote>

<p>There's one performance problem. Use a data structure which gives fast <code>Contains</code> checks: typically <code>HashSet&lt;&gt;</code>.</p>

<hr>

<blockquote>
<pre><code>                var parent = categories.Where(x =&gt; x.Id == parentId)?.First();
</code></pre>
</blockquote>

<p>There's another one. I assume that IDs are unique, in which case <code>lookup = categories.ToDictionary(category =&gt; category.Id)</code> will give you a fast hash map from ID to category.</p>

<hr>

<blockquote>
<pre><code>        if (category.Description.IndexOf(searchString, StringComparison.OrdinalIgnoreCase) &gt;= 0)
            result.Add(category);

        if (category.ParentId &gt; 0)
        {
            int parentId = category.ParentId;

            while (parentId &gt; 0)
            {
                ...
            }
        }
</code></pre>
</blockquote>

<p>Is this definitely correct? It's not supposed to be</p>

<pre><code>        if (category.Description.IndexOf(searchString, StringComparison.OrdinalIgnoreCase) &gt;= 0)
        {
            result.Add(category);

            if (category.ParentId &gt; 0)
            {
                ...
            }
        }
</code></pre>

<p>?</p>

<p>Either way, the <code>if (category.ParentId &gt; 0)</code> is pointless. The test is repeated by the <code>while</code> loop, and a single assignment to a local variable isn't going to be a performance bottleneck.</p>

<hr>

<blockquote>
<pre><code>                if (!result.Contains(parent))
                    result.Add(parent);
</code></pre>
</blockquote>

<p>Note that with the suggestion of making <code>result</code> a <code>HashSet</code> it becomes preferable to just call <code>Add</code>, which returns a <code>bool</code> to tell you whether it changed anything. If it didn't, you can break out of the loop, because you know that all of the further ancestors have already been added.</p>

<hr>

<p>The effect of these changes (except the one I'm unsure about) is</p>

<pre><code>public ScrapCategory[] Filter(ScrapCategory[] categories, string searchString)
{
    var lookup = categories.ToDictionary(category =&gt; category.Id);
    var result = new HashSet&lt;ScrapCategory&gt;();

    foreach (ScrapCategory category in categories)
    {
        if (category.Description.IndexOf(searchString, StringComparison.OrdinalIgnoreCase) &gt;= 0)
            result.Add(category);

        int parentId = category.ParentId;
        while (parentId &gt; 0)
        {
            var parent = lookup[parentId];
            if (!result.Add(parent))
                break;
            parentId = parent.ParentId;
        }
    }

    return result.OrderBy(x =&gt; x.Level).ToArray();
}
</code></pre>
    </div>