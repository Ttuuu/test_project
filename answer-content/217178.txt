<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>CalcLogic</code> should only deal with <code>BigDecimal</code> values; not <code>String</code> values.</p>

<p>Consider the symmetry of input and output:</p>

<pre><code>class CalcLogic {
    public void       setPrinciple(String principle) { ... }
    public BigDecimal getInitialAmount() { ... }
}
</code></pre>

<p>or</p>

<pre><code>class CalcLogic {
    public void       setPrinciple(BigDecimal principle) { ... }
    public BigDecimal getInitialAmount() { ... }
}
</code></pre>

<p>Why would you <code>setXxxx()</code> a <code>String</code> value and <code>getXxxx()</code> a <code>BigDecimal</code>?  This class deals with numbers, specifically money.  Money values go in; money values come out.</p>

<hr>

<p>Along that vein, you should write the member functions following the Java Bean standard.  Instead of <code>monthlyInterest()</code>, you should name the method <code>getMonthlyInterest()</code>.</p>

<hr>

<p>The <code>CalcListener</code> class is breaking encapsulation.  It requires exactly the same fields as a the <code>UserInterface</code> class, and all those fields have to be passed in the constructor.  If you add a field, you have to add code in many places to ensure the class definitions are kept in sync.</p>

<p>Instead, <code>CalcListener</code> could be an inner class.</p>

<pre><code>public class UserInterface implements Runnable {

    private JTextField principal;
    // ... etc ...

    class CalcListener implements ActionListener {

        private final CalcLogic calc = new CalcLogic();

        @Override
        public void actionPerformed(ActionEvent ae) {
            calc.setPrinciple(new BigDecimal(principle.getText()));
            // ... etc ...
        }
    }

    private void generateVariables() {
        // ... etc ...
        button.addActionListener(new CalcListener());
    }

    // ... etc ...
}
</code></pre>

<p>As an inner class, <code>CalcListener</code> has access to all the <code>private</code> members of <code>UserInterface</code>, so there is no need to pass them all in a call to the <code>CalcListener()</code> constructor.</p>

<p>It is still breaking encapsulation, albeit in a different way - one which requires a lot less code.</p>

<hr>

<p>Instead of using <code>JTextField</code>, you probably want to use <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.desktop/javax/swing/JFormattedTextField.html" rel="nofollow noreferrer"><code>JFormattedTextField</code></a>.</p>

<p>The <code>JFormattedTextField</code> can perform the work of converting between the display format, a <code>String</code>, and the model object, in this case a <code>BigDecimal</code>.</p>

<p>Use a helper function to create the <code>JFormattedTextField</code>, to set it up properly.</p>

<pre><code>private static JFormattedTextField bigDecimalField(String initialValue, String format) {
    BigDecimal value = new BigDecimal(initialValue);
    JFormattedTextField tf = new JFormattedTextField(value);
    DefaultFormatter fmt = new NumberFormatter(new DecimalFormat(format));
    fmt.setValueClass(value.getClass());
    DefaultFormatterFactory factory = new DefaultFormatterFactory(fmt, fmt, fmt);
    tf.setFormatterFactory(factory);

    return tf;
}
</code></pre>

<p>Create the fields like:</p>

<pre><code>private final JFormattedTextField principle = bigDecimalField("0.00", "#.00");
// ...etc..
</code></pre>

<p>And reference the values like:</p>

<pre><code>        @Override
        public void actionPerformed(ActionEvent ae) {
            calc.setPrinciple((BigDecimal) principle.getValue());
            // ... etc ...
        }
</code></pre>

<p>Notice, you are no longer retrieving a text string from the field, but the actual model object ... a <code>BigDecimal</code>.</p>

<p>Of course, you can do better by declaring your own <code>BigDecimalField</code> class, which returns the correctly cast return value, so the caller doesn't have to cast all the time.</p>
    </div>