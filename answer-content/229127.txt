<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's no definition in scope for <code>size_t</code>.  Since the description implies that you want <code>std::size_t</code>, you'll need</p>

<pre><code>#include &lt;cstddef&gt;
using std::size_t
</code></pre>

<p>But I recommend just writing <code>std::size_t</code> in full where you use it - that's much clearer to readers.</p>

<hr>

<blockquote>
<pre><code>size_t get_str_size(const char* temp){
            size_t s=0;
            while( temp[s] != '\0' )s++;
            return s;
        }
</code></pre>
</blockquote>

<p>You've just re-implemented <code>std::strlen()</code> for no good reason.</p>

<hr>

<blockquote>
<pre><code>    char* tempcopy = new char[original_size]; // holds the copy of the temp

    char *new_version = new char[ original_size + (new_size-old_size) ];

    delete tempcopy;
    delete new_version;
</code></pre>
</blockquote>

<p>Memory allocated with <code>new[]</code> must be released using <code>delete[]</code> (not <code>delete</code>).  Valgrind will catch this error for you.</p>

<hr>

<p>We have a memory leak if the first allocation succeeds and the second fails, because there is no <code>delete[] tempcopy</code> if an <code>std::bad_alloc</code> is thrown.</p>

<hr>

<p>We reference deleted memory here:</p>

<blockquote>
<pre><code>    temp = (const char*)new_version;

    delete new_version;

    std::cout &lt;&lt; &amp;temp &lt;&lt; "\t" &lt;&lt; temp &lt;&lt; std::endl;
</code></pre>
</blockquote>

<p>That's Undefined Behaviour (and also caught by Valgrind - I really recommend you run your code under Memcheck, or any similar tool of your choice).</p>

<hr>

<blockquote>
<pre><code>int main(int argc, char **argv){
</code></pre>
</blockquote>

<p>Since we never use the arguments, there's no need to give them names; moreover, there's a signature of <code>main()</code> we can use with no arguments:</p>

<pre><code>int main()
</code></pre>

<hr>

<blockquote>
<pre><code>     for( int i =0 ; i &lt;= original_size; i++ ){
</code></pre>
</blockquote>

<p>Avoid comparing signed values (such as <code>i</code>) against unsigned ones (such as <code>original_size</code>).  We probably want the range of <code>i</code> to match, too, so just use the same type for both.</p>

<hr>

<p>The code isn't very robust against a range of inputs.  In particular, if <code>edelim</code> is less than <code>ldelim</code>, we'll get (unsigned) integer overflow when we compute <code>old_size</code>, giving incorrect results.</p>

<hr>

<p>Overall, the code looks very much like C code - and poor C code at that (e.g. copying 1 char at a time, rather than with <code>memcpy()</code>).  A C++ implementation (using <code>std::string</code>) is much shorter and more natural.</p>
    </div>