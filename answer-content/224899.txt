<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Application Architecture</h1>

<blockquote>
  <p>The architecture of the application is divided into models and views to separate the data and business model 
  from the user interface. Within the models there is an additional division, there are models that represent the 
  database tables and there are models that represent a row of data within each database table.</p>
</blockquote>

<p>You missed an opportunity to split view layout from its logic using <a href="https://www.markwithall.com/programming/2013/03/01/worlds-simplest-csharp-wpf-mvvm-example.html" rel="noreferrer">Model-View-ViewModel</a>:</p>

<ul>
<li><strong>View</strong>: any user or data control represented in xaml</li>
<li><strong>ViewModel</strong>: the data context a view binds to and provides access to the application layer</li>
<li><strong>Model</strong>: any services, entities and dependencies used in the application, and accessible to the view models</li>
</ul>

<p>The classes that reside in the model don't require to be *Model classes or even to be in the same layer. You have distinguished between (1) data table models
and (2) data record models. It is more common to split these into explicit layers:</p>

<ul>
<li><strong>Presentation Layer</strong>: the views and view models</li>
<li><strong>Business Layer</strong>: the classes that represent your business classes (Book, Author, Rating, ..)</li>
<li><strong>Data-Access Layer</strong>: objects that manage interaction between the database and the business entities (preferably using an <a href="https://stackoverflow.com/questions/3187928/best-orm-to-use-with-c-sharp-4-0">ORM Framework</a>)</li>
</ul>

<hr>

<h1>Design Metrics</h1>

<blockquote>
  <p>Was inheritance abused or over used?</p>
</blockquote>

<p>Your models have a depth of 2, max 3 classes in inheritance. 
Given the fact you have implemented your own base classes to provide custom ORM (as explained by the OP), I find this complexity within reasonal bounds.</p>

<blockquote>
  <p>Is this a SOLID OOP design?</p>
</blockquote>

<p>It's an attempt at SOLID and OOP design, but with several offenses against these principles.</p>

<h3>Single responsibility principle</h3>

<ul>
<li>data table models have properties that represent list box values; these properties should be on view models</li>
<li>data record models serve both as business entities and records with database mapping aware properties; these objects should become business entities (preferrably <a href="https://en.wikipedia.org/wiki/Plain_old_CLR_object" rel="noreferrer">POCO</a>) with the database aware mapping extracted and stored inside the data table models</li>
<li>views should offset the logic to view-models, who in term use business entities and data layer objects in the backend</li>
</ul>

<h3>Open/closed principle</h3>

<ul>
<li>the models are not closed for changes; you provide public accessors to the internal state; instead you should take more care of encapsulation and provide methods to request the models to change data</li>
</ul>

<h3>Dependency inversion principle</h3>

<ul>
<li>your application depends your models, there is no easy way to replace any of your layers by another; to allow dependency inversion, you should let layers communicate to each other through interfaces, and use <a href="https://en.wikipedia.org/wiki/Dependency_injection" rel="noreferrer">Dependency Injection</a> to configure the layers at runtime.</li>
</ul>

<h3>Test-driven design</h3>

<ul>
<li>it's hard to test the seperate layers, since you don't use interfaces between layers, making it virtually impossible to mock out dependencies</li>
<li>you have included message box prompts inside model logic, which is a pain to test with a unit tests</li>
</ul>

<hr>

<h1>Review</h1>

<ul>
<li>You should read the <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions" rel="noreferrer">C# Naming Conventions</a>. Many of your method and variable names are offenses against conventions.</li>
<li>Don't use Green and Red for button colors. They make the app look like a color book. It's better to use a set of icons that are universal.</li>
<li>Don't use center alignment for a list of buttons, instead wrap vertically with the same width.</li>
</ul>

<h3>CategoryTableModel</h3>

<p>Using magic string literals is a design smell. If you must work with such strings, declare them in a dedicated class <code>DataSchemaConstants</code>.</p>

<blockquote>
<pre><code>public CategoryTableModel() : base("bookcategories", "getAllBookCategoriesWithKeys", "addCategory")
{
}
</code></pre>
</blockquote>

<p>Use the arrow notation when you can.</p>

<pre><code>public string CategoryTitle(uint Key) =&gt; KeyToName(Key);
</code></pre>

<h3>AuthorTableModel</h3>

<p>It is unclear what magic you are performing to get a key in <code>AuthorKey</code> when <code>if (key &lt; 1)</code>. Methods should be self-explaining. But this one needs comments. Why should <code>key &lt; 1</code> be able to get remapped to a valid key? Also, prefer proper <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated" rel="noreferrer">string interpolation</a> over string concatenation.</p>

<blockquote>
<pre><code>public uint AuthorKey(AuthorModel author)
{
    uint key = author.AuthorId;
    if (key &lt; 1)
    {
        DataTable dt = AuthorTable;
        string filterString = "LastName = '" + author.LastName + // .. removed for brevity
        DataRow[] authors = dt.Select(filterString);
        if (authors.Length &gt; 0)
        {
            if (!uint.TryParse(authors[0][AuthorIDColumnIndex].ToString(), out key))
            {
                key = 0;
            }
        }
        else
        {
            key = 0;
        }
    }

    return key;
}
</code></pre>
</blockquote>

<h3>AuthorModel</h3>

<p>Here's a blatant offense against single-responsibility. Don't use representation logic in your models. <code>MessageBox</code> should never be called here. Instead, throw an exception, and catch it at the top most layer, at the view-model. Also think about how to test this code. A unit test with a prompt in it, is not the best idea.</p>

<blockquote>
<pre><code>private void SetFirstName(string textBoxInput)
{
    if (string.IsNullOrEmpty(textBoxInput))
    {
        string errorMsg = "The first name of the author is a required field!";
        MessageBox.Show(errorMsg);
        errorWasReported = true;
    }
    else
    {
        SetParameterValue("First Name", textBoxInput);
    }
}
</code></pre>
</blockquote>

<h3>Other Classes</h3>

<p>Should be replaced with an ORM Framework.</p>

<hr>
    </div>