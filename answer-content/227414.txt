<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're not scared of a little bit of <code>unsafe</code> code then you can get rid of the copying of the buffer entirely as there is a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.getstring?view=netframework-4.8#System_Text_Encoding_GetString_System_Byte__System_Int32_" rel="nofollow noreferrer"><code>GetString</code></a> overlaod that accepts a length of the buffer. Or <a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.getstring?view=netframework-4.8#System_Text_Encoding_GetString_System_Byte___System_Int32_System_Int32_" rel="nofollow noreferrer">another overload</a> that doesn't require unsafe code</p>

<p>The loop in <code>ReadTo</code> could begin like this:</p>

<pre><code>    foreach (var (buffer, length) in stream.EnumerateBuffers(bufferSize))
    {
        var substring = default(string);
        unsafe
        {
            fixed (byte* p_buffer = buffer)
            {
                substring = encoding.GetString(p_buffer, length);
            }
        }   

        // or

        substring = encoding.GetString(buffer, 0, length);
</code></pre>

<p>where <code>EnumerateBuffers</code> now returns tuples with the buffer and its length:</p>

<pre><code>public static IEnumerable&lt;(byte[] Buffer, int Length)&gt; EnumerateBuffers(this Stream stream, int bufferSize = DefaultBufferSize, long count = -1)
{
    byte[] buffer = new byte[bufferSize];
    do
    {
        long read = stream.Read(buffer, 0, bufferSize);
        if (read &lt; 1)
        {
            break;
        }
        if (count &gt; -1)
        {
            count -= read;
            if (count &lt; 0)
                read += count;
        }

        yield return (buffer, (int)read);

    } while (true);
}
</code></pre>
    </div>