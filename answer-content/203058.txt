<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Java based suggestions</h3>

<ul>
<li><p>in <code>getIsomorphism</code>, the comparator you define can be a static final field. It can additionally be simplified to just:</p>

<pre><code>Comparator&lt;DirectedGraphNode&gt; comparator = Comparator.comparing(n -&gt; n.children().size())
      .thenComparing(n -&gt; n.parents().size());
</code></pre>

<p>If you were exposing <code>inDegree</code> and <code>outDegree</code> you could put <code>DirectedGraphNode::inDegree</code> and <code>DirectedGraphNode::outDegree</code> as the key-extractor functions instead.</p></li>
<li><p>Just below that you're iterating over an ordered collection of nodes, again comparing their <code>inDegree</code> and <code>outDegree</code>. If java were a more functional language, this could be better expressed like the following:</p>

<pre><code>all (== 0) $ map comparator::compare $ zip nodeList1 nodeList2
</code></pre>

<p>What happens here is essentially that the ordered items are associated together into a tuple, the comparator compares them and the <code>== 0</code> checks that all elements are equal according to the comparator.<br>
I'm not quite sure why you're not reusing the comparator here. That would simplify the code to:</p>

<pre><code>for (int i = 0; i &lt; nodeList1.size(); ++i) {
    if (0 != comparator.compare(nodeList1.get(i), nodeList2.get(i))) {
        return null;
    }
}
</code></pre></li>
<li><p><code>graphToList</code> could be written a bit more succinctly as:</p>

<pre><code>return StreamSupport.stream(graph.spliterator(), false).collect(Collectors.toList());
</code></pre></li>
<li><p>in <code>bruteForceIsomorphism</code> you could look whether the filling of <code>list1</code> and <code>list2</code> could be simplified by constructing the sublist explicitly and keeping a reference to it. Since I'm just writing this down without an IDE, I'm having trouble to reorganize this into a stream operation, but as far as I can tell, you're grouping these nodes by their degrees.<br>
As starting point, check out:</p>

<pre><code>List&lt;List&lt;DirectedGraphNode&gt;&gt; list1 = new ArrayList&lt;&gt;();
List&lt;List&lt;DirectedGraphNode&gt;&gt; list2 = new ArrayList&lt;&gt;();
List&lt;DirectedGraphNode&gt; sublist1 = new ArrayList&lt;&gt;();
List&lt;DirectedGraphNode&gt; sublist2 = new ArrayList&lt;&gt;();

sublist1.add(nodeList1.get(0));
sublist2.add(nodeList2.get(0));

int previousInDegree = nodeList1.get(0).parents().size();
int previousOutDegree = nodeList2.get(0).children().size();

for (int i = 1; i &lt; nodeList1.size(); ++i) {
    DirectedGraphNode currentNode = nodeList1.get(i);
    int currentInDegree = currentNode.parents().size();
    int currentOutDegree = currentNode.children().size();

    if (previousInDegree != currentInDegree || previousOutDegree != currentOutDegree) {
        list1.add(sublist1);
        list2.add(sublist2);
        sublist1 = new ArrayList&lt;&gt;();
        sublist2 = new ArrayList&lt;&gt;();

        previousInDegree = currentInDegree;
        previousOutdegree = currentOutDegree;
    } else {
        sublist1.add(currentNode);
        sublist2.add(nodeList2.get(i);
    }
}
</code></pre></li>
<li><p>You're not using <code>list1</code> and <code>list2</code> after the initialization of the <code>certainMap</code>. I'm not quite sure why you're creating a defensive deep copy before passing them to <code>findIsomorphismPermutation</code></p></li>
<li><p>You can simplify the creation of <code>permutationEnumeratorList</code> in <code>findIsomorphismPermutation</code> by using streams like so:</p>

<pre><code>List&lt;PermutationEnumerator&gt; permutationEnumerators = groupList1.stream()
  .map(group -&gt; new PermutationEnumerator(group.size())
  .collect(Collectors.toList());
</code></pre></li>
</ul>

<h3>Naming &amp; Documentation</h3>

<p>The documentation for all the code here is rather very sparse. Especically the implementation of the actual isomorphism finding is difficult to understand. What's also hard to understand is how the <code>isIsomorphism</code> check works exactly. The problem there is that the code is so different and much more verbose compared to the mathematical formulation.</p>

<p>Here's some names that really need to be better:</p>

<ul>
<li><code>addEdges</code> is easier to understand as <code>modifyEdgeCounter</code></li>
<li><code>nodeList1</code> and <code>nodeList2</code> are mediocre. Especially considering that they're actually just the nodes extracted from a graph, you might want to name them somewhat cleaner. <code>graph1</code> and <code>graph2</code> are also bad names. Even <code>left</code> and <code>right</code> would be somewhat better. Or <code>source</code> and <code>target</code>...</li>
<li>In general you seem to like naming things by what they are. The <code>List</code> suffix to your variable names can nearly always be replaced by a pluralization. Something like <code>sourceNodes</code> is much more communicative than <code>nodeList1</code>. (more examples: <code>groupList1</code>, <code>permutationEnumeratorList</code>)  </li>
<li><code>comparator</code> in <code>getIsomorphism</code> could be <code>nodeDegreeComparator</code> or something like that. It's much less general than the name implies...</li>
<li>In <code>bruteForceIsomorphism</code>  the names make it really hard to follow. <code>list1</code> and <code>list2</code> are the least semantically useful names possible for two lists... I have no clue what the lists are used for, actually. I just notice that these lists have to do with the degrees of the nodes you examine. Since they are sorted, I assume it has to do with which nodes could be mapped to one another...</li>
<li><code>certainMap</code> is a good start, but it might be better off as <code>requiredMappings</code> or something like that? That'd also make clearer why that map is passed to <code>findIsomorphismPermutation</code>.</li>
<li><code>Utils</code> is a name that's... not really saying <strong>anything</strong> at all. I'm also not sure, why the <code>isIsomorphism</code> check is not implemented in the <code>AbstractGraphIsomorphismChecker</code>... It would make a lot of sense there, IMO.</li>
</ul>

<h3>Algorithmic Curiosities</h3>

<p><code>permute</code> overwrites the current <code>groupList</code> state. That makes subsequent calls to <code>permute</code> use an already <code>permuted</code> state.
I have not check whether all permutations from <code>PermutationEnumerator</code> are actually covered, even though they work off the previous permutation. There could be a way that they still cover all possible permutations, just in a different order. My gut feeling says they don't...</p>

<p>Instead of permuting the <code>groupList</code> state, you could directly access the permutation when building the <code>isomorphismCandidate</code> by permuting the access to <code>groupList2</code> in the call to <code>put</code>, like so:</p>

<pre><code>// generateIsomorphismCandidate
// note that I don't permute the groupList2 entries here
Map&lt;DirectedGraphNode, DirectedGraphNode&gt; isomorphismCandidate = new HashMap&lt;&gt;();

for (int groupIndex = 0; groupIndex &lt; groupList1.size(); ++groupIndex) {
    int[] permutation = permutationEnumeratorList.get(groupIndex).indices;
    for (int nodeIndex = 0; nodeIndex &lt; groupList1.get(groupIndex).size(); nodeIndex++) {
        isomorphismCandidate.put(
          groupList1.get(groupIndex).get(nodeIndex),
          groupList2.get(groupIndex).get(permutation[nodeIndex]));
    }
}
</code></pre>

<h3>Design Considerations</h3>

<p>I'm not fully convinced that the representation of graphs you chose makes that much sense. Following things feel a little weird about it:</p>

<ul>
<li>Nodes need to be told the Graph they belong to. (Why does a node know that?)</li>
<li>The mechanism to create edges is very non-obvious and for some reason not actually part of the <code>Graph</code> interface. It feels weird to have the node know so much about the rest of the  graph.</li>
<li><p>I'm almost convinced that using an adjacency matrix for representation would make the permutation checks much easier. There should be similarly compelling ways to determine the degrees of a node, and the changes necessary to support weighted and/or undirected graphs would be minimal.</p>

<p>Instead of creating permutations between nodes, an isomorphism would be described by a symmetric (for undirected graphs) permutation matrix.</p></li>
<li><p>It's very unclear to me why <code>PermutationEnumerator</code> is not in it's own class. That thing is useful beyond just the <code>TrivialGraphIsomorphismChecker</code>.</p></li>
<li><p>The way that cycling through all permutations of permutations is done is ... a hack. A really clever bit of code that made me smile, but it's really something that should be done in a better way. You could consider encapsulating the <code>permutationEnumeratorList</code> into it's own class that handles iteration of the permutations.</p></li>
</ul>
    </div>