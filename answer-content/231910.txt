<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>In addition to @Toby Speight's answer.</em></p>

<ol>
<li><p><strong>There are only four types allowed for a bit field.</strong> There are the follows: <code>signed int</code>, <code>unsigned int</code>, <code>int</code>, and <code>_Bool</code>. So using <code>char</code> in this case:</p>

<blockquote>
<pre><code>struct inside{
    char p:8;
    char q:8;
};
</code></pre>
</blockquote>

<p>is implementation-defined.</p></li>
<li><p><strong>Use fixed integer types.</strong> In your code you use <code>short</code> the width of which is not well defined. If you want an object with a specific width, you should consider using <em>fixed integer types</em> from <code>&lt;stdint.h&gt;</code>, such as <code>uint8_t</code> or <code>uint16_t</code>.</p></li>
<li><p><strong>Use an anonymous struct inside the union.</strong> Your code actually is not valid, because <code>a</code> is not a member of <code>t</code> as well as <code>p</code> is not a member of <code>v</code>. <code>a</code> is member of the inner <code>data</code> struct:</p>

<blockquote>
<pre><code>union info{
     short z;
     struct data{
            unsigned a:1;
            unsigned b:1;
            unsigned c:1;
            unsigned d:1;
            unsigned e:1;
            unsigned f:1;
            unsigned g:1;
            unsigned h:1;
     };
}t;
</code></pre>
</blockquote>

<p>You have to use anonymous structures in order to compile your code.</p></li>
<li><p><strong>Bit fields are very implementation defined.</strong> You actually couldn't print bits of integer in a portable way because bit fields are <em>very</em> implementation defined. You have to care about a bit field width, about padding inside the structure, about allocation units inside the structure, about width of the integer, about byte ordering, and so on.</p></li>
</ol>
    </div>