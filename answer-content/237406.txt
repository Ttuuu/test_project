<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Something to keep in mind is that this statement is truncating data:</p>
<pre><code>        arr[j]=av;
</code></pre>
<p>because it is assigning a double to an int.</p>
<p>As was mentioned in a comment there are c++ container types that would be better than a old C style array, two of these are <code>std::array&lt;type, arraySize&gt;</code> and <code>std::vector&lt;type&gt;</code>. <code>std::array</code> is a fixed size and <code>std::vector</code> is a variable size. Both would allow the use of iterators that might simplify the code.</p>
<h2>Avoid <code>using namespace std;</code></h2>
<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>
<h2>std::endl</h2>
<p>It is better for performance if <code>"\n"</code> is used rather than <code>std::endl</code> in output, <code>std::endl</code> flushes the output buffer as well as putting out a new line, and this can slow down loops.</p>
<h2>Complexity</h2>
<p>The function <code>replaverage</code> should really be 2 functions, one to input the data and a second to process the data. Perhaps a third to print the data.</p>
<h2>Horizontal Spacing</h2>
<p>It would be better if there were spaces around operators that separate operands.</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;

std::vector&lt;int&gt; getData()
{
    int n;
    std::vector&lt;int&gt; intputData;
    std::cout &lt;&lt; "Enter array length\n";
    std::cin &gt;&gt; n;
    std::cout &lt;&lt; "Enter the numbers\n";
    for(int i = 0; i &lt; n; i++){
        int tmpIn;
        std::cin &gt;&gt; tmpIn;
        intputData.push_back(tmpIn);
    }

    return intputData;
}

void modifyData(std::vector&lt;int&gt; &amp;data)
{
    int f=data[0];
    int l=data[data.size() - 1];
    double av = (f + l)/2;
    for (auto j: data)
    {
        if(j &lt; av){
            j = av;
        }
    }
}

void printData(std::vector&lt;int&gt; &amp;data)
{
    for (auto i: data)
    {
        std::cout &lt;&lt; i &lt;&lt; " ";
    }
}

int main(int argc, char* argv[]){

    std::vector&lt;int&gt; data = getData();
    modifyData(data);
    printData(data);

    return 0;
}
</code></pre>
    </div>