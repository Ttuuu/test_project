<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Create a class that extends <code>Base</code> that has the <code>points</code> field and have your 3 classes extend that class.</p>

<p>Your improved method would look like this: (Note: you should give it a better name)</p>

<pre><code>private static &lt;T&gt; point[] getpointsArrayFromMapObject(T base){
    if(base instanceof MyBase ){
        return ((MyBase) base).getpoints();
    }

    return new point[]{};
}
</code></pre>

<p>However It looks like these methods only relate to the type <code>Base</code>. If so you can change your generic to extend from it:</p>

<pre><code>private static &lt;T extends MyBase&gt; point[] getpointsArrayFromMapObject(T base) 
{
    return base.getpoints();
}
</code></pre>

<p>You should note it does not matter if each class implements its own <code>getPoints</code> method. The correct method will be executed based on the type of Object passed. This is known as <code>polymorphism</code>.</p>

<p>At which point, there is no need for an additional method:</p>

<pre><code>public static &lt;T extends Base&gt; T getCurrentMapObjectWithPoint(Point point, T [] bases){
    T base = null;
    for(T model: bases){
        Point[] points = base.getPoints();
        for(Point currentpoint: points){
            if(currentpoint.id.equals(point.id)){
               return base;
            }
        }
    }
    return base;
}
</code></pre>
    </div>