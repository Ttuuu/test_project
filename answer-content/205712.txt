<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your program.</p>

<h2>Avoid writing <code>this</code></h2>

<p>The overuse of <code>this</code> clutters the code and makes things harder to understand.  For example, the current code contains this:</p>

<pre><code>void setFlag(Flag flagToSet) {
    this-&gt;state = this-&gt;state | flagToSet;
}
</code></pre>

<p>It's much easier to read and understand if written instead like this:</p>

<pre><code>void setFlag(Flag flag) {
    state |= flag;
}
</code></pre>

<h2>Think about the user</h2>

<p>Consider actually <em>using</em> this class.  For example, to appropriately set the ZF flag we'd have to do something like this:</p>

<pre><code>if (result == 0) {
    flags.setZF();
} else {
    flags.unsetZF();
}
return flags.checkZF();
</code></pre>

<p>That's way too much code for just one flag!  Here's what I'd rather write:</p>

<pre><code>return flags.Z(result == 0);
</code></pre>

<h2>Use <code>const</code> where practical</h2>

<p>I would expect that checking the value of a flag shouldn't alter any flag.  To assure the reader of the code that this is the case, the functions should be marked <code>const</code>.  This also tells the compiler to make sure that 1) the code <em>implementing</em> the function does not alter the associated object and 2) the code <em>calling</em> the function can be a <code>const</code> object.  See <a href="https://en.cppreference.com/w/cpp/language/member_functions#const-.2C_volatile-.2C_and_ref-qualified_member_functions" rel="nofollow noreferrer">this</a> for a more detailed and rigorous explanation.</p>

<h2>Simplify your code</h2>

<p>Rather than having to go through another level of indirection, for such simple functions, I would remove the private methods.  To use the syntax I advocated earlier, here's one way to write a pair of functions:</p>

<pre><code>bool C() const {
    return state &amp; CF;
}
bool C(bool val) {
    if (C() != val) {
        state ^= CF;
    }
    return val;
}
</code></pre>

<p>You could even get crazy with preprocessor macros and write this:</p>

<pre><code>#define FLAGIZE(x) bool x() const { return state &amp; x ## F; } \
    bool x(bool val) { if (x() != val) state ^= x ## F; return val; }

    FLAGIZE(C)
    FLAGIZE(P)
    // etc.
</code></pre>

<p>This macro is just a shortcut to writing all of those functions out by hand.</p>

<h2>Consider multithreading</h2>

<p>It may be convenient at some point to have multiple threads setting flags simultaneously.  If that's the case, you want to make sure they don't overwrite, so either using something like <code>std::atomic_uchar</code> would provide a simple way to support such use.</p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.</p>
    </div>