<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These problems are typically performance-bound, and so it doesn't pay for you to design classes for such things as <code>Point</code> unless you are sure you need it.</p>

<p>In this case, I don't think you need it.</p>

<h2>Consider using segments rather than points</h2>

<p>Consider a worst-case path. It would be a staircase, each segment of length 1. This would generate lines of length 1, making each line effectively a single point (since the origin is included in the previous line).</p>

<p>If you have an algorithm that examines all the points your path traverses (which yours presently does), it would perform <em>exactly equal</em> to an algorithm that examines the line segments as discrete elements.</p>

<p>On the other hand, a non-pessimal path would have at least one line segment of length &gt; 1, which would improve performance.</p>

<p>For this reason, I think you should rewrite your code to use line segments rather than points.</p>

<h2>Tell, don't ask.</h2>

<p>In the process of decoding the line segments, you use a regular expression, then discard the result, then use a series of string membership checks.</p>

<p>This is all wasted time. You know there are only four possible valid inputs {D, L, R, U}. Check for them explicitly, and dispatch instantly to the appropriate code:</p>

<pre><code>handlers = { "U" : self.up, "D": self.down, "L": self.left, "R": self.right }

for segment in line:
    move_to = handlers[segment[0]]
    move_to(int(segment[1:]))
</code></pre>

<p>Take care of updating your current position indicator in the handler. And <strong>encode the knowledge</strong> of what is happening in the different handlers:</p>

<pre><code>def up(self, how_far: int):
    """Add an upward line segment starting at cur_pos to the wire path."""

    new_xy = Position(self.cur_pos.x, self.cur_pos.y + how_far)
    self.verticals.append((self.cur_pos, new_xy))
    self.cur_pos = new_xy
</code></pre>

<h2>Don't forget information</h2>

<p>Knowing that a line segment is horizontal or vertical is valuable information. You should consider keeping your segments separate, or creating <code>named_tuple</code> types to differentiate between them.</p>

<p>If you keep them separate, then coding intersection code is simpler: you can special-case all the different flavors (an argument for creating separate types!).</p>

<h2>Be lazy</h2>

<p>You know that you are looking for the closest intersection point. If you are checking a line segment that has a "closest point" which is farther away than your current best match, you could skip that segment entirely! </p>

<p>It may or may not make sense to compute and track this information. You would have to write the code both ways to be sure. But your current approach is already <span class="math-container">\$N ^2\$</span> so this might speed things up.</p>
    </div>