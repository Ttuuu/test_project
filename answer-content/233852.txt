<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general you can "remove" const legally if the original variable wasn't declared const, ie.</p>

<pre><code>int a;
const int c;

void foo(const int *x)
{
    int *p = (int *)x;
    p++;
}

foo(&amp;a); // legal
foo(&amp;c); // illegal
</code></pre>

<p>The rationale is that const-variables are often declared in read-only memory segments. As far as I know, the compiler is not allowed more than that (<code>const</code> doesn't have much impact in C, Ritchie even didn't want it included in C). Additionally the compiler cannot assume that the memory areas do <em>not</em> overlap (because they aren't declared as <code>restrict</code>), so this code should be completely legal and even safe as it is only illegal if the argument was defined to be <code>const</code>:</p>

<pre><code>const vec2_t v;
vec2_unit(&amp;v, &amp;v);
</code></pre>

<p>But then it should warn about the second argument discarding <code>const</code>.</p>

<p>Additional note: <code>vec2_t</code> is a reserved type by POSIX, as are all types with suffix <code>_t</code>, you are encouraged to use a different type name.</p>
    </div>