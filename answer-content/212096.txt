<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How did you measure the performance of your code (test code, hardware, compiler, etc.)? Without that it is impossible to get into optimization. Depending on chosen compiler I was sort of able to reproduce your results, see <a href="http://quick-bench.com/cT8FjqPov65tetBZiSSEb5wlOHA" rel="nofollow noreferrer">this quick bench</a>- for clang 7.0.0 the fancy algorithm is indeed faster. That being said with gcc the basic one is a lot faster (outperforming fancy algorithm in both clang and gcc).<br>
With that in mind, you can optimize your algorithm for different array sizes quite easily (benchmarking on your specific setup), by choosing fastest of the 3 for specific sizes.  </p>

<p>As far as the code is concerned, there are a couple of things you can improve. </p>

<p>You could rewrite your algorithms so that they accept iterators, just like all the algorithms from standard library, that will drastically improve their flexibility without added effort (and most probably without degrading performance, but you should measure it anyway).
Apart from that, you should avoid implicit conversions, e.g. here:</p>

<pre><code>int r = item_count - 1;
</code></pre>

<p>You should also prefer to keep the bodies of your functions short, it's hard to understand what <code>binarySearch_duo</code> actually does (you could easily extract body of the loop etc). Also, avoid magic constants, where does the seven in: <code>while (r - l &gt; 7) {</code> come from?</p>

<p>Edit: I've created one more benchmark for this, this time as proposed by OP, that is with huge array size (actually a vector) and made the access to the elements of the array random, see <a href="http://quick-bench.com/_4FfE1Xo3gHe4gRGyerHm0hDBhE" rel="nofollow noreferrer">here</a>- this time with gcc fancy version is as good as basic. The lesson should probably be: compiler is usually at least as smart as you are :).</p>
    </div>