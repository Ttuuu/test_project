<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you make such posts like this in the spirit of learning, my answer will be in that same spirit.</p>

<p>The <code>Count</code> method has these 3 nit picky issues:</p>

<ul>
<li><p>Variable <code>Dna</code> should be <code>dna</code> as the guidelines are that locally named variables begin with a lowercase letter.</p></li>
<li><p>You do not check for <code>string sequence</code> to be null.</p></li>
<li><p>Initializing the dictionary with expected keys and 0 counts is done here and elsewhere.  In the name of DRY (Don't Repeat Yourself), this could be a static property.</p></li>
</ul>

<p>Links to research:</p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines" rel="nofollow noreferrer">.NET Naming Guidelines</a></p>

<p><a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself</a></p>

<p>My biggest issue is with throwing an exception.  I tried researching the test exercise and could not find where this is required.  My issue is that if you encounter an exception, all subsequent counting is halted.  You have provided a custom nicely-worded exception, but if there was a bad character, an exception would be thrown anyway.</p>

<p>Since the exception part of the exercise seems to be something of your own doing, I would suggest not throwing an exception but rather keep a badCount, while continuing to process all the way through <code>sequence</code>.  Once you finish <code>sequence</code>, you can include a console message of <code>$"Strand has {badCount} invalid nucleotides."</code>, but only if <code>badCount</code> was &gt; 0.</p>

<p>It's nice to try these exercises and to learn.  While it seems you were unaware of <code>ContainsKey</code> or <code>TryGetValue</code>, your own <a href="https://github.com/milliorn/Exercism/tree/master/C%23/Main/08-nucleotide-count" rel="nofollow noreferrer">GitHub repo</a> has the link to <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2?redirectedfrom=MSDN&amp;view=netframework-4.8" rel="nofollow noreferrer">IDictionary interace</a>, which shows only a 3 Properties and 4 Methods, so you had the information at your fingertips <em>if only you were curious enough to click</em>.</p>

<p>For the record, I would prefer using <code>TryGetValue</code> over <code>ContainsKey</code> but that is my preference.  Either is really fine, but in my own personal bag of tricks, I lean more on <code>TryGetValue</code>.</p>

<p>In the spirit of learning more about dictionaries, here is a smattering of some tips:</p>

<ul>
<li><p>This simple example is of <code>char</code> but if you were dealing with <code>string</code> has the key you can construct a case-insensitive dictionary so that "bob" and "BOB" are considered equal.  I leave it to you to look up how to do it, but a hint would be to look at the constructor.</p></li>
<li><p>Oddities may arise if you use binary floating point (<code>Single</code> or <code>Double</code>) as the keys, since these are approximations and not exact values. </p></li>
<li><p>If you only want to deal with the <code>Keys</code>, do read about the <code>Keys</code> property.  Most of the time I need to process the keys, I end up using something like <code>var keys = dna.Keys.ToList();</code> so that my list of keys is an independent copy.  For example, I could sort my keys list and then process over them in my sorted order.</p></li>
</ul>

<p><strong>UPDATE</strong></p>

<p>The OP asked for an example on using a static dictionary for the sake of DRY-ness.  Before I do that, let me touch on a related topic.  My original answer said to make it a static property.  It equally could be a static method.  I am guessing the OP is having troubles with it as a static property because he may be referring to the property repeatedly, rather than creating a local instance.</p>

<p><strong>As a Property</strong></p>

<pre><code>public static IDictionary&lt;char, int&gt; Empty =&gt; new Dictionary&lt;char, int&gt;()
{
    {'A', 0},
    {'C', 0},
    {'G', 0},
    {'T', 0}
};
</code></pre>

<p>The way to use this is not to refer to <code>Empty</code> over-and-over again, because each call to it will return the same "empty" or initial dictionary.  Rather assign it to a variable.</p>

<pre><code>var dna = Empty;

foreach (char c in sequence)
{
    if (dna.TryGetValue(c, out int count))
    {
        dna[c] = ++count;
    }
    else
    { 
        throw new ArgumentException("Strand has invalid nucleotides.");
    }
}
</code></pre>

<p>While it could work as a property, I think it would be better to make it a method, and provide a better name.  Let's step back even more.  Your class <code>NucleotideCount</code> has a <code>Count</code> method.  This provides the repeated use <code>Count</code> as in <code>NucleotideCount.Count</code>.  I think many developers would be expecting an Int32 or Int64 to be returned from a Count method but to their astonishment they get back an IDictionary object.</p>

<p>My use of the word "astonishment" was quite intentional as this violates the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" rel="nofollow noreferrer">Principle of Least Astonishment</a>.  I think there is a better name for the class, but I know there can be a better name for the <code>Count</code> method.  I am partial to such methods having an ActionVerb+Noun structure, meaning I prefer to see something start with "Get".</p>

<p>In my own example of the <code>Empty</code> property, it could equally work as a method named <code>GetInitialDictionary</code>.  Does it matter?  Not that much, except it does emphasis to the developer that they need to get that initial dictionary (as my example has shown, and not call it repeatedly.</p>

<p>For example, on the surface, this looks fine except it's not since you won't be modifying the dictionary.  (Granted, calling it <code>Empty</code> and adding to it should be a red flag.)</p>

<pre><code>foreach (char c in sequence)
{
    if (Empty.TryGetValue(c, out int count))
    {
        Empty[c] = ++count;
    }
    else
    { 
        throw new ArgumentException("Strand has invalid nucleotides.");
    }
}

return Empty;
</code></pre>

<p>Each call to <code>Empty</code> creates an initial dictionary of 0 counts, so the final <code>return Empty</code> simply returns 0 counts.  This confusion of usage could perhaps be mitigated if it were named as a method instead.</p>

<pre><code>public static IDictionary&lt;char, int&gt; GetInitialDictionary() =&gt; new Dictionary&lt;char, int&gt;()
{
    {'A', 0},
    {'C', 0},
    {'G', 0},
    {'T', 0}
};
</code></pre>

<p>Thanks to the addition of <code>()</code> the property is now a method and perhaps how you should use it is more understood:</p>

<pre><code>var dna = GetIntialDictionary();
</code></pre>

<p>Because it would be downright awkward to try using</p>

<pre><code>GetInitialDictionary()[c]++;
</code></pre>
    </div>