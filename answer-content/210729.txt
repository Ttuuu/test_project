<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not really good at Python here, but I'm sharing my ideas.</p>

<h3>Code style</h3>

<p>Do you know there's a coding style guide called <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>? It provides a set of guidelines for code styling. I'd like to note some of them here:</p>

<ul>
<li>Use CapWords naming convention for your classes. Always begin your class name with a cap letter, so <code>class opcodes(IntEnum)</code> becomes <code>class OpCodes(IntEnum)</code> etc.</li>
<li>Put two blank lines between class definitions and module-level function definitions</li>
<li><p>Indentation: This is a bad indentation:</p>

<pre><code>if  (n == 1 and self.registers.cond == condition_flags.n) or \
    (z == 1 and self.registers.cond == condition_flags.z) or \
    (p == 1 and self.registers.cond == condition_flags.p):
    self.registers.pc.value = self.registers.pc.value + sext(pc_offset_9, 9)
</code></pre>

<p>This is the correct way to indent it:</p>

<pre><code>if  (n == 1 and self.registers.cond == condition_flags.n) or \
        (z == 1 and self.registers.cond == condition_flags.z) or \
        (p == 1 and self.registers.cond == condition_flags.p):
    self.registers.pc.value = self.registers.pc.value + sext(pc_offset_9, 9)
</code></pre></li>
</ul>

<p>You can use a tool called <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">flake8</a> to find out PEP 8 violations in your code. You may not want all of them - for example, I almost always ignore the line length limit, but this is up to you and it's recommended that you follow all the guidelines unless you have a good reason not to.</p>

<h3>Repeated and similar code</h3>

<p>I'm talking about lines like this:</p>

<pre><code>    print("r0:  {:04x} ".format(c_uint16(self.registers.gprs[0]).value), end='')
    print("r1:  {:04x} ".format(c_uint16(self.registers.gprs[1]).value), end='')
    print("r2:  {:04x} ".format(c_uint16(self.registers.gprs[2]).value), end='')
    print("r3:  {:04x} ".format(c_uint16(self.registers.gprs[3]).value), end='')
    print("r4:  {:04x} ".format(c_uint16(self.registers.gprs[4]).value), end='')
    print("r5:  {:04x} ".format(c_uint16(self.registers.gprs[5]).value), end='')
    print("r6:  {:04x} ".format(c_uint16(self.registers.gprs[6]).value), end='')
    print("r7:  {:04x} ".format(c_uint16(self.registers.gprs[7]).value))
</code></pre>

<p>This repetition is just unnecessary work. You can replace it with a nice loop:</p>

<pre><code>for i in range(8):
    print("r{}:  {:04x} ".format(i, c_uint16(self.registers.gprs[i]).value), end='')
print()
</code></pre>

<p>And the same for your other code where this pattern occurs</p>

<h3>Conditional style</h3>

<p>Use <code>elif</code> if your conditions are intended <em>not</em> to overlap:</p>

<pre><code>def update_flags(self, reg):
    if self.registers.gprs[reg] == 0:
        self.registers.cond = condition_flags.z
    elif self.registers.gprs[reg] &lt; 0:
        self.registers.cond = condition_flags.n
    elif self.registers.gprs[reg] &gt; 0:
        self.registers.cond = condition_flags.p
</code></pre>

<h3>Using exceptions</h3>

<p>I see you use <code>MemoryError</code> in your memory class for access violation. This is better replaced by <code>ValueError</code> or better, <code>IndexError</code>, because the one you're currently using is reserved for (host) memory issues, particularly memory allocation failures.</p>

<p>There's also another built-in exception for unimplemented stuff, <code>NotImplementedError</code>. You should consider replacing your own <code>UnimpError</code> with the built-in one.</p>
    </div>