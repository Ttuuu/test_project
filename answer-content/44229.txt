<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You provide the timing of the 4 different versions.  </p>

<p>But that is useless without the code (if you wrote the perl version as badly as the C++ version then its not surprising you get bad results). Before times are useful for a comparison we need to make sure that the tests are comparable. So we really need the code for all four versions. Then we can get criticism of all four code bases and work to get them aligned to the best implementation of the appropriate languages. Once we have done that then we can do realistic timings.</p>

<h2>Note 1:</h2>

<p>Stop using <code>C</code></p>

<pre><code> string crypt (const char *ct)
</code></pre>

<p>Should be:</p>

<pre><code> string crypt (std::string const&amp; ct)
</code></pre>

<h2>Note 2:</h2>

<p>This allows a much needed speedup here:</p>

<pre><code>for ( int x = 0; x &lt; strlen(ct) ; x++ ) {
</code></pre>

<p>Should be:</p>

<pre><code>for (char c : ct)
// or if using C++03
for (std::string::const_iterator c = ct.begin(); c != ct.end(); ++c)
</code></pre>

<p>This should improve performance considerably as you are not re-calculating string length all the time.</p>

<h2>Note 3:</h2>

<p>Always do timing after you have compiled the optimized version</p>

<pre><code>g++ -O3 &lt;stuff&gt;
</code></pre>

<h2>Note 4:</h2>

<p>These values are const</p>

<pre><code>int L = li(key[0]);
int M = li(key[1]);
int R = li(key[2]);
</code></pre>

<p>Try:</p>

<pre><code>int const L = li(key[0]);
int const M = li(key[1]);
int const R = li(key[2]);
</code></pre>

<h2>Note 5:</h2>

<p>This looks decidedly inefficient:</p>

<pre><code>int d = mod26(indexof(rotors[0], alpha[mod26(li(ref) + L)]) - L);
</code></pre>

<p>Looking at:</p>

<pre><code>indexof(rotors[0], alpha[mod26(li(ref) + L)])


// indexof(&lt;C-String&gt; , &lt;char&gt;)
// Does a linear search of the string.
// That is very inefficient. Why not use std::unordered_map&lt;char, int&gt;.
// If you don't want to waste space use std::map&lt;char, int&gt;
</code></pre>

<h2>Note 5:</h2>

<p>You may think this is C++ but it's not.<br>
This is a C implementation and not a good one.</p>

<p>The javascript version relies on an engine written in C++ that is highly optimized. If you don't apply the same techniques that were used by the javascript engine, then I am not surprised that you get similar results. I would expect the C++ version to run 100x faster 
(not 4x) than javascript.</p>
    </div>