<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with Eric Stein that your <code>Tape</code> class as written doesn't provide a useful abstraction.  I see two possible ways to fix it:</p>

<ul>
<li><p>One option would be to get rid of the class entirely, and just use a <code>List&lt;Character&gt;</code> to represent the tape and an <code>int</code> to represent the head position in the <code>TuringMachine</code> class.  The Java <code>List</code> interface is already a perfectly reasonable representation of an extensible one-dimensional sequence of values, so you can just program to it instead of defining your own.</p></li>
<li><p>Alternatively, if you'd rather keep the <code>Tape</code> class, you should remove the <code>getCells()</code> method (since it needlessly exposes the internals of the class) and just provide methods to access the values on the tape directly.</p></li>
</ul>

<p>In fact, you don't even need to allow access to values at arbitrary positions, since a Turing machine tape, by definition, only allows reading and writing to the cell at the current position of the head.  So the only methods you <em>really</em> need are something like:</p>

<ul>
<li><code>public char read()</code>: return the value of the cell at the current head position;</li>
<li><code>public void write(char value)</code>: set the value of the cell at the current head position;</li>
<li><code>public void moveHead(int steps)</code>: move the head by <code>steps</code> positions;</li>
</ul>

<p>and a constructor that accepts a <code>CharSequence</code> and/or a <code>char[]</code> parameter to initialize the content of the tape.  (You may also want to provide a <code>toString()</code> method for easier debugging.)</p>

<p>One advantage of going this way is that you can later optimize the internal implementation of the tape without having to change any code that uses it.  For example, one simple optimization might be to use a <code>StringBuffer</code> instead of an <code>ArrayList&lt;Character&gt;</code> to store the contents of the tape, which should be more efficient.  Also, letting the tape extend in both directions could be easily and efficiently implemented by using <em>two</em> <code>StringBuffer</code>s (or <code>ArrayList</code>s) internally.</p>

<hr>

<p>Also, the way you're representing the state machine itself is quite inefficient: at every step, you're looping over all the possible state transitions to find the matching one.</p>

<p>A more efficient method would be to store the state transitions in a <code>Map</code> (implemented e.g. as a <code>HashMap</code> â€” but you should usually just <a href="https://softwareengineering.stackexchange.com/questions/232359/understanding-programming-to-an-interface">program to the interface</a> whenever possible) to let you look them up efficiently.  Since you need to look up the transitions using a combination of two keys (the current state and the character on the tape), you have two options: either use a nested <code>Map&lt;String, Map&lt;Character, Transition&gt;&gt;</code> or define a wrapper class to store a (<em>state</em>, <em>input</em>) pair, with a suitable <code>hashCode()</code> method, and use it as the key to a single map.</p>

<p>However, arguably an even more elegant solution would be to introduce a <code>State</code> class that stores all the properties of a single state in your state machine, including both whether or not it's an accepting state and all the possible transitions from that state.  Also, the <code>State</code> class should <em>not</em> expose its internal implementation of the transition map (which should probably be something like a <code>HashMap&lt;Character, Transition&gt;</code>), but rather should simply provide a method like:</p>

<pre><code>public Transition getTransition(char tapeValue)
</code></pre>

<p>Also, you should explicitly define and document the behavior of this method in the case where no matching transition is found (which in most standard definitions of a Turing machine indicates that the machine halts).  Reasonable behaviors might be either returning <code>null</code> or throwing a specific custom exception, but either way, this should be documented.  If you wanted to get fancy with wrapper objects, you could even make the method return an <code>Optional&lt;Transition&gt;</code>, although I don't personally see any real added value in that for this particular use case.</p>

<p>I would also make the <code>Transition</code> class store direct references to its source and target <code>State</code> objects instead of string labels, and have <code>getFromState()</code> and <code>getToState()</code> return the states directly.  Note that you'd still need to maintain a string-to-state-object map while building the state machine, but you no longer need it after all the states and transitions have been built.</p>

<p>(Also, if you wanted, you could make the <code>State</code> and <code>Transition</code> objects immutable, since there's no need to change them after the state machine has been built.  Unfortunately, writing a proper builder class for an immutable state machine would be a somewhat nontrivial exercise all by itself, due to the possibility of circular state transition chains, so just leaving the classes mutable might be easier in practice.)</p>

<hr>

<p>Finally, I should note that the way your "Turing machine" works seems kind of unusual.  While there are several different (but essentially equivalent) ways of defining a <a href="https://en.wikipedia.org/wiki/Turing_machine" rel="nofollow noreferrer">Turing machine</a>, yours doesn't really seem to match any of them.</p>

<p>Basically, as far as I can tell, your machine uses a finite-length tape (whereas most definitions of a Turing machine allow the tape to extend infinitely in one or both directions) and runs until either:</p>

<ol>
<li>it reaches one of the states defined as "rejecting" (in which case the input is immediately rejected),</li>
<li>it walks off the right-hand end of the tape (in which case it runs one more step, reading an <code>EMPTY_SYMBOL</code> off the end of the tape, and then uncoditionally halts, accepting the input if the current state is defined as "accepting" and rejecting it otherwise), or</li>
<li>it walks off the left-hand side of the tape (in which case it crashes with an <code>IndexOutOfBoundsException</code>, since you don't have any code to handle that case).</li>
</ol>

<p>Basically, what you have looks like some kind of a weird hybrid of a Turing machine and a classical finite state machine that reads its input strictly sequentially.  Due to the lack of an infinite tape, its computational power is strictly weaker than that of a proper Turing machine (and in fact theoretically equivalent to that of a finite state machine, although in practice your machine can have much more complex behavior than a simple FSM <em>with the same number of states</em> could).  If that's not how you <em>intended</em> it to work, then your code would appear to be buggy.</p>
    </div>