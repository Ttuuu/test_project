<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a minor aside, I've renamed it to <code>PN</code> instead of <code>RPN</code>. The form you've give (with operators preceding the operands) is Polish Notation as Jan ≈Åukasiewicz invented it. RPN is when you reverse that, and have the operands first, followed by the applicable operator.</p>

<p>As to why they decided to call that RPN: because English speakers had a hard enough time figuring out that his last name was pronounced roughly like "Wookashayvitch", not to mention trying to figure out how to say that backwards.</p>

<p>In any case, I think I'd write the code more like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;map&gt;
#include &lt;iterator&gt;

using namespace std; // really would *not* normally do this, but...

void define_var(map&lt;string, int&gt; &amp;v, istringstream&amp; iss) {
    std::string name;
    int value;
    iss &gt;&gt; name &gt;&gt; value;
    v[name] = value;
}                       

int do_op(char op, int val1, int val2) { 
    switch (op) { 
        case '+': return val1 + val2;
        case '-': return val1 - val2;
        case '*': return val1 * val2;
        case '/': return val1 / val2;
        default: 
            string error("Unknown operator: ");
            error += op;
            throw runtime_error(error);
    }
}

bool isoperator(char ch) { 
    return ch == '+' || ch == '-' || ch == '*' || ch == '/';
}

char getop(istream &amp;is) {
    char ch;
    while (isspace(ch = is.peek()))
        is.get(ch);
    ch = is.peek();
    return ch;
}

int eval(istream &amp;is, map&lt;string, int&gt; const &amp;v) { 
    // evaluate an expression. It consists of:
    // an operator followed by operands, or
    // a number, or
    // a variable.
    // 

    char ch = getop(is);

    if (isoperator(ch)) {
        is.get(ch);
        int val1 = eval(is, v);
        int val2 = eval(is, v);
        return do_op(ch, val1, val2);
    }
    if (isdigit(ch)) {
        int val;
        is &gt;&gt; val;
        return val;
    }

    string var_name;
    is &gt;&gt; var_name;
    map&lt;string, int&gt;::const_iterator p = v.find(var_name);
    if (p==v.end()) {
        string problem("Unknown variable: ");
        problem +=var_name;
        throw runtime_error(problem.c_str());
    }
    return p-&gt;second;
}

// used only for dumping out the variables.
namespace std { 
    ostream &amp;operator&lt;&lt;(ostream &amp;os, pair&lt;string, int&gt; const &amp;v) {
        return os &lt;&lt; v.first &lt;&lt; ": " &lt;&lt; v.second;
    }
}

int main() {
    cout &lt;&lt; endl &lt;&lt; "LePN Programming Language" &lt;&lt; endl;

    map&lt;string, int&gt; v;

    string temp;
    cout &lt;&lt; endl &lt;&lt; "&gt; ";
    while (getline(cin, temp)) {
        istringstream iss(temp);

        string op;
        iss &gt;&gt; op;

        if (op == "quit")
            break;
        else if (op == "def") 
            define_var(v, iss);
        else if (op == "show_vars")
            std::copy(v.begin(), v.end(), ostream_iterator&lt;pair&lt;string, int&gt; &gt;(cout, "\n"));
        else {
            // Technically, this isn't right -- it only ungets one 
            // character, not the whole string.
            // For example, this would interpret "this+ 2 3" as "+ 2 3"
            // and give 5 instead of an error message. Shouldn't affect 
            // correct input though.
            // 
            iss.unget();
            cout &lt;&lt; endl &lt;&lt; eval(iss, v) &lt;&lt; endl;
        }
        cout &lt;&lt; endl &lt;&lt; "&gt; ";
    }
}
</code></pre>
    </div>