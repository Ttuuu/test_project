<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>&lt;bits/stdc++.h&gt;</code> is non-standard and likely far more than you actually need. Unless coupled with use of precompiled headers, it will slow down compilation at least. Replace it with the standard includes. See <a href="https://stackoverflow.com/questions/25311011/how-does-include-bits-stdc-h-work-in-c">"<em>How does #include &lt;bits/stdc++.h&gt; work in C++?</em>"</a>.</p></li>
<li><p>Never import wholesale any namespace which isn't designed for it. Doing so leads to conflicts, silent changes of behaviour, and generally brittle code. See <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">"<em>Why is “using namespace std” considered bad practice?</em>"</a>.</p></li>
<li><p><a href="http://coliru.stacked-crooked.com/a/b54830414a021cc7" rel="nofollow noreferrer">Crank up the warning-level for your compiler</a>. You will see it complain that <code>size</code> in <code>retPrime()</code> is unused.</p></li>
<li><p>There are only two good reason to give a variable a bigger scope than needed: Restricting the scope would be more verbose, or constructing it anew repeatedly would be more expensive. Otherwise, <a href="https://stackoverflow.com/questions/27729930/is-declaration-of-variables-expensive">it's needless extra-stress put on each reader to understand things</a>.</p></li>
<li><p>Avoid magic numbers. Instead, use some well-named constant, or simply eliminate them.</p></li>
<li><p><a href="https://en.cppreference.com/w/cpp/numeric/math/sqrt" rel="nofollow noreferrer"><code>std::sqrt()</code></a> may be required by the IEEE Standard to be exact. But does your implementation guarantee IEEE-conformance? Anyway, why not start with the square-roots?</p></li>
<li><p>Try to use fewer variables. Instead of incrementing a new variable up to a target, decrement the target if you don't need it any longer.</p></li>
<li><p>If you detect an error, like running beyond the bounds of your sieve, throw an exception, return an obviously impossible value (<code>0</code> is a good candidate), or abort the program. But don't return a value which looks legitimate but is wrong.</p></li>
<li><p>Take a bit more care with formatting. An empty line before each function is a good idea, but please neither more (before the first) nor less (before the last).</p></li>
<li><p><code>retFib()</code> and <code>retPrime()</code> are curious names. <code>getFibonacci()</code> and <code>getPrime()</code> seem better.</p></li>
<li><p>You really should add a function for your own series, abstracting the details away.</p></li>
<li><p>Comparing booleans against <code>true</code> or <code>false</code> is just pointless verbosity. Use the value directly, or after Negation with <code>!</code>.</p></li>
<li><p>There is no guarantee that a <code>bool</code> is a byte big. Nor that memsetting every byte to <code>1</code> will result in a valid <code>bool</code>, let alone that it's <code>true</code>. Use <a href="https://en.cppreference.com/w/cpp/algorithm/fill" rel="nofollow noreferrer"><code>std::fill</code></a>, or reverse the logic and use aggregate-initialization to start with all-<code>false</code> instead.</p>

<p>Even better, consider that the only even prime is <code>2</code>, and change the code accordingly.</p></li>
<li><p>Calculating fibonacci naively needs \$O(n)\$ space and \$O(2^n)\$ time. Consider being slightly more clever and calculate it iteratively in \$O(1)\$ space and \$O(n)\$ time.</p></li>
<li><p>The conditional operator <code>condition ? true_exp : false_exp</code> is excellent for selecting one of two expressions. Use it where appropriate.</p></li>
<li><p>You should end each line of output with <code>\n</code>, it's expected. A single space instead is surprising.</p></li>
<li><p>If you want to stream a single character, use a character-literal, not a length-one string-literal. It might be slightly more efficient.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>.</p></li>
<li><p>Use <code>noexcept</code> where appropriate.</p></li>
<li><p>Don't make things external for no reason. It increases the chance for collisions, and decreases the chance for inlining.</p></li>
<li><p>Input can fail. Deal with it.</p></li>
<li><p>As a final point, it might be better to just pre-compute the full sequence and be done with it. That might even save space.</p></li>
</ol>

<p>Modified code:</p>

<pre><code>#include &lt;iostream&gt;

static int getPrime(int n) noexcept {
    //Using sieve of Eratosthenes to generate primes
    constexpr auto sqrt_size = 10;
    constexpr auto size = sqrt_size * sqrt_size;
    if (!n) return 2;
    bool prime[size] = {false, false, true};
    for (int i = 3; i &lt; size; i += 2)
        prime[i] = true;
    for (int i = 3; i &lt; sqrt_size; i += 2) {
        if (!prime[i])
            continue;
        if (!--n)
            return i;
        for (int j = i + i; j &lt; size; j += i)
            prime[i] = false;
    }
    for (int i = (sqrt_size &amp; ~1) + 1; i &lt; size; i += 2)
        if (prime[i] &amp;&amp; !--n)
            return i;
    return 0;
}

static int getFibonacci(int n) noexcept {
    int last = 0, r = 1;
    while (n-- &gt; 0) {
        int temp = last + r;
        last = r;
        r = temp;
    }
    return r;
}

static int mySeries(int n) noexcept {
    return n % 2 ? getFibonacci(n / 2 + 1) : getPrime(n / 2);
}

int main() {
    int n;
    if (std::cin &gt;&gt; n)
        std::cout &lt;&lt; mySeries(n) &lt;&lt; '\n';
    else
        std::cerr &lt;&lt; "Could not understand your input. Expected a number.\n";
}
</code></pre>
    </div>