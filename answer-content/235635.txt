<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Readability</h1>

<p>Your code is visually unappealing. You have multiple PEP 8 violations, and your variable names really don't speak volumes. You have 2 spaces of indentation which is pretty much un-heard of in Python. If we move your code into a function and perform a little clean up we can get something like:</p>

<pre class="lang-py prettyprint-override"><code>import numpy as np


def get_indexes(tokens, word):
    return [
        index
        for index, token in enumerate(tokens)
        if token == word
    ]


def co_occurrence_matrix(corpus, vocabulary, window_size=5):
    matrix = np.zeros((len(vocabulary), len(vocabulary)), np.float64)
    for word_1 in vocabulary:
        for word_2 in vocabulary:
            for sent in corpus:
                tokens = sent.split()
                tokens_1 = get_indexes(tokens, word_1)
                tokens_2 = get_indexes(tokens, word_2)
                for k in tokens_1:
                    for l in tokens_2:
                        if abs(l - k) &gt; window_size:
                            continue
                        if word_1 == word_2:
                            continue
                        matrix[
                            vocabulary.index(word_1),
                            vocabulary.index(word_2),
                        ] += 1
    return matrix


print(co_occurrence_matrix(corpu1, voca))
</code></pre>

<h1>Performance</h1>

<p>Now It doesn't look too bad, but it doesn't really look nice. From here we can see clearly that <code>word_1</code> and <code>word_2</code> are defined in the first two loops, however the check <code>word_1 == word_2</code> is on the inner-most level of the loops. This means you're needlessly looping over <code>sent</code>, <code>tokens_1</code> and <code>tokens_2</code>. These loops, totalling around 12000000, are useless and a waste of time.</p>

<p>It can be hard to see, but <code>vocabulary.index(word_1)</code> has a <code>for</code> loop in it. How else is it getting the index? This means you're looping 2000 times, this is a waste as you can define a variable to store the index when looping through <code>vocabulary</code>.</p>

<p>You don't need to iterate over <code>vocabulary</code>, you can just iterate over <code>corpus</code>. This is because if <code>word_1</code> or <code>word_2</code> is not in <code>tokens</code> then the for loop will iterate over an empty list and so will do nothing. And so we can derive <code>word_1</code> and <code>word_2</code> from <code>corpus</code>.</p>

<p>Since <code>vocabulary</code> only contains the top 2000 words in the <code>corpus</code>. Then a na√Øve flip of the loops is still going to waste some cycles. And so we can just filter <code>sent</code> to ones in the <code>vocabulary</code>. To achieve this I opted to use a closure as I think it makes the code cleaner and easier to read. This is because I don't have the walrus on Python 3.7 and wanted to use <code>dict.get</code> rather than perform <em>two</em> dictionary lookups per filter of each token.</p>

<pre class="lang-py prettyprint-override"><code>import numpy as np
import itertools


def by_indexes(iterable):
    output = {}
    for index, key in enumerate(iterable):
        output.setdefault(key, []).append(index)
    return output


def co_occurrence_matrix(corpus, vocabulary, window_size=5):
    def split_tokens(tokens):
        for token in tokens:
            indexs = vocabulary_indexes.get(token)
            if indexs is not None:
                yield token, indexs[0]

    matrix = np.zeros((len(vocabulary), len(vocabulary)), np.float64)
    vocabulary_indexes = by_indexes(vocabulary)

    for sent in corpus:
        tokens = by_indexes(split_tokens(sent.split())).items()
        for ((word_1, x), indexes_1), ((word_2, y), indexes_2) in itertools.permutations(tokens, 2):
            for k in indexes_1:
                for l in indexes_2:
                    if abs(l - k) &lt;= window_size:
                        matrix[x, y] += 1
    return matrix


print(co_occurrence_matrix(corpu1, voca))
</code></pre>

<p>This currently isn't fully optimized, as you can use <code>combinations</code> rather than <code>permutations</code> but that would require mirroring the non-empty values of the matrix. That would likely half the time it takes to run, but would require additional code.</p>

<p>This is answer is entirely hypothetical. This means using <code>dict[]</code> twice rather than <code>dict.get</code> may be faster. It also means that many of the assumptions I made may not translate into performance benefits due to the way Python is.</p>
    </div>