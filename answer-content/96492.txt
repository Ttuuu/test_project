<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Building on @Joe Wallis' answer, I would shorten it as follows:</p>

<pre><code>def alarm_clock(day, vacation):
    weekend = "06"

    times = {"weekend": "10:00", "weekday": "7:00"}
    if vacation:
        times = {"weekend": "off", "weekday": "10:00"}

    return times['weekend'] if str(day) in weekend else times['weekday']
</code></pre>

<p>Which could be further shortened to (detrimental to readability though):</p>

<pre><code>def alarm_clock(day, vacation):
    times = {"weekend": "off", "weekday": "10:00"} if vacation \
            else {"weekend": "10:00", "weekday": "7:00"}

    return times['weekend'] if str(day) in "06" else times['weekday']
</code></pre>

<p>The advantages are that you have a dict with the weekend/weekday times, so you only need one generic return statement. The magic/hardcoded string in the further shortened version is a no-no though. Furthermore, you could extend the function to allow for custom times to be passed in, as such:</p>

<pre><code>def alarm_clock(day, vacation, times={}):
    times = times.get('regular', {"weekend": "10:00", "weekday": "7:00"})
    if vacation:
        times = times.get('vacation', {"weekend": "off", "weekday": "10:00"})

    return times['weekend'] if str(day) in "06" else times['weekday']
</code></pre>

<p>You can then call it as such:</p>

<pre><code>times = {'regular': {'weekend': "9:00", "weekday": "7:00"}, "vacation": {"weekend": "12:00", "weekday": "6:00"}}
alarm_clock(2, False, times)
</code></pre>
    </div>