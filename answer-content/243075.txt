<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Quite nicely done. However there is always room for improvement. In order of severity</p>

<h1>Looping</h1>

<p>You do</p>

<pre><code>def estimate_triangle_probability():
    num_success = num_attempts = 0
    for _ in range(10000000):
        num_success += 1 if try_one_triangle() else 0
        num_attempts += 1
</code></pre>

<p>If you were to need the loop counter inside the loop you would rather do</p>

<pre><code>def estimate_triangle_probability():
    num_success = 0
    for num_attempts in range(10000000):
        num_success += 1 if try_one_triangle() else 0
</code></pre>

<p>As you do not need the counter inside the loop but using the value after the loop as 'number of runs' you shall do</p>

<pre><code>def estimate_triangle_probability():
    num_success = 0
    num_attempts = 10000000
    for _ in range(num_attempts):
        num_success += 1 if try_one_triangle() else 0
</code></pre>

<p>Looping with extra counters is very error prone. you should really avoid that.</p>

<p>As we already touch this code we also introduce <code>num_attempts</code> as parameter which gives nice testabilty</p>

<pre><code>def estimate_triangle_probability(num_attempts):
    num_success = 0
    for _ in range(num_attempts):
        num_success += 1 if try_one_triangle() else 0
</code></pre>

<p>Another minor readability improvement is the ternary if</p>

<pre><code>num_success = 0
for _ in range(num_attempts):
    num_success += 1 if try_one_triangle() else 0
</code></pre>

<p>which in this case is imho more readable in the form</p>

<pre><code>num_success = 0
for _ in range(num_attempts):
    if try_one_triangle():
        num_success += 1
</code></pre>

<p>Differently we can eliminate the explicit loop for a comprehension</p>

<pre><code>num_success = sum(1 for _ in range(num_attempts) if try_one_triangle())
</code></pre>

<p>So we get rid of the counter initialization and increment.</p>

<h1>Return boolean expressions</h1>

<p>You do</p>

<pre><code>if (ab &gt; c and ac &gt; b and bc &gt; a):
    return True

return False
</code></pre>

<p>which is an 'anti-pattern'. Instead do</p>

<pre><code>return ab &gt; c and ac &gt; b and bc &gt; a
</code></pre>

<h1>Temporary variables</h1>

<p>You do </p>

<pre><code>ab = a + b
ac = a + c
bc = b + c

if (ab &gt; c and ac &gt; b and bc &gt; a):
    # ...
</code></pre>

<p>which has no better readability or documentation. There is nothing wrong with</p>

<pre><code>if a + b &gt; c and a + c &gt; b and b + c &gt; a:
    # ...
</code></pre>

<p>The same goes for</p>

<pre><code>first_point = random()
second_point = random()
sorted_points = sorted((first_point, second_point))
return can_form_triangle(sorted_points[0], sorted_points[1] - sorted_points[0], 1 - sorted_points[1])
</code></pre>

<p>which may read</p>

<pre><code>sorted_points = sorted(random(), random())
return can_form_triangle(sorted_points[0], sorted_points[1] - sorted_points[0], 1 - sorted_points[1])
</code></pre>

<p>There is good reason for temporaries if the name of the temporary serves documentation. Here the names do not add value.</p>

<p>To improve readability of the return expression we do</p>

<pre><code>x, y = sorted((random(), random()))
return can_form_triangle(x, y-x, 1-y)
</code></pre>

<h1>Overengineered</h1>

<p>After removing unnecessary temporaries the remaining code looks like</p>

<pre><code>#!/usr/bin/python3

from random import random


def can_form_triangle(a, b, c):
    """Determines if lengths a, b, and c can form a triangle.

    Args:
        a, b, c: Number representing the length of a side of a (potential) triangle

    Returns:
        True if all pairs from (a, b, c) sum to greater than the third element
        False otherwise
    """

    return a + b &gt; c and a + c &gt; b and b + c &gt; a


def try_one_triangle():
    """Simulates breaking a line segment at two random points and checks if the segments can form a triangle.

    Returns:
        True if the line segments formed by breaking a bigger line segment at two points can form a triangle
        False otherwise
    """

    x, y = sorted((random(), random()))
    return can_form_triangle(x, y-x, 1-y)


def estimate_triangle_probability(num_attempts):
    num_success = sum(1 for _ in range(num_attempts) if try_one_triangle())

    print('Success:', num_success)
    print('Attempts:', num_attempts)
    print('Ratio:', num_success / num_attempts)


if __name__ == '__main__':
    estimate_triangle_probability(10000000)
</code></pre>

<p>We notice that most functions have a single line of code. We have docstrings for two one-line helpers but none for the top level <code>estimate_triangle_probability(num_attempts)</code>. If we eliminate the two helpers we get</p>

<pre><code>#!/usr/bin/python3

from random import random


def estimate_triangle_probability(num_attempts):
    num_success = 0
    for _ in range(num_attempts):
        # break a line of length 1 two times to get three segments
        x, y = sorted((random(), random()))
        # segments can form a triangle if all are shorter than half the perimeter
        if all(s &lt; 0.5 for s in (x, y-x, 1-y)):
            num_success += 1
    return num_success / num_attempts


if __name__ == '__main__':
    num_attempts = 10000000
    ratio = estimate_triangle_probability(num_attempts)
    print('Attempts:', num_attempts)
    print('Ratio:', ratio)
</code></pre>

<p>Here we also moved output code from the remaining function to main and introduced a return value instead. The final result is is maybe a little too dense for a programming course. Left to do: We could still improve some names. Also the remaining function needs documentation.</p>
    </div>