<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<p>Your function does not return “minimum elements,” but the shortest subset of an array with a given sum. I would suggest something like</p>

<pre><code>func shortestSubset(of array: [Int], withSum goal: Int) -&gt; [Int]
</code></pre>

<h3>Handling exceptional cases</h3>

<p>Your code returns the <em>entire</em> array if no subset with the given sum exists, which seems not sensible to me.</p>

<p>In a comment you said that it should return an empty array in that case, but that would be ambiguous: an empty array is also the correct result for <code>goal = 0</code>.</p>

<p>The Swift way would be to make the result an <em>optional</em> which is <code>nil</code> if no subset is found:</p>

<pre><code>func shortestSubset(of array: [Int], withSum goal: Int) -&gt; [Int]? {
    let subsets = array.allSubsets

    let validSubsets = subsets.filter { subset in
        subset.reduce(0, +) == goal
    }

    if let firstValid = validSubsets.first {
        return validSubsets.dropFirst().reduce(firstValid) { $0.count &lt; $1.count ? $0 : $1 }
    } else {
        return nil
    }
}
</code></pre>

<p>Note also that the <code>+</code> operator can be passed directly to the closure parameter of <code>reduce()</code> which reduces(!) the code slightly.</p>

<h3>Performance: avoid creation of intermediate arrays</h3>

<p>The first performance problem is that a list with <em>all</em> subsets is generated first. For an array with <span class="math-container">\$ N \$</span> elements that makes <span class="math-container">\$ 2^N \$</span> subsets.</p>

<p>A better approach would be to determine the shortest subset while enumerating the subsets, instead of putting all subsets into a list first. Here is a first attempt:</p>

<pre><code>// Version A:

func shortestSubset(of array: [Int], withSum goal: Int) -&gt; [Int]? {
    // Terminating condition:
    guard let first = array.first else {
        return goal == 0 ? [] : nil
    }

    // Recursion:
    let tail = Array(array.dropFirst())
    let subsetWithout = shortestSubset(of: tail, withSum: goal)
    let subsetWith = shortestSubset(of: tail, withSum: goal - first)

    switch (subsetWithout, subsetWith) {
    case (let s1?, let s2?): return s1.count &lt; s2.count + 1 ? s1 : [first] + s2
    case (let s1?, nil): return s1
    case (nil, let s2?): return [first] + s2
    case (nil, nil): return nil
    }
}
</code></pre>

<p>In the recursion step, the shortest subsets which can be obtained by including or omitting the first array element are determined recursively. The switch-statement is used to handle the case where none, one, or both of these intermediate results are <code>nil</code>.</p>

<p>This turned to be a bit faster in my tests, but there are still many intermediate array created at</p>

<pre><code>let tail = Array(array.dropFirst())
</code></pre>

<p>If we modify the method to take a <em>collection</em> of integers instead of an array then we can pass the slice <code>array.dropFirst()</code> directly to the recursive call. Slices are “cheap” to create and share the storage with their origin (unless mutated):</p>

<pre><code>// Version B:

func shortestSubset&lt;C: Collection&gt;(of array: C, withSum goal: Int) -&gt; [Int]? where C.Element == Int {
    // Terminating condition:
    guard let first = array.first else {
        return goal == 0 ? [] : nil
    }

    // Recursion:
    let subsetWithout = shortestSubset(of: array.dropFirst(), withSum: goal)
    let subsetWith = shortestSubset(of: array.dropFirst(), withSum: goal - first)
    switch (subsetWithout, subsetWith) {
    case (let s1?, let s2?):
        return s1.count &lt; s2.count + 1 ? s1 : [first] + s2
    case (let s1?, nil):
        return s1
    case (nil, let s2?):
        return [first] + s2
    case (nil, nil):
        return nil
    }
}
</code></pre>

<p>This turned out to be considerably faster in my test.</p>

<h3>Performance: prune the search tree</h3>

<p>A possible performance improvement is to stop the recursion if the goal cannot be reached with the remaining array elements, i.e. if the target sum is smaller than the smallest possible sum or larger than the largets possible sum of the array.</p>

<p>Here it is useful to do the recursion in a helper function. The main function computes the smallest and largest sum once and passes it on to the helper function. The helper function can update those limits, without the need of computing them again.</p>

<p>The helper function takes an array <em>slice</em> as argument, that is another way to void the creation of intermediate arrays.</p>

<pre><code>// Version C:

func shortestSubsetHelper(of array: ArraySlice&lt;Int&gt;, withSum goal: Int,
                          min: Int, max: Int) -&gt; [Int]? {
    guard let first = array.first else {
        return goal == 0 ? [] : nil
    }
    if goal &lt; min || goal &gt; max {
        return nil
    }
    let subsetWithout = shortestSubsetHelper(of: array.dropFirst(), withSum: goal,
                                         min: min, max: max)
    let subsetWith = first &lt; 0 ?
        shortestSubsetHelper(of: array.dropFirst(), withSum: goal - first,
                              min: min - first, max: max) :
        shortestSubsetHelper(of: array.dropFirst(), withSum: goal - first,
                              min: min, max: max - first)
    switch (subsetWithout, subsetWith) {
    case (let s1?, let s2?):
        return s1.count &lt; s2.count + 1 ? s1 : [first] + s2
    case (let s1?, nil):
        return s1
    case (nil, let s2?):
        return [first] + s2
    case (nil, nil):
        return nil
    }
}

func shortestSubset(of array: [Int], withSum goal: Int) -&gt; [Int]? {

    let smallestSum = array.filter { $0 &lt; 0 }.reduce(0, +)
    let largestSum = array.filter { $0 &gt; 0 }.reduce(0, +)
    return shortestSubsetHelper(of: array[...], withSum: goal,
                                min: smallestSum, max: largestSum)
}
</code></pre>

<h3>Dynamic programming</h3>

<p>What we have here is a variant of the <a href="https://en.wikipedia.org/wiki/Subset_sum_problem" rel="nofollow noreferrer">“subset sum problem”</a>, which has well-known solutions using dynamic programming. Instead of determining only if a subset with the given sum exists we also need the smallest subset with that sum.</p>

<p>The following is motivated by the “Pseudo-polynomial time dynamic programming solution” from the above Wikipedia article. We maintain a dictionary which for every achievable sum stores the shortest subset with that sum that has been found so far. The given array is traversed once, and the dictionary updated accordingly for each array element.</p>

<pre><code>// Version D:

func shortestSubset(of array: [Int], withSum goal: Int) -&gt; [Int]? {
    // Map each possible sum to the shortest subset found so far with that sum:
    var dp: [Int: [Int]] = [0: []]

    for elem in array {
        let upd = dp.map { (key, value) in (key + elem, value + [elem])}
        for (key, value) in upd {
            if let oldValue = dp[key] {
                if value.count &lt; oldValue.count {
                    dp[key] = value
                }
            } else {
                dp[key] = value
            }
        }
    }
    return dp[goal]
}
</code></pre>

<p>This turned out to be faster for <em>large</em> arrays.</p>

<h3>Benchmarks</h3>

<p>The following (very simple) benchmark was done on a 3.5 GHz Quad-Core Intel Core i5 iMac running macOS 10.15, and </p>

<pre><code>let array = [1, -2, 3, -4, 5, -6, 100, 100, 7, -8, 9, -10, 11, -12]
let goal = 20

let start = Date()
let result = shortestSubset(of: array, withSum: goal)
let end = Date()
print(result, end.timeIntervalSince(start) * 1000)
</code></pre>

<p>compiled with Xcode 11.3.1 in Release mode, i.e. with optimization.</p>

<p>Results (approximately):</p>

<ul>
<li>Original code: 6 milliseconds.</li>
<li>Version A: 3 milliseconds.</li>
<li>Version B: 0.7 milliseconds.</li>
<li>Version C: 0.2 milliseconds.</li>
<li>Version D: 0.4 milliseconds.</li>
</ul>

<p>With the larger array</p>

<pre><code>let array = [1, -2, 3, -4, 5, -6, 100, 100, 7, -8, 9, -10, 11, -12,
             1, -2, 3, -4, 5, -6, 100, 100, 7, -8, 9, -10, 11, -12]
let goal = 20
</code></pre>

<p>we get the following results:</p>

<ul>
<li>Original code: ??? </li>
<li>Version A: 37733 milliseconds.</li>
<li>Version B: 6079 milliseconds.</li>
<li>Version C: 548 milliseconds.</li>
<li>Version D: 2.5 milliseconds.</li>
</ul>
    </div>