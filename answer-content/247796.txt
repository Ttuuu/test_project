<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For completeness, below is my my current version of <code>CancellablePromise</code> which <em>still</em> uses the "<a href="https://www.npmjs.com/package/prex" rel="nofollow noreferrer">Promise Extensions for JavaScript (<code>prex</code>)</a>" package.
One notable improvement is using <code>[Symbol.species]</code>, more details <a href="https://stackoverflow.com/a/60328122/1768303">on why it's needed</a>. A runkit is <a href="https://runkit.com/noseratio/cancellablepromise/0.1.5" rel="nofollow noreferrer">here</a>.</p>
<pre><code>// https://codereview.stackexchange.com/q/207116/35474

const prex = require('prex');

/**
 * Class representing a cancellable promise.
 * @extends Promise
 */
class CancellablePromise extends Promise {
  static get [Symbol.species]() {
    return Promise;
  }

  /**
   * Create an instance of CancellablePromise promise.
   * @param {Function} executor - accepts an object with callbacks 
   *  and a token: { resolve, reject, cancel, token }
   * @param {CancellationToken} token - a cancellation token.
   */
  constructor(executor, token) {
    const withCancellation = async () =&gt; {
      const linkedSource = new prex.CancellationTokenSource([token]);

      try {
        const linkedToken = linkedSource.token;
        linkedToken.throwIfCancellationRequested();

        const deferred = new prex.Deferred();
        linkedToken.register(() =&gt; deferred.reject(new prex.CancelError()));

        executor({ 
          resolve: value =&gt; deferred.resolve(value),
          reject: error =&gt; deferred.reject(error),
          cancel: () =&gt; linkedSource.cancel(),
          token: linkedToken,
        });
 
        return await deferred.promise;
      }
      finally {
        // this will free the linkedToken registration
        linkedSource.close();
      }
    };

    super((resolve, reject) =&gt; withCancellation().then(resolve, reject));
  }
}

//
// An example of using CancellablePromise 
//

// async delay with cancellation
function delayWithCancellation(timeoutMs, token) {
  console.log(`delayWithCancellation: ${timeoutMs}`);

  return new CancellablePromise(d =&gt; {
    token.throwIfCancellationRequested();
    const id = setTimeout(d.resolve, timeoutMs);
    d.token.register(() =&gt; clearTimeout(id));
  }, token);
}

// main
async function main() {
  const tokenSource = new prex.CancellationTokenSource();
  setTimeout(() =&gt; tokenSource.cancel(), 2000); // cancel after 2000ms

  const token = tokenSource.token;

  await delayWithCancellation(1000, token);
  console.log("successfully delayed."); // we should reach here

  await delayWithCancellation(3000, token);
  console.log("successfully delayed."); // we should not reach here
}

main().catch(error =&gt; console.log(`Error caught, ${error}`));
</code></pre>
    </div>