<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few comments that may help you improve your code.</p>

<h2>Use only necessary <code>#include</code>s</h2>

<p>The <code>#include &lt;cmath&gt;</code> line is not necessary and can be safely removed.</p>

<h2>Avoid "magic numbers"</h2>

<p>Since the constant 100 is used several times within the code, it makes sense to create a constant instead.  This also helps with troubleshooting since you can quickly change it to small values (e.g. 10) for which you already know the answer:</p>

<pre><code>const int maxnum = 100;
</code></pre>

<h2>Avoid abusing <code>using namespace std</code></h2>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Especially in a very simple program like this, there's little reason to use that line.  Putting <code>using namespace std</code> at the top of every program is <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Eliminate function prototypes by ordering</h2>

<p>If you put the <code>sum</code> and <code>sqsum</code> implementations <em>above</em> <code>main</code> in the source code, you don't need the function prototypes.</p>

<h2>End the last console output with a newline</h2>

<p>The output to the program is a little neater on most machines if you output a newline character after the last of the program's console output.</p>

<h2>Avoid unnecessary function calls</h2>

<p>It doesn't make a huge difference in this code, but the code dosn't need to make two calls to <code>sum()</code>.  Instead, the <code>main</code> routine might look like this:</p>

<pre><code>int main()
{
    const int maxnum = 100;
    unsigned square_of_sum = sum(maxnum);
    square_of_sum *= square_of_sum;
    std::cout &lt;&lt; square_of_sum - sqsum(maxnum)-a &lt;&lt; '\n';
}
</code></pre>
    </div>