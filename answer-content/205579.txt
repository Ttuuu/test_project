<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>POSIX</h1>

<p>The script is a strange mixture of POSIX and non-POSIX. On the one hand, <code>openssl</code> definitely isn't POSIX, but it's essential since that's what the entire script is about. On the other hand, many of the options used here for POSIX utilities aren't standard, and <code>pv</code> isn't <em>essential</em> to the operation of the script. (Is it useful here? Yes. Is it necessary here? No.) So, if you're going to be POSIX-compliant+<code>openssl</code> in any meaningful sense:</p>

<ul>
<li>Use <code>-i</code> instead of <code>--ignore-case</code> with <code>grep</code>. There's the <code>-q</code> option for suppressing output as well.</li>
<li>Take the default 512-byte block output of <code>du</code> and <code>df</code> and multiple by 512 in awk, or use <code>-k</code> for 1024-byte blocks and multiply by 1024, instead of using <code>--byte</code>. 

<ul>
<li>At any rate, byte-level free-space checks aren't that useful, since ultimately even a single-byte file will take up an entire sector. 512-byte checks should be enough, but since GNU <code>df</code> and <code>du</code> unfortunately stick to 1024-byte blocks even with <code>-P</code>, use <code>-kP</code> (1024 bytes with POSIX output) for predictability.  </li>
</ul></li>
<li>If <code>pv</code> is used solely for progress, use it if available, but fallback to <code>cat</code> if isn't.</li>
</ul>

<hr>

<h2>Diagnostics</h2>

<p>The script has a lot of error messages, but has a grave problem: You discard <code>openssl</code>'s error and then print your own useless error message. "Decryption failed!"? And how is the user supposed to know why it failed without <code>openssl</code>'s error output? You should retain <code>openssl</code> output and print if an error occurred (I'd print everything from <code>openssl</code> in any case, but if you really must hide it, hide it only on success):</p>

<pre><code>if ! openssl_out="$(pv --wait "${input_file}" | openssl enc -aes-256-cbc -md sha256 -salt -out "${output_file}" -d 2&gt;&amp;1)"
then
    [ -f "${output_file}" ] &amp;&amp; rm "${output_file}"
    print_error_and_exit 1 'pv --wait "${input_file}" | openssl enc -aes-256-cbc -md sha256 -salt -out "${output_file}" -d' "Decryption failed!: ${openssl_out}"
    ...
</code></pre>

<p>Also, <code>input_file</code> and <code>output_file</code> (and various other variables in other such error messages) won't be expanded for the output message. This reduces the utility of these labels, since the user won't see what was actually run.</p>

<hr>

<pre><code># scripts exit with 0 exit code by default, in case of success,
# so this just more explicit for readers
exit 0
</code></pre>

<p>No, they don't. They exit with the exit status of the last command executed, which in that case would have been the <code>echo "Decryption successful."</code>, and if <code>echo</code> had failed for some reason, then there'd be bigger problems. <code>exit 0</code> as the last command in a shell script is virtually useless unless the previous command is expected to return a non-zero exit code.</p>

<hr>

<p><code>check_for_prerequisite</code> could loop over arguments. There's no reason for it to accept just a single argument.</p>

<hr>

<pre><code>if command -v tput &gt; /dev/null 2&gt;&amp;1 &amp;&amp; tput setaf 1 &gt; /dev/null 2&gt;&amp;1
then
    # color definitions
    readonly bold=$(tput bold)
    ...

    exit "${1}"
else
    # here we do not have color support
    printf '%b\n\n\t%b\n\nexit code = %b\n' \
        "${2}" "${3}" "${1}"

    exit "${1}"
fi
</code></pre>

<p>Move the <code>exit "${1}"</code> outside the <code>if</code> block. You're going to <code>exit</code> either way.</p>

<p>Why print the exit code? It's easily accessible to the user anyway.</p>

<hr>

<pre><code>filename_extracted_from_path=$(basename "${input_file}")
filename_without_enc_extension="${filename_extracted_from_path%.enc}"
</code></pre>

<p>You don't need to quote variable assignments, but if you are going to quote them, be consistent and quote the command substitution as well.</p>
    </div>