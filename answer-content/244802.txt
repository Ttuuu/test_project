<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Why would you do such a thing?</h1>
<p>I understand that you wrote the Arithmetic Expression Compiler, and perhaps want to show it off. But who would ever want to write a function as simple as a Fibonacci sequence generater using three programming languages (AEC, Intel assembly, and C++) mixed together, and type way more code than it would take in either C++ or even pure Intel assembly itself to implement it?</p>
<p>AEC doesn't provide any benefits here. Looking at the generated assembly, AEC does not perform any kind of optimization.</p>
<h1><code>fibonacci.aec</code> syntax</h1>
<p>The syntax in <code>fibonacci.aec</code> looks quite bad. There's assembly code mixed with AEC's own language. It seems AEC generates ATT syntax, and your inline assembly uses Intel syntax, and you have to manually switch between the two. Also, the instructions you do have to add manually seem very trivial: <code>call</code> and <code>ret</code>. It would be much nicer if the AEC language allowed you to express these operations, so you wouldn't need to add assembly.</p>
<h1>Comments about your C++ code</h1>
<h2>Use of global variables</h2>
<p>I suppose it is a limitation of AEC that you have to use global variables to communicate between the generated assembly code and the C++ code. However, now you have the problem that you cannot call <code>fibonacci()</code> from different threads simultaneously. There's also a compile-time limit on how many elements of the Fibonacci sequence you can generate, due to the size of <code>stackWithLocalVariables[]</code> and <code>memoisation[]</code>.</p>
<h2>Floats vs. ints</h2>
<p>Your AEC only deals with 32-bit floating point values, but the C++ program deals with integers, and now has to convert to and from floating point variables to satisfy the assembly code. But a lot of conversions are there only because you are reusing <code>float n</code> to store the user's input, even if you clearly expect an integer. Far better would be to declare an <code>int</code> variable in <code>main()</code>, and copy it to <code>n</code> to satisfy <code>fibonacci()</code>, but avoid all the <code>int(n)</code> casts.</p>
<h2>Elevenst, twelfnd, thirteenrd</h2>
<p>The suffix you add to print out "The n-th Fibonacci number is" is calculated using an expression that doesn't catch all the edge cases. I suggest you just do not try to add such a suffix at all, and instead write something like:</p>
<pre><code>std::cout &lt;&lt; "Element " &lt;&lt; n &lt;&lt; " in the Fibonacci sequence is equal to " &lt;&lt; returnValue &lt;&lt; ".\n";
</code></pre>
<h2>Use <code>"\n"</code> instead of <code>std::endl</code></h2>
<p>I strongly suggest you use <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n"><code>"\n"</code> instead of <code>std::endl</code></a>; the latter is equivalent to <code>"\n"</code>, but it also forces a flush of the output stream. That is usually unnecessary and can be detrimental to performance.</p>
<h2>Avoid using <code>std::system()</code> for trivial things</h2>
<p><a href="https://stackoverflow.com/questions/1107705/systempause-why-is-it-wrong">Using <code>std::system()</code> is usually wrong</a>. has a huge overhead: it has to create a new shell process, that process has to parse the command you gave, and if that command is not a built-in function of the shell, then it has to start yet another process. As you already have noticed, it also is not portable between different operating systems. And something trivial as <code>std::system("PAUSE")</code> can be replaced by a simple C++ statement like:</p>
<pre><code>std::cin.get();
</code></pre>
    </div>