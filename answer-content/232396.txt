<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Manipulating DOM with VueJS</h2>

<p>The biggest comment I have about this code is that it modifies DOM elements using vanillaJS techniques. With VueJS, there are ways of achieving this without needing to reference those elements via properties like <em>id</em> or <em>ref</em>. One way is to use <a href="https://vuejs.org/v2/guide/computed.html" rel="nofollow noreferrer">computed properties</a> and <a href="https://vuejs.org/v2/guide/class-and-style.html#Binding-Inline-Styles" rel="nofollow noreferrer">bound styles</a>. See rewritten code below for examples.</p>

<h2>Other review points</h2>

<h3>Global variables</h3>

<p>This code relies heavily on global variables (e.g. <code>dividerRef</code>, <code>currentDivider</code>, <code>leftDivider</code>, <code>rightDivider</code>, etc.). Unless those variables are needed for other code, the Vue instance's <a href="https://vuejs.org/v2/guide/instance.html#Data-and-Methods" rel="nofollow noreferrer"><code>data</code></a> object can be used to store properties used within the various methods.</p>

<h3>Readability aspect: indentation</h3>

<p>The code is somewhat difficult to read because indentation is inconsistent. Particularly lines like these:</p>

<blockquote>
<pre><code>var app = new Vue({
  el: '#app',
  methods: 
  {
                dividerDragStart: function(e) {
                    e.dataTransfer.setDragImage(new Image, 0, 0);
                },
    dividerDrag: function(e) {
                        if (dividerRef == 'lrDivider') {
                                currentDivider.style.left = e.clientX + 'px';
</code></pre>
</blockquote>

<p>It is best to keep indentation consistent - e.g. two or four spaces or single tab per nesting level.</p>

<h3>Repeated code</h3>

<p>There is a lot of duplicated code in methods <code>dividerDrag()</code> and <code>dividerDragEnd()</code> - all lines except the last few of the latter function appear to be repeated, and <code>dividerDragEnd</code> could just call <code>dividerDrag</code> (which could be renamed to avoid confusion) or those duplicate lines could be abstracted out to a separate function that can be called by both. </p>

<h3>Unused variables</h3>

<p>Variables <code>heightHalf</code> and <code>widthHalf</code> appear to be unused after being assigned a value in the <code>mounted</code> method. Those can be removed.</p>

<h3>Styles can be consolidated</h3>

<p>The CSS for the <code>&lt;div&gt;</code> elements that contain the text-area elements could be consolidated - e.g. give them all a class called <code>container</code>:</p>

<pre><code>.container {
  position: absolute;
  overflow: scroll;
  top: 0;
  left: 0;
  height: 50%;
  width: 50%;
}
</code></pre>

<p>Then the existing styles can be simplified to simple colors and position overrides: </p>

<pre><code>top-left {
  background-color: pink;
}

.top-right {
  background-color: lightgreen;
  left: 50%;
}

.bottom-left {
  background-color: lightblue;
  top: 50%;
}

.bottom-right {
  background-color: lightyellow;
  top: 50%;
  left: 50%;
}
</code></pre>

<h2>Alternative approach</h2>

<p>As mentioned above, computed properties and bound styles can be used to manipulate the DOM elements instead of referencing the DOM elements by <em>ref</em> attributes.</p>

<p>Notice the <code>data</code> property of the vue instance contains three values, initially set to empty strings, to store the positions of the dividers. When the dividers are dragged, those properties get updated accordingly. Then the computed values for the styles will be changed automatically.</p>

<p>With this approach, there are only four small methods needed to handle the drag events, and there is no need to have methods bound to the <code>dragend</code> or <code>mousedown</code> events on the dividers. All of the style properties are computed after the data values are updated. </p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var app = new Vue({
  el: '#app',
  data: {
    lrDividerPos: '',
    rtbDividerPos: '',
    ltbDividerPos: '',
  },
  computed: {
    bottomLeftStyle: function() {
      const style = {};
      if (this.lrDividerPos) {
        style.width = this.lrDividerPos + 'px';
      }
      if (this.ltbDividerPos) {
        style.height = (window.innerHeight - this.ltbDividerPos) + 'px';
        style.top = this.ltbDividerPos + 'px';
      }
      return style;
    },
    bottomRightStyle: function() {
      const style = {};
      if (this.lrDividerPos) {
        style.left = this.lrDividerPos + 'px';
        style.width = (window.innerWidth - this.lrDividerPos + 2) + 'px';
      }
      if (this.rtbDividerPos) {
        style.top = this.rtbDividerPos + 'px';
        style.height = (window.innerHeight - this.rtbDividerPos) + 'px';
      }
      return style;
    },
    leftDividerStyles: function() {
      if (this.lrDividerPos) {
        return {
          width: (this.lrDividerPos + 2) + 'px'
        };
      }
      return {};
    },
    ltbDividerStyles: function() {
      const style = {};
      if (this.lrDividerPos) {
        style.width = this.lrDividerPos + 2 + 'px';
      }
      if (this.ltbDividerPos) {
        style.top = this.ltbDividerPos + 'px';
      }
      return style;
    },
    lrDividerStyles: function() {
      if (this.lrDividerPos) {
        return {
          left: this.lrDividerPos + 'px'
        };
      }
      return {};
    },
    rtbDividerStyles: function() {
      const style = {};
      if (this.lrDividerPos) {
        style.left = this.lrDividerPos + 'px';
        style.width = (window.innerWidth - this.lrDividerPos + 2) + 'px';
      }
      if (this.rtbDividerPos) {
        style.top = this.rtbDividerPos + 'px';
      }
      return style;
    },
    topLeftStyle: function() {
      const style = {};
      if (this.ltbDividerPos) {
        style.height = this.ltbDividerPos + 'px';
      }
      if (this.lrDividerPos) {
        style.width = this.lrDividerPos + 'px';
      }
      return style;
    },
    topRightStyle: function() {
      const style = {};
      if (this.lrDividerPos) {
        style.left = this.lrDividerPos + 'px';
        style.width = (window.innerWidth - this.lrDividerPos + 2) + 'px';
      }
      if (this.rtbDividerPos) {
        style.height = this.rtbDividerPos + 'px';
      }
      return style;
    }
  },
  methods: {
    lrDividerDrag: function(e) {
      if (e.clientX) {
        this.lrDividerPos = e.clientX;
      }
    },
    ltbDividerDrag: function(e) {
      if (e.clientY) {
        this.ltbDividerPos = e.clientY;
      }
    },
    rtbDividerDrag: function(e) {
      if (e.clientY) {
        this.rtbDividerPos = e.clientY;
      }
    },
    dividerDragStart: function(e) {
      e.dataTransfer.setDragImage(new Image, 0, 0);
    }
  }
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.text-area {
  margin: 10px;
}

.top-left {
  position: absolute;
  background-color: pink;
  overflow: scroll;
  top: 0;
  left: 0;
  height: 50%;
  width: 50%;
}

.top-right {
  position: absolute;
  background-color: lightgreen;
  overflow: scroll;
  top: 0;
  left: 50%;
  height: 50%;
  width: 50%;
}

.bottom-left {
  position: absolute;
  background-color: lightblue;
  overflow: scroll;
  top: 50%;
  left: 0;
  height: 50%;
  width: 50%;
}

.bottom-right {
  position: absolute;
  background-color: lightyellow;
  overflow: scroll;
  top: 50%;
  left: 50%;
  height: 50%;
  width: 50%;
}

.divider {
  position: absolute;
  background-color: black;
}

.left-right {
  width: 4px;
  height: 100%;
  top: 0;
  left: calc(50% - 4px / 2);
}

.right-top-bottom {
  width: 50%;
  height: 4px;
  top: calc(50% - 4px / 2);
  left: 50%;
}

.left-top-bottom {
  width: 50%;
  height: 4px;
  top: calc(50% - 4px / 2);
  left: 0;
}

.left-right:hover {
  cursor: col-resize;
}

.left-top-bottom:hover,
.right-top-bottom:hover {
  cursor: row-resize;
}

::-webkit-scrollbar {
  height: 0;
  width: 0;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;

&lt;div id="app"&gt;
  &lt;div&gt;
    &lt;div class="top-left" :style="topLeftStyle"&gt;
      &lt;div class="text-area"&gt;
        &lt;h3&gt;Resize me using the black bars&lt;/h3&gt;

        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor
        in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="top-right" :style="topRightStyle"&gt;
      &lt;div class="text-area"&gt;
        &lt;h3&gt;Resize me using the black bars&lt;/h3&gt;

        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor
        in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="bottom-left" :style="bottomLeftStyle"&gt;
      &lt;div class="text-area"&gt;
        &lt;h3&gt;Resize me using the black bars&lt;/h3&gt;

        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor
        in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="bottom-right" :style="bottomRightStyle"&gt;
      &lt;div class="text-area"&gt;
        &lt;h3&gt;Resize me using the black bars&lt;/h3&gt;

        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor
        in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="left-right divider" draggable="true" @dragstart="dividerDragStart" @drag="lrDividerDrag" :style="lrDividerStyles"&gt;&lt;/div&gt;
    &lt;div class="right-top-bottom divider" draggable="true" @drag="rtbDividerDrag" @dragstart="dividerDragStart" :style="rtbDividerStyles"&gt;&lt;/div&gt;
    &lt;div class="left-top-bottom divider" draggable="true" @drag="ltbDividerDrag" @dragstart="dividerDragStart" :style="ltbDividerStyles"&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<p>The computed properties could be simplified using shorthand notations and ternary operators. For example, instead of conditionally setting properties on each object, always apply it and the browser will accept it if it is a valid rule. For some rules, a ternary operator can be used to either add a value or an empty string - e.g.</p>

<p>instead of </p>

<pre><code>ltbDividerStyles: function() {
  const style = {};
  if (this.lrDividerPos) {
    style.width = this.lrDividerPos + 2 + 'px';
  }
  if (this.ltbDividerPos) {
    style.top = this.ltbDividerPos + 'px';
  }
  return style;
},
</code></pre>

<p>it can be simplified to:</p>

<pre><code>    ltbDividerStyles: function() {
      return {
        top: this.ltbDividerPos + 'px',
        width: this.lrDividerPos ? this.lrDividerPos + 2 + 'px' : ''
      };
    },
</code></pre>

<p>Full simplification: </p>

<pre><code>computed: {
    bottomLeftStyle: function() {  
      return {
        height: (window.innerHeight - this.ltbDividerPos) + 'px',
        top: this.ltbDividerPos + 'px',
        width: this.lrDividerPos + 'px'
      };
    },
    bottomRightStyle: function() {
      return {
        height: (window.innerHeight - this.rtbDividerPos) + 'px',
        left: this.lrDividerPos + 'px',
        top: this.rtbDividerPos + 'px', 
        width: (window.innerWidth - this.lrDividerPos + 2) + 'px'
      };
    }, 
    leftDividerStyles: function() {
      return {width: (this.lrDividerPos + 2) + 'px'};
    },
    ltbDividerStyles: function() {
      return {
        top: this.ltbDividerPos + 'px',
        width: this.lrDividerPos ? this.lrDividerPos + 2 + 'px' : ''
      };
    },
    lrDividerStyles: function() {
      return {left: this.lrDividerPos + 'px'};
    },
    rtbDividerStyles: function() {
      return {
        left: this.lrDividerPos + 'px',
        top: this.rtbDividerPos + 'px',
        width: (window.innerWidth - this.lrDividerPos + 2) + 'px'
      };
    },
    topLeftStyle: function() {  
      return {
        height: this.ltbDividerPos + 'px',
        width: this.lrDividerPos + 'px'
      };
    },
    topRightStyle: function() {
      return {
        height: this.rtbDividerPos + 'px',
        left: this.lrDividerPos + 'px',
        width: (window.innerWidth - this.lrDividerPos + 2) + 'px'
      };
    }
  },
</code></pre>

<p>Another option might be to use negative values for the initial divider position values in the <code>data</code> property, and only if those values are non-negative use them in the computed properties.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var app = new Vue({
  el: '#app',
  data: {
    lrDividerPos: -1,
    rtbDividerPos: -1,
    ltbDividerPos: -1,
  },
  computed: {
    bottomLeftStyle: function() {
      return {
        height: this.ltbDividerPos &gt; -1 ? (window.innerHeight - this.ltbDividerPos) + 'px' : '',
        top: this.ltbDividerPos &gt; -1 ? this.ltbDividerPos + 'px' : '',
        width: this.lrDividerPos &gt; -1 ? this.lrDividerPos + 'px' : ''
      };
    },
    bottomRightStyle: function() {
      return {
        height: this.rtbDividerPos &gt; -1 ? (window.innerHeight - this.rtbDividerPos) + 'px' : '',
        left: this.lrDividerPos &gt; -1 ? this.lrDividerPos + 'px' : '',
        top: this.rtbDividerPos &gt; -1 ? this.rtbDividerPos + 'px' : '',
        width: this.lrDividerPos &gt; -1 ? (window.innerWidth - this.lrDividerPos + 2) + 'px' : ''
      };
    },
    leftDividerStyles: function() {
      return {
        width: this.lrDividerPos &gt; -1 ? (this.lrDividerPos + 2) + 'px' : ''
      };
    },
    ltbDividerStyles: function() {
      return {
        top: this.ltbDividerPos &gt; -1 ? this.ltbDividerPos + 'px' : '',
        width: this.lrDividerPos &gt; -1 ? this.lrDividerPos + 2 + 'px' : ''
      };
    },
    lrDividerStyles: function() {
      return {
        left: this.lrDividerPos &gt; -1 ? this.lrDividerPos + 'px' : ''
      };
    },
    rtbDividerStyles: function() {
      return {
        left: this.lrDividerPos &gt; -1 ? this.lrDividerPos + 'px' : '',
        top: this.rtbDividerPos &gt; -1 ? this.rtbDividerPos + 'px' : '',
        width: this.lrDividerPos &gt; -1 ? (window.innerWidth - this.lrDividerPos + 2) + 'px' : ''
      };
    },
    topLeftStyle: function() {
      return {
        height: this.ltbDividerPos &gt; -1 ? this.ltbDividerPos + 'px' : '',
        width: this.lrDividerPos &gt; -1 ? this.lrDividerPos + 'px' : ''
      };
    },
    topRightStyle: function() {
      return {
        height: this.rtbDividerPos &gt; -1 ? this.rtbDividerPos + 'px' : '',
        left: this.lrDividerPos &gt; -1 ? this.lrDividerPos + 'px' : '',
        width: this.lrDividerPos &gt; -1 ? (window.innerWidth - this.lrDividerPos + 2) + 'px' : ''
      };
    }
  },
  methods: {
    lrDividerDrag: function(e) {
      if (e.clientX) {
        this.lrDividerPos = e.clientX;
      }
    },
    ltbDividerDrag: function(e) {
      if (e.clientY) {
        this.ltbDividerPos = e.clientY;
      }
    },
    rtbDividerDrag: function(e) {
      if (e.clientY) {
        this.rtbDividerPos = e.clientY;
      }
    },
    dividerDragStart: function(e) {
      e.dataTransfer.setDragImage(new Image, 0, 0);
    }
  }
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.text-area {
  margin: 10px;
}

.top-left {
  position: absolute;
  background-color: pink;
  overflow: scroll;
  top: 0;
  left: 0;
  height: 50%;
  width: 50%;
}

.top-right {
  position: absolute;
  background-color: lightgreen;
  overflow: scroll;
  top: 0;
  left: 50%;
  height: 50%;
  width: 50%;
}

.bottom-left {
  position: absolute;
  background-color: lightblue;
  overflow: scroll;
  top: 50%;
  left: 0;
  height: 50%;
  width: 50%;
}

.bottom-right {
  position: absolute;
  background-color: lightyellow;
  overflow: scroll;
  top: 50%;
  left: 50%;
  height: 50%;
  width: 50%;
}

.divider {
  position: absolute;
  background-color: black;
}

.left-right {
  width: 4px;
  height: 100%;
  top: 0;
  left: calc(50% - 4px / 2);
}

.right-top-bottom {
  width: 50%;
  height: 4px;
  top: calc(50% - 4px / 2);
  left: 50%;
}

.left-top-bottom {
  width: 50%;
  height: 4px;
  top: calc(50% - 4px / 2);
  left: 0;
}

.left-right:hover {
  cursor: col-resize;
}

.left-top-bottom:hover,
.right-top-bottom:hover {
  cursor: row-resize;
}

::-webkit-scrollbar {
  height: 0;
  width: 0;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;

&lt;div id="app"&gt;
  &lt;div&gt;
    &lt;div class="top-left" :style="topLeftStyle"&gt;
      &lt;div class="text-area"&gt;
        &lt;h3&gt;Resize me using the black bars&lt;/h3&gt;

        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor
        in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="top-right" :style="topRightStyle"&gt;
      &lt;div class="text-area"&gt;
        &lt;h3&gt;Resize me using the black bars&lt;/h3&gt;

        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor
        in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="bottom-left" :style="bottomLeftStyle"&gt;
      &lt;div class="text-area"&gt;
        &lt;h3&gt;Resize me using the black bars&lt;/h3&gt;

        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor
        in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="bottom-right" :style="bottomRightStyle"&gt;
      &lt;div class="text-area"&gt;
        &lt;h3&gt;Resize me using the black bars&lt;/h3&gt;

        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor
        in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="left-right divider" draggable="true" @dragstart="dividerDragStart" @drag="lrDividerDrag" :style="lrDividerStyles"&gt;&lt;/div&gt;
    &lt;div class="right-top-bottom divider" draggable="true" @drag="rtbDividerDrag" @dragstart="dividerDragStart" :style="rtbDividerStyles"&gt;&lt;/div&gt;
    &lt;div class="left-top-bottom divider" draggable="true" @drag="ltbDividerDrag" @dragstart="dividerDragStart" :style="ltbDividerStyles"&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>