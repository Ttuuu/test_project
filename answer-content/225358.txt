<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer"><code>else</code> feature of loops</a>, which gets executed iff no <code>break</code> statement was executed. This gets rid of your flag variable:</p>

<pre><code>while num &lt;= limit:
    sqr_lim = math.sqrt(num)
    for x in prime_list:
        # Loop through list of prime numbers and check divisibility
        if x &gt; sqr_lim:
            break
        if num % x == 0:
            break
    else:
        # Add primes to list to only check prime numbers
        prime_list.append(num)
</code></pre>

<p>However, this would mean that the condition that breaks the loop because you have reached the square limit would avoid this from being triggered.</p>

<p>To avoid this, you could have a look at the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> module, which provides the <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>takewhile</code> function</a>:</p>

<pre><code>for p in takewhile(lambda p: p &lt;= sqr_lim, prime_list):
    if num % p == 0:
        break
else:
    prime_list.append(num)
</code></pre>

<p>Your variable increment also boils down to the observation that all prime numbers larger than 3 are of the form <code>6k + 1</code> or <code>6k + 5</code> with <code>k = 0, 1, ...</code>. This is for the same reason you used the variable increment, all numbers of the form <code>6k + 0, 2, 4</code> are divisible by two and all numbers of the form <code>6k + 3</code> by three.</p>

<p>You could use this with the <a href="https://docs.python.org/3/library/itertools.html#recipes" rel="nofollow noreferrer"><code>itertools</code> recipe <code>roundrobin</code></a> to generate all candidate numbers.</p>

<blockquote>
<pre><code>from itertools import cycle, islice

def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    num_active = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while num_active:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            # Remove the iterator we just exhausted from the cycle.
            num_active -= 1
            nexts = cycle(islice(nexts, num_active))
</code></pre>
</blockquote>

<pre><code>candidates = roundrobin(range(7, limit, 6),  # 6k + 1, k = 1, 2, ...
                        range(5, limit, 6))  # 6k + 5, k = 0, 1, ...
for num in candidates:
    ... 
</code></pre>

<p>However, if you want to get all primes up to some large(ish) number, sieves are really hard to beat. The easiest one to implement is the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes</a>, which can for example be done like this:</p>

<pre><code>def prime_sieve(limit):
    prime = [True] * limit
    prime[0] = prime[1] = False

    for i, is_prime in enumerate(prime):
        if is_prime:
            yield i
            for n in range(i * i, limit, i):
                prime[n] = False
</code></pre>

<p>If you need even more speed, you could take a look at the <a href="https://en.wikipedia.org/wiki/Sieve_of_Atkin" rel="nofollow noreferrer">Sieve of Atkin</a>. However, using the above implementation of the Sieve of Eratosthenes, I can generate all primes up to 100.000.000 in less than 30 seconds, which is usually fast enough.</p>
    </div>