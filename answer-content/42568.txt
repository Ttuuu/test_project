<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things you can do here to improve this code, but with any sort of refactoring or any attempt of reducing complexity, we have to evaluate why. It may very well be the case that this method isn't at fault for its own complexity, but is this complex due to a failure elsewhere in the system of keeping their data correct.</p>

<p>That aside, there are still a few things you could do to clean up this code a little</p>

<p><strong>Explicitly define all the required parameters and use that to iterate over.</strong></p>

<pre><code>REQUIRED_PROPERTIES = %i(prop_1 prop_2 prop_3 prop_4)
REQUIRED_PROPERTIES.any? { |x| @opts[x].nil? } #=&gt; true if any are nil or false if all are not nil
</code></pre>

<p><strong>Use <code>hash#fetch</code> instead of <code>[]</code> so you can supply a default value for possible missing keys</strong></p>

<pre><code>return false if @opts[:property_1].nil?
return @opts.fetch(:property_1, false) #only return false if :property_1 is not defined
#fetch only returns false if :property_1 doesn't exist, not if it has been set to nil
</code></pre>

<p><strong>Remember that in ruby <code>nil</code> and <code>false</code> are both false-y</strong></p>

<pre><code>def valid?
  @opts &amp;&amp; @opts[:property_1] &amp;&amp; @opts[:property_2]
  #will return true only if @opts and properties are non nil values
end
</code></pre>
    </div>