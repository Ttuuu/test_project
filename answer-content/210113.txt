<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><a href="https://stackoverflow.com/a/228797/673679">Identifiers with leading underscore(s) followed by a capital letter are reserved for the implementation</a> and should not be used in your own code. It's easiest to just avoid leading underscores.</p></li>
<li><p>When using <code>enable_shared_from_this</code> it's important to use a static factory function <strong>and</strong> make the other constructors private. This prevents calling the <code>Example</code> constructor directly (where calling <code>shared_from_this</code> will be undefined behaviour, since we don't have a <code>shared_ptr</code>).</p></li>
</ul>

<hr>

<p>Do we really need <code>enable_shared_from_this</code>? The whole thing could be more easily written as:</p>

<pre><code>    class Example
    {
    private:

        Example() { }

    public:

        static std::shared_ptr&lt;Example&gt; Create()
        {
            auto example = std::make_shared&lt;Example&gt;();
            example-&gt;do_the_thing();

            return example;
        }
    };
</code></pre>

<p>It really depends on what <code>do_the_thing()</code> is...</p>

<p>If we have to register the class somewhere after creation (or consistently perform some action), perhaps that logic doesn't belong in the <code>Example</code> class at all.</p>

<pre><code>struct Example {};

struct Registry
{
    template&lt;class T, class... Args&gt;
    std::shared_ptr&lt;T&gt; CreateAndRegister(Args&amp;&amp;... args)
    {
        auto object = std::make_shared&lt;T&gt;(std::forward&lt;Args&gt;(args)...);
        Register(object);
        return object;
    }
};

auto registry = Registry();
auto e = registry.CreateAndRegister&lt;Example&gt;();
</code></pre>

<p>While an object has control over it's own copy / move semantics, it generally shouldn't care who / what owns it.</p>

<p>So the question is: why does <code>Example</code> need to "break the 4th wall" and know that it exists inside a <code>shared_ptr</code>?</p>

<hr>

<p>Large inheritance hierarchies are out of fashion nowadays (with good reason), but with a general solution, you may need to cope with:</p>

<pre><code>struct ExampleA : enable_defer, enable_shared_from_this&lt;ExampleA&gt; {};
struct ExampleB : ExampleA {}; // what if B wants to defer something?
</code></pre>

<p>and</p>

<pre><code>struct ExampleA : enable_defer, enable_shared_from_this&lt;ExampleA&gt; {};
struct ExampleB : enable_defer, enable_shared_from_this&lt;ExampleB&gt; {};
struct ExampleC : ExampleA, ExampleB {}; // uh oh... ?
</code></pre>

<p><code>shared_from_this</code> <a href="https://stackoverflow.com/questions/16082785/use-of-enable-shared-from-this-with-multiple-inheritance">is quite complicated to use</a> as it is with a class hierarchy.</p>
    </div>