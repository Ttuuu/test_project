<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The original code includes <code>.Split('-')</code> which makes an array and at least three new strings; the other answers include invoking the regex engine, or making new substrings. I wanted to write a version which does little more work than walking the string once, checking the indices. I don't suggest you should use it, but maybe if you like premature optimization</p>

<pre><code>String SNString = "XXX-XXXXXXXX-XXX";

// Validate the string pattern without copying it.

return ((SNString.Length == 16)
     &amp;&amp; (SNString.IndexOf('-'   0) ==  3)  // part1 must be length 3 for this to hold.
     &amp;&amp; (SNString.IndexOf('-',  4) == 12)  // part2 must be length 12-4 == 8 for this.
     &amp;&amp; (SNString.IndexOf('-', 13) == -1));// part3 ends length 16 string. 16-13 == 3.
</code></pre>

<hr>

<p>I do like the readability of the original version more than the <code>&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</code> infested waters of the other options; you can keep a lot of that simplicity and shorten it down a lot, with something like this:</p>

<pre><code>string[] parts = SNString.Split('-');

if (parts[0].Length != 3) {
    return false;
}

if (parts[1].Length != 8) {
    return false;
}

if (parts[2].Length != 3) {
    return false;
}

return true;
</code></pre>

<p>NB. this has the same risk of the original and some other answers that there might be more than three parts after splitting.</p>
    </div>