<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>12 seconds</h1>
<p>is forever for a CPU. However your solutions is so complex, 12 seconds is likely it timing out on a string that is only a few K long.</p>
<p>These code sites also like to throw curve balls, passing arguments that have very quick solutions if you check for them, but if you don't will take so long it will time you out.</p>
<p>Also know that these sites run distributed virtual machines on which they test code, some (all that I tested) time how long it takes to get a result not how long your code takes to run. If its busy that time will include how long it takes to locate CPU/Memory resource (VM), setup context (Javascript runtime), and then execute your code. So times vary and should never be used as an indication of performance.</p>
<h2>Performant and Complexity</h2>
<p>The first step to fast solutions is always write performant code,</p>
<h2>Basic performant optimisations</h2>
<ol>
<li><p>Locate opportunities to exit early. In this case, is the first string is shorter than the second then you know the result must be false.</p>
</li>
<li><p>Locate lines of code that are repeated in iteration that can be done once. In this case you set <code>result</code> to <code>true</code> each time you find a match. You need only do it once by assigning <code>true</code> to <code>result</code> when you declare it.</p>
</li>
<li><p>Avoid redundancy. Redundant lines of code take time to execute. In this case <code>result</code> is not needed as you can return the result directly from within the statement <code>found===null</code>, removing the need for <code>break</code>, and defining <code>result</code>.</p>
</li>
<li><p>Develop a good Understanding of available language features and stay up to date. MDN has a good <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow noreferrer">Javascript reference</a>. Knowing this reference in your head will makes your code faster, to know it in your head means you must continuously be studying the reference as JavaScript is always changing.</p>
<p><code>String.match</code> is not the only way to test for a character. Also it can return an array which is less performant than a bool such as <code>RegExp.test</code>, and <code>String.includes</code> or a Number such as <code>String.indexOf</code>.</p>
<p>Once a year read the Javascript Spec (current <a href="https://tc39.github.io/ecma262/" rel="nofollow noreferrer">ECMAScript2019</a>) Its long and dry, not an easy read for beginners (or 40+ year vets) , so read it again, and again. This will not only reenforce your internal mind javascript reference but give you an understanding of how javascript does what it does. (Help you understand JS complexity. See below)</p>
<p>Test your understanding. Is <code>str1 === str2</code> faster than <code>str1.length === str2.length</code> ? If you dont know write some code to find out.</p>
</li>
</ol>
<h2>A more performant solution</h2>
<p>From that you can get a good improvement in overall performance. An example follows</p>
<pre><code>function scramble(str1,str2) {
    var i;
    if (str1.length &gt;= str2.length) {
        if (str1 === str2) { return true }
        for (i = 0; i &lt; str2.length; i++) {
            const str = str1.replace(str2[i]);
            if (str.length === str1.length) { return false }
            str1 = str;
        }
        return true;
    }
    return false;
}
</code></pre>
<p>That may pass the time limit but as the size of the strings grows the improvement in performance reduces.</p>
<p>For 2 char strings this a twice as fast. When <code>str1</code> is shorter than <code>str2</code> this is a above umteenQuadBillion times faster. If <code>str1</code> is longer or equal len to <code>str2</code> then for a 4K string it will likely timeout, taking only a few ms shorter to solve.</p>
<hr>
<h2>Complexity</h2>
<p>In computer science there is a difference between performance and complexity. The above code has better performance and hence will always be a little quicker, however it has the same complexity and thus not going to help you.</p>
<h3>The metric <code>n</code></h3>
<p>We measure an algorithm's complexity in terms of some metric. In this case the metric can be the mean size of both strings. We call it <code>n</code> and use that to create a formula that counts the number operations per <code>n</code> needed to complete the task.</p>
<p>For example count A's in a string</p>
<pre><code>// Note len is string len
count = 0                   
for(i = 0; i &lt; len; i++){ 
    if(str[i] === "A") { 
        count ++ 
    } 
    
}
</code></pre>
<ul>
<li><p>2 operations to set count and start the loop.</p>
</li>
<li><p>1 op for the loop.</p>
</li>
<li><p>1 op for the test.</p>
</li>
<li><p>if there is an "A" 1 op to count.</p>
<p>We can say that the complexity has a worst (all A's) case of <code>2 + 3 * n</code> complexity and a best case (No A's) of <code>2 + 2 * n</code></p>
</li>
</ul>
<p>The difference between best a worst case can be huge, generally we define what the complexity is for (worst, mean, or best case). Without that we assume the complexity is the worst case</p>
<h3>Big O notation.</h3>
<p>Formalized we call the expression of complexity big O notation and you will see it as a math function, sometimes <strong>O(2 + 3 * n)</strong> but most often just the n or a number <strong>O(n)</strong>, <strong>O(n<sup>2</sup>)</strong> or <strong>O(1)</strong>.</p>
<h3>Complexity grows quickly</h3>
<p>Lets up the complexity and count the number of chars in <code>str1</code> that exist in <code>str2</code></p>
<pre><code>count = 0                   
for(i = 0; i &lt; len1; i++){ 
    for(j = 0; j &lt; len2; j++){ 
        if(str1[i] === str2[j]) { 
            count ++ 
        } 
    }
}
</code></pre>
<p>Now <code>n</code> is the mean string len and there are</p>
<ul>
<li>2 ops to get into the first loop,</li>
<li>for each n there is
<ul>
<li>1 op to loop and another to enter the inner loop. thus 2 * n.</li>
<li>then for each inner loop
<ul>
<li>1 to loop, and 2 to count.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The complexity is <code>O(2 + 2 * n + 3 * n * n)</code></p>
<p>Note that the  there is a <code>n * n</code> or we can express it as <code>n^2</code> or <strong>n<sup>2</sup></strong> thus <strong>O(2 + 2n + 3n<sup>2</sup>)</strong></p>
<h3>The highest power</h3>
<p>The function inside the () is called a polynomial.</p>
<p>There is a property of polynomials that allow for simplification.</p>
<p>As the value of n grows the size of the term that has the highest power <strong>n<sup>2</sup></strong> gets so large that the other terms <strong>(2 + 2n + 3 * )</strong> become insignificant.</p>
<p>With this in mind Big O ignore all but the highest power. So for the above the complexity is not <strong>O(2 + 2n + 3n<sup>2</sup>)</strong> but  <strong>O(n<sup>2</sup>)</strong></p>
<h3>Javascript complexity.</h3>
<p>As part of understanding javascript you need to know the complexity of the many javascript functions and operators.</p>
<p>Some examples</p>
<pre><code>if(a === b)  // if numbers O(1)
if(a === b)  // if strings O(n) where n is string len (it may be a little lower (O(n&lt;sup&gt;logn&lt;/sup&gt;)
if(a.includes(b)) // if a is array of numbers b is a number O(n) n is size of array
if(a.includes(b)) // if a is array of string b is a string the worst case O(n**2)
</code></pre>
<p>So a single JS line can not just be counted as a single operations, each line can have vastly different complexity</p>
<p>So looking at your code the outer loop is <strong>O(n)</strong> but inside we have <code>str1.match</code> and <code>str1.replace</code> both of which are <strong>O(n)</strong>. So overall its <strong>O(n<sup>2</sup>)</strong>. The same for the more performant version I wrote. The <code>str1.replace</code> is <strong>O(n)</strong> thus the solution is <strong>O(n<sup>2</sup>)</strong></p>
<h2>Optimise complexity target the highest big O power</h2>
<p>So if we can reduce the size of the highest power in a solution, even if that means more code we can get huge improvements in complexity.</p>
<p>One solution is to go over the first string and count the number of times each letter occurs, storing the count in an array, one item for each possible character. Then go over the second array and for each subtract 1 from the counts. If any of the counts are negative we know that the first string is missing a value that is in the second.</p>
<pre><code>function scramble(str1,str2) {
    const buf = new Uint8Array(256);
    var i = 0;
    if (str1.length &gt;= str2.length) {
        if (str1 === str2) { return true }
        while(i &lt; str1.length) {
            buf[str1.charCodeAt(i++)] ++;
        }
        i = 0;
        while(i &lt; str2.length) {
            const idx = str2.charCodeAt(i++);
            if(buf[idx] === 0) { return false }
            buf[idx] --;
        }
        return true;
    }
    return false;
}
</code></pre>
<p>If we write out the full complexity its <code>256 + 3 + 2n + 1 + 4n + 1</code> or <code>261 + 6n</code> the 256 is to create and fill the array with zeros. If the strings are unicode it would be <code>65536 + 5 + 5n</code></p>
<p>But only the highest power matters so the above function is <strong>O(n)</strong></p>
<p>Now if the strings are the same size and the mean length is 4000 this solution should be around 4000 times faster.</p>
<h2>Caveats</h2>
<p>There are however some caveats for the above solution</p>
<p>The array holding the counts must be able to count all the characters.</p>
<p>To ensure the function will work use an array of 32bit unsigned ints which will handle strings upto 4Gb is size. If the function errors the strings may be unicode and thus you will need to use a larger array 65536 items long.</p>
<h2>The O(n) solution.</h2>
<pre><code>function scramble(str1, str2) {
    const buf = new Uint32Array(256);  // For unicode array size is 65536
    var i = 0;
    if (str1.length &gt;= str2.length) {
        if (str1 === str2) { return true }
        while (i &lt; str1.length) {
            buf[str1.charCodeAt(i++)] ++;
        }
        i = 0;
        while (i &lt; str2.length) {
            const idx = str2.charCodeAt(i++);
            if (buf[idx] === 0) { return false }
            buf[idx] --;
        }
        return true;
    }
    return false;
}

    
</code></pre>
    </div>