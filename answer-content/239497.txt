<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, try to make sure that code you post here compiles. Now you have missing semicolons on the lines</p>

<pre class="lang-java prettyprint-override"><code>List&lt;String&gt; distinct1 = Arrays.asList("1", "2", "3", "4", "5", "6", "7", "2")
List&lt;String&gt; distinct2 = Arrays.asList["3", "3", "2", "4", "7"] 
</code></pre>

<p>and also the last of these two lines has <code>[...]</code> instead of <code>(...)</code>.</p>

<p>It was also a bit difficult to actually figure out what your code was supposed to do, but I think I understand it now.</p>

<p>It seems you want to create a list of pairs of some sort. So instead of ending with a <code>List&lt;List&lt;Integer&gt;&gt;</code>, you can create a <code>Pair</code> class</p>

<pre class="lang-java prettyprint-override"><code>public final class Pair&lt;S, T&gt; {
  private final S left;
  private final T right;

  public Pair(S left, T right) {
    this.left = left;
    this.right = right;
  }

  public S left() {
    return left;
  }

  public T right() {
    return right;
  }

  // equals and hashCode
  ...
}
</code></pre>

<p>and have a <code>List&lt;Pair&lt;Integer, Integer&gt;&gt;</code> instead.</p>

<p>Then you can create a method which given two <code>List</code>s creates the cartesian product</p>

<pre class="lang-java prettyprint-override"><code>public List&lt;Pair&lt;S, T&gt;&gt; cartesianProduct(List&lt;S&gt; firstList, List&lt;T&gt; secondList) {
  return firstList.stream()
    .flatMap(x -&gt; secondList.stream().map(y -&gt; new Pair&lt;&gt;(x, y)))
    .collect(Collectors.toList());
}
</code></pre>

<p>During the construction of your cartesian list, you collect your intermediate results into a <code>Map</code>. This step is not needed as you can now immediately convert to a list of pairs. Also, it is usually not a good idea to have a <code>List</code> as keys of a <code>Map</code> as the <code>List</code> is mutable. <code>Map</code> expects the hash code of the keys to not change which is a possibility when using <code>Lists</code> as keys.</p>

<p>Removing the <code>Map</code> step in the process we get</p>

<pre class="lang-java prettyprint-override"><code>List&lt;Pair&lt;Integer, Integer&gt;&gt; listWithoutDuplicates = result1.entrySet().stream()
        .filter(x -&gt; result2.containsKey(x.getKey()))
        .flatMap(x -&gt; cartesianProducts(result2.get(x.getKey()), x.getValue()).stream())
        .distinct()
        .collect(Collectors.toList());
</code></pre>
    </div>