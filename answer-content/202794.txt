<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The general approach seems fine. You may want to benchmark your application based on the type of inputs you'll receive and the type of computation that's done. If the computation is CPU intensive, it may not make sense to have too many goroutines running in parallel since they can't all use the CPU at the same time. </p>

<p>If you find that's the case, it could be better to have a channel into which you send the lines that are being read and have a bunch of worker goroutines that read a line from the channel, process it, read another line and so on. Benchmarking should give you a good idea about the right approach.</p>

<p>If each goroutine makes a request to an external resource (such as a web service or a database) you'll have to think about ways to limit the rate of such requests.</p>

<p>Some general comments about the code which I think you should fix before putting it into production:</p>

<ol>
<li>The code doesn't have any error checking or a way to report errors from the processing of each input line. You'll have to add those in.</li>
<li>You're also using a global variable to share the <code>WaitGroup</code>, which I think you should avoid. Either pass it in as a function parameter or use an anonymous function that calls <code>processLine()</code> and then <code>wg.Done()</code> (instead of calling <code>wg.Done()</code> in <code>processLine()</code>)</li>
<li>As I mentioned above you may want to consider limiting the number of concurrent goroutines depending on your use case.</li>
</ol>
    </div>