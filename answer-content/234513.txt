<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Unfinished ?</h2>
<p>You have the variable <code>run</code> set to false and then use it in a ternary to set <code>i</code>. <code>run</code> is never set to true. I assume you intended to set it true after scanning a plateau.</p>
<h2>JavaScript Style</h2>
<ul>
<li><p>In JavaScript we put the opening <code>{</code> on the same line and else on the same line as the closing <code>}</code></p>
</li>
<li><p>Spaces between operators. eg <code>arr[i+1];</code> becomes <code>arr[i + 1];</code></p>
</li>
<li><p>Always declare variables. The variables <code>next</code> and <code>previous</code> are undeclared and are thus automatically declared in global scope. Global scoped variables are significantly slower, and highly likely to conflict with other globals if you are unaware. Use the directive "use strict" (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" rel="nofollow noreferrer">strict mode</a>) which will throw an error when you use undeclared variables.</p>
</li>
<li><p>Use <code>;</code> consistently. JavaScript requires them and will insert them <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" rel="nofollow noreferrer">automatically</a> if you do not add them where required. The insertion rules are complex and unless you are familiar with them it is best to always use them.</p>
</li>
<li><p>Use meaningful names. <code>obj</code> could be <code>result</code>. Better yet you can declare the arrays <code>pos</code> and <code>peaks</code> as variables and build the object on the return. eg <code>return {pos, peaks}</code> this saves you having to indirectly reference the arrays when you use them. (see rewrite)</p>
</li>
<li><p>Learn the difference between function scope <code>var</code> and block scope <code>let</code>, <code>const</code> and use appropriately.</p>
</li>
<li><p>Always declare <code>var</code>s at the top of the function. You declared <code>j</code> as a <code>var</code> in the middle of the function.</p>
</li>
<li><p>Always delimit code blocks with <code>{}</code> eg <code>while (foo) j++;</code> should be <code>while (foo) { j++; }</code> with the exception of empty blocks. eg <code>while (arr[i++] !== 0);</code> I know that C like languages let you skip the <code>{}</code> but after years of coding I can tell you it is a very hard bug to spot when you change code and forget to delimit the block.</p>
</li>
<li><p>Avoid single use variables unless doing so will make a line too long. Eg <code>next = arr[j] &lt; arr[i]; if (previous &amp;&amp; next) {</code> becomes just <code>if (previous &amp;&amp; arr[j] &lt; arr[i]) {</code></p>
</li>
<li><p>Use the simplest logic. the line <code>if (new Set(arr.slice(i, i + 2)).size === 1) {</code> creates a <code>new Array</code>, a <code>new Set</code>, populates the Set by generating a hash for each array item. That is a lot of overhead (you generate a Hash twice for each inner array item) that can replaces with <code>if (arr[i] === arr[i+1]) {</code> with only the <code>i + 1</code> being overhead</p>
</li>
<li><p>Always try to reduce indexing into arrays by assigning array items into variables. Generally do this if you use the item 2 or more times. For engines like V8 (Chrome and Node) this can provide some worthwhile performance improvements. Firefox this makes no difference however it does make the code less noisy and thus easier to read..</p>
</li>
</ul>
<h2>Rewrite</h2>
<p>I think your solution is a little over complicated, especially indexing into the array so many times. Nor is there a need to make a special case of plateaus.</p>
<p>The rewrite is a simpler solution that uses the variables climbing to track positions where the current item is greater than the previous. If the item is less than the previous then record the peak to be the climbing position. The plateau is thus automatically handled, and the number of lines and variables is greatly reduced.</p>
<p>The rewrite runs on average 15 times faster on the same data.</p>
<p>However to be fair the slow point is the use of the <code>Set</code> in the statement  <code>if(new Set(arr.slice(i, i+2)).size === 1)</code> If you change that line to <code>if (arr[i] === arr[i + 1]) {</code> and add <code>run = true</code> in the plateau statement block, your function is then only about 30% slower than the rewrite (see second rewrite)</p>
<pre><code>"use strict";   // not needed if this was a module
function pickPeaks(arr) {
    const pos = [], peaks = [];
    var i = 1, climbing, prevVal = arr[0];
    while (i &lt; arr.length) {
        const val = arr[i++];
        if (val &lt; prevVal &amp;&amp; climbing) {
            pos.push(--climbing);
            peaks.push(arr[climbing]);
            climbing = 0;
        } else if (val &gt; prevVal) { climbing = i }
        prevVal = val;
    }
    return {pos, peaks};
}
</code></pre>
<p>And rewriting you algorithm using the points in this answer we get...</p>
<pre><code>function pickPeaks(arr){
    const pos = [], peaks = [];
    var j, i = 1;
    while (i &lt; arr.length) {
        const val = arr[i], nextVal = arr[i + 1];
        let run = false, peak = false;
        if (val === nextVal) {
            j = i;
            while (arr[j] === val) { j++ }
            if (arr[i - 1] &lt; val &amp;&amp; arr[j] &lt; val) { peak = true }
            run = true;
        } else if (val &gt; arr[i - 1] &amp;&amp; val &gt; nextVal) { peak = true }
        if (peak) {
            pos.push(i);
            peaks.push(val);
        }
        i = run ? j : i + 1;
   }
   return {pos, peaks};
}
</code></pre>
    </div>