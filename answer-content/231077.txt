<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Focusing only on <code>GetRealPath</code></p>

<ul>
<li>You can save some level of indentation by returning early. The code would become easier to read.  </li>
<li>The check <code>If TempFile.Name.IndexOfAny(Path.GetInvalidFileNameChars) &gt;= 0 Then</code> is superflous because the constructor of <code>FileInfo</code> throws an <code>ArgumentException</code> if there are any invalid chars in the filename.</li>
<li><code>FileInfo</code> doesn't hold unmanaged ressources hence you don't need to set it to <code>Nothing</code>.</li>
<li>It is always better to catch specific exceptions. </li>
<li>Throwing an Exception inside a <code>If</code> block makes the <code>Else</code> redundant.  </li>
<li>Checking if a string <code>Is Nothing OrElse IsNullOrEmpty</code> can be replaced by just the call to <code>IsNullOrEmpty</code>.  </li>
<li>You don't need to set <code>FullPath = String.Empty</code> if at the next line of code you are throwing an exception.  </li>
<li>Althought VB.NET is case insensitiv you should name your variables using <code>camelCase</code> casing.</li>
</ul>

<p>Summing up the mentioned changes (except for the specific exception part) will look like so  </p>

<pre><code>Public Shared Function GetRealPath(ByVal filePath As String, ByVal pathType As PathType) As String
    Dim fullPath As String = String.Empty

    If String.IsNullOrEmpty(filePath) Then
        Throw New ArgumentNullException("No path specified")
    End If
    If filePath.IndexOfAny(IO.Path.GetInvalidPathChars) &gt;= 0 Then
        Throw New ArgumentException("The specified path '" &amp; filePath &amp; "' is invalid")
    End If

    If pathType = PathType.File Then
        Try
            Dim tempFile As New IO.FileInfo(filePath)
        Catch ex As Exception
            Throw New ArgumentException("The specified file name '" &amp; filePath &amp; "' is invalid", ex)
        End Try
    End If

    ' The path should not contain any invalid characters. Start trying to populate the FullPath variable.
    If IO.Path.IsPathRooted(filePath) Then
        fullPath = filePath
    Else
        Try
            fullPath = IO.Path.GetFullPath(filePath)
        Catch ex As Exception
            Throw New ArgumentException("The specified path '" &amp; filePath &amp; "' is invalid", ex)
        End Try
    End If

    If fullPath.StartsWith("\\") Then
        Return fullPath
    End If

    Dim pathRoot As String = IO.Path.GetPathRoot(fullPath)

    If String.IsNullOrEmpty(pathRoot) Then
        Throw New ArgumentException("The specified path '" &amp; filePath &amp; "' is invalid")
    End If

    If Not IO.Directory.GetLogicalDrives.Contains(pathRoot) Then
        Throw New ArgumentException("The specified path '" &amp; filePath &amp; "' is invalid. Drive '" &amp; pathRoot &amp; "' does not exist.")
    End If

    Dim currentDrive As New System.IO.DriveInfo(pathRoot)

    If currentDrive.DriveType = DriveType.Network Then
        Using HKCU As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.OpenSubKey("Network\" &amp; fullPath(0))
            If Not HKCU Is Nothing Then
                fullPath = HKCU.GetValue("RemotePath").ToString() &amp; fullPath.Remove(0, 2).ToString()
            End If
        End Using
    ElseIf Not currentDrive.DriveType = DriveType.NoRootDirectory AndAlso Not currentDrive.DriveType = DriveType.Unknown Then
        Dim SubstPath As String = String.Empty

        If IsSubstPath(fullPath, SubstPath) Then
            fullPath = SubstPath
        End If
    Else
        Throw New ArgumentException("The specified path '" &amp; filePath &amp; "' is invalid. Drive '" &amp; currentDrive.Name &amp; "' does not exist.")
    End If

    Return fullPath
End Function
</code></pre>
    </div>