<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For now I'll mostly pick on how  you do user input.</p>

<p>In your first two functions, and then again in your main code, you build a complicated data structure with nested lists, only to ever need the elements in the list. Just, don't use that complicated structure.</p>

<p>It might make sense to write a function that asks the user for input and evaluates it if needed:</p>

<pre><code>def get_input(message, type_=float, evaluate=False):
    """Ask the user for input that will be cast to `type_`, (default: float).

    WARNING: If `evaluate` is `True`, `eval` will be called on the input
    before being cast to the type.
    """
    x = input(message)
    if evaluate:
        x = eval(x)
    return type_(x)
</code></pre>

<p>Note that I made <code>evaluate</code> default to <code>False</code>. This way it is still always obvious that this is a potentially dangerous function and you actively need to enable it. I also added a warning regarding this in the <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a>. Normally I would use <code>type_=str</code> as a default, but since you are mostly dealing with numerical inputs, using <code>float</code> might make more sense here.</p>

<p>You can use this function like this, as a first step:</p>

<pre><code>def three_variables_looper_geometric():
    a = get_input("enter a1: ", evaluate=True)
    b = get_input("enter r: ", evaluate=True)
    c = get_input("enter n: ", evaluate=True)
    return a, b, c
</code></pre>

<p>At this point you can realize that the function <code>three_variables_looper_arithmetic</code> is almost the same as the <code>three_variables_looper_geometric</code> function, and that this function has a lot of repetition, so it might make sense to make a generic function for this:</p>

<pre><code>def get_variables(*names):
    return [get_input(f"enter {name}: ", evaluate=True) for name in names]
</code></pre>

<p>Which you can then use like this:</p>

<pre><code>def three_variables_looper_arithmetic():
    return get_variables("a1", "n", "d")

def three_variables_looper_geometric():
    return get_variables("a1", "r", "n")
</code></pre>

<p>Note that I used the relatively new <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-string</code></a> for easy building of the string. If your Python version does not support this, replace it with the slightly longer <code>"enter {}: ".format(name)</code>.</p>

<p>This now returns a <code>list</code> (since it uses a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>), instead of a <code>tuple</code>, which should not make any difference (you can still assign them via tuple unpacking, etc). It also uses tuple unpacking in the signature in order to <a href="https://www.geeksforgeeks.org/args-kwargs-python/" rel="nofollow noreferrer">take a variable number of arguments</a>.</p>

<p>You can also use this directly in the <code>input_checker</code> function, making those two functions completely obsolete:</p>

<pre><code>def input_checker(arithmetic_1_geometric_2, formula_num, L):
    if arithmetic_1_geometric_2 == 1:
        if formula_num in [1, 2]:
            return get_variables("a1", "n", "d")
        elif formula_num == 3:
            return get_variables("a1", "n", "d") + [L]
    elif arithmetic_1_geometric_2 == 2:
        if formula_num in [1, 2]:
            return get_variables("a1", "r", "n")
        elif formula_num == 3:
            return get_variables("a1", "n")
</code></pre>

<hr>

<p>The input function can also be improved further if needed, for example by continuing to ask if the entered string cannot be cast to the required type, or if some validator function fails (very useful to e.g. enforce a value to lie in a certain range or be one of some choices):</p>

<pre><code>from sys import stderr


def get_input(message, type_=float, validator=lambda x: True, evaluate=False):
    """Ask the user for input that will be cast to `type_`, (default: float).

    WARNING: If `evaluate` is `True`, `eval` will be called on the input
    before being cast to the type.
        """
    while True:
        x = input(message)
        if evaluate:
            x = eval(x)
        try:
            x = type_(x)
        except TypeError:
            print(x, "cannot be cast to type", type_, file=stderr)
            continue
        if not validator(x):
            print(x, "is not valid.", file=stderr)
            continue
        return x
</code></pre>

<p>Here are two use-cases for this, the latter of which actually appears in your code later on:</p>

<pre><code>get_input("enter x", validator=lambda x: 0 &lt;= x &lt; 100)

choices = {"a", "b", "c"}
get_input("enter choice", type_=str, validator=choices.__contains__)
# Or, equivalently
get_input("enter choice", type_=str, validator=lambda x: x in choices)
</code></pre>
    </div>