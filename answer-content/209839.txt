<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As was brought up in the comments, I find static classes with state to almost never be what you want.  If the code that uses your class wants to create a single instance and store it in a static variable, they can do that.  This particular class does itself reference an existing static cache, but I see that as a reason to refactor that aspect (to e.g. accept it as a constructor parameter) rather than a reason to make this class static.</p>

<p>Maybe it's just me, but <code>LocalCacheController</code> doesn't really mean anything to me.  <em>Local cache</em> seems redundent in this context, and I'm not sure what it's controlling.  As for the API, the public functions are <code>AddRange</code>, <code>Add</code>, <code>GetFromCache</code>, and <code>GetUncachedRecordIDs</code>.  The last one seems not like the others, and the implementation shows that it could be implemented elsewhere - that is, there doesn't seem to be much of a technical reason for it to be part of this class, either.</p>

<p>The class seems to be doing two things:</p>

<ol>
<li><p>Wrapping an existing cache by providing a more useful API and consistently managing the cache policy and </p></li>
<li><p>providing key translation and an additional <em>uncached</em> query.  I wonder if it wouldn't be better as two smaller classes.  As for the API, having <code>GetFromCache</code> be generic doesn't seem to make life easier for you.  Since the generic type is just used as the return, you have to specify it in every call, in which case you might as well return <code>object</code> and have the caller perform the cast.  Contrast this with the generic collections, where the generic is part of the instance rather than method and so the type doesn't have to be applied to the Get functions.  You could do the same thing here, moving the generic parameter to the type, but it really only works if you also make the class non-static.</p></li>
</ol>

<p>For the <code>Add</code> function, it's not clear from the names or the comments what <code>getCachableObject</code> is supposed to be.  The name makes it sound like a function, but the convention in that case is to type it as a <code>Func</code>.  If there's a reason not to accept a factory function I don't see what it is - it's strictly more flexible than using <code>Activator</code>, and it allows better typechecking.  Maybe there's more going on here that explains the decision - I don't know enough about <code>CompiledQueries.GetPMByID</code> to say.  I do see that your previous version used <code>Func</code>, so I wonder why you changed it.  On that topic, <code>GetPrivateMessage</code> does look like it contains a pattern that you'll repeat for each type in your cache, so it might be nice to make that pattern generic and move it to a place that makes it reusable.</p>
    </div>