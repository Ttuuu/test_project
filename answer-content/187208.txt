<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree that the old C ways of specifying string formatting was so much better than the current C++ way.</p>

<p><strong>But</strong> I also really like (and can't do without) the type safety that was introduced by the C++ streams. So any new feature we add must maintain this. And I think this is where your code falls down for me.</p>

<p>Why are you using the old C variable argument parsing.</p>

<pre><code>std::string format(const char *fmt, ...)
{
    char buf[256];

    va_list args;
    va_start(args, fmt);
</code></pre>

<p>Why not use the C++ variable argument template parameters.</p>

<pre><code>template&lt;typename... Args&gt;
std::string format(const char *fmt, Args const&amp;...)
{
    char buf[256];
</code></pre>

<p>Another thing I like about the C++ way is that it basically does all the work at compile time rather than run time. Run time parsing of the format string seems a bad idea when we could do it at compile time. Not sure how to solve that, but my thought.</p>

<p>Also I don't like that you build a string and return that as the result. This means we are doing extra work. Why not use the string to simply apply the correct output formatters to the stream.</p>

<pre><code>class Format
{
    public:
        template&lt;typename... Args&gt;
        Format(char const&amp; fmt, Args const&amp;... args)
            : /* Magic */
        {}

        friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, Format const&amp; formatData) {
            // More Magic
            return s;
        }
};

int main()
{
    std::cout &lt;&lt; Format("My stuff %5.3f\n", 12.233) &lt;&lt; " Still more\n";
} 
</code></pre>

<p>This would result in the equivalent of:</p>

<pre><code>    std::cout &lt;&lt; std::string_view("My stuff %5.3f\n" + 0,  9)  // the string upto %
              &lt;&lt; std::setw(5) &lt;&lt; std::setprecision(3) &lt;&lt; 12.233
              &lt;&lt; std::string_view("My stuff %5.3f\n" + 14, 1)  // the string after the formatter
              &lt;&lt; " Still more\n";
</code></pre>

<p>Now I know writing all this code to do this is actually very daunting (and a large project beyond what you wanted to do). Especially since you can move all the difficult work out to <code>std::vsnprintf()</code>.</p>

<p>But I bet there is also a extensive set of unit tests that exist in current C compiler implementations that we could steal. Then we could set it up as a community project and get people to implement parts and slowly get all the unit tests to work.</p>
    </div>