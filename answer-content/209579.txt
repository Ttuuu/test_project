<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some basic comments.</p>

<ol>
<li><p>I'd pull the Float struct out into its own file - it makes the src/ast/mod.rs longer than it needs to be.</p></li>
<li><p>I think you can derive Clone and PartialEq on Float, rather than implementing them manually. </p></li>
<li><p>Consider deriving Copy on Float, since it's trivially copyable - that will allow you to remove some explicit calls to clone.</p></li>
<li><p>Error handling seems "lax". In particular parsing and evaluation just default rather than error. Maybe that's OK here, but I try to avoid it. You probably want your own Result type. Once you use it in many places the code doesn't get any uglier, as most places rather than return the default you can just use the <code>?</code> operator. </p></li>
</ol>



<pre><code>pub fn compile_program(tokens: &amp;[&amp;str]) -&gt; Vec&lt;Token&gt; {
    let mut ast = Vec::new();
    for tok in tokens {
        let res = match Token::from_str(tok) {
            Ok(good_tok) =&gt; good_tok,
            _            =&gt; Token::Number(Float(0.0))
        };
        ast.push(res);
    }
    ast
}
</code></pre>

<p>would become</p>

<pre><code>pub fn compile_program(tokens: &amp;[&amp;str]) -&gt; Result&lt;Vec&lt;Token&gt;&gt; {
    let mut ast = Vec::new();
    for tok in tokens {
        ast.push(Token::from_str(tok)?);
    }
    ast
}
</code></pre>

<p>Which can be made even neater using <code>map</code> and <code>collect</code> - I think you can do:</p>

<pre><code>pub fn compile_program(tokens: &amp;[&amp;str]) -&gt; Result&lt;Vec&lt;Token&gt;&gt; {
    tokens.map(Token::from_str).collect()
}
</code></pre>

<ol start="5">
<li>The AST parsing code could probably do with some unit tests. </li>
</ol>
    </div>