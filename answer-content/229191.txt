<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This</p>

<pre><code>let filePath = Bundle.main.path(forResource: "test", ofType: "dat")
guard filePath != nil else { return }
let fileURL = URL(fileURLWithPath: filePath!)
</code></pre>

<p>is an anti-pattern in Swift, see also <a href="https://stackoverflow.com/q/29717210/1187415">When should I compare an optional value to nil?</a> on Stack Overflow. Instead of testing a value against <code>nil</code> and then force-unwrapping it, you should use optional binding:</p>

<pre><code>guard let filePath = Bundle.main.path(forResource: "test", ofType: "dat") else { return }
let fileURL = URL(fileURLWithPath: filePath)
</code></pre>

<p>This can be further simplified by retrieving an URL in the first place, instead of getting a file path and converting that to an URL:</p>

<pre><code>guard let fileURL = Bundle.main.url(forResource: "test", withExtension: "dat")
    else { return }
</code></pre>

<p>But actually this is a situation where I would prefer force-unwrapping: A missing resource file in the application bundle is a <em>programming error</em> and there is no way of recovering from that situation in a sensible way. It should be detected early during development:</p>

<pre><code>let fileURL = Bundle.main.url(forResource: "test", withExtension: "dat")!
</code></pre>

<p>The same reasoning applies to reading and decoding the file:</p>

<pre><code>let file = try! String(contentsOf: fileURL, encoding: .utf8)
</code></pre>

<p>Using <code>split()</code> here</p>

<pre><code>let arrayOfLines = file.split { $0.isNewline }
</code></pre>

<p>is good: It creates an array, but the array elements are <em>substrings,</em> i.e. they contain references into the character storage of the original <code>file</code> string. The same method can be applied to split each line to avoid data duplication:</p>

<pre><code>for line in arrayOfLines {
    let arrayOfItems = line.split(separator: ",")
    // ...
}
</code></pre>

<p>This</p>

<pre><code>let tempPerson = Person(id: Int(arrayOfItems[0])!,
                        first: arrayOfItems[1].replacingOccurrences(of: "\"", with: ""),
                        last: arrayOfItems[2].replacingOccurrences(of: "\"", with: "")
</code></pre>

<p>would crash if a line has less than 3 comma-separated items, or if the first item is not an integer. However, as mentioned above, this is acceptable if the data is read from your own resource file (and not from some external resource): We can rely on the data to be well-formed.</p>

<p>It is a bit difficult to read though, and I would split the single statement into parts:</p>

<pre><code>let id = Int(arrayOfItems[0])!
let firstName = arrayOfItems[1].replacingOccurrences(of: "\"", with: "")
let lastName = arrayOfItems[2].replacingOccurrences(of: "\"", with: "")
let tempPerson = Person(id: id, first: firstName, last: lastName)
</code></pre>

<p>With respect to removing the delimiters: What you do is fine if the data file has <em>exactly</em> the format from your example, and there are no embedded quotation marks or commas in the fields. An alternative is</p>

<pre><code>let firstName = String(arrayOfItems[1].dropFirst().dropLast())
let lastName = String(arrayOfItems[2].dropFirst().dropLast())
</code></pre>

<p>which might be slightly more efficient because it does not need bridging to <code>NSString</code>. (But I did not measure it.)</p>

<p>Finally note that your code does not parse all valid CSV files. Problems are for example</p>

<ul>
<li>embedded commas: <code>4,"Sammy","Davis, Jr."</code></li>
<li>embedded quotation  marks: <code>5,"John","Foo""Bar"</code></li>
<li>or embedded newlines.</li>
</ul>

<p>Before you try to implement all those features yourself I would suggest to have a look at some existing Swift CSV parsing libraries.</p>
    </div>