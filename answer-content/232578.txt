<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all. I suppose this is about authorization, not authentication.
User is authenticated if you were able to verify their identity. What you do there is to check if they have access to particular resources, or if they have right to perform certain action. This is called authorization.</p>

<p>For your code:</p>

<p>This is very bad, because brackets are missing. I wouldn't be sure whether that <code>else</code> belongs to the outer or the inner <code>if</code>.</p>

<pre><code>if((url === "/RoleEditor" || url === "/SaveRoles"))
    if(lv &gt; conf.roleEditor)
        return true;
    else
        return false;
</code></pre>

<p>Other than that, there is not much you can do about this except two things:</p>

<p>1) merge everything together, but that would decrease readability wastly:</p>

<pre><code>return ((url === "/RoleEditor" || url === "/SaveRoles") &amp;&amp; lv &gt; conf.roleEditor)
    || (url === "/WriteQueueData" &amp;&amp; lv &gt; conf.queuedata)
    || ...
</code></pre>

<p>2) increase level of abstraction by creating an authorizator object capable of configuring the authorization rules</p>

<pre><code>const Authorizator = function (config) {
  this.config = config;
  this.rules = {};
}
Authorizator.prototype = {
  addRule : function (urls, check) {
    if (!urls instanceof Array) {
      urls = [urls];
    }
    for (let i=0; i&lt;urls.length; ++i) {
      this.rules[url] = check;
    }
  },

  isAuthorized: function (url, lv) {
    return this.rules[url] &amp;&amp; this.rules[url](this.config, lv);
  }
};
let auth = new Authorizator(config);
auth.addRule(["/RoleEditor", "/SaveRoles"], (lv, conf) =&gt; lv &gt; conf.roleEditor);
auth.addRule("/WriteQueueData", (lv, conf) =&gt; conf.queuedata);
// ...

const authorized = auth.isAuthorized(url, lv);
</code></pre>
    </div>