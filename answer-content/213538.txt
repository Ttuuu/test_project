<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just to preface this answer: It will be about the crypto-related issues I spotted, not so much about things like code style, idioms, patterns and thelike, because <a href="https://crypto.stackexchange.com/users/23623/sejpm">I know more about that than proper C# style</a>. The points are sorted descending by severity. Oh and I'm already sorry for ignoring your concrete questions...</p>

<hr>

<h2>Rolling your own crypto</h2>

<p>As you may have figured out from this answer barely talking about code quality and being really long, coming up with good cryptographic schemes is <em>hard</em>. Really <em>hard</em>. So as your scenario seems to be "establish a secure connection with some other party sharing a high-entropy token with me", I'd suggest you have a look at using <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" rel="nofollow noreferrer">TLS</a> with one of the <a href="https://en.wikipedia.org/wiki/TLS-PSK" rel="nofollow noreferrer">PSK cipher-suites</a> which takes care of all of the problems mentioned here (and some more).</p>

<p>For example <a href="https://www.bouncycastle.org/csharp/" rel="nofollow noreferrer">BouncyCastle</a> implements these cipher suites.</p>

<h2>Initialization Vector</h2>

<p>Currently the code doesn't set the IV property of the <code>aesManaged</code> class and I couldn't find any documentation saying that a sensible default will be chosen. Thereby I have to assume this will just be a hard-coded value, e.g. all zeroes. This is <em>really</em> bad. This leaks whether two messages share the same prefix for CBC mode!</p>

<p>So if you send <code>AABBCCEF</code> and <code>AABBCDEF</code> an attacker will be able to learn that the messages are equal up to and including <code>AABBC</code> (with 16-byte granularity).</p>

<p>A better approach is to generate this value independently at random for each message. Do not deterministically derive it from the key and / or the message because this will leak whether two messages are equal!</p>

<h2>CBC-Mode</h2>

<p>Currently this code uses the <em>infamous</em> CBC-mode which time and again has lead to attacks in when it was used in TLS. The problem here is that an attacker may modify the message in a malicious way, e.g. to exploit a parser bug or trigger some other reaction without the receiver having a high chance of noticing it before it's too late. The better solution is to use <a href="https://blogs.msdn.microsoft.com/shawnfa/2009/03/17/authenticated-symmetric-encryption-in-net/" rel="nofollow noreferrer"><em>authenticated encryption</em> (like AES-GCM)</a> which will make sure the message is unmodified before handing out the plaintext.</p>

<h2>The <code>password</code></h2>

<p>Currently the <code>password</code> is a magic string, probably intended to be used by both sides. For starters I <em>really</em> hope you didn't intend to use the password posted here in your actual production now that it is forever on the internet.</p>

<p>Next it's usually best-practice to not store credentials (like a password) in a (plain) file or hard-code it into the source, but to put it into an environment variable. This way it can be quickly swapped out and it won't accidently end up in your or a public git repository.</p>

<p>Next it appears that the "password" really is just a shared random string already. So why bother with readable characters? Just generate a cryptographically secure 256-bit random value and put its base64 encoded version into an environment variable! This way you can be sure it won't be brute-forced and due to that you can also forego the salt in the key derivation phase and either use it directly or if you also want to use it for other cryptographic applications, use something like HKDF.</p>

<h2>Password-based Key Derivation</h2>

<p>The code uses <code>SHA256(salt||password)</code> as the key. That is a simple salted hash. Assuming the password isn't good this won't protect you from brute-force which will just throw a bunch of GPUs at the problem and arrive at the password at <a href="https://medium.com/@iraklis/running-hashcat-v4-0-0-in-amazons-aws-new-p3-16xlarge-instance-e8fab4541e9b" rel="nofollow noreferrer">a rate of about</a> 8.64TH/USD, that is 8,640,000,000,000 passwords for a single US-Dollar on <a href="https://aws.amazon.com/en/ec2/pricing/on-demand/" rel="nofollow noreferrer">a public cloud service</a>. If the password isn't strong this won't protect you. If it is actually really strong you can forego the salting. If it is in the middle, you should use to a better password-based key derivation, e.g. using <a href="https://github.com/P-H-C/phc-winner-argon2" rel="nofollow noreferrer">Argon2</a>.</p>
    </div>