<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your answer is a faithful implementation of the problem description.  Unfortunately, that makes it <span class="math-container">\$O(N^3)\$</span></p>

<p>200_success has described an <span class="math-container">\$O(N^2)\$</span> solution to this problem; I’m thinking we can do a little better, perhaps not as good as <span class="math-container">\$O(N \log N)\$</span>, but maybe close.</p>

<p>We’ve not been asked to find the tuples <code>(x,y,z)</code>, <code>x &lt; y &lt; z</code>, which satisfy that <code>A[x],A[y],A[z]</code> represent (in any order) multiplier, multiplicand, and product; we’ve been asked to find only the number of such tuples.  This means we can change the order of values in <code>A[]</code>, reindex the <code>A[]</code> array, or even change the representation of <code>A[]</code> to a list of value, count pairs, and still obtain the same answer. </p>

<p>The first step should be to sort the <code>A[]</code> values.  <span class="math-container">\$O(N \log N)\$</span>.  This guarantees <code>A[x] ≤ A[y] ≤ A[z]</code>, when <code>x &lt; y &lt; z</code>, and we now only need to look for tuples where <code>A[x]*A[y]=A[z]</code>.</p>

<p>We can loop <code>for x in range(N-2)</code> and <code>for y in range(x+1, N-1)</code>, and find the product’s indexes in the manner suggested by 200_success, but now we can break out of the inner loop when <code>A[x]*A[y] &gt; A_max</code>, and break the outer loop when <code>A[x]*A[x+1] &gt; A_max</code>, which should reduce the number of iterations significantly. </p>

<p>But again we really don’t care what the indices are which correspond to the product.  We only care about how many there are.  So after sorting <code>A[]</code>, we can count the number of occurrences of each unique value <code>C[]</code>, and eliminate the duplicates from <code>A[]</code>.  If <code>C[p] &gt; 0</code> for <code>p = A[x] * A[y]</code>, then the number of tuples for that multiplier, multiplicand, product combination is <code>C[A[x]] * C[A[y]] * C[p]</code>, if <code>A[x] ≠ 1</code>.  When <code>A[x]=1</code>, then <code>p=A[y]</code> for all <code>x&lt;y</code>, and the number of tuples for these combinations is <code>C[1] * C[p] * (C[p]-1)/2</code>.  In addition, there are <code>C[1] * (C[1]-1) * (C[1]-2)/6</code> combinations of <code>1*1=1</code>.  Lastly, we need to count any combinations of bases and their squares: <code>p = A[x] * A[x]</code> which is <code>C[p] * C[A[x]] * (C[A[x]]-1)/2</code>.</p>

<pre><code>from collections import Counter

def tuple_products(*A):
    c = Counter(A)   # Record # of duplicates
    A = sorted(c)    # Sorted list of unique values

    largest = A[-1]  # For early loop termination

    triplets = 0     # Number of product triplets

    # Handle (1, A[y], A[y]) triplets first
    if A[0] == 1:

        c1 = c[1]    # Number of 1's

        # Number of (1, 1, 1) triplets
        triplets += c1 * (c1-1) * (c1-2) // 6

        A = A[1:]    # Remove 1 from A list and
        del c[1]     # from count dictionary

        # Number of (1, A[y], A[y]) triplets (A[y] != 1)
        triplets += c1 * sum(cy * (cy-1) for cy in c.values()) // 2


    # Handle (A[x], A[y], A[z]) triplets (A[x] != 1)
    for x, ax in enumerate(A[:-1]):

        # Break outer loop if beyond possible products
        square = ax*ax
        if square &gt; largest:
            break

        # Number of (A[x], A[x], A[x]^2) triplets
        cx = c[ax]
        triplets += cx * (cx-1) * c[square] // 2

        # Handle (A[x], A[y], A[z]) triplets
        for ay in A[x+1:-1]:

            # Break inner loop when beyond possible products
            product = ax*ay
            if product &gt; largest:
                break

            # Number of (A[x], A[y], A[z]) triplets
            triplets += cx * c[ay] * c[product]


    print(triplets)

tuple_products(4,4,4,4,16)
tuple_products(5,2,4,6,3,1)
tuple_products(2,4,8,16,32,64)
tuple_products(1,1,1,1)
tuple_products(8,1,1,4,2,1,4,1,2)
</code></pre>

<hr>

<p>We are still <span class="math-container">\$O(N^2)\$</span>, but we’ve made N smaller by eliminating any duplicate numbers, and eliminated many of the <span class="math-container">\$N^2\$</span> combinations by sorting and breaking out of the loops early.  Can we do any better?  I think so.  Here’s why:</p>

<p>Consider the numbers 3, 5, 7, 8, 9, 10, 11, 14, 36, 42, 45.  The outer loop would start at <code>x=0, A[x]=3</code>.  The inner loop would start at <code>y=1, A[y]=5</code>, with the product <code>product=3*5=15</code>.  Since <code>A[]</code> is sorted, we can perform a bisection search for the <code>15</code> and find the next number higher than <code>15</code>, which is <code>36</code>.  Dividing <code>36/A[x]</code> gives us <code>12</code>, performing a bisection search, and getting the next higher number retrieves <code>14</code>.  Multiplying <code>A[x]*14</code> gives us <code>42</code>, which can actually be found in the <code>A[]</code> list.  Advancing past <code>14</code> takes us to <code>36</code> and <code>3*36</code> is greater than the maximum so we can break out of the inner loop.  Using this bisection search technique has skipped over the numbers 7, 8, 9, 10, and 11.  I think this means we’ve got <code>log N</code> numbers in each inner loop, and a <code>log N</code> bisection search giving an inner loop complexity of <span class="math-container">\$O(log^2 N)\$</span>, which combined with the outer loop gives <span class="math-container">\$O(N \log^2 N)\$</span>.  I think.  </p>
    </div>