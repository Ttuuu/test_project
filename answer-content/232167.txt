<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is a nightmare.</p>

<p>This is mainly because all the jump labels have very similar names: L0, l0, j0, J0, J1. What the hell do they mean? Please use more descriptive names for them.</p>

<p>The assembly code you are using does not make use of any advanced features of machine language. Instead, only the variable names get worse. It's far easier for a human reader to guess what <code>str</code> means than to guess what <code>esi</code> means. As another example, <code>needle</code> and <code>terminator</code> are much more intuitive than <code>dl</code> and <code>dh</code>.</p>

<p>You happily mix 32-bit registers (<code>ecx</code>) with 64-bit registers (<code>rsi</code>). This is confusing.</p>

<p>A single example string is not enough to make an exhaustive test suite. You need at least enough examples to cover each path of the code.</p>

<p>There is no <code>JS</code> flag in the x86 instruction set.</p>

<p>There is no guarantee near <code>Return with SF</code> that <code>test esi, esi</code> really sets the sign flag.</p>

<p>I rewrote your code in C, just for fun, and it became 50% the size. It's possible to cut that code down by another 50% by using higher-level control structures instead of only <code>goto</code>. Most of the saving comes from just deleting comments that describe on the assembler level what the C code can express directly.</p>

<p>Basically what you wrote is just a little state machine with a couple of special cases. Nothing you would really need assembler for. Especially not since the VT100 escape sequences are so closely coupled with I/O that it's usually not worth squeezing the last bit of performance out of this code.</p>

<p>Debugging a C program is easier as well, since you have named variables and you cannot get confused by the <code>edi</code> register, which is always visible in the debug view but not relevant for this piece of code.</p>

<p>Here's my try of transforming the code to C, just to give you something to play with. It's still far from good code, but at least any good IDE can rename variables to make the helpful names guide the human reader.</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;stdbool.h&gt;
#include &lt;stddef.h&gt;

struct str_width_result {
        size_t width;
        const unsigned char *end;
        size_t remaining;
        bool found;
        bool eof;
};

static struct str_width_result
str_width(const char *str, size_t str_size, char needle, char terminator)
{
    const unsigned char *rsi = str;
    size_t ecx = str_size;
    unsigned char dl = needle;
    unsigned char dh = terminator;
    unsigned char ESC = 0x1B;
    size_t ebx = 0;
    if (ecx == 0) ecx--;

L0:
    if (rsi[0] != ESC) goto J0;
    if (rsi[1] != '[') goto J0;

l0:
    ecx--;
    if (ecx == 0) goto done_minus_2;

    unsigned char al = *rsi++;
    if (al &gt;= 'A') goto j0;

    if (al == '(') goto L0;
    if (al == ')') goto l0;

j0:
    al &amp;= 0x5f;
    if (al &lt;= 'Z') goto L0;
    goto l0;

J0:
    if (al == dl) goto done;

    rsi++;
    if (al == dh) goto J1;

J1:
    ebx++;
    ecx--;
    if (ecx != 0) goto L0;

done_minus_2:
    ecx--;

done:;

    struct str_width_result result = {
            .width =  ebx,
            .end = rsi,
            .remaining = ecx,
            .found = false, // TODO
            .eof = false // TODO
    };
    return result;
}

#define ESC "\033"

#include &lt;stdio.h&gt;

int main(void)
{
    const char str[] =
            ESC "[2J" ESC "[1;37m" ESC "[2;000H"
            "Horizon Business "
            ESC "[42m" "&amp; Personal Finance"
            ESC "[40;39m";

    struct str_width_result result = str_width(str, sizeof str, '\0', '\0');

    printf("%zu %p\n", result.width, (void *)result.end);
}
</code></pre>
    </div>