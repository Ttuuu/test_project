<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might want to look at the <a href="https://www.hackerrank.com/challenges/queue-using-two-stacks/forum" rel="noreferrer">discussion tab</a> for why the code is timing out. Basically the code should reverse the input stack only when peek or dequeue is called and not in enqueue.</p>

<p>The rest of answer is a review of the code as posted and it ignores the fact that HackerRank supplied some of the code, such as the includes and the <code>using namespace std</code>. Issues such as readability and maintainability are beyond the scope of HackerRank but are considerations when writing good code.</p>

<p><strong>Avoid Using Namespace STD</strong><br>
If you are coding professionally you probably should get out of the habit of using the "using namespace std;" statement. The code will more clearly define where <code>cout</code> and other functions are coming from (std::cin, std::cout). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The function <code>cout</code> you may override within your own classes. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<p><strong>Magic Numbers</strong><br>
Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="noreferrer">Magic Numbers</a>, because there is no obvious meaning for them.
The values for the variable k are defined by the problem, but it might be better to use symbolic constants rather than raw numbers in the switch statement. That would make the code easier to read and maintain. C++ provides a couple of methods for this, there could be an <code>enum</code>, or they could be defined as constants using <code>const</code> or <code>constexpr</code>. Any of these would make the code more readable. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>

<p><strong>Use Descriptive Variable Names</strong><br>
The variables s1 and s2 are not very clear, and if they weren't in a std::stack declarations I really would have no idea what they were. Since this is a queue problem it might be better to name them <code>front</code> and <code>rear</code> to represent what they are used for. It is very hard to maintain code with variable names such as <code>s1, s2, q, t, k and x</code>. As an example for <code>k</code> I might use queryIndex.</p>

<p>Since the restrictions on all input indicates there will be no negative numbers it might be better to use unsigned rather than int.</p>

<p><strong>Prefer to Not Include What Isn't Necessary</strong><br>
It is much better to only include what is necessary in a source file. There are currently 6 files included but only two are necessary (<code>iostream</code> and <code>stack</code>) for this implementation. Including <code>cstdio</code> is bad because it might lead the programmer to use C I/O statements rather the C++ ones. Including only what is needed improves compile times, because the contents of all the includes are part of the compilation. It could lead to other problems if you are implementing your own class rather than using a C++ container class (such as <code>std::queue</code> from <code>#include &lt;queue&gt;</code>).</p>

<pre><code>#include &lt;cmath&gt;
#include &lt;cstdio&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;stack&gt;
</code></pre>

<p><strong>Prefer One Declaration Per Line</strong><br>
Maintaining code is easier when one can find the declarations for variables. It would be easier to find where <code>s2</code> is declared if it was on a separate line.</p>

<pre><code>    std::stack&lt;int&gt; s1, s2;
</code></pre>

<p>Versus</p>

<pre><code>    std::stack&lt;int&gt; s1;
    std::stack&lt;int&gt; s2;
</code></pre>

<p>Remember you may win a lottery and may not be the one maintaining the code.</p>

<p>The same reasoning applies to 2 statements on a line such as </p>

<pre><code>    int k; cin&gt;&gt;k;
</code></pre>
    </div>