<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Make sure to format your code properly, indenting the code inside code blocks.</p>

<p>Class names in Java have names in CamelCase per the coding style guide.    </p>

<pre><code>public class VowelCounter {
</code></pre>

<p>It's a good idea to add javadoc to your methods to explain their purpose</p>

<pre><code>/**
     * Count occurrence of each vowel in the input string
     * @param word - the string to process
     * @return a map with each vowel and their respective counts
     */
</code></pre>

<p>It's a good idea to have your method return the result so that it can be checked/unit tested at the caller.</p>

<pre><code>    public Map&lt;Character, Long&gt; getCount(String word) {
</code></pre>

<p>Here's a different way to achieve what you need. I have checked the original link of the task and it's my understanding that you're supposed to print out the count of each vowel, not their sums. </p>

<pre><code>    Set&lt;Character&gt; validVowels = Set.of('a', 'e', 'i', 'o', 'u');

        Map&lt;Character, Long&gt; vowelCountMap = new HashMap&lt;&gt;();
        // Initialize the map with the valid vowels and a count of zero
        // This way we have a valid count for all valid vowels
        for (Character vowel : validVowels) {
            vowelCountMap.put(vowel, 0L);
        }

        // Ensure equal handling of UPPERCASE and lowercase characters
        String wordInLowerCase = word.toLowerCase();

        for (int i = 0; i &lt; wordInLowerCase.length(); i++) {
            var character = wordInLowerCase.charAt(i);

            // valid vowels contains all vowels 'a', 'e', 'i', 'o', 'u'. 
            // If the current character is a vowel, then valid vowels will contain it
            if (validVowels.contains(character)) {
                Long count = vowelCountMap.get(character);
                // No need to handle null count since it's been initialized above
                count++;
                vowelCountMap.put(character, count);
            }
        }

        return vowelCountMap;
    }
</code></pre>

<p>I know you used the Scanner for the purposes of your test, though there are many approaches to this, I'm suggesting yet another one, where I'm setting a few test cases and throwing them at the method to check that it works on all edge cases, including empty string. It's important to test all the possible cases to ensure program accuracy.</p>

<pre><code>    public static void main(String[] args) {
        String threeAs = "blablabla";
        printOccurrences(threeAs);
        String mixedCase = "BLAbleBLIbloBLU";
        printOccurrences(mixedCase);
        String twoOfEachVowel = "aaeeiioouu";
        printOccurrences(twoOfEachVowel);
        String emptyString = "";
        printOccurrences(emptyString);
        String noVowels = "bcdfg";
        printOccurrences(noVowels);
    }

    private static void printOccurrences(String word) {
        System.out.println("Processing word: " + word);
        System.out.println("-------------------------------------------------------");
        Map&lt;Character, Long&gt; vowelCountMap = new VowelCounter().getCount(word);
        for (Character vowel : vowelCountMap.keySet()) {
            Long count = vowelCountMap.get(vowel);
            System.out.println(String.format("Vowel: %s has %d occurrences", vowel, count));
        }
        System.out.println(".......................................................");
    }
}
</code></pre>
    </div>