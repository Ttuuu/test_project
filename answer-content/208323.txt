<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>if it was possible to do this entirely via the standard C library.</p>
</blockquote>

<p>Yes, yet OP's code has issues.</p>

<p><strong>Invalid C</strong></p>

<p>Standard C does not have default function parameters.  Even if it did, as in C++, the usage belongs in a .h file <em>declaration</em>, not the .c file <em>definition</em>.</p>

<pre><code>// int getkey(const char* prompt = "") {
int getkey(const char* prompt) {
</code></pre>

<p><strong>No need to involve <code>stdout</code> in a <code>stdin</code> function</strong></p>

<p>Consider dropping the prompt code.  If still desired, code as a higher level function.  Also allow a prompt without an output <code>'\n'</code> occurring.  Be prepared for <code>stdout</code> as fully buffered or unbuffered.</p>

<pre><code>  int prompt_and_getkey(const char* prompt) {
    // Do not use puts() which appends a \n, let caller decide.
    fputs(prompt, stdout);
    fflush(stdout);  // Ensure output occurs before input.

    return getkey();
  }
</code></pre>

<p><strong>Bug</strong></p>

<p>Below code uses <code>next</code> before it is assigned, thus <strong>undefined behavior</strong> (UB) and anything may happen.  This also implies that OP does not have all warnings enabled with a good compiler as such trivial errors are automatically detected.  Save time.  Enable all warnings.</p>

<pre><code>int next;
while(!feof(stdin) &amp;&amp; next != '\n') {    // bad code
</code></pre>

<p><strong>Handle rare input error</strong></p>

<p><code>feof(stdin)</code> is simply the wrong test as the below is an infinite loop on input error.  The earlier answers are also infinite loops on input error.</p>

<pre><code>// bad
int next;
while(!feof(stdin) &amp;&amp; next != '\n') {  
    next = getchar();
}

// Amended
int next = ch;
while(next != EOF &amp;&amp; next != '\n') {  
    next = getchar();
}
</code></pre>

<p><strong>Questionable design</strong></p>

<p>Code does not consider that the input may be simple <code>"\n"</code>.  Code <em>assumes</em> a first read <code>'\n'</code> is due to a previous line.  Instead it may simple be a line that only consists of <code>"\n"</code></p>

<p>To fix, code needs to re-architect the whole idea of leaving <code>'\n'</code> in <code>stdin</code> for the <em>next</em> line to read.  Better to have code finish consuming the line before calling code to get the next line.</p>

<p><strong><code>fflush(stdin)</code> and <code>feof()</code></strong></p>

<p>Calling these functions are often  strong indications of questionably-designed code.  I recommend to never use <code>fflush(stdin)</code> and then use <code>feof()</code> only once one is very clear on its need: to distinguish end-of-file from input error.  Do not use <code>feof()</code> to determine if end-of-file occurred.  Use <code>... == EOF</code> to determine if end-of-file or input error occurred.</p>

<p><strong>Unclear comments</strong></p>

<p>Example: "Drain the input buffer so any extra characters which were pressed are discarded <strong>except</strong> for newline".  The <strong>except</strong> does not apply here as code also discards <code>'\n'</code>.</p>

<p><strong>Simplification</strong></p>

<p>Code only needs to check the first character.  Testing <code>*string_pointer</code> for an empty string test is idiomatic in C and is <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a>.</p>

<pre><code>// WET
// if (strcmp(prompt, "") != 0) {

// DRY
if (*prompt) {
</code></pre>

<p>Either source code may emit the same run-time code.  As with such style issue, consult your group's coding guide.</p>
    </div>