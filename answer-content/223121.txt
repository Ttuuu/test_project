<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code below reduces the duplication you have.</p>

<p>The SQL statement is the first thing that is duplicated, with the exception of the <code>where</code> clause. this means we can extract the building of the query to a function that accepts the <code>where</code> clause and returns our query.</p>

<p>The result parsing is similar, accepting two parameters instead of one. Rather than just copy the code though, we can leave the <code>echo</code> and <code>json_encode</code> in the outer function. This means we can reuse the <code>getSelectStatement</code> and <code>getResult</code> functions elsewhere, where we might not need to echo straight away. We can keep your original functions <code>GetLeaveRequestDetailsAll</code> and <code>GetLeaveRequestDetailsById</code> for the same reason.</p>

<p>Finally, the single parameterized function you wanted, <code>GetLeaveRequestDetails</code>. This has a second parameter that defaults to <code>null</code> - you don't have to specify it when you call the function. In practice I would use your two original functions as I believe it's clearer what's going on to people reading the top level of your code, but that's up to you.</p>

<p>As an aside, I'd take a look at what fields you actually need returned from your query. Using <code>*</code> is discouraged, particularly if you are echoing the result, as any new fields you add in the future will be printed as well. If the fields are secret, you may not want this.</p>

<pre class="lang-php prettyprint-override"><code>function GetLeaveRequestDetails($leaveCurrentStatus, $leaveDetailId = null) {

    if ($leaveDetailId) {
        $result = GetLeaveRequestDetailsById($leaveCurrentStatus, $leaveDetailId);
    } else {
        $result = GetLeaveRequestDetailsAll($leaveCurrentStatus);
    }

    echo json_encode($result);
}

function GetLeaveRequestDetailsAll($leaveCurrentStatus) {

    $sql = getSelectStatement(
        "where eld.leave_current_status_id = :leave_current_status_id"
    );

    $binds = array(
        ":leave_current_status_id"   =&gt;  $leaveCurrentStatus
    );

    return getResult($sql, $binds);
}


function GetLeaveRequestDetailsById($leaveCurrentStatus, $leaveDetailId) {

    $sql = getSelectStatement(
        "where eld.leave_current_status_id = :leave_current_status_id 
         And eld.leave_detail_id = :leave_detail_id"
    );

    $binds = array(
        ":leave_current_status_id"   =&gt;  $leaveCurrentStatus,
        ":leave_detail_id"   =&gt;  $leaveDetailId
    );

    return getResult($sql, $binds);
}

/** 
 * Both functions use the same query with a different WHERE clause, 
 * so extract that to a function
 */
function getSelectStatement($whereStatement) {

    return "select *, emp.Employee_Name, emp.Designation, 
            emp.Emp_Dept_Category, lt.Leave_Name
            from tbl_emp_leave_details eld
            Inner join tbl_leave_types lt
            ON lt.leave_id = eld.leave_type
            Inner Join employee emp
            on emp.PK = eld.emp_id
            Inner JOIN dept_category dc
            ON emp.Emp_Dept_Category = dc.PK" . $whereStatement
}

/**
 * Both functions parse the query result in the same way, so extract that to a function
 */
function getResult($sql, $binds) {

    global $connPDO;

    $statementEntryCount = $connPDO-&gt;prepare($sql);
    $statementEntryCount-&gt;execute($binds);
    $queryData = $statementEntryCount-&gt;fetchAll(PDO::FETCH_ASSOC);

    return $queryData;
}
<span class="math-container">```</span>
</code></pre>
    </div>