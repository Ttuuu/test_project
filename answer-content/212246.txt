<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To build on what else has been posted, validating your inputs is necessary and you have a lot of functions and loops that can be removed. </p>

<h3>String module</h3>

<p>First, I would like to introduce you to the <a href="https://docs.python.org/3/library/string.html#string-constants" rel="nofollow noreferrer"><code>string</code></a> module that is part of the python standard library. This module has string constants that you can import and use:</p>

<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; string.punctuation
'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
</code></pre>

<p>Using these would allow you to get rid of your first three functions (<code>letter</code>, <code>upper_case</code>, and <code>special_char</code>). Similarly to what Joe said, it would be better to make your character space a variable to avoid creating extra objects, and remove the <code>all_char</code> function at the same time.</p>

<h3><code>create_password</code> function</h3>

<p>This function is clear and works okay, but can also be improved. As you are doing the same operation in each iteration of the loop (<code>random.choice</code>) this is and ideal scenario to use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>.</p>

<pre><code># Before
def create_password(password, n):
    for x in range(n):
        password += random.choice(all_char())
    return password

# After
def create_password(n):
    return ''.join([random.choice(all_char()) for _ in range(n)])
</code></pre>

<p>This works by creating a list where a random character is selected from <code>all_char()</code> and then joining them all together. The underscore is a 'throwaway' variable here, see <a href="https://stackoverflow.com/a/5893946/3279716">here</a>.</p>

<p>Alternatively, as we are already using the <code>random</code> module we could use <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> (but only in python3.6 and above) as this will return a list of <code>k</code> size:</p>

<pre><code>def create_password(n):
    return ''.join(random.choices(all_char(), k=n))
</code></pre>

<h3><code>check_password</code> function</h3>

<p>In general, simple statements are better than complex statements. Therefore, I would change the first line of this function to be:</p>

<pre><code>nletter, nupper, nspecial = 0, 0, 0
</code></pre>

<p>As this is clearer.</p>

<p>The for loop works, and could be improved by using the <code>string</code> module constants, though they would need to be made into lists.</p>

<pre><code>for x in password:
    if x in list(string.ascii_lowercase):
        nletter += 1
    if x in list(string.ascii_uppercase):
        nupper += 1
    if x in list(string.punctuation):
        nspecial += 1
</code></pre>

<p>Another way to test if two strings overlap is to use <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer"><code>sets</code></a>; but this is getting more complex.</p>

<hr>

<h3>Altogether</h3>

<pre><code>import random
import string

def create_password(n, chars):
    return ''.join(random.choices(chars, k=n)) 

def check_password(password):
    nletter, nupper, nspecial = 0, 0, 0
    for x in password:
        if x in list(string.ascii_lowercase):
            nletter += 1
        if x in list(string.ascii_uppercase):
            nupper += 1
        if x in list(string.punctuation):
            nspecial += 1
    if nletter &gt; 0 and nupper &gt; 0 and nspecial &gt; 0:
        return True
    else:
        return False

def main():
    characters = string.ascii_letters + string.punctuation
    n = 0
    while n &lt; 5:
        try:
            n = int(input('Enter your password length (minimum 5): '))
        except ValueError:
            print('Not a number')

    password = ''
    while not check_password(password):
        password = create_password(n, characters)

    print('Generated password : {}'.format(password))

run = True
while run:
    try:
        main()
    except KeyboardInterrupt:
        run = False
        print('Ctrl+c caught exiting')
</code></pre>
    </div>