<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Having a queue program running, is an achievement of its own. So please take the following hints as suggestions for your next learning steps on your path to a software engineer. Maybe some of the concepts will be new for you, and that's quite OK. Rome wasn't built in a day...</p>

<p>A <code>Queue</code> should be a component that you can re-use without modification if you need one in some future program. It is not meant to be a stand-alone program.</p>

<p>So, change the <code>deQueue()</code> method to return the item instead of printing it inside of this method, and let the outside (in your case the <code>main()</code> method) do the printing. Maybe this next program wants to do some computation with the numbers it gets from the queue before printing the results, or maybe it's some embedded program controlling a quad-copter that doesn't even have a place to write text to.</p>

<p>Similarly, instead of printing that the queue is full or empty, have the methods throw an exception if <code>enQueue()</code> can't accept a new item or if <code>deQueue()</code> has no more items available. That'll introduce you to the important concept of exception-handling, where even seasoned developers sometimes struggle to find the right way.</p>

<p>To give your <code>Queue</code>'s user a chance to see whether it can enqueue or dequeue another item, add two more methods returning boolean: <code>isFull()</code> and <code>isEmpty()</code>.</p>

<p>Right now, your Queue can only accept integer items. Using Java Generics, you can change the code so that you can use the same Queue source code for integers, for floats, for strings, and any other data type you want. That's another special concept that takes some time to get familiar with, but it's worth the pain.</p>
    </div>