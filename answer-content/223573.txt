<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Like above all code is available at the <a href="https://gitlab.com/SumNeuron/lrng" rel="nofollow noreferrer">repo</a>.</p>

<p>Performance was increased by accommodating the requirements of <code>numba</code>'s <code>nopython</code> mode.</p>

<p>There are three functions behind <code>coalesce</code>:</p>

<ul>
<li><code>coalesce</code>: wrapper function around <code>__coalesce</code>. Main purpose is convert user friendly input (e.g. <code>LabeledRanges</code>) to <code>numba</code> friend input (<code>numpy</code> integer array)</li>
<li><code>__coalesce</code>: <code>while</code>-loop wrapper over <code>_coalesce</code> until ranges can be simplified no further
<code>_coalesce</code>: the "main" function</li>
</ul>

<p>So lets look at <a href="https://gitlab.com/SumNeuron/lrng/blob/master/lrng/numba.py#L296" rel="nofollow noreferrer"><code>_coalesce</code></a></p>

<pre class="lang-py prettyprint-override"><code>@njit(cache=True)
def _coalesce(ranges):
    '''
    Simplifies the input ranges by merging overlaps ranges.

    Arguments:
        ranges (np.array): a list of ranges, with shape (-1, 3) where each range
            (sublist / row) is a list of length 3 consisting of: `[label, start, stop]`

    Returns:
        ranges (list): a simplified version of the input
    '''
    coalesced = np.array([0][:0]).reshape(-1, 3)
    for i in range(len(ranges)):
        label_a, start_a, stop_a = ranges[i]
        append_flag = True
        for j in range(len(coalesced)):
            label_b, start_b, stop_b = coalesced[j]
            if merge_q(label_a, start_a, stop_a, label_b, start_b, stop_b):
                append_flag = False
                coalesced[j] = [label_a, min(start_a, start_b), max(stop_a, stop_b)]
                break
        if append_flag:
            coalesced = np.concatenate((coalesced, np.array([[label_a, start_a, stop_a]])))
    return coalesced

</code></pre>

<p>where</p>

<pre class="lang-py prettyprint-override"><code>@njit(cache=True)
def merge_q(label_a, start_a, stop_a, label_b, start_b, stop_b):
    '''
    Whether or not range `A` and range `B` can be merged.

    Arguments:
        label_a (int): label of range `A`
        start_a (int): start of range `A`
        stop_a (int): stop of range `A`
        label_b(int): label of range `B`
        start_b(int): start of range `B`
        stop_b (int): stop of range `B`

    Returns:
        answer (bool)
    '''
    if label_a != label_b: # not of same type
        return False
    elif stop_a &lt; start_b: # a does not start and then overlap b
        return False
    elif stop_b &lt; start_a: # b does not start and then overlap a
        return False
    else: # same type and overlap, merge into i, do not append
        return True
</code></pre>

<p>To my current understanding the <code>while</code>-loop wrapper <code>__coalesce</code>:</p>

<pre class="lang-py prettyprint-override"><code>@njit(cache=True)
def __coalesce(ranges):
    '''
    A helper wrapper over the functino `_coalesce` which continues to reduce
    ranges until reduction no longer occurs.

    Arguments:
        ranges (np.array): a list of ranges, with shape (-1, 3) where each range
            (sublist / row) is a list of length 3 consisting of: `[label, start, stop]`

    Returns:
        ranges (list): a simplified version of the input
    '''
    _len = np.inf
    coalesced = ranges
    while _len &gt; len(coalesced):
        coalesced = _coalesce(coalesced)
        _len = len(coalesced)
    return coalesced
</code></pre>

<p>is required as the way the results variable, <code>coalesced</code> is made, allows for disjointed ranges to not be merged.</p>

<p>e.g.</p>

<pre><code>'Type A'     50    100
'Type A'    150    250
'Type A'     75    160
</code></pre>

<p>The second range does not overlap, causing it to be concatenated to <code>coalesced</code>, but then the third range is merged into the first range.</p>

<p>While sorting by the "start" of each range may help this situation, I believe there are still instances where this further reducible result might occur.</p>
    </div>