<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The constructor of <code>upgrade_lock</code> never locks the mutex</h2>

<p>When constructing an <code>upgrade_lock</code> variable, the constructor sets <code>m_state = initial_state</code> before calling either <code>lock_shared()</code> or <code>lock_unique()</code>. In the latter two functions, it checks the current value of <code>m_state</code>, and if it already matches the target state, these functions immediately return.</p>

<h2><code>lock_upgrade()</code> is only safe if mutexes are only accessed via <code>upgrade_lock</code>s</h2>

<p>The function <code>lock_upgrade()</code> has a while loop that waits for readers to become zero. The assumption being that no new read locks can be acquired after the call to <code>disable_read()</code>. However, that only works if the only access to a mutex is via the <code>upgrade_lock()</code> class. If someone calls <code>mutex.lock_shared()</code> directly between the end of the while-loop and before <code>upgrade()</code> is called, then the read lock will be successfully acquired.</p>

<h2>Don't use verbs for class and variable names</h2>

<p>You named your class <code>upgrade_mutex</code>. This sounds like an action. It is best to use nouns for class and variable names. In this case, you could use <code>upgradable_mutex</code>, or better yet, <code>upgradable_rwlock</code>.</p>

<p>I see you copied Boost's naming convention here, but I would say that in this specific case, they made a bad choice.</p>

<h2>Mirror C++11 mutex classes wherever possible</h2>

<p>Make your class look and behave existing mutex classes as much as possible. It's the principle of least surprise for the users of your class. For example, C++11 mutexes are held by a <code>lock_guard&lt;&gt;</code>, which again is a noun. Change the class <code>upgrade_lock</code> accordingly, or even better, make a template class <code>lock_guard&lt;&gt;</code> inside the <code>rip_parallel</code> namespace that can work with your locks.</p>

<p>Also, <code>lock_guard&lt;&gt;</code> locks the mutex by default, and this is what users who already know regular mutexes expect. So make the default <code>initial_state = rip_parallel::shared_state</code>.</p>

<h2>Make internal functions <code>private</code> or <code>protected</code></h2>

<p>Your class has functions like <code>wait_read()</code> which, I assume, are not meant to be used directly by application code. So they should be hidden. Also, some functions in the<code>upgrade_mutex</code> class, like <code>upgrade()</code>, are misnamed; they don't really upgrade the lock, they only implement part of the functionality needed for upgrading it.</p>

<h2>Move as much logic as possible to the mutex class</h2>

<p>The <code>upgrade_lock</code> class is there to provide RAII-style locking. The only thing it should do is lock in the constructor, unlock in the destructor, and pass any useful function like upgrading and downgrading to the mutex.</p>

<h2>Move constant initialization of member variables out of the constructors</h2>

<p>Instead of making the constructor like this:</p>

<pre><code>upgrade_mutex(void): m_readers(0), m_upgraders(0) { ... }
</code></pre>

<p>Move the initialization of <code>m_readers</code> and <code>m_upgraders</code> to their declaration:</p>

<pre><code>private:
    volatile std::atomic&lt;int&gt; m_readers = 0;
    volatile std::atomic&lt;int&gt; m_upgraders = 0;
</code></pre>

<p>The benefit of this becomes clear when you are writing classes with more than one constructor, or if you have many variables to initialize in your class.</p>
    </div>