<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all your algorithm works as expected. It exemplifies how addition works in a positional number system with base 10 although it is done in reverse order.</p>

<p>Below I have reviewed your code with some inline comments:</p>

<pre><code>// You should return the result instead of writing to the console inside your calculation algorithm
public static List&lt;int&gt; Add2Numbers(int a, int b)
{
  if (a &lt; 0 || b &lt; 0) throw new ArgumentOutOfRangeException("a or b", "One or more arguments are lesser than 0"):

  // Instantiate each variable on separate lines, it is more readable
  int carry = 0;
  int sum = 0;

  // You are doing to much in the same method.
  // In general a method should only do one thing (as a general rule), so create the digit lists in a separate method
  List&lt;int&gt; lstA = GetDigits(a);
  List&lt;int&gt; lstB = GetDigits(b);
  List&lt;int&gt; lstSum = new List&lt;int&gt;();

  for (int j = 0; j &lt; lstB.Count; j++)
  {
    sum = lstA[j] + lstB[j] + carry;
    // The next is OK, but you could use modular/integer division as others have stated
    if (sum &gt; 9)
    {
      sum = sum - 10;
      carry = 1;
    }
    else
      carry = 0;

    lstSum.Add(sum);
  }

  if (carry &gt; 0)
    lstSum.Add(carry);

  lstSum.Reverse();

  return lstSum;
}

static List&lt;int&gt; GetDigits(int number)
{
  // You can do it the "hard" way:
  /*
  List&lt;int&gt; digits = new List&lt;int&gt;();

  foreach (var item in EnumDigits(number))
  {
    digits.Add(item);
  }

  return digits;
  */

  // Or the LINQ-way
  return EnumDigits(number).ToList();

  // LINQ can do many things a lot more elegant than more traditional approaches, so it's good to be familiar with, 
  // but be aware that it often is considerably slower than more traditional ways especially with large data sets.
}

static IEnumerable&lt;int&gt; EnumDigits(int number)
{
  while (number &gt; 0)
  {
    // This is just perfect
    yield return number % 10;
    number = number / 10;
  }
}
</code></pre>

<hr>

<p>If you want to do it from right to left as one do on paper, it could be something like:</p>

<pre><code>public static int[] Add2Numbers(int a, int b)
{
  if (a &lt; 0 || b &lt; 0) throw new ArgumentOutOfRangeException("a or b", "One or more arguments are lesser than 0"):

  int[] aDigits = GetDigits(a);
  int[] bDigits = GetDigits(b);

  int size = aDigits.Length;
  int carry = 0;

  if (size != bDigits.Length) throw new InvalidOperationException("Numbers have different number of digits");

  int[] sumDigits = new int[aDigits.Length + 1]; // + 1 for a final carry as the leftmost digit.

  for (int j = size - 1; j &gt;= 0; j--)
  {
    int sum = aDigits[j] + bDigits[j] + carry;
    sumDigits[j + 1] = sum % 10;
    carry = sum / 10;
  }
  sumDigits[0] += carry;

  return sumDigits;
}

static int[] GetDigits(int number)
{
  List&lt;int&gt; digits = new List&lt;int&gt;();

  while (number &gt; 0)
  {
    digits.Add(number % 10);
    number = number / 10;
  }

  return digits.Reverse&lt;int&gt;().ToArray();
}
</code></pre>

<hr>

<p>Or if it's all about getting the job done:</p>

<pre><code>static int[] Add2Numbers(int a, int b)
{
  if (a &lt; 0 || b &lt; 0) throw new ArgumentOutOfRangeException("a or b", "One or more arguments are lesser than 0"):

  const int numBase = 10;
  int carry = 0;

  IEnumerable&lt;int&gt; adder()
  {
    while (a &gt; 0 || b &gt; 0)
    {
      int sum = (a % numBase) + (b % numBase) + carry;
      yield return sum % numBase;
      carry = sum / numBase;
      a /= numBase;
      b /= numBase;
    }

    if (carry &gt; 0)
      yield return carry;
  }

  return adder().Reverse().ToArray();
}
</code></pre>
    </div>