<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Reading File</h2>

<p>Here is a tip, while reading, the <code>r</code> is optional</p>

<pre class="lang-py prettyprint-override"><code>f = open(r'\h.csv',"r")
</code></pre>

<p>can be written as</p>

<pre class="lang-py prettyprint-override"><code>f = open(r'\h.csv')
</code></pre>

<p>Your whole reading block can use context managers (blocks using the with keyword).</p>

<pre class="lang-py prettyprint-override"><code>with open(r'\h.csv', encoding='utf8') as f:
    cont = f.read()
</code></pre>

<p>If you are dealing with a huge text file, you might do:</p>

<pre class="lang-py prettyprint-override"><code>with open(r'\h.csv', encoding='utf8') as f:
    for ip in f:
        ip = ip.rstrip('\n')
        .. verify
</code></pre>

<h2>String</h2>

<p>Using string formatting i.e. <code>.format()</code> can give a better idea of what's going on. It also eliminates the use of <code>str()</code> each time.
We can change this</p>

<pre class="lang-py prettyprint-override"><code>print(list[k] + " MGMT" + ": " + str(ports[i]) + "  " + str(k))
</code></pre>

<p>to that</p>

<pre class="lang-py prettyprint-override"><code>print("{} MGMT: {}  {}".format(list[k], ports[i], k))
</code></pre>

<p>and as from 3.6+, adding an f</p>

<pre class="lang-py prettyprint-override"><code>print(f"{list[k]} MGMT: {ports[i]}  {k}")
</code></pre>

<h2>Loop Iteration</h2>

<p>In many other languages, you need the index while looping to have the element at this index. Python provides a nice and intuitive way to loop over elements</p>

<p>The current implementation:</p>

<pre class="lang-py prettyprint-override"><code>ports = [443, 4433, 444, 433, 4343, 4444, 4443, 4434]
portlen = len(ports)
for i in range(portlen):
    print(ports[i])
</code></pre>

<p>But the pythonic way is:</p>

<pre class="lang-py prettyprint-override"><code>ports = [443, 4433, 444, 433, 4343, 4444, 4443, 4434]
for port in ports:
    print(port)
</code></pre>

<p><code>port</code> here gives you the element directly.
If ever you still want the index, you do:</p>

<pre class="lang-py prettyprint-override"><code>for i, port in enumerate(ports):
</code></pre>

<p>where <code>i</code> is the index.</p>

<h2>Miscellaneous</h2>

<p>Here:</p>

<pre class="lang-py prettyprint-override"><code>cpu = int(multiprocessing.cpu_count())
</code></pre>

<p>No need to cast to int as <code>multiprocessing.cpu_count()</code> already returns an integer. You can verify for int by <code>type(multiprocessing.cpu_count())</code></p>

<p>Normally with <code>.start()</code>, you must include a <code>.join()</code>, as this allows all child processes to terminate before exiting.</p>

<pre class="lang-py prettyprint-override"><code>for ...:
   ... .start()

for ...:
   ... .join()
</code></pre>
    </div>