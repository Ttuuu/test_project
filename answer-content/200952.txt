<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are correct in thinking that <code>iterrows</code> is a very bad sign for Pandas code. Even worse is building up a DataFrame one row at a time like this with <code>pd.concat</code> - the performance implications are dreadful.</p>

<p>Instead of reaching for loops, your first step should be to check if there is a vectorized DataFrame method you could use. In this case.. perhaps there isn't. </p>

<p>Next step is dropping into NumPy. And lo and behold, there is <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.repeat.html" rel="noreferrer"><code>numpy.repeat</code></a>, which allows you to repeat an array along an axis with another array of counts. We can wrap that up in a function. </p>

<pre><code>def repeat_frame(df, counts):            
    rep_array = np.repeat(df.values, counts, axis=0)
    return pd.DataFrame(rep_array, columns=df.columns)

# would be called with 
repeat_frame(df[['a', 'b']], df['count'])
</code></pre>

<p>This runs in 450 µs on my machine compared to your current solution in 20.2 ms for your sample data. On a larger sample size with 1000 rows, it runs in 511 µs compared to 6.86 s for your current solution, roughly 13000 times faster. </p>

<hr>

<p>If you find yourself wanting to use <code>pd.concat</code> or similar in any situation like this to build up a DataFrame row-by-row, stop! There is going to be a faster way. </p>

<ul>
<li>Check for <a href="https://pandas.pydata.org/pandas-docs/stable/index.html" rel="noreferrer">vectorized Pandas functions</a> that can help you out</li>
<li>Ditto for NumPy and SciPy after that </li>
</ul>

<p>And if you are certain you have some wild iteration logic that cannot be vectorized (which is unlikely), create an empty array of the necessary shape and consider using <a href="https://numba.pydata.org/" rel="noreferrer">Numba</a> or <a href="http://cython.org/" rel="noreferrer">Cython</a> to speed up filling it up with a loop. </p>
    </div>