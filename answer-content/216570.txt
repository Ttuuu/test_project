<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing that struck me when I looked at your code was that you had almost identical code to get user input for <code>m</code> and <code>n</code>.</p>

<p>When you think of what you are trying to in such blocks of code a bit carefully, you can easily transform them into functions and can be reused.</p>

<p>Instead of</p>

<pre><code>  bool valM, valN;
  do{
  std::cout &lt;&lt; "m = ";
  std::cin &gt;&gt; m;
  valM = check(m, 'm');
  } while(valM);
</code></pre>

<p>Use</p>

<pre><code> int m = getInput("m = ", 'm');
</code></pre>

<p>However, you have some hard coded logic that assumes that the maximum value of <code>m</code> is 3. You can remove the card coded magic number and let it be an input to <code>getInput</code>.</p>

<pre><code> int m = getInput("m = ", 'm', 3);
</code></pre>

<p>The signature of <code>getInput</code> is:</p>

<pre><code>int getInput(std::string const&amp; prompt,
             char name,
             int max);
</code></pre>

<p>I have the following suggested implementation of <code>getInput</code>. It follows your ideas but expresses the intent of what are trying to do more clearly, IMHO.</p>

<pre><code>int getInput(std::string const&amp; prompt,
             char name,
             int max)
{
   int num = 0;
   while ( true )
   {
      std::cout &lt;&lt; prompt;
      std::cin &gt;&gt; num;
      if ( isValidValue(num, max) )
      {
         break;
      }
      printErrorMessage(name, num, max);
   }

   return num;
}
</code></pre>

<p><code>isValidValue</code> is simple to implement given the inputs.</p>

<pre><code>bool isValidValue(int num, int max)
{
   return ( num &gt;= 0 &amp;&amp; num &lt;= max );
}
</code></pre>

<p><code>printErrorMessage</code> is not that difficult either.</p>

<pre><code>void printErrorMessage(char name, int num, int max)
{
   if (num &lt; 0)
   {
      std::cout &lt;&lt; "Negative error!" &lt;&lt; std::endl;
   }

   if ( num &gt; max )
   {
      std::cout &lt;&lt; "Overflow error. (" &lt;&lt; name &lt;&lt; " &gt; " &lt;&lt; max &lt;&lt; ")!" &lt;&lt; std::endl;
   }
}
</code></pre>

<p>I would suggest dividing  <code>getInput</code> further into two functions -- one function that gets the raw input and let <code>getInput</code> perform the error checks before returning a valid input.</p>

<pre><code>int getRawInput(std::string const&amp; prompt)
{
   int num = 0;
   std::cout &lt;&lt; prompt;
   std::cin &gt;&gt; num;
   return num;
}

int getInput(std::string const&amp; prompt,
             char name,
             int max)
{
   int num = 0;
   while ( true )
   {
      num = getRawInput(prompt);
      if ( isValidValue(num, max) )
      {
         break;
      }
      printErrorMessage(name, num, max);
   }

   return num;
}
</code></pre>

<p>In the event that you need to get multiple types of raw input, such as <code>int</code>s and <code>double</code>s, it can be easily converted to a function template.</p>

<pre><code>template &lt;typename T&gt;
T getRawInput(std::string const&amp; prompt)
{
   T t = {};
   std::cout &lt;&lt; prompt;
   std::cin &gt;&gt; t;
   return t;
}
</code></pre>

<hr>

<p>Here's the complete program that incorporates my suggestions. It works on my computer as you would expect with the limited amount of testing I subjected it to.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;limits&gt;

// Ackermann function calculations
unsigned int ackermann(unsigned int m, unsigned int n){
   if(m == 0)
      return n+1;
   if(n == 0)
      return ackermann(m-1,1);
   return ackermann(m-1,ackermann(m,n-1));
}

bool isValidValue(int num, int max)
{
   return ( num &gt;= 0 &amp;&amp; num &lt;= max );
}

void printErrorMessage(char name, int num, int max)
{
   if (num &lt; 0)
   {
      std::cout &lt;&lt; "Negative error!" &lt;&lt; std::endl;
   }

   if ( num &gt; max )
   {
      std::cout &lt;&lt; "Overflow error. (" &lt;&lt; name &lt;&lt; " &gt; " &lt;&lt; max &lt;&lt; ")!" &lt;&lt; std::endl;
   }
}

template &lt;typename T&gt;
T getRawInput(std::string const&amp; prompt)
{
   T t = {};
   std::cout &lt;&lt; prompt;
   std::cin &gt;&gt; t;
   return t;
}

int getInput(std::string const&amp; prompt,
             char name,
             int max)
{
   int num = 0;
   while ( true )
   {
      num = getRawInput&lt;int&gt;(prompt);
      if ( isValidValue(num, max) )
      {
         break;
      }
      printErrorMessage(name, num, max);
   }

   return num;
}

int main(){

   int m = getInput("m = ", 'm', 3);
   int n = getInput("n = ", 'n', 12);

   std::cout &lt;&lt; "\nM = " &lt;&lt; m &lt;&lt; "\nN = " &lt;&lt; n
      &lt;&lt; "\n\nCALCULATING..." &lt;&lt; std::endl;

   std::cout &lt;&lt; "A(" &lt;&lt; m &lt;&lt; ',' &lt;&lt; n &lt;&lt; ") = "
      &lt;&lt; ackermann(m,n) &lt;&lt; std::endl;

   return 0;
}
</code></pre>

<hr>

<p>My suggestions in a bulleted form:</p>

<ul>
<li><p>Follow the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY principle</a>. If you find yourself repeating code, there is most likely a way to remove repetition by defining a function and using the function in multiple places.</p></li>
<li><p>Keep functions free of magic numbers as much as possible. In your case, the magic numbers 3 and 12 were moved to the calling function.</p></li>
<li><p>Give names to what you are doing (<code>isValidInput</code>) and move them to their own functions.</p></li>
<li><p>Keep functions as atomic as possible (separation of checking whether the input is valid and printing an error message).</p></li>
<li><p>Make functions as generic as possible (converting <code>getRawInput</code> to a function template).</p></li>
</ul>
    </div>