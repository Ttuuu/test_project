<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Make it explicit that it is a <em>binary</em> tree</h1>

<p>Your class name is <code>Tree</code>, but there are many different types of trees. Make it clear that this is a binary tree, and name it <code>BinaryTree</code>.</p>

<h1>Move <code>class Node</code> inside <code>class Tree</code></h1>

<p>Move the declaration of <code>class Node</code> inside that of <code>class Tree</code>, in the <code>public</code> section. This makes it clear that this <code>Node</code> is specific to the tree you are implementing, and avoids a potention conflict with other classes that might have nodes.</p>

<p>Consider for example that you might also have an implementation of a linked list, which also consists of nodes named <code>Node</code>. If you would want to use both your binary tree and your linked list in the same program, you would get a conflict.</p>

<h1>Try to make your <code>Tree</code> look like other <code>STL</code> container classes</h1>

<p>Have a look at what member functions STL containers define. The closest <code>STL</code> container to your binary tree is <a href="https://en.cppreference.com/w/cpp/container/set" rel="nofollow noreferrer"><code>std::set</code></a>. You don't have to add all the functionality of an STL container right away, just first consider renaming some of your member functions to match that of the STL. For example, instead of <code>add()</code> and <code>destroy()</code>, use <code>insert()</code> and <code>erase()</code>. Instead of <code>get_size()</code>, use <code>size()</code>.</p>

<p>There are several benefits to this. First, for someone who is already familiar with other STL containers, it makes working with your <code>Tree</code> more intuitive. But that's not all: if you make it look enough like an STL container, then some of the <a href="https://en.cppreference.com/w/cpp/algorithm" rel="nofollow noreferrer">STL algorithms</a> might actually start to work on your <code>Tree</code> as well!</p>

<h1>Move printing out of <code>class Tree</code></h1>

<p>Instead of having a <code>print_sub()</code> function that only prints to <code>std::cout</code>, consider writing instead a function that walks the tree and takes a function as one of its argument, so that it allows the caller to decide what to do with each visited node. For example:</p>

<pre><code>template&lt;typename T&gt;
void Tree&lt;T&gt;::visit_subtree(const Node&lt;T&gt; *p, std::function&lt;void(const T&amp;)&gt; func)
{
    if (p)
    {
        visit_subtree(p-&gt;pLeft, func);
        func(p-&gt;val);
        visit_subtree(p-&gt;pRight, func);
    }
}

template&lt;typename T&gt;
void Tree&lt;T&gt;::visit(std::function&lt;void(const T&amp;)&gt; func)
{
    return visit_subtree(root, func);
}
</code></pre>

<p>Then you could call it like:</p>

<pre><code>Tree&lt;Test&gt; test;
...
test.visit([](Test &amp;val){std::cout &lt;&lt; val &lt;&lt; '\n';});
</code></pre>

<p>The advantage is that you can call it with any other function you like, so if you wanted to print it to <code>std::cerr</code> instead, or if you wanted to do something completely different with each element of the tree, you don't have to change your <code>Tree</code>'s <code>visit()</code> function.</p>

<p>However, another approach is:</p>

<h1>Implement iterators for your <code>Tree</code></h1>

<p>Try to implement an iterator class for your <code>Tree</code>, and provide <code>begin()</code> and <code>end()</code> member functions that return the appropriate iterators, to allow someone to loop over all the elements of the tree with a simple <code>for</code>-statement, like:</p>

<pre><code>Tree&lt;Test&gt; test;
...
for (const auto &amp;val: test)
    std::cout &lt;&lt; val &lt;&lt; '\n';
</code></pre>

<p>Read <a href="https://stackoverflow.com/questions/8054273/how-to-implement-an-stl-style-iterator-and-avoid-common-pitfalls">this question</a> for some good references on how to implement an iterator yourself. It is a bit of work, but it makes using your class much easier. Once you have it, you also get many things for free. For example, instead of having to write your own <code>minValue()</code> function, once you have iterators you can just use <a href="https://en.cppreference.com/w/cpp/algorithm/min_element" rel="nofollow noreferrer"><code>std::min_element</code></a> on an instance of a <code>Tree</code> class to get the smallest element.</p>

<h1>Fix the memory leak in the destructor</h1>

<p>Your destructor only deletes the <code>root</code> node, not any of its children.</p>

<h1>Use <code>const</code> where appropriate</h1>

<p>You should make arguments, variables, return values and whole member functions <code>const</code> whereever appropriate. For example, <code>countNodes()</code> does not modify the <code>Node&lt;T&gt;</code> that you give a pointer to as an argument, and it also doesn't change anything in <code>class Tree</code> itself. Therefore, you should declare it as:</p>

<pre><code>int countNodes(const Node&lt;T&gt; *p) const;
</code></pre>

<p>The same goes for many other functions. Apart from catching potential errors and helping the compiler produce better optimized code, doing this will also allow these member functions to be called on <code>const</code> instances of <code>class Tree</code>.</p>
    </div>