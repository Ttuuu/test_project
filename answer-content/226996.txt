<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Version 1 wins hands down.</p>

<p>Because, as you say yourself, go isn't an OO language, you kind of have to treat your entry point (e.g. <code>main</code> func) as your injection point. The main function loads up the global config (usually from flags and/or environment variables), and then passes them on the the various components you'll use (or packages if you like).</p>

<p>Go is a great language to write tests in quickly. If I see code like the second snippet:</p>

<pre><code>func Start() {
    c := config.New()
    // do stuff with c
}
</code></pre>

<p>I will rewrite it. The config value is created in that function, so it's safe to assume that this function will need to check the config values. How am I going to reliably unit-test the package, if I can't pass in all possible combinations of config?</p>

<p>Sure, I could write a ton of code setting/unsetting environment variables, and call this <code>Start</code> function over and over again, but am I really <em>unit</em>-testing the code then? Surely, if the config package is broken, then all other tests become unreliable to say the least. What about a change to the config package? How awful it'd be to rewrite all the tests just to make sure the changes to the config are reflected there, too? It's going to be a PITA, and an enormous waste of time and resources.</p>

<p>PS: code like <code>config.NewConfig()</code> will also get rewritten by a lot of gophers. This is referred to as <em>stuttering</em> code (read <a href="https://blog.golang.org/package-names" rel="nofollow noreferrer">this</a>).</p>

<p>I now I'm getting config, because I'm using the <code>config</code> package. The function name <code>New</code> is enough information, surely. <code>config.NewConfig</code> reads like <em>"from config, get me new config"</em> as opposed to <em>"hey, config, give me a new value"</em>.<br>
This might be personal preference, but I generally find it better to use the function <code>Get</code> for config, rather than <code>New</code>. Config is, IMO, an immutable set of data, not something that <em>does</em> something, not something that needs <em>constructing</em>, it needs to be fetched/loaded. For that reason, I'd write <code>config.Get()</code> and that func would looks something like this:</p>

<pre><code>package config

// Conf - global config struct
type Conf struct {
    App // config per package
}

// App - config specific to the App package
type App struct {
    Locale string
}

func Get() (*Conf, error) {
    // get values, return...
}
</code></pre>
    </div>