<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation is not bad for a no-LinQ solution. But there's always room for improvement. First I'll provide a LinQ solution that provides a clean way to return a chunked list:</p>

<pre><code>public static List&lt;List&lt;T&gt;&gt; Split&lt;T&gt;(List&lt;T&gt; collection, int size)
{
    var chunks = new List&lt;List&lt;T&gt;&gt;();
    var chunkCount = collection.Count() / size;

    if (collection.Count % size &gt; 0)
        chunkCount++;

    for (var i = 0; i &lt; chunkCount; i++)
        chunks.Add(collection.Skip(i * size).Take(size).ToList());

    return chunks;
}
</code></pre>

<p>Basically it comes down to this:</p>

<ul>
<li>calculate the count of chunks that are needed</li>
<li>loop over the length of chunks</li>
<li>use the <a href="https://msdn.microsoft.com/en-us/library/vstudio/bb358985(v=vs.100).aspx" rel="noreferrer"><strong>Enumerable.Skip</strong></a> and <a href="https://msdn.microsoft.com/en-us/library/vstudio/bb503062(v=vs.100).aspx" rel="noreferrer"><strong>Enumerable.Take</strong></a> methods to get chunks</li>
<li>return the list of chunks</li>
</ul>

<p>Now, you implemented a no-LinQ solution so I created one myself too. My implementation doesn't have to calculate the amount of chunks or use two loops to create the list of chunks:</p>

<pre><code>public static List&lt;List&lt;T&gt;&gt; SplitNoLinq&lt;T&gt;(List&lt;T&gt; collection, int size)
{
    var chunks = new List&lt;List&lt;T&gt;&gt;();
    var count = 0;
    var temp = new List&lt;T&gt;();

    foreach (var element in collection)
    {
        if (count++ == size)
        {
            chunks.Add(temp);
            temp = new List&lt;T&gt;();
            count = 1;
        }
        temp.Add(element);
    }

    chunks.Add(temp);  
    return chunks;
}
</code></pre>

<p>The code iterates over the collection and keeps a counter, adding the iterated item to a temporary list. If the counter equals the desired length of a chunk it will add the temporary list to the return list. At the end, the last chunk is added.</p>

<hr>

<p><strong>The <code>var</code> keyword:</strong></p>

<p>From the <a href="https://msdn.microsoft.com/en-us/library/bb384061.aspx" rel="noreferrer"><strong>C# Programming Guide</strong></a>:</p>

<blockquote>
  <p>The var keyword can also be useful when the specific type of the variable is tedious to type on the keyboard, or is obvious, or does not add to the readability of the code.</p>
</blockquote>

<p>So lines like:</p>

<pre><code>List&lt;List&lt;T&gt;&gt; splitChunks = new List&lt;List&lt;T&gt;&gt;();
</code></pre>

<p>would become:</p>

<pre><code>var splitChunks = new List&lt;List&lt;T&gt;&gt;();
</code></pre>

<hr>

<p>Furthermore you could place the code in an extension method, also using an <code>IEnumerable&lt;T&gt;</code> instead of <code>List&lt;T&gt;</code>:</p>

<pre><code>public static class Extensions
{
    public static List&lt;List&lt;T&gt;&gt; Split&lt;T&gt;(this IEnumerable&lt;T&gt; collection, int size)
    {
        var chunks = new List&lt;List&lt;T&gt;&gt;();
        var count = 0;
        var temp = new List&lt;T&gt;();

        foreach (var element in collection)
        {
            if (count++ == size)
            {
                chunks.Add(temp);
                temp = new List&lt;T&gt;();
                count = 1;
            }
            temp.Add(element);
        }
        chunks.Add(temp);

        return chunks;
    }
}

//USAGE::
var numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
var chunked = numbers.Split(5);
</code></pre>
    </div>