<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Do I have any memory leaks?</li>
</ol>

<pre><code>No
</code></pre>

<ol start="2">
<li>Why is it if I stick debounceTime(1) inside the lineItem valueChanges then this stops working where the calculation is out by the last change?</li>
</ol>

<blockquote>
  <p>Beacuse debounceTime(1) delays the response by 1ms inside the lineItem
  and <code>this.linesChange.emit(value['lines']);</code>  is already run with old
  total</p>
</blockquote>

<p>The implementation below will sort your problems.</p>

<pre><code>  getLineFormGroup(): FormGroup {
    let lineItem = this.fb.group({
      quantity: new FormControl(),
      rate: new FormControl(),
      total: new FormControl()
    });
    lineItem.valueChanges.pipe(
      takeUntil(this.destroyed$),
      debounceTime(20)
    ).subscribe(value =&gt; 
      { 
        console.log("should be called first")
        this.calcTotal(lineItem)

        if (!this.formGroup.valid) {
          return;
        }
        this.linesChange.emit(this.formGroup.value['lines']);
      }
    )
    return lineItem
}
</code></pre>

<ol start="3">
<li>Why is it if I remove the {emitEvent: false} and put in a debounceTime as above the total stops working altogether?</li>
</ol>

<blockquote>
  <p>The lineItem.valueChanges observable will fire in a circular fashion
  when you remove this {emitEvent: false}.
  line.controls['total'].setValue() will fire lineItem.valueChanges
  again. Which in-turn crashes the app and stop.</p>
</blockquote>

<ol start="4">
<li>Should i be using some other way like combineLatest? If so how do I collect the valueChanges observables (I'll figure it out from here if this is required)?</li>
</ol>

<blockquote>
  <p>I would suggest not required</p>
</blockquote>
    </div>