<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Character distribution</h2>
<p>You randomly choose between uppercase, lowercase and digit characters with an equal probability, but there are more letters than digit characters. That means characters will be under-represented in your password's probability distribution. Easier and more accurate is to make one string of all eligible characters and choose from it randomly.</p>
<h2>Redundant str</h2>
<p>No need for <code>str</code> here:</p>
<pre><code>str(random.choice(ascii_letters.upper())) 
</code></pre>
<h2>Move your increment</h2>
<pre><code>counter += 1
</code></pre>
<p>should not be repeated three times in <code>if</code> statements. You can do it once at the end of the loop. Better yet,</p>
<pre><code>for _ in range(userchoice_size):
</code></pre>
<h2>Choice list</h2>
<p>This:</p>
<pre><code>choice_list=[1,2,3]
choice_number = random.choice(choice_list)
</code></pre>
<p>should not use a list, and should be replaced with a call to <code>randrange</code>.</p>
<h2>Secure entropy</h2>
<p>For password generation it's crucially important to use a secure source of entropy. Read this quote carefully:</p>
<blockquote>
<p>Python uses the Mersenne Twister as the core generator. It produces 53-bit precision floats and has a period of 2**19937-1. The underlying implementation in C is both fast and threadsafe. The Mersenne Twister is one of the most extensively tested random number generators in existence. However, being completely deterministic, it is not suitable for all purposes, and is <strong>completely unsuitable for cryptographic purposes</strong>.</p>
</blockquote>
<p>Emphasis mine. A better built-in option is <a href="https://docs.python.org/3/library/secrets.html#module-secrets" rel="nofollow noreferrer">secrets</a>.</p>
    </div>