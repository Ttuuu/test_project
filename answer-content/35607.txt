<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Chris has given a great answer on the hashing so here are some comments on the implementation.</p>

<p>My main observation is that you should avoid duplicating so much code, however you implement it.</p>

<p>Your <code>hash</code> function should return the absolute (unsigned) value of the hash,
as each use of <code>hash</code> is followed by an <code>if</code>:</p>

<pre><code>int hashKey = hash(hash_a, hash_b, prime, size, *elem);
if (hashKey &lt; 0)
     hashKey = - hashKey;
</code></pre>

<p>And perhaps modify the return type to that expected of vector indices (and
noting that the parameters don't seem to need to be <code>long long</code>):</p>

<pre><code>typedef std::vector&lt;int&gt;::size_type Hashkey;

static Hashkey hash(int a, int b, int p, int size, int key)
{
    return (Hashkey) abs((((a * key + b) % p) % size));
}
</code></pre>

<p>Also on types, where you have a defined range for a variable, the types in
<code>stdint.h</code> can be useful - eg <code>int64_t</code> is guaranteed to be 64 bits which
suits your input range while your <code>long long int</code> might be longer (also the
<code>int</code> is usually omitted, ie. just <code>long long</code>).</p>

<p>Your use of <code>flag</code> to continue the outer loop in <code>Bucket::Construct</code> is very
strange.  I'd prefer to see the inner loop extracted to a function which
should use a <code>for</code> loop:</p>

<pre><code>for (auto e = input.begin(); e != input.end(); ++e) {
    ...
    if (cells[hashKey] != max_int) {
        return false;
    }
    ...
}
return true;
</code></pre>

<p>and called, as in:</p>

<pre><code>while (createHashTable(...) == false) {
    // nothing
}
</code></pre>

<p>I don't understand why you (and many other people posting here) use leading
underscores on variable names.  For me these are just noise and detract from
otherwise nice looking code (for example, your <code>_cells</code>).  Also on variable
names, some of your names are too long.  Where the scope of a variable is
small, its name can (and I think should) also be small.</p>

<p>Finally, your prime numbers (17 and 100013) would be better not embedded in
the code (perhaps use a <code>#define</code> or <code>const</code> at the top).  Also a comment on
how these numbers were determined would be useful (and the origin of the hash
function?).</p>
    </div>