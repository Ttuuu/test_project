<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Avoid magic numbers, especially if they, like <code>26</code> in your code, are used repeatedly. Along the same line, keep in mind that the code only works in the "C" locale. Other locales may have alphabets of different size.</p></li>
<li><p>Prefer to declare variables as close to use as possible, e.g.</p>

<pre><code>    for (size_t i = 0; i &lt; l1; ++i) {
        int index1 = s1[i] - 'a';
        int index2 = s2[i] - 'a';
        ....
</code></pre></li>
<li><p>If the string contains non-lowercase characters, the code would do an out-of-bound access. You should ensure <code>islower(s[i])</code> prior to computing indices, and ask the interviewer about what are the guarantees.</p></li>
<li><p>An opportunistic <code>if (l1 != l2) return 0;</code> is not an optimization. It still require a linear time to compute the lengths.</p></li>
<li><p>Along the same line, length computation is not necessary. An idiomatic C approach is to us pointers:</p>

<pre><code>while ((ch = *s++) != 0)
</code></pre></li>
<li><p>The bullets above suggest splitting the loop into two:</p>

<pre><code>while ((ch = *s1++) != 0) {
    if (islower(ch)) {
        alphabet[ch - 'a']++;
    }
}

while ((ch = *s2++) != 0) {
    if (islower(ch)) {
        alphabet[ch - 'a']--;
    }
}
</code></pre></li>
<li><p>Now, a DRY principle require factoring this loops into a function:</p>

<pre><code>static void count_frequencies(char * s, int * alphabet, int addend) {
    while ((ch = *s++) != 0) {
        if (islower(ch)) {
            alphabet[ch - 'a'] += addend;
        }
    }
}

....
    count_frequencies(s1, alphabet, 1);
    count_frequencies(s2, alphabet, -1);
</code></pre>

<p>As a perk benefit, see how the <code>/* count the frequencies of characters */</code> disappears.</p></li>
<li><p>For a <em>very</em> long string the integer in <code>alphabet</code> may overflow. Could be a nitpick, but could also be a failure, depending on the interviewer.</p></li>
</ul>
    </div>