<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After reading the other answers that speak in depth on the theory and big O, I thought I would script up my interpretation.</p>
<p>Code: (<a href="https://3v4l.org/FiXKa" rel="nofollow noreferrer">Demo with echoed variables to show values and processes</a>)</p>
<pre><code>function roll() {
    return rand(1, 6) + rand(1, 6);
}

$roller1 = [];
$roller2 = [];
$totalRolls = 1;

for ($i = 0; $i &lt; $totalRolls; ++$i) {
    $roller1[] = roll();
    $roller2[] = roll();
}

$map = array_count_values($roller1);
    
$outcome = 'Lucky';
foreach ($roller2 as $roll) {
    if (!empty($map[$roll])) {
        --$map[$roll];
    } else {
        $outcome = 'Unlucky';
        break;
    }
}

echo $outcome;
</code></pre>
<p>After the formation of the two arrays, php offers a simple function call to create the map of roll values and the number of instances of each value -- <code>array_count_values()</code>.  This action is only necessary on the first array.</p>
<p>The second array is then iterated and each value is checked against the map.  If the given value is not a key in the map or it is has a falsey (<code>0</code>) value at the key, then there is a mismatch between <code>$roller1</code> and <code>$roller2</code> -- the outcome is <code>Unlucky</code> and the loop is sensibly broken/halted.  As matches are found between the map and the second array, the encountered map keys have their respective value decremented (spent) to enable the correct action with <code>empty()</code>.</p>
<p>As @MikeBrant said:</p>
<blockquote>
<p>This provides an <code>O(2n)</code> worst-case operational complexity, where n is the size of the arrays.</p>
</blockquote>
<p>the worse-case scenario is the only way to achieve the <code>Lucky</code> outcome.</p>
<p>A best-case operational complexity (<code>Unlucky</code> outcome) where the map is generated (<code>n</code>) and the loop breaks on the first element in the second array (<code>1</code>) ...<code>o(n+1)</code>.</p>
<p>As for speed, I don't know.  I didn't benchmark this script against the double-sort&amp;compare technique, but you will notice that my technique is calling <code>array_count_values()</code> and will make iterated <code>empty()</code> calls and every function call equates to some level of a performance hit (even if miniscule).</p>
    </div>