<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things, I'll expand on this over time. First, always write method and variable names in <strong>lowerCamelCase</strong>. Everything starting with an uppercase letter wil be considered a class or a constant by other programmers.</p>

<p>Then, don't use mechanically getters and setters. E.g. consider</p>

<pre><code>public class Model {

    private String mName;

    public void setName(String mName) {

        this.mName = mName;
    }

    public String getName() {
        return mName;
    }

}
</code></pre>

<p>Do you ever change the name of a <code>Model</code> afterwards? No? Is it okay to have a <code>Model</code> without name? No? Then a correct implementation is:</p>

<pre><code>public class Model {

    private final String mName;

    public Model(String mName) {
        this.mName = mName;
    }

    public String getName() {
        return mName;
    }

}
</code></pre>

<p>You could opt for implementing <code>toString</code> instead of <code>getName</code>, or even for making the member variable public (because it's final, and <code>String</code> is immutable). </p>

<p><strong>[Some Random Thoughts]</strong></p>

<p>Try to simplify logical expressions as much as possible:</p>

<pre><code>if (temp == 1) {
   return false;
} else {
   return true;
}
</code></pre>

<p>is the same as simply <code>return temp != 1;</code>.</p>

<p>Use API functions where possible. E.g. there is <code>java.util.Collections.shuffle</code> for <code>List</code>s.</p>

<p>What is with the empty {} in <code>casesSetup</code> and <code>showCases</code>?</p>

<p><strong>[Suggestion]</strong></p>

<pre><code>public class Banker {

    private double total = 0;
    private int a = 0;
    private double amount =0;
    double average = 0;

    public void setOffer(int turn, Briefcase[] cases, double myAmount) {

        for (int i = 0; i &lt; cases.length; i++) {
            if (! cases[i].isRemoved()) {
                total += cases[i].getAmount();
                a++;
            }
        }
        average = myAmount + total / a;
        amount = average*turn/ 10;
    }

    public double getOffer(int turn, Briefcase[] cases, double myAmount) {
        setOffer(turn, cases, myAmount);
        System.out.printf("\tThe Bankers Offer is: %.2f \n\n", amount);
        return amount;
    }
}
</code></pre>

<p>.</p>

<pre><code>public class Briefcase {
    private final double amount;
    private final String model;
    private boolean removed = false;
    private String face;

    public Briefcase(double amount, int face, String model) {
        this.face = Integer.toString(face);
        this.amount = amount;
        this.model = model;
    }

    public double getAmount() {
        return amount;
    }

    @Override
    public String toString() {
        return face;
    }

    public String getModel() {
        return model;
    }

    public void remove() {
        removed = true;
        face = "X";
    }

    public boolean isRemoved() {
        return removed;
    }
}
</code></pre>

<p>.</p>

<pre><code>import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Game {
    private Player player = new Player();
    private Banker banker = new Banker();
    private int a = 0;
    private int b = 6;
    private double myAmount = 0;
    private double offer = 0;
    private int turn = 1;
    private int cases = 26;
    private Briefcase briefcases[];

    public void casesSetup() {
        String[] modelNames = {"Michelle", "Obama", "Rosey", "Miney",
            "Ashley", "Maria", "Ozawa", "Audrey", "Kristen", "Kim",
            "Kardashian", "Kourtney", "Ann", "Macy", "Tori", "Sam", "Monica",
            "Jin", "Koi", "jill", "Usher", "Justin Bieber", "Lindsay Lohan",
            "Hazell", "Buttercup", "Don Amalia", "Kojic!"};

        List&lt;Integer&gt; amounts = Arrays.asList(1, 5, 10, 25, 50, 75, 100,
        200, 300, 400, 500, 750, 1000, 5000, 10000, 25000, 50000, 75000,
        100000, 300000, 400000, 500000, 750000, 1000000, 250000, 800);

        Collections.shuffle(amounts);

        briefcases = new Briefcase[amounts.size()];

        for (int i = 0; i &lt; briefcases.length; i++) {
            double value = amounts.get(i);
            briefcases[i] = new Briefcase(value, i + 1, modelNames[i]);
        }
    }

    public void showCases() {
        for (int i = 0; i &lt; briefcases.length; i++) {
            System.out.print("\t[" + briefcases[i] + "]");
            if (i % 5 == 4) {
                System.out.println();
            }
        }
        System.out.println();
    }

    public void welcomeMessage() {
        System.out.println("\t~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*");
        System.out.println("\t~*               Welcome !          ~*");
        System.out.println("\t~*~*~*~*~* Hosted by Kyel David ~*~*~*~*~*~*");
        System.out.println("\t~* Please Select from the Following Cases!~*");
        System.out.println("\t~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*");
    }

    public void startGame() {

        boolean gamestatus = true;
        casesSetup();
        welcomeMessage();
        showCases();

        int choice = player.nUser();
        myAmount = briefcases[choice].getAmount();
        briefcases[choice].remove();
        cases--;

        while (gamestatus == true) {
            showCases();
            if (cases == 25 || cases == 19 || cases == 14 || cases == 10
                    || cases == 7) {
                for (a = b; a &gt; 0; a--) {
                    player.remove(a, briefcases);
                    cases--;
                }
                b--;
                turn++;
                banker.setOffer(turn, briefcases, myAmount);
                offer = banker.getOffer(turn, briefcases, myAmount);
                gamestatus = player.gamestatus();
            } else if (cases == 1) {
                player.remove(1, briefcases);
                gamestatus = false;
            } else {
                player.remove(1, briefcases);
                cases--;
                banker.setOffer(turn, briefcases, myAmount);
                offer = banker.getOffer(turn, briefcases, myAmount);
                gamestatus = player.gamestatus();
            }
        }
        finishgame();
    }

    public void finishgame() {
        if (cases == 1) {
            System.out.println("\tYou Rejected the Offer of Banker");
            System.out.printf("\tYour case contains $%.2f and the bankers offer is $%.2f\n",
                    myAmount, offer);
            System.out.printf("\tYou've won your case with an amount of: %.2f",
                    myAmount);
        } else {
            System.out.println("\tYou Accepted the offer of Banker");
            System.out.printf("\tYour case contains $%.2f and the bankers offer is $%.2f\n",
                    myAmount, offer);
            System.out.printf("\tYou've won the offer of Banker: $%.2f", offer);
        }
    }
}
</code></pre>

<p>.</p>

<pre><code>public class Play {

    public static void main(String[] args) {
        Game dnd = new Game();
        dnd.startGame();
    }
}
</code></pre>

<p>.</p>

<pre><code>import java.util.Scanner;

public class Player {

    Scanner input = new Scanner(System.in);
    Banker banker = new Banker();

    public boolean gamestatus() {
        System.out.print("\tAccept or Reject! [1]Accept [2]Reject: ");
        int temp = input.nextInt();
        System.out.println();
        return temp != 1;
    }

    public int nUser() {
        while (true) {
            System.out.print("\n\tPlease Select Your Case!: ");
            int nUser = input.nextInt() - 1;
            if (nUser &lt; 0 || nUser &gt;= 26) {
                System.out.println("\tInvalid input Try again");
            } else {
                return nUser;
            }
        }
    }

    public int remove(int index, Briefcase[] briefCases) {
        while (true) {
            System.out.print("\tPlease remove " + index + " case/s: "); 
            int nChoice = input.nextInt() - 1;
            if (nChoice &lt; 0 || nChoice &gt;= briefCases.length || briefCases[nChoice].isRemoved()) {
                System.out.println();
                System.out.println("\tInvalid Input please Try again\n");
            } else {
                System.out.println("\tI'm " + briefCases[nChoice].getModel()
                        + ". You just removed case # " + (nChoice+1));
                System.out.println("\t|" + nChoice + "| contains $"
                        + briefCases[nChoice].getAmount() + "\n");
                briefCases[nChoice].remove();
                return nChoice;
            }
        }
    }
}
</code></pre>

<p><code>Model</code> is gone. <code>Briefcase</code> is more useful, especially you don't have to use null values to encode a removed briefcase. I changed the alignment of briefcase, so there is no more dummy value. Then I tried to simplify everything a little bit. </p>

<p>This is far from perfect, there is still room for improvements.</p>
    </div>