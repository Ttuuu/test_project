<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>apart from TrebledJ's excellent review of the functional improvements of your code, here some general Python improvements</p>

<h1>get_words</h1>

<p>There is no need for this function to return a list. The rets of your code only cares that it gets an iterable, so you might as well return the set.
You can also avoid the lambda expression by doing <code>map(str.strip, word_file)</code>
You can also incorporate the <code>isalpha</code> check here. Better to filter as soon as possible</p>

<p>This way this function can be reduced to:</p>

<pre><code>def get_words(word_len):
    # Open the file with all the words in the English language.
    with open("words.txt") as word_file:
        # Get all the words without any newlines.
        return {
            word.lower()
            for word in map(str.strip, word_file)
            if len(word) == word_len and word.isalpha()
        }
</code></pre>

<h1>get_statistics</h1>

<p>Here you:</p>

<ul>
<li>glue all the wordt together to one long string</li>
<li>get a sorted list of letters that you </li>
<li>get the unique letters</li>
<li>ask for each of these letters the count in the long string</li>
</ul>

<p>This is very inefficient. There is no reason for the sorting, or the <code>characters_in_words</code>. </p>

<p>Also remember Python is <em>batteries-included</em>. <code>itertools.chain</code> and <code>collections.Counter</code> do all you need from this function</p>

<pre><code>from itertools import chain
from collections import Counter
def get_statistics(possible_words) -&gt; Counter:
    return Counter(chain.from_iterable(possible_words))
</code></pre>

<h1>get_likeliest_letter</h1>

<p>´collections.Counter´ also contains a <code>most_common</code> method that simplifies the ´get_likeliest_letter´</p>

<pre><code>def get_likeliest_letter(stats: Counter):
    likeliest_letter, count = stats.most_common(1)[0]
    likelihood = count / sum(stats.values()) * 100.0
    return likeliest_letter, likelihood
</code></pre>

<h1>get_possible_words</h1>

<p>In each call to <code>get_possible_words</code>, you read all the words in <code>words.txt</code>. Since you can assume they don't change bewteen different tries, you can cache this, and pass it in the function as argument</p>

<p>There is also no need for the <code>len(guesses) == 0</code>. Just <code>guesses</code> as codition suffices. If it's an empty string, it is counted as <code>False</code></p>

<p>Instead of the intermediary <code>possible_matches</code>, you can just return the list of words where <code>current_word_regex.match(word)</code> retuns a <code>match</code> object instead of <code>None</code> (which evaluates to <code>False</code>)</p>

<pre><code>def get_possible_words(guesses, current_word, all_words):
    substitute = '.' if guesses else f"[^{guesses}]"
    # Make the current_word a regex phrase.
    current_word_regex = re.compile(current_word.replace('_', substitute))
    return [word for words in all_words if current_word_regex.match(word)]
</code></pre>
    </div>