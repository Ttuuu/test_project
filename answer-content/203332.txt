<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, this is really well done. You've missed the usual traps of using magic numbers, not creating structures for related items, and other common things. So nice work! I think it could be improved with the following changes.</p>

<h1>Types vs. Variables</h1>

<p>You've created a type for <code>Location</code> which is great. Looking at the types for <code>Player</code>, <code>Trap</code>, <code>Bandit</code>, and <code>Treasure</code>, they're identical, except that <code>Player</code> has a <code>name</code> string, which is never used anywhere in the code. Given that, it makes sense to me to make a type something like <code>GameEntity</code>, and create variables for the player, traps, bandits, and treasures. Something like this:</p>

<pre><code>struct GameEntity {
    Location position;
    char symbol;
};
</code></pre>

<p>In main, you'd create the variables like so:</p>

<pre><code>int main() {
    std::srand(std::time(0));

    GameEntity treasure = {
        { std::rand() % board.xDimension,
          std::rand() % board.yDimension},
        TREASURESYMBOL
    };

    GameEntity trapsInMap[NUMBEROFTRAPS];
    setEntityPositions(trapsInMap, NUMBEROFTRAPS, TRAPSYMBOL);

    GameEntity banditsInMap[NUMBEROFBANDITS];
    setEntityPositions(banditsInMap, NUMBEROFBANDITS, BANDITSYMBOL);

    GameEntity alvaro;
    setPlayerPosition(alvaro, PLAYERSYMBOL);
</code></pre>

<p>The function <code>setEntityPositions()</code> would just iterate over the array and set the position to a random position and the symbolÂ to the passed-in symbol for each entity in the array. (And of course, you'll need to define <code>TRAPSYMBOL</code>, <code>BANDITSYMBOL</code>, <code>PLAYERSYMBOL</code>, and <code>TREASURESYMBOL</code> appropriately.)</p>

<h1>Looping Improvements</h1>

<p>I don't like the loop you have in <code>main()</code>. It posits that there is some maximum number of turns after which the game is done. But that's not the case. The game is done when the player falls into a trap, is robbed by a bandit, or finds the treasure. Additionally, the code that does stop the game is way down in a different function making it difficult for someone reading the code to figure out the ending condition.</p>

<p>What I would do is have <code>drawBoard()</code> return either <code>VICTORY</code>, <code>DEFEAT</code>, or <code>CONTINUE</code>. If it returns <code>VICTORY</code> or <code>DEFEAT</code> call <code>endGame()</code>. I would not have <code>endGame()</code> call <code>exit()</code>. Instead, after it returned, I would exit the loop. So <code>main()</code> would continue (from what I have above) like this:</p>

<pre><code>    int gameCondition = drawBoard(alvaro, trapsInMap, banditsInMap, treasure);
    do {
        Direction direction;
        do {
            direction = askDirection();
            std::cout &lt;&lt; std::endl;
        } while (direction == WRONG_DIRECTION);
        movePlayer(alvaro, direction);
        for (int i = 0; i &lt; NUMBEROFBANDITS; i++) {
            moveBandit(banditsInMap[i]);
        }
        clearScreenAndMoveToHome();
        gameCondition = drawBoard(alvaro, trapsInMap, banditsInMap, treasure);
    } while (gameCondition == CONTINUE);
    endGame (gameCondition);
}
</code></pre>

<h1>Document Obscure Behavior</h1>

<p>You'll notice that I introduced a new function called from <code>main()</code> named <code>clearScreenAndMoveToHome()</code>. This is because this line is incomprehensible:</p>

<pre><code>std::cout &lt;&lt; "\x1B[2J\x1B[H";
</code></pre>

<p>I don't do a lot of console-based programs, so I had no idea what this was. When I run it in my debugger, it outputs:</p>

<blockquote>
  <p>[2J[H...........</p>
  
  <p>.........T[2J[H</p>
</blockquote>

<p>When I run it in a terminal, it clears the screen sets the cursor to the upper left. By putting it into a function, you show clearly what it does. Furthermore, you can call it elsewhere and know you have the right string. When I run the app, it doesn't clear before drawing the board the first time. I would move the function call into <code>drawBoard()</code>.</p>

<h1>Use More Functions</h1>

<p>You've done a really good job breaking this into functions, but I think you could do even more. In <code>drawBoard()</code>, checking the current square against traps and bandits is essentially the same code. I would write it as something like this:</p>

<pre><code>for (int y...) {
    for (int x... {
        bool squareDrawn = checkSquareAgainstEntity(x, y, totalTraps, NUMBEROFTRAPS);

        if (!squareDrawn) {
            squareDrawn = checkSquareAgainstEntity(x, y, totalBandits, NUMBEROFBANDITS);
        }
        // ... etc.
    }
}
</code></pre>

<p>Then the <code>checkSquareAgainstEntity()</code> function would iterate over the passed in array:</p>

<pre><code>bool checkSquareAgainstEntity(int x, int y, GameEntity* entities, int numEntities)
{
    bool result = false;
    for (int z = 0; (z &lt; numEntities) &amp;&amp; (!result); z++ {
        GameEntity nextEntity = entities [ z ];
        if (nextEntity.position.xPosition == x &amp;&amp;
            nextEntity.position.yPosition == y) {
            std::cout &lt;&lt; nextEntity.symbol;
            result = true;
        }
    }
    return result;
}
</code></pre>
    </div>