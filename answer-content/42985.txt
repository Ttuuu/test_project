<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Reversing a string, accurately and efficiently. </p>

<p>You are doing it accurately, yes. But, not very efficiently (although there are worse ways to do things).</p>

<p><strong>NOTE::</strong> Palacsint is right that you are not handling null input and surrogate-pairs in the input data. Your solution is not completely accurate. Consider this answer a discussion of the efficiency only.... though I have also updated this answer to include a solution which deals with surrogate pairs efficiently</p>

<p>To understand the efficiency side of things, you have to understand Java String internals.</p>

<ul>
<li>Strings are immutable, cannot be changed.</li>
<li>Java is relatively slow at allocating/cleaning memory, try to avoid it.</li>
<li>Java can 'inline' method calls and make methods really fast.</li>
</ul>

<p>So, the best way to make Java efficient is to create/use as little memory as possible, and still end up with a new String (instead of changing an existing string).</p>

<p>Your code has 1 string already, you are creating another string. You cannot avoid that.</p>

<p>What you can avoid though is what happens in between.</p>

<h2>Your 'In Between'</h2>

<p>What you are doing in between is a bit messy, and wasteful:</p>

<blockquote>
<pre><code>    char[] array = new char[s.length()];
    array = s.toCharArray();
</code></pre>
</blockquote>

<p>You create a new array, then you throw it away, and replace it with the <code>s.toCharArray()</code>... why?</p>

<p>Could be just:</p>

<pre><code>    char[] array = s.toCharArray();
</code></pre>

<p>Also, you have a loop that swaps the chars... this is implemented like:</p>

<blockquote>
<pre><code>for(int i=0; i&lt;array.length/2; i++) {
</code></pre>
</blockquote>

<p>This could be faster if you did it backwards ( <em>could be</em> - depending on which Java you use).</p>

<pre><code>for (int i = array.length / 2; i &gt;= 0; i--) {
</code></pre>

<p>This way it only has to do the <code>array.length / 2</code> one time (though, as I say, some Java implementations will perhaps compile it to work out for you).</p>

<p>Finally, the <code>charArrayToString()</code> is serious overkill....</p>

<p>Converting to a StringBuilder then to a String is a waste of time/resources...</p>

<blockquote>
<pre><code>return charArrayToString(array);
</code></pre>
</blockquote>

<p>can be</p>

<pre><code>return new String(array);
</code></pre>

<p>EDIT: Also, as has been mentioned by <a href="https://codereview.stackexchange.com/a/42983/31503">Richard Miskin</a>... and I <em>assumed</em> you were already using a <code>StringBuilder</code> .... StringBuilder is much more efficient in a single-thread situation than <code>StringBuffer</code>. Unless you have good reason, you always should use <code>StringBuilder</code>.</p>

<h2>Efficient in-between ....</h2>

<pre><code>public String reverse(String s) {
    char[] array = s.toCharArray();
    char tmp;
    for(int i = (array.length - 1) / 2; i &gt;= 0; i--) {
        tmp = array[i];
        array[i] = array[array.length-1-i];
        array[array.length-1-i] = tmp;
    }
    return new String(array);
}
</code></pre>

<h2>Edit: a different way:</h2>

<p>Here are some performance numbers...</p>

<blockquote>
<pre><code>String Reverse                           =&gt; 4473870 (hot 19.74881ms)
String Reverse Surrogate Aware           =&gt; 4473870 (hot 22.73488ms)
String Reverse B                         =&gt; 4473870 (hot 25.16192ms)
String Reverse StringBuilder             =&gt; 4473870 (hot 31.60709ms)
String Reverse StringBuilder NoNullCheck =&gt; 4473870 (hot 31.72952ms)
String Reverse Orig                      =&gt; 4473870 (hot 36.83827ms)
</code></pre>
</blockquote>

<p>For each of those 'hot' runs, I am reversing the order of 479829 words (linux.words) (and there are 4473870 characters in the data excluding newlines).</p>

<ul>
<li><p>the code I suggested above as the 'efficient in-between' does it in 20 milliseconds</p></li>
<li><p>based on the discussion about <code>null</code> and Surrogate Pairs, the following code does this 'right', and runs in 23 milliseconds:</p>

<pre><code>public String reverse(final String s) {
    if (s == null) {
        return null;
    }
    final char[] array = s.toCharArray();
    char tmp;
    for(int i=array.length/2; i &gt;= 0; i--) {
        tmp = array[i];
        array[i] = array[array.length-1-i];
        array[array.length-1-i] = tmp;
    }
    //surrogate pairs will have been swapped.
    //identify, and un-swap them.
    for (int i = 1; i &lt; array.length; i++) {
        if (Character.isHighSurrogate(array[i]) &amp;&amp; Character.isLowSurrogate(array[i - 1])) {
            tmp = array[i];
            array[i] = array[i - 1];
            array[i - 1] = tmp;
        }
    }
    return new String(array);
}
</code></pre></li>
<li><p>The following code does it in 25 milliseconds </p>

<pre><code>public String reverse(String s) {
    char[] array = new char[s.length()];
    for(int i=array.length - 1, j = 0; i &gt;= 0; i--, j++) {
        array[i] = s.charAt(j);
    }
    return new String(array);
}
</code></pre></li>
<li><p>@palacsint's recommendation does it in 31 milliseconds: </p>

<pre><code>public static String reverse(final String str) {
    if (str == null) {
        return null;
    }
    return new StringBuilder(str).reverse().toString();
} 
</code></pre></li>
<li><p>@palacsint's recommendation (without the null-check) does it in 31 milliseconds: </p>

<pre><code>public static String reverse(final String str) {
    return new StringBuilder(str).reverse().toString();
} 
</code></pre></li>
<li><p>Your code does it in 37milliseconds.</p></li>
</ul>

<p>If you look at the code, my code creates three objects (char[] and new String() (which creates char[] as well))</p>

<p>The <code>s.charAt()</code> code also creates three objects, but has a lot of calls to <code>String.charAt()</code>.</p>

<p>The @palacsint recommendation creates 4 objects (StringBuffer, StringBuffer's internal char[], String, and String's internal char[]);</p>

<p>That is true with and without the null-check.</p>

<p>Your code creates 5 objects (6 if you count the first array which is likely to be compiled out...)  : (char[] array, new StringBuffer, StringBuffer's char[], String, and String's char[])</p>

<p>My guess is that there is a close correlation between our times simply because it takes 5ms to create 480,000 objects on the heap, plus some overhead of actual work.</p>
    </div>