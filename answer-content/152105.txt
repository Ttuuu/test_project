<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would implement this as a service in Laravel, and use IOC to resolve my dependencies.</p>

<p>I would make a service, called <code>AdWordsCampaign</code>. This would resolve its dependencies in constructor, namely <code>OAuth2TokenBuilder</code> and <code>AdWordsSessionBuilder</code>, although these two classes are good candidates for services themselves (a factory pattern is most of times is a sign you should abstract creation of class into a service provider).</p>

<p>Then I would implement a method in this service, <code>adWordsSession</code> which takes two parameters: a <code>User</code> instance and <code>$customer_id</code>. Then it has everything it needs to to its job.</p>

<p>I would also implement the reverse case using a service. Semantics are the same.</p>

<p>As for static method, I would avoid them. If you like them, use a Facade. They enable you to use a service anywhere you want.</p>

<p>I strongly suggest to read Laravel docs about services and providers and IOC and Facades. It will give you enough insight about how they work, and where to use them.</p>

<p>As a rule of thumb, whenever you see yourself using <code>new *</code> in your codes, it seems your could use a service/provider and inject it.</p>
    </div>