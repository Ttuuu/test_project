<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>forward_list</code> exists, so I assume this is a learning exercise? </p>

<hr>

<p>style nit:
You're using nonstandard naming conventions compared to the STL; though many people don't like those anyway. <code>addFirst</code> may be surprising to readers who are more used to something like "push front" or "enqueue". </p>

<hr>

<p>You're not deleting head here. std::unique_ptr could help here, but might not make sense if you're doing this as an exercise. Still, you should try to figure out a way to prevent memory leaks in a robust way.</p>

<pre><code>template&lt;typename E&gt; E* SinglyLinkedList&lt;E&gt;::removeFirst() {

    if(isEmpty()) {
        return nullptr;
    }

    E* temp = &amp;(head-&gt;getData());
    head = head-&gt;getNext();
    listSize--;

    return temp;

}
</code></pre>

<hr>

<p>This interface only supports storing const values that are copy-constructable. This is a severe limitation -- you wouldn't be able to make a list of <code>std::unique_ptr</code>s for example, because those cannot be copied. Supporting non-copyable types would be a good exercise (see forward_list for reference).</p>
    </div>