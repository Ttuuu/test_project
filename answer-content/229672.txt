<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Packaging</h2>

<ul>
<li>The project and repository is called <code>cl-binheap</code>, while the ASDF
system is called <code>binheap</code> - it's a good idea for those to match,
mostly due to UX:  I'll try loading the repository name first all the
time.</li>
<li>Worse is the package name <code>binhp</code>.  Now we have <em>three</em> names instead
of one.  Simply pick one of them and go with it (not <code>binhp</code> though,
why's leaving out two vowels make things better?).</li>
<li>Depending on who you'd like to use the code,
<a href="https://softwareengineering.stackexchange.com/questions/147111/what-is-wrong-with-the-unlicense">the Unlicense might not be so advisable</a>.</li>
<li>The README.md looks okayish, I'd rather also see an API reference
with some more details though.</li>
</ul>

<h2>Code</h2>

<ul>
<li>The tests use <code>assert</code>, instead I'd recommend one of the existing
frameworks, possibly also linking it into ASDF so that
<code>asdf:test-system</code> works.</li>
<li>Some of the source files correctly have <code>in-package</code>, some don't - I'd
suggest always specifying which package to use, even (or especially)
if it's example code.</li>
<li><code>example.lisp</code> doesn't work for me on CCL (I'd also suggest testing
code with at least two or more implementations if you want it to be
widely used):  <code>#(6 5 3 2 4 1) is not an adjustable array.</code>  Adding
<code>:adjustable t</code> to the definition of <code>*arr*</code> fixes that.</li>
<li><code>binheap.lisp</code> has some trailing whitespace and some tabs.  Consider
<kbd>M-x delete-trailing-whitespace</kbd> and
<kbd>M-x untabify</kbd>.</li>
<li><code>(floor (/ x y))</code> could be simplified to
<a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_floorc.htm#floor" rel="nofollow noreferrer"><code>(floor x y)</code></a>
here (note the second return value is gonna be different though).</li>
<li><code>(not (= ind 0))</code> will hopefully be optimised.  If not, however, <code>(not
(eql ind 0))</code> might be better (of course <code>(/= ind 0)</code> also exists, but
still does numeric comparison).</li>
<li>I'd suggest adding a <code>key</code> to make the container more generic / match
the standard sequence operators.  This helps immensely when adding
some objects and then using one of the attributes for comparison; it
composes better than a single <code>test</code> argument.</li>
<li>Lastly, CLOS is great and all, but strictly speaking all of the
methods could be functions and therefore be a bit quicker.  Unless of
course you have plans to add more containers with the same interface.
Consider also annotating everything with types and looking at what the
compiler (well, SBCL only really) will tell you about problems when
compiling with higher optimisation settings
(<code>(declaim (optimize ...))</code>).  However, I'd say that unless you're
very certain <em>do not</em> however put <code>(declare (optimize ...))</code> into the
library code, it's easy to get that wrong.</li>
<li>Don't use <code>assert</code> if the error isn't correctable by changing the
value interactively.  Like in <code>make-heap</code>, both of those should be
regular errors:  Retrying won't fix the problem (that's a common
restart established with <code>assert</code>) and changing <code>vec</code> or <code>test</code> isn't
something you'd do interactively ... I think.  So, <code>check-type</code> and
<code>error</code> would be the way to go here.</li>
<li>For randomised testing there's AFAIK nothing like a standard package,
look for Quickcheck clones or "random testing common lisp" probably.</li>
</ul>

<p>Edit: Oh I just saw you said to be nitpicky.  Alright then:</p>

<ul>
<li>It's "Common Lisp", no dash :)</li>
<li><code>ind</code>, <code>*arr*</code>, <code>arr</code>, <code>arrval</code>, etc. aren't great names.  Especially
in function signatures consider matching what the standard uses for
similar purposes.  I'm betting that it's <code>index</code> and <code>array</code>
respectively.  Common Lisp has a tendency to have long names (for
good!) and I'm (nitpicky) of the opinion that it's good style to match
that (as much as possible).</li>
<li><code>loop</code> should be replaced by
<a href="https://common-lisp.net/project/iterate/" rel="nofollow noreferrer"><code>iterate</code></a> because it has
more parentheses.  Not kidding, it simply looks better.</li>
<li>The docstrings are suboptimal and again should match an existing
style. <code>I: * Heap instance...</code> I haven't seen before and it doesn't
even mention which parameter (name) it describes.  Take
<a href="https://edicl.github.io/drakma/" rel="nofollow noreferrer">some exemplary</a>
<a href="http://quickdocs.org/drakma/api" rel="nofollow noreferrer">documentation</a> as a guideline
perhaps.</li>
</ul>
    </div>