<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em>Ways of improving:</em></strong></p>

<p><em>Splitting filename</em></p>

<p>Both methods <code>encrypt</code> and <code>decrypt</code> try to split a filename into <em>"root"</em> part and <em>extension</em>. <br><code>encrypt</code> method makes that even worse and verbose with 2 statements:</p>

<pre><code>    file_name = "".join(file_.split(".")[:-1])
    file_extention = "." + file_.split(".")[-1]
</code></pre>

<p>Instead, that's easily achievable with <a href="https://docs.python.org/3/library/os.path.html#os.path.splitext" rel="nofollow noreferrer"><code>os.path.splittext(path)</code></a> function (split the pathname path into a pair <code>(root, ext)</code>):</p>

<pre><code>file_name, file_ext = os.path.splitext(file_)
</code></pre>

<hr>

<p><em>Generating <code>Fernet</code> instance</em></p>

<p>Both methods <code>encrypt</code> and <code>decrypt</code> have the same 2 statements for generating <code>Fernet</code> instance (with only difference in <code>salt</code> value):</p>

<pre><code>key = base64.urlsafe_b64encode(hashlib.pbkdf2_hmac("sha256", bytes(self.__password, encoding="utf-8"), salt, 100000, dklen=32))
f = Fernet(key)
</code></pre>

<p>It's good to extract that common behavior into a separate <em>internal</em> function:</p>

<pre><code>def _get_fernet_instance(self, salt):
    key = base64.urlsafe_b64encode(hashlib.pbkdf2_hmac("sha256", bytes(self.__password, encoding="utf-8"), 
                                                       salt, 100000, dklen=32))
    return Fernet(key)
</code></pre>

<hr>

<ul>
<li><p><strong><code>decrypt</code></strong> function.<br>
The variables <code>save1</code>, <code>save2</code>, <code>save3</code> and <code>save</code> reassignment are confusing things rather than clarify.<br>The variables <code>save1</code>, <code>save2</code>, <code>save3</code> can be renamed to <code>line1</code>, <code>line2</code> and <strong><code>salt</code></strong>.<br>
Aliasing <code>save = decrypted</code> gives no benefit - just refer <code>decrypted</code> directly.<br>Including the above mentioned optimizations the <strong><code>decrypt</code></strong> method would look as:</p>

<pre><code>def decrypt(self, file_):
    file_name, _ = os.path.splitext(file_)

    with open(file_, "rb") as f:
        line1 = f.readline()
        line2 = f.readline()
        salt = f.readline()

        fernet_ = self._get_fernet_instance(salt)
        decrypted = fernet_.decrypt(line1)
        file_ext = fernet_.decrypt(line2)

    with open(file_name + file_ext.decode(encoding="utf-8"), "wb") as f:
        f.write(decrypted)

    os.remove(file_)
</code></pre></li>
<li><p><strong><code>encrypt</code></strong> function.<br>
The variable <code>file__</code> in <code>file__ = file_.read()</code> does not give an explicit meaning for the <em>content</em> being read. Let the content be <code>content</code> or <code>data</code>.<br>The same issues around variables <code>save1</code>, <code>save2</code>, <code>save3</code> and redundant aliases.<br></p>

<p>In case if there would be a need to refer the input argument <strong><code>file_</code></strong> (in both methods) as its original value in different places in methods <em>body</em> - you should <strong>not</strong> reassign it in context managers <code>with open(file_, "rb") as file_:</code>.</p>

<p><code>os.remove(file_name + file_extention)</code> is essentially the same as <code>os.remove(file_)</code></p>

<p>The final optimized <strong><code>encrypt</code></strong> method would look as:</p>

<pre><code>def encrypt(self, file_):
    salt = os.urandom(64)
    fernet_ = self._get_fernet_instance(salt)
    file_name, file_ext = os.path.splitext(file_)

    with open(file_, "rb") as f:
        content = f.read()
        encrypted_content = fernet_.encrypt(bytes(content))
        encrypted_ext = fernet_.encrypt(bytes(file_ext, encoding="utf-8"))

    with open(f'{file_name}.enc', 'wb') as f:
        f.write(encrypted_content)
        f.write(b"\n")
        f.write(encrypted_ext)
        f.write(b"\n")
        f.write(salt)

    os.remove(file_)
</code></pre></li>
</ul>
    </div>