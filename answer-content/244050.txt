<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It may seem unlikely but it is not impossible for an input string to contain <code>tempBracket</code> so a solution that doesn't involve adding and replacing that string would be ideal.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function flipBracketsDirection(str) {
  return str
    // flip () brackets
    .replace(/\(/g, 'tempBracket').replace(/\)/g, '(').replace(/tempBracket/g, ')')

    // flip [] brackets
    .replace(/\[/g, 'tempBracket').replace(/\]/g, '[').replace(/tempBracket/g, ']')

    // flip {} brackets
    .replace(/\{/g, 'tempBracket').replace(/\}/g, '{').replace(/tempBracket/g, '}')
    ;
}
console.log(flipBracketsDirection(')will tempBracket get replaced?('))</code></pre>
</div>
</div>

<p>The answer by <a href="https://codereview.stackexchange.com/users/73941/henrik-hansen">@Henrik</a> already suggests using a single regular expression to replace any characters in the group of brackets.</p>
<p>A mapping of characters seems an ideal solution in terms of performance. The mapping can be frozen using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" rel="nofollow noreferrer"><code>Object.freeze()</code></a> to avoid alteration.</p>
<pre><code>const BRACKET_MAPPING = Object.freeze({
  "(": ')',
  ")": '(',
  "{": '}',
  "}": '{',
  "[": ']',
  "]": '[',
});
const mapBracket = (bracket: string) =&gt; BRACKET_MAPPING[bracket];
const flipBracketsDirection = (str: string) =&gt; str.replace(/[\(\)\[\]\{\}]/g, mapBracket);
</code></pre>
    </div>