<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>you could collapse this piece of code into a single line</p>

<blockquote>
<pre><code>    public IDomainTableRepository DomainTables
    {
        get
        {
            if (_domainTables == null)
            {
                _domainTables = new DomainTableRepository(_context);
            }
            return _domainTables;
        }
    }
</code></pre>
</blockquote>

<p>by using a Null Coalescing operator (<code>??</code>)</p>

<p>like this</p>

<pre><code>public IDomainTableRepository DomainTables
{
    get
    {
        return _domainTables ?? new DomainTableRepository(_context);
    }
}
</code></pre>

<p>unfortunately this isn't quite the same as what you have because it doesn't perform "Lazy Initialization"  but the following code, that @Programmer gave in a comment, does so while also keeping with the spirit of using less indentation </p>

<pre><code>public IDomainTableRepository DomainTables =&gt; 
     _domainTables ?? (_domainTables = new DomainTableRepository(_context));
</code></pre>

<p>I also noticed that in one instance you put the return statement outside of the using block but in the rest of the methods in that class you put the returns inside of the using blocks, while either will work you should stay consistent with the way that you write your code.  </p>

<p>the code that I am talking about</p>

<blockquote>
<pre><code>    public DomainTable Get(int id)
    {
        DomainTable table;
        using (var commandTable = _context.CreateCommand())
        {
            commandTable.CommandType = CommandType.StoredProcedure;
            commandTable.CommandText = "up_DomainTable_GetById";

            commandTable.Parameters.Add(commandTable.CreateParameter("@pId", id));

            table = ToList(commandTable).FirstOrDefault();
        }
        return table;
    }
</code></pre>
</blockquote>

<p>and while I am here I would even place the Declaration of the variable inside of the using statement because there isn't anything about it (that I can tell) that would make it mandatory to declare it outside of the using statement</p>

<pre><code>public DomainTable Get(int id)
{
    using (var commandTable = _context.CreateCommand())
    {
        DomainTable table;
        commandTable.CommandType = CommandType.StoredProcedure;
        commandTable.CommandText = "up_DomainTable_GetById";

        commandTable.Parameters.Add(commandTable.CreateParameter("@pId", id));

        table = ToList(commandTable).FirstOrDefault();
        return table;
    }
}    
</code></pre>

<p>You could actually just return the results of the <code>ToList</code> Method call like this:</p>

<pre><code>public DomainTable Get(int id)
{
    using (var commandTable = _context.CreateCommand())
    {
        commandTable.CommandType = CommandType.StoredProcedure;
        commandTable.CommandText = "up_DomainTable_GetById";
        commandTable.Parameters.Add(commandTable.CreateParameter("@pId", id));
        return ToList(commandTable).FirstOrDefault();
    }
}    
</code></pre>
    </div>