<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So a few tips:</p>

<p>Generally, functions go at the top level or as object or class methods. But doing that does mean you have to pass more things to the function, and can't rely on the closure (variables defined in the scope above the function). That can also give you a lot of insight into your structure, and highlight complex functions (<em>complex</em> means dealing with a lot of different things) you might want to simplify, so it's a good exercise to move those functions to the top. If you find a lot of functions need the same variable(s), then you might want a class. Or maybe you do decide you want the function nested.</p>

<p>Surprisingly though, I think you have too few functions, not too many. Some may be in the wrong places though. Most of the places you have a comment are also good places to extract a function. Don't be afraid to do that too much. More functions are usually better, and shorter functions that call other functions are great too. In fact, sometimes I extract a single line to a function just to give it a name, instead of using a comment. PyCharm makes it easy to (un)extract and move functions, so you can go hog wild pretty quickly. Anything that you can give a good function name is probably a good function.</p>

<p>Those suggestions lead to a pattern though: <a href="https://martinfowler.com/bliki/PageObject.html" rel="nofollow noreferrer">Page Objects</a>. Basically, you make classes and objects to represent each <em>conceptual</em> element (things like <em>header</em>, <em>logo</em>, <em>article content</em>, <em>login form</em>, etc., not things like <code>div</code>, <code>span</code>, etc.) on the page, then use those objects to as your high level interface. So for example you could use that interface like this:</p>

<pre class="lang-py prettyprint-override"><code>page = Page(url)

page.header.login_form.should_exist

page.main_content.should_contain("Welcome!")

next_page = page.header.login_form.fill_out_and_submit(name="J. Doe", password=password)

next_page.main_content.should_contain("Welcome J. Doe!")
</code></pre>

<p>The general idea is you want most of your code to read like a story. If you can simplify the story by using a function name that clearly describes a few lines, then that is probably a good idea. The details of how selenium works should be hidden from that story.</p>
    </div>