<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>A bug:</strong> <code>Transpose</code> does <code>data[i, j] = data[j, i];</code>, but it returns a new matrix, it's not supposed to change the matrix in-place, and that doesn't actually work (going out of range for a non-square matrix and losing data for a square one).</p>

<p><strong>Manual loops to copy between arrays:</strong> did you know you can use <code>Array.Copy</code> on multi-dimensional arrays? The indexes work as if the rows are laid end-to-end.</p>

<p><strong><code>Det_recursive</code>:</strong> cofactor expansion is a well known example of an algorithm with O(n!) time complexity. It's fine for a tiny matrix yes, but a factorial quickly gets out of hand. Naming it <code>Determinant</code> is more dangrous if you leave it like this, offering no warning that it's going to be done with the slow algorithm, but fixing the efficiency is much nicer than putting a warning in the name. It can be done in O(nÂ³) time via LU decomposition, which is something that's also useful for various other purposes.</p>

<p><strong>Unnecessary zero filling:</strong> the constructors and the <code>Id</code> function wastes a bunch of time and code writing zeroes into a new array full of zeroes. <code>Id</code> can be simplified by just writing the ones to the diagonal, and the constructor without fill parameter could simply not fill.</p>
    </div>