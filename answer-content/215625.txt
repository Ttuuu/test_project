<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have played a lot of Blackjack in my life and was looking for a little challenge when I came across your question. </p>

<p>So, first let me thank you for inspiring me to code a version of Windows Console Blackjack. I incorporated some of your code and ideas - like the console symbols and color changes, and the shuffle algorithm. </p>

<p>My version is here: <a href="https://github.com/lucidobjects/Blackjack" rel="nofollow noreferrer">https://github.com/lucidobjects/Blackjack</a></p>

<p>That's my basic take on how to model Blackjack in OOP. I invite you to play it and review the code. As you will see, I adhere to object-oriented principles, including preventing any object from directly setting the internals of any other object.</p>

<p>Regarding your code, here are some thoughts:</p>

<ol>
<li>You are definitely on the right track to think about building a Hand
class. </li>
<li>Because they have enormously different behaviors, combining
Dealer and Player into a single class is a challenging road to take. I would strongly recommend splitting Dealer out to its own class (as
I did). </li>
<li>Your BlackJackGame class encompasses the functionality of a Casino, a Table, and a Dealer - all of which should be separate classes.</li>
<li>You might want to look into encapsulating the console
writing on the appropriate objects. All the classes that get written
to the screen could have a public <code>Draw()</code> method.</li>
<li>The Deck's <code>DealHand</code> method is another indication that there should be a Dealer
class.</li>
<li>For things like <code>Deck.GetRemainingDeckCount()</code> you might want
to consider a <code>Remaining</code> property rather than a method. Though
picking between a method and a property can be tricky, as I found out
when coding mine. I came to the conclusion that if something has the
attribute throughout its existence then it's a property. If it only
has the attribute sometimes - like after the cards have been dealt,
then more likely a method.</li>
<li>If you are committed to C#, I recommend learning LINQ. It took me a while to even start with LINQ and a while more to learn the basics. But, it has definitely been worth the investment. Now I'm a huge fan of LINQ.</li>
<li>Another C# feature you might want to investigate is expression-bodied members, which I use extensively.</li>
<li>It's a matter of personal preference but I'm a devotee of <code>var</code>.</li>
<li>I also avoid <code>Utility</code> classes as much as possible. In recent memory I
have successfully avoided them entirely.</li>
<li>I also typically avoid <code>static</code> but in the case of the <code>Table</code> class in my version, I figured that's the stuff that's written directly on the felt and/or a sign on the table, so I made an exception.If I were implementing a multi-table casino, that stuff would stop being static and probably move into a <code>TableRules</code> class.</li>
</ol>
    </div>