<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Like I said before, the reason why this takes a lot of time is because the number of steps is proportional to the square of the number of disks.</p>

<p>But there are some other improvements to be made to this code.</p>

<h1><code>range</code></h1>

<p><code>list(reversed(range(1, args.disks + 1)))</code> can be done more easily as <code>list(range(disks, 0, -1))</code></p>

<h1>Global variables</h1>

<p>Your image saving algorithm uses a lot of global scope (<code>args.filename</code>, <code>steps</code>,...), and with the <code>src.reverce()</code> even modifies these global variables, which is a sure way to introduce difficult to find bugs. If your function needs those parameters, pass them as arguments, and certainly don't change them. </p>

<p>You can prevent <code>SOURCE</code>, <code>HELPER</code>, <code>TARGET</code> to need in global scope, by passing these along in a dictionary. You can also use a <code>namedtuple</code>:</p>

<pre><code>source = list(range(disks, 0, -1))
target = list()
helper = list()
state = dict(
    source=source,
    target=target,
    helper=helper
)
hanoi_gen(disks, source, helper, target, state)
</code></pre>

<h1>Variable naming</h1>

<p>I had to look really well at the code to find out what certain variables were. <code>cells</code> for example is the width of the image, <code>peg</code> is the maximum with of a peg etc. Name your variables clearly. <code>s, h, t in zip(src, hlp, trg)</code> is another example that can do with better names.</p>

<h1>Immutable variables</h1>

<p>You use lists throughout your code. The advantage of lists is that they are mutable, but this is also the disadvantage. To make sure other code doesn't inadvertently change your data, use immutable containers like tuple where appropriate. So instead of <code>SOURCE[:]</code>, I used <code>tuple(...)</code>.</p>

<h1>Generator</h1>

<p>Instead of instantiating all those lists at the same time, you can work with generators:</p>

<pre><code>def hanoi_gen(disks, source, helper, target, state):
    if disks:
        yield from hanoi_gen(disks - 1, source, target, helper, state)
        target.append(source.pop())
        yield tuple(state['source']), tuple(state['target']), tuple(state['helper'])
        yield from hanoi_gen(disks - 1, helper, source, target, state)

def solve_tower(disks):
    source = list(range(disks, 0, -1))
    target = list()
    helper = list()
    yield tuple(source), tuple(target), tuple(helper)
    state = dict(
        source=source,
        target=target,
        helper=helper,
    )
    yield from hanoi_gen(disks, source, helper, target, state)


steps = tuple(solve_tower(2))
assert steps == (
    ((2, 1), (), ()),
    ((2,), (), (1,)),
    ((), (2,), (1,)),
    ((), (2, 1), ()),
)
</code></pre>

<h1>Magic numbers</h1>

<p>There are some magic numbers in your code, 10, 40, 5, ...</p>

<p>Better is to extract global constants from this:</p>

<pre><code>BUFFER_PEG = 10
LINE_WIDTH = 1
BUFFER_STEP = 5
WHITE = 1
BLACK = 0
</code></pre>

<p>And use them like:</p>

<pre><code>image_width = disks * 2 * 3 + 4 * BUFFER_PEG
</code></pre>

<p><code>BLACK</code> and <code>WHITE</code> can also be done with an <code>enum.IntEnum</code>:</p>

<pre><code>from enum import IntEnum
class Color(IntEnum):
    BLACK = 0
    WHITE = 1
</code></pre>

<h1>DRY</h1>

<p>Compartmentalize!</p>

<p>There is a lot of repeated code, which makes this hard to maintain and test:</p>

<pre><code>from itertools import repeat

def whitespace(width, image_width):
    return repeat(Color.WHITE, width * image_width)

def line(width, image_width):
    return repeat(Color.BLACK, width * image_width)
</code></pre>

<p>Create easy to use generators to add whitespace or black lines.</p>

<h2>Pad the disk</h2>

<pre><code>def pad_disk(disk_width, num_disks):
    blank_width = num_disks - disk_width
    yield from repeat(Color.WHITE, blank_width)
    yield from repeat(Color.BLACK, disk_width * 2)
    yield from repeat(Color.WHITE, blank_width)
</code></pre>

<p>Centrally pads a disk to twice the number of disks in play.
This can be easily tested: the portion of a disk of width 1 in a stack of 4 disks:</p>

<pre><code>assert tuple(pad_disk(1, num_disks=4)) == (1, 1, 1, 0, 0, 1, 1, 1)
</code></pre>

<h2>Format a row</h2>

<pre><code>def buffer_peg():
    return repeat(Color.WHITE, BUFFER_PEG)

def format_row(disks, num_disks):
    yield from buffer_peg()
    for disk_width in disks:
        yield from pad_disk(disk_width, num_disks)
        yield from buffer_peg()
</code></pre>

<p>This can be easily tested like this:</p>

<pre><code>row = [2, 0, 1]
num_disks = 4
assert tuple(format_row(row, num_disks)) == tuple(chain(
    buffer_peg(),
    (1, 1, 0, 0, 0, 0, 1, 1,),
    buffer_peg(),
    (1, 1, 1, 1, 1, 1, 1, 1,),
    buffer_peg(),
    (1, 1, 1, 0, 0, 1, 1, 1,),
    buffer_peg(),
))
</code></pre>

<h1>Format individual steps</h1>

<p>Here, I use a small helper function to reverse the peg, and pad it with 0s:</p>

<pre><code>def pad_left_reverse(peg, size, fillvalue=0):
    yield from repeat(fillvalue, size - len(peg))
    yield from reversed(peg)
</code></pre>

<p>Then all of this:</p>

<pre><code>src = step[0]
hlp = step[1]
trg = step[2]
size = max(len(src), len(hlp), len(trg))
for _ in range(size - len(src)):
    src.append(0)
for _ in range(size - len(hlp)):
    hlp.append(0)
for _ in range(size - len(trg)):
    trg.append(0)
src.reverse()
hlp.reverse()
trg.reverse()
</code></pre>

<p>Can be replaced with: </p>

<pre><code>def format_step(step, num_disks):
    pegs = map(
        lambda peg: pad_left_reverse(peg, num_disks, fillvalue=Color.WHITE),
        step
    )
</code></pre>

<p>And on the plus-side, this doesn't reverse the original input.</p>

<p>I replaced the <code>size = max(len(src), len(hlp), len(trg))</code> with the number of disks, to keep all the steps equally high. If you can live with the uneven heights, <code>size = len(max(step, key=len))</code> is an alternative formulation.</p>

<pre><code>    for row in zip(*pegs):
        # print(row)
        yield from format_row(row, peg_width)
</code></pre>

<p>Replaces the next 20 lines.</p>

<pre><code>step = [2, 1], [5,4,3], []
num_disks = 5
step_data = list(format_step(step, num_disks))
</code></pre>

<p>Outputs something like:</p>

<blockquote>
<pre><code>1111111111111111111111111111111100000011111111111111111111111111111111
1111111111111100111111111111111000000001111111111111111111111111111111
1111111111111000011111111111110000000000111111111111111111111111111111
</code></pre>
</blockquote>

<h1>Format the steps</h1>

<pre><code>def format_steps(steps, image_width, num_disks):
    for step in steps:
        yield from whitespace(BUFFER_STEP, image_width)
        yield from format_step(step, num_disks)
        yield from whitespace(BUFFER_STEP, image_width)
        yield from line(LINE_WIDTH, image_width)
</code></pre>

<p>This speaks for itself.</p>

<h1>Context managers</h1>

<p>If you open resources that need closing afterwards, like a file or a <code>PIL.Image</code>, use a <code>with</code>-statement.</p>

<h1>The main</h1>

<pre><code>if __name__ == '__main__':
    num_disks = 5
    steps = solve_tower(num_disks)
    image_width = num_disks * 2 * 3 + 4 * BUFFER_PEG
    data = list(format_steps(steps, image_width, num_disks))
    with Image.new('1', (image_width, len(data) // image_width)) as image:
        image.putdata(data)
        name = 'my_hanoi.png'
        image.save(name)
</code></pre>

<p>All-in-all this code is slightly longer than your code, and will not necessarily be much faster, it is a lot clearer for me, and a lot more parts can be individually tested.</p>

<p>The full code can be found <a href="https://gist.github.com/vadella/775b975bf351f1d8629d660e820eea8b" rel="nofollow noreferrer">here</a>, and some tests <a href="https://gist.github.com/vadella/a31688f23f89eb0cd19727f799f35f5c" rel="nofollow noreferrer">here</a>.</p>
    </div>