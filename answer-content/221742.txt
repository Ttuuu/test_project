<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you're iterating for the sole purpose of creating an array, <code>map</code> is <em>somewhat</em> appropriate here.</p>

<pre><code>const productArr = [... Array(dataLength)] // Create a dummy array dataLength elements long
                     .map(_ =&gt; ({ // And map over it
                         name: faker.commerce.productName(),
                         category: faker.commerce.department(),
                         price: faker.commerce.price(),
                         description: faker.lorem.paragraph(),
                     }));
</code></pre>

<p>I'm mentioning it just in case you aren't aware of <code>map</code>, but it could be argued that this exact usage is an abuse of the function. Really, <code>map</code> is for transforming one list into another list of the same length. In this case though, we're completely ignoring the original contents of the array being iterated over (shown by the fact that the parameter is called <code>_</code>).</p>

<p>I can't say I necessarily recommend <code>map</code> in this case, but I thought I'd mention it.</p>

<p>If however you ever wanted to enumerate the data you're producing, it would be appropriate:</p>

<pre><code>const productArr = [... Array(dataLength).keys()] // [0, 1, 2, 3, ...]
                         .map(i =&gt; ({ 
                             i: i, // And use the parameter this time
                             name: faker.commerce.productName(),
                             category: faker.commerce.department(),
                             price: faker.commerce.price(),
                             description: faker.lorem.paragraph(),
                         }));
</code></pre>

<p><a href="https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp">Resource for the "range" on the first line.</a>.</p>
    </div>