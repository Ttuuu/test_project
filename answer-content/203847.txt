<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code length is one factor in readability, but it isn't the only factor. "Is this code easy to read and modify" is a more important question to ask.</p>

<p>It looks like you've gotten a method skeleton here, which kind of leads you down the path of stuffing everything in one function, which is a bit of a shame. Let's look at what we actually need here.</p>

<ol>
<li>Length of at least 6</li>
<li>One lowercase English character</li>
<li>One uppercase English character</li>
<li>One digit</li>
<li>One special character</li>
</ol>

<p>What if we split this up into a bunch of separate functions, which each do one thing. We'll just write the function names down for now, and leave the implementation blank.</p>

<pre><code>def lower_required(text):
    pass

def upper_required(text):
    pass

def digits_required(text):
    pass

def length_required(text):
    pass

def special_required(text):
    pass
</code></pre>

<p>Now, Python has a <code>string</code> module that is (semi)deprecated (much of what was in it is now on string objects themselves), but that has some still useful things, namely, <code>string.ascii_lowercase</code>, <code>string.ascii_uppercase</code>, and <code>string.digit</code>. We can use these in the implementations for some of our functions. Let's just write them as simply as possible for now.</p>

<pre><code>import string

def lower_required(text):
    for char in text:
        if char in string.ascii_lowercase:
            return 0
    return 1

def upper_required(text):
    for char in text:
        if char in string.ascii_uppercase:
            return 0
    return 1

def digit_required(text):
    for char in text:
        if char in string.digits:
            return 0
    return 1
</code></pre>

<p>There's quite a bit of repetition here that we can factor out.</p>

<pre><code>def num_required(text, characters):
    if any((x in characters for x in text)):
        return 0
    return 1
</code></pre>

<p>Then our previous functions can just call this:</p>

<pre><code>def lower_required(text):
    return num_required(text, string.ascii_lowercase)
</code></pre>

<p>And similarly for the <code>upper_required</code> and <code>digit_required</code>.</p>

<p>In fact, we can do this with our special characters as well:</p>

<pre><code>SPECIAL_CHARS = '!@#$%^&amp;*()-+'

def special_required(text):
    return num_required(text, SPECIAL_CHARS)
</code></pre>

<p>The last function we need to implement is <code>length_required</code>:</p>

<pre><code>MINIMUM_LENGTH = 6

def length_required(text):
    if len(text) &gt;= MINIMUM_LENGTH:
        return 0
    return MINIMUM_LENGTH - len(text)
</code></pre>

<p>Now we can stitch these all together within <code>minimumNumber</code> (note that Python functions should be named using snake_case, so it should be <code>minimum_number</code> here - but I assume this function name was given to you, so I won't harp on about it too much).</p>

<pre><code>def minimumNumber(text):
    test_functions = [lower_required, upper_required,
                      digits_required, special_required]
    min_chars_required = sum([test_fn(text) for test_fn in test_functions])
    missing_length = length_required(text)
    if missing_length &gt; min_chars_required:
        return missing_length
    return min_chars_required
</code></pre>

<p>The benefit of doing this is the fact that we can easily add extra checks. What if a new requirement comes along? We can just create a new function an add it to test_functions; the amount of existing code we have to touch is minimal.</p>

<p>Just to drive home the point about size vs readability, here is a (slightly) code golfed version:</p>

<pre><code>import string

def minimumRequired(password):
    if len(password) &lt; 6:
        return 6 - len(password)
    unique_pw = frozenset(password)
    char_sets = (frozenset(string.ascii_lowercase), frozenset(string.ascii_uppercase),
                 frozenset(string.digits), frozenset('!@#$%^&amp;*()-+'))
    required_extra = 0
    for char_set in char_sets:
        if not char_set &amp; unique_pw:
            required_extra += 1
    return required_extra
</code></pre>

<p>This (probably - I haven't really tested it) satisfies the requirements, but how do I make changes to it? Is it obvious how it does what it does (I'd argue not really).</p>
    </div>