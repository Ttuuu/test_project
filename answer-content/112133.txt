<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've got lots of stuff under <code>if __name__ == '__main__'</code>. This is almost always bad; using a <code>main</code> function normally works out nicer. You use <code>exit</code> rather than <code>sys.exit</code>, FWIW, which is not great, and the call should go outside of <code>main()</code>.</p>

<p>You do</p>

<pre><code>message = str.lower(message)
</code></pre>

<p>I would recommend <code>casefold</code> in this instance, as it will lowercase more letters than otherwise possible. For example, run <code>'ß'.casefold()</code> and <code>'ß'.lower()</code>. Alternatively, consider writing this so that only letters which <em>can</em> get translated do.</p>

<p>But, I'll be honest, I don't like this behaviour. Why should passing in</p>

<pre><code>'abcdefghijklmnopqrstuvwxyz'
</code></pre>

<p>cause the message to be lowecased automatically but passing in the Swedish alphabet,</p>

<pre><code>'abcdefghijklmnopqrstuvwxyzååö'
</code></pre>

<p>not do that at all? This seems ripe for errors.</p>

<p><strong>Further</strong>, this behaviour isn't mentioned in the docstring! That'll cause someone problems some months down the line when they use a slightly different set of values and their text comes out uppercased!</p>

<p>A minor, but nagging, point here is your use of <code>class.method(object)</code> over <code>object.method()</code>. This is poor form, and you probably shouldn't be doing it.</p>

<p>There's also the default for <code>amount</code> of 97. That doesn't make sense! What if I pass in <code>alphabet="abc"</code>? Why would a shift of 97 make sense? I suggest not giving a default here, and probably no default alphabet either.</p>

<p>You default initialize</p>

<pre><code>text = ''
offset = 97
</code></pre>

<p>but never use 'em. That's a good way to hide bugs - don't do it.</p>

<p>I would deduplicate the actual shifting and outputting by acquiring the arguments separately. First check</p>

<pre><code>if argument_count not in (1, 2, 4):
    print('Incorrect argument count : {}'.format(argument_count))
    print('Usage:')
    print('$ python3 caesar.py')
    print('\nOR\n')
    print('$ python3 caesar.py [text]')
    print('\nOR\n')
    print('$ python3 caesar.py [text] [shift] [alphabet]')
    return 2
</code></pre>

<p>Then at the end put</p>

<pre><code>if universe == 'lower':
    print(shift(text.casefold(), offset, string.ascii_lowercase))
elif universe == 'upper':
    print(shift(text.upper(), offset, string.ascii_uppercase))
elif universe == 'all':
    print(shift(text, offset, string.printable))
else:
    raise NotImplementedError
</code></pre>

<p>Then you can patch the middle with something like:</p>

<pre><code>if argument_count == 1:
    # The script is being used independently, so display menus and stuff
    print('\n\n'
          '+--------------------------------------+\n'
          '|------------- caesar.py --------------|\n'
          '+--------------------------------------+\n\n')
    text = input('Please input the text to be encrypted : ')
    offset = int(input('Please enter the shift amount (negative to '
                       'decrypt) : '))
    print('The alphabet sets :\n'
          '1. Lowercase ascii\n'
          '2. Uppercase ascii\n')
    choice = input(
        'Please enter the choice number, or anything else to choose '
        'default alphabet (all printable ascii characters): ')
    if choice.isnumeric():
        number = int(choice)
        if number == 1:
            universe = 'lower'
        elif number == 2:
            universe = 'upper'
    else:
        universe = 'all'
    print('The encrypted text is : ')

elif argument_count == 2:
    # This and the next mode must be as silent as possible.
    text = sys.argv[1]
    offset = 97
    universe = 'all'

elif argument_count == 4:
    text = sys.argv[1]
    offset = int(sys.argv[2])
    universe = sys.argv[3]
    if universe not in ('lower', 'upper', 'all'):
        print('Invalid choice of alphabet : {}'.format(universe))
        return 1
</code></pre>

<p>Note this part:</p>

<pre><code>if choice.isnumeric():
    number = int(choice)
    if number == 1:
        universe = 'lower'
    elif number == 2:
        universe = 'upper'
else:
    universe = 'all'
</code></pre>

<p>This is missing the case for <code>choice.isnumeric() and int(choice) not in (1, 2)</code>. Instead, why not just do</p>

<pre><code>universe = {'1': 'lower', '2': 'upper'}.get(choice, 'all')
</code></pre>

<p>Frankly, this is horrid:</p>

<pre><code>offset = int(input('Please enter the shift amount (negative to '
                   'decrypt) : '))
</code></pre>

<p>The 80-character limit is a suggestion, not a rule. This looks way nicer:</p>

<pre><code>offset = int(input('Please enter the shift amount (negative to decrypt) : '))
</code></pre>

<p>so you should prefer it.</p>

<p>Then, since you're doing command-line parsing I'd move to <code>docopt</code> and hoist out dynamic aquiring of arguments:</p>

<pre><code>"""
This python file contains the "shift()" method to encrypt as well as decrypt
strings.

Help on command line arguments:
1. Use without any of those to enter an interactive mode.
2. Pass only the plaintext to encrypt using default settings (shift of 97
with alphabet of all printable ascii characters).
3. Pass the shift amount (positive to encrypt, negative to decrypt) and one
of "lower", "upper" or "all" to choose the alphabet.

Usage:
    caesar.py
    caesar.py &lt;text&gt;
    caesar.py &lt;text&gt; &lt;shift&gt; (lower | upper | all)
"""

import string
import sys

import docopt


def shift(message, amount, alphabet):
    """
    This method takes a string and shifts it by the specified amount. A
    positive amount shifts the characters up, while a negative amount shifts
    the characters down.

    :param message:     The message to be encrypted.
    :param amount:      The amount to shift the message by.
    :param alphabet:    The alphabet for determining the result of a shift.
    :return:
    """
    shifted_alphabet = alphabet[amount:] + alphabet[:amount]
    table = str.maketrans(alphabet, shifted_alphabet)
    return message.translate(table)


def get_args_dynamically():
    # The script is being used independently, so display menus and stuff
    print('\n\n'
          '+--------------------------------------+\n'
          '|------------- caesar.py --------------|\n'
          '+--------------------------------------+\n\n')
    text = input('Please input the text to be encrypted : ')
    offset = int(input('Please enter the shift amount (negative to decrypt) : '))
    print('The alphabet sets :\n'
          '1. Lowercase ascii\n'
          '2. Uppercase ascii\n')
    choice = input(
        'Please enter the choice number, or anything else to choose '
        'default alphabet (all printable ascii characters): ')
    universe = {'1': 'lower', '2': 'upper'}.get(choice, 'all')
    print('The encrypted text is : ')

    return text, offset, universe


def main(args):
    text = args['&lt;text&gt;']

    if text is None:
        text, offset, universe = get_args_dynamically()
    else:
        offset = args['&lt;offset&gt;']
        if offset is None:
            offset = 97

        universe = (
            'lower' if args['lower'] else
            'upper' if args['upper'] else
            'all'
        )

    if universe == 'lower':
        print(shift(text.casefold(), offset, string.ascii_lowercase))
    elif universe == 'upper':
        print(shift(text.upper(), offset, string.ascii_uppercase))
    elif universe == 'all':
        print(shift(text, offset, string.printable))
    else:
        raise NotImplementedError


if __name__ == '__main__':
    sys.exit(main(docopt.docopt(__doc__)))
</code></pre>

<p>I would mention the other things alexwlchan mentions but, well, they've already been mentioned.</p>
    </div>