<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Alternative code:</p>

<pre><code>ScheduledExecutorService executor =  Executors.newSingleThreadScheduledExecutor();
// assuming the stage-setup is perfomed already:
executor.submit(() -&gt; Platform.runLater(stage::show));
executor.schedule(
    () -&gt; Platform.runLater(((Stage)stage.getScene().getWindow()).close())
    , 3
    , TimeUnit.SECONDS);
</code></pre>

<p>This approach has multiple advantages:</p>

<ul>
<li>The (costly) stage-setup is moved away from the UI Thread</li>
<li>Sleeping on the UI Thread doesn't happen, freeing it to do actual work</li>
<li>ScheduledExecutorService is more exact with it's scheduling than a sleep-call. It also doesn't involve having to handle <code>InterruptedException</code> or spurious wakeup</li>
</ul>

<p>But it also has one glaring disadvantage:</p>

<ul>
<li>You can't directly shutdown the ExecutorService, because that would cancel the scheduled Runnable.</li>
</ul>

<p>This shouldn't be much of a problem though, since you should not be creating an ExecutorService in method scope in the first place.<br>
Instead you should move multithreading facilities into the class scope (or even into static scope), so as to enable easy cleanup when the application is terminated or the instance reaches the end of it's lifetime.</p>
    </div>