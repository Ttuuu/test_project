<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How about:</p>
<pre><code>class PostController extends AbstractController
{
    public function store(PostStoreRequest $request): Response
    {
        $dataStruct = app(PostDataStruct::class)-&gt;fill($request-&gt;validated());
    
        return app(UserPostHandlerInterface::class)-&gt;createPost($dataStruct);
    }
}
</code></pre>
<ul>
<li><code>PostStoreRequest</code> validates data</li>
<li><code>PostDataStruct</code> stores contents and has a method that fill all the data for you.</li>
<li>Your code looks a bit like Laravel so I utilized Laravels app container. This way you will have an easier time mocking objects in phpunit.</li>
<li>Within Kernel file forException Handlers, you can define how certain exceptions are handled. i.e. if you call <code>throw new SystemExceptionError('my message')</code> - in the Kernel file state that SystemExceptionError should have HTTP status 500.</li>
</ul>
    </div>