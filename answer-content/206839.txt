<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>If-Then-Else-ElseIf-Then-ElseIf</code> construct is really hard to follow. A complex <code>If-Then</code> construct should always be a red flag that there is a better way to do it.</p>

<h2>Simplify the calling</h2>

<p>When you want to use a form in your function, pass the form, not a string and hope that you can find the form again.</p>

<pre><code>Public Sub Save()
        Dim Out as string
        Out = Validate(me,msclblstyle) ' Note slight change here.
        If Out = vbnullstring Then
            'Do Save code here
        Else
            msgbox "Please check the following fields:" &amp; vbCrLf &amp; vbCrLf &amp; out
        End If
End Sub
</code></pre>

<p>-- </p>

<pre><code>Public Function Validate(ByVal sourceForm As Form, Optional ByVal argLabelDesc As mscLabelDesc = mscNone, Optional ByVal argCustomTag As String = "") As String
[...]
    ' Dim sourceForm As Form: Set sourceForm = Forms(argForm) &lt;--- don't need this line any more.
[...]
</code></pre>

<h2>Define your rules</h2>

<p>When doing complex logic, define your rules up front so that they are easier to see and easier to maintain. You have a lot of repetition in your code and I suspect you cannot tell if you have actually repeated strains of logic.</p>

<p>An easy way is to identify "atoms" of logic and then build your "molecules" up.</p>

<pre><code>Dim logicNotMandatory as Boolean
Dim logicFloatDouble as Boolean
Dim logicNonMandatoryStillSave as Boolean
[...]
logicNotMandatory = ctrl.Tag Like "*f*" 
logicFloatDouble = ctrl.Tag Like "*n*"
logicNonMandatoryStillSave = ctrl.Tag Like "*x*" 

Dim logicCheck1 ' I don't know your intent from your code - give this a meaningful name
Dim logicCheck2

logicCheck1 = logicNotMandatory And ctrl.Enabled
logicCheck2 = logicNonMandatoryStillSave  and Trim$(ctrl.value &amp; "") = "" 
[...]
</code></pre>

<p>Yes, this will add lines to your code. But it will be much easier to debug and maintain. Especially if one of the rules changes slightly, and you only have to fix it in one place. It also means that the real work in the function is more readable and self-explanatory. I am sure that if you go through this exercise you will find many ways to refine your logic and your code base. The following is a direct translation from your original code (the first instance where the above logic is used):</p>

<pre><code>        If logicCheck1 Then
            If logicFloatDouble Then
                If logicCheck2 Then
</code></pre>

<h2>Consider setting flags and using <code>Select Case</code></h2>

<p>Identifying the above logic and identifying the limited number of <code>DoAction</code> outcomes means that you can set internal flags based on the logic.</p>

<pre><code>Dim logicDoCheck1 as Boolean ' Again, find a meaningful name
Dim logicDoCheck2 as Boolean ' Again, find a meaningful name
logicDoCheck1 = logicCheck1 And logicFloatDouble and logicCheck2
logicDoCheck2 = [...]
</code></pre>

<p>There are two ways to approach the use of a flag variable. You could:</p>

<pre><code>Dim myFlag as Long ' even better, set an enum
If logicDoCheck1 then myFlag = 1
If logicDoCheck2 then myFlag = 2 ' should be mutually exclusive. If not, revisit your logic.
[...]
Select Case myFlag
    Case 1
        ' Do something
[...]
End Select
</code></pre>

<p>Another trick here is to use the <code>Select Case</code> differently.</p>

<pre><code>Select Case True
    Case logicDoCheck1
        ' Do Something
    [...]
End Select
</code></pre>

<h2>Avoid ambiguity</h2>

<p>What does the following even mean?</p>

<pre><code>If ctrl.Tag Like "*x*" And Trim$(ctrl.value &amp; "") = "" Then
ElseIf Trim$(ctrl.value &amp; "") = "" Then
</code></pre>

<p>I suspect you really wanted </p>

<pre><code>If Not (ctrl.Tag Like "*x*" Or Trim$(ctrl.value &amp; "") = "" ) Then 
' Do things
</code></pre>

<p><code>If-Then</code> statements are always easier to understand if they are a positive control, rather than a negative statement. Identify what it is you want when you want to do something, rather than try to identify some possible reasons why you do not want to do anything. It gets complicated even trying to explain it!</p>

<h2>And then check for repetition</h2>

<p>How often do you use this piece of code?</p>

<pre><code>If argLabelDesc = msclblstyle Then
    out = out &amp; sourceForm.Controls("lbl" &amp; StripPrefix(ctrl.Name)).Caption &amp; vbCrLf
ElseIf argLabelDesc = msc_labelStyle Then
    out = out &amp; sourceForm.Controls(StripPrefix(ctrl.Name) &amp; "_Label").Caption &amp; vbCrLf
Else
    out = out &amp; StripPrefix(ctrl.Name) &amp; vbCrLf
End If
</code></pre>

<p>This looks like the key action , so using the <code>Select Case</code> method above will reduce your code base and complexity down a lot. Most of your logic is about deciding whether you should run the above bit of code.</p>

<p>You can deal with true repetition by creating a sub-routine or function with parameters to deal with the minor variations. However, in this case as there are no minor variations, I think the best way is to re-evaluate your logic so you only have one instance of this in your function. </p>

<h2>What next?</h2>

<p>If I was rewriting code for myself, I would stop reviewing here, totally rewrite the code based on the above and then re-start the review on the new code. What I have suggested above is a significant change to the code, but I hope this provided a lot of help and some new knowledge.</p>
    </div>