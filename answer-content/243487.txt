<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, a solid effort. You've already listed the major areas for improvement.</p>

<ol>
<li><p>Switch from arrays to Lists to use the built-in sort method.</p></li>
<li><p>Change the game loop to include a menu option to quit mid-game. </p></li>
<li><p>Validate the input.</p></li>
</ol>

<p>Now for my comments.</p>

<p>The convention is that class names in Java start with a capital letter.  The ceeLo class should be named CeeLo.</p>

<p>Variable names and method names in Java start with a lower case letter.  The</p>

<pre><code>BufferedReader BR
</code></pre>

<p>should be</p>

<pre><code>BufferedReader br
</code></pre>

<p>or</p>

<pre><code>BufferedReader reader
</code></pre>

<p>All of the methods in the CeeLo class are static.  While <code>main</code> must remain static, you should use non-static methods and create an instance of the CeeLo class to call the methods.</p>

<p>Use blank lines sparingly to separate groups of code.  Here's an example of what I mean from your <code>main</code> method.</p>

<pre><code>    do {
        System.out.println("\nWallet: " + wallet);
        System.out.println("How much would you like to bet?\n");
        bet = input(wallet);

        human.playerRolls();
        computer.playerRolls();
        showRoll(human);
        showRoll(computer);

        int scoreHuman = gameLogic(human.getDieValues(), human);
        int scoreComputer = gameLogic(computer.getDieValues(), computer);

        String victor = calculateWinner(scoreHuman, scoreComputer, human, computer);
        System.out.println("\nThe winner is: " + victor);

        wallet = adjustWallet(victor, wallet, bet, human, computer);
    } while (wallet &gt; 0.0);
</code></pre>

<p>In a Javadoc, the explanation comes first, followed by the <code>@param</code> descriptions, followed by the <code>@return</code> description.</p>

<p>You can use basic HTML in your explanation.</p>

<p>Here's a reworked example from your code.</p>

<pre><code>/**
 * The input method takes in the amount a player wants to bet as a
 * &lt;code&gt;String&lt;/code&gt; and returns it as a &lt;code&gt;double&lt;/code&gt; if it's more than
 * zero and within the wallet amount.
 *
 * @param max = wallet amount
 * @return value
 */
</code></pre>
    </div>