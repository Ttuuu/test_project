<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>DELAY V DEBOUNCE</h1>
<p>What you have implemented is a delay not a debounce. You delay the firing of the event until after a set time. Events during this time further delay the final event.</p>
<h2>Design</h2>
<p>Debouncing should respond to the first event immediately and then hold any response during the debouncing period after the listener has been called.</p>
<p>It would be better to clearly identify the event argument passed to the listener.</p>
<p>You do not provide a way of passing additional arguments to the event. By adding them to the outer function, you get better control. (see example)</p>
<h2>General points</h2>
<ul>
<li>Inconsistent use of semicolon. Either use it (recommended) or not. Don't mix styles.</li>
<li><code>var</code> is function scoped, <code>let</code> os block scope. It is better to use var when a variable is declared in function scope.</li>
<li><code>timeoutHandler</code> is a poor name. The timeout function returns and Id (AKA a handle). The name you used implies that the variable is a function. A better name could be <code>timeoutHandle</code>, or in context just <code>id</code> or <code>handle</code> will do.</li>
<li>The is no need to assign null to the variable <code>timeoutHandler</code>. undefined variable are <code>undefined</code> and making it <code>null</code> is just noise and semantically incorrect</li>
<li>The handle returned by setTimeout (and setInterval) are unique to the context and the call. It is never reused. <code>clearTimeout</code> ignores invalid handles so there is no need check if the handle is valid, nor change its value inside the timeout function.</li>
<li>You can reduce the call stack depth by using the trailing arguments of <code>setTimeout</code> to pass the arguments.</li>
<li><code>window</code> is the default object. Inconsistent use is poor style. You do not use it for <code>clearTimeout</code>, <code>setTimeout</code>, and <code>console</code> so why for <code>addEventListener</code>?</li>
<li><code>addEventListener('oninput'...</code> is incorrect, there is no event called <code>oninput</code>. Should be <code>addEventListener('input'...</code></li>
</ul>
<h2>Examples</h2>
<p>Covering the general points and comparing debounce, delay, and immediate event responses. The delay is also used to clear the displays 2sec after the last event.</p>
<p>It also shows when to use window. In the example emoticons can not be used as direct references to elements, thus I use window bracket notation to access the names.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const DELAY_MS = 250;
const CLEAR_DELAY_MS = 2000;
const CLEAR_SPEED_MS = 17;
const DISPLAYS = ["ðŸ’¥","ðŸ’¤","âš¡"];

const logger = (event, ...args) =&gt;  log(args[0]);

const delay = (callback, delay, ...args) =&gt; {
    var handle;
    return event =&gt; {
        clearTimeout(handle);
        handle = setTimeout(callback, delay, event, ...args);
    }
}

const debounce = (callback, delay, ...args) =&gt; {
    const timerClear = () =&gt; clear = true;
    var clear = true;
    return event =&gt; {
        if (clear) { 
            clear = false;
            setTimeout(timerClear, delay);
            callback(event, ...args);
        }
    }
}

addEventListener('input', debounce(logger, DELAY_MS, DISPLAYS[0]));
addEventListener('input', delay(logger, DELAY_MS, DISPLAYS[1]));
addEventListener('input', event =&gt; logger(event, DISPLAYS[2]));
addEventListener('input', delay(clear, CLEAR_DELAY_MS));
gun.focus();




/* Helper functions unrelated to question */
function clear() {
    var allClear = "";
    DISPLAYS.forEach(name =&gt; {
        var text = window["log" + name].textContent;
        allClear += window["log" + name].textContent = text.substring(1);
    })
    if (allClear !== "") {
       setTimeout(clear, CLEAR_SPEED_MS);
    } else {
       gun.value = "";
    }
}

function log(which) { window["log" + which].textContent += which }</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>b { font-size : large }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code&gt;
&lt;b&gt;Rumble!! Debounce V Delay V Immediate. With a 2 second delayed clear.&lt;/b&gt;&lt;/br&gt;
Debounced 250ms: &lt;span id="logðŸ’¥"&gt;&lt;/span&gt;&lt;/br&gt;
Delayed.. 250ms: &lt;span id="logðŸ’¤"&gt;&lt;/span&gt;&lt;/br&gt;
Immediate.. 0ms: &lt;span id="logâš¡"&gt;&lt;/span&gt;&lt;/br&gt;
&lt;/code&gt;
&lt;/br&gt;
&lt;input type="text" placeholder="Rapid fire key strokes" size="50" id="gun"&gt;</code></pre>
</div>
</div>

    </div>