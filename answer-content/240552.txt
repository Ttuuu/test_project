<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I suggest separating the tests of each endpoint to a different file.</p>

<h2>Signup tests</h2>

<p>Do you have <strong>validations</strong> for other fields except for the email? If so add tests for them. Examples: duplicate email, duplicate user name, weak password.</p>

<p>You can also test what happens if the <strong>structure</strong> of the request is wrong. For example missing fields. </p>

<p>You can add more tests with different invalid emails according to the email validation logic. But I suggest testing this in unit tests. </p>

<h2>Login tests</h2>

<p>I think you should have the following tests: </p>

<ul>
<li>Login without Signup </li>
<li>Login with a wrong username (after signup)</li>
<li>Login with a wrong password (after signup)</li>
<li>Successful login</li>
</ul>

<p>You should have a <strong>setup</strong> of <strong>signup</strong> in those tests. Which makes me wonder how <code>'should login with correct credentials'</code> works?</p>

<p>I saw in the code you have a mechanism for too many wrong login attempts so you should add tests for it.</p>

<h2>Assertions</h2>

<p>I see you are checking the <strong>status code</strong> and the <strong>structure</strong> of the payload but not its content. </p>

<h2>Failures Tests</h2>

<p>Since you are writing tests after the code is written, you can write tests for failures looking at the code and understand its assumptions. a simple example: what happens if the DB is down. </p>

<hr>

<p>In this answer, I am Ignoring the effort of writing those tests. It is your job to decide which worth the effort and which not.</p>

<p>You said </p>

<blockquote>
  <p>I know it's quite stupid to write tests after big portions of the API have already been written</p>
</blockquote>

<p><strong>So I encourage you to try TDD for your next API endpoint :-)</strong></p>
    </div>