<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are not much to work with in a review besides what mr. Slicer has already written.</p>

<hr>

<p>To make it a little more flexible you could though provide the number of bytes as an argument instead of a constant member value:</p>

<pre><code>      public static string GenerateToken(int numberOfBytes = 32)
</code></pre>

<p>Refactoring the class to handle that could be:</p>

<pre><code>public class ReviewdUrlToken
{
  /// &lt;summary&gt;
  /// Generate a fixed length token that can be used in url without endcoding it
  /// &lt;/summary&gt;
  /// &lt;returns&gt;&lt;/returns&gt;
  public static string GenerateToken(int numberOfBytes = 32)
  {
    return WebEncoders.Base64UrlEncode(GenerateRandomBytes(numberOfBytes));
  }

  /// &lt;summary&gt;
  /// Generate a cryptographically secure array of bytes with a fixed length
  /// &lt;/summary&gt;
  /// &lt;returns&gt;&lt;/returns&gt;
  private static byte[] GenerateRandomBytes(int numberOfBytes)
  {
    using (RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider())
    {
      byte[] byteArray = new byte[numberOfBytes];
      provider.GetBytes(byteArray);
      return byteArray;
    }
  }
}
</code></pre>

<hr>

<p>The class is OK as is, if you use it now and then in separate occasions, but if you want to generate more codes at the same time, you could consider to implement a factory like static method: </p>

<pre><code>  public static IEnumerable&lt;string&gt; GenerateTokens(int numberOfBytes = 32)
</code></pre>

<p>The benefit of that is that you can avoid the (possible expensive) instantiation of a new number generator for each token.</p>

<p>A revision of the class to accommodate to that could be:</p>

<pre><code>public class NewUrlToken : IDisposable
{
  RNGCryptoServiceProvider _provider = new RNGCryptoServiceProvider();
  int _numberOfBytes;

  public NewUrlToken(int numberOfBytes)
  {
    _numberOfBytes = numberOfBytes;
  }

  /// &lt;summary&gt;
  /// Generate a cryptographically secure array of bytes with a fixed length
  /// &lt;/summary&gt;
  /// &lt;returns&gt;&lt;/returns&gt;
  private byte[] GenerateRandomBytes()
  {
    byte[] byteArray = new byte[_numberOfBytes];
    _provider.GetBytes(byteArray);
    return byteArray;
  }

  public void Dispose()
  {
    // TODO Implement the proper Disposable pattern.
    if (_provider != null)
    {
      _provider.Dispose();
      _provider = null;
    }
  }

  private string GenerateToken()
  {
    return WebEncoders.Base64UrlEncode(GenerateRandomBytes());
  }

  /// &lt;summary&gt;
  /// Generate a fixed length token that can be used in url without endcoding it
  /// &lt;/summary&gt;
  /// &lt;returns&gt;&lt;/returns&gt;
  public static string GenerateToken(int numberOfBytes = 32)
  {
    return GenerateTokens(numberOfBytes).First();
  }

  public static IEnumerable&lt;string&gt; GenerateTokens(int numberOfBytes = 32)
  {
    using (NewUrlToken factory = new NewUrlToken(numberOfBytes))
    {
      while (true)
      {
        yield return factory.GenerateToken();
      }
    }
  }
}
</code></pre>

<hr>

<p>Usage:</p>

<pre><code>  foreach (string token in NewUrlToken.GenerateTokens().Take(10))
  {
    Console.WriteLine(token);
  }
</code></pre>
    </div>