<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since I don't know the pipeline of C# source code to executable (and I don't have enough experience to make an educated guess) you'll have to (micro)benchmark all the suggestions yourself. Potentially the code changes I'm pushing for are made obsolete by compiler, but hopefully these are improvements that give the compiler more room to do its thing.</p>
<p>I'm also only able to offer half an answer, I don't know the algorithim so I can't suggest any major improvements. I reckon you'll have more success improving the algorithms and data structures involved as the code looks pretty clean.</p>
<hr>
<p><strong>Integration Pass</strong></p>
<p>The neighbour loop skips any neighbours with a Flag set, does some work, and then checks another boolean associated with the neighbour. You could do both these checks at the start, and avoid unnecessary work if the second check fails.</p>
<pre><code>foreach (Coordinates neighbour in IntegrationPassNeighbours[theseCoordinates.sectorX, theseCoordinates.sectorY])
{
    if (neighbour.Flag || !neighbour.IsWalkable)
    {
        continue;
    }

    byte cost = neighbour.Cost.Value;
    int oldIntegration = neighbour.Integration.Value + cost;
    int newIntegration = theseCoordinates.Integration.Value + cost;

    if (newIntegration &lt; oldIntegration)
    {
        neighbour.Integration.Value = newIntegration;
        neighbour.SetFlag(true);
        openList.Enqueue(neighbour, newIntegration);
    }
}
</code></pre>
<p>The cost calculation does slightly more work than it needs to, and the result is not needed unless a condition passes. Looking at the code (below <code>byte cost = ...</code>) without names or types looks a little bit like this</p>
<pre><code>D = A + C;
E = B + C;
if (E &lt; D)
{
    // Use E
}
</code></pre>
<p>(Assuming no overflow) we don't need to compare D and E if we compare A and B. In other words, lets delay the computation of D and E until inside the block, and see what happens</p>
<pre><code>if (B + C &lt; A + C) // Replacing E and D with their definitions
{
    D = A + C
    E = B + C
    // Use E
}
</code></pre>
<p>Now it should be more obvious that 1) we can drop the + C from both sides of the condition and 2) we don't need D.</p>
<pre><code>if (B &lt; A)
{
    E = B + C
    // Use
}
</code></pre>
<p>Or back to code</p>
<pre><code>foreach (Coordinates neighbour in IntegrationPassNeighbours[theseCoordinates.sectorX, theseCoordinates.sectorY])
{
    if (neighbour.Flag || !neighbour.IsWalkable)
    {
        continue;
    }

    int neighbourIntegration = neighbour.Integration.Value;
    int theseIntegration = theseCoordinates.Integration.Value;
    if (theseIntegration &lt; neighbourIntegration)
    {
        byte cost = neighbour.Cost.Value;
        int newIntegration = theseIntegration + cost;
        neighbour.Integration.Value = newIntegration;
        neighbour.SetFlag(true);
        openList.Enqueue(neighbour, newIntegration);
    }
}
</code></pre>
<hr>
<p><strong>Flow Pass</strong></p>
<pre><code>foreach (Coordinates node in CoordinatesField)
{
    if (node.IsBlocked)
    {
        continue;
    }
    ...
}
</code></pre>
<p>If this is an unpredictable condition at the start of the loop, it might be a source of performance pain. Can you somehow remove this check? If the number of nodes which are clear (not labelled as blocked) is tiny, and this condition is met most of the time, you might be better off maintaining a separate data structure just for those nodes. It would be at a small memory cost, but it might alleviate pain for other tools like the JIT or branch predictor. If most nodes are clear, it might be worth doing the computation anyway, and doing the check later or somehow ignoring the result.</p>
<p>If it is not unpredictable, can you take advantage of the pattern, and still remove the condition?</p>
<p>If I have the general algorithm down, you find the smallest neighbour in a neighbourhood around the current node, and point in the direction of it. I'm sure there are a million ways to optimise this pattern, such as running the function in parallel over all the neighbourhoods at once, or doing some magic with a sliding window, but I don't know how easy they would be to implement. Perhaps you might be able to express each node is a pixel in an image, and use some highly optimised routine for computing gradients using convolutions.</p>
    </div>