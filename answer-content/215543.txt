<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>typedef struct weapons {
    int dagger = 2, sword = 3, axe = 4, mace = 5, bow = 3, arrows = 2;
} weapons;
</code></pre>

<p>The <code>typedef struct X { ... } X;</code> pattern is a C-ism; in C++ you don't need the typedef and can just write <code>struct X { ... };</code>.</p>

<p>You're creating a struct type named <code>weapons</code> with a bunch of per-instance member variables. This is almost certainly not what you meant to do. Probably what you meant was</p>

<pre><code>enum class Weapon {
    dagger = 2,
    sword = 3,
    axe = 4,
    mace = 5,
};
</code></pre>

<p>so that you could later write</p>

<pre><code>Weapon w = Weapon::sword;
if (w == Weapon::axe) { ... }
</code></pre>

<p>What you actually wrote, unfortunately, is simply nonsense.</p>

<hr>

<pre><code>character characterCreation(string name);
</code></pre>

<p>Look up the C++ notion of "constructors" (and also destructors). What you have here would normally be spelled something like</p>

<pre><code>Character::Character(const std::string&amp; name) {
    this-&gt;name = name;
    this-&gt;strength = rand() % 5 + 5;
}
</code></pre>

<p>and so on.</p>

<p>Also consider writing yourself a helper function</p>

<pre><code>int randint(int lo, int hi) {
    return rand() % (hi - lo) + lo;
}
</code></pre>

<p>so that you can write simply</p>

<pre><code>    this-&gt;strength = randint(5, 10);
</code></pre>

<p>Ninety percent of what we call "programming" is just finding sources of repetition and eliminating them.</p>
    </div>