<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few tips and tricks to add to <a href="https://codereview.stackexchange.com/a/237402/151754">David's excellent answer</a>.</p>

<hr>

<hr>

<pre class="lang-matlab prettyprint-override"><code>data = zeros(N,3);
for labelVal = 1:N
    redIdx = idx{labelVal};
    greenIdx = idx{labelVal}+numRows*numCols;
    blueIdx = idx{labelVal}+2*numRows*numCols;
    data(labelVal,1) = mean(Img(redIdx));
    data(labelVal,2) = mean(Img(greenIdx));
    data(labelVal,3) = mean(Img(blueIdx));
end 
</code></pre>

<p>Here, <code>idx</code> is linear indices into the first channel of <code>Img</code>. <code>Img</code> is a 3D array, with channels along the 3rd dimension. The indexing <code>Img(redIdx)</code>, <code>Img(greenIdx)</code> and <code>Img(blueIdx)</code> simply index into <code>idx</code>, <code>idx+number_of_pixels</code> and <code>idx+2*number_of_pixels</code>. Instead, we can transform <code>Img</code> into a 2D array, where all pixels are along one dimension and channels along the other. Now <code>idx</code> indexes the first dimension, and <code>Img(idx,:)</code> are the pixels given by <code>idx</code>. The code above simplifies to:</p>

<pre class="lang-matlab prettyprint-override"><code>data = zeros(N,3);
Img = reshape(Img,[],3); % note that this is essentially free, no data is copied.
for labelVal = 1:N
    data(labelVal,:) = mean(Img(idx{labelVal},:),1); % compute mean along 1st dimension
end 
</code></pre>

<p>(Don't overwrite <code>Img</code> if you need it later, you can use a temporary variable instead, in either case there won't be any data copied.)</p>

<hr>

<hr>

<pre class="lang-matlab prettyprint-override"><code>W_den=zeros(N);
for i=1:N
    for j=1:N
        if(Euc(i,j)~=0)
            %...
            W_den(i,i)=W_num(i,j)+W_den(i,i);
        end
    end
end
</code></pre>

<p>Here you only use the diagonal elements of <code>W_den</code>, the other <code>N*(N-1)</code> elements are never used. Instead, define <code>W_den</code> as a vector:</p>

<pre class="lang-matlab prettyprint-override"><code>W_den = zeros(N,1);
for i=1:N
    for j=1:N
        if(Euc(i,j)~=0)
            %...
            W_den(i) = W_num(i,j) + W_den(i);
        end
    end
end
</code></pre>

<p>This saves a lot of memory, and also speeds up computation because of the reduced cache pressure.</p>

<p>Written this way, it is trival to see that we can rewrite:</p>

<pre class="lang-matlab prettyprint-override"><code>W_den = zeros(N,1);
for i=1:N
    W_den(i) = sum(W_num(i,Euc(i,:)~=0));
end
</code></pre>

<p>But David already showed how to simplify this bit of code even further by using the knowledge that <code>W_num</code> is zero where <code>Euc</code> is zero. In this case, <code>W_den = sum(W_num,2)</code>.</p>

<hr>

<hr>

<pre class="lang-matlab prettyprint-override"><code>Euc=zeros(N);
% Euclidean Distance
for i=1:N
    for j=1:N
        if glcms(i,j)~=0
            Euc(i,j)=sqrt(((data(i,1)-data(j,1))^2)+((data(i,2)-data(j,2))^2)+((data(i,3)-data(j,3))^2));
        end
    end
end
</code></pre>

<p>David suggested using <code>pdist</code>, but we can also do this manually, which I show here to illustrate how to compute with matrices in MATLAB avoiding loops. I'll simplify the code step by step. First the expression within the inner loop can be simplified using vector operations:</p>

<pre class="lang-matlab prettyprint-override"><code>Euc=zeros(N);
% Euclidean Distance
for i=1:N
    for j=1:N
        if glcms(i,j)~=0
            Euc(i,j)=sqrt(sum((data(i,:)-data(j,:)).^2));
        end
    end
end
</code></pre>

<p>Next we remove the <code>if</code> statement:</p>

<pre class="lang-matlab prettyprint-override"><code>Euc=zeros(N);
% Euclidean Distance
for i=1:N
    for j=1:N
        Euc(i,j) = (glcms(i,j)~=0) * sqrt(sum((data(i,:)-data(j,:)).^2));
    end
end
</code></pre>

<p>Multiplying by the logical value <code>glcms(i,j)~=0</code> will set any elements where <code>glcms</code> is zero to 0. Next we remove the inner loop:</p>

<pre class="lang-matlab prettyprint-override"><code>Euc=zeros(N);
% Euclidean Distance
for i=1:N
    Euc(i,:) = (glcms(i,:)~=0) .* sqrt(sum((data(i,:)-data).^2,2));
end
</code></pre>

<p>Here we explicitly sum over the 2nd dimension, by default MATLAB sums over the first non-singleton dimension (dimension with more than one element). It is good practice to always explicitly state which dimension to sum over.</p>

<p>Finally, removing the outer loop is more complicated because it requires reshaping arrays:</p>

<pre class="lang-matlab prettyprint-override"><code>% Euclidean Distance
Euc = (glcms~=0) .* sqrt(sum((reshape(data,[],1,3)-reshape(data,1,[],3)).^2,3));
</code></pre>

<p>We've reshaped <code>data</code> in two different ways, to a <code>N</code>x1x3 array and to a 1x<code>N</code>x3 array. Subtracting these two arrays leads to a <code>N</code>x<code>N</code>x3 array. We take the square of the array, then sum along the new 3rd dimension (which corresponds to the original 2nd dimension).</p>
    </div>