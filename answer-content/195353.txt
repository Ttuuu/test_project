<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're going to roll your own allocator in C++17, you can save yourself a lot of grief by just leaving everything to default. The only things you need to include are <code>value_type</code>, <code>allocate()</code>, <code>deallocate()</code>, and operators <code>==</code> and <code>!=</code>.</p>

<p>In fact, I believe by <em>not</em> using the defaults, you've introduced a nasty little bug. Try doing this: <code>auto v = pod_vector&lt;int&gt;(5, 42);</code>. This should create a vector with five <code>int</code>s, all set to <code>42</code>. But without <code>construct()</code> properly defined, who knows what will happen?</p>

<p>My advice:</p>

<ul>
<li>Your allocator should be 4 lines.

<ol>
<li>the <code>static_assert</code></li>
<li><code>value_type</code></li>
<li><code>allocate()</code></li>
<li><code>deallocate()</code></li>
</ol></li>
</ul>

<p>(And you need the <code>==</code> and <code>!=</code> comparisons too.)</p>

<p>At the very least, either remove <code>construct()</code> or give it a sensible implementation (i.e., placement <code>new</code>). With <code>destroy()</code> it's less of an issue because you're only dealing with PODs.</p>

<hr>

<p><strong>AFTER EDIT 1:</strong> I'd wager the reason you're seeing better code generation for <code>malloc()</code> than <code>new</code> is that <code>new</code> throws <code>std::bad_alloc</code> automatically when it can't allocate.</p>

<p>I suspect if you changed your <code>allocate()</code> function to:</p>

<pre><code>auto allocate(std::size_t num)  {
    auto const p = (T*) malloc(sizeof(T) * num);
    if (!p)
        throw std::bad_alloc{};
    return p;
}
</code></pre>

<p>you'd see a very different code gen situation.</p>

<p>As it stands, if you get an allocation failure, you're just returning a null pointer... which will lead to undefined behaviour, because <code>allocate()</code> <em>must</em> return a pointer to allocated memory.</p>
    </div>