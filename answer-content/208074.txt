<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Taking advantage of the input being fully lowercase ASCII</p>
</blockquote>

<p>While it says that all characters are lowercase it doesn't say anything about ASCII. Given that it passed the tests that was okay, but generally lowercase doesn't imply ASCII.</p>

<blockquote>
  <p>I created two bit vectors to track when we encounter a character for the first and second time. </p>
</blockquote>

<p>And that really requires the input to be ASCII. Because <code>char</code> can hold any value between 0 and 65535 the <code>&lt;&lt;</code> might not be safe to use, I'm not a Java programmer but it could result in an exception, an unwanted result or undefined behavior.</p>

<p>But if it's just ASCII characters between <code>'a'</code> and <code>'a' + 31</code> the approach will work.</p>

<blockquote>
  <p>Can this code be improved further? LeetCode says that below code is better than 94.33% solutions. What else could have been done by the last 5.67% solutions that they were better?</p>
</blockquote>

<p>It seems like your definition of "improvement" is "better performance". But that again is probably not how every programmer defines "improvement". </p>

<p>As far as I see it:</p>

<ul>
<li>You don't have any comments, </li>
<li>you don't have tests, </li>
<li>your variables have odd names. For example: <code>firstSpot</code> is a weird name for a bitarray that represents if a character has been found once, ...</li>
<li>you don't have benchmarks</li>
</ul>

<p>So my personal opinion is: There's lots of room for improvement.</p>

<hr>

<p>I also have some thoughts about the algorithm and how it could be improved. As said I'm not a Java programmer so I'm just sharing some thoughts:</p>

<ul>
<li><p>You iterate over the string three times while it would be possible to iterate only once. You could create an array of integers (26 elements long) to store the first occurrence of each character and after the loop you look at the elements that only occurred once and then take the minimum of the indices. Since you iterate with index you can remove the <code>toCharArray</code> and index into the string directly (which incidentally may be a faster way to iterate over the string altogether, according to <a href="https://stackoverflow.com/q/196830/5393381">this StackOverflow Q+A</a>).</p></li>
<li><p>In case there is no single character you might even stop the loop early. As soon as your <code>secondSpot</code> bitarray contains an entry for all ASCII characters you can immediately return <code>-1</code>.</p></li>
<li><p>As the others mentioned you could even drop some of the "branches" inside the loop which may give some performance improvement.</p></li>
</ul>
    </div>