<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Make members <code>final</code></h3>

<p><code>final</code> member variables are easy to work with.
As they can never be reassigned, they are less error prone, as accidental reuses are not possible.</p>

<p>For example,
in <code>Dot</code>, you can make all members <code>final</code>.
In <code>Controller</code>, you can make <code>blobs</code>, <code>dots</code>, <code>b</code>, <code>mf</code> members <code>final</code>.</p>

<h3>Make members <code>private</code></h3>

<p>It's a good policy to make member variables <code>private</code> by default,
and relax the visibility only when needed.
It keeps your interfaces cleaner,
by hiding internal details that users of the class don't need to see.
It also helps avoiding bugs.</p>

<p>For example in <code>Controller</code>, all members can be <code>private</code>.</p>

<h3>Eliminate pointless members</h3>

<p>In <code>Controller</code>, the members <code>mouseX</code> and <code>mouseY</code> can be converted to local variables in the <code>MyMouseMoveListener</code> inner class.</p>

<p>In <code>Blob</code>, the member <code>blob</code> is never used, so it can be safely deleted.</p>

<h3>Don't catch <code>Exception</code></h3>

<p>It's a very bad practice to catch <code>Exception</code>.
Whenever you can,
always catch the most specific kind of <code>Exception</code> that you expect in the code block.
Otherwise it might catch exceptions that you didn't really expect,
and which indicate a bug in the program and you might never know.</p>

<h3>Don't ignore exceptions</h3>

<p>It's a very bad practice to use an empty <code>catch</code> block when handling exceptions.
At the minimum, leave a comment why it is "OK" to do nothing.</p>

<h3>Generating random numbers</h3>

<p>There's no need to create multiple <code>Random</code> objects in a loop.
Create a single <code>Random</code> object before the loop,
and reuse it.
So instead of:</p>

<blockquote>
<pre><code>while (true) {
    Random random = new Random();
    int num = random.nextInt(40);
</code></pre>
</blockquote>

<p>This is better:</p>

<pre><code>Random random = new Random();
while (true) {
    int num = random.nextInt(40);
</code></pre>

<h3>Avoid raw types</h3>

<p>There's really no excuse for using a raw <code>Iterator</code> and an ugly cast here:</p>

<blockquote>
<pre><code>Iterator i = dots.iterator();
while (i.hasNext()) {
    Dot d = (Dot) i.next();
    d.paint(g);
}
</code></pre>
</blockquote>

<p>Using parameterized types properly:</p>

<pre><code>Iterator&lt;Dot&gt; i = dots.iterator();
while (i.hasNext()) {
    Dot d = i.next();
    d.paint(g);
}           
</code></pre>

<h3>Use enhanced for-each to iterate over a collection</h3>

<p>This is an archaic, tedious way to iterate over a collection:</p>

<blockquote>
<pre><code>Iterator i = dots.iterator();
while (i.hasNext()) {
    Dot d = (Dot) i.next();
    d.paint(g);
}
</code></pre>
</blockquote>

<p>This is an idiomatic, better way:</p>

<pre><code>for (Dot d : dots) {
    d.paint(g);
}
</code></pre>
    </div>