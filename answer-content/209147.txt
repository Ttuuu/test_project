<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Fix the compiler warnings</h1>

<p>These should all be straightforward to address:</p>

<pre class="lang-none prettyprint-override"><code>gcc -std=c17 -fPIC -g -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds      -Wconversion    171784.c    -o 171784
171784.c:11:1: warning: ‘typedef’ is not at beginning of declaration [-Wold-style-declaration]
 }typedef DataItem;
 ^
171784.c: In function ‘main’:
171784.c:163:36: warning: passing argument 3 of ‘putValueForKey’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     putValueForKey(hashArray, 100, "MAIN");
                                    ^~~~~~
171784.c:56:58: note: expected ‘char *’ but argument is of type ‘const char *’
 void putValueForKey(DataItem** hashArray, int key, char *data) {
                                                    ~~~~~~^~~~
171784.c:164:36: warning: passing argument 3 of ‘putValueForKey’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     putValueForKey(hashArray, 107, "LOOP");
                                    ^~~~~~
171784.c:56:58: note: expected ‘char *’ but argument is of type ‘const char *’
 void putValueForKey(DataItem** hashArray, int key, char *data) {
                                                    ~~~~~~^~~~
171784.c:165:36: warning: passing argument 3 of ‘putValueForKey’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     putValueForKey(hashArray, 121, "END");
                                    ^~~~~
171784.c:56:58: note: expected ‘char *’ but argument is of type ‘const char *’
 void putValueForKey(DataItem** hashArray, int key, char *data) {
                                                    ~~~~~~^~~~
171784.c:166:36: warning: passing argument 3 of ‘putValueForKey’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     putValueForKey(hashArray, 122, "STR");
                                    ^~~~~
171784.c:56:58: note: expected ‘char *’ but argument is of type ‘const char *’
 void putValueForKey(DataItem** hashArray, int key, char *data) {
                                                    ~~~~~~^~~~
171784.c:167:36: warning: passing argument 3 of ‘putValueForKey’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     putValueForKey(hashArray, 129, "LENGTHHHHHHHHHHHHHHHHHHHHH");
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
171784.c:56:58: note: expected ‘char *’ but argument is of type ‘const char *’
 void putValueForKey(DataItem** hashArray, int key, char *data) {
                                                    ~~~~~~^~~~
171784.c:168:36: warning: passing argument 3 of ‘putValueForKey’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     putValueForKey(hashArray, 132, "K");
                                    ^~~
171784.c:56:58: note: expected ‘char *’ but argument is of type ‘const char *’
 void putValueForKey(DataItem** hashArray, int key, char *data) {
                                                    ~~~~~~^~~~
171784.c:169:36: warning: passing argument 3 of ‘putValueForKey’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
     putValueForKey(hashArray, 133, "M1");
                                    ^~~~
171784.c:56:58: note: expected ‘char *’ but argument is of type ‘const char *’
 void putValueForKey(DataItem** hashArray, int key, char *data) {
                                                    ~~~~~~^~~~
</code></pre>

<h1>Fix the memory leak</h1>

<pre class="lang-none prettyprint-override"><code>valgrind -q --leak-check=full ./171784   
 (100,MAIN) (121,END) (122,STR) ~~  ~~  ~~  ~~  (107,LOOP) ~~  (129,LENGTHHHHHHHHHHHHHHHHHHHHH) ~~  ~~  (132,K) (133,M1) ~~  ~~  ~~  ~~  ~~  ~~ 
Element found: MAIN
Element not found
 ~~  (121,END) (122,STR) ~~  ~~  ~~  ~~  (107,LOOP) ~~  (129,LENGTHHHHHHHHHHHHHHHHHHHHH) ~~  ~~  (132,K) (133,M1) ~~  ~~  ~~  ~~  ~~  ~~ 
==26310== 16 bytes in 1 blocks are definitely lost in loss record 1 of 1
==26310==    at 0x483577F: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==26310==    by 0x109271: putValueForKey (171784.c:60)
==26310==    by 0x10955D: main (171784.c:163)
==26310== 
</code></pre>

<p>It seems that the first item to be inserted was never freed.</p>

<p>That seems to be a bug in the test program: <code>deleteHash()</code> transfers ownership to its caller, meaning that <code>main()</code> is now responsible for freeing that item.  It's easily fixed:</p>

<pre><code>free(deleteHash(hashArray, item));
</code></pre>

<p>However, this is a warning that you might not have thought sufficiently about <em>ownership</em> of objects, in general.  Give this some more thought, and try to make your code easy to use correctly, and harder to use incorrectly.</p>

<h1>Style points</h1>

<p>I noticed a few things whilst looking at this, but haven't done a thorough inspection. Other reviews have addressed quite a few style points; I'll try to make only new observations here.</p>

<ul>
<li><p>Don't cast the result of <code>malloc()</code> and family, and prefer to use the size of the variable rather than its type, to ensure consistency (and make that consistency obvious):</p>

<pre><code>DataItem *item =  malloc(sizeof *item);
</code></pre></li>
<li><p>It's fine to pass a null pointer to <code>free()</code>, so there's very little point pre-testing the argument:</p>

<pre><code>for (size_t i = 0;  i &lt; SIZE;  ++i) {
    free(hashArray[i]);
}
</code></pre></li>
</ul>

<h1>Add more tests</h1>

<p>The <code>main()</code> function performs only a very basic test.  We should add tests that </p>

<ul>
<li>attempt to insert duplicate keys and entries with negative keys</li>
<li>attempt to insert more than <code>SIZE</code> entries</li>
<li>attempt to remove keys that aren't present</li>
</ul>

<p>And we might consider tests of misuse, such as</p>

<ul>
<li>calling <code>freeHashTable()</code> twice</li>
</ul>

<p>Advanced testing would also substitute <code>malloc()</code> with a library that allows failure injection, so that we can test the error paths.</p>
    </div>