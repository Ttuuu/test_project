<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another bit shifting solution that is a bit more general than @Xiaoy312's. It does not use a type cast and can therefore be implemented as generic function. Also, the trailing zero handling is simpler.</p>

<pre><code>public static int ComputeLargestBinaryGap(int n)
{
    int max = 0, count = 0;
    n |= n - 1;
    while (n != n &gt;&gt; 1)
    {
        n &gt;&gt;= 1;
        if ((n &amp; 1) == 1)
        {
            if (count &gt; max)
                max = count;
            count = 0;
        }
        else
            count++;
    }
    return max;
}
</code></pre>

<p>Some details:</p>

<ul>
<li><p><code>n |= n - 1;</code> replaces all trailing zeros with ones.</p></li>
<li><p><code>n != n &gt;&gt; 1</code> works for both positive and negative numbers.</p></li>
<li><p><code>n &gt;&gt;= 1;</code> must be moved upwards to not terminate one iteration early for negative inputs. It can be moved because the least significant bit is a one or ignored zero anyway.</p></li>
</ul>
    </div>