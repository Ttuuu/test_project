<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By storing all possible substrings in a dictionary, you require memory for all the duplicates your are creating.
This is probably the cause for the memory errors.</p>

<p>You also iterate over two dictionaries and the (long) list, which will be slower than what is described below.
Creating the <code>lst</code> in the first place requires two nested <code>for</code> loops; they don't have quadratic complexity, but are expensive still.</p>

<hr>

<p>The problem can be tackled very differently if seen like in the following.
Take the example of <code>BANANA</code>.
Its length is <code>word_length = 6</code>.
You look at the first letter, <code>B</code>; it's a consonant.
As such, Stuart would score for this one.</p>

<p>Of course, the substring <code>BANANA</code> occurs only once in <code>BANANA</code>.
However, you can count all truncations of it as their own substrings.
One by one, you chop off the last letter, leading you to:</p>

<pre><code>BANANA
BANAN
BANA
BAN
BA
B
</code></pre>

<p>All of these are substrings found in <code>BANANA</code>.
Remember, we are still looking at the first letter, <code>B</code>, which is indexed as <code>0</code>.
We found <code>word_length - i = 6 - 0 = 6</code> valid substrings, all of which count towards Stuart's score.</p>

<p>Let's see if the above pattern holds going forward.
The next letter is <code>A</code>, <code>i</code> becomes <code>1</code>.
<code>word_length</code> is a constant.</p>

<pre><code>ANANA
ANAN
ANA
AN
A
</code></pre>

<p>This makes for <code>6 - 1 = 5</code> valid substrings, counted towards Kevin's score this time.</p>

<p>The third step looks like:</p>

<pre><code>NANA
NAN
NA
N
</code></pre>

<p>with a score of <code>word_length - i = 6 - 2 = 4</code> for Stuart.</p>

<p>Note that substrings which occur more than once are counted correctly.
For example, the substring <code>NA</code> will be counted twice in the overall score.
Until now, it has been accounted for once, in the third step.
The next time it is counted will be in the fifth step, where the substrings looks like:</p>

<pre><code>NA
N
</code></pre>

<p>As such, <code>N</code> will also be counted correctly (twice).</p>

<hr>

<p>Let the input string length be <span class="math-container">\$ n \$</span>.
In this case, the below approach only iterates over it once, leading to <span class="math-container">\$ \mathcal{O}(n) \$</span>, linear, complexity.
The rest is just incrementing integers, which is very cheap.
<code>word_length</code> has to be computed once, which is <span class="math-container">\$ \mathcal{O}(1) \$</span> (constant/cheap).</p>

<pre class="lang-py prettyprint-override"><code>def minion_game(word):
    # word = input()

    vowels = "AEIOU"

    vowel_score = 0
    consonant_score = 0

    word_length = len(word)
    for idx, letter in enumerate(word):
        delta = word_length - idx
        if letter in vowels:
            vowel_score += delta
        else:
            consonant_score += delta

    if vowel_score &gt; consonant_score:
        print("Kevin", vowel_score)
    elif vowel_score &lt; consonant_score:
        print("Stuart", consonant_score)
    else:
        print("Draw")
</code></pre>

<hr>

<p>Other points on your code:</p>

<pre class="lang-py prettyprint-override"><code> for x,y in kevin.items():
        kevin_sm += y
</code></pre>

<p>can just be</p>

<pre class="lang-py prettyprint-override"><code> for y in kevin.values():
        kevin_sm += y
</code></pre>

<hr>

<pre class="lang-py prettyprint-override"><code>vowels = ['A','E','I','O','U']
</code></pre>

<p>can, in this context, just be</p>

<pre class="lang-py prettyprint-override"><code>vowels = "AEIOU"
</code></pre>

<p>It will behave the same for the <code>in</code> lookup.
You will want a list if you required a mutable object.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>for i in lst:
</code></pre>

<p>is very misleading variable naming.
<code>lst</code> is a list of string slices, and not indices (<code>i</code>).
It should read something like</p>

<pre class="lang-py prettyprint-override"><code>for substring in substrings:
</code></pre>

<p>(aka, also rename the too-generic <code>lst</code> variable).</p>
    </div>