<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both impressive and ambitious!</p>
<h2>Passwords</h2>
<blockquote>
<p>the absolute requirement of a 32 character long password ensures it will take a considerable amount of time to break the encryption</p>
</blockquote>
<p>It will also ensure that some users will be writing that password down or saving it to a text file, defeating the entire purpose of a password. A softer approach would be, during the password saving procedure, do an entropy check with a library that provides this. Issue a warning if the entropy is below a predetermined value.</p>
<blockquote>
<p>I let Fernet decide if the password is correct, instead of implementing something myself. Is this a good way of going about this?</p>
</blockquote>
<p>Yes!</p>
<h2>Performance</h2>
<blockquote>
<p>I'm also fairly concerned about the time between each encrypt and decrypt. Should I only decrypt when the user wants to insert or query the database?</p>
</blockquote>
<p>That's a loaded question. If you expect your database to be potentially massive (over the size of RAM), then some of it will need to stay on disc, and it might as well stay encrypted there.</p>
<p>The bigger question is: how do you cache your data? If the cache is aggressively memory-resident, it might be considered a security weakness to hold onto unencrypted contents in RAM for long periods of time. Another factor is the maximum acceptable latency between receiving a query, decrypting the contents on-the-fly if necessary and returning the result. Yet another factor is convenience of use: is authentication per-query, or per-session? I've never seen any databases authenticate per-query, but it's not entirely out of the question.</p>
<p>I don't have good answers to these, so I suggest that you do some testing at scale.</p>
<h2>Private methods</h2>
<blockquote>
<p>the double underscore ones, such as __encrypt_db. I'm familiar with the purpose of hiding functions that are meant to be internal. Am I using this convention correctly?</p>
</blockquote>
<p>Not really. It should just be <code>_encrypt_db</code>. Read more <a href="https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-single-and-double-underscore-before-an-object-name">here</a>.</p>
<h2>Top-level classes</h2>
<p>You're in Python 3, so these parens are not necessary:</p>
<pre><code>class LinDB():
</code></pre>
<h2>Type hints</h2>
<pre><code>pair: Dict
</code></pre>
<p>A dictionary of what? <code>Dict[str, str]</code>? Also,</p>
<pre><code>name, pw=None
</code></pre>
<p>is probably</p>
<pre><code>name: str, pw: Optional[str] = None
</code></pre>
<h2>Overambitious methods</h2>
<p>This return type:</p>
<pre><code>Union[None, List[Any], bool]
</code></pre>
<p>is a huge red flag that your query method is not specific enough, and trying to do too many things at once. I think your callers will not find the merging of all of these invocations convenient, and would benefit instead from you separating this out into <code>query_for_key</code>, <code>query_for_value</code>, etc.</p>
    </div>