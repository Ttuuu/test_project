<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can actually omit <code>fs.exists()</code>. The <code>fs.stat()</code> will return an error when the item you are testing is not there. You can scavenge through the <code>err</code> object that <code>fs.stat()</code> returns to see what error caused it. As I remember, when <code>fs.stat()</code> stats a non-existing entry, it returns an <code>ENOENT, no such file or directory</code> error.</p>

<p>And so:</p>

<pre><code>var fs = require('fs')
  , filename = process.args[2]
  ;

fs.stat(filename, function(err, stats) { 
  if(err){
    //doing what I call "early return" pattern or basically "blacklisting"
    //we stop errors at this block and prevent further execution of code

    //in here, do something like check what error was returned
    switch(err.code){
      case 'ENOENT':
        console.log(filename + ' does not exist');
        break;
      ...
    }
    //of course you should not proceed so you should return
    return;
  }

  //back there, we handled the error and blocked execution
  //beyond this line, we assume there's no error and proceed

  if (stats.isDirectory()) {
    console.log(filename + ": is a directory");
  } else {
    console.log(filename);
  }
});
</code></pre>

<p>So essentially, we reduced the number of indents caused by callbacks and also reduced it by restructuring <code>if-else</code> statements</p>
    </div>