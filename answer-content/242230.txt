<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>looking for feedback on my implementation of a singly linked list.</p>
</blockquote>

<p><strong>Not enough info in the .h</strong></p>

<p>Consider that the .c file is opaque to the user - they cannot see it.  The .h file is a good place to document and provide simply usage notes.  Looking at this .h file, I do not know how to properly define a <code>List</code> variable.</p>

<p><strong><code>const</code></strong></p>

<p>Referenced data not changed is best as <code>const</code>.  It allows for some additional uses, optimizations and conveys the code's intention.</p>

<pre><code>// int list_len(List* head);
// List* array_to_list(int* vals, size_t size);
// void print_list(List* head);
int list_len(const List* head);
List* array_to_list(const int* vals, size_t size);
void print_list(const List* head);
</code></pre>

<p><strong>What happens when ...</strong></p>

<p>Some functions are self documented by name: <code>list_insert_end()</code>.  Yet <code>list_insert()</code> deserves more detail.  What happens when the index is <em>much</em> more than the list length? </p>

<p>This applies to a number of functions: what do they do?</p>

<p>IOWs, some light documentation in the .h file helps a lot.</p>

<p><strong><code>int</code> or <code>size_t</code></strong></p>

<p>Choose <em>one</em> type, recommend <code>size_t</code>, to handle list size.</p>

<pre><code>vvv
int list_len(List* head);
List* array_to_list(int* vals, size_t size);
                               ^^^^^^
</code></pre>

<hr>

<p>.c</p>

<p><strong>Consider allocating to the size of the referenced type</strong></p>

<p>Easier to write correctly, review and maintain.</p>

<pre><code>// list = malloc(sizeof(List));
list = malloc(sizeof *list);
</code></pre>

<p><strong>Good use of first #include is this file's .h</strong> </p>

<pre><code>#include "list.h"
</code></pre>

<p><strong>Size 0</strong></p>

<p><code>array_to_list(int* vals, size_t size)</code> does not handle <code>size == 0</code>.  Most (all?) of the code has trouble with an empty list.  IMO, this is a fatal design flaw.
A <code>list</code> should be allowed to be initially empty.</p>

<p>The <code>List list = *array_to_list((int[]){1, 2, 3, 4}, 4);</code> is a novel, yet unclear way to initialize.</p>

<p><strong><code>main()</code></strong></p>

<p>Better to have <code>main()</code> in another file than list.c.</p>

<hr>

<p><strong>Well formatted code</strong></p>
    </div>