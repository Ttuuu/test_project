<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm unclear on why <code>GameView</code> has a list of <code>@property</code> functions that are just static strings. This might in theory be useful if you have to support i18n, but I doubt that's the intent here. As such, <code>intro</code>, <code>number_of_players</code>, <code>number_of_players_error</code>, <code>draw</code>, etc. don't need to be properties; that's just clutter.</p>

<p>Another quirk of <code>GameView</code> is that <code>self</code> is never used, so it doesn't deserve to be a class. At most, if you needed to keep those functions but wanted them in a namespace, you would move them into the global scope and use <code>views</code> as the namespace.</p>

<p>To make your board initialization literal easier to read, you can write</p>

<pre><code>board = [1, 'O', 'O', 'X', 5, 'X', 7, 8, 9]
</code></pre>

<p>as</p>

<pre><code>board = ( 1 ,'O', 'O',
         'X', 5 , 'X',
          7 , 8 ,  9 )
</code></pre>

<p>That particular set of data is problematic. You're mixing up "display" data (i.e. 'X') with "logical" data (i.e. 7). The format of your board should be such that it isn't translated to display characters until it hits the view.</p>

<p>You have tests! Awesome!</p>

<p>Your player number input loop is awkward. I'd suggest rewriting it as:</p>

<pre><code>while True:
    try:
        players = int(input(self.view.number_of_players))
        if not (1 &lt;= players &lt;= 2):
            raise ValueError()
        break
    except ValueError:
        print(self.view.number_of_players_error)

if players == 1:
    type_2 = ComputerController
else:
    type_2 = HumanController
self.play(HumanController(player=1),
          type_2(player=2))
</code></pre>

<p>This:</p>

<pre><code>if resp != 'n':
</code></pre>

<p>should lower-case <code>resp</code> before the check.</p>

<p>This:</p>

<pre><code>self.display_board
</code></pre>

<p>is nasty. You're accessing a property, relying on its side-effect to do a <code>print</code>. Properties should be simple value-returning functions. Make that a normal function.</p>

<p>Given this:</p>

<pre><code>class PlayerController:
    player = None
</code></pre>

<p>I'm unclear on why you declared <code>player</code> at the class level. That can probably go away.</p>

<p>This:</p>

<pre><code>raise NotImplementedError
</code></pre>

<p>doesn't do what you think it does. You need to add <code>()</code> for that error type to be instantiated.</p>

<p>This:</p>

<pre><code>        try:
            move = int(move) - 1
        except:
            move = -1
</code></pre>

<p>should catch <code>ValueError</code>; the exception clause is too broad.</p>

<p>This:</p>

<pre><code>self.board = [None for _ in range(9)]
</code></pre>

<p>can just be</p>

<pre><code>self.board = [None]*9
</code></pre>

<p>This</p>

<pre><code>i + 1 if not x else x
</code></pre>

<p>can just be</p>

<pre><code>x or (i + 1)
</code></pre>
    </div>