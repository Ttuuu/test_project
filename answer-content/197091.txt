<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You aren't giving a <em>Type</em> to most of these variables -</p>

<blockquote>
<pre><code>Dim InsName, InsNumber, CurrentYear, Industry, AnalysisToolPath, AnalysisToolName, FileNameFragment2, TodaysDate, TemplatePath As String
</code></pre>
</blockquote>

<p>In fact, only <code>TemplatePath</code> has a type. The rest are <em>all variants</em>. You need to explicitly type all of them e.g.</p>

<pre><code>Dim InsName as String, InsNumber as String, CurrentYear as String, ...
</code></pre>

<p>When you don't define your variable, VBA will declare it as a <em>Variant</em> type that can hold any type of data. While this may be more flexible, it adds processing time to your macro as VBA decides or tests for the type. Additionally, since a Variant can be any type of data, you may miss out on valuable troubleshooting information on <em>Type Mismatch</em></p>

<p>When you don't define your variable, VBA will declare it as a <em>Variant</em>, which are <a href="https://msdn.microsoft.com/en-us/library/twcxd6b8.aspx" rel="nofollow noreferrer">objects</a>:</p>

<blockquote>
  <p>Performance. A variable you declare with the Object type is flexible
  enough to contain a reference to any object. However, when you invoke
  a method or property on such a variable, you always incur late binding
  (at run time). To force early binding (at compile time) and better
  performance, declare the variable with a specific class name, or cast
  it to the specific data type.</p>
</blockquote>

<p>This also includes not defining <code>RADType</code>, <code>NotificationWhenDone</code> etc</p>

<hr>

<p>You have a bunch of comments. Comments - <a href="http://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/" rel="nofollow noreferrer">"code tell you how, comments tell you why"</a>. The code should speak for itself, if it needs a comment, it might need to be made more clear. If not, the comment should describe <em>why</em> you're doing something rather than <em>how</em> you're doing it. Here are a <a href="http://programmers.stackexchange.com/a/254979/125931">few reasons</a> to avoid comments all together.</p>

<hr>

<pre><code>Dim wApp As Word.Application
Set wApp = CreateObject("Word.Application")
</code></pre>

<p>Are you using early binding or late binding, because you're doing both. Either</p>

<pre><code>Dim wApp As Object
Set wApp = CreateObject("Word.Application")
</code></pre>

<p>or</p>

<pre><code>Dim wApp As Word.Application
Set wApp = New Word.Application
</code></pre>

<hr>

<p>As you know, When you repeat code you can most likely benefit from <em>refactoring</em> it. Throw it into a function or method and use the function each time you need the code - it will be a lot cleaner.</p>

<p>As addressed by the other answer something like</p>

<pre><code>Public Sub CreateDocument(ByVal templateSheet As Worksheet, ByVal parameterSheet As Worksheet)
</code></pre>

<p>And you pass the target worksheets to it. Or maybe you pass the target word document, or whatever changes each time you need to call the sub.</p>

<p>Speaking of the worksheets - Worksheets have a <code>CodeName</code> property - View Properties window (<kbd>F4</kbd>) and the <code>(Name)</code> field (the one at the top) can be used as the worksheet name. This way you can avoid <code>Sheets("mySheet")</code> and instead just use <code>mySheet</code>.</p>

<hr>

<p>I don't really have the time right now, but it seems you do the <strong>exact same thing over and over</strong>? I don't see anything changing - all the ranges are hard-coded.</p>
    </div>