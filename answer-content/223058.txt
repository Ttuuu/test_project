<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Don't use an alibi-class. It doesn't make the code any more OO, even in the cases it would be desirable, it just adds to the clutter.</p></li>
<li><p><code>Solution</code> and <code>convert</code> are such generic names. Naming is hard, but good names really help.</p></li>
<li><p>You know an <code>int</code> need not be positive? An unsigned type may be more appropriate for a count, but even then you should handle zero.</p></li>
<li><p>Only if you need a null-terminated string should you consider a parameter of type <code>std::string const&amp;</code>. In all other cases, using <code>std::string_view</code> is more efficient.</p></li>
<li><p>While creating a temporary string of length 1 probably doesn't cause dynamic allocation due to small-string-optimisation (or allocation ellision), doing so just to add a character to the result-string is cumbersome and potentially quite inefficient (in theory, the compiler could optimise it all out). Just append it directly.</p></li>
<li><p>If you assign directly, <code>diff</code> is gone.</p></li>
<li><p><code>useDiff</code> doesn't make a difference, so remove it.</p></li>
<li><p>Consider adding additional test-cases. For that, you should rewrite <code>main()</code>.</p></li>
</ol>

<p>See the modified code <a href="https://coliru.stacked-crooked.com/a/427175e4cf3e4c7c" rel="nofollow noreferrer">live on coliru</a>:</p>

<pre><code>#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;stdexcept&gt;

auto zigzag(std::string_view s, std::size_t cRows) {
    if (!cRows)
        throw std::domain_error("Must output at least one row.");
    if (!cRows || cRows &gt;= s.size())
        return std::string(s);
    std::string r;
    r.reserve(s.size());
    const auto period = 2 * cRows - 2;
    for (auto row = 0 * cRows; row &lt; cRows; ++row) {
        auto delta = 2 * row;
        auto delta2 = period - delta;
        if (!delta) delta = period;
        if (!delta2) delta2 = period;
        for (auto i = row; i &lt; s.size(); i += delta) {
            r += s[i];
            std::swap(delta, delta2);
        }
    }
    return r;
}

#include &lt;iostream&gt;

struct test {
    std::string_view in;
    std::size_t n;
    std::string_view out;
};

int main() {
    constexpr test cases[]{
        "0123456789", 3, "0481357926",
        "", 1, "",
        "0123456789", 10, "0123456789",
        "0123456789", 2, "0246813579",
    };
    for (auto&amp;&amp; x : cases) {
        std::cout &lt;&lt; "zigzag(\"" &lt;&lt; x.in &lt;&lt; "\", " &lt;&lt; x.n &lt;&lt; ") == \"" &lt;&lt; x.out;
        auto r = zigzag(x.in, x.n);
        if (r == x.out)
            std::cout &lt;&lt; "\": PASSED\n";
        else
            std::cout &lt;&lt; "\": FAILED, got \"" &lt;&lt; r &lt;&lt; "\"\n";
    }
}
</code></pre>
    </div>