<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is more of a suggestion on substance than a review of the code style; I'll leave that for other reviewers.</p>

<p>Your solution looks pretty good to me. I think you could streamline it a bit by doing it all in one shot, without checking the length of the strings first. For example:</p>

<pre class="lang-c prettyprint-override"><code>int one_way(const char *a, const char *b)
{
    int misses = 0, ia = 0, ib = 0, missed_index = 0;
    while (a[ia] || b[ib]) {
        /* Characters at this position match? Keep going... */
        if (a[ia] == b[ib]) {
            if (a[ia]) ++ia;
            if (b[ib]) ++ib;
        /* Mismatched characters? */
        } else {
            /* Already missed once; backtrack if skipped earlier, or bail. */
            if (++misses &gt; 1) {
                if (missed_index) {
                    ia = missed_index;
                    ib = missed_index;
                    missed_index = 0;
                }
                else return 0;
            /* No misses yet... */
            } else {
                /* Skip buffer A ahead if its next char matches buffer B. */
                if (a[ia] &amp;&amp; a[ia + 1] == b[ib]) {
                    ++ia;
                    missed_index = ia;
                }
                /* Skip buffer B ahead if its next char matches buffer A. */
                if (b[ib] &amp;&amp; b[ib + 1] == a[ia]) {
                    ++ib;
                    missed_index = ib;
                }
                /* Skip both buffers ahead, if neither was skipped. */
                if (!missed_index) {
                    if (a[ia]) ++ia;
                    if (b[ib]) ++ib;
                }
            }
        }
    }
    return 1;
}

</code></pre>

<p>You can test it out here: <a href="https://onlinegdb.com/B1C76fNZS" rel="nofollow noreferrer">https://onlinegdb.com/B1C76fNZS</a></p>
    </div>