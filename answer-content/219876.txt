<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Generating a random list</h1>

<p>Instead of defining a global variable that will be modified by your generation function, you should instead define that variable inside the function and <code>return</code> it. This way, you will be able to call <code>my_list</code> a second time without having <code>l</code> being 200 items long. It will make the code easier to test.</p>

<p>Also note that <code>l</code> as a variable name is a poor choice as certain fonts make it hard to distinguish from <code>1</code>.</p>

<p>You also use the "empty list + for loop + append" pattern which can be converted to a more efficient list-comprehension:</p>

<pre><code>def random_list(length=100):
    return [random.randint(0, 1) for _ in range(length)]
</code></pre>

<p>Note that, as suggested by <a href="https://codereview.stackexchange.com/users/25167/jpmc26">@jpmc26</a> in the comments, and starting with Python 3.6, you can simplify further using <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a>:</p>

<pre><code>def random_list(length=100):
    return random.choices((0, 1), k=length)
</code></pre>

<h1>Finding the longest sequence</h1>

<p>Your manual counting is not that bad, but usually counting a number of element can be done using either <code>sum</code> or <code>len</code> depending on the iterable at play. And finding the longest count can be delegated to <code>max</code>. So you just need to group zeroes together, count how much there is in each group and find the max of these counts.</p>

<p><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> will happily do the grouping for you. But you won't be able to use <code>len</code> on the resulting groups, so you can add <code>1</code> for each element in said group.</p>

<p>Lastly, if there is no sequence of zeroes, you'll get no groups, and thus no lengths to take the maximum from, so you need to instruct <code>max</code> that the longest count is <code>0</code> in such cases:</p>

<pre><code>def largest_row_of_zero(iterable):
    return max((sum(1 for _ in group) for value, group in itertools.groupby(iterable) if value == 0), default=0)
</code></pre>

<h1>Testing code</h1>

<p>Instead of putting the testing code at the top-level of the file, you should take the habit of using an <a href="https://stackoverflow.com/q/419163/5069029"><code>if __name__ == '__main__':</code></a> guard:</p>

<pre><code>if __name__ == '__main__':
    l = random_list()
    print(l, largest_row_of_zero(l))
</code></pre>
    </div>