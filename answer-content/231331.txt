<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation is good, but I would suggest following points to improve:</p>

<ol>
<li>It is really hard to test/mock <code>source2ToCheck.getSource()</code>.</li>
<li><code>Source2</code> contains a lot logic/functionality (it is source type and
factory) it has to be simplified. </li>
<li><code>getSource()</code> creates new course
object it is confusing </li>
<li><code>getSource(...)</code> calls <code>getAction(...)</code> that create a source object. It is wired. </li>
<li>Be aware <code>source2Class.newInstance()</code> is deprecated since java 9
<code>source2Class.getDeclaredConstructor().newInstance()</code></li>
</ol>

<p><strong><em>Suggestions:</em></strong></p>

<ul>
<li>I would propose to create dedicated interface/class for source factory</li>
<li>Rename <code>Source2</code> to <code>SourceType</code>.</li>
<li>Throw custom exception <code>CustomCantCreateSourceException</code> instead of <code>return new SourceUnkown()</code>. Because it is real exceptional situation.</li>
<li>Remove public methods modifier from Source interface</li>
<li>Minor enhancements you can find in following code</li>
</ul>

<p><em>Source Factory interface:</em></p>

<pre><code>public interface SourceFactory {
    Source create(SourceType type);
}
</code></pre>

<p><em>Factory implementation:</em></p>

<pre><code>public class SourceFactoryImpl implements SourceFactory {
    @Override
    public Source create(SourceType type) {
            try {
                return type.getClazz().getDeclaredConstructor().newInstance();
            } catch (InstantiationException | IllegalAccessException
                    | NoSuchMethodException | InvocationTargetException e) {
                SENSITIVE_LOGGER.warn("&lt;&lt; Exception occured during init of {}, returning unkown source.", source2Class);
                throw new CustomCantCreateSourceException();
            }
    }
}
</code></pre>

<p><em>Renamed Source2:</em></p>

<pre><code>public enum SourceType {

    IB("IB", SourceIb.class),
    CCWEW("BOT", SourceCcwew.class),
    OBD("CUF", SourceCuf.class),
    PB("PB", SourcePb.class),
    COK("COK", SourceCok.class),
    CCZEW("CCZ", SourceCczew.class),
    CRM("CRM", SourceCrm.class),
    APP("APP", SourceApp.class);

    private static final Logger SENSITIVE_LOGGER = SensitiveLoggerFactory.getSensitiveLogger(SourceType.class);

    private String configChannel;

    private Class&lt;? extends Source&gt; clazz;

    private SourceType(String configChannel, Class&lt;? extends Source&gt; clazz) {
        this.configChannel = configChannel;
        this.clazz = clazz;
    }

    public Class&lt;? extends Source&gt; getClazz() {
        return clazz;
    }

    public String getConfigChannel() {
        return configChannel;
    }
}
</code></pre>

<p><em>Usage:</em></p>

<pre><code>public class SourceService {
    private final SourceFactory factory;

    public SourceService(SourceFactory factory) {
        this.factory = factory;
    }

    public EnumSet&lt;SourceType&gt; fillSources() {
        final SourceCalculationData data = new SourceCalculationData();

        final EnumSet&lt;SourceType&gt; presentSources = EnumSet.noneOf(SourceType.class);
        for (final SourceType source2ToCheck : SourceType.values()) {
            if (factory.create(source2ToCheck).isPresent(data)) {
                presentSources.add(source2ToCheck);
            }
        }
        return presentSources;
    }
}   
</code></pre>
    </div>