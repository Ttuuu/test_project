<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The question is if you need your model to be able to notify other subscribers (controllers) about a change of the name or not.</p>

<p>If your controller is the only class interacting with the model (as it seems, since the Model is created in the Controller's <code>__init__</code>), you could get rid of using <code>pubsub</code> in the Model and halve the number of methods in the Controller.</p>

<p>For example, reduced to the methods related to changing the name, you could write:</p>

<pre><code>class Model(object):
def __init__(self, name, age):
    self._name = name
    self._age = age

@property
def name(self):
    return self._name

@name.setter
def name(self, value):
    self._name = value
    # --&gt; pubsub call removed here

# ...

class Controller(object):

# left remaining methods out

def change_name(self, evt):
    self.model.name = evt.String
    print "Name was changed to", self.model.name
    self.view.set_name(message.data)

# method name_changed not needed any longer
</code></pre>

<p>Another point worth mentioning is that with your current implementation your Controller class needs to know about the implementation of the View class (i.e. that it is using wxPython and what kind of events it has to subscribe to). 
You should leave the binding of the events to the view class. Instead of utilizing <code>pubsub</code> in the Model, it would be of much more use in the View class. </p>

<p>Define a callback for the relevant UI events inside your View class and bind it to <code>wx.EVT_TEXT_ENTER</code>. When a new name is entered, the View notifies the Controller with <code>pubsub</code>. The Controller then takes care of your logic like validating the input, updating the Model and if necessary trigger additional actions on the View or Model or dealing with errors like asking the View to display an error message if the name is invalid.</p>

<p>Again using the Name field as example:</p>

<pre><code>from wx.lib.pubsub import Publisher as pub

class Model(object):
    def __init__(self, name, age):
        self._name = name
        self._age = age

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value


class View(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent, title="MVC test", size=(200, 150))

        # setup sizers
        self.padding_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer = wx.FlexGridSizer(2, 2, 8, 25)
        self.sizer.AddGrowableCol(1, 1) # make the second column fit available space
        self.padding_sizer.Add(self.sizer, proportion=1, flag=wx.ALL|wx.EXPAND,         border=14)
        self.SetSizer(self.padding_sizer)

        # setup widgets

        # name
        self.name_label = wx.StaticText(self, label="Name:")
        self.name = wx.TextCtrl(self, style=wx.TE_PROCESS_ENTER)
        self.sizer.Add(self.name_label)
        self.sizer.Add(self.name, 1, wx.EXPAND)
        # --&gt; NEW: bind event in View class
        self.name.Bind(wx.EVT_TEXT_ENTER, self.on_name_changed)

    # setters for wx controls
    def set_name(self, name):
        self.name.SetValue(name)

    # callback for UI events
    def on_name_changed(self, event):
        new_name = event.String
        pub.sendMessage("name.changed", new_name)


class Controller(object):
    def __init__(self, app):
        # controller holds refs to models, app and views
        self.model = Model('Goku', 9001)
        self.app = app
        self.view = View(None)

        # set up the view
        self.view.set_name(self.model.name)
        self.view.set_age(self.model.age)

        # DELETED: Binding of UI events removed

        # subscriptions
        pub.subscribe(self.name_changed, "name.changed")

        # finally,show the view
        self.view.Show()

    def name_changed(self, message):
        self.model.name = evt.String
        print "Name was changed to", self.model.name
        # unnecessary at the moment, for illustration only
        self.view.set_name(message.data)
</code></pre>
    </div>