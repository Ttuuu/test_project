<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>There is no need for the <code>default</code> clause in <code>Schedule.worker</code>.</li>
<li>Memory side, it is better to create a <code>time.Timer</code> object and call <code>Timer.Reset</code> &amp; <code>Timer.Stop</code> on it.</li>
<li>No need for the <code>done</code> variable, we can just <code>return</code> when we are done.</li>
</ol>

<pre class="lang-golang prettyprint-override"><code>func (s *Schedule) worker(c chan Task, i int) {
    t := time.NewTimer(s.idle * time.Second)
    for {
        select {
        case task := &lt;-c:
            task.Execute()
            if !t.Stop() {
                &lt;-t.C
            }
            t.Reset(s.idle * time.Second)
        case &lt;-t.C:
            s.Lock()
            close(c)
            delete(s.queues, i)
            s.Unlock()
            return
         }
    }
}
</code></pre>

<ol start="4">
<li>It is not advisable to close a channel from a receiver. Better to close the channel when you know that there are no more tasks and have the worker wait for that.</li>
</ol>

<pre class="lang-golang prettyprint-override"><code>func (s *Schedule) worker(c chan Task, i int) {
    for task := range c {
        task.Execute()
    }
}
</code></pre>
    </div>