<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I find in general your implementation is a good start because it separates splitting the string into batches from calculating the octal value. You are not doing it in a single method. </p>

<p>Using a <code>switch</code> is also not such a bad idea here but it lacks the case-insensivity that should be achieved with <a href="https://msdn.microsoft.com/en-us/library/system.char.toupperinvariant(v=vs.110).aspx" rel="noreferrer"><code>char.ToUpperInvariant</code></a></p>

<blockquote>
  <p>If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the ToUpperInvariant method. The ToUpperInvariant method is equivalent to ToUpper(Char, CultureInfo.InvariantCulture).</p>
</blockquote>

<hr>

<p>You can push the separation of concerns a little bit further and extract two utility methods here.</p>

<p>The first one would be an extension that splits a collection into batches:</p>

<pre><code>public static IEnumerable&lt;IList&lt;T&gt;&gt; Split&lt;T&gt;(this IEnumerable&lt;T&gt; source, int batchLength)
{
    var batch = new List&lt;T&gt;();
    foreach (var item in source)
    {
        batch.Add(item);
        if (batch.Count == batchLength)
        {
            yield return batch;
            batch = new List&lt;T&gt;();
        }
    }
}
</code></pre>

<p>and the second one would convert <code>char</code> into its octal value:</p>

<pre><code>public static int ToOctal(this char value)
{
    switch (char.ToUpperInvariant(value))
    {
        case 'R': return 4;
        case 'W': return 2;
        case 'X': return 1;
        case '-': return 0;
        default: throw new ArgumentOutOfRangeException(paramName: nameof(value), message: "Value must be: R, W, X or -");
    }
}
</code></pre>

<p>Now you have two specialized methods that you can easily test.</p>

<hr>

<p>You achieve the final result by combining the above two methods and LINQ into a third one:</p>

<pre><code>public static IEnumerable&lt;int&gt; CalcPermissions(this string value)
{
    const int batchLength = 3;

    if (value.Length % batchLength != 0)
    {
        throw new ArgumentException(paramName: nameof(value), message: $"Value length must be divisible by {batchLength}.");
    }

    return
        from tripple in value.Split(batchLength)
        select tripple.Select(c =&gt; c.ToOctal()).Sum();
}
</code></pre>

<hr>

<p>Three methods is what I would expect as an answer to this interview-question. Whether you should use a <code>switch</code>, a dictionary, regex or array indexing is an entirely different topic that would need proper benchmarks - if performance should be taken into account. </p>

<p>To me the most important thing is that you can separate a larger problem into smaller and testable ones. At this point it doesn't really matter how you implement the <code>Split</code> or <code>ToOctal</code>. As long as they are separate methods you can test other implementations later without changing the final result and without having to worry about breaking other functionalities because there is only one at a time you are working on.</p>
    </div>