<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your 2nd approach is better that 1st as it adds <em>length</em> comparison, but</p>

<ul>
<li>it has redundant <code>else:</code> branch. The 1st <code>if</code> condition, if positive, has unambiguous statement <code>return False</code> <em>terminating</em> function call</li>
<li><code>my_word.count(my_word[i])</code>, <code>other_word.count(my_word[i]</code> calls will traverse sequence of chars (word) on each loop iteration for equal characters (trying to <em>"run ahead"</em>)</li>
</ul>

<hr>

<p>Consider the following approach with builtin <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> function (returns <code>True</code> if any element of the <em>iterable</em> is true):</p>

<pre><code>def match_with_gaps(my_word, full_word):
    '''
    my_word: string with _ characters, current guess of secret word
    full_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the
        corresponding letters of full_word, or the letter is the special symbol
        _ , and my_word and full_word are of the same length;
        False otherwise
    '''
    my_word = my_word.replace(' ', '')

    # check for length OR respective characters mismatch
    if len(my_word) != len(full_word) \
            or any(c1 != '_' and c1 != c2 for c1, c2 in zip(my_word, full_word)):
        return False

    return True

print(match_with_gaps('a p p _ e', 'apple'))   # True
print(match_with_gaps('a p p _ c', 'apple'))   # False
print(match_with_gaps('a _ _ _ _', 'apple'))   # True
</code></pre>
    </div>