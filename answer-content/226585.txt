<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To me, since a parcel is an object, you should make it an <code>Object</code>:</p>

<pre><code>class Parcel
{
    int Weight { get; set; }
    int Height { get; set; }
    int Width { get; set; }
    int Depth { get; set; }
    public Parcel() { }


}
</code></pre>

<p>One way to gather the inputs and fill the object with them, is to use a <code>Builder</code>.  </p>

<p>To cut down on a lot of the repetition, you can store the prompts in a string array:</p>

<pre><code>private static readonly string[] DimensionsPrompts = new string[]
{
    "Enter weight of parcel: ",
    "Enter height of parcel: ",
    "Enter width of parcel: ",
    "Enter depth of parcel: "
};
</code></pre>

<p>To facilitate the builder you'll also need a constructor that takes an int[].</p>

<p>The builder could look like this:</p>

<pre><code>public static Parcel BuildParcel(string[] prompts, TextWriter sOut, TextReader sIn)
{
    if (prompts.Length &lt; 4)
    {
        throw new ArgumentException("`prompts` must have 4 elements");
    }
    int[] values = new int[4];
    for(int i = 0; i &lt; 4; ++i)
    {
        sOut.Write(prompts[i]);
        bool correct = false;
        while (!correct)
        {
            correct = int.TryParse(sIn.ReadLine(), out values[i]);
            if (!correct)
            {
                sOut.WriteLine("Input must an integer,  Try again");
            }
        }
    }
    return new Parcel(values);
}
</code></pre>

<p>The whole thing could look like this:</p>

<pre><code>class Parcel
{
    int Weight { get; set; }
    int Height { get; set; }
    int Width { get; set; }
    int Depth { get; set; }
    public Parcel() { }
    public Parcel(params int[] values)
    {
        if(values.Length &lt; 4)
        {
            throw new ArgumentException("`values` must have 4 elements");
        }
        Weight = values[0];
        Height = values[1];
        Width = values[2];
        Depth = values[3];
    }

    public static Parcel BuildParcel(string[] prompts, TextWriter sOut, TextReader sIn)
    {
        if (prompts.Length &lt; 4)
        {
            throw new ArgumentException("`values` must have 4 elements");
        }
        int[] values = new int[4];
        for(int i = 0; i &lt; 4; ++i)
        {
            sOut.Write(prompts[i]);
            bool correct = false;
            while (!correct)
            {
                correct = int.TryParse(sIn.ReadLine(), out values[i]);
                if (!correct)
                {
                    sOut.WriteLine("Input must an integer,  Try again");
                }
            }
        }
        return new Parcel(values);
    }
}

private static readonly string[] DimensionsPrompts = new string[]
{
    "Enter weight of parcel: ",
    "Enter height of parcel: ",
    "Enter width of parcel: ",
    "Enter depth of parcel: "
};
</code></pre>

<p>One advantage to using a class like this, you can easily add a method that will calculate the base cost, based on its properties</p>
    </div>