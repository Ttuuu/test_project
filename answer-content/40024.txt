<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Haskell:</p>

<pre><code>import Data.List.HT -- or Data.List.Grouping

takeruns xs@(x:xss) = map (map fst) pss
  where pss = segmentAfter (uncurry (&gt;)) $ zip xs xss
</code></pre>

<p><strong>EDIT</strong><br>
Example:</p>

<pre><code>xs = [1, 2, 3, 2, 4, 1, 5]
xss = [2, 3, 2, 4, 1, 5]
zip xs xss = [(1, 2), (2, 3), (3, 2), (2, 4), (4, 1)]
uncurry (&gt;) (1, 2) == 1 &gt; 2 = False
segmentAfter ... = [
    [(1, 2) /* False */, (2, 3) /* False */, (3, 2) /* True */],
    [(2, 4) /* False */, (4, 1) /* True */],
    []
]
map (map fst) (segmentAfter ...) = [[1, 2, 3], [2, 4], []]
</code></pre>

<p>And, it turns out that my function is wrong :)
Correct version:</p>

<pre><code>takeruns xs = map (map snd) pss
  where pss = segmentAfter (uncurry (&gt;)) $ zip (minBound:xs) xs
</code></pre>
    </div>