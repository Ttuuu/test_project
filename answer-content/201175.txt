<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an alternate to your function which I made out of curiosity.  It is similar to yours.  It checks the 'path to minimum' with a list.  </p>

<p>However, unlike your code, it tests from the top-down rather than from the bottom-up, as suggested by @Josiah.  I find this approach way easier to follow in debug mode; checking the <code>currentoptions</code> list I can see where the solution is going and how close it is from getting to one.</p>

<p>The initial content of the list is the given number. Then, every step, it applies all the possible operations to the number/numbers in the list and stores the multiple results in the list.  That way all the possible paths to one are being followed.  If number 1 shows up in the list, the iterations stop.</p>

<pre><code>def min_steps_to_one(n):
    if not isinstance(n, int):
        # you can raise an error here
        return None

    if n &lt; 1:
        # you can raise an error here
        return None

    nsteps = 0
    currentoptions = [n]

    while True:
        if 1 in currentoptions:
            break

        thisround = currentoptions[:]
        currentoptions = []

        for i in thisround:

            if i % 3 == 0:
                currentoptions.append( i // 3 )
            if i % 2 == 0:
                currentoptions.append( i // 2 )
            currentoptions.append( i - 1 )

        nsteps += 1

    return nsteps
</code></pre>
    </div>