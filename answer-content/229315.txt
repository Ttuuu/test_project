<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Formatting</h2>

<p>Get an IDE or a linter that will give you hints about PEP8, Python's standard for code formatting. Among other things, it will suggest:</p>

<ul>
<li>Capital letters for your constants, e.g. <code>NUM_ACTIVITIES</code></li>
<li>lower_camel_case for your variable and function names, e.g. <code>activity_interactions</code> instead of <code>activitiesInteractionList</code> (also note that you shouldn't usually write the type of a variable in its name)</li>
<li><code>def CalculateOrderCosts(self):</code> becomes <code>calculate_order_costs(self):</code></li>
<li><code>class Schedule</code> stays as it is</li>
</ul>

<h2>Order of operations</h2>

<pre><code>int(60 * 24 * (hoursPerDayToSchedule / 24) / quantaDuration)
</code></pre>

<p>Not sure why the cancelling <code>24</code> terms are written there; you can drop them and use integer division, dropping the parens:</p>

<pre><code>60 * hours_per_day_to_schedule // quanta_duration
</code></pre>

<h2>Vectorization</h2>

<pre><code>activitiesInteractionList = []
for i in range(0, numActivities**2):
    activitiesInteractionList.append(random.randint(1, 10))
</code></pre>

<p>This should better-leverage numpy vectorization. See for example <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.random.rand.html" rel="noreferrer">https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.random.rand.html</a></p>

<h2>In-place addition</h2>

<pre><code>quantaClassifications = quantaClassifications + \
    quantaClassificationsPrecursor[i]
</code></pre>

<p>can be</p>

<pre><code>quanta_classifications += quanta_classifications_precursor[i]
</code></pre>

<p>Also, this construct:</p>

<pre><code>quantaClassifications = quantaClassifications + [len(timesOfDay) - 1]
</code></pre>

<p>can be</p>

<pre><code>quanta_classifications.append(len(times_of_day) - 1)
</code></pre>

<h2>Matrix assignment</h2>

<pre><code>customActivitiesInteractionMatrix[0, ] = np.array(
    [0, 0, 5, 10, 15, 20, 25, 30])
customActivitiesInteractionMatrix[1, ] = np.array([0, 0, 0, 5, 10, 15, 20, 25])
customActivitiesInteractionMatrix[2, ] = np.array([5, 0, 0, 0, 5, 10, 15, 20])
customActivitiesInteractionMatrix[3, ] = np.array([10, 5, 0, 0, 0, 5, 10, 15])
customActivitiesInteractionMatrix[4, ] = np.array([15, 10, 5, 0, 0, 0, 5, 10])
customActivitiesInteractionMatrix[5, ] = np.array([20, 15, 10, 5, 0, 0, 0, 5])
customActivitiesInteractionMatrix[6, ] = np.array([25, 20, 15, 10, 5, 0, 0, 0])
customActivitiesInteractionMatrix[7, ] = np.array([30, 25, 15, 10, 5, 0, 0, 0])
</code></pre>

<p>The right-hand side should be represented as a single two-dimensional matrix. This should then be possible with a single assignment.</p>

<h2>Null <code>if</code></h2>

<pre><code>        if i == "-":
            pass
        else:
            ...
</code></pre>

<p>should just be</p>

<pre><code>if i != '-':
    ...
</code></pre>

<h2>General</h2>

<p>You do have some methods, but you also have a bunch of globally-scoped code, particularly for matrix setup. This should also be moved into methods. Ideally, the only thing to be found at global scope should be method and class declarations, imports, and constants.</p>
    </div>