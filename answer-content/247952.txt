<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The use of classes and its member functions seems wrong to me:</p>
<ul>
<li><p>Destructor should also clean up if your code throws. In case <code>initVulkan</code> throws, your <code>cleanup</code> will never be reached and you get a resource leak. Also, having a destructor makes sure that when <code>HelloTriangleApplication app</code> goes out of scope, i.e. when <code>main</code> ends, all resources are cleaned-up  without <em>explicitly calling</em> any special function.</p>
</li>
<li><p>The public member function doing <em>everything</em> (construction, destruction, capture events) is bad design. It should do one thing.</p>
</li>
</ul>
<hr>
<p>Put <code>initWindow()</code> into the constructor of <code>HelloTriangleApplication</code>: <code>HelloTriangleApplication()</code>.</p>
<p>Put <code>cleanup()</code> into the destructor of <code>HelloTriangleApplication</code>: <code>~HelloTriangleApplication()</code>.</p>
<p>Put <code>initVulkan()</code> (which only calls <code>create_instance()</code>) and <code>mainLoop()</code> into a public function like <code>check_compat</code>.</p>
<p>Delete <code>run()</code>.</p>
<p>Make <code>checkRequiredExtensions</code> a non-member function. Since it doesn't access any <em>private members</em> of the Class, it shouldn't be a member function. Also this will let you write tests for it.</p>
<hr>
<p>Use const in cases like:</p>
<pre><code>auto &amp;extension : supportedExtensionNames
std::exception &amp;e
</code></pre>
<hr>
<p>Adding to the point about exception G Sliepen raised,</p>
<blockquote>
<p>When you catch an exception, do something useful or don't catch at all</p>
</blockquote>
<p>Add extra info to the exception if you need it later on and <em>then</em> throw it. See more details at</p>
<ul>
<li><a href="https://stackoverflow.com/questions/2360597/c-exceptions-questions-on-rethrow-of-original-exception">https://stackoverflow.com/questions/2360597/c-exceptions-questions-on-rethrow-of-original-exception</a></li>
</ul>
<hr>
<p>Use <code>std::cout</code> and <code>std::cerr</code> when need arises. Don't stream everything to <code>std::cerr</code>. One reason is to conveniently separate <code>stdout</code> and <code>stderr</code> later on if this program is run via command-line.</p>
<p>Another reason is the use of <code>std::endl</code>. All errors should be visible in <code>stderr</code> right when they occur. So use <code>std::endl</code>. And this is not required in <code>std::cout</code> since those messages are not the ones you want to log.</p>
    </div>