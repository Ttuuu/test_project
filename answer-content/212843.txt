<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Would such a pattern actually be useful in practice?</p>
</blockquote>

<p>Not really in my opinion. In C++20 you can use designated initializer lists like <code>{.min = 10, .max = 20}</code> and I mean if the argument is not clear from the context than there are various ways to improve this, even today.</p>

<ol>
<li>A comment. <code>Foo f(/*min=*/10);</code></li>
<li>User-defined literals <code>Rectangle r(10_width, 200_height);</code></li>
<li>Strong types: <code>Player p(Position(10, 10));</code></li>
<li>Variables: <code>const int size = 10; Square s(size);</code></li>
</ol>

<p>This also doesn't work with non-copyable, non-moveable types, although those are rare in practice. The members also need to be default constructible unfortunately.</p>

<p>Some thoughts:</p>

<ol>
<li><p>Note that your code has undefined behavior, since two of the variables are not set on the first call.</p></li>
<li><p>The <code>build</code> function is required in Java, but in C++ you can use a conversion operator. Although this suffers from the same problem that expression templates have: Using type deduction will not get you a <code>Foo</code>.</p></li>
<li><p>Delete copy construction for the builder object, since there is no reason to copy it.</p></li>
<li><p>Don't use <code>0</code> and <code>1</code> for bools please; <code>false</code> and <code>true</code> is clearer IMO.</p></li>
<li><p>Consider using <code>noexcept</code> and <code>constexpr</code> (if applicable).</p></li>
</ol>

<blockquote>
  <p>Is there an elegant way of sharing the member variables of the Builder objects, despite the results of each setter call being of a different type? (For cheap-to-move types, I am thinking along the lines of a "data block"-like struct, that gets moved from this into the result.)</p>
</blockquote>

<p>Yes that's a good idea. Here's my take on it:</p>

<pre><code>template &lt;bool x_set = false, bool y_set = false, bool z_set = false&gt;
struct FooBuilder {
  constexpr FooBuilder() noexcept = default;
  FooBuilder(const FooBuilder &amp;) = delete;
  FooBuilder &amp;operator=(const FooBuilder &amp;) = delete;

  constexpr auto x(int val) noexcept {
    members_.x_ = val;
    return FooBuilder&lt;true, y_set, z_set&gt;(std::move(*this));
  }
  constexpr auto y(int val) noexcept {
    members_.y_ = val;
    return FooBuilder&lt;x_set, true, z_set&gt;(std::move(*this));
  }
  constexpr auto z(int val) noexcept {
    static_assert(!z_set, "cannot set z twice!");
    members_.z_ = val;
    return FooBuilder&lt;x_set, y_set, true&gt;(std::move(*this));
  }

  constexpr operator Foo() noexcept {
    static_assert(x_set &amp;&amp; y_set &amp;&amp; z_set, "all members must be set");
    return {members_.x_, members_.y_, members_.z_};
  }
  constexpr Foo build() noexcept { return *this; }

private:
  template &lt;bool... args&gt;
  constexpr FooBuilder(FooBuilder&lt;args...&gt; &amp;&amp;other) noexcept
      : members_{std::move(other.members_.x_), std::move(other.members_.y_),
                 std::move(other.members_.z_)} {}

  template &lt;bool, bool, bool&gt; friend struct FooBuilder;

  struct Proxy {
    int x_, y_, z_;
  } members_{};
};
</code></pre>

<p>There is still a lot of boilerplate, but unfortunately it cannot be removed since C++ doesn't have reflection yet.</p>
    </div>