<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some ideas to help you improve your code.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The passed <code>msg</code> parameter is not and probably shouldn't be modified by the code, and so it should be declared as <code>const</code>.</p>

<h2>Use objects</h2>

<p>It seems that fundamentally, what's required here is a list of rules and a way to match them.  I'd be inclined to keep things neat and use objects.  I'd suggest wrapping things up into a collection of <code>Rule</code> objects.</p>

<h2>Prefer <code>constexpr</code> where practical</h2>

<p>Especially with embedded systems, <code>constexpr</code> can really allow much more compact code when it's used.  This is also often useful for desktop applications, but more typically it's for speed rather than space.  All of the fixed data structures could be <code>constexpr</code>.</p>

<h2>Consider changing the interface</h2>

<p>Instead of the old C-style length and pointer, it is often useful to declare and use a class for this.  For example, one might have a <code>Message</code> class that would return a <code>const char *</code> that points to the data.</p>

<h2>Think about future expansion</h2>

<p>If you only want to be able to send back static messages in response to each requests, the data-oriented approach you have may be fine.  However, it may be better to have both a <code>response</code> and some appropriate <code>action</code> instead.</p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.</p>

<h2>Putting it all together</h2>

<p>Using all of these suggestions, here's one way to do it:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;string_view&gt;

struct Message : public std::string_view {
    // I'm assuming that only valid Messages are 
    // created.  A static_assert could be used here.
    const char *dataptr() const { return begin() + 2; }
};

void doProcess(std::string_view sv, std::string_view name) {
    std::cout &lt;&lt; "Processing " &lt;&lt; name &lt;&lt; " Request: ";
    for (std::size_t i{0}; i &lt; sv.size(); ++i) {
        //serialPC.putc(response[i]);
        std::cout &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; std::hex &lt;&lt; (static_cast&lt;unsigned&gt;(sv[i]) &amp; 0xff) &lt;&lt; ' ';
    }
    std::cout &lt;&lt; '\n';
}

void processRead(std::string_view sv) {
    doProcess(sv, "Read");
}

void processWrite(std::string_view sv) {
    doProcess(sv, "Write");
}

void processReset(std::string_view sv) {
    doProcess(sv, "Reset");
}

void processVersion(std::string_view sv) {
    doProcess(sv, "Version");
}

void processType(std::string_view sv) {
    doProcess(sv, "Type");
}

void processAsk(std::string_view sv) {
    doProcess(sv, "Ask");
}

void searchFunction(const Message &amp;msg) {
    using namespace std::literals;
    static constexpr struct Rule {
        std::string_view match;
        std::string_view response;
        void (*action)(std::string_view);
        bool isMatch(const Message &amp;msg) const {
            return msg.size() == (match.size() + 3) &amp;&amp; std::equal(std::begin(match), std::end(match), msg.dataptr());
        }
    } rules[]{
        { "\x92"sv, "\x00\x02\x12\x34\xA1"sv, processRead },
        { "\x0A\xE0"sv, "\x00\x02\x11\x01\x98"sv, processWrite },
        { "\x00\xFF"sv, "\x00\x21\x23\x0E\xAE\x11\x3A"sv, processReset },
        { "\x00\xA2"sv, "\x00\x03\x82\xAA\x07\x88\xA9"sv, processVersion },
        { "\x00\x67"sv, "\x00\x03\x00\x00\xC4\x77"sv, processType },
        { "\x00\x55"sv, "\x00\x01\xFE\xFF"sv, processAsk },
    };
    for (const auto &amp;rule : rules) {
        if (rule.isMatch(msg)) {
            rule.action(rule.response);
            return;
        }
    }
}

int main() {
    using namespace std::literals;
    Message msg{"\x12\x34\x00\x55\x88"sv};
    searchFunction(msg);
}
</code></pre>

<p>This assumes a C++17 compiler to be able to use <code>std::string_view</code> objects extensively.</p>
    </div>