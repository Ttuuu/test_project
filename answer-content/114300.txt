<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Input as reference-to-const</strong></p>

<p>Change your signature to:</p>

<pre><code>std::string repeat_string(std::string const&amp; str, std::size_t N);
</code></pre>

<p>First, this avoids an unnecessary copy when users <em>don't</em> pass their strings in by rvalue (which seems more typical?). Secondly, this allows for copy elision on the returned object, as you can't have copy elision from a function parameter. So if I called <code>repeat_string</code> with an lvalue, I just saved two copies.</p>

<p>Also, note the name change. Either use <code>camelCase</code> or <code>snake_case</code> or function names, don't just <code>jamlotsofwordstogether</code>. It's much harder to read.</p>

<p>The new signature makes some of the other code easier. </p>

<pre><code>if (n == 0) {
    return {};
}

...

if (str.size() == 1) {
    return std::string(n str[0]);
}
</code></pre>

<p><strong><code>repeat_size</code></strong></p>

<p>This is a weird variable at best. Once you make <code>str</code> a reference to const, you can just access <code>str.size()</code> which makes much more sense. <code>repeat_size</code> isn't really the size of the repeat - that's what <code>n</code> is...</p>

<p><strong>Powers of 2</strong></p>

<p><code>std::log2</code> and <code>std::pow</code> aren't cheap, and you need neither. For the former, you can just multiply by two until you're done:</p>

<pre><code>std::string result = str;
result.reserve(str.size() * n);

std::size_t m = 2;
for (; m &lt;= n; m *= 2)
{
    result += result;
}
</code></pre>

<p>Now <code>m</code> is the first power of 2 larger than <code>n</code>. So you can replace </p>

<pre><code>n -= static_cast&lt;decltype(n)&gt;(std::pow(2, m));
</code></pre>

<p>with:</p>

<pre><code>n -= m/2;
</code></pre>

<p>And:</p>

<pre><code>str.append(std::cbegin(str), std::next(std::cbegin(str), n * repeat_size));
</code></pre>

<p>is a really complicated way of writing what now becomes:</p>

<pre><code>result.append(result.c_str(), n * str.size());
</code></pre>
    </div>