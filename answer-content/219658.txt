<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all congratulations for this little entertaining console game.</p>

<p>It is simple but entertaining. I felt like I was back in the old mobile games era.</p>

<p>I don't have the time to rewrite all of the code but I still want to give some hints for improvements.</p>

<p>Here are some random observations:</p>

<p>Don't use global variables, they are a maintenance hazard.
Consider using classes in C++ to share the data between functions (This is C++ not C).</p>

<p>Try to encapsulate concepts in several classes to make the maintenance of the program easier. You could have for example a Class Gameboard which describes the Gameboard and a class Snake which describes the Snake. A class for the Food. You already started doing a Snake_segment. Try to make some more. I suggest to read about C++ classes.</p>

<p>Also you should try to write smaller functions. A Function should ideally only do one thing not several things. This way functions are also easier to test.</p>

<p>Did I say test? I recommend checking out how to write unit tests. By writing tests you will realize that your functions are too big or can get divided into smaller parts. You can use a framework like gtest or sth else.</p>

<p>Why do you use whchar_t* for the buffer? I recommend using <code>std::wstring</code>.</p>

<p>Instead of using a deque you should check out std::vector it is the default container you should use in C++.</p>

<p>Both containers handle memory allocation automatically for you. Only very rarely you should feel the need for using <code>new</code></p>

<p>this:</p>

<pre><code>wchar_t* temp = new wchar_t[nScreenWidth * nScreenHeight];
</code></pre>

<p>can become this:</p>

<pre><code>std::wstring temp(nScreenWidth * nScreenHeight, ' ');
</code></pre>

<p>By replacing this you can also simplify your clearOnly function. </p>

<p>This:</p>

<pre><code> void clearOnly(wchar_t* buf) {
    for (int i = 0; i &lt; nScreenHeight; ++i) {
        for (int j = 0; j &lt; nScreenWidth; ++j)
            if (buf[i * nScreenWidth + j] == L'*')
                buf[i * nScreenWidth + j] = L' ';
    }
}
</code></pre>

<p>Can become this:</p>

<pre><code>#include &lt;algorithm&gt;

....

void clearOnly(std::wstring&amp; buf) 
{
    std::replace(buf.begin(), buf.end(), L'*', L' ');
}
</code></pre>

<p>Some Style observations</p>

<p>This:</p>

<pre><code>    // Draws top and bottom walls
    if (i == 0 || i == nFieldHeight - 1) buf[i * nScreenWidth + j] = L'#';
</code></pre>

<p>Should be this:</p>

<pre><code>    // Draws top and bottom walls
    if (i == 0 || i == nFieldHeight - 1) {
        buf[i * nScreenWidth + j] = L'#';
    }
</code></pre>

<p>Reason: Readability</p>

<p>this:</p>

<pre><code>int main(void) {
    ...
    return 0;
}
</code></pre>

<p>should be this:</p>

<pre><code>int main() {
    ...
}
</code></pre>

<p>Reason: In C++ unlike C it is not common to write explicit <code>void</code> if there are no function parameters. Also for the main function the compiler automatically generates the <code>return 0</code></p>

<p>Feel free to rework the code and post it again. I'm pretty sure you can refactor a lot...</p>

<p><strong>EDIT: Refactored Code:</strong></p>

<p>I ended up having time and refactored all youre code here:</p>

<p><a href="https://codereview.stackexchange.com/questions/219886/snake-console-game-in-c">Snake console game in C++</a></p>

<p>I will edit here later when i find time what other suggestions for improvements i could find while i tryed to understand youre program.</p>

<p><strong>EDIT</strong></p>

<p><strong>use namespaces:</strong> It is good practice in C++ wrapping youre programs into youre own namespace. This avoids name conflicts with existing functions from libraries.</p>

<p><strong>Don't use std::endl:</strong> <code>std::endl</code> adds a newline and flushes the buffer. Most of the time you only want a simple newline. You get it by replacing <code>std::endl</code> with the newline sign '\n' (like in c). Why bother? <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">https://stackoverflow.com/questions/213907/c-stdendl-vs-n</a></p>

<p><strong>seperate different tasks from each other:</strong> That way parts of youre program can be even reused in other projects. A good example is youre not portable output to the console. The output is all over the place mixed with the other logic of of the program. This way you can't easy port the program to annother output source (for example a gui). When i rewrote the program i packed all the not portable output stuff in one place from the other tasks.</p>

<p>Also by writting everything connected with each other it is a big headache to understand whats going on in the code. Take this code. Forget it for a year and try to figure out what it does. Probaly its hard again to get into it.</p>

<p>It took me quite some time to untie all the knots to reveal what was really going on in youre program.</p>

<p><strong>How could you organize the snake game better? I did the following:</strong></p>

<p>Defining a struct Element:</p>

<pre><code>struct Element {
    bool hasSnakeSegment{ false };
    bool hasSnakeHead{ false };
    bool hasWall{ false };
    bool hasFood{ false };
};
</code></pre>

<p>This Element can either have a snakeSegment, a snakeHead, a Wall or food. We can easily check with this whats going on on each field.</p>

<p>Then i defined a Point class for the Elements of the Snake and the SnakeSegment containing the previous and current poition of the segments:</p>

<pre><code>struct Point {
    int x;
    int y;
};

struct SnakeSegment
{
    Point pos{ 0 , 0 };
    Point prev{ pos };
};
</code></pre>

<p>This SnakeSegments of course for the Snake:</p>

<pre><code>class Snake
{
public:
    Snake(int boardWidth, int boardHeight);

    std::vector&lt;SnakeSegment&gt; getBody() const;

    void moveRight();
    void moveDown();
    void moveLeft();
    void moveUp();
    void grow();

private:
    void safeCurrentPosToLastOfFirstElement();
    void moveRemainingElements();

    std::vector&lt;SnakeSegment&gt; mBody;
};

std::vector&lt;SnakeSegment&gt; initSnake(int fieldWidth, int fieldHeight);
</code></pre>

<p>The Snake class defines were the Snake is on the Board and how to move it arround. Also we can grow the snake.</p>

<p>Then I defined the Board. This is were the game actions take place:</p>

<pre><code>class Board
{
public:
    Board(int width, int height);

    void placeFood();
    void updateSnakePosition();
    bool snakeHitFood() const;
    void eatFood();
    void growSnake();
    bool snakeHitWall() const;
    bool snakeHitSnake() const;
    void moveSnake(SnakeDirection snakeDirection);

    void debugPrintSnakeCoordinates();
private:
    std::vector&lt;std::vector&lt;Element&gt;&gt; initFieldWithWalls(int width, int height);
    void removeOldSnakePosition(const std::vector&lt;SnakeSegment&gt;&amp; body);
    void addNewSnakePosition(const std::vector&lt;SnakeSegment&gt;&amp; body);

    Snake mSnake;
    std::vector&lt;std::vector&lt;Element&gt;&gt; mField;

    std::random_device mRandomDevice;
    std::default_random_engine mGenerator;
    std::uniform_int_distribution&lt;int&gt; mWidthDistribution;
    std::uniform_int_distribution&lt;int&gt; mHeightDistribution;

    friend std::wostream&amp; operator&lt;&lt;(std::wostream&amp; os, const Board&amp; obj);
};

std::wostream&amp; operator&lt;&lt;(std::wostream&amp; os, const Board&amp; obj);
</code></pre>

<p>Then i defined functions how to display the game in the console. If needed they can be replaced with other functions if we want to dsiplay on annother thing than a console.</p>

<p>The board and the output functions get used by the runGame function. So the main becomes only this:</p>

<pre><code>#include "Game.h"

#include &lt;iostream&gt;

int main() 
try {
    snakeGame::runGame();
    return 0;
}
catch (...) {
    std::wcerr &lt;&lt; "unknown error " &lt;&lt; "\n";
    std::wcin.get();
}
</code></pre>

<p>So the main logic of the programm can be read in the runGame function:</p>

<pre><code>void runGame()
{
    for (;;) {

        if (askUserToEndGame()) {
            return;
        }

        constexpr auto fieldWidth = 40;
        constexpr auto fieldHeight = 15;

        Board board{ fieldWidth, fieldHeight };
        board.updateSnakePosition();
        board.placeFood();
        SnakeDirection snakeDirection = SnakeDirection::right;

        long long score{ 0 };
        long long points{ 100 };
        auto delay(300);

        bool wasPausedInLastLoop{ false };
        for (;;) {
            putCursorToStartOfConsole();
            printBoardWithStats(board, score, delay);

            if (wasPausedInLastLoop) {
                // If we don't do this and print pause to the console by 
                // pressing p during the game the pause statement will 
                // still be printed because  during the game the pause 
                // statement will still be printed because during the game 
                // the pause statement will still be printed because 
                // during the game the pause statement will still be 
                // printed because we start printing from the beginning of
                // the console and now the total string printed to the 
                // console would be one row lower.
                std::wcout &lt;&lt; L"                                     \n";
                wasPausedInLastLoop = false;
            }

            if (keyWasPressed()) {
                auto key = getKey();

                if (key == 'p') {
                    wasPausedInLastLoop = true;
                    std::wcout &lt;&lt; L"#####PAUSED#####\n";
                    pauseUntilPauseKeyPressedAgain();
                }
                else {
                    snakeDirection = updateDirection(key, snakeDirection);
                }
            }

            board.moveSnake(snakeDirection);

            if (board.snakeHitFood()) {
                board.eatFood();
                board.growSnake();
                board.placeFood();
                score += points;
                points *= 2;
                delay -= 5;
            }
            else if (board.snakeHitWall() || board.snakeHitSnake()) {
                break;
            }
            board.updateSnakePosition();

            std::this_thread::sleep_for(std::chrono::milliseconds{ delay });
        }

        printGameOverWithScore(score);
    }
}
</code></pre>

<p>}</p>

<p>Notice here how the low level stuff doesn't show up because it is encapsulated in other functions the main calls. I don't say my implementation is perfect but i hope it gives some insight how to seperate tasks.</p>

<p>For the full code see this: <a href="https://codereview.stackexchange.com/questions/219886/snake-console-game-in-c">Snake console game in C++</a>
and feel free to also discuss my solution.</p>
    </div>