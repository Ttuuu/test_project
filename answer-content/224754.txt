<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Q&amp;A</h2>

<blockquote>
  <p>Is the code readable?</p>
</blockquote>

<ul>
<li><code>ExactlyOne</code> states very clearly what the method is supposed to do.</li>
<li><code>source is null</code> seems odd to me (does that even compile?). I'd prefer <code>source == null</code>. (Edit from comments: a topic about <a href="https://www.gullberg.tk/blog/is-null-versus-null-in-c/" rel="nofollow noreferrer">is null vs == null</a>)</li>
<li><code>IEnumerator&lt;TSource&gt; enumerator = source.GetEnumerator()</code> can be written as <code>var enumerator = source.GetEnumerator()</code>.</li>
</ul>

<hr>

<blockquote>
  <p>Is the code maintainable?</p>
</blockquote>

<ul>
<li>Since you are looking for a sibling function of <code>Any&lt;T&gt;()</code>, I would also include a <code>ExactlyOne&lt;T&gt;(Func&lt;T, bool&gt; predicate)</code>.</li>
</ul>

<hr>

<blockquote>
  <p>Is the code performant?</p>
</blockquote>

<ul>
<li>It does seem so, right? But notice that LINQ is optimized for <code>IEnumerable&lt;T&gt;</code> that is also <code>ICollection&lt;T&gt;</code>, in which case <code>Count</code> is used. Implementations should have an eager implementation of this property. Your method <em>could</em> also use this optimization <code>Count == 1</code>. </li>
<li>I actually noticed (in my eyes) unexpected behavior in LINQ: <code>Count&lt;T&gt;()</code> is optimized for <code>ICollection&lt;T&gt;</code> but <code>Any&lt;T()</code> is not. This means you arguably could make a slightly faster implementation than LINQ. </li>
<li>An in-depth comparison is required to find the most optimized approach. As discussed in the comments, testing the different implementations against a variety of input sources should yield us which method perfoms best under which conditions.</li>
</ul>

<hr>

<blockquote>
  <p>Do the tests cover the expected cases or are there more to consider?</p>
</blockquote>

<p>You cover <code>null</code>, empty, 1, multiple, early exit on infinite.. but perhaps also test on <code>ICollection&lt;T&gt;</code> and custom <code>IEnumerable&lt;T&gt;</code> implementations with eager and/or lazy loading.</p>

<hr>

<h2>Reference Source: <a href="https://github.com/microsoft/referencesource/blob/master/System.Core/System/Linq/Enumerable.cs" rel="nofollow noreferrer">LINQ Any vs Count</a></h2>

<pre><code>// not optimized for ICollection&lt;T&gt; (why ??)
public static bool Any&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source) {
    if (source == null) throw Error.ArgumentNull("source");
    using (IEnumerator&lt;TSource&gt; e = source.GetEnumerator()) {
        if (e.MoveNext()) return true;
    }
    return false;
}

public static bool Any&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate) {
    if (source == null) throw Error.ArgumentNull("source");
    if (predicate == null) throw Error.ArgumentNull("predicate");
    foreach (TSource element in source) {
        if (predicate(element)) return true;
    }
    return false;
}

// optimized for ICollection&lt;T&gt;
public static int Count&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source) {
    if (source == null) throw Error.ArgumentNull("source");
    ICollection&lt;TSource&gt; collectionoft = source as ICollection&lt;TSource&gt;;
    if (collectionoft != null) return collectionoft.Count;
    ICollection collection = source as ICollection;
    if (collection != null) return collection.Count;
    int count = 0;
    using (IEnumerator&lt;TSource&gt; e = source.GetEnumerator()) {
        checked {
            while (e.MoveNext()) count++;
        }
    }
    return count;
}
</code></pre>
    </div>