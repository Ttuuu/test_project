<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Design:</p>

<p>It would be possible to use a single <code>AssetCache</code> for different types of asset by storing assets as <code>std::shared_ptr&lt;void&gt;</code> and casting back to the appropriate type using <code>std::static_pointer_cast</code>. They could be stored like:</p>

<pre><code>        struct TypeID
        {
            std::type_index TypeIndex;
            std::string ID;
        };

        std::unordered_map&lt;TypeID, std::shared_ptr&lt;void&gt;&gt; m_assets; // (with appropriate hash and equality for TypeID)
</code></pre>

<p>The extra <code>std::type_index</code> per asset is probably not a concern if we're using <code>std::string</code> for asset IDs.</p>

<hr>

<p>Code:</p>

<pre><code>void CacheAsset(const std::string &amp; id, std::shared_ptr&lt;T&gt; asset)
{
  m_cache[id] = asset;
}
</code></pre>

<p>We can move the asset into place: <code>m_cache[id] = std::move(asset);</code>. I'd question whether it's a good idea to allow an existing asset to be overwritten without explicitly removing the old asset from the cache first.</p>

<p>In addition to what <em>camp0</em> said about <code>bool IsAssetCached(const std::string &amp; id)</code>, it should then be made <code>const</code>.</p>

<pre><code>std::shared_ptr&lt;T&gt; GetAsset(const std::string &amp; id)
{
  return m_cache[id];
}
</code></pre>

<p>This can also be <code>const</code> if we use <code>find</code> instead of <code>operator[]</code>.</p>

<pre><code>void CollectGarbage() override
{
  for (auto &amp; kv : m_cache)
  {
    if (kv.second.use_count() == 1)
    {
      // in this case the only reference left is the cache reference
      // we can free the asset from the cache
      NW_WRAP_DEBUG(Core::GetCoreLogger().Debug(FormatString("Collecting asset %s of type %i", kv.first.c_str(), T::GetAssetType())));
      kv.second.reset();
    }
  }
}
</code></pre>

<p>We could perhaps remove the empty map entries too.</p>

<pre><code>template&lt;typename T&gt;
static std::shared_ptr&lt;T&gt; GetAsset(const std::string &amp; id)
{
    ...

    ASSERT_TRUE(s_caches[type]-&gt;GetCachedType() == type);
    AssetCache&lt;T&gt; *cache = dynamic_cast&lt;AssetCache&lt;T&gt;*&gt;(s_caches[type].get());
</code></pre>

<p>Since we've just checked that the type is the same, we don't need <code>dynamic_cast</code>, and can use <code>static_cast</code> instead.</p>

<pre><code>    if (cache-&gt;IsAssetCached(id))
    {
      return cache-&gt;GetAsset(id);
    }
</code></pre>

<p>We're doing two lookups here: once in <code>IsAssetCached</code>, and once in <code>GetAsset</code>. We could instead return an empty <code>std::shared_ptr&lt;T&gt;</code> from <code>GetAsset</code> if the asset is missing.</p>

<pre><code>  class AssetManager
  {
  public:
    static ...
    static ...
</code></pre>

<p>Perhaps we could have an <code>AssetManager</code> instance somewhere, instead of one global one.</p>
    </div>