<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In C, it's not necessary or desirable to cast the return value from <code>malloc()</code>.  It is however <em>essential</em> to check the result isn't null before dereferencing it:</p>

<pre><code>struct linkedList *createList() {
    struct linkedList *list = malloc(sizeof *list);
    if (list) {
        list-&gt;head = NULL;
        list-&gt;end = NULL;
        list-&gt;len = 0;
    }
    return list;
}
</code></pre>

<p>Note that the caller of <code>createList</code> <em>also</em> needs to check whether the returned list pointer is null before attempting to use it.</p>

<p>There doesn't seem to be a corresponding function to release a list; this is likely what makes the test program leak memory.  See this Valgrind output:</p>

<pre class="lang-none prettyprint-override"><code>==868== HEAP SUMMARY:
==868==     in use at exit: 104 bytes in 6 blocks
==868==   total heap usage: 10 allocs, 4 frees, 1,176 bytes allocated
==868== 
==868== 104 (24 direct, 80 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 6
==868==    at 0x483577F: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==868==    by 0x109186: createList (217145.c:24)
==868==    by 0x1096D7: main (217145.c:151)
</code></pre>

<p>We can't rely on the node <code>id</code> values being unique:</p>

<blockquote>
<pre><code>if (currentNode.next == NULL) {
    printf("current node id is %d, with a value of %d\n", currentNode.id, currentNode.val);
}
while (currentNode.id != endNode.id) {
    printf("current node id is %d, with a value of %d\n", currentNode.id, currentNode.val);
    currentNode = * currentNode.next;
}
</code></pre>
</blockquote>

<p>This looks very weird, because it is copying the entire value of each node into <code>currentNode</code>.  A more efficient and more idiomatic approach is to define <code>currentNode</code> as a pointer; since we don't want to modify the list through it, make it a pointer to <code>const</code>.</p>

<pre><code>void printListWithWhile(const struct linkedList * someList)
{
    const struct node *currentNode = someList-&gt;head;
    printf("current length of list is %d\n", someList-&gt;len);
    if (someList-&gt;head) {
        printf("first item is %d, last item is %d\n",
               someList-&gt;head-&gt;val, someList-&gt;end-&gt;val);
    }

    while (currentNode) {
        printf("current node id is %d, with a value of %d\n",
               currentNode-&gt;id, currentNode-&gt;val);
        currentNode = currentNode-&gt;next;
    }
}
</code></pre>

<p>Or more idiomatically (though now belying the name) as a <code>for</code> loop:</p>

<pre><code>void printListWithWhile(const struct linkedList * someList)
{
    printf("current length of list is %d\n", someList-&gt;len);
    if (someList-&gt;head) {
        printf("first item is %d, last item is %d\n",
               someList-&gt;head-&gt;val, someList-&gt;end-&gt;val);
    }

    for (const struct node *currentNode = someList-&gt;head;  currentNode;  currentNode = currentNode-&gt;next) {
        printf("current node id is %d, with a value of %d\n", currentNode-&gt;id, currentNode-&gt;val);
    }
}
</code></pre>

<p>These observations apply to most of the functions.</p>

<p>Other odd things:</p>

<ul>
<li>Why does <code>findNode()</code> create a dummy object to return on failure, rather than just returning <code>NULL</code>?</li>
<li>And why waste resources creating it in the cases where it's simply deleted again?</li>
<li>What does the return value of <code>delNode()</code> signify?  A common convention is true (i.e. non-zero) for success and false (zero) if not found; is there a reason for a different convention here?</li>
<li><code>printListWithFor()</code> never seems to be called.</li>
<li>Lots of commented-out code and unnecessary <code>printf()</code>s seem to have been left in when debugging.  These should be removed before the code is ready to use.</li>
</ul>
    </div>