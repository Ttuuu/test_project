<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>any</code> is a primitive, it doesn't loop in <code>R</code> but in <code>C</code>, which is much much faster.</p>

<p>loops in <code>R</code> are quite slow, that's why it's important that you use said vectorized functions if you care about speed (apply functions are still loops however).</p>

<p>A way to speed things up is to use package <code>Rcpp</code> to write code in <code>C++</code> through R, when you have a slow <code>R</code> function that uses simple loops it's the way to go, it's still not as fast as <code>C</code> but in our case maybe that'll be enough given we don't need to go through all the vector ?</p>

<p>Let's check:</p>

<pre><code># defines anyx_cpp
cppFunction(
  'bool anyx_cpp(const NumericVector x,const double y) {
     const double n = x.size();
     for (double i = 1; i &lt; n; i++) {
       if (x(i) == y) {
         return(true);
       }
     }
  return false;
  }')

anyx_r &lt;- function(x,y){
  for(x_ in x) if(x_ == y) return(TRUE)
  FALSE
}    

vec &lt;- 1:1e7
x &lt;- 5e6
microbenchmark::microbenchmark(
  rloop  = anyx_r(vec,x),
  cpp    = anyx_cpp(vec,x),
  native = any(vec==x)
)

# Unit: milliseconds
#    expr      min        lq      mean   median       uq      max neval
#   rloop 166.5758 171.34355 203.15277 179.9776 198.8560 990.1650   100
#     cpp  39.5462  40.60585  57.84617  41.4594  46.1232 690.1746   100
#  native  36.9900  37.86090  51.80317  38.9640  43.6510 888.3059   100
</code></pre>

<p>Almost but not quite ;).</p>

<p>So bottom line, in general you can trust vectorized R functions, even if it might seem they're working too much at first sight.</p>
    </div>