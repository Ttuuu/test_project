<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation is correct even if Snowhawk did a good job pointing at what could be improved (although I'd say your recursive approach isn't more complex than "sequential expansion").</p>

<p>My main concern would be with the more general design: a function that 1) zips tuples and 2) applies a function over the zipped elements does one thing too many. It should be composed of two functions: one applying the function to a tuple's members (let's say <code>tuple_for_each</code>) and one zipping the tuples (let's say <code>tuples_zip</code>). That means you can use <code>tuple_for_each</code> also in situations when you don't need to zip, and that you can zip tuples also when you don't need to apply a function to the zipped elements.</p>

<p>Moreover, <code>for_each</code> is another loss of generality, since it can't be used when you need to recover the result of the function you're applying (you could with lambda capture, but that's a contortion). So, I would advocate for a <code>tuple_map</code> function, returning a tuple containing the result of the application in the case where there is one.</p>

<p><code>tuple_map</code> would look like this:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;tuple&gt;

template &lt;typename Fn, typename Tuple, std::size_t... Ns&gt;
constexpr auto tuple_map_impl(Fn&amp;&amp; fn, std::index_sequence&lt;Ns...&gt;, Tuple&amp;&amp; tuple) {
    // if fn's return type is void, do not return a tuple since it'd be invalid
    using fn_return_type = decltype(fn(std::get&lt;0&gt;(tuple)));
    if constexpr (std::is_same_v&lt;fn_return_type, void&gt;)
        (std::forward&lt;Fn&gt;(fn)(std::get&lt;Ns&gt;(std::forward&lt;Tuple&gt;(tuple))),...);
    else  
        return std::forward_as_tuple(std::forward&lt;Fn&gt;(fn)(std::get&lt;Ns&gt;(std::forward&lt;Tuple&gt;(tuple)))...);
    }

template &lt;typename Fn, typename Tuple&gt;
constexpr auto tuple_map(Fn&amp;&amp; fn, Tuple&amp;&amp; tuple) {
    constexpr auto tsz = std::tuple_size_v&lt;std::decay_t&lt;Tuple&gt;&gt;;
    // we need to handle the case where tuple size == 0 because we check fn(std::get&lt;0&gt;(tuple)) in tuple_map_impl
    if constexpr (tsz == 0) return std::forward&lt;Tuple&gt;(tuple);
    else return tuple_map_impl(std::forward&lt;Fn&gt;(fn),
                               std::make_index_sequence&lt;std::tuple_size_v&lt;std::decay_t&lt;Tuple&gt;&gt;&gt;(),
                               std::forward&lt;Tuple&gt;(tuple));
    }
</code></pre>

<p>and <code>tuple_zip</code> like this:</p>

<pre><code>template &lt;std::size_t N, typename... Tuples&gt;
auto zip_tuples_at(Tuples&amp;&amp;... tuples) {
    return std::forward_as_tuple(std::get&lt;N&gt;(std::forward&lt;Tuples&gt;(tuples))...);
    }

template &lt;typename Tuple, typename... Other_tuples&gt;
constexpr auto indexes() {
    return std::make_index_sequence&lt;std::tuple_size_v&lt;std::decay_t&lt;Tuple&gt;&gt;&gt;();
    }

template &lt;std::size_t... Ns, typename... Tuples&gt;
constexpr auto tuples_zip_impl(std::index_sequence&lt;Ns...&gt;, Tuples&amp;&amp;... tuples) {
    return std::make_tuple(zip_tuples_at&lt;Ns&gt;(tuples...)...);
    }

template &lt;typename... Tuples&gt;
constexpr auto tuples_zip(Tuples&amp;&amp;... tuples) {
    return tuples_zip_impl(indexes&lt;Tuples...&gt;(), std::forward&lt;Tuples&gt;(tuples)...);
    }
</code></pre>

<p>We can then compose <code>zipped_tuples_map</code> (my suggestion for the name of your function) with those two functions and <code>std::apply</code>:</p>

<pre><code>template &lt;typename Fn, typename... Tuples&gt;
auto zipped_tuples_map(Fn&amp;&amp; fn, Tuples&amp;&amp;... tuples) {
    return tuple_map([&amp;fn](auto&amp;&amp; zipped_elements) { return std::apply(std::forward&lt;Fn&gt;(fn), zipped_elements); },
                     tuples_zip(std::forward&lt;Tuples&gt;(tuples)...));
    } 
</code></pre>

<p>A link to the complete example: <a href="https://wandbox.org/permlink/kWf0FJJu4sot4wZo" rel="nofollow noreferrer">wandbox</a>.</p>
    </div>