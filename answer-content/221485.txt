<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>no memory should leak when it is used correctly.</p>
</blockquote>

<p>Adding and removing a handler results in an empty <code>List&lt;T&gt;</code> lingering in the <code>Dictionary</code>. It seems odd to use a list at all... (I'll come back to that).</p>

<hr>

<p>dfhwze presents a good alternative solution which loads the complexity in one place. I would be inclined to consider the same, but perform conventional type checks instead of relying on <code>dynamic</code>. A simple change to dfhwze's code could be:</p>

<pre><code>public void InvokeChange(T value)
{
    foreach (var listener in listeners)
    {
        if (listener is Action a)
            a();
        else if (listener is Action&lt;T&gt; aT)
            aT(value);
        else if (listener is Action&lt;object&gt; aObject)
            aObject((object)value);
        else
            throw new InvalidOperationException("&lt;&lt; Suitable exception text here, telling the user to shout at the maintainer &gt;&gt;")
    }
}
</code></pre>

<p>This requires no more repetition, and is more explicit about what is going on. It aso avoids <code>dynamic</code>, which makes it more maintainable because all dependencies are statically declared.</p>

<p>Using a sorted dictionary/list, you could put everything in the dictionary, and enumerate its values instead of maintain two collections (the dictionary and generic event). This would reduce redundancy (good), improve add/remove complexity, but increase the overhead of calling the event.</p>

<hr>

<p>Personally I like the proxy approach, but I couldn't bare to have all that code repeated in the events: you might consider packaging it (and <code>ObjectEventProxies</code>) in a class somewhere so that you can reuse it tidily. That said, most of the code is spent implementing a dictionary which stores an ordered list of values (which is a perfectly generic data structure), so you could just throw one of those together, and that would reduce the amount of repetition (and so fragility) significantly without the effort and risk inherent in trying anything more interesting. This would leave the event handler as more like:</p>

<pre><code>add
{
    Action&lt;T&gt; proxy = /* whatever */;
    WhateverEventProxies.Add(value, proxy);
    ChangeValue += proxy;
}
remove
{
    var proxity = WhateverEventProxies.Remove(value);
    ChangeValue -= proxy;
}
</code></pre>

<p>All of the complexity of managing the dictionary is gone, and now the intention of these accessors is clear.</p>

<p>One significant advantage of stuffing everything into another class would be that it would be easier to make thread safe; though, in this case, you could probably just use a thread-safe dictionary with a count, since any event handlers added more than once are equivalent (the ordering doesn't matter).</p>

<hr>

<p>Since you are stuffing everything in <code>ChangeValue</code> to preserve the order, it's possible to add something with, for example <code>ChangeObject</code> only to remove it with <code>ChangeValue</code>, but since delegates provide exactly one method, there is no problem, and this means you can just use one dictionary (with <code>object</code> as the key) to track all the proxies in a single class.</p>
    </div>