<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You <strong>don't</strong> need to <strong>define and increment the <code>player_id_index</code></strong> variable outside of the for loop:</p>

<pre><code>player_id_index = 0
player_dict = {}

for _ in range(5000):
    player_id_index += 1
    new_player = create_new_player(person_data)
    player_dict[player_id_index] = new_player
</code></pre>

<p>Just do:</p>

<pre><code>for player_id_index in range(1, 5000):
    player_dict[player_id_index] = create_new_player(person_data)
</code></pre>

<p>Or reduce it all to this dict comprehension:</p>

<pre><code>player_dict = {id_: create_new_player(id_) for id_ in range(1, 5000)}
</code></pre>

<hr>

<p><strong>Unpack the tuple</strong> in the head of this for loop to make it more readable:</p>

<pre><code>for i in zip(positions_list, probability_list):
    position_probabilities.extend([i[0]] * i[1])

for position, probability in zip(positions_list, probability_list):
    position_probabilities.extend([position] * probability )
</code></pre>

<p>Python 3.6 offers you the new <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> function:</p>

<pre><code>positions_list = ['QB', 'RB', 'WR', 'TE', 'OL', 'DL', 'LB', 'DB', 'P', 'K']
probability_list = [5, 6, 10, 5, 15, 15, 12, 13, 2, 2]
position = random.choices(positions_list, probability_list, k=1)[0]
</code></pre>

<hr>

<p>In <code>create_states_data</code> I think this would look a bit more readable (you could also use a dict comprehension here, but it'd look a bit dense):</p>

<pre><code>for i in reader:
    states[i['state']] = {'abbreviation': i['abbreviation'],
                          'population': i['population'],
                          'towns': {}}
</code></pre>

<hr>

<p>Regarding the <strong>global variables</strong> <code>first_names_list, last_names_list</code> etc., since you don't mutate them later, they are global <strong>constants</strong>. You can just access them in the <code>create_character</code> function and don't have to pass them. The convention is to use uppercase names for constants to signal to other programmers that they mustn't be changed, e.g. <code>FIRST_NAMES_LIST</code>.</p>
    </div>