<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Swing code is generally appalling, and that includes the tutorials.</p>

<p>As always in Java, don't go around subclassing classes you don't need to. You wouldn't dare subclass <code>Thread</code> (any more), so don't subclass <code>JFrame</code> or <code>JPanel</code>. However, for <code>JComponent.paintComponent</code> methods is being overridden sensibly, the <code>get</code> method should be replaced by calling the appropriate <code>set</code>s.</p>

<p>What appear to be "objects" in na√Øve object orientation, should really be just plain functions. However, often processes should be object - think of them of processors.</p>

<p>Classes that are just a collection of fields with get (and possibly set) method, are probably a bad idea. You'll also see <code>get</code> followed only by an action on the gotten value.</p>

<p>Swing (and in practice AWT) should only be used from the AWT Event Dispatch Thread (EDT). <code>main</code> executes in a different thread. So you need to switch threads.</p>

<pre><code>public static void main(String[] args) {
    java.awt.EventQueue.invokeLater(MyApp::swingGo);
}
private static void swingGo() {
</code></pre>

<p>Your <code>RectanglePanel</code> attempts to derive its preferred size from the size of a <code>JFrame</code>. That wont update when the window is resized, and looks to be attempting to do something a <code>LayoutManager</code> should be doing.</p>

<p>That <code>repaint</code> should be a <code>revalidate</code> as you are adding components.</p>

<p>I don't think you don't need to both <code>fill</code> and <code>draw</code> the rectangle in the same colour.</p>

<p><code>Integer.parseInt</code> may throw an exception, so that should be caught rather than thrown (no need to dump the stack tract).</p>

<p>In terms of style: In Java open braces are usually on the same line as the statement they belong to. <code>parseInt</code> could be stored in a local variable, rather than living within the <code>for</code> statement.</p>
    </div>