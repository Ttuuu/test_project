<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>DRY Principle</h2>

<p>You should write DRY (don't repeat yourself) code. Each of your if-blocks contains the following pattern:</p>

<blockquote>
<pre><code>using (ELECTROPEntities db = new ELECTROPEntities())
{
    try
    {
        var x = getData(db)
                .Where(predicate).ToList();
        return PartialView("multi", x);
    }
    catch (Exception ex)
    {
        return Json(ex.ToString(), JsonRequestBehavior.AllowGet);
    }
}
</code></pre>
</blockquote>

<p>where <code>predicate</code> is the only part that is specific to the if-block.</p>

<p>One way to use this pattern is to ask the <code>MultipleParameterSearch</code> parameter to return the <code>predicate</code> for us.</p>

<pre><code>MultipleParameterSearch multiple; // given
var predicate = multiple.GetFilter();
</code></pre>

<p>The filter should return a specific predicate given its state.</p>

<pre><code>public Func&lt;ELECTROPEntity, bool&gt; GetFilter()
{
    if (strCod != null &amp;&amp; strRack == null 
        &amp;&amp; strPosi == null &amp;&amp; strLvl == null 
        &amp;&amp; intCantMin == null &amp;&amp; intCantMax == null)
    {
        return (entity) =&gt; entity =&gt; entity.CodProd == strCod &amp;&amp; entity.Stock &gt; 0;
    }
    // .. and so on
}
</code></pre>

<p><code>MultipleParameterSearch</code> can then be implemented with just a couple of lines:</p>

<pre><code>public ActionResult MultipleParameterSearch(MultipleParameterSearch multiple)
{
     using (var db = new ELECTROPEntities())
     {
         try
         {
             return PartialView("multi", getData(db).Where(multiple.GetFilter()).ToList());
         }
         catch (Exception ex)
         {
             return Json(ex.ToString(), JsonRequestBehavior.AllowGet);
         }
    }
}
</code></pre>
    </div>