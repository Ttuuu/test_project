<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few things to think about, more about the design and usage of the Matrix class than just the code.</p>

<p>In my particular and peculiar corner of the universe, we often have need for empty matrices, that is, a matrix where one or more dimensions are <strong>zero</strong>.  The idea would be that a matrix would be built up or destroyed during the course of program execution and at one or another point in time, having zero rows would be quite natural.  Granted VBA does not support empty arrays, one nasty (or just silly) way I had dealt with this is to pad with one extra row or column element.  Sure, it's some extra space, but this is after all 2015.</p>

<p>More down to earth, I would use a parser-free analogue and companion to LoadMatrixString, something like</p>

<pre><code>Public Sub LoadMatrixVector(rows as Long, columns as Long, values() as Double)
</code></pre>

<p>possibly used in conjunction with a helper function like</p>

<pre><code>Public Function Vector(ParamArray values() As Variant) As Double()
    Dim result() As Double
    ReDim result(UBound(values))
    Dim i As Long
    Dim item As Variant
    i = 0
    For Each item In values
        result(i) = CDbl(values(i))
        i = i + 1
    Next item
    Vector = result
End Function
</code></pre>

<p>where I could write</p>

<pre><code>Set mat = LoadMatrixVector(3, 3, Vector(1, 2, 3))
</code></pre>

<p>and get a matrix with three rows of 1, 2, and 3.  LoadMatrixVector could wrap the values as needed until the result is filled.
Also, I could see something like this as an acceptable compromise to do operations in place (you called this "destructive").</p>

<pre><code>Set D = A.ShallowCopy().Multiply(B).Add(C).ScalarMultiply(5)
</code></pre>

<p>And there's more.  My suggestions may contravene established coding practices.  I try to go for a combination of brevity and clarity.</p>

<p>First, I prefer to dispose of easy cases early in a program, to reduce (cyclometric?) complexity later.  For instance, instead of</p>

<pre><code>Public Function Add(m As Matrix) As Matrix
    Dim mresult As Matrix
    Dim r As Long
    Dim c As Long

    CheckDimensions

    If m.Rows = Me.Rows And m.Cols = Me.Cols Then
        Set mresult = New Matrix
        mresult.Resize Me.Rows, Me.Cols
        For r = 0 To Me.Rows - 1
            For c = 0 To Me.Cols - 1
                mresult.Value(r, c) = Me.Value(r, c) + m.Value(r, c)
            Next
        Next
    Else
        Err.Raise vbObjectError + 1, "Matrix.Add", "Could not Add matrices: the Rows and Columns must be the same. The left matrix is (" &amp; Me.Rows &amp; ", " &amp; Me.Cols &amp; ") and the right matrix is (" &amp; m.Rows &amp; ", " &amp; m.Cols &amp; ")."
    End If
    Set Add = mresult
End Function
</code></pre>

<p>I would move the conformability check up a bit earlier and possibly exit early.  Not really shorter, but the actual business part of the function is simpler and has less indentation.</p>

<pre><code>Public Function Add(m As Matrix) As Matrix
    Dim mresult As Matrix
    Dim r As Long
    Dim c As Long

    CheckDimensions

    If m.Rows &lt;&gt; Me.Rows Or m.Cols &lt;&gt; Me.Cols Then
        Err.Raise vbObjectError + 1, "Matrix.Add", "Could not Add matrices: the Rows and Columns must be the same. The left matrix is (" &amp; Me.Rows &amp; ", " &amp; Me.Cols &amp; ") and the right matrix is (" &amp; m.Rows &amp; ", " &amp; m.Cols &amp; ")."
    End If

    Set mresult = New Matrix
    mresult.Resize Me.Rows, Me.Cols
    For r = 0 To Me.Rows - 1
        For c = 0 To Me.Cols - 1
            mresult.Value(r, c) = Me.Value(r, c) + m.Value(r, c)
        Next
    Next
    Set Add = mresult
End Function
</code></pre>

<p>Next, functions which return boolean results like</p>

<pre><code>Private Function IsEOL(char As String) As Boolean
    If char = Chr(13) Or char = Chr(10) Then
        IsEOL = True
    Else
        IsEOL = False
    End If
End Function
</code></pre>

<p>can be written like this</p>

<pre><code>Private Function IsEOL(char As String) As Boolean
    IsEOL = char = Chr(13) Or char = Chr(10)
End Function
</code></pre>

<p>though VBA's design decision of using = for both assignment and equality is irritating here.  This also works in Java etc.</p>

<p>Combining the two ideas, isDigit can get much smaller</p>

<pre><code>Private Function IsDigit(char As String) As Boolean

    Dim charval As Integer
    IsDigit = False
    If char = "" Then Exit Function

    charval = Asc(char)
    IsDigit = 48 &lt;= charval And charval &lt;= 57

End Function
</code></pre>

<p>I feel you did a lot if things right, you did the best with what you had.</p>

<p>Comments are there when needed to explain what you're doing, but you otherwise assume a reasonable language literacy level.</p>

<p>The MultiplyScalar function is a good example of not doing too much.  Instead of mucking about with VBA's lack of function overloading and trying to separate scalar and matrix cases in a Multiply function, the burden of type checking stays with VBA, where it belongs.</p>

<p>Good stuff.</p>
    </div>