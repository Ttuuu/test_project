<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I personally find the fun part of programming to be the challenge of trying to find the leanest, most direct way to execute a task.  One measure of how careful a developer is is to pay attention to occurrences where a script repeats something.  You should always strive to not repeat yourself (D.R.Y. means Don't Repeat Yourself).</p>
<p>You don't need to bloat your array of options with redundant elements.  Just name the three options and move on.</p>
<pre><code>$options = ['paper', 'rock', 'scissors'];
</code></pre>
<p>...and don't repeat the <code>&lt;h1&gt;</code> elements in your condition block.  Find the outcome, save the string as a variable and echo that variable inside your html markup just one time.</p>
<p>When you want to create your html form, don't manually write the options, loop over the <code>$options</code> array.  <code>printf()</code> is a personal choice to avoid needing to escape double quotes or use concatenation syntax.  In other words, the extra function call is for code cleanliness.</p>
<pre><code>foreach ($options as $option) {
    printf (
        '&lt;input type="radio" name="playerSelection" value="%s"&gt;%s&lt;br&gt;',
        $option,
        ucfirst($option)
    );
}
</code></pre>
<p>Another important point is to never generate data that you will not use.  On the page load before the human makes a selection, there will be no comparison.  This means that you should definitely not be making a random selection for the "computer".</p>
<p>I don't like the loose comparison to <code>NULL</code>, just use <code>if (!isset($_POST['playerSelection'])) {</code>.  Instead of writing the inverted <code>if</code> condition immediately after the first, just use <code>} else {</code>.</p>
<p>As for determining the outcomes, there will be several different techniques to choose from.  Some developers will prefer to have a literal lookup array of all combinations of selections pointing to a literal output value.  Others will aim for a mathematical technique that will spare memory at a cost of readability.  This part will come down to how adventurous you'd care to be.  Your battery of conditions is very easy to read but it is also one of the longest ways to code your logic.  Compare to this alternative:</p>
<p>After further consideration, I think it is better to only declare the flipped options array since this perfectly enables the random selection for the computer and the lookups to determine the <code>$difference</code>.</p>
<p>Code: (<a href="https://3v4l.org/kcR45" rel="nofollow noreferrer">Demo</a>)</p>
<pre><code>$options = array_flip(['paper', 'rock', 'scissors']);
$outcomes = ['draw', 'win', 'lose'];

$cpuSelection = array_rand($options);
$playerSelection = 'rock';
$difference = $options[$cpuSelection] - $options[$playerSelection];

var_export([
    'cpu' =&gt; $cpuSelection,
    'human' =&gt; $playerSelection,
    'outcome' =&gt; $outcomes[($difference + 3) % 3]
]);
</code></pre>
<p>Outputs (potentially):</p>
<pre><code>array (
  'cpu' =&gt; 'rock',
  'human' =&gt; 'rock',
  'outcome' =&gt; 'draw',
)

array (
  'cpu' =&gt; 'scissors',
  'human' =&gt; 'rock',
  'outcome' =&gt; 'win',
)

array (
  'cpu' =&gt; 'paper',
  'human' =&gt; 'rock',
  'outcome' =&gt; 'lose',
)
</code></pre>
<p>It isn't instantly comprehensible.  Why do I have a magic <code>3</code> in there?  If you sharpen your pencil and write a matrix of inputs and outputs, you will find that if you subtract the computer's option's <s>index</s>value from the player's option's <s>index</s>value, then a pattern forms...</p>
<p>If the difference is <code>0</code>, then it is a draw.
If the difference is <code>1</code> or <code>-2</code>, then it is a win.
If the difference is <code>2</code> or <code>-1</code>, then it is a loss.
By adding <code>3</code> then using the modulus operator to find the remainder upon dividing by 3, you have 3 reliable integers by which you can translate into words via the <code>$outcomes</code> lookup array.</p>
<p>As I said, there will be several ways to attack the outcome calculation.  At the end of the day, this is the type of logical algorithm that you will write once and put behind you so that you can focus on more important things like improving the UX, or converting the script structure to oop, etc.</p>
<p>In terms of the UI, yeah, it's pretty raw, but because I don't really care to delve into the html/js/css aspects of this little project, I'll end my review here.</p>
    </div>