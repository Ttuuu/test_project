<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As written, <code>$new</code> will contain the return value of <code>s///</code>, which is 1 (true) or the empty string (false).  This will (almost) never match <code>$content</code> and you'll be rewriting every file unconditionally.</p>

<p>You can inject <code>$1</code> directly without the pass-and-eval.  This will stop the Perl script altogether in the event of an error, which is probably desirable.</p>

<p>While <code>my</code> and lexical <code>open</code> etc. are good habits, they're at odds with the design constraints of a one-liner that needs to survive multiple levels of quoting.  For example, <code>print FD</code> prints <code>$_</code> to handle <code>FD</code>, while <code>print $fd</code> needs an explicit <code>$_</code> argument, else it prints the string representation of that handle to stdout.  Just switching to a bareword-open saves you five characters.</p>

<p>Perl has a mechanism to read whole files specified on command-line and you can shorten your script further by employing it.</p>

<p>Tying all this together, your one-liner can fit in one line with some whitespace to spare.  In 128 columns (plus four spaces of indent):</p>

<pre><code>[alias]
    pie = "!f(){ git ls-files -z | xargs -0 perl -0777ne'$old=$_; '\"$1\"'; $_ ne $old and open FD, q|&gt;|, $ARGV and print FD';} ;f"
</code></pre>
    </div>