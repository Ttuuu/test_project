<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like your clear variable names (though I'd prefer <code>Amount</code> rather than abbreviating to <code>Amt</code>).</p>

<p>Avoid <code>using namespace std</code> - it's a big (and growing) namespace that's not intended for wholesale import like that, and doing so can unexpectedly change the meaning of your program.  <code>std::</code> is intentionally very short, so get used to typing it.</p>

<p>Don't use <code>std::endl</code> unless you really mean to flush the output - it's much cheaper to write a <code>\n</code> instead.  Many of the multiline strings can be combined - e.g.</p>

<pre><code>std::cout &lt;&lt; "\n\n"
    "     ***********************************************\n"
    "     *                                             *\n"
    "     *          Monthly Payment Calculator         *\n"
    "     *                                             *\n"
    "     ***********************************************\n\n"
    "Greetings and welcome to the loan calculator!\n\n";
</code></pre>

<p>When reading inputs, it's vital to check that the read was successful:</p>

<pre><code>cin &gt;&gt; name;
if (!cin) {
    std::cerr &lt;&lt; "Invalid input\n";
    return 1;
}
</code></pre>

<p>Better would be to recover and re-ask for the input, but that's a little more advanced.</p>

<p>Does it make any sense to view results when no data have been entered?  Option 2 probably shouldn't be available until option 1 has been used.  In fact, it probably makes sense not to have a menu - just read the input values and produce the corresponding outputs.  For multiple runs, just invoke the program again ("<em>do one thing well</em>").</p>

<p>I'm not sure what Option 3 is for - perhaps that should be a separate program?</p>

<p><code>std::system()</code> is declared in <code>&lt;cstdlib&gt;</code>.  I'd avoid it, though - how do you know the user has a program called <code>pause</code> in their path (I don't, for one), and how do you know it does what you expect?</p>
    </div>