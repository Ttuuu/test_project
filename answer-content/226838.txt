<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I made some modifies to your code focusing on simplify the code you posted starting from the signature of the constructor <code>public StageFailureRate(int N, Integer[] stages)</code>, better to use <code>public StageFailureRate(int N, int[] stages)</code> because in the body of the constructor you never use <code>the ArrayList</code> methods.
Instead of</p>

<pre><code>for (int stage : stages) {
    if (!usersOnStage.containsKey(stage)) {
        usersOnStage.put(stage, 1);
    } else {
        usersOnStage.put(stage, usersOnStage.get(stage) + 1);
           }
}
</code></pre>

<p>You can omit the <code>if else</code> and write:</p>

<pre><code>for (int stage : stages) {
   int count = usersOnStage.containsKey(stage) ? usersOnStage.get(stage) : 0;
   usersOnStage.put(stage, count + 1);
}
</code></pre>

<p>You can convert <code>total = stages.length</code> to <code>float</code> and rewrite the calculus cycle in this way:</p>

<pre><code>float total = stages.length;
Map&lt;Integer, Float&gt; failureRates = new HashMap&lt;Integer, Float&gt;();

for (int i = 1; i &lt;= N; ++i) {
    float failureRate = 0;
    if (usersOnStage.containsKey(i)) {
        failureRate = usersOnStage.get(i) / total;
        total -= usersOnStage.get(i);
    } 
    failureRates.put(i, failureRate);
}
</code></pre>

<p>The method <code>sortByValues</code> can be simplified using java streams and you can write it in this way:</p>

<pre><code>private Map&lt;Integer, Float&gt; sortByValue(Map&lt;Integer, Float&gt; map) {
        Map&lt;Integer, Float&gt; reverseSortedMap = new LinkedHashMap&lt;&gt;();
        map 
        .entrySet()
        .stream()
        .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) 
        .forEachOrdered(x -&gt; reverseSortedMap.put(x.getKey(), x.getValue()));
        return reverseSortedMap;
}
</code></pre>

<p>Now you can rewrite the end of your constructor:</p>

<pre><code>Map&lt;Integer, Float&gt; sortedMap = sortByValue(failureRates);
Set&lt;Integer&gt; keys = sortedMap.keySet();
for (Integer key : keys) {
    result.add(key);
}
</code></pre>

<p>Above the code of the class modified:</p>

<p><strong>StageFailureRate.java</strong></p>

<pre><code>package stackoverflow;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class StageFailureRate {
    private List&lt;Integer&gt; result;

    public StageFailureRate(int N, int[] stages) {
        result = new ArrayList&lt;&gt;();
        Map&lt;Integer, Integer&gt; usersOnStage = new HashMap&lt;&gt;();

        //count how many users are on each stage
        for (int stage : stages) {
            int count = usersOnStage.containsKey(stage) ? usersOnStage.get(stage) : 0;
            usersOnStage.put(stage, count + 1);
        }


        //compute the failure rate for each stage, up to N stages
        float total = stages.length;
        Map&lt;Integer, Float&gt; failureRates = new HashMap&lt;Integer, Float&gt;();

        for (int i = 1; i &lt;= N; ++i) {
            float failureRate = 0;
            if (usersOnStage.containsKey(i)) {
                failureRate = usersOnStage.get(i) / total;
                total -= usersOnStage.get(i);
            } 
            failureRates.put(i, failureRate);
        }

        //Sort into descending order and get the result.
        Map&lt;Integer, Float&gt; sortedMap = sortByValue(failureRates);

        Set&lt;Integer&gt; keys = sortedMap.keySet();
        for (Integer key : keys) {
            result.add(key);
        }

    }

    private Map&lt;Integer, Float&gt; sortByValue(Map&lt;Integer, Float&gt; map) {
        Map&lt;Integer, Float&gt; reverseSortedMap = new LinkedHashMap&lt;&gt;();
        map 
        .entrySet()
        .stream()
        .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) 
        .forEachOrdered(x -&gt; reverseSortedMap.put(x.getKey(), x.getValue()));
        return reverseSortedMap;
    }

    public List&lt;Integer&gt; getResult() {
        return result;
    }


    public static void main(String[] args) {
        int[] stages = {2, 1, 2, 6, 2, 4, 3, 3};
        int N = 5;
        StageFailureRate rate = new StageFailureRate(N, stages);
        System.out.println(rate.getResult());
    }
}
</code></pre>

<p>I preferred not modify all the methods of your class , normally in the constructor is always preferred just to initialize fields of the class, computations like <code>result</code> are encapsulated in <code>static</code> methods or at least outside constructor.</p>
    </div>