<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few quick observations:</p>

<ol>
<li><p>Don't use <code>#define</code> for all those compile time constants (opcodes).  They should be part of an opcode <code>enum</code> or declared as <code>constexpr int</code>.</p></li>
<li><p>You're only allocating 65,535 bytes for <code>mem</code>, when you should be allocating 65,536.  An attempt to access <code>mem[0xFFFF]</code> will result in Undefined Behavior because it is past the end of the allocated space.</p></li>
<li><p>Having a default case label to catch unimplemented opcodes is a Good Thing.</p></li>
<li><p><code>if((unsigned)argc - 2 &gt; 0)</code> is somewhat obscure.  What's wrong with <code>if (argc != 2)</code>?</p></li>
<li><p>I'm not sure what you're trying to do with your <code>reg</code> struct, but you could eliminate the duplicate data storage to add byte and word accessor methods.  Both GCC and Clang will optimize (<code>-O3</code>) these to single instruction byte accesses.  MSVC does the same for getters, but setters are not fully optimized (with <code>/O2</code> and variations I tried).</p>

<pre><code>struct reg {
    uint16_t combined;
    uint8_t high() const
    {
        return combined &gt;&gt; 8;
    }
    uint8_t low() const
    {
        return combined &amp; 255;
    }
    void seth(uint8_t v)
    {
        combined = (combined &amp; 255) | (v &lt;&lt; 8);
    }
    void setl(uint8_t v)
    {
        combined = (combined &amp; ~255) | v;
    }
};
</code></pre>

<p><code>combined</code> could be made private and accessors added to it if desired.</p></li>
<li><p>While it is unlikely a <code>z80</code> object will be copied, you should <code>=delete</code> the copy and move constructors and assignment operators.  See this <a href="https://stackoverflow.com/questions/4782757/rule-of-three-becomes-rule-of-five-with-c11">question</a> on Stack Overflow.</p></li>
</ol>
    </div>