<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wonder if you did a quick Google search before rolling your own solution. Despite being implemented via different languages, they all give the same general regex solution.</p>

<ul>
<li><p><a href="https://stackoverflow.com/q/32225635/2943403">Regex to remove all <code>&lt;br /&gt;</code> tags from beginning and end of a string in javascript</a></p></li>
<li><p><a href="https://stackoverflow.com/q/28128929/2943403">Remove <code>&lt;br&gt;</code> tags from the beginning and end of a string</a></p></li>
<li><p><a href="https://stackoverflow.com/q/18717206/2943403">Remove BR tag from the beginning and end of a string</a></p></li>
</ul>

<p>As you have discovered, <code>trim()</code> functions treat the 2nd parameter as a "character mask", this means that it will greedily remove any consecutive characters from the beginning/end of the string from that "list of characters" (<code>&lt;br&gt;</code> is the same as <code>rb&gt;&lt;</code>).</p>

<p>If you need a utility function and require the same passed-in parameters:</p>

<pre><code>function trimString($input, $find, $replacement = ' ', $type = 'ltrim') {
    $patterns = [
        'ltrim' =&gt; '^(?:' . preg_quote($find, '/') . ')+',
        'rtrim' =&gt; '(?:' . preg_quote($find, '/') . ')+$'
    ];
    $pattern = $patterns[$type] ?? implode('|', $patterns);
    return preg_replace('/' . $pattern . '/i', $replacement, $input);
}
</code></pre>

<p>If you want to be able to pass replacement strings which contain regex to the custom function like <code>&lt;br\s*/?&gt;</code>, then you can remove the <code>preg_quote()</code> calls entirely or set a flag/argument in the custim function which determines whether the quoting call should be implemented.  This means that the responsiblity of quoting any special characters is transferred from the custom function to whatever layer is calling the custom function.</p>

<p>If you want to use <code>trim()</code> before or after the execution of this custom function, that makes perfect sense too -- removing whitespace characters is exactly what it is mean to do.</p>

<p>If your requirements keep extending and you have the intention of removing HTML tags from a valid HTML document, then regex is probably not the right path to go down.  Regex is DOM-unaware and will be vulnerable to breakage in fringe case scenarios -- a legitimate DOM parser would be my strong recommendation in that case.</p>
    </div>