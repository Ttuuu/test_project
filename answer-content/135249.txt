<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Long conditional chains</h3>

<p>Use a dictionary instead of long conditional chains</p>

<pre><code>hash_functors = {
    'md5': hashlib.md5,
    'sha1': hashlib.sha1,
    ...
}

try:
    hash_functor = hash_functors[hash_type]
except KeyError:
    raise YourSpecialCustomErrorOrWhatever("Unknown hash type {}".format(hash_type))
</code></pre>

<p>Even better, however, is to just use the dictionary implicitly contained by the hashlib module.  All of your hash types are just functions of the module, so you should do something like</p>

<pre><code>def get_hash_functor(hash_type):
    try:
        return getattr(hashlib, hash_type)
    except AttributeError:
        raise YourSpecialCustomErrorOrWhatever("Unknown hash type {}".format(hash_type))
</code></pre>

<p>By wrapping it in a function you also make it much easier to change the backend implementation of your hash functions and swap them out for others as needed.</p>

<h3>Context managers</h3>

<p>Always use context managers whenever possible.</p>

<pre><code>with open(wordlist, 'r') as wordlist1:
    do_stuff(wordlist1)
</code></pre>

<p>This ensures that any necessary cleanup occurs after the indented block, even if there is an unhandled exception.</p>

<h3>Iterating over a file</h3>

<p>Its easier to iterate over a file in Python like this</p>

<pre><code>for line in open_file:
    do_something_to_line(line)
</code></pre>

<p>You can also clearly handle the case where no match was found.  With for-loops in Python, an <code>else</code> block is entered if the loop isn't broken out of or returned from, i.e. if you loop over an empty iterable, or the condition is never met within the loop, etc.</p>

<pre><code>index = 0
hashed_word = None
for index, word in enumerate(wordlist1):
    hashed_word = hash_functor(word.strip())
    if hashed_word.hexdigest() == correct_hash:
       print "[+]Hash is: %s" % line
       break
else:
    print "[-]Hash not cracked:"
    print "[*]Reached end of wordlist"
    print "[*]Try another wordlist"

print "[*]Words tried: %s" % index
return hashed_word
</code></pre>

<p>I also pulled some common code out of there to make it clearer, returned the value so you can continue to process it if necessary, and used <code>enumerate</code> to more cleanly handle counting loop iterations.</p>

<h3>hashcracknum vs hashcrack</h3>

<p>These are basically identical; the only difference is what they're trying to hash. Factor the similarities out into shared functions, and then only have the differences and minor setup code in each.  You'll end up with something that looks sort of like this</p>

<pre><code>def is_matching_hash(value_to_hash, correct_hash, hash_functor):
  return hash_functor(value_to_hash).hexdigest() == correct_hash

def _do_hash_crack(iterable, hash_functor, correct_hash, verbose):
  attempt_number = 0
  value = None

  for attempt_number, value in enumerate(iterable, start=1):
    if verbose:
      print "{:&lt;20}".format(value)
    if is_matching_hash(value, correct_hash, hash_functor)
      break

  return attempt_number, value

def hash_crack(word_file_name, correct_hash, hash_functor, verbose=False):
  with open(word_file_name, 'r') as wordfile:
    iterable = word.strip().lower() for word in wordfile

    tries, word = _do_hash_crack(iterable, hash_functor, correct_hash, verbose)

  if value is None:
    print "\n[-]Hash not cracked:"
    print "[*]Reached end of wordlist"
    print "[*]Try another wordlist"
  else:
    print "[*]Hash is: %s" % word

  print "[*]Words tried: %s" % tries
  return word

def hash_crack_num(correct_hash, hash_functor, verbose=False):
  tries, number = _do_hash_crack(itertools.count(), hash_functor, correct_hash, verbose)

  print "[*]Words tried: %s" % tries
  return number
</code></pre>

<p>As you can see, the main difference is in what the iterable is, and what message we print out when none is found (which doesn't happen with the hash_crack_number function as it never terminates until the correct value is found. This is your code's original behavior, but it smells bad to me - is it what you intended?).</p>

<h3>StringIO</h3>

<p>In order to maximize compatibility and performance while using <code>StringIO</code> you generally want something like this</p>

<pre><code>try:
    import cStringIO as io
except ImportError:
    try:
        import StringIO as io
    except ImportError:
        import io
</code></pre>

<p>The order you try them in will generally depend on what you think is most likely to be available on your system. I have a little function I have lying around I use whenever I have chains like these</p>

<pre><code>def import_fallback(names, name_as, final_exception=None):
    for name in names:
        try:
            globals()[name_as] = __import__(name)
            break
        except ImportError as e:
            if name == names[-1]:
                if final_exception is not None:
                    final_exception(e)
                else:
                    raise
</code></pre>

<p>Then you'd just do</p>

<pre><code>import_fallback(['io', 'cStringIO', 'StringIO'], 'io'])
</code></pre>

<p>An easy modification if you don't like messing with <code>globals()</code> inside of the function would be to explicitly return, and then put it into whatever scope you want a la</p>

<pre><code>globals()['io'] = import_fallback(['io', 'cStringIO', 'StringIO'])
</code></pre>

<h3>CLI and main</h3>

<p>Use argparse or another third party module like docopt or click instead of getopt - much cleaner and more familiar for Python developers.</p>

<p>You should also probably have a dedicated function (or 2, or 3, or however many it takes to do it cleanly and modularly) to handling the command line.</p>

<p>You also don't need any global state - instead take the values that functions will need and pass them as parameters. The functions I rewrote up above assume that the caller function gives it a functor to hash a value, as well as the correct hash, the name of the file (if applicable) and whether or not the function is 'verbose'.</p>

<h3>OOP</h3>

<p>Just because you can make something an object doesn't mean you should. I don't see any advantage to making this a class.</p>

<p>You're also abusing OOP - you have <code>self.num</code> (which is also horribly named and doesn't at all indicate what purpose it serves) and use it for different purposes in two places.  </p>

<h3><code>sys.stdout.write</code> vs <code>print</code></h3>

<p>There is almost never a reason to use <code>sys.stdout.write</code> instead of just <code>print</code>. So just use <code>print</code>.</p>
    </div>