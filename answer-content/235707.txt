<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Obfuscation</h1>

<p><code>Tile.empty</code> is a long, verbose way of saying <code>None</code>.  Each time you use it, the Python interpreter must look up <code>Tile</code> in <code>locals()</code>, and then <code>globals()</code>, to find the <code>Tile</code> class object.  Then, it needs to look up <code>empty</code> in the <code>Tile</code> dictionary to find the value <code>None</code>.  If you simply used <code>None</code>, your code would be faster, because <code>None</code> is a keyword; no heroic efforts are needed by the Python interpreter to determine what this value is.</p>

<h1>Dictionary of None values</h1>

<p>From the minimal code which has been presented, there is no compelling reason to store each direction in <code>self.directionals</code>.  Instead of a direction key returning <code>None</code> (or <code>Tile.empty</code>), that direction could simply not exist in the dictionary.  The top-left corner would only contain directions "e", "se", and "s".  This would simply this code:</p>

<pre><code>        for direction in tile.directionals.values():
            if direction is not Tile.empty and direction not in visited:
                ...
</code></pre>

<p>to this:</p>

<pre><code>        for direction in tile.directionals.values():
            if direction not in visited:
                ...
</code></pre>

<p>One less check means less work, and faster performance.</p>

<p>Finally, since you keep asking for <code>tile.directional.values()</code>, you might consider storing these values in their own collection:</p>

<pre><code>        tile.valid_directionals = set(tile.directionals.values())
</code></pre>

<p>or, if you must store all 8 directions:</p>

<pre><code>        tile.valid_directionals = set(value for value in tile.directionals.values()
                                      if value is not Tile.empty)
</code></pre>

<p>and then using:</p>

<pre><code>        for direction in tile.valid_directionals:
            if direction not in visited:
                ...
</code></pre>

<p>Using a <code>set</code> instead of a <code>dict_values</code> iterator may not be any faster, but I'll be taking advantage of it later.</p>

<h1>List Comprehension</h1>

<pre><code>    self.grid = [[] for _ in range(length)]

    for i in range(length):
        for _ in range(length):
            new_tile = Tile(randomchar()) #assume randomchar() returns a random character each time
            self.grid[i].append(new_tile)
</code></pre>

<p>is a long, round about way of writing:</p>

<pre><code>    self.grid = [[Tile(randomchar()) for _ in range(length)] for _ in range(length)]
</code></pre>

<p>Whenever you create a <code>list</code>, and then <code>append</code> to it in a loop, consider using list comprehension instead.  It is a powerful tool for your tool chest.</p>

<h1>Simplify Tests</h1>

<p>Consider <code>i - 1 &gt;= 0</code>.  The Python Interpreter must lookup the value <code>i</code>, subtract 1 from it, which involves constructing a new <code>int</code> object, or since all the values are going to be small, looking up an interned version.  Then, the value is compared to zero, and discarded.  Consider the equivalent expression <code>i &gt;= 1</code>, or even <code>i &gt; 0</code>.  Look up the value and compare to a constant.  No subtraction operation required, no new integer object required for the result, and no discarding of the result of the subtraction after being used.  This is still in your executed once initialization code, so performance doesn't matter much, but why be sloppy?</p>

<h1>Searching too deep</h1>

<p>Your <code>helper</code> function looks approximately like:</p>

<pre><code>    def helper(tile, word):
        if len(word) &gt; max_word_length:
            return

        ...

        for direction in tile.directionals.values():
            if ...:
                helper(direction, word + direction.letter)
</code></pre>

<p>Imagine if we've called the helper a few times, and we've just recursed in with <code>word="TRAPS"</code>.  We start looping around the tiles around the <code>S</code>, skipping the visited tiles, and call <code>helper(direction, "TRAPS" + direction.letter)</code> with <code>direction.letter</code> taking on the values <code>'O'</code>, <code>'I'</code>, <code>'M'</code>, <code>'E'</code>, <code>'E'</code> and <code>'S'</code>.  In each call, the first thing we do is check <code>len(word) &gt; max_word_length</code>, and return if <code>True</code>.  With <code>max_word_length = 5</code>, every one of those calls will immediately return!  There is no point iterating to the <code>len(word) == 6</code> depth!  If we checked for this earlier, we could eliminate many useless calls, and save time.</p>

<pre><code>    def helper(tile, word):

        ...

        if len(word) &lt; max_word_length:
            for direction in tile.directionals.values():
                if ...:
                    helper(direction, word + direction.letter)
</code></pre>

<h1>Redundancy</h1>

<p>Furthermore:</p>

<pre><code>def helper(tile, word):
    ...
    if tile in visited: 
        return
    ...
    for direction in tile.directionals.values():
        if direction not in visited:
            helper(direction, word + direction.letter)
</code></pre>

<p>You test <code>direction not in visited</code>, and only if that is true will you call <code>helper(direction, ...)</code>.  In that recursive call, the <code>tile in visited</code> test will therefore never be true.  You can remove that redundant check for better performance.</p>

<h1>Containment Testing</h1>

<pre><code>    #allwords is a list with all the words in the English dictionary
    if word in allwords and len(word) &gt;= min_word_length: 
        ...
</code></pre>

<p>First of all, English can contain some really long words, like "tetraiodophenolphthalein".  We should shorten this dictionary to words which are <code>max_word_length</code> and less.</p>

<pre><code>possible_words = [word for word in allwords
                  if min_word_length &lt;= len(word) &lt;= max_word_length]
</code></pre>

<p>With this, my dictionary size is reduced from 235,886 words down to 17,082.  And a smaller dictionary will speed things up.</p>

<p>But what will speed things up more is getting rid of that <code>list</code>.  Testing if a word is in a <code>list</code> is an <span class="math-container">\$O(n)\$</span> operation.  If the words were stored in a <code>set</code>, this reduces search complexity to an <span class="math-container">\$O(1)\$</span> operation.</p>

<pre><code>possible_words = set(word for word in allwords
                     if min_word_length &lt;= len(word) &lt;= max_word_length)
</code></pre>

<p>Then, containment testing is easy:</p>

<pre><code>    if word in possible_words: 
        ...
</code></pre>

<p><code>word in possible_words</code> doesn't look much different from <code>word in allwords</code>, but the speed-up going from <code>x in list</code> to <code>x in set</code> is quite dramatic.</p>

<p>What about the <code>and len(word) &gt;= min_word_length</code> condition?  Where did it go?  <code>possible_words</code> only contains words which are at least <code>min_word_length</code>, so we get that for free!</p>

<h1>Pruning the Search Tree</h1>

<p>Alright, I'm finally where I actually wanted to be to answer this question.  The fun part.</p>

<p>How many words in the English dictionary start with <code>"RL"</code>?  What about <code>"MS"</code> or <code>"FM"</code> or <code>"TF"</code>?  Plenty of words start with <code>"SM"</code> but no words start with `"SMF".</p>

<p>As you are collecting the tile letters into a candidate word, you test whether you have discovered a word, but not whether you've reached a combination which will not start any word.  Doing so will prune you search tree, and avoid checking around <span class="math-container">\$6^3\$</span> candidate words starting with <code>"RL"</code>.  Less searching, yields faster performance!</p>

<p>So, how do we prune?</p>

<p>Consider the word <code>"SOME"</code>.  If we start with <code>"S"</code>, we have a possible word.  If we start with <code>"SO"</code>, we have a possible word.  If we start with <code>"SOM"</code>, we have a possible word.  And if we start with <code>"SOME"</code> we have a possible word.  So for each word in our <code>possible_words</code>, we just need to collect all the possible prefixes for the word into a set.</p>

<pre><code>valid_prefixes = set(word[:size]
                     for word in possible_words for size in range(1, length(word))
</code></pre>

<p>With this set of valid prefixes, if our candidate word fragment is not a valid prefix, we can skip deeper searching of that branch:</p>

<pre><code>    for direction in tile.directionals.values():
        if direction not in visited:
            candidate = word + direction.letter
            if candidate in valid_prefixes:
                helper(direction, candidate)
</code></pre>

<h1>The tile.valid_directionals set</h1>

<p>Almost forgot.  <code>visited</code> is a <code>list</code>.  If we switch this into a set, then we can use set arithmetic to get a set of valid_directionals that haven't been visited with <code>valid_directionals - visited</code></p>

<pre><code>def dfs(tile, word, min_word_length=2, max_word_length=5):
    visited = set()

    def helper(tile, word):
        if word in possible_words: 
            print(word)

        if len(word) &lt; max_word_length:
            visited.add(tile)
            for direction in tile.valid_directionals - visited:
                candidate = word + direction.letter
                if candidate in valid_prefixes:
                    helper(direction, candidate)
            visited.remove(tile)

    helper(tile, word)
</code></pre>
    </div>