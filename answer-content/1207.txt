<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a stylistic note, take it for what it's worth.  I generally prefer to avoid:</p>

<pre><code>if ( usual_case )
{
  // lots of code
}
else
{
  // one line handler
}
</code></pre>

<p>and instead prefer to go with less indentation, by handling error cases first:</p>

<pre><code>if ( ! usual_case )
{
  return one_liner;
}
// no need for indentation or braces anymore...
</code></pre>

<p>Rewriting one of your functions would look like this:</p>

<pre><code>template&lt;&gt;
std::string string_cast( const wchar_t* pSource, unsigned int codePage )
{
  assert( pSource != 0 );
  const size_t sourceLength = std::wcslen( pSource );
  if( sourceLength == 0 )
  {
    return std::string();
  }

  int length = ::WideCharToMultiByte( codePage, 0, pSource, sourceLength, NULL, 0, NULL, NULL );

  std::vector&lt;char&gt; buffer( length );
  ::WideCharToMultiByte( codePage, 0, pSource, sourceLength, &amp;buffer[ 0 ], length, NULL, NULL );

  return std::string( buffer.begin(), buffer.end() );
}
</code></pre>

<p>It's slightly cleaner: fewer lines, fewer braces, less indentation.  Not much, only slightly, but it adds up with multiple error-case checks, and multiple if-statements.</p>

<p>Also, I made <code>sourceLength</code> <strong>const</strong> because:</p>

<ol>
<li>The <code>sourceLength</code> isn't going to change.  You're going to initialize it, and use it, but you're never going to change it.  Using <code>const</code> enforces that you <em>can't</em> change it, and is considered good practice.</li>
<li>Using <code>if (sourceLength = 0)</code> is a classic programming mistake.  Testing for equality, <code>==</code>, and assigning, <code>=</code>, differ only by a single character.  That typo has caused numerous bugs.

<ul>
<li>if <code>sourceLength</code> is constant, <code>sourceLength = 0</code> fails to compile.</li>
<li>reversing the comparison and using <code>if (0 = sourceLength)</code> also catches the typo at compile time - but it's a little weird to read.  Someone nicknamed this "Yoda conditionals".</li>
</ul></li>
</ol>

<p>So, I made it <code>const</code> to conform to good style, and to catch typo bugs -- especially since I changed the conditional from <code>&gt;</code> to <code>==</code>.</p>
    </div>