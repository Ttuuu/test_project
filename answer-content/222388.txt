<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It seems to work well with the provided test cases. The obvious objection when talking about functional programming in F# is to the use of <code>mutable</code> variables and loops. Instead it is common to use higher order functions and recursion.</p>

<p>For inspiration, below is <code>toBigInt</code> in a more functional style:</p>

<pre><code>let toBigInt (bytes: byte[]) =
    if bytes.Length = 0 then
        invalidArg "bytes" "The byte array from which to build the variable length quantity has to have at least one element."

    let numUsableBytes = 
        let indexOpt = bytes |&gt; Array.tryFindIndex (fun b -&gt; b &amp;&amp;&amp; 0x80uy = 0uy)
        match indexOpt with 
        | Some(index) -&gt; index + 1
        | None -&gt; invalidArg "bytes" ("Cannot fetch the bytes for a variable length quantity from the given " +
                    "byte array because the end byte of the quantity is missing.")

    let rec composeNum num bit resultBit byte =
        if bit = 7 then num, resultBit
        else
            composeNum (num ||| (bigint (int ((byte &gt;&gt;&gt; bit) &amp;&amp;&amp; 1uy)) &lt;&lt;&lt; resultBit)) (bit + 1) (resultBit + 1) byte

    let result, _ = 
        Array.foldBack 
            (fun byte (num, resultBit) -&gt; (composeNum num 0 resultBit byte)) 
            (bytes |&gt; Array.take numUsableBytes)
            (0I, 0)
    result, bytes.[numUsableBytes..]
</code></pre>

<p>In the same way it is relatively easy to change <code>toByteArray</code> too.</p>
    </div>