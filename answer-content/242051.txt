<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><strong>Avoid recursion</strong>. It is expensive. <code>permtrim</code> can be (mechanically) converted into a clean iterative form:</p>

<pre><code>def permtrim(perm):
    while len(perm) &gt; 1 and perm[-1] == len(perm):
        perm.pop()
    return perm
</code></pre></li>
<li><p><strong>Avoid naked loops</strong>. Every loop implements an algorithm, and deserves a name. For example, he loops <code>for p in range(k, i)</code> and <code>for p in range(i+1, k-1)</code> test that the every element in the range are between than some bounding values. Consider factoring it into a function, like <code>range_is_between</code>,</p>

<pre><code>    if perm2[k-1] &lt; perm2[i]:
        if range_is_between (perm2[k:i], perm2[k-1], perm2[i]):
            permp = ....
            ....
</code></pre>

<p>Now it should be obvious that the first <code>if</code> essentially is a part of the same logic, and better be delegated to the same function.</p>

<pre><code>     if range_is_between (perm2[k:i], perm2[k-1], perm2[i]):
         ....
</code></pre>

<p>Flat is better than nested.</p>

<p>Also, notice how the <code>good</code> boolean flag disappears. Elimination of a boolean flags is a strong indication that you are going in a right direction.</p></li>
<li><p><strong>DRY</strong>. The bodies of two loops are suspiciously similar:</p>

<pre><code>for i in range(0,k-1):
    if range_is_between(perm2[i+1:k-1], perm2[i], perm2[k-1]):
        permp = list(perm2)
        permo = tuple(permtrim(permp[:i] + [permp[k-1]] + permp[i + 1:k-1] + [permp[i]] + permp[k:]))
        res_dict[permo] = res_dict.get(permo,0)-val
        if res_dict.get(permo,0) == 0:
            del res_dict[permo]

for i in range(k,len(perm2)):
    if range_is_between(perm2[k:i], perm2[k-1], perm2[i]):
        permp = list(perm2)
        permo = tuple(permtrim(permp[:k-1] + [permp[i]] + permp[k:i] + [permp[k-1]] + permp[i+1:]))
        res_dict[permo] = res_dict.get(permo,0)+val
        if res_dict.get(permo,0) == 0:
            del res_dict[permo]
</code></pre>

<p>This is also an indication that they really want to be functions too:</p>

<pre><code>def single_variable(perm_dict:Dict[Tuple[int],int],k:int):
    res_dict = {}
    for perm,val in perm_dict.items():
        perm2 = (*perm,len(perm)+1)
        res_dict = do_important_stuff(0, k, perm2)
        res_dict = do_important_stuff(k, len(perm2), perm2)
</code></pre>

<p>I have no idea what is the right name for <code>do_important_stuff</code>. I have no domain knowledge. You do.</p></li>
</ul>
    </div>