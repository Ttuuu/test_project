<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Your Question</h2>

<blockquote>
  <p>With different behavior between operations, is it possible to remove this redundant line or is it neccesary?</p>
</blockquote>

<p>Yes you can iterate over the operations using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" rel="nofollow noreferrer"><code>Object.keys(calculatorOperations)</code></a>, since the functions are listed in order of highest precedence first:</p>

<pre><code>Object.keys(calculatorOperations).forEach(function(functionName) {
  while(userEntry.includes(functionName)) {
    indexOfOperand = userEntry.indexOf(functionName);
    userEntry = calculatorOperations
      .calculationSequence(functionName, indexOfOperand, userEntry);
  }
}); 
</code></pre>

<p>Though be aware that all keys will be iterated over, including <code>returnIndexOfEntry</code>, <code>returnSpliced</code> and <code>calculationSequence</code>. If you didn't want those to be iterated over, the functions for the four mathematical operations could be moved into a sub-property and those could be iterated over instead, or else move the other helper functions out of the object. </p>

<p>With this approach, there is no need for the variable <code>operationsMD</code>.</p>

<h2>Other feedback</h2>

<ul>
<li>As a default, use <code>const</code> for variables. When you determine that it needs to be re-assigned (especially for loop interators/counters) then use <code>let</code>. So variables like <code>calculatorOperations</code>,  <code>getArgs</code>, <code>newUserEntry</code>, etc. can be declared with <code>const</code></li>
<li><p>As <a href="https://codereview.stackexchange.com/users/168361/freezephoenix">@FreezePhoenix</a> mentioned, arrow functions that only have one line in the body don't need to be surrounded by braces. For example, the calculation for times:</p>

<blockquote>
<pre><code>'x': (arg1, arg2) =&gt; {
  return arg1 * arg2;
},
</code></pre>
</blockquote>

<p>Can be simplified to: </p>

<pre><code>'x': (arg1, arg2) =&gt; arg1 * arg2,
</code></pre></li>
<li><p>Presumably the inconsistencies with the indentation are due to the pasting here but make sure you always use the same amount of indentation (e.g. two or four spaces).</p></li>
</ul>

<h2>Updated code</h2>

<p>See code updated per recommendations below.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function operateOnEntry(userEntry) {
  let indexOfOperand;
  let operation;
  Object.keys(calculatorOperations).forEach(function(functionName) {
    while (userEntry.includes(functionName)) {
      indexOfOperand = userEntry.indexOf(functionName);
      userEntry = calculationSequence(functionName, indexOfOperand, userEntry);
    }
  });
  return userEntry;
}
const returnIndexOfEntry = (index, userEntry) =&gt; {
  const arg1 = Number(userEntry[index - 1]);
  const arg2 = Number(userEntry[index + 1]);
  return [arg1, arg2];
};
const returnSpliced = (index, newTotal, userEntry) =&gt; {
  userEntry.splice((index - 1), 3, newTotal);
  return userEntry;
};
const calculationSequence = (operation, indexOfOperand, userEntry) =&gt; {
  const getArgs = returnIndexOfEntry(indexOfOperand, userEntry);
  const newTotalForEntry = calculatorOperations[operation](getArgs[0], getArgs[1]);
  const newUserEntry = returnSpliced(indexOfOperand, newTotalForEntry, userEntry);
  return newUserEntry;
}
const calculatorOperations = {
  'x': (arg1, arg2) =&gt; arg1 * arg2,
  '/': (arg1, arg2) =&gt; arg1 / arg2,
  '+': (arg1, arg2) =&gt; arg1 + arg2,
  '-': (arg1, arg2) =&gt; arg1 - arg2
};
var userEntry = [3, '+', 3, 'x', 3];
console.log(operateOnEntry(userEntry));</code></pre>
</div>
</div>

    </div>