<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're trying to create a so called <em>hybrid cryptosystem</em> or <em>hybrid encryption method</em> (crypto is not just considered encryption anymore, after all).</p>

<p>The problem with CBC mode is that it is very vulnerable to padding oracle attacks. It is itself not authenticated, which means that you can change any data within the ciphertext and thereby change plaintext blocks. Using GCM mode is recommended.</p>

<p>Adding a digital signature over the message is recommended if you want to know who send the message to you. Currently your code is only valid for providing confidentiality for locally stored data (data "at rest" in the jargon).</p>

<hr>

<p>The whole idea of hybrid encryption is to send the encrypted AES key as part of the ciphertext. Since the size of the encrypted AES key is always the same size as the key size of the RSA key pair in bytes, it can simply be prefixed to the AES ciphertext.</p>

<p>Of course, you'd need to split the resulting ciphertext message in two again to be able to decrypt it. Note that the Java API misses a method to retrieve the RSA key size. This is however OK because you can retrieve the modulus size by using <code>((RSAPrivateKey)RSA_KEYS.getPrivate()).getModulus().bitLength()</code> in your code. This is - by definition - the same as the key size in bits.</p>

<hr>

<p>Your code is clearly not keeping to any conventions when it comes to capitalization. This is however already mentioned in the other answer, so I don't see any reason to repeat it here.</p>

<p>So lets make a list of what's wrong:</p>

<ol>
<li><p>first of all, the RSA key pair is the <em>static</em> key pair. That means that it should be pre-generated, and the public key must be distributed <strong><em>and trusted</em></strong> in advance. If the RSA and data specific AES key are generated in the same method (in this case the constructor), then something is seriously wrong.</p></li>
<li><p><code>Cipher</code> instances carry state, and should preferably not be stored in fields. Storing static keys such as the RSA key pair is OK, but otherwise everything should just be created within the various methods. <code>Cipher</code> instances are relatively lightweight, so constructing / deconstructing them is relatively efficient (certainly compared against their operation). All in all, only the key pair field makes <em>some</em> sense; all the rest is unnecessary state.</p></li>
<li><p>The RSA key size of 2048 has about the same security as a 112 bit cipher such as 3DES. That's lower than AES-128 and much lower than AES-256. I'd use at least a 3072 bit key and prefer a 4096 bit key. Above that Elliptic Curve cryptography (ECIES) starts to make more sense (or a post-quantum algorithm).</p></li>
<li><p><code>SecureRandom.getSeed(16)</code> retrieves data that can be used to <em>seed</em> a random number generator. Using a truly random IV is (more or less) required for CBC mode, but it is actually more secure and more performant to use <code>SecureRandom#nextBytes</code>.</p></li>
</ol>

<p>Other smaller notes:</p>

<ol>
<li><p>the name of the class: "Cryptographer" is of course horrible and it doesn't explain what the class does. This class does not represent a person.</p></li>
<li><p>It's "necessary" not "necesary". The shouting makes such spelling mistakes all the worse.</p></li>
</ol>

<hr>

<p>All in all, nice as a first try, don't use in production.</p>
    </div>