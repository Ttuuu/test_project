<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>Item</code> class should be abstract because it's rather unlikely that you'll have an instance of it. Consequently the constructor needs to be <code>protected</code>. The two properties this class it provides should be <code>private</code> as you set them in the constructor and the derived classes call <code>base(..)</code> there's no need for their setters to be <code>protected</code>. Actually you can remove the setters if you are on C# 6.</p>

<p>The same rules apply to other classes derived from the <code>Item</code> or other items.</p>

<hr>

<p>The <code>GetSpecialProperty</code> sounds a like a workaround or a property for everything and nothing. <code>ToString</code> suggests it has at least three purposes:</p>

<ul>
<li><code>Damages</code></li>
<li><code>ArmorPts</code></li>
<li><code>HungryRestorePts</code></li>
</ul>

<p>This is not a good idea. Try to implement those properties on the appropriated objects instead of having one that nobody knows what it actually means.</p>

<p>Side note: Don't abbreviate the names. Use <code>Points</code> and not <code>Pts</code>. It's the only </p>

<p>But I see have even more multipupose properties e.g. the <code>ElementsItem</code> has a <code>Fire</code> property and <code>ToString</code> says it stands for:</p>

<ul>
<li><code>Damages</code></li>
<li><code>Resistance</code></li>
</ul>

<p>You should really split this or give them proper names like <code>FireResistance</code>. How do you know which one is it actually?</p>

<p>I think you should create a new class <code>Element</code> and derive the <code>Fire</code> etc. from it so that you can use a dictionary or an array of elements.</p>

<hr>

<blockquote>
<pre><code>\n
</code></pre>
</blockquote>

<p>You should use the <code>Environment.NewLine</code> property or the <code>StringBuilder.AppendLine</code> method if there is no real reason for the <code>\n</code>.</p>
    </div>