<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>  static constexpr bool is_noexcept_destructible = 
      noexcept(std::declval&lt;value_type&gt;().~value_type());
</code></pre>

<p>Did you want <a href="https://en.cppreference.com/w/cpp/types/is_destructible" rel="nofollow noreferrer"><code>std::is[_nothrow]_destructible</code></a>?</p>

<hr>

<pre><code>  iterator _begin;
  iterator _end;
  iterator _alloc;

public:
  fixed_buffer() noexcept {
    _begin = nullptr;
    _end   = nullptr;
    _alloc = nullptr;
  }
</code></pre>

<p>Prefer the <a href="https://en.cppreference.com/w/cpp/language/data_members" rel="nofollow noreferrer">member initializer list</a> over assignment in the constructor body.</p>

<pre><code>  fixed_buffer() noexcept 
      : _begin{nullptr}
      , _end{nullptr}
      , _alloc{nullptr} {
  }
</code></pre>

<p>When you are initializing with constants (<code>0</code>, <code>3.14</code>, <code>nullptr</code>, ...), prefer in-class <a href="https://en.cppreference.com/w/cpp/language/data_members" rel="nofollow noreferrer">default member initializers</a>.</p>

<pre><code>  iterator _begin = nullptr;
  iterator _end   = nullptr;
  iterator _alloc = nullptr;

public:
  fixed_buffer() = default; // nothing to do at construction, just =default.

  explicit fixed_buffer(size_type size) 
      : _begin{reserve_initially(size)}
      , _end{_begin};
      , _alloc{_begin + size} {}

protected:
  iterator reserve_initially(size_type n) {
    return static_cast&lt;iterator&gt;(
        std::aligned_alloc(alignof(value_type), sizeof(value_type) * size));
  }
</code></pre>

<hr>

<pre><code>  fixed_buffer(const fixed_buffer&amp;) = delete;
  fixed_buffer operator =(const fixed_buffer&amp;) = delete;
</code></pre>

<p>If <code>T</code> is copyable, should <code>fixed_buffer</code> also be copyable?</p>

<hr>

<pre><code>  template&lt;typename ... Ts&gt;
  void remplace_at(size_type pos, Ts&amp;&amp; ...ts) {
</code></pre>

<p><code>replace_at</code>? How about a <code>replace</code> that takes an <code>iterator</code>? Consider returning a <code>reference</code> to your newly constructed object for the appropriate modifying operations.</p>

<pre><code>    _begin[pos].~value_type();
</code></pre>

<p>Like with your <code>at</code> function, consider bounds checking here.  There is also <a href="https://en.cppreference.com/w/cpp/memory/destroy_at" rel="nofollow noreferrer"><code>std::destroy_at</code></a>.</p>

<hr>

<pre><code>  template&lt;typename ... Ts&gt;
  void emplace(Ts&amp;&amp; ... ts) {
    new(_end++) value_type(std::forward&lt;Ts&gt;(ts)...);
  }
</code></pre>

<p>If you are providing a <code>vector</code>-like interface, consider naming this <code>emplace_back</code>.  Consider including a bound checked version.</p>

<pre><code>  template &lt;typename... Ts&gt;
  reference emplace_back_capped(Ts&amp;&amp;... ts) {
    if (_end != _alloc) {
      /* ... */
    }
    throw /* ... */
  }
</code></pre>

<hr>

<pre><code>  void clear()  noexcept(is_noexcept_destructible) {
    for (iterator it = _begin; it != _end; it++) {
      it-&gt;~value_type();
    }
    _end = _begin;
  }
</code></pre>

<p>The loop is <a href="https://en.cppreference.com/w/cpp/memory/destroy" rel="nofollow noreferrer"><code>std::destroy</code></a>.</p>

<hr>

<pre><code>      free(_begin);
</code></pre>

<p>Make sure you are calling the C++ version (<code>std::free</code>).  The C++ standard makes no guarantee that the unqualified C version will exist.</p>

<hr>

<p>Implement operations that may make sense:</p>

<ul>
<li><code>reserve_capped</code> - Should <code>fixed_vector</code> be reservable if empty?</li>
<li><code>resize</code>/<code>resize_down</code> - Resizing up not possible, down is <code>pop_back()</code> n times.</li>
<li><code>shrink_to_fit</code> - Doesn't need to copy or even deallocate, but resize the capacity to wherever <code>_end</code> is.</li>
</ul>
    </div>