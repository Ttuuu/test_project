<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>  enum Kind
  {
    ...
    Queen,
    King,
    Joker // ???
  }
</code></pre>

<p>Jokers is the joker. You're not considering jokers</p>

<hr>

<blockquote>
<pre><code>    class Card : IComparable&lt;Card&gt; 
  {
     ...
</code></pre>
</blockquote>

<p>I'm not convinced that there is a default comparison for cards? It could be misunderstood by consumers. On the other hand a deck of cards is always sorted by <code>Suit</code> and then <code>Kind</code>, but the comparison of cards is highly context dependent - dependent on the rules of the game. See further below.</p>

<hr>

<blockquote>
<pre><code>public int CompareTo(Card other)
{ 
    if (Suit &gt; other.Suit)
    {
        return 1;
    }
    if (Suit &lt; other.Suit)
    {
        return -1;
    }
    return Kind &gt; other.Kind ? 1 : -1;
}
</code></pre>
</blockquote>

<p>can be simplified to:</p>

<pre><code>public int CompareTo(Card other)
{
  if (other == null) return 1;
  if (Suit != other.Suit)
    return Suit.CompareTo(other.Suit);
  return Kind.CompareTo(other.Kind);
}
</code></pre>

<hr>

<p><code>CardDeck</code> is maybe a little verbose. IMO <code>Deck</code> is sufficient.</p>

<hr>

<blockquote>
<pre><code>   Cards = new List&lt;Card&gt;();
    int numSuits = Enum.GetNames(typeof(Suit)).Length;
    int numKinds = Enum.GetNames(typeof(Kind)).Length;
    for (int suit = 0; suit &lt; numSuits; suit++)
    {
        for (int kind = 0; kind &lt; numKinds; kind++)
        {
            Cards.Add(new Card((Kind)kind, (Suit)suit));
        }
    }
</code></pre>
</blockquote>

<p>There is a simpler way to do this:</p>

<pre><code>  Cards = new List&lt;Card&gt;();

  foreach (Suit suit in Enum.GetValues(typeof(Suit)))
  {
    foreach (Kind kind in Enum.GetValues(typeof(Kind)))
    {
      Cards.Add(new Card(kind, suit));
    }
  }
</code></pre>

<hr>

<p><code>CountCardsInDeck</code> again: <code>Count</code> is sufficient. What should it else count if not cards in the deck?</p>

<hr>

<blockquote>
<pre><code>public Card DrawTopCard()
{
    Card drawnCard = Cards[0];
    Cards.RemoveAt(0);
    return drawnCard;
}

public Card DrawBottomCard()
{
    int lastCardIndex = CountCardsInDeck - 1;
    Card drawnCard = Cards[lastCardIndex];
    Cards.RemoveAt(lastCardIndex);
    return drawnCard;
}

public Card DrawRandomCard()
{
    Random random = new Random();
    int randomCardIndex = random.Next(CountCardsInDeck);
    Card drawnCard = Cards[randomCardIndex];
    Cards.RemoveAt(randomCardIndex);
    return drawnCard;
}
</code></pre>
</blockquote>

<p>This can be simplified:</p>

<pre><code>public Card DrawCardAt(int index)
{
  if (index &lt; 0 || index &gt;= Count)
    throw new ArgumentOutOfRangeException(nameof(index));

  Card card = Cards[index];
  Cards.RemoveAt(index);
  return card;
}

public Card DrawTopCard()
{
  return DrawCardAt(0);
}

public Card DrawBottomCard()
{
  return DrawCardAt(Count - 1);
}

public Card DrawRandomCard()
{
  Random random = new Random();
  int index = random.Next(Count);
  return DrawCardAt(index);
}
</code></pre>

<hr>

<blockquote>
<pre><code>   public void AddCardOnTop(Card card)
   {
        if (!Cards.Contains(card))
        {
            Cards[0] = card;
            return;
        }
        throw new InvalidOperationException($"Deck already contains card {card}.");
   }
</code></pre>
</blockquote>

<p>A cleaner way to make precautions: </p>

<pre><code>public void AddCardOnTop(Card card)
{      
  if (Cards.Contains(card))
    throw new InvalidOperationException($"Deck already contains card {card}.");

  //Cards[0] = card;
  Cards.Insert(0, card);
}
</code></pre>

<p>You replace the existing first card with a new one. Is that what you want? If so the method should be called <code>SetTop()</code> or <code>ReplaceTop()</code>. My suggestion is that you want to insert? The same could be said about <code>AddCardOnBottom()</code> and <code>AddCardAtRandom()</code>.</p>

<hr>

<blockquote>
<pre><code>public void WriteToConsole()
{
  foreach (Card card in Cards)
  {
    Console.WriteLine(card);
  }
}
</code></pre>
</blockquote>

<p>Keep the UI out of your models. You could override <code>ToString()</code> and produce a line-string instead.</p>

<hr>

<p><code>class CardSorter</code> strictly speaking it is not a sorter but a comparer.</p>

<hr>

<p>As discussed above, I maybe think that your comparer is somewhat redundant, because the comparison of cards depends on the game rules. I'm not a huge fan of card games, but I can't image games or situations where a deck of cards should be sorted differently than just by <code>Suit</code> and then <code>Kind</code>. But if you insists, you should consider other sorttypes:</p>

<pre><code>  enum CardSortType
  {
    KindOnly, // HH: In some games only the kind matters
    SuitOnly, // HH: I can't image any games where this is used??
    SuitThenKind,
    KindThenSuit,
  }

  class CardSorter : IComparer&lt;Card&gt;
  {
    public CardSorter(CardSortType sortBy = CardSortType.SuitThenKind)
    {
      SortBy = sortBy;
    }

    public CardSortType SortBy { get; } // HH: Make it readonly

    public int Compare(Card x, Card y)
    {
      switch (SortBy)
      {
        case CardSortType.KindOnly:
          return x.Kind.CompareTo(y.Kind);
        case CardSortType.SuitOnly:
          return x.Suit.CompareTo(y.Suit);
        case CardSortType.SuitThenKind:
          if (x.Suit != y.Suit) return x.Suit.CompareTo(y.Suit);
          return x.Kind.CompareTo(y.Kind);
        case CardSortType.KindThenSuit:
          if (x.Kind != y.Kind) return x.Kind.CompareTo(y.Kind);
          return x.Suit.CompareTo(y.Suit);
        default:
          throw new NotImplementedException($"CardOrderMethod {SortBy} is not implemented.");
      }
    }
  }
</code></pre>

<p>In the above, I suggest a simpler comparison.</p>
    </div>