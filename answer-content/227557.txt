<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General structure</h1>

<p>You are using a lot of nested functions and recursion. It makes it hard to figure out what is going on just at a glance. I would go with a main function to be a pythonic do-while:</p>

<pre><code>def main()
   while True:
     game()
     if end():
        break
</code></pre>

<p>Note that you'll have to modify <code>end()</code> to return a bool, and <code>game()</code> to not call <code>end()</code> but just finnish instead.</p>

<h1>Error and input handling</h1>

<p>The next thing I would do is change <code>get_input</code>. Its bad to catch all errors - if there would be some unrelated error you would get stuck in an infintie loop. </p>

<p>Using <code>assert</code> to control program flow is also a bit unexpected. As Ben points out in comments, it can be dangerous since asserts can be turned off with a command line options.</p>

<p>One way to do it is to break out the parsing and validation bit into a new function <code>parse_input</code> that returns the integer or throw an exception if the input is invalid:</p>

<pre><code>def get_input(axis):
   while True:
     user_input = input(f"{axis}-Axis: ")
     try:
        return parse_input(user_input)
     except InvalidInputError:
        print("Enter a natural number in the range!")

def parse_input(input_str):
   try:
      input_int = int(input_str)
   except ValueError:
      raise InvalidInputError()
   if input_int &gt; 7:
      raise InvalidInputError()
   return input_int

class InvalidInputError(Exception):
   pass
</code></pre>

<p>This code is longer, but I would argue that it is more readable. Opinions may differ.</p>

<h1>Variable names</h1>

<p>What does <code>A &gt; D</code> mean? I don't know! Something like <code>guess_x &gt; goal_x</code> would be much easier to understand.</p>

<h1>A bug!</h1>

<p>What happends if the user enters a negative number?</p>
    </div>