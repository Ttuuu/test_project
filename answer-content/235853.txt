<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based only on the code, I have suggestions:</p>

<ol>
<li><p>For the variable, I suggest that you mark them <code>private</code> to prevent exposure; especially the collections.</p>

<pre class="lang-java prettyprint-override"><code>   private Queue&lt;Integer&gt; myQueue;
   private int size;
</code></pre></li>
<li><p>I think the comment on the constructor is useless.</p></li>
<li><p>You can remove the type <code>java.util.LinkedList</code>  in the diamond operation, in the implementation section.</p>

<pre class="lang-java prettyprint-override"><code>new LinkedList&lt;&gt;();
</code></pre></li>
</ol>

<h3><code>MovingAverage#next</code> Method</h3>

<ol>
<li><p>I suggest you invert the logic of the condition, since you add in all cases.</p>

<pre><code>if (myQueue.size() &gt;= size) {
   myQueue.remove(); // removes the head node
}

myQueue.add(val);
</code></pre></li>
<li><p>I suggest that you extract the calculus of the sum in a method.</p>

<pre><code>    private int getSum() {
       int sum = 0;

       for (Integer item : myQueue) {
          sum += item;
       }

       return sum;
    }
</code></pre></li>
</ol>

<h3>Refactored code</h3>

<pre class="lang-java prettyprint-override"><code>public class MovingAverage {
   private Queue&lt;Integer&gt; myQueue;
   private int size;

   public MovingAverage(int size) {
      myQueue = new LinkedList&lt;&gt;();
      this.size = size;
   }

   public double next(int val) {

      if (myQueue.size() &gt;= size) {
         myQueue.remove(); // removes the head node
      }

      myQueue.add(val);

      return (double) getSum() / myQueue.size();
    }

    private int getSum() {
      int sum = 0;

      for (Integer item : myQueue) {
         sum += item;
      }

      return sum;
   }
}
</code></pre>
    </div>