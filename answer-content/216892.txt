<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Solution #2:</p>

<pre><code>class Solution2:
    def isHappy(self, n):
        # ...
        while n != 1:
            if n in s: return False
            # ...

    return n == 1
</code></pre>

<p>You are looping while <code>n != 1</code>, without any <code>break</code> statements. There is no need to test <code>n == 1</code> at the return statement at the end.  Just <code>return True</code>.</p>

<hr>

<p>Solution #3 returns <code>None</code> if 0 is given as input, instead of returning <code>True</code> or <code>False</code>.</p>

<hr>

<p>Solution #4 becomes an endless loop if 0 is given as input.</p>

<p>Are there any other stopping conditions other that <code>n == 0</code>, <code>n == 1</code> or <code>n == 4</code>?  It isn't clear that all unhappy numbers result in a loop containing the value <code>4</code>, so the validity of this approach is in question.</p>

<p><strong>Update</strong>: Actually <a href="https://en.wikipedia.org/wiki/Happy_number#Sequence_behavior" rel="nofollow noreferrer">Wikipedia</a> provides a clear argument that unhappy numbers will arrive in a loop containing the value <code>4</code>, so this approach is valid, but should included a comment with a link to that proof.</p>

<hr>

<p>In all your solutions, your loop is testing at least two conditions, such as both <code>n != 1</code> and <code>n is s</code>.  Why not initialize <code>s</code> to contain a <code>1</code> (or even just leave it as an empty set), and then only test <code>n in s</code>.  No special cases.</p>

<pre><code>def is_happy(n):
    s = { 1 }

    while n not in s:
        s.add(n)
        n = sum(i * i for i in map(int, str(n)))

    return n == 1
</code></pre>

<p><strong>Update</strong>:</p>

<p>Since <a href="https://en.wikipedia.org/wiki/Happy_number#Sequence_behavior" rel="nofollow noreferrer">Wikipedea</a> has <em>proof</em> that all positive unhappy numbers end in the sequence <code>4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4 → ...</code>, and happy numbers end in the sequence <code>1 → 1 → ...</code>, you can create a set of these termination values (including <code>0 → 0 → ...</code>), and no longer needed to maintain the set of "seen" values.  By using all numbers in the unhappy loop, we can terminate the search up to 8 iterations earlier over just checking for <code>n == 1</code> and <code>n == 4</code>.</p>

<pre><code>def is_happy(num):
    # See https://en.wikipedia.org/wiki/Happy_number#Sequence_behavior
    terminal = { 0, 1, 4, 16, 20, 37, 42, 58, 89, 145 }

    while num not in terminal:
        num = sum(i * i for i in map(int, str(num)))

    return n == 1
</code></pre>

<hr>

<p>Finally:</p>

<ul>
<li>follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> standards (avoid mixedCase function/method names),</li>
<li><a href="https://www.youtube.com/watch?v=o9pEzgHorH0" rel="nofollow noreferrer">Stop writing classes</a>!</li>
</ul>
    </div>