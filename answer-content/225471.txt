<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with everything @CacahueteFrito mentioned in their answer. There is one observation there I would like to expand on, and one observation I would like to add.</p>

<p><strong>Use the Type size_t When Indexing Arrays</strong><br>
Each of the <code>for</code> loops in the function <code>bool crack(char *hash)</code> uses a type <code>int</code> variable as the loop control variable. When indexing into arrays, it is better to use the type <a href="http://www.cplusplus.com/reference/cstring/size_t/" rel="noreferrer">size_t</a> which is <a href="https://stackoverflow.com/questions/2550774/what-is-size-t-in-c">defined as unsigned int in both C and C++</a>. The C library functions <a href="https://stackoverflow.com/questions/22753595/strlen-function-return-type-c-programing">strlen</a> and <code>sizeof</code> return the type <code>size_t</code>.</p>

<p>One of the benefits of using an unsigned index is that a negative number can not be used to index an array. Since arrays in C start at zero this is important and prevent bugs. A second possible benefit of using <code>size_t</code> is that it may prevent warning messages about type mismatches from some compilers when using functions such as <code>strlen</code> or <code>sizeof</code>.</p>

<p><strong>Complexity of Functions</strong><br>
When @CacahueteFrito mentions the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">DRY Programming Principle</a> he is providing a fix for function complexity. There is another programming principle that is involved here as well, the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">Single Responsibility Principle</a>. The single responsibility principle states</p>

<blockquote>
  <p>... every module, class, or function should have responsibility over a single part of the functionality provided by the software.</p>
</blockquote>

<p>While the single responsibility principle primarily applies to object oriented programming, the function part of the statement refers to non object oriented programming as well. Well written functions will have a single goal to accomplish and will generally be short. In the code there are comments of the form <code>// 2 char pw test</code>, each of the code blocks following these comments could be a function. Well named functions here would reduce the need for these comments and the overall effect would be a much simpler version of the function `bool crack(char* hash).</p>

<p>Small simple functions are much easier to debug and maintain then functions that are over 100 lines long. This would also decrease the scope of variables such as <code>char key[6]</code>.</p>
    </div>