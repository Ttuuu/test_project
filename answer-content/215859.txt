<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some more suggestions that can improve your code.</p>

<ul>
<li>You can avoid cloning <code>numbers</code> by just removing it from <code>composites</code> to begin with, since you already remove it later. <code>HashMap::remove</code> will give you an <code>Option&lt;Vec&lt;u64&gt;&gt;</code>, so you can now modify the hashmap while you iterate over the vec because it is no longer owned by the hashmap.</li>
<li>You can make your function iterative by using a <code>while let</code> loop.</li>
<li>You can simplify your usage of entry by just using <code>or_default</code> which will give a mutable reference to either the vec that was already there, or an empty one. Then you can just push into that vec.</li>
<li>Another option for clarity is to make a <code>next_prime</code> method on <code>Sieve</code>.</li>
</ul>

<pre><code>impl Sieve {
    pub fn next_prime(&amp;mut self) -&gt; u64 {
        while let Some(numbers) = self.composites.remove(&amp;self.current) {
            for num in numbers {
                self.composites
                    .entry(self.current + num)
                    .or_default()
                    .push(num)
            }
            self.current += 1;
        }
        let prime = self.current;
        self.composites.insert(prime * prime, vec![prime]);
        self.current += 1;
        prime
    }
}

impl Iterator for Sieve {
    type Item = u64;

    fn next(&amp;mut self) -&gt; Option&lt;u64&gt; {
        Some(self.next_prime())
    }
}
</code></pre>
    </div>