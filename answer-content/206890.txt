<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code works correctly – as far as I can see – for <em>strictly positive</em>
integers <span class="math-container">\$ a, b, c, d \$</span>. It fails if the integers are allowed to
be zero or negative. For example:</p>

<ul>
<li><code>solve(-1, -1, -2, -3)</code> returns <code>False</code> although <span class="math-container">\$(-1, -1) \$</span> can
be transformed to <span class="math-container">\$ (-2, -3) \$</span>.</li>
<li><code>solve(0, 0, 1, 1)</code> fails with a “maximum recursion depth exceeded”
because it calls itself with the <em>same arguments.</em></li>
</ul>

<p>The remainder of this review is based on the assumption that 
<span class="math-container">\$ a, b, c, d &gt; 0\$</span>.</p>

<p>The number of recursive calls increases quickly with larger input values
because in most cases you have two possible branches at</p>

<pre><code>return solve(a+b, b, c, d) or solve(a, a+b, c, d)
</code></pre>

<p>As an example, <code>solve()</code> is called</p>

<ul>
<li><span class="math-container">\$29\$</span> times to compute that <span class="math-container">\$(4, 6)\$</span> is not
reachable from <span class="math-container">\$(1, 1)\$</span>, and</li>
<li><span class="math-container">\$8189\$</span> times to compute that <span class="math-container">\$(127, 99)\$</span> is reachable
from <span class="math-container">\$(1, 1)\$</span>.</li>
</ul>

<p>The problem is that one does not know if <span class="math-container">\$(a, b)\$</span> should become <span class="math-container">\$(a+b, b)\$</span>
or <span class="math-container">\$(a, a+b)\$</span> in order to reach <span class="math-container">\$(c, d)\$</span>.</p>

<p>The “trick” to do the transformations backwards. If <span class="math-container">\$(c, d)\$</span> is
reached eventually, then the <em>previous</em> pair must be either
<span class="math-container">\$(c-d, d)\$</span> or <span class="math-container">\$(c, d-c)\$</span>. But only one of these is possible, depending on the
sign of <span class="math-container">\$ c-d \$</span>.</p>

<p>That leads to the following implementation:</p>

<pre><code>def solve(a, b, c, d):
  if a == c and b == d:
    return True
  elif a &gt; c or b &gt; d:
    return False
  elif c &gt;= d:
    return solve(a, b, c - d, d)
  else:
    return solve(a, b, c, d - c)
</code></pre>

<p>which is considerable faster: Now <code>solve()</code> is called</p>

<ul>
<li><span class="math-container">\$4\$</span> times to compute that <span class="math-container">\$(4, 6)\$</span> is not
reachable from <span class="math-container">\$(1, 1)\$</span>, and</li>
<li><span class="math-container">\$14\$</span> times to compute that <span class="math-container">\$(127, 99)\$</span> is reachable from <span class="math-container">\$(1, 1)\$</span>.</li>
</ul>

<p>The method can still fail with a “maximum recursion depth exceeded” runtime
error. But with this changed algorithm it is easy to replace the 
recursion by an iteration:</p>

<pre><code>def solve(a, b, c, d):
  while c &gt;= a and d &gt;= b:
    if c == a and d == b:
        return True
    (c, d) = (c - d, d) if c &gt;= d else (c, d - c)
  return False
</code></pre>

<p>The algorithm itself can be improved further by replacing multiple transformations
<span class="math-container">$$
(c, d) \to (c-d, d) \to (c-2d, d) \to \ldots
$$</span>
by a single transformation
<span class="math-container">$$
   (c, d) \to (c - kd, d)
$$</span>
with a suitable integer <span class="math-container">\$k\$</span>. How large can <span class="math-container">\$k\$</span> be chosen?
If that reminds you of the Euclidean algorithm for computing the greatest common divisor then you are on the right
track to implement an optimal method.</p>
    </div>