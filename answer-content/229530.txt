<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>it is possible to handle null pointer exception using <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparing-java.util.function.Function-" rel="noreferrer">Comparator.comparing</a> static method. If you want to comparing <code>loanAmount</code> fields in your objects and you want that every not null value is greater than <code>null</code> you can use <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#nullsFirst-java.util.Comparator-" rel="noreferrer">Comparator.nullFirst</a> method in combination with <code>Comparator.comparing</code> like the below code:</p>

<pre><code>Comparator.comparing(LoanAccount::getLoanAmount,
                     Comparator.nullsFirst(Comparator.naturalOrder()))
</code></pre>

<p><code>NaturalOrder</code> is a method returning a comparator that compares Comparable objects in natural order.
You can also combine more comparators in a chain with method <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#thenComparing-java.util.Comparator-" rel="noreferrer">Comparator.thenComparing</a> like the code below:</p>

<pre><code>Comparator.comparing(LoanAccount::getLoanAmount,
                Comparator.nullsFirst(Comparator.naturalOrder()))
                .thenComparing(LoanAccount::getCreationDate, 
                Comparator.nullsFirst(Comparator.naturalOrder()))
                .compare(o1, o2);
</code></pre>

<p>Now you can rewrite your comparator with equal behaviour shortly:</p>

<pre><code>public class LoanAccountAmountComparator implements Comparator&lt;LoanAccount&gt; {
    @Override
    public int compare(LoanAccount o1, LoanAccount o2) {
        if (o1 == null &amp;&amp; o2 == null) return 0;
        if (o1 == null) return -1;
        if (o2 == null) return 1;
        return Comparator.comparing(LoanAccount::getLoanAmount,
                Comparator.nullsFirst(Comparator.naturalOrder()))
                .thenComparing(LoanAccount::getCreationDate, 
                Comparator.nullsFirst(Comparator.naturalOrder()))
                .compare(o1, o2);
    }
}
</code></pre>

<p>Note: the use of class <code>Date</code> is discouraged, it is better if you use instead the <code>java.time</code> package classes for time related code. </p>
    </div>