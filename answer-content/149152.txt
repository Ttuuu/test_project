<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is how I did problem 1:</p>

<pre><code>sum({*range(3, 1000, 3)} | {*range(5, 1000, 5)})
</code></pre>

<p>create the numbers, don't search for them. Many eulers is like that. </p>

<hr>

<p>I thought I share this ugly code as well: </p>

<pre><code>def arithmetic_sum(number, limit):
    for last in range(limit, 1, -1):
        if last % number == 0:
            return ((limit // number) * (number + last)) // 2

def math_power():
    ans, limit = 0, 999
    ans += arithmetic_sum(3, limit)
    ans += arithmetic_sum(5, limit)
    ans -= arithmetic_sum(15, limit)
    return ans
</code></pre>

<p>that is the fastest way I know of to solve this first problem. For bigger n:s the execution time is pretty much unaffected. </p>

<p>Instead of creating the numbers, add the all at the same time :). </p>
    </div>