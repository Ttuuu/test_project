<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not too familiar with the math side of this, so I'll just focus on the Rust part.</p>

<h1>Run <a href="https://github.com/rust-lang/rustfmt" rel="nofollow noreferrer">rustfmt</a></h1>

<p>Running <code>cargo fmt</code> will autoformat your code to the Rust best practices. For example, it will convert</p>

<pre class="lang-rust prettyprint-override"><code>fn arctan(x:f64) -&gt; f64 {
    let mut sum=0.;
    let epsilon=x/PRECISION;
    let mut i=0.;
    while i&lt;x {
        sum+=epsilon/(1.+i*i);
        i+=epsilon;
    }
    sum*(180./pi())
}
</code></pre>

<p>to</p>

<pre class="lang-rust prettyprint-override"><code>fn arctan(x: f64) -&gt; f64 {
    let mut sum = 0.;
    let epsilon = x / PRECISION;
    let mut i = 0.;
    while i &lt; x {
        sum += epsilon / (1. + i * i);
        i += epsilon;
    }
    sum * (180. / pi())
}
</code></pre>

<p>Notice the spacing added.</p>

<h1>Run <a href="https://github.com/rust-lang/rust-clippy" rel="nofollow noreferrer">clippy</a></h1>

<p>Running <code>cargo clippy</code> will point out a few common mistakes. Let's take a look at them here.</p>

<pre class="lang-rust prettyprint-override"><code>warning: using `print!()` with a format string that ends in a single newline
   --&gt; src/main.rs:136:9
    |
136 |         print!("{:.4}\n",arctan((i as f64)/100.));
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(clippy::print_with_newline)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_with_newline
help: use `println!` instead
    |
136 |         println!("{:.4}",arctan((i as f64)/100.));
    |         ^^^^^^^
</code></pre>

<p>As it suggests, you should replace that line with <code>println!</code>.</p>

<pre class="lang-rust prettyprint-override"><code>warning: casting integer literal to `f64` is unnecessary
   --&gt; src/main.rs:141:28
    |
141 |     println!("e={:.4}",exp(1 as f64));
    |                            ^^^^^^^^ help: try: `1_f64`
    |
    = note: `#[warn(clippy::unnecessary_cast)]` on by default
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast
</code></pre>

<p>That, and the line that follows it, can be used as a float like you do everywhere else in your code. You can do <code>1_f64</code>, <code>1f64</code>, <code>1.0</code>, or like elsewhere in your code, <code>1.</code>.</p>

<h1>Extract repeated operations</h1>

<p>When you print things out, you repeat the calculation a lot, and <a href="https://godbolt.org/z/Wz8r17" rel="nofollow noreferrer">it actually appears to have a difference in assembly</a> (although not when <code>#[inline(never)]</code> is used on <code>ln</code>?). So instead of</p>

<pre class="lang-rust prettyprint-override"><code>if arccos((i as f64) / 100.) &lt; 90. &amp;&amp; arccos((i as f64) / 100.) &gt; 0. {
    print!("{:.4}\t", arccos((i as f64) / 100.));
} else if arccos((i as f64) / 100.) &gt; 0. {
    print!("90\t");
} else {
    print!("0\t");
}
</code></pre>

<p>Prefer</p>

<pre class="lang-rust prettyprint-override"><code>let inv_cos = arccos((i as f64) / 100.);
if inv_cos &lt; 90. &amp;&amp; inv_cos &gt; 0. {
    print!("{:.4}\t", inv_cos);
} else if inv_cos &gt; 0. {
    print!("90\t");
} else {
    print!("0\t");
}
</code></pre>
    </div>