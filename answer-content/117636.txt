<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Usability</h1>

<p>Your function isn't very flexible. If another piece of code needs to use it, it will have to use it for a single purpose, and that purpose is to be given a string and to print out that string in reverse order.</p>

<p>Below are some ways you could make this more flexible:</p>

<hr>

<h3>User-supplied output buffer</h3>

<p>Right now, the reverse string is just printed straight to STDOUT. To make this more flexible and so that it follows the single responsibility principle, you could have the function accept an output buffer to stick the reversed string into:</p>

<pre><code>void reverse(char *s, char *out) {
</code></pre>

<p>With this, you should also remove the <code>printf</code> calls in your function.</p>

<p>Note: a better alternative to this would be to overwrite the original string. Rather than accepting an output buffer, you can create a temporary output buffer in the function (like you are with <code>aux</code>). Then, simply copy the temporary output buffer into the input string at the end of the function. As 200_success states,</p>

<blockquote>
  <p>I do recommend treating s as an in-out parameter, and reversing the
  string in place. If the caller wants to keep a copy of the original,
  then they can duplicate it themselves first. Placing the
  responsibility of buffer allocation on the caller reduces
  memory-management headaches in C.</p>
</blockquote>

<p>Basically, by having the output go to the input string, memory management becomes much less complex and is overall easier on the caller.</p>

<hr>

<h3>User-supplied length</h3>

<p>What if the code using this function doesn't want to have the entire string reversed? What if they only want the first part of the string reversed? To allow for this, you function should accept the amount of characters to reverse:</p>

<pre><code>void reverse(char *s, char *out, size_t len) {
</code></pre>

<p>Then, you simply use that <code>len</code> in your loops as you have been already.</p>

<hr>

<h1>Your code</h1>

<p>Enough of that; time to review the code you have presented.</p>

<hr>

<h3>Printing out a string</h3>

<blockquote>
<pre><code>for (j = 0; j &lt; strlen(s); j++) {
    printf("%c", aux[j]);
}
</code></pre>
</blockquote>

<p>Here, you are looping through the <code>aux</code> "array" and printing out each character. However, you are over-complicating it; why not just print <code>aux</code>?</p>

<pre><code>printf("%s", aux);
</code></pre>
    </div>