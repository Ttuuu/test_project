<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>It's easier to read code that tuple unpacks the values in the <code>for</code> from <code>dict.items()</code>.</p>

<pre><code>for key1, (code1, option1) in Duplicate_combos.items():
</code></pre></li>
<li><code>archive_duplicates</code> is a duplicate of <code>Real_duplicates</code>. There's no need for it.</li>
<li><p>It doesn't seem like the output needs to be ordered, and so you can just make <code>Real_duplicates</code> a set. This means it won't have duplicates, and you don't have to loop through it twice each time you want to add a value.</p>

<p>This alone speeds up your program from <span class="math-container">\$O(n^3)\$</span> to <span class="math-container">\$O(n^2)\$</span>.</p></li>
<li><p>Your variable names are quite poor, and don't adhere to PEP8. I have changed them to somewhat generic names, but it'd be better if you replace, say, <code>items</code> with what it actually is.</p></li>
</ol>

<pre><code>def find_duplicates(items):
    duplicates = set()
    for key1, (code1, option1) in items.items():
       for key2, (code2, option2) in items.items():
            if key1 == key2:
               continue
            elif code1 == code2 and option1 == option2 == 'No':
                duplicates.add(key1)
                duplicates.add(key2)
    return list(duplicates)
</code></pre>

<ol start="5">
<li><p>You don't need to loop over <code>Duplicate_combos</code> twice.</p>

<p>To do this you need to make a new dictionary grouping by the code. And only adding to it if the option is <code>'No'</code>.</p>

<p>After building the new dictionary you can iterate over it's values and return ones where the length of values is greater or equal to two.</p></li>
</ol>

<pre><code>def find_duplicates(items):
    by_code = {}
    for key, (code, option) in items.items():
        if option == 'No':
            by_code.setdefault(code, []).append(key)

    return [
        key
        for keys in by_code.values()
        if len(keys) &gt;= 2
        for key in keys
    ]
</code></pre>

<p>This now runs in <span class="math-container">\$O(n)\$</span> time rather than <span class="math-container">\$O(n^3)\$</span> time.</p>

<pre><code>&gt;&gt;&gt; find_duplicates({
        101: ['1', 'No'], 102: ['1', 'No'],
        103: ['1','Yes'], 104: ['1', 'No'],
        201: ['2', 'No'], 202: ['2', 'No'],
        301: ['3', 'No'], 401: ['4', 'No'],
})
[101, 102, 104, 201, 202]
</code></pre>
    </div>