<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a few areas where you can improve.</p>

<ul>
<li><p>You don't need parenthesis around the expressions you <code>and</code> or <code>return</code>:</p>

<pre><code>def is_valid_move(x, y, board):
    return 0 &lt;= x &lt;= 2 and 0 &lt;= y &lt;= 2 and board[x][y] == '_'
</code></pre>

<p>Sometimes you <em>do</em> need parenthesis, but only if the operator precedence is wrong otherwise. I.e <code>A and B or C</code> is different from <code>A and (B or C)</code>.</p></li>
<li><p>Your <code>check_win</code> function is very hard to debug. How sure are you that you did not mess up any of the indices while copy&amp;pasting, and how long would it take you to check that you didn't?</p>

<p>Instead divide the function into sub-responsibilities, which you can name and reason about individually:</p>

<pre><code>def all_equal(it):
    it = iter(it)
    first = next(it)
    return all(x == first for x in it)

def check_rows(board):
    for row in board:
        if row[0] != "_" and all_equal(row):
            return True
    return False

def check_cols(board):
    for col in zip(*board):  # transpose the board
        if col[0] != "_" and all_equal(col):
            return True
    return False

def check_diagonals(board):
    if board[0][0] != "_" and all_equal(board[i][i] for i in range(len(board))):
        return True
    if board[0][2] != "_" and all_equal([board[0][2], board[1][1], board[2][0]]):
        return True
    return False

def check_win(board):
    return check_rows(board) or check_cols(board) or check_diagonals(board)
</code></pre>

<p>While this code is longer, it should also be more readable. Also, this way only the diagonal check is still complicated to check for correctness, but at least it is localized.</p></li>
<li><p>Your <code>get_input_from_user</code> function can be shortened a bit, at the cost of some readability (at least until you get used to functional programming):</p>

<pre><code>def get_input_from_user(message: str):
    return tuple(map(int, input(message).split()))
</code></pre></li>
<li><p><a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">Don't iterate over the indices, if what you really want to do is iterate over the elements</a>:</p>

<pre><code>def print_board(board):
    for row in board:
        print(row)
</code></pre></li>
<li><p>Your main loop and the <code>make_move</code> function. The <code>make_move</code> function has two almost identical branches, the only difference is the player mark. So why not pass that instead of the index? In your main loop you can also change that to just swap between the two players, which lets you use a <code>for</code> loop which is automatically restricted to n iterations:</p>

<pre><code>def make_move(player, board):
    x, y = get_input_from_user(f"Player {player}, please enter a move:")
    while not is_valid_move(x, y, board):
        x,y = get_input_from_user("Invalid move, please try again:")
    board[x][y] = player

if __name__ == '__main__':
    players = "X", "O"
    board = [['_'] * 3 for _ in range(3)]
    for _ in range(9):
        make_move(players[0], board)
        print_board(board)
        if check_win(board):
            print(f"Player {players[0]} is the Winner!")
            break
        players = players[::-1]  # equivalent to players[0], players[1] = players[1], players[0]
    else:    # only runs if no `break` broke the loop
        print("Its a Draw!")
</code></pre>

<p>I also used some <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer"><code>f-string</code>s</a> for formatting, <a href="https://riptutorial.com/python/example/12259/list-multiplication-and-common-references" rel="nofollow noreferrer">multiplication of lists</a>, and the <a href="http://book.pythontips.com/en/latest/for_-_else.html#for-else" rel="nofollow noreferrer"><code>else</code> clause of loops</a> to detect a draw.</p></li>
<li><p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends always puting a space after commas in parameter lists, etc.</p></li>
</ul>
    </div>