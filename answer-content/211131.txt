<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When you need to loop a fixed number of time, but don't actually need the loop index, it is customary to use <code>_</code> as the loop index.  So, in <code>fibonacci(n)</code>, you would write <code>for _ in range(n):</code>.</p>

<p>Your <code>fibonacci()</code> generator is generating too many values.  Your last code value is 26, so any fibonacci value greater than 26 is unnecessary.  Instead of asking for a fixed number of values, ask for values up to a specific limit.</p>

<pre><code>def fibonacci_up_to(last):
    a, b = 1, 1
    out = []
    while a &lt;= last:
        out.append(a)
        a, b = a+b, a
    return out
</code></pre>

<p>And use <code>F = fibonacci_up_to(26)</code></p>

<p>The following is an incorrect comment:</p>

<pre><code># Lagged fibonacci numbers the sequence starts: 1,2,3,5,8,11
</code></pre>

<p>The fibonacci sequence doesn't contain an <code>11</code>; the number, following after <code>5</code> and <code>8</code> would be <code>5+8=13</code>!</p>

<hr>

<p>In <code>makeCodebook()</code>:</p>

<p>It is usually clearer to write <code>x = x-f</code> as <code>x -= f</code></p>

<p>Instead of always appending <code>"1"</code> to the end of <code>code</code> after reversing it, you could simply initialize <code>code = ["1"]</code> at the start.</p>

<p>The <code>while x != 0:</code> loop is unnecessary.  After the <code>for f in F:</code> loop, <code>x</code> will have become zero, or there is a logic error in constructions of the <code>code</code> for <code>x</code>.  Remove <code>while x != 0:</code>, and optionally add an <code>assert</code> if you are unsure <code>x</code> actually reaches zero.</p>

<p>Construction your code dictionary <code>D</code>:</p>

<pre><code>D = {}
for a,b in zip(alpha, codes):
    D[a] = b
</code></pre>

<p>can be re-written with list-comprehension as:</p>

<pre><code>D = { a: b for a, b in zip(alpha, codes) }
</code></pre>

<p>Or, as pointed out by @Graipher in the comments, simply:</p>

<pre><code>D = dict(zip(alpha, codes))
</code></pre>

<p>Using <code>if decode == False:</code> followed by <code>if decode == True:</code> is unnecessary verbose.  <code>if decode == False:</code> can simply be <code>if not decode:</code>, and the reverse condition should simply be <code>else:</code>.  Or better, eliminate the negated logic, by swapping the statement order:</p>

<pre><code>if decode:
    D = { code: letter for letter, code in zip(alpha, codes) }
else:
    D = { letter: code for letter, code in zip(alpha, codes) }
</code></pre>

<p>Or, leveraging @Graipher's simplification from the comments and Python's <code>x if cond else y</code> expression, the above can be written in one line.  Whether this is clearer or more obfuscated is a matter of taste:</p>

<pre><code>D = dict(zip(codes, alpha)) if decode else dict(zip(alpha, codes))
</code></pre>

<hr>

<p>In <code>prefixCode()</code>:</p>

<p>Constructing the <code>out</code> array can be done with list comprehension:</p>

<pre><code>out = [ D[letter] for letter in text ]
</code></pre>

<p>but this <code>out</code> array is just a temporary used as an argument in the next statement, so you should combined them:</p>

<pre><code>return "".join( D[letter] for letter in text )
</code></pre>

<p>Your function has (or will have) two entirely different execution paths with almost no common functionality, one for encoding, and (eventually) one for decoding.  Write this as two functions, not as one function with a <code>decode</code> parameter to choose between the paths:</p>

<pre><code>def encode(text):
    # ...

def decode(text):
    # ...
</code></pre>

<hr>

<p>Use <code>pylint</code> or similar to check your code for <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> compatibility.  Including things such as:</p>

<ul>
<li>use spaces after commas: <code>zip(alpha, codes)</code> not <code>zip(alpha,codes)</code></li>
<li>use spaces around operators: <code>x - f</code> not <code>x-f</code></li>
<li>use <code>lower_case_function_names()</code>, not <code>mixedCaseFunctionNames()</code></li>
<li>use <code>lower_case_variables</code> not uppercase identifiers like <code>D</code> and <code>F</code></li>
</ul>

<hr>

<p>Generating your codebook:</p>

<p>This can be simplified by (for the moment, ignore the final terminating <code>1</code>) noting that the code for a Fibonacci number is simply a number of placeholder <code>0</code>'s followed by a <code>1</code>, and the code for a number like 17 (=<code>13+4</code>) will be the code for 4 (<code>101</code>), followed by a number of placeholder <code>0</code>'s, and then a <code>1</code> for the largest Fibonacci value smaller than the number (<code>13</code>).  After building all of the codes, add the final <code>1</code> terminator to each.</p>

<pre><code>def codebook(key):
    codes = [""]
    a, b = 1, 1
    digits = 0

    for x in range(1, len(key)+1):
        if x &gt;= a:
            a, b = a+b, a
            digits += 1

        prefix = codes[x-b]
        codes.append(prefix + "0"*(digits - len(prefix) - 1) + "1")

    return { letter: code+'1' for letter, code in zip(key, codes[1:]) }

letter_to_code = codebook("ETAOINSRHLDCUMFPGWYBVKXJQZ")

code_to_letter = { code: letter for letter, code in letter_to_code.items() }
</code></pre>
    </div>