<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A different approach based on the idea to use something like a dictonary (t3chb0t's answer) is using two arrays of strings internally. One to check if this "string-component" is present in the file name, the other one to return the file type.<br>
Using these two you need to iterate the first array and return from the second array using same index if you find something.<br>
This removes the if/else structure and seems to be easy to read to me, eventough (or maybe because) it is not as advanced as the other answers and keeps the contains().</p>

<pre><code>private static string GetFileDataType(string fullFileNameWithPath)
        {
            // extract filename only
            var fileName = Path.GetFileNameWithoutExtension(fullFileNameWithPath);

            if (string.IsNullOrWhiteSpace(fileName))
                return string.Empty;

            String[] fileNameComponents = { "__Import__", "__Export__", "__Transform__" };
            String[] fileTypes = { "Source Data", "Destination Data", "Transformational Data" };            

            for (int i = 0; i &lt; fileNameComponents.Length; i++)
            {
                if (fileName.Contains(fileNameComponents[i]))
                    return fileTypes[i];
            }

            return "General";
        }
</code></pre>

<p>This approach only aims at the core of the question (removing the if/else) whitout considering any improvments to performance. </p>
    </div>