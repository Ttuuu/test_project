<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Prelude</h2>

<blockquote>
  <p>I've also seen that many in the C++ community seem to favor comments instead of descriptive variable/function names. Example:</p>

<pre><code>int a = 3.14159265359; // pi with 11 decimal numbers
</code></pre>
</blockquote>

<p>Not really, you should use meaningful names (and not only in C++). <code>pi_eleven_decimal</code> add nothing. Worst, it can be lying or source of trouble. What happen if later you wand to change  to take only 6 digit? You'll leave the lying name, or you'll change all occurrences, opening way to mistakes. The number of digits is an implementation detail which the user don't (have to) care. <code>a</code> isn't even better, you loose completely the sens of your variable. Here, I would name it simply <code>pi</code>.</p>

<p>Also, note that you used the wrong type. You used <code>int</code> so it will be truncated to <code>3</code> (plus get some compiler warnings). So, here you can use <code>float pi = 3.14159265359</code>,  <code>double pi = 3.14159265359</code>,  <code>auto pi = 3.14159265359f</code> or   <code>auto pi = 3.14159265359</code> per example.</p>

<h2>Coding idiomatically</h2>

<h3>Avoid <code>using namespace std;</code></h3>

<p>Putting <code>using namespace std</code> at the top of every program is a <a href="https://stackoverflow.com/a/1453605/5416291">bad practice</a> that can cause a lot of problems that are easy to avoid, most people are used to the prefix, and three letters aren't that hard to type.</p>

<ul>
<li>Although it's "safe" to use it in some place (e.g. implementation files), as long as you aren't familiar with the features of c ++, <a href="https://isocpp.org/wiki/faq/coding-standards#using-namespace-std" rel="noreferrer">try to avoid it</a>.</li>
<li>It led to a world of name collisions. (best case)</li>
<li>It's source of silent errors and weird bugs. (worst case)</li>
<li>If typing <code>std::</code> is so tedious for you, try to import only truncated namespaces. ( e.g. <code>using namespace std::string;</code>).</li>
<li>If importing nested namespaces still too awful for you, try to do it <a href="https://en.cppreference.com/w/cpp/language/namespace#Using-declarations" rel="noreferrer">inside a restricted scope</a> (e.g. a functions) and not in global scope.</li>
</ul>

<h3>Randomization</h3>

<p>Avoid using <code>rand</code> for randomization. Instead use the  <a href="https://en.cppreference.com/w/cpp/header/random" rel="noreferrer"><code>&lt;random&gt;</code></a> header's facilities.  You have a lot of interesting post on SO:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/13445688/how-to-generate-a-random-number-in-c">How to generate a random number in C++?</a></li>
<li><a href="https://stackoverflow.com/questions/19665818/generate-random-numbers-using-c11-random-library">Generate random numbers using C++11 random library</a></li>
<li><a href="https://stackoverflow.com/questions/7114043/random-number-generation-in-c11-how-to-generate-how-does-it-work">Random number generation in C++11: how to generate, how does it work?</a></li>
</ul>

<p>And, if you want a higher randomness, you can try seeding like described <a href="https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html" rel="noreferrer">here</a>.</p>

<p>But in all case, you don't have to call four times your choses random function. Just call it once and get a number from 0 to 9999.</p>

<p>Then, don't forget to add leading 0's if number is lesser than 1000 (see below *).</p>

<h3>Expressions and statements</h3>

<strong>Declare variables late as possible</strong>

<p>Don't declare variables at the top of your functions or <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce" rel="noreferrer">before you need it</a>, try to keep their <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-scope" rel="noreferrer">scope as small as possible</a>.  Wait <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#es22-dont-declare-a-variable-until-you-have-a-value-to-initialize-it-with" rel="noreferrer">until you have a value</a> to initialize it with.</p>

<strong>Always initialize variable (as mush as possible)</strong>

<p>Declaring variable and then initialize it much later <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#es20-always-initialize-an-object" rel="noreferrer">is a source of mistakes</a> that lead to undefined behavior. Instead, Initialize your variables in the declaration. </p>

<strong>Don't be redundant in your conditions</strong>

<p>As <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#es87-dont-add-redundant--or--to-conditions" rel="noreferrer">explained in the Core Guideline</a>, comparing a boolean to true in a condition, not only is useless, but it's also much more verbose.</p>

<p><code>while (run_game == true)</code> should be <code>while (game_running)</code> (look also at the name change, it's a lot more fluent). </p>

<p><code>run_game = (again == 'y') ? true : false;</code> should be <code>game_running = (again == 'y');</code></p>

<h3>Input/Output</h3>

<strong>Don't use <code>std::endl</code></strong>

<p>Using <code>std::endl</code> send a <code>'\n'</code> and then flushes the output buffer. So <code>std::endl</code> is more expensive in performance. Instead, use <code>'\n'</code> and then, if you want to manually flush the stream, explicitly call <a href="https://en.cppreference.com/w/cpp/io/manip/flush" rel="noreferrer"><code>std::flush</code></a>.</p>

<strong>Sanitize inputs</strong>

<p>Don't think users will not try to break your program, they will do, even by mistake. <a href="https://isocpp.org/wiki/faq/input-output#istream-and-ignore" rel="noreferrer">Ensure user give something you expect</a>. Here, you ask for a integer (not a string) and then, only after insuring correctness of the input (lower than 10000 and greater or equal to 0), use <code>std::to_string</code> (or <code>std::stringstream</code>) to convert it to a string. Don't forget to add leading 0's in case where inputed number is lower than 1000. (see below *)</p>

<p>You can also use the same method than linked above for the "play again" input.</p>

<h3>Wrap code into functions and factorize</h3>

<ul>
<li><p>Don't put the code into the main, but instead, move the game's code into its own function.</p></li>
<li><p>You are outputting in many place and ask for input then read, in many other place. Try to wrap theses two behaviors into own functions (eg, <code>print</code> and <code>ask_input</code>). it will be easier, if later you want to modify the way you print or read inputs, to just modify one place.</p></li>
<li>(*) Also, you can have a function (or local lambda) to ensure <code>secret</code> and <code>guess</code> are 4 length, and add padding 0's otherwise.</li>
</ul>

<h3>Choose the right algorithm</h3>

<p>Your two for-loop can be rewritten with <a href="https://en.cppreference.com/w/cpp/algorithm/mismatch" rel="noreferrer"><code>std::mismatch</code></a> for the first and  <a href="https://en.cppreference.com/w/cpp/algorithm/set_intersection" rel="noreferrer"><code>std::set_intersection</code></a> for the second.</p>

<p>Just after, the cows calculation can be simplified with <code>cow = std::max(0, find_count - bull);</code></p>

<h2>Misc</h2>

<p>There are still some refactoring possible, as moving the output "You win!" outside of the loop.</p>

<p>You can also <a href="https://stackoverflow.com/questions/276807/return-0-implicit">remove the return statement</a> from your <a href="https://stackoverflow.com/questions/204476/what-should-main-return-in-c-and-c">main</a>. Quoting <em>C++ Standard</em> :</p>

<blockquote>
  <p>If control reaches the end of main without encountering a return statement, the effect is that of executing <code>return 0;</code></p>
</blockquote>
    </div>