<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>when compiling, always enable the warnings, then fix those warnings.</p>

<p>for <code>gcc</code>, at a minimum use:</p>

<pre><code>gcc -c -Wall -Wextra -Wconversion -pedantic -std=gnu11 file.c -o file
</code></pre>

<p>compiling the posted code results in:</p>

<pre><code>gcc    -ggdb -Wall -Wextra -Wconversion -pedantic -std=gnu11  -c "untitled2.c"  

untitled2.c:12:8: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 static const bool check_sorted(const int64 *const,const size_t,const bool);
        ^~~~~

untitled2.c:14:84: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 static void merge_integer_data(int64 *const,const size_t,const size_t,const size_t,const bool (*comparator)(const void*,const void*));
                                                                                    ^~~~~

untitled2.c:16:8: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 static const bool integer_comparator(const void*,const void*);
        ^~~~~

untitled2.c: In function ‘main’:
untitled2.c:20:26: warning: conversion to ‘size_t {aka const long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         const size_t n = atoi(argv[1]);
                          ^~~~

untitled2.c:29:33: warning: conversion to ‘int64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 sequence[j++] = atoi(parse_ptr);
                                 ^~~~

untitled2.c:34:31: warning: conversion to ‘int64 {aka long long unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             sequence[n - 1] = atoi(parse_ptr);
                               ^~~~
untitled2.c: At top level:
untitled2.c:76:8: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 static const bool check_sorted(const int64 *const data,const size_t n,const bool order) {
        ^~~~~

untitled2.c:105:85: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 static void merge_integer_data(int64 *const data,size_t start,size_t mid,size_t end,const bool (*comparator)(const void *,const void *)) {
                                                                                     ^~~~~

untitled2.c:133:8: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
 static const bool integer_comparator(const void *a,const void *b) {
        ^~~~~

Compilation finished successfully.
</code></pre>

<p>Note:  the compiler output: "Compilation finished successfully."   only means that the compiler implemented some work-around for each of the problems.  It does NOT mean the resulting object file is correct</p>

<p>instead of calling: <code>atoi()</code>  Suggest calling <code>strtoll()</code> (the man page gives the details on how to use the <code>strtoll()</code> function)</p>

<p>strongly suggest eliminating:</p>

<pre><code>   } else {
    if(argc &gt; 4) {
        fprintf(stderr,"Line number: %u: More than %u arguments are passed\n", __LINE__,argc);
    } else {
        fprintf(stderr,"Line number: %u: Insufficient Number of Arguments passed\n", __LINE__);
    }
    return EXIT_FAILURE;
</code></pre>

<p>and modifying this:</p>

<pre><code>if(argc == 3 || argc == 4) {
</code></pre>

<p>to something similar to:</p>

<pre><code>if( argc &lt; 3 || argc &gt; 4 )
{
    fprintf( stderr, "USAGE: %s dataCount dataArray [-r|-reverse]\n", argv[0] );
    exit( EXIT_FAILURE );
}

// implied else, correct number of command line arguments
</code></pre>

<p>The above tells the user what they should have entered on the command line.</p>

<p>there is no need for the first command line parameter.  Rather suggest enclosing the data array in double quotes so it is treated as a single argument.</p>

<p>for ease of readability and understanding: </p>

<ol>
<li>follow the axiom: <em>only one statement per line and (at most) one variable declaration per statement.</em></li>
<li>separate code blocks: <code>for</code> <code>if</code> <code>else</code> <code>while</code> <code>do...while</code> <code>switch</code> <code>case</code> <code>default</code> via a single blank line.</li>
<li>separate functions by 2 or 3 blank lines (be consistent)</li>
<li>insert reasonable space: inside parens, inside braces, inside brackets, after commas, after semicolons, around C operators</li>
<li>honor the right margin (usually column 72 or 80) for those with narrow monitors and for printing</li>
</ol>

<p>most of the uses of the modifier: <code>const</code> are harming the program rather than helping.  Suggest removing all the instances of <code>const</code></p>

<p>EDIT:  removed comment about 'assert.h'</p>

<p>regarding these statements:</p>

<pre><code>typedef unsigned long long int64;
typedef long long uint64;
</code></pre>

<p>Much better to include the header file: <code>ctype.h</code> and use:  <code>uint64_t</code> and <code>int64_t</code>   BTW:  those <code>typedef</code>s seem to have the definitions backwards</p>

<p>regarding:</p>

<pre><code>parse_ptr = parse_seq + i + 1;
</code></pre>

<p>this is expecting that the values in the data array are always separated via a single space.  That is not a safe assumption when working with user entered data.  Suggest using something like <code>strtok()</code> to extract each data entry</p>
    </div>