<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This post is not to minimize or critic the previous answer, rather complement it by providing a different perspective. </p>

<p>The namespace is a better-supported scope than classes as partially specified templates are supported there, also scopes other functions in a more generic and cleaner way.</p>

<p>By subtracting the template index rather than incrementing it like in the previous answer, fewer templates parameters are needed as well as boilerplate.</p>

<p>There is no need to create a new type of template type lists as cpp supports plenty of such classes, ex: std::tuple, std::variant, etc.</p>

<pre class="lang-cpp prettyprint-override"><code>namespace index_2_type_details
{
    template&lt; std::size_t T_INDEX, typename T, typename... T_ARGS &gt; struct next 
    { 
        static_assert( T_INDEX &lt;= sizeof...(T_ARGS), "Index out of range" ); 
        using type = typename next&lt; T_INDEX-1, T_ARGS...&gt;::type; 
    };
    template&lt; typename T, typename... T_ARGS &gt; struct next&lt;0,T,T_ARGS...&gt;
    { 
       using type = T; 
    };

    template&lt; std::size_t T_INDEX, typename T_CLASS &gt; struct from_class;
    template&lt; std::size_t T_INDEX, template&lt;typename...&gt; class T_CLASS, typename... T_ARGS &gt; 
    struct from_class&lt; T_INDEX, T_CLASS&lt;T_ARGS...&gt;&gt; 
    { 
       using type = typename next&lt; T_INDEX, T_ARGS...&gt;::type; 
    };
}

template&lt; std::size_t T_INDEX, typename... T_ARGS &gt;
using index_2_type_t = typename index_2_type_details::next&lt; T_INDEX, T_ARGS... &gt;::type;

template&lt; std::size_t T_INDEX, class T_CLASS &gt;
using list_index_2_type_t = typename index_2_type_details::from_class&lt; T_INDEX, T_CLASS &gt;::type;

static_assert( std::is_same&lt; index_2_type_t&lt;2, float, int, short&gt;, short &gt;::value );

#include&lt;tuple&gt;
static_assert( std::is_same&lt; list_index_2_type_t&lt;2, std::tuple&lt;float, int, short&gt;&gt;, short &gt;::value );
</code></pre>

<p>if you are looking to keep it even more compact you can also use more features from C++ by using the build in functionality from std::tuple.</p>

<pre class="lang-cpp prettyprint-override"><code>template&lt; std::size_t T_INDEX, typename... T_ARGS &gt;
using typelist_itot_t = typename std::tuple_element&lt;T_INDEX, std::tuple&lt;T_ARGS...&gt;&gt;::type;

namespace typelistclass_itot_details
{
    template&lt; std::size_t T_INDEX, typename T_CLASS &gt; struct from_class;
    template&lt; std::size_t T_INDEX, template&lt;typename...&gt; class T_CLASS, typename... T_ARGS &gt;
    struct from_class&lt; T_INDEX, T_CLASS&lt;T_ARGS...&gt;&gt; 
    { using type = typelist_itot_t&lt;T_INDEX, T_ARGS...&gt;; };
}
template&lt; std::size_t T_INDEX, typename T_CLASS &gt;
using typelistclass_itot_t = typename typelistclass_itot_details::from_class&lt;T_INDEX,T_CLASS&gt;::type;

<span class="math-container">```</span>
</code></pre>
    </div>