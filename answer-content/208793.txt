<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are ignoring the <code>pre_execution</code> and <code>post_execution</code> return values.</p>

<pre><code>def invariant(lst):
   return len(lst) &gt; 0

@hoare_logic("Invariants", invariant, invariant)
def append_hello(lst):
   """Append 'hello' to a non-empty list"""

   lst.append("Hello")

lst = []
append_hello(lst)
</code></pre>

<blockquote>
  <p>Hoare Pre-Condition 'Invariants'<br>
  Hoare Post-Condition 'Invariants'</p>
</blockquote>

<p>Neither the <code>False</code> nor the <code>True</code> returned by <code>invariant</code> is used or printed.  This comes from your print statement, which only has 1 format code <code>{!r}</code>, but two values are being passed to <code>format()</code>.</p>

<pre><code>print("Hoare Pre-Condition {!r}".format(description, pre_condition))
</code></pre>

<p>You should either usefully use the <code>pre_condition</code> and <code>post_condition</code> return values, or the <code>pre_execution</code> and <code>post_execution</code> should not be expected to return values, and should <code>raise</code> an exception to indicate a failure of the pre/post conditions.</p>

<hr>

<p>Your <code>@hoare_logic</code> decorator will hide any <code>"""docstring"""</code> which is added to functions:</p>

<pre><code>help(append_hello)
</code></pre>

<p>ends up describing the <code>wrapper_func</code> instead of <code>append_hello</code>!</p>

<pre><code>Help on function wrapper_func in module __main__:  

wrapper_func(*args, **kwargs)
</code></pre>

<p>You should use <code>@functools.wraps</code> to transfer the <code>__name__</code>, docstring, signature, argument type hints, etc from the wrapped function to the wrapping function.  After decorating the wrapper ...</p>

<pre><code>import functools

def hoare_logic(description, pre_execution=None, post_execution=None):
    def decorator_func(function_to_decorate):
        @functools.wraps(function_to_decorate)      # &lt;-- new
        def wrapper_func(*args, **kwargs):
            # ... body omitted for brevity ...
        return wrapper_func
    return decorator_func
</code></pre>

<p>... then <code>help(append_hello)</code> produces the expected result:</p>

<pre><code>Help on function append_hello in module __main__:

append_hello(lst)
    Append 'hello' to a non-empty list
</code></pre>
    </div>