<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>View</code> class is a mess. Trying to build Swing user interfaces in Java code descends very easily into a food fight in an italian restaurant. I've been there too. I have no idea what the UI is supposed to look like (and I'm not going to bother running the code to find out), but if there are separate logical components within the view, refactor them into custom components and place those in the View. This reduces the number of direct dependencies you have to declare in the View class and makes it easier to manage and maintain. If there is a tool that lets you define the layout constraints in XML or similar resource, use it.</p>

<pre><code>public JLabel getjCypher() {
    return jCypher;
}

public void setjCypher(JLabel jCypher) {
    this.jCypher = jCypher;
}
</code></pre>

<p>You expose a lot of the internal components through getters and setters. Did you just autogenerate these for all of the fields with your IDE? If so, that was a mistake. A view should almost never need to expose it's sub-components to anyone. Especially not in this extent. The need to expose the internals is a sign that the View class is being <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">loaded with responsibilities</a> that should be divided into separate classes. The setters themselves seem to provide no functionality other than allowing external parties to break the internal state of the View. They need to go.</p>
    </div>