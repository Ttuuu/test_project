<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Specification</h2>

<h3>Palindrome</h3>

<p>From <a href="https://en.wikipedia.org/wiki/Palindrome" rel="noreferrer">wikipedia</a>:</p>

<blockquote>
  <p>A palindrome is a word, number, phrase, or other sequence of
  characters which reads the same backward as forward, such as madam or
  racecar or the number 10801. Sentence-length palindromes may be
  written when allowances are made for adjustments to capital letters,
  punctuation, and word dividers, such as "A man, a plan, a canal,
  Panama!", "Was it a car or a cat I saw?" or "No 'x' in Nixon".</p>
</blockquote>

<p>We can argue that your specification is stricter/simpler than that of wikipedia.</p>

<h3>Unicode compliance</h3>

<p>Your algorithm checks <em>characters</em>, not actual <em>glyphs</em>. This is OK for most applications that use ASCII, ANSI or other encodings that represent characters with 16 bits as limit. But for extended unicode, combining characters and other diacritics, your algorithm is flawed.</p>

<hr>

<h2>Design</h2>

<h3>Guard arguments</h3>

<p>You provide a <code>public</code> method, so argument checks are in place.</p>

<pre><code>if (text == null) throw new ArgumentNullException(nameof(text));
</code></pre>

<h3>While (true) loops</h3>

<p>Many consider <code>while (true)</code> bad practice, because it can lead to infinite loops in missing edge cases. Specially when code gets more complex, this is the case. Consider refactoring the loop to use a <code>boolean</code>. However, since this is a trivial and simple algorithm, I understand why you have done it like this.</p>

<h3>Unnecessary variables</h3>

<p>Since the variables <code>a</code> and <code>b</code> are only used once, there is no need to create variables.</p>

<blockquote>
<pre><code>char a = text[min];
char b = text[max];

if (a != b) {
    return false;
}
</code></pre>
</blockquote>

<p>Shorter:</p>

<pre><code>if (text[min] != text[max]) {
    return false;
}
</code></pre>

<h3>Lack of variables</h3>

<p>Consider creating variables for objects you require on multiple occasions.</p>

<blockquote>
<pre><code>lblInput.Foreground = Brushes.ForestGreen;
lblResult.Foreground = Brushes.ForestGreen;
lblTitel.Foreground = Brushes.ForestGreen;
</code></pre>
</blockquote>

<pre><code>public Brush ForegroundColor { get; } = Brushes.ForestGreen;

lblInput.Foreground = ForegroundColor;
lblResult.Foreground = ForegroundColor;
lblTitel.Foreground = ForegroundColor;
</code></pre>

<h3>Normalize user input</h3>

<p>You could argue that whitespace at the start or end of the input is mostly unintentional, so you should trim it. This depends on your guidelines for best practices concerning user experience.</p>

<blockquote>
  <p><code>string text = InputText.Text;</code></p>
</blockquote>

<pre><code> var text = InputText.Text.Trim();
</code></pre>

<h3>Formatted strings</h3>

<p>Formatted strings are cleaner and better optimized than concatenating strings.</p>

<blockquote>
  <p><code>OutputText.Text = text + (isPalindrome ? " is a palindrome" : " is NOT a palindrome");</code></p>
</blockquote>

<pre><code>OutputText.Text = $"text is{(isPalindrome ? " " : " NOT ")}a palindrome";
</code></pre>

<h3>Unoptimized code flow</h3>

<p>This code clears the output after checking for a palindrome. You should put this before the check, and only calculate the palindrome if any non-empty input is provided.</p>

<blockquote>
<pre><code>if(InputText.Text == string.Empty)
            OutputText.Clear();
</code></pre>
</blockquote>

<h3>WPF design</h3>

<p>For a trivial UI, using the code-behind of a control is fine. Consider using M-V-VM when you decide to extend the design and make it more complex.</p>
    </div>