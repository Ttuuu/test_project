<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Improving the algorithm</h3>

<p>Realize that you don't actually need to remove elements from a collection. You can just count how many sticks <em>would</em> disappear in each step.</p>

<p>Take for example this sorted list of sticks:</p>

<blockquote>
<pre><code>1 1 1 2 2 3 3 3 3 3 4 5 5 5
</code></pre>
</blockquote>

<p>At each cutting step, the shortest sticks disappear:</p>

<blockquote>
<pre><code>1 1 1 2 2 3 3 3 3 3 4 5 5 5
^^^^^
3 will disappear

      2 2 3 3 3 3 3 4 5 5 5
      ^^^
      2 will disappear

          3 3 3 3 3 4 5 5 5
          ^^^^^^^^^
          5 will disappear
</code></pre>
</blockquote>

<p>And so on. You can just count the number of sticks that will disappear, and figure out from that how many will remain.</p>

<h3>Use interface types in declarations</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(size);
</code></pre>
</blockquote>

<p>It's recommended to declare variables with their interface types:</p>

<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(size);
</code></pre>

<h3>Style</h3>

<p>This is way too compact writing style:</p>

<blockquote>
<pre><code>for(int i=0;i&lt;size;i++)
</code></pre>
</blockquote>

<p>It's much more readable this way, by putting spaces around operators:</p>

<pre><code>for (int i = 0; i &lt; size; i++)
</code></pre>

<h3>Checking an empty list</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>    while(list.size()&gt;0)
</code></pre>
</blockquote>

<p>A more idiomatic way to write:</p>

<pre><code>    while(!list.isEmpty())
</code></pre>

<h3>Suggested implementation</h3>

<p>Putting the above tips together:</p>

<pre><code>public static void main(String[] args) {
    List&lt;Integer&gt; sticks = readSticksFromStdin();
    Collections.sort(sticks);

    int pos = 0;
    int remaining = sticks.size();
    while (0 &lt; remaining) {
        System.out.println(remaining);
        int count = countEqualFrom(sticks, pos);
        pos += count;
        remaining -= count;
    }
}

private static int countEqualFrom(List&lt;Integer&gt; sticks, int from) {
    int value = sticks.get(from);
    for (int i = 1; from + i &lt; sticks.size(); ++i) {
        if (value != sticks.get(from + i)) {
            return i;
        }
    }
    return sticks.size() - from;
}

private static List&lt;Integer&gt; readSticksFromStdin() {
    Scanner scanner = new Scanner(System.in);
    int num = scanner.nextInt();
    List&lt;Integer&gt; sticks = new ArrayList&lt;&gt;(num);
    for (int i = 0; i &lt; num; ++i) {
        sticks.add(scanner.nextInt());
    }
    return sticks;
}
</code></pre>
    </div>