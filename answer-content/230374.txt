<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Remarks for beginners:</p>

<ul>
<li>Never hide a pointer behind a typedef! Never! It makes the code confusing and very hard to read and maintain.</li>
<li>You can't unfortunately use a generic <code>Node</code> pointer like in your code, because this isn't well-defined by the language. There are ways around it, but they are a bit controversial (see advanced reply below).</li>
<li>Generally, when doing any kind of polymorphism, you might want to have an "abstract base class". In this case it would have been <code>NodeType</code>, but it should be a struct of its own and each inherited class should contain an instance of the base class as first member. Not a pointer to it. </li>
<li>Avoid calling functions in the controlling statement of a <code>for</code> loop like you do in <code>for (size_t i = 0; i &lt; get_num_children(tree); i++)</code>. This will often produce needlessly slow code. Instead call the function once before the loop, then store the result in a variable.</li>
</ul>

<hr>

<p>Remarks for veterans (beginners ignore):</p>

<p>One advanced trick which is supposedly fully supported by the standard (but might have diverse quality of implementation on different compilers) is the "union common initial sequence" trick.</p>

<p>There's a rule stating that if you expose a union containing all those structs to the same translation unit as where those structs are used, type punning between the structs is well-defined. In your case something like this:</p>

<pre><code>union type_punning
{
  struct VariableNode_ a;
  struct ConstantNode_ b;
  struct OperatorNode_ c;
};
</code></pre>

<p>This union just needs to sit there; you don't need to use it, or even show it to the caller. This tells the compiler that since these struct share a common initial sequence, the <code>NodeType</code> member, we can type pun between them and it is well-defined, as long as we only access shared members of that initial sequence.</p>

<p>Meaning that suddenly we can do this:</p>

<pre><code>void func (struct VariableNode_* vn)
{
  if(vn-&gt;type == NTYPE_CONSTANT)
  {
    struct ConstantNode_* cn = (struct ConstantNode_*)vn;
    cn-&gt;const_value = something; // well-defined!
  }
}
</code></pre>

<p>There's also exceptions to the strict aliasing rule allowing this use. </p>

<p>Source: C17 6.5.2.3</p>

<blockquote>
  <p>One special guarantee is made in order to simplify the use of unions: if a union contains
  several structures that share a common initial sequence (see below), and if the union
  object currently contains one of these structures, it is permitted to inspect the common
  initial part of any of them anywhere that a declaration of the completed type of the union
  is visible. Two structures share a <em>common initial sequence</em> if corresponding members
  have compatible types (and, for bit-fields, the same widths) for a sequence of one or more
  initial members.</p>
</blockquote>
    </div>