<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://github.com/dmitrynogin/x-utils/tree/master/X.ComponentModel" rel="nofollow noreferrer">GitHub</a> and <a href="https://www.nuget.org/packages/X.ComponentModel/1.0.6" rel="nofollow noreferrer">NuGet</a></p>

<p>The right way would be to do not depend on <code>Autofac</code> but support it through <code>AutofacSeriveProvider</code> as many other IoC containers. So now I have this for <code>ioc://</code>:</p>

<pre><code>namespace System
{
    public static class ServiceLocator
    {
        public static T GetService&lt;T&gt;(this IServiceProvider provider, string uri) =&gt;
            provider.GetService&lt;T&gt;(new Uri(uri));

        public static object GetService(this IServiceProvider provider, string uri) =&gt;
            provider.GetService(new Uri(uri));

        public static T GetService&lt;T&gt;(this IServiceProvider provider, Uri uri) =&gt;
            (T)provider.GetService(uri);

        public static object GetService(this IServiceProvider provider, Uri uri)
        {
            if (uri.Scheme != "ioc")
                throw new NotSupportedException("Schema not supported.");

            var factory = (Delegate)provider.GetService(GetFactory(uri));
            return factory.DynamicInvoke(GetArguments(uri));
        }

        static Type GetFactory(Uri uri)
        {
            Func&lt;Type[], Type&gt; getType = Expression.GetFuncType;
            var types = GetParameters(uri)
                .Select(p =&gt; p.ParameterType)
                .Append(GetReturnType(uri));

            return getType(types.ToArray());
        }

        static object[] GetArguments(Uri uri)
        {
            var arguments = uri.Query
                .TrimStart('?')
                .Split('&amp;')
                .Select(p =&gt; p.Split('='))
                .ToDictionary(nv =&gt; nv[0], nv =&gt; Uri.UnescapeDataString(nv[1]));

            return GetParameters(uri)
                .Select(p =&gt; Convert.ChangeType(arguments[p.Name], p.ParameterType))
                .ToArray();
        }

        static ParameterInfo[] GetParameters(Uri uri) =&gt;
            GetReturnType(uri)
                .GetConstructors()
                .First()
                .GetParameters();

        static Type GetReturnType(Uri uri) =&gt;
            Type.GetType($"{uri.Segments[1]}, {uri.Host}");
    }
}
</code></pre>

<p>And the following for <code>clr://</code>:</p>

<pre><code>namespace System
{
    public static class Activator&lt;T&gt;
    {
        public static T CreateInstance(string uri) =&gt;
            CreateInstance(new Uri(uri));

        public static T CreateInstance(Uri uri) =&gt;
            uri.Scheme != "clr"
            ? throw new NotSupportedException()
            : (T)Activator.CreateInstance(GetReturnType(uri), GetArguments(uri));

        static object[] GetArguments(Uri uri)
        {
            var arguments = uri.Query
                .TrimStart('?')
                .Split('&amp;')
                .Select(p =&gt; p.Split('='))
                .ToDictionary(nv =&gt; nv[0], nv =&gt; Uri.UnescapeDataString(nv[1]));

            return GetParameters(uri)
                .Select(p =&gt; Convert.ChangeType(arguments[p.Name], p.ParameterType))
                .ToArray();
        }

        static ParameterInfo[] GetParameters(Uri uri) =&gt;
            GetReturnType(uri)
                .GetConstructors()
                .First()
                .GetParameters();

        static Type GetReturnType(Uri uri) =&gt;
            Type.GetType($"{uri.Segments[1]}, {uri.Host}");
    }
}
</code></pre>
    </div>