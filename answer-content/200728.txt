<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are using a pretty nice idea here. You store things you've seen once and remove them when you've seen them a second time. To do so you're using a <code>List</code>. </p>

<p>Instead of a <code>List</code> you should be using a <code>Set</code> though. Lists are not optimized for <code>contains</code> checks. Also <code>ArrayList</code> has a pretty expensive <code>remove</code> operation. Let's rewrite the <code>getAloneNum</code> with a <code>Set</code>:</p>

<pre><code>private static int getAloneNum(int[] arr) {
    Set&lt;Integer&gt; alone = new HashSet&lt;&gt;();
    for (int elem : arr) {
        if (alone.contains(elem)) {
            alone.remove(elem);
        } else {
            alone.add(elem);
        }
    }
    return alone.iterator().next();
}
</code></pre>

<p>Note that this implementation avoids the following things:</p>

<ul>
<li>Unnecessary negation in the if-condition</li>
<li>repeated traversal of the container (<code>contains</code> and <code>indexOf</code> traverse the full list)</li>
</ul>

<p>I also personally prefer to not have  a space before the opening parenthesis, but YMMV :)</p>

<p>As a challenge for java 8 you could try to rewrite this to use as little memory as possible by using a <code>Stream</code> and handling the input as it comes instead of saving it into an array :)</p>
    </div>