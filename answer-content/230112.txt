<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Below is an answer highlight and performance comparison of various solutions. <em>Note</em>: the differences should be negligible in practice - if otherwise, timing variance is substantial, and all are ~on par (per benchmark)</p>

<hr>

<p><strong>SOLUTION 1 GZ0-Mod+</strong>:</p>

<pre class="lang-py prettyprint-override"><code>def ordered_shuffle(*args):
   zipped_args = list(zip(*(a.items() if isinstance(a, dict) else a for a in args)))
   random.shuffle(zipped_args)
   return [cls(elems) for cls, elems in zip(map(type, args), zip(*zipped_args))] 
</code></pre>

<hr>

<p><strong>SOLUTION 1 GZ0-Mod++</strong>: <em>(latest)</em></p>

<pre class="lang-py prettyprint-override"><code>def ordered_shuffle(*args):
    zipped_args = list(zip(*(a.items() if isinstance(a, dict) else a for a in args)))
    np.random.shuffle(zipped_args)
    return [(_type(data) if _type != np.ndarray else np.asarray(data)) 
            for _type, data in zip(map(type, args), zip(*zipped_args))]
</code></pre>

<p>This solution is simply the first but accounting for <code>numpy</code> arrays (also <code>_type</code> should be more intuitive, and spares <code>random</code> import since <code>numpy</code> is already imported).</p>

<hr>

<p><strong>UPDATE</strong>: Ran a <a href="https://pastebin.com/PnqtvEbz" rel="nofollow noreferrer">performance benchmark</a> - results for <code>iterations = 1e7</code>, and <code>a, b, c = tuple, list, dict</code> of length 10, nested, respectively:</p>

<ul>
<li><strong>#1</strong>: Solution 1 GZ0-Mod+   <code>114.2 sec, 71.2% faster than slowest</code></li>
<li><strong>#2</strong>: Solution 2   <code>---------- 131.9 sec, 48.0% faster than slowest</code></li>
<li><strong>#3</strong>: Solution 1   <code>---------- 155.7 sec, 25.4% faster than slowest</code></li>
<li><strong>#4</strong>: Gloweye's lambda  <code>--- 160.5 sec, 21.7% faster than slowest</code></li>
<li><strong>#5</strong>: RootTwo's functools <code>-- 195.3 sec</code></li>
</ul>

<hr>

<p><strong>Selected answer rationale</strong>:</p>

<ul>
<li>Best minimalism, acceptable readability</li>
<li>Uses plain Python - no high-level libraries; easier to debug &amp; understand</li>
<li>Well-explained answer, describing pitfalls of original approach &amp; how it's remedied</li>
<li>Best performance (a bonus, not major factor)</li>
</ul>
    </div>