<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please read <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> and apply its advice; this will make your code look like Python code to others. Mainly, avoid code blocks on the same line as their conditions, and avoid cramming too many assignments on the same line.</p>

<p>You can also make your predicate function return a single value, as the first element of the returned tuple can be computed from the second (mainly <code>p[0]</code> is <code>p[1] is None</code>). You could also use the more common values <code>-1</code>, <code>0</code> and <code>1</code> and add an <code>else</code> clause in your <code>xbinsearch</code> loop to raise an exception. This would have caught the case where <code>val == b</code> in your usage.</p>

<p>Lastly, <a href="https://docs.python.org/3/library/bisect.html#module-bisect" rel="nofollow noreferrer"><code>bisect</code></a> should be the module to reach for when dealing with binary search in Python. In fact, having your list of <code>primes</code> ready, the code should be:</p>

<pre><code>def get_total_primes(a, b):
    low = bisect.bisect_left(primes, a)
    high = bisect.bisect_left(primes, b)
    return high - low
</code></pre>

<p>And if you ever want to include the upper bound, you can:</p>

<pre><code>def get_total_primes_inclusive(a, b):
    low = bisect.bisect_left(primes, a)
    high = bisect.bisect_right(primes, b)
    return high - low
</code></pre>
    </div>