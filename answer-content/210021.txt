<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Avoid overflow, infinite loop</strong></p>

<p>For large <code>n</code>, <code>k*k</code> can overflow mathematically.</p>

<p>When <code>n == ULONG_MAX</code>, <code>for(k = 2; k*k &lt;= n; k++)</code> is an infinite loop.</p>

<p>Both of these can be solved with <code>k*k &lt;= n</code> --&gt; <code>k &lt;= n/k</code>.  As an added bonus, good compilers will see the nearby <code>n/k</code> and <code>n%k</code> and emit code that costs little extra as both are computed together - thus a candidate <strong>linear speed improvement</strong></p>

<p><strong>Minor: Incorrect functionality</strong></p>

<p>As a point of correct-ness, <code>IsPrime(0), IsPrime(1)</code> should return <code>false</code>.</p>

<p><strong>Minor: Detect limits</strong></p>

<p><code>6*k+1</code> in <code>IsPrime(6*k+1)</code> is a potential overflow.  Ensure <code>k</code> is not too large.  This test may not be necessary given the  <code>if(l == m) ... break</code>. One would need to test.</p>

<pre><code>k++;
if (k &gt; (ULONG_MAX - 1)/6) break;  // add
</code></pre>

<hr>

<pre><code>bool IsPrime(unsigned long n){
    unsigned long k;
    // for(k = 2; k*k &lt;= n; k++){
    for(k = 2; k &lt;= n/k; k++){
        if(n % k == 0){
            return false;
        }
    }
    // return true;
    return n &gt; 1;
}
</code></pre>
    </div>