<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ignoring the fact that your particular code doesn't actually need a nested loop, in general I would say that nested comprehensions can be fairly readable, but helps a lot to put each <code>for</code> on a line of its own:</p>
<pre><code>return [
    some_function_of(item, product)
    for item in order['order']['items']
    for product in pricing['prices']
    if some_condition_on(item, product)
]
</code></pre>
<p>The main issue with the way your code presents to the reader, is that the <code>if/else</code> clause is huge and the comprehension logic is tiny, so you can't easily see the structure of the comprehension itself until you've mentally eliminated the big if/else expression. This wouldn't be a problem if each logical part of the comprehension (the expression, the for clauses, the if clause) was small. If you can't achieve that, then a nested comprehension is going to be difficult to follow.</p>
<p>Alternatively, in a case like this where the "inner" nested <code>for</code> clause actually doesn't depend on the value of <code>item</code> from the outer <code>for</code>, you can also eliminate nesting using <code>itertools.product</code>:</p>
<pre><code>return [
    some_function_of(item, product)
    for item, product in itertools.product(order['order']['items'], pricing['prices'])
    if some_condition_on(item, product)
]
</code></pre>
<p>Assuming the reader knows <code>itertools</code>, this has the advantage of immediately communicating that this is an N*M loop. Sometimes when reading nested comprehensions (or nested <code>for</code> loops for that matter), you spend a bit of time wondering in what way the inner loop bounds depend on the outer loop value: are we looking at a rectangle, or a triangle, or something wibbly? It's usually not particularly difficult to figure out when they are independent, but explicitly stating that this is a cartesian product eliminates the need to even think about that. Whenever you can show the reader the big structure first, that helps readability.</p>
<p>Then with that done we see that:</p>
<ul>
<li>you're filtering a cartesian product</li>
<li>using a condition which <strong>by definition</strong> is only true for one pair per <code>item</code></li>
<li>because (we hope) <code>product_id</code> uniquely identifies a product,</li>
</ul>
<p>That is the clue that something is wrong here, and that it would be more efficient to look up the correct product for each item as in the other answers.</p>
<p>You may also notice that I'm using a different indenting style from you -- I put opening punctuation at the end of a line, and the matching closing punctuation at the start of a line, and I indent by fixed tabs rather than vertically matching the opening punctuation. That is to say, I use "hanging indents", and where PEP-8 says "The 4-space rule is optional for continuation lines", I choose to stick with 4! I think I'm probably in a minority of Python programmers who prefer this, though, so feel free to ignore it. Provided your indentation is reasonably consistent, it's only a minor contributor to readability which convention you follow.</p>
    </div>