<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I have been working on this code to meet the best OOP standards for production.</p>
</blockquote>
<p>I think your biggest problem here is that <code>PriceCalculator</code> does too many things:</p>
<ol>
<li>Getting user input</li>
<li>Calculating the price per checkout item</li>
<li>Calculating the total price</li>
<li>Printing the bill</li>
</ol>
<p>Let's try to split this up a bit first by introducing a <code>BillRow</code> for each line in your Bill to which we delegate to calculate the price per row .</p>
<pre class="lang-rb prettyprint-override"><code>class Bill
  def initialize(purchased_items:)
    @purchased_items = purchased_items
  end

  def total
    rows.inject(0) { |sum, x| sum + x.total }
  end

  def discounted_total
    rows.inject(0) { |sum, x| sum + x.discounted_total }
  end

  def rows
    @rows ||= fetch_rows
  end

  private
  
  attr_reader :purchased_items

  def fetch_rows
    count_items.map do |item, quantity|
      BillRow.new(name: name, quantity: quantity)
    end
  end

    def count_items
      purchased_items.inject(Hash.new(0)) do |quantity, item|
        quantity[item] += 1
        quantity
      end
    end
end

class BillRow
  attr_reader :name, :quantity

  def initialize(name:, quantity:)
    @name = name
    @quantity = quantity
  end

  def total
    @_total ||= quantity * item_price
  end

  def discounted_total
    @_discounted_total ||= calculate_discounted_total || total
  end

  private

   def calculate_discounted_total
    return unless sale_item
  
    ((quantity / sale_item['units'])) * sale_item['price']) + ((quantity % sale_item['units']) * item_price)
   end

    def sale_item
      @_sale_item ||= SaleItem.all[name]
    end

    def item_price
      Item.all[name]
    end
end

Bill.new(['milk', 'milk', 'bread'])
</code></pre>
<p>Additionally we will extract the display method to it's own class.</p>
<pre class="lang-rb prettyprint-override"><code>class BillPrinter
  def initialize(bill:)
    @bill = bill
  end

  def print
    print_header
    print_rows
    print_total
  end

  private

  def print_header
    puts "Item     Quantity      Price"
    puts "--------------------------------------"
  end

  def print_rows
    bill.rows.each do |row|
      puts "#{row.item_name.ljust(10)} #{row.quantity}           $#{row.total.round(3)}"
    end
  end

  def print_total
    puts "Total price : $#{bill.total.round(3)}"
    puts "You saved $#{(bill.total - bill.discounted).round(3)} today."
  end
end

bill = Bill.new(['milk', 'milk', 'bread'])
BillPrinter.new(bill: bill).print
</code></pre>
<p>I will skip getting the user input as this is can basically go to the main method.</p>
<p>Splitting the <code>PriceCalculator</code> into three classes has several advantages.</p>
<ol>
<li>Easier to test: We can pass in data instead of user input</li>
<li>Classes are smaller and have only one responsibility</li>
<li>Easier to extend and maintain e.g. if we want to use it on a website instead the console we need to refactor the code (user input read from StdIn and bill printed to StdOut). Now we can just implement a <code>HtmlBillPrinter</code> for instance.</li>
<li>We can easier memoize data (efficiency)</li>
</ol>
<blockquote>
<p>The code is working but I wish to make this a more efficient code</p>
</blockquote>
<p>In terms of efficiency, the biggest issue is that you calculate some values several times and look it up several times. This might be fine and the most important rule when making something more efficient is to first identify the bottleneck before jumping into optimize it. Readable code is usually preferred over complicated but efficient code.</p>
<p>To sum it up, I think the biggest improvements can be made in a better object oriented approach which allows you to more aggressively memoize values (<a href="https://www.justinweiss.com/articles/4-simple-memoization-patterns-in-ruby-and-one-gem/" rel="nofollow noreferrer">https://www.justinweiss.com/articles/4-simple-memoization-patterns-in-ruby-and-one-gem/</a>) as well as working with objects instead of e.g. arrays and hashes (<code>BillRow</code> vs <code>[quantity, value]</code>) which allows you to split out more readable methods too.</p>
<h2>Edit:</h2>
<p>As you mention 'production' I also just want to mention that you should NEVER use float for monetary values because they're not accurate (<a href="https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency">https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency</a>). You should use integer and represent the price e.g. in cents. Even better would be to use a money gem (<a href="https://github.com/RubyMoney/money" rel="nofollow noreferrer">https://github.com/RubyMoney/money</a>).</p>
<p>Another improvement would be to use objects in your <code>SalesItem</code> and <code>Item</code> classes.</p>
<pre class="lang-rb prettyprint-override"><code>class SaleItem
  @@sale_items = {}

  attr_reader :name, :units, :price
 
  def initialize(name:, units:, price:)
    @name = name
    @units = units
    @price = price
  end

  def initialize(name, units, price)
    @@sale_items[name] = new(name: name, units: units, price: price)
  end

  def self.all
    @@sale_items
  end
end
<span class="math-container">```</span>
</code></pre>
    </div>