<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public function validBraces($braces) {
</code></pre>

<p>I'd call this <code>isValidBraces</code> instead to show that it returns a Boolean value.  This also makes it read a little better in normal usage.  </p>

<pre><code>if ($braces === "") {
</code></pre>

<p>The difference between <code>""</code> and <code>''</code> is that the double quoted string allows variable interpolation.  Since you are not using variable interpolation, consider </p>

<pre><code>if ( '' === $braces ) {
</code></pre>

<p>The single quoted string will also be slightly quicker to interpret, although I don't know that the difference would matter in this case.  </p>

<p>I also changed the order.  It's not uncommon to see the constant on the left in C-based languages.  This is because <code>'' = $braces</code> would give a compiler error while <code>$braces = ''</code> will happily evaluate as false and continue.  </p>

<p>Incidentally, you don't need this statement, as the later <code>for</code> loop and count check will handle this case for you.  There's an argument that the code is a little cleaner without this check.  It certainly would be a little shorter.  </p>

<pre><code>$balance = array();
</code></pre>

<p>I might call this <code>$open_braces</code>.  It doesn't balance anything.  It's a stack of all the currently open braces, so call it that.  </p>

<pre><code>for ($i = 0; $i &lt; strlen($braces); $i++) {
</code></pre>

<p>As a general rule, you want to avoid calling a function on every loop iteration which always returns the same value.  </p>

<pre><code>for ($i = 0, $n = strlen($braces); $i &lt; $n; $i++) {
</code></pre>

<p>That way you only do the <code>strlen</code> call once at the initialization of the loop.  Each iteration can do the simpler check instead.  </p>

<pre><code>  if (!($braces[$i] === "(" || $braces[$i] === ")" 
       || $braces[$i] === "{" || $braces[$i] === "}" 
       || $braces[$i] === "[" || $braces[$i] === "]")) {
</code></pre>

<p>It's possible to write the <code>if</code> more simply by first defining a constant:</p>

<pre><code>private $closing_match_of = array( '(' =&gt; ')', '{' =&gt; '}', '[' =&gt; ']' );
</code></pre>

<p>Then set a variable in the function before the loop starts:</p>

<pre><code>$opening_match_of = array_flip($this-&gt;closing_match_of);
</code></pre>

<p>The <code>array_flip</code> will reverse the arrows from the way that they are in <code>CLOSING_MATCH_OF</code>.  So where you had <code>'{' =&gt; '}'</code>, you will now have <code>'}' =&gt; '{'</code>.  Using the <code>array_flip</code> ensures that you will have parallel matches in both.  You could declare a second constant, but then that would be fragile in the face of changes.  This way you can make changes in a single place.  </p>

<p>Then replace the <code>if</code> as follows:</p>

<pre><code>  if ( isset($this-&gt;closing_match_of[$braces[$i]]) ) {
    $open_braces[] = $braces[$i];
  } elseif ( isset($opening_match_of[$braces[$i]]) ) {
    if ( array_pop($open_braces) !== $opening_match_of[$braces[$i]] ) {
      return false;
    }
  } else {
    throw new InvalidArgumentException('Invalid string');
  }
</code></pre>

<p>This checks if the character at position <code>$i</code> in the <code>$braces</code> string has a closing match (i.e. is a key in the <code>$this-&gt;closing_match_of</code> array).  If so, then you know that it is an opening brace and add it to the list of things that you need to match.  If not, it checks if <code>$braces[$i]</code> has an opening match (i.e. if it is a key in the <code>$opening_match_of</code> array).  If so, then it checks to see if it matches the most recent unmatched open brace.  If not, then it returns <code>false</code> to indicate that the string does not consist of matching braces.  </p>

<p>The final case is if the character has no closing match nor opening match defined in the arrays.  In that case, it's not a brace.  Since the string is supposed to consist entirely of braces, it throws the exception.  We don't have to check anything in this case because we already did the checks earlier in the <code>if</code> and <code>elseif</code> clauses.  </p>

<p>If you are only adding one element to the end of an array, the <code>[]=</code> operator is more efficient than an <code>array_push</code>.  </p>

<p>I changed the order of the checks to avoid repeating them.  The other way you did two or three checks on a valid case and two on an invalid case.  This way, you do one or two on a valid case and two on an invalid case.  Hopefully the valid cases are more common.  </p>

<p>Note that I haven't tried to run or test this code.  </p>
    </div>