<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How about something like this:</p>

<pre><code>class ConsentUpdate(View):
    def update_consent_if_exists(self):
        self.consent = contact_by_email(self.consent_test_obj)

        if self.consent:
            self.change_consent_object()
        else:
            self.add_new_consent()

    def add_new_consent(self):
        new_consent = Contact(
            consent=True,
            email=self.email,
            first_name=self.first_name,
            last_name=self.last_name,
            organizer=self.organizer,
        )
        new_consent.save()
        new_consent.events.add(self.event)
        self.track_assignment_event()

    def change_consent_object(self):
        obj_email_exists = self.organizer.contacts.filter(
            email=self.email).first()
        if obj_email_exists:
            self.consent = obj_email_exists
        update_consent(
            consent=True,
            instance=self.consent,
            first_name=self.first_name,
            last_name=self.last_name,
            email=self.email,
            event=self.event,
        )

    def track_assignment_event(self):
        distinct_id = segment_get_distinct_id(request)
        if distinct_id:
            analytics.track(distinct_id, self.consent_message, properties={
                'consentEmail': self.email,
            })
        messages.success(request, _(
            "You will receive marketing updates. "
            "Unsubscribe by clicking the unsubscribe link in our emails."
        ))


class AttendeeConsentUpdate(ConsentUpdate):

    @cached_property
    def attendee(self):
        my_attendee = get_object_or_404(
            Attendee,
            ticket_reference=self.kwargs['ticket_reference'],
            ticket_code=self.kwargs['ticket_code'],
        )

        self.email = my_attendee.email
        self.first_name = my_attendee.first_name
        self.last_name = my_attendee.last_name
        self.event = my_attendee.event
        self.organizer = my_attendee.event.organizer
        self.consent_message = 'Attendee consent via checklist'
        self.consent_test_obj = my_attendee
        return my_attendee

    def post(self, request, *args, **kwargs):
        self.update_consent_if_exists()
        return redirect(self.attendee)


class OrderConsentUpdate(ConsentUpdate):

    @cached_property
    def order(self):
        my_order = get_object_or_404(
            Order,
            order_reference=self.kwargs['order_reference'],
            access_key=self.kwargs['access_key'],
        )

        self.email = my_order.email
        self.first_name = my_order.billing.customer_first_name
        self.last_name = my_order.billing.customer_last_name
        self.event = my_order.event
        self.organizer = my_order.event.organizer
        self.consent_message = 'Attendee consent via checklist'
        self.consent_test_obj = my_order
        return my_order

    def post(self, request, *args, **kwargs):
        self.update_consent_if_exists()
        return redirect(self.order)
</code></pre>
    </div>