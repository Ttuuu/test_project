<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, note that the complex class is unnecessary because we have <a href="https://en.cppreference.com/w/cpp/numeric/complex" rel="noreferrer"><code>std::complex</code></a> in the standard library, which is provided in the header <a href="https://en.cppreference.com/w/cpp/header/complex" rel="noreferrer"><code>&lt;complex&gt;</code></a>.  If you want to design your own class, <code>std::complex</code> is a good reference.  Now, for two complex numbers <code>x</code> and <code>y</code>, we can use <code>x + y</code>, <code>x - y</code>, <code>x * y</code>, and <code>x / y</code> directly.</p>

<p>Next, notice that this pattern comes up a few times, with slight modifications:</p>

<blockquote>
<pre><code>cout &lt;&lt; "a + b = " &lt;&lt; c.real &lt;&lt; " + (" &lt;&lt; c.imaginary &lt;&lt; ") * i" &lt;&lt; endl;
</code></pre>
</blockquote>

<p>The outputting of the complex number can be extracted into a function to reduce repetition: (<code>std::string</code> requires <a href="https://en.cppreference.com/w/cpp/header/string" rel="noreferrer"><code>&lt;string&gt;</code></a> and <code>std::ostringstream</code> requires <a href="https://en.cppreference.com/w/cpp/header/sstream" rel="noreferrer"><code>&lt;sstream&gt;</code></a>)</p>

<pre><code>std::string format(std::complex&lt;double&gt; z)
{
    std::ostringstream oss{};
    oss &lt;&lt; z.real() &lt;&lt; " + (" &lt;&lt; z.imag() &lt;&lt; ") * i";
    return oss.str();
}
</code></pre>

<p>Similarly, we can use a separate function to read the real and imaginary parts of a complex number:</p>

<pre><code>std::complex&lt;double&gt; read_complex()
{
    double real, imag;
    std::cin &gt;&gt; real &gt;&gt; imag;
    return {real, imag};
}
</code></pre>

<p>By the way, don't use <a href="https://stackoverflow.com/q/213907/9716597"><code>std::endl</code></a> unless you need the flushing semantics (which usually slows down the program).  Simply use <code>'\n'</code> instead.</p>

<p>Putting everything together:</p>

<pre><code>#include &lt;complex&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

std::string format(std::complex&lt;double&gt; z)
{
    std::ostringstream oss{};
    oss &lt;&lt; z.real() &lt;&lt; " + (" &lt;&lt; z.imag() &lt;&lt; ") * i";
    return oss.str();
}

std::complex&lt;double&gt; read_complex()
{
    double real, imag;
    std::cin &gt;&gt; real &gt;&gt; imag;
    return {real, imag};
}

int main()
{
    auto x = read_complex();
    auto y = read_complex();

    std::cout &lt;&lt; "x + y = " &lt;&lt; format(x + y) &lt;&lt; '\n';
    std::cout &lt;&lt; "x - y = " &lt;&lt; format(x - y) &lt;&lt; '\n';
    std::cout &lt;&lt; "x * y = " &lt;&lt; format(x * y) &lt;&lt; '\n';
    std::cout &lt;&lt; "x / y = " &lt;&lt; format(x / y) &lt;&lt; '\n';
}
</code></pre>

<p>(<a href="https://wandbox.org/permlink/wVj7KaXVDx1TbH2L" rel="noreferrer">live demo</a>)</p>
    </div>