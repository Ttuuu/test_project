<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Deck</strong>  </p>

<p>In both methods, <code>GetCard()</code> and <code>RemoveCard()</code>, the method-argument-validation is hard to read at first glance. You should change the condition and maybe extract the validation into its own method.  </p>

<p>Having the condition like this  </p>

<pre><code>public Card GetCard(int i)
{
    if (i &lt; 0 || i &gt;= _deckDimension)
    {
        return null;
    }
    return _deck[i];
}  
</code></pre>

<p>is much easier to read. But wait, <code>_deckDimension</code> isn't a field, its a property and therfor it should <strong>not</strong> be named using underscore-prefix. Based on the .NET Naming Guidelines methods should be named using <code>PascalCase</code> casing. <code>_deckDimension</code> -&gt; <code>DeckDimension</code>.  </p>

<p>But still, this doesn't look right. If the validation fails the methods shouldn't return <code>null</code> but throwing an <code>ArgumentOutOfRangeException</code>.   </p>

<p>Looking at <code>RemoveCard()</code> I think you really should read the <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines?redirectedfrom=MSDN" rel="nofollow noreferrer">.NET Naming Guidelines</a>. In .NET one shouldn't use <code>snake_case</code> casing for naming things and shouldn't use abbreviations  like e.g <code>cd_return</code>. Why don't you name it <code>card</code>? </p>

<p><strong>Dealer</strong>  </p>

<p>You are passing the <code>Deck</code> into the constructor, which is a good thing, but, because you don't change the <code>_deck</code> you should make it <code>readonly</code>.  </p>

<p>The <code>Random</code> class in .NET Framework isn't that random. If you call e.g the <code>Shuffle()</code> method very often and fast, it is possible to get the same random values over and over again. This is because <code>Random</code> when <a href="https://docs.microsoft.com/en-us/dotnet/api/system.random?view=netframework-4.8#instantiating-the-random-number-generator" rel="nofollow noreferrer">instantiated</a> will use the system clock to provide a seed value. You should have one <code>Random</code> object as a class-level field which should be instantiated in the constructor or directly. </p>

<p>The second argument of <a href="https://docs.microsoft.com/en-us/dotnet/api/system.random.next?view=netframework-4.8#System_Random_Next_System_Int32_System_Int32_" rel="nofollow noreferrer"><code>Random.Next(int, int)</code></a> is the <strong>exclusive</strong> upper bound of the random number to be returned. By calling <code>.Next(0, _deck._deckDimension - 1</code> you get <code>0 &lt;= number &lt; 51</code> but you want the card with number <code>51</code> as well, don't you? Thats true for <code>DealCard()</code> as well. </p>

<p>Making <code>Shuffle()</code> <code>void</code> would be good as well. I can't think of a way that shuffeling could fail, at least for a computer-dealer. A human could throw the cards on the ground, a computer wouldn't be so clumsy.  </p>

<p>Its possible that <code>DealCard()</code> throws an <code>ArgumentOutOfRangeException</code> in its current implementation. Let us assume we call <code>DealCard()</code> the first time and the call to <code>Randum.Next()</code> returns <code>1</code> you return the second <code>Card</code> in <code>_deck</code>. Calling <code>DealCard()</code> again, the call to <code>Randum.Next()</code> returns <code>1</code> again, no problem you return the second <code>Card</code> in <code>_deck</code> again. The third call to <code>DealCard</code> results in <code>Random.Next()</code> returning <code>51</code> but you only have <code>50</code> cards left in the deck, resulting in the said exception in <code>Deck.GetCard()</code>.  </p>

<p>To prevent this to happen we need to adjust the validation inside <code>GetCard()</code> and <code>RemoveCard()</code>. Instead of checking <code>_deckDimension</code> we should check against <code>_deck.Count</code> like so  </p>

<pre><code>public Card GetCard(int i)
{
    if (i &lt; 0 || i &gt;= _deck.Count || _deck.Count == 0)
    {
        throw new ArgumentOutOfRangeException(nameof(i));
    }
    return _deck[i];
}  
</code></pre>

<p>and change the call to <code>Random.Next()</code> in <code>DealCard</code> like so  </p>

<pre><code>first = rnd.Next(0, _deck.Count);
</code></pre>

<p>You can declare and initialize a variable on the same line. E.g in <code>DealCard()</code> you have  </p>

<pre><code>int first;
first = rnd.Next(0, _deck._deckDimension - 1);  
</code></pre>

<p>which should be changed to  </p>

<pre><code>int first = rnd.Next(0, _deck._deckDimension - 1);   
</code></pre>

<p>I just wanted to write that you should use <code>var</code> instead of the concrete type in <code>DealCard()</code> but had a quick glance at <code>Shuffle()</code> again where you used <code>var</code>. The rule of thumb for everything is <strong>be consistent</strong>. Choose <strong>one</strong> style and stick to it.  </p>

<p>Use either <code>var rnd = new Random();</code> or <code>Random rnd = new Random();</code> but <strong>don't use both</strong>.</p>
    </div>