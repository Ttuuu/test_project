<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Essentially your algorithm</p>

<ul>
<li><p>partitions a string of integers into integer-sublists of a fixed size</p></li>
<li><p>iterates over each sublist of integers</p></li>
<li><p>computes the product for each sublist</p></li>
<li><p>then updates the maximum-possible-product if the most recent product is larger</p></li>
</ul>

<p>That's a perfectly logical way to solve the problem. </p>

<p>But there are some algorithmic gains to be had (which I won't code up for you, because you'll gain more from writing it up yourself).</p>

<p>In essence, each time I take the product of 5 integers, I have to do 4 multiplications. So if I wanted to compute the product of the first, and the second, 5 integers in the string <code>624919...</code>, that is, the product of (6,2,4,9,1) and (2,4,9,1,9), is there a more efficient way to do it than to compute the products independently?</p>

<p>It turns out there is. First I compute the product (2,4,9,1), then to get the first answer I multiply this by 6, and to get the second I multiply it by 1. Doing the products independently requires 8 multiplications; doing the products with info about the overlaps requires 5 multiplications.</p>

<p>Think about how you could use a "sliding window" approach to more efficiently calculate the 13-mer products. Be careful of the zeros.</p>

<p>From a code-review point of view:</p>

<ul>
<li><p>1) Separate parsing the input data from processing that data</p>

<ul>
<li><code>int_string = '12345....'</code></li>
<li><code>int_list = [int(x) for x in int_string]</code></li>
</ul></li>
<li><p>2) Wrap your algorithm in a function (list[int], int) -&gt; int; and call it</p>

<ul>
<li><code>def largest_p_product(ints, p): ... &lt;copy in your code&gt; ...</code></li>
<li><code>result = largest_p_product(int_list, 13)</code></li>
<li><code>print(result)</code></li>
</ul></li>
<li><p>3) Consider what might happen with inappropriate data</p>

<ul>
<li>what if the list[int] is shorter than <code>pp</code></li>
<li>what if the input string contains non-digit characters?</li>
<li>what if the list[int] is all zero?</li>
</ul></li>
</ul>
    </div>