<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    static SecretKeySpec skeySpec = null;
</code></pre>

<p>Assigning <code>null</code> is never a good idea. Besides that, for fields (static or not) Java will automatically assign <code>null</code> anyway.</p>

<pre><code>    static public byte[] K1 = new byte[16]; // 128 bit sub key
</code></pre>

<pre><code>    static final public byte[] Z16 = new byte[16]; // 128 bit zero
</code></pre>

<p>Now for the keys you had an excuse, but is this not called <code>ZERO_VECTOR</code>? Z16 is not in the specification.</p>

<pre><code>    public static byte[] getDiversifiedKey() throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException // make K1 K2 from key
</code></pre>

<p>A getter should never throw an <code>IOException</code>: handle the exception internally or name the method differently.</p>

<pre><code>        byte bRb = (byte) 0x87; // Rb for AES128
</code></pre>

<p>Completely unclear naming, and seemingly using Hungarian notation, which Java programmers will <em>never</em> use.</p>

<pre><code>hexStringToByteArray
</code></pre>

<p>Not sure why you had to program that yourself, but at the naming is spot on at least.</p>

<pre><code>            K1 = cipher.doFinal(Z16);
</code></pre>

<p>This doesn't make sense, you don't set static fields that way. Just keep the variable local. Assigning the new array to a field just tosses away the previous array reference.</p>

<pre><code>            System.out.println("KO " + bytesToHex(K1));
</code></pre>

<p>Use a logger, or use a field set to <code>System.out</code> or something similar, but never print to console from anything other than a UI class.</p>

<pre><code>            System.out.println("\n error 400 AES   " + ex.getMessage());
</code></pre>

<p>After catching never print and continue. I default not to <code>printStackTrace</code> (like crappy IDE's do) but to</p>

<blockquote>
<pre><code>// TODO better exception
throw new IllegalStateException("Exception not handled", e);
</code></pre>
</blockquote>

<p>These <em>runtime</em> exceptions don't need to be handled and will at least exit the method without running on with invalid state.</p>

<pre><code>        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
</code></pre>

<p>Consider <code>ByteBuffer.allocate()</code> initialized to the correct size instead, then <code>put</code> the byte arrays into that, and retrieve the backing array using <code>array()</code>. Saves you the IOExceptions. In this case an <code>IOException</code> will never happen, so convert it to <code>IllegalStateException</code> again.</p>

<pre><code>    final protected static char[] hexArray = "0123456789ABCDEF".toCharArray();
</code></pre>

<p>Always keep to the right order: <code>protected static final ...</code>. However, in this case <code>private static final ...</code> makes a lot more sense. </p>

<pre><code>    public static String bytesToHex(byte[] bytes) {
</code></pre>

<p>Why is this method named rather differently than <code>hexStringToByteArray</code>?</p>

<pre><code>    static byte[] xor16(byte[] ba, byte[] bb) {
</code></pre>

<p>What's the 16 for?</p>

<pre><code>    static byte[] shl(byte[] bin) // &lt;&lt; 16 byte array
</code></pre>

<p>Ah, another 16 this time. But in this case it is required. Please document things like the input size in the JavaDoc, and not in an end of line comment. Methods like these should be <code>private</code> (without any access specifier, methods and fields are visible from within the package).</p>

<hr>

<p>General remarks:</p>

<ul>
<li><p>If you use names from a specification (which is good) then point out the spec in the documentation of the class - use <em>clear names</em> otherwise;</p></li>
<li><p>Generally we don't use static anything, especially not for values that will change. None of the static values are necessary (bar the one for the hex decoding, possibly).</p></li>
<li><p>If you have static bytes then don't decode them each time, either decode them once and assign them to a <code>private static final</code> constant / class field or assign them directly to the class field (using <code>{ (byte) 0x3B, (byte) 0x17, (byte) 0x35 }</code>).</p></li>
<li><p>Please group the various steps in logical groups and implement them using separate methods.</p></li>
</ul>
    </div>