<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Magic buffer sizes</h2>
<p>Consider making a <code>const</code> or <code>#define</code> for 256 and 65536.</p>
<h2>Const inputs</h2>
<pre><code>uint8_t * input
</code></pre>
<p>should be</p>
<pre><code>const uint8_t *input
</code></pre>
<p>since you don't (and shouldn't) change it.</p>
<h2>Loop combination</h2>
<p>This:</p>
<pre><code>for(size_t i = 0; i &lt; decompressed_length; i++)
    freq[input[i]]++;

for(uint16_t i = 0; i &lt; 256; i++)
    if(freq[i])
        encoded_bytes++;
</code></pre>
<p>does not need to be two loops. In the first loop, before incrementing <code>freq</code>, check if it's zero. If it is, you can increment <code>encoded_bytes</code>.</p>
<h2>Redundant <code>else</code></h2>
<p>Due to the <code>return</code>, this:</p>
<pre><code>if(!encoded_bytes) {
    return INPUT_ERROR;
} else
</code></pre>
<p>does not need an <code>else</code>.</p>
<h2>Consistent increment style</h2>
<p>You should pick a pre- or post-increment as your standard:</p>
<pre><code>    freq[input[i]]++;
    ++freq[i &gt; 0 ? i - 1 : i + 1];
</code></pre>
<h2>C standard</h2>
<p>You're definitely using features that require C99 or later, such as</p>
<pre><code>{{ .code = 0, .length = 0 }};
</code></pre>
<p>While this is good, you do not explicitly declare your <code>std</code> in your makefile. Unless you have a specific reason, it's quite safe to indicate <a href="https://gcc.gnu.org/onlinedocs/gcc/Standards.html" rel="nofollow noreferrer">C17</a>.</p>
<h2>In-expression assignment</h2>
<p>This:</p>
<pre><code>if(!(*output = calloc(HEADER_BASE_SIZE + header_byte_length + encoded_byte_length + 1, sizeof(uint8_t))))
</code></pre>
<p>should be avoided. Save everyone the headache and do it in two statements. I promise you that you will not see a performance difference.</p>
<h2>Temporary pointer</h2>
<p>Since you need this three times:</p>
<pre><code>((uint32_t *)(*output))[0] = decompressed_length;
((uint32_t *)(*output))[1] = encoded_byte_length;
((uint16_t *)(*output))[4] = header_bit_length;
</code></pre>
<p>make a temporary pointer to store <code>(uint32_t *)(*output)</code>. Better yet: make a structure to represent that header, and then rather than using indexing, just assign members.</p>
<h2>Ternary abuse</h2>
<pre><code>    encoded_length = encoded_length ? encoded_length : 16;
</code></pre>
<p>might as well be</p>
<pre><code>if (!encoded_length)
    encoded_length = 16;
</code></pre>
<h2>For loops</h2>
<pre><code>while(node_count &gt; 1) {
    // ...
    node_count--;
}
</code></pre>
<p>is, I find, more legible as</p>
<pre><code>for (; node_count &gt; 1; node_count--) {
</code></pre>
<h2>Internal functions</h2>
<p>You say that these are internal functions:</p>
<pre><code>/* Internal Decoding Functions */
/* Internal Encoding Functions */
</code></pre>
<p>So then why declare them in the header? If you declare them <code>static</code> and omit them from the header, the compiler will understand that they are not for export and may be able to do more optimization.</p>
<p>Similarly, is it necessary for your structures to have declarations in the header? It would enforce more loose coupling if you move your full definitions to the C file, particularly given that they are only used by internal functions.</p>
<h2>Make idempotence</h2>
<blockquote>
<p>you will need to create the directory obj/</p>
</blockquote>
<p>This can be avoided by making any compilation step depend on a rule that makes <code>obj</code>, in turn running <code>mkdir -p obj/</code>.</p>
    </div>