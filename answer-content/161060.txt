<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Performance:</strong></p>

<p>Drawing each cell per <code>context.fillRect()</code> is slow. A faster approach is to assign each cell a single pixel on the canvas and stretch the canvas to the desired size. In order to prevent blurring caused by interpolation, you need to set the canvas's <code>image-rendering</code> style as detailed <a href="https://stackoverflow.com/questions/7615009/disable-interpolation-when-scaling-a-canvas">here</a>. </p>

<p>Drawing a grid per <code>printGrid</code> is slow. A slightly faster and cleaner way to draw a grid is via:</p>

<pre><code>function drawGrid(ctx, width, height, dx, dy) {
  ctx.beginPath();
  for (let x = 0; x &lt;= width; x += dx) {
    ctx.moveTo(x, 0);
    ctx.lineTo(x, height);
  }
  for (let y = 0; y &lt;= height; y += dy) {
    ctx.moveTo(0, y);
    ctx.lineTo(width, y);
  }
  ctx.stroke();
}
</code></pre>

<p>Still, calling this function each frame is slow. A much faster approach is to draw the static grid only once at startup on a background canvas beneath your transparent original canvas. Alternatively, you can set your original canvas's <code>backgroundImage</code> style to mimic a grid.</p>

<p>Having to search through all cells in order to get the state at position x, y via <code>getState(g, x, y)</code> is slow. An alternative approach is to create a sparse hash map from coordinate to state, e.g. via <code>cells = {}; cell[x + y * width] = true;</code> for only the living cells. Such a data structure would improve performance on big worlds with sparse population. Alternatively, fill an array <code>cells = new Array(width * height)</code> with 0 or 1 depending on whether the cell is dead or alive. Such a data structure would guarantee equal performance no matter how densely or sparsely populated your world is.</p>

<p>Counting each cell's neighbors individually is slow. Neighboring pixel have many neighbors in common. By exploiting this, we can speed up the computation of the world's next state. We can iterate through cell rows and accumulate the neighbors for those cells in an accumulator array <code>acc</code>. We then update the previous cell row based on that accumulator.</p>

<p><strong>Globals:</strong></p>

<p>Your usage of a <code>globals</code> object doesn't really change the fact that <code>globals</code> are problematic. Part of your globals can be moved to the world's or game's configuration. Another part actually holds your world's or game's internal state. The references to DOM elements should be moved to the part of your code which handles the UI / output.</p>

<p>It is a good practice to separate your world model from its representation on the canvas. You can encapsulate the world state (cells, width, height) and the state change logic in its own module or class. A separate part of your program  then handles updating and drawing the model to your canvas.</p>

<p><strong>Exemplary code:</strong></p>

<p>This code features improvements and ideas suggested above:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class World {
  constructor(width, height) {
    this.width = width;
    this.height = height;
    this.cells = new Array(width * height);
    this.acc = new Array(3 * width);
  }
  randomize(density = 0.5) {
    let cells = this.cells,
        random = Math.random;
    
    for (let i = 0, length = cells.length; i &lt; length; ++i) {
      cells[i] = random() + density | 0;
    }
  }
  clear() {
    let cells = this.cells;
    
    for (let i = 0, length = cells.length; i &lt; length; ++i) {
      cells[i] = 0;
    }
  }
  step() {
    let cells = this.cells,
        height = this.height,
        width = this.width,
        acc = this.acc,
        accLength = acc.length;

    // Initialize first two accumulator rows with zero:
    for (let x = 0; x &lt; width + width; ++x) {
      acc[x] = 0;
    }

    // Initialize third accumulator row with top cell row:
    acc[width + width] = cells[0] + cells[1];
    acc[width + width + width - 1] = cells[width - 2] + cells[width - 1];
    for (let x = 1; x &lt; width - 1; ++x) {
      let sum = cells[x] + cells[x - 1] + cells[x + 1];
      acc[x + width + width] = sum;
    }

    // Iterate up to the second last cell row:
    for (let y = 0, end = height * width - width; y &lt; end; y += width) {

      // Update accumulator rows:
      acc[y % accLength] = cells[y + width] + cells[1 + y + width];
      acc[(width - 1 + y) % accLength] = cells[width - 2 + y + width] + cells[width - 1 + y + width];
      for (let x = 1; x &lt; width - 1; ++x) {
        let i = x + y + width;
        acc[(x + y) % accLength] = cells[i] + cells[i - 1] + cells[i + 1];
      }

      // Update cells:
      for (let x = 0; x &lt; width; ++x) {
        let sum = acc[x] + acc[x + width] + acc[x + width + width] - cells[x + y];
        if (sum == 3) cells[x + y] = 1;
        else if (sum != 2) cells[x + y] = 0;
      }
    }

    // Update last cell row:
    let y = height * width - width;
    for (let x = 0; x &lt; width; ++x) {
      let sum = acc[(x + y - width) % accLength] + acc[(x + y) % accLength] - cells[x + y];
      if (sum == 3) cells[x + y] = 1;
      else if (sum != 2) cells[x + y] = 0;
    }
  }
}

class Game {
  constructor(canvas, size = 10) {
    this.canvas = canvas;
    this.context = canvas.getContext("2d");
    this.initialize(size);
    this.interval = undefined;
  }
  initialize(size) {
    let cellSize = this.canvas.clientWidth / size;

    this.world = new World(size, size);
    this.world.randomize();
    
    this.canvas.width = size;
    this.canvas.height = size;
    this.canvas.style.backgroundImage = "repeating-linear-gradient(0deg, #cbb, transparent " + cellSize + "px),repeating-linear-gradient(-90deg, #cbb, transparent " + cellSize + "px)";
    
    this.draw(this.context);
  }
  update() {
    this.world.step();
    this.draw(this.context);
  }
  start(speed = 25) {
    clearInterval(this.interval);
    this.interval = setInterval(this.update.bind(this), speed);
  }
  stop() {
    clearInterval(this.interval);
    this.interval = undefined;
  }
  running() {
    return !!this.interval;
  }
  draw(context) {
    let imageData = context.getImageData(0, 0, this.world.width, this.world.height),
        data = imageData.data,
        cells = this.world.cells;
    
    for (let i = 0, length = data.length; i &lt; length; i += 4) {
      if (cells[i &gt;&gt; 2]) {
        data[i    ] = 0;
        data[i + 1] = 0;
        data[i + 2] = 0;
        data[i + 3] = 200;
      } else {
        data[i + 3] = 0;
      }
    }
    context.putImageData(imageData, 0, 0);
  }
}

let canvas = document.getElementById('canvas'),
    game = new Game(canvas),
    startBtn = document.getElementById("btn-start"),
    generateBtn = document.getElementById("btn-generate"),
    sizeBtn = document.getElementById("btn-size");

startBtn.addEventListener("click", function(event) {
  if (game.running()) {
    game.stop();
    startBtn.textContent = "Start";
  } else {
    game.start();
    startBtn.textContent = "Stop";
  }
});

generateBtn.addEventListener("click", function(event) {
  game.initialize(+sizeBtn.value);
});

sizeBtn.addEventListener("change", function(event) {
  game.initialize(+sizeBtn.value);
});

game.initialize(+sizeBtn.value);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>#stage {
  position: relative;
  width: 300px;
  height: 300px;
}

#stage canvas {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  image-rendering: optimizeSpeed;
  image-rendering: -moz-crisp-edges;
  image-rendering: -webkit-optimize-contrast;
  image-rendering: -o-crisp-edges;
  image-rendering: pixelated;
  -ms-interpolation-mode: nearest-neighbor;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="stage"&gt;
  &lt;canvas id="canvas"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;button id="btn-generate"&gt;Generate&lt;/button&gt;
&lt;button id="btn-start"&gt;Start&lt;/button&gt;
&lt;select id="btn-size"&gt;
  &lt;option value="10"&gt;10 x 10&lt;/option&gt;
  &lt;option value="50" selected&gt;50 x 50&lt;/option&gt;
  &lt;option value="100"&gt;100 x 100&lt;/option&gt;
  &lt;option value="300"&gt;300 x 300&lt;/option&gt;
&lt;/select&gt;</code></pre>
</div>
</div>

    </div>