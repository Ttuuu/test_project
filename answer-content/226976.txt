<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>TL;DR:</h2>

<p>Despite this being the currently accepted &amp; highest voted answer, these methods from this <a href="https://codereview.stackexchange.com/a/226974/100620">answer</a> and variations (<a href="https://codereview.stackexchange.com/a/227026/100620">1</a>, <a href="https://codereview.stackexchange.com/questions/226970/printing-a-list-as-a-b-c-using-python/226976#comment441720_226976">2</a>) of it:</p>

<pre><code>print(", ".join(flavours) + ".")         # Peilonrayz
print(", ".join(flavours), end=".\n")    # Maarten Fabr√©
print(f'{", ".join(flavors)}.')          # Andy
</code></pre>

<p>are all faster than the solution originally proposed in this answer:</p>

<pre><code>print(*flavours, sep=', ', end='.\n')
</code></pre>

<hr>

<h2>Original Answer, Plus Explanation &amp; Timing Analysis:</h2>

<p>Consider also:</p>

<pre><code>flavours = ['chocolate', 'vanilla', 'caramel', 'strawberry', 'coffee']
print(*flavours, sep=', ', end='.\n')
</code></pre>

<p>This does not perform any unnecessary string concatenation, nor does it require a loop variable to test for the final index. </p>

<hr>

<p>How does this work?</p>

<p>The print function takes a variable number of arguments, and so would be defined something like:</p>

<pre><code>def print(*args, sep=' ', end='\n', file=sys.stdout, flush=False):
    # ...
</code></pre>

<p>except it is a built-in function.</p>

<p>The <code>*args</code> parameter consumes all of the unnamed arguments into one list for processing by the function, allowing the function to take a variable number of arguments.</p>

<p>In the statement,</p>

<pre><code>print(*flavours, sep=', ', end='.\n')
</code></pre>

<p>The "splat operator" (<code>*</code>) takes the iterable <code>flavours</code> and expands it into a list of arguments for the function, allowing the caller to pass a variable number of arguments to a function, taken from the contents of a container (list, tuple, etc).</p>

<p>The Python interpreter <em>could</em> match the <code>*flavours</code> splat operator with the <code>*args</code> variable argument list of the print function, and simply pass the <code>flavours</code> list into the <code>args</code>.</p>

<p>But does it?  I got worried.  Perhaps, because a list is given, and the variable argument list (in <code>CPython</code>) is passed as a tuple, the list actually must be copied.  How much time does it take.</p>

<p>After creating a <code>class Null</code> output stream, to speed up the printing, I began passing variable sized lists to the various answers, and profiling the results.  While my solution is one of the least amounts of code, it turns out that @Peilonrayz's solution of <code>", ".join(flavours)</code> seems to be the fastest.</p>

<p><a href="https://i.stack.imgur.com/6iQKb.png" rel="noreferrer"><img src="https://i.stack.imgur.com/6iQKb.png" alt="profile results"></a></p>

<p>Using tuples or lists doesn't seem to affect the performance much, so any thought that splatting a <code>tuple</code> instead of a <code>list</code>, to be collected into a <code>*args</code> variable argument <code>tuple</code> may be optimized to a no-op, seems to have been squashed.</p>

<hr>

<p>Since <code>print</code> will automatically convert objects to strings for printing, the above will work for all object types in a list.  The <code>", ".join(flavours)</code> will only work for strings; it would have to be modified to convert non-strings to strings to be truly equivalent:</p>

<pre><code>print(", ".join(map(str, flavours)) + ".")
</code></pre>
    </div>