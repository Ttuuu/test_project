<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Advice  1: code packaging</strong></p>

<p>I suggest you put your <code>Thing</code> related code into a package. That way you may practice industrial level programming:</p>

<pre><code>package net.tnm;
</code></pre>

<p>Note that the above package name is just an example. Usually, is should be reversed domain name of your company. (For example, <code>package com.oracle.xxx</code> where <code>xxx</code> is the project name.)</p>

<p><strong>Advice 2: code layout</strong>
You have this:</p>

<pre><code>private int a = r.nextInt(), b = r.nextInt(), c = r.nextInt();
</code></pre>

<p>I would suggest</p>

<pre><code>private final int a = r.nextInt(), 
                  b = r.nextInt(), 
                  c = r.nextInt();
</code></pre>

<p><strong>Advice 3: declaring immutable fields final</strong></p>

<p>Once again:</p>

<pre><code>private final int a = r.nextInt(), 
                  b = r.nextInt(), 
                  c = r.nextInt();
</code></pre>

<p><strong>Advice 4: spaces around binary operators</strong></p>

<p>A <em>binary operator</em> is an operator that that takes <strong>two</strong> operands. You often write, for example, <code>y=0</code>, when the coding conventions dictate <code>y = 0</code>.</p>

<p><strong>Advice 5: bracing</strong></p>

<p>You have <code>
        for (int x =0;x&lt;10;x++){</code></p>

<p>when you should write </p>

<pre><code>    for (int x =0;x&lt;10;x++) {
                           ^
                         space
</code></pre>

<p>Also,</p>

<pre><code>for (int y=0;y&lt;things[x].getCollectionOfInts().length;y++)
{
</code></pre>

<p>is C/C++ style. In Java, it is customary to write </p>

<pre><code>for (int y=0;y&lt;things[x].getCollectionOfInts().length;y++) { 
</code></pre>

<p><strong>Advice 6: lambdas</strong></p>

<pre><code>Stream.of(things).forEach(Thing-&gt;System...
</code></pre>

<p>Since <code>Thing</code> is a variable in that context and not a type, I would rename it to <code>thing</code>.</p>

<p><strong>Advice 7: max of three</strong></p>

<p>You have this:</p>

<pre><code>z -&gt; z[0] &gt; z[1] &amp;&amp; z[0] &gt; z[2] ? z[0] : z[1] &gt; z[2] ? z[1] : z[2]
</code></pre>

<p>A shorter way of writing the same is </p>

<pre><code>z -&gt; Math.max(z[0], Math.max(z[1], z[2]))
</code></pre>

<p><strong>Advice 8: maxInt</strong></p>

<p>You can write it as </p>

<pre><code>public static int maxInt(int[] x) {
    int max = Integer.MIN_VALUE;

    for (int i : x) {
        max = Math.max(max, i);
    }

    return max;
}
</code></pre>

<p><strong>Advice 9: redundant <code>if</code> statements</strong></p>

<pre><code>if(y==0)
    a = things[x].getCollectionOfInts()[y];
if(y==1)
    b = things[x].getCollectionOfInts()[y];
if(y==2)
    c = things[x].getCollectionOfInts()[y];
</code></pre>

<p>Only one of those <code>if</code> statements will be executed yet all the condition will be checked. Basically, you can do this:</p>

<pre><code>if (y == 0) { 
    a = ...
} else if (y == 1) {
    b = ...
} else {
    c = ...
}
</code></pre>

<p><strong>Advice 10: naked <code>if</code> statements</strong></p>

<p>Once again, you have</p>

<pre><code>if (y==0)
    a = things[x].getCollectionOfInts()[y];
</code></pre>

<p>More idiomatic Java is this:</p>

<pre><code>if (y == 0) {
    a = ...
}
</code></pre>

<p>(Note the braces.)</p>

<p><strong>Summa summarum</strong></p>

<p>I had this in mind:</p>

<p><strong>Thing.java</strong></p>

<pre><code>package net.tnm;

import java.util.Random;

public class Thing {

    private final Random r = new Random();
    private final int a = r.nextInt(), 
                      b = r.nextInt(), 
                      c = r.nextInt();

    private int[] collectionOfInts = new int[]{a, b, c};

    public int[] getCollectionOfInts() {
        return collectionOfInts;
    }
}
</code></pre>

<p><strong>Driver.java</strong></p>

<pre><code>package net.tnm;

import java.util.stream.Stream;

public class Driver {

    public static void main(String[] args) {
        Thing[] things = new Thing[10];
        int a = 0, b = 0, c = 0;

        for (int x = 0; x &lt; 10; x++) {
            things[x] = new Thing();

            for (int y = 0; y &lt; things[x].getCollectionOfInts().length; y++) {
                switch (y) {
                    case 0:
                        a = things[x].getCollectionOfInts()[0];
                        break;

                    case 1:
                        b = things[x].getCollectionOfInts()[1];
                        break;

                    case 2:
                        c = things[x].getCollectionOfInts()[2];
                        break;
                }
            }

            //print 3 numbers in each Thing object
            System.out.println(x + ": " + a + ", " + b + ", " + c);
        }

        System.out.println();

        Stream.of(things)
              .forEach(thing -&gt; System.out.println(
                        Stream.of(thing.getCollectionOfInts())
                            .mapToInt(z -&gt; Math.max(z[0], Math.max(z[1], z[2])))
                            .reduce((x, y) -&gt; x + y)
                            .getAsInt()
                       )
              );

        System.out.println();

        Stream.of(things)
              .forEach(thing -&gt; System.out.println(
                      Stream.of(thing.getCollectionOfInts())
                            .mapToInt(x -&gt; maxInt(x))
                            .max()
                            .getAsInt()));

    }

    public static int maxInt(int[] x) {
        int max = Integer.MIN_VALUE;

        for (int i : x) {
            max = Math.max(max, i);
        }

        return max;
    }
}
</code></pre>
    </div>