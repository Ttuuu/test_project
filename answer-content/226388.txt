<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Docstrings</h1>

<p>You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>docstring</code></a> at the beginning of every method, class, and module you write. It allows anyone to view how to use and implement your method, using <code>your_function_name.__doc__</code> or <code>help(your_function_name)</code>.</p>

<h1>Class Naming</h1>

<p><a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">PEP-8 Compliance</a> requires that all class names should use the CapWords convention. In your case, since <code>Chromosome</code> is one word, it should be capitalized.</p>

<h1>Reserved Keywords</h1>

<p>You have an init header like so:</p>

<pre><code>def __init__(self, genes, id=None, fitness=-1, flatten= False, lengths=None):
    ...
</code></pre>

<p>It is suggested <strong><em>not</em></strong> to use a variable/parameter name <code>id</code>, or any other reserved keywords. This can cause collision and other issues in your program. As a quick fix, I renamed it <code>id_</code>, but you can rename it to something more meaningful/easier to understand.</p>

<h1>Unused Arguments</h1>

<p>You have two method headers like so:</p>

<pre><code>def __init__(self, genes, id=None, fitness=-1, flatten= False, lengths=None):
    ...
def CX(pop, pop_size, selection_method, pc):
    ...
</code></pre>

<p>You only use four (technically three, since <code>self</code> is required in class methods) in the <code>__init__</code> method, and one in the <code>CX</code> method. If you finish writing a program/method, and see that some parameters you take in aren't used, remove them. This can prevent confusion later on when you decide to take another look at your code and try to find the significance of the parameters you don't use.</p>

<h1>Parameter Spacing</h1>

<p>When writing default passed/accepting parameters, there should not be a space between the variable, the <code>=</code>, and the value. So, <code>flatten= False</code> is not okay, but <code>flatten=False</code> is okay. You can look at the updated code, as I fixed every occurrence of this.</p>

<h1>Variable/Operator Spacing</h1>

<p>On the contrary, when using variables and operators, there <em>should</em> be a space. This allows for better readability. This also accounts for lists. Seeing <code>[8,4,7,3,6,2,5,1,9,0]</code>, at least to me, is hard to read. Everything is clumped together. But <code>[8, 4, 7, 3, 6, 2, 5, 1, 9, 0]</code> is easier to read and comprehend. Everything is spaced out, and the numbers jump out at you more.</p>

<h1>Main Guard</h1>

<p>You have this code lying outside your class/methods:</p>

<pre><code>cross = CX(20, 10,"tour",1)
print("\nChilds")
print("=================================================")
for i in range(len(cross)):
    chromosome.describe(cross[i])
</code></pre>

<p>Wrapping this in a <code>if __name__ == '__main__':</code> guard is a good idea. Having a main guard clause in a module allows you to both run code in the module directly and also use procedures and classes in the module from other modules. Without the main guard clause, the code to start your script would get run when the module is imported. <a href="https://stackoverflow.com/a/19578335/8968906">[source]</a></p>

<p>So your new code should look like this:</p>

<pre><code>if __name__ == '__main__':

    CROSS = cycle_crossover(1)
    print("\nChildren")
    print("=================================================")
    for index, _ in enumerate(CROSS):
        Chromosome.describe(CROSS[index])
</code></pre>

<p><em>Notice how I use <code>enumerate()</code> vs <code>range(len())</code>. I explain this change later.</em></p>

<h1>Boolean Comparison</h1>

<pre><code>if swap==True:
    ...
elif swap==False:
    ...
</code></pre>

<p>This is unnecessary. You can use the variable <code>swap</code> as the value itself. You can check the value of <code>swap</code> itself to see if it's <code>True</code> or <code>False</code>, instead of comparing it to the boolean, like so:</p>

<pre><code>if swap:
    ...
else:
    ...
</code></pre>

<p>Also, the second <code>swap==False</code> check is unnecessary. If it doesn't pass the first check of being <code>True</code>, then it has to be <code>False</code>. So only an <code>else</code> is necessary here.</p>

<h1>String Formatting f""</h1>

<p>This one is my opinion. I like to use <code>f"..."</code> to format my strings. It allows me to directly implement the variables into the string, without having to call the <code>format</code> method on it. I left both versions in the updated code, just comment out the one you don't like.</p>

<h1>Meaningful Method Naming</h1>

<p><code>CX</code>. What do you think of when you first see this? To someone reading your code for the first time, they would have no idea what this method is supposed to do. Methods should have meaningful names, so someone can get the general idea about that method by just looking at the name.</p>

<h1>Variable Naming</h1>

<p>You have variables like <code>p1</code>, <code>p2</code>, <code>c1</code>, <code>c2</code>, etc. My initial thoughts were that <code>p1</code> and <code>p2</code> were population one and two, since the parameters in the method were <code>pop</code> and <code>pop_size</code>. It wasn't until I saw the comment that was <code>c1</code> and <code>c2</code> were <em>children</em> that I realized <code>p1</code> and <code>p2</code> were <em>parents</em>. You should provide more meaningful variable names to avoid this confusion. Also, variable names should be <code>snake_case</code>.</p>

<h1>enumerate() vs range(len())</h1>

<p>Consider using <code>enumerate</code> vs <code>range(len(...))</code>. I would use <code>enumerate</code> as it's more generic - eg it will work on iterables and sequences, and the overhead for just returning a reference to an object isn't that big a deal - while range(len(...)) although (to me) more easily readable as your intent - will break on objects with no support for <code>len</code>.</p>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring:
A description of your program goes here
"""

from copy import deepcopy
import numpy as np

class Chromosome():
    """
    Description of class `Chromosome` goes here
    """
    def __init__(self, genes, id_=None, fitness=-1):
        self.id_ = id_
        self.genes = genes
        self.fitness = fitness

    def describe(self):
        """
        Prints the ID, fitness, and genes
        """
        #print('ID=#{}, fitenss={}, \ngenes=\n{}'.format(self.id, self.fitness, self.genes))
        print(f"ID=#{self.id_}, Fitness={self.fitness}, \nGenes=\n{self.genes}")

    def get_chrom_length(self):
        """
        Returns the length of `self.genes`
        """
        return len(self.genes)

def cycle_crossover(pc):
    """
    This function takes two parents, and performs Cycle crossover on them. 
    pc: The probability of crossover (control parameter)
    """
    parent_one = Chromosome(genes=np.array([8, 4, 7, 3, 6, 2, 5, 1, 9, 0]), id_=0, fitness=125.2)
    parent_two = Chromosome(genes=np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), id_=1, fitness=125.2)
    chrom_length = Chromosome.get_chrom_length(parent_one)
    print("\nParents")
    print("=================================================")
    Chromosome.describe(parent_one)
    Chromosome.describe(parent_two)
    child_one = Chromosome(genes=np.array([-1] * chrom_length), id_=0, fitness=125.2)
    child_two = Chromosome(genes=np.array([-1] * chrom_length), id_=1, fitness=125.2)

    if np.random.random() &lt; pc:  # if pc is greater than random number
        p1_copy = parent_one.genes.tolist()
        p2_copy = parent_two.genes.tolist()
        swap = True
        count = 0
        pos = 0

        while True:
            if count &gt; chrom_length:
                break
            for i in range(chrom_length):
                if child_one.genes[i] == -1:
                    pos = i
                    break

            if swap:
                while True:
                    child_one.genes[pos] = parent_one.genes[pos]
                    count += 1
                    pos = parent_two.genes.tolist().index(parent_one.genes[pos])
                    if p1_copy[pos] == -1:
                        swap = False
                        break
                    p1_copy[pos] = -1
            else:
                while True:
                    child_one.genes[pos] = parent_two.genes[pos]
                    count += 1
                    pos = parent_one.genes.tolist().index(parent_two.genes[pos])
                    if p2_copy[pos] == -1:
                        swap = True
                        break
                    p2_copy[pos] = -1

        for i in range(chrom_length): #for the second child
            if child_one.genes[i] == parent_one.genes[i]:
                child_two.genes[i] = parent_two.genes[i]
            else:
                child_two.genes[i] = parent_one.genes[i]

        for i in range(chrom_length): #Special mode
            if child_one.genes[i] == -1:
                if p1_copy[i] == -1: #it means that the ith gene from p1 has been already transfered
                    child_one.genes[i] = parent_two.genes[i]
                else:
                    child_one.genes[i] = parent_one.genes[i]

    else:  # if pc is less than random number then don't make any change
        child_one = deepcopy(parent_one)
        child_two = deepcopy(parent_two)
    return child_one, child_two

if __name__ == '__main__':

    CROSS = cycle_crossover(1)
    print("\nChildren")
    print("=================================================")
    for index, _ in enumerate(CROSS):
        Chromosome.describe(CROSS[index])
</code></pre>
    </div>