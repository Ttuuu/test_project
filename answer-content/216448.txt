<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>IMO I'd join all of your tests into one. <a href="https://stackoverflow.com/a/9948241">And just rotate through them</a>.</p>

<pre><code>private static void Rotate&lt;T&gt;(List&lt;T&gt; list) {
    T first = list[0];
    list.RemoveAt(0);
    list.Add(first);
}

[Test]
public void TestOnePairs()
{
    List&lt;SuperCard&gt; testHand = new List&lt;SuperCard&gt; {
        new CardClub(Rank.Ace),
        new CardSpade(Rank.Ace),
        new CardDiamond(Rank.Two),
        new CardHeart(Rank.Three),
        new CardClub(Rank.Four)
    };

    for (let i=0; i &lt; 5; i++) {
        Assert.That(PokerHandEvaluator.OnePair(testHand.ToArray()));
        Rotate(testHand);
    }
}
</code></pre>

<p>If this were Python I'd suggest changing <code>List&lt;SuperCard&gt;</code> to <code>List&lt;Tuple&lt;Suit, Rank&gt;&gt;</code>. However IIRC C# doesn't like Tuples too much. And so you may want to make them <code>List&lt;Card&gt;</code>, but pass both of the enums to the card at instantiation.</p>

<hr>

<p>I should note that this doesn't test all combinations that the pairs can be. And so you should really use something like Pythons <a href="https://docs.python.org/3.7/library/itertools.html" rel="nofollow noreferrer"><code>itertools.combinations</code></a>.</p>

<p>This is as the following pseudocode of OnePair would be incorrect, but would pass your tests.</p>

<pre class="lang-python prettyprint-override"><code>def OnePair(values):
    prev = values[-1]
    for curr in values:
        if curr.rank == prev.rank:
            return True
        prev = curr
    return False
</code></pre>
    </div>