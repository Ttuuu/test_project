<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Omit <code>return 0</code></h2>

<p>When a C++ program reaches the end of <code>main</code> the compiler will automatically generate code to return 0, so there is no reason to put <code>return 0;</code> explicitly at the end of <code>main</code>.</p>

<h2>Make sure the comments don't mislead</h2>

<p>The code currently includes this comment and function:</p>

<pre><code>// inserting at the beggining
void push( Node **head, int data ) {
</code></pre>

<p>However, that comment is false (and spelled incorrectly).  In fact, the data is appended to the <em>end</em> of the linked list.  For that reason, I'd suggest changing the name to <code>append</code>.</p>

<h2>Use <code>nullptr</code> rather than <code>NULL</code></h2>

<p>Modern C++ uses <code>nullptr</code> rather than <code>NULL</code>.  See <a href="http://stackoverflow.com/questions/1282295/what-exactly-is-nullptr/1283623#1283623">this answer</a> for why and how it's useful.  </p>

<h2>Return something useful from functions</h2>

<p>It is not very useful to have every function return <code>void</code>.  Instead, I'd suggest that <code>push</code> (now renamed to <code>append</code> per previous suggestion) could return a pointer to the head of the list.  Here's one way to write that:</p>

<pre><code>// append data to end of linked list
Node* append(Node *head, int data) {
    auto newNode = new Node{data, nullptr};
    if (head == nullptr) {
        return newNode;
    }
    auto temp{head};
    while (temp-&gt;next) {
         temp = temp-&gt;next; 
    }
    temp-&gt;next = newNode;
    return head;
}
</code></pre>

<h2>Don't leak memory</h2>

<p>This code calls <code>new</code> but never <code>delete</code>.  This means that the routines are leaking memory. It would be much better to get into the habit of using <code>delete</code> for each call to <code>new</code> and then assuring that you don't leak memory. </p>

<h2>Use objects</h2>

<p>The <code>Node</code> object is a decent start, but I'd recommend and actual linked list object to better take care of memory management and node initialization.</p>

<h2>Sanitize user input</h2>

<p>If the user enters a negative number or a number that's larger than the array, or numbers that are not in the right order, bad things happen in the current program.  In general, it's better to be very wary of user input and test for and handle any bad input.</p>

<h2>Fix the bug</h2>

<p>If the subsequence includes the first node, the output is incorrect.  That's a bug.</p>

<h2>Rethink the problem</h2>

<p>There are two essential parts to the algorithm.  First, we identify the subsequence and then we do the rotation.  With some thought, you can figure out either 0 or 3 <code>next</code> links will need to be changed.  We can immediately understand that if <span class="math-container">\$n - m + 1 = k \mod (n-m+1)\$</span> then no links need to change and we're done.  Otherwise 3 links need to change.  Let's number each of the nodes, starting from 1.  So the first node is <span class="math-container">\$N[1]\$</span>, and the second is <span class="math-container">\$N[2]\$</span>, etc.</p>

<ul>
<li>Now the first node that needs to be altered is <span class="math-container">\$N[m-1]\$</span>.  It needs to point to <span class="math-container">\$N[m + k]\$</span>.</li>
<li>Next <span class="math-container">\$N[n]\$</span> (the last node of the subset) points to <span class="math-container">\$N[m]\$</span> (the first of the subset).</li>
<li>Then <span class="math-container">\$N[m + k - 1]\$</span> must point to <span class="math-container">\$N[n+1]\$</span></li>
</ul>

<p>With that in mind, it should be apparent that only a <em>single pass</em> through the data structure is needed with only two temporary pointers.  I'll leave it to you to write the code for that.</p>
    </div>