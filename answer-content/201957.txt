<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Pass parameters by <code>const &amp;</code></strong></p>

<p>In <code>print_list</code> and your <code>Graph</code> constructor, you pass in the parameters by value.  This will make unnecessary copies of the vectors.  Passing in the values by const reference will avoid making these copies.</p>

<p><strong>Make use of the <code>auto</code> keyword or range-based for loops</strong></p>

<p>You have several places with a long type name to get the type to use for an iterator.  These would be great spots to make use of the <code>auto</code> keyword.  For example, <code>auto it = l.cbegin()</code>.</p>

<p>However, in these cases, you can do better.  You can use the range-based for statement instead.</p>

<p>Combining these for the <code>print_list</code> function gives us</p>

<pre><code>template&lt;typename T&gt;
void print_list(const std::list&lt;T&gt; &amp;l)
{
    for (auto v: l)
        std::cout &lt;&lt; v &lt;&lt; '\t';
    std::cout &lt;&lt; std::endl;
}
</code></pre>

<p>Similar changes can be made to your <code>Graph</code> constructor and <code>print_adj_list</code>.</p>

<p>You can also pass the pair to <code>add_edge</code> by const reference, although with the small types you're using that won't really gain much.</p>

<p><code>add_edge</code> assumes that all your edges are bidirectional.  Some adjacency lists have edges that only go in one direction.</p>

<p>Do you need that <code>cout</code> in <code>size</code>?  All it is really doing is telling you that the function has been called.</p>

<p>You should be able to call <code>print_list</code> without having to specify the type.  The compiler should be able to deduce the template type to use.</p>
    </div>