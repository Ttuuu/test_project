<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>

<p>Your main issue is memory management.</p>

<p>You did not implement the "Rule of Three" (you can google it).</p>

<p>The problem is that if you do not define the copy constructor or the assignment operator the compiler will generate these methods for you automatically. Under most conditions these generated methods work correctly. <strong>BUT</strong> when your class contains an "Owned" pointer they do not work.</p>

<p>Note: An "Owned" pointer is a pointer you are responsible for deleting.</p>

<pre><code>{
    stack&lt;int&gt;   x;
    x.push(12);


    stack&lt;int&gt;   y(x);  // Copy constructor used.
                        // The default implementation does a shallow copy
                        // of each member from x into y.
                        // This means that x and y point at the same list.

}
// Here your destructor has destroyed the same list twice.
// This is a bug.
</code></pre>

<p>To fix this you need to define the copy constructor and assignment operator. But there is a nice pattern that allows you to define the assignment operator in terms of the copy constructor. Look up the "Copy And Swap Idiom".</p>

<p>You need to add the following to your class:</p>

<pre><code>class stack
{
    // Stuff
    public:
        stack(stack const&amp; rhs)
            : head(copyList(rhs.head))
            , size(rhs.size)
            , max(rhs.size)
        {}
        stack&amp; operator=(stack const&amp; rhs)
        {
            stack tmp(rhs);            // make a copy using copy constructor.
            swap(tmp);                 // swap the tmp and this object
            return *this;
        }
        void swap(stack&amp; other) noexcept
        {
            using std::swap;
            swap(head, other.head);
            swap(size, other.size);
            swap(max,  other.max);
        }

    private:
        node* copyList(node* l)
        {
            if (l == nullptr) {
                return null;
            }
            return new node{l-&gt;data, copyList(l-&gt;previous)};
        }
    // STUFF
};
</code></pre>

<p>Your <code>pop()</code> has a bug. You delete the <strong>NEW</strong> head item before returning but leak the original head item.</p>

<pre><code>T pop() {
    if (head == nullptr) throw std::underflow_error("cannot get item from empty stack");

    T item = head-&gt;data;
    head = head-&gt;previous;     // You just leaked the old head.
                               // You need to keep a pointer to the old head

    --size;

    delete head;               // So you can delete the old head here.
    return item;
}
</code></pre>

<h2>Other Stuff</h2>

<h3>Design of <code>pop()</code></h3>

<p>You make your <code>pop()</code> method return the top value and remove it from the stack. This is fine if your <code>T</code> type is simple. But if <code>T</code> is a complex type there is no way to do this safely (and maintain "Strong Exception Guarantee"). So most implementations of stack split this into two separate functions. A <code>top()</code> that returns the top value and a <code>pop()</code> that simply removes the top value.</p>

<p>So I would rewrite this:</p>

<pre><code>void pop() {
    if (head == nullptr) throw std::underflow_error("cannot get item from empty stack");

    node* old = head;
    head = head-&gt;previous;

    --size;
    delete old;
}
T const&amp; top() {
    if (head == nullptr) throw std::underflow_error("cannot get item from empty stack");

    return head-&gt;data;
}
</code></pre>

<h3>Return by reference</h3>

<p>Your <code>pop()</code> and <code>peek()</code> return the result by value. This is OK for simple types of <code>T</code> (like integer). But if <code>T</code> is a complex object you are making a copy of this complex object. Instead you should return a reference to the object. If the user is doing somehting simple they can do the action without copying if they want to keep a copy they can make that decision and save the value in a local variable.</p>

<pre><code>T peek()

// Change to:

T const&amp; peek();   // Don't really need this if you have top()
                   // Or you could use peek instead of top()
</code></pre>

<p>But notice the <code>const&amp;</code> as the return type. You are returning a reference to the object so no copy is made. If you need a local copy then you can save it like this:</p>

<pre><code>int   val = x.top();
x.pop();
</code></pre>
    </div>