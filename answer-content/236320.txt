<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Questions</h1>

<ol>
<li><p><code>self</code> is the instance of whatever class the method is defined on.
In your example the method is <code>generate_new_salt</code> which is defined on the <code>Hashing</code> class.</p>

<p>When you use <code>my_hashing = Hashing()</code> you're creating an instance and binding it to the variable <code>my_hashing</code>. When you then call the method, via something like <code>my_hashing.generate_new_salt(...)</code> then <code>self</code> is the same as <code>my_hashing</code>. They both point to the same instance of <code>Hashing</code>.</p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; class Foo:
        def comp(self):
            return my_foo == self


&gt;&gt;&gt; my_foo = Foo()
&gt;&gt;&gt; my_foo.comp()
True
</code></pre>

<p>This means that <code>self.foo = ...</code> binds <code>...</code> to the instance. This allows you to then use <code>self.foo</code> to get the value, <code>...</code>, back at a later date. Without having to pass it as an argument. If you have no reason to use <code>self.foo</code> rather than just <code>foo</code>, then using <code>self.foo</code> is not a good idea.</p></li>
<li><p>This comes from two different but linked things.</p>

<ul>
<li><p>You're trying to be <em>too helpful</em>. A lot of your code is not doing much, and is just calling other functions.</p>

<p>This is a common problem when programming, and so I would recommend you follow the <a href="https://en.wikipedia.org/wiki/KISS_principle" rel="noreferrer">KISS principle</a>. If you don't need the helper now, then you don't need it at all.</p></li>
<li><p>You're not really using objects to their potential. If you wrap all of your methods in <code>staticmethod</code> decorators then nothing will change. This highlights that you're not really following OOP. And it highlights you're barely using the features <code>class</code> provides.</p></li>
</ul></li>
</ol>

<p>Given the above points, it would be best to start over.</p>

<h1>Review</h1>

<ul>
<li><p>It's normally recommended to not use <code>print</code>. There are exceptions, but in most cases you're better served either by just not having <code>print</code> or using <code>logging</code>.</p>

<p>There is one exception, which is to interact with the user via the CLI. And in this case <code>Hashing</code> does not need to do that. Where you're testing needs it and so you should only have them below that comment "code below is just for testing".</p></li>
<li><p>Inheriting from object, <code>Hashing(object)</code>, is redundant in Python 3.</p></li>
<li><p>Rather than using an <code>if</code> to compare something and then <code>return</code> <code>True</code> and <code>False</code>. You can just return the comparison.</p>

<pre class="lang-py prettyprint-override"><code>return re_hash.decode() == old_hash.decode()
</code></pre></li>
<li><p>It would be best if the code below the comment "code below is just for testing" were in a function. This would mean that the global namespace isn't polluted with things that don't need to be there.</p></li>
<li>It's best to use an <code>if __name__ == '__main__':</code> guard. Since you only run the main function if you're testing, this will allow you to import the code without the testing code running.</li>
</ul>

<h1>From the ground up</h1>

<ol>
<li><p>Merging both the hash and the salt into the encoding, "base64(hash + salt)", is a smart way to keep the hash and the salt together. However it would be clearer if you create a class that stores the hash and the salt independently.</p>

<pre class="lang-py prettyprint-override"><code>class PasswordHash:
    def __init__(self, hash, salt):
        self.hash = hash
        self.salt = salt

ph = PasswordHash(b'hash', b'salt')
print(ph.hash)  # b'hash'
print(ph.salt)  # b'salt'
</code></pre>

<p>From here you should be able to see two things:</p>

<ul>
<li>The method <code>get_old_salt</code> is now obsolete.</li>
<li>You no longer need to care about the salt length.</li>
</ul></li>
<li><p>When you first define a class, after writing the <code>__init__</code>, you should ask yourself if the class will ever be printed. If it could be printed, then you should make at least one of these dunder methods, <a href="https://docs.python.org/3/glossary.html#term-special-method" rel="noreferrer">double underscore method</a>.</p>

<ul>
<li><code>__repr__</code> - Instructions on how to rebuild the method.</li>
<li><code>__str__</code> - A human friendly interpretation of the class.</li>
</ul>

<p>In this case <code>__repr__</code> could make sense, but <code>__str__</code> doesn't.</p>

<pre class="lang-py prettyprint-override"><code>def __repr__(self):
    return f'PasswordHash({self.hash}, {self.salt})'
</code></pre>

<p>You should be able to see, <code>__repr__</code> outputs the exact text we used to make the instance.</p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; print(PasswordHash(b'hash', b'salt'))
PasswordHash(b'hash', b'salt')
</code></pre></li>
<li><p>From here we need to think about how we should hash the password, since we don't want to store the password in plaintext. And so we can add <code>compute_hash</code> to <code>PasswordHash</code>, with 2 modifications.</p>

<ul>
<li>I prefer the name <code>hash_password</code>, as it explains what it does, and what it does it on.</li>
<li><p>Secondly I would make it a <code>staticmethod</code>. This comes with a couple of reasons why:</p>

<ol>
<li>It allows us to create <code>PasswordHash</code> from a password easier.</li>
<li>It allows for subclasses of <code>PasswordHash</code> to change the way the class hashes things.</li>
</ol></li>
</ul>

<p></p>

<pre><code>@staticmethod
def hash_password(password, salt):
    hash = hashlib.sha256(password.encode() + salt)
    return base64.b64encode(hash.digest())
</code></pre>

<p>Currently making a <code>PasswordHash</code> from a password is pretty ugly.</p>

<pre class="lang-py prettyprint-override"><code>ph = PasswordHash(PasswordHash.hash_password(password, salt), salt)
</code></pre></li>
<li><p>Since the current interface for making a <code>PasswordHash</code> from a password is not the nicest. And is the standard way to use the class, we can make a class method to make it pretty.</p>

<p>The reason this is a <code>classmethod</code> and not a standard method is because we need it to run before <code>__init__</code>. It is also a <code>classmethod</code> and not a <code>staticmethod</code> as we'll be using the first argument, <code>cls</code>, to instantiate the class.</p>

<pre class="lang-py prettyprint-override"><code>@classmethod
def from_password(cls, password, salt):
    return cls(cls.hash_password(password, salt), salt)
</code></pre>

<p>Now making the <code>PasswordHash</code> from a password is really clean.</p>

<pre class="lang-py prettyprint-override"><code>ph = PasswordHash.from_password('pass', salt)
</code></pre></li>
<li><p>We're almost at the end. The last thing to do is to add the spiritual child of <code>compare_hashes</code> to the class. Which is really simple since we have <code>self.salt</code> and <code>PasswordHash.hash_password</code>.</p>

<pre class="lang-py prettyprint-override"><code>def compare(self, password):
    return self.hash == self.hash_password(password, self.salt)
</code></pre></li>
</ol>

<p>Tying this all together you can get:</p>

<pre class="lang-py prettyprint-override"><code>import base64
import hashlib
import os


def new_salt(length=16):
    return os.urandom(length)


class PasswordHash:
    def __init__(self, hash, salt):
        self.hash = hash
        self.salt = salt

    @classmethod
    def from_password(cls, password, salt):
        return cls(cls.hash_password(password, salt), salt)

    def __repr__(self):
        return f'PasswordHash({self.hash}, {self.salt})'

    @staticmethod
    def hash_password(password, salt):
        hash = hashlib.sha256(password.encode() + salt)
        return base64.b64encode(hash.digest())

    def compare(self, password):
        return self.hash == self.hash_password(password, self.salt)


def main():
    salt = new_salt()
    print('salt:', salt)
    hash = PasswordHash.from_password('pass', salt)
    print('PasswordHash:', hash)
    print('hash:', hash.hash)
    print('salt:', hash.salt)
    print('compare pass:', hash.compare('pass'))
    print('compare bar :', hash.compare('bar'))


if __name__ == '__main__':
    main()
</code></pre>

<p>To make the comparison to be more OOP you could rename <code>compare</code> to the dunder method <code>__eq__</code>. And then you could use it via the <code>==</code> operator.</p>

<pre class="lang-py prettyprint-override"><code>print('compare pass:', hash == 'pass')
print('compare bar :', hash == 'bar')
</code></pre>
    </div>