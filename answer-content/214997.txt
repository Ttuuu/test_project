<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The recommended way from <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html" rel="nofollow noreferrer">Oracle</a> is <code>Thread.interrupt()</code>.  For example:</p>

<pre><code>public void stop() {
    Thread thread = runner;
    runner = null;
    thread.interrupt();
}

public void run() {
    runner = Thread.currentThread();
    while (runner != null) {
        System.out.println("Stop Thread " + Thread.currentThread().getId());
    }
    System.out.println(" Done ");
}
</code></pre>

<p>It is true that <code>sleep()</code> can be interrupted (which will raise an <code>InterruptedException</code>), which is what the <code>interrupt()</code> will do.  However, afterwards the <code>Thread</code> can continue doing whatever it wants after being “interrupted”, so you must also check for a stop-condition of some kind.  Above, we check <code>runner != null</code>.  But as you can see above, you don’t need a <code>sleep()</code> in the worker thread.</p>

<p>If you don’t want to run the <code>Thread</code> in a loop, or you have many different loops where the task may spin, you will have to make the stop check in each of those places.</p>
    </div>