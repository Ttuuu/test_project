<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think that a recursion is quite elegant here (to know about the performance, you would need to do some benchmarks).</p>

<p>Regarding your code, I would suggest some minor changes to make it more readable:</p>

<ol>
<li><code>if vertex.visited != true {</code> is the same as <code>if !vertex.visited {</code></li>
<li>first handle specific cases with an early return and then the general case: this way augmented indentation concerns only the specific cases</li>
<li>you can iterate over an empty (or <a href="https://play.golang.org/p/DzEKJsnZgUs" rel="nofollow noreferrer">even nil</a>) slice</li>
<li>use unpacking</li>
<li>I don't think that initializing the slice capacity brings much</li>
</ol>

<p>Code rewritten with this changes:</p>

<pre><code>package main

import (
    "fmt"
)

type Vertex struct {
    visited    bool
    value      string
    neighbours []*Vertex
}

func NewVertex(value string) *Vertex {
    return &amp;Vertex{
        value: value,

        // the two following lines can be deleted, because the will be initialized with their null value
        visited:    false,
        neighbours: nil, // comment 5.
    }
}

func (v *Vertex) connect(vertex ...*Vertex) { // see comment 4.
    v.neighbours = append(v.neighbours, vertex...)
}

type Graph struct{}

func (g *Graph) dfs(vertex *Vertex) {
    if vertex.visited { // see comment 1.
        return // see comment 2.
    }
    vertex.visited = true
    fmt.Println(vertex)
    for _, v := range vertex.neighbours { // see comment 3.
        g.dfs(v)
    }
}

func (g *Graph) disconnected(vertices ...*Vertex) {
    for _, v := range vertices {
        g.dfs(v)
    }
}

func main() {
    v1 := NewVertex("A")
    v2 := NewVertex("B")
    v3 := NewVertex("C")
    v4 := NewVertex("D")
    v5 := NewVertex("E")
    g := Graph{}
    v1.connect(v2)
    v2.connect(v4, v5) // see comment 4.
    v3.connect(v4, v5) // see comment 4.
    g.dfs(v1)
}
</code></pre>
    </div>