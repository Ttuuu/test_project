<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not convinced your code is <em>too long</em>, but it is verbose in the sense that it's a bit hard to read. To make sense of it one must read many lines in detail and identify the repeated pattern between them. Wrapping things in functions can improve clarity just as much as using a more concise syntax or pattern</p>

<p><a href="https://codereview.stackexchange.com/a/229974/200133">Gloweye</a>'s concern about your choices of dictionary keys is sound. <strong>I'd go further and suggest that this is a good time to write a small <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">class</a>.</strong></p>

<p>There are different ways to think about classes and objects. Without getting too deep into the weeds, the thing they offer us here is the ability to express the <em>structure</em> of a "dictionary" variable in our code. </p>

<pre class="lang-py prettyprint-override"><code>from typing import Dict, Union

class MyModel:
    def __init__(self, recall: float, precision: float, f1: float, frauds: int):
        self.recall = recall
        self.precision = precision
        self.f1 = f1
        self.frauds = frauds

    def from_dict(data: Dict[str, Union[int, float]]) -&gt; 'MyModel':
        return MyModel(data['Recall'], data['Precision'], data['F1_score'], data['Frauds'])

    def recall_surpassed(self, new: float) -&gt; bool:
        return new &gt; self.recall - 0.1

    def precision_surpassed(self, new: float) -&gt; bool:
        return new &gt; self.precision - 0.1

    def f1_surpassed(self, new: float) -&gt; bool:
        return new &gt; self.f1 - 0.1

    def frauds_surpassed(self, new: float) -&gt; bool:
        return new &gt; self.frauds

    def get_improvement_score(self, new: 'MyModel') -&gt; int:
        return (
            int(self.recall_surpassed(new.recall))
            + int(self.precision_surpassed(new.precision))
            + int(self.f1_surpassed(new.f1))
            + int(self.frauds_surpassed(new.frauds))
        )
</code></pre>

<p>This isn't any more concise than what you'd written, but here the verbosity serves a purpose: it's easier to make sense of the behavior and to find any particular detail because the pieces are split up and labeled. For example, did I get the <code>frauds</code> check right, and if I didn't then how would you fix it?</p>

<p>To use this with your existing nested dicts would be easy enough, because I included <code>from_dict</code> as a helper method:</p>

<pre class="lang-py prettyprint-override"><code>i = MyModel.from_dict(
    results_dict['Current model']
).get_improvement_score(
    MyModel.from_dict(results_dict['New model'])
)
print(i)
</code></pre>
    </div>