<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Controllers should be kept as lean as possible. Consider adding another layer of abstraction specific the controller in order to separate concerns.</p>

<pre><code>public interface IMetabuildCRsService  {
    List&lt;MetabuildCR&gt; GetMetabuildCrs(IEnumerable&lt;string&gt; BuildIds, IEnumerable&lt;int&gt; CRs = null);
}
</code></pre>

<p>Its implementation will encapsulate the core functionality currently being done in the controller.</p>

<pre><code>public class DefaultMetabuildCRsService : IMetabuildCRsService {
    private readonly IQSARepository repository;

    public DefaultMetabuildCRsService(IQSARepository repository) {
        this.repository = repository;
    }

    public List&lt;MetabuildCR&gt; GetMetabuildCrs(IEnumerable&lt;string&gt; BuildIds, IEnumerable&lt;int&gt; CRs = null){
        var metabuildCRs = new List&lt;MetabuildCR&gt;();
        foreach (var productBuildId in BuildIds) {
            var imageBuildIds = repository.GetImageBuildsInProductBuild(productBuildId);
            foreach (var imageBuildId in imageBuildIds) {
                var crNumbers = repository.GetJobDetailsForSoftwareImageBuild(imageBuildId)?
                    .Select(jd =&gt; jd.ChangeRequestNumber)
                    .Distinct();

                if (CRs != null &amp;&amp; CRs.Count() &gt; 0) {
                    // filter down to only crs we care about
                    crNumbers = crNumbers.Where(cr =&gt; CRs.Contains(cr));
                }

                var imageBuild = repository.GetSoftwareImageBuild(imageBuildId);
                foreach (var crNumber in crNumbers) {
                    var bulletinInfo = repository.GetBulletinInformationForCR(crNumber);
                    var exception = repository.GetCRException(crNumber, imageBuildId);
                    var dependentCRs = repository.GetCRsThatDependOnCR(crNumber);

                    metabuildCRs.Add(new MetabuildCR {
                        ChangeRequestNumber = crNumber,
                        // Build Info
                        SoftwareImageBuildId = imageBuildId,
                        BuildDate = imageBuild.CrmbuildDate,
                        // Exception Info
                        RequestText = exception?.RequestText,
                        RequestedBy = exception?.RequestedBy,
                        RequestedOn = exception?.RequestedOn,
                        ExpiresOn = exception?.ExpiresOn,
                        JiraIssueKey = exception?.JiraIssueKey,
                        ReasonCode = exception?.ReasonCode,
                        ResponseBy = exception?.ResponseBy,
                        ResponseText = exception?.ResponseText,
                        ResponseOn = exception?.ResponseOn,
                        ExemptionNotes = exception?.Notes,
                        //Bulletin Info
                        SecurityBulletinDcn = bulletinInfo?.SecurityBulletinDcn,
                        DocumentType = bulletinInfo?.DocumentType,
                        DocumentReleaseDate = bulletinInfo?.DocumentReleaseDate,

                        DependentCRs = dependentCRs
                    });
                }
            }
        }
        return metabuildCRs;
    }
}
</code></pre>

<p>This simplifies the controller to</p>

<pre><code>[Route("api/metabuildCRs")]
public class MetabuildCRsController : Controller {
    private readonly IMetabuildCRsService service;

    public MetabuildCRsController(IMetabuildCRsService service) {
        this.service = service;
    }

    [HttpPost]
    public IActionResult GetMetabuildCrs([FromBody] MetabuildCRsRequest model) {
        if (model == null || model.BuildIds == null) {
            return BadRequest();
        }

        List&lt;MetabuildCR&gt; metabuildCRs = service.GetMetabuildCrs(model.BuildIds, model.CRs);

        return Ok(metabuildCRs);
    }
}
</code></pre>

<p>If anything changes in the core functionality then there is no need to touch the controller as it is performing its Single Responsibility of handling requests.</p>

<p>The service can be modified independently of the controller. It can also be reused elsewhere if needed.</p>

<p>I am personally not a big fan of using underscore prefixes on variable names, so will notice that I removed them all.</p>

<p>As for your concern about additional functionality, they can be isolated to their own service abstraction and added to this controller or its own controller depending on your choice. Splitting functionality into small easy to maintain modules helps separate concerns within the application and allows the code to grow softly</p>
    </div>