<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Task Parallel Library (TPL)</h2>

<p>I believe you are reinventing the wheel here. TPL provides numerous ways of synchronizing tasks.   </p>

<p>For instance, it allows you to:</p>

<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskscheduler.fromcurrentsynchronizationcontext?view=netframework-4.8" rel="nofollow noreferrer">create a task scheduler from current synchronization context</a> or to</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskfactory.startnew?view=netframework-4.8#System_Threading_Tasks_TaskFactory_StartNew__1_System_Func___0__System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_System_Threading_Tasks_TaskScheduler_" rel="nofollow noreferrer">start a task on a specified task scheduler</a>.</li>
</ul>

<p>All you need to do is create <del>a custom synchronization context (.NET Core no longer uses these)</del> or <a href="https://www.infoworld.com/article/3063560/building-your-own-task-scheduler-in-c.html" rel="nofollow noreferrer">custom task scheduler</a> that schedules tasks to a single thread. Perhaps your <code>TaskGroup</code> could be used internally in such scheduler. </p>

<p>Each of your clients should use that specific scheduler to run tasks. This allows you to guard sequential behavior by client, even in an asynchronous environment. For instance, if each client has a session, and mutiple calls (multiple threads) can make requests concurrently in that session; all these calls should schedule tasks to the session-specific scheduler.</p>

<p>Any code that must/could run asynchronously, could still be scheduled on the default task scheduler to allow for concurrency when required to.</p>
    </div>