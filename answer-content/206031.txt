<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While you have a good presentation of your question, it is still a bit unclear exactly what you are looking to extract between <code>$GPTXT</code> and <code>'$'</code> given that you have the <code>"\r\n"</code> prior to the terminating <code>'$'</code>. It seems unlikely that you would want to retain the <em>carriage return/line feed</em> as part of your returned substring. My best interpretation is that you want <code>"-&gt;SOME CODES HERE&lt;-"</code> extracted from the string (drop a comment if this is incorrect).</p>

<p>If this is the case, you can use the <code>\r\n</code> to your advantage in <em>tokenizing</em> the string to return that part between <code>$GPTXT</code> and <code>"\r\n$"</code> by using <code>"\r\n$"</code> as the delimiters passed to <code>strtok</code>. The only additional task needed in your <code>findstr</code> function would be to step past your search string before calling <code>strtok</code>.</p>

<p>In looking at the declaration for <code>findstring</code>, I would tweak the parameters just a bit to make them consistent with most of the other string library functions. That being to reverse the source and dest parameters such that <code>dest</code> comes before <code>src</code> as in <code>strcpy, etc...</code> I'm not a fan of one way over the other, but I have found keeping functions at least as consistent as possible helps avoid inadvertent parameter swaps.</p>

<p>I would also change your <code>termChar</code> to a <code>const char*</code> parameter to allow flexibility in passing the delimiter to use with <code>strtok</code>.</p>

<p>An implementation might look like:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define TERM   32
#define MAXC 1024
#define DELIM "\r\n$"

char *findstr (char *dest, const char *src, size_t len, const char *srch,
                const char *delim)
{
    char *p = strstr (src, srch);   /* locate beginning of search in src */
    size_t toklen = 0;              /* token length to calculate once */

    if (!p)                         /* validate or return NULL */
        return NULL;

    p += strlen (srch);             /* step past search str */

    /* tokenize p based on delim and validate length &lt; len */
    if ((p = strtok (p, delim)) &amp;&amp; (toklen = strlen(p)) &lt; len)
        memcpy (dest, p, toklen+1); /* copy to dest w/nul-char */
    else
        return NULL;                /* or return NULL */

    return dest;
}

int main (void) {

    char buffer[] = "blablabla$GPTXT-&gt;SOME CODES HERE&lt;-\r\n$GPRMCblablabla";
    char sub[MAXC] = "";

    if (findstr (sub, buffer, MAXC, "GPTXT", DELIM))
        printf ("sub: '%s'\n", sub);
}
</code></pre>

<p>(<strong>note:</strong> since you have already scanned to length of your token to validate it is less than <code>len</code>, there is no need to scan again by using <code>strcpy</code> to effect the token copy to <code>dest</code>, simply using <code>memcpy</code> will provide an ever-so-slightly more efficient copy)</p>

<p><strong>Example Use/Output</strong></p>

<p>While provides:</p>

<pre><code>$ ./bin/findstr
sub: '-&gt;SOME CODES HERE&lt;-'
</code></pre>

<p>If you are looking to parse something slightly different, let me know.</p>
    </div>