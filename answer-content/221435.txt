<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a good first attempt and a lot of good can be said about it, but I'm going to focus on what I see are problems that should be fixed. Don't let this dissuade you though!</p>

<ul>
<li><p><code>ControllerType</code> and <code>ViewModelProtocol</code> are completely useless. If you aren't going to use them to constrain some generic function then get rid of them.</p></li>
<li><p>Your <code>APIRequests.get(requestURL:callBack:)</code> doesn't call the callBack if the requestURL can't be used to create a <code>URL</code>. This will cause silent errors. In general, make sure that all possible paths call the callBack when you are making async functions. Also, <code>RxCocoa</code> has a couple of wrappers around <code>dataTask</code>. I suggest you use them in your <code>APIRequests</code> class.</p></li>
<li><p><code>APIRequests</code> is a class with no state. This is pointless. Move the functions out of the class and get rid of it.</p></li>
<li><p><code>ProductsInteractor.nextURLString</code> is Optional. There is no point in making Strings optional. An empty string is the same as no string.</p></li>
<li><p><code>APIRequest</code> doesn't need to be a protocol; it's just a data bucket. Make it a <code>struct</code> and adjust other code as necessary.</p></li>
<li><p>Regarding <code>ProductsViewModel</code>: I'm not a fan of this style of view model; It seems like a lot of boilerplate to me. In any case, you should have unit tests for it.</p></li>
<li><p>Your <code>ProductsInteractor.getProducts()</code> and <code>ProductsInteractor.getNextProducts(page:)</code> functions only emit if the network request was successful, they never emit errors and if <code>self?.nextURLString == nil</code> then <code>getNextProducts(page:)</code> doesn't emit anything at all. In general, make sure that all possible paths through the block of an Observable.create all call the observer.</p></li>
</ul>
    </div>