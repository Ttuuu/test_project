<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Pass <code>queue</code> as a const reference</h1>

<p>It's quite expensive to pass a whole vector by value, and you are not modifying it. So you can instead make <code>minimumBribes()</code> take a const reference, like so:</p>

<pre><code>void minimumBribes(const vector&lt;int&gt; &amp;queue) {
    ...
}
</code></pre>

<h1>Use whitespace to make the code more readable</h1>

<p>A simple trick to make the code more readable is to add empty lines between the different sections in a function. For example, adding an empty line right before the <code>for</code>-loop makes it easier to distinguish the block declaring variables from the main loop. Similarly, one right after the end of the <code>for</code>-loop would also be nice. As a rule of thumb, I'd add an empty line before and after every <code>for</code>, <code>do</code>, <code>while</code> and <code>if</code>-<code>else</code> block.</p>

<h1>Consider using range-for</h1>

<p>You are iterating over each element of the <code>queue</code>, so using a range-for seems natural:</p>

<pre><code>for (auto person: queue) {
    ...
}
</code></pre>

<p>Of course, the problem is that you need the index of each person as well. Unfortunately, there is no <code>std::enumerate()</code> that would do what Python's <code>enumerate()</code> function does, but you can find <a href="https://stackoverflow.com/a/11329249/5481471">some implementation</a>s around, or write your own. However, for a vector it's quite easy to get the index of a given value, since you know all elements are consecutive in memory. So you could write:</p>

<pre><code>for (auto &amp;person: queue) {
    auto distance_to_index = person - (&amp;person - &amp;queue.front()) - 1;
    ...
}
</code></pre>

<h1>Make <code>minimumBribes()</code> return the swap count instead of printing it</h1>

<p>It's good practice to separate the calculation of some value from printing it to the screen. This makes your code more much more flexible. A possible way to rewrite your functions is like so:</p>

<pre><code>int minimumBribes(const vector&lt;int&gt; &amp;queue) {
    ...

    for (...) {
        ...
    }

    return too_chaotic ? -1 : total_swaps_count;
}
</code></pre>

<p>The caller then can decide how to present the results.</p>

<h1>Use simple solutions for simple problems</h1>

<p>Algorithms are nice, but sometimes a few simple lines of plain-C-like code would do just fine. For example, using <code>std::rotate()</code> on a vector with just two elements is overkill. You could have written:</p>

<pre><code>    } else if (distance_to_index == expected_next_values[0]) {
        expected_next_values[0] = expected_next_values[1];
        expected_next_values[1] = 0;
    } ...
</code></pre>

<p>Or if you do want to handle the cases where <code>max_swaps</code> is larger than 2, I recommend you make <code>expected_next_values</code> a <a href="https://en.cppreference.com/w/cpp/container/deque" rel="nofollow noreferrer"><code>std::deque&lt;int&gt;</code></a>, and then write:</p>

<pre><code>    } else if (distance_to_index == expected_next_values[0]) {
        expected_next_values.pop_front();
        expected_next_values.push_back(0);
    } ...
</code></pre>

<p>That is more efficient for larger values of <code>max_swaps</code>, since it avoids touching all elements of <code>expected_next_values</code>.</p>

<h1>Learning more about STL algorithms</h1>

<p>Doing coding challenges is probably a good way to learn more about the language you are programming in. A good overview of all available algorithms is the <a href="https://www.fluentcpp.com/getthemap/" rel="nofollow noreferrer">World Map of C++ STL Algorithms</a>. In general, if you are writing some piece of code and are thinking: "hm, this looks like a common problem, why hasn't someone already implemented it?", then probably your hunches are right and there is already something available that solves it, either in the STL, Boost, or in some other readily available library. Go and use your favorite search engine to find if that's indeed the case.</p>
    </div>