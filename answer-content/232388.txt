<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>If you need to get a value of a <code>Dictionary&lt;TKey, TValue&gt;</code> you shouldn't use <code>ContainsKey()</code> together with the <code>Item</code> property getter but <code>TryGetValue()</code>, because by using <code>ContainsKey()</code> in combination with the <code>Item</code> getter you are doing the check if the key exists twice.<br>
From the <a href="https://referencesource.microsoft.com/" rel="nofollow noreferrer">refernce source</a>  </p>

<p><a href="https://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs,22fd7cd7408aed6e,references" rel="nofollow noreferrer">ContainsKey(TKey)</a></p>

<pre><code>public bool ContainsKey(TKey key) {
    return FindEntry(key) &gt;= 0;
}
</code></pre>

<p><a href="https://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs,49962975508e2d83,references" rel="nofollow noreferrer">this[TKey]</a></p>

<pre><code>public TValue this[TKey key] {
    get {
        int i = FindEntry(key);
        if (i &gt;= 0) return entries[i].value;
        ThrowHelper.ThrowKeyNotFoundException();
        return default(TValue);
    }
    set {
        Insert(key, value, false);
    }
}
</code></pre>

<p><a href="https://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs,2e5bc6d8c0f21e67,references" rel="nofollow noreferrer">TryGetValue(TKey, out TValue)</a></p>

<pre><code>public bool TryGetValue(TKey key, out TValue value) {
    int i = FindEntry(key);
    if (i &gt;= 0) {
        value = entries[i].value;
        return true;
    }
    value = default(TValue);
    return false;
}
</code></pre>

<p>Each of these public methods is calling the private <a href="https://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs,bcd13bb775d408f1,references" rel="nofollow noreferrer">FindEntry(TKey)</a>. As you see a combination of <code>ContainsKey()</code> together with the <code>Item</code> getter is doing the call twice.</p>

<pre><code>private int FindEntry(TKey key) {
    if( key == null) {
        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.key);
    }

    if (buckets != null) {
        int hashCode = comparer.GetHashCode(key) &amp; 0x7FFFFFFF;
        for (int i = buckets[hashCode % buckets.Length]; i &gt;= 0; i = entries[i].next) {
            if (entries[i].hashCode == hashCode &amp;&amp; comparer.Equals(entries[i].key, key)) return i;
        }
    }
    return -1;
}
</code></pre>

<p>So this  </p>

<pre><code>if (!Totals.ContainsKey(value)) { Totals.Add(value, 0); }
Totals[value] += 1;  
</code></pre>

<p>should be written like this  </p>

<pre><code>Totals.TryGetValue(value, out long current);
Totals[value] = current + 1;
</code></pre>

<p>But just looking at the above code, it just seems strange to have <code>ContainsKey(value)</code>. It would be better to rename <code>value</code> to something else.</p></li>
<li><p>I don't like such oneliners shown in the code. IMO it is harder to read the code and grasp at first glance what it is about.  </p></li>
<li><p>The extension methods could use some improvement as well. You should add proper argument validation into the methods.  Nobody wants to get a <code>NullReferenceException</code> out of a <code>public</code> method.  </p></li>
<li><p>The <code>Name</code> property doesn't need a setter because you are assigning a value only in the constructor.</p></li>
</ul>
    </div>