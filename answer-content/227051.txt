<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I actually just started learning <code>asyncio</code> a couple days ago, so I won't be able to comment too deeply. I do see a few things though:</p>

<p>Disregarding asyncio for a sec, I think <code>google</code> could be set up better. You have the base case of the recursion as <code>n == 100</code>, and are incrementing <code>n</code> in each recursive call. To easily allow the caller to decide how many time to run, I'd reverse how <code>n</code> is being handled. I would decrement it each call, and set the base case as <code>n &lt;= 0</code>. With how you have it now, say the caller wanted it to run 1000 times, they would need to call it as</p>

<pre><code>google(-900)
</code></pre>

<p>which is a little wonky. I'd change the first bit to:</p>

<pre><code>async def google(n):
    if n &lt;= 0:
        return None

    await s.add_task(google, n=n - 1)

. . .
</code></pre>

<hr>

<p>I'm not sure recursion is the cleanest tool for the job here. I'm also not sure entirely why you're using a job queue or why you're using a elaborate class here unless the goal is to be able to handle jobs being added at a later time.</p>

<p>If your goal is just to initiate many requests and wait on them at the same time, you could just <a href="https://docs.python.org/3/library/asyncio-task.html?highlight=gather#asyncio.gather" rel="nofollow noreferrer"><code>gather</code></a> them:</p>

<pre><code>import aiohttp
import asyncio as a

# google no longer cares about how many times it runs
# That is arguably beyond the responsibilities of a function intended to make requests
async def google():
    async with aiohttp.ClientSession() as session:
        async with session.get('http://h...content-available-to-author-only...n.org/get') as resp:
            print(resp.status)

async def start_requests(n_requests: int):
    routines = [google() for _ in range(n_requests)]  # Create a list of reqeust-making coroutines
    await a.gather(*routines)  # Unpack the routines into gather (since gather is var-arg)
</code></pre>

<hr>

<p>Also, instead of doing timing using a single attempt and plain subtraction, it would be more accurate to use <code>timeit</code>:</p>

<pre><code>from timeit import timeit

print("t:", timeit(lambda: a.run(start_requests(10)), number=20))  # number is the amount of tests to do
</code></pre>

<p>I'm assuming there's no issue using <code>timeit</code> for async code. </p>
    </div>