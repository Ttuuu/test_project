<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is nice and readable.</p>

<p>The system-dependent handling of <code>\n</code> characters may cause problems â€” we may introduce a <code>\012</code> byte in the signature, count, or checksum part that gets transformed into CR-LF (on Windows) or CR (on old MacOS).  I think we can simply open the output stream in binary mode, since our data won't contain <code>\n</code> characters that need to be handled specially.</p>

<p>Here are some small improvements:</p>

<hr>

<blockquote>
<pre><code>void clear() {
    std::fill(data.begin(), data.end(), 0); 
}
</code></pre>
</blockquote>

<p>We can use the <code>fill</code> member of <code>std::array</code> to simplify the code:</p>

<pre><code>data.fill(0);
</code></pre>

<p>or even</p>

<pre><code>data = {};
</code></pre>

<hr>

<blockquote>
<pre><code>reinterpret_cast&lt;char *&gt;(&amp;blk.data)
</code></pre>
</blockquote>

<p>This cast comes up very often.  Consider making a function:</p>

<pre><code>template &lt;typename T&gt;
char* as_chars(const T&amp; value)
{
    return reinterpret_cast&lt;char*&gt;(value);
}
</code></pre>

<p>So you can write</p>

<pre><code>in.read(as_chars(blk.data), blk.datasize);
// ...
</code></pre>

<p>You can even make a function for reading/writing if you do it often.</p>

<hr>

<blockquote>
<pre><code>uint32_t id = 0xfecaadbe;
</code></pre>
</blockquote>

<p><code>static constexpr</code>, maybe?</p>

<hr>

<blockquote>
<pre><code>std::string line;
</code></pre>
</blockquote>

<p>This variable is used several lines after.  It may be more readable to put it inside the loop:</p>

<pre><code>for (std::string line; std::getline(in, line);) {
    // ...
}
</code></pre>

<hr>

<blockquote>
<pre><code>if (line.length() &lt; 256) {
    uint8_t n = line.length() &amp; 0xff;
    buff.put(n);
    buff &lt;&lt; line;
}
</code></pre>
</blockquote>

<p>If <code>line.length() &lt; 256</code>, then <code>line.length() &amp; 0xff == line.length()</code> right?</p>

<hr>

<blockquote>
<pre><code>in.close();
</code></pre>
</blockquote>

<p>You can omit this close by putting <code>in</code> inside a scope.  Not sure if that's better.</p>

<hr>

<blockquote>
<pre><code>Block b;
while (buff &gt;&gt; b) {
    out &lt;&lt; b;
}
// always emit at least one block even if empty
out &lt;&lt; b;
</code></pre>
</blockquote>

<p>It took me a while to see that <code>b</code> is empty after the last failed read.  Help the poor code reader by using something like <code>out &lt;&lt; Block{}</code> please :)</p>
    </div>