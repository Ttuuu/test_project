<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The same question was <a href="https://www.reddit.com/r/swift/comments/ia7gj3/how_to_properly_decode_a_json_dictionary_into/g1of7fn/" rel="nofollow noreferrer">answered</a> on Reddit by <a href="https://www.reddit.com/user/Saladfork4" rel="nofollow noreferrer">u/Saladfork4</a></p>
<p>Here is the original answer:</p>
<p>Usually you'll have a "type" somewhere in the JSON that tells you how to decode a field with an inconsistent structure. In your case, it is probably <code>type: AccountType</code>?
In that case, you'll usually want to decode that key first and then decode the rest based on that. Here's an example:</p>
<pre><code>struct RawAccount: Decodable {

    enum CodingKeys: CodingKey {
        case type
    }

    let type: AccountType

    let account: Account

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        type = try container.decode(AccountType.self, forKey: .type)
    
        let accountContainer = try decoder.singleValueContainer()
        switch type {
        case .htlc:
            account = try accountContainer.decode(HTLC.self)
        case .vesting:
            account = try accountContainer.decode(VestingContract.self)
        default:
            account = try accountContainer.decode(Account.self)
        }
    }

}

public enum AccountType: String, Codable {

    case htlc = "HTLC"

    case vesting = "Vesting"

    case account = "Account"

}

// Example
do {
    let rawAccount = try decoder.decode(RawAccount.self, from: data)
    print(rawAccount.account)
} catch {
    print(error)
}
</code></pre>
<p>That way, you don't have to exhaustively try decoding it as every type--and you won't end up with a really big pyramid of code as you add more account types.
If you prefer the enum with associated values instead of <code>let account: Account</code>, you can just add a field to RawAccount and use that instead after decoding within the switch.</p>
    </div>