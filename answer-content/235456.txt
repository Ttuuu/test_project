<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The posted code looks pretty good. </p>

<p>Constants: You declare a lot of inline literals. It will be hard to alter things like snake colors.</p>

<hr>

<p>Virtual destructors: it functionally works, but it's generally good practice to make your base class destructors virtual. It doesn't make your objects bigger since they already have a vtable.</p>

<hr>

<p>Use the <code>override</code> keyword when appropriate.</p>

<hr>

<p>But actually, why are tiles virtual? It appears that they could be structs that only store a type enum. Consider that currently all the empty tiles store a color, but all their colors will always be the same. You could have a small configuration table that associates tile types with color or behavior. </p>

<hr>

<p>Consider making the collision message be a <code>std::optional</code> result. Then you can communicate a non-collision semantically. Also consider making it a struct since it has public fields.</p>

<hr>

<p>Prefer smart pointers instead of adding a bunch of raw pointers to the vector. But actually, try avoiding needing big collections of polymorphic objects.</p>

<hr>

<p><code>MoveSnake</code>: Perhaps use a <code>std::deque</code> so you can push_front. Or use iterators to move the items. Or store the snake backwards in the vector to avoid needing to move all the memory. Or just insert a head at the beginning because the vector is always likely to be small and a memcpy to move the rest isn't a big deal.</p>

<hr>

<p>Try splitting out rendering logic from your objects. For example, instead of looping over tiles and calling their draw method, try making the method that does the looping also do the drawing. Later, you could batch up similar tiles to render faster.</p>

<hr>

<p><code>SnakeGame::OnRender</code>: Do you really want to cout every time you render? How does the body get rendered?</p>
    </div>