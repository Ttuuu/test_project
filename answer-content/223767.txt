<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Optimization starts from a sound logical process</h3>

<p>Let's think about the problem in particular.</p>

<blockquote>
  <p>Given a positive integral number n, return a strictly increasing sequence (list/array/string depending on the language) of numbers, so that the sum of the squares is equal to nÂ².</p>
  
  <p>If there are multiple solutions (and there will be), return the result with the largest possible values</p>
</blockquote>

<p>And later, it specifies</p>

<blockquote>
  <p>If no valid solution exists, return nil, null, Nothing, None (depending on the language) or "[]" (C) ,{} (C++), [] (Swift, Go).</p>
</blockquote>

<p>You were on the right track with your solution, but the code does not exemplify that. Your solution iterates through a map of <em>all <img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=n%20%5Crightarrow%20n%5E%7B2%7D" alt="n_squared"> pairings</em> and removes one at a time per iteration of <code>solutionFinder</code>. At worst, this will go through <em>every permutation</em> of 1, ..., <img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=%20n-1" alt="sqrt(n)">. And ideally, you should never reach a case where you're even looking at numbers that have larger squares than your remaining value.</p>

<p>So, how can we improve this? Well, as I said before, optimization starts from a sound logical process. There are 2 conditions in the specifications that can help us build that solution:</p>

<ol>
<li>The sequence must be <em>strictly increasing</em></li>
<li>If there are multiple solutions, we must return the result with the <em>largest possible values</em></li>
</ol>

<p>Because I'm pretty sure you're already within this same line of problem solving for the problem itself, I'll just jump to what I'm thinking:</p>

<blockquote class="spoiler">
  <p> Start with <img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=k%3D%20n%5E%7B2%7D" alt="haha"> and <img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=i%20%3D%20%5Cleft%20%5Clfloor%20%5Csqrt%7Bk%7D%20%5Cright%20%5Crfloor" alt="33333">.<br>
<br>
 Iterating from j=i down to 1, subtract <img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=%20j%5E%7B2%7D" alt="next"> from <img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=%20n%5E%7B2%7D" alt="again!">. Skip <img src="https://chart.googleapis.com/chart?cht=tx&amp;chl=%20n%5E%7B2%7D" alt="againagain"> particularly.<br>
<br>
 If that value equals 0, return a list with just i.<br>
<br>
 Otherwise, recursively call the same method with that value and j. Return a list of that call with j appended to it if it's nonnull, and null otherwise.<br>
<br>
 If i=0, return <code>null</code>.  </p>
</blockquote>

<p>This methodology guarantees the highest number solution, and doesn't iterate through all permutations. Done right, it'll output the right list or null in order.</p>

<p>So how does this constitute a valid code review? Well, it points out some extraneous points in your solution.</p>

<h3>Couple miscellaneous points</h3>

<p>There is no need to keep a map of integers to their squares. You can iterate down from the highest possible square to 1 and lower your time complexity while maintaining the uniqueness of your output.</p>

<p>You should build the list through return values, rather than modification within a method parameter. The beauty of recursion is the ability to use recursive method evaluations within another call of the same method.</p>

<p>You have 2 variables named <code>sol</code> in different scopes. It's hard to determine where the solution actually goes. I would recommend removing the global scoped <code>sol</code>, and using the above points to return the solution from <code>solutionFinder</code>.</p>
    </div>