<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Another "comparative self answer" of sorts</strong></p>

<hr>

<p><strong>EDIT</strong>: Against my better judgement I tried <code>buffered=True</code> on the python connection. And it's faster: 790ms =&gt; only 2x slower than <code>php</code></p>

<hr>

<p>Just for laughs I tried <code>python3</code> (caveat I am not a python programmer, so this may not be the most efficient way). Code below. <strong>Result 1200ms</strong>! ~3x slower than php and ~9x slower than c++. So for python running 3 x <code>group by</code> queries on DB server makes more sense. </p>

<p>To be honest this is the sort of difference (ie 10x) I expected between php and c++. However i think php7 got a lot quicker on arrays, and php and mysql are a "highly optimized matched pair". </p>

<pre class="lang-py prettyprint-override"><code>import mysql.connector

cnx = mysql.connector.connect(user='...', database='...', password='...')
cursor = cnx.cursor()

query = ("select email,firstname,lastname from member")

domains = dict()
firstnames = dict()
lastnames = dict()

cursor.execute(query)

for (email, firstname, lastname) in cursor:
    pieces = email.strip().split("@")
    if len(pieces) == 2:
        domain = pieces[1].lower()
        if domain not in domains:
            domains[domain] = 0
        domains[domain] = domains[domain] + 1

    fname = firstname.strip().lower()
    if fname not in firstnames:
        firstnames[fname] = 0
    firstnames[fname] = firstnames[fname] + 1

    lname = lastname.strip().lower()
    if lname not in lastnames:
        lastnames[lname] = 0
    lastnames[lname] = lastnames[lname] + 1

print("\domains")
# tried this as well, no time difference
# top_domains = heapq.nlargest(10, domains.items(), key=lambda kv: kv[1])
top_domains = sorted(domains.items(), key=lambda kv: kv[1], reverse=True)
for domain in top_domains[0:10]:
    print(domain[1], domain[0])

print("\nfirstnames")
top_firstnames = sorted(firstnames.items(), key=lambda kv: kv[1], reverse=True)
for firstname in top_firstnames[0:10]:
    print(firstname[1], firstname[0])

print("\nlastnames")
top_lastnames = sorted(lastnames.items(), key=lambda kv: kv[1], reverse=True)
for lastname in top_lastnames[0:10]:
    print(lastname[1], lastname[0])


cursor.close()
cnx.close()

</code></pre>

<p>But the python code is definitely the prettiest and was really quick to write, given I don't know python. ;-)</p>

<p>Before someone shoots me, note that I used the following options on the connection:</p>

<ul>
<li>buffered = false (same as php and c++, should be faster) <strong>this is wrong</strong> refer top</li>
<li>use_pure = false (use the C-extension, the pure python one is MUCH slower)</li>
<li>raw = false (ie DO convert to python types. I am not good enough at python to understand how you do anything with the raw strings <code>.split()</code> <code>.lower()</code> and friends certainly don't work). I could well imagine that this forced type conversion from the mysql C-connector, where everything will be a null terminated c-style string ( a <code>const char*</code> in c++ lingo) , and python <code>String</code> Objects could be a major bottle neck. </li>
</ul>
    </div>