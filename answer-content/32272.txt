<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a refactoring that extracts the definition of the state machine into a compact data structure.  First a few lambdas for the actions:</p>

<pre><code>    # State machine actions.
    #
    # @param plain [String] Accumulated plaintext
    # @param reply [String] Accumulated telnet reply
    # @param c [String] The current character

    EMIT_PLAIN = lambda do |plain, reply, c|
      plain &lt;&lt; c
    end

    EMIT_PLAIN_UNKNOWN_SEQUENCE = lambda do |plain, reply, c|
      plain &lt;&lt; IAC + c
    end

    EMIT_REPLY_DONT = lambda do |plain, reply, c|
      reply &lt;&lt; IAC + DONT + c
    end

    EMIT_REPLY_WONT = lambda do |plain, reply, c|
      reply &lt;&lt; IAC + WONT + c
    end
</code></pre>

<p>Then the state machine definition itself.  Of all of the state-machine approaches I tried, this one has the most succinct definition:</p>

<pre><code>    # The definition of the state machine used to recognize and handle
    # Telnet sequences.
    #
    # This is organized as nested hashes and arrays:
    #
    # The outer, or "state" hash is:
    # * key: state
    # * value: character hash
    #
    # The character hash is:
    # * key: character code, or :else
    # * value: action array
    #
    # The action array is a list of zero or more:
    # * lambda - The action to perform
    # * symbol - the next state

    STATES = {
      :idle =&gt; {
        IAC =&gt; [:iac],
        :else =&gt; [EMIT_PLAIN],
      },
      :iac =&gt; {
        IAC =&gt; [EMIT_PLAIN, :idle],
        WILL =&gt; [:will],
        WONT =&gt; [:wont],
        DO =&gt; [:do],
        DONT =&gt; [:dont],
        IP =&gt; [:idle],
        DM =&gt; [:idle],
        :else =&gt; [EMIT_PLAIN_UNKNOWN_SEQUENCE, :idle],
      },
      :will =&gt; {
        :else =&gt; [EMIT_REPLY_DONT, :idle],
      },
      :wont =&gt; {
        :else =&gt; [:idle],
      },
      :do =&gt; {
        :else =&gt; [EMIT_REPLY_WONT, :idle],
      },
      :dont =&gt; {
        :else =&gt; [:idle]
      }
    }
</code></pre>

<p>And, finally, the functions that drive the state machine:</p>

<pre><code>    # Parse the the command.  Sets @plain and @reply
    #
    # @param command [String] The command to parse

    def parse_command(command)
      @plain = ''
      @reply = ''
      @state = :idle
      command.each_char do |c|
        character_hash = STATES[@state]
        raise "Unknown state #{@state.inspect}" unless character_hash
        actions = character_hash[c] || character_hash[:else]
        raise "Missing :else" unless actions
        apply_actions actions, c
      end
    end

    def apply_actions(actions, c)
      actions.each do |action|
        apply_action action, c
      end
    end

    def apply_action(action, c)
      if action.is_a?(Symbol)
        @state = action
      elsif action.respond_to?(:call)
        action.call @plain, @reply, c
      else
        raise "Unknown action #{action.inspect}"
      end
    end
</code></pre>

<p>This does a good job of showing the state machine in a compact and clear format, but the machinery that drives the state machine (<code>parse_command</code> and friends) seem like clutter.  The state machine definition may be too compact--the amount of comments I felt necessary to describe it are a sign of that.</p>
    </div>