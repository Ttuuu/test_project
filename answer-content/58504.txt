<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>enum DataPresenterStrategyType { DISTANCE, POWER }

DataPresenterStrategy toStrategy(StrategyType type) {
    switch(type) {
        case DISTANCE:
            return new DistanceStrategy();
        case POWER:
            return new PowerStrategy();
    }
}
</code></pre>

<p>What I think you are looking for here is an <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EnumMap.html">EnumMap</a>.  If your strategies are stateless (as appears to be the case in your examples), then you simply initialize a map with all of your strategies, and use StrategyType to retrieve the one you want.</p>

<pre><code>enum DataPresenterStrategyType { DISTANCE, POWER }

static EnumMap&lt;DataPresenterStrategyType, DataPresenterStrategy&gt; lookupStrategy = new EnumMap();
{
    lookupStrategy.put(DISTANCE, new DistanceStrategy());
    lookupStrategy.put(POWER, new PowerStrategy());
}


DataPresenterStrategy toStrategy(StrategyType type) {
    return lookupStrategy.get(type);
}
</code></pre>

<p>If DataPresenterStrategy cannot be shared, then you add a Factory as an extra level of indirection.</p>

<pre><code>enum DataPresenterStrategyType { DISTANCE, POWER }

static EnumMap&lt;DataPresenterStrategyType, DataPresenterStrategyFactory&gt; lookupFactory = new EnumMap();
{
    ...
}


DataPresenterStrategy toStrategy(StrategyType type) {
    return lookupFactory.get(type).newInstance();
}
</code></pre>
    </div>