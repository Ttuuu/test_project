<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Unused Imports</h2>

<pre><code>import javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;
</code></pre>

<p>This is never used, so why have it?</p>

<h2>Useless Comments</h2>

<pre><code>// TODO Auto-generated method stub
</code></pre>

<p>Clearly, you've implemented the method.  Remove the <code>TODO</code> comment.</p>

<p><s></s></p>

<h2>Singletons</h2>

<pre><code>Solution s = new Solution();
int x = s.solution(1041);
</code></pre>

<p>Solution is a class with no data members, just one function.  There is no reason to make an instance of this class, just make the method <code>static</code>.   Actually, there is no obvious reason to have the <code>Solution</code> class; you can make <code>solution()</code> a static member function in <code>Main</code>.
</p>

<h2>Pointless Box</h2>

<pre><code>Integer maxCountZeroList = 0;
</code></pre>

<p>There is no reason to have <code>maxCountZeroList</code> an object.  An <code>int</code> would be sufficient.  Since <code>solutions()</code> returns an <code>int</code>, and ends with <code>return maxCountZeroList;</code>, you are unboxing this integer anyway.</p>

<h2>One Pass</h2>

<p>You are doing two passes over your data.  The first pass you are counting non-<code>'1'</code> characters, and storing the counts in a <code>List</code>.  The second pass, this time over the list, you are looking for the <code>max()</code> value.</p>

<p>This can be done in one pass.</p>

<pre><code>int countZero = 0;
int maxCountZero = 0;

String nBin = Integer.toBinaryString(N);
for (int i=1;i&lt;nBin.length();i++) {

    if(nBin.charAt(i) == '1')
    {
        if (countZero &gt; maxCountZero)
            maxCountZero = countZero;

        countZero = 0;
    }
    else
    {
        countZero++;
    }

}
return maxCountZero;
</code></pre>

<h2>Enhanced For Loop</h2>

<p>Instead of looping over the indices of <code>nBin</code>, and then calling <code>.charAt()</code> at each index (the only place the index is used), you could instead loop over the characters of the string, eliminating the need for the <code>.charAt()</code> call.</p>

<pre><code>for (char ch : nBin.toCharArray()) {

    if(ch == '1')
    {
        if (countZero &gt; maxCountZero)
            maxCountZero = countZero;

        countZero = 0;
    }
    else
    {
        countZero++;
    }

}
</code></pre>

<h2>Looking for the wrong thing</h2>

<p>This code is not counting "zeros".  It is counting "not ones".  It would be clearer written as:</p>

<pre><code>for (char ch : nBin.toCharArray()) {

    if(ch == '0')
    {
        countZero++;
    }
    else
    {
        if (countZero &gt; maxCountZero)
            maxCountZero = countZero;

        countZero = 0;
    }
}
</code></pre>

<hr>

<h2>Efficiency Improvement</h2>

<p>@Harshal's improved solution is a bit obfuscated, but it does run in <span class="math-container">\$O(gap)\$</span> time.  Here is a less obfuscated implementation which runs in <span class="math-container">\$O({numGaps})\$</span> time.</p>

<pre><code>int max_gap = 0;

n &gt;&gt;&gt;= Integer.numberOfTrailingZeros(n);   // Get rid of ending 0's.
n &gt;&gt;&gt;= Integer.numberOfTrailingZeros(~n);  // Get rid of ending 1's.

while (n &gt; 0) {
    int gap = Integer.numberOfTrailingZeros(n);
    if (gap &gt; max_gap)
        max_gap = gap;

    n &gt;&gt;&gt;= gap;
    n &gt;&gt;&gt;= Integer.numberOfTrailingZeros(~n);
} 

return max_gap;
</code></pre>

<p>Assuming <code>Integer.numberOfTrailingZeros(x)</code> executes in constant time, the above while loop will execute once for each "gap", computing exactly how long each gap is.  With <code>0x40000001</code>, Harshal's method must loop 31 times, where as this algorithm loops only once.  In contrast, with <code>0x55555555</code>, this algorithm loops 15 times, finding each gap of one <code>'0'</code>, where as Harshal's algorithm loops once; the maximum gap size.</p>

<p>Profiling, and knowledge of the distribution of values, will be important in choosing between the two optimizations.</p>
    </div>