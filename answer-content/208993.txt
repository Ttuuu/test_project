<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I solved my problem, the trick was to create the links row by row in the tree so I can use the links in the higher rows to find the largest suffix faster. Now it's complexity is O(N). Here is the final code: (also includes some other changes I made like adding support for bigger numbers)</p>

<pre><code>import java.math.BigInteger;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Tree{
    private int[] scores;
    private int[] scoreIndexes;
    private Tree[] branches = new Tree[26];
    private Tree link, parent, shortcut;

    private Tree(){}
    /**
     * @param strs - The substrings this tree will search for.
     * @param scores - An array of equal length to &lt;b&gt;strs&lt;/b&gt; where each &lt;i&gt;scores[i]&lt;/i&gt; represents how much score &lt;i&gt;strs[i]&lt;/i&gt; is worth.
     */
    public Tree(String[] strs, int[] scores){
        this.scores = scores;
        Tree currentNode;
        String str;
        int strLength;

        for(int i = 0; i &lt; strs.length; i++){
            currentNode = this;
            str = strs[i];
            strLength = str.length();

            for(int c = 0; c &lt; strLength; c++){
                int idx = str.charAt(c) - 'a';
                if(currentNode.branches[idx] == null){
                    currentNode.branches[idx] = new Tree();
                    currentNode.branches[idx].parent = currentNode;
                }
                currentNode = currentNode.branches[idx];
                if(strLength == c + 1)
                    currentNode.addScoreIndex(i);
            }
        }
        interlink();
    }

    /**
     * @param str - The string to be scanned.
     * @param minIdx - The first index from which scores from the tree's &lt;b&gt;scores&lt;/b&gt; array are counted towards the total value of &lt;b&gt;str&lt;/b&gt;.
     * @param maxIdx - The last index from which scores from the tree's &lt;b&gt;scores&lt;/b&gt; array are counted towards the total value of &lt;b&gt;str&lt;/b&gt;.
     * @return - The score &lt;b&gt;str&lt;/b&gt; is worth.
     */
    public BigInteger scan(String str, int minIdx, int maxIdx){
        BigInteger score = new BigInteger("0");
        //long score = 0;
        Tree currentNode = this;
        Tree nextNode;
        int branchIndex;
        int strLength = str.length();
        for(int c = 0; c &lt; strLength; c++){
            branchIndex = str.charAt(c) - 'a';

            while((nextNode = currentNode.branches[branchIndex]) == null){
                if(currentNode == this){
                    if(++c == strLength) return score;
                    branchIndex = str.charAt(c) - 'a';
                }
                else currentNode = currentNode.link;
            }
            currentNode = nextNode;

            while(nextNode != null){
                score = score.add(new BigInteger(Long.toString(nextNode.getScore(scores, minIdx, maxIdx))));// += nextNode.getScore(scores, minIdx, maxIdx);
                nextNode = nextNode.shortcut;
            }
        }
        return score;
    }

    private void interlink(){

        Queue&lt;Tree&gt; queue = new LinkedList&lt;&gt;();
        queue.add(this);
        Tree node;
        while(!queue.isEmpty()){
            node = queue.poll();
            for(int i = 0; i &lt; branches.length; i++)
                if(node.branches[i] != null){
                    node.branches[i].setLinks(i);
                    queue.add(node.branches[i]);
                }
        }
    }
    private void setLinks(int index){
        Tree currentNode = parent;
        while(link == null){
            if(currentNode.parent == null){
                link = currentNode;
            }
            else{
                currentNode = currentNode.link;
                link = currentNode.branches[index];
            }
        }
        shortcut = link;
        while(shortcut != null){
            if(shortcut.scoreIndexes != null)
                break;
            shortcut = shortcut.link;
        }
    }

    private void addScoreIndex(int index){
        if(scoreIndexes == null) scoreIndexes = new int[1];
        else scoreIndexes = Arrays.copyOf(scoreIndexes, scoreIndexes.length + 1);
        scoreIndexes[scoreIndexes.length - 1] = index;
    }

    private long getScore(int[] scores, int minIdx, int maxIdx){
        long score = 0;
        if(scoreIndexes != null)
            for(int x = 0; x &lt; scoreIndexes.length; x++)
                if(scoreIndexes[x] &gt;= minIdx &amp;&amp; scoreIndexes[x] &lt;= maxIdx)
                    score += scores[scoreIndexes[x]];
        return score;
    }
}
</code></pre>
    </div>