<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This scenario is not best case for doing an OOP conversion: In this example you're not getting real assistance from the <code>Segmentation1</code> class over what you'd get by using static functions.  The code looks like it does what you need done; it's simply not a great application for OOP as written.  At some point you should check out <a href="https://www.youtube.com/watch?v=o9pEzgHorH0" rel="nofollow noreferrer">this talk</a> by Python core dev Jack Diederich for some perspective on when OOP helps in Python and when it doesn't. One of the main takeways there is that classes which expose just one method ususally don't need to be classes.</p>

<p>That said:</p>

<p>If you want to use this as learning case, you can refactor your arrangement so that you have two different classes for the two different strategies.  This is overkill in the code as is, but if you anticipated a much wider range of segmentation tasks with different inner workings it might make sense. It would be a good choice if the segmentation operation had multiple steps and needed to maintain state within a single run -- for example, if it had to collect data from multiple data sources and coordinate it differently for LAB colors and HSV colors.</p>

<p>Your existing code really has only two paths, splitting on the <code>procedure</code>.  So that's a good clue that you want the sibling classes to differ primarily according to the differences  -- the rule is to <a href="https://softwareengineering.stackexchange.com/questions/337413/what-does-it-mean-when-one-says-encapsulate-what-varies">"encapsulate what varies"</a> -- and, conversely, to share the parts that are the same. The file handling and so on are the same.  So first you can isolate the unchanging bits into mini-methods of their own, and then bookend them around the parts that will change:</p>

<pre><code>class SegmentationType(object):
    DISPLAY_NAME = "invalid"

    def __init__(self, filename, path):
        self.filename = filename
        self.path = path
        self.input_data = None
        self.output_data = None


    def read_image(self):
        self.input_data =  cv2.imread(self.path + self.filename)[1]

    def write_image(self):
        cv2.imwrite(self.path + self.filename.split('.')[0] + '_' + self.DISPLAY_NAME + '.png', self.output_data)

    def process(self):
        # override in derived classes to perform an actual segmentation
        pass

    def start_pipeline(self):
        self.read_image()
        self.process()
        self.write_image()
</code></pre>

<p>Then you just need to create subclasses for your strategies:</p>

<pre><code>class HSV_Segmenter(SegmentationType):
    DISPLAY_NAME = 'HSV'

    def process(self):
        source = rgb_to_hsv(self.input_data)
        self.output_data = treshold_otsu(source)


class LabSegmenter(SegmentationType):
    DISPLAY_NAME = 'LAB'

    def process(self):
        source = rgb_to_lab(self.input_data)
        self.output_data = global_threshold(source)
</code></pre>

<p>This should be equivalent to your earlier code -- it does have one minor advantage, which is that it will fail at compile time if you don't pick the proper subclass where the original would fail at runtime if you accidentally pass a bad value for <code>procedure</code>.  Then your program simply chooses the right class and calls it:</p>

<pre><code>segmenter_class = {
    'hsv': HSV_Segmentation,
    'lab': LAB_Segmenter
}.get(procedure)

if not segmenter_class:
    raise ArgumentError("Invalid segmentation method '{}'".format(procedure))

for img in images:
    os.chdir(img_dir)
    processor =  = segmenter_class(img, img_dir, procedure)
    processor.start_pipeline()
</code></pre>

<p>Again, I personally would stick with static functions in this situation.  In Python you could achieve all the good parts of the class arrangement by just having that dictionary lookup return the right static functions instead of classes.  Lots of languages don't have that neat function and so this kind of structure is very common there.  </p>
    </div>