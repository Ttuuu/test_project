<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Answers to your questions</h1>
<blockquote>
<ol>
<li>Is the Game object design easy to understand?</li>
</ol>
</blockquote>
<p>It's not too hard. But I would have expected a <code>struct Player</code> (even if there is only one instance of it, so no need to put it in a container), and I also expected <code>class Game</code> to manage the monster thread.</p>
<blockquote>
<ol start="2">
<li>Does the scheduling mechanism make sense?</li>
</ol>
</blockquote>
<p>Yes, but it is a bit too complicated. Instead of storing intervals, you can store absolute times, and use <a href="https://en.cppreference.com/w/cpp/thread/sleep_until" rel="nofollow noreferrer"><code>std::this_thread::sleep_until()</code></a>. This avoids having to adjust all the deadlines every time a monster gets to do something. Then you can just do:</p>
<pre><code>while (!monster.empty()) {
    auto current = monster.top();
    std::this_thread::sleep_until(current-&gt;deadline);

    // let the monster do its thing

    monster.pop();

    if (current-&gt;health) {
        current-&gt;deadline += current-&gt;interval;
        monster.push(current);
    }
}
</code></pre>
<p>It helps if you declare <code>deadline</code> and <code>interval</code> with the correct <code>std::chrono</code> types, so you avoid a lot of casts.</p>
<blockquote>
<ol start="3">
<li>I could have used <code>std::initializer_list&lt;Monster&gt;</code> as the argument instead of <code>std::initializer_list&lt;std::pair&lt;std::string, unsigned&gt;&gt;</code> for the constructor. I chose not to because I didn't want temporary copies of Monsters made. What do you think of that choice?</li>
</ol>
</blockquote>
<p>But now it has to create temporary <code>std::pair&lt;std::string, unsigned&gt;</code>s. I would rather use an initializer list that takes <code>Monster</code>s. This will also make it more future proof, for example if you add more overloads to the constructor of <code>Monster</code>.</p>
<blockquote>
<ol start="4">
<li>Are there any flaws in the multithreading?</li>
</ol>
</blockquote>
<p>Not that I can see. Of course, if you use an event loop that handles both timeouts and keyboard input, then you wouldn't need threads at all, and you would avoid having to use mutexes.</p>
<blockquote>
<ol start="5">
<li>The game currently ends via an exit call to kill all threads. Is there a more elegant way to approach this?</li>
</ol>
</blockquote>
<p>It depends on what you think is elegant. <code>exit()</code> is not very nice, but on the other hand it is just a simple, small statement that takes care of your problems.</p>
<p>One approach, again, is to use an event loop, which is terminated as soon as all monsters are dead or when the player is dead. There are no delays this way, neither when the monsters are killed or the player is killed. I would consider this the most elegant.</p>
<p>You can still use multiple threads, but then use an event loop in <code>player()</code> that checks both <code>cin</code> and a <a href="https://stackoverflow.com/questions/384391/how-to-signal-select-to-return-immediately">self pipe</a>. When the monsters kill the player, they send something over the self pipe so the player thread can react immediately. You still have a potential delay if the player kills all monsters.</p>
<p>If you can use C++20, then also consider using <a href="https://en.cppreference.com/w/cpp/thread/jthread" rel="nofollow noreferrer"><code>std::jthread</code></a> for a little extra elegantness.</p>
<h1>You don't need the monster <code>id</code></h1>
<p>You already have a <code>std::vector</code> of <code>Monster</code>s, so the index of the monster in the array is already a unique identifier. And if you use the index as the identifier, you no longer need to scan the array to find the monster.</p>
<p>If you don't want to use indices into an array or vector as an identifier, then I would store the <code>Monster</code>s in a <code>std::map</code> or <code>std::unordered_map</code>.</p>
<h1>Naming things</h1>
<p>There are some inconsistencies in how you name things. For example, <code>Monster_list</code> is a variable but it starts with an upper case. This makes it easier to confuse it for a type name. Also, don't encode the type of container in the name. It's not a list in any case. I would just call this vector <code>monsters</code>.</p>
<p>Prefer using nouns for variable names, and verbs for function names. So instead of the function <code>monsters()</code>, name it <code>do_monsters()</code> or <code>process_monsters()</code>. The same goes for <code>player()</code>.</p>
<h1>Add <code>const</code> where appropriate</h1>
<p>Some member variables of <code>Monster</code> can be made <code>const</code>, and some member functions of <code>Game</code> can be made <code>const</code>.</p>
    </div>