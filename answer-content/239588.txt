<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_delegation" rel="nofollow noreferrer">Event delegation</a> can be used to improve efficiency. Instead of adding a click handler to every single element with the class <em>download</em>, an event handler could be added to the entire document or a sub-element that contains all elements with class <em>download</em>.</p>

<pre><code>document.addEventListener('click', e =&gt; {
  let node = e.target;
  do {
    if (node.classList.contains('download') &amp;&amp; !node.classList.contains('is-open')) {
      e.preventDefault();
      const btn = node.querySelector('.btn');

      btn.classList.remove('is-style-outline');
      btn.classList.add('is-style-default');

      node.classList.add('is-open');
      break;
    } 
    node = node.parentNode;
  } while (node &amp;&amp; node.classList !== undefined);
});
</code></pre>

<p>In the example above, the click handler inspects the target element to see if it or a parent node has the class <em>download</em> and if such an element doesn't have class <em>is-open</em> before modifying class names for the elements. </p>

<p>I noticed that I wasn't able to click on the div element with class <em>download</em> without clicking the button, despite the container element having space on the sides of the button, and in the original code the click event is <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture" rel="nofollow noreferrer">bubbled up</a> from the button to the div. Instead of needing to use the <em>do while</em> loop to go up the DOM chain, the click handler could check to see if the target element has class name <em>btn</em> and in that case if it has an ancestor up three levels that matches the specified class names then modify the class names.</p>

<pre><code>document.addEventListener('click', e =&gt; {
  const node = e.target;
  if (node.classList.contains('btn')) {
    if (node.parentNode &amp;&amp; node.parentNode.parentNode &amp;&amp; node.parentNode.parentNode.parentNode) {
      const ancestorDiv = node.parentNode.parentNode.parentNode;
      if (ancestorDiv.classList &amp;&amp; ancestorDiv.classList.contains('download') &amp;&amp; !ancestorDiv.classList.contains('is-open')) {
        e.preventDefault();

        node.classList.remove('is-style-outline');
        node.classList.add('is-style-default');

        ancestorDiv.classList.add('is-open');
      }
    }
  }
});
</code></pre>

<p>Because the code above contains multiple 'if' statements that lead to multiple indentation levels, the logic could be switched to return early instead:</p>

<pre><code>document.addEventListener('click', e =&gt; {
  const node = e.target;
  if (!node.classList.contains('btn')) {
    return;
  }
  if (!(node.parentNode &amp;&amp; node.parentNode.parentNode &amp;&amp; node.parentNode.parentNode.parentNode)) {
    return;
  }
  const ancestorDiv = node.parentNode.parentNode.parentNode;
  if (ancestorDiv.classList &amp;&amp; ancestorDiv.classList.contains('download') &amp;&amp; !ancestorDiv.classList.contains('is-open')) {
    e.preventDefault();

    node.classList.remove('is-style-outline');
    node.classList.add('is-style-default');

    ancestorDiv.classList.add('is-open');
  }
});
</code></pre>

<hr>

<p>I presume the classes <code>is-style-outline</code> and <code>is-style-default</code> are styled by a library (e.g. wordpress) but the styles could be incorporated based on whether the container div (i.e. with class <em>download</em>) contains class <em>is-open</em>, in the same way the inputs are displayed depending on those class names.</p>

<hr>

<p>Indentation in this code is fairly uniform, though one CSS ruleset (i.e. <code>.download.is-open .inputs</code>) contains rules indented by four spaces instead of two</p>
    </div>