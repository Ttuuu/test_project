<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><i>ALWAYS</i> sanitize and filter user input <i>FIRST</i></h1>

<p>I have to agree with <em>mickmackusa</em> that using French in programming, for variables names or comments, is not a very good idea. For one, it makes it harder to discuss your code here. But also: Most codes and tutorials are in English. It also just looks weird: <code>getMot_de_passe</code> should either be <code>obtenir_mot_de_pass</code> or <code>getPassword</code>. I prefer the latter. (FYI: I'm Dutch).</p>

<p>It is clear what you try to achieve with your code, but I do wonder about how secure it is. Two points:</p>

<ol>
<li><p><strong>The risk.</strong> I was always taught that user input should be strictly sanitized and filtered as soon as possible, before it is allowed to enter deeper into the code. In your code you hand over the raw <code>$_POST</code> array to an <code>User</code> object, and then, without anything else, the <code>hydrate()</code> method hands the content over to another method, and so on. We are now deep into this code, and can you be certain you will always properly sanitize and filter user input? Will you think about this, in a years time, when you want to extend the <code>User</code> class? If anything, this is just dangerous. </p></li>
<li><p><strong>The hole.</strong> Your <code>hydrate()</code> method nicely checks if a method exists for a given <code>$_POST</code> key. So <code>'id_user'</code> finds <code>setId_user()</code>, as it should, but <code>'hack_user'</code> cannot find <code>setHack_user()</code> because that method doesn't exist. The user could however change the registration date: <code>'date_inscription'</code> will be connected to the <code>setDate_inscription()</code> method. There are more methods like this. I'll admit that the user needs to know the names of these methods, but security through obscurity is always a bad plan. More so, these methods lack the minimal sanitizing and filtering you have in the other methods. So this is clearly <em>a security hole</em>. You have given the user access to the <a href="https://www.php.net/manual/en/language.control-structures.php" rel="nofollow noreferrer">control structures</a> of your program, probably without even realizing it.</p></li>
</ol>

<p>So, my suggestions would be: <strong>First sanitize and filter user input</strong>, before it gets too deep into your code and you loose sight of all the security implications. This would, in one fell swoop, also prevent the security hole I mentioned in my second point.</p>

<p>Personally I don't like the <code>hydrate()</code> method. I think it is ugly. It will be difficult to predict what it does, to check its security, and it makes proper debugging virtually impossible.</p>

<p>To end with a tiny bit of code. Here is how I would sanitize and filter user input. Put this code at the top of the PHP file to which your form is posted.</p>

<pre><code>&lt;?php

$post_userId = filter_input(INPUT_POST, 'userId', FILTER_SANITIZE_NUMBER_INT);
$post_roleId = filter_input(INPUT_POST, 'roleId', FILTER_SANITIZE_NUMBER_INT);
</code></pre>

<p>Don't worry that this is not OOP. That is <strong>NOT</strong> important. Safety first! The prefix <code>post_</code> means that this content comes from the user. This clearly distinguishes them from other variables. Other solutions are possible, and an array is allowed, of course. Further filtering should be done, if possible. For instance if you know that a role id should be between 1 and 5 then anything outside that range should be invalid, and not used. In that case either set it to its default value, or generate an error.</p>

<p>Now, and only after you've applied all the sanitizing and filtering your can think of, should you allow the input from the user to touch your code.</p>
    </div>