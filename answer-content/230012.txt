<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While I do agree with others that Solution 2 is more readable with some improvements, there are also a few improvements that can be done on Solution 1.</p>

<ul>
<li><p>It is unnecessary to construct lists from iterables (e.g., generator expressions) when all that is needed is an iterable. For example, </p>

<pre><code>_args      = [arg if type(arg)!=dict else arg.items() for arg in args]
args_split = [arg for arg in zip(*_args)]
</code></pre>

<p>Here, the unpacking operator <code>*</code> works on arbitrary iterables. So one can just do</p>

<pre><code>_args      = (arg if type(arg)!=dict else arg.items() for arg in args)
args_split = [arg for arg in zip(*_args)]
</code></pre>

<p>The parantheses keep the generator expressions without actually materializing them into lists.</p></li>
<li><p>It is better to use <code>isinstance(arg, cls)</code> rather than <code>type(arg) == cls</code></p></li>
<li>Unpacking an iterable into a list can be done using <code>list(iterable)</code>, which is more efficient than a list comprehension <code>[arg for arg in iterable]</code> that uses an explicit <code>for</code>-loop.</li>
<li><p>This expression</p>

<pre><code>[args_types[i](arg) for i, arg in enumerate(args_shuffled)]
</code></pre>

<p>can be rewritten using <code>zip</code> to avoid the need of indices:</p>

<pre><code>[cls(arg) for cls, arg in zip(args_types, args_shuffled)]
</code></pre></li>
</ul>

<p>Following is an improved version of Solution 1</p>

<pre><code>def ordered_shuffle(*args):
    arg_types = map(type, args)
    arg_elements = (arg.items() if isinstance(arg, dict) else arg for arg in args)
    zipped_args = list(zip(*arg_elements))
    random.shuffle(zipped_args)
    return [cls(elements) for cls, elements in zip(arg_types, zip(*zipped_args))]
</code></pre>
    </div>