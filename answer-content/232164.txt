<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Improvements:</p>

<ul>
<li>End-to-end use of <code>Stream&lt;Path&gt;</code>, avoiding reading all <code>Path</code>s into memory</li>
<li>Written as a utility method (better for unit testing)</li>
<li>Use of <a href="https://www.baeldung.com/java-sneaky-throws" rel="nofollow noreferrer">sneaky throws</a> to "downgrade" (checked) <code>IOException</code> for use in a lambda.</li>
<li>NOT DONE. Cache <code>Pattern</code> once <em>ever</em></li>
<li>NOT DONE. Some level of Javadoc.</li>
<li>NOT DONE. Swallow <code>IOException</code> and return <code>Optional.absent()</code></li>
<li>NOT DONE. Side-caching of attributes to avoid re-reading them</li>
</ul>

<pre class="lang-java prettyprint-override"><code>  public static void main(String[] args) throws IOException {
    Optional&lt;Path&gt; f = getLatestFile(Path.of("."), ".*\\.java");
    System.out.println(f);
  }

  public static Optional&lt;Path&gt; getLatestFile(Path root, String filenameRegex) throws IOException {
    Pattern pattern = Pattern.compile(filenameRegex);
    return Files.find(
      root,
      6,
      (p, attr) -&gt;
        !attr.isDirectory() &amp;&amp;
        pattern.matcher(p.getFileName().toString()).matches())
      .max(Comparator.comparing(FilesNewest::creationTime));
  }

  private static &lt;E extends Throwable&gt; FileTime creationTime(Path p) throws E {
    try {
      return Files.readAttributes(p, BasicFileAttributes.class).creationTime();
    } catch (IOException e) {
      //noinspection unchecked
      throw (E)e; // Sneaky throws
    }
  }
</code></pre>
    </div>