<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<h3>Logic flaw</h3>

<p>I noticed that if I enter a value greater than <code>2</code> and less than <code>9</code> (e.g. <code>4</code>) then the only thing written is that value that I entered. Should that be the case? And what about non-integer numbers - should 2.3 be accepted? </p>

<h3>Keywords, ES-6 features</h3>

<p>Your code uses the keyword <code>let</code>, which became standard with the <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a><sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Specifications" rel="nofollow noreferrer">1</a></sup> specification, as well as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Specifications" rel="nofollow noreferrer">template literals</a> which also became standard with that same specification. That means there are other ecmascript-6 features that could be used to simplify this code like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" rel="nofollow noreferrer"><code>Array.fill()</code></a>. Also, <code>const</code> can be used for any value that doesn't need to be re-assigned, like <code>value</code>. That way there is no risk of accidental re-assignment elsewhere in the code.</p>

<h3>Variable scoping</h3>

<p>Because none of your code is wrapped in a function most variables are visible globally. However, some are declared with <code>let</code>, like <code>value</code> and the <code>i</code> within the first <code>for</code> loop - those would be visible within any enclosing braces. However other variables are not declared with a keyword like <code>var</code>, <code>const</code> or <code>let</code>, which means those are global variables. </p>

<h3>Use of <code>document.write()</code></h3>

<p>I see this code utilizes <code>document.write()</code>. In a larger application, that would likely lead to complications because any existing content would be cleared. For more reasons, see <a href="https://stackoverflow.com/a/802943/1575353">this top answer</a> (as well as the others) to <a href="https://stackoverflow.com/q/802854/1575353"><em>Why is document.write considered a “bad practice”?</em></a>. A better approach might be to have a container in the DOM that can be updated when appropriate.</p>

<h3>Rewrite</h3>

<p>The code below uses <code>document.getElementById()</code> to fetch a reference to a DOM element and update its contents once, instead of writing to the document with <code>document.write</code>. It also has a <code>while</code> loop to ensure the value is either <code>2</code> or <code>9</code>. That could be re-written as a <code>for</code> loop if desired.</p>

<p><code>parseInt()</code> is used to convert the input and indexes to integers, to allow proper arithmetic operations before using those numbers in the strings.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>let value = -1;
while (![2, 9].includes(value)) {
  value = parseInt(prompt("Enter Value between 2 or 9"), 10);
}

const outputArray = [value];
for (const index in new Array(10).fill()) {
  const value2 = value + parseInt(index, 10);
  outputArray.push(`${value2} times 2 is:${value2 * 2}`);
}
document.getElementById('container').innerHTML = outputArray.join('&lt;br/&gt;');</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="container"&gt;&lt;/div&gt;</code></pre>
</div>
</div>


<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Specifications" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Specifications</a></sub></p>
    </div>