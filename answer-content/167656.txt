<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Introduction</strong></p>
<p>After reflecting and reading other answers, I found that <em>Adam Smith</em> is right: we should get rid of the class. For this problem I think that it's better to structure the program as a group of functions. This is my new answer.</p>
<p><strong>Style</strong></p>
<p>Variable names should be lowercase, so your variable <code>BMI</code> should be renamed <code>bmi</code>.</p>
<p><strong>Modularity</strong></p>
<p>According to <em>Wikipedia</em>, <strong>"In software design, modularity refers to a logical partitioning of the "software design" that allows complex software to be manageable for the purpose of implementation and maintenance. The logic of partitioning may be based on related functions, implementation considerations, data links, or other criteria."</strong> So you should divide your code into smaller units, for this purpose we will divide your code into a group of functions.</p>
<p>This is better, because it's a bad practice, IMHO, to write all your code as a single whole without dividing it into units. This makes your code reusable, readable, and maintainable.</p>
<p><strong>Documentation</strong></p>
<p>It's a good practice, IMHO, to document your code, this makes it more readable and easier to use. For this purpose we will use docstrings to document the functions that we'll define. Docstings are indented and contained into triple quotes, they describe what the function does, its arguments, the type of its arguments, its return value and the type of the return value (when used with functions). Docstrings are the right way to document functions, not comments, because if you need help about using the function, you can use <code>help(name here)</code> to display the docstring and get help, which you can't do with comments.</p>
<p><strong>Dividing the Code into Functions</strong></p>
<p>To achieve modularity, we'll divide the code into functions. We'll define:</p>
<ul>
<li><p>a boolen-valued function (a function that returns only <code>True</code> or <code>False</code>) that asks whether the user wants to start. We will rename <code>to_start</code> to <code>answer</code>. Using <code>upper</code> method, we'll make the input uppercase, so we can compare it to 'Y' and 'N' easily if the user entered 'y' or 'n' instead.</p>
</li>
<li><p>a function that handles both weight and height.</p>
</li>
<li><p>a function that takes calculates the BMI and returns it.</p>
</li>
<li><p>a function that returns the weight status.</p>
</li>
<li><p>a function called <code>main</code> that contains all the code that will be executed. We'll use it as the body of <code>if __name__ == '__main__'</code> by calling it.</p>
</li>
</ul>
<p><strong>Return Value</strong></p>
<p>Instead of making our new functions print the output, we'll make them return it. You can read about return values <a href="http://greenteapress.com/thinkpython2/html/thinkpython2007.html#sec70" rel="nofollow noreferrer">here</a> (this is a link to chapter in <em>Think Python 2e</em>, I recommend that you read the whole book). Just printing the output gets the job done but makes functions less reusable. Suppose that you want to store the BMIs associated with users in a textfile, what will you do? Sure you can make other functions to get this done, but if you make your functions return the result you can reuse many cases.</p>
<p><strong>Code after Refactoring</strong></p>
<pre><code>def body_mass_index(weight, height):
    """Returns the BMI based on weight and height.

    weight: float or int

    height: float or int

    Returns: float or int
    """
    return round(weight / height ** 2 , 2)


def weight_category(bmi):
    """Returns the weight category of the user based on their BMI.

    Returns: str
    """
    if bmi &lt; 18.5:
        return 'underweight'

    elif 18.5 &lt;= bmi &lt;= 24.99:
        return 'healthy weight'

    elif 25.0 &lt;= bmi &lt;= 29.99:
        return 'overweight'

    elif bmi &gt; 30:
        return 'obese'


def wants_to_start():
    """Asks whether the user wants to start.

    Returns: bool
    """
    while True: 
        answer = input("Y to start N to exit: ").upper()

        if answer == 'Y':
            return True
        elif answer == 'N':
            return False

        print('Please try again.\n')


def get_user_data():
    """Asks for the user's weight and height.

    Rerurns: tuple of 2 floats or integers
    """   
    while True:
        try:
            weight = float(input('Enter your weight in kilograms: '))
            height = float(input('Enter your height in meters: '))

            if 0 &lt; weight and 0 &lt; height:
                return weight, height
            else:
                raise ValueError()

        except ValueError:
            print('Invalid input for weight or height')
            continue


def main():
    if wants_to_start():
        weight, height = get_user_data()
        bmi = body_mass_index(weight, height)
        category = weight_category(bmi)
        print('Your BMI is: ', bmi)
        print('Your are ', category, '.')

    else:
        quit()

if __name__ == '__main__':
    main()
</code></pre>
<p><strong>Notes</strong></p>
<p>The function <code>get_user_data</code> is adopted from <em>Lukasz Salitra</em>'s function <code>_get_user_info</code> in his answer to the OP's previous question. You can find the question <a href="https://codereview.stackexchange.com/questions/167163/bmi-calculator-using-python-3/167167">here</a>.</p>
<p>I'm no expert on BMI, so I've no idea if the program does what it's supposed to do <em>properly</em>. I focused on making the code more reusable, readable, and well-structured, <em>according to what I know as a beginner</em>.</p>
    </div>