<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you further improve your program.</p>

<h2>Eliminate arrays by carefully rethinking the problem</h2>

<p>At the end of the program, all that is needed is the <code>cheapest_order</code> and the <code>cheapest_shop</code>.  All of the arrays could be eliminated by simply keeping, as each shop total is calculated, the current cheapest order.  There is no need to keep any data from a shop that is not cheapest, nor any reason to store the ingredient costs in an array.</p>

<h2>Fix the bugs</h2>

<p>If the <code>scanf</code> fails, as it does if the user inputs a letter instead of a number, the program acts as if the number <code>1</code> had been entered, and the user gets no chance to correct it.  Also, when I entered <code>-1</code> for the number of shops to be visited, I got this result:</p>

<pre><code>How many shops will be visited? -1
The cheapest  order  was  at  shop #1, and the total cost of the order was $81082112.00
</code></pre>

<h2>Test your code thoroughly</h2>

<p>One way to test the code is to simply try it multiple times.  A better way is to automate the process by writing a test driver.  There are many ways to do this; one simple way is to manually create a few files with test input and then feed them to the program.  </p>

<h2>Don't use floating point for money</h2>

<p>There is a problem using floating point (that is, <code>float</code> or <code>double</code> types) to represent money values.  See <a href="https://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency">this question</a> for a thorough explanation for why that's the case.</p>

<p>An alternative is to keep a number of cents as an integer value internally.  For more depth about floating point issues, I'd recommend the excellent article <a href="http://www.validlab.com/goldberg/paper.pdf" rel="nofollow noreferrer">"What every computer scientist should know about floating-point arithmetic"</a> by David Goldberg.</p>
    </div>