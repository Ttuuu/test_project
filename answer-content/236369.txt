<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know it's answered, but I think the whole converting to char array is not needed. </p>

<p>You can simplify it further to (based on original code):</p>

<pre><code>// SNString?.Length == 16                      -&gt;  Should be exactly 16 characters
// SNString?[3] == '-'                         -&gt;  the first dash should be in index number 3
// SNString?[12] == '-'                        -&gt;  the first dash should be in index number 12
// SNString?.Replace("-", "")?.Length == 14    -&gt;  if there is only 2 dashes, then removing them would result with length == 14, otherwise is false
return SNString?.Length == 16 &amp;&amp; SNString?[3] == '-' &amp;&amp; SNString?[12] == '-' &amp;&amp; SNString?.Replace("-", "")?.Length == 14;
</code></pre>

<p>which is equivalent to :</p>

<pre><code>if(SNString?.Length == 16)
{
    if (SNString?[3] == '-' &amp;&amp; SNString?[12] == '-' &amp;&amp; SNString?.Replace("-", "")?.Length == 14)
        return true;
}

return false;
</code></pre>

<p>You should check the length of the provided string, then apply the other validations. 
The string length will determine if you need to apply the other validations or not.
if the string's length is not equal to 16, then surely it's not a valid format.
if the string length == 16, then it's a valid format which needs to be validated.
Then you just get the position of the first and last dashes. if they're in the correct position, 
then the first, second, and third parts should have the correct length. Then, you can use <code>Replace</code> to replace all dashes with empty string, and check the result length, if the result is 14, then there were only two dashes, which is valid, otherwise is not valid. </p>

<p>Now, you can validate three parts <code>XXX-XXXXXXXX-XXX</code>, if your characters group are all numbers (without the dashes), 
then you can add something like <code>ulong.TryParse(SNString?.Replace("-", string.Empty), out ulong result)</code>, if true, then they're all numbers, otherwise it's false.</p>

<p>Doing that, would avoid converting it to char array.</p>

<p>There is one thing that you should consider, if there is certain format for each characters group, you might need to use <code>Regex</code> instead. 
For instance, if the first part should always contains letters only, or one digit with two letters ..etc. 
then the current validation process will provide a non-valid string. Also, you might consider adding a validation of English letters and Digits to avoid having some non-English inputs. </p>

<p>here is Regex example (for future reference) :</p>

<pre><code>System.Text.RegularExpressions.Regex.Match(SNString, @"^[^-]{3}-[^-]{8}-[^-]{3}$");
</code></pre>

<p>With this, you'll have the flexablity to adjust the regex pattern to match the conditions you need. </p>
    </div>