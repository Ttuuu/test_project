<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Constructor</h2>
<pre><code>def _init_(self):
</code></pre>
<p>is not a constructor; this needs to be <code>__init__</code>.</p>
<h2>Pickle?</h2>
<p>For a simple flat dictionary with a string key and a string value, pickle is an odd choice. It will be more difficult for you to debug, and unless you're storing millions of files I doubt that the performance difference to JSON will be visible. You should probably just use JSON.</p>
<h2>Pathlib</h2>
<p>Instead of</p>
<pre><code>with open(f"{local_path}/s3_files_etag_map.p", "br") as f:
</code></pre>
<p>consider</p>
<pre><code>local_path = Path(local_path_str)
with (local_path / 's3_files_etag_map.p').open('rb') as f:
</code></pre>
<h2>Concurrency</h2>
<p>Apparently you do not need multiple processes to all access this cache index file at the same time. As such, there is no need to read it on every single request. Read it once, keep the dict in memory, and write it out whenever it changes.</p>
<p>In other words: move your file-reading code to your <code>__init__</code>; keep the dictionary as a member variable on the class; and any time that you previously read from the file, just use the dictionary that's already been loaded. Any time that you modify the dictionary, make sure to modify the member variable, and write to the file.</p>
<h2>Unpacking</h2>
<pre><code>s3_bucket_and_key = s3.deconstruct_s3_path(f"{s3_path}/{file_name}")
s3_etag_value = s3.get_object_etag(s3_bucket_and_key[0], s3_bucket_and_key[1])
</code></pre>
<p>should be</p>
<pre><code>bucket, key = s3.deconstruct_s3_path(f"{s3_path}/{file_name}")
s3_etag_value = s3.get_object_etag(bucket, key)
</code></pre>
<h2>Flattening logic</h2>
<pre><code>    if self.file_exists(local_path):
        if self.is_file_valid(local_path, file_name, s3_path):
            with open(f"{local_path}/s3_files_etag_map.p", "bw") as f:
                pickle.dump(self.s3_files_etag_map, f)
        else:
            self.download_and_cache_file(s3_path, local_path, file_name)
    else:
        os.makedirs(local_path)
        self.download_and_cache_file(s3_path, local_path, file_name)
</code></pre>
<p>can be</p>
<pre><code>if not self.file_exists(local_path):
    os.makedirs(local_path)
    self.download_and_cache_file(s3_path, local_path, file_name)
elif self.is_file_valid(local_path, file_name, s3_path):
    with open(f"{local_path}/s3_files_etag_map.p", "bw") as f:
        pickle.dump(self.s3_files_etag_map, f)
else:
    self.download_and_cache_file(s3_path, local_path, file_name)
</code></pre>
<h2>Testing</h2>
<p>Any kind of meaningful unit testing on this thing will require mocking. This is a fairly detailed topic; read the official documentation here:</p>
<p><a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html</a></p>
<p>You need to mock out most of <code>s3</code> to prevent it from connecting to the internet.</p>
    </div>