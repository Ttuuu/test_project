<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Don't repeat work</h3>

<blockquote>
<pre><code>        for (int i = -1; i &lt; 2; i++) {
            for (int j = -1; j &lt; 2; j++) {
                if (x + i &gt;= 0 &amp;&amp; y + j &gt;= 0 &amp;&amp; x + i &lt; BOARD_HEIGHT &amp;&amp; y + j &lt; BOARD_HEIGHT) {
                    if (boardArg[x + i][y + j] == Cell.ALIVE &amp;&amp; !(i == 0 &amp;&amp; j == 0)) {
                        liveNeighbours++;
                    }
                }
            }
        }
</code></pre>
</blockquote>

<p>You can simplify the math here.  Consider </p>

<pre><code>        int rightEdge = Math.min(x + 1, boardArg.length - 1);
        int bottomEdge = Math.min(y + 1, boardArg[0].length - 1);
        int topEdge = Math.max(y - 1, 0)
        for (int i = Math.max(x - 1, 0); i &lt;= rightEdge; i++) {
            for (int j = topEdge; j &lt;= bottomEdge; j++) {
                if (boardArg[i][j] == Cell.ALIVE &amp;&amp; (i != x &amp;&amp; j != y)) {
                    liveNeighbours++;
                    if (liveNeighbours &gt; 3) {
                        return Cell.DEAD;
                    }
                }
            }
        }
</code></pre>

<p>Rather than generating nine neighbors and testing which are valid, this only generates neighbors that are on the board.  The only invalid one is the cell itself.  </p>

<p>We do the math that is invariant to the loops before the loops.  Note that the declaration of <code>i</code> takes place before the loop iterates.  The initial declaration of <code>j</code> is invariant to <code>i</code> but occurs inside the <code>i</code> loop.  So we precalculate its initial value as <code>topEdge</code>.  We do each operation only once.  </p>

<p>If we find a fourth live neighbor, we can go ahead and quit.  We don't have to continue checking neighbors.  </p>

<p>Rather than rely on the parallel logic of the <code>BOARD_HEIGHT</code> constant, I use the actual size of the array.  Note that I do assume that all the rows of the array are the same length.  </p>

<p>I may have top and bottom the opposite of how your display works.  If so, please switch them.  </p>

<h3>Keep it simple</h3>

<blockquote>
<pre><code>        if (liveNeighbours &lt; 2 &amp;&amp; boardArg[x][y] == Cell.ALIVE)
            return Cell.DEAD;
        else if ((liveNeighbours == 2 || liveNeighbours == 3) &amp;&amp; boardArg[x][y] == Cell.ALIVE)
            return Cell.ALIVE;
        else if (liveNeighbours &gt; 3 &amp;&amp; boardArg[x][y] == Cell.ALIVE)
            return Cell.DEAD;
        else if (boardArg[x][y] == Cell.DEAD &amp;&amp; liveNeighbours == 3)
            return Cell.ALIVE;
        else
            return Cell.DEAD;
</code></pre>
</blockquote>

<p>This is more complicated than it needs to be.  </p>

<pre><code>        if (liveNeighbors == 3 || (liveNeighbors == 2 &amp;&amp; boardArg[x][y] == Cell.ALIVE)) {
            return Cell.ALIVE;
        } else {
            return Cell.DEAD;
        }
</code></pre>

<p>If there are three live neighbors, the cell is always alive.  If there are two, then the cell is only alive if it already was.  In all other cases, the cell is dead.  The rules are that simple.  </p>

<p>They make it sound more complicated by talking about over and under population and reproduction, but the rules boil down to two live cases.  </p>

<p>We had previously returned if there more than three live neighbors, but this code will handle that case as well.  That's just an optimization to save extra checks.  You may want to test if it actually helps in practice or not.  </p>

<p>I prefer to always use the block form of control structures.  It helps avoid certain kinds of editing mistakes.  </p>

<h3>Don't copy twice</h3>

<blockquote>
<pre><code>            for (int i = 0; i &lt; BOARD_HEIGHT; i++) {
                for (int j = 0; j &lt; BOARD_HEIGHT; j++) {
                    lastIteration[i][j] = board[i][j];
                }
            }

            for (int i = 0; i &lt; BOARD_HEIGHT; i++) {
                for (int j = 0; j &lt; BOARD_HEIGHT; j++) {
                    board[i][j] = changeCell(i, j, lastIteration);
                }
            }
            printBoard(board);
            Thread.sleep(TIME_BETWEEN_ITERATIONS_MS);
</code></pre>
</blockquote>

<p>You could instead do </p>

<pre><code>            for (int i = 0; i &lt; lastIteration.length; i++) {
                for (int j = 0; j &lt; lastIteration[i].length; j++) {
                    lastIteration[i][j] = changeCell(i, j, board);
                }
            }
            printBoard(lastIteration);
            Thread.sleep(TIME_BETWEEN_ITERATIONS_MS);

            for (int i = 0; i &lt; board.length; i++) {
                for (int j = 0; j &lt; board[i].length; j++) {
                    board[i][j] = changeCell(i, j, lastIteration);
                }
            }
            printBoard(board);
            Thread.sleep(TIME_BETWEEN_ITERATIONS_MS);
</code></pre>

<p>This switches between the two boards rather than copying one to the other.  </p>

<p>Note that the names should probably change to match.  E.g. <code>odd</code> and <code>even</code>.  Or make it a three dimensional array.  </p>

<p>Consider abstracting this into a method to reduce the duplicated code.  E.g. </p>

<pre><code>            processTurn(odd, even);
            processTurn(even, odd);
</code></pre>

<p>Where the method would contain the seven lines that are repeated.  </p>
    </div>