<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Remove unnecessary comments:</p>

<pre><code>var random = Factory.Random(); //Generates new Random() from Factory class.
</code></pre>

<p>It's obvious if you read the code.</p>

<p>It's ok to break those lines</p>

<pre><code>availableCharacters = characters
    .Where(c =&gt; !output.Substring((position - rule) + 1, rule - 1).Contains(c))
    .Aggregate(availableCharacters, 
        (current, c) =&gt; (current.Contains(c) 
            ? current 
            : current + c.ToString()));
</code></pre>

<p>Makes it a bit more readable. But still all these +1 -1 does not look very bug safe.</p>

<p>Here's my approach:</p>

<pre><code>private string PasswordGeneration(string characters, int length, int characterSpacing)
{
    var random = new Random();
    var randomList = new List&lt;int&gt;();
    var spacing = Math.Min(characterSpacing, characters.Length);
    // Generate indexes
    while(randomList.Count &lt; length) {
        var num = random.Next(0, characters.Length);
        var numNotInUse = randomList.LastIndexOf(num) == -1;
        var spacingOk = randomList.LastIndexOf(num) &lt; (randomList.Count - spacing);
        if (numNotInUse || spacingOk ) {
            randomList.Add(num);
        }
    }
    // Set password from indexes
    var password = string.Empty;
    randomList.ForEach(idx =&gt; password += characters.ElementAt(idx));
    return password;
}
</code></pre>

<p>Simple is usually better. At least more readable :)</p>
    </div>