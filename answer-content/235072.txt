<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>You might be able to use <code>std::pow()</code> in <code>constexpr</code> expressions in C++11</h1>

<p>Since this post was not tagged "reinventing-the-wheel", I want to point out that some compilers (notably GCC) will compile the below C++11 code:</p>

<pre><code>#include &lt;cmath&gt;

constexpr int ipow(int a, int b) {
    return std::pow(a, b);
}

int main(int argc, char *argv[]) {
    static_assert(ipow(-5, 3) == -125);
    return ipow(argc, 2);
}
</code></pre>

<p>One drawback is that <code>std::pow()</code> converts integer arguments to <code>double</code>, which at run-time may or may not result in slower computation than using <code>int</code>. Also, while for <code>int</code> there is no loss of precision, if you would want to use <code>int64_t</code>, there is a potential loss of precision.</p>

<p>The other drawback, as pointed out by Oliver Schonrock, is that not all compilers allow <code>constexpr</code> use of <code>std::pow()</code>. As explained in <a href="https://stackoverflow.com/questions/50477974/constexpr-exp-log-pow">this post</a>,
<code>constexpr</code> math functions were only allowed in C++11 but not in C++14. But there are libraries that provide <code>constexpr</code> math functions, see for example <a href="https://github.com/bolero-MURAKAMI/Sprout/blob/master/sprout/math/pow.hpp" rel="nofollow noreferrer">Sprout's <code>pow()</code> implementation</a>.</p>

<h1>Zero to the power zero is one*</h1>

<p>With most programming languages, one usually finds that <a href="https://en.wikipedia.org/wiki/Zero_to_the_power_of_zero#IEEE_floating-point_standard" rel="nofollow noreferrer"><code>pow(0, 0) == 1</code></a>. You should ensure your solution also returns one in that case, to ensure consistency, regardless of your personal feelings about zero to the power zero.</p>

<p>As a bonus, by having a well-defined result for <code>ipow(0, 0)</code>, it no longer throws exceptions, and you can get rid of some of the specializations.</p>

<h1>Catch exceptions by const reference</h1>

<p>Make it a habit to catch exceptions by const reference. Apart from being a little bit faster (although this of course is the least of your worries when exceptions are being thrown), it ensures you don't lose information when the exception thrown is of a derived class. See <a href="https://stackoverflow.com/questions/2522299/c-catch-blocks-catch-exception-by-value-or-reference">this StackOverflow question</a> for more information.</p>
    </div>