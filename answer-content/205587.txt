<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm afraid that the solution given is not better than the referenced <a href="https://codereview.stackexchange.com/questions/31051/please-review-my-solution-to-project-euler-program-1">C one</a> 
(although the C solution could be generalized and made a bit easier to understand) </p>

<p><strong>Why?</strong></p>

<p>The code under review has a outer loop that is executed 333 times (with a multiplication in each condition check). We can remove the multiplication to do the job a bit more cheaply</p>

<pre><code>for (int i = 1; i &lt;= 333; i++)
</code></pre>

<p>But, even with the restructured loop we still do</p>

<p>this,  <strong>sum += 3 * i;</strong>, 333 times and then <br>
this,   <strong>5 * i &lt; 1000 &amp;&amp; (5 * i) % 3 != 0</strong>, 333 times</p>

<p>As opposed to</p>

<p><strong>S1= a*(b+c)/2;</strong>, once  <br>
<strong>s2= k*(i+j)/2;</strong>, once  <br>
<strong>s3= n*(m+o)/2;</strong>, once  <br>
<strong>S= S1 + s2 - s3;</strong>, once  <br></p>

<p>It is a bit of a cheat in the C solution that the various magic numbers are hardcoded; but even allowing for a function to calculate the values</p>

<pre><code>var sum3 = SumDivisibleBy(999,3);
var sum5 = SumDivisibleBy(999,5);
var sum15 = SumDivisibleBy(999,15);
var sum35 = sum3 + sum5 - sum15;


private static int SumDivisibleBy(int range, int divisor)
{
    var top = range/divisor;
    var ret = divisor*top*(top+1)/2;
    return ret;
}
</code></pre>

<p>is a lot cheaper than brute-forcing the solution.</p>

<p>In the original solution, for numbers under 1000, we need to loop 333 times, for numbers under 10000, we need to loop 3333 times,...  It doesn't scale well.  For the other solution, there are the same number of operations each time.</p>
    </div>