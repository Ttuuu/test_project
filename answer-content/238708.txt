<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just one remark: do not copy-paste code and then change one tiny bit of it. This indicates that you should create a method. What I mean is this:</p>

<pre><code>var newPoint = new CustomPoint(pointToProcess.Column, pointToProcess.Row + 1);
grid[newPoint.Row, newPoint.Column] = 1;
toPropagateInNextGeneration.Enqueue(newPoint);
</code></pre>

<p>Those three lines are always the same, except the values of the parameters used in the <code>CustomPoint</code> constructor.</p>

<p>I'd create a <code>AllPointsPropagator</code> like this:</p>

<pre><code>internal class AllPointsPropagator
{
    private static readonly Queue&lt;CustomPoint&gt; ToPropagateInNextGeneration = new Queue&lt;CustomPoint&gt;();

    public static Queue&lt;CustomPoint&gt; Execute(int rows, int columns, int[,] grid, Queue&lt;CustomPoint&gt; toPropagate)
    {
        while (toPropagate.Count &gt; 0)
        {
            var pointToProcess = toPropagate.Dequeue();
            if (EmptyBottom(rows, grid, pointToProcess))
            {
                AddNewPoint(grid, pointToProcess.Column, pointToProcess.Row + 1);
            }

            if (EmptyLeft(grid, pointToProcess))
            {
                AddNewPoint(grid, pointToProcess.Column - 1, pointToProcess.Row);
            }

            if (EmptyRight(columns, grid, pointToProcess))
            {
                AddNewPoint(grid, pointToProcess.Column + 1, pointToProcess.Row);
            }

            if (EmptyTop(grid, pointToProcess))
            {
                AddNewPoint(grid, pointToProcess.Column, pointToProcess.Row - 1);
            }
        }

        return ToPropagateInNextGeneration;
    }

    private static void AddNewPoint(int[,] grid, int column, int row)
    {
        var newPoint = new CustomPoint(column, row);
        grid[newPoint.Row, newPoint.Column] = 1;
        ToPropagateInNextGeneration.Enqueue(newPoint);
    }
</code></pre>

<p>The four <code>Empty*</code> methods should also move to this class. Now <code>PropagateAllPoints()</code> can be replaced by <code>AllPointsPropagator.Execute(rows, columns, grid, toPropagate);</code>.</p>
    </div>