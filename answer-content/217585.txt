<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>
<p>Unfortunately both your functions return bad results for many input arguments. You don't carry.</p>
<p>Both should return [0,1] however they return [0]</p>
<pre><code>addTwoNumbers([1], [9]); // &gt;&gt; [0] wrong
addTwoNumbers2([1], [9]);  // &gt;&gt; [0] wrong
</code></pre>
<p>And the return for the following should be [6,0,1] but they return [6,6]</p>
<pre><code>addTwoNumbers([9], [7, 9]);  // &gt;&gt; [6, 6] wrong
addTwoNumbers2([9], [7, 9]);  // &gt;&gt; [6, 6] wrong
</code></pre>
<p>The reason is that you forget to deal with the carry.</p>
<h2>To number?</h2>
<p><a href="https://codereview.stackexchange.com/a/217580/120556">Konijn's answer</a> is a tempting solution but will also fail as it is limited by JS Number.</p>
<pre><code>addTwoNumbers([1,1,9,9,0,4,7,4,5,2,9,9,1,7,0,0,9], [1,9,9,0,4,7,4,5,2,9,9,1,7,0,0,9])
</code></pre>
<p>The correct answer is</p>
<p>[2,0,9,0,5,1,2,0,8,1,9,1,9,7,0,9,9]</p>
<p>However Konijn's solution incorrectly returns.</p>
<p>[0,0,9,0,5,1,2,0,8,1,9,1,9,7,0,9,9]</p>
<p>This is because the second number is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" rel="nofollow noreferrer"><code>Number.MAX_SAFE_INTEGER</code></a> above which you can not get a reliable result.</p>
<h2><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" rel="nofollow noreferrer">BigInt</a></h2>
<p>You could use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" rel="nofollow noreferrer">BigInt</a> as its size is not limited.</p>
<p>Big ints can be written with the suffix n</p>
<pre><code> const big = 9907919180215090099079191802150900n;  // Note the suffix n
</code></pre>
<p>To convert the reversed number to a big int</p>
<pre><code> const a = [0,0,9,0,5,1,2,0,8,1,9,1,9,7,0,9,9,0,0,9,0,5,1,2,0,8,1,9,1,9,7,0,9,9];
 const big = BigInt(a.reverse().join(""));
</code></pre>
<p>Thus your function would be</p>
<pre><code> const addTwoNumbers = (a, b) =&gt; (
          BigInt(a.reverse().join("")) + 
          BigInt(b.reverse().join(""))
      ).toString().split("").reverse();
</code></pre>
<p>But that takes the puz out of puzzle me thinks.</p>
<h2>Carry</h2>
<p>The aim is to carry the remainder of each addition onto the next digit. This is fundamental to all <a href="https://en.wikipedia.org/wiki/Arithmetic_logic_unit" rel="nofollow noreferrer">ALU (Arithmetic Logic Units)</a> that are part of almost every modern CPU. (In the case of binary the carry is 1 or 0)</p>
<p>So when you add two values 9 + 9 the result is 8 and carry 1. You then add the 1 to the next digit. If no digit add it to zero. The result is 18.</p>
<p>The function is thus</p>
<p>Example A</p>
<pre><code>function addNumbers(a, b) {
    const sum = [];
    var i = 0, carry = 0;
    while (i &lt; a.length || i &lt; b.length || carry &gt; 0) {
        carry += (a[i] ? a[i] : 0) + (b[i] ? b[i] : 0);
        sum.push(carry % 10);
        carry = carry / 10 | 0;
        i++;
    }
    return sum;
}
</code></pre>
<p><strong>Note</strong> That it continues adding digits until the carry is zero.</p>
<h2>Performance</h2>
<p>I am not surprised that the big int solution is nearly 7 times slower than carry method (example A) above, but this is due to the <code>reverse</code>s, <code>join</code>s, and <code>split</code></p>
<p>Big int are not fast (Very slow compared to standard JS numbers), doing the same sum on big int literals is only 5 times faster than the carry method (example A)</p>
<h2>NOTES</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" rel="nofollow noreferrer">BigInt</a> is very new and you should check the browser for support before using it.</p>
<p>Big int also sees the arrival of 64bit int arrays (YAY YAY YAY) <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array" rel="nofollow noreferrer"><code>BigUint64Array</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array" rel="nofollow noreferrer"><code>BigInt64Array</code></a> (sorry MDN has empty pages on these references)</p>
    </div>