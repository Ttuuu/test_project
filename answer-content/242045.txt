<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think there is a mistake, this line is defined twice (line 28):</p>

<pre><code>self.check_box2.stateChanged.connect(self.onStateChange)
</code></pre>

<p>Therefore the event <code>onStateChange</code> is triggered twice when you check <code>check_box2</code>, which is logical.</p>

<p>I think you did a copy paste and the last should be <code>check_box3</code>. But your <strong>naming conventions</strong> are not intuitive, give your objects some more <strong>meaningful names</strong>, otherwise how are you going to tell the difference from your code.</p>

<p>If what you want is <strong>mutually exclusive</strong> checkboxes the implementation could be more straightforward. Personally I prefer to use radio buttons like in plain HTML because this is more intuitive (it is immediately obvious that only one answer is allowed).</p>

<p>First approach: a generic method that loops on the checkboxes in your form and unchecks all of them except the sender. Then you can simplify code and get rid of <code>if/elif</code></p>

<p>Second approach: use QT built-in features. You could wrap your checkboxes in a <code>QButtonGroup</code> container.</p>

<blockquote>
  <p>A rectangular box before the text label appears when a QCheckBox
  object is added to the parent window. Just as QRadioButton, it is also
  a selectable button. Its common use is in a scenario when the user is
  asked to choose one or more of the available options.</p>
  
  <p>Unlike Radio buttons, check boxes are not mutually exclusive by
  default. In order to restrict the choice to one of the available
  items, the check boxes must be added to QButtonGroup.</p>
</blockquote>

<p>and:</p>

<blockquote>
  <p><strong>As mentioned earlier, checkBox buttons can be made mutually exclusive
  by adding them in the <code>QButtonGroup</code> object.</strong></p>

<pre><code>self.bg = QButtonGroup()
self.bg.addButton(self.b1,1)
self.bg.addButton(self.b2,2)
</code></pre>
  
  <p><code>QButtonGroup</code> object, provides abstract container for buttons and
  doesn’t have a visual representation. It emits <code>buttonCliked()</code> signal
  and sends Button object’s reference to the slot function <code>btngroup()</code>.</p>
</blockquote>

<p>Source: <a href="https://www.tutorialspoint.com/pyqt/pyqt_qcheckbox_widget.htm" rel="nofollow noreferrer">PyQt - QCheckBox Widget</a></p>
    </div>