<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things I notice right off the bat.</p>

<ol>
<li><p>Your variable names while not bad, could be better.  For instance <code>props</code> -&gt; <code>properties</code>.  Stuff like this makes the code easier to read.</p></li>
<li><p>You have the properties, why not use a <code>foreach</code> loop to fill the datatable (you did it in ToDataSet)</p></li>
<li><p>the <code>_</code> prefex should be used for class variables, not local variables.</p></li>
<li><p>try using <code>var</code> when declaring obvious variable types <code>var row = t.NewRow()</code></p></li>
<li><p>There is no error checking when you are filling the values in the data table.  What happens if it is not a class (int, double, long)?  You could force the generic to be a class by adding <code>where T : class</code>.</p></li>
<li><p>Why don't you use the <code>ToDataTable</code> method to create the table in the <code>ToDataSet</code> method?  This will eliminate duplicate code, and have 1 point of failure/modification as required.  As an aside, I would use the code from <code>ToDataSet</code> to create your <code>DataTable</code>, as it is written better.</p></li>
<li><p>While I applaud your use of it, I'm not sure the <code>using</code> syntax is appropriate here.  I would move that to where these methods are being called <code>using (var dt = list.ToDataTable())</code>  Having it here will more than likely cause unexpected things to happen in your code.</p></li>
<li><p>I would make these extend <code>IEnumerable&lt;T&gt;</code> as that will make them way more useful by not limiting them to <code>IList&lt;T&gt;</code>.</p></li>
</ol>

<p>I do like your use of white space and indentation, so good job on that.  The extra indentation will be removed when the <code>using</code> statements are removed.  I also like the name of your methods, very clear and concise to their intent. </p>
    </div>