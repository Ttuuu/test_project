<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall the code is well-written, consistent and easy to follow.</p>

<p><strong>Program design / big picture</strong></p>

<ul>
<li><p>Having one .c file per function is quite extreme - this just creates a lot of fuss when linking and maintaining the code. This isn't a whole lot of code, so it is hard to justify splitting it in so many different .c files when it could have been placed in a single file. The opaque struct definition could then also be placed in this single .c file, making <code>stack_interal.h</code> mostly superfluous.</p></li>
<li><p>One exception to the above is error handling/diagnostics, which should be put in a file of its own. You definitely should not mix your ADT with console output etc. Either leave error diagnostic printing to the caller, or put it in a separate (public) file. Libs shouldn't call functions like abort() or exit() internally, leave such things to the caller or it will make debugging a pain for them. (Also, not all systems support stdio.h)</p>

<p>Also, you aren't consistent here, since your program does not deal with malloc errors internally, but passes on NULL to the caller.</p></li>
<li><p>Inventing your own "macro language" is always a bad idea. The caller should simply call <code>stack_push</code> instead of <code>push</code>. The <code>stack_</code> prefix having the huge advantage of self-documenting which source file the function belongs to. <code>push</code> and <code>pop</code> etc are also common names (even assembler mnemonics in some cases), so the potential for namespace collisions is pretty big. </p>

<p>I would strongly recommend to get rid of <em>all</em> of these function-like macros, they just add a type safety hazard while at the same time making the source harder to read and maintain.</p></li>
<li><p>Instead of passing around the ugly (and thread unsafe) <code>stack_global</code>, let the user of your lib be the one to worry about keeping tabs of the pointers to your ADT.</p></li>
<li><p>Always name the parameters in the public header and document their use, in source code comments. </p></li>
<li><p>Allowing your code to be compiled from C++ (as indicated by your noreturn handling macros) will require a lot of stricter typing, most notably when dealing with void pointers. Currently, this code won't compile at all in C++, unless you add various <code>extern "C"</code> tricks.</p></li>
</ul>

<p><strong>Coding style</strong></p>

<ul>
<li><p><code>#include &lt;stack.h&gt;</code> Don't use <code>&lt; &gt;</code> for your own headers, only for standard lib headers. Unlike when you use <code>" "</code>, the compiler isn't required to check the local path for the location of the header, so it might just check its own library path.</p></li>
<li><p>Avoid assignment inside conditions. It is dangerous, error-prone and makes the code harder to read. There are a few cases when you can justify it but they are very rare.</p>

<p>Instead of <code>if((ret = malloc(sizeof(*ret))))</code>, you should do</p>

<pre><code>ret = malloc(sizeof *ret);
if(ret != NULL)
</code></pre></li>
<li><p>I often advise against the <code>do {...} while(0)</code> trick, because its only purpose is to allow code such as <code>if(x) y(); else</code>. It is best practice to always use compound statements after control or loop statements, that is <code>{ }</code>. Getting a compiler error for forgetting to add <code>{ }</code> is not necessarily a bad thing.</p></li>
<li><p>Unless you only intend the stack to work with strings, using <code>char</code> as a generic byte type isn't a good idea. The main problem being that it has implementation-defined signedness and therefore can cause all manner of subtle, severe bugs related to implicit type promotion, integer overflows or bitwise operations. Instead, use <code>uint8_t</code>.</p></li>
<li><p>It's not really necessary to explicitly add <code>extern</code> linkage to function declarations, as that's the default linkage anyway. It tends to confuse less experienced programmers and that's about all it does. (I used that style myself for a long while until I got fed up with explaining it.)</p></li>
<li><p>I recommend to put all library includes inside the public header instead of in the .c files. That way you document all library dependencies to the caller.</p></li>
<li><p>I disagree that an explicit cast from <code>ptrdiff_t</code> to <code>size_t</code> is an ugly cast. However, for various "language lawyer" reasons, <code>ptrdiff_t</code> should always end up larger than <code>size_t</code>, so strictly speaking the cast shouldn't be needed at all.</p></li>
</ul>

<p><strong>Optimizations</strong></p>

<ul>
<li><p>Storing the size of the stack explicitly will save you from a lot of extra run-time arithmetic. Faster execution at the expense of a little extra memory consumption for the ADT.</p></li>
<li><p>In order to reduce the amount of needed <code>realloc</code> calls you could alloc some even multiple of the CPU alignment and keep track of the allocated size. When running out of allocated memory, you'd allocate <em>n</em> new segments and not just the necessary size. Again, this is an execution speed optimization, at the cost of memory use. </p>

<p>(It's possible that keeping the same chunk of memory for longer before calling realloc will also lead to slightly better data cache performance on some systems, but that's speculation.)</p></li>
</ul>

<p><strong>Bugs</strong></p>

<ul>
<li><p>Upon free() you don't set the freed memory to NULL (and your interal API does not allow this). Therefore <code>STACK_INIT</code> -&gt; <code>STACK_FINI</code> -&gt; <code>stack_destroy</code> -&gt; <code>if(stack) free(stack-&gt;beg);</code> is always a bug, because <code>stack</code> is either not initialized or it can be non-null, but pointing at garbage. <code>free()</code> can however not set the pointer to NULL afterwards.</p></li>
<li><p>Typo, you include <code>#include &lt;stdlib.h&gt;</code> twice in stack_create.c</p></li>
</ul>
    </div>