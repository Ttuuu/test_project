<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a quick reminder before we get started: In case you want to do anything serious with matrices in Python, consider using the <a href="https://numpy.org/" rel="nofollow noreferrer">NumPy</a> library instead of roling your own matrix class. NumPy is the de-facto standard when it comes to numeric operations in Python and is in the general case (very likely much) faster than anything you write yourself. It's always the loops that get you in the end ;-)</p>

<hr>

<h1>Overall feedback</h1>

<p>Your code looks quite good from an overall point of you regarding style and layout. The <code>Matrix</code> class would profit from further documentation using <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a>, such as the one you have started to use on <code>MatrixError</code>. This is especially important when you have methods/constructors that accept <code>*args</code>. Without proper documentation, everything that remains for someone else but you would be to read the code or get it working by trial and error.</p>

<h1>Class interface</h1>

<p>I would consider declaring <code>self.matrix</code> as "private"/internal by prefixing it with an <code>_</code> to discourage user to directly interact with the inner data representation of your class. To allow changing the data, consider also implementing <code>__setitem__</code> for your class. Having classmethods to construct special matrices is quite a common approach, e.g. used by the C++ libraries Eigen (e.g. <code>MatrixXf::Identity</code>) and OpenCV (e.g. <code>Mat::eye</code>). NumPy on the other hand has them as top-level module functions (e.g <code>np.identity</code>). You'll have to decide what's your preferred way to go.</p>

<h1>The constructor</h1>

<p>The "copy" constructor looks a little bit odd to me. Why would you bother using <code>self.rows = len(self.matrix)</code> and <code>self.cols = len(self.matrix[0])</code> when the other matrix should have the attributes properly set? Dont't you trust your own implementation? ;-)</p>

<p>The same error message is repeated three times in the constructor. Under the assumption you wouldn't want to have a zero-sized matrix (no rows, no cols, no data), removing them and checking</p>

<pre><code>if not self.matrix:
    raise MatrixError("Expected Matrix, list, or int * int")
</code></pre>

<p>at the end will help you to reduce the duplication here. Maybe also use <code>None</code> instead of <code>[]</code> as default value of <code>self.matrix</code> and then check for <code>if self.matrix is None:</code>.</p>

<p>I'm also not entirely sure <code>"int * int"</code> gets the message across to possible users, so that they really understand what they are supposed to provide to the constructor.</p>

<h1>Reduce nesting</h1>

<p>Some of your methods like <code>__eq__</code>, <code>__add__</code>, <code>determinant</code>, <code>inverse</code> perform input validation and raise an exception if the input is not valid. You can reduce the level of nesting in that case if you return early. So instead of </p>

<pre><code>def determinant(self):
    if self.is_square():
        ... # do the actual work
    else:
        raise MatrixError("Determinant only defined for square matrices")
</code></pre>

<p>do</p>

<pre><code>def determinant(self):
    if self.is_square():
        raise MatrixError("Determinant only defined for square matrices")
    ... # do the actual work
</code></pre>

<p>This helps to reduce the needed level of indentation and makes it clearer what happens when the condition is violated.</p>

<h1>String formatting</h1>

<p>A more modern approach to generate the error message in <code>__add__</code> and <code>__mul__</code> would either be to use <code>.format(...)</code> (Python 2, Python 3) or f-strings (Python 3.6+):</p>

<pre><code># .format(...)
MatrixError(
    "Can't multiply ({}, {}) matrix with ({}, {}) matrix".format(
        self.rows, self.cols, other.rows, other.cols
    )
)

# f-string
MatrixError(
    f"Can't add or subtract {self.rows} x {self.cols} matrix "
    f"with {other.rows} x {other.cols} matrix"
)
</code></pre>

<h1>Performance</h1>

<p>The implementation of <code>__sub__</code> is computationally wasteful, since you have to iterate over all the rows and columns twice. Although it does not get rid of that problem, you can also implement this using your <code>__neg__</code> as <code>-other + self</code>.</p>
    </div>