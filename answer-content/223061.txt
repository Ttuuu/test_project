<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Use functions where appropriate</h2>

<p>This is perhaps somewhat unusual advice to give for a C++ review, but there's not really any point to having <code>convert</code> be part of an object.  It could function much more logically as a free function.</p>

<h2>Simplify your code</h2>

<p>The code currently includes these lines:</p>

<pre><code>i = row + num;
while (i &lt; size) {
    std::string str(1, s[i]);
    converted.append(str);
    i += num;
}
</code></pre>

<p>First, there's no need to create <code>str</code> because we can append a single character just as easily using <code>push_back</code>.  Second, this would be better expressed as a <code>for</code> loop:</p>

<pre><code>for (int i = row + num; i &lt; size; i += num) {
    converted.push_back(s[i]);
}
</code></pre>

<p>Note also that <code>i</code> is now local to the <code>for</code> loop, minimizing the scope of the variable.</p>

<h2>Take advantage of early returns</h2>

<p>What you've got is a good start, but could be further adapted.  First, if <code>numRows == 1</code> or <code>numRows &gt;= s.size()</code> then we can just return <code>s</code>.  Second, if <code>numRows</code> is 0 or less, the current routine returns an empty string.  Assuming that's correct behavior, we can put all of that into an early bailout at the head of the function:</p>

<pre><code>const int size = s.size();
std::string converted = "";
if (numRows == 1 || numRows &gt;= size) { 
    return s; 
} else if (numRows &lt;= 0) {
    return converted;
}
</code></pre>

<h2>Rethink the algorithm</h2>

<p>The code already correctly calculates the variable <code>num</code> (which could use a better name, by the way -- maybe <code>period</code>).  One way to think of this is that we process columns.  Each column is <code>period</code> units wide.  Within that column, either 1 or 2 numbers are printed.  There is 1 number if it's the first or last row or 2 if it's any other. For example, if there are 4 rows, the array looks like this:</p>

<pre><code>0     6
1   5 7
2 4   8
3     9
</code></pre>

<p>We can think of each column having two delta values that add up to a period.  For each line, the deltas are as follows:</p>

<pre><code>0     6     delta{6, 0}
1   5 7     delta{4, 2}
2 4   8     delta{2, 4}
3     9     delta{0, 6}
</code></pre>

<p>It's clear that the delta values must always add up to the period and that their usage alternates for each line.  Also, if we're going to increment, it doesn't make much sense to increment by 0, so everywhere 0 appears as a delta value, we can replace with the period.  I wrote a little class to handle that and the increments automatically:</p>

<pre><code>class SaturatingInt {
public:    
    SaturatingInt(int cap, int val=0) : cap{cap}, val{val % cap} {}
    SaturatingInt &amp;operator+=(int num) { val = (num + val) % cap; return *this; }
    SaturatingInt &amp;operator-=(int num) { val = (cap + val - num) % cap; return *this; }
    int value() const { return val ? val : cap; }
private:
    int cap;
    int val;
};
</code></pre>

<p>Now here's the <code>convert</code> function using that class:</p>

<pre><code>std::string convert(const std::string&amp; s, const int numRows) {
    const int size = s.size();
    std::string converted = "";
    if (numRows == 1 || numRows &gt;= size) { 
        return s; 
    } else if (numRows &lt;= 0) {
        return converted;
    }
    const int period  = numRows + (numRows - 2);
    std::array&lt;SaturatingInt, 2&gt; delta{period, period};
    for (int row = 0; row &lt; numRows; ++row) {
        bool delta_index{true};
        for (int i{row}; i &lt; size; i += delta[delta_index].value()) {
            converted.push_back(s[i]);
            delta_index = !delta_index;
        }
        delta[0] -= 2;
        delta[1] += 2;
    }
    return converted;
}
</code></pre>

<p>I tested that using this <code>main</code>:</p>

<pre><code>int main()
{
    std::string s = "0123456789";
    for (int i = 0 ; i &lt; 12; ++i) {
        std::cout &lt;&lt; i &lt;&lt; '\t' &lt;&lt; convert(s, i) &lt;&lt; '\n';
    }
}
</code></pre>

<p>And here are the results:</p>

<pre><code>0   
1   0123456789
2   0246813579
3   0481357926
4   0615724839
5   0817926354
6   0192837465
7   0123948576
8   0123459687
9   0123456798
10  0123456789
11  0123456789
</code></pre>
    </div>