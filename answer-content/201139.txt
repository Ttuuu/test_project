<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Like @202_accepted has mentioned in his comment you have a <strong>bug</strong> in your code which is hidden because of using unchecked in addition with your resulting condition.  </p>

<p>I would divide this algorithm into 3 branches. </p>

<ul>
<li><p>If the length of <code>input</code> is greater than the length of either <code>int.MaxValue</code> or <code>int.MìnValue</code> we can just <code>return false</code>.</p></li>
<li><p>If the length  of <code>input</code> is smaller than the length of either <code>int.MaxValue</code> or <code>int.MìnValue</code> we can return <code>false</code> if any char is <code>&gt; 9</code> or <code>&lt; 0</code>.</p></li>
<li><p>If the length is the same we iterate over <code>input</code> and compare it to a string representation of either <code>int.MaxValue</code> or <code>int.MinValue</code> and if any char, which isn't <code>&gt; 9</code> or <code>&lt; 0</code>, is greater than the char to compare we return <code>false</code>. </p></li>
</ul>

<hr>

<ul>
<li><p>Because you may use this method in a different project as well I would validate the <code>input</code> for <code>null</code> and whitespace instead of checking the <code>Length</code> property.  </p></li>
<li><p>If I see a <code>xxxTryParse</code> method I would assume the <code>out</code> parameter being <code>default(T)</code> if the method returns <code>false</code>.   </p></li>
</ul>

<hr>

<p>Implementing the mentioned points the code would loke like so  </p>

<pre><code>private const char CharNegative = '-';
private const int possibleMaxLength = 10;
private const int possibleMaxNegativeLength = 11;
private static string comparePositive = int.MaxValue.ToString();
private static string compareNegative =int.MinValue.ToString();
public static bool FastTryParseInt(string input, out int result)
{
    result = 0;
    if (string.IsNullOrWhiteSpace(input)) { return false; }

    int length = input.Length;

    bool isNegative = false;
    int currentIndex = 0;

    if (input[0] == CharNegative)
    {
        if (length &gt; possibleMaxNegativeLength) { return false; }
        isNegative = true;
        ++currentIndex;
    }

    int maxLength = isNegative ? possibleMaxNegativeLength : possibleMaxLength;

    if (length &gt; maxLength)
    {
        return false;
    }
    else if (length &lt; maxLength)
    {
        char nextChar;
        while (currentIndex &lt; length)
        {
            nextChar = input[currentIndex++];
            if (nextChar &lt; '0' || nextChar &gt; '9')
            {
                result = 0;
                return false;
            }
            result = result * 10 + (nextChar - '0');

        }
    }
    else
    {
        bool needsToBeCompared = true;
        string valueToCompare = isNegative ? compareNegative : comparePositive;
        char nextChar;
        char compareChar;
        while (currentIndex &lt; maxLength)
        {
            nextChar = input[currentIndex];
            compareChar = valueToCompare[currentIndex];

            if (nextChar &lt; '0' || nextChar &gt; '9' || (needsToBeCompared &amp;&amp; compareChar &lt; nextChar))
            {
                result = 0;
                return false;
            }

            if (needsToBeCompared)
            {
                needsToBeCompared = compareChar == nextChar;
            }

            result = result * 10 + (nextChar - '0');
            currentIndex++;
        }
    }

    if (isNegative) { result = -result; }

    return true;
}
</code></pre>

<hr>

<p>Timings (100000000 values, compiled AnyCpu, running on x64):  </p>

<p><code>int.TryParse()</code>: <strong>11200 ms</strong><br>
<code>FastTryParse()</code>: <strong>2730 ms</strong>  </p>

<p>with generating random input like  </p>

<pre><code>private static Random random = new Random();

private static IEnumerable&lt;string&gt; GenerateRandomInput(int iterations)
{
    if (iterations == 0) yield break;

    for (int i = 0; i &lt; iterations; i++)
    {
        if (i % 2 == 0)
        {
            yield return LongRandom((long)int.MinValue, ((long)int.MaxValue)).ToString();
        }
        else if (i % 3 == 0)
        {
            yield return LongRandom((long)int.MaxValue, ((long)int.MaxValue + 10000)).ToString();
        }
        else
        {
            yield return LongRandom(long.MinValue, long.MaxValue).ToString().Insert(3, "a");                    
        }
    }
}

private static long LongRandom(long min, long max)
{
    byte[] buf = new byte[8];
    random.NextBytes(buf);
    long longRand = BitConverter.ToInt64(buf, 0);

    return (Math.Abs(longRand % (max - min)) + min);
}  
</code></pre>

<hr>

<p><strong>Edit</strong><br>
Since you don't bother about special cases like <code>null</code> being passed to the method and performance is your target, I have changed it like so  </p>

<pre><code>public static bool FastTryParseInt(string input, out int result)
{
    result = 0;

    int length = input.Length;
    if (length == 0) { return false; }

    bool isNegative = false;
    int currentIndex = 0;

    if (input[0] == CharNegative)
    {
        if (length &gt; possibleMaxNegativeLength) { return false; }
        isNegative = true;
        ++currentIndex;
    }

    int maxLength = isNegative ? possibleMaxNegativeLength : possibleMaxLength;

    if (length &gt; maxLength)
    {
        return false;
    }

    char nextChar;
    while (currentIndex &lt; length)
    {
        nextChar = input[currentIndex++];

        if (nextChar &lt; '0' || nextChar &gt; '9')
        {
            result = 0;
            return false;
        }

        result = result * 10 + (nextChar - '0');

        if (result &lt; 0)
        {
             result = 0;
             return false;
        }
    }



    if (isNegative) { result = -result; }

    return true;

}  
</code></pre>

<p>If <code>int result</code> is overflowing it becomes negative so we just check if <code>result &lt; 0</code> to return <code>false</code>.  </p>

<p>This runs in <strong>2065</strong> ms vs <code>int.TryParse</code> in <strong>11220</strong> ms.</p>

<p>Btw. you only need the <code>unchecked</code> keyword if you have checked "Check for arithmetic overflow/underflow" in the advanced build settings.</p>
    </div>