<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since there isn't much code there are only few things that can be improved and all of them are styling:</p>

<ul>
<li>when working with outlets, make sure to specify the outlet type in the property name.
ex. <code>cookiesPerClick</code> -&gt; <code>cookiesPerClickLabel</code>
Same applies for the <code>@IBAction</code>. Common approach is to add <code>buttonTapped</code> at the end <code>getCookieButtonTapped</code>. A bit more android way is <code>onAction</code> but still acceptable</li>
</ul>

<p>The main reason for adding those suffixes is to make it clear what are you dealing with (button action, property label or whatever)</p>

<ul>
<li><p>I would rename <code>cookies</code> to <code>cookiesCount</code>. <code>cookies</code> sounds more like list of cookies</p></li>
<li><p>delete generated comments like <code>// Do any additional setup after loading the view.</code></p></li>
<li><p>If you are not gonna expose some properties/functions (<code>cookies</code>, <code>cookiesAClick</code>, <code>cookieUpgradeCost</code>, <code>func formatItems()</code>) mark them as <code>private</code></p></li>
<li><p>In general an "early return" strategy is preferred where applicable as opposed to nesting code in if statements. Using guard statements for this use-case is often helpful and can improve the readability of the code</p></li>
</ul>

<pre><code>@@IBAction func upgradeClicker(_ sender: UIButton) {
            guard cookies &lt; cookieUpgradeCost else { return }

            cookiesAClick += 1
            ...
        }
</code></pre>

<ul>
<li>You have three different views in <code>formatItems</code> that are styled the same way so it will be easier to maintain (and less code) to just separate the styling. I would add it in extension of <code>UIView</code></li>
</ul>

<pre><code>extension UIView {
    func addBorder() {
        layer.borderWidth = 1
        layer.cornerRadius = 5
        layer.borderColor = UIColor.black.cgColor
    }
</code></pre>

<p>and in <code>private func formatItems()</code> you will only have:</p>

<pre><code>private func formatItems() {
    upgradeButton.addBorder()
    cookieButton.addBorder()
    numberOfCookies.addBorder()

    //Set main cookie to bold
    mainCookie.font = UIFont.boldSystemFont(ofSize: 35.0)
}

</code></pre>

<p>Naming conventions are a bit optional since most of the companies have their own (or don't have at all) but you can find some official style guides</p>

<ul>
<li><a href="https://github.com/linkedin/swift-style-guide#311-using-guard-statements" rel="nofollow noreferrer">LinkedIn's Official Swift Style Guide</a></li>
<li><a href="https://github.com/raywenderlich/swift-style-guide" rel="nofollow noreferrer">The official Swift style guide for raywenderlich.com</a></li>
<li>they both start with <a href="https://swift.org/documentation/api-design-guidelines/" rel="nofollow noreferrer">Apple's API Design Guidelines.</a></li>
</ul>
    </div>