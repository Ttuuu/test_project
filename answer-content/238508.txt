<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the main problem you have here is that you have very tight coupling, and you've made a <strong>bunch</strong> of classes that don't really do anything. Just because you can make a class/object doesn't mean you should. In this case, your use-case is straightforward enough that the simplest solution is likely the best.</p>

<p>For example - the fact that you have 8 classes to represent the race, that are all <em>literally</em> identical besides for the class name is a huge code smell. Despite this, you then seem to fallback to strings all the time, for no apparent reason. </p>

<p>I also noticed that you instantiate your classes all over the place, despite there not being any instance-specific behavior it actually drives.</p>

<p>For your limited use case, just making some switch statements is going to be your best bet:</p>

<pre><code>enum RaceEnum {
    Gnome,
    Dwarf,
    Human,
    NightElf,
    Orc,
    Tauren,
    Troll,
    Undead
}

enum ClassEnum {
    Warrior,
    Paladin,
    Rogue,
    Priest,
    Mage,
    Warlock,
    Hunter,
    Druid,
    Shaman
}

enum FactionEnum {
    Alliance,
    Horde
}

class WowClassicCharacter {
    public RaceEnum Race { get; set; }

    public ClassEnum Class { get; set; }

    public FactionEnum Faction { get; set; }

    public WowClassicRace(RaceEnum race, ClassEnum klass, FactionEnum faction) {
        if (!WowClassicCharacter.raceIsValidForFaction(race, faction)) {
            throw new Exception("The given race and faction are not compatible");
        }
        if (!WowClassicCharacter.classIsValidForRace(klass, race) {
            throw new Exception("The given class and race are not compatible");
        }
        Race = race;
        Class = klass;
        Faction = faction;
    }

    public static boolean raceIsValidForFaction(RaceEnum race, FactionEnum faction) {
        return faction switch
        {
            FactionEnum.Alliance =&gt; race switch 
            {
                RaceEnum.Human =&gt; true,
                RaceEnum.Dwarf =&gt; true,
                RaceEnum.NightElf =&gt; true,
                RaceEnum.Gnome =&gt; true,
                _ =&gt; false
            },
            FactionEnum.Horde =&gt; race switch
            {
                RaceEnum.Orc =&gt; true,
                RaceEnum.Troll =&gt; true,
                RaceEnum.Tauren =&gt; true,
                RaceEnum.Undead =&gt; true,
                _ =&gt; false
            }
        };
    }

    public static boolean classIsValidForRace(ClassEnum klass, RaceEnum race) {
        return race switch
        {
            RaceEnum.Human =&gt; klass switch
            {
                ClassEnum.Warrior =&gt; true,
                ClassEnum.Paladin =&gt; true,
                ClassEnum.Rogue =&gt; true,
                ClassEnum.Priest =&gt; true,
                ClassEnum.Mage =&gt; true,
                ClassEnum.Warlock =&gt; true,
                _ =&gt; false
            },
            RaceEnum.Dwarf =&gt; klass switch
            {
                ClassEnum.Warrior =&gt; true,
                ClassEnum.Paladin =&gt; true,
                ClassEnum.Hunter =&gt; true,
                ClassEnum.Rogue =&gt; true,
                ClassEnum.Priest =&gt; true,
                _ =&gt; false
            },
            // etc
            _ =&gt; false
        };
    }
}
</code></pre>

<p>It would be relatively straightforward to make a config file, or a database, or whatever back this up instead of hardcoded switch statements, but it seems like your use case doesn't require the complexity, so keep it simple.</p>

<p>Then your controller looks like this:</p>

<pre><code>public class SelectorController
{
    private readonly Random random;

    public SelectorController()
    {
        random = new Random();
    }

    private T GetRandomEnumValue&lt;T&gt;() where T: system.Enum
    {
        return random.Next(0, Enum.GetNames(typeof(T)).Length);
    }

    public FactionEnum GetFaction()
    {
        return GetRandomEnumValue&lt;FactionEnum&gt;();
    }

    public RaceEnum GetRace(FactionEnum faction)
    {
        RaceEnum race;
        do      
        {
            race = GetRandomEnumValue&lt;RaceEnum&gt;();
        }
        while (!WowClassicCharacter.raceIsValidForFaction(race, faction));
        return race;
    }

    public ClassEnum GetClass(RaceEnum race)
    {
        ClassEnum klass;
        do      
        {
            klass = GetRandomEnumValue&lt;ClassEnum&gt;();
        }
        while (!WowClassicCharacter.classIsValidForRace(klass, race));
        return klass;
    }
}
</code></pre>

<p>You could pretty easily make some smarter methods than just randomly generating until it is valid, but this gets the point across.</p>

<p>Final takeaways:</p>

<ol>
<li>Don't make and use classes just because you can</li>
<li>Enums are better than strings</li>
<li>When in doubt, prefer simple solutions</li>
</ol>

<p>Apologies for any errors - my C# is rusty and I wrote this all in the answer box.</p>
    </div>