<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a number of things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.</p>

<h2>Use the required <code>#include</code>s</h2>

<p>The code uses a number of <code>#include</code>s that are not listed.  It was not difficult to infer, but it helps reviewers if the code is complete.  After a bit of looking, it seems that this is what's needed:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;cmath&gt;
#include &lt;boost/algorithm/string.hpp&gt;
</code></pre>

<h2>Prefer modern initializers for constructors</h2>

<p>The constructor use the more modern initializer style rather than the old style you're currently using.  Instead of this:</p>

<pre><code>XYZCoordinate(int X, int Y, float Z){
x = X;
y = Y;
z = Z;
}
</code></pre>

<p>I would write this:</p>

<pre><code>XYZCoordinate(int X, int Y, float Z) : x{X}, y{Y}, z{Z} {}
</code></pre>

<p>However, in this case, for such a simple class, in real code I wouldn't write a constructor at all and would simply delete the line.  The class can still be initialized like this: <code>XYZCoordinate xyz{3, 5, -23.22};</code> via <a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization" rel="nofollow noreferrer">aggregate initialization</a>.  </p>

<h2>Use better variable names</h2>

<p>The variable names <code>xmax</code>, <code>xmin</code>, etc. are good, but the name <code>file</code> is not.  The first names explain something about what the variable means within the context of the code, but the latter is only confusing. A better name might be <code>coordinates</code>.  Similarly, <code>Loadfileoutput</code> is another poor name -- I'd suggest <code>Coordinates</code> for the name of that class.</p>

<h2>Use C++ idiom</h2>

<p>The code currently contains this:</p>

<pre><code>vector&lt;XYZCoordinate&gt; file = vector&lt;XYZCoordinate&gt;();
</code></pre>

<p>That's really not necessary.  Just write this instead:</p>

<pre><code>vector&lt;XYZCoordinate&gt; coordinates{};
</code></pre>

<h2>Prefer a <code>struct</code> to a <code>class</code> for objects with no invariants</h2>

<p>C++ has two primary means to encapsulate some behavior and data: <code>struct</code> and <code>class</code>.  The only difference is that a <code>struct</code> has its members <code>public</code> by default, while the <code>class</code> members are <code>private</code> by default.  If there is no <em>invariant</em>, (a thing that must always be true for the class to be coherent), then it often makes sense to use a <code>struct</code> instead.  In this case the <code>XYZCoordinate</code> class has no invariants and is probably better suited as a <code>struct</code>.</p>

<h2>Write a custom extractor</h2>

<p>Here's the code I'd prefer to write to read in and create the desired object:</p>

<pre><code>std::ifstream in(filename);
Coordinates c;
in &gt;&gt; c;
</code></pre>

<p>This can be done by writing an <em>extractor</em> for the data.  In this case, I'd write two extractors.  One for the <code>Coordinates</code> class and one for the <code>XYZCoordinate</code> class.  Here's one way to write one for the <code>XYZCoordinate</code> class.  Here's the complete definition for that class, which I have converted to a <code>struct</code>:</p>

<pre><code>struct XYZCoordinate{
    int x;
    int y;
    float z;
    friend std::istream&amp; operator&gt;&gt;(std::istream&amp; in, XYZCoordinate &amp;xyz) {
        float a, b;
        in &gt;&gt; a &gt;&gt; b &gt;&gt; xyz.z;
        xyz.x = std::rint(a);
        xyz.y = std::rint(b);
        return in;
    }
};
</code></pre>

<p>Now we can write an extractor for the <code>Coordinates</code> class.  Here's that complete class:</p>

<pre><code>class Coordinates
{
    int xmin;
    int xmax;
    int ymin;
    int ymax;
    std::vector&lt;XYZCoordinate&gt; values;

public:
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Coordinates &amp;c) {
        return out &lt;&lt; "[ " &lt;&lt; c.xmin &lt;&lt; ", " &lt;&lt; c.xmax &lt;&lt; "], [ " 
            &lt;&lt; c.ymin &lt;&lt; ", " &lt;&lt; c.ymax &lt;&lt; "], with " &lt;&lt; c.values.size() &lt;&lt; " points\n";
    }
    friend std::istream&amp; operator&gt;&gt;(std::istream&amp; in, Coordinates &amp;c) {
        // skip comment lines
        while (in.peek() == '#') {
            in.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n'); 
        }
        XYZCoordinate xyz;
        while (in &gt;&gt; xyz) {
            c.values.push_back(xyz);
            c.xmin = std::min&lt;int&gt;(c.xmin, xyz.x);
            c.xmax = std::max&lt;int&gt;(c.xmax, xyz.x);
            c.ymin = std::min&lt;int&gt;(c.xmin, xyz.y);
            c.ymax = std::max&lt;int&gt;(c.xmax, xyz.y);
        }
        return in;
    }
};
</code></pre>

<p>Note that the values of <code>xmin</code>, <code>xmax</code>, etc. are invariants for this class, so we leave it as a <code>class</code> with only private data members.  If you need to access the items in the vector, you can add custom functions to handle that.</p>

<h2>Provide a test driver</h2>

<p>This is more about getting good reviews than the code itself, but it's often very useful if you provide some simple <code>main</code> that exercises the code.  This helps reviewers (and yourself!) understand how it's to be used in context.  In this case, I wrote this:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;locale&gt;
#include &lt;limits&gt;
#include &lt;algorithm&gt;

// all of the class code above goes here

int main(int argc, char *argv[]) {
    if (argc != 2) {
        std::cerr &lt;&lt; "Usage: xyz infile.txt\n";
        return 1;
    }
    std::ifstream in(argv[1]);
    in.imbue(std::locale(std::locale(), new csv_reader()));
    Coordinates c;
    in &gt;&gt; c;
    std::cout &lt;&lt; c;
}
</code></pre>

<p>The call to <code>imbue</code> uses a locale that treats commas as whitespace.  That code is in <a href="https://stackoverflow.com/questions/1894886/parsing-a-comma-delimited-stdstring/1895584#1895584">this excellent answer</a>.  Now you don't have to explicitly check for commas or spaces and don't need boost.  Everything here is standard C++.</p>

<h2>Results</h2>

<p>I wrote a program to create a set of 20 millon sets of random coordinates.  Using that input, your original program took 41.9 seconds on my machine, while the one presented above took 14.8 seconds.  </p>
    </div>