<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To give you valuable feedback on your usecase, I would need more information, like: How do listeners listen? How does the caller look like? </p>

<p>How exactly does <code>_flightSearchRequestModelLiveData.value = this</code> notify all listeners of live data? Its not a function call, so how is an event created and pushed?!</p>

<p>Instead I will give some pattern advices you may need.</p>

<h2>Use constructor initialisation</h2>

<ol>
<li>Kotlin enables you to set fields over constructors. Even if your class is a singleton and all values are default - creating a constructor will enable to test your class easily (and other benefits).</li>
</ol>

<p>So instead of:</p>

<pre><code>class FlightSearchManager {

    private val _flightSearchRequestModelLiveData : MutableLiveData&lt;FlightSearchRequestModel&gt; = MutableLiveData()
    val flightSearchRequestModelLiveData : LiveData&lt;FlightSearchRequestModel&gt; get() = _flightSearchRequestModelLiveData

    var flightSearchRequestModel : FlightSearchRequestModel
</code></pre>

<p>try to go for:</p>

<pre><code>class FlightSearchManager(
    val flightSearchRequestModelLiveData : MutableLiveData&lt;FlightSearchRequestModel&gt; = MutableLiveData(),
    var flightSearchRequestModel : FlightSearchRequestModel = FlightSearchRequestModel()
) {
</code></pre>

<ol start="2">
<li>If you already have a constructor for a class and it is valid to have all fields to have default values - don't force the caller to set them!</li>
</ol>

<p>This code is an anti-pattern:</p>

<pre><code>flightSearchRequestModel =
            FlightSearchRequestModel(
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null)
</code></pre>

<p>What you should go for would be:</p>

<pre><code>data class FlightSearchRequestModel(
   val propertyOne : String? = null, 
   val propertyTwo: Int? = null,
   ...
)

FlightSearchManager {
  val model = FlightSearchRequestModel()
}
</code></pre>

<h2>Parameters</h2>

<p>It is seen as code smell, when your method has too many parameters, so I would recommend to reduce the number of those in <code>fun updateFlightSearchRequestModel</code>.</p>

<p>You could create a single function for every parameter change. Of course it means more lines to write, but is cleaner, straight forward and not as error-prone to side effects since you don't change ~20 things in one method.</p>

<h2>Naming convetions</h2>

<p>I would guess that you coded with something like <em>C#</em> before, because of the usage of underscores <code>_</code> in variable names. Please try to follow the appropreate convetion for this language (Kotlin), as well as in Java:</p>

<blockquote>
  <p>Local variables, instance variables, and class variables are also written in lowerCamelCase. Variable names should not start with underscore (_) or dollar sign ($) characters, even though both are allowed. This is in contrast to other coding conventions that state that underscores should be used to prefix all instance variables.</p>
</blockquote>

<p>Constants: </p>

<blockquote>
  <p>Constants should be written in uppercase characters separated by underscores. Constant names may also contain digits if appropriate, but not as the first character.</p>
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)" rel="nofollow noreferrer">Source</a></p>

<p>Fields like this:</p>

<pre><code>private val _flightSearchRequestModelLiveData : MutableLiveData&lt;FlightSearchRequestModel&gt; = MutableLiveData()
</code></pre>

<p>would become:</p>

<pre><code>private val flightSearchRequestModelLiveData : MutableLiveData&lt;FlightSearchRequestModel&gt; = MutableLiveData()
</code></pre>

<hr>

<p>Functions like this</p>

<pre><code>fun updateFlightSearchRequestModel(_arriveAirport : String? = null,
                                   _arriveAirportId: Int? = null,
</code></pre>

<p>would become:</p>

<pre><code>fun updateFlightSearchRequestModel(arriveAirport : String? = null,
                                   arriveAirportId: Int? = null,
</code></pre>

<h2>Immutability</h2>

<p>Immutable code is easier to debug, to understand and to test. Favor <code>val</code> over <code>var</code> in (almost) every case.</p>

<p>If you really need to change something by reference, at least create a completely new immutable object. Example:</p>

<p>This </p>

<pre><code>flightSearchRequestModel.apply {
            arriveAirport = _arriveAirport ?: arriveAirport
            arriveAirportId = _arriveAirportId ?: arriveAirportId
            ...
}
</code></pre>

<p>could become this:</p>

<pre><code>flightSearchRequestModel = copy(arriveAirport = arriveAirport, arriveAirportId  = arriveAirportId, ...)
</code></pre>
    </div>