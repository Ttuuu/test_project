<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is already nice-looking code. Some minor remarks</p>

<h1>upper and lower</h1>

<p>on both <code>Leaf</code> and <code>Room</code>, things would become more clear if you defined a <code>left</code>, <code>right</code>, <code>up</code> and <code>down</code></p>

<pre><code>@property
def down(self):
    return self.rd.y

@property
def up(self):
    return self.lu.y

@property
def left(self):
    return self.lu.x

@property
def right(self):
    return self.rd.x
</code></pre>

<p>and then you can search and replace all mentions of <code>rd.x</code>, <code>rd.y</code>, <code>lu.x</code> and <code>lu.y</code>. Now I have to make the translation in my head every time.</p>

<h1>generators</h1>

<p><code>Room._get_border</code> and <code>Room._get_positions</code> return lists, while the code can be cleaner if they would return generators, using <code>itertools</code>' <code>product</code> and <code>chain</code></p>

<pre><code>def _get_positions(self):
    for y, x in itertools.product(
        range(self.left + 1, self.right), range(self.lower + 1, self.upper)
    ):
        yield Position(y, x)

def _get_border(self):

    left_wall = (Position(y, self.left) for y in range(self.upper, self.lower))
    right_wall = (Position(y, self.right) for y in range(self.upper, self.lower))
    upper_wall = (Position(self.upper, x) for x in range(self.left, self.right))
    lower_wall = (Position(self.lower, x) for x in range(self.left, self.right + 1))
    return itertools.chain(upper_wall, right_wall, lower_wall, left_wall)
</code></pre>

<h1>enumerable</h1>

<p>It's good you use an enumerable for <code>Tile</code>, but then really use it. Don't convert to <code>.value</code> immediately like in Map.<strong>init</strong> and Map.generate. The translation only needs to be done in <code>__str__</code>. If later you want to add other properties to the tile, like resistance speed, or damage per turn, or whatever, by using the <code>.value</code> in the <code>Map</code>, you won't be able to. </p>

<p>so change <code>__str__</code> to:</p>

<pre><code>def __str__(self):
    return "\n".join("".join(tile.value for tile in b) for b in self.board)
</code></pre>

<p>and remove the <code>.value</code> from the other places in the code</p>

<h1>Random seed</h1>

<p>Allow for a random seed. This will help in testing, and later on if you want to generate the same game, you can easily do so.</p>

<p>All it needs, is a small change in <code>Map.generate</code></p>

<pre><code>def generate(self, random_seed=None):
    random.seed(random_seed)
    ...
</code></pre>

<h1>line split</h1>

<p>If I need to split the arguments in a method call that is too long, I prefer to split immediately after the <code>(</code>, put the <code>)</code> on a separate line, and add a <code>,</code> after the last argument., like I adapted in <code>leaf_b</code></p>

<pre><code>            leaf_a = Leaf(leaf.lu,
                          Position(leaf.down, random_split),
                          leaf,
                          self.min_room_space)
            leaf_b = Leaf(
                Position(leaf.up, random_split + 1),
                leaf.rd,
                leaf,
                self.min_room_space,
            )
</code></pre>

<p>And since recently, I don't even worry about line splits any more. I use the <a href="https://github.com/ambv/black" rel="nofollow noreferrer">black</a> formatter, which is uncompromising, but has very sane settings.</p>

<h1><code>_split_room</code></h1>

<p>The flows for a horizontal split and vertical split are completely separate, so I would make 2 separate functions out of it. Then you can drop the <code>Split</code> enumerable. You can pass functions variables, so <code>_split</code> can become:</p>

<pre><code>def _split(self, leaf):
    if leaf.width / leaf.height &gt;= self.split_threshold:
        split_func = self._split_room_horizontal
    elif leaf.height / leaf.width &gt;= self.split_threshold:
        split_func = self._split_room_vertical
    else:
        split_func = random.choice(
            (self._split_room_vertical, self._split_room_horizontal)
        )
    return split_func(leaf)
</code></pre>

<h1>split success</h1>

<p>at the moment, you convery whether a split was succesfull by leaving <code>leaf_a</code> and <code>leaf_b</code> to <code>None</code>. I'm always wary of using special return variables to signal the success of an operation. Another option here, would be to raise a <code>NotSplittable</code> Exception. </p>

<h1>generate</h1>

<p>So at this moment, you initialize a <code>Map</code>, and only afterwards <code>generate()</code> the board. Why do you do that? This leaves room open for users of your code to forget to do the generation. I would do an initial generation. And if you want an option to generate a new board with the same settings, you can create a <code>regenerate</code> function, which returns a new map (with or without a new random seed)</p>

<h1>Tree</h1>

<p>The Tree algorithm looks okay. I don't know what is the advantage of using <code>queue.Queue</code> instead of <code>collections.deque</code>. </p>

<p>The only thing I would change, would be to change the <code>leaves</code> property to into a tuple, and make it generate the leaves on the fly if they haven't been generated already.</p>

<pre><code>@property
def leaves(self):
    if self._leaves is None:
        self._leaves = tuple(self._generate_leaves())
    return self._leaves
</code></pre>

<p>Then instead of using the second queue <code>leaves</code> in <code>_generate_leaves</code>, you could do <code>yield leave</code> instead of <code>leaves.put(leaf)</code> and drop the <code>self._leaves = list(leaves.queue)</code></p>

<h1>properties</h1>

<p>You make good use of properties, but sometimes you go overboard.</p>

<p>as they are implemented, <code>Leaf.children</code> and <code>Leaf.siblings</code> offer no advantages over using just an attribute</p>

<h1>keyword-only parameters</h1>

<p>If you have a longer parameter list, especially with some who are used only seldomly, it can be clearer to mark them as <a href="https://www.python.org/dev/peps/pep-3102/" rel="nofollow noreferrer">keyword-only</a>. For example:</p>

<pre><code>class Map:
    def __init__(
        self, 
        width, 
        height, 
        *, 
        min_room_space=10, 
        split_threshold=1.25,
    ):
</code></pre>
    </div>