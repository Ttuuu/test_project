<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Finally, I am well aware that the value of the gravitational constant ùê∫ is 6.67408√ó10‚àí11 and not 0.5, as I have implemented it here; using the correct value of ùê∫ results in a simulation that runs far too slow to appreciate.</p>
</blockquote>

<p>It is strange to me that you chose to change the gravitational constant rather than simply choosing a different time step; can you say more about why this seemed like the right thing to do?  (Bonus points for justifications via references to ST:TNG.)</p>

<blockquote>
  <p>I am more concerned with the correctness of my implementation of the physics of gravitation, and any issues that may be present in it.</p>
</blockquote>

<p>You are right to be concerned. Your approach is where everyone starts, but it is <strong>not accurate</strong>.</p>

<p>First off, the obvious way in which it is inaccurate is that you're doing Newtonian dynamics but that does not reflect reality. The orbit of Mercury was noticeably "wrong", for example, until Einstein determined that identical clocks run at a different rate when orbiting closer to the Sun than the Earth. But let's assume that you do not wish to model factors due to general relativity and stick to the world as it was known to Newton.</p>

<p>So let's just consider your method here, which as I mentioned is the naive way of numerically simulating n bodies:</p>

<ul>
<li>Start with known positions and velocities for all bodies</li>
<li>Compute forces from positions</li>
<li>Compute accelerations from forces</li>
<li>Positions update based on velocities</li>
<li>Velocities update based on accelerations</li>
<li>Step forward one time unit</li>
<li>Repeat</li>
</ul>

<p>FYI this is a variation of <em>Euler's Method</em>.</p>

<p>This is a good first approximation, but it has many problems starting with <em>it is not conservative</em>. That is, it is possible that the system has <em>more energy</em> or <em>less energy</em> after each step than the previous step, which is not physically plausible.  But the real problem is that if you ever get into a situation where energy is being consistently added over several subsequent steps, you can end up with a runaway scenario where a body gets violently flung away from the system at high speed.</p>

<p>Learning how to adapt your method to a more physically accurate simulation will take you very deep indeed into the study of numerical methods, so I recommend getting a good book on the subject.  But here are some thoughts to get you going:</p>

<ul>
<li><p>You have the same time step for every particle, and I assume, the same timestep for each step. This is potentially very bad. The faster a particle is moving (or accelerating), the <em>smaller</em> its timestep should be to help avoid unphysicalities showing up in the simulation.  Slow the timestep down when particles are moving fast, or even better, have every particle keep track of its own timestep which gets shorter the faster it goes. Coming up with a good data structure to do the computations in the right order when every particle has a changing time step is a great exercise.</p></li>
<li><p>You can be more clever about computing the change in position and velocity than simply getting the acceleration at a point in time.  Suppose for example you have the position and velocity of a particle at time t. You compute the acceleration based on the state at t and from that you compute the <em>increment</em> to the state that gets you a new state at t + dt. That's what you're doing now. But here's the trick. Now suppose you compute the equivalent increment by doing <em>two steps of dt/2</em>. That increment will be different, and both will be wrong, but if you are clever about it then you can <em>average</em> the increments and be <em>much closer</em> to the accurate solution. This is the <em>Runga-Kutta method</em>; I wrote an RK4-5 solver to solve differential equations when I was in university and it is quite straightforward code to write.</p></li>
</ul>

<p>That will get you started I hope. If you are interested in going deeper down this rabbit hole, this is a good overview of where to go next:</p>

<p><a href="http://www.scholarpedia.org/article/N-body_simulations" rel="nofollow noreferrer">http://www.scholarpedia.org/article/N-body_simulations</a></p>

<hr>

<p>One other thing I just thought of. I assume that in your graphics system you have the ability to position the camera at an arbitrary position and orientation. It would be an interesting test of your system to model three bodies: the Sun, Jupiter, and a Trojan near but not at L4, then put the camera focus on Jupiter and watch the Trojan "orbit" the stable L4 point.</p>

<p>Alternatively, put the camera on the sun and rotate the camera at the same rate as Jupiter moves; that would look like this: <a href="http://sajri.astronomy.cz/asteroidgroups/hitrfix.gif" rel="nofollow noreferrer">http://sajri.astronomy.cz/asteroidgroups/hitrfix.gif</a></p>
    </div>