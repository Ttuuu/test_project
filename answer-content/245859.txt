<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There isn't much to say about the function and algorithm it self. It's an ordinary recursive function - with tail call - which is optimal for recursive functions.</p>
<p>I don't find a string as return value really useful. Instead I think, I would return a tuple of two integers representing the numerator and denominator</p>
<pre><code>let toFraction (num: float): (int * int) = etc...
</code></pre>
<p>Alternatively you could define a discriminated union as something like:</p>
<pre><code>type Fraction = Fraction of int * int
</code></pre>
<p>... used like:</p>
<pre><code>let toFraction num =
if num &lt;= 0.0 || num &gt;= 1.0 then
    failwith "Invalid input"
else
  let rec farey n0 d0 n1 d1 =
    let n2 = n0 + n1
    let d2 = d0 + d1

    match float n2 / float d2 with
    | x when abs (x - num) &lt; 1e-10 -&gt; Fraction(n2, d2)
    | x when x &lt; num -&gt; farey n2 d2 n1 d1
    | x when x &gt; num -&gt; farey n0 d0 n2 d2
    | _ -&gt; failwith "Something went completely wrong" // just to fulfill the pattern matching - it should never happen

  farey 0 1 1 1
</code></pre>
<p>and called as</p>
<pre><code>let (Fraction(num, denom)) = toFraction value
printfn "%d / %d" num denom
</code></pre>
<p>As shown, I've chosen to run <code>farey</code> with integers instead of floats. You should test if that is more efficient than using floats.</p>
<hr>
<blockquote>
<p><code>match (n2 / d2) with</code></p>
</blockquote>
<p>You don't need the parentheses.</p>
<hr>
<blockquote>
<p><code>num</code> is in the set <code>0 &lt;= num &lt; 1</code></p>
</blockquote>
<p><code>0 = num</code> is an edge case that is calculated wrongly to</p>
<pre><code>1 / 100001
</code></pre>
<p>If you want <code>0</code> to be included in the domain, you need to start <code>faray</code> with the values <code>-1 0 1 1</code>. Then it will return <code>"0 / 1"</code>.</p>
<hr>
<p>Even though you specify in the comment, that it is assumed that <code>num</code> should be between zero and one, you should guard against invalid input, especially because invalid input may result in an infinite recursive loop.</p>
    </div>