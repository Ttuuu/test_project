<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>fallocate</code> and swap files</h3>

<p>You should not use <code>fallocate</code> for creating swap files. It's not supported.</p>

<p>From <a href="http://manpages.ubuntu.com/manpages/xenial/en/man8/mkswap.8.html" rel="nofollow noreferrer">the <code>mkswap</code> manpage</a>:</p>

<pre class="lang-none prettyprint-override"><code>Note  that  a  swap  file  must  not contain any holes.  Using cp(1) to
create the file is not acceptable.  Neither is use of  fallocate(1)  on
file  systems  that support preallocated files, such as XFS or ext4, or
on copy-on-write filesystems like btrfs.   It  is  recommended  to  use
dd(1)  and  /dev/zero in these cases.  Please read notes from swapon(8)
before adding a swap file to copy-on-write filesystems.
</code></pre>

<p>And from <a href="http://manpages.ubuntu.com/manpages/xenial/en/man8/swapon.8.html" rel="nofollow noreferrer">the <code>swapon</code> manpage</a>:</p>

<pre class="lang-none prettyprint-override"><code>You should not use swapon on a file with holes.  This can  be  seen  in
the system log as

      swapon: swapfile has holes.

The  swap file implementation in the kernel expects to be able to write
to the file directly, without the assistance of the  filesystem.   This
is  a problem on preallocated files (e.g.  fallocate(1)) on filesystems
like XFS or ext4, and on copy-on-write filesystems like btrfs.
</code></pre>

<p>It follows that, while <code>fallocate</code> may be faster than <code>dd</code>, it's not suitable for creating swap files and not supported by swap-related tools.</p>

<hr>

<h3># # # # # ... ?</h3>

<p>You should limit this to the width of the display (or default to 80, which is pretty common as a default width for terminals). There's no reason to have it extend beyond the visible width (and possibly wrap around). You can obtain the width from the <code>COLUMNS</code> special variable, and get a substring:</p>

<pre><code>bash-4.4$ echo "$COLUMNS"
66
bash-4.4$ line="${line:0:$COLUMNS}"
bash-4.4$ echo "$line"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
</code></pre>

<hr>

<h3>Prompts for <code>read</code></h3>

<p>A <code>echo -n "&lt;prompt text&gt;"</code> before <code>read</code> is unnecessary, as <code>read</code> has the <code>-p</code> option:</p>

<pre><code> -p PROMPT  output the string PROMPT without a trailing newline before
    attempting to read
</code></pre>

<hr>

<h3>Case-insensitive <code>case</code></h3>

<p>Use <a href="https://www.gnu.org/software/bash/manual/bash.html#Conditional-Constructs" rel="nofollow noreferrer">the <code>nocasematch</code> option</a>:</p>

<blockquote>
  <p>If the <code>nocasematch</code> shell option (see the description of <code>shopt</code> in
  <a href="https://www.gnu.org/software/bash/manual/bash.html#The-Shopt-Builtin" rel="nofollow noreferrer">The Shopt Builtin</a>) is enabled, the match is performed without regard
  to the case of alphabetic characters.</p>
</blockquote>

<p>So:</p>

<pre><code>shopt -s nocasematch
case $yes_no in
    y|yes) ...
        ;;
    n|no|quit) ...
</code></pre>

<p>And so on.</p>

<p>This option also applies to the <code>==</code>/<code>!=</code>/<code>=~</code> tests in <code>[[ ... ]]</code>.</p>

<hr>

<p>The <code>shopt -u extglob</code> is unnecessary.</p>

<hr>

<h3>Exit after <code>--help</code></h3>

<p>It's fairly standard to have commands exit without doing anything if asked to print help instead of continuing on to act on other options. And if you plan to extend it for non-interactive usage, then you'll likely add support for options as well. So you may want to print help for all unsupported options, and for options which were incorrectly given. So a new function:</p>

<pre><code>usage() {
    echo "$help_text"
    exit "${1:-0}"  # default exit status 0 if `$1` isn't given
}
</code></pre>

<p>An example option would look like:</p>

<pre><code>case $1 in
   -n)
      [[ -z $2 ]] &amp;&amp; usage 1 # error: need a second arg with `-n`, so exit 1
      do_something with "$2"
      ;;
   -h|--help)
      usage  # asked for help, exit 0
      ;;
   -*) # error: unrecognized option, so exit 1
      usage 1
      ;;
esac
</code></pre>

<p>(Of course, if you do add more options, you should look into <code>getopts</code> for parsing them.)</p>

<hr>

<blockquote>
  <ol>
  <li>Allow a non-interactive script mode that uses arguments for customizations</li>
  <li>Allow single/batch removal of swapfiles.</li>
  <li>Allow easier testing of each pathway of the interactive script</li>
  </ol>
</blockquote>

<p>In that case, I'd <strong>strongly</strong> suggest that you extract out the actual actions (listing swap files, creating swap files, mounting them, etc.) into individual functions. This will allow you to mix and match actions based on options, allowing for easier testing and batch processing.</p>

<p>So the code might look like:</p>

<pre><code>list_swapfiles() {
  printf "\n%s\n" "$line"
  printf "%s\n\n" "Current Swapfiles:"
  sudo swapon -s
  printf "\n%s\n" "$line"
}

# after parsing options
case $1 in)
  -l|--list)
    list_swapfiles
    exit
    ;;
  ...
esac

# no options, assume interactive
while true; do
  read -p "&gt;&gt;&gt;&gt; Are you sure you want to create a new swapfile? (Y / N):" yes_no
  case $yes_no in
    y|yes)       
      list_swapfiles
      break
      ;;
      ...
</code></pre>
    </div>