<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/users/192268/">@HoboProber</a> already gave a good <a href="https://codereview.stackexchange.com/a/220567/92478">answer</a> talking about various improvements to be done on the code in general, so let's have a closer look at the core algorithm.</p>

<hr>

<p>Your implementation uses the <em>standard form</em> for quadratic equations</p>

<p><span class="math-container">$$a \cdot x^2+b \cdot x + c = 0$$</span></p>

<p>and implements the well known <em>quadratic formula</em> to solve and analyze them.</p>

<p><span class="math-container">$$ x_{1,2} = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</span></p>

<p>The term under the square root is often called discriminant in English literature. Also, Python has a builtin <a href="https://docs.python.org/3/library/math.html" rel="nofollow noreferrer"><code>math</code></a> module with all kind of useful mathematical functions, e.g. <a href="https://docs.python.org/3/library/math.html#math.sqrt" rel="nofollow noreferrer"><code>math.sqrt(...)</code></a>, so there is no need to tinker with <code>... ** (1/2)</code>.</p>

<p>With that (<a href="https://codereview.stackexchange.com/users/98493/">and @Graipher's comment</a>) in mind, you should go from</p>

<pre class="lang-py prettyprint-override"><code>if ((b * b) - (4 * a * c)) &gt; 0:
    q = float(((b * b) - (4 * a * c)) ** (1 / 2))
</code></pre>

<p>to</p>

<pre class="lang-py prettyprint-override"><code>import math   # at the beginning of the script

...   # other code here

discriminant = (b * b) - (4 * a * c)
if discriminant &gt;= 0:
    q = math.sqrt(discriminant)
</code></pre>

<p>Considering best-practices for programmers in general, and the already mentioned <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a>, there are also some other variable names to be improved, especially <code>Moo</code> and <code>abc</code> since they are quite generic. In your case the coefficients <code>a</code>, <code>b</code>, and <code>c</code> would be exempt from that rule, since they have a quite well defined mathematical meaning in this context. </p>

<p>Just be aware that relying on mathematical conventions can have "unwanted" side effects, since this will often mean others always try to see the mathematical meaning behind, possibly arbitrary named, single letter variables. That might lead to some confusion in your case since you're using <code>q</code>, which is also often used in an alternative formulation of the problem (see <a href="https://en.wikipedia.org/wiki/Quadratic_equation#Reduced_quadratic_equation" rel="nofollow noreferrer">Wikipedia - Reduced quadratic equation</a>), but with a different meaning.</p>

<hr>

<p>Another thing I would like to tell you about is Unicode support in Python. All strings in Python 3 are Unicode by default. That allows you to use something like</p>

<pre class="lang-py prettyprint-override"><code>print("a·x² + b·x + c = 0")
</code></pre>

<p>directly in your code to generate a more visually appealing command line output.</p>

<hr>

<p>Python also has the notion of <a href="https://docs.quantifiedcode.com/python-anti-patterns/readability/asking_for_permission_instead_of_forgiveness_when_working_with_files.html" rel="nofollow noreferrer">"It's easier to ask for forgiveness than it is to get permission"</a>. In your context that would apply to the input validation section, which is a good thing to do! I just want to present an alternative approach to you.</p>

<p>At the moment your code does the following:</p>

<pre class="lang-py prettyprint-override"><code>...
U1 = input("input a ")
I1 = input("input b ")
O1 = input("input c ")
if (U1.isalpha() or I1.isalpha() or O1.isalpha()) is False:
    print("doing some math")
    a = float(U1)
    b = float(I1)
    c = float(O1)
    ...
else:
    print("nur Zahlen bitte")
</code></pre>

<p>Here, you are trying to avoid situations where a conversion from string to float might raise an exception. So that would be the "asking for permission" part. The "ask for forgiveness"-way could be like</p>

<pre class="lang-py prettyprint-override"><code>...
input_a = input("input a ")
input_b = input("input b ")
input_c = input("input c ")
try:
    a = float(input_a)
    b = float(input_b)
    c = float(input_c)
except ValueError:
    # float will throw an ValueError if it cannout convert the input
    print("nur Zahlen bitte")
else:
    # you get here only if no ValueError was raised
    print("doing some math")
    quadratic_solver(a, b, c)   # this might be the function as proposed by HoboProber
...
</code></pre>

<p>This approach actually tries to convert the given user input to a float and handles the case where it fails. In that way, it's often considered more direct and clearer on what you're trying to accomplish. In theory, there would also be no problem to not use the <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer"><code>else</code> block of try-except</a> and simply put it in the <code>try</code> block. The significant disadvantage of the second approach is that also every value error that might be raised in further computations would trigger <code>print("nur Zahlen bitte")</code>, and therefore make it harder to find out what caused the problem in the first place. Some general recommendations for catching exceptions are:</p>

<ol>
<li>try-except as narrow as you can! This is a generalization of the statement above and means to only surround the parts you are willing to handle with a try-except structure. Otherwise debugging might get quite a bit harder.</li>
<li>Only catch what you expect! Do <strong>not</strong> use <code>except</code> without specifying which exceptions should be handled unless you are a 100% sure that you absolutely don't care what's happening in that try-except. This blank <code>except</code> also catches keyboard interrupts using Ctrl+C, which can be, ummm, unconvenient sometimes.</li>
</ol>
    </div>