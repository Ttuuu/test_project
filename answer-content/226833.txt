<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A possibility is to store the parents as we go so we don't need to keep searching though the input array. <br> 
We can use a dictionary to look up the parents by id.</p>

<p>If we can guarantee that the ancestors for a category all appear in the array before the category then we can do this in one pass.</p>

<p>Reading through the array we add each category to the dictionary, keyed to its id.
We can also use the dictionary entry to show if a given item has already been added to the result (this removes the need for the <code>Contains()</code> check)</p>

<p>Then, if it has a parent, we get the parent from the dictionary and if it hasn't been added, add it, and then repeat for the parent't parent (if any), recursing up the tree.</p>

<pre><code>private static Category[] Filter(IEnumerable&lt;Category&gt; categories, string searchString)
{
    var ret = new List&lt;Category&gt;();
    var dict = new Dictionary&lt;int, DictEntry&gt;();
    foreach (var category in categories)
    {
        dict.Add(category.Id, new DictEntry(category));
        if (category.Description.IndexOf(searchString, StringComparison.OrdinalIgnoreCase) &gt;= 0)
        {
            ret.Add(category);
            dict[category.Id].Added = true;

            var parentId = category.ParentId;

            while (true)
            {
                if (parentId == 0) break;
                var parent = dict[parentId].Category;

                if (!dict[parent.Id].Added)
                {
                    ret.Add(parent);
                    dict[parent.Id].Added = true;
                }
                parentId = parent.ParentId;

            }
        }
    }
    return ret.OrderBy(n =&gt; n.Level).ToArray();
}
</code></pre>

<p>If we cannot guarantee that the ancestors appear ahead of the category then we can do it in two passes.  Not O(N) (AFAIK) but still should be notably faster than searching all the inputs for each ancestor.</p>

<pre><code>private Category[] Filter(IEnumerable&lt;Category&gt; categories, string searchString)
{
    var ret = new List&lt;Category&gt;();
    var dict = new Dictionary&lt;int, DictEntry&gt;();
    foreach(var category in categories)
    {
        dict.Add(category.Id, new DictEntry(category));
        if(category.Description.IndexOf(searchString, StringComparison.OrdinalIgnoreCase) &gt;=0)
        {
            ret.Add(category);
            dict[category.Id].Added = true;
        }
    }

    var ancestors = new List&lt;Category&gt;();
    foreach(var category in ret)
    {
        var parentId = category.ParentId;

        while(true)
        {
            if (parentId == 0) break;
            var parent = dict[parentId].Category;

            if(!dict[parent.Id].Added)
            {
                ancestors.Add(parent);
                dict[parent.Id].Added = true;
            }
            parentId = parent.ParentId;

        }

    }
    return ret.Concat(ancestors).OrderBy(n =&gt; n.Level).ToArray();
}
</code></pre>

<p><strong>Other points:</strong></p>

<p>I would push for having the input being <code>IEnumerable&lt;ScrapCategory&gt;</code> rather than <code>ScrapCategory[]</code>.  The array requirement limits without adding anything useful.</p>

<p><strong>Edit - Add missing helper class</strong> <br></p>

<pre><code>class DictEntry
{
    public DictEntry(Category category)
    {
        Category = category;
        Added = false;
    }
    public Category Category { get; }
    public bool Added { get; set; }
}
</code></pre>
    </div>