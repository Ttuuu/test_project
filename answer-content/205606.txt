<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Option 1: Same functionality, smaller size</h1>

<blockquote>
  <p>Can I reduce the code in a better way more optimised?</p>
</blockquote>

<p>If you want to optimize for size, then here's a suggestion for a more compact version:</p>

<pre><code>function checkCookie(cookies, name) {
    return (cookies || '')
        .split(/;\s*/)
        .some(cookie =&gt; cookie.split('=', 1)[0] === name)
}    
</code></pre>

<ul>
<li><code>(cookies || '')</code> produces the same function result as the original <code>if(…) return false</code></li>
<li><code>split</code> uses a regular expression that matches the space after the semicolon, saving the <code>trim</code> in the lines below</li>
<li>the assignments for <code>eachCookie</code> and <code>res</code> can be removed, leading to a single line <code>some</code> call</li>
</ul>

<p><strong>Benefits:</strong> short &amp; concise</p>

<p><strong>Limitations:</strong> only checks for existence of a cookie, not its value</p>

<h1>Option 2: More versatility, similar size</h1>

<p>There is an opportunity for a different design that allows for more generic use cases: you can first parse the cookie string into a plain object and then check for the existence of the cookie in question.</p>

<pre><code>function parseCookie(cookie) {
    return (cookie || '')
        .split(/;\s*/)
        .reduce((result, entry) =&gt; {
            const [key, value] = entry.split('=', 2)
            result[key] = value
            return result
        }, {})
}

function checkCookie(cookies, name) {
    return Boolean(parseCookie(cookie)[name])
}
</code></pre>

<p>Granted, this a solution may be a bit "slower" than the original implementation. This shouldn't be an actual issue unless you intend to parse millions of cookie strings and time is a constraint.</p>

<p>What you gain in return though is a lean, readable, reusable function that lets you check for the existence of a cookie and in addition can also return the cookie’s value.</p>

<p><strong>Benefits:</strong> check for cookie existence and get values; faster than original solution when checking multiple cookies</p>

<p><strong>Limitations:</strong> no savings in size</p>

<h1>Option 3: Universal key-value parser, a bit larger</h1>

<p>The above solution is based on code that I use to parse URL query strings. Both cookie- and query strings are key-value pairs, except cookies use a semicolon <code>;</code> as a separator, while query strings use an ampersand <code>&amp;</code>. If we adapt our function to accept the separator and equals sign as (optional) parameters, we can parse query strings and cookies with the same function:</p>

<pre><code>function parseValues(cookie, sep, eq) {
    sep = sep || /;\s*/
    eq = eq || '='

    return (cookie || '')
        .split(sep)
        .reduce((result, entry) =&gt; {
            const [key, value] = entry.split(eq, 2)
            result[key] = decodeURIComponent(value)
            return result
        }, {})
}

function parseCookies(cookies) {
    return parseValues(cookies)
}

function parseQuery(query) {
    return parseValues(query, '&amp;')
}

function checkCookie(cookies, name) {
    return Boolean(parseCookie(cookie)[name])
}
</code></pre>

<h2>Option 4: Consider using libraries</h2>

<p>I understand that you wanted to write your own function as opposed to introducing <code>cookie-parser</code>, which does a lot more than what you actually need - especially signing &amp; signature verification - and is thus larger in size than what you aim for.</p>

<p>Other options would be <code>cookie</code> or <code>lightcookie</code>, which are smaller in size and might be a good choice over writing your own function. </p>

<pre><code>const lightcookie = require('lightcookie')

function checkCookie(cookies, name) {
    return Boolean(lightcookie.parse(cookies)[name])
}
</code></pre>

<p><strong>Benefits:</strong> save time; avoid mistakes; benfit from tested &amp; verified code</p>

<p><strong>Limitations:</strong> can be larger than what you are willing or able to include</p>
    </div>