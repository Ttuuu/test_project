<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice.  I only have three comments.</p>

<ol>
<li><p>In <code>draw_polygon()</code> use a <code>for</code> loop rather than an explicit counter:</p>

<pre><code>def draw_polygon(a_turtle, length, sides):
    for counter in range(sides):
        a_turtle.forward(length)
        a_turtle.right(360 / sides)
</code></pre></li>
<li><p>Add comments and/or docstrings.  These will help you when you look at the code in the future.</p>

<p>For these kinds of tasks I usually add a top level docstring with a description of the task.  Include a url to the problem if applicable.  For example at the top of the file:</p>

<pre><code>'''Recursive implementation of Sierpinski Triangle

Assignment from Programming Fundamentals with Python on Udacity.
'''
</code></pre>

<p>For any function/method etc. that has an algorithm that isn't immediately obvious from the code, add a comment or docstring explaining what/how it's doing it.  For example, I would add a docstring to <code>draw_recursive_triangle()</code> to explain what the function is doing, any assumptions (does it matter which way the turtle is pointing?, are there min or max limits on length? are the triangles always equilateral?, etc.).</p></li>
<li><p>The functions might be useful in another program/assignment.  Rather than rewriting them, you could import this file as a library if you use a <code>if __name__ == "__main__":</code> guard like so:</p>

<pre><code>if __name__ == "__main__":
    draw()
</code></pre>

<p>That way it runs the program if you execute the file, but not if you import it as a library</p></li>
</ol>
    </div>