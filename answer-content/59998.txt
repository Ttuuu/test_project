<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One alternative possibility would be something like:</p>

<pre><code>template &lt;class T&gt;
bool contains(std::vector&lt;T&gt; const &amp;v, T const &amp;x) { 
    return ! (v.empty() ||
              std::find(v.begin(), v.end(), x) == v.end());
}
</code></pre>

<p>As far as more efficient goes, there are a couple of possibilities. If you're doing this very often, you might want to consider using <code>std::set</code> or <code>std::unordered_set</code> instead. They support what you're asking for much more directly. Another obvious possibility would be to continue to store the data in a vector, but keep the vector sorted so you can do the search with <code>std::binary_search</code>.</p>

<p>Right now this is O(N). Using <code>std::set</code> or a sorted vector with <code>std::binary_search</code> will reduce that to O(log N). <code>std::unordered_set</code> can reduce the (expected) complexity to O(1).</p>

<p>Big-O can be deceiving though. Especially if the number of elements involved is small, such things as contiguous allocation can make more difference than the theoretical complexity. For a large enough number of elements, <code>std::unordered_set</code> will almost certainly be the fastest of these--but that number of elements may be quite a bit larger than you ever actually use.</p>

<p>Personally, I can't say I really favor parameterizing the container type either. The problem is fairly simple: if (for example) somebody stores the data in an <code>std::set</code>, it will still work, but it'll give truly terrible performance. If you're going to support associative containers at all, you want to provide code that does so at least reasonably efficiently (which, in those cases means <em>not</em> using <code>std::find</code>).</p>
    </div>