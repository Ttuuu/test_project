<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sharon Ben Asher has a good answer using streams. I'd like to add some suggestions for the original code, since beginners are often not familiar with streams in Java.</p>

<p>You have some redundancy in your code, meaning code that is executed multiple times, which can hurt readability, decrease performance and introduce bugs. To tackle the issue, you can save results from method calls in variables and just access the variables multiple times. This also allows you to give the result a new name, and although it might make the code slightly longer in terms of lines of code, it can also make it a lot cleaner, and the individual lines shorter.</p>

<p>The most important example is calling <code>property.getKey()</code> and <code>property.getValue()</code> multiple times. Instead, do that at the beginning of the loop, and save the results in variables.</p>

<pre><code>for (Map.Entry&lt;String, Object&gt; property : properties.entrySet()) {
    String key = property.getKey();
    Object value = property.getValue();
</code></pre>

<p>Then you access them in your code, which makes it easier to see where the same values are used. You are using the same method call to access another element of a different map, so again you can use a variable to save the result and make the code clearer and shorter:</p>

<pre><code>    if (existingProperties.containsKey(key)) {
        Object existingObject = existingProperties.get(key);
        if (existingObject instanceof String &amp;&amp; value instanceof String) {
            String existingValue = (String) existingObject;
            String newValue = (String) value;
</code></pre>

<p>We can improve readability by formatting very long lines (like that long string concatenation) on 2 or 3 lines, introducing newlines where we can devide it into logical parts:</p>

<pre><code>            if (existingValue.equals(newValue)) {
                throw new Exception("Property " + key +
                                    " is existing with value " + newValue +
                                    " in requires " + requiresName);
            }
</code></pre>

<p>By the way, there seems to have been a space missing at the start of the string <code>"in requires "</code>, and a typo in <code>" is existsing with value "</code>.</p>
    </div>