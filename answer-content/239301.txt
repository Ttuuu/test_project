<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Interface</h1>

<p>The first thing I notice is that there is a lot of duplicated functions, because you provide a named function for each overloaded operator: <code>coefficient</code>, <code>add</code>, <code>plus</code>, <code>subtract</code>, <code>minus</code>, <code>multiply</code>, <code>times</code>, and <code>print</code>.  Some of them even have non-member versions.  This is not common practice in C++ as far as I can tell, so just eliminate them.</p>

<p>Returning a top-level <code>const</code> type is not helpful, because the cv-qualifications of non-class type prvalues are automatically stripped, and it is occasionally useful to perform a non-<code>const</code> operation on a class prvalue.  Marking a parameter as top-level <code>const</code> is also not helpful (especially in declarations), because they are stripped as part of the function signature and the point of passing by value is often just to get a modifiable object.</p>

<p>For small types like <code>std::size_t</code>, passing by value is more efficient than passing by const reference.</p>

<p>Binary operators are often overloaded as non-member functions, to minimize the burden of the class.</p>

<p>Some constructors should be marked as <code>explicit</code>, to prevent unwanted implicit conversion:</p>

<pre><code>explicit polynomial(const std::string&amp;);
explicit polynomial(const std::vector&lt;long double&gt;&amp;);
</code></pre>

<p>Also, consider taking <code>std::string_view</code>s instead of <code>const std::string&amp;</code>s.  The coefficient constructor should take the argument by value and move in, to enable move semantics:</p>

<pre><code>explicit polynomial(std::vector&lt;long double&gt; coeff)
    : coefficients{std::move(coeff)}
{
    remove_trailing_zeros();
}
</code></pre>

<p>This function:</p>

<pre><code>polynomial &amp;operator=(const std::string&amp;);
</code></pre>

<p>is unnecessary if the constructors are not explicit.  If they are, then this function probably shouldn't exist either because it's basically implicit conversion.</p>

<h1>Design</h1>

<p>Right now, you represent zero polynomials as <code>[0]</code>, and treat their order as zero.  This is wrong, because the order of zero polynomials are usually left undefined or defined as negative infinity.  Rules like</p>

<p><span class="math-container">$$
\deg(AB) = \deg(A) + \deg(B)
$$</span></p>

<p>will cease to work zero polynomials have order zero.  Consider representing zero polynomials as <code>[]</code> and throw an exception (or return a special type) in the <code>order</code> function.</p>

<p>Allowing write access to coefficients is not a good option, because this may break the no-trailing-zero class invariant.  The process of stripping trailing zeros can be extracted into a function:</p>

<pre><code>private:
    void remove_trailing_zeros()
    {
        // ...
    }
</code></pre>

<p>As I mentioned in a comment, I'm not sure if the name of the variable should be considered part of the polynomial.  Conceptually, the variable should probably be specified as an output manipulator, like this:</p>

<pre><code>std::cout &lt;&lt; set_variable("x") &lt;&lt; polynomial;
</code></pre>

<p>This can be implemented by adding facets to the locale of the stream (or by using the <code>std::ios_base::xalloc</code> mechanism if you want to be immune to locale changes).</p>

<p>Also consider making the class a template on the value type.</p>

<h1>Implementation</h1>

<p><code>(character &gt;= '0' &amp;&amp; character &lt;= '9')</code> can be replaced by <code>std::isdigit(character)</code> (or <code>std::isdigit(character, std::locale::classic())</code> if someone called <code>std::setlocale</code>).</p>

<p>In my opinion, it is more convenient to implement modifying operations (<code>+=</code>, etc.) based on non-modifying operations (<code>+</code>, etc.) in this case, because we need to copy anyway:</p>

<pre><code>friend polynomial operator+(const polynomial&amp; lhs, const polynomial&amp; rhs)
{
    const auto&amp; [small, large] = std::minmax(lhs, rhs,
        [](const auto&amp; a, const auto&amp; b) {
            return a.size() &lt; b.size();
        }
    );

    auto result = large;
    std::transform(small.begin(), small.end(), result.begin(), result.begin(), std::plus{});
    return polynomial{std::move(result)}; // trailing zeros removed in constructor
}

polynomial&amp; operator+=(const polynomial&amp; other)
{
    return *this = *this + other;
}
</code></pre>
    </div>