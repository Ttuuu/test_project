<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You’ve got too many <code>()</code>’s in this statement:</p>

<pre><code>your_list_split1 = (', '.join((map(str,your_list[:-1]))))
</code></pre>

<p>You don’t need the parenthesis around the entire expression, nor for the argument inside of the <code>join(...)</code> function.  You should also add a space after the comma, to be PEP-8 compliant:</p>

<pre><code>your_list_split1 = ', '.join(map(str, your_list[:-1]))
</code></pre>

<p>I’m not sure if it was a requirement of the question or not, but generally with lists, you do not include a comma between the second last item and the word “and”.  If that comma is not required by the assignment, then if you remove it, the <code>items == 2</code> case is unnecessary, as the final <code>else</code> clause will properly handle 2 items.  <strong>Edit</strong>: Or since the comma appears to be required, if it is acceptable for 2 items (<code>'item1, and item2'</code>), keep the comma in the <code>else:</code> and the <code>items == 2</code> case is still unnecessary.</p>

<p>If you are learning Python 3, you should probably jump right to Python 3.7, and take advantage of f-strings, where you can put formatting codes for variables/expressions directly into the strings:</p>

<pre><code>else:
    return f"'{your_list_split1}, and {your_list[-1]}'"
</code></pre>

<hr>

<p>Don’t intermix code and function definitions.</p>

<pre><code>def list_concatenator(your_list):
    # ... etc ...

your_list = [ ... ]
list_concatenator(your_list)
</code></pre>

<hr>

<p>Avoid using global variable names as function argument names.  In longer functions, the reader might get confused between whether a global variable is being referenced or not.  </p>

<hr>

<p>As it presently stands, your code does some work, gets a result, and then does nothing with it.  You probably want to assign the returned value to a variable, or print it, or both.</p>

<hr>

<p>You are calling <code>str(...)</code> alot throughout your function, to ensure that the item you are referencing in your list is a string which can be concatenated with other strings.  You should instead just do it once, at the top of the function:</p>

<pre><code>def list_concatenator(your_list):
    your_list = list(map(str, your_list))
    # remainder of the code, without the need for any str( ) calls.
</code></pre>
    </div>