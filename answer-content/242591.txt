<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use a generative approach</h3>

<p>Iterating over all possible permutations and filtering out the invalid ones results in lots of wasted work.  Move the filtering operation earlier so many invalid permutations are not generated in the first place. </p>

<p>For example, <code>permute()</code> contains <code>for i in range(1, slen + 1)</code>, but we know that an octet can only be up to 3 digits long.  Change the loop to <code>for i in range(1, min(4, len(s)+1))</code>. Also, if <code>first</code> is not a valid octet skip the recursive call (none will result in a valid address).</p>

<p>Something like this:</p>

<pre><code>def period_partition(s, k):

    def is_valid_octet(s):
        # section ranges 0 - 255 and `00` or `000`, `01` are not valid but 0 is
        return s == '0' or not s.startswith('0') and 0 &lt; int(s) &lt; 256

    if s and k:
        for i in range(1, min(4, len(s)+1)):
            first, rest = s[:i], s[i:]
            if is_valid_octet(first):
                yield from (f"{first}.{p}" for p in period_partition(rest, k-1))

    elif s and is_valid_octet(s):
        yield s


testcases = [
    ("", 1),
    ("1234", 2),
    ("19216811", 3),
    ("192168111234", 3),
    ("192168111234", 4),
    ("19216811123444", 4),
    ("192168111234444", 4),
]

for s, k in testcases:
    print(f"\nperiod_partition({s!r}, {k})")

    for partition in period_partition(s, k):
        print(f"  {partition}")
</code></pre>

<p>Note: I modified <code>period_partition()</code> to be a generator yields all valid partitions.  Use <code>list()</code> if you need an actual list.</p>
    </div>