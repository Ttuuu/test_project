<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I had take a look on your source code, and my comments are bellow:</p>

<h2>Readable:</h2>

<ol>
<li>You should follow coding conventions. Such as: add an empty line between brackets( <strong>{}</strong> ). Ex:</li>
</ol>

<blockquote>
<pre><code>int ButtonAChoosed = PlayerPrefs.GetInt("PressedButtonA", 0);
if (ButtonAChoosed == 0)
{
    .....your logic code
}
</code></pre>
</blockquote>

<p>then you should add an empty line between <strong>int ButtonAChoosed</strong> ... and <strong>if (ButtonAChoosed == 0)</strong>:</p>

<blockquote>
<pre><code>int ButtonAChoosed = PlayerPrefs.GetInt("PressedButtonA", 0);

if (ButtonAChoosed == 0)
{
    .....your logic code
}
</code></pre>
</blockquote>

<ol start="2">
<li><p>You are using some magic numbers, values. Ex: 0,1,..,7 are magic numbers. You should define constants or something else to make it more meaning.</p></li>
<li><p>Redundant properties: There are some redundant properties in your source code. Ex: I don't see where are you using bellow properties. In case you don't use it, you should delete it.</p></li>
</ol>

<blockquote>
<pre><code>public Text text;    
public int CurrentTrainToSpawn = 0;
</code></pre>
</blockquote>

<h2>OOP:</h2>

<p>Don't public members of class if you don't use it out side the class. I found that allmost of your class members are public. Ex:</p>

<blockquote>
<pre><code>public Button[] Buttons;    
public void ButtonA()
</code></pre>
</blockquote>

<p>Then please consider to private it if you don't use them out side of the class.</p>

<h2>DRY:</h2>

<p><strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourselft: Almost of your methods( ButtonA(), ButtonB(),...) have similar logic. Then you can consider group similar logic, define a method for the group of logic. And then you can reuse it:</p>

<p>As my quickly review, I changed bellow properties to 2 list of objects:</p>

<blockquote>
  <p>public GameObject  TrainB, TrainC, TrainD, TrainE, TrainF, TrainG, TrainH, TrainI;</p>
  
  <p>public GameObject  MineB, MineC, MineD, MineE, MineF, MineG, MineH, MineI;</p>
</blockquote>

<p>And then, I grouped your logic as a ButtonCommand() method:</p>

<pre><code>private List&lt;GameObject&gt; Trains;
private List&lt;GameObject&gt; Mines;

private void ButtonCommand(string buttonName, int buttonIndex, string checkedButtonName = "")
{
    int buttonChoosed = PlayerPrefs.GetInt(buttonName, 0);
    if (buttonChoosed == 0 &amp;&amp; (string.IsNullOrEmpty(checkedButtonName) || layerPrefs.GetInt(checkedButtonName, 0) == 1))
    {
        Buttons[index].gameObject.active = false;   
        Trains[index + 1].gameObject.active = true;
        Mines[index + 1].gameObject.active = true;
        PlayerPrefs.SetInt(buttonName, 1);
    }
}
</code></pre>

<p>And then you can reuse it for ButtonA(), ButtonB(),...methods. The code become more shorter and easier to maintain:</p>

<pre><code>    public void ButtonA()
    {
        ButtonCommand("PressedButtonA", 0);
    }

    public void ButtonB()
    {
        ButtonCommand("PressedButtonB", 1, "PressedButtonA");
    }

    //............

    public void ButtonH()
    {
        ButtonCommand("PressedButtonH", 7, "PressedButtonI");
    }

    public void UpdateTrainPreFab()
    {
        ButtonCommand("PressedButtonA", 0);
        ButtonCommand("PressedButtonB", 1, "PressedButtonA");
        //........
        ButtonCommand("PressedButtonH", 7, "PressedButtonI");
    }
</code></pre>

<h2>Design patterns:</h2>

<p>I think you can consider to apply <a href="https://en.wikipedia.org/wiki/Command_pattern" rel="nofollow noreferrer">command patterns</a>.</p>
    </div>