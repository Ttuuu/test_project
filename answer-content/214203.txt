<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a long comment to <a href="https://codereview.stackexchange.com/a/214197/172628">this post</a>.</p>

<blockquote>
  <p>Because providing the 3rd argument (4) you are satisfying the function
  signature despite perhaps wanting to provide info='A'.</p>
</blockquote>

<p>Yes I desperately tried to find a way to make a class instance return a value when "called" directly, that would allow to encapsulate both the result and the partial in a class, which would then permit to have <code>g(2, 3, 4)</code> to output the result of the call <code>f(2, 3, 4)</code> and <code>g(2, 3, 4)(info="x")</code> to output the result of the call <code>f(2, 3, 4, info="x")</code>. But I couldn't find a way, I actually had no idea of what to search for (I still don't).</p>

<blockquote>
  <p>There isn't a good way to work around this. Your curry also make behave unexpectedly with *args or **kwargs functions.</p>
</blockquote>

<p>To be honest I didn't even though about this, I don't even know what <code>curry(bar)(1)(2)(3)</code> should output when applied on:</p>

<pre><code>def bar(**kwargs):
    print(kwargs)
</code></pre>

<blockquote>
  <p><code>inspect.signature</code> doesn't work for some builtins</p>
</blockquote>

<p>Hmm, ok, that's very interesting, doesn't this by itself make <code>inspect.signature</code> broken? Shouldn't this be considered to be a bug in python? Is there another (saffer) way of knowing the number of arguments a function takes?</p>

<blockquote>
  <p>your implementation continues to curry if you pass too many args.</p>
</blockquote>

<p>I missed that, I think this should fix it (but I'm using the signature again):</p>

<pre class="lang-py prettyprint-override"><code>partial = functools.partial(self._partial, *args, **kwargs)
signature = inspect.signature(partial.func)
try:
  signature.bind(*partial.args, **partial.keywords)
except TypeError as e:
  if len(partial.args) &lt; len(signature.parameters):
    return curry(copy(partial))
return partial.func(*partial.args)
</code></pre>

<p>Which also has the advantage of having the correct exception raised: </p>

<pre><code>File "main.py", line 28, in test_currying
    print(g(2)(3, 4, 5, 6))
File "main.py", line 43, in __call__
    return partial.func(*partial.args)
TypeError: f() takes from 3 to 4 positional arguments but 5 were given
</code></pre>

<blockquote>
  <p>All of these problems compounding, I'd say it may not be wise to use such a pattern for anything more than experimentation or a functional exercise.</p>
</blockquote>

<p>I should have said that in the first place, but yes the only point of this is to better understand how python work.</p>

<blockquote>
<pre><code>def foo(a, *, b, c):
   pass
</code></pre>
  
  <p>This doesn't have the same issue as optional kwargs, because you must provide b and c (but you must do so as b=2, c=3, instead of positionally)</p>
</blockquote>

<p>I wasn't aware of that form, that's very handy. If I understand correctly, this is more or less equivalent to:</p>

<pre><code>def foo(a, b=None, c=None):
  if b is None or c is None:
    raise TypeError("foo is missing some arguments")
  pass
</code></pre>

<p>I'll update this with more questions once I'll have read your code. Anyway, thanks for this amazing feedback. </p>
    </div>