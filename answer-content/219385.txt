<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first one is more performant because you are creating a Double which is a primitive data type. 
<br><br>
In the second one, you are creating three BigDecimal objects which are not a primitive and a lot larger containing a lot more functionality.
<br>
This is the code of Big Decimal Divide function.</p>

<p><a href="https://github.com/frohoff/jdk8u-dev-jdk/blob/master/src/share/classes/java/math/BigDecimal.java" rel="nofollow noreferrer">To see all source code</a>
<br></p>

<pre><code>  public BigDecimal divide(BigDecimal divisor) {
    /*
     * Handle zero cases first.
     */
    if (divisor.signum() == 0) {   // x/0
        if (this.signum() == 0)    // 0/0
            throw new ArithmeticException("Division undefined");  // NaN
        throw new ArithmeticException("Division by zero");
    }

    // Calculate preferred scale
    int preferredScale = saturateLong((long) this.scale - divisor.scale);

    if (this.signum() == 0) // 0/y
        return zeroValueOf(preferredScale);
    else {
        /*
         * If the quotient this/divisor has a terminating decimal
         * expansion, the expansion can have no more than
         * (a.precision() + ceil(10*b.precision)/3) digits.
         * Therefore, create a MathContext object with this
         * precision and do a divide with the UNNECESSARY rounding
         * mode.
         */
        MathContext mc = new MathContext( (int)Math.min(this.precision() +
                                                        (long)Math.ceil(10.0*divisor.precision()/3.0),
                                                        Integer.MAX_VALUE),
                                          RoundingMode.UNNECESSARY);
        BigDecimal quotient;
        try {
            quotient = this.divide(divisor, mc);
        } catch (ArithmeticException e) {
            throw new ArithmeticException("Non-terminating decimal expansion; " +
                                          "no exact representable decimal result.");
        }

        int quotientScale = quotient.scale();

        // divide(BigDecimal, mc) tries to adjust the quotient to
        // the desired one by removing trailing zeros; since the
        // exact divide method does not have an explicit digit
        // limit, we can add zeros too.
        if (preferredScale &gt; quotientScale)
            return quotient.setScale(preferredScale, ROUND_UNNECESSARY);

        return quotient;
    }
}
</code></pre>
    </div>