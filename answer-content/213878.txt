<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know that this already has an excepted answer but I will demonstrate the current <code>Logger</code> that I am using and what it looks like. Mind you though; it inherits from a <code>Singleton</code> class so that only one <code>Logger</code> can be constructed per a single application instance. It also relies on a few other classes in which I can not show here. </p>

<p>There was some functionality to make it thread safe in the original design, however I am currently in the process of updating this class from using <code>Windows</code> headers for <code>CRITICAL_SECTION</code> and replacing them with <code>mutex</code> and <code>lock_guard</code>. </p>

<p>There is also an <code>ExceptionHandler</code> class where the two work together in an integrated manner, however, no exceptions can be thrown from within the <code>Logger</code> since the <code>ExceptionHandler</code> itself uses the <code>Logger</code>. This way if an exception is thrown and caught; it will write that exception both to the console and the log file. </p>

<hr>

<p>The declaration of the <code>Logger</code> class looks like this:</p>

<p><em>-Logger.h-</em></p>

<pre><code>#pragma once

#include "Singleton.h"

#include &lt;array&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;

namespace util {

    class Logger final : public Singleton {
    public:
        enum Type {
            INFO = 0,
            WARNING,
            ERROR
        };

    private:
        std::string filename_;
        unsigned maxCharLength_;

        std::array&lt;std::string, 3&gt; logTypes_;
        const std::string unknownLogType_;

        // CRICTICAL_SECTION  // replace with mutex and lockguard...

    public:
        explicit Logger(const std::string&amp; filename);
        virtual ~Logger();

        Logger(const Logger&amp; c) = delete;
        Logger&amp; operator=(const Logger&amp; c) = delete;

        static void log(const std::string&amp; text, Type type = INFO);
        static void log(const std::ostringstream&amp; stream, Type type = INFO);
        static void log(const char* text, Type type = INFO);
    };

} // namespace util
</code></pre>

<p>And it's implementation looks like this:</p>

<p><em>-Logger.cpp-</em></p>

<pre><code>#include "Logger.h"

#include "TextFileWriter.h"

#include &lt;conio.h&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;

// include mutex - thread

namespace util {
    static Logger* spLogger_ = nullptr;
} // namespace util

using namespace util;

Logger::Logger(const std::string &amp; filename) :
Singleton( LOGGER ),
filename_( filename ),
maxCharLength_( 0 ),
unknownLogType_( "UNKNOWN" ) {
    // Order MUST MATCH Types in Logger::Type
    logTypes_[0] = "Info";
    logTypes_[1] = "Warning";
    logTypes_[2] = "Error";

    // Find widest log type string
    maxCharLength_ = static_cast&lt;unsigned int&gt;( unknownLogType_.size() );
    for( const std::string&amp; logType : logTypes_) {
        if (maxCharLength_ &lt; logType.size()) {
            maxCharLength_ = static_cast&lt;unsigned int&gt;( logType.size() );
        }
    }

    // critical section - mutex - thread lock


    // Start Log File
    TextFileWriter file(filename, false, false);

    spLogger_ = this;
}

Logger::~Logger() {
    spLogger_ = nullptr;

    // remove critical section or destroy mutex - lockguard, thread etc.
}

void Logger::log(const std::string &amp; text, Type type) {
    log(text.c_str(), type);
}

void Logger::log(const std::ostringstream &amp; stream, Type type) {
    log(stream.str().c_str(), type);
}

#include &lt;Windows.h&gt;

void Logger::log(const char * text, Type type) {
    if (nullptr == spLogger_) {
        std::cout &lt;&lt; "Logger has not been initialized, can not log " &lt;&lt; text &lt;&lt; std::endl;
    }

    // block thread


    // Choose Log Type text string, display "UNKNOWN" if Type is out of range.
    std::ostringstream stream;
    stream &lt;&lt; std::setfill(' ') &lt;&lt; std::setw(spLogger_-&gt;maxCharLength_);

    try {
        stream &lt;&lt; spLogger_-&gt;logTypes_.at(type);
    } catch (...) {
        stream &lt;&lt; spLogger_-&gt;unknownLogType_;
    }

    // I am currently in the process of removing Windows specific code:
    // I am trying to do something similar to the date &amp; time code below
    // but in a more generic, portable and cross - platform way using
    // only stand library code.

    // Date &amp; Time
    SYSTEMTIME time;
    GetLocalTime(&amp;time);

    stream &lt;&lt; " [" &lt;&lt; time.wYear &lt;&lt; '.'
        &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; time.wMonth &lt;&lt; '.'
        &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; time.wDay &lt;&lt; ' '
        &lt;&lt; std::setfill(' ') &lt;&lt; std::setw(2) &lt;&lt; time.wHour &lt;&lt; ':'
        &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; time.wMinute &lt;&lt; ':'
        &lt;&lt; std::setfill('0') &lt;&lt; std::setw(2) &lt;&lt; time.wSecond &lt;&lt; '.'
        &lt;&lt; std::setfill('0') &lt;&lt; std::setw(3) &lt;&lt; time.wMilliseconds &lt;&lt; "] ";

    stream &lt;&lt; text &lt;&lt; std::endl;

    std::cout &lt;&lt; stream.str();

    // Save message to log file
    try {
        TextFileWriter file(spLogger_-&gt;filename_, true, false);
        file.write(stream.str());
    } catch (...) {
        // Not saved in log file, write message to console
        std::cout &lt;&lt; __FUNCTION__ &lt;&lt; " failed to write to file: " &lt;&lt; stream.str() &lt;&lt; std::endl;
    }
}
</code></pre>

<hr>

<p>A few things to be aware of with this class is that this depends on a <code>TextFileWriter</code> class which I can not disclose. </p>

<p>I am also in the process of replacing the <code>Date &amp; Time</code> section to be something more portable and standard instead of using <code>Windows</code> headers. </p>

<p>If you look closely at the design above, You can see that the <code>Logger</code> class contains an <code>enum</code> for basic types of errors. Their severity is already in order: {<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> }. I can easily expand this class to have different types of errors. The class stores a <code>string</code> for its filename, simple enough. There is an <code>array</code> of strings where the size of the array matches the types of errors. </p>

<p>The constructor simply takes a string as a filename. It initializes the names of the error types with a string value. The <code>maxCharLength</code> is currently used for formatting the output to the console and written text file. I use the <code>TextFileWriter</code> class to create a file instead of having this responsibility within the <code>Logger</code>. This way I can have many different things read and write to files through the <code>FileHandler</code> classes. There is also a static pointer to this class that gets set as the last operation being done within the constructor. </p>

<p>The destructor set's the pointer back to null, and will eventually remove or destroy any mutexes or locks. </p>

<p>There are 3 overloaded <code>log</code> functions that all get passed to the one that takes a <code>const char*</code>. They have a second parameter which allows the user or caller to specify the type of error and it has a default value of <code>INFO</code> just incase you want to quickly write something to the console that isn't an error. The <code>log</code> function will also write the same message with the same format to a log file. </p>

<p>Also <code>Logger</code> must be the first thing created because there is a stipulation in its parent class <code>Singleton</code> that <code>Logger</code> must be created before any other <code>Singleton</code> type. It was originally designed this way because there are several <code>Manager</code> type classes where you only ever want a single <code>Manager</code> class. So the <code>Logger</code>, <code>Settings</code> and various <code>Manager - classes</code> not shown here other than the <code>Logger</code> all inherit from <code>Singleton</code>. Once they are constructed an error will be thrown if you try to construct another per run of application.</p>

<hr>

<p>Here is what a sample application would look like while using the <code>Logger</code> class:</p>

<p><em>-main.cpp-</em></p>

<pre><code>#include "Logger.h"
#include "ExceptionHandler.h"

int main() {
    try {
        Logger log( "log.txt" );

        Logger::log( "Hello World!" ); // Default Info Type
        Logger::log( "Hello World!, Logger::INFO ); // Explicitly Stating Info Type
        Logger::log( "Hello World!, Logger::WARNING ); // Warning Type
        Logger::log( "Hello World!, Logger::ERROR ); // Error Type

        // And since my ExceptionHandler also uses the Logger

        ExceptionHandler( "Good Bye Cruel World!" );

    } catch( ExceptionHandler&amp; e ) {
        std::cout &lt;&lt; "Exception Thrown: " &lt;&lt; e.getMessage() &lt;&lt; std::endl;
        return EXIT_FAILURE;
    } catch( ... ) {
        // Mind you I believe __FUNCTION__ is Windows or Visual Studio specific.
        // I've tried using __PRETTY_FUNCTION__ but for my purposes the formatting
        // wasn't quite right. You can use your desired choice.  
        std::cout &lt;&lt; __FUNCTION__ &lt;&lt; " Caught Unknown Exception" &lt;&lt; std::endl;
    }    
}
</code></pre>

<p>My output to the console and text file would look like this from the above main.cpp.</p>

<p><em>-Output-</em></p>

<pre><code>   Info [2019.02.20  6:54:17.282] Hello World!
   Info [2019.02.20  6:54:17.283] Hello World!
Warning [2019.02.20  6:54:17.284] Hello World!
  Error [2019.02.20  6:54:17.285] Hello World!
  Error [2019.02.20  6:54:17.285] Good Bye Cruel World!
</code></pre>

<hr>

<p>Another thing that was also incorporated but is Window's specific is that the code works with the standard console and it's property settings. When the logger writes to the console depending on what kind of text is being printed, basic <code>cout</code> will always white text against a black background, but as for the <code>Logger</code> types, each different type of error has a different set of parameters for the console's text color and background color. This way while debugging an application and some error is generated and or thrown; I can easily tell what type of error I'm reading just by the color of the text and background. </p>

<hr>

<p><em>-Disclosure-</em></p>

<p>I hope that this gives you some insight towards a design of a versatile Logger. Now this code is not 100% mine as I did not fully write this. The overall structure and implementation has come from <code>Marek A. Krzeminski</code> as the original code is <code>(c)</code>. You can find the full source material <a href="https://www.marekknows.com/about.php" rel="nofollow noreferrer">here</a>. </p>

<p>He has given me permission to share parts of his code in situations like this provided that: I do not show fully compliable source code and that I give him credit when I do so. I am free to use his original code for my own personal uses since I have subscribed to his content in that past as long as I don't use any of it for commercial purposes. I do however, like to use parts of his code when applicable when someone needs some advice towards specific algorithms, functionality or just overall code design. I like to take what I have learned from him and to share that learning experience. I am also in the process of redesigning his original class to be my own that is fully generic, portable, cross-platform capable while using modern C++ standards and techniques. </p>
    </div>