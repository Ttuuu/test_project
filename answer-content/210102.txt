<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>findSquareSum()</code>, what you've labelled as <code>product</code> is actually a sum. So that's a little confusing. The digits squared is a product but adding them together is a running sum.</p>

<p>I like to avoid transitions to/from <code>String</code> representation whenever possible, but that's mostly a style thing.</p>

<p>If you make the <code>visited</code> set a passed parameter to the <code>isHappyNumber()</code> method, you can</p>

<ol>
<li>keep it immutable</li>
<li>avoid emptying it between runs</li>
<li>make the method tail recursive, which will be faster and more memory efficient</li>
</ol>

<p>.</p>

<pre><code>def isHappyNumber(n: Int, seen: Set[Int] = Set()): Boolean =
  if (n == 1) true
  else if (seen(n)) false
  else isHappyNumber(findSquareSum(n), seen+n)
</code></pre>

<p>Here I've given the <code>Set</code>, now called <code>seen</code>, a default value (empty) so it doesn't have to be specified when invoked.</p>

<pre><code>(1 to 247).filter(isHappyNumber(_)).foreach(println)
</code></pre>

<hr>

<p><strong>UPDATE</strong></p>

<p>Ah, I see that I've missed the point and purpose of your <code>visited</code> set, which is to cache unhappy numbers in order to reduce the recursive iterations in future calculations. Not a bad idea, but the obvious next question is: Why not cache all the <code>isHappyNumber()</code> results? You'll have quick lookups on all calculations and you won't have to back-out the happy number results.</p>

<pre><code>//memoize a function of arity-2 but only cache the 1st parameter
//
def memo[A,B,R](f :(A,B)=&gt;R): (A,B)=&gt;R = {
  val cache = new collection.mutable.WeakHashMap[A,R]
  (a:A,b:B) =&gt; cache.getOrElseUpdate(a,f(a,b))
}

//isHappyNumer() is now a memoized function
// for quick lookup of both happy and unhappy numbers
//
val isHappyNumber :(Int, Set[Int]) =&gt; Boolean = memo { (n, seen) =&gt;
  if (n == 1) true
  else if (seen(n)) false
  else isHappyNumber(findSquareSum(n), seen + n)
}

(1 to 24).filter(isHappyNumber(_,Set())).foreach(println)
</code></pre>

<p>You'll note that the scope (visibility) of the mutable hash map is kept quite small and local.</p>
    </div>