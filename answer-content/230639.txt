<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One way to probably speed this up a bit is to use generator expressions. Currently your <code>process_data</code> function has many list comprehensions after another. Each of them results in a list in memory, but you only care about the end result. In addition, you call <code>set</code> on it directly afterwards, so include that in the function itself. I also extracted some constants from the function, no need to always redefine them, and made the stopwords a <code>set</code> so <code>in</code> is <span class="math-container">\$\mathcal{O}(1)\$</span> instead of <span class="math-container">\$\mathcal{O}(n)\$</span>.</p>

<pre><code>STOPWORDS = set(stopwords.words('english'))
TOKENIZER = RegexpTokenizer(r'\w+')
TABLE = str.maketrans('', '', string.punctuation)

def process_data(docu):
    # convert to lower case  
    lower_tokens = (word.lower() for word in tokens.TOKENIZER(docu))
    #remove punctuation
    stripped = (w.translate(TABLE) for w in lower_tokens)
    #remove tokens that are not alphabetic    
    alpha = (word for word in stripped if word.isalpha())
    # remove stopwords
    stopped = (w for w in alpha if w not in STOPWORDS)
    return set(stopped)
</code></pre>

<p>I would also keep <code>data[docID]</code> a <code>set</code>, because you later check for <code>in</code> there as well.</p>

<p>Similarly, you can directly build a <code>set</code> using a set comprehension, instead of creating a list, and then putting it into a set. This way you can turn</p>

<pre><code>vocab = [item for i in data.values() for item in i] #all words in the dataset
total_vocab = list(set(vocab)) #unique word/vocbulary for the whole dataset
total_vocab.sort()
</code></pre>

<p>into</p>

<pre><code>total_vocab = sorted({item for i in data.values() for item in i})
</code></pre>

<p>Incidentally, <code>wordfreq = z.count(x)</code> should always give you <code>1</code>, because you made sure before that <code>z</code> only has unique words.</p>

<p>Instead of <code>inv_index</code> being a normal dictionary and having to use <code>inv_index.setdefault(x, []).append((int(y), wordfreq))</code>, just make it a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict(list)</code></a>, so you can just do <code>inv_index.append((int(y), wordfreq))</code>.</p>
    </div>