<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes. It seems like a bad design or I would say not thought through given that you're building a library project which will be used by other apps.</p>

<p>First of all,
in your library initialization, you should ask for <code>Application</code> reference rather than <code>Context</code> reference.</p>

<p>For example,</p>

<p>if your library has an init method like this,</p>

<p><code>MyLibrary.init(Context applicationContext);</code></p>

<p>then it should be converted to accept <code>Application</code> object like this,</p>

<p><code>MyLibrary.init(Application application);</code></p>

<p>Then,</p>

<p>inside that <code>init</code> method, you should just register your class which is implementing <code>Application.ActivityLifecycleCallbacks</code>. </p>

<p><code>application.registerActivityLifecycleCallbacks(ActivityLifecycleHelper.getInstance());</code></p>

<p>Make sure your class is a <code>singleton</code>. In your example, your <code>ActivityLifecycleHelper</code> class is not a singleton which is definitely a bad design pattern given that you're dealing with global level callbacks and want to initialize only once.</p>

<p>It might look like this,</p>

<pre><code>public class ActivityLifecycleHelper implements Application.ActivityLifecycleCallbacks {
private static ActivityLifecycleHelper ourInstance = new ActivityLifecycleHelper();

private ActivityLifecycleHelper() {
}

public static ActivityLifecycleHelper getInstance() {
    return ourInstance;
}

@Override
public void onActivityCreated(Activity activity, Bundle bundle) {
}

@Override
public void onActivityStarted(Activity activity) {
}

@Override
public void onActivityResumed(Activity activity) {
}

@Override
public void onActivityPaused(Activity activity) {
}

@Override
public void onActivityStopped(Activity activity) {
}

@Override
public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {

}

@Override
public void onActivityDestroyed(Activity activity) {

}
}
</code></pre>

<p>Also, I don't understand why you have two classes here. What's the use case of <code>Usage</code> class ? Something seems wrong in this two class design.</p>

<p>I hope this helps. Let me know if you want me to elaborate anything.</p>
    </div>