<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Headers</h2>

<pre><code>#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;list&gt;
#include &lt;cmath&gt;
#include &lt;ctime&gt;
#include &lt;deque&gt;
#include &lt;queue&gt;
#include &lt;stack&gt;
#include &lt;string&gt;
#include &lt;bitset&gt;
#include &lt;cstdio&gt;
#include &lt;limits&gt;
#include &lt;vector&gt;
#include &lt;climits&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;fstream&gt;
#include &lt;numeric&gt;
#include &lt;sstream&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;unordered_map&gt;
</code></pre>

<p>Some issues here. You definitely don't need all those headers. Proon out the ones you don't need. The problem with putting them all in is that this can hide missing dependencies (if this was a header file and included by other header files).</p>

<p>Normally I don't care much about the order of headers (usually there is some logic there and everybody has their own). But sorting by filename length of include seems a bit odd. I have seen people sort by alphabetical order (not my favorite but it has options and I see the merit). Personally I put things into logical (to me) groups; I put container stuff together, stream stuff together, algorithm stuff together and meta programming stuff together. I put all my C++ headers before my C header.</p>

<h2>Maps</h2>

<p>If you access an element in a map and it does not exist then it is automatically created and "zero-initialized". This means you don't need to search and conditialy update.</p>

<pre><code>  unordered_map&lt;int, int&gt; frequencyMap;
  for (int i = 0; i &lt; n; i++) {
    auto mapIt = frequencyMap.find(arr[i]);
    if (mapIt == frequencyMap.end()) {
      frequencyMap.insert(make_pair(arr[i], 1));
    } else {
      frequencyMap[arr[i]]++;
    }
  }
</code></pre>

<p>Can be simplified too:</p>

<pre><code>  unordered_map&lt;int, int&gt; frequencyMap;
  for (int i = 0; i &lt; n; i++) {
      ++frequencyMap[arr[i]];
  }
</code></pre>

<h2>VLA</h2>

<p>Variable length arrays are an extension of C (part of C99). They were never part of the C++ standard. So this is not legal C++.</p>

<pre><code>cin &gt;&gt; n;
int arr[n];
</code></pre>

<p>Your compiler supports it as an extension to the language but its not a good idea to use it. We use <code>std::vector</code> as a better alternative:</p>

<pre><code>cin &gt;&gt; n;
std::vector&lt;int&gt; arr(n);
</code></pre>

<p>This also allows you to use range based for loops:</p>

<pre><code>  unordered_map&lt;int, int&gt; frequencyMap;
  for (int val: arr) {
      ++frequencyMap[val];
  }
</code></pre>

<h2>Order by frequency.</h2>

<p>I like your idea of ordering by frequency using a <code>std::map</code> but it becomes clunky when you also have to order by value (and thus have a map of <code>std::set</code>). I would simply copy the frequency info into a vector and use a sort.</p>

<pre><code>using Val = std::pair&lt;int, int&gt;;
std::vector&lt;Val&gt;  values(std::begin(frequencyMap), std::end(frequencyMap));
std::sort(std::begin(values), std::end(values), [](Val const&amp; lhs, Val const&amp; rhs)
  {
    return (lhs.second &lt; rhs.second) || (lhs.second == rhs.second &amp;&amp; lhs.first &lt; rhs.first);
  });
</code></pre>

<h2>Standard Issues from Beginners</h2>

<h3>Don't use</h3>

<pre><code>using namespace std;
</code></pre>

<p>This is a crutch that will break for you. Don't get into the habit of using it when it breaks it is not obvious and can lead to hours of debugging. The reason the standard namespace is called <code>std</code> and not <code>standard</code> is so prefixing object in the standard namespace is not that burdensome.</p>

<pre><code>std::vector&lt;int&gt;  val;  // not that hard to add std::
</code></pre>

<h3>Don't return an array from a function</h3>

<pre><code> return solution;
</code></pre>

<p>You are returning the address of a local variable. Once this goes out of scope that variable no longer exists. So you have an invalid pointer returned. This is also another good reason to use <code>std::vector</code> as the copy/move semantics will correctly move it from the current scope to the calling scope.</p>

<p>PS. Your compiler should warn you about this.</p>

<h3>No need to use return in main</h3>

<pre><code>return 0;
</code></pre>

<p>The compiler plants a <code>return 0</code> at the end of main.</p>

<p>By not planting a return in <code>main()</code> it is an indication that your application does not have a failing state (usual for simple code). If it does have a user inserted <code>return 0</code> I always start looking for other places it could return an error code. By not putting a return 0 you indicate to me that there is no error situation and I don't have to look for it.</p>

<h3>Prefer pre increment to post increment</h3>

<pre><code>for (int i = 0; i &lt; p.first; i++)

for (int i = 0; i &lt; p.first; ++i)
</code></pre>

<p>In this case there is basically no difference. But there are situations where the post increment is slightly more complex.</p>

<p>What happen if we change <code>i</code> from an <code>int</code> into an iterator. Then it is a class the executes a function. Most iteratros behave like POD types with pre/post increment but to do that the post increment is slightly more complex. So why not use the one that will always give you optimal code (even if you change the type). So prefer pre-increment.</p>

<h3>Prefer <code>'\n'</code> over <code>std::endl</code></h3>

<p>The difference is that <code>std::endl</code> will force a flush. In simple things like this it makes no difference. But if you are outputting a large amount of information then the extra flush can cause significant performance degradation.</p>

<p>The streams will auto flush themselves and having a human forcing a flush is always non optimal. So prefer to get the same resutls but at optimal speed with <code>'\n'</code>.</p>

<h3>Pointer short hand</h3>

<p>You should note that we have a shortcut pointer notation.</p>

<pre><code>(*mapIt).second

// Shorthand as:
mapIt-&gt;second
</code></pre>

<h2>Avoid short variable names</h2>

<pre><code>for (int i = 0; i &lt; n; i++) {
</code></pre>

<p>This is great if your for loop is two lines long. But if the loop grows and becomes more complex then searching for all instances of <code>i</code> becomes a pain because of all the false positives.</p>

<p>Believe me just because your loop only covers two lines today, in ten years after thousands of bug fixes it will not look as neat. So give me something that is easy to search for in the code base.</p>

<p>I know a lot of people like using <code>i</code> as a loop variable. But this is a hold over from <code>Foortran</code>. Please use longer identifiers it will not cost you that much and the maintainer will not hunt you down with an axe.</p>

<h1>Looks Like this:</h1>

<pre><code>#include &lt;unordered_map&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;

std::vector&lt;int&gt; customSort(std::vector&lt;int&gt; const&amp; arr)
{
    std::unordered_map&lt;int, int&gt; frequencyMap;
    for (int val: arr) {
        ++frequencyMap[val];
    }

    using Val = std::pair&lt;int, int&gt;;
    std::vector&lt;Val&gt;  values(std::begin(frequencyMap), std::end(frequencyMap));
    std::sort(std::begin(values), std::end(values), [](Val const&amp; lhs, Val const&amp; rhs) {
            return (lhs.second &lt; rhs.second) || (lhs.second == rhs.second &amp;&amp; lhs.first &lt; rhs.first);
          });

    std::vector&lt;int&gt; result;
    result.reserve(arr.size());
    for(auto const&amp; val: values) {
        for(int loop = 0;loop &lt; val.second; ++loop) {
            result.push_back(val.first);
        }
    }
    return result;
}

int main()
{
    std::vector&lt;int&gt; arr;

    int n;
    std::cin &gt;&gt; n;
    std::copy_n(std::istream_iterator&lt;int&gt;(std::cin), n,
            std::back_inserter(arr));

    std::vector&lt;int&gt; sorted = customSort(arr);
    std::copy(std::begin(sorted), std::end(sorted),
              std::ostream_iterator&lt;int&gt;(std::cout, "\n"));
}
</code></pre>
    </div>