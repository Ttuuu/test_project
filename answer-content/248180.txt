<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>welcome to code review! I have multiple remarks to your code and I try to build little chapters for each below. My impression is, that you already have programming experience in C and you're now trying to move to C++. While most C code can be compiled by a C++ compiler, the languages are somewhat different and everything that is idiomatic to C is very likely different in C++ ;-)
That being said, here are my remarks, if you have a question on anything, please ask and I'll elaborate:</p>
<hr>
<pre><code>using namespace std;
</code></pre>
<p>Don't do this, this is considered a very bad habit and in fact, no professional C++-developer I've seen so far writes this. This will add all identifiers from the <code>std</code> namespace to your scope and will prevent you from simply using those names otherwise.
You should also use the full qualified names of the type, eg. <code>std::fstream</code> instead of <code>fstream</code>.</p>
<hr>
<p>If you define a variable to be a reference or a pointer, stick the asterisk or the ampersand to the type, not the variable's identifier. So instead of writing</p>
<pre><code>, unsigned short &amp;len,
</code></pre>
<p>write</p>
<pre><code>, unsigned short&amp; len,
</code></pre>
<p>This is a difference to plain C, where the asterisk is written next to the identifier.</p>
<hr>
<p>In C++, use <code>std::cout</code> to write to <em>stdout</em>. Also, errors should be printed to <em>stderr</em> which is <code>std::cerr</code>:</p>
<pre><code>std::cout &lt;&lt; "Output file size: " &lt;&lt; target_size &lt;&lt; " bytes\n";

</code></pre>
<pre><code>if(file_size==0) { 
    std::cerr &lt;&lt; "Error! Input file is empty\n");
    return;
}

</code></pre>
<hr>
<p>When passing a structure to a function, pass it by reference. That way you save C++ from copying the structure's content. If you don't modify the structure's content, pass it by <code>const</code> reference:</p>
<pre><code>int UpdateDictionary(unsigned char* s, unsigned int shift_start, unsigned short Length, std::list&lt;unsigned&gt;&amp; dict);

void compactAndWriteLink(const link&amp; inp, vector&lt;unsigned char&gt; &amp;out);
</code></pre>
<hr>
<p>You're writing your own linked list, but I recommend using <code>std::list</code> instead. C++ standard library offers lots of containers for several use cases and it's always easier to use one of those while also producing more readable code. If you're interested in writing a linked list, I suggest doing this in a project <em>my own linked list</em> that way you don't get distracted with that LZZ stuff ;-)</p>
<p>I'd even go a bit further and suggest that you create a <em>dictionary</em> class:</p>
<pre><code>class dictionary
{
public:
    unsigned short update(unsigned char* s, unsigned int shift_start, unsigned short length);
    void longest_match(unsigned char* s, unsigned int buf_start, unsigned short&amp; len, unsigned short&amp; off);

private:
    std::list&lt;unsigned int&gt; dict[256]; // or even better, use std::array&lt;std::list&lt;unsigned int&gt;, 256&gt;
};
</code></pre>
<hr>
<p>You don't need to include <code>&lt;cstring&gt;</code>.</p>
<hr>
<p>As a hint: you should not use <code>new</code>. There's almost always a better way. For your linked list, I already pointed you to <code>std::list</code>, for the buffer returned from <code>readFile</code>, you could pass a vector to the function and use it to store the buffer:</p>
<pre><code>unsigned int readFile(std::vector&lt;char&gt;&amp; buffer, std::fstream&amp; inp)
{
    inp.seekg(0, ios::beg);
    unsigned int file_start = inp.tellg();
    inp.seekg(0, ios::end);
    unsigned int file_end = inp.tellg();
    unsigned int file_size = file_end - file_start;
    inp.seekg(0, ios::beg);

    buffer.reserve(file_size);
    inp.read(&amp;buffer[0], file_size);
    return file_size;
}
</code></pre>
<p>Note: there are better and more compact ways to read a file:
<a href="https://stackoverflow.com/questions/2602013/read-whole-ascii-file-into-c-stdstring">https://stackoverflow.com/questions/2602013/read-whole-ascii-file-into-c-stdstring</a></p>
<hr>
<p>Instead of passing around <code>unsigned char* data</code> and <code>unsigned int filesize</code> use an <code>std::vector&lt;unsigned char&gt;</code> and pass it by reference. If you want to stick to pointer and size, make the pointer the first parameter.</p>
<hr>
<p>In <code>compressData</code> and <code>uncompressData</code> you don't need a <code>vector</code> to buffer the data. As you're only appending to it, you can simply write to the stream. I'd also rather use a generic stream, that way it's easier to control from the outside whether you want to write to a file or a buffer.</p>
<hr>
<p>If I compile your code with <code>g++ -Wall lzz.cc -o lzz</code> (gcc 8.3.0) I receive following warning:</p>
<pre><code>lzz.cc: In function ‘void compressData(unsigned int, unsigned char*, std::fstream&amp;)’:
lzz.cc:154:11: warning: format ‘%Lf’ expects argument of type ‘long double’, but argument 2 has type ‘double’ [-Wformat=]
    printf("Compression ratio: %.3Lf:1\n", ((double)file_size/(double)target_size));
</code></pre>
<p>This might be to me using a newer compiler, but in any case, always try to compile with <code>-Wall</code> to see if there are any warnings and fix those.</p>
<hr>
    </div>