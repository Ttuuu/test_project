<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code readability and style</h1>

<p>I would recommend you have a look at <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a>, which is Python's official style guide.</p>

<p>Let's introduce you to <a href="https://realpython.com/python-f-strings/" rel="noreferrer"><em><code>f-strings</code></em></a> -</p>

<blockquote>
  <p>To create an f-string, prefix the string with the letter “ <em><code>f</code></em> ”.
  The string itself can be formatted in much the same way that you would
  with
  <a href="https://www.geeksforgeeks.org/python-format-function/" rel="noreferrer"><code>str.format()</code></a>.
  <em>f-strings</em> provide a concise and convenient way to embed python
  expressions inside string literals for formatting.</p>
</blockquote>

<p>So, I would write these three statements -</p>

<blockquote>
<pre><code># rest of the code
def __str__(self):
    return "Player {}".format(self.type)
# rest of the code

position = input("{} turn, what's your move? ".format(player))
# rest of the code
print("{} is the Winner!".format(player))
</code></pre>
</blockquote>

<p>Like this -</p>

<pre><code># rest of the code
def __str__(self):
    return f"Player {self.type}"
# rest of the code    

position = input(f"{player} turn, what's your move? ")
# rest of the code
print(f"{player} is the Winner!")
</code></pre>

<p>See how concise it can get?</p>

<hr>

<p>From <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="noreferrer">PEP 8</a> -</p>

<blockquote>
  <p><a href="https://www.python.org/dev/peps/pep-0257" rel="noreferrer">PEP 257</a> describes good
  docstring conventions. Note that most importantly, the <code>"""</code> that ends
  a multiline docstring should be on a line by itself -</p>

<pre><code>"""Return a foobang

Optional plotz says to frobnicate the bizbaz first.
"""
</code></pre>
  
  <p>For one liner docstrings, please keep the closing <code>"""</code> on the same
  line.</p>
</blockquote>

<p>So, for example, this -</p>

<blockquote>
<pre><code>"""Receives position and player type ('X' or 'O').
Returns modified board if position was valid.
Asks to player try a different position otherwise."""
</code></pre>
</blockquote>

<p>Should actually be written as -</p>

<pre><code>"""Receives position and player type ('X' or 'O').
Returns modified board if position was valid.
Asks to player try a different position otherwise.
"""
</code></pre>

<hr>

<p>Also, since you have descriptively named functions, you don't need those unnecessary comments explaining what your function does. For example, this does not need a comment -   </p>

<blockquote>
<pre><code>def printing_board(self):
    """Prints the board."""
    self.board.print_board()
</code></pre>
</blockquote>

<p>We know you're printing the board; it says in the function itself - <code>def printing_board(self)</code>.</p>

<p>Also, good use of the <a href="https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/" rel="noreferrer"><code>if '__name__' == __'main__':</code></a> guard. Most people don't even attempt to use it.</p>

<hr>

<p>Note that the trailing <code>\</code> solutions are not recommended by PEP 8. One reason is that if space is added by mistake after a <code>\</code> it might not show in your editor, and the code becomes syntactically incorrect.</p>

<p>The PEP changed at <a href="https://hg.python.org/peps/rev/7a48207aaab6" rel="noreferrer">https://hg.python.org/peps/rev/7a48207aaab6</a> to explicitly discourage backslashes.</p>

<blockquote>
  <p>The preferred way of wrapping long lines is by using Python's implied
  line continuation inside parentheses, brackets, and braces. Long lines
  can be broken over multiple lines by wrapping expressions in
  parentheses. These should be used in preference to using a backslash
  for line continuation.</p>
</blockquote>

<p>Another thing is that, here (for example) -</p>

<blockquote>
<pre><code>if self.board["TL"] == player.type and self.board["TM"] == player.type and self.board["TR"] == player.type or \
self.board["ML"] == player.type and self.board["MM"] == player.type and self.board["MR"] == player.type or \
self.board["BL"] == player.type and self.board["BM"] == player.type and self.board["BR"] == player.type or \
self.board["TL"] == player.type and self.board["ML"] == player.type and self.board["BL"] == player.type or \
self.board["TM"] == player.type and self.board["MM"] == player.type and self.board["BM"] == player.type or \
self.board["TR"] == player.type and self.board["MR"] == player.type and self.board["BR"] == player.type or \
self.board["TL"] == player.type and self.board["MM"] == player.type and self.board["BR"] == player.type or \
self.board["BL"] == player.type and self.board["MM"] == player.type and self.board["TR"] == player.type:
</code></pre>
</blockquote>

<p>the lines are too long. According to <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="noreferrer">PEP 8</a> -</p>

<blockquote>
  <p>Limit all lines to a maximum of 79 characters.</p>
</blockquote>

<p>Therefore, these statements could alternatively be written as -</p>

<pre><code>def is_winner(self, player):
    player_type = player.type
    runs = [
        # horizontal
        ["TL", "TM", "TR"],
        ["ML", "MM", "MR"],
        ["BL", "BM", "BR"],
        # vertical
        ["TL", "ML", "BL"],
        ["TM", "MM", "BM"],
        ["TR", "MR", "BR"],
        # diagonal
        ["TL", "MM", "BR"],
        ["BL", "MM", "TR"]
    ]
    for a, b, c in runs:
        if self.board[a] == self.board[b] == self.board[c] == player_type:
            return True
    return False
</code></pre>

<hr>

<p>Overall, in terms of code readability and style, this is what you need to improve. You should make your code more PEP 8 compliant.</p>

<p>Hope this helps!</p>
    </div>