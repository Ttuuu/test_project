<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you pointed out, you don't actually need to lay the characters out into a grid.  It would be more efficient to use arithmetic to figure out the indexes of the characters in each row.</p>

<p>For example, if <code>num_rows</code> is 3, then each down-up cycle will consist of 4 characters.  (<code>zigzag_size = 2 * num_rows - 2</code>).  Then we also know that the top of each zigzag will consist of indexes 0, 4, 8, 12, â€¦ of the string (<code>for z in range(0, len(s), zigzag_size)</code>).</p>

<p>The middle row will consist of indexes <code>z+1</code> and <code>z+3</code>.  The bottom row will consist of indexes <code>z+2</code>.  The <code>zigzag_indexes()</code> generator generalizes those calculations for any <code>numRows</code>.</p>

<pre><code>import math

def zigzag_indexes(num_rows):
    yield (0, math.inf)                             # Top of each zigzag
    yield from zip(
        range(1, num_rows),                         # Downward
        range(2 * num_rows - 3, num_rows - 1, -1)   # Upward
    )
    yield (num_rows - 1, math.inf)                  # Bottom of each zigzag

def convert(s, num_rows):
    if num_rows == 1:
        return s
    zigzag_size = 2 * num_rows - 2
    return ''.join(
        (s[z+a] if z+a &lt; len(s) else '') + (s[z+b] if z+b &lt; len(s) else '')
        for a, b in zigzag_indexes(num_rows)
        for z in range(0, len(s), zigzag_size)
    )

print(convert('PAYPALISHIRING', 3))
</code></pre>
    </div>