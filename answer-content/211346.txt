<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you are only concerned with moving values (e.g. formats aren't important) from the Working Sheet to all other sheets, this approach should be significantly faster than copy and pasting the cells.</p>

<p>This method starts by sorting the cells first so like cells are grouped together. The method will build up a range as it iterates, and when it encounters a new value it will dump the built up Range to the corresponding sheet. In my brief testing, this was able to complete moving 20,000 cells to three different sheets in less than 1 second.</p>

<pre><code>Public Sub MoveData()
    On Error GoTo ErrorHandler:

    Dim LastRow          As Long
    Dim Cell             As Range
    Dim SearchRange      As Range
    Dim FilterRange      As Range
    Dim PreviousValue    As String
    Dim JoinedRange      As Range
    Dim FirstIteration   As Boolean
    Dim RangeToJoin      As Range
    Dim SourceSheet      As Worksheet
    Dim MyTimer          As Long

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    MyTimer = Timer
    Set SourceSheet = ThisWorkbook.Worksheets("Sheet1")

    'Sort the data together so it is grouped
    With SourceSheet
        LastRow = .Cells(.Rows.Count, "A").End(xlUp).Row + 1
        LastColumn = .Cells(1, .Columns.Count).End(xlToLeft).Column + 1
        Set SearchRange = .Range(.Cells(1, 1), .Cells(LastRow, 1)) 'Search only in column A, where sheet names are
        Set FilterRange = .Range(.Cells(1, 1), .Cells(LastRow, LastColumn)) 'Area to sort
        .Sort.SortFields.Add Key:=SearchRange, SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    End With

    FirstIteration = True
    For Each Cell In SearchRange

        'Don't process changes for the first row
        If Not FirstIteration Then
            If PreviousValue = Cell.Value2 And Len(Cell.Value2) &gt; 0 Then
                Set RangeToJoin = SourceSheet.Range(SourceSheet.Cells(Cell.Row, 1), SourceSheet.Cells(Cell.Row, LastColumn))

                If JoinedRange Is Nothing Then
                    Set JoinedRange = RangeToJoin
                Else
                    Set JoinedRange = Union(JoinedRange, RangeToJoin)
                End If
            ElseIf Len(PreviousValue) &gt; 0 Then
                With ThisWorkbook.Sheets(PreviousValue)
                    LastRow = .Cells(.Rows.Count, "A").End(xlUp).Row + 1
                    .Range(.Cells(LastRow, 1), .Cells(JoinedRange.Rows.Count + LastRow - 1, JoinedRange.Columns.Count)).Value = JoinedRange.Value
                    Set JoinedRange = Nothing
                End With
            End If
        End If

        FirstIteration = False
        PreviousValue = Cell.Value2
    Next

    'Clear the values on the sheet
    SourceSheet.Cells.ClearContents

    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Debug.Print "Process took : " &amp; Timer - MyTimer
    Exit Sub

ErrorHandler:
    'Restore state if there was an issue
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub
</code></pre>
    </div>