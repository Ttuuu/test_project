<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see the need for recursion, you could store the folders in a stack instead.</p>

<pre><code>    Dim foldersToProcess As New Stack(Of Outlook.Folder)

    ' Add root folder

    While foldersToProcess.Count &gt; 0
        Dim curfolder = foldersToProcess.Pop()

        ' Process folder

        ' Add child folders
        For Each childFilter In f.Folders
            foldersToProcess.Push(childFilter)
        Next
    End While
</code></pre>

<p>You might not need OL here since you put it right back</p>

<pre><code>OL.Folder = f.Folders.Item(c)
ScanPST(OL.Folder, PstName, MailCount)
</code></pre>

<p>Your split and join could be reduce to an indexOf with a substring</p>

<pre><code>    Dim folder = "\aaa\bbb\ccc"
    Dim newFolder = folder.Substring(folder.IndexOf("\", 2)) ' Will equal" \bbb\ccc"
</code></pre>

<p>Like Heslacher said, you don't need to ReportProgress every changes. Especially with all the math and string concatenation done for BGWorkerStatus (maybe look at string builder).</p>

<p>If things are the same (like PrSearchKey or MailFolderPath) for the same folder, it shouldn't be calculated multiple time.</p>

<p>If exceptions happen often, try to do a check that would prevent it from happening. Exceptions are slow.</p>
    </div>