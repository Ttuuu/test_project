<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although this question already has been answered I will add another answer at a higher abstraction layer.</p>

<h1>Your Code</h1>

<p>In short and blunt: I would not hire you with this code. The code is MUCH to complex and reeks of bugs (because of the complexity). Also you use a stateful class for a task that needs no persistent state over multiple invocations.</p>

<p>Please let me show you what I would expect from you and why.</p>

<h1>Interviews</h1>

<p>The point with interview questions is not only to find out wether you know the basics of a language. <strong>The main point of an interview is to find out if you would be <em>good at the job</em>.</strong></p>

<p>So first, you will answer the question. Then the  <em>next question</em> will very likely be, <em>what are the advantages and disadvantages of your solution?</em></p>

<h2>Answering the question: Loop</h2>

<p>(<em>sorry for syntax errors -- my last C was a long time ago</em>)</p>

<p>The request to <em>not [to] use additional data structures</em> basically rules out all other answers here. <strong>A new array is still a data structure</strong>, albeit a very simple structure.</p>

<p>If you were to restrict yourself to <em>primitives only</em> you need to loop:</p>

<pre><code>bool isOnlyUniqueValues(char[] test, int test_length) {
   // Test for each value in the test vector if a duplicate exists. 

   // i/k or „candidate_index/search_index for variable names is 
   // a matter of taste for such short algorithms
   for (int i=0; i &lt; test_length; i++) {
     for (int k=i + 1; k &lt; test_length; k++) {
       if (test[i] == test[k]) return false;
     }
   }
   return true;
}
</code></pre>

<p>This loop takes each character in the string and compares it to <em>all the other</em> characters in the string.</p>

<p>For example ("." is a placeholder for unique chars):</p>

<pre><code>AA..   // &lt;- The duplicate will be detected after one step (i=0, k=1)
0123


.A.A   // &lt;- The duplicate will be detected after 3 + 2 = 5 steps (i=1, k=3)
0123

..AA // &lt;- The duplicate will be detected after 3 + 2 = 5 steps (i=2, k=3)
0123

....   // &lt;- Uniqueness will be detected after 3 + 2 + 1 = 6 steps (i=2, k=3)
0123

....... //  &lt;- Uniqueness will be detected after 55 steps (i=8, k=9)
0123..9
</code></pre>

<h3>What are the advantages and disadvantages of the solution?</h3>

<p>This solution works well for small datasets (up to a few hundred chars in the string).</p>

<p><strong>PRO</strong>:</p>

<ul>
<li>Easy to read</li>
<li>For small datasets (a few hundred bytes) very cache efficient and <em>probably the fastest solution</em></li>
<li>No additional data structure</li>
</ul>

<p><strong>CON</strong>:</p>

<ul>
<li>Runtime of O(n^2), slows down with long (thousands of items) test vectors</li>
<li>Worst case behaviour on unique items</li>
<li>Fluctuating execution time (could be a problem in realtime or near realtime scenarios )</li>
</ul>

<h3>How would you improve the solution?</h3>

<p><em>This</em> is the interesting question! It shows if you <em>find a solution to a problem</em> or are just a "code monkey" that needs to be told every step of the solution.</p>

<p>First ask some questions (and these are always the same):</p>

<ol>
<li>What is the <em>(business) purpose</em> of this function?</li>
<li>How <em>large</em> are the test data sets?</li>
<li>How <em>frequent</em> is it going to be executed?</li>
</ol>

<p>There are other questions to be asked (<em>Is this timing sensitive?</em>, ...) but these three suffice here.</p>

<h3>The (business) purpose and context</h3>

<p>This will give you the context your code will under and which problem it should solve for the business. Remember: The best code is the code that does not need to be written! Maybe there are other solutions to the business problem.</p>

<p>This will you also give you an idea of your runtime context. Is this a server? Then RAM will probably much less of a problem than on an ATTiny. </p>

<p>Don't overdo this (esp. in an interview), but asking shows that you are capable of more than writing curly braces.</p>

<h3>Size of the data set</h3>

<p>This is a <strong>very</strong> important question. For small sizes you very likely will prefer easy to read code over overly complicated code. The larger the dataset, the more important the <em>runtime complexity</em> of your code:</p>

<ol>
<li>Nested loops: O(n^2)</li>
<li>Set: O(n)</li>
<li>Filter (<a href="https://en.wikipedia.org/wiki/Bloom_filter" rel="nofollow noreferrer">Bloom</a>, <a href="https://www.cs.cmu.edu/%7Edga/papers/cuckoo-conext2014.pdf" rel="nofollow noreferrer">Cuckoo</a>, <a href="https://en.wikipedia.org/wiki/HyperLogLog" rel="nofollow noreferrer">HyperLogLog</a> ...)</li>
</ol>

<p>In this case the size has the length of the alphabet (e.g. 255 for a string of bytes) as upper bound. Such a short alphabet case would make option #1 the best solution hands down.</p>

<h3>Frequency of execution</h3>

<p>If this code is called once per month then efficiency is probably not the main concern. If this code is in a timing sensitive code path (e.g. part of a web request) then performance is a must.  </p>

<h2>Other solutions</h2>

<p>Here are the three solutions.</p>

<h3>Plain nested loops</h3>

<p>This is the solution presented. It meets all stated requirement (functionally: duplicates are found. No additional data structures or memory).</p>

<h3>Set</h3>

<p>A solution with a set works like the "map" solution from your example, although there is one difference:</p>

<p>A <em>map</em> basically maps Keys to Values (<em>K -&gt; V</em>). A <em>set</em> is a <em>unique</em> set of values. Using a map really just exploits the fact that a maps keys form a set.</p>

<p>To rephrase the interview question: <em>Is this string a set?</em>.</p>

<pre><code>bool isOnlyUniqueValues(char[] test, int test_length) {
   // I assume there is a std:set?
   std:set test_as_set = ...;

   for (int i=0; i &lt; test_length; i++) {
     if (test_as_set.contains(test[i]){ return false;}
     test_as_set.put(test[i]);
   }
   return true;
}
</code></pre>

<p><strong>PRO</strong>:</p>

<ul>
<li>Easy to read</li>
<li>For small to largish datasets (a few thousand bytes) efficient</li>
<li>Only simple additional data structure</li>
</ul>

<p><strong>CON</strong>:</p>

<ul>
<li>Memory overhead of O(n)</li>
<li>Uses additional data structures</li>
</ul>

<h3>Filter</h3>

<p>Filters are "<em>approximate set membership data structures</em>". The important word here is <em>approximate</em>.</p>

<p>The main differences versus the <em>Set</em> solution are</p>

<ul>
<li>Filters are extremely fast and only use small(ish) amounts of memory</li>
<li>Filters can give you a <em>false positive</em> answer</li>
<li>Filters a <em>tuneable</em> with respect to the "false positive" rate</li>
</ul>

<p>The „might contain“ method of a filter can sometimes return <em>true</em> when the item is not in the set. If it returns <em>false</em> the value is guaranteed to be absent.</p>

<p>For details look at the Wikipedia page for <a href="https://en.wikipedia.org/wiki/Bloom_filter" rel="nofollow noreferrer">Bloom Filter</a>.</p>

<pre><code>bool isOnlyUniqueValues(char[] test, int test_length) {
   // I assume there is a Filter implementation
   bloom_filter filter = ...; // here you also configure the error rate

   for (int i=0; i &lt; test_length; i++) {
     // Closely look: The method is "might_contain"
     if (bloom_filter.might_contain(test[i]){ return false;}
     bloom_filter.put(test[i]);
   }
   return true;
}
</code></pre>

<p><strong>PRO</strong>:</p>

<ul>
<li>Easy to read</li>
<li>Efficient for extremely large datasets</li>
<li>Good candidate for embedded systems (trade very small error rates for large performance and size improvements)</li>
</ul>

<p><strong>CON</strong>:</p>

<ul>
<li>Memory overhead</li>
<li>Uses additional data structures</li>
<li>Considered "advantaged" by most devs</li>
<li>Overkill for most use cases</li>
<li><strong>Only gives probabilistic answers</strong> </li>
</ul>
    </div>