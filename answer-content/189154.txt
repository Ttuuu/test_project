<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few ideas</p>

<ol>
<li><p>Consider reversing the attribute logic so that you opt OUT of including rather than opt in. If you do it that way, your function will also work with anonymous types and you'll be able to create URLs on the fly very easily. You could even use an existing framework attribute such as <a href="https://msdn.microsoft.com/en-us/library/system.runtime.serialization.ignoredatamemberattribute.aspx" rel="nofollow noreferrer">IgnoreDataMemberAttribute</a>, which could work well if you plan to use this function on models.</p></li>
<li><p>Consider breaking the function up into two different functions. In one function, convert the properties into a dictionary. In the second function, convert a dictionary into a query string. This will give you much more flexibility. With your current setup, you are unable to get the querystring values without going to the trouble of creating the string too.</p>

<pre><code>static Dictionary&lt;string,object&gt; ToPropertyDictionary(this object o)
{
    return o.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance)
        .Where( p =&gt; !Attribute.IsDefined(p, typeof(IgnoreDataMemberAttribute))
        .ToDictionary
        (
            p =&gt; p.Name,
            p =&gt; p.GetValue(o)
        );
}
</code></pre></li>
<li><p>If you do as I suggest in #2 and break it into two stages, you can easily generate the URL (without the weird logic to add the <code>&amp;</code>) by using <code>String.Join</code> over the dictionary, e.g.</p>

<pre><code>static string ToQueryString(this object o)
{
    return string.Join
    (
        "&amp;", 
        o.ToPropertyDictionary()
         .Where( e =&gt; e.Value != null)
         .Select
         ( 
             e =&gt; string.Format
             (
                 "{0}={1}",
                 e.Key, 
                 UrlEncode(e.Value)
             )
         )
    )
}
</code></pre></li>
<li><p>Do not include the ? in the results. The caller should be responsible for that. If you do it this way, you can use the results of your function to append to an existing URL that may already have querystring parameters.</p></li>
<li><p>You probably do not need to URL-escape the property name, since c# property names can't contain &amp;, space, + or =.</p></li>
</ol>
    </div>