<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For your first Go program this looks very good, apart from the global
variables the code looks easy to read; the annotations for JSON
processing and validation are fine and you're also using a standard
library for the routing.  Overall, doesn't raise any big issues for me.</p>

<hr>

<p>Firstly though, I'd highly suggest that the <code>trades</code> and <code>submitArray</code>
global variables are changed into member variables in a handler
structure and secondly protected against concurrent access.  The first
bit will help organising code in larger projects, you almost never want
globals lying around like that.  The second one is simply necessary when
data is modified from potentially multiple threads.</p>

<p>The handler functions share a lot of code for setup; it'd be good to
extract some common functionality perhaps, or to use a library that
deals with, say, JSON and REST routes specifically.</p>

<p>There's some error handling missing where the error results are
explicitly discarded, that's somewhat of a bad style, though
understandable for things like the JSON encoding.  How about simply
logging those errors at least?</p>

<p>Also again the JSON error handling deserves its own function to make it
all less repetitive.</p>

<hr>

<p>Specifically regarding your questions:</p>

<ol>
<li>The error handling is fine, even though the error messages themselves
could be more expressive, if you choose to not return the error
message itself, at least log it for your own debugging purposes.</li>
<li>Validation looks okay to me?  Apart from <code>Data</code>, there's a lot of
dates that the validation here accepts that can never be real dates.
Consider stronger validation for a real project, otherwise you might
end up with lots of "month 99" in your data.</li>
<li>Looks okay, ordering this way definitely makes sense, although with
more definitions you might have to split things up into multiple
files.</li>
</ol>
    </div>