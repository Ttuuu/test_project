<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks fine overall, but there are a few oddities here and there, and there are some opportunities for significant performance improvements:</p>

<ul>
<li>Since you're going to visit every node in the given <code>int[,]</code> graph you might as well use a <code>bool[,]</code> instead of a <code>Dictionary&lt;int, HashSet&lt;Tuple&lt;int, int&gt;&gt;&gt;</code>. I see no reason to group visited nodes per color, because you're already keeping track of the largest group separately. For me, this made things about 6x faster.</li>
<li>Using an 'old-style' tuple as return type isn't very descriptive. Consider using value-tuples instead: <code>public static (int color, int count) FindLongestConnectedColor()</code>.</li>
<li>In <code>GetConnectedRegionLength</code>, I'd combine <code>directionRow</code> and <code>directionColumn</code> into a single array of <code>(int x, int y)</code> tuples. Not a list - it's not going to be resized. This also provides a small performance increase. Also consider storing it in a static field, so you only need to initialize the array once, for yet another performance increase.</li>
<li><code>q1</code> and <code>q2</code> are rather undescriptive names - <code>openNodes</code> would be better. It's also unclear why there are two queues instead of one (you mentioned the reason in your post, but it's not documented in the code). About that reason - <code>Queue&lt;T&gt;</code> is generic, so a <code>Queue&lt;Tuple&lt;int, int&gt;&gt;</code> or <code>Queue&lt;(int, int)&gt;</code> is not going to involve boxing. Yes, you'll need to create tuple objects, but you no longer need to call <code>Enqueue</code> and <code>Dequeue</code> twice. Performance should be more or less the same. When in doubt, measure!</li>
<li><code>connectedCellsCount</code> can be initialized to 1 directly.</li>
<li><code>while (q1.Count &gt; 0)</code> is faster than <code>while (q1.Any())</code>.</li>
<li><code>a</code> is rather uncommon as a counter variable name - I'd stick to <code>i</code>.</li>
<li>Personally I'm not a fan of putting single if-body statements on the same line: <code>if (...) continue;</code>. It makes these 'early-outs' more difficult to spot when scanning code.</li>
<li>The various if/continue statements can be combined into a single if.</li>
</ul>

<p>As for breadth-first versus depth-first, I guess I don't really see the point here: the only difference is the order in which you visit nodes, but you still have to visit all of them. Either way, instead of recursion you can also combine iterative code with a stack data-structure. Similar to your current solution, just with a stack instead of a queue.</p>
    </div>