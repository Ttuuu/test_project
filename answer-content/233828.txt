<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it depends on how self-evident the code is. If it's clear from context what the intent of a calculation or function call is, then I agree with @Sam that the code will be more concise without giving it a name.</p>

<p>On the other end though, depending on the context, <code>9 * x / 5 + 32</code> might not be obvious in what it's doing. You may find that giving that equation a name helps readability in general, which may trump conciseness.</p>

<p>In this exact case though, I don't think there's a ton of benefit to giving it a name unless you strongly suspected that you'd need it elsewhere in the future, or you personally like the way having a name reads. I think that that formula is well-known enough that most people would be able to tell what it's doing; especially when it's inside of a function called <code>temperature</code>.</p>

<hr>

<p>In this case though, there's no good reason that the function should be inside of <code>temperature</code>. Defining one function inside of another suggests that the inner function has no meaning outside of enclosing function, which may be the case if you're forming a closure over a local variable or something similar. In this case though, <code>cel_to_far</code> is just simply taking a parameter and returning an output. It isn't using anything local to <code>temperature</code>. If you wanted to have a standalone function, I would definitely move <code>cel_to_far</code> outside of temperature. If you want it to be "private" to the module, prefix the name with an <code>_</code>:</p>

<pre><code>def _cel_to_far(x):
    return 9 * x / 5 + 32

def temperature():
    . . .
</code></pre>

<hr>

<p>You're only using two spaces of indentation. Please use <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="nofollow noreferrer">four-spaces</a>, as per PEP8.</p>

<hr>

<p><code>t = user_in</code> isn't useful. You're taking a line to rename an already short variable name to something obscure. If you need to reduce line lengths, there are other more readable ways of achieving that. Here though, the longest line is only 76 characters long after fixing the indentation and getting rid of <code>t</code>. That's not very long, and <code>user_in</code> is a much more descriptive name.</p>

<hr>

<p>In both your main functions, you're getting float input from the user manually with a <code>while True</code> and <code>try</code>. In an effort to reduce duplication and centralize how you're handling input, I'd make a helper function:</p>

<pre><code>def _ask_for_float():
    while True:
        try:
            return float(input('Number to convert:&gt; '))

        except ValueError:
            print('Enter numbers only!')
</code></pre>

<p>Instead of repeating the <code>while True: try . . .</code> part, make that a function, then call the function. Notice how much neater this makes each of the functions:</p>

<pre><code>def _ask_for_float():
    while True:
        try:
            return float(input('Number to convert:&gt; '))

        except ValueError:
            print('Enter numbers only!')


def _cel_to_far(x):
    return 9 * x / 5 + 32


def temperature():
    user_in = _ask_for_float()
    result = 'is: {} degrees Fahrenheit'.format(_cel_to_far(user_in))

    print('Input: {} degrees Celcius'.format(user_in), result)


def milli():
    user_in = _ask_for_float()
    n = 1 * user_in / 25.4

    print('Input: {} millimeters is: {} inches'.format(user_in, n))
</code></pre>

<p>That immediately fixes any line-length issues by removing two levels of indentation, and makes each function trivial.</p>

<hr>

<p>Finally, lines like:</p>

<pre><code>print('Input: {} degrees Celcius'.format(user_in), result)
</code></pre>

<p>Can be written inline using <a href="https://www.python.org/dev/peps/pep-0498/#abstract" rel="nofollow noreferrer">f-strings</a>. I'd collapse <code>result</code> back into the literal for readability as well:</p>

<pre><code>def temperature():
    user_in = _ask_for_float()

    print(f'Input: {user_in} degrees Celcius is: {_cel_to_far(user_in)} degrees Fahrenheit')
</code></pre>
    </div>