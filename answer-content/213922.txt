<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(Note: no code in this post has been run- beware errors.)</p>

<p>I have a couple of issues with your design, and with your review request.</p>

<p>First, you say that you are committed to using five different functions for the checking. That's unfortunate, since this problem is very amenable to being solved with iteration.</p>

<p>Next, you have a <code>class GameOutcome</code> that is being asked to identify a winner or tie. I disagree with this- this is something the game itself should do. The game outcome, IMO, would be a data class just collecting results. The name <code>GameOutcome</code> suggest that this class would have no knowledge of the sequence of moves, or the state of the game board.</p>

<p>With those out of the way, let's talk about your code.</p>

<h1>Those names!</h1>

<p>I hate your naming style. You have fallen into the trap of making excessively long names for no good purpose. I <em>strongly suggest</em> you review code written by other people (either here on CodeReview or look through github or the pypi repositories) to get a sense of how names should be chosen. </p>

<p>Consider this line:</p>

<pre><code>    if self.check_row_containing_move_for_win():
</code></pre>

<p>The method <code>check_row_containing_move_for_win</code> is an internal method. It is not intended for use by arbitrary external callers, it is only a method in order to package up its code behind a name. </p>

<p>For an internal function, why not just call it <code>_check_row</code>. </p>

<p>Similarly, you have an externally callable method named <code>find_winner_or_tie</code>. The declaration:</p>

<pre><code>def find_winner_or_tie(self, state_of_game, row_index_of_move, column_index_of_move):
</code></pre>

<p>Here's a better approach:</p>

<pre><code>def find_winner_or_tie(self, state, row, col):
    """ Check if either player has won, or if a tie has been forced. Return 'X' or 'O' 
        for a win, 'Tie' for a tie, and None when the game is not over.

        Parameters:
          state:  state of the game
          row:    row of the last move
          col:    column of the last move
    """
</code></pre>

<p>Providing in-depth explanation is the function of comments, not names. Your names should be as long as they need to be, but no longer.</p>

<h1>Builtins <code>any()</code> and <code>all()</code></h1>

<p>You are writing code that checks for various conditions. Python supplies the <a href="https://docs.python.org/3.7/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> and <a href="https://docs.python.org/3.7/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> built-ins for situations like this. The trick is to learn to construct iterables in line, and that means using <a href="https://docs.python.org/3/reference/expressions.html?highlight=generator%20expression#generator-expressions" rel="nofollow noreferrer"><em>generator expressions.</em></a></p>

<p>A generator expression is an inside-out for loop in parentheses, like:</p>

<pre><code>(abs(x) for x in somelist)
</code></pre>

<p>They resemble, and are related to, list, dictionary, and set comprehensions. In all cases there is an iteration keyword (for ... in ...) and some kind of leading expression. With a generator expression, you are constructing a generator in-line and storing it, evaluating it, or passing it as parameters.</p>

<p>How does this help you? Well, suppose you have a group of functions you want to evaluate for success. Say ... five of them? You might decide that you were going to return if <strong>any of those conditions</strong> were true. Well ...</p>

<pre><code>def find_winner_or_tie(self, state, row, column):
    """ ... """
    self.set_board_and_move(state, row, column)

    checks = (self.check_row, self.check_column, self.check_diag_lr, self.check_diag_rl, self.check_tie)

    if any(check() for check in checks):   # If any check is true, we know the outcome
        return self.game_outcome

    return None
</code></pre>

<h1>Less code, more data!</h1>

<p>The thing about most games is that they are based on lots of data. And if you write your code correctly, you will find more and more data, with less and less code. That's the case here. Let's take a look at one of your check-functions:</p>

<pre><code>def check_row_containing_move_for_win(self):
    total = 0
    for column in range(3):
        total = total + int(self.letter_dict[self.state_of_game.board[self.row_index_of_move][column]])
        if abs(total) == 3:
            winning_letter = self.state_of_game.board[self.row_index_of_move][self.column_index_of_move]
            self.game_outcome = winning_letter
            return True
    return False
</code></pre>

<p>Honestly, that's so long that it's unreadable. So let's refactor out the names:</p>

<pre><code>def check_row(self):
    """Check row containing latest move for a win."""
    bias = self.letter_dict
    board = self.state_of_game.board
    row = self.row_index_of_move

    total = 0
    for column in range(3):
        total = total + bias[board[row][column]]

    if abs(total) == 3:
        self.game_outcome = board[row][0]
        return True
    return False
</code></pre>

<p>I think some people have already pointed out <code>sum</code> and some other options. But let's actually spell out what the row and column choices are:</p>

<pre><code>ROWS = [ ((0, 0), (0, 1), (0, 2)),
         ((1, 0), (1, 1), (1, 2)),
         ((2, 0), (2, 1), (2, 2)),
]
</code></pre>

<p>Now, you could write code to generate that. In one line, even! But that's not important. What's important is that we know that there's a <code>ROWS</code> variable that can be indexed by row-number and which has a sequence of (row, col) tuples identifying the cells to look at.</p>

<p>Now, how does that help? Well, it helps because you can write a <strong>helper function</strong> that does the checking for you given a sequence of cells. Like this:</p>

<pre><code>def check_cells(self, indices):
    """ Return True if all gameboard[][] cells specified by indices have same value,
        else False.
    """
    board = self.state_of_game.board
    values = [board[row][col] for row,col in indices]
    v0 = values[0]
    return all(v == v0 for v in values)
</code></pre>

<p>Then you can write the <code>check_</code> functions in terms of that:</p>

<pre><code>def check_row(self):
    """Check row containing latest move for a win."""
    indices = ROWS[self.row_index_of_move]
    return self.check_cells(indices)
</code></pre>

<p>You'll have to put in some validation on the diagonals, so you only call the <code>check_cells</code> if the move really was on a diagonal. The key here is that this uses the <code>check_</code> functions to provide <em>more data</em> to the underlying <code>check_cells</code>, and so the bottom level code where the work is getting done is mainly data-driven.</p>

<h1>Extra credit: detect forced ties</h1>

<p>Your tie-detector only triggers at the last minute. But there are plenty of circumstances where a tie is inevitable. Why not code your tie-checker to recognize them?</p>
    </div>