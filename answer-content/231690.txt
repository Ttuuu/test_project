<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Single-responsibility: the <code>show*()</code> methods in <code>song</code> don't provide any benefit, since we already have suitable <code>get*()</code> methods which can be used more flexibly.  Thus, <code>song</code> needn't require <code>&lt;iostream&gt;</code> or the like.</p>

<p>Returning <code>const std::string</code> here probably isn't what you meant:</p>

<blockquote>
<pre><code>const std::string gettitle() {return title;}
const std::string getauthor() {return author;}
const std::string getalbum() {return album;}
</code></pre>
</blockquote>

<p>More useful would be</p>

<pre><code>std::string gettitle() const {return title;}
std::string getauthor() const {return author;}
std::string getalbum() const {return album;}
</code></pre>

<p>This misplaced <code>const</code> also affects operator <code>==</code>, which also has scope to be simpler and clearer.  Any time we have an <code>if</code>/<code>else</code> where the branches return <code>true</code> or <code>false</code> consider just using a boolean expression directly for <code>return</code>:</p>

<pre><code>bool operator==(const song&amp; a) const
{
    return title == a.title
        &amp;&amp; author == a.author
        &amp;&amp; album == a.album;
}
</code></pre>

<p>We can also access the private members of <code>a</code>, since it's of our class.</p>

<p>Consider providing operator <code>!=</code>, too:</p>

<pre><code>bool operator!=(const song&amp; a) const
{ return !(*this == a); }
</code></pre>

<p>The constructors of <code>song</code> accept <code>std::string</code> by value; we should use <code>std::move</code> to avoid copying again (and we can use default arguments to reduce duplication):</p>

<pre><code>explicit song(std::string title, std::string author = "? ", std::string album = "? ")
    : title(std::move(title)),
      author(std::move(author)),
      album(std::move(album))
{ }
</code></pre>

<p>(Note <code>explicit</code>, because we don't want this class to be considered for implicit conversion from string).</p>

<hr>

<p>One of the <code>playlist</code> constructors doesn't initialise members, but uses assignment in the body instead.  Prefer initialisers, and consolidate using default arguments:</p>

<pre><code>explicit playlist(std::string name = "")
    : name(std::move(name)),
      list()
{}
playlist(const playlist &amp; x, std::string name)
    : name(std::move(name)),
      list(x.list)
{}
</code></pre>

<p>Operator <code>=</code> should return a <em>reference</em> rather than a copy (<code>g++ -Weffc++</code> catches this):</p>

<pre><code>playlist&amp; operator=(const playlist &amp; x) {
//     ^^^
</code></pre>

<p>But there's absolutely no need to declare this operator - follow the Rule of Zero, and let the compiler generate it and the copy/move constructors too.</p>

<p>Operator <code>+</code> performs set addition, which surprised me - normally, I would expect concatenation, like my existing Empeg Car player.  Even if that's what's required, we can improve it.  Any time we use a loop like <code>for (std::size_t i=0;  i &lt; container.size();  ++i)</code> and then only use <code>i</code> for indexing, we can replace with a range-based <code>for</code> loop:</p>

<pre><code>playlist operator+(const playlist&amp; x) const
{
    playlist z(*this, name + "+" + x.name);
    for (auto&amp; song: x.list) {
        if (!findsong(song)) {
            z.addsong(song);
        }
    }
    return z;
}
</code></pre>

<p>This still scales poorly, as the linear search in <code>findsong</code> is performed for each song to be added.  If we make <code>song</code> sortable or hashable, we could use a <code>std::set</code> to identify duplicates, at a cost of some overhead initialising the set.</p>

<p>I don't see why we have this method in the public interface:</p>

<blockquote>
<pre><code>song getsong(std::vector&lt;song&gt;::iterator it) const { return *it; }
</code></pre>
</blockquote>

<p>That's something any calling code can do much more simply, and I'd argue that we probably shouldn't be giving out such iterators anyway.</p>

<p>The other <code>getsong</code> seems to exactly implement <code>std::find()</code>, and I don't see the value to users.</p>

<p>In <code>removesong</code>, we don't need to keep count with <code>cont</code>.  The right way to cope with iterator invalidation is to use the return value from <code>erase()</code>:</p>

<pre><code>void deletesong(const song&amp; x)
{
    auto it = list.begin();
    while (it != list.end()) {
        if (*it == x){
            it = list.erase(it);
        } else {
            ++it;
        }
    }
}
</code></pre>

<p>However, with that said, the real way to implement "remove all matching" is to use the <a href="https://en.wikipedia.org/wiki/Erase%E2%80%93remove_idiom" rel="nofollow noreferrer">Erase-remove idiom</a>:</p>

<pre><code>#include &lt;algorithm&gt;

void deletesong(const song&amp; x)
{
    list.erase(std::remove(list.begin(), list.end(), x), list.end());
}
</code></pre>

<p>In a similar vein, <code>findsong()</code> can be simplified using <code>std::find()</code>:</p>

<pre><code>bool findsong(const song&amp; x) const
{
    return std::find(list.begin(), list.end(), x) != list.end();
}
</code></pre>
    </div>