<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>UPDATE:</strong> You can run performance tests I prepared based on various code samples from the answers to this question: <a href="https://jsperf.com/cr-se-date-array-sorting/1" rel="nofollow noreferrer">https://jsperf.com/cr-se-date-array-sorting/1</a>. When I ran them, I see that my code is <em>second</em> best performing. The best is the one by @Kevin Cline (up voted!).</p>

<p><a href="https://i.stack.imgur.com/ewTXg.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ewTXg.png" alt="enter image description here"></a></p>

<hr>

<p>Here's my take on it. The following code uses the same idea about the string representation of date that is directly comparable for sorting.</p>

<p>It is not possible to tell in advance how performant will this solution be compared to one you presented above. It all depends <strong>a lot</strong> on how many dates are being sorted. If you deal with tons of dates, there will be many more invocations to the arrow function we're passing to <code>sort(...)</code>. Therefore, it's not good to keep translating the date via <code>split()</code> every time our arrow function is being used.</p>

<p>Instead, I recommend three steps:</p>

<ol>
<li>Translate dates into a sortable representation (one time). Use <code>.map()</code>.</li>
<li>Do the sorting with <code>.sort()</code>.
The values will be put in a lexicographical order.</li>
<li>Translate the sorted dates back into original representation.</li>
</ol>

<p>This will guarantee that each date is translated <strong>at most</strong> twice, which makes the entire solution more performant for large <code>N</code>s. </p>

<p>Also, Notice that steps #1 and #3 can use same exact implementation, which I extracted.</p>

<hr>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const reverseDateRepresentation = date =&gt; {
  let parts = date.split('-');
  return `${parts[2]}-${parts[1]}-${parts[0]}`;
};

const sortedDates = ['01-02-2018', '02-01-2018', '01-01-2018', '31-12-2017']
  .map(reverseDateRepresentation)
  .sort()
  .map(reverseDateRepresentation);

console.log(sortedDates);</code></pre>
</div>
</div>


<p>Produces result:</p>

<blockquote>
<pre><code>["31-12-2017", "01-01-2018", "02-01-2018", "01-02-2018"]
</code></pre>
</blockquote>

<hr>

<p>Little note. I think, that from the "big O" point of view we haven't improve the algorithm. Since <code>.map(reverseDateRepresentation)</code> is \$O(n)\$, the performance of the entire solution is limited by the <code>.sort()</code> (which is <a href="https://stackoverflow.com/questions/234683/javascript-array-sort-implementation">probably</a> \$O(n * {\log n})\$). The way we're <em>potentially</em> improving solution is by making sure that the constants in our "big O" cost are as small as we can achieve.</p>

<p>Nevertheless, if we'd put the performance as top criteria of the solution, I'd learn as much as I can about the real data being processed; as well as conducted a thorough performance test.</p>

<p>In real life scenario, however, <em>I personally never put performance above readability</em>, because I believe that lack of readability is eventually the same thing as lack of correctness ...and correctness is <em>almost always</em> more important than performance (few exceptions are known though).</p>
    </div>