<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code looks quite good! Just some recommendations:</p>

<hr>

<p>Try to follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 Style Guidelines</a> so that your code is more standard and readable; you already do it with the naming, but you are missing some whitespaces: <code>is_valid_move(x,y,board)</code> should be <code>is_valid_move(x, y, board)</code>,  <code>(message:str)</code> should be <code>(message: str)</code>,...</p>

<hr>

<p>In the <code>make_move</code> function you are repeating the same code twice: the only thing that changes is the text displayed and the symbol used. In fact, the prompt text just depends on the player symbol. So it can be rewritten as this:</p>

<pre class="lang-py prettyprint-override"><code>def make_move(idx,board):
    if idx % 2 == 0:
        symbol = 'X'
    else:
        symbol = 'O'

    x, y = get_input_from_user(f"Player {symbol}, please enter a move:")
    while not is_valid_move(x, y, board):
        x,y = get_input_from_user("Invalid move, please try again:")
    board[x][y] = symbol
</code></pre>

<p>Here I used an <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">f-string</a> to format the prompt text. If you want shorter code, you can also replace the conditional with a <a href="http://book.pythontips.com/en/latest/ternary_operators.html" rel="nofollow noreferrer">ternary</a>:</p>

<pre class="lang-py prettyprint-override"><code>symbol = 'X' if idx % 2 == 0 else 'O'
</code></pre>

<hr>

<p>The <code>print_board</code> can be made more contat using a "for each" loop. Instead of iterating indices, you iterate the elements of the list directly:</p>

<pre class="lang-py prettyprint-override"><code>for row in board:
    print(row)
</code></pre>

<hr>

<pre class="lang-py prettyprint-override"><code>board = [['_','_','_'] for i in range(3)]
</code></pre>

<p>When the index variable in a loop is not used, it's better to use the anonymous <code>_</code> instead. Furthermore, you can use <code>*</code> to make a list with a default value:</p>

<pre class="lang-py prettyprint-override"><code>board = [['_'] * 3 for _ in range(3)
</code></pre>

<p>It might be tempting to just do <code>[['_'] * 3] * 3</code>, but that's a trap: <code>board</code> will contain the same list reference for all three rows, so editing one will edit all of them.</p>

<hr>

<p>Variable names should clearly indicate what they are; <code>condition</code> does not seem clear enough to me, as I had to look at the code to understand its meaning. Try a more explicit name like <code>has_winner</code>.</p>

<p>Additionally, <code>condition</code> is a boolean (can only be true or false), so you don't have to check <code>is True</code> explicitly; you can just do <code>if condition and ...</code> (use <code>if not condition</code> to check if it's false).</p>
    </div>