<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>std::this_thread::sleep_for(std::chrono::milliseconds(50));</code></p>

<p>Don't do this. Use a <code>condition_variable</code> instead. This will require some minor revising. 50ms might be a long time. Remember that to the OS, it means "context switch out the thread and keep it idle for <em>at least</em> 50ms". A <code>std::mutex</code> may have all manner of fancy implementation dependent optimizations. For example, if the consumer exhausts its work and waits on the condition variable, it may not need to be context switched at all if new work is very quickly produced. </p>

<p>Furthermore, this is wasting precious CPU resources. If production is stalled, it will context switch up to 20 times per second for no reason.</p>

<hr>

<p><code>buffVec</code> needs to be synchronized</p>

<hr>

<p>Avoid adding artificial delays to your code. I believe they're hiding potential race conditions. </p>

<hr>

<p><em>In my opinion</em>, consider removing <code>shared_ptr</code> and making the client manage the memory. I believe should be implicit to the client that the memory used by the producer/consumer needs to outlive both of them to function properly. It can be more efficient in some cases, but require more code in other cases to move the shared state around. If this were a library, it could potentially be a templated type and the client could choose their desired storage strategy.</p>

<hr>

<p>I am very adverse to seeing atomics in code that isn't building other low-level synchronization primitives. Using a mutex with RAII guards is much safer, and without any benchmarking to compare, I would argue that there's no reason to expect them to be underperformant. It can cause cache invalidation issues and out of order problems that are hard to reason about. </p>
    </div>