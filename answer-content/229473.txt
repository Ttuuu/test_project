<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>OO-Design</h2>

<blockquote>
  <p><em>key question Identify how and where I can typically use OOP more in my job (as I can usually just use arrays and don't need objects</em></p>
</blockquote>

<p>In your transformation towards OOP, you're still in the habit of resorting to arrays.
You let each new instance of this class be registered in some global array.</p>

<blockquote>
<pre><code>class Animal {
  constructor (name, description) {
    this.name = name;
    this.description = description;
    animalsObj.push(this);
  }
}
</code></pre>
</blockquote>

<p>Don't do this as it pollutes your object-oriented design.</p>

<pre><code>class Animal {
  constructor (name, description) {
    this.name = name;
    this.description = description;
  }
}
</code></pre>

<p>If you wish to store these instances in the array, let the consumer code handle it. This way, you can decide by use case how instances of objects should be handled.</p>

<pre><code>const animals = [];
const animal = new Animal("Roger", "my pet");
animals.push(animal);
</code></pre>

<p>This would also keep you from instantiating an object without storing the instance in a variable, because the magic no longer happens behind the screens.</p>

<blockquote>
<pre><code>new Animal(name, description);  // no longer registers to a global array
</code></pre>
</blockquote>
    </div>