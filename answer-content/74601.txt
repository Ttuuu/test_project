<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tweaked your program to make it both faster and more correct (for arbitrary large test cases).  Some of the things I changed:</p>

<ol>
<li>Your counter <code>i</code> should be of type long.  If you changed the test case to <code>600851475149L</code> (a prime number), you would see that <code>i</code> would wrap around to a negative number at some point.</li>
<li>You should start your main loop at 1 in case <code>NUMBER</code> is prime.</li>
<li>Your main loop only needs to go to <code>Math.sqrt(NUMBER)</code>.  This is the key to keeping the run time bounded.  Otherwise you may end up looping to a very large number in certain test cases.</li>
<li>Part of point #3 is that once you find a divisor <code>i</code>, in addition to checking if <code>NUMBER/i</code> is prime (as you already do), you should also check if <code>i</code> is prime.</li>
<li>You can skip even numbers in your main loop if you make sure NUMBER is odd by dividing out all factors of 2 initially.</li>
<li>The <code>isPrime()</code> loop can start at 3 and skip by 2.</li>
</ol>

<p>Here is the final modified code:</p>



<pre><code>public class PrimeFactorFinder {
    private static long NUMBER = 600851475143L;

    public static void main(String[] args) {
        long time   = System.nanoTime();
        long result = 1;

        // If NUMBER is even, get rid of all factors of 2.
        while ((NUMBER &amp; 1) == 0) {
            NUMBER /= 2;
            result = 2;
        }
        // We only need to iterate to sqrt of the number.
        long end = (long) Math.sqrt(NUMBER);
        for (long i = 1; i &lt; end; i += 2) {
            if (NUMBER % i == 0) {
                if (isPrime(NUMBER / i)) {
                    // This must be the largest prime.
                    result = NUMBER / i;
                    break;
                } else if (isPrime(i)) {
                    // This is a prime factor, but possibly not the largest.
                    // Record it as the largest prime factor so far.
                    result = i;
                }
            }
        }
        System.out.println("Result: " + result +
                "\nTime required to calculate in nanoseconds: " +
                (System.nanoTime() - time));
    }

    private static boolean isPrime(long l) {
        long max = (long) Math.sqrt(l);
        for(long num = 3; num &lt; max; num+=2) {
            if(l % num == 0) {
                return false;
            }
        }
        return true;
    }
}
</code></pre>

<p>Output:</p>

<blockquote>
  <p>Original:<br>
  Result: 6857<br>
  Time required to calculate in nanoseconds: 774264336  </p>
  
  <p>Modified:<br>
  Result: 6857<br>
  Time required to calculate in nanoseconds: 6942153  </p>
</blockquote>
    </div>