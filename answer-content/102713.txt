<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not much code, so there's little else to change or fix here. The only tiny mistake you made was forgetting to mark <code>toString</code> with <code>const</code>, so that it can be called on a const object, very tiny and easy fix:</p>

<pre><code>std::string toString() const;
                       ^^^^^
</code></pre>

<p>And the same on the definition. I'm assuming you're already familiar with the meaning of <code>const</code> in a method, but if not, <a href="https://isocpp.org/wiki/faq/const-correctness#const-member-fns" rel="nofollow noreferrer">here's an explanation</a>. In summary, a const method is not allowed to mutate the object, only to inspect its member data, thus callable if the object itself is <code>const</code>.</p>

<hr>

<p>Right now, there's not much reason for the existence of <code>SpecType</code>. In my opinion, it does too little to be a separate class. Assuming you are already extending that class, then it makes sense, but otherwise, it is better to avoid predicting the future and don't bother adding boilerplate classes that end up unused. </p>

<p>The suggestion <a href="https://codereview.stackexchange.com/a/102201/39810">made by a previous answer</a> to the other question of creating a template class was interesting because each template instantiation has a unique type, so that would prevent, for instance, mixing <code>health</code> with <code>mana</code> because those would be unrelated types. Going that way, then I'd say the template <code>Spec</code> type would be a nice addition, even if just as a tiny wrapper, since it adds type-safety to the code.</p>

<hr>

<h3>Commenting for auto-generated documentation</h3>

<p>I get it that some companies really value generating documentation from comments in the code, but take a piece like this one for example:</p>

<blockquote>
<pre><code>/// &lt;summary&gt;
/// Constructor for the SpecType class.
/// &lt;/summary&gt;
/// &lt;param name="specValue"&gt;The value that the SpecType contains.&lt;/param&gt;
SpecType::SpecType(int specValue):
    specValue(specValue)
{}
</code></pre>
</blockquote>

<p>What is that comment adding to the understanding of the code, that couldn't be inferred just by reading the code? Nothing whatsoever. And those XML tags are simply atrocious! They completely distract me from the actual comment text and code.</p>

<p>If you really must comment mechanically to generate documentation, then I'd suggesting using a better tool: <a href="http://www.doxygen.nl/" rel="nofollow noreferrer"><code>doxygen</code></a>.</p>

<p>Doxygen uses a less invasive markup than those XML tags (actually, you can choose from a few different styles), and more, it doesn't force you to exhaustively comment every method. Methods you don't comment are copied verbatim to the output doc, so obvious things like a constructor don't have to be commented with "this is the constructor for class XYZ".</p>
    </div>