<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to remarks by previous reviews:</p>

<ul>
<li><p>This is wrong:</p>

<pre><code>int main(const int argc, const char *const *const argv)
</code></pre>

<p>The form of main() is for the <em>compiler</em> to decide, not the programmer. This form is not at all compatible with standard C <code>int main(int argc, char *argv[])</code>. So unless your compiler docs specifically tell you that your custom form of main() is ok, you are invoking undefined behavior.</p></li>
<li><p>Regarding the <code>#define HEADER_DATA</code>, you have a subtle but severe bug, namely that each line introduces a null terminator <code>\x00</code> since the data is string literals. This may screw up all CRC calculations and <code>memcmp</code> calls, if you don't take it in account. Wiser to roll with <code>static const uint8_t</code> as advised in another review.</p>

<p>If you can compile as standard C, use lots of <code>_Static_assert</code>. For example your enum could end with a dummy entry <code>END</code> and that one should be the same as the size of the data, or otherwise your constants are corrupt somewhere.</p></li>
<li><p><code>for( result = 0; nbytes--; )</code> should be <code>for(result = 0; nbytes&gt;0; nbytes--)</code> or you will get very strange results when passing <code>nbytes == 0</code> to the function.</p></li>
<li><p>The <code>result += (unsigned char)~(unsigned char)c;</code> is code smell and the other reviews didn't get this quite right. This is what actually happens:</p>

<ul>
<li><code>(unsigned char)c</code> you explicitly convert from <code>int</code> to <code>unsigned char</code>.</li>
<li><code>~</code> the compiler spots this operator and immediately and silently integer promotes back to <code>int</code>.</li>
<li>The result of <code>~</code> is of type <code>int</code> and very likely a negative number.</li>
<li>Casting to <code>unsigned char</code> again means that you parse out one byte from this negative number in an implementation-defined way. In practice, this will probably work just fine on most systems.</li>
<li><code>result += op</code> is equivalent to <code>result = result + op</code> except <code>result</code> is only evaluated once (which doesn't matter here). Since both operands of <code>+</code> are small integer types, the result of <code>+</code> is <code>int</code>, but it can't be negative. You then lvalue convert this temporary <code>int</code> back into <code>unsigned char</code> upon assignment.</li>
</ul>

<p>Summary: way too much implicit crap going on here! C is dangerously subtle, particularly when it comes to the <code>~ &lt;&lt; &gt;&gt;</code> operators. There is no bug here, but this code is brittle. For rugged code with a minimum of implicit conversions, I would change this to: </p>

<p><code>result += ~(unsigned int)c;</code> or if you prefer <code>result += ~(uint32_t)c;</code>.</p>

<p>This contains 2 silent promotions, <code>result</code> up to <code>unsigned int</code> and then the result of that back to <code>unsigned char</code>. All operands remain unsigned types, so it is harmless. More importantly, this should be fail-safe on traditional simple 8 bit checksums that rely on 8 bit unsigned wrap-around.</p></li>
</ul>
    </div>