<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good of you to include an explicit question, if a compound one.  </p>

<blockquote>
  <p>Is this algorithm goodâ€¦?</p>
</blockquote>

<p>This is quicksort, using <a href="https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme" rel="nofollow">Hoare's partition scheme</a> with a twist (use two reads and two writes to resolve one inversion wrt. pivot instead of a <em>swap</em> (/"exchange" - making it the counterexample to labelling quicksort "partition-exchange sort": a direct exchange is <em>not</em> essential (partition is)), conventionally taken to be equivalent to three reads&amp;writes, each. With today's memory hierarchies, don't expect it to be any faster <em>because of this</em>).<br>
This is a respected algorithm in wide use, if with three-way-partition, even dual pivot values.<br>
(There is a bug in your implementation: stuck if both <code>i</code> and <code>j</code> index an element equal to the pivot value (<code>num</code>).)</p>

<blockquote>
  <p>Can I improve [quicksort with minimised reads&amp;writes in <em>partition</em>]?</p>
</blockquote>

<p>For readability, you can and should separate the concerns of picking a pivot index, partition, and sort.<br>
Of the <code>Implementation issues</code> mentioned in the wikipedia article, two reduce the likelihood and severity of worst case behaviour:</p>

<ul>
<li>don't pick a value close to the beginning or end of the range as a pivot - this is a bad choice with ordered input (even almost and/or reverse ordered).  </li>
<li>recurse on the partitions from smallest to largest - this <em>should</em> limit the growth in call stack depth to logarithmic in the number of items to sort thanks to "tail call"/"tail recursion" optimisation. (If it doesn't, options include picking a pivot that <em>guarantees</em> a favourable partition, or turning the call for the largest partition into iteration.)  </li>
</ul>

<p>(Getting late: the following code is <em>work in progress</em>; posting this to save the above, mainly (not <em>quite</em> trusting SE's autosave)(Never used C# - give me a break on documentation comments, const-correctness, commendable use of <code>static</code> or some such.))</p>

<pre><code>    static int pivotIndex(int left, int right)
    {
        int n = right - left;
        return left + n/2;
    }
 /** partition int array a from start to end, exclusive
  *  @returns -1 if known sorted, else (one) index of pivot */
    static int partition(int[] a, int left, int right, int pivotIndex// = left
        ) {
        int l = left,
            r = right;

        int pivot = a[pivotIndex]; // a[pivotIndex] available for storage
        a[pivotIndex] = a[l]; // a[l] available for storage
        for (;;) {
            do
                if (--r &lt;= l) {
                    a[l] = pivot;
                    return l;
                }
            while (pivot &lt;= a[r]);
            a[l] = a[r]; // a[r] available for storage

            do
                if (r &lt;= ++l) {
                    a[r] = pivot;
                    return r;
                }
            while (a[l] &lt;= pivot);
            a[r] = a[l]; // a[l] available for storage
        }
    }

 /** sort int array a from start to end, exclusive */
    static void QuickSort(int[] a, int start, int end) {
        int pivotIndex = partition(a, start, end,
            pivotIndex(start, end));
        if (start &lt; pivotIndex) {
            QuickSort(a, start, pivotIndex);
        //  QuickSort(a, pivotIndex + 1, end);
        } // else
        if (start &lt;= pivotIndex)
            QuickSort(a, pivotIndex + 1, end);
    }
</code></pre>
    </div>