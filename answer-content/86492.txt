<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The answer of <strong>mjolka</strong> is already showing several good points. Here are some additional remarks:</p>

<h2>Fields =&gt; Properties</h2>

<p>You're not using the fields outside the class, so why make them public? You have two options, make the fields private or create a property with a private setter. I'd prefer the second choice:</p>

<pre><code>public long X { get; private set; }
public long Y { get; private set; }
public string Name { get; private set; }
public int LifeTime { get; private set; }
</code></pre>

<p>Now you can still use them the same way like before, and only <em>set</em> the values from within the class. <em>Reading</em> the values is also possible from outside the class.</p>

<h2>Input validation:</h2>

<p>One of the first things that struck me is that you never validate user input. Your program will throw a <code>System.FormatException</code> when entering non-numeric input. You'll have to provide some way to catch this. </p>

<p>Change following line:</p>

<pre><code>int xChange = Int32.Parse(Console.ReadLine());
</code></pre>

<p>to:</p>

<pre><code>int xChange;
var xValid = Int32.TryParse(Console.ReadLine(), out xChange);
</code></pre>

<p>This also goes for the y coordinate. Now you can nicely validate against these boolean fields and ask for coordinates again if the input is not valid:</p>

<pre><code>if (xValid &amp;&amp; yValid)
{
    MoveRover(xChange, yChange);
}
else
{
    Console.WriteLine("Unknown rover input, please try again:");
    GetRoverPositionChange();
}
</code></pre>

<p>You must also apply this kind of validation elsewhere in your code where you ask for input.</p>

<h2>Logical errors:</h2>

<p>The variable name <code>lifeTime</code> confused me. You checked for:</p>

<pre><code>public bool RoverDead()
{
    return this.lifeTime &gt; 0;
}
</code></pre>

<p>According to the above method, the rover is dead from the moment the <code>lifeTime</code> variable is greater than 0. But when you're moving the rover, you're subtracting the change from the lifetime, making him more and more alive. But you can't make him more alive since he will be dead from the beginning when you give the rover a lifetime of any positive number.</p>

<p>This doesn't make sense to me. Rename the <code>lifeTime</code> variable to <code>RemainingLifeTime</code> and use the property suggested by mjolka:</p>

<pre><code>public bool IsAlive
{
    get { return RemainingLifeTime &gt; 0; }
}
</code></pre>

<p>Now when the remaining lifetime is greater than 0, your rover can happily move and will die when you keep subtracting the changes from its <em>remaining</em> lifetime. This gets me to another error in the logic. This is the formula you use to calculate the number to subtract from the lifetime:</p>

<pre><code>public void UpdateRoverLifeTime(int xChange, int yChange)
{
    RemainingLifeTime -= Math.Abs(xChange - yChange);
}
</code></pre>

<p>If this can be applied in real life, the Mars Rover could keep going indefinitely, as long as the change of X is equal to the change of Y. Example:</p>

<ul>
<li>Start X: 0</li>
<li>Start Y: 0</li>
<li>Name: test</li>
<li>Starting LifeTime: 2</li>
</ul>

<p>Now give 5 as input for <code>xChange</code> and <code>yChange</code> and voila... infinite power for the fella!</p>

<p>Rethink a better way to calculate this, you could for example use a Pythagorean function:</p>

<blockquote>
  <p>a² = b² + c²</p>
</blockquote>

<p>Your formula would become:</p>

<pre><code>var deltaChange = (int)Math.Floor(Math.Sqrt(xChange * xChange + yChange * yChange));
</code></pre>

<p>You will have to adjust the maximum and minimum allowed change though, as for now you'll only allow very small moves.</p>

<p>Hope this helps!</p>
    </div>