<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is quite good for a beginning, but there's still much room for improvement. Your code main flaw is that it is difficult to read. There are also some performance issues, but they are a lot easier to correct.</p>
<p>N.B: I'll stay close to your algorithm, although you could probably find a better one in a graph library (see for instance <a href="https://en.wikipedia.org/wiki/Connected_component_(graph_theory)#algorithms" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Connected_component_(graph_theory)#algorithms</a>)</p>
<h1>Performance</h1>
<p>You must pick your types more carefully. Don't choose a type that allocates memory when you can use one that doesn't. For instance, don't represent a pair of indices by a <code>std::vector</code>: a pair will always have two elements, there is no need to ever grow it. So choose a <code>std::pair&lt;int, int&gt;</code> instead: it is lighter, quicker, and reflects your intent more clearly. In the same way, don't use <code>std::string</code> to represent 1 character: your <code>stringpool</code> can as well be of type <code>std::vector&lt;std::string&gt;</code>.</p>
<p>You must also be more careful while passing objects around. Don't pass large objects by value unless you need both to copy and modify them. For instance, the signature: <code>std::string swapLexOrder(std::string str, std::vector&lt;std::vector&lt;int&gt;&gt; pairs)</code> is only partially correct. You will indeed modify <code>str</code>, and you want the user to keep his original string untouched, so passing by value is a good call. But <code>pairs</code> is read-only in your code, so pass it by const reference.</p>
<h1>Expressiveness</h1>
<p>Your code is one big function containing a lot of nested loops. As a result,it's very hard to understand, let alone optimize. There is two ways to fix it: the first is to better comment on your algorithm (for instance, a minimum would be: <em>first, we merge all pairs of indices that are connected together; then we extract the corresponding characters from the input string, sort them in decreasing order and put them back</em>); the second, is to make your code express your intent clearly.</p>
<p>The most important rule, which also is one of the hardest to obey, is to choose meaningful names. <code>newset</code> doesn't mean much, neither does <code>p</code>. <code>pairpool</code> should not contain set of more than two elements.</p>
<p>Another way to write more expressive code is to avoid "raw loops". Use named algorithms instead. For instance, I rewrote the first part of your algorithm as a combination of a <strong>partition</strong> discriminating sets containing one element of the considered pair and an <strong>accumulation</strong> which merges them:</p>
<pre><code>std::string swapLexOrder(std::string str, const std::vector&lt;std::pair&lt;int, int&gt;&gt;&amp; pairs)
{
    if(pairs.size() == 0) return str;
    std::vector&lt;std::set&lt;int&gt;&gt; index_permutations; //pairpool : contains sets of interchangeable indices
    
    for(auto pair : pairs)
    {   
        // [matches, end) &lt;- sets containing either one of the pair's elements   
        auto matches = std::partition(index_permutations.begin(), index_permutations.end(), 
                                      [&amp;pair](const auto&amp; permutation_set) {
            return std::none_of(permutation_set.begin(), permutation_set.end(), [&amp;pair](auto index) {
                return index == pair.first || index == pair.second;
            });
        });
        
        if (matches == index_permutations.end()) index_permutations.push_back({pair.first, pair.second});
        else { // merge matches
            *matches = std::accumulate(matches, index_permutations.end(),
                                       std::set&lt;int&gt;{pair.first, pair.second},
                                       [](auto&amp;&amp; init, auto&amp;&amp; permutation) {
                init.insert(permutation.begin(), permutation.end());
                return init;
            });
            index_permutations.erase(std::next(matches), index_permutations.end());
        }
    }
// ...
</code></pre>
<p>Here's a link to the partially rewritten code if you want to experiment with it: <a href="https://wandbox.org/permlink/6Wij6Y4NuooMlW6C" rel="nofollow noreferrer">https://wandbox.org/permlink/6Wij6Y4NuooMlW6C</a></p>
    </div>