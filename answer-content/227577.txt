<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>bouncy</code></h1>

<p>You did a good job by extracting the check for bouncyness to a separate function. Plus points for the docstringThe function itself can be a bit better:</p>

<p>You can use the builtin <code>sorted</code> instead of <code>list.sort</code>. And since a string is an iterable too, you don't need the explicit casts to <code>list</code>
You can also immediately return the result of the test <code>number != n1 and number != n2</code></p>

<p>I don't like the names <code>n1</code> and <code>n2</code>. They are the increasing and decreasing order of digits, so call em that. <code>N</code></p>

<pre><code>def bouncy(number):
    """Function determines whether arbitrary number N is a bouncy number."""
    digits = list(str(number))
    increasing = sorted(digits)
    decreasing = increasing[::-1]
    return digits != decreasing and digits != increasing
</code></pre>

<p>I've checked a few variations of this bouncyness check, but this is the fastest I can find.</p>

<pre><code>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

def bouncy_pairwise(number):
    """
    tests whether a number is bouncy
    """
    digits = str(number)
    increasing = decreasing = False
    for a, b in pairwise(digits):
        if not increasing and a &gt; b:
            increasing = True
        if not decreasing and a &lt; b:
            decreasing = True
        if increasing and decreasing:
            return True
</code></pre>

<p>and </p>

<pre><code>def bouncy_zip(number):
    """
    tests whether a number is bouncy
    """
    digits = str(number)
    increasing = decreasing = False
    for a, b in zip(digits, digits[1::]):
        if not increasing and a &gt; b:
            increasing = True
        if not decreasing and a &lt; b:
            decreasing = True
        if increasing and decreasing:
            return True
</code></pre>

<p>were faster when the bouncyness was in the beginning of the number, but slower for non-bouncy numbers</p>

<h1><code>find</code></h1>

<ul>
<li>You have the 0.99 hardcoded. I would pass this on as an argument to the list</li>
<li>Of the double variables <code>total</code> and <code>start</code>, only 1 is needed </li>
<li>Instead of the <code>break</code>, just <code>return</code> there</li>
<li>instead of the <code>while True</code> loop, use <code>itertools.count</code></li>
<li>no need to shorten <code>bou</code>, you can use <code>bouncy_count</code> or something as a more clear variable name</li>
<li>You could use the fact that <code>int(True)</code> is <code>1</code> and <code>int(False)</code> is <code>0</code>, 
to replace <code>if bouncy(i): bouncy_count += 1</code> by <code>bouncy_count += bouncy(i)</code></li>
</ul>

<p>With this result:</p>

<pre><code>def find(fraction = .50):
    """Finds the first number where the ratio of bouncy numbers to all umbers is &gt; `fraction`"""
    bouncy_count = 0
    for i in count(1):
        bouncy_count += bouncy(i)
        if bouncy_count / i &gt; fraction:
            return i
</code></pre>

<h1>timing</h1>

<p>Instead of using <code>time.time</code>, you can use the <a href="https://docs.python.org/3/library/timeit.html?highlight=timeit#module-timeit" rel="nofollow noreferrer"><code>timeit</code></a> module</p>

<p>for example:</p>

<pre><code>timeit.repeat("find_bouncy(.9)", globals={"find_bouncy": find_bouncy}, number = 100)
</code></pre>
    </div>