<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a section of my game:</p>

<blockquote>
<pre><code>'X' Enter a value from the grid to plot your move: exit
Enter a number

'X' Enter a value from the grid to plot your move: leave
Enter a number

'X' Enter a value from the grid to plot your move: quit
Enter a number

'X' Enter a value from the grid to plot your move: ^CEnter a number
</code></pre>
</blockquote>

<p>I was just trying to do a short test, and then go back to the code and make some more changes, but I couldn't get out of the program without finishing the game.  It's good that you don't allow just anything, but <code>^C</code> at least should let me get out.</p>

<hr>

<p>Your <code>place()</code> function could be a little better by using <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow"><code>enumerate()</code></a>:</p>

<pre><code>def place(num,x):
    # Returns the value in x at position num
    for i, v in enumerate(x):
        if v == num:
            return x[(i + 1)]
    return str(num)
</code></pre>

<p>Your naming could still be improved.  How is one to know that <code>x</code> is a list of positions and values?  There's more that I would change, but I'll get to that below.</p>

<hr>

<p>You have a function called <code>print_grid</code> that makes a move, too.  Either create a new function to make the move or rename the current function to show that it has side effects.</p>

<hr>

<p>Global variables are almost never necessary.  If you are tempted, you might be better off either passing them as arguments or defining a class.  In this case, I think a class would be the better option.</p>

<hr>

<p><code>pos_list</code> would be better off being a dictionary (of course with a different name).  It would be <code>{pos: value, pos: value, ...}</code> instead of <code>[pos, value, pos, value, ...]</code>.  That way, lookups are easier.  For example, <code>place()</code> could be <code>return x.get(num, str(num))</code> -- just one line!</p>

<hr>

<p>Your grid is a little hard to follow.  It would be better to have a template and fill it in:</p>

<pre><code>    template = """
-------------
| {} | {} | {} |
|-----------|
| {} | {} | {} |
|-----------|
| {} | {} | {} |
--------------"""


    if x == 2:
        # Only prints if the player has made a move
        print template.format(*(place(num + 1, pos_list) for num in range(9)))
</code></pre>

<hr>

<p>To be frank, I agree with you comment in <code>winner()</code> that the code is messy.  I would define tuples of valid moves and see if any of them is a match:</p>

<pre><code>def winner(x,player,xx):
    wins = ((1, 2, 3), (4, 5, 6), (7, 8, 9), # Horizontal
            (1, 4, 7), (2, 5, 8), (3, 6, 9), # Vertical
            (1, 5, 9), (3, 5, 7)) # Diagonal

    if any(all(pos in x for pos in win) for win in wins):
        if xx != 1:
            print '\n'*5, "'{}'".format(player), "HAS WON!"
        return True
    return False
</code></pre>

<p>I changed <code>if xx &lt;&gt; 1:</code> to <code>if xx != 1:</code> because it's a little more obvious what it means.  In fact, Python 3 took out <code>&lt;&gt;</code> so you need to use <code>!=</code>.  I also changed your <code>print</code> statement.  You didn't need to escape <code>'</code> because it was <code>"</code> that made it a string, so the <code>'</code> wouldn't close the string.  Also, while <code>%</code> is not officially deprecated, it is recommended to use <a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow"><code>.format()</code></a>.  While I was at it, I changed <code>return 1 == 1</code> to <code>return True</code>.  Why make Python evaluate an expression when you already know the answer?</p>

<hr>

<blockquote>
<pre><code>def computer_AI_part(listx):
</code></pre>
</blockquote>

<p>Every function does its part.  You never need the word <code>part</code> in its name.  Also, <code>listx</code> isn't very descriptive.  What sort of list is it?  Is it a list of <code>moves</code>?</p>

<blockquote>
<pre><code>while True:

    # Replay's the game
    if replay == 1:
        restart = raw_input("Would you like to replay?: ")
        if restart == "yes":
            pass
        else:
            return
    else:
        print "\nTic Tac Toe - Computer vs You", '\n'*2,"Computer goes first\n"
</code></pre>
</blockquote>

<p>Since <code>replay</code> is always either <code>0</code> or <code>1</code>, and since <code>0</code> is <code>False</code> and <code>1</code> is <code>True</code>, you can simply say <code>if replay:</code>.  I would also change the logic slightly.  If I typed <code>y</code> or <code>Yes</code>, your program would just exit.  I would do something more like:</p>

<pre><code>while True:

    # Replay's the game
    if replay:
        restart = raw_input("Would you like to replay?: ").lower()
        if restart in ("y", "yes"): 
            pass
        elif restart in ("n", "no"):
            return
        else:
            print "Say 'yes' or 'no'"
            continue
    else:
        print "\nTic Tac Toe - Computer vs You", '\n'*2,"Computer goes first\n"
</code></pre>

<p>It's only barely longer, and it is much more user-friendly.</p>

<hr>

<blockquote>
<pre><code>replay,computer_move,players_move,loop_count,pos_list,player_list,computer_list = 0,0,0,0,[],[],[]
</code></pre>
</blockquote>

<p>That's hard to read.  If you want to put them all together like that, you should at least add some whitespace and put the different types on different lines:</p>

<pre><code>replay, computer_move, players_move, loop_count = 0, 0, 0, 0
pos_list, player_list, computer_list = [], [], []
</code></pre>

<p>That's a lot easier to read.</p>

<hr>

<blockquote>
<pre><code>if computer_move in pos_list:
    continue
break
</code></pre>
</blockquote>

<p>Why not:</p>

<pre><code>if computer_move not in pos_list:
    break
</code></pre>

<p>That's a little easier to understand.</p>

<hr>

<pre><code> if winner(computer_list,'Computer',2) == True:
</code></pre>

<p><code>winner()</code> already returns a boolean.  Checking its equality with <code>True</code> is redundant because it will result ... in the same boolean.</p>

<hr>

<blockquote>
<pre><code>except:
    print "Enter a number"
</code></pre>
</blockquote>

<p>You have certain expectations for what errors could happen.  I would change this to:</p>

<pre><code>except ValueError:
    print "Enter a number"
except (EOFError, KeyboardInterrupt):
    exit()
</code></pre>

<p>Yay!  That fixed my original problem of not being able to exit.</p>

<hr>

<blockquote>
<pre><code>if __name__ == "__main__":
    computer_and_player()
</code></pre>
</blockquote>

<p>Excellent!  I can import your functions without running the whole code.</p>
    </div>