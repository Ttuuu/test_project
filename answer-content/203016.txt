<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall the code is quite easy to read, but it is more complicated than it needs to be.</p>

<hr>

<blockquote>
<pre><code>    fractorial = {}
    for i in range(2, number + 1):
        prime_factorization = prime_factor(i)
        update_fractorial(prime_factorization, fractorial)

    print(compute_fractorial_value(fractorial))
</code></pre>
</blockquote>

<p>I would expect the name <code>fractorial</code> to be either the final integer or the function which computes it. Perhaps <code>fractorial_factorization</code> would be a clearer name.</p>

<p><code>compute_fractorial_value</code> doesn't actually do anything specific to fractorials. Perhaps <code>compose_factorization</code> or <code>multiply_powers</code>?</p>

<p>The algorithm used to compute the prime factorisation of the fractorial is correct, but overkill. If \$p\$ is a prime and \$a\$ is a positive integer, under what condition is \$p^a\$ a factor of the \$n\$th fractorial?</p>

<hr>

<blockquote>
<pre><code>def prime_factor(number):
    primes = [2, 3, 5, 7, 11, 13, 17, 19]
    dict = {}
    i = 0
    while i &lt; len(primes):
        p = 0
        while number % primes[i] == 0:
            number = number // primes[i]
            p += 1

        if p != 0:
            dict[primes[i]] = p

        i += 1

    return dict
</code></pre>
</blockquote>

<p>Apart from the hard-coded primes, this is a standard implementation. I would suggest that <code>p</code> is more conventionally used to denote <code>primes[i]</code>, so perhaps <code>power</code> would be a less surprising name.</p>

<hr>

<blockquote>
<pre><code>def update_fractorial(prime_factorization, fractorial):
    for key in prime_factorization:
        if key in fractorial:
            if prime_factorization[key] &gt; fractorial[key]:
                fractorial[key] = prime_factorization[key]
        else:
            fractorial[key] = prime_factorization[key]

        # Or should I replace the if/else statements with:
        #
        # if key in fractorial:
        #   if prime_factorization[key] &lt; fractorial[key]:
        #      break
        #
        # fractorial[key] = prime_factorization[key]
        #
        # since it is shorter.
</code></pre>
</blockquote>

<p>Shorter still, and more explicit:</p>

<pre><code>def update_fractorial(prime_factorization, fractorial):
    for key in prime_factorization:
        if key not in fractorial or prime_factorization[key] &gt; fractorial[key]:
            fractorial[key] = prime_factorization[key]
</code></pre>

<p>Although it's preferable to avoid repeating the lookup. The efficient way of doing this is</p>

<pre><code>def update_fractorial(prime_factorization, fractorial):
    for key, val in prime_factorization.items():
        if key not in fractorial or val &gt; fractorial[key]:
            fractorial[key] = val
</code></pre>

<hr>

<blockquote>
<pre><code>def compute_fractorial_value(fractorial):
    value = 1
    for key in fractorial:
        value *= key ** fractorial[key]

    return value
</code></pre>
</blockquote>

<p>Apart from the previous comment about the name, the only thing I'd say here is that if you really want to scale this up, multiplying lots of small numbers is best done on a tree-like basis. I.e. you pair up the numbers, multiply each pair, pair up again, multiply again, ... But that's overkill for this problem.</p>

<hr>

<blockquote>
<pre><code>main()
</code></pre>
</blockquote>

<p>This is half-way between the na√Øve approach of not defining <code>main()</code> at all and just dumping its contents at the end, and the "best practice" approach of</p>

<pre><code>if __name__ == "__main__":
    main()
</code></pre>

<p>Might as well get used to the best practice approach now.</p>
    </div>