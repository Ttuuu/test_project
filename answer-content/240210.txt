<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One set of parenthesis are unneeded in this expression:</p>

<pre><code>alpha = (bin(exponent).replace('0b', ''))[::-1]
</code></pre>

<p>You could write this as:</p>

<pre><code>alpha = bin(exponent).replace('0b', '')[::-1]
</code></pre>

<hr>

<p>Using <code>[::-1]</code> to reverse the string is nice, but using <code>replace('0b', '')</code> to remove the <code>"0b"</code> from the start first is unnecessary.  Using the <code>end</code> field of <code>[start:end:step]</code> would work ... you want to end just before the first character:</p>

<pre><code>alpha = bin(exponent)[:1:-1]
</code></pre>

<hr>

<p>Conversion from a string (<code>"0"</code> and <code>"1"</code>) to an integer (<code>0</code> and <code>1</code>) is unnecessary when you are just comparing the result to the integer <code>1</code>.  So instead of:</p>

<pre><code>    if int(alpha[i]) == 1:
</code></pre>

<p>you could write:</p>

<pre><code>    if alpha[i] == "1":
</code></pre>

<hr>

<p>When you loop over a string, character by character (or any ordered container element by element), using:</p>

<pre><code>for i in range(0, len(alpha)):
    if alpha[i] == "1":
        ...
    ...
</code></pre>

<p>is an anti-pattern in Python.  You should loop directly over the container:</p>

<pre><code>for character in alpha:
    if character == "1":
        ...
    ...
</code></pre>

<p>If you need the element and the index, you should use <code>enumerate</code>:</p>

<pre><code>for i, character in enumerate(alpha):
    ...
</code></pre>

<p>but that is not necessary here.</p>

<hr>

<p>Updated code, with type hints and an example <code>"""docstring"""</code>:</p>

<pre><code>def quad_pow(base: int, exponent: int, modul: int) -&gt; int:
    """
    Efficiently compute (base ^ exponent) % modul

    Parameters:
        base: The value to raise to the exponent
        exponent: The exponent to raise the base to
        modul: The modulus to compute the resulting value in

    Returns:
        The base raised to the exponent, modulo the given modulus
    """

    alpha = bin(exponent)[:1:-1]
    a = 1
    b = base

    for character in alpha:
        if character == "1":
            a = (a * b) % modul
        b = (b * b) % modul

    return a
</code></pre>

<hr>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> Note:</p>

<p>Binary operators should have a space on either side, so <code>(b*b)</code> should be written <code>(b * b)</code>.</p>

<hr>

<p>See also <a href="https://codereview.stackexchange.com/a/240197/100620">harold's answer</a> for avoiding the conversion of the exponent to a string.</p>
    </div>