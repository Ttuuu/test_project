<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is a good start, but it is not finished yet. You still need to do:</p>

<ul>
<li>character literals</li>
<li>string literals</li>
<li>floating-point literals</li>
<li>hexadecimal int literals</li>
<li>int literals containing underscores</li>
</ul>

<p>I suggest you pick a copy of the current C standard and read through chapter 6, which contains the definitions for all these lexemes. Along with the reading, start to write unit tests for each of the lexeme rules, especially the edge cases.</p>

<p>Your current code is well-structured, and you will be able to write the full lexer keeping the structure the same. I've written a very similar lexer <a href="https://github.com/rillig/pkglint/blob/master/textproc/lexer.go" rel="nofollow noreferrer">in my pkglint project</a>, and the corresponding unit tests in <code>lexer_test.go</code> in the same directory. Reading this code will bring you up to speed with your own lexer. To see how I use the lexer, look for <code>NewLexer</code> in the code.</p>

<p>One aspect where my lexer differs from yours is that my lexer only remembers the remaining input string, whereas your lexer remembers the complete input string plus the current index. I chose my data structure since it uses the least amount of memory possible. Taking a subslice is an efficient operation in Go, therefore I haven't been bitten my the extra memory access that <code>l.rest = l.rest[1:]</code> needs (it updates both the start and the length of <code>l.rest</code>. Your code is more efficient in that it only increments the index.</p>
    </div>