<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Most of your code looks pretty good, so I'll be highlighting the lines I have thoughts about.</p>

<p>But first, are you using Python 3.x? Because if not, please be aware that core dev support for python 2.x will be <a href="https://www.anaconda.com/end-of-life-eol-for-python-2-7-is-coming-are-you-ready/" rel="noreferrer">dropped</a> at the end of this year. So even though you lack the python 3.x tag, I'll pretend you're using it, since all your code looks python 3.x compatible. A few of these things would make you code unable to run on 2.x - I will mark when this happens, to the best of my knowledge. </p>

<pre class="lang-py prettyprint-override"><code>class DigitData(object):
# Should be:
class DigitData:
</code></pre>

<p>Inheritance from object is implicit in python 3.x only.</p>

<pre class="lang-py prettyprint-override"><code>(x_train, self.y_train), (self.x_test, self.y_test) = mnist.load_data()
# Should be:
(self.x_train, self.y_train), (self.x_test, self.y_test) = mnist.load_data()
</code></pre>

<p>You're using it later. </p>

<pre class="lang-py prettyprint-override"><code>    def label(self, index, train=True):
        if train:
            return self.y_train[index]
        else:
            return self.y_test[index]
</code></pre>

<p>Any function returning from a conditional can be rewritten as:</p>

<pre class="lang-py prettyprint-override"><code>    def label(self, index, train=True):
        if train:
            return self.y_train[index]
        return self.y_test[index]
</code></pre>

<p>Of course, in this specific limited case, you could even one-line it:</p>

<pre class="lang-py prettyprint-override"><code>    def label(self, index, train=True):
        return (self.y_train if train else self.y_test)[index]
</code></pre>

<p>But that depends on if you still think this readable. Opinions may differ - I consider this acceptable, but not everyone will. If you do, you can also apply this to your DigitData.example() method.</p>

<pre class="lang-py prettyprint-override"><code>super(DigitLabel, self).__init__()
# Can be:
super().__init__()
</code></pre>

<p>For python 3.x only.</p>

<pre class="lang-py prettyprint-override"><code>self.img = QImage(int(28), int(28), QImage.Format(24))
</code></pre>

<p>You don't need to cast to ints here, the number 28 already is one. You might also be interested in making these "magic" numbers global constants, since you're using them again a few lines later.</p>

<pre class="lang-py prettyprint-override"><code>for i in range(28):
    for j in range(28):
        pass
        pixel_intensity = square[j, i]
        color = qRgb(pixel_intensity, pixel_intensity, pixel_intensity)
        self.img.setPixel(i, j, color)
</code></pre>

<p>You're absolutely right that it shouldn't be done this way. Since you're already using numpy, consider putting that (or more specifically, it's buffer) behind a QIcon. I'm more of a PyQt guy myself rather than PySide, but I believe PySide should also be capable of this.</p>

<pre class="lang-py prettyprint-override"><code>def loadDigits(self, digit_data):
    # ...
</code></pre>

<p>You're skipping a total of 6000 main loop iterations while executing this one method? That smells a bit like suboptimal solutions. Are you really sure you need 6000 widgets in your layouts here? </p>

<p>I'm going to assume you really do need to - this isn't software engineering stack exchange after all. However, I still reccommend you only pause the loop around 1 in 10 iterations, perhaps even less. Same for it's progress bar signal. Especially after you finish optimizing <code>DigitLabel.__init__</code>a bit more - as often as you build it, you really cannot afford much.</p>

<pre class="lang-py prettyprint-override"><code>self.dt = DigitTable()
</code></pre>

<p>Qt does a lot of useful things with it's parent-child systems. You should really use them to. Add self as an argument here, and in the <code>__init__</code> of DigitTable, pass it to the super() call. </p>

<pre class="lang-py prettyprint-override"><code>    def quit_load(self):
        self.dt.load_flag = "quit"
</code></pre>

<p>This should be a signal that connects to a slot of self.dt.</p>

<p>In general, when loading a lot of data, you might want to look into offloading that into a another thread. Keep in mind that with Qt, you generally cannot do GUI work anywhere else but the main thread. </p>
    </div>