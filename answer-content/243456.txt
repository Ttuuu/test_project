<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here some some gentle suggestions for this particular implementation:</p>

<ul>
<li>This isn't really a "validator" as it doesn't validate anything. Maybe consider "evaluator" or something along those lines.</li>
<li>When you receive the Matrix, you can store the value of <code>this.Matrix.GetLength(0)</code> and use it instead of calling it multiples times. Since you know the Matrix is always NxN, you know that the first dimension length will always match the second dimension length (in other words, <code>this.Matrix.GetLength(1) == this.Matrix.GetLength(0)</code>)</li>
<li>You aren't checking to see if the Matrix is <em>actually</em> an NxN matrix. What if the user passed in a 4x3?</li>
<li>You are doing quite a bit of copying for no strong benefit. If every item in a row, column or diagonal is the same, then you know there's a win. So, see if a character matches the one next to it. If not, then you know there's no win. If it is a match, check the next one. You don't need to copy that to another array and the do the distinct. If you did that, you'd significantly reduce the lines of code and complexity. Maybe something like: <code>if (matrix[i,j] != matrix[i + 1,j]) return false;</code> Obviously you'll need some bounds checking, etc.</li>
<li>Other than <code>MatrixHasWinner</code>, there's literally nothing in your code that suggests this is for a game of tic-tac-toe. You are using very generic names (matrix, vector) and not assigning any context to that. Matrix could be GameBoard. Vector could be Row or Column (though, as I said above, you don't really need it).</li>
</ul>
    </div>