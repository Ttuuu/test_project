<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid unnecessary type conversions</h1>
<p><code>kDIRECTIONS</code> is a 2D array of <code>std::int_fast8_t</code>. However, these values will be added to other variables of type <code>std::int_fast16_t</code>. If these two types have a different size, then the compiler might have to add instructions to convert between the two, and despite having "fast" in the name, this will be slow.</p>
<h1>Avoid overusing <code>std::array</code></h1>
<p><code>std::array</code> has its uses, but here you can just use a simply C-style array:</p>
<pre><code>static constexpr size_type kDIRECTIONS[4][2] = {{ -1, 0}, {1, 0}, {0, -1}, {0, 1}};
</code></pre>
<p>That is much easier to read than nested <code>std::array</code>s, and will work just as well in the rest of your code without needing any modifications.</p>
<h1>Avoid overusing <code>std::size()</code></h1>
<p>Instead of writing <code>std::size(grid)</code>, you can write <code>grid.size()</code>. It avoids having to type the <code>std::</code>, and reads a bit more natural. Also, don't use <code>std::size()</code> or <code>.size()</code> to check if a container has members, instead use <code>!something.empty()</code>, like:</p>
<pre><code>while (!player_box_q.empty()) {
    ...
}
</code></pre>
<p>The reason is that counting the number of elements can be expensive for containers that do not keep an explicit count in memory, but have to traverse the whole container to derive that number.</p>
<h1>Use structured bindings where appropriate</h1>
<p>Since you are writing C++17 code, you can use structured bindings, which makes code using <code>std::pair</code> much nicer. For example:</p>
<pre><code>while (qlen--) {
    const auto [box_pos, player_pos] = player_box_q.front();
    ...
</code></pre>
<h1>Avoid encoding things to string</h1>
<p>I can see your reasoning: “an <code>unordered_set&lt;&gt;</code> is faster than a <code>set&lt;&gt;</code>. But the standard library doesn't know how to hash a <code>std::pair</code>, so I can't use an <code>unordered_set&lt;std::pair&lt;size_type, size_type&gt;</code>. But it does allow <code>std::string</code>... I know, let's encode the pair to a string!” However, encoding two ints to a string is in itself quite expensive.</p>
<p>The proper solution is to create a <a href="https://stackoverflow.com/questions/17016175/c-unordered-map-using-a-custom-class-type-as-the-key">custom hash function</a> for the box/player coordinate pairs, and tell <code>std::unordered_set</code> to use it. There are several ways to do this, the way I will show here is to create a functor class and pass it as a template argument:</p>
<pre><code>struct player_box_hash {
    std::size_t operator()(const std::pair&lt;size_type, size_type&gt; &amp;key) const {
        return std::hash&lt;uint32_t&gt;{}(uint32_t(key.first) &lt;&lt; 16 | key.second);
    }
};

std::unordered_set&lt;std::pair&lt;size_type, size_type&gt;, player_box_hash&gt; box_player_visited;
</code></pre>
<p>And now you can use it as follows:</p>
<pre><code>auto box_player_encode = std::make_pair(box, next_x_player * col_len + next_y_player);

if (box_player_visited.count(box_player_encode)) {
    continue;
}

if (isAccessible(grid, player, next_x_player * col_len + next_y_player, box)) {
    player_box_q.push({next_x_box * col_len + next_y_box, box});
    box_player_visited.insert(box_player_encode);
}
</code></pre>
<h1>Create a function to check whether a position is valid</h1>
<p>You have duplicated the code to check whether the box's position and player's position is valid. Create a member function for it:</p>
<pre><code>static bool isValidPosition(size_type x, size_type y) {
    return x &gt;= 0 &amp;&amp; x &lt; row_len &amp;&amp; ...;
}
</code></pre>
<p>And then use it like so:</p>
<pre><code>for (const auto &amp;direction: kDIRECTIONS) {
    ...
    if (!isValidPosition(next_x_box, next_y_box) || !isValidPosition(next_x_player, next_y_player)) {
        continue;
    }
    ...
}
</code></pre>
    </div>