<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Question 1</h2>

<p>I would agree with this statement, and would actually take it further to follow "proper OOP practices". If you choose to implement your classes this way, you do not need to store the IDs of other classes - you can just store a variable that references the other class directly. So instead of <code>$favoriteRestaurantId</code> and <code>$favoriteRestaurantName</code>, you can just have <code>$favoriteRestaurant</code> and then access all the relevant properties of <code>Restaurant</code> through that variable i.e <code>$favoriteRestaurant-&gt;getName()</code>.</p>

<p><strong>Further explanation</strong></p>

<p>Right now we have two ways of modelling data - in the database, and in our PHP objects. Both environments are concerned with the relationships between objects, but they implement these relationships differently. We want to use the solution that fits the language we are using at any given time.</p>

<p>In the database, we model relationships with unique identifiers. In your case, these are unique integers for each row in a given table. So in the context of the database, if I want to know the name of Mike's favorite restaurant, I would first find the <code>user</code> with <code>name</code> "mike", find his matching <code>favoriteRestaurantId</code>, then find the matching <code>restaurant</code> with that <code>id</code> and finally retrieve the <code>name</code> of that restaurant. In this scenario, the <code>id</code> of the restaurant is acting as a <strong>handle</strong> to a <code>restaurant</code> object. We can store the handle anywhere in the database, and retrieve information about the object the handle represents by finding the corresponding row in the <code>restaurant</code> table.</p>

<p>In PHP, variables act as <strong>handles</strong> to other objects automatically. For example, if I have a class <code>User</code> with a variable <code>favoriteRestaurant</code>, then I can do something like</p>

<pre><code>$mike = UserFactory::createUser();
$mcDonalds = RestaurantFactory::createRestaurant();
$mike-&gt;favoriteRestaurant = $mcDonalds;
</code></pre>

<p>In the database, we represented this <em>relationship between objects</em> by getting a <strong>handle</strong> to the McDonald's restaurant (the restaurant ID <code>3</code>) and storing it somewhere associated with Mike (the field <code>favoriteRestaurantId</code>). Similarly, in PHP, we can represent this <em>relationship between objects</em> by getting a <strong>handle</strong> to the McDonald's restaurant (the variable <code>$mcDonalds</code>) and storing it somewhere associated with Mike (<code>$mike-&gt;favoriteRestaurant</code>).</p>

<p>The benefit of using PHP's built-in mechanisms for representing relationships, is that we can more easily find information <em>about</em> these relationships. Consider the case where we want to store more information about the restaurants, such as hours of operation. Previously, we would have had to either store this information directly in the <code>User</code> object as another variable (<code>$favoriteRestaurantHoursOfOperation</code>), or look up the restaurant object by ID every time we wanted to know this information. By storing the handle to the user's favorite restaurant directly as a variable, we can add the relevent information in the <code>Restaurant</code> class (where it belongs) and access it by calling <code>$mike-&gt;favoriteRestaurant-&gt;getHoursOfOperation();</code>. This represents the <em>relationship</em> between these objects more visibly.</p>

<h2>Question 2</h2>

<p>This is also a good idea, and in fact is exactly what the Factory pattern is designed to solve. You can do this fairly easily by just moving around some code that you have already written. I will show an example for the <code>UserFactory</code>:</p>

<pre><code>class UserFactory
{
    public static function createUser($userId)
    {
        $userObject = new User();
        // get user data from the db and set to User object
        $userRow = $usersTransactions-&gt;getUserById($userId);
        $userObject-&gt;setName($userRow["userRow"]["name"]);
        $userObject-&gt;setAge($userRow["userRow"]["age"]);
        $userObject-&gt;setFavoriteRestaurantId($userRow["userRow"]["favoriteRestaurantId"]);
        $userObject-&gt;setFavoriteFoodId($userRow["userRow"]["favoriteFoodId"]);
        return $userObject;
    }
}
</code></pre>

<p><em>You'll need a way to use the <code>UserTransactions</code> class inside the <code>UserFactory</code>, and there are several ways to accomplish this - pass it in via constructor and create a new UserFactory each time you want a user, construct a <code>UserTransactions</code> instance each time you call <code>createUser</code>, have a globally-accessible <code>UserTransactions</code> instance, etc. I haven't looked at enough of your code to know how you handle this, so find the option that works best for you.</em></p>

<p>Once you have implemented the <code>UserFactory</code> as above, you can use it elsewhere by simply calling <code>$userObject = UserFactory::createUser(2);</code> (using <code>2</code> from your given example).</p>

<p>You can also combine this with the solution in <strong>Question 1</strong> by changing the following two lines</p>

<pre><code>$userObject-&gt;setFavoriteRestaurantId($userRow["userRow"]["favoriteRestaurantId"]);
$userObject-&gt;setFavoriteFoodId($userRow["userRow"]["favoriteFoodId"]);
</code></pre>

<p>to something like</p>

<pre><code>$userFavoriteRestaurantId = $userRow["userRow"]["favoriteRestaurantId"];
$userObject-&gt;setFavoriteRestaurant(RestaurantFactory::createRestaurant($userFavoriteRestaurantId));

$userFavoriteFoodId = $userRow["userRow"]["favoriteFoodId"];
$userObject-&gt;setFavoriteFood(FoodFactory::createFood($userFavoriteFoodId));
</code></pre>

<h2>Other Notes</h2>

<ul>
<li>Not sure how your <code>$userRow</code> is implemented, but it would make more sense to be able to type <code>$userRow["favoriteFoodId"]</code> rather than having to add the redundant <code>["userRow"]</code>;</li>
<li>If your <code>restaurant</code> and <code>food</code> objects really do only contain a name, then it might be fine to simply store <code>$favoriteRestaurantName</code> and <code>$favoriteFoodName</code> in the <code>User</code> object, and completely remove the <code>Restaurant</code> and <code>Food</code> objects. However, if you want to properly model the relationships between objects, it's recommended to go with the solution to <em>Question 1</em> and store this info as handles to the actual <code>Restaurant</code> and <code>Food</code> objects respectively.</li>
</ul>
    </div>