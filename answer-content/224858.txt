<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Specification</h2>

<p>You have 2 requirements stated below. I see <strong>no reason why to <em>re-invent-the-wheel</em></strong> here. Both requirements can be met with using common practices.</p>

<blockquote>
  <p><em>..or a mechanism to drop packages rather fast
  before reading all the package content. (In case somebody sends an
  array with 10k elements, continuously to make denial of service).</em></p>
</blockquote>

<p>This should be the top layer that uses a fast algorithm to detect message tampering. I would use a <a href="https://en.wikipedia.org/wiki/Cyclic_redundancy_check" rel="nofollow noreferrer">CRC</a> or any other well-known checksum. This layer acts fast and would already filter out a lot of flooding.</p>

<pre><code>[message] = [content][checksum]
</code></pre>

<blockquote>
  <p><em>I was in need of an extra layer of protection against
  man-in-the-middle attacks..</em></p>
</blockquote>

<p>An additional layer is needed that does a thorough security check. Here you could verify confidentiality, authentication and addition message tampering. Multiple strategies and algorithms are available; <a href="https://crypto.stackexchange.com/questions/5458/should-we-sign-then-encrypt-or-encrypt-then-sign">This post talks about strategies (sign vs encrypt)</a>.</p>

<pre><code>[content] = [digest][signature][checksum] // one possible strategy
</code></pre>

<h2>C# Conventions</h2>

<ul>
<li>Use properties with backing fields: <code>public byte Val { get =&gt; val; set =&gt; val = value; }</code> -&gt; <code>public byte Value { get; set; }</code></li>
<li>Don't use abbreviations for member names: <code>Val</code> -&gt; <code>Value</code></li>
<li>Your <code>int</code> to <code>uint</code> conversion seems convoluted; which range of values would you allow, is unchecked conversion an option for you, why not use <code>uint</code> to begin with?</li>
<li>Prefer using <code>var</code>: <code>var capsuleConstants = new Stack&lt;CapsuleConstant&gt;();</code></li>
</ul>
    </div>