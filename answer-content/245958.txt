<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @Doi9t said, most of your code is about creating strings of repeated characters like the method below:</p>
<pre><code>private static String spaces( int num )
{
    StringBuilder sb = new StringBuilder();
    for( int spaces = 0; spaces &lt; num; ++spaces )
    {
        sb.append( " " );
     }
    return sb.toString();
}
</code></pre>
<p>You can use instead the <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#fill(char%5B%5D,%20char)" rel="nofollow noreferrer">Arrays.fill</a> method to create strings of replicated characters like below:</p>
<pre><code>private static String spaces( int num , char c)
{
   char[] arr = new char[num];
   Arrays.fill(arr, c); 

   return new String(arr);
}
</code></pre>
<p>About the construction of your tree like this below for <code>nRows = 6</code> :</p>
<pre><code>Note : \n and whitespaces are invisible

       *      \n &lt;-- row = 0     
      ***     \n   
     *****    \n 
    *******   \n 
   *********  \n
  *********** \n &lt;-- row = 5
       |      \n &lt;-- row = 6   
       _      \n &lt;-- row = 7  
</code></pre>
<p>You are doing it using one <code>StringBuilder</code> and consecutive <code>append</code> operations, but you already can calculate the length of the result and where to put characters different from <code>' '</code> to minimize operations.<br>
You can check that lines 6, 7, 0  have in common the characteristic to have just one char in the middle, while every line from 1 to 5 can be obtained from the previous one adding one char to the the left and to the right. So if you start from creating a <code>char</code> tree like below:</p>
<pre><code>private static String generateTree(int nRows) {
    final int nColumns = 2 * (nRows + 1);
    final int middle = nColumns / 2;
    char[] tree = new char[(nRows + 2) * nColumns];
    
    //...other instructions

    return new String(tree);
}
</code></pre>
<p>After you can calculate every row of your tree putting it in the right position in tree starting from the trunk lines and the peak of your tree:</p>
<pre><code>char[] row = new char[nColumns];  
Arrays.fill(row, ' ');
        
row[middle] = '|';
row[nColumns - 1] = '\n'; //newline will added to every line of the tree.
System.arraycopy(row, 0, tree, nRows  * nColumns, nColumns);
        
row[middle] = '_';
System.arraycopy(row, 0, tree, (nRows + 1) * nColumns, nColumns);
        
row[middle] = '*';
System.arraycopy(row, 0, tree, 0, nColumns);
</code></pre>
<p>After you can calculate the other lines of the tree starting from the peak and add them to obtain the final result:</p>
<pre><code>private static String generateTree(int nRows) {
    final int nColumns = 2 * (nRows + 1);
    final int middle = nColumns / 2;
    char[] tree = new char[(nRows + 2) * nColumns];
        
    char[] row = new char[nColumns];  
    Arrays.fill(row, ' ');
        
    row[middle] = '|';
    row[nColumns - 1] = '\n';
    System.arraycopy(row, 0, tree, nRows  * nColumns, nColumns);
        
    row[middle] = '_';
    System.arraycopy(row, 0, tree, (nRows + 1) * nColumns, nColumns);
        
    row[middle] = '*';
    System.arraycopy(row, 0, tree, 0, nColumns);
        
    for (int i = 1; i &lt; nRows; ++i) {
         row[middle - i] = '*';
         row[middle + i] = '*';
         System.arraycopy(row, 0, tree, i * nColumns, nColumns);
    }
        
    return new String(tree);
}
</code></pre>
    </div>