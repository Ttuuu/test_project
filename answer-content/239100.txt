<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem with this approach is that it won't scale well and if you want to extract text from diverse sources it will be impossible to handle all possible cases.</p>

<p>Regular expressions can be expensive, and if you have lots of text to process I would worry about performance. For many operations like changing <code>'&amp;amp;'</code> to <code>'&amp;'</code>, a regex is not even necessary, all you need is a simple <strong>search &amp; replace</strong>.</p>

<p>Attempting to parse HTML or XML using regular expressions can easily turn into a coding nightmare so don't overdo it.</p>

<p>I suggest that you use a dedicated library instead, like <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="nofollow noreferrer">BeautifulSoup</a> </p>

<p>As a starting point:</p>

<pre><code>from bs4 import BeautifulSoup

html = "&lt;p&gt;some HTML here&lt;/p&gt;"
soup = BeautifulSoup(html, 'html.parser')
print(soup.get_text("\n"))
</code></pre>

<p>From the <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#get-text" rel="nofollow noreferrer">documentation: get_text</a> (emphasis is mine):</p>

<blockquote>
  <p>If you only want the text part of a document or tag, you can use the get_text() method. It returns all the text in a document or beneath a tag, as a single <strong>Unicode</strong> string</p>
</blockquote>

<p>Note the addition of <code>"\n"</code>, that gets you <strong>multiline text</strong> where <code>&lt;p&gt;</code> or <code>&lt;br&gt;</code> tags are found. The function can also strip whitespace. There is a lot more to be said, so I will leave it to you to read the documentation and fine-tune the code according to your needs. This snippet is quite basic but may be sufficient for your purpose.</p>

<p>As you can see a lot can be done with just a few lines of code.</p>
    </div>