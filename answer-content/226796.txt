<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That is quite a lot of code, so I won't do a full review, just give some remarks about obvious things.</p>

<h1>Try to avoid as much platform-specific code as possible</h1>

<p>I see this piece of code:</p>

<pre><code>#ifdef __linux__
    this-&gt;setFixedSize(this-&gt;width(),this-&gt;height());
#elif _WIN32
    //Taille de fenetre fixe. Windows seulement
    setWindowFlags(Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint);
#else

#endif
</code></pre>

<p>Is it really that important to have the <code>MSWindowsFixedSizeDialogHint</code> flag set? Also, you don't actually fix the size of the window in this case. The Qt documentation also advises against using this flag, since it apparently doesn't behave nice in multi-monitor setups.</p>

<p>Even better would be to set a size constraint on the layout, as mentioned in <a href="https://doc.qt.io/qt-5/qwidget.html#setFixedSize" rel="nofollow noreferrer">the documentation for setFixedSize()</a>.</p>

<h1>Accents change the sound of a character</h1>

<pre><code>string accent("ÀÁÂÃÄÅàáâãäåÒÓÔÕÖØòóôõöøÈÉÊËèéêëÌÍÎÏìíîïÙÚÛÜùúûüÿÑñÇç");
string sansAccent("AAAAAAaaaaaaOOOOOOooooooEEEEeeeeIIIIiiiiUUUUuuuuyNnCc");
</code></pre>

<p>There it looks like you are just mapping every character to one which looks similar but without accents. However, in many languages, accents have a big impact on the sound, for example in German, "ä" sounds more like "eh" than "a". Even in French, "ç" sounds like "s" while where it is used, a "c" would have sounded like a "k".</p>

<h1>Mixing languages in source code</h1>

<p>You already apologized for using French variable and function names in the code. And from experience, I know many French developers prefer using French names in source code, so it's a culture thing that's probably hard to change. However, it has two drawbacks. First, it makes it harder to collaborate with non-French speaking persons on the same code. Second, since you are using C++ which uses English names for keywords, and the Qt library with is using English names as well, you are getting a horrible mix of languages in your code. For example:</p>

<pre><code>else if(ui-&gt;radio_speciaux-&gt;isChecked())
</code></pre>

<p>But it even happens in variable and function names you completely declared yourself, like:</p>

<pre><code>void FenetrePrincipale::on_bouton_generer_clicked() {
</code></pre>

<h1>Use a consistent code style</h1>

<p>I see both <code>if (foo)</code> and <code>if(foo)</code> in your code, sometimes there are spaces surrounding operators, sometimes not. Keeping a consistent code style makes it easier to navigate the code and to spot errors. The exact code style you use is a matter of taste, but it's best to use something that is in common use.</p>

<h1>Avoid using <code>new</code> and <code>delete</code></h1>

<p>I see the following in the implementation of <code>class Fenaide</code>'s constructor and destructor:</p>

<pre><code>FenAide::FenAide(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::FenAide)

...

FenAide::~FenAide()
{
    delete ui;
}
</code></pre>

<p>If you are always allocating memory for a variable in the constructor, and always freeing it in the destructor, you might just as well have made <code>ui</code> a regular member variable, but I guess in this case the full declaration of <code>Ui::FenAide</code> might be hidden. In that case, use a <code>std::unique_ptr&lt;&gt;</code> to hold the pointer, so it gets cleaned up automatically, even when something <code>throw</code>s in the constructor:</p>

<pre><code>class FenAide : public QDialog
{
    ...

private:
    std::unique_ptr&lt;Ui::FenAide&gt; ui;
};
</code></pre>

<p>With the above, you can get rid of the destructor of <code>FenAide</code>.</p>
    </div>