<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Starting position</strong></p>

<p>If there is a route to be found, it will go through cell 0 and will be found at first iteration of <code>start_tour</code>. We can remove the loop and just have <code>starting = 0</code>.</p>

<p><strong>Generating legal moves</strong></p>

<p>Various details can be improved in the <code>legal_moves</code> function.</p>

<p>This is a good occasion to use a generator with the keyword <code>yield</code>.</p>

<p>We could compute <code>row</code> and <code>col</code> with a single call to <code>divmod</code>.</p>

<p>We could make computation of new position more straight-forward with intermediates variables for coordinates on each axis.</p>

<p>Because of the way <code>new_position</code> is computed, there is no need for the additional boundary check.</p>

<p>We'd get something like:</p>

<pre><code>def generate_new_positions(visited, position, sq):
    """Yield legal moves"""
    generate_new_positions = [
        (-2, -1),
        (-2, 1),
        (-1, -2),
        (-1, 2),
        (1, -2),
        (1, 2),
        (2, -1),
        (2, 1),
    ]
    # position = row * sq + col
    row, col = divmod(position, sq)

    for dx, dy in generate_new_positions:
        x, y = row + dx, col + dy
        if 0 &lt;= x &lt; sq and 0 &lt;= y &lt; sq:
            new_pos = x * sq + y
            if new_pos not in visited:
                yield new_pos

</code></pre>

<p><strong>Separation of concerns: printing vs returning a result</strong></p>

<p>When a result is found, it is printed and a boolean (or None) is returned in the different functions. It would be easier to return either None or the result found and to have that result printed from a single point of the logic.</p>

<p>We'd have something like:</p>

<pre><code>def make_move(move_to, visited, current, route, sq):
    """Carry out the move"""
    for move in move_to:
        visited.add(current)
        new_route = route + str(current) + "-"
        solution_found = next_move(visited, move, new_route, sq)
        visited.remove(current)
        if solution_found:
            return solution_found
    return None


def next_move(visited, current, route, sq):
    """Find the next valid moves and instruct "make_move" to carry them out"""
    if len(visited) == (sq * sq) - 1:
        route += str(current)
        return route
    move_to = generate_new_positions(visited, current, sq)
    return make_move(move_to, visited, current, route, sq)


def start_tour(sq):
    """Calculate the knights tour for grid sq*sq starting at all positions in range 0-sq"""
    starting = 0
    visited = set()
    route = ""
    return next_move(visited, starting, route, sq)


if __name__ == "__main__":
    for square_size in 3, 5, 6:
        ret = start_tour(square_size)
        print("No knights tour could be calculated" if ret is None else ret)

</code></pre>

<p>Also, formatting the string could be done in a single place as well. We could use lists for instance in all the logic.</p>

<pre><code>def make_move(move_to, visited, current, route, sq):
    """Carry out the move"""
    for move in move_to:
        visited.add(current)
        new_route = route + [current]
        solution = next_move(visited, move, new_route, sq)
        visited.remove(current)
        if solution:
            return solution
    return None


def next_move(visited, current, route, sq):
    """Find the next valid moves and instruct "make_move" to carry them out"""
    if len(visited) == (sq * sq) - 1:
        return route + [current]
    move_to = generate_new_positions(visited, current, sq)
    return make_move(move_to, visited, current, route, sq)

def start_tour(sq):
    """Calculate the knights tour for grid sq*sq starting at all positions in range 0-sq"""
    starting = 0
    visited = set()
    route = []
    return next_move(visited, starting, route, sq)


if __name__ == "__main__":
    for square_size in 3, 5, 6:
        ret = start_tour(square_size)
        print("No knights tour could be calculated" if ret is None else "-".join((str(e) for e in ret)))
</code></pre>

<p><strong>Reducing the duplicated information</strong></p>

<p>We're maintaining a <code>visited</code> set and a <code>route</code> list: both containing roughtly the same data. Maybe we could recompute <code>visited</code> from the <code>route</code> when we need it.</p>

<pre><code>def make_move(move_to, current, route, sq):
    """Carry out the move"""
    for move in move_to:
        solution = next_move(move, route + [current], sq)
        if solution:
            return solution
    return None

def next_move(current, route, sq):
    """Find the next valid moves and instruct "make_move" to carry them out"""
    if len(route) == (sq * sq) - 1:
        return route + [current]
    move_to = generate_new_positions(set(route), current, sq)
    return make_move(move_to, current, route, sq)

def start_tour(sq):
    """Calculate the knights tour for grid sq*sq starting at all positions in range 0-sq"""
    return next_move(0, [], sq)
</code></pre>

<p><strong>Simplifying the logic</strong></p>

<p>Having a function A calling a function B itself calling B can make things hard to understand properly because both A and B are hard to understand independently.</p>

<p>Here, we could get rid of <code>make_move</code> by integrating directly in <code>next_move</code>:</p>

<pre><code>def next_move(current, route, sq):
    """Find the next valid moves and carry them out"""
    if len(route) == (sq * sq) - 1:
        return route + [current]
    for move in generate_new_positions(set(route), current, sq):
        solution = next_move(move, route + [current], sq)
        if solution:
            return solution
    return None
</code></pre>

<p><strong>More simplification</strong></p>

<p>In <code>next_move</code>, <code>route</code> is almost always used in the expression <code>route + [current]</code>. We could directly define this at the beginning of the function:</p>

<pre><code>def next_move(current, route, sq):
    """Find the next valid moves and carry them out"""
    new_route = route + [current]
    if len(new_route) == (sq * sq):
        return new_route
    for move in generate_new_positions(set(new_route), current, sq):
        solution = next_move(move, new_route, sq)
        if solution:
            return solution
    return None
</code></pre>

<p>More importantly, it leads to the question: why do we provide a route AND an element to add to it instead of just having that element in the list.</p>

<pre><code>def next_move(current, route, sq):
    """Find the next valid moves and carry them out"""
    if len(route) == (sq * sq):
        return route
    for move in generate_new_positions(set(route), current, sq):
        solution = next_move(move, route + [move], sq)
        if solution:
            return solution
    return None

def start_tour(sq):
    """Calculate the knights tour for grid sq*sq starting at all positions in range 0-sq"""
    start = 0
    return next_move(start, [start], sq)
</code></pre>

<p>Going further, we do not really the <code>current</code> argument anymore as we can compute it from <code>route</code>.</p>

<pre><code>def next_move(route, sq):
    """Find the next valid moves and carry them out"""
    if len(route) == (sq * sq):
        return route
    current = route[-1]
    new_pos = generate_new_positions(set(route), current, sq)
    for move in new_pos:
        solution = next_move(route + [move], sq)
        if solution:
            return solution
    return None

def start_tour(sq):
    """Calculate the knights tour for grid sq*sq starting at all positions in range 0-sq"""
    start = 0
    return next_move([start], sq)

</code></pre>

<p><strong>Final code</strong></p>

<pre><code>def generate_new_positions(visited, position, sq):
    """Yield legal moves"""
    generate_new_positions = [
        (-2, -1),
        (-2, 1),
        (-1, -2),
        (-1, 2),
        (1, -2),
        (1, 2),
        (2, -1),
        (2, 1),
    ]
    # position = row * sq + col
    row, col = divmod(position, sq)

    for dx, dy in generate_new_positions:
        x, y = row + dx, col + dy
        if 0 &lt;= x &lt; sq and 0 &lt;= y &lt; sq:
            new_pos = x * sq + y
            if new_pos not in visited:
                yield new_pos


def next_move(route, sq):
    """Find the next valid moves and carry them out"""
    if len(route) == (sq * sq):
        return route
    current = route[-1]
    new_pos = generate_new_positions(set(route), current, sq)
    for move in new_pos:
        solution = next_move(route + [move], sq)
        if solution:
            return solution
    return None


if __name__ == "__main__":
    for square_size in 3, 5, 6:
        ret = next_move([0], square_size)
        print("No knights tour could be calculated" if ret is None else "-".join((str(e) for e in ret)))
</code></pre>
    </div>