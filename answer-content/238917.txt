<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you're overdoing it. I know that you want SOLID pattern, but enforcing it like this way add more code complicity. </p>

<p>What happens on your code, is defining a <code>AnimalKind</code> and define multiple animals names (such as Lion, Hyena), which would be fine for a testable project, but it will make things much complicated in real or big projects. A simple example of this complicity would be adding more different animals from different species such as (Elephant, Parrot, Penguin, Spider ..etc). Now, think of how you would apply <code>CanEat</code> on these different kinds of animals. If you take <code>Size</code> as a factor, an Elephant would eat all animals including fish, and a Parrot would be eaten by a Penguin .. and so on.This would make a false logic. So, what you need is to use <code>AnimalKind</code> to define the specie type such as mammals, birds, reptiles, fishes, ..etc. Then, add <code>AnimalName</code>, which would holds the name of that animal such as Lion, Hyena ..etc. </p>

<p>Another thing you need to consider is the food system for each animal. Is the animal Herbivore, Carnivore or Omnivore ? what type of food source does it eat Plant, meat of both ? 
if you define that for each animal, it'll make things much smoother to compare and work with. As you'll have several factors that can be used to specify your logic. </p>

<p>Also, your <code>EatingPreferences</code> you're treating it as an attack, and not for eating purpose which makes it a misleading naming.  </p>

<p>Naming convesion needs to be enforced by adding a prefix naming on each class that releated to another class. So, <code>EatingPreferences</code> would be <code>AnimalEatingPreferences</code> and <code>Size</code> would be <code>AnimalSize</code> ..etc. </p>

<p>Overall, I think you only need three classes that would serve your current context purpose, while having the ability to extend, add more logic to them. </p>

<p>First the <code>Enum</code>s : </p>

<pre><code>public enum AnimalType { Mammals, Birds, Reptiles, Amphibians, Fishes, Insects }
public enum AnimalName { Hyena, Lion }
public enum AnimalSize { Small, Medium, Big }
public enum AnimalDietType { Herbivore, Carnivore, Omnivore }
public enum AnimalFoodSource { Plant, Meat, Both }
</code></pre>

<p>these are just stored information, which we need an object to hold them (model), and a collection to gather them in one box (so it can be retrieved). Also, we will need a middle-ware class that defines the rules (surely each animal has some living rules), but the trick here, we want it to be extendable as we expect to have multiple unique rules for each animal and others might be shared. Finally, we need a container class that would be used to connect all of these objects. </p>

<p>So, we need : </p>

<ol>
<li>Model Class (Animal)</li>
<li>Collection Class (AnimalCollection)</li>
<li>Living Rules Class (AnimalSurvivalRole)</li>
<li>Container class (AnimalPark)</li>
</ol>

<p>To make things much easier to maintain, we will implement interfaces for some of the classes that I think it would be useful. an interface would implement a contract to the class and also would give you the ability to access its properties without using reflection (you'll see that in the below examples).</p>

<p>So, first we will implement the interfaces : </p>

<pre><code>public interface IAnimal
{
    AnimalType Type { get; }
    AnimalName Name { get; }
    AnimalSize Size { get; }
    AnimalDietType DietType { get;  }
    AnimalFoodSource FoodSource { get; }
    IAnimalSurvivalRole SurvivalRoles { get; }
}

public interface IAnimalSurvivalRole
{
    bool IsEdible { get; }
    bool IsKillable { get; }
}

public interface IAnimalCollection
{
    int Count { get; }
    void Clear();
    void Add(IAnimal animal);
    bool Remove(IAnimal animal);
    IEnumerable&lt;IAnimal&gt; GetAnimals();
}
</code></pre>

<p>the interface is a key that you want to define your requirement. Now, from these interfaces, we can implement their classes : </p>

<pre><code>public class Animal : IAnimal
{
    public AnimalType Type { get; set; }

    public AnimalName Name { get; set; }

    public AnimalSize Size { get; set; }

    public AnimalDietType DietType { get; set; }

    public AnimalFoodSource FoodSource { get; set; }

    public IAnimalSurvivalRole SurvivalRoles { get; set; }

    public bool IsDead { get; set; }

}
</code></pre>

<p><code>AnimalSurvivalRole</code> would contain the rules for each animal in order to survive either feeding or attacking or any other type that would be linked to animal survival (for instance, it's not only feeding or attacking each other, some other natural events would kill an animal like drowning, or fire ..etc). So, this class would cover all these things.</p>

<pre><code>// use this class to define the animal survival roles such as eating and battling to live.
public sealed class AnimalSurvivalRole : IAnimalSurvivalRole
{
    private readonly IAnimal _firstAnimal; 

    private readonly IAnimal _secondAnimal;

    public bool IsEdible =&gt; CanEat(_firstAnimal, _secondAnimal);

    public bool IsKillable =&gt; CanKill(_firstAnimal, _secondAnimal);

    public AnimalSurvivalRole(IAnimal first, IAnimal second)
    {
        _firstAnimal = first;
        _secondAnimal = second;
    }

    private bool CanEat(IAnimal first, IAnimal second)
    {
        return first.DietType != AnimalDietType.Herbivore &amp;&amp; second.DietType == AnimalDietType.Herbivore;
    }

    private bool CanKill(IAnimal first, IAnimal second)
    {
        // by your logic, if the animals are the same or one of them is bigger than the other, it should kill the other one
        return first.Size &gt; second.Size || first.Type == second.Type;
    }
}
</code></pre>

<p>For the time being, I used it as a comparable class to compare between two objects, it can be extended for other survival causes. </p>

<p>The <code>AnimalPark</code> class is used as collection and also as main class at the same time. This violates SOLID principle. You will need to implement a collection class that meant to only store animals objects only, all the storing validations should be inside this collection. </p>

<pre><code>public class AnimalCollection : IAnimalCollection, IEnumerable&lt;IAnimal&gt;
{
    private readonly List&lt;IAnimal&gt; _animals = new List&lt;IAnimal&gt;();

    public AnimalCollection() { }

    public AnimalCollection(IEnumerable&lt;IAnimal&gt; animals) { _animals.AddRange(animals); }

    public IAnimal this[int index] 
    {
        get =&gt; _animals[index];
        set =&gt; _animals[index] = value;
    }

    public int Count =&gt; _animals.Count;

    public void Clear() =&gt; _animals.Clear();

    public void Add(IAnimal animal)
    {
        if(animal == null) { throw new ArgumentNullException(nameof(animal)); }

        _animals.Add(animal);
    }

    public bool Remove(IAnimal animal)
    {
        if (animal == null) { throw new ArgumentNullException(nameof(animal)); }

        return _animals.Remove(animal);
    }

    public IEnumerable&lt;IAnimal&gt; GetAnimals() =&gt; _animals;

    /// &lt;summary&gt;Returns an enumerator that iterates through the collection.&lt;/summary&gt;
    /// &lt;returns&gt;An enumerator that can be used to iterate through the collection.&lt;/returns&gt;
    public IEnumerator&lt;IAnimal&gt; GetEnumerator() =&gt; _animals.GetEnumerator();

    IEnumerator IEnumerable.GetEnumerator() =&gt; GetEnumerator();

}
</code></pre>

<p><code>IEnumerator</code> is a way to give your class an ability to use <code>foreach</code> loop.</p>

<p>Now, use the <code>AnimalCollection</code> inside the <code>AnimalPark</code> as a storage, and make <code>AnimalPark</code> as main logic process (container) for all of them : </p>

<pre><code>public class AnimalPark
{
    private readonly AnimalCollection _animals = new AnimalCollection();

    public AnimalPark() { Initiate(); }

    private void Initiate()
    {
        // set here the animals in this park. 

        // Sample : this park has one lion and Hyena

        var lion = new Animal
        {
            Type = AnimalType.Mammals,
            Name = AnimalName.Lion,
            Size = AnimalSize.Big,
            DietType = AnimalDietType.Carnivore,

            FoodSource = AnimalFoodSource.Meat
        };

        var hyena = new Animal
        {
            Type = AnimalType.Mammals,
            Name = AnimalName.Hyena,
            Size = AnimalSize.Big,
            DietType = AnimalDietType.Carnivore,
            FoodSource = AnimalFoodSource.Meat
        };

        // Now set the SurvivalRoles
        lion.SurvivalRoles = new AnimalSurvivalRole(lion, hyena);
        hyena.SurvivalRoles = new AnimalSurvivalRole(hyena, lion);

        // add them to the animal storage
        _animals.Add(lion);
        _animals.Add(hyena);            
    }

    public IEnumerable&lt;IAnimal&gt; GetAnimals()
    {
        return _animals.GetAnimals();
    }

}
</code></pre>

<p>The <code>AnimalSurvivalRole</code> can be defined differently, but since it's not clear for me what you intent to do exactly, I left it inside the model as a view so you can use it to define rule for each animal or type of animal, or you can create another class role that would handle other animal roles. </p>

<p>Try to always categorize the code requriements, and choose a good naming convetion that would describe the object role clearely, even if is it going to be long, its better than having short description that ended you with (I'm just here, go figure!). For instance, You will notice that <code>IsDead</code> I've never used it, because i'm not sure what you meant by that exactly dead how ? if is it dead why still exists in the park at the first place ? these are some of the question that I thought about when I came across it. </p>
    </div>