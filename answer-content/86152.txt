<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code over-complicates the basic premise. The idea of having an ascending or descending element is right, but can be simplified further by just tracking maxima/minima, there is no need to track the actual index of the deepest pit.</p>

<p>If you identify peaks, and pits, and as you walk through the data, identify whether the current value increases the depth of the current pit, and increase the max if it does, then your code can be reduced to just a single check that identifies inflections, and another max/min check that compares depths.</p>

<pre><code>private static int deepest(int[] data) {

    if (data.length &lt; 1) {
        return 0;
    }

    int inflection = 0;
    int max = 0;
    int descent = 0;
    boolean ascending = true;
    for (int i = 1; i &lt; data.length; i++) {
        boolean goingup = data[i] == data[i - 1] ? ascending : data[i] &gt;= data[i - 1];
        if (goingup != ascending) {
            ascending = goingup;
            descent = ascending ? (data[inflection] - data[i - 1]) : 0;
            inflection = i - 1;
        }

        max = Math.max(max, Math.min(descent, data[i] - data[inflection]));
    }
    return max;
}
</code></pre>

<p>(<a href="http://ideone.com/ENJApk" rel="noreferrer">See this running with some tests in ideone</a>)</p>
    </div>