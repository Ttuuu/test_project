<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <ul>
  <li>This program reads 4 byte codepoints (in BIG ENDIAN) from a file strictly called "input.data" and creates another file called "ENCODED.data" with the relative encoding in UTF8.</li>
  </ul>
</blockquote>

<p>Needless to say, that's a weird way of storing code points. I know UTF-16, but UTF-32BE (just the code point in big endian form) is not widely used, although Python seems to use it to encode strings internally. Now that you know what this encoding is called, I wonder if you need to code this yourself or that you could have used a library.</p>

<pre><code>* This program reads 4 byte codepoints (in BIG ENDIAN) from a file strictly called "input.data" and creates another file called "ENCODED.data" with the relative encoding in UTF8.
</code></pre>

<p>That it reads 4 bytes at a time is really an implementation detail. Generally we don't create conversion applications that restrict themselves to specific files (or even files, to be honest).</p>

<pre><code>unsigned char bufferCP[4]; //Buffer used to store the codepoints
</code></pre>

<p>If you have to spell out what a variable means, then you're generally better off spelling it out in the variable name: <code>utf32be_buffer</code> would be a good variable name.</p>

<p>The value 4 doesn't have a meaning, which becomes a problem once you split the <code>main</code> method into functions (as you should).</p>

<pre><code>unsigned char bufferOut[6]
</code></pre>

<p>What about <code>utf8_buffer</code>?</p>

<pre><code>int elem = 0, bytesRead = 0;
</code></pre>

<p>Split the variable declaration to different lines. <code>elem</code> is also directly assigned, so assigning zero to it is completely unnecessary.</p>

<pre><code>unsigned char mask = 0x3F; //Mask used to keep bits interesting for analysis
</code></pre>

<p>This comment really begs the question of the reader: which bits are "interesting"?</p>

<pre><code>uint32_t codepoint = 0; //A codepoint must be an unsigned 32 bit integer
</code></pre>

<p>Utterly unnecessary comment. "must be" also begs the question: for this program or according to some kind of standard?</p>

<pre><code>//--------------------File-Reading--------------------
</code></pre>

<p>What about <code>read_into_buffer</code> instead of a comment?</p>

<pre><code>if (bytesRead == 4) { //A codepoint is ready to be managed              
</code></pre>

<p>Repeat of a literal, while <code>utf32be_buffer</code> is already assigned a size. Use that.</p>

<p>Again a comment that reads as if a method should be introduced. You can almost hear yourself defining them.</p>

<p>Finally, what happens if the file doesn't contain a multiple of 4 bytes? It seems like you're just removing the last bytes without warning or error.</p>

<pre><code>//Builds a codepoint from the buffer. Reads it in BIG ENDIAN.
</code></pre>

<p>There is the name, although I would simply use <code>convert_code_point()</code>.</p>

<pre><code>for(int j=3; j&gt;=0; j--) {
</code></pre>

<p>Another repeat of the same literal 4, but now disguised as a 3, i.e. 4 - 1. Great.</p>

<pre><code>codepoint &lt;&lt;= 8;
</code></pre>

<p>I actually use a constant (<code>Byte.SIZE</code>) in Java for this, but you can be excused for using 8 here, especially since this code should perform well.</p>

<pre><code>//Searches the position of the most significant bit
double logRes = (log(codepoint)/log(2)) + 1;
int bitPos = (int) logRes;
</code></pre>

<p>As already indicated, use bit ops for this. And a method please, <a href="https://stackoverflow.com/a/53184/589259">here</a> is an answer on StackOverflow for that.</p>

<pre><code>bufferOut[0] = (unsigned char) codepoint; //No need to manage this codepoint   
</code></pre>

<p>What is "managing" a code point? When I first read the comment I was afraid you were going to skip it. Fortunately, that's not the case.</p>

<pre><code>fwrite(bufferOut, 1, 1, out);
</code></pre>

<p>Just keep a variable of the number of bytes in the buffer and then write those in the end.</p>

<pre><code>} else if (bitPos &lt;= 32) {
</code></pre>

<p>We use zero based indexing in C-style languages. What is the chance that a significant bit is at position 32 according to you?</p>

<pre><code>bytesRead = 0; //Variable reset
</code></pre>

<p>Would never have guessed that without the comment, I admit. It also shows that the name of the variable is wrong: it represents the number of bytes in the buffer, not the bytes read from the file.</p>
    </div>