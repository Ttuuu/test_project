<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One completely different approach would be to use RxJava to abstract away any manual thread handling.
RxJava offers the class Observable. For our purpose here you can think of it as a stream of data that begins to emit values once you call <code>subscribe()</code> on it.
<code>Observable#onNext</code> gets called every time the next value gets emitted from the stream.
This way we can create two Observables from a stream of integers (100 for boss, 10 for sub) and arrange them in the desired way:</p>

<pre><code>public static void main(String[] args) throws InterruptedException {
    Observable&lt;Integer&gt; bossObservable = Observable.range(1, 100) // emit integers from 1 to 100
            .subscribeOn(Schedulers.io()) // choose thread pool to run on
            .doOnNext(i -&gt; System.out.println(Thread.currentThread() + " Boss " + i)); // gets executed for each
                                                                                        // value in the stream
    Observable&lt;Integer&gt; subObservable = Observable.range(1, 10) // emit integers from 1 to 10
            .subscribeOn(Schedulers.io()) // choose thread pool to run on
            .doOnNext(i -&gt; System.out.println(Thread.currentThread() + " Sub " + i)); // gets executed for each
                                                                                        // value in the stream

    subObservable.concatWith(bossObservable) // append bossObservable to subObservable
                                        // -&gt; bossObservable runs after subObservable has finished
            .repeat(2) // we repeat this two times, like the outer for loop in your solution
            .subscribe(); // this starts the execution

    while (true) {
        Thread.sleep(100); // keep main thread alive
    }
}
</code></pre>

<p>The example code uses <a href="https://search.maven.org/artifact/io.reactivex.rxjava2/rxjava/2.2.3/jar" rel="nofollow noreferrer">RxJava 2.2.3</a>.
As you can probably tell, the code is quite concise but also hard to grasp if you're not familiar with Rx, because the framework takes care of the thread handling.</p>

<p>If you want to learn more about reactive programming you can read the excellent introduction by Andre Staltz: <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" rel="nofollow noreferrer">https://gist.github.com/staltz/868e7e9bc2a7b8c1f754</a></p>
    </div>