<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview. Your program is a fun start to programming, and Python is a great way to learn. For the following topics, I'm going to trust your ability to google, but if you can't find the appropriate documentation leave a comment and I'll add some links.</p>

<h2>Avoid globals</h2>

<p>Sometimes globals can be useful, but more often they hinder a developer's ability to maintain and debug code. It's a better idea to group related variables together into a class. This applies to the following variables:</p>

<pre><code>items = ['backpack','deagle','stick','mushrooms']
stupid = 0
backpack = 0
deagle = 0
stick = 0
</code></pre>

<h2>Avoid stringly-typed objects</h2>

<p>These things:</p>

<pre><code>items = ['backpack','deagle','stick','mushrooms']
</code></pre>

<p>are strings. But in this case, it's not very good practice to handle them as strings until they need to be presented to the user. In other words, in this statement:</p>

<pre><code>if "mushrooms" in ch4:
</code></pre>

<p>What if you misspelled 'mushrooms'? You wouldn't know until halfway through a program run; in other words, string-typing hinders <em>static analysis</em>, among other problems. One solution to this is to have an enum: a kind of object that can take only one of a set of mutually exclusive values. In other words, an item can be only a backpack, or a deagle, or a stick, or a mushroom. Python IDEs are better able to perform static analysis on this, and programmers make fewer errors when following this strategy.</p>

<h2>Indenting</h2>

<p>For legibility, you should ensure that each additional level of indentation only introduces 3-4 characters - pick one and stick with it. This:</p>

<pre><code>    def items1():
            global items
</code></pre>

<p>is too far in for the comfort of most developers.</p>

<h2>These aren't assignments</h2>

<pre><code>    deagle == 0
    backpack == 0
    stick == 0
    stupid == 0
</code></pre>

<p>They're comparisons. Assignments need only one <code>=</code>.</p>

<h2>Input comparison</h2>

<p>This:</p>

<pre><code>if ch3 in ['y', 'Y']:
</code></pre>

<p>is more easily done by first converting the character to lowercase, and then comparing it to a single character; in other words:</p>

<pre><code>if ch3.lower() == 'y':
</code></pre>
    </div>