<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General style remarks</h3>

<ul>
<li><code>lst</code> is more of a Scheme idiom, in Common Lisp you don't eat vowels but write directly <code>list</code> if your variable is a list (to be honest, some CL standard functions have weird names too).</li>
<li><em>"Functional = Elegant"</em> is somewhat true, but don't let purity blind you into ignoring perfectly good alternative approaches; it is often reasonable to have a purely functional interface implemented with local mutable state, for example. Building a fresh list and reversing it is a pure functional way to implement map, but that's not how you implement an efficient map function.</li>
</ul>

<h3>Tail-call elimination</h3>

<p>For solution 1, you define a helper function; you can use a tail-recursive call if you add an accumulator parameter to hold the reversed result list. For example:</p>

<pre><code>(defun pos+helper (list result position)
  (if list
      (pos+helper (rest list)
                  (cons (+ (first list) position) result)
                  (1+ position))
      result))
</code></pre>

<p>Note however that Lisp being dynamic, it is possible that you can at a later point redefine <code>pos+helper</code> to be another function, which prevents the compiler to automatically transform it as a loop. Consider for example the case where you want to <code>trace</code> an existing function: the original function is likely to be instrumented by wrapping it into another function, and then the recursive call is calling the resulting wrapper. </p>

<p>Whether I compile the above function with <code>(optimize speed)</code> declaration or not, I obtain different outputs with <code>disassemble</code>. When speed is not optimized, the recursive call is effectively a CALL, which grows the stack but allows for a redefinition of <code>pos+helper</code>. A simpler example:</p>

<pre><code>(defun tester ()
  (sleep 2)
  (tester))

(ql:quickload :bordeaux-threads)
(bt:make-thread #'tester :name "tester")
</code></pre>

<p>I created a thread which calls <code>tester</code>, which contains a call to <code>sleep</code> to slow down the infinite recursion, to avoid stack overflows.</p>

<pre><code>USER&gt; (find "tester" (bt:all-threads) :test #'string= :key #'bt:thread-name)
#&lt;SB-THREAD:THREAD "tester" RUNNING {100CC049F3}&gt;
</code></pre>

<p>The thread is found in the list of all threads, which means it is alive and the function is effectively recursing infinitely. Now, if I redefine <code>tester</code>:</p>

<pre><code>(defun tester () :done)
</code></pre>

<p>Then the thread is stopped:</p>

<pre><code>USER&gt; (find "tester" (bt:all-threads) :test #'string= :key #'bt:thread-name)
NIL
</code></pre>

<p>This is obviously implementation dependant, but if I declare the function to be optimized for speed, no amount of redefinition changes the behaviour of the function under test.</p>

<p>You have better control of this if you define your helper function locally:</p>

<pre><code>(defun pos+ (list)
  (labels ((recurse (list result position)
             (if list
               (recurse (rest list)
                        (cons (+ (first list) position) result)
                        (1+ position))
               result)))
    (nreverse (recurse list nil 0))))
</code></pre>

<p>First, it hides the auxiliary function, which is after all an implementation detail; but most importantly, since the body of a function is <em>static</em> in the sense that you do not redefine parts of it at runtime, the compiler is able to infer that <code>recurse</code> is never going to change, and can do the tail-call elimination without additional hints (most compilers can do that easily, except on platforms like Java (ABCL) where this is not possible).</p>

<p>(opinion: tail-call elimination breaks the elegance of the purely functional approach by making you rearrange parameters to satisfy an implicit,  particular case where calls can be converted as jumps; in other words, this is a hack. In languages that mandates tail-call elimination, this is less of a hack, but not necessarily elegant either.)</p>

<p>The portable way to implement a loop is to write a loop or higher-level functions.</p>
    </div>