<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let us first review the code.</p>

<ul>
<li>Stacking <code>using</code>s will reduce the level of indentation.</li>
<li>The <code>Filter</code> of the <code>DirectorySearcher</code> can be passed to the constructor </li>
<li>If the expected result of the <code>FindAll()</code> call will be huge, you should consider to return only needed properties, by using this <a href="https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.directorysearcher.-ctor?view=netframework-4.8#System_DirectoryServices_DirectorySearcher__ctor_System_DirectoryServices_DirectoryEntry_System_String_System_String___" rel="nofollow noreferrer">overloaded constructor</a> of the <code>DirectorySearcher</code> class.</li>
<li>The <code>SearchResultCollection</code> returned by <code>DirectorySearcher.FindAll()</code> implements the <code>IDisposable</code> interface hence it should be enclosed in a <code>using</code> as well. The <a href="https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.directorysearcher.findall?view=netframework-4.8#remarks" rel="nofollow noreferrer">remarks section</a> of the documentation states: 

<blockquote>
  <p>Due to implementation restrictions, the SearchResultCollection class
  cannot release all of its unmanaged resources when it is garbage
  collected. To prevent a memory leak, you must call the Dispose method
  when the SearchResultCollection object is no longer needed.</p>
</blockquote></li>
</ul>

<p>Implementing some of this changes could look like so  </p>

<pre><code>DirectoryEntry root = GetDirectoryEntry();
using (var groups = root.Children.Find("OU=Sample Security Groups"))
using (var directory = groups.Children.Find("OU=Permissions"))
using (var searcher = new DirectorySearcher(directory, "filter condition"))
using (var results = searcher.FindAll())
{
    foreach (SearchResult result in results)
    {
        if (result != null)
        {
            using (var group = result.GetDirectoryEntry())
            {
                items.Add((string)group.Properties["sAMAccountName"].Value);
            }
        }
    }
}
</code></pre>

<hr>

<p>If you only need to get the <code>SamAccountName</code>'s of the groups a specific user is a member of you can use <code>UserPrincipal.FindByIdentity()</code> like so  </p>

<pre><code>UserPrincipal user = UserPrincipal.FindByIdentity(new PrincipalContext(ContextType.Domain, "domain", "username", "password"), IdentityType.SamAccountName, "loginUser");

foreach (GroupPrincipal group in user.GetGroups())
{
    Console.Out.WriteLine(group.SamAccountName);
}
</code></pre>
    </div>