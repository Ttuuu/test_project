<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall this is some very nicely written C, well done.  Some stuff I noted aside from @Morwenn's good points:</p>

<ul>
<li><p><strong>Portability</strong>: <code>&lt;mqueue.h&gt;</code> is a POSIX C library.  Unfortunately this restrains the platforms that you compile this for (I couldn't compile this on my Mac without some fiddling around).  There are two ways you could fix this:</p>

<ol>
<li>Include the header with your package and use that to compile with.  I'm not sure how portable that header is though. If it is portable then I would probably go with this option.</li>
<li>Rewrite your code using <code>&lt;fcntl.h&gt;</code>, <code>&lt;signal.h&gt;</code>, <code>&lt;sys/types.h&gt;</code>, and <code>&lt;time.h&gt;</code>.</li>
</ol></li>
<li><p><strong>Push your code</strong>:  Looking at your Makefile, you don't have some things that I would consider a necessity.  Going off of my own <a href="https://codereview.stackexchange.com/q/47188/27623">C Makefile boilerplate</a>, Here is some stuff I would change:</p>

<ol>
<li><p>Add more <code>CFLAGS</code>:</p>

<pre><code>CFLAGS = -Werror -Wall -Wextra -pedantic-errors -Wformat=2 -Wno-import -Wimplicit -Wmain -Wchar-subscripts -Wsequence-point -Wmissing-braces -Wparentheses -Winit-self -Wswitch-enum -Wstrict-aliasing=2 -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wnested-externs -Winline -Wdisabled-optimization -Wunused-macros -Wno-unused
</code></pre>

<p>These are all the flags that I <em>always</em> use for all of my projects.  Sometimes I use even more.  I would recommend that you take a look at all of the <a href="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html" rel="nofollow noreferrer">warning options</a> sometime and fine-tune them for your own needs.</p></li>
<li><p>Specify your compiler version.</p>

<pre><code>CC = gcc-4.9
</code></pre>

<p>Right now you are using whatever the OS has set for the default in its <code>PATH</code> variable.  This could lead to some compatibility problems, since earlier versions of a compiler obviously won't have support for later standards.  Which leads me to my next point...</p></li>
</ol></li>
<li><p><strong>Standards</strong>: You are using what appears to be the <code>-std=gnu89</code> as @Morwenn said.  <em>Please no</em>.  Those are 25 year old standards.  </p>

<p><img src="https://i.stack.imgur.com/oN37G.jpg" alt="enter image description here"></p>

<p>Your code should be updated for more modern standards.  <em>At a minimum</em>, I think you should be using <code>-std=gnu99</code>, but why not go the extra mile and use the <code>-std=gnu11</code> standards?</p></li>
<li><p><strong>Stress-test, and then some</strong>: write some code to test that your code works in a variety of cases.  Push your code to it's breaking point.  Find out what makes it break and fix it.  This is how you develop "bullet-proof" software.  You may have to incorporate some <a href="https://en.wikipedia.org/wiki/Fuzz_testing" rel="nofollow noreferrer">fuzzing</a> to fully test what your code can handle.</p></li>
</ul>

<hr>

<p>Some other more minor stuff:</p>

<ul>
<li><p>Is there a reason that you need a whole <code>struct</code> for one value?</p>

<blockquote>
<pre><code>typedef struct
{
    int y;
} MQ_FARMER_REQUEST_MESSAGE;
</code></pre>
</blockquote>

<p>Could this not work in its place?</p>

<pre><code>typedef int MQ_FARMER_REQUEST_MESSAGE;  // just needs shorthand typename
</code></pre></li>
<li><p>Your naming conventions aren't what I would consider normal.  Structure names are usually written in PascalCase.</p></li>
<li><p>Always declare your variables within your <code>for</code> loops.</p>

<pre><code>for (int i = 0; i &lt; NROF_WORKERS; ++i)
</code></pre>

<p><a href="https://softwareengineering.stackexchange.com/a/56590/94014">This is universally considered a good practice</a>, and is the main reason (I think) that you should be using the C99 standards (since the C89 syntax doesn't support it).</p></li>
<li><p>You <code>return ((re * re) + (im * im))</code> from your <code>complex_dist()</code> function.  I would use the <a href="http://www.cplusplus.com/reference/cmath/pow/" rel="nofollow noreferrer"><code>pow()</code></a> function from <code>&lt;math.h&gt;</code> (there are some other places where I would use this in your code as well).  Why?  Because the function handles errors in a way that simply multiplying two values together couldn't.  Please note however, that <a href="https://stackoverflow.com/questions/2940367/what-is-more-efficient-using-pow-to-square-or-just-multiply-it-with-itself">this will result in slightly less efficient code</a>.</p></li>
<li><p>The variable names in your <code>mandelbrot_point()</code> could maybe be better.  If you can't find more suitable names, then more documentation is definitely needed.</p></li>
<li><p>You may want to consider using <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">Doxygen</a> to generate documentation your code.  It's what I use and I helps me with commenting stuff a lot.</p></li>
<li><p>From <em>Code Complete, 2nd Edition</em>, p. 761:</p>

<blockquote>
  <p><strong>Use only one data declaration per line.</strong></p>
  
  <p>It’s easier to modify declarations because each declaration is self-contained.</p>
  
  <p>[...]</p>
  
  <p>It’s easier to find specific variables because you can scan a single
  column rather than reading each line. It’s easier to find and fix
  syntax errors because the line number the compiler gives you has 
  only one declaration on it.</p>
</blockquote></li>
<li><p>You don't have to return <code>0</code>/<code>EXIT_SUCCESS</code> at the end of <code>main()</code>, just like you wouldn't bother putting <code>return;</code> at the end of a <code>void</code>-returning function. The C standard  knows how frequently this is used, and lets you not bother.</p>

<blockquote>
  <p><strong>C99 &amp; C11 §5.1.2.2(3)</strong></p>
  
  <p>...reaching the <code>}</code> that terminates the <code>main()</code> function returns a
  value of <code>0</code>.</p>
</blockquote></li>
<li><p>Prefer <a href="http://www.cplusplus.com/reference/cstdio/snprintf/" rel="nofollow noreferrer"><code>snprintf()</code></a> to <code>sprintf()</code>.</p></li>
</ul>

<hr>

<p><sub>There might be more stuff I missed, but this is all I think I could review without actually compiling the code and running some tests.</sub></p>
    </div>