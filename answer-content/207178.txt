<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data structure</h2>

<p>Why are you using a <code>LinkedList&lt;char&gt;</code>?  Linked lists involve a lot of overhead for each node.  You know exactly how long the result should be, so why not write to a <code>char[]</code> array?</p>

<p>Actually, you may want to consider returning the result as a <code>char[]</code> rather than as a <code>string</code>.  A security-sensitive program may wish to wipe the contents of the secret by overwriting it with NUL bytes, rather than waiting for the garbage collector to clean up the string.</p>

<h2>Flow control</h2>

<p><code>goto</code> should be avoided, and its use is not justified here.</p>

<p>The loop is a bit clumsy, referring to <code>counter</code> all over the place.</p>

<pre><code>char[] chars = new char[length];
using (var rng = new RNGCryptoServiceProvider())
{
    for (int counter = 0; counter &lt; length; )
    {
        rng.GetBytes(buffer);
        var nextChar = (char)buffer[0];
        if ((nextChar &gt;= '0' &amp;&amp; nextChar &lt;= '9') ||
            (nextChar &gt;= 'A' &amp;&amp; nextChar &lt;= 'Z') ||
            (nextChar &gt;= 'a' &amp;&amp; nextChar &lt;= 'z'))
        {
            chars[counter++] = nextChar;
        }
    }
    return new string(chars);
}
</code></pre>

<h2>Algorithm</h2>

<p>The algorithm is rather inefficient:</p>

<ul>
<li>It reads a byte at a time from the random number generator.  <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rngcryptoserviceprovider.getbytes#System_Security_Cryptography_RNGCryptoServiceProvider_GetBytes_System_Byte___" rel="noreferrer"><code>.GetBytes()</code> is thread safe</a>, so each call should incur some synchronization overhead.</li>
<li>It throws away most of the bytes it reads, keeping each byte with a probability of <span class="math-container">\$62 \over 256\$</span>.</li>
</ul>

<p>A smarter approach would be to fetch a bit more than <span class="math-container">\${3 \over 4} \mathrm{length}\$</span> random bytes, <a href="/questions/tagged/base64" class="post-tag" title="show questions tagged 'base64'" rel="tag">base64</a>-encode it, and discard just the resulting <code>+</code> and <code>/</code> characters.</p>
    </div>