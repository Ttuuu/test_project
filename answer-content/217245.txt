<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The function <code>check_winner()</code> does not need <code>global move_count</code>.  Using <code>global</code> is code smell, avoid if at all possible, which tends to be always.  But in this case it is completely unnecessary, as <code>move_count</code>, like <code>board</code>, is already accessible in <code>check_winner()</code>.</p>

<p><code>winning_list</code> is constructed every time <code>check_winner()</code> is called.  It does not persist from one call to the next, so <code>new_list = winning_list</code> and the comment immediately above it should be removed.</p>

<hr>

<p>The statement <code>move = int(input(...))</code> can crash if the user enters invalid input.  Even if a valid integer is given, the integer could be outside the valid range, like <code>42</code>, which will cause when <code>board[move]</code> is evaluated.  Place user input in a <code>try ... except</code> statement, inside a loop, and don’t let the program continue until valid input has been given.</p>

<hr>

<p>You have a game loop that handles two turns (a move by both players) each pass through the loop.  While this does work, it will paint you into a corner in subsequent programs.  3 or more players is going to make writing the game loop much harder.</p>

<p>It is usually simpler to handle one turn (a move by only one player), in each pass through the loop.  At the end of the loop, the “current player” is incremented, wrapping around to the first player when necessary.  With only 2 players, this alternates between them.  More advanced games may require skipping player when a “lose a turn” move is made.  Other games may even reverse the direction of play mid game.  All of these would be horrible to try to write the game loop for if each pass through the loop tried to handle all player moves in one pass.</p>

<hr>

<p>When the game loop is change to handle only a single move at each pass, it is much easier to handle the “game over” condition.  A <code>while game_is_running</code> loop is all that is required.  Or, for tic-tac-toe, you could use:</p>

<pre><code>for move_count in range(9):
    # moves made here
    # break if someone wins
else:
    print("You Tied")
</code></pre>

<p>The <code>else:</code> clause of a <code>for</code> loop only executes if the loop finishes without executing <code>break</code>, so after 9 moves with no winner, it is a tie game.</p>

<p>Using <code>sys.exit()</code> to stop the interpreter on a “game over” condition is a bad idea.  It works here, but it makes test code impossible to write, because the program can kill the interpreter, and the test code can’t stop that.</p>
    </div>