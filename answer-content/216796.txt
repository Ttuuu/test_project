<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not certain how you even got this to work.  The decoration of the class occurs when the class is declared, not when an instance of the class is created, so setting of <code>log_file</code> will not have happened by the <code>Engine</code> constructor.  You must have also declared the <code>log_file</code> elsewhere, and that is what is being used to decorate the class methods.</p>

<p>If I understand what you want to do properly, you will have multiple <code>molecule</code> instances, which each have their own <code>log_file</code>.  During a <code>PSI4</code> method, you want the logger (which was used to decorate the class) to reach into the instance's data, retrieving the <code>molecule</code>, and use the molecule's <code>log_file</code>.</p>

<p>Fortunately, the instance is passed as the first argument <code>self</code> to the wrapped method.  You can use that to retrieve <code>self.molecule</code>, from which <code>self.molecule.log_file</code> can be found.  Except the first argument is not always <code>self</code> (static and class methods), and <code>self.molecule</code> doesn't exist until partway through  the constructor's execution.  So the method decorator better check if the first argument exists, and whether it has a <code>molecule</code> member.</p>

<pre><code>from functools import wraps

def all_methods(decorator):
    @wraps(decorator)
    def decorate(cls):
        for attr in cls.__dict__:
            if callable(getattr(cls, attr)):
                setattr(cls, attr, decorator(getattr(cls, attr)))
        return cls
    return decorate

def method_logger(method):
    @wraps(method)
    def wrapper(*args, **kwargs):
        log_file = 'nowhere'
        if len(args) &gt;= 1 and hasattr(args[0], 'molecule'):
        #if len(args) &gt;= 1 and isinstance(args[0], PSI4):
            log_file = args[0].molecule.log_file
        print(f"Logging {method.__name__}(...) to {log_file}")
        return method(*args, **kwargs)
    return wrapper

class Molecule:
    def __init__(self, log_file):
        self.log_file = log_file

@all_methods(method_logger)
class PSI4:
    def __init__(self, molecule):
        self.molecule = molecule

    def f(self): pass
    def g(self): pass

    @staticmethod
    def sm(): pass

    @classmethod
    def cm(cls): pass

e1 = PSI4(Molecule('file1'))
e2 = PSI4(Molecule('file2'))

e1.f()
e2.g()
PSI4.sm()
PSI4.cm()
</code></pre>

<p>Output:</p>

<pre><code>Logging __init__(...) to nowhere
Logging __init__(...) to nowhere
Logging f(...) to file1
Logging g(...) to file2
Logging sm(...) to nowhere
Logging cm(...) to nowhere
</code></pre>

<p>Instead of checking for <code>hasattr(args[0], 'molecule')</code>, I'd love to use <code>isinstance(args[0], PSI4)</code>, but <code>args[0]</code> is a <code>PSI4</code> instance during the <code>PSI4.__init__()</code> call, but since the constructor hasn't run yet, <code>self.molecule</code> is still unassigned, even though the type of the instance is correct.</p>
    </div>