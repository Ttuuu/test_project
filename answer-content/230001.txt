<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've written this in python2 because the question is posed in python2. It is advised that users switch over to python3, as it is reaching <a href="https://pythonclock.org/" rel="nofollow noreferrer">end-of-life at the end of 2019.</a> </p>

<h1>The algorithm</h1>

<p>I don't see anything really glaring as far as the algorithm is concerned. The major edge case I can see is with lists/strings of length 1, but you handle that case fine</p>

<h1>Pre-allocating your matrix</h1>

<p>Without trying to use something like <code>numpy</code>, your pre-allocation step can be simplified a bit. You iterate twice over the whole list, once to fill it with zeros, and once over your respective ranges <code>n</code> and <code>m</code>. The <code>n</code> loop can be done with a simple slice assignment:</p>

<pre class="lang-py prettyprint-override"><code># use xrange for initialization here
# that way you aren't allocating a list into memory
L = [[0] * (n + 1) for i in xrange(m + 1)]

# Use a slice to assign the first row
# with a range, since that assigns a list to slice
L[0][:] = range(n + 1)

# then you only have one other for loop to do
# again, just use xrange here
for i in xrange(m + 1):
    L[i][0] = i

</code></pre>

<h1><code>i</code> and <code>j</code></h1>

<p>I'm not sure the following step really does anything and is necessary:</p>

<pre class="lang-py prettyprint-override"><code>i = m
j = n
</code></pre>

<p>Furthermore, the <code>while</code> loop is more pythonic if you rely on the truthiness of nonzero integers:</p>

<pre class="lang-py prettyprint-override"><code>while m and n:
    # do things
</code></pre>

<h1><code>while</code> loop</h1>

<p>There are continuous index lookups. While lookups by index are fast, doing them over and over impairs readability, even if the penalty incurred is minor </p>

<pre class="lang-py prettyprint-override"><code>while m and n:
     current, back_y, back_x, back_both = L[m][n], L[m][n-1], L[m-1][n], L[m-1][n-1]
     back = min(back_y, back_x, back_both)
     # rest of loop
</code></pre>

<p>Now you can use these as your placeholders for your if logic</p>

<pre class="lang-py prettyprint-override"><code>while m and n:
    current, back_y, back_x, back_both = L[m][n], L[m][n-1], L[m-1][n], L[m-1][n-1]
    back = min(back_y, back_x, back_both)

    if back == back_both:
        if back == current:
            edits.append('NOOP')
        elif back == current - 1:
            edits.append('SUBST')
        m -= 1
        n -= 1

    elif back == back_y:
        edits.append('INSERT')
        n -= 1

    elif back == back_x:
        edits.append('DELETE')
        m -= 1
</code></pre>

<h1>Timing</h1>

<p>Looking at the timing differences between the two:</p>

<h2>original</h2>

<pre class="lang-py prettyprint-override"><code>python -m timeit -s 'from otherfile import edit_distance, revised_edit; x = range(4); y = range(3,7)' 'edit_distance(x, y)'
10000 loops, best of 3: 29.3 usec per loop
</code></pre>

<h2>revised</h2>

<pre class="lang-py prettyprint-override"><code>python -m timeit -s 'from otherfile import edit_distance, revised_edit; x = range(4); y = range(3,7)' 'revised_edit(x, y)'
100000 loops, best of 3: 10.1 usec per loop
</code></pre>

<p>A 65% speedup for small lists. Let's see about (relatively) larger ones</p>

<h2>original</h2>

<pre class="lang-py prettyprint-override"><code>python -m timeit -s 'from otherfile import edit_distance, revised_edit; x = range(400); y = range(300,700)' 'edit_distance(x, y)'
10 loops, best of 3: 152 msec per loop
</code></pre>

<h2>revised</h2>

<pre class="lang-py prettyprint-override"><code>python -m timeit -s 'from otherfile import edit_distance, revised_edit; x = range(400); y = range(300,700)' 'revised_edit(x, y)'
1000 loops, best of 3: 1.31 msec per loop
</code></pre>

<p>The difference is starting to diverge, two entire orders of magnitude here. Whether or not you would use this on large lists is I suppose an implementation detail, but worth a look. Not to imply that a 400 element list is big, but it's an improvement for sure.</p>

<p>The timing does <em>not</em> include the time required to reverse <code>edits</code> using a <code>edits[::-1]</code> because that is going to be a constant, and looking at slicing a 400 element list in this way, the time is insignificant compared to the rest of the algorithm (<code>1000000 loops, best of 3: 0.967 usec per loop</code> for <code>range(400)</code>, if you were curious).</p>

<h1><code>return edit</code></h1>

<p>You never return <code>edits</code>! <code>print</code> does not return. It's also advisable to change <code>print val</code> to <code>print(val)</code>, as the latter is portable across python 2 and 3, and it's recommended you be on python3 already anyways. So at the end of your function, be sure to include:</p>

<pre class="lang-py prettyprint-override"><code>    return edits[::-1]
</code></pre>
    </div>