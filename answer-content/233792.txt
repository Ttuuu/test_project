<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the remarks by Ry-, it is good practice to keep for loops trivial. Trivial in this context means <code>for(int i=0; i&lt;n; i++)</code>. This is the purest and most readable form of for loop. </p>

<ul>
<li>It is praxis to always iterate from 0 to n whenever possible, since numbers start with 0 and arrays in C use zero-indexing.</li>
<li>Downcounting for loops or for loops with complex condition/iteration expressions are harder to read.</li>
<li>(<em>Advanced</em>) Up-counting, simple loops are more likely to be data cache-friendly than other loops.</li>
</ul>

<p>We can move the complexity inside the for loop body instead (I modified the code posted by Ry-):</p>

<pre><code>#include &lt;stdio.h&gt;

static void print_star_line (int count)
{
  for (int i=0; i&lt;count; i++)
  {
    putchar('*');
  }
  putchar('\n');
}

int main (void)
{
  int n = 5;

  for(int i=0; i&lt;n; i++)
  {
    print_star_line(i+1);
  }
  for(int i=0; i&lt;n; i++)
  {
    print_star_line(n-i-2);
  }

  return 0;
}
</code></pre>

<p>Now all loops are trivial and easy to read, the complexity lies in the expression passed on to the function instead.</p>

<hr>

<p>Note that this code also places the <code>int</code> declarations inside the for loop, which is how code should be written in standard C. </p>

<p>If your source of learning is hopelessly outdated, someone might teach you to use the 30 years old, 20 years obsolete "C90" standard, which doesn't allow this. If so, you need a newer source of learning.</p>

<hr>

<p>The variable name <code>n</code> is fine though vague. It is common style to use <code>n</code> or a <code>_N</code> suffix when counting something.</p>

<p>Similarly, <code>i</code> stands for <em>iterator</em> and is the industry standard name for a loop iterator. <code>j</code> means nothing, it's just the letter that follows <code>i</code> in the alphabet, so it is commonly used when nesting loops.</p>
    </div>