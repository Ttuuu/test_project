<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Turn on <code>Option Explicit</code>. From the menu at the top Tools&gt;Option&gt;Editor tab&gt;Code Settings group&gt;Require Variable Declaration check box. Make sure that is checked. This mandates that you use <code>Dim foo as Bar</code> before you can use any variables and will save you needless headaches. Why? <code>myRange</code> is not declared anywhere and a simple typo can mean a half hour or more debugging to find that typo. This will add <code>Option Explicit</code> automatically to any <em>new</em> code modules. It's on you however to add it any existing code modules.</p>

<hr>

<p>Multiple variables declared on one line. <code>Dim i, iLastSource, iRowTarget, count As Long</code> only <code>count</code> is declared as a <code>Long</code> type. The rest are <code>Variant</code>. Likewise for <code>Dim wsSource, wsTarget As Worksheet</code> only wsTarget has the type of <code>Worksheet</code>, <code>wsSource</code> if of type <code>Variant</code>. Fix this by declaring each variable on its own line. Also declare them just before you use them. This makes refactoring easier and avoids unused variables.</p>

<hr>

<p>Your Stig Jan worksheet isn't created in the click event which means it's available at design time. Reference that worksheet by using the <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.worksheet.codename" rel="nofollow noreferrer">Worksheet.CodeName property</a>. In the VBIDE under View&gt;Properties Window (Hotkey: <code>F4</code>). Rename the CodeName, shown in properties window as (Name) property, to a descriptive name. I've rename it to StigJan.</p>

<p><a href="https://i.stack.imgur.com/b3TmJ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/b3TmJ.png" alt="enter image description here"></a></p>

<p>Then you can reference that worksheet directly. This way if the name of the worksheet changes your code won't break.</p>

<p><a href="https://i.stack.imgur.com/aH7qP.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/aH7qP.png" alt="enter image description here"></a></p>

<hr>

<p>Hungarian notation isn't needed. Because you have your variables declared with a type <code>As Worksheet</code> you don't need the <code>ws</code> prefix. Place your cursor on a variable name and from the menu at the top Edit&gt;Quick Info (Hotkey: <code>Ctrl+I</code>) you can display the variables type.</p>

<p><a href="https://i.stack.imgur.com/FTTrq.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/FTTrq.png" alt="enter image description here"></a></p>

<hr>

<p>Your <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/fornext-statement" rel="nofollow noreferrer">For ... Next statement</a> logic can be simplified. You're looping with the counter <code>i</code> but within that loop setting a <code>cell</code> variable. This is a candidate for a <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/for-eachnext-statement" rel="nofollow noreferrer">For Each ... Next statement</a>.</p>

<pre><code>For i = 36 To iLastSource
    Dim cell As Worksheet
    Set cell = .Cells(i, 4)
</code></pre>

<p>Becomes the code below. This clarifies the intent that you're looping through each cell in the area.</p>

<pre><code>Dim checkArea As Range
Set checkArea = source.Range(source.Cells(36, 4), source.Cells(iLastSource, 4))
Dim checkCell As Range
For Each checkCell In checkArea
</code></pre>

<p>Once you've done that the next step is to consolidate the if checks. <code>cell.Font.Bold = False</code> can be rewritten as <code>Not cell.Font.Bold</code>. Combine that into a single check with the value check of the cell below it.</p>

<pre><code>If cell.Font.Bold = False Then
    If cell.Value = "Fælles" Then
</code></pre>

<p>Becomes</p>

<pre><code>If Not checkCell.Font.Bold And checkCell.Value = "Fælles" Then
</code></pre>

<p>The body within the If statement can then be reviewed. The parts that change are <code>"STIGS "</code>, <code>"A"</code>, <code>"H"</code>, <code>"D"</code>. </p>

<pre><code>cell.Offset(, 1).Value = "STIGS " &amp; cell.Offset(, 1).Value
wsTarget.Range("A" &amp; iRowTarget &amp; ":H" &amp; iRowTarget).Value = .Range("A" &amp; i &amp; ":H" &amp; i).Value
wsTarget.Range("D" &amp; iRowTarget).ClearContents
iRowTarget = iRowTarget + 1
count = count + 1
</code></pre>

<p>We extract that into its own dedicated Sub and supply the arguments that let it requires. The parameters <code>targetRow</code>, and <code>copiedRowCount</code> have the <code>ByRef</code> modifier because we want any changes to be reflected in the calling member after this Sub finishes.</p>

<pre><code>Private Sub UpdateOffsetCellAndClearContents(ByVal checkCell As Range, _
                                                ByVal sourceWorksheet As Worksheet, _
                                                ByVal targetWorksheet As Worksheet, _
                                                ByRef targetRow As Long, _
                                                ByVal leftTargetColumn As Variant, _
                                                ByVal rightTargetColumn As Variant, _
                                                ByVal columnOfCellToClear As Variant, _
                                                ByVal offsetPrefixValue As String, _
                                                ByRef copiedRowCount As Long)
    checkCell.Offset(ColumnOffset:=1).Value = offsetPrefixValue &amp; " " &amp; checkCell.Offset(ColumnOffset:=1).Value

    Dim destinationArea As Range
    Set destinationArea = targetWorksheet.Range(targetWorksheet.Cells(targetRow, leftTargetColumn), targetWorksheet.Cells(targetRow, rightTargetColumn))
    Dim sourceArea As Range
    Set sourceArea = sourceWorksheet.Range(sourceWorksheet.Cells(checkCell.Row, leftTargetColumn), sourceWorksheet.Cells(checkCell.Row, rightTargetColumn))
    destinationArea.Value2 = sourceArea.Value2

    targetWorksheet.Cells(targetRow, columnOfCellToClear).ClearContents

    targetRow = targetRow + 1
    copiedRowCount = copiedRowCount + 1
End Sub
</code></pre>

<p>The call sites where this is used.</p>

<pre><code>UpdateOffsetCellAndClearContents checkCell, source, target, targetRow, "A", "H", "D", "STIGS ", count
... 
UpdateOffsetCellAndClearContents checkCell, source, target, targetRow, "A", "H", "D", "STIG ", count
...
UpdateOffsetCellAndClearContents checkCell, source, target, targetRow, "K", "R", "N", "STIGS ", count
...
UpdateOffsetCellAndClearContents checkCell, source, target, targetRow, "K", "R", "N", "STIG ", count
</code></pre>

<p>Now if/when you need to make an update to the logic you change it within the Sub and all sites where it's called are now updated.</p>

<hr>

<p>Instead of <code>If cell.Value = "Fælles" Or cell.Value = "Lagt Ud" Then</code> to bold the font or <code>If myCell Like "*STIG*" Then</code> to color a cells interior use conditional formatting. That way you set it for the entire range and it will automatically be applied whenever the cell changes. For their respective parts I came up with the below for bolding and </p>

<pre><code>Private Sub AddBoldConditionalFormattingTo(ByVal formatArea As Range, ParamArray values())
    If formatArea.FormatConditions.count &gt; 0 Then
        formatArea.FormatConditions.Delete
    End If

    Dim topLeftAddress As String
    topLeftAddress = formatArea.Cells(1, 1).Address(False, False)
    Dim orArguments As String
    orArguments = topLeftAddress &amp; "=""" &amp; Join(values, """," &amp; topLeftAddress &amp; "=""") &amp; """"
    Dim formulaForTopLeftCell As String
    formulaForTopLeftCell = "=OR(" &amp; orArguments &amp; ")"

    Dim addedCondition As FormatCondition
    Set addedCondition = formatArea.FormatConditions.Add(XlFormatConditionType.xlExpression, Formula1:=formulaForTopLeftCell)
    addedCondition.Font.Bold = True
End Sub

Private Sub AddInteriorColorConditionalFormattingTo(ByVal formatArea As Range, ByVal interiorColor As Long, ByVal valueToSearchFor As String)
    If formatArea.FormatConditions.count &gt; 0 Then
        formatArea.FormatConditions.Delete
    End If

    Dim formulaForTopLeftCell As String
    formulaForTopLeftCell = "=NOT(ISERROR(SEARCH(""" &amp; "STIG" &amp; """," &amp; formatArea.Cells(1, 1).Address(False, False) &amp; ")))"

    Dim addedCondition As FormatCondition
    Set addedCondition = formatArea.FormatConditions.Add(XlFormatConditionType.xlExpression, Formula1:=formulaForTopLeftCell, TextOperator:=XlContainsOperator.xlContains)
    addedCondition.Interior.Color = interiorColor
End Sub
</code></pre>

<p>Their respective call sites as below</p>

<pre><code>AddBoldConditionalFormattingTo checkArea, "Fælles", "Lagt Ud"
</code></pre>

<p>and </p>

<pre><code>AddInteriorColorConditionalFormattingTo target.Range("A36:S1000"), "STIG", RGB(255, 220, 220)
</code></pre>

<hr>

<p>Static cell ranges. <code>Range("K76")</code> will break whenever a row above or column to the left is inserted/deleted, as will <code>Range("A36:S1000")</code>. Make these named ranges and reference them through the named ranges because named ranges don't break with insertions/deletions. I have no clue what these cells represent and can't begin to offer a suggestion.</p>

<hr>

<p>Magic numbers. <code>36</code> has what significance? It's in the code for some reason. Why is it there? Use a name to describe why its there and/or its siginificance. If this number will never ever change convert it to a <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/const-statement" rel="nofollow noreferrer">Const statement</a> with a descriptive name like <code>Const StartRow As Long = 36</code>. If it may vary at run-time determine its value and assign it </p>

<pre><code>dim startRow As Long
startRow = source.Cells(1,4).End(xlDown).Row + 1
</code></pre>

<hr>

<p>The refactored code below reflect these changes</p>

<pre><code>Option Explicit

Private Sub CommandButton1_Click()
    Dim source As Worksheet
    Set source = StigJan
    Dim lastSourceRow As Long
    lastSourceRow = source.Cells(Rows.count, 1).End(xlUp).Row

    Dim target As Worksheet
    Set target = LauraJan

    Dim targetRow As Long
    targetRow = target.Cells(Rows.count, 1).End(xlUp).Row + 1

    Const StartRow As Long = 36

    Dim count As Long
    Dim checkArea As Range
    Set checkArea = source.Range(source.Cells(StartRow, 4), source.Cells(lastSourceRow, 4))
    Dim checkCell As Range
    For Each checkCell In checkArea
        If Not checkCell.Font.Bold And checkCell.Value = "Fælles" Then
            UpdateOffsetCellAndClearContents checkCell, source, target, targetRow, "A", "H", "D", "STIGS ", count
        End If

        If Not checkCell.Font.Bold And checkCell.Value = "Lagt Ud" Then
            UpdateOffsetCellAndClearContents checkCell, source, target, targetRow, "A", "H", "D", "STIG ", count
        End If
    Next
    AddBoldConditionalFormattingTo checkArea, "Fælles", "Lagt Ud"

    targetRow = target.Range("K76").End(xlUp).Row + 1
    Set checkArea = source.Range(source.Cells(StartRow, 14), source.Cells(lastSourceRow, 14))
    For Each checkCell In checkArea
        If Not checkCell.Font.Bold And checkCell.Value = "Fælles" Then
            UpdateOffsetCellAndClearContents checkCell, source, target, targetRow, "K", "R", "N", "STIGS ", count
        End If

        If Not checkCell.Font.Bold And checkCell.Value = "Lagt Ud" Then
            UpdateOffsetCellAndClearContents checkCell, source, target, targetRow, "K", "R", "N", "STIG ", count
        End If
    Next
    AddBoldConditionalFormattingTo checkArea, "Fælles", "Lagt Ud"

    AddInteriorColorConditionalFormattingTo target.Range("AdequatelyNamedArea"), "STIG", RGB(255, 220, 220)

    MsgBox "Done : " &amp; count &amp; " rows copied"
End Sub

Private Sub UpdateOffsetCellAndClearContents(ByVal checkCell As Range, _
                                                ByVal sourceWorksheet As Worksheet, _
                                                ByVal targetWorksheet As Worksheet, _
                                                ByRef targetRow As Long, _
                                                ByVal leftTargetColumn As Variant, _
                                                ByVal rightTargetColumn As Variant, _
                                                ByVal columnOfCellToClear As Variant, _
                                                ByVal offsetPrefixValue As String, _
                                                ByRef copiedRowCount As Long)
    checkCell.Offset(ColumnOffset:=1).Value = offsetPrefixValue &amp; " " &amp; checkCell.Offset(ColumnOffset:=1).Value

    Dim destinationArea As Range
    Set destinationArea = targetWorksheet.Range(targetWorksheet.Cells(targetRow, leftTargetColumn), targetWorksheet.Cells(targetRow, rightTargetColumn))
    Dim sourceArea As Range
    Set sourceArea = sourceWorksheet.Range(sourceWorksheet.Cells(checkCell.Row, leftTargetColumn), sourceWorksheet.Cells(checkCell.Row, rightTargetColumn))
    destinationArea.Value2 = sourceArea.Value2

    targetWorksheet.Cells(targetRow, columnOfCellToClear).ClearContents

    targetRow = targetRow + 1
    copiedRowCount = copiedRowCount + 1
End Sub

Private Sub AddBoldConditionalFormattingTo(ByVal formatArea As Range, ParamArray values())
    If formatArea.FormatConditions.count &gt; 0 Then
        formatArea.FormatConditions.Delete
    End If

    Dim topLeftAddress As String
    topLeftAddress = formatArea.Cells(1, 1).Address(False, False)
    Dim orArguments As String
    orArguments = topLeftAddress &amp; "=""" &amp; Join(values, """," &amp; topLeftAddress &amp; "=""") &amp; """"
    Dim formulaForTopLeftCell As String
    formulaForTopLeftCell = "=OR(" &amp; orArguments &amp; ")"

    Dim addedCondition As FormatCondition
    Set addedCondition = formatArea.FormatConditions.Add(XlFormatConditionType.xlExpression, Formula1:=formulaForTopLeftCell)
    addedCondition.Font.Bold = True
End Sub

Private Sub AddInteriorColorConditionalFormattingTo(ByVal formatArea As Range, ByVal interiorColor As Long, ByVal valueToSearchFor As String)
    If formatArea.FormatConditions.count &gt; 0 Then
        formatArea.FormatConditions.Delete
    End If

    Dim formulaForTopLeftCell As String
    formulaForTopLeftCell = "=NOT(ISERROR(SEARCH(""" &amp; valueToSearchFor &amp; """," &amp; formatArea.Cells(1, 1).Address(False, False) &amp; ")))"

    Dim addedCondition As FormatCondition
    Set addedCondition = formatArea.FormatConditions.Add(XlFormatConditionType.xlExpression, Formula1:=formulaForTopLeftCell, TextOperator:=XlContainsOperator.xlContains)
    addedCondition.Interior.Color = interiorColor
End Sub
</code></pre>

<hr>
    </div>