<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, indent and use whitespace consistently. I find using braces always a good style too.</p>

<p>Do not pollute the global namespace: wrap everything in a function that keeps the variables local to a smaller scope. Also use <a href="https://stackoverflow.com/questions/1335851/what-does-use-strict-do-in-javascript-and-what-is-the-reasoning-behind-it"><code>"use strict";</code></a> and test in Firefox as it is one of the least lenient browsers in strict mode:</p>

<pre><code>(function ourAlarmCode () {
    "use strict";
    var sound = ...
    // all your code goes here
}());
</code></pre>

<p>Use consistent variable naming - usually <code>CamelCase</code> signifies a constructor, thus <code>on</code> instead of <code>On</code>, since it is not a constructor.</p>

<p>Name all the functions, even if you store them in variables - this makes debugging easier.</p>

<pre><code>var numCap = function numCap (obj, min, max) {
</code></pre>

<p>Do not use random properties on DOM objects - instead store them as variables - thus replace <code>aSwitch.On</code> with <code>var alarmOn = false;</code>.</p>

<p>The <code>switch</code> can be replaced with an <code>if</code></p>

<pre><code>// toggle
alarmOn = !alarmOn;
if (alarmOn) {
    aSwitch.value = "ON";
    alarmSet();
}
else {
    aSwitch.value = "OFF";
    clearTimeout(alarmTimer);
}
</code></pre>

<p>Also, <code>setTimeout</code> is not guaranteed to trigger after exactly N milliseconds - in this case does not matter but in general it should be kept in mind that it is a <em>time-out</em> functionality to ensure that <em>at least</em> N milliseconds have elapsed since the callback is invoked.</p>
    </div>