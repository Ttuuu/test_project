<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Functional-first style tends to prefer immutability over mutability, so the fact that you're using <code>ref</code> can sometimes signify that the code could be more idiomatic.</p>

<p><strong>Recursive Solution</strong></p>

<p>But how do you keep track of the state of your program without mutation? The traditional functional solution is to use recursion so that each step of the algorithm is isolated in its own call context. Here is a fairly direct translation of your second example into a recursive function:</p>

<pre><code>let rec chop segmentSize source = 
    seq { 
            if Seq.isEmpty source then () else
            let segment = source |&gt; Seq.truncate segmentSize
            let rest = source |&gt; Seq.skip (Seq.length segment)
            yield segment
            yield! chop segmentSize rest 
    }
</code></pre>

<p>Don't be intimidated by my <code>if ... then () else</code> pattern - it's a trick I adopted to avoid needing to indent the rest of function when a precondition is used (I've seen it elsewhere, and it is nice since there's no early return from functions in F#).</p>

<p>Note how I'm using <code>yield!</code> to flatten the sequence from the recursive call into the outer sequence. Also notice that there is no <code>chopSource</code> in this version, because what was <code>chopSource</code> in your example is simply <code>source</code> in the recursive call.</p>

<p>One possible problem with the above solution is that it is not (as far as I know) tail-recursive. I'm not 100% sure how <code>seq</code> works behind the scenes, but I'm assuming that it is not in this case. This may not matter for your problem, but it's still something to consider. It could always be rewritten to use an accumulator argument so that it is tail-recursive and won't overflow the stack.</p>

<p>Another option is to ditch the sequence expression altogether (note that this is <em>still</em> not tail-recursive):</p>

<pre><code>let rec chop segmentSize source = 
    if Seq.isEmpty source then Seq.empty else
    let segment = source |&gt; Seq.truncate segmentSize
    let rest = source |&gt; Seq.skip (Seq.length segment)
    Seq.append [segment] (chop segmentSize rest)
</code></pre>

<p><strong>Seq.unfold Solution</strong></p>

<p>Although it's nice in this particular case, I'm not a huge fan of recursion because it can sometimes be hard to read and easy to get wrong. I normally use sequence functions as an alternative, as they handle those types of details behind the scenes, and I can worry about the problem at hand. Fortunately, the <code>Seq</code> module provides a nice function, <code>unfold</code>, which does exactly what we are trying to do here - it produces a sequence of values from an evolving state!</p>

<p>The function is called <code>unfold</code> because it is the inverse of <code>fold</code>, which is the equivalent of <code>Enumerable.Aggregate</code> from C#. Here is the documentation:</p>

<pre><code>// Signature:
Seq.unfold : ('State -&gt; 'T * 'State option) -&gt; 'State -&gt; seq&lt;'T&gt;

// Usage:
Seq.unfold generator state
</code></pre>

<p>The second argument, <code>state</code>, is the initial value that is going to be used to "seed" the operation (it may seem weird to have this as the <em>second</em> argument, but it is in that order to allow partial application / piping). That initial <code>state</code> value is going to be the first value passed in to our <code>generator</code> function. The <code>generator</code> function optionally returns a tuple containing the current value in the sequence along with the next <code>state</code> value that will be passed back in to generate the next value in the sequence. When the sequence is done,  it returns <code>None</code>.</p>

<p>Enough commentary, here is the implementation:</p>

<pre><code>let chop segmentSize source =
    source
    |&gt; Seq.unfold(fun chopSource -&gt;
        if Seq.isEmpty chopSource then None else
        let segment = chopSource |&gt; Seq.truncate segmentSize
        let rest = chopSource |&gt; Seq.skip (Seq.length segment)
        Some(segment, rest)
    )
</code></pre>

<p>So as you can see, we're basically allowing <code>Seq.unfold</code> to call our <code>generator</code>  repetitively as an alternative to recursion. Each iteration returns the segment and the rest of the sequence, which becomes the next <code>state</code> / <code>chopSoure</code>. I'm not actually sure if that is clearer than the recursive version, but it at least won't ever overflow the stack.</p>

<p>As for your naming questions, I think it's somewhat arbitrary. I probably would have called the function <code>segment[ed]</code> (indeed, I think I have). The size argument could go either way. For what it's worth, here's a <a href="http://msdn.microsoft.com/en-us/library/ee340420.aspx" rel="nofollow noreferrer">similar function</a> defined in the <code>Seq</code> module, though it's dealing with a sliding window rather than fixed segments.</p>

<p><strong>Addendum</strong></p>

<p>All these solutions are assuming that it is fine to re-enumerate the sequence, i.e. by truncating once and then skipping. That might be an OK assumption for small, in-memory data-sets, but an <code>IEnumerable</code> doesn't <em>have</em> to allow multiple enumeration, and it can be expensive. As <a href="https://stackoverflow.com/a/4000490/166131">pointed out</a> by Tomas Petricek on that other question, due to the forward-only nature of sequences, whenever you "back up" over a sequence like this it actually has to enumerate the entire thing from the beginning.</p>

<p>But perhaps a sequence isn't the best choice of data types for input into this function. If the data is already in memory, you have a choice of turning it into a list or an array. Arrays are especially nice for this problem due to their support for slicing. Here's a solution that uses arrays instead of sequences:</p>

<pre><code>let segmented (size:int) (source:'t[]) =
    let maxPos = source.Length - 1
    [| for pos in 0 .. size .. maxPos -&gt;
           source.[pos .. min (pos + size - 1) maxPos] |]
</code></pre>
    </div>