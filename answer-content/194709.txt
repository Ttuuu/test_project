<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<p>That's a neat little application for multiple reasons:</p>

<ul>
<li>It uses a Star Wars API </li>
<li>It uses a generator function</li>
</ul>

<p>I like it! I did however find some inefficiencies - see the section below labeled <strong>Excess Looping</strong>. </p>

<h2>Suggestions</h2>

<h3>Cache DOM elements on load</h3>

<p>DOM lookups aren't cheap, so it is generally best to store references to them in constants. For your application, the select lists and the elements with class name <code>data-cell</code> could be stored in constants, and then those constants could be used in place of the current DOM lookups </p>

<h3>Use <code>getElementsByClassName()</code> instead of querySelectorAll(), <code>getElementById()</code> instead of <code>querySelector()</code></h3>

<p>In most browsers it would generally be quicker to fetch the elements with class name <code>data-cell</code> using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName" rel="nofollow noreferrer"><code>document.getElementsByClassName()</code></a>, but that would return a live collection (refer to <a href="https://stackoverflow.com/a/39213298/1575353">this SO answer</a> for an explanation). It may be best to use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">spread operator</a> to put that <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection" rel="nofollow noreferrer">collection</a> in an array (or else use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" rel="nofollow noreferrer">Array.from()</a>) to allow use of array methods like forEach:</p>

<pre><code>const dataCells = [...document.getElementsByClassName('data-cell')];
</code></pre>

<h3>Excess looping</h3>

<p>The <code>for</code> loop within the <code>forEach</code> is actually setting the text content of the cells twice as many times as necessary. Instead of doing the following:</p>

<blockquote>
<pre><code>dataCells.forEach((dataCell) =&gt; {
      let key = dataCell.dataset.key; // The more general name ...
      for (let i = 0; i &lt; 2; i++) {
          document.getElementById(key + i).textContent = json[i][key]; // The general name together with the index gives the concrete ID.
      }
</code></pre>
</blockquote>

<p>There is already a reference to the data cell, so add the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Parameters" rel="nofollow noreferrer">index parameter</a> to the callback function and use that to reference with the modulo operator:</p>

<pre><code>dataCells.forEach((dataCell, i) =&gt; {
    let key = dataCell.dataset.key; // The more general name ...
    dataCell.textContent = json[i%2][key];
</code></pre>

<p>And the condition for adding the <code>higher-value</code> class can be simplified to:</p>

<pre><code>if (parseFloat(json[i%2][key]) &gt; parseFloat(json[(i+1)%2][key])) { // ... then compare the current spec. Class has only to be attached if one value is really higher. No attachment when equal.
    dataCell.classList.add('higher-value');
} 
</code></pre>

<p>The <code>else</code> block can be removed as well.</p>

<h3>SelectListElement.value</h3>

<p>I haven't heard much on this front lately but typically to get the value of the selected option in a select list, one would need to use the <code>selectedIndex</code> property, like this:</p>

<pre><code>const starShipOne = document.getElementById('starShipOne');
const starShipOneValue = starShipOne.options[starShipOne.selectedIndex].value;
</code></pre>

<p>Unfortunately the MDN page for <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/value" rel="nofollow noreferrer">HTMLSelectElement.value</a> yields a <em>Page Not Found</em> message and none of <a href="http://web.archive.org/web/*/https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/value" rel="nofollow noreferrer">the archive results</a> appear to be any different. Perhaps the only browsers that don't support <code>.value</code> on the selectList element also don't support <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> so it is a moot point.</p>

<h2><strong>EDIT</strong></h2>

<p>Now that I think about it, it feels like the current implementation of <code>gen</code> has multiple responsibilities:</p>

<ul>
<li>fetching results from the API</li>
<li>updating the DOM</li>
</ul>

<p>I know this isn't a large O.O. application but it would be advisable to separate the functionality that updates the DOM into a separate function - which would be in line with the Single Responsibility Principle. In order for that to work, the promises will need to be returned from the generator function and the recursive function. See the updated code below for an illustration of this.</p>

<h3>Updated code</h3>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>(() =&gt; {
  const dataCells = [...document.getElementsByClassName('data-cell')];
  const starShipOne = document.getElementById('starShipOne');
  const starShipTwo = document.getElementById('starShipTwo');

  function removeHigherValueClass() {
    dataCells.forEach((dataCell) =&gt; {
      dataCell.classList.remove('higher-value');
    });
  }

  function runGen() {
    let genObj = gen();

    function nextItem(obj) {
      if (obj.done) {
        return obj.value;
      }
      // As long as there a further yield
      //  statements in the generator function ...
      return obj.value.then((value) =&gt; nextItem(genObj.next(value))).catch(console.log);
    }

    nextItem(genObj.next()).then(updateDOM); // Trigger the recursion the first time.
  }

  function* gen() {
    let url = 'https://swapi.co/api/starships/';
    let json = [];
    let oneResponse = yield fetch(
      url + starShipOne.value, {
        mode: 'cors'
      });
    json.push(yield oneResponse.json());

    let twoResponse = yield fetch(
      url + starShipTwo.value, {
        mode: 'cors'
      });
    json.push(yield twoResponse.json());
    return json;
  }
  function updateDOM(json) {

    dataCells.forEach((dataCell, i) =&gt; {
      let key = dataCell.dataset.key; // The more general name ...
      dataCell.textContent = json[i % 2][key];
      // Starship One == 0, Starship Two == 1
      if (!isNaN(json[0][key])) { // If it is computable, comparable data ...

        if (parseFloat(json[i % 2][key]) &gt; parseFloat(json[(i + 1) % 2][key])) { // ... then compare the current spec. Class has only to be attached if one value is really higher. No attachment when equal.
          dataCell.classList.add('higher-value');
        }
      }
    });
  }

  document
    .getElementById('compare')
    .addEventListener('click', () =&gt; {
      removeHigherValueClass();
      runGen();
    });
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>html {
  background-color: rgba(245, 245, 245, .5);
}

.higher-value {
  background-color: pink;
  font-weight: 900;
}

.main-wrap {
  max-width: 800px;
  margin: 40px auto;
}

.main-nav {
  margin: 0 0 30px;
}

.data-cell {
  text-align: center;
  width: 200px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;section&gt;
  &lt;div class="main-wrap"&gt;
    &lt;h3&gt;Select two Starships from the dropdown lists to compare&lt;/h3&gt;
    &lt;nav class="main-nav"&gt;
      &lt;select id="starShipOne"&gt;
        &lt;option value="2" selected="selected"&gt;CR90 Corvette&lt;/option&gt;
        &lt;option value="75"&gt;V-wing&lt;/option&gt;
        &lt;option value="74"&gt;Belbullab-22 Starfighter&lt;/option&gt;
        &lt;option value="65"&gt;Jedi Interceptor&lt;/option&gt;

        &lt;option value="3"&gt;Star Destroyer&lt;/option&gt;
        &lt;option value="59"&gt;Trade Fedaration Cruiser&lt;/option&gt;
        &lt;option value="58"&gt;Solar Sailer&lt;/option&gt;
        &lt;option value="63"&gt;Republic Attack Cruiser&lt;/option&gt;

        &lt;option value="28"&gt;A-wing&lt;/option&gt;
        &lt;option value="29"&gt;B-wing&lt;/option&gt;
        &lt;option value="39"&gt;Naboo Fighter&lt;/option&gt;
        &lt;option value="10"&gt;Millenium Falcon&lt;/option&gt;
      &lt;/select&gt;
      &lt;select id="starShipTwo"&gt;
        &lt;option value="2"&gt;CR90 Corvette&lt;/option&gt;
        &lt;option value="75" selected="selected"&gt;V-wing&lt;/option&gt;
        &lt;option value="74"&gt;Belbullab-22 Starfighter&lt;/option&gt;
        &lt;option value="65"&gt;Jedi Interceptor&lt;/option&gt;

        &lt;option value="3"&gt;Star Destroyer&lt;/option&gt;
        &lt;option value="59"&gt;Trade Fedaration Cruiser&lt;/option&gt;
        &lt;option value="58"&gt;Solar Sailer&lt;/option&gt;
        &lt;option value="63"&gt;Republic Attack Cruiser&lt;/option&gt;

        &lt;option value="28"&gt;A-wing&lt;/option&gt;
        &lt;option value="29"&gt;B-wing&lt;/option&gt;
        &lt;option value="39"&gt;Naboo Fighter&lt;/option&gt;
        &lt;option value="10"&gt;Millenium Falcon&lt;/option&gt;
      &lt;/select&gt;
      &lt;button id="compare"&gt;Compare&lt;/button&gt;
    &lt;/nav&gt;
    &lt;table border="1"&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;/th&gt;
        &lt;th&gt;Starship 1&lt;/th&gt;
        &lt;th&gt;Starship 2&lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Name&lt;/td&gt;
        &lt;!-- 'data-key' will later determine the row. 
                         id='data-key-value[ 0 || 1 ]' determines the cell --&gt;
        &lt;td class="data-cell" data-key="name" id="name0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="name" id="name1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Cost&lt;/td&gt;
        &lt;td class="data-cell" data-key="cost_in_credits" id="cost_in_credits0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="cost_in_credits" id="cost_in_credits1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Speed&lt;/td&gt;
        &lt;td class="data-cell" data-key="max_atmosphering_speed" id="max_atmosphering_speed0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="max_atmosphering_speed" id="max_atmosphering_speed1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Cargo Size&lt;/td&gt;
        &lt;td class="data-cell" data-key="cargo_capacity" id="cargo_capacity0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="cargo_capacity" id="cargo_capacity1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Passengers&lt;/td&gt;
        &lt;td class="data-cell" data-key="passengers" id="passengers0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="passengers" id="passengers1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>
</div>
</div>

    </div>