<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template&lt;typename T, typename... Ts&gt;
struct First { using Type = T; };

template&lt;typename... Ts&gt;
using First_t = typename First&lt;Ts...&gt;::Type;
</code></pre>

<p>This can be done using <a href="https://en.cppreference.com/w/cpp/utility/tuple/tuple_element" rel="nofollow noreferrer"><code>std::tuple_element</code></a> in conjunction with <code>std::tuple</code>.</p>

<pre><code>template &lt;typename... Ts&gt;
using First_t = std::tuple_element_t&lt;0, std::tuple&lt;Ts...&gt;&gt;;
</code></pre>

<hr>

<pre><code>template&lt;auto value, auto... values&gt;
inline constexpr auto all_same = (... &amp;&amp; (value == values));
</code></pre>

<p>For an empty pack, do you really want the value to be undefined?  The default behavior with empty packs are <code>&amp;&amp;</code> is considered <code>true</code> and <code>||</code> is considered <code>false</code>.</p>

<hr>

<pre><code>static_assert(sizeof...(Tuples) &gt; 0);
</code></pre>

<p>Instead of failing, maybe try to call the function with 0 arguments and see what happens?</p>

<hr>

<pre><code>static_assert(impl::all_same&lt;impl::tuple_size&lt;Tuples&gt;...&gt;);
</code></pre>

<p>If you want zipped-like behavior, you'll want to zip tuples until one of the tuples has exhausted its elements (min size instead first size).</p>

<hr>

<blockquote>
  <p>Is this implementation correct and can it be simplified?</p>
</blockquote>

<p>Yes. Use an iterative approach, like sequential expansion, over recursion.</p>

<blockquote>
  <p>Which name is better, for_each_in_tuple or for_each_in_tuples (or ...)?</p>
</blockquote>

<p>Maybe <code>for_each_zipped</code>.  Tuples can be gathered from the signature of the function.</p>

<hr>

<p>If you want to avoid the recursion, use fold expressions, <code>std::index_sequence</code>, and <code>std::make_index_sequence</code>.   </p>

<p>Start with a simple helper to just invoke the function with elements across all the tuples at a specific index.</p>

<pre><code>template &lt;std::size_t Index, typename Function, typename... Tuples&gt;
constexpr void invoke_at(Function&amp;&amp; func, Tuples&amp;&amp;... tuples) {
    func(std::get&lt;Index&gt;(std::forward&lt;Tuples&gt;(tuples))...);
}
</code></pre>

<p>Now we need a way to sequentially call it (<code>invoke_at&lt;0&gt;(args), invoke_at&lt;1&gt;(args), ..., invoke&lt;N&gt;(args)</code>).  Use fold expressions like you did for <code>all_same</code>, but with the comma operator and unary right fold <code>((invoke_at&lt;N&gt;(args), ...))</code>.  To generate the <code>N</code>s that gets expanded, we use <code>std::index_sequence</code>.</p>

<pre><code>template &lt;std::size_t... Indices, typename Function, typename... Tuples&gt;
constexpr void apply_sequence(Function&amp;&amp; func,  std::index_sequence&lt;Indices...&gt;, Tuples&amp;&amp;... tuples) {
    (((void)invoke_at&lt;Indices&gt;(std::forward&lt;Function&gt;(func), std::forward&lt;Tuples&gt;(tuples)...), ...));
}
</code></pre>

<p>Finally, write your function that does checks for preconditions, creates the index sequence, and forwards the arguments to the above helper.</p>

<pre><code>template &lt;typename Function, typename... Tuples&gt;
constexpr void tuple_for_each(Function&amp;&amp; func, Tuples&amp;&amp;... tuples) {
    static_assert(sizeof...(tuples) &gt; 0, "Must be called with at least one tuple argument");

    constexpr auto min_length = std::min({std::tuple_size_v&lt;std::remove_reference_t&lt;Tuples&gt;&gt;...});
    if constexpr (min_length != 0) {
        impl::apply_sequence(std::forward&lt;Function&gt;(func),
                             std::make_index_sequence&lt;min_length&gt;{},
                             std::forward&lt;Tuples&gt;(tuples)...);
    }
    else {
        func();
    }
}
</code></pre>

<p><em>Note - The expansion has a cast to <code>void</code> that disables any overloaded shenanigans abusing the comma operator.</em></p>
    </div>