<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Styling</h2>

<p>Try to make the code follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 Style Guidelines</a>, this will make your code follow the Python conventions, and also more readable. So do 
<code>if l == 1</code> instead of <code>if l==1</code>, <code>my_atoi</code> instead of <code>myAtoi</code>, etc</p>

<h2>Code structure</h2>

<p>It seems that page requires the code to be inside a class. Leaving the exercise aside for a moment:
You don't need that function inside a class, because you are never using anything of the class itself. It makes more sense to define that method outside the class, and without the (unused) <code>self</code> parameter.</p>

<h2>Skiping whitespaces</h2>

<pre class="lang-py prettyprint-override"><code>while(i&lt;l and s[i]==" "):
    i+=1
    if i==l:
        return 0
</code></pre>

<ol>
<li>You don't need those parenthesis on the <code>while</code> in Python.</li>
<li>Your code might not detect some whitespace characters like <code>\t</code> (it seems the exercise accepts that though); use the method <a href="https://python-reference.readthedocs.io/en/latest/docs/str/isspace.html" rel="nofollow noreferrer"><code>isspace()</code></a>. </li>
<li>Instead of checking <code>i == l</code> on every iteration (when it could only happen in the last one), check it once you are out of the loop. This allows us to remove the special treatment to empty strings: if <code>s</code> is empty, it won't enter the loop and <code>i == l</code>, so it will return 0.</li>
</ol>

<pre class="lang-py prettyprint-override"><code>while i &lt; l and s[i].isspace():
    i += 1

if i == l:
    return 0
</code></pre>

<h2>Sign</h2>

<p>Your code to handle the sign is too complicated. Instead of keeping <code>ispos</code> and <code>isnegative</code>, you could just keep a <code>factor</code> that is either 1 or -1. So instead of </p>

<pre class="lang-py prettyprint-override"><code>ispos = False
if(s[i]=="+"):
    ispos = True
    i+=1
isnegative = False
if(s[i]=='-' and not ispos):
    isnegative = True
    i+=1
</code></pre>

<p>you can do</p>

<pre class="lang-py prettyprint-override"><code>factor = -1 if s[i] == '-' else 1
# Skip the sign character if necessary
if s[i] == '-' or s[i] == '+':
    i += 1
</code></pre>

<h2>Reading the number</h2>

<pre class="lang-py prettyprint-override"><code>if(i&lt;len(s) and not s[i].isnumeric() and s[i]!='+' and s[i]!='-'):
    return 0
while(i&lt;l):
    if s[i].isnumeric():
        res += s[i]
    else:
        break
    i+=1
</code></pre>

<ol>
<li><p>If we have already parsed the sign, why accept another sign again? </p></li>
<li><p>Be careful, <a href="https://www.programiz.com/python-programming/methods/string/isnumeric" rel="nofollow noreferrer"><code>isnumeric()</code></a> accepts things like <code>½</code>, which you probably don't want; use <code>isdigit()</code> instead.
EDIT: As noted in the comments, <code>isdigit()</code> will accept things like "¹". So it's probably better to just do <code>s[i] in '0123456789'</code></p></li>
<li><p>It's good practice (and helps avoid unexpected bugs) to declare variables the closest possible to where they are used. You declare <code>res = ""</code> at the beginning of your function, but haven't used it until now.</p></li>
<li><p>The while and if can be condensed into a single, more compact loop:</p></li>
</ol>

<pre class="lang-py prettyprint-override"><code>res = ""
while i &lt; l and s[i].isdigit():
    res += s[i]
    i += 1

# You can check if an string is empty doing this:
if not res:
    return 0
</code></pre>

<p>Arrived to this point, if the function hasn't returned, we know <code>res</code> contains a number. The way you handle the valid range, before applying the sign, is not very intuitive; it's better if you first apply the sign.</p>

<pre class="lang-py prettyprint-override"><code>x = factor * int(res)
if x &gt; (1 &lt;&lt; 31):
    return (1&lt;&lt;31)
elif x &lt; -((1 &lt;&lt; 31) - 1):
    return (1 &lt;&lt; 31) - 1
else:
    return x
</code></pre>

<p>Or it might be even better to clamp your number using <code>min</code> and <code>max</code>:</p>

<pre class="lang-py prettyprint-override"><code>return max(-(1 &lt;&lt; 31) + 1, min(1 &lt;&lt; 31, factor * int(res)))
</code></pre>

<h2>Final code</h2>

<p>I have removed the special case of <code>l == 1</code> because it is already handled by the rest of the code. This is my final code (untested):</p>

<pre class="lang-py prettyprint-override"><code>def my_atoi(s: str) -&gt; int:
    l = len(s)

    while i &lt; l and s[i].isspace():
        i += 1

    if i == l:
        return 0

    factor = -1 if s[i] == '-' else 1
    # Skip the sign character if necessary
    if s[i] == '-' or s[i] == '+':
        i += 1

    res = ""
    while i &lt; l and s[i].isdigit():
        res += s[i]
        i += 1

    if not res:
        return 0

    return max(-(1 &lt;&lt; 31) + 1, min(1 &lt;&lt; 31, factor * int(res)))
</code></pre>
    </div>