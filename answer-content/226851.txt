<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    def cycle_dfs(self, current_node,  start_node,  graph, current_path):
        ...
        if len(current_path) &gt;= 3:
            last_three_vertices = current_path[-3:]
            previous_three_faces = [set(self.faces_containing_arcs[vertex])
                                    for vertex in last_three_vertices]
            intersection_all = set.intersection(*previous_three_faces)
            if len(intersection_all) == 2:
                return []
</code></pre>
</blockquote>

<p><code>faces_containing_arcs[vertex]</code> suggests to me that something is badly named. I'd expect to see <code>faces_containing_vertex[vertex]</code>.</p>

<hr>

<blockquote>
<pre><code>        if current_node == start_node:
            if self.path_is_valid(current_path):
                return [tuple(shift(list(current_path)))]
            else:
                return []
</code></pre>
</blockquote>

<p>This is the really interesting section of <code>cycle_dfs</code>. Every path which is returned ultimately passes through this <code>path_is_valid</code> check. But some aspects of <code>path_is_valid</code> can be checked before we finish building the path, allowing a massive short-circuit. The previous section of <code>cycle_dfs</code> does this already with one condition.</p>

<p>So let's look at the validity conditions:</p>

<ol>
<li><blockquote>
<pre><code>        length = len(current_path)
        if length &lt; 3:
            # The path is too short
            return False
</code></pre>
</blockquote>

<p>Trivial.</p></li>
<li><blockquote>
<pre><code>        # Passes through vertex twice... sketchy for general case
        if len(set(current_path)) != len(current_path):
            return False
</code></pre>
</blockquote>

<p>Easily updated iteratively. I would suggest that for readability this could be done as a filter on <code>for adjacent_node</code>. The <span class="math-container">\$k &gt; 1\$</span> case is easily handled with a <code>Counter</code>:</p>

<pre><code>            for adjacent_node in set(graph[current_node]):
                if adjacent_node != start_node and visit_count[adjacent_node] &gt;= k:
                    continue

                visit_count[adjacent_node] += 1
                ... # Current loop body
                visit_count[adjacent_node] -= 1
</code></pre>

<p>(Or perhaps the special case could be handled by not initialising <code>visit_count[start_node]</code> to 1).</p></li>
<li><blockquote>
<pre><code>        # The idea here is take a moving window of width three along the path
        # and see if it's contained entirely in a polygon.
        arc_triplets = (current_path[i:i+3] for i in xrange(length-2))
        for triplet in arc_triplets:
            for face in self.non_fourgons:
                if set(triplet) &lt;= set(face):
                    return False
</code></pre>
</blockquote>

<p>Easily checked for the last window in <code>cycle_dfs</code>.</p></li>
<li><blockquote>
<pre><code>        # This is all kinds of unclear when looking at. There is an edge case
        # pertaining to the beginning and end of a path existing inside of a
        # polygon. The previous filter will not catch this, so we cycle the path
        # and recheck moving window filter.
        path_copy = list(current_path)
        for i in xrange(length):
            path_copy = path_copy[1:] + path_copy[:1]  # wtf
            arc_triplets = (path_copy[i:i+3] for i in xrange(length-2))
            for triplet in arc_triplets:
                for face in self.non_fourgons:
                    if set(triplet) &lt;= set(face):
                        return False
</code></pre>
</blockquote>

<p>I think the WTF here is the whole section, rather than the one line. (Although reusing <code>i</code> to mean something else in a nested loop is a particular highlight: I wouldn't want to place money on how that behaves without first having tested it). As I understand the comment, this just wants to repeat condition 3 for <code>current_path[-2:] + current_path[:1]</code> and <code>current_path[-1:] + current_path[:2]</code>.</p>

<p>If this is simplified to do only that, it can only be checked when closing the cycle.</p></li>
</ol>

<p>So moving the check of conditions 2 and 3 of <code>path_is_valid</code> into <code>cycle_dfs</code>, with a specialised strategy for 2, would seem to be the biggest way to improvement performance, possibly speeding up <code>cycle_dfs</code> by orders of magnitude. Based on the timings, fixing condition 4 would speed up <code>path_is_valid</code> by a factor of about 4 (replacing 76% of the execution time with, effectively, a couple of extra iterations of a loop which currently takes a total of 8.5% of the time), but that in itself would only be an 8% improvement to <code>cycle_dfs</code>.</p>
    </div>