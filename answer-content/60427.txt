<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could probably write a nested function that does the <code>print</code> and then you can handle the number of the iteration in the main function:</p>

<pre><code>def echo(*args):

    # print a value with regard to its type
    def do_echo(data, ender):
        if isinstance(data, six.string_types) \
                    or isinstance(data, six.integer_types):

            print_(data, end=ender)
        else:
            op = getattr(data, '__str__', None)
            if op:
                print_(data.__str__(), end=ender)
            else:
                LOG.error("echo called with an unsupported data type")

    # print all the values but the last one
    for arg in args[:-1]:
        do_echo(arg, ender=' ')

    # print the last value
    do_echo(args[-1], ender='\n')
</code></pre>

<p>That was for the refactoring of the code logic. Now, I also have a couple of remarks:</p>

<ul>
<li><p>If <code>args</code> is empty, <code>args[-1]</code> will raise an <code>IndexError</code>. Therefore, it would be good to write this instead:</p>

<pre><code># print the last value
if args:
    do_echo(args[-1], ender='\n')
</code></pre></li>
<li><p>The <a href="http://legacy.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a>, the style guide for Python does not like explicit line continuations with the backslash and <a href="http://legacy.python.org/dev/peps/pep-0008/#maximum-line-length" rel="nofollow">prefers implicit line continuations</a> with parenthesis:</p>

<pre><code>if (isinstance(data, six.string_types) or
    isinstance(data, six.integer_types)):
</code></pre>

<p>And as pointed by @jonrsharpe in the comments, <code>isinstance</code> can take a tuple of types instead of a simple type. Therefore, you can rewrite this condition as:</p>

<pre><code>if isinstance(data, (six.string_types, six.integer_types)):
</code></pre></li>
<li><p>Why did you fully qualify <code>six.string_types</code> and <code>six.integer_types</code> but not <code>six.print_</code>? Being consistent with regard to the use of the <code>six.</code> prefix would be good.</p></li>
</ul>
    </div>