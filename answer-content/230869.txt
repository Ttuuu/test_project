<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid Using Namespace <code>std</code></h2>

<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The function cout you may override within your own classes. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<h2>Variable Naming</h2>

<p>Use descriptive variable names so the code is more meaningful and comments are not as necessary, some examples</p>

<p>Current name: Suggested name<br>
number      : maxTestScores<br>
myArray     : testScores  </p>

<p>Not currently in code<br>
endTestScoresList : -1 (make -1 a symbolic constant like <code>number</code> is).</p>

<h2>Variable Declarations</h2>

<p>A good programming habit to get into is to put each variable declaration in a separate statement on a separate line. Instead of </p>

<pre><code>    int myArray[number], //array set
            counter = 0; // current array input number (1~100)
    double total = 0, // total for all scores added up
            average; // the average point for the scores.
</code></pre>

<p>it would be better the following way because it is easier to add or delete a variable and it is easier to read and maintain the code.</p>

<pre><code>    int myArray[number];
    int counter = 0;
    double total = 0;
    double average = 0;
</code></pre>

<p>In C++ it is also a good habit to initialize all the variables. </p>

<h2>Move Loop Invariants out of the Loop</h2>

<p>In the following code the variable <code>average</code> is a loop invariant and should not be calculated within the loop. Optimizing compilers may do this for you, but it is better to remove things that don't belong in the loop.</p>

<pre><code>    while (std::cin &gt;&gt; myArray[counter] &amp;&amp; myArray[counter] != -1)
    {
        total += myArray[counter]; // adds all inputs for grand total.
        counter++;
        average = total / counter; // grand total / number of input
    }
</code></pre>

<p>would be better as </p>

<pre><code>    while (std::cin &gt;&gt; myArray[counter] &amp;&amp; myArray[counter] != -1)
    {
        total += myArray[counter]; // adds all inputs for grand total.
        counter++;
    }

    average = total / counter; // grand total / number of input
</code></pre>

<h2>Possible Bug</h2>

<p>As was observed in another answer, if the user entered more than 100 test scores the previous code could throw an <code>index out of range error</code> and the program would crash. Rather than user a for loop as shown in the other answer, the code could be modified to test the index in the while loop:</p>

<pre><code>    while ((counter &lt; number) &amp;&amp; std::cin &gt;&gt; myArray[counter] &amp;&amp; myArray[counter] != -1)
    {
        total += myArray[counter++]; // adds all inputs for grand total.
    }

    average = total / counter; // grand total / number of input
</code></pre>

<p>By putting the test <code>(counter &lt; number)</code> first the std::cin will not be called and the loop will exit, preventing the out of range problem.</p>

<h2>Complexity</h2>

<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>There are at least 3 possible additional functions that can be called from <code>main()</code>.<br>
  - Get the user input<br>
  - Calculate and print the total and average<br>
  - List the scores in decsending order  </p>

<p>By reducing the complexity the code becomes easier to read, write, modify and debug.</p>

<h2>Prefer '\n' Over std::endl.</h2>

<p>As mentioned in another review <code>std::endl</code> calls a system function to flush the output buffer. Sometimes this is needed, but generally to improve performance <code>std::endl</code> isn't called. It might be called after a loop of <code>std::cout</code> has been completed.</p>
    </div>