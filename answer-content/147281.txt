<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Simple balanced brace checker.</h2>

<p>The quickest way to solve the problem is to use the Javascript RegExp (regular expression) It is used to search strings. It is a complicated object to master but well worth the effort as it will save you 100's of lines of code.</p>

<p>To solve if some string <code>str</code> has balanced braces you need two regular expressions 
and some assumptions</p>

<ul>
<li>If there are no brace characters then the string is balanced</li>
<li>If the total number of braces is an odd number the string can not be balanced</li>
<li>If after removing all non brace characters you can not find a pair of facing braces (eg facing pair <code>[]</code>) then it is not balanced</li>
<li>A balanced str with non brace characters removed will always have at least one facing pair of braces.</li>
</ul>

<p>Using those rules a simple function can quickly work out if a string is balances. It will not have to iterate (the do while loop) any more than the depth of the deepest nested braces.</p>

<p><strong>As a complete function</strong></p>

<pre><code>function parenthesesAreBalanced (str) {
    var len;
    var reduceRegExp = /(\[\])|(\(\))|(&lt;&gt;)/g; // to remove facing pairs

    str = str.replace(/[^\[\]\(\)&lt;&gt;]+/g,""); // remove all non parentheses
    if (str.length === 0) { return 1; }      // no braces balanced
    if (str.length % 2) { return 0; }        // odd length then not balanced.
    do { // Remove facing pairs until there are no more to remove.
        len = str.length;
        str = str.replace(reduceRegExp, ""); // remove all facing pairs
    } while (len !== str.length)
    if (str.length === 0) { return 1; }      // Balanced and good. :)
    return 0;                                // UnBalanced and bad. :(
} 
</code></pre>

<p><strong>As a parallel solution.</strong></p>

<p>With not to much effort the regexp searches can be done on the GPU via webGL making this solution a highly parallel solution.</p>

<p>Thus the max cycle count is the depth of the deepest matching pair + 1. That can be no more than <code>str.length / 2 + 1;</code></p>
    </div>