<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In short, your example race condition is a valid one.</p>

<p>If the code is truly "safe" then you should be able to add any number of <code>Thread.Sleep()</code> calls to the class without causing a change in behaviour. <a href="https://dotnetfiddle.net/y29Npr" rel="nofollow noreferrer">This Fiddle</a> uses the <code>AsyncQueue</code> to enqueue/dequeue a single item from different background threads. Without the locks, it is possible simulate the race condition by adding a sleep to <code>Enqueue()</code>. This ultimately deadlocks the app. Add the locks back in, and the race condition is removed - try it yourself in the Fiddle.</p>

<pre><code>public void Enqueue(T item)
{
    TaskCompletionSource&lt;T&gt; promise;
    do
    {
        if (_promisesQueue.TryDequeue(out promise) &amp;&amp;
            !promise.Task.IsCanceled &amp;&amp;
            promise.TrySetResult(item))
        {
            return;
        }
    }
    while (promise != null);

    // lock (_syncRoot)
    // {
        if (_promisesQueue.TryDequeue(out promise) &amp;&amp;
            !promise.Task.IsCanceled &amp;&amp;
            promise.TrySetResult(item))
        {
            return;
        }

        // DequeueAsync() adds a promise to _promisesQueue at this point
        Thread.Sleep(1000);

        _bufferQueue.Enqueue(item);
    // }
}
</code></pre>

<p>PS: Interesting question, but why not just use a <code>BufferBlock&lt;T&gt;</code>?!</p>
    </div>