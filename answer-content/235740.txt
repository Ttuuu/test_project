<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without running the code myself, it seems you've done a pretty good job. There are just a couple things I would point out:</p>
<h1><code>Names</code> Default Value</h1>
<p>Your dependency property for <code>Names</code> is declared as follows:</p>
<pre><code>    public static readonly DependencyProperty NamesProperty =
      DependencyProperty.Register(
        "Names",
        typeof(ObservableCollection&lt;string&gt;),
        typeof(NameLister),
        new FrameworkPropertyMetadata(
          new ObservableCollection&lt;string&gt; (),
          OnNamesChanged, 
          CoerceStrings));
</code></pre>
<p>I'd like to draw your attention to the line <code>new ObservableCollection&lt;string&gt; ()</code> and then show you this quote from Microsoft's documentation on <a href="https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/collection-type-dependency-properties#initializing-the-collection-beyond-the-default-value" rel="nofollow noreferrer">Collection-Type Dependency Properties</a>:</p>
<blockquote>
<p>If your property is a reference type, the default value specified in dependency property metadata is not a default value per instance; instead it is a default value that applies to all instances of the type. Therefore you must be careful to not use the singular static collection defined by the collection property metadata as the working default value for newly created instances of your type. Instead, you must make sure that you deliberately set the collection value to a unique (instance) collection as part of your class constructor logic. Otherwise you will have created an unintentional singleton class.</p>
</blockquote>
<p>That might be a bit to digest, so to simplify: If you set a default value for a collection in the dependency property metadata, that default collection will be shared by <em>all</em> instances of the class (like a static property). Instead, you need to leave the default in the metadata as <code>null</code> and set property in the class's constructor.</p>
<h1><code>Names</code> Type</h1>
<p>To answer your question, I don't necessarily see a problem with you using <code>ObservableCollection&lt;string&gt;</code>, except that a popular general rule is <a href="https://enterprisecraftsmanship.com/posts/return-the-most-specific-type/" rel="nofollow noreferrer">"Return the most specific type, accept the most generic type"</a>.</p>
<p>If we're treating <code>Names</code> as sort of an "input property", then we would want it to be the most general type possible, which would probably be <code>IEnumerable&lt;string&gt;</code>. You would then check in <code>OnNamesChanged</code> whether the new value of the property implemented <code>INotifyCollectionChanged</code> and if so attach the appropriate event handler. If you take this approach, I would recommend taking inspiration from the <code>ItemsControl</code> class, specifically the <code>ItemsSource</code> property, since it does the same basic action of taking a bound collection and using it. You can find the actual source code for <code>ItemsControl</code> <a href="https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/windows/Controls/ItemsControl.cs" rel="nofollow noreferrer">here</a> which you can use to see how Microsoft went about implementing it.</p>
<p>On the other hand, implementing something like that takes considerably more work, and you might very well want to <em>require</em> an <code>ObservableCollection&lt;string&gt;</code> based how your control is intended to be used. In either case, leaving it as is should be fine as far as I'm concerned.</p>
    </div>