<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Declaration</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>int arr[],n,i,j,nr[]= new int[5];
</code></pre>
</blockquote>

<p>Consider to declare variables on separate lines. From <em>Code Complete, 2nd Edition, p761</em>:</p>

<blockquote>
  <p><strong>Use only one data declaration per line</strong></p>
  
  <p>[...]</p>
  
  <p>It’s easier to modify declarations because each declaration is self-contained.</p>
  
  <p>[...]</p>
  
  <p>It’s easier to find specific variables because you can scan a single column rather than reading each line. It’s easier to find and fix syntax errors because the line number the compiler gives you has only one declaration &gt;on it.</p>
</blockquote>

<h1>Unused Variables</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>int count =0;
</code></pre>
</blockquote>

<p><code>count</code> gets declared and initialized but is never in use.. Unused variables should be removed. </p>

<h1><a href="https://refactoring.guru/replace-magic-number-with-symbolic-constant" rel="nofollow noreferrer">Magic Number</a></h1>

<blockquote>
  <p>Your code uses a number that has a certain meaning to it.</p>
</blockquote>

<p>One magic number is hidden in the code.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if(n&gt;25) {
</code></pre>
</blockquote>

<p>You can create a new constant variable <code>MAX_SIZE</code></p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if(n&gt;MAX_SIZE) {
``
</code></pre>
</blockquote>

<h1>Formatting</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>for( i=0; i&lt; arr.length-1;i++)
{ for (j=i+1;j&lt;arr.length;j++)
    {if(arr[i]==arr[j])
       nr[i]=arr[i];
        System.out.println(nr[i]);
    }}
</code></pre>
</blockquote>

<p>The code has an inconsistent formatting. Some key words are on a new-line and some times on the same line of a <code>{</code>.</p>

<p>Additional the code is format in a more C-like style, which I respect but you should have a look into <a href="https://www.oracle.com/technetwork/java/codeconvtoc-136057.html" rel="nofollow noreferrer">Oracles Code Conventions for the Java</a>.</p>

<h1>Reduce Code Complexity Via Methods</h1>

<p>When we consider a <a href="http://wiki.c2.com/?CodeSmellMetrics" rel="nofollow noreferrer">Code Smell Metrics</a> and look at the code, we will find at least two points, that apply:</p>

<blockquote>
  <ul>
  <li>Methods with more than 20 lines of code </li>
  <li>Methods with nesting more than 2 (?) levels deep </li>
  <li>Any global or static variables</li>
  </ul>
</blockquote>

<p>To reduce the complexity we can introduce some new methods. For example</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>for(i=0;i&lt;n;i++)
{
    arr[i] = sc.nextInt();
}
</code></pre>
</blockquote>

<p>can be wrapped into a method <code>storeUserInput</code>.</p>
    </div>