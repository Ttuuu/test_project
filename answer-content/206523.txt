<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I guess you've already checked the iterator requirements, but just in case; it's basically implementing everything on this page (and the "named requirements" pages linked from it): <a href="https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator</a></p></li>
<li><p>The various <code>iterator_traits</code> typedefs are usually defined directly in the iterator class. The unspecialized version of <code>iterator_traits</code> just redirects to typedefs defined in the class.</p></li>
<li><p>These types should then be used for the return values of the various iterator functions, e.g.</p>

<pre><code>difference_type operator-(const RecordIterator&amp; it) const noexcept {
    return m_component_it - it.m_component_it;
}
</code></pre></li>
<li><p>Note: this originally returned <code>std::size_t</code>. However, the <code>difference_type</code> must be signed (<code>std::ptrdiff_t</code> is correct). The other mathematical operations have the same issue.</p></li>
<li><p>Unfortunately, we actually need <code>pointer</code> and <code>reference</code> typedefs, not <code>pointer_type</code> and <code>reference_type</code>.</p></li>
<li><p>I don't think it's possible to fulfill the exact requirements for the reference type (ForwardIterator requires it to be <code>T&amp;</code> or <code>T const&amp;</code> where T is <code>value_type</code>). Defining it as <code>Record&lt;T&gt;</code> should work correctly in most cases though.</p></li>
<li><p>For <code>pointer</code>, you might simply define it as <code>void</code>, leave the arrow operator undefined, and see if anything breaks. <a href="https://stackoverflow.com/a/21828507/673679">This answer on stackoverflow</a> implies that <code>reference</code> and <code>pointer</code> aren't used inside the algorithms themselves, so you should be ok. Perhaps someone else with more knowledge can weigh in on this.</p></li>
</ul>

<hr>

<ul>
<li>Maybe the <code>Record</code> class should be lighter weight - handling swap and move only, and providing a means to access the underlying component. At the moment <code>Record</code> rather assumes that the components will be able to overload the relevant comparison operator, and that the algorithms using them will only need comparison operators. I could see, e.g. a <code>LightingComponent</code> needing to sort lights by distance, or partition them with frustum culling, and might require custom comparators. Being able to access the underlying component from <code>Record</code> would allow this, as well as use with a wider range of algorithms.</li>
</ul>

<hr>

<ul>
<li>Is it really necessary to allow an "invalid" Entity to exist?</li>
</ul>
    </div>