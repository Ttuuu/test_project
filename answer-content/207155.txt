<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regarding your tests.  You definitely don't have too many.  You actually could have too few.  Consider:</p>

<p>In one dimension, you have 5 cases you can check:</p>

<ul>
<li><code>val &lt; min</code></li>
<li><code>val == min</code></li>
<li><code>min &lt; val &lt; max</code></li>
<li><code>val == max</code></li>
<li><code>val &gt; max</code></li>
</ul>

<p>In another dimension, you have <code>inclusive=True</code> and <code>inclusive=False</code>.  That makes at least 10 combinations you should test.  You also have a "inclusive uses the default" which could add 5 more.</p>

<p>Then, you have <code>allowed_range</code> which expects a <code>tuple</code> with limits in either order.  So you should test <code>allowed_range=(1.5, 5.1)</code> separate from <code>allowed_range=(5.1, 1.5)</code>.  That would further double the number of tests.</p>

<p>What about tests where <code>min == max</code>, using both inclusive and non-inclusive limits?</p>

<p>You don't need to write separate functions for each test; each function can easily perform a suite of several tests:</p>

<pre><code>def test_unequal_limits(self):
    #          val, min, max, incl,  excl
    tests = [ (1.5, 2.5, 5.5, False, False),
              (2.5, 2.5, 5.5, True,  False),
              (3.5, 2.5, 5.5, True,  True),
              (5.5, 2.5, 5.5, True,  False),
              (6.5, 2.5, 5.5, False, False) ]
    for val, lower, upper, incl, excl in tests:
          assert is_in_range(val, (lower, upper)) == incl
          assert is_in_range(val, (lower, upper), False) == excl
          assert is_in_range(val, (upper, lower)) == incl
          assert is_in_range(val, (upper, lower), False) == excl

def test_equal_limits(self):
    #          val, limit, incl
    tests = [ (1.5, 3.5,   False),
              (3.5, 3.5,   True),
              (5.5, 3.5,   False) ]
    for val, limit, incl in tests:
          assert is_in_range(val, (limit, limit)) == incl
          assert is_in_range(val, (limit, limit), False) == False
</code></pre>

<p>You test exactly one case where all inputs are non-numeric strings.  You probably need to test the minimum, maximum, and value separately.</p>

<hr>

<p>Regarding your function <code>is_in_range()</code> function.</p>

<p>Why raise a <code>ValueError</code> when the input is considered to be "non-numeric"?  Without the non-numeric check, <code>is_in_range("tt", ("a","zzz"))</code> would return <code>True</code>, which would be quite acceptable.</p>

<p>The non-numeric check causes more problems:</p>

<pre><code>&gt;&gt;&gt; val = 1000000000000000000
&gt;&gt;&gt; is_in_range(val, (val-1, val+1))
Traceback (most recent call last):
  File "&lt;pyshell#46&gt;", line 1, in &lt;module&gt;
    is_in_range(val, (val-1, val+1))
  File "&lt;pyshell#8&gt;", line 11, in is_in_range
    raise ValueError("Inputs must be numeric.")
ValueError: Inputs must be numeric.
</code></pre>

<p>Without the non-numeric check, the function would return <code>True</code>, as expected.</p>

<hr>

<p>The parameter <code>allowed_range: (float, float)</code> has a type-hint of "tuple of two floats", but there is nothing in Python that will enforce that.  You can provide a more than 2 values.  <code>50</code> is not in the range of <code>1</code> to <code>10</code>, but it is in the range of <code>(1, 10, 100)</code> ... whatever that means!</p>

<pre><code>&gt;&gt;&gt; is_in_range(50, (1, 10, 100))
True
</code></pre>

<p>And you are only testing the first two values for numeric-ishness.  <code>0</code> is not in the range of <code>1</code> to <code>10</code>, but it is in the range of <code>[1, 10, False]</code>!</p>

<pre><code>&gt;&gt;&gt; is_in_range(0, [1, 10, False])
True
</code></pre>
    </div>