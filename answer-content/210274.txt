<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<ul>
<li>One of your goals should be to avoid repetitive code. This is called the <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself" rel="nofollow noreferrer">DRY principle</a>. If you have identical code (e.g. functions that call almost the same parameters, blocks of code that are almost identical except for one word), the repetition can almost certainly be reduced by creating more functions or looking into other structures.</li>
<li><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> is the style guide that Python programmers commonly use. It makes your code easier for others to read, and also helps you to define standardized interfaces whose calling conventions will be easy to remember. I reading through it and starting to learn the conventions. There also automated checkers that you can run your code through to point out improvements to you: I use <a href="https://www.pylint.org/" rel="nofollow noreferrer"><code>pylint</code></a> for this. There's one thing I immediately notice in your code that does not follow PEP 8:

<ul>
<li>Classes should be named following the <code>CapWords</code> convention (<a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">source</a>):

<ul>
<li><code>labyrinth</code> should be <code>Labyrinth</code></li>
</ul></li>
</ul></li>
<li>When creating strings that have a pattern <a href="https://docs.python.org/library/string.html#format-string-syntax" rel="nofollow noreferrer"><code>str.format()</code></a> and <a href="https://docs.python.org/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer">formatted string literals</a> come in handy.</li>
</ul>

<h2>There are easier ways to format strings</h2>

<p>Take this function:</p>

<pre><code>def get_time(hours,minutes,seconds):
    if len(str(hours)) &gt; 1:
        a = str(hours)
    else:
        a = "0" + str(hours)

    if len(str(minutes)) &gt; 1:
        b = str(minutes)
    else:
        b = "0" + str(minutes)

    if len(str(seconds)) &gt; 1:
        c = str(seconds)
    else:
        c = "0" + str(seconds)

    return a + ":" + b + ":" + c
</code></pre>

<p>The three conditionals are not necessary; Python already has three ways to pad strings to two digits. My personal favorite is formatted string literals. Instead of: </p>

<pre><code>    if len(str(hours)) &gt; 1:
        a = str(hours)
    else:
        a = "0" + str(hours)
</code></pre>

<p>You can just do:</p>

<pre><code>    a = f"{a:0&gt;2}"
</code></pre>

<p>Here's how it works (see <a href="https://docs.python.org/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">here</a> for more details):</p>

<pre><code>f             string prefix thats starts a formatted string literal
 "
  {           starts a variable reference
   a          variable name
    :         start formatting section
     0        padding character
      &gt;       right align
       2      number of characters to pad to
        }     end variable reference
         "
</code></pre>

<p>And from there you could do:</p>

<pre><code>def get_time(hours,minutes,seconds):
    return ":".join(f"{part:0&gt;2}" for part in [a, b, c])
</code></pre>

<p>But as @Reinderien mentions, it's better to use <code>strftime</code> here. I also recommend reading his answer for more suggestions.</p>
    </div>