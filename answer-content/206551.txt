<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#include "../../std_lib_facilities.h"
</code></pre>

<p>While PPP is structured around using this header, you will eventually be including only what you really need to make your code self-sufficiently compilable.  So instead of <a href="https://github.com/BjarneStroustrup/Programming-_Principles_and_Practice_Using_Cpp/blob/01b4f8681b88594c8c8210aac09ca8b4691689a5/std_lib_facilities.h#L28" rel="nofollow noreferrer">including a bunch of libraries</a> you don't need, just include what you use.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
</code></pre>

<p>The header Stroustrup provides also imports all visible symbols in namespace <code>std</code> into the global namespace.  The global namespace is then polluted with a bunch of names that could lead to collisions.  The compiler could resolve function overloads in unexpected ways.  Essentially, <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice"><code>using namespace std;</code> is considered bad practice</a>.  If you must use <code>using</code> directives, keep the use in the narrowest scope possible.  Otherwise, qualify names with their namespace as the namespace will help the reader understand what is being called and from where.</p>

<hr>

<pre><code>    double median_value;
</code></pre>

<p>Avoid declaring variables before you need them.  This technique is an artifact of older programming languages that didn't allow initialization of variables and constants after a statement.  Errors commonly associated with this technique include use-before-set, incorrectly initialized variables, and possibly non-contextual reuse due to programmer laziness.</p>

<p>The simplest solution is to declare the variable as close to its initialization point.</p>

<pre><code>    double median_value;
    if (temps.size() % 2 == 0)
        median_value = ...;
</code></pre>

<p>Even better, directly initialize the variable with a value.</p>

<pre><code>    const auto median_value = median(temps);
</code></pre>

<p>This reduces the chance of errors happening as well as reducing the cognitive load for readers.  Directly initializing variables also allows you to take advance of <code>const</code>/<code>constexpr</code>.</p>

<hr>

<pre><code>    sort(temps);
</code></pre>

<p>Do you need to <code>sort</code> the entire container? When we're looking to find the median, we're only interested in picking out either the middle value or the middle two values.  Rather than sort, we would rather select.  C++ implementations typically provide <a href="https://en.wikipedia.org/wiki/Introselect" rel="nofollow noreferrer">introselect</a> for its selection algorithm (<a href="https://en.cppreference.com/w/cpp/algorithm/nth_element" rel="nofollow noreferrer"><code>std::nth_element</code></a>).  </p>

<p>As you learn more about <a href="https://en.cppreference.com/w/cpp/algorithm" rel="nofollow noreferrer"><code>&lt;algorithm&gt;</code></a> and iterators, keep this in mind.</p>

<hr>

<pre><code>        median_value = (/* ... */ + temps[temps.size() / 2 - 1]) / 2;
</code></pre>

<p>It's really important to keep in mind the possible states a variable can represent.  In the case of <code>temps</code>, that <code>std::vector&lt;double&gt;</code> could represent any number of <code>double</code>s as well as nothing.  When <code>temps</code> is empty, <code>temps.size() / 2 - 1</code> evaluates to <code>0 / 2 - 1</code>. It's important to note that <code>temps.size()</code> <a href="https://en.cppreference.com/w/cpp/container/vector/size" rel="nofollow noreferrer">returns <code>size_type</code>, an alias for an unsigned value</a>.  Thus, subtracting one from unsigned zero results in the maximum value held by <code>std::vector&lt;double&gt;::size_type</code>. It's essentially a really large value almost guaranteed to be out of bounds when used in your context.  Out of bound index access is a common case of undefined behavior.</p>

<p>If the user doesn't provide you with values, you can't calculate a median.  <code>temps</code> having at least one value is a precondition for calculating the median.  Check your preconditions and notify the user if they mess up.  How you notify the user is up to you, but keep this in mind as you go over chapters on error and exception handling.</p>

<hr>

<pre><code>    for (int i = 0; i &lt; temps.size(); ++i) cout &lt;&lt; temps[i] &lt;&lt; ", ";
</code></pre>

<p>As stated before, <code>temps.size()</code> returns an unsigned value.  The comparison <code>i &lt; temps.size()</code> is a signed-unsigned mismatch.  If <code>temps</code> contains more values than <code>i</code> can represent, you'll have a bug.</p>

<p>If you are simply accessing the elements and don't need to apply transformations on the index, use the <a href="https://en.cppreference.com/w/cpp/language/range-for" rel="nofollow noreferrer">range-based <code>for</code> loop</a>.</p>

<pre><code>    for (auto temp : temps) std::cout &lt;&lt; temp &lt;&lt; ", ";
</code></pre>
    </div>