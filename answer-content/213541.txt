<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Nulls:</strong> What happens when someone asks for an EmployeeHistory without passing in an employee ID? It's hard for me to believe that the API for retrieving history will behave well, must less the call to <code>db.Employees.Find()</code>, and certainly not the cast <code>(int)employeeID</code>.</p>

<p>I would recommend either immediately checking this and bailing out (with an ArgumentNullException or an empty view, or whatever you think is best), if you aren't already doing so. Or, you could the signature to <code>EmployeeHistory(int employeeID)</code> - since without an employee ID there is very little you can do.</p>

<hr>

<p><strong>Names:</strong> You have an EmployeeHistory object, with three properties all named Employee-something. This is a bit redundant. Perhaps just <code>ID</code>, <code>Name</code>, and <code>PositionsOverTime</code>? Or <code>PositionsHeld</code>?</p>

<p>Although that would imply that that <code>EmployeeHistory.ID</code> is the ID <em>of the history</em>... But that raises the question to me, why copy these properties from the Employee object at all? Why not just hold a reference to the actual Employee?</p>

<p>In fact, perhaps it would make more sense to add the history of positions held to the Employee object. That does make more sense: "This employee has this history", rather than the other way around.</p>

<p>As a side note, I'll grant that abbreviations like <code>emp</code>, <code>e</code>, and <code>empHist</code> are easy enough to parse in this case. However, my preference would still be for complete words when possible. Remember that code is read far more often than it is written, so if a few extra keystrokes now save a few seconds of parsing later, that's a net win.</p>

<hr>

<p><strong>Encapsulation:</strong> You may have satisfied the requirement of a read-only collection in the eyes of your code analyzer, but you have not done so in fact. While a consumer of this class would not have the ability to swap out the entire list for one of their own, the <code>IList&lt;T&gt;</code> interface is permissive enough that they may as well. <a href="https://dotnetfiddle.net/RSrfKo" rel="nofollow noreferrer">Here's a demo</a>.</p>

<p>If you want to make this history truly read-only, you'll need to avoid handing out a direct reference to the list. <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.asreadonly?view=netframework-4.7.2" rel="nofollow noreferrer"><code>List.AsReadonly()</code></a> is good for this.</p>

<p>Another thing you may want to encapsulate is the <em>order</em> of the list. You have decided* that the history should be sorted with the most recent <code>assignEffDateNext</code> first. If you want to guarantee that histories are always ordered this way, the logic to do so belongs in the history's constructor.</p>

<p>*As a side note, I personally would not sort this list on the back end at all. Suppose a user wants to view the list in chronological order? Or sorted by position title? Javascript is perfectly capable of sorting arrays of the size you're likely to have. This gives your users flexibility while keeping (an admittedly very small) load off the server.</p>

<hr>

<p><a href="https://en.wikipedia.org/wiki/Robustness_principle" rel="nofollow noreferrer"><strong>Robustness:</strong> <em>"Be conservative in what you send, be liberal in what you accept."</em></a> It's generally nice when functions only ask for what they need. As it stands, an EmployeeHistory cannot be constructed with a Collection of positions - even though just a simple IEnumerable ought to be sufficient. Save yourself future calls to <code>.ToList()</code>, and open up this constructor to be more permissive.</p>

<p>This same principle, in my mind, suggests that you should be as specific as possible about what you're returning. Making positions available as an <code>IReadOnlyList</code> is good, because it allows your users to access positions by index. For the same reason, I would also be more specific about what you're returning from the view. It is an <code>ActionResult</code>, yes... But more specifically it's a <code>ViewResult</code>. This may not have a big impact on your front end, but it could help with testability or refactoring down the line.</p>

<hr>

<p>Here's how this code might look when you're done:</p>



<pre class="lang-cs prettyprint-override"><code>public class EmployeeHistory
{
    public Employee Employee { get; }
    public IReadonlyList&lt;IDMSElementData&gt; PositionsHeld { get; }

    public EmployeeHistory(
        Employee employee,
        IEnumerable&lt;IDMSElementData&gt; positions)
    {
        Employee = employee;

        PositionsHeld = positions
            .OrderByDescending(position =&gt; position.assignEffDateNext)
            .ToList()
            .AsReadOnly();
    }
}

public async Task&lt;ViewResult&gt; EmployeeHistory(int employeeID)
{
    var positions = GetPositionsFromSomeAPICall(employeeID);

    var employee = db.Employees.Find(employeeID);

    var history = new EmployeeHistory(employee, positions);

    return View("EmployeeHistory", history);
}
</code></pre>
    </div>