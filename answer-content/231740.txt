<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of observations:</p>

<ol>
<li><p>You are handling <code>scrollViewDidEndDecelerating</code>. But what if there was no deceleration? E.g. you’d generally want to call some common routine, e.g. <code>didFinishUserScroll</code>, either way:</p>

<pre><code>func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
    if !decelerate {
        didFinishUserScroll()
    }
}

func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
    didFinishUserScroll()
}
</code></pre></li>
<li><p>It looks like you are scrolling as soon as deceleration finishes. I would suggest that you only want to scroll at the end of the user gesture (whether decelerating or not) only if there is an update to the position in the lyrics in the intervening period of time.</p>

<p>E.g. you’re bopping along in a song, the drummer goes off into some lengthy, lyric-free solo, so the bored user starts scrolling through the lyrics themselves. When they let go, if the drum solo is still in progress, I’d suggest that you might not want to scroll back until the singing resumes. I wouldn’t necessarily scroll back immediately.</p>

<p>Now maybe you’ve got the sort of logic in the code you didn’t share with us, and if so, don’t worry about it. But, frankly, the fact that <code>tracking</code> is so ambiguous is code smell. (I.e., is it a boolean whether a touch gesture is in progress? is it indicating that we’re following along with lyrics at all? is it that there are updates to progress in the song that requires update of the position?) The fact that the intent of <code>tracking</code> is so ambiguous suggests you might consider a better name for it.</p></li>
<li><p>It looks like <code>currentPath</code> is an <code>Int</code>, a row number. So I wouldn’t call it <code>currentPath</code>, but rather <code>currentRow</code>.</p></li>
<li><p>When you have a boolean, you generally just check the value, not compare it to another boolean. So, for example, instead of:</p>

<pre><code>if tracking == true {
    tracking = false
    scrollToRow(at: IndexPath(row: currentPath, section: 0), at: UITableView.ScrollPosition.middle, animated: true)
}
</code></pre>

<p>You would do:</p>

<pre><code>if tracking {
    tracking = false
    scrollToRow(at: IndexPath(row: currentPath, section: 0), at: .middle, animated: true)
}
</code></pre>

<p>I also removed the redundant <code>UITableView.ScrollPosition</code> reference.</p></li>
<li><p>This is beyond the scope of this question, but the fact that you’re calling <code>scrollToRow(at:at:animated:)</code> without referencing the table view worries me, making me wonder whether you have all of this business logic buried inside your table view. We generally strive to isolate our UI from business logic of the app.</p></li>
</ol>
    </div>