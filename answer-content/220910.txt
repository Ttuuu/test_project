<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree that there's no way to know 100% if a PDF contains proper text or an image of a scanned hard-copy. I've seen PDFs that <em>weren't</em> scanned, but which contained a single jpg per page, and I've seen PDFs that <em>were</em> scanned but had an OCR version of the text seamlessly<sup>*</sup> underlayed.</p>

<p>Your existing code can be improved a little. You don't need to set <code>scanned</code>, and then update it in an <code>if</code> in a <code>for</code>, you can just check the condition you're interested in directly:</p>

<pre class="lang-py prettyprint-override"><code>scanned = 2 &lt; len(out.splitlines())
</code></pre>

<p>I'll be honest, I <em>don't</em> like the simplicity of that. We're writing code that relys on the incidental formatting of a table that was designed for human reading, and which we have no control over. That said, since we have no control, it may be the best we can do.</p>

<p>Also, it looks like you could probably be using<br>
<code>subprocess.run(cmd, stdout=subprocess.PIPE)</code>, which is recommended in python3. It won't <em>simplify</em> your code, but it will make you be clear and safe about handling the results of the subprocess. (For example, right now you're not doing anything with <code>err</code>, and it's unclear if that's a mistake or not.)</p>

<p>As for the fundamental approach:<br>
I think it's probably the best you can do, <strong>if</strong> you're stuck with the "scanned vs searchable" dichotomy. You could also try using <a href="https://linux.die.net/man/1/pdftotext" rel="nofollow noreferrer">pdftotext</a> to see if there's text in the document.<br>
But as I said above, the presence of text doesn't absolutely mean that the document can reliably be searched, and the absence of font information doesn't absolutely mean that the document is a scan. </p>

<p><sub>*It was not seamless.</sub></p>
    </div>