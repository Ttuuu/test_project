<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Your code</h2>

<p>Your code as such seems to be functional, but not really elegant or concise. </p>

<p>First, the variable names don't speak for themselves. Nobody would be hurt if the function input was named <code>numbers</code> instead of <code>a</code> and <code>number</code> instead of <code>ai</code>. <code>work_dict</code> is also  not a particularly good name since it's very generic. How about <code>digit_histogram</code>?</p>

<p>Handling single digit numbers separately seems unnecessary. The algorithm you implemented can handle them without special treatment.</p>

<p>When constructing <code>max_num</code>, there is a lot of repeated code. You could simplify this using a list comprehension and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join</code></a> (more on that soon).</p>

<h2>How I would have tackled this</h2>

<p>Since we have the luxury that combination of these numbers should be maximized in base 10, we can get their digits simply by looking at their <code>str</code> representation (which coincidentally happens to be in base 10 ;-) )<sup>1</sup>.</p>

<p>If you include the other recommendations from above you end up with:</p>

<pre class="lang-py prettyprint-override"><code>def maximum_number_str(arr):
    digit_histogram = {
        "0": 0, "1": 0, "2": 0, "3": 0, "4": 0,
        "5": 0, "6": 0, "7": 0, "8": 0, "9": 0
    }
    # or: digit_histogram = {str(i): 0 for i in range(10)}

    for number in arr:
        for digit in str(number):
            digit_histogram[digit] += 1

    max_num = "".join(str(i)*digit_histogram[str(i)] for i in reversed(range(10)))

    return int(max_num)
</code></pre>

<p>Depending on how familiar you are with Python and if other modules are allowed, you could come up with a solution using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>, or at least skip the dict initialization all-together if you use <code>.get(...)</code> instead of <code>[...]</code> when accessing the dictionary as presented by <a href="https://codereview.stackexchange.com/a/223403/92478">PÃ¥l GD in is answer</a>.</p>

<p>Just for reference, this is how it could look like using a <code>Counter</code>:</p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter

def maximum_number_counter(arr):
    digit_histogram = Counter()

    for number in arr:
        digit_histogram.update(str(number))

    max_num = "".join(
        str(i) * digit_histogram[str(i)] for i in reversed(range(10)))

    return int(max_num)
</code></pre>

<hr>

<h2>Edit: The other way to think about that task</h2>

<p>There seems to be a vivid discussion here if you understood the task correctly. If you follow the arguments that speak against your and my former interpretation, this actually leads to another interesting problem.</p>

<p>I came up with the solution below, though I highly doubt that I could have come up with this in an interview situation.</p>

<pre><code>from functools import cmp_to_key


def maximize_joint_number(number1, number2):
    joined12 = int(str(number1)+str(number2))
    joined21 = int(str(number2)+str(number1))
    return joined21 - joined12


def maximum_number(numbers):
    """
    Generate the largest possible number that can be generated rearanging the
    *numbers*, not the digits of the input sequence
    """
    return int("".join(str(i) for i in sorted(numbers, key=cmp_to_key(maximize_joint_number))))
</code></pre>

<p>The idea to this is actually from <a href="https://www.geeksforgeeks.org/given-an-array-of-numbers-arrange-the-numbers-to-form-the-biggest-number/" rel="nofollow noreferrer">this blog post</a> that was given in a comment by <a href="https://codereview.stackexchange.com/users/139491">Eric Duminil</a>. The <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow noreferrer"><code>cmp_to_key</code></a> trickery is needed because the <code>cmp</code> keyword was removed from sort in Python 3. You could also use <code>cmp_to_key</code> as a decorator, which makes it a little bit nicer:</p>

<pre><code>from functools import cmp_to_key

@cmp_to_key
def maximize_joint_number(number1, number2):
    ...

def maximum_number(numbers):
    return int("".join(str(i) for i in sorted(numbers, key=maximize_joint_number)))
</code></pre>

<p>A quick test seems to fulfill all the presented example outputs:</p>

<pre><code>
if __name__ == "__main__":
    assert maximum_number([0, 12]) == 120
    assert maximum_number([2, 21, 10]) == 22110
    assert maximum_number([9, 2, 5, 51]) == 95512
    assert maximum_number([20, 210, 32]) == 3221020
    assert maximum_number([1, 19, 93, 44, 2885, 83, 379, 3928]) == 93834439283792885191
</code></pre>

<p>The second and third test case break implementations that would try to use something like <code>sorted(numbers, key=str, reverse=True)</code> (lexicographical sort) directly.</p>

<hr>

<p><sup>1</sup> Thanks to <a href="https://codereview.stackexchange.com/users/50567">Peter Cordes</a> for <a href="https://codereview.stackexchange.com/questions/223399/find-max-number-you-can-create-from-an-array-of-numbers/223402#comment433088_223402">pointing out</a> the inaccurate wording here in earlier revisions.</p>
    </div>