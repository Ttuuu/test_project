<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Going from top to bottom.  </p>

<p><code>EntryPoint</code></p>

<pre><code>Stopwatch timeAccumulator = new Stopwatch();
timeAccumulator.Start();  
</code></pre>

<p>can be simplified by using <code>var</code> instead of the concrete type and by using the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch.startnew?view=netframework-4.8#System_Diagnostics_Stopwatch_StartNew" rel="nofollow noreferrer"><code>static Stopwatch Stopwatch.StartNew()</code></a> method.  </p>

<p><code>Position</code>  </p>

<pre><code>public override bool Equals(object obj)
{
    if(obj.GetType() == typeof(Position))
    {
        Position cast = obj as Position;
        return
            this.X == cast.X &amp;&amp;
            this.Y == cast.Y;
    }

    return false;
}  
</code></pre>

<p>can be simplified like so  </p>

<pre><code>public override bool Equals(object obj)
{
    if(obj is Position cast)
    {
        return
            this.X == cast.X &amp;&amp;
            this.Y == cast.Y;
    }

    return false;
}   
</code></pre>

<p>You don't check wether <code>x</code> or <code>y</code> is in a valid range. I don't know if your code get problems if either of this will be negative. If yes you should check these parameters in your constructor and add validation for the property-setter as well.  </p>

<p><code>Chunk</code>  </p>

<pre><code>public Chunk(int x, int y)
{
    this.Position = new Position(x, y);
    this.Data = new RenderingPixel[CHUNK_WIDTH, CHUNK_HEIGHT];
}  
</code></pre>

<p>can be simplified by using constructor chaining like so  </p>

<pre><code>public Chunk(int x, int y) : this(new Position(x, y))
{}
</code></pre>

<p><code>ChunkManager</code>  </p>

<p>In <code>AdjustPosition()</code> and other methods you should place a guarding clause to return early. This saves one indentation level for the whole method like so  </p>

<pre><code>private bool AdjustPosition()
{
    if(!Console.KeyAvailable) { return false; }

    ConsoleKey keyPressed = Console.ReadKey(false).Key;
    switch(keyPressed)
    {
        case ConsoleKey.UpArrow:
            this.Position.Translate(0, -TRANSLATE_Y);
            break;

        case ConsoleKey.DownArrow:
            this.Position.Translate(0, TRANSLATE_Y);
            break;

        case ConsoleKey.LeftArrow:
            this.Position.Translate(-TRANSLATE_X, 0);
            break;

        case ConsoleKey.RightArrow:
            this.Position.Translate(TRANSLATE_X, 0);
            break;
    }

    return true;
}
</code></pre>

<p>and by adding the <code>ConsoleKey</code>'s and <code>Action&lt;int, int&gt;</code> to a dictionary you can replace the <code>switch</code> completely.  </p>

<p><code>General</code>  </p>

<p>The usage of <code>this</code> adds only noise to your code. Just use it only if you really need to use it. </p>
    </div>