<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Eliminating useless code</h1>
<p>Enumerating a range is really pointless</p>
<pre><code>In [6]: sample_size = 5

In [7]: for i, experimentNumber in enumerate(range(sample_size)):
   ...:     print(i, experimentNumber)
   ...:     
0 0
1 1
2 2
3 3
4 4
</code></pre>
<p>So we can easily replace one by the other. We do not even need to replace as <code>experimentNumber</code> is not used anywhere. Next we notice that <code>i</code> is also used only once where we can replace <code>results[i-5:]</code> by superior construct <code>results[-6:]</code>.
We also eliminate the superfluous exception handling. So far this is already covered by @ppperys answer.</p>
<h1>Efficiency</h1>
<p>you create a complet list of length <code>sample_size</code> of random values in memory. This is not required and may be a problem on big sample sizes. As you always need the last 6 values only you could go for <code>collections.deque</code> which can maintain a <code>maxlen</code>.</p>
<pre><code>from collections import deque
results = deque(maxlen=6)
</code></pre>
<p>For the evaluation made easy we do not use <code>('H', 'T')</code> but numbers. We do not need to comare with a streak any more but do it arithmetically. Here is the only pitfall - we must check if the queue is filled completely to not accidentally accept a short sequence of zeros.</p>
<pre><code>for _ in range(sample_size):
    results.append(random.choice((0, 1)))
    if len(results) == 6 and sum(results) in (0, 6):
        numberOfStreaks += 1
</code></pre>
<p>This not only saves memory but we also get rid of a temporary <code>temp</code> and the predifined <code>head_streak</code> and <code>tail_streak</code>. We notice the magic number <code>6</code> appearing multiple times - use a variable. We also make a testable function. We end up with</p>
<pre><code>import random
from collections import deque

def streak_probability(streak_len, sample_size):
    results = deque(maxlen=streak_len)
    numberOfStreaks = 0
    for _ in range(sample_size):
        results.append(random.choice((0, 1)))
        if len(results) == streak_len and sum(results) in (0, streak_len):
            numberOfStreaks += 1
    return numberOfStreaks / sample_size


print('Chance of streak: %s%%' % (streak_probability(6, 1000000))
</code></pre>
<h1>Algorithm</h1>
<p>This simulation will give good results for big numbers of <code>sample_size</code>. However if the sample size was smaller than <code>6</code> it will always return <code>0</code>. As you divide the final streak count by the sample size you indicate, that you would like to get the probability of a streak per "additional" coin toss. So we should fill the queue before starting to count. That way an average of a large number of runs with a small sample size would match a single run of a large sample size. If we prefill we do not have to check the fill state of the queue (yes I filled to the max while one less would be sufficient).</p>
<pre><code>def prefilled_streak_probability(streak_len, sample_size):
    results = deque((random.choice((0, 1)) for _ in range(streak_len)), maxlen=streak_len)
    numberOfStreaks = 0
    for _ in range(sample_size):
        results.append(random.choice((0, 1)))
        if sum(results) in (0, streak_len):
            numberOfStreaks += 1
    return numberOfStreaks / sample_size
</code></pre>
<p>Now test the difference - we compare the original sample size of 1.000.000 to 100.000 repetitions of sample size 10</p>
<pre><code>s=10
n=100000
print('no prefill')
print('Single big sample - Chance of streak: %s%%' % (streak_probability(6, s*n)))
probs = [streak_probability(6, s) for _ in range(n)]
print('Multiple small samples - Chance of streak: %s%%' % (sum(probs)/len(probs)))

print('with prefill')
print('Single big sample - Chance of streak: %s%%' % (prefilled_streak_probability(6, s*n)))
probs = [prefilled_streak_probability(6, s) for _ in range(n)]
print('Multiple small samples - Chance of streak: %s%%' % (sum(probs)/len(probs)))
</code></pre>
<p>we get</p>
<pre><code>no prefill
Single big sample - Chance of streak: 0.031372%
Multiple small samples - Chance of streak: 0.01573599999999932%
with prefill
Single big sample - Chance of streak: 0.031093%
Multiple small samples - Chance of streak: 0.031131999999994574%
</code></pre>
    </div>