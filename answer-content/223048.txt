<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public const double lowerLatitude = 49.8333333 * Mathf.Deg2Rad;
</code></pre>
</blockquote>

<p>Huh? <code>Mathf.Deg2Rad</code> is a <code>float</code>. Either use <code>Math.PI / 180</code> or change the type of <code>lowerLatitude</code> to <code>float</code>, but don't work with low-precision values and then implicitly claim that the result is high-precision.</p>

<hr>

<blockquote>
<pre><code>static double MLower { get =&gt; M(lowerLatitude);}
</code></pre>
</blockquote>

<p>This (and all the other similar lines) is weird. I can understand using the old-style</p>

<pre><code>static double MLower { get { return M(lowerLatitude); } }
</code></pre>

<p>or the new-style</p>

<pre><code>static double MLower =&gt; M(lowerLatitude);
</code></pre>

<p>but the only reason I can see to use the hybrid form is if there's also a setter.</p>

<hr>

<p>Actually, I think there's a better way to handle derived constants. If you use <code>static readonly</code> fields and a static constructor, the calculation only has to be done once and the methods which you created to share the code can be hidden inside a private scope. Following t3chb0t's comments on variable names:</p>

<pre><code>static readonly double E = System.Math.Sqrt((2 - f) * f);

static readonly double M1;
static readonly double M2;

static readonly double T1;
static readonly double T2;
static readonly double T0;

static readonly double N;
static readonly double G;
static readonly double R0;

static YourClassNameHere()
{
    (double, double) MT(double ϕ)
    {
        double cosϕ = System.Math.Cos(ϕ);
        double e_sinϕ = E * System.Math.Sin(ϕ);
        double m = cosϕ / System.Math.Sqrt(1 - System.Math.Pow(e_sinϕ, 2));
        double t = System.Math.Tan(Mathf.PI / 4 - ϕ / 2) / System.Math.Pow((1 - e_sinϕ) / (1 + e_sinϕ), E / 2);
        return (m, t);
    }

    double _;
    (_, T0) = MT(ϕ0);
    (M1, T1) = MT(ϕ1);
    (M2, T2) = MT(ϕ2);

    N = System.Math.Log(M1 / M2, T1 / T2);
    G = M1 / (N * System.Math.Pow(T1, N));
    R0 = a * G * System.Math.Pow(T0, N);
}
</code></pre>

<p>Note that I've also refactored <code>N</code> to an algebraically equivalent expression (<span class="math-container">\$\log(x/y)=\log x - \log y\$</span> and <span class="math-container">\$\log_b x = \log x / \log b\$</span>) and verified that the result is the same.</p>

<hr>

<p>And as a minor point of spelling: in English the non-circularity of an ellipse is <em>eccentricity</em> with a double-<em>c</em>, reduced from the <em>-xc-</em> of its etymology.</p>
    </div>