<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public HashCash() throws NoSuchAlgorithmException {
</code></pre>
<p>SHA-256 is a requirement for any Java SE environment. Instead of throwing you should be catching and converting to a <code>RuntimeException</code> (or <code>IllegalStateException</code>) with this particular exception as cause.</p>
<pre><code>public long generateHashCash(final String seed, final int targetLevel) {
...
private final int getSecurityLevel(final String value) {
</code></pre>
<p>If you're going to design for performance you should <strong>not</strong> be using <code>String</code> types. The seed should be a byte array from the start. And you could use e.g. <code>ByteBuffer</code> to write an integer to an existing array that already starts with the <code>seed</code>.</p>
<p>Note that SHA-256 is a Merkle-Damgard hash function that handles input block-by-block. That means that if you start off with a large enough seed (512 bits or larger) you might as well pre-hash it. Of course this means mucking about <strong>within</strong> the hash implementation.</p>
<pre><code>if(b != 0)
    break;
level++;
</code></pre>
<p>Generally the level calculation is performed on bits or even values (where the hash value, when seen as a unsigned number, is below a certain value).</p>
<p>As for performance: you can stop comparing whenever you encounter a number that <em>doesn't have</em> the right level. It won't matter much when compared the time required to perform SHA-256 in all probability, but it is still wasteful.</p>
<p>I don't expect <code>getSecurityLevel</code> to perform the actual hash calculation. A getter is generally not expected to perform any work at all.</p>
<p>The PHP code doesn't seem to reflect the structure of the Java application. If you have one <code>getSecurityLevel</code> method I would expect the same in the verification application, whichever language is used.</p>
<hr>
<p>Otherwise, yes, it is a very simple proof of work. I'd rather require a <em>few</em> hashes instead of one, to average out the amount of work performed. With just one hash there will be a lot of luck involved, and the actual work will therefore vary rather wildly.</p>
<p>In the unlikely case that you've invented yet another popular PoW: I'd use 128 bits rather than a 64 bit long. It's pretty easy to make a counter that operates on bytes directly, so you would not even have to convert to the binary values required for the hashing.</p>
    </div>