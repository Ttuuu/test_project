<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Combine declarations and initialization if you can</h3>

<blockquote>
<pre><code>    private Map&lt;Integer, Node&gt; nodeMap;
    private DoubleLinkedList lruList;
</code></pre>
</blockquote>

<p>Consider </p>

<pre><code>    private final Map&lt;Integer, Node&gt; nodeMap = new HashMap&lt;&gt;();
    private final DoubleLinkedList lruList = new DoubleLinkedList();
</code></pre>

<p>This uses the <code>&lt;&gt;</code> notation to save having to list the types twice.  This is more robust than the original, as you can make the change in only one place.  You don't need parallel changes.  Of course, the compiler would probably warn you anyway.  </p>

<p>You don't have to make these <code>final</code>, but it can help make clear that you never discard them.  This is a preference rather than a requirement.  Some find it verbose.  Some find that it <a href="http://www.javapractices.com/topic/TopicAction.do?Id=23" rel="noreferrer">clarifies your intent</a>.  </p>

<h3>Reuse what you already have</h3>

<blockquote>
<pre><code>        if(size == capacity) evict();
</code></pre>
</blockquote>

<p>You don't need to maintain your own <code>size</code> variable.  </p>

<pre><code>        if (nodeMap.size() == capacity) {
            evict();
        }
</code></pre>

<p>Then you can get rid of the declaration and updates for the <code>size</code> variable.  This will just use the value that <code>nodeMap</code> already maintains.  </p>

<p>I also prefer to always use the block form of control structures rather than the statement form.  <a href="https://softwareengineering.stackexchange.com/q/16528/236539">More discussion</a>.  </p>

<h3>Keep it simple</h3>

<blockquote>
<pre><code>    public LRUCache(int capacity) {
        assert capacity &gt; 0;
        this.nodeMap = new HashMap&lt;Integer, Node&gt;();
        this.lruList = new DoubleLinkedList();
        this.size = 0;
        this.capacity = capacity;
    }
</code></pre>
</blockquote>

<p>With the previous changes, this could just be </p>

<pre><code>    public LRUCache(int capacity) {
        assert capacity &gt; 0;
        this.capacity = capacity;
    }
</code></pre>

<p>This mostly saves you in typing.  You don't need <code>this.nodeMap;</code> and <code>this.lruList;</code>.  It also means that you don't have to figure out that the other lines are not dependent on the value of <code>capacity</code>.  </p>

<p>Alternatively, consider </p>

<pre><code>    public LRUCache(int capacity) {
        assert capacity &gt; 0;
        nodeMap = new HashMap&lt;Integer, Node&gt;(capacity);
        this.capacity = capacity;
    }
</code></pre>

<p>You don't need the <code>this.</code> with <code>nodeMap</code>.  There is no ambiguity.  There is only one <code>nodeMap</code> visible in this method.  You can use it if you want to do so for clarity or readability.  You just aren't required to use it for the method to compile.  </p>

<p>Passing <code>capacity</code> to the <code>HashMap</code> constructor allows it to size appropriately.  This way it won't resize as much as it grows.  Since a resize can be an expensive operation, this may be more efficient.  </p>

<p>Don't forget to remove the initialization with the declaration if you do this.  Otherwise, the <code>final</code> will cause an error.  Without the <code>final</code>, it will just be wasteful.  </p>

<p>You do need the <code>this.</code> with <code>capacity</code>.  There are two variables with that same name visible in this method.  </p>

<h3><code>LinkedHashMap</code></h3>

<p>Also consider </p>

<pre><code>    public LRUCache(int capacity) {
        assert capacity &gt; 0;
        this.capacity = capacity;

        nodeMap = new LinkedHashMap&lt;Integer, Integer&gt;(capacity, .75, true) {

            @Override
            protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest) {
                return size() &gt; LRUCache.this.capacity;
            }

        };
    }
</code></pre>

<p>The anonymous class replaces the <code>evict</code> functionality.  After it adds a new element, it tests if the capacity is overtaken.  If so, it removes the oldest element.  </p>

<p>The <code>.75</code> is the default load factor and the <code>true</code> tells it to use access order for the ordering.  </p>

<p>I haven't tested this, so I'm not sure what other changes you'd have to make to get this working.  </p>

<p>The goal here is to simplify the methods, as the <code>LinkedHashMap</code> manages some of the complexity.  </p>
    </div>