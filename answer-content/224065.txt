<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your game has the same kind of flaw like a lot of the other games that have recently been here on Code Review: an unnecessary recursion in the main game flow:</p>

<p>What do I mean by that? Let's look at your <code>main</code> function:</p>

<pre><code>def main(): 

    # ... all of the actual game here ...

    if play_again():
        main()
    else:
        print("Goodbye!")
        raise SystemExit
</code></pre>

<p>As one can clearly see <code>main</code> will call <code>main</code> every time the player chooses to play another round, leading to deeper and deeper recursion. If someone would be really obsessed with your game and would try to play more than <code>sys.getrecursionlimit()</code> games (here on my machine it's 3000), there would be a <code>RuntimeError</code>.</p>

<p>Fortunately this can easily be fixed using a simple <code>while</code> loop:</p>

<pre><code>def main():
    while True:

        # ... all of the actual game here ...

        if not play_again():
            print("Goodbye!")
            break
</code></pre>

<p>Recursion gone, welcome binge playing till your fingers bleed.</p>

<hr>

<p>Now that we have that sorted out, let's look at some of the details of your code.</p>

<h2>print_*</h2>

<p>Not much to critique here, but I would like to introduce you to <a href="https://docs.python.org/3/library/textwrap.html#textwrap.dedent" rel="nofollow noreferrer"><code>textwrap.dedent</code></a>. <code>textwrap.dedent</code> allows you to indent text blocks as you would do with code and then takes care to remove the additional leading whitespace.</p>

<pre><code>from textwrap import dedent


def print_title():
    print(
        dedent(r"""
             ______     __  __     ______     __    __     ______  
            /\  ___\   /\ \_\ \   /\  __ \   /\ "-./  \   /\  == \ 
            \ \ \____  \ \  __ \  \ \ \/\ \  \ \ \-./\ \  \ \  _-/ 
             \ \_____\  \ \_\ \_\  \ \_____\  \ \_\ \ \_\  \ \_\   
              \/_____/   \/_/\/_/   \/_____/   \/_/  \/_/   \/_/   
        """)
    )
</code></pre>

<p>But it basically boils down to personal taste which version you prefer. The same logic could be applied to <code>print_instructions</code> to only need a single call to <code>print</code>.</p>

<h2>who_goes_first</h2>

<p><code>who_goes_first</code> could be simplified a little bit:</p>

<pre><code>def who_goes_first():
    return random.choice(("computer", "human"))
</code></pre>

<p>Or even be left out? You current code does not use it.</p>

<h2>print_matrix</h2>

<p>Again, the code could be simplified a little bit, e.g. using <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a>:</p>

<pre><code>def print_matrix(matrix):
    for row in matrix:
        print(" ".join(row))
</code></pre>

<p>From what you can actually see, there should be no difference to the previous output, but there is actually no trailig whitespace in this version. You could even go a little bit futher than this using a list comprehension:</p>

<pre><code>def print_matrix(matrix):
    print("\n".join(" ".join(row) for row in matrix))
</code></pre>

<h2>validate_user_input / get_human_move</h2>

<p><code>validate_user_input</code> does a good job at validating the given user input, but keeps the results of the parsing to itself. That leads to duplicate code in <code>get_human_move</code>. With a little bit of rewriting that duplication can be removed:</p>

<pre><code>def validate_user_input(player_choice, board):
    try:
        row, col = player_choice.split()
    except ValueError:
        raise ValueError(
            "Bad input: The input should be exactly two numbers separated by a space."
        )

    try:
        row = int(row)
        col = int(col)
    except ValueError:
        raise ValueError(
            "Input must be two numbers, however non-digit characters were received."
        )

    if row &lt; 0 or row &gt; NUM_ROWS - 1:
        raise ValueError(
            f"The first number must be between 0 and {NUM_ROWS - 1} but {row} was passed."
        )

    if col &lt; 0 or col &gt; NUM_COLS - 1:
        raise ValueError(
            f"The second number must be between 0 and {NUM_COLS - 1} but {col} was passed."
        )

    if board[row][col] == " ":
        raise ValueError("That square has already been eaten!")

    return row, col


def get_human_move(board):
    while True:
        player_choice = input("Enter the row and column of your choice separated by a space: ")
        try:
            row, col = validate_user_input(player_choice, board)
            break
        except ValueError as ex:
            print(ex)
    return row, col
</code></pre>

<p>So what has happened here?</p>

<ol>
<li><code>validate_user_input</code> now does not print the error message itself, but raises an informative exception instead.</li>
<li>if no reason to raise an exception has occured, <code>validate_user_input</code> now returns <code>row</code> and <code>col</code>, to they do not need to be recomputed in <code>get_human_move</code></li>
<li><code>get_human_move</code> was adapted to that change and now tries to get the validated user input, prints the reason if that fails, and asks the user to try again.</li>
</ol>

<p>Of course, raising exceptions is just one way to do this. There are many other ways that lead to a similar structure.</p>

<p>If you decide to implement these changes, <code>parse_user_input</code> is maybe a more appropiate name now, given its new capabilites.</p>

<p>You might want think about passing <code>NUM_ROWS</code>/<code>NUM_COLS</code> as parameters or determine it from <code>board</code> to cut down on global variables as well.</p>

<p><strong>Quick sidenote:</strong> 0-based indexing might be unfamiliar to people that have no programming backgroud (or use MatLab all the time ;-)), so maybe allow the user to enter 1-based indices and substract 1 before validation.</p>

<h2>update_board</h2>

<p>Depending on your choice on the previous point, this is either the way to go, or you should use <code>NUM_ROWS</code>/<code>NUM_COLS</code> here too to be consistent.</p>

<h2>get_computer_move</h2>

<p>Maybe you shoud add some simple heuristics to make your computer a little bit smarter, e.g. it sometimes chooses to take the poison even if it still has alternatives, or even the possibilty to win. Also (theoretically), it is be possible that this random sampling algorithm never finds a valid solution ;-) To avoid that, generate a list of valid rows and values, and pick a sample from these lists.</p>

<p>If you stick to the current approach, you can at least get rid of the "support variable" <code>valid_move</code>:</p>

<pre><code>def get_computer_move(board):
    while True:
        row = random.randint(0, NUM_ROWS - 1)
        col = random.randint(0, NUM_COLS - 1)
        if board[row][col] == EMPTY_SPOT:
            continue
        else:
            break
    return row, col
</code></pre>

<h2>main</h2>

<p><code>main</code> already had some structural remarks, so let's look at its code a little bit:</p>

<p>This </p>

<pre><code>board = []
for i in range(NUM_ROWS):
    row = []
    for j in range(NUM_COLS):
        row.append("#")
    board.append(row)
</code></pre>

<p>can be recuded to a single nested list comprehension:</p>

<pre><code>board = [["#" for _ in range(NUM_COLS)] for _ in range(NUM_ROWS)]
</code></pre>

<p>Depending on your choice regarding the global variables, <code>NUM_ROWS</code>/<code>NUM_COLS</code> would need to be removed here to. Maybe even allow them to be set as <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">command line arguments</a> by the user?</p>

<p>The rest of the code has some "magic values" (they are not so magic in your case), e.g. <code>board[0][0] = "P"</code>, <code>turn = "computer"</code>, and <code>turn = "human"</code> (there was also <code>" "</code> earlier to mark empty spots). The problem with those "magic values" is that your IDE has no chance to help you spot errors. You did write <code>"p"</code> instead of <code>"P"</code> and now the game does weird things? Too bad. You will have to find that bug yourself! The way to go about this would be to use global level constants, because this is what globals are actually good for, or an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a> if you have several distint values like human and computer.</p>

<p>This is a possible way to do it (with a sketch of how main would look like):</p>

<pre><code>FILLED_SPOT = "#"
POISON_SPOT = "P"
EMPTY_SPOT = " "


class Actor(enum.Enum):
    HUMAN = "human"
    COMPUTER = "computer"

# ... lot of code here ...

def main():
    while True:
        board = [[FILLED_SPOT for _ in range(NUM_COLS)] for _ in range(NUM_ROWS)]

        board[0][0] = POISON_SPOT
        turn = Actor.HUMAN  # or: who_goes_first()

        # ...

        while game_is_playing:
            if turn == Actor.HUMAN:
                # Human turn
                # ...
                if board[row][col] == POISON_SPOT:
                    # ...
                else:
                    # ...
                    turn = Actor.COMPUTER
            else:
                # Computer turn
                # ...
                if board[row][col] == POISON_SPOT:
                    # ...
                else:
                    # ...
                    turn = Actor.HUMAN

        if not play_again():
            print("Goodbye!")
            break


</code></pre>

<p>I chose this to showcase both variants. In your case to could also just use either of those, no need to have both of them in the game.</p>

<hr>

<p>All of this may sound harsh, but it really isn't meant that way! Your code is actually quite enjoyable to review. Your style is quite consistent, the names are good and the general structure is clear.</p>

<p>Keep up the good work!</p>
    </div>