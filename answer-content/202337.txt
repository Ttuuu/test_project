<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation is great and works well, but there are some things you could change.</p>

<h3>Eliminate repetitive code</h3>

<p>You have two large methods, <code>moveCardLeft</code> and <code>moveCardRight</code>, that do almost the same thing. These can either be combined entirely or the matching code can be separated out to a new method and referenced by the original two. For my example, I chose the former:</p>

<pre><code>moveCard(card, dir) {
  let nextIndex = this.state.colIds.indexOf(card.colid);

  if (dir === "left") nextIndex--;
  else if (dir === "right") nextIndex++;
  else return null;

  if (nextIndex &lt; 0 || nextIndex &gt; this.state.colIds.length - 1) {
    return null;
  }

  let currentCards = this.state.cards.slice();
  for (let i = 0; i &lt; currentCards.length; i++) {
    if (currentCards[i].task === card.task) {
      currentCards[i] = {
        ...currentCards[i],
        colid: this.state.colIds[nextIndex]
      }
    }
  }
  this.setState({ cards: currentCards });
}
</code></pre>

<p>With this, you just have to pass in an extra parameter for the direction (left or right). It eliminates the repetition which is almost always beneficial.</p>

<h3>Use consistent formatting</h3>

<p>This includes indentation, new lines, and general spacing.</p>

<p>As you have it written in your post (maybe this is just a copy/paste error), the <code>map</code> inside of a <code>map</code> in your render method is not indented properly, which will undoubtedly confuse you at some point. Here is what it should look like:</p>

<pre><code>render() {
  let cols = [
    { name: "Winnnie", headerColor: "#8E6E95" },
    { name: "Bob", headerColor: "#39A59C" },
    { name: "Thomas", headerColor: "#344759" },
    { name: "George", headerColor: "#E8741E" }
  ];
  let colCards = this.state.cols.map(c =&gt; {
    let cards = this.getColCards(c.id).map(c =&gt; {
      return (
        &lt;div&gt;
          &lt;span onClick={() =&gt; this.moveCard(c, "left")}&gt;{"&lt;   "}&lt;/span&gt;
            {c.task}
          &lt;span onClick={() =&gt; this.moveCard(c, "right")}&gt;{"    &gt;"}&lt;/span&gt;
        &lt;/div&gt;
      );
    });

    return (
      &lt;CardCol name={c.name} headerColor={c.headerColor} addCard={this.addCard} id={c.id}&gt;
        {cards}
      &lt;/CardCol&gt;
    );
  });

  return (
    &lt;div className="App"&gt;
      {colCards}
    &lt;/div&gt;
  )
}
</code></pre>

<h3>Other thoughts</h3>

<ul>
<li>Use strict equality (<code>===</code>) by default and only fall back to loose/abstract equality (<code>==</code>) when absolutely necessary.</li>
<li>Consider how much more concise your code could be if you got rid of the <code>colIds</code> and simply used the <code>cols</code> instead to organize the cards. Additionally, consider placing the <code>cards</code> inside of their respective <code>cols</code> instead of separating them out into their own object. I haven't tried this on your code, so it may end up being less concise, but it's good to consider various data structures in anything you write.</li>
</ul>
    </div>