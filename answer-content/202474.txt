<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with the other answer; I like your attempt so far.  The code works and it's quite readable - but that's only because its a small project.  I wanted to point out a major flaw in your approach so far:</p>

<p>Your <code>render()</code> function includes game logic such as detecting collisions. There are many reasons why this is bad idea, but the most succinct way of explaining it is that it violates the <strong>Single Responsibility Principle</strong> quite severely.  All game engines separate their rendering and update logic.  The easiest way to correct this is to move all non-rendering logic into a new <code>update()</code> function, which runs just before the <code>render()</code> function in a new <code>mainLoop()</code> function.</p>

<pre><code>// Create a new function to be called every frame
requestAnimationFrame(mainLoop);

function mainLoop() {
   // move game logic into here
   update();

   // leave remaining rendering code here
   render();
}
</code></pre>

<p>You can refactor further than this (quite significantly so), but this a good first initial refactoring, which will make your code easier to maintain.  I would Google "fix your timestep" and look into articles relating to timing and how your game behaves when framerates drop, and how it behaves on devices with lower processing power, such as mobile.</p>

<p><em>And as an aside, you should seriously consider converting this to TypeScript if you plan for the game to grow much beyond what it is now, in fact I would argue it's a must for any project larger than a simple forms app, but that's just an opinion.</em></p>
    </div>