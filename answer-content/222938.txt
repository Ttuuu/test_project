<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>- <code>float</code></strong></p>

<p><code>float</code> constants need the suffix <code>f</code>:</p>

<pre class="lang-c prettyprint-override"><code>static const float  EXPANSION_POINT = 1.0f;
</code></pre>

<p>if not, you're assigning a <code>double</code> constant implicitly converted to <code>float</code>.</p>

<hr>

<p><strong>- functions that accept 0 parameters</strong></p>

<p>Functions that accept 0 parameters should always be defined as <code>type foo(void)</code></p>

<p><code>type foo()</code> means different things depending on the context.  It is different in prototypes (accept any parameters) and definitions (accept 0 parameters), so it's better to avoid that and explicitly use <code>(void)</code>.</p>

<hr>

<p><strong>- <code>sizeof(type)</code> vs <code>sizeof(*pointer)</code></strong></p>

<p>It's better to use <code>sizeof(*pointer)</code> so that if the type of <code>pointer</code> ever changes, the code is still valid.</p>

<hr>

<p><strong>- Be careful with error handling</strong></p>

<p>It's better to use <code>sizeof(*pointer)</code> so that if the type of <code>pointer</code> ever changes, the code is still valid.</p>

<p>In this code of yours:</p>

<pre class="lang-c prettyprint-override"><code>    DynamicArray_##T *self = malloc(sizeof(DynamicArray_##T));      \
    array = malloc(INIT_CAPACITY * sizeof(T));                      \
    if (self == NULL || array == NULL)                              \
    {                                                               \
        return NULL;                                                \
    }                                                           
</code></pre>

<p>Imagine that one of the allocations fails but the other doesn't.</p>

<p>Solution:</p>

<pre class="lang-c prettyprint-override"><code>    self    = malloc(sizeof(*self));                                \
    if (!self)                                                      \
        return  NULL;                                               \
    array   = malloc(sizeof(*array) * INIT_CAPACITY);               \
    if (!array)                                                     \
        goto err_array;                                             \
...
err_array:                                                          \
    free(self);                                                     \
    return  NULL;                                                   \
</code></pre>

<hr>

<p><strong>- Reached end of non-void function</strong></p>

<p>In the function <code>DynamicArray_##T   *dynamic_array_##T##_construct(void)</code> you forgot the final <code>return</code> statement.</p>

<p>Fixed:</p>

<pre class="lang-c prettyprint-override"><code>#define DEFINE_DYNAMIC_ARRAY_CTOR(T)                    
DynamicArray_##T    *dynamic_array_##T##_construct(void)            \
{                                                                   \
    DynamicArray_##T    *self;                                      \
                                                                    \
    self    = malloc(sizeof(*self));                                \
    if (!self)                                                      \
        return  NULL;                                               \
    self-&gt;array = malloc(sizeof(*self-&gt;array) * INIT_CAPACITY);     \
    if (!self-&gt;array)                                               \
        goto err_array;                                             \
                                                                    \
    self-&gt;capacity = INIT_CAPACITY;                                 \
    self-&gt;size = 0;                                                 \
    self-&gt;load = 0.0;                                               \
                                                                    \
    return  self;                                                   \
                                                                    \
err_array:                                                          \
    free(self);                                                     \
    return  NULL;                                                   \
}
</code></pre>

<hr>

<p><strong>- <code>ptrdiff_t</code></strong></p>

<p>The appropriate type for pointer arithmetics (and a dynamic array is full of that) is <code>ptrdiff_t</code>.  Of course <code>int</code> will work in almost any case (unless you plan to have an array with more than ~2 thousand million elements), but <code>ptrdiff_t</code> helps self-documenting the code.</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;stddef.h&gt;

static const ptrdiff_t  INIT_CAPACITY = 10;

#define DEFINE_DYNAMIC_ARRAY_STRUCT(T)                              \
struct DynamicArrayTag_##T {                                        \
    float       load;                                               \
    ptrdiff_t   size;                                               \
    ptrdiff_t   capacity;                                           \
    T           *array;                                             \
};                                                                  \
typedef struct DynamicArrayTag_##T DynamicArray_##T;
</code></pre>

<hr>

<p><strong>- comparing floating-point variables</strong></p>

<p>There are infinite different real numbers between any two given numbers.  In C, that is not true, because of obvious reasons.  But there are still too many different <code>float</code> possible values between <em>any</em> two given values.</p>

<p>Comparisons like <code>if (self-&gt;load == EXPANSION_POINT)</code> are unlikely to work.</p>

<p>Depending on the desired behavior, the solution is easy or not.  In this case it is easy:</p>

<pre class="lang-c prettyprint-override"><code>if (self-&gt;load &gt;= EXPANSION_POINT)
</code></pre>

<hr>

<p><strong>- nmemb vs size</strong> (This is somewhat personal; feel free to disagree)</p>

<p>There is a slight difference between the terms size and nmemb.</p>

<p><code>size</code> is a name normally used to mean absolute size in Bytes.  Its natural type is <code>size_t</code>.</p>

<p><code>nmemb</code> is a name normally used to mean <strong>n</strong>umber of <strong>memb</strong>ers of an array.  Its natural type is <code>ptrdiff_t</code>, although <code>size_t</code> is not uncommon to see (sadly).</p>

<p>So, I would change the <code>struct</code> this way:</p>

<pre class="lang-c prettyprint-override"><code>#define DEFINE_DYNAMIC_ARRAY_STRUCT(T)                              \
struct DynamicArrayTag_##T {                                        \
    float       load;                                               \
    ptrdiff_t   nmemb;                                              \
    ptrdiff_t   capacity;                                           \
    T           *array;                                             \
};                                                                  \
typedef struct DynamicArrayTag_##T DynamicArray_##T;
</code></pre>

<hr>

<p><strong>- <code>double</code> vs <code>float</code></strong></p>

<p>Unless you have a very good reason, always use <code>double</code>.</p>

<p>It's usually faster, and has a lot more precission.  Only some embedded systems should use <code>float</code>.  Or one can also use <code>float</code> for huge arrays of floating-point numbers, where precission is not important, and cache/RAM speed is a problem.</p>

<pre class="lang-c prettyprint-override"><code>#define EXPANSION_POINT     (1.0) /* load &gt; this -&gt; array expands */
#define CONTRACTION_POINT   (0.3) /* load &lt; this -&gt; array contracts */
/* Expanded capacity = this * old capacity */
#define EXPANSION_FACTOR    (2.0)
/* Contracted capacity = this * old capacity */
#define CONTRACTION_FACTOR  (0.5)

#define DEFINE_DYNAMIC_ARRAY_STRUCT(T)                              \
struct DynamicArrayTag_##T {                                        \
    double      load;                                               \
    ptrdiff_t   nmemb;                                              \
    ptrdiff_t   capacity;                                           \
    T           *array;                                             \
};                                                                  \
typedef struct DynamicArrayTag_##T DynamicArray_##T;
</code></pre>

<hr>

<p><strong>- <code>EXPANSION_POINT</code></strong></p>

<p>Given the instability of floating-point arithmetics, I would set the expansion point a bit lower than <code>1.0</code> (maybe <code>0.85</code>).</p>

<p>An even better option, if you want it to be <code>1</code> is to use the integer values directly (and delete <code>EXPANSION_POINT</code>):</p>

<pre class="lang-c prettyprint-override"><code>if (self-&gt;size == self-&gt;capacity)
        // Expand
</code></pre>

<hr>

<p>Fixed code sample:</p>

<pre class="lang-c prettyprint-override"><code>#define DEFINE_DYNAMIC_ARRAY_INSERT_ELEM(T)             
static int dynamic_array_##T##_insert_elem(DynamicArray_##T *self,  \
                                            T elem, ptrdiff_t i)    \
{                                                                   \
    ptrdiff_t   j;                                                  \
    int         status;                                             \
                                                                    \
    /* Expand if needed. */                                         \
    if (self-&gt;size == self-&gt;capacity) {                             \
        status = dynamic_array_##T##_expand(self);                  \
        if (status)                                                 \
            return  status;                                         \
    }                                                               \
                                                                    \
    for (j = self-&gt;nmemb; j &gt; i; j--)                               \
        self-&gt;array[j] = self-&gt;array[j - 1];                        \
    self-&gt;array[j] = elem;                                          \
    self-&gt;nmemb++;                                                  \
    dynamic_array_##T##_recalc_load(self);                          \
                                                                    \
    return  0;                                                      \
}
</code></pre>

<hr>
    </div>