<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, there are many things in this code which you did right. Setting the proper error reporting mode is brilliant! And always setting the port explicitly is also a very good thing, saving you from many confusions, on Mac especially. Setting the charset is also often forgotten while being very important.</p>
<p>However, too many things are wrong as well - on the conceptual, technological and the implementation levels. To highlight the main problems:</p>
<ul>
<li>if an error occurs, a web page should never return an OK signal. It should return an error signal instead. There is a thing called <em>HTTP response code</em> and your page should return different codes in different situations. In case of error it's 500, no 200 which your code currently returns.</li>
<li>with this code <em>you just left yourself without the explanation</em>, why the error occurred. The error message is invaluable source of information that could help you to fix the issue, but you are simply ditching it!</li>
<li>writing a dedicated code to handle every distinct error in your script is a waste. Or, to put the other way - why so much attention to the failed database connection? An include could fail as well. Just like there is no special error reporting code for the every include, there shouldn't be dedicated error reporting code for the DB connection as well. If every module would report its errors in its own manner the code would become a complete mess!</li>
<li>redirecting a user to the login page in case of error just makes no sense. What would they do there? An error page should stay where it is.</li>
<li>testing for the connection right after include is simply redundant. Can't your connection code already handle the failure? It can.</li>
<li>database credentials are hardcoded which makes the code less portable</li>
</ul>
<p>To solve these problems you must separate the error handling from the rest of your code and make it <em>uniform</em>, providing equal treatment for all errors in your application, no matter in which module or in which situation they occur.</p>
<h3>Reporting database errors</h3>
<p><em>Do not report them</em></p>
<p>I do understand where it's coming from. Every [insert your favorite obscene emphasis word here] example on the Net tells you to test for the connection success. So people just habitually reproduce this behavior. Which - if you think of it - is a nonsense. A database error is no different from any other error. If your script says "Oh my, headers already sent!" you don't wrap a <code>header()</code> function call in a try catch. But for some reason a database connection is followed by this honor guard everywhere. Well, just drop this bad habit. Make your database errors equal to all other errors.</p>
<h3>Reporting errors in general</h3>
<p>I do also understand why the error reporting is so much confused: every PHP apprentice profusely confuses themselves with a site user. No wonder why: during the development, they are the only site user for the long time, and just cannot imagine other people working with the site. But if you just think of it, the difference become apparent - you just need to distinguish a programmer from a site user, as they both require the completely different treatment. A site user doesn't care whether your database connection failed or a hard disk went nuts. All they need to know is that something went wrong but you are already working on it. Then <em>tell them exactly this.</em></p>
<p>On the other hand, when your site goes live, <em>you don't sit behind every PC</em> browsing your site. This means any specific error information you are displaying will go for naught. On a live site an error must be <em>logged</em>.</p>
<h3>Setting the proper charset.</h3>
<p>The older default for MySQL, <code>utf8</code> charset implements only a limited subset of the original UTF-8 standard. Hence, for the full Unicode support, and to avoid "Incorrect string value" errors caused by a mere emoji, always use <code>utf8mb4</code> charset.</p>
<h3>Storing database credentials</h3>
<p>Let's digress for a while from the main subject of error reporting and look at the database credentials. The present code is again the direct product of the "I am working alone on my home PC and it's going to be so forever" mindset. When the time comes, your site will go live. And a live site wold definitely have different credentials so you will need to rewrite them. And when you will need to work a bit more on the code, you will have to rewrite them back... and so on. Which is far from being convenient.</p>
<p>There are many advanced techniques for providing the settings but the <em>simplest</em> one would be just storing them in a separate file. This way you'll be able to keep different credentials files on different servers. So instead of hardcoding  the credentials, just use variables defined in a separate file:</p>
<pre><code>&lt;?php
$host = '127.0.0.1';
$port = 3306;
$db   = 'test';
$user = 'root';
$pass = '';
$charset = 'utf8mb4';
</code></pre>
<p>and then just include this file in your DB connection script</p>
<h3>Implementing all the above.</h3>
<p>In theory, given the connection shouldn't report errors by itself, only the following lines should be enough:</p>
<pre><code>mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
require __DIR__.'/db_credentials.php';
$mysqli = new mysqli($host, $user, $pass, $db, $port);
$mysqli-&gt;set_charset($charset);
unset($host, $db, $user, $pass, $charset); // we don't need them anymore
</code></pre>
<p>It will raise an error that would be handled elsewhere.</p>
<p>But given we are employing exceptions here, and every exception contains a <em>stack trace</em>, and a stack trace contains every function parameter used, there is a slight chance that database credentials could be leaked. To prevent even such a small chance, it's better to catch the exception and then throw a brand new one, which will have no stack trace and hence no database credentials to leak:</p>
<pre><code>mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
try {
    require __DIR__.'/db_credentials.php';
    $mysqli = new mysqli($host, $user, $pass, $db, $port);
    $mysqli-&gt;set_charset($charset);
} catch (\mysqli_sql_exception $e) {
     throw new \mysqli_sql_exception($e-&gt;getMessage(), $e-&gt;getCode());
} finally {
    unset($host, $db, $user, $pass, $charset);
}
</code></pre>
<p>Now if an en error occurs, the exception will contain only the error message but not a stack trace. Note that stack traces are <em>extremely helpful</em> for debugging and here we are ditching it only as a tradeoff between the security and usability. But as a rule you should preserve as much debugging information as possible.</p>
<p>So this is it for the connection. What about error reporting in general?</p>
<p>Everything said above is a gist of my article on PHP error reporting, where I have a <a href="https://phpdelusions.net/articles/error_reporting#code" rel="nofollow noreferrer">complete basic universal error handling solution</a>. This code does everything what was said above: in case of error it sets the appropriate HTTP response code, and then changes its behavior depends on the user's type: for a site user it logs the error while showing only a generic text, but for a programmer it will show the error message on-screen.</p>
<p>I wouldn't copy the exact code here because it constantly gets improved over time and better to get the latest version.</p>
<h3>How to actually use it?</h3>
<p>Just have three files somewhere in your codebase, <code>error_handler.php</code>, <code>mysqli.php</code>, <code>db_credentials.php</code>. Then <strong><code>require</code></strong> the first two in your application.</p>
    </div>