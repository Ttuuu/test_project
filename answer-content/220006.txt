<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately, I've never used spec, reframe or clojurescript before, but I can note general Clojure things that can be fixed up.</p>

<p><code>filter-people</code> has far too much nesting. Having code like you do affects readability (you need to read it bottom-up instead of top-down like you would most code), and makes it harder to add to (as you'll need to need adjust indentation and be careful with bracket addition). It would be much cleaner if you used <code>-&gt;&gt;</code> (the thread last macro) instead:</p>

<pre><code>(defn filter-people
  [peoples filters]
  (-&gt;&gt; filters
       (mapv
         (fn [[k v]]
           (filter #(= (k %1) v) peoples)))
       (flatten)
       (set)
       (vec))) ; Instead of (into [])
</code></pre>

<hr>

<p>Your <code>date+</code> functions have unnecessary duplication. I'd add a parameter for <code>days</code> to generalize them:</p>

<pre><code>(defn date+days [date days]
  (js/Date. (.getFullYear date) (.getMonth date) (+ (.getDate date) days)))
</code></pre>

<p>If you <em>really</em> wanted a <code>date+90</code> and other such functions, define them in terms of the generalized function:</p>

<pre><code>(defn date+90 [date]
  (date+days date 90))
</code></pre>

<p>Now if you need to make changes to the implementation, you aren't needing to change several functions. </p>

<hr>

<p>If I were you, I'd indent a little more. You have a single space of indentation in many places. Code like</p>

<pre><code>(fn [db [_ old-filter]]
  (assoc db 
         :filters 
         (filterv 
          #(not (= %1 old-filter))
          (:filters db)))))
</code></pre>

<p>Is harder to read than it needs to be. I would prefer putting small anonymous functions on the same line as the function they're being passed to, and use at least 2 spaces to indent. In this case, I might also use a <code>let</code> binding the break it up a bit so it's easier to process what's going on. Something closer to:</p>

<pre><code>(fn [db [_ old-filter]]
  (let [filtered (filterv #(not (= %1 old-filter))
                          (:filters db))]
    (assoc db :filters filtered)))
</code></pre>

<p>Also note, <code>(filter #(not ...</code> is common and has a shortcut function called <code>remove</code>. You could make use of it here:</p>

<pre><code>(remove #(= %1 old-filter) (:filters db))
</code></pre>

<p>Although this returns a lazy sequence and there is no <code>removev</code> version so if you definitely need a vector, you'll need to add a call to <code>vec</code>, or just use the version you had.</p>

<hr>

<p>Here</p>

<pre><code>(assoc db
       :filters
       (into 
        (:filters db)
        (map
         #(vec [key1 %1])
         values)))))
</code></pre>

<p>You're <code>assoc</code>iating to <code>db</code>, but the new value is dependent on the old value. When that's the case, it's often preferred to use <code>update</code> instead:</p>

<pre><code>(fn [db [_ key1 values]]
  (update db :filters
             (fn [fs]
               (into fs (map #(vec [key1 %1]) values)))))
</code></pre>

<p>Unfortunately, the gain isn't huge here because you're already using a short-hand function macro (<code>#()</code>), and they can't be nested. It often leads to cleaner code though.</p>

<hr>

<p>I'll just point out that here</p>

<pre><code>(contains? (set (:filters db)) k)))
</code></pre>

<p><code>contains?</code> is unnecessary. Sets can be invoked to test for membership.</p>

<pre><code>((set (:filters db)) k)
</code></pre>

<p>In some cases, (not necessarily here; see below though), that can lead to cleaner code.</p>

<p>Putting it in a set just to test for membership though seems rather inefficient. If it was already in a set, ya, a membership test would be fast. With how you have it now though, you're doing a full iteration of <code>(:filters db)</code> just so you can do an efficient lookup. A lookup of <code>(:filters db)</code> only requires a full iteration anyways though (in the worst case). I'd use <code>some</code> and check for equality:</p>

<pre><code>(some #(= k %) (:filters db))
</code></pre>

<p>or, to use the above set-as-a-function tip:</p>

<pre><code>(some #{k} (:filters db)) ; Use the set as a predicate
</code></pre>

<p>This will return the first true result, or <code>nil</code> (falsey) if a result isn't found. The early exit ensures it only does as much work as it needs to do.</p>
    </div>