<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>bug:</em></p>

<p>Trie implementations need to mark word endings somehow. e.g. If you add the word "bar" to end of the input string, it won't be inserted in the trie (because the trie already contains the whole word as a prefix of other words, e.g. "barndoor"). We can't tell that the word "bar" is there as a separate word because the last letter isn't a leaf node.</p>

<p>To mark the end of a word we need to either insert a special character that will always end up in a leaf node (e.g. '\0' or '~'), or add a boolean variable to <code>node_t</code>. (Using a special character may be more efficient, but obviously means we can't store strings containing that character).</p>

<hr>

<p><em>fun(?) fact:</em></p>

<p>If you reduce the input to just "bard", it will be printed by both of your <code>match</code> loops:</p>

<pre><code>for (string const&amp; w: t.match("bar")) cout &lt;&lt; w &lt;&lt; endl;
for (string const&amp; w: t.match("br")) cout &lt;&lt; w &lt;&lt; endl;
</code></pre>

<p>That seems incorrect.</p>

<hr>

<p>I'm not sure if it's causing the above issue, but this looks suspicious:</p>

<pre><code>    basic_string&lt;T&gt; s;
    vector&lt;basic_string&lt;T&gt;&gt; temp;

    for (const_iterator_type it = n-&gt;children.cbegin(); 
        it != n-&gt;children.cend();
        ++it)
    {
        temp = get_suffixes(it);
    }
    for (basic_string&lt;T&gt;&amp; s: temp) s = n-&gt;val + s;
</code></pre>

<p>We overwrite <code>temp</code> for each child, then only use the last value of <code>temp</code> after the loop.</p>

<hr>

<pre><code>trie() =  default;
...

vector&lt;basic_string&lt;T&gt;&gt;  match(const basic_string&lt;T&gt; &amp; s)
{
    basic_string&lt;T&gt; prefix;
    node_t const* n = root.get();
...
</code></pre>

<p><code>root.get()</code> will return <code>nullptr</code> for a default constructed trie (and then our <code>match</code> function will dereference it and crash). We could just return an empty vector (no matches) if the root isn't present.</p>

<hr>

<p>missing includes:</p>

<ul>
<li><code>#include &lt;algorithm&gt;</code> for <code>transform</code>.</li>
<li><code>#include &lt;iterator&gt;</code> for <code>istream_iterator</code>.</li>
</ul>

<hr>

<p><code>using namespace std;</code></p>

<p><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice?answertab=votes#tab-top">don't do that</a>.</p>

<hr>

<pre><code>struct node_t
{
    T val;
    vector&lt;trie&lt;T&gt;&gt; children;
    explicit node_t(const T&amp;  _val) : val(_val){};
};
</code></pre>

<p>I'd definitely expect <code>children</code> to be a vector of <code>node_t</code>, not a vector of <code>trie</code>s.</p>

<hr>

<p>There are several places we can use range-based for loops (and <code>auto</code>) to simplify the code, e.g.:</p>

<p><code>for (typename basic_string&lt;T&gt;::const_iterator s_it = s.cbegin(); s_it &lt; s.cend() ; ++s_it)</code></p>

<p><code>for (auto const&amp; s_it : s)</code></p>

<hr>

<pre><code>    typename vector&lt;trie&lt;T&gt;&gt;::const_iterator it;
    for (s_it = s.begin(); s_it &lt; s.end(); ++s_it)
    {

        it = lower_bound(n-&gt;children.cbegin(), n-&gt;children.cend(), *s_it);
        if (it != n-&gt;children.cend() &amp;&amp; !(*s_it &lt; *it))
            n = it-&gt;root.get();
        else break;
    }
</code></pre>

<p>Avoid reusing variables (unless they're expensive resources). In other words, declare <code>it</code> inside the loop.</p>

<p>(In this case <code>it</code>'s actually used in a return statement outside the loop, but if you fix the bug pointed out above, that should never happen. Also, since we return <code>false</code> as the second member of the pair, the user should never access that iterator, so there's no point in returning it.)</p>

<hr>

<pre><code>if (!root) root = std::make_unique&lt;node_t&gt;(s[0]);
</code></pre>

<p>It looks like the root node's <code>val</code> is ignored. This could perhaps be clearer in the code (e.g. add a comment and give it a <code>val</code> of <code>0</code> or some other placeholder, instead of <code>s[0]</code>).</p>

<hr>

<pre><code>    for (;s_it &lt; s.end(); ++s_it)
    {
        n-&gt;children.emplace_back(*s_it);
        sort(n-&gt;children.begin(), n-&gt;children.end()); 
        it = lower_bound(n-&gt;children.cbegin(), n-&gt;children.cend(), *s_it);
        n = it-&gt;root.get();
    }
</code></pre>

<p>It would be better to find the insertion point for the new child, and insert it there directly. Then we don't have to sort the entire vector <em>and</em> then search it anyway to find our lost child.</p>

<hr>

<pre><code>    if (s.empty()) return(make_pair(vector&lt;trie&lt;T&gt;&gt;().cend(),false));
</code></pre>

<p>We can default-construct an iterator, rather than creating an empty vector to get the end iterator.</p>

<p>With modern C++, we can use list initialization:</p>

<pre><code>    return { {}, false };
</code></pre>

<hr>

<p>Rather than overloading <code>operator&lt;</code>, we could create a functor, e.g.:</p>

<pre><code>struct node_t_less
{
    bool operator()(T a, node_t const&amp; b) const
    {
        return a &lt; b.val;
    }

    bool operator()(node_t const&amp; a, T b) const
    {
        return a.val &lt; b;
    }

    bool operator()(node_t const&amp; a, node_t const&amp; b) const
    {
        return a.val &lt; b.val;
    }
};
</code></pre>

<p>and pass it to the algorithms where necessary</p>

<pre><code>        auto h_it = lower_bound(n-&gt;children.cbegin(), n-&gt;children.cend(), *s_it, node_t_less());
</code></pre>
    </div>