<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wait, are the arrays already sorted?</p>

<p>These are just my initial thoughts, but:</p>

<ul>
<li><p>The initial creation of your new list I'm guessing is <span class="math-container">\$O(n)\$</span> to create a copy of array <code>a</code> (<span class="math-container">\$n\$</span> is the length of <code>a</code>). This might be unavoidable if you want a nondestructive function, though the arrays <em>are</em> passed in by value, so it may not be necessary.</p></li>
<li><p><code>List.Exists</code> is that it's a linear operation, so the combination of the two arrays I <em>think</em> will be <span class="math-container">\$O(m(n+m))\$</span> (<span class="math-container">\$m\$</span> is the length of <code>b</code>). I arrived at this conclusion because for every element in <code>b</code>, we have to search through our combined list. so that's <span class="math-container">\$m\$</span> * the search complexity. For the search complexity, since this is big <span class="math-container">\$O\$</span> notation, I assumed that <code>a</code> did not contain any of <code>b</code>'s elements, so as we insert an element from <code>b</code> into our combined list, the search complexity grows, up until the size of <code>a</code> + <code>b</code>. There's actually a little more complexity to the <code>List.Add</code> operation due to some nuances, but we'll just say it's <span class="math-container">\$O(1)\$</span>.</p></li>
<li><p>Finally, you sort the list after combining everything, so I imagine C# uses one of the faster sorting algorithms, and that is <span class="math-container">\$O(xlog(x))\$</span> (<span class="math-container">\$x\$</span> is the length of the final combined list).</p></li>
</ul>

<p>So in terms of complexity, if all of this is true, we have <span class="math-container">\$n + m(m+n) + xlogx\$</span>.</p>

<p>Back to my initial question, if the arrays are already sorted coming in, I'm thinking you can find any element with a binary search which is <span class="math-container">\$O(log(y))\$</span> (<span class="math-container">\$y\$</span> is the size of the array you're searching in), so you can search for every element in <code>b</code> within <code>a</code>, and we can probably tweak the binary search to return the left and/or right indexes if the number wasn't found, in which case we simply have to insert between those indexes. The operation then would be <span class="math-container">\$O(mlog(n))\$</span> + the complexity to insert. Unfortunately, and in shameful admittance,  random access inserts of arrays is where this algorithm falls off, but you can optimize the insert complexity by choosing a different data structure from an array.</p>

<p>Of course, this method actually only requires one of the arrays be sorted before starting, and sorting <em>one</em> array beforehand would be faster than sorting the whole array at the end.</p>

<p>So in conclusion, you can drop the sort at the end, and you can work to remove the linear <code>List.exists</code> operation to speed up your code. If you're truly gungho you can try using a different data structure that can amortize both search and insert operations.</p>
    </div>