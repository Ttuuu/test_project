<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You may want to make the suits and ranks Enums, so that you can make cards in a more readable and less error prone way when needed:</p>

<pre><code>Card(Suit.Spade, Rank.King)  # readable, clear
Card("Spade", "K")  # prone to typos 
Card(Card.possible_suits[0], Card.possible_ranks[11])  # meaning not very clear
</code></pre>

<p>It could also be beneficial to add a dict to your Deck implementation to more efficiently query the randomized deck:</p>

<pre><code># quickly retrieve cards of a suit
suitToCards = { 
    Suits.Spade: filter(card.suit == Suits.Spade, self.cards)
    # repeat for all suits...
} 
</code></pre>

<p>This way the Deck.cards are randomized, but Deck.bySuit can be used internally by Deck.get_suit() and Deck.find and Deck.remove so you don't need to iterate over the entire deck when you know you only ever need to work with a portion of the deck for these operations.</p>

<p>One more thing to consider is encapsulation of the cards in the deck. You've handled Deck.draw() well, but it looks like cards in the deck can be altered or deleted if the caller manipulates the cards returned by Deck.get_suit(). You may want to make a deep copy of the list you return in Deck.get_suit() to prevent this. </p>

<p>If this is to model standard deck based games where a deck always has 1 of each card (and optional jokers), and a card will always be in the deck or not, you may want to re-evaluate your design where cards are deleted from the deck. Will you ever want to support shuffling a card or cards back into the deck once drawn? How would you prevent duplicate cards from ending up in the deck? It could be easier to add a Boolean to each card indicating if its in the deck or not. This way the deck always knows about the cards it was initialized with, and these classes will be easier to debug.</p>
    </div>