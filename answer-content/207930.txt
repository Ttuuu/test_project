<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The post (and the original assignment!) are a bit confused about these concepts:</p>

<ol>
<li><p>the <em>ratio</em> between two units of measurement</p></li>
<li><p>the <em>exchange rate</em> between two currencies</p></li>
<li><p>the <em>weight</em> of an edge in a graph</p></li>
</ol>

<p>The confusion is understandable because we sometimes use the word "cost" for all three concepts. But there are some important differences:</p>

<ol>
<li><p>When combining ratios or exchange rates, you <em>multiply</em> them, but when combining weights you <em>add</em> them.</p></li>
<li><p>When converting units of measurement, <em>it doesn't matter what path you take</em>.</p>

<p>For example, here's a possible set of inputs to your program:</p>

<pre><code>yard, foot, 3
chain, foot, 66
mile, chain, 80
mile, yard, 1760
</code></pre>

<p>If you need to use this to convert a mile into feet, it doesn't matter whether you take the path mile → yard → foot or mile → chain → foot, the answer is the same (5280) either way. Different paths can only yield different results if there are errors in the input.</p>

<p>However, when exchanging currency, it might be better value to take one route rather than another. Due to <a href="https://en.wikipedia.org/wiki/Arbitrage" rel="nofollow noreferrer">arbitrage</a> the difference between paths is likely to be small in the real world, but it can exist and so ought to be taken into account in any computer model.</p></li>
</ol>

<p>This has some consequences:</p>

<ol>
<li><p>Converting currencies and converting units of measurement are two different problems, and you shouldn't expect to be able to write one program that handles both.</p></li>
<li><p>A general graph is the wrong data structure for units of measurement, because it could have multiple paths between pairs of units, which means you would have to worry about data inconsistency. A better data structure would be a <a href="https://en.wikipedia.org/wiki/Tree_(graph_theory)#Forest" rel="nofollow noreferrer"><em>forest</em></a>, so that there is at most one path between any pair of units and the data cannot be inconsistent.</p></li>
<li><p>If you are going to represent a collection of ratios as a weighted graph, then the weights need to be the <em>logarithms</em> of the ratios, so that the total weight of a path (the sum of the weights of the edges) is the log of the product of the ratios, as required.</p></li>
<li><p>Logarithms of ratios below 1 are negative, and <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" rel="nofollow noreferrer">Dijkstra's algorithm</a> doesn't work with negative edge weights.</p></li>
<li><p>A graph with some negative edge weights might have a cycle with a negative sum. This means that there is <em>no path of lowest weight</em> in the graph. For example, suppose that you can exchange 2 marks for a crown, 2 guilders for a mark, and 2 crowns for a guilder. Then you can get arbitrary amounts of money by going around this cycle as often as you like. The program will need to have some way of handling this case—for example, maybe it indicates an error in the input.</p></li>
</ol>
    </div>