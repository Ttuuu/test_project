<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You say you want to</p>

<blockquote>
  <p>target <a href="/questions/tagged/c%2b%2b17" class="post-tag" title="show questions tagged 'c++17'" rel="tag">c++17</a> primarily, but also be backward compatible down to <a href="/questions/tagged/c%2b%2b11" class="post-tag" title="show questions tagged 'c++11'" rel="tag">c++11</a>.</p>
</blockquote>

<p>Consider changing this to</p>

<blockquote>
  <p>target <a href="/questions/tagged/c%2b%2b11" class="post-tag" title="show questions tagged 'c++11'" rel="tag">c++11</a> primarily, but also be compatible with <a href="/questions/tagged/c%2b%2b17" class="post-tag" title="show questions tagged 'c++17'" rel="tag">c++17</a></p>
</blockquote>

<p>Because you can't really use most of the <a href="/questions/tagged/c%2b%2b17" class="post-tag" title="show questions tagged 'c++17'" rel="tag">c++17</a> stuff here.
You have to write code in <a href="/questions/tagged/c%2b%2b11" class="post-tag" title="show questions tagged 'c++11'" rel="tag">c++11</a>,
but also take care of <a href="/questions/tagged/c%2b%2b17" class="post-tag" title="show questions tagged 'c++17'" rel="tag">c++17</a> compatibility.
To be honest, I don't think this is a good idea,
but I will respect your opinion anyway.</p>

<p>I don't know much about <code>std::launder</code>,
but I remember someone saying that the code with theoretical undefined behavior
will do the right job on any (sane) implementation.
I'm not gonna care much about it here.</p>

<h1>Bugs</h1>

<ol>
<li><p>Your code does not implement RAII and is not exception-safe.
You should add a destructor to clean up the contents.
You should also implement (copy|move) (constructors|assignments).
The <a href="https://stackoverflow.com/q/3279543">copy-and-swap idiom</a> can help you.</p>

<p>Note that the automatically generated destructor
does not call the destructor of <code>T</code>,
and the automatically generated copy and move stuff
do not call the copy and move stuff of <code>T</code>.
They just copy the raw <code>char</code>s,
which is clearly not intended.</p>

<p>Here's an example of what a destructor might look like:</p>

<pre><code>~CircularBuffer()
{
    if (is_empty())
        return;

    std::size_t i = tail;
    do {
        reinterpret_cast&lt;T*&gt;(&amp;data[i])-&gt;~T();
        i = (i + 1) % N;
    } while (i != head);
}
</code></pre>

<p>And the copy constructor and move constructor:</p>

<pre><code>CircularBuffer(const CircularBuffer&amp; other)
    :head{other.head}, tail{other.tail}, isFull{other.isFull}
{
    // note: not exception safe
    if (!is_empty()) {
        for (; i != head; i = (i + 1) % N)
            new (&amp;data[i]) T(other.data[i]);
  }
}

CircularBuffer(CircularBuffer&amp;&amp; other)
    :head{other.head}, tail{other.tail}, isFull{other.isFull}
{
    // note: not exception safe
    if (!is_empty())
        for (std::size_t i = tail; i &lt; head; i = (i + 1) % N)
            new (&amp;data[i]) T(std::move(other.data[i]));
}
</code></pre></li>
</ol>

<h1>Suggestions</h1>

<ol>
<li><p>The following code is confusing:</p>

<pre><code>head = ++head % N;
</code></pre>

<p>Granted, it works as intended since <a href="/questions/tagged/c%2b%2b11" class="post-tag" title="show questions tagged 'c++11'" rel="tag">c++11</a>,
but still, consider changing to the more readable</p>

<pre><code>head = (head + 1) % N;
</code></pre>

<p>This will prevent any confusion.</p></li>
<li><p><code>push</code> accepts a <code>const T&amp;</code> and <code>std::move</code>s from it.
This makes no sense.
<code>std::move(item)</code> will return a <code>const T&amp;&amp;</code>
and usually binds to <code>const T&amp;</code> copy constructors.
Pass-by-value instead:</p>

<pre><code>void push(T item) noexcept { /* ... */ }
</code></pre>

<p>This will handle both copying and moving correctly.</p></li>
<li><p>Moreover, <code>push</code> should probably delegate to <code>emplace_push</code>
to reduce code duplication.</p>

<pre><code>void push(T item) noexcept
{
    emplace_push(std::move(item));
}
</code></pre></li>
<li><p><code>pop</code> should not return the popped value
because it cannot do this in a safe way.<sup>1</sup>
Instead, let <code>pop</code> return <code>void</code>
and let <code>peek</code> do its job.</p></li>
</ol>

<p>By the way, there is much debate on <code>#pragma once</code> (see, for example, <a href="https://stackoverflow.com/q/1143936"><code>#pragma once</code> vs include guards?</a>). I think it is OK here, but others may disagree.</p>

<hr>

<p><sup>1</sup> The move constructor of <code>T</code> may throw an exception,
in which case the popped object is leaked and cannot be restored.</p>
    </div>