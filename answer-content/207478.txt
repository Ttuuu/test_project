<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may allow you to improve your program.</p>

<h2>Show all required <code>#include</code>s</h2>

<p>To get <code>size_t</code>, <code>malloc</code> and <code>memcpy</code> we need the following includes:</p>

<pre><code>#include &lt;cstdint&gt; 
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
</code></pre>

<p>Because they are required by the <code>crc</code> routine, they are important to show.  </p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>crc</code> function does not need to alter the passed message, so that parameter should be declared <code>const</code>.  </p>

<h2>Avoid using a leading underscore for items in global namespace</h2>

<p>As you can read in <a href="http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier/228797#228797">this answer</a>, global names that begin with an underscore are "reserved to the implementation;" that is, they are for your compiler rather than for you.  </p>

<h2>Don't leak memory</h2>

<p>The code calls <code>malloc</code> but never calls <code>free</code> so it leaks memory.  That's not good, but in this case it's easily fixed because the copy isn't needed anyway.</p>

<h2>Use better names</h2>

<p>The <code>crc_seed</code> is not a bad name because it suggests the meaning of the variable within the context of the function, but <code>_crc</code> as the input variable is a terrible name because that's not at all what it represents.  I'd call it <code>message</code> or maybe <code>msg</code> instead.</p>

<h2>Use appropriate data types</h2>

<p>There's not much reason to have <code>_crc</code> passed in as a <code>void *</code>.  It allows the user to pass in just about anything without an explicit cast, but I'd suggest that it would be better to have it be <code>const uint8_t *</code> instead and have the caller cast if necessary.  To me, it makes the use of the variable more clear.  Also, the use of <code>ssize_t</code> is incorrect in this instance.  Read <a href="https://stackoverflow.com/questions/15739490/should-use-size-t-or-ssize-t">this question</a> for details on <code>size_t</code> versus <code>ssize_t</code>.  Also note that in C++, these are actually in the <code>std</code> namespace.</p>

<h2>Document your code</h2>

<p>A short comment in the code would be sufficient to make this code much more understandable to anyone reading it.  In particular, the polynomial used and the fact that it processes memory from high to low (reverse from the usual) arre important points to note.</p>

<h2>Don't introduce arbitrary restrictions</h2>

<p>There is nothing in the signature of the <code>crc</code> routine that would suggest to the user that it's limited to a 32-bit message, and nothing in the code that checks for or enforces that.  In this case, I'd recommend simply removing that restriction, since it's simpler than enforcing a limit.</p>

<h2>Don't create lots of spurious variables</h2>

<p>The <code>_crc_cpy</code>, <code>crc_cpy_pointer</code> and <code>_crc_u</code> variables are not necessary.  What the code is attempting to do is to calculate an 8-bit CRC from high memory to low memory, so the logical way to do that is also the most straightforward:</p>

<pre><code>/*
 * calculates 8-bit CRC using polynomial x^8 + x^2 + x^1 + 1
 * processing the bytes from the end of the message to the beginning
 */
std::uint8_t rev_crc(const std::uint8_t* msg, std::size_t msg_len, std::uint8_t crc_seed) {
    constexpr uint8_t poly{0x07};   // represents x^8 (implicit) + x^2 + x^1 + x^0
    for(msg += msg_len - 1; msg_len; --msg_len, --msg) {
        crc_seed ^= *msg;
        for(int i = 0; i &lt; 8; i++) {
            crc_seed = (crc_seed &amp; 0x80) ? poly ^ (crc_seed &lt;&lt; 1) : (crc_seed &lt;&lt; 1);
        }
    }
    return crc_seed;
}
</code></pre>

<h2>Understand the engineering trade-off</h2>

<p>This particular polynomial is not terrible, but it may be useful for you to consider alternatives.  In particular, if the concern is in detecting 4-bit errors in a 32-bit message, there are other polynomials that perform better.  See Koopman's <a href="http://users.ece.cmu.edu/~koopman/crc/crc8.html" rel="nofollow noreferrer">CRC Zoo</a> for more information about that, and how to interpret Hamming Distance and Hamming weights.  </p>
    </div>