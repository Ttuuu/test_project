<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is what I meant in the comments</p>

<blockquote>
  <p>You could do <code>substr($hey,0,2)</code> once and then check the first two letters instead of multiple <code>strpos</code>. Maybe, but I have no idea what $hey looks like :) - but than you could <code>switch</code> on that and get rid of the multiple function calls. I don't think it will be much faster, but with enough iterations, who knows, and it may look a bit cleaner.</p>
</blockquote>

<pre><code>  switch(substr($hay,0,2)){
      case 'na': //nasdaq
        $mk='nasdaq-us';
        $nasdaq++
      break;
      case 'ny': //nyse
      case 'ne': //new york
        $mk='nyse-us';
        $nyse++;     
      break;
      case 'cb': //cboe
        $mk='cboe-us';
        $cboe++;
      break;
      default:
        $mk='market-us';
        $others++;
      break;
  }
</code></pre>

<p>This way your doing 1 function call instead of up to 4.</p>

<p>It looks like your calling <code>strtolower</code>  more than 3 times on <code>$cn</code></p>

<pre><code>  $cn=strtolower(UpdateStocks::slugCompany($s["quote"]["companyName"])); // s
  //...
  $p2=sprintf('%s%s%s',self::SLASH,strtolower($cn),'-');
  //...
  if(strtolower($symb)===strtolower($cn)){
  //------------------   
   $p1=sprintf('%s%s%s',self::SLASH,strtolower($symb),'-');

   if(strtolower($symb)===strtolower($cn)){
</code></pre>

<p>And so forth.</p>

<p>There may be other duplicate calls like this.</p>

<p>Your <code>sprintf</code> seem point less.</p>

<pre><code> // symbol in url
$p1=sprintf('%s%s%s',self::SLASH,strtolower($symb),'-');
// company in url
$p2=sprintf('%s%s%s',self::SLASH,strtolower($cn),'-');

 //you could just do this for example
$p1=self::SLASH.$symb.'-';
</code></pre>

<p>This whole chunk is suspect:</p>

<pre><code> // symbol in url
  $p1=sprintf('%s%s%s',self::SLASH,strtolower($symb),'-');
   // company in url
  $p2=sprintf('%s%s%s',self::SLASH,strtolower($cn),'-');

  // duplication risk
  if(strtolower($symb)===strtolower($cn)){
    // duplicated name from one symbol
    $previousNames=array_reverse(UpdateStocks::searchFilenames(glob($dir."/*"),$p2));
    $lurl=$cn . '-' . $sc . '-' . $mk . '-' . $enc;
  }else{
    // duplicated name from one symbol
    $previousNames=array_reverse(UpdateStocks::searchFilenames(glob($dir."/*"),$p1));
    $lurl=strtolower($symb) . '-' . $cn . '-' . $sc . '-' . $mk . '-' . $enc;      
  }
</code></pre>

<p>For example the only difference is this:</p>

<pre><code>$previousNames=array_reverse(UpdateStocks::searchFilenames(glob($dir."/*"),$p2));
$previousNames=array_reverse(UpdateStocks::searchFilenames(glob($dir."/*"),$p1));
 //and
$lurl=$cn . '-' . $sc . '-' . $mk . '-' . $enc;
$lurl=$symb . '-' . $cn . '-' . $sc . '-' . $mk . '-' . $enc; 
</code></pre>

<p>So if you could change the last argument and prepend <code>$symb</code>, you could maybe eliminate this condition.  I have to think about it a bit... lol.  But you see what I mean it could be more DRY (Don't repeat yourself).  I don't know enough  about the data to really say on this one.  I was thinking something like this:</p>

<pre><code>  if($symb != $cn){
      $p = self::SLASH.$symb.'-';
      $lurl='';
  }else{
      $p = self::SLASH.$cn.'-';
      $lurl= $symb;
  }

  $previousNames=array_reverse(UpdateStocks::searchFilenames(glob($dir."/*"),$p));
  $lurl .= "$cn-$sc-$mk-$enc";
</code></pre>

<p>But I am not sure if I got everything strait, lol.  So make sure to test it.  Kind of hard just working it out in my head.  Still need a condition but it's a lot shorter and easier to read.</p>

<p>For this one:</p>

<p><strong>searchFilenames</strong></p>

<pre><code>/**
 * 
 * @return an array with values of paths of all front md files stored
 */
public static function searchFilenames($array,$re){
  $arr= array();
  foreach($array as $k=&gt;$str){
    $pos=strpos($str, $re);
    if($pos!==false){
      array_push($arr, $str);
    }
  }
  return $arr;
}
</code></pre>

<p>You can use <code>preg_grep</code>.  For example:</p>

<pre><code>   public static function searchFilenames($array,$re){
        return preg_grep('/'.preg_quote($re,'/').'/i',$array);
   }  
   //or array_filter
   public static function searchFilenames($array,$re){
        return array_filter($array,function($item)use($re){ return strpos($re)!==false;});
   }  
</code></pre>

<p>Your just finding if <code>$re</code> is contained within each element of <code>$array</code>.  <a href="http://php.net/manual/en/function.preg-grep.php" rel="nofollow noreferrer">preg_grep</a> â€” <code>Return array entries that match the pattern</code>.  It's also case insensitive with the <code>i</code> flag.  In any case I never use <code>array_push</code> as <code>$arr[]=$str</code> is much faster.  It's even better if you can just modify the array, as this is a function it's like a copy anyway as it's not passed by reference.</p>

<p>One thing I find useful is to take and add some example data values in to the code in comments.  Then you can visualize what tranforms your doing and if your repeating yourself.</p>

<p>One last thing this one <strong>scares</strong> me a bit:</p>

<pre><code>foreach($previousNames as $k=&gt;$previousName){
  if($k==0){
    // safety: if previous filename not exactly equal to new filename
    rename($previousName, $newName);
  }else{
    // in case multiple files found: unlink
    unlink($previousName);
  }
}
</code></pre>

<p>Here your checking that <code>$k</code> or the array key is <code>0</code>, it's very easy to reset array keys when sorting or filtering. So be careful with that, I would think this to be a safer option.</p>

<pre><code>foreach($previousNames as $k=&gt;$previousName){
  if($previousName!=$newName){
    // safety: if previous filename not exactly equal to new filename
    rename($previousName, $newName);
  }else{
    // in case multiple files found: unlink
    unlink($previousName);
  }
}
</code></pre>

<p>Not sure if that was a mistake, or maybe I just don't understand that part?  It hard without being able to test what the value is.  But it warranted mention, once the stuff is deleted its deleted.</p>

<p>Hope it helps you, most of these are minor things, really.</p>
    </div>