<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>Sub flagselected()
</code></pre>
</blockquote>

<p>The procedure is implicitly <code>Public</code>. This is potentially confusing, because in most programming languages (including VB.NET) the implicit default would be <code>Private</code>. Consider always making all access modifiers explicit.</p>

<p>Procedure names should be <code>PascalCase</code>, to adhere to both the naming conventions in place (everything in the VBA standard library and Excel object model uses this naming convention) and the modern naming conventions recommended for VB.NET code, which IMO apply perfectly well to VBA code too). Big huge kudos for avoiding Hungarian Notation prefixing though, but <code>alllowercase</code> isn't ideal.</p>

<blockquote>
<pre><code>  Dim datablock As Variant
  Dim x As Long, i As Integer
  Dim p As Integer
  Dim selectedUnits() As String
  Dim selectKey() As String
  Dim selectFlag() As Variant
  Dim startTime As Variant
  Dim midTime As Variant
  Dim endTime As Variant
  Dim postTrans As Variant
  Dim targetService As String, targetMapCode As Integer, multiplier As Integer
  Dim cell As Range, gap1 As Integer
</code></pre>
</blockquote>

<p>Don't do this to yourself, <em>especially</em> in procedure scopes that are any longer than just a handful of lines: this <em>Great Wall of Declarations</em> at the top of the procedure is a huge distraction, and only serves to make it harder to see what's used where.</p>

<p>Instead, consider declaring local variables <em>where you're using them</em>. That way it's much harder to declare a variable... and then not use it anywhere.</p>

<p><a href="http://rubberduckvba.com" rel="nofollow noreferrer">Rubberduck</a> (a free, open-source VBIDE add-in project I manage) can't find any uses for the following local variables, which are declared but never assigned or even referred to:</p>

<ul>
<li><code>i</code></li>
<li><code>p</code></li>
<li><code>targetService</code></li>
<li><code>targetMapCode</code></li>
<li><code>multiplier</code></li>
<li><code>cell</code></li>
<li><code>gap1</code></li>
</ul>

<p>It also warns about variables declared <code>As Integer</code>, strongly suggesting to use <code>As Long</code> instead.</p>

<p>The 2-spaces indent is non-standard (default is 4 spaces), but it's consistent so it's not too distracting.</p>

<blockquote>
<pre><code>  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
</code></pre>
</blockquote>

<p>Whenever this global state is toggled, it should be obligatory to handle runtime errors: that way if anything goes wrong during execution, the global application state is guaranteed to always be reset back to what it was.</p>

<p>But why toggle this <em>at all</em>, if we're only writing to a worksheet <em>once</em>? Disabling <code>ScreenUpdating</code> is useful when you have inefficient code with <code>.Select</code> and <code>.Activate</code> and Excel ends up spending more time repainting itself than running your code, and making <code>Calculation</code> manual is useful when you make so many worksheet writes that Excel is constantly recalculating - but here, none of this is happening: toggling off screen repaints and deferring calculations isn't buying you anything here - I'd just remove these instructions completely.</p>

<blockquote>
<pre><code>datablock = Sheets("DataBlock").Range("Table1")
</code></pre>
</blockquote>

<p>There's quite a bit of implicit code going on here - this would be explicit equivalent:</p>

<pre><code>datablock = ActiveWorkbook.Worksheets("DataBlock").Range("Table1").Value
</code></pre>

<p>Note that the implicit <code>ActiveWorkbook</code> reference is very much a potential bug: if the "DataBlock" sheet exists in <code>ThisWorkbook</code> (the VBA project's host document) at compile-time, then there's no need to dereference it from any <code>Sheets</code> collection - the worksheet has a <code>CodeName</code> that you can use anywhere in your VBA project: this "code name" is the sheet module's <code>(Name)</code> property. Set it to a valid VBA identifier name (e.g. <code>DataBlockSheet</code>), and then you can do this:</p>

<pre><code>datablock = DataBlockSheet.Range("Table1").Value
</code></pre>

<p>Now, this <em>looks</em> like you're getting the named <code>Range</code> for a <code>ListObject</code> table. Why not retrieve the actual <code>ListObject</code> reference and make it explicit that you're looking at a <code>ListObject</code> and not just any other <code>Range</code>?</p>

<pre><code>datablock = DataBlockSheet.ListObjects("Table1").DataBodyRange.Value
</code></pre>

<p>Out of 6 references to the <code>datablock</code> variable, 5 are passing it as an argument to <code>LBound</code> or <code>UBound</code>; the other is reading a specific value in the table, and is probably indeed more efficient as an in-memory array read - but the <code>LBound</code>/<code>UBound</code> stuff shouldn't need to be re-computed 5 times.</p>

<blockquote>
<pre><code>ReDim selectKey(1 To UBound(datablock))
ReDim selectFlag(1 To UBound(datablock))

For x = LBound(datablock) To UBound(datablock) ' loops thru the datablock
</code></pre>
</blockquote>

<p>Because the array came from <code>Range.Value</code>, it's <em>necessarily</em> a 1-based, 2D variant array: the <code>LBound</code> will always be <code>1</code>. You've hard-coded that <code>1</code> in 2 places, and computing it for the <code>For x</code> loop - that's inconsistent, but it's good practice to never assume what array bounds are when looping, so kudos for that.</p>

<p>I'd declare a local.</p>

<pre><code>Dim datablockRows As Long
datablockRows = UBound(datablock)
</code></pre>

<p>And then...</p>

<pre><code>ReDim selectKey(1 To datablockRows)
ReDim selectFlag(1 To datablockRows)

For x = 1 To datablockRows
</code></pre>

<p>Note that the <code>loops thru the datablock</code> comment isn't saying anything that the code isn't already sayign loud &amp; clear: it's redundant, and potentially distracting &amp; confusing. Imagine you rename <code>datablock</code> to <code>tableData</code>: the comment now needs to be updated, only to keep up with the code. Don't bother writing comments that say <em>what</em> - write comments that say <em>why</em> instead.</p>

<blockquote>
<pre><code>If Contains(selectedUnits, datablock(x, 2)) = True Then 'only considers this row if it's in selected units
  selectFlag(x) = True
End If
</code></pre>
</blockquote>

<p>That's a better comment already (although, the <code>Contains</code> method name is kind of already making that clear enough), but I suspect that results in something like <span class="math-container">\$O(n^2)\$</span> complexity: you're iterating <em>up to</em> every single row in <code>selectedUnits</code> (presumably that's very <em>few</em> rows?) for every single row in <code>datablock</code>. We don't know how <code>Contains</code> is implemented, but it looks like it's basically reinventing the wheel of <code>WorksheetFunction.Match</code>, which as a native function <em>should</em> theoretically perform better than a VBA equivalent. I do like the abstraction, but to me <code>Contains</code> all by itself isn't sufficient to tell enough about its usage: <code>StringContains</code> would obviously be an abstraction over <code>InStr</code> / finding a given value within a string, and <code>ArrayContains</code> would obviously be an abstraction over finding a given value within an array.</p>

<p>The Boolean literal value <code>True</code> is redundant in the conditional expression. <code>Contains</code> already returns a <code>Boolean</code>: it <em>is</em> a Boolean expression that <code>If</code> will be happy to work with.</p>

<pre><code>If Contains(selectedUnits, datablock(x, 2)) Then
</code></pre>

<p>Now, that conditional is assigning to a literal Boolean value, and if there was an <code>Else</code> block it would be assigning the inverse value... but there's no <code>Else</code> block here, and <code>selectFlags</code> is a <code>Variant</code> array. This means the <code>selectFlags</code> array contains <code>Variant/True</code> and <code>Variant/Empty</code> after the loop.</p>

<p>If having explicit <code>FALSE</code> Boolean literal values (rather than empty cells) is ok, then I'd recommend removing the conditional block, and assigning directly to the array subscript:</p>

<pre><code>selectFlag(x) = Contains(selectedUnits, datablock(x, 2))
</code></pre>

<p>And now we get to the worksheet write operation...</p>

<blockquote>
<pre><code>Sheets("datablock").Range("P2:p" &amp; UBound(selectFlag)).Value2 = selectFlag
</code></pre>
</blockquote>

<p>I like the version that doesn't assume what specific worksheet column the destination column is located in; this one will break if the table's <code>[flag]</code> column is moved anywhere. Actually it won't <em>break</em> - it'll just happily wreck the table by writing to the wrong column. Why assign to <code>Value2</code> though? You're using <code>Value</code> everywhere else. <code>Range.Value2</code> is useful when <em>reading</em> values that are of a <code>Date</code> or <code>Currency</code> data type, under certain specific circumstances (you get a <code>Double</code> instead of a <code>Date</code> or <code>Currency</code> - but most of the time you <em>want</em> to work with <code>Date</code> and <code>Currency</code> and not <code>Double</code>). ...but we're dealing with Boolean values here.</p>

<p>The worksheet doesn't need to be dereferenced again, nor does the target range. It does, but only because you haven't persisted it to a local variable when you dereferenced it before the loop.</p>

<p>I'd have a variable for the table, assigned near the beginning - just before <code>datablock</code> gets assigned:</p>

<pre><code>Dim dataTable As ListObject
Set dataTable = DataBlockSheet.ListObjects("Table1")

Dim dataBlock As Variant
datablock = dataTable.DataBodyRange.Value
</code></pre>

<p>And with that you'd have a reference to your table for writing back the values:</p>

<pre><code>dataTable.ListColumns("flag").DataBodyRange.Value = selectFlag
</code></pre>

<p>Now, given this:</p>

<blockquote>
<pre><code>selectedUnits = RangeToArray(Sheets("Tables").Range("SelectedCC"))
</code></pre>
</blockquote>

<p>You could probably scrap a lot of that code (if not all of it), and simply have a formula in the <code>flag</code> column, something that might look like this: </p>

<pre><code>=NOT(ISERROR(MATCH([@Column2],SelectedCC[@Column1],0)))
</code></pre>
    </div>