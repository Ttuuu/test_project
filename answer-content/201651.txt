<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>I like the implementation of <code>c-last</code> as it produces an <code>O(1)</code> runtime with vectors (instead using the <code>last</code> function with <code>O(n)</code> runtime)</li>
<li>However, you do not need <code>c-last</code> as you could also keep track of the last value in the <code>loop</code> bindings.</li>
<li>If you do not need to eagerly compute the numbers in a vector, you can also use <a href="https://clojuredocs.org/clojure.core/lazy-seq" rel="nofollow noreferrer">lazy sequences</a>. It is not too difficult to write something in a lazy manner if you can already write it recursively.</li>
<li>When replacing a <code>loop</code> with a recursive function call you can pass the loop's bindings as function parameters.</li>
</ul>

<p>The result would look something like this.</p>

<pre><code>(defn recaman []
  (letfn [(tail [previous n seen]
            (let [nx (if (and (&gt; previous n) (not (seen (- previous n))))
                       (- previous n)
                       (+ previous n))]
              (cons nx (lazy-seq (tail nx (inc n) (conj seen nx))))))]
    (tail 0 0 #{})))
</code></pre>

<p>Calling <code>(receman)</code> will produce an infinite lazy sequence.</p>

<pre><code>(take 100 (recaman))
</code></pre>
    </div>