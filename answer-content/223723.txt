<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's a difficult problem to attack.  Without going into those difficulties, here are some comments on your code.</p>

<p>Global variables are generally frowned upon.  They are basically a hidden function parameter, which can make it hard to debug and maintain the software.  So, for example, it would be better to explicitly pass <code>file</code> as a parameter of <code>get_file_lines()</code> rather than use a global variable: </p>

<pre><code>def get_file_lines(file):
    """
    Method written explicitly for not having to loop through
    and re-open the file each time
    """
    lines = []
    with open(file) as f:
        for line in f:
            lines.append(line)
    return lines
</code></pre>

<p>The doc string for <code>get_file_lines()</code> saya it is so the file doesn't have to be reopened and reread.  However, this function is called four times by other functions in the program.  Each time the file is being opened and read.  To correct this, call <code>get_file_lines()</code> once when initializing the program and saving the <code>lines</code> that gets returned.  Then pass <code>lines</code> into whatever other functions need to look at the source code like so:</p>

<pre><code>lines = get_file_lines(file)
function_name = get_function_name(lines)
function_params = get_function_paramaters(lines, function_name)
....etc....
</code></pre>

<p>Then instead of <code>for line in get_file_lines():</code> in the other functions use:</p>

<pre><code>for line in lines:
    .... 
</code></pre>

<p>Functions can return more than one value, so instead of making function_params a global variable, it can be passed as an argument and returned.  Also, for-loops can have a starting value.  So, <code>get_function_code()</code> can be written something like this:</p>

<pre><code>def get_function_code(lines, method_name, function_params):
    """
    Gets all the code in the method name passed
    """
    code = []
    for i in range(len(lines)):
        if method_name in lines[i]:
            for j in range(i+1, len(lines)):    #&lt;-- changed start
                if lines[j] == '\n':
                    break

                if "self" in lines[j]:
                    function_params += (", " + add_to_params(lines[j]))
                    code.append(remove_self(lines[j]))
                else:
                    code.append(lines[j])

    return code, function_params
</code></pre>

<p>There are other things that could be cleaned up, but that's all I've time for right now.</p>

<p>Also, have a look at the <a href="https://docs.python.org/3.6/library/pyclbr.html" rel="nofollow noreferrer">pyclbr</a> module in the standard library.  It provides functions to read a python file and return a dictionary of all the classes and functions.  For classes, it can be used to find the line number where the class is defined, a list of all its methods, and the lines where the methods are defined.</p>
    </div>