<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is possible to solve the problem without sorting the array (which is expensive). The input array is actually a simple arithmetic sequence <code>1, 2, 3, 4 ... N+1</code>, the numbers are just in a jumbled up order and one of them is missing.</p>

<p>The <a href="https://en.wikipedia.org/wiki/Arithmetic_progression#Sum">sum of the sequence</a> is easy to calculate as <code>n/2(1+n)</code> (here <code>n = N + 1</code>). The sum of the input array will be the same as this, minus the value of the missing element. So the value of the missing element is the difference between the sum of the entire sequence and the sum of the input array.</p>

<pre><code>    public static int permMissingElement(int[] elements)
    {
        int n = elements.Length + 1;
        int sumOfAllElements = (n * (1 + n)) / 2;
        int missingElement = sumOfAllElements - elements.Sum();
        return missingElement;
    }
</code></pre>

<hr>

<p>Edit:</p>

<p>The maximum value of <code>N</code> is 100,000, which would cause an arithmetic overflow when calculating the sum of the sequence. The straightforward solution is to use <code>long</code>s for the calculations instead:</p>

<pre><code>    public static int permMissingElement(int[] elements)
    {
        long n = elements.Length + 1;
        var sumOfAllElements = (n * (1 + n)) / 2;
        var missingElement = sumOfAllElements - elements.Select(x =&gt; (long)x).Sum();
        return (int)missingElement;
    }
</code></pre>
    </div>