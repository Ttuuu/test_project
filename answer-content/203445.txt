<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The general principle seems a bit odd and more work than necessary.</p>

<p>Basically, in case of an error, you perform the following steps:</p>

<ul>
<li>catch and log exception</li>
<li>return null</li>
<li>check for null in the caller</li>
<li>throw MyOwnException in the caller</li>
<li>catch and handle MyOwnException in some super-caller</li>
</ul>

<p>The intermediate null makes it somewhat long-winded and brittle (what if a caller forgets to handle null?) and goes against the idea of exceptions, which can propagate up the call-stack and be handled at any suitable place.</p>

<p>Thus, I'd recommend to scratch the null part. Instead:</p>

<ul>
<li>catch and log exception</li>
<li>throw MyOwnException (possibly with the original exception set as cause) instead of returning null</li>
<li>catch and handle MyOwnException in some super-caller</li>
</ul>

<p>For all non-exception cases, make sure that you always return a correct and usable value. That way you can remove all the special case handling in the caller methods and have a sweet and simple sunny-days scenario as the implementation.</p>

<p>Apart from that, I'd recommend to use multi-catch blocks to reduce the redundant handling code in the various RSAEncryption class methods.</p>
    </div>