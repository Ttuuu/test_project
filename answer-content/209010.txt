<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Would be incorrect to expect someone to pass an ILogger even if they do not intend to use it?  </p>
</blockquote>

<ul>
<li><p>If I wouldn't want to pass an <code>ILogger</code> I would just pass <code>(ILogger)null</code> and your method would throw a <code>NullReferenceException</code> if an exception occurs. If you use C# 6 you could use the <a href="https://msdn.microsoft.com/en-us/library/dn986595(v=vs.140).aspx" rel="noreferrer">Null-conditional operator</a> </p></li>
<li><p>If you keep the method signature like posted anyone who uses this method needs to pass an <code>ILogger</code>. To overcome this problem you can either make the <code>ILogger</code> argument optional or you implement an overloaded version of this method which doesn't take an <code>ILogger</code> argument.  </p></li>
<li><p>Omitting braces althought they might be optional should be avoided.  </p></li>
<li><p>Throwing <code>throw new Exception(exception.Message)</code> will destroy the stacktrace. It would be better to just <code>throw</code>.  </p></li>
<li><p>By using the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.streamreader.-ctor?view=netframework-4.7.2#System_IO_StreamReader__ctor_System_IO_Stream_" rel="noreferrer">ctor</a> of <code>StreamReader</code> which only takes a <code>Stream</code> as argument the default encoding is UTF8Encoding. </p></li>
</ul>

<p>Implementing the mentioned points would lead to  </p>

<pre><code>public static class EmbeddedResourceUtility
{
     public static string GetSqlQuery(string namespaceAndFileNameWithExtension)
     {
          return GetSqlQuery(namespaceAndFileNameWithExtension, (ILogger)null);
     }
     public static string GetSqlQuery(string namespaceAndFileNameWithExtension, ILogger logger)
     {
          try
          {
               using(var stream = typeof(EmbeddedResourceUtility).GetTypeInfo().Assembly.GetManifestResourceStream(namespaceAndFileNameWithExtension))
               using(var reader = new StreamReader(stream))
               {
                    return reader.ReadToEnd();
               }
          }
          catch(Exception exception)
          {
               logger?.Error($"Failed to read query file {namespaceAndFileNameWithExtension}. {Environment.NewLine}{exception.HResult}: {exception.Message}");
               throw;
          }
     }
}
</code></pre>
    </div>