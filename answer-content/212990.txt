<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This post is tagged with <a href="/questions/tagged/object-oriented" class="post-tag" title="show questions tagged 'object-oriented'" rel="tag">object-oriented</a>, but what I'm seeing is very ironically procedural code.</p>

<p>It doesn't matter that this is "just a quick tool": we're here to write professional, quality code that is easy to read and maintain, performs well, and correctly. <a href="https://codereview.stackexchange.com/a/212942/23788">Comintern</a> has given great feedback and highlighted a number of bugs and edge cases - which is exactly the purpose of this site and the reason one puts their code up for peer review, as opposed to just sharing it on GitHub.</p>

<p>Procedural code is essentially <em>a sequence of executable statements</em>. This <code>main</code> procedure is exactly that. If this were actual object-oriented code, it might have read like this:</p>

<pre><code>Public Sub Main()

    Dim info As ClassInfo
    Set info = GetClassInfo(Selection)
    If info Is Nothing Then
        MsgBox "Invalid Selection. Review debug output for details."
        Exit Sub
    End If

    CreateClassModule info

End Sub
</code></pre>

<p>10 lines, including vertical whitespace. With proper <em>abstraction</em>, no procedure ever really needs to be much longer than that, and we know <em>at a glance</em> exactly what the procedure does, at a high level; if we need to look into the gory details of how a <code>ClassInfo</code> object gets created, we need to drill down to the <code>GetClassInfo</code> function, which we know will return <code>Nothing</code> if something goes wrong; if we need to look into the gory details of how a class module gets created, we need to navigate to the <code>CreateClassModule</code> procedure, which we know will take a <code>ClassInfo</code> parameter.</p>

<p><code>CreateClassModule</code> might look like this:</p>

<pre><code>Private Sub CreateClassModule(ByVal info As ClassInfo)

    Dim path As String
    path = GetDestinationFilePath(info.Name)
    If path = vbNullString Then Exit Sub

    With FileWriter.Create(path)
        .Write info.ToString
    End With

End Sub
</code></pre>

<p>Again, the procedure fits a handful of lines, and it's trivially easy to understand what's going on. There's a <code>GetDestinationFilePath</code> function that probably prompts for a folder and returns a full path/filename (using the provided <code>info.Name</code>), or an empty string if that prompt is cancelled by the user. It then proceeds to create some <code>FileWriter</code> object that is responsible for the file I/O, and the file is trivially written by invoking its <code>Write</code> method, given <code>info.ToString</code>, which presumably builds a string representation of the class module. The <code>FileWriter</code> class has a <code>VB_PredeclaredId</code> attribute set to <code>True</code> and exposes a <code>Create</code> <a href="https://rubberduckvba.wordpress.com/2018/08/28/oop-battleship-part-1-the-patterns/" rel="nofollow noreferrer">factory method</a> (disclaimer: I wrote that article) that takes the path/filename of the file to be created; presumably the <code>Class_Terminate</code> handler ensures the file handle is properly closed, but that's a low-level implementation detail that <code>CreateClassModule</code> doesn't need to be bothered with and, as a matter of fact, isn't.</p>

<p>So we need a definition for this <code>ClassInfo</code> object; we know we're going to need a <code>ToString</code> method and a <code>Name</code> property. Anything else? I can think of a number of things:</p>

<pre><code>'@Folder("Tools.ClassBuilder")
'@ModuleDescription("Describes the metadata needed for generating a class module.")
Option Explicit
Private Type TClassInfo
    Name As String
    Description As String
    IsPredeclared As Boolean
    IsExposed As Boolean
    Members As Collection
End Type

Private this As TClassInfo

Private Sub Class_Initialize()
    Set this.Members = New Collection
End Sub

'@Description("Gets/sets the name of the class. Must be a valid identifier. Determines the value of the 'VB_Name' attribute.")
Public Property Get Name() As String
    Name = this.Name
End Property

Public Property Let Name(ByVal value As String)
    'TODO: validate input!
    this.Name = value
End Property

'@Description("Gets/sets the description of the class. Determines the value of the 'VB_Description' attribute.")
Public Property Get Description() As String
    Description = this.Description
End Property

Public Property Let Descrition(ByVal value As String)
    'TODO: validate input!
    this.Description = value
End Property

'@Description("Gets/sets the value of the 'VB_PredeclaredId' attribute.")
Public Property Get IsPredeclared() As Boolean
    IsPredeclared = this.IsPredeclared
End Property

Public Property Let IsPredeclared(ByVal value As Boolean)
    this.IsPredeclared = value
End Property

'@Description("Gets/sets the value of the 'VB_Exposed' and, indirectly, the 'VB_Creatable' attribute.")
Public Property Get IsExposed() As Boolean
    IsExposed = this.IsExposed
End Property

Public Property Let IsExposed(ByVal value as Boolean)
    this.IsExposed = value
End Property

'@Description("Adds the specified member metadata to this instance.")
Public Sub AddMember(ByVal info As MemberInfo)
    'TODO: validate input!
    this.Members.Add info, info.Key
End Sub

'@Description("Builds a string representing the entire contents of the class module.")
Public Function ToString() As String
    With New StringBuilder
        .AppendLine BuildHeaderInfo
        Dim member As MemberInfo
        For Each member In this.Members
            .AppendLine member.ToString
        Next
        ToString = .ToString
    End With
End Function

Private Function BuildHeaderInfo() As String
    With New StringBuilder
        .AppendLine "VERSION 1.0 CLASS"
        .AppendLine "BEGIN"
        .AppendLine "  MultiUse = -1  'True"
        .AppendLine "END"
        .AppendLine "Attribute VB_Name = """ &amp; this.Name &amp; """"
        .AppendLine "Attribute VB_GlobalNameSpace = False" ' no effect in VBA
        .AppendLine "Attribute VB_Creatable = " &amp; CStr(Not this.IsExposed)
        .AppendLine "Attribute VB_PredeclaredId = " CStr(this.IsPredeclared)
        .AppendLine "Attribute VB_Exposed = " CStr(this.IsExposed)
        .AppendLine "Attribute VB_Description = """ &amp; this.Description &amp; """"
        .AppendLine "'@ModuleDescription(""" &amp; this.Description &amp; """)"
        .AppendLine "Option Explicit"
        BuildHeaderInfo = .ToString
    End With
End Function
</code></pre>

<p>Note the explicit <code>ByVal</code> modifiers and the absolute absence of any kind of Hungarianesque prefixing scheme.</p>

<p>The <code>'@Annotation</code> comments are picked up by <a href="https://github.com/rubberduck-vba/Rubberduck" rel="nofollow noreferrer">Rubberduck</a> (full disclosure: I am one of the administrators of this open-source VBIDE add-in project); they serve the dual purpose of documenting attribute values, and (through Rubberduck features) of <em>enforcing</em> these attribute values. Again note that the largest procedure here is a trivial series of <code>.AppendLine</code> calls on some <a href="https://codereview.stackexchange.com/q/67596/23788">StringBuilder</a> object that's responsible for efficiently building a string, and again these are private implementation details of the <code>ToString</code> method, which does nothing more than append this file header info and each module members' own string representation to the result.</p>

<p>So there needs to be a <code>MemberInfo</code> class - that's essentially the role your <code>clsGenClsMember</code> class is playing. But your class is just <em>data</em> - an object encapsulates data, yes, but an object also performs operations on this data: from the code above we know a <code>MemberInfo</code> at least needs a <code>ToString</code> method, i.e. a way to turn its data into a string representation, and a <code>Key</code> property that gets a string that combines the member kind (<code>Sub</code>, <code>Function</code>, <code>PropertyGet</code>, <code>PropertyLet</code>, <code>PropertySet</code>) with the member's name, so that the keyed collection doesn't choke when a <code>PropertyLet</code> member is added for, say, a <code>Name</code> property when a <code>PropertyGet</code> member already exists for it.</p>

<p>You get the idea by now: the <code>GetClassInfo</code> procedure invoked in <code>Main</code> creates a <code>ClassInfo</code> instance, then trivially iterates the rows in the source <code>Range</code> to create <code>MemberInfo</code> instances and add them to the class metadata; if a property needs a getter and a setter, then two <code>MemberInfo</code> instances are added.</p>

<p>This isn't any more complicated than writing procedural code. In fact, I would quite vehemently argue that it's <em>simpler</em> - and <em>much</em> easier to debug/maintain, extend/enhance, and test. Not because it's "just a quick tool". Writing object-oriented code isn't especially hard; it's about how we <em>think</em> about code, about how we <em>model</em> the problem to be solved. IMO this "quick little tool" could be a <em>perfect</em> excuse to learn to write modern, object-oriented VBA code.</p>
    </div>