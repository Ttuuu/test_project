<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is the result I got thanks to the KDTree approch suggested by max9111. It is indeed much faster as I do not compute the distances but only specify a cutoff distance:</p>

<pre><code>def simplify_by_avg(points, cutoff):

    points = np.unique(points, axis = 0)
    points = np.hstack((points, np.ones((points.shape[0], 1), dtype=points.dtype)))

    L = np.inf
    n = 0
    print len(points),"points, n=",n

    while L &gt; len(points):
        n += 1
        L = len(points)

        tree = spatial.cKDTree(points[:,0:2])
        groups = tree.query_ball_point(points[:,0:2], delta)

        new_pts = []

        for i in xrange(len(groups)):

            ind = groups[i]
            pts = points[ind]
            x = np.average(pts[:,0])
            y = np.average(pts[:,1])
            z = np.sum(pts[:,2])

            new_pts += [[x,y,z]]

        points = np.unique(new_pts,axis=0)

        print len(points),"points, n=",n

    return points
</code></pre>
    </div>