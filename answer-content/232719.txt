<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Each blood factor can be present or not present.  The blood types can be bit-encoded using one bit for the <code>A</code> factor, one bit for the <code>B</code> factor, and one bit for the <code>Rh</code> factor.</p>

<pre><code>enum { A=1, B=2, Rh=4 };
</code></pre>

<p>You would parse the blood type <code>"AB+"</code> as <code>A + B + Rh == 7</code>, and <code>"O-"</code> as <code>0</code> because it does not contain any <code>A</code> factor, <code>B</code> factor, or <code>Rh</code> factor.</p>

<p>Survival requires the donor's blood not contain any factors missing in the recipient's blood type.  Compliment the recipient's blood type to get the bad factors, and use a bit-wise <code>and</code> operation to test that all of the factors are not present in the donor's blood.</p>

<pre><code>bool donor_matches = (donor &amp; ~recipient) == 0;
</code></pre>

<hr>

<p>If you want to leave you enum's as encoding the 4 blood types, and the Rh factor separately, you can get to a similar coding.</p>

<p>Note that:</p>

<pre><code>enum { O, A, B, AB } abo;
</code></pre>

<p>will define <code>O=0, A=1, B=2, AB=3</code>, so you have a similar bit assignment as above.  The <code>Rh</code> factor on the other hand would be better to reverse the order:</p>

<pre><code>enum { M, P } rh;
</code></pre>

<p>so that <code>M=0, P=1</code>.  Now you could express the match condition:</p>

<pre><code>bool donor_match = (donor_abo &amp; ~recipient_abo) == 0 &amp;&amp; (donor_rh &amp; ~recipient_rh) == 0;
</code></pre>

<hr>

<p>Finally, if you want to leave the <code>rh</code> enum as you have originally defined it:</p>

<pre><code>enum { P, M } rh;
</code></pre>

<p>then note that <code>donor_rh &gt;= recipient_rh</code> would express that the rh factors match, or the donor has a less-restrictive (numerically higher) rh factor.</p>
    </div>