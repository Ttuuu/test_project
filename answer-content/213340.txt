<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure how much neater you consider this (if at all), but a <code>switch</code> could be used here:</p>

<pre class="lang-java prettyprint-override"><code>public static Helper toRefactor2(String[] attributes) {
    Helper testObject = new Helper();

    switch(attributes.length) {
        case 6: testObject.sixth = attributes[5];
        case 5: testObject.fifth = attributes[4];
        case 4: testObject.fourth = attributes[3];
        case 3: testObject.third = attributes[2];
        case 2: testObject.second = attributes[1];
        case 1: testObject.first = attributes[0];
        case 0: break

        default: throw new IllegalArgumentException("Invalid array of length " + attributes.length)
    }

    return testObject;
}
</code></pre>

<p>This takes advantage of the fall-through.</p>

<p>Thanks to @AJ for rubustness suggestions. </p>

<hr>

<p>You could also standardize the length of the array by making a copy of it. This does away with the need for length checks if you can't guarantee the length ahead of time:</p>

<pre><code>public static Helper toRefactor3(String[] attributes) {
    Helper testObject = new Helper();

    String[] std = Arrays.&lt;String&gt;copyOf(attributes, 5);

    testObject.first = std[0];
    testObject.second = std[1];
    testObject.third = std[2];
    testObject.fourth = std[3];
    testObject.fifth = std[4];
    testObject.sixth = std[5];

    return testObject;
}
</code></pre>

<p>I'm not sure how people would feel about this though. It's quite fast at least. I benchmarked copying an array that small using Criterium (in Clojure, but that shouldn't matter much). It's basically instantaneous:</p>

<pre class="lang-clj prettyprint-override"><code>(let [arr (to-array ["ABCDEFG"
                     "HIJKLMNOP"
                     "QRSTUVWXYZ"
                     "QWERTYUIOP"
                     "ASDFGHJKL"])]

  (cc/bench
    (Arrays/copyOf arr 5)))

Evaluation count : 2908877280 in 60 samples of 48481288 calls.
             Execution time mean : 17.184167 ns
    Execution time std-deviation : 1.008121 ns
   Execution time lower quantile : 15.294929 ns ( 2.5%)
   Execution time upper quantile : 19.609513 ns (97.5%)
                   Overhead used : 3.609363 ns

Found 5 outliers in 60 samples (8.3333 %)
    low-severe   1 (1.6667 %)
    low-mild     4 (6.6667 %)
 Variance from outliers : 43.4678 % Variance is moderately inflated by outliers
</code></pre>

<hr>

<p>And I agree with @AJ. In the current context, that method should be static. </p>
    </div>