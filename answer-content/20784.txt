<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The good part is that without any real modifications, I can compile your code with lots of the extra compiler flags to detect errors: <code>-Wall, -Wextra, -Werror, -pedantic</code> under <code>-std=c99</code>. That's a good start. There are a few problems, though:</p>
<h2>Memory Leaking</h2>
<p>You provide a <code>bi_new()</code> function, but nothing to <code>free</code> any of the memory that you allocate. Any time you have something returning a pointer to a heap-allocated struct, you should probably provide a convenience function for deallocation.</p>
<pre><code>void bi_free(bi* a)
{
    free(a-&gt;data);
    free(a);
}
</code></pre>
<p>This is evident in the fact that nothing in your <code>main</code> function cleans up any of the memory you've allocated - thus leaking memory (until the OS kills your process and reclaims it, anyway). For the comments where state you're leaking memory, the fix is to simply modify only <code>size</code> and leave the actual data alone.</p>
<h2>Includes</h2>
<p>When you start writing larger programs, you should try to break them up into a header file and an implementation file. Here, you <code>#include</code> a <code>.c</code> file. This is very bad practice. It (probably) won't hurt you now, but if you ever move to C++, it can cause a lot of problems. Pull out all of your function prototypes and structs into a header file, and include that into the implementation.</p>
<p>When you're doing this, you'll also want to surround your header file with an <a href="http://en.wikipedia.org/wiki/Include_guard" rel="noreferrer">include guard</a>.</p>
<h2>Strings</h2>
<p>Converting to a string with <code>char* bi_to_string(bi *a)</code> works, but in C, it's generally better to take a <code>char *</code> as a parameter into which you can put something, so <code>int bi_to_string(bi *a, char *str)</code>. The reason for this is you dynamically (<code>malloc</code>) allocate a string which you then return. This places the onus on the programmer to remember to free it later. If they pass in a <code>char *</code>, they are either already responsible for freeing it later, or can stack allocate it and have it cleaned up automatically. This does mean the user can pass in a string that is too short, however, either an <code>assert(...)</code> or returning an error_code (hence the <code>int</code> return) can catch that.</p>
<p>A similar argument can be made for your add and multiply functions to take a 3rd parameter which is the result value.</p>
<h2>NULL-Terminating Strings</h2>
<p>You've been bitten by the oldest (C) bug in the book - not NULL-terminating your strings. It's an easy fix:</p>
<pre><code>char *bi_to_string(bi *a) 
{
    //Remember to allocate an extra spot for the NULL terminator
    //Also, you don't need a sizeof(char). The standard says it is guaranteed 
    //to be 1. 
    char *b = malloc(a-&gt;size + 1); 
    int i;
    for(i = 0; i &lt; a-&gt;size; i++) {
        b[i] = a-&gt;data[i] + '0';
    }
    b[a-&gt;size] = '\0';  //NULL terminate
    return b;
}
</code></pre>
<p>That fixes your first assert: <code>assert(strcmp(a, bi_to_string(bi_from_string(a))) == 0);</code>. However, <code>assert(strcmp(e, bi_to_string(bi_add(bi_from_string(c), bi_from_string(d)))) == 0);</code> fails for me. I'd look into debugging that :)</p>
<h2>Naming</h2>
<p>This is a minor thing. I know everything in C is generally terse, but the name <code>bi</code> really isn't descriptive at all. Maybe <code>big_int</code> if you still want to be terse, but make it completely unambiguous as to what it is.</p>
    </div>