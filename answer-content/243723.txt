<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Switch/Case over if/else</strong></p>
<p>I think it would be great if you use switch/case instead of if/else it also makes you code look neat. Something like this</p>
<pre><code>switch(op)
    {
      case '+': result = num1 + num2;    break;
      case '-': result = num1 - num2;    break;
      case '*': result = num1 * num2;    break;
      case '/': result = num1 / num2;    break;
      default:
          cout &lt;&lt; "Please enter valid operation" ;
    }
</code></pre>
<p>Moreover, using switch/cases over if/else improves computational time when doing multiple iterations.</p>
<p><strong>Add an OFF button</strong></p>
<p>Also, the physical calculators that we use are always 'ON' unless they are turned off by pressing an 'OFF' button (or get turned off if no key is pressed for time <span class="math-container">\$t\$</span>). You can also add that feature.</p>
<p><strong>Instruction: type of input expected form user.</strong></p>
<p>Say, a friend of yours wants to run the code, or you are an app developer and your client do not know anything about programming, and he just double-clicks on <code>calculator.exe</code> file, it would be great if you can also mention a short note when the program begins telling what logical operations and input format is expected from the user.</p>
<p><strong>Showing error message</strong></p>
<p>When someone types in <code>num1 / 0</code>. You can either show the error message</p>
<pre><code>cout &lt;&lt; DIVIDE_BY_ZERO_ERROR &lt;&lt; endl;
</code></pre>
<p>Or simply say the answer in Infinity. And its value is</p>
<pre><code>#include &lt;limits&gt;
// ...

double a = std::numeric_limits&lt;double&gt;::infinity();
</code></pre>
<p>You do not need to show this value, just in case if you want to take this code further and add some more features like 'memory' like our typical calculators.
Note: this is not real infinity! It just a number such that <span class="math-container">\$a&gt;b\,\,\forall b\$</span>. There is more about <a href="https://www.geeksforgeeks.org/handling-the-divide-by-zero-exception-in-c/" rel="nofollow noreferrer">Handling the Divide by Zero Exception in C++</a>. Perhaps, I have given only a short glimpse sticking with minimal code policy.</p>
    </div>