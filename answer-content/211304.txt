<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Two bugs</h2>

<p>There is a bug when you have only less than two unique sizes. Trying to access an undefined array <code>newArr[newArr.length-1][1], newArr[newArr.length-2][1]</code> throws if <code>newArray.length &lt; 2</code></p>

<p>Bug in hiding waiting to pounce. The variable <code>key</code> has not been declared and thus has been created in the global scope. This is bad mistake and can result in very hard to find bugs in totally unrelated code. You should use "use strict" to catch such errors early.</p>

<h2>General review notes</h2>

<ul>
<li>Spaces between operators , spaces after <code>for</code>, <code>if</code>, <code>else</code>, <code>,</code>, and <code>=&gt;</code> and befor <code>else</code> and <code>=&gt;</code></li>
<li>There is no need to create the array <code>result</code>, you can create it as you return it. EG <code>return [newArr[newArr.length-1][1], newArr[newArr.length-2][1]];</code> or <code>return [newArr.pop()[1], newArr.pop()[1]];</code></li>
<li>The arrays and <code>map</code> should be constants as they do not change.</li>
<li>Try to avoid using <code>for in</code> loops they have some problems that make them next to useless. Rather use <code>for of</code></li>
<li>Converting the map to an array and then sorting, just to find the top to is overkill. Sorts are complex, and you have already passed over each item, and thus know what the max values are.</li>
<li>Naming <code>map</code>is not a great name. It is a map that holds counts, so <code>counts</code> is the better name</li>
<li>For simple <code>if else</code> statements use the simplest form you can. eg you have <code>if (!foo) {/* do not foo */} else {...}</code> the not <code>!</code> is redundant if you reverse the order to <code>if (foo) {... } else {/* do not foo */}</code></li>
<li>Use the shorter form of arrow function if you are just returning a value. <code>.sort((a, b) =&gt; { return a[0] - b[0] });</code> can be <code>.sort((a, b) =&gt; a[0] - b[0]);</code></li>
<li>Sort sorts in place, you don't need to passing it to another array.</li>
</ul>

<h2>Rewrite using your approach</h2>

<p>If there are no items to produce any of the top two then returns <code>undefined</code> in its place. Needs to check the sorted array size to see if it can return any values.</p>

<p>Note that because it pushes the entries directly to the <code>sorted</code> array the count and items have switched places in the arrays.</p>

<pre><code>function findTopTwo(arr) {
    "use strict";
    const counts = {}, sorted = [];
    for (const item of arr) {
        counts[item] = counts[item] ? counts[item] + 1 : 1;
    }

    sorted.push(...Object.entries(counts));
    if (sorted.length === 0) { return [] }
    if (sorted.length === 1) { return [sorted[0][0]] }

    sorted.sort((a, b) =&gt; a[1] - b[1]);    
    return [sorted.pop()[0], sorted.pop()[0]];
}
</code></pre>

<h2>Avoiding the sort</h2>

<p>This looks for the top two as you count them. It avoids the sort so is less complex and uses less memory.</p>

<pre><code>function findTopTwo(arr) {
    var maxA = 0, maxB = 0, itemA, itemB;
    const counts = {};
    for (const item of arr) {
        const count = (counts[item] = counts[item] ? counts[item] + 1 : 1);
        if (count &gt; maxA &amp;&amp; item !== itemB) {
            if (item !== itemA &amp;&amp; maxA &gt; maxB) { [maxB, itemB] = [maxA, itemA] }
            [maxA, itemA] = [count, item];
        } else if (count &gt; maxB &amp;&amp; item !== itemA) { [maxB, itemB] = [count, item] }
    }
    return maxA &gt; maxB ? [itemA, itemB] : [itemB, itemA];
}
</code></pre>
    </div>