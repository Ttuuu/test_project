<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A version which doesn't use any imports, works on Py2.7+ and relies almost solely on set operations to achieve a single <code>O(len(s))</code> pass + constant time:</p>

<pre><code>def non_repeat(s):
    LEN_CHAR_SET_LOWERED = XXX  # length of your char set adjusted for .lower()
    seen_order = []  # Store the order for figuring out which came first
    seen_set = set()  # Store whether we've seen the character
    dupe_set = set()  # Store whether we've seen it more than once

    # Scan the string
    for ch in s:
        chl = ch.lower()  # lowered character for seen/dupe sets
        if chl not in seen_set:
            seen_order.append(ch)  # This uses the non-lowered version to preserve case
            seen_set.add(chl)
        else:
            dupe_set.add(chl)
            if len(dupe_set) == LEN_CHAR_SET_LOWERED:  # Set len is O(1)
                return ''  # If dupe set contains all possible characters, exit early

    # Find uniques
    unique_set = seen_set - dupe_set

    # Find the first one, if any
    if unique_set:
        for ch in seen_order:
            if ch.lower() in unique_set:
                return ch
    return ''
</code></pre>

<p>Some notes on speed:</p>

<ul>
<li><p><code>O(len(s))</code> average case, <code>O(1)</code> best case (see early exit) - to build the list/sets - set membership, additions and list appends are all average <code>O(1)</code> operations, worst case <code>O(len(set/list))</code>*</p></li>
<li><p><code>O(1)</code> - Set difference on average, worst case <code>O(len(set))</code>*</p></li>
<li><p><code>O(len(list))</code>* for the final check</p></li>
</ul>

<p>*<code>O(len(list))</code> and <code>O(len(set))</code> both have upper bounds of <code>LEN_CHAR_SET_LOWERED</code>, which means they end up constant time, <code>O(1)</code>, as the string grows</p>

<p>This is also interesting because of the early exit: If your string contains all characters duplicated, it will only scan until it has seen every character at least twice and then exit, knowing there will be no unique characters. An alphanumeric string could exit after scanning as few as 72 characters, regardless of the actual length.</p>
    </div>