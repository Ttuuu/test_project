<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Currently your factories instantiate the new objects and then fill in all of their properties with the right values. You could split instantiation from property value assignment. Your <code>StoneHouseCreator</code> could instantiate a <code>StoneHouse</code>, use a <code>HousePopulator</code> that populates the values that all objects of type <code>House</code> have in common, and then the <code>StoneHouseCreator</code> could populate the rest of the values that are exclusive to a <code>StoneHouse</code>. That same <code>HousePopulator</code> could also be used by your <code>WoodenHouseCreator</code>, which would then proceed to populate the <code>WoodenHouse</code>-specific properties.</p>

<p>Actually, there are two ways of doing this. Either you keep it as it was originally (i.e. using <em>inheritance</em>), give your base class a <code>PopulatorMethod(...)</code> that populates the properties of a <code>House</code>, and call <code>base.PopulatorMethod(...)</code> from your override of <code>PopulatorMethod(...)</code> in the child classes. Or you drop the inheritance between your factories completely, you make your <code>FactoryMethod()</code> implementations accept instances of <code>WoodenHouseInfo</code> or <code>StoneHouseInfo</code> depending on the implementing class, and have them use a <code>HousePopulator</code> as you have done.</p>

<p>If you go down the second route, you don't need an abstract parent class, although an interface would be nice, and you can move the <code>HousePopulator = new HousePopulator()</code> assignment to the individual factory classes.</p>

<p>If you want to philosophise about this at a higher level, these are the problems that we run into because of <em>inheritance</em>. Factories, that is the logical separation of object use from object creation, are more naturally suited to cases where you use <em>composition</em> over <em>inheritance</em>. If you are interested more in this, I would recommend reading this excellent <a href="https://codeburst.io/inheritance-is-evil-stop-using-it-6c4f1caf5117" rel="nofollow noreferrer">article</a> on the topic.</p>
    </div>