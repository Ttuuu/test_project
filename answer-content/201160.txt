<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It always looks a little odd when one has to 'invent' something that seems like it ought to be a common, built-in expression, so I can understand why you ask.</p>

<p>Please interpret any of the following as nothing but my humble attempt to share what I know about Haskell programming. I don't consider myself a Haskell expert, and I don't know if other people would consider any of the following idiomatic...</p>

<h1>Simplify maybeWhen</h1>

<p>Is it necessary to pass both a predicate and a value (<code>a</code>) when the value itself turns out to be a Boolean value?</p>

<p>Would it make sense to simplify <code>maybeWhen</code> to something like the following?</p>

<pre><code>maybeWhen' :: Bool -&gt; Maybe b -&gt; Maybe b
maybeWhen' b mb =
  if b then mb else Nothing
</code></pre>

<p>This would enable you to rewrite <code>displayConnectionAction</code> like this:</p>

<pre><code>displayConnectionAction :: Reader GameState (Maybe Action)
displayConnectionAction = maybeWhen' &lt;$&gt; (not &lt;$&gt; isConnected) &lt;*&gt; action
  where
    action =
      Just . Action "Connect" "/connect" &lt;$&gt; currentPlayerId

    isConnected =
      asks (playerConnected . currentPlayer)

    currentPlayerId =
      asks (playerId . currentPlayer)
</code></pre>

<p>All of the function body (from <code>where</code> and down) is the same; only the composition is different.</p>

<p>Notice that it first maps <code>isConnected</code> with <code>not</code>, and the applies the projected value and <code>action</code> to the simplified <code>maybeWhen'</code> function.</p>

<h1>maybeWhen' is just a composition</h1>

<p>Instead of writing a function like <code>maybeWhen'</code>, you can compose it from <code>bool</code> from <code>Data.Bool</code>:</p>

<pre><code>Prelude Data.Bool&gt; :t flip (bool Nothing)
flip (bool Nothing) :: Bool -&gt; Maybe a -&gt; Maybe a
</code></pre>

<p>Plugging that into <code>displayConnectionAction</code> means that you can now write it like this:</p>

<pre><code>displayConnectionAction :: Reader GameState (Maybe Action)
displayConnectionAction = flip (bool Nothing) &lt;$&gt; isConnected &lt;*&gt; action
  where
    action =
      Just . Action "Connect" "/connect" &lt;$&gt; currentPlayerId

    isConnected =
      asks (playerConnected . currentPlayer)

    currentPlayerId =
      asks (playerId . currentPlayer)
</code></pre>

<p>Again, all code below <code>where</code> is the same. Notice, however, that you no longer need any helper function.</p>

<p>Or, instead of using the <code>flip</code> function, you could just flip the arguments:</p>

<pre><code>displayConnectionAction :: Reader GameState (Maybe Action)
displayConnectionAction = bool Nothing &lt;$&gt; action &lt;*&gt; isConnected
  where
    action =
      Just . Action "Connect" "/connect" &lt;$&gt; currentPlayerId

    isConnected =
      asks (playerConnected . currentPlayer)

    currentPlayerId =
      asks (playerId . currentPlayer)
</code></pre>

<p>Notice that in this version, <code>action</code> and <code>isConnected</code> has changed places.</p>

<p>All this, however, relies on the simplification that in this particular example, the <code>a</code> in <code>maybeWhen</code> turns out to be <code>Bool</code>. Perhaps that's not always the case...</p>

<h1>Use do-notation</h1>

<p>Personally, I think this would be more readable if you rewrite the function using <code>do</code> notation. There are definitely Haskell programmers who consider <code>do</code> notation a crutch that has 'nothing to do with functional programming', but I don't share that sentiment.</p>

<p>Since <code>Reader</code> is a <code>Monad</code>, you could refactor the function to this implementation:</p>

<pre><code>displayConnectionAction :: Reader GameState (Maybe Action)
displayConnectionAction = do
  currentPlayerId &lt;- asks (playerId . currentPlayer)
  let action = Just . Action "Connect" "/connect" $ currentPlayerId
  isConnected &lt;- asks (playerConnected . currentPlayer)
  if not isConnected
    then return action
    else return Nothing
</code></pre>

<p>Instead of having various <code>Reader GameState</code> values that you need to figure out how to combine, a variable like <code>currentPlayerId</code> is now simply an <code>Int</code>, and <code>isConnected</code> is simply a <code>Bool</code>.</p>

<p>Ultimately, though, if you often find yourself short-circuiting <code>Bool</code> values to <code>Nothing</code>, you may want to consider using <code>guard</code>, <code>when</code>, and <code>unless</code> with the <code>Maybe</code> monad. In this case, though, this would require you to use a monad transformer so that you can either stack your <code>Reader</code> inside <code>MaybeT</code>, or stack <code>Maybe</code> inside <code>ReaderT</code>.</p>
    </div>