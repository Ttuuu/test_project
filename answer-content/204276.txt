<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's certainly room for improvement.</p>

<ol>
<li>Move that that <code>Select(stringFieldFunction).ToList()</code> out of the while loop. Iterating an <code>IEnumerable</code> might be quite expensive, and there's no need to repeat that work when you find a duplicate.</li>
<li>Select only those strings that have <code>originalString</code> as a prefix. That will reduce the amount of items you need to check against when adjusting the suffix.</li>
<li>Instead of making a list, turn those results into a (hash)set, for faster lookup.</li>
</ol>

<p>Regarding EF complaining: apparently it doesn't support those <code>StringComparsion</code> overloads, so it'll have to fetch all rows from the database and run your <code>Any</code> predicate in memory, which may be slower as expected. Maybe an alternative approach like using <code>ToUpperInvariant</code> can be translated to SQL?</p>

<hr>

<p>Applying the above changes will give you the following:</p>

<pre><code>private string GetUniqueValue&lt;T&gt;(string value, IEnumerable&lt;T&gt; items, Func&lt;T, string&gt; getValue)
{
    var possibleDuplicates = items
        .Select(getValue)
        .Where(val =&gt; val.StartsWith(value, StringComparison.InvariantCultureIgnoreCase))
        .ToHashSet();

    var result = value;
    var suffix = 1;
    while (possibleDuplicates.Contains(result))
    {
        result = value + "_" + suffix;
        suffix += 1;
    }
    return result;
}
</code></pre>

<hr>

<h3>Addendum</h3>

<p>As t3chb0t and ErikE already pointed out, if you want the benefits of Linq-to-SQL, then you need to use <code>IQueryable&lt;T&gt;</code>. Not only that, you also need to make sure that you're using the <code>Queryable</code> Linq extension methods, not the <code>Enumerable</code> variants.</p>

<p>The difference is that <code>Enumerable</code> methods have <code>Func&lt;&gt;</code> parameters, while the <code>Queryable</code> variants have <code>Expression&lt;Func&lt;&gt;&gt;</code> parameters. An <code>Expression</code> is a data structure that represents a piece of code, which makes translation to SQL possible. Because <code>stringFieldFunction</code> is a <code>Func</code>, not an <code>Expression&lt;Func&gt;</code>, the <code>Enumerable.Select</code> variant is used. That cannot be translated to SQL, so all data has to be loaded from the database before the <code>Select</code> (and any subsequent operation) can be performed on it.</p>

<p>To recap: use <code>IQuerable&lt;T&gt;</code>, make sure you're using <code>Queryable</code> Linq methods, and only use supported methods within your expressions.</p>
    </div>