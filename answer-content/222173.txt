<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several aspects about your code worth reviewing: OO-principles, code conventions, functional design. Since you specifically requested to review OO-design and your question lacks context to review functional design, I'll focus on the former.</p>
<hr>
<h3>Inheritance</h3>
<p><code>Expenses</code> and <code>Earnings</code> both derive from <code>Account</code> to provide their specific implementation of <code>Initialze</code>. Because of a lack of context, I can't make a call about this design. The implementation of both classes does seem off. I don't think you want each instance of these classes to create and store the same fixed list of presets.</p>
<hr>
<h3>Polymorphism</h3>
<p>This is proper use of polymorphism. The declaring type <code>Account</code> is the closest fit to enable the use case <code>Initialize</code>. The instance type <code>Expenses</code> provides the specific implementation of that method.</p>
<blockquote>
<pre><code>Account expense = new Expenses();
expense.Initialize();
</code></pre>
</blockquote>
<hr>
<h3>Composition</h3>
<p>You have been a bit too diligent in the composition of some of your classes. <code>AccountType</code> is a redundant class, which acts only as a wrapper for <code>AccountTypes</code> Type. Get rid of it and use <code>AccountTypes</code> directly in <code>Account</code>.</p>
<blockquote>
<pre><code>public class AccountType
{
     public AccountTypes Type;
}
</code></pre>
</blockquote>
<hr>
<h3>Encapsulation</h3>
<p><code>Account</code> is an abstract class that does not provide an explicit constructor. A public default constructor is implied. It is impossible for derived classes to reduce the scope of the access modifier, hence it's a breach in encapsulation. Consider providing a protected constructor for abstract classes.</p>
<pre><code>public abstract class Account
{
    protected Account() {}
}
</code></pre>
<p>All your properties and fields are mutable. This might be as desiged, but at least think about whether this is a requirement or just lazy design.</p>
<blockquote>
<p><code>public decimal Value { get; set; }</code></p>
</blockquote>
    </div>