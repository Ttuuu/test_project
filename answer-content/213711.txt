<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    public static ReadOnlyDictionary&lt;int, int[]&gt; AvailableMoveIndexes =&gt; new ReadOnlyDictionary&lt;int, int[]&gt;
    (
        new Dictionary&lt;int, int[]&gt;
        {
            [0] = new[] { 1, 2 },
            ...
</code></pre>
</blockquote>

<p>Nice clean representation, but why <code>public</code>? I would expect <code>private</code> or (perhaps better) <code>internal</code> with an <code>InternalsVisibleTo</code> attribute to allow a unit test to validate that the possible moves are bidirectional (i.e. <code>AvailableMoveIndexes[i].Contains(j)</code> if and only if <code>AvailableMoveIndexes[j].Contains(i)</code>).</p>

<hr>

<blockquote>
<pre><code>    private readonly ReadOnlyCollection&lt;int&gt; _input;
</code></pre>
</blockquote>

<p>Why the name? I don't tend to think of objects as having input: programs and processes have input.</p>

<p>Also, would <code>IReadOnlyList&lt;int&gt;</code> be a better type to use? It makes it explicit that the order is relevant.</p>

<hr>

<blockquote>
<pre><code>        Dictionary&lt;int, int&gt; minimumNumberOfMovesDictionary = new Dictionary&lt;int, int&gt;
        {
            [0] = 2,
            ...
</code></pre>
</blockquote>

<p>For a dense lookup like this, IMO an <code>int[]</code> makes more sense.</p>

<hr>

<blockquote>
<pre><code>        if (minimumNumberOfMoves == 0 &amp;&amp; IsSolved(_input)) return new int[0];
</code></pre>
</blockquote>

<p>Is <code>minimumNumberOfMoves != 0 &amp;&amp; IsSolved(_input)</code> possible?</p>

<p>Answer: no, so this could be simplified to <code>if (IsSolved(_input)) return new int[0];</code></p>

<hr>

<blockquote>
<pre><code>        const int maximumNumberOfMoves = 100;
</code></pre>
</blockquote>

<p>Where does this number come from? Do you have a mathematical proof that it's exactly the maximum number required? Do you have a mathematical proof that the it's a valid upper bound? Or is it just a conservative guess?</p>

<p>The answer to that question should be in a comment in the code.</p>

<hr>

<p>Here follow rhetorical questions, and to distinguish my answers / comments from the questions themselves I'm using spoiler blocks. These are the questions I would ask in an interview. I'd probably ask similar questions in a non-interview code review as well, if the person who wrote the code was a junior programmer, but I might give more hints up front in that case.</p>

<blockquote>
<pre><code>        for (int moveCount = 1; moveCount &lt; maximumNumberOfMoves; moveCount++)
        {
            ...
        }
</code></pre>
</blockquote>

<p>Since this is an interview question, you can expect to be asked what type of search you're doing. I would put a comment above the loop to answer that question.</p>

<p>If I asked you why you chose that type of search, do you have an answer? If it was because you didn't have time to implement a better one, what would you have liked to implement?</p>

<blockquote class="spoiler">
  <p> Your response in comments was "<em>Loop is used for solving puzzle from minimum to maximum moves.</em>" The response I was hoping for was "Breadth-first search". I personally would have chosen to implement Dijkstra's algorithm or A*. It seems likely that one of the main reasons for setting this particular task is to see (a) whether you know standard algorithms; (b) whether you recognise when they're applicable.</p>
</blockquote>

<hr>

<blockquote>
<pre><code>                        // Remove combinations where subsequent move can undo previous move
                        .Except(new[] { indexMoves.Length &lt; 2 ? zeroIndex : indexMoves[indexMoves.Length - 2] })
</code></pre>
</blockquote>

<p>That gives a bit of optimisation by detecting and skipping loops of length 2, but loops of length 3 around positions 7,8,9 are still possible. How would you detect and skip loops of any length?</p>

<blockquote class="spoiler">
  <p> The straightforward way of doing that is to use a representation which supports hashcode and equality testing, and then to use a <code>HashMap&lt;&gt;</code> to track the positions which you've already seen.</p>
</blockquote>

<hr>

<p>The memory usage is quite high. How could you change your data structure to minimise memory usage?</p>

<blockquote class="spoiler">
  <p> The reason that the memory usage is quite high is the copying of arrays to add an element to the end. You could instead use a linked list where each node points backwards instead of forwards; it would be necessary to reverse the list for output, but each element of <code>_indexMovesCollection</code> would require just one <code>int</code> (or even <code>byte</code>) for the last element and one reference to the previous element.</p>
</blockquote>
    </div>