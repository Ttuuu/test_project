<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't cleanly separate different concerns:</p>

<ul>
<li><code>GameBoard</code> contains both game logic (e.g. who is next to move, preventing playing on an occupied point, etc.) and UI logic.</li>
<li>Converting between graphical coordinates and in game coordinates should be done using a single function for each direction and not interleaved with the drawing or click logic.</li>
<li>Finding neighbours should be its own function. It should never return <code>null</code> elements in the returned collection, but rather a collection containing fewer Points if the center Point is at the edge of the board.</li>
<li>Some of your code uses the <code>GameBoard.SIZE</code> constant. Other code uses the <code>Grid.SIZE</code> instance field. <code>GameBoard.SIZE</code> should either be eliminated or only used a single time, when passing it to the constructor of the board.</li>
</ul>

<p>Some other issues:</p>

<ul>
<li><code>State</code> is a rather vague name, how about <code>StoneColor</code>?</li>
<li><p>Ko doesn't get handled.</p>

<p>I'd recommend having a collection/set if points-in-ko on the game state. This has two advantages over a single nullable Point: You don't need to handle null as a special case and it generalizes nicely to super-ko, where multiple points can be in ko at the same time.</p></li>
<li><p>Doesn't handle suicide</p>

<p>Depending on how you implemented ko, explicitly handling single stone suicide might not be necessary, since it results in an unchanged board. Multiple stone suicide is illegal under most rules, but allowed under other rules. If you want to support multiple rules, you should describe them in a Rules object (including scoring, ko and suicide).</p></li>
</ul>

<p><strong>An alternative design</strong></p>

<p>This is based on my experience writing a go program in C#. It focuses on clean design, sacrificing some performance. But features that need extreme performance, mainly bots, need specialized data-structures anyways, so I don't see that as a problem.</p>

<p>Go game logic only depends on the coordinates of a point for a single function: determining the neighbours of a point. If you use an immutable <code>GoPoint</code> type, you don't need to pass around (x,y) pairs all the time.</p>

<p>You don't need 2D arrays to represent the board state either, you can use a simple <code>Dictionary&lt;GoPoint, StoneColor&gt;</code>. The board topology can be described using two functions <code>Iterable&lt;GoPoint&gt; allPoints</code> and <code>Iterable&lt;GoPoint&gt; neighbours(GoPoint point)</code>.</p>

<p>To avoid creating new instances of <code>Point</code> all the time, you can create all points when initializing the board and add a function <code>GoPoint pointAt(int x, int y)</code> to obtain it.</p>

<p>Chains are simply a collection of points, there is little gain in representing them as their own type. I wouldn't use persistent chains updated each move either. Chains are only necessary to determine which stones will be captured, you can compute them on-the-fly for the neighbours of the point you're playing on. To compute chains, start at a point and recursively add all neighbouring points, eliminating duplicates.</p>

<p>Similarly I'm not fond of having a mutable <code>Stone</code> class. The <code>GoPoint</code> class together with a couple of functions on the class representing to board state should be enough.</p>
    </div>