<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Couple straightforward things that should provide performance and memory usage improvements:</p>

<ul>
<li><p><code>if combination in listOfPossibleWords:</code> if <code>listOfPossibleWords</code> is a list is a <em>slow full-scan operation</em> with <span class="math-container">\$O(n)\$</span> complexity. By switching to a set, you would get constant time lookups</p>

<pre><code>possible_words = set([])
try:
    while True:
        combination = next(combinations)
        combination = ''.join(combination)
        if combination in possible_words:
            continue
        if combination in dictionary:
            possible_words.add(combination)
    # ...
</code></pre>

<p>FYI, here is a handy complexity table for Python date structures: <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">TimeComplexity</a></p></li>
<li><p>when you are reading the file, the <code>f.read()</code> would read the whole contents of the file into memory. You could iterate over the file line by line in a "lazy" manner instead:</p>

<pre><code>with open(DICTIONARY) as f:
    dictionary = [word.strip().lower() for word in f]
</code></pre>

<p>Note that I've also updated it to be a proper pythonic list comprehension.</p></li>
</ul>
    </div>