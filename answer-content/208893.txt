<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Caveat : I don't know F#.</p>

<p>I liked your solution, the use of algebraic data types, pattern matching and use of list processing via fold and higher order functions are good.</p>

<p>However I'm trying to apply a functional style in python (which I'm learning) and I think there is a way to do this that use simple list data structures, with (list) comprehension or the equivalent</p>

<p>Here is my attempt in python to present an alternative approach</p>

<pre><code>import functools
import itertools

fchanges = []
with open('frequency_input') as f:
    for line in f:
            fchanges.append(int(line))

frequencies = [sum(fchanges[:index]) for index in range(1, len(fchanges)+1)]
skew = frequencies[-1]

print('Skew is ' + str(skew))
accumulator = itertools.accumulate(itertools.cycle(fchanges))
prefix = itertools.takewhile(lambda x: (x + skew) not in frequencies, accumulator)

# takewhile consumes the value I'm looking for to check the predicate, hence this hack
# don't need the list, memory optimization - just need the length
plen = functools.reduce(lambda x, y: x+1, prefix, 0)
accumulator = itertools.accumulate(itertools.cycle(fchanges))
print('found first repetition ' + str(next(itertools.islice(accumulator, plen, None)) + skew))
</code></pre>

<p>Happy to receive feedback on my attempt too for any observers.</p>
    </div>