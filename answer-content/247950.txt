<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Write clear and concise error messages</h1>
<p>You will notice that almost any program will not log anything when things are fine. That's desired, because you don't want to be distracted by information that is not useful. When things go wrong though, you want to get a message that explains exactly what went wrong, without overloading you with details that do not matter.</p>
<p>So if all the required extensions are present, you should not log anything. If an extension is missing, you should log exactly which extension(s) you are missing. So what I would write is something like:</p>
<pre><code>void checkRequiredExtensions(const std::vector&lt;std::string&gt; &amp;requiredExtensions) {
    // Get list of supported extensions
    ...
    
    std::vector&lt;std::string&gt; missingExtensions;

    for (extension: requiredExtensions) {
        if (supportedExtensionNames.contains(extension)) {
            missingExtensions.push_back(extension);
        }
    }

    if (!missingExtensions.empty()) {
        std::cerr &lt;&lt; "Missing required Vulkan extensions:\n"

        for (auto extensions: missingExtensions) {
             std::cerr &lt;&lt; "- " &lt;&lt; extension &lt;&lt; "\n";
        }

        throw std::runtime_error("missing required Vulkan extensions");
    }
}
</code></pre>
<p>Now I no longer have to manually compare the list of required extensions with available extensions to find out what is missing. It also avoids the need for a verbosity level.</p>
<h1>When you catch an exception, do something useful or don't catch at all</h1>
<p>The following code is not doing anything useful:</p>
<pre><code>try {
    checkRequiredExtensions(...);
} catch (std::exception &amp;e) {
    throw;
}
</code></pre>
<p>This is equivalent to not using <code>try...catch</code> at all. Also in <code>main()</code> you write:</p>
<pre><code>try {
    app.run();
} catch (const std::exception&amp; e) {
    std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
    return EXIT_FAILURE;
}
</code></pre>
<p>Here what you are doing in the <code>catch</code>-block is almost identical to what would happen if you didn't catch the exception at all, since uncaught exceptions are printed and then the program is aborted with a non-zero exit code.</p>
<h1>Avoid premature optimization</h1>
<p>I would not create a <code>std::unordered_set</code> here, you should only have to check supported extensions once at the start of the program, so efficiency is much less important here than maintainability. So I would write:</p>
<pre><code>uint32_t extensionCount = 0;
vkEnumerateInstanceExtensionProperties(nullptr, &amp;extensionCount, nullptr);

std::vector&lt;VkExtensionProperties&gt; supportedExtensions(extensionCount);
vkEnumerateInstanceExtensionProperties(nullptr, &amp;extensionCount, supportedExtensions.data());

std::vector&lt;std::string&gt; missingExtensions;

for (auto extension: supportedExtensions) {
    if (std::find(requiredExtensions.begin(), requiredExtensions.end(), extension.extensionName) == requiredExtensions.end()) {
        missingExtensions.push_back(extension.extensionName);
    }
}
</code></pre>
<p>If you really feel performance is critical here, then I would still not create a <code>std::unordered_set</code>, but rather <code>std::sort()</code> <code>supportedExtensions</code>, and use <code>std::binary_search()</code> to do efficient lookups. This avoids creating yet another container. And if you can ensure <code>requiredExtensions</code> is also sorted, you can avoid <code>std::binary_search()</code> as well and just do a linear scan through both sorted vectors.</p>
<h1>Consider writing <code>checkMissingExtensions()</code> instead</h1>
<p>It would be a bit cleaner to write a function named <code>checkMissingExtensions()</code> that just returns a vector with the missing extensions. This way, the function does not have to throw exceptions or write error messages, this can then be done by the caller. This also gives the caller more flexibility; for example if you want to use a certain extension but have fall-back code if it isn't present, then you can also use this function without an error message being printed unconditionally.</p>
<h1>Debugging Vulkan programs</h1>
<p>While you are developing your Vulkan application, you should have <a href="https://vulkan-tutorial.com/Drawing_a_triangle/Setup/Validation_layers" rel="noreferrer">validation layers</a> enabled. These will provide you with error messages when you are using the API incorrectly.</p>
    </div>