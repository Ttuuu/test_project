<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review! I'm always glad to see someone who reads the classics.</p>

<p>You made some interesting observations about the program.</p>

<p>The statement <em>Use more "self-explaining" variable names</em> is absolutely correct: the variable name <code>nb</code> could definitely be improved. I would like to point out that <em>self-documenting</em> might be better than <em>self-explaining</em>.</p>

<p>If the variable and symbolic constant names are improved it may not need any additional comments.</p>

<p>The header file <code>&lt;stdio.h&gt;</code> includes a symbolic constant <code>BUFSIZ</code> that might be a better length than <code>80</code>. In some cases <code>BUFSIZ</code> <strong>may</strong> be the maximum line length for the system; this was true on older Unix systems.</p>

<h3>Possible Bug</h3>

<p>This code seems out of scope for the problem as it is defined, I would expect to see that it was outputing blanks.</p>

<pre><code>            for (; blankCount &gt; 0; --blankCount)
                putchar('x');
</code></pre>

<h3>A Good Coding Practice</h3>

<p>Code needs to be maintained. This may include adding additional lines to control structures such as <code>if</code> statements and loops. In C and C++ a good programming practice is to have code blocks (complex statements) in all <code>if</code>, <code>else</code> and loop statements even if it isn't currently necessary.</p>

<pre><code>if (CONDITION)
{
    one statement
}
else
{
    one statement
}

while (CONDITION)
{
    one statement
}
</code></pre>

<h3>Alternate Solution with Simplified Functions</h3>

<p>It might be easier to read, write and modify <code>entab()</code> if it called a function to count all the blanks and print the necessary tabs and blanks. Programming in many cases is breaking down a problem into smaller and smaller pieces until each piece is easy to implement. While this may make the entire program a little more complex, each function is simplified.</p>

<p>This example uses a concept you haven't gotten to in the book yet called pointers.</p>

<pre><code>void print_tabs_or_spaces(int tab_count, int out_value)
{
    for (int i = 0; i &lt; tab_count; i++)
    {
        putchar(out_value);
    }
}

char* count_blanks_and_output_tabs_and_spaces(char *c)
{
    int blank_count = 0;

    while (*c == ' ')
    {
        ++blank_count;
        c++;
    }
    int tab_count = blank_count / TABSIZE;
    int space_count = blank_count % TABSIZE;

    print_tabs_or_spaces(tab_count, '\t');
    print_tabs_or_spaces(space_count, ' ');

    return c;
}

void entab(char str[])
{
    char *c = &amp;str[0];    
    while(*c != '\0')
    {
        if (*c == ' ')
        {
            c = count_blanks_and_output_tabs_and_spaces(c);
        }
        else
        {
            putchar(*c);
            c++;
        }
    }
}
</code></pre>
    </div>