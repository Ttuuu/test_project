<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, it looks pretty good to me, pretty much all my comments are opinionated to a lesser or (often) greater extent.  I'd summarize my main feedback as "<a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a>" and "think readability, not reusability".</p>

<hr>

<h3>Less Reusability</h3>

<p>Unless it was stipulated in the interview, I think the concern of trying to make this reusable was unnecessary and somewhat unhelpful.  IMO, premature reusability is a common source of unnecessary complication (like premature optimization).  </p>

<p>Certainly, there are some obvious cases for reusability (like UI widgets), but trying to make core "business concerns" like a game implementation reusable is, in my experience, often more trouble than it's worth.  In general, YAGNI.  And when you guess about how something may be reused in the future you often build the <a href="https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction" rel="nofollow noreferrer">wrong abstraction</a>.</p>

<p>Specifically, I think the Board and Box are complicated by trying to be more flexible than they really need to be.</p>

<h3>More CSS</h3>

<p>The CSS code wasn't included, but you should probably leverage CSS more.  </p>

<ul>
<li><p>Setting explicit widths and heights in the view is inflexible and could probably be handled more gracefully in CSS - depending on browser support requirements, <a href="https://css-tricks.com/snippets/css/complete-guide-grid/" rel="nofollow noreferrer">CSS Grid</a> might be a good fit, but more 'traditional' approaches would work too.  (Even if you went with fixed width/height, it'd still be better to have that in CSS than your HTML)</p></li>
<li><p>Similar with <code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code>: whichÂ I believe are better handled with <code>:first-child</code> and <code>:last-child</code> selectors.  </p></li>
</ul>

<h3>State Management</h3>

<p>I agree with your decision to not use a state management library, as I do think that would be overkill.  I do, however, find the large amount of logic in <code>boxClickHandler</code> unsatisfying - it's not wrong, but I don't think it's very good readability to have the entire tic-tac-toe logic in a click handler: some separation of the view and the logic would be good.</p>

<p>I do think <code>useReducer</code> would be a good fit: personally I'd probably define the reducer function in its own file - it's good for readability from a separation of concerns perspective, and if you were going to write unit tests it'd be much better for that.  It's trivial to write good unit tests for a reducer function - much harder when that logic is in a click handler.</p>

<p>(Though even just defining a <code>makeMove</code> function on the <code>TicTacToe</code> component and calling it from the click handler would have been something of an improvement, IMO)</p>

<h3>Nits</h3>

<ul>
<li>Maybe split things into more components: the TicTacToe component has fairly large render function: personally, I like my top-level components to look more like:</li>
</ul>

<pre><code>render() {
    return (
        &lt;&gt;
            &lt;Title /&gt;
            &lt;Game /*...*/ /&gt; 
            &lt;Scores /*...*/ /&gt;
        &lt;/&gt;
    )
}
</code></pre>

<p>(Even if those components are just defined elsewhere in the same file, I like when a component's render function makes the overall structure obvious)</p>

<ul>
<li><code>useCallback</code> is technically violating the rules of hooks: it's not at the top of the function as hooks are supposed to be: they're not supposed to be in 'loops' like <code>.map</code>.  In practice, the current version works: since there's always the same number of boxes, the call order is consistent, but I'd advise against breaking the hook rules, anyways.  </li>
</ul>

<p>I'd probably share a single click handler among the boxes and either have the boxes pass in their <code>(i, j)</code> coordinate when they call the click handler, or the coordinates could be attached to the element via data-attributes and read by the click handler.  </p>

<p>Alternatively, you can save complexity by not using <code>useCallback</code> or <code>PureComponent</code> - both Dan Abramov and sophiebits (core React developers) have said that you <a href="https://stackoverflow.com/a/49685684">shouldn't use <code>PureComputed</code> everywhere unless you've measured performance first</a>.</p>
    </div>