<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Fields and properties are different things. You are mixing them up: the naming in the attribute code suggests that you want to operate on fields, but the use site is supplying property names. The naming of <code>field1</code> and <code>field2</code> should be changed to <code>propertyName1</code> and <code>propertyName2</code> respectively.</p>

<p>Don't forget your <a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.bindingflags?view=netframework-4.8" rel="nofollow noreferrer"><code>BindingFlags</code></a>! Right now your code will look up any public property with the given name, <em>including static properties</em>. You probably only want public <em>instance</em> properties:</p>

<pre><code>var property1 = validationContext.ObjectType.GetProperty(_field1, BindingFlags.Instance | BindingFlags.Public);
</code></pre>

<p>Depending on your performance constraints, reflection might be too slow for you. If so, it's common practice to cache the results of calls to <code>GetProperty</code> since that information is unchanging at runtime.</p>

<p>It's good practice to use <code>nameof</code> for getting string representations of identifiers, because if <code>SomeModel.A</code> gets renamed then the program won't compile until you also update the attribute argument.</p>

<pre><code>[EitherRequired(nameof(A), nameof(B))]
public class SomeModel
{
    public int? A {get; set;}
    public int? B {get; set;}
}
</code></pre>
    </div>