<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In all, this is a nice program.  In particular, it compiled and ran (almost) flawlessly on Linux, so keep up the good work on portability!  Here are some things that may help you improve your program.</p>
<h2>Fix the bug</h2>
<p>It's a subtle bug, but there is a problem with the <code>Engine</code> class.  The destructor is this:</p>
<pre><code>SortVis::Engine::~Engine()
{
    SDL_DestroyWindow(m_Window);
    SDL_DestroyRenderer(m_Renderer);

    SDL_Quit();
}
</code></pre>
<p>However, <code>m_Renderer</code> contains a reference to <code>m_Window</code> as we can see from this part of <code>InitRenderer()</code>:</p>
<pre><code>m_Renderer = SDL_CreateRenderer(
    m_Window,
    -1,
    SDL_RENDERER_PRESENTVSYNC | SDL_RENDERER_ACCELERATED
);
</code></pre>
<p>For that reason, the <code>SDL_DestroyRenderer()</code> call must come <em>first</em>.</p>
<h2>Use include guards</h2>
<p>There should be an include guard in each <code>.h</code> file.  That is, start the file with:</p>
<pre><code>#ifndef ENGINE_H
#define ENGINE_H
// file contents go here
#endif // ENGINE_H
</code></pre>
<p>The use of <code>#pragma once</code> is a common extension, but it's not in the standard and thus represents at least a potential portability problem.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#sf8-use-include-guards-for-all-h-files" rel="nofollow noreferrer">SF.8</a></p>
<h2>Reconsider your naming convention</h2>
<p>One common convention is the use uppercase for all classes and structures and lowercase for instances or individual variable names.  This code seems to use uppercase for everything.  Also, the partial use of "Hungarian notation" here is not recommended.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#nl5-avoid-encoding-type-information-in-names" rel="nofollow noreferrer">NL.5</a> for details.</p>
<h2>Separate algorithm and user I/O</h2>
<p>The question notes that only <code>BubbleSort</code> is currently implemented, but it's clear your intent is to add other algorithms.  For that reason, I'd suggest refactoring the <code>Engine</code> class so that instead of having the algorithm and the display and user I/O handing all contained within a <code>BubbleSort</code> member function, I would suggest rewriting so that <code>Engine</code> would repeatedly call a <code>step</code> function that would advance one step in a sorting algorithm.  That function would be solely concerned with the actual sorting mechanics, while the <code>Engine</code> would take care of all of the user I/O.</p>
<h2>Simplify <code>for</code> loops by counting down</h2>
<p>The code currently has this loop in <code>DrawColumns()</code>:</p>
<pre><code>for (int i = 0, Size = m_Numbers.size(); i &lt; Size; ++i)
{
    Column.x = i * m_ColumnWidth;
    // etc.
}
</code></pre>
<p>However, this is an instance in which we don't really care whether we're counting up or down as long as all columns are displayed.  With that in mind, I'd suggest writing it like this:</p>
<pre><code>for (int i = m_Numbers.size(); i; --i)
{
    Column.x = (i-1) * m_ColumnWidth;
    // etc.
}
</code></pre>
<p>As @Useless suggested in a comment, it's not too pretty to have to subtract 1 from <code>i</code> within the loop to use it.</p>
<p>Better would be the next suggestion.</p>
<h2>Simplify using a range-<code>for</code></h2>
<p>The same code loop can be simplified a bit further.</p>
<pre class="lang-cpp prettyprint-override"><code>void SortVis::Engine::DrawColumns()
{
    SDL_SetRenderDrawColor(m_Renderer, 255, 255, 255, 255);

    SDL_Rect Column{ 0, 0, m_ColumnWidth, 0};
    for (const auto n : m_Numbers)
    {
        Column.h = n * m_WindowSize.Y / m_MaxValue;
        // uncomment this to make the picture identical to the original
        // Column.y = m_WindowSize.Y - Column.h;
        SDL_RenderFillRect(m_Renderer, &amp;Column);
        Column.x += m_ColumnWidth;
    }

    SDL_SetRenderDrawColor(m_Renderer, 0, 0, 0, 255);
}
</code></pre>
<p>This version inverts the picture so that the bars are anchored to the bottom instead of the top of the image.  If you prefer it as it was originally done, just uncomment the code line.</p>
<h2>Simplify by better using standard algorithms</h2>
<p>The <code>GenerateRandom</code> code is a lot more complex than it needs to be.  You could write it like this:</p>
<pre><code>void SortVis::Engine::GenerateRandom(int pMaxNumber)
{
    static std::mt19937 rng(std::random_device{}());
    std::vector&lt;int&gt; num(pMaxNumber);
    std::iota(num.begin(), num.end(), 0);
    std::shuffle(num.begin(), num.end(), rng);
    std::swap(num, m_Numbers);
}
</code></pre>
<p>An alternative approach that I like even better is this:</p>
<pre><code>static std::vector&lt;int&gt; generateRandom(int pMaxNumber)
{
    static std::mt19937 rng(std::random_device{}());
    std::vector&lt;int&gt; num(pMaxNumber);
    std::iota(num.begin(), num.end(), 0);
    std::shuffle(num.begin(), num.end(), rng);
    return num;
}
</code></pre>
<p>Now we can simplify the constructor for <code>Engine</code>.  Instead of this:</p>
<pre><code>SortVis::Engine::Engine(Coord pWindowSize, int pMaxNumber)
    : m_WindowSize(pWindowSize)
{
    GenerateRandom(pMaxNumber);
    // etc.
}
</code></pre>
<p>Write this:</p>
<pre><code>SortVis::Engine::Engine(Coord pWindowSize, int pMaxNumber)
    : m_WindowSize(pWindowSize),
    m_Numbers{generateRandom(pMaxNumber)}
{
    // etc.
}
</code></pre>
<h2>Don't ignore passed variables</h2>
<p>The only difference between the two constructors for <code>Engine</code> is that one of them allows the user to passed a window title, which is then ignored!  Better would be to use just the version the allows the window title and then set a default value for it.</p>
    </div>