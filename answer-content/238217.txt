<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Few things, </p>

<p>Your properties should be all set to <code>readonly</code> as you need to enforce your class requirements. You can make them public, but with a <code>private set;</code>. or simply <code>{ get; }</code>.</p>

<p><code>TcpClient</code> is a main requirement in this class, and you didn't setup the class constructor correctly for that purpose. Because of that, you were constructing inside <code>Connect()</code>. For that, you need to setup your constructors something like this :</p>

<pre><code>// should be private since Host and Port are Required
private ClientClass()
{
    Random rnd = new Random();
    ID = AlphaNumRandom.GenerateUpperCaseString(5, rnd);
}

// you can make it public or private it's optional.
private ClientClass(TcpClient tcp) : this()
{
    Tcp = tcp;

    Host = ((IPEndPoint)tcp.Client.RemoteEndPoint).Address.ToString();

    Port = ((IPEndPoint)tcp.Client.LocalEndPoint).Port;

    stream = tcp.GetStream();
}

//constructor for client.
public ClientClass(string host, int port) : this(new TcpClient(host, port)) { }

//constructor for server program.
public ClientClass(TcpListener listener) : this(listener.AcceptTcpClient())
{
    ID = Read();
}
</code></pre>

<p>the <code>Connect()</code> and <code>Disconnect()</code> methods are confusing, because you're returing a boolean, and also you have already <code>IsConnected</code> which you're making it true in different places, and before even initiating the <code>TcpClient</code> how come ? </p>

<p>You should do something like this : </p>

<pre><code>// there is no need to return a bool
// if you need to return a value
// use any other return type other than boolean
public void Connect()
{
    if (!IsConnected)
    {
        //no need to intilize TcpClient, it's already initilized from the constroctur
        IsConnected = true;

        Console.WriteLine("Client [{0}] is now connected.", ID);
    }
    else
    {
        Console.WriteLine("Client [{0}] is already connected.", ID);
    }
}

// there is no need to return a bool
public void Disconnect()
{
    if (IsConnected &amp;&amp; Tcp != null)
    {
        stream.Close();
        Tcp.Close();
        IsConnected = false;
    }

    Console.WriteLine("\nClient [{0}] is disconnected.", ID);
}
</code></pre>

<p><code>IsConnected</code> property is covering the status. avoid redundancy. </p>

<pre><code>public string Read()
{
    if (IsConnected)
    {
        byte[] buffer = new byte[Tcp.ReceiveBufferSize];//create a byte array
        int bytesRead = stream.Read(buffer, 0, Tcp.ReceiveBufferSize);//read count
        string str = Encoding.ASCII.GetString(buffer, 0, bytesRead);//convert to string
        return str.TrimEnd(new char[] {'\r', '\n'});//remove CR and LF
    }
    else
    {
        throw new Exception("Client " + ID + " is not connected!");
    }
}
</code></pre>

<p>Validations and Exceptions always comes first, to make it readable, and clear to human eye, and also would give you a good understanding on what's coming next. So, Don't move them at the bottom of your code neither inside <code>else</code> clause. 
Instead do this : </p>

<pre><code>public string Read()
{
    if (!IsConnected)
    {
        throw new Exception("Client " + ID + " is not connected!");
    }

    byte[] buffer = new byte[Tcp.ReceiveBufferSize];//create a byte array
    int bytesRead = stream.Read(buffer, 0, Tcp.ReceiveBufferSize);//read count
    string str = Encoding.ASCII.GetString(buffer, 0, bytesRead);//convert to string
    return str.TrimEnd(new char[] { '\r', '\n' });//remove CR and LF
}
</code></pre>

<p>Lastly, disposable parts. You need to know when you call <code>Dispose()</code> or using <code>using</code> clause, the instance would be disposed, if there is a connection, it would be closed automatically, along with any inner disposable objects. At least, this would be mostly applied on .NET disposable objects. </p>

<p>also, if you want a better code readability, try to minimize the use of <code>return;</code> like on this line : </p>

<pre><code>if (disposed)
return;
</code></pre>

<p>check this out :</p>

<pre><code>#region dispose pattern

private bool disposed = false;

public void Dispose()
{
    Dispose(true);
    GC.SuppressFinalize(this);
}

protected virtual void Dispose(bool disposing)
{
    if (!disposed)
    {
        if (disposing)
        {
            // Free any other managed objects here
            if (stream != null)
            {
                stream.Dispose();
                stream = null;
            }

            if (Tcp != null &amp;&amp; Tcp.Connected)
            {
                Tcp.Dispose();
                Tcp = null;
            }
        }

        disposed = true;
    }
}

~ClientClass()
{
    Dispose(false);
}

#endregion
</code></pre>
    </div>