<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Node struct</strong></p>

<ol>
<li>Node attribute id is public so it can be changed after node has been created. Is it a supported scenario? id should be private attribute.</li>
<li>Operator overload for == should be const. Equality check can't change object state.</li>
</ol>

<p><strong>Graph class</strong></p>

<ol start="3">
<li><p>Node lifetime management: More than one copy of same node is in memory. Graph is keeping list of node and then edge is keeping separate copy as start and end node. One possibility is let Graph manage node lifetime and edges can work with reference/pointers. There are other models possible to avoid multiple copies of nodes in memory.</p></li>
<li><p>Start and end of edge are public members.  Either make them private or if you want to support case where edge can change endpoint post creation, provide start/end node setters and update adjacency accordingly. Cleaner solution will to make edge immutable with respect to end nodes.</p></li>
<li><p>Edge == operator should be marked const</p></li>
<li><p>Graph construction: There can be two approaches for graph construction. First, incremental mode. Create an empty graph and the go through sequence of addnode and addedge (In many cases only addedge might be sufficient) to reach desired adjacency. Second, bulk mode. Nodes and edges are read from some structured stream desired adjacency is created. In this case graph constructor (or actually loader, because it is loading existing graph from stream into memory) should take structured stream as input. Doing cin/out based I/O in construction is not good design.</p></li>
<li><p>get_nodes is returning copy of list of nodes. It will be memory heavy operation. Any graph algorithm or traversal will call get_nodes multiple times, every time creating copy of all nodes s not good idea.  get_nodes should get const reference of node list managed by graph. get_nodes should be marked const.</p></li>
<li><p>edgeExist is iterating over all edges and trying to match start/end node. Better way will be iterate over source node adjacency and check for edge. Give edge also an id to make edge lookup faster. Edge lookup map will be handy as adjacency queries are very common in graph algorithms. One possibility is to keep edge id in adjacency structure(something like &gt;)</p></li>
<li><p>const auto&amp; in loops in BellmanFord for loops for nodes</p></li>
</ol>
    </div>