<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tried to run your code on my machine. There is no syntax error, the graphics window opens, and I can see the snakes moving. However when I press a key, the program fails with <code>Exception: Unix.Unix_error (Unix.EINTR, "select", "").</code> I will not try to figure out whether it's a bug in your program or in my configuration, but I can refactor your code a bit.</p>

<p>The first thing is to make sure that top-level values and functions are defined at the top level. At the beginning, everything is fine, but <code>draw_background</code> is followed by a single semicolon, so the syntax prevents you from defining the next functions at the toplevel.</p>

<pre><code>let player_2 = {x=((n_tiles-1)/2)*tile_size; y=(n_tiles-1)*tile_size; s_y= (-1)*speed; s_x=0} ;;

draw_background n_tiles tile_size;

let draw_players box_player_1 box_player_2 player_1 player_2 =    
    draw_box box_player_1 player_1.x player_1.y;
    draw_box box_player_2 player_2.x player_2.y;
    in

let key_pressed_player_1 button_pressed player =
    (match button_pressed with
      'q' -&gt;  if player.s_x &lt;&gt; speed then {x = player.x; y = player.y; s_x = (-1)*speed; s_y = 0} else player;
      |'d' -&gt; if player.s_x &lt;&gt; (-1)*speed then {x = player.x; y =player.y; s_x = speed; s_y = 0} else player;
      |'z' -&gt; if player.s_y &lt;&gt; (-1)*speed then  {x = player.x; y =player.y; s_x = 0; s_y = speed} else player;
      |'s' -&gt; if player.s_y &lt;&gt; speed then {x = player.x; y =player.y; s_x = 0; s_y = (-1)*speed} else player;
      |_ -&gt;  player)
    in
</code></pre>

<p>Can be changed into</p>

<pre><code>let player_2 = {x=((n_tiles-1)/2)*tile_size; y=(n_tiles-1)*tile_size; s_y= (-1)*speed; s_x=0} ;;

let () = draw_background n_tiles tile_size;;

let draw_players box_player_1 box_player_2 player_1 player_2 =    
    draw_box box_player_1 player_1.x player_1.y;
    draw_box box_player_2 player_2.x player_2.y

let key_pressed_player_1 button_pressed player =
    (match button_pressed with
      'q' -&gt;  if player.s_x &lt;&gt; speed then {x = player.x; y = player.y; s_x = (-1)*speed; s_y = 0} else player;
      |'d' -&gt; if player.s_x &lt;&gt; (-1)*speed then {x = player.x; y =player.y; s_x = speed; s_y = 0} else player;
      |'z' -&gt; if player.s_y &lt;&gt; (-1)*speed then  {x = player.x; y =player.y; s_x = 0; s_y = speed} else player;
      |'s' -&gt; if player.s_y &lt;&gt; speed then {x = player.x; y =player.y; s_x = 0; s_y = (-1)*speed} else player;
      |_ -&gt;  player)
</code></pre>

<p>Notice that instead of using <code>let f x = foo in let g x = bar in</code> we can keep defining top level bindings: <code>let f x = foo let g x = bar</code>. The intermediate bindings can be adapted this way up until the call to the main loop:</p>

<pre><code>    aux player_1 player_2 [] false
in

main_loop player_1 player_2;
</code></pre>

<p>is turned into</p>

<pre><code>    aux player_1 player_2 [] false

let () = main_loop player_1 player_2;;
</code></pre>

<p>Now I can separate the function and value definitions from the instructions actually executing the code, which gives the following grouping at the end of the file.</p>

<pre><code>let () =
  Graphics.open_graph " ";
  Graphics.set_window_title "Test !";
  Graphics.plot 50 50;
  draw_background n_tiles tile_size;
  main_loop player_1 player_2;;
</code></pre>

<p>I try to improve (my) readability by adjusting the style slightly. For instance, following semicolons with a single space: <code>(x1,y1);(ix1,iy1);</code> becomes <code>(x1,y1); (ix1,iy1);</code>. Also editing the column alignment here and there.</p>

<p>I use the record update notation. This is quite useful when you are creating a new record based on an existing one and only changing a few fields. For instance: </p>

<pre><code>let update_player_position pl = {
    x = pl.x + pl.s_x ;
    y = pl.y + pl.s_y ;
    s_x = pl.s_x ;
    s_y = pl.s_y};;
</code></pre>

<p>Becomes</p>

<pre><code>let update_player_position pl = { pl with x = pl.x + pl.s_x ; y = pl.y + pl.s_y };;
</code></pre>

<p>The same trick can be used in the <code>key_pressed_player_1</code> function. It gives</p>

<pre><code>let key_pressed_player_1 button_pressed player =
    (match button_pressed with
      |'q' -&gt; if player.s_x &lt;&gt;        speed then { player with s_x = (-1)*speed; s_y =          0 } else player;
      |'d' -&gt; if player.s_x &lt;&gt; (-1) * speed then { player with s_x =      speed; s_y =          0 } else player;
      |'z' -&gt; if player.s_y &lt;&gt; (-1) * speed then { player with s_x =          0; s_y =      speed } else player;
      |'s' -&gt; if player.s_y &lt;&gt;        speed then { player with s_x =          0; s_y = (-1)*speed } else player;
      |_ -&gt;  player)
</code></pre>

<p><code>key_pressed_player_2</code> is similarly adapted, and now I see clearly the similarity between the two. It really begs for refactoring, as you indicated in your post edit. The only difference between the two functions is which key corresponds to which direction. Once the mapping is given, both function behave exactly the same. So I first define a type to capture the concept of direction, and two functions for the mapping from keys to directions.</p>

<pre><code>type direction = Left | Right | Up | Down

let key_to_direction_1 button_pressed = match button_pressed with
  | 'q' -&gt; Some Left
  | 'd' -&gt; Some Right
  | 'z' -&gt; Some Up
  | 's' -&gt; Some Down
  | _   -&gt; None
let key_to_direction_2 button_pressed = match button_pressed with
  | 'j' -&gt; Some Left
  | 'l' -&gt; Some Right
  | 'i' -&gt; Some Up
  | 'k' -&gt; Some Down
  | _   -&gt; None
</code></pre>

<p>The next step is to capture how the speed of the player is updated based on the desired direction, if any.</p>

<pre><code>let update_speed direction_option player = match direction_option with
  | Some Left  -&gt; if player.s_x &lt;&gt;        speed then { player with s_x = (-1)*speed; s_y =          0 } else player;
  | Some Right -&gt; if player.s_x &lt;&gt; (-1) * speed then { player with s_x =      speed; s_y =          0 } else player;
  | Some Up    -&gt; if player.s_y &lt;&gt; (-1) * speed then { player with s_x =          0; s_y =      speed } else player;
  | Some Down  -&gt; if player.s_y &lt;&gt;        speed then { player with s_x =          0; s_y = (-1)*speed } else player;
  | None -&gt;  player
</code></pre>

<p>Now I can redefine the <code>key_pressed_player</code> functions to glue the key-direction mapping and the speed update.</p>

<pre><code>let key_pressed_player_1 button_pressed player = update_speed (key_to_direction_1 button_pressed) player
let key_pressed_player_2 button_pressed player = update_speed (key_to_direction_2 button_pressed) player
</code></pre>

<p>Note how the <code>key_to_direction_1</code> function matches immediately on its last (and single) argument and never uses the argument name anywhere else. In such a situation we don't even need to name the argument:</p>

<pre><code>let key_to_direction_1 = function
  | 'q' -&gt; Some Left
  | 'd' -&gt; Some Right
  | 'z' -&gt; Some Up
  | 's' -&gt; Some Down
  | _   -&gt; None
</code></pre>

<p>The same trick can be used for <code>update_speed</code> provided we switch the order of the arguments. Of course the order of the arguments also needs to be switched in calls to <code>update_speed</code>.</p>

<pre><code>let update_speed player = function
  | Some Left  -&gt; if player.s_x &lt;&gt;      speed then { player with s_x = -1 * speed; s_y =          0 } else player;
  | Some Right -&gt; if player.s_x &lt;&gt; -1 * speed then { player with s_x =      speed; s_y =          0 } else player;
  | Some Up    -&gt; if player.s_y &lt;&gt; -1 * speed then { player with s_x =          0; s_y =      speed } else player;
  | Some Down  -&gt; if player.s_y &lt;&gt;      speed then { player with s_x =          0; s_y = -1 * speed } else player;
  | None -&gt;  player
</code></pre>

<p>Minor stylistic update as I go over the code: the disjunction and conjunction boolean operators <code>||</code> and <code>&amp;&amp;</code> have low priority, so we can drop the parentheses around expressions surrounding them. For instance</p>

<pre><code>let has_lost player walls =
    (is_out player) || (is_on_wall player walls)
</code></pre>

<p>becomes</p>

<pre><code>let has_lost player walls = is_out player || is_on_wall player walls
</code></pre>

<p>Similarly,</p>

<pre><code>        if (has_lost player_1_next walls) then begin
            minisleep 3.0; 
            exit 0 
        end else ();
</code></pre>

<p>can be turned into</p>

<pre><code>        if has_lost player_1_next walls then
            (minisleep 3.0; 
            exit 0);
</code></pre>

<p>I usually prefer using parentheses instead of <code>begin</code> and <code>end</code> to group sequences of expressions, but it doesn't really matter. This way, I never need to use these two keywords.</p>

<p>I see that the graphics related functions are independent of the other ones, so I can group them in a module that I call Draw (in my own project, I would create a file Draw.ml to hold them). When I do this, I do not need the "draw" prefix that you added to avoid future namespace collision.</p>

<p>There is another convenient record syntax. When defining function taking a record as argument, one can deconstruct and bind the relevant fields directly. For instance <code>is_out</code>Â can be rewritten as</p>

<pre><code>let is_out { x; y; _ } = x &gt; tile_size * n_tiles || y &gt; tile_size * n_tiles || x &lt; 0 || y &lt; 0
</code></pre>

<p>It seems that both player's boxes are identical, except for the color. We can share the construction.</p>

<pre><code>let box_player color = {
  w  = tile_size;
  bw = tile_size / 2;
  h  = tile_size;
  r  = Top;
  b1_col = color;
  b2_col = color;
  b_col  = color }
let box_player_1 = box_player 657900
let box_player_2 = box_player  35700
</code></pre>

<p>The starting values for <code>player_1</code> and <code>player_2</code> are set globally, but are only used to initialize the main_loop. So these values do not need to be global and can be created immediately before the main loop.</p>

<pre><code>let player_1 = {x=((n_tiles-1)/2)*tile_size; y=tile_size ;s_y=speed; s_x=0} ;;

let player_2 = {x=((n_tiles-1)/2)*tile_size; y=(n_tiles-1)*tile_size; s_y= (-1)*speed; s_x=0} ;;
</code></pre>

<p>is moved to</p>

<pre><code>let () =
  Graphics.open_graph " ";
  Graphics.set_window_title "Test !";
  Graphics.plot 50 50;
  Draw.background n_tiles tile_size;
  let player_1 = { x = (n_tiles - 1) / 2 * tile_size; y =                 tile_size; s_y =      speed; s_x = 0 }
  and player_2 = { x = (n_tiles - 1) / 2 * tile_size; y = (n_tiles - 1) * tile_size; s_y = -1 * speed; s_x = 0 } in
  main_loop player_1 player_2;;
</code></pre>

<p>The <code>updates_speed</code> function can be simplified by moving the magnitude of the speed to the <code>update_player_position</code> function:</p>

<pre><code>let update_player_position pl = { pl with x = pl.x + pl.s_x ; y = pl.y + pl.s_y };;

let update_speed player = function
  | Some Left  -&gt; if player.s_x &lt;&gt;      speed then { player with s_x = -1 * speed; s_y =          0 } else player;
  | Some Right -&gt; if player.s_x &lt;&gt; -1 * speed then { player with s_x =      speed; s_y =          0 } else player;
  | Some Up    -&gt; if player.s_y &lt;&gt; -1 * speed then { player with s_x =          0; s_y =      speed } else player;
  | Some Down  -&gt; if player.s_y &lt;&gt;      speed then { player with s_x =          0; s_y = -1 * speed } else player;
  | None       -&gt; player
</code></pre>

<p>is turned into</p>

<pre><code>let update_player_position pl = { pl with x = pl.x + pl.s_x * speed ; y = pl.y + pl.s_y * speed }

let update_speed player = function
  | Some Left  -&gt; if player.s_x &lt;&gt;  1 then { player with s_x = -1; s_y =  0 } else player;
  | Some Right -&gt; if player.s_x &lt;&gt; -1 then { player with s_x =  1; s_y =  0 } else player;
  | Some Up    -&gt; if player.s_y &lt;&gt; -1 then { player with s_x =  0; s_y =  1 } else player;
  | Some Down  -&gt; if player.s_y &lt;&gt;  1 then { player with s_x =  0; s_y = -1 } else player;
  | None       -&gt; player
</code></pre>

<p>Don't forget to update the initial player values</p>

<pre><code>  let player_1 = { x = (n_tiles - 1) / 2 * tile_size; y =                 tile_size; s_y =  1; s_x = 0 }
  and player_2 = { x = (n_tiles - 1) / 2 * tile_size; y = (n_tiles - 1) * tile_size; s_y = -1; s_x = 0 }
</code></pre>

<p>The <code>update_speed</code> function can be rewritten to use guards, it'll make it slightly simpler to read.</p>

<pre><code>let update_speed player = function
  | Some Left  when player.s_x &lt;&gt;  1 -&gt; { player with s_x = -1; s_y =  0 };
  | Some Right when player.s_x &lt;&gt; -1 -&gt; { player with s_x =  1; s_y =  0 };
  | Some Up    when player.s_y &lt;&gt; -1 -&gt; { player with s_x =  0; s_y =  1 };
  | Some Down  when player.s_y &lt;&gt;  1 -&gt; { player with s_x =  0; s_y = -1 };
  | _ -&gt; player
</code></pre>

<p>Keep in mind that this modification makes the function a bit less robust. Now if you ever change the <code>type direction</code>, for instance to add diagonals, the compiler will not complain about a non-exhaustive match, whereas the previous version would get the compiler to remind you to adapt <code>update_speed</code>.</p>

<p>Now, let's say that we do care about robustness and that we want to take advantage of the type system to help us avoid meaningless states. Currently, there are four possible pairs <code>s_x, s_y</code> that are meaningful, <code>[-1, 0; 1, 0; 0, -1; 0, 1]</code>, but the type system does not prevent the construction of or update to player records with values like, say, <code>s_x = 0; s_y = 0</code>. In order to get the compiler to rule out such values, we can change the record type for players. We replace the <code>s_x</code> and <code>s_y</code> fields with a <code>current_direction</code> field that can only ever take 4 values.</p>

<pre><code>type player = { x:int; y:int; cur_direction: direction }
</code></pre>

<p>We then need to adapt our functions to take this new type into account.</p>

<pre><code>let update_player_position pl = match pl.cur_direction with
  | Left  -&gt; { pl with x = pl.x - speed }
  | Right -&gt; { pl with x = pl.x + speed }
  | Up    -&gt; { pl with y = pl.y + speed }
  | Down  -&gt; { pl with y = pl.y - speed }
</code></pre>

<p>It also gives us the opportunity to clarify the guard condition we had in the <code>update_speed</code> function: we only update the speed if the required direction is not opposite to the current one.</p>

<pre><code>let opposite_direction = function
  | Left  -&gt; Right
  | Right -&gt; Left
  | Up    -&gt; Down
  | Down  -&gt; Up
let update_speed player = function
  | Some dir -&gt; if opposite_direction player.cur_direction &lt;&gt; dir then { player with cur_direction = dir } else player
  | None -&gt; player
</code></pre>

<p>At this point, I realize that <code>key_pressed_player_1</code> is simple enough that inlining it will not decrease readability. We can also rename <code>update_player_position</code> into <code>update_position</code> to match the naming of <code>update_speed</code>. The main loop looks like</p>

<pre><code>let main_loop player_1 player_2 =
  let rec aux player_1 player_2 walls over =
    Draw.players player_1 player_2;

    let e = Graphics.wait_next_event [Graphics.Poll] in
    if e.Graphics.keypressed then ignore (Graphics.wait_next_event [Graphics.Key_pressed]);

    let player_1_bis = update_speed player_1 (key_to_direction_1 e.Graphics.key)
    and player_2_bis = update_speed player_2 (key_to_direction_2 e.Graphics.key) in

    minisleep refresh_rate;

    let player_1_next = update_position player_1_bis
    and player_2_next = update_position player_2_bis in

    if has_lost player_1_next walls then (minisleep 3.0; exit 0);
    if has_lost player_2_next walls then (minisleep 3.0; exit 0);

    aux player_1_next player_2_next ((player_1_next.x, player_1_next.y) :: (player_2_next.x, player_2_next.y) :: walls) over in
  aux player_1 player_2 [] false
</code></pre>

<p>We notice that as soon as <code>player_i_bis</code> is defined, we don't need to access <code>player_i</code> anymore and that as soon as <code>player_i_next</code> is defined, we don't need to access <code>player_i_bis</code> anymore. So we can use the same name <code>player_i</code> all over and shadow the previous values. On the other hand, the only use of <code>player_i</code> made by <code>main_loop</code> is to feed aux, so if we change the ordering of the arguments of <code>aux</code> we can define this function in <code>main</code> once and for all (instead of redefining <code>aux</code> for each instance of the arguments <code>player_i</code>. Also, the <code>over</code> argument of <code>aux</code> is never used, so we can drop it.</p>

<p>When a player loses, we can get out of <code>aux</code> naturally instead of calling <code>exit 0</code>, by simply not performing a recursive call.</p>

<p>Back to the drawing. The <code>box_player_1</code> and <code>box_player_2</code> values are defined globally but they are only used to feed the <code>Draw.players</code> function. This can be inlined.</p>

<p>By the way, I'm not exactly sure what you're doing with the <code>relief</code> type. Only the <code>Top</code> value seem to be used. Maybe it's there for future versions. If you don't care about <code>Flat</code> and <code>Bot</code>, then the code for <code>Draw.box</code> can be simplified.</p>

<p>I see that <code>Graphics.plot 50 50;</code> has hard-coded the value <code>50</code>, but it corresponds to <code>n_tiles / tile_size</code>. Also, the <code>Graphics</code> instructions corresponding to the setup can be moved to the <code>Draw</code> module by creating an appropriate initialization function.</p>

<pre><code>  let init n_tiles tile_size =
    Graphics.open_graph " ";
    Graphics.set_window_title "Test !";
    Graphics.plot (n_tiles / tile_size) (n_tiles / tile_size);
    background n_tiles tile_size
</code></pre>

<p>After all these modifications, my refactored version of your program would be</p>

<pre><code>#load "unix.cma";;
#load "graphics.cma";;

let minisleep (sec: float) = ignore (Unix.select [] [] [] sec)

type relief = Top | Bot | Flat

type box_config =
  { w:int; h:int; bw:int;
    mutable r:relief;
    b1_col : Graphics.color;
    b2_col : Graphics.color;
    b_col  : Graphics.color }

let tile_size = 3
and n_tiles = 150
and refresh_rate = 0.02
let speed = tile_size

type direction = Left | Right | Up | Down

type player = { x : int; y : int; cur_direction : direction }

module Draw =
struct

  let rect x0 y0 w h =
    let (a, b) = Graphics.current_point ()
    and x1 = x0 + w
    and y1 = y0 + h in
    Graphics.moveto x0 y0;
    Graphics.lineto x0 y1; Graphics.lineto x1 y1;
    Graphics.lineto x1 y0; Graphics.lineto x0 y0;
    Graphics.moveto a b

  let background n_tiles tile_size =
    for i = 1 to n_tiles do
      for j = 1 to n_tiles do
        rect (i * tile_size) (j * tile_size) tile_size tile_size
      done
    done

  let box_outline bcf col x1 y1=
    Graphics.set_color col;
    rect x1 y1 bcf.w bcf.h

  let box bcf x1 y1 =
    let x2  = x1 + bcf.w  and y2  = y1 + bcf.h in
    let ix1 = x1 + bcf.bw and ix2 = x2 - bcf.bw
    and iy1 = y1 + bcf.bw and iy2 = y2 - bcf.bw in
    let border1 g =
      Graphics.set_color g;
      Graphics.fill_poly [| (x1, y1); (ix1, iy1); (ix2, iy1); (ix2, iy2); (x2, y2); (x2, y1) |] in
    let border2 g =
      Graphics.set_color g;
      Graphics.fill_poly [| (x1, y1); (ix1, iy1); (ix1, iy2); (ix2, iy2); (x2, y2); (x1, y2) |] in
    Graphics.set_color bcf.b_col;
    (match bcf.r with
    | Top -&gt;
       Graphics.fill_rect ix1 iy1 (ix2 - ix1) (iy2 - iy1);
       border1 bcf.b1_col;
       border2 bcf.b2_col
    | Bot -&gt;
       Graphics.fill_rect ix1 iy1 (ix2 - ix1) (iy2 - iy1);
       border1 bcf.b2_col;
       border2 bcf.b1_col
    | Flat -&gt;
       Graphics.fill_rect x1 y1 bcf.w bcf.h);
    box_outline bcf Graphics.black x1 y1

  let box_player color = {
    w  = tile_size;
    bw = tile_size / 2;
    h  = tile_size;
    r  = Top;
    b1_col = color;
    b2_col = color;
    b_col  = color }
  let box_player_1 = box_player 657900
  let box_player_2 = box_player  35700

  let init n_tiles tile_size =
    Graphics.open_graph " ";
    Graphics.set_window_title "Test !";
    Graphics.plot (n_tiles / tile_size) (n_tiles / tile_size);
    background n_tiles tile_size

  let players player_1 player_2 =
    box box_player_1 player_1.x player_1.y;
    box box_player_2 player_2.x player_2.y
end


let key_to_direction_1 = function
  | 'q' -&gt; Some Left  | 'd' -&gt; Some Right  | 'z' -&gt; Some Up  | 's' -&gt; Some Down
  | _   -&gt; None
let key_to_direction_2 = function
  | 'j' -&gt; Some Left  | 'l' -&gt; Some Right  | 'i' -&gt; Some Up  | 'k' -&gt; Some Down
  | _   -&gt; None

let update_position pl = match pl.cur_direction with
  | Left  -&gt; { pl with x = pl.x - speed }
  | Right -&gt; { pl with x = pl.x + speed }
  | Up    -&gt; { pl with y = pl.y + speed }
  | Down  -&gt; { pl with y = pl.y - speed }

let opposite_direction = function
  | Left  -&gt; Right
  | Right -&gt; Left
  | Up    -&gt; Down
  | Down  -&gt; Up
let update_speed player = function
  | Some dir -&gt; if opposite_direction player.cur_direction &lt;&gt; dir then { player with cur_direction = dir } else player
  | None -&gt; player

let is_out { x; y; _ } = x &gt; tile_size * n_tiles || y &gt; tile_size * n_tiles || x &lt; 0 || y &lt; 0
let is_on_wall player walls = List.mem (player.x, player.y) walls
let has_lost player walls = is_out player || is_on_wall player walls

let main_loop =
  let rec aux walls player_1 player_2 =
    Draw.players player_1 player_2;

    let e = Graphics.wait_next_event [Graphics.Poll] in
    if e.Graphics.keypressed then ignore (Graphics.wait_next_event [Graphics.Key_pressed]);

    let player_1 = update_speed player_1 (key_to_direction_1 e.Graphics.key)
    and player_2 = update_speed player_2 (key_to_direction_2 e.Graphics.key) in

    minisleep refresh_rate;

    let player_1 = update_position player_1
    and player_2 = update_position player_2 in

    if has_lost player_1 walls || has_lost player_2 walls then minisleep 3.0
    else aux ((player_1.x, player_1.y) :: (player_2.x, player_2.y) :: walls) player_1 player_2 in
  aux []

let () =
  Draw.init n_tiles tile_size;
  let player_1 = { x = (n_tiles - 1) / 2 * tile_size; y =                 tile_size; cur_direction =   Up }
  and player_2 = { x = (n_tiles - 1) / 2 * tile_size; y = (n_tiles - 1) * tile_size; cur_direction = Down } in
  main_loop player_1 player_2;;
</code></pre>

<p>Deeper modifications are possible too. For instance, you could be concerned with the latency introduced by checking for wall collision. Currently, you store walls in a list and checking for membership  is O(n). You can replace the list with a two-dimensional array, or with a hash-table and get O(1). If you would like to prefer keeping the code purely functional, then a <code>Set</code> from the standard library would give you access in O(log n), or maybe you could go for a Patricia tree using Jean-Christophe FilliÃ¢tre's <a href="https://www.lri.fr/~filliatr/software.en.html" rel="nofollow">library</a>.</p>
    </div>