<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><code>loadBinaryFile</code> should either take a <code>std::string_view</code>, or, at least, a <code>std::string const&amp;</code> as argument. You don't want to take ownership of the string here.</li>
<li>Your filenames do not match. <code>file_parse_helpers.cpp</code> begins with <code>#include "FileReaderHelper.h"</code>, but you don't show us the contents of that header. Presumably, you'd want to include <code>file_parse_helpers.h</code>.</li>
<li>You're missing the required includes for <code>size_t</code>, <code>uint8_t</code> and friends. Also, <code>::size_t</code>, <code>::uint8_t</code> etc. might not exist if you include the correct <code>&lt;cheader&gt;</code>, and should be replaced with <code>std::size_t</code> and <code>std::uint8_t</code>.</li>
<li><code>hexStringToInt</code> is dangerous. <code>std::string_view</code> is not guaranteed to be null-terminated, and if it isn't, you could be reading out of bounds and invoking undefined behavior.</li>
<li>Don't pass <code>0</code> to pointer arguments, pass <code>nullptr</code>. The latter is typesafe and indicates your intent clearly.</li>
<li>You can merge the three <code>AssemblyLine</code> constructors into one by adding default arguments: <code>AssemblyLine(OpCode const&amp; opCode, uint8_t param1 = 0, uint8_t param2 = 0)</code>.</li>
<li>Why are the member variables of <code>AssemblyLine</code> protected? Doesn't look like you're planning on inheriting from it, so these should be private.</li>
<li>Beware of <code>const</code> member variables! While they might seem harmless on first sight, they're actually quite dangerous if you ever intend to put your objects into some sort of container. In fact, making a <code>std::vector&lt;AssemblyLine&gt;</code>, adding some elements, removing some elements, then adding some elements will invoke undefined behavior.</li>
<li>Don't use <code>printf</code> and friends; they're not type safe and don't always deal well with non-null-terminated strings. Either use the standard library facilities (i.e. iostreams), or make use of a modern formatting library, such as <a href="https://github.com/fmtlib/fmt" rel="nofollow noreferrer">fmt</a>.</li>
<li><code>disasembleOneCode</code> [sic] can exhibit undefined behavior since you don't do any bounds checking, and if <code>codeIndex + 2 &gt;= data.size()</code>, then you're accessing somewhere you shouldn't.</li>
<li><code>for (; currentId &lt; data.size() - 1;)</code> should be expressed as <code>while (currentId &lt; data.size() - 1)</code>.</li>
<li>Don't write <code>printX</code> functions. Instead, write either a function taking a <code>std::ostream</code> and writing to it, or overload <code>operator&lt;&lt;</code> for your class. The reason for this is that this makes printing a lot more flexible and enables you to print to many different sinks, without having to adjust the actual printing code.</li>
</ol>

<hr>

<p>To answer your question: <em>No</em>, you don't need a macro here at all. Just put <code>constexpr inline unsigned const maxStringLength = 32;</code> in a header and include it.</p>
    </div>