<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can shorten your program tremendously. Consider the following two things:</p>

<ol>
<li>You only need to sum the first 11 numbers to get the correct sum</li>
<li>Take advantage of Swift's functional aspect</li>
</ol>

<p>The entire solution can be condensed into this:</p>

<pre><code>var totalSum = strings.map({
    $0.substringToIndex(advance($0.startIndex, 11)).toInt()!
}).reduce(0, +)

var stringSum : String = String(totalSum)
var sum = stringSum.substringToIndex(advance(stringSum.startIndex, 10))

println(sum)
</code></pre>

<h3>Explanation</h3>

<p>We use <code>array.map()</code> to create a new array from the existing numbers array. The new array contains the first 11 digits of each number from the original array. Each element is an int, converted using <code>toInt()</code>, which lets us apply <code>reduce()</code> to sum the array.</p>

<p>We then convert the sum to a string, and take the first 10 chars. And voila, you solved it.</p>

<p>This assumes you already have an array of strings, as is the case in your code:</p>

<pre><code>let strings = [
    "37107287533902102798797998220837590246510135740250",
    // ...
    "53503534226472524250874054075591789781264330331690"
]
</code></pre>
    </div>