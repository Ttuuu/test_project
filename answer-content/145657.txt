<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Builder pattern</h1>

<p>Consider the "<a href="https://en.wikipedia.org/wiki/Builder_pattern" rel="noreferrer">builder pattern</a>". As I started to pass in arguments to the constructor, it was hard to keep the semantics right.</p>

<p>The builder pattern helps the developer to</p>

<ul>
<li>abstract from argument input order</li>
<li>handle a lot of constructor arguments</li>
<li>abstract from default values that make sense</li>
<li>make arguments optional and therefore avoid telescope constructors</li>
</ul>

<p>The builder pattern has only one assertion: It doesn't matter how many arguments you passed in, it will always build a consistent object.</p>

<h1>Avoid multiple return-statements</h1>

<p>Return-statements are structural identical to goto-statements although they are a formalized version. What all goto-alike-statements (return, continue, break) hav in common: They are not refactoring-stable. They hinder you to apply reforings like "extract method". If you have to insert a new case in an algorithm that uses break, continue and return-statements you may have to overthink the whole algorithm so that your change will not break it.</p>

<h1>Avoid inexpressive return values</h1>

<p>You may see return values like true/false to indicate something has been processed well or not. These return values may be sufficient for trivial cases in trivial environments where less exceptional cases occur.</p>

<p>In complex environment a method execution may fail due to several reasons. A connection to the server was lost, an inconsistency on the database-side was recognized, the execution failed because of security reasons... to name only the tip of the iceberg. There modern languages introduce a concept for "exceptional" cases: <a href="https://en.wikipedia.org/wiki/Exception_handling" rel="noreferrer">Exceptions</a>.</p>

<p>E.g. you have following signature:</p>

<pre><code>public boolean load (double kg)
</code></pre>

<p>Beside you have mixed two concerns in one method (load/unload) that you treat differently (overload will not be allowed, unload will be corrected) you also try to publish success information via return value.</p>

<p>I suggest to not publish true or false. I suggest to have either no return value or the new value of the loadWeight. Exceptional cases I would handle with the concepts of exceptions. I would expect a signature like this:</p>

<pre><code>public double load (double kg) throws OverloadedException
</code></pre>

<p>The OverloadedException may not be signature relevant (RuntimeException) but it expresses the intention of the method.</p>

<p>Beside that I would split responsibilities and introduce a method:</p>

<pre><code>public double unload (double kg)
</code></pre>

<h1>Avoid comments</h1>

<p>If you want to make comments it is an indicator for that your code itself may not be clear enough. I intentionally said "avoid comments" but not "do not comment anything". First think about the things that will be compiled and run to be as clear as possible. Then if you think it's neccessary to comment then comment. Comments have to be maintained separately. They are "uncompiled" code and cannot be be put under test. So they may lie if they diverge from your code semantics.</p>

<p>E.g. you have following signature:</p>

<pre><code>public void fillUp (double liter)
</code></pre>

<p>In your comment you mentioned that "liter" may be negative. This is an allowed value but your method signature says "fillUp". So one of them is lying. You now have two possibilities:</p>

<ol>
<li>Think about a name, that abstracts from draining or filling up fuel (adjust?) so it is clear that you may have  a negative argument or ...</li>
<li>... separate the concerns (draining, filling up) into separate methods to match <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">SRP</a>.</li>
</ol>

<p>The best "comment" for a "procedure", "function", "method" is a set of tests that show the usage of it so other developers can see, how your code will work in different situations. Instead of testing your object in a main-scope I suggest to make ...</p>

<h1>Unit Tests</h1>

<p>Following the suggestions you can do expressive unit tests:</p>

<pre><code>public class TestPlane {

    /**
     * A plane's fuel can be filled up.
     */
    @Test
    public void fillUpNormal() {

        Plane plane = new PlaneBuilder().setMaxFuel(2000).setInitialKerosinStorage(1700).build();

        Assert.assertEquals(1800, plane.fillUp(100));

    }

    /**
     * A plane cannot be filled up beyond max fuel.
     */
    @Test
    public void fillUpOverfilled() {

        Plane plane = new PlaneBuilder().setMaxFuel(2000).setInitialKerosinStorage(1700).build();

        try {
            plane.fillUp(400);
            Assert.fail();
        } catch (OverfilledException e) {
            Assert.assertEquals(100, e.getOverfilledBy());
        }


    }

}
</code></pre>

<p>You should decide which coverage you want to aim. I prefer condition coverage over statement coverage because it forces you to keep your methods small. Methods under condtion coverage have at least 2^condition_elements of test cases. If you have long methods with several conditions your test case count may explode.</p>

<p>As you see in the test cases, I have comments. They describe the business rules you want to enforce.</p>
    </div>