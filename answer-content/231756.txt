<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>When declaring variables, move the declaration towards the first usage. Moving declaration away from usage makes it harder to understand how your variables are actually being used.</p>
</li>
<li><p>When declaring variables, prefer <code>final</code> whenever possible. If you know that a value won't change, it's one less thing to keep track of as you're trying to read and understand code. For very short methods, this might not matter (since you can clearly see the whole method and therefore that it's not changed) but for long ones it's almost always better. This <em>doesn't</em> mean you need to declare them in <code>ALL_CAPS</code>. That's only appropriate for actual constants, not values that just happen to not be reassigned.</p>
</li>
<li><p>Use whitespace consistently and liberally around operators and punctuation. Every <code>=</code> should generally be surrounded by space, and every <code>,</code> should be followed by space. Similarly, you should have space inside <code>if (</code> and <code>while (</code>. If possible, use an auto-formatter, which will handle this automatically and save you time.</p>
</li>
<li><p>Identifiers should be clear (avoiding the use of unnecessary abbreviations) but don't need to be as long as the ones you're using. This could be an indication that your functions are doing too much (meaning that they take on many <em>unrelated</em> responsibilities, so it's difficult to describe what they <em>mean</em>).</p>
</li>
</ul>
<p>Apply the first and second points to <code>Minesweeper.play</code>, we get:</p>
<pre class="lang-java prettyprint-override"><code>    public static void play() {
        final Scanner scanner = new Scanner(System.in);
        
        final String GREETING = "Hi, lets play minesweeper!";
        System.out.println(GREETING);
        final Area[][] area = pickLengthsOfArea(SCANNER);
        final int HOWMANYBOMBS = getHowManyBombs(area, scanner);
        System.out.println("hi");
        fillArea(area, HOWMANYBOMBS);

        final boolean isItWin;
        while (true) {
            printPole(area);
            if (playerTurnsAndIsPlayersTurnInBomb(area, scanner)) {
                isItWin = false;
                break;
            }
            if (weHaveNotGotAnyEmptyAreaThatNotCheckedAndWeMarkedOnlyBombs(area)) {
                isItWin = true;
                break;
            }
        }
        if (isItWin) {
            System.out.println("U won!");
        }
        else {
            System.out.println("Defieat!");
        }
    }
</code></pre>
<ul>
<li><p><code>GREETING</code>, <code>area, </code>isItWin<code>should be</code>final<code>. </code>scanner<code>should be lowercase, since it's not a constant (it's just a</code>Scanner<code>that happens to not be reassigned) but</code>GREETING` likely should be all-caps since it's actually a constant.</p>
</li>
<li><p>Variable declarations are moved down when possible (in particular, <code>Area[][] area; area = ...</code> is combined into <code>final Area[][] area = ...</code>)</p>
<p>The <code>while (true)</code> loop to initialize `isItWin is a bit awkward, and is a good candidate for splitting into a new function (which is frequently the case when you find yourself needing to initialize a value inside a loop):</p>
</li>
</ul>
<pre class="lang-java prettyprint-override"><code>    private static playUntilWinOrLoss(Area[][] area, Scanner scanner) {
        while (true) {
            printPole(area);
            if (playerTurnsAndIsPlayersTurnInBomb(area, scanner)) {
                return false;
            }
            if (weHaveNotGotAnyEmptyAreaThatNotCheckedAndWeMarkedOnlyBombs(area)) {
                return true;
            }
        }
    }
</code></pre>
<p>Next we can just to <code>printPole</code> and take a look. We can see that there's some "symmetry" in the code, but it's not being exploited fully:</p>
<pre class="lang-java prettyprint-override"><code>                if(area[y][x].getStatusOfArea()==StatusOfArea.CLOSED) {
                    System.out.print("?");
                }
                else if(area[y][x].getStatusOfArea()==StatusOfArea.OPENED) {
                    System.out.print(area[y][x].getValueOfArea().getIcon());
                }
                else if(area[y][x].getStatusOfArea()==StatusOfArea.MARKEDASBOMB) {
                    System.out.print("*");
                }
</code></pre>
<p>all three lines are of the form <code>System.out.print( ... )</code>, and they all inspect <code>area[y][x]</code> This suggests that the responsibility of identifying the appearance of the area should belong to the <code>Area</code> itself:</p>
<pre class="lang-java prettyprint-override"><code>class Area {
    private final ValueOfArea value;
    private StatusOfArea status = StatusOfArea.CLOSED;

    Area(ValueOfArea value){
        this.value = value;
    }
    ValueOfArea getValue() {
        return value;
    }
    StatusOfArea getStatus() {
        return status;
    }
    void setStatus(StatusOfArea status) {
        this.status = status;
    }
    String getAppearance() {
        if (status == StatusOfArea.CLOSED) {
            return "?";
        }
        if (status == StatusOfArea.MARKEDASBOMB) {
            return "*";
        }
        return value.getIcon();
    }
}
</code></pre>
<p>Here we can make several improvements. First, adding <code>_OfArea</code> to the end of each name doesn't make anything clearer - they are all members of the <code>Area</code> class, so we already know that they belong to the <code>Area</code>. Making these names shorter allows us to scan faster without worrying about problems.</p>
<p>The <code>status</code> member variable can be initialized in one line as <code>private StatusOfArea status = StatusOfArea.CLOSED;</code></p>
<p>The new <code>getAppearance()</code> method can be used by <code>printPole</code>:</p>
<pre class="lang-java prettyprint-override"><code>    private static void printPole(Area[][] area) {
        System.out.println();
        for (int y = 0; y &lt; area.length; y++) {
            for (int x = 0; x &lt; area[0].length; x++) {
                System.out.print(area[y][x].getAppearance());
            }
            System.out.println();
        }
    }
</code></pre>
<p>Next, we can examine <code>playerTurnsAndIsPlayersTurnInBomb</code>.</p>
<ul>
<li><p>Instead of using a chain of <code>else</code>s, we can instead use <code>continue</code> to retry the loop.</p>
</li>
<li><p><code>parseInt</code> gets called 6 times when you only really need it twice: once for <code>x</code> and once for <code>y</code> (this is not about "efficiency"; it's about clarity: we're doing the same work over and over, so we could accidentally introduce an inconsistency between the call sites if any logic needed to be changed)</p>
</li>
<li><p>The name doesn't accurately describe what the function does. <code>makeMove</code> accurately described what it actually does; since the return value is vague we can make an enum for <code>HIT</code> or <code>NOHIT</code>:</p>
</li>
</ul>
<p>The result is that we can remove entirely the function <code>isXandYIn</code>, and obtain the now-clearer:</p>
<pre class="lang-java prettyprint-override"><code>    enum MoveHitsBomb {
        HIT, NOHIT
    }

    private static MoveHitsBomb makeMove(Area[][] area, Scanner scanner) {
        while(true) {
            System.out.println("Print \"open x y\", if u want open this area, print \"mark x y\", if u want mark this area as bomb or unmark this area");
            String[] commandAndXAndY = scanner.nextLine().split(" ");
            if (commandAndXAndY.length != 3) {
                System.out.println("fill out the form correctly!");
                continue;
            }

            final String action = commandAndXAndY[0];
            if (!action.equals("open") &amp;&amp; !action.equal("mark")) {
                System.out.println("first work should be equal \"open\" or \"mark\"!");
                continue;
            }

            final int x;
            try {
                x = Integer.parseInt(commandAndXAndY[1]);
            } catch (NumberFormatException | NullPointerException nfe) {
                System.out.println("x should be a number!");
                continue;
            }

            final int y;
            try {
                y = Integer.parseInt(commandAndXAndY[2]);
            } catch (NumberFormatException | NullPointerException nfe) {
                System.out.println("y should be a number!");
                continue;
            }

            if (y &lt; 0 || area.length &lt;= y) {
                System.out.println("y should be between 0 and " + area.length-1);
                continue;
            }
            if (x &lt; 0 || area[0].length &lt;= x) {
                System.out.println("x should be between 0 and " + area[0].length-1);
                continue;
            }
        
            
            if (action.equals("open")) {
                if (area[y][x].getValue() == ValueOfArea.BOMB) {
                    return MoveHitsBomb.HIT;
                }
                
                area[y][x].setStatus(StatusOfArea.OPENED);
                if (area[y][x].getValue() == ValueOfArea.NOONEBOMBAROUND) {
                    openAllAround(x, y, area, new ArrayList&lt;&gt;());
                }
                return MoveHitsBomb.NOHIT;
            }
            else { // mark
                area[y][x].setStatusOfArea(StatusOfArea.MARKEDASBOMB);
                return MoveHitsBomb.NOHIT;
            }
        }
</code></pre>
<p>Next we might as well look at <code>weHaveNotGotAnyEmptyAreaThatNotCheckedAndWeMarkedOnlyBombs</code>. This function's name is describing what it <em>does</em> (which we can figure out by reading its code) but not what it <em>means</em> (which tells callers how to use it). <code>isWinningBoard</code> seems like a much more accurate name</p>
<ul>
<li><code>cell.getValueOfArea() != ValueOfArea.BOMB /* is not a bomb */</code> is not a useful comment, since it's repeating what the code does. We can simplify to:</li>
</ul>
<pre class="lang-java prettyprint-override"><code>    private static boolean isWinningBoard(Area[][] area) {
        for (int y = 0; y &lt; area.length; y++) {
            for (int x = 0; x &lt; area[0].length; x++) {
                Area cell = area[y][x];
                if (cell.getValue() != ValueOfArea.BOMB &amp;&amp; cell.getStatus() != StatusOfArea.OPENED) {
                    return false;
                }
            }
        }
        return true;
    }
</code></pre>
<p>It's less obvious where to go next to make minor cleanups, so I'm instead going to tackle <code>AreaWithXandY</code>: it probably shouldn't exist. It's clear why you're using it, but you just really don't actually want it to exist.</p>
<p>The main problem is your <code>Area[][]</code> array that you pass around everywhere. It's certainly useful, but it's not really pulling its weight. We can make a <code>Board</code> class that encapsulates the relevant information. This ends up having wide-reaching consequences for your program as a whole.</p>
<p>We don't actually need <code>Area</code> or <code>AreaWithXandY</code>. Once we have a <code>Board</code> class, we realize that we only really need <code>StatusOfArea</code> and <code>ValueOfArea</code>. We should <em>also</em> realize that we don't need any numbers in <code>ValueOfArea</code>; we just need <code>EMPTY</code> or <code>BOMB</code>. That's because the number that shows up is entirely presentational, and can be figured out by looking at the neighbors (from <code>Board</code>) rather than storing any additional info in the cell.</p>
<p>First, we need a position class:</p>
<pre class="lang-java prettyprint-override"><code>
final class Pos {
    public final int x;
    public final int y;
    Pos(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
</code></pre>
<p>(if this was being used for something larger, I'd add an <code>equals</code> and <code>hashCode</code> implementation, but we don't need either for this small program). Note that we know the representation is definitely not changing (if it did, we'd have to rewrite a lot of stuff anyway) so it's fine to just make <code>x</code> and <code>y</code> into <code>public final</code> fields and skip the getters/setters.</p>
<p>We have the new enums</p>
<pre class="lang-java prettyprint-override"><code>enum StatusOfArea {
    MARKEDASBOMB, OPENED, CLOSED
}
enum ValueOfArea {
    EMPTY, BOMB
}
</code></pre>
<p>and the <code>Board</code>:</p>
<pre class="lang-java prettyprint-override"><code>class Board {
    private final ValueOfArea[][] values;
    private final StatusOfArea[][] statuses;

    public final int width;
    public final int height;

    Board(ValueOfArea[][] values) {
        this.values = values;
        this.height = values.length;
        this.width = values[0].length;
        this.statuses = new StatusOfArea[height][width];
        for (StatusOfArea[] row : statuses) {
            Arrays.fill(row, StatusOfArea.CLOSED);
        }
    }
    public String appearanceAt(Pos p) {
        if (statuses[p.y][p.x] == StatusOfArea.CLOSED) {
            return "?";
        }
        if (statuses[p.y][p.x] == StatusOfArea.MARKEDASBOMB) {
            return "*";
        }
        int count = countMineNeighbors(p);
        if (count == 0) {
            return "-";
        }
        return "" + count;
    }
    public boolean inBounds(Pos p) {
        return p.x &gt;= 0 &amp;&amp; p.x &lt; width &amp;&amp; p.y &gt;= 0 &amp;&amp; p.y &lt; height;
    }
    public int countMineNeighbors(Pos p) {
        int count = 0;
        for (int dx = -1; dx &lt;= 1; dx++) {
            for (int dy = -1; dy &lt;= 1; dy++) {
                Pos neighbor = new Pos(p.x + dx, p.y + dy);
                if (this.inBounds(neighbor) &amp;&amp; this.isBombAt(neighbor)) {
                    count++;
                }
            }
        }
        return count;
    }
    public boolean isBombAt(Pos p) {
        return this.values[p.y][p.x] == ValueOfArea.BOMB;
    }
    public boolean isOpenAt(Pos p) {
        return this.statuses[p.y][p.x] == StatusOfArea.OPENED;
    }

    public void markAsBombAt(Pos p) {
        this.statuses[p.y][p.x] = StatusOfArea.MARKEDASBOMB;
    }
    public void open(Pos p) {
        if (this.statuses[p.y][p.x] == StatusOfArea.OPENED) {
            return;
        }
        this.statuses[p.y][p.x] = StatusOfArea.OPENED;

        if (this.countMineNeighbors(p) == 0) {
            for (int dx = -1; dx &lt;= 1; dx++) {
                for (int dy = -1; dy &lt;= 1; dy++) {
                    Pos neighbor = new Pos(p.x + dx, p.y + dy);
                    if (this.inBounds(neighbor)) {
                        this.open(neighbor);
                    }
                }
            }
        }
    }
}
</code></pre>
<p>The <code>Board</code> constructor asks for the values to fill the grid with, and then it does the rest. In particular, it creates the <code>statuses</code> array and fills it with <code>StatusOfArea.CLOSED</code>.</p>
<p>Counting neighbors is important for the <code>getAppearance()</code> method, so that's provided as a convenience. It's also used inside the <code>open()</code> method, which is responsible for opening cells up <em>and</em> for performing the flood-fill (look how much shorter it is, now that it's in the right place, and our data reflects our usage!)</p>
<p>Everything else needs to be adjusted slightly (mostly to use <code>Board</code> methods instead of directly reading <code>Area</code>, which no longer exists) and to clean up the creation of the board.</p>
<p>The only one I really want to draw your attention to is <code>fillAreaWithBombs</code>, which uses an entirely different approach. In particular, it makes a list of locations and then shuffles them, filling the first <code>howManyBombs</code> items. This is much, much faster for large grids, because <code>remove</code> is linear (e.g. for a grid with 1,000,000 cells, this will be roughly 1,000,000 times faster).</p>
<pre class="lang-java prettyprint-override"><code>    private static ValueOfArea[][] fillAreaWithBombs(int width, int height, int howManyBombs) {
        ValueOfArea[][] area = new ValueOfArea[width][height];
        ArrayList&lt;Pos&gt; listOfAllPositions = new ArrayList&lt;&gt;();
        for (int y = 0; y &lt; area.length; y++) {
            for (int x = 0; x &lt; area.length; x++) {
                area[y][x] = ValueOfArea.EMPTY;
                listOfAllPositions.add(new Pos(x, y));
            }
        }
        Collections.shuffle(listOfAllPositions);

        for (int i = 0; i &lt; listOfAllPositions.size() &amp;&amp; i &lt; howManyBombs; i++) {
            area[listOfAllPositions.get(i).y][listOfAllPositions.get(i).x] = ValueOfArea.BOMB;
        }

        return area;
    }
</code></pre>
<p>Here's the whole program:</p>
<pre class="lang-java prettyprint-override"><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

import java.util.Scanner;

public class Minesweeper {
    public static void main(String[] args) {
        final Scanner scanner = new Scanner(System.in);
        
        final String GREETING = "Hi, lets play minesweeper!";
        System.out.println(GREETING);
        
        Pos corner = chooseSize(scanner);
        final int HOWMANYBOMBS = getHowManyBombs(corner.x, corner.y, scanner);
        
        final ValueOfArea[][] rawValues = fillAreaWithBombs(corner.x, corner.y, HOWMANYBOMBS);

        final boolean isItWin = playUntilWinOrLoss(new Board(rawValues), scanner);
        if (isItWin) {
            System.out.println("U won!");
        }
        else {
            System.out.println("Defieat!");
        }
    }

    private static boolean playUntilWinOrLoss(Board area, Scanner scanner) {
        while (true) {
            printPole(area);
            if (makeMove(area, scanner) == MoveHitsBomb.HIT) {
                return false;
            }
            if (isWinningBoard(area)) {
                return true;
            }
        }
    }

    private static boolean isWinningBoard(Board board) {
        for (int y = 0; y &lt; board.height; y++) {
            for (int x = 0; x &lt; board.width; x++) {
                if (!board.isBombAt(new Pos(x, y)) &amp;&amp; !board.isOpenAt(new Pos(x, y))) {
                    return false;
                }
            }
        }
        return true;
    }


    enum MoveHitsBomb {
        HIT, NOHIT
    }

    private static MoveHitsBomb makeMove(Board area, Scanner scanner) {
        while(true) {
            System.out.println("Print \"open x y\", if u want open this area, print \"mark x y\", if u want mark this area as bomb or unmark this area");
            String[] commandAndXAndY = scanner.nextLine().split(" ");
            if (commandAndXAndY.length != 3) {
                System.out.println("fill out the form correctly!");
                continue;
            }

            final String action = commandAndXAndY[0];
            if (!action.equals("open") &amp;&amp; !action.equals("mark")) {
                System.out.println("first work should be equal \"open\" or \"mark\"!");
                continue;
            }

            final int x;
            try {
                x = Integer.parseInt(commandAndXAndY[1]);
            } catch (NumberFormatException | NullPointerException nfe) {
                System.out.println("x should be a number!");
                continue;
            }

            final int y;
            try {
                y = Integer.parseInt(commandAndXAndY[2]);
            } catch (NumberFormatException | NullPointerException nfe) {
                System.out.println("y should be a number!");
                continue;
            }

            if (y &lt; 0 || area.height &lt;= y) {
                System.out.println("y should be between 0 and " + (area.height-1));
                continue;
            }
            if (x &lt; 0 || area.width &lt;= x) {
                System.out.println("x should be between 0 and " + (area.width-1));
                continue;
            }
        
            
            if (action.equals("open")) {
                if (area.isBombAt(new Pos(x, y))) {
                    return MoveHitsBomb.HIT;
                }
                
                area.open(new Pos(x, y));
                return MoveHitsBomb.NOHIT;
            }
            else { // mark
                area.markAsBombAt(new Pos(x, y));
                return MoveHitsBomb.NOHIT;
            }
        }
    }

    private static void printPole(Board area) {
        System.out.println();
        for (int y = 0; y &lt; area.height; y++) {
            for (int x = 0; x &lt; area.width; x++) {
                System.out.print(area.appearanceAt(new Pos(x, y)));
            }
            System.out.println();
        }
    }

    private static ValueOfArea[][] fillAreaWithBombs(int width, int height, int howManyBombs) {
        ValueOfArea[][] area = new ValueOfArea[width][height];
        ArrayList&lt;Pos&gt; listOfAllPositions = new ArrayList&lt;&gt;();
        for (int y = 0; y &lt; area.length; y++) {
            for (int x = 0; x &lt; area.length; x++) {
                area[y][x] = ValueOfArea.EMPTY;
                listOfAllPositions.add(new Pos(x, y));
            }
        }
        Collections.shuffle(listOfAllPositions);

        for (int i = 0; i &lt; listOfAllPositions.size() &amp;&amp; i &lt; howManyBombs; i++) {
            area[listOfAllPositions.get(i).y][listOfAllPositions.get(i).x] = ValueOfArea.BOMB;
        }

        return area;
    }
    private static int getHowManyBombs(int width, int height, Scanner scanner) {
        while(true) {
            System.out.println("print number of bombs: ");
            String howManyBombsString = scanner.nextLine();
            if(!isNumeric(howManyBombsString)) {
                System.out.println("it should be number!");
            }
            else if(false==(0&lt;Integer.parseInt(howManyBombsString) &amp;&amp; Integer.parseInt(howManyBombsString) &lt; width * height)) {
                System.out.println("it should be positive and it should not exceed the field capacity!");
            }
            else {
                return Integer.parseInt(howManyBombsString);
            }
        }
    }

    private static Pos chooseSize(Scanner scanner) {
        while (true) {
            System.out.println("Pick x.length and y.length of area(print \"x y\"): ");
            final String[] turnXandY = scanner.nextLine().split(" "); 
            if (turnXandY.length != 2) {
                System.out.println("print: \"x y\"!");
                continue;
            }
            if (!isNumeric(turnXandY[0]) || !isNumeric(turnXandY[1])) {
                System.out.println("x and y should be numbers!");
                continue;
            }
            if (Integer.parseInt(turnXandY[0]) &lt;= 0 || Integer.parseInt(turnXandY[1]) &lt;= 0) {
                System.out.println("x and y should be &gt;0!");
                continue;
            }
            return new Pos(Integer.parseInt(turnXandY[0]), Integer.parseInt(turnXandY[1]));
        }
    }

    public static boolean isNumeric(String strNum) {
        try {
            Integer.parseInt(strNum);
        } catch (NumberFormatException | NullPointerException nfe) {
            return false;
        }
        return true;
    }
}

final class Pos {
    public final int x;
    public final int y;
    Pos(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

enum StatusOfArea {
    MARKEDASBOMB, OPENED, CLOSED
}
enum ValueOfArea {
    EMPTY, BOMB
}

class Board {
    private final ValueOfArea[][] values;
    private final StatusOfArea[][] statuses;

    public final int width;
    public final int height;

    Board(ValueOfArea[][] values) {
        this.values = values;
        this.height = values.length;
        this.width = values[0].length;
        this.statuses = new StatusOfArea[height][width];
        for (StatusOfArea[] row : statuses) {
            Arrays.fill(row, StatusOfArea.CLOSED);
        }
    }
    public String appearanceAt(Pos p) {
        if (statuses[p.y][p.x] == StatusOfArea.CLOSED) {
            return "?";
        }
        if (statuses[p.y][p.x] == StatusOfArea.MARKEDASBOMB) {
            return "*";
        }
        int count = countMineNeighbors(p);
        if (count == 0) {
            return "-";
        }
        return "" + count;
    }
    public boolean inBounds(Pos p) {
        return p.x &gt;= 0 &amp;&amp; p.x &lt; width &amp;&amp; p.y &gt;= 0 &amp;&amp; p.y &lt; height;
    }
    public int countMineNeighbors(Pos p) {
        int count = 0;
        for (int dx = -1; dx &lt;= 1; dx++) {
            for (int dy = -1; dy &lt;= 1; dy++) {
                Pos neighbor = new Pos(p.x + dx, p.y + dy);
                if (this.inBounds(neighbor) &amp;&amp; this.isBombAt(neighbor)) {
                    count++;
                }
            }
        }
        return count;
    }
    public boolean isBombAt(Pos p) {
        return this.values[p.y][p.x] == ValueOfArea.BOMB;
    }
    public boolean isOpenAt(Pos p) {
        return this.statuses[p.y][p.x] == StatusOfArea.OPENED;
    }

    public void markAsBombAt(Pos p) {
        this.statuses[p.y][p.x] = StatusOfArea.MARKEDASBOMB;
    }
    public void open(Pos p) {
        if (this.statuses[p.y][p.x] == StatusOfArea.OPENED) {
            return;
        }
        this.statuses[p.y][p.x] = StatusOfArea.OPENED;

        if (this.countMineNeighbors(p) == 0) {
            for (int dx = -1; dx &lt;= 1; dx++) {
                for (int dy = -1; dy &lt;= 1; dy++) {
                    Pos neighbor = new Pos(p.x + dx, p.y + dy);
                    if (this.inBounds(neighbor)) {
                        this.open(neighbor);
                    }
                }
            }
        }
    }
}
<span class="math-container">```</span>
</code></pre>
    </div>