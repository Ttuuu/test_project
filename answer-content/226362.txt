<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The variable <code>ex</code> is not used anywhere else, so it can be in-lined.</p>

<pre><code>string strLogText = FormatException(context.Exception);
</code></pre>

<p>The multiple calls to <code>DateTime.Now</code> will give different time stamps.</p>

<p>Hold on to the timestamp in one variable early in the function and reuse that.</p>

<p>It was already assigned here</p>

<pre><code> var timeUtc = DateTime.Now;
</code></pre>

<p>so use that </p>

<pre><code>//...

ApiError apiError = new ApiError()
{
    Message = strLogText,
    RequestUri = requestedURi,
    RequestMethod = requestMethod,
    TimeUtc = timeUtc
};

//...
</code></pre>

<p>Given the variable name, the assumption is that the timestamp was meant to be UTC, which would mean that it should be using <a href="https://docs.microsoft.com/en-us/dotnet/api/system.datetime.utcnow?view=netframework-4.8" rel="nofollow noreferrer"><code>DateTime.UtcNow</code></a></p>

<p>The SQL error logging <em>(though commented out)</em> can be encapsulated into its own function/concern</p>

<pre><code>private void LogSQL(string message, HttpRequestMessage request, DateTime timestamp) {
    var requestedURi = (string)request.RequestUri.AbsoluteUri;
    var requestMethod = request.Method.ToString();
    SqlErrorLogging sqlErrorLogging = new SqlErrorLogging();
    ApiError apiError = new ApiError() {
        Message = message,
        RequestUri = requestedURi,
        RequestMethod = requestMethod,
        TimeUtc = timestamp
    };
    //sqlErrorLogging.InsertErrorLog(apiError);
}
</code></pre>

<p>This can be abstracted out into its own service/concern if so desired</p>

<p>The above and a few minor changes results in a refactoring of</p>

<pre><code>public class UnhandledExceptionLogger : ExceptionLogger {
    private static readonly Logger logger = LogManager.GetCurrentClassLogger();

    public override void Log(ExceptionLoggerContext context) {
        DateTime timestamp = DateTime.UtcNow;
        string strLogText = FormatException(context.Exception);            
        //SQL
        SqlLog(strLogText, context.Request, timestamp);
        //NLOG
        NLog(logger, strLogText, timestamp);
    }

    private void NLog(Logger logger, string message, DateTime timestamp) {
        var sb = new StringBuilder();
        sb.AppendLine(message);
        sb.AppendLine(timestamp);
        logger.Error(sb.ToString());
    }

    private void SqlLog(string message, HttpRequestMessage request, DateTime timestamp) {
        var requestedURi = (string)request.RequestUri.AbsoluteUri;
        var requestMethod = request.Method.ToString();
        SqlErrorLogging sqlErrorLogging = new SqlErrorLogging();
        ApiError apiError = new ApiError() {
            Message = message,
            RequestUri = requestedURi,
            RequestMethod = requestMethod,
            TimeUtc = timestamp
        };
        //sqlErrorLogging.InsertErrorLog(apiError);
    }

    private string FormatException(Exception ex, int depth = 0) {
        //... omitted for brevity
    }
}
</code></pre>
    </div>