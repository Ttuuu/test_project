<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your code you often use the expressions <code>len(m)</code> and <code>len(m[0])</code>. The code would become clearer if you defined proper names for these expressions, like:</p>

<pre><code>func (m Matrix) Rows() int { return len(m) }
func (m Matrix) Cols() int { return len(m[0]) }
</code></pre>

<p>This way, you can write <code>zeros := matrix.Zeros(m.Rows(), m.Cols())</code>, which make the code operate in mathematical terms instead of those of the implementing programming language. These additional methods won't affect the performance of your program since the compiler will generate equally efficient code for these method calls. You can verify this by looking at the generated assembly code using <code>go tool objdump</code>. And if there should really be a difference, file a bug report at <a href="https://github.com/golang/go/issues" rel="nofollow noreferrer">https://github.com/golang/go/issues</a>.</p>

<p>To see whether you defined a good API for your matrix package, you should write a corresponding unit test:</p>

<pre><code>package matrix_test

import "testing"

func TestZeros(t *testing.T) {
    m := matrix.Zeros(3, 3)
    ...
}
</code></pre>

<p>Note that I wrote <code>package matrix_test</code> instead of the usual <code>package matrix</code>. This little change (which is also little-known) makes this test file a black-box test, which can only access the exported things from the <code>matrix</code> package.</p>

<p>At this point I thought that there were no way to access an individual element of the matrix. Therefore you should add another method:</p>

<pre><code>func (m Matrix) At(row, col int) float64 { return m[row][col] }
</code></pre>

<p>Maybe it is possible to access the matrix elements using the <code>[]</code> operator, but I would not recommend this since you might want to implement the matrix later in a different way. Maybe you will mainly handle sparse matrices, where most of the elements are zero. Then you would need to change the implementation type to be more memory-efficient, and that change should not affect any code that already uses your package.</p>

<p>Another benefit of the <code>At</code> method is that it clearly defines that the ordering of the coordinates is <code>row, col</code>. I don't know whether mathematicians are always consistent about this little detail, so it's better to explicitly document it somewhere. Programmers definitely aren't consistent in this regard, not even after 60 years of confusion. There's <code>(x, y)</code>, <code>(top, left)</code>, <code>(left, top)</code>, <code>(height, width)</code>, <code>(row, col)</code>, <code>(col, row)</code>, and so on.</p>
    </div>