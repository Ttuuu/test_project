<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static IDictionary&lt;string, Dictionary&lt;object, HashSet&lt;T&gt;&gt;&gt; MultiGroupBy&lt;T&gt;(this IEnumerable&lt;T&gt; source, params (string Label, Func&lt;T, object&gt; Getter)[] groupers)
</code></pre>
</blockquote>

<p>I don't understand the mixture of interfaces (<code>IDictionary</code>) and implementations (<code>Dictionary</code>, <code>HashSet</code>), nor the mixture of generics (<code>&lt;T&gt;</code>) and non-generics (<code>object</code>). Why is it not</p>

<pre><code>public static IDictionary&lt;string, IDictionary&lt;K, ISet&lt;T&gt;&gt;&gt; MultiGroupBy&lt;T, K&gt;(this IEnumerable&lt;T&gt; source, params (string Label, Func&lt;T, K&gt; Getter)[] groupers)
</code></pre>

<p>?</p>

<hr>

<blockquote>
<pre><code>  IDictionary&lt;string, Dictionary&lt;object, HashSet&lt;T&gt;&gt;&gt; results = new Dictionary&lt;string, Dictionary&lt;object, HashSet&lt;T&gt;&gt;&gt;();

  using (var enumer = source.GetEnumerator())
  {
    while (enumer.MoveNext())
    {
      foreach ((var label, var func) in groupers)
      {
        if (!results.TryGetValue(label, out var dict))
        {
          dict = new Dictionary&lt;object, HashSet&lt;T&gt;&gt;();
          results[label] = dict;
        }

        ...
</code></pre>
</blockquote>

<p>I'm not quite sure why you want to return an empty dictionary if the source is empty. As a caller of your library, I'd probably rather get a dictionary mapping the grouper names to empty dictionaries.</p>

<p>That also simplifies the initialisation:</p>

<pre><code>  var results = groupers.ToDictionary(grouper =&gt; grouper.Item1, _ =&gt; new Dictionary&lt;object, HashSet&lt;T&gt;&gt;());
</code></pre>

<hr>

<blockquote>
<pre><code>  using (var enumer = source.GetEnumerator())
  {
    while (enumer.MoveNext())
    {
       ...
    }

  }
</code></pre>
</blockquote>

<p>KISS. <code>foreach</code> is much kinder on the maintenance programmer, who doesn't have to check for correct usage patterns of the unsugared API. Using <code>MoveNext() / Current</code> for speed is the epitome of premature optimisation unless benchmarking shows that it's a bottleneck, in which case there should be a comment explaining the bottleneck to justify the more complex code.</p>

<p>Moreover, if this is a bottleneck then it seems likely that the dictionary lookups in <code>results</code> for every single element in the source will be slower than the overhead of <code>foreach</code>, so you could start by replacing <code>results</code> with a <code>List&lt;(string Label, Func&lt;T, K&gt; Getter, IDictionary&lt;K, ISet&lt;T&gt;&gt; Groups)&gt;</code> and just convert it to a dictionary after the loop.</p>

<hr>

<blockquote>
<pre><code>      foreach ((var label, var func) in groupers)
</code></pre>
</blockquote>

<p><code>var (label, func)</code> saves the repetition.</p>

<hr>

<p>After my proposed refactors and some minor tidying of whitespace, I get</p>

<pre><code>public static IDictionary&lt;string, IDictionary&lt;K, ISet&lt;T&gt;&gt;&gt; MultiGroupBy&lt;T, K&gt;(this IEnumerable&lt;T&gt; source, params (string Label, Func&lt;T, K&gt; Getter)[] groupers)
{
  if (source == null) throw new ArgumentNullException(nameof(source));
  if (groupers == null) throw new ArgumentNullException(nameof(groupers));

  var results = groupers.ToDictionary(grouper =&gt; grouper.Item1, _ =&gt; (IDictionary&lt;K, ISet&lt;T&gt;&gt;)new Dictionary&lt;K, ISet&lt;T&gt;&gt;());

  foreach (var elt in source)
  {
    foreach (var (label, func) in groupers)
    {
      var dict = results[label];
      var key = func(elt);
      if (!dict.TryGetValue(key, out var set))
      {
        set = new HashSet&lt;T&gt;();
        dict[key] = set;
      }

      set.Add(elt);
    }
  }

  return results;
}
</code></pre>
    </div>