<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not really sure if this question is correctly tagged, as what you wrote seems a lot like plain C-Code. If you really need static storage, you can always just fall back to <code>std::array</code>, which is more or less a wrapper around a plain C-style array.</p>

<p>So you should be able to replace <code>int[256][256]</code> by <code>std::array&lt;std::array&lt;int, 256&gt;, 256&gt;</code>. Note that in most times it is beneficial to have one array and use indexing to access the individual elements, but that is for another day.</p>

<p>Note that <code>std::array</code> does not feature a constructor, so you would still have to manually fill it.</p>

<p>Since recently you can declare variables as <code>constexpr</code>, which is a good replacement for your local variable <code>m</code>.</p>

<p>Now regarding the actual code:</p>

<ol>
<li><p>You should not use <code>using namespace std;</code> This is bad practice that will pollute the entire namespace needlessly. It is quite beneficial to get into the habit of writing <code>std::</code> whenever necessary.</p></li>
<li><p>Your original loops in main all run the same length so justfill the elements once and dont interate so often</p></li>
<li><p>Regarding the respective functions you should be able to utilize quite a bit of functionality from the <code>algorithm</code> library.</p></li>
</ol>

<p>First lets have a look at Naive_Multiply:</p>

<pre><code>void Naive_Multiply(int a[][256], int b[][256], int c[][256], int n)
{
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            c[i][j] = 0;
            for (int t = 0; t &lt; n; t++) {
                c[i][j] = c[i][j] + a[i][t] * b[t][j];
            }
        }
    }
}
</code></pre>

<p>Here you can use <code>std::inner_product</code></p>

<pre><code>constexpr int rowSize = 256;
using row = std::array&lt;int, m&gt;;
using mat = std::array&lt;row , m&gt;

mat Naive_Multiply(const mat&amp; a, const mat&amp; b)
{
    mat c;
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            auto multiplyRowElement = [j](const int a, const row&amp; b) {
                return a * b[j];
            };
            c[i][j] = std::inner_product(a[i].begin(), a[i].end(), 
                                         b.begin(), b.end(), 0, 
                                         std::plus&lt;int&gt;, multiplyRowElement);
        }
    }
    return c;
}
</code></pre>

<p>Note that we also directly return the result of the operation rather than passing it as an inout parameter to the function, which is much cleaner. </p>

<p>It seems your otehr functions create access violations if any of the additional parameters is not equal to 0. In that case you iterate over the border of the array.</p>
    </div>