<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another way to handle <code>null</code> is to return the default value also in this case. It could be not acceptable in some scenarios, but I think usually it is normal expectation when you call the method <strong><code>GetValueOrDefault</code></strong>. The <strong><em>Default</em></strong> word here means you like to get the default value if the item does not exist not throwing an exception which again requires to handle it in the code and decrease the usability of this helper extension.</p>

<p>For example, in a web app if you want to show some values in a text input or span(label), it isn't important whether <code>dic</code> is itself null or it doesn't contain the key. So, in this case the extension can be written as following:</p>

<pre><code>public static class DictionaryExtensions
{
    /// &lt;summary&gt; Gets the value of specified key. Simply returns the default value if dic or key are null or specified key does not exists.&lt;/summary&gt;
    public static TValue GetValueOrDefault&lt;TKey, TValue&gt;(this IDictionary&lt;TKey, TValue&gt; dic, TKey key, TValue defaultValue = default(TValue))
    {
        return (dic != null &amp;&amp; key != null &amp;&amp; dic.TryGetValue(key, out TValue value)) ? value : defaultValue;
    }
}
</code></pre>
    </div>