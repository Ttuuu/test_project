<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The intention of classes in object oriented programming is not to replace <code>if</code> sentences, but to model code that differs in behavior. Your 4 classes can be merged into 2, since the first 3 of them use structurally identical code. The code could then be:</p>

<pre><code>var rules = new List&lt;IRule&gt;
{
    new ModWordRule(3, "Fizz"),
    new ModWordRule(5, "Buzz"),
    new ModWordRule(7, "Bazz")
};
</code></pre>

<hr>

<p>On second sight, your code completely misses the point of the task. The task says:</p>

<blockquote>
  <p>Write a short program.</p>
</blockquote>

<p>Your program has 74 lines, and I'm not even counting the <code>using</code> declarations that you omitted at the top of the file. You should not omit these when you post your code for code review.</p>

<p>I just wrote the same program in 20 lines, without all the "object oriented" boilerplate. It is easier readable, and equally easy to extend to more rules.</p>

<p>I don't see any point in adding so many interfaces and classes if the problem can be solved in a few lines of code, especially if the simple code is easily testable.</p>

<p>The argument of "don't modify the existing classes when adding features" is moot here since adding a "7 Bazz" rule obviously has to modify the output, and that output has to be assembled by some class. In the FizzBuzz example the code is still simple enough to go into a single function instead of spreading it over 4 classes.</p>

<p>The task does not mention the <code>ReadKey</code> anywhere, therefore you should omit it.</p>

<p>The task says to output "7" for the number 7, your program outputs "Bazz". This latter word is mentioned nowhere in the task.</p>

<p>When dealing with collections of things, it is a common assumption that these collections are never <code>null</code>. Therefore there's no need to check for that condition in the <code>FizzBuzzGame</code> constructor. Just let the program crash in such a case. It's a serious programming mistake, and it must be fixed. Your current code only <em>hides</em> the bug.</p>

<p>As I said above, I prefer code that is to the point, while still testable. Such as the following:</p>

<pre><code>using System;

namespace FizzBuzz231713
{
    class Program
    {
        static object FizzBuzz(int n)
        {
            var fizz = n % 3 == 0 ? "Fizz" : "";
            var buzz = n % 5 == 0 ? "Buzz" : "";
            var word = fizz + buzz;
            return word != "" ? word : (object)n;
        }

        static void Main()
        {
            for (int i = 0; i &lt; 100; i++)
                Console.WriteLine(FizzBuzz(i + 1));
        }
    }
}
</code></pre>
    </div>