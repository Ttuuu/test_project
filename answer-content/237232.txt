<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't have methods like <code>OpenConnection()</code> and <code>CloseConnection()</code>. Instead, use a <code>using</code> block:</p>

<pre><code>using(var conn = new MySqlConnection(connString))
{
   // db stuff
}
</code></pre>

<p>Same for <code>MySqlDataAdapter</code> and <code>DataSet</code>: both implement <code>IDisposable</code> and thus should be handled properly. Instead of writing lots of code to do this yourself, use the built-in <code>using</code>.</p>

<pre><code>using(var conn = new MySqlConnection(connString))
{
   using(var mySqlDataAdapter= new MySqlDataAdapter("select * from user", connection))
   {
      using(var dataSet = new DataSet())
      {
          // custom code
      }
   }
}
</code></pre>

<p>Do not store your <code>MySqlConnection</code> at class level!</p>

<hr>

<p>Why do you have almost identical <code>Form3_Load</code> and <code>RefreshGrid</code> methods? Do not copy-paste code, instead move it to a method and call that.</p>

<hr>

<p>Store <code>ConfigurationManager.ConnectionStrings["Final_Version.Properties.Settings.technicalConnectionString"].ConnectionString</code> in a dedicated class. If you ever need to change this parameter name, you need to change it in three places in this short class alone and that is just asking for problems. </p>

<p>I usually have a class called <code>AppConfiguration</code> which then contains things like:</p>

<pre><code>    public static string ConnectionString()
    {
        return ConfigurationManager.ConnectionStrings["connection_string_name"].ConnectionString;
    }
</code></pre>

<hr>

<p>You're using WinForms which I'd consider "ancient" technology, and thus you'll likely encounter old and outdated example code. I'd urge you to look at more modern practices and consider better ways to get the same result. </p>

<p>Case in point is the binding of a <code>DataSet</code> to a <code>Grid</code>: this is fairly easy, but once you need to add custom properties etc. you'll likely end up with hacky code. Instead consider moving all of your DB logic to a service class and <a href="https://dapper-tutorial.net/" rel="nofollow noreferrer">using Dapper</a> to return a list of data objects with properly named properties. that way you also separate your UI from your business logic.</p>

<p>Also, you seem very concerned about exceptions thrown by opening or closing your db connection. IMHO it is pointless to anticipate such exceptions and capture them unless you are connecting to a very volatile database environment -- and then you should solve that problem instead of anticipating it.</p>
    </div>