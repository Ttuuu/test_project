<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For efficiency reasons, you should always do <code>x1**2 + y1**2 &lt; r**2</code> rather than <code>sqrt(x1**2 + y1**2) &lt; r</code>, because <code>sqrt</code> is much much slower than <code>pow</code>. Because <a href="https://en.wikibooks.org/wiki/Algorithms/Distance_approximations#You_don%27t_need_a_square_root_to_compare_distances" rel="nofollow noreferrer">You don't need a square root to compare distances</a>. This is the special case of <code>x1**2 + y1**2 &lt; x2**2 + y2**2</code>. </p>

<p>Sometimes <code>sqrt</code> distances computing when you have a bunch of things on your screen becomes the slowest thing in your program. And there is absolutely no reason to do it.</p>

<p>My suggestion is to keep everything squared, until you really need to compute <code>sqrt</code> (which you don't)</p>

<hr>

<p>Also, storing a direction in a string works (<code>"DOWN"</code>), but isn't very practical, it is a beginner pattern called 'stringly typed code'. You could instead make a constant called <code>DOWN</code> which corresponds to the vector pointing down (<code>(0, -1)</code> to make it simple or <code>0 - 1j</code> if you like complex numbers (best imo) or a custom  object if you like OOP). You can then replace:</p>

<pre><code>if self.mov == "UP": 
    self.pos[1] = self.pos[1] - SPEED
if self.mov == "DOWN": 
    self.pos[1] = self.pos[1] + SPEED
if self.mov == "LEFT": 
    self.pos[0] = self.pos[0] - SPEED
if self.mov == "RIGHT": 
    self.pos[0] = self.pos[0] + SPEED

# becomes

self.pos += self.mov
</code></pre>

<p>with constants, math becomes easier:</p>

<pre><code>UP = 0 + 1j
DOWN = 0 - 1j
LEFT = -1 + 0j
RIGHT = 1 + 0j

2*DOWN + 5*LEFT # means move 2 cases down and 5 left how intuitive

if key == "UP" and self.mov != "DOWN":
            self.mov = key
if key == "DOWN" and self.mov != "UP":
            self.mov = key
if key == "RIGHT" and self.mov != "LEFT":
            self.mov = key
if key == "LEFT" and self.mov != "RIGHT":
            self.mov = key

# becomes

if key - self.mov:
    self.mov = key
</code></pre>

<p>It takes time getting used to but it is worth it, you can always use tuples but they are the same except math doesn't work with them. The fact is Complex numbers are awesome it generalises nicely for arbitrary directions and distances. And if you assign to constants, you don't ever need to see them.</p>
    </div>