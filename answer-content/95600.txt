<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This bit worries me:</p>

<pre><code>lastElementAdded = -1;
</code></pre>

<p>It assumes that the minimum value in the array is zero. But really, an <em>increasing sequence</em> could start with -3456780 or something.</p>

<p>I'd use <code>null</code> or something non-numeric instead. Or simply add the first element automatically, and start the loop at index 1. You could use <code>Number.NEGATIVE_INFINITY</code>, but it has the same problem: A sequence <em>could</em> start at negative infinity.</p>

<p>Also, don't use <code>for..in</code> loops on arrays. A <code>for..in</code> loop enumerates an object's properties; it's not intended for iterating through an array's elements. Instead, use a regular <code>for</code> loop, or a <code>forEach</code> iterator.</p>

<p>Lastly, I'd change <code>allSubsequence</code> to <code>allSubsequences</code> (plural) simply because it more grammatically correct.</p>

<p>In terms of overall strategy, your current algorithm is doing a bit of unnecessary work. Given the example input, the first 3 subsequences it finds are:</p>

<pre><code>[ 87, 88, 91, 92, 94 ]
[ 88, 91, 92, 94 ]
[ 91, 92, 94 ]
</code></pre>

<p>The last two aren't really interesting, since they're just subsequences of the first.</p>

<p>Now, this really <em>isn't</em> a problem for arrays as short as what you've got here. Still, it's a fun exercise, so I tried my hand at it. There's probably an even more elegant solution than what I'm proposing here, though. Algorithms aren't my strong suit, I'm afraid. But here's what I came up with:</p>

<ol>
<li>Start a sequence with the first element of the input array</li>
<li>Iterate through the array

<ul>
<li>If a value is greater than the sequence's maximum, append it to sequence</li>
<li>If it's less and it's the first such value we've found, recurse with a subset of the input array, starting at the current index. Store the result.</li>
</ul></li>
<li>Return whichever sequence - the current one, or the "fork" - is longer</li>
</ol>

<p>Kinda hard to explain, actually. Hope the code below will help illustrate:</p>

<pre><code>function findLongestIncreasingSequence(array) {
  var sequence = [],
      fork = null;

  // Always add the first value to the sequence
  sequence.push(array[0]);

  // Reduce the array with. Since no initial accumulator is given,
  // the first value in the array is used
  array.reduce(function (previous, current, index) {

    // If the current value is larger than the last, add it to the
    // sequence and return (i.e. check the next value)
    if(current &gt; previous) {
      sequence.push(current);
      return current;
    }

    // If, however, the value is smaller, and we haven't had a fork
    // before, make one now, starting at the current value's index
    if(!fork &amp;&amp; current &lt; previous) {
      fork = findLongestIncreasingSequence(array.slice(index));
    }

    // Return the previous value if the current one is less or equal
    return previous;
  });

  // Compare the current sequence's length to the fork's (if any) and
  // return whichever one is larger
  return fork &amp;&amp; fork.length &gt; sequence.length ? fork : sequence;
}
</code></pre>

<p>Given the example input, you get:</p>

<pre><code>findLongestIncreasingSequence(sample); // =&gt; [ 87, 88, 91, 92, 94 ]
</code></pre>

<p>Anyway, what it does is more or less this, where <code>√</code> means the value was added to a sequence, and <code>F</code> means it "forked" and recursed</p>

<pre><code>Initial input: 87  88  91  10  22  9  92  94  33  21  50  41  60  80
====================================================================
1st call:       √   √   √   F   .  .   √   √   .   .   .   .   .   .
2nd call:                   √   √  F   √   √   .   .   .   .   .   .
3rd call:                          √   √   √   F   .   .   .   .   .
4th call:                                      √   F   √   .   √   √
5th call:                                          √   √   F   √   √
6th call:                                                  √   √   √
</code></pre>

<p>Unfortunately, it's not tail-recursive, so call stack depth could be an issue.</p>

<p>And there's probably more optimizations that can be made. For instance, if the current sequence is already 5 items long, there's no reason to fork if the array only has 4 items left. And as I said, there's probably an even cleverer solution overall.</p>

<p>The alternative to the above would be to simply map out the indices at which a value is lower than the one preceding it. Then do the same thing (slice the array at those indices, find increasing sequence) one at a time instead of recursively, and compare sequence lengths at the end. Same result. But recursion is more fun :P</p>
    </div>