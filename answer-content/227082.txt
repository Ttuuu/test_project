<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, let's make use of the <a href="https://docs.python.org/3/whatsnew/2.6.html#pep-343-the-with-statement" rel="nofollow noreferrer"><code>with</code></a> statement so that the file is closed automatically:</p>

<pre class="lang-py prettyprint-override"><code>with open(path, 'r') as txt_file_object:
    text = txt_file_object.readlines()
</code></pre>

<p>With this, you don't have to call <code>close()</code> anymore, as the file will close automatically when you exit the <code>with</code> scope.</p>

<hr>

<p><code>text = text[0]</code></p>

<p>You are only reading the first line of text. Is this really what you want to do?</p>

<hr>

<p>You are using the variable <code>text</code> for two different things: for the input lines and for the output values. This is not very intuitive; in fact, the result can be a list of integers, so why would it be called <code>text</code>? Maybe <code>result</code> would be a better name for it.</p>

<p>BUT since now you don't have to close at the end of the function, you can return the result directly instead of saving it in a variable:</p>

<pre class="lang-py prettyprint-override"><code>return [int(num) for num in text.split(sep)]
</code></pre>

<p>Returning will exit the <code>with</code> scope, so again the file will be closed automatically.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>[let for let in text.split(sep)]
</code></pre>

<p>This selects all objects inside <code>text.split(sep)</code>, so we can return the splitted list directly:</p>

<pre class="lang-py prettyprint-override"><code>text.split(sep)
</code></pre>

<p>Similarly, there's a different way of applying a function to every item in a list, which is using <code>map</code>. Maybe the list comprehension feels more natural, so you can keep that if you want; still I'll show you just so you know:</p>

<pre class="lang-py prettyprint-override"><code># Creates a list by calling 'int' to every item in the list
list(map(int, text.split(sep))
</code></pre>

<hr>

<p>You are repating a lot of code; you have four different results, but they are very similar, so let's try to provide a more generic way.</p>

<p>My concern here is handling the two possible dimensions. You are parsing the text in the same way (depending if it's int or str), but when it's two dimensions you do it for every line. So we could use Python's <a href="https://www.w3schools.com/python/python_lambda.asp" rel="nofollow noreferrer"><strong>lambdas</strong></a> to decide first what type of parsing (int or str) we are doing, and then just apply it once or multiple times.</p>

<p>The lambda can take parameters; the only parameter we need in our case is the input text. We can't just use <code>text</code> directly because sometimes we want to parse the full text, but sometimes only the line:</p>

<pre class="lang-py prettyprint-override"><code>if typ == "int":
    parse_function = lambda t: list(map(int, t.split(sep)))
elif typ == "str":
    parse_function = lambda t: list(t.split(sep))
else:
    raise ValueError("Unknown type.")
</code></pre>

<p>Now <code>parse_function</code> can be used like any other function, taking the text as input. So we can use it when deciding the dimension:</p>

<pre class="lang-py prettyprint-override"><code>if dim == 1:
    return parse_function(text)
elif dim == 2:
    return [parse_function(line) for line in text]
else:
    raise ValueError("Unknown dimension.")
</code></pre>

<hr>

<p>You do well in throwing exceptions for invalid input, but how is the user meant to know what possible values can be used for <code>typ</code> and <code>dim</code>? You could add that to the docstring. You should also say what the function does in the docstring.</p>

<h2>Updated code</h2>

<pre class="lang-py prettyprint-override"><code>def read_array_from_txt(path, dim, typ, sep):
    '''
    Processes a text file as a 1D or 2D array.
    :param path: Path to the input file.
    :param dim: How many dimensions (1 or 2) the array has.
    :param typ: Whether the elements are read as 'int' or 'str'
    :param sep: The text that is used to separate between elements.
    @time: O(n)
    @space: O(n)
    '''
    with open(path,"r") as txt_file_object:
        text = txt_file_object.readlines()

        if typ == "int":
            parse_function = lambda t: list(map(int, t.split(sep)))
        elif typ == "str":
            parse_function = lambda t: list(t.split(sep))
        else:
            raise ValueError("Unknown type.")

        if dim == 1:
            return parse_function(text)
        elif dim == 2:
            return [parse_function(line) for line in text]
        else:
            raise ValueError("Unknown dimension.")
</code></pre>
    </div>