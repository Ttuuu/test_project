<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is this too clever, would it be better to have <code>useState</code> and <code>useEffect</code>, with different hard-coded (not parameterised) <code>getData</code> functions, copied/distributed/embedded into each page (e.g. each <code>getLayout</code> function)? Would that be what's conventional? Is there an idiomatic or best-practice way to do this?</p>
</blockquote>

<p>First things fist. Whenever you start using multiple <code>useState</code> and <code>useEffect</code> calls, make sure you keep the state of hooks between those calls in mind. See the <a href="https://reactjs.org/docs/hooks-rules.html" rel="nofollow noreferrer">Rules of Hooks</a>. The bigger your code gets, the easier it is to accidentally break this. To help with this, make sure you keep your code readable so it's easier to spot those mistakes at first glance. The order of the hooks is important and this gets trickier with conditionals.</p>

<p>I don't know much about React, but what little of it I do know is that it encourages to split-up. Files, functions, basically everything should be as small as it could be. Which style (one per page vs one per app) do you think fits this philosophy best? Could you split-out the functionality to its own function, its own file even? Do you ever need to run multiple effects on the same page? Do you ever need to skip effects for performance reasons?</p>

<p>For sources on splitting-up as being encouraged, see:</p>

<ul>
<li><a href="https://redux.js.org/recipes/code-splitting/" rel="nofollow noreferrer">Redux.js on code splitting</a></li>
<li><a href="https://github.com/airbnb/javascript/tree/master/react#basic-rules" rel="nofollow noreferrer">Airbnb's React/JSX style guide</a></li>
<li><a href="https://redux.js.org/style-guide/style-guide/#only-one-redux-store-per-app" rel="nofollow noreferrer">Redux.js' style guide</a></li>
<li><a href="https://reactjs.org/docs/design-principles.html#scheduling" rel="nofollow noreferrer">React.js on design principles and scheduling</a></li>
</ul>
    </div>