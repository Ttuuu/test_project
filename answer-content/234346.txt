<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>double newX  = cX + timeStep / 6 * (k1x, + 2 * k2x + 2 * k3x + k4x);
double newY  = cY + timeStep / 6 * (k1y, + 2 * k2y + 2 * k3y + k4y);
double newVX = cVX + timeStep / 6 * (k1vx, +2 * k2vx + 2 * k3vx + k4vx);
double newVY = cVY + timeStep / 6 * (k1vy, +2 * k2vy + 2 * k3vy + k4vy);
</code></pre>

<p>Those mid-line commas seem like a bug.</p>

<p>Your compiler should warn you about it - you may need to turn up your compiler warning level.</p>

<hr>

<pre><code>double cX  = planets.find(currentPlanet)-&gt;second.x[i];
double cY  = planets.find(currentPlanet)-&gt;second.y[i];
double cVX = planets.find(currentPlanet)-&gt;second.vx[i];
double cVY = planets.find(currentPlanet)-&gt;second.vy[i];

...

planets.find(currentPlanet)-&gt;second.x.push_back(newX);
planets.find(currentPlanet)-&gt;second.y.push_back(newY);
planets.find(currentPlanet)-&gt;second.vx.push_back(newVX);
planets.find(currentPlanet)-&gt;second.vy.push_back(newVY);
</code></pre>

<p>We're finding the same planet many times over. We could just find it once and keep a reference to it. More to the point, we already have the planet available in <code>simulate</code> (in <code>planet.second</code>):</p>

<pre><code>for (int i = 0; i &lt; simDays; i++)
{
    for (auto &amp; planet : planets)
    {
        calculateNewPositions(planet.first, i);
    }
}
</code></pre>

<p>We could pass the planet by reference instead of the name.</p>

<hr>

<p>For some reason we're using a map of planets by name... when each planet already stores the name (so we might as well put them in a vector). So we'd have:</p>

<pre><code>std::vector&lt;Planet&gt; planets;

...

for (int i = 0; i != simDays; ++i)
    for (auto &amp; planet : planets)
        calculateNewPositions(planet, i);

...

void MotionNBody::doRK4(Planet&amp; planet, int i)
{
    double cX  = planet.x[i]; // ta da! no finding

...
</code></pre>

<hr>

<pre><code>        double firstTerm = (6.67408E-11 * m) / ((xo - x)*(xo - x) + (yo - y)*(yo - y));
        double secondTerm = ((xo - x)) / (std::sqrt((xo - x)*(xo - x) + (yo - y)*(yo - y)));
        ax += firstTerm * secondTerm;
</code></pre>

<p>Isn't it possible for us to be dividing by zero here?</p>

<p>There's also lot of duplicate calculations (<code>xo - x</code> and <code>(xo - x)*(xo - x) + (yo - y)*(yo - y)</code>) that could be put in named variables.</p>

<hr>

<pre><code>...

double k2x  = cVX + timeStep / 2 * k1vx;
double k2y  = cVY + timeStep / 2 * k1vy;
double k2vx = calculateAccelerationX(cX + timeStep / 2 *k1x, cY + timeStep / 2 * k1y, i, currentPlanet);
double k2vy = calculateAccelerationY(cX + timeStep / 2 * k1x, cY + timeStep / 2 * k1y, i, currentPlanet);

...
</code></pre>

<p>There's a lot of repeated code for the x and y coordinates here. We should use an existing vector math library or write our own <code>struct Vector2{ double x, y; };</code> with appropriate operator overloads to get something more like:</p>

<pre><code>Vector2 k2  = cV + timeStep / 2.0 * k1v;
Vector2 k2v = calculateAcceleration(c + timeStep / 2.0 * k1, i, planet);
</code></pre>
    </div>