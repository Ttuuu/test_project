<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>DataTable has a lot of overhead.  </p>

<p>In the code you have a lot of overhead.  Album AlbumMapper is called for every row and you parse for every column name.  </p>

<p>I think it would be a lot clean if you based is on Album and return List</p>

<pre><code>public List&lt;Album&gt; ExecuteQuery(string procedureName, List&lt;Parameter&gt; parameters = null)
{
</code></pre>

<p>Use <code>Album</code> also for the query.  Have nullable Properties and null means don't search on that.</p>

<pre><code>public List&lt;Album&gt; SearchAlbum(Album album)
{
    List&lt;Album&gt; searchAlbum = new List&lt;Album&gt;();
    List&lt;Parameter&gt; parameters = new List&lt;Parameter&gt;();
    string spName = "GetAlbums";

    if (album.Rating != null)
    {
         parameters.Add(new Parameter("@Rating", SqlDbType.Int, 5));
         spName = "GetAlbumsByRating";
    else if (album.Rating != null) 
    {
         parameters.Add(new Parameter("@Id", SqlDbType.Int, id));
         spName = "GetAlbumsByRating";
    }
    else if (album.Tile != null) 
    {
         parameters.Clear();
         parameters.Add(new Parameter("@Title", SqlDbType.VarChar, newAlbum.Title));
         parameters.Add(new Parameter("@Composer", SqlDbType.VarChar, newAlbum.Composer));
         parameters.Add(new Parameter("@ReleaseYear", SqlDbType.Int, newAlbum.ReleaseYear));
         parameters.Add(new Parameter("@Rating", SqlDbType.Int, newAlbum.Rating));
         parameters.Add(new Parameter("@IsFranchise", SqlDbType.Bit, newAlbum.IsFranchise));
         spName = "AddAlbum";
    }

    using (connection = new SqlConnection(connectionString))
    {
        connection.Open();
        //Create Command
        command = new SqlCommand(spName, connection);
        command.CommandType = CommandType.StoredProcedure;

        if (parameters != null)
        {
            foreach (Parameter parameter in parameters)
            {
                command.Parameters.Add(parameter.Name, parameter.Type).Value = parameter.Value;
            } 
        }

        //here would need another branch for an insert

        using(SqlDataReader rdr = command.Execute())
        {
             while(rdr.Read())
             { 
                 Album album = new Album();
                 album.ID = rdr.GetInt(0);
                 album.Title = rdr.GetString(1);
                 ...
                 searchAlbum.Add(album);
             }
        }
  }
  return searchAlbum;
}
</code></pre>
    </div>