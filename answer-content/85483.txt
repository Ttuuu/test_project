<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a few notes. Perhaps this answer is not so perfect like Duncan's one. 
But I try it anyway.</p>

<ol>
<li>do not use <code>SecureRandom</code> as class member. Create <code>SecureRandom</code> as local variable if you need it.</li>
</ol>

<p>From <a href="https://www.cigital.com/justice-league-blog/2009/08/14/proper-use-of-javas-securerandom/" rel="nofollow">Proper use of Java’s SecureRandom:</a></p>

<blockquote>
  <ul>
  <li>Periodically throw away the existing java.security.SecureRandom instance and create a new one. This will generate a new instance with a new seed.</li>
  <li>Periodically add new random material to the PRNG seed by making a call to java.security.SecureRandom.setSeed(java.security.SecureRandom.generateSeed(int)).</li>
  </ul>
</blockquote>

<ol start="2">
<li><p>Use <code>SecretKeyFactory</code> and <code>PBEKeySpec</code> to generate your secret key.</p></li>
<li><p>Some times it can be a good idea to use Base64 encoding/decoding. (Debuging, binary data encryption, etc...)</p></li>
<li><p><code>throws Exception</code> will make your code more readable. You can always create a <code>MyCryptException(cause)</code> but this would be useless since <code>MyCryptException</code> is just a wrapper for the real exception and provide no father functionality.</p></li>
<li><p>Are you really need the getter methods for <code>Cipher, IvParameterSpec, SecretKey</code> ?    </p></li>
<li><p>Define an Interface for your <code>AESCrypt</code> class., Every <em>algorithm</em> or <em>service</em> should implement a interface</p></li>
</ol>

<p>Look at this example:</p>

<pre><code>public interface ICrypt {
    String encode(String plainText)     throws Exception;
    String decode(String encodedText)   throws Exception;
}

public class AESCrypt implements ICrypt {

    private static final int PASSWORD_ITERATIONS = 65536; // vs brute force
    private static final int KEY_LENGTH          = 256;

    private char[]     pass                = "password".toCharArray(); // hardcoded or read me from a file
    private byte[]     salt                = new byte[20]; // for more confusion
    private byte[]     ivBytes             = null;

    public AESCrypt() {
        //
        // INIT SALT
        //
        SecureRandom secureRandom = new SecureRandom(); // seed is 0
        secureRandom.setSeed(secureRandom.generateSeed(16));
        secureRandom.nextBytes(salt);
    }

    private Cipher createCipher(boolean encryptMode) throws Exception {

        if (!encryptMode &amp;&amp; ivBytes == null) {
            throw new IllegalStateException("ivBytes is null");
        }

        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        PBEKeySpec spec = new PBEKeySpec(pass, salt, PASSWORD_ITERATIONS, KEY_LENGTH);

        SecretKey secretKey = factory.generateSecret(spec);
        SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(), "AES");

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        int mode = encryptMode ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE;

        if (ivBytes == null) {

            cipher.init(mode, secret);
            AlgorithmParameters params = cipher.getParameters();
            ivBytes = params.getParameterSpec(IvParameterSpec.class).getIV();

        } else {

            cipher.init(mode, secret, new IvParameterSpec(ivBytes));
        }

        return cipher;
    }

    @Override
    public String encode(String plainText) throws Exception {

        Cipher cipher = createCipher(true);

        byte[] encryptedBytes = cipher.doFinal(plainText.getBytes("UTF-8"));

        return new String(encryptedBytes);

    }

    @Override
    public String decode(String encodedText) throws Exception {

        Cipher cipher = createCipher(false);

        return new String(cipher.doFinal(encodedText.getBytes()), "UTF-8");
    }
}
</code></pre>

<p>If you want to use base64 encoding/decoding, you do not need to change your <code>AESCrypt</code> implementation. Instead implement a decorator for this purpose:</p>

<pre><code>public class Base64Decorator implements ICrypt {

    private ICrypt realCrypt;

    private Base64Decorator(ICrypt crypt) {
        this.realCrypt = crypt;
    }

    public static ICrypt wrap(ICrypt real) {
        return new Base64Decorator(real);
    }

    @Override
    public String encode(String plainText) throws Exception {
        String encoded = realCrypt.encode(plainText);
        return Base64.getEncoder().encodeToString(encoded.getBytes());
    }

    @Override
    public String decode(String encodedText) throws Exception {
        byte[] encodedBytes = Base64.getDecoder().decode(encodedText);
        return realCrypt.decode(new String(encodedBytes));
    }

}
</code></pre>

<p>Now you can use it this way:</p>

<pre><code>public static void main(String[] args) throws Exception {

    ICrypt crypt = Base64Decorator.wrap(new AESCrypt());
    // ICrypt crypt = new AESCrypt();

    String encoded = crypt.encode("hello");
    String decoded = crypt.decode(encoded);

    System.out.println(encoded);
    System.out.println(decoded);

}
</code></pre>

<p>Output - <code>Base64Decorator + AESCrypt</code>: </p>

<blockquote>
  <p>eOXeBjEYzsUgnuHQDnZxXQ==</p>
  
  <p>hello</p>
</blockquote>

<p>Output - <code>AESCrypt</code>: </p>

<blockquote>
  <p>¬¨b;J¤yÇ@^Ž´Ä</p>
  
  <p>hello</p>
</blockquote>
    </div>