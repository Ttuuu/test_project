<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#pragma once
</code></pre>

<p>Be aware that you are giving up portability here as this is, while common, a non-standard compiler extension. For nearly all applications, as long as you use implementations that support it, neither physically nor logically copy files around, and the filesystem doesn't trigger a false-positive, then #pragma once is fine. Otherwise, stick with standard include guards and give some effort to differentiate the guard name.</p>

<hr>

<pre><code>  InitializedArray() = default;
</code></pre>

<p>Not sure you need this. You can greatly simplify the logic of your functions as you won't need the existence checking. The lifetime of member arrays would be guaranteed to exist for the lifetime of the object.</p>

<hr>

<pre><code>  InitializedArray(size_t length, T initial)
      : mInitial(initial), mTop(0), mLength(length) {
    mFrom = new size_t[mLength];
    mTo = new size_t[mLength];
    mElements = new T[mLength];
  }
</code></pre>

<p>For portability reasons, <code>size_t</code> needs to be qualified with its namespace (<code>std::size_t</code>) and it requires <code>&lt;cstddef&gt;</code>.  C++ makes no guarantee that <code>size_t</code> will be available in the global namespace, but it doesn't guarantee that the symbols are available in namespace <code>std</code>.</p>

<p>Is <code>T</code> guaranteed to be cheap to copy? Pass by-reference to-<code>const</code>.  What if <code>T</code> is not copyable?</p>

<p>For data members dependent on the user to provide values to initialize with, prefer the constructor initializer list to assignment in the body of the constructor.</p>

<p>Avoid explicit <code>new</code>/<code>delete</code>.  If one of those allocations fails, any allocation that has already completed will not be cleaned up.  Use <code>std::make_unique&lt;T|std::size_t[]&gt;</code>. <a href="http://www.gotw.ca/gotw/074.htm" rel="nofollow noreferrer">Abusing <code>std::vector</code></a> will probably only allow for simple buffer lifetime management, but I wouldn't rely on the behavior in the buffer region beyond the size of the vector.</p>

<p>You have the same three copy expressions that appear multiple times.  Consider writing a helper to reduce the replication.</p>

<pre><code>    // Exposition-only
    void copy_thrice(const InitializedArray&amp; other) {
        std::copy(...);
        std::copy(...);
        std::copy(...);
    }

    InitializedArray(const InitializedArray&amp; other)
    : mFrom{std::make_unique&lt;std::size_t[]&gt;(other.size())}
    , ... {
        copy_thrice(other); // Give this an appropriate name?
    }
</code></pre>

<hr>

<pre><code>  InitializedArray &amp; operator=(const InitializedArray &amp; other) { ... }
</code></pre>

<p>If <code>other</code> was default constructed (has not initialized array data members), should the copy constructor initialize the array data members?</p>

<p>What happens when <code>mLength</code> is non-zero and less than <code>other.mLength</code>?</p>

<p>The logic can be simplified. Read up on the copy-and-swap idiom.</p>

<hr>

<pre><code>  T &amp; operator[](size_t index)
</code></pre>

<p>This is fine for a mutable <code>InitializedArray</code>, but what about a <code>const</code>-qualified (immutable) <code>InitializedArray</code>? </p>

<pre><code>    if (mFrom[index] &lt; mTop &amp;&amp; mTo[mFrom[index]] == index) {
      return mElements[index];
    } else {
      mFrom[index] = mTop;
</code></pre>

<p>You don't need an <code>else</code> after a control structure like <code>return</code>, <code>break</code>, <code>continue</code>, etc.</p>

<pre><code>    if (already_initialized(index)) {
      return mElements[index];
    }
    return initialize_at(index);
</code></pre>

<hr>

<pre><code>  size_t size() {
    return mLength;
  }
</code></pre>

<p>No reason this function cannot be used in a <code>const</code> context.</p>
    </div>