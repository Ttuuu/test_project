<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend putting the script at the end of the page, just before <code>&lt;/body&gt;</code> The reason is that you'll want to have scripts run when the DOM is ready (i.e. all the elements are present and ready for JS manipulation).</p>

<p><code>&lt;center&gt;</code> is a deprecated stylistic element. To center an element, set left and right margins to <code>auto</code>. For text, use <code>text-align: center</code>:</p>

<pre><code>.centered-element {
  display: block;
  width: 250px; /* Your desired width */
  margin-left: auto;
  margin-right: auto;
}

.element-with-centered-text {
  text-align: center;
}
</code></pre>

<p>This way, you have separation of concerns. HTML deals with describing the structure, CSS deals with styling your HTML.</p>

<pre><code>* {
    font-family: "Times New Roman", Times, serif;
}
</code></pre>

<p>This is unnecessary. Applying <code>font-family</code> to <code>body</code> should be enough to apply it to all elements. Font style is inherited by all descendants until an element overrides it (and styles its own descendants).</p>

<pre><code>fieldset {...}

input[type=text] {...}

button {...}

ul {..}

li {...}
</code></pre>

<p>I don't recommend styling elements directly because it breaks expectations. If I add a <code>&lt;ul&gt;</code> in your app for whatever purpose, I expect it to have bullets. But since your CSS removes them, my list won't have bullets. I'd have to add them back when, by default, they should have had bullets.</p>

<p>Instead, use classes to target app-specific styling and leave element defaults alone. The only time I would style an element directly is if it's part of a globally-applied theme or a normalizer.</p>

<p>As for your JavaScript, you could abstract away your element creation with a function like the following. This way, you don't have to repeat element creation scripts everywhere and you can easily describe dynamic HTML in a nested manner, like HTML.</p>

<pre><code>const e = (name, properties = {}, children = []) =&gt; {
  // Create the element
  const element = document.createElement(name)

  // Apply properties
  Object.keys(properties).forEach(property =&gt; {
    element.setAttribute(property, propertyes[property])
  })

  // Append children
  children.forEach(c =&gt; {
    if(!c) return
    const node = (typeof c === 'string') ? document.createTextNode(c) : c
    element.appendChild(node)
  })

  return element
}

// Usage
const root = e('div', {}, [
  e('p', {}, [
    e('span', {}, [
      'Hello, World!',
      'Lorem Ipsum'
    ])
  ])
])

root.appendChild(e('span', {}, ['another piece of text']))
</code></pre>

<p>If the syntax looks familiar, it's because this is the basic premise of how most VDOM libraries work under the hood. They're just nested calls of functions that either return an actual element, or objects that represent elements (which are turned to elements later).</p>

<p>From there, you can describe and build your "components" like:</p>

<pre><code>const LoadForm = () =&gt; {
  e('div', {}, [
    e('input', { type: 'text', name: 'user_input', placeholder: 'Enter here...' }),
    e('br'),
    e('button', { name: 'add_list' }, ['Add To List']),
    e('button', { name: 'remove_list' }, ['Remove From List']),
  ])

document.getElementById('in').appendChild(LoadForm())
</code></pre>

<p>You can even encapsulate this in a class if you want so that you can also add some helper methods.</p>

<pre><code>class LoadForm {
  onAdd () {
    // Do something on add
  }
  onRemove () {
    // Do something on remove
  }
  render() {
    return (
      e('div', {}, [
        e('input', { type: 'text', name: 'user_input', placeholder: 'Enter here...' }),
        e('br'),
        e('button', { name: 'add_list', onclick: this.onAdd }, [
          'Add To List'
        ]),
        e('button', { name: 'remove_list', onclick: this.onRemove }, [
          'Remove From List'
        ]),
      ])
    )
  }
}

document.getElementById('in').appendChild((new LoadForm()).render())
</code></pre>

<p>Lastly, JavaScript is written in <code>camelCase</code>, not <code>snake_case</code>.</p>
    </div>