<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>
When I was learning Python, I found <a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python" rel="nofollow noreferrer">The Zen of Python</a> quite helpful.</p>

<h1>Formatting</h1>

<p>I agree about renaming <code>self.e</code> to <code>self.textbox</code>. Descriptive names are generally better, unless this results in an overly long and unwieldy name. In addition to that there are a few more formatting issues. (You may find the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 Style Guide</a> helpful)</p>

<ul>
<li><p>Redundant comments. (See <a href="https://www.python.org/dev/peps/pep-0008/#inline-comments" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/#inline-comments</a>) For example, in this line:</p>

<pre><code>obj = Calc(root)  # object instantiated
</code></pre>

<p>The comment is not particularly helpful here as we can see that <code>Calc(root)</code> clearly instanciates a new <code>Calc</code> object. The comment on the following line, on the other hand, is more helpful:</p>

<pre><code>self.txt = self.getvalue()  # No need to manually delete when done from keyboard
</code></pre></li>
<li><p>Method names that do not use underscores to separate words. For example, instead of <code>stripfirstchar</code> we should have <code>strip_first_char</code></p></li>
<li><p>While I could not find any mention of this in PEP 8, in my experience a class's <code>__init__</code> method is almost always placed before any other methods.</p></li>
<li><p>Use <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">docstrings</a> instead of comments to document entire functions. For example:</p>

<pre><code>def getvalue(self):  # Returns value of the text box
    return self.e.get()
</code></pre>

<p>becomes</p>

<pre><code>def getvalue(self):
    """Returns value of the text box"""
    return self.e.get()
</code></pre></li>
<li><p>There is no need to wrap a method in a lambda when it can be used on its own. For example, this:</p>

<pre><code>Button(master, text='AC', width=3, command=lambda: self.clearall()).grid(row=1, column=4)
</code></pre>

<p>can be rewritten as:</p>

<pre><code>Button(master, text='AC', width=3, command=self.clearall).grid(row=1, column=4)
</code></pre></li>
<li><p>Use <code>or</code> instead of <code>any</code> when all conditions are known beforehand. For example:</p>

<pre><code>any([event.char.isdigit(), event.char in '/*-+%().'])
</code></pre>

<p>can be rewritten as</p>

<pre><code>event.char.isdigit() or event.char in '/*-+%().'
</code></pre></li>
</ul>

<h1>Practical Issues</h1>

<ul>
<li><p>The C button in the GUI does not work properly. This is because of an indentation issue in the method <code>clear1</code>. The call to <code>self.refresh_text</code> should be outside the else block.</p></li>
<li><p>If I remove all characters in the text, then try to type something, the program will raise an <code>IndexError</code>. This can be fixed by changing the condition in the if statement in the <code>strip_first_char</code> method to </p>

<pre><code>len(self.txt) &gt; 0 and self.txt[0] == '0'
</code></pre></li>
<li><p>Open the window only if this program is being run as <code>__main__</code>. Check if <code>__name__ == '__main__'</code> before opening the window. This is to be sure that this will not happen if someone is trying to use this program as a library. (e.g. embedding this calculator in another application)</p></li>
<li><p><code>%</code> should be a special function. As it is, if I type <code>1%1</code>, the program will interpret this as <code>1/1001</code> when it should cause some sort of syntax error. There are other ways to fix this, but this seems to be both the easiest to implement and the way most calculators I have seen handle this. </p></li>
</ul>

<hr>

<h2>Using <code>eval</code> is usually a <a href="https://softwareengineering.stackexchange.com/questions/191623/best-practices-for-execution-of-untrusted-code/191628#191628">very</a> <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice">bad</a> <a href="https://stackoverflow.com/questions/1933451/why-should-exec-and-eval-be-avoided">idea</a></h2>

<p>I see no way to remove <code>eval</code> from this code without significant changes. Letting the user type their math directly makes it harder to not use <code>eval</code> here, otherwise you could store the math in an internal, easy to parse form, and convert that to a more user-friendly string before displaying it, but this would require rewriting almost all of the program. </p>
    </div>