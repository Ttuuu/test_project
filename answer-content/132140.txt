<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The mapping is so simple, I prefer to do a more literal implementation of the wiki explanation:</p>
<pre><code>function rot13(str) {
  var input     = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
  var output    = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm';
  var index     = x =&gt; input.indexOf(x);
  var translate = x =&gt; index(x) &gt; -1 ? output[index(x)] : x;
  return str.split('').map(translate).join('');
}
</code></pre>
<p>Here the code is expressing just two rules:</p>
<ol>
<li>If it's a non-letter, don't translate it.</li>
<li>If it's a letter, translate it by mapping its physical position in the input to its physical position in the output.</li>
</ol>
<p>This avoids charCodes, loops, and nested if statements, all of which are implementation noise and distract from the essence of the program.</p>
<p>While this still executes in <code>O(n)</code>, the <em>constant factor</em> on <code>n</code> is high, because in the worst case we have to look through 52 input letters to find each character.  In practice, however, this makes very little difference: <a href="https://jsperf.com/rot13comparison" rel="noreferrer">https://jsperf.com/rot13comparison</a></p>
<h2>Even Faster Variation</h2>
<p>Nevertheless, it's possible to avoid the high constant factor on <code>n</code> if you were in a situation where squeezing out every last drop of performance mattered.  And indeed, you could probably squeeze out even more by replacing the <code>split</code>/<code>map</code> with a <code>for</code> loop.  But again, these kinds of optimizations are rarely needed, and concentrating on clean code should usually take precedence.</p>
<p>Here's a slight variation on the same theme, which creates a lookup dictionary between the input and output letters using an object, and then uses that object to do the translation:</p>
<pre><code>  function rot13Fast(str) { 
    return str.split('').map(x =&gt; rot13Fast.lookup[x] || x).join('')
  }
  rot13Fast.input  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('')
  rot13Fast.output = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'.split('')
  rot13Fast.lookup = rot13Fast.input.reduce((m,k,i) =&gt; Object.assign(m, {[k]: rot13Fast.output[i]}), {})
</code></pre>
    </div>