<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Aspect-Oriented Programming</strong></p>

<p>Rather than wrapping methods (which still is kind of boiler-plate code, which you wanted to get rid of in the first place), use <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming" rel="nofollow noreferrer">AOP</a>. AOP allows you to write and configure the wrapper functionality at a single place. Known frameworks for AOP are:</p>

<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.contextboundobject?view=netframework-4.8" rel="nofollow noreferrer">ContextBoundObject</a></li>
<li><a href="https://autofaccn.readthedocs.io/en/latest/advanced/interceptors.html" rel="nofollow noreferrer">Autofac</a></li>
<li><a href="https://stackoverflow.com/questions/633710/what-is-the-best-implementation-for-aop-in-net">And many others..</a></li>
</ul>

<hr>

<p><strong>Exception hiding</strong></p>

<p>The problem with code like this..</p>

<blockquote>
<pre><code>try
{
    return f();
}
catch (Exception ex)
{
    logger.Error(ex.Message, ex); // &lt;- could throw error that hides 'ex'
    throw;
}
</code></pre>
</blockquote>

<p>..is that it can hide the original exception <code>ex</code>. There are some situations that could invoke this unwanted behavior, for instance:</p>

<ul>
<li>if ex is <code>OutOfMemoryException</code>, chances are <code>logger.Error</code> would throw its own instance of <code>OutOfMemoryException</code>, hiding the original error and stack trace.</li>
<li>if <code>logger</code> throws an error logging the original error (however, most logger frameworks tend to have fallback after fallback to try to mitigate an error propagating up)</li>
</ul>

<p>At least, make the code a bit more robust. This is one way. Another is to build an <code>AggregateException</code> containing both errors, but this introduces new potential issues (what if we fail building the error..) that need to be addressed.</p>

<pre><code>try
{
    return f();
}
catch (Exception ex)
{
    try
    {
        logger.Error(ex.Message, ex); // &lt;- you will not hide my error!
    }
    catch
    { 
        // we did what we could..
    }
    throw;
}
</code></pre>
    </div>