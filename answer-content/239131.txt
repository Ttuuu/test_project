<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's go through the functions and see what can be improved.</p>

<h1><code>main</code></h1>

<p>The <code>sorted_vector</code> variable is not used.  Remember to enable compiler
warnings.</p>

<p>You only test the <code>quick_sort</code> function.  Consider testing other
functions as well.</p>

<h1><code>bubble_sort</code></h1>

<p>The correct type to index a <code>std::vector&lt;int&gt;</code> is
<code>std::vector&lt;int&gt;::size_type</code>.  <code>std::size_t</code> (defined in header
<code>&lt;cstddef&gt;</code>) is also fine, but <code>unsigned int</code> is not appropriate.</p>

<p>Instead of looping to <code>to_sort.size() - i</code>, why not simply set <code>i</code> to
the correct bound?</p>

<p>Use <code>std::swap</code> (defined in header <code>&lt;utility&gt;</code>) to swap two values
instead of manually introducing a third variable.</p>

<p>In <code>bubble_sort_optimized</code>, <code>i</code> doesn't increase, so the function does
unnecessary work.</p>

<h1><code>selection_sort</code></h1>

<p>This function can be simplified with <code>std::iter_swap</code> (defined in
header <code>&lt;utility&gt;</code>) and <code>std::min_element</code> (defined in header
<code>&lt;algorithm&gt;</code>):</p>

<pre><code>void selection_sort(std::vector&lt;int&gt;&amp; to_sort)
{
    for (auto it = to_sort.begin(); it != to_sort.end(); ++it) {
        std::iter_swap(it, std::min_element(it, to_sort.end()));
    }
}
</code></pre>

<p>The <code>ind_min</code> function can be removed.</p>

<h1><code>merge_sort</code></h1>

<p>The function has a strange interface — it mutates the input
vector and returns a new vector.</p>

<p>The <code>get_from_to</code> function is also not useful, because <code>std::vector</code>
already has the functionality:</p>

<pre><code>void merge_sort(std::vector&lt;int&gt;&amp; to_sort)
{
    if (to_sort.size() &lt;= 1) {
        return;
    }
    auto mid = to_sort.begin() + to_sort.size() / 2;
    std::vector left(to_sort.begin(), mid);
    std::vector right(mid, to_sort.end());
    merge_sort(left);
    merge_sort(right);
    std::merge(left.begin(), left.end(), right.begin(), right.end(), to_sort.begin());
}
</code></pre>

<p>Note that <code>std::merge</code> (defined in header <code>&lt;algorithm&gt;</code>) does the job
of <code>merge</code>.</p>

<h1><code>quick_sort</code></h1>

<p>You are using <code>int</code> to index the vector — that's even worse than
<code>unsigned int</code>.</p>

<p>You don't have to mark <code>quick_sort</code> inline — unless you are
implementing the function in a header, in which case all non-template
functions need to be inline in order to prevent ODR violations.</p>

<h1><code>display_vector</code></h1>

<p>This function has a bug: the function accesses invalid memory if
<code>to_display</code> is empty, in which case <code>to_display.size() - 1</code> returns
<code>SIZE_MAX</code> (which is typically <code>4294967295</code> or <code>18446744073709551615</code>)
instead of <code>-1</code>, since <code>to_display.size()</code> is an unsigned value!  The
empty case needs to be handled specially anyway.  For other cases, use
<code>std::ostream_iterator</code> (defined in header <code>&lt;iterator&gt;</code>):</p>

<pre><code>void display_vector(const std::vector&lt;int&gt;&amp; to_display)
{
    if (to_display.empty()) {
       return;
    }
    std::copy(to_display.begin(), to_display().end() - 1,
              std::ostream_iterator&lt;int&gt;{std::cout, ", "});
    std::cout &lt;&lt; to_display.back() &lt;&lt; '\n';
}
</code></pre>
    </div>