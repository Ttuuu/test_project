<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some additional points:</p>

<ul>
<li><p>Avoid "God classes". Your <code>Game</code> class does absolutely everything. This makes it hard to see which member variables are used where, and is one step away from using global variables. The larger the program, the harder it is to understand. Classes should follow the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> (SRP), and be responsible for only one thing.</p></li>
<li><p>Use the "<a href="https://en.cppreference.com/w/cpp/language/raii" rel="nofollow noreferrer">Resource Acquisition Is Initialization</a>" (RAII) approach for managing resource lifetimes. For example, the SDL context, window, and renderer can be encapsulated in an object, with initialization done in the constructor, and cleanup in the destructor.</p></li>
<li><p>Don't use global constants. <code>GRID_WIDTH</code> etc. apply to all instances of the <code>Game</code> class, which is unnecessarily restrictive.</p></li>
<li><p>Use unsigned types for variables that can never be negative (grid width / height, etc.). <code>SDL_Point</code> uses the wrong type (<code>int</code>), but we can easily define our own <code>Point</code> class to use instead. We can convert to the necessary SDL type only when we need to call an SDL function with it.</p></li>
<li><p>Member functions that don't change member variables (e.g. <code>GetScore()</code>, <code>GetSize()</code>) should be marked <code>const</code> (e.g. <code>int GetScore() const;</code>).</p></li>
<li><p>A better strategy for picking a new food position might be to add the positions of all the empty squares to a vector, and then pick one (by choosing an index less than the size of the vector).</p></li>
</ul>

<hr>

<p>Here's a (pseudo-code) example of how we could split up the <code>Game</code> class. Note that there's no reason for the <code>Game</code> class to know anything about <code>SDL</code>. If we ever wanted to change to a different platform for rendering / input, it's much neater to keep it separate. Don't be afraid to use free functions as well.</p>

<pre><code>namespace Snake
{
    template&lt;class T&gt;
    struct Point
    {
        T x;
        T y;
    };

    struct SDLContext
    {
        SDLContext(std::size_t window_width, std::size_t window_height);
        ~SDLContext();

        SDL_Window * window = nullptr;
        SDL_Renderer * renderer = nullptr;
    };

    SDLContext::SDLContext()
    {
        // ... SDL init
    }

    SDLContext::~SDLContext()
    {
        // ... SDL shutdown
    }

    struct Board
    {
        Board(std::size_t width, std::size_t height);

        enum class Block { head, body, food, empty };

        std::size_t width;
        std::size_t height;

        std::vector&lt;std::vector&lt;Block&gt;&gt; grid;
    };

    Board::Board()
    {
        // ... init grid to "empty"
    }

    struct Food
    {
        Point&lt;std::size_t&gt; position = Point{ 0, 0 };
    };

    struct Snake
    {
        void Grow(int amount);
        void UpdatePosition(Board&amp; board);

        enum class Move { up, down, left, right };

        Move last_dir = Move::up;
        Move dir = Move::up;

        Point&lt;std::size_t&gt; headPosition;
        std::vector&lt;Point&lt;std::size_t&gt;&gt; body;

        int size = 1;
        float speed = 0.5f;
        int growing = 0;
    };

    class Game
    {
        Game(std::size_t gridWidth, std::size_t gridHeight);

        int GetScore() const;
        int GetSize() const;

        void Update();

    private:

        void ReplaceFood();

        Board board;
        Food food;
        Snake snake;

        int score = 0;
        bool alive = true;
    };

    Game::Game(std::size_t gridWidth, std::size_t gridHeight):
        Board(gridWidth, gridHeight)
    {
        ReplaceFood();
    }

    void PollEvents(SDLContext&amp;, bool&amp; quit)
    {
        // ...
    }

    void Render(SDLContext&amp;, Game const&amp; game)
    {
        // ...
    }

    void UpdateWindowTitle(SDLContext&amp;, Game const&amp; game)
    {
        // ...
    }

    void Run(SDLContext&amp; context, Game&amp; game, int frame_rate)
    {
        Uint32 before, second = SDL_GetTicks(), after;
        int frame_time, frames = 0;

        while (true)
        {
            before = SDL_GetTicks();

            bool quit = false;
            PollEvents(sdlContext, quit);

            if (quit)
                break;

            game.Update();

            Render(sdlContext, game);

            frames++;
            after = SDL_GetTicks();
            frame_time = after - before;

            if (after - second &gt;= 1000)
            {
                UpdateWindowTitle(sdlContext, game.GetScore(), frames);

                frames = 0;
                second = after;
            }

            if (frame_rate &gt; frame_time)
            {
                SDL_Delay(frame_rate - frame_time);
            }
        }
    }

} // Snake


#include &lt;SDL.h&gt;

#include &lt;iostream&gt;
#include &lt;cstddef&gt;

int main(int argc, char * argv[])
{
    using namespace Snake;

    const std::size_t window_width = 640;
    const std::size_t window_height = 640;
    SDLContext sdlContext(window_width, window_height);

    const std::size_t grid_width = 32;
    const std::size_t grid_height = 32;
    Game game(grid_width, grid_height);

    const int frame_rate = 1000 / 60;
    Run(sdlContext, game, frame_rate);

    std::cout &lt;&lt; "Game has terminated successfully, score: " &lt;&lt; game.GetScore()
        &lt;&lt; ", size: " &lt;&lt; game.GetSize() &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>The functions taking the <code>SDLContext&amp;</code> don't necessarily use it, since SDL works through global functions. However, this does prove that we have properly initialized SDL at the point the function is called.</p>
    </div>