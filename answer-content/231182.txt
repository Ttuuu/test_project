<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The reading could be clearer using meaningful variable names. The concatenation of very long variable names does not improve the reading either. That is to say, the shell syntax is not suited to define several variables in a row: the code becomes more difficult to read.</p>

<h2>Variables</h2>

<p>Some variables seem necessary but you may remove or at least ignore some variables. The shell commands (or utilities) should stand out in the shell script. The command line should looks like the following one.</p>

<pre><code>wget -q -O - "http://wordpress.org/latest.tar.gz" | tar -xzf - -C /var/www
</code></pre>

<p>Eventually, you may use some variables in replacement to avoid hard-coding values as in your snippet.</p>

<pre><code>wget "${latest_mediawiki_core}" -O - | tar -xzv --strip-components 1 -C "${war}/${domain}"
</code></pre>

<p>Personally, I would have used macros instead of shell variables to improve the readability.</p>

<pre><code>wget MEDIAWIKI -O - | tar -xzv --strip-components 1 -C DESTDIR
</code></pre>

<h2>Code factorization</h2>

<p>You may replace several command invocations by only one or shorten the code.</p>

<pre><code>cp "${war}/${domain}"/.htaccess* "${war}/mediawiki_specific_backups"/.htaccess*
cp "${war}/${domain}"/LocalSettings.php "${war}/mediawiki_specific_backups"/LocalSettings.php
cp "${war}/${domain}"/robots.txt "${war}/mediawiki_specific_backups"/robots.txt
cp "${war}/${domain}"/${domain}.png "${war}/mediawiki_specific_backups"/${domain}.png
cp "${war}/${domain}"/googlec69e044fede13fdc.html "${war}/mediawiki_specific_backups"/googlec69e044fede13fdc.html
</code></pre>

<p>In the above code snippet, you can see a lot of duplicated information.</p>

<pre><code># move in the target directory
pushd DESTDIR &gt;/dev/null
# copy some configuration files
cp -v .htaccess* LocalSettings.php robots.txt home.png googlec69e044fede13fdc.html NEWDIR
# come back to the previous directory
popd &gt;/dev/null
</code></pre>

<p>Eventually, you may use a subshell to perform the directory change.</p>

<pre><code>(cd DESTDIR || exit; 
 cp -v .htaccess* LocalSettings.php robots.txt home.png googlec69e044fede13fdc.html NEWDIR) 
</code></pre>

<p>Note: <code>pushd</code> and <code>popd</code> are Bash builtins. The comments made in the above code snippet are not particularly appropriate, it depends on your scripting knowledge.</p>

<h2>Conclusion</h2>

<p>Using a shell script to update your MediaWiki installation may be good enough by making the suited changes.</p>

<hr>

<h2>M4 macros</h2>

<pre class="lang-none prettyprint-override"><code>define(`MEDIAWIKI_SITE', `https://releases.wikimedia.org/mediawiki')dnl
define(`MEDIAWIKI_VERSION', `1.33')dnl
define(`MEDIAWIKI_RELEASE', `MEDIAWIKI_VERSION.1')dnl
define(`MEDIAWIKI_SOURCE', `"MEDIAWIKI_SITE/MEDIAWIKI_VERSION/mediawiki-core-MEDIAWIKI_RELEASE.tar.gz"')dnl
define(`MEDIAWIKI', defn(`MEDIAWIKI_SOURCE'))dnl
define(`DESTDIR', `/tmp/some_directory')dnl
</code></pre>

<p>We may define some m4 macros (it is just an example).</p>

<pre><code>#!/bin/bash

echo 'wget MEDIAWIKI -O - | tar -xzv --strip-components 1 -C DESTDIR'
</code></pre>

<p>M4 is then used to substitute the macros in the shell script.</p>

<pre><code>cat macros.m4 mediawiki.bash | m4 | bash
</code></pre>
    </div>