<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a real-world code review: Code should be correct, maintainable, robust, reasonably efficient, and, most importantly, readable.</p>

<hr>

<p>The Go programming language was designed for simplicity and readability. Why did you write:</p>

<pre><code>type runLength struct {
    enc, dec func(string) string
}

func newRunLength() *runLength {
    return &amp;runLength{
        enc: func(input string) string {
            var result strings.Builder
            for len(input) &gt; 0 {
                firstLetter := input[0]
                inputLength := len(input)
                input = strings.TrimLeft(input, string(firstLetter))
                if counter := inputLength - len(input); counter &gt; 1 {
                    result.WriteString(strconv.Itoa(counter))
                }
                result.WriteString(string(firstLetter))
            }
            return result.String()
        },
        dec: func(input string) string {
            var result strings.Builder
            for len(input) &gt; 0 {
                letterIndex := strings.IndexFunc(input, func(r rune) bool { return !unicode.IsDigit(r) })
                multiply := 1
                if letterIndex != 0 {
                    multiply, _ = strconv.Atoi(input[:letterIndex])
                }
                result.WriteString(strings.Repeat(string(input[letterIndex]), multiply))
                input = input[letterIndex+1:]
            }
            return result.String()
        }}
}

func (rl runLength) encode(input string) string {
    return rl.enc(input)
}

func (rl runLength) decode(input string) string {
    return rl.dec(input)
}

func RunLengthEncode(input string) string {
    return newRunLength().encode(input)
}

func RunLengthDecode(input string) string {
    return newRunLength().decode(input)
}
</code></pre>

<p>when a simpler, more readable form is:</p>

<pre><code>func RunLengthEncode(input string) string {
    var result strings.Builder
    for len(input) &gt; 0 {
        firstLetter := input[0]
        inputLength := len(input)
        input = strings.TrimLeft(input, string(firstLetter))
        if counter := inputLength - len(input); counter &gt; 1 {
            result.WriteString(strconv.Itoa(counter))
        }
        result.WriteString(string(firstLetter))
    }
    return result.String()
}

func RunLengthDecode(input string) string {
    var result strings.Builder
    for len(input) &gt; 0 {
        letterIndex := strings.IndexFunc(input, func(r rune) bool { return !unicode.IsDigit(r) })
        multiply := 1
        if letterIndex != 0 {
            multiply, _ = strconv.Atoi(input[:letterIndex])
        }
        result.WriteString(strings.Repeat(string(input[letterIndex]), multiply))
        input = input[letterIndex+1:]
    }
    return result.String()
}
</code></pre>

<hr>

<p>Go was designed and implemented to be reasonably efficient. Your code looks inefficient.</p>

<p>For example,</p>

<p>baduker:</p>

<pre><code>$ go test -bench=. -benchmem -run=!
goos: linux
goarch: amd64
BenchmarkEncode-4    614804   1936 ns/op   464 B/op   27 allocs/op
BenchmarkDecode-4    844690   1446 ns/op   256 B/op   18 allocs/op
$ 
</code></pre>

<p>versus peterSO:</p>

<pre><code>$ go test -bench=. -benchmem -run=!
goos: linux
goarch: amd64
BenchmarkEncode-4   3543656    342 ns/op   104 B/op    4 allocs/op
BenchmarkDecode-4   2717763    460 ns/op   216 B/op    7 allocs/op
$ 
</code></pre>

<p><code>benchmark_test.go</code>:</p>

<pre><code>package encode

import (
    "testing"
)

func BenchmarkEncode(b *testing.B) {
    for N := 0; N &lt; b.N; N++ {
        RunLengthEncode("AABCCCDEEEE")
        RunLengthEncode("WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB")
    }
}

func BenchmarkDecode(b *testing.B) {
    for N := 0; N &lt; b.N; N++ {
        RunLengthDecode("2AB3CD4E")
        RunLengthDecode("12WB12W3B24WB")
    }
}
</code></pre>

<p>peterSO <code>run_length_encoding.go</code>:</p>

<pre><code>package encode

import (
    "strconv"
)

func RunLengthEncode(s string) string {
    e := make([]byte, 0, len(s))
    for i := 0; i &lt; len(s); i++ {
        c := s[i]
        j := i + 1
        for ; j &lt;= len(s); j++ {
            if j &lt; len(s) &amp;&amp; s[j] == c {
                continue
            }
            if j-i &gt; 1 {
                e = strconv.AppendInt(e, int64(j-i), 10)
            }
            e = append(e, c)
            break
        }
        i = j - 1
    }
    return string(e)
}

func RunLengthDecode(s string) string {
    d := make([]byte, 0, len(s))
    for i := 0; i &lt; len(s); i++ {
        n := 0
        for ; i &lt; len(s) &amp;&amp; (s[i] &gt;= '0' &amp;&amp; s[i] &lt;= '9'); i++ {
            n = 10*n + int(s[i]-'0')
        }
        if i &lt; len(s) {
            c := s[i]
            for ; n &gt; 1; n-- {
                d = append(d, c)
            }
            d = append(d, c)
        }
    }
    return string(d)
}
</code></pre>

<p>baduker <code>run_length_encoding.go</code>:</p>

<pre><code>package encode

import (
    "strconv"
    "strings"
    "unicode"
)

type runLength struct {
    enc, dec func(string) string
}

func newRunLength() *runLength {
    return &amp;runLength{
        enc: func(input string) string {
            var result strings.Builder
            for len(input) &gt; 0 {
                firstLetter := input[0]
                inputLength := len(input)
                input = strings.TrimLeft(input, string(firstLetter))
                if counter := inputLength - len(input); counter &gt; 1 {
                    result.WriteString(strconv.Itoa(counter))
                }
                result.WriteString(string(firstLetter))
            }
            return result.String()
        },
        dec: func(input string) string {
            var result strings.Builder
            for len(input) &gt; 0 {
                letterIndex := strings.IndexFunc(input, func(r rune) bool { return !unicode.IsDigit(r) })
                multiply := 1
                if letterIndex != 0 {
                    multiply, _ = strconv.Atoi(input[:letterIndex])
                }
                result.WriteString(strings.Repeat(string(input[letterIndex]), multiply))
                input = input[letterIndex+1:]
            }
            return result.String()
        }}
}

func (rl runLength) encode(input string) string {
    return rl.enc(input)
}

func (rl runLength) decode(input string) string {
    return rl.dec(input)
}

func RunLengthEncode(input string) string {
    return newRunLength().encode(input)
}

func RunLengthDecode(input string) string {
    return newRunLength().decode(input)
}
</code></pre>
    </div>