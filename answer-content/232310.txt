<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here on Code Review, we tend to not look at off-site code. So I'll be reviewing the functions I see, and this'll become a partial answer once you paste all your code.</p>

<h3>Globals</h3>

<p>Generally, the way to avoid them is to simply take more arguments to your function. Any function of the form:</p>

<pre class="lang-py prettyprint-override"><code>def get_point(letter):
    """Give player 100 points for getting the correct letter"""
    global points
    # Stuff happens...
</code></pre>

<p>can be refactored as:</p>

<pre class="lang-py prettyprint-override"><code>def get_point(letter, points):
    """Give player 100 points for getting the correct letter"""
    # Stuff happens...
</code></pre>

<p>However, that's not the only global you're using. The other one is shown here:</p>

<pre class="lang-py prettyprint-override"><code>    if letter in characters:
</code></pre>

<p>Characters is not found in the local scope, so it's a global. Judging by the name, it's probably a constant, and global constants can be perfectly fine. However, in python we tend to mark them by naming convention with ALL_CAPS_AND_SOMETIMES_UNDERSCORES. So that should be:</p>

<pre class="lang-py prettyprint-override"><code>    if letter in CHARACTERS:
</code></pre>

<p>with of course the global constant renamed appropriately as well.</p>

<p>You'll also need to return the points value, as you want to mutate it. More on this in a sec.</p>

<h3>Code Duplication</h3>

<p>Is generally a bad thing. You're doing:</p>

<pre class="lang-py prettyprint-override"><code>    if letter in CHARACTERS:
        points += 100
        print('Points earned: {}'.format(points))
    else:
        print('Points earned: {}'.format(points))
</code></pre>

<p>Where you probably should be doing:</p>

<pre class="lang-py prettyprint-override"><code>    if letter in CHARACTERS:
        points += 100
    print(f'Points total: {points}')  # &lt;-- Python 3.6+
    return points
</code></pre>

<p>I've also included an f-string, usable from python 3.6 onwards. They're awesome. It's basically the same as <code>str.format(stuff)</code>, but it's shorter and more readable.</p>

<p>I've also clarified your message. It's not the amount of points earned, it's total points. You should also return the points value, so you can use it further. So you can now use the function from the outside like this:</p>

<pre class="lang-py prettyprint-override"><code>points = get_point(letter, points)
</code></pre>

<p>And you'll update the point value outside of your function.</p>
    </div>