<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The test cases you give are very good. They cover all important normal cases and also the corner cases.</p>

<p>One bad thing is that you, as a human, have to inspect the test output to see whether the test still succeeds. You should rewrite your test to an automated unit test. For that, you need to add <a href="https://junit.org/junit5/" rel="nofollow noreferrer">JUnit</a> to your project, and I also recommend <a href="https://joel-costigliola.github.io/assertj/" rel="nofollow noreferrer">AssertJ</a>. Using these tools, your test class might look like this:</p>

<pre><code>package proceduralstring;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import org.junit.jupiter.api.Test;

public class ProceduralStringCreatorTest {

    @Test
    void test() {
        assertThat(ProceduralStringCreator.getFirst()).isEqualTo("A");
        assertThat(ProceduralStringCreator.getFirst(5)).isEqualTo("AAAAA");

        assertThat(ProceduralStringCreator.getNext("A")).isEqualTo("B");
        assertThat(ProceduralStringCreator.getNext("AA")).isEqualTo("AB");
        assertThat(ProceduralStringCreator.getNext("AAA")).isEqualTo("AAB");
        assertThat(ProceduralStringCreator.getNext("A9")).isEqualTo("BA");
        assertThat(ProceduralStringCreator.getNext("Adhs3hdfh9")).isEqualTo("Adhs3hdfiA");
        assertThat(ProceduralStringCreator.getNext("9")).isEqualTo("AA");
        assertThat(ProceduralStringCreator.getNext("99")).isEqualTo("AAA");
        assertThat(ProceduralStringCreator.getNext("Aas9s99")).isEqualTo("Aas9tAA");
        assertThat(ProceduralStringCreator.getNext("9z9999")).isEqualTo("90AAAA");
        assertThat(ProceduralStringCreator.getNext("9Z9999")).isEqualTo("9aAAAA");

        assertThatThrownBy(() -&gt; ProceduralStringCreator.getNext("AUHR(#H"))
                .isInstanceOf(BadFormatException.class)
                .hasMessage("String contains illegal characters.");
    }
}
</code></pre>

<p>You can see that the code is similar to your existing code.</p>

<p>I renamed the class to <code>ProceduralStringCreatorTest</code> so that it matches exactly the class that it is testing.</p>

<p>The nice thing about this test is that you get an empty output if everything succeeds. No manual inspection necessary. And if a test fails, you get a clear error message about the expected and the actual value.</p>

<hr>

<p>Now to your main code. I don't like the name <code>ProceduralStringCreator</code>. First, I don't understand the word <code>Procedural</code>. I would remove that word. And instead of <code>StringGenerator</code>, I'd prefer <code>ShortURLGenerator</code>, since that's the only thing this class will be used for in your project.</p>

<p>The Javadoc comment above the <code>public class</code> is not friendly to the reader. It should describe in a full sentence what the class does. For example:</p>

<pre><code>/**
 * Generates unique identifiers to be used in short URLs.
 */
</code></pre>

<p>The <code>@author User</code> is useless because it doesn't provide any information. You should either fill in your name or remove that line.</p>

<p>The first <code>getFirst</code> method looks good. I would put a space between the <code>(){</code> at the end of the line, to follow the Java Coding Conventions, which describe how the source code should look.</p>

<p>In the second <code>getFirst</code> method, the parameter name is wrong. It should not be <code>minLength</code> but simply <code>length</code> since the generated string has always exactly this many characters.</p>

<p>In that method, you use the general pattern for building strings out of smaller parts, which is good. In this particular case, you can use alternative code that is even faster but not as general as your code:</p>

<pre><code>public static String first(int length) {
    char[] digits = new char[length];
    Arrays.fill(digits, 'A');
    return new String(digits);
}
</code></pre>

<p>The <code>getNext</code> method is inefficient. Each time it is called it compiles the regular expression <code>[a-zA-Z0-9]+</code>, which is complicated and takes a lot of time. And then, you create a second regular expression for testing the <code>99999</code> case, which is also slow.</p>

<p>When you learned counting as a kid, you did not know about regular expressions, so there must be a computationally simpler way. And indeed, there is one. I'll show you at the end of my answer.</p>

<p>The <code>replaceWithNext</code> method is filled with the characters from your allowed alphabet. This makes the code complicated to read. The simple counting algorithm, as used for decimal numbers, is not as complicated. Again, you'll see at the end.</p>

<p>If you generalize your code for an arbitrary alphabet (maybe you want to leave out 0, O, 1, l, I because they look so similar), it can become much simpler. Here is what I ended up with:</p>

<pre><code>package de.roland_illig;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Calculates the next "number" using an arbitrary alphabet.
 * &lt;p&gt;
 * Note: This counter is not suitable for decimal counting
 * since in decimal numbers, leading digits are not written down.
 */
public class Counter {

    /** All possible "digits" making up the "numbers", from small to large. */
    private final char[] alphabet;

    /**
     * Remembers the value for each "digit" from the alphabet,
     * to quickly find the next "digit". It would also be possible
     * to search where in the alphabet the digit appears, but that
     * would be slower, especially for large alphabets.
     */
    private final Map&lt;Character, Integer&gt; indexes = new HashMap&lt;&gt;();

    public Counter(String alphabet) {
        this.alphabet = alphabet.toCharArray();

        if (alphabet.isEmpty()) {
            throw new IllegalArgumentException("The alphabet must not be empty.");
        }

        for (int i = 0; i &lt; alphabet.length(); i++) {
            char ch = alphabet.charAt(i);
            Integer prev = indexes.put(ch, i);
            if (prev != null) {
                String message = String.format(
                        "Duplicate character '%c' at indexes %d and %d.",
                        ch, prev, i);
                throw new IllegalArgumentException(message);
            }
        }
    }

    /** Returns the smallest "number" of the given length. */
    public String first(int length) {
        char[] digits = new char[length];
        Arrays.fill(digits, alphabet[0]);
        // For a true decimal counter, set digits[0] = alphabet[1] here.
        return new String(digits);
    }

    /** Returns the next "number" after the given number. */
    public String next(String number) {
        char[] digits = number.toCharArray();
        boolean carry = true;

        for (int i = digits.length - 1; i &gt;= 0; i--) {
            char ch = digits[i];
            Integer chIndex = indexes.get(ch);

            if (chIndex == null) {
                String message = String.format(
                        "Invalid character '%c' at index %d.", ch, i);
                throw new IllegalArgumentException(message);
            }

            if (chIndex == alphabet.length - 1) {
                digits[i] = alphabet[0];
                // take the carry over to the next digit
            } else {
                digits[i] = alphabet[chIndex + 1];
                carry = false;
            }
        }

        if (carry) {
            return first(digits.length + 1);
        } else {
            return new String(digits);
        }
    }
}
</code></pre>

<p>And the corresponding test:</p>

<pre><code>package de.roland_illig;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import org.junit.jupiter.api.Test;

class CounterTest {

    private final Counter peano = new Counter("x");
    private final Counter digits = new Counter("0123456789");
    private final Counter alnum = new Counter(""
            + "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            + "abcdefghijklmnopqrstuvwxyz"
            + "0123456789");

    @Test
    void first() {
        assertThat(peano.first(1)).isEqualTo("x");
        assertThat(peano.first(5)).isEqualTo("xxxxx");

        assertThat(digits.first(1)).isEqualTo("0");
        assertThat(digits.first(5)).isEqualTo("00000");
    }

    @Test
    void nextPeano() {
        assertThat(peano.next("")).isEqualTo("x");
        assertThat(peano.next("x")).isEqualTo("xx");
        assertThat(peano.next("xx")).isEqualTo("xxx");
        assertThat(peano.next("xxxxx")).isEqualTo("xxxxxx");
    }

    @Test
    void nextDigits() {
        assertThat(digits.next("")).isEqualTo("0");
        assertThat(digits.next("0")).isEqualTo("1");
        assertThat(digits.next("1")).isEqualTo("2");
        assertThat(digits.next("2")).isEqualTo("3");
        assertThat(digits.next("8")).isEqualTo("9");

        // Note: this is different from traditional decimal counting,
        // where leading zeros are not written out.
        assertThat(digits.next("9")).isEqualTo("00");
        assertThat(digits.next("99999")).isEqualTo("000000");
    }

    @Test
    void nextAlnum() {
        assertThat(alnum.next("")).isEqualTo("A");
        assertThat(alnum.next("A")).isEqualTo("B");
        assertThat(alnum.next("Z")).isEqualTo("a");
        assertThat(alnum.next("z")).isEqualTo("0");
        assertThat(alnum.next("9")).isEqualTo("AA");

        // This is different from traditional decimal counting,
        // where leading zeros are not written.
        assertThat(alnum.next("9")).isEqualTo("00");
        assertThat(alnum.next("99999")).isEqualTo("000000");
    }

    @Test
    void invalidCounter() {
        assertThatThrownBy(() -&gt; new Counter(""))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("The alphabet must not be empty.");

        assertThatThrownBy(() -&gt; new Counter("Duplicates are forbidden."))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Duplicate character 'a' at indexes 6 and 11.");
    }

    @Test
    void invalidNext() {
        assertThatThrownBy(() -&gt; digits.next("a"))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Invalid character 'a' at index 0.");

        // Even if the counter would only have to look at the
        // rightmost zero to increment the complete number,
        // all characters are checked nevertheless.
        assertThatThrownBy(() -&gt; digits.next("123a0000000000000000000"))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Invalid character 'a' at index 3.");

        assertThatThrownBy(() -&gt; digits.next("123a999"))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Invalid character 'a' at index 3.");
    }
}
</code></pre>
    </div>