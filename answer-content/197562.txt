<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Welcome back to C</strong></p>

<p><strong>Binary constants are not part of standard C - yet</strong></p>

<pre><code>// 0b10000000
0x80
</code></pre>

<p><strong>Lack of error detection</strong></p>

<p><code>i += 2;</code>, <code>i += 3</code> or <code>i += 4</code> in <code>utf8_strlen()</code> assumes the characters skipped over are of the proper form <code>0b10......</code></p>

<p>Instead test for that.  <code>utf8_strlen()</code> then needs some way to convey an error.  Perhaps <code>utf8_string_size()</code>, which includes the space needs for a <em>null character</em>.  Then a return of 0 implies error.</p>

<p><strong>Allocation error / missing null character</strong></p>

<p><code>uint32_t* c = malloc(sizeof(uint32_t) * num_chars);</code> does not allocate enough for a terminating <em>null character</em> to make a <em>string</em>.</p>

<p>Rather than allocate to the size of a type, use the size of the referenced object.  It is easier to code right, review and maintain.</p>

<pre><code>// uint32_t* c = malloc(sizeof(uint32_t) * num_chars);
uint32_t* c = malloc(sizeof *c * (num_chars + 1));
if (c == NULL) {
  // TBD Handle out of memory somehow.
  return NULL;
}
...
c[n] = '\0';
</code></pre>

<h2>Bug with 16 bit <code>int/unsigned</code></h2>

<p>Avoid assuming 32 bit <code>int</code>.  <code>text[i] &amp; 0b00000111) &lt;&lt; 18</code> is <em>undefined behavior</em> with 16-bit <code>int</code>.  Further better to use unsigned types with shifting/masking.</p>

<pre><code>#include &lt;stdint.h&gt;

// (text[i] &amp; 0b00000111) &lt;&lt; 18
(text[i] &amp; UINT32_C(0x07)) &lt;&lt; 18
</code></pre>

<p><strong>Use <code>const</code></strong></p>

<p>Using <code>const</code> allows <code>const</code> strings  to be processed and conveys to the user of <code>utf8_strlen()</code> that.  Recall a user of code may only see the header.  It can allows for some optimizations too.</p>

<pre><code>// size_t utf8_strlen(uint8_t* text) {
size_t utf8_strlen(const uint8_t* text) {
</code></pre>
    </div>