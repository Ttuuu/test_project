<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Spacing</h2>

<p>I'd like to see some more blank lines. They help separate code into blocks. Without a blank line here and there, the code looks like a wall of text. As someone who answers questions on Stack Overflow, I can tell you a wall of text is hard to read; I usually just skip such questions. Of course, someone reading your source code may be forced not to skip it, but you want to make it easy.</p>

<h2>Documentation</h2>

<p>Your code is well-organized and clear. With the comments in addition, I can almost forgive the lack of doc strings, yet doc strings are used for more than just the people who read the source code itself. Bots such as pydoc read it too for generating documentation. The comments are no replacement for that. Each function's purpose <em>should</em> be clear without the doc strings, but documentation takes out the guesswork.</p>

<h2><code>operator</code></h2>

<p>I'm glad you're using a dictionary for <code>OP_FUNCS</code>, but you don't need to define your own functions. Python has a built-in module for that sort of thing: <code>operator</code>. You can use it like this:</p>

<pre><code>import operator

OP_FUNCS = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.truediv,
    '^': operator.pow,
}
</code></pre>

<p>If you take a look through that module's documentation, maybe you'll be inspired to add more operators. It's very easy when the functions are already defined for you; you just need to figure out a symbol for it and its place in the order of operations.</p>

<h2>Generators</h2>

<p>You should use generators more often. They are more memory-efficient than lists because each value is generated on the fly instead of needing to remember them all at once.</p>

<p>This is especially useful in <code>has_op()</code>, for example. All you need to do is remove the opening and closing brackets. That changes to using a generator expression instead of a list comprehension. Let's say the first item in <code>tokens</code> is a match. If you use a generator expression, <code>any()</code> will return True right away, and none of the other tokens is even checked. When you use a list comprehension, <code>any()</code> doesn't start to do anything until all tokens have been processed.</p>

<p>It is also useful in <code>eval_tokens</code> when you are using <code>has_op</code>. In short, it is rare indeed if a list comprehension is to be preferred over a generator expression when using <code>any()</code>.</p>

<p>You have other functions that might work nicely as generator functions, except that the functions using them all require them to be lists, so that would mean that they would need to use the <code>list</code> function. It might still be a good idea, but it isn't a clear advantage.</p>

<h2>Miscellaneous</h2>

<blockquote>
<pre><code>num = is_num.group(0)
...
length = len(num)
index += length-1
</code></pre>
</blockquote>

<p>The <code>match</code> object has methods for finding the edges of a match. Since you're using <code>.match()</code>, the match is guaranteed to begin at the start of the string, so you can use simply <code>.end()</code>:</p>

<pre><code>index += num.end() - 1
</code></pre>

<blockquote>
<pre><code>if tokens == []:
    return False
</code></pre>
</blockquote>

<p>Instead of creating a blank list to compare to, use the list's boolean value:</p>

<pre><code>if not tokens:
    return False
</code></pre>

<p>This will now work even if <code>tokens</code> is a blank tuple, for example.</p>

<blockquote>
<pre><code>possible_valid_pairs = []
for valid_pair in VALID_PAIRS:
    possible_valid_pairs.append((curr_kind, next_kind) == valid_pair)
if not any(possible_valid_pairs):
    return False
</code></pre>
</blockquote>

<p>Instead of creating a list of comparison booleans, use the built-in keyword:</p>

<pre><code>if (curr_kind, next_kind) not in VALID_PAIRS:
    return False
</code></pre>

<blockquote>
<pre><code>newTokens = []
</code></pre>
</blockquote>

<p>This is the only place in your code that I see a variable using lowerCamelCase. I suppose you had a bad day and you were caught in a moment of weakness. I'll forgive you this time; just make sure it doesn't happen again.</p>

<hr>

<h2>Conclusion</h2>

<p>Despite these criticisms, this is still a very well-written script. It's logical, extendable, organized, and easy to read. There are comments in many places, and most of them are useful explanations that further enhance the readability. This, in short, is a script to be proud of.</p>
    </div>