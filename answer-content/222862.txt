<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Lovely clean readable code - nice.  <code>:-)</code></p>

<p>I don't agree with your bounds-checking philosophy (imposing either run-time overhead or syntactic clutter), but I'll respect your choice.  I find it, um, <em>interesting</em> that although we have bounds checking, we still cheerfully allow our accessors <code>at()</code> and <code>size()</code> to overflow the range of <code>std::size_t</code>.</p>

<p>Review points, in no particular order:</p>

<ul>
<li>It's great that you provide a deduction guide; it seems a waste not to use that for at least one of the <code>dim</code> variables in the demo program!</li>
</ul>

  <ul>
<li><p>I get a compilation failure for the use of <code>Dimension()</code> default constructor:</p>

<pre><code>220508.cpp:204:71: error: cannot deduce template arguments for ‘Dimension’ from ()
     static_assert(std::is_same_v&lt;Dimension&lt;0&gt;, decltype(Dimension())&gt;);
</code></pre>

<p>I think this is just a consequence of using <code>struct</code> initialisation, rather than declaring a constructor.</p></li>
<li><p>It's slightly frustrating that only the <code>()</code> accepts unpacked arguments, and we need to write <code>{</code>..<code>}</code> to construct an <code>index_t</code> when using <code>at()</code> or <code>valid()</code>.</p></li>
<li><p>It's not necessary or particularly useful to mark a default constructor <code>explicit</code> - it can never be a conversion.</p></li>
</ul>
    </div>