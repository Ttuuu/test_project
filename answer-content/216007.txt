<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <ol start="3">
  <li>Am I using <code>async</code>/<code>await</code> properly and following best practices?</li>
  </ol>
</blockquote>

<p>Given how you responded to your own question #1 (i.e. "<em>A: found the answer, <code>await</code> replaces  <code>.then()</code></em>") I feel like you could keep going with this. For instance, the function <code>getFolderItems</code> could be updated similarly:</p>

<blockquote>
<pre><code>async function getFolderItems(folderId, nextMarker) {
    let limit = 1;
    let responseData = await axios({
        method: 'get',
        url: `https://api.box.com/2.0/folders/${folderId}/items?fields=id,name,content_created_at,type&amp;limit=${limit}&amp;usemarker=true&amp;marker=${nextMarker}`,
        headers: {'Authorization': `Bearer ${BOX_TOKEN}`}   
    })
    .then(response =&gt; { return response.data })
    .catch(error =&gt; { return error });
    return responseData;
}
</code></pre>
</blockquote>

<p>The <code>.then()</code> callback feels awkward here, given <code>await</code> is used. You could use a <code>try</code>/<code>catch</code> block instead of the promise-oriented approach. Something like this:</p>

<pre><code>async function getFolderItems(folderId, nextMarker) {
    const limit = 1;
    try {
        const response = await axios({
            method: 'get',
            url: `https://api.box.com/2.0/folders/${folderId}/items?fields=id,name,content_created_at,type&amp;limit=${limit}&amp;usemarker=true&amp;marker=${nextMarker}`,
            headers: {'Authorization': `Bearer ${BOX_TOKEN}`}   
        });
        return response.data; 
    }
    catch (error) {
        return error;
    }
}
</code></pre>

<hr>

<blockquote>
  <ol start="4">
  <li>My javascript is kind of rusty, my background is mostly C#, are there any structural changes I should make to the whole script?</li>
  </ol>
</blockquote>

<p>Well, after a cursory glance I don't see any major structural changes that I would recommend, however I would recommend using <code>const</code> instead of <code>let</code> for any variable that doesn't get re-assigned (as you may have noticed in the re-written sample above) - like <code>limit</code>, <code>responseData</code>, as well as arrays like <code>allItems</code> in <code>getAllFolderItems()</code>, <code>folderIDsToDelete</code> and <code>fileIDsToDelete</code> in <code>filterItems()</code>, since pushing elements into an array does not reassign the value. This will avoid accidental re-assignment.</p>

<p>Why is <code>promises</code> declared with the <code>var</code> keyword in <code>deleteFolders()</code>? While it works, it could be declared with <code>const</code> to avoid accidental re-assignment...</p>

<p>Also, the <code>baseUrl</code> should be a constant, perhaps in all capitals since it doesn't change, and move it to the top with the other pre-defined constants like <code>BOX_TOKEN</code> and <code>DOC_FOLDERID</code>. That way, if you need to update that value, you don't have to hunt for it in the code. Optionally, those constants could be stored in a separate config/environment file.</p>
    </div>