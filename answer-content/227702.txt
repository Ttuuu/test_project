<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>Implementing a Hierarchical State Machine can get really tricky. You have a done a decent job, using both Mealy and Moore concepts. There are a couple of aspects that still require to be addressed further to make this a reusable API:</p>

<ul>
<li>pseudo states (fork, join infrastructure)</li>
<li>(deep) history states (when entering a state with composite states, the default entry might be to enter its last activated state)</li>
<li>exception handling (should you fallback to an error state or recover a history state?)</li>
<li>local vs external vs internal transition (self-transitions can be internal or external, transitioning to substates can be local or external)</li>
<li>there is entry and exit behavior, but no do behavior</li>
<li>triggers should also have specific event data attached</li>
<li>event deferral options (priority and deferral of events)</li>
<li>event conflict resolution if both a state and substate allow to handle the event</li>
<li>dynamic transition flow resolution (based on extended state, transition tables and guards, make a transition plan at runtime)</li>
</ul>

<h3>Extended state</h3>

<p>What I'm really missing is <em>extended state</em>. This is data available to all states in the state machine. Each state should be able to access and change the extended state and consult it in the behavior, transition and auto-transition guards.</p>
    </div>