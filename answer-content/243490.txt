<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General comments</strong></p>

<p>It is rarely necessary to use the <code>this</code> keyword to access member variables (typically this is used to disambiguate between local variables/parameters and member variables that have the same name). So you can remove all of the <code>this-&gt;</code> uses in your code.</p>

<p>Usually the <code>class</code> keyword is kept on the same line as the class name. Visually, putting it on a line of its own splits the declaration up unnecessarily and makes it harder for me to figure out what it is doing. The declaration of the local <code>DataSet_item</code> struct is even harder to figure out.</p>

<p>Use consistent spacing. You have <code>const{</code> in some places (without a space; you can use <code>const {</code>). Elsewhere, you're breaking up type names with spaces (<code>std::vector &lt;std::string&gt;</code>) where normally there is no space between a template name and its parameters. There should be a space between keywords and the <code>(</code> for the expression that follows, and a space between the <code>)</code> and <code>{</code> for blocks.</p>

<p><strong>InputParser class</strong></p>

<p>This <code>InputParser</code> constructor should not take the <code>argc</code> parameter by reference. Just pass it as <code>int argc</code>.</p>

<p>The loop body can be simplified to <code>tokens.emplace_back(argv[i]);</code>. Or you can take advantage of one of vector's constructors with</p>

<pre><code>InputParser(int argc, char **argv): tokens{argv + 1, argv + argc}
{
}
</code></pre>

<p>Usually returning a reference from a function is risky, because if the thing that is referenced is destroyed before the user of the return value is done using it you can access a dangling reference. <code>getCmdOption</code> would be safer if it returned a <code>string</code>, not a <code>string &amp;</code>. It would then avoid the need for constructing a static string object to return if the option isn't found. The downside is having to construct extra string objects but these are relatively cheap.</p>

<p>Use the <code>auto</code> keyword for complicated variable types.  In <code>getCmdOption</code>, you don't need to type out that whole iterator name (which is easy to get wrong). Just use <code>auto itr = std::find(tokens.begin(), tokens.end(), option);</code>. <code>empty_string</code> doesn't need to have that initial value passed, since the default constructor for a string constructs an empty string (<code>static const std::string empty_string;</code>). Although if you change the return type to a string you can dispense with that line and just use <code>return {};</code> or <code>return std::string{};</code>.</p>

<p>Unless you're always working with a narrow editor, there's no real reason to split the return in <code>cmdOptionExists</code> onto two lines. (There is also some discussion on where that operator goes when splitting lines like this; I prefer to put it at the end of the previous line.)</p>

<p><strong>DataSet class</strong></p>

<p>There is no reason to make value parameters const, and you should make use of the constructor initializer list. Variables in the list should be listed in their declaration order, since that is the order the compiler will construct them.</p>

<pre><code>DataSet(std::string fname, std::string out_id, char sub_char, int line_length):
    ll(line_length), sc(sub_char), oid(out_id + '.'), ifn(fname), ofn(std::move(fname))
{
    // ...
}
</code></pre>

<p>Declare variables as close as possible to their initial use. In <code>write_to_file</code>, <code>l</code>, <code>b</code>, and <code>dsi</code> can be declared later. The output stream can be opened in the constructor call, the for loop can use a <a href="https://en.cppreference.com/w/cpp/language/range-for" rel="nofollow noreferrer">ranged-based for loop</a>, and you don't need to check for going past the end for <a href="https://en.cppreference.com/w/cpp/string/basic_string/substr" rel="nofollow noreferrer"><code>substr</code></a>. You can leave the <code>std::</code> off of the <code>endl</code> uses due to <a href="https://stackoverflow.com/questions/8111677/what-is-argument-dependent-lookup-aka-adl-or-koenig-lookup">Koenig lookup</a>:</p>

<pre><code>std::ofstream out{ofn};
if (out.is_open()) {
    for (const auto &amp;dsi: data) {
        out &lt;&lt; dsi.name &lt;&lt; endl;
        for (std::size_t b = 0, len = dsi.seq.size(); b &lt; len; b += ll) {
            out &lt;&lt; dsi.seq.substr(b, ll) &lt;&lt; endl;
        }
    }
} else // ...
</code></pre>

<p>You can omit <code>out.close()</code> since the destructor will do that for you.</p>

<p>In <code>read_file</code>, you can use <code>raw.emplace_back(std::move(str));</code> to avoid making a copy of the string.</p>

<p><code>get_results</code> is doing a bunch of work it doesn't need to. It could do with a better name, as any function name that starts with <code>get</code> can be expected to return a value in some way. It also assumes that <code>data</code> is not empty.</p>

<pre><code>void get_results() {
    if (data.empty()) return;
    auto seq_0 = data[0].seq;
    for (std::size_t n = 1, sz = data.size(); n &lt; sz; ++n) {
        auto &amp;dsi = data[n];
        size_t i = 0;
        for (auto &amp;ch: dsi.seq) {
           if (!isalpha(seq_0[i]))
               ch = sc;
        }
    }
}
</code></pre>

<p><code>get_name</code> will have problems if one or both of the <code>'['</code> or <code>']'</code> characters are not found in the string.</p>

<p><code>cleanup_seq</code> should make use of <a href="https://en.cppreference.com/w/cpp/string/basic_string/erase2" rel="nofollow noreferrer"><code>std::erase</code></a>:</p>

<pre><code>void cleanup_seq(std::string &amp;s) {
    std::erase(s.begin(), s.end(), '\r');
}
</code></pre>

<p><code>make_ofn</code> will misbehave if the filename does not have a period but a directory name earlier in the path does.</p>

<p>In <code>parse_raw</code>, you don't need to assign initial values to <code>dsi.name</code>, <code>dis.seq</code>, or <code>line</code>, since the default string constructor will create an empty string. And the for loop can use the ranged-based for loop mentioned earlier. Rather than assigning an empty string to <code>dsi.seq</code> to clear it, you can use <code>dsi.seq.clear();</code>.</p>

<p><strong>The <code>main</code> function</strong></p>

<p>When processing the <code>"-h"</code> option, you should abort execution (i.e., return) after displaying the help.</p>

<p>Your input parsing assumes that any flag option is followed by a parameter value. This is not error checked. The loop that processes these arguments can get out of sync for bad input (and adding a comment to the <code>i++</code> when skipping a parameter would clear up initial confusion, since it looks like you're double incrementing. You already have all that data in <code>input</code>, so could you take advantage of that?</p>

<p>The final for loop can be a range-based for loop.</p>
    </div>