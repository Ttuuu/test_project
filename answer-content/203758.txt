<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note: I'm assuming that this code works and you seek only 'code quality' improvements. Also, you seem like experienced programmer so I will try not to explain trivial things but please, do ask if you think I didn't state my opinion clearly enough. </p>

<h1>Code notes:</h1>

<h3>General</h3>

<p>No docs on any method or class. While methods are descriptive one might have trouble with for example, what is being updated in <code>Location.update</code>, it might be a name update as well. </p>

<p>In my opinion both <code>readchar</code> and <code>readtoken</code> should be wrapped into some class - a <code>Reader</code> maybe? Advantages of that are (at least) two: you do not clutter global namespace with functions and you could store both inputchannel, state and location as a class variables. </p>

<h3>Imports</h3>

<pre><code>import collections
import io
import sys
</code></pre>

<p>I wouldn't import whole packages. Try to using <code>from X import Y</code> pattern, it is both more descriptive (reader can see <em>why</em> are you using those packages) and also you don't have to repeat yourself (as you do with <code>sys.stdout</code>). However, this is just a matter of preference.</p>

<h3>Global (file) variables</h3>

<p>I tend to move them into separate file and import them. It is mainly because of <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">python's zen</a>: </p>

<blockquote>
  <p>Namespaces are one honking great idea -- let's do more of those!</p>
</blockquote>

<p>Moving your constant's away from the usage helps in the future if you would need to make them configurable - it separates 'implementation' from the usage. </p>

<p>Also, (if you happen to use python 3.4+) it might be beneficial to use <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enums</a> instead. In addition to creating new 'namespace' it also provides a very important feature- your globals will be <strong>constant</strong>.</p>

<h3>Location's init</h3>

<p>I must say that I love a fact that you used <code>name or "&lt;input&gt;"</code>, people tend to check for None with <code>if</code> too much. </p>

<h3>Location's update</h3>

<p>The <code>c</code> variable is not very descriptive, what you probably meant was 'character'/'char' ? </p>

<h3>Location's repr and str</h3>

<p>I personally don't like when people use <code>str.format</code> method it has no advantage over <code>"Location({}, {}, {}, {})".format</code> but is longer. However, if you target your classes for python 3.6+ why not using something even more readable: <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">string interpolation</a>.</p>

<h3>Location's readchar</h3>

<p><s>Instead of returning None I'd raise <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" rel="nofollow noreferrer">StopIterationError</a>. It is because it is the usual thing to do when you want to stop a generator.</s></p>

<p>As @Maarten Fabr√© pointed out, this is no longer valid. Instead, just use <code>return</code> (see <a href="https://www.python.org/dev/peps/pep-0479/#explanation-of-generators-iterators-and-stopiteration" rel="nofollow noreferrer">Explanation of generators, iterators, and StopIteration</a> )</p>

<h3>readtoken</h3>

<ul>
<li>In my opinion, this method is too long, I'd split it based on state, after each <code>state is ...</code> you'd call different function. </li>
<li>Depending on your needs it might be useful to use <a href="https://docs.python.org/3/library/os.html#os.linesep" rel="nofollow noreferrer">linesp</a> instead of "\n". </li>
<li>Do not raise generic Exception, more on that later. </li>
<li>As previously, do not return none - raise an exception instead. </li>
</ul>

<h3>Lexer's init</h3>

<ul>
<li><p>In this case a documentation would be lovely, particularly to understand what <code>inputchannel</code> is and what API must it comply to. </p></li>
<li><p>In <code>Location("&lt;input&gt;", 0, 1, 0)</code> it would be good to name the parameters that you pass so reader wouldn't need to search for signature: <code>Location(name="&lt;input&gt;", pos=0, line=1, col=0)</code>.</p></li>
<li><p>What does <code>for token in Lexer(sys.stdin):</code> mean? Will the reader understand what does it mean to 'iterate over lexer' ? My preference would be to rearrange your class to something like <code>for token in lexer.Tokenize(sys.stdin)</code>. </p></li>
</ul>

<h1>Questions</h1>

<h3>Q1</h3>

<p>You are right, recursion is generally discouraged in python. In general, what I saw in similar use cases people do tend to scan char by char as you did. I don't have much experience in writing lexers so I am not sure if my advice will be at all helpful but let's try:</p>

<ul>
<li>Small functions are your friend - the more logic you abstract the more complexity you can put in. For example, instead of doing <code>x == '['</code> try <code>isLeftBracket(x)</code>, in the future you might introduce <code>isBrachet</code> which will call <code>isLeftBracet or isRightBracket</code>. This is just a silly example but I hope you get the point. </li>
<li>Instead of recursion how about using a stack of states? It is a general practice to change recursive code to iterative one. </li>
<li>You could abstract your class to a state machine (basically wrapping everything as I mentioned at the beginning), this will help in managing the state and include many events as functions. </li>
<li>First consume and then validate multiple characters given a state. For example, if you know that if current state is A and you encounter character <code>[</code>, next few characters are going to be some specific data</li>
</ul>

<p>you could do this:</p>

<pre><code>if state == A and current_character == '[':
        consume_dataX()
def consume_dataX():
    a = ''
    while condition(current_character):
        a += readchar()
        current_character = readchar()
    validate(a) 
</code></pre>

<p>Real life example would be parsing a function (<code>foo(int x, int y)</code>):</p>

<pre><code>if state == ParsingFunction and current_character == "(":
   argument_vector = consume_until(')')
</code></pre>

<p></p><h3>Q2</h3> It is completely fine to think of characters as a length 1 strings. You can think of it like this: for a given string <code>a</code> operator <code>[]</code> is a slicing operator which means that <code>a[1]</code> slices the string and is short for <code>a[1:2]</code>. Also, keep in mind that in reality <code>char</code> type is just a <code>byte</code> (or something similar) therefore, there is no need for a special treatment.

<p></p><h3>Q3</h3> I cannot stress this enough, in my opinion: <strong>DO NOT RAISE GENERIC EXCEPTIONS</strong> unless you have completely no idea what happened. 

<p>Person using your class will have to do the following:</p>

<pre><code>try:
    # some code
except Exception as ex:
    # handle
</code></pre>

<p>which is inconvenient for many reason. If you want to know more see this <a href="https://stackoverflow.com/a/24065533/3809977">SO question</a>. </p>

<p></p><h3>Q4</h3> Already answered above. 
    </div>