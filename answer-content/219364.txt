<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code Organization</h1>

<p>Assigning fields in the method. Intialize your fields in the constructor. It isn't clear what <code>numIslands</code> does. The public API lies. It pretends to be a "service" whereas it actually is a "method object". Services should be immutable.</p>

<p>API says I could use this class like so:</p>

<pre><code>final NumberOfIsland n = new NumberOfIsland();
testCases.parallelStream().map(grid -&gt; n.numIslands(grid));
</code></pre>

<p>Intended usage is actually:</p>

<pre><code>testCases.parallelStream().map(grid -&gt; new NumberOfIsland().numIslands(grid));
</code></pre>

<ul>
<li>Constants are defined in local scope, and later also used hardcoded. If you define a constant replace all instances of the literal value. for example <code>char LAND = '1'</code> should be a static field and later <code>'1'</code>s also should be changed.</li>
</ul>

<p>Whereas you can omit MIN_ROW, because you can assume everyone knows 0 is the minimum array index.</p>

<ul>
<li><code>doDFSStartingFromNode(final int i, final int j)</code>:
In this method you create a <code>Coordinates</code> from <code>i</code>, <code>j</code> and never use them again. <code>i</code>, <code>j</code> are not a node, they are a pair of indices. You can pass the object into the method instead. such that the signature can now become <code>doDFS(Node startNode)</code>.</li>
</ul>

<h2>Naming problems</h2>

<ul>
<li>Classes are nouns, methods are verbs etc. These are not hard rules but even if you violate them, you should name your code artefacts such that your code reads well regardless.
Compare:</li>
</ul>

<blockquote>
  <p>A <code>NumberOfIsland</code> consists of a <code>gridArray</code>, an <code>isVisited</code> matrix,
  ...</p>
</blockquote>

<p>with </p>

<blockquote>
  <p>A <code>NumberOfIslandsSolver</code> consists of a <code>grid</code>, a <code>visited</code> matrix,
  ...</p>
</blockquote>

<ul>
<li><code>Coordinates</code> Do not use plural names unless it's a collection. And this is not a collection, you cannout add a coordinate to coordinates etc. (Even when a class is a collection, name it such that reader can guess its behavior, CoordinateSet, CoordinateQueue etc.) Location, Position, or Cell, or GridCell etc are better names for this class.</li>
</ul>

<h2>Redundant code</h2>

<ul>
<li><code>canMoveBottom</code> etc are copy pasted code. and in each of them <code>y+1</code> etc is repeated three times. Factor out repetitive code.</li>
</ul>

<h2>Inefficiencies</h2>

<ul>
<li><p>You should use an <code>ArrayDeque</code> instead of <code>Stack</code>. Don't use synchronized classes unless you really know what you are doing, or it causes poor performance. (Similarly you shouldn't use <code>Vector</code> where an <code>ArrayList</code> will do, <code>StringBuffer</code> where a <code>StringBuilder</code> will do, etc... (Protip: If you encounter a class with synchronized methods in an API, it's either very special purpose or a legacy class kept around for backwards compatibility; and you probably should use something else.)</p></li>
<li><p>You call <code>canMoveX</code> thrice: once in <code>nextAvailablePath</code>, once in <code>isNoMorePathAvailable</code> and once after. Organize your logic such that you shouldn't call that code multiple times.</p></li>
</ul>

<h2>Style</h2>

<ul>
<li><p>If you follow standard java spacing you can lose unnecessary parentheses and <code>if</code>s etc like so:</p>

<pre><code>private boolean canMoveRight(Coordinates peekedCoordinates) {
    int x = peekedCoordinates.x;
    int y = peekedCoordinates.y;
    int newY = y + 1;

    return newY &lt; noOfColumn &amp;&amp; gridArray[x][newY] == '1' &amp;&amp; !isVisited[x][newY];
}
</code></pre></li>
<li><p>Speaking of standard spacing; put a space after keywords <code>if</code>, <code>while</code>, <code>try</code> so they don't look weird.</p></li>
</ul>
    </div>