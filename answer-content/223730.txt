<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions in rough order of decreasing importance:</p>

<ul>
<li><code>eval</code> is evil, and I'm pretty sure you can completely avoid it in your script. Other than a massive gain in sanity, all that <code>sed</code> stuff to escape strings is not going to be necessary if you instead just use plain shell.</li>
<li>Naming is really important, and comments are a good way to detect things which should be renamed.</li>
<li><code>set -o errexit -o nounset -o pipefail</code> would be very handy in this script. Just make sure you're aware of the <a href="https://mywiki.wooledge.org/BashFAQ/105" rel="nofollow noreferrer">caveats</a> (that page is needlessly snarky but has some useful bits, and that site is fantastic).</li>
<li>A simple array is the best way to <a href="https://mywiki.wooledge.org/BashFAQ/050" rel="nofollow noreferrer">build a command</a>. I would thoroughly recommend <em>not</em> building complex commands using a shell script. Instead, run each command as soon as you have all the pieces. Bundling up commands to run isn't going to make things faster; in most cases it'll make things significantly slower by making &gt;50% of the code about <em>building</em> the command rather than just running it.</li>
<li>Nested functions aren't. There are no closures in Bash, so defining a function within another function just makes it harder to read.</li>
<li>In Bash the convention is that uppercase names are reserved for <em><code>export</code>ed</em> variables.</li>
<li>Single use variables can often be inlined without loss of clarity.</li>
<li><p><code>printf</code> is meant to be used with format strings for readability. So</p>

<pre><code>printf "SHA1 for ${cyan}$name${end_format} is ${yellow}$tag${end_format}.\n"
</code></pre>

<p>would normally be written as</p>

<pre><code>printf "SHA1 for %s is %s.\n" "${cyan}${name}${end_format}" "${yellow}${tag}${end_format}"
</code></pre></li>
<li><p><code>local</code> is considered a <em>command</em> for exit code purposes, which means that <code>local foo=[variable or command substitution]</code> only gets the exit code of <code>local</code>, <em>not</em> of the variable or command substitution. So if you start using <code>nounset</code> and the like you should declare variables local <em>before</em> assigning them separately:</p>

<pre><code>deploy() {
    local deploy_name tag
    deploy_name="$1"
    tag="$2"
    â€¦
}
</code></pre></li>
<li><a href="https://www.shellcheck.net/" rel="nofollow noreferrer"><code>shellcheck</code></a> can give you more tips.</li>
</ul>
    </div>