<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The idea is to explore the vertex completely before moving onto the next vertex. For the below adjacency matrix:</p>

<pre><code>test_graph = {
    1: [2, 4, 5],
    2: [3, 6, 7],
    3: [],
    4: [],
    5: [],
    6: [],
    7: []
}
</code></pre>

<p>The output should be <code>1, 2, 4, 5, 7, 6, 3</code>, or <code>1, 5, 4, 2, 3, 6, 7</code>, etc. The idea is that the current vertex should be <strong>completely explored</strong> before moving onto the next vertex. In addition, <strong>connected vertices can occur in any order</strong>. </p>

<p>Below code provides the correct sequence</p>

<pre><code>import collections

def bfs(graph, start_vertex):
    visited = set()
    traversal = []
    queue = collections.deque([start_vertex])
    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            visited.add(vertex)
            traversal.append(vertex)
            queue.extend(reversed(graph[vertex]))   # add vertex in the same order as visited
    return traversal

</code></pre>
    </div>