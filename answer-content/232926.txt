<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using a <a href="https://en.wikipedia.org/wiki/Linked_list#Sentinel_nodes" rel="nofollow noreferrer">dummy node</a> is one way to simplify the logic in <code>_Node.from_iterable</code> and <code>LinkedList.remove</code>. We incur a constant-space cost of one extra node, and in return we don't need to write a separate branch of logic to handle the empty/null head case:</p>

<pre class="lang-py prettyprint-override"><code>@dataclass
class _DummyNode(_Node[T]):
    data: Optional[T] = None
    tail: Optional[_Node[T]] = None
</code></pre>

<pre class="lang-py prettyprint-override"><code>@staticmethod
def from_iterable(iterable: Iterable[T]) -&gt; Tuple[Optional[_Node[T]], Optional[_Node[T]], int]:
    """Constructs a node-list from an iterable.
    Returns a tuple of (head, last_node, list_length). head and last_node will be None if iterable is empty."""
    dummy_head: _DummyNode[T] = _DummyNode()
    cur: _Node[T] = dummy_head
    count = 0

    for t in iterable:
        cur.tail = _Node(t)
        cur = cur.tail
        count += 1

    return dummy_head.tail, None if count == 0 else cur, count
</code></pre>

<pre class="lang-py prettyprint-override"><code>class LinkedList(Sequence[T]):
    def __init__(self):
        self._dummy_head: _DummyNode[T] = _DummyNode()
        self._size: int = 0

    def _all_node_iter(self) -&gt; Iterable[_Node[T]]:
        """Iterable over all nodes, including the dummy head node"""
        yield self._dummy_head
        yield from self._node_iter()

    def _node_iter(self) -&gt; Iterable[_Node[T]]:
        """Iterable over only the real nodes"""
        cur = self._dummy_head.tail
        while cur:
            yield cur
            cur = cur.tail

    # [...]

    def remove(self, elem: T) -&gt; None:
        for prev, cur in zip(self._all_node_iter(), self._node_iter()):
            if cur.data == elem:
                prev.remove_next()
                self._size -=1
                return
        raise ValueError(f"{elem} not in list.")

    # [...]
</code></pre>

<p>This does involve changing the design of <code>LinkedList</code> to use <code>_dummy_head</code> instead of <code>_head</code>, but other methods like <code>insert</code> can be refactored with simpler logic in a similar way.</p>
    </div>