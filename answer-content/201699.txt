<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Note that this code will <strong>not</strong> work on any non-ASCII strings. These are more and more common, especially considering the global community we are a part of (and don't forget emoji ðŸ™ƒ).</p></li>
<li><p>Use <code>Vec&lt;_&gt;</code> to avoid redundantly specifying the inner type when collecting.</p></li>
<li><p>Use byte literals <code>b'x'</code> instead of casting characters to bytes.</p></li>
<li><p>You can match on ranges of characters. I find this aesthetically pleasing.</p></li>
<li><p>Don't collect an iterator into a <code>Vec</code> just to call <code>into_iter</code> on the <code>Vec</code>. Instead, use the original iterator with <code>partition</code>.</p></li>
<li><p>Don't convert from <code>u8</code> to <code>char</code> and back. You only need to make a single transformation.</p></li>
<li><p>There's no need to use the turbofish with the final <code>collect</code> since it's being returned and the type can be inferred.</p></li>
<li><p>There's no need to call <code>into_iter</code> for <code>zip</code>'s argument, it's implied because it takes an <code>IntoIterator</code>.</p></li>
<li><p>Instead of partitioning into vectors, just grab two values out of the iterator at a time. Using <code>fuse</code> allows calling <code>next</code> after it's already returned <code>None</code>.</p></li>
<li><p>Your code handles the check of a hex digit twice, leading to the <code>unreachable</code>. Instead, perform the conversion when performing the check.</p></li>
</ol>



<pre><code>fn parse_hex(hex_asm: &amp;str) -&gt; Vec&lt;u8&gt; {
    let mut hex_bytes = hex_asm.as_bytes().iter().filter_map(|b| {
        match b {
            b'0'...b'9' =&gt; Some(b - b'0'),
            b'a'...b'f' =&gt; Some(b - b'a' + 10),
            b'A'...b'F' =&gt; Some(b - b'A' + 10),
            _ =&gt; None,
        }
    }).fuse();

    let mut bytes = Vec::new();
    while let (Some(h), Some(l)) = (hex_bytes.next(), hex_bytes.next()) {
        bytes.push(h &lt;&lt; 4 | l)
    }
    bytes
}
</code></pre>
    </div>