<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As noted in <a href="https://codereview.stackexchange.com/a/229604/98493">another answer</a> by <a href="https://codereview.stackexchange.com/users/25834/reinderien">@Reinderien</a>, some of your functions modify the list in-place and some do not. This is already not so good, but it is exacerbated by the fact that all of your docstrings claim that the function <em>returns</em> a sorted list, indicating that it does not mutate any of the inputs.</p>

<p>If you fix this, e.g.Â by, as a crude hack, making a copy of the list first, you gain immediate improvements to the testability of your code. Suddenly it becomes very easy to e.g. produce a performance comparison of your algorithms:</p>

<p><a href="https://i.stack.imgur.com/QAeLM.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/QAeLM.png" alt="enter image description here"></a></p>

<p>For fairness' sake I added the line <code>input_list = input_list[:]</code> to all functions. I also gave <code>sublist_increment</code> a default value of <code>5</code> as suggested in <a href="https://codereview.stackexchange.com/a/229605/98493">the answer</a> by <a href="https://codereview.stackexchange.com/users/207952/gz0">@GZ0</a> and threw in the built-in <code>sorted</code> function (with a wrapper containing the <code>input_list = input_list[:]</code> line).</p>

<p>A few takeaway points from this:</p>

<ul>
<li>It is hard to beat the built-in sorting function (especially with code written in Python and not C). It is between 3 and 400  times faster than the functions you wrote. For performance critical applications always prefer the built-in function unless you have some weird edge-case and a sorting function optimized for that specific case.</li>
<li>All of your functions seem not to be only slower in absolute terms, but also in relative. The asymptotic behavior looks like it has a different slope than that of <code>sorted</code>, which is <span class="math-container">\$\mathcal{O}(n\log n)\$</span>. As mentioned <a href="https://codereview.stackexchange.com/questions/229598/shell-sort-insertion-sort-bubble-sort-selection-sort-algorithms-python/229688?noredirect=1#comment447014_229688">in the comments</a> by <a href="https://codereview.stackexchange.com/users/207952/gz0">@GZ0</a> your algorithms are all <span class="math-container">\$\mathcal{O}(n^2)\$</span>.</li>
<li>Note that I was limited to lists of length less than about a thousand because otherwise the runtimes would become too long.</li>
<li>The function you call "optimized" bubble sort does not seem to perform any better than the normal bubble sort.</li>
<li>In contrast, the shell sort (optimized insertion sort) does actually perform better than the normal insertion sort.</li>
</ul>
    </div>