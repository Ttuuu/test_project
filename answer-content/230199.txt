<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should look into coroutines.<br>
Coroutines are the Promises from JavaScript and the CompleteableFutures of Java.<br>
It's basically Kotlin handeling the callbacks for you.</p>

<pre><code>suspend fun getString() : String {
    return "t"
}
suspend fun main() {
    val t = getString()
    println(t)
}
//is roughly the same as:
fun getString(lamb: (String)-&gt;Unit){
    lamb("t")
}
fun main() {
    getString{
        println(t)
    }
}
</code></pre>

<p>You don't really need to know the implementation, but just some rules:</p>

<p>suspend functions can only be called from suspend-functions (because of the hidden parameter)<br>
Suspend functions allow you to replace lammbda's with normal code, even try catch blocks!!!</p>

<p>in our case, we can change makeRequest to use suspension functions:</p>

<pre><code>private inline suspend fun &lt;reified T&gt; makeRequest(url: String, p: Parameters) {
    val json = buildPath(url, p)
        .httpGet()
        .awaitObjectResult(jsonDeserializer()).obj()
    Log.i("json", json.toString())
    return deserialize&lt;T&gt;(json.get("results").toString())
}
</code></pre>

<p>change the search with:</p>

<pre><code>suspend fun search(p: Parameters) = makeRequest("$API/search", p, callback)
</code></pre>

<p>then in MainActivity:</p>

<pre><code>class MainActivity : AppCompatActivity(), CoroutineScope by MainScope() {
    override fun onDestroy() {
        cancel() // cancel is extension on CoroutineScope
    }

    //you can compare using launch with having a second thread.
    fun showSomeData() = launch { 
        try {
            val text = XkcdClient(private val main: Activity).search(..)
        } catch (e : Exception) {
            Log.i("failed", "request failed")
            Toast.makeText(
                main,
                "Request Failed!",
                Toast.LENGTH_LONG
            ).show()
        }
    }
}
</code></pre>

<h1>extra dependencies:</h1>

<ul>
<li>implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2'</li>
<li>implementation 'com.github.kittinunf.fuel:fuel-coroutines:'</li>
<li>implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'</li>
</ul>

<h1>extra info</h1>

<ul>
<li><a href="https://medium.com/androiddevelopers/coroutines-on-android-part-i-getting-the-background-3e0e54d20bb" rel="nofollow noreferrer">https://medium.com/androiddevelopers/coroutines-on-android-part-i-getting-the-background-3e0e54d20bb</a></li>
<li><a href="https://kotlinlang.org/docs/reference/coroutines/coroutines-guide.html" rel="nofollow noreferrer">https://kotlinlang.org/docs/reference/coroutines/coroutines-guide.html</a></li>
</ul>
    </div>