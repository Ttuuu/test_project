<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wrote this code with a simpler version. 
At first I created a class to store parsed information.</p>

<pre><code>public class PersonWithMinLoss
{
    public string Name { get; set; }
    public decimal MaxLoss { get; set; }
    private readonly List&lt;decimal&gt; Amounts;

    public PersonWithMinLoss(string currentPersonData)
    {
        var parts = currentPersonData.Split(',');
        this.Amounts = parts[1..]
            .Select(_ =&gt; decimal.Parse(_, NumberStyles.Currency | NumberStyles.Number)).ToList();
        this.Name = parts[0];
        this.MaxLoss = GetMaxLoss();
    }

    private decimal GetMaxLoss()
    {
        decimal maxLoss = int.MinValue;

        for (int i = 0; i &lt; Amounts.Count - 1; i++)
        {
            var loss = Amounts[i] - Amounts[i + 1];
            if (loss &gt; maxLoss) maxLoss = loss;
        }

        return maxLoss;
    }
}
</code></pre>

<p>After that we just have to do several <code>Linq</code> queries. For this case</p>

<pre><code>public static string FindPersonWithBiggestLoss(string[] peopleAndBalances)
    {
        var personsWithMaxLoss = peopleAndBalances.Select(_ =&gt; new PersonWithMinLoss(_));
        var maxValue = personsWithMaxLoss.Max(_ =&gt; _.MaxLoss);
        var personWithMaxLoss = personsWithMaxLoss.Where(x =&gt; (x.MaxLoss - maxValue) &lt; 0.0001m).First();

        return $"{personWithMaxLoss.Name} lost the most money. -Â¤{personWithMaxLoss.MaxLoss}.";
    }
</code></pre>

<p>I stored amounts in <code>List&lt;decimal&gt; Amounts</code> so that we can use it after other operations(Not needed for this specific case).
And in <code>var personWithMaxLoss = personsWithMaxLoss.Where(x =&gt; (x.MaxLoss - maxValue) &lt; 0.0001m).First();</code>, we can use <code>.ToList()</code> instead of <code>.First()</code> to find all the persons with max loss. </p>

<p>In this way, complexity is <code>O(n*m)</code> where n is number of person and m is the number of values each person has.</p>

<p>Alternatively we also can use aggregate funtion to find person of max loss.</p>

<pre><code>var personsWithMaxLoss = peopleAndBalances.Select(_ =&gt; new PersonWithMinLoss(_));
var personWithMaxLoss = personsWithMaxLoss.Aggregate((cur, next) =&gt; (cur == null || cur.MaxLoss &lt; next.MaxLoss) ? next : cur);
</code></pre>
    </div>