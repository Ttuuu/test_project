<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're right that the duplicate code in the sorters looks bad.</p>
<p>To solve this, each sorter should only define the <em>compare</em> function, and all the rest should be done by the enum class. Or not even this. It took me a little while of experimenting until the code compiled, but here it is:</p>
<pre class="lang-kotlin prettyprint-override"><code>enum class AudioRecordSort(
        private val cmp: Comparator&lt;AudioRecordEmpty&gt;
) {
    SortByDate(AudioRecordDateComparator()),
    SortByName(AudioRecordNameComparator()),
    SortBySize(AudioRecordSizeComparator()),
    SortByTime(AudioRecordTimeComparator());

    fun sort(empties: MutableList&lt;AudioRecordEmpty&gt;, asc: Boolean) {
        val cmp = if (asc) cmp else cmp.reversed()
        empties.sortWith(cmp)
    }
}
</code></pre>
<p>I don't think it can get any simpler than this.</p>
<p>I also fixed the type of the <code>empties</code> parameter. You had <code>List&lt;&gt;</code>, which in Kotlin is an <em>immutable</em> list. I changed that to <code>MutableList&lt;&gt;</code>.</p>
<p>I also fixed the <code>reversed</code> call to be <code>reverse</code>. I bet your IDE has warned you about the "unused result of <code>reversed</code>". This in turn means that you didn't test your code thoroughly before posting it here, since otherwise you would have noticed that it doesn't work for <code>isIncrease == false</code>.</p>
<p>Next time please post complete, compilable code. The missing parts for this question are:</p>
<pre class="lang-kotlin prettyprint-override"><code>class AudioRecordEmpty

class AudioRecordDateComparator : Comparator&lt;AudioRecordEmpty&gt; {
    override fun compare(o1: AudioRecordEmpty?, o2: AudioRecordEmpty?) = 0
}

class AudioRecordNameComparator : Comparator&lt;AudioRecordEmpty&gt; {
    override fun compare(o1: AudioRecordEmpty?, o2: AudioRecordEmpty?) = 0
}

class AudioRecordSizeComparator : Comparator&lt;AudioRecordEmpty&gt; {
    override fun compare(o1: AudioRecordEmpty?, o2: AudioRecordEmpty?) = 0
}

class AudioRecordTimeComparator : Comparator&lt;AudioRecordEmpty&gt; {
    override fun compare(o1: AudioRecordEmpty?, o2: AudioRecordEmpty?) = 0
}
</code></pre>
    </div>