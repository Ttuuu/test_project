<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Failing to test whether <code>istream::read()</code> succeeds means that any read failure will lead to computing an incorrect CRC.</p>

<p>There's no need to read the full file into memory, and no need to measure its size in advance - we can read chunks at a time using a sensible size buffer like this:</p>

<pre><code>#include &lt;boost/crc.hpp&gt;

#include &lt;istream&gt;

uint32_t crc32(std::istream &amp;is)
{
    char buf[4096];
    boost::crc_32_type result;

    do {
        is.read(buf, sizeof buf);
        result.process_bytes(buf, is.gcount());
    } while (is);

    if (is.eof()) {
        return result.checksum();
    } else {
        throw std::runtime_error("File read failed");
    }
}
</code></pre>

<p>Notice that we're now using an opened input stream object instead of passing a file name.  We could be even more flexible, passing a pair of iterators - but then we're at a point where the CRC engine just needs a standard algorithm to feed the range into its <code>operator()</code>:</p>

<pre><code>#include &lt;boost/crc.hpp&gt;

#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;istream&gt;
#include &lt;iterator&gt;

uint32_t crc32(std::istream &amp;is)
{
    std::istreambuf_iterator in{is};
    decltype(in) end{};
    boost::crc_32_type result;
    std::for_each(in, end, std::ref(result));

    if (is.peek() == EOF) {
        return result.checksum();
    } else {
        throw std::runtime_error("File read failed");
    }
}
</code></pre>
    </div>