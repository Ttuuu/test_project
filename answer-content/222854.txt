<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Cleaner consumer interface</h2>

<p><strong>WarnIfTrue / WarnIfFalse</strong></p>

<pre><code>.WarnIfTrue(p =&gt; p.Age &gt; 50, "Person is older than 50")
.WarnIfFalse(p =&gt; p.Age &lt; 50, "Person is older than 50")
</code></pre>

<p>I don't see a need to create two methods for this. "if true" and "if false" is a matter of <em>thinking like a programmer</em>, instead of thinking like a consumer. You can achieve the same by only having one function:</p>

<pre><code>.WarnIf(p =&gt; p.Age &gt; 50, "Person is older than 50")
.WarnIf(p =&gt; p.Age &lt; 50, "Person is younger than 50")
</code></pre>

<p>Any developer who wants to use your method and would be choosing between <code>WarnIfTrue</code> and <code>WarnIfFalse</code> can just as well choose to logically invert their lambda.</p>

<p><strong>IsTrue / IsFalse</strong></p>

<p>The same applies here:</p>

<pre><code>.IsTrue(p =&gt; p.FirstName.Length &gt; 3, "First Name is too short")
.IsFalse(p =&gt; p.FirstName.StartsWith("Cos"), "First Name starts with Coo")
</code></pre>

<p>which can be shortened to</p>

<pre><code>.Require(p =&gt; p.FirstName.Length &gt; 3, "First Name is too short")
.Require(p =&gt; !p.FirstName.StartsWith("Cos"), "First Name starts with Cos")
</code></pre>

<p>I used <code>Require</code> instead of <code>Is</code> because in my opinion <code>Is</code> suffers from making it unclear whether the message applies to when the statement is true or when it is false. Using <code>Require</code>, it's clearer that the lambda defines what must be the case, and the message applies to when the requirement is not met.</p>

<p><strong>MustBeNull / NotNull</strong></p>

<pre><code>.NotNull(p =&gt; p.LastName, "LastName is null")
.MustBeNull(p =&gt; p.LastName, "LastName should be null")
</code></pre>

<p>I don't think you need these methods. Compared to the above <code>IsTrue</code>/<code>IsFalse</code> (or <code>Require</code>) methods, all you're providing to the consumer is that they don't have to write their own null check.<br>
Comparatively, the <code>Match</code> method is really bringing something new to the table that would not be trivial to have to write yourself (as the consumer). But a null check is nowhere near complex enough to warrant expanding the interface.</p>

<p>The effort of knowing that these two additional methods exist add more complexity to your consumer's life than writing the null check does. So my suggestion is to stick to what you already had:</p>

<pre><code>.Require(p =&gt; p.LastName == null, "LastName should be null")
.Require(p =&gt; p.LastName != null, "LastName cannot be null")
</code></pre>

<p>Tangentially, since you're checking a string, a null check usually isn't enough anyway:</p>

<pre><code>.Require(p =&gt; String.IsNullOrWhitespace(p.LastName), "LastName should be null")
.Require(p =&gt; !String.IsNullOrWhiteSpace(p.LastName), "LastName cannot be null")
</code></pre>

<hr>

<h2>Keeping it DRY</h2>

<p>Take a good look at these methods:</p>

<pre><code>internal void AddRule(Predicate&lt;T&gt; predicate, string errorMessage)
{
  Func&lt;T, ValidateResult&lt;T&gt;&gt; rule = source =&gt;
  {
    if (predicate(source))
      return new Success&lt;T&gt;(source);
    return new Failure&lt;T&gt;(source, errorMessage);
  };
  m_rules.Add(rule);
}

internal void AddWarning(Predicate&lt;T&gt; predicate, string warningMessage)
{
  Func&lt;T, ValidateResult&lt;T&gt;&gt; rule = source =&gt;
  {
    if (predicate(source))
      return new Success&lt;T&gt;(source);
    return new Warning&lt;T&gt;(source, warningMessage);
  };
  m_rules.Add(rule);
}
</code></pre>

<p>the only difference between them is that you either return a <code>Failure&lt;T&gt;</code> or <code>Warning&lt;T&gt;</code> when the condition is not met. The rest of the logic is the same. This can be abstracted further.</p>

<pre><code>internal void AddRule(Predicate&lt;T&gt; predicate, string message, bool isWarning)
{
    Func&lt;T, ValidateResult&lt;T&gt;&gt; rule = source =&gt;
    {
        if (predicate(source))
            return new Success&lt;T&gt;(source);

        return isWarning
               ? new Warning&lt;T&gt;(source, message)
               : new Failure&lt;T&gt;(source, message);
    };
    m_rules.Add(rule);
}
</code></pre>

<p>The example I gave suffers from a potential OCP weakness. If you expand on the possibilities and add variants to the <code>Success</code>/<code>Warning</code>/<code>Failure</code> pattern, then you're going to have to modify this method.<br>
It is possible to avoid that. However, I consider it quite unlikely as the green/yellow/red principle of error checking is a well-defined principle that is very commonly used.</p>

<p>That being said, if you do want to avoid the OCP weakness, you can do something like</p>

<pre><code>public enum FailureType { Failure, Warning, NuclearLaunch }

internal void AddRule(Predicate&lt;T&gt; predicate, string message, FailureType failureType)
{
    Func&lt;T, ValidateResult&lt;T&gt;&gt; rule = source =&gt;
    {
        if (predicate(source))
            return new Success&lt;T&gt;(source);

        return GetFailureResult(failureType, source, message);
    };
    m_rules.Add(rule);
}

private ValidateResult&lt;T&gt; GetFailureResult(FailureType failureType, T source, string message)
{
    switch(failureType)
    {
        case FailureType.Warning:
            return new Warning&lt;T&gt;(source, message);
        // ...
    }
}
</code></pre>

<p>Other solutions are possible too. However, the focus of this improvement was to DRY all other logic <em>except</em> the "failure object picking" logic, since all other logic was exactly the same.</p>

<hr>

<h2>Extension methods?</h2>

<blockquote>
  <p>And the rules are defined as extension methods as:</p>
</blockquote>

<p>Why are these rules defined as extension methods? Why not just include them in the class?</p>

<p>I get the feeling that you split them up to keep the class shorter. But that's not how/why you should use extension methods. It seems like you're using extension methods as a clever way to hide the additional complexity of your class.</p>

<p>This also leads to a compromise in accessibility (albeit minor). You've defined <code>AddRule</code> and <code>AddWarning</code> as <code>internal</code>. Had you added the extension methods to the class directly, you could've made them <code>private</code>. The difference is that by making them internal, other classes from the same assembly now have access to something they shouldn't have access to.</p>

<p>Following the earlier advice to reduce the methods made available to the consumer, you should end up with a shortened ruleset which makes it well acceptable to add these to the class itself and make the <code>internal</code> methods <code>private</code>.</p>
    </div>