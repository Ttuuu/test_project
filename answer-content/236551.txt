<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>In short programs it can be OK, but in general avoid  writing <code>using namespace std</code>. You'll find plenty of material here and elsewhere on why this is so.</p></li>
<li><p>To promote proper <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" rel="noreferrer">encapsulation of data</a>, both <code>real</code> and <code>imaginary</code> should be declared under <code>private</code>, i.e., not be visible to the outside.</p></li>
<li><p>All of the four member functions that perform arithmetic take on too much responsibility and as a result, are very inconvenient for the user. That is, remember: <em>one function, one responsibility</em>. If you add, then you don't <em>also</em> print. For example, as a user, I just want to use your class for complex arithmetic - I don't want to print every time I do so!</p></li>
<li><p>Your four member functions don't modify the state of the object. This makes the whole class and its functionality quite rigid and strange. As it is, the functionality appears as it should be a collection of four free functions not inside any class (indeed, perhaps your background is in Java where I can imagine this is more common). A more intuitive interface for let's say the addition would be <code>void add(const ComplexNumber&amp; other) { ... }</code>, where the implementation actually adds to <code>real</code> and <code>imaginary</code> of <code>*this</code>. Same for the other three operations.</p></li>
<li><p>If you wanted to get fancy, you could use operator overloading to allow for a natural way to express complex arithmetic for the user.</p></li>
<li><p>It would be useful to add a <code>void print() const { ... }</code> method in case the user wants to print.</p></li>
<li><p>Use an initializer list if you need to write explicit constructors, i.e., write <code>ComplexNumber(double r, double i) : real(r), imaginary(i) { }</code> instead. If you don't, the compiler will call default constructors on the members first which in your case is unnecessary.</p></li>
<li><p>In modern C++, we have the option of using in-class constructors for default values. This is quite handy, i.e., you could have <code>double real {0.0};</code> (similarly for <code>imaginary</code>) if you wanted to support the creation of complex numbers without an explicit constructor call.</p></li>
<li><p>By the way, you don't have to write <code>ComplexNumber a = ComplexNumber(realA, imaginaryA);</code> when it's much cleaner to write <code>ComplexNumber a(realA, imaginaryA);</code>.</p></li>
<li><p>Perhaps you know this, but <a href="https://en.cppreference.com/w/cpp/numeric/complex" rel="noreferrer"><code>std::complex&lt;T&gt;</code></a> does exist if you wanted to do complex arithmetic in a more serious setting.</p></li>
</ul>
    </div>