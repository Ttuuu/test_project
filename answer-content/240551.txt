<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm speechless Sliepen, thanks for your well-crafted answer. This amount of support makes me love the community of programming even more.</p>

<p><strong>My current state of things:</strong></p>

<p><strong>About my namings:</strong>
I used the name <code>fcount</code> as I wanted to have it stand for files and folders as otherwise, the name would be too long. That's why I made the exception to shorten it. I'm still continuing with your more experienced solution for this.
I wrote <code>pathlib</code> into the function name because I have the same function above it with <code>os.walk</code> as this was my first way to try. But <code>os.walk</code> seem to have problems scanning my network drive as it always returned 0 bytes. Therefore I've chosen <code>pathlib</code>. Hope that makes sense.</p>

<p><strong>About my classes:</strong> I'm starting to feel comfortable programming python but as soon as I start to use classes my whole code starts to fall apart and seems to have to be more complex. I know that's just a beginner problem, but as I usually can't solve the issues appearing, I'm careful with that route. I've now rewritten it into a class but facing a few problems now.
I started to try to structure it as you did by writing the file search for-loop into the <code>__init__</code> function but python was then saying it cant return a value from <code>__init__</code> so I created a new method named <code>def get_directory_statistics(self, scan_path):</code>. 
I'm not sure where to input my <code>scan_path</code>, into the <code>__init__</code>or the first method <code>def get_directory_statistics(self, scan_path):</code>.
Your advice to summarize two lines into one, sadly didn't work for me either <code>return size_and_file_count(size_gb, all_types_count, file_count, folder_count)</code>. I couldn't get it to work. It's always saying <code>size_and_file_count</code> is not defined or other Errors.</p>

<p>Optimizing the code: I outlined above why I sadly can't use os.walk for this. So this won't work for me. And C seems at the moment, not like an option as the only programming language I am familiar with is python and I guess it would be a more complex task to program a wrapper and the code itself in <code>C</code>. I think most of it will be I/O bound, yes.</p>

<p>Again I learned a lot from your answer!</p>

<p><strong>Below you'll find my solution after going over all your notes but it's still not fully working.</strong> </p>

<pre><code>class get_size_and_file_count:
    """Gets the total size of a given dir and counts how many folders and files are in the given
        path directory and return a file count, folder count and all non hidden files as a sum"""
    def __init__(self, total_size = 0, non_hidden_files_count = 0, file_count = 0, folder_count = 0):
        self.total_size = total_size
        self.non_hidden_files_count = non_hidden_files_count
        self.file_count = file_count
        self.folder_count = folder_count

    def get_directory_statistics(self, scan_path):
        self.root_directory = Path(scan_path)
        for f in self.root_directory.glob('**/*'):
            if f.is_file():
                self.file_count += 1
                self.total_size += f.stat().st_size
                if not f.name.startswith("."):
                    self.non_hidden_files_count += 1
            if f.is_dir():
                self.folder_count += 1

        directory_statistics = [self.total_size, self.non_hidden_files_count, self.file_count, self.folder_count]
        return directory_statistics

    def print_directory_statistics(self):
        print('Directory path to search:     {}'.format(self.root_directory))
        print('Directory size in GB:         {:.2f}GB'.format(self.total_size / 1.0e9))
        print('Amount of non hidden files:   {}'.format(self.non_hidden_files_count))
        print('Amount of files searched:     {}'.format(self.file_count))
        print('Amount of folders searched:   {}'.format(self.folder_count))


result = get_size_and_file_count()
start_process = result.get_directory_statistics("...")
print_result = start_process.print_directory_statistics()
print(file_count)
</code></pre>
    </div>