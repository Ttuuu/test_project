<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code works well for all the cases. After many tries and tests, I obtain two different ways to write the function.</p>

<p>The first comes from your approach with several changes. I have, in particular, removed the test for foreign characters from the main loop:</p>

<pre><code>public function validBracesEmi($braces) {
    if (!is_string($braces))
        throw new InvalidArgumentException('Not a string');

    if (trim($braces, '(){}[]') !== '')
        throw new InvalidArgumentException('Invalid string'); 

    $stack = array();

    for ($i = 0; $i &lt; strlen($braces); $i++) {
        if ($braces[$i] === ')' || $braces[$i] === ']' || $braces[$i] === '}') {
            $last = array_pop($stack);
            if ($braces[$i] === ')' &amp;&amp; $last !== '(' || $braces[$i] === '}' &amp;&amp; $last !== '{' || $braces[$i] === ']' &amp;&amp; $last !== '[')
                return false;
        } else
            $stack[] = $braces[$i];
    }
    return !$stack;
}
</code></pre>

<p>The second approach is totally different and uses a regex approach. If it uses more memory (~3X) and is a little slower when you try it only one time with a little string (less than 10 characters), it becomes faster when you use it several times (whatever the size of the string) and is more efficient than the other way with long strings whatever the number of attempts. In other words, you need to pay the cost of the regex engine, but only one time.</p>

<pre><code>const BALANCED_BRACES_PATTERN = '~(\((?1)*+\)|\[(?1)*+]|{(?1)*+})*+\z~A';

public function validBracesCaz($str) {
    if (!is_string($str))
        throw new InvalidArgumentException('Not a string');

    if (trim($str, '()[]{}') !== '') 
        throw new InvalidArgumentException('Invalid string');

    if (preg_match(self::BALANCED_BRACES_PATTERN, $str))
        return true;

    $pcre_error = preg_last_error();

    if ($pcre_error === PREG_NO_ERROR)
        return false;

    if ($pcre_error === PREG_BACKTRACK_LIMIT_ERROR) 
        throw new Exception('backtracking limit exhausted.');

    if ($pcre_error === PREG_RECURSION_LIMIT_ERROR)
        throw new Exception('recursion limit exhausted.');
}
</code></pre>
    </div>