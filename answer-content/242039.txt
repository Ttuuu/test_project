<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main issue that will make your code readable is to use <em>template literals</em> instead of <code>'</code> and <code>"</code> string literals when constructing the HTML. Template literals allow for the writing of <em>readable, multiline</em> strings, as well as easy interpolation. For example, the following line:</p>

<pre><code>document.write('&lt;style&gt;:root{ --someVar: ' + someValue + '}&lt;/style&gt;&lt;div&gt;foo&lt;/div&gt;&lt;div&gt;bar&lt;/div&gt;');
</code></pre>

<p>can be written as:</p>

<pre><code>document.write(`
  &lt;style&gt;
    :root {
      --someVar: ${someValue}
    }
  &lt;/style&gt;
  &lt;div&gt;foo&lt;/div&gt;
  &lt;div&gt;bar&lt;/div&gt;
`);
</code></pre>

<p>By following this sort of pattern, your <code>document.write</code> strings become <em>much</em> nicer to read and comprehend.</p>

<p>Other possible improvements:</p>

<p>It's good to use informative variable names that give you a good sense of what the variable holds on sight. For example, if someone else saw the line</p>

<pre><code>var tc = document.getElementById("tcolor").value;
</code></pre>

<p>They probably wouldn't have any idea what <code>tc</code> is supposed to be except by examining where else the <code>tc</code> variable is referenced.</p>

<p>Your current method of getting the value of each input separately is a bit WET, too. You might consider selecting <em>all</em> inputs in the document (or form) at once, somehow. One option is to use <code>querySelectorAll</code>, map each element to its value, then destructure into the variables:</p>

<pre><code>const [
  backgroundColor,
  nukeColor,
  textColor,
  nukeCode,
] = [...document.querySelectorAll('input')].map(input =&gt; input.value);
</code></pre>

<p>That's short and reasonably elegant, but not entirely maintainable if you ever decide to remove/add an input or change their order. You could iterate over the inputs and put their values into an object instead:</p>

<pre><code>const inputValues = {};
for (const input of document.querySelectorAll('input')) {
  inputValues[input.name] = input.value;
}
</code></pre>

<p>Once the user presses submit, they're presented "Confirm to nuke", but don't have any choice in the matter. Consider using <code>window.confirm</code> instead of <code>window.alert</code> to give them the option to cancel (or change the wording to "Nuke launching...").</p>

<p>You create a window with <code>window.open</code> and put into a variable named <code>generateTemplate</code>. That's a confusingly odd name for a <code>window</code> object - consider something like <code>newWindow</code> instead.</p>

<p>Creating a new window like this is a bit odd. If it's required for some reason, that's fine, but <em>usually</em> it would make more sense to stay on the current page and replace the necessary content.</p>

<p>It's usually a good idea to avoid assigning to <code>onclick</code> properties, because they only permit a <em>single</em> listener - if another script assigns to the <code>onclick</code> too, the earlier listener will be lost. Best to use <code>addEventListener</code> instead - even if you don't plan on adding additional listeners, it's a good habit to get into.</p>

<p>Same sort of thing for <code>window.onload</code>. Though, it'd probably be better to listen for the <code>DOMContentLoaded</code> listener, which doesn't wait for images and other media to load first - or, even better, have the initial JS run after the page is loaded to avoid having to handle any such events - either put the script in a separate file and give it the <code>defer</code> attribute:</p>

<pre><code>&lt;script src="myscript.js" defer&gt;
</code></pre>

<p>Or put it at the bottom of the <code>&lt;body&gt;</code>:</p>

<pre><code>  ... page content
  &lt;script src="myscript.js"&gt;
&lt;/body&gt;
</code></pre>

<p><code>document.write</code> is weird to use nowadays. Better to use more trustworthy and modern methods of DOM manipulation, like with <code>document.createElement</code> or <code>insertAdjacentHTML</code> to insert elements. To set the document title, assign to <code>myWindow.document.title</code>.</p>

<p>Inside the created window, creating so much CSS dynamically is odd. If possible, use a <em>separate file</em> for the bulky CSS and link to it. This way, all you have to do dynamically is set the CSS variables:</p>

<pre><code>myWindow.document.body.insertAdjacentHTML('beforeend', '&lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;');
myWindow.document.body.insertAdjacentHTML('beforeend', `
    &lt;style&gt;
    :root {
      background-color: ${inputValues.backgroundColor};
      --main-nuke-color: ${inputValues.nukeColor};
      --main-text-color: ${inputValues.textColor}
    }
    &lt;/style&gt;
`);
</code></pre>

<p>All together, you get:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function renderNuke() {
  const inputValues = {};
  for (const input of document.querySelectorAll('input')) {
    inputValues[input.name] = input.value;
  }
  if (!window.confirm("Confirm To NUKE!")) return;
  const newWindow = window.open("", "_self");
  newWindow.document.title = 'Incoming Nuke!';
  newWindow.document.body.innerHTML = `
    &lt;style&gt;
    :root {
      background-color: ${inputValues.backgroundColor};
      --main-nuke-color: ${inputValues.nukeColor};
      --main-text-color: ${inputValues.textColor}
    }

    .box {
    position: absolute;
    display: block;
    height: 500px;
    width: 500px;
    animation-name: drop;
    animation-duration: 4s;
    animation-iteration-count: infinite;
    animation-direction: normal;
    animation-timing-function: linear;
  }

  .nhead {
    position: relative;
    display: block;
    height: 450px;
    width: 200px;
    border-radius: 50%;
    top: 20%;
    left: 15%;
    background-color: var(--main-nuke-color);
    transform: rotate(45deg);
    z-index: 9;
  }

  .nend {
    position: absolute;
    display: block;
    width: 0;
    height: 0;
    border-top: 100px solid transparent;
    border-right: 100px solid var(--main-nuke-color);
    border-bottom: 100px solid transparent;
    top: 20%;
    left: 50%;
    transform: rotate(-45deg);
  }

  .ntailleft {
    position: absolute;
    display: block;
    width: 0;
    height: 0;
    border-top: 80px solid transparent;
    border-right: 80px solid var(--main-nuke-color);
    border-bottom: 80px solid transparent;
    top: 3%;
    left: 53%;
    transform: rotate(0deg);
  }

  .ntailright {
    position: absolute;
    display: block;
    width: 0;
    height: 0;
    border-top: 80px solid transparent;
    border-right: 80px solid var(--main-nuke-color);
    border-bottom: 80px solid transparent;
    top: 23%;
    left: 73%;
    transform: rotate(270deg);
  }

  .ntailmiddle {
    position: absolute;
    display: block;
    width: 0;
    height: 0;
    border-top: 80px solid transparent;
    border-right: 80px solid var(--main-nuke-color);
    border-bottom: 80px solid transparent;
    top: 10%;
    left: 65%;
    transform: rotate(135deg);
  }

  .text {
    position: absolute;
    display: block;
    font-size: 90px;
    transform: rotate(-90deg);
    top: 35%;
    left: -62%;
    color: var(--main-text-color);
    word-wrap: break-word;
    white-space: nowrap;
    width: 430px;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  div.text:hover {
    overflow: visible;
  }

  @keyframes drop {
    0% {
      top: -50%;
      left: 100%;
    }

    100% {
      top: 100%;
      left: -50%;
    }
  }
  &lt;/style&gt;
  &lt;div class="box"&gt;
    &lt;div class="nhead"&gt;
      &lt;div class="text"&gt;${inputValues.nukeCode}&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="nend"&gt;&lt;/div&gt;
    &lt;div class="ntailleft"&gt;&lt;/div&gt;
    &lt;div class="ntailright"&gt;&lt;/div&gt;
    &lt;div class="ntailmiddle"&gt;&lt;/div&gt;
  &lt;/div&gt;
  `;
}

document.getElementById("nuked").addEventListener('click', renderNuke);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>@import url('https://fonts.googleapis.com/css2?family=Geo&amp;display=swap');
body {
  text-align: center;
  background-color: #cccccc;
  font-family: 'Geo', sans-serif;
  font-size: 30px;
}

.customizerTable {
  margin: auto;
}

.button {
  border: none;
  align-items: center;
  background-color: rgb(204, 204, 204);
  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25), -2px -2px 4px 0 rgba(255, 255, 255, 0.3);
  border-radius: 50px;
  display: flex;
  justify-content: center;
  margin: auto;
  margin-left: 0;
  margin-top: 5%;
  padding: 5%;
  width: 50%;
  cursor: pointer;
  outline: none;
  text-decoration: none;
}

.button:active {
  box-shadow: -2px -2px 4px 0 rgba(255, 255, 255, 0.3) inset, 2px 2px 4px 0 rgba(0, 0, 0, 0.25) inset;
}

.card {
  border: none;
  align-items: center;
  background-color: rgb(204, 204, 204);
  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.25), -2px -2px 4px 0 rgba(255, 255, 255, 0.3);
  border-radius: 50px;
  display: flex;
  justify-content: center;
  margin: auto;
  padding: 10%;
  width: 100%;
}

.customizeField {
  /*TEST 1*/
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  /*TEST 1*/
}

.textbutton {
  border: none;
  align-items: center;
  background-color: rgb(204, 204, 204);
  box-shadow: -2px -2px 4px 0 rgba(255, 255, 255, 0.3) inset, 2px 2px 4px 0 rgba(0, 0, 0, 0.25) inset;
  border-radius: 50px;
  display: flex;
  justify-content: center;
  margin: auto;
  margin-left: 0;
  margin-top: 5%;
  padding: 5%;
  width: 50%;
  cursor: pointer;
  outline: none;
  text-decoration: none;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;table class="customizeField"&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;div class="card"&gt;
        &lt;div&gt;Customize&lt;/div&gt;
        &lt;table class="customizerTable"&gt;
          &lt;tr&gt;
            &lt;td&gt;Background color:&lt;/td&gt;
            &lt;td&gt;&lt;input name="backgroundColor" type="color" value="#80ccff" class="button"&gt;&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;Nuke color:&lt;/td&gt;
            &lt;td&gt;&lt;input name="nukeColor" type="color" value="#262626" class="button"&gt;&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;Text color:&lt;/td&gt;
            &lt;td&gt;&lt;input name="textColor" type="color" value="#e6e600" class="button"&gt;&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;Enter Nuke Code:&lt;/td&gt;
            &lt;td&gt;&lt;input name="nukeCode" class="textbutton" value="#NUKED"&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
      &lt;/div&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a type="submit" value="Submit it!" class="button" id="nuked"&gt;NUKE!&lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</code></pre>
</div>
</div>

    </div>