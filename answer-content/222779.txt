<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The right tool for the job</h2>

<p>Adventure games are data-driven programs.  In the game, you will have objects which have descriptions.  You will have places, which have descriptions, contents, and connections to other locations.  You will have a player, who will have a description, an inventory (contents), and move from location to location.</p>

<p>Inform 7 is an interactive fiction programming language, which allow you to describe the world to the game engine in a natural language, and it will help you build the interactions by providing a standard library of actions, input parsing, etc., and allow someone to play the story.</p>

<p>But if your goal is to learn Python, and this is just a project to work on while you are learning...</p>

<h2>Infinite Recursion</h2>

<p>You game never ends.</p>

<p><code>menu()</code> can call <code>help_menu()</code> which can call <code>help_menu()</code> which can call <code>info_menu()</code> which can call <code>help_menu()</code> which can call <code>intro()</code> which will call <code>village()</code>, which can call <code>home()</code> which can call <code>village()</code> which can call ...</p>

<p>Your stack can become infinitely deep.  Well, actually, it can't; the interpreter will eventually give up and raise an exception if it gets too deep.  You probably will never encounter this is normal game play, but if you ever had a robot tester for the program, it could move back and forth between locations and eventually cause a stack overflow.</p>

<p>You want your functions to <code>return</code> to their caller, eventually.</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>The opposite of DRY code is WET code ... Write Everything Twice.  In your <code>shop()</code> function, you've written almost exactly the same code 4 times!</p>

<pre><code>            if action == "f":
                  if "Fishing poll" in player_inventory:
                      print("I aleady have one!")
                  elif player_gold &gt;= 10:
                      player_inventory.append("Fishing poll")
                      player_gold -= 10
                      print("'Here you go!'")
                      print("You bought a lovely handmade fishing poll.")
                  elif player_gold &lt; 5:
                      print("Sorry you don't have enough for this, kid.")
            elif action == "t":
                  # Almost identical code
            elif action == "g":
                  # Almost identical code
            elif action == "r":
                  # Almost identical code
            else:
</code></pre>

<p>Let's dry this up:</p>

<pre><code>            if action == "f":
                buy("Fishing poll", 10, "lovely handmade fishing pole")
            elif action == "t":
                buy("Tunic", 20, "bulky leather tunic")
            elif action == "g":
                buy("Guitar", 30, "gorgeous guitar")
            elif action == "r":
                buy("Raft", 30, "small wooden raft")
            else:

def buy(item, cost, description):
    global player_gold, player_inventory

    if item in player_inventory:
        print("I already have one!")
    elif player_gold &gt;= cost:
        player_inventory.append(item)
        player_gold -= cost
        print("'Here you go!'")
        print(f"You bought a {description}.")
    else:
        print("Sorry you don't have enough for this, kid.")
</code></pre>

<p>This will fix two bugs:</p>

<ol>
<li>Buying a <code>Tunic</code> will add a <code>Leather Tunic</code> to your inventory, not a <code>Tunic</code>, so you can keep buying a <code>Tunic</code> until you run out of money.</li>
<li>A fishing pole cost 10 gold, but you are only told you can't buy one if you have less than 5 gold.</li>
</ol>

<p>We still repeat ourself for the items and their costs when the shopkeeper describes what you can buy.  So let's keep going:</p>

<pre><code>            store_inventory = {
                'f': ("Fishing poll", 10, "lovely handmade fishing pole"),
                't': ("Tunic", 20, "bulky leather tunic"),
                'g': ("Guitar", 30, "gorgeous guitar"),
                'r': ("Raft", 30, "small wooden raft")
            }

            print("You can buy:")
            for key, item_data in store_inventory.items():
                item, cost, description = item_data
                print(f"   a {item.lower()}({key}) for {cost} gold")
            action = input("&gt; ")

            if action in store_inventory:
                item, cost, description = store_inventory[action]
                buy(item, cost, description)
</code></pre>

<p>This can work for your other bread merchant as well.</p>

<p>Certain player actions are available in every location/scene.</p>

<ul>
<li><code>h</code> - Player health</li>
<li><code>i</code> - Player inventory</li>
<li><code>g</code> - Player gold</li>
<li><code>m</code> - Map</li>
</ul>

<p>With the exception of the map command, these are all identical.  The map command displays different text depending on the location.</p>

<pre><code>def player_commands(action):
    if action == 'h':
        print(f"Heath: {player_health}")
    elif action == 'i':
        print("Inventory:")
        for item in player_inventory:
            print(item)
    elif action == 'g':
        print(f"Gold: {player_gold}")
    elif action == 'm':
        show_map()
    else:
        return False     # Not a Player Command, so not handled
    return True          # Player Command handled
</code></pre>

<p>Now, in the village, or forest, or outskirts, or shop, or river, or cabin, or home, you can use the following, instead of repeating the same 10 lines over and over again:</p>

<pre><code>    if player_command(action):
        pass
    elif action == 'e':
    # etc.
</code></pre>

<h2>Object Orientation</h2>

<p>From your code, we can tell you know how to use strings, lists, functions, loops, and if/elif/else statements.  I introduced a dictionary and a tuple in the store’s inventory, above.  Those, along with classes, are going to make your game easier to write.</p>

<p>Right now you have <code>player_gold</code>, <code>player_inventory</code> and <code>player_health</code>.  3 separate global variables which are all related to the player.  We can encapsulate these into an object.</p>

<pre><code>player = object()
player.health = 100
player.inventory = ["Map"]
player.gold = 50
</code></pre>

<p>This is an ad-hoc object, with 3 members.  Having it has the advantage that you don’t need to pull 3 global variables into various functions, just the one <code>player</code> global.  And since you will never modify the <code>player</code> global (just its contents), you don’t even need <code>global player</code> in any function; it you haven’t defined a local <code>player</code> variable, the function will use the global <code>player</code> automatically.</p>

<p>We can be a bit more structured.  The player is a person, but so it the merchant, the little boy, the farmer, your mother, the friendly woman, Ruby and the man in a black robe.  You fight the man in the black robe, so he should probably have health that can be eroded.  Both you and Ruby have names.  Maybe you should declare a <code>Person</code> class.</p>

<pre><code>class Person:
    def __init__(self, name):
        self.name = name
        self.health = 100
        self.inventory = []
        self.gold = 0
        self.location = None

player = Person("Arris")
player.gold += 50
player.inventory.append("Map")

mother = Person("your mother")

ruby = Person("Ruby")
</code></pre>

<p>The world is full of things.  Things have names.  Things have descriptions.  Things should have a <code>class</code>:</p>

<pre><code>class Thing:
    def __name__(self, name, description):
        self.name = name
        self.description = description

sword = Thing("Sword", "a beautiful and sharp sword")
bread = Thing("Bread", "fresh bread")
</code></pre>

<p>In a similar vein, the world is full of locations.  The locations have names.  The locations have contents.  The locations have connections to other locations.  A location should be a <code>class</code>, and each location should be a member of that class.</p>

<pre><code>class Location:
    def __init__(self, name):
        self.name = name
        self.contents = []
        self.connections = {}

    def remove_item(self, item):
        self.contents.remove(item)

home = Location("at home")
village = Location("in the village")
river = Location("by the river")
outskirts = Location("in the outskirts")

# ... etc ...

home.contents.append(mother)
home.connection['1'] = village
home.connection['2'] = river
# ... etc ...

outskirts.contents.append(sword)
</code></pre>

<p>It may not be immediately obvious, but a <code>Person</code> is a <code>Thing</code>, and a <code>Location</code> is a <code>Thing</code>, so you could could make the <code>Person</code> and <code>Location</code> classes derive from <code>Thing</code>.  The <code>Person</code>’s inventory would be their <code>contents</code>.  If you extend your game, a <code>Thing</code> could be a <code>Container</code> (such as a box), which also has contents ... so you might consider deriving <code>Person</code> and <code>Location</code> from <code>Container</code> which is derived from <code>Thing</code>.  Some class hierarchies will add value; some class hierarchies may just create confusion.  Is a <code>Person</code> really a <code>Container</code>?  Does that add any useful simplifications from a programming point of view?</p>

<p>I mentioned Player actions earlier, which can be invoked anywhere the player is.  These actions could be attached to a Player object:</p>

<pre><code>class Player(Person):
    def __init__(self, name):
        super().__init__(name)

    def perform(self, action):
        if action == 'h':
            print("Health: {self.health}")
        # ... etc
</code></pre>

<p>When the player is in a different locations, the <code>e</code> and <code>t</code> actions behave differently.</p>

<pre><code>         elif action == 'e':
             self.location.explore()
         elif action == 't':
             self.location.talk()
</code></pre>

<p>... and we can attach actions to the <code>Location</code> class:</p>

<pre><code>class Location:

    def explore(self):
        if self.contents:
            print("You see:")
            for item in self.contents:
                print(item)
        else:
            print("You poke around, but don’t find anything interesting")

    def talk(self):
        print("You mutter to yourself.")
</code></pre>

<p>Different locations may have different behaviours.  For example, taking the <code>sword</code> in the <code>outskirts</code> might invoke the wrath of a <code>snake</code>.   (Talking to you mom will get her to heal you.)  So you might want to further specialize the <code>Location</code> class.</p>

<pre><code>class Outskirts(Location):

    def remove_item(self, item):
        if item == sword:
            print("A snake bites you")
            player.health -= 40
        super().remove_item(item)
</code></pre>

<h2>Framework</h2>

<p>Once you have completed your framework for a game, with many objects, many rooms, many actions, and so on, you can create a completely different adventure game by changing the items, descriptions, and triggers.  You might consider loading the world from a structured file, with the same adventure game framework supporting multiple games, by operating on different data.  Of course, this means you have effectively reinvented the Inform7 game engine, mentioned at the start.</p>
    </div>