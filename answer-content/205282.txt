<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, on a general point of style: running methods into each other with no separation is unusual and I find it distracting. If newlines inside methods to separate logical sections improve readability, surely you ought to separate methods too?</p>

<hr>

<blockquote>
<pre><code>    private readonly Func&lt;T, T, bool&gt; m_comparer;
</code></pre>
</blockquote>

<p>It would be more idiomatic to use <code>System.Collections.Generic.IComparer&lt;T&gt;</code>.</p>

<hr>

<blockquote>
<pre><code>    private int m_nextIndex;

    public int Capacity =&gt; m_values.Count;
    public int Count =&gt; m_nextIndex;
</code></pre>
</blockquote>

<p>Why not <code>Count =&gt; m_values.Count</code>? If you want to muck about with explicit capacities, use <code>List&lt;T&gt;</code> instead of <code>IList&lt;T&gt;</code> because it has a <code>Capacity</code> property. But without an explanation justifying the need for capacity, I would ditch it entirely.</p>

<hr>

<blockquote>
<pre><code>    public BinaryHeap(IList&lt;T&gt; values, Func&lt;T, T, bool&gt; comparer) {
        m_comparer = comparer;
        m_values = values;
</code></pre>
</blockquote>

<p>Yikes! I would expect any type of collection to take a copy of the values I pass to initialise it, not to wrap them and modify them.</p>

<p>Coming back to my earlier point about <code>IList&lt;T&gt;</code> vs <code>List&lt;T&gt;</code>, the main implementations of <code>IList&lt;T&gt;</code> are <code>List&lt;T&gt;</code> and <code>T[]</code>. The latter doesn't support resizing, so it's not a suitable type for <code>m_values</code>. I really think you should make <code>m_values = new List&lt;T&gt;(values);</code></p>

<hr>

<blockquote>
<pre><code>    public bool TryPop(out T value) {
        if (0 &lt; Count) {
            value = Peek();
            m_values[0] = m_values[--m_nextIndex];
            m_values[m_nextIndex] = default;
</code></pre>
</blockquote>

<p>Good. Maybe add a comment to say why it's important not to keep the extra reference.</p>

<hr>

<blockquote>
<pre><code>    private void Heapify(int offset) {
        var count = Count;

        while (offset &lt; count) {
            var left = ((offset &lt;&lt; 1) + 1);
            var right = (left + 1);
            var parent = offset;

            if ((left &lt; count) &amp;&amp; m_comparer(m_values[left], m_values[parent])) {
                parent = left;
            }

            if ((right &lt; count) &amp;&amp; m_comparer(m_values[right], m_values[parent])) {
                parent = right;
            }

            if (offset == parent) {
                return;
            }

            Swap(ref offset, ref parent);
</code></pre>
</blockquote>

<p>In <code>Push</code> you minimised the assignments by only storing the moving value at its final destination. Why not do the same here?</p>
    </div>