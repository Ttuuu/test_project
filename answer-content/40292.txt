<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ruby allows -1 as an index that means last, so you don't have to calculate it at all.</p>

<p>Calculating the whole left_sum every time is repeating work since it is always the previous left_sum + arr[index-1] (except for when index = 0). Similarly the right_sum is always the previous right_sum - arr[index].</p>

<p>You don't have to gather all results, so you can terminate early on finding the leftmost solution, or as soon as sum_left &gt; sum_right (assuming there are no negative numbers in arr?) you know there is no solution, so can return -1.</p>

<p>For example (untested)</p>

<pre><code>def find_pivot(arr)
  sum_left = -arr[-1]
  sum_right = arr.inject(:+)
  arr.each_index do |i|
    sum_left  += arr[i-1]
    sum_right -= arr[i]
    if sum_left == sum_right
      return i
    elsif sum_right &lt; sum_left
      # assuming there are no negative numbers we already know there's no solution
      return -1
    end
  end
  return -1 # in case we somehow reach the end without a solution or early termination
end
</code></pre>

<p>Initialising sum_left to <code>-arr[-1]</code> is a trick to save on having to add an if statement to detect and handle the first iteration of the loop differently, since it cancels out the effect of <code>sum_left += arr[0-1]</code> which would make sum_left jump to the value of the last value in the array.</p>
    </div>