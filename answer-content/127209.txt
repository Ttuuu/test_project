<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don't need to define all of those functions because the <a href="https://docs.python.org/3/library/operator.html" rel="nofollow"><code>operator</code></a> module already did, and they happen to have the same names as yours.</p>

<p>You use <code>__name__</code>.  That's great.  Since you won't be defining functions anymore (because of ^^), this file will be completely useless as a module.  Therefore, I probably wouldn't bother with it.  I <em>might</em> define a function to get input and then have a <code>while True</code>:</p>

<pre><code>def get_answer(num1, num2, op):
    ...
if __name__ == '__main__':
    while True:
        try:
            number1 = float(input(...))
            number2 = float(input(...))
        except ValueError:
            print("That is not a number!")
            continue
        operator = input(...)
        answer = get_answer(number1, number2, operator)
        if answer is None:
            print("Invalid operator!")
        else:
            print(answer)
</code></pre>

<p>That's just a rough draft.  I probably wouldn't do that, but it is a possibility.</p>

<p>Never have a bare <code>except</code> unless you are writing your own interpreter.  You should have expectations for what errors you might get.  Let's say you mis-spelled <code>number1</code> and said <code>numberl</code>.  There would be an error, so it would say <code>That is not a number!</code> ... no matter what you type.  What is your expectation?  Of course, it's that the user might type an invalid float.  In that case, use <code>except ValueError:</code></p>

<p>I would use a dictionary for the different operations, and I would use the more standard operator names.  That is, <code>^</code> instead of <code>pow</code>.  I would also tell the user the options at the beginning instead of telling him each time.  Here is the full program:</p>

<pre><code>import operator

operators = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.truediv,
    '%': operator.mod,
    '^': operator.pow,
    '//': operator.floordiv,
    '&gt;': operator.gt,
    '&lt;': operator.lt,
    '=': operator.eq,
    '!=': operator.ne,
    '&gt;=': operator.ge,
    '&lt;=': operator.le,
}

def get_answer(num1, num2, op):
    try:
        return operators[op](num1, num2)
    except IndexError:
        raise ValueError("Invalid operator")

if __name__ == '__main__':
    operator_string = ', '.join(operators)
    print("Valid operators: {}\n".format(operator_string))
    while True:
        try:
            number1 = float(input("Enter the first number: "))
            number2 = float(input("Enter the second number: "))
        except ValueError:
            print("That is not a number!")
            continue
        except (KeyboardInterrupt, EOFError):
            break # exit
        op = input("Enter an operator: ")
        try:
            print(get_answer(number1, number2, op))
        except ValueError:
            print("Invalid operator!")
</code></pre>
    </div>