<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Code review:<br>
1. Your code has a bug here <code>for i in 1..n</code>,<br>
the correct version starts from <strong>zero</strong>: <code>for i in 0..n</code>,<br>
Change your main to the following code and then <code>cargo run</code>:</p>

<pre><code>fn main() {
    let mut xs = vec![
        8, 13, 20, 13, 4, 21, 24, 13, 18, 23, 14, 6, 10, 2, 4, 6, 16, 6, 17, 9, 8, 20, 14, 19, 7,
        9, 18, 0, 18, 1, 8, 10,
    ];
    let mut v = xs.clone();
    v.sort();
    quick_sort(&amp;mut xs);
    assert_eq!(v, xs);
}
</code></pre>

<p>You will see this error:</p>

<pre><code>thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `[0, 1, 2, 4, 4, 6, 6, 6, 7, 8, 8, 8, 9, 9, 10, 10, 13, 13, 13, 14, 14, 16, 17, 18, 18, 18, 19, 20, 20, 21, 23, 24]`,
 right: `[0, 1, 2, 4, 6, 6, 7, 6, 8, 4, 8, 9, 9, 10, 10, 8, 13, 13, 14, 14, 16, 17, 18, 18, 18, 19, 20, 20, 13, 23, 24, 21]`', src/main.rs:25:5
</code></pre>

<ol start="2">
<li><p>Rename <code>i_pivot</code> to <code>j</code>, since it is just an index and your pivot is <code>a[n - 1]</code>.</p></li>
<li><p>Change <code>if n &gt; 0</code> to <code>if n &gt; 1</code> since the slice length should be at least <strong>two</strong>.</p></li>
<li><p>You don't need <code>Ord</code> here, <a href="https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html" rel="nofollow noreferrer"><code>PartialOrd</code></a> is enough (<a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7ad1c81d319d1c3c4d5a2715f3d75569" rel="nofollow noreferrer">try it here</a>):</p></li>
</ol>

<pre><code>fn quick_sort&lt;T: PartialOrd&gt;(a: &amp;mut [T]) {
    let n = a.len();
    if n &gt; 1 {
        let mut j = 0;
        for i in 0..n {
            if &amp;a[i] &lt; &amp;a[n - 1] {
                a.swap(i, j);
                j += 1;
            }
        }
        a.swap(j, n - 1); // pivot
        quick_sort(&amp;mut a[0..j]);
        quick_sort(&amp;mut a[j + 1..n]);
    }
}

fn main() {
    let mut xs = vec![
        8, 13, 20, 13, 4, 21, 24, 13, 18, 23, 14, 6, 10, 2, 4, 6, 16, 6, 17, 9, 8, 20, 14, 19, 7,
        9, 18, 0, 18, 1, 8, 10,
    ];
    let mut v = xs.clone();
    v.sort();
    quick_sort(&amp;mut xs);
    assert_eq!(v, xs);
}

</code></pre>
    </div>