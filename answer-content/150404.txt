<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I coded keeping SOLID principle in mind and here is my code. What did I miss?</p>
</blockquote>

<p>Let's see...</p>

<hr>

<h1>SRP - Single Responsibility Principle</h1>

<blockquote>
  <p>A class should have only one reason to change.</p>
</blockquote>

<p>Violated. The name <code>EmployeeLeave</code> suggests it's a class that just stores some data about an employee-leave but its API says something else - I'm a repository. So what is it? </p>

<p>Your class has two reasons to change:</p>

<ul>
<li>request rules</li>
<li>save the request</li>
</ul>

<h1>OCP - Open/Closed Principle</h1>

<blockquote>
  <p>Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.</p>
</blockquote>

<p>Violated. You have hard-coded all the stored procedure details although you pass a database abstraction via DI. </p>

<p>The user of the <code>IDataBaseService</code> should not know that he's working with a stored procedure or anything else. The user just wants to save his data.</p>

<p>You cannot extend it by using a different storage type. If you remove the stored procedure you break this implementation.</p>

<h1>LSP - Liskov Substitution Principle</h1>

<blockquote>
  <p>Child classes should never break the parent class' type definitions.</p>
</blockquote>

<p>Not relevant.</p>

<h1>ISP - Interface Segregation Principle</h1>

<blockquote>
  <p>The interface-segregation principle (ISP) states that no client should be forced to depend on methods it does not use.</p>
</blockquote>

<p>Violated. As a person who creates leave-requests and implements <code>ILeaveRequest</code> I need to implement the <code>SaveLeaveRequest</code> and <code>FindEmployee</code>. I don't need it. I just want to create a new request. I don't want to know how to save it (at least not here).</p>

<h1>DIP - Dependency Inversion Principle</h1>

<blockquote>
  <p>A. High-level modules should not depend on low-level modules. Both should depend on abstractions.
  B. Abstractions should not depend upon details. Details should depend upon abstractions.</p>
</blockquote>

<p>Violated. <code>SaveLeaveRequest</code> depends on a low level stored procedure although it uses an abstraction <code>IDataBaseService</code>.</p>

<hr>

<h1>Summary</h1>

<blockquote>
  <p>Extensible code to support different annual leave rules for HR departments</p>
</blockquote>

<p>Failed. You need to implement the save/find logic for each leave request. This is a lot of redundant code.</p>

<blockquote>
  <p>Maintainable code to add/change the existing rules without any impact on the other clients</p>
</blockquote>

<p>Failed. The stored procedure call and its details belong to the repository. The user should not know how it's implemented and currently he needs to exactly know the implementation details to be able to use it.</p>

<blockquote>
  <p>Customizable and configurable code for different clients</p>
</blockquote>

<p>Partially met. You started with a data layer but reveal to much details about the storage to the outside world.</p>

<blockquote>
  <p>Exception handling and logging to protect the code and also make support easier
  Following design and OOP principles</p>
</blockquote>

<p>Failed. The <em>empty</em> <code>catch</code> is not exception handling. The error messages are not very helpful. They don't help to solve the problem by giving a reason or a hint how to correct it.</p>

<blockquote>
  <p>Unit testable code</p>
</blockquote>

<p>Partially met. You can inject another data layer but the implementation of the <code>EmployeeLeave</code> will break if the new data layer doesn't support the hard-coded stored procedure.</p>

<hr>

<h1>Solution (Example)</h1>

<p>The interface is a good start but it is too big and it lacks some vital properties that are part of the <code>ProcessLeaveRequest</code> signature but shouldn't be.</p>

<p>The minimal interface should require some basic data and a method to validate this data.</p>

<pre><code>interface ILeaveRequest
{
    int EmployeeId { get; }
    DateTime LeaveStartDate { get; }
    int DayCount { get; }
    void Validate();
}
</code></pre>

<p>You implement it by implementing actually only the <code>Validate</code> method any adding any other dependencies via DI if for example you need to check if an employee can still take a leave.</p>

<p>Notice the new exception types and messages that clearly explain why the request isn't valid.</p>

<pre><code>class VacationRequest : ILeaveRequest
{
    public VacationRequest(IEmployeeRepository employeeRepository, int employeeId, DateTime leaveStartDate, int dayCount) {..}
    public int EmployeeId { get; }
    public DateTime LeaveStartDate { get; }
    public int DayCount { get; }
    public void Validate()
    {
        // check if employee has enough vacation days...
        throw new OutOfVacationException("Employee 123 does not have any more vacation.");

        // check if max employees have vacation...      
        throw new MaxEmployeeOnVactaionExceededException("The maximum number of 3 employees on vacation at the same time reached.");
    }
}
</code></pre>

<p>You can create multiple requests by adding more properties and dependencies for more complex rules - or fewer.</p>

<p>This is just a simple example but in a more complex solution you can have an <code>ILeaveRequestRule</code> that you pass via DI to concrete request as a collection of several rules so that you may extend them too. In such a case each rule would throw a meaningful exception explaining the violation. It all depends how dynamic the system is. If you think you might need to change them often then it would probably by the way to go.</p>

<pre><code>class EmergencyVacationRequest : ILeaveRequest
{
    public EmergencyVacationRequest(IEmployeeRepository employeeRepository, int employeeId, DateTime leaveStartDate, int dayCount) {..}
    public int EmployeeId { get; }
    public DateTime LeaveStartDate { get; }
    public int DayCount { get; }
    public void Validate()
    {
        // check if employee has enough vacation days...
        throw new OutOfVacationException("Employee 123 does not have any more vacation.");

        // other rules might not apply here...
    }
}
</code></pre>

<p>To create all the different leave requests you would write a factory (not included in the example).</p>

<hr>

<p>Finally a simple leave request processor validates each request and saves it in the leave repository.</p>

<pre><code>class LeaveRequestProcessor
{
    public LeaveRequestProcessor(ILeaveRepository leaveRepository) {..}

    public void ProcessLeaveRequest(ILeaveRequest leaveRequst)
    {
        leaveRequst.Validate(); // You might want to catch this somewhere an log it.

        leaveRepository.SaveLeave(
            leaveRequst.EmployeeId, 
            leaveRequst.LeaveStartDate, 
            leaveRequst.DayCount
        );
    }
}
</code></pre>

<p>The leave repository can of course modify various tables so that the leave requests have access to this data if they need to in order to validate their rules.</p>

<hr>

<p>Here are some of the advantages of the new solution:</p>

<ul>
<li>You can create new leave requests at any time without breaking anything with whatever logic you want</li>
<li>You implement only what you really need for a new leave request</li>
<li>You always know what and why it didn't work</li>
<li>You are independent of the storage type</li>
<li>You can test all units by mocking the repositories</li>
</ul>

<hr>

<h2>Appendix - Exceptions vs ValidationResult</h2>

<p>There are various opinions about whether you should use exceptions or validation results for thing like this.</p>

<ul>
<li><a href="https://stackoverflow.com/questions/5230978/is-it-a-good-practice-to-throw-an-exception-on-validate-methods-or-better-to-r">Is it a good practice to throw an exception on Validate() methods or better to return bool value?</a></li>
<li><a href="https://stackoverflow.com/questions/1504302/is-it-a-good-or-bad-idea-throwing-exceptions-when-validating-data">Is it a good or bad idea throwing Exceptions when validating data?</a></li>
</ul>

<p>As a matter of fact I use both patterns. It's sometimes a personal or project preference which one you pick.</p>
    </div>