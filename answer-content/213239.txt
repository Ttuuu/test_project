<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Printing arbitrary data as a table is a nice task of work for a utility function.</p>

<p>Such utility functions are usually defined in a utility class, which looks like this:</p>

<pre><code>public final class Tables {
    private Tables() {}

    public static void print(List&lt;List&lt;String&gt;&gt; table, int spacing) {
        ...
    }
}
</code></pre>

<p>The name of the utility class usually takes the plural form of the main data ingredient. In this case that is a table, therefore <code>Tables</code>. The Java programming environment already defines similar utility classes named <code>Collections</code> and <code>Arrays</code>.</p>

<p>There is one important difference to your current code. All the variables needed by the <code>Tables.print</code> method are passed via parameters. There is no <code>static</code> field anywhere. This allows the <code>print</code> method to be called several times in the same moment and unambiguously lists all the data you have to provide when calling that method.</p>

<p>Citing from your code:</p>

<pre><code>private static void initTable() {
  List&lt;String&gt; row1 = Arrays.asList("Name", "Klaus Ulbrecht", "Dieter", "Ursula");
  List&lt;String&gt; row2 = Arrays.asList("Sex", "male", "male", "female");
  List&lt;String&gt; row3 = Arrays.asList("Age", "12", "14", "16");
  table = Arrays.asList(row1, row2, row3);
}
</code></pre>

<p>You are mixing up the terms <em>row</em> and <em>column</em> here. A <em>row</em> in <code>initTable</code> will later be output as a <em>column</em> in <code>printTable</code>. That's confusing.</p>

<p>Several parts of your <code>printTable</code> method should be changed:</p>

<ul>
<li>The table should be passed as a parameter, instead of being a <code>static</code> field in the <code>Main</code> class.</li>
<li>In the innermost <code>for</code> loop, the complicated expression is calculated several times, which is unnecessary. You should rather count from <code>k</code> downto 0: <code>for (int k = ...; k &gt; 0; k--) { ... }</code></li>
<li>The final <code>System.out.println</code> prints 2 newlines. One of the may or may not be desired. In the latter case, replace the <code>println</code> with <code>print</code>.</li>
</ul>

<p>In the <code>findMaxLengths</code> method:</p>

<ul>
<li>The table should be passed as a parameter, as above.</li>
<li>Instead of the <code>if</code> clause, you can just write <code>maxLength = Math.max(maxLength, value.length());</code></li>
</ul>
    </div>