<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Copying 2D array</h2>

<p>JSON is not for copying data.</p>

<pre><code>const newMatrix = JSON.parse(JSON.stringify(matrix))
</code></pre>

<p>Should be</p>

<pre><code>const newMatrix = matrix.map(row =&gt; [...row]);
</code></pre>

<h2>Naming</h2>

<p>The naming you use is too verbose and gets in the way of readability.</p>

<ul>
<li><p>For 2D data it is common to use <code>row</code>, <code>col</code> or <code>x</code>,<code>y</code> to refer to the coordinates of an item.</p>

<p>As <code>x</code> and <code>y</code> are traditionally ordered with <code>x</code> (column) first and <code>y</code> (row) second 2D arrays don't lend them selves to that naming. It is acceptable to abbreviate to <code>r</code>, <code>c</code> or indexing 2D arrays (within the iterators, not outside)</p></li>
<li><p><code>transpose</code> as a function name is too general. It would be acceptable if transpose included a argument to define how to transpose the array but in this case <code>rotateCW</code> would be more fitting.</p></li>
<li><p>For 2D data the distance from one row to the same position on the next is called the <a href="https://en.wikipedia.org/wiki/Stride_of_an_array" rel="nofollow noreferrer">stride</a></p></li>
<li><p>As the input array is square there is no need to get the <code>stride</code> from the inner array.  <code>const stride = matrix[0].length;</code> should be   <code>const stride = matrix.length;</code></p></li>
</ul>

<h2>Rewriting your solutions</h2>

<p>Both these solutions are <span class="math-container">\$O(n)\$</span> time and space.</p>

<pre><code>function rotateCW(arr) {
    const stride = arr.length;
    const res = arr.map(row =&gt; [...row]);
    for (let r = 0; r &lt; stride; r++) {
        const row = arr[r];
        for (let c = 0; c &lt; stride; c++) {
            res[c][stride - 1 - r] = row[c];
        }
    }
    return res;
};  // &lt;&lt; redundant semicolon. Lines end with ; or } not both
</code></pre>

<p>Be careful when describing a function as declarative. Though the definition is somewhat loose you should make the effort to declare all high level processing as named functions and the imperative code at the lowest level.</p>

<pre><code>const rotateCW = arr =&gt; {
    const rotItem = (r, c, item) =&gt; res[r][arr.length - 1 - c] = item;
    const processRow = (row, r) =&gt; row.forEach((item, c) =&gt; rotItem(c, r, item));
    const res = arr.map(row =&gt; [...row]);
    arr.forEach(processRow);
    return res;
}
</code></pre>

<h2>Functional</h2>

<p>Don't get caught up on declarative, in your past questions you had the focus on functional. You should keep that focus.</p>

<p>In this case the core of the solution is converting a row column reference (or coordinate) into the inverse of the rotation. We rotate CW by replacing the current item by the one 90deg CCW of it. <code>arr[y][x] = arr[stride-1-x][y]</code></p>

<p>The next example is functional and also the smallest code.</p>

<pre><code>const rotateCW = arr =&gt; {
    const rotItem = (r, c) =&gt; arr[arr.length - 1 - r][c];
    const processRow = (row, r) =&gt; row.map((item, c) =&gt; rotItem(c, r));
    return arr.map(processRow);
}
</code></pre>

<p>or as a one liner</p>

<pre><code>const rotCW = arr =&gt; arr.map((row, y) =&gt; row.map((v, x) =&gt; arr[arr.length - 1 - x][y]));
</code></pre>

<h2>The <span class="math-container">\$O(1)\$</span> space solution.</h2>

<p>The <em>"no extra space"</em> simply means that it should be <span class="math-container">\$O(1)\$</span> space complexity. This can be done via the traditional swap,</p>

<pre><code> var a = 1, b = 2;
 const temp = a;
 a = b;
 b = temp;
</code></pre>

<p>Or in ES6+</p>

<pre><code> var a = 1, b = 2;
 [a,b] = [b,a];
</code></pre>

<p>The swap does not have to be just two items but can be over as many as you want (shifting), the only requirement is that only one spare slot is needed to shift all items.</p>

<pre><code>var a = 1, b = 2, c = 3, d = 4;
const temp = a;
a = b;
b = c;
c = d;
d = temp;
</code></pre>

<p>Or in ES6+</p>

<pre><code>var a = 1, b = 2, c = 3, d = 4;
[a, b, c, d] = [b, c, d, a];
</code></pre>

<ul>
<li><p><strong>Note</strong> The ES6 method for swapping, as a source code complexity reduction, is great... </p>

<p><strong>but</strong> the JS engine does not know you are just swapping (or shifting), it creates an array to hold all the items on the right so that it does not overwrite them when assigning the new values. That means that the ES6+ swap is <span class="math-container">\$O(n)\$</span> space complexity.</p></li>
</ul>

<h2>Example</h2>

<p>I come from a very heavy visual related background and x,y are the most logical way to index 2D+ arrays so will use it in this example.</p>

<pre><code>function rotate2DArray(arr) {
    const stride = arr.length, end = stride - 1, half = stride / 2 | 0;
    var y = 0;
    while (y &lt; half) {
        let x = y;
        while (x &lt; end - y) {
            const temp = arr[y][x];
            arr[y][x] = arr[end - x][y];
            arr[end - x][y] = arr[end - y][end - x];
            arr[end - y][end - x] = arr[x][end - y];
            arr[x][end - y] = temp;
            x ++;
        }
        y++;
    }
    return arr;
}
</code></pre>

<p>The above is very unreadable and it pays to put a little order and alignment to the source</p>

<pre><code>function rotate2DArray(arr) {
    const stride = arr.length, end = stride - 1, half = stride / 2 | 0;
    var y = 0;
    while (y &lt; half) {
        let x = y;
        const ey = end - y;
        while (x &lt; ey) {
            const temp = arr[y][x], ex = end - x;
            arr[y ][x ] = arr[ex][y ];
            arr[ex][y ] = arr[ey][ex];
            arr[ey][ex] = arr[x ][ey];
            arr[x ][ey] = temp;
            x ++;
        }
        y++;
    }
    return arr;
}
</code></pre>

<p>Thus the array is rotated in place for <span class="math-container">\$O(1)\$</span> space.</p>
    </div>