<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>Character.success_check</code></h1>

<p>This method can be reduced to two lines</p>

<pre><code>def success_check(self):
    defense = roll_d_x(attack_dice)
    return defense &gt;= defender.mobility
</code></pre>

<p>Since <code>defense &gt;= defender.mobility</code> evaluates to a boolean expression, you can simply return the statement.</p>

<h1><code>roll_d_x()</code></h1>

<p>This method can be reduced to one line</p>

<pre><code>def roll_d_x(max_num):
    return random.randint(1, max_num)
</code></pre>

<h1>Expression vs <code>is True</code> or <code>== True</code></h1>

<p>Instead of checking if an expression is equal to <code>True</code> or <code>False</code>, simply check the expression. It evaluates to a boolean result, and you can go from there:</p>

<pre><code>while player2.turn is True:
</code></pre>

<p>to</p>

<pre><code>while player2.turn:
</code></pre>

<p>For numbers, use <code>==</code> instead of <code>is</code>. <code>is</code> will return True if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>

<h1>Character Class</h1>

<p>Not really sure what the <code>while</code> loop is doing there. If this were to be run, and the loops expression be <code>True</code>, then it'd be an infinite loop, as there's no way to change the state of <code>is_debilitated</code> with the code that's written.</p>

<h1>Reduce Method Calls</h1>

<p>Instead of calling <code>.lower()</code> every time when you check for matches, simply call it on the <code>input()</code> function itself:</p>

<pre><code>user_skill = input("Enter the skill you wish to use: ").lower()
</code></pre>

<h1>Type Hints</h1>

<p>Use type hints to display what types of parameters are accepted, and what type(s) of value(s) are being returned from the function/method.</p>

<p>From this</p>

<pre><code>gain_health(self, amount):
success_check(self):
</code></pre>

<p>to this</p>

<pre><code>gain_health(self, amount: int) -&gt; None:
success_check(self) -&gt; bool:
</code></pre>

<h1>Docstrings</h1>

<p>You should include a docstring at the beginning of every method, class and module you write. This will allow you to express what these are supposed to do, and allows other programmers to more easily understand what the purpose and "function" of the functions are.</p>

<h1>"Main" Method</h1>

<p>There isn't really a main method in python. There is a main guard, however. It's a simple if statement that prevents code from being run if you decide to import this module from other programs. It works like so</p>

<pre><code>if __name__ == '__main__':
    # code here
</code></pre>

<p>"name" will only be "main" in the module that the program is run from.</p>
    </div>