<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template&lt;class C, class T&gt;
auto contains(const C&amp; v, const T&amp; x)
-&gt; decltype(end(v), true)
{
    return end(v) != std::find(begin(v), end(v), x);
}
</code></pre>

<p>Changes:</p>

<ul>
<li>Removed the superfluous check for emptyness.</li>
<li>Parameterized on the container too, so all containers possible.
<ul>
<li>Removed from consideration if <code>v</code> is not a container of some sort.</li>
</ul></li>
<li>Return the condition directly, no need for sticking it into a condition.</li>
</ul>

<p>Of course, if you do many containment-tests on big containers, using an optimized container with optimized algorithms instead of <code>vector</code> might be a good idea, though measure it.</p>

<p>A bit more complicated, but using the container-provided <code>find()</code> for best performance where applicable:</p>

<pre><code>#include &lt;algorithm&gt;

template&lt;class C, class T&gt;
inline auto contains_impl(const C&amp; c, const T&amp; x, int)
-&gt; decltype(c.find(x), true)
{ return end(c) != c.find(x); }

template&lt;class C, class T&gt;
inline bool contains_impl(const C&amp; v, const T&amp; x, long)
{ return end(v) != std::find(begin(v), end(v), x); }

template&lt;class C, class T&gt;
auto contains(const C&amp; c, const T&amp; x)
-&gt; decltype(end(c), true)
{ return contains_impl(c, x, 0); }
</code></pre>
    </div>