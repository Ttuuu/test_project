<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With your <code>ThemesOptions</code> defined as:</p>
<pre><code>public class ThemesOptions {
    public IEnumerable&lt;string&gt; Themes { get; set; }
}
</code></pre>
<p>and Reference #1 <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options#configure-simple-options-with-a-delegate" rel="nofollow noreferrer">Configure simple options with a delegate</a></p>
<pre><code>public static void AddThemes(this IServiceCollection services, Action&lt;ThemesOptions&gt; configureOptions) {
    //Options bound and configured by a delegate
    services.Configure&lt;ThemesOptions&gt;(configureOptions);
}
</code></pre>
<p>Will allow the simple delegate to be used when configuring options services.</p>
<pre><code>//Options bound and configured by a delegate
services.AddThemes(option =&gt; {
    option.Themes = new [] { "Theme1", "Theme2" /*, "SomeOtherTheme" */};
});
</code></pre>
<p>Now assuming an app settings json file like</p>
<pre><code>{
  "option1": "value1_from_json",
  "option2": -1,
  "Themes": [
    "Theme1", "Theme2"
  ]      
}
</code></pre>
<p>and Reference #2 <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options#suboptions-configuration" rel="nofollow noreferrer">Suboptions configuration</a></p>
<p>you defined the following</p>
<pre><code>public static void AddThemes(this IServiceCollection services, IConfiguration configuration) {
    // Bind options using a sub-section of the appsettings.json file.
    services.Configure&lt;ThemesOptions&gt;(configuration.GetSection("Themes"));
}
</code></pre>
<p>and called like</p>
<pre><code>services.AddThemes(Configuration);
</code></pre>
<p>As you rightly stated, it works. Yes. That is because the <code>ThemesOptions</code> class defines a property <code>Themes</code> that holds a collection of strings which would match what <code>GetSection("Themes")</code> would return and thus bind.</p>
<p>Now let's look at the ones that did not work and why they don't</p>
<p>In both cases</p>
<pre><code>services.AddThemes(options =&gt; {
    options = Configuration.GetSection("Themes").Get&lt;ThemesOptions&gt;();
});
</code></pre>
<p>And:</p>
<pre><code>services.AddThemes(options =&gt; Configuration.GetSection("Themes"));
</code></pre>
<p>you are trying to set the value of a provided argument to the delegate which change the value of the object and in the second one, nothing is done with the option provided. When using the delegate option the value from the settings file are overridden by the configured delegate which is why <code>Themes</code> property of injected <code>IOptions&lt;ThemesOptions&gt;</code> is <code>null</code></p>
<pre><code>services.AddThemes(options =&gt; {
    options.Themes = Configuration.GetSection("Themes").Get&lt;ThemesOptions&gt;().Themes;
});
</code></pre>
<p>works because you are populating the members of the passed parameter which was initialized by the options builder to the delegate.</p>
<blockquote>
<p>If this configuration section has a value, that will be used. Otherwise binding by matching property names against configuration keys recursively</p>
<p>Each call to <code>Configure&lt;TOptions&gt;</code> adds an <code>IConfigureOptions&lt;TOptions&gt;</code> service to the service container. When more than one configuration service is enabled, the last configuration source specified wins and sets the configuration value.</p>
</blockquote>
    </div>