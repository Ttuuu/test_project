<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution looks rather map-happy.</p>

<p>It is important to remember for this task that counting higher than 2 of any encountered letter is needless processing as is any processing on any letter after the earliest positioned unique letter.</p>

<p>Also, doing a complete sweep of the input string may be ill-advised if the input string is of <em>considerable</em> length.</p>

<p>Due to not being as well across .js as others here are, I'll post a humble <code>for</code> loop.</p>

<pre><code>function firstNonRepeatedCharacterPosition(string) {
    for (let char, pos, i = 0; i &lt; string.length; ++i) {
        char = string.charAt(i);
        pos = string.indexOf(char);
        if (pos == i &amp;&amp; string.indexOf(char, i + 1) == -1) {
            return pos;
        } 
    }
    return -1;
}

console.log(firstNonRepeatedCharacterPosition('abcbebc'));
</code></pre>

<p>It does make 3 function calls per iteration, but they aren't heavy ones, there is at most only one pass through the string, and early-return programming is in effect.</p>

<ul>
<li>Grab the letter at the incremented position. </li>
<li>Find the earliest occurrence of that letter.</li>
<li>Check if there is a later occurrence of the same letter.</li>
</ul>

<p>The later the unique letter exists (or if there are no unique letters), the more laborious my function is.  On the other hand, if the first letter is unique, then you are finished in just 3 function calls.</p>

<p>p.s. I lack the knowledge to interpret your js code, so I cannot review it beyond saying that it isn't very novice friendly.</p>

<hr>

<p>After Rotora's challenge, I was doubting myself, so I whacked this little battery of tests together:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function MickMacKusa(string) {
    for (let char, pos, i = 0; i &lt; string.length; ++i) {
        char = string.charAt(i);
        pos = string.indexOf(char);
        if (pos == i &amp;&amp; string.indexOf(char, i + 1) == -1) {
            return pos;
        } 
    }
    return -1;
}

function RoToRa(string) {
    for (let char, pos, i = 0; i &lt; string.length; ++i) {
        char = string.charAt(i);
        if (string.indexOf(char, i + 1) == -1) {
            return i;
        } 
    }
    return -1;
}

let table = document.getElementById("test"),
    row;
for (let i = 1; i &lt; table.rows.length; ++i) {
    row = table.rows[i];
    row.cells[3].innerHTML = MickMacKusa(row.cells[0].innerHTML);
    row.cells[4].innerHTML = RoToRa(row.cells[0].innerHTML);
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;table id="test" border="1" cellpadding="4"&gt;
&lt;tr&gt;&lt;th&gt;Input&lt;/th&gt;&lt;th&gt;Letter&lt;/th&gt;&lt;th&gt;Index&lt;/th&gt;&lt;th&gt;MickMacKusa&lt;/th&gt;&lt;th&gt;RoTora&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;abccbcba&lt;/td&gt;  &lt;td&gt;-&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;abcbebc&lt;/td&gt;   &lt;td&gt;a&lt;/td&gt; &lt;td&gt; 0&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;abc&lt;/td&gt;       &lt;td&gt;a&lt;/td&gt; &lt;td&gt; 0&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;aabbc&lt;/td&gt;     &lt;td&gt;c&lt;/td&gt; &lt;td&gt; 4&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;abcba&lt;/td&gt;     &lt;td&gt;c&lt;/td&gt; &lt;td&gt; 2&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;abba&lt;/td&gt;      &lt;td&gt;-&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;abaa&lt;/td&gt;      &lt;td&gt;b&lt;/td&gt; &lt;td&gt; 1&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;aabcbcbca&lt;/td&gt; &lt;td&gt;-&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</code></pre>
</div>
</div>

    </div>