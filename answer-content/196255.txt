<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other possible approach to this problem is to use <code>numpy</code> and it's array operations. </p>

<h2>The proposed solution</h2>

<pre><code>import numpy

def find_longest_substring(input):
    start_indexes = []
    ascii_codes = numpy.array([ord(character) for character in input])
    ascii_codes = numpy.append(ascii_codes,0)

    ascii_diff = (numpy.diff(ascii_codes)&gt;=0).astype(numpy.int)
    parts_ends = numpy.where(numpy.diff(ascii_diff)!=0)[0]+1
    parts_ends = numpy.diff(numpy.hstack((0, parts_ends)))
    max_substring_lenght = parts_ends.max()
    substring_starts = numpy.where(parts_ends==max_substring_lenght)[0]
    for start in list(substring_starts):
        start_indexes.append(sum(parts_ends[0:start]))
    return (max_substring_lenght+1, start_indexes)

(max_lenght, starts) = find_longest_substring('azcbobobegghakl')
print("Longest substring has {0} characters.".format(max_lenght))
for start in starts:
    print(start, max_lenght, s[start:start+max_lenght])
</code></pre>

<h2>Step by step explanation</h2>

<p>First lets take our <code>input = 'azcbobobegghakl'</code> and convert it into <code>numpy</code> array of <a href="https://en.wikipedia.org/wiki/ASCII" rel="nofollow noreferrer">ASCII codes</a> (translation of characters into numbers, <code>a...z</code> characters are in order in ASCII table).</p>

<pre><code>ascii_codes = numpy.array([ord(character) for character in input])
</code></pre>

<p>This Python style in-line loop iterates over all characters in string, and converts each one to it's ASCII representation using built-in <code>ord()</code> function. Now we would like to calculate difference between each neighboring elements of the array to check if next character is in alphabetical order (has same or grater ASCII value) or not (lower ASCII value). To be safe at the end of out input string lets add additional value 0 at the end of our array: ASCII codes for characters <code>a...z</code> are <code>97</code> to <code>122</code> so 0 will not affect the result. Since we want to append value at the end of array, using <code>numpy.append()</code> seems best choice:</p>

<pre><code>ascii_codes = numpy.append(ascii_codes,0)
</code></pre>

<p>Now we use <code>numpy.diff()</code> to calculate differences between neighboring elements. If the difference between two characters is grater or equal 0, they are in ascending order. Since we want to keep only information if sequential characters are ascending we immediately compare calculated differences with 0. By default <code>numpy</code> returns boolean (<code>True</code> or <code>False</code>) values after comparison, so we need to force it to return integer (<code>0</code> or <code>1</code>) by adding <code>.astype(numpy.int)</code> - this will allow further operations:</p>

<pre><code>ascii_diff = (numpy.diff(ascii_codes)&gt;=0).astype(numpy.int)
</code></pre>

<p>At this point we have data vector with ones where characters are ascending and zeros elsewhere. All we need to do is find length and position of longest sequence of ones. By calculating <code>numpy.diff()</code> again we get non zero values where character sequence changes between ascending and descending. By using <code>numpy.where()</code> we obtain list of indexes where sequence change occurs (<code>+1</code> is needed to allow finding ascending sequence at the beginning of string):</p>

<pre><code>parts_ends = numpy.where(numpy.diff(ascii_diff)!=0)[0]+1
</code></pre>

<p>Now we have indexes of characters where sequence order changes, so to find sequences lengths we need to apply <code>numpy.diff()</code> again (this is the last time, I promise!). To correctly calculate length of first sequence we need to append <code>0</code> at the beginning of our list using <code>numpy.hstack()</code>:</p>

<pre><code>parts_ends = numpy.diff(numpy.hstack((0, parts_ends)))
</code></pre>

<p>Now we can find length of the longest ascending sequence:</p>

<pre><code>max_substring_lenght = parts_ends.max()  
</code></pre>

<p>And get list of indexes where longest sequences start:</p>

<pre><code>substring_starts = numpy.where(parts_ends==max_substring_lenght)[0]
</code></pre>

<p>Finally we need to loop over all indexes where longest sequences start, and calculate their position in input string by summing lengths of all sequences before itself. Indexes of longest sequences starts are appended to list introduced at the beginning of the function:</p>

<pre><code>for start in list(substring_starts):
    start_indexes.append(sum(parts_ends[0:start]))
</code></pre>

<p>Result is returned as a tuple: length of longest sequence and list of positions of longest sequences in string. This result can be used to print all longest sequences:</p>

<pre><code>(max_lenght, starts) = find_longest_substring('azcbobobegghakl')
print("Longest substring has {0} characters.".format(max_lenght))
for start in starts:
    print(start, max_lenght, s[start:start+max_lenght])
</code></pre>

<h2>Performance</h2>

<p>Using <code>numpy</code> and "Python approach" is usually faster than direct algorithm implementation, however in this case this doesn't seem obvious, due to solution complexity. To measure and compare performance results lets consider very long string: </p>

<pre><code>s = 'azcbobobegghakl'*1000000 + 'zabcdefghija'*3 + 'azcbobobegghakl'*1000000
</code></pre>

<p>Searching for longest ordered substring should return three occurrences of <code>'abcdefghij'</code>. </p>

<ul>
<li><code>numpy</code> based solution presented above outputted thee substrings in 6.853079 seconds</li>
<li>original solution by @Turluf outputted one substring in 8.956485 seconds</li>
<li>solution by @dingalapadum outputted one substring in 9.008759 seconds</li>
<li>solution by @A. Romeu outputted one substring in 9.946994 seconds</li>
<li>solution by @Maarten Fabr√© outputted thee substrings in 13.178466 seconds</li>
</ul>

<p>The performance difference is not extraordinary, however clearly shows, that <code>numpy</code> solution wins. </p>
    </div>