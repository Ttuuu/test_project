<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Using Better Abstractions</strong> </p>

<p><strong>Player Class</strong> </p>

<p>The <code>Player</code> class has properties that do not really belong there. The <code>Scores</code> property is more suited as a property in the <code>HandCricketGame</code> class since the player can exist without playing a game thus making these fields redundant and it's better if which player and how he scored is tracked from the main <code>HandCricketGame</code> class.</p>

<p>So is the <code>coinOptions</code> property which would really depend on the game being played. </p>

<p>Abstracting this to an interface we have </p>

<pre><code>public interface IPlayer
{
    string Name { get; }
    int Play();
}
</code></pre>

<p>And it's implementations like </p>

<pre><code>class Player : IPlayer
{
    public string Name
    {
        get; private set;
    }
    public Player(string name)
    {
        Name = name;
    }
    public int Play()
    {
        return RandomNumberGenerator.Play();
    }
}
</code></pre>

<p><strong>Innings Class</strong> </p>

<p>Since we realized that storing the player score is better suited in the game object rather than the player object. We can go one step further and store it in the <code>Innings</code> object. The game is composed of multiple innings and it would make sense to store which player was the batsman, bowler and how the runs were scored in the <code>Inning</code> object in the <code>HandCricketGame</code> rather than directly on the <code>HandCricketGame</code> class. </p>

<p>Which will look like </p>

<pre><code>public interface IInnings 
{
    IPlayer Batsman { get;  }
    IPlayer Bowler { get; }
    int TotalScore { get; }
    List&lt;int&gt; ScoreByEachThrow { get;}
    void AddScore(int score);
}

class Innings : IInnings
{
    public IPlayer Batsman
    {
        get;
        private set;
    }

    public IPlayer Bowler
    {
        get;
        private set;
    }

    public int TotalScore
    {
        get;
        private set;
    }

    public Innings(IPlayer batsman, IPlayer bowler)
    {
        Batsman = batsman;
        Bowler = bowler;
        ScoreByEachThrow = new List&lt;int&gt;();
    }

    public List&lt;int&gt; ScoreByEachThrow
    {
        get;
        private set;
    }

    public void AddScore(int score)
    {
        ScoreByEachThrow.Add(score);
        TotalScore += score;
    }
}
</code></pre>

<p><strong>Single Responsibility Principle</strong></p>

<p>The <code>HandCricketGame</code> is breaking the Single responsibility principle by doing multiple things like implementing the Tossing logic as well as playing the game. This class would look cleaner if this toss logic was moved to another class and that class used as a dependency to the <code>HandCricketGame</code> class.</p>

<pre><code>public class TossCore
{
    public TossResult Toss(IPlayer playerOne, IPlayer playerTwo)
    {
        var callingTossOption = TossOption.Heads;
        var winningTossOption = RandomNumberGenerator.CoinToss();
        var winner = callingTossOption == winningTossOption ? playerOne : playerTwo;

        //Assuming player one alwayas calls heads and the toss and chooses to bat first
        return new TossResult(tossCalledByPlayer : playerOne, tossCalledOption : callingTossOption, tossWinningPlayer : winner, 
            winningTossOption : winningTossOption,
            winningPlayerOption : PlayingOptions.Bat
            );
    }
}

public class TossResult
{
    public IPlayer TossCalledByPlayer { get; private set; }
    public TossOption TossCalledOption { get; private set; }
    public IPlayer TossWinningPlayer { get; private set; }
    public TossOption WinningTossOption { get; private set; }
    public PlayingOptions WinningPlayerOption { get; set; }

    public TossResult(IPlayer tossCalledByPlayer, TossOption tossCalledOption, IPlayer tossWinningPlayer, 
        TossOption winningTossOption, PlayingOptions winningPlayerOption)
    {
        TossCalledByPlayer = tossCalledByPlayer;
        TossCalledOption = tossCalledOption;
        TossWinningPlayer = tossWinningPlayer;
        WinningTossOption = winningTossOption;
        WinningPlayerOption = winningPlayerOption;
    }
}
</code></pre>

<p>The <code>Play</code> method in the <code>HandCricketGame</code> class is very structural and could be modularized to make this method look clean and more readable. </p>

<p>Since we already know there are only going to be 2 Innings in the game it would be better to store both of them as individual objects rather than as a <code>List</code>.</p>

<pre><code>public class HandCricketGame
{
    private readonly IPlayer playerOne, playerTwo;
    private IPlayer batsman, bowler;
    private IInnings firstInning, secondInning;
    public TossResult TossResult { get; private set; }

    private readonly TossCore TossCore;

    public HandCricketGame(IPlayer one, IPlayer two, TossCore toss)
    {
        playerOne = one;
        playerTwo = two;
        TossCore = toss;
    }

    public GameResult Play()
    {
        Toss();
        firstInning = PlayInning();
        SwapPlayerRoleAfterInnings();
        secondInning = PlayInning();
        return GameSummary();
    }

    private void Toss()
    {
        TossResult = TossCore.Toss(playerOne, playerTwo);
        if(TossResult.WinningPlayerOption == PlayingOptions.Bat)
        {
            batsman = TossResult.TossWinningPlayer;
            bowler = GetOpponentPlayerReferenceObject(batsman);
        }
        else
        {
            bowler = TossResult.TossWinningPlayer;
            batsman = GetOpponentPlayerReferenceObject(bowler);
        }
    }

    private GameResult GameSummary()
    {
        var hasResult = true;
        IPlayer winner = null;
        if (firstInning.TotalScore == secondInning.TotalScore)
        {
            hasResult = false;
        }
        else if (firstInning.TotalScore &gt; secondInning.TotalScore)
        {
            winner = firstInning.Batsman;
        }
        else
        {
            winner = secondInning.Batsman;
        }
        var result = new GameResult(tossResult : TossResult,hasResult: hasResult, firstInning: firstInning, secondInning: secondInning, winner: winner);
        return result;
    }

    private IInnings PlayInning()
    {
        var currentInnings = new Innings(batsman, bowler);
        int currentScore = 0;
        int batsmanPlay, bowlerPlay;
        do
        {
            batsmanPlay = batsman.Play();
            bowlerPlay = batsman.Play();
            if (batsmanPlay != bowlerPlay)
            {
                currentScore += batsmanPlay;
                currentInnings.AddScore(batsmanPlay);
            }
        } while (batsmanPlay != bowlerPlay &amp;&amp; (firstInning == null || currentScore &lt;= firstInning.TotalScore));

        return currentInnings;
    }

    private IPlayer GetOpponentPlayerReferenceObject(IPlayer player)
    {
        if (ReferenceEquals(player, playerOne))
        {
            return playerTwo;
        }
        return playerOne;
    }

    private void SwapPlayerRoleAfterInnings()
    {
        IPlayer tempBatsman = batsman;
        batsman = GetOpponentPlayerReferenceObject(batsman);
        bowler = tempBatsman;
    }
}
</code></pre>
    </div>