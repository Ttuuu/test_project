<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Seperation of concerns, the rule engine should be separated from the "AI". Now you need a large rewrite if you want to support two players. </p>

<p>Properly written there would be no difference if a AI player or a real player was playing and even two AI could play against each other.</p>

<p>Also the rules can be defined with a 2 dimensional array instead of switch case /  if-block</p>

<p>Here is a working but not perfected example, I suspect that this is a school homework so do not want to give you everything ;)</p>

<pre><code>class Program
{
    private enum Type
    {
        Rock = 0, 
        Paper = 1,
        Scissor = 2
    }

    private interface IPLayerInput
    {
        Type GetInput();
    }

    private class KeyboardPlayerInput : IPLayerInput
    {
        public Type GetInput()
        {
            return (Type)Enum.Parse(typeof(Type), Console.ReadLine() ?? string.Empty);
        }
    }

    private class AiPLayerInput : IPLayerInput
    {
        private readonly Type[] _values;
        private readonly Random _rand;

        public AiPLayerInput()
        {
            _values = Enum.GetValues(typeof(Type)).Cast&lt;Type&gt;().ToArray();
            _rand = new Random();
        }

        public Type GetInput()
        {
            return _values[_rand.Next(0, _values.Length)];
        }
    }

    private class Player
    {
        private readonly IPLayerInput _input;

        public Player(string name, IPLayerInput input)
        {
            _input = input;
            Name = name;
        }

        public int Score { get; set; }
        public string Name { get; }

        public void RequestNewHand()
        {
            CurrentHand = _input.GetInput();
        }

        public Type CurrentHand { get; private set; } 
    }

    static void Main()
    {
        var rules = new Type?[,] { 
            { null, Type.Paper, Type.Rock }, 
            { Type.Paper, null, Type.Scissor }, 
            { Type.Rock, Type.Scissor, null } };


        var players = new List&lt;Player&gt; {new Player("AI", new AiPLayerInput()), new Player("Hooman", new KeyboardPlayerInput())};

        Player winner = null;
        while (winner == null)
        {
            players.ForEach(p =&gt; p.RequestNewHand());
            foreach (var player in players)
            {
                var score = players.Count(p =&gt; p != player &amp;&amp; rules[(int)player.CurrentHand, (int)p.CurrentHand] == player.CurrentHand);
                player.Score += score;
            }

            winner = players.SingleOrDefault(p =&gt; p.Score &gt;= 3);
        }

        Console.WriteLine($"Winner is {winner.Name}");

    }
}
</code></pre>
    </div>