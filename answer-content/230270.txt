<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>randomchoice</code> method could be a lot easier. It also has a confusing name, since <code>random.choice</code> returns only a single value, but your method returns three. For this there is the function <code>random.sample</code>, which you already use, however not in the best way. Instead of sampling the indices and then indexing, sample the underlying list directly (this assumes you always have an indexable object there, but so does your code).</p>

<pre><code>@staticmethod
def random_sample(parametr_name):
    '''choose random 3 parameters
    return --&gt; list of 3 possible parameters
    it will be used in the inherited classes'''
    return random.sample(Hero.data[parametr_name], 3)
</code></pre>

<p>Note that <em>if</em> you need to sample indices, <code>random.sample(range(1, 6))</code> is more efficient (especially for large ranges).</p>

<p>But I think you might as well inline it, the method does not add anything:</p>

<pre><code>from random import sample

class Altmer(Hero):
    data = {
        'sex': Hero.data['sex'],
        'color_skin': sample(Hero.data['color_skin'], 3),
        'tatoo': sample(Hero.data['tattoo'], 3),
        'color_hair': sample(Hero.data['color_hair'], 3),
    }
</code></pre>

<p>Sidenote: my spellchecker tells me it is "tattoo", "parameter" and "standard". You might also want to consider calling it <code>skin_color</code> and <code>hair_color</code>, since that reads more naturally.</p>

<hr>

<p>All of your getters and setters are superfluous. They don't add anything, just use attribute access. If you <em>do</em> need to add a getter or setter later that does more than just returning/setting the attribute, you can still add it later via properties:</p>

<pre><code>class A:
    """A class with a simple attribute"""
    def __init__(self):
        self.x = 3

class B(A):
    """The same class but with getter and setter added for x"""
    def __init__(self):
        self._x = 3

    @property
    def x(self):
        return self._x + 1

    @x.setter
    def x(self, v):
        if 0 &lt;= v &lt;= 100:
            self._x = v
        else:
            raise ValueError("Only integers 0 &lt;= x &lt;= 100 are valid")
</code></pre>

<p>Both classes can be used in exactly the same way, the interface does not change, whether the underlying attribute is a real attribute or a property:</p>

<pre><code>a = A()
b = B()

print(a.x, b.x)
# 3 4

a.x = 2
b.x = 2
print(a.x, b.x)
# 2, 3

b.x = 101
# ValueError: ...
</code></pre>

<hr>

<p>I also don't see the reason for all of your <code>Descriptor</code> sub classes, not even for the base class itself. It seems to me you could just have it like this:</p>

<pre><code>class Hero():
    #dict of possible parameters of all type of heroes

    data = {
        'sex'        : ['male', 'female'],
        'color_skin' : ['yellow', 'black', 'brown', 'green', 'blue', 'orange'],
        'tatoo'      : ['sun', 'water', 'cloud', 'snake', 'monkey', 'car', 'cat'],
        'color_hair' : ['black', 'brown', 'green', 'red', 'blue', 'silver'],
    }

    def __init__(self, sex=None, color_skin=None, weight=None, tattoo=None, color_hair=None):

        self.sex = sex
        self.color_skin = color_skin
        self.weight = weight
        self.tattoo = tattoo
        self.color_hair = color_hair
        self.race = self.__class__.__name__

    def __str__(self):
        '''Instance presentation'''
        return(f"___ Your Hero ___ \n"
               f"Race   --&gt; {self.race}\n"
               f"Sex    --&gt; {self.sex}\n"
               f"Skin   --&gt; {self.color_skin}\n"
               f"Weight --&gt; {self.weight}\n"
               f"Tattoo --&gt; {self.tattoo}\n"
               f"Hair   --&gt; {self.color_hair or 'Nothing'}\n"
               f".....................")
</code></pre>

<p>Then you can perform the checking in the character creation part:</p>

<pre><code>TYPES = {cls.__name__: cls for cls in (Argonian, ...)}
# or
TYPES = {cls.__name__: cls
         for cls in globals().values()
         if issubclass(cls, Hero)}

class InclusiveInterval:
    def __init__(self, start, end):
        self.start, self.end = start, end

    def __contains__(self, x):
        return self.start &lt;= x &lt;= self.end

def ask_user(message, choices=None, type_=None):
    while True:
        choice = input(message)
        if type_ is not None:
            try:
                choice = type_(choice)
            except ValueError:
                print("Please try again")
                continue
        if choices is None or choice in choices:
            return choice
        print("Please try again")

class Game:
    ...
    def create_hero(self):

            print('Okay ... Start ...')
            print ('To begin with type of your Hero')

            Race = TYPES[ask_user("Which race? ", TYPES)]
            data = Race.data
            sex = ask_user('Now , choose sex of your hero: ',
                           data["sex"])
            skin_color = ask_user('Now, choose color skin of your hero: ',
                                  data["color_skin"])

            weight = ask_user('Okay, what is the weight of your hero (in kilograms)? ',
                              InclusiveInterval(0, 500), type_=int)
            ...
            print('Great choice !!')
            self.__Hero = Race(sex, color_skin, weight, tattoo, color_hair)
</code></pre>
    </div>