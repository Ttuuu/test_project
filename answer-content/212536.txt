<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It also looks functional to me, and I like your use of union type <code>State</code>.</p>

<hr>

<p>You can define the <code>Zero</code> static member of <code>State</code> as:</p>

<pre><code>type State =
    | FinalState of int
    | IntermediateState of int * int Set
    static member Zero = IntermediateState(0, Set.empty.Add(0)) 
</code></pre>

<p>You don't have to create a separate <code>with</code>-definition.</p>

<hr>

<p>In general I avoid writing the result to the console in the algorithm function it self. Instead it is more useful to return the result and let the caller handle that as needed:</p>

<pre><code>let rec processListRec state lst =
    let result = lst |&gt; Seq.fold foldState state
    match result with
    | FinalState result -&gt; result
    | IntermediateState _ -&gt; lst |&gt; processListRec result
</code></pre>

<p>Used as:</p>

<pre><code>printfn "%A" (processListRec State.Zero input)
</code></pre>

<hr>

<p>You need some kind of stop condition or an input check if all changes are positive or negative.</p>

<p>For instance will <code>[1;1;1]</code> run forever, because no frequency will ever occur twice.</p>

<hr>

<p>A raw recursive solution could be:</p>

<pre><code>let findReoccurantFrequency input = 
    if (input |&gt; List.groupBy (fun x -&gt; x &gt; 0)) |&gt; List.length &lt; 2 then 
        raise (Exception "Invalid input (only positive or negative changes)")
    else
        let rec runner lst freq freqs =
            if freqs |&gt; List.contains freq then
                freq
            else
                let head, tail = if lst = [] then input.Head, input.Tail else lst.Head, lst.Tail
                runner tail (freq + head) (freq::freqs)
        runner input 0 []
</code></pre>

<p>I'm not saying that it's a better solution, just another approach for the exercise and inspiration. Especially I'm not proud of the input check.</p>

<hr>

<p><strong>Edit</strong></p>

<p>As pointed out by JanDotNet in his comment, my input validation is poor, so it's maybe better to leave it out. Below is a revised version of my implementation using a <code>Set</code> instead of a <code>List</code> for the frequencies:</p>

<pre><code>let findReoccurantFrequency input = 
    let rec runner lst freq freqs =
        match freqs |&gt; Set.contains freq with
        | true -&gt; freq
        | false -&gt;
            let head, tail = if lst = [] then input |&gt; List.head, input |&gt; List.tail else lst.Head, lst.Tail
            runner tail (freq + head) (freqs.Add(freq))
    runner input 0 Set.empty
</code></pre>
    </div>