<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We can replace some custom functions or constructs by standard library ones:</p>

<ul>
<li><code>\(x:_) -&gt; x</code> is called <code>head</code></li>
<li><code>not . even</code> is called <code>odd</code></li>
</ul>

<p>Next, <code>1</code> is not a prime, and <code>1</code> does not have a prime factorization. Since <code>product []</code> yields <code>1</code>, we can use <code>[]</code> instead in <code>prmfctrs'</code>.</p>

<p>The worker <code>prmfctrs'</code> is a mouthful. Workers are usually called the same as their context (but with an apostrophe, so <code>primefactors'</code>) or short names like <code>go</code>.</p>

<p>And last but not least, we can use <code>@</code> bindings to pattern match on the <code>head</code>, <code>tail</code> and the whole list at once.</p>

<p>If we apply those suggestions, we get</p>

<pre><code>import Data.List (group)

toPerfectSquare :: Int -&gt; Int
toPerfectSquare n = product . map head . filter (odd . length) . group $ primefactors n

primefactors :: Int -&gt; [Int]
primefactors n = go n 2 [3,5..]
  where
    go m d ds@(p:ps) | m &lt; 2     = []
                     | m &lt; d^2   = [m]
                     | r == 0    = d : go q d ds
                     | otherwise = go m p ps
      where (q, r) = quotRem m d
</code></pre>

<p>In theory, we can even get rid of a parameter in <code>go</code>, namely the <code>d</code>, so that we always just look at the list of the divisors:</p>

<pre><code>import Data.List (group)

toPerfectSquare :: Int -&gt; Int
toPerfectSquare n = product . map head . filter (odd . length) . group $ primefactors n

primefactors :: Int -&gt; [Int]
primefactors n = go n $ 2 : [3,5..]
  where
    go m dss@(d:ds) | m &lt; 2     = []
                    | m &lt; d^2   = [m]
                    | r == 0    = d : go q dss
                    | otherwise = go m ds
      where (q, r) = m `quotRem` d
</code></pre>

<p>We could also introduce another function <span class="math-container">\$f\$</span>, so that for any <span class="math-container">\$a,b \in \mathbb N\$</span> we get a pair <span class="math-container">\$(n,y) \in \mathbb N^2\$</span> such that</p>

<p><span class="math-container">$$
a^n y = b
$$</span>
If we had that function, we could write use it to check easily whether the power of a given factor is even or odd. However, that function and its use in <code>toPerfectSquare</code> are left as an exercise.</p>
    </div>