<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are using many indexes in your code.</p>

<p>That is, you are using an imperative style of programming.</p>

<p>Functional style is more about decomposing the problem in smaller even tiny steps and using recursion where reasonable.</p>

<p>To print out as a spiral the outermost part of a matrix what do you do?</p>

<pre><code>1    2   3   4
5    6   7   8
9   10  11  12
13  14  15  16
</code></pre>

<p>Output should be -</p>

<pre><code>1 2 3 4     8 12 16
^           ^
First row   Last column reversed but avoiding repeating 4


15 14 13
^
Last row reversed (again careful on repetions)

9 5
^
First column reversed omitting both first and last
</code></pre>

<p>And then? How to print the inside as a spiral? You just remove the outside, the first and last columns and the first and last items of each row and apply this process again.</p>

<p>This allows you to think, as much as possible in terms in concepts (print given row or column maybe reversed) instead of indexes, you find a way to simplify the problem and then establish a trivial base case (matrix empty = do not print)</p>

<p>So you can a program like this, in pseudocode:</p>

<pre><code>def nth_row
def nth_column
def except_first
def except_last
def reversed

def spiral_print(matrix):
    if len(matrix) == 0: end
    L = len(matrix)
    print(nth_row(0, matrix))
    print(except_first(nth_column(L, matrix)))
    # last row and first column handling missing
    print_spiral(inside_matrix(matrix))
</code></pre>

<p>I do not know Scala specifics semantics, but here is an implementation in Python:</p>

<pre><code>def column(i, matrix):
    return [row[i] for row in matrix]

def spiral(matrix):
    if len(matrix) == 0:
        return
    print(matrix[0])
    print(column(-1, matrix)[1:])
    print(matrix[-1][::-1][1:])
    print(column(0, matrix)[::-1][1:-1])
    spiral([row[1:-1] for row in matrix[1:-1]])
</code></pre>

<p><code>[::-1]</code> means "reversed", and [1:-1] means "except first and last"</p>
    </div>