<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have chosen a great problem to begin with, however there are a few things you get wrong about OOP. OOP is not simply about using a class for "everything", it's a kind of way to think about a problem.</p>

<p>To begin with, it helped me a lot to think about a class as a prototype of a "thing". In your case the "thing" would be a Pokemon. A Pokemon can do certain things. In your simplified versions that would be 1. attack another Pokemon and 2. heal itself. Often these actions are reflected in the classes's methods. I think you mostly understood that. What else is there about the Pokemon/"thing" it has certain properties that describe it. I would say that's an aspect you did not think about. A property could be name, color, ... or it's health status. We also learn that the health can only be between <code>0</code> and <code>100</code>.</p>

<p>So with this on our mind, let's think of a new design for <code>class Pokemon</code>:</p>

<pre class="lang-py prettyprint-override"><code>class Pokemon:
    """Blueprint for a new pokemon"""

    def __init__(self):
        self._health = 100
        #    ^--- the leading _ is a convention to mark internal values

    @property
    def health(self):
        """The health of the Pokemon which is between 0 and 100"""
        return self._health

    @health.setter
    def health(self, new_health):
        """Set the new heath value"""
        # here the health limits are enforced
        self._health = min(100, max(0, new_health))

    def attack(self, other, choice):
        """Attack another Pokemon with the chosen attack (1 or 2)

        This function also returns the raw amount of random damage dealt. The
        amount of damage dealt depends on the attack type.
        """
        if choice == 1:
            attack_points = random.randint(18, 25)
        elif choice == 2:
            attack_points = random.randint(10, 35)
        else:
            print("That is not a selection. You lost your turn!")
            attack_points = 0
        other.health -= attack_points
        return attack_points

    def heal(self):
        """Heal the Pokemon"""
        heal_points = random.randint(18, 35)
        self.health += heal_points
        return heal_points
</code></pre>

<p>A lot of this should look familiar to you, since the main work is still done by the code you've written. What is new that the Pokemon now has health. If your unfamiliar with properties in Python just think of them as synthatic sugar on what would normally be done using getter and setter functions in other languages. There is a great <a href="https://stackoverflow.com/a/36943813/5682996">SO post</a> with a nice explanation on properties. In addition to that, <code>attack</code> and <code>heal</code> now handle the update of the health value for the Pokemon, as well as the opponent. This allows us to write up a simple battle in a very concise way:</p>

<pre class="lang-py prettyprint-override"><code>mew = Pokemon()
user = Pokemon()
mew.attack(user, 1)
print(f"User health after attack: {user.health}")
user.heal()
print(f"User health after heal: {user.health}")
mew.heal() # health should still only be 100
print(f"Mew's health after 'illegal' heal: {user.health}")
</code></pre>

<p>which prints for example:</p>

<pre class="lang-none prettyprint-override"><code>User health after attack: 75
User health after heal: 100
Mew's health after 'illegal' heal: 100
</code></pre>

<p>No additional variables that need to track health status, no checking on the health limits. Everything is nicely encapsulated into the <code>Pokemon</code> class. As <a href="https://codereview.stackexchange.com/users/197357/">DaveMongoose</a> pointed out in his comment, a drawback of this approach is that the Pokemon can not be defeated as long as it heals after an attack, no matter how much damage it took.</p>

<hr>

<p><strong>Short break on style and other conventions</strong><br>
Another thing that has changed in contrast to your solution is the documentation I added to each function. Python has an "official" <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide</a> (which is worth a read on its own) with a section on how to write these so called <em>docstrings</em> <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">here</a>.</p>

<p>It also features <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">guidelines</a> on where to use blank lines and where not to use them. In my oppinion the excessive use of blank lines in your code hinders readability more than it does help to structure the code.</p>

<p>I also used only a single leading underscore for my internal value instead of two as you did. The Style Guide also has you covered on <a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables" rel="nofollow noreferrer">this topic</a>. In general you should always use a single leading underscore to mark functions and variables/members as internal. For more details on what happens if you use two leading underscores, follow the link above.</p>

<hr>

<p>After that short intermezzo, let's look on how the battle simulation looks with the new class:</p>

<pre class="lang-py prettyprint-override"><code>def battle_simulation():
    """Run a simple interactive Pokemon battle simulation"""
    mew = Pokemon()
    user_pokemon = Pokemon()
    while True:
        print("\nATTACK CHOICES\n1. Close range attack\n2. Far range attack\n3. Heal")
        attack_choice = int(input("\nSelect an attack: "))
        # DON'T use eval on user input, this can be dangerous!

        # Mew selects an attack, but focuses on attacking if health is full.
        mew_choice = random.randint(1, 2 if mew.health == 100 else 3)
        # this is your original distinction just condensed into a single line

        # Attacks by user and Mew are done simultaneously
        # with the changes to Pokemon, there is no need to save all the
        # intermediate damage/heal values -&gt; nice and short code
        if attack_choice != 3:
            print(f"You dealt {user_pokemon.attack(mew, attack_choice)} damage.")

        if mew_choice != 3:
            print(f"Mew dealt {mew.attack(user_pokemon, mew_choice)} damage.")

        if attack_choice == 3:
            print(f"You healed {user_pokemon.heal()} health points.")

        if mew_choice == 3:
            print(f"Mew healed {mew.heal()} health points.")

        if mew.health == 0 or user_pokemon.health == 0:
            break

        print(f"Your current health is {user_pokemon.health}")
        print(f"Mew's current health is {mew.health}")

    print(f"Your final health is {user_pokemon.health}")
    print(f"Mew's final health is {mew.health}")

    if user_pokemon.health &lt; mew.health:
        print("\nYou lost! Better luck next time!")
    else:
        print("\nYou won against Mew!")


if __name__ == "__main__":
    battle_simulation()
</code></pre>

<p>As you can see, we got rid of all the variables needed to store damage and heal values since everything is no done internally in the <code>Pokemon</code> class. With this, the code becomes quite a bit shorter, clearer and easier to read. Cool, isn't it?</p>

<p>A thing you will see me use quite often are the so called f-strings. They take arbitrary Python expressions (function calls, variables, ...) and allow to incorporate them into a formatted string. If you want to know more about them, I would recommend <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">this</a> blog post.</p>

<p>Happy Coding!</p>
    </div>