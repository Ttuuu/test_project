<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Declare variables in the smallest possible scope</h3>

<p>It's recommended to declare variables in the smallest scope where they are needed.
That way, the variable will not be visible where it should not be,
and therefore it cannot be modified accidentally by mistake.
It also makes understanding a program easier when you don't need to keep more variables in your head than necessary.</p>

<p>Therefore, since most of the variables are not needed in the global scope,
move those declarations to the functions that need them.</p>

<p>Be careful with variable scope in JavaScript.
Looking at this code,
you may be mislead that the variable <code>i</code> is only visible within the loop:</p>

<blockquote>
<pre><code>  for (var i = section.length - 1; i &gt;= 0; i--) {
    section[i].style.position = "fixed";
  }
</code></pre>
</blockquote>

<p>But that's not the case. The variable is visible after the loop,
and even before the loop (with value <code>undefined</code>).</p>

<p>In this particular example you want to replace the <code>var</code> with the <code>let</code> keyword,
if your version of JavaScript supports it (like any non-ancient implementation).
Using <code>let</code>, the variable will only be visible within the loop.</p>

<h3>Avoid redundant variable initializations</h3>

<p>In the posted code all variables are initialized at the time of declaration.
But if the variables don't need an initial value, then this is just noise.</p>

<h3>Order conditional terms by their values</h3>

<p>It can improve readability when the terms in conditionals are in a consistent order. Take for example this piece:</p>

<blockquote>
<pre><code>  if (y &gt;= 0 &amp;&amp; y &lt; h) {
    // ...
  }
  if (y &gt;= h &amp;&amp; y &lt; h * 2) {
    // ...
  }
</code></pre>
</blockquote>

<p>The first condition means <em><code>y</code> is between 0 and <code>h</code></em>,
and the second means <em><code>y</code> is between <code>h</code> and <code>h * 2</code></em>.
Although this is easy enough to see,
the current writing style doesn't really help to see it.</p>

<p>Consider this alternative:</p>

<pre><code>  if (0 &lt;= y &amp;&amp; y &lt; h) {
    // ...
  }
  if (h &lt;= y &amp;&amp; y &lt; h * 2) {
    // ...
  }
</code></pre>

<p>Now, the meaning hasn't changed, but it's much easier to see.
And with this writing style,
it's also easier to see that the two conditions will not be true at the same time,
so the second <code>if</code> should in fact be an <code>else if</code>.</p>
    </div>