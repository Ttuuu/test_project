<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>get_pair_of_socks</code> seems to be initializing a pile of socks, so you have the wrong name. </p>

<p>If I understand things correctly, you initialize a pile of "left" socks, then initialize a pile of "right" socks (socks don't have left and right, but the labels make it easier to keep track of what's going on), and then put the pile of "left" socks on top of the "right" pile. So each half of the final pile has only one copy of each sock pair. This is an odd situation to be simulating. I recommend initializing the pile in one go with <code>random.sample(list(range(number_of_socks_to_consider))*2,2*number_of_socks_to_consider)</code>.</p>

<p>I think you could just take the sock on the top of the pile without affecting the results, rather than the complicated <code>pop</code> statement you're currently using. (A random element from a random permuted set isn't any more random than the first element from a randomly permuted set).</p>

<p><code>first_pair</code> seems to be the first sock in the attempted pair, while <code>second_pair</code> is the  second sock, which, again, is poor naming (perhaps you are confusing "pair" with "partner").</p>

<p>I don't think you're following the algorithm describes in that link: that involves taking a sock, then taking the rest of the socks in order, while you are taking a sock, then checking the remaining socks with replacement, which again is making it take longer.</p>

<p>You don't need a separate case to handle the first sock you try to pair with the sock you picked. You can just do this:</p>

<pre><code>    first_pair = socks.pop(index_to_pull_sock_from(socks))
    attempt_count = 0
    while True:
        attempt_count = attempt_count + 1
        random_pick = index_to_pull_sock_from(socks)
        second_pair = socks[random_pick]
        if second_pair == first_pair:
                break
</code></pre>
    </div>