<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Pikachu the Purple Wizard's <a href="https://codereview.stackexchange.com/a/216458/92478">answer</a> covers quite a lot of essential style hints and best practices such as using enums.</p>

<p>However, he has not said a lot about the actual classes themselves. Especially <code>displayBoard</code> caught me attention immediately.</p>

<pre class="lang-py prettyprint-override"><code>class displayBoard():
    def show(self,p):
        for l in p.level:
            print(l.name)
            for k in l.spotTotal.keys():
                print(k, l.spotTotal[k] - l.spotTaken[k])
</code></pre>

<p>This is kind of a nonsense class. Classes should generally be used to hold variables and methods that would naturally belong together. <code>displayBoard</code> does not hold any data, and has a single function. Unlike Java, Python allows for functions which are not part of a class. So this could easily become</p>

<pre class="lang-py prettyprint-override"><code>def displayBoard(p):
    for l in p.level:
        print(l.name)
        for k in l.spotTotal.keys():
            print(k, l.spotTotal[k] - l.spotTaken[k])
</code></pre>

<p>without losing any functionality, clearity or whatever. As Pickachu said, this function would greatly benefit from documentation, and more expressive variable names (What type of object should <code>p</code> be?). </p>

<p>On the other hand, <code>Payment</code> is as a fully valid candidate for a class. However your code ignores the only input value one might pass to its constructor.</p>

<pre class="lang-py prettyprint-override"><code>class Payment():
    def __init__(self, amount): #&lt;- amount is not used anywhere
        self.id = 'paymentid2' #&lt;- all these values may only be set afterwards, why?
        self.type = 'credit' # debit
        self.time = 'payment time'
</code></pre>

<p>While reworking your code, also think about whether a string is really a good fit for storing time. E.g. Python has a built-in <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">datetime</a> module which might be (and probably is) a better fit here.</p>

<p>Another thing sou should change are those nested functions sometimes found in methods or in the constructor of some classes.</p>

<pre class="lang-py prettyprint-override"><code>class spot():
    def __init__(self,spotType):
        def generateId():
            # some mechanism to generate spot id
            return 1
        self.id = generateId()
        self.type = spotType
</code></pre>

<p>Should be reworked into</p>

<pre class="lang-py prettyprint-override"><code>class Spot():
    def __init__(self, spotType):
        self.id = self.generateId()
        self.type = spotType

    def generateId(self):
        """some mechanism to generate spot id"""
        return 1
</code></pre>

<p>which is what you already do, e.g. for <code>class ticket()</code>. If you intend to show that <code>generateId(self)</code> is not supposed to be used outside of the class, prepend it with <code>_</code>. That does not really hide the function from users outside of your class, but it is generally accepted as a convention that this function is only for internal use only and might be changed/removed/... without further notice.</p>
    </div>