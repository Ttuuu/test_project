<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>OrderByVersion</h1>

<ol>
<li>You've taken the time to add doc comments, but a vital piece of info is missing. The enumerable is sorted in <em>descending</em> order. That should be there in the doc comments. </li>
<li>It would be nice to have an option to sort ascending. (It's also an interesting problem to solve. =;)-</li>
<li>The mixture of query and lambda syntax seems a bit strange to me. I'd pick one and stick with it. I don't necessarily mean use just one style everywhere, but you should probably stick to just one of the two within a statement/method. </li>
</ol>

<h1>ExtractSemVer</h1>

<ol>
<li>There's no reason to abbreviate. This method should be named <code>ExtractSemanticVersion</code>. </li>
<li><p>I would seriously consider introducing a <code>SemanticVersionNumber</code> struct. </p>

<pre><code>public struct SemanticVersionNumber
{
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public string Build { get; }

    ....
 }
</code></pre>

<p>You could give a nice <code>ToString</code> method and a constructor that turns a string into an instance of this struct. Nicely tucking away the logic to do so, with the added benefit of possibly simplifying the ordering logic. You'd probably want to implement <code>IComparable</code>. Yes. I like that idea. You could take all of this logic out of your console class and put it in here where it probably belongs. You could also possibly make it part of your existing <code>Version</code> class, replacing <code>Name</code> with the <code>ToString</code> method that I mentioned. </p></li>
</ol>

<h1>WriteVersions</h1>

<ol>
<li>You never really use the index of the loop, so it will be cleaner to just use a <code>foreach</code> loop. </li>
<li>Use the <a href="https://msdn.microsoft.com/en-us/library/ebk18257(v=vs.110).aspx" rel="nofollow">AppendLine</a> method to append new lines to the string instead of awkwardly formatting them in. </li>
<li>Only set the <code>length</code> variable once, outside of the loop. </li>
</ol>

<hr>

<pre><code>public static string WriteVersions(IList&lt;Version&gt; versions)
{
    Func&lt;bool, string&gt; lineOrEmpty = b =&gt; b ? Environment.NewLine : String.Empty;
    Func&lt;int, int, bool&gt; isLimit = (n, limit) =&gt; n + 1 &lt; limit;
    Func&lt;int, string&gt; line = n =&gt; lineOrEmpty(isLimit(n, versions.Count));

    var stringBuilder = new StringBuilder("## Evolutions");
    stringBuilder.AppendLine()
        .AppendLine();

    foreach (var version in versions)
    {
        stringBuilder.AppendFormat("### {0}", version.Name)
            .AppendLine()
            .AppendLine();

        var length = version.Evolutions.Length;

        foreach (var evolution in version.Evolutions)
        {
            stringBuilder.AppendFormat("* {0}", evolution)
                .AppendLine();
        }
        stringBuilder.AppendLine();
    }
    return stringBuilder.ToString();
}
</code></pre>
    </div>