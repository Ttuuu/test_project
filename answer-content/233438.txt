<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Naming</strong></p>

<p>In many places, functions are described as operating on "mappings" or "set of mappings". As far as I can tell, the dictionary passed as a parameter is <em>a</em> mapping.
Thus, the plural form can be removed in various places.</p>

<p>(As a disclaimer, English is not my native language - let me know if I am wrong.)</p>

<hr>

<p><strong>Unused value</strong></p>

<p>In <code>_validate_mapping</code>, the list <code>keys</code> is populated but never used.</p>

<hr>

<p><strong>Limitation of the validation</strong></p>

<p>The validation logic seems to be here to ensure that a substitution will not bring a pattern that will be replaced (or would have been replaced) by a different substitution.</p>

<p>This somehow ensure that the order of the dictionary is not important.</p>

<p>An example would be:</p>

<pre><code>print("Yello world" == mapping_replace("Hello world", { "H": "J", "J": "Y"}, False, validate_mapping=False)) # No exception!
print("Jello world" == mapping_replace("Hello world", { "J": "H", "H": "J"}, False, validate_mapping=False)) # No exception!
</code></pre>

<p>However, there are various things that may be misleading with the corresponding logic <em>under the assumption that my understanding is valid</em> .</p>

<p><strong>Handling of regexp</strong></p>

<p>Regexp are not properly handled. For instance, this call:</p>

<pre><code>print("\d+ test" == mapping_replace("124233 test", { r"\d+": r"\d+" }, True, validate_mapping=False))
</code></pre>

<p>should have the same behaviour with <code>validate_mapping</code> set to <code>True</code> or <code>False</code>. At the moment, it either works or throws the exception.</p>

<p><strong>Opposite situation</strong></p>

<p>There are situations (like above) where the exception is thrown but but probably shouldn't but there are also situations where no exception is thrown but one would be expected.
This may give a feeling of "safety" which is not really valid.</p>

<p>An example would be:</p>

<pre><code>print("YYello world" == mapping_replace("Hello world", { "H": "JJ", "J": "Y" }))
print("JJello world" == mapping_replace("Hello world", { "J": "Y", "H": "JJ" }))
</code></pre>

<p>Should this throw ?</p>

<p><strong>My expectations</strong></p>

<p>Here is the behavior I'd have expected at least for the regexp case: check that no value from the dict would be matched by any of the keys (using <code>re.search</code>). In reality I do not see any correct way to check for any mapping that could lead to conflicts.</p>
    </div>