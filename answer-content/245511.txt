<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The SIMD code has type errors.</p>
<p>The problem is currently a bunch of floats are read, assigned to a <code>SIMDi</code> anyway, added as floats (and remember, these were integers, reinterpreted as floats), assigned to a <code>SIMDi</code> again, and then stored as floats (into an array of integers). The type warnings are not just noise, it's also actually wrong: integers are being reinterpreted as floats and have floating point addition applied to them. That sort of works for certain ranges of integers that after reinterpretation correspond to subnormal floats (though on some processors adding subnormals is very slow, for example Intel Atom and AMD Bulldozer), so this can fly under the radar for a while, until it can't .. and anyway, even if the right result comes out, this is still an unnecessary level of disregard for types.</p>
<p>"SIMDStarterKit.h" apparently does not have integer loads.. that's a bit odd. Actually I would question why this header is used at all. The official intrinsics are admittedly gross-looking (or to be generous, they're an acquired taste), but at least they are standard. <code>Load</code> could do just about anything, who knows? Whereas what <code>_mm256_load_ps</code> (or preferably <code>_mm256_load_si256</code>, there are no floats in this program) does is right on the tin.</p>
<p>Keeping "SIMDStarterKit.h", the cast functions can be used to remove a couple of warnings, and some manual pointer casting needs to happen, for example:</p>
<pre><code>    for (int j = 0; j &lt; 128; j += VECTOR_SIZE) {
        SIMDi global = CastToInt(Load((float*)&amp;globalCounts[j]));
        SIMDi local = CastToInt(Load((float*)&amp;localCounts[j]));
        SIMDi added = Addi(global, local);
        Store((float*)&amp;globalCounts[j], CastToFloat(added));
    }
</code></pre>
<p>With that, and also <code>#include &lt;string.h&gt;</code> (not the same as <code>strings.h</code>), the code can compile without warnings, and the SIMD addition does the right thing.</p>
<p>By the way, writing this with loop with explicit SIMD is not really necessary, it <a href="https://godbolt.org/z/Yqbhxa" rel="noreferrer">gets autovectorized anyway</a>.</p>
    </div>