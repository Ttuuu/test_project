<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll start this post off with a notice that my knowledge of the <code>Java</code> language isn't very high. However, I have a lot of experience with development in languages like <code>C#</code> and <code>JavaScript</code> so there are a few things I can help with. Most of my code below will be pseudo-code, but I did research more proper syntax and <code>import</code> statements to clean it up a bit.</p>

<hr>

<p>Based on your post alone, it is hard to tell what is really going on which, is mostly due to the fact that you've got chained assignments, and your variable names are all very similar (this makes it hard to understand what each variable really is). I'm not quite sure why you have chained assignments here, but this is due to the lack of context. It does look very odd (and it could be my lack of knowledge in the <code>Java</code> language), because it looks you're assigning a <code>Color</code> to a <code>String</code> to a <code>int</code> to a <code>String</code> to what appears to be some sort of <code>Control</code>.</p>

<h2>Create a Class</h2>

<p>Without clarification, one suggestion I will make is to create a class for your <code>Card</code> objects. This will help to clarify what is going on a little better, and makes my upcoming suggestions much more feasible.</p>

<p><strong>Card.java</strong>:</p>

<pre><code>import java.awt.Color;
public class Card {
    public int id = 0;
    public int displayNumber = 0;
    public String displayName = "CARD";
    public String town = "Liverpool";
    public Color backgroundColor = Color.black;
    public Color foreColor = Color.white;
    public CardView view = null;
    public Card(int cardID, int num, String name, String town, Color bgColor) {
        id = cardID;
        displayNumber = num;
        displayName = name;
        town = town;
        backgroundColor = bgColor;
    }
}
</code></pre>

<p>I had to create an additional <code>class</code> called <code>CardView</code> since I'm not sure what that is, but assume it's a control. I just created an empty <code>class</code> to compile my initial testing.</p>

<p><strong>CardView.java</strong>:</p>

<pre><code>public class CardView { }
</code></pre>

<p>Again, without truly knowing what each of your variables are this is the best I can come up with and is purely based on your existing naming conventions. This class will help to make your code more readable since you now have consistent names for your variables.</p>

<h2>Use a List</h2>

<p>Lists are very useful objects, no matter the language you're in (I'd be really interested to see a language with a bad implementation of them). I heavily recommend using a list for this task since you can add all of your cards to it and then loop over it later when doing your assignments. For example, to create a list of <code>Card</code> objects:</p>

<pre><code>List&lt;Card&gt; cards = new ArrayList&lt;Card&gt;();
cards.add(new Card(0, 0, "Card 1", Color.black));
cards.add(new Card(0, 0, "Card 2", Color.black));
cards.add(new Card(0, 0, "Card 3", Color.black));
</code></pre>

<h2>Create Methods for Assigning Colors</h2>

<p>This will help clean up a little since each method will do something very specific. For example, I'd recommend the following four methods:</p>

<ul>
<li><code>applyCardColors(Card c, String backgroundColor)</code>

<ul>
<li>Used to apply all relevant colors to a card.</li>
</ul></li>
<li><code>applyBackgroundColor(Card c, String color)</code>

<ul>
<li>Used to apply the background color.</li>
</ul></li>
<li><code>determineAndApplyForeColor(Card c, String backgroundColor)</code>

<ul>
<li>Used to determine the proper fore color and then apply it with the next method.</li>
</ul></li>
<li><code>applyForeColor(Card c, String color)</code>

<ul>
<li>Used to apply the proper fore color.</li>
</ul></li>
</ul>

<p>To some it may seem a little redundant, but it cleans up code and ensures better readability.</p>

<h2>Use <code>switch</code> instead of <code>if-else if-else</code></h2>

<p>This one may not be recommended by all, but I believe it will help clean up the code since we've now broken your code down into individual methods. The <code>ApplyBackgroundColor</code> method has the largest <code>switch</code> structure, but this is due to the number of colors you can have.</p>

<pre><code>public static void applyBackgroundColor(Card c, String color) {
    switch (color) {
        case "YELLOW": c.backgroundColor = Color.yellow; break;
        case "PALEGREEN": c.backgroundColor = Color.green; break;
        case "ORANGE": c.backgroundColor = Color.orange; break;
        //...
        default: c.backgroundColor = Color.black; break;
    }
}
public static void determineAndApplyForeColor(Card c, String backgroundColor) {
    switch (backgroundColor) {
        case "YELLOW":
        case "DISABLE": applyForeColor(c, "BLACK"); break;
        default: applyForeColor(c, "WHITE"); break;
    }
}
public static void applyForeColor(Card c, String color) {
    switch (color) {
        case "WHITE": c.foreColor = Color.white; break;
        default: c.foreColor = Color.black;
    }
}
</code></pre>

<p>This is easy to expand on in the future and prevents you from having incredibly large logical structures.</p>

<h2>Loop over your Cards</h2>

<p>Now that all of that ground work has been laid out, you can loop over your <code>Card</code> collection and apply colors that way:</p>

<pre><code>for (int i = 0; i &lt; cards.size(); i++) {
    Card c = cards.get(i);
    applyCardColors(c, cardColors[i]);
    System.out.print(c.displayName + ": " +
                     c.backgroundColor + ", " +
                     c.foreColor + "\n");
}
</code></pre>

<p>Of course you'll need that other method I mentioned above to keep things separated:</p>

<pre><code>public static void applyCardColors(Card c, String backgroundColor) {
    applyBackgroundColor(c, backgroundColor);
    determineAndApplyForeColor(c, backgroundColor);
}
</code></pre>

<h2>Use the <code>enum</code> Values</h2>

<p>My heaviest recommendation is to use the predefined <code>enum</code> values that you're assigning so that you can prevent the <code>switch</code> structure and clean this code up even more:</p>

<pre><code>Color[] cardColors = new Color[] { Color.yellow, Color.green, Color.red };
List&lt;Card&gt; cards = new ArrayList&lt;Card&gt;();
cards.add(new Card(0, 0, "Card 1", "London", Color.black));
cards.add(new Card(0, 0, "Card 2", "Paris", Color.black));
cards.add(new Card(0, 0, "Card 3", "Dubai", Color.black));

for (int i = 0; i &lt; cards.size(); i++) {
  Card c = cards.get(i);
  c.backgroundColor = cardColors[i];
  applyForeColor(c, cardColors[i]);
  System.out.print(c.displayName + ": " +
                   c.backgroundColor + ", " +
                   c.foreColor + "\n");
}
</code></pre>

<p>The only part I had trouble with here was using the <code>switch</code> structure on the <code>enum</code> but this is due to my lack of knowledge in <code>Java</code>, I can do it as below in <code>C#</code>, but the online compiler I have didn't like it:</p>

<pre><code>public static void applyForeColor(Card c, Color backgroundColor) {
    switch (backgroundColor) {
      case Color.yellow: c.foreColor = Color.black; break;
      default: c.foreColor = Color.white; break;
    }
}
</code></pre>

<hr>

<p>Best of luck with your future endeavors!</p>
    </div>