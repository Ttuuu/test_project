<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Problems:</h3>

<ul>
<li><code>EnumerateSubstrings</code> and <code>ReadTo</code> do not work correctly with variable-width encodings, multi-byte encodings and surrogate pairs, because they do not take into account that characters can be split across buffer boundaries. This can cause a variety of problems.</li>
<li>In some cases, <code>ReadTo</code> fails to find the separator if it's longer than the buffer size (this always happens if the separator is more than twice as long).</li>
<li><code>ReadTo</code> also fails to detect matches across buffer boundaries when <code>separator</code> contains a prefix of itself and there's both a partial and a full match across the boundary. For example, try reading up to <code>"aab"</code> in <code>"..aaab.."</code> with a buffer size of 4. </li>
</ul>

<h3>Performance:</h3>

<ul>
<li>As has been pointed out already, <code>StringComparison.Ordinal</code> is a lot faster - because it just compares code point values without taking culture-specific rules into account. For example, a culture-aware comparison will see that <code>"\u00E9"</code> and <code>"e\u0301"</code> both represent an <code>Ã©</code>, but an ordinal comparison will treat them as unequal. Which one to choose first and foremost depends on the behavior you need.</li>
<li>The <code>StartsWith</code> and <code>EndsWith</code> checks are useless - <code>substring.IndexOf(separator)</code> already takes care of those situations.</li>
<li>For long separators, the <code>do-while</code> loop that checks if the buffer ends with a prefix of the given separator involves a fair amount of string allocations. If you need culture-specific string comparisons then it might be faster to combine the end of the last buffer with the current buffer so you can keep using <code>IndexOf</code>. If ordinal comparisons are fine for your purposes, then a modified Knuth-Morris-Pratt algorithm could be useful here. Both of these should also help with solving the cross-boundary partial matches problem.</li>
<li>Using an 8KB buffer is roughly 25% faster on my system. I'd recommend testing different sizes before deciding on a good (default) size.</li>
<li>Instead of first creating a substring with <code>string.Remove</code>, use the <code>StringBuilder.Append(string, int, int)</code> overload.</li>
</ul>

<h3>Other notes:</h3>

<ul>
<li>The encoding returned by <code>Encoding.Default</code> depends on system settings, which means you can get different results on different systems. <code>Encoding.UTF8</code> would be a safer default.</li>
<li>It would be nice if the <code>NotSupportedException</code> exception contained a message that said what exactly it doesn't support.</li>
<li>If you're going to guard against invalid parameters, then also be sure to check that the separator isn't null or empty. I'd also set the encoding and buffer size to some sane default value if they're null or too low, respectively.</li>
<li><code>ReadTo</code> contains a lot of superfluous comments. For example, the first check already makes it obvious that the method requires seeking, and the whole purpose of a <code>StringBuilder</code> is to build up strings efficiently. Repeating that in comments is just adding clutter.</li>
<li>I'd recommend using <code>var</code> to cut down on typename repetition.</li>
<li>Add some empty lines to break up long parts of code and to make it easier to distinguish between different 'blocks' of code (such as unrelated if statements).</li>
<li>Inconsistent use of braces makes it more difficult to see control flow, which makes it easier to make mistakes.</li>
<li>It's good to see methods being documented. A few minor things: 'the length of each substring' sounds like it's measured in characters, but it's actually the number of bytes. 'The size of the buffers' suggests that the methods use multiple buffers internally, so I'd make that singular instead.</li>
</ul>
    </div>