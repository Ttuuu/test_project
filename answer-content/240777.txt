<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First the obvious stuff: <a href="https://en.cppreference.com/w/cpp/thread/latch/arrive_and_wait" rel="nofollow noreferrer">the real <code>std::latch::arrive_and_wait</code></a> is specified to take a <code>ptrdiff_t</code> parameter that <em>defaults</em> to 1, but would also support e.g. <code>myLatch.arrive_and_wait(2)</code>. Also, there are more member functions than just <code>arrive_and_wait</code>.</p>

<p>I'd call your thing a "spinlatch" (by analogy to "spinlock"), because it doesn't actually put the thread to sleep â€” it has an operation named <code>arrive_and_wait</code> that doesn't actually do any waiting! It just keeps loading and loading the atomic variable until it sees zero.</p>

<p>To make it actually wait, you could use the also-new-in-C++20 <a href="https://en.cppreference.com/w/cpp/atomic/atomic/wait" rel="nofollow noreferrer">futex facilities of <code>std::atomic</code></a>, like this:</p>

<pre><code>void arrive_and_wait(int n = 1) {
    int current = (count -= n);
    if (current == 0) {
        count.notify_all();
    } else {
        while (current != 0) {
            count.wait(current);
            current = count.load();
        }
    }
}
</code></pre>

<p>No comment on the memory orders.</p>
    </div>