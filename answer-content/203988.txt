<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is reasonably clear and obvious, but has some severe inefficiencies.</p>

<p>First, let's pick up some simple oversights.  Both <code>isPalindrome()</code> and <code>longestPalindrome()</code> ought to have internal linkage (using either the <code>static</code> keyword or the anonymous namespace), and the <code>str</code> arguments should be reference to const:</p>

<pre><code>namespace {
    bool isPalindrome(const std::string&amp; str);
    int longestPalindrome(const std::string&amp; str, std::string&amp; palindromeStr);
}
</code></pre>

<p>In passing, we can simplify the interface of <code>longestPalindrome()</code>.  It doesn't need to return the string and its length; if we simply return the longest palindrome, then obtaining the length is trivial:</p>

<pre><code>    std::string longestPalindrome(const std::string&amp; str);

    // main() can now look like:
    //   std::string palindromeStr = longestPalindrome(str);
    //   std::cout &lt;&lt; palindromeStr.size() &lt;&lt; '\n';
    //   std::cout &lt;&lt; palindromeStr &lt;&lt; '\n';
</code></pre>

<p>The next oversight is that <code>std::string::length()</code> returns a <code>std::size_t</code>, so don't compare it with (signed) <code>int</code>:</p>

<pre><code>for (std::size_t i = 0, j = str.length()-1; i&lt;j; ++i, --j)
//   ^^^^^^^^^^^
</code></pre>

<p>Note that I've left a bug there (that's neatly missed because we always call this with a non-empty string): if <code>str.length()</code> is zero, then <code>j</code> starts at a very large positive value (because the subtraction is unsigned, and wraps).</p>

<p>BTW, there's a neat way to test a string for symmetry (at the expense of repeating the initial comparisons), using <code>&lt;algorithm&gt;</code>:</p>

<pre><code>static bool isPalindrome(const std::string&amp; str)
{
    return std::equal(str.begin(), str.end(), str.rbegin());
}
</code></pre>

<hr>

<p>Now to the matter of efficiency.  We're creating new string objects for every possible substring of the input.  That's a lot of copying.  We could reduce that by using <code>std::string_view</code>.</p>

<p>That's only part of the way towards an efficient solution, though.  We really need to change the algorithm.  My recommendation is to iterate over each character as a possible mid-point of an embedded palindrome, and at each position, determine what's the longest palindrome possible from there (in most cases, it will be 1 or 2 chars).  There's no need to consider longer substrings centred on that position once you have a failing case, so that eliminates much of the unnecessary work we're doing here.</p>

<p>Hint: for this we can use <code>std::make_reverse_iterator()</code> and <code>std::mismatch()</code>.</p>

<hr>

<p>Finally, the single test we have in <code>main()</code> isn't really enough.  At a minimum, we want examples of odd- and even-length palindromes, and also check that we handle the trivial case of empty string as input.</p>

<hr>

<h1>Update - using iterators</h1>

<p>I've developed the idea I hinted at in the second section; there's probably a little more scope for reducing duplication:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;

namespace
{
    template&lt;typename Iter&gt;
    // requires BidirectionalIterator(Iter)
    void updateBest(Iter forward_start,
                    Iter forward_end,
                    std::reverse_iterator&lt;Iter&gt; backward_start,
                    std::reverse_iterator&lt;Iter&gt; backward_end,
                    std::string_view&amp; best_so_far)
    {
        auto span = std::mismatch(forward_start, forward_end,
                                  backward_start, backward_end);
        auto start = span.second.base();
        auto end = span.first;
        std::string_view candidate{ &amp;*start, static_cast&lt;std::size_t&gt;(std::distance(start, end)) };
        if (candidate.size() &gt; best_so_far.size()) {
            best_so_far = candidate;
        }
    }

    std::string_view longestPalindrome(const std::string&amp; str)
    {
        std::string_view best_so_far;

        // Work out from the middle of the string
        auto const halfway = (str.size() + 1) / 2;

        // first, loop from midpont to end of string (but we can stop
        // when there's no room for a bigger palindrome)
        for (auto i = str.begin() + halfway;  i + best_so_far.length()/2 &lt; str.end();  ++i) {
            // test for odd-length palindrome
            updateBest(i, str.end(),
                       std::make_reverse_iterator(i), str.rend(),
                       best_so_far);
            // test for even-length palindrome
            updateBest(i + 1, str.end(),
                       std::make_reverse_iterator(i), str.rend(),
                       best_so_far);
        }

        // then, loop from midpont to beginning of string (but stop
        // when there's no room for a bigger palindrome)
        for (auto i = str.rbegin() + halfway;  i + best_so_far.length()/2 &lt; str.rend();  ++i) {
            // test for odd-length palindrome
            updateBest(i.base(), str.end(),
                       i, str.rend(),
                       best_so_far);
            // test for even-length palindrome
            updateBest(i.base(), str.end(),
                       i + 1, str.rend(),
                       best_so_far);
        }

        return best_so_far;
    }

}


int main()
{
    for (std::string s: { "",
                "forgeekskeegfor",
                "abc abc",
                "forgeeksskeeg",
                "geeksskeegfor" }) {
        auto palindromeStr = longestPalindrome(s);
        std::cout &lt;&lt; "Found palindrome of length " &lt;&lt; palindromeStr.size()
                  &lt;&lt; " in " &lt;&lt; s &lt;&lt; ": " &lt;&lt; palindromeStr &lt;&lt; '\n';
    }
}
</code></pre>
    </div>