<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code and style</h2>

<ul>
<li>Many variables you have declared can be constants <code>const</code> rather than <code>let</code>.</li>
<li>Element properties defined in the DOM do not need to be set via <code>setAttribute</code> eg <code>canvas.setAttribute("width", canvasWidth);</code> can be <code>canvas.width = canvasWidth</code></li>
<li><code>window</code> is the global this. You do not need to specify it. eg <code>window.requestAnimationFrame</code> can be <code>requestAnimationFrame</code>, <code>window.addEventListener(</code> as <code>addEventListener</code> </li>
<li>Declare functions using statements (a function declaration) rather than expressions. eg <code>var funcName = function() {</code> is better as <code>function funcName() {</code> because function <strike>statements</strike> seclarations are hoisted, while function expressions are not.</li>
<li>Try to avoid <code>for(let</code> as this pattern has some additional memory and assignment overhead, it also has some very unusual behavior that can catch the unwary. eg in the function <code>initTransition</code> the 3 loop counters <code>x,y,z</code> are better declared as function scoped <code>var</code></li>
<li>Try to keep variable names short and concise. They only exist within the scope they are declared in and as such gain much of their semantic meaning from that scope. eg <code>numberOfPixelsToInit</code> is a sentence and <code>pixelLen</code>, <code>pixels</code>, or just <code>size</code> would fit the role.</li>
<li>Don't reassign variables if you don't need to. Eg you declare and define <code>let xProgress = [];</code> and the first time you use it you reassign an array to it in <code>initTransition</code>. In this case rather than create a new array just empty the array with <code>xProgress.length = 0</code> and then you can define it as a <code>const xProgress</code></li>
<li>There is no need to do the double floor. Eg <code>Math.floor(Math.random() * Math.floor(spread));</code> can be <code>Math.floor(Math.random() * spread);</code> and will produce the same result. You can use the shorter form if the value is positive 32bit signed integer <code>Math.random() * spread | 0</code> bitwise <code>|</code> (OR) 0 to floor. All bitwise operations will convert the Number to a signed 32bit integer. </li>
<li>Use aliases to reduce overhead of compound property lookups. eg <code>const lineHeight = config.lineHeight;</code> in function <code>initTransition</code> so you need not have the lookup overhead in the loops</li>
<li>Variables <code>SideEnum</code> and <code>Pass</code> should start with lowercase. PascalCase naming is reserved for functions called with the <code>new</code> token</li>
<li>Always use <code>addEventListener</code> to add event, adding events via the named event should be avoided. eg <code>startButton.onclick = function() {</code> should be <code>startButton.addEventListener("click", ....</code></li>
</ul>

<p>There are more issues however your use of <code>getImageData</code> and <code>setImageDate</code> is a major point of concern so I have spent the time creating an example rather than stepping through your code line by line.</p>

<h2>Question</h2>

<blockquote>
  <p><em>"One thing in particular is I declared the color function inside the colorSwoosh function to make it private to that function as a form of encapsulation, I'm unsure about whether this is a good thing."</em></p>
</blockquote>

<p>Neither good nor bad. </p>

<p>Modern JS has modules that will encapsulate the content to the modules scope so if you used a module <code>color</code> as a function would be fine in modules main scope.</p>

<p>If you don't use modules use IIF pattern and to encapsulate. IIF is an immediately invoked function. The function is created <code>(function(){})()</code> and the brackets at the end call it. The function will close over and encapsulate the content. You can return an interface if needed. </p>

<h3>IIF</h3>

<pre><code>const myFX = (() =&gt; {

    // all the code vars and functions within the IIF scope
    const myPrivateConst = "foo";
    var myPrivateVar;
    function myPrivateFunction() {}



    // Define an interface if you need to access outside this scope
    const API = {
        someStartFunction() { /* do stuff */ }, 
        someOtherStuff() { /* do stuff */ }, 
        stopStuff() { /* do stuff */ }, 

    };
    return API

})();
</code></pre>

<h2>GPUs do pixels, not CPUs</h2>

<p><code>setImageData</code> and <code>getImageData</code> are frame rate killers, if you use them to animate you are doing it wrong.</p>

<h2>Using the GPU via canvas 2D API</h2>

<p>The example below attempts to mimic your wipe animation without using image data and CPU to process pixels. Rather it uses the GPU (via 2D API) to manipulate pixels and lets the CPU handle timing and setting up.</p>

<p>I could not work out (too many options) just what you wanted it to look like so the example is very basic and just wipes right to left.</p>

<p>It uses a mask image (canvas that is not displayed) that on the first swipe reduces pixel alpha to show the canvas background (white) and on the chasing swipe refills the pixels to the final swipe color (black).
Will resize to fit page once media has loaded. Resize will reset animations. Click to restart wipe FX. If media can not be found animation will not start.</p>

<p>There are comments where I think you need them. I have used your image, I hope that is OK and you have rights to use?</p>

<h3>Example</h3>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/*
   Notes
   Display canvas alpha setting must be true as the canvas background will be the first wipe colour (white in this example)
   Frame rate is assumed constant at 60 fps
   I am assuming you have usage rights and I am using this image under assumption of fair use in response
    to your question https://codereview.stackexchange.com/questions/226919/screen-transition-effect-like-in-final-fantasy-games
   
*/

requestAnimationFrame(mainLoop); // request first frame. This starts the main animation loop. will not reader till ready
var update = true;     // When true render content 
var ready = false;     // When content loaded and ready to animate
const FRAME_RATE = 60; // Per second. This does not set frame rate

// settings for the alpha gradient used in the FX
const GRAD_RES = 1 / 40; // resolution of grad curve, no smaller than 1/GRAD_WIDTH
const GRAD_POW = 4.2;    // Ease power of grad curve
const GRAD_WIDTH = 256;  // 256 to match max alpha steps

const config = {
    imgURL: "https://gilles-leblanc.github.io/ff8-transition/ff8.jpg",
    image: new Image(),
    width: innerWidth,
    height: innerHeight,
    spread: 0.6,      // fraction of display size. Max spread amount
    spreadMin: 0.2,   // fraction of display size. Min spread amount
    lineHeight: 4,    // in pixels
    wipeBOffset: 0.5, // distance behind first swipe of second swipe in fractions of display width * 2
                      // if wipeBOffset &gt; 1 then second swipe will not happen
                      // MUST be greater than 0 
    wipeStrength: 0.1,// alpha setting of wipe FX
    wipeTime: 1,      // in seconds. MUST!!! be greater than 1/60 second
    wipeEase: 2,      // strength of wipe ease. if 1 no ease,0 &lt; val &lt; 1 ease out, 1 &lt; val ease in
    waitTime: 0.5,    // in seconds, time to wait after FX before displaying info
    font: "32px Arial Black", // font to render info
    infoColor: "white",       // Color to render info. MUST BE VALID css color
    info: "Click to repeat!", // text displayed after wipe complete
    wipeAColor: "#FFF",       // WipeA colour  MUST be valid CSS color
    wipeBColor: "0,0,0,",     // WipeB colour  R,G,B parts of CSS color format rgba(R,G,B,A)
};
config.image.src = config.imgURL;
config.image.addEventListener("load", setup);

const animation = {
    wipeA: { posX: 0,},
    wipeB: { posX: 0,},
    waitForInfo: 0,
    active: false,
    speed: 0, 
    reset() {
        animation.waitForInfo = config.waitTime * FRAME_RATE | 0;
        animation.active = true;
        animation.wipeA.posX = 1;
        animation.wipeB.posX = 1 + config.wipeBOffset;
        animation.speed = (config.width / (config.wipeTime * FRAME_RATE)) / config.width;
        config.display.ctx.drawImage(config.image, 0, 0, config.width, config.height);
    },
    render() {
        const ctx = config.display.ctx;
        const mask = config.mask;
        animation.wipeA.posX -= animation.speed;
        animation.wipeB.posX -= animation.speed;
        var x = calcEasePos(animation.wipeA.posX);
        animation.active = false;
        ctx.globalAlpha = config.wipeStrength;
        if (x &lt; config.width &amp;&amp; x &gt; -config.width) {
            ctx.globalCompositeOperation = "destination-out";
            ctx.drawImage(mask, x, 0);
            ctx.globalCompositeOperation = "source-over"; 
            animation.active = true;
        }
        x = calcEasePos(animation.wipeB.posX);;
        if (x &lt;= config.width &amp;&amp; x &gt; -config.width * config.spread) {
            ctx.drawImage(mask,x,0);
            // fill rect that is trailing edge of this swipe
            ctx.fillStyle = `rgba(${config.wipeBColor}1)`;
            ctx.fillRect(x + config.width,0,ctx.canvas.width, ctx.canvas.height);            
            animation.active = true;
        }
        ctx.globalAlpha = 1;
    },
        
}
function calcEasePos(unitPos) {
    return  unitPos &gt; 1 ? config.width + 1 :
       unitPos &lt; 0 ? -config.width : unitPos ** config.wipeEase * config.width * 2 - config.width;
}

function createCanvas(width, height) {
    return Object.assign(document.createElement("canvas"), {width, height});
}
function createGradient(ctx) {
    var i;
    const grad = ctx.createLinearGradient(0, 0, GRAD_WIDTH, 0);
    grad.addColorStop(0, `rgba(${config.wipeBColor}0)`); // from alpha 0 on the left
    for (i = GRAD_RES; i &lt; 1; i += GRAD_RES) {  // Create logarithmic curve on gradient       
        grad.addColorStop(i, `rgba(${config.wipeBColor}${i ** GRAD_POW})`); 
    }
    grad.addColorStop(1, `rgba(${config.wipeBColor}1)`); // to alpha 1 on the right
    return grad;
}
function drawFinalfade() { // after wipeB complete this ensures that canvas color ends up matching desired color
    const ctx = config.display.ctx;
    ctx.globalAlpha = config.wipeStrength;
    ctx.fillStyle = `rgba(${config.wipeBColor}1)`;
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    ctx.globalAlpha = 1;
}
function displayInfo() {
    const ctx = config.display.ctx;
    ctx.font = config.font;
    ctx.textAlign = "center";
    ctx.textbaseline = "middle";
    ctx.fillStyle = config.infoColor;
    ctx.fillText(config.info , config.width / 2, config.height / 2);
}
function createMask() { 
    var y;
    const can = createCanvas(config.width, config.height), ctx = can.getContext("2d");
    const spread = config.width * (config.spread - config.spreadMin), lineH = config.lineHeight;
    const spreadMin = config.width * config.spreadMin;
    const spreadRange = config.width * config.spread;
    const grad = createGradient(ctx);
    ctx.fillStyle = `rgba(${config.wipeBColor}1)`; // filling right side of mask
    ctx.fillRect(spreadRange, 0, config.width - spreadRange  | 0, config.height);
    
    // render each row scaling (via setTransform) the gradient to fit the random spread
    ctx.fillStyle = grad;
    for (y = 0; y &lt; config.height; y += lineH) {
        const size = Math.random() * spread  + spreadMin | 0
        const scale = size / GRAD_WIDTH;
        ctx.setTransform(scale, 0, 0, 1, 0, y);  // only scale x axis 
        ctx.fillRect(0, 0, spreadRange * GRAD_WIDTH / scale, lineH);
    }
    ctx.setTransform(1, 0, 0, 1, 0, 0); // restore default transform
    return can;
}
function createDisplay() {  // Main render canvas added to document.body
    const can = createCanvas(config.width, config.height);    
    can.style.backgroundColor = config.wipeAColor;
    const ctx = can.ctx = can.getContext("2d", {alpha : true});
    ctx.drawImage(config.image, 0, 0, can.width, can.height);
    document.body.appendChild(can);  // There should be a CSS rule for canvas element
    can.addEventListener("click",() =&gt; {
        if (!animation.active) {
            animation.reset();
            update = true;
        }
    });
    return can;
}
function setup() { // call once only
    config.display = createDisplay();
    config.mask = createMask();
    animation.reset();
    ready = update = true;
    setup = undefined; // This will force an exception if setup is called a second time
}
    
function mainLoop() {
    if (ready) { // if ready check for resize
        if (innerWidth !== config.width || innerHeight !== config.height) {
            config.display.width = config.width = innerWidth;
            config.display.height = config.height = innerHeight;
            config.mask = createMask();
            animation.reset();
            ready = update = true;
        }
    }
        

    if (ready &amp;&amp; update) { // Avoid unneeded rendering
        if (animation.active) {
            animation.render();
            update = true; 
        } else {
            if (animation.waitForInfo) {
                drawFinalfade();
                animation.waitForInfo --;
                update = true; 
            } else {
                update = false; // stops rendering
                displayInfo();
            }
        }
    }
    requestAnimationFrame(mainLoop);
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>canvas {
  position: absolute;
  left: 0px;
  top: 0px;
}</code></pre>
</div>
</div>

    </div>