<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Might I recommend the following design to you?</p>

<pre><code>class RotatedArray {
    vector&lt;int&gt; data;
    int shift;
public:
    RotatedArray(const vector&lt;int&gt;&amp; _data) : data(_data) {}
    //maybe do the constructor over a file or with a move, that would be more efficient
    rotate(const unsigned int amount_rotations = 1){
        shift -= amount_rotations;
    }
    const int&amp; operator[](const size_t i) const {
        return data[((int) i + shift) % data.size()];
    }
};
</code></pre>

<p>While there were already answers that recommend the basic strategy of using modulo instead of actually rotating, nobody suggested using a class. If you have some behavior that something should have, then the OO way is to make it a class.</p>

<p>It might seems that using a class is a minor addition, but if you want to do C++, then go with classes. Right now, if somebody would not know what your code is supposed to do, he'd have to spend quite some time thinking before doing anything with it. Also, the original exercise might call things like n, k and q, but I strongly recommend to give them descriptive names, like size or queries. In any case, your main should contain like 3 to 5 lines and not a big procedural approach.</p>

<p>Wrote the implementations in the header here for simplicity of this answer, of course those should be written in a source file.</p>
    </div>