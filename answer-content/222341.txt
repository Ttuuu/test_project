<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd take a slightly different approach.  Rather than include the n/2 loop in both the Fibonacci and prime code, I'd make it external and turn these two programs into simpler, infinite generators that are easier to debug:</p>

<pre><code>'''
Given a series in which the odd terms forms the Fibonacci series and even
terms form the prime number series, this program finds the nth term.
'''

def fibonacci():
    ''' Generator that continuously yields fibonacci numbers. '''

    a, b = 0, 1

    while True:
        a, b = b, a + b

        yield a

def primes(known_odd_primes=[3]):  # dangerous default value
    ''' Generator that continuously yields prime numbers. '''

    yield 2

    for prime in known_odd_primes:
        yield prime

    odd = known_odd_primes[-1] + 2

    while True:
        for divisor in known_odd_primes:

            if divisor * divisor &gt; odd:
                yield odd
                known_odd_primes.append(odd)
                break

            if odd % divisor == 0:
                break

        odd += 2

def sequence(n):

    '''
    Find nth element of sequence whose odd terms are from the Fibonacci
    series and whose even terms are from the prime number series.
    '''

    if n % 2:
        fibonacci_generator = fibonacci()

        for _ in range(n // 2):
            nth = next(fibonacci_generator)
    else:
        prime_generator = primes()

        for _ in range((n + 1) // 2):
            nth = next(prime_generator)

    return nth

if __name__ == "__main__":
    n = int(input('Enter a positive number: '))

    print(sequence(n))
</code></pre>

<p>EXAMPLE:</p>

<pre><code>&gt; python3 test.py
Enter a positive number: 100000
611953
&gt;
</code></pre>
    </div>