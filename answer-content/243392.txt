<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This works, but is essentially O(N**2); you can make it O(N) fairly easily by turning your whitelist/blacklist into dicts:</p>

<pre><code>def __init__(self, users_filepath, whitelist_filepath, blacklist_filepath):
    """
    Get filepaths and load the following files: users file , whitelist file and blacklist file

    users_filepath: Path to a text file which contains the raw output of the 'rcon users' in the in-game console.
    whitelist_filepath: Path to a csv file which contains Steam IDs and player-names of the white-listed players.
    blacklist_filepath: Path to a csv file which contains Steam IDs, player-names and alert-message for the black-listed players.
    """
    with open(users_filepath) as f:
        self.users_rawcontents = f.read()
    raw_whitelist = list(csv.DictReader(open(whitelist_filepath)))
    raw_blacklist = list(csv.DictReader(open(blacklist_filepath)))
    self.whitelist = { p['Steam_ID']: p for p in raw_whitelist }
    self.blacklist = { p['Steam_ID']: p for p in raw_blacklist }

def get_playername(self, steamid, player_records):
    """
    Function to return name of a person if steamid exits in given records 
    and return 'Unknown' otherwise.
    """
    return player_records.get(steamid, 'Unknown')
</code></pre>

<p>So instead of iterating over the entire list of player_records every time you look someone up, it iterates over your whitelist and blacklist each <em>once</em> at startup-time, making them thereafter be O(1) to search by steamid (which is the only kind of search you ever do).</p>
    </div>