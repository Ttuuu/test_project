<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Use all required <code>#include</code>s</h2>

<p>The templated class uses <code>CHAR_BIT</code> but is missing this line that provides the definition:</p>

<pre><code>#include &lt;climits&gt;
</code></pre>

<h2>Eliminate unused variables</h2>

<p>The variable <code>input</code> in several tests in your code is defined but never used.  Since unused variables are a sign of poor code quality, you should seek to eliminate them.  Your compiler is probably smart enough to warn you about such things if you know how to ask it to do so.</p>

<h2>Be careful with naming</h2>

<p>I'm not sure how useful it is to take care to wrap things into a namespace, but then use the name <code>common</code> for it.  It isn't necessarily wrong, but it's worth pondering whether there's a better, more apt name for the namespace.</p>

<h2>Keep maintaining the tests</h2>

<p>The tests are quite good.  I was able to translate them all into the standard, non-Microsoft <a href="https://sourceforge.net/projects/cppunit/" rel="noreferrer">CppUnit</a> in a few minutes.  All tests passed on my 64-bit Linux box using gcc.</p>

<h2>Let the compiler generate the empty constructor</h2>

<p>Instead of explicitly writing the empty constructor, explicitly tell the compiler to construct it instead:</p>

<pre><code>bitpattern() = default;
</code></pre>

<p>The intent is a bit more clear in my opinion.</p>

<h2>Consider adding some constructors</h2>

<p>At the moment this code won't compile:</p>

<pre><code>  std::array&lt;uint8_t, 3&gt; input = { 0b0010'0011, 0b0000'0001, 0b0110'0001 };
  bitpattern&lt;24&gt; pattern1(input);
  bitpattern&lt;22&gt; pattern2(input);
  bitpattern&lt;24&gt; pattern3(pattern2);
</code></pre>

<p>It would be nice to have the ability to create longer bit patterns from smaller ones.</p>

<p>It would also be nice to provide <code>constexpr</code> constructors for patterns like this:</p>

<pre><code>  constexpr bitpattern&lt;23&gt; pattern{0x6423};
</code></pre>

<p>Here's a way to do that:</p>

<pre><code>constexpr bitpattern(unsigned long long val) 
{
    for (std::size_t i=0; i &lt; ByteCount; ++i) {
        _bit_container[i] = val &amp; 0xff;
        val &gt;&gt;= 8;
    }
}
</code></pre>

<p>Note that this uses <code>for</code> loop in a <code>constexpr</code> function and uses the <code>operator[]</code> on the <code>std::array</code> and so requires C++17 or later.</p>

<h2>Consider adding <code>operator[]</code></h2>

<p>The <code>std::bitset</code> uses <a href="https://en.cppreference.com/w/cpp/utility/bitset/reference" rel="noreferrer"><code>std::bitset::reference</code></a> to enable <code>operator[]</code>.  You could probably do the same.  Note that there are two flavors; one is <code>constexpr</code> and returns an actual <code>bool</code> and the other returns a <code>reference</code> object.  Here's one way to do that.  First, here's the <code>reference</code> class which is in the <code>public</code> section of the <code>bitpattern</code> class:</p>

<pre><code>class reference {
friend class bitpattern&lt;bit_count&gt;;
public:
  reference&amp; operator=(bool x) { 
      if (x) {
          *ptr |= mask;
      } else {
          *ptr &amp;= ~mask;
      }
      return *this;
  }
  reference();  // leave undefined
  reference&amp; operator=(const reference&amp; x) {
      bool bit{x};
      if (bit) {
          *ptr |= mask;
      } else {
          *ptr &amp;= ~mask;
      }
      return *this;
  }
  ~reference() = default;
  operator bool() const {
      return *ptr &amp; mask;
  }
  bool operator~() const {
      return !(*ptr &amp; mask);
  }
  reference&amp; flip() {
      *ptr ^= mask;
      return *this;
  }

private:
  reference(uint8_t *ptr, uint8_t mask) :
    ptr{ptr}, mask{mask} {} 
  uint8_t *ptr;
  uint8_t mask;
};
</code></pre>

<p>Here are the two types of <code>operator[]</code>:</p>

<pre><code>constexpr bool operator[](std::size_t index) const
{
  return _bit_container[index / CHAR_BIT] &amp; (1u &lt;&lt; (index % CHAR_BIT));
}

reference operator[](std::size_t index) 
{
  _throw_if_too_large(index);
  return reference{&amp;_bit_container[index / CHAR_BIT], 
      static_cast&lt;uint8_t&gt;(1 &lt;&lt; (index % CHAR_BIT))};
}
</code></pre>

<p>Note that the <code>constexpr</code> can't throw, so providing an out-of-range index is simply <em>undefined behavior</em> as with <code>std::bitset</code>.</p>

<h2>Add tests for <code>operator[]</code></h2>

<p>Here are the tests I addeed for the new <code>operator[]</code>:</p>

<pre><code>void ConstexprIndexOperatorReturnsTheValueOfTheSpecifiedBit()
{
  constexpr bitpattern&lt;23&gt; pattern{0x2b64};
  constexpr bool is_set     =  
                     pattern[2]  &amp;&amp;
                     pattern[5]  &amp;&amp;
                     pattern[6]  &amp;&amp;
                     pattern[8]  &amp;&amp;
                     pattern[9]  &amp;&amp;
                     pattern[11] &amp;&amp;
                     pattern[13];
  constexpr bool is_not_set = 
                    !pattern[0]  &amp;&amp;
                    !pattern[1]  &amp;&amp;
                    !pattern[3]  &amp;&amp;
                    !pattern[4]  &amp;&amp;
                    !pattern[7]  &amp;&amp;
                    !pattern[10] &amp;&amp;
                    !pattern[12] &amp;&amp;
                    !pattern[14] &amp;&amp;
                    !pattern[15];
  CPPUNIT_ASSERT(is_set &amp;&amp; is_not_set);
}

void IndexOperatorReturnsTheValueOfTheSpecifiedBit()
{
  bitpattern&lt;23&gt; pattern{0x2b64};
  bool is_set     =  
                     pattern[2]  &amp;&amp;
                     pattern[5]  &amp;&amp;
                     pattern[6]  &amp;&amp;
                     pattern[8]  &amp;&amp;
                     pattern[9]  &amp;&amp;
                     pattern[11] &amp;&amp;
                     pattern[13];
  bool is_not_set = 
                    !pattern[0]  &amp;&amp;
                    !pattern[1]  &amp;&amp;
                    !pattern[3]  &amp;&amp;
                    !pattern[4]  &amp;&amp;
                    !pattern[7]  &amp;&amp;
                    !pattern[10] &amp;&amp;
                    !pattern[12] &amp;&amp;
                    !pattern[14] &amp;&amp;
                    !pattern[15];
  CPPUNIT_ASSERT(is_set &amp;&amp; is_not_set);
}
</code></pre>
    </div>