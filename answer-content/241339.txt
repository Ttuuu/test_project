<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some thoughts while I read through your code:</p>

<hr>

<blockquote>
  <p>I just wanted to put my code into named functions to make the code Column formatting code easy to read and the functions did not seem "Column File" centric so I placed them in a separate class.</p>
</blockquote>

<p>Good idea.</p>

<hr>

<pre><code>static constexpr iostate const&amp; goodbit   = std::ios_base::goodbit;
</code></pre>

<p>Are all the lines that look like this really necessary?  Do you really need to have this stuff in your own namespace?</p>

<hr>

<pre><code>struct FileSystem
</code></pre>

<p>This struct has no state.  Could be a namespace.</p>

<hr>

<pre><code>using StatusInfo = struct stat;
</code></pre>

<p>This kind of thing is a common practice so maybe some readers will like it, but I think it's easier to just see <code>struct stat</code>.  One day, someone may refactor your code and move the definition of <code>StatusInfo</code> away from some of the uses.  Then any new developers will have to look it up.  Also, nothing is stopping you from ending up with uses of <code>struct stat</code> AND <code>StatusInfo</code> mixed together which would be pointless.</p>

<p>Also, <code>stat</code> is an unfortunate name because it's short and generic, but <code>StatusInfo</code> is only longer -- it's still generic.  If you have to alias it, how about <code>FileStatusInfo</code>?</p>

<hr>

<pre><code>for (std::size_t pos = path.find('/'); pos != std::string::npos; pos = path.find(pos + 1, '/'))
</code></pre>

<p>I see what you're going for.  This is fine, but the repeated check for <code>/</code> is not ideal.  How about something like:</p>

<pre><code>for (std::size_t pos = -1; pos != std::string::npos; /*in loop*/) {
    pos = path.find(pos + 1, '/');
</code></pre>

<p>This might be controversial!</p>

<hr>

<pre><code>path.find('/')
</code></pre>

<p>This gives up portability and makes me worry about paths that have <code>//</code> or <code>/./</code>. Maybe these things don't matter for your use case?</p>

<hr>

<pre><code>stat(subPath.c_str(), &amp;info)
</code></pre>

<p>What's this intended to do?  You never read <code>info</code>.  It sounds like you're using it to check if a file/dir exists?  <code>stat</code> can fail for a lot of reasons...</p>

<hr>

<pre><code>((stat(subPath.c_str(), &amp;info) != 0) &amp;&amp; (mkdir(subPath.c_str(), permissions) != 0))
</code></pre>

<p>First off it's good you are checking API return values. But...</p>

<p>Suppose this happens:</p>

<ol>
<li><p><code>stat(subPath.c_str(), &amp;info)</code> returns non-zero presumably to say "the file/dir doesn't exist"</p></li>
<li><p>Another process completely reorganizes the filesystem and permissions.</p></li>
<li><p>You call <code>mkdir(subPath.c_str(), permissions)</code></p></li>
</ol>

<p><code>mkdir</code> will fail (and you check for that)... but then what was the point of <code>stat</code>?  The idea of looping through parts of a directory has the same problem.  You may be able to create one directory, but then you fail.  Now the filesystem has a random directory in it.</p>

<p>That might seem like a rare, not-so-bad occurrence.  But if you use this function enough times on enough computers, it becomes likely that someone will have a problem because of a bug like that.  Weird environments can systematically expose "unlikely" bugs and lead to out-of-memory errors or extremely slow filesystems.</p>

<p>The common solution is to create files and if any of the creations fail, then delete the ones you already created.  This is hard to get right but most operating systems have APIs to help.</p>

<hr>

<p>It's a little suspicious that you have a loop of <code>stat &amp;&amp; mkdir</code> and then after the loop make the same syscalls.  Can those be part of the loop?</p>

<hr>

<p>The idea of <code>isFileOpenable</code> suffers from the same problem as the loop above; the file might be openable when you asked, but it might become un-openable immediately after that.</p>

<p>It's much easier to handle filesystem failures than to try and lock files, check their status, do things, then unlock.  </p>

<hr>

<pre><code>removeFileOrDirectory
</code></pre>

<p>This function looks good, but maybe you could simply expose <code>remove</code> from cstdlib?</p>

<hr>

<p>Closing thoughts:</p>

<p>I think this is good code for a personal project or learning about the filesystem APIs, but you haven't handled a lot of the classic problems with filesystem libraries e.g. race conditions and weird failures.  C++ has <code>std::filesystem</code> which can do most of this.  <code>std::filesystem</code>'s API will try to force you do reasonable things.</p>
    </div>