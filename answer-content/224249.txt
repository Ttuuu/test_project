<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd still say that you should break apart the mail message and SMTP client into separate classes for the "Single responsibility principle". In specific:</p>

<blockquote>
  <p>A class should only have a single responsibility, that is, only changes to one part of the software's specification should be able to affect the specification of the class.</p>
</blockquote>

<p>This is usually where you have a <code>MailFactory</code> and a <code>SmtpClientFactory</code> that are injected into the class that actually does the sending (<code>MailSender</code>). The injection (by abstract, so interfaces) would be set into the <code>MailSender</code> to fulfill the "Dependency inversion principle"</p>

<blockquote>
  <p>One should "depend upon abstractions, [not] concretions."</p>
</blockquote>

<p><em>Side Note</em></p>

<p>This would also let you reduce <code>MailFactory.CreateMailMessage</code> to <code>MailFactory.Create</code> (and <code>SmtpClientFactory.CreateSmtpClient</code> to <code>SmtpClientFactory.Create</code>) but that isn't directly related to SOLID. You can get why in various API naming conventions, but the short answer is that it would be redundant.</p>

<p><em>Expansion</em></p>

<p>A reason for this is when you do unit testing. We have an abstract mail client that just sticks messages into an in-memory list in the order they are sent. That way, we can inject it into the sender as <code>ISmtpClientFactory</code> and the rest of the code still works, not knowing that we have taken out the entire implementation of the sending for testing.</p>

<p><em>Edit 2</em></p>

<p>You also want to avoid <code>static</code> in general. It is implied by "injecting" but I figured I'd clarify that. Create factory instances and pass them in. That way you can swap them out.</p>
    </div>