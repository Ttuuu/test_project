<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Working from @JoopEgen answer, i wrote a numpy version that will usualy speed up the whole thing by a huge factor (but since no data are given, i cant test it...)</p>

<p>Well, while doing it, i remarked that you use : </p>

<pre><code>for i in range(len(lista[1])):
    ...
    lista[1][i-1]
</code></pre>

<p>which is wierd. I then consider that you intended that the last value will be used as the first, as a previous comment proposed. Anyway here is a probably faster version :</p>

<pre><code>import numpy as np

# Rename all this and make them numpy arrays to profit from broadcasting :
x = [np.array(lista[n]) for n in [1,2,3,6,7]] # becomes 0,1,2,3,4
x.append(np.array(lista[8]) == 'intended value') # 5
x.append(np.array(listc[0])) # 6
x.append(np.array(listc[1])) # 7
x.append(x[0]) # 8
for j in np.arange(len(lista[1])):
    x[8][j] = lista[3,j-1] # the shifted values for the last conditions.

# the final values for the output :
val = np.array(listc[2])

# Selectors :
common = (x[1] == x[6]) &amp; ((x[7] &lt;= x[2]) | (x[7] &gt;= x[1]))
red = common &amp; ((x[3] &lt;= x[7]) &amp; (x[7] &lt;= x[4]) &amp; x[5]) | ((x[4] &lt;= x[7]) &amp; (x[7] &lt;= x[2]) &amp; (~x[5]))
gre = common &amp; ((x[1] &lt;= x[7]) &amp; (x[7] &lt;= x[3]) &amp; x[5]) | ((x[1] &lt;= x[7]) &amp; (x[7] &lt;= x[4]) &amp; (~x[5]))
bla = common &amp; ( x[8] &lt;= x[7]) &amp; (x[7] &lt;= x[1])

# the result :
output = np.array([val,val[reds],val[greens],val[blacks]])
</code></pre>
    </div>