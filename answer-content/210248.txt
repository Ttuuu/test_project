<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your INSERT script:</p>

<ul>
<li>Use your config.php file everywhere instead of hardcoding your connection credentials.</li>
<li>You should be checking that the POST elements actually exist before trying to access their values as a matter of best practice.  I'd probably use a null coalescing operator or perhaps one giant <code>isset()</code> conditional (<code>isset()</code> can handle multiple arguments).</li>
<li>If this was my script, I'd probably incorporate stronger validation checks on each incoming value so that the database is kept clean and meaningful.  Rather than tell the user when something is missing, ratchet up the value requirements and inform the user that an expected value didn't have the expected format and describe in detail what is expected (dob format, email, bloodtype, gender etc).</li>
<li>I'll recommend object-oriented mysqli syntax because it is more concise and in my opinion easier to read and maintain.</li>
<li>Using a prepared statement will avoid all of that bloat with value escaping.</li>
<li>You must never provide the actual mysql error when your application is public.</li>
</ul>

<p>In your UPDATE script:</p>

<ul>
<li>I don't know that I like the chained declaration of default empty strings for so many values -- it has a negative impact on readability and maintainability for a slight (unnecessary) benefit in script length.</li>
<li>You should be checking that the POST elements actually exist before trying to access/<code>trim()</code> their values as a matter of best practice.  I'd probably write the <code>trim()</code> call in the else portion of the condition block.</li>
<li><code>isset($_POST["id"]) &amp;&amp; !empty($_POST["id"])</code> is a redundant check, just remove the <code>isset()</code> condition because <code>!empty()</code> will accomplish the same thing.</li>
<li>Rather than using lots of similar yet separate <code>_err</code> variables, just create an <code>$error</code> array and if there are any invalid values passed, just push them into the array.  When deciding to proceed with the update query, just check the size of the error array.  If <code>!sizeof($errors)</code>, then perform the update, else display all of the invalid values.</li>
<li>Rather than trimming <code>$id</code>, just cast it as an integer with <code>(int)</code>.</li>
<li>Jamming a value attribute like <code>value="&lt;?php echo $workposition; ?&gt;"</code> is not going to work in your <code>&lt;select&gt;</code> fields.</li>
</ul>

<p>As a matter of personal preference, I tend to write all my negative/failure/error outcomes before my successful outcomes in my condition blocks.  By writing the SELECT statement last, you can move directly into your html form portion which should make things easier to associate and debug.</p>

<p>Try to avoid single-use variable declarations.  If they improve the readability of your code, that can be a sound justification.  However, generally your code will be easier to maintain if you have fewer variables in your global scope.</p>

<p>Finally, because you are processing multibyte characters, be sure to do <a href="https://stackoverflow.com/q/279170/2943403">UTF-8 All The Way Through</a>.</p>
    </div>