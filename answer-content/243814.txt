<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Regardless of whether you choose to use procedural or object-oriented syntax, you should definitely make a distinct separation in your script between the "processing" and "displaying" parts.  In other words, don't park you function declarations inside your html table.</li>
<li>To defend your script from users hand-crafting/hacking the board layout, you could use SESSION variables to store the previous plays, then only submit the new play on each page load.  This will help you to validate that the new play is available on the board.</li>
<li>I don't recommend the use of <code>-1</code>, <code>0</code>, and <code>1</code> to mark the game board -- it is not instantly intuitive to other programmers.  Furthermore, you have to translate these values into <code>X</code>, <code>O</code>, <code>&amp;nbsp;</code>. I recommend using the values <code>X</code>, <code>O</code>, and <code> </code>(space) so that all characters are repesented by a single-byte. This new structure will allow you to pass the whole board as a nine-character string without imploding.</li>
<li>When presenting the board/table, use <code>array_chunk()</code> to avoid modulus-based conditions.</li>
<li>See this other tic-tac-toe review of mine that shows how to concisely and directly assess a game board using regex: <a href="https://codereview.stackexchange.com/a/243502/141885">https://codereview.stackexchange.com/a/243502/141885</a></li>
<li>Rather than asking php to make looped guesses in <code>OsTurn()</code>, I recommend that you create an array of the available spaces on the board and make a single random selection from that pool to avoid unproductive guesses.</li>
</ul>
    </div>