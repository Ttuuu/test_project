<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Don't use <code>using namespace std;</code></h3>

<ol>
<li><p>You should place explicit <code>using</code> statements like</p>

<pre><code>using std::cout;
using std::swap;
// etc.
</code></pre>

<p>instead.  </p></li>
<li>Here's some good argumentation why you shouldn't:<br>
<a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is “using namespace std;” considered bad practice?</a></li>
</ol>

<h3>2. Don't use recursion</h3>

<p>Using recursive calls limits you to the stack size, and may easily overflow on a large number of array elements.<br>
You can use a loop and a <a href="https://en.cppreference.com/w/cpp/container/stack" rel="noreferrer"><code>std::stack&lt;int&gt;</code></a> instead:
 - Entering the recursive function can be turned into a <code>push()</code> operation within the loop
 - Returning from the function can be turned in to geting the value via <code>top()</code> and a subsequent <code>pop()</code> operation.</p>

<h3>3. Don't use raw c-style arrays with c++</h3>

<p>Instead of using <code>int arr[]</code> you should use <a href="https://en.cppreference.com/w/cpp/container/vector" rel="noreferrer"><code>std::vector&lt;int&gt;</code></a>, or a <a href="https://en.cppreference.com/w/cpp/container/array" rel="noreferrer"><code>std::array&lt;int,N&gt;</code></a> where <code>N</code> is a fixed size known at compile time.</p>

<p>Raw arrays have several drawbacks. The worst is that the size cannot longer be determined after they <a href="https://stackoverflow.com/questions/1461432/what-is-array-decaying">decayed to pointers</a> if they're going out of scope.<br>
Also raw array's aren't automatically copyable.</p>
    </div>