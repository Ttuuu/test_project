<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Once I understood what you wanted to accomplish, your code became a lot more clear to me and I can provide some thoughts.</p>

<p>Regarding the symmetrical version, you are indeed only sampling from a subset of the available symmetrical latin hypercubes. Half of the parameter space will never be chosen as samples. Consider the 2D example with n=4:</p>

<p><a href="https://i.stack.imgur.com/TNVVp.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/TNVVp.png" alt="A 4x4 example image of the sampled Hypercube"></a></p>

<p><code>even_nums = [0, 2]</code> and, hence, A,B,C,D are the 4 possible samples that can be generated with this method. In fact there's two possible Latin Hypercubes: [A,D] and [B,C]. A',B',C',D' denote their respective inverse positions that are then added. As you can see, half of the fields are empty and will never be chosen as a sample.</p>

<p>Instead of permuting indexes, I would sample pairs of symmetrical points directly, as it allows you to control for the constraint while still achieving uniform sampling:</p>

<pre><code>import random
import numpy as np

num_samples = 5
dim = 2

available_indices = [set(range(num_samples)) for _ in range(dim)]
samples = []

# if num_samples is odd, we have to chose the midpoint as a sample
if num_samples % 2 != 0:
    k = num_samples//2
    samples.append([k] * dim)
    for idx in available_indices:
        idx.remove(k)

# sample symmetrical pairs
for _ in range(num_samples//2):
    sample1 = list()
    sample2 = list()

    for idx in available_indices:
        k = random.sample(idx, 1)[0]
        sample1.append(k)
        sample2.append(num_samples-1-k)
        idx.remove(k)
        idx.remove(num_samples-1-k)

    samples.append(sample1)
    samples.append(sample2)

samples = np.array(samples)
</code></pre>
    </div>