<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks good, except that you do not really need the <code>c</code>, and hence the nesting, in the list comprehension. You can use <code>line[i:i+7]</code> directly in <code>int</code>, making it a bit shorter:</p>

<pre><code>''.join([chr(int(line[i:i+7], 2)) for i in range(0, len(line), 7)])
</code></pre>

<p>However, just removing the <code>1000001</code> in the line before seems a bit arbitrary, since (a) the pattern might also be present within a package, spanning two bytes. Instead, you could <em>keep</em> the <code>c</code> variable and ignore the current <code>c</code> if it equals the package delimiter:</p>

<pre><code>&gt;&gt;&gt; line = "10000011100010110111111011111000001100000101000011000001"
&gt;&gt;&gt; ''.join([chr(int(c, 2)) for c in (line[i:i+7] for i in range(0, len(line), 7)) if c != "1000001"])
'boo!' 
</code></pre>

<p>But, you still lose the information where the packages start and end.
Instead, you could use regular expressions for first detecting the packages, and then finding the bytes within those:</p>

<pre><code>&gt;&gt;&gt; p = r"1000001((?:[01]{7}){,3})1000001"
&gt;&gt;&gt; re.findall(p, line)
['110001011011111101111', '0100001']
</code></pre>

<p>Here, <code>p</code> means "package delimiter, followed by up to three groups of seven <code>0</code> or <code>1</code>, followed by delimiter. Then you can use another regex <code>q</code> to split those into bytes.</p>

<pre><code>&gt;&gt;&gt; q = r"[01]{7}"
&gt;&gt;&gt; [''.join(chr(int(x, 2)) for x in re.findall(q, y)) for y in re.findall(p, line)]
['boo', '!']
</code></pre>

<p>Of course, the regex <code>q</code> is a bit redundant, since we already checked the same in <code>p</code>. You could also do this part using a <code>range</code> and string slicing, but personally I still find the regex approach cleaner.</p>

<pre><code>&gt;&gt;&gt; [''.join(chr(int(y[i:i+7], 2)) for i in range(0, len(y), 7)) for y in r e.findall(p, bits)]
['boo', '!']
</code></pre>

<hr>

<p>Another way, without regex, might be to first separate the line into groups of 7 bits, and then using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to group those parts into package-delimiter and package-contents:</p>

<pre><code>&gt;&gt;&gt; parts = [line[i:i+7] for i in range(0, len(line), 7)]
&gt;&gt;&gt; groups = [list(g) for k, g in groupby(parts, key="1000001".__ne__) if k]
&gt;&gt;&gt; [''.join(chr(int(b, 2)) for b in g) for g in groups]
['boo', '!']
</code></pre>
    </div>