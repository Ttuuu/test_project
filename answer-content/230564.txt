<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Very clean code, reads very nicely, well done!</p>

<p>Watch for inconsistencies in indentation:</p>

<blockquote>
<pre><code>Public Sub PrintToImmediateWindow()

    With this
</code></pre>
</blockquote>



<blockquote>
<pre><code>Private Sub GetSystemAttributes()
        With this
</code></pre>
</blockquote>

<p><a href="http://www.rubberduckvba.com/" rel="nofollow noreferrer">Rubberduck</a> can fix that for you (across the entire project) with a single click.</p>

<p>Consistent indentation is normally understood as "executable statements within a code block are all lined up". I don't see code blocks here, and yet I'm looking at 3 levels of indentation:</p>

<blockquote>
<pre><code>    Const Scope As String = "subtree"

        this.UserName = VBA.Environ$("Username")

        On Error GoTo CleanFail
        Set rootDSE = GetObject("LDAP://RootDSE")

            Base = "&lt;LDAP://" &amp; rootDSE.Get("defaultNamingContext") &amp; "&gt;"
</code></pre>
</blockquote>

<p>That's distracting.</p>

<p>So is having a block of declarations at the top of a procedure scope, and/or having multiple declarations in a single instruction:</p>

<blockquote>
<pre><code>Dim Conn As Object, Cmnd As Object, Rcrdset As Object
Dim rootDSE As Object
Dim Base As String, Filter As String, _
    UserAttributes As String
Dim UserName As String
</code></pre>
</blockquote>

<p>Of particular note, the line-continuated <code>UserAttributes</code> makes me wonder <em>why</em> that one had to be on its own line (while still being part of the previous <code>Dim</code> statement): I shouldn't have to ask myself these questions when reading code. Also disemvoweling (removing random vowels) should not be needed.</p>

<blockquote>
<pre><code>Dim Conn As Object, Cmnd As Object, Rcrdset As Object
</code></pre>
</blockquote>

<p>I'm not a zealot, so to me <code>Dim db As Object</code>, <code>Dim cmd As Object</code>, and <code>Dim rs As Object</code> would be fine (as long as the declarations are right next to where they're set, so there's more context to it than just "well it's an object"), but <code>Rcrdset</code> is extremely typo-prone (kudos for <code>Option Explicit</code> to pick that up!).</p>

<p>Contrast to how seamless reading becomes, if declarations are right where they're relevant:</p>

<pre><code>Dim rootDSE As Object
Set rootDSE = GetObject("LDAP://RootDSE")

Dim base As String '&lt;~ casing
base = "&lt;LDAP://" &amp; rootDSE.Get("defaultNamingContext") &amp; "&gt;"

Dim filter As String '&lt;~ casing
filter = "(&amp;(objectClass=user)(objectCategory=Person)"

'..

Dim conn As Object '&lt;~ casing
Set conn = CreateObject("ADODB.Connection")
</code></pre>

<p>I know this is harder to do in a case-insensitive language, but using <code>PascalCase</code> for <em>some</em> local variables, and <code>camelCase</code> for others, is also inconsistent and distracting, readability-wise.</p>

<p>A note about this:</p>

<blockquote>
<pre><code>    'at times, some of these fields aren't supported so
    'so I am usesing on error resume next to avoid any errors
    'thrown by and empty field value
    On Error Resume Next
    With this
        .CompanySiteName = Rcrdset.Fields("physicalDeliveryOfficeName").value
        .UserDepartment = Rcrdset.Fields("department").value
        .UserDisplayName = Rcrdset.Fields("displayName").value
        .UserFirstName = Rcrdset.Fields("givenName").value
        .UserLastName = Rcrdset.Fields("sn").value
        .UserCommonName = Trim$(.UserFirstName &amp; " " &amp; .UserLastName)
        .UserEmailAddress = Rcrdset.Fields("mail").value
        .UserTelephoneNumber = Rcrdset.Fields("telephoneNumber").value
    End With
</code></pre>
</blockquote>

<p>It's not wrong, but it's not ideal either. Consider extracting the OERN into its own reduced scope:</p>

<pre><code>Private Function GetFieldValueOrDefault(ByVal rs As Recordset, ByVal fieldName As String) As Variant
    On Error Resume Next
    GetFieldValueOrDefault = rs.Fields(fieldName).Value
    On Error GoTo 0
End Function
</code></pre>

<p>There's a bunch of implicit conversions happening here:</p>

<blockquote>
<pre><code>Private Sub Class_Terminate()
    With this
        .UserName = Empty
        .UserDisplayName = Empty
        .UserFirstName = Empty
        .UserLastName = Empty
        .UserCommonName = Empty
        .UserEmailAddress = Empty
        .UserTelephoneNumber = Empty
        .UserDepartment = Empty
        .CompanySiteName = Empty
        .DomainName = Empty
        .MachineName = Empty
        .WindowsVerion = Empty
        .AppVersion = Empty
    End With
End Sub
</code></pre>
</blockquote>

<p><code>Empty</code> is a special type in VBA, that works with <code>Variant</code>: <code>vbEmpty</code> would be the constant for it, but then if you assign <code>vbEmpty</code> to a <code>String</code> value, you're implicitly converting <code>Variant/Empty</code> to <code>String</code>, and so the value that ends up being assigned is <code>""</code> - note that the implicit conversion is making an implicit allocation; the value of <code>StrPtr(Empty)</code> will be different for every single call - meanwhile the value of <code>StrPtr(vbNullString)</code> is <code>0</code>, i.e. using <code>= vbNullString</code> instead of <code>= Empty</code> would remove the implicit conversions <em>and</em> the intermediate memory allocations.</p>

<p>I'm not sure what to think of <code>CleanUpADODBObjects</code>: on one hand I can appreciate taking that concern out of the calling procedure, on the other I can't help but wave a red flag when an object is being destroyed in another scope than the scope it was created in. This could be because <code>GetUserAttributes</code> is responsible for too many things. Also, an error in that scope can result in an infinite loop:</p>

<blockquote>
<pre><code>CleanExit:
    CleanUpADODBObjects Conn, Rcrdset '&lt;~ raises an error, goto cleanfail
    Exit Sub

CleanFail:
    Resume CleanExit '&lt;~ ok, but if CleanUpADODBObjects raises an error...
</code></pre>
</blockquote>
    </div>