<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use <code>namespace SortVis {...}</code> in <code>Engine.cpp</code></h1>
<p>You can avoid repeating the namespace in each function definition in <code>Engine.cpp</code> by wrapping all the code inside <code>namespace SortVis</code>, just like you did in <code>Engine.h</code>. It's also common to not indent the code inside a <code>namespace {...}</code> block that covers the whole file, to avoid code running off the right hand of the screen too often.</p>
<h1>Too many constructors</h1>
<p>You have 12 different constructors, that is a bit much. Also imagine that you might want to add another optional parameter in the future, then you double the number of constructors required. This is not maintainable in the long run. I see two ways to cut down the number of constructors required:</p>
<ol>
<li><p>Use default argument values, like so:</p>
<pre><code>Engine(Coord windowSize, int maxNumber,
       const char *windowTitle = "Sort visualizer",
       SortAlgorithm algorithm = SortAlgorithm::bubbleSort,
       DrawMethod method = DrawMethod::line);
</code></pre>
<p>With this approach, you only need two constructors. It might be slightly more annoying to use if you only want to specify another <code>DrawMethod</code>, but it is a small price for much improved maintainablility.</p>
</li>
<li><p>Don't specify the input values, algorithm and drawing method in the constructor, allow these to be set by member functions, like so:</p>
<pre><code>Engine(Coord windowSize, const char *windowTitle = "Sort visualizer");
void generateNumbers(int maxNumber);
void loadNumbers(const char *pathToNumbersFile);
void setAlgorithm(SortAlgorithm algorithm);
void setDrawMethod(DrawMethod method);
</code></pre>
</li>
</ol>
<p>In general, only do in the constructor what really needs to be done at construction time. Initializing SDL and opening a window is crucial to a working visualization engine, so that is good to do in the constructor.</p>
<h1>Consider not generating/loading numbers in <code>class Engine</code></h1>
<p>Instead of having <code>Engine</code> generate random numbers or load them from a file, you can simplify it by not doing that at all, but rather just allow it to use any vector that you give it. So for example:</p>
<pre><code>void run(const std::vector&lt;int&gt; &amp;input) {
    numbers = input;
    ...
}
</code></pre>
<p>You can even consider passing it as non-const, and have <code>run()</code> modify the given input vector.</p>
<h1>Consider splitting visualization from sorting</h1>
<p>A big issue is that you have to split your sorting algorithms into steps, and have a <code>switch()</code> statement in <code>step()</code> to pick the right algorithm. You also need to enumerate the possible algorithms. Instead of doing that, consider making <code>Engine</code> just visualize a vector of numbers, and instead of <code>Engine</code> driving the steps of the algorithm, have an algorithm drive <code>Engine</code> to show the state of the vector at each step. You can do this by changing <code>Engine::draw()</code> to take a reference to a vector of numbers:</p>
<pre><code>void Engine::draw(const std::vector&lt;int&gt; &amp;numbers) {
     ...
}
</code></pre>
<p>And a sorting algorithm can just become a single function:</p>
<pre><code>void bubbleSort(std::vector&lt;int&gt; &amp;numbers, Engine &amp;visualization) {
    for (size_t i = 0; i &lt; numbers.size() - 1; ++i) {
        for (size_t j = 0; j &lt; numbers.size() - 1; ++j) {
            if (numbers[j] &gt; numbers[j + 1])) {
                std::swap(numbers[j], numbers[j + 1]);
            }
        }

        visualization.draw(numbers);
    }
}
</code></pre>
<p>And then your <code>main()</code> could look like so:</p>
<pre><code>int main() {
    std::vector&lt;int&gt; numbers = {...}; // generate some vector here

    SortVis::Engine visualization({1024, 768});
    SortVis::bubbleSort(numbers, visualization);
}
</code></pre>
<p>The benefits to this approach are that you separate concerns. The <code>Engine</code> now only has to visualize a vector (it probably should be renamed to something like <code>Visualizer</code>). You can easily add new sorting algorithms without having to change <code>Engine</code>.</p>
<p>One issue with the above is that it no longer handles SDL events. You could do this in <code>draw()</code>, and have <code>draw()</code> return a <code>bool</code> indicating whether the algorithm should continue or not.</p>
<h1>Check for errors after reading a file, not before</h1>
<p>In <code>Engine::loadFile()</code>, you check whether the file is opened correctly, but you never check whether there was an error during reading. A possible way is:</p>
<pre><code>std::ifstream NumbersFile(pathToNumbersFile);

std::string Number;
while (std::getline(NumbersFile, Number) {
    numbers.push_back(std::stoi(Number));
}

if (!NumbersFile.eof()) {
    throw std::runtime_error("Error while reading numbers file.");
}
</code></pre>
<p>Here we use the fact that the <code>eofbit</code> is only set if it succesfully reached the end of the file, it will not be set if the file failed to open or if an error occurred before reaching the end of the file.</p>
    </div>