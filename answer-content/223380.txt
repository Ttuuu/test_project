<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your method is meant to handle <code>ExpandoObjects</code> explicitly, so it would be better named <code>ConvertExpandoObjectToDictonary</code>, and would probably be less confusing if it actually took an <code>ExpandoObject</code> as the parameter:</p>

<pre><code>Dictionary&lt;string, object&gt; ConvertExpandoObjectToDictonary(ExpandoObject expandoObject);
</code></pre>

<p>This is what the public API should look like; you can keep the current method as it is (since you need to call it recursively) but make it private and hide it behind the clearer public API.</p>

<hr>

<p>This doesn't really make sense:</p>

<pre><code>if (list.Any(o =&gt; o is ExpandoObject))
{
    // if it does contain ExpandoObjects, take all of those and also go through them recursively
    return list
        .Where(o =&gt; o is ExpandoObject)
        .Select(o =&gt; ConvertDynamicToDictonary((ExpandoObject)o));
}
</code></pre>

<p>You are looking for a single <code>ExpandoObject</code>, and then assuming everything you might need is an expando object and ignoring everything else. I think you want something like this instead, which keeps non-expando entries:</p>

<pre><code>return list
    .Select(o =&gt; o is ExpandoObject
        ? ConvertDynamicToDictonary((ExpandoObject)o)
        : o
    );
</code></pre>
    </div>