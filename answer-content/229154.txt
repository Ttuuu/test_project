<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Enumerate</h1>

<p>Instead of writing <code>range(len())</code>, consider using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a>. It provides the index and the value associated with that index. It's useful in your case because, instead of having to write <code>in_states[i]</code>, you can write <code>value</code> instead. This will save you from having to index the list again with <code>in_states[i]</code>.</p>

<h1>Docstrings</h1>

<p>You should provide a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="noreferrer"><code>docstring</code></a> at the beginning of every module, class, and method you write. This will allow people to see how your code functions, and what it's supposed to do. It also helps you remember what types of variables are supposed to be passed into the method. Take this for example.</p>

<pre><code>def my_method(param_one, param_two):
    ... do code stuff here ...
</code></pre>

<p>By reading just the method header, you had no idea what data this method is supposed to accept (hopefully you never have parameter names this ambiguous, but I'm being extreme in this example). Now, take a look at this:</p>

<pre><code>def my_method(param_one, param_two):
    """
    This method does ... and ... ...

    :param param_one: An Integer representing ...
    :param param_two: A String representing ...
    """
    ... do code stuff here ...
</code></pre>

<p>Now, you know clearly what is supposed to be passed to the method.</p>

<h1>Consistency</h1>

<p>I see this in your code:</p>

<pre><code>new_state.append(0 if group[0] == group[2] else 1)
</code></pre>

<p>But then I see this:</p>

<pre><code>if not state:
    state = new_state(states)
else:
    state = new_state(state)
</code></pre>

<p>You clearly know how to accomplish the former, and since that code looks cleaner, I'd say you stick with it and be consistent:</p>

<pre><code>state = new_state(states if not state else state)
</code></pre>

<h1>Looping</h1>

<p>Your looping with the <code>while</code> loop and using <code>j</code> confuses me. It looks like a glorified <code>for</code> loop, only running <code>days</code> amount of times. So, this:</p>

<pre><code>state = None
j = 0
while j &lt; days:
    if not state:
        state = new_state(states)
    else:
        state = new_state(state)
    j += 1
</code></pre>

<p>Can be simplified to this:</p>

<pre><code>state = None
for _ in range(days):
    state = new_state(states if not state else state)
return state
</code></pre>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring (a description of this program goes here)
"""
def cell_compete(states, days):
    """
    Method Docstring (a description of this method goes here)
    """
    def new_state(in_states):
        """
        Method Docstring (a description of this method goes here)
        """
        new_state = []
        for index, value in enumerate(in_states):
            if index == 0:
                group = [0, in_states[0], in_states[1]]
            elif index == len(in_states) - 1:
                group = [in_states[index - 1], value, 0]
            else:
                group = [in_states[index - 1], value, in_states[index + 1]]
            new_state.append(0 if group[0] == group[2] else 1)
        return new_state

    state = None
    for _ in range(days):
        state = new_state(states if not state else state)
    return state
</code></pre>
    </div>