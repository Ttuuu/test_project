<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As Winston said, adding an iterator will enable you to add quite a lot of functionality to this list quite easily. and can be done by wrapping your list in a tuple struct and implementing the desired traits - the <a href="https://rust-unofficial.github.io/too-many-lists/" rel="nofollow noreferrer">Linked List Guide</a> as recommended by lucarlig is a great resource and shows you how to do this</p>

<p>A couple of other things to think about:</p>

<ol>
<li><p>Think about adding a <code>length: usize</code> property to your struct that you update privately as nodes are pushed and popped, this allows you to do a constant time lookup of your list length. Your current method of finding the length of the list requires you to iterate over the whole thing, resulting in <span class="math-container">\$O(n)\$</span> time complexity for your length function which is quite inefficient.</p></li>
<li><p>You could add a <code>peek_mut()</code> method quite easily to increase the functionality of the list, which is almost identical to your <code>peek()</code> method</p></li>
<li><p>Implementing the 3 iterators (<code>into_iter() -&gt; Option&lt;T&gt;</code>, <code>iter() -&gt; Option&lt;&amp;T&gt;</code>, <code>iter_mut() -&gt; Option&lt;&amp;mut T&gt;</code>) will give you very concise implementations of things like <code>nth</code> <code>nth_mut</code> (effectively retrieving a value at index <code>x</code> - <em>although arguably if you needed to do that you shouldn't be using a linked list</em>). And as Winston said, will also allow you to convert from a <code>List&lt;T&gt; -&gt; Vec&lt;T&gt;</code> in one line - <code>self.into_iter().collect()</code></p></li>
<li><p>Your current implementation doesn't define a <em>Drop</em> method, so will use the default recursive version that Rust derives for you <em>(I believe)</em>. So theoretically it's possible to hit the recursive depth limit. It would be safer to drop the list iteratively by implementing the drop trait with something like:</p></li>
</ol>

<pre class="lang-rust prettyprint-override"><code>impl&lt;T&gt; Drop for SimpleLinkedList&lt;T&gt; {
    fn drop(&amp;mut self) {
        while self.pop().is_some() {}
    }
}
</code></pre>

<ol start="5">
<li><p>Where you've used <code>while x.is_some() {}</code> loops, I think you could instead use a <code>while let</code> loop which is more idiomatic - <code>while let Some(data) = var { /* do something */ }</code>.</p></li>
<li><p>You can either <code>match</code> or <code>.map</code> <code>Options</code> which can allow you to make your code slightly more concise, ie. your push and pop implementations can use the same logic you've applied to your peek implementation</p></li>
<li><p>Just from a code readability standpoint, the compiler can <em>(I think)</em> infer all of the types you've used within your code blocks, so they don't need to be explicitly stated. However if you much prefer including them then type aliases could be useful - <code>type Link&lt;T&gt; = Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;;</code> for example.</p></li>
</ol>
    </div>