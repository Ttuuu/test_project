<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Does 'return' works as 'break'?</p>
</blockquote>

<p>No. What functions as a <code>break</code> is that you have a condition (<code>y &gt; 1</code>) which will be essentially reduced to being <code>false</code> at some time, since for every iteration of the loop, you decrement the conditional variable (so no matter how big a value it is, it's bound to become less than one at some point, making the conditional expression evaluate to <code>false</code>).</p>

<p>At that point, <code>return</code> just returns the result of the computation that has happened in the loop, which is being stored in <code>powered</code>.</p>

<hr>

<p>Apart from that, you have a very beautiful problem that can be solved using <em>recursion</em>. You can do that and use Python's version of the C ternary operator (<code>A if B else C</code>), in order to arrive to a very beautiful and pythonic solution, that I consider to be very much in the spirit of computer science:</p>

<pre><code>def pow(x, y):
    return 1 if y == 0 else x * pow(x, y - 1)
</code></pre>

<p>This may look weird for a newbie, but it's actually easier if you understand what happens. Let's go through it:</p>

<p>First of all, let's see the nature of a <code>power</code> computation: \$2^5\$ is essentially \$2 * 2 * 2 * 2 * 2\$. Our code produces the following call stack:</p>

<pre><code>pow(2, 5)
2 * pow(2, 4)
2 * 2 * pow(2, 3)
2 * 2 * 2 * pow(2, 2)
2 * 2 * 2 * 2 * pow(2, 1)
2 * 2 * 2 * 2 * 2 * pow(2, 0)
2 * 2 * 2 * 2 * 2 * 1    # because of our base case that the condition eventually get's reduced to
2 * 2 * 2 * 2 * 2 
2 * 2 * 2 * 4
2 * 2 * 8
2 * 16
32
</code></pre>

<p>I do not know if the above is super useful to you, because that depends on your programming skills at this point. But since you mentioned you already know C, I reckoned that you may be already exposed to algorithmic concepts such as <em>recursion</em> and I thought that demonstrating this syntax and the concept in a nice solution might help you understand how powerful this concept is and how you could utilize it in your programs.</p>
    </div>