<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Repeated <code>set()</code> construction</h2>

<pre><code>    allowed = False
    while not allowed:
        allowed = True
        choice = random.choice(all_permutes)
        for j in range(len(choice)):
            if choice[j] not in set(curr_col_set[j]): # ensure digit isn't in col
</code></pre>

<p>Consider the 7th, 8th or 9th row.  You are grabbing a random permutation, and checking to see if <code>choice[j]</code> is in <code>set(curr_col_set[j])</code> for each column <code>j</code>.  How many times is <code>set(curr_col_set[j])</code> being constructed?  Once for each random row permutation?</p>

<p>Maybe you could construct it exactly once:</p>

<pre><code>    curr_col_set = []
    for j in range(NUM_COLS):
        col = set()                        # Set, instead of list
        for k in range(NUM_ROWS):
            col.add(grid[k][j])            # Set needs add instead of append
        curr_col_set.append(col)
</code></pre>

<p>And then you can remove the set construction out of this line:</p>

<pre><code>            if choice[j] not in curr_col_set[j]: # ensure digit isn't in col
</code></pre>

<p>The code now runs a little faster.</p>

<p>Note that with list comprehension, we can reduce the code for the set generation, and speed it up slightly in the process:</p>

<pre><code>    curr_col_set = []
    for j in range(NUM_COLS):
        col = set(grid[k][j] for k in range(NUM_ROWS))
        curr_col_set.append(col)
</code></pre>

<p>Or even further:</p>

<pre><code>    curr_col_set = [set(grid[k][j] for k in range(NUM_ROWS)) for j in range(NUM_COLS)]
</code></pre>

<p>Do the equivalent to the <code>curr_square_set</code> to speed up the <code>choice[j] in curr_square_set[ ]</code> calls.</p>

<h2>Reducing the Search Space</h2>

<p>When your algorithm starts, <code>all_permutes</code> has 362880 entries.  After you pick the first row, you remove that row, so the search space reduces by one, to 362879.  Not a huge reduction.</p>

<p>However, when you pick a row, that locks in digits which cannot appear again in those respective columns.  If you removed all rows where any digit matches a digit in the current <code>choice</code> selection, you'd significantly reduce the search space, and remove the possibility of randomly selecting those rows which can't possibly work.  Moreover, you wouldn't need to keep track of the <code>curr_col_set</code>, because you'd be guaranteed not to select a row where a duplicate digit appears in the column because those possibilities no longer exist.</p>

<p>So, remove the <code>curr_col_set</code> construction code, and the <code>if ...: else:</code> statement involving it, and replace:</p>

<pre><code>    all_permutes.remove(choice) # remove the row from all_permutes
</code></pre>

<p>with:</p>

<pre><code>    # Remove all row permutations where any column digit matches the current one.
    all_permutes = [ row for row in all_permutes if all(x != y for x, y in zip(row, choice))]
</code></pre>

<p>With this change, <code>all_permutes</code> drops from <code>362880</code> to <code>133496</code>, then to <code>43412</code>, then to <code>12040</code>, <code>2742</code>, <code>488</code>, <code>52</code>, <code>2</code>, and finally to <code>1</code> as the 9 rows are generated.</p>
    </div>