<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As seen with @t3chb0t and @dfhwze I have been misusing the TPL. I also don't see any point on <code>.ConfigureAwait(false)</code> a <code>Task.WhenAll()</code> call, also with the <em>async all-the-way</em> rule, using an awaitable task for this case would have me to convert many of my APIs to async one.</p>

<p>So they provided me these solutions :</p>

<ul>
<li>Modifiy my task creation logic this way :  <code>tasks.AddRange(filesPath.Select(async d2PFilePath =&gt; await Task.Run(() =&gt; UnpackD2PFile(d2PFilePath))));</code> and removing the <code>Task.Delay(10);</code> on my <code>UnpackD2PFile(string path)</code> task</li>
<li>Use the <code>Parallel.Foreach()</code> loop to let the framework create and handle the concurrency and also allow me to keep a synchronous API</li>
</ul>

<p>Both of these solutions completed the work in the same time, and provided this output :</p>

<p><a href="https://i.stack.imgur.com/9kMHd.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/9kMHd.gif" alt="new application output"></a></p>

<p>As you can see now the behavior is quite different than before, not every task start at the same moment, also now there is a delay before every progress bars shown up. But we gained almost 2sec on the total execution time :)</p>

<p><strong>I highly recommend to use the Parallel approach as it is the easiest one to implement.</strong></p>
    </div>