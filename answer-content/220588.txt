<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Obviously this code was posted nearly 3 years ago, so you have likely updated it, and since then <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> has become a lot more prevalent/standard, so you could utilize many features/keywords of that specification to streamline this code. You could also use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" rel="nofollow noreferrer">fetch API</a> or another promise-based XHR library to simplify the XHR promise code.</p>

<h2>Your Questions</h2>

<blockquote>
  <p>The application still feels slow; can it be optimized further?</p>
</blockquote>

<p>You could consider using <code>for...of</code> or even regular <code>for</code> loops instead of functional iterators.</p>

<blockquote>
  <p>And the biggest thing, how can I make the code more OOPsy?</p>
</blockquote>

<p>You could use the <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> class syntax, even though it is just "<em>syntactical sugar over JavaScript's existing prototype-based inheritance</em>"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">1</a></sup>.</p>

<h2>Other feedback/suggestions</h2>

<p>Let's look at the <code>forEach</code> loop within <code>renderRow()</code> (defined inside <code>drawMosiac()</code>).</p>

<blockquote>
<pre><code>var tiles = [];
rowData[i].forEach(function(data) {
  var tile = new SVGTile(data.svg, data.x, data.y);
  tiles.push(tile);
});
</code></pre>
</blockquote>

<p>Perhaps you know this already but this code could be simplified using <code>.map()</code>.</p>

<pre><code>const tiles = rowData[i].map(data =&gt; new SVGTile(data.svg, data.x, data.y));
</code></pre>

<p>If you kept the <code>.forEach()</code> then there isn't much point in assigning the value to <code>tile</code> right before it is pushed into the array - a linter should point that out as excess memory utilization. As was mentioned above, the functional code might be one reason why "the application still feels slow", so you might consider using a <code>for</code> loop if necessary.</p>

<hr>

<p>One micro-optimization might be to move the incrementing of i here:</p>

<blockquote>
<pre><code>res.push(new Tile(data.subarray(i * 4, i * 4 + 3), col, row));
    i++;
</code></pre>
</blockquote>

<p>To have the post-fix increment operator after the last usage of <code>i</code> within the <code>subarray()</code> call:</p>

<pre><code>res.push(new Tile(data.subarray(i * 4, i++ * 4 + 3), col, row));
</code></pre>

<hr>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes</a></sub></p>
    </div>