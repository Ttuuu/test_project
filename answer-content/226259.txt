<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's not a lot of code here to be reviewed, but I'll have a go.</p>

<ul>
<li><p>A small efficiency gain is possible, by moving the <code>db_</code> argument in the initializer list, rather than copying it:</p>

<pre><code>SqlTransaction(std::shared_ptr&lt;sqlite::database&gt; db_)
  : db{std::move(db_)}
{ *db &lt;&lt; "begin;"; };
</code></pre></li>
<li><p>It's not necessary to delete the move constructor, as explicitly deleting the copy constructor prevents the move constructor being implicitly provided.  However, if you feel that doing so improves clarity, you should probably delete move assignment, too.</p></li>
<li><p>We should document that the class isn't thread-safe.  It's quite reasonable that we should use it from only one thread, but we need to be clear to our users about that.  Alternatively, we could make it thread-safe by making <code>finished</code> an <code>std::atomic&lt;bool&gt;</code> and using its test-and-set method, <code>exchange()</code>.</p></li>
<li><p>Since <code>rollback()</code> tests <code>finished</code>, there's no need to duplicate that in the destructor - just call <code>rollback()</code> unconditionally.  It may be worth taking steps to avoid it throwing when called there - destructors that throw need to be handled with extreme care.</p>

<pre><code>~SqlTransaction() { try { rollback(); } catch (...) { /* ignore */ } };
</code></pre></li>
</ul>

<p>I have nothing specific to SQLite, as I've not used that library myself (I'm surprised it has to parse string commands, rather than having methods for those operations, though).</p>
    </div>