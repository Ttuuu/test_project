<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Fix the warnings</h1>
<pre class="lang-none prettyprint-override"><code>235745.cpp: In member function ‘variable Function::operator()(variableList&amp;&amp;)’:
235745.cpp:43:49: warning: value computed is not used [-Wunused-value]
   43 |             if ((indexes[0] &amp; 0x80) ? i.index() != (indexes[0] &amp; 0x03), idx++ : i.index() != indexes[idx++])
      |                                       ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
235745.cpp:43:91: warning: comparison of integer expressions of different signedness: ‘std::size_t’ {aka ‘long unsigned int’} and ‘__gnu_cxx::__alloc_traits&lt;std::allocator&lt;int&gt;, int&gt;::value_type’ {aka ‘int’} [-Wsign-compare]
   43 |             if ((indexes[0] &amp; 0x80) ? i.index() != (indexes[0] &amp; 0x03), idx++ : i.index() != indexes[idx++])
</code></pre>
<p>It looks like the first of those is reporting a serious error; perhaps that line was supposed to be:</p>
<pre><code>        if ((indexes[0] &amp; 0x80) ? ++idx, i.index() != (indexes[0] &amp; 0x03) : i.index() != indexes[idx++])
</code></pre>
<p>Or just start <code>idx</code> at -1, and increment it immediately before the <code>if</code> instead.</p>
<h1>Magic numbers</h1>
<p>There's a sprinkling of <code>0x80</code> and <code>0x3</code> around the code with no explanation.  I'd expect those to be named constants.</p>
<h1>Default promotions and default arguments.</h1>
<p>This seems much more restrictive than standard function calls, where (for example) <code>int</code> arguments can be promoted for functions expecting <code>double</code>.  Is that intentional?  It's certainly surprising.</p>
<p>Similarly, it's disappointing that we can't use default arguments as we can in ordinary C++ functions.</p>
<h1>Formatting</h1>
<p>Please don't do this - it's really hard to read:</p>
<blockquote>
<pre><code>std::string                                 fname;
std::vector&lt;int&gt;                            indexes;
std::function&lt;variable(variableList &amp;&amp;)&gt;    fn;
</code></pre>
</blockquote>
    </div>