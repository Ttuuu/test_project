<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>function myMD5(string){
</code></pre>

<p>MD5 itself acts on bits or - for most runtimes - bytes. All string manipulation should take place <em>outside</em> any MD5 function.</p>

<pre><code>/*unsigning also works cuts to 32bit words*/
</code></pre>

<p>That's not clear to me. Two verbs in a row...</p>

<pre><code>string = unescape(encodeURIComponent(string));
</code></pre>

<p>Oh dear, that throws the principle of least surprise in the blender. Do not suddenly change the string without warning the user.</p>

<p>The you first copy the <em>complete</em> message to bytes, and then to words. This uses a lot of unnecessary memory. There is a reason why most implementations (well, outside of those of JavaScript) use multiple <code>update</code> method and a final <code>digest</code> method. It is to handle larger messages, or messages that are actually split over multiple locations.</p>

<pre><code>for(var i = 1; i &lt;= 64; i++)
    K.push(Math.floor(0x100000000 * Math.abs(Math.sin(i))));
</code></pre>

<p>This makes the code smaller, of course, but do you really want to perform that calculation for each MD5 invocation?</p>

<pre><code>var A, B, C, D;
</code></pre>

<p>When using variable names that are specific to a specification, then please provide a link to the specification. Otherwise other devs are going to wonder about the special variable names (such as <code>shif</code>).</p>

<pre><code>if(rnd &lt; 16){
</code></pre>

<p>Branching is relatively slow on modern processors. This is why you see the <em>unrolled loops</em> that you've coiled up again. To get speed, you want to perform operations chunks by buffering a chunk at a time. Then you want to have the code run as fast as possible.</p>

<p>Fortunately you are using <code>else if</code> which makes it ever so slightly more performant. <em>Over a few runs</em>, the branching should become predictable and a good runtime should make it run faster.</p>

<p>You are returning the result as bytes, which is how it should be. Don't forget to test your code against the official test vectors, and <em>add tests for your own edge cases</em> or your MD5 may <em>still</em> result in a wrong value.</p>

<p>Your code looks fine if you just want to get a feel of what MD5 - a relatively simple crypto hash - looks like. It's good practice. But now you may want to proceed and see what it takes to make it efficient - and unroll your own code yourself.</p>
    </div>