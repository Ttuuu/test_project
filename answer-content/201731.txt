<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for the tests, it makes the code more understandable.</p>

<p>(<strong><em>My opinion</em></strong>) I think the biggest problem with the construction and design of the code is the recreation of the <code>NFA()</code> object inside itself. I believe because of how you've done this - it's forced you to jump through certain hoops to get your code working. From reading about Thompson's Construction and reviewing examples of regexes broken into graphs, I believe the construction should be much simpler. I would challenge you to go and learn some graph and vertex examples and then come back to try recreating your NFA/DFA. I believe you should be able to improve your code quite a bit.</p>

<p>Onto parts of the code: you have a duplicate loop (a single loop should always be sufficient):</p>

<pre><code>    while to_check:

        # Copy states to current iteration
        while to_check:
</code></pre>

<p>and you modify the contents of what it's checking inside the loop:</p>

<pre><code>    while to_check:

        # Copy states to current iteration
        while to_check:
            iteration.add(to_check.pop())
</code></pre>

<p>this is also never good. Even though you're using the <code>copy</code> functionality, the fact you're using it multiple times implies you really don't understand what is happening inside your data constructors. Duplicating the contents and then removing pieces of the content, you then later compare against an empty set <code>if state not in checked:</code> (on the first run) when the following statement modifies (again) the variable providing the control for the loop. This is not good - there is a confusing amount of changing of state in inner and outer loops.</p>

<p>(adding this quickly) </p>

<pre><code>    def _single_state_closure(self, state: int) -&gt; {int}:
        return self._at(state, '\0')
</code></pre>

<p>to continue the previous code:</p>

<pre><code>            for state in iteration:
                next_states = self._single_state_closure(state)
                if state not in checked:
                    checked.add(state)
                    to_check.update(next_states)
                closure.update(next_states)
</code></pre>

<p>Your call to the <code>self._single_state_closure(state)</code> is only ever performed at this one place in the code (not worthy of a separate function and is confusing if people have to "pop out" when reading your code).
Also, your <code>def _at(self, state: int, char: str)</code> function too is only used twice - once with a hardcoded value (as mentioned above with the <code>_single_state_closure</code>), and once more in a loop found inside <code>_next_states</code>.</p>

<p>Whilst the action might be the same, I think it best if you unravel the <code>_at</code> function into their separate statements at each of those points and discard the <code>_at</code> function. It will be much easier to understand the code if you do that. </p>

<p>Finally, (I know I've skipped over a lot), your <code>def kleene(self):</code> and <code>def union(self, other: 'NFA'):</code> functions are quite similar - obviously not for the hardcoded values inside the lambdas (those you should definitely extract to a separate function), but the creation of the table state, the copying of the table, modifying the terminal state - they are (kleen and union) functionally both the same.<br>
This implies that both can share a standard creation function or a modification function inside them (or even both if you want to split it up and try to adhere to the Single Responsibility Principal). </p>

<p>I hope this isn't too confusing, and I hope I understood your code as well as you do. As mentioned, please have a go at graphs in python and then try writing this code all again from scratch.</p>

<p>Good luck!</p>
    </div>