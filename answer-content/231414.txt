<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thematically, I would say recursive is the way to go. Especially if you ever find yourself writing a language that does tail-call optimization well, it's superior. (Python sadly doesn't. It involves replacing the top frame on the stack with a new frame, which stops you from getting...StackOverflow. Well, to be 100% accurate, Python will toss a RecursionError in your face before that happens, but it's a fitting thought.)</p>

<p>I would however, also recommend using python *args notation and slicing to parse it a tad more easily:</p>

<pre class="lang-py prettyprint-override"><code>def get_value_by_path(container, *args):
    if not args:
        return container
    return get_value_by_path(container[args[0]], *args[1:])

value = get_value_by_path(d, "b", "2", "bb")
# "b2"
value = get_value_by_path(d, "b", "2")
# {"bb":"b2", "bbb":"b3"}
value = get_value_by_path(d, "b")
# {"2":{"bb":"b2", "bbb":"b3"}}
</code></pre>

<p>This has the advantage that it will also work for lists, if you just give indices, whereas an <code>in</code> check like you have would stop that. If there's a wrong index/key somewhere, this way will throw a KeyError, exactly like all builtin indexing operations. </p>

<p>If you care more about SLOC (Source Lines of Code) than readability, you could use the 1liner:</p>

<pre class="lang-py prettyprint-override"><code>def ugly_get_value_by_path(container, *args):
    return ugly_get_value_by_path(container[args[0]], *args[1:]) if args else container
</code></pre>
    </div>