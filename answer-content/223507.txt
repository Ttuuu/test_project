<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First things first: Why are you returning a new array instead of directly sorting the input array? If we create 2 temporary arrays (left and right part) and then merge them back into the input array we don't need to return a new one (and can optimise later on).</p>

<pre><code>private static void mergesort(int[] input, final int left, final int right) {
    //quick note here, I flipped your if check so we can return earlier.
    //This makes it easier to follow the complete flow
    if (left &gt;= right) {
        return;
    }
    //edge cases handled before this point. Can continue with actual algorithm after.
    final int m = (right - left) / 2 + left;
    mergesort(input, left, m);
    mergesort(input, m + 1, right);

    int[] leftPart = new int[m - left + 1];
    for(int i = 0; i &lt; leftPart.length-1;i++){
        leftPart[i] = input[left + i];
    }
    int[] rightPart = new int[right - m];
    for(int i = 0; i&lt;rightPart.length-1;i++){
        rightPart[i] = input[m + i];
    }

    int i = 0, j = 0;
    while (i &lt; leftPart.length &amp;&amp; j &lt; rightPart.length) {
        if (leftPart[i] &lt;= rightPart[j]) {
            input[i + j] = leftPart[i++];
        } else {
            input[i + j] = rightPart[j++];
        }
    }
    while (i &lt; leftPart.length) {
        input[i + j] = leftPart[i++];
    }
    while (j &lt; rightPart.length) {
        input[i + j] = rightPart[j++];
    }
}
</code></pre>

<p>Now that we sort the input array directly theres one major memory optimisation we can do. We no longer need to store the right half in a temporary array anymore. Instead we can directly copy from the input array since the "current" spot is always smaller or equal than the index of the right part we're handling.</p>

<pre><code>private static void mergesort(int[] input, final int left, final int right) {
    if (left &gt;= right) {
        return;
    }

    final int m = (right - left) / 2 + left;
    mergesort(input, left, m);
    mergesort(input, m + 1, right);

    int[] leftPart = new int[m - left+1];
    //note: arraycopy is usually more efficient than manually copying an array.
    System.arraycopy(input, left, leftPart, 0, leftPart.length);

    int current = left;
    int currentLeft = 0;
    int currentRight = m+1;

    while (currentLeft &lt; leftPart.length &amp;&amp; currentRight &lt;= right) {
        if (leftPart[currentLeft] &lt;= input[currentRight]) {
            input[current++] = leftPart[currentLeft++];
        } else {
            input[current++] = input[currentRight++];
        }
    }
    while (currentLeft &lt; leftPart.length) {
        input[current++] = leftPart[currentLeft++];
    }
    //no need to handle remaining right part, as it's already in the input array
}
</code></pre>

<p>Some extra notes: </p>

<p>I renamed some variables to make it more clear what they mean. Even though <code>i</code> and <code>j</code> are common enough for a simple loop, it wasn't obvious enough anymore once the right index started from halfway the part of the array that needed to be sorted.</p>

<p>I made the method static. It doesn't depend on any state of the class it's in so could be put into a more general utility class instead.</p>

<p><code>System.arraycopy</code> is more performant than manually copying all elements into another array.</p>
    </div>