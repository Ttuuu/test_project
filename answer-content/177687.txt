<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Cache the type so you don't build it each time.  ConcurrentDictionary could do it.  Just make a static field to hold the dictionary</p>

<pre><code>private static ConcurrentDictionary&lt;Type, Type&gt; _typeMappings = new ConcurrentDictionary&lt;Type, Type&gt;();
</code></pre>

<p>Then you only need to change your CreateInstance method</p>

<pre><code>var safeDto = _typeMappings.GetOrAdd(typeof (T), type =&gt;
{
    var assemblyName = new AssemblyName($"DynamicAssembly_{Guid.NewGuid():N}");
    var assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyName,
        AssemblyBuilderAccess.Run);
    var moduleBuilder = assemblyBuilder.DefineDynamicModule("DynamicModule");
    var typeName = $"{type.Name}_{Guid.NewGuid():N}";
    var typeBuilder = moduleBuilder.DefineType(typeName, TypeAttributes.Public);

    typeBuilder.AddInterfaceImplementation(type);

    var properties = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);

    BuildProperties(typeBuilder, properties);

   return typeBuilder.CreateType();
});
return (T)Activator.CreateInstance(safeDto);
</code></pre>

<p>Also your implementation is tightly coupled to this one attribute and if you wanted to add more abilities you would need to change the code.  A lot of DI containers allow for this type of ability you are building.  I'm most familiar with unity.  They call it interception.  You can see here an example of adding <a href="https://msdn.microsoft.com/en-us/library/ff660851(v=pandp.20).aspx" rel="nofollow noreferrer">INotifyPropertyChanged</a> and here is <a href="https://msdn.microsoft.com/en-us/library/dn178466(v=pandp.30).aspx" rel="nofollow noreferrer">logging and caching</a>.  This is a bit different as they expect you to have a class and then using interception to extended it adding some cross cutting concerns.   My IL is rusty, to say the least, so I'm not going to write a code example but you could have a list other classes that take the ILGenerator and check for it's own attribute and add the code they need and then chain it on to the next one. Then to add another attribute check you could just add to the list. </p>

<p>Instead of writing the check and throw calls in IL you could create a static method and just add the IL Call to that static method when needed.  I've done it that way in the pass so the code is in normal C# and easier to maintain.  </p>

<p>Side comment: I wouldn't create an interface for a DTO.  Do you really need that interface or can you skip it and just create a class with no interface?  Being I don't know the reason for the interface that's up to you but from my experience it's rarely needed to make an interface for a DTO and it's better to just pass the DTO</p>
    </div>