<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You haven't implemented the observer pattern as your <strong>subject</strong>, <code>Observable</code>, doesn't contain a list of observers.</p>

<p>Whilst this may seem like some small petty point it is <a href="https://en.wikipedia.org/wiki/Observer_pattern#What_problems_can_the_Observer_design_pattern_solve?" rel="nofollow noreferrer">the core problem that the pattern hopes to solve</a>.</p></li>
<li><p>You have failed to make the subject relay to its observers. As you have moved the code, <code>run</code>, that should be in the observer into the subject.</p>

<p>This makes the observer interface neigh on useless, because if you want to change this functionality then you're screwed.</p></li>
</ul>

<p>An example of the observer pattern is in Python's <code>logging</code> library.
In this you have events like a <code>logger.info(message)</code>.
The <code>logger</code>, the <strong>subject</strong>, goes on to call the underlying <a href="https://docs.python.org/3/library/logging.html#handler-objects" rel="nofollow noreferrer">handlers</a>, <strong>observers</strong>, with the event.
This causes the handler to handle the event how it's been designed to.</p>

<p>It's common to have a <a href="https://docs.python.org/3/library/logging.handlers.html#streamhandler" rel="nofollow noreferrer"><code>StreamHandler</code></a> and sometimes a <a href="https://docs.python.org/3/library/logging.handlers.html#filehandler" rel="nofollow noreferrer"><code>FileHandler</code></a>.
The former that just <code>print</code>s the message, and the latter that writes the message to a file.</p>
    </div>