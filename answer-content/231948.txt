<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, the <code>Include</code> is ignored because you project the result to a new result (<code>Select(x =&gt; new{ ... }</code>). So you may as well remove it.</p>

<p>Then, there is some room for improvement by eliminating the repetitive parts. It's much easier to do this in query syntax:</p>

<pre class="lang-cs prettyprint-override"><code>var customers = from cst in _customerRepository.All() // Assuming this method exists
    let lastInvoice = cst.Invoices.OrderByDescending(t =&gt; t.InvoiceDate).FirstOrDefault()
    let upaidInvoices = cst.Invoices.Where(t =&gt; !t.IsPaid)
    select new
      CustomerListEntity {
        Name = cst.Name,
        CustomerID = cst.CustomerId,
        RecentInvoiceRef = lastInvoice.Ref ?? string.Empty,
        RecentInvoiceAmount = lastInvoice.Value,
        UnpaidInvoicesNumber = upaidInvoices.Count(),
        UnpaidInvoicesTotalAmount = upaidInvoices.Sum(k =&gt; k.Value)
    });
</code></pre>

<p>The <code>let</code> keyword defines a local variable that can be reused in the LINQ statement. As you see, this greatly improves the readability of the code.</p>

<p>It <em>also</em> slightly improves the generated SQL query, because <code>Ref</code> and <code>Value</code> will now be retrieved in one subquery instead of two. Unfortunately, this doesn't apply to <code>Count</code> and <code>Sum</code>, because aggregates require separate subqueries.</p>

<p>Also, note that the null checks are removed. The LINQ statement is translated into SQL and executed in the database. SQL doesn't have this null reference concept.</p>

<p>One last point is that there is broad consensus on the additional repository layer being totally redundant. Consider removing and query directly on the context.</p>
    </div>