<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've noticed you have a common bug that often occurs in Javascript code called a <strong>race condition</strong>.</p>

<p>If <code>uniqueIdCreatorHandler</code> is called again before a previous call finishes there is a race condition created because <code>state.ids</code> is replaced at the end of the call. </p>

<p>If both calls happen at the same time they each generate a unique copy of the original <code>state.ids</code> then overwrite state <code>this.setState({ ids: ids });</code>. This causes the first change to <code>state.ids</code> to be forgotten.</p>

<p><strong>This is a direct result caused by replacing state. <code>this.setState({ ids: ids });</code></strong></p>

<p>As others have recommend I would simply keep a increment in state for new ids.</p>

<p><em>Note: you can easily demonstrate this in your code by adding and calling this method</em></p>

<pre><code>double = () =&gt; {
  this.uniqueIdCreatorHandler()
  this.uniqueIdCreatorHandler()
}
</code></pre>

<p><em>Other comments</em>
There are small improvements you could make to your code like spreading the mapped ids into Math.max.</p>

<p>I wouldn't worry too much about Javascript performance, focus on readability. Make variable names more verbose and add doc blocks to methods.</p>

<p>One thing I like to see (which you have done) is the embrace of array methods. Although they may not be necessary here they are a strong indicator of comprehension.</p>

<p>Keep it up!</p>
    </div>