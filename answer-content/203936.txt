<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General Feedback</h1>

<p>This looks like a neat little program. I admit I hadn't explored the audio APIs before reading <a href="https://codereview.stackexchange.com/q/203209/120114">your first post</a> and as a musician I enjoy seeing technology connect audio and visual elements. The colors on the frequency contains is a nice array. Good work! There are a few things mentioned below that can help optimize memory as well as the coding style. The feedback comes both from my experience as well as reading articles <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">like this one</a>.</p>

<h1>Suggestions</h1>

<h2>Event delegation</h2>

<p>Use event delegation instead of manually setting the <code>onclick</code> handlers. </p>

<p>For example, instead of assigning a callback function to the <code>onclick</code> attribute of each frequency button, use <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer">EventTarget.addEventListener()</a> for the <code>click</code> event, and inspect <code>event.target</code> to see if it has the class <code>frequency-container</code>:</p>

<pre><code>frequencyGrid.addEventListener('click', function(event) {
    const target = event.target;
    if (target.classList.contains('frequency-container')) {
        let frequencyChosen = target.getAttribute('data-frequency');
</code></pre>

<p>Not only does it allow the click handler to be set once on a container but also it can avoid memory leaks (since the frequencies can be removed from the DOM). See answers to <a href="https://stackoverflow.com/q/15761094/1575353">DOM: why is this a memory leak?</a> for more information.</p>

<h3>Strict Mode</h3>

<p>Many of the functions in the javascript section have <code>'use strict';</code> at the first line, while the IIFE on the page has that directive at the start. Why not make the Javascript section more like the IIFE?</p>

<h3>Use <code>const</code> as default instead of <code>let</code></h3>

<p>It is advisable to use <code>const</code> instead of <code>let</code> for any variable that doesn't need to be re-assigned. Then when you determine re-assignment is necessary, use <code>let</code>. That way there will be less chance of overwriting a value.</p>

<p>On that same topic, there is little point in assigning a value of <code>null</code> shortly before assigning an actual value - e.g. the following lines come in <code>startFrequencyTrainer()</code>:</p>

<blockquote>
<pre><code>let frequencies = null;
let frequency = null;

// Create objects
toneContext = new(window.AudioContext || window.webkitAudioContext)();
toneAmplifier = toneContext.createGain();

// Pick a frequency
frequencies = getFrequencies(difficultyMode);
frequency = getNewFrequency(frequencies, previousFrequency);
</code></pre>
</blockquote>

<p>Instead <code>frequencies</code> and <code>frequency</code> can be declared as a <code>const</code> when assigned.</p>

<pre><code>// Create objects
toneContext = new(window.AudioContext || window.webkitAudioContext)();
toneAmplifier = toneContext.createGain();

// Pick a frequency
const frequencies = getFrequencies(difficultyMode);
const frequency = getNewFrequency(frequencies, previousFrequency);
</code></pre>

<p>The same is true for <code>newFrequency</code> in <code>getNewFrequency()</code>:</p>

<blockquote>
<pre><code>let newFrequency = null;
newFrequency = frequencies[Math.floor(Math.random() * frequencies.length)];
</code></pre>
</blockquote>

<p>This can be simplified to a single line, since there is no point in the value being <code>null</code> before it is assigned:</p>

<pre><code>let newFrequency = frequencies[Math.floor(Math.random() * frequencies.length)];
</code></pre>

<h3>Use spread operator</h3>

<p>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">the spread operator</a> for things like putting the HTMLElement collections into an array instead of using <code>Array.prototype.forEach.call</code>.</p>

<p>So lines like these:</p>

<blockquote>
<pre><code>let difficultyButtons = document.getElementsByClassName('difficulty-button');
Array.prototype.forEach.call(difficultyButtons, function (difficultyButton) {
</code></pre>
</blockquote>

<p>Can be changed to this:</p>

<pre><code>let difficultyButtons = document.getElementsByClassName('difficulty-button');
[...difficultyButtons].forEach( function (difficultyButton) {
</code></pre>

<h2>Selecting frequencies by difficulty</h2>

<p>There isn't anything wrong with the function <code>getFrequencies()</code> but it could be shortened by declaring a mapping outside the function:</p>

<pre><code>const frequenciesByDifficulty = {
'easy': ["250", "800", "2500", "8000"],
  'normal': ["100", "200", "400", "800", "1600", "3150", "6300", "12500"],
  'hard': ["80", "125", "160", "250", "315", "500", "630", "1000", "1250", "2000", "2500", "4000", "5000", "8000", "10000", "16000"],
  'pro': ["20", "25", "31.5", "40", "50", "63", "80", "100", "125", "160", "200", "250", "315", "400", "500", "630", "800", "1000", "1250", "1600", "2000", "2500", "3150", "4000", "5000", "6300", "8000", "10000", "12500", "16000", "20000"]
};
</code></pre>

<p>Then that function can simply look up frequencies from that mapping:</p>

<pre><code>function getFrequencies(difficultyMode) {
    if (difficultyMode in frequenciesByDifficulty) {
      return frequenciesByDifficulty[difficultyMode];
    }
    //fallback
    return null;
}
</code></pre>

<p>That way the frequencies can be altered without having to modify the function.</p>

<h3>formatter function</h3>

<p>This is probably just a personal preference - the function <code>formatterFunction()</code> could be simplified by removing <code>frequencyFormatted</code> and simply return the values as soon as they are ready:</p>

<pre><code>function frequencyFormatter(frequency) {
    if (frequency &gt; 999) {
        return frequency / 1000 + ' k';
    } 
    return frequency + ' ';    
}
</code></pre>

<p>And if you wanted, that could be simplifed using an arrow function (as could all functions):</p>

<pre><code>const frequencyFormatter = frequency =&gt; frequency &gt; 999 ? frequency / 1000 + ' k' : frequency + ' ';
</code></pre>

<h3>Use a function partial for the volume change callback</h3>

<p>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer"><code>Function.bind()</code></a> to create a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">partially applied function</a> for the <code>oninput</code> callback:</p>

<pre><code>volumeControl.oninput = changeVolume.bind(null, volumeControl);
</code></pre>

<h2>Updated code</h2>

<p>See snippet below. I didn't change all the functions to arrow functions but could...</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';
let toneContext = null;
let toneGenerator = null;
let toneAmplifier = null;

function startFrequencyTrainer(difficultyMode, previousFrequency) {
  // Create objects
  toneContext = new(window.AudioContext || window.webkitAudioContext)();
  toneAmplifier = toneContext.createGain();

  // Pick a frequency
  const frequencies = getFrequencies(difficultyMode);
  const frequency = getNewFrequency(frequencies, previousFrequency);

  return {
    frequencies,
    frequency
  };
}

function stopFrequencyTrainer() {
  toneContext.close();
}

function startToneGenerator(frequency, volumeControl, startTimer, stopTimer) {
  // Create and configure the oscillator
  toneGenerator = toneContext.createOscillator();
  toneGenerator.type = 'sine'; // could be sine, square, sawtooth or triangle
  toneGenerator.frequency.value = frequency;

  // Connect toneGenerator -&gt; toneAmplifier -&gt; output
  toneGenerator.connect(toneAmplifier);
  toneAmplifier.connect(toneContext.destination);

  // Set the gain volume
  toneAmplifier.gain.value = volumeControl.value / 100;

  // Fire up the toneGenerator
  toneGenerator.start(toneContext.currentTime + startTimer);
  toneGenerator.stop(toneContext.currentTime + startTimer + stopTimer);
}

function stopToneGenerator() {
  if (toneGenerator) {
    toneGenerator.disconnect();
  }
}

function changeVolume(volumeControl) {
  toneAmplifier.gain.value = volumeControl.value / 100;
}
const frequenciesByDifficulty = {
  'easy': ["250", "800", "2500", "8000"],
  'normal': ["100", "200", "400", "800", "1600", "3150", "6300", "12500"],
  'hard': ["80", "125", "160", "250", "315", "500", "630", "1000", "1250", "2000", "2500", "4000", "5000", "8000", "10000", "16000"],
  'pro': ["20", "25", "31.5", "40", "50", "63", "80", "100", "125", "160", "200", "250", "315", "400", "500", "630", "800", "1000", "1250", "1600", "2000", "2500", "3150", "4000", "5000", "6300", "8000", "10000", "12500", "16000", "20000"]
};

function getFrequencies(difficultyMode) {
  if (difficultyMode in frequenciesByDifficulty) {
    return frequenciesByDifficulty[difficultyMode];
  }
  //fallback
  return null;
}

function getNewFrequency(frequencies, previousFrequency) {
  let newFrequency = frequencies[Math.floor(Math.random() * frequencies.length)];
  // Avoid getting the same frequency twice in a row
  while (newFrequency === previousFrequency) {
    newFrequency = frequencies[Math.floor(Math.random() * frequencies.length)];
  }
  return newFrequency;
}

function frequencyFormatter(frequency) {
  if (frequency &gt; 999) {
    return frequency / 1000 + ' k';
  }
  return frequency + ' ';
}

(function() {
  'use strict';
  let difficultyMode = 'easy'; // default difficulty mode
  let frequencyTrainer = startFrequencyTrainer(difficultyMode);
  let frequency = frequencyTrainer.frequency;
  let frequencyContainers = null;
  const frequencyGrid = document.getElementsByClassName('grid')[0];
  const controls = document.getElementsByClassName('controls')[0];

  // Control buttons
  const startButton = document.getElementById('start-button');
  startButton.onclick = function() {
    stopToneGenerator();
    startToneGenerator(frequency, volumeControl, 0, 3);
  };
  const stopButton = document.getElementById('stop-button');
  stopButton.onclick = function() {
    stopToneGenerator();
  };
  const nextButton = document.getElementById('next-button');
  nextButton.onclick = function() {
    stopToneGenerator();
    stopFrequencyTrainer();
    frequency = startFrequencyTrainer(difficultyMode, frequency).frequency;
    startToneGenerator(frequency, volumeControl, 0.05, 3);
  };
  let volumeControl = document.getElementById('volume-control');
  volumeControl.oninput = changeVolume.bind(null, volumeControl);

  function fillFrequencyGrid(frequencies) {
    let frequencyFormatted = null;

    frequencyGrid.innerHTML = '';
    frequencies.forEach(function(frequency) {
      frequencyFormatted = frequencyFormatter(frequency);
      frequencyGrid.insertAdjacentHTML('beforeend', '&lt;div class="frequency-container" data-frequency="' + frequency + '"&gt;' + frequencyFormatted + 'Hz&lt;/div&gt;');
    });
  }
  frequencyGrid.addEventListener('click', function(event) {
    const target = event.target;
    if (target.classList.contains('frequency-container')) {
      let frequencyChosen = target.getAttribute('data-frequency');
      let frequencyChosenFormatted = frequencyFormatter(frequencyChosen);

      stopToneGenerator();
      if (frequencyChosen === frequency) {
        if (window.confirm(frequencyChosenFormatted + 'Hz is correct!\nLet\'s try another one!')) {
          stopFrequencyTrainer();
          frequency = startFrequencyTrainer(difficultyMode, frequency).frequency;
          startToneGenerator(frequency, volumeControl, 0.05, 3);
        }
      } else {
        window.alert(frequencyChosenFormatted + 'Hz is not correct.\nPlease try again.');
        startToneGenerator(frequency, volumeControl, 0.05, 3);
      }
    }
  })


  // Generate frequency grid
  fillFrequencyGrid(frequencyTrainer.frequencies);

  // Difficulty buttons
  controls.addEventListener('click', event =&gt; {
    if (event.target.classList.contains('difficulty-button')) {
      event.stopPropagation();
      stopToneGenerator();
      stopFrequencyTrainer();
      difficultyMode = event.target.getAttribute('data-difficulty');
      frequencyTrainer = startFrequencyTrainer(difficultyMode, frequency);
      frequency = frequencyTrainer.frequency;
      fillFrequencyGrid(frequencyTrainer.frequencies);
    }
  }, false);
}());</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  font-family: 'Montserrat', sans-serif;
  text-align: center;
  padding-top: 10px;
}

h1 {
  margin: 0 auto;
  font-size: 30px;
  text-decoration: underline;
}

h2 {
  margin: 0;
  font-size: 25px;
}

a {
  color: #0000BB;
}

a:hover {
  color: #000000;
}

button {
  font-family: 'Montserrat', sans-serif;
  text-align: center;
  font-size: calc(10px + 1vw);
}

.body {
  max-width: 1500px;
  border: 1px solid black;
  width: 95%;
  margin: 0 auto;
}

.title {
  padding: 10px 0 0 0;
  margin: 0 auto;
  width: 95%;
}

.content {
  padding: 30px 0 0 0;
  margin: 0 auto;
  width: 95%;
}

.controls {
  padding: 0;
  margin: 0 auto;
  width: 95%;
}

.volume-control {
  padding: 0;
  margin: 0 auto;
  min-width: 200px;
  width: 80%;
}

.footer {
  padding: 20px 0 10px 0;
  margin: 0 auto;
  width: 95%;
}

.grid {
  margin: 0 auto;
  width: 95%;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(84px, 1fr));
}

.frequency-container {
  margin: 2px;
  border: 1px solid black;
  padding: 0;
  min-width: 80px;
  min-height: 80px;
  max-width: 300px;
  max-height: 300px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: calc(30px + 0.2vw);
  text-shadow: 0 0 25px white;
}

.frequency-container:before {
  content: '';
  padding-top: 100%;
  float: left;
}

[data-frequency="20"] {
  background: #CC2828;
}

[data-frequency="25"] {
  background: #CC3028;
}

[data-frequency="31.5"] {
  background: #CC3928;
}

[data-frequency="40"] {
  background: #CC4128;
}

[data-frequency="50"] {
  background: #CC4928;
}

[data-frequency="63"] {
  background: #CC5128;
}

[data-frequency="80"] {
  background: #CC5928;
}

[data-frequency="100"] {
  background: #CC6128;
}

[data-frequency="125"] {
  background: #CC6A28;
}

[data-frequency="160"] {
  background: #CC7228;
}

[data-frequency="200"] {
  background: #CC7A28;
}

[data-frequency="250"] {
  background: #CC8228;
}

[data-frequency="315"] {
  background: #CC8A28;
}

[data-frequency="400"] {
  background: #CC9228;
}

[data-frequency="500"] {
  background: #CC9B28;
}

[data-frequency="630"] {
  background: #CCAB28;
}

[data-frequency="800"] {
  background: #CCBB28;
}

[data-frequency="1000"] {
  background: #CCCC28;
}

[data-frequency="1250"] {
  background: #BBCC28;
}

[data-frequency="1600"] {
  background: #ABCC28;
}

[data-frequency="2000"] {
  background: #9BCC28;
}

[data-frequency="2500"] {
  background: #8ACC28;
}

[data-frequency="3150"] {
  background: #7ACC28;
}

[data-frequency="4000"] {
  background: #6ACC28;
}

[data-frequency="5000"] {
  background: #59CC28;
}

[data-frequency="6300"] {
  background: #49CC28;
}

[data-frequency="8000"] {
  background: #39CC28;
}

[data-frequency="10000"] {
  background: #28CC28;
}

[data-frequency="12500"] {
  background: #28CC39;
}

[data-frequency="16000"] {
  background: #28CC49;
}

[data-frequency="20000"] {
  background: #28CC59;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:900" /&gt;
&lt;div class="body"&gt;
  &lt;div class="title"&gt;
    &lt;h1&gt;Frequency Trainer&lt;/h1&gt;
  &lt;/div&gt;
  &lt;div class="controls"&gt;
    &lt;br /&gt;
    &lt;button type="button" id="start-button" class="control-button"&gt;Start&lt;/button&gt;
    &lt;button type="button" id="stop-button" class="control-button"&gt;Stop&lt;/button&gt;
    &lt;button type="button" id="next-button" class="control-button"&gt;Next&lt;/button&gt;&lt;br /&gt;
    &lt;br /&gt; Volume:
    &lt;br /&gt;
    &lt;input type="range" id="volume-control" class="volume-control" min="0" max="20" value="2" step="0.1" /&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;button type="button" id="difficulty-easy" class="difficulty-button" data-difficulty="easy"&gt;Easy&lt;/button&gt;
    &lt;button type="button" id="difficulty-normal" class="difficulty-button" data-difficulty="normal"&gt;Normal&lt;/button&gt;
    &lt;button type="button" id="difficulty-hard" class="difficulty-button" data-difficulty="hard"&gt;Hard&lt;/button&gt;
    &lt;button type="button" id="difficulty-pro" class="difficulty-button" data-difficulty="pro"&gt;Pro&lt;/button&gt;&lt;br /&gt;
    &lt;br /&gt;
  &lt;/div&gt;
  &lt;div class="grid"&gt;
  &lt;/div&gt;
  &lt;div class="footer"&gt;
    &lt;a href="https://github.com/MaxVMH/frequency-trainer/tree/v.0.0.4-alpha"&gt;v.0.0.4&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<p>Or with Arrow functions:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';
let toneContext = null;
let toneGenerator = null;
let toneAmplifier = null;

const startFrequencyTrainer = (difficultyMode, previousFrequency) =&gt; {
  // Create objects
  toneContext = new(window.AudioContext || window.webkitAudioContext)();
  toneAmplifier = toneContext.createGain();

  // Pick a frequency
  const frequencies = getFrequencies(difficultyMode);
  const frequency = getNewFrequency(frequencies, previousFrequency);

  return {
    frequencies,
    frequency
  };
}

const stopFrequencyTrainer = _ =&gt; toneContext.close();

const startToneGenerator = (frequency, volumeControl, startTimer, stopTimer) =&gt; {
  // Create and configure the oscillator
  toneGenerator = toneContext.createOscillator();
  toneGenerator.type = 'sine'; // could be sine, square, sawtooth or triangle
  toneGenerator.frequency.value = frequency;

  // Connect toneGenerator -&gt; toneAmplifier -&gt; output
  toneGenerator.connect(toneAmplifier);
  toneAmplifier.connect(toneContext.destination);

  // Set the gain volume
  toneAmplifier.gain.value = volumeControl.value / 100;

  // Fire up the toneGenerator
  toneGenerator.start(toneContext.currentTime + startTimer);
  toneGenerator.stop(toneContext.currentTime + startTimer + stopTimer);
}

const stopToneGenerator = _ =&gt; {
  if (toneGenerator) {
    toneGenerator.disconnect();
  }
}

const changeVolume = volumeControl =&gt; toneAmplifier.gain.value = volumeControl.value / 100;

const frequenciesByDifficulty = {
  'easy': ["250", "800", "2500", "8000"],
  'normal': ["100", "200", "400", "800", "1600", "3150", "6300", "12500"],
  'hard': ["80", "125", "160", "250", "315", "500", "630", "1000", "1250", "2000", "2500", "4000", "5000", "8000", "10000", "16000"],
  'pro': ["20", "25", "31.5", "40", "50", "63", "80", "100", "125", "160", "200", "250", "315", "400", "500", "630", "800", "1000", "1250", "1600", "2000", "2500", "3150", "4000", "5000", "6300", "8000", "10000", "12500", "16000", "20000"]
};
const getFrequencies = difficultyMode =&gt; {
  if (difficultyMode in frequenciesByDifficulty) {
    return frequenciesByDifficulty[difficultyMode];
  }
  //fallback
  return null;
}

const getNewFrequency = (frequencies, previousFrequency) =&gt; {
  let newFrequency = frequencies[Math.floor(Math.random() * frequencies.length)];
  // Avoid getting the same frequency twice in a row
  while (newFrequency === previousFrequency) {
    newFrequency = frequencies[Math.floor(Math.random() * frequencies.length)];
  }
  return newFrequency;
}

const frequencyFormatter = frequency =&gt; {
  if (frequency &gt; 999) {
    return frequency / 1000 + ' k';
  }
  return frequency + ' ';
}

(function() {
  'use strict';
  let difficultyMode = 'easy'; // default difficulty mode
  let frequencyTrainer = startFrequencyTrainer(difficultyMode);
  let frequency = frequencyTrainer.frequency;
  let frequencyContainers = null;
  const frequencyGrid = document.getElementsByClassName('grid')[0];
  const controls = document.getElementsByClassName('controls')[0];

  // Control buttons
  const startButton = document.getElementById('start-button');
  startButton.onclick = function() {
    stopToneGenerator();
    startToneGenerator(frequency, volumeControl, 0, 3);
  };
  const stopButton = document.getElementById('stop-button');
  stopButton.onclick = function() {
    stopToneGenerator();
  };
  const nextButton = document.getElementById('next-button');
  nextButton.onclick = function() {
    stopToneGenerator();
    stopFrequencyTrainer();
    frequency = startFrequencyTrainer(difficultyMode, frequency).frequency;
    startToneGenerator(frequency, volumeControl, 0.05, 3);
  };
  let volumeControl = document.getElementById('volume-control');
  volumeControl.oninput = changeVolume.bind(null, volumeControl);

  const fillFrequencyGrid = frequencies =&gt; {
    frequencyGrid.innerHTML = '';
    frequencies.forEach(function(frequency) {
      const frequencyFormatted = frequencyFormatter(frequency);
      frequencyGrid.insertAdjacentHTML('beforeend', '&lt;div class="frequency-container" data-frequency="' + frequency + '"&gt;' + frequencyFormatted + 'Hz&lt;/div&gt;');
    });
  };
  frequencyGrid.addEventListener('click', event =&gt; {
    const target = event.target;
    if (target.classList.contains('frequency-container')) {
      event.stopPropagation();
      let frequencyChosen = target.getAttribute('data-frequency');
      let frequencyChosenFormatted = frequencyFormatter(frequencyChosen);

      stopToneGenerator();
      if (frequencyChosen === frequency) {
        if (window.confirm(frequencyChosenFormatted + 'Hz is correct!\nLet\'s try another one!')) {
          stopFrequencyTrainer();
          frequency = startFrequencyTrainer(difficultyMode, frequency).frequency;
          startToneGenerator(frequency, volumeControl, 0.05, 3);
        }
      } else {
        window.alert(frequencyChosenFormatted + 'Hz is not correct.\nPlease try again.');
        startToneGenerator(frequency, volumeControl, 0.05, 3);
      }
    }
  }, true);


  // Generate frequency grid
  fillFrequencyGrid(frequencyTrainer.frequencies);
  controls.addEventListener('click', event =&gt; {
    if (event.target.classList.contains('difficulty-button')) {
      event.stopPropagation();
      stopToneGenerator();
      stopFrequencyTrainer();
      difficultyMode = event.target.getAttribute('data-difficulty');
      frequencyTrainer = startFrequencyTrainer(difficultyMode, frequency);
      frequency = frequencyTrainer.frequency;
      fillFrequencyGrid(frequencyTrainer.frequencies);
    }
  }, false);
}());</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  font-family: 'Montserrat', sans-serif;
  text-align: center;
  padding-top: 10px;
}

h1 {
  margin: 0 auto;
  font-size: 30px;
  text-decoration: underline;
}

h2 {
  margin: 0;
  font-size: 25px;
}

a {
  color: #0000BB;
}

a:hover {
  color: #000000;
}

button {
  font-family: 'Montserrat', sans-serif;
  text-align: center;
  font-size: calc(10px + 1vw);
}

.body {
  max-width: 1500px;
  border: 1px solid black;
  width: 95%;
  margin: 0 auto;
}

.title {
  padding: 10px 0 0 0;
  margin: 0 auto;
  width: 95%;
}

.content {
  padding: 30px 0 0 0;
  margin: 0 auto;
  width: 95%;
}

.controls {
  padding: 0;
  margin: 0 auto;
  width: 95%;
}

.volume-control {
  padding: 0;
  margin: 0 auto;
  min-width: 200px;
  width: 80%;
}

.footer {
  padding: 20px 0 10px 0;
  margin: 0 auto;
  width: 95%;
}

.grid {
  margin: 0 auto;
  width: 95%;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(84px, 1fr));
}

.frequency-container {
  margin: 2px;
  border: 1px solid black;
  padding: 0;
  min-width: 80px;
  min-height: 80px;
  max-width: 300px;
  max-height: 300px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: calc(30px + 0.2vw);
  text-shadow: 0 0 25px white;
}

.frequency-container:before {
  content: '';
  padding-top: 100%;
  float: left;
}

[data-frequency="20"] {
  background: #CC2828;
}

[data-frequency="25"] {
  background: #CC3028;
}

[data-frequency="31.5"] {
  background: #CC3928;
}

[data-frequency="40"] {
  background: #CC4128;
}

[data-frequency="50"] {
  background: #CC4928;
}

[data-frequency="63"] {
  background: #CC5128;
}

[data-frequency="80"] {
  background: #CC5928;
}

[data-frequency="100"] {
  background: #CC6128;
}

[data-frequency="125"] {
  background: #CC6A28;
}

[data-frequency="160"] {
  background: #CC7228;
}

[data-frequency="200"] {
  background: #CC7A28;
}

[data-frequency="250"] {
  background: #CC8228;
}

[data-frequency="315"] {
  background: #CC8A28;
}

[data-frequency="400"] {
  background: #CC9228;
}

[data-frequency="500"] {
  background: #CC9B28;
}

[data-frequency="630"] {
  background: #CCAB28;
}

[data-frequency="800"] {
  background: #CCBB28;
}

[data-frequency="1000"] {
  background: #CCCC28;
}

[data-frequency="1250"] {
  background: #BBCC28;
}

[data-frequency="1600"] {
  background: #ABCC28;
}

[data-frequency="2000"] {
  background: #9BCC28;
}

[data-frequency="2500"] {
  background: #8ACC28;
}

[data-frequency="3150"] {
  background: #7ACC28;
}

[data-frequency="4000"] {
  background: #6ACC28;
}

[data-frequency="5000"] {
  background: #59CC28;
}

[data-frequency="6300"] {
  background: #49CC28;
}

[data-frequency="8000"] {
  background: #39CC28;
}

[data-frequency="10000"] {
  background: #28CC28;
}

[data-frequency="12500"] {
  background: #28CC39;
}

[data-frequency="16000"] {
  background: #28CC49;
}

[data-frequency="20000"] {
  background: #28CC59;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:900" /&gt;
&lt;div class="body"&gt;
  &lt;div class="title"&gt;
    &lt;h1&gt;Frequency Trainer&lt;/h1&gt;
  &lt;/div&gt;
  &lt;div class="controls"&gt;
    &lt;br /&gt;
    &lt;button type="button" id="start-button" class="control-button"&gt;Start&lt;/button&gt;
    &lt;button type="button" id="stop-button" class="control-button"&gt;Stop&lt;/button&gt;
    &lt;button type="button" id="next-button" class="control-button"&gt;Next&lt;/button&gt;&lt;br /&gt;
    &lt;br /&gt; Volume:
    &lt;br /&gt;
    &lt;input type="range" id="volume-control" class="volume-control" min="0" max="20" value="2" step="0.1" /&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;button type="button" id="difficulty-easy" class="difficulty-button" data-difficulty="easy"&gt;Easy&lt;/button&gt;
    &lt;button type="button" id="difficulty-normal" class="difficulty-button" data-difficulty="normal"&gt;Normal&lt;/button&gt;
    &lt;button type="button" id="difficulty-hard" class="difficulty-button" data-difficulty="hard"&gt;Hard&lt;/button&gt;
    &lt;button type="button" id="difficulty-pro" class="difficulty-button" data-difficulty="pro"&gt;Pro&lt;/button&gt;&lt;br /&gt;
    &lt;br /&gt;
  &lt;/div&gt;
  &lt;div class="grid"&gt;
  &lt;/div&gt;
  &lt;div class="footer"&gt;
    &lt;a href="https://github.com/MaxVMH/frequency-trainer/tree/v.0.0.4-alpha"&gt;v.0.0.4&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>