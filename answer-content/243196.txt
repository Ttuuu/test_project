<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To preface, PEP8 recommends <a href="https://stackoverflow.com/questions/1125653/python-using-4-spaces-for-indentation-why">4 spaces</a> instead of 2 spaces for indentation, so I've written all below code as such.</p>

<p>There is a subtle bug in your program (and may be nonexistent at all, the requirements are ambiguous here), but:</p>

<pre><code>if elem['date'] &lt; mod_arr[mod_index]['date']:
    elem['value'] += mod_arr[mod_index]['value']
else:
    elem['value'] += mod_arr[mod_index + 1]['value']
    mod_index += 1
</code></pre>

<p>assumes that <code>mod_array[mod_index + 1]["date"] &gt; mod_array[mod_index]["date"]</code>, though your requirements never say that <code>"date"</code> is <em>strictly</em> increasing (and <code>mod_array</code> being sorted doesn't imply this).</p>

<p>We can handle this by changing the <code>if / else</code> to a <code>while</code>:</p>

<pre><code>while elem['date'] &gt;= mod_arr[mod_index]['date']:
    mod_index += 1

elem['value'] += mod_arr[mod_index]['value']
</code></pre>

<p>Note that this also increments <code>mod_index</code> before the mutation of <code>elem["value"]</code>, allowing us to de-duplicate its mutation. </p>

<p>Since we are only moving forward in <code>mod_arr</code>, we actually don't need <code>mod_index</code> at all. We can do <code>mod_array_iter = iter(mod_array)</code>, and replace <code>mod_index += 1</code> with <code>mod = next(mod_array_iter)</code>. This also helps us avoid any off-by-one errors.</p>

<p>Another benefit of using <code>iter</code> here is it opens up an easy way to exit the function if <code>mod_array</code> is empty (implying no mutations to <code>base_arr</code> should be done, the original program didn't account for this) <em>or</em> if we've traversed through all of <code>mod_array_iter</code> (implying necessary mutations to <code>base_arr</code> have been done, original program accounted for this with the <code>if</code> and inner <code>break</code>). We can use a <code>try / except</code> for both of those cases, and get rid of the initial <code>if</code> with inner <code>break</code>.</p>

<p>Final code ends up looking like (wrapped is a function for reusability):</p>

<pre><code>def mutate_base_arr(base_arr, mod_arr):
    mod_arr_iter = iter(mod_arr)

    try:
        mod = next(mod_arr_iter)

        for elem in base_arr:
            while elem['date'] &gt;= mod['date']:
                mod = next(mod_arr_iter)

            elem['value'] += mod['value']
    except StopIteration:
        return
</code></pre>

<p>If you really wanted to take this a step further, you could get rid of the <code>while</code> and duplicate <code>next</code>s by using <code>itertools</code>, yielding this version of the function:</p>

<pre><code>def mutate_base_arr(base_arr, mod_arr):
    mod_arr_iter = iter(mod_arr)

    try:
        for elem in base_arr:
            valid_mod = next(mod for mod in mod_arr_iter if elem["date"] &lt; mod["date"])
            mod_arr_iter = itertools.chain([valid_mod], mod_arr_iter)

            elem['value'] += valid_mod['value']
    except StopIteration:
        return
</code></pre>

<p>Though I'm not sure if I'd recommend this, as having to prepend <code>valid_mod</code> with <code>mod_arr_iter</code> each iteration so it can be re-checked next iteration of the <code>for</code> is a bit unusual. </p>
    </div>