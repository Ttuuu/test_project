<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1> General </h1>

<p><code>RNG</code> is a poor name for a class that generates passwords, not random numbers. <code>PasswordGenerator</code> would be better.</p>

<p>In idiomatic Java, <code>{</code> are on the same line, not on a newline. <code>else</code> is on the same line as <code>}</code>. </p>

<p>In idiomatic Java, method and variable names use camelCase. Avoid acronyms - they tend to make the code harder to read.</p>

<p>Using <code>final</code> indicates to the reader that variables will not be reassigned.</p>

<p>Your whitespace is inconsistent. In idiomatic Java, there is always whitespace between a control flow keyword (<code>if</code>, <code>while</code>) and the <code>(</code>.</p>

<p>Resources that can be closed, such as <code>Scanner</code>, should always be closed, either in a <code>try-with-resources</code> or a <code>try-finally</code>. You also only need one scanner.</p>

<p>ALL CAPS messages are hard to read. Use proper capitalization.</p>

<h1>restart</h1>

<p>This should be refactored - there's no reason to prompt the user here and also in <code>main()</code>. It would be cleaner to have two methods, each asking for one value and repeating until it is valid.</p>

<h1>testLength</h1>

<p>There's no reason to test every possible permutation of cases separately. Test each case once, and include the relevant error message for that case if it fails.</p>

<h1>PWGenerator</h1>

<p>You only need one <code>Random</code> instance. It should be passed around, for testing purposes.</p>

<p><code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, and <code>e</code> are utterly meaningless. Try to use variable names that make it easier to understand what your code is doing.</p>

<p>You can make password generation a little more compact if you keep a <code>String[][]</code>, rather than a <code>String[]</code>.</p>

<p>You don't need the last <code>if</code> check - you can't exit the <code>while</code> loop until you're done generating passwords. Calling <code>System.exit(0)</code> explicitly is overkill - let the flow of the application end normally.</p>

<p><code>for</code> loops might be more appropriate than the <code>while</code> loops. They better limit the scope of the counter variables.</p>

<p></p><hr>
If you make all these changes, your code might look more like:

<pre><code>final class PasswordGenerator {

    public static final void main(String[] args) {
        System.out.print("This program generates between 1 and 100 RANDOM and SECURE passwords.\nPasswords are not stored in any way.\nWRITE DOWN YOUR NEW PASSWORDS!\nPassword length must be between 12 and 120.\n\n");
        try (final Scanner input = new Scanner(System.in)) {
            new PasswordGenerator().generatePasswords(passwordLength(input), numberOfPasswords(input));
        }
    }

    private static int scanInt(final Scanner scanner) {
        while (!scanner.hasNextInt()) {
            System.out.print("Error! '" + scanner.next() + "' is not a number. Please try again: ");
        }
        return scanner.nextInt();
    }

    private static int passwordLength(final Scanner scanner) {
        System.out.print("Please enter the length for your new password(s): ");
        int passwordLength = scanInt(scanner);

        while (passwordLength &lt; 12 || passwordLength &gt; 120) {
            System.out.println("Error! Length of password mut be between 12 and 120\n");
            System.out.print("Please enter the length for your new password(s): ");
            passwordLength = scanInt(scanner);
        }

        return passwordLength;
    }

    private static int numberOfPasswords(final Scanner scanner) {
        System.out.print("Please enter the number of passwords you wish to create: ");
        int numberOfPasswords = scanInt(scanner);

        while (numberOfPasswords &lt; 1 || numberOfPasswords &gt; 100) {
            System.out.println("Error! Number of passwords must be between 1 and 100\n");
            System.out.print("Please enter the number of passwords you wish to create: ");
            numberOfPasswords = scanInt(scanner);
        }

        return numberOfPasswords;
    }

    private final void generatePasswords(final int desiredPasswordLength, final int desiredNumberOfPasswords) {
        final Random random = new Random();

        final String[][] passwordCharacters = {
                {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"},
                {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"},
                {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9" },
                {"!", "@", "#", "$", "%", "^", "&amp;", "*", "(", ")", "-", "_", "+", "=", "?", "/", "&lt;", "&gt;"},
        };

        System.out.println();

        for (int passwordNumber = 1; passwordNumber &lt;= desiredNumberOfPasswords; passwordNumber++) {
            System.out.print("Password #" + passwordNumber + ": ");
            for (int currentPasswordLength = 0; currentPasswordLength &lt; desiredPasswordLength; currentPasswordLength++) {
                final int characterType = random.nextInt(passwordCharacters.length);
                System.out.print(passwordCharacters[characterType][random.nextInt(passwordCharacters[characterType].length)]);
            }
            System.out.println("\n");
        }
    }
}
</code></pre>
    </div>