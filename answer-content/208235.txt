<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template &lt;std::size_t i, std::size_t n, class T, class... Rest&gt;
struct extract_impl&lt;i, n, T, Rest...&gt;
{
    using type = typename extract_impl&lt;i + 1, n, Rest...&gt;::type;
};
</code></pre>

<p>When I recently implemented something like this, I've come up with an idea that a simple recursive implementation does not fit particularly well due to its linearity. Take millionth element of a list, and you instantiate a million of templates at compile time (to retrieve a single type!) So I've finally <a href="https://gitlab.com/bipll/simpleutil/blob/master/include/simpleutil/__typeutil/pack.h" rel="nofollow noreferrer">done it logarithmically</a> (dynamic programming on types, eh?). In brief it is something like:</p>

<pre><code>template&lt;::std::size_t i, class L&gt; struct drop
    : drop&lt;i / 2, typename drop&lt;i - i / 2, L&gt;::type&gt; {};

template&lt;::std::size_t i, class L&gt; using drop_t =
    typename drop&lt;i, L&gt;::type;


// Base cases are drops of sizes 0 and 1
template&lt;class L&gt; struct drop&lt;0, L&gt;: box&lt;L&gt; {};

template&lt;::std::size_t i&gt; struct drop&lt;i, nil&gt;: box&lt;nil&gt; {};

template&lt;&gt; struct drop&lt;0, nil&gt;: box&lt;nil&gt; {};

template&lt;class H, class... Ts&gt; struct drop&lt;1, list&lt;H, Ts...&gt;&gt;
    : box&lt;list&lt;Ts...&gt;&gt; {};


// Head extractor, once we've dropped all the preceding elements
template&lt;class L&gt; struct car;

template&lt;class L&gt; using car_t = typename car&lt;L&gt;::type;

template&lt;class H, class... Ts&gt; struct car&lt;list&lt;H, Ts...&gt;&gt;: box&lt;H&gt; {};


// The element extractor itself
template&lt;::std::size_t i, class L&gt; using element =
    ::std::enable_if&lt;i &lt; size_v&lt;L&gt;, car_t&lt;drop_t&lt;i, L&gt;&gt;&gt;;

template&lt;::std::size_t i, class L&gt; using element_t
    = type_t&lt;element&lt;i, L&gt;&gt;;
</code></pre>

<p>(<code>type_t</code> is a lazy member-<code>type</code> extractor defined in another file. <code>box&lt;T&gt;</code> is simply the inverse, a struct with internal typedef <code>type = T</code>. <code>size_v</code> is defined somewhere above, it is merely pack size for <code>list</code>s.)</p>
    </div>