<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Strictly speaking, the code does not solve the problem. As an interviewer I'd expect a clearly defined</p>

<pre><code>    List add(List l1, List l2)
</code></pre>

<p>method.</p>

<p>At the very least, rename <code>Run</code> to <code>add</code>, and do not <code>CreateNumber</code>s in it, but pass them as parameters.</p></li>
<li><p>Since it is guaranteed that every node contains a <em>digit</em>, the sum may never exceed 19. This means, among other things, that there is no need for <code>decimal</code>. Everything can be done with primitive types, e.g.</p>

<pre><code>    alpha = sum &gt; 10;
    sum -= alpha * 10;
</code></pre>

<p>As a side note, the entity you call <code>alpha</code> is traditionally called <code>carry</code>.</p></li>
<li><p>The <code>do {} while()</code> approach seems to create more problems than it solves. An immediate manifestation is duplication of <code>n1 != null</code> tests. Consider</p>

<pre><code>    while (n1 != null &amp;&amp; n2 != null) {
        // addition logic here
        n1 = n1.Next;
        n2 = n2.Next;
    }
</code></pre>

<p>and promote the carry along the remainder of the longer list in a separate loop.</p></li>
<li><p>Consider creating a dummy head for a resulting list. It is a standard trick to avoid a special case of <code>prev == null</code>, e.g.</p>

<pre><code>    Figure dummy = new Figure;
    Figure tail = dummy;

    while (....) {
        ....
        tail.next = new Figure(sum);
        tail = tail.next;
    }
    ....
    return dummy.next;
</code></pre></li>
</ul>
    </div>