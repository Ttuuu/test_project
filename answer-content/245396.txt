<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Do people still put MySQL credential into the plain php-files?</p>
</blockquote>
<p>Yes. Whether it is ok is a different question...</p>
<blockquote>
<p>Do people still put MySQL credential into the env. variables?</p>
</blockquote>
<p>Yes. That's probably the preferred way.</p>
<p>You shall prevent access to files containing secrets outside of PHP. A PHP script is executed from scratch for every request. You don't want to decrypt your secrets again and again on every request. And anyway if you did that, you would be storing the encrypted secrets and their decryption keys on the same place which leads you to a neverending problem that now you have to secure your decryption keys as well. Just secure your secrets and that's enough.</p>
<p>Don't put secret files to git. Set file system secrets read access only to the application user. Recipe for creating the application container (the one who sets env. variables) may contain encrypted secrets that can only be decrypted (using, possibly 3rd party, service) during the execution of the recipe using credentials provided by the initiator of the recipe execution.</p>
<blockquote>
<p>PDO handles most of the query sanitation, is there something more I'm missing?</p>
</blockquote>
<p>Yes. You should</p>
<pre><code>$pdo-&gt;setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
</code></pre>
<p>or handle <code>PDO::errorCode()</code> after executing queries.</p>
    </div>