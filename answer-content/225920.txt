<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><strong>Docstrings</strong>: You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>docstring</code></a> at the beginning of every method, class, and module you write. This will allow documentation to identify what your code is supposed to do. In the param section of some of your methods, I wrote <code>?</code> so you can fill in what those are supposed to do.</li>
<li><strong>Simplify Returns</strong>: You have code like <code>if expresssion1 return value1 else return value2</code>. This code can be simplified to a one liner, <code>return value1 if expression1 else value2</code>.</li>
<li><strong>Too Many Comments</strong>: A quick look at your program and I see <em>tons</em> of gray. You don't need to explain every variable you create. Having a comment for <code>self.k = len(n)</code> is unnecessary, anyone can see that it's the length of variable <code>n</code>. Having a comment for the algorithms in <code>_simple_fixed_content</code> and <code>_fast_fixed_content</code> is helpful and allows people reading your code to know what that code is supposed to accomplish. </li>
<li><strong>Variable/Parameter Naming</strong>: Having parameter names like <code>p</code>, <code>n</code>, <code>t</code>, <code>s</code> can confuse other programmers reading your code, and even you! You should have meaningful and descriptive parameter and variable names, to remind you what their function is.</li>
<li><strong>Enumerate vs range(len())</strong>: I would use <code>enumerate</code> as it's more generic - eg it will work on <code>iterables</code> and <code>sequences</code>, and the overhead for just returning a reference to an object isn't that big a deal. If you just need an index, you can do <code>for index, _ in enumerate(...)</code>, with the _ displaying that that variable is to be ignored.</li>
<li><strong>ClassNaming</strong>: While you got your variable and method naming correct, class names are a bit different. They should be <code>CapCase</code>.</li>
<li><strong>Variable &amp; Operator Spacing</strong>: You should put spaces between your variables and operators (<code>t+1</code> -&gt; <code>t + 1</code>), as it's a little cleaner and allows you to space out your code, possibly improving readability.</li>
</ul>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring
A description of your program goes here
"""

class FixedContentNecklace:
    """
    A class that generates combinatorial necklaces with fixed content 
    """
    def __init__(self, number_list):
        """
        Class FixedContentNecklace Init Method

        :param number_list: A list of integers

        """
        # Force negative numbers to zero
        for index, _ in enumerate(number_list):
            if number_list[index] &lt; 0:
                number_list[index] = 0

        self.n_init = number_list
        self.N = sum(number_list)
        self.k = len(number_list)

        self.initialize()

    def initialize(self, method='simple'):
        """
        Determines what method algorithm to use in the generation

        :param method: The name of the method/algorithm to use

        """
        self.occurrence = self.n_init.copy()
        self.word = [0] * self.N

        self.alphabet = [*range(self.k)]
        self.run = [0] * self.N 

        self.first_letter = 0
        self.last_letter = self.k - 1
        self.__set_letter_bounds(method)

        if method != 'simple':
            self.word[1:] = [self.last_letter] * (self.N - 1)

    def __set_letter_bounds(self, method):
        """
        Assign the first letter with nonzero occurrence to word[0], short-circuiting the search to the 
        letter to put there during the algorithm, and finds the last nonzero letter

        :param method: The name of the method/algorithm to use

        """
        found_first_nonzero = False
        for letter in range(self.k):
            if not found_first_nonzero and self.occurrence[letter] &gt; 0:
                found_first_nonzero = True
                self.occurrence[letter] -= 1
                self.word[0] = letter
                self.first_letter = letter
            # remove any letters with zero occurrence from the alphabet so that 
            # we automatically skip them 
            if method != 'simple':
                if self.occurrence[letter] == 0:
                    self.__remove_letter(letter)
        self.last_letter = 0 if not self.alphabet else max(self.alphabet)

    def execute(self, method='simple'):
        """
        Runs the algorithm that's passed to `method`

        :param method: The method/algorithm to execute

        """
        self.initialize(method)
        if method == 'simple':
            yield from self._simple_fixed_content(2, 1)
        elif method == 'fast':
            yield from self._fast_fixed_content(2, 1, 2)

    def _simple_fixed_content(self, t, p):
        """
        The simple algorithm

        :param t: ?
        :param p: ?

        """
        if t &gt; self.N: # if the prenecklace is complete
            if self.N % p == 0: # if the prenecklace word is a necklace
                yield self.word.copy()
        else:
            for letter in range(self.word[t - p - 1], self.k):
                if self.occurrence[letter] &gt; 0:
                    self.word[t - 1] = letter
                    self.occurrence[letter] -= 1
                    if letter == self.word[t - p - 1]:
                        yield from self._simple_fixed_content(t + 1, p)
                    else:
                        yield from self._simple_fixed_content(t + 1, t)
                    self.occurrence[letter] += 1

    def _fast_fixed_content(self, t, p, s):
        """
        The fast algorithm

        :param t: ?
        :param p: ?
        :param s: ?

        """
        # Discard any prenecklace that ends in 0 (except for 0^N)
        # and any prenecklace that ends in (k-1)^n &lt; (k-1)^m that occurs earlier
        if self.occurrence[self.last_letter] == self.N - t + 1:
            if self.occurrence[self.last_letter] == self.run[t - p - 1]:
                if self.N % p == 0:
                    yield self.word.copy()
            elif self.occurrence[self.last_letter] &gt; self.run[t - p - 1]:
                yield self.word.copy()
        # If the only values left to assign are `0`, then it's not a necklace
        elif self.occurrence[self.first_letter] != self.N - t + 1:
            letter = max(self.alphabet) # get largest letter from letter list
            i = len(self.alphabet) - 1 # reset position in letter list
            s_current = s
            while letter &gt;= self.word[t - p - 1]:
                self.run[s - 1] = t - s
                self.word[t - 1] = letter
                self.occurrence[letter] -= 1
                if not self.occurrence[letter]:
                    i_removed = self.__remove_letter(letter)
                if letter != self.last_letter:
                    s_current = t + 1
                if letter == self.word[t - p - 1]:
                    yield from self._fast_fixed_content(t + 1, p, s_current)
                else:
                    yield from self._fast_fixed_content(t + 1, t, s_current)
                if not self.occurrence[letter]:
                    self.__add_letter(i_removed, letter)
                self.occurrence[letter] += 1
                i -= 1
                letter = self.__get_letter(i)
            # reset to initial state
            self.word[t - 1] = self.last_letter

    def __remove_letter(self, letter):
        """
        Removes the passed letter from self.alphabet

        :param letter: The letter to remove from self.alphabet

        """
        index = self.alphabet.index(letter)
        self.alphabet.remove(letter)
        return index

    def __add_letter(self, index, letter):
        """
        Adds the passed letter into self.alphabet at the specified index

        :param index: Index where letter is to be added
        :param letter: Letter to add to self.alphabet

        """
        self.alphabet.insert(index, letter)

    def __get_letter(self, index):
        """
        Gets a letter in self.alphabet at a specified index

        :param index: Index to get the letter

        """
        return -1 if index &lt; 0 else self.alphabet[index]
</code></pre>
    </div>