<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick remarks:</p>

<ul>
<li><p>Give things proper names. "Model.cs" is a bad name for a class, and in your case it is even the name of a namespace. Microsoft has <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines" rel="nofollow noreferrer">Naming Guidelines</a>; please follow them.</p></li>
<li><p>Same for properties, e.g. <code>public int number1</code>: follow Microsoft's <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines" rel="nofollow noreferrer">Naming Guidelines</a>.</p></li>
<li><p>Give things meaningful names. You're not improving your code by obscuring your names of fields, variables etc., e.g. <code>n1</code>, <code>num</code>, <code>num1</code>.</p></li>
<li><p>Why are you doing <code>_number1.ToString()</code>, when <code>_number1</code> is already a <code>string</code>?</p></li>
<li><p>Be consistent in naming: <code>FirstArgument</code> is correctly named, yet <code>secondargument</code> makes two mistakes against the guidelines. And then <code>Addedargument</code> makes one mistake against the guidelines.</p></li>
<li><p>Why are those "arguments" <code>string</code>s and not <code>int</code>s? You check this in their <code>get</code>s yet store them as <code>string</code>s, causing you to again needing to convert them in <code>AddNumbers()</code>.</p></li>
<li><p>Use a Grid or a StackPanel for lay-outs instead of placing items via defined margins.</p></li>
<li><p>Use <code>nameof()</code> instead of a "magic string" in <code>this.OnPropertyChanged("FirstArgument");</code>.</p></li>
<li><p>Don't use a <code>MessageBox</code> in your ViewModel. Look at the approaches discussed in <a href="https://stackoverflow.com/questions/1098023/how-have-you-successfully-implemented-messagebox-show-functionality-in-mvvm">this StackOverflow question</a> for better solutions.</p></li>
<li><p>Avoid clutter in your XAML. It's been a while since I've done such development, but IIRC you don't need to give everything a <code>Name</code>. Communication between Labels and TextBoxes and the VM should be done via Bindings, and thus names are not needed. </p></li>
<li><p>Give your button a proper text. "Button" is stating the obvious and doesn't explain to the user what it does.</p></li>
</ul>

<hr>

<p>To end on a compliment: you're using <code>Binding</code>s and <code>Command</code>s, which is excellent.</p>
    </div>