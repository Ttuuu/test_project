<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bugs</h1>

<p>Unfortunately this doesn't work as expected</p>

<p>Assuming that <code>breakWhen</code> works like <code>break</code> in a regular <code>switch</code>, then I expect this:</p>

<pre><code>    new Switch.Builder&lt;&gt;() //
            .breakWhen(x -&gt; x.equals("A"), x -&gt; System.out.println("Is A")) //
            .breakWhen(x -&gt; x.equals("B"), x -&gt; System.out.println("Is B")) //
            .build().evaluate("B");
</code></pre>

<p>to print <code>"Is B"</code>, but it doesn't print anything.</p>

<p>Also I would expect this:</p>

<pre><code>    new Switch.Builder&lt;&gt;() //
            .when(x -&gt; x.equals("A"), x -&gt; System.out.println("Is A")) //
            .when(x -&gt; x.equals("B"), x -&gt; System.out.println("Is B")) //
            .defaultCase(x -&gt; System.out.println("DEFAULT"))
            .build().evaluate("A");
</code></pre>

<p>to just print <code>"Is A"</code>, but it prints both <code>"Is A"</code> and <code>"DEFAULT"</code>.</p>

<h1>Code style</h1>

<p>I like the code style (of the implementation). It is almost perfect in my opinion, there are only two mostly minor points:</p>

<h2><code>LinkedList</code></h2>

<p>The choice of a <code>LinkedList</code> for the list of <code>cases</code> is a good one, since you are only adding and iterating the list for which <code>LinkedList</code> is optimized. </p>

<p>However you should consider using just the <code>List</code> interface as the variable/field types everywhere else (e.g. use <code>List</code> everywhere you are currently using <code>LinkedList</code>, except for the instantiation <code>new LinkedList&lt;&gt;()</code>).</p>

<p><s>One could even consider using just <code>Iterable</code> for the <code>cases</code> field inside the actual <code>Switch</code> class.</s> (EDIT: I've reconsidered. This isn't a good idea, because <code>Iterable</code> doesn't imply an order, which is important here.)</p>

<h2>Access modifiers</h2>

<p>(This is a topic I just learned about recently, so take this with a grain of salt. I'd be be grateful for some input from others.)</p>

<p>From a Java language point of view using the <code>private</code> access modifier on the fields of the inner classes are correct. However from the JVM view classes can't access private fields fields in their inner classes (and vice versa inner classes can't access private fields of their parents). The Java complier works around this by creating "invisible" accessor methods, which results in slightly larger class files and minute performance differences. This is not really a problem so you can ignore it, but you may consider removing the <code>private</code> access modifier on the fields to make them <em>package-private</em> (or explicit create <em>package-private</em> accessor methods yourself).</p>

<p>If you are using Eclipse you can see warnings about this by setting the settings option </p>

<blockquote>
  <p>Java &gt; Complier &gt; Errors/Warnings &gt; Code style &gt; Access to a non-accessible member of an enclosing type</p>
</blockquote>

<p>to something else than "Ignore". Unfortunately I don't know the settings for any other IDEs or the Java compiler.</p>

<h1>Usability</h1>

<p>Personally I would make the API a bit more concise, possibly sacrificing reuse-ability and extendability (for which I don't really see a practical use case). Also since breaking is the more common use case, I'd make <code>when</code> break and have something like <code>whenContinue</code> for the non breaking case. Maybe something like this:</p>

<pre><code>Switch
  .when(x -&gt; x.equals("A"), x -&gt; System.out.println("Is A")) //
  .when(x -&gt; x.equals("B"), x -&gt; System.out.println("Is B")) //
  .defaultCase(x -&gt; System.out.println("DEFAULT"))
  .evaluate("A");
</code></pre>

<p>I may would even try and move the <code>.evaluate()</code> to the start in order to mirror the <code>switch</code> statement.</p>

<h1>Tests</h1>

<p>The tests are a big problem with this code. For one they didn't catch the bugs. </p>

<p>But more importantly they are also too complex and difficult to read. Try using simpler Predicates, like the examples I use up top to demonstrate the bug.</p>

<p>Also find a way to make them proper tests, that assert the results. Several testing libraries (such as <a href="https://site.mockito.org" rel="nofollow noreferrer">Mockito</a>) allow you to create mock objects on which you can assert that a specific method has been called.</p>

<p>Or just do something like this:</p>

<pre><code>@Test
public void test1() {
    List&lt;String&gt; calls = new LinkedList&lt;&gt;();
    new Switch.Builder&lt;&gt;() //
            .breakWhen(x -&gt; x.equals("A"), x -&gt; calls.add("A")) //
            .breakWhen(x -&gt; x.equals("B"), x -&gt; calls.add("B")) //
            .build().evaluate("B");
    assertEquals(Arrays.asList("B"), calls);
}
</code></pre>
    </div>