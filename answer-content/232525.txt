<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>openConnection()</code> is written to <code>die()</code> internally if there is a connection error, there is no need for you to write:</p>

<pre><code>if ($conn-&gt;connect_error) {
    die("Connection failed: " . $conn-&gt;connect_error);
}
</code></pre>

<p>I do not recommend that you provide the precise mysql error when something goes wrong.  It is better practice to provide a vague explanation to the end user when this occurs.  They don't need the specificity -- just tell them that it wasn't their fault and that you intend to fix it / they should try again later / they should contact you (if you are not actively monitoring the site).</p>

<p>Nor do I recommend that you litter your script with <code>die()</code> calls.  They will break an otherwise valid markup.  (<code>die()</code> will prevent the closing tags from being printed at the bottom of your document.)</p></li>
<li><p><code>\w</code> = <code>[A-Za-z0-9_]</code> for this reason you can simplify your code as:</p>

<pre><code>function isValidUsername($data) {
    return preg_match('/^\w+$/', $data);
}
</code></pre>

<p>and </p>

<pre><code>function isValidPassword($data) {
    return preg_match('/^[\w!@$#%]+$/', $data);
}
</code></pre>

<p>However, I must urge you not to limit the valid characters in a password entry -- this is simply bad practice because it will lighten the workload for someone who endeavors to brute force attack your login system.  You should only be checking that it has length, and if you want to indicate password strength, implement some rules about expected characters and minimum password length.</p></li>
<li><p>Throw <code>escapeSymbols()</code> away entirely.  You should not be escaping or adjusting a user's password -- ever.  If they typed it, it should be saved verbatim.</p></li>
<li><p>Never store unencrypted passwords into your database.  The guidance you require on this topic is far to vast to write into a single post here.  Encryption is a subject that professionals specialize in, so the volume of understanding is yours to decide.  At the very least, please <em>start but don't finish</em> reading here: <a href="https://stackoverflow.com/q/401656/2943403">Secure hash and salt for PHP passwords</a></p></li>
<li><p>Prepared statements are a must for helping to keep your site secure and stable.  Please <em>start but don't finish</em> reading here: <a href="https://stackoverflow.com/q/1290975/2943403">How to create a secure mysql prepared statement in php?</a></p></li>
<li><p>In alignment with the previous item, you must not trust user input to be safe to inject into your content either.  You should implement a sanitizing layer before allowing any of their data to make it to your display.  Please <em>start but don't finish</em> reading here: <a href="https://stackoverflow.com/q/129677/2943403">How can I sanitize user input with PHP?</a></p></li>
<li><p>Unless your main form script is being called by a function, I don't understand why you have <code>return</code> written -- there will be no place to return to, just remove them</p></li>
<li><p>Do not mix object-oriented with procedural mysqli syntax.  Pick one and stick with it.  I recommend OO because it is more succinct.  You start with <code>$conn-&gt;connect_error</code> which is OO, so just use the same syntax onward. (in case you don't follow my meaning, <code>mysqli_query()</code> is procedural syntax <code>$conn-&gt;query()</code> is OO; but again, look into prepared statements.)</p></li>
<li><p>Don't bother with closing your database connection.  PHP will do it for you when your script completes.</p></li>
<li><p>Try to structure your battery of conditions into a considerate condition block with "failed" outcomes written first, then the successful outcome last while avoiding any <code>exit()</code>/<code>die()</code> calls to interrupt the flow -- if this is a consistent design throughout your project, your project will be easier to read and maintain.  </p></li>
</ul>
    </div>