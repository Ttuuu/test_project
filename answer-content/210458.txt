<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>3<sup>rd</sup> Party Libraries</h1>
<p>I have a hard time with most OpenGL tutorials, and this one is no different. They often have a bunch of non-OpenGL code that mysteriously handles things without explaining how under the guise of "keeping things simple and cross platform." In my opinion it does more harm than good. In particular, the use of support libraries like GLEW, GLFW, GLU, GLUT, etc. leaves beginners confused about which parts are OpenGL and which parts are not. It ends up impairing their use of the tools and it hides very important details like OpenGL contexts. A better tutorial would simply supply code for creating a context on each platform that the tutorial supports. It's more work to write and to make clean and understandable to someone new to OpenGL, but it would be worth it in my opinion.</p>
<p>In fact, looking through the code, is GLEW even used? It's initialized, and <code>glewExperimental</code> is set to true, but I don't see any other calls to it. Does it affect GLFW code? If so, that's pretty confusing to a learner. In fact, having the GLEW and GLFW code intermixed, it's really hard to tell which is which at a glance.</p>
<h1>Error Handling</h1>
<p>You have some reasonably good error handling for reading in the shaders. You handle a bunch of errors around file handling, allocating memory for shaders and logs, etc. Then you completely ignore every possible OpenGL error in your program. There should be some calls to <code>glGetError()</code> somewhere in the code to help the reader understand that things can go wrong with OpenGL.</p>
<p>Also message about Intel GPUs not supporting OpenGL 3.3 is out-of-date. It can be removed. It's also probably not the only reason that not having a window can happen, so it's just confusing to a user that doesn't have an Intel GPU.</p>
<h1>Order of Operations</h1>
<p>Because OpenGL is a big state machine, it often doesn't matter what order you perform actions in, so long as they are all performed before the next draw call. But for a tutorial, it can be useful to have things grouped together when they affect state that's related. For that reason, I'd put the calls that generate and bind the vertex array near the calls that generate, bind, and fill the vertex buffers. They're all related to getting the geometry up to the GPU, so it would be nice to have them together.</p>
<p>Also, you don't need to re-bind the vertex buffer in the loop in <code>main()</code> as it's already current. Binding things has a performance impact and is very confusing to new learners of OpenGL in my experience. It's one of those things that leads to a lot of superstition when learning OpenGL. ("Last time I had this problem it was because something wasn't bound properly. I'll just bind everything again and hope that fixes it!")</p>
<h1>Use Functions</h1>
<p>The <code>main()</code> function has way too much going on. I'd break out setting up the window and context into its own function. I'd probably break out setting up all the buffers, too. And then I'd make the main loop its own function as well. This will help someone new to the library understand which bits of code are related to which parts of the functionality of the tutorial. (And that can be a good things with OpenGL which is quite opaque!)</p>
    </div>