<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code readability and style -</h1>

<hr>

<p>I believe that good code should have good style and should be more readable and concise.</p>

<hr>

<p>According to <a href="https://www.python.org/dev/peps/pep-0008/#names-to-avoid" rel="nofollow noreferrer">PEP 8</a> -</p>

<blockquote>
  <p><em>Never use the characters <code>l</code> (lowercase letter el), <code>O</code> (uppercase
  letter oh), or <code>I</code> (uppercase letter eye) as single character variable
  names.</em></p>
  
  <p><em>In some fonts, these characters are indistinguishable from the
  numerals one and zero. When tempted to use <code>l</code>, use <code>L</code> instead.</em></p>
</blockquote>

<hr>

<p>I ran a <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> checker over your code, and here are the results -</p>

<blockquote>
  <p><a href="https://i.stack.imgur.com/c3vSo.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/c3vSo.png" alt="enter image description here"></a></p>
</blockquote>

<p>This means that your code uses inconsistent whitespaces. Therefore, your code (in terms of readability and style) could be improved like this (along with other recommendations) -</p>

<pre><code>def prime_sum(n):
    my_list = [0 for i in range(n+1)]

    my_list[0] = 1
    my_list[1] = 1

    for i in range(2, int(n**0.5) + 1):
        if my_list[i] == 0:
            for j in range(i*i, n+1, i):
                    my_list[j] = 1
    s = 0
    for i in range(n):
        if my_list[i] == 0:
            s += i
    print(s)

if __name__ == '__main__':
    prime_sum(2000000)
</code></pre>

<hr>

<p>Also, good use of the <a href="https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/" rel="nofollow noreferrer"><code>if __name__ == __'main__':</code></a> guard. Most people don't even attempt to use it.</p>

<hr>

<h1>Improvements to your code -</h1>

<p>Python provides a set type which is quite efficient at performing both of those operations (although it does chew up a bit more RAM than a simple list). Gladly, it's easy to modify your code to use a set instead of a list. Computation with sets is much faster because of the hash tables (<a href="https://stackoverflow.com/questions/8929284/what-makes-sets-faster-than-lists-in-python">What makes sets faster than lists in python?</a>).</p>

<p>Also, we don't need to keep a running total of the sum of the primes. It's better to do that at the end using Python's built-in <code>sum()</code> function, which operates at C speed, so it's much faster than doing the additions one by one at Python speed.</p>

<p>So your code would then look like this -</p>

<pre><code>def eratosthenes(n):
    # Declare a set - an unordered collection of unique elements
    multiples = set()
    for i in range(2, n+1):
        if i not in multiples:
           yield i
           multiples.update(range(i*i, n+1, i))

if __name__ == '__main__':
    # Now sum it up
    prime_sum = sum(eratosthenes(2000000))
    print(prime_sum)
</code></pre>

<p>which uses less space too.</p>

<p>If you're wondering what yield is...</p>

<blockquote>
  <p><em>The <code>yield</code> statement suspends function’s execution and sends a value
  back to the caller, but retains enough state to enable function to resume
  where it is left off. When resumed, the function continues execution
  immediately after the last yield run. This allows its code to produce
  a series of values over time, rather them computing them at once and
  sending them back like a list.</em></p>
</blockquote>

<p><sup><sup>Source - <a href="https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/" rel="nofollow noreferrer">https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/</a></sup></sup></p>

<p>And if you are wondering what <code>.update()</code> is...</p>

<blockquote>
  <p><em>The <code>update()</code> adds elements from a set (passed as an argument) to the
  set (calling the <code>update()</code> method).</em></p>
  
  <p><em>The syntax of <code>update()</code> is -</em></p>

<pre><code>A.update(B)
</code></pre>
</blockquote>

<p><sup><sup>Source - <a href="https://www.geeksforgeeks.org/python-set-update/" rel="nofollow noreferrer">https://www.geeksforgeeks.org/python-set-update/</a></sup></sup></p>

<hr>

<p>Now let's time your code -</p>

<pre><code># %timeit prime_sum(2000000)
&gt;&gt;&gt; 648 ms ± 19.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>

<p>which does look pretty slow.</p>

<hr>

<p>With the improved code, the time to execute greatly decreases -</p>

<pre><code># %timeit eratosthenes(2000000)
&gt;&gt;&gt; 264 ns ± 2.73 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>

<hr>

<pre class="lang-none prettyprint-override"><code>Key: ms - milliseconds
     ns - nanoseconds
</code></pre>

<hr>

<p>Hope this helps!</p>
    </div>