<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing you need to do is you need to know and understand two things. They are related but different.</p>

<ul>
<li>You want to know how your file is structured for reading in its contents.</li>
<li>You want to know how your data structure(s) (classes, structs, variables in a namespace, etc.) are designed.</li>
</ul>

<p>Knowing these two things will help you in parsing any kind of file either it be in text or binary format.</p>

<p>In your case you had explicitly stated:</p>

<blockquote>
  <p>Multi-Line text reader</p>
</blockquote>

<p>As the name of your question suggests.</p>

<hr>

<p>What you want to do next is just as user: <a href="https://codereview.stackexchange.com/users/160161/wooooooooosh">wooooooooosh</a> had stated. You want to remove all the <code>C</code> library functions from your code and use the C++ libraries instead.</p>

<p>When you write your code, you want to keep the file handling <code>opening, reading contents to some buffer and closing</code> separate from any parsing and or data manipulation. All you want your file handler to do is to extract and read the data. </p>

<p>Now there are several ways to write a function that will open a file if it exists and to read its contents and by two types (text &amp; binary) but we will only focus on text here.</p>

<blockquote>
  <ul>
  <li>You can read a single character from the file.</li>
  <li>You can read a single string up to the first white space you encounter.</li>
  <li>You can read a single line.</li>
  <li>You can do all of the above until no more can be read in.</li>
  <li>You can read all of the contents in one go into a large single buffer; depending on the size of the file.</li>
  </ul>
</blockquote>

<hr>

<p>In your specific case, you stated a multi line text file so we will use that as a demonstration.</p>

<blockquote>
  <ul>
  <li>First you want to create a structure that will hold many lines from the file. We can do this with:</li>
  </ul>
</blockquote>

<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;

std::vector&lt;std::string&gt; linesFromFile;
</code></pre>

<blockquote>
  <ul>
  <li>Next we need a file name; this is simple enough:</li>
  </ul>
</blockquote>

<pre><code>#include &lt;string&gt;

// If you know the name of the file and it is hard coded in the application:
// then it is best to make this `std::string` `const` as it can not be modified.
const std::string filename( "somefile.txt" );
</code></pre>

<blockquote>
  <ul>
  <li>Or we can ask the user for a file name:</li>
  </ul>
</blockquote>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;

int main() {
    std::cout &lt;&lt; "Enter the file's name for reading\n";

    // In this case the user will enter the filename so we don't want it `const`.
    std::string filename;
    std::cin &gt;&gt; filename;  // Now you have to be careful with cin and getline and mixing the two;  
                           // I will not go into the details here but a google search would do the job for you.
    return 0;
}
</code></pre>

<hr>

<p>However, none of this will work without a filestream object. There are 3 main types:</p>

<blockquote>
  <ul>
  <li><code>std::fstream</code> - basic filestream can be read from and or written to based on the flags set when opening</li>
  <li><code>std::ifstream</code> - a type of filestream specifically for reading contents in</li>
  <li><code>std::ofstream</code> - a type of filestream specifically for writing contents to</li>
  </ul>
</blockquote>

<hr>

<p>In your case you have two options to read your file:</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;string&gt;

int main() {
    std::string filename( "somefile.txt" );
    std::fstream file( filename, std::ios::in ); // This will try to open file;

    // Or:

    std::fstream file2;

    file2.open( filename, std::ios::in ); 

    return 0;
}
</code></pre>

<p>The flag option tells <code>fstream</code> that we want to read contents from the file as <code>fstream</code> is a two way stream operation on files.</p>

<p>If you do not want to write to the file as it will be read only then you can do the following:</p>

<pre><code>#include &lt;string&gt;
#include &lt;ifstream&gt; // &lt;fstream&gt; should work here too

int main() {
    std::string filename( "somefile.txt" );

    std::ifstream inFile( filename ); // this will try to open the file if it exists.

    // or
    std::ifstream inFile2;

    inFile2( filename );

    return 0;
}
</code></pre>

<hr>

<p>Now that we have a file handle, a filename, and a container to hold our contents we can put them together. Instead I'll create a class to handle our data. Then write a function to open the file and save the contents to...</p>

<pre><code>#include &lt;exception&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

class FileData {
private:
    std::vector&lt;std::string&gt; fileContents_;
    std::size_t linesInFile_ { 0 };
public:
    FileData() = default; // empty base constructor
    explicit FileData( std::vector&lt;std::string&gt;&amp; contents ) : linesInFile( contents.size() ) {}

    void addData( std::vector&lt;std::string&gt;&amp; contents ) {
        fileContents = contents;
        linesInFile_ = contents.size();
    }

    std::vector&lt;std::string&gt;&amp; getFileContents() { return fileContents_; }
    std::size_t numberOfLinesInFile() const { return linesInFile_; }
};

void getAllLinesFromFile(const char* filename, std::vector&lt;std::string&gt;&amp; output) {
    std::ifstream file(filename);
    if (!file) {
        std::stringstream stream;
        stream &lt;&lt; "failed to open file " &lt;&lt; filename &lt;&lt; '\n';
        throw std::runtime_error(stream.str());
    }

    std::string line;
    while (std::getline(file, line)) {
        if (line.size() &gt; 0)
            output.push_back(line);
    }
    file.close();
}

int main() {
    // my function allows you to do this a couple of ways:
    std::vector&lt;std:string&gt; fileContentsA, fileContentsB;
    // Just by passing the name directly in as a const string literal.
    getAllLinesFromFile( "somefile.txt", fileConentsA );

    // Or by
    std::string filename( "somefile2.txt" );
    getAllLinesFromFile( filename.c_str(), fileContentsB ); 

    return 0;
}
</code></pre>

<p>The above will give us our vector of strings that we need; however we have to parse that for our data structure, but since our data structure's constructor and or add function matches directly as the pattern of the file contents all we need to do is constructor our class object and in this case there is no need to parse the file.</p>

<p>Now if you were reading individual words from a single line of text where specific words had specific meanings and other characters were values, then you would have to write a parser function to break the strings down into individual tokens. However, here is not the case it is a simple read and pass to object operation.</p>

<pre><code>int main() {
    // my function allows you to do this a couple of ways:
    std::vector&lt;std:string&gt; fileContents

    std::string filename( "somefile.txt" );
    getAllLinesFromFile( filename.c_str(), fileContents );

    FileData myData( fileContents );  

    // Or

    FileData myData2;
    myData2.addData( fileContents );

    return 0; 
}
</code></pre>

<p>Here I have a default empty constructor that will later on require the use of the addData function, but I also have a constructor that will take the data directly. This will give the user flexibility when using the class. If you already have the data ready by the time you are creating the class object you can use the constructor and pass the data in. In some cases you may not be ready for the data, but you have to have the object first to be populated later.</p>

<hr>

<p>One thing to take note of is that my file reading function is throwing and error message so in our main function we need to wrap it into a try catch block. The entire app would look something like this:</p>

<pre><code>#include &lt;exception&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

class FileData {
private:
    std::vector&lt;std::string&gt; fileContents_;
    std::size_t linesInFile_ { 0 };
public:
    FileData() = default; // empty base constructor
    explicit FileData( std::vector&lt;std::string&gt;&amp; contents ) : linesInFile( contents.size() ) {}

    void addData( std::vector&lt;std::string&gt;&amp; contents ) {
        fileContents = contents;
        linesInFile_ = contents.size();
    }

    std::vector&lt;std::string&gt;&amp; getFileContents() { return fileContents_; }
    std::size_t numberOfLinesInFile() const { return linesInFile_; }
};

void getAllLinesFromFile(const char* filename, std::vector&lt;std::string&gt;&amp; output) {
    std::ifstream file(filename);
    if (!file) {
        std::stringstream stream;
        stream &lt;&lt; "failed to open file " &lt;&lt; filename &lt;&lt; '\n';
        throw std::runtime_error(stream.str());
    }

    std::string line;
    while (std::getline(file, line)) {
        if (line.size() &gt; 0)
            output.push_back(line);
    }
    file.close();
}

int main() {
    try {

        std::vector&lt;std:string&gt; fileContents;
        getAllLinesFromFile( "somefile.txt", fileConents );
        FileData myFileData( fileContents );

    } catch( std::exception&amp; e ) {
        std::cout &lt;&lt; "Exception Thrown: " &lt;&lt; e.what() &lt;&lt; std::endl;
        return EXIT_FAILURE;
    }   
    return EXIT_SUCCESS;
}
</code></pre>

<p>The above works as intended yet there still may be room for improvement, and with C++20 around the corner; there will be many nice new features to learn; especially with the new filesystem.</p>

<hr>

<p><em>-Edit-</em> A user had left a comment stating that unfortunately that this is not a multi line reader. Yes this will not read multiple lines at a time, but it will read a single line of text and store it into a string and for each line of text those strings will be stored into a vector. This was a demonstration only to show the OP how to transition code from C to C++. They can take what I have given them and try to apply their own algorithm to fit their needs.</p>
    </div>