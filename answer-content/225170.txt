<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rather than using a hashmap to lookup the books, we can use a match block. (This is assuming that your books are known at compile time.) Also, we can return an <code>Option&lt;&amp;'static str&gt;</code>. The option lets the caller of the function decide what to do on failure, and a <code>&amp;'static str</code> is the type of a string literal.</p>

<pre><code>fn get_file(book: &amp;str) -&gt; Option&lt;&amp;'static str&gt; {
    match book {
        "Genesis" =&gt; Some("mhc1.txt"),
        "First Samuel" =&gt; Some("mhc2.txt"),
        "Song of Solmon" =&gt; Some("mhc3.txt"),
        "Acts of the Apostles" =&gt; Some("mhc6.txt"),
        "First Corinthians" =&gt; Some("mhc6.txt"),
        "Galatians" =&gt; Some("mhc6.txt"),
        _ =&gt; None,
    }
}
</code></pre>

<p>Based on your response, I'll suggest having the first command line argument be the entire book name. I'd write <code>main</code> something like this. We can use slice patterns to check for the right number of arguments and bind them to variables at the same time. Then, we can try to find the file or print an error message otherwise. If the number of arguments was wrong, we also print an error showing the correct usage of the program.</p>

<pre><code>fn main() {
    let args: Vec&lt;String&gt; = std::env::args().collect();

    if let [_, book, reference] = args.as_slice() {
        if let Some(file) = get_file(book) {
            println!("{}, {}, {}", book, reference, file);
        } else {
            eprintln!("Could not find book!");
        }
    } else {
        eprintln!("Usage: {} &lt;BOOK&gt; &lt;REFERENCE&gt;", args[0]);
    }
}
</code></pre>
    </div>