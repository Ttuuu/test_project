<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP 8</h1>

<p>PEP 8 recommends that constants be written as <a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="noreferrer">"all capital letters with underscores separating words."</a>. So something like:</p>

<pre><code>yellow = (255, 255, 0)
</code></pre>

<p>Should be:</p>

<pre><code>YELLOW = (255, 255, 0)
</code></pre>

<p>or possibly an <code>enum</code> (more on this later)</p>

<h1>Inconsistent quotations</h1>

<p>Usually a project will stick with either <code>""</code> or <code>''</code> unless you have particular reason not to.<sup>1</sup> But for instance:</p>

<pre><code>pygame.display.set_caption("Snake")
font = pygame.font.SysFont('Times New Roman', 20)
text_colour = pygame.Color('White')
</code></pre>

<p>violates the uniformity unnecessarily.</p>

<h1>Enums</h1>

<p>To quote the docs on <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer"><code>enum</code></a>:</p>

<blockquote>
  <p>An enumeration is a set of symbolic names (members) bound to unique, constant values. Within an enumeration, the members can be compared by identity, and the enumeration itself can be iterated over.</p>
</blockquote>

<p>So for instance:</p>

<pre><code>left = "LEFT"
right = "RIGHT"
up = "UP"
down = "DOWN"
</code></pre>

<p>becomes: </p>

<pre><code>from enum import Enum
class Direction(Enum):
    LEFT = "LEFT"
    RIGHT = "RIGHT"
    DOWN = "DOWN"
    UP = "UP"
</code></pre>

<p><a href="https://stackoverflow.com/a/22594360/667648">See here</a> for more reasons why you should port your stringy code to enums. In addition, there are probably some integer arithmetic tricks you <em>could</em> use to eliminate a lot of the <code>if</code>-<code>elif</code>-<code>else</code> chains. (You will need to do some further refactoring to get this to run without error.)</p>

<h1>Unnecessary Comments</h1>

<p>Consider:</p>

<pre><code># initialize food and snake
food = Food(blue)
snake = Snake(green)

# initialize loop logic
running = True
is_over = False

# initialize score
score = 0

# game loop
while running:
</code></pre>

<p>I, personally, would omit all the comments. I could see where a case can be made the game loop comments in the case that someone is trying to understand the code without knowledge of game loops, but I would argue the concept of a game loop is so ubiquitous that those comments get in the way. </p>

<p>If you had to write comments I would instead write:</p>

<pre><code># Initialize entities/data for new game
food = Food(blue)
snake = Snake(green)
score = 0

# Init/start game loop
running = True
is_over = False
while running:
    ...
</code></pre>

<p>Even then, I'm not quite satisfied with it, but the moral it to not <a href="https://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/" rel="noreferrer">add redundant comments</a>. However, there may be some debate on this.</p>

<p>The best example is probably:</p>

<pre><code>    # move snake
    snake.move()
</code></pre>

<p>Really think about what this comment contributes.</p>

<h1>Unnecessary assignments</h1>

<p>I'm not sure why you wrote:</p>

<pre><code>    # check for collision with wall:
    collision_with_wall = wall_collision(snake)
    if collision_with_wall:
        is_over = True
</code></pre>

<p>When:</p>

<pre><code>    if wall_collision(snake):
        is_over = True
</code></pre>

<p>suffices.</p>

<h1>Add a <code>main</code> function</h1>

<p>You should consider adding <a href="https://stackoverflow.com/a/20158605/667648">a <code>main</code> function to your project.</a> This is usually done through the introduction of:</p>

<pre><code>if __name__ == "__main__":
    game()
</code></pre>

<p>This allows for me to <code>import</code> your project and not have it automatically execute the game function at the bottom. Increasing re-usability.</p>

<p><sup>1 For instance, It may be the project defaults to <code>""</code>, but you need to print out <code>" Hi "</code> with the quotes, so <code>print('" Hi "')</code> may be chosen.</sup></p>
    </div>