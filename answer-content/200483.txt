<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a couple of minor technical issues:</p>

<ul>
<li><p>The <code>content</code> variable is unnecessary, because you can simply return <code>html_page.read()</code> directly. (And you could as well return <code>urlopen(req, timeout=10).read()</code> directly...) When the max attempts are reached, you could <code>return ""</code> instead of relying on that <code>content</code> was initialized to <code>""</code>. And how about returning <code>None</code>? Then you could simply omit the <code>return</code> statement to the same effect.</p></li>
<li><p>In the exception handling, there are multiple <code>if</code> statements with conditions that are mutually exclusive, only one can match at a time. In such situation you should chain them together with <code>elif</code>.</p></li>
<li><p>Instead of doing a single <code>except</code> statement with multiple error types and then using conditionals to identify the correct one, it would be better to use multiple <code>except</code> statements each with a single error type.</p></li>
<li><p>You could iterate using <code>range</code> for slightly more compact code.</p></li>
</ul>

<p>Like this:</p>

<pre><code>def get_html_content(url, max_attempt = 3):
    req = Request(url, headers={'User-Agent': 'Mozilla/5.0'})

    for attempt in range(max_attempt):
        try:
            return urlopen(req, timeout=10).read()
        except HTTPError as e:
            print("The server couldn\'t fulfill the request....attempt {}/{}".format(attempt + 1, max_attempt))
            print('Error code: ', e.code)
        except URLError as e:
            print("We failed to reach a server....attempt {}/{}".format(attempt + 1, max_attempt))
            print('Reason: ', e.reason)
        except timeout as e:
            print('timeout...attempt {}/{}'.format(attempt + 1, max_attempt))
</code></pre>
    </div>