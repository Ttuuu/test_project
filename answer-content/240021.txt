<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, I think it's worth thinking carefully about whether C++ is the best tool for this task.  It certainly can be done, but you may find better documentation/more support for COM/interop from C# or VBA.  Particularly for such a simple task.</p>

<hr>

<pre><code>HRESULT hr = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);
</code></pre>

<p>You need to check the result of <code>CoInitializeEx</code> and every other API call you make.  Think of each API call as a polite request.  Windows may (and frequently does) decline requests.  In your program, these errors will be really hard to diagnose because you will simply not see your desired result.  A better idea is to use a function/macro to check the result is correct.  In this case, it should look something like:</p>

<pre><code>assert(S_OK == CoInitializeEx(NULL, COINIT_APARTMENTTHREADED));
</code></pre>

<p>You may want to get fancier with the macro.  This way you will know where (and where not) to spend time debugging.</p>

<hr>

<p>Quoting <a href="https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-coinitializeex" rel="nofollow noreferrer">MSDN</a>:</p>

<blockquote>
  <p>To close the COM library gracefully on a thread, each successful call to CoInitialize or CoInitializeEx, including any call that returns S_FALSE, must be balanced by a corresponding call to CoUninitialize.</p>
</blockquote>

<p>You forgot to call <code>CoUninitialize</code>.  Your program (well, actually your thread) is supposed to tell Windows when it will start using COM and when it is done.</p>

<p>This is a great place to use RAII:</p>

<pre><code>struct COMThread {
    COMThread() {
        assert(S_OK == CoInitializeEx(NULL, COINIT_APARTMENTTHREADED));
    }

    ~ COMThread() {
        CoUninitialize(); // returns void, no need to check return value
    }
};
</code></pre>

<p>In general you should read MSDN for every function you call and probably write a few comments summarizing your findings (and maybe even a URL... sometimes the docs are hard to re-find IMO).</p>

<hr>

<pre><code>vTemplate.bstrVal = SysAllocString(L"")
</code></pre>

<p>Did you forget to deallocate this BSTR?  This could be another RAII wrapper.</p>

<hr>

<pre><code>VARIANT vTemplate;
VariantInit(&amp;vTemplate);
vTemplate.vt = VT_BSTR;
</code></pre>

<p>Once again, there is a <code>free</code> function <a href="https://docs.microsoft.com/en-us/windows/win32/api/oleauto/nf-oleauto-variantclear" rel="nofollow noreferrer"><code>VariantClear</code></a> which could be RAII.  A wrapper around variant is not a bad idea -- most of your code creates/clears variants.</p>

<hr>

<p>I could not find docs for the specific Word functions you are calling, but I suspect there is a way to achieve this without using so many variants (based on some experience using other parts of the COM API).  I know this is not as helpful as it could be.</p>

<hr>

<p>Despite a few things to clean up, I think you're off to a good start.  You have the general procedure down which is the most important thing.</p>
    </div>