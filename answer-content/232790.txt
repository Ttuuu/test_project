<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>for i in range(2, LIMIT):
    if x[i]:
        primes.append(i)
        length += 1

        for j in range(i * i, LIMIT + 1, i):
            x[j] = 0
</code></pre>
</blockquote>

<p>This is inconsistent: either <code>i</code> should range up to <code>LIMIT</code> inclusive, or there's no need for <code>j</code> to range up to <code>LIMIT</code> inclusive.</p>

<p>Also, updating <code>length</code> in the loop is overkill. <code>len(primes)</code> outside the loop works just as well and doesn't distract.</p>

<p>There are more advanced ways of doing the sieve with range updates, but that's already covered in dozens if not thousands of answers on this site, so I'll leave it as an exercise to search for one of them.</p>

<hr>

<blockquote>
<pre><code>s = 0
prev = -1
cnt = -1
</code></pre>
</blockquote>

<p>It's not immediately clear what any of those variable names mean.</p>

<blockquote>
<pre><code>        if x[s] and cnt &lt; j - i + 1:
            cnt = j - i + 1
            prev = s
</code></pre>
</blockquote>

<p>This could be done more elegantly by folding <code>cnt</code> and <code>prev</code> into a tuple:</p>

<pre><code>width_sum = (-1, -1)

...
    if x[s]:
        width_sum = max(width_sum, (j - i + 1, s))
</code></pre>

<hr>

<p>You want the longest, so the fastest approach will usually be to search in decreasing order of length. To keep the bookkeeping simple it may be worth aggregating partial sums:</p>

<pre><code>primes = []
accum = [0]

for i in range(2, LIMIT):
    if x[i]:
        primes.append(i)
        accum.append(accum[-1] + i)

        for j in range(i * i, LIMIT + 1, i):
            x[j] = 0

primes = set(primes)
for width in range(len(primes), 0, -1):
    for off in range(width, len(accum)):
        partial_sum = accum[off] - accum[off - width]
        if partial_sum &gt; LIMIT:
            break
        if partial_sum in primes:
            print(partial_sum)
            exit(0)
</code></pre>
    </div>