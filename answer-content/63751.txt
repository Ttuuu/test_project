<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally speaking, the code looks good. It seems to be clean and to achieve what it is meant to achieve. Since your Makefile was given, as well as the compiler, I will review your code in function of what is legal with the <code>-std=gnu89</code> compiler option, which means POSIX C89 + parts of C99 + some other compiler extensions. <a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html" rel="nofollow noreferrer">Here</a> is a list of the allowed extensions.</p>

<ul>
<li><p>First of all, your header guard names (<code>_COMMON_H_</code>, <code>_OUTPUT_H_</code>) start with an underscore followed by a capital letter, and is therefore a name <a href="https://stackoverflow.com/a/228797/1364752">reserved to the implementation</a> (compiler + standard library). The simpler fix is to remove the leading underscore: <code>COMMON_H_</code>, <code>INPUT_H_</code>.</p></li>
<li><p>You use <a href="http://en.cppreference.com/w/c/io/perror" rel="nofollow noreferrer"><code>perror</code></a> to display an error message when some computation fails. Do you want to keep it as is, or do you also want to make you program abort on errors? Currently, I don't think that resuming the execution after an error will lead to expected behaviour. While it is not <em>that</em> important if closing a resource fails, there ought to be some problems if opening one fails.</p></li>
<li><p><code>complex_dist</code> is a bad name since it actually returns the square of the distance. You should change it to <code>complex_square_dist</code> or something equivalent. Note that the "distance" of a complex number is its absolute value that can be computed with <code>cabs</code>. Since you only need the square distance, I would simply rename your function.</p></li>
<li><p><code>if (first_call == true)</code> is not the best way to check for a boolean value. You should write <code>if (first_call)</code> instead.</p></li>
<li><p>If there is no other possible outcome, returning <code>EXIT_SUCCESS</code> is useless, you could simply <code>return 0</code> instead. Generally speaking, it is good to return <code>EXIT_SUCCESS</code> when you know that your program can also return error codes. Removing it may serve as kind of documentation to say "this program never returns error codes".</p></li>
<li><p>You are retrieving information from <code>argv</code> without checking first if they exist. You should use conditions such as <code>if (argc &lt; 2) printf("you did something wring");</code> to tell when the command line is not long enough and how it should be to work correctly.</p></li>
</ul>
    </div>