<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Information hiding</h3>

<p>If <code>ProcessNode</code> is only used by <code>LRUCache</code>,
then it's an implementation detail that's best hidden from other classes.
Instead of a local class, it would be better as a <code>private static</code> inner class.</p>

<h3>Encapsulation and separation of concerns</h3>

<p><code>LRUCache</code> does multiple things:</p>

<ul>
<li>Enforce a maximum number of key value pairs</li>
<li>Linked list operations</li>
</ul>

<p>The linked list operations could be delegated to a dedicated class with <code>remove(ListNode)</code>, <code>removeFirst(ListNode)</code>, <code>add(ListNode)</code> methods.</p>

<p>With this reorganization, the implementation of <code>LRUCache</code>'s main methods can focus on enforcing the bound on the number of entries, and be overall more clear and easier to understand, without having to follow through multiple methods the state changes of nodes, the map, and the size:</p>

<pre><code>  public int get(int key) {
    ListNode node = nodeMap.get(key);

    if (node == null) {
      return -1;
    }

    list.remove(node);
    list.add(node);

    return node.getValue();
  }

  public void put(int key, int value) {
    ListNode newNode = new ListNode(key, value);
    list.add(newNode);

    ListNode oldNode = nodeMap.put(key, newNode);

    if (oldNode != null) {
      list.remove(oldNode);
    } else if (nodeMap.size() &gt; capacity) {
      ListNode eldest = list.removeFirst();
      nodeMap.remove(eldest.getKey());
    }
  }
</code></pre>

<h3>Naming</h3>

<p><code>ProcessNode</code> is just a node in a linked list.
I find name "Process" a bit confusing.
I recommend renaming to <code>ListNode</code>.</p>

<h3>Minor technical improvements</h3>

<p>There's no need to manage <code>size</code> manually, the map of nodes already has that information.</p>

<p>Some values are only assigned once, so they can be <code>final</code>,
such as <code>capacity</code>, <code>key</code>, <code>value</code>.</p>

<p>The getters and setters are overkill for the node class without plans of future extensions. Especially when moved inside an inner <code>LinkedList</code> class. There's no real need here for such verbose boilerplate code.</p>
    </div>