<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is clean. My major concern with how it looks is that your naming doesn't follow PEP8. <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">Names should be snake_case, not camelCase.</a> So <code>isEmpty</code> should be <code>is_empty</code>.</p>

<p>With how it works, I'd work on giving it consistent behavior with other collections.</p>

<p>Right now, you have a <code>sizeStack</code> method for returning the size. This should really be <a href="https://docs.python.org/3/reference/datamodel.html#object.__len__" rel="nofollow noreferrer"><code>__len__</code></a> instead:</p>

<pre><code>def __len__(self):
    return len(self.stack)
</code></pre>

<p>Why? Because now you can do this:</p>

<pre><code>stack = Stack()
stack.push(1)
stack.push(2)
stack.push(3)
print(len(stack))  # Prints 3
</code></pre>

<p>You can now check the length using <code>len</code> like you can with <code>list</code> and other built-ins. <code>__len__</code> and other methods that start and end with two underscores are ""magic""; they have special meanings behind the scenes. Here for example, <code>len</code> just delegates to a classes's <code>__len__</code> method. I'd recommend looking over that page I linked to.</p>

<p><code>isEmptys</code> could also be made a little more idiomatic by making use of the fact that empty lists are falsey:</p>

<pre><code>def is_empty(self):
    return not self.stack
</code></pre>

<p>The major advantage here is nearly all collections are falsey when empty. With how you have it now, if you change what underlying structure your class uses, you'll need to remember to update the <code>is_empty</code> method, or <code>self.stack == []</code> will always fail.</p>

<p>And instead of having an <code>is_empty</code> method, it's more idiomatic to just have a <code>__bool__</code> method so your stack can be treated as a boolean value. See <a href="https://codereview.stackexchange.com/a/232563/46840">this</a> answer to see how that can be done. </p>

<hr>

<p>And <code>list</code> actually already has a <code>pop</code> method that does what you want. Your <code>pop</code> can just be:</p>

<pre><code>def pop(self):
    return self.stack.pop()
</code></pre>
    </div>