<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The substitution in the final <code>exec</code> line can be simplified.  Instead of making a pipeline with <code>echo</code>, we can provide input to <code>dc</code> as a command argument:</p>

<pre><code>        exec sleep $(dc -e "$end $now -p")
</code></pre>

<hr>

<p>I always recommend setting <code>-e</code> and <code>-u</code> options for shell scripts.  So add at the beginning:</p>

<pre><code>set -eu
</code></pre>

<p>This is particularly important, to ensure that we fail neatly when the argument is not understood by <code>date</code>.</p>

<p>I think I missed this because I thought that these were Bashisms, but they are actually <a href="http://pubs.opengroup.org/onlinepubs/007904975/utilities/set.html" rel="nofollow noreferrer">specified in POSIX</a>.</p>

<hr>

<p>Consider adding a <code>--verbose</code> option to print the sleep duration (in seconds) and target time - this could be valuable with some of the relative times supported by <code>date</code>.  The argument parsing and checking would need to be reworked, as the simple <code>$# = 1</code> check would no longer be adequate.</p>

<p>Also, accept <code>-h</code> as a synonym for <code>--help</code>.</p>

<hr>

<h1>Improved code</h1>

<p>Applying these suggestions and those from the other answer, I have:</p>

<pre><code>#!/bin/sh

# Assumes GNU date and GNU sleep

set -eu

die() {
    echo "$@" &gt;&amp;2
    exit 1
}

usage() {
    cat &lt;&lt;EOF
Usage:  $0 [-v|--verbose] TIME
or  $0 --version

Sleep until the specified time.

    TIME can be any date/time as accepted by date(1).

Examples:
    $0 3:14
    $0 'next Tuesday'
EOF
}

verbose=false

while [ "${1+y}" ]
do
    case "$1" in
        --version)
            echo "sleep_until version 1.1"
            exit 0
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -v|--verbose)
            verbose=true
            shift
            ;;
        -*)
            die "Unrecognised option: $1"
            ;;
        *)
            test \! "${2+y}" || die "Extra arguments after time"
            end=$(date -d "$1" +%s.%N)
            now=$(date +%s.%N)
            duration=$(dc -e "$end $now -p")
            case "$duration" in
                -*) die "$1 is in the past!";;
            esac
            if $verbose
            then
                printf 'Sleeping for %g seconds until ' $duration
                date -d "$1"
            fi
            exec sleep $duration
            ;;
    esac
done

# If we reach here, we didn't get any non-option argument
die "No time specified"
</code></pre>
    </div>