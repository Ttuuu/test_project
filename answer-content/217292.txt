<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Create lookup table</h3>
<p>I ran your program on a buffer filled with random bytes and I found that most of the time was being spent doing the <code>pow()</code> operations.  You can speed this part up by creating a lookup table, like this:</p>
<pre><code>float powTable[256];

// Call this from main() 
static void computeTable(void)
{
    int i;
    for (i = 0; i &lt; 256; i++) 
        powTable[i] = pow(i/255.0, 2.2);
}   

static void imgCompute()
{
       // ...

       //gamma correction
       R = powTable[p[0]];
       G = powTable[p[1]];
       B = powTable[p[2]];

       // ...
}
</code></pre>
<p>Adding this one lookup table cut the time of the function by 50%.</p>
<h3>Inverse gamma correction</h3>
<p>I tried to do the same thing with the second set of <code>pow()</code> calls.  However, that part was a bit tricky since instead of starting with an <code>int</code> in the range <code>0..255</code> and converting to a <code>float</code> in the range <code>0..1</code>, you are starting with a <code>float</code> and converting to an <code>int</code> (i.e. the reverse function).</p>
<p>I actually implemented something that I thought would work (it was a lookup table that rounded the input float to the nearest 0.0001 and had 10000 entries).  However, when I ran the program I discovered that a lot of the <code>float</code> values were either <code>&lt; 0.0</code>, <code>&gt; 1.0</code>, or even <code>Nan</code>.  I traced that <code>Nan</code> back to these lines:</p>
<pre><code>        X = (0.412453 * R) + (0.357580 * G) + (0.180423 * B);
        Y = (0.212671 * R) + (0.715160 * G) + (0.072169 * B);
        Z = (0.019334 * R) + (0.119193 * G) + (0.950227 * B);

        x = X/(X+Y+Z);
        y = Y/(X+Y+Z);
        z = Z/(X+Y+Z);
</code></pre>
<p>Here, if <code>R = G = B = 0</code>, then <code>X = Y = Z = 0</code>.  Then when you divide by <code>(X+Y+Z)</code>, you get a division by zero.  I'm not sure if that is a problem or not.  Also, I'm not sure if the negative or greater than 1 values are problematic because when you apply the inverse gamma correction, you will get a pixel value outside the range <code>0..255</code>.  In any case, I decided to clamp the input values to the range <code>0..1</code> before doing the lookup.  With the 2nd lookup table, it shaved another 50% of the time off.  So with both lookup tables in place, the final program was about 4x faster than the original.</p>
<h3>No need for intermediate buffer</h3>
<p>There is no need for the <code>image2</code> intermediate buffer.  If you combine your two processing loops, you will only ever need a 5 floating point intermediate buffer instead of allocating and filling a <code>1600 x 1000 x 5 x 4 = 32 MB</code> buffer.  Having such a big intermediate buffer could cause your program to run slower because it could cause your cpu cache to fill up.  In my testing, it didn't make any difference in speed, but I would still recommend getting rid of that buffer and combining the two loops.</p>
    </div>