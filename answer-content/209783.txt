<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Avoid flag variables if you don't need them</h3>

<p>The <code>hasOrder</code> flag variable is unnecessary.
When you set this variable to <code>false</code>,
you could <code>return false</code> instead.
If the end of the loop is reached, you can <code>return true</code>.</p>

<h3>Avoid unnecessary special handling</h3>

<p>The special treatment for the case <code>list.size() &lt; 2</code> is unnecessary.
The rest of the implementation handles that case naturally.</p>

<h3>Don't repeat yourself</h3>

<p>The computation logic of the left and right child indexes is duplicated twice.
You could eliminate that by changing the loop to <code>while (true)</code>, and making this computation the first step of the loop instead of last:</p>

<pre><code>while (true) {
  int leftChild = 2 * parent + 1;
  int rightChild = 2 * parent + 2;

  if (leftChild &gt;= list.size()) {
    break;
  }

  // ...
</code></pre>

<h3>Test using a unit test framework</h3>

<p>Testing by printing stuff is not very useful.
You have to read the output to verify it's correct,
which takes mental effort, and error-prone.
It's better to use a proper unit testing framework,
where test cases will give you simple yes-no answers per test case;
no need to re-interpret passing results.</p>

<h3>Test all corner cases</h3>

<p>Only one case is "tested".
You need more tests to verify that <code>hasHeapOrder</code> correctly returns <code>true</code> or <code>false</code> depending on the input.
I suppose you have an implementation of <code>Heap</code> such that <code>heap.copy()</code> returns a correctly heap-ordered list, and so <code>hasHeapOrder</code> returns <code>true</code>.
At the minimum,
you should verify that <code>hasHeapOrder</code> returns <code>false</code> for lists like 4, 1, 2 and 4, 5, 2.</p>
    </div>