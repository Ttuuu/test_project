<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a number of improvements you can make.</p>

<p>Reassigning global variables so that a particular function can proceed to use them (<code>spriteSet</code>, <code>tileSet</code>, <code>tilemapList</code>) is pretty strange. It would make a lot more sense if these were only passed as arguments to the functions that need them instead. In fact, since the <code>tileSet</code> isn't being used anywhere except inside <code>loadResources</code>, that can be made completely local:</p>

<pre><code>const { spriteSet, tilemapList } = loadResources();
tilemap.setPosition(0, 0);
tilemap.create(tilemapList);

sprites.createSprites(spriteSet);
</code></pre>

<p>Always declare variables <a href="https://softwareengineering.stackexchange.com/questions/278652/how-much-should-i-be-using-let-vs-const-in-es6">with <code>const</code> when possible</a> - you don't intend to reassign the <code>sprites</code> or the <code>tilemap</code> object, right? There are a few variables like this - consider using a linter to prompt you to fix these sorts of potential mistakes automatically.</p>

<p>The <code>tilemapList</code> definition is repetitive and difficult to read:</p>

<pre><code>const tilemapList = [tileSet[2], tileSet[1] , tileSet[1] , tileSet[0] ,tileSet[2], tileSet[1] , tileSet[1] , tileSet[0] ,tileSet[2], tileSet[1] , tileSet[1] , tileSet[0] ,tileSet[2], tileSet[1] , tileSet[1] , tileSet[0] ,tileSet[2], tileSet[1] , tileSet[1] , tileSet[0] ,tileSet[2], tileSet[1] , tileSet[1] , tileSet[0] ,tileSet[2], tileSet[1]
</code></pre>

<p>Consider defining the layout with a single string instead, where each cell (numeric, indicating the index of the tile in the <code>tileSet</code>) is separated by a space (or few) or newlines, which gets parsed into the array above afterwards - this way, it'll be far more readable and less prone to copy/paste bugs or the like:</p>

<pre><code>const tiles = `
2 1 1 0 2 1 1 0 2 1 1 0 2 1 1 0 2 1 1 0
2 2 2 0 0 0 2 2 2 0 0 0 2 2 2 0 0 0 1 1
`
.trim()
.split(/\s+/)
.map(index =&gt; tileSet[index]);
</code></pre>

<p>Numeric-indexed IDs are never a good idea - IDs are for elements that are <em>absolutely unique</em> in a document, and they create global variables, unfortunately. If you want a way to select the <code>n</code>th sprite in the tilemap, just select the <code>n</code>th child of the tilemap:</p>

<pre><code>tilemap.children[i]
</code></pre>

<p>You might put the children into an array, and have the array in a closure or on an instance so it's easily accessible by all methods. (See snippet below for an example)</p>

<p>Having <code>sprites</code> for the main sprite maker object isn't as precise as it could be. I'd expect a variable named <code>sprites</code> to be an array-like collection of <code>sprite</code> objects. Maybe call the main sprite maker <code>SpritesMaker</code> instead? You can also use a class instead of an IIFE in order to have the children as a property of the instance, as mentioned above.</p>

<p>You frequently select elements over and over again:</p>

<pre><code>spritesList.forEach(x =&gt; {
  // do stuff
  document.getElementById("window").appendChild(sprite);
</code></pre>

<p>Consider selecting the element <em>once</em> instead, rather than having to go through the DOM to find the element again each time:</p>

<pre><code>const win = document.getElementById("window");
spritesList.forEach(x =&gt; {
  // do stuff
  win.appendChild(sprite);
</code></pre>

<p>You have a lot of places where the above pattern can make the code a lot cleaner - instead of repeating <code>document.getElementById(x)</code> multiple times, do <code>const someElement = document.getElementById(x)</code> and then repeat <code>someElement</code> instead. Nearly all of the functions in both the big <code>sprites</code> object and the <code>tilemap</code> object can be significantly improved with this technique.</p>

<p>But <code>window</code> is a <em>very</em> weird ID - it's very easily confused with <code>window</code>, the global object. Consider using something else, like <code>main</code>. You might even avoid IDs altogether, since every element with an ID creates an additional global variable of that name, which can occasionally result in confusing weird bugs.</p>

<p>You have</p>

<pre><code>spritesList.forEach(x =&gt; {
</code></pre>

<p><code>x</code> isn't very descriptive at all. Best to call a variable what it represents, maybe <code>srcStr</code>.</p>

<p>Since you're appending each sprite to the <code>.main</code>, you may avoid having to set a class name on each sprite element by using the <code>.main &gt; img</code> in your CSS instead.</p>

<p>You have</p>

<pre><code>if (dX === true &amp;&amp; dY === true){
    style.transform = "scale(1)";
} else if (dX === true &amp;&amp; dY === false){
</code></pre>

<p>You may use simple truthy/falsey tests instead if you wish:</p>

<pre><code>if (dX &amp;&amp; dY){
    style.transform = "scale(1)";
}
else if (dX &amp;&amp; !dY){
    style.transform = "scale(1, -1)";
}
</code></pre>

<p>Rather than frequently checking and reassigning with</p>

<pre><code>let pair = {};

if (transform === "scale(1)"){
    pair = {x: 1, y: 1};
}
else if (transform === "scale(-1)"){
    pair = {x: -1, y: -1};
}
// etc
return pair;
</code></pre>

<p>You might consider just returning the object instead:</p>

<pre><code>if (transform === "scale(1)"){
    return {x: 1, y: 1};
}
else if (transform === "scale(-1)"){
    return {x: -1, y: -1};
}
</code></pre>

<p>If you <em>do</em> want to keep using the IIFE, note that you may use shorthand properties in ES2015, and you're using ES2015 syntax already. The below:</p>

<pre><code>return{
    setPosition: setPosition,
    getPosition: getPosition,
    getOrientation: getOrientation,
    // ...
</code></pre>

<p>simplifies to</p>

<pre><code>return {
    setPosition,
    getPosition,
    getOrientation,
    // ...
</code></pre>

<p>All together:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';

const TILEMAPSIZE = 160; // Total number of tiles displayed. Must be a multiple of TILECOLUMNS.
const TILECOLUMNS = 16; // Number of columns

class SpritesMaker {
    constructor(spritesList) {
        const main = document.querySelector('.main');
        this.sprites = spritesList.map(srcStr =&gt; {
            const sprite = document.createElement('img');
            sprite.src = srcStr;
            main.appendChild(sprite);
            return sprite;
        });
    }

    show(index) {
        this.sprites[index].style.visibility = 'visible';
    }

    hide(index) {
        this.sprites[index].style.visibility = 'hidden';
    }

    reflectY(index) {
        const { style } = this.sprites[index];
        const transform = style.transform;
        if (transform === "scale(-1, 1)"){ 
            style.transform = "scale(1)";
        }
        else if (transform === "scale(1, -1)"){
            style.transform = "scale(-1)";
        }
        else if (transform === "scale(-1)"){
            style.transform = "scale(1, -1)";
        }
        else {
            style.transform = "scale(-1, 1)";
        }
    }

    reflectY(index) {
        const { style } = this.sprites[index];
        const transform = style.transform;
        if (transform === "scale(-1, 1)"){
            style.transform = "scale(-1)";
        }
        else if (transform === "scale(1, -1)"){
            style.transform = "scale(1)";
        }
        else if (transform === "scale(-1)"){
            style.transform = "scale(-1, 1)";
        }
        else {
            style.transform = "scale(1, -1)";
        }
    }

    reflect(index, dX, dY) {
        const { style } = this.sprites[index];
        if (dX &amp;&amp; dY){
            style.transform = "scale(1)";
        }
        else if (dX &amp;&amp; !dY){
            style.transform = "scale(1, -1)";
        }
        else if (!dX &amp;&amp; dY){
            style.transform = "scale(-1, 1)";
        }
        else if (!dX &amp;&amp; !dY){
            style.transform = "scale(-1)";
        }
    }

    translate(index, dX, dY) {
        const { style } = this.sprites[index];
        const posLeft = Number(style.left.slice(0, -2)) + dX;
        const posTop = Number(style.top.slice(0, -2)) + dY;
        style.left = posLeft + "px";
        style.top = posTop + "px";
    }

    setPosition(index, dX, dY) {
        const { style } = this.sprites[index];
        style.left = dX +"px";
        style.top = dY + "px";
    }

    getPosition(spriteIndex) {
        const { style } = this.sprites[index];
        return {
            x: Number(style.left.slice(0, -2)),
            y: Number(style.top.slice(0, -2))
        };
    }

    getOrientation(index) {
        const { transform } = this.sprites[index].transform;
        if (transform === "scale(1)"){
            return {x: 1, y: 1};
        }
        else if (transform === "scale(-1)"){
            return {x: -1, y: -1};
        }
        else if (transform === "scale(1, -1)"){
            return {x: 1, y: -1};
        }
        else if (transform === "scale(-1, 1)"){
            return {x: -1, y: 1};
        }
        else {
            return {x: 0, y: 0};
        }
    }
}

class TileMap {
    constructor(tilemapList){
        this.viewport = document.querySelector('.viewport');
        this.tilemapDiv = document.querySelector('.tilemap');
        // set the number of columns
        let value = "";
        for (let i = 0; i &lt; TILECOLUMNS; ++i){
            value += "auto ";
        }
        this.tilemapDiv.style.gridTemplateColumns = value;
        
        // create the tile map
        this.tiles = [];
        for (let i = 0; i &lt; TILEMAPSIZE; ++i){
            this.tiles.push(this.tilemapDiv.appendChild(document.createElement('div')));
        };            
        
        // insert images
        tilemapList.forEach((src, i) =&gt; {
            const img = document.createElement('img');
            img.src = src;
            this.tiles[i].appendChild(img);
        })
    }

    show() {
        this.tilemapDiv.style.visibility = "visible";
    }

    hide() {
        this.tilemapDiv.style.visibility = "hidden";
    }

    translate(dX, dY) {
        const { style } = this.viewport;
        const posLeft = Number(style.left.slice(0, -2)) + dX;
        const posTop = Number(style.top.slice(0, -2)) + dY;
        style.left = posLeft + "px";
        style.top = posTop + "px";
    }

    setPosition(dX, dY) {
        const { style } = this.viewport;
        style.top = dY + "px";
        style.left = dX + "px";
    }

    getPosition() {
        const { left, top } = this.viewport.style;
        return {
            x: style.left.slice(0, -2),
            y: style.top.slice(0, -2)
        };
    }
}

const { spriteSet, tilemapList } = loadResources();
const tileMap = new TileMap(tilemapList);
tileMap.setPosition(0, 0);

const fernsTulipsSprites = new SpritesMaker(spriteSet);
fernsTulipsSprites.setPosition(0, 235, 240);
fernsTulipsSprites.show(0); 

function loadResources(){
    const img1 = 'https://georgec0stanza.github.io/2DgraphicsEngine/images/ferns.jpg';
    const img2 = 'https://georgec0stanza.github.io/2DgraphicsEngine/images/tulips.jpg';
    const img3 = 'https://georgec0stanza.github.io/2DgraphicsEngine/images/water.jpg';

    const sprite0 = 'https://georgec0stanza.github.io/2DgraphicsEngine/images/daffodil.jpg';    
    const sprite1 = 'https://georgec0stanza.github.io/2DgraphicsEngine/images/eagle.jpg';    

    const spriteSet = [sprite0, sprite1];
    const tileSet = [img1, img2, img3];
    const tilemapList = `
    2 1 1 0 2 1 1 0 2 1 1 0 2 1 1 0 
    2 1 1 0 2 1 1 0 2 1 1 0 2 1 1 0 
    2 1 1 0 2 1 1 0 2 1 1 0 2 1 1 0 
    2 1 1 0 0 2 2 1 1 0 2 1 1 0 2 1 
    1 0 2 1 1 0 2 1 1 0 2 1 1 0 2 1 
    1 0 2 1 1 0 2 1 1 0 2 1 1 0 2 1 
    1 0 2 1 1 0 2 1 1 0 2 2 1 1 0 2 
    1 1 0 2 1 1 0 2 1 1 0 2 1 1 0 2 
    1 1 0 2 1 1 0 2 1 1 0 2 1 1 0 2 
    1 1 0 2 1 1 0 2 1 1 0 2 1 1 0 2
    `
      .trim()
      .split(/\s+/)
      .map(index =&gt; tileSet[index]);
    return { spriteSet, tilemapList };
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>:root {
  --TILESIZE: 50px;
  /* Size of tiles */
  --SPRITESIZE: 50px;
  /* Size of sprites */
  --WINDOWIDTH: 650px;
  --WINDOWHEIGHT: 500px;
  --WINDOWBACKGROUND: white;
}

body {
  background-color: black;
}

img {
  display: block;
}

.window {
  overflow: hidden;
  margin: 0 auto;
  position: relative;
  width: var(--WINDOWIDTH);
  height: var(--WINDOWHEIGHT);
  background: var(--WINDOWBACKGROUND);
}

.viewport {
  position: absolute;
}

.tilemap {
  display: grid;
  z-index: -1;
}

.tilemap &gt; div {
  text-align: center;
}

.tilemap &gt; div &gt; img {
  height: var(--TILESIZE);
  width: var(--TILESIZE);
}

.main &gt; img {
  position: absolute;
  height: var(--SPRITESIZE);
  width: var(--SPRITESIZE);
  z-index: 1;
  transform: scale(1);
  visibility: hidden;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="main"&gt;
  &lt;div class="viewport"&gt;
    &lt;div class="tilemap"&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>