<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could replace your <code>get_str_from_file</code> function with the standard <a href="https://doc.rust-lang.org/std/fs/fn.read_to_string.html" rel="nofollow noreferrer"><code>read_to_string</code></a> function:</p>
<p>For instance like so:</p>
<pre><code>use std::fs;

if fs::read_to_string(STATUS).unwrap().trim() == CHARGING_STR) {
    return; //return should be equivalent to std::process::exit(0)
}
</code></pre>
<p>This is your implementation:</p>
<pre><code>fn get_str_from_file(file_path: &amp;str) -&gt; String {
    let mut file = File::open(file_path)
        .expect("file not found");
    let mut ret = String::new();
    file.read_to_string(&amp;mut ret)
        .expect("failed to read file");

    ret
}
</code></pre>
<p>This is the implementation of <a href="https://doc.rust-lang.org/src/std/fs.rs.html#307-312" rel="nofollow noreferrer">std::fs::read_to_string</a></p>
<pre><code>pub fn read_to_string&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;String&gt; {
    let mut file = File::open(path)?;
    let mut string = String::with_capacity(initial_buffer_size(&amp;file));
    file.read_to_string(&amp;mut string)?;
    Ok(string)
}
</code></pre>
<p>Almost identical, except the std lib version is more generic and leaves error handling to the caller. It also uses more efficient memory allocation.</p>
<h3>New Type Idiom</h3>
<p>The following is not necessarily better, but it is certainly a valid alternative approach.
Instead of relying on using an <code>f32</code> you could use a wrapper struct around it:</p>
<pre><code>#[derive(Debug, Default, Clone, Copy, PartialEq, PartialOrd)] //not necessary but nice to have
struct ChargeLevel(f32);
</code></pre>
<p>This is called <a href="https://doc.rust-lang.org/rust-by-example/generics/new_types.html" rel="nofollow noreferrer">New Type Idiom</a>. You could further go ahead and put most of the logic surrounding the charge level into special functions in the <code>ChargeLevel</code>'s <code>impl</code> block. Some suggestions:</p>
<pre><code>impl ChargeLevel {
    const WARNING_LEVEL: f32 = 15.0;
    const CRITICAL_LEVEL: f32 = 5.0;

    fn new(now: f32, full: f32) -&gt; Self {
        ChargeLevel((now / full) * 100.0)
    }

    fn is_warning(&amp;self) -&gt; bool {
        self.0 &lt; Self::WARNING_LEVEL
    }

    fn is_critical(&amp;self) -&gt; bool {
        self.0 &lt; Self::CRITICAL_LEVEL
    }
}
</code></pre>
<p>You could also combine this struct with the external library stuff:</p>
<pre><code>impl From&lt;ChargeLevel&gt; for NotificationUrgency {
    fn from(level: ChargeLevel) -&gt; Self {
        if level.is_critical() {
            NotificationUrgency::Critical
        } else {
            NotificationUrgency::Normal
        }
    }
}
</code></pre>
<p>This would allow you to replace</p>
<pre><code>if charge_level &lt; CHARGE_WARN {
    Notification::new()
        .summary("Battery level low!")
        .body(&amp;format!("Battery level: {0:.1$}%", charge_level, 2))
        .icon("dialog-information")
        .urgency(
            if charge_level &lt; CHARGE_CRIT { 
                NotificationUrgency::Critical
            } else { 
                NotificationUrgency::Normal
            }
        )
        .timeout(NOTIFICATION_TIMEOUT)
        .show().unwrap();
}
</code></pre>
<p>with</p>
<pre><code>if charge_level.is_warning() {
    Notification::new()
        .summary("Battery level low!")
        .body(&amp;format!("Battery level: {0:.1$}%", charge_level.0, 2))
        .icon("dialog-information")
        .urgency(NotificationUrgency::from(charge_level))
        .timeout(NOTIFICATION_TIMEOUT)
        .show()
        .unwrap();
}
</code></pre>
<p>A little much for such a small application perhaps, but might give you an example how to write nice abstractions in Rust that don't cost any runtime overhead.</p>
<p>Implementing <code>std::fmt::Display</code> would also make sense for the string formatting, but you get the point.</p>
    </div>