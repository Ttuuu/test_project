<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll just add to what VisualMelon already has pointed out:</p>

<p>1)</p>

<p><code>Stack&lt;T&gt;</code> is build for the reverse method:</p>

<pre><code>public static IEnumerable&lt;T&gt; Reverse&lt;T&gt;(IEnumerable&lt;T&gt; source)
{
  return new Stack&lt;T&gt;(source);
}
</code></pre>

<p>or if you want a more LINQ-like lazyness you can do it this way:</p>

<pre><code>public static IEnumerable&lt;T&gt; Reverse&lt;T&gt;(IEnumerable&lt;T&gt; source)
{
  Stack&lt;T&gt; rev = new Stack&lt;T&gt;(source);

  while (rev.Count &gt; 0)
  {
    yield return rev.Pop();
  }
} 
</code></pre>

<hr>

<p>2)</p>

<p><code>Max&lt;T&gt;</code> and <code>Min&lt;T&gt;</code> can be implemented in a general manner like this (<code>Max</code> as example):</p>

<pre><code>public static T Max&lt;T&gt;(IEnumerable&lt;T&gt; source, IComparer&lt;T&gt; comparer)
{
  if (comparer == null)
    throw new ArgumentNullException(nameof(comparer));

  return Max(source, comparer.Compare);
}

public static T Max&lt;T&gt;(IEnumerable&lt;T&gt; source, Compare&lt;T&gt; comparer)
{
  if (source == null)
    throw new ArgumentNullException(nameof(source));
  if (comparer == null)
    throw new ArgumentNullException(nameof(comparer));

  using (IEnumerator&lt;T&gt; enumerator = source.GetEnumerator())
  {
    if (enumerator.MoveNext())
    {
      T max = enumerator.Current;

      while (enumerator.MoveNext())
      {
        T current = enumerator.Current;
        if (comparer(max, current) &lt; 0)
        {
          max = current;
        }
      }

      return max;
    }
  }

  throw new ArgumentException("The source vector has no entries", nameof(source));
}
</code></pre>

<p>Where <code>Compare&lt;T&gt;</code> is a delegate on the form:</p>

<pre><code>public delegate int Compare&lt;T&gt;(T x, T y);
</code></pre>

<hr>

<p>3)</p>

<p>I don't like that <code>OrderBy(...)</code> returns a different kind of type than the input. It should be an <code>IEnumerable&lt;T&gt;</code>. </p>

<p>Beside that, the normal LINQ-implementation puts the <code>null</code>-values at the start in the ascending ordered result.</p>

<p>With a special implementation of <code>IComparer&lt;..&gt;</code> you can take full advantage of <code>List&lt;T&gt;.Sort()</code> if you implement <code>private IEnumerable&lt;&gt; OrderBy(...)</code> like this:</p>

<pre><code>class OrderByComparer&lt;T, TKey&gt; : IComparer&lt;T&gt;
{
  Func&lt;T, TKey&gt; _keySelector;
  IComparer&lt;TKey&gt; _keyComparer;

  public OrderByComparer(Func&lt;T, TKey&gt; keySelector, IComparer&lt;TKey&gt; keyComparer)
  {
    _keySelector = keySelector;
    _keyComparer = keyComparer;
  }

  public int Compare(T x, T y)
  {
    return _keyComparer.Compare(_keySelector(x), _keySelector(y));
  }
}

private static IEnumerable&lt;T&gt; OrderBy&lt;T, TKey&gt;(IEnumerable&lt;T&gt; source, Func&lt;T, TKey&gt; keySelector, IComparer&lt;TKey&gt; comparer, bool descending)
{
  if (source == default(IEnumerable&lt;T&gt;))
    throw new ArgumentNullException(nameof(source));
  if (keySelector == default(Func&lt;T, TKey&gt;))
    throw new InvalidOperationException(nameof(keySelector));
  if (comparer == null)
    throw new InvalidOperationException(nameof(comparer));

  OrderByComparer&lt;T, TKey&gt; keyComparer = new OrderByComparer&lt;T, TKey&gt;(keySelector, comparer);
  List&lt;T&gt; data = new List&lt;T&gt;(source);
  data.Sort(keyComparer);


  foreach (T item in data)
  {
    yield return item;
  }
}
</code></pre>

<p>With a vector of 1 million <code>int</code>s it's about twice a fast as the original.</p>
    </div>