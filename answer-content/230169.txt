<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We (and it sounds like you as well) do not have enough information to answer this question. But some good news first: I cannot see any region where your method is obviously wasting time (like searching with <code>in</code> for some item in a growing list).</p>

<p>Before you concern yourself more with this, consider that even if the variance is large, your maximum time is less than a tenth of a second, for two instruments. In other words, you could be monitoring more than 1500 instruments before you get close to a maximum processing time on the order of your frequency (one minute). So ask yourself if you are performing needless premature optimization. Will this code run with <span class="math-container">\$\mathcal{O}(1000)\$</span> instruments, for longer than two days? If not, you can stop right here. If yes, or as an academic exercise, continue on.</p>

<hr>

<p>As far as I can see, the runtime of this code will be largely determined by two factors:</p>

<ol>
<li><p>How long <code>self.ws.get_ticks()</code> takes. Does this method connect to the internet to get it's data? Then the variance might actually be the variance in establishing the connection and getting the data. This could be influenced by your internet connection, but also the current load on the server you are trying to connect to. In this case there is nothing you can do.</p></li>
<li><p>How many elements are returned. The actual function getting the data might take longer for more elements, but also the processing would, since you iterate over all elements of the list.</p></li>
</ol>

<p>The only way to know is to gather more data. Individually time the call to <code>self.ws.get_ticks()</code>, collect the <code>len(all_ticks)</code> and plot everything in a time-ordered way. Maybe this will help you to discover something interesting.</p>

<p>Here are some possibilities of what you could discover:</p>

<ul>
<li>The server where you get the information also has some updating frequency, so only every five minutes will there be data for you.</li>
<li>They have a rate limit, which makes all requests in-between fail (which is faster than transmitting a bunch of data).</li>
<li>The call actually returns <em>all</em> data every time, and you just <code>break</code> when you have reached the point of the last minute. In this case each successive call is more expensive, so of course this increases the standard deviation. Try to find a way to pass the start date to the call.</li>
</ul>

<hr>

<p>And here is a small class that can help you keep track of different timers I just came up with:</p>

<pre><code>from time import perf_counter
from statistics import mean, median, stdev
from collections import defaultdict

class Timer:
    durations = defaultdict(list)

    def __init__(self, name=""):
        self.name = name

    def __enter__(self):
        self.start = perf_counter()

    def __exit__(self, *args):
        Timer.durations[self.name].append(perf_counter() - self.start)

    @staticmethod
    def calc_stats(x):
        return {"mean": mean(x),
                "std": stdev(x),
                "median": median(x),
                "min": min(x),
                "max": max(x)}

    @staticmethod
    def stats():
        return {name: Timer.calc_stats(x) for name, x in Timer.durations.items()}
</code></pre>

<p>With some example usage:</p>

<pre><code>from time import sleep
import pandas as pd
import matplotlib.pyplot as plt

from timer import Timer

for n in range(10):
    with Timer("a"):
        sleep(0.5)
    with Timer("b"):
        sleep(0.1 * n)

print(pd.DataFrame(Timer.stats()))
#                a         b
# mean    0.500559  0.450504
# std     0.000021  0.303079
# median  0.500552  0.450502
# min     0.500534  0.000006
# max     0.500602  0.901003

plt.plot(Timer.durations["a"], label="a")
plt.plot(Timer.durations["b"], label="b")
plt.legend()
plt.xlabel("Iteration")
plt.ylabel("Time [s]")
plt.show()
</code></pre>

<h2><a href="https://i.stack.imgur.com/h0JBu.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/h0JBu.png" alt="enter image description here"></a></h2>

<p>Some other comments:</p>

<ul>
<li>Instead of <code>self.bars = {i: [] for i in self.symbols}</code> you can use <code>self.bars = defaultdict(list)</code>, like I did in the <code>Timer</code> class.</li>
<li>Try to avoid single letter variables. They are OK in a few cases, but <code>i</code> (and <code>n</code>) are usually reserved for integers. Use <code>x</code>, or maybe even better, <code>tick</code>.</li>
<li>Don't directly compare <code>type</code>, use <code>isinstance(datetime.datetime, s)</code> instead. This also allows subclasses.</li>
<li>Don't lie in your docstring. You say "Return a 1-min OHLCV dict, given a list of the previous minutes tick data.", but almost <strong>none</strong> of this is true. The method does not return anything and it also does not take any parameters as input!</li>
<li>If you know the exception to expect, catch only that. At least you don't have a bare <code>except</code>, but <code>except KeyError</code> and maybe some specific error from the parser would be better. This way you don't miss an unexpected error. You should also ask yourself what your code does if an error occurs. I think it will just use the previous iterations <code>ts</code>, which would duplicate data. Just hope that you never have a problem in the first timestamp!</li>
</ul>
    </div>