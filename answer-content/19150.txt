<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Design</h3>

<p>The design is not very Emacs-like. In particular:</p>

<ol>
<li><p>The command operates on the entire buffer contents. This means that if you want to line up some columns in a region (without affecting the rest of the buffer), you can't use your command. (At least not without copying the region to a new buffer, running the command, and then copying the result back again.)</p>

<p>It would be better if the function operated on the contents of the current region: then it would be much more flexible.</p></li>
<li><p>Your command doesn't respect the current <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html" rel="nofollow noreferrer">narrowing</a> of the buffer. If you look at the docstring for <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Deletion.html" rel="nofollow noreferrer"><code>erase-buffer</code></a>, it says:</p>

<blockquote>
  <p>Any narrowing restriction in effect (see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html" rel="nofollow noreferrer"><code>narrow-to-region</code></a>) is removed,
  so the buffer is truly empty after this.</p>
</blockquote>

<p>This would come as an unpleasant surprise to a user who had a narrowing in effect. It would be better to operate only on the narrowed part of the buffer, by calling</p>

<pre><code>(delete-region (point-min) (point-max))
</code></pre>

<p>instead of <code>(erase-buffer)</code>. (But in fact there are better ways to do it, which I'll describe below.)</p></li>
<li><p>Your command doesn't preserve the position of point. After running the command, point is always at the end of the buffer. It's always worth preserving the position of point (if appropriate) because that makes a function's behaviour predictable, and more useful in Lisp code and in macros.</p></li>
</ol>

<h3>2. Implementation</h3>

<ol>
<li><p>The command reads the entire buffer contents into strings, processes the strings in various ways, and then writes them back to the buffer.</p>

<p>If you've recently come to Emacs Lisp from another language, then you're probably thinking that a buffer is a bit like a file, and so the right way to process it is to read the file contents into memory as string, process the contents, and then write it out.</p>

<p>I can't stress enough that <em>you won't get the full benefits of Emacs if you persist with this approach</em>! A buffer in Emacs is not like a file. It's a highly flexible string-like data structure that supports a much wider set of operations than a string. So you should organize your code to operate directly on the buffer contents, using the same (or similar) functions that you would use as an interactive user.</p></li>
<li><p>There are some useful functions in the Emacs toolbox that you could use to simplify your code. If you look at the revised code you'll see that I made use of <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Skipping-Characters.html" rel="nofollow noreferrer"><code>skip-chars-forward</code></a>, the (poorly named) <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dLevel-Deletion.html" rel="nofollow noreferrer"><code>just-one-space</code></a>, and <code>(cl-loop ... maximize ...)</code> to do maximization without constructing an intermediate list in memory.</p></li>
</ol>

<h3>3. Minor points</h3>

<ol>
<li><p>The name <code>align-config-file</code> seems wrong: it's not limited to configuration files, and it doesn't operate on a file (it operates on buffer contents). I think a better name would be something like <code>align-two-columns</code>.</p></li>
<li><p>The docstring says "in a pretty manner" which seems rather vague. What does it actually do?</p></li>
<li><p>The command ensures that there are at least two spaces between the columns. The number 2 seems rather arbitrary: why not make it an argument to the command, so that the user can supply it as a prefix argument?</p></li>
</ol>

<h3>4. Revised code</h3>

<p>(Ask if you can't figure out how this works.)</p>

<pre class="lang-lisp prettyprint-override"><code>(require 'cl-macs) ; for the "cl-loop" facility

(defun align-two-columns (begin end spaces)
  "Align two columns between BEGIN and END, ensuring that the
second column is vertically aligned, and there are SPACES spaces
between the columns."
  (interactive "r\np")
  (save-excursion
    (save-restriction
      (narrow-to-region begin end)
      (goto-char (point-min))
      ;; Determine the width of the first column.
      (let ((width (cl-loop while (not (eobp))
                            maximize (skip-chars-forward "^ \t\n")
                            do (forward-line 1))))
        ;; Back to the top and adjust the spaces.
        (goto-char (point-min))
        (while (not (eobp))
          (let ((col (skip-chars-forward "^ \t\n")))
            (unless (eolp)
              (just-one-space (+ spaces (- width col)))))
          (forward-line 1))))))
</code></pre>
    </div>