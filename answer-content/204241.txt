<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are a creating an instance of the <code>Divisibility</code> class, and never storing any data inside it.  This makes one question why you are even using a class at all; you could instead just use functions <code>divisible_by_2(...)</code> and so on.</p>

<p>Still, there are times when a class can have methods associated with it that use no internal data.  These methods are referred to as "static" methods.  You would decorate the method with <code>@staticmethod</code> and remove the <code>self</code> parameter.  Eg)</p>

<p>(With tests and return statements simplified, as pointed out by @Ludisposed.)</p>

<pre><code>class Divisibility:
    """..."""

    # Divisibe by 2 if last digit is divisible by 2
    @staticmethod
    def divisible_by_2(number):
        return (abs(number) % 10) % 2 == 0
</code></pre>

<p>You actually are using the <code>self</code> parameter in the <code>divisible_by_6</code> method, but only to refer to other static methods of this class.  There is something between regular methods and static methods, called "class methods", which instead of receiving the object they are operating on as the first parameter, they receive the class they are operating on as the first parameter.  This allows them to call other class methods and static methods:</p>

<pre><code>    # Divisible by 6 if number is divisible by 2 and 3
    @classmethod
    def divisible_by_6(cls, number):
        return cls.divisible_by_2(number) and cls.divisible_by_3(number)
</code></pre>

<p>Both divisible_by_3 and divisible_by_9 methods require computing the sum of the digits of the number.  This common code should be factored out into its own (private) method, where it can be written clearer, with better variable names, and removing the unnecessary tuple packing/unpacking</p>

<pre><code>    @staticmethod
    def _sum_of_digits(number):
       number = abs(number)
       digit_sum = 0

       while number:
           digit_sum = digit_sum + number % 10
           number = number // 10

       return digit_sum
</code></pre>

<p>Then it can be used by both functions, without duplication of the code.</p>

<pre><code>    # Divisible by 3 if sum of its digits is divisible by 3 
    @classmethod
    def divisible_by_3(cls, number):
        return cls._sum_of_digits(number) % 3 == 0

    # Divisible by 9 if the sum of its digits is divisible by 9
    @classmethod
    def divisible_by_9(cls, number):
        return cls._sum_of_digits(number) % 3 == 0    # WTF?
</code></pre>

<p>At this point, it might become clear that your logic for your <code>divisible_by_9</code> method had a typo / bug.</p>

<p>Also, one should avoid doing the same calculations multiple times.  In <code>divisible_by_5</code> you calculate the last digit twice: once to test it against 0, and again to test it against 5.  Instead, you should save the calculated last digit, and test that value against both 0 and 5, avoiding the second modulo-10 operation:</p>

<pre><code>    # Divisible by 5 if last digit is either 5 or 0
    @staticmethod
    def divisible_by_5(number):
        last_digit = abs(number) % 10
        return  last_digit == 0  or  last_digit == 5
</code></pre>
    </div>