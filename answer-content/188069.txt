<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>You asked for performance and I think you got a great answer from @Ryan Wildry. This answer just addresses the other improvements for the code.</em></p>
<h3>Type</h3>
<p>I'll start with the top of the module -</p>
<blockquote>
<pre><code>Private Type TFile
    Path As String
    Name As String
    Extension As String
    FullPath As String
    Size As String
    Data() As String
    CurrentBodyPosition As Long
    HeaderStart As Long
    HeaderEnd As Long
    FooterStart As Long
    FooterEnd As Long
End Type

Private File As TFile
</code></pre>
</blockquote>
<p>I'd consider myself a little more than a beginner with VBA, but I had to look up excel's object model to figure this out. Looks to me like this would be better off as a <strong>Class</strong>.</p>
<p>And the <code>Private</code> declaration at the Module level is sort of hidden there so that when going through the <code>SplitLargeFiles</code> sub, the use of <code>With File</code> had me wondering if you were using a default Object implicitly that I was unaware of. That being said, why is that <code>File</code> declared at module level when it's only used by one procedure?</p>
<p>You really threw me for a loop there.</p>
<hr>
<h3>Variables</h3>
<blockquote>
<pre><code>Dim newFile As String
Dim i As Long, j As Long, numberOfNewFiles As Long, rowsPerNewFile As Long
</code></pre>
</blockquote>
<p>I like that you knew you had to give each variable a <em>type</em> when declaring them on a line. I also think your variable names are pretty good. But <code>newFile</code> as a string is sort of confusing, especially with your Type at the top. I'd also throw in a Const for some of those magic numbers and strings</p>
<pre><code>Const PATH_TO As String = "\\server090\ACT Modelling\Investigations\Financial Metrics\Sprint_18\Financial Metrics\_JRL_2.46\InsertXmlTableData_20180221_1133\"
Const EXTENTION As String = ".sql"
Const HEADER_START As Long = 0
Const HEADER_END As Long = 11
Const MB_CONVERSION_DIVISOR As Long = 1000000
Const MAX_FILE_SIZE As Long = 20
Const DATA_TWEAK As String = "_0"
Const BUFFER_SIZE As Long = 22
Dim targetFile As TFile
Dim newFileName As String
Dim i As Long
Dim j As Long
Dim numberOfNewFiles As Long
Dim rowsPerNewFile As Long
</code></pre>
<p>Whoa now, looks like there will be a need to refactor some things down below. But I don't want to get ahead of myself.</p>
<hr>
<h3>Comments</h3>
<p>You can see by some of my variable names that the only way I know what I might want to call it is with the comments. Like <code>'specific tweak to data</code>.</p>
<p>Comments - <a href="http://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/" rel="nofollow noreferrer">"code tell you how, comments tell you why"</a>. The code should speak for itself, if it needs a comment, it might need to be made more clear. If not, the comment should describe <em>why</em> you're doing something rather than <em>how</em> you're doing it. Here are a <a href="http://programmers.stackexchange.com/a/254979/125931">few reasons</a> to avoid comments all together.</p>
<hr>
<h2>Code Structure</h2>
<p>Skeleton -</p>
<blockquote>
<pre><code>With File
End With
Do While Len(File.Name) &gt; 0
    If File.Size &gt;= MAX_FILE_SIZE Then
        With File
        End With
        For i = 1 To numberOfNewFiles
            For j = File.HeaderStart To File.HeaderEnd
            Next j
            For j = 1 To rowsPerNewFile
                If File.CurrentBodyPosition &lt; File.FooterStart Then
                Else
                End If
            Next j
            For j = File.FooterStart To File.FooterEnd
            Next j
        Next i
    End If
Loop
</code></pre>
</blockquote>
<p>No wonder your performance is taking a hit, you have <strong>three</strong> <code>j</code> loops in <strong>one</strong> <code>i</code> loop <em>in</em> a <strong>Do While Loop</strong>.</p>
<h3>Why Excel</h3>
<p>When you look at it that way you can see <em>all those cycles</em> you're going through for every <code>File.Name</code>. I'm not going to tell you what to do, but <em>why</em> are you splitting <code>.sql</code> files with excel VBA? I imagine they are essentially tables or even .csv but I can't imagine <em>Excel VBA</em> is the way to go. Maybe you're doing what you can with what you have, and there is nothing wrong with that, really. But I don't see any -</p>
<ul>
<li>Range</li>
<li>Cell</li>
<li>Sheet</li>
<li>Book</li>
</ul>
<p>All I really see is one Worksheet Function. On top of that, this is what you're working with -</p>
<p><sub>Courtesy of <a href="https://github.com/rubberduck-vba/Rubberduck" rel="nofollow noreferrer">Rubberduck-VBA</a></sub>
<a href="https://i.stack.imgur.com/pSfGz.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/pSfGz.png" alt="enter image description here"></a></p>
<h1>Important note!</h1>
<p><strong>Please, don't take this as me disparaging you or your work!</strong> You made something that does what you needed it to do and you did it in a way that you knew. No matter what, that is admirable. That's why you're here at <strong>Code Review</strong> and not SO, because you want to get better at it.</p>
<p>I know it can be overwhelming to get your code picked apart. Sometimes you can't even take it all in at once, you end up making some tweaks and come back only to end up with <em>some</em> of the same feedback. That's the nature of the beast.</p>
<hr>
<h3>Refactoring</h3>
<p>When you are repeating yourself over and over (like with those loops), you might benefit from refactoring the code. That in itself isn't necessarily a performance improvement, but it certainly makes the look better.</p>
<p>At your first <code>If</code> we can break it out</p>
<pre><code>If File.Size &gt;= MAX_FILE_SIZE Then DoThings File

Private Sub DoThings(ByVal targetFile As TFile)
    With File
        'open file, transfer data to an array and close it
        Open .FullPath For Input As #1
        .Data = Split(Input(LOF(1), #1), vbNewLine)
        .Data(0) = Replace(.Data(0), .Name, .Name &amp; DATA_TWEAK) 'specific tweak to data
        Close #1

        'now assign footer positions
        .FooterStart = UBound(.Data) - 5
        .FooterEnd = UBound(.Data)
    End With

    'determine how many files to split the data across, and hence how many rows each new file needs
    numberOfNewFiles = WorksheetFunction.RoundUp(File.Size / BUFFER_SIZE, 0) '22 gives a buffer over 20
    rowsPerNewFile = (CLng(UBound(File.Data)) - CLng(18)) / numberOfNewFiles


    For i = 1 To numberOfNewFiles
        newFile = File.Path &amp; File.Name &amp; "_" &amp; i &amp; File.Extension
        Open newFile For Output As #2

        'make iterative tweak to first row of header data
        File.Data(0) = Replace(File.Data(0), "_" &amp; (i - 1), "_" &amp; i)

        'transfer header data
        For j = File.HeaderStart To File.HeaderEnd
            Print #2, File.Data(j)
        Next j

        'transfer body of data
        For j = 1 To rowsPerNewFile
            If File.CurrentBodyPosition &lt; File.FooterStart Then
                Print #2, File.Data(File.CurrentBodyPosition)
                File.CurrentBodyPosition = File.CurrentBodyPosition + 1
            Else
                Exit For
            End If
        Next j

        'transfer footer data
        For j = File.FooterStart To File.FooterEnd
            Print #2, File.Data(j)
        Next j

        Close #2
    Next i
End Sub
</code></pre>
<p>And we can split that out</p>
<pre><code>Private Sub DoThings(ByVal targetFile As TFile)
    With file
        'open file, transfer data to an array and close it
        Open .FullPath For Input As #1
        .Data = Split(Input(LOF(1), #1), vbNewLine)
        .Data(0) = Replace(.Data(0), .Name, .Name &amp; DATA_TWEAK) 'specific tweak to data
        Close #1

        'now assign footer positions
        .FooterStart = UBound(.Data) - 5
        .FooterEnd = UBound(.Data)
    End With
    SplitFiles targetFile
    'More Stuff

Private Sub SplitFiles(ByVal targetFile As TFile)
    'determine how many files to split the data across, and hence how many rows each new file needs
    newFile = file.Path &amp; file.Name &amp; "_" &amp; i &amp; file.Extension
    Open newFile For Output As #2

    'make iterative tweak to first row of header data
    file.Data(0) = Replace(file.Data(0), "_" &amp; (i - 1), "_" &amp; i)

    'transfer header data
    For j = file.HeaderStart To file.HeaderEnd
        Print #2, file.Data(j)
    Next j

    'transfer body of data
    For j = 1 To rowsPerNewFile
        If file.CurrentBodyPosition &lt; file.FooterStart Then
            Print #2, file.Data(file.CurrentBodyPosition)
            file.CurrentBodyPosition = file.CurrentBodyPosition + 1
        Else
            Exit For
        End If
    Next j

    'transfer footer data
    For j = file.FooterStart To file.FooterEnd
        Print #2, file.Data(j)
    Next j

    Close #2
End Sub
</code></pre>
<p>and so on.</p>
<p>These are just examples, not taking into account what variables need to be passed on and not naming them perfectly. I've not addressed <em>at all</em> what it's doing, just the structure of doing it.</p>
<hr>
    </div>