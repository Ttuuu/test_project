<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This seems like exactly the sort of thing you would use a class for. Not just any class, but an immutable one! </p>

<p>I'd suggest you create a <code>class EgyptianNationalId</code> and initialize it from a string. You could then parse out all the fields at the time of creation, and store them using read-only attributes (such as with a <a href="https://docs.python.org/3/library/collections.html?collections.namedtuple" rel="noreferrer"><code>namedtuple</code></a>).</p>

<p>Something like this:</p>

<pre><code>import collections
from datetime import datetime as dt

_ENID = collections.namedtuple('_ENID', 'list of fields')

class EgyptianNationalId(_ENID):
    ''' Model an Egyptian National ID string.

    &gt;&gt;&gt; id = EgyptianNationalId('29501023201952')
    &gt;&gt;&gt; 1999 in id.century
    True
    &gt;&gt;&gt; id.birth_date.year == 1995
    True
    &gt;&gt;&gt; id.birth_date.month
    1
    &gt;&gt;&gt; id.birth_date.day
    2
    &gt;&gt;&gt; id.birth_date.governorate
    'New Valley'
    '''        
    century = {
       '1': range(1800, 1900),
       '2': range(1900, 2000),
       '3': range(2000, 2100),
       '4': range(2100, 2200),
    }

    @classmethod
    def from_str(cls, s):
        fields = cls.parse_str(s)
        return cls(*fields)

    @classmethod
    def parse_str(cls, s):
        scent = s[0]
        syymmdd = s[1:7]
        ... other fields ...

        birth_date = dt.strptime(syymmdd, '%y%m%d')
        # TODO: Validate birth_date, maybe against century?

        fields = (
            cls.century[scent],
            birth_date,
            ... other fields ...
        )
        return fields
</code></pre>
    </div>