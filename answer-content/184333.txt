<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This can be done without looping. The idea is to rearrange
$$N=k^c$$
to
$$c = \log_k N = \frac{\log N}{\log k}.$$
If the exponent is an integer, then it is a perfect power. In the below code, some extra work is done to avoid floating-point rounding errors.</p>

<pre><code>import math

def check_Power(N,k):
    # input validation
    if N &lt; 0:
        raise Exception('N must be non-negative')
    if k &lt; 0:
        raise Exception('k must be non-negative')

    # 1 to any power can only equal 1
    if k == 1:
        return N == 1

    # Only raising 0 to a non-zero power results in zero
    if N == 0 or k == 0:
        return k == N

    # Use math.floor to make the exponent an integer
    # that is within 1 of the actual answer
    exponent = math.floor(math.log(N)/math.log(k))

    # Test whether the integer exponent solves
    # the problem and adjust the exponent as needed
    testN = k**exponent
    if testN &lt; N:
        exponent += 1
    elif testN &gt; N:
        exponent -= 1
    else:
        return True # testN == N

    return k**exponent == N # check adjusted exponent
</code></pre>
    </div>