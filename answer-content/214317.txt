<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>This second version doesn't have to pull in extra packages…</p>
</blockquote>

<p><code>Data.Bifunctor</code> is part of <code>base</code> since 4.8.0.0, so I'm not sure where you get the "extra packages" from. Yes, <code>Data.Bifunctor</code> was originally in the <code>bifunctors</code> package, but it was <a href="https://github.com/ghc/ghc/blob/master/libraries/base/changelog.md" rel="nofollow noreferrer">transferred into <code>base</code> in 2015</a>.</p>

<p>However, compared to the <code>extras</code> version, your variant is easy to read, as the <code>[x | res] … [x | not res]</code> slightly obfuscates the result. I'd probably bind <code>map fst</code>, but that's personal preference. </p>

<blockquote>
  <p>and doesn't create intermediate lists</p>
</blockquote>

<p>It generates <em>a lot</em> of intermediate lists. I haven't checked yet, but as <code>[x|res]++as</code> depends on <code>res</code> cannot get simplified to <code>x:as</code> or <code>as</code> at compile time by rules, so it might create a thunk <code>[…]++as</code>. In the end, you have <span class="math-container">\$\mathcal O(n) \$</span> additional <span class="math-container">\$\mathcal O(1)\$</span>-sized lists.</p>

<p>Since this is a hidden implementation detail, I don't really like Neil's solution too much. Something along</p>

<pre><code>partitionM :: Monad m =&gt; (a -&gt; m Bool) -&gt; [a] -&gt; m ([a], [a])
partitionM f [] = return ([], [])
partitionM f (x:xs) = do
    res &lt;- f x
    (as,bs) &lt;- partitionM f xs
    return $ if res then (x : as,     bs)
                    else (    as, x : bs)
</code></pre>

<p>would at least support the optimizer and get rid of those intermediate lists, but is even more verbose. Your variant uses an additional list, sure, but it's easier to read and to understand IMHO.</p>
    </div>