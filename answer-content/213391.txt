<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>FunctionPointerWrapper_t</code> seems unnecessary; we can store a <code>std::function&lt;void()&gt;</code> in the map directly. To create this function, we can either use <a href="https://en.cppreference.com/w/cpp/utility/functional/bind" rel="nofollow noreferrer"><code>std::bind</code></a>:</p>

<pre><code>auto player = std::make_shared&lt;Player&gt;(*this);
inputControl.addKeyToCheck( sf::Keyboard::H, std::bind(&amp;Player::sayHello, player) );
</code></pre>

<p>or a <a href="https://en.cppreference.com/w/cpp/language/lambda" rel="nofollow noreferrer">lambda function</a>:</p>

<pre><code>auto player = std::make_shared&lt;Player&gt;(*this);
inputControl.addKeyToCheck( sf::Keyboard::H, [=] () { player-&gt;sayHello(); } );
</code></pre>

<p>Note that both of these examples internally create a copy of the <code>shared_ptr</code>.</p>

<hr>

<p>For cutting down on the number of named functions in the player class, we can route the functionality to a single <code>move</code> function, something like:</p>

<pre><code>void Player::move(Vector2f const&amp; speed) { getComponent&lt;Velocity&gt;() += speed * mv::constants::mob::DEFAULT_SPEED; }
</code></pre>

<p>We can then use <code>std::bind</code>, or lambda functions as above:</p>

<pre><code>inputControl.addKeyToCheck( sf::Keyboard::W, std::bind(&amp;Player::move, player, Vector2f(0.f, -1.f)) );
inputControl.addKeyToCheck( sf::Keyboard::W, [=] () { player-&gt;move(Vector2f(0.f, -1.f)); });
</code></pre>

<p>Where <code>Vector2f(0.f, -1.f)</code> can be replaced by whatever the actual desired type / value is. (We could also do the multiplication outside of the move function, if it's not common between the functions).</p>

<p>We still need to define 4 functions, but there's less overhead in the <code>Player</code> class.</p>

<p>To simplify it further, we'd probably want to define some sort of axis mapping, so we could do something like:</p>

<pre><code>inputControl.addAxis(Axis(sf::Keyboard::W, sf::Keyboard::S, maxSpeed, minSpeed), [=] (float axisValue) { player-&gt;moveVertically(axisValue); });
</code></pre>

<p>(and perhaps even allow a 2d-axis to be defined mapping 4 keys to one function call) but that might be a fair amount of extra work.</p>

<hr>

<p>General comments:</p>

<ul>
<li><code>InputManager::addKeyToCheck</code> and <code>InputManager::eraseKey</code> should probably not return a fixed <code>true</code> / <code>false</code> without checking if they actually succeeded.</li>
</ul>
    </div>