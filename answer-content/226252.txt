<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><strong>Naming conventions:</strong> method names should start with lower case letters, since upper case indicates class names (e.g. <code>checkString()</code> instead of <code>CheckString()</code>). For this reason, the code highlighting here in StackExchange highlights your method name in blue, as if it was a class name. This would probably cause confusion, if another developer wanted to collaborate with you on your code. You can find a list of naming conventions <a href="https://howtodoinjava.com/java/basics/java-naming-conventions/" rel="nofollow noreferrer">here</a>.</li>
<li><strong>Magic numbers:</strong> you should avoid using hard-coded numbers. For example, your<code>enterLetter</code> method returns <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">magic numbers</a>. This makes code less readable, harder to understand and harder to maintain.</li>
<li><strong>Method length</strong>: it is good practice to keep methods as <a href="https://softwareengineering.stackexchange.com/questions/133404/what-is-the-ideal-length-of-a-method-for-you">short and simple</a> as possible. A method should ideally only have one single purpose and a name that indicates this purpose. You already split up your code in different methods, which is a good start. Still, your <code>main</code> and <code>enterLetter</code> methods are quite long and for the <code>enterLetter</code> method, it is hard to get a quick overview of what the method actually does.</li>
<li><strong>Access modifiers:</strong> Java has different <a href="https://javabeginnerstutorial.com/core-java-tutorial/access-modifier-in-java/" rel="nofollow noreferrer">access modifiers</a> for methods and variables. Methods should only be declared as <code>public</code> if they are either the <code>main</code> method, or if you need to call them from another class. Since you have only one single class, you can make all methods and fields <code>private</code> except for the <code>main</code> method.</li>
<li><strong>Object orientation:</strong> Java is an object-oriented language. The main advantage of this is that code becomes more readable and maintainable if you split your program code into different classes. Just think about which data/functionality belongs together and encapsulate it in a separate class.</li>
<li><strong>Separation of concerns:</strong> in your code, everything is mixed up in a single class. It is good practice to separate GUI from program logic. A common design pattern used to achieve this is the <a href="https://www.tutorialspoint.com/design_pattern/mvc_pattern.htm" rel="nofollow noreferrer">Model-View-Controller pattern</a> (MVC).</li>
</ul>
    </div>