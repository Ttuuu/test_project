<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're going to have issues when you'll have multiple resources. Because you'll have multiple resources, but you will only have a single <code>detail</code> dictionary. Which means you won't know what resource generate which count. So you should probably review that structure - I'm guessing what you want is that <code>resource</code> should be a dictionary instead of a list. The keys for that dictionnary would be each resource ID, and within each <code>resources</code> you'll have further key-values pairs (such as your <code>details</code>).</p>
<p>I haven't touched that as I may be reading your use case wrong.</p>
<p>For the rest:</p>
<pre><code>CRITICAL = 0
MEDIUM = 1
LOW = 0

test = {
    "version": "0",
    "id": "85fc3613-e913-7fc4-a80c-a3753e4aa9ae",
    "detail-type": "ECR Image Scan",
    "source": "aws.ecr",
    "account":
        "123456789012",
    "time": "2019-10-29T02:36:48Z",
    "region": "us-east-1",
    "resources": [
        "arn:aws:ecr:us-east-1:123456789012:repository/my-repo"
    ],
    "detail": {
        "scan-status": "COMPLETE",
        "repository-name": "my-repo",
        "finding-severity-counts": {
            "CRITICAL": 10,
            "MEDIUM": 9
        }
    }
}

def get_summaries(test):
    summaries       = []
    severity_counts = test["detail"]["finding-severity-counts"]
    resource        = test["resources"][0]
    for severity, counts in severity_counts.items():
        summaries.append(f"Resource {resource} has {counts} {severity} findings")
    return summaries

summaries = get_summaries(test)
for s in summaries:
    print(s)
    
</code></pre>
<ul>
<li><code>mydictionnary.items()</code> allows you to iterate on all the keys, values of that dictionnary. That removes the need for the <code>if-else</code></li>
<li><code>f"my strings in which I want a {my_variable} value"</code> is a newer and IMO clearer, more concise syntax than <code>format</code>. It should do the job most of the time. The severity (LOW, MED, CRITICAL) is already present in "finding-severity-counts" variable, so why not re-use it. This allows using a single line to format your strings, as opposed to printing 3 different ones.</li>
<li>It's better to encapsulate things in method, rather than just dump everything directly in the main file. This is why you have a get_summaries() methods now. Allows re-use, etc.</li>
<li>Generally in python, convention for variable is using_underscores_to_split_words. I haven't change your keys in the <code>test</code> dictionary is other parts of your application may depend on the hyphen... but should be considered changing if you're going to use python. Just a convenient convention, and if you're just starting out anyways, might as well get these things right.</li>
</ul>
<p>Note that I may easily have expressed that same code in fewer lines. I wouldn't really need to do <code>severity_counts = test["detail"]["finding-severity-counts"]</code>, and then iterate on severity_counts - I could just do <code>for k,v in test["detail"]["finding-severity-counts"].items()</code>. However this is less readable imo.</p>
<p>=================</p>
<p>Other than that, as others have touched in the comment... the real goal of refactoring your code (e.g. revisiting existing, working code to improve it) should not really be to make it "shorter". It should be to make it better. How do we define better will vary with different applications, but things to consider:</p>
<ul>
<li>a more concise notation. Not because it is shorter, but because using fewer lines to the the same things may mean you're using a loop (instead of long <code>if-elif</code>), or just having a better code structure.</li>
<li>more readable code. ensuring your choice of variable and method names clearly indicates what happens</li>
<li>more re-usable code. Your code generally should consist of methods. Each method should have one clear purpose and focus on doing that one thing really well.</li>
</ul>
    </div>