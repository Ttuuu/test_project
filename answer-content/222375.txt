<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you call <code>regex_strip(s, "")</code>, you will get:</p>

<blockquote>
  <p>re.error: unterminated character set at position 0</p>
</blockquote>

<p>because neither <code>^[]</code> nor <code>[]$</code> is a valid regular expression.  You could avoid this by using <code>if not chars:</code> instead of <code>if chars == None:</code>.</p>

<hr>

<p>There is no need to <code>re.compile()</code> your regular expressions; you aren't saving the compiled patterns anywhere for re-use.</p>

<hr>

<p>You can simplify your logic by using the reg-ex to capture the middle, non-stripped portion of the string, instead of doing two replacements for the start and end trim operations:</p>

<pre><code>import re

def regex_strip(s, chars = None):

    if chars:
        trim = '[' + re.escape(chars) + ']*'
    else:
        trim = r'\s*'

    return re.fullmatch(f"{trim}(.*?){trim}", s).group(1)
</code></pre>

<hr>

<p>I'm not sure the point of asking you to write your own <code>strip()</code> function is to delegate the task to the reg-ex engine.  It seems like going out and buying a sledge hammer when the problem is to build a nut cracker.</p>
    </div>