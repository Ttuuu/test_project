<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Now assuming you simply just want to use standard APIs and ES6 (because from a cross-browser point of view, this code isn't guaranteed to work)...</p>

<ul>
<li><p><code>onClick</code> is unnecessarily pulled out. You can just inline it. Also, I believe <code>return false</code> are unnecessary when you already have <code>preventDefault</code>. You wouldn't want to prevent bubbling as something else might be delegating their handlers.</p>

<pre><code>document.addEventListener('DOMContentLoaded', () =&gt;  {
    document.querySelector('#foo').addEventListener('click', e =&gt; {
      event.preventDefault();
      scroll(400);
    }, false);
});
</code></pre></li>
<li><p>Variable declarations are also unnecessarily separated. It's not like they're defined somewhere in the middle (where you sometimes need to pull them up for visibility).</p>

<pre><code>var start = performance.now();
var travelled = 0;
var html = document.querySelector('html');
</code></pre></li>
<li><p>Pull out your <code>move</code> function from your scroll. What happens is that every call to <code>scroll</code>, you're creating <code>move</code>.</p></li>
<li><p>I also suggest you schedule you call <code>requestAnimationFrame</code> first thing in the callback. That's so your code won't hold up the scheduling of the next frame. Should you want to bail out, you can always use <code>cancelAnimationFrame</code>.</p></li>
<li><p><code>Math.floor</code> can be substituted by <code>| 0</code> (bitwise or). Under the hood, it transforms the number from float to int, dropping the decimals. It's fast one some engines, but your mileage may vary.</p></li>
<li><p>Your "bail out" conditions can simply be combined:</p>

<pre><code>if((1 - fractionDone) &lt;= 0 || window.scrollY + window.innerHeight === html.offsetHeight) return
</code></pre></li>
</ul>
    </div>