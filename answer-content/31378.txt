<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not O(n log n) algorithm, because this part is quadratic:</p>

<pre><code>  for (var i = 0; i &lt; firstArray.length; i++) {
    for (var j = 0; j &lt; secondArray.length; j++) {
      if (firstArray[i] + secondArray[j] == k) {
        count += 2
      }
    }
  }
</code></pre>

<p>Denoting <code>n = input.length</code>, this has roughly <code>(n/2)^2 = n^2/4</code> steps, which is O(n^2).</p>

<p><strong>The rest of this answer is a result of a misread and is not directly related to the question.</strong> I'll leave it as a comment of a possibly extended exercise.</p>

<p>However, I'm not sure that O(n log n) algorithm does exist. Consider</p>

<pre><code>a = [ 1, 2, 4, 8, ..., 2^n ] (for some n)
</code></pre>

<p>and <code>k</code> is a sum of all elements in <code>a</code>. Since you can repeat the numbers, and <code>a[k] = 2*a[k-1]</code> for all positive <code>k</code>, you'd have exponential number of sums, so no O(n log n) algorithm will solve this.</p>

<p>It is easy to show that the number of solutions is strictly bigger than 2^n. Just note that</p>

<pre><code>k = (sum of ANY elements in a except a[0] = 1) + (sum of the remaining elements in a) * 1.
</code></pre>

<p>The first sum can be chosen in 2^n ways. Of course, there are other sums as well, but this is enough to show that you can have an exponential number of solutions, which is enough to show that no sub-exponential algorithm can find them all.</p>

<p>Of course, there may be a mathematical trick to compute only how many such solutions there are, but I don't know it.</p>
    </div>