<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://msdn.microsoft.com/en-us/library/system.random(v=vs.110).aspx" rel="nofollow noreferrer"><code>Random</code></a> is pseudo random, as stated in the docs:</p>

<blockquote>
  <p>Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness.</p>
</blockquote>

<p>This is good for modelling, and games. However not for security. And so I'd recommend that you instead use <a href="https://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider(v=vs.110).aspx" rel="nofollow noreferrer"><code>RNGCryptoServiceProvider</code></a>.
This has a method, <a href="https://msdn.microsoft.com/en-us/library/wb9c8c67(v=vs.110).aspx" rel="nofollow noreferrer"><code>GetBytes(byte[] data)</code></a>, that looks exactly like what you want.
Using this you can build an ASCII string, rather than a Unicode string, and will have the same level of randomness per bit/byte. But not per char, so your strings will need to be twice as long, as you're generating numbers in the range 0 to 65535, where the above is 0 to 256.
Finally you can change the byte array to a string using <a href="https://msdn.microsoft.com/en-us/library/744y86tc(v=vs.110).aspx" rel="nofollow noreferrer"><code>Encoding.ASCII.GetString</code></a>.</p>

<p>And so you can get:</p>

<pre><code>private static string GenerateRandomString(int size)
{
    var b = new byte[size];
    new RNGCryptoServiceProvider().GetBytes(b);
    return Encoding.ASCII.GetString(b);
}
</code></pre>

<p>If you do need to have the program produce chars that are 16bits each, then you can chunk the above bytes array into chunks of two, shift the first by 8 bits, <code>first &lt;&lt; 8</code>, and then add them.</p>
    </div>