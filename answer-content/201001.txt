<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Separate responsibilities</h3>

<p>Key concepts are not separated well.
The functionality of the hash table and user interaction are all mixed up and spread out across the various functions of the program.</p>

<p>I propose a different program organization where the responsibilities are separated better:</p>

<ul>
<li><p>Create a class for the hash table, with functions <code>put(key, value)</code> and <code>get(key)</code>. This class encapsulates all details of the functionality of a hash table, such as chaining elements in case of collisions. Users of this class don't know how that's implemented, all they know is that if they call <code>put(key, value)</code> then they will be able to get that value back by calling <code>get(key)</code>.</p></li>
<li><p>Create a class <code>Contacts</code>, with public functions <code>add(name, number)</code> and <code>search(name)</code>. This class won't do anything interesting. It will have a hash table, and it will simply delegate <code>add</code> to the hash table's <code>put</code> and <code>search</code> to the hash table's <code>get</code>. It may seem almost pointless, but it's not, because it provides a user-friendly interface. It doesn't know how the hash table works internally, and that's great. The responsibility of <code>Contacts</code> is to store contacts in some way. Today it's a hash table in memory, tomorrow it might be a database. The hash table implementation is an independent component that is usable in other programs, not only this one.</p></li>
<li><p>Create a <code>main</code> function that handles all user interaction. An interactive menu could be interesting, to let users add contacts and search contacts. The interactive commands read input from <code>stdin</code> and call the naturally named methods of an instance of <code>Contacts</code>. The <code>main</code> function doesn't know or care how <code>Contacts</code> works, that it uses a hash table or a database as a storage, and if the hash table handles collisions or not. Those are implementation details that are encapsulated in <code>Contacts</code> and in the hash table. This is also the only place in the program that prints messages, and that's great.</p></li>
</ul>

<h3>Readability</h3>

<p>This writing style is a bit hard to read because the symbols are tightly packed:</p>

<blockquote>
<pre><code>for(int i=0;i&lt;len;i++){
</code></pre>
</blockquote>

<p>I recommend this more breezy style instead, putting spaces around operators and before <code>(</code> and after <code>)</code> and <code>;</code>:</p>

<pre><code>for (int i = 0; i &lt; len; i++) {
</code></pre>

<p>Similarly, instead of this:</p>

<blockquote>
<pre><code>cout&lt;&lt;"Phone number: "&lt;&lt;phoneBook[check].value&lt;&lt;endl;
</code></pre>
</blockquote>

<p>This would be easier to read, again, with spaces around the operator <code>&lt;&lt;</code>:</p>

<pre><code>cout &lt;&lt; "Phone number: " &lt;&lt; phoneBook[check].value &lt;&lt; endl;
</code></pre>

<p>I would apply the same style to all statements of the program.</p>

<hr>

<p>This is considered error-prone:</p>

<blockquote>
<pre><code>else
    temp=temp-&gt;next;
</code></pre>
</blockquote>

<p>It's recommended to put braces around block statements:</p>

<pre><code>else {
    temp = temp-&gt;next;
}
</code></pre>

<p>(I also added spaces around the <code>=</code> operator.)</p>

<h3>Other minor things</h3>

<p><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice"><code>using namespace std;</code> is considered bad practice.</a></p>

<p>Instead of <code>sum=sum+temp[i];</code> it's more natural to write <code>sum += temp[i];</code>.</p>
    </div>