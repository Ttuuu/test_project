<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>def to_base_3(base_10: int) -&gt; str:
</code></pre>
</blockquote>

<p>Why <code>str</code>? I think it's simpler to use lists of digits.</p>

<p><code>base_10</code> is a misleading name. It's an integer. It's actually in base 2 in just about every CPU this code will ever be run on.</p>

<hr>

<blockquote>
<pre><code>def to_base_10(base_3: str) -&gt; int:
</code></pre>
</blockquote>

<p>Similarly: this is <code>from_base_3</code> to integer.</p>

<blockquote>
<pre><code>    output = 0

    for i, char in enumerate(base_3[::-1]):
        output += int(char) * (3 ** i)

    return output
</code></pre>
</blockquote>

<p>It's simpler to convert from a list of digits to an integer in big-endian order:</p>

<pre><code>def to_base_10(base_3: str) -&gt; int:
    output = 0

    for char in base_3:
        output = 3 * output + int(char)

    return output
</code></pre>

<hr>

<blockquote>
<pre><code>def find_charming_components(number: int, charming_components: list = None) -&gt; list:
    if charming_components is None:
        charming_components = []
</code></pre>
</blockquote>

<p>Frankly this is ugly. I understand that you want to use <code>append</code> for efficiency, but it would be cleaner with an inner recursive method.</p>

<hr>

<blockquote>
<pre><code>    if digit == '1':
        component = to_base_10('1' + '0' * (len(base_3_value) - 1))
        # Find the largest power of three that is lower than the current value. I.e: 3**4
        charming_components.append(component)
        # Append this charming number to the list of components
</code></pre>
</blockquote>

<p>I don't think I've ever seen comments after the code before, and it took me a while to work out what was going on.</p>

<p>If you have closed form expressions, why call <code>to_base_10</code>?</p>

<p>Also, surely it's "no greater than" rather than "lower than"?</p>

<blockquote>
<pre><code>    elif digit == '2':
</code></pre>
</blockquote>

<p>Why not just <code>else:</code>?</p>

<blockquote>
<pre><code>        charming_components.append(component)
</code></pre>
</blockquote>

<p>If the same code ends all the cases, it can be pulled out.</p>

<hr>

<p>At this point I have</p>

<pre><code>def find_charming_components(number: int) -&gt; list:
    charming_components = []

    def helper(n):
        base_3_value = to_base_3(n)
        digit = base_3_value[0]

        if len(base_3_value) == 1:
            if digit != 0:
                charming_components.append(digit)
            return

        component = 0
        if digit == 1:
            # Find the largest power of three that is no greater than the current value. E.g: 3**4
            component = 3 ** (len(base_3_value) - 1)
        else:
            # Find the largest power of three times five that is no greater than the current value. E.g: 3**4 * 5
            component = 5 * 3 ** (len(base_3_value) - 2)

        charming_components.append(component)
        # Repeat process with the difference
        helper(n - component)

    helper(number)
    return charming_components
</code></pre>

<p>Now, <code>helper</code> is clearly tail-recursive, so is easy to replace with a loop:</p>

<pre><code>def find_charming_components(number: int) -&gt; list:
    charming_components = []

    while number &gt; 0:
        base_3_value = to_base_3(number)
        digit = base_3_value[0]

        if len(base_3_value) == 1:
            if digit != 0:
                charming_components.append(digit)
            break

        component = 0
        if digit == 1:
            # Find the largest power of three that is lower than the current value. E.g: 3**4
            component = 3 ** (len(base_3_value) - 1)
        else:
            # Find the largest power of three times five that is lower than the current value. E.g: 3**4 * 5
            component = 5 * 3 ** (len(base_3_value) - 2)

        charming_components.append(component)
        # Repeat process with the difference
        number -= component

    return charming_components
</code></pre>

<hr>

<p>At this point, the remaining issue is the cost of the conversion to base 3. Observing the sequence of numbers, we can easily generate them and then filter:</p>

<pre><code>def find_charming_components(number: int) -&gt; list:
    candidates = [1, 2, 3]
    current = 3
    while current &lt; number:
        candidates.extend([current // 3 * 5, current * 3])
        current *= 3

    charming_components = []
    for candidate in reversed(candidates):
        if number &gt;= candidate:
            charming_components.append(candidate)
            number -= candidate

    return charming_components
</code></pre>
    </div>