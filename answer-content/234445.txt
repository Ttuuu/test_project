<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So ideally you want to write something like:</p>

<pre><code>template &lt;typename... Ts&gt;
constepxr auto coalesce(std::optional&lt;Ts&gt;&amp;... xs)
{
   return (xs || ...);
}
</code></pre>

<p>But the issue here is of course that it will convert the optionals to <code>bool</code> before applying the boolean or-operator. You could however cast it to a type that does provide the right semantics for the boolean or-operator to do the thing you want:</p>

<pre><code>template &lt;typename T&gt;
struct coalescable {
    T &amp;x;
    coalescable(T &amp;x_): x(x_) {}
    constexpr const coalescable &amp;operator||(const coalescable &amp;other) {
        return x.has_value() ? *this : other;
    }
};
</code></pre>

<p>And then use that in the fold expression:</p>

<pre><code>template &lt;typename... Ts&gt;
constepxr auto coalesce(std::optional&lt;Ts&gt;&amp;... xs)
{
   return (coalescable(xs) || ...).x;
}
</code></pre>
    </div>