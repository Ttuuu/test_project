<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>void insert(const std::string &amp;name)
{
    auto it = data.find(name);
    if (it == data.end())
    {
        data[name] = 1;
        return;
    }
    data[name]++;
}
</code></pre>

<p>If it is available, you should prefer taking <code>std::string_view</code> parameters over <code>std::string const&amp;</code>. You see, every time you do:</p>

<pre><code>table.insert("Orange");
table.remove("Orange");
</code></pre>

<p>a string has to be constructed for "Orange". Especially when all you're doing is removing or getting the count, that's very wasteful. <code>std::string_view</code> is very lightweight, and automatically converts from both C-strings and <code>std::string</code>. Even in the case of <code>insert()</code>, because your inserts are conditional, it's worthwhile.</p>

<p>Now your <code>insert()</code> can be simplified quite a bit because when you do <code>data[???]</code> with an <code>unordered_map</code>, and <code>???</code> is not in the map, it <em>automatically</em> gets inserted with a default value. For int, the default value is 0.</p>

<p>So all you need is:</p>

<pre><code>void insert(std::string_view name)
{
    ++data[name];
}
</code></pre>

<p><code>remove()</code> works, but it's not very efficient. The problem is that after you find the element and have the iterator... you throw that information away! Then you use <code>data[name]</code> which has to do another search.</p>

<p>Instead, use what you've got. When you have the iterator, use it.</p>

<pre><code>void remove(std::string_view name)
{
    auto const it = data.find(name);
    if (it != data.end())
    {
        if (--it-&gt;second == 0)
            data.erase(it);
    }
}
</code></pre>

<p><code>count()</code> has bit of a bug, and it's one the compiler would have informed you about if you'd made the function <code>const</code>.</p>

<p>The bug is that, as with <code>remove()</code>, after finding the element and getting an iterator to it, you throw that information away and use <code>operator[]</code>... but in this case, <code>operator[]</code> is non-<code>const</code>, meaning it might modify the map. That's not something you want happening if you're just getting a count.</p>

<p>Once again, the solution is to simply not throw the iterator away, but to use it:</p>

<pre><code>int count(std::string_view name) const noexcept
{
    auto const it = data.find(name);
    if (it == data.end())
        return 0;
    return it-&gt;second;
}
</code></pre>
    </div>