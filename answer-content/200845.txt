<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You know, when deciding whether you have anagrams, you are generally only interested in alpha-numeric characters, the rest are disregarded.</p>

<p>Next, making extraneous copies is generally a bad idea. So, accept a constant view and don't make a copy.</p>

<p>When you accept a mutable reference, be sure that it's obvious from the function-name and arity that it's a mutable reference.</p>

<p>If you can, avoid external linkage. It promotes inlining and avoids unfortunate name-clashes.</p>

<p>Finally, a faster algorithm is normally preferable:</p>

<pre><code>bool isAnagram(std::string_view a, std::string_view b) noexcept {
    unsigned counts[1ULL + (unsigned char)-1] = {};
    for (unsigned char c : a)
        ++counts[std::tolower(c)];
    for (unsigned char c : b)
        --counts[std::tolower(c)];
    for (std::size_t i = 0; i &lt; std::size(counts); ++i)
        if (counts[i] &amp;&amp; std::isalnum(i))
            return false;
    return true;
}
</code></pre>
    </div>