<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Arguments of scalar types are better passed by value.</p></li>
<li><p>It makes sense for iterator types to befriend the range class itself and hide their constructors private.</p></li>
<li><p>As a rule, it is undefined to compare iterators into different containers. Consequently, you can reduce your iterators comparison to but a single relational iterator (add a debug-time diagnostic for checking range ends if you like).</p></li>
<li><p>Next, iterators don't need to keep track of range ends. The range itself knows its max when constructing an end iterator, the iterator itself needs not to know it's past the end. Finally, you don't need to execute division on each increment, even if it's optimized out (I wonder if every 17-compliant compiler is capable of that).</p></li>
<li><p>Iterators are trivially random-access, so you can add more relational and arithmetical operators to them.</p></li>
<li><p>Perhaps it makes sense to add a setter that mutates both ends of a range in a single call. In addition, operators like union of adjacent ranges might prove useful.</p></li>
<li><p>gaurantees :)</p></li>
</ol>
    </div>