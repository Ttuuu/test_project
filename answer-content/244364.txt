<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code Structuring</strong></p>
<p>All Android tutorial code packs event listeners into anonymous inner classes, because the examples are usually short and it is convenient, from distribution point of view, to pack all code into the same file. It is however not the correct way to implement production code, as it creates large and messy compilation units that contain many many responsibilities, making them impossible targets for unit tests.</p>
<p>My personal rule of thumb is that if your <code>OnClickListener</code> or any other event listener contains anything more than one method call, it must be put it into a separate class. Otherwise a lambda is used.</p>
<p>I prefer strict adherence to <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a> even in Android apps. I have used Guava EventBus in my hobby projects to send messages between different components and to avoid the "initialization spaghetti" where references between components are shared to connect them together. It works but you have to design the event mechanism throughly. There are several dependency injection libraries too, but I haven't had the time to look at those yet.</p>
<p><strong>Code Optimization</strong></p>
<p>We are dealing with an operation invoked by the user, which involves a confirmation dialog. What kind of problems have you noticed and what kind of preceivable optimization results are you looking for? To me this looks like premature optimization.</p>
    </div>