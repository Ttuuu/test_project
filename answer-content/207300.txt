<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since @rolfl tried to get a very efficient solution, I think fastest is probably a primitive int array:</p>

<pre><code>public class SurvivorChallenge {
public static void main(String[] args) {
    final int chairCount = 100;
    final int lastChair = chairCount - 1;

    // Each chair saves index of next filled chair
    int[] chairs = new int[chairCount];
    for(int i=0; i &lt; lastChair; ++i) {
        chairs[i] = i + 1;
    }
    // This creates a closed ring of chair-indices
    chairs[lastChair] = 0;

    int currentChairIndex = lastChair;
    int skipCount = 0; // We will remove the first chair first

    for(int chairsLeft=chairCount; chairsLeft &gt; 1; --chairsLeft) {
        // Follow linked Indices in Chair list until skipCount
        int previousChairIndex = currentChairIndex;
        for (int i=0; i &lt; skipCount + 1; ++i) {
            previousChairIndex = currentChairIndex;
            currentChairIndex = chairs[currentChairIndex];
        }

        // Let the previous Chair point to the following Chair
        // Thus removing the current Chair from the Ring
        chairs[previousChairIndex] = chairs[currentChairIndex];
        ++skipCount;
    }

    // Normalize Result cause Chairs start at 1 and Arrays at 0
    System.out.println("Result Chair Nr: " + (chairs[currentChairIndex]+1));
}
}
</code></pre>

<p>We don't need to copy arrays or create/destroy complex objects. We can use the array to store the index of the next node and just update these index values, ignoring removed entries. This will behave like a Java Linked list, but without Garbage-Collection and with continuous reads in a compact memory range.</p>
    </div>