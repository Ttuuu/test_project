<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs</h2>

<p>Performance doesn't matter when the results aren't correct. First make it work <em>goed</em>, then make it work <em>snel</em>! ;)</p>

<p>Your approach to parsing SQL queries is broken. You can't just split on commas or check for the presence of keywords or parenthesis like that. Column and table names can contain keywords, and when quoted, can also contain commas and parenthesis. The same goes for strings. Here are a few queries that produce incorrect results:</p>

<ul>
<li><code>SELECT smell FROM fromage</code> - note the <code>from</code> in <code>fromage</code>.</li>
<li><code>SELECT passport FROM items</code> - note the <code>as</code> in <code>passport</code>.</li>
<li><code>SELECT `foo,bar` FROM table</code> - this should produce a single column, not two.</li>
<li><code>SELECT IF(condition, '1) success', '2) failure') FROM table</code> - likewise, a single column, not two.</li>
</ul>

<hr>

<p>There's another bug: <code>columns</code> isn't cleared, so calling <code>GetRapportColumnsList</code> twice in a row produces incorrect results. Another problem is that, because <code>columns</code> is returned directly, a caller that modifies its results affects the results of any other caller as well.</p>

<h2>Other notes</h2>

<ul>
<li>Instead of letting <code>AddColumnStringsToQueue</code> and <code>CreateColumns</code> store their results in instance fields, I would let them return their results instead. I'd also modify <code>CreateColumns</code> to take the column parts queue as a parameter. This makes the dependency between them more obvious, and makes it more difficult to use them incorrectly (such as calling them in the wrong order). There doesn't seem to be any reason to keep <code>columns</code> around after <code>GetRapportColumnsList</code> returns anyway.</li>
<li>With the above change, <code>RapportService</code> has become stateless, and so the parsing methods might as well be made <code>static</code>. They're 'pure' functions whose outputs only depend on their inputs.</li>
<li>Why use a queue instead of passing an array or list, and iterating it with foreach?</li>
<li><code>GetOpeningBracket(input)</code> can be replaced by <code>input.Contains(BracketsEnum.ParenthesisOpen)</code>. The same goes for <code>GetClosingBracket</code>.</li>
<li>The name <code>IsSurrounded</code> is somewhat misleading: that method actually checks if the parenthesis in the input are properly balanced - and an input without parenthesis is also balanced.</li>
<li>Personally I wouldn't add an <code>Enum</code> suffix to a class name, especially since they're not enums. I would also put those constants in a single place, not spread across two classes.</li>
</ul>
    </div>