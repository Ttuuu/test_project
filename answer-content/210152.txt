<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>first, your problem is example of <a href="https://en.wikipedia.org/wiki/Dynamic_programming" rel="nofollow noreferrer">dynamic programming</a>. <a href="https://stackoverflow.com/questions/50974371/efficient-dynamic-programming-using-python">Here some tips</a> how to approach problem in python</li>
<li>your solution calculate each table cell separately. But function <code>min_parent()</code> use data only from previous row, so you can calculate row by row (and <code>numpy</code> is designed to fast operations on vectors)</li>
<li>i am using like you range <code>&lt;j - 1 : j + 2)</code> but check if task don't need <code>&lt;j - 1, j + 2&gt;</code></li>
</ul>

<p>Example code</p>

<pre><code>
assert(w &gt;= 2) # if not, you should handle w == 1 in special way

def vectorized_solution(arr, h):
    sum_arr = arr.copy()
    for i in range(1, h):
        parent = sum_arr[i - 1, :]
        sum_arr[i, 0] += min(parent[0], parent[1])
        sum_arr[i, 1:-1] += np.minimum.reduce([parent[0:-2], parent[1:-1], parent[2:]])
        sum_arr[i, -1] += min(parent[-2], parent[-1])
    return sum_arr
</code></pre>
    </div>