<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Input sanitization</h2>

<p>Your functions take a <code>std::string</code> as parameter, as such, they should be "well behaved" for any possible <code>std::string</code> passed to them. Note that well behaved does not mean that it has to "work", just that it should not break anything.</p>

<p>Specifically, what would happen if I passed the string <code>"Hello"</code> to that function? <code>'H' - 'a'</code> is <code>-25</code>, ruh roh!</p>

<p>There's a few different ways to tackle this. </p>

<ul>
<li><p>You could convert all upper-case letters to lower case, but that does not fix punctuation marks, spaces and numbers. I also personally think that wether the trie is case-sensitive or not should be the user's problem, not the trie itself.</p></li>
<li><p>You could bail out of the function if a unhandled character is hit.</p></li>
<li><p>Just expand <code>children</code> to 256 instead of 26 so that all legal values of <code>char</code> are handled properly. Sure your trie is going to be 5 times as big, but that's a fairly minor detail since it grows logarithmically. </p></li>
</ul>

<p><strong>edit</strong>: This last approach also makes the trie operate on raw data instead of characters, which makes it encoding-agnostic (which gives you your unicode support)</p>

<h2>Avoid using shared_ptr unless absolutely necessary</h2>

<p>shared pointers are clunky and heavy affairs. On top of this, using them sends a message to people reading the code: Ownership of the object is potentially shared between multiple owners, which is simply not the case here.</p>

<p>in your case, a <code>std::unique_ptr&lt;&gt;</code> is absolutely fine.</p>

<h2>Your root does not need to be dynamically allocated</h2>

<p>It's created at construction unconditionally, and destroyed at destruction unconditionally. On top of that, it does not make use of type erasure (polymorphism). As such, there's no reason for it not to be a normal member of trie.</p>

<p><code>std::shared_ptr&lt;Node&gt; root = std::make_shared&lt;Node&gt;();</code></p>

<p>becomes:</p>

<p><code>Node root;</code></p>

<p>This will require you to change your search and insert functions so that the first line becomes:</p>

<p><code>const Node* n = &amp;root;</code></p>

<p>But that's fine because that's preferable once you move to <code>unique_ptr</code> anyways.</p>

<p><strong>Edit:</strong> On that note:</p>

<h2>Raw pointers are not evil</h2>

<p><code>std::shared_ptr&lt;Node&gt; n = root;</code></p>

<p>We tend to teach people that "you should never use raw pointers". But I find that extremely naive. The <strong>real</strong> rule is "You should never have raw pointers with ownership".</p>

<p>There is absolutely nothing wrong with using raw pointers as long as it's understood that:</p>

<ul>
<li>The pointer only <strong>refers</strong> to the pointed object without owning it.</li>
<li>The lifetime of the pointer assignment to the object is fully enclosed by the lifetime of whatever DOES own the object.</li>
</ul>

<p>In your code using <code>shared_ptr</code>, using the following would have been 100% ok, and much better in my opinion:</p>

<p><code>const Node* n = root.get();</code></p>

<h2>Mark non-mutating functions as const.</h2>

<p>Your <code>search()</code> member function should not alter the trie in any way, so you should mark it as <code>const</code> like this:</p>

<p><code>bool search(const std::string &amp; key) const {</code></p>

<p>There's a few subtle advantages for the compiler, but the main one is that if you goof up and accidentally do something that changes the trie, the compiler will tell you.</p>

<h2>nitpick: <code>private:</code> is redundant here.</h2>

<p>The namespace of a class is private by default. Fun fact: that's the only difference between a <code>class</code> and a <code>struct</code>.</p>

<h2>nitpick: redundant null-checking</h2>

<p>in your search function, when I read the last line:</p>

<p><code>return n &amp;&amp; n-&gt;end;</code></p>

<p>My impression was "Oh! <code>n</code> can be possibly <code>null</code> in certain cases", which led me to search for the scenario where that might be the case. It's misleading to the reader.</p>

<p>Defensive programming can be useful at times, but this is just excessive.</p>
    </div>