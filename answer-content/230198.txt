<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your script is like a <code>var_export()</code>-<code>var_dump()</code> hybrid with flare (I've not come across <code>highlight_string()</code> before -- pretty cool).</p>

<ol>
<li><p>I ran some more tests with a few samples that I had laying around and noticed that your code is having some difficulties accessing the written "resource" branch.  I tested with <code>fopen($filename, 'r')</code>; the <code>var_export()</code> evaluation of a resource is <code>NULL</code> and <code>var_dump()</code> returns <code>resource(5) of type (stream)</code>.  Because your script is founded on <code>var_export()</code>, it will fail to dignify the <code>resource</code> type data, I think you [sh/c]ould remove that from your battery of checks.</p></li>
<li><p>Miscellaneous gotchas include:</p>

<pre><code>['a =&gt; key' =&gt; 'something']
</code></pre>

<p>and</p>

<pre><code>['multiline' =&gt; 'line1
line2']
</code></pre>

<p>These will break your regex-based parsing -- of course, the former is going to be a much less common occurrence versus the latter.</p></li>
<li><p>You can safely remove some useless declarations:</p>

<ul>
<li><code>$Test = [];</code> and <code>$textvar = '';</code></li>
</ul></li>
<li><p>As a general rule, I prefer to never use <code>OR</code> or <code>AND</code> in my conditional statements as a matter of consistency and as a means to avoid fringe precedence issues.</p></li>
<li><p><code>preg_replace("/^([ ]*)(.*)/m", '$1$1$2', $textvar);</code> This pattern/function is over-performing.  It doesn't make any sense to pick up the second capture group, just to put it back down unaltered.  In fact, there is no need for capture groups or character classes for this task.  I will also recommend that you use a consistent pattern delimiter for all patterns in your script. A tilde is a good/popular choice because it shouldn't interfere with any of your patterns and will help to prevent any accidental typos and escaping problems elsewhere.  To double the leading whitespace on each line, just use this (there's no use doubling zero whitespaces, so match one-or-more with <code>+</code>):</p>

<pre><code>preg_replace('~^ +~m', '$0$0', $textvar);
</code></pre></li>
<li><p><code>$textvarArr = preg_split("/\r\n|\n|\r/", $textvar)</code> is more succinctly written as:</p>

<pre><code>$textvarArr = preg_split("~\R~", $textvar)
</code></pre></li>
<li><p>Whenever I see <code>preg_match()</code> called inside of a loop so that replacement actions can be performed, this is a classic indicator that <code>preg_replace_callback()</code> should be called.</p>

<pre><code>$textvarArr = preg_split("~\R~", $textvar);
foreach ($textvarArr as $key =&gt; $value) {
    preg_match('~=&gt;\\s(.*?),~', $value, $newvalue);
    if (!empty($newvalue)) {
        $newvalue[1]      = str_replace("'", "", $newvalue[1]);
        $typeval          = myGetType($newvalue[1]);
        $value            = str_replace("=&gt; ", "=&gt; " . $typeval . ': ', $value);
        $textvarArr[$key] = $value;
    }
}
</code></pre>

<p>can become:</p>

<pre><code>$textvar = preg_replace_callback(
    "~ =&gt; \K\V+(?=,)~", 
    function ($m) {
        return myGetType(str_replace("'", "", $m[0])) . ": {$m[0]}";
    },
    $textvar
);
// then proceed with something like...
$textvarArr = preg_replace(["/\s*array\s\($/", "/\)(,)?$/", "/\s=&gt;\s$/"], [NULL, ']$1', ' =&gt; array ['], preg_split("~\R~", $textvar));
</code></pre></li>
<li><p>I've got to say that this looks a little dangerous...</p>

<pre><code>if (substr($textvar, -1) == '[') {
    $textvar = str_replace("[", "[]", $textvar);
}
</code></pre>

<p>I mean, you are checking the final character, then doing a full text scan and replace operation.  This deserves a bit of double-checking.  Don't you only mean to close the final square brace? Maybe...</p>

<pre><code>if (substr($textvar, -1) == '[') {
    $textvar .= "]";
}
</code></pre></li>
</ol>

<p>I didn't get a chance to properly review (but it could probably use a little polish/simplifying):</p>

<pre><code>$textvarArr = preg_replace(["/\s*array\s\($/", "/\)(,)?$/", "/\s=&gt;\s$/"], [NULL, ']$1', ' =&gt; array ['], preg_split("~\R~", $textvar));
$textvar    = join(PHP_EOL, array_filter(["array ["] + $textvarArr));
</code></pre>

<p>I ran our outputs on a diffchecker program to be sure that my script returns the exact same output as yours.</p>

<p>Overall, an interesting exercise, good job.</p>
    </div>