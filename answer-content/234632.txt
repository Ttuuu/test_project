<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is some advice for your code.</p>

<h3>General recommendations</h3>

<p>1) For readability, I suggest that you change the way that you create your arrays; since the "C-style" array declaration is harder to read and less used in Java, in my opinion.</p>

<p><em>Before</em></p>

<pre class="lang-java prettyprint-override"><code>int y[] = {};
</code></pre>

<p><em>After</em></p>

<pre class="lang-java prettyprint-override"><code>int[] y = {};
</code></pre>

<p>2) In my opinion, I suggest that you wrap the logic of the condition / loop with braces, even if there's only one line of code; this provide consistency and prevent probable bugs if you want to add code to the condition and forget to add the braces.</p>

<p><em>Before</em></p>

<pre class="lang-java prettyprint-override"><code>if (t[i] == 0)
  c++;
</code></pre>

<p><em>After</em></p>

<pre class="lang-java prettyprint-override"><code>if (t[i] == 0) {
  c++;
}
</code></pre>

<h3><code>getWinRate</code> method</h3>

<p>1)  Since the <code>comb</code> is always the same, I sugest that you extract it in a constant.</p>

<pre class="lang-java prettyprint-override"><code>public class AI {
   //[...]
   private static final int[][] COMB = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {1, 4, 7}, {2, 5, 8}, {3, 6, 9}, {1, 5, 9}, {3, 5, 7}};
   //[...]
}
</code></pre>

<p>2) Instead of using a series of <code>if</code> on a value that can have only one of the values, I suggest that you use the <code>if-else</code> or a <code>switch</code> statement and extract the evaluation of <code>t[d]</code> in a variable.</p>

<p><em>Before</em></p>

<pre class="lang-java prettyprint-override"><code>if (t[d] == 2)
   AIwin++;
if (t[d] == 1)
   oppWin++;
if (t[d] == 0)
   empty++;
</code></pre>

<p><em>if-else</em></p>

<pre class="lang-java prettyprint-override"><code>int currentValue = t[d];
if (currentValue == 2)
   AIwin++;
else if (currentValue == 1)
   oppWin++;
else //Zero
   empty++;
</code></pre>

<p><strong>or</strong></p>

<p><em>switch</em></p>

<pre class="lang-java prettyprint-override"><code>switch (t[d]) {
   case 2:
      AIwin++;
      break;
   case 1:
      oppWin++;
      break;
   default: //Zero
      empty++;
      break;
}
</code></pre>

<h3><code>play</code> method</h3>

<p>1) In my opinion, instead of cloning an array, you can use <code>java.util.Arrays#copyOf(int[], int)</code>.</p>

<pre class="lang-java prettyprint-override"><code>   int[] t = Arrays.copyOf(t1, t1.length);
</code></pre>

<p>2) The <code>j</code> variable is unused.</p>

<p>3) I suggest that you use better names for your variable, it makes the code harder to read.</p>

<p>4) In my opinion, you can extract some of the logic into sub-methods.</p>

<p>a) Create a method to calculate the number of available moves.</p>

<pre class="lang-java prettyprint-override"><code>private int calculateNumberOfEmptySpace(int[] game) {
     int nb = 0;

     for (int i = 0; i &lt; 9; i++) {
         if (game[i] == 0) {
             nb++;
         }
     }

     return nb;
 }
 //[...]
void play(int[] t1) {
   int[] copyOfTheGame = Arrays.copyOf(t1, t1.length);
   int numberOfPossibleMoves = calculateNumberOfEmptySpace(t1); 
}
</code></pre>

<p>5) The index in the last loop is not used, you can use a <code>for-each</code></p>

<p><em>Before</em></p>

<pre class="lang-java prettyprint-override"><code>for (i = 0; i &lt; moves.length; i++) {
   boardcopy = t.clone();
   boardcopy[moves[i]] = 2;
   rate = getWinRate(boardcopy);
   if (rate &gt; maxRate) {
     maxRate = rate;
     bestMove = moves[i];
  }
}
</code></pre>

<p><em>After</em></p>

<pre class="lang-java prettyprint-override"><code>for (int move : moves) {
   boardcopy = t.clone();
   boardcopy[move] = 2;
   rate = getWinRate(boardcopy);
   if (rate &gt; maxRate) {
     maxRate = rate;
     bestMove = move;
  }
}
</code></pre>
    </div>