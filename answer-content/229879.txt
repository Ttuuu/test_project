<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Initializing your bingo card</h1>

<p>You don't need to initialize your dictionary with lists, since <code>random.sample</code> returns a list by default. Just iterate through the string <code>"BINGO"</code> to set your keys. Also, the <code>if</code> check doesn't need to happen, you know that you will be replacing the 3rd element of the list at the key <code>'N'</code> every time, so just have that be an instruction at the end:</p>

<pre class="lang-py prettyprint-override"><code>def generate_card():
    """
    Generates a bingo card and stores the numbers in a dictionary.
    """
    # just start with a plain dictionary, random.sample
    # returns a new list, so no need to pre-allocate lists
    # you won't be using in the future
    card = {}

    # min and max are builtin functions, so use
    # underscores to avoid name shadowing
    _min = 1
    _max = 15

    for letter in 'BINGO':
        card[letter] = random.sample(range(_min, _max), 5)
        _min += 15
        _max += 15

    # You know which letter this needs to be, no need for the if block
    card["N"][2] = "X" # free space!
    return card
</code></pre>

<h1>Checking the win condition</h1>

<p>To check over the diagonals, you can use <code>zip</code> for your keys and the indices to validate. For horizontals iterate over <code>card.values()</code> and check <code>all(item == 'X' for item in row)</code>. For columns, you can zip together the rows using argument unpacking.</p>

<p>By iterating over a dictionary, it returns the keys by default, which is why <code>enumerate(dict)</code> is the desired structure here. To check the opposite direction, <code>zip(reversed(range(5)), card)</code> will give you <code>(idx, key)</code> pairs in opposite order in a pythonic way, since <code>dict</code> cannot be reversed:</p>

<pre class="lang-py prettyprint-override"><code># down to the right
# iterating over the dictionary yields the keys
if all(card[k][idx]=='X' for idx, key in enumerate(card)):
   print('win!')
   return True

# up to the right
elif all(card[k][idx]=='X' for idx, key in zip(reversed(range(5)), card)):
   print('win!')
   return True

# horizontal condition
for row in card.values():
    if all(item=='X' for item in row):
        return True

# vertical condition
for column in zip(*card.values()):
    if all(item=='X' for item in column):
        return True
</code></pre>

<p>To show how this works:</p>

<pre class="lang-py prettyprint-override"><code>import random

d = {k: random.sample(range(10), 3) for k in 'abc'}
# {'a': [5, 3, 7], 'b': [1, 8, 7], 'c': [4, 5, 8]}

# diagonal
for idx, key in enumerate(d):
    print(key, d[key][idx])
a 5
b 8
c 8


# opposite diagonal
for idx, key in zip(reversed(range(3)), d):
    print(key, d[key][idx])
a 7
b 8
c 4


# rows
for row in d.values():
    print(row)

[5, 3, 7]
[1, 8, 7]
[4, 5, 8]

for col in zip(*d.values()):
    print(col)

(5, 1, 4)
(3, 8, 5)
(7, 7, 8)
</code></pre>

<p>Also, the <code>return True</code> on all of the conditions means that the function will stop once a winning condition is hit, rather than going through all of the conditions when you really don't need to. This is called short-circuiting, meaning that you only evaluate up to the desired condition.</p>

<p>Looking at this a bit further, I'd probably refactor the row and column check into a different function:</p>

<pre class="lang-py prettyprint-override"><code>def check_line(values):
    """
    values is an iterable over either rows or columns
    of the card. Should be iterable(str)

    returns boolean
    """
    for line in values:
        if all(val=='X' for val in values):
            return True

# the last two loops then look like:
elif check_line(card.values()):
    return True

elif check_line(zip(*card.values())):
    return True

return False

</code></pre>

<h1>Class?</h1>

<p>The fact that you're passing <code>card</code> around to a lot of functions says (to me) that you could probably use a class here. The <code>generate_card</code> method can be done on <code>__init__</code>, and everything else takes a <code>self</code> rather than a <code>card</code>:</p>

<pre class="lang-py prettyprint-override"><code>
class BingoCard:

    def __init__(self, _min=1, _max=15):
        """
        Generates a bingo card and stores the numbers in a dictionary.
        _min and _max are integers that default to 1 and 15
        if a default game is desired
        """

        # just start with a plain dictionary, random.sample
        # returns a new list, so no need to pre-allocate lists
        # you won't be using in the future
        self.card = {}

        for letter in 'BINGO':
            self.card[letter] = random.sample(range(_min, _max), 5)
            _min += 15
            _max += 15

        # You know which letter this needs to be, no need for the if block
        self.card["N"][2] = "X" # free space!
        # __init__ doesn't return anything

    # this makes your card printable
    # and requires you return a string
    def __str__(self):
        return '\n'.join('\t'.join((letter, *map(str, values))) for letter, values in self.card.items())


    def draw(self, random_draw_list):
        """
        Pops a number off a list of random numbers. Using the pop method ensures no duplicate
        numbers will be drawn.

        Arguments:
            self (dictionary): The card to to check for the number that was drawn.
            list (list): The list of random numbers to be drawn from.
        """
        number_drawn = random_draw_list.pop()
        for letter in self.card:
            # don't track an index here, use enumerate
            for i, number in enumerate(self.card[letter]):
                if number == number_drawn:
                    self.card[letter][i] = "X"
        return number_drawn


    def check_win(self):
        # down to the right
        if all(self.card[k][idx]=='X' for idx, key in enumerate(self.card)):
           print('win!')
           return True

        # up to the right
        elif all(self.card[k][idx]=='X' for idx, key in zip(reversed(range(5)), self.card)):
           print('win!')
           return True

        # horizontal condition
        elif self.check_line(self.card.values()):
            return True

        # vertical condition
        elif self.check_line(zip(*self.card.values())):
            return True

        return False


    @staticmethod
    def check_line(values):
        """
        values is an iterable over either rows or columns
        of the card. Should be iterable(str)

        returns boolean
        """
        for line in values:
            if all(val=='X' for val in values):
                return True



# then, your bingo card is an instance of this class

card = BingoCard()

card.check_win()
# False
</code></pre>

<p>The <code>__str__</code> function is outlined in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">python data model</a>, but the gist of it is that <code>__str__</code> allows you to redefine what the informal string representation of an object looks like. </p>

<h1><code>random_draw_list</code></h1>

<p>To make this work, I'd add it as a condition on your <code>while</code> loop. You <code>pop</code> elements off of it, but what happens when there's nothing else to <code>pop</code>? You will get an <code>IndexError</code> for attempting to <code>pop</code> from an empty list. To make the game re-playable, I'd have the user choose to re-play, and generate that new list on each play, just as you re-create the bingo card on each play:</p>

<pre class="lang-py prettyprint-override"><code>def generate_random_list():
    return random.sample(range(1, 76), 75)


def main():
    card = BingoCard()
    # generate the draw list here, on each play of the game
    # that way if you run out of balls, you can handle that by restarting
    # the game
    random_draw_list = generate_random_list()

    print(f"This is your card:\n {card}")

    # you don't need the user input here, I think it might
    # be better to include it elsewhere, before generating the
    # card. Instead, keep going while there are numbers to draw
    while random_draw_list:
        number_drawn = card.draw(random_draw_list)
        # this variable is better named balls_drawn
        balls_drawn += 1

        print(f"You drew {number_drawn}")
        print(f"Total balls drawn: {balls_drawn}")

        if check_win(card):
            print(f"You won after drawing {balls_drawn} balls!")
            break

        # if you were to check for user input during the game,
        # it would make more sense to do that after you've at least
        # checked one round
        keep_playing = input("Keep playing? (y/n)").strip().lower()
        if keep_playing == 'n':
            print("Ok, thanks for playing")
            break
    else:
        print("Sorry, there are no more balls to draw")


# This is where you prompt the user to play:
if __name__ == "__main__":
    while True:
        play = input("Would you like to play bingo? (y/n)")
        if play.strip().lower() == 'y':
            main()
        else:
            break


</code></pre>
    </div>