<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The <code>Tuple&lt;T1, T2&gt;</code> type is a reference type requiring to create objects on the heap, what puts strain on the GC. Use a value type, i.e. a struct type. Use the new <code>ValueTuple</code> type or an existing point or vector type or create your own struct. In public API's dedicated types are preferred over tuple types.</p></li>
<li><p>You are testing <code>x1 == x2 &amp;&amp; y1 == y2</code>. This is a bit hazardous, since <code>double</code> values are subject to tiny rounding errors. Define a minimum allowed difference.</p>

<pre><code>private const double Eps = 1e-6;

if (Math.Abs(x2 - x1) &lt; Eps &amp;&amp; Math.Abs(y2 - y1) &lt; Eps) 
</code></pre></li>
<li><p>Parentheses are superfluous here. The assignment operator has always the lowest <a href="https://docs.microsoft.com/en-us/cpp/c-language/precedence-and-order-of-evaluation?view=vs-2019" rel="nofollow noreferrer">precedence</a> (except sequential evaluation with <code>,</code>).</p>

<pre><code>double xi = x2 - x1;
</code></pre></li>
<li><p>You could make the divider dependent on the distance between the points. Doing this creates a more uniform camera speed. If you want to keep the original relative speeds, don't do this.</p></li>
<li><p>Don't repeat long type names. Use <code>var</code> instead.</p>

<pre><code>var points = new List&lt;Tuple&lt;double, double&gt;&gt;();
</code></pre>

<p>When to use <code>var</code> is a matter of preference. My rules are:</p>

<ul>
<li>If the type is explicitly visible (as here after the <code>new</code> keyword) or is otherwise obvious, use <code>var</code>.</li>
<li>Don't use <code>var</code> for primitive types like <code>int</code>, <code>string</code>, or <code>double</code>.</li>
<li>LINQ expressions often return complex nested types involving <code>IOrderedEnumerable</code> and <code>IGrouping</code> etc. nobody wants to know. These types are mostly used for temporary results either. Use <code>var</code> here.</li>
<li>Anonymous types have no name and require <code>var</code>. <code>var a = new { Id = 1, Value = 1.4 };</code>. It's the main reason the <code>var</code> keyword has been introduced.</li>
</ul></li>
</ul>
    </div>