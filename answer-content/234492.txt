<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Check return values for errors</h2>

<p>The call <code>scanf</code> can fail.  You must check the return values to make sure it hasn't or your program may crash (or worse) when given malformed input or due to low system resources.  Rigorous error handling is the difference between mostly working versus bug-free software.  You should strive for the latter.</p>

<h2>Decompose your program into functions</h2>

<p>Almost all of the logic here is in <code>main</code> in one rather long and dense chunk of code.  It would be better to decompose this into separate functions.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  In this particular case, I happen to think it's perfectly appropriate because it's a single short program that and not a header. Some people seem to think it should never be used under any circumstance, but my view is that it can be used as long as it is done responsibly and with full knowledge of the consequences.  </p>

<h2>Use <code>&lt;cstdio&gt;</code> instead of <code>&lt;stdio.h&gt;</code></h2>

<p>The difference between the two forms is that the former defines things within the <code>std::</code> namespace versus into the global namespace.  Language lawyers have lots of fun with this, but for daily use I'd recommend using <code>&lt;cstdio&gt;</code>.  See <a href="http://stackoverflow.com/questions/8734230/math-interface-vs-cmath-in-c/8734292#8734292">this SO question</a> for details.</p>

<h2>Prefer <code>iostream</code> to old-style <code>printf</code></h2>

<p>The <code>iostream</code> library is the more modern C++ way to do I/O.  Prefer it over <code>printf</code> and <code>scanf</code>.  So instead of this:</p>

<pre><code>printf("%d + %d = %d", a, b, zbroj);
</code></pre>

<p>Write this: </p>

<pre><code>std::cout &lt;&lt; a &lt;&lt; " + " &lt;&lt; b &lt;&lt; " = " &lt;&lt; zbroj &lt;&lt; '\n';;
</code></pre>

<p>See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rio-streams" rel="noreferrer">SL.io.3</a> for details.</p>

<h2>Initialize variables before use</h2>

<p>The <code>mod</code> variable is printed before it is set to any value.  That is not likely to be useful.  Better is to always make sure that all variables are initialized before using them.</p>

<h2>Use constant string concatenation</h2>

<p>This code currently includes these lines:</p>

<pre><code>cout &lt;&lt; "U kojem modu kalkulatora zelis biti? \n" &lt;&lt; mod;
cout &lt;&lt; "Mod 1 je za zbrajanje \n";
cout &lt;&lt; "Mod 2 je za oduzimanje \n";
cout &lt;&lt; "Mod 3 je za mnozenje \n";
cout &lt;&lt; "Mod 4 je za dijeljenje \n";
</code></pre>

<p>I would suggest writing it instead like this:</p>

<pre><code>std::cout &lt;&lt; 
    "U kojem modu kalkulatora zelis biti? \n" 
    "Mod 1 je za zbrajanje \n"
    "Mod 2 je za oduzimanje \n"
    "Mod 3 je za mnozenje \n"
    "Mod 4 je za dijeljenje \n";
</code></pre>

<p>Since the next line happens to be <code>scanf</code>, I'd suggest instead using your <code>prompt</code> function.</p>

<h2>Consider using more idiomatic C++</h2>

<p>While your use of <code>and</code> and <code>not</code> is not techncially wrong, you should be aware that many experienced C++ programmers will be unfamiliar with these operator alternatives, and so if others read your code, it might be an impediment to their understanding of the code.  </p>

<h2>Eliminate redundant variables</h2>

<p>I don't speak Croatian, but the variable names are good in that they accurately describe what the variables mean in the context of the program.  However, I would suggest that instead of <code>zbroj, razlika, umnozak, kolicnik</code> you could use a single variable <code>rezultat</code>.</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>The mathematical operations in the <code>case</code> statement all include very similar repeated code.  Instead of repeating code, it's generally better to make common code into a function.  The only thing that varies is the prompt, the mathematical operation and the way the result is printed.  An advanced technique would be to gther them all into a data structure.  If you're just beginning, don't worry if you can't understand this yet.  It uses <a href="https://en.cppreference.com/w/cpp/language/lambda" rel="noreferrer">lambda expressions</a> and C++17 <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="noreferrer"><code>std::string_view</code></a> among other things.  I am putting it here to show how powerful C++ can be:</p>

<pre><code>#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;string_view&gt;
#include &lt;array&gt;

int prompt(const char* name) 
{
    std::cout &lt;&lt; name;
    int value;
    std::cin &gt;&gt; value;
    return value;
}

int main()
{   

    struct MathOp {
        std::string_view opname;
        int (*operate)(int a, int b);
        std::string_view opsymbol;

        void operator()() const {
            std::cout &lt;&lt; "Odabrali ste " &lt;&lt; opname &lt;&lt; "!\n";
            int a = prompt("a: ");
            int b = prompt("b: ");
            int rezultat = operate(a, b);
            std::cout &lt;&lt; a &lt;&lt; opsymbol &lt;&lt; b &lt;&lt; " = " &lt;&lt; rezultat &lt;&lt; '\n';
        }

    };

    constexpr std::array&lt;MathOp, 4&gt; op{{
        { "zbrajanje", [](int a, int b){ return a+b; }, " + " },
        { "oduzimanje", [](int a, int b){ return a-b; }, " - " },
        { "mnozenje", [](int a, int b){ return a*b; }, " * " },
        { "dijeljenje", [](int a, int b){ 
                if (b == 0) {         
                    std::cout &lt;&lt; "dijeljenje s nulom \n";
                    return 0;
                } 
                return a/b;
            }, " / " },
    }};

    std::cout &lt;&lt; "U kojem modu kalkulatora zelis biti? \n";
    for (std::size_t i{0}; i &lt; op.size(); ++i) {
        std::cout &lt;&lt; "Mod " &lt;&lt; i+1 &lt;&lt; " je za " &lt;&lt; op[i].opname &lt;&lt; "\n";
    }
    unsigned mod;
    std::cin &gt;&gt; mod;

    if (mod &gt; 0 &amp;&amp; mod &lt;= op.size()) {
        op[mod-1]();
    } else {
        std::cout &lt;&lt; "Nemamo tu opciju trenutno, prcekajte za nadogradnju programa, ili se javite developeru! \n";
    }
}
</code></pre>

<p>Now if we want to add exponentiation, for example, all we need to do is add a single line to the <code>op</code> array:</p>

<pre><code>{ "eksponenciju", [](int a, int b){ return static_cast&lt;int&gt;(std::pow(a,b)); }, " ** " },
</code></pre>
    </div>