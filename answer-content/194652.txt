<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Coding style</h3>

<p>There is a well-established coding style for Python, the 
<a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8 coding style</a>,
and conformance to that style can be checked online at
<a href="http://pep8online.com" rel="noreferrer">PEP8 online</a>.</p>

<p>In your case it reports “missing space around operator” in almost every
code line.</p>

<h3>Variable names</h3>

<p><code>x</code>, <code>y</code>, <code>z</code> are meaningless variable names, and <code>adjdigit</code> isn't
self-explaining either.</p>

<h3>Magic numbers</h3>

<p>The number <code>1000</code> in</p>

<pre><code>while y&lt;=1000:
</code></pre>

<p>is the string length – which might not be obvious to the reader, and is
error-prone if you change the given number. It should be <em>computed</em> from
the string instead.</p>

<h3>Global variables</h3>

<p>You pass the number of adjacent digits as an argument to the function,
but the big number itself is a global variable. Passing <em>both</em> parameters
to the function makes it easier to add unit tests.</p>

<h3>Simplify the program logic</h3>

<p>You reset <code>count</code>, <code>product</code>, and <code>z</code> each time <em>after</em> a product is computed,
this seems unnecessary complicated to me. </p>

<pre><code>    z = str(number)[x:y]
    product = 0
    for i in z:
        product *= int(i)
    yield product
</code></pre>

<p>would be easier to understand and also makes the <code>count</code> variable obsolete.</p>

<p>The iteration over all possible start/end positions is better done with
a for loop.</p>

<h3>Avoid unnecessary conversions</h3>

<p>In your code, the big number is converted to a string repeatedly, it would be
sufficient to convert it only once. You could even provide the given number as
a string directly.</p>

<p>The substring <code>z</code> is also not needed because we can access a character from
the original string directly.</p>

<h3>Putting it together</h3>

<p>Summarizing the suggested changes so far, the generator-based version could
look like this:</p>

<pre><code>def products(number, num_digits):
    for start_index in range(0, len(number) - num_digits):
        product = 1
        for i in range(start_index, start_index + num_digits):
            product *= int(number[i])
        yield product


def max_product(number, num_digits):
    return max(products(number, num_digits))


if __name__ == "__main__":
    large_number = "73167176531330624919225119674426574742355349194934969" \
        "8352031277450632623957831801698480186947885184385861560789112949" \
        "4954595017379583319528532088055111254069874715852386305071569329" \
        "0963295227443043557668966489504452445231617318564030987111217223" \
        "8311362229893423380308135336276614282806444486645238749303589072" \
        "9629049156044077239071381051585930796086670172427121883998797908" \
        "7922749219016997208880937766572733300105336788122023542180975125" \
        "4540594752243525849077116705560136048395864467063244157221553975" \
        "3697817977846174064955149290862569321978468622482839722413756570" \
        "5605749026140797296865241453510047482166370484403199890008895243" \
        "4506585412275886668811642717147992444292823086346567481391912316" \
        "2824586178664583591245665294765456828489128831426076900422421902" \
        "2671055626321111109370544217506941658960408071984038509624554443" \
        "6298123098787992724428490918884580156166097919133875499200524063" \
        "6899125607176060588611646710940507754100225698315520005593572972" \
        "571636269561882670428252483600823257530420752963450"
    print(max(products(large_number, 13)))
</code></pre>

<h3>To generate or not to generate ...</h3>

<p>I don't think there is much difference with respect to efficiency.
Your second “non-generator” version does not occupy more space because
each product is immediately compared against the current maximum, and not
stored in a list.</p>

<p>The advantage of the generator-based version is that the two tasks</p>

<ul>
<li>generating all possible products,</li>
<li>determining the maximum</li>
</ul>

<p>are clearly separated.</p>

<h3>Performance improvements</h3>

<p>Every substring is converted to a number by iterating over all of its
characters. This can be improved by <em>updating</em> the product instead,
this “sliding windows technique” is described for example in</p>

<ul>
<li><a href="https://codereview.stackexchange.com/questions/58535/efficiency-on-project-euler-problem-8/58539#58539">Efficiency on Project Euler Problem #8</a></li>
<li><a href="https://codereview.stackexchange.com/questions/82976/project-euler-8/82977#82977">Project Euler #8</a></li>
</ul>
    </div>