<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The slowest parts are usually the multiple calls between VBA and Excel. The main approach to that is to get all contiguous data at once into array, and put it back all at once when done. <strong>But!</strong> Excel calculations can be done in <a href="https://msdn.microsoft.com/en-us/library/office/bb687899.aspx" rel="nofollow noreferrer">parallel on multiple threads</a>, and VBA is limited to one thread. Meaning that for a big range, using Excel formulas can be faster than VBA loops over arrays.</p>

<p>For example:</p>

<pre><code>For i = 2 To 5 'lrQuantity
    With wsQuantity
        .Cells(i, 5) = .Cells(i, 1) &amp; .Cells(i, 2)
        .Cells(i, 6) = .Cells(i, 1) &amp; UCase(.Cells(i, 2).Value) &amp; .Cells(i, 3)
    End With
Next i
</code></pre>

<p>can be shortened to:</p>

<pre><code>wsQuantity.Range("E2:E5") = wsQuantity.Evaluate("index(A2:A5 &amp; B2:B5,)")
wsQuantity.Range("F2:F5") = wsQuantity.[index(A2:A5 &amp; Upper(B2:B5) &amp; C2:C5,)]   ' [] is short for Evaluate("")
</code></pre>

<p>or:</p>

<pre><code>With wsQuantity.Range("E2:F5")
    .Formula = Array("= A2 &amp; B2", "= A2 &amp; Upper(B2) &amp; C2")  ' relative references (no $) are auto adjusted
    .Value2 = .Value2                                       ' optional to convert the formulas to values
End With
</code></pre>

<hr>

<p>As a side note, I couldn't comprehend more than a page of what the code is doing, but in most cases VBA is not the best approach for aggregating data. There are other alternatives in Excel that are a bit easier than SQL queries like Power Query, Microsoft Query, and in some cases even PivotTable that can get the process down to minutes. I would highly recommend looking into Power Query if your Excel version supports it, as you can use most of it even after moving the process to a database system.</p>
    </div>