<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>API</h3>

<ul>
<li>Calling code has to pass input to <code>CommandLineParser</code>'s constructor, but do the actual parsing with <code>ParseAll</code>. Calling <code>ParseAll</code> a second time then returns an empty output. A static <code>CommandLineParser.Parse(input)</code> method that creates that instance internally would be more sensible.</li>
<li>It's not clear what syntax this parser supports. Both <code>"/?"</code> and <code>"--file C:\test.txt"</code> result in a <code>FormatException: Illegal character in argument</code>. It's a good idea to document this for the users of your API.</li>
<li>Likewise, it's not clear what constructs are supported. It looks like every switch must have one or more values? Except when it's the last switch? And switches can have multiple groups of multiple values?</li>
<li><code>"-switch arg"</code> results in a <code>FormatException: Illegal character in switch: w</code>. <code>"-h1 arg"</code> fails in a similar manner, and so do <code>"-a=b"</code> and <code>"-a:b"</code>. Not to mention other languages like <code>"-Âè∑ 123"</code>.</li>
<li>The API is relatively low-level, with callers having to search through a list of switches and arguments and having to remove hyphens and quotes. A higher-level approach that lets callers describe the options that they support would be more useful. It may also be a good idea to support multiple input formats, such as <code>-f</code>, <code>/f</code> and <code>--file</code>, and have them all map to the same <code>file</code> option.</li>
<li>Switch arguments are not very intuitive due to their <code>IArgument</code> type. Why not use a simple array of strings instead?</li>
</ul>

<h3>Lexer</h3>

<ul>
<li>It's clear that a lot of care went into the lexer. Good first impression.</li>
<li>I'd remove some of the field comments - names like <code>_reader</code> and <code>_currentToken</code> are descriptive enough on their own.</li>
<li><code>_currentToken</code> should probably be named <code>_nextToken</code> or <code>_peekedToken</code>.</li>
<li><code>ReadCharacter</code> doesn't check if <code>_reader</code> is exhausted (<code>_reader.Read() == -1</code>).</li>
<li><code>Next</code> and <code>Peek</code> can throw an <code>EndOfStreamException</code> if there's nothing left. You may want to document that.</li>
<li><code>ReadArg</code> and <code>ReadSwitch</code> create a list of allowed characters on every call. Those lists should be static, but Linq's <code>Contains</code> method also allows you to work with just strings. Still, a whitelist approach is very restrictive. I'd go for blacklisting specific characters or perhaps specific Unicode categories.</li>
<li><code>TextReader</code> should be disposed after use.</li>
</ul>

<h3>Parser</h3>

<ul>
<li>I'd rename <code>parsed</code> to <code>expressions</code> and <code>Parse</code> to <code>ParseExpression</code>.</li>
<li><code>Parse</code> gets stuck in its <code>while</code> loop when a switch is followed by another switch. Parsing <code>"-a -b"</code> never ends.</li>
<li><code>ExpectOneOf</code> joins the string <code>"terminals"</code>, instead of the parameter <code>terminals</code>. This results in a not very helpful exception message.</li>
</ul>

<h3>Arguments</h3>

<ul>
<li><code>CommandLineExpression</code>, <code>CommandLineArgumentList</code> and <code>CommandLineArgument</code> look like you intended them to be immutable. That's a good idea. There's one problem though: those <code>IList</code> properties may not be settable, but they are mutable. <code>IReadOnlyList</code> is better.</li>
<li>Regarding <code>CommandLineExpression.Equals</code>:

<ul>
<li>Why do you need an equality check for this? If it's useful, why not also implement <code>IEquatable&lt;CommandLineExpression&gt;</code>?</li>
<li>If you override <code>Equals</code>, you're also supposed to override <code>GetHashCode</code>.</li>
<li>I don't expect <code>Equals</code> to throw, and throwing an <code>ArgumentNullException</code> when <code>obj</code> is of a different type is misleading.</li>
<li>This method can indeed be simplified a lot. Implement <code>Equals</code> in both <code>CommandLineArgumentList</code> and <code>CommandLineArgument</code>, so you can use <code>Enumerable.SequenceEqual</code> to compare the <code>Args</code> lists.</li>
<li>Instead of <code>if (condition) { ... } else { return ..; }</code>, you can use early-out returns to reduce nesting depth: <code>if (!condition) return ..; ...</code>. This often makes code easier to read.</li>
</ul></li>
<li><code>IArgument</code> and the classes that implement it seem more complicated than necessary. What's the use of <code>"-a 1,2 3,4"</code> returning a list of argument-lists? How do callers know that they won't have to process a tree of arbitrary depth?</li>
</ul>

<h3>Tests</h3>

<ul>
<li>In <code>ParseSwitchNoArgumentTest</code>, <code>parser.ParseAll().ToList()[0]</code> can be simplified to <code>parser.ParseAll().First()</code>. However, what if the result is empty, or what if it contains extra unexpected items? It's better to compare the whole result instead of picking the first item.</li>
<li>The next test is poorly named. It can also be simplified by writing a few helper methods that can create (lists of) expressions and arguments. <code>params</code> is useful here.</li>
<li>I don't have XUnit here to verify, but in that test it looks like you're comparing each expression against the full list of expected expressions. Also, the names of the first switch items don't match. Are these tests actually passing?</li>
</ul>
    </div>