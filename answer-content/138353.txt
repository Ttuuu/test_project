<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The Good</h2>

<p>The choice of variable and function names is very descriptive.
The code is properly indented. The consistent use of camelCase is excellent.</p>

<h2>MAGIC NUMBERS</h2>

<p>The term Magic Numbers refers to numerical constants in the code. A good programming practice is to
used named constants rather than numbers. Named constants make the code more self documenting, and
allow easier modification of the code. When a named constant is used, the code only needs to be
changed in one location rather than multiple locations. An example of this in the code would be to
increase or decrease the size of the arrays.</p>

<p>Example Named Constants:  </p>

<pre><code>#define ARRAY_SIZE    4
#define STRING_SIZE   10
#define RED           1
#define YELLOW        2
#define GREEN         3
#define BLUE          4
#define BLACK         5
#define WHITE         6
#define MAX_GUESS     12


void makeCode(char secretCode[ARRAY_SIZE][STRING_SIZE])
{
    int i, randColor;
    for(i=0; i&lt;ARRAY_SIZE; i++)
    {
        randColor = 1 + rand() % 6;     //creates a number
        switch(randColor)       //converts number created to a string
        {
            case RED:
                strcpy(secretCode[i], "red");
                break;
            case YELLOW:
                strcpy(secretCode[i], "yellow");       
                break;
            case GREEN:
                strcpy(secretCode[i], "green");       
                break;
            case BLUE:
                strcpy(secretCode[i], "blue");       
                break;
            case BLACK:
                strcpy(secretCode[i], "white");       
                break;
            case WHITE:
                strcpy(secretCode[i], "black");       
                break;
        }
    }
}

void displayGuess(char guessCode[ARRAY_SIZE][STRING_SIZE], int blackPeg, int whitePeg)
{
    int i;
    printf("\nYour Guess\t\t\t\tYour Score\n");
    for(i=0; i &lt; ARRAY_SIZE; i++)
        printf("%s ", guessCode[i]);
    printf("\t\t");
    for(i=0; i&lt;blackPeg; i++)
        printf("black ");
    for(i=0; i&lt;whitePeg; i++)
        printf("white ");
    printf("\n\n");
}
</code></pre>

<p><em>Note:</em> The code above would be more efficient if you had an array of color strings and indexed into the
the array using <code>randColor</code> as follows:</p>

<pre><code>void makeCode(char secretCode[ARRAY_SIZE][ARRAY_SIZE])
{
    int i, randColor;
    char *secretCodeColors[] =
        {
            "red",  // Multiple lines used to make it easier to add colors.
            "yellow",
            "green",
            "blue",
            "black",
            "white",
        };

    for(i=0; i&lt;4; i++)
    {
        randColor = rand() % 6;
        strcpy(secretCode[i], secretCodeColors[randColor]);
    }
}
</code></pre>

<p>Not only does it make the function shorter, but indexing into the array is faster than the <code>switch</code> statement.</p>

<p>@MegaTom is correct; this code would be better using enums or named constants. The string compares are much
less efficient that integer compares.</p>

<h2>Multiple Statements on a Line</h2>

<p>To make future modifications easier, there should never be multiple statements on a single line. Let's say
some code needed to be added to each case in the <code>switch</code> statement. Each of the cases in the <code>switch</code> statement
would then be need to be broken into multiple lines which makes the edit more complex, and can create typos
during the edit. It is much easier to just add another statement by adding a single line, rather than
trying to add it to a single line.</p>

<pre><code>            case 1: strcpy(secretCode[i], "red");       break;
            case 1:
                strcpy(secretCode[i], "red");       
                break;
</code></pre>

<p>Generally it is better to assume that code will need to edited at some time in the future to add features or
fix bugs.</p>

<h2>Prefer <code>return</code> over <code>exit()</code></h2>

<p>In the case of this program, since there is no error checking, there is no reason to use either <code>exit()</code> or <code>return</code>.
If there is error handling in the program, the <code>exit()</code> function should only be used if the program encounters an
error it can't correct deep in multiple function calls. The <code>exit()</code> function should only be used in standalone
programs, never in operating systems code. When using the <code>exit()</code> function, use the macros <code>EXIT_SUCCESS</code> and
<code>EXIT_FAILURE</code> that are defined in <code>&lt;stdlib.h&gt;</code>.</p>

<h2>Don't Repeat Yourself</h2>

<p>When code is repeating itself, it is better to write another function rather than repeating the code. Then the
code only needs to be written and debugged once rather than multiple times. This is known as the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY principle</a> in software engineering. </p>

<h3>Example:</h3>

<p>The following code has loops that repeat:</p>

<pre><code>void displayGuess(char guessCode[ARRAY_SIZE][STRING_SIZE], int blackPeg, int whitePeg)
{
    int i;
    printf("\nYour Guess\t\t\t\tYour Score\n");
    for(i=0; i &lt; ARRAY_SIZE; i++)
        printf("%s ", guessCode[i]);
    printf("\t\t");
    for(i=0; i &lt; blackPeg; i++)
        printf("black ");
    for(i=0; i &lt; whitePeg; i++)
        printf("white ");
    printf("\n\n");
}

void showPeg(int pegCount, char *colorString)
{
    for (i = 0; i &lt; pegCount; i++)
        printf(colorString);
}

void displayGuess(char guessCode[ARRAY_SIZE][STRING_SIZE], int blackPeg, int whitePeg)
{
    int i;
    printf("\nYour Guess\t\t\t\tYour Score\n");
    for(i=0; i &lt; ARRAY_SIZE; i++)
        printf("%s ", guessCode[i]);
    printf("\t\t");
    showPeg(blackPeg, "black ");
    showPeg(whitePeg, "white ");
    printf("\n\n");
}
</code></pre>

<h2>Decrease Function Complexity</h2>

<p>Another software engineering principle is the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a>. 
A function should only be responsible for one action; this makes each function easier to read, write, debug and
use multiple times. It is much better to write smaller more concise functions that can be used in multiple
places and only need to be debugged once. The functions <code>codeCheck()</code> and <code>main()</code> would both benefit from
applying this principle.</p>

<h2>General Comments</h2>

<p>The program should guide the user better. It's not clear what the input should be; there should be
prompts for each input. The program might be more fun if the user could enter colors rather than
numbers.</p>
    </div>