<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>U can go forward.</p>

<p><a href="https://i.stack.imgur.com/JVlJk.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/JVlJk.png" alt="111"></a></p>

<p>To simplify the question, you can handle the top part like this</p>

<pre><code>protocol SideH: class{

    var headline: UILabel! {get set}
    var arrow: UIImageView! {get set}
    var line: UIView! {get set}

    // provided by UIViewController
    var view: UIView! { get }

}



extension SideH{


    func layout(t title: String){
        view.backgroundColor = UIColor.white
        headline = { () -&gt; UILabel in
            let lbl = UILabel()
            lbl.font = UIFont.regular(ofSize: 18)
            lbl.textColor = UIColor.textHeavy
            lbl.textAlignment = .center
            lbl.text = title
            return lbl
        }()


        arrow = { () -&gt; UIImageView in
            let img = UIImageView()
            img.image = UIImage(named: "mine_fork")
            img.isUserInteractionEnabled = true
            return img
        }()

        line = {
            let string = UIView()
            string.backgroundColor = UIColor(rgb: 0xD8D8D8)
            return string
        }()

        ///

        view.addSubs([headline, arrow, line])

        headline.snp.makeConstraints { (maker) in
            maker.centerX.equalToSuperview()
            maker.top.equalToSuperview().offset(20)
            maker.size.equalTo(CGSize(width: 80 + 15, height: 25))
        }

        arrow.snp.makeConstraints { (maker) in
            maker.size.equalTo(CGSize(width: 30, height: 30))
            maker.top.equalToSuperview().offset(17)
            maker.leading.equalToSuperview().offset(16)
        }

        line.snp.makeConstraints { (maker) in
            maker.leading.trailing.equalToSuperview()
            maker.height.equalTo(1)
            maker.top.equalToSuperview().offset(63)
        }

    }


    func back(){
        if let ctrl = view.parentViewController{
            let tap = UITapGestureRecognizer()
            arrow.addGestureRecognizer(tap)

            tap.rx.event.bind { (event) in
                NotificationCenter.default.post(name: .close, object: nil)
            }.disposed(by: ctrl.rx.disposeBag)
        }

    }

}
</code></pre>

<p>The <code>RxSwift</code> part is a little anoying.</p>

<p>If u call it in <code>UIViewController</code>, </p>

<pre><code>  // self.rx.disposeBag, or self has a DisposeBag
  tap.rx.event.bind { (event) in
               }.disposed(by: rx.disposeBag)
</code></pre>

<p>extension code part:</p>

<pre><code>extension UIView {
    var parentViewController: UIViewController? {
        var parentResponder: UIResponder? = self
        while parentResponder != nil {
            parentResponder = parentResponder?.next
            if let viewController = parentResponder as? UIViewController {
                return viewController
            }
        }
        return nil
    }
}


extension UIView{


    func addSubs(_ views: [UIView]){
        views.forEach(addSubview(_:))
    }

}


extension Notification.Name {
      static let close = Notification.Name("close")
}
</code></pre>

<p>call like this:</p>

<pre><code>class OnUs: UIViewController, SideH{
    // the 3 props, just decorates
    var headline: UILabel!
    var arrow: UIImageView!
    var line: UIView!

    override func viewDidLoad() {
        super.viewDidLoad()
        layout(t: "关于我们")

        back()

    }
</code></pre>

<p>now u had UI Appearance, UI layout , target action with ( RxSwift, <code>NSObject+Rx</code>)</p>
    </div>