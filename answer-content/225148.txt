<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I read it as one long <code>AND</code> operation where the result is the articles that satisfy all the valid predicates. You could therefore build an enumerable of valid predicates in an extension method:</p>

<pre><code>  public static class ArticleFilterExtensions
  {
    public static IEnumerable&lt;Predicate&lt;Article&gt;&gt; GetValidPredicates(this ArticleFiltersModel filter)
    {
      if (filter.IsAvailable.HasValue)
        yield return a =&gt; a.IsAvailable == filter.IsAvailable;
      if (!string.IsNullOrWhiteSpace(filter.Name))
        yield return a =&gt; a.Title.Contains(filter.Name);
      if (filter.AreaFrom.HasValue)
        yield return a =&gt; a.House.Area &gt;= filter.AreaFrom;
      // etc.

      if (filter.WithHomeAppliances.HasValue)
        yield return a =&gt; a.House.WithHomeAppliances == filter.WithHomeAppliances;
    }
  }
</code></pre>

<p>And your filter method could then be reduced to:</p>

<pre><code>private void Filter(ref IQueryable&lt;Article&gt; articles, ArticleFiltersModel filters)
{
  var predicates = filters.GetValidPredicates().ToList();
  articles = articles.Where(a =&gt; predicates.All(p =&gt; p(a)));
}
</code></pre>

<p>You could then easily create an <code>OR</code> filter as </p>

<pre><code>private void OrFilter(ref IQueryable&lt;Article&gt; articles, ArticleFiltersModel filters)
{
  var predicates = filters.GetValidPredicates().ToList();
  articles = articles.Where(a =&gt; predicates.Any(p =&gt; p(a)));
}
</code></pre>

<p>`</p>
    </div>