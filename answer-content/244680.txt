<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Don't use <code>std::endl</code></h1>
<p>Use <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n"><code>"\n"</code> instead of <code>std::endl</code></a>. The latter is equivalent to <code>"\n"</code>, but also forces a flush of the output stream, which can be bad for performance.</p>
<h1>Don't confuse getting a value with printing a value</h1>
<p>You have functions like <code>int GetPrice()</code>, that look like they return the price as an <code>int</code>. However, in your implementation, you actually print the price to the screen, and return nothing. Either don't print and return the price, or rename the function <code>void PrintPrice()</code> and return nothing.</p>
<p>It's usually better to just return the value instead of printing them. The caller can then decide if they want to print the value, and if so how.</p>
<h1>Consider adding <code>operator&lt;&lt;</code> overloads for printing</h1>
<p>It's always best to make classes behave like standard types. When printing something, wouldn't it be nice if you could write the following?</p>
<pre><code>FrozenPizza fp(1, 2, 3);
std::cout &lt;&lt; fp;
</code></pre>
<p>You can if you create a <code>friend operator&lt;&lt;()</code>, like so:</p>
<pre><code>class FrozenPizza: public FrozenFood {
    ...
    public:
    friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const FrozenPizza &amp;fp);
};

std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const FrozenPizza &amp;fp) {
    os &lt;&lt; "\tFrozen Pizza Info:\n"
          "\t\tWeight: " &lt;&lt; fp.GetWeight() &lt;&lt; " ounces\n"
          "\t\tDiameter: " &lt;&lt; fp.GetDiameter() &lt;&lt; " inches\n";
}
</code></pre>
<p>The advantage is that you can now also "print" to different streams beside <code>std::cout</code>, like to a <code>std::stringstream</code> or a <code>std::ofstream</code>, making it much more generic.</p>
<h1>Mark constants with <code>const</code></h1>
<p>In your classes, you initialize the member variables with some value, after which they can never be changed. In that case, make those member variables <code>const</code>, so that this is also clear to the compiler, which can then better optimize your code, and give an error if you accidentily do write to those variables:</p>
<pre><code>class Frozenfood {
    const int Price;

protected:
    const int Weight;

public:
    ...
};
</code></pre>
<p>To be able to set these <code>const</code> variables in the constructor, use <a href="https://stackoverflow.com/questions/926752/why-should-i-prefer-to-use-member-initialization-list">member intialization lists</a>:</p>
<pre><code>FrozenFood::FrozenFood(int APrice, int AWeight):
        Price{APrice},
        Weight{AWeight} {
}
</code></pre>
<p>I see you already use member initializer lists when initializing the base class, which is good.</p>
<h1>Mark member functions that do not modify any member variables as <code>const</code></h1>
<p>Apart from making member variables <code>const</code>, you can also make member functions <code>const</code>. This tells the compiler that these functions do not change any member variables, which allows it to generate better code, produce errors if you do accidentily make changes, and allows those functions to be called on <code>const</code> objects.
So for example:</p>
<pre><code>class FrozenFood {
    ...
    int GetPrice() const;
    int GetWeight() const;
};

int GetPrice() const {
    return Price;
}

int GetWeight() const {
    return Weight;
}
</code></pre>
<h1>Consider using <code>#pragma once</code></h1>
<p>You are using header guards correctly. However, it can be a chore to add <code>#ifndef..#define..#endif</code>, and it is easy to accidentily copy&amp;paste the header guard and forget to change the name. All major compilers support <a href="https://en.wikipedia.org/wiki/Pragma_once" rel="nofollow noreferrer"><code>#pragma once</code></a>. If you add that to the header files, the compiler will ensure it's only ever included once.</p>
<p>However, as pointed out by others, it is not standard C++ (yet). Also, C++20 introduces <a href="https://www.modernescpp.com/index.php/c-20-modules" rel="nofollow noreferrer">modules</a>, which avoids the need for header guards.</p>
    </div>