<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, we should separate the sorting from the reading of inputs and writing of outputs.  We can create a function <code>sort_evens_first()</code> - that's the foundation of writing re-usable code.  An advantage (even in this small program) is that a separable function can more easily be tested - no need for an external script to run many instances of the program with different inputs, making tests run much faster; also it makes it easier to distinguish bugs in the I/O from bugs in the algorithm</p>
<p>Secondly, the Standard Library provides us with <code>qsort()</code> to save us having to re-implement sort every time (and it's usually more efficient than the bubble sort implemented here).  We need to give it a comparator function as follows:</p>
<ul>
<li>if one element is even and the other is odd, the even number sorts before the odd one,</li>
<li>else, the numerically smaller one is lower.</li>
</ul>
<p>That looks like:</p>
<pre><code>int compare_evens_first(const void *va, const void *vb)
{
    const int *a = va;
    const int *b = vb;

    if (*a % 2 != *b % 2)
        return (*a % 2) - (*b % 2);

    // else both odd, or both even
    // return *a - *b might overflow, so avoid that
    return (*a &gt; *b) - (*a &lt; *b);
}
</code></pre>
<p>Then we can simply use it:</p>
<pre><code>#include &lt;stdlib.h&gt;

void sort_evens_first(int *array, size_t count)
{
    qsort(array, count, sizeof *array, compare_evens_first);
}
</code></pre>
<p>N.B. I've not had time to test this code; bugs may be lurking.</p>
<hr>
<h2>Additional problems with the supporting code</h2>
<p>When reading input with <code>scanf()</code> and family, it is <strong>essential</strong> to confirm the return value before using any of the results.</p>
<p>It's less important to check the result of <code>printf()</code> as failure there is less likely to lead to bad outcomes, but it's still worth considering so that we can return <code>EXIT_FAILURE</code> if the output wasn't successfully written (it might not be obvious to the user if directed to a file or pipeline, for example).</p>
    </div>