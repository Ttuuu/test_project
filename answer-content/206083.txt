<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is this Graham Scan Algorithm? Is it O(n log n)?</p>
</blockquote>

<p>Yes, it is.</p>

<blockquote>
  <p>Is this elegant, readable Haskell code?</p>
</blockquote>

<p>No. It's buggy and far from elegant. Let's start with the bugs in <code>convex_hull_find</code>:</p>

<pre><code>          convex_hull_find []           = []
          convex_hull_find (x:[])       = x:[]
Bug 1:    convex_hull_find (x:x1:[])    = x:x1:[]
Bug 2:    convex_hull_find (x:x1:x2:[]) = x:x1:x2:[]
          convex_hull_find a            = (find_half_hull (tail sorted_x) [head sorted_x]) ++ (find_half_hull (tail (reverse sorted_x)) [head (reverse sorted_x)])
Bug 3:      where sorted_x                    = sortBy predicate a
                  predicate (x, y) (x1, y1)   = compare x x1   
                  find_half_hull ([]) hull    = ...
</code></pre>

<p>The first bug is simple and obvious: for non-unique inputs like <code>[(0,0),(0,0)]</code>, the convex hull should be <code>[(0,0)]</code>, but the input is returned verbatim. Non-unique inputs of arbitrary length are also handled improperly. The second bug arises from reordering inputs of length three. Obviously, <code>[p1, p2, p3]</code> (counterclockwise triangle), <code>[p3, p2, p1]</code> (clockwise) and <code>[p2, p3, p1]</code> (different starting point) should all result in the exact same convex hull, namely the counterclockwise triangle <code>[p1, p2, p3]</code> that starts with the lowest-sorting point.</p>

<p>To fix the first bug, just ensure the input is sorted and unique before you do any processing, even in case of short-circuit evaluation. The second bug can be fixed by removing the special case for inputs of length three, there is no need for it anyway. Also, replace <code>head</code> and <code>tail</code> by <code>last</code> and <code>init</code> so the lowest-sorting point stays in the first position for arbitrary-length inputs.</p>

<p>The third bug is a bit more tricky: if two points have the same <code>x</code>-coordinate, sorting by <code>x</code> is insufficient to find the starting point. You need to brake ties by <code>y</code>. Luckily, that's how Haskell orders tuples by default, so just replace <code>sortBy predicate a</code> by <code>sort a</code>. The input <code>[(1,1),(1,0),(2,0),(1,2),(0,0)]</code> triggers the faulty behavior.</p>

<p>Below is a corrected version of the function, complete with type annotations and a docstring. I renamed <code>find_half_hull</code> to <code>grahamScan</code> and made it a first-order citizen to improve readability. Note that function names in Haskell are <code>camelCase</code> by convention, not <code>snake_case</code>.</p>

<pre><code>convexHull :: (Num a, Ord a) =&gt; [(a,a)] -&gt; [(a,a)]
-- ^ Convex hull in two dimensions.
convexHull points
  | length sorted &lt;= 2 = sorted
  | otherwise = init (grahamScan sorted) ++ init (grahamScan $ reverse sorted)
  where sorted = map head $ group $ sort points
</code></pre>

<p>In addition to renaming <code>find_half_hull</code> to <code>grahamScan</code>, I split it in two separate, simple functions and slapped a docstring to each. They are defined as follows:</p>

<pre><code>grahamScan :: (Num a, Ord a) =&gt; [(a,a)] -&gt; [(a,a)]
-- ^ Performs a Graham scan on an ordered list of unique points.
grahamScan = foldr push []
  where push point stack = grahamEliminate (point:stack)
</code></pre>

<p>The first of those, <code>grahamScan</code>, simply pushes points onto a stack one by one (starting with the last) and calls <code>grahamEliminate</code> on each iteration. The latter tests if the top three point form a counterclockwise triangle and removes points as appropriate.</p>

<pre><code>grahamEliminate :: (Num a, Ord a) =&gt; [(a,a)] -&gt; [(a,a)]
-- ^ Pops second-to-top element from a stack if top three elements do
--   not form a counterclockwise triangle. Repeats if necessary.
grahamEliminate (p1:p2:p3:stack)
  | doubleArea p1 p2 p3 &lt;= 0 = grahamEliminate (p1:p3:stack)
grahamEliminate stack = stack
</code></pre>

<p>Finally, the following code can be replaced by a one-liner. Just leave it to the caller to test the sign, it's easier than to test for your custom type.</p>

<pre><code>data Direction = LeftTurn | RightTurn | Straight deriving (Show, Eq)

findDirBetter (x, y) (x1, y1) (x2, y2) 
    | cros_product == 0 = Straight
    | cros_product &gt; 0  = LeftTurn
    | cros_product &lt; 0  = RightTurn
    where cros_product = (x1 - x) * (y2 - y1) - (y1 - y) * (x2 - x1) 
</code></pre>

<p>The complete code is then:</p>

<pre><code>import Data.List


convexHull :: (Num a, Ord a) =&gt; [(a,a)] -&gt; [(a,a)]
-- ^ Convex hull in two dimensions.
convexHull points
  | length sorted &lt;= 2 = sorted
  | otherwise = init (grahamScan sorted) ++ init (grahamScan $ reverse sorted)
  where sorted = map head $ group $ sort points


grahamScan :: (Num a, Ord a) =&gt; [(a,a)] -&gt; [(a,a)]
-- ^ Performs a Graham scan on an ordered list of unique points.
grahamScan = foldr push []
  where push point stack = grahamEliminate (point:stack)


grahamEliminate :: (Num a, Ord a) =&gt; [(a,a)] -&gt; [(a,a)]
-- ^ Pops second-to-top element from a stack if top three elements do
--   not form a counterclockwise triangle. Repeats if necessary.
grahamEliminate (p1:p2:p3:stack)
  | doubleArea p1 p2 p3 &lt;= 0 = grahamEliminate (p1:p3:stack)
grahamEliminate stack = stack


doubleArea :: Num a =&gt; (a,a) -&gt; (a,a) -&gt; (a,a) -&gt; a
-- ^ Twice the area of a counterclockwise triangle. Negative if clockwise.
doubleArea (x1,y1) (x2,y2) (x3,y3) = (x2-x1) * (y3-y1) - (y2-y1) * (x3-x1)
</code></pre>
    </div>