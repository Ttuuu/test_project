<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The functions should be templatized so that they can sort any kind of comparable values.</p>

<p>You have made the two classic mistakes in mergesort:</p>

<ul>
<li><p><strong>Unstable sorting.</strong></p>

<blockquote>
<pre><code>if(a[i]&lt;b[j]){
    result.push_back(a[i]);
    i++;
}
else{
    result.push_back(b[j]);
    j++;
}
</code></pre>
</blockquote>

<p>One of the useful properties of mergesort is that it is a <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability" rel="noreferrer">stable sorting algorithm</a>. To achieve that, though, when two <code>a[i]</code> and <code>b[j]</code> are equal, you have to prefer to take the item from <code>a</code> first, because <code>a</code> was originally to the left of <code>b</code>. Therefore, use <code>&lt;=</code> for that comparison.</p>

<p>Of course, stability doesn't matter when sorting integers. But you might as well write it correctly so that it also works for sorting arbitrary objects.</p></li>
<li><p><strong>Overflow.</strong></p>

<blockquote>
<pre><code>b=mergesort(a,low,(low+hi)/2);
c=mergesort(a,(hi+low)/2+1,hi);
</code></pre>
</blockquote>

<p><code>low+high</code> is vulnerable to integer overflow.  The better technique would be <code>low + (high - low) / 2</code>.</p></li>
</ul>
    </div>