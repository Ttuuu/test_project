<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Declaring array size</h2>

<p>Since you're declaring and initializing the array in one step, you don't need to declare the array size. Omitting the array size means you can add/remove elements from the initialization without needing to worry about also changing the number in the declaration.</p>

<pre><code>// before
string[] colors = new string[4] {"red", "blue", "green", "yellow"};


// after
string[] colors = new string[] {"red", "blue", "green", "yellow"};
</code></pre>

<h2>Circular looping</h2>

<p>You can make this a neat one-liner using the modulus operator (or if you want your code to be ugly, a ternary operator). It's personal preference but the modulus operator has the added benefit of allowing you to iterate backwards because it will wrap your index/iterator even if it goes negative.</p>

<pre><code>// before
colorIndex++;

if (colorIndex &gt;= colors.Length)
{
    colorIndex = 0;
}


// after
colorIndex = (colorIndex + 1) % colors.Length;
</code></pre>

<h2>For loop</h2>

<p>You use a for loop to iterate your string, but the iterator/index variable <code>i</code> is only used to retrieve the char element from the appropriate position. Since the rest of your code isn't dependent on the numerical index value, you can just use a foreach loop. Remember to remove the declaration for the log variable if you declare it in your foreach loop.</p>

<pre><code>// before
for (int i = 0; i &lt; str.Length; i++)
{
    log = str[i];


// after
foreach (char log in str) 
{
</code></pre>

<h2>Checking for white space</h2>

<p>C#'s char primitive type has a built-in check for white space which covers more than just spacebar.</p>

<pre><code>// before
if (log == ' ')

// after
if (char.IsWhiteSpace(log))
</code></pre>

<h2>Switch statements</h2>

<p>As mentioned by another answer, switch statements are ugly. But there's another reason to opt for a different solution: if you want to add more colors to your array, you will also need to remember to add more cases to the switch statement.</p>

<pre><code>// before
switch (colors[colorIndex])
{
    case "red":
        currentColor = ConsoleColor.Red;
        break;

    case "blue":
        currentColor = ConsoleColor.Blue;
        break;

    case "green":
        currentColor = ConsoleColor.Green;
        break;

    case "yellow":
        currentColor = ConsoleColor.Yellow;
        break;

    default:
        currentColor = originalColor;
        break;
}

// after
if (!Enum.TryParse(colors[colorIndex], true, out currentColor))
{
    currentColor = originalColor;
}
</code></pre>

<hr>

<p>The adjustments I pointed out result in significantly less code that is more maintainable. It is functionally the same, and flexible in that you can easily add more colors later if you wanted to by just adding them to your array initialization.</p>
    </div>