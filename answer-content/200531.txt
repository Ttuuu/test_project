<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While you could approach this problem via a marking algorithm, the simplest way to achieve what you are trying to do is to sort the string and check for adjacent elements of the same type. Luckily, the standard library makes this very easy:</p>

<pre><code>void to_lower(std::string&amp; s) noexcept {
    std::transform(s.begin(), s.end(), s.begin(), [] (unsigned char c) {
        return std::tolower(c);
    });
}

auto has_no_duplicates(std::string&amp; s) noexcept -&gt; bool {

    if (s.size() &gt; static_cast&lt;std::size_t&gt;(
        std::numeric_limits&lt;unsigned char&gt;::max()) + 1) {

        return false;
    }

    to_lower(s);
    std::sort(s.begin(), s.end());

    auto position = std::adjacent_find(s.begin(), s.end());
    return position == s.end();
}
</code></pre>

<p>This should be relatively straightforward: <code>to_lower</code> replaces every character in the string with its lowercase equivalent. <code>has_no_duplicates</code> first checks whether the string contains more characters than <code>char</code> can contain uniquely, which, by the pigeonhole principle, implies that there must be repititions. Next, it converts the string to lower case, sorts it, then uses <code>std::adjacent_find</code> to find the first position at which two equal elements appear next to each other. Since <code>adjacent_find</code> returns the end iterator in case that no such pair was found, the function just returns whether that is the case. </p>

<hr>

<p>This solution has some drawbacks: </p>

<ol>
<li>It assumes that the string to be checked is mutable. If this is not the case, the algorithm can be adopted to make a copy first, but that's pretty inefficient.</li>
<li>This is a multi-pass algorithm, whereas the problem could actually be solved in a single pass. Whether that matters or not depends on how important performance is.</li>
<li>Furthermore, this code has non-ideal time complexity: Whereas the problem can be solved by a marking algorithm in <strong>O(n)</strong>, this algorithm runs in <strong>O(n log n)</strong> because of the sorting operation.</li>
<li>Once we're leaving fixed size encoded character sets, this method, as implemented here, won't work. One could say that this is more of a limitation of the string implementations C++ has to offer; however, this doesn't change the fact that this code is useless for, say, UTF-8 encoded strings.</li>
</ol>

<p>Is also has some advantages compared to a marking algorithm:</p>

<ol>
<li>It's very simple and very concise. </li>
<li><s>It doesn't consume much additional space. To be precise, the space complexity of this algorithm is <strong>O(1)</strong>, as opposed to a marking algorithm which has complexity <strong>O(n)</strong> in the underlying character set size.</s></li>
</ol>

<hr>

<p>So, should you use this or not? Unless you are checking a lot of large strings, or your execution time hinges on this particular task being fast, I'd say that this solution is good enough. </p>

<p>If I were to interview a candidate and he presented me a solution like this, I'd be pretty happy. It's concise, it's pretty, and it shows that you know how to make effective use of the standard library. </p>

<p>(Take this last opinion with a grain of salt, though; I have no actual experience conducting job interviews, so this is only a personal feeling and not, in any way, based on experience or knowledge about what a recruiter might be looking for.)</p>

<hr>

<p><strong>Edit:</strong> As pointed out by Deduplicator, I was wrong about space complexity. I assumed that <code>sort</code> would run in constant space, whereas the standard doesn't guarantee this (however, it is possible that it does). I also added an additional fast-fail path as per hoffmale's suggestion.</p>
    </div>