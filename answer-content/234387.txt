<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid using <code>system()</code> for trivial tasks</h1>

<p>Before resorting to calling external programs for simple tasks, try to find out how to do them in C++ itself. See <a href="https://stackoverflow.com/questions/37774983/clearing-the-screen-by-printing-a-character/37778152">https://stackoverflow.com/questions/37774983/clearing-the-screen-by-printing-a-character/37778152</a> for how to clear the screen by printing ANSI escape codes from within C++. There are also escape codes for setting the foreground and background colours.</p>

<p>Apart from not being very portable, <code>system()</code> has a huge overhead.</p>

<h1>Prefer <code>'\n'</code> over <code>std::endl</code></h1>

<p><a href="https://en.cpprefeCrence.com/w/cpp/io/manip/endl" rel="nofollow noreferrer"><code>std::endl</code></a> is equivalent to <code>'\n'</code> plus a flush of the output buffer. This flushing is adding unnecessary overhead. So just end strings with <code>\n</code>, it's faster and less typing.</p>

<h1>Avoid forward declarations</h1>

<p>You are forward-declaring the functions <code>mainMenu()</code>, <code>play()</code>, <code>music()</code> and <code>colour()</code>. If you move the implementation of these functions to above <code>main()</code>, you don't need the forward declarations anymore. This avoids having to repeat the function prototypes. Not having to repeat yourself means less chance of adding errors.</p>

<h1>Use <code>switch</code> where appropriate</h1>

<p>In <code>mainMenu()</code>, after reading a key, you use a sequence of <code>if</code>-statements to do things depending on which key was pressed. Instead of a whole list of <code>if</code>-<code>else</code> statements, this is normally a job for <code>switch</code>:</p>

<pre><code>switch (userChoice) {
case '1':
    play();
    break;
case '2':
    std::cout &lt;&lt; "Instructions: ...\n";
    break;
...
case '7':
    std::cout &lt;&lt; "Thank you for playing, goodbye\n";
    return;
default:
    std::cout &lt;&lt; "Error - Please choose again\n";
    break;
}
</code></pre>

<h1>Make functions and global variables <code>static</code> where appropriate</h1>

<p>Functions and global variables that are only used by functions inside the same source file should be made <code>static</code>. This tells the compiler nothing else needs these functions, and then it can more aggressively optimize the code.</p>

<h1>Avoid repetition</h1>

<p>Whenever you are repeating some lines of codes multiple times with only small variations, you should immediately stop and try to turn it into <code>for</code>-loop or find some other way to avoid this repetition. For example, in <code>Input()</code>, instead of writing a test for each possible position, and then manually setting the right matrix element, you could have written a <code>for</code>-loop:</p>

<pre><code>for (int i = 1; i &lt;= 9; i++)
    if (a == i &amp;&amp; matrix[i / 3][i % 3] == '0' + i)
        matrix[i / 3][i % 3] = player;
</code></pre>

<p>However, in this case you don't need a <code>for</code>-loop at all, and can just write:</p>

<pre><code>if (a &gt;= 1 &amp;&amp; a &lt;= 9)
    if (matrix[a / 3][a % 3] == '0' + a)
        matrix[a / 3][a % 3] = player;
</code></pre>

<p>Also, in <code>Win()</code> you can get rid of many lines of code by using loops.</p>

<h1>Create a class to represent the board</h1>

<p>The next improvement would be to make a class that represents the board, and have member functions in that class to make moves, check for winning conditions, and so on. This class should not read user input or write menus to the screen, however you can add a function to just print the state of the board. An example of what the class might look like:</p>

<pre><code>class TicTacToeBoard {
    char matrix[3][3] = {'1', '2', ...};
    char player = 'X';

public:
    void togglePlayer();
    char getCurrentPlayer();
    char checkWinner();
    bool placeMarker(int pos);
    void print(std::ostream &amp;output);
    void reset();
};
</code></pre>

<p>Have these member functions do error checking where necessary, for example have <code>placeMarker()</code> check that the given position is a valid number and that no other marker has been placed at that position yet, and return <code>true</code> if the marker was placed succesfully, <code>false</code> otherwise. Then for example, in <code>Input()</code> you can write:</p>

<pre><code>while (true) {
    cout &lt;&lt; "It's " &lt;&lt; board.getCurrentPlayer() &lt;&lt; "'s turn. Enter a number: ";
    cin &gt;&gt; a;

    if (board.placeMarker(a))
        return;
    else
        cout &lt;&lt; "Invalid input, please try again.\n";
}
</code></pre>

<p>See how this makes each function smaller and more readable.</p>

<h1>Use <code>enum</code>s for players</h1>

<p>Using a raw <code>char</code> for representing the current player and for each position of the board is of course possible, but it has the issue that a <code>char</code> can have many possible values, most of which are invalid. Also, you might later want to change the way you print the board (maybe with nicer Unicode characters for representing circles and crosses), and then it will be a lot of work to change your code. It is better to use an <code>enum</code>, or even better an <code>enum class</code>, to clearly define the possible values:</p>

<pre><code>enum class Player {
    NONE,
    X,
    O,
};
</code></pre>

<p>Then, make your board and current player variables use this:</p>

<pre><code>Player matrix[3][3] = {}; // initializes everything to Player::NONE
Player player = Player::X;
</code></pre>

<p>Then, for example when drawing the board, check the enum value of each position, and then convert that into the actual character you want to print:</p>

<pre><code>for (int row = 0; row &lt; 3; row++) {
    for (int col = 0; col &lt; 3; col++) {
        switch (matrix[row][col]) {
        case Player::NONE:
            std::cout &lt;&lt; row * 3 + col + 1 &lt;&lt; " ";
            break;
        case Player::X:
            std::cout &lt;&lt; "X ";
            break;
        case Player::O:
            std::cout &lt;&lt; "O ";
            break;
        }
    }

    std::cout &lt;&lt; "\n";
}
</code></pre>

<p>Of course, this is a bit more typing here, but you could create a function takes a <code>Player</code> value and returns a <code>char</code> or <code>std::string</code> representation of it, and call that function in <code>Input()</code>.</p>

<p>The advantage of this is that it's much harder to accidentily have an invalid value in <code>matrix[][]</code>, and when used in a <code>switch</code>-statement, the compiler will actually warn you if you didn't handle all the possible values of the <code>enum</code>.</p>
    </div>