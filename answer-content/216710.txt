<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks quite good code.  You've avoided many of the common mistakes.</p>

<p>Here are the things I spotted as I walked through.  Most of them are quite minor; the only serious issue is the handling of invalid user input.</p>

<hr>

<blockquote>
<pre><code>srand(time(0));
</code></pre>
</blockquote>

<p>Don't do this every time you want a random number - a random number generator is intended to be seeded just once.  So move the <code>srand()</code> call to the beginning of `main().</p>

<p>(Yes, I know this program calls <code>generate_random_number()</code> only once.  But we shouldn't need to have that knowledge, and we might want to change that behaviour, or to re-use this function in another program.)</p>

<hr>

<blockquote>
<pre><code>// this function stops the program until useless input is entered
</code></pre>
</blockquote>

<p>What's the point?  That just annoys the user, who would naturally expect to be returned to their shell after executing a program.  This just makes it look like the program is not responding.  Also, the <code>useless</code> variable is unnecessary - add the <code>*</code> modifier to the <code>%i</code> conversion to inhibit assignment.</p>

<hr>

<blockquote>
<pre><code>int main()
</code></pre>
</blockquote>

<p>This says that <code>main()</code> can be called with an <em>unspecified</em> number of arguments.  Instead, prefer to explicitly declare that it takes <em>no</em> arguments:</p>

<pre><code>int main(void)
</code></pre>

<hr>

<blockquote>
<pre><code>printf("You have to guess a number between 1 and 99.\n");
</code></pre>
</blockquote>

<p>When the output is a fixed string ending in newline, we can use <code>puts()</code> instead of <code>printf()</code>.</p>

<hr>

<blockquote>
<pre><code>    int guess;
    scanf("%i", &amp;guess);
</code></pre>
</blockquote>

<p>If something that's not a number is entered, then <code>scanf()</code> will fail and <code>guess</code> will be uninitialized (that's Undefined Behaviour, which is Not A Good Thing).  We really, really need to check that <code>scanf()</code> successfully converts 1 input, and take some recovery action if not:</p>

<pre><code>int status;
while ((status == scanf("%i", &amp;guess)) != 1) {
    if (status == EOF) {
        fprintf(stderr, "Read error!\n");
        exit 1;
    }
    scanf("%*[^\n]");  // discard input
    printf("? &gt;");
}
</code></pre>

<p>Correctly handling input (and, in particular, unexpected input) is difficult in C!</p>

<hr>

<blockquote>
<pre><code>    else if (guess == random_number)
</code></pre>
</blockquote>

<p>The <code>if</code> is redundant here, as we've eliminated all other possibilities.  So that can be simply <code>else</code>.</p>
    </div>