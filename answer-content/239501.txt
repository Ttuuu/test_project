<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two things that I can see that I think would improve your structure a lot:</p>

<ul>
<li><p>Keep the shader sources in separate files (I like to have them in /res/shaders with a .glsl extension) and load them in. You could have a class called <code>ShaderProgram</code> with methods <code>load_shader</code> and that also links up the shader program and removes the compiled shaders when linked.</p></li>
<li><p>Having a class also for the VAO would allow you to access members, which means that you could transform this:</p>

<pre><code>    for key in vao_list:
        ...
        shader = key[2]
        ...

        glUseProgram(shader)
</code></pre>

<p>to something like this:</p>

<pre><code>    for VAO in vao_list:
        glUseProgram(VAO.shader)
</code></pre></li>
</ul>

<h3>Smaller improvements</h3>

<p>You're currently dealing with a lot of lists and manual indexes where you could use classes and list comprehensions. This:</p>

<pre><code>        mod_list = []
        for i in range(4):
            for j in range(4):
                mod_list.append(model_o[i][j])
</code></pre>

<p>could be written as <code>mod_list = [model_o[i][j] for j in range(4) for i in range(4)]</code>. List comprehensions are faster and easier to read. And speaking of lists, you may want to have a look at <code>Collections.deque</code> (a bit faster), and you may want to rethink some of your lists since you probably are using a lot of performance there.</p>

<hr>

<p>Use context managers. You're opening files without making sure that they're closed, e.g. here: <code>for line in open(file, 'r'):</code>.</p>

<h3>"Bugs"</h3>

<p>You're overwriting a lot of your variables here:</p>

<pre><code>    def setup_index(self):
        self.material_index = []
        self.vertex_index = []
        self.texture_index = []
        self.normal_index = []
        self.model = []
        self.material_index = []  # duplicate
        self.vertex_index = []  # duplicate
        self.texture_index = []  # duplicate
        self.normal_index = []  # duplicate
</code></pre>

<p>I also think I found a "bug", where you do:</p>

<pre><code>    mtl = None
    ...
        if values[0] == 'newmtl':
            ...
            mtl = contents[values[1]] = {}
            ...
        elif mtl is None:
            raise ValueError("mtl file doesn't start with newmtl stmt")
</code></pre>

<p>It would only evaluate that <code>else-if</code> if the first <code>if</code> is False, and the <code>else-if</code> will only be <code>True</code> if the first <code>if</code> is <code>False</code>. Based on your message in the raised error, I would think that you just want <code>if values[0] == "newmtl": &lt;do-this&gt; else: raise &lt;error&gt;</code>.</p>
    </div>