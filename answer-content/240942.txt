<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<p>I just took a short look at it and this are my thoughts:</p>

<h1>Avoid the <em>Java Singelton Pattern</em></h1>

<p>Your class <code>Universe</code> implements the <em>Java Singelton Pattern</em> and as many others before you fail with that by not taking concurrency into account.
But That is not the problem!</p>

<p>The Problem with the   <em>Java Singelton Pattern</em> is that it makes the instance of your class <code>Universe</code> a <strong>global variable</strong>. You may have heard before that <em>global variables</em> are considered harmful. (<a href="https://algorithmsandme.com/five-reasons-why-not-to-use-global-variables/" rel="nofollow noreferrer">https://algorithmsandme.com/five-reasons-why-not-to-use-global-variables/</a>) But especially in Java they force <em>tight coupling</em> between the Singelton and its users. They are the opposite of the <em>Open/Closed principle</em>.</p>

<p>Attention: This does not mean that the <em>Singelton as a</em> <strong>concept</strong> is bad. This means that the application (the <em>injection framework</em> by any chance) should assure that only one instance is created at the applications runtime. </p>

<p>For more on this read here:<br>
<a href="https://williamdurand.fr/2013/07/30/from-stupid-to-solid-code/" rel="nofollow noreferrer">https://williamdurand.fr/2013/07/30/from-stupid-to-solid-code/</a></p>

<h1>duplicated checks</h1>

<p>In your constructors you use <code>@NotNull</code> annotations at the parameters and then you explicitly do a not null check. </p>

<p>Why? Given that your <em>dependency injection framework</em> works properly at the runtime of your application the additional check will never fail...</p>

<p>In you Method <code>Kingdom.setPostService()</code> you even  miss to check the parameter the second time an check a member variable instead. This will lead to strange error messages at runtime. </p>

<h1>avoid <em>getter</em> and <em>setter</em> on classes implementing <em>business logic</em></h1>

<p><em>getter</em> and <em>setter</em> should only be used on <em>Data Transfer Objects</em> or <em>Value Objects</em> that only contain data and <strong>no</strong> <em>business logic</em> (at most some very simple validations).</p>

<p>On classes implementing business logic <em>getter</em> and <em>setter</em> are violations of the <em>encapsulation</em> aka <em>information hiding principle</em>.</p>

<hr>

<p><strong>Addendum</strong> </p>

<h1>limit scope of variables</h1>

<p>In <code>Kingdom.allyRequest()</code> you declare <code>response</code> before the <code>try/catch</code> block but you only access it within the <code>try</code> part. You only need this declaration there for the <code>return</code> statement after the <code>catch</code> block. </p>

<p>But doing anything after a   <code>catch</code> block is a <em>code smell</em> itself.  So you should return the <code>response</code> as the last statement inside the  <code>try</code> block. Then you can also move the declaration of the variable <code>response</code> to the line where you actually assign it a value.</p>
    </div>