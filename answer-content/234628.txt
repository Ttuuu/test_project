<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I think its quite long considering the work it does</p>
</blockquote>

<p>Your instinct is right - it's quite long. It can be implemented with much fewer lines of code, especially in <strong>Python</strong>. A solution from @RomanPerekhrest highlights it quite well.</p>

<blockquote>
  <p>is this the efficient solution?</p>
</blockquote>

<p>From the time complexity prospective, it's not an efficient solution. It's O(n<sup>2</sup>), where <code>n</code> - number of binary digits in your number. Why? Because in your outer loop, you process each digit one by one regardless of the results in your inner loop. So, if your inner loop finds a segment of ones you don't move <code>Ã¬</code> and <code>index</code> to a bit position following this segment. Instead, you pick a second bit in this segment and find the same segment without the first bit again.</p>

<p>For instance, let's say we have a number which binary representation is <code>111110</code>. Then your algorithm will find the following segments of ones:</p>

<pre><code>11111  | 4 inner loop steps
 1111  | 3 inner loop steps
  111  | 2 inner loop steps
   11  | 1 inner loop steps
    1  | 0 inner loop steps
</code></pre>

<p>An optimal solution has a O(n) time complexity. I'll leave it up to you to update your code based on the explanation above. </p>

<p><strong>Bonus</strong></p>

<p>I noticed that each answer uses <code>bin()</code> to calculate the longest segment of ones. However, it's not really needed since this approach has an additional <code>O(n)</code> space complexity (as you recall it from the previous paragraph, <code>n</code> - number of binary digits). </p>

<p>We could just use bitwise operators to achieve the same result. For example, let's say there's a number <code>1100011101</code>. It has <code>3</code> separate segments of ones: Now, let's play a bit - we will calculate a left shifted version of <code>x</code> and then perform bitwise <code>AND</code> on it. Then, for the shifted version we will calculate its left shifted number and so on.</p>

<pre><code>1 1 0 0 0 1 1 1 0 1 0  (x)
         &amp;
1 0 0 0 1 1 1 0 1 0 0  (x &lt;&lt; 1)
---------------------
1 0 0 0 0 1 1 0 0 0 0  y = ((x) &amp; (x &lt;&lt; 1))


1 0 0 0 0 1 1 0 0 0 0  (y)
         &amp; 
0 0 0 0 1 1 0 0 0 0 0  (y &lt;&lt; 1)
---------------------
0 0 0 0 0 1 0 0 0 0 0  z = ((y) &amp; (y &lt;&lt; 1))


0 0 0 0 0 1 0 0 0 0 0  (z)
         &amp; 
0 0 0 0 1 0 0 0 0 0 0  (z &lt;&lt; 1)
---------------------
0 0 0 0 0 0 0 0 0 0 0  ((z) &amp; (z &lt;&lt; 1))
</code></pre>

<p>So, as you can see it took us <code>3</code> steps to reach <code>0</code>. But <code>3</code> is also the length of the longest segment of ones. And it's not a coincidence because bitwise <code>AND</code> of a number and its shifted version shortens each segment of ones by <code>1</code>. Hence, the longest segment will lose all its ones after &lt; length of the longest segment of ones &gt; steps.</p>

<p><strong>Code</strong></p>

<pre><code>def find_max_ones(number):
    maxLength = 0

    while number &gt; 0:
        left_shifted_number = number &lt;&lt; 1
        number = number &amp; left_shifted_number
        maxLength += 1

    return maxLength


if __name__ == '__main__':
    number = int(input('Enter integer number:'))
    max_ones = find_max_ones(number)

    print("Length of the longest segment is ", str(max_ones))
</code></pre>
    </div>