<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both Karol and iSR5 have some good points, and I can't add something new.</p>

<p>One thing you should be aware of, if you consider to use iSR5's <code>IEnumerable&lt;TValue&gt;</code>-approach, is as follows:</p>

<pre><code>  MultiDictionary&lt;int, int&gt; dict = new MultiDictionary&lt;int, int&gt;();

  List&lt;int&gt; data = Enumerable.Range(1, 30).ToList();
  IEnumerable&lt;int&gt; query = data.Where(i =&gt; i % 3 == 0);

  dict.AddOrUpdate(0, query);
  Console.WriteLine(string.Join(", ", dict[0]));
  data.Remove(15);
  Console.WriteLine(string.Join(", ", dict[0]));
</code></pre>

<p>which outputs:</p>

<pre><code>3, 6, 9, 12, 15, 18, 21, 24, 27, 30
3, 6, 9, 12, 18, 21, 24, 27, 30
</code></pre>

<p>As you can see, the content of an entry in <code>dict</code> is changed outside <code>dict</code> itself. IMO this can lead to undesired and unexpected behavior, that can be difficult to debug and find, for instance if the original data is maintained "far away" from <code>dict</code>. I can only recommend that you have a concrete container type as value of the inner dictionary <code>_Data</code> - and it should only be maintained/accessible by the dictionary itself.</p>

<p>Else I see no reason for <code>MultiDictionary&lt;K, V&gt;</code> class at all, as you could just have a normal <code>Dictionary&lt;K, IEnumerable&lt;T&gt;&gt;</code> that is transparent in respect to the value container.</p>
    </div>