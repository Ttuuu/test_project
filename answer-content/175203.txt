<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Suggested ES6 rewrite</h3>
<pre><code>function timeoutFetch (input, init = {}) {
  const timeout = init &amp;&amp; Number(init.timeout) || 8000

  return new Promise((resolve, reject) =&gt; {
    fetch(input, init).then(resolve, reject)
    setTimeout(() =&gt; reject(new TypeError('Client timed out')), timeout)
  })
}
</code></pre>
<h3>Invocation</h3>
<pre><code>timeoutFetch(url, {
  method: 'post',
  credentials: 'same-origin',
  timeout: 8000 // optional
}).then(checkResponseStatus, error =&gt; {
  // could be fetch() error or timeout error
})
</code></pre>
<h3>Explanation</h3>
<pre><code>function timeoutFetch (input, init = {})
</code></pre>
<p>Here, we are mimicking the signature of the native <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch" rel="nofollow noreferrer"><code>fetch</code> API</a>, which has one required argument and one optional argument. We simply expect a <code>timeout</code> property to optionally exist on <code>init</code> within this wrapper function.</p>
<pre><code>const timeout = init &amp;&amp; Number(init.timeout) || 8000
</code></pre>
<p>This first checks that <code>init</code> is "truthy", and then checks that <code>init.timeout</code> is a valid, non-zero number. If these are satisfied, then <code>timeout</code> is assigned the value of the supplied property, otherwise it defaults to <code>8000</code> milliseconds, like in your example.</p>
<pre><code>return new Promise((resolve, reject) =&gt; { ... })
</code></pre>
<p>If you are at all familiar with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" rel="nofollow noreferrer">using promises</a>, then you'll recognize this pattern. <a href="https://stackoverflow.com/q/23803743/1541563">While it is typically considered an anti-pattern</a>, this particular implementation is written properly, and is also necessary in this case to take advantage of a convenient implicit race-condition behavior of promises that I'll explain in a moment.</p>
<pre><code>fetch(input, init).then(resolve, reject)
</code></pre>
<p>This line invokes the native <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch" rel="nofollow noreferrer"><code>fetch()</code></a> method with the wrapper's arguments and resolves the explicitly constructed promise with the fulfilled <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response" rel="nofollow noreferrer"><code>Response</code></a> object, if, and only if, <em>it is successful and it completes before the <code>setTimeout()</code> callback is invoked.</em></p>
<p>The reason this occurs is because of the <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects" rel="nofollow noreferrer">specification</a>: a promise can only be fulfilled, rejected, or remain pending forever, and if it is fulfilled or rejected, it is "settled" and cannot be fulfilled or rejected again.</p>
<p>If it is unsuccessful, and it fails before the timeout occurs, then it will invoke <code>reject()</code> with an error.</p>
<pre><code>setTimeout(() =&gt; ...), timeout)
</code></pre>
<p>This part is pretty straightforward; we're creating a timeout given the amount of milliseconds supplied from <code>init.timeout</code> or the default <code>8000</code>, and invoking the callback function in that amount of time.</p>
<pre><code>reject(new TypeError('Client timed out'))
</code></pre>
<p>Inside the callback, we're rejecting the constructed promise with a <code>TypeError</code>, but keep in mind, if the <code>fetch()</code> function has already invoked <code>resolve()</code> or <code>reject()</code> in its <code>then()</code>, this call is essentially a noop because the constructed promise has already locked into its state and cannot be "settled" again. Because of this, it is unnecessary to assign a reference to the timeout and call <code>clearTimeout()</code> if those occur first.</p>
<h3>Conclusion</h3>
<p>If you've read this far, you've probably realized by now that the suggested code is compact because it takes advantage of a thorough understanding of the promise specification, and is able to safely make assumptions that keeps the code <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a>.</p>
    </div>