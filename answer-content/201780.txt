<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The usage of <code>Worksheet_Change</code> event should <em>really</em> have a check built into it e.g.</p>

<pre><code>Private Sub Worksheet_Change(ByVal target As Range)
    Dim workingRange As Range
    Set workingRange = Sheet1.Range("A2:E5")
    If Not Intersect(target, workingRange) Is Nothing Then Main.Main target
End Sub
</code></pre>

<p>This way you won't need to pass <code>target</code> unnecessarily, or check for errors after passing it. I think it's sort of un-intuitive to pass a possible error to <code>Main</code> to check when you could just avoid executing it entirely.</p>

<p>But, I'm just going to ignore that event, it's difficult to troubleshoot, so I'm just going to call <code>Main</code> manually.</p>

<hr>

<blockquote>
<pre><code>Call printValues(valuesToFillRange, target)
</code></pre>
</blockquote>

<p>You don't need to <code>Call</code> subs, it's obsolete. Instead just use <code>Sub argument, argument</code></p>

<p>You also have some <code>Friend</code>s in your Class, there's no reason for that. In general those would be <code>Public</code> as <code>Friend</code> isn't really used in VBA. Because VBA is old school, but not too old school. Just the right amount of confusion.</p>

<hr>

<h3>Naming</h3>

<p>First - you've done a good job naming everything, declaring everything and properly typing most things. So these are just some improvements I see.</p>

<p>You're using <em>UserInput</em> a few times, but you aren't actually asking for input from a user - that's a bit confusing. Instead it might be the <code>targetRow</code> or something like that, because once you get the target, the user is no longer involved.</p>

<blockquote>
<pre><code> Function checkUserInputValid(ByRef userInput As Range) As Boolean
</code></pre>
</blockquote>

<p>This is a boolean function, which normally is named as such e.g. <code>IsValidInput</code></p>

<p>So now your check would read</p>

<pre><code> If IsValidInput(target) Then Exit Sub
</code></pre>

<p>But really here you're testing for something to be negative, which isn't intuitive. Switch that up so <code>IsValidInput</code> returns <code>True</code> for good input and <code>False</code> for bad input. And then <code>If IsValidInput Then ... Else Exit Sub</code></p>

<p>Also, booleans are initialized as false, so you don't need to set it to false.</p>

<p>Also, with your functions and subs you're using <code>camelCase</code> naming - you should use <code>ProperCase</code> for these. You use <code>camelCase</code> for local variables and then <code>UPPER_SNAKE</code> for constants.</p>

<p>Sub <code>Main</code> isn't telling me anything - normally it's a given that there's a <code>Main</code>, but why not just give it an indication like <code>BeginSudokuSolve</code>?</p>

<p>Also I think <code>getSumTarget</code> would be <code>GetTargetSum</code> - but that's not a big deal. Your functions <em>are</em> telling me what they do, so they have generally good names, even if they might be able to be more concise.</p>

<hr>

<h3>ByRef</h3>

<p>You're also passing your argument <code>ByRef</code> which isn't needed - once you have <code>target</code> you can just pass the range <code>ByVal</code> - which isn't to say you only pass the <em>value</em> of the range, but you only pass the <em>identity</em> of the range, instead of the actual range - trust me it's faster.</p>

<p>Same for</p>

<blockquote>
<pre><code>Sub Main(ByRef target As Range)
Function getSumTarget(ByRef userInput As Range) As Long
Function printValues(ByRef valuesToFillRange As CollectionOfGeneratedValues, ByRef userInput As Range)
Private Sub swap(ByRef holdValuesArray As Collection)
Public Sub generateValues(ByRef userInput As Range)
Private Function getSumTarget(ByRef userInput As Range) As Long
Private Function getNumbersToGenerate(ByRef userInput As Range) As Long
</code></pre>
</blockquote>

<hr>

<h3>Functions</h3>

<p>You have a Function <code>printValues</code> that isn't given a type. This means it's not returning anything (as a function does) and would instead be a <code>Sub</code>.</p>

<p>You also have <code>Main.getSumTarget</code> <strong><em>and</em></strong> <code>CollectionOfGeneratedValues.getSumTarget</code> that do the same thing. If you only need this value once (which is true, even if you use it more than once), just get it, store it and pass it. Or assign it to a Class property from <code>Main</code>.</p>

<hr>

<blockquote>
<pre><code>Private Function getNumbersToGenerate(ByRef userInput As Range) As Long
Dim rangeToFill                     As Range

    Set rangeToFill = Range("A" &amp; userInput.Row &amp; ":E" &amp; userInput.Row)
    getNumbersToGenerate = rangeToFill.Columns.Count - 1
End Function
</code></pre>
</blockquote>

<p>This is a bit weird. It could just be a constant of <code>4</code> right? <code>A</code> to <code>E</code> minus 1. If this exists for extending the ability of the application, then <code>A</code> and <code>E</code> should not be hard-coded, but instead read based on the <code>target</code>.</p>

<p>It's also not getting the numbers, it's getting the <em>amount</em> of numbers to generate. But you have a <code>Get Count</code> property, so it's probably not needed at all, is it?</p>

<hr>

<p>I don't know if I broke it, but printing like this </p>

<blockquote>
<pre><code>cellInRangeToFill.value = valuesToFillRange(collectionCounter)
</code></pre>
</blockquote>

<p>Doesn't work. I'd need <code>valuesToFillRange.Item(collectionCounter)</code> for it to be valid.</p>

<hr>

<h3>Method</h3>

<p>So the problem statement doesn't seem like it's outlined <em>how</em> to refill the values. I think that's what you're doing with shuffle and swap?</p>

<p>So if the method should keep as many numbers the same as before, that would be straight-forward. If the method calls to get all the numbers as close to one another as possible, that would be another problem. If everything doesn't need to be integers, we have an entirely new approach. Essentially the <em>method</em> that you're using is arbitrary and shouldn't be evaluated.</p>

<p>One thing, though, I think is that you should check if the target row already adds up to the target sum, before even going forward.</p>

<blockquote>
<pre><code>Private Sub Worksheet_Change(ByVal target As Range)
        Dim workingRange As Range
        Set workingRange = Sheet1.Range("A2:E5")
        If Not Intersect(target, workingRange) Is Nothing Then
            If NotAlreadyEqual(target) Then Main.Main target
        End If
End Sub
</code></pre>
</blockquote>

<hr>

<h3>Class</h3>

<p>I don't see <code>Private Property Get NewEnum() As IUnknown</code> ever used. I'm not sure VBA even knows what to do with it.</p>

<p>It looks like your class is a collection. And that collection has properties, as does your class. You sort of have a level of abstraction here (which is why I needed to specify <code>.Item</code> earlier). Let's take a look at <em>exactly</em> what your class does -</p>

<ol>
<li>Create Collection</li>
<li>Get target's value</li>
<li>Get target sum</li>
<li>Subtract new value from target sum</li>
<li>Get new values (in several steps)</li>
</ol>

<p>That <em>could</em> be simpler - for instance this class <code>RowValues</code></p>

<pre><code>Option Explicit
    Const NUMBER_OF_ELEMENTS As Long = 5
    Private valueArray() As Long
    Private pTargetSum As Long

    Public Property Let ArrayOfValues(value As Variant)
        ReDim valueArray(1 To NUMBER_OF_ELEMENTS)
        valueArray(value.Column) = value.value
    End Property

    Public Property Get ArrayOfValues() As Variant
        ArrayOfValues = valueArray
    End Property

    Public Property Let TargetSum(value As Long)
        pTargetSum = value
    End Property

    Public Sub GenerateValues()
        'figure out current sum
        'generate values for elements not 0
        'fill up array however you want
    End Sub
</code></pre>

<p>If it's always A to E, then it's easy to base everything on the initial target from worksheet_change and use your algorithm, or any other, to fill in new elements and spit them back out.</p>

<hr>

<p>So disregarding the class, you'd end up with something like</p>

<h3>Sheet1</h3>

<pre><code>Option Explicit
Private Sub Worksheet_Change(ByVal target As Range)
    Dim workingRange As Range
    Set workingRange = Sheet1.Range("A2:E5")

    If Not Intersect(target, workingRange) Is Nothing Then
        If Main.NotAlreadyEqual(target) Then Main.GenerateValues target
    End If
End Sub
</code></pre>

<h3>Main</h3>

<pre><code>Option Explicit

Sub GenerateValues(ByVal target As Range)
Dim valuesToFillRange As RowValues
Set valuesToFillRange = New RowValues
valuesToFillRange.ArrayOfValues = target
valuesToFillRange.TargetSum = Sheet1.Cells(target.Row, 6).value
valuesToFillRange.GenerateValues
'print


End Sub

Public Function NotAlreadyEqual(ByVal target As Range) As Boolean
    Dim targetRow As Long
    Dim currentSum As Long
    Dim element As Long
    targetRow = target.Row
    For element = 1 To 5
        currentSum = currentSum + Sheet1.Cells(targetRow, element)
    Next
    If currentSum &lt; Sheet1.Cells(targetRow, 5) Then NotAlreadyEqual = True
End Function
</code></pre>

<h3>Class</h3>

<pre><code>Option Explicit
    Const NUMBER_OF_ELEMENTS As Long = 5
    Private valueArray() As Long
    Private pTargetSum As Long
    Private pTargetRow
    Private newElement As Long

    Public Property Let ArrayOfValues(value As Variant)
        ReDim valueArray(1 To NUMBER_OF_ELEMENTS)
        valueArray(value.Column) = value.value
        pTargetRow = value.Row
        newElement = value.Column
    End Property

    Public Property Get ArrayOfValues() As Variant
        ArrayOfValues = valueArray
    End Property

    Public Property Let TargetSum(value As Long)
        pTargetSum = value
    End Property


    Public Sub GenerateValues()
        Dim currentSum As Long
        currentSum = Application.WorksheetFunction.Sum(valueArray)
        Dim delta As Long
        delta = pTargetSum - currentSum
        Dim index As Long
        For index = LBound(valueArray) To UBound(valueArray)
            If valueArray(index) = 0 Then valueArray(index) = Int(delta / 4)
        Next
        currentSum = Application.WorksheetFunction.Sum(valueArray)
        delta = pTargetSum - currentSum
        If delta &lt;&gt; 0 Then
            index = Int((5 * Rnd) + 1)
            If index &lt;&gt; newElement Then valueArray(index) = valueArray(index) + delta
                If index = newElement Then
                    Select Case newElement
                        Case 5
                            valueArray(index - 1) = valueArray(index - 1) + delta
                        Case Else
                            valueArray(index + 1) = valueArray(index + 1) + delta
                    End Select
                End If
        End If
    End Sub
</code></pre>
    </div>