<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Prefer <code>enum class</code> with a name, and probably rename the enums, e.g. <code>BOOL_TYPE</code> becomes <code>TYPE::BOOL</code> or however you'd like to do the naming. Why do you want them to be an unnamed enum type?</p>

<hr>

<p>You're printing an error to cout when there's an error. At the very least, print to cerr, so that someone running this might be able to filter output if they'd like to. I would personally either return a <code>variant&lt;variable, error_message_type&gt;</code> or throw an exception if there's an error like that though. Otherwise errors could easily slip through unnoticed.</p>

<hr>

<p>This validation loop is inefficient and confusing.</p>

<p>Prefer extracting the conditional if possible. It appears to be ensuring that all the types are the same if it is a "VARIABLE_" type. Perhaps "variadic" may be more appropriate? </p>

<pre><code>    int idx = 0;
    for (auto i : list)
    {
        if ((indexes[0] &amp; 0x80) ? i.index() != (indexes[0] &amp; 0x03), idx++ : i.index() != indexes[idx++])
        {
            std::cout &lt;&lt; "Invalid argument type" &lt;&lt; std::endl;
            return variable(0);
        }
    }
</code></pre>

<hr>

<p><code>indexes</code> could take a type enum instead of <code>int</code> if it had a name. Why is it called indexes? You may be able to leverage more of <code>std::variant</code> and possibly not need the enum at all.</p>

<hr>

<p><code>for (auto i : list)</code> You probably want <code>auto &amp; i</code>, since this will result in string copies in the case of string variants.</p>

<hr>

<p><code>return fn(std::forward&lt;decltype(list)&gt;(list));</code>
This is unnecessary. std::forward is useful for templated types, but you know the type of list, it's a <code>variableList &amp;&amp;</code>. </p>

<p>You could move the list, but I'm not sure that's what you really want. </p>
    </div>