<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is regarding the edge-cases and test cases mentioned in the question:</p>
<pre><code>[...characters] // or Array.from(characters)
</code></pre>
<p>handles splitting the characters of string to an array in most of the cases. It is better than <code>characters.split("")</code> because it handles surrogate pairs pretty well.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>console.log( "🍍".length ) // 2
console.log( [..."🍍"] )
console.log( "🍍".split("") )</code></pre>
</div>
</div>

<p>What if you input something like 👨‍👩‍👧‍👦? You get</p>
<pre><code>0x1f468
0x200d
0x1f469
0x200d
0x1f467
0x200d
0x1f466
</code></pre>
<p>and not a single hex as output like before. Because, there are hundreds of <em>emoji sequences</em> which are combinations of multiple emojis but display as a single emoji. They are joined with a <a href="https://codepoints.net/U+200d" rel="nofollow noreferrer">Zero Width Joiner (U+200D)</a> character. When you use <code>[...]</code> on them, they are split into an array of individual emojis and joiner characters.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>console.log("👁️‍🗨️".length) // 7
console.log(Array.from("👁️‍🗨️"))

console.log("👨‍👩‍👧‍👦".length) // 11
console.log(Array.from("👨‍👩‍👧‍👦"))</code></pre>
</div>
</div>

<p>Similarly, many languages create a grapheme or a symbol with <a href="http://en.wikipedia.org/wiki/Combining_character" rel="nofollow noreferrer">combining marks</a>. They look like distinctive units of writing, but are made up of multiple unicode points.</p>
<p>The below strings are not the same. The first string has <code>á</code> but the second string is <code>a</code> and a combining mark <a href="https://codepoints.net/U+0301" rel="nofollow noreferrer">U+0301</a></p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const a = "álgebra",
      b = "álgebra"

console.log(a === b) // false
console.log(a.length, b.length)
console.log([...a].join(" , "))
console.log([...b].join(" , "))

console.log([..."हिन्दी"].join(" , ")) // Devanagari script</code></pre>
</div>
</div>

<p><a href="https://codepoints.net/U+093F" rel="nofollow noreferrer"><code> ि</code></a> is a vowel sound and isn't used on it's own. It needs to be combined to with a consonant like <code>ह</code>(Ha) to get <code>हि</code> (He)</p>
<p>You can create big strings using multiple combining marks while the string looks like it has 6 distinct characters:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const a = 'Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢L̠ͨͧͩ͘G̴̻͈͍͔̹̑͗̎̅͛́Ǫ̵̹̻̝̳͂̌̌͘!͖̬̰̙̗̿̋ͥͥ̂ͣ̐́́͜͞'

console.log(a.length) // 75
console.log(Array.from(a))</code></pre>
</div>
</div>

<p>The scenarios mentioned are not issues per se. You are basically converting the string to corresponding unicode hex. But, each grapheme or a symbol doesn't necessarily correspond to a single hex in the output. You can keep these in mind or add them to your edge cases / test cases.</p>
<p>Some further reading:</p>
<ul>
<li><a href="https://mathiasbynens.be/notes/javascript-unicode" rel="nofollow noreferrer">JavaScript has a Unicode problem</a></li>
<li><a href="https://dmitripavlutin.com/what-every-javascript-developer-should-know-about-unicode/" rel="nofollow noreferrer">What every JavaScript developer should know about Unicode</a></li>
<li><a href="https://unicode.org/emoji/charts/full-emoji-list.html" rel="nofollow noreferrer">Full Emoji List, v13.0</a> (You can see the Code column to know if emojis are created from multiple emojis)</li>
<li><a href="https://emojipedia.org/emoji-zwj-sequence/" rel="nofollow noreferrer">Emoji Zero Width Joiner ZWJ Sequence</a></li>
</ul>
<hr>
<p>Also, <code>codePointAt</code> takes a number as a parameter.</p>
<pre><code>return character.codePointAt(undefined).toString(16)
</code></pre>
<p>is same as</p>
<pre><code>return character.codePointAt().toString(16)
</code></pre>
<p>Both of these work because if the argument is <code>undefined</code>, it defaults to <code>0</code>. It's better to pass <code>0</code> explicitly as it is easily understandable. It wasn't clear why you were passing <code>undefined</code> initially.</p>
<pre><code>return character.codePointAt(0).toString(16)
</code></pre>
    </div>