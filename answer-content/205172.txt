<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Flag variables suck, and should be avoided.  Moreover, variables should not be named in <code>ALL_CAPS</code> to look like constants.  All you need to get out of the loop is a <code>break</code>.</p>

<p>You've hard-coded the parts of the menu in three places:</p>

<ul>
<li>the prices</li>
<li>the ASCII table</li>
<li>the loop</li>
</ul>

<p>All of the menu information should be defined in one place.  You can programmatically generate the ASCII table using the <a href="http://docs.astropy.org/en/latest/io/ascii/index.html" rel="noreferrer"><code>astropy.io.ascii</code> package</a>, but I've put together a quick-and-dirty implementation below.</p>

<p>The <code>if</code> statements in the loop should be replaced by a dictionary lookup.  Furthermore, <code>is</code> is the wrong operator to use; string comparison should be done using <code>==</code>.  In fact, entering "done" doesn't correctly end the loop, because of that.</p>

<p>You used <code>+ str(0)</code> as a hack to get a price ending in "0" to display properly.  To represent fixed-point numbers, you should use a <a href="https://docs.python.org/3/library/decimal.html" rel="noreferrer"><code>Decimal</code></a> instead.</p>

<p>This program is long enough that it would be a good idea to make a <code>main()</code> function.</p>

<p>Statements should generally not be terminated with semicolons in Python.  Also, PEP 8, the official style guide, specifies that indentation should be four spaces.  This is an important convention in Python, where indentation matters a lot.</p>

<h2>Suggested solution</h2>

<pre><code>from collections import OrderedDict, namedtuple
from decimal import Decimal
from string import ascii_uppercase

def tabular(table, widths):
    def sandwich(delim, contents):
        return delim + delim.join(contents) + delim
    def cell(value, width):
        return ' ' + str(value).ljust(width - 2)
    def cells(row):
        return sandwich('|', (cell(col, w) for col, w in zip(row, widths))) + '\n'
    horiz_rule = sandwich('+', ('-' * (w - 1) for w in widths)) + '\n'
    return sandwich(horiz_rule, (cells(row) for row in table))

# In Python 3.7, this should be a @dataclass instead:
class Item(namedtuple('Item', 'name price')):
    def __new__(cls, name, price):
        return super().__new__(cls, name, Decimal(price))

def main():
    menu_items = OrderedDict(zip(ascii_uppercase, [
        Item('The "Big Boy" Burger', '16.99'),
        Item('French Fries', '5.99'),
        Item('Currie sauce', '19.99'),
        Item('Napkins with Chokolates', '10.50'),
        Item('Juice Box', '89.01'),
        Item('Takeout', '18.99'),
    ]))

    print(
        tabular([['The Restaurant at the End of the Universe']], [36 + 9]) +
        tabular(
            (('{0} {1.name}'.format(*stuff), '${1.price}'.format(*stuff))
              for stuff in menu_items.items()),
            [36, 9]
        )
    )

    total = Decimal('0.00')
    while True:
        print('Total: ${0}'.format(total))
        selection = input("Select a letter or 'done': ")
        if selection == 'done':
            break
        total += menu_items[selection].price
    print('Final total: ${0}'.format(total))

if __name__ == '__main__':
    main()
</code></pre>
    </div>