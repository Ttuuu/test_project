<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Updated source code, with the following comments from Comintern, and suggestion from Mathieu:</p>

<ol>
<li>Constants declarations now include types</li>
<li>Additionnal warning regarding non-recognised variable types (enumerations, etc)</li>
<li>One-Liners in the fashion of "If ABC Then Msgbox DEF: End" converted into several-liners</li>
<li>The MyMember With-block has been optimized</li>
<li>Missing type for sArgumentPairs has been added</li>
<li>Var/Val inconsistency in data validation has been fixed</li>
</ol>

<p>Also made the following updates:</p>

<ol>
<li>Simplified Class code (improved readability)</li>
<li>Removed prefixing option as this was prone to generate debate over Hungarian style</li>
</ol>

<hr>

<p>STANDARD MODULE SOURCE CODE</p>

<pre><code>Option Explicit

'##### GEN CLASS CODE FOR VBA #####

'Generates code in the Immediate Window
'Select in a Spreadsheet the list of Properties, Functions, and Methods to be incorporated within the Class.
'The row just above the selection provides the Class Name in the cell of column 1 of the selection, and an optionnal Description in column 2.
'Make sure your class Name begins with a 3-letters prefix (for example 'clsMyClassName').
'Each Row of the selection must represent a Member, and the Columns must be structured as follows: (x = must be provided, o = must not be provided, ? = can be provided)
'Column                            Property    Function    Method      Comment
' - 1:    Member Name                x           x           x
' - 2:    Member Variable Type       x           x           o         Variable Type of the Variable returned by Property or Function. Use "VarType Coll" to declare a Collection of 'VarType'.
' - 3:    Member Rights              x           o           o         Defines if the Member is Read Only, Write Only, or Both: type 'R', 'W', or 'RW'.
' - 4:    Member Description         ?           ?           ?         Will be inserted in the Class Summary Header, as well as in the Member Mini Header. Usually empty if the Member is a Property.
' - 5-6+: Member Input Variables     o           ?           ?         Pairs of value : column N is VarName, column N+1 is VarType. If more than one Input Variable is required, reapeat with columns 7-8, etc.

'Known non-Object Variable Types (Object variables require a Let and New statement)
'WARNING: Enumerations and user-defined Types are treated as Objects -&gt; Changes to be made manually after Code Generation
Private Const cstNonObjectVariables As String = "Variant, Integer, Long, Single, Double, Currency, Date, String, Boolean, Byte, LongLong, LongPtr"

'Maximum lengths per column (for Class Summary Header)
Private Const cstMaxLenName As Long = 25
Private Const cstMaxLenRW As Long = 4
Private Const cstMaxLenVarType As Long = 25

Sub main()

    '***** PREPARE DATA *****

    '# Read and Verify Selection

    Dim rngRawInput As Range
    Set rngRawInput = Selection

    If Selection.Columns.Count &gt; 4 And (Selection.Columns.Count - 4) Mod 2 &lt;&gt; 0 Then
        MsgBox "Selection is wrong, please try again", vbCritical + vbOKOnly, "Excel clsGen"
        End
    End If

    If rngRawInput.Columns.Count &lt; 6 Then Set rngRawInput = rngRawInput.Resize(, 6)


    '# Save Selection Content

    Dim sClassName As String
    Dim sClassDescription As String

    sClassName = rngRawInput.Offset(-1, 0).Cells(1, 1).Value2
    sClassDescription = rngRawInput.Offset(-1, 0).Cells(1, 2).Value2


    Dim arrName() As Variant
    Dim arrVarType() As Variant
    Dim arrRights() As Variant
    Dim arrDescription() As Variant
    Dim arrInputVars() As Variant

    arrName = rngRawInput.Columns(1).Value2
    arrVarType = rngRawInput.Columns(2).Value2
    arrRights = rngRawInput.Columns(3).Value2
    arrDescription = rngRawInput.Columns(4).Value2
    arrInputVars = ActiveSheet.Range(Cells(rngRawInput.Row, rngRawInput.Column + 4), _
                                     Cells(rngRawInput.Row + rngRawInput.Rows.Count - 1, rngRawInput.Column + rngRawInput.Columns.Count - 1)).Value2


    '# Identify Selection Content Member Types and Populate relevant Collections

    Dim cProperties As New Collection
    Dim cFunctions As New Collection
    Dim cMethods As New Collection
    Dim myMember As clsGenClsMember

    Dim i As Integer
    Dim j As Integer
    For i = LBound(arrName) To UBound(arrName)

        With New clsGenClsMember
            .Name = arrName(i, 1)
            .VarType = Replace(Split(arrVarType(i, 1) &amp; " ", " ")(VBAexcelBasics.FunctionsStrings.strCount(CStr(arrVarType(i, 1)), " ")), "Coll", "Collection", , , vbTextCompare) '"oVariable Coll" -&gt; "Collection" (of oVariable type)
            .VarTypeFull = arrVarType(i, 1)
            .Rights = arrRights(i, 1)
            .Description = arrDescription(i, 1)
            .InputVars = Application.WorksheetFunction.Index(arrInputVars, i, 0)

            If StrComp(.Name, "Var", vbTextCompare) = 0 Then
                MsgBox "Member name cannot be 'Var', please try again with another name.", vbCritical + vbOKOnly, "Excel clsGen"
                End
            End If

            If Len(.Name) &gt; cstMaxLenName Or Len(.Rights) &gt; cstMaxLenRW Or Len(.VarTypeFull) &gt; cstMaxLenVarType Then
                MsgBox "Member Name, RW statement, and/or Description are too long, please try again with something shorter.", vbCritical + vbOKOnly, "Excel clsGen"
                End
            End If

            'Member is a Property
            If .Name &lt;&gt; "" And .VarType &lt;&gt; "" And .Rights &lt;&gt; "" And .InputVars(1) = "" Then
                cProperties.Add .Self

            'Member is a Function
            ElseIf .Name &lt;&gt; "" And .VarType &lt;&gt; "" And .Rights = "" And .InputVars(1) &lt;&gt; "" Then
                cFunctions.Add .Self

            'Member is a Method
            ElseIf .Name &lt;&gt; "" And .VarType = "" And .Rights = "" Then
                cMethods.Add .Self

            'Unable to identify Member kind
            Else
                MsgBox "Unable to Identify Content of row " &amp; i &amp; " (" &amp; .Name &amp; "). Please verify and try again.", vbCritical + vbOKOnly, "Excel clsGen"
                End
            End If

        End With

    Next


    '***** PRINT DATA *****

    Dim sPrint As String
    Dim sOutput As String
    Dim arrNonObjectVariables() As String
    arrNonObjectVariables = Split(cstNonObjectVariables, ", ")


    '# Print Summary Header

    sPrint = "'@ClassName" &amp; vbNewLine _
           &amp; "'@ClassDescription" &amp; vbNewLine _

    sPrint = Replace(sPrint, "@ClassName", StrConv(Mid(sClassName, 4, Len(sClassName) - 3), vbUpperCase))
    sPrint = Replace(sPrint, "@ClassDescription" &amp; vbNewLine, IIf(sClassDescription = "", "", sClassDescription &amp; vbNewLine))

    sOutput = sOutput &amp; sPrint

    'Properties
    sOutput = sOutput &amp; vbNewLine _
            &amp; "'Properties:" &amp; vbNewLine

    For Each myMember In cProperties
    With myMember
        sOutput = sOutput &amp; "' - " &amp; .Name &amp; Space(cstMaxLenName - Len(.Name)) _
                                   &amp; .Rights &amp; Space(cstMaxLenRW - Len(.Rights)) _
                                   &amp; .VarTypeFull &amp; Space(cstMaxLenVarType - Len(.VarTypeFull)) _
                                   &amp; .Description &amp; vbNewLine
    End With
    Next

    'Functions
    sOutput = sOutput &amp; vbNewLine _
            &amp; "'Functions:" &amp; vbNewLine

    For Each myMember In cFunctions
    With myMember
        sOutput = sOutput &amp; "' - " &amp; .Name &amp; Space(cstMaxLenName + cstMaxLenRW - Len(.Name)) _
                                   &amp; .VarTypeFull &amp; Space(cstMaxLenVarType - Len(.VarTypeFull)) _
                                   &amp; .Description &amp; vbNewLine
    End With
    Next

    'Methods
    sOutput = sOutput &amp; vbNewLine _
            &amp; "'Methods:" &amp; vbNewLine

    For Each myMember In cMethods
    With myMember
        sOutput = sOutput &amp; "' - " &amp; .Name &amp; Space(cstMaxLenName - Len(.Name)) _
                                   &amp; .Description &amp; vbNewLine
    End With
    Next

    sOutput = sOutput &amp; vbNewLine _
            &amp; "Option Explicit" &amp; vbNewLine _
            &amp; vbNewLine _
            &amp; vbNewLine


    '# Print Private Variables

    For Each myMember In cProperties
    With myMember

        sPrint = "Private p@VarName as @New @VarType" &amp; vbNewLine

        sPrint = Replace(sPrint, "@VarName", .Name)
        sPrint = Replace(sPrint, "@New ", IIf(UBound(Filter(arrNonObjectVariables, .VarType, , vbTextCompare)) &gt; -1, "", "New "))
        sPrint = Replace(sPrint, "@VarType", .VarType)

        sOutput = sOutput &amp; sPrint

    End With
    Next


    '# Print Initialize

    sPrint = vbNewLine _
           &amp; vbNewLine _
           &amp; vbNewLine _
           &amp; "'##### INITIALIZE #####" &amp; vbNewLine _
           &amp; vbNewLine _
           &amp; "Private Sub class_Initialize()" &amp; vbNewLine _
           &amp; "    Debug.Print ""@ClassName initilized"" " &amp; vbNewLine _
           &amp; "End Sub" &amp; vbNewLine

    sPrint = Replace(sPrint, "@ClassName", sClassName)

    sOutput = sOutput &amp; sPrint


    '# Print Properties

    sPrint = vbNewLine _
           &amp; vbNewLine _
           &amp; vbNewLine _
           &amp; "'##### PROPERTIES #####" &amp; vbNewLine

    sOutput = sOutput &amp; sPrint

    For Each myMember In cProperties
    With myMember

        'Prepare Print
        sPrint = vbNewLine _
               &amp; vbNewLine _
               &amp; "'# @VARNAME" &amp; vbNewLine _
               &amp; vbNewLine

        If InStr(.Rights, "R") &lt;&gt; 0 Then sPrint = sPrint &amp; "'@Description" &amp; vbNewLine _
                                                         &amp; "Public Property Get @VarName() as @VarType" &amp; vbNewLine _
                                                         &amp; "    @Set @VarName = p@VarName" &amp; vbNewLine _
                                                         &amp; "End Property" &amp; vbNewLine

        If InStr(.Rights, "W") &lt;&gt; 0 Then sPrint = sPrint &amp; "Public Property @LetSet @VarName(Var as @VarType)" &amp; vbNewLine _
                                                         &amp; "    @Set p@VarName = Var" &amp; vbNewLine _
                                                         &amp; "End Property" &amp; vbNewLine

        'Replace PlaceHolders
        sPrint = Replace(sPrint, "@VARNAME", UCase(.Name))
        sPrint = Replace(sPrint, "@Description", .Description)
        sPrint = Replace(sPrint, "@VarName", .Name)
        sPrint = Replace(sPrint, "@VarType", .VarType)
        sPrint = Replace(sPrint, "@Set ", IIf(UBound(Filter(arrNonObjectVariables, .VarType, , vbTextCompare)) &gt; -1, "", "Set "))
        sPrint = Replace(sPrint, "@LetSet", IIf(UBound(Filter(arrNonObjectVariables, .VarType, , vbTextCompare)) &gt; -1, "Let", "Set"))

        sOutput = sOutput &amp; sPrint

    End With
    Next


    '# Print Functions

    sPrint = vbNewLine _
           &amp; vbNewLine _
           &amp; vbNewLine _
           &amp; "'##### FUNCTIONS #####" &amp; vbNewLine

    sOutput = sOutput &amp; sPrint

    Dim sArgumentPairs as String
    For Each myMember In cFunctions
    With myMember

        'Prepare Print
        sPrint = vbNewLine _
               &amp; vbNewLine _
               &amp; "'# @NAME" &amp; vbNewLine _
               &amp; vbNewLine _
               &amp; "'@Description" &amp; vbNewLine _
               &amp; "Public Function @Name(@ArgumentPairs) as @VarType" &amp; vbNewLine _
               &amp; "    " &amp; vbNewLine _
               &amp; "End Function" &amp; vbNewLine

        'Replace PlaceHolders
        sPrint = Replace(sPrint, "@NAME", UCase(.Name))
        sPrint = Replace(sPrint, "@Description", .Description)
        sPrint = Replace(sPrint, "@Name", .Name)
        sPrint = Replace(sPrint, "@VarType", .VarType)

        'Check if Arguments List provided
        If .InputVars(1) = "" Then
            sPrint = Replace(sPrint, "(@ArgumentPairs)", "")
        Else
            sArgumentPairs = ""
            For i = LBound(.InputVars) To UBound(.InputVars) Step 2
                If .InputVars(i) = "" Then Exit For
                sArgumentPairs = sArgumentPairs &amp; "ByVal " &amp; .InputVars(i) &amp; " as " &amp; .InputVars(i + 1) &amp; ", "
            Next
            sArgumentPairs = Left(sArgumentPairs, Len(sArgumentPairs) - Len(", "))
            sPrint = Replace(sPrint, "@ArgumentPairs", sArgumentPairs)
        End If

        sOutput = sOutput &amp; sPrint

    End With
    Next

    '# Print Methods

    sPrint = vbNewLine _
           &amp; vbNewLine _
           &amp; vbNewLine _
           &amp; "'##### METHODS #####" &amp; vbNewLine

    sOutput = sOutput &amp; sPrint

    For Each myMember In cMethods
    With myMember

        'Prepare Print
        sPrint = vbNewLine _
               &amp; vbNewLine _
               &amp; "'# @NAME" &amp; vbNewLine _
               &amp; vbNewLine _
               &amp; "'@Description" &amp; vbNewLine _
               &amp; "Public Sub @Name(@ArgumentPairs)" &amp; vbNewLine _
               &amp; "    " &amp; vbNewLine _
               &amp; "End Sub" &amp; vbNewLine

        'Replace PlaceHolders
        sPrint = Replace(sPrint, "@NAME", UCase(.Name))
        sPrint = Replace(sPrint, "@Description", .Description)
        sPrint = Replace(sPrint, "@Name", .Name)

        'Check if Arguments List provided
        If .InputVars(1) = "" Then
            sPrint = Replace(sPrint, "@ArgumentPairs", "")
        Else
            sArgumentPairs = ""
            For i = LBound(.InputVars) To UBound(.InputVars) Step 2
                If .InputVars(i) = "" Then Exit For
                sArgumentPairs = sArgumentPairs &amp; "ByVal " &amp; .InputVars(i) &amp; " as " &amp; .InputVars(i + 1) &amp; ", "
            Next
            sArgumentPairs = Left(sArgumentPairs, Len(sArgumentPairs) - Len(", "))
            sPrint = Replace(sPrint, "@ArgumentPairs", sArgumentPairs)
        End If

        sOutput = sOutput &amp; sPrint

    End With
    Next


    '# Export Print Code to Immediate Window

    Debug.Print sOutput

End Sub
</code></pre>

<p>CLASS MODULE SOURCE CODE (Name = clsGenClsMember)</p>

<pre><code>'Stores the characteristics of one Member (one member per row within the user selected range)
Option Explicit

Public Name As String
Public VarType As String
Public VarTypeFull As String
Public Rights As String
Public Description As String
Public InputVars As Variant

'Allow self-reflection
Public Property Get Self() As clsGenClsMember
    Set Self = Me
End Property
</code></pre>

<hr>

<p>The updated code generates the following code, using the following input:</p>

<p><a href="https://i.stack.imgur.com/6S8f6.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/6S8f6.png" alt="enter image description here"></a></p>

<pre><code>'CLIENTFILE
'Description here

'Properties:
' - Id                       R   Long                     A cumulative Id number (attributed during initialization)
' - FirstName                RW  String                   First name
' - LastName                 RW  String                   Last Name
' - DateOfBirth              RW  Date                     Date of Birth
' - Sales                    RW  String Coll              A collection of strings which represent sales ID numbers
' - Proposals                RW  clsProposal Coll         A collection of clsProposal objects which represent the proposals sent in the past

'Functions:
' - NewProposal                  clsProposal              Returns a Proposal for given sales parameters

'Methods:
' - SendBestWishes           Sends a wishes card (why not?)
' - MakePremium              Upgrades the client to Premium

Option Explicit


Private pId as Long
Private pFirstName as String
Private pLastName as String
Private pDateOfBirth as Date
Private pSales as New Collection
Private pProposals as New Collection



'##### INITIALIZE #####

Private Sub class_Initialize()
    Debug.Print "clsClientFile initilized" 
End Sub



'##### PROPERTIES #####


'# ID

'A cumulative Id number (attributed during initialization)
Public Property Get Id() as Long
    Id = pId
End Property


'# FIRSTNAME

'First name
Public Property Get FirstName() as String
    FirstName = pFirstName
End Property
Public Property Let FirstName(Var as String)
    pFirstName = Var
End Property


'# LASTNAME

'Last Name
Public Property Get LastName() as String
    LastName = pLastName
End Property
Public Property Let LastName(Var as String)
    pLastName = Var
End Property


'# DATEOFBIRTH

'Date of Birth
Public Property Get DateOfBirth() as Date
    DateOfBirth = pDateOfBirth
End Property
Public Property Let DateOfBirth(Var as Date)
    pDateOfBirth = Var
End Property


'# SALES

'A collection of strings which represent sales ID numbers
Public Property Get Sales() as Collection
    Set Sales = pSales
End Property
Public Property Set Sales(Var as Collection)
    Set pSales = Var
End Property


'# PROPOSALS

'A collection of clsProposal objects which represent the proposals sent in the past
Public Property Get Proposals() as Collection
    Set Proposals = pProposals
End Property
Public Property Set Proposals(Var as Collection)
    Set pProposals = Var
End Property



'##### FUNCTIONS #####


'# NEWPROPOSAL

'Returns a Proposal for given sales parameters
Public Function NewProposal(ByVal Title as String, ByVal ExpDate as Date) as clsProposal

End Function



'##### METHODS #####


'# SENDBESTWISHES

'Sends a wishes card (why not?)
Public Sub SendBestWishes(ByVal Address as String)

End Sub


'# MAKEPREMIUM

'Upgrades the client to Premium
Public Sub MakePremium()

End Sub
</code></pre>
    </div>