<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Java naming conventions</h2>

<p>Please follow the <a href="https://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">Java naming conventions</a>. Variables should start with a lowercase character, so it should read (also note the placing of <code>[]</code> makes it clearer that stack is an array of <code>Character</code>)</p>

<pre><code>static  Character[] stack= new Character[25]; 
</code></pre>

<h2>Why maximum stack size?</h2>

<p>There is no given requirement for the limit of the size of the stack, so you should not use a fixed-size data structure like array, but rather opt for something like <code>List</code></p>

<pre><code> static  List&lt;Character&gt; stack= new ArrayList&lt;&gt;(); 
</code></pre>

<h2>Separation of concerns</h2>

<p>There are two functionalities in you code directly interwoven. First, there is the 'Stack', then there is the usage of the <code>Stack</code>. Move all the <code>Stack</code> related functionality to its own class.</p>

<h2>Don't use magic values</h2>

<p>If there is an error in the state of the stack (for example, if you try to <code>pop()</code> an empty stack, you could throw an <code>Exception</code>, for example a <code>NoSuchElementException()</code>. Or you can have the Stack of Optional and return <code>Optional.empty()</code>. Or even return <code>null</code> if no empty values on the stack are allowed.</p>

<p>See for example the question <a href="https://codereview.stackexchange.com/q/171862/21279">here</a>. Also check the answers. </p>

<h2>Pair the parentheses, separate to own data type</h2>

<p>You could implement a Delimiter enum type, like such:</p>

<pre><code>enum Delimiter
{
  PARENTHESES( '(', ')' ),
  BRACES     ( '{', '}' ),
  BRACKETS   ( '[', ']' );
  //easily expandable with for example: 〔 〕 – tortoise shell brackets


  public final char openChar;
  public final char closeChar;

  public Delimiter(char openChar, char closeChar)
  {
      this.openChar = openChar;
      this.closeChar = closeChar;
  }
}
</code></pre>

<p>Then, when looping over the characters, you could use:</p>

<pre><code> for (i = 0; i&lt; str.length(); i++)
 {
     char c = str.charAt(i);
     for (Delimiter delimiter : Delimiter.values())
     {
          if (c == delimiter.openChar)
          {
              stack.push(delimiter);
          } 
          else if (c == delimiter.closeChar)
          {
              //pop the stack and check if the closechar matches the openchar of the popped element

          }
     }
</code></pre>
    </div>