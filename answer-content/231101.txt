<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use differential measurements to eliminate the contribution of overhead</h1>

<p>By starting a bash script that runs the desired command multiple times, you are adding even more overhead (namely, starting the shell, which has to interpret the shell script, which then still has some overheads each time it executes the command). You are getting rid of only parts of the overhead by running many iterations in a batch, and only if the number of iterations is very high.</p>

<p>The easiest way to remove the overhead of starting a subprocess from the measurement is to measure twice, once with the actual process you want to benchmark, and once with a dummy process that doesn't do anything, and then use the difference of the two measurements.</p>

<h1>Avoid adding more programming languages</h1>

<p>Adding bash scripts doesn't help solve your problem, it only increases the number of programming languages and runtime dependencies, making your benchmark more complex than it needs to be.</p>

<p>If the goal was just to perform benchmarks of C++ code, I would recommend that you just use a C++ benchmark library, such as <a href="https://github.com/google/benchmark" rel="noreferrer">Google Benchmark</a>. It won't give you fancy live graphs, but if you are just interested in the numbers, it's more than enough. Alternatively:</p>

<h1>Split the problem into smaller pieces</h1>

<p>Your Python code tries to do multiple things at once:</p>

<ol>
<li>It compiles the C++ code.</li>
<li>It benchmarks the resulting executables.</li>
<li>It displays a (live) graph of the results.</li>
</ol>

<p>I would try to split your problem into these parts, and solve them independently. In particular, compiling the code is typically something you would let a build system solve. It can be something as simple as <code>make</code> in this case. Just write a <code>Makefile</code> that compiles the C++ code. You can even add a target to the <code>Makefile</code> that starts the benchmark if you want.</p>

<p>Second, use an existing benchmarking library to do the actual measurements. Google Benchmark for example will take care of running multiple iterations while removing unwanted overhead from the measurement results.</p>

<p>Finally, the Python script can be reduced to just starting the benchmarks and drawing the results, without having to worry about anything else.</p>
    </div>