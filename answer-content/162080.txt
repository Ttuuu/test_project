<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Range-based <code>for</code> loop</h3>

<blockquote>
<pre><code>for (int i = 0; i &lt; textList.size(); i++){
    String[] split = splitTxt(textList.get(i), "\\s+");
</code></pre>
</blockquote>

<p>You can simplify this with a range-based <code>for</code> loop.  </p>

<pre><code>for (String text : textList) {
    String[] split = text.split("\\s+");
</code></pre>

<p>No need to manage <code>i</code> manually.  </p>

<p>I also eliminated the call to <code>splitTxt</code>, which makes the code smaller and easier to read.  </p>

<h3>Bug</h3>

<blockquote>
<pre><code>    List&lt;String&gt; friends = new ArrayList&lt;&gt;();
    List&lt;String&gt; interests = new ArrayList&lt;&gt;();
    if (split.length &gt;= 2){
        String[] interestArray = splitTxt(split[2], ";");
</code></pre>
</blockquote>

<p>This will cause an array index out of bounds when the <code>split.length</code> is 2.  </p>

<pre><code>    if (split.length &lt; 3) {
        continue;
    }

    String[] interestArray = splitTxt(split[2], ";");
    List&lt;String&gt; friends = new ArrayList&lt;&gt;();
    List&lt;String&gt; interests = new ArrayList&lt;&gt;();
</code></pre>

<p>When <code>split</code> is of length 2, only 0 and 1 are valid indexes.  So <code>split[2]</code> would be out of bounds.  Making it a 3 instead of a 2 would fix that.  </p>

<p>Switching to an early exit changes from <code>&gt;=</code> to <code>&lt;</code> and allows us to reduce the level of indent.  It works here because the entire code for an iteration after that point is inside the <code>if</code>.  </p>

<p>There is no point to declaring and initializing <code>friends</code> and <code>interests</code> if we're not going to use them.  So do those tasks after the check, not prior.  </p>

<h3><code>asList</code></h3>

<blockquote>
<pre><code>        String[] interestArray = splitTxt(split[2], ";");
        for(int j = 0; j &lt; interestArray.length; j++){
            interests.add(interestArray[j]);
        }
        Accounts.put(split[0],split[1]);
        intrestDic.put(split[0],interests);
</code></pre>
</blockquote>

<p>You don't need to manually copy one by one.  </p>

<pre><code>        Accounts.put(split[0],split[1]);
        intrestDic.put(split[0], new ArrayList&lt;String&gt;(Arrays.asList(split[2].split(";"))));
</code></pre>

<p>Using a copy constructor with <code>Arrays.asList</code> will allow the whole thing to be copied at once.  </p>

<h3>Summary</h3>

<pre><code>private static final int HEADER_SIZE = 3;
</code></pre>

<p>and later </p>

<pre><code>for (String text : ReadFile(FileName)) {
    String[] split = text.split("\\s+");
    if (split.length &lt; HEADER_SIZE) {
        continue;
    }

    Accounts.put(split[0], split[1]);
    intrestDic.put(split[0], new ArrayList&lt;String&gt;(Arrays.asList(split[2].split(";"))));
    List&lt;String&gt; friends = Arrays.asList(split).subList(HEADER_SIZE, split.length));
    FriendsDic.put(split[0], new ArrayList&lt;String&gt;(friends);
}
</code></pre>

<p>This isn't necessarily more efficient, although it could be (depending on how Java optimizes it).  The primary advantage of this version is that it leaves maintenance to the Java engine.  </p>

<h3>Hibernate</h3>

<p>Hibernate (and Java Persistence Annotations in general) is for exactly this task.  It maps classes to storage and vice versa.  Now, that might be a heavyweight solution, but it is one that exactly addresses the problem.  </p>

<p>You can write persistence code manually, without annotations.  But I would generally still use a database if you intend the code to scale at all.  You don't want to read all the records every time you want one record.  Rather than reinventing that wheel, just use the existing solution:  a database.  </p>

<p>Hibernate makes it comparatively easy to switch from one database to another.  </p>
    </div>