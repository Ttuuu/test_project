<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>Why do you need a <code>create_head_node()</code> that takes a node as the first parameter? Seems counter intuitive. Personally I would just remove that function does not seem needed to me.</p>

<p>The other thing is that you don't seem to have a way to initialize an empty list (yes this can simply be the NULL pointer but it does leave it easy to accidentally have an uninitialized list).</p>

<p>You can make the design better by separating Node and the list into different types. That way a lot of the work for tail is removed.</p>

<p>i.e. It is easy to have A List and a Node.</p>

<pre><code>struct Node;
struct List;
typedef struct Node Node;
typedef struct List List;

struct List
{
    Node*   head;
    Node*   tail;
    int     count;
};

struct Node
{
    int     value;
    Node*   next;
    Node*   prev;
};
</code></pre>

<h2>Code Review</h2>

<p>The <code>create_head_node()</code> seem to be more like reset the head node to this value and leak the rest of the list.</p>

<pre><code>node *create_head_node(node *head, int point){
    head-&gt;point=point;
    head-&gt;p_node=NULL;
    head-&gt;n_node=NULL;
    return head;
}
----
node*  list = NULL;
list = insert_head(list, 10);
list = insert_head(list, 20);

/*
 * now lets reset the head to 30 and leak the tail (20)
 */
list = create_head_node(list, 30);
</code></pre>

<hr>

<p>Why does it matter if there is currently no head node?</p>

<pre><code>node *insert_head(node *head, int point){
    if (head==NULL){
        printf("no head exist");
        return 0;
    }
</code></pre>

<p>Can't I add to the head of an empty list?<br>
Also why are you returning <code>0</code>. That is an integer. An empty pointer is represented by <code>NULL</code>.</p>

<hr>

<p>Again I am not sure we I can add to the tail of an empty list.</p>

<pre><code>void insert_tail(node *head, int point){
    if (head==NULL){
        printf("no head exist");
        return;
    }
</code></pre>

<hr>

<pre><code>node *insert_at(node *head, int point, int pos){
</code></pre>

<p>Yes sure it is an error.</p>

<pre><code>    while (pos&gt;count)
    {
        printf("choose %d positions to add. choose again: ", count); scanf("%d", &amp;pos);
    }
</code></pre>

<p>But this code can not determine the context that it is being used within. So it should not be generating an error message. You should be returning some form of status for the calling code to check. If the calling code decides an error message is appropriate then it can print the error message.</p>

<p>This is called the separation of concerns. Code either handles resource management (creating an maintaining a linked list) or it handles business logic (deciding if an error is critical or how to inform the user about errors).</p>

<p>Does this section not look exectly like <code>insert_head()</code>?</p>

<pre><code>        node *temp=(node*)malloc(sizeof(node));
    temp-&gt;point=point;
    temp-&gt;n_node=p;
    temp-&gt;p_node=p-&gt;p_node;
    if(p-&gt;p_node!=NULL) p-&gt;p_node-&gt;n_node=temp;
    p-&gt;p_node=temp;
    return head;
</code></pre>

<hr>

<pre><code>int count_node(node *head){
    ....
    free(p);
</code></pre>

<p>You are freeing nodes that are still in the list?</p>

<h3>A Simpler version;</h3>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdio.h&gt;

struct Node;
struct List;
typedef struct Node Node;
typedef struct List List;

struct List
{
    Node*   head;
    Node*   tail;
    int     count;
};

struct Node
{
    int     value;
    Node*   next;
    Node*   prev;
};

List* createList();
void  destroyList(List* list);

int   countList(List* list);

bool insertHead(List* list, int value);
bool insertTail(List* list, int value);
bool insertAt(List* list, int value, int pos);

bool deleteHead(List* list);
bool deleteTail(List* list);
bool deleteAt(List* list, int pos);

typedef void (*Action)(int);
void visitNode(List* list, Action action);

/* Don't define a print function.
 * Use the visitor pattern to visit each node.
 * Then printing the list can simply be a function that prints each node as it is visited.
 */


/* Private Function */
Node* allocateNewNode(int value, Node* next, Node* prev)
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode-&gt;value = value;
    newNode-&gt;next  = next;
    newNode-&gt;prev  = NULL;
    return newNode;
}

List* createList()
{
    List* newList = (List*)malloc(sizeof(List));
    newList-&gt;head = NULL;
    newList-&gt;tail = NULL;
    newList-&gt;count = 0;
    return newList;
}
void  destroyList(List* list)
{
    /*
     * remove all elements
     */
    Node* head;
    Node* next;
    for(head = list-&gt;head;head;head = next) {
        next = head-&gt;next;
        free(head);
    }
    /*
     * remove the list
     */
    free(list);
}
int countList(List* list)
{
    return list-&gt;count;
}

bool insertHead(List* list, int value)
{
    Node* newNode = allocateNewNode(value, list-&gt;head, NULL);
    if (list-&gt;head) {
        list-&gt;head-&gt;prev = newNode;
    }
    list-&gt;head = newNode;
    if (list-&gt;tail == NULL) {
        list-&gt;tail = newNode;
    }
    ++newList-&gt;count;
    return true;
}
bool insertTail(List* list, int value)
{
    Node* newNode = allocateNewNode(value, NULL, list-&gt;tail);
    if (list-&gt;tail) {
        list-&gt;tail-&gt;next = newNode;
    }
    list-&gt;tail = newNode;
    if (list-&gt;head == NULL) {
        list-&gt;head = newNode;
    }
    ++newList-&gt;count;
    return true;
}
bool insertAt(List* list, int value, int pos)
{
    if (pos == 0) {
        return insertHead(list, value);
    }
    if (pos &gt;= list-&gt;count) {
        return insertTail(list, value);
    }

    Node* loop = list-&gt;head;
    while(--pos) {
        loop = loop-&gt;next;
    }
    Node* newNode = allocateNewNode(value, loop-&gt;next, loop);
    if (newNode-&gt;next) {
        newNode-&gt;next-&gt;prev = newNode;
    }
    if (newNode-&gt;prev) {
        newNode-&gt;prev-&gt;next = newNode;
    }
    ++newList-&gt;count;
    return true;
}

bool deleteHead(List* list)
{
    Node* old = list-&gt;head;
    if (list-&gt;head) {
        list-&gt;head = list-&gt;head-&gt;next;
        if (list-&gt;head == NULL) {
            list-&gt;tail = NULL;
        }
        --newList-&gt;count;
    }
    free(old);
    return true;
}
bool deleteTail(List* list)
{
    Node* old = list-&gt;tail;
    if (list-&gt;tail) {
        list-&gt;tail = list-&gt;tail-&gt;prev;
        if (list-&gt;tail == NULL) {
            list-&gt;head = NULL;
        }
        --newList-&gt;count;
    }
    free(old);
    return true;
}
void visitNode(List* list, Action action)
{
    Node* loop = list-&gt;head;
    for(;loop;loop = loop-&gt;next) {
        action(loop-&gt;value);
    }
}

void printInt(int value)    {fprintf(stdout, "%d ", value);}
void printList(List* list)  {visitNode(list, printInt);}
</code></pre>
    </div>