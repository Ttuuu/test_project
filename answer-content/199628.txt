<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Code organization and naming</h3>

<p>It's good that you organized your code into functions,
and that you set everything in motion after all the function definitions,
using a few simple terms that drive your program:</p>

<blockquote>
<pre><code>set_word
set_word_length
display_welcome_message
main
</code></pre>
</blockquote>

<p>It's a pity that the simple terms that drive the program are not human-friendly, and not natural.
Better names and some rethinking can help:</p>

<ul>
<li><p><code>set_word</code> -&gt; My first reaction reading this is "what word?", and "set to what?". If you play this game with a friend, would you ask him to "set word"? Probably you'd phrase it more like "pick a random word". In a program, the name <code>init_random_word</code> would sound quite natural to me.</p></li>
<li><p><code>set_word_length</code> -&gt; Again, my first reaction is "set to what?" More importantly, the purpose of this unclear, I have to read the implementation to understand. The fact that you need a <code>word_length</code> variable is a low-level implementation detail, and as such it would be better to not require this function call at the top-level. It would be better to move this step inside the <code>init_random_word</code> function, directly (the code itself) or indirectly (call to the function that performs this step).</p></li>
<li><p><code>display_welcome_message</code> -&gt; This is good as it is, perfectly clear what it will do and why.</p></li>
<li><p><code>main</code> -&gt; A more natural and intuitive name would be <code>run_hangman_game</code>. This and the other calls could actually be in a function called <code>main</code>, and you could call <code>main</code> to setup and run the game.</p></li>
</ul>

<p>As to your specific question about code organization:</p>

<blockquote>
  <p>Does anyone know a book that like explains which kind of code needs to be in which kind of function? [...] Like how do you guys feel that code should be in another place?</p>
</blockquote>

<p>I recommend the book <em>Code Complete</em>. It's not a direct answer to your question, but it's my favorite fundamental book for programmers (especially the chapter on <em>Abstract Data Types</em>), and I think it will guide you on the path of developing good programmer instincts. As a more direct answer, I suggest to read up on <em>SOLID principles</em>, especially the <em>Single Responsibility Principle</em> is relevant for designing reusable, testable program elements.</p>

<h3>Picking a random word</h3>

<p>This is an extremely poor implementation of picking a random word from an array:</p>

<blockquote>
<pre><code>until [[ $random_nr -lt 6 ]] &amp;&amp; [[ $random_nr -gt 0 ]]; do 
    random_nr=${RANDOM};
    word=${words[$random_nr]}
done
</code></pre>
</blockquote>

<p>One big problem is that <code>RANDOM</code> returns a random value between 0 and 32767.
It can be a lot of wasted cycles until you get a number between 1 and 5.
The common approach is to get a number between 0 and <code>n</code> using modulo:</p>

<pre><code>num=$((RANDOM % n))
</code></pre>

<p>The same thing, but in a slightly more natural and readable form in Bash:</p>

<pre><code>((num = RANDOM % n))
</code></pre>

<p>Be careful, because this formula gets a random number between 0 and <code>n</code>,
not 1 and <code>n</code>.
The current program needs a random number between 1 and 5,
because <code>words[0]</code> is not assigned, only <code>words[1]</code> ... <code>words[5]</code>.
You could adjust the formula to account for that:</p>

<pre><code>((num = 1 + RANDOM % (n - 1)))
</code></pre>

<p>But a much simpler way will be to change the program,
to require a number in the range of 0 and <code>n</code>,
by assigning values in <code>words</code> starting from element 0 instead of 1.
This is also the most natural way to work with arrays with 0-based indexes as in Bash, and in most programming languages.</p>

<p>Note that we can assign all elements at once,
which is shorter, and most importantly,
we don't need to worry about writing the correct indexes:</p>

<pre><code>words=("twitter" "facebook" "myspace" "youtube" "amazon")
</code></pre>

<p>And then we can get a random word from this array with:</p>

<pre><code>word=${words[RANDOM % ${#words[@]}]}
</code></pre>

<p>This is safe, fast, and simple.
We can also eliminate the <code>random_nr</code> variable and the <code>set_word_length</code> function,
they are simply no longer needed.</p>

<h3>Arithmetic context in Bash</h3>

<p>As mentioned earlier, instead of this:</p>

<blockquote>
<pre><code>mistakes=$((mistakes+1))
</code></pre>
</blockquote>

<p>This is a simpler syntax:</p>

<pre><code>((mistakes = mistakes + 1))
</code></pre>

<p>Notice that within the arithmetic context <code>((...))</code> the <code>$</code> is optional in variable names (except some special variables such as the positional variables <code>$1</code>, <code>$2</code>, ... and a few others).</p>

<p>And this example can be further simplified to either of these forms:</p>

<pre><code>((mistakes += 1))
((mistakes++))
</code></pre>

<h3>Iterating over letters of a string</h3>

<p>Avoid <code>seq</code> as much as possible, it's not available in many environments,
and a native Bash alternative exists, in the form of counting loops.
For example, instead of this:</p>

<blockquote>
<pre><code>for i in $(seq 1 $word_length); do
</code></pre>
</blockquote>

<p>You can write in native Bash:</p>

<pre><code>for ((i = 1; i &lt;= word_length; i++)); do
</code></pre>

<p>(Notice that I didn't write <code>$</code> in front of <code>i</code> and <code>word_length</code>,
since the expressions are within an arithmetic context <code>((...))</code>,
the <code>$</code> are unnecessary.)</p>

<p>Now let's fix the loop in the code:</p>

<blockquote>
<pre><code>for i in $(seq 1 $word_length); do
    if [[ $i -ne $word_length ]]; then
        position=$((i-1))
        if [[ ${word:position:1} == $user_input ]]; then
            correct_counter=$((correct_counter+1))
            correct_letters[$correct_counter]=$user_input

            continue_game
        fi
    fi
done
</code></pre>
</blockquote>

<p>Not only <code>seq</code> is inferior to native Bash counting loops,
it also forced you to add a conditional <code>$i -ne $word_length</code> in the loop body,
and then you also needed to compute <code>position</code> as <code>$((i-1))</code>.
All this complexity can go away if you rewrite with a counting loop:</p>

<pre><code>for ((i = 0; i &lt; ${#word}; i++)); do
    if [[ ${word:i:1} == $user_input ]]; then
        ((correct_counter++))
        correct_letters[$correct_counter]=$user_input

        continue_game
    fi
done
</code></pre>

<p>Notice that I didn't use the <code>word_length</code> variable,
it's no longer necessary here.
I suggest to apply the same technique to eliminate it from the rest of the program.</p>

<h3>Code organization 2</h3>

<p>Now that I've reached the implementation of the <code>display_result</code> function,
I see that it calls a <code>continue_game</code> function from its loop,
which will call <code>main</code> (among other functions).
These recursive calls generate a deep stack,
which is difficult to understand and follow.</p>

<p>A better way is to reorganize the program without such recursive calls.
Use a loop that takes user input,
checks the result,
tracks the program state,
and either continues to take user input or terminates with the final result (user won or lost).</p>

<h3>Minor things</h3>

<ul>
<li><p>The program is full of typos and grammar mistakes. It's good to pay attention to details.</p></li>
<li><p><code>imploded_letters</code> and <code>place</code> are defined but not used. Delete them.</p></li>
<li><p><code>correct_counter</code> and <code>mistakes</code> should not be necessary. With minor changes, you can get these values from <code>${#correct_letters[@]}</code> and <code>${#mistake_letters[@]}</code>, respectively. Note also that it would be better to initialize these arrays as <code>correct_letters=()</code> and <code>mistake_letters=()</code>, and to append values to them with <code>correct_letters+=($user_input)</code>.</p></li>
<li><p>The flags of <code>echo</code> are not portable, such as <code>-n</code>. Without flags, <code>echo</code> is fine. If you really want to suppress the newline character, a possible alternative is <code>printf</code>, if you don't mind that it's not POSIX. If possible, it's best to find a way to avoid both, for example by designing the user interface in such a way that it doesn't need to suppress the newline anywhere.</p></li>
</ul>
    </div>