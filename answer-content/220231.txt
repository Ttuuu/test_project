<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<ul>
<li><p>Nice usage of arrow functions and spread operators. You can extend this to the function name as well: </p>

<pre><code>const lengthOfLongestSubstring = s =&gt; { ... };
</code></pre></li>
<li><p>The code switches between two and four spaces within a block and between blocks. Choose one and stick with it throughout the entire program (the auto-formatter built into Stack Exchange does the job well).</p></li>
<li><p>Avoid the intermediate variable <code>len</code> here:</p>

<pre><code>    const len = s.length;
    if (len &lt; 2) { return len; }
</code></pre>

<p>The extra variable obfuscates the direct and explicit <code>s.length</code> and offers no performance benefit (as it would in C with <code>strlen</code>, which is linear). <code>s.length</code> is a numerical property and doesn't walk the list per call.</p></li>
<li><p>Use vertical whitespace around blocks. Here's how I'd rewrite the above lines:</p>

<pre><code>    ...
    if (s.length &lt; 2) { 
      return s.length; 
    }

    let res = [];
    ...
</code></pre>

<p>Then again, I prefer to omit this logic because the rest of the function body will handle the precondition automatically.</p></li>
<li><p>Variable names can be a bit more specific: <code>tmp</code> =&gt; <code>seen</code>, <code>x</code> =&gt; <code>char</code>, <code>res</code> =&gt; <code>longest</code>.</p></li>
</ul>

<h2>Performance</h2>

<p>Your solution runs in O(len(longest_subsequence) * n) time, which is in the 70th percentile of solutions for this problem. The culprits are <code>includes</code>, <code>findIndex</code>, <code>slice</code> and spread inside the <code>for</code> loop, all of which require visiting up to every element in <code>tmp</code>.</p>

<p>We can improve the time complexity to linear and reach the 99th percentile. The key is using an object as a hash map instead of an array to keep track of the history. For each character in <code>s</code>, add it to the object with a value of its latest-seen index. Keep track of the start of the current candidate run. Whenever we encounter an item already in the map, check to ensure its index is indeed inside the current run. If so, record a new longest (if applicable) and begin a new candidate run.</p>

<p>Here's the code:</p>

<pre><code>const lengthOfLongestSubstring = s =&gt; {
  let longest = 0;
  let start = 0;
  const seen = {};

  [...s].forEach((char, i) =&gt; {
    if (char in seen &amp;&amp; start &lt;= seen[char]) {
      longest = Math.max(i - start, longest);
      start = seen[char] + 1;
    }

    seen[char] = i;
  });

  return Math.max(s.length - start, longest);
};
</code></pre>
    </div>