<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Combining them to reduce duplicate code is not a good approach. Prefer small composable components over large Swiss army knife components. Think <a href="https://stackify.com/solid-design-principles/" rel="nofollow noreferrer">single responsibility principle</a>.</p>

<p>If your component takes a lot of properties, it may be a good candidate to make smaller.  If you are testing for type, you may want to create multiple controls.</p>

<pre><code>{type === 'date' &amp;&amp; &lt;div className="date-field__icon" /&gt;}
</code></pre>

<p>In your example, I recommend 
generating a generic wrapper component with a nested child.</p>

<p>Create wrapper component:</p>

<pre><code>class LabelWrapper extends Component {
  ...
  render() {
   const {text, icon, error, children} = this.props;
   const ErrorMessage = this.getError(error);
   const Icon = this.getIcon(icon);
   return (
     &lt;div className="label-wrapper"&gt;
       &lt;label&gt;{text}&lt;/label&gt;
       &lt;ErrorMessage/&gt;
       {children}
       &lt;Icon&gt;
     &lt;/div&gt;
    );
  }
  getIcon(icon) {
    return icon &amp;&amp; &lt;div className={icon} /&gt;}
  }
}
</code></pre>

<p>Use Wrapper in form passing in child component:</p>

<pre><code>&lt;LabelWrapper
  text='Full Name'
  error={error.fullName}&gt;
  &lt;TextInput
    id='fullName'
    value={form.firstName}
    handleChange={handleChange.firstName}/&gt;
&lt;/LabelWrapper&gt;
&lt;LabelWrapper
  text='Choose Date'
  icon='date-field__icon'
  error={error.date}&gt;
  &lt;FieldSelect
    value={form.date}
    handleChange={handleChange.chooseDate}
    fieldData={fieldData} /&gt;
&lt;/LabelWrapper&gt;
</code></pre>

<p>You can also compose a more specific control. This will prevent your form from getting too large.</p>

<pre><code>class ChooseDate extends Component {
  ...
  render() {
   const {fieldData, handleChange, value, error} = this.props;
   return (
     &lt;LabelWrapper
      text='Choose Date'
       icon='date-field__icon"'
       error={error}
       &lt;FieldSelect
         value={value}
         handleChange={handleChange}
         fieldData={fieldData}/&gt;
      &lt;/LabelWrapper&gt;
    );
  }
}
</code></pre>

<p>A few other notes:</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=4anAwXYqLG8" rel="nofollow noreferrer">Duplicate react code is fine in many situations</a> (15:20)</li>
<li>Keep logic out of the render</li>
<li>Move show / hide logic into helper functions</li>
<li>Move complex logic into selectors to keep the control simple</li>
</ul>

<p>Resources:</p>

<ul>
<li><a href="https://camjackson.net/post/9-things-every-reactjs-beginner-should-know" rel="nofollow noreferrer">9 things every React.js beginner should know</a></li>
</ul>
    </div>