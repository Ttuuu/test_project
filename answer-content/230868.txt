<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall looks good, so take below as a few ideas, nothing's really wrong
with it.</p>

<p>Except using <code>setf</code> without a previous variable declaration, that's just
not guaranteed to even work (assuming that's what the code snippet showed with <code>(setf bst nil)</code>).</p>

<hr>

<p>I'm gonna try this on CCL:</p>

<p>Evaluating the structure definition gives me an unused warning for the
<code>d</code> parameter of the node printing function - consider declaring it
ignored to silence that: <code>(declare (ignore d))</code>.</p>

<p><code>(l nil)</code> doesn't add much on top of <code>l</code> (same goes for <code>(r nil)</code>).
Also consider using a more simple positional calling convention, after
all the <code>:elt</code>, <code>:l</code> (which really could just be <code>:left</code> btw.)
etc. gets kind of verbose:</p>

<pre><code>(defstruct (node (:constructor make-node (elt count &amp;optional l r)))
  elt count l r)
</code></pre>

<p>Also I've rotated the order of elements so that <code>(make-node obj 1)</code> is
straightforward.</p>

<p>Okay, so <code>bst-insert</code> now:</p>

<p>Consider using <code>cond</code> for deep <code>if</code> blocks to reduce the level of
indentation.  I suppose here it doesn't help too much though.</p>

<p><del><code>eql</code> can be simplified to <code>eq</code> here, that's sometimes important, here
it's just for completeness' sake though.</del>  Edit: Jumped to quickly on that, <code>eql</code> is correct since there were integers in the example.  For a generally usable tree you might want to make it possible to customise the equality test.</p>

<p>The rest of the body looks okay, a bit of reshuffling could possibly
reduce the duplication a bit, but really it's all about clarity, how
easy it is to discern what's happening and to detect any possible
mistakes easily.</p>

<p>Thus, I'd arrive at this, perhaps:</p>

<pre><code>(defun bst-insert (obj bst &lt;)
  (if (null bst)
      (make-node obj 1)
      (let ((elt (node-elt bst)))
        (if (eq obj elt)
            bst
            (let* ((less-than (funcall &lt; obj elt))
                   (old-l (node-l bst))
                   (old-r (node-r bst))
                   (new-l (if less-than (bst-insert obj old-l &lt;) old-l))
                   (new-r (if less-than old-r (bst-insert obj old-r &lt;))))
              (make-node
                   elt
                   (+ (node-size new-l) (node-size new-r) 1)
                   new-l
                   new-r))))))
</code></pre>

<p>Personally, I'd also go for long names, or really short ones.  Like,
either <code>o</code> or <code>object</code>; <code>obj</code> and <code>elt</code> just make me wonder what is
meant most of the time.  Note that <code>elt</code> is also a regular CL function,
so <code>e</code> or <code>element</code> might be better.</p>

<hr>

<p>Wrt. your other points:</p>

<ul>
<li>There are of course macros to reduce the nesting for, say, <code>let</code>, but
it's hardly a problem.  Just remember that <code>let</code> can create multiple
bindings, so grouping things makes sense.</li>
<li><code>prog1</code> is useful, but as you said, I don't see much value in using it
here.</li>
</ul>
    </div>