<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Accessing statics via <code>this</code></h2>

<p>Defining the object reference outside the object just to gain access via a miss used accessor (<code>this</code>) is a hack and not how to use static objects to handle events.</p>

<h3>Binding objects to a function</h3>

<p>First what you did could have been a little less complicated</p>

<p>You had something like</p>

<pre><code>class Editor {
    static nodeClick(event){
        this.editable(event.target);  // miss used 'this' to reference 'Editor'
    }
    static editable() {} 
}


function fixThis(object,functionName){
    const fixedFunc = function(){
        object[functionName].apply(object, arguments);
    };
    return fixedFunc;
}
node.addEventListener('click', fixThis(Editor,'nodeClick'));
</code></pre>

<p>Could have written the binding using <code>Function.call</code></p>

<pre><code>const  thisFunc = (obj, func) =&gt; (...args) =&gt; func.call(obj, ...args);
node.addEventListener('click', fixThis(Editor, Editor.nodeClick));
</code></pre>

<p>or using <code>Function.bind</code> as one line</p>

<pre><code>node.addEventListener('click', Editor.nodeClick.bind(Editor));
</code></pre>

<h2>Access static via name</h2>

<p>Static functions should access properties via the defined name. This makes it clear that you are accessing the static properties and conforms with static property accessed from within an instance of the object.</p>

<p>Your objects static access via name should look like</p>

<pre><code>class Editor {
    static nodeClick(event){
        Editor.editable(event.target);  // correct reference to 'Editor'
    }
    static editable() {}
}
</code></pre>

<p>Then you don't need to bind <code>Editor</code> to <code>Editor.nodeClick</code> to maintain the correct reference. Just pass the static function as is, to the event</p>

<pre><code>node.addeventListener("click", Editor.nodeClick);
</code></pre>
    </div>