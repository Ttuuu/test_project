<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A first step towards writing an AI is to give this an interface.</p>

<p>First, let's rewrite the "AI" you are currently using as a class:</p>

<pre><code>from itertools import cycle

class Cycler:
    def __init__(self):
        self.cycle = cycle([Keys.RIGHT, Keys.UP, Keys.LEFT, Keys.DOWN])

    def next(self, *args):
        return next(self.cycle)
</code></pre>

<p>Which you can use like this in your current code:</p>

<pre><code>ai = Cycler()
while True:
    html.send_keys(ai.next())
    try:
        ...
</code></pre>

<p>In the future you might want to be smarter than that and for that you would need the state of the board to be passed along to the AI.</p>

<pre><code>Class GameStatePrinter(Cycler):
    def next(self, game_state, *args):
        print(game_state)
        return super(self, GameStatePrinter).next(*args)
</code></pre>

<p>This is not really any smarter, but you can pass it the current game state and it will print it:</p>

<pre><code>ai = GameStatePrinter()
while True:
    current_state = get_current_state(html)
    html.send_keys(ai.next(current_state))
    ...
</code></pre>

<p>An actual smart bot would then of course act differently according to the information in the board, whereas this one just does the same thing as <code>Cycler</code>, which it inherits from. </p>

<p>This logic is left as an exercise for the reader.</p>
    </div>