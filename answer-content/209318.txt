<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>What is it for?</h1>
<p>Without knowing what you would use this for I can only go by your question.</p>
<p>The behaviour of <code>stc</code> is not what the  question's title suggests as it is very easy to make it fail or behave in a non intuitive manner.</p>
<h2>Forever pending</h2>
<p>Consider the following use example</p>
<pre><code>stc.sleep(1000, "test").then(()=&gt;log("Test timeout");  // this promise is never resolved
setTimeout(()=&gt;{
        stc.sleepProlong(2000, "test").this(()=&gt;log("Test prolonged timeout")
    },200);
</code></pre>
<p>The first promise is left pending and will never be resolved.</p>
<h2>Some other potential problems</h2>
<ul>
<li>Each time <code>sleepProlong</code> is called you leave another promise unresolved.</li>
<li>When <code>sleepProlong</code> is called the name implies that it "prolongs sleep", but if the sleep has already timeouted out it creates a new sleep???</li>
<li>If sleep is called with the same name as an existing sleep, the previous sleep can no longer be prolonged,</li>
<li>The <code>stc</code> interface exposes <code>delayTimer</code> making the state of <code>stc</code> untrustable.</li>
</ul>
<h2>Expectations?</h2>
<p>From the question's title I would expect</p>
<ul>
<li>that there is only one promise for a named sleep.</li>
<li>that the sleep and prolonged sleep can be canceled</li>
<li>that the sleep can be prolonged indefinitely</li>
<li>that attempting to prolong a sleep that has timeout does nothing.</li>
<li>that calling <code>sleep</code> with the <code>name</code> of an unresolved existing sleep does nothing</li>
</ul>
<h2>Some general style and coding points</h2>
<ol>
<li>Function argument names are inconsistent you call the timeout delay <code>m</code> in one function and <code>ms</code> in the other.</li>
<li>The line <code>delete stc.delayTimer[name];</code> is not needed as you overwrite the value by calling <code>sleep</code> on the next line.</li>
<li>not using curlies <code>{}</code> to delimited statement blocks is a bad habit, Always delimit statement blocks with <code>{...}</code>.You had <code>if (stc.delayTimer[name])  clearTimeout(stc.delayTimer[name]);</code> is better as <code>if (stc.delayTimer[name])  { clearTimeout(stc.delayTimer[name]); }</code></li>
<li>There is no need to check if the named timeout event handle exists. <code>clearTimeout</code> will ignore <code>undefined</code> and already timed out handles. Thus <code>if (stc.delayTimer[name])  { clearTimeout(stc.delayTimer[name]); }</code> can be <code>clearTimeout(stc.delayTimer[name]);</code> and not change the behaviour.</li>
<li>This may just be my personal preference but it feels wrong having the time <code>m</code>, or <code>ms</code> as the first argument. Putting the <code>name</code> first and then the delay seems more natural (and thus easier to remember)</li>
<li>You don't need to <code>await</code> the promise you return in the <code>async function</code>, Async functions do this automatically .</li>
<li>Ensure that you protect important state variables. If entries in the  object <code>delayTimer</code> are mutated then you lose the ability to maintain <code>stc</code>'s correct behaviour. You can protect it via closure.</li>
</ol>
<h2>Cleanup and keeping original behaviour</h2>
<p>without changing the behaviour of you code I have made changes as outlined in the above points, and modified some names.</p>
<pre><code>const stc = (() =&gt; {
    const handles = {};
    return {
        sleep(name, time) { return new Promise(r =&gt; handles[name] = setTimeout(r, time)) },
        async prolong(name, time) {
            clearTimeout(handles[name]);
            return stc.sleep(name, time);
        }
    };
})();
</code></pre>
    </div>