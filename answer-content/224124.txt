<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this bit is worth refactoring:</p>

<pre><code>    public void printOptions(){
        System.out.println("Options:");
        System.out.println("0. Quit");
        System.out.println("1. Add a new dog");
        System.out.println("2. Add a new cat");
        System.out.println("3. Print all animals");
        System.out.println("4. Delete an animal");
        System.out.println("5. Update an animal");
    }

    public boolean processInput(){
        int input = inputValidator.readInt();
        while(input != 0){
            if(input == 1){
                animalHandler.addDog();
            }
            else if(input == 2){
                animalHandler.addCat();
            }
            else if(input == 3){
                animalHandler.printAllAnimals();
            }
            else if(input == 4){
                animalHandler.removeAnimal();
            }
            else if(input == 5){
                animalHandler.updateAnimal();
            }
            else{

            }
            input = inputValidator.readInt();
        }
        return false;
    }
}
</code></pre>

<p>Suppose your client comes to you and tells you they want to be able to do 10 more things with the data from the database. What you have now suffices for a small set of operations but is not scalable. Each new operation will require a print statement for the prompt and an addition to the <code>processInput</code>, making the function monstrous and difficult to manage.</p>

<p>Though I don't know how the design would go, I would suggest creating an <code>Option</code> class hierarchy of some sort, where an <code>Option</code> has a <code>prompt</code>, a handler (maybe a class instance that it owns? Not sure), and a mechanism by which outside classes can "select" that option.</p>

<p>I'm sure there's a better way to do this, though, but that's the best alternative I can think of at the moment.</p>

<p>Edit: another issue with your approach is the reliance on magic numbers for the menu selections that the user inputs (e.g., the logic that 1 == "Add new dog"). There's a disconnect between the strings used to represent the menu options and the numbers you use to denote those options. If you rearrange the menu options, you'll have to very carefully review the code to ensure that nothing breaks. I'd recommend defining these using an enum instead.</p>
    </div>