<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of transforming everything to <code>String</code> using <code>Show</code> just for the purpose of hashing it, you should constraint element types to be <a href="https://hackage.haskell.org/package/hashable-1.3.0.0/docs/Data-Hashable.html#t:Hashable" rel="nofollow noreferrer"><code>Hashable</code></a> instead:</p>

<pre><code>getHashes :: Hashable a =&gt; BloomFilter -&gt; a -&gt; [Int]
getHashes bloomFilter elem =
  let seed    = hashSeed bloomFilter
      maxSize = m bloomFilter
  in  (`mod` maxSize) . abs . (`hashWithSalt` elem) . (seed +) &lt;$&gt; [1..(k bloomFilter)]
</code></pre>

<p>I'd also use <code>maxSize</code> and <code>numFuns</code> as the field names in <code>BloomFilter</code> and then use <code>RecordWildCards</code>:</p>

<pre><code>getHashes :: Hashable a =&gt; BloomFilter -&gt; a -&gt; [Int]
getHashes BloomFilter{..} elem = map nthHash [1..numFuns]
  where
    nthHash n = abs (hashWithSalt (n + hashSeed) elem) `mod` maxSize 
</code></pre>

<p>Or maybe even nicer:</p>

<pre><code>getHashes :: Hashable a =&gt; BloomFilter -&gt; a -&gt; [Int]
getHashes BloomFilter{..} elem = 
  [ abs (hashWithSalt (i + hashSeed) elem) `mod` maxSize  | i &lt;- [1..numFuns] ]
</code></pre>
    </div>