<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not familiar with vue.js, but perhaps you could expand upon what &amp; why this doesn't seem right to you. These look to be two discrete components with functions that <em>look</em> similar but because of the simplicity of them I can't say it's <em>actual</em> code duplication.</p>
<p>I have only a couple significant comments about each deleteX functions</p>
<pre><code>deleteDirectionForm: function(directionIndex){
  if(index != 0)
    this.directions.splice(directionIndex, 1)
}
...
deleteIngredientForm: function(ingredientIndex){
  if(index != 0)
    this.ingredients.splice(ingredientIndex, 1)
}
</code></pre>
<ol>
<li><code>index</code> looks to be undefined. Perhaps this is a case where you defined one function, copy/pasted it to the second component, then updated names and just missed it. Maybe it <em>is</em> defined somewhere higher up in scope. I will assume you intended this to be one of the function index arguments.</li>
<li>Uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" rel="nofollow noreferrer">"==" versus "==="</a> The double equals (<code>==</code>) will perform a type conversion when comparing two things, i.e. <code>"5" == 5 // true</code> whereas triple equals (<code>===</code>) won't do the type conversion, so <code>"5" === 5 // false</code>. The index is almost certainly going to be a number so you should use <code>===</code>. In fact, you should very nearly <em><strong>always</strong></em> use <code>===</code> when doing comparisons unless you have a compelling reason not to.</li>
</ol>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>console.log('5' == 5); // true
console.log('5' === 5); // false</code></pre>
</div>
</div>

<ol start="3">
<li>Javascript variables have a sense of "<a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" rel="nofollow noreferrer">truthy</a>" &amp; "<a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" rel="nofollow noreferrer">falsey</a>", and all values are considered truthy unless they are one of the following: <code>0</code>, <code>-0</code>, <code>""</code>, <code>null</code>, <code>undefined</code> and <code>NaN</code>. All non-zero integer values are truthy, so when using as condition tests you can simplify the expression.</li>
</ol>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const directionIndex = 0;
const ingredientIndex = 5;

if (directionIndex) {
  console.log('do direction stuff');
}

if (ingredientIndex) {
  console.log('do ingredient stuff');
}</code></pre>
</div>
</div>

<p>Suggested updated functions:</p>
<pre><code>deleteDirectionForm: function(directionIndex) {
  if (directionIndex)
    this.directions.splice(directionIndex, 1)
}
...
deleteIngredientForm: function(ingredientIndex) {
  if (ingredientIndex)
    this.ingredients.splice(ingredientIndex, 1)
}
</code></pre>
    </div>