<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like your solution quite a bit. It's clear, easy to read and I don't see any bugs. </p>

<p>There are many ways to condense the <code>replace</code> calls as you mention, but I think you're at a point where such changes can easily have a disproportionate impact on readability. That's good--it means the code is already pretty optimal from that standpoint.</p>

<p>For example, here's a one-shot <code>replace</code> using alternation, but its merit is debatable:</p>

<pre><code>const splitCamelCase = s =&gt; s.replace(
    /^[a-z]|^([A-Z]+)(?=[A-Z]|$)|([A-Z])+(?=[A-Z]|$)|([A-Z])(?=[a-z]+)/g,
    m =&gt; " " + m.toUpperCase()
  ).trim()
;
</code></pre>

<p>The idea here is to enumerate each scenario, join the patterns with <code>|</code>s, and provide an arrow function to handle the addition of a space and a capital letter for each match.</p>

<p>With the two extremes in mind, I prefer a balanced approach such as:</p>

<pre><code>const splitCamelCase = s =&gt;
  s.replace(/([A-Z][a-z])/g, " $1")
   .replace(/\s*([A-Z]+)/g, " $1")
   .replace(/./, m =&gt; m.toUpperCase())
   .trim()
;
</code></pre>

<p>or perhaps</p>

<pre><code>const splitCamelCase = s =&gt;
  s.replace(/([A-Z][a-z]|[A-Z]+(?=[A-Z]|$))/g, " $1")
   .replace(/./, m =&gt; m.toUpperCase())
   .trim()
;
</code></pre>

<p>These should offer ideas as far as how far you want to go in making the succinctness versus readability tradeoff. But, failing the possibility of a shortcut I might have overlooked, keeping your code basically as-is seems like a fine option to me.</p>

<p>If it's performance you're after in reducing <code>replace</code> calls, there's no guarantee that fewer calls will translate into better performance. Under the hood, the regex engine may make more passes to compensate; you can benchmark and tweak using a debugger like <a href="https://regex101.com/" rel="noreferrer">regex101</a>. For performance, it's likely best to avoid regex entirely and write a single-pass loop by hand.</p>

<p>Here's a test runner:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const splitCamelCase = s =&gt;
  s.replace(/([A-Z][a-z]|[A-Z]+(?=[A-Z]|$))/g, " $1")
   .replace(/./, m =&gt; m.toUpperCase())
   .trim()
;

[
  "AAABbbbbCcDddEEFffGGHhIiJ",
  "AaBbCcDDEeFGgHHHH",
  "CDBoomBoxAAAABbbbCCC",
  "CDBoomBox",
  "camelCase",
  "camel",
  "Camel",
  "c",
  "C",
  "Aa",
  "AA",
  "aa",
  "AAA",
  "aB", 
  "aBC",
  "aBCc",
  "",
].forEach(test =&gt; 
  console.log(
    splitCamelCaseOriginal(test) === splitCamelCase(test) 
      ? `'${test}' -&gt; '${splitCamelCase(test)}'` 
      : "TEST FAILED"
  )
);

function splitCamelCaseOriginal(camelCaseString) {
    const result = camelCaseString
        .replace(/([A-Z][a-z])/g, " $1")
        .replace(/([A-Z]+)/g, " $1")
        .replace(/ +/g, " ")
        .replace(/^ +/g, "");

    return result.charAt(0).toUpperCase() + result.slice(1);
}</code></pre>
</div>
</div>

    </div>