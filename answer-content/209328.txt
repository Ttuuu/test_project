<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I wouldn't use <code>#define</code> macros. They expose the internal naming convention of your OS dependent functions to the world. Once you send out your library to others [as a shared library], you can <em>never</em> change your <em>internal</em> OS dependent names. The important thing is that <em>public</em> facing names be functions.</p>

<p>For example, if two systems used <code>gcc</code> and created <code>ELF</code> binaries that <em>only</em> called your library functions, could you compile on (e.g.) FreeBSD and that binary would run <em>without</em> rebuild on linux. There are other issues with doing this, so it [probably] isn't practical, but, it's something to think about.</p>

<p>A better way [what <em>I've</em> done when faced with a similar problem] is to put the OS dependent code in a <code>.c</code> and add <code>static</code> to the definitions.</p>

<p>The public functions just call the <code>static</code> ones. The <code>static</code> function names are the <em>same</em>, regardless of platform</p>

<p>The optimizer will either inline the static OS dependent function or will use tail call optimization. So, it's just as fast as macros but a lot cleaner.</p>

<p><em>Side note:</em> Your naming convention is a bit [MS] Windows centric (i.e. camel hump case). I prefer snake case (e.g. see GTK, etc.). For an example, see the bottom.</p>

<hr>

<p>vkwh.h:</p>

<pre><code>#pragma once

#ifdef __cplusplus
extern "C" {
#endif

VKWFWindow* VKWFCreateWindow(const char* title, int width, int height);
VKWFBool VKWFWindowShouldClose(VKWFWindow* window);
void VKWFWindowUpdate(VKWFWindow* window);
void VKWFDestroyWindow(VKWFWindow* window);

#ifdef __cplusplus
}
#endif
</code></pre>

<hr>

<p>vkwf.c:</p>

<pre><code>#include "vkwf.h"

#ifdef VKWF_PLATFORM_WINDOWS
#include "win32_window.c"
#elif VKWF_PLATFORM_MACOS
#include "macos_window.c"
#elif VKWF_PLATFORM_LINUX
#include "linux_window.c"
#endif

VKWFWindow* VKWFCreateWindow(const char* title, int width, int height)
{
    return VKWFPlatformCreateWindow(title, width, height);
}

VKWFBool VKWFWindowShouldClose(VKWFWindow* window)
{
    return VKWFPlatformWindowShouldClose(window);
}

void VKWFWindowUpdate(VKWFWindow* window)
{
    VKWFPlatformUpdate(window);
}

void VKWFDestroyWindow(VKWFWindow* window)
{
    VKWFPlatformDestroyWindow(window);
}
</code></pre>

<hr>

<p>win32_window.c:</p>

<pre><code>#include "vkwf.h"

static VKWFWindow*
VKWFPlatformCreateWindow(const char* title, int width, int height)
{
    // ...
}

static VKWFBool
VKWFPlatformWindowShouldClose(VKWFWindow* window)
{
    // ...
}

static void
VKWFPlatformWindowUpdate(VKWFWindow* window)
{
    // ...
}

static void
VKWFPlatformDestroyWindow(VKWFWindow* window)
{
    // ...
}
</code></pre>

<hr>

<p>Here's an example of the snake case for the public functions. Note that since the platform specific functions are <code>static</code>, then can use shorter prefixes:</p>

<pre><code>#include "vkwf.h"

#ifdef VKWF_PLATFORM_WINDOWS
#include "win32_window.c"
#elif VKWF_PLATFORM_MACOS
#include "macos_window.c"
#elif VKWF_PLATFORM_LINUX
#include "linux_window.c"
#endif

VKWFWindow* VKWF_create_window(const char* title, int width, int height)
{
    return platform_create_window(title, width, height);
}

VKWFBool VKWF_window_should_close(VKWFWindow* window)
{
    return platform_window_should_close(window);
}

void VKWF_window_update(VKWFWindow* window)
{
    platform_update(window);
}

void VKWF_destroy_window(VKWFWindow* window)
{
    platform_destroy_window(window);
}
</code></pre>
    </div>