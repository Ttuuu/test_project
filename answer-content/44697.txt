<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>TryExecuteTaskInline</code> is used in what is called "task inlining": basically, when you call <code>Wait()</code> on a <code>Task</code> that didn't start executing yet, it might be executed on the current thread. A simple way to test that is:</p>

<pre><code>var factory = new TaskFactory(new SequentialScheduler());

factory.StartNew(
    () =&gt;
    {
        factory.StartNew(() =&gt; { }).Wait();
    });
</code></pre>

<p>For more information, see <a href="https://devblogs.microsoft.com/pfxteam/task-wait-and-inlining/" rel="nofollow noreferrer">Stephen Toub's article <em>Task.Wait and “Inlining”</em></a>.</p>

<p>But this all means that a <code>Task</code> might be executed outside of your <code>Run()</code> loop, so the call to <code>TryExecuteTask()</code> there might return <code>false</code>. Because of that, you should simply ignore the return value there (<a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskscheduler" rel="nofollow noreferrer">just like the official example scheduler does</a>, in its <code>NotifyThreadPoolOfPendingWork()</code>).</p>

<p>Another option would be to remove inlined <code>Task</code>s from the queue, but there is no simple way to do that for <code>BlockingCollection</code>.</p>

<hr>

<p>I think that <code>m_disposed</code> should be <code>volatile</code>, otherwise, the <code>Run()</code> loop can be optimized into an infinite loop that checks the value of <code>m_disposed</code> only once, at the start.</p>

<hr>

<p>For disposal, you might want to use <a href="http://msdn.microsoft.com/en-us/library/dd287086" rel="nofollow noreferrer">the completion capability of <code>BlockingQueue</code></a>. That way, trying to schedule a new <code>Task</code> after the scheduler has been disposed will throw, which I think is the correct behavior.</p>

<p>If you do this, you can also rewrite <code>Run()</code> to use <code>GetConsumingEnumerable()</code>, and remove <code>m_disposed</code> altogether.</p>
    </div>