<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <h3>Your code looks great!</h3>
</blockquote>

<p>I'm guessing that the expression you wish to design, in a final/combined form, would somewhat look like,</p>

<pre><code>^(?=.*[a-z])(?=.*[A-Z])(?=.*[?!@#$%^&amp;*_-])(?=.*[0-9])[A-Za-z0-9?!@#$%^&amp;*_-]{8}$
</code></pre>

<p>for instance, which of-course can be likely simplified. </p>

<hr>

<p>Here, we are using four positive lookaheads to check for those <code>at least</code> conditions, anywhere in the 8 chars.  </p>

<p>We probably don't want to escape some metachars inside the character class <code>[]</code>,  usually we would include <code>-</code> at the end, which is used as a <strong>range</strong> inside a char class such as <code>a-z</code>, <code>A-Z</code> and <code>A-z</code>. </p>

<hr>

<p>The expression is explained on the top right panel of <a href="https://regex101.com/r/VGvnUa/1/" rel="nofollow noreferrer">regex101.com</a>, if you wish to explore/simplify/modify it, and in <a href="https://regex101.com/r/VGvnUa/1/debugger" rel="nofollow noreferrer">this link</a>, you can watch how it would match against some sample inputs, if you like. </p>

<h3>Test with <code>re.findall</code></h3>

<pre><code>import re

regex = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*[?!@#$%^&amp;*_-])(?=.*[0-9])[A-Za-z0-9?!@#$%^&amp;*_-]{8}$"

test_str = """
aB&amp;9aaaa
aB&amp;9aaaaa
aB&amp;9aaa
aB&amp;9xy8a
"""

print(re.findall(regex, test_str, re.MULTILINE))
</code></pre>

<h3>Output</h3>

<pre><code>['aB&amp;9aaaa', 'aB&amp;9xy8a']
</code></pre>

<h3>Test with <code>re.finditer</code></h3>

<pre><code># coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*[?!@#$%^&amp;*_-])(?=.*[0-9])[A-Za-z0-9?!@#$%^&amp;*_-]{8}$"

test_str = """
aB&amp;9aaaa
aB&amp;9aaaaa
aB&amp;9aaa
aB&amp;9xy8a
"""

matches = re.finditer(regex, test_str, re.MULTILINE)

for matchNum, match in enumerate(matches, start=1):

    print ("Match {matchNum} was found at {start}-{end}: {match}".format(matchNum = matchNum, start = match.start(), end = match.end(), match = match.group()))

    for groupNum in range(0, len(match.groups())):
        groupNum = groupNum + 1

        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = match.start(groupNum), end = match.end(groupNum), group = match.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
</code></pre>

<h3>Output</h3>

<pre><code>Match 1 was found at 1-9: aB&amp;9aaaa
Match 2 was found at 28-36: aB&amp;9xy8a
</code></pre>

<h3>RegEx Circuit</h3>

<p><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24" rel="nofollow noreferrer">jex.im</a> visualizes regular expressions:</p>

<p><a href="https://i.stack.imgur.com/ZQIxJ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ZQIxJ.png" alt="enter image description here"></a></p>

<h3>Reference</h3>

<p><a href="https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a">Regex for password must contain at least eight characters, at least one number and both lower and uppercase letters and special characters</a></p>
    </div>