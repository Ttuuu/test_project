<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, iterating through a dataframe usually is at odds with the spirit of dataframes and numpy arrays. They are best suited for vectorized operations, which are operations applied in bulk to rows/columns of the data structure.</p>

<p>Assuming that you've cast <code>templates</code> as an <code>int64</code> or similar, you can use <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html" rel="nofollow noreferrer"><code>pd.groupby</code></a> to do the same sort of grouping as you are doing with your dictionary:</p>

<pre class="lang-py prettyprint-override"><code>import pandas as pd

df
        amino_acid  templates
0  CAWSVGQYSNQPQHF        118
1    CASSLRGNQPQHF        635
2    CASSHGTAYEQYF        468
3  CASSLDRLSSGEQYF        239
4    CSVEDGPRGTQYF         51
5  CASSLDRLSSGEQYF         66    # I've added this extra row here to show the effect

# these act as Series objects, so you can add together the
# grouped templates values
df.groupby('amino_acid')
# pd.groupby object

# use pd.Series.sum() to do this:
df.groupby('amino_acid').sum()

                 templates
amino_acid
CASSHGTAYEQYF          468
CASSLDRLSSGEQYF        305    # this was added for the two amino acids
CASSLRGNQPQHF          635
CAWSVGQYSNQPQHF        118
CSVEDGPRGTQYF           51

</code></pre>

<p>So what's going on in <code>df.groupby</code>? Well, you give it what to group on first. In this case, you group on the value for <code>amino_acid</code>. This creates a data structure that looks quite familiar if you've used <code>itertools.groupby</code>: tuples of <code>(grouping key, DataFrame)</code> pairs, where the <code>DataFrame</code> is a subset that matches the key. For example:</p>

<pre class="lang-py prettyprint-override"><code>tmp = [(x, y) for x,y in df.groupby('amino_acid')]

[('CASSHGTAYEQYF',       amino_acid  templates
2  CASSHGTAYEQYF        468), 
('CASSLDRLSSGEQYF',         amino_acid  templates
3  CASSLDRLSSGEQYF        239
5  CASSLDRLSSGEQYF         66), 
('CASSLRGNQPQHF',       amino_acid  templates
1  CASSLRGNQPQHF        635), 
('CAWSVGQYSNQPQHF',         amino_acid  templates
0  CAWSVGQYSNQPQHF        118), 
('CSVEDGPRGTQYF',       amino_acid  templates
4  CSVEDGPRGTQYF         51)]
</code></pre>

<p>And per the docs, [<code>df.sum</code>] will return the sum on the specified axis (1 by default). So, for <code>tmp[1]</code>, which contains two rows:</p>

<pre class="lang-py prettyprint-override"><code>tmp[1][1].sum()

amino_acid    CASSLDRLSSGEQYFCASSLDRLSSGEQYF
templates                                305
dtype: object
</code></pre>

<p>Where <code>305</code> is the sum. The <code>pd.groupby</code> object as a whole supports the <code>.sum</code> call, so we are able to call it like we did above.</p>

<pre class="lang-py prettyprint-override"><code># Now, using `to_dict`, you can see that you want what's inside templates
df.groupby("amino_acid").sum().to_dict()

# {'templates': {'CASSHGTAYEQYF': 468, 'CASSLDRLSSGEQYF': 305, 'CASSLRGNQPQHF': 635, 'CAWSVGQYSNQPQHF': 118, 'CSVEDGPRGTQYF': 51}}

# so use the templates attribute to grab it
df.groupby("amino_acid").sum().templates.to_dict()
# {'CASSHGTAYEQYF': 468, 'CASSLDRLSSGEQYF': 305, 'CASSLRGNQPQHF': 635, 'CAWSVGQYSNQPQHF': 118, 'CSVEDGPRGTQYF': 51}
</code></pre>

<p>This applies the operations within the dataframe, which is more efficient than a loop. The analogue that you were trying to use could leverage <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> from the collections module, as well. It prevents the need to check for a key's existence, speeding up the loop immensely:</p>

<pre class="lang-py prettyprint-override"><code>from collections import defaultdict

# specify your input type here
sequence_counts = defaultdict(int)

# it is more pythonic to use tuple-unpacking in loops
# as indexing is less readable
for amino, template in zip(df.amino_acid, df.templates):
    sequence_counts[amino] += template
</code></pre>

<p>Also, by iterating over the <code>zip</code> object directly, you don't copy data into memory. <code>list</code> will aggregate all of the members into a data structure, whereas <code>zip</code> is a generator that will just produce the members one at a time until exhausted. It's like the difference between <code>for x in range</code> and <code>for x in list(range)</code>:</p>

<pre class="lang-py prettyprint-override"><code># This will just run for a really really really long time
for i in range(1000000000000): 
    print(i)

# This will crash your computer, it will never
# get to the print statement, because it must evaluate
# list(range) before it starts the loop
for i in list(range(1000000000000)):
    print(i)
</code></pre>
    </div>