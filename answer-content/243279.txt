<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Data layout</h1>
<p>You have already experienced first-hand a disadvantage of using "1 physics vector = 1 SIMD vector" (such as <code>__m256d pos</code>), causing some friction when coordinates come together:</p>
<pre><code>__m256d temp = _mm256_hadd_pd( dr1_sq, dr2_sq );
__m128d hi128 = _mm256_extractf128_pd( temp, 1 );
__m128d dotproduct_sqrt = _mm_sqrt_pd(_mm_add_pd( _mm256_castpd256_pd128(temp), hi128 ));
</code></pre>
<p>Mixing different coordinates in the same SIMD vector leads to horizontal addition and shuffles and extraction and such. Horizontal addition is relatively expensive, equivalent to two shuffles plus a normal addition. <code>_mm256_castpd256_pd128</code> is free, but extracting the upper half is not.</p>
<p>That strategy of using the 4th component for a different value is also a problem, causing even more extract/insert operations. As a rule of thumb, avoid indexing into SIMD vectors. It's fine to use that construct a bit in a pinch, but I would say it's overused here.</p>
<p>There is an alternative: put the X components of 4 physics vectors together into a SIMD vector, Y in an other SIMD vector, etc. You could have groups of 4 bodies together (AoSoA), or a big array of just X and an other of Y and so on (SoA).</p>
<p>That's a significant rewrite, but I recommend it. That <code>Vec3</code> that was mentioned, I recommend against the entire idea. It's still using SIMD against the grain. It's a really "attractive looking trap", letting you express the computation in a way that feels nice, but it's not a way that results in good code.</p>
<h1>Unnecessary move</h1>
<p>Moving SIMD vectors is not useful. They're trivial to copy and hold no resource.</p>
<h1>Alignment</h1>
<p>Aligning <code>NBody</code> aligns its first field, which is an <code>std::vector</code> (so the vector object itself, not the data it holds). That's not useful, but also not harmful. <code>std::vector</code> should, as of C++17, respect the alignment of the data inside it (before 17, that was simply broken).</p>
<h1>Scary synchronization</h1>
<p><code>bool accelerate</code> should not be used for synchronization, it makes this construct unsafe: <code>while(!accelerate){}</code>. That loop may not terminate, or it may work as intended, it's not reliable. Using <code>atomic&lt;bool&gt;</code> would make the threads communicate safely.</p>
    </div>