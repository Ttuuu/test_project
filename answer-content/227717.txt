<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall the code is fairly easy to read and I don't spot any portability issues.</p>
<p>Program design</p>
<ul>
<li><p>The module handling the allocation should also clean up after itself. If transferring this to a proper multi-file program, you would have a lib with a header/code pair like base64.h + base64.c. If there exists a function in base64.c that calls malloc, there should also be a function in that file responsible for clean-up. Returning pointers to dynamic memory to a caller outside the code is bad practice - it breaks private encapsulation and leads to memory leaks. Best practice by far is to let the handler deal with the allocation, if possible.</p>
</li>
<li><p>Similarly, you should not expose internals of such a dynamic-allocated struct to the caller. The struct could be made opaque and all access to it could be restricted to setters/getters.</p>
</li>
<li><p>Mixing error handling with algorithms isn't a good idea. Rather than printing errors inside the functions dealing with the algorithms, you should return an error code. Meaning you'll have to swap the bool return type for an enum or struct.</p>
</li>
</ul>
<p>Performance</p>
<ul>
<li><p>Your struct member <code>data</code> should be replaced with a "flexible array member". This allows you to allocate the whole struct in one chunk of memory, which gives better cache performance and quicker look-ups. (Also gives less heap fragmentation)</p>
</li>
<li><p>Your <code>HEX_DIGITS</code> lookups with strchr could probably be optimized by calling <code>isxdigit</code> instead. Although that function isn't case-sensitive. Otherwise you can roll it out yourself by first checking if a character is in range of '0'-'9' or 'A'-'F' then use table lookups from there. It would be faster overall.</p>
</li>
<li><p>As a rule of thumb, never pass structs by value, always pass them by reference.</p>
</li>
<li><p>It might be possible to branch-optimize the code quite a bit, but I didn't look at that since you mention portability, and branch optimizations only makes sense for architectures with branch prediction and instruction cache.</p>
</li>
</ul>
<p>Best practice and style</p>
<ul>
<li><p>Avoid assignment inside control statements. It is hard to read and might cause unintentional side-effects. Lines such as <code>if ((*base64_ptr = malloc(buffer_size)) == NULL)</code> should be split in two, one for the malloc call and one for the check against NULL.</p>
</li>
<li><p>To avoid the more complex syntax involved with a <code>char**</code>, you should use a local <code>char*</code>. For example <code>char* p64 = malloc(...); ... p64[n] = ...; ... *bae64_ptr = p64; return true; }//end of function</code></p>
</li>
<li><p>Replace "magic number" integer constants with named constants when possible. It isn't obvious what all those digits are for and you don't use comments explaining where you got them from.</p>
</li>
<li><p><code>HEX_DIGITS</code> and <code>BASE64_DIGITS</code> should be arrays. Makes the code easier to read, enables the use of <code>sizeof</code> and requires ever so slightly less memory. Example:</p>
<pre><code>  static const char HEX_DIGITS[] = "0123456789abcdef";
</code></pre>
</li>
</ul>
<p>Safety/security</p>
<ul>
<li><p>In a real application you would need to sanitize input more when dealing with command line arguments. You can't really know the length of the string passed. The simplest form of doing this would be to look for a null terminator in argv[1] until you reach to a certain max size, then have the program close with an error message if the input is too large. <code>strchr(HEX_DIGITS, digit) - HEX_DIGITS</code> is for example not guaranteed to be 255 or less, which is a vulnerability.</p>
<p>Also, strchr will return NULL if the digit isn't found, in which case your program will crash.</p>
</li>
<li><p>You should make a habit out of appending a <code>u</code> suffic to all integer constants involed in bitwise artimetic. Constants like <code>1</code> is of type signed <code>int</code> and therefore potentially dangerous in various ways.</p>
</li>
</ul>
    </div>