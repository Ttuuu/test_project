<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>

<p>In this loop the file is closed, this means that on the next iteration of the loop the read will fail.</p>

<pre><code>    do {
        read_bytes = read(fd, buf, bytes);
        if (read_bytes == -1)
            error(1, errno, "Error while reading the file\n");
        if (read_bytes == 0)
            return 0;
        for (i = 0; i &lt; bytes; i++)
            putchar(buf[i]);
        if (close(fd) == -1)
            error(1, 0, "Error while closing the file\n");
    } while (read_bytes != 0);
</code></pre>

<h2>Complexity</h2>

<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> that applies here. The Single Responsibility Principle states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>There are at least 2 possible functions in <code>main()</code>.<br>
  - Parse the command line arguments<br>
  - Read the file using the offset and size  </p>

<h2>The Code is Not Portable</h2>

<p>The header files <code>error.h</code> and <code>unistd.h</code> are not portable, and any code that derives from them such as the function <code>error()</code> do not port to systems such as windows. In the case of <code>error()</code> it would be better to report the error to <code>stderr</code> using <code>fprintf()</code> and since this is in <code>main()</code> <code>return 1;</code> or if <code>stdlib.h</code> is included <code>return EXIT_FAILURE;</code>. Note that while <code>error()</code> is not portable, <code>perror()</code> is portable since it is part of the C programming standard.</p>

<h2>Understandable Error Messages</h2>

<p>It is quite common to have a check on <code>argc</code>, but the error message provided usually provides the correct calling of the program as an example. The error message <code>Too many or less than the number of arguments</code> really doesn't tell the user enough, such as what arguments are missing, and what order they should be in.</p>

<pre><code>    if (argc != 4)
    {
        fprintf(stderr, "Usage: readbytes Offset Bytes to read");
        return EXIT_FAILURE;    // since stdlib.h is included
    }
</code></pre>

<h2>More User Friendly</h2>

<p>The program could be a little more user friendly if it was more flexible, rather than expecting Offset as <code>argv[2]</code> and Bytes to Read as <code>argv[3] Use -O for</code>offset<code>and -B for</code>Bytes to Read`.</p>
    </div>