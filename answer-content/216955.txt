<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First to answer your specific questions:</p>

<blockquote>
  <ol>
  <li>For storing one-dimensional data (arrays), is there usually a preference between column and row matrices?</li>
  </ol>
</blockquote>

<p>It doesn't matter, use what is most convenient. Often horizontal vectors are used because they are easy to create: <code>1:10</code>.</p>

<blockquote>
  <ol start="2">
  <li>Is there an easy way to deal with nested matrices?</li>
  </ol>
</blockquote>

<p>The best way to collect matrices is using <a href="https://www.mathworks.com/help/matlab/cell-arrays.html" rel="nofollow noreferrer">a cell array</a>. A cell array's elements are arbitrary values (matrices, other cell arrays, objects, function handles, whatever you can assign to a variable).</p>

<blockquote>
  <ol start="3">
  <li>There are a ton of different ways to create matrices, and I'm not sure if the ones I am using are the most appropriate (e.g., via literals, <code>find()</code>, <code>meshgrid()</code>, <code>ones()</code> and <code>zeros()</code>, <code>repmat()</code>, etc.).</li>
  </ol>
</blockquote>

<p>Yes, MATLAB has a huge library and it is impossible to know if you are using the best possible function in each case. Experience will help.</p>

<blockquote>
  <ol start="4">
  <li>What is there to do about arbitrary imprecision? For example, I had to put in an arbitrary value threshold to find non-zero values because using <code>find(A &gt; 0)</code> wasn't working. (Since the values were on the magnitude of about 1e-12, this was larger than the value of <code>eps()</code> so that function didn't seem very helpful.)</li>
  </ol>
</blockquote>

<p>Yes, you need to pick some threshold there. It depends on the source of the data what an appropriate value is. <code>eps</code> is the distance between <code>1.0</code> and the next representable floating-point value. That is, there are no possible values in between <code>1.0</code> and <code>1.0+eps</code>. <code>eps</code> is not necessarily an appropriate threshold to find "approximately zero" values.</p>

<blockquote>
  <ol start="5">
  <li>Naming conventions -- is there one for MATLAB? I don't believe I've seen a consistent style.</li>
  </ol>
</blockquote>

<p>Not that I know of. Early versions of MATLAB were not case sensitive, so all code was typically written in lower case. Currently some built-in functionality uses an upper case for the first letter, and some use camelCase. There is no PEP8 for MATLAB. :)</p>

<hr>

<p>Now I'll go through the bits of code that can be improved:</p>

<blockquote>
<pre><code>clc;clear all;
</code></pre>
</blockquote>

<p>Please use the MATLAB Editor, and heeds its warnings. <code>clear all</code> is not useful here, it not only clears variables, it also clears functions from memory. These will need to be read in and parsed again, slowing down your program. <code>clear</code> suffices to remove variables from your workspace.</p>

<blockquote>
<pre><code>posDps = data(find(y == 1), :);
negDps = data(find(y == -1), :);
</code></pre>
</blockquote>

<p>Here you can remove <code>find</code>. The MATLAB Editor also warns about this.</p>

<pre><code>posDps = data(y == 1, :);
negDps = data(y == -1, :);
</code></pre>

<p><code>find</code> is usually not necessary when indexing, only when you need to store an index to an array element.</p>

<blockquote>
<pre><code>space = size(data, 2);
n = length(data);
</code></pre>
</blockquote>

<p>It is always better to specify directly what size you need. <code>length(data)</code> is defined as <code>max(size(data))</code>, I consider this dangerous. Instead:</p>

<pre><code>[n,space] = size(data);
</code></pre>

<p>or</p>

<pre><code>space = size(data, 2);
n = size(data, 1);
</code></pre>

<p>You should also know <code>numel</code>, which returns the number of elements in a matrix. This is much more efficient than <code>prod(size(data))</code>.</p>

<blockquote>
<pre><code>[ y1, y2 ] = meshgrid(y, y);
[ i, j ] = meshgrid(1:n, 1:n);
</code></pre>
</blockquote>

<p>These are not necessary at all. Since MATLAB R2016b we have implicit singleton expansion, but before that you could use <code>bsxfun</code> to operate on two arrays of different sizes. So none of the following indexing operations are really necessary.</p>

<blockquote>
<pre><code>P(i, j) = y1(i, j) .* y2(i, j) .* (data(i,:) * data(j,:)');
</code></pre>
</blockquote>

<p>can be rewritten as</p>

<pre><code>P = (y .* y.') .* (data * data.');
</code></pre>

<p>Note that I use <code>.'</code> here, where you had <code>'</code>. <code>'</code> is the complex conjugate transpose. Unless you want to compute a dot product, you should avoid it. <code>.'</code> transposes the matrix without changing any of its values. For real-valued data they're the same, but it's good to get used to using the right form, it will prevent difficult to find errors down the road.</p>

<blockquote>
<pre><code>Aeq = y';
</code></pre>
</blockquote>

<p>Same here: <code>y.'</code>.</p>

<blockquote>
<pre><code>beq = [ 0 ];
</code></pre>
</blockquote>

<p>Again, the MATLAB Editor warns here about the useless <code>[]</code> brackets. Heed the warnings!</p>

<p>There is actually no difference in MATLAB between a matrix and a scalar. A scalar is a matrix with a single value. The <code>[...]</code> operator is for concatenation. It concatenates two or more matrices into a single matrix. Every time you have a single matrix inside <code>[]</code>, the MATLAB Editor will warn you about it.</p>

<p>Similarly, I often see things like <code>[1:10]</code>. <code>1:10</code> is a matrix, the <code>[]</code> don't do anything there.</p>

<blockquote>
<pre><code>w = (data' .* repmat(y', [space 1])) * alpha;
</code></pre>
</blockquote>

<p>Same here: <code>data.'</code>, <code>y.'</code>.</p>

<blockquote>
<pre><code>svIndices = find(alpha &gt; threshold);
b = y(svIndices(1)) - data(svIndices(1),:) * w;
</code></pre>
</blockquote>

<p>Here you can use the second argument to <code>find</code> to tell it to give you only one index:</p>

<pre><code>svIndex = find(alpha &gt; threshold,1);
b = y(svIndex) - data(svIndex,:) * w;
</code></pre>

<blockquote>
<pre><code>domain = (min(data(:,1)) - margin):(max(data(:,1)) + margin);
</code></pre>
</blockquote>

<p>You don't need this many parentheses here, but they don't hurt either. I actually think they help readability. But the <code>:</code> has a much lower precedence than <code>+</code> and <code>-</code>. This should also work:</p>

<pre><code>domain = min(data(:,1))-margin : max(data(:,1))+margin;
</code></pre>
    </div>