<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure I'd use <code>std::set</code> to hold the list of bad words in a case like this. <code>std::set</code> is (at least normally) implemented as a balanced tree, with each node separately allocated. This tends to reduce locality of reference.</p>

<p>By contrast, a <code>vector</code> is always contiguously allocated, improving locality of reference so it's more cache-friendly (and also tending to reduce heap fragmentation, for whatever that may be worth).</p>

<p>That doesn't mean you should forego the wonders of standard algorithms though. Quite the contrary, standard algorithms will do the job quite nicely. Since you only care about the presence/absence of a word in the "set", you can use <code>std::binary_search</code> to check:</p>

<pre><code>std::vector&lt;std::string&gt; bad(std::istream_iterator&lt;std::string&gt;(bad_file), 
                             std::istream_iterator&lt;std::string&gt;);

// You can remove this sort if you're sure the words are already sorted.
std::sort(bad.begin(), bad.end());

// process the data
std::replace_copy_if(
    std::istream_iterator&lt;std::string&gt;(infile),
    std::istream_iterator&lt;std::string&gt;(),
    std::ostream_iterator&lt;std::string&gt;(outfile, " "),
    [&amp;](std::string const &amp;s) { 
        return std::binary_search(bad.begin(), bad.end(), s); 
    }, 
    "bleep");
</code></pre>

<p>If memory serves, <code>replace_copy_if</code> is new with C++11, but it's fairly easy to write your own if necessary. If you don't have that, chances are pretty good you won't have lambdas available either. In this case, you should be able to replace it with a suitable invocation using <code>std::bind1st</code> and <code>std::bind2nd</code>, but I'll leave that as an exercise for the reader (personally, I'd at least consider a function object or something like <code>boost::bind</code> instead).</p>
    </div>