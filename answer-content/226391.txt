<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Review</h2>

<p>Make all instance fields that are never reassigned <code>final</code>. From the comments you suggest some of these fields get reassigned later in the code. In this case, those fields should not be declared <em>final</em>.</p>

<pre><code> private final PriorityNode&lt;T&gt;[] items;
 private final Set&lt;T&gt; itemSet;
</code></pre>

<p>Make constants static and readonly, and use underscores for readability.</p>

<pre><code> private static final int INITIAL_CAPACITY = 4;
 private int capacity = INITIAL_CAPACITY;
</code></pre>

<p>Don't introduce unnecessary new lines. For instance, between class definition and instance variables. Zero or one new line would suffice.</p>

<blockquote>
<pre><code>public class ArrayHeapMinPQ&lt;T&gt; {


   private PriorityNode&lt;T&gt;[] items;
</code></pre>
</blockquote>

<pre><code>public class ArrayHeapMinPQ&lt;T&gt; {
   private PriorityNode&lt;T&gt;[] items;
</code></pre>

<p>Don't write comments that state the obvious. It's polluting the source code. Write comments for when they would really make sense.</p>

<blockquote>
<pre><code>   // Declaring a construtor to intialize items as an array of PriorityNodes
   public ArrayHeapMinPQ() {
</code></pre>
</blockquote>

<p>Like public API comments (this is a good thing):</p>

<blockquote>
<pre><code>   /*
    * Adds an item with the given priority value. Throws an
    * IllegalArgumentException if item is already present
    */
   @Override
   public void add(T item, double priority) {
</code></pre>
</blockquote>

<p>Perform argument checks before changing the state of the instance. (And remove these comments that have zero added value)</p>

<blockquote>
<pre><code>public void add(T item, double priority) {
       ensureCapacity();

       // To ensure that duplicate keys are not being used in the queue
       if (itemSet.contains(item)) {
           throw new IllegalArgumentException();
       }
</code></pre>
</blockquote>

<pre><code>public void add(T item, double priority) {
       if (itemSet.contains(item)) {
           throw new IllegalArgumentException();
       }
       ensureCapacity();
</code></pre>

<p>It is custom in Java to provide not just <code>add</code>, but also <code>offer</code> methods. <code>add</code> throws an exception, while <code>offer</code> returns a <code>boolean</code>. To accomodate multiple entrypoints, you should put the actual insertion of data in a private method.</p>

<pre><code>private void insert(T item, double priority) {
    ensureCapacity();
    items[size + 1] = new PriorityNode(item, priority);
    size++;
    itemSet.add(item);
    upwardHeapify(items[size]);
}
</code></pre>

<p>And then refactor <code>add</code>:</p>

<pre><code>   /*
    * Adds an item with the given priority value. Throws an
    * IllegalArgumentException if item is already present
    */
   @Override
   public void add(T item, double priority) {
       if (itemSet.contains(item)) {
           throw new IllegalArgumentException();
       }
       insert(item, priority);
   }
</code></pre>

<p>And introduce <code>offer</code>:</p>

<pre><code>   /*
    * Adds an item with the given priority value. Returns
    * False if item is already present
    */
   public boolean offer(T item, double priority) {
       if (itemSet.contains(item)) {
           return false;
       }
       insert(item, priority);
       return true;
   }
</code></pre>
    </div>