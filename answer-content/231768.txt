<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some things we can improve even while keeping the same algorithm:</p>

<ul>
<li>DRY repeated/inverted conditions</li>
<li>DRY addToQueue() calls</li>
<li>use a boolean <code>isNext</code> field instead of <code>position</code> string</li>
<li>avoid creating four intermediate arrays to find closest items by using find() instead of filter()</li>
<li>use arrow functions</li>
<li>reduce the number of <code>return</code> statements to just one</li>
</ul>

<pre><code>class Foo {
  queueClosestComponent() {
    const lastIndex = this.components.indexOf(this.lastComponentInViewport);

    const mapped = this.components
      .map((component, index) =&gt; ({
        delta: Math.abs(lastIndex - index),
        isNext: index &gt;= lastIndex,
        component,
      }))
      .filter(item =&gt; item.component.loadingState === null)
      .sortBy('delta');

    const next = mapped.find(m =&gt; m.isNext);
    const prev = mapped.find(m =&gt; !m.isNext);
    if (!next &amp;&amp; !prev) {
      return;
    }
    const secondNext = mapped.find(m =&gt; m !== next &amp;&amp; m.isNext);
    const secondPrev = mapped.find(m =&gt; m !== prev &amp;&amp; !m.isNext);

    const directionalFavour = 1.3;
    let toAdd = [];

    if (next &amp;&amp; !prev) {
      toAdd = [next, secondNext];
    } else if (!next &amp;&amp; prev) {
      toAdd = [prev, secondPrev];
    } else if (next.delta === prev.delta &amp;&amp; next.delta &lt;= 3) {
      toAdd = [next, prev];
    } else if (this.direction === 'next') {
      toAdd = next.delta / directionalFavour &lt;= prev.delta
        ? [next, secondNext]
        : [prev];
    } else if (this.direction === 'previous') {
      toAdd = prev.delta / directionalFavour &lt;= next.delta
        ? [prev, secondPrev]
        : [next];
    }

    toAdd.forEach(item =&gt;
      item &amp;&amp; this.addToQueue('background', item.component)
    );
  },
};
</code></pre>
    </div>