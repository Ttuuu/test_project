<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As pointed out by @RootToo:</p>

<ol>
<li>You are looping more times than needed.  You loop <code>n</code> times for a list of length <code>n</code>, where you only need to be looping <a href="https://docs.python.org/3/library/stdtypes.html#int.bit_length" rel="nofollow noreferrer"><code>n.bit_length()</code></a> times.</li>
<li>The function may fail for a tree with an incomplete last layer.</li>
</ol>

<p>The additional point I'd like to cover is you are also comparing too much.</p>

<p>With your binary tree <code>[1,2,2,3,4,4,3]</code>, you check that:</p>

<pre><code>[1] == list(reversed([1]))
[2,2] == list(reversed([2,2]))
[3,4,4,3] == list(reversed([3,4,4,3]))
</code></pre>

<p>You only need to check:</p>

<pre><code>[2] == list(reversed([2]))
[3,4] == list(reversed([4,3]))
</code></pre>

<p>This results in double the number of elements to compare, plus allocation of double the length of slices, which means copying double the number of elements that actually needed to be copied.  Plus we don't need to test the first layer, because a list of length 1 is always equal to its reverse, which is the only case of an odd number of items that complicates splitting the layers in half.</p>

<p>Moreover, <code>list(reversed(layer))</code> is inefficient, as a reverse iterator needs to be created, and then the <code>list()</code> needs to traverse this newly created reverse iterator to realize the required list.  <code>layer[::-1]</code> does the same thing, but without needing to create the intermediate reverse iterator.</p>

<p>Revised code:</p>

<pre><code>def is_symmetric(tree: list) -&gt; bool:
    """
    Returns if the passed tree is symmetric

    :param tree: A list representing a binary tree
    """

    n = len(tree)
    layers = n.bit_length()

    if n != 2 ** layers - 1:
        return False

    start = 1
    length = 1

    for _ in range(1, layers):
        mid = start + length
        end = mid + length
        if tree[start:mid] != tree[end-1:mid-1:-1]:
            return False

        start = end
        length *= 2

    return True

if __name__ == '__main__':

    # Test harness copied from RootToo's answer:

    tests = [
        ([], True),                          # Check empty list as special case, too!
        ([1], True),
        ([1, 2, 2, 3, 4, 4, 3], True),
        ([1, 2, 2, None, 3, None, 3], False),
        ([1, 2, 2, 3, 4, 3], False)
        ]

    for n, (test, answer) in enumerate(tests):
        result = is_symmetric(test)
        print(f"Test {n} {'Pass' if answer==result else 'FAIL'}: is_symetric({test})")
</code></pre>
    </div>