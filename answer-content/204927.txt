<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<p>Just reviewing the first (working) version of the code. Some of the points here were also made in <a href="https://codereview.stackexchange.com/a/204825/11728">AJNeufeld's answer</a>.</p>

<ol>
<li><p>I found the code a bit hard to read. For example, what does this code do?</p>

<pre><code>linker = {}
c = {}
for i in range(0, len(s)):
    c[s[i]] = c.get(s[i],0) + 1
    linker['%s%s'%(0,i)] = c.copy()
</code></pre>

<p>It takes some effort to figure out that this builds a mapping from <code>i</code> to a dictionary of counts of characters in the substring <code>s[:i+1]</code>. So this could be clarified by renaming some of the variables and adding a comment:</p>

<pre><code># Mapping from i to counts of characters in s[:i+1].
prefix_counts = {}
counts = {}
for i in range(0, len(s)):
    counts[s[i]] = counts.get(s[i],0) + 1
    prefix_counts[i] = counts.copy()
</code></pre></li>
<li><p>Python provides the data structure <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a>, for counting things:</p>

<pre><code># Mapping from i to counts of characters in s[:i+1].
prefix_counts = {}
counts = Counter()
for i in range(0, len(s)):
    counts[s[i]] += 1
    prefix_counts[i] = counts.copy()
</code></pre></li>
<li><p>When iterating simultaneously over the indexes <code>i</code> and elements <code>s[i]</code> of a sequence <code>s</code>, it's convenient to use the built-in function <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a>:</p>

<pre><code># Mapping from i to counts of characters in s[:i+1].
prefix_counts = {}
counts = Counter()
for i, c in enumerate(s):
    counts[c] += 1
    prefix_counts[i] = counts.copy()
</code></pre></li>
<li><p>The <code>prefix_counts</code> data structure would be easier to understand if it were a mapping from <code>i</code> to counts of characters in <code>s[:i]</code> (not <code>s[:i+1]</code>. This would avoid the need to subtract one later on.</p></li>
<li><p>The counts of characters in <code>s[i:]</code> should go in a different mapping, for example <code>suffix_counts</code>, instead of trying to pack them into the same mapping as the prefix counts.</p></li>
<li><p>The computation of the maximum window size:</p>

<pre><code>window_size = len(s) if len(s) % 2 == 0 else len(s) - 1
</code></pre>

<p>could be simplified to:</p>

<pre><code>window_size = len(s) // 2 * 2
</code></pre></li>
<li><p>But in fact we don't need to compute it at all, because we can use <a href="https://docs.python.org/3/library/functions.html#reversed" rel="noreferrer"><code>reversed</code></a>:</p>

<pre><code>for ws in reversed(range(2, len(s) + 1, 2)):
</code></pre></li>
<li><p>There's a special case for checking if the whole string is balanced. But this special case is unnecessary as the main loop will also check this case.</p></li>
<li><p>The condition <code>if sp_inc-1 &gt;= 0:</code> could be avoided by adding an entry for <code>-1</code> to the <code>prefix_counts</code> mapping.</p></li>
<li><p>Instead of computing <code>everything</code> minus <code>suffix_counts[i + ws]</code> minus <code>prefix_counts[i]</code>, compute <code>prefix_counts[i + ws]</code> minus <code>prefix_counts[i]</code>. This avoids the need for <code>everything</code> and <code>suffix_counts</code>.</p></li>
<li><p>Since we are using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a>, we can just subtract the counter objects without the need to loop over the items:</p>

<pre><code>window_counts = prefix_counts[i + ws] - prefix_counts[i]
</code></pre></li>
<li><p>Instead of calling <code>result.values()</code> twice:</p>

<pre><code>if list(result.values())[0] == list(result.values())[1]:
</code></pre>

<p>Call it once and use <em>tuple unpacking</em> to assign names to its two elements:</p>

<pre><code>v, w = window_counts.values()
if v == w:
</code></pre></li>
</ol>

<h3>2. Revised code</h3>

<pre><code>from collections import Counter

def solution(s):
    """Return the length of the longest balanced substring of s."""
    counts = Counter()
    prefix_counts = {} # Mapping from i to counts of characters in s[:i].
    for i, c in enumerate(s):
        prefix_counts[i] = counts.copy()
        counts[c] += 1
    prefix_counts[len(s)] = counts
    for window in reversed(range(2, len(s) + 1, 2)):
        for i in range(len(s) - window + 1):
            window_counts = prefix_counts[i + window] - prefix_counts[i]
            if len(window_counts) == 2:
                v, w = window_counts.values()
                if w == v:
                    return window
    return 0
</code></pre>

<h3>3. Complexity</h3>

<p>If the string has length <span class="math-container">\$n\$</span> and there are <span class="math-container">\$k\$</span> distinct characters, then there are <span class="math-container">\$O(n)\$</span> lengths for the window, <span class="math-container">\$O(n)\$</span> positions for the start of the window, and it takes <span class="math-container">\$O(k)\$</span> to do the subtraction of the prefix counts, so the overall runtime is <span class="math-container">\$O(kn^2)\$</span>.</p>

<p>In order to pass the time limit, you need to find a better algorithm, ideally one that runs in <span class="math-container">\$O(n)\$</span>. I don't want to spoil the challenge for you, so I'll give you some hints.</p>

<p>Hint 1</p>

<blockquote class="spoiler">
  <p> Consider an easier problem first. What if you knew in advance that there were only two distinct characters in the string, for example, it only consists of <code>a</code> and <code>b</code>?</p>
</blockquote>

<p>Hint 2</p>

<blockquote class="spoiler">
  <p> Instead of keeping separate counts of <code>a</code> and <code>b</code>, what if you kept a running <em>difference</em> between the number of <code>a</code> and the number of <code>b</code>?</p>
</blockquote>

<p>Hint 3</p>

<blockquote class="spoiler">
  <p> If the string is <code>abbbaaaaabbaa</code> then the running differences are <span class="math-container">\$0, 1, 0, -1, -2, -1, 0, 1, 2, 3, 2, 1, 2, 3\$</span>. How do these differences relate to the longest balanced substring?</p>
</blockquote>

<p>Hint 4</p>

<blockquote class="spoiler">
  <p> What if you kept, for each value in the running differences, the minimum and maximum indexes at which the value occurred?</p>
</blockquote>
    </div>