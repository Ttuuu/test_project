<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>reverse()</code></h2>

<p>Your <code>reverse()</code> function only works for numbers below 10<sup>10</sup>.  Although that upper bound may be good enough to solve this particular challenge, it's not correct in general.  (Keep in mind that the standard says that an <code>unsigned long</code> is <em>at least</em> 32 bits â€” possibly larger.)</p>

<p>Here is a simpler implementation that works in general:</p>

<pre><code>unsigned long reverse(unsigned long original) {
    unsigned long reversed = 0;
    for (; original; original /= 10) {
        reversed = (10 * reversed) + (original % 10);
    }
    return reversed;
}
</code></pre>

<h2><code>is_palindrome()</code></h2>

<p>For every iteration, you end up calling <code>reverse()</code> twice: once to test whether a palindrome has appeared, and again to obtain the next number to add.  You would be better off eliminating this function, and rolling the palindrome check into the <code>reverse_add()</code> loop itself.</p>

<h2><code>reverse_add()</code></h2>

<p>For clarity, I would rename the function to <code>reverse_add_until_paindrome()</code>.</p>

<p>Conventionally, C functions are designed so that a status code is returned, and the data being manipulated are passed by reference.  I recommend redesigning the interface so that it returns the number of iterations, as that is closer in spirit to a status code.  The number itself can be passed by reference.  Notice what happens then: it becomes an in-out parameter!  The rationale for the convention makes itself apparent.</p>

<pre><code>int reverse_add_until_palindrome(unsigned long *n) {
    int i;
    unsigned long rev;
    for (i = 0; (rev = reverse(*n)) != *n; i++) {
        *n += rev;
    }
    return i;
}
</code></pre>

<p>The problem statement guarantees that you will never be given a <em>P</em> that will require more than 1000 iterations.  That's just for your information; I don't think you need to verify that fact.  (If you do want to bail out, you should add code in <code>main()</code> to detect that the computation was aborted.)</p>

<h2><code>main()</code></h2>

<p>The way you try to use one <code>scanf()</code> to read both <em>N</em> and the <em>P<sub>i</sub></em> is awkward.  Not only does that make the code less clear, it also imposes a penalty of an extra conditional on every subsequent loop.  In addition, it's wrong: the format string for an <code>int</code> is <code>"%d"</code>, whereas the format string for an <code>unsigned long</code> is <code>"%lu"</code>.</p>

<p>You read <code>n</code>, but never make use of it.  That works, I suppose.  I prefer to use it to see whether all of the expected input was received.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main() {
    int n;
    unsigned long p;

    if (1 != scanf("%d", &amp;n)) {
        return EXIT_FAILURE;
    }
    while (n-- &amp;&amp; scanf("%lu", &amp;p)) {
        int iterations = reverse_add_until_palindrome(&amp;p);
        printf("%d %lu\n", iterations, p);
    }
    return (n == 0) ? EXIT_SUCCESS : EXIT_FAILURE;
}
</code></pre>
    </div>