<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Starting out with your first question: no, there isn't. But you may put the result set into another nested try block. Still not super-elegant, but a bit better in my opinion:</p>

<pre><code>try (
    Connection connection = dataSource.getConnection();
    PreparedStatement statement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
) {
    statement.setInt(1, page);
    statement.setInt(2, size);
    try (ResultSet rs = statement.executeQuery()) {
        while(rs.next()) {
            list.add(new StateEntity(rs.getString("stateId"), rs.getString("stateName")));
        }
    }
</code></pre>

<p>Regarding the method itself: why do you return an iterator instead of the list itself? This severely limits the capabilities of the return value without any benefit. (E.g. you cannot use <code>size()</code> or <code>stream()</code> which you could do with the list.)</p>

<p>Regarding the MySql class now:</p>

<p>Are you aware that you actually create an anonymous subclass with the map construction using curly braces and an object initializer? I never found this on par with the problem solved here. Fortunately, Java 9 brought us <code>Map.of</code>, so I recommend replacing this construct with </p>

<pre><code>private static Map&lt;String, String&gt; parameters = Map.of(
    "authReconnect", "true",
    ...
);
</code></pre>

<p>Regarding the <code>query = ...stream...reduce...orElse</code>: you can achive the same by simply using a joining collector:</p>

<pre><code>String query = parameters.entrySet().stream()
    .map(p -&gt; p.getKey() + "=" + p.getValue())
    .collect(Collectors.joining("&amp;"));
</code></pre>

<p>The MySql class in itself is just global variables. This is "somewhat ok" as long as you don't employ advanced dependency injection possibilities like spring or a CDI container, but keep in mind that these globals are generally regarded as bad. Advice: read up on dependency injection, and see what options there are.</p>
    </div>