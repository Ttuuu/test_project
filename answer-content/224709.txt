<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>DocStrings</h2>

<p><code>"""Docstrings"""</code> are not comments.  They are extracted by the <code>help()</code> function to return documentation to the user on how to use the module.  As written, if someone was to:</p>

<pre><code>&gt;&gt;&gt; import compress
&gt;&gt;&gt; help(compress)
</code></pre>

<p>They would be given the description of the module as:</p>

<blockquote>
  <p>Import Statements </p>
</blockquote>

<p>Use comments lines <code># ...</code> for descriptions about the code, and <code>"""Doc-strings"""</code> for descriptions of how to use the module/functions.</p>

<hr>

<h2>Don't use Recursion for Simple Loops</h2>

<pre><code>def get_random_letter(previous_letter):
    letter = random.choice(string.ascii_lowercase)
    return letter if letter != previous_letter else get_random_letter(previous_letter)
</code></pre>

<p>Here, you want to generate random lowercase letter which is different from the previous letter.  If Python used <a href="https://stackoverflow.com/questions/310974/what-is-tail-call-optimization">Tail Call Optimization</a>, this would be fine; the Python compiler would turn the recursive call into a jump statement to the top of the function.  But it does (and can't, due to the dynamic interpretive nature).  So each recursive call adds another stack-frame.  With a 1-in-26 possibility of getting a duplicate letter, the expected stack-frame depth will never get very large, but it is still the wrong control structure.  Just use a <code>while</code> loop.</p>

<pre><code>def get_random_letter(previous_letter):
    letter = previous_letter             # To ensure loop executes at least once
    while letter == previous_letter:
        letter = random.choice(string.ascii_lowercase)
    return letter
</code></pre>

<hr>

<h2>O(1) memory</h2>

<p>Compressing a 1,000,0000,000 character file will require over 32,000,000,000 bytes of memory, which seems a bit excessive.</p>

<ul>
<li>the file is read into memory as a long string</li>
<li>the long string is split into a list of single character strings.</li>
<li>each character is an object of at least 28 bytes</li>
<li>each entry in the list is at 4 or 8 byte pointer to the corresponding object.</li>
</ul>

<p>Yeouch!</p>

<p>Instead of reading the entire file into memory, and then splitting it, and then  writing out the compressed information:</p>

<ul>
<li>open the input &amp; output files simultaneously</li>
<li>read in characters one at a time</li>
<li>increment a count when the character is the same as the last</li>
<li>write out the character and count when the next character is different.</li>
</ul>

<p>Active memory usage: 2 characters and 1 integer.</p>

<hr>

<h2>A string is a <code>list</code> of characters</h2>

<p>Well, no, a string is a sequence of characters.  But the upshot is the same.  If you want to index a string character by character, just index the string.  There is no need to turn it into a list:</p>

<pre><code>s = "HELLO"
s[4] == "O"              # The easy way

l = list(map(str, s))    # Or the hard, and
l[4] == "O"              # memory inefficient way
</code></pre>

<hr>

<h2>Bug / deficiency</h2>

<p>Your <code>generate_file()</code> method avoids generating a sequence of more than 9 entries of the same character, but a compression function should be able to handle that, if it happens.</p>

<p>At present, if you compressed <code>AAAAAAAAAAAAAAABB</code>, it would compress to <code>A15B2</code>, which would be decompressed as <code>A1</code>, a single <code>A</code>, followed by <code>5B</code> which is B occurrences of the the letter <code>5</code> ... which will crash the decompression algorithm.</p>

<p>When your compressing encounters the 9th <code>A</code>, it should emit <code>A9</code> and then reset the count to zero, so <code>AAAAAAAAAAAAAAABB</code> would compress at <code>A9A6B2</code>.</p>

<p>Or your decompression algorithm should look for all of the digits after the letter, and interpret it as a multi digit number.</p>

<hr>

<h2>DRY: Don't Repeat Yourself</h2>

<p><code>file_to_one_line</code> and <code>file_to_list</code> contain the same code.  You could write one in terms of the other:</p>

<pre><code>def file_to_list(file):
    return list(map(str, file_to_line(file)))
</code></pre>

<p>... not that I like this function.</p>

<hr>

<h2>Read the Python Docs</h2>

<p>You are doing a lot of work to read the file line by line and accumulate the result as a string, when Python allows you to read in the entire file as a string:</p>

<pre><code>def file_to_one_line(file):
    """ Concats all lines in file to one line """
    with open(file, "r") as file_to_read:
        return file_to_read.read()
</code></pre>
    </div>