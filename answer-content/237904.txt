<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Something along these lines:
where your "entry point" is extension method <strong>DataTable.SqlToFile()</strong> (see DoWork below as a usage example). 
I'd suggest breaking your main logic of "serializing" datatable as xml/csv into separate methods - <strong>SqlToFile</strong> (saves "serialized" datatable into a file), <strong>SqlExtract</strong> (extracts datatable rows as xml or csv), and 2 separate methods <strong>SqlAsXML()</strong> and <strong>SqlAsCSV()</strong> to get xml and csv strings respectively.
To serialize into xml, I'm using GetXML() ( or you can use WriteXML() as you did). And to serialize into csv, by using StringBuilder() and iterating in Rows, "saving" each row as comma-delimited string.</p>

<p>In addition, data access logic is implemented as its own class.</p>

<pre><code>public static class SQLExtensions
{
    public static bool SqlToFile(this System.Data.DataTable dt, string xFilePath, string fileName)
    {
        try
        {
            string result = dt.SqlExtract(fileName);
            System.IO.File.WriteAllText(xFilePath, result);
            return true;
        }
        catch (System.IO.IOException ex)
        {
            return false;
        }
        catch (Exception ex)
        {
            return false;
        }
    }

    public static string SqlExtract(this System.Data.DataTable dt, string fileName)
    {
        string result = String.Empty;
        var xmlfiles = new[] { "item1", "item2", "item3" };
        if (xmlfiles.Contains(fileName))
        {
            result = dt.SqlAsXML(fileName);
        }
        else
        {
            string delimiter = ";";
            result = dt.FilterData().SqlAsCSV(delimiter);
        }
        return result;
    }

    public static string SqlAsXML(this System.Data.DataTable dt, string fileName)
    {
        var ds = new System.Data.DataSet();
        ds.Tables.Add(dt);
        string xml = ds.GetXml();
        return xml;
    }
    #region CSV related
    public static IEnumerable&lt;System.Data.DataRow&gt; FilterData(this System.Data.DataTable dtIns)
    {
        var list = dtIns
                        .Rows.Cast&lt;System.Data.DataRow&gt;()
                        .Where(
                                r =&gt; !((r[1].ToString() == "002" &amp;&amp; dtIns.Rows.IndexOf(r) &gt; 41) || (r[1].ToString() == "END" &amp;&amp; dtIns.Rows.IndexOf(r) &gt; 4))
                            )
                        ;
        return list;
    }
    public static string SqlAsCSV(this System.Data.DataTable dt, string delimiter = ",")
    {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i &lt; dt.Rows.Count - 1; i++)
        {
            System.Data.DataRow dr = dt.Rows[i];
            sb.AppendLine(dr.RowDataAsCSV(delimiter));
        }
        return sb.ToString();
    }
    public static string SqlAsCSV(this IEnumerable&lt;System.Data.DataRow&gt; rows, string delimiter = ",")
    {
        StringBuilder sb = new StringBuilder();
        foreach (var row in rows)
        {
            sb.AppendLine(row.RowDataAsCSV(delimiter));
        }
        return sb.ToString();
    }
    public static string RowDataAsCSV(this System.Data.DataRow row, string delimiter = ",")
    {
        string rowdata = String.Join(delimiter, row.ItemArray.Select(f =&gt; f.ToString()));
        return rowdata;
    }
    #endregion
}

public class DataAccess
{
    public async Task&lt; System.Data.DataTable&gt; DataAsync(string connectionInfo, string commandSQL)
    {
        System.Data.DataTable dt = new System.Data.DataTable("data");

        using (System.Data.SqlClient.SqlConnection connection = new System.Data.SqlClient.SqlConnection(connectionInfo))
        {
            try
            {
                await connection.OpenAsync().ConfigureAwait(false);
            }
            catch (InvalidOperationException ex)
            {
                return null;
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                return null;
            }
            using (System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand(commandSQL, connection))
            {
                using (var r = await command.ExecuteReaderAsync(System.Data.CommandBehavior.SequentialAccess).ConfigureAwait(false))
                {
                    dt.Load(r);
                }
            }
            connection.Close();
        }

        return dt;
    }
}

public class MainMainMain
{
    public async Task DoWork(string commandSQL, string xFilePath, string fileName)
    {
        string connectionString = @"Data Source=ipaddress; Initial Catalog=name; User ID=username; Password=password";
        var da = new DataAccess();
        var dt = await da.DataAsync(connectionString, commandSQL ).ConfigureAwait(false);
        if (dt != null)
        {
            bool converted = dt.SqlToFile(xFilePath, fileName);
        }
        else
        {
            //oh-ho
        }
    }
}
</code></pre>

<ul>
<li>furthermore, you could add common interface, and have AsXML and AsCSV as implmentations.</li>
</ul>
    </div>