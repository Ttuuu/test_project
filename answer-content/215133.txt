<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the following, I am omitting checking for the correctness of the outputs as you have not provided a specification for what that should be. Nevertheless, consider the following points.</p>

<ul>
<li><p>I think the signatures of your encoding and decoding functions are a bit unexpected: I would expect an encoding function to take a single string and not a vector of strings. This gives me the feeling that the function is doing too much (i.e., violating the guideline of <em>one function, one responsibility</em>). So I would break the logic into smaller pieces:</p>

<pre><code>std::string encode(const std::string&amp; str, int shift)
{
    std::string str_enc;
    std::transform(str.cbegin(), str.cend(), std::back_inserter(str_enc), [&amp;](char ch) -&gt; char 
    { 
        if (ch == 'z' || ch == 'Z')
        {
            return ch - 25;
        }
        else if (isspace(ch)) 
        {
            return ' ';
        }
        else
        {
            return ch + shift;
        }
    });

    return str_enc;
}

std::vector&lt;std::string&gt; encode(const std::vector&lt;std::string&gt;&amp; str, int shift)
{
    std::vector&lt;std::string&gt; tempMsg;
    std::transform(str.cbegin(), str.cend(), std::back_inserter(tempMsg),
        [&amp;](const std::string&amp; s) { return encode(s, shift); });

    return tempMsg;
}
</code></pre></li>
<li><p>In the main loop logic, before getting into any file reading, check whether the <code>choice</code> made by the user is sensible (either 1 or 2). This allows you to make <code>finalResult</code> const and to initialize it in a nicer way. This is a good modern practice as given by e.g., <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-lambda-init" rel="nofollow noreferrer">ES.28 of the C++ Core Guidelines</a>:</p>

<pre><code>assert(choice == 1 || choice == 2);
const std::vector&lt;std::string&gt; finalResult = [&amp;]()
{
    return choice == 1 ? encode(lines, key) : decode(lines, key);
}(); 
</code></pre></li>
<li><p>You don't have to explicitly close file streams. They close upon destruction.</p></li>
<li><p>To check if the file is good to go, you can do <code>if(inFile) { ... }</code> invoking its <code>operator bool()</code> which tells you if the stream has no errors and is ready for I/O operations (specifically, it returns <code>!fail()</code>).</p></li>
<li><p>When writing to file, you can use standard algorithms (like <code>std::copy</code>) since your logic is very simple:</p>

<pre><code>std::ofstream outFile("outfile.txt");
std::copy(finalResult.cbegin(), finalResult.cend(), 
    std::ostream_iterator&lt;std::string&gt;(outFile, "\n"));
</code></pre></li>
<li><p>Everywhere in your code, avoid using <code>std::exit</code> (for reasons and more discussion, see <a href="https://stackoverflow.com/questions/38724788/what-is-the-difference-between-exit-and-stdexit-in-c">here</a>). Instead, just do <code>return EXIT_FAILURE</code> or <code>return EXIT_SUCCESS</code> as appropriate.</p></li>
</ul>
    </div>