<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On my computer while the program runs and gives answers it still terminates with 0xC0000005 which means the memory problem is still there but it no longer stops the program.</p>

<p>The type of recursion you are using, where 2 functions (<code>int succ_value_smaller(struct list * ptr, int * V, int * count, int k)</code> and <code>int complete_list_to_array(struct list * ptr, int * V, int * count, int k)</code>) call each other, is sometimes called Figure Eight recursion and was used in earlier forms of Fortran because Fortran did not support recursion directly. It is not something I would really recommend when programming in C, it is very difficult to program correctly, debug and maintain.</p>

<h2>Self Documenting Code</h2>

<p>Commenting code is ok, but it should be kept to a minimum. When comments are included in the code they need to be maintained as well as the code to keep the comments in sync with the code, this adds overhead to maintenance. Good comments provide very high level information about why something is done, and wouldn't comment at lower levels of the code. It's also not clear why the cost of each function is documented, but that may be required for a homework assignment. It is better to make the function names and variable names as clear as possible. </p>

<p>It might be better to avoid abbreviations such as <code>succ_</code>, since it isn't quite clear what it means. It also isn't quite clear why the function <code>void pre_insert(struct list ** ptrptr, int value)</code> is called <code>pre_instert</code> since it is in fact doing the insertion.</p>

<h2>Variable Declarations and Initialization</h2>

<p>In the original version of the C programming language (sometimes referred to as K&amp;R C) all variables needed to be declared at the top of the function, this is no longer true, it is better to declare variables as they are needed, for instance in main there is <code>int i;</code> at the top of the function but <code>i</code> is only used in a <code>for</code> loop at the end of <code>main()</code>. The variable <code>i</code> can be declared in the <code>for</code> loop itself:  </p>

<pre><code>        for(int i = 0; i &lt; count; i++) {
            printf("The value of V[%d] is: %d.\n", i, V[i]);
        }
</code></pre>

<p>The variable <code>k</code> can also be declared later in <code>main()</code></p>

<pre><code>    int k = 0;
    count = complete_list_to_array(first_ptr, V, &amp;count, k);
</code></pre>

<p>The variable name <code>k</code> doesn't really indicate what k is used for, and it is never changed in the body of <code>main()</code>.</p>

<p>When using the C programming language it is best to initialize all variables when they are declared. Some programming languages initialize variables to a default, such as setting an integer value to 0, the C programming language is not one of them and it is quite easy to use a variable without initializing it, which can lead to bugs. So rather than the following at the top of <code>main()</code></p>

<pre><code>int main(void) {

    // variables declaration and dynamic allocation of the array.

    struct list * first_ptr;
    int N, k = 0;
    int i;
    int * V, count = 0;
</code></pre>

<p>It would be better to write the code this way</p>

<pre><code>int main(void) {

    // variables declaration and dynamic allocation of the array.

    struct list * first_ptr = NULL;
    int N = 0;
    int *V = NULL;
    int count = 0;

    V = (int *)malloc(sizeof(int)*count);
</code></pre>

<p><em>This shows us the first bug in the program, since <code>count</code> is zero the call to <code>malloc(size_t size)</code> fails because <code>zero * sizeof(int)</code> is zero. It is probably what caused the 0xC0000005 problem.</em>  </p>

<h2>Bug</h2>

<p>As pointed out above, the variable <code>V</code> is <code>NULL</code> and this leads to unknown behavior (bug). It might be better to use the variable <code>N</code> after the user has entered it.</p>

<pre><code>    printf("Insert the number of elements in the list.\n");
    scanf("%d", &amp;N);
    if (N &gt; 0)
    {
        V = malloc(sizeof(int)*N);
        if (V == NULL)
        {
            fprintf(stderr, "Failed to allocate the memory for the integer array V\n");
            return EXIT_FAILURE;
        }
    }
    else
    {
        fprintf(stderr, "The number of elements in the list must be greater than 0.\n");
        return EXIT_FAILURE;
    }
</code></pre>

<h2>Error Checking and Preventing Bugs</h2>

<p>There are 2 types of error checking that need to be implemented in this program. The first is to make sure user input is valid and the second is to make sure there are not memory allocation errors.</p>

<p>The function <code>scanf()</code> can fail in a number of ways. <code>scanf()</code> returns an integer value that indicates the success or failure of the call, if the number is greater than zero then <code>scanf()</code> succeeded, if the number is <code>EOF</code> or zero than <code>scanf()</code> failed. The user can also enter an invalid value and that needs to be checked.</p>

<p>The memory allocation functions <code>void *malloc(size_t size)</code>, <code>void *calloc(size_t count, size_t size)</code> and <code>void *realloc( void *ptr, size_t new_size )</code> can also fail for various reasons, although it is rare today do to the size of RAM on computers. If these functions fail they return <code>NULL</code>. Access through a null pointer yields unknown behavior, the easiest to see is the program crashing, data can also be corrupted which can be harder to detect. For this reason the return value of any of these functions should be tested to prevent invalid memory access (segmentation violation and other problems).</p>

<p>Putting these 2 error checks together:</p>

<pre><code>void scanf_failure()
{
    fprintf(stderr, "scanf() failed getting the number of elements in the list.\n");
    exit(EXIT_FAILURE);
}

int get_number_of_elements()
{
    int element_count = 0;

    printf("Insert the number of elements in the list.\n");
    int test_tnput_count = scanf("%d", &amp;element_count);
    if (test_tnput_count != EOF &amp;&amp; test_tnput_count &gt; 0)
    {
        while (element_count &lt;= 0)
        {
            fprintf(stderr, "The number of elements must be greater than zero.\n");
            test_tnput_count = scanf("%d", &amp;element_count);
            if (test_tnput_count == EOF || test_tnput_count &lt;= 0)
            {
                scanf_failure();
            }
        }
    }
    else
    {
        scanf_failure();
    }

    return element_count;
}

int main(void) {
    struct list * first_ptr = NULL;
    int N = 0;
    int *V = NULL;
    int count = 0;

    N = get_number_of_elements();
    V = malloc(sizeof(int)*N);
    if (V == NULL)
    {
        fprintf(stderr, "Failed to allocate the memory for the integer array V\n");
        return EXIT_FAILURE;
    }

    ...

    return EXIT_SUCCESS;
}
</code></pre>

<p>The rest of this review is copied from my answer to your question on <a href="https://stackoverflow.com/questions/59787830/crash-with-0xc0000005-on-my-list-based-program/59792376#59792376">Stack Overflow</a></p>

<h2>Prefer <code>calloc</code> Over <code>malloc</code> for Arrays</h2>

<p>There are 3 major allocation function in the C programming language, they are <code>void *malloc(size_t size_to_allocate)</code>, <a href="https://en.cppreference.com/w/c/memory/calloc" rel="nofollow noreferrer">void* calloc( size_t number_of_items, size_t item_size )</a> and <a href="https://en.cppreference.com/w/c/memory/realloc" rel="nofollow noreferrer">void *realloc( void *ptr, size_t new_size )</a>. The best for initially allocating arrays is <code>calloc</code> because it clearly shows that you are allocating an array, and because it zeros out the memory that is being allocated.</p>

<h2>Functions Should Return Values</h2>

<p>Rather than passing in a pointer to a pointer to get a new pointer value the <code>pre_insert(struct list * ptrptr, int value)</code> function should return the new pointer.</p>

<pre><code>struct list* pre_insert(struct list * ptrptr, int value) {
    struct list * tmp_ptr;

    tmp_ptr = ptrptr;
    ptrptr = NewPtr(value);
    if (tmp_ptr)
    {
        ptrptr-&gt;next_ptr = tmp_ptr;
    }

    return ptrptr;
}
</code></pre>

<h2>Missing Linked List Functions</h2>

<p>There are a standard set of linked list functions that should be implemented, these are</p>

<ul>
<li>create Node (shown above as <code>*NewPtr(int value)</code>)  </li>
<li>Insert Node  </li>
<li>Append Node  </li>
<li>Delete Node  </li>
<li>Find Node  </li>
</ul>

<p>Using these common linked list functions would make it much easier to implement the larger problem solution.</p>

<h2>Complexity</h2>

<p>If I was going to review this on code review, the first thing that I would suggest is that the function <code>int complete_list_array(struct list * ptr, int * V, int * count)</code> is too complex, this means it is doing too much in a single function. It would be easier for you to write/debug this if the contents of each of the internal if's was a function.</p>

<p>There are 2 concepts to consider here, the first is top down design and the second is the Single Responsibility Principle. <a href="https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design" rel="nofollow noreferrer">Top down design</a> is where you keep breaking the problem into smaller and smaller pieces until each piece is very easy to implement. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
    </div>