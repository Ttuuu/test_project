<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code can have many improvements.</p>

<h2>Fixing the bugs</h2>

<pre><code>0 1 2 
3 4 5 
6 7 8 
Input number 0 to 8 
asd
Input number 0 to 8 
asd
Input number 0 to 8 
0
⭕ 1 2 
3 4 5 
6 7 8 
Input number 0 to 8 
1
⭕ ❌ 2 
3 4 5 
6 7 8 
Input number 0 to 8 
2
⭕ ❌ ⭕ 
3 4 5 
6 7 8 
Input number 0 to 8 
3
⭕ ❌ ⭕ 
❌ 4 5 
6 7 8 
Input number 0 to 8 
4
⭕ ❌ ⭕ 
❌ ⭕ 5 
6 7 8 
Input number 0 to 8 
5
⭕ ❌ ⭕ 
❌ ⭕ ❌ 
6 7 8 
Input number 0 to 8 
6
⭕ ❌ ⭕ 
❌ ⭕ ❌ 
⭕ 7 8 
⭕  Player one is winner
Traceback (most recent call last):
  File "C:/Users/Administrator/.PyCharmCE2018.3/config/scratches/scratch_1.py", line 43, in start
    inputnumber = int(input('Input number 0 to 8 \n'))
ValueError: invalid literal for int() with base 10: 'asd'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:/Users/Administrator/.PyCharmCE2018.3/config/scratches/scratch_1.py", line 66, in &lt;module&gt;
    obj.start()
  File "C:/Users/Administrator/.PyCharmCE2018.3/config/scratches/scratch_1.py", line 45, in start
    self.start()
  File "C:/Users/Administrator/.PyCharmCE2018.3/config/scratches/scratch_1.py", line 46, in start
    if 0 &lt;= inputnumber &lt;= 8 :
UnboundLocalError: local variable 'inputnumber' referenced before assignment
</code></pre>

<p>After the wrong input was given, the recursive statement was stored in stack and was run later.</p>

<p><code>UnboundLocalError</code> occured because <code>inputnumber</code> was used inside <code>try</code> statement. To prevent that from happening, you can just add <code>inputnumber = None</code> before the <code>try</code> statement.</p>

<p>Even after that:</p>

<pre><code>0 1 2 
3 4 5 
6 7 8 
Input number 0 to 8 
asd
Input number 0 to 8 
0
⭕ 1 2 
3 4 5 
6 7 8 
Input number 0 to 8 
3
⭕ 1 2 
❌ 4 5 
6 7 8 
Input number 0 to 8 
1
⭕ ⭕ 2 
❌ 4 5 
6 7 8 
Input number 0 to 8 
6
⭕ ⭕ 2 
❌ 4 5 
❌ 7 8 
Input number 0 to 8 
2
⭕ ⭕ ⭕ 
❌ 4 5 
❌ 7 8 
⭕  Player one is winner
Traceback (most recent call last):
  File "C:/Users/Administrator/.PyCharmCE2018.3/config/scratches/scratch_1.py", line 67, in &lt;module&gt;
    obj.start()
  File "C:/Users/Administrator/.PyCharmCE2018.3/config/scratches/scratch_1.py", line 47, in start
    if 0 &lt;= inputnumber &lt;= 8 :
TypeError: '&lt;=' not supported between instances of 'int' and 'NoneType'
</code></pre>

<p><code>TypeError</code> occurs because <code>inputnumber</code> was <code>None</code>, as a <code>ValueError</code> was caught while converting <code>inputnumber</code> to <code>int</code>. This moves on to the next line where it compares <code>inputnumber</code> (which is <code>None</code>) to <code>0</code> and <code>8</code>.</p>

<p>To prevent that, you must add <code>return</code> statement after <code>self.start()</code></p>

<h2>Miscellaneous</h2>

<ul>
<li><p><strong>Don't use elif statements unnecessarily</strong></p></li>
<li><p><strong>Parentheses for <code>if</code> statements should be avoided</strong><br>
<code>if (self.draw[0] == self.draw[1] and self.draw[1] == self.draw[2]) :</code>
should be replaced with<br>
<code>if self.draw[0] == self.draw[1] and self.draw[1] == self.draw[2]:</code></p></li>
<li><p><strong>In python, <code>if a == b and b == c</code> can be replaced with <code>if a == b == c</code></strong></p></li>
<li><p><strong>Use meaningful variable names</strong><br>
<code>p1</code> can be changed to <code>player1</code>, and <code>counte</code> can be changed to <code>counter</code>, <code>draw</code> could be <code>board</code>, etc.</p></li>
<li><p><strong><code>if somevalue == False</code> should be replaced with <code>if not somevalue</code></strong></p></li>
</ul>

<p>Here's the final code after some more small changes:</p>

<pre class="lang-py prettyprint-override"><code>X = '\U00002B55'
O = '\U0000274C'

class TicTacToe:
    def __init__(self):
        self.player1 = X
        self.player2 = O
        self.board = list(range(9))

        self.counter = 0
        self.Print()

    def fillNumber(self,inputnumber):
        self.counter += 1

        if self.counter % 2:
            player = self.player1
        else:
            player = self.player2

        self.board[inputnumber] = player

    def condition(self):
        # Rows
        if self.board[0] == self.board[1] == self.board[2]: return self.board[0]
        if self.board[3] == self.board[4] == self.board[5]: return self.board[3]
        if self.board[6] == self.board[7] == self.board[8]: return self.board[6]

        # Columns
        if self.board[0] == self.board[3] == self.board[6]: return self.board[0]
        if self.board[1] == self.board[4] == self.board[7]: return self.board[1]
        if self.board[2] == self.board[5] == self.board[8]: return self.board[2]

        # Diagonals
        if self.board[0] == self.board[4] == self.board[8]: return self.board[0]
        if self.board[6] == self.board[4] == self.board[2]: return self.board[6]

        return False

    def Print(self):
        for i in range(1, 10):
            print(self.board[i - 1], end=' ')

            if i % 3 == 0:
                print()

        print()

class Game(TicTacToe):
    def start(self):
        inputnumber = None

        try:
            inputnumber = int(input('Input number 0 to 8: '))

            if not 0 &lt;= inputnumber &lt;= 8:
                raise ValueError

        except ValueError:
            print('Please input a valid number')
            self.start()

            return

        if (self.board[inputnumber] == X) or (self.board[inputnumber] == O):
            print('This place is already occupied')
            self.start()

        else:
            self.fillNumber(inputnumber)

        self.Print()
        self.check()

    def check(self):
        winner = self.condition()

        if not winner:
            self.start()

        if winner == X: print(winner, ' Player one is winner')
        if winner == O: print(winner, ' Player two is winner')

if __name__ == '__main__':
    obj = Game()
    obj.start()
</code></pre>
    </div>