<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My code works properly but the matter is that it counts big numbers
  for a very long time. I have no idea how to optimize my code. Maybe
  you can help me to make it faster?</p>

<pre><code>...
number_of_partitions=lambda n:sum(1 for _ in get_answer(n))
</code></pre>
</blockquote>

<p>Don't count. Calculate.</p>

<p>The Wikipedia article on <a href="https://en.wikipedia.org/wiki/Partition_(number_theory)#Partition_function" rel="nofollow noreferrer">partitions</a> gives the Hardy-Ramanujan estimate \$P(n) = \Theta(n^{-1} e^{k \sqrt n})\$ with \$k=\pi \sqrt\frac23\$. Since your code finds the partitions to count them, and since the "average" partition has a lot of \$1\$s, your running time is \$\Omega(e^{k \sqrt n})\$.</p>

<p>The Wikipedia article also gives a number of recurrence relations, including one which uses generalised pentagonal numbers (giving a running time of \$\Theta(n^{1.5})\$), and another which uses the sum of divisors function (giving a running time of \$\Theta(n^2)\$ if you pre-calculate the sum of divisors using e.g. the sieve of Eratosphenes). An alternative quadratic approach (which you could find by following the <a href="http://mathworld.wolfram.com/PartitionFunctionP.html" rel="nofollow noreferrer">Mathworld link</a> from Wikipedia) uses the auxiliary function \$P(n,k)\$ for the number of partitions of \$n\$ into parts of which the largest is exactly \$k\$ and the recurrence \$P(n,k)=P(n-1,k-1)+P(n-k,k)\$.</p>
    </div>