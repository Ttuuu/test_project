<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a simpler way to create the empty image using <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.zeros_like.html" rel="nofollow noreferrer"><code>numpy.zeros_like</code></a>:</p>

<pre><code>empty_img = numpy.zeros_like(img)
</code></pre>

<p>As <a href="https://codereview.stackexchange.com/users/106818/austin-hastings">Austin Hastings</a> correctly pointed out, the trick is to use vectorized operations provided by numpy:</p>

<pre><code>RED, GREEN, BLUE = (2, 1, 0)

reds = img[:, :, RED]
greens = img[:, :, GREEN]
blues = img[:, :, BLUE]
</code></pre>

<hr>

<pre><code>mask = (greens &lt; 35) | (reds &gt; greens) | (blues &gt; greens)
</code></pre>

<p>or, using <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.amax.html" rel="nofollow noreferrer"><code>numpy.amax</code></a></p>

<pre><code>mask = (greens &lt; 35) | (numpy.amax(img, axis=2) != greens)
</code></pre>

<p>Now, one option is to use conditional indexing to modify <code>empty_img</code>. Since it's a 3 channel image (represented as 3 dimensional array), and our mask is only 1 channel (represented as 2 dimensional array) there are two possibilities:</p>

<ul>
<li>assign 3-tuples: <code>empty_img[mask] = (255,0,0)</code></li>
<li>provide the 3rd index: <code>empty_img[mask,0] = 255</code></li>
</ul>

<p>If all you care about is just a single channel mask, then <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.where.html" rel="nofollow noreferrer"><code>numpy.where</code></a> is a possibility.</p>

<pre><code>result = numpy.where(mask, 255, 0)
</code></pre>
    </div>