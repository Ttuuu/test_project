<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming things is hard</h2>

<p>Two of your variables have terrible names. To see what I mean, try to guess what the following variables contain, by only looking at their name, but not at your code:</p>

<ul>
<li><code>numbers</code></li>
<li><code>random_gen</code></li>
</ul>

<p>All the other variables are named really good. They name exactly their purpose or accurately describe their content, like <code>incorrect</code> or <code>answer</code>.</p>

<h2>Source code layout</h2>

<p>In the first section you list the quiz questions. Each of these questions should be on its own line of the code, to clearly show to the reader how the code is structured. That way, all quiz questions are listed nicely below each other, and it's easily possible to count the questions by checking their line numbers in the editor.</p>

<p>It's also easy to see that the <code>443</code> question is missing the protocol (<code>TCP</code>), which is difficult to see in the current layout.</p>

<p>The <code>443</code> question uses a single string as answer, while the <code>22</code> question uses a tuple of the application protocols. Which one is correct, or are they both? I doubt so.</p>

<p>What is the difference between <code>AND</code> and <code>and</code> in the questions? If there is none, choose one spelling and stick to it.</p>

<h2>Redundancy</h2>

<p>Instead of repeating the question names in <code>random_gen</code>, you can just use the expression <code>numbers.keys()</code>.</p>

<p>Instead of writing the number 20 everywhere, better describe what you really mean by that number, which is <code>len(questions)</code>. (By now you should have renamed the <code>numbers</code> variable to the more appropriate <code>questions</code>).</p>

<h2>Typos</h2>

<ul>
<li><code>Imap</code> is spelled <code>IMAP</code></li>
<li><code>VPN443</code> is spelled <code>VPN</code></li>
<li><code>incorrectis</code> is spelled <code>incorrect is</code></li>
</ul>

<h2>Bug</h2>

<p>The program does not guarantee that you get each question once. Instead of using <code>random_choice</code> for each of the questions you should rather shuffle the questions and then just iterate over them.</p>

<h2>Code improvements</h2>

<ul>
<li>Instead of <code>(1==1)</code>, better write <code>True</code>.</li>
<li>Instead of <code>var == first or var == second</code>, better write <code>var in (first, second)</code>.</li>
<li>There is no need to enclose each condition of an <code>if</code> or <code>while</code> in parentheses. That's only necessary in C and related languages. In Python and Go, it is considered bad style.</li>
</ul>

<p>The function <code>Sec_port_game</code> should simply be named <code>quiz</code> since that is more specific than <code>game</code>, and at the same time makes the code independent from the Sec+ exam.</p>

<p>The function <code>quiz</code> should take the questions as a parameter, so that you can call it like this:</p>

<pre class="lang-py prettyprint-override"><code>quiz(secplus_questions)
quiz(popular_rock_bands_questions)
</code></pre>

<p>It could be implemented like this:</p>

<pre class="lang-py prettyprint-override"><code>import random
from typing import Dict


def quiz(questions: Dict[str, str]):

    shuffled_keys = random.shuffle(list(questions.keys()))
    for key in shuffled_keys:
        question = questions[key]

        # TODO: ask the question, compare the answer
</code></pre>
    </div>