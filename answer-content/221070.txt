<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By reviewing your code, the first thing that comes to my mind is a lot of <code>if</code> statements. You should try and keep those minimal by writing solutions to be as general as they can be.</p>

<p>Another thing that I don't like in your code is that you are doing manipulation of array passed to the function, instead of going out with a fresh one. It looks like this manipulation is what leads to a lot of <code>if</code>s in the first place.</p>

<p>So main point on how you can refactor your code is that you initialize an empty array which will act as a result and then manipulate that code:</p>

<pre><code>function stutter(arr) {
    const result = []

    for (let word of arr) { // for..of loop is a bit clearer to read
        result.push(word, word) // push can accept N arguments
    }

    return result
}
</code></pre>

<p>So by initalizing resulting array with an empty one, you cleared of a case that the argument array passed in is empty, because <code>for..of</code> loop won't do the looping at all.
I've used <code>for..of</code> loop here since it's less code, but you could also use the C-like <code>for</code> like you've written in your question. Note that that loop also wouldn't loop if the argument array was empty, therefor <strong>no need for the <code>if(arr.length == 0)</code></strong>.</p>

<p>By the way, I'm a bit puzzled with what exactly is the point of the last <code>if</code> you have in the code, but I think that with the refactoring I've provided, then there is no need for it at all.</p>

<hr>

<p>Since you've asked for more JS way of doing this, here are two ways:</p>

<p>Using <code>map</code> and <code>flat</code> (this one <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#Browser_compatibility" rel="nofollow noreferrer">won't run in Edge</a>):</p>

<pre><code>function stutter(arr) {
    return arr.map(x =&gt; [x, x]).flat()
}
</code></pre>

<p>Using just <code>reduce</code>:</p>

<pre><code>function stutter(arr) {
    return arr.reduce((result, current) =&gt; [...result, current, current], [])
}
</code></pre>

<hr>

<p><strong>EDIT</strong></p>

<p>As @AndrewSavinykh pointed out, the assignment is worded in such way that the original array should be mutated. If that truly is the case, and both Andrew and me are not misreading it, then the solution would be to  <strike>just reassign the <code>result</code> to <code>arr</code> and return <code>arr</code></strike> (@JollyJoker pointed that previous answer was not correct) use <code>splice</code> (the code is updated for the first example, but same thing can be done for the other two):</p>

<pre><code>function stutter(arr) {
    const result = []

    for (let word of arr) { // for..of loop is a bit clearer to read
        result.push(word, word) // push can accept N arguments
    }

    arr.splice(0, arr.length, result)
    return arr
}
</code></pre>

<p>On the other hand, I'd advise against input arguments mutation, because you can easily forget which function mutates the arguments and which not, so it can create some additional cognitive load while reading the code. Also, it goes against the principles of functional programming where you want your functions to be as <em><a href="https://en.wikipedia.org/wiki/Pure_function" rel="nofollow noreferrer">pure</a></em> as they can.</p>
    </div>