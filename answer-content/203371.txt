<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This program could be improved by using more specific tools from the standard Library</p>

<h2>Use a Scanner</h2>

<p>The best way to extract words from a text is to use a <code>bufio.Scanner</code> with the split function <code>bufio.ScanWords</code> ( see this <a href="https://golang.org/pkg/bufio/#example_Scanner_words" rel="nofollow noreferrer">example</a> in godoc)</p>

<p>The for loop in <code>getGroupedWords</code> could be rewritten like this : </p>

<pre><code>scanner := bufio.NewScanner(file)
scanner.Split(bufio.ScanWords)
for scanner.Scan() {
    str := strings.ToLower(scanner.Text())
    ... 
}
</code></pre>

<h2>Use a sort.StringSlice</h2>

<p>Instead of having two map <code>words</code> and <code>groupedWords</code>, we could have just a single map of type <code>map[int]sort.StringSlice</code>. <code>sort.StringSlice</code> provides a <code>Sort()</code> method and a <code>Search()</code> method to check if the slice already contains a specific string. </p>

<p>The content of the previous for loop could be this: </p>

<pre><code>str := strings.ToLower(scanner.Text())
if !re.MatchString(str) {
    wordList := words[len(str)]
    wordList.Sort()
    i := wordList.Search(str)
    if i &lt; len(wordList) &amp;&amp; str == wordList[i] {
        // the word is already present in the slice
    } else {
        words[len(str)] = append(wordList, str)
    }
}
</code></pre>

<h2>Use fmt.Printf instead of fmt.Print</h2>

<p>The method <code>fmt.Printf</code> is intended to print strings in a specific format. This help improving readability: </p>

<p>in the <code>main()</code> function, the part </p>

<pre><code>lettersCntList := getSortedKeysGroupedWord(groupedWords)
for _, lettersCnt := range lettersCntList {
    list := getSortedKeysWord(groupedWords[lettersCnt])
    fmt.Print(lettersCnt, "(", len(list), "):\t")
    for _, word := range list {
        fmt.Print(word, " ")
    }
    fmt.Println()
}
</code></pre>

<p>could be rewritten like this : </p>

<pre><code>for i := 0; i &lt; len(groupedWords); i++ {
    if wordList, ok := groupedWords[i]; ok {
        wordList.Sort()
        fmt.Printf("%d(%d):\t%s\n", i, len(wordList), strings.Join(wordList, " "))
    }
}
</code></pre>

<h2>Details</h2>

<ul>
<li>A regex can be defined as global variable with <code>regex.MustCompile</code>, so we don't need to check for error. If the regex is incorrect, the program won't build</li>
<li>avoid method like <code>check(err error)</code> and handle error locally instead </li>
</ul>

<p>The final program : </p>

<pre><code>package main

import (
    "bufio"
    "fmt"
    "os"
    "regexp"
    "sort"
    "strings"
)

var re = regexp.MustCompile("[^a-zA-Z]")

func groupedWords(file *os.File) (map[int]sort.StringSlice, int) {

    var words = map[int]sort.StringSlice{}
    maxSize := 0

    scanner := bufio.NewScanner(file)
    scanner.Split(bufio.ScanWords)
    for scanner.Scan() {
        str := strings.ToLower(scanner.Text())

        if len(str) &gt; maxSize {
            maxSize = len(str)
        }

        if !re.MatchString(str) {
            wordList := words[len(str)]
            wordList.Sort()
            i := wordList.Search(str)
            if i &lt; len(wordList) &amp;&amp; str == wordList[i] {
                // the word is already present in the slice
            } else {
                words[len(str)] = append(wordList, str)
            }
        }
    }
    return words, maxSize
}

func main() {

    var input = os.Stdin

    args := os.Args
    if len(args) &gt; 1 {
        f, err := os.Open(args[1])
        if err != nil {
            panic(err)
        }
        input = f
    }

    groupedWords, maxSize := groupedWords(input)

    for i := 0; i &lt;= maxSize; i++ {
        if wordList, ok := groupedWords[i]; ok {
            wordList.Sort()
            fmt.Printf("%d(%d):\t%s\n", i, len(wordList), strings.Join(wordList, " "))
        }
    }
}
</code></pre>
    </div>