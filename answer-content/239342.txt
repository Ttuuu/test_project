<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Comments and whitespace</h1>

<p>Out of the 174 lines in your program, only 50 are lines of code (that list that's excessively spaced out is only counted as one). I would definitely think about what comments are needed in your program, i.e comments that explain why you did something should stay, and code that's just been commented out because it's not needed should be removed. Trim your whitespace too. While separating chunks of code can be helpful, you're overdoing it a little.</p>

<h1>Operator Spacing</h1>

<p>There should be a space before and after an operator in your program. Have a look:</p>

<pre><code>name=input("Name: ") # WRONG
name = input("Name: ") # CORRECT
</code></pre>

<p>This is a convention outlined in <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>, the python convention guide.</p>

<h1>Utilizing newlines</h1>

<p>Instead of</p>

<pre><code>print()
print("testing 123")

print("testing 123")
print()
</code></pre>

<p>you can do this</p>

<pre><code>print("\ntesting 123")

print("testing 123\n")
</code></pre>

<p>Just a little quirk to reduce line count a bit, and reduces clutter since it doesn't require an additional <code>print</code> statement.</p>

<h1>Chain function calls</h1>

<p>Instead of</p>

<pre><code>multi_lined_input = input("\n")
multi_lined_input=multi_lined_input.lower()
multi_lined_input=multi_lined_input.replace('-', ' ')
</code></pre>

<p>you should chain these calls:</p>

<pre><code>multi_lined_input = input("\n").lower().replace('-', ' ')
</code></pre>

<p>Reduces line count and is still pretty clear what's going on.</p>

<h1>Dict to list of tuples</h1>

<p>There's a simpler way of converting a dict to a list of tuples. Casting the items of a dict to a list automatically does it for you. Have a look:</p>

<pre><code>keys_and_values_tuples_list = list(frequency_of_words_dict.items())
</code></pre>

<h1>Bug removing punctuation</h1>

<p>When I enter <code>"Linny"</code>, I expect to see <code>Linny</code> with a frequency of one. Instead I see <code>"Linny</code> with a frequency of one. This is because of the logic in your list comprehension. If it sees punctuation at the end, it will remove it and move onto the next word, instead of checking the beginning as well. The next line also only checks the end of the string. You can clean up this logic by utilizing some built in string methods, <code>translate</code> and <code>maketrans</code>. Have a look:</p>

<pre><code>get_rid_of_punctuation_marks = [item.translate(str.maketrans('', '', string.punctuation)) for item in raw_word_list]
</code></pre>

<p>This removes all the punctuation by passing <code>string.punctuation</code> as a parameter to the <code>translate</code> function. This makes the next line with <code>remove_consecutive_trailing_punctuation</code> irrelevant. Then you can just use <code>get_rid_of_punctuation_marks</code> in your list comprehension when capitalizing the words.</p>
    </div>