<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>It looks like all the <code>Pokemon</code> member variables should be private, not public.</p></li>
<li><p>The <code>Pokemon</code> constructor takes <code>catch_rate</code> as an <code>int</code>, where it should be a float.</p></li>
<li><p>The <code>Pokemon</code> constructor could <code>std::move</code> the string argument into <code>m_type</code>.</p></li>
<li><p><code>Pokemon::type()</code> could return by <code>const&amp;</code> to avoid an unnecessary copy.</p></li>
<li><p><code>Castform::m_forms</code> is not used anywhere, but should probably also be <code>static</code> and <code>const</code>.</p></li>
<li><p>When overriding a virtual function, we should always use the <code>override</code> keyword (and arguably also the <code>virtual</code> keyword):</p>

<pre><code>virtual bool attempt_catch() override { ... }
</code></pre></li>
<li><p>Use the C++11 <code>&lt;random&gt;</code> functionality, not <code>rand()</code>.</p></li>
</ul>

<hr>

<p>Run-time polymorphism with virtual functions in C++ is driven by a need to treat objects of different types with the same interface. Unfortunately, this example lacks the motivation for it:</p>

<ul>
<li><p>Currently the <code>attempt_catch()</code> function could be implemented in the <code>Pokemon</code> base-class with no problem.</p></li>
<li><p>There is no example of differing behavior (i.e. there should be a second pokemon type implementing a different <code>attempt_catch()</code> function). Maybe an attack function would work better?</p></li>
<li><p>There is no demonstration of using the different types through the same interface. In C++ this usually boils down to storing different types in the same container (e.g. iterating a <code>std::vector&lt;std::unique_ptr&lt;Pokemon&gt;&gt;</code> and calling the virtual function). However, it might be simpler to pass two different pokemon types to a function taking a <code>Pokemon</code> reference:</p>

<pre><code>void throw_pokeball(Pokemon const&amp; target) { target.attempt_catch() } // or something
</code></pre></li>
</ul>

<hr>

<p>Depending on what this is actually for, I'd suggest approaching things in a "problem <code>-&gt;</code> solution" way, both in terms of what the code does (see above), but also in terms of language development and why these features exist. i.e.</p>

<ul>
<li><p>"Here's what programmers used to have to do without this language feature [...]. It sucks because [...]"</p></li>
<li><p>"This language feature allows us to do [...] safely and easily because [...]".</p></li>
</ul>

<hr>

<p>Note that there are many different types of both static and dynamic polymorphism in C++ (e.g. function overloading, implicit conversions, function objects, template parameters (traits, tags, etc.)), not just inheritance and virtual functions.</p>
    </div>