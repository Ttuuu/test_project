<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Improving <code>removeDuplicates</code></h3>

<p>It's recommended to use an enhanced for-each loop instead of a counting loop when possible:</p>

<pre><code>for (int num : arr) {
    if (lastFound == num) {
        totalDuplicates++;
    } else {
        lastFound = num;
        uniqueArray[currPos] = num;
        currPos++;
    }
}
</code></pre>

<p>And you can get rid of <code>totalDuplicates</code>, as <code>currPos</code> already contains that same information:</p>

<pre><code>int currPos = 1;
for (int num : arr) {
    if (lastFound != num) {
        lastFound = num;
        uniqueArray[currPos] = num;
        currPos++;
    }
}

return Arrays.copyOf(uniqueArray, currPos);
</code></pre>

<p>I noticed later that your original code does an unnecessary comparison for the first element or <code>arr</code>: it would be enough to iterate from the 2nd element. Unfortunately, for that we need to bring back the counting loop:</p>

<pre><code>int currPos = 1;
for (int i = 1; i &lt; arr.length; ++i) {
    int num = arr[i];
    if (lastFound != num) {
        lastFound = num;
        uniqueArray[currPos] = num;
        currPos++;
    }
}

return Arrays.copyOf(uniqueArray, currPos);
</code></pre>

<h3>Reduce allocations</h3>

<p>Note that <code>removeDuplicates</code> allocates an array to collect the unique elements (<code>uniqueArray</code>),
and finally returns a clone of that array, with the appropriate size,
thus allocating for one more array.
If you don't mind modifying the input array, then you can avoid the allocation of <code>uniqueArray</code> by overwriting the content of the input array:</p>

<pre><code>private static int[] removeDuplicates(int[] arr) {
    if (arr.length &lt;= 1) {
        return arr;
    }

    int lastFound = arr[0];

    int currPos = 1;
    for (int i = 1; i &lt; arr.length; ++i) {
        int num = arr[i];
        if (lastFound != num) {
            lastFound = num;
            arr[currPos++] = num;
        }
    }

    return Arrays.copyOf(arr, currPos);
}
</code></pre>

<h3>Unit testing</h3>

<p>To verify the implementation works,
and for safe refactoring,
it's good to have some unit tests around, for example:</p>

<pre><code>@Test
public void test_1_2_3() {
    int[] orig = {1, 2, 3};
    assertArrayEquals(orig, removeDuplicates(orig.clone()));
}

@Test
public void test_empty() {
    int[] orig = {};
    assertArrayEquals(orig, removeDuplicates(orig.clone()));
}

@Test
public void test_single() {
    int[] orig = {3};
    assertArrayEquals(orig, removeDuplicates(orig.clone()));
}

@Test
public void test_1_1_1() {
    int[] orig = {1, 1, 1};
    assertArrayEquals(new int[]{1}, removeDuplicates(orig.clone()));
}

@Test
public void test_1_1_1_2_2_3_3_3() {
    int[] orig = {1, 1, 1, 2, 2, 3, 3, 3};
    assertArrayEquals(new int[]{1, 2, 3}, removeDuplicates(orig.clone()));
}

@Test
public void test_1_2_3_3_3() {
    int[] orig = {1, 2, 3, 3, 3};
    assertArrayEquals(new int[]{1, 2, 3}, removeDuplicates(orig.clone()));
}

@Test
public void test_1_2_2_2_3() {
    int[] orig = {1, 2, 2, 2, 3};
    assertArrayEquals(new int[]{1, 2, 3}, removeDuplicates(orig.clone()));
}
</code></pre>
    </div>