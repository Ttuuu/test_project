<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall good job, the code checks <code>malloc()</code> and sometimes checks <code>scanf()</code> for errors, generally braces wrap logic in <code>if</code> statements and loops. The functions generally adhere to the <code>Single Responsibility Principle</code>.</p>

<p>It's not clear why the function <code>createNewState()</code> is unused since this would greatly simplify the <code>main()</code> function.</p>

<p>There should be a function <code>createNewTransition()</code> that handles creating a transition, this would simplify the code in <code>void appendTransition(Transition **tList, char *newS, char ch)</code>.</p>

<p>Recursion isn't necessary in <code>void appendTransition(Transition **tList, char *newS, char ch)</code>, it is very easy in a <code>while</code> loop to find the last transition in the list.</p>

<h2>Readability</h2>

<p>The structure/type names are good because they are descriptive.</p>

<p>Since stdlib.h already has to be included for <code>malloc()</code>, it might be better to use <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code> as the exit status.</p>

<pre><code>int main() {

...

    if(automaton == NULL) exit(EXIT_FAILURE);

    ...

    return EXIT_SUCCESS;
}
</code></pre>

<p>The variable name <code>n</code> isn't as descriptive as it could be, since the function to get the number of states is called <code>getNStates()</code> the variable could be called <code>nStates</code>.</p>

<h2>Keep the User Informed</h2>

<p>The program does not prompt the user for input even though it expects user intput, and the program does not report errors, it only quits when there are errors.</p>

<p>The user should be prompted for input and error reporting should be added to error handling.</p>

<pre><code>void  reportErrorAndQuit(char *emsg)
{
    fprintf(stderr, emsg);
    exit(EXIT_FAILURE);
}

int readNStates(){
    int nStates = 0;

    printf("Please enter the number of states in the automaton, the number of states must be greater than zero.\n");

    int scanfStatus = scanf("%d", &amp;nStates);
    if (scanfStatus &lt; 1 || scanfStatus == EOF) {
        reportErrorAndQuit("Unable to read input, exiting program\n");
    }

    return nStates;
}

int getNStates() { // gets the number of states in the automaton
    int nStates = 0;

    while  (nStates &lt;= 0) {
        nStates = readNStates();
    }

    return nStates;
}
</code></pre>

<h2>Calling <code>exit()</code></h2>

<p>It is not necessary to call <code>exit(int exitStatus)</code> from <code>main()</code> a simple <code>return exitStatus;</code> is what is generally used. Call <code>exit()</code> from functions other than <code>main()</code> since the other functions don't return values to the operating system.</p>

<h2>Reading a Line of Input From <code>stdin</code></h2>

<p>The C library provides 2 functions for reading a line of input which might be better than using <code>scanf("%[^\n]", line);</code>. These functions are <a href="http://www.cplusplus.com/reference/cstdio/fgets/" rel="nofollow noreferrer">fgets(char *input_buffer, int max_buffer_size, FILE *stream)</a> and <code>gets(char *input_buffer)</code>. The function <code>fgets()</code> is considered safer since the buffer size is known and there will be no buffer overflow.</p>

<pre><code>        size_t charsRecieved = fgets(line, 100, stdin);
        if (size_t &lt; 1) reportErrorAndQuit("Can't line read input from stdin\n");
</code></pre>

<p>There is a constant defined in stdio.h which is often used with <code>fgets()</code>, this constant is BUFSIZE and it is system dependent, generally the largest line that can be read.</p>

<p>If the function <code>fgets()</code> is used then the code doesn't have to clear the input buffer after <code>scanf()</code>.</p>

<h2>State *move(State **automaton, int nStates, State *currState, char ch)</h2>

<p>In this function the line </p>

<pre><code>    if(tList == NULL) return NULL;
</code></pre>

<p>is not necessary, the condition in the while loop will handle this case, if <code>tList</code> is <code>NULL</code> it the code will not enter the loop.</p>
    </div>