<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions to <em>simplify</em> the code:</p>

<ul>
<li>Instead of creating all possible combinations of <em>indices</em> and using these
as subscript into the list, <code>comb(A, n)</code> can be used directly to get all n-element combinations.</li>
<li>There is no need to create an intermediate list in order to pass it to <code>np.sum()</code>.</li>
<li>Variable names should be lowercase.</li>
<li>Put the code into a <em>function</em> so that it can be easily tested and reused.</li>
</ul>

<p>Generally you might consider to switch to Python 3, or at least make it
Python 3 compatible (compare <a href="https://docs.python.org/3/howto/pyporting.html#porting-python-2-code-to-python-3" rel="nofollow noreferrer">Porting Python 2 Code to Python 3</a>).</p>

<p>Then it would look like this:</p>

<pre><code>from __future__ import print_function
import numpy as np
from itertools import combinations as comb


def sum_of_products(a, n):
    """Computes the sum of all products of n elements in a."""
    return np.sum(np.prod(x) for x in comb(a, n))


if __name__ == "__main__":
    n = 2
    a = np.random.rand(1000)
    print(sum_of_products(a, n))
</code></pre>

<p>This is not necessarily <em>faster.</em> There are 166167000 ways to pick three
elements out of 1000 – I am curious if someone comes up with a better
approach to compute that in reasonable time!</p>
    </div>