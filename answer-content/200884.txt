<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>A few errors in the code</h2>

<p>There are a few errors in your code: <code>r</code> being initialized with itself in <code>operator-</code>, a wrong initialization order in your constructors, and an superfluous class specifier in <code>Integer Roman_int::roman_to_integer(const Roman&amp; roman);</code>. You should correct them directly in you post, at least the last one which prevents your code from compiling.</p>

<h2>A domain-specific error</h2>

<p>Romain numerals are a bit trickier than you seem to think. Your <code>is_valid_roman</code> function lets invalid roman literals pass, such as <code>"MMICXIX"</code>. You can't only check whether characters are valid, their order also counts.</p>

<p>Here's a valid algorithm, based on the components you offer in your code with some simplification:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;

const std::pair&lt;std::string, int&gt; look_up[] = 
{
        { "M",1000 },
        { "CM",900 },
        { "D",500 },
        { "CD",400 },
        { "C",100 },
        { "XC",90 },
        { "L",50 },
        { "X",10 },
        { "IX",9 },
        { "V",5 },
        { "IV",4 },
        { "I",1 },
};

bool is_valid_roman(const std::string&amp; input) {
    // roman litterals must:
    // 1. be constitued of subsequences registered in the look-up table and
    // 2. those subsequences must be in decreasing order and
    // 3. only one-letter subsequence can be repeated
    auto num_it = std::begin(look_up); 
    auto num_last = std::end(look_up);
    for (auto it = input.begin(); it != input.end(); ) {
        if (num_it == num_last) return false; // rules 1 and 2
        while (!std::equal(num_it-&gt;first.begin(), num_it-&gt;first.end(), it))
            if (++num_it == num_last) return false; // rules 1 and 2
        std::advance(it, num_it-&gt;first.size());
        if (num_it-&gt;first.size() == 2) ++num_it; // rules 3
    }
    return true;
}
</code></pre>

<p>The idea is to progressively consume the look-up table in order to enforce the decreasing order of the roman number's subsequences.</p>

<h2>Don't throw away useful results</h2>

<p>It is worth noticing that the algorithm to check if the roman number is valid is more or less the same than the algorithm to compute its value. It'd be best not to do work twice, then. The best way to do that is to rely on <code>std::optional</code> to relay the result: it's empty if the number is ill-formed, and contains a value otherwise:</p>

<pre><code>std::optional&lt;int&gt; roman_integer_value(const std::string&amp; input) {
    // roman litterals must:
    // 1. be constitued of subsequences registered in the look-up table and
    // 2. those subsequences must be in decreasing order and
    // 3. only one-letter subsequence can be repeated
    auto value = 0;
    auto num_it = std::begin(look_up); 
    auto num_last = std::end(look_up);
    for (auto it = input.begin(); it != input.end(); ) {
        if (num_it == num_last) return {};
        while (!std::equal(num_it-&gt;first.begin(), num_it-&gt;first.end(), it))
            if (++num_it == num_last) return {};
        std::advance(it, num_it-&gt;first.size());
        value += num_it-&gt;second;
        if (num_it-&gt;first.size() == 2) ++num_it;
    }
    return value;
}
</code></pre>

<p><code>is_valid_roman</code> can now be based on it with a simple <code>static_cast&lt;bool&gt;</code> (<code>operator bool</code> is part of <code>std::optional</code>'s interface).</p>

<h2>Your exception handling isn't coherent</h2>

<p>In your constructor, you check if the roman number is valid, and that is good. But then, <code>operator-</code> silently substitutes 1 to values equal to or less than 0, which can lead to bugs really hard to find. And in <code>operator==</code> you're checking whether roman and integral values are equivalent -although this is the invariant the constructor establishes- but consider that it isn't worth to throw if they aren't.</p>

<p>Also, be more specific: <code>std::runtime_error</code> is a bit general, whereas <code>std::range_error</code> is designed for such occasions.</p>

<h2>factorize operations on integer values</h2>

<p>You miss on an occasion to factorize your operators, for instance:</p>

<pre><code>template &lt;typename Binary_function&gt;
Roman_int binary_operation_on_integer_value(const Roman_int&amp; a, const Roman_int&amp; b, Binary_function&amp;&amp; fn) {
    return Roman_int{ std::forward&lt;Binary_function&gt;(fn)(a.as_integer(), b.as_integer()) };
} 

Roman_int operator*(const Roman_int&amp; a, const Roman_int&amp; b)
{
    return binary_operation_on_integer_value(a, b, std::multiplies{});
}
</code></pre>

<p>This doesn't seem much, but the extra thinking would have prevented:</p>

<pre><code>Roman_int operator-(const Roman_int&amp; a, const Roman_int&amp; b)
{
    int result = a.as_integer() - b.as_integer();
    if (result &lt; 0) {
        result = 1;
    }
    Roman_int r{ result };
    return r;
}
</code></pre>

<p>which should rely on the constructor to throw an exception whenever <code>a &lt;= b</code>. <code>operator==</code> would also have been more efficient this way.</p>

<h2>No comment</h2>

<p>Actually I'm commenting on the absence of comment. Your <code>is_valid_roman</code> should be commented: which rules are you trying to enforce?</p>

<h2>The nested struct <code>Roman_integer_values</code> is useless</h2>

<p>I understand the desire to illustrate features, but this <code>struct</code> doesn't bring anything to the table an <code>std::pair</code> wouldn't also bring, besides maybe the naming. Also, it is defined inside <code>Roman_int</code>, and is never used inside that class: that means it has a useless, cumbersome extra long qualified name (<code>roman_int::Roman_int::Roman_integer_values</code>)</p>

<h2>Use <code>array</code> over <code>vector</code> when</h2>

<p>no dynamic allocation is needed. Your look up table shouldn't grow, so use an <code>std::array</code> instead.</p>

<h2>Miscellaneous</h2>

<p><code>while (tmp_integer - it-&gt;integer &gt;= 0)</code> in <code>integer_to_roman</code>, isn't very readable. Use a simple comparison instead: <code>while (tmp_integer &gt;= it-&gt;integer)</code></p>

<p>"while (tmp_integer - it-&gt;integer &gt;= 0)" not optimal
run_time error not specific enough
look_up_table should be an array</p>
    </div>