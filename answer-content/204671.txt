<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Aside from the excellent review from KIKO Software, I think it would be beneficial for you to understand some basic concepts, so here you are:</p>

<ol>
<li>Your sql queries are 100% safe because you are using prepared statements for the data literals.</li>
<li>I don't really get what is your concern about <code>mysqli_real_escape_string</code> but be advised that <a href="https://phpdelusions.net/top#escaping" rel="nofollow noreferrer">this function has nothing to do with security at all</a>.</li>
<li>there is a <strong>big security hole</strong> in your code nevertheless. <code>$config = parse_ini_file('config2.ini');</code> means that your database credentials are open to anyone. At least put them in a PHP file, so even called directly it won't reveal any information. </li>
<li>Your code should be always <em>readable</em>. And your current code is almost unreadable due to insane nesting. There are a lot of useless conditions such as <code>if(isset($name))</code>, and there are a lot of unnecessary nesting. There is no point in checking the email only if the password is correct. Why not to check <strong>both</strong> and tell a user at once? So, do not nest one into another, make them consequent, not dependent. Introduce an $error variable to collect all validation errors and then have just <strong>a single condition</strong> to tell whether the data is OK or not. </li>
</ol>

<p>And also there are some minor issues as well:</p>

<ul>
<li><code>$name = $_POST['username']; if(isset($name))</code> makes absolutely no sense due to the nature of isset() function. You just defined this variable yourself, why you're checking its existence?</li>
<li><code>trim($name) == ' '</code> condition makes no sense as well, due to the nature of trim() function. It just cannot return a lone space character, it will be stripped.</li>
<li><code>if(isset($_POST['submit']))</code> is severely misplaced. You are already working with half of a dozen POST variables and then all of sudden decide to test whether it was  request was the POST request. It should be the first condition in the code.</li>
<li><code>if(!isset($con))</code> is also look strange. Why do you think there could be no connection? There should be no such uncertainty.</li>
<li>the connection code is insufficient which will cause many problems. Please refer to my article on <a href="https://phpdelusions.net/mysqli/mysqli_connect" rel="nofollow noreferrer">How to properly connect to Mysql database using mysqli</a></li>
<li><p>the fetch code is superfluous as well. The whole code block </p>

<pre><code>                $stmt-&gt;bind_result($un);
                $usernamefound = 'false';
                while ($stmt-&gt;fetch())
                {
                    if(isset($un))
                    {
                        $usernamefound = 'true';
                        print_r ('Username already exists.');
                    }
                }
// should be changed to just TWO lines:

                $stmt-&gt;bind_result($usernamefound);
                $stmt-&gt;fetch();
</code></pre></li>
<li>the <code>if ($usernamefound == 'false')</code> is just wrong. <code>false</code> is a <strong>constant</strong> and should be written without quotes.</li>
<li>the whole condition <code>if (filter_var($_SERVER['REMOTE_ADDR']...</code> is superfluous as well. <code>$_SERVER['REMOTE_ADDR']</code> is always correct, otherwise the request would not reach your server at all. There is no point in testing <code>$_SERVER['REMOTE_ADDR']</code> (as opposed to HTTP headers that may contain various IPs)</li>
</ul>

<p>After fixing these issues (and - especially - the nesting) you'll get a pretty decent code. </p>
    </div>