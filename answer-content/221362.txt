<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Docstring</h2>

<p>Is <code>nums</code> really of type <code>List[int]</code>?  Perhaps the first time it is, but after the first step, it is going to turn into a <code>List[float]</code>.</p>

<hr>

<h2>Efficiency</h2>

<p>Assuming <code>nums</code> is a list of numbers (<code>int</code> or <code>float</code>), you never need to call <code>float()</code> on any of the values.  If you expect a list of 4 strings (<code>"1"</code>, through <code>"9"</code>) from the contest input, turn them into numbers using <code>int(_)</code> and then pass the <code>List[int]</code> to your judge function.</p>

<hr>

<p>The test <code>nums[0] == 24 or abs(nums[0] - 24.0) &lt;= 0.1</code> could be simplified to just <code>abs(nums[0] - 24.0) &lt;= 0.1</code>.</p>

<hr>

<p>Your doing a lot more work than you think you are.  This code is looping through your list, finding pairs of values:</p>

<pre><code>    for i in range(len(nums)):
        for j in range(len(nums)):
            if i == j:
                continue
</code></pre>

<p>For each pair, i &amp; j, you compute all possible combinations of those values, including reverse subtraction and reverse division.</p>

<p>And later, you'll encounter the same pair only as j &amp; i!  And you'll compute all possible combinations of those values a second time.</p>

<p>If your inner loop started at one index after the current outer loop index, then you'd never generate a pair of indices with <code>i &gt; j</code> ... or even <code>i == j</code>, so you can omit that test as well.  Finally, since the inner loop starts at 1 index above the outer loop, the outer loop should end one index early:</p>

<pre><code>    for i in range(len(nums)-1):
        for j in range(i+1, len(nums)):
</code></pre>

<hr>

<p>You could also use <code>enumerate( )</code> to loop over the values along with their indices at the same time.</p>

<pre><code>    for i, a in enumerate(nums[:-1]):
        for j, b in enumerate(nums[i+1:], i+1):
</code></pre>

<p>And then you can refer to <code>a</code> instead of <code>nums[i]</code>, and <code>b</code> instead of <code>nums[j]</code>, which will prevent repeated indexing into the <code>nums[]</code> array, which will result in decreased performance.</p>

<hr>

<p>Management of remaining values:</p>

<pre><code>            indexes = set([x for x in range(len(nums))])
            indexes.remove(i)
            indexes.remove(j)
            next_items = [nums[index] for index in indexes]
</code></pre>

<p>First <code>set([x for x in range(len(nums))])</code> could simply be <code>set(range(len(nums)))</code>.  There is no need for the list comprehension.</p>

<p>But this is still a lot of extra work.  Simply copy the numbers to a new list, and then delete the i-th &amp; j-th entries.  Since <code>i &lt; j</code> is guaranteed, deleting the j-th element first won't change the location of the i'th element:</p>

<pre><code>            next_items = nums[:]
            del next_items[j]
            del next_items[i]
</code></pre>

<p>Or, build up the new list with just the elements you want by omitting the i-th and j-th elements:</p>

<pre><code>            next_items = nums[:i] + nums[i+1:j] + nums[j+1:]
</code></pre>

<hr>

<p><code>2+2 == 2*2</code> and <code>1*1 == 1/1 == reverse_div(1,1)</code>.  It is a small optimization, but instead of making a list of all possible <code>operations</code> values, you could make a <code>set()</code> of the values, which would eliminate some redundant recursive steps.</p>

<hr>

<p>If you don't need this to be a <code>class</code> as a requirement of the leetcode automated judging, you can gain some efficiency by not passing an extra <code>self</code> argument all the time.  This can simply be a function.</p>

<hr>

<h2>Reworked Code</h2>

<pre><code>def judge_point_24(nums):

    for i, a in enumerate(nums[:-1]):
        for j, b in enumerate(nums[i+1:], i+1):
            operations = {a+b, a*b, a-b, b-a}
            if a:
                operations.add(b/a)
            if b:
                operations.add(a/b)

            if len(nums) &gt; 2:
                next_items = nums[:i] + nums[i+1:j] + nums[j+1:]
                for x in operations:
                    if judge_point_24(next_items + [x]) == True:
                        return True
            else:
                return any(abs(x-24) &lt; 0.1 for x in operations)

    return False

if __name__ == '__main__':

    def test(expected, nums):
        print(nums, judge_point_24(nums))
        assert judge_point_24(nums) == expected

    test(True, [4, 1, 8, 7])
    test(False, [1, 2, 1, 2])
</code></pre>
    </div>