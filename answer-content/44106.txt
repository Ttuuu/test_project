<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Complexity</h2>

<p>Pedantically, the time-complexity is \$ O( m \times n ) \$, where <code>m</code> is <code>str.length</code> and <code>n</code> is <code>substr.length</code>. This matters when \$ \left| m-n \right| \$ is large.</p>

<p>The Space complexity is \$ O(1) \$. You do not allocate any size-based memory structures.</p>

<h2>Safety</h2>

<p>It all looks good. There are no threading issues, no leaks, no problems.</p>

<h2>Correctly</h2>

<p>Nope, I don't like the lack of neat handling for invalid inputs.... you should be null-checking, etc. Getting a raw 'NullPointerException' looks bad.</p>

<p>Edit: <em>Note that</em> <a href="https://codereview.stackexchange.com/a/44107/31503">Josay has pointed out</a> that your code (and my code below) produce different behaviour to <code>String.indexOf()</code> when the search term is the empty-string/empty-array.</p>

<h2>Alternative</h2>

<p>I think your code is fine, but... I tend to use loop break/continue more than most... and, this saves a bunch of code in this case...</p>

<p>Also, for readability, I often introduce a <code>limit</code> variable when the loop-terminator can be complicated....</p>

<p>Consider the following loops which do not need the <code>count</code> variable:</p>

<pre><code>int limit = len - sublen + 1;
searchloop: for (int i = 0; i &lt; limit; i++) {
    for (int j = 0; j &lt; sublen; j++) {
        if (str[j+i] != substr[j]) {
            continue searchloop;
        }
    }
    return i;
}
return -1;
</code></pre>
    </div>