<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have any performance related suggestions unfortunately. I do have a couple cleanup suggestions though.</p>

<p>The bounds checking function can be cleaned up a bit by making use of "comparison chaining" similar to what you'd use in Pytbon:</p>

<pre><code>(defn within-bounds? [[row col] width height]
  (and (&lt; -1 row width)
       (&lt; -1 col height)))
</code></pre>

<hr>

<p>In the iteration function, you have</p>

<pre><code>{:width width
 :height height
 :grid next-grid
 :ant-pos next-pos
 :ant-dir next-dir
 :stopped? false}
</code></pre>

<p>This is less than ideal for a few reasons</p>

<ul>
<li><p>You're reassociating entries that already exist in the map. This is unlikely to effect performance, but causes unneeded code bloat. It also creates a potential source of bugs if you add a new entry into the game state. Will you remember to update the map retuned by the function? I'd use <code>assoc</code> here instead.</p></li>
<li><p>You're associating <code>false</code> with the <code>:stopped?</code> key. Following the logic of the function though, it must already be falsey there.</p></li>
</ul>

<p>I'd just write</p>

<pre><code>(assoc world :grid next-grid
             :ant-pos next-pos
             :ant-dir next-dir}
</code></pre>

<hr>

<p>In <code>init-world</code>, you're using <code>(into [])</code> to convert to vectors. This can be written slightly neater using <code>vec</code>.</p>

<pre><code>:grid (vec (repeat height
                   (vec (repeat width 0))))
</code></pre>

<p>I also typically space this code out like I have above (I actually write this exact code fairly often).</p>

<hr>

<p>This is entirely subjective, but instead of maintaining a <code>:stopped?</code> flag, I prefer to use a <code>:running?</code> one instead (the logic is flipped). I find it tends to lead to easier to read code. </p>
    </div>