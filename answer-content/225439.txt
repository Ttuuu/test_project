<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>üîÜ Bright side</h1>

<p>Your code gives the correct output and delivers on the premise of extensibility.</p>

<h1>üìù Suggestions</h1>

<p>Here are some suggestions:</p>

<ol>
<li><p>The name <code>key</code> is a name that doesn't tell a lot about the nature of the tuple. If you feel that it is appropriate, that would conflict with <code>responsesByMultiples</code>. Then It would have made more sense for the latter to be named <code>keys</code>. Personally, I'd prefer to call <code>responses</code> or <code>rules</code>.</p></li>
<li><p>These <em>rules</em> expressed by a tuple without labels is a little bit confusing. Better use a struct, or just add labels.</p></li>
<li><p>You can easily decompose a tuple this way:</p>

<pre><code>for (multiple, response) in responsesByMultiples {
    ...
}
</code></pre></li>
<li><p>Calling the first element <code>multiple</code> is a little bit too optimistic (or pessimistic depending on the way you to see things), it presumes that there is a high probability that <code>n</code> is actually a multiple of <code>multiple</code>. It would make more sense to me to name the first element of the tuples <code>dividsor</code>.</p></li>
<li><p><code>n</code> is a bit too generic, use <code>dividend</code> instead.</p></li>
<li><p>You don't have to specify the type in <code>isMultiple: Bool</code>, type inference can do the job for you. Generally speaking, specifying the type can help in reducing the compile times, but in this case, it wouldn't make a difference.</p></li>
<li><p>Instead of using <code>(n % multiple) == 0</code>, there is a nice <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0225-binaryinteger-iseven-isodd-ismultiple.md" rel="nofollow noreferrer">syntax</a> in Swift 5 :</p>

<pre><code>n.isMultiple(of: multiple)
</code></pre>

<p>(this syntax exacerbates the problem mentioned in 4.)</p></li>
<li><p>To check that a String is empty, it is more efficient to check the <code>.isEmpty</code> property. <a href="https://tio.run/##tY/PSgQxDMbv8xRh8NCClgoeZNnByyp68rAPsNRpZzfQP0ObUZZlX93aVlnwLAYSQki@75f0gRPdZXRziARPYfFaEQafrSFQMaojDMCkEOvbnZSyJhdOzXCCHaDv4Cc2YXmzRkTldXAM/QraDYd1ae7hAfoeVrCliH7P@mdjbehFOizTZI1mnDehc9fpAKfWV/9EqkANsFFkGL@Mo0mLrfPGJya0ZGIBupIwDNXofFk1Xv@@b2UuFMS@ZcRYfqbruikInXnxRexd2S360bBGUOj@TCYwPbqZjv/BlvPnOFm1T/nm9Qs" rel="nofollow noreferrer">Here</a> is a benchmark that confirms it:</p>

<pre><code>import Foundation

let array = (0..&lt;1_000_000).map { _ in
    Double.random(in: 0..&lt;1) &lt; 0.8 ? "" : String("Hello".shuffled())
}

do {
    let start = Date()
    let result = array.filter { $0 == "" }
    let end = Date()

    print(result.count, end.timeIntervalSince(start))
}

do {
    let start = Date()
    let result = array.filter { $0.isEmpty }
    let end = Date()

    print(result.count, end.timeIntervalSince(start))
}
</code></pre>

<p>The execution times are respectively <code>44ms</code> and <code>34ms</code>.</p></li>
</ol>

<h1>üíî Putting it all together ‚ù§Ô∏è</h1>

<p>Here a version of your code that takes the previous points into account :</p>

<pre><code>func fizzBuzz (
    number dividend: Int,
    rules: [(Int, String)] = [(3, "Fizz"), (5, "Buzz")]
    ) -&gt; String {

    var result: String = ""

    for (divider, response) in rules
        where dividend.isMultiple(of: divider) {
        result += response
    }

    return result.isEmpty ? String(dividend) : result
}
</code></pre>

<h1>üßê Further reading</h1>

<p>You can find many implementations of this classic question on Code Review. <a href="https://codereview.stackexchange.com/q/91663/49921">Here</a> is a quite informative one.</p>
    </div>