<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall your code makes a pretty good impression. Now I normally don't work with Java, so I won't say too much about that, but here's what I've got:</p>

<h3>Tokenizer</h3>

<ul>
<li><code>true</code> and <code>false</code> are parsed too greedily: <code>trueTypeFontSize + falseMarginOffset</code> is parsed as <code>[LIT_TRUE, IDENTIFIER("TypeFontSize"), OP_PLUS, LIT_FALSE, IDENTIFIER("MarginOffset")]</code></li>
<li>Most methods in <code>TokenStream</code> should be private. Calling code shouldn't be able to mess with the parsing by advancing the stream, or by calling a token-specific method such as <code>getNextInt</code> when it's not appropriate to do so. Only <code>getNextToken</code>, <code>peekNextToken</code>, <code>mark</code> and <code>rewind</code> need to be public, the rest are implementation details.</li>
<li><code>peekNextToken(int n)</code> does not restore <code>pos</code> if <code>getNextToken</code> throws an exception.</li>
<li>Besides spaces, you may also want to ignore (or otherwise handle) other whitespace characters, such as tabs and newlines. Replacing the <code>while (peek() == ' ') next();</code> part with a <code>skipWhitespace</code> method call should make that a little easier and more self-descriptive, too.</li>
</ul>

<h3>Lexer</h3>

<ul>
<li>Similar to <code>Tokenizer</code>, <code>Lexer</code> should hide its implementation details. <code>programLine</code> is probably the only method that should be public.</li>
<li><code>programLine</code> is not a very descriptive name. <code>parseProgramLine</code> sounds a little better. 'line' may not be very accurate however (depending on whether you support multiple expressions per line), so maybe <code>parseNextExpression</code> is better still. Most method names here are missing a verb.</li>
<li>I'd move assignment-parsing out of <code>programLine</code> into a separate <code>parseAssignment</code> method.</li>
<li>Assignments behave as expressions (they return the assigned value), so the lexer could treat them as any other expression, which would allow things like <code>a :- b :- 4</code>.</li>
<li><code>Lexer</code> is almost always calling <code>peekNextToken</code> before <code>getNextToken</code>. Because of how token peeking is implemented this results in twice as much parsing work. It's better to cache peeked tokens.</li>
<li>Some lexer method names are a little confusing. For example, <code>singleBool</code> can return complex boolean expressions, and <code>minTerms</code> and <code>boolExpression</code> are actually used to handle <code>&amp;&amp;</code> and <code>||</code> precedence.</li>
<li>The lexer seems to perform some kind of type checking. But it doesn't have sufficient information to do so: is <code>a</code> a boolean or a math expression? You don't know unless you inspect the context in which it appears.</li>
<li>Since type checking at this stage isn't very useful, you could unify boolean and math expressions. Both <code>a == b</code> and <code>4 + 5</code> would be binary expressions. This should simplify the parsing code a lot. Type checking can be done after parsing is complete, or even at runtime, depending on how you want your language to work.</li>
</ul>

<h3>AST</h3>

<ul>
<li>I'd expect <code>evaluate</code> to take some kind of context argument. Right now, assignments use a <code>ScopeManager</code>, which looks like it's static/global, so that probably limits your language to a single global scope.</li>
<li>I don't think reusing <code>TokenType</code> for operators is a good idea, because many languages tend to have symbols with context-specific meanings. For example, a <code>&lt;</code> token may be interpreted as a less-than operator, but some languages also use it for generic parameter syntax. Also, things like <code>TokenType.IDENTIFIER</code> and <code>TokenType.EOF</code> aren't valid operators.</li>
</ul>

<h3>Other</h3>

<ul>
<li>Putting else bodies on the same line (<code>else return expression();</code>) makes code harder to read.</li>
<li>Some people always surround single-line <code>if</code> and <code>else</code> bodies with braces. Personally I'm not that strict about it (I just add braces when I add another line), but seeing an <code>if</code> body with braces and its <code>else</code> body without does look inconsistent.</li>
<li>It would be useful to document the grammar of your language.</li>
<li>I don't know if you're using automated tests, but doing so shouldn't be too difficult and probably pays off fairly quick.</li>
<li>It may be useful to have some test that pass randomly generated strings to your tokenizer, or randomly generated lists of tokens to your lexer, to increase the chance of spotting broken edge-cases (fuzzing).</li>
</ul>
    </div>