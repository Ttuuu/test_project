<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The exercise calls for bit shifting. Only bit shifting, nothing else, really. Your main tools are:</p>
<ul>
<li>checking if the last bit is 0 or 1 with: <code>num &amp; 1</code></li>
<li>then shift by one bit to the right: <code>num &gt;&gt; 1</code></li>
</ul>
<p>A naive implementation could go like this:</p>
<pre><code>    String result = "";
    while (num &gt; 0) {
        result = (num &amp; 1) + result;
        num &gt;&gt;= 1;
    }
    return result;
</code></pre>
<p>But that won't work for negative numbers. A simple tweak can fix that:</p>
<pre><code>    String result = "";
    while (num != 0) {
        result = (num &amp; 1) + result;
        num &gt;&gt;&gt;= 1;
    }
    return result;
</code></pre>
<p>Instead of the signed bit shift operator <code>&gt;&gt;</code>, we need to use the unsigned bit shift operator <code>&gt;&gt;&gt;</code>, to shift the negative bit just like all the others. And we changed the condition to <code>!= 0</code> instead of <code>&gt; 0</code>.</p>
<p>But this won't work for 0. But only for 0. So you can add a simple condition to handle that.</p>
<p>Lastly, string concatenation is inefficient. We can do better using a <code>StringBuilder</code>.
But a <code>StringBuilder</code> only has an <code>append</code> method, doesn't have <code>prepend</code>. It has an <code>insert</code> method, but that won't be efficient.
A simple solution is to append the bits and reverse at the end.</p>
<pre><code>String toBinaryString(int num) {
    if (num == 0) {
        return "0";
    }

    StringBuilder builder = new StringBuilder(32);
    while (num != 0) {
        builder.append(num &amp; 1);
        num &gt;&gt;&gt;= 1;
    }
    return builder.reverse().toString();
}
</code></pre>
<p>In any case, the <code>StringBuilder</code> is not a critical piece here.
You could use a <code>char[]</code> with 32 elements to store the digits,
and transform that to a string to return.</p>
    </div>