<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>void insert(Node *current, int data);
void delete(Node *current, int data);
void print(Node *current);
int find(Node *current, int data);
</code></pre>

<p>As written, you don't need these.  The definition can serve as a declaration as well.  </p>

<pre><code>// current is pointing to first element
// we iterate until we find the end
</code></pre>

<p>You can avoid this with </p>

<pre><code>typedef struct DoublyLinkedList {
    struct Node *head;
    struct Node *tail;
} DoublyLinkedList;
</code></pre>

<p>Then <code>insert</code> can be </p>

<pre><code>void insert(DoublyLinkedList list, int data) {
    // create a new Node and insert the item
    list.tail-&gt;next = (Node *)malloc(sizeof(Node));
    (list.tail-&gt;next)-&gt;prev = list.tail;
    list.tail = list.tail-&gt;next;
    list.tail-&gt;data = data;
    list.tail-&gt;next = NULL;
}
</code></pre>

<p>You also might want to consider calling that <code>append</code> rather than <code>insert</code>.  To me, <code>insert</code> implies that it could be at the beginning or in the middle.  In fact, my first thought was that you'd insert at the beginning of the list.  </p>

<p>Alternately, you could also just make <code>head</code> into a <code>root</code> node.  </p>

<pre><code>Node *root = (Node *)malloc(sizeof(Node));
root-&gt;next = root;
root-&gt;prev = root;
</code></pre>

<p>This is hackier but allows for </p>

<pre><code>void insert(Node *root, int data) {
    // create a new Node and insert the item
    (root-&gt;prev)-&gt;next = (Node *)malloc(sizeof(Node));
    ((root-&gt;prev)-&gt;next)-&gt;prev = root-&gt;prev;
    root-&gt;prev = (root-&gt;prev)-&gt;next;
    (root-&gt;prev)-&gt;data = data;
    (root-&gt;prev)-&gt;next = root;
}
</code></pre>

<p>But you have to change the other functions to match.  E.g. </p>

<pre><code>void delete(Node *root, int data) {
    Node *current = root;

    // Iterate until we find a pointer next to the one we need to delete
    while ( current-&gt;next != root &amp;&amp; (current-&gt;next)-&gt;data != data ) {
        current = current-&gt;next;
    }

    // Item is not found
    if ( current-&gt;next == root ) {
        printf("\nElement %d is not present in the list\n", data);
        return;
    }

    // The element is found in the node next to the one that current points to
    // We removed the node which is next to the pointer (which is also temp)
    Node *tmp = current-&gt;next;

    current-&gt;next = tmp-&gt;next;
    (current-&gt;next)-&gt;prev = tmp-&gt;prev;

    // We got rid of the node, now time to deallocate the memory
    free(tmp);
}
</code></pre>

<p>I found </p>

<pre><code>    tmp-&gt;prev = current;
</code></pre>

<p>Which is unnecessary as the next step is to free <code>tmp</code>.  </p>

<pre><code>    return;
</code></pre>

<p>This is also unnecessary.  The function will return naturally at the end.  You only need to use <code>return</code> if you want to leave early.  </p>

<pre><code>int find(Node *current, int data) {
</code></pre>

<p>Why not </p>

<pre><code>Node * find(Node *current, int data) {
</code></pre>

<p>Then you can get the true or false result by something like </p>

<pre><code>if ( NULL != find(root, value) ) {
</code></pre>

<p>Then you can implement <code>delete</code> as </p>

<pre><code>Node *location = find(root, value);
if ( NULL != location ) {
    delete(location);
}
</code></pre>

<p>With definition:</p>

<pre><code>void delete(Node *current) {
    (current-&gt;prev)-&gt;next = current-&gt;next;
    (current-&gt;next)-&gt;prev = current-&gt;prev;

    // We got rid of the node, now time to deallocate the memory
    free(current);
}
</code></pre>

<p>Or stick with the original method signature:</p>

<pre><code>void delete(Node *root, int data) {
    Node *current = find(root, value);

    // Item is not found
    if ( NULL == current ) {
        printf("\nElement %d is not present in the list\n", data);
        return;
    }

    (current-&gt;prev)-&gt;next = current-&gt;next;
    (current-&gt;next)-&gt;prev = current-&gt;prev;

    // We got rid of the node, now time to deallocate the memory
    free(current);
}
</code></pre>

<p>Note that if you removed the separate declarations, you would want to move <code>find</code> above <code>delete</code> in the code.  </p>

<pre><code>return 0;
</code></pre>

<p>This would never be reached and is unnecessary in <code>main</code>.  The compiler will add it for you.  </p>
    </div>