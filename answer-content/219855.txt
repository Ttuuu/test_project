<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I am not sure how I would inherit a static method</p>
</blockquote>

<p>As I'm sure you've figured out, you can't. I also don't think this would make any sense in your case, since the APIs is not the same. If you are just wanting to reduce the amount of code that these <code>Add</code> methods have in common, then hopefully some of my suggestions below will help.</p>

<h2><code>tm</code> Redundancy</h2>

<p>Why do you need <code>pos</code>, <code>rot</code>, and <code>scl</code> along with <code>tm</code>? As best I can tell, these are redundant, and redundancy requires effort to maintain. However, I'm guessing you have a good reason (e.g. <code>tm</code> is useful for computing vertices for actual rendering, while the others are useful for querying and diagnostic rendering). I would be inclined to think very hard about whether <code>tm</code> will always contain the same information as the others, and if every class is going to include <code>Mat4 tm = Mat4.PosRotScaleTM(p, r, new Vec3(_scl, _scl, _scl));</code> I would consider packaging all this information up in a <code>struct</code>, maybe called <code>Orientation</code> or something (only suggesting a name because I use it below).</p>

<p>This will reduce the number of little parameters being passed around, reduce code-duplication a little (maybe not-insignificantly if you have other classes which use the same sort of information), and replace those long lines which are full of confusion with something that says "I'm just packaging these up so that I can supply them to the base-class" without any risk of getting it wrong. There is a risk that this will just create unnecessary structures, but I think it's worth considering. It would be most useful if you could change the orientation of objects (because you could swap-out everything at once, or provide (potentially efficient) mutator methods for common operations which maintain consistency), but it looks like that isn't a concern here.</p>

<h2>Correctness</h2>

<p>This line is suspect:</p>



<pre class="lang-cs prettyprint-override"><code>verticesGlobal = verticesLocal;
</code></pre>

<p>I'm guessing you really meant something like <code>verticesGlobal = verticesLocal.ToArray()</code> (LINQ style copy). Currently have the same array in 2 variables and change the contents across 2 methods and it's all very confusing and misleading and I'm sure it's not what you intended.</p>

<h2>Initialisation</h2>

<p>It's weird that <code>SetVerticies</code> doesn't set anything, generally that it has a different API from <code>UpdateEdges</code>, when they perform the same kind of role.</p>

<p>Should <code>verticesGlobal._set</code> be <code>private</code> rather than protected?</p>

<h2>Separation of concerns</h2>

<p>Note that none of your derived classes (those that I can see) ever look at anything they send down to <code>BaseObject</code>'s constructor: there isn't really a dependency here (only <code>Edges</code> is shared). Generally, the whole thing feels like you are packing too much logic into <code>BaseObject</code>: would it make sense to separate 'objects' from their 'geometry'? That way, you could construct some <code>Quad</code> geometry, which doesn't care about position or scaling, and simply provides methods to obtain some verticies and some edges (maybe defines edges as indexes into the vertex array so you don't need any fancy initialisation?). Then your object class can just combine some position information (<code>tm</code> and such) with some geometry info, all of which could be performed in the constructor, because the 'geometry' object is initialised before the 'object' object.</p>

<p>There are many ways you could facilitate such a separation; I'd be inclined to create one well-defined layer of abstraction for geometry, so you have the freedom to hide whatever you want behind it.</p>

<pre class="lang-cs prettyprint-override"><code>public interface IGeometry
{
    /// &lt;summary&gt; Generates model-space vertices for the geometry &lt;/summary&gt;
    Vec3[] GetVertices();

    /// &lt;summary&gt; Generates edges for the geometry from world-space coordinates &lt;/summary&gt;
    Line3[] GetEdges(Vec3[] vertices, Color col);
}
</code></pre>

<p>The <code>object</code> class constructor might then look more like:</p>

<pre class="lang-cs prettyprint-override"><code>public Object(Orientation _orientation, IGeometry _geometry string _name, string _type)
{
    orientation = _orientation;
    geometry = _geometry;
    col = _col;
    name = _name;
    type = _type;

    verticesLocal = geometry.GetVertices();
    verticesGlobal = transform(orientation, verticesLocal);
    edges = geometry.GetEdges(verticesGlobal, col);
}
</code></pre>

<p>... in fact that would be the entire class excepting the <code>transform</code> method (which could be provided by <code>Orientation</code>, or indeed the <code>Mat4</code>): it's just drawing together the different concerns for a particular object.</p>

<p>I'm not convinced <code>col</code> really fits in here... but I'd expect material information to be separated from the geometry and position information somehow, but without changing how <code>Edges</code> are consumed that will be difficult.</p>

<p>If you still want to be able to pass around a <code>Box</code> object and interrogate its <code>Box</code>ness, then you can make the 'object' class generic on the type of geometry. The downside is that to pass around an 'object' whose geometric type you <em>don't</em> care about you need an interface, either a geometry independent one, or a covariant one (but that isn't necessarily a bad thing).</p>

<p>I should stress that I've not thought about this very hard, and this change may not fit into your complete project, or indeed it may not go far enough in separating the concerns: it's hard to tell without more context.</p>

<h2>Naming</h2>

<p>What is <code>tm</code>? Transformation matrix? Is it world space or camera space or model space or what?</p>

<p>What is <code>scl</code>? Scale?</p>

<p>Why is it a <code>Box2</code>? I can't see anything <code>2</code> about it.</p>

<p>Typical .NET naming conventions make all public members <code>ProperCamelCase</code>, e.g. <code>VerticesGlobal</code>, <code>Scl</code>, <code>Vec3.X</code>. Underscores are also usually reserved for private fields and throw-away variables.</p>

<h2>Documentation</h2>

<p>It would be nice to see some more inline documentation (<code>///</code>) on some of these methods, in particular the ones which are to be inherited. For example, how can someone implementing <code>UpatedEdges</code> be sure that <code>verticesGlobal</code> is in a useful state? It's not written anywhere, so they shouldn't rely upon it, but it's clearly your intention to provide this option. If you want to keep short and familiar variable names like <code>rot</code> and <code>scl</code>, then documentation would also provide a way to expand upon exactly what these things are, so that people less familiar with the system can work out how to use it more easily.</p>
    </div>