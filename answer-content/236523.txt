<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are some <code>&amp; 0xff</code> operations that are not necessary:</p>

<ul>
<li><code>(aMask &amp; (~iMask &amp; 0xff))</code>, because the bits reset by <code>&amp; 0xff</code> are already zero in <code>aMask</code>, so they never survive the "main" <code>&amp;</code>.</li>
<li><code>_mm256_movemask_ps(...) &amp; 0xff</code>, because <code>vmovmskps</code> can only set the low 8 bits, the upper bits are already zero.</li>
</ul>

<blockquote>
<pre><code>    // inc = -1 for (itr &lt; max) &amp; (ab &lt; 4)
    // itr = itr - inc [- (-1) = + 1]
    itr       = _mm256_sub_epi32(itr, (ivec_t)inc);
</code></pre>
</blockquote>

<p>This is good, sometimes people focus too much on adding 1 and overlook the possibility of subtracting -1 but you didn't fall into that trap.</p>

<p>This part though:</p>

<blockquote>
  <p><code>(ivec_t)inc</code></p>
</blockquote>

<p>That doesn't work with MSVC, nor does the earlier <code>(fvec_t)iCmp</code>. <code>_mm256_castps_si256</code> (and related intrinsics) work though, which all do nothing but just change the type. Admittedly that's more of a mouthful than just casting, and it makes no difference for GCC and Clang.</p>
    </div>