<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe that the main problem is not the generation method but the uniqueness of the data.</p>

<p>As I understand there is a database and you have to check the generated data uniqueness retrospectively with your past data generated.</p>

<p>Suppose that there is a new requirement that your business side ask for another 100.000 unique data from you.  And you have already generated 10.000.000 in the past. Which are stored in DB.</p>

<p>My suggestion will be;</p>

<p>1 - Generate for example 120.000 unique key ( greater than the requirement )</p>

<p>2 - Bulk insert those data to a temp table. </p>

<p>3 - Then execute a stored procedure to compare two tables in the SQL Server side, </p>

<p>4 - if your temp table contains 100.000 different value from your old 10.000.000 dataset, then you are good to go insert those 100.000 to your main table return them to your business side,
     else, for example 60.000 of 120.000 is different from your old data set but 60.000 is same, in this situation your stored procedure can return int = 40.000 which you will understand that you need another 40.000 data.</p>

<p>Go to the step 1,  Execute your generator for another 60.000, 100.000 whatever you want and follow the same steps.</p>

<p>May not be the best solution but I believe will be fast. Because generating 1.000.000 of random alphanumeric strings take at most 2 seconds with the code below;</p>

<p>In the past I have used the below code to generate unique random data</p>

<pre><code>public static string GetUniqueKey()
    {
        int size = 7;
        char[] chars = new char[62];
        string a = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        chars = a.ToCharArray();

        RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider();

        byte[] data = new byte[size];
        crypto.GetNonZeroBytes(data);

        StringBuilder result = new StringBuilder(size);

        foreach (byte b in data)
            result.Append(chars[b % (chars.Length - 1)]);

        return Convert.ToString(result);
    }
</code></pre>

<p>and for the uniqueness of my runtime generated data, I have used a hashtable as can be seen above.</p>

<pre><code>public static Tuple&lt;List&lt;string&gt;, List&lt;string&gt;&gt; GenerateUniqueList(int count)
    {
        uniqueHashTable = new Hashtable();
        nonUniqueList = new List&lt;string&gt;();
        uniqueList = new List&lt;string&gt;();

        for (int i = 0; i &lt; count; i++)
        {
            isUniqueGenerated = false;

            while (!isUniqueGenerated)
            {
                uniqueStr = GetUniqueKey();
                try
                {
                    uniqueHashTable.Add(uniqueStr, "");
                    isUniqueGenerated = true;
                }
                catch (Exception ex)
                {
                    nonUniqueList.Add(uniqueStr);
                    // Non-unique generated
                }
            }
        }

        uniqueList = uniqueHashTable.Keys.Cast&lt;string&gt;().ToList();

        return new Tuple&lt;List&lt;string&gt;, List&lt;string&gt;&gt;(uniqueList, nonUniqueList);
    }
</code></pre>
    </div>