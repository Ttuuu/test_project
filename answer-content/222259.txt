<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are not using the async pattern to its fullest potential. Whether that is as designed is up to you :-)</p>

<p>By catching exceptions, you are circumventing the built-in exception propagation flow of <a href="https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap" rel="nofollow noreferrer">TAP</a>.</p>

<blockquote>
<pre><code> catch (Exception ex)
 {
      result.IsSuccessful = false;
      result.ErrorMsg = "Business Layer Error - " + ex.Message;
 }
</code></pre>
</blockquote>

<p>This means callers should parse erorrs from your custom implementation rather than from common usage:</p>

<pre><code>var task = GetUserList(source);
// won't have much effect, since errors are catched in the user list
task.ContinueWith(t =&gt; HandleError(t.Exception), TaskContinuationOptions.OnlyOnFaulted);
</code></pre>

<p>Or</p>

<pre><code>try {
    var users = await GetUserList(source);
    // consumer needs to add boiler-plate code to handle all errors
    if (!users.IsSuccessful) {
       throw new ParseException(users); // DAL/BUS error
    }
} catch (Exception error) {
    HandleError(error);
}
</code></pre>
    </div>