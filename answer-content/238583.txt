<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, this should be more efficient asymptotically</p>

<pre><code>function myTwoSum(A, B) {
    const invertedArrayMap = A.reduce((acc, curr, i) =&gt; {
        acc[curr] = acc.hasOwnProperty(curr) ? Math.min(i, acc[curr]) : i;
        return acc;
    }, {});

    const secondIndex = A.findIndex(
        (w, i) =&gt;
        invertedArrayMap.hasOwnProperty(B - w) &amp;&amp; invertedArrayMap[B - w] &lt; i
    );

    if (secondIndex === -1) {
        return [];
    }
    return [invertedArrayMap[B - A[secondIndex]], secondIndex];
}
</code></pre>

<p>We use an object to allow O(1) lookups for the corresponding value, allowing us to not have this nested O(n^2) computation.</p>
    </div>