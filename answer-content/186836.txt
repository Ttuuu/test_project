<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider a producer consumer pattern like <a href="https://msdn.microsoft.com/en-us/library/dd267312(v=vs.110).aspx" rel="nofollow noreferrer">BlockingCollection</a>. Read a line and strip in the producer.  Write the clean lines in the consumer. This keeps the disk active and strip is basically free.  Use an UpperBound so the producer does not get too far ahead of the consumer.  </p>

<p>As has been said just have one String builder   </p>

<pre><code>private StringBuilder sb = new StringBuilder();
public string BuildClearString(string line)
{
    sb.clear();  
</code></pre>

<p>If you don't need leading and trailing white-space characters then use <a href="https://msdn.microsoft.com/en-us/library/system.string.trim(v=vs.85).aspx" rel="nofollow noreferrer">String.Trim Method</a>. </p>

<pre><code>var line = reader.ReadLine().Trim();
</code></pre>

<p>This might be faster.  But I doubt it.</p>

<pre><code>foreach (char c in line)
{
    if (c &lt; 32)
    {
        continue;
    }
    if (c &gt; 175)
    {
        continue;
    }
    sb.Append(c);
}
</code></pre>

<p>Without the producer consumer part I would trim it down.  Those checks take time.  </p>

<pre><code>public void StripHighBitCharacters(string fn)
{
    string writeFile = fn + "B";
    using (var reader = new StreamReader(fn))
    using (var writer = new StreamWriter(writeFile))
    {
        while (!reader.EndOfStream)
        {
            string line = reader.ReadLine().Trim();
            writer.WriteLine(BuildClearString(line));
        }
    }
    File.Delete(fn);
    File.Move(writeFile, fn);
}

private StringBuilder sb = new StringBuilder();
public string BuildClearString(string line)
{
    sb.Clear();  
    foreach (char c in line.Where(c =&gt; c &gt;= 32 &amp;&amp; c &lt;= 175))
    {
        sb.Append(c);
    }   
    return (sb.ToString());
}
</code></pre>
    </div>