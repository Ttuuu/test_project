<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Very quick review here, formatting is good, so I focused on good practices, reuse of standard Java libraries (Streams), naming etc.</p>

<p>To have this code more organized I would embrace Objects and create a Player class, maybe a Game class. But given the short-lived nature of these objects and their quantity, it's ok not to.</p>

<p>Here's a reviewed (untested) code (in particular, I have no idea what it is <em>supposed</em> to do, so I don't know if it still works... but it should ^^)</p>

<pre><code>import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;

public class RowTest {

    // Make this final, because it effectively is
    private final MessageDigest sha256;

    // This is an internal constant!
    private static final int SCALE = 32;

    private RowTest() throws NoSuchAlgorithmException {
        sha256 = MessageDigest.getInstance("SHA-256");
    }

    public static void main(String... args) throws NoSuchAlgorithmException {
        new RowTest().start();
    }

    private void start() {
        // Declare types of the most generic type (here, interface List is sufficient). Try to name it something meaningful ?
        List&lt;Integer&gt; games = new ArrayList&lt;&gt;();
        Random random = new Random();
        games.add(10);
        while (sum(games) &lt; 100) {
            int value = random.nextInt(100 - sum(games) + 1);
            // Using contains multiple times on a list of numbers? consider using a Hash structure
            if (value == 0 || games.contains(value)) {
                continue;
            }
            games.add(value);
        }
        System.out.println(sum(games) + " " + games.size());

        byte[][] players = new byte[games.size()][];
        int[] score = new int[games.size()];
        double[] reword = new double[games.size()];

        String guid = UUID.randomUUID().toString();

        float totalGames = 1_000;
        for (int i = 0; i &lt; totalGames; i++) {
            for (int j = 0; j &lt; games.size(); j++) {
                int player = games.get(j);
                byte[] min = null;
                for (int k = 0; k &lt; player; k++) {
                    byte[] hash = hash(i, guid, k, player);
                    if (hash.length != 32) {
                        throw new Error("Hash error");
                    }
                    if (min == null || compare(hash, min) == -1) {
                        min = hash;
                    }
                }
                players[j] = min;
            }
            // Split these operations. For debugging, it'll be easier to follow! It's bad practice to russian-doll method calls with array access and unary operations. Method calls alone might pass.
            final int winner = findWinner(players);
            score[winner]++;

            rewordPlayers(players, reword);
        }

        for (int i = 0; i &lt; score.length; i++) {
            System.out.println(games.get(i) + " won\t" + score[i] / totalGames * 100 + "%\tof the times, he earned\t" + reword[i]);
        }

        // Use streams everywhere! they are good for you
        double totalReword = Arrays.stream(reword).sum();

        System.out.println("\nTotal reword " + totalReword + " / " + totalGames);
    }

    private void rewordPlayers(byte[][] players, double[] reword) {
        // No need to store this locally, especially this the var name doesn't mentions which rounding is done
        // int rounding = BigDecimal.ROUND_CEILING;


        // Guess what? we can stream this :)
        BigDecimal total = Arrays.stream(players) // Streaming all players
                .map(RowTest::dividePlayer) // calculating the inverse
                .reduce(BigDecimal::add)// adding all
                .orElse(BigDecimal.ZERO); // If no player, then zero

        for (int j = 0; j &lt; players.length; j++) {
            BigDecimal a = dividePlayer(players[j]);
            BigDecimal b = a.divide(total, SCALE, BigDecimal.ROUND_CEILING);
            reword[j] += b.doubleValue();
        }
    }

    // For easier reading, i'm extracting this code to reduce redundancy
    private static BigDecimal dividePlayer(byte[] player) {
        BigDecimal playerReword = new BigDecimal(new BigInteger(player));
        return BigDecimal.ONE.divide(playerReword, SCALE, BigDecimal.ROUND_CEILING);
    }


    // Make everything you can 'static', makes it easy to see it doesn't change object state
    private static int findWinner(byte[][] players) {
        return IntStream.range(0, players.length)// Browse all players
                        .reduce((i, j) -&gt; compare(players[i], players[j]) &lt; 0 ? i : j)// For any two, pick index of the lowest
                        .orElse(-1); // Default value
    }

    /**
     * if a &gt; b return 1 else if a &lt; b return -1 else return 0
     */
    private static int compare(byte[] a, byte[] b) {
        int aLength = a.length;
        int bLength = b.length;

        // More concise.
        // Also you're just looking for the longest streak of '0' at the end of the byte.
        // A 'while' loop is much more useful and shows that the loop is *supposed* to be interrupted.
        // A 'for' loop is assumed to (generally) span the entire range regardless.
        while (aLength &gt;= 0 &amp;&amp; a[aLength] == 0) {
            aLength--;
        }
        while (bLength &gt;= 0 &amp;&amp; b[bLength] == 0) {
            bLength--;
        }

        // Why not just return aLength - bLength ? compare can return any number. Only its sign matter.
        if (aLength &gt; bLength) {
            return 1;
        } else if (bLength &gt; aLength) {
            return -1;
        }

        for (int k = 0; k &lt; aLength; k++) {
            // avoiding having variables with only differing capitalization!
            int maskedA = a[k] &amp; 0xff;
            int maskedB = b[k] &amp; 0xff;
            // Why not just return maskedA - maskedB ? compare can return any number. Only its sign matter.
            if (maskedA &gt; maskedB) {
                return 1;
            }
            if (maskedA &lt; maskedB) {
                return -1;
            }
        }
        return 0;
    }

    private byte[] hash(int i, String value, int k, int player) {
        // Never reassign a reference given to you in input!
        String appended = i + "," + value + "," + k + "," + player;
        return sha256.digest(appended.getBytes());
    }

    // Again, make this static!
    private static int sum(List&lt;Integer&gt; list) {
        // can be easily replaced with streams, for better performance etc.
        return list.stream().mapToInt(i -&gt; i).sum();
    }
}
</code></pre>
    </div>