<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a reasonable first attempt but there are many ways to make it better:</p>

<pre><code>public class RockPaperScissors {
    final static int ROCK = 1;
    final static int PAPER = 2;
    final static int SCISSORS = 3;
</code></pre>

<ul>
<li><p>Consider using an enumerated type to hold related constants.</p>

<pre><code>System.out.println("Start By Entering A number");
</code></pre></li>
<li><p>Your capitalization is not standard English.</p></li>
<li><p>Tell the user how to quit.</p>

<pre><code>int human = input.nextInt();
System.out.println("ROCK IS 1 :: PAPER IS 2 :: SCISSORS 3");
</code></pre></li>
<li><p>Put the explanation <em>before</em> fetching input!</p></li>
<li><p>Why is there no "is" for the scissors case?</p>

<pre><code>int computerScore = 0, humanScore = 0, computer;
while (human != -1) {
</code></pre></li>
<li><p>Consider refactoring the main method so that it more clearly reflects what is happening, and extracting state to an object.  I'd prefer to see your main look like this:</p></li>
</ul>

<hr>

<pre><code>public static void main(String[] args) {
    initialize();
    Game g = new Game();
    g.printStartingText();
    while(!g.finished())
      g.playRound();
    g.printEndText();
}
</code></pre>

<hr>

<p>Can you structure your program like that? It will be more clear if you do.</p>

<pre><code>        String h = human == 1 ? "ROCK" : human == 2 ? "PAPER" : "SCISSORS";
        String c = computer == 1 ? "ROCK" : computer == 2 ? "PAPER" : "SCISSORS";
</code></pre>

<ul>
<li><p>You've replicated some code here; it would be better to make a map from integer to the enumerated value and do two lookups in the map here.</p>

<pre><code>    if ((human == ROCK &amp;&amp; computer == SCISSORS) || (human == PAPER &amp;&amp; computer == ROCK) || (human == SCISSORS &amp;&amp; computer == PAPER)) {
</code></pre></li>
<li><p>Instead of doing this work twice, write a method that returns PLAYER_1, PLAYER_2 or TIE:</p>

<pre><code>    Winner w = getWinner(human, computer);
</code></pre></li>
</ul>

<p>That will let you simplify the logic that follows, and it will be easier to read.</p>

<pre><code>            System.out.println("Something Went Wrong Try Again:( ");
</code></pre>

<ul>
<li><p>This should never happen. A better choice would be to assert that the condition is impossible.</p>

<pre><code>    System.out.println("Human Race Is saved! We Won!");
</code></pre></li>
</ul>

<p>Why are the humans "we"? The message is being produced by a computer! It should be "The human race is saved; you won and we computers lost." :)</p>
    </div>