<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>So I rewrote the answer using a dictionary approach instead knowing that looking up a value in a dictionary has lower time complexity than searching through a list</p>
</blockquote>
<p>In this case a dictionary is slower than a list-like indexing. A string / list provides direct access to its elements based on indices, while a dictionary -- which is normally implemented as a hash table -- needs more computation such as computing the hash values of keys.</p>
<blockquote>
<pre><code>for p in range(i):
    if s[p] != s[max(s)-p]:
        return False
    else:
        palindrome = True
</code></pre>
</blockquote>
<p>Here, <code>max</code> is called repeatedly -- and unnecessarily -- in the loop. There are two problems:</p>
<ol>
<li>The value <code>max(s)</code> is unchanged so it should be computed only once outside the loop and the result can be stored and accessed inside the loop.</li>
<li><code>max(s)</code> requires comparing all keys of <code>s</code>. In this case, using <code>len(s) - 1</code> yields the same value and it is faster.</li>
</ol>
<p>There are some Python-specific improvements that could speed up the program. For example, the following implementations should be faster in most cases because they replace explicit <code>for</code> loops in Python with implicit ones, which are implemented in lower-level, interpreter-dependent languages (such as C) and therefore are much faster:</p>
<p>Solution 1:</p>
<pre><code>class Solution:
    def isPalindrome(self, x: int) -&gt; bool:
        s = str(x)
        return s == s[::-1]
</code></pre>
<p>Solution 2:</p>
<pre><code>class Solution:
    def isPalindrome(self, x: int) -&gt; bool:
        s = str(x)
        mid = len(s) // 2
        return s[:mid] == s[:-mid-1:-1]
</code></pre>
    </div>