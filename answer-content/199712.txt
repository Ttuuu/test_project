<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've spotted the problem. Your <code>merge</code> function is flawed.  For each pair it processes, it introduces an extra unnecessary call to merge.  That is, for a list like <code>[1,2,3,4,5,6]</code>, instead of your first <code>merge</code> call expanding directly to:</p>

<pre><code>merge [[1],[2],[3],[4],[5],[6]]
= merge $ mpair [1] [2] : mpair [3] [4] : mpair [5] [6] : []
</code></pre>

<p>it expands to:</p>

<pre><code>merge [[1],[2],[3],[4],[5],[6]]
= merge $ mpair [1] [2] : merge $ mpair [3] [4] 
  : merge $ mpair [5] [6] : merge []
</code></pre>

<p>As a result, your count of <code>merge</code> calls is <code>O(n)</code> and your count of <code>mpair</code> calls is <code>O(n^2)</code> (or similar -- I didn't check exactly). when they <em>should</em> be <code>O(log n)</code> and <code>O(n log n)</code> respectively.</p>

<p>Instead, you want to split <code>merge</code> up into two functions:</p>

<pre><code>merge :: Ord a =&gt; [[a]] -&gt; [[a]]
merge [] = []
merge [x] = [x]
merge ls = merge (mergePairs ls)

mergePairs :: Ord a =&gt; [[a]] -&gt; [[a]]
mergePairs (l1:l2:ls) = mpair l1 l2 : mergePairs ls
mergePairs ls = ls
</code></pre>

<p>This will speed up the algorithm enormously, and it will now run on tens of millions of integers.</p>
    </div>