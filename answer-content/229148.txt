<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is only one thing that jumps out at me as whacky...</p>

<pre><code>[a-z\d\-_\W]
</code></pre>

<p><a href="https://regex101.com/r/pyrg9A/1/" rel="nofollow noreferrer">Regex101 breakdown</a></p>

<p>I think this means to match a lowercase substring, but that's not what it is doing.</p>

<p>Since <code>\W</code> is the inverse of <code>\w</code> and because <code>\w</code> represents <code>A-Za-z0-9_</code>, I think it is strange that the subpattern is used to replace the lowercase placeholder. </p>

<p>As is, your pattern can be expanded to the following equivalent:</p>

<pre><code>(?:[a-z0-9_\-]|[^A-Za-z0-9_])
</code></pre>

<p>This is far, far more characters than <code>a-z</code>.  If I was new to using your system, I would expect <code>lowercase</code> to exclusively mean <code>[a-z]</code>.</p>

<p>I mean if you were simply trying to deny uppercase substrings (and allow everything else) at that position, why wouldn't you use a negated character class <code>[^A-Z]</code>.</p>

<p>And as I say that, I ask if the placeholder itself is flawed.  Perhaps more intuitive to make a <code>not</code> keyword/placeholder to be written as <code>notupper</code> or <code>not:upper</code> or maybe <code>!upper</code> if you need such functionality.</p>

<p>I guess what I am saying is, you should either adjust your placeholders' respective patterns, or change the placeholder terminology.</p>

<p>Less of a concern, but perhaps something worth sharing is that most patterns that intend to match any character (including newlines) will either use <code>[\S\s]</code> or <code>.</code> with the <code>s</code> pattern modifier.  Your <code>[\w\W]</code> works the same, just not commonly used.</p>
    </div>