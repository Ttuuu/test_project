<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've got a reasonable implementation for steps 1-3.  I see no glaring issues with the code.  Perhaps, we can over-engineer some parts of it.</p>

<h2>General</h2>

<p>Add docstrings.</p>

<h2>class Card</h2>

<p>It is mutable.  I can be dealt the '6 of Spades' and by tweaking it <code>card.rank = "Ace"</code> all of a sudden have a better card for my hand than I was dealt.  Trick decks aside, cards should be immutable, so we could change this into a <code>tuple</code> to keep in from changing.  Since we want named fields, we need a <code>namedtuple</code>, and since we want to customize the <code>str(card)</code>, we'll derive our own class from the <code>namedtuple</code>.</p>

<pre><code>from collections import namedtuple

class Card(namedtuple("Card", ['rank', 'suit'])):
    __slots__ = ()   # Allows no additional fields, keeps memory footprint small

    def __str__(self):
        return f"{self.rank} of {self.suit}"

# Use like:
ace_of_spades = Card('Ace', 'Spades')
</code></pre>

<p>Note: I'm using the Python3.6 f-strings.  If you're not using 3.6+, you'll have to adapt it to <code>.format()</code> ... or upgrade ;-)</p>

<h2>Rank &amp; Suit</h2>

<p>We only want "Clubs", "Diamonds", "Hearts", and "Spades" as suits.
And we only want "Ace", "2", "3" ... "10", "Jack", "Queen", and "King" as ranks.</p>

<p>Perhaps we might want an <code>Enum</code> for suit, and (maybe) another <code>Enum</code> for rank.</p>

<pre><code>from enum import Enum

Suit = Enum('Suit', 'Clubs Diamonds Hearts Spades')
Rank = Enum('Rank', 'Ace Two Three Four Five Six Seven Eight Nine Ten Jack Queen King')

card = Card(Rank.Ace, Suit.Spades)
print(card)
</code></pre>

<p>Ew.  This prints "Rank.Ace of Suit.Spades".  We can fix this by changing the <code>__str__(self)</code> function of <code>Card</code> to include the <code>.name</code> of the <code>rank</code> and <code>suit</code> fields:</p>

<pre><code>    def __str__(self):
        return f"{self.rank.name} of {self.suit.name}"
</code></pre>

<p>Much better.</p>

<p>But do we want to do this?  It restricts the possible ranks and suits of our cards.
If you wanted a Tarot deck, we might want the Cups, Wands, Pentacles and Swords for our suits.  There are other specialty decks too, so maybe this is too restrictive.  In which case, feel free to ignore this whole section.  But if so, then add something like:</p>

<pre><code>SUITS = ['Clubs', 'Hearts', 'Diamonds', 'Spades']
</code></pre>

<p>so you can iterate over a named constant, instead of needing to spell out the valid values each time you need them.</p>

<h2>class Deck</h2>

<p>What is a deck of cards?  Is it always 52 standard playing cards?  You can shuffle a deck and deal from a deck.  But you can also shuffle two decks together and get 104 cards to deal from (perhaps you're playing Kanasta!  No, wait, you'd need the Jokers too).  What would you call two decks of cards mixed together?  Is it still a deck?  Maybe you want to pass some creation function into the <code>Deck</code> initializer, to control how it is created, instead of always building a deck of standard playing cards.  Again, just a thought.</p>

<p>With the <code>Enum</code>s created above, <code>Deck.build()</code> can be simplified:</p>

<pre><code>def build(self):
    self.cards = [ Card(rank, suit) for rank in Rank for suit in Suit ]
</code></pre>

<p>Shuffling the cards: <code>def shuffle(self, num=1)</code>.  What is the <code>num</code> for?  It isn't used.</p>

<p>Dealing the cards.  Ok.  It deal can deal 3 player a hand of 5 cards each.  Good.  Now, player #1 wants to draw a card ... and they get ... uhm ... one of their first cards again???  The <code>deal()</code> method needs to keep track of which cards you've already distributed, and which remain in the deck.</p>

<hr>

<p>Is a hand of cards just a <code>list</code> of 5 cards?  If so, why isn't a <code>Deck</code> just a <code>list</code> of 52 cards?  Perhaps you need to deal the cards into a <code>Hand</code> class.  The <code>Hand</code> class would be a good container for evaluating the hand, discarding cards and adding additional drawn cards to, etc.</p>
    </div>