<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I accidentally deleted my first review, so this will only cover the main points:</p>

<hr>

<ul>
<li><p><strong>bug</strong>: I think this is the main reason your code doesn't work. Flushing isn't the issue.</p>

<pre><code>void operator&lt;&lt;(int data)
{
    auto child = static_cast&lt;childClass *&gt;(this);
    child-&gt;FromSerial(data);
}

void operator&gt;&gt;(int data)
{
    auto child = static_cast&lt;childClass *&gt;(this);
    child-&gt;FromSerial(data);
}
</code></pre></li>
<li><p><strong>bug</strong>: <code>std::fstream::in | std::fstream::out | std::fstream::trunc</code>. This truncates the input file, so we won't be able to read its content.</p></li>
<li><p><strong>bug</strong>: Conforming C++ compilers do not allow variable length arrays. You will need to use a <code>std::string</code> or <code>std::vector</code> instead.</p>

<pre><code>int length = 0;
stream &gt;&gt; length;
char cstr[length];
</code></pre></li>
<li><p><code>operator&lt;&lt;</code> and <code>operator&gt;&gt;</code> do <em>formatted</em> input and output (i.e. they read and write text), so <code>BinaryStream</code> is a very misleading name.</p></li>
<li><p><strong>bug</strong>: they also don't insert whitespace when writing (so your file will look like: <code>1Anb11This is awful110000004</code>. However, they <em>do</em> depend on whitespace when reading. So your current input system simply won't work.</p></li>
<li><p>Note that for text input, many reliable XML and JSON libraries already exist.</p></li>
<li><p><code>int</code> does not cover the correct range of values for storing an index into, or the size of, a standard container. Use <code>std::size_t</code> instead.</p></li>
</ul>

<hr>

<p>C++ uses run-time polymorphism (inheritance and virtual functions) so that classes of different types can implement the same interface, and be referred to through a common base class:</p>

<pre><code>class ISession
{
public:

    virtual void Load(Stream&amp; stream) = 0; // abstract fucntion
    virtual void Save(Stream&amp; stream) const = 0;
};

class SessionA : public ISession
{
    virtual void Load(Stream&amp; stream) override
    {
        // ... implementation specific to SessionA
    }
    virtual void Save(Stream&amp; stream) const override
    {
        // ... implementation specific to SessionA
    }
};

class SessionB : public ISession
{
    virtual void Load(Stream&amp; stream) override
    {
        // ... implementation specific to SessionB
    }
    virtual void Save(Stream&amp; stream) const override
    {
        // ... implementation specific to SessionB
    }
};

std::vector&lt;std::unique_ptr&lt;ISession&gt;&gt; sessions;
// ...

for (auto const&amp; s : sessions)
    s-&gt;Save(stream);
</code></pre>

<p>However, your current implementation does not allow this, since (e.g.) <code>ISessionBaseFactory&lt;SessionA&gt;</code> and <code>ISessionBaseFactory&lt;SessionB&gt;</code> are not a common base class, but entirely different types.</p>

<p>If we need only static (compile-time) polymorphism, we can use templates instead, and avoid the common base class entirely.</p>

<pre><code>class SessionA
{
    void Load(Stream&amp; stream);
    void Save(Stream&amp; stream) const;
};

class SessionB
{
    void Load(Stream&amp; stream);
    void Save(Stream&amp; stream) const;
};

template&lt;class SessionT&gt;
void DoSomething(SessionT const&amp; session)
{
    Stream stream;
    session.Save(stream); // works with SessionA and SessionB
}
</code></pre>

<p>It appears, however, that you don't actually need either kind of polymorphism, since there is only one session type.</p>
    </div>