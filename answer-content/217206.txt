<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Caching and Streaming.</h1>
<h2>Cache data</h2>
<p>I can not workout if you are doing this each time your app loads. If you are and it is a slow point you should consider storing the processed data in a file or IndexedDB. The index can be the file path or hash derived from the file path.</p>
<p>Then the app should only retrieve the meta data from the cache as needed.</p>
<h2>System RAM</h2>
<p>You are loading the entire music file via the <code>fs.readFile</code> before you extract the meta data, and you read all the files in one go.</p>
<p>This will be a slow point, not due to the processing speed but rather the paging speed of system memory.</p>
<p>As example using my music directory. It is 104Gb of disk space. Your <code>processFiles</code> function would thus attempt to load 104Gb of music files. That will keep the paging system very busy and slow the whole system. (Personally if I saw an app abuse my system like that I would shut it down and uninstall)</p>
<h2>Streaming</h2>
<p>Looking at the metadata reader it does support streaming. You can then process the files without the need to load a massive RAM buffer of files.</p>
<p><code>mm.parseNodeStream(readableStream)</code> will use Nodes <a href="https://nodejs.org/api/stream.html#stream_readable_streams" rel="nofollow noreferrer">readable stream</a></p>
<p>This will reduce the RAM overhead. However that still is a lot of data to process so it is still best to store the extracted meta data in some form of indexedDB</p>
<p>Then at start up scan the music directory for changes, and read the meta data only from new or updated files, all others will be in the cache.</p>
<h2>Slow it down.</h2>
<p>Last point is that you should not try to get the data as fast as possible. The job will take time, people are prepared to wait for full functionality as long as you don't block the interface while you process the data.</p>
<p>Prioritize if you can the files that need to be process (eg in UI's view, next to play, or whatever your app does).</p>
<p>Keep an eye on the systems level of activity and process fast when not very busy, and slowly when busy (Note be aware your processing will effect the system activity)</p>
<p>If it is a must that you process all file before the app can work then make the first processing job as part of the install.</p>
    </div>