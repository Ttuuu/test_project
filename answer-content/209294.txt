<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few comments:</p>

<hr>

<pre><code>import java.util.concurrent.*;
</code></pre>

<p>Never do wildcard imports unless you're doing a one-time, throw-away program. Maybe, in Java 20 or so, they introduce a class <code>java.util.concurrent.Factorial</code> (contrived example), and then you have a name collision with one of your classes. Better stick to individual imports (or have your IDE organize the imports).</p>

<hr>

<p>Thumbs up for attaching javadoc to all public elements.</p>

<hr>

<pre><code>public long getFactorialWithRecursion(final int number) {
    return factorialRecursion(number);
}
</code></pre>

<p>I'd skip the indirection from <code>getFactorialWithRecursion()</code> calling <code>factorialRecursion()</code> and write</p>

<pre><code>public long getFactorialWithRecursion(final int number) {
    if (number &lt;= 0) {
        return 1;
    }
    return number * getFactorialWithRecursion(number - 1);
}
</code></pre>

<hr>

<p>Other SO members already commented that computing a factorial with multiple threads might not be a useful application, but I understand that this is for exerecise purposes.</p>

<p>The <code>while</code> loop in <code>getFactorialMultiThreaded</code> makes it hard to read and understand the code, with the two loop variables <code>startIndex</code> and <code>pivot</code> having their operations spread over many lines of code. I'd write something like</p>

<pre><code>for (int startIndex = 1; startIndex &lt;= number; startIndex += JOB_SIZE) {
    int endIndex = Math.min(startIndex + JOB_SIZE - 1, number);
    partialFactorialJobs.add(new PartialFactorialJob(startIndex, endIndex));
}
</code></pre>

<p>Similar thing applies to the <code>while</code> loop in your <code>call</code> method, I'd prefer a <code>for</code> loop instead.</p>

<hr>

<p>As your <code>PartialFactorialJob</code> class doesn't access anything from the enclosing <code>Factorial</code> instance, you should make it static (otherwise it carries around a useless internal reference to its enclosing instance, typically visible in your debugger as <code>this$1</code> or similar).</p>
    </div>