<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are many, many problems with this implementation, but they pretty much all come down to two major problems: first, you do a linear-time operation when a constant-time or log-time operation would suffice, and second, your code is chock-full of expressions that are useful for both their values and their side effects, which makes for code that is confusing.</p>

<pre><code>return PrimeNumbers.Contains(value);
</code></pre>

<p><code>PrimeNumbers</code> is a sorted list, but you check to see if a value is in it by starting from the beginning and searching every element in it. Do a binary search.</p>

<pre><code>public static long IndexOfPrime(this long value) =&gt; 
  IsPrime(value) ? Primes().TakeWhile(p =&gt; p &lt; value).LongCount() : -1;
</code></pre>

<p>This is bizarre. You use <code>IsPrime</code> for its side effect, and then do a linear search of the primes <em>in a list</em> to get their index. <strong>You have a list</strong>.  Just search the list for the index!</p>

<p>This was a good attempt but it has turned into an object lesson in what not to do. <strong>The fundamental strategy here is very sound and you should keep it</strong>, but the details around that strategy are confusing and inefficient. This is not a good use of LINQ.</p>

<p>What I would do here is refactor the program so that it does a smaller number of things and does them better. For example, suppose instead of this business of constantly enumerating <code>Primes</code>, you instead made two methods:</p>

<ul>
<li><code>EnsureUpTo(n)</code> -- makes sure that the list is filled in up to <code>n</code>.</li>
<li><code>NearestIndexOf(n)</code> -- uses an <strong>efficient</strong> search to return the index of <code>n</code>, or, if <code>n</code> is not prime, the index of the nearest prime to <code>n</code>.</li>
<li><code>Prime(i)</code> returns the <code>i</code>th prime.</li>
</ul>

<p>From this simple interface you can answer all your questions:</p>

<ul>
<li><p>You can determine if <code>n</code> is a prime by running <code>EnsureUpTo(n)</code> and then <code>i = NearestIndex(n)</code> and then <code>m = Prime(i)</code>.  If <code>n == m</code> then <code>n</code> is prime, otherwise it is composite.</p></li>
<li><p>You can get the next or previous prime similarly; run <code>i = NearestIndex(n)</code> and then <code>Prime(i-1)</code> and <code>Prime(i+1)</code> are the next and previous. </p></li>
</ul>

<hr>

<p>Your routine for computing primes you don't already know also could use some work:</p>

<pre><code>  var max = (int)Math.Sqrt(++MaxValue);
</code></pre>

<p>A number of problems here. Computing square roots is expensive; it is always better to do <code>p * p &lt;= m</code> than <code>p &lt;= Sqrt(m)</code>.</p>

<p>The increment is also suspicious. Fully half the time you will be incrementing it to an even number! After you are at 3, increment it by 2.  Or, even better, notice that once you are above 5, you can pick any six numbers in order and at most two of them will be prime. That is, of 5, 6, 7, 8, 9 and 10 we know that 6, 8 and 10 are divisible by 2. We know that 6 and 9 are divisible by 3, so we only need to check 5 and 7. But that also goes for 11, 12, 13, 14, 15, 16:  12, 14, 15 and 16 cannot be prime, so we only have to check 11 and 13.  And then 17, 18, 19, 20, 21, 22 we only check 17 and 19. And so on.</p>

<p>So what you can do is increment <code>MaxValue</code> by 6 every time after you get to 5, and then check MaxValue and MaxValue + 2 for primality, and you do much less work.</p>

<pre><code>if (PrimeNumbers.Where(p =&gt; p &lt;= max).All(p =&gt; MaxValue % p != 0))
</code></pre>

<p>Again, this is <strong>really bad</strong> because <strong>LINQ does not know that the list is sorted</strong>.  You check the <em>entire</em> list, which is O(n) in the size of the list, for elements smaller than <code>max</code>, but you could be bailing out once you get to the first that is larger than <code>max</code>.  <code>Where</code> is not the right sequence operator here.  You want <code>Until(p =&gt; p &gt; max)</code>.</p>
    </div>