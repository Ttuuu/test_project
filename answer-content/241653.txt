<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It <em>works</em>, but it's weird, and the variable intended for use only inside the function isn't private, which is potentially confusing and potentially unsafe.</p>

<p>Functions, being objects, can have arbitrary key-value pairs assigned to them, so you <em>can</em> put properties on it like you're doing. It's not unheard of. Usually, this sort of thing is reserved for <strong>static</strong> properties and methods which are <em>associated</em> with the class/function, but don't make sense as <em>instance</em> methods, and are meant for use by outside consumers. For a trivial example, the below function exposes a <code>canEat</code> property:</p>

<pre><code>function Person() {
}
Person.canEat = ['Apple', 'Banana', 'Carrot'];
Person.prototype.eat = function(food) {
  if (!Person.includes(food)) {
    throw new Error('Invalid food');
  }
  // do stuff depending on what argument is
}
</code></pre>

<p>Maybe it'll change over time, so users of <code>Person</code> can check <code>Person.canEat</code> before calling <code>eat</code>. But this is all intended for <em>users</em> of Person.</p>

<p>Another example of a useful static property on a function intended for outside use is <code>Number.MAX_SAFE_INTEGER</code>.</p>

<p>But if a property isn't meant to be used outside of the function, putting it on the function itself both sabotages the variable's privacy <em>and</em> is confusing (because a reader may well expect that a property accessible anywhere may be intended for use anywhere, which isn't what you mean).</p>

<p>If you want the function to be able to store data persistently and for itself only, you can use a closure instead. Here's one option:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const storeFunctions = (() =&gt; {
  const funcArray = [];
  return (func) =&gt; {
    if (funcArray.includes(func))
      return 'function already added';
    else {
      funcArray.push(func);
      return 'a new function is added';
    }
  }
})();

function c() { return 1 };
function d() { return 2 };
console.log(storeFunctions(c));
console.log(storeFunctions(d));
console.log(storeFunctions(c));</code></pre>
</div>
</div>


<p>Professional Javascript often uses <em>modules</em> to organize code, in which case the IIFE is not needed - instead, have the module that defines the <code>storeFunctions</code> declare an array <em>private to that module</em>, and export the function:</p>

<pre><code>const funcArray = [];
export const storeFunctions = (func) =&gt; {
  if (funcArray.includes(func))
    return 'function already added';
  else {
    funcArray.push(func);
    return 'a new function is added';
  }
};
</code></pre>

<pre><code>import { storeFunctions } from './storeFunctions';
function c() {return 1};
function d() {return 2};
console.log(StoreFunctions(c));
console.log(StoreFunctions(d));
console.log(StoreFunctions(c));
</code></pre>

<p>The above is what I'd prefer. For any non-trivial script, modules make organizing code much easier.</p>

<p>Another note on your code - unless you need a collection with rearrangeable indicies, rather than using an array and iterating over it with <code>.includes</code>, it would probably be more appropriate to use a Set, which is a generic collection of values and whose lookup time with <code>.has</code> is an order of complexity faster than an array's <code>.includes</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const storeFunctions = (() =&gt; {
  const funcSet = new Set();
  return (func) =&gt; {
    if (funcSet.has(func))
      return 'function already added';
    else {
      funcSet.add(func);
      return 'a new function is added';
    }
  }
})();

function c() { return 1 };
function d() { return 2 };
console.log(storeFunctions(c));
console.log(storeFunctions(d));
console.log(storeFunctions(c));</code></pre>
</div>
</div>

    </div>