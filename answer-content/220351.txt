<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looking at your code for style</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;


// array of strings for testing
</code></pre>

<p>These strings should be <code>char const *</code> unless you really want them to be altered</p>

<pre><code>char *strs[] = {
</code></pre>

<p>You have the 'aperiodic comment twice here, which confuses me somewhat. If this is a section of aperiodic strings, why do you need the 2nd comment at all?</p>

<p>Also I suspect the 1st comment should be a block comment (especially in view of some of the other stuff)</p>

<pre><code>  // aperiodic
  "11111111110", // aperiodic
  "011111111110",
</code></pre>

<p>With strings this long I'd put the descriptive comment by itself on the line before</p>

<pre><code>  "11000100000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",  // https://en.wikipedia.org/wiki/Liouville_number 
  "110001000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010", // https://en.wikipedia.org/wiki/Liouville_number + 0
  "101", // aperiodic because only one and a half repetition, possibly periodic if longer string
</code></pre>

<p>Again, I think this comment should be a block comment</p>

<pre><code>  // periodic
  "0100100", // (010) preperiod = 0 period = 3, truncated 
  "00100100100100100100100100100100100100100100100100100100100100100100100100100", // (001) preperiod = 0   period = 3 truncated
  "1001110011", // = (10011) preperiod = 0  period = 5
  "1110111011", // = (1110) preperiod = 0   period = 4
  "0010010010",  /* 4 x 001 and truncated, last char can be from 001*/
  "001001001",  /* 4 x 001 */
  "1111111111", // (1)
  "11", // (1) periodic
  "00", // (0) periodic 
</code></pre>

<p>probably a block comment again. Does preperiodic mean periodic after a prefix, as the word doesn't appear in the referenced web page (in fact, neither do periodic or aperiodic, but I know what both of those mean, but I've never come across preperiodic)</p>

<pre><code>  // preperiodic
  "0100101101", 
  "00100100101", /* 4 x 001 but last 2 chars are NOT from 001  */
</code></pre>

<p>Blank comments are generally unhelpful</p>

<pre><code>  "100100100101", /*   */
</code></pre>

<p>You've already said preperiodic so why repeat?</p>

<pre><code>  "01111111111", // 0(1) preperiodic
  "001010101010101", // preperiodic = 0(01) = 1/6
  "0100101010101010" // preperiodic = 010(01) = 7/24
};



// 
</code></pre>

<p>The c standard defines what strstr does, so this doesn't convey any helpful information</p>

<pre><code>// strstr : Returns a pointer to the first occurrence of str2 in str1, or a null pointer if str2 is not part of str1. 
</code></pre>

<p>Ditto for size_t</p>

<pre><code>// size_t is an unsigned integer typ
</code></pre>

<p>If it looks for the shortest substring, why not call it that, rather than GivePeriod? Or is the comment wrong?</p>

<pre><code>// looks for the shortest substring !!!!!
// GivePeriod = repstr_shortest
// https://rosettacode.org/wiki/Rep-string#C
</code></pre>

<ul>
<li>I think this is getting the repeat period, not giving it</li>
<li>you should pass <code>char const *</code> here. You don't alter the string in this and you presumably don't intend do.</li>
</ul>

<pre><code>int GivePeriod(char *str)
{
</code></pre>

<p>This is not 'empty input'. This protects against passing a null pointer. It's not usually worth protecting against that.</p>

<pre><code>  if (!str) return 0; // if empty input

  size_t sl = 1; 
</code></pre>

<p>I can't relate the comment to the calculation at all.</p>

<pre><code>  size_t sl_max = strlen(str)/2+1 ; // more then one repetition of periodic parts
</code></pre>

<p>You could make this a for loop</p>

<pre><code>  while (sl &lt; sl_max) {
</code></pre>

<p>That doesn't explain how it works at all</p>

<pre><code>    if (strstr(str, str + sl) == str) // How it works ???? It checks the whole string str
</code></pre>

<p>Never omit the braces after if/while/do/for. Read up on '<a href="https://gotofail.com/" rel="nofollow noreferrer">goto fail</a>'. I honestly would be a rich person if I had a penny for every time someone added a line into an if statement during a maintenance and didn't add the braces</p>

<pre><code>      return sl; 
    ++sl;
  }

  return 0;
}
</code></pre>

<p>Again, const correctness. You don't (and shouldn't) alter the string. You should pass pointers as pointer to const by default, and only change if you actually need to modify what is pointed to</p>

<pre><code>int FormatString(char *str){
</code></pre>

<p>Given you have period and preperiod defined shortly after, this comment is confusing. Looking at the code, it isn't either anyway, it's the current offset in the string.</p>

<pre><code>  int p; // offset or preperiod ( if period is found)
</code></pre>

<p>That's what strlen does. Not a helpful comment</p>

<pre><code>  int pMax = strlen(str) ; // length without null character
</code></pre>

<p>You only use period, preperiod and substr inside the loop, so declare them inside the loop. It helps the reader understand the intended scope</p>

<pre><code>  int period = 0; 
  int preperiod = 0; 

  char *substr;

  for (p=0; p &lt; pMax; ++p ){

    substr = str+p;
    period = GivePeriod( substr);

    if (period &gt; 0 ) {
      preperiod = p;
</code></pre>

<ul>
<li>Don't release commented out code to production</li>
<li>you don't actually use preperiod apart from this output. There's not much point in having it as it has to be the same as p.</li>
<li>in general I'd avoid having output to stdout/stderr inside a library function. It should be up to the client to determine what to do with the results of your function - including how and where to output them. Among other things, it is difficult to write a unit test that checks you output what you think you did.</li>
</ul>

<pre><code>      //printf("substring =\t%*s\t from position =%d has preperiod = %d\tperiod = %d\n", pMax, substr, p, preperiod, period ); // pring part of the string from p position to the end ( without last null character)
      printf("%s = %.*s(%.*s) preperiod = %d\tperiod = %d\n", str, p, str, period, str+p, preperiod, period  );
      return period;
    }
    // else printf("substring =\t%*s\t from position = %d\t\n", pMax, substr, p); // pring part of the string from p position to the end ( without last null character)
  }
  printf("%s is aperiodic\n", str);
  return 0;
}
</code></pre>

<pre><code>int main(){
  int iMax = sizeof(strs) / sizeof(strs[0]); // number of test values

  int i; // test number = index of the array 
</code></pre>

<p>Again do not omit the braces</p>

<pre><code>  for (i = 0; i &lt; iMax; ++i)  // check all test values
    FormatString(strs[i]);



  return 0;

}
</code></pre>
    </div>