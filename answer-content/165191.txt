<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You can make <code>check_upper</code>, <code>check_lower</code>, etc all use one function, and so you want to make a function such as <code>check_contains(input, letters)</code>.
Which can further be improved by:</p>

<ol>
<li>Returning early by using <code>return True</code> if <code>char in letters</code> is true.</li>
<li>You can make this a comprehension.</li>
<li>You can use <code>any</code> to achieve the same as (1) when using (2).</li>
</ol>

<p>And so I'd use:</p>

<pre><code>def check_contains(input, letters):
    return any(char in letters for char in input)
</code></pre></li>
<li><p>I'd personally make <code>validate_password(input)</code> only return true or false, however to keep with what you're doing, I'll keep it so that it prints.</p></li>
<li>Remove <code>sys.exit</code>, it's not intended to be used in programs. Instead use <code>break</code> to break out of the while loop.</li>
<li>I'd use <a href="https://docs.python.org/2/library/getpass.html" rel="noreferrer"><code>getpass</code></a>, rather than <code>raw_input</code> to get the users password. This is as it should turn echo off, and so won't display the users password, so others can shoulder serf for their password.</li>
<li>Rather than manually writing out the strings, you can use <a href="https://docs.python.org/2/library/string.html" rel="noreferrer"><code>strings</code></a>.</li>
</ul>

<p>And so I'd change your code to:</p>

<pre><code>from getpass import getpass
import string

def check_contains(input, letters):
    return any(char in letters for char in input)

def validate_password(input):
    valid = True
    if not check_contains(input, string.ascii_uppercase):
        valid = False
        print "Password needs at least one upper-case character."
    if not check_contains(input, string.ascii_lowercase):
        valid = False
        print "Password needs at least one lower-case character."
    if not check_contains(input, string.digits):
        valid = False
        print "Password needs at least one number."
    if not check_contains(input, string.punctuation + '#'):
        valid = False
        print "Password needs at least one special character."
    if len(input) &lt; 8:
        valid = False
        print "Password needs to be at least 8 characters in length."
    return valid

while True:
    password = getpass("Enter desired password: ")
    if validate_password(password):
        print "Valid password"
        break
</code></pre>

<p>If you were to make your program follow <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">SRP</a>, then <code>validate_password</code> shouldn't print. And so you may want to use the below instead. If printing your messages is <em>super</em> important for you, then that should be a separate function than validating if the password is correct.</p>

<pre><code>from getpass import getpass
import string

def check_contains(input, letters):
    return any(char in letters for char in input)

def validate_password(input):
    return all([
        check_contains(input, string.ascii_uppercase),
        check_contains(input, string.ascii_lowercase),
        check_contains(input, string.digits),
        check_contains(input, string.punctuation + '#'),
        len(input) &gt;= 8
    ])

while True:
    password = getpass("Enter desired password: ")
    if validate_password(password):
        print "Valid password"
        break
    else:
        print "invalid password"
</code></pre>
    </div>