<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs and types</h2>

<p>You should think some about what types you want to have as input and output for <code>factorial</code>. Negative numbers won't ever work as input, and the output won't be negative, so you should consider using an unsigned integer, like <code>u64</code>. Even doing this, though, there's one input that leads to an infinite loop. See if you can find it and fix the function!</p>

<h2>Cleaning up the error handling</h2>

<pre><code>match io::stdin().read_line(&amp;mut user_input) {
    Ok(_) =&gt; (),
    Err(_e) =&gt; {
        println!("error: {}", _e);
        continue;
    }
};
</code></pre>

<p>A variable with a leading underscore tells readers (and linters) that the variable isn't going to be used. Since we use it (with the <code>println!</code>), we should just call it <code>e</code>.</p>

<p>This error message should probably be in stderr, rather than stdout. This can be done just by changing it to <code>eprintln!</code> instead.</p>

<p>When only one branch of a match actually does something, <code>if let</code> is both easier to write and understand. So in all, I'd change this part to</p>

<pre><code>if let Err(e) = io::stdin().read_line(&amp;mut user_input) {
    eprintln!("error: {}", e);
    continue;
}
</code></pre>

<hr>

<pre><code>let num: i64 = match user_input.trim().parse::&lt;i64&gt;() {
    Ok(n) =&gt; n,
    Err(_e) =&gt; {
        trim_newline(&amp;mut user_input); // remove trailing newline
        println!("'{}' is not a valid number, full error: {}", user_input, _e);
        continue;
    },
};
</code></pre>

<p>Same thing with <code>_e</code> vs <code>e</code>. You're using the variable, so it shouldn't start with an underscore. Also the same thing with <code>eprintln!</code>. Errors should be printed to stderr.</p>

<p>Since both branches of the match are used, <code>if let</code> is less useful. However, you might check out the answers to <a href="https://stackoverflow.com/questions/49785136/unwrap-or-continue-in-a-loop">this question</a> for some ideas for making this look better. For a single use like this, you're probably fine, but if you do this "unwrap or continue" behavior a lot, it can help to encapsulate it.</p>

<p>The <code>i64</code> annotations are unnecessary. The compiler has enough information to conclude that the type of <code>num</code> is <code>i64</code> since it's fed into <code>factorial</code>. If you want to keep an annotation for explicitness, that's fine, but only one of <code>num: i64</code> and <code>parse::&lt;i64&gt;</code> is needed for that.</p>

<p><code>trim_newline</code> seems to be unnecessary. You're parsing <code>user_input.trim()</code> anyway, so just show that to the user if there's a parsing error.</p>

<pre><code>let num = match user_input.trim().parse() {
    Ok(n) =&gt; n,
    Err(e) =&gt; {
        eprintln!("'{}' is not a valid number, full error: {}", user_input.trim(), e);
        continue;
    }
};
</code></pre>

<h2>Using standard tools for formatting and linting</h2>

<p>One thing that goes a long way with making your code more readable and idiomatic is running <code>cargo fmt</code>. You may need to install it with <code>rustup component add rustfmt</code>.</p>

<p>Clippy is another standard tool for catching errors and making your code more idiomatic. It can similarly be installed with <code>rustup</code> using <code>rustup component add clippy</code>. Running it (with <code>cargo clippy</code>) on your program, we get the warning</p>

<pre class="lang-none prettyprint-override"><code>warning: unneeded `return` statement
 --&gt; src/main.rs:4:5
  |
4 | /     return if num == 1 {
5 | |         1
6 | |     }else{
7 | |         num * factorial(num - 1)
8 | |     }
  | |_____^
  |
  = note: `#[warn(clippy::needless_return)]` on by default
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
  |
4 |     if num == 1 {
5 |         1
6 |     }else{
7 |         num * factorial(num - 1)
8 |     }
  |
</code></pre>

<p>Since the return statement is the last thing in the function, it's not needed since the last expression in the block is always implicitly returned. You can simply remove the <code>return</code>.</p>

<h2>Some advice on overflows</h2>

<p>The factorial function grows superexponentially, so any fixed-width integer type is going to quickly overflow. Even switching to <code>u128</code> only gets you up to an input of 34. The way I see it, you have two choices. Either</p>

<ul>
<li>Embrace this. Return an <code>Option</code> (or better yet, a <code>Result</code>) to indicate that an overflow occurred. Using something like <code>u64::checked_mul</code> would be helpful for that.</li>
<li>Avoid overflow completely (barring memory limits) by using some sort of <code>BigInt</code>. The crate <a href="https://docs.rs/num-bigint/0.2.6/num_bigint/" rel="nofollow noreferrer"><code>num_bigint</code></a> has an implementation with everything you'd need here, including parsing, printing, multiplying and subtracting. You should be able to replace <code>i64</code> with <code>BigUint</code> (or <code>BigInt</code>) with only a few conversions from integer literals.</li>
</ul>
    </div>