<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>On raw and smart pointers</h2>

<p>First, I'll address your specific question, about using a raw pointer to refer to nodes in the tree.  I believe you're doing exactly the right thing here, because smart pointers convey information about <strong>ownership</strong> of the resource.</p>

<p>We are looking at nodes that are owned by the tree (actually, each node is owned by its parent), and it's entirely appropriate that that ownership is encoded as a <code>std::unique_ptr</code>; that says that this is the only place that's responsible for deleting the node when it's no longer required.</p>

<p>Our <code>Delete</code> method walks nodes from the root downwards; it needs to refer to the nodes, but only during the execution of the method (it doesn't store pointers anywhere).  A raw pointer is perfectly suitable here.</p>

<hr>

<h2>General review</h2>

<p>Is <code>&lt;iostream&gt;</code> used anywhere?  I think it can be omitted.</p>

<p>If this is a header file, avoid bringing <code>std::make_unique</code> and <code>std::unique_ptr</code> into the global namespace, as that will affect every file that includes the header.  It's reasonably to do so inside the function bodies, but at that point it's likely better to simply use the qualified names.  Including them within the scope of the type is a middle ground where opinions will differ.</p>

<p>We should include <code>&lt;utility&gt;</code> for <code>std::move</code> (and the same comments apply to importing that name into <code>::</code>).</p>

<p>Consider turning tests around to test a positive first, which slightly reduces cognitive load.  Instead of:</p>

<blockquote>
<pre><code>if (not node) {
  node = make_unique&lt;Node&gt;(value);
}
else {
  value &lt; node-&gt;value
    ? Insert(node-&gt;left, value)
    : Insert(node-&gt;right, value);
}
</code></pre>
</blockquote>

<p>This is easier to reason about:</p>

<pre><code>if (node) {
  value &lt; node-&gt;value
    ? Insert(node-&gt;left, value)
    : Insert(node-&gt;right, value);
}
else {
  node = make_unique&lt;Node&gt;(value);
}
</code></pre>

<p>Actually, that ternary can be narrowed to within the argument list (you can add more parens according to taste):</p>

<pre><code>if (node) {
  Insert(value &lt; node-&gt;value ? node-&gt;left : node-&gt;right, value);
}
else {
  node = make_unique&lt;Node&gt;(value);
}
</code></pre>

<p>On a related note, if we return early from within <code>if</code>, we can just flow into the next code without <code>else</code>:</p>

<blockquote>
<pre><code>if (not node) {
  return false;
}
else if (node-&gt;value == value) {
  return true;
}
else {
  return value &lt; node-&gt;value
    ? Contains(node-&gt;left, value)
    : Contains(node-&gt;right, value);
}
</code></pre>
</blockquote>

<p>That can become</p>

<pre><code>if (not node) {
  return false;
}
if (node-&gt;value == value) {
  return true;
}

return Contains(value &lt; node-&gt;value ? node-&gt;left : node-&gt;right, value);
</code></pre>

<p>We might be able to remove some repetition by adding a method to find the insertion point for a value - <code>Contains()</code> can return true if that insertion point has a value that compares equal, and <code>Delete()</code> can start from that point in removing the value.</p>

<p>If the tree could be large, then perhaps iteration may be better than recursion for walking the tree.  That means we'll need pointers in some places where we currently have references, and some things may have to lose <code>const</code> qualification, but may give a performance improvement and save on stack usage (or may not, depending on how your compiler manages to optimise the recursive call - always check these things!).</p>

<hr>

<h1>Further directions</h1>

<p>Try to evolve the public interface to supporting <em>standard container</em> operations.  This probably begins with creating iterators and the member functions that return them.</p>

<p>Consider maintaining a <em>balanced</em> tree - you'll want to read up on the theory if you're not already familiar with the techniques to do this.</p>

<p>You haven't shown your unit tests here, but it's worthwhile occasionally running them with a memory checker such as Valgrind.  As well as ensuring we don't leak memory, that will also help identify any uses of dangling pointers or uninitialized values, which an ordinary run might not.</p>
    </div>