<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>A bit dated...</h2>

<p>First of all, let me say that since C++20 much of SFINAE will be unnecessary. Concepts have SFINAE enabled by default, have much nicer syntax, and have greater reuse capabilities.</p>

<h2>Code Review</h2>

<p>Personally I don't see much improvement over original one. What I would prefer instead of </p>

<pre><code>template &lt;typename T, typename ... &gt;
...
</code></pre>

<p>is </p>

<pre><code>template &lt;typename T, bool ... Conditionals&gt;
... //perform folding
</code></pre>

<p>Even then, people sometimes have non-trivial logic like AND-ing and OR-ing the results of conditionals.</p>

<p>Much of the complexity lies in that conditional statements, which could be moved away by using something like template variable:</p>

<pre><code>template &lt;typename T&gt;
constexpr inline bool supports_xxx = /*is_same, trivial, etc*/;
</code></pre>

<p>and then people could just use</p>

<pre><code>template &lt;typename T, typename = std::enable_if_t&lt;supports_xxx&lt;T&gt;&gt;&gt;
...
</code></pre>

<hr>

<h2>Example</h2>

<pre><code>// 1) within class declaration:
template &lt;typename T, 
    sfinae&lt;bool,
        std::enable_if_t&lt;std::is_integral_v&lt;T&gt;&gt;,
        std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;
    &gt; = true /* provide default option, bc reasons */&gt;
class foo;
</code></pre>

<p>is better written as</p>

<pre><code>template &lt;typename T&gt;
constexpr inline bool is_int_arithmetic_v = std::is_integral_v&lt;T&gt; 
                                            &amp;&amp; std::is_arithmetic_v&lt;T&gt;;

template &lt;typename T, 
          typename = std::enable_if_t&lt;is_int_arithmetic_v&lt;T&gt;&gt;&gt;
class foo;
</code></pre>

<p>Do note the <code>inline</code>, it will help users of the code to deal with ODR issues.</p>
    </div>