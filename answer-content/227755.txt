<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type hints</h2>

<p>PEP484 type hints, such as <code>ndim: int</code>, will help better-define your interface.</p>

<h2>Mutability</h2>

<p>Reading your code, the other members of <code>CandidateArchive</code> only make sense if <code>fidelities</code> are immutable. As such, don't make them a list - make them a tuple. One advantage is that you can safely give a default argument of <code>('fitness',)</code>, whereas you can't safely give a default argument that is a mutable list.</p>

<h2>lower_camel_case</h2>

<p><code>addcandidates</code> should be <code>add_candidates</code>.</p>

<h2>Logic inversion</h2>

<pre><code>        if tuple(candidate) not in self.data:
            self._addnewcandidate(candidate, fit, fid, verbose=verbose)
        else:
            self._updatecandidate(candidate, fit, fid, verbose=verbose)
</code></pre>

<p>Since you have both code paths here, put the positive one first so that you don't need a <code>not</code>:</p>

<pre><code>        if tuple(candidate) in self.data:
            fun = self._update_candidate
        else:
            fun = self._add_new_candidate
        fun(candidate, fit, fid, verbose=verbose)
</code></pre>

<h2>Default arguments</h2>

<pre><code>    if fidelity is None:
        fidelity = 'fitness'
</code></pre>

<p>should be replaced with a default argument of 'fitness'.</p>

<h2>No-op code</h2>

<pre><code>    if type(fidelity) in [tuple, list]:
        pass
</code></pre>

<p>This can be made into an outer condition so that you don't need to <code>pass</code>:</p>

<pre><code>if not isinstance(fidelity, (tuple, list)):
    if fidelity: ...
    else: ...
</code></pre>
    </div>