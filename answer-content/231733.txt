<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation of the dereferencing operators misses to check for a valid <code>ptr</code>. It should rather look like this:</p>

<pre><code>T &amp; operator* () {
    if(ptr) {
        return ptr-&gt;data;
    }
    throw std::runtime_error("Dereferencing invalid ThreadUnsafeSharedPtr.");
}

T * operator-&gt; () {
    if(ptr) {
        return &amp;(ptr-&gt;data);
    }
    throw std::runtime_error("Dereferencing invalid ThreadUnsafeSharedPtr.");
}
</code></pre>

<hr>

<p>Also your implementation of copy constructor and assignment don't check if the incoming <code>ThreadUnsafeSharedPtr</code> is pointing to a valid <code>other</code> pointing to data, respectively if <code>ptr</code> is already shared.<br>
I am not sure if you intended to increment the counter for such case.</p>

<p>I'd rather write these like:</p>

<pre><code>ThreadUnsafeSharedPtr(const ThreadUnsafeSharedPtr &amp; other) : ptr(nullptr) {
    if (other.ptr &amp;&amp; &amp;other != this) {
        ptr = other.ptr;
        ++(ptr-&gt;cnt);
    }
}
ThreadUnsafeSharedPtr &amp; operator=(const ThreadUnsafeSharedPtr &amp; other) {
    if (other.ptr &amp;&amp; &amp;other != this) {
        if(ptr &amp;&amp; ptr-&gt;cnt &gt; 1) { // Counter must be decremented if it is already shared
           --(ptr-&gt;cnt);
        }
        ptr = other.ptr;
        ++(ptr-&gt;cnt);
    }
    return *this;
}
</code></pre>

<hr>

<p>Generally I'd be cautious with such hand rolled micro optimizations in favor of the usage of standard library classes.</p>

<p>It may be flawed from pitfalls as shown above, and makes your code less portable (e.g. if some stuff should be reused in multithreaded environments).</p>

<p>The overhead introduced with <code>std::shared_ptr</code> is fairly small.</p>
    </div>