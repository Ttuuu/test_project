<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome! Here is some feedback, in no particular order.</p>

<h2>Avoid <code>using namespace std</code></h2>

<p>This advice is <a href="https://stackoverflow.com/q/1452721/6789498">often repeated</a> for good reason. See also: code guidelines <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#example-348" rel="noreferrer">SF.6</a>. It's useful when you're learning the C++ standard library to know what belongs in the standard library and what doesn't.</p>

<pre><code>cout &lt;&lt; "Enter your 2 numbers: "&lt;&lt; endl;
</code></pre>

<p>Becomes</p>

<pre><code>std::cout &lt;&lt; "Enter your 2 numbers: "&lt;&lt; std::endl;
</code></pre>

<h2>Consistent spacing</h2>

<p>Maybe this is caused by the formatting on Stack Exchange. There are many online style guides, I would choose one that is most readable to you and your peers and stick with it throughout the source code.</p>

<pre><code>int add (int x, int y){
return x+y;
};
</code></pre>

<p>Becomes</p>

<pre><code>int add(int x, int y) {
    return x + y;
};
</code></pre>

<h2>Semicolons</h2>

<p>Functions don't need semicolons at the end (<code>main</code> &amp; <code>add</code>). This is only used for <a href="https://en.wikipedia.org/wiki/Function_prototype" rel="noreferrer">function prototypes</a>.</p>

<pre><code>int add(int x, int y) {
    return x + y;
};
</code></pre>

<p>Becomes</p>

<pre><code>int add(int x, int y) {
    return x + y;
}
</code></pre>

<h2>Avoid <code>std::endl</code></h2>

<p>Unless you need to flush the stream, using <code>std::endl</code> can be replaced with a newline character.</p>

<pre><code>std::cout &lt;&lt; "Enter your 2 numbers: "&lt;&lt; std::endl;
</code></pre>

<p>Becomes</p>

<pre><code>std::cout &lt;&lt; "Enter your 2 numbers:\n";
</code></pre>

<h2>Combine multiple <code>std::cout</code> and <code>std::cin</code> calls.</h2>

<p>This is just my preference. It reduces the amount of code I have to write.</p>

<pre><code>std::cin &gt;&gt; n1;
std::cin &gt;&gt; n2;
</code></pre>

<p>Becomes</p>

<pre><code>std::cin &gt;&gt; n1 &gt;&gt; n2;
</code></pre>

<p>And</p>

<pre><code>std::cout &lt;&lt; "1) Add: " &lt;&lt; std::endl;
std::cout &lt;&lt; "2) Divide: "&lt;&lt; std::endl;
std::cout &lt;&lt; "3) Multiply: "&lt;&lt; std::endl;
std::cout &lt;&lt; "4) Subtration: "&lt;&lt; std::endl;
</code></pre>

<p>Becomes</p>

<pre><code>std::cout &lt;&lt; "1) Add:\n2) Divide:\n3) Multiply:\n4) Subtration:\n";
</code></pre>

<p>In the above example, there are many other ways to do it. For example, you can use multi-line strings, adding the strings, and so on.</p>

<h2>Make use of your functions</h2>

<p>You define the <code>add</code>, <code>divide</code>, <code>multiply</code> and <code>subtract</code> functions, but you don't call them. Here is how you would do that:</p>

<pre><code>std::cout &lt;&lt; n1 + n2 &lt;&lt; '\n';
</code></pre>

<p>Becomes</p>

<pre><code>std::cout &lt;&lt; add(n1, n2) &lt;&lt; '\n';
</code></pre>

<p>It's as simple as that!</p>

<p>In complex applications, splitting things into functions makes the code easier to work with. For example, say you wanted the "add" operation to have saturating arithmetic (doesn't overflow). It's easier to add that logic to a separate function rather than inserting it into a long block of code.</p>

<p>Or, if you want to handle a division-by-zero case.</p>

<h2>Don't use <code>goto</code></h2>

<p>While <code>goto</code> is useful in a few cases, it's not particularly useful here. Instead you can use a do-while loop.</p>

<pre><code>SomeLine:

// code

if (userchoice == 'y'){
    goto SomeLine;
}
else if(userchoice == 'n'){
    goto Exit;
}

Exit:
return 0;
</code></pre>

<p>Becomes</p>

<pre><code>do {
     // code
} while (userchoice == 'y');

return 0;
</code></pre>

<h2>Variable naming</h2>

<p>The variables <code>x</code> and <code>y</code> are used in the function signatures. You can also use those names in <code>main</code>. I'd prefer that over <code>n1</code> and <code>n2</code>. Likewise, <code>user14</code> is vague (do we change it to <code>user15</code> if we include another operation?). Something like <code>operation</code> or <code>op</code> isn't vague. <code>userchoice</code> is a bit long, <code>exit</code> is shorter and clearly shows its purpose.</p>

<h2><code>const</code></h2>

<p>Make use of the <code>const</code> keyword where it makes sense. For example, in <code>add</code>, we intend for the <code>x</code> and <code>y</code> variables to never themselves be modified. So we can declare them as <code>const</code>, and the compiler will give us an error if we accidentally change their values.</p>

<p>This isn't particularly useful anything other than readability here, but can be useful if you get into more advanced topics, such as <code>const</code> references.</p>

<p>The functions <code>add</code>, <code>divide</code>, <code>multiply</code>, and <code>subtract</code> can be <a href="https://en.cppreference.com/w/cpp/language/constexpr" rel="noreferrer"><code>constexpr</code></a>. The compiler may already evaluate these at compile time, but using <code>constexpr</code> marks them as such (broadly speaking).</p>

<h2>Move variables to the lowest scope</h2>

<p>Now that we've gotten rid of the <code>goto</code>s, we can move <code>x</code>, <code>y</code>, and <code>op</code> to a lower scope. They can also all be declared on the same line.</p>

<h2>Consider edge cases</h2>

<p>The following are a few example cases where you may wish to add extra handling -- or leave as it currently is.</p>

<ul>
<li>What if the user enters a letter where you're expecting an integer?</li>
<li>What if the user enters an operation number outside of the range?</li>
<li>What about possible signed integer overflow (undefined behavior)?</li>
<li>What about division-by-zero?</li>
<li>What if the input stream is no longer valid after user input?</li>
<li>...</li>
</ul>

<h2>Conclusion</h2>

<p>Here is the code I ended up with:</p>

<pre><code>#include &lt;iostream&gt;

constexpr int add(const int x, const int y) {
    return x + y;
}

constexpr int divide(const int x, const int y) {
    return x / y;
}

constexpr int multiply(const int x, const int y) {
    return x * y;
}

constexpr int subtract(const int x, const int y) {
    return x - y;
}


int main() {
    char exit;

    do {
        int x, y, op;

        std::cout &lt;&lt; "Enter your 2 numbers:\n";

        std::cin &gt;&gt; x &gt;&gt; y;

        std::cout &lt;&lt; "Ok, now what do you want to do with those numbers?\n";
        std::cout &lt;&lt; "1) Add:\n2) Divide:\n3) Multiply:\n4) Subtration:\n";

        std::cin &gt;&gt; op;

        switch (op) {
            case 1:
                std::cout &lt;&lt; add(x, y) &lt;&lt; '\n';
                break;
            case 2:
                std::cout &lt;&lt; divide(x, y) &lt;&lt; '\n';
                break;
            case 3:
                std::cout &lt;&lt; multiply(x, y) &lt;&lt; '\n';
                break;
            case 4:
                std::cout &lt;&lt; subtract(x, y) &lt;&lt; '\n';
                break;
        }

        std::cout &lt;&lt; "Would you like to perform any other operations? y/n\n";

        std::cin &gt;&gt; exit;
    } while (exit == 'y');

    return 0;
}
</code></pre>

<p>Hopefully this has been helpful. I hope you continue to enjoy programming as much as we all do!</p>
    </div>