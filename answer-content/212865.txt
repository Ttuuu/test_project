<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<h2>this.member</h2>

<p>Statements like <code>this.components = new ArrayList&lt;&gt;();</code> do not need the <code>this.</code> prefix on the <code>components</code> variable.  You only need to use a <code>this.</code> prefix if you've shadowed a member variable with an method argument using the same name.  You should remove <code>this.</code> from everywhere it is not necessary.</p>

<h2>Javadoc</h2>

<p>The text "No parameters" and "No return" is superfluous.  The information is available from the method signature.</p>

<h1>Circuit</h1>

<h2>getInstance()</h2>

<p>The <code>Circuit</code> singleton is a bad idea.  Ask yourself, "can I ever have two?" and you should realize that it is not that much of a stretch to have two circuits.  You could compare two circuits, look for a difference between circuits, and so on.  And if you use <code>JUnit</code> for testing, it wants to create brand new instances to run each test on; with a singleton, you've painted yourself into a corner.</p>

<h2>toString()</h2>

<p>Building <code>String</code> objects from many pieces is an expensive operation.  <code>StringBuilder</code> removes much of the overhead, by using a large mutable buffer to accumulate partial results in.  Use like:</p>

<pre><code>StringBuilder sb = new StringBuilder();

for (...) {
    sb.append(...);
}

return sb.toString();
</code></pre>

<p><code>for(Object obj : components){</code> is throwing away useful type information.  You know <code>components</code> is a <code>ArrayList&lt;Component&gt;</code>, so you should use <code>Component</code> as the type of loop variable:</p>

<pre><code>for (Component component: components) {
</code></pre>

<p>The <code>if (obj.getClass() == Resistor.class) { ... }  if (obj instanceof Voltage) { ... }</code> is code smell.  Doing it once, for one particular class type may be necessary, from time to time, but when you are doing multiple tests in a row, it is time to rethink the design.  </p>

<p>Starting with the most minor aspect, if <code>obj</code> was a <code>Resistor</code>, could it possible also be a <code>Voltage</code>?  No?  Then you should use <code>else if</code> for subsequent tests.</p>

<p>I'm not sure what your goal here was:</p>

<pre><code>/*Downcast to original object type to use class toString() method.*/
str+= ("Resistor: "+(Resistor)obj).toString()+"\n";
</code></pre>

<p>First, you do not have to downcast to call <code>.toString()</code>.  Second, <code>"Resistor: "+(Resistor)obj</code> automatically invokes <code>.toString()</code> on <code>(Resistor)obj</code> in order to do the concatenation.  Third, since <code>Resistor</code> is overriding <code>String.toObject()</code>, the cast to <code>Resistor</code> is unnecessary.  Fourth, the result is a string, so <code>(...).toString()</code> is asking a <code>String</code> object to return itself.  This line could simply be:</p>

<pre><code>str += "Resistor: " + obj + "\n"; 
</code></pre>

<p>But will you be adding other component types, such as a current sources, capacitor, and/or inductors?  Having to track down and find everywhere you explicitly check the type of class will be time consuming and error prone.  This is just for printing out the type of the object.  Why not just ask the object for its type?</p>

<pre><code>StringBuilder sb = new StringBuilder();

for (Component component: components) {
    sb.append(component.getType());      // new abstract function
    sb.append(": ");
    sb.append(component.toString());
    sb.append("\n");
}

if (sb.getLength() &gt; 0)
    sb.setLength(sb.getLength()-1);      // Remove trailing "\n"

return sb.toString();
</code></pre>

<h1>Component</h1>

<p><code>nodal1</code> and <code>nodal2</code> are protected, yet you have <code>getNode1()</code> and <code>getNode2()</code> methods which are also protected.  Anything which can call <code>getNode1()</code> can already access <code>nodal1</code>.  Perhaps you meant for them to be <code>private</code>, if you want to force the callers to use the <code>getNodeX()</code> accessor methods.</p>

<p><code>Component</code> has exactly 2 node nodes.  This excludes more interesting electrical components like transistors, which have 3, and transformers which can have more.</p>

<p>Perhaps create a <code>public abstract class BranchComponent extends Component</code> which is used for electrical components having exactly 2 nodes.  Or make <code>Component</code> general enough to handle an arbitrary number of nodes.</p>

<h2>getNodes()</h2>

<p>This returns <code>Node[]</code>, where as all of your other structures use the <code>Collection</code> objects.  Consider returning a <code>List&lt;Node&gt;</code> instead:</p>

<pre><code>protected List&lt;Node&gt; getNodes() {
    return List.of(nodal1, nodal2);
}
</code></pre>

<h2>setId()/getId()/equals()</h2>

<p>Again, <code>id</code> is protected, and the functions are protected, so any code that wants to access <code>id</code> could simply access <code>id</code> instead of going through the accessor functions.  Perhaps you meant for <code>id</code> to be <code>private</code>.</p>

<p>Two components are equal if their <code>id</code> values are equal?  This is very dangerous, given that the <code>id</code> numbers are duplicated for <code>Voltage</code> and <code>Resistor</code> components.  Consider declaring them equal only if their respective classes are equal as well!</p>

<p>Consider <strong>overriding</strong> <code>Object.equals(Object other)</code> instead of <strong>overloading</strong> the method signature, which could lead to hard-to-debug behaviour.  <code>component.equals(other_component)</code> and <code>component.equals((Object) other_component)</code> are currently handled by different functions.</p>

<pre><code>@Override
public boolean equals(Object other) {
    if (other instanceof Component) {
        Component c = (Component) other;
        return getId() == c.getId()  &amp;&amp;  getClass() == c.getClass();
    }
    return false;
}
</code></pre>

<h2>compare()</h2>

<p>If you are defining a comparison method, you may as well <code>implement</code> the <code>Comparable&lt;Component&gt;</code> interface, and use the official <code>compareTo()</code> method name.  This will allow you to use standard library utilities for sorting, etc.</p>

<p>Returning the difference of to <code>int</code> values for a positive/zero/negative comparison result is an anti pattern.  It is possible for the subtraction to overflow and return the wrong result.  You should use <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Integer.html#compare(int,int)" rel="nofollow noreferrer"><code>Integer.compare(int, int)</code></a> to be safe.</p>

<pre><code>class Component implements Comparable&lt;Component&gt; {
    ...

    @Override
    public int compareTo(Component other) {
        ...
    }
}
</code></pre>

<p>Since your comparison function depends upon the ordering of <code>Node</code> objects, you should make them comparable too.  Then your <code>compareTo</code> method could be written:</p>

<pre><code>int result = getNode1().compareTo(other.getNode1());
if (result == 0) {
    result = getNode2().compareTo(other.getNode2());
}
return result;
</code></pre>

<h2>toStringFinal()</h2>

<p>Method name doesn't make it clear what this function is intended to do.  What is <code>final</code> about the returned string?</p>

<h1>Node</h1>

<p>Node has an private <code>id</code>, which is initialized by the constructor.  There is no <code>setId()</code>.  Perhaps <code>id</code> should be <code>final</code>.  For that matter, <code>attachments</code> could be <code>final</code> as well, since you never reassign the container.</p>

<h2>toString()</h2>

<p><code>Integer.toString(id)</code> is preferable over <code>""+this.id</code>.  Without optimizations, the latter would call <code>Integer.toString()</code> to create the string representing the value, and concatenate that with the first empty string, to create a third string.  The former directly returns the string.</p>

<h2>toStringAttachments()</h2>

<p>A <code>StringBuilder</code> would be appropriate here.</p>

<h2>compareTo()</h2>

<p>Have the <code>class Node implements Comparable&lt;Node&gt;</code>, and implement a <code>public boolean compareTo(Node other)</code> method, for use by <code>Component.compareTo()</code>.</p>

<h1>NodeChecker</h1>

<p>I'm sorry.  This class is just a mess of half thought-out design.  As evidenced by its usage:</p>

<pre><code>NodeChecker evaluate = new NodeChecker(firstNode,secondNode,nodeList);
@SuppressWarnings("unused")
Node node1 = evaluate.getCheckedNode1();
@SuppressWarnings("unused")
Node node2 = evaluate.getCheckedNode2();

/*Find list index now that the node is definitely in the array.*/
int index1 = evaluate.findIndex(1);
int index2 = evaluate.findIndex(2);

/*Create add resistor to circuit.*/
Resistor res = new Resistor(rVal,nodeList.get(index1),nodeList.get(index2));
nodeList.get(index1).connect(res);
nodeList.get(index2).connect(res);
</code></pre>

<p>So the values returned by <code>getCheckedNode1()</code> and <code>getCheckedNode2()</code> are not used.  Why are they being retrieved at all?  Then <code>findIndex()</code> is used to locate the position in the array, followed by <code>nodeList.get()</code> twice for each node index?  Why not use the values returned by <code>getCheckedNode_()</code>?  We need to look no further that the <code>NodeChecker()</code> constructor:</p>

<pre><code>this.node1 = new Node(nod1);

int flag1 = 0;
/*If nodes do not exist, create them.*/
for (Node node : nodeList){
    if (node.getId() == node1.getId()){
        /*If found set flag and break.*/
        flag1 = 1;
        break;
    } 
}

/*If not found.*/
if (flag1 == 0){
    nodeList.add(node1);
}
</code></pre>

<p>plus duplicate code for <code>node2</code> using <code>flag2</code>.</p>

<p>Summarizing.  You unconditionally create a <code>new Node()</code> for the node id, then search for a node in the <code>nodeList</code> who's id is the same as the new node's id (fetching that id each time through the loop!).  If found, you use an <code>int</code> variable (instead of a <code>boolean</code>) as a flag to remember that it was found, but do nothing with the found node.  If not found, you add the unconditionally created node to the <code>nodeList</code>.  Whether or not the node was found in the list or not, the newly created node is remembered for <code>getCheckedNode()</code>, but it can't be used because it may have just been created without adding it to the <code>nodeList</code>.  And you do the same thing for the other node id.</p>

<p>Rip out the entire <code>NodeChecker</code> class.</p>

<p>To <code>class Node</code>, add the following method:</p>

<pre><code>public static Node findOrCreate(int node_id, List&lt;Node&gt; nodeList) {
    for(Node node : nodeList) {
        if (node.getId() == node_id)
            return node;
    }

    Node new_node = new Node(node_id);
    nodeList.add(new_node);
    return new_node;
}
</code></pre>

<p>And here is code equivalent to the code at the start of this section, to demonstrate its usage:</p>

<pre><code>Node node1 = Node.findOrCreate(firstNode, nodeList);
Node node2 = Node.findOrCreate(secondNode, nodeList);

/*Create add resistor to circuit.*/
Resistor res = new Resistor(rVal, node1, node2);
node1.connect(res);
node2.connect(res);
</code></pre>

<p>The check in <code>NodeChecker</code> for <code>node1 == node2</code> has been eliminated, but you are already checking that in <code>UserMain</code>:</p>

<pre><code>if(firstNode == secondNode) {
    throw new IllegalArgumentException("Components must be connected to two different nodes.");
}
</code></pre>

<h1>Resistor</h1>

<p><code>double threshold = 0.00001;</code> should be removed from the constructor, and changed into a class constant:</p>

<pre><code>public final static double MIN_RESISTANCE = 0.00001;
</code></pre>

<p><code>resistance</code> is initialized in the constructor, and never changed.  It should be declared <code>final</code>.</p>

<h2>set_current()/get_current()</h2>

<p>You've broke with convention and used an underscore.  The Java Bean Standard for getters and setters is no underscore and capitalize the first letter after get/set: <code>setCurrent()</code> and <code>getCurrent()</code>.</p>

<h2>toString()/toStringFinal()</h2>

<p>You are accessing <code>this.getNodes()[0]</code> and <code>this.getNodes()[1]</code>.  Each call to <code>getNodes()</code> is constructing and returning a new <code>Node[]</code> array.  You extract 1 element from the array, discard the array, and then immediately request a new copy of the array.  For efficiency, you should just call <code>getNodes()</code> once, and access the returned value twice for the desired nodes.</p>

<pre><code>Node[] nodes = getNodes();
return return "R" + getId() + " " + nodes[0] + " " + nodes[1] + " " + resistance + " Ohms";
</code></pre>

<p>Or perhaps:</p>

<pre><code>return String.format("R%d %s %s %f Ohms", getId(), nodes[0], nodes[1], resistance);
</code></pre>

<h1>Voltage</h1>

<p>Similar comments to <code>Resistor</code>.  Change <code>threshold</code> to <code>public static final double MIN_VOLTAGE</code>.  Make the <code>toString()</code> methods more efficient.</p>

<h1>UserMain</h1>

<p>Why are you creating a <code>UserMain</code> object to initialize 2 static variables?</p>

<p>Exception handling is a huge sledge hammer to use for validation of 1 of 5 words.  Instead, use:</p>

<pre><code>private final static List&lt;String&gt; COMMANDS = List.of("add", "edit", "display", "calculate", "end");

...

while (true) {
    input = UserMain.user.nextLine();
    if (COMMANDS.contains(input))
        break;
    System.out.println("Invalid input.  Must be one of: " + String.join(" ", COMMANDS);
    System.out.println("Retry:");
}
</code></pre>

<p>When you do need it to catch exceptions, if your exception handling is <strong>identical</strong> for all exceptions, use a compound exception handler:</p>

<pre><code>} catch (NumberFormatException | IllegalArgumentException | ArrayIndexOutOfBoundsException e) {
    /* instruct user on error and to retry */
    System.out.println(e);
    System.out.println("Invalid input. Resistor syntax is R X Y Z. Input a resistor:");
    input = UserMain.user.nextLine();
}
</code></pre>

<h1>Structure</h1>

<p>As mentioned above, <code>Circuit</code> should allow multiple instances.</p>

<p><code>Circuit</code> could have as a member <code>Map&lt;Integer,Node&gt;</code> which would give you <span class="math-container">\$O(1)\$</span> lookup of a <code>Node</code> from a node number.</p>

<p>Instead of numbering nodes and resistors, you could name them instead.  Then you could have both:</p>

<pre><code>Map&lt;String, Node&gt; nodes = new HashMap&lt;&gt;();
Map&lt;String, Component&gt; components = new HashMap&lt;&gt;();
</code></pre>

<p>And have a node named "mid", and branch named "load".</p>
    </div>