<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For what you are trying to achieve, Java has a very nice solution since Java 7: <code>java.nio.Files</code>.</p>

<p>The <code>Files</code> class comes with a lot of useful methods that do what you did more expressively and easier to understand.</p>

<p>Instead of listing all files in a directory and looping over them, you can actually walk the <em>entire</em> file tree, including sub-directories, if you want.</p>

<p>You can do this the "callback-style" or using Java Streams. I like streams, so I will try and rebuild what you did, but with <code>java.nio.Files</code> and <code>java.util.stream.Stream</code>. Also I am going to use Java 11's <code>var</code> keyword, because I don't like typing out all the types unless absolutely necessary:</p>

<pre><code>/**
 * Deletes all files with their names ending in ".ccc" or starting with
 * "_how_recover_anj" or "_how_recover_jav".
 * 
 * @param directoryName The directory to search in.
 * @return A map of all files which were attempted to be deleted and their
 *         deletion status.
 */
private static Map&lt;File, Boolean&gt; SearchAndDeleteFiles(String directoryName) throws IOException {
    try (var fileStream = Files.walk(Paths.get(directoryName))) {
        return fileStream.map(path -&gt; path.toFile())
                .filter(file -&gt; 
                        file.isFile()
                        &amp;&amp; (file.getName().endsWith(".ccc")
                        || file.getName().startsWith("_how_recover_anj")
                        || file.getName().startsWith("_how_recover_jav")))
                .peek(file -&gt; System.out.println(file))
                // Actually delete the file and record the status.
                .map(file -&gt; Map.entry(file, file.delete()))
                .peek(entry -&gt; System.out.printf("%s delete status: %s%n", entry.getKey(), entry.getValue()))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
    } catch (IOException e) {
        throw new IOException(e);
    }
}
</code></pre>

<p>First you see, that I actually provide some documentation. Tell the user (even your future self), what this method is supposed to do, what is wants as parameters and returns as a result.</p>

<p>Also notice, that I removed the <code>files</code> argument. You changed that list and added the files that you traversed (not the ones that were successfully deleted) to that list. This is a code smell as you are modifying the incoming collection which could very possibly be immutable without checking.<br>
In my solution, this is no longer necessary, as we don't need any recursion and actually return which files we traversed and attempted to delete.</p>

<p>Then I am following the recommendation written in the documentation and walk the file tree in a <code>try-with-resources</code> block. This makes sure, that in any case, the file handles to the directories are cleanly closed.</p>

<p>The stream is expressive and pretty self-explanatory, it first maps all the file paths to actual Java File objects, filters the ones matching your criteria, then prints the file name. You don't need to construct <code>StringBuilder</code>s for every string you print, just more complex expressions and actually constructed strings.</p>

<p>Then it maps the file to itself and it's deletion status. This status is then printed, just like in your method and collected into a map.<br>
The map is then returned.</p>

<p>If any exception is thrown, it is re-thrown and the stream of paths is cleanly closed.</p>

<p>The <code>Files.walk</code> method is implicitly recursive and lazy, so you don't need to worry about performance or traversing into sub-directories.</p>

<p>You could make this method even more flexible, if you want, but I hope this answers your question.</p>
    </div>