<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use field initialization lists:</h2>

<p>So your constructor</p>

<pre><code>ComplexNumber(double real = 0.0, double imaginary = 0.0) {
    this-&gt;real = real;
    this-&gt;imaginary = imaginary;
}
</code></pre>

<p>Can become:</p>

<pre><code>ComplexNumber(double real = 0.0, double imaginary = 0.0)
    : real(real), imaginary(imaginary) { }
</code></pre>

<h2>Simplify your returns</h2>

<p>I could see an argument for making an extra <code>ComplexNumber</code> to hold your return value if you need to further modify it or if the name of that variable is explanatory in showing what the return means, but as it stands, your <code>c</code> is neither of those.</p>

<p>Simplify</p>

<pre><code>ComplexNumber c = ComplexNumber(real, imaginary);
return c;
</code></pre>

<p>To just</p>

<pre><code>return ComplexNumber(real, imaginary);
</code></pre>

<h2>Make your operator functions <code>const</code></h2>

<p>Since you (correctly) don't modify <code>a</code> when you do <code>a + b</code>, the operator function can (and should) be declared <code>const</code>. That way, even if you have a <code>const</code> object, you'll still be able to call it (and if you accidentally try to modify the member variable, you'll know immediately in the form of a compilation error).</p>

<p>That'd look like:</p>

<pre><code>ComplexNumber operator+(const ComplexNumber &amp;b) const {
</code></pre>

<p>Notice I've also declared <code>b</code> as <code>const</code> here since you shouldn't be modifying it either. I've also passed it by reference to save you some overhead.</p>

<h2>Make your class printable with <code>std::cout</code></h2>

<p>Your <code>printNumber</code> is very specific. In fact, if you ever want to use this class for anything other than simply showing arithmetic results, that print may not be what you want. Instead, I'd make a generic <code>str()</code> that just returns a string version of the complex number. Something like:</p>

<pre><code>std::string str() {
    std::ostringstream oss;
    oss &lt;&lt; this-&gt;real &lt;&lt; " + (" &lt;&lt; this-&gt;imaginary &lt;&lt; ") * i";
    return oss.str(); 
}
</code></pre>

<p>And then in the global scope, you can overload the <code>&lt;&lt;</code> operator for <code>std::cout</code>:</p>

<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream &amp;os, const ComplexNumber &amp;cn) {
    return os &lt;&lt; cn.str();
}
</code></pre>

<p>And now when you want to print it in <code>main()</code>, you can say:</p>

<pre><code>std::cout &lt;&lt; "a + b = " &lt;&lt; a + b &lt;&lt; std::endl;
std::cout &lt;&lt; "a - b = " &lt;&lt; a - b &lt;&lt; std::endl;
std::cout &lt;&lt; "a * b = " &lt;&lt; a * b &lt;&lt; std::endl;
std::cout &lt;&lt; "a / b = " &lt;&lt; a / b &lt;&lt; std::endl;
</code></pre>

<p>Look at how easy that becomes to read and understand!</p>
    </div>