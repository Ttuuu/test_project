<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>1) Persistant Data Structure</h1>

<p>I think this could be a good use case for a <a href="https://en.wikipedia.org/wiki/Persistent_data_structure" rel="nofollow noreferrer">Persistant Data Structure</a>.</p>

<h3>1.1) The Reason</h3>

<p>The builder gives you some flexibility to observe at multiple locations</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>SampleBuilder builder = new SampleBuilder("Runtimes", "s");

// observe
for (...) { / * ... */ }

Sample runtimes = builder.buildSample();
System.out.println(runtimes);

// observe again
for (...) { / * ... */ }

Sample moreRuntimes = builder.buildSample();
System.out.println(moreRuntimes);
</code></pre>
</blockquote>

<p>The down sight of the two inconspicuous <code>System.out.println(...)</code> is that you calculate everything multiple times. In the following <em>sum</em> and <em>mean</em> will calculate the first time:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>Sample runtimes = builder.buildSample();
System.out.println(runtimes);
</code></pre>
</blockquote>

<p>Now you calculate again <em>sum</em> and <em>mean</em> and <strong>can't reuse the previous calculation</strong> from the first calculation because you create with <code>builder.buildSample()</code> a new <code>Sample</code> instance:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>Sample moreRuntimes = builder.buildSample();
System.out.println(moreRuntimes);
</code></pre>
</blockquote>

<h3>1.2) Possible Solution with a Persistant Data Structure</h3>

<p>I created an <a href="https://repl.it/repls/ViciousRareSearch" rel="nofollow noreferrer">executable example on repl.it</a>, where a <code>Sample</code> can be <code>Empty</code> or <code>NonEmpty</code>. Please excuse that I ignored the threshold.. </p>

<p>For an <code>Empty</code> Sample we know that the sum, mean and count would be 0. If we add a new observation to an <code>Empty</code> Sample the sum will be the observation, the count will be 1 and the mean is 0: </p>

<pre class="lang-java prettyprint-override"><code>public Sample add(double observation) {
  return new NonEmptyBuilder().withIncrementedCount(0)
                              .withSum(observation)
                              .withMean(0)
                              .build();
}
</code></pre>

<p>Adding a new observation to a <code>NonEmpty</code> Sample we need to increment the count, add the previous sum with the new observation and calculate the mean: </p>

<pre class="lang-java prettyprint-override"><code>public Sample add(double observation) {
  return new NonEmptyBuilder().withIncrementedCount(count)
                              .withSum(sum + observation)
                              .withMean(mean / count)
                              .build();
}
</code></pre>

<p>Since we calculate always the sum based on the previous sum we do not calculate observation multiple times:</p>

<pre class="lang-java prettyprint-override"><code>// ...
System.out.println(sample.sum());

sample = sample.add(...);

// reuses previous sum and does not need to loop through all observations
System.out.println(sample.sum()); 
</code></pre>

<h1>2) Separate the Summary from the Sample</h1>

<p>Beside the fact that it violates the <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" rel="nofollow noreferrer">Open-Close-</a> and the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single-Responsibility-Principle</a> you limit the client to print a summary in a prescribed format to the console.</p>

<p>It would be nice to choose the output and the format of the output.</p>

<h1>3) Sample has a low cohesion</h1>

<p>This point is related to the previous. </p>

<p>In general a class should have a <a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)#High_cohesion" rel="nofollow noreferrer">high cohesion</a>.</p>

<p>When we look into <code>Sample</code> we can see the following methods:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>private static String format(final double value) {
   return String.format("%." + precision + "f", value);
}

private static String format(final int value) {
   return String.valueOf(value);
}

private static boolean stringIsEmpty(final String text) {
   return text == null || text.isEmpty();
}
</code></pre>
</blockquote>

<p>All are private because they don't belong to an API of a <code>Sample</code> and they are only used maximal at two spots which is a sign that they maybe don't belong into <code>Sample</code>. </p>

<h1>4) No Independent Samples</h1>

<p>The client cant have different instances of a <code>Sample</code> with different <code>threshold</code> and <code>precision</code> what limits the client in his/her possibilities. </p>
    </div>