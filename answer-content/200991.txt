<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Now that you know the Rule of Three, and have been pointed by 1201ProgramAlarm to study the Rule of Five... you should also be aware of the Rule of Zero. Try rewriting your code to eliminate all manual memory management. Use <code>unique_ptr&lt;T[]&gt;</code> or <code>vector&lt;T&gt;</code> instead of a manually managed <code>T*</code>.</p>

<pre><code>template &lt;class T&gt;
class InitializedArray {
public:
    explicit InitializedArray(size_t length, T initial) :
        mInitial(std::move(initial)),
        mFrom(length), mTo(length), mElements(length)
    {}

    InitializedArray(InitializedArray&amp;&amp;) = default;
    InitializedArray(const InitializedArray&amp;) = default;
    InitializedArray&amp; operator=(InitializedArray&amp;&amp;) = default;
    InitializedArray&amp; operator=(const InitializedArray&amp;) = default;
    ~InitializedArray() = default;

    // YOUR CODE HERE

    std::vector&lt;size_t&gt; mFrom;
    std::vector&lt;size_t&gt; mTo;
    std::vector&lt;T&gt; mElements;
};
</code></pre>

<p>Things to notice in passing:</p>

<ul>
<li><p>I removed the debugging printfs that you'd placed under <code>NDEBUG</code>. I strongly recommend not to reuse <code>NDEBUG</code> to control anything of your <em>own</em> code; its intended purpose is to control the expansion of the standard <code>assert</code> macro. If you must use a debugging macro, make up your own name for it; I recommend <code>#if DEBUGGING</code>. (Notice that <code>#if</code> does the right thing with <code>-DDEBUGGING=0</code>, whereas your <code>#ifdef</code> does not.)</p></li>
<li><p>Since we're using <code>std::vector</code>, we can follow the Rule of Zero. We don't have to write out the <code>=default</code>ed members — we could have just omitted them — but I wrote them out just to show that they're all really still there.</p></li>
<li><p>Your class doesn't need, and therefore probably shouldn't have, a zero-argument constructor.</p></li>
<li><p>What constructors you <em>do</em> have (except for the copy and move constructors) should always be marked <code>explicit</code>.</p></li>
<li><p>Your original code, and also this "Rule of Zero" code, both rely on being able to default-construct <code>length</code> copies of <code>T</code> at construction time. This is likely to be slow for large values of <code>length</code>, and anyway it defeats your stated purpose, and <em>anyway</em> there's no reason <code>T</code> should even need to be default-constructible. Keywords for further study: "placement new", "std::optional".</p></li>
</ul>

<hr>

<p>Your <code>size()</code> member function should be <code>const</code>-qualified, since it doesn't need to modify the <code>*this</code> object.</p>

<p>Your <code>operator[](size_t)</code> should have <code>const</code> and non-<code>const</code> versions.</p>

<hr>

<p>Consider whether it would make philosophical sense to permit something like <code>InitializedArray&lt;std::unique_ptr&lt;int&gt;&gt;</code>. Think about what you'd have to change in order to make that work. (Hint: <code>mInitial</code> couldn't be a <code>T</code>. What could it be?)</p>
    </div>