<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes you can use <a href="https://vuejs.org/v2/guide/computed.html" rel="nofollow noreferrer">computed properties</a>:</p>

<pre><code>computed: {
    endDate: function() {
      //determine endDate based on value of selectedRange
    },
    startDate: function() {
      //determine startDate based on value of selectedRange
    }
}
</code></pre>

<p>And <a href="https://vuejs.org/v2/api/#v-model" rel="nofollow noreferrer">v-model</a> can be used to bind the value of the select list to that data property:</p>

<pre><code>&lt;select v-model="selectedRange"&gt;
</code></pre>

<p>Then use that property in the computed properties:</p>

<pre><code>  computed: {
    endDate: function() {
      return this.rangeOptions[this.selectedRange].endDate;
    },
    startDate: function() {
      return this.rangeOptions[this.selectedRange].startDate;
    }
  }
</code></pre>

<p>With this approach there is no need to define the <code>rangeSelection</code> method and bind it to the onchange property.</p>

<p><code>rangeOptions</code> could also be moved outside the component, and then the first key could be used to select the default value of <code>selectedRange</code> instead of hard coding it. See the snippet below. </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="false" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const rangeOptions = {
  last7Days: {
    display: 'Last 7 Days',
    startDate: moment().subtract(8, 'days'),
    endDate: moment().subtract(1, 'days')
  },
  lastWeek: {
    display: 'Last Week',
    startDate: moment().startOf('week').subtract(1, 'week'),
    endDate: moment().endOf('week').subtract(1, 'week')
  },
  last30days: {
    display: 'Last 30 days',
    startDate: moment().subtract(31, 'days'),
    endDate: moment().subtract(1, 'days')
  }
};
const form = new Vue({
  el: '#DateRangeChooser',
  data: () =&gt; {
    return {
      selectedRange: Object.keys(rangeOptions)[0],
      rangeOptions
    }
  },
  computed: {
    endDate: function() {
      return rangeOptions[this.selectedRange].endDate;
    },
    startDate: function() {
      return rangeOptions[this.selectedRange].startDate;
    }
  }
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;

&lt;div id="DateRangeChooser"&gt;
  &lt;select v-model="selectedRange"&gt;
    &lt;option v-for="(option, key) in rangeOptions" :key="key" :value="key"&gt;
      {{option.display}}
    &lt;/option&gt;
  &lt;/select&gt;
  &lt;div&gt;Start: {{startDate.format('LL')}}&lt;/div&gt;
  &lt;div&gt;End: {{endDate.format('LL')}}&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<h3>Edit</h3>

<p><a href="https://codereview.stackexchange.com/users/120556/blindman67">@blindman67</a> brought up an interesting point: </p>

<blockquote>
  <p>Sorry my VUE knowledge is limited but I thought computed properties were cached. Could be a problem in some edge cases, eg time near midnight and user selects, then changes their mind waits till after midnight selects again?<sup><a href="https://codereview.stackexchange.com/questions/206192/vue-component-over-complication/206213?noredirect=1#comment397843_206213">1</a></sup></p>
</blockquote>

<p>That is true:</p>

<blockquote>
  <p>... <strong>computed properties are cached based on their dependencies</strong><sup><a href="https://vuejs.org/v2/guide/computed.html#Computed-Caching-vs-Methods" rel="nofollow noreferrer">2</a></sup></p>
</blockquote>

<p>if caching is an issue, then you may need to look at using a <a href="https://vuejs.org/v2/guide/computed.html#Watchers" rel="nofollow noreferrer">watcher</a> or just calculate the computed property each time instead of referencing values within <code>this.rangeOptions</code>.</p>

<p><sup>1</sup><sub><a href="https://codereview.stackexchange.com/questions/206192/vue-component-over-complication/206213?noredirect=1#comment397843_206213">Vue component over-complication</a></sub></p>

<p><sup>2</sup><sub><a href="https://vuejs.org/v2/guide/computed.html#Computed-Caching-vs-Methods" rel="nofollow noreferrer">https://vuejs.org/v2/guide/computed.html#Computed-Caching-vs-Methods</a></sub></p>
    </div>