<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I find your code very dense and difficult to skim. I think you can help it quite a bit by making sure each statement is on a line by itself; that there's whitespace around your operators; and that you use <code>std::</code> qualification on standard library types and functions. More controversially, I would say "don't abuse <code>foo++</code> to mean <code>foo += 1</code>" — the shorthand operator should be used only in idioms such as <code>for</code>.</p>

<p>Also, I'd avoid cryptic abbreviations like <code>uint</code> for <code>unsigned</code> — and in fact, I'd avoid <code>unsigned</code> types in APIs altogether!</p>

<p>You also write <code>word.at(i)</code> where <code>word[i]</code> would suffice; and in fact you don't need <code>i</code> at all if you just use a plain old ranged for loop <code>for (QChar ch : word)</code>.</p>

<p>So where you had</p>

<pre><code>void QanalyzeWord(const QString &amp;word, map&lt;vector&lt;QChar&gt;, pair&lt;int,double&gt;&gt; &amp;charmap, uint lcoh, int &amp;nb) {
    vector&lt;QChar&gt; letterChain(lcoh,'\0');

    for(int i=0; i&lt;word.size(); i++) {
        letterChain[lcoh-1]=word.at(i);
        charmap[letterChain].first++;
        nb++;
        for(uint j=0; j&lt;lcoh-1; j++) {
            letterChain[j]=letterChain[j+1];
        }
    }

    //Indicates last character is void
    letterChain[lcoh-1]='\0';
    charmap[letterChain].first++;
    return;
}
</code></pre>

<p>I would write</p>

<pre><code>void QanalyzeWord(
    const QString&amp; word,
    std::map&lt;std::vector&lt;QChar&gt;, std::pair&lt;int, double&gt;&gt;&amp; charmap,
    int lcoh,
    int&amp; nb)
{
    std::vector&lt;QChar&gt; letterChain(lcoh, '\0');

    for (QChar ch : word) {
        charmap[letterChain].first += 1;
        nb += 1;
        letterChain[lcoh - 1] = ch;
        for (int j = 0; j &lt; lcoh - 1; ++j) {
            letterChain[j] = letterChain[j+1];
        }
    }

    letterChain[lcoh-1] = '\0';
    charmap[letterChain].first += 1;
}
</code></pre>

<hr>

<p>The next thing to look at is that inner loop (<code>for (int j...)</code>). It looks wrong at a glance, because it seems to be "shifting down" every letter in the array... but we've already overwritten one of the letters in the array with a new value! It looks like what we meant to write was</p>

<pre><code>        for (int j = 0; j &lt; lcoh - 1; ++j) {
            letterChain[j] = letterChain[j+1];
        }
        letterChain[lcoh - 1] = ch;
</code></pre>

<p>or more concisely,</p>

<pre><code>        std::copy(letterChain.begin() + 1, letterChain.end(), letterChain.begin());
        letterChain.back() = ch;
</code></pre>

<p>or more concisely,</p>

<pre><code>        QChar *first = &amp;letterChain[0];
        *first = ch;
        std::rotate(first, first + lcoh, first + 1);
</code></pre>

<hr>

<p>The line <code>charmap[letterChain].first += 1;</code> also wants some attention. What is <code>.first</code>? Well, we can look at the function signature and find that <code>charmap[letterChain]</code> is a <code>std::pair&lt;int, double&gt;</code>. But we don't know what the <code>int</code> and the <code>double</code> represent. So it would help the reader understand the code if we created a custom data type:</p>

<pre><code>struct MapEntry {
    int occurrences = 0;
    double not_sure_what_this_is = 0.0;
};
</code></pre>

<p>And then we could write</p>

<pre><code>charmap[letterChain].occurrences += 1;
</code></pre>

<p>which is a little bit clearer. I suspect that the names <code>charmap</code> and <code>MapEntry</code> both could be improved. Naming is important!</p>

<hr>

<p>I didn't really look at the other snippets in your question, but I did notice this part:</p>

<pre><code>if (cePr==std::vector&lt;QChar&gt;(&amp;it-&gt;first[0], &amp;it-&gt;first[lcoh-1])) ...
</code></pre>

<p>Heap-allocating a vector just to do a comparison seems like overkill. You should look into the <a href="https://en.cppreference.com/w/cpp/algorithm/equal" rel="nofollow noreferrer"><code>std::equal</code></a> algorithm</p>

<pre><code>if (std::equal(cePr.begin(), cePr.end(), it-&gt;first.begin(), it-&gt;first.end() - 1)) ...
</code></pre>

<p>or just write a helper function that can compare two ranges for you.</p>

<pre><code>if (vector_begins_with(it-&gt;first, cePr)) ...
</code></pre>
    </div>