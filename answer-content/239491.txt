<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a general rule, you want to use the narrowest possible scope for all variables. We do this so that:</p>

<ol>
<li><p>The declaration is close to where we use it, making it easier to reason about why the variable exists.</p></li>
<li><p>It minimizes the chance of unintended consequences where the variable is accidentally updated somewhere else.</p></li>
</ol>

<p>In this case, it’s so trivial that it doesn’t matter that much, but as your code increases in complexity, this becomes increasingly important. This practice of restricting variables to the narrowest possible scope becomes a central precept in writing safe code: It’s much harder to have unintended consequences or accidentally state changes if variables have narrow scopes.</p>

<p>So, if <code>numberOfGuesses</code> represents how many guesses it took you to guess a  particular random number, then it should be inside the <code>keepPlaying</code> loop. But if you also wanted to keep track of the total number of guesses for all the times you played, then that (probably best kept track in another variable, perhaps, <code>totalNumberOfGuesses</code>) would be outside this outer loop.</p>

<p>By the way, while you’re at it, the <code>continueGuessing</code> and <code>randomNumber</code>, belong inside this <code>keepPlaying</code> loop, too.</p>

<p>By the way,</p>

<ol start="3">
<li>If you define variables only used within the scope of a loop, it saves you from having to reset that variable for the next iteration. For example, right now you are resetting <code>continueGuessing</code> back to <code>true</code> as the last step in the <code>keepPlaying</code> loop; if you define <code>continueGuessing</code> within the loop, then you wouldn’t have to reset it again at the end of the loop, resulting in simpler code.</li>
</ol>

<p>In your code, you make reference to “globals”. As a general rule, we try to minimize the use of globals because as as apps scale, globals can make it hard to test, harder to reason about state changes, etc. See <a href="https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil#148109">Why is Global State so Evil</a> or google “globals are evil”.</p>

<hr>

<p>Some unrelated observations:</p>

<ol>
<li><p>Rather than </p>

<pre><code>let randomNumber = Int(arc4random_uniform(101))
</code></pre>

<p>I’d instead recommend:</p>

<pre><code>let randomNumber = Int.random(in: 0...100)
</code></pre>

<p>It is equivalent, but arguably is more intuitive. (This would be especially true if you wanted to go from 1 to 100 instead, the <code>arc4random_uniform</code> code would become even less intuitive, whereas <code>random(in: 1...100)</code> is perfectly natural and trivial to reason about.</p></li>
<li><p>When you have a loop that you are always going to do at least once, rather than a <code>while</code> loop, we’d often consider <code>repeat</code>-<code>while</code>. E.g. rather than</p>

<pre><code>var shouldPlayAgain = true
while shouldPlayAgain {
    ...

    shouldPlayAgain = ...
}
</code></pre>

<p>You might do:</p>

<pre><code>var shouldPlayAgain: Bool
repeat {
    ...

    shouldPlayAgain = ...
} while shouldPlayAgain
</code></pre>

<p>Technically the latter is a tad more efficient, but the main benefit is that it makes your intent (to check at the end) absolutely clear.</p></li>
<li><p>At the end, you appear to want to be printing number of times the game was played, but you’re printing the number of guesses.</p>

<p>E.g. if you played twice, the first time requiring 3 guesses and the second time requiring 4 guesses, do you want to say “you played 2 times” or do you want to say “you guessed a total of 7 times”?</p></li>
</ol>
    </div>