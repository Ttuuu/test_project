<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To me, one of the things worth considering is that a <code>Robot</code> object would be more involved than having just a name.  To that end it would make sense to have a name generator(<code>RobotNameGenerator</code>) to encapsulate the fields and methods relating to generating the name.</p>

<p>For the actual name generating algorithm, a readonly string for the letters and some LINQ extensions, will reduce it to one line:</p>

<pre><code>String.Join("", Enumerable.Range(0, 2)
                          .Select(x =&gt; letters[rnd.Next(26)])
                          .Concat(Enumerable.Range(0, 3)
                                            .Select(x =&gt; (char)(rnd.Next(10) + '0'))))
</code></pre>

<p>Such a generator when put together could look something like this:</p>

<pre><code>private class RobotNameGenerator
{
    private static readonly string letters = "ABCDEFGHIJKLMNOPQRST";
    private static readonly Random rnd = new Random();
    private static readonly HashSet&lt;string&gt; usedNames = new HashSet&lt;string&gt;();
    public static string GetUniqueName(string nameToReplace = "")
    {
        string name = "";
        do
        {
             name = String.Join("", Enumerable.Range(0, 2)
                                              .Select(x =&gt; letters[rnd.Next(26)])
                                              .Concat(Enumerable.Range(0, 3)
                                                                .Select(x =&gt; (char)(rnd.Next(10) + '0'))));
        } while (usedNames.Contains(name));
        usedNames.Add(name);
        if (nameToReplace != "")
        {
            CancelUsedName(nameToReplace);
        }
        return name;
    }
    static void CancelUsedName(string name)
    {
        usedNames.Remove(name);
    }
}
</code></pre>

<p>After some more thought, I came upon an optimization:</p>

<pre><code>name = String.Join("", Enumerable.Range(0, 5)
       .Select(x =&gt; x &lt; 2 ? letters[rnd.Next(letters.Length)] : (char)(rnd.Next(10) + '0')));
</code></pre>
    </div>