<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Adding to the other reviews, here are a few more points.</p>

<h2>Outside-class Functions vs. Methods</h2>

<p><a href="https://stackoverflow.com/questions/8108688/in-python-when-should-i-use-a-function-instead-of-a-method">Here is a long discussion</a> about function and methods. In general, if a function operates only on instances of a class (including its subclasses), it should be a method of that class. In your program, most of the functionality of the three functions <code>decToBase</code>, <code>baseToDec</code>, and <code>karazubaMultiply</code> are closely related to the <code>BN</code> class so it would be more logical to make them methods within the <code>BN</code> class instead.</p>

<ol>
<li>Function <code>decToBase</code> converts an <code>int</code> to a base-<code>b</code> number. This function can become a factory class method (called using <code>BN.&lt;method_name&gt;(...)</code>) and returns a <code>BN</code> object directly rather than a list.</li>
</ol>



<pre><code>class BN:
   ...
   @classmethod
   def from_int(cls, n: int, base: int) -&gt; "BN":
       # ...
       # compute digits
       # ...
       return cls(digits, base)

# Usage:
# a = BN.from_int(1000, 3)
</code></pre>

<p>Note that the type hint <code>-&gt; BN</code> is not supported yet. You need to either use a string as shown above or add <code>from __future__ import annotations</code> at the beginning of your code (only for Python 3.7+, see <a href="https://stackoverflow.com/questions/33533148/how-do-i-specify-that-the-return-type-of-a-method-is-the-same-as-the-class-itsel">this post</a>).</p>

<ol start="2">
<li>Function <code>baseToDec</code> transforms a list representing a base-<code>b</code> number to <code>int</code>. The method <code>getDecimalForm</code> delegates all the task to this function. Unless there is a <em>real need to use this function on other lists rather than just the digits from <code>BN</code> instances</em>, it would be more logical to put all the functionality into <code>getDecimalForm</code>. A better way is to override the <a href="https://docs.python.org/3/reference/datamodel.html#object.__int__" rel="nofollow noreferrer"><code>__int__</code></a> method, and then you can just use <code>int(...)</code> to cast <code>BN</code> objects to int. </li>
</ol>



<pre><code>class BN:
   def __int__(self):
       # Perform computation using self.digits and self.base and return an int


# Usage:
# a = BN(...)
# int_a = int(a)  # Cast using int(...), which implicitly calls a.__int__()
</code></pre>

<ol start="3">
<li>Function <code>karazubaMultiply</code> receives two ints, converts them to <code>BN</code> objects, performs Karatsuba multiplication, and then converts the objects back to <code>int</code>. Note that the core multiplication part is actually performed on <code>BN</code> objects. Therefore, this part of logic should be really extracted into <code>BN.__mul__</code>:</li>
</ol>



<pre><code>class BN:
    def __mul__(self, other):
        # Implements Karatsuba algorithm and returns a new BN object
</code></pre>

<p>And the remaining part of the logic can be kept in another function:</p>

<pre><code>def multiply_int_karatsuba(num1, num2, base=2**64):
    num1 = BN.from_int(num1, base)
    num2 = BN.from_int(num2, base)
    return int(num1 * num2)
</code></pre>

<p>This organization is a lot more logical.</p>

<h2>Issues in Algorithm Implementation</h2>

<ol>
<li>Padding <code>a.digits</code> and <code>b.digits</code> to the next power of adds quite some performance overhead. For example, if the two numbers both have digit length of <code>33</code>, padding them would result in two length-<code>64</code> numbers and triples the amount of computation (since the algorithm has a complexity of <span class="math-container">\$O(n^{\log_23})\$</span>). The algorithm can work without any padding (see this <a href="https://en.wikipedia.org/wiki/Karatsuba_algorithm#Example" rel="nofollow noreferrer">example</a>). However, you do need to correctly handle addition (for two numbers of different lengths) and the base case (where one of <code>a</code>, <code>b</code> has length 1 while the other can have an arbitrary length) of multiplication.</li>
</ol>

<p>As a side note, when really needed, an easy way to compute the next power of two for an int <code>n</code> is this:</p>

<pre><code>next_power_of_two = 1 &lt;&lt; n.bit_length()  # Equilvalent to 2**n.bit_length() but much more efficient
</code></pre>

<p>Using <code>log</code> for this task is unnecessary and inefficient.</p>

<ol start="2">
<li><p>The algorithm itself is recursive, yet the current implementation does not reflect that at all. Therefore, it is not correct.</p></li>
<li><p>Note that the addition of two numbers can lead to an overflow (see <a href="https://en.wikipedia.org/wiki/Karatsuba_algorithm#Basic_step" rel="nofollow noreferrer">wiki</a>). Therefore, in the <code>__add__</code> method, the last carry also needs to be carefully handled.</p></li>
</ol>
    </div>