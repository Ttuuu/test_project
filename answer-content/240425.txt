<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Think about edge cases</h2>

<p>Although the original problem statement doesn't mention it (nor the test cases provided), I can think of at least two kinds of edge cases:</p>

<ul>
<li>Handling extraneous spaces (leading spaces, trailing spaces, or multiple spaces between words, e.g. <code>__I___like__blanks___</code>)</li>
<li>Handling capitalization (e.g. <code>Creep -&gt; eepCray</code> or <code>Eepcray</code>?)</li>
</ul>

<p>Notably, your solution does not preserve spaces (except for single space between words) while <a href="https://codereview.stackexchange.com/a/240417/182436">Adám's regex solution</a> preserves all spaces. How would you preserve spaces without regex? There are multiple ways to chunk a string into words, preserving spaces:</p>

<ul>
<li>Allow multiple leading blanks on each word: <code>'__I' '___like' '__blanks' '___'</code>. Alternatively, allow multiple trailing blanks: <code>'__' 'I___' 'like__' 'blanks___'</code>.</li>
<li>Allow single leading (resp. trailing) blank on each word: <code>'_' '_I' '_' '_' '_like' ...</code>.</li>
<li>Allow blanks to form their own chunks: <code>'__' 'I' '___' 'like' ...</code>. See <a href="http://dfns.dyalog.com/n_words.htm" rel="nofollow noreferrer"><code>dfns.words</code></a>.</li>
</ul>

<p>Each choice can make some parts easy but some other parts harder. Be sure to explore various possibilities and pick the one you like the most.</p>

<h2>Nitpicking: Avoid unnecessary <code>⍸</code></h2>

<p>In your code, <code>¯1+⊃⍸</code> is essentially counting leading zeros on a boolean array. But the monadic <code>⍸</code> is pretty heavy, and requires <code>⎕IO</code> adjustment. <a href="https://aplcart.info/?q=leading%20zero#" rel="nofollow noreferrer">APLcart</a> gives the entry <code>(⊥⍨0=⌽)Bv</code> for the query "leading zero". By unpacking the train, you can use boolean negation <code>~</code> instead of <code>0=</code>:</p>

<pre><code>⍝ Instead of this
¯1+⊃⍸ ⍵∊vowels
⍝ Do this
⊥⍨⌽ ~⍵∊vowels
</code></pre>

<p>Note that <code>⊥⍨</code> on a boolean vector is a (very clever) idiom for "count trailing ones".</p>
    </div>