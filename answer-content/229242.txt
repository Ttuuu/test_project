<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Hash code collisions</h3>

<p>There's a problem with <code>Commit</code>: matching hash codes do not mean that two objects are equal ('pigeonhole principle'). For example, both <code>[1, 0]</code> and <code>[0, 31]</code> have hash code 31. You can only be sure that objects are not equal when their hash codes don't match - the inverse is not true.</p>

<p>Also, are you sure that reusing arrays is worth the effort? If <code>filesCount</code> is small, then the savings are small as well, and if <code>filesCount</code> is large, then the likelyhood that a specific state has occurred before is probably very small.</p>

<h3>Multiple smaller arrays</h3>

<p>One alternative is to divide the state into multiple smaller arrays. This limits the impact of individual changes: you only need to copy a 'sub-array' (and create a new 'array-of-arrays'), instead of copying the full state. This also increases the likelyhood that a particular sub-array has occurred before, although I do not think that is something you need to be concerned about.</p>

<p>In Git terms, this is similar to using multiple files instead of a single large file. Committing changes to a single file only creates a new blob for the modified file and a new tree object that references the new blob (and older blobs for unmodified files).</p>

<h3>Change-sets</h3>

<p>Another alternative is to store a change-set for each value, using a binary search to find the value for a particular commit number. This can save a lot of space, but it'll make checkouts slower. Whether that trade-off is worth it depends on the intended use of this class.</p>

<h3>Other notes</h3>

<ul>
<li>Instead of <code>Clone() as int[]</code>, you can use Linq's <code>ToArray()</code> method.</li>
<li>I'd put the last 4 lines of <code>Commit</code> inside an <code>else</code> statement, to make it clearer that these are two mutually exclusive paths.</li>
<li>On the other hand, I would not use an <code>else</code> statement in <code>Checkout</code> - the <code>if</code> check is an 'early-out' guard clause, not a full-blown separate path.</li>
<li>In <code>Checkout</code>, an <code>ArgumentOutOfRangeException</code> might be better suited. You may also want to guard against negative values. And why not check for invalid file numbers as well?</li>
</ul>
    </div>