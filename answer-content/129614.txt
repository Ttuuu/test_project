<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd try a more <strong>top-down</strong> approach. At the moment, you make a lot of internal information of a <code>Chocolate</code> object available to <code>public</code> in order to do some calculation and decision making outside that class.</p>

<p>Your method <code>numberOfChildrenThatCanBeFedFromTheChocolate</code> for example deals with blocks of chocolate. A block of chocolate is the atomic element a chocolate bar is made from. The problem here is that <strong>the question doesn't ask for chocolate blocks</strong>. Sure, the number of blocks and how they are positioned in a grid determines how often a square can be broken off the chocolate bar, but thinking about it in terms of blocks is a <strong>bottom-up</strong> way of thinking. I as the user of your class could not care less about blocks. The problem asks for squares, not blocks. <strong>Why do I have to deal with blocks when using your class?</strong></p>

<p>If you <strong>model the data/code according to the question</strong>, you get a more top-down approach, which is more abstract, but easier to digest.</p>

<p>You have a chocolate bar in your hand. You can break off a square piece and be left with a different sized chocolate bar or nothing. <strong>You don't really care about the size of the square broken off or the remainder.</strong> All you really care about is how often you can perform that action until there's no chocolate bar remaining. Of course you have to care about it internally somehow, but again, this is top-down thinking. Look at how your class (its objects) should be used</p>

<p>Another idea that you can use to your advantage is <strong>information hiding</strong>. As it turns out, the logic is often concerned with <strong>what's the longer side and what's the shorter one</strong>. Then why not store exactly that information? </p>

<p>Here's a version of <code>Chocolate.java</code> that works with the ideas mentioned above:</p>

<pre><code>public class Chocolate
{
    private int min;
    private int max;

    public Chocolate(int width, int height)
    {
        min = Math.min(width, height);
        max = Math.max(width, height);
    }

    public Chocolate remainderAfterSquareBreakoff()
    {
        if ((min == 1 &amp;&amp; max == 1) || min == max)
        {
            return null;
        }

        return new Chocolate(max - min, min);
    }

    public static void main(String[] args)
    {
        Chocolate chocolate = new Chocolate(6, 3);

        int numberOfSquares = 0;

        do
        {
            ++numberOfSquares;

            chocolate = chocolate.remainderAfterSquareBreakoff()
        }
        while (chocolate != null);

        System.out.println("# squares: " + numberOfSquares);
    }
}
</code></pre>

<p>The two important things are:</p>

<ol>
<li>Count how often a square can be broken off until no remainder remains. This is very close to how you would break the chocolate in real life and is thus hopefully intuitive and easy to understand.</li>
<li>The size of the chocolate is stored in terms of longest and shortest side, not width and length.</li>
</ol>

<p>You use <strong>long descriptive names for your methods</strong>, which is <strong>good</strong>. But you have so much logic outside of the <code>Chocolate</code> class that you need many such long descriptive names to keep track of everything. That bloats the code and reduces readability. <strong>With only a few things exposed to <code>public</code>, the code becomes less bloated and you need fewer identifiers.</strong></p>

<p>This is clearly not providing the same functionality that your code has. Most importantly, the following doesn't hold any more:</p>

<blockquote>
  <p>Each Chocolate bar in carton is unique in length (i) and breath(j).</p>
</blockquote>

<p>By only storing them as longest and shortest side, <strong>the orientation is lost</strong>. I'd say the orientation is not necessarily necessary to solve the task at hand. The <strong>problem only arises if a <code>Set</code> should be used to store the <code>Chocolate</code> objects</strong>, because you <strong>cannot define an <code>equals()</code> method</strong> to distinguish two objects only by their <code>max</code> and <code>min</code> properties. If you put them into a different data structure that does not require uniqueness like <code>ArrayList</code> for example, everything is fine.</p>

<p>If you insist on uniqueness and the use of <code>Set</code>, you can add another property <code>isLandscapeFormat</code> which can then be used to distinguish between different orientations.</p>

<pre><code>public class Chocolate
{
    private int min;
    private int max;

    private boolean isLandscapeFormat;

    public Chocolate(int width, int height)
    {
        min = Math.min(width, height);
        max = Math.max(width, height);

        isLandscapeFormat = width &gt; height;
    }
</code></pre>

<hr>

<p>And now for something completely different.</p>

<p>The above assumes that you don't care about what square is broken off the bar. It also makes it necessary to reassign the return value of the method to the <code>chocolate</code> object.</p>

<p><strong>A more common approach for this call-method-until-null-is-returned structure is an iterator</strong>.</p>

<p>Here's a different version of <code>Chocolate.java</code> that incorporates that principle.</p>

<pre><code>public class Chocolate
{
    private int min;
    private int max;

    public Chocolate(int width, int height)
    {
        setMinMax(width, height);
    }

    private void setMinMax(int a, int b)
    {
        min = Math.min(a, b);
        max = Math.max(a, b);
    }

    public boolean hasNextSquare()
    {
        return min &gt; 0 &amp;&amp; max &gt; 0;
    }

    public Chocolate getNextSquare()
    {
        if (!hasNextSquare())
        {
            return null;
        }

        setMinMax(max-min, min);

        return new Chocolate(min, min);
    }

    public static void main(String[] args)
    {
        Chocolate chocolate = new Chocolate(5, 3);

        int numberOfSquares = 0;

        while(chocolate.hasNextSquare())
        {
            ++numberOfSquares;

            chocolate.getNextSquare();
        }

        System.out.println("# squares: " + numberOfSquares);
    }
}
</code></pre>

<p>The important differences are:</p>

<ol>
<li>The new method <code>setMinMax</code>, which I introduced because its logic is now necessary at multiple places in the class. Creating a <code>method</code> prevents duplicated code.</li>
<li>The method <code>hasNextSquare</code>. As long as there is still one block remaining, a square can be broken off. As long as that's the case, this method will return true;</li>
<li><code>getNextSquare</code>, which breaks off the next square from the bar.</li>
<li><p>The while loop to iterate over all the squares:</p>

<pre><code>while(chocolate.hasNextSquare())
{
    ++numberOfSquares;

    chocolate.getNextSquare();
}
</code></pre>

<p>The idea is still the same: break off squares as long as that's possible. But now <strong>the square is explicitly returned</strong> and can be used in the program.</p></li>
</ol>

<p>There are more fancy ways to create iterators, with <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html" rel="noreferrer">an interface to be implemented</a>, but for this simple example, I think it is sufficient to provide a <code>hasNext()</code> and <code>getNext()</code> method, which implicitly removes the returned object.</p>
    </div>