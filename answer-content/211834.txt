<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Good documentation</h2>

<p>Every time I wanted to say "but it behaves badly in case ...", I found specification disallowing that case. One nitpick might be that "with one or more columns" could be explicitly written as "<em>requires</em> at least one column". The only thing left is to pray that people will read it.</p>

<h2>Pass by const reference for only read purposes</h2>

<p>Copying non-scalar and heavy data structures (strings, vectors) might incur significant overhead. Prefer to pass by const reference.</p>

<h2>Check if file is opened</h2>

<p>The check is performed when reading, but not performed when writing.</p>

<h2>Do not use at() unless exception-throwing version is desired</h2>

<p><code>.at()</code> incurs overhead by performing in-range check, and also throws if out of range. </p>

<h2>Use emplace back to construct and push in place</h2>

<pre><code>result.push_back({colname, std::vector&lt;int&gt; {}});
</code></pre>

<p>This could be rewritten as</p>

<pre><code>result.emplace_back(colname, std::vector&lt;int&gt; {});
</code></pre>

<p>From C++17, if I'm not mistaken, the two are equivalent due to copy elision, but emplace version is a bit clearer.</p>

<h2>Improve printing algorithm</h2>

<p>This is a general problem of string joining. <a href="https://codereview.stackexchange.com/a/142912/93301">This answer</a> shows a great implementation for a simple case. One can remove templates from them if needed.</p>

<h2>Do not explicitly close file</h2>

<p>Destructor of <code>std::ifstream</code> and of it's twin automatically close the file.</p>

<h2>Create type alias where useful</h2>

<pre><code>using column = std::pair&lt;std::string, std::vector&lt;int&gt;&gt;;
</code></pre>

<p>would save users a lot of typing.</p>

<h2>Use locales for reading from csv</h2>

<p>Whenever I want casual reading of csv files I just copy/paste from <a href="https://stackoverflow.com/a/25225612/4593721">this asnwer</a> and march on.</p>

<h2>Unreliable reading algorithm</h2>

<p>I would be a bit worried to use it as is. It tends to assume the layout to be the same as in writing, but I'm afraid edge cases slip in and hit like a truck. This is one of the rare cases when enabling exceptions on the stream might be a good idea.</p>

<hr>

<h2>Architecture for generic reading/writing</h2>

<p>I don't think implementing reading algorithm is a viable option, because it involves extreme amounts of error checking to be useful. As for writing:</p>

<ul>
<li><p>Upstream and downstream invariances</p>

<p>Upstream invariance in this case is CSV format, which the final output has to obey. Downstream invariance is requirements on the result of object getting streamed (<code>file &lt;&lt; myObject</code>). One will need to specify the requirements on data type very clearly and with great scrutiny. For example, if one wants to accept <code>std::string</code> as data type, the user has to override default streaming for the type, which pulls them into realm of undefined behavior. This functionality clearly requires a lot of thought put into it in order to be correct and robust.</p></li>
<li><p>Data layout</p>

<p>This is one is just a speculation, but the way data is stored might be problematic in terms of performance. It would be better to create a data structure that stores headers, and then stores values row-wise. Access could be done by using header value as first subscript, and row index as second subscript. Horizontal offset can be saved for each header value to access the right cell in a row. This also would be a great learning exercise.</p></li>
</ul>
    </div>