<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Interpreting the problem as a path on a graph:</h2>

<p>The problem can be interpreted as trying to find a path (from S to T) in a graph.</p>

<p>E.g.</p>

<p><a href="https://i.stack.imgur.com/Mvh1s.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Mvh1s.jpg" alt="enter image description here"></a></p>

<h2>Genetic Algorithm improvements</h2>

<p>There are several techniques to mitigate your problems:</p>

<ul>
<li><strong>Divide the problem into two smaller ones</strong>, You could first find the path on the graph and then given a valid path, you can find the action that builds that path.</li>
<li><a href="http://www.ijmlc.org/papers/146-C00572-005.pdf" rel="nofollow noreferrer">Blending Roulette Wheel Selection &amp; Rank Selection</a>, basically it's a better way to select the population that tries to balance exploitation and exploration.</li>
<li><strong>Add a heuristic to the fitness function</strong>, you could use the <a href="https://en.wikipedia.org/wiki/Taxicab_geometry" rel="nofollow noreferrer">L1 distance</a> from the current end of the path and the target square. This way you simulate the <a href="https://en.wikipedia.org/wiki/A*_search_algorithm" rel="nofollow noreferrer">A* algorithm</a>.</li>
<li><a href="https://en.wikipedia.org/wiki/Genetic_algorithm#Elitism" rel="nofollow noreferrer">Elitism</a>, basically you keep untouched the best 5~10% of the population. This is meant to avoid regression.</li>
</ul>

<h2>Optimal Solution (No genetic algorithm)</h2>

<p>This might be kind of offtopic, but if you don't need to use a Genetic Algorithm you can use Dynamic Programming to find the optimal solution.</p>

<p>If we set a constant weight on all the edges we can use <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" rel="nofollow noreferrer">Dijkstra's algorithm</a> to find the solution that requires the least amount of belts.
<a href="https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/" rel="nofollow noreferrer">Here a quite clear C++ implementation</a>.</p>

<p>Once you have the optimal solution, it shouldn't be hard to build the sequence of actions that build that path.</p>

<p>If the problem became <strong>really big</strong>, you could use <a href="https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms" rel="nofollow noreferrer">Ant System</a>, which could be viewed as a hybrid between a pathfinding algorithm and a genetic algorithm.</p>
    </div>