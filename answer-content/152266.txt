<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The biggest thing I would change is to return the connection to the state you found it.</p>

<pre><code>bool isOpen = cmd.Connection.State == ConnectionState.Open;
if (!isOpen)
{
    cmd.Connection.Open();
}

await cmd.ExecuteNonQueryAsync();

if (!isOpen)
{
    cmd.Connection.Close();
}
</code></pre>

<p>Then, from there, I would create a helper method to build the <code>SqlParameter</code> objets for you:</p>

<pre><code>private SqlParameter BuildParamter(string name, SqlDbType type, object value, ParameterDirection? direction)
{
    var parameter = new SqlParameter(name, type);

    if (value != null)
    {
        parameter.Value = value;
    }

    if (direction.HasValue)
    {
        parameter.Direction = direction.Value;
    }

    return parameter;
}
</code></pre>

<p>Then your parameters go from:</p>

<blockquote>
<pre><code>cmd.Parameters.Add(new SqlParameter("@phoneNumber", SqlDbType.NVarChar) { Value = phoneNumber });
cmd.Parameters.Add(new SqlParameter("@dateOfBirth", SqlDbType.Date) { Value = dateOfBirth });

cmd.Parameters.Add(new SqlParameter("@registered", SqlDbType.Bit) { Direction = ParameterDirection.Output });
</code></pre>
</blockquote>

<p>To:</p>

<pre><code>cmd.Parameters.Add(BuildParameter("@phoneNumber", SqlDbType.NVarChar, phoneNumber));
cmd.Parameters.Add(BuildParameter("@dateOfBirth", SqlDbType.Date, dateOfBirth));

cmd.Parameters.Add(BuildParameter("@registered", SqlDbType.Bit, null, ParameterDirection.Output));
</code></pre>

<p>It's less verbose, but if you build a lot of <code>SqlParameter</code> objects it might be handy to have one method you can use for all of them. (You can optionally add a <code>int? size</code> parameter to the method as well.)</p>

<p>Then, extract a <code>SetStoredProcedure</code> method which would take the input <code>SqlCommand</code> and <code>string</code>, set the type and command text to <code>"dbo." + name</code>, then you add the parameters, then <code>ExecuteStoredProcedure</code> would do the connection checking and then you can return your <code>cmd.Parameters["@registered"].Value</code> as you are. In the end something like:</p>

<pre><code>SetStoredProcedure("CheckIfUserRegistered", cmd):

cmd.Parameters.Add(BuildParameter("@phoneNumber", SqlDbType.NVarChar, phoneNumber));
cmd.Parameters.Add(BuildParameter("@dateOfBirth", SqlDbType.Date, dateOfBirth));

cmd.Parameters.Add(BuildParameter("@registered", SqlDbType.Bit, null, ParameterDirection.Output));

ExecuteStoredProcedure(cmd);

return (bool)cmd.Parameters["@registered"].Value;
</code></pre>

<p>Optionally with your <code>async</code>/<code>await</code> pattern.</p>

<p>This way, if you create more stored procedures it's less work to make them operate.</p>
    </div>