<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>inline unsigned char unsigned_isspace(char c)
{
    return isspace(static_cast&lt;unsigned char&gt;(c));
}
</code></pre>
</blockquote>

<p>Misspelt <code>std::isspace</code>, and forgot to include <code>&lt;cctype&gt;</code>.</p>

<p>A simpler implementation would just use the argument type to convert <code>c</code>:</p>

<pre><code>inline bool unsigned_isspace(unsigned char c)
{
    return std::isspace(c);
}
</code></pre>

<hr>

<blockquote>
<pre><code>    std::ifstream ifs{ filename };
    if (!ifs) {
        throw std::runtime_error("void read_words_from_file(const std::string&amp; filename)\nFile could not be opened\n");
    }
</code></pre>
</blockquote>

<p>Perhaps <code>std::filesystem_error</code>?</p>

<hr>

<blockquote>
<pre><code>    if (isdigit(static_cast&lt;unsigned char&gt;(x))) {
</code></pre>
</blockquote>

<p><code>std::isdigit</code></p>

<p>Instead of writing a loop, you could use <code>std::any_of</code> algorithm.</p>

<hr>

<blockquote>
<pre><code>for (auto it = cleaned_word.begin(); it != cleaned_word.end();)
{
    if (std::find(invalid_signs.begin(), invalid_signs.end(), *it) != invalid_signs.end()) {
        it = cleaned_word.erase(it);
    }
    else{
        ++it;
    }
}
</code></pre>
</blockquote>

<p>Why not erase-remove, as in <code>remove_whitespace</code> immediately following?  You could implement it like this:</p>

<pre><code>Word remove_invalid_signs(Word word,const std::string&amp; invalid_signs)
        // replace invalid signs with whitespace
    {
        auto is_invalid = [&amp;](char c){ return invalid_signs.find(c) != std::string::npos; };
        word.erase(std::remove_if(word.begin(), word.end(), is_invalid), word.end());
        return word;
    }
</code></pre>

<p>(Note: I changed <code>word</code> from a const-ref to a value, since we only used it to copy from).</p>

<hr>

<pre><code>    for (auto&amp; letter : clean_word) {
        letter = std::tolower(letter);
    }
</code></pre>

<p>We need to launder <code>letter</code> through <code>unsigned char</code>, as we do for <code>std::isspace()</code> and <code>std::isdigit()</code>.</p>

<hr>

<p>In each of <code>most_frequent_word()</code>, <code>longest_word()</code> and <code>shortest_word()</code> we have both:</p>

<blockquote>
<pre><code>    if (words_with_occurences.empty()) return std::nullopt;
</code></pre>
</blockquote>

<p>And:</p>

<blockquote>
<pre><code>    if (most_frequent == words_with_occurences.end()) {
        return std::nullopt;
</code></pre>
</blockquote>

<p>We need only one of those tests!</p>

<hr>

<p><strong>Removed</strong>: the return type is an array of a different kind to the input type; we need a range adapter to turn a map's iterator into an iterator of its keys.</p>

<p><s>In <code>words_starting_with()</code>:</s></p>

<blockquote>
<pre><code>    for (const auto&amp; word : words_with_occurences) {
        if (word.first.substr(0, begin_of_word.size()) == begin_of_word) {
            matched_words.push_back(word.first);
        }
    }
</code></pre>
</blockquote>

<p>That loop could be a <code>std::copy_if()</code>; similarly for <code>words_with_length()</code>.</p>

<hr>

<blockquote>
<pre><code>    if (length &lt; 0) {
        throw std::runtime_error(
            "std::vector&lt;Word&gt; words_with_length(Length length, const std::map&lt;Word, Occurences&gt;&amp; words_with_occurences)\nlength must be positive\n");
    }
</code></pre>
</blockquote>

<p><code>length</code> is an unsigned type, so cannot be less than <code>0</code>.</p>

<hr>

<p>The common code in the functions that return a vector of words could be refactored out:</p>

<pre><code>template&lt;typename Pred&gt;
std::vector&lt;Word&gt; words_matching(const std::map&lt;Word, Occurences&gt;&amp; words_with_occurences,
                                 const Pred&amp; predicate)
{
    std::vector&lt;Word&gt; matched_words;
    for (auto const&amp; x: words_with_occurences) {
        if (predicate(x.first)) {
            matched_words.push_back(x.first);
        }
    }
    return matched_words;
}

std::vector&lt;Word&gt; words_starting_with(const Word&amp; begin_of_word, const std::map&lt;Word, Occurences&gt;&amp; words_with_occurences)
{
    return words_matching(words_with_occurences, [&amp;begin_of_word](const Word&amp; word) {
            return word.compare(0, begin_of_word.size(), begin_of_word, 0) == 0;
        });
}

std::vector&lt;Word&gt; words_with_length(Length length, const std::map&lt;Word, Occurences&gt;&amp; words_with_occurences)
    //all words with n letters
{
    return words_matching(words_with_occurences, [&amp;length](const Word&amp; word) {
            return word.size() == length;
        });
}
</code></pre>

<hr>

<blockquote>
<pre><code>    std::vector&lt;Word&gt; a = { "are", "not" };
    std::vector&lt;Word&gt; b = remove_contractions("aren't");

    ASSERT_EQ(a.size(), b.size());

    for (std::vector&lt;Word&gt;::size_type i = 0; i &lt; a.size(); ++i) {
        ASSERT_EQ(a[i], b[i]);
    }
</code></pre>
</blockquote>

<p><code>std::vector</code> has a working <code>==</code> operator, so that test can be simply</p>

<pre><code>    ASSERT_EQ(a, b);
</code></pre>

<hr>

<blockquote>
<pre><code>    ASSERT_TRUE(2, res.size());
</code></pre>
</blockquote>

<p>I think that should be </p>

<pre><code>    ASSERT_EQ(2, res.size());
</code></pre>
    </div>