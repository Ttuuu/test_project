<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How's my style?</p>
</blockquote>

<p>The style looks fine, though as <a href="https://codereview.stackexchange.com/users/1149/barry-carter">Barry Carter</a> mentioned in a comment, the definition of functions inside functions (in the <a href="https://codereview.stackexchange.com/revisions/177699/1">first version</a>) isn't very elegant. Perhaps the <code>shuffle()</code> function should be moved outside the <code>assignGiftPartners</code> function.</p>

<p>The usage of functional techniques (e.g. <code>.foreach()</code>, <code>.map()</code>) is good. If you really wanted to, you could potentially implement the logic in the <code>while</code> statement with a <code>foreach</code>.</p>

<p>One thought I had about the data storage is that each object could have an <em>id</em> property and the functions could utilize those <em>id</em> values, which might allow for integer comparison instead of string comparison.</p>

<blockquote>
  <p>Could it use more built-in JavaScript functions?</p>
</blockquote>

<p>Yes. Because you added the <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> tag, I did a quick search for "<em>js knuth shuffle ES-6</em> " and found <a href="https://stackoverflow.com/a/12646864/1575353">this SO answer</a> which uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Swapping_variables" rel="nofollow noreferrer">destructuring assignment</a> to perform the swap. If you read through the comments on that answer, you will notice some discussion of the bias introduced by the change. To read more about this, see the article cited in one of those comments: <a href="https://blog.codinghorror.com/the-danger-of-naivete/" rel="nofollow noreferrer"><em>The Danger of Naïveté</em></a>.</p>

<pre><code>const shuffleArray = (array) =&gt; {
    for (var i = array.length - 1; i &gt; 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
};
</code></pre>

<p>That could replace that <code>shuffle</code> function you added. Notice it uses the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> keyword instead of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer"><code>var</code></a>, since we <em>likely</em> won't need that function to output anything differently within the runtime of our program. </p>

<p>And it appears that function is called even when there is only one element in the array. While it likely won't save much computation time to have a <em>for</em> statement loop over an array element with one element, it would be beneficial to avoid the function call in that case. Check that the array <code>choice</code> has more than 1 element:</p>

<pre><code>if (choices.length &gt; 1) {
    shuffleArray(choices);
}
</code></pre>

<p>You could also simplify the functions <code>verifyGiftPartners()</code> and <code>setCurrentToBlank</code> using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow functions</a> (like you did for <code>var peopleLeftToAssign</code>).</p>

<pre><code>const verifyGiftPartners = (people) =&gt; people.filter((person) =&gt; !person.current).length &lt;= 0;

const setCurrentToBlank = (people) =&gt; people.forEach((person) =&gt; person.current = '');
</code></pre>

<p>Additionally, instead of checking gift partners with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="nofollow noreferrer"><code>.filter()</code></a> and comparing the length, you could possibly use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" rel="nofollow noreferrer">Array.every()</a></p>

<pre><code>const verifyGiftPartners = (people) =&gt; people.every((person) =&gt; person.current);
</code></pre>
    </div>