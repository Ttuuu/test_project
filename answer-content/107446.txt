<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Don't use <code>using namespace std;</code>. Seriously</strong></p>

<p>The lack of <code>std::</code> implies you have <code>using namespace std;</code> in a header somewhere. This is bad for the following reasons:</p>

<ul>
<li><p>Having it localized to one translation unit is one thing, but putting it into a header propogates it to whoever chooses to include your header. This is a Bad Thingâ„¢ in of itself.</p></li>
<li><p>Many trivial programs will not suffer from name conflicts; but a program that deals with shapes and drawing increases the chances you'll have a name conflict like <code>distance</code> or <code>vector</code>.</p></li>
<li><p>Using a third party library (if you are) increases the chances of conflicts exponentially. If you wrote it yourself, consider a namespace akin to <code>std</code> or <code>sfml</code>.</p></li>
</ul>

<p><strong>Where are your newlines and spaces?</strong></p>

<p>Your code is incredibly hard to read. I'm not going to tell you specifically how you should format your code, but at least consider formatting it to increase readability.</p>

<p><strong><code>emplace_back</code> over <code>push_back</code></strong></p>

<p><code>push_back</code> will delegate to <code>emplace_back</code>. The advantage <code>emplace_back</code> has over <code>push_back</code> is that it will forward the arguments to the constructor, so you don't have to specify the type.</p>

<pre><code>polyEdges.emplace_back(last, first);
</code></pre>

<p><strong>Explain your algorithm; choose better variable names</strong></p>

<p><code>intersectPoint</code> is incredibly difficult to read. <code>p0_x</code> is easy to deduce, but what is <code>s1_x</code>? What is this line doing?</p>

<pre><code>s = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / (-s2_x * s1_y + s1_x * s2_y);
</code></pre>

<p>Even putting the name of the algorithm in a comment will give the reader enough context to figure it out.</p>

<p><strong>Redundancy</strong></p>

<p>You have wrapper functions that pass arguments along but this is pointless. Why duplicate the interface? As you can imagine, the more granular you get, the more bloated your interface will be.</p>
    </div>