<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this case, if performance are not a MEASURED issue (read: you're not generating 1,000,000 passwords) then I'd definitely pick the most readable version.</p>

<p>It might even be something like this (completely and absolutely untested) which - in average - should also perform better than original implementation:</p>

<pre><code>using (var rng = new RNGCryptoServiceProvider())
{
    var buffer = new byte[length * 5];

    var password = new StringBuilder(length);
    while (password.Length &lt; length)
    {
        rng.GetBytes(buffer);
        password.Append(buffer
            .Select(x =&gt; (char)x)
            .Where(Char.IsLetterOrDigit)
            .Take(length - password.Length)
            .ToArray()
        );
    }
}
</code></pre>

<p>Notes:</p>

<ul>
<li>Decision to use <code>length * 5</code> is arbitrary (you take only 58 values from the 256 possible). For small strings there are good chances that it doesn't work well, run this few thousands times and see how many times one call to <code>GetBytes()</code> is not enough.</li>
<li>It performs pretty well (<code>GetBytes()</code> overhead is - typically - payed only once) and you're not building lists of expensive structures (<code>StringBuilder</code> is highly optimized to build strings).</li>
<li>It should be slightly more fast than base64 encoding (which otherwise is a clever idea).</li>
<li>It's really easy to optimize for the best case scenario adding some more code (for example when <code>ToArray()</code> returns the required string you can avoid <code>StringBuilder()</code> - and its initial allocation - all together).</li>
<li>It scales well (parallel generation of N passwords or even generation of a huge password in parallel from M chunks).</li>
<li>Given that your input is a single byte then you can use <code>Char.IsLetterOrDigit</code> directly because all the other non Latin letters and digits are &gt; 255 when UTF-16 encoded).</li>
</ul>

<p>The very next (or previous?) step is to test this code. Can you reliably an extensively test a function which uses a random number generator? Hardly. t3schb0t covers this aspect in <a href="https://codereview.stackexchange.com/a/207244/13424">his answer</a>.</p>

<p>Are we done? There are some security concerns you should consider, see last section.</p>

<hr>

<p>As you did imagine <code>goto</code> is the controversial part of your code. Let me address this separately because, it seems, you're prone to use it.</p>

<p><code>goto</code> usually hurts legibility and you're also (probably) preventing some optimizations compiler might do. Depending where in the compiler pipeline the optimization is applied (near the front-end where <code>goto</code> and <code>if</code>/<code>else</code> differ, or near the back-end - or even after JIT - where they already generated the exact same code) a compiler is probably not optimizing <code>goto</code> (because it's uncommon to be worth of the time and when you're using it then you know what you're doing). In short: if it's because of performance than 99/100 compiler can do a better job than you.</p>

<p>I'm not saying that there are not use-cases (there are) but hey're so rare that hat you may live without writing a <code>goto</code> for most of your career (with few more chances for its little brother <code>goto case</code>). Please <strong>do not generalize this to every language</strong>, in C - for example - it might be useful for clean-up code and error handling but in higher level languages we have other powerful tools.</p>

<p>Does it make the code shorter or more readable? In your specific case, even without changing anything else, the very same code might be rewritten as:</p>

<pre><code>while (chars.Count &lt; length)
{
    rng.GetBytes(buffer);
    char nextChar = (char)buffer[0];

    if (Char.IsLetterOrDigit(nextChar))
        chars.Add(nextChar);
}
</code></pre>

<p>What did we do? We moved some logic into a separate function, this has two advantages:</p>

<ul>
<li>It makes logic easier to follow because we can <em>read</em> the function name instead of <em>understanding</em> the code.</li>
<li>If frees us from the <em>need</em> of that <code>goto</code> because we can reduce those multiple <code>if</code>s.</li>
</ul>

<p>What if there wasn't <code>Char.IsLetterOrDigit()</code>? You write your own and 90% you will get rid of those jumps. There are more things in the original code (beside <code>goto</code>): <code>counter</code> is useless, you can use an array instead of a linked list (size is known), it's preferable to avoid <code>var</code> for primitive types, you're hard-coding <em>magic</em> constants, and...you're reducing the entropy of the generated password.</p>

<hr>

<h1>Security considerations</h1>

<p>You're correctly using <code>RNGCryptoServiceProvider</code> to generate the random numbers however you're not using a proper one-to-one encoding algorithm to transform those numbers into text. Simply dropping some values reduces the entropy. This is unavoidable if you want a fixed length alphanumeric string. </p>

<p>However if your goal is to generate a password with the desired amount of entropy then for this step you should use base62 (as elsewhere suggested base64 for performance reasons), a Diceware algorithm, or a perfect hash function (no, you can't use modulus for this because it, obviously, has multiple collisions).</p>
    </div>