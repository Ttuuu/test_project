<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Start with a comment telling what problem your code solves, possibly the algorithm you used, and a link to relevant references. You might want to quote part of them too!</p></li>
<li><p>You don't use anything from <code>&lt;algorithm&gt;</code>, so you should not include it. Well, if you follow the other tips, you will end up using it, but need <code>&lt;vector&gt;</code> and <code>&lt;utility&gt;</code> instead of <code>&lt;map&gt;</code>.</p></li>
<li><p>If you use constants, typedefs, preprocessor-symbols or the like to ease some customization or tuning, put them as early as possible, but after the includes.</p></li>
<li><p>Use the nomenclature of the reference, the subject-area if no reference, use descriptive names, or at least idiomatic ones.<br>
But refrain from inventing your own ad-hoc shorthand, that's cryptic instead of poignant.</p></li>
<li><p>There's nothing wrong with defining multiple variables at once, in principle.<br>
But they should be a single declaration, not multiple ones separated by semicolon.</p></li>
<li><p>Consider inserting a newline between sections to help readers easily find them.</p></li>
<li><p>Remember that input is often wrong. So check, or for such a short script, maybe enable exceptions on error.</p></li>
<li><p>Using a <code>std::map</code> works. But it's strictly speaking the wrong data-structure considering the access-pattern. Use a <code>std::vector&lt;std::pair&lt;int, val_type&gt;&gt;</code>, possibly with a call to <code>.reserve(2 * m)</code> to avoid re-allocation, and then do a <code>std::sort()</code>.</p></li>
<li><p>Even the last line of output should be terminated with a new-line. Shells expect that, as do many other programs, and most users.</p></li>
<li><p><code>return 0;</code> is implicit in <code>main()</code>, so no need to write it.</p></li>
</ol>
    </div>