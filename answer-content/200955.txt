<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Reformat code</h1>
<p>Try to use IDE options where you can reformat code, right now it is hard to read. There is everything in one place.</p>
<h1>Create small functions</h1>
<p>Right now, your code is a one big function. Firstly, divide your code into small functions that are doing one thing. You could end up with 10 or 15 really small functions. After that, thing about functions that are similar to each other, they are part of one bigger responsibility. You might be able to see some "objects" and create appropriate classes.</p>
<h1>Hardcoding values</h1>
<p>You have code like this</p>
<p><code>std::ifstream file("C:\\Users\\MyPC\\Desktop\\Programs\\Seals.csv");</code></p>
<p>This can be done for example using command line arguments. You will be passing path to file when you start running your program, that will be much more flexible.</p>
<p>Next examples of hardcoding values</p>
<pre><code>std::cout &lt;&lt; database[sealChoice][14] &lt;&lt; std::endl;
while (switchChoice &lt;= 0 || switchChoice &gt;= 4 || std::cin.fail())
</code></pre>
<p>Try to give these every number meaningful name, it will much more easier for readers to understand.</p>
<h1>Strange code</h1>
<p>I cannot get why do you do this</p>
<pre><code>   size_t dbsize = database.size();
   database.resize(dbsize + 1);
</code></pre>
<p>Personally, I use resize in only one case.
Suppose that I know that my container will be filled with 10 numbers, so before starting pushing into the vector I resize to the mentioned size.
You are doing something that will be done better and automatically (no need to write code like this).</p>
<p>Next</p>
<pre><code>int dbval =  static_cast&lt;int&gt;(database.size());
int entryval = static_cast&lt;int&gt;(database[0].size());
</code></pre>
<p>I know that works, but I would go with simply</p>
<pre><code>auto dbval =  database.size();
auto entryval = database[0].size();
</code></pre>
    </div>