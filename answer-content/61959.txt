<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>improvements:</strong></p>

<ol>
<li><p>As rightly pointed by Josay You could use the forEach for iterating over Enum</p></li>
<li><p>Your few method names can be changed like getInterfaceScopeByTime should be renamed to getInterfaceScopeByNearestTime</p></li>
<li><p>in your ENUM getPercent() seems to be unnecessary and it is adding burden on alpha while subtracting it from percentTime() you have to divide the actual value by a constant <code>TARGET_SEARCH_WAIT</code>
intstead use your <code>getTime()</code> for substracting alpha from it .</p></li>
<li><p>Usually code snippets are not best practice to post here. because we have to take extra effort first to make it runnable.(you could have given class with main method or couple of Junits )</p></li>
<li><p>In your shared both methods getInterfaceBase() is not used anywhere so we can remove that .but i suppose you need it somewhere else hence I have kept in below code</p></li>
<li><p>Variable is named as <code>interfaceBase</code> and the parameter to constructor is named as <code>interfaceIdBase</code>. it creates confusion. you could use name <code>interfaceBaseId</code> for both.</p></li>
</ol>

<p><strong>BUG :</strong></p>

<ul>
<li>your getTime() in most cases returns 0 . because you placed int at wrong place .</li>
</ul>

<p>With points mentioned above ,please find the modified code below </p>

<pre><code> package com.study.programs;

public class InterfaceScope {
    private double time= 800;
    public static void main(String args[]){
        InterfaceScope interfaceScope = new InterfaceScope();
        interfaceScope.time =800;
        System.out.println("For time = "+interfaceScope.time+" Nearest Scope ="+interfaceScope.getInterfaceScopeByNearestTime());
        interfaceScope.time =499;
        System.out.println("For time = " + interfaceScope.time + " Nearest Scope =" + interfaceScope.getInterfaceScopeByNearestTime());
        interfaceScope.time =500;
        System.out.println("For time = "+interfaceScope.time+" Nearest Scope ="+interfaceScope.getInterfaceScopeByNearestTime());
    }
    public TargetScope getInterfaceScopeByNearestTime() {
        double delta = 1000;
        TargetScope nearestScope = null;
        for (TargetScope scope :TargetScope.values()) {
            double distance = Math.abs(scope.getTime()-this.time);
            if (distance &lt; delta) {
                delta = distance;
                nearestScope = scope;
            }
        }
        return nearestScope;
    }
}
enum TargetScope {
    CLEAN(1, 5040),
    FIRST(.888, 5046),
    SECOND(.777,5052),
    THIRD(.666,5058),
    FOURTH(.555, 5064),
    FIFTH(.444, 5070),
    SIXTH(.333, 5076),
    SEVENTH(.222, 5082),
    EIGHTH(.001, 5088);
    private static final int TARGET_SEARCH_WAIT = 1000;
    private int interfaceBaseId;
    private double time;

    TargetScope(double time,int interfaceBaseId) {
        this.time = time;
        this.interfaceBaseId = interfaceBaseId;
    }
    public int getTime() {
        return (int) (this.time * TARGET_SEARCH_WAIT);
    }

    public int getInterfaceBaseId() {
        return this.interfaceBaseId;
    }
}
</code></pre>
    </div>