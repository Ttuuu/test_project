<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is how the current project is built acceptable? Is it coded in the most efficient way possible?</p>
</blockquote>

<p>That depends on your definition of effiency. I guess you mean in it OO-Terms, i.e. maintainability, encapsulation, decoupling, etc.. In that terms, yes, your program has a good encapsulation and a good overall structure. I do not know the exact purpose of <code>Staff.java</code>, as far as I see it is designed for inheritance and not for direct instantiation so you could consider making it <code>abstract</code>. Furthermore <code>Patron.java</code> is not able to do any actions after initialization as it does not have any <code>public</code> methods besides a constructor, so the class just does nothing. As it has a field <code>name</code> a getter would be suitable. If it really surves no purpose other than to count the number of patrons you could just replace it by an <code>int</code> in <code>Pool.java</code>.</p>

<blockquote>
  <p>advancePosition Is using a switch statement the most efficient way to change the position of the guards? Is using an enum a good practice for this type of system?</p>
</blockquote>

<p>Yes, using an enum is definitely the best way of modeling a finite set of states, as it provides type safety and the range of values is clear. The <code>switch</code> statement could be replaced by a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html" rel="nofollow noreferrer">Map</a> in order to keep things clean, e.g.:</p>

<pre><code>// initialize this map in a constructor or better use it as constant
Map&lt;Position, Position&gt; nextPosition = new Hashmap&lt;&gt;();
nextPosition.put(Position.ONE, Position.TWO);
// etc
// ...
// then in advancePosition()
// getting them is then as simple as:
position = nextPosition.get(position);
</code></pre>

<blockquote>
  <p>checkpHLevel Is the logic hard to understand? Are there any ways I can improve upon this methods to get rid of bad habits? To the scientists here: I haven't had that much experience with working with pH levels, so is it correct to increase the pH level with Alkaline's and decrease the level with Acids?</p>
</blockquote>

<p>The logic itself is understandable, but your condition can be expressed in a more readable way. As you want to add acids or alcalines I suggest changing <code>int amountToAdd = pool.getOptimumLevel() - pool.getpHLevel();</code> to something more readable like <code>boolean isAcid = pool.getpHLevel() &lt; pool.getOptimumLevel();</code>. This way it is immediately clear what you are trying to achieve, add acids when it's to alcaline and add alcalines when it's too acid. Your ph-level question: an acid ph-value ranges from 0-7 and alcaline from 7-14 so you add acids to an acid environment (not good :p)</p>

<blockquote>
  <p>admitPatron Can this method be implemented in any way that can make it more efficient?</p>
</blockquote>

<p>Your <code>if</code>-condition could be simplified to <code>if(patronCount &lt; capacity)</code>.</p>

<p>Some overall hints for your code. You got some <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic numbers</a> i.e., numbers that are not directly understandable e.g., <code>this.pHLevel = 7.45;</code>. Why is it 7.45? In case of that it is common to use constants as you can give them names like <code>private static final int optimumPhLevel = 7.45</code>. If you then use it everyone knows that your ph-level is the optimum level and 7.45 doesn't really matter anymore. Furthermore you can write <code>this.patrons = new ArrayList&lt;&gt;();</code> instead of <code>this.patrons = new ArrayList&lt;Patron&gt;();</code>. This is called the <a href="https://stackoverflow.com/questions/4166966/what-is-the-point-of-the-diamond-operator-in-java-7">diamond operator</a>.</p>
    </div>