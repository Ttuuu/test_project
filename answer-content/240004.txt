<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're checking <em>way</em> too much in your program. In your test function, the <code>all</code> is going through <em>every single element</em> in the list and checking if it's <code>True</code>. What you should do is do the check yourself, and return on the very first instance of a <code>False</code> value. With the other optimizations made, this speed up runtime from 18 seconds to about four seconds.</p>

<p>You can do the same check above in the <code>fixtest</code> function. Simply return on the very first time that the value is above the <code>points</code> parameter passed. This reduces the amount of iterations needed. Let's say <code>points</code> was 1, as you wrote. At the end of the loop, after checking <em>a lot</em> of permutations, the if statement check is now <code>if 1 == 1467811728:</code>, or some arbitrarily large number. With returning on the first instance of it being <em>above</em> the <code>points</code> parameter, it's a lot faster.</p>

<p>You shouldn't need to convert the list to a <code>deque</code> to just shift the list. Use list slicing, it's better. You also pass a list as an argument to a function, then convert that list to a list, even when you just passed one! This unnecessary converting can slow down your program.</p>

<p>Also, use better variable names and type hinting. Makes your program a lot clearer and easier to understand.</p>

<p>At the end of the day, for <code>n=10</code> the program takes about four seconds to run, give or take a few hundred milliseconds.</p>

<pre><code>from itertools import permutations
from typing import List, Tuple, Union

def perms(number_of_permutations: int):
    """
    Returns a list of all permutations of `n` with one fixed point.
    """
    P = (perm for perm in permutations(range(number_of_permutations)))
    return [
        perm for perm in P if sum(1 if idx == k else 0 for idx, k in enumerate(perm)) == 1
    ]

def fixtest(sequence: List[int], points: int) -&gt; bool:
    """
    Tests if a sequence has `points` fixed points.
    """
    count = 0
    for index, value in enumerate(sequence):
        if index == value:
            count += 1
        if count &gt; points:
            return False
    return True

def rotate(sequence: List[int]) -&gt; List[int]:
    """
    Rotates the sequence by one position
    """
    return sequence[-1:] + sequence[:-1]

def test(number: int) -&gt; Union[Tuple[int, str], Tuple[int, str, List[int]]]:
    """
    Run numerous tests for this code.
    """
    for f in perms(number):
        C = []
        for _ in range(number - 1):
            f = rotate(f)
            C.append(fixtest(f, 1))
        for value in C:
            if not value:
                return number, 'no counterexamples found'
        return number, 'Counterexample found:', f

# [START] 21.5174s
# [END] 4.6866s
</code></pre>

<p><strong>Edit</strong>: That <code>Union</code> type hint may look confusing, so let me clear that up. It's essentially saying that the function will either return a tuple of an int and a string, or a tuple of an int, a string, and a list of integers. It depends on what the outcome of the tests are.</p>
    </div>