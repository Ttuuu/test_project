<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some standard criticisms apply:</p>

<ol>
<li><p>Objects should manage their own data.</p></li>
<li><p>User interface logic should not be part of model objects.</p></li>
<li><p>For model objects, pass in data as parameters. <em>Especially</em> data from the user, like <code>name</code>.</p></li>
</ol>

<p>With that out of the way, there are some things I think you might be fuzzy on:</p>

<ul>
<li><p>Why is <code>ClearScreen</code> a class? Why isn't this simply a user interface function?</p></li>
<li><p>Everything has a name. But <code>name</code> isn't part of the <code>Character</code> class. Why not?</p></li>
<li><p>Do you realize that setting variables at "class level" makes them class variables, instead of instance variables? That is, when you do this:</p>

<pre><code>class enemyWarrior(Character):
    def __init__(self):
        ...

    name = random.choice(["Skeleton Warrior", "Warrior of the Light", "Summoned Warrior"])
</code></pre>

<p>You are setting the <code>name</code> of all <code>enemyWarrior</code> objects to that value, rather than having each enemy warrior randomly pick a name. (This might be what you intend, I can't tell.)</p></li>
<li><p>For operations like <code>choosePlayer</code> ask yourself, "What am I doing? What data am I using? What is this a part of?" Specifically, <code>choosePlayer</code> seems like a user-interface method, since it interacts with the user. (You might break it into two methods, one for talking to the player and one for creating a Mage, but I don't think that's necessary at this point.)</p></li>
<li><p>The difficulty scaling is a good idea. But think about who should be doing that. It seems to me that might be a method of the enemy classes, with an input of the player, or the player's level. Or it might be a user interface function, or a function of the "game board" if there is such a thing.</p></li>
</ul>
    </div>