<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall the code looks good, but old style C. Standard C allows variable declarations inside function bodies, and also inside for loops:</p>

<pre><code>for(int i=0; i&lt;n; i++)
</code></pre>

<p>This has been in the C standard for 20 years and a common non-standard extension since 1990. So you might want to question why you are writing programs in such old-fashioned ways. If your teacher/book says "it's ANSI-C" then note that <code>//</code> comments aren't allowed in that old standard either.</p>

<p>Your function documentation comments don't correspond with the actual code.</p>

<hr>

<p>The main issue is actually the use of the <code>pow()</code> function, which in turn requires the whole floating point library. Some compilers might be able to optimize it at compile-time, but I wouldn't count on it. On some systems like low-end microcontrollers, floating point isn't even an option.</p>

<p>So how to write this without access to <code>pow()</code> but just plain integers? The advantage of <code>pow</code> is that you can iterate digit per digit, starting at 10^n and go down towards 10^0. Without that option, you would rather iterate from least significant digit and upwards. And this in turn complicates printing, because we want to print the most significant digit first.</p>

<p>A naive implementation (doesn't support negative numbers etc) without <code>pow</code> might look like this:</p>

<pre><code>#include &lt;stdio.h&gt;

int get_digits (int n)
{
  int divisor=10000;
  int length;
  for(length=5; length&gt;0; length--)
  {
    if(n/divisor)
    {
      break;
    }
    divisor/=10;
  }
  return length;
}

void print_with_spaces (const char* str)
{
  while(*str != '\0')
  {
    printf("%c  ", *str);
    str++;
  }
}

int main (void)
{
  int input = 12345;
  char output[5+1] = "0";
  int digits = get_digits(input);

  for(int i=0; i&lt;digits &amp;&amp; input!=0; i++)
  {
    if((input % 10) != 0)
    {
      output[digits-1-i] = (input%10) + '0';
    }
    input /= 10;
  }

  print_with_spaces (output);
}
</code></pre>

<p>Alternatively you can implement an integer version of pow yourself.</p>
    </div>