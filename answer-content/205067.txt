<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    # Step by a full degree for a coarse grid or less (such as a tenth of 
    # a degree) for a finer solution
    latstep = 1.0
    lonstep = -1.0
</code></pre>
</blockquote>

<p>If you want to do it by sampling, there's no need to stick to a single resolution. Given a "square" (I realise that in spherical geometry it's not actually a square) and the distances of the four corners, you can bound the maximum obtainable in that region. Filter out those regions whose upper bound is definitely not good enough to win, subdivide the regions which remain, and repeat.</p>

<p>However, there's a far more geometrical way to do it. Compute the <a href="https://en.wikipedia.org/wiki/Voronoi_diagram" rel="nofollow noreferrer">Voronoi diagram</a>. The point will be either a vertex of the Voronoi diagram, an intersection between the Voronoi diagram and the boundary of the state, or a vertex of the boundary of the state.</p>

<p>A quick and dirty way of doing it would just be to calculate the lines of bisection between each pair of airports, calculate the points of intersections of pairs of those lines and/or the boundary of the state, and then measure the distance for each of these points. For a handful of airports this would finish running before you finished coding and debugging the Voronoi calculation.</p>
    </div>