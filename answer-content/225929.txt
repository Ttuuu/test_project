<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>It's fine to prefix member variables with an <code>m</code>, but it's probably best to avoid type prefixes (e.g. <code>mtpNow</code>). It makes code harder to read (you have to know what every abbreviation means), it's a pain to maintain (e.g. <code>mtPause</code> should probably be <code>mtpPause</code> to be consistent). Modern tools eliminate the need for this too (mousing over a variable in Visual Studio will tell me the exact type, not an approximation).</p></li>
<li><p>Functions defined inline in the class don't need to be declared <code>inline</code>.</p></li>
<li><p>The naming is very confusing:</p>

<ul>
<li><p><code>Now()</code> differs from the standard library (<code>now()</code> returns the current time, and is arguably still a terrible name). Functions names should be commands or questions. Perhaps <code>Restart()</code> or <code>Reset()</code> would be better.</p></li>
<li><p><code>Start()</code> is also not ideal. One might expect the function to do what <code>Now()</code> does. I'd suggest calling it <code>Unpause()</code>, which makes the purpose clearer.</p></li>
<li><p><code>mtRestart</code> is an odd name for the time spent paused.</p></li>
</ul></li>
<li><p>We don't really need the <code>Now()</code> / <code>Restart()</code> function, since we can just assign a new timer to the old one to do the same thing (e.g. <code>Timer timer; ...; timer = Timer(); // restarted!</code>).</p></li>
<li><p>There's no reason to keep a <code>vector</code> in the class (we're copying it every time anyway, so we might as well just create a new vector each time).</p></li>
<li><p>We don't need a vector, since it always has 3 values, it would be neater to return a simple <code>struct</code>, which would allow us to give each value a name. Or...</p></li>
<li><p>The real solution is to just return an appropriate <code>chrono::</code> type, and let the user worry about formatting / converting it.</p></li>
<li><p>I'd suggest naming the class <code>Stopwatch</code>, since that's more specific to the pausable timing functionality we need. We can actually implement this functionality based on a simpler, non-pausable <code>Timer</code> class.</p></li>
</ul>

<hr>

<p>So overall I'd suggest something more like this (not tested properly):</p>

<pre><code>#include &lt;chrono&gt;

template&lt;class ClockT = std::chrono::high_resolution_clock&gt;
class Timer
{
    ClockT::time_point m_start;

public:

    Timer():
        m_start(ClockT::now())
    {

    }

    ClockT::duration GetElapsedTime() const
    {
        return ClockT::now() - m_start;
    }
};

template&lt;class ClockT = std::chrono::high_resolution_clock&gt;
class Stopwatch
{
    bool m_paused;
    Timer&lt;ClockT&gt; m_timer;
    ClockT::duration m_timeAccumulated;

public:

    explicit Stopwatch(bool paused = false):
        m_paused(paused),
        m_timer(),
        m_timeAccumulated(0)
    {

    }

    void Pause()
    {
        m_timeAccumulated += m_timer.GetElapsedTime();
        m_paused = true;
    }

    void Unpause()
    {
        if (m_paused)
        {
            m_timer = Timer&lt;ClockT&gt;();
            m_paused = false;
        }
    }

    ClockT::duration GetElapsedTime() const
    {
        if (m_paused)
            return m_timeAccumulated;

        return m_timeAccumulated + m_timer.GetElapsedTime();
    }
};

#include &lt;iostream&gt;

int main()
{
    using seconds_t = std::chrono::duration&lt;float&gt;;

    Stopwatch s;

    for (int i = 0; i != 50; ++i) { std::cout &lt;&lt; "."; }
    std::cout &lt;&lt; "\n";

    std::cout &lt;&lt; std::chrono::duration_cast&lt;seconds_t&gt;(s.GetElapsedTime()).count() &lt;&lt; std::endl;

    s = Stopwatch(true);
    std::cout &lt;&lt; std::chrono::duration_cast&lt;seconds_t&gt;(s.GetElapsedTime()).count() &lt;&lt; std::endl;

    s.Unpause();

    for (int i = 0; i != 50; ++i) { std::cout &lt;&lt; "."; }
    std::cout &lt;&lt; "\n";

    s.Pause();
    std::cout &lt;&lt; std::chrono::duration_cast&lt;seconds_t&gt;(s.GetElapsedTime()).count() &lt;&lt; std::endl;

    for (int i = 0; i != 50; ++i) { std::cout &lt;&lt; "."; }
    std::cout &lt;&lt; "\n";

    std::cout &lt;&lt; std::chrono::duration_cast&lt;seconds_t&gt;(s.GetElapsedTime()).count() &lt;&lt; std::endl;
}
</code></pre>
    </div>