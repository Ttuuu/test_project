<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I find several issues with the current implementation:</p>

<ul>
<li>Complicated, very difficult to understand how it works</li>
<li><code>shift</code> on an array while iterating over it with <code>forEach</code></li>
<li>Creating too many objects in the process (arrays and sets)</li>
<li>Using <code>indexOf</code> on arrays instead working with sets</li>
<li>Using <code>~arr.indexOf</code> instead of the more readable simple condition <code>&gt; -1</code></li>
</ul>

<p>I propose a simpler, more efficient algorithm:</p>

<ul>
<li>Convert each array to a <code>Set</code></li>
<li>Initialize an empty object, to be used as a map of values and the set they belong to. Let's call this <code>pools</code>.</li>
<li><p>For each <code>set</code>, and for each <code>item</code> in the <code>set</code>:</p>

<ul>
<li>If <code>item</code> is not in <code>pools</code>, then add <code>item -&gt; set</code> mapping in <code>pools</code></li>
<li>Otherwise, add each <code>item2</code> in <code>pools[item]</code> to <code>set</code>, and add mappings <code>item2 -&gt; set</code> in <code>pools</code></li>
</ul></li>
<li><p>At this point <code>pools</code> has all the items in all the input arrays as keys, pointing to sets that have the values merged. Keys in the same pool all point to the set, so there are no unnecessary set objects here.</p></li>
<li>What remains is to get the distinct values from <code>pools</code>, convert them to arrays and sort them (if you need to sort them).</li>
</ul>

<p>Here's one way to implement:</p>

<pre><code>const mergeIntersections2 = (arrays) =&gt; {
  const pools = {};
  arrays.map(arr =&gt; new Set(arr)).forEach(set =&gt; {
    Array.from(set).forEach(item =&gt; {
      if (!pools[item]) {
        pools[item] = set;
      } else {
        pools[item].forEach(item2 =&gt; {
          pools[item2] = set.add(item2);
        });
      }
    });
  });

  const seen = {};
  const merged = [];
  Object.keys(pools).forEach(item =&gt; {
    if (!seen[item]) {
      merged.push(Array.from(pools[item]).sort((a, b) =&gt; a - b));
      pools[item].forEach(item2 =&gt; seen[item2] = 1);
    }
  });

  return merged;
};
</code></pre>
    </div>