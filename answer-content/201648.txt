<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>janos provided some excellent feedback, so I'll focus on how to make the code faster. Unfortunately, I'm not a javascript coder, but the algorithm still follows a general pattern. </p>

<p>Since the input arrays are sorted, and the game uses a dense ranking, we can calulate the unique scores in \$O(n)\$. Then we simply parse the scores that Alice had, and compare them to the unique scores, performing a kind of merge. This should be \$O(n+m)\$ in the worst case, but performs better the more people share their scores. </p>

<p>The function itself is quite simple:</p>

<pre><code>function ladderFast(scores, points) {
    let lastScore = 0;
    let uniqueScores = [];
    while (scores.length) {
        let tempScore = scores.pop();
        if (tempScore != lastScore) {
            lastScore = tempScore;
            uniqueScores.push(tempScore);
        }
    }
    let index = 0;
    points.forEach(function(element) {
        while (element &gt;= uniqueScores[index]) {
            index++;
        }
        console.log(uniqueScores.length - index + 1);
    });
}
</code></pre>

<p>From the example you gave, this code runs about 10 times faster than the code you provided, and should scale even better for larger inputs.</p>
    </div>