<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since <code>master_color_dict</code> is only used in <code>roll</code> to initialize another dict, you could just write that initialization inside <code>roll</code>:</p>

<pre><code>def roll(...):
    color_dict = {'red': 0, 'black': 0, 'green': 0}
</code></pre>

<p>And since you don't use this dictionary as a whole but only its individual parts, you could as well say:</p>

<pre><code>def roll(...):
    red = 0
    black = 0
    green = 0
</code></pre>

<p>You should not abbreviate <code>balance</code> to <code>bal</code>. The additional 4 letters won't hurt anywhere in the code.</p>

<p>You should read about PEP 8 and apply the usual coding conventions to your code, which are:</p>

<ul>
<li>after a comma, write a space</li>
<li>around binary operators, write spaces</li>
<li>and several more</li>
</ul>

<p>Since the <code>roll</code> function is more than a screen long (at least for some screens), it takes a while to read all the code. Therefore you should provide a doc string that summarizes all that code in a single sentence.</p>

<p>At the end of <code>roll</code>, there are 3 large expressions that are hard to read. One of them contains the magic number 34. That number is magic because it neither appears in the roulette rules nor anywhere else in the code. To get rid of these complicated formulas, it would be easier to maintain a separate <code>balance</code> variable in that function:</p>

<pre><code>def roll(num, bet_color, bet_amount):
    balance = 0

    for _ in range(num):
        balance -= bet_amount

        rolled_color = ...

        if bet_color == rolled_color:
            balance += payout[rolled_color] * bet_amount
</code></pre>

<p>This way, the code exactly tells the story how it happens in reality. First you bet some money, and it is gone. And should you have picked the correct color, you get the payout.</p>

<p>In <code>rollchoose</code> you should reorder the conditions:</p>

<ul>
<li>first check whether the given number is positive. If not, reject it.</li>
<li>then check whether you can afford it. If not, reject it.</li>
<li>return it.</li>
</ul>

<p>Since you already ruled out negative numbers in the first condition, you don't need that check <code>rc &gt; 0</code> in the second condition anymore. That's exactly what the <code>elif</code> is for.</p>

<p>In <code>money_change_format</code>, you don't seem to need the cases for <code>paren = False</code> since you only call that function with <code>paren = True</code>. This dead code should be removed.</p>

<p>In the main program, the number 500 appears 4 times. It should appear only once. When printing the new balance, you should use <code>money_change_format</code> so that all your program's output is formatted in the same way.</p>

<p>A final remark on the post's title: your roulette program has nothing to do with a command line since it doesn't access <code>sys.args</code>. It runs <em>in text mode</em>, which often goes together with command lines, but not necessarily so. Keeping different concepts separated is important. If you mix up these concepts, you will write programs that work <em>almost correctly</em>, which is the worst that can happen. Especially if the program only shows unexpected behavior in situations that are hard to explain.</p>
    </div>