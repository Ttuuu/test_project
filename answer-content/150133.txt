<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I answered a similar question on Stack Overflow. I wanted a timestamp in a specific format, that could be obtained from a function repeatedly.</p>

<p>My implementation is different than the original posters, for very specific reasons. The goal is thus to create a simple timestamp structure and a function that can create it repeatedly without arguments. I think the function below does that.</p>

<p>A timestamp function should return a timestamp. It should not require the user to have know the necessary length of the <code>char*</code>. Such details should be hidden from the user. If not the user must manage the <code>char*</code> or keep tabs on how users of this function pass <code>char*</code> variables to it.</p>

<p>The function <code>clock_gettime</code> is the ideal POSIX function, but it is not universally supported. Avoid the other deprecated functions such as <code>gettimeofday</code>. As someone said earlier, <code>ftime</code> is not the function to use, and neither is <code>gettimeofday</code>.</p>

<p>I think the code below is mostly portable. I think the trick with timestamp functions is not so much portability, but avoiding the unnecessary usage of dynamically allocated memory. I think this is important because for embedded environments several rules preclude the usage of such C constructs. Furthermore calling malloc and new are expensive operations, not good when looking for millisecond precision. My implementation could be tightened up considerably by removing the calls to the (sprintf) format functions and replacing them with something custom, but the general idea is there.</p>

<p>Some caveats: (1) Make sure you set the time on your embedded board. (2) Make sure your are aware of issues with your time source such as drift, GPS clock roll-over which occurs in 2019, leap second updates, time standard translations (i.e. Atomic to UTC, GPS/1980 to Unix/1970, etc).</p>

<p>Also, <code>strcat</code> requires an implicit search for <code>'\0'</code>. For the original solution strcat should cause no problems, but I generally avoid the use of strcat because of it's own problems. </p>

<p>My function returns a timestamp with a timestring (not ambiguous) and not a <code>char*</code> (ambiguous) - essentially this timestamp function is at a suitable code 'level', the reader knows what he is being presented with. I am not inter-mixing low and medium level code. I have a medium level type (timestamp) and a medium level function (<code>getTimestamp</code>) and it requires no arguments.</p>

<p>It would be 'nice' if <code>clock_gettime</code> had macro options for something like <code>RAW_GPS_TIME</code>, <code>J2000_TAI_TIME</code>, <code>J2000_UTC_TIME</code> and so forth, providing that such time sources were available, but this is another discussion.</p>

<pre><code>struct Timestamp
{
    time_t seconds;
    long milliseconds;
    char timestring[32];
};


struct Timestamp getTimestamp()
{
    char   timebuffer[32]     = {0};
    struct timeval  tv        = {0};
    struct tm      *tmval     = NULL;
    struct tm       gmtval    = {0};
    struct timespec curtime   = {0};

    struct Timestamp timestamp;

    int i = 0;

    // Get current time
    clock_gettime(CLOCK_REALTIME, &amp;curtime);


    // Set the fields
    timestamp.seconds      = curtime.tv_sec;
    timestamp.milliseconds = round(curtime.tv_nsec/1.0e6);

    if((tmval = gmtime_r(&amp;timestamp.seconds, &amp;gmtval)) != NULL)
    {
        // Build the first part of the time
        strftime(timebuffer, sizeof timebuffer, "%Y-%m-%d %H:%M:%S", &amp;gmtval);

        // Add the milliseconds part and build the time string
        snprintf(timestamp.timestring, sizeof timestamp.timestring, "%s.%03ld", timebuffer, timestamp.milliseconds); 
    }

    return timestamp;
}

int main()
{
    int i = 0;
    struct timespec sleeptime = {0, 5000000L};

    struct Timestamp timestamp;

    for (i=0; i &lt; 20; i++)
    {
        timestamp = getTimestamp();
        printf("Time is: %s \n", timestamp.timestring);
        nanosleep(&amp;sleeptime, NULL);
    }

    return 0;
}

struct Timestamp getTimestamp()
{
    char   timebuffer[32]     = {0};
    struct timeval  tv        = {0};
    struct tm      *tmval     = NULL;
    struct tm       gmtval    = {0};
    struct timespec curtime   = {0};

    struct Timestamp timestamp;

    int i = 0;

    // Get current time
    clock_gettime(CLOCK_REALTIME, &amp;curtime);


    // Set the fields
    timestamp.seconds      = curtime.tv_sec;
    timestamp.milliseconds = round(curtime.tv_nsec/1.0e6);

    if((tmval = gmtime_r(&amp;timestamp.seconds, &amp;gmtval)) != NULL)
    {
        // Build the first part of the time
        strftime(timebuffer, sizeof timebuffer, "%Y-%m-%d %H:%M:%S", &amp;gmtval);

        // Add the milliseconds part and build the time string
        snprintf(timestamp.timestring, sizeof timestamp.timestring, "%s.%03ld", timebuffer, timestamp.milliseconds); 
    }

    return timestamp;
}

int main()
{
    int i = 0;
    struct timespec sleeptime = {0, 5000000L};

    struct Timestamp timestamp;

    for (i=0; i &lt; 20; i++)
    {
        timestamp = getTimestamp();
        printf("Time is: %s \n", timestamp.timestring);
        nanosleep(&amp;sleeptime, NULL);
    }

    return 0;
}
</code></pre>
    </div>