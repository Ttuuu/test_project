<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Reversing the condition of <code>if (originalImage != null)</code> and returning early will remove one level of indentation. The less indentation some code shows the easier to read it will become.  </li>
<li><code>catch</code> to just rethrow, althought you did it in the correct way, doesn't buy you anything. Just remove the <code>try..catch..finally</code> and enclose the usage of <code>graphics</code> with an <code>usage</code> block.</li>
<li>Althought the code is mostly named well, one could stumble over <code>tempPhoto</code> and can't figure out at first glance wether this object is important or just temporary.  </li>
<li>You can cast e.g <code>((width - (sourceWidth * percent)) / 2)</code> directly to <code>int</code> you don't need a call to <code>Convert.ToInt16()</code> here.  </li>
<li><code>percentW</code> and <code>percentH</code> are first defined and on the next lines you assign a value to them. You should do it just at the declaration to save some (superflous) lines of code.  </li>
<li>Instead of <code>graphicController.FillRectangle(Brushes.White, 0, 0, width, height);</code> you should use <code>graphicController.Clear(Color.White);</code> which is easier to read.  </li>
<li>Comments, when used, should state, in a clear and understandable way, why the code is written as it is. I don't get the comment <code>// The chances of hitting this ONE SPECIFIC COLOR are very slim</code>. Where could be a problem with the code to make this comment justified?  </li>
<li>The code validates the <code>Image originalImage</code> method parameter, but allows "illegal" values for <code>int width</code> and <code>int height</code>.  </li>
</ul>

<p>Implementing most of the mentioned points (validation is for you) will lead to  </p>

<pre><code>public static Image ImageToFixedSize(Image originalImage, int width, int height)
{
    if (originalImage == null) { return null; }

    int sourceWidth = originalImage.Width;
    int sourceHeight = originalImage.Height;
    int destX = 0;
    int destY = 0;

    float percent = 0;
    float percentW = width / (float)sourceWidth;
    float percentH = height / (float)sourceHeight;

    if (percentH &lt; percentW)
    {
        percent = percentH;
        destX = (int)((width - (sourceWidth * percent)) / 2);
    }
    else
    {
        percent = percentW;
        destY = (int)((height - (sourceHeight * percent)) / 2);
    }

    int destWidth = (int)(sourceWidth * percent);
    int destHeight = (int)(sourceHeight * percent);

    Bitmap fixedSizedImage = new Bitmap(width, height, PixelFormat.Format24bppRgb);
    fixedSizedImage.SetResolution(originalImage.HorizontalResolution, originalImage.VerticalResolution);

    using (Graphics graphicController = Graphics.FromImage(fixedSizedImage))
    {
        graphicController.Clear(Color.White);

        // The chances of hitting this ONE SPECIFIC COLOR are very slim
        graphicController.SmoothingMode = SmoothingMode.HighQuality;
        graphicController.PixelOffsetMode = PixelOffsetMode.HighQuality;
        graphicController.InterpolationMode = InterpolationMode.HighQualityBicubic;
        graphicController.CompositingQuality = CompositingQuality.HighQuality;

        graphicController.DrawImage(
            originalImage,
            new Rectangle(destX, destY, destWidth, destHeight),
            new Rectangle(1, 1, sourceWidth - 1, sourceHeight - 1),
            GraphicsUnit.Pixel);
    }

    return fixedSizedImage;

}
</code></pre>
    </div>