<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Avoid size mistakes</strong></p>

<p>What is wrong with <code>memset()</code> in the following OP's code?</p>

<pre><code>float **total_cost_ingredients_ptr = malloc(total_shops * sizeof(float*));
memset(total_cost_ingredients_ptr, 0, total_shops * sizeof(float));
</code></pre>

<p>Mouse over for the answer</p>

<blockquote class="spoiler">
  <p> <code>sizeof(float)</code> is not certainly the size needed. <code>sizeof(float*)</code>  would have been OK.</p>
</blockquote>

<hr>

<p>When allocating and referring to the size of an <em>object</em> or a pointed to object, prefer to use the sizeof the (pointed) object and not its type.</p>

<p>It is easier to code right, review and maintain.</p>

<pre><code>// float **cost_ingredients_ptr = malloc(total_shops * sizeof(float*));
float **cost_ingredients_ptr = malloc(total_shops * sizeof *cost_ingredients_ptr);

// memset(total_cost_ingredients_ptr, 0, total_shops * sizeof(float));
memset(total_cost_ingredients_ptr, 0, total_shops * sizeof *total_cost_ingredients_ptr);
</code></pre>

<p>When calculating <em>size</em>, prefer to start with  the <code>size_t</code> argument.  </p>

<p><code>size_t * int</code> has the same effect as <code>int * size_t</code>.</p>

<p><code>size_t * int * int</code> is not as <code>int * int * size_t</code>.  The later performs <code>int * int</code> which may overflow wheres <code>size_t * int * int</code> may not.</p>

<p>Recommend</p>

<pre><code>// float **cost_ingredients_ptr = malloc(total_shops * sizeof(float*));
float **cost_ingredients_ptr = malloc(sizeof *cost_ingredients_ptr * total_shops);
</code></pre>

<hr>

<p>If code is zero-ing allocated memory, consider <code>calloc()</code> advantages:</p>

<pre><code>//float **total_cost_ingredients_ptr = malloc(total_shops * sizeof(float*));
//memset(total_cost_ingredients_ptr, 0, total_shops * sizeof(float));

float **total_cost_ingredients_ptr = calloc(total_shops,sizeof *total_cost_ingredients_ptr);
</code></pre>

<p>1) Cleaner <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a> code.</p>

<p>2) Typically as fast or faster.</p>

<p>3) No potential <code>NULL</code> deference. -  Still following code should check for a <code>NULL</code> return.</p>

<p>4) On select systems, <code>calloc()</code> can allocate more than <code>SIZE_MAX</code> total bytes whereas <code>malloc()</code> is limited.</p>

<p>5) A good <code>calloc(n, size)</code> will detect products of <code>n * size</code> greater the <code>SIZE_MAX</code> and allocate accordingly.   Whereas <code>malloc(n * size)</code> simply overflows the product.</p>
    </div>