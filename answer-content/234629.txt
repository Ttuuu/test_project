<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another simple solution would be base conversion. The original string contains the characters <code>0</code> to <code>5</code>, meaning it is in base 6. Every pair of characters can therefore be encoded as one base 36 character. The resulting string will contain the characters <code>a</code> to <code>z</code> and <code>0</code> to <code>9</code>.</p>

<p>A string of length <code>n</code> will, after conversion, have length <code>n/2</code> if <code>n</code> is even, or <code>(n/2) + 1</code> if <code>n</code> is odd. </p>

<pre class="lang-js prettyprint-override"><code>function convertBase(str, fromBase, toBase) {
  return parseInt(str, fromBase).toString(toBase);
}

function encode(str) {
  const hasEvenLength = str.length % 2 === 0;
  const chuncks = hasEvenLength ? [] : [str.substr(0, 1)];
  const startIndex = hasEvenLength ? 0 : 1;
  for (let i = startIndex; i &lt; str.length - 1; i += 2) {
    chuncks.push(str.substr(i, 2));
  }
  return chuncks.map(chunck =&gt; convertBase(chunck, 6, 36)).join('');
}

function decode(str) {
  return str.split('').map(char =&gt; convertBase(char, 36, 6)).join('');
}
</code></pre>
    </div>