<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You did a good job. Program does what it should and you are validating your values, which is important. As for the issues I must say that this program is not object oriented. As in not at all. It is one big procedure with some sub-procedures. While this might be ok when the program is some kind of one-time effort that is not supposed to change, in the real world programs and their requirements tend to change. This change is what OOP can help you manage.</p>

<p>First issue that strikes the eyes is what is called <a href="https://wiki.c2.com/?StringlyTyped" rel="nofollow noreferrer">Stringly Typed</a> programming(Also called primitive obsession. One of so called design smells). It is something you will encounter very often. The problem is, that even though the Java is strongly typed language people often encode logic into Strings and other primitive types. Instead of encoding everything as a String you should introduce types that will represent those pieces of logic within your codebase.</p>

<p>Looking at the challenge description there are a couple concepts you could start with. Obvious ones are Instructions, Position of the rover which works with its sub-concepts a Coordinate and a Direction. </p>

<p>I quickly went through the code and extracted all position related code into a Position class which represents a position of a rover and produces a new position based on the incoming instruction. Notice that it is still quite ugly piece of code. This is because it does too many things. I.E. it does not have a single responsibility.</p>

<pre><code>class Position {
    private final int x;
    private final int y;
    private final char direction;

    Position(final int x, final int y, final char direction) {
        this.x = x;
        this.y = y;
        this.direction = direction;
    }

    public Position move(final char instruction) {
        final int x;
        final int y;
        final char direction;
        if (instruction == 'M') {
            direction = this.direction;
            if(this.direction == 'N') {
                y = this.y + 1;
                x = this.x;
            } else if(this.direction == 'S') {
                y = this.y - 1;
                x = this.x;
            } else if(this.direction == 'E') {
                x = this.x + 1;
                y = this.y;
            } else if(this.direction == 'W') {
                x = this.x - 1;
                y = this.y;
            } else {
                throw new IllegalArgumentException("Unknown direction");
            }
        } else if (instruction == 'R') {
            x = this.x;
            y = this.y;
            if (this.direction == 'N') {
                direction = 'E';
            } else if (this.direction == 'S') {
                direction = 'W';
            } else if (this.direction == 'E') {
                direction = 'S';
            } else if (this.direction == 'W') {
                direction = 'N';
            } else {
                throw new IllegalArgumentException("Unknown direction");
            }
        } else if (instruction == 'L') {
            x = this.x;
            y = this.y;
            if (this.direction == 'N') {
                direction = 'W';
            } else if (this.direction == 'S') {
                direction = 'E';
            } else if (this.direction == 'E') {
                direction = 'N';
            } else if (this.direction == 'W') {
                direction = 'S';
            } else {
                throw new IllegalArgumentException("Unknown direction");
            }
        } else {
            throw new IllegalArgumentException("Unknown instruction");
        }
        return new Position(x, y, direction);
    }
}
</code></pre>

<p>If you extract these additional responsibilities into their respective classes you could end up with something like this:</p>

<pre><code>class Position {
    private final Coordinate coordinate;
    private final Direction direction;

    Position(final Coordinate coordinate, final Direction direction) {
        this.coordinate = coordinate;
        this.direction = direction;
    }

    public Position move(final Instruction instruction) {
        final Direction direction = this.direction.turn(instruction);
        final Coordinate coordinate;
        if (instruction == Instruction.Move) {
            coordinate = this.coordinate.move(direction);
        } else {
            coordinate = this.coordinate;
        }
        return new Position(coordinate, direction);
    }
}

class Coordinate {
    private final int x;
    private final int y;

    Coordinate(final int x, final int y) {
        this.x = x;
        this.y = y;
    }
    public Coordinate move(final Direction direction) {
        final int x;
        final int y;
        if(direction == Direction.North) {
            y = this.y + 1;
            x = this.x;
        } else if(direction == Direction.South) {
            y = this.y - 1;
            x = this.x;
        } else if(direction == Direction.East) {
            x = this.x + 1;
            y = this.y;
        } else if(direction == Direction.West) {
            x = this.x - 1;
            y = this.y;
        } else {
            throw new IllegalArgumentException("Unknown direction");
        }
        return new Coordinate(x, y);
    }

}

enum Instruction {
    Move('M'),
    Left('L'),
    Right('R');

    private static final Map&lt;Character, Instruction&gt; LOOKUP = new HashMap&lt;&gt;();

    private final Character symbol;

    Instruction(final Character symbol) {
        this.symbol = symbol;
    }

    static {
        for (final Instruction i : Instruction.values()) {
            LOOKUP.put(i.symbol, i);
        }
    }

    public static Instruction of(final Character symbol) {
        final Instruction instruction = LOOKUP.get(symbol);
        if (instruction == null) {
            throw new IllegalArgumentException("Unknown instruction: '" + symbol + "'!");
        }
        return instruction;
    }

}

enum Direction {
    North('N') {
        @Override
        public Direction turn(final Instruction instruction) {
            final Direction direction;
            if (instruction == Instruction.Left) {
                direction = West;
            } else if (instruction == Instruction.Right) {
                direction = East;
            } else {
                direction = North;
            }
            return direction;
        }
    },
    South('S') {
        @Override
        public Direction turn(final Instruction instruction) {
            final Direction direction;
            if (instruction == Instruction.Left) {
                direction = East;
            } else if (instruction == Instruction.Right) {
                direction = West;
            } else {
                direction = South;
            }
            return direction;
        }
    },
    East('E') {
        @Override
        public Direction turn(final Instruction instruction) {
            final Direction direction;
            if (instruction == Instruction.Left) {
                direction = North;
            } else if (instruction == Instruction.Right) {
                direction = South;
            } else {
                direction = East;
            }
            return direction;
        }
    },
    West('W') {
        @Override
        public Direction turn(final Instruction instruction) {
            final Direction direction;
            if (instruction == Instruction.Left) {
                direction = South;
            } else if (instruction == Instruction.Right) {
                direction = North;
            } else {
                direction = West;
            }
            return direction;
        }
    };

    private static final Map&lt;Character, Direction&gt; LOOKUP = new HashMap&lt;&gt;();

    private final Character symbol;

    Direction(final Character symbol) {
        this.symbol = symbol;
    }

    static {
        for (final Direction d : Direction.values()) {
            LOOKUP.put(d.symbol, d);
        }
    }

    public abstract Direction turn(final Instruction instruction);

    public static Direction of(final Character symbol) {
        final Direction direction = LOOKUP.get(symbol);
        if (direction == null) {
            throw new IllegalArgumentException("Unknown direction: '" + symbol + "'!");
        }
        return direction;
    }
}
</code></pre>

<p>These are just examples of what can be done. I haven't tested if everything works and there might be some typos.</p>
    </div>