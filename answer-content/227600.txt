<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Warnings</h1>

<p>You should always turn warnings on during development. Your code generates <strong>6 warnings</strong>, all of which are easy to fix:</p>

<pre><code>test.rb:1: warning: parentheses after method name is interpreted as an argument list, not a decomposed argument
test.rb:51: warning: mismatched indentations at 'else' with 'if' at 45
test.rb:56: warning: mismatched indentations at 'end' with 'if' at 45
test.rb:93: warning: mismatched indentations at 'end' with 'while' at 64
test.rb:64: warning: literal in condition
test.rb:95: warning: mismatched indentations at 'end' with 'def' at 1
</code></pre>

<h1>Formatting</h1>

<p>You should use your text editor's auto-format feature.</p>

<h1>Linting</h1>

<p>If you want to make sure that your code is <em>idiomatic</em>, you should use an automated linting tool that checks for violations of Community Coding Style Guidelines, common mistakes, complexity, etc. One popular tool for this is <a href="https://docs.rubocop.org/" rel="nofollow noreferrer">Rubocop</a>. If I run Rubocop with the default settings on your code, I get a whopping <strong>408 violations</strong>. Thankfully, 391 of those can be auto-corrected, leaving only 17, of which 13 are trivially correctable.</p>

<h1>Consistency</h1>

<p>Consistency is <em>very</em> important when writing code. Actually, it is very important when writing anything technical. If there are two different ways to write something, and you use two different ways to write it, people are going to assume that you wanted to express <em>two different things</em>, and thus they will waste time trying to figure out <em>why</em> you expressed the same thing two different ways.</p>

<p>It is important not only to be consistent with yourself within your code, but also with the community as a whole. There are Community Coding Style Guidelines in pretty much every community, and usually, there are also tools that automatically format your code according to those guidelines.</p>

<p>Here are a couple of examples:</p>

<ul>
<li><p><em>Indentation</em></p>

<ul>
<li><p><em>Amount</em>: Sometimes, you indent by 1 column, sometimes by 2, sometimes by 4. There does not seem to be any logic whatsoever as to which amount of indentation you choose. <em>Idiomatic</em> would be 2. For example, the first three lines:</p>

<pre><code>def calculate_Pvalue (array1, array2)
 if array1.size &lt;= 1
   return 1.0
</code></pre></li>
<li><p><em>When to indent</em>: Sometimes, you indent the body of a loop or a conditional expression, sometimes you don't. Again, there does not seem to be any logic to it. <em>Idiomatic</em> would be to indent. Also, sometimes you indent just randomly in the middle of a sequence of expressions. Also in this case, I can't see any logic to it. <em>Idiomatic</em> would be to <em>not</em> indent.</p></li>
</ul></li>
<li><p><em>Whitespace</em></p>

<ul>
<li><em>Around Operators</em>: Sometimes, you put whitespace around operators, sometimes not. <em>Idiomatic</em> would be to use whitespace. Personally, I sometimes use different amounts of whitespace to emphasize precedence rules, e.g. I would write <code>a*b + c</code>, but I can't find such a logic in your case, for example here: <code>variance1 / array1.size + variance2/array2.size</code></li>
<li><em>Around Commas</em>: Sometimes, you have no whitespace around commas, sometimes you have whitespace after a comma. <em>Idiomatic</em> would be to have 1 space after a comma.</li>
<li><em>Within parentheses</em>: Sometimes, you have whitespace after the opening and before the closing parenthesis, sometimes not. <em>Idiomatic</em> would be to have no whitespace.</li>
</ul></li>
<li><p><em>Operators</em></p>

<ul>
<li><p><em>Boolean keyword operators</em>: Sometimes you use the operator symbols (<code>&amp;&amp;</code> / <code>||</code>), sometimes you use the keywords (<code>and</code> / <code>or</code>). I cannot detect any logic as to when you use which. <em>Idiomatic</em> would be to use the symbol versions. Example:</p>

<pre><code>if value &lt; 0.0 || 1.0 &lt; value
  return value
end
if value == 0 or value == 1.0
  return value
end
</code></pre></li>
<li><p><em>Compound assignment</em>: Sometimes, you use compound assignment (<code>a += b</code>) and sometimes the long form (<code>a = a + b</code>). <em>Idiomatic</em> would be to use the compound form, unless it severely hinders readability. Examples: <code>variance1 += (mean1 - x)**2</code> and <code>psq = psq + 1.0</code>.</p></li>
</ul></li>
<li><p><em>Naming</em>: sometimes, you spell p-value <code>pvalue</code> and sometimes <code>Pvalue</code>. You should be consistent and pick one. <em>Idiomatic</em> would be <code>pvalue</code> or <code>p_value</code>. Example:</p>

<pre><code>pvalue = calculate_Pvalue(d1,d2)
</code></pre></li>
</ul>

<h1>Naming</h1>

<ul>
<li><p><em>Snake Case</em>: Names of methods, parameters, local variables, instance variables, class hierarchy variables, and global variables should be written in <em>snake_case</em>. Constants should be written in <em>SCREAMING_SNAKE_CASE</em>. The exception are constants that refer to modules or classes, and methods that are closely related to classes (E.g. <code>Kernel#Hash</code>, <code>Kernel#Float</code>), which are written in <em>PascalCase</em>. So, <code>calculate_Pvalue</code> should be either <code>calculate_pvalue</code> or <code>calculate_p_value</code>.</p></li>
<li><p><em>Intention-revealing names</em>: Names should be intention-revealing. There are couple of names in your code that don't really help with understanding, e.g. <code>temp</code> and <code>value</code>.</p></li>
</ul>

<h1>Layout</h1>

<ul>
<li><p><em>Whitespace</em>: Your code is all mashed together with no room to breathe. You should break up logical blocks with whitespace to make the flow easier to follow.</p></li>
<li><p><em>Indentation</em>: You already start your code indented by 1 space. Your code should start with no indentation. Then, blocks should be indented bxy 2 spaces.</p></li>
<li><p><em>No whitespace after method name</em>: both when sending a message (calling a method) and when defining a method, there should be no whitespace between the name and the opening parenthesis of the argument list / parameter list:</p>

<pre><code>def calculate_Pvalue (array1, array2)
</code></pre></li>
</ul>

<h1>Semantics</h1>

<ul>
<li><p><em>Useless conditional</em>:</p>

<pre><code>value = 1.0 - value if indx
</code></pre>

<p>There is no way that <code>indx</code> can ever become falsy in your code (it will always be either <code>0</code> or <code>1</code>, both of which are truthy), so this conditional is redundant and should just be:</p>

<pre><code>value = 1.0 - value
</code></pre></li>
<li><p><em>Redundant conditionals</em>:</p>

<pre><code>if value &lt; 0.0 || 1.0 &lt; value
  return value
end
if value == 0 or value == 1.0
  return value
end
</code></pre>

<p>You <code>return</code> the <code>value</code> if it is less than zero and you also <code>return</code> the <code>value</code> if it is equal to zero. That is the same thing as returning the value if it is less than or equal to zero. Same for the other conditional. Replace with</p>

<pre><code>if value &lt;= 0.0 || 1.0 &lt;= value
  return value
end
</code></pre></li>
<li><p><em>Use <code>Range#cover?</code></em>: Actually, the above conditional is even better written as</p>

<pre><code>unless (0.0..1.0).cover?(value)
  return value
end
</code></pre></li>
<li><p><em>Use modifier-<code>if</code> for single-expression conditionals and guard clauses</em>: prefer </p>

<pre><code>return value unless (0.0..1.0).cover?(value)
</code></pre></li>
<li><p><em>Useless use of <code>Float</code> literals</em>: In the above and many other places, you could equally well use <code>Integer</code> literals. An explicit <code>Float</code> literal is only required when you specifically need to call a <code>Float</code> method, e.g. for division. So, just use <code>1</code> and <code>0</code> instead.</p></li>
<li><p><em>Use <code>Numeric#zero?</code> predicate instead of testing for equality with <code>0</code></em>: There are multiple places where you test for equality with <code>0</code>. It would be more idiomatic to use the <code>Numeric#zero?</code> predicate instead:</p>

<pre><code>return 1 if variance1.zero? &amp;&amp; variance2.zero?
</code></pre></li>
<li><p><em>Avoid loops</em>: In general, you should avoid loops as much as possible. You should prefer high-level iterators such as <code>inject</code>, <code>map</code>, <code>select</code>, etc. Only if that is not possible, use <code>each</code>. In case you need an infinite loop, use <code>Kernel#loop</code>. Don't use <code>while true</code> and <em>most definitely</em> do not use <code>while 1</code>. For example, </p>

<pre><code>variance1 = 0
variance2 = 0
array1.each do |x|
  variance1 += (mean1 - x)**2
end
array2.each do |x|
  variance2 += (mean2 - x)**2
end
</code></pre>

<p>becomes</p>

<pre><code>variance1 = array1.inject(0) {|acc, x| acc + (mean1 - x)**2 }
variance2 = array2.inject(0) {|acc, x| acc + (mean2 - x)**2 }
</code></pre></li>
<li><p><em>Redundant <code>return</code></em>: In Ruby, the last expression evaluated inside a block, method, module, or class is the return value. So, instead of <code>return value</code>, you can just write <code>value</code>.</p></li>
<li><p><em>Magic number</em>: What does <code>0.57236494292470009</code> mean? You should give it a name.</p></li>
<li><p>*Use <code>Array#first</code> instead of <code>[0]</code>: Replace</p>

<pre><code>beta = Math.lgamma(a)[0] + 0.57236494292470009 - Math.lgamma(a + 0.5)[0]
</code></pre>

<p>with</p>

<pre><code>beta = Math.lgamma(a).first + 0.57236494292470009 - Math.lgamma(a + 0.5).first
</code></pre></li>
<li><p><em><code>freeze</code> objects that are not meant to be modified, especially ones that are assigned to constants</em>: </p>

<pre><code>CORRECT_ANSWERS = [0.021378001462867, 0.148841696605327, 0.0359722710297968,
                   0.090773324285671, 0.0107515611497845, 0.00339907162713746, 
                   0.52726574965384, 0.545266866977794].freeze
</code></pre></li>
<li><p><em>Frozen string literals</em>: In the same vein, you should make a habit of adding the <em>magic comment</em></p>

<pre><code># frozen_string_literal: true
</code></pre>

<p>to all your files.</p></li>
<li><p><em>Commented out code</em>: You should not comment out code. That's what a version control system is for.</p></li>
<li><p><em>Duplication</em>: There is a fair amount of duplication in your code, e.g.</p>

<pre><code>mean1 = array1.sum / array1.size
mean2 = array2.sum / array2.size
</code></pre>

<p>or</p>

<pre><code>variance1 = 0.0
variance2 = 0.0
array1.each do |x|
  variance1 += (mean1 - x)**2
end
array2.each do |x|
  variance2 += (mean2 - x)**2
end
</code></pre>

<p>You could remove this duplication e.g. by extracting the logic into a method.</p></li>
<li><p><em>Complexity</em>: The method is very complex, according to pretty much any metric (Cyclomatic Complexity, NPath Complexity, ABC, Perceived Complexity, …). You should break it up into multiple methods.</p></li>
<li><p><em>Documentation</em>: All your methods should have a documentation comment describing their purpose, usage, and pre- and post-conditions. Also, while in general, code should describe itself, in your case, you should document the algorithm and the names of the variables. Presumably, those names come from a well-known paper, in that case, you should cite that paper. (Note: in general, variable names like <code>x</code>, <code>xx</code>, <code>pp</code>, etc. should be avoided because they do not reveal the intent of the code, but here, I assume they actually <em>are</em> intention-revealing names because they are well-known to a reader versed in statistics. Still, you should document where those names come from.)</p></li>
</ul>
    </div>