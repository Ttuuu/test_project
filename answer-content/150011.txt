<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Other than for simplicity of being able apply all replacement rules easily, and with more maintainable code, I don't see an absolute need to use regex for this, as simple string manipulation should be able to be used here and may be better from a performance standpoint.</p>

<p>There is no reason for you to loop over the regex array and <code>preg_replace()</code> each individually, as <code>preg_replace()</code> accepts arrays for both patterns and replacements.</p>

<p>So you could easily do something like:</p>

<pre><code>preg_replace($pattern_array, $replacement_array, $string);
</code></pre>

<p>I don't like your approach of building the regex pattern in two places, why not define entire pattern in regex array?  You might have something like this:</p>

<pre><code>$regex_config = array(
     'ão' =&gt; '/[õã]es$/iu',
    ...
);
$pattern_array = array_values($regex_config);
$replacement_array = array_keys($regex_config);
$result = preg_replace($pattern_array, $replacement_array, $string, 1); 
</code></pre>

<p>You also have a potential edge case you might need to address.  What if subject string is all caps?  Since you use case-insenstive match you could end up with an all-caps plural word geting lowercase letters replaced into it.  Should you really be case-insensitive here?</p>

<p>Should your function name indicate that the function is only applicable to Portugeuse?</p>
    </div>