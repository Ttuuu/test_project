<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>State nomenclature</h2>

<p><code>stateChanged</code> vaguely makes sense, but <code>state</code> doesn't. The word "state" is a fairly vague descriptor. What does <code>state</code> as a boolean actually mean? This should probably be renamed to <code>isValid</code>.</p>

<h2>Boolean factorization</h2>

<pre><code>    if (!numberPresent &amp;&amp; !operatorPresent) {
        // if parenthesis state is changed a number needs to be present
        state = !parStateChanged;
    } else if (numberPresent &amp;&amp; operatorPresent) {
        state = false;
    } else if (numberPresent) {
        state = true;
    }
</code></pre>

<p>can be</p>

<pre><code>if (numberPresent)
    isValid = !operatorPresent;
else
    isValid = !parStateChanged;
</code></pre>

<h2><code>else</code> after <code>return</code></h2>

<p>This:</p>

<pre><code>                    if (!subState) {
                        return false;
                    } else {
</code></pre>

<p>doesn't need the <code>else</code>, due to the <code>return</code> stopping the function beforehand.</p>

<h2>Surprise mutation</h2>

<p><code>getState</code> has a problem. One would assume, reading only the function signature and not the source, that it doesn't change the class - and only computes a value to return it. However, that's not the case - a member is changed. There are several different ways to deal with this depending on your intent:</p>

<ul>
<li>Rename the function to describe what it actually does (<code>checkValidity</code>?)</li>
<li>Separate the <code>check</code> function from the <code>isValid</code> function</li>
<li>Don't store a <code>state</code> as a member at all, and only have an <code>isValid</code> function</li>
</ul>
    </div>