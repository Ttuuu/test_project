<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Improvements:</p>

<ul>
<li>Java 7 <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try-with-resources</a> handles closing of all that IO in normal and Exceptional circumstances</li>
<li>Skip all lines until <code>i</code>'th. Original code loaded the whole file into memory for no benefit.</li>
<li>Safely handle small file (<code>readLine()</code> will return null after the last line)</li>
<li>Safely handle short line (vals array may be shorter than <code>j</code>)</li>
<li>Written as a utility method (better for unit testing)</li>
<li>NOT DONE. Many will say <code>i</code> and <code>j</code> should be named more descriptively. E.g. <code>row</code> and <code>col</code></li>
<li>NOT DONE. Exception handling. Maybe you prefer to return <code>null</code> if the file is missing.</li>
<li>NOT DONE. Some level of Javadoc</li>
</ul>

<pre class="lang-java prettyprint-override"><code>public static String getField(int i, int j, String filename) throws IOException {
    Path path = Paths.get(filename);
    // All these resources will auto-close as we exit the try {} block
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(Files.newInputStream(path)))) {
      String line;
      while ((line = reader.readLine()) != null) { // Read and discard, keeping only current line
        if (i-- == 0) {
          // We made it to the i'th line... 
          String[] vals = line.split(","); // ... Check if we have a j'th field
          return vals.length &gt; j ? vals[j] : null;
        }
      }
      // File finished before i'th line was met
      return null;
    }
  }
</code></pre>

<p>For kicks, here's a Java 8 version using <code>Stream</code> and <code>Optional</code></p>

<pre class="lang-java prettyprint-override"><code>  public static Optional&lt;String&gt; getFieldJava8(int i, int j, String filename) throws IOException {
    return Files.lines(Paths.get(filename))
      .skip(i)
      .findFirst() // This will output the i'th line
      .flatMap(row -&gt; {
        String[] vals = row.split(","); // check if we have a j'th field
        return vals.length &gt; j ? Optional.of(vals[j]) : Optional.empty();
      });
  }
</code></pre>
    </div>