<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your ID is a <code>long</code> created from 2 <code>int</code>s, so you can fit both <code>int</code>s inside this one <code>long</code> side by side:</p>

<pre><code>long key = (long)nums[i] &lt;&lt; 32 | i;
</code></pre>

<hr>

<p>You have a lot of unnecessary <code>if</code> statement evaluations. You could get rid of them by adding the first <code>k</code> elements from the array into the list in a separate loop, and then starting a second loop from <code>i = k</code> that can safely do <code>med.Remove</code> and <code>med.Add</code> without <code>if</code>s.</p>

<p><code>k</code> never changes, so instead of evaluating <code>k % 2 == 0</code> and <code>k / 2</code> and <code>k / 2 - 1</code> in every iteration, you can store the final value in a variable before the loop begins. Then in the loop you only need to call</p>

<pre><code>res.Add(med[med.Keys[medianIndex]]);
</code></pre>

<p>or</p>

<pre><code>res.Add( ((long)med[med.Keys[medianIndex]] + med[med.Keys[medianIndex2]])/2.0 );
</code></pre>

<hr>

<p>Making <code>res</code> a list and in the end converting it into an array slows your code down a lot. You can make it an array (of size <code>nums.Length - k + 1</code>). Lists come with the overhead of their extra functionality, so you waste time not only on the conversion to an array but also on every time you add a number to the list.</p>
    </div>