<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of generic good practices are  </p>

<ul>
<li>Try to avoid using global variables(You can pass wg, ch &amp; errItems as arguments to function)</li>
<li>Single Responsibility function(A function should do only once task. Makes it easy to test.)</li>
<li>As far as possible pass dependencies as variables or using dependency injection etc.</li>
</ul>

<p>Specific to this snippet you can:</p>

<ul>
<li><p>Pass connectionString as either flag variables or args. Usually secrets like (db user, password) etc should not be hardcoded. It also makes it easier to run in multiple environments like test, production etc.</p></li>
<li><p>Try to break the main function into smaller functions. (like fetchRows, ProcessRows etc) Will make it testing easier and reusable.</p></li>
<li><p>saveAndUpdateFile can be made more generic. You shouldn't pass *sql.DB instead try passing a io.Reader object or just the data that needs to be written to the file.</p></li>
<li><p>Add fetchDBAccomodationFunction and updateDBAccomodation function and pass necessary information as arguments to the functions.</p></li>
<li><p>Check if rows.Next() keeps a connection open to DB. If yes you should first read all the rows, close the connection and then make http calls to download files. It is better not to keep db connections open for a long time.  </p></li>
<li>I'm not sure if you need two separate channels for done &amp; errorItem. Since you are passing error within item you have one channel and based on error make a decision on how to proceed. </li>
</ul>

<pre><code>
    select {
        case item := &lt;-ch:
        wg.Add(1)
        if item.err != nil {
            go printResult(errorItem)
        }else{
            go saveAndUpdateFile(db, done)   
        }
     }


</code></pre>
    </div>