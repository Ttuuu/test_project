<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use functions</h1>

<p>It's generally a good idea to sort your functionality into functions. Allows you for nice reuse and stuff like that.</p>

<h1>string.split()</h1>

<p>So how will we parse? Of course, you can parse every single input like you do, or even upgrade it to a tokenizer engine if you got a lot of spare time and effort. There's really 2 ways to go about there here. The simple one is string.split(). The complicated one is regexes, but you probably won't need these unless you're planning big. </p>

<h1>Map to functions, not precomputed results</h1>

<p>You'll notice I import functions from the <code>operator</code> builtin module. These do the exact same thing as the +, -, /, * and **(power) symbols, but we can use them as functions. This lets us put them in a dict we can create <em>before</em> we ask for user input. It also means we don't have to calculate all the operations, and can stick to only calculating the one we actually are interested in. Do note that this also obsoletes your power function, much as you could have done using ** yourself.</p>

<pre class="lang-py prettyprint-override"><code>from operator import pow, sub, mul, add, truediv

def calculate():
    operators = {
        "+": add,
        "-": sub,
        "/": truediv,  # floordiv also exists, which is integer division
        "*": mul,
        "^": pow
    }
    val = input("Calculate: ")  # Do note that it's already a string, so you don't need to cast to one.
    for symbol, operator in operators.items():
        if symbol in val:  # Check if the symbol is in the string
            a, b = val.split(symbol)
            return operator(float(a), float(b))  # Cast them to floats - all builtin operators can handle them.

if __name__ == "__main__":
    print(calculate())
</code></pre>

<p>Last thing I added was what we call a guard. It makes you able to import this function from another script and use it, without having to run it.</p>

<p>If you want to go for bonus points, you can also switch to regexes for your input parsing.</p>

<h1>Bonus info: Iterators</h1>

<p>Python does a lot of smart things with iterators. For example, we're iterating over a dictionary here. A dictionary looks like this:</p>

<pre class="lang-py prettyprint-override"><code>my_dict = {
    "key1": "value1",
    "key2": "value2",
    # etc...
}
</code></pre>

<p>It's a hashtable for the keys, and under the hood these are linked to pointers to the values. We can iterate over a dictionary in three ways: Over the keys, over the values, and over key: value pairs. </p>

<h2>Keys</h2>

<pre class="lang-py prettyprint-override"><code>for key in my_dict:
    # "key1", "key2"....
# OR:
for key in my_dict.keys():
    # "key1", "key2"....
</code></pre>

<h2>Values</h2>

<pre class="lang-py prettyprint-override"><code>for value in my_dict.values():
    # "value1", "value2"....
</code></pre>

<h2>key/value pairs</h2>

<pre class="lang-py prettyprint-override"><code>for key, value in my_dict.items():
    # ("key1", "value1"), ("key2", "value2")....
</code></pre>

<p>In case of items(), the iterator gives a tuple of length 2 for every iteration. By assigning that tuple to <code>key, value</code>, we unpack it. This works the same as in the line:</p>

<pre class="lang-py prettyprint-override"><code>a, b = 1, 2
</code></pre>

<p>On the RHS, we construct a 2-length tuple (1, 2), which is passed to the LHS, where it is unpacked to a, b. Since tuples enforce ordering, that's how python decides which value to put where.</p>

<p>See also: <a href="https://docs.python.org/3.7/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">Python Docs Dictionary Looping Techniques</a></p>
    </div>