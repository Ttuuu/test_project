<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another thing I wanted to touch on is the formatting functions. For example, the <code>deformat()</code> function.</p>

<blockquote>
<pre><code>var deformat = function(string) {
  let dollars = string.match(/\$\d+/g)[0].substring(1);
  let cents = string.match(/\.\d{2}/g)[0].substring(1);
  return [parseInt(dollars), parseInt(cents)];
}
</code></pre>
</blockquote>

<p>It seems like this function expects the input string to start with a dollar sign, contain one or more digits, a period and then two digits. If the string doesn't match that format then there will most likely be an error because <code>string.match()</code> wouldn't return an array with at least one element (in both of the first two lines) and thus it wouldn't be able to call the <code>substring</code> function on <code>undefined</code>. </p>

<p>The format could be consolidated to a single regular expression that uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges#Types" rel="nofollow noreferrer">capturing groups</a> as long as the <code>g</code> modifier is removed. And the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" rel="nofollow noreferrer">Number</a> constructor could be used to create numbers instead of using <code>Number.parseInt()</code>.</p>

<pre><code>const dollarCentsPattern = /\$(\d+)\.(\d{2})/;
var deformat = function(string) {
  if (!dollarCentsPattern.test(string)) {
    return []; //or throw an error?
  }
  const matches = string.match(dollarCentsPattern);
  if (matches.length &lt; 3) {
    return []; //or throw an error?
  }
  return [Number(matches[1]), Number(matches[2])];
}
</code></pre>

<p>Named capturing groups could also be used - for example:</p>

<pre><code>const dollarCentsPattern = /\$(?&lt;dollars&gt;\d+)\.(?&lt;cents&gt;\d{2})/;
</code></pre>

<p>Then if it matched, the return value from <code>.match()</code> would contain a <code>groups</code> object with <code>dollars</code> and <code>cents</code> for those matched values.  </p>

<p>It should be noted that regular expressions should only be used when required as they can be expensive. This task could be solved simply by splitting the string on a period, expecting no more than two parts:</p>

<pre><code>function deformat(string) {
  var parts = string.split('.', 2);
  if (parts.length &lt; 2) {
    return []; //or throw error?
  }
  return [Number(parts[0].substring(1)), Number(parts[1].substring(0, 2))]; 
}
</code></pre>
    </div>