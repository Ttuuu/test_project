<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Objects should be making the code easier to read. The Object you name <code>position</code> provides no behavioral benefit and serves only to bloat the code. </p></li>
<li><p>You should be using good old for loops for this rather than the hacky way you use the array iteration function <code>forEach</code></p></li>
<li><p>Use function declarations <code>function islandPerimeter(grid)</code>. Do not use function expressions <code>var islandPerimeter = function(grid)</code></p></li>
</ul>

<h2>Rewrite</h2>

<p>Rewriting your coder I would do it as follows</p>

<pre><code>function islandPerimeter(grid) {
    const W = grid[0].length, H = grid.length;
    const countEdges = (x, y) =&gt; {
        var res = 0;
        if (grid[y][x]) { 
            res += y - 1 &lt; 0 ? 1 : grid[y - 1][x] === 0;
            res += x + 1 &gt;= W ? 1 : grid[y][x + 1] === 0;
            res += y + 1 &gt;= H ? 1 : grid[y + 1][x] === 0;
            res += x - 1 &lt; 0 ? 1 : grid[y][x - 1] === 0;
        }
        return res;
    };
    var perimeter = 0, x = 0; y = 0;
    for (y = 0; y &lt; H; y ++) {
        for (x = 0; x &lt; W; x ++) {
            perimeter += countEdges(x, y);
        }
    }
    return perimeter;
}
</code></pre>

<h2>A flaw in the problem</h2>

<p>The question states all the land is connected which hints at an optimal solution however the problem is flawed.</p>

<p>There is a solution that is <span class="math-container">\$O(l)\$</span> where <span class="math-container">\$l\$</span> is the land cell count if you had one extra tit-bit of information, a coordinate of a land cell. </p>

<p>That way you could use a flood fill and thus only need to check land cells. </p>

<p>Without that coordinate  you need to search for the land and the worst case would have the land cell the last cell making it <span class="math-container">\$O(n)\$</span> where <span class="math-container">\$n\$</span> is the cell count.</p>

<h2>Performance</h2>

<p>You can however improve the performance by counting edges as you cross them. If a cell is different than the cell to the left, or above then there is a edge to count</p>

<pre><code>function islandPerimeter(grid) {
    const W = grid[0].length, H = grid.length;
    var x = 0, y = 0, res = 0, prevRow = 0, prev;
    while (y &lt; H) {
        x = prev = 0;
        const row = grid[y];
        const prevCount = res;
        while (x &lt; W) {
            const cell = row[x];
            res += cell !== prev;
            res += prevRow &amp;&amp; prevRow[x] !== cell;
            prev = cell;
            x++;
        }
        res += prev;
        if (res &amp;&amp; prevCount === res) { return res }
        prevRow = row;
        y++;
    }
    while (x--) { res += prevRow[x] === 1 }
    res += prevRow[0];
    return res;
}
</code></pre>

<p>As the question states that all he land is connected thus I added an early exit if there is an empty row after some land cells have been found.</p>

<h2>Flood Fill</h2>

<p>And here is a flood fill example. Its just a quick write as it does not really provide an improvement without at least a coordinate of a land cell. There are a few optimizations that could be added and it also needs to modify the map so to not repeat cells</p>

<p>It finds the first cell by stepping over empty cells.</p>

<pre><code>function islandPerimeter(arr) {
    const H = arr.length, W = arr[0].length, SIZE = H * W;
    const EDGES = [[1, 0], [-2, 0], [1, -1], [0, 2]];
    const stack = [];

    const isLand = () =&gt; (cell = arr[y] &amp;&amp; arr[y][x] || 0) &gt; 0;
    const isLandIdx = () =&gt; (x = idx % W, y = idx / W | 0, isLand());
    const checked = () =&gt; (stack.push([x,y]), arr[y][x] = 2);
    var x, y, res = 0, idx = 0, cell;
    while (idx &lt; SIZE &amp;&amp; !isLandIdx()) { idx++ }
    if (idx &lt; SIZE) {
        checked();
        while (stack.length) {
            [x, y] = stack.pop();
            for (const e of EDGES) {
                x += e[0];
                y += e[1];
                isLand() ? (cell === 1 &amp;&amp; checked()) : res++;
            }
        }
    }
    return res;
}
</code></pre>
    </div>