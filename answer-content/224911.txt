<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Implementation</h1>

<h2>Simple fixes</h2>

<p>The following section contains a handful of simple fixes that I won't really justify much, see them as quickfire opinions:</p>

<ul>
<li>Make the type of a field (or variable) declaration as high up the hierarchy as possible. This means <code>HashMap</code> should be <code>Map</code>, <code>ArrayList</code> should be <code>List</code> and so on.</li>
<li>Use the diamond operator for initializations with generics. <code>new HashMap&lt;String, Logger&gt;()</code> turns into <code>new HashMap&lt;&gt;()</code> that way. This is not always available.</li>
<li>Have an empty line between method bodies.</li>
<li>Use guard clauses to reduce the level of nesting with early returns. e.g. in <code>addFileHandler</code> start with:

<pre><code>if (fileHandler != null) { 
    return;
}
</code></pre>

<ul>
<li>The same advice as for declaration types applies for method return types. You generally don't want to have a specific type returned if you can use an interface.</li>
<li>Do not put parentheses around return values. They are not performing an actual function in that manner.</li>
<li><code>finnest</code> should be spelled <code>finest</code> in <strong>all</strong> instances.</li>
<li>A filed should be declared on it's own line every time.</li>
</ul></li>
</ul>

<h2>Not so simple fixes</h2>

<p>This section goes a bit more into depth. The changes suggested here require a more intimate familiarity with the Java libraries. A lot of the suggestions can carry over to other languages as well, though.</p>

<p><code>getLogger</code> should make use of <code>computeIfAbsent</code>, which drastically simplifies the code to:</p>

<pre class="lang-java prettyprint-override"><code>return loggers.computeIfAbsent(className, name -&gt; {
    Logger result = new Logger(name);
    if (fileHandler != null) { 
        result.setOutputForLogFile(fileHandler.out);
    }
    return result;
});
</code></pre>

<p>Notice that we don't need to check for the presence of the key (<code>containsKey</code>) and we don't need to manually put the result into the map either.</p>

<p>Carrying on to <code>addFileHandler</code> I personally would add an additional empty line before the <code>for</code> loop, just to separate it from the rest.</p>

<p>Moving on to the allowedLevels operations.<br>
The semantics you are looking for here (no duplicates, quick <code>contains</code> check) are best encapsulated in a <code>Set</code>. Changing <code>allowedLevels</code> to be a <code>Set&lt;LogLevel&gt;</code> would vastly simplify your code (and speed it up) since you don't need to perform contains-checks (which are <strong>linear</strong> in an ArrayList) to avoid duplicate items. The implementations simplify to:</p>

<pre><code>addAllowedLevel(LogLevel l) { allowedLevels.add(l); }
removeAllowedLevel(LogLevel l) { allowedLevels.remove(l); }
isLevelAllowed(LogLevel l) { return allowedLevels.contains(l); }
</code></pre>

<hr>

<p>Now we can take a look at <code>Logger</code>.</p>

<p>The first thing I noticed is that your Logger can change output. Generally you wouldn't want to expose that kind of capability to the user, especially not in a multithreaded environment. Results can be somewhat unpredictable.</p>

<p>Next I noticed that <code>log</code> does <strong>not</strong> perform any kind of checking whether logging is enabled at all. If no log-level were allowed, <code>log</code> should not be writing any output. Unfortunately it does...</p>

<p><code>checkAllowed</code> can be simplified to directly return the condition you specified.
Note also that the check you implemented there does not account for the typical use-case of hierarchical log-levels. I'd expect WARN and ERROR messages to be logged when I allow the INFO level. In your implementation I'd explicitly need to specify that all the log levels of INFO and higher priority are allowed. </p>

<p>Additionally you're not accounting for the idea of different loggers being configured differently wrt. the logging level they have.</p>

<p>Sidenote: you're abusing a boolean return of the overloads without Throwable to implement the overloads with throwable. This is somewhat ugly because you're exposing internal behaviours to external consumers.</p>

<p>also: <code>formatLog</code> should be implemented in terms of <code>String.format</code> like so:</p>

<pre><code>    return String.format("[%s] [%s] %s: ", LogManager.getCurrentTimeAndDate(), name, l);
</code></pre>

<hr>

<p>Lastly a quick look at <code>FileHandler</code> before comparing this to a logging library like Log4J.</p>

<p>You're not actually using <code>autoFlush</code>, it doesn't change any behaviour whether it's enabled or not.
Remove unused fields.</p>

<p>In addition your code should be using the <code>java.nio.file</code> API instead of the <code>java.io.file</code> API (which is predating the nio API by almost a decade).</p>

<p><code>fileName</code>, <code>filePath</code> and <code>file</code> could (and should) be declared as <code>final</code>. They are not expected to ever change. In fact, <code>fileName</code> and <code>filePath</code> are only used in the constructor and shouldn't be fields at all.</p>

<p>It's most likely also a bad idea to have a Reader <strong>and</strong> a Writer open on the same file. Results from concurrent operations and non-flushed operations are very likely to be unpredictable and / or dangerous.</p>

<p>Exposing getters and setters for the writer, reader and file is a bad idea as well. It allows external consumer to change the internal state of your class in ways that you don't want to have.</p>

<h1>Comparison to existing logging libraries</h1>

<p>Let me put it like this: You're not coming away in a good shape from this comparison.
A large number of almost necessary features is completely missing from your implementation. Here some examples:</p>

<ul>
<li>Log-Level definitions depending on the package </li>
<li>Log-Format customizations</li>
<li>Hierarchical Log-Level behaviour</li>
<li>Multi-Backend logging (one logger logging to multiple places)</li>
<li>Log-Message formatting with arbitrary parameters</li>
<li>Basic Threadsafety</li>
</ul>
    </div>