<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Prefer generators instead of lists</h3>

<p><code>build_queue</code> creates a list of tasks up front.
It's unnecessary to store all task details in memory up front.
You could use a generator instead, and <code>yield</code> the task parameters.
That will minimize the memory use,
by generating the task details just before the execution of the individual tasks.</p>

<h3>Avoid busy loops</h3>

<p>This piece of code results in <a href="https://en.wikipedia.org/wiki/Busy_waiting" rel="noreferrer">busy loop / busy waiting</a>:</p>

<blockquote>
<pre><code>while True:
    # make sure resources are available
    if not self.workers:
        continue

    # ...
</code></pre>
</blockquote>

<p>That is, when no workers are available and the queue is not empty, the main thread will be spinning until a worker becomes available. Such spinning is useless activity for the CPU, wasting resources.
Some amount of sleeping would help, but there's a much better solution (keep reading).</p>

<h3>Use the libraries, Luke...</h3>

<p>Instead of implementing a worker pool and job queue yourself,
it's better to use what is provided by the Python Standard Library for <a href="https://docs.python.org/3/library/concurrency.html" rel="noreferrer">concurrent execution</a>.
Notably, the <code>Pool</code> class if you go with process-based parallelism (recommended for your example),
or the <code>Queue</code> class if you go with thread-based parallelism.</p>

<p>You will be able to get rid of your manual queue management code,
get something more robust and performant in return,
and be able to focus on the implementation of the worker.</p>
    </div>