<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code performs one recursion per character and <a href="https://stackoverflow.com/q/3323001">recursion depth is limited</a>. For long inputs, your code will raise <code>RecursionError: maximum recursion depth exceeded</code>. Replacing recursion with an explicit loop solves the issue.</p>

<p>Also, if you start the calculation at <code>k = 1</code> with <code>memo[-1]</code> and <code>memo[0]</code> properly initialized and then work upwards to <code>k = len(s)</code>, the code will become significantly simpler. When calculating <code>memo[k]</code>, you only ever access <code>memo[k-2]</code> and <code>memo[k-1]</code>, so you can store only those. I renamed them <code>old</code> and <code>new</code>. Here is how it could look like:</p>

<pre><code>def num_ways_dp(s):
    old = new = 1
    for i in range(len(s)-1):
        if int(s[i:i+2]) &gt; 26: old = 0 # no two-digit solutions
        if int(s[i+1]) == '0': new = 0 # no one-digit solutions
        (old, new) = (new, old + new)
    return new

if __name__ == '__main__':
    number = input()
    while number != '0':
        print(num_ways_dp(number))
        number = input()
</code></pre>
    </div>