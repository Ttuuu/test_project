<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Martin York already has a very good point about the iterator, so I'll not comment on that.</p>

<h1>Avoid writing types twice</h1>

<p>In <code>main.cpp</code> you are writing statements like:</p>

<pre><code>Tree&lt;std::string&gt; tA = Tree&lt;std::string&gt;("A");
</code></pre>

<p>You are needlessly repeating the type. Also, it might cause errors if you wanted the same type on both sides, but made a mistake, and if one type is implicitly convertible to the other. Write one of the following lines instead:</p>

<pre><code>Tree&lt;std::string&gt; tA("A"); // or:
auto tA = Tree&lt;std::string&gt;("A");
</code></pre>

<h1>Trees are made of nodes, and a node is not a tree</h1>

<p>A tree structure is a collection of nodes with certain relationships between the nodes. However, in your code a <code>Tree&lt;&gt;</code> is just one node. This is very confusing. It would be much nicer to have two types to distinguish between those concepts. For example:</p>

<pre><code>class Tree {
    public:
    class Node {
        ...
    };

    class Iterator {
        ...
    };

    Iterator begin();
    Iterator end();
    ...

    private:
    Node *root;
};
</code></pre>

<p>Once you have that in place, you can starting thinking about having the <code>Tree</code> manage the lifetime of the nodes.</p>

<h1>No need to repeat <code>&lt;T&gt;</code> inside the template</h1>

<p>Inside a class template you don't have to repeat the <code>&lt;T&gt;</code> for every time you reference the class itself. So for example:</p>

<pre><code>template &lt;typename T&gt;
class Tree {
    ...
    std::vector&lt;Tree *&gt; children;
    ...
};
</code></pre>

<h1>Lifetime of tree nodes</h1>

<p>Your node class references other nodes via raw pointers. That is very fragile. Take for example this bit of code:</p>

<pre><code>Tree&lt;int&gt; tA(1);

if (some_condition) {
  // add a second item
  Tree&lt;int&gt; tB(1, &amp;tA);
}

traverse(tA);
</code></pre>

<p>At this point, <code>tA</code> has a reference to <code>tB</code>, but the latter has gone out of scope, so the reference is no longer valid, leading to a crash at best.</p>

<p>Instead of storing references to child nodes in the <code>children_</code> member variable, you could perhaps make that variable hold actual nodes, like so:</p>

<pre><code>template &lt;typename T&gt;
class TreeNode {
    public:
    void addChild(T t) {
        children.push_back(t);
    }

    T val;

    private:
    std::vector&lt;TreeNode&gt; children_;
}
</code></pre>

<p>And use it like so:</p>

<pre><code>TreeNode&lt;int&gt; tA(1);
tA.addChild(2);
</code></pre>

<p>Of course, the above is simplified, and you'd want to avoid making copies by using move semantics. But explicit ownership is the safest thing to implement.</p>

<p>Another option would be to use <code>shared_ptr&lt;&gt;</code> to manage the lifetime of nodes.</p>
    </div>