<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your data model is slowing down your code.</p>

<pre><code>    ArrayList&lt;List&lt;Object&gt;&gt; inputPairs = new ArrayList&lt;&gt;();
    ArrayList&lt;String&gt; nameIterList = new ArrayList&lt;&gt;();//To store names in scanned order
    HashMap&lt;String, Integer&gt; dupeCount = new HashMap&lt;&gt;();//To consider cases where there are people with same names
</code></pre>

<p>Calling <code>ArrayList.add()</code> will add an item to the array list.  If insufficient room exists in its storage area, the area reallocated double its previous size, and the information copied to the new storage area.  With 50000 names, with an initial allocated space of 8 items, you will go through 13 reallocations of the <code>inputPairs</code> and <code>nameIterList</code> containers.</p>

<p>The <code>HashMap</code> stores its information differently, but it will suffer from the same doubling of capacity steps, with an additional penalty of "rebinning" the contents into the proper bins.</p>

<p>All of this takes time, and all of this can all be avoided by pre-allocating your storage container sizes.  You know what the limit is: 50000.  Alternately, you can read in <code>N</code> and then allocate properly sized storage containers.</p>

<pre><code>    int count = sc.nextInt();
    ArrayList&lt;List&lt;Object&gt;&gt; inputPairs = new ArrayList&lt;&gt;(count);
    ArrayList&lt;String&gt; nameIterList = new ArrayList&lt;&gt;(count);
    HashMap&lt;String, Integer&gt; dupeCount = new HashMap&lt;&gt;(count*2);
</code></pre>

<p>A <code>HashMap</code> will rebin by default at 75% capacity, so I've initialized it at double the required capacity, so it won't exceed the limit.</p>

<hr>

<p><code>ArrayList&lt;List&lt;Object&gt;&gt;</code> may not be the worst storage structure to use, but it comes close.  <code>List.of(score,name)</code> should allocate a specialized, immutable two-member structure to use for the list, but you still have to go through the overhead of the <code>List</code> interface to <code>.get()</code> at the members.  Worst, the <code>score</code> has to be boxed from an efficient <code>int</code> into a full blown <code>Integer</code> object.  This auto boxing takes both time and space.  Worse, the additional object allocations will cause additional cache misses, slowing down the program.  True, the <code>Integer</code> objects will probably all be interned varieties, due to their restricted range, but it all adds up to your time-limit-exceeded issue.</p>

<p><code>List.of(score, name)</code> was used to avoid creating your own simple class:</p>

<pre><code>class StudentRecord {
    String name;
    int score;
}
</code></pre>

<p>Instead of 3 objects (at least) per student, you only have two: the <code>StudentRecord</code> and the <code>name</code>.  Access to the member fields is fast; no <code>.get(int)</code> overhead.  (But even this is overhead that you don't need!)</p>

<hr>

<p>Checking for duplicate names, and creating fake names to avoid the duplicates is a time wasting operation.  We can avoid it, with a smarter algorithm.</p>

<hr>

<h3>The better way</h3>

<p>First: let's simplify the data down to the bare minimum...</p>

<pre><code>int count = sc.nextInt();
String[] names = new String[count];
int[] score = new int[count];
</code></pre>

<p>... two parallel arrays, one containing the student names (in order), and one containing the scores (in order).</p>

<p>Let's jump to the middle...</p>

<pre><code>int[] rank = new int[110];
</code></pre>

<p>You have 110 possible score values, each which corresponds to exactly one rank.  If you have 5 students with a score of 109 and one student with a score of 108, then <code>rank[109]</code> should contain <code>1</code>, and <code>rank[108]</code> should contain <code>6</code>.</p>

<p>Jumping to the end...</p>

<pre><code>for(int i=0; i&lt;count; i++) {
   System.out.printf("%s %d\n", name[i], rank[score[i]]);
}
</code></pre>

<p>... prints out the student, looks up the rank corresponding to their score and prints that as well.</p>

<h3>Creation of the <code>rank[]</code> array</h3>

<p>Since this is a programming challenge, I'll leave this up to you.  There are several ways to do it.  Good luck.</p>
    </div>