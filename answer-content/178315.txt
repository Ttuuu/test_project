<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would start by simplifying the calls to PunktVorStrich. You currently test whether the symbol is there at all, but then your while loop does that in PunktVorStrich also. No need to do it in both places. Also, since PunktVorStrich modifies the parameter object (and List is passed by reference), no need to resassign to equationList when it returns.</p>

<pre><code>PunktVorStrich("*", equationList);
</code></pre>

<p>But more importantly, your PunktVorStrich can do all of your logic for you. It currently compresses your expression by evaluating a sub-expression and replacing the sub-expression with the result. This could be done from start to finish in your whole expression.</p>

<p>I would create a constant string array of symbols, in the order you want to process them. Then set up a loop which will pass each one into PunktVorStrich. You will need to modify PunktVorStrich to handle plus and minus as well, but that won't be hard. </p>

<pre><code>const string[] SYMBOLS = new string[] {"*", "/", "+", "-"};
for (int i = 0; i &lt; SYMBOLS.Length; i++)
    PunktVorStrich(SYMBOLS[i], equationList);
</code></pre>

<hr>

<p>A few more small things:</p>

<ol>
<li>Change the if block in PunktVorStrich to be a switch statement. It's more efficient for this.</li>
<li>Inside the switch, only do the unique part of the process (the actual mathematical evaluation). Then do the Insert after the switch.</li>
<li>You may want to reconsider using int to store the result, since you allow division.</li>
</ol>
    </div>