<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Performance</h1>
<p>What are you trying to determine with this test? I ask because if you're simply trying to compare the speed of sorting in Java vs. sorting in C, you haven't constructed the test correctly. As it stands, the calls to <code>GetIntArrayElements()</code>, <code>GetArrayLength()</code>, and <code>ReleaseIntArrayElements()</code> are doing work that's not counted in the Java case.</p>
<p>If, on the other hand, you're trying to determine if converting your data from Java format to C format and then sorting it in C is faster than just sorting it in Java, then you've got a reasonable test. But the results should be fairly unsurprising. (Though it's always good to test your assumptions!)</p>
<p>If I'm understanding <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/design.html#wp16696" rel="nofollow noreferrer">the documentation</a> correctly, the calls to <code>GetIntArrayElements()</code> and <code>ReleaseIntArrayElements()</code> may be allocating, copying, and freeing memory. Those operations can be time consuming and may explain the differences you're seeing. You should run your code under a profiler to see for sure.</p>
<p>That said, your implementation is about twice as fast as the built-in <code>qsort()</code> function, which needs to make a function call for each comparison. That's pretty decent.</p>
<h1>Naming</h1>
<p>I realize this is just simple sorting but you really should name your function arguments better. For <code>quicksort()</code>, the arguments are the array, the start index of  the range to sort and the end index of the range to sort. Honestly, <code>a</code> is fine for a general-purpose sort function. (If you are writing something more specific and you know the array will represent something specific, you should name the array argument based  on that.)  But there's no reason you can name <code>x</code> and <code>y</code> something like <code>startIndex</code> and <code>endIndex</code>, or at least <code>start</code> and <code>end</code>.</p>
<p>Likewise, when you have a bunch of temporary variables, naming them <code>temp</code>, <code>temp1</code>, and <code>temp2</code> is useless. In <code>partition()</code> the variable <code>temp</code> is the value in the last element of the range, so just call it <code>lastElement</code>. <code>temp1</code> and <code>temp2</code> are used for swapping, so you could name them <code>swap</code>. Although, personally, calling the <code>swap()</code> function you wrote would be clearer and it would likely be inlined anyway, giving you the same speed when compiled with optimizations on.</p>
    </div>