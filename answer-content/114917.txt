<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Solutions to Ternary and Logic Extraction @Caridorc suggestions</p>

<pre><code>def scanning():
    if running:
        output = subprocess.check_output("ping 104.160.131.1", shell = False, universal_newlines=True).splitlines()
        for i in output:
            if "Packets" in i: packet_loss = int(re.search(r'\d+', str(re.findall(r'Lost =\s\d*',i))).group())
            if "Minimum" in i: average_latency = int(re.search(r'\d+', str(re.findall(r'Average =\s\d*',i))).group())

    Status.configure(text="Currently scanning every 10s...", background="Grey")

    StatusPacketLoss.configure(text="Packet(s) lost: {0}".format(packet_loss))
    StatusPacketLoss.configure(background=status_color(packet_loss))
    StatusLatency.configure(text="Average ms: {0}".format(average_latency))
    StatusLatency.configure(background=status_color(average_latency)) # Function for simplicity

    root.after(10000, scanning)

def status_color(x):
    # Determine Packet Loss Color
    color = "Green" if x == 0 else "Red"

    # Determine Average Latency Color
    if x &lt;= 35: color = "Green"
    if 35 &lt; x &lt; 70: color= "Yellow"
    if x &gt;= 70: color = "Red"

    return color
</code></pre>

<p>If anyone has any suggestions to remove redundancy or any excess, feel free to respond.</p>

<p><strong>new status_color function</strong>:</p>

<pre><code>def status_color(x):
    # Determine Packet Loss Color, best out of 4 pings
    if x == 0:
        color = "Green"
    elif x &lt;= 4:
        color = "Red"
    # Determine Average Latency Color
    # Ping will never be low er than 4ms
    elif x &lt;= 35:
        color = "Green"
    elif x &lt;= 70:
        color= "Yellow"
    else:
        color = "Red"
</code></pre>
    </div>