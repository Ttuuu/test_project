<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wauw, many many things to go over. </p>

<p>These are my versions of your "Events"</p>

<pre><code>public class GiveEquipment
{
    private int[] items;
    private Equipment equipment;

    public GiveEquipment(int[] items, Equipment equipment)
    {
        this.items = items;
        this.equipment = equipment;
    }

    public void Execute()
    {
        equipment.AddAll(items);
    }
}

public class RemoveEquipment
{
    private int[] items;
    private Equipment equipment;

    public RemoveEquipment(int[] items, Equipment equipment)
    {
        this.items = items;
        this.equipment = equipment;
    }

    public void Execute()
    {
        equipment.RemoveAll(items);
    }
}

public class GainExperience
{
    private int experience;
    private PlayerStats playerStats;

    public void Execute()
    {
        playerStats.experience += experience; // Unsafe if threaded
    }

    public GainExperience(int experience, PlayerStats playerStats)
    {
        this.experience = experience;
        this.playerStats = playerStats;
    }
}

public class GiveQuest
{
    private int questNr;
    private Quests quests;

    public GiveQuest(int questNr, Quests quests)
    {
        this.questNr = questNr;
        this.quests = quests;
    }

    public void Execute()
    {
        quests.Add(questNr);
        quests.ShowQuestUpdatedIcon();
    }
}

public class RemoveQuest
{
    private int questNr;
    private Quests quests;

    public RemoveQuest(int questNr, Quests quests)
    {
        this.questNr = questNr;
        this.quests = quests;
    }

    public void Execute()
    {
        quests.Remove(questNr);
        quests.ShowQuestUpdatedIcon();
    }
}

public class IncrementQuestStatus
{
    private int questNr;
    private Quests quests;

    public IncrementQuestStatus(int questNr, Quests quests)
    {
        this.questNr = questNr;
        this.quests = quests;
    }

    public void Execute()
    {
        quests.IncrementStatus(questNr);
        quests.ShowQuestUpdatedIcon();
    }
}
</code></pre>

<p>If you insist on your current structure for the class <code>Event</code> then you could redo <code>PlayEvent</code> like this:</p>

<pre><code>    public void PlayEvent(EventManager em)
    {
        switch (effect)
        {
            case Effect.GiveExperiencePoints:
                new GainExperience(intModifiter, playerStats).Execute();
                break;
            case Effect.GiveItemToPlayer:
                new GiveEquipment(effectItemsIndexes, equipment).Execute();
                break;
            case Effect.RemoveItemFromPlayerEquipment:
                new RemoveEquipment(effectItemsIndexes, equipment).Execute();
                break;
            case Effect.GiveQuest:
                new GiveQuest(intModifiter, quests).Execute();
                break;
            case Effect.RemoveQuest:
                new RemoveQuest(intModifiter, quests).Execute();
                break;
            case Effect.IncrementActualStatusOfQuest:
                new IncrementQuestStatus(intModifiter, quests).Execute();
                break;
            case Effect.EnableOrDisableAnotherEvent:
                new AnotherEventsRelationsEvent(intModifiter, enable, em).Play();
                break;
            default:
                throw new UnknownEvent(effect);
        }
    }
</code></pre>

<p>There are many many things to dig into and many things could be improved with this setup.</p>

<ol>
<li><p>The interface is unnecessary as you do not distribute these constructed events, so you do not need to communicate the exposed methods to anyone. If however you passed the actions to the Event type then an interface would make <strong>a lot</strong> of sense.</p></li>
<li><p><strong>Explicit dependency injection</strong>. You see that I have removed all your <code>manager.getInstance</code> methods. It is bad bad practice to use singletons in any sense. And in no case is it a necessity. (though it feels easier when you do it). Explicit dependency injection is passing the variables as arguments when you construct the types.</p></li>
</ol>

<p>Unity uses MonoBehaviours where you do not control the constructors, but you could construct a dependency system where you inject the types yourself. A bit much to go into, but you can have a think about it.</p>

<ol start="3">
<li><strong>Naming</strong>. Naming is hard but should be telling you something about the behaviour or content of the types inside of this. Manager, container, holder, EventConditional and the like, tells nothing. They can be managers, but don't name them as such. EquipmentContainer =&gt; Equipment, QuestManager =&gt; Quests, PlayerStatsManager =&gt; PlayerStats, etc. You get the point.</li>
<li><strong>Simplicity</strong>. Your events should be as simple as possible. I split your GiveQuest, RemoveQuest, IncrementQuestStatus into their own Event types, and removed your enum. This will give a good decoupling and their behaviour does not necessarily depend on each other. The code becomes a whole lot easier to read, which is the point. Simple code has fewer bugs than complex code. So keep it simple stupid (KISS from the U.S navy). </li>
<li><strong>Maintainability</strong>. (Then we have covered 3 out of 4 of the Code Health points). If you wanted to add a fourth version of Quest modification. In your old code you would have to modify the QuestEvent type. In this new code you never modify existing behaviours, you create a new type for the QuestEvent, therefore do not introduce new bugs into code that used to work. You decouple code to encapsulate problems to places you can easily fix.</li>
</ol>

<p>I have many more things that I could go into, but I will not overwhelm you more than I already have. The overall code looks good, but these are just my points. Simplifying code often ensure much better quality in the long run.</p>
    </div>