<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Not all counting problems require enumerating the items being counted. If you were asked to count how many sheep there are in total if there are <span class="math-container">\$n\$</span> trucks with <span class="math-container">\$k\$</span> sheep each, you could write something like:</p>

<pre><code>total_sheep = 0
for truck in range(n):
    for sheep in range(k):
        total_sheep += 1
</code></pre>

<p>Or you could cut to the chase and compute it as:</p>

<pre><code>total_sheep = n * k
</code></pre>

<p>The problem you are trying to solve is more subtle, but can be attacked in a similar fashion. <a href="https://en.wikipedia.org/wiki/Modular_arithmetic" rel="noreferrer">Modular arithmetic</a> will be your friend in doing this. Rather than looking at the setting times as single numbers, convert them to tuples of <code>(quotient, remainder)</code> after dividing by <span class="math-container">\$X\$</span>. This would e.g. convert the list of times for the second example into:</p>

<pre><code> 5 --&gt; (0, 5)
22 --&gt; (3, 1)
17 --&gt; (2, 3)
13 --&gt; (1, 6)
 8 --&gt; (1, 1)
</code></pre>

<p>We can use this information to prune the list of alarms: if any two alarms have the same remainder, they will ring at the same time, so we only need to keep the smaller one. This would convert the above list, after also sorting it, into:</p>

<pre><code> 5 --&gt; (0, 5)
 8 --&gt; (1, 1)
13 --&gt; (1, 6)
17 --&gt; (2, 3)
</code></pre>

<p>Those two numbers tell us in which of the <span class="math-container">\$X\$</span> minute periods the alarm sounds for the first time, and at what offset into that period does it first go off. So we can process it sequentially and know that:</p>

<ul>
<li>at the end of the first (0) period, 1 alarm has sounded for the first time, a total of 1 alarm will sound in every subsequent period, and the total number of alarms sounded is also 1.</li>
<li>at the end of the second (1) period, 2 alarms have sounded for the first time, 3 alarms will sound in every subsequent period, and the total number of alarms sounded is 4.</li>
<li>at the end of the third (2) period, 1 new alarm has sounded, 4 alarms will sound every period, and a total of 8 alarms will have sounded.</li>
</ul>

<p>Since there are no more alarms to process, we have 8 alarms so far, 4 more sounding each period, and want to reach a total of 12, some simple math tells us that this will happen during the fourth (3) period, and that it will be the last of the alarms that will reach it.</p>

<p>To make the math more clear, lets imagine that we wanted to reach a total of 14 alarms instead. Since 8 have already sounded, we have 14 - 8 = 6 more to go. Since 4 alarms will sound in each period, and the quotient and remainder of 6 divided by 4 are 1 and 2, we know that we will reach our target after 1 full more period, plus 2 of the four alarms in the next period. This translates to 4 full periods, plus the time for the second alarm in that period to sound. The time of 4 full periods is 7 * 4 = 28. We need to add the offset of the second alarm <strong>when sorting them by offset, not by start time</strong>, so we need to add 3, not 1, and the end result would be 31.</p>

<p>This general outline omits many gruesome details, like what to do if we reach the target number of alarms before we finish processing the list. And the math described above is hard to get right in all corner cases, as there are many chances for off-by-one errors. I'm not going to spoil the fun for you by coding it up: give a try, and I'll be happy to review your next version.</p>
    </div>