<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have time to give you a full review, so I'll just add some comments about <code>checkWinner</code>:</p>

<ul>
<li>It will read better if you remove the mutation of global state from it.  Make it a pure function that returns <code>true</code> or <code>false</code>.  </li>
<li>You might consider using a 2D array as your data structure.  This isn't necessary, but it maps more naturally to the visual board, and will likely clean up some of your logic.</li>
</ul>

<p>As for the duplication, you can remove a lot of it by introducing a helper function to capture the abstract logic that's being repeated in every block.  This will also clarify the high-level logic of checking for a winner:</p>

<pre><code>function checkWinner() {
  for (var i = 0; i &lt; board.length; i++) {
    var rightWin = winAt(i, 1)
    var downWin = winAt(i, width)
    if (rightWin || downWin) return true
  }
  return false
}

function winAt(i, step) {
  if ( board[i] === undefined ) return false
  for ( var j = 1; j &lt; 5; j++) {
    var nextIndex = i + (j * step)
    if ( board[i] !== board[nextIndex] ) return false
  }
  return true
}
</code></pre>

<h3>EDIT: Answer to question</h3>

<p>Green Ball, regarding the problem you mentioned with using a 2D array, there are ways around that: you can pad with extra rows of undefined, or you can abstract a <code>cell(i, j)</code> which hides the ugly bounds checking, and keeps it in one place.  Indeed, that last point is the key one, not whether you use a 1D or 2D array.</p>

<p>In your current implementation, the arithmetic logic around rows is forced out on the client: any code that wants to get an <code>i, j</code> pair must do the calculation itself.  Currently happens in <code>checkWinner</code> and <code>tileClick</code>: <code>board[tile + row * width]</code>.  It also happens implicitly in the double loop that constructs the html.</p>

<p>Regardless of the underlying structure that holds the <code>board</code>, you want your client code to be able to work with the concepts of "rows" and "columns" as first class citizens, since that's how we humans are thinking about this.  It will make the code more natural. </p>
    </div>