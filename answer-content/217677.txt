<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will proceed from a high level to a low level perspective.</p>

<p>Starting with main.cpp:</p>

<blockquote>
<pre><code>Game pass;
pass.onOffSwitch("close");
</code></pre>
</blockquote>

<p>The meaning of these two lines are not clear without reading the contents of the class <code>Game</code>. That means that not only do I need other pieces of code, but different files, to understand these two lines.</p>

<p>Having looked into the <code>Game</code> class, it becomes apparent that the game, when it is created, starts itself in the constructor. This is not what you would expect from the above code lines.</p>

<p>It would be easier to understand if the constructor were only used to construct the instance, without executing any logic. Viewing the <code>main</code> function as the "user" of the instance, what I usually try to do is formulate what that piece of code is supposed to achieve in words inside of my head, and then translate it to code.</p>

<p>"I want to create an instance of the Hangman game and then start it.", translated to C++:</p>

<pre><code>Game hangman;
hangman.start("words.txt");
</code></pre>

<hr>

<p>Let's look at the constructor:</p>

<blockquote>
<pre><code>// Constructor opens file and invokes newGame function
Game::Game()
{
    onOffSwitch("open");
    newGame();
}
</code></pre>
</blockquote>

<p>The comment tells us that <code>onOffSwitch</code> opens a file, but the code does not indicate that. Opening the file is all it does (apart from some error handling), so lets suppose we rename it to <code>readWordsFromFile</code>. (We will look at the <code>onOffSwitch</code> method in a moment.)</p>

<p>The next thing the comment tells us is that it invokes the method, but that is something the code itself tells you already. It is usually better to only comment <em>why</em> the code does something (if it helps understanding it), but not <em>what</em> it does.</p>

<p>An example of how I would rewrite that piece of code (at this level, not considering further improvements we will look at) is this:</p>

<pre><code> Game::Game()
 {
     readWordsFromFile();
     newGame();
 }
</code></pre>

<p>With the renamed method name, the comment becomes obsolete and can be removed, so the maintainer has less to read for the same understanding.</p>

<hr>

<p>In the previous section, we renamed the method <code>onOffSwitch</code>. Let's have a look at why that name is not a good fit.</p>

<blockquote>
<pre><code>// Function to open file along a fail-check
int Game::onOffSwitch(std::string command)
{
    if (command == "open")
    {
        inputStream.open("words.txt");
        if (inputStream.fail())
        {
            std::cerr &lt;&lt; "Error Opening File" &lt;&lt; std::endl;
            return -1;
        }
    }
    else if (command == "close")
    {
        inputStream.close();
    }
}
</code></pre>
</blockquote>

<p>Again the comment above the method is a good indication: Whenever you want to add a comment explaining what a method does, that explanation should probably be its name. What this method does is one of two things, depending on a parameter: Either it opens a file, or it closes it.</p>

<p>The parameter is of type string. That means that if you mistype the parameter, the compiler will not warn you, the method will not tell you that something is wrong, instead nothing will happen (at that point). The bugs will probably occur much later in the program, and will be difficult to track. You could use a boolean or enum instead, which would prevent the typo problem. Even better would be to replace it with 2 methods which do just one thing each: <code>openFile</code> and <code>closeFile</code>, and without parameters to select what they should do.</p>

<hr>

<p>Most of your methods do not return anything and do not take any parameters. Instead they change the state of the object, which is essentially global state since all of the code resides inside the class and thus has access to it. This can quickly become very complex and bugs will easily be introduced, but hard to find.</p>

<p>Instead of all these methods that access the file stream to open or close it, to count its lines or to select and read a random line, a better approach could be the following:</p>

<ol>
<li>Open the file stream, read all lines into an <code>std::vector&lt;string&gt;</code>, close the file stream.</li>
<li>Use the vectors <code>size()</code> method to ask it for the number of lines, and use it for calculating the random index.</li>
<li>Using the random index, read directly from the vector of strings, rather than reading through the whole file again.</li>
</ol>

<p>This way the code becomes more readable, more performant and less prone to bugs. For example you will only have to read the file once, and you will not have to care about when the file stream is opened and closed. You open it once, read it, and close it. (This assumes that the file is not millions of words long, which could become a memory issue, but maybe a few thousand words).</p>

<hr>

<p>Let's look at the implementation of some of the other methods.</p>

<blockquote>
<pre><code>void Game::determineAttempts()
{
    if (theWord.length() == 4)
    {
        attempts = 2;
    }
    else if (theWord.length() &gt;= 5 &amp;&amp; theWord.length() &lt;= 7)
    {
        attempts = 3;
    }
    else if (theWord.length() &gt; 7)
    {
        attempts = 4;
    }
    std::cout &lt;&lt; "You have " &lt;&lt; attempts &lt;&lt; " attempts!" &lt;&lt; std::endl;
}
</code></pre>
</blockquote>

<p>Here the implementation does not really fit the method name, while the method name itself is a pretty good choice in my opinion. Instead of calculating the number of attempts, setting some state in the outside worlds (basically global state), and printing to the console, it is better to break things down more into small sub-problems. The sub-problem that this method should solve is this: "Take the word, determine how many attempts the player has, and give me the result."</p>

<pre><code>int Game::determineAttempts(std::string word)
{
    int numberOfAttempts = 0;

    if (word.length() == 4)
    {
        numberOfAttempts = 2;
    }
    else if (word.length() &gt;= 5 &amp;&amp; word.length() &lt;= 7)
    {
        numberOfAttempts = 3;
    }
    else if (word.length() &gt; 7)
    {
        numberOfAttempts = 4;
    }

    return numberOfAttempts;
}
</code></pre>

<p>This version does not write to the console and it does not change any state. Instead, the caller of the method can decide whether to print something to the console and what to do with the number of attempts the player should have.</p>

<p>Note also that not all possible word lengths are checked. What happens when a word has only three letters (or less)?</p>

<hr>

<p>All of <code>Game</code>'s methods are public, but the purpose of <code>public</code> is to expose them to callers outside of the class itself. <code>onOffSwitch</code> is the only method that is called from outside (namely the main function), so all other methods should be private.</p>
    </div>