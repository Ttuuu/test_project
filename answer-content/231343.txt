<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few other things that weren't mentioned so far:</p>

<p>In a few places, you do something like this:</p>

<pre><code>f"{adjust}{os.path.basename(self.p).strip('.jpg') + ' ' + username}"
</code></pre>

<p>Why not simply:</p>

<pre><code>f"{adjust}{os.path.basename(self.p).strip('.jpg')} {username}"
</code></pre>

<p>Speaking of which, your use of <code>str.strip</code> doesn't behave the way you think it does. Take a look:</p>

<pre><code>&gt;&gt;&gt; help(str.strip)
Help on method_descriptor:

strip(self, chars=None, /)
    Return a copy of the string with leading and trailing whitespace remove.

    If chars is given and not None, remove characters in chars instead.

&gt;&gt;&gt; 
</code></pre>

<p>In your case, the optional <code>chars</code> parameter is not <code>None</code>, it's <code>".jpg"</code>. That means it will remove any of the characters specified in <code>chars</code>. Not only that, but since you're using <code>str.strip</code> instead of <code>str.rstrip</code>, you're potentially removing those characters not just from the back, but from the front as well.</p>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; "john_help.jpg".strip(".jpg")
'ohn_hel'
&gt;&gt;&gt;
</code></pre>

<p>Definitely not the desired output in your case.
Using <code>str.rstrip</code> would strip only from the back of the string, but it still wouldn't give you the desired result:</p>

<pre><code>&gt;&gt;&gt; "john_help.jpg".rstrip(".jpg")
'john_hel'
&gt;&gt;&gt;
</code></pre>

<p>If you're using Python 3.4+, you're better of using <code>pathlib</code> anyway instead of all that <code>os.path</code> stuff:</p>

<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path("root/dir/sub/file.jpg").stem
'file'
&gt;&gt;&gt; 
</code></pre>

<p>I would also suggest using an <code>enum.Enum</code> to represent the possible values / options / states of your <code>tk.Radiobutton</code>s. It prevents you from "stringify-ing" the options or doing something like this:</p>

<pre><code>val = item.get()  #radiobutton value
if val == 2:  # checks if yes
    cells[1].text = "*"
elif val == 1:   # checks if no
    cells[2].text = "*"
elif val == 0:   # checks if N/A
    cells[3].text = "*"
</code></pre>

<p>Here's how I might set up a <code>tk.Radiobutton</code> using an enum:</p>

<pre><code>import tkinter as tk


class Application(tk.Tk):

    from enum import Enum


    class RadioOption(Enum):
        Red = 0
        Green = 1
        Blue = 2

    def __init__(self, *args, **kwargs):

        tk.Tk.__init__(self, *args, **kwargs)
        self.title("Title")
        self.geometry("100x100")
        self.resizable(width=False, height=False)

        self.radio_variable = tk.Variable(None, Application.RadioOption.Red)

        def on_radio_variable_change(*args):
            print(self.radio_variable.get())
        self.radio_variable.trace(mode="w", callback=on_radio_variable_change)

        self.radio_button_red = tk.Radiobutton(
            self,
            text="Red",
            variable=self.radio_variable,
            value=Application.RadioOption.Red,
        )

        self.radio_button_green = tk.Radiobutton(
            self,
            text="Green",
            variable=self.radio_variable,
            value=Application.RadioOption.Green,
        )

        self.radio_button_blue = tk.Radiobutton(
            self,
            text="Blue",
            variable=self.radio_variable,
            value=Application.RadioOption.Blue,
        )

        self.radio_button_red.pack(anchor=tk.W)
        self.radio_button_green.pack(anchor=tk.W)
        self.radio_button_blue.pack(anchor=tk.W)

def main():

    application = Application()
    application.mainloop()

    return 0


if __name__ == "__main__":
    import sys
    sys.exit(main())
</code></pre>

<p>And one more tiny nit-pick, in a few different places you do something like this:</p>

<pre><code>self.open_button.grid(row=502, column=0)
self.resetBtn = Button(main, text = "reset", command = reset)
</code></pre>

<p>See how some of the keyword-arguments have additional whitespace, and others do not? Pick one style, but don't do both - personally I would remove the whitespace since that's PEP8 compliant.</p>
    </div>