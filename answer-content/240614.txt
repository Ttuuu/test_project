<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please also see also the code here: <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=574d96b16d82c5816ebc35c5d88acda2" rel="nofollow noreferrer">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=574d96b16d82c5816ebc35c5d88acda2</a></p>

<p>The name of the function <code>u32_to_preformated_vector</code> let me assume I get something else that what I'm actually get. So I think the naming could improve:</p>

<ul>
<li>the function actually does not return a vector, but an array;</li>
<li>the function does invert the input bits. That's completely invisible in the name.</li>
<li>You might even indicate the bit order you handle the conversion in, as not everybody might expect to get the least significant bit/the least significant nonet first.</li>
</ul>

<p>Keeping the mutable array, I came to this code:</p>

<pre><code>pub fn u32_to_preformatted_array(image: u32) -&gt; [[u8; 9]; 3] {
    let mut result = [[0u8; 9]; 3];
    let inverted = !image;
    for n in 0..3 {
        let nonet = inverted &gt;&gt; n * 9;
        for m in 0..9 {
            result[n][m] = 1 &amp; (nonet &gt;&gt; m) as u8;
        }
    }
    result
}
</code></pre>

<p>I thought it would help if I bind the inverted <code>image</code> to a new name (<code>inverted</code>). That way in the <code>for</code> loop the reader sees that it is a different value to the one that was passed to the function as the argument.</p>

<p>I also converted the single <code>for</code> loop to two nested <code>for</code> loops. While nesting these loops in general might cause performance problems, it does no harm here, as the number of iterations in the inner code keep the same (27). That way I think the index handling is clearer than doing a divide and a remainder to calculate them. It might also make the bit order more obvious.</p>

<p>The initial value of the array can be initialized in a compacter way as all values in it are the same (<code>0u8</code> in this case).</p>

<p>I don't think having a mutable array inside the function is a big deal. While I very much go for immutability in general, here the context within which mutation is possible is quite limited. As this is the place where the value gets built, there is no danger of it being used at a different place. From the point you return the value, it will be immutable by the declaration of your function.</p>

<p>I was also trying to get rid of this single <code>mut</code> by using iterators. It's quite easy as long as you change the return type of the function from arrays to vectors:</p>

<pre><code>pub fn u32_to_preformatted_vec(image: u32) -&gt; Vec&lt;Vec&lt;u8&gt;&gt; {
    let inverted = !image;
    (0..3)
        .map(|i| (inverted &gt;&gt; 9 * i) &amp; 0b111_111_111) // `&amp;` not strictly needed
        .map(|nonet| (0..9).map(|i| 1 &amp; (nonet &gt;&gt; i) as u8).collect())
        .collect()
}
</code></pre>

<p>In general I have the impression working in a map/reduce style works a lot better with <code>Vec</code> than on arrays. You can also convert the <code>Vec</code> to a slice, but the conversion to an array is harder and often is done using functions like <code>.clone_from_slice()</code> which require a previously allocated array that is mutable again. I also tried to get a slice for the <code>Vec</code> and then use the <a href="https://stackoverflow.com/questions/25428920/how-to-get-a-slice-as-an-array-in-rust"><code>TryFrom</code> trait</a> to convert it to an array. While I got this working for single dimensional array, I didn't get it to work for the multidimensional array <code>[[u8; 9]; 3]</code>.</p>

<p>There is also rarely a need to go from a <code>Vec</code> to an array when designing the solution. <code>Vec</code> is just a little bit of code around an array (that's why to can get a slice from it so easily). So you don't really save anything when using an array.</p>

<p>Thinking about the whole problem as such, I wonder what's the reason for this conversion. You're blowing a 4 byte value up to using 27 bytes of memory. That way you increase the memory usage of your program, and I don't know what you get for it. I don't think that it will actually improve performance because you loose locality when accessing the data. The caching in your computer will not work as good as by using the original 4 byte value.</p>

<p>If the goal you try to get from the conversion is improved readability, I think you might try to define helper functions to get (or set) the individual bits. The calculations are actually quite easy, are performed in the CPU registers and can be inlined by the compiler. That should be quite fast â€¦ faster than converting the data to this two dimensional array which requires a lot of access to the computer's memory because it cannot be done in registers.</p>
    </div>