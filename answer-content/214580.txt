<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a very solid attempt!</p>

<p>Really, the only negative comment I have is that you collect words into a <code>Vec</code> and then immediately iterate over it. Instead, you can just use the iterator directly.</p>

<p>Regarding avoiding <code>let mut</code>, there's nothing specific to your code I can think of, but there are a few general methods to avoid it.</p>

<p>The first is to make a block and return it from that:</p>

<pre><code>let v = {
    let mut v = vec![2, 3, 1];
    v.sort();
    v
}
</code></pre>

<p>The second is to rebind as immutable.</p>

<pre><code>let mut v = vec![2, 3, 1];
v.sort();
let v = v;
</code></pre>

<p>The third is to use a crate like <code>tap</code>, which provides a trait implemented by everything which provides a <code>tap</code> method.</p>

<pre><code>let v = vec![2, 3, 1].tap(|mut v| v.sort());
</code></pre>

<p>Next, I have some suggestions for alternatives and personal preferences.</p>

<p>Rather than splitting on whitespace then sanitizing words, you could use regex's match function and select all continuous sequences of letters. This has slightly different semantics, since it would separate e.g. <code>"can't"</code> into two words. However, you could instead also allow <code>'</code> and <code>-</code> in a word. By instead scanning by regex with <code>find_all</code>, you can specify exactly what constitutes a word.</p>

<p>Instead of <code>or_insert(0)</code>, you can use <code>or_default()</code>. Since the default for numbers is 0, This does the same exact thing, but is a bit cleaner.</p>

<p>When collecting, I prefer to annotate the type of the variable (<code>let x: T</code>) rather than using turbofish notation (<code>::&lt;T&gt;</code>), I believe it looks cleaner.</p>

<p>The way you're sorting is perfectly fine, but I prefer using <code>sort_by_key</code> when possible (and reasonable). In this case, you can just wrap the key in <code>std::cmp::Reverse</code>, a helpful struct that reverses the <code>ord</code> instance on it's contents.</p>

<p>In general, I don't see any unneeded clones/allocations. Since the hashmap is so temporary, I would typically suggest making it's key a <code>&amp;str</code>, but you can't do this since you have to make your keys lowercase. However, there's a clever way to get around this. You can wrap your <code>&amp;str</code>s in a helper struct that does case insensitive <code>hash</code> and <code>eq</code>. Luckily, there's a crate for this called <code>unicase</code>, with structs for unicode-case-insensitive and ascii-case-insensitive <code>String</code>/<code>&amp;str</code>. By doing this, you eliminate the allocation of a <code>String</code> for each word. Note that this will make your words have the case of the first time they occur, so you may want to lowercase them before printing them.</p>

<p>All together, here's how I might write this program.</p>

<pre><code>use std::cmp::Reverse;
use std::collections::HashMap;

use unicase::Ascii;
use lazy_static::lazy_static;
use regex::Regex;

lazy_static! {
    static ref WORD: Regex = Regex::new("[-'a-zA-Z]+").unwrap();
}

fn main() {
    let data = std::fs::read_to_string("data.txt").unwrap();
    let words = WORD.find_iter(&amp;data);

    let mut freqs: HashMap&lt;Ascii&lt;&amp;str&gt;, usize&gt; = HashMap::new();
    for word in words {
        *freqs.entry(Ascii::new(word.as_str())).or_default() += 1;
    }

    let mut freqs: Vec&lt;_&gt; = freqs.into_iter().collect();
    freqs.sort_by_key(|&amp;(_, freq)| Reverse(freq));

    for (word, freq) in freqs {
        println!("{}: {}", word, freq);
    }
}
</code></pre>
    </div>