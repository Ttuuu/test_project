<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have the following suggestions:</p>

<ol>
<li>Make Suit and Rank enums since they are fixed and are not going to be altered.</li>
<li>It is usually a good practice to make all instance variables private and have getter and setter methods to access them.</li>
<li>Make size final static since it is a constant value and is not going to be changed.</li>
</ol>

<p>Here's the complete code:</p>

<h3>Suit enum</h3>

<pre><code>package cardGame;

enum Suit {
    DIAMONDS,
    CLUBS,
    SPADES,
    HEARTS;
}
</code></pre>

<h3>Rank enum</h3>

<pre><code>package cardGame;

enum Rank {
    ACE,
    DEUCE,
    THREE,
    FOUR,
    FIVE,
    SIX,
    SEVEN,
    EIGHT,
    NINE,
    TEN,
    JACK,
    QUEEN,
    KING;
}
</code></pre>

<h3>Card class</h3>

<pre><code>package cardGame;

class Card {
    private final Suit suit;
    private final Rank rank;

    Card(Suit suit, Rank rank) {
        this.suit = suit;
        this.rank = rank;
    }

    Rank getRank() {
        return rank;
    }

    Suit getSuit() {
        return suit;
    }

    @Override
    public String toString() {
        return rank + " of " + suit;
    }
}
</code></pre>

<h3>DeckOfCards class</h3>

<pre><code>package cardGame;

import java.util.Random;

class DeckOfCards {
    public static final int SIZE = 52;
    private final Card[] cards = new Card[SIZE];

    DeckOfCards() {
        int currentCardIndex = 0;

        for (Suit suit : Suit.values()) {
            for (Rank rank : Rank.values()) {
                cards[currentCardIndex++] = new Card(suit, rank);
            }
        }
    }

    Card[] getCards() {
        return cards;
    }

    Card getCard(int index) {
        return cards[index];
    }

    void shuffleDeck() {
        Random rand = new Random();

        for (int i = 0; i &lt; SIZE; i++) {
            int j = rand.nextInt(SIZE);
            swapCards(i, j);
        }
    }

    void swapCards(int i, int j) {
        Card temp = cards[i];
        cards[i] = cards[j];
        cards[j] = temp;
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.append("Current Deck:\n");

        for (int i = 0; i &lt; DeckOfCards.SIZE; i++) {
            stringBuilder.append("Card #" + (i + 1) + ": " + getCard(i) + "\n");
        }

        return stringBuilder.toString();
    }
}
</code></pre>

<h3>Player class</h3>

<pre><code>package cardGame;

import java.util.ArrayList;
import java.util.List;

class Player {
    private String name;
    private List&lt;Card&gt; cards = new ArrayList&lt;&gt;();

    Player(String name) {
        this.name = name;
    }

    void giveCard(Card card) {
        cards.add(card);
    }

    List&lt;Card&gt; getCards() {
        return cards;
    }

    String printPlayerCards() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(name + " has the following cards:\n");

        for (Card card : cards) {
            stringBuilder.append(card + "\n");
        }

        return stringBuilder.toString();
    }

    @Override
    public String toString() {
        return name;
    }
}
</code></pre>

<h3>CardGame class</h3>

<pre><code>package cardGame;

import java.util.Scanner;

public class CardGame {
    private static final int NO_OF_PLAYERS = 4;
    private final Player[] players = new Player[NO_OF_PLAYERS];
    private final DeckOfCards deckOfCards = new DeckOfCards();

    public static void main(String[] args) {
        CardGame cardGame = new CardGame();

        System.out.println("WELCOME TO THE CARD GAME\n");
        System.out.println("Enter the four players' name below");

        Scanner scan = new Scanner(System.in);
        for (int i = 0; i &lt; NO_OF_PLAYERS; i++) {
            cardGame.players[i] = new Player(scan.next());
        }

        cardGame.deckOfCards.shuffleDeck();

        System.out.println(cardGame.deckOfCards);

        cardGame.dealCards();

        cardGame.displayCardsForAllPlayers();
    }


    private void dealCards() {
        for (int i = 0; i &lt; DeckOfCards.SIZE; i++) {
            players[i % NO_OF_PLAYERS].giveCard(deckOfCards.getCard(i));
        }
    }

    private void displayCardsForAllPlayers() {
        for (int i = 0; i &lt; NO_OF_PLAYERS; i++) {
            System.out.println(players[i].printPlayerCards());
        }
    }
}
</code></pre>
    </div>