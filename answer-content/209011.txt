<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The most unforgivable aspect of this code is that it rethrows a degraded exception.  The original type of the exception (likely an <code>IOException</code>) and the stack trace information are lost when you <code>throw new Exception(â€¦)</code>.</p>

<p>Two acceptable approaches are:</p>

<ol>
<li><p>Log the failure (if a non-null <code>logger</code> was passed).  Then re-throw the <em>original</em> exception.</p>

<pre><code> public static string GetSqlQuery(string namespaceAndFileNameWithExtension, ILogger logger)
 {
      try
      {
           using(var stream = typeof(EmbeddedResourceUtility).GetTypeInfo().Assembly.GetManifestResourceStream(namespaceAndFileNameWithExtension))
           using(var reader = new StreamReader(stream, Encoding.UTF8))
           {
                return reader.ReadToEnd();
           }
      }
      catch (Exception exception)
      {
           logger?.Error($"Failed to read query file {namespaceAndFileNameWithExtension}.{Environment.NewLine}{exception.HResult}: {exception.Message}");
           throw;
      }
 }
</code></pre></li>
<li><p>Throw a custom exception, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.exception.innerexception" rel="nofollow noreferrer">wrapping the original exception</a>.</p>

<pre><code> public static string GetSqlQuery(string namespaceAndFileNameWithExtension)
 {
      try
      {
           using(var stream = typeof(EmbeddedResourceUtility).GetTypeInfo().Assembly.GetManifestResourceStream(namespaceAndFileNameWithExtension))
           using(var reader = new StreamReader(stream, Encoding.UTF8))
           {
               return reader.ReadToEnd();
           }
      }
      catch (Exception exception)
      {
           throw new EmbeddedResourceException($"Failed to read query file {namespaceAndFileNameWithExtension}", exception);
      }
 }
</code></pre>

<p>In this case, requiring an <code>ILogger</code> just isn't worth it.  The caller has all of the information in the <code>EmbeddedResourceException</code>, and can log it if it wants.</p></li>
</ol>

<p>I recommend the second approach, because it respects the principle of separation of concerns.</p>
    </div>