<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>I would argue that this base class doesn't add enough state / operations to be a base class. Consider using a mechanism other than inheritance to accomplish boiler-plate fallback serialisation.</p>

<hr>

<h2>Encapsulation</h2>

<p>There is some debat whether <em>private</em> methods (is <em>protected</em> considered private in this context?) should even be tested. I like <a href="https://stackoverflow.com/questions/9122708/unit-testing-private-methods-in-c-sharp">Keith Nicolas' answer</a> why you shouldn't.</p>

<blockquote>
  <p><em>The idea of a unit test is to test the unit by its public 'API'.</em></p>
</blockquote>

<hr>

<h2>Naming Conventions</h2>

<ul>
<li><p>You are following <a href="https://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html" rel="nofollow noreferrer">Roy Osherove's</a> naming standards that have format:[UnitOfWork_StateUnderTest_ExpectedBehavior]</p></li>
<li><p>I'm more a fan of the [ShouldDoThis] and [ShouldDoThis_WhenThatOccurs] format. There is a nice <a href="https://lostechies.com/erichexter/2013/01/13/shouldlibrary/" rel="nofollow noreferrer">Fluent Should API</a> available that could aid testing.</p></li>
</ul>

<p>As an example:</p>

<blockquote>
<pre><code>Serialize_ValueHasUnsupportedType_SerializeCoreCalledWithFallbackType
</code></pre>
</blockquote>

<p>vs  </p>

<pre><code>ShouldCallSerializeCoreWithFallbackType_WhenCallingSerializeWithUnsupportedType
</code></pre>

<hr>

<h2>Unit Test should test one thing</h2>

<p>Some of your tests (like <code>Deserialize_ValueHasTargetType_DeserializeCoreNotCalled</code>) perform both white-box as black-box tests. <a href="https://stackoverflow.com/questions/235025/why-should-unit-tests-test-only-one-thing">We could argue</a> whether these should be split into two separate unit tests; (1) one checking core is not called, and (2) one checking the result it the value specified. If you do decide to keep one unit tests for both assertions, I would change its name to include that the value itself should be returned.</p>

<blockquote>
<pre><code>// white-box test
settingConverter.Assert();

// black-box test
Assert.AreEqual("foo", result);
</code></pre>
</blockquote>
    </div>