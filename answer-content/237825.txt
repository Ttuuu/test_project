<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Console Isolation</strong></p>

<p>You've done a good job separating the console from the actual logic of your code.  This small thing makes your code much easier to reuse in different applications.</p>

<p><strong>Parameterised Tests</strong></p>

<p>Parameterised tests can be great for running related tests against test data.  However, there's a risk that they can obscure what it is that you're trying to test.  So, looking at one of your test cases:</p>

<blockquote>
<pre><code>{ "10 10","","MMRMMRMRRM","3 3 E","MMRMMRMRRM", "Error: Rover position cannot be empty or contain any negative number and the position must be N S W or E." }
</code></pre>
</blockquote>

<p>The error message at the end gives you a hint what to look for, however if the test fails, you then have to try and understand which bit(s) of the parameter block are relevant to the failure / test case.  A suite of smaller, more targeted tests can be both easier to understand and can encourage you to break down your application into smaller parts.</p>

<p>As has been been mentioned, there's various ways that the application could be broken down.  One approach might be to create a <code>CardinalVector</code> class to represent a movement direction/size along the primary compass directions.  One way of implementing it might be:</p>

<pre><code>class CardinalVector {
    public final int x;
    public final int y;
    public final String direction;

    private final String rotateRightDirection;
    private final String rotateLeftDirection;

    private final static Map&lt;String, CardinalVector&gt; cardinalDirections = Map.of(
            "N", new CardinalVector("N", 0, 1, "E", "W"),
            "E", new CardinalVector("E", 1, 0, "S", "N"),
            "S", new CardinalVector("S", 0, -1, "W", "E"),
            "W", new CardinalVector("W", -1, 0, "N", "S"));

    private CardinalVector(String direction, int x, int y, 
                           String rotateRightDirection, String rotateLeftDirection) {
        this.direction = direction;
        this.x = x;
        this.y = y;
        this.rotateRightDirection = rotateRightDirection;
        this.rotateLeftDirection = rotateLeftDirection;
    }

    public static CardinalVector of(String direction) {
        return cardinalDirections.get(direction);
    }

    public CardinalVector rotated(String rotationDirection) {
        return rotationDirection.equals("R") ? of(rotateRightDirection) 
                                             : of(rotateLeftDirection);
    }
}
</code></pre>

<p>As this class represents a smaller subset of the functionality, it's possible to create some more fine-grained unit-tests.  For example, when creating a vector for a given direction (NSEW), are the x/y movement fields set correctly:</p>

<pre><code>@ParameterizedTest
@MethodSource("direction_expectedX_expectedY")
void of_direction_expectedX_expectedY(String direction, int expectedX, int expectedY) {
    CardinalVector north = CardinalVector.of(direction);
    assertThat(north.x).isEqualTo(expectedX);
    assertThat(north.y).isEqualTo(expectedY);

}

static Stream&lt;Arguments&gt; direction_expectedX_expectedY() {
    return Stream.of(
            arguments("N", 0, 1),
            arguments("E", 1, 0),
            arguments("S", 0, -1),
            arguments("W", -1, 0)
    );
}
</code></pre>

<p>I try to keep my test names following something along the lines of method being tested (of), condition being tested (direction), desired outcome (expectedX, expectedY).  By keeping the arguments for the parameterised test in the same order, it can make the test results easier to understand.  So, with a test to validate that from a given starting direction, rotating results in a different direction:</p>

<pre><code>@ParameterizedTest
@MethodSource("fromDirection_rotationDirection_expectedDirection")
void rotated_fromDirection_rotationDirection_expectedDirection(String fromDirection,
                                                               String rotationDirection,
                                                               String expectedDirection) {
    CardinalVector rotatedDirection = CardinalVector.of(fromDirection)
                                                    .rotated(rotationDirection);
    assertThat(rotatedDirection).isEqualTo(CardinalVector.of(expectedDirection));
}

static Stream&lt;Arguments&gt; fromDirection_rotationDirection_expectedDirection() {
    return Stream.of(
            arguments("N", "R", "E"),
            arguments("N", "L", "W"),
            arguments("E", "R", "S"),
            arguments("E", "L", "N"),
            arguments("S", "R", "W"),
            arguments("S", "L", "E"),
            arguments("W", "R", "N"),
            arguments("W", "L", "S")
    );
}
</code></pre>

<p>In my test runner the output looks like this:</p>

<p><a href="https://i.stack.imgur.com/zutaO.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/zutaO.png" alt="test results"></a></p>

<p>You can see that the test name helps to understand each of the inputs / results for the parameterised test runs below.</p>

<p><strong>Some other things to think about</strong></p>

<ul>
<li><p>The problem description you link to talks about a squad of rovers.  So, whilst the the example input/output is for two rovers, I would expect a solution to be able to handle a different number of rovers (1, 3 etc).  At the moment, you've got a <code>RoverPosition</code> class that actually tracks the position + instructions for two different rovers, along with the plateau.  To add another Rover, we'd need to add another two parameters to the <code>roversFinalPositionAndDirection</code> method, which quickly gets unwieldy.</p></li>
<li><p>Method names should describe what it is the method does, consequently you'd expect some kind of 'action'.  This isn't always the case, for example <code>roverPositionAndDirection</code>.  This sounds like the name of a variable that contains the rover's current position and direction, whereas it actually calculates the final position of the rover.  This is misleading.</p></li>
<li>Unused parameters.  Don't pass things to methods that you don't need.  So, for example <code>roverPositionAndDirection</code> never uses its <code>plateuDimentionsInput</code> parameter.</li>
<li><p>Redundant variables.  Rather than declaring a variable and assigning it a value then immediately returning it, it's often better to just return the assigned value (if the function is named correctly then it should be obvious what's being returned).  So, for example, instead of:</p>

<blockquote>
<pre><code>String finalPosition=roverX+" "+roverY+" "+directionArr[directionIndex];
return finalPosition;
</code></pre>
</blockquote>

<p>Consider</p>

<pre><code>return roverX+" "+roverY+" "+directionArr[directionIndex];
</code></pre></li>
<li><p>Consistency is key...  Most modern IDEs are able to format your code for you.  Java tends to favour more spacing than some other languages, for me personally, I just like consistency... so rather than:</p>

<blockquote>
<pre><code>int rover2X=arr2[0];
int rover2Y= arr2[1];
</code></pre>
</blockquote>

<p>Pick a consistent spacing and use it everywhere, or get your IDE to do it for you.  Generally, the preference is:</p>

<pre><code>int rover2X = arr2[0];
</code></pre></li>
<li><p>Array declarations in java should be: <code>int[] arr = new int[4];</code>, rather than <code>int arr[]= new int[4];</code></p></li>
<li><p><code>moveDirectionRL</code>, it's great that you've created a method to encapsulate the logic for turning the rover.  I would have perhaps gone with rotate or turn to make it clearer what it was responsible for.  It would also have been good to do a similar thing to encapsulate the logic for actually moving the rover in it's current direction.</p></li>
<li><p>Plateau safety... You check if the rover position is outside the top/right, however you don't check if it goes off the bottom/left, so negative positions don't throw an exception.  You also only check the rover is outside of the plateau at the beginning and end.  So, it's acceptable for the rover to wonder off outside the limits, as long as it comes back.  This would obviously be dangerous for an actual rover.</p></li>
</ul>
    </div>