<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Disclaimer: My usage of ReactJS is very limited so there are likely things a developer more experienced with it would point out.</em></p>

<blockquote>
  <p>Are there too many comments in the code?</p>
</blockquote>

<p>It doesn't look like <em>too many</em> comments. Anything that helps readers (including your future self) is a good thing. It isn't like <a href="https://codereview.stackexchange.com/q/10167/120114">this "not funny" code</a> that has excessive, non-constructive comments. It is believed that some object-oriented code can be self-documenting but it would still be necessary to explain what methods/functions do, as well as describe any parameters and return values.</p>

<blockquote>
  <p>It's pretty long: so would it be better split into more than one source file and if so how would that help and how/where should it be split?</p>
</blockquote>

<p>My natural inclination is to suggest that the code be split so each class/interface is in a separate file. I see that a lot of the code is comprised of functions... some of those could possibly be put into one or more files for helper functions.</p>

<blockquote>
  <p>And/or any other review comment you think appropriate.</p>
</blockquote>

<p>Most of the methods don't appear to be overly lengthy. I see <code>MutableState:: replaceElement()</code> looks like an outlier so that would be a candidate for being broken up into separate smaller methods. And <code>reducer()</code> is also a bit lengthy, though it may be challenging to break that up. I do see a lot of repeated lines in that function - e.g. calling <code>getMutableState()</code> to create a <code>MutableState</code> object and then ultimately returning the return value from calling <code>getState()</code> on that object.</p>

<hr>

<p>This code makes good use of <code>const</code> for any variable that doesn't get re-assigned and <code>let</code> for variable that may be re-assigned, as well as object destructuring.</p>

<hr>

<p>Correct me if I am wrong, but <code>MutableState::setSelectionBoth()</code> should be able to be simplified from: </p>

<blockquote>
<pre><code>setSelectionBoth(where: number): void {
  this.selection.start = where;
  this.selection.end = where;
}
</code></pre>
</blockquote>

<p>to:</p>

<pre><code>setSelectionBoth(where: number): void {
  this.selection.end = this.selection.start = where;
}
</code></pre>

<hr>

<p>There are some <code>for</code> loops, like the one in <code>renderState()</code> that could be simplified with a <a href="https://www.typescriptlang.org/docs/handbook/iterators-and-generators.html#forof-statements" rel="nofollow noreferrer"><code>for...of</code></a> loop instead - </p>

<p>e.g. </p>

<blockquote>
<pre><code>for (let wordIndex = 0; wordIndex &lt; words.length; ++wordIndex) {
  const word = words[wordIndex];
</code></pre>
</blockquote>

<p>This could be simplified to:</p>

<pre><code>for (const word of words) {
</code></pre>

<p>That way you don't have to increment <code>wordIndex</code> manually or use it to access <code>word</code> from <code>words</code> with the bracket syntax.</p>
    </div>