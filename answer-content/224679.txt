<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>DynamicFibonacciCalculator</code> is slow because you create a new <code>memoArrays</code> for each recursion, so it will never contain any precalculated values, and it behave just as the normal recursive version (and even worse because of the overhead of allocating the arrays.</p>

<blockquote>
<pre><code>public long DynamicFibonacciCalculator(long number)
{
    long result;
    var memoArrays = new long[number + 1];
      ...
</code></pre>
</blockquote>

<p>You should maintain the <code>memoArrays</code> outside of the recursion method. You could maybe do the recursion in an local function: </p>

<pre><code>public static long DynamicFibonacciCalculator(long number)
{
  if (num &lt;= 1)
  {
    return num;
  }

  long[] memoArrays = new long[number + 1];

  long Recursion(long num)
  {
    if (num &lt;= 1)
    {
      return num;
    }

    long result;

    if (memoArrays[num] != 0)
    {
      return memoArrays[num];
      ....

  }

  return Recursion(number);
}
</code></pre>

<hr>

<p>All your methods don't depend on instance members, so it would be more correct to make them <code>static</code> (and the helpers could be <code>static</code> as well):</p>

<pre><code>  public static class FibonacciSequence
  {
    #region MatrixFibonnaciCalculator

    public static long MatrixFibonacciCalculator(long n)
    {
      long[,] f = { { 1, 1 }, { 1, 0 } };
      if (n == 0)
        return 0;
        ...
</code></pre>

<hr>

<p>You could optimize the test class by making a common test method that takes a delegate as argument:</p>

<pre><code>public class FibonacciSequenceTest
{
  private const long Number = 40;
  private const long Result = 102334155;

  public FibonacciSequenceTest()
  {
  }

  public void FibonacciTester(Func&lt;long, long&gt; method, string methodName)
  {
    // Act
    var returnValue = method(Number);

    // Assert
    long actual = returnValue;
    Assert.AreEqual(actual, Result, $"{methodName} produced wrong result.");
  }

  [TestMethod]
  public void TestBottomUpFibonacciCalculator()
  {
    FibonacciTester(FibonacciSequence.BottomUpFibonacciCalculator, nameof(FibonacciSequence.BottomUpFibonacciCalculator));
  }

  // TODO: Test methods for each Fib method...


}
</code></pre>

<p>In this way it is easier to maintain, and you avoid repeating yourself.</p>
    </div>