<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OK, thanks you for all your input. I did learn quite a few things. I kept the PERFORM VARYING : I still need W-Posn to vary, and if I make a PERFORM TIMES, I'll have to add an ADD 1 TO W-POSN. I don't see the purpose. And I kept my numbering standard, as there was no consensus on the topic.</p>
<p>I ditched the comments &amp; unused parts, went to Not-Totally-UpperCase names(that's an experiment for me, really looks strange, but not that bad), improved the naming(hope it's clearer now, don't know what I had in mind), removed some unused groups(but not all, as some I find useful for the clarity), used constants where needed.</p>
<p>And I went extreme in 2 directions :</p>
<ol>
<li>I changed the algorithm, so that I didn't have to use the remainder at all(to avoid further debate upon the function REM). It's slightly longer, but I don't need any division. It's inspired from <a href="https://codereview.stackexchange.com/questions/57382/fizzbuzz-in-brainfuck">This entry for Fizzbuzz in brainfuck</a>.</li>
<li>I added a few reporting elements at the beginning and at the end. For the beginning, I made 2 copybooks(data definition &amp; code) for having a standardized reporting of standard informations as a header. For the end, I did add a few counters. Not in copybook because this is supposed to change for each program.</li>
</ol>
<p>The copybooks for the header:
HeaderData.cpy</p>
<pre><code>   01  H-Header-Strings.
       05  H-Line-Identity.
           10  FILLER                  PIC X(20)
                                       VALUE "Program             ".
           10  H-Program-Id            PIC X(20).
       05  H-Line-Compile.
           10  FILLER                  PIC X(20)
                                       VALUE "Compiled            ".
           10  H-Date-Compiled         PIC X(08).
           10  FILLER                  PIC X(04)
                                       VALUE " at ".
           10  H-Hour-Compiled         PIC X(08).
       05  H-Line-Execute.
           10  FILLER                  PIC X(20)
                                       VALUE "Executed            ".
           10  H-Date-Executed-mm      PIC X(02).
           10  FILLER                  PIC X(01)
                                       VALUE "/".
           10  H-Date-Executed-dd      PIC X(02).
           10  FILLER                  PIC X(01)
                                       VALUE "/".
           10  H-Date-Executed-yy      PIC X(02).
           10  FILLER                  PIC X(04)
                                       VALUE " at ".
           10  H-Hour-Executed-hh      PIC X(02).
           10  FILLER                  PIC X(01)
                                       VALUE ".".
           10  H-Hour-Executed-mn      PIC X(02).
           10  FILLER                  PIC X(01)
                                       VALUE ".".
           10  H-Hour-Executed-ss      PIC X(02).
       05  H-Line-Char-Table.
           10  FILLER                  PIC X(20)
                                       VALUE "Character Table     ".
           10  FILLER                  PIC X(07).
               88  Char-Table-ASCII    VALUE "ASCII  ".
               88  Char-Table-EBCDIC   VALUE "EBCDIC ".
               88  Char-Table-Unknown  VALUE "unknown".
           10  FILLER                  PIC X(13).
       05  H-Line-OS-xxBits.
           10  FILLER                  PIC X(20)
                                       VALUE "Turning on OS with  ".
           10  FILLER                  PIC X(07).
               88  H-OS-32-Bits        VALUE "32 Bits".
               88  H-OS-64-Bits        VALUE "64 Bits".
           10  FILLER                  PIC X(13).
   01  H-When-Compiled.
       05  H-When-Compiled-Date        PIC X(08).
       05  H-When-Compiled-Hour        PIC X(08).
   01  H-When-Executed.
       05  H-When-Executed-Date.
           10  H-When-Executed-yy      PIC 9(02).
           10  H-When-Executed-mm      PIC 9(02).
           10  H-When-Executed-dd      PIC 9(02).
       05  H-When-Executed-Time.
           10  H-When-Executed-hh      PIC 9(02).
           10  H-When-Executed-mn      PIC 9(02).
           10  H-When-Executed-ss      PIC 9(02).
           10  H-When-Executed-cc      PIC 9(02).
   01  H-Space-ASCII                   PIC X(01)
                                       VALUE X"20".
       88  H-Is-ASCII                  VALUE SPACE.
   01  H-Space-EBCDIC                  PIC X(01)
                                       VALUE X"40".
       88  H-Is-EBCDIC                 VALUE SPACE.
   01  H-Pointer                       USAGE POINTER.
</code></pre>
<p>HeaderDisplay.cpy</p>
<pre><code>       MOVE WHEN-COMPILED          TO  H-When-Compiled
       MOVE H-When-Compiled-Date   TO  H-Date-Compiled
       MOVE H-When-Compiled-Hour   TO  H-Hour-Compiled
       ACCEPT H-When-Executed-Date FROM DATE
       MOVE H-When-Executed-yy     TO  H-Date-Executed-yy
       MOVE H-When-Executed-mm     TO  H-Date-Executed-mm
       MOVE H-When-Executed-dd     TO  H-Date-Executed-dd
       ACCEPT H-When-Executed-Time FROM TIME
       MOVE H-When-Executed-hh     TO  H-Hour-Executed-hh
       MOVE H-When-Executed-mn     TO  H-Hour-Executed-mn
       MOVE H-When-Executed-ss     TO  H-Hour-Executed-ss
       EVALUATE TRUE
           WHEN H-Is-ASCII
               SET Char-Table-ASCII
                                   TO TRUE
           WHEN H-Is-EBCDIC
               SET Char-Table-EBCDIC
                                   TO TRUE
           WHEN OTHER
               SET Char-Table-Unknown
                                   TO TRUE
       END-EVALUATE
       IF FUNCTION LENGTH(H-Pointer) EQUALS 8
           SET H-OS-64-Bits        TO TRUE
       ELSE
           SET H-OS-32-Bits        TO TRUE
       END-IF
       DISPLAY     H-Line-Identity
       DISPLAY     H-Line-Compile
       DISPLAY     H-Line-Execute
       DISPLAY     H-Line-Char-Table
       DISPLAY     H-Line-OS-xxBits
       .
</code></pre>
<p>The Code :</p>
<pre><code>   IDENTIFICATION DIVISION.
   PROGRAM-ID. FIZZBUZZ.
   DATA DIVISION.
   WORKING-STORAGE SECTION.
   01  W-First                     CONSTANT            0.
   01  W-Last                      CONSTANT            20.
   01  W-Algorithm-counters.
       05  W-Posn                  PIC 9(4)    VALUE   ZERO.
       05  W-Remainder-3           PIC 9(4)    VALUE   ZERO.
           88  W-Remainder-Fizz-3              VALUE   3.
           88  W-Remainder-Fizz-0              VALUE   ZERO.
       05  W-Remainder-5           PIC 9(4)    VALUE   ZERO.
           88  W-Remainder-Buzz-5              VALUE   5.
           88  W-Remainder-Buzz-0              VALUE   ZERO.
   01  W-Results-Counters.
       05  W-Total-Printed         PIC 9(4)    VALUE   ZERO.
       05  W-Total-Numbers         PIC 9(4)    VALUE   ZERO.
       05  W-Total-Fizz            PIC 9(4)    VALUE   ZERO.
       05  W-Total-Buzz            PIC 9(4)    VALUE   ZERO.
       05  W-Total-FizzBuzz        PIC 9(4)    VALUE   ZERO.
   01  W-Display-String            PIC X(10).
   01  W-Display-Numeric           REDEFINES W-Display-String.
       05  W-FizzBuzz-Before-Int   PIC X(3).
       05  W-FizzBuzz-Int          PIC Z(3)9.
       05  W-FizzBuzz-After-Int    PIC X(3).
   01  W-display-Alpha             REDEFINES W-Display-String.
        05  W-FizzBuzz-String      PIC X(10).
           88  W-Is-Other                      VALUE   "*  0000  *".
           88  W-Is-Fizz                       VALUE   "*  FIZZ  *".
           88  W-Is-Buzz                       VALUE   "*  BUZZ  *".
           88  W-Is-FizzBuzz                   VALUE   "*FIZZBUZZ*".
        COPY "HeaderData.cpy".

   PROCEDURE DIVISION.
   00000-Control.
        PERFORM    10000-Begin
        PERFORM    20000-Main
           VARYING W-Posn FROM W-First BY 1
             UNTIL W-Posn &gt; W-Last
        PERFORM    30000-End
        .
        STOP RUN.
   10000-Begin.
       MOVE "FizzBuzz"             TO H-Program-Id
       COPY "HeaderDisplay.cpy".
       INITIALIZE  W-Algorithm-counters
                   W-Results-Counters
       DISPLAY "**********"
       .
   20000-Main.
       PERFORM 40000-Create-FizzBuzzDisplay
       DISPLAY W-Display-String
       .
   30000-End.
       DISPLAY "**********"
       DISPLAY "Total elements printed     : " W-Total-Printed
       DISPLAY "Total numbers printed      : " W-Total-Numbers
       DISPLAY "Total Fizz printed         : " W-Total-Fizz
       DISPLAY "Total Buzz printed         : " W-Total-Buzz
       DISPLAY "Total FizzBuzz printed     : " W-Total-FizzBuzz
       .
   40000-Create-FizzBuzzDisplay.
       IF W-Remainder-Fizz-3
           SET W-Remainder-Fizz-0  TO TRUE
       END-IF
       IF W-Remainder-Buzz-5
           SET W-Remainder-Buzz-0  TO TRUE
       END-IF
       EVALUATE TRUE
           WHEN (W-Remainder-Fizz-0 AND W-Remainder-Buzz-0)
               SET W-Is-FizzBuzz   TO TRUE
               ADD 1               TO W-Total-FizzBuzz
           WHEN W-Remainder-Buzz-0
               SET W-Is-Buzz       TO TRUE
               ADD 1               TO W-Total-Buzz
           WHEN W-Remainder-Fizz-0
               SET W-Is-Fizz       TO TRUE
               ADD 1               TO W-Total-Fizz
           WHEN OTHER
               SET W-Is-Other      TO TRUE
               MOVE W-Posn         TO W-FizzBuzz-Int
               ADD 1               TO W-Total-Numbers
       END-EVALUATE
       ADD 1                       TO  W-Total-Printed
                                       W-Remainder-3
                                       W-Remainder-5
       .
   END PROGRAM FIZZBUZZ.
</code></pre>
<p>The resulting log :</p>
<pre><code>Program             FizzBuzz            
Compiled            12/05/15 at 22.57.08
Executed            12/05/15 at 22.57.11
Character Table     ASCII               
Turning on OS with  32 Bits             
**********
*FIZZBUZZ*
*     1  *
*     2  *
*  FIZZ  *
*     4  *
*  BUZZ  *
*  FIZZ  *
*     7  *
*     8  *
*  FIZZ  *
*  BUZZ  *
*    11  *
*  FIZZ  *
*    13  *
*    14  *
*FIZZBUZZ*
*    16  *
*    17  *
*  FIZZ  *
*    19  *
*  BUZZ  *
**********
Total elements printed     : 0021
Total numbers printed      : 0011
Total Fizz printed         : 0005
Total Buzz printed         : 0003
Total FizzBuzz printed     : 0002
</code></pre>
<p>Of course, it's insane for a FizzBuzz : 88 lines in the main code, with 66 + 33 lines in the copybooks, for a grand total of 187 LOC. But I've got a good starting point for new adventures, I hope.</p>
<p>Once again, thanks for your great entries, both. I've got to choose a "winner" answer now, and it's not easy. I'll go for Bill Woodger for its great examples - even if I'm not going to copy its style anyways. I did learn quite a few things reading his code. There is always room to grow.</p>
    </div>