<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is almost impossible to read, so instead of the code review I would answer the question you asked:</p>

<blockquote>
  <p>First I count how many notifications you have, so I can write it into the "notification bell", then I write the same code again, but this time to output the result (xy commented x hours ago...)</p>
</blockquote>

<p>The answer is simple: well, run your code once. Instead of outputting your data directly to the screen, just <em>prepare it for the output</em>, having your calculations along. So just combine your two codes into one, but instead of direct output either collect the data into array to be output later (<strong>much</strong> more preferred) or concatenate the resulting HTML into a string variable.</p>

<p>Then you will be able to provide the number and then echo the actual list.</p>

<p>Regarding other issues, the most critical one is SQL injection. Your <code>sql_query()</code> function <strong>must</strong> have a support for prepared statements, to be called like this:</p>

<pre><code>$sql = "SELECT url, name FROM forum WHERE id=? and deleted=0";
sql_query($conn, $sql, [$comment['topic_id']]);
</code></pre>

<p>it is not only much cleaner but also 100% safe (given your implementation of prepared statements is correct). The actual implementation depends on the underlying driver. In case you are using PDO, you can take it from my <a href="https://phpdelusions.net/pdo/pdo_wrapper#run" rel="nofollow noreferrer">PDO wrapper</a>, and for mysqli it would be something like</p>

<pre><code>function sql_query($conn, $sql, $params = [])
{
    if ($params)
    {
        $stmt = $conn-&gt;prepare($sql);
        $types = str_repeat('s', count($params));
        $stmt-&gt;bind_param($types, ...$params);
        return $stmt-&gt;execute()-&gt;get_result();
    } else {
        $return = $conn-&gt;query($sql);
    }
}
</code></pre>
    </div>