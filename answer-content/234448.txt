<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Towards optimization and restructuring</em></h3>

<p>One of downsides of the initial <code>revrot</code> approach is that all nested functions <code>test</code>, <code>reverse</code> and <code>rotate</code> will be redundantly recreated on <strong>each</strong> <code>revrot</code> call.<br>Instead - define them as top-level functions with meaningful names.</p>

<p>Next, the program lacks 2 edge cases:</p>

<ul>
<li><p>when input string contains one single digit and size of required chunk is also <code>1</code> (ex. <code>revrot("3", 1)</code>). It's worth to catch that case immediately and return the unchanged input string</p></li>
<li><p>when input string contains non-digit character</p></li>
</ul>

<p>The intermediate <code>arr</code> array with <code>for</code> loop and <code>slice</code> calls (to get all chunks) is replaced with convenient <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match" rel="nofollow noreferrer"><code>String.match</code></a> call on dynamic regex pattern <strong><code>new RegExp(`.{${size}}`, 'g')</code></strong> (matches substrings of specific length/size)</p>

<hr>

<p>The final optimized approach:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const testCubes = s =&gt; Array.prototype.reduce.call(s, (acc, val) =&gt; acc + Number(val) ** 3, 0) % 2 === 0;
const strReverse = s =&gt; [...s].reverse().join("");
const rotateLeft = s =&gt; s.slice(1) + s.slice(0, 1);


function revrot(str, size) {
    let len = str.length;
    if (size &lt; 1 || !str || size &gt; len) return "";
    if (len === 1 &amp;&amp; size === 1) return str;
    if (/\D/.test(str)) {
        throw Error("Invalid numeric string");
    }
    let pat = new RegExp(`.{${size}}`, 'g');
    return str.match(pat).map(x =&gt; 
        testCubes(x) ? strReverse(x) : rotateLeft(x)
    ).join("");
}


console.log(revrot("123456987654", 6));
console.log(revrot("123456987653", 6));
console.log(revrot("66443875", 8));
console.log(revrot("563000655734469485", 4));
console.log(revrot("1", 1));
console.log(revrot("6644-d3875", 8));</code></pre>
</div>
</div>

    </div>