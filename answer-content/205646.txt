<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>if(dataType == double.class) Array.set(result, x, Double.parseDouble(s[x]));
</code></pre>

<p>Using <code>Array.set()</code> in the line above was a mistake because it is boxing the primitive types. Using <code>Array.setInt()</code>, <code>Array.setDouble()</code>, etc improved the performance a lot, but it's still a bit slower than using a non-generic function:</p>

<pre><code>if(dataType == double.class) Array.setDouble(result, x, Double.parseDouble(s[x]));
</code></pre>

<p>The performance can be improved further by casting the array to the needed type:</p>

<pre><code>if(dataType == double.class) ((double[])result)[x] = Double.parseDouble(s[x]);
</code></pre>

<p>Performance test code and results: <a href="https://pastebin.com/3g37vDm4" rel="nofollow noreferrer">https://pastebin.com/3g37vDm4</a></p>

<h2>Improved function:</h2>

<pre><code>private static String[] arraySeparators;
private static Class[] arrayTypes;

public static &lt;T&gt; Object reverseDeepToString(String str, Class&lt;T&gt; dataType){
    int dimensions = 0;
    while(str.charAt(dimensions) == '[')
        dimensions++;

    arraySeparators = new String[dimensions + 1];
    String separator = ", ";
    for(int x = 2; x &lt;= dimensions; x++)
        arraySeparators[x] = separator = ']' + separator + "\\[";

    arrayTypes = new Class[dimensions + 1];
    Class temp = arrayTypes[1] = dataType;
    for(int x = 2; x &lt;= dimensions; x++)
        arrayTypes[x] = temp = Array.newInstance(temp, 0).getClass();

    str = str.substring(dimensions, str.length() - dimensions);
    Object r = createArrayRecursive(str, dimensions);

    arraySeparators = null;
    arrayTypes = null;
    return r;
}

private static Object createArrayRecursive(String str, int dimension){

    if(dimension == 1){
        String[] s = str.split(", ");
        Class dataType = arrayTypes[1];
        Object result = Array.newInstance(dataType, s.length);
        for(int x = 0; x &lt; s.length; x++){
            if(dataType == String.class) ((String[])result)[x] = s[x];
            else if(dataType == int.class) ((int[])result)[x] = Integer.parseInt(s[x]);
            else if(dataType == double.class) ((double[])result)[x] = Double.parseDouble(s[x]);
            else if(dataType == float.class) ((float[])result)[x] = Float.parseFloat(s[x]);
            else if(dataType == long.class) ((long[])result)[x] = Long.parseLong(s[x]);
            else if(dataType == boolean.class) ((boolean[])result)[x] = Boolean.parseBoolean(s[x]);
            else if(dataType == short.class) ((short[])result)[x] = Short.parseShort(s[x]);
            else if(dataType == byte.class) ((byte[])result)[x] = Byte.parseByte(s[x]);
            else if(dataType == char.class) ((char[])result)[x] = s[x].charAt(0);
        }
        return result;
    }
    String[] s = str.split(arraySeparators[dimension]);
    Object arr = Array.newInstance(arrayTypes[dimension], s.length);

    dimension--;
    for(int x = 0; x &lt; s.length; x++)
        Array.set(arr, x, createArrayRecursive(s[x], dimension));

    return arr;
}
</code></pre>

<p>To make the performance perfectly match the non-generic function I can also avoid the casting, but this results in a longer and uglier code for a rather small difference in performance:</p>

<pre><code>private static String[] arraySeparators;
private static Class[] arrayTypes;

public static &lt;T&gt; Object reverseDeepToString(String str, Class&lt;T&gt; dataType){
    int dimensions = 0;
    while(str.charAt(dimensions) == '[')
        dimensions++;

    arraySeparators = new String[dimensions + 1];
    String separator = ", ";
    for(int x = 2; x &lt;= dimensions; x++)
        arraySeparators[x] = separator = ']' + separator + "\\[";

    arrayTypes = new Class[dimensions + 1];
    Class temp = arrayTypes[1] = dataType;
    for(int x = 2; x &lt;= dimensions; x++)
        arrayTypes[x] = temp = Array.newInstance(temp, 0).getClass();

    str = str.substring(dimensions, str.length() - dimensions);
    Object r = createArrayRecursive(str, dimensions);

    arraySeparators = null;
    arrayTypes = null;
    return r;
}

private static Object createArrayRecursive(String str, int dimension){

    if(dimension == 1){
        String[] s = str.split(", ");
        Class dataType = arrayTypes[1];

        if(dataType == String.class){
            String[] result = new String[s.length];
            for(int x = 0; x &lt; s.length; x++) result[x] = s[x];
            return result;
        }
        if(dataType == int.class){
            int[] result = new int[s.length];
            for(int x = 0; x &lt; s.length; x++) result[x] = Integer.parseInt(s[x]);
            return result;
        }
        if(dataType == double.class){
            double[] result = new double[s.length];
            for(int x = 0; x &lt; s.length; x++) result[x] = Double.parseDouble(s[x]);
            return result;
        }
        if(dataType == float.class){
            float[] result = new float[s.length];
            for(int x = 0; x &lt; s.length; x++) result[x] = Float.parseFloat(s[x]);
            return result;
        }
        if(dataType == long.class){
            long[] result = new long[s.length];
            for(int x = 0; x &lt; s.length; x++) result[x] = Long.parseLong(s[x]);
            return result;
        }
        if(dataType == boolean.class){
            boolean[] result = new boolean[s.length];
            for(int x = 0; x &lt; s.length; x++) result[x] = Boolean.parseBoolean(s[x]);
            return result;
        }
        if(dataType == short.class){
            short[] result = new short[s.length];
            for(int x = 0; x &lt; s.length; x++) result[x] = Short.parseShort(s[x]);
            return result;
        }
        if(dataType == byte.class){
            byte[] result = new byte[s.length];
            for(int x = 0; x &lt; s.length; x++) result[x] = Byte.parseByte(s[x]);
            return result;
        }
        if(dataType == char.class){
            char[] result = new char[s.length];
            for(int x = 0; x &lt; s.length; x++) result[x] = s[x].charAt(0);
            return result;
        }
    }
    String[] s = str.split(arraySeparators[dimension]);
    Object arr = Array.newInstance(arrayTypes[dimension], s.length);

    dimension--;
    for(int x = 0; x &lt; s.length; x++)
        Array.set(arr, x, createArrayRecursive(s[x], dimension));

    return arr;
}
</code></pre>
    </div>