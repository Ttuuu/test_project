<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>O(n*n)</strong></p>

<p>With a changing <code>str</code> and <code>strlen(str)</code> in the <code>for(i = 1; i &lt; strlen(str); ++i)</code> loop, code repeatedly calculates the string length.  Once is enough.</p>

<p>Even easier, test for the <em>null character</em>.</p>

<p><strong><code>is...(int ch)</code> called with <code>char</code></strong></p>

<p><code>is...(int)</code> and <code>to...er(int)</code> functions expect an <code>unsigned char</code> <em>value</em> or <code>EOF</code>.  When called with a <code>char</code> less than zero (and not <code>EOF</code>), the result in undefined behavior. The C standard library here treats <code>char</code> as if it was <code>unsigned char</code>.   Best to do like-wise.</p>

<p>OP's <code>(int)</code> cast as in <code>toupper((int) str[0])</code> serves scant purpose.</p>

<p><strong>Simplify start of word logic</strong></p>

<p>Suggest using a flag that is set whenever the processed <code>char</code> was a white-space.</p>

<p><strong>Array brackets?</strong></p>

<p>This is a style issue.  As such, best to follow your group's coding standard. The standard C library use the 2nd style.</p>

<pre><code>void title_case(char str[])
// or
void title_case(char *str)   // I find this more commmon
</code></pre>

<p><strong>Sample code</strong></p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdbool.h&gt;

void title_case(char str[]) {
  assert(str);
  bool StartOfWord = true;
  while (*str) {
    if (StartOfWord) {
      *str = toupper((unsigned char) *str);
    } else {
      *str = tolower((unsigned char) *str);
    }
    StartOfWord = isspace((unsigned char) *str);
  }
}
</code></pre>
    </div>