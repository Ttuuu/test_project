<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Spaces</h2>

<p>Your use of spaces could stand improvement.  You should have one space after every comma in argument list, and around binary operators.  It is also customary to have a space between a closing parenthesis and an opening brace.</p>

<h2>Names</h2>

<p>Use descriptive names!</p>

<p>Is <code>r1</code> a method name, or a <code>BufferedReader</code>?  Why are these named the same, anyway?  </p>

<p>What is <code>input</code>?  It is a <code>String</code>, that much is clear, but what is it used for?  <code>filename</code> would be so much more descriptive than <code>input</code>.</p>

<h2>Try-with-resources</h2>

<p>If an <code>IOException</code> happens, is <code>FileInputStream</code> closed, or does it bypass the <code>r1.close()</code> statement?</p>

<p>Java 7 introduced the "try-with-resources" construct, which ensures resources are properly closed, even in the event of exceptions, and even if exceptions happen during the exception handling.</p>

<pre><code>try (FileInputStream fis = new FileInputStream(new File(input)),
         InputStreamReader isr = new InputStreamReader(fir, "UTF-8"),
         BufferedReader br = new BufferedReader(isr)) {

    // use br here - see below


    // br, isr, and fis are automatically closed here, at the end of the try block.
} catch (IOException e) {
    e.printStackTrace();
}
</code></pre>

<h2>Efficiency</h2>

<p>You are doing a lot of unnecessary work, wasting time, to extract a single value from the file.</p>

<ul>
<li>If you want the value from the first line, you still read in all of the lines</li>
<li>You split every line into columns, even when you don't need a value from that line.</li>
<li>You store all of the lines of data, split into columns, as an <code>ArrayList</code></li>
<li>You store a second copy of of all of the lines of data, as a <code>String[][]</code></li>
</ul>

<p>In place of the <code>// use br here - see below</code> line, you could do the following:</p>

<ul>
<li>Read in lines without storing them, until you reach the i-th row.</li>
<li>Split the i-th row into columns</li>
<li>Return the j-th value</li>
</ul>

<p>Ie)</p>

<pre><code>for(int row = 0;  row &lt; i;  row++) {
    br.readLine();                    // Note: value is not saved
}

String line = br.readLine();
String[] columns = line.split(",");
return columns[j];                    // Resources are automatically closed!
</code></pre>

<p>Remove the original declaration of <code>result</code>, <code>row</code>, and <code>lines</code>.</p>

<hr>

<blockquote>
  <p>What about <code>bufferSize</code>, should I never use it?</p>
</blockquote>

<p>It was an oversight on my part when writing the try-with-resources replacement, but in general, no.  The JVM will pick a buffer size that is optimal for the OS.</p>

<p>If you did want to specify a buffer size, 10KiB seems too arbitrary.  It should be related to (a multiple of) the size of the data being read, in this case, the length of the lines in the csv file.  The larger the value, the lower the odds that <code>readline()</code> will have to do string concatenation because the part of the line is in one buffer &amp; part of the line is in another.  However, the larger the value, the higher the odds that too much data will be read (you want to stop at exactly the right line, remember?), memory pressure will increase causing other inefficiencies.  If you do try tweaking the value, profile, profile, profile (... and then go back to the default). </p>
    </div>