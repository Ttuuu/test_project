<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Output formatting is unreadable. It is extremely difficult to verify correct results.</p>

<hr>

<p><code>// crude array equality function</code> comment is not helpful because the function name tells me. But a comment about what <code>arrayEquality</code> equates on would be very helpful. I don't see any point to saying "crude" rather what would be good is a comment to future you (and present-time me) of how you planned to crush the crudeness. Generally don't diss the program or yourself with unhelpful put-down comments. We're all learning. Reviewers here aren't shy about offering up crude adjectives.</p>

<hr>

<p>Yeah, we all memorized the <code>Array.reduce()</code> parameters, nonetheless that is no excuse for such bad names. Names should reflect the "array encoding problem domain." For example <code>acc</code> is bewildering; what is it in the context of the "high level" idea of what this array represents?</p>

<hr>

<p>Make informative, verbose output to aid development and troubleshooting. Put the "before" array with its encode result for example. Write independent functions so it's easy to turn off if desired.</p>

<hr>

<p><code>++</code> and the other unary operators:  I see a trend of the unary operator falling out of favor. I like them a lot but I'm just mentioning this because someone will tell you not to use them. My guideline is avoid ambiguous or confusing code.</p>

<hr>

<p><code>count = 0; // reset the count</code> - duuuhh.</p>

<hr>

<pre><code>array.reduce((acc, val, i) =&gt; {
</code></pre>

<p>I think the program can be cleaned up a bit if the "acc" (accumulator) argument is the results array. This change will cause a chain reaction of program modification but I suggest you do a rewrite anyway to eliminate the end of array checks. Let the built-in iterator functions do that.</p>

<p><strong>Rewrite thoughts</strong></p>

<ul>
<li><p>Write a working program that handles only numbers at first. This will help you see how to structure the program and nest the iterations. Have faith that modifying for number-arrays is easily doable.</p></li>
<li><p>Big picture: for each array element, iterate (forEach, every, et.al.) the array looking for duplicates - nested "for eaches". ALWAYS ITERATE THE WHOLE ARRAY. Each number will find itself but starting the counter at -1 will take care of that. So there is no need for a "one too many" special case and no need to check for the array end.</p></li>
<li><p>Get the program working correctly then refactor to handle number-array values.</p></li>
<li><p>Wherever the actual equality compare happens is where you will check for a number-array vice a primitive number, I suspect. Make the equality code a separate function to keep the looping code clean.</p></li>
<li><p>If you think of the primitive number values as single element arrays then the code overall may simplify even more. Also the function you just wrote above could now take two arrays to compare. Then there are no extra equality functions or extra equality code lying about or convoluted code in a single function. No specialized code for number/number, number/array, array/array, etc combinations. Just one simple, clean equality function.</p></li>
<li><p>Might be able to use the spread operator to smooth handling of primitive/array combination?</p></li>
<li><p>I assume "equal" means same length and same numbers in the same order. This makes it all dead simple.</p></li>
<li><p>This equals method could be added to <code>Array.prototype</code> just for fun.</p></li>
</ul>
    </div>