<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The posted code does the following:</p>

<ol>
<li>Read all lines, just for counting</li>
<li>Create an array with the right size</li>
<li>Read all lines <em>again</em>, this time for storing</li>
<li>Print all lines in reverse order</li>
</ol>

<p>It's wasteful to read a file completely just to find the number of lines, and then need to read the file again to store the content.
It would be better to store the lines in a data structure that can grow its capacity as needed, to eliminate the need to know the number of lines in advance. That is, use any <code>List</code> implementation.</p>

<h3>Possible bug</h3>

<p>The description doesn't mention that there is precisely one integer per line in the input.
It must be the case, otherwise this code may not work well:</p>

<blockquote>
<pre><code>for(int i=0; i&lt;buffer.length; i++) {
    buffer[i] = Scan.nextInt();
}
</code></pre>
</blockquote>

<p>That is, if there are multiple numbers per line, then you will not read the entire file,
only the first <span class="math-container">\$N\$</span> numbers.
Similarly, if there are empty lines, then there may not be enough numbers,
and then the <code>.nextInt</code> call will throw a <code>NoSuchElementException</code>.</p>

<p>The thing is, since there program doesn't use any integer operation,
only read and print,
there's no point reading integers.
Keep in mind that when you read integers,
you also incur a parsing step.
It would make more sense to read the lines as strings,
it would be simpler, and it seems that's all you really need anyway.</p>

<h3>Suggested implementation</h3>

<p>Here's an alternative, more efficient solution,
that also simplifies the reversing logic using a <code>LinkedList</code>, with a <code>descendingIterator</code>:</p>

<pre><code>LinkedList&lt;String&gt; lines = new LinkedList&lt;&gt;();
while (scanner.hasNextLine()) {
    lines.add(scanner.nextLine());
}
scanner.close();

Iterator&lt;String&gt; iterator = lines.descendingIterator();
while (iterator.hasNext()) {
    System.out.println(iterator.next());
}
</code></pre>
    </div>