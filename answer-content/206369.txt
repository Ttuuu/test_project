<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've used <strong>Func&lt;&gt;</strong> to reuse the object in Linq. Here is the working sample. </p>

<pre><code>using System;
using System.Data;
using System.Linq;
using System.Data.DataSetExtensions;

public class Program
{
    private static readonly Func&lt;DataRow, User&gt; fnUserInfo = s =&gt; 
        new User
        {
            Id = s.Field&lt;int&gt;("Id"),
            Username = s.Field&lt;string&gt;("Username"),
            Name = s.Field&lt;string&gt;("Name"),
            Email = s.Field&lt;string&gt;("Email"),
            CreatedDate = s.Field&lt;DateTime&gt;("CreatedDate"),
            Phone = s.Field&lt;string&gt;("Phone"),
            City = s.Field&lt;string&gt;("City"),
            State = s.Field&lt;string&gt;("State"),
            Country = s.Field&lt;string&gt;("Country")
        };

    public static void Main()
    {
        Console.WriteLine("Hello World");

        var user = GetUserById(1);

        Console.WriteLine(user.Name);

        var user1 = GetUserByUsername("user3");

        Console.WriteLine(user1.Name);

        var user2 = GetUserByEmail("user5@gmail.com");

        Console.WriteLine(user2.Name);
    }

    public static User GetUserById(int id)
    {
        var users = GetUsers().AsEnumerable().Where(row =&gt; row.Field&lt;int&gt;("Id") == id);

        var userInfo = users.Select(fnUserInfo).FirstOrDefault();

        return userInfo;

    }

    public static User GetUserByUsername(string username)
    {
        var users = GetUsers().AsEnumerable().Where(row =&gt; row.Field&lt;string&gt;("Username") == username);

        var userInfo = users.Select(fnUserInfo).FirstOrDefault();

        return userInfo;
    }

    public static User GetUserByEmail(string email)
    {
        var users = GetUsers().AsEnumerable().Where(row =&gt; row.Field&lt;string&gt;("Email") == email);

        var userInfo = users.Select(fnUserInfo).FirstOrDefault();

        return userInfo;
    }

    static DataTable GetUsers()
    {
        // Consider these are the data from the SQL table.
        DataTable table = new DataTable();
        table.Columns.Add("Id", typeof(int));
        table.Columns.Add("Username", typeof(string));
        table.Columns.Add("Name", typeof(string));
        table.Columns.Add("Email", typeof(string));
        table.Columns.Add("CreatedDate", typeof(DateTime));
        table.Columns.Add("Phone", typeof(string));
        table.Columns.Add("City", typeof(string));
        table.Columns.Add("State", typeof(string));
        table.Columns.Add("Country", typeof(string));

        // Here we add five DataRows.
        table.Rows.Add(1, "user1", "David", "user1@gmail.com", DateTime.Now, "9999999999", "City 1", "State 1", "India");
        table.Rows.Add(2, "user2", "Sam", "user2@gmail.com", DateTime.Now, "8888888888", "City 2", "State 2", "USA");
        table.Rows.Add(3, "user3", "Christoff", "user3@gmail.com", DateTime.Now, "7777777777", "City 3", "State 3", "UK");
        table.Rows.Add(4, "user4", "Janet", "user4@gmail.com", DateTime.Now, "6666666666", "City 4", "State 4", "Germany");
        table.Rows.Add(5, "user5", "Melanie", "user5@gmail.com", DateTime.Now, "5555555555", "City 5", "State 5", "France");
        return table;
    }
}

public class User
{
    public int Id { get; set; }
    public string Username { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public DateTime CreatedDate { get; set; }
    public string Phone { get; set; }
    public string City { get; set; }
    public string State { get; set; }
    public string Country { get; set; }
}
</code></pre>

<p>DotNetFiddle: <a href="https://dotnetfiddle.net/FhDRR6" rel="nofollow noreferrer">https://dotnetfiddle.net/FhDRR6</a></p>
    </div>