<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Singletons make it hard to test your code, and in my job I'd reject this at review for encouraging the development of untestable features.  That said, I'll continue reviewing despite that.</p>
<h2>No need for helper class</h2>
<p>The <code>MemGuard</code> appears to be a poor man's reimplementation of <code>std::unique_ptr</code>.  It would be much simpler for you to declare <code>m_instance</code> as a <code>std::unique_ptr&lt;T&gt;</code>, and then just return <code>*m_instance</code> from your accessor.</p>
<p>There's a race condition when two or more threads try to create the instance (when both see a null pointer "before" the other has set it).  You <em>could</em> work around this with a mutex lock, but it's simpler to use a local static variable, <a href="//stackoverflow.com/q/8102125">which is thread-safe</a>:</p>
<pre><code>#include &lt;memory&gt;
template&lt;typename T&gt;
T&amp; Singleton&lt;T&gt;::instance()
{
    static const std::unique_ptr&lt;T&gt; instance{new T{}};
    return *instance;
}
</code></pre>
<hr>
<h2>We don't need a destructor</h2>
<p>There's no need for the empty virtual destructor, as the constructed object will always be deleted as its declared type.</p>
<hr>
<h1>Revised implementation</h1>
<p>With my changes, the code reduces to</p>
<pre><code>template&lt;typename T&gt;
class Singleton {
public:
    static T&amp; instance();

    Singleton(const Singleton&amp;) = delete;
    Singleton&amp; operator= (const Singleton) = delete;

protected:
    struct token {};
    Singleton() {}
};

#include &lt;memory&gt;
template&lt;typename T&gt;
T&amp; Singleton&lt;T&gt;::instance()
{
    static const std::unique_ptr&lt;T&gt; instance{new T{token{}}};
    return *instance;
}
</code></pre>
<p>I'm using a constructor token to allow the base class to call the subclass's constructor without needing to be a <code>friend</code>.</p>
<h2>Example</h2>
<p>An example <code>T</code> looks like:</p>
<pre><code>#include &lt;iostream&gt;
class Test final : public Singleton&lt;Test&gt;
{
public:
    Test(token) { std::cout &lt;&lt; "constructed" &lt;&lt; std::endl; }
    ~Test() {  std::cout &lt;&lt; "destructed" &lt;&lt; std::endl; }

    void use() const { std::cout &lt;&lt; "in use" &lt;&lt; std::endl; };
};
</code></pre>
<p>Although the constructor is public, it can't be called without a <code>Singleton&lt;T&gt;::token</code> object, meaning that access to it is now controlled.</p>
<h2>Tests:</h2>
<pre><code>int main()
{
    // Test cannot_create; /* ERROR */

    std::cout &lt;&lt; "Entering main()" &lt;&lt; std::endl;
    {
        auto const&amp; t = Test::instance();
        t.use();
    }
    {
        auto const&amp; t = Test::instance();
        t.use();
    }
    std::cout &lt;&lt; "Leaving main()" &lt;&lt; std::endl;
}
</code></pre>
<pre class="lang-none prettyprint-override"><code>Entering main()
constructed
in use
in use
Leaving main()
destructed
</code></pre>
<hr>
<h2>Afterthought:</h2>
<p>There's no need for the smart pointer; ordinary memory management works here:</p>
<pre><code>template&lt;typename T&gt;
T&amp; Singleton&lt;T&gt;::instance()
{
    static T instance{token{}};
    return instance;
}
</code></pre>
    </div>