<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>About the comments</h1>

<p>Some of the comments in your code are very nice. For example, when explaining the different cases in <code>unsigned_divide()</code>. However, avoid comments that are just literal repetitions of the code just below. There are some borderline cases of that in your code, such as:</p>

<pre><code>// Accept and store the tentative quotient digit.
</code></pre>

<p>And:</p>

<pre><code>// Prepend a (m+1)'th zero-value digit to the dividend, then shift.
</code></pre>

<p>Also, if a block of code can be replaced by a call to a function with a descriptive name, that can then avoid needing a comment.</p>

<h1>Add a description to <code>@param</code> and <code>@return</code> values</h1>

<p>It takes little effort to write an actual description for the parameters and return value in the Doxygen comments, and it will make the resulting documentation better. For example, in the documentation for <code>operator/</code>, write:</p>

<pre><code> * @param a Left hand side of the division.
 * @param b Right hand side of the division.
 * @return  Returns a / b.
</code></pre>

<p>Also remember to document all parameters, for example I se no <code>@param remainder</code> in the documentation of <code>unsigned_divide()</code>. You can turn on warnings in Doxygen, so it will tell you if you forgot to document all parameters of each function for example.</p>

<h1>Consider splitting off parts of <code>unsigned_divide()</code> into separate functions</h1>

<p>This function is quite long, and could perhaps be split into separate functions.
For example, the three cases could be separated, and in the third case, the actual long division algorithm could be put into its own function as well.</p>

<h1>Consider adding a user-defined literal operator</h1>

<p>You could add a <a href="https://en.cppreference.com/w/cpp/language/user_literal" rel="nofollow noreferrer">user-defined literal</a> operator that just wraps the conversion constructor, so it becomes easy to write a literal <code>HugeInt</code> in code that uses this class. For example:</p>

<pre><code>HugeInt operator "" _huge(unsigned long long value) {
    return HugeInt(value);
}

HugeInt operator "" _huge(const char *text) {
    return HugeInt(text);
}
</code></pre>

<p>And then you could write:</p>

<pre><code>HugeInt the_answer = 6_huge * "7"_huge;
</code></pre>

<h1>Consider using <code>std::vector&lt;uint32_t&gt;</code> to store the digits</h1>

<p>One issue I see with this class, which will impact performance as well, is that you allocate a static array of 1200 bytes to hold the digits. This wastes a lot of memory for smaller numbers, and will obviously fail when the numbers grow large enough to exceed this size.</p>

<p>There are several reasons why this can have negative effect on performance, even though it seems at first that a static array has none of the overhead of a <code>std::vector</code>. However, if you have many <code>HugeInt</code>s (maybe you have an array of them), you are using a lot of memory that has to be paged in. Also, stack space could be limited, and when doing calculations it's quite normal to have several variables on the stack, so just having 4 <code>HugeInt</code>s would already consume 2 pages. This becomes a real problem when you have some recursive algorithm: the total stack usage is then the deepest recursion level times the memory used by a single iteration.</p>

<p>The large size can also negatively impact memory layout, making it harder for the CPU's caches and prefetcher. Consider a function that starts with:</p>

<pre><code>void somefunc(...) {
    int x;
    HugeInt y;
    int z;
    ...
</code></pre>

<p>There is likely a huge gap between <code>z</code> and <code>x</code> in the above code fragment.</p>

<p>I think it's likely in real use cases that a significant fraction of <code>HugeInt</code>s will actually only hold small values. It might be worthwhile to investigate if some kind of vector container with <a href="https://stackoverflow.com/questions/2178281/small-string-optimization-for-vector">small size optimization</a> could be used. This would keep small <code>HugeInt</code>s fast, and for the large ones, the time taken by operations on them will dwarf the performance loss of the indirection of a dynamic allocation of the digits.</p>
    </div>