<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Intersection logic</h2>
<p>For the intersection logic, maybe it would be appropriate to make a method on the cell class that would determine if another cell (e.g. tank) overlaps with it. Refer to <a href="https://codereview.stackexchange.com/a/31564/120114">this answer</a> for inspiration.</p>
<h2>Review</h2>
<p>Just as a POJO is created for the definition of <code>Directions</code> I'd recommend setting up a POJO for the colors used in <code>drawMap</code>. That way instead of using the <code>switch</code> statement, the code can check to see if the value exists as a key in the mapping and then set the value of <code>ctx.fillStyle</code> accordingly.</p>
<p>The keypress handler can be simplified using <code>event.key.toLowerString()</code>, as well as a mapping of keys to directions.</p>
<p><code>hasReachedGoal</code> calls <code>alert</code>. Some users may have disabled alerts in a browser setting. It is better to use HTML5 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog" rel="nofollow noreferrer"><code>&lt;dialog&gt;</code></a> element - it allows more control over the style and doesn't block the browser. Bear in mind that it <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#Browser_compatibility" rel="nofollow noreferrer">isn't supported by IE and Safari</a> but <a href="https://github.com/GoogleChrome/dialog-polyfill" rel="nofollow noreferrer">there is a polyfill</a></p>
<p>In <code>game.js</code> the function <code>grawGoals()</code> uses <code>foreach</code> with a callback function that accepts <code>coord</code> as a parameter. Instead of manually setting and updating a counter variable i.e. <code>i</code> accept it as the second parameter because <code>forEach</code> passes three arguments<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Parameters" rel="nofollow noreferrer">1</a></sup>.</p>
<p>In the original code <code>mapGrid</code> is declared with <code>const</code>, yet in <em>game.js</em> the <code>maze</code> is declared with <code>let</code>. It is better to use <code>const</code> as a default and then when you determine re-assignment is needed switch to <code>let</code>. This helps avoid accidental re-assignment.</p>
    </div>