<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code doesn't work like in real life. For example, when I play:</p>

<pre><code>1|2|3
4|5|6
7|8|9

P1(X): Enter your Input:1

P2(O): Enter your Input:1

X|2|3
4|5|6
7|8|9
</code></pre>

<p>There is no error generated. Both players cannot request the same location. Also, playing a new game, this scenario:</p>

<pre><code>P2(O): Enter your Input:5

X|O|3
X|O|6
7|8|9    

P1(X): Enter your Input:7

P2(O): Enter your Input:
</code></pre>

<p>This scenario <code>P2(O):</code> should never have been reached. Player 2 doesn't get another move after Player 1 wins the game. Recommend fixing these problems.</p>

<p>Onto your code - </p>

<p>Firstly, you have an entry point - that's good, however it doesn't do anything other than call <code>play()</code>.</p>

<p>You should move the control loop into the entry point, and remove duplicate code scattered amongst your code. In <code>default_values()</code>, you scatter those pieces across the code.</p>

<pre><code>tot_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
p1 = 0
p2 = 0
p1_win = False
p2_win = False
tie = False
</code></pre>

<p>Yet you have them inside <code>default_values()</code>. Inside your <code>play()</code> function, you have <code>play()</code> in the loop, but the first time you call it, you specify <code>default_values()</code> - notice the inconsistency there?<br>
You should have realized that when you were reviewing your code.</p>

<p>So, we fix that, and this is what we come up with:</p>

<pre><code>if __name__ == '__main__':

    win_combinations = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
        [1, 4, 7],
        [2, 5, 8],
        [3, 6, 9],
        [1, 5, 9],
        [3, 5, 7]]

    while True:
        default_values()
        play()
        choice = input("Play Again? ('n' to exit):")
        if choice == "n":
            break

    print("Ciao")
</code></pre>

<p>You also have lots of other issues with your code, but let me give you a few pointers for the rest (I don't want to rewrite your entire code).</p>

<p><code>if p1_win == True:</code>
You don't need to specify "True" as this is the same: <code>if p1_win:</code></p>

<p>You have global statements all throughout your code. This is bad - and the reason is - you don't know 100% where your variables are being changed. The #1 source of all bugs when coding is when the state changes in variables and the change was unintended. Does that make sense? Please review it by googling.<br>
What you should do is pass variables around. Having a piece of code like: </p>

<pre><code>active_player = not active_player
player_input = get_player_input() 
board_state = update_board(player_input, board_state)
if check_for_a_winner(board_state):
    print("We have a winner! {} wins!".format(active_player))
</code></pre>

<p>shows you how we inject the input as well as the current board status into the <code>update_board</code> function, and receive the updated board status back from it. We can then present the current board status into the winner check function.<br>
This examples shows that state changes only in very specific places, and if you're hunting down a bug, you can find it quite simply.</p>

<p>Typically, with several pieces of <em>related</em> state, you'll need an object which can represent all of them at once. I recommend reading a book which explains about classes, for instance having multiple dog and cat classes and how you can represent their attributes.</p>

<p>Please attempt to incorporate these changes into you code and repost your updated solution (with a link to this page) and demonstrate your code working better, with those bugs removed. </p>

<p>Good Luck!</p>
    </div>