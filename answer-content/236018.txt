<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>ResourceOwner</code>:</strong></p>

<ul>
<li><p>We need to <code>#include &lt;utility&gt;</code> for <code>std::move</code>.</p></li>
<li><p><code>Reset</code> might be more flexible taking its argument by value <code>void Reset(T new_data = T())</code>, so we can copy into it instead of moving.</p></li>
<li><p>It might be useful to have a value constructor: <code>ResourceOwner(T data);</code>.</p></li>
</ul>

<p><strong><code>SharedResourceOwner</code>:</strong></p>

<ul>
<li><p>Again, <code>#include &lt;utility&gt;</code>.</p></li>
<li><p>Use <code>std::size_t</code> rather than <code>size_t</code> for C++.</p></li>
<li><p>Use the constructor initializer list to initialize member variables, instead of assigning them in the body of the constructor.</p></li>
<li><p>We could provide a <code>Swap()</code> function, allowing us to implement copy and move assignment more easily:</p>

<pre><code>void Swap(SharedResourceOwner&amp; other)
{
    using std::swap;
    swap(reference_counter, other.reference_counter);
    swap(data, other.data);
}

SharedResourceOwner &amp;operator=(const SharedResourceOwner&amp; other) noexcept
{
    SharedResourceOwner temp(other);
    Swap(temp);
    return *this;
}

SharedResourceOwner &amp;operator=(SharedResourceOwner &amp;&amp;other) noexcept
{
    SharedResourceOwner temp(std::move(other));
    Swap(temp);
    return *this;
}
</code></pre>

<p>(We could do the same for <code>ResourceOwner</code>).</p></li>
<li><p>Again, <code>Reset()</code> can take its parameter by value.</p></li>
<li><p>I'm not sure it's worth the extra complication (extra logic in <code>Reset()</code>, and making the counter <code>mutable</code>) to avoid allocating the reference counter for the first instance. If we specify a <code>SharedResourceOwner</code> over a normal <code>ResourceOwner</code>, we probably need to use the reference counter anyway.</p></li>
</ul>

<hr>

<p>Some other points:</p>

<ul>
<li><p>The <code>TextureData</code> class might prefer to set <code>texture_id</code> to <code>0</code> after calling <code>glDeleteTextures</code> for added safety.</p></li>
<li><p>Just resetting the owned data to a default constructed value is potentially dangerous. We have no easy way to ensure that <code>Get()</code> isn't called when the data is invalid.</p>

<p>As well as storing <code>T data;</code> by value in the resource owner classes we could store a pointer to that same data member. The <code>Get()</code> function can then access the <code>data</code> member through the pointer, instead of directly. When the data is invalid (i.e. immediately after construction, after moving from the owner, after calling <code>Reset()</code>), we can make that pointer null. This would be a decent way of catching <code>Get()</code>s when the data is invalid.</p>

<p>Alternatively, storing the data as <code>std::optional&lt;T&gt; data;</code> could do the same thing with less hassle.</p></li>
<li><p>This looks like it copies the path string unnecessarily: <code>static Texture FromFile(std::string path);</code> we should pass it by <code>const&amp;</code> instead of by value. (There are a lot of other places in the repository that do this).</p></li>
</ul>
    </div>