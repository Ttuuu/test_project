<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nowadays is common to omit the generic type on the right hand side of an assignment so instead of</p>

<pre><code> ArrayList&lt;Integer&gt; divisors = new ArrayList&lt;Integer&gt;(); 
</code></pre>

<p>you can write </p>

<pre><code> ArrayList&lt;Integer&gt; divisors = new ArrayList&lt;&gt;(); 
</code></pre>

<p>Since you are not using any <code>ArrayList</code> specific functionality it is cleaner to declare <code>divisors</code> as <code>List</code> (same goes for <code>gcd</code>)</p>

<pre><code> List&lt;Integer&gt; divisors = new ArrayList&lt;&gt;();
</code></pre>

<p>The call gcd.get(gcd.size() deserves a separate method with a reasonable name. </p>

<p>Regarding <code>BufferedReader userInput ...</code> while in this example it is harmless to not close IO resources, it is good practice to do so in general. Check out "try with resources statement": <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html</a>. </p>

<p>It is also common to reuse the Reader and not create a new one every time you need to perform a read operation. With this in mind you will have something like this:</p>

<pre><code>public static void main(String[] args) throws IOException {
    System.out.println("Do you want to convert from radicals to degrees, or degrees to radicals?");
    System.out.print("Use \"R\" for radials to degrees, and \"D\" for degrees to radicals: ");
    try (BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in))) {
        String userChoice = userInput.readLine();

        if (userChoice.contains("D") || userChoice.contains("d")) {

            System.out.print("Degrees: ");
            dtr(userInput);

        } else if (userChoice.contains("R") || userChoice.contains("r")) {

            System.out.println("Radical numerator (omit pi): ");
            System.out.println("Radical denominator: ");
            rtd(userInput);

        } else {

            System.out.println("Invalid response. Please restart the program.");
        }
    }
}
</code></pre>

<p>Note that now <code>rtd</code> requires only one parameter. Because you print before reading user input, the user gets to see</p>

<pre><code> Radical numerator (omit pi): 
 Radical denominator: 
</code></pre>

<p>before she has an opportunity to provide any input. Those statements should move into <code>rtd</code> interleaved with reading user input.</p>

<pre><code> if (userChoice.contains("D") || userChoice.contains("d"))
</code></pre>

<p>can be simplified like so:</p>

<pre><code>if (userChoice.toLowerCase().contains("d")) {     
</code></pre>
    </div>