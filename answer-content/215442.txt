<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that none of these suggestions will have any significant impact on the performance of your application overall. Don't micro-optimize performance until you have known, tested bottlenecks.</p>

<p>The <code>getTimestamp()</code> method is noise. If all you care about is the current timestamp in milliseconds, use <code>System.currentTimeMillis()</code>.</p>

<p>You can use a constant to store the number of milliseconds in a minute, potentially saving the multiplication. Even if the compiler optimizes the math away, it's easier to read.</p>

<p>A <code>java.sql.Timestamp</code> is a kind of <code>java.util.Date</code>, and the <code>getTime()</code> method is defined there. Your method should accept a <code>java.util.Date</code> to support more clients at no cost.</p>

<p>Your method is poorly named. Something like <code>getMinutesSince()</code> would be more readable. Likewise, there are better variable names than what you've selected.</p>

<p>Use <code>final</code> to indicate that variables won't be reassigned. That reduces the cognitive load on the reader.</p>

<p>You don't really need as many variables as you have. You might even be able to get away with none and still have a reasonably clear method.</p>

<p>If you were to use all my suggestions, your code might look more like:</p>

<pre><code>private static final long MILLISECONDS_PER_MINUTE = 60 * 1000;

public static long getMinutesSince(final java.util.Date startTime) {
  final long millisecondsSinceStart =
      System.currentTimeMillis() - startTime.getTime();
  return millisecondsSinceStart / MILLISECONDS_PER_MINUTE;
}
</code></pre>
    </div>