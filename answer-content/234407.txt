<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Clarify your code's structure</h1>

<p>As pacmaninbw already mentioned, adding blank lines and moving bits into their own functions would help make the structure of your code more clear.</p>

<h1>Avoid using <code>std::endl</code></h1>

<p>Just use <code>'\n'</code>; <code>std::endl</code> is equivalent to <code>'\n</code>' plus a flush of the output, which is usually not needed and will only decrease the performance of your program. See: <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">https://stackoverflow.com/questions/213907/c-stdendl-vs-n</a></p>

<h1>Create a function to count bits in a set</h1>

<p>As pacmaninbw already mentioned, you are misusing <code>std::bitset&lt;&gt;</code> to count the number of bits. Instead of using the pattern <code>bitSet = value; foo = bitSet.count()</code>, create a function to count the number of bits set of a given value. You can start by just moving the <code>std::bitset</code> approach to this function:</p>

<pre><code>static inline auto count_bits(uint64_t value) {
    return std::bitset&lt;64&gt;(value).count();
}
</code></pre>

<p>And then use it in other places in the code where appropriate. Then later you could change this function to something better. However, an optimizing compiler will turn the <code>std::bitset</code> approach into something nice and efficient anyway: <a href="https://godbolt.org/z/HwvqMb" rel="nofollow noreferrer">https://godbolt.org/z/HwvqMb</a></p>

<p>C++20 will bring you the function <a href="https://en.cppreference.com/w/cpp/numeric/popcount" rel="nofollow noreferrer"><code>std::popcount()</code></a>, which is exactly what you want to use here. The main advantage is that it's <code>constepxr</code>, which <code>std::bitset::count()</code> unfortunately isn't.</p>

<h1>Don't store what can be trivially (re)computed</h1>

<p>Your <code>dMap</code> basically is there just to convert from a given value to the number of bits set in that value. Since CPUs are really fast at this kind of computation, it's not worth storing this into a map. The map approach has a huge overhead compared to the single <code>popcount</code> CPU instruction: it dynamically allocates memory to hold pairs of <code>uint64_t</code> and <code>uint8_t</code>, and it has to compute the hash of the input every time you access the map. So don't use it, and instead anywhere you wrote <code>dMap[foo]</code>, write <code>count_bits(foo)</code>.</p>

<h1>Using nice features</h1>

<p>There are lots of features that you can choose from, even some from before C++11, that would make your code a bit shorter. In particular, a problem like this screams "algorithms", so maybe there are some STL algorithms to help you out. Also, some C++11 features could be used in your code as well. The question is whether it makes the code more readable: some features are not used commonly, and so they are harder to understand for most people. So look for things that foremost improve the readability of the code.</p>

<p>Below is a selection of things I think you could have reasonably used.</p>

<h3>Range-based for</h3>

<p>Whenever you are looping over the items of a container, range-based <code>for</code> is usually something you should use. For example, you could read in the array from <code>std::cin</code> this way:</p>

<pre><code>int n;
std::cin &gt;&gt; n;
std::vector&lt;uint64_t&gt; d(n);
for (auto &amp;value: d)
    std::cin &gt;&gt; value;
</code></pre>
    </div>