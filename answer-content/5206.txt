<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>def formatpagelist (numberlist):
</code></pre>

<p>The python style guide recommends words_with_underscores for function names. </p>

<pre><code>    tempdic={}
</code></pre>

<p>This is a really bad variable name. It tells me nothing about what the variable is used for. It tells me the variable is temporary (like all variables) and that its a dict, which obvious given the {}</p>

<pre><code>    returnstring=''
</code></pre>

<p>This doesn't show up until way later... Why is it here?</p>

<pre><code>    for number in numberlist:
        if number-1 in tempdic.keys():
</code></pre>

<p>This is the same as <code>number - 1 in tempdic:</code> </p>

<pre><code>            tempdic[number-1]=number
        elif number-1 in tempdic.values():
            for key in tempdic.keys():
                if number-1==tempdic[key]: foundkey=key
</code></pre>

<p>If you've got scan over the keys of a dictionary, that is a sign you probably shouldn't be using a dictionary. </p>

<pre><code>            tempdic[foundkey]=number
        else:
            tempdic[number]=0

    keylist=list(tempdic.keys())
    keylist.sort()
</code></pre>

<p>This the same thing as <code>keylist = sorted(tempdic)</code></p>

<pre><code>    for key in keylist:
        if tempdic[key]&gt;0:
            returnstring+=(str(key)+'-'+str(tempdic[key])+',')
        else: returnstring+=str(key)+','
</code></pre>

<p>I think putting those on one line makes it harder to read. You are usually better off building a list and then joining the list.</p>

<pre><code>    return returnstring
</code></pre>

<p>Here is another approach: I stole parts from @Jeff, but I wanted to try a different approach.</p>

<pre><code>import collections

pages = [1,2,5,6,7,9]
starts = collections.OrderedDict()
ends = collections.OrderedDict()
for idx, page in enumerate(pages):
    section = page - idx
    starts.setdefault(section, page)
    ends[section] = page
page_parts = []
for section, start in starts.items():
    end = ends[section]
    if start == end:
        page_parts.append("{0}".format(start))
    else:
        page_parts.append("{0}-{1}".format(start, end))
print(','.join(page_parts))
</code></pre>
    </div>