<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Refactoring the core interface:</em></h3>

<p>Since presented <code>HashMap</code> class is just a custom wrapper around Python's <em>dictionary</em> - it should borrow all the advantages from that.</p>

<p>As the class provides a public interface for the internal data structure - that data structure needs to be <em>protected</em> (or private). Otherwise, the one can easily compromise it like shown below:</p>

<pre><code>hashmap = HashMap()
hashmap.map = tuple()
</code></pre>

<p>So we change the constructor/initializer to the following:</p>

<pre><code>def __init__(self):
    self.capacity = 16
    self._map = {}
</code></pre>

<p>Let get down to instance methods:</p>

<ul>
<li><strong><code>clear</code></strong> method. It reassigns the internal <em>map</em> with <code>self._map = {}</code>.<br>
In ideal perspective using <code>self._map.clear()</code> would be preferable as it allows to beat potential copies of <code>self._map</code> (even if that's unlikely to happen)</li>
<li><strong><code>contains_key</code></strong> method.<br>
Returns <code>key in self._map.keys()</code> which is a verbose way of <strong><code>key in self._map</code></strong></li>
<li><p><strong><code>entry_set</code></strong> method and <strong><code>key_set</code></strong> method lead to confusion as they return the same result:<br>
<code>return set(self._map)</code> is technically equal to <code>return set(self._map.keys())</code>.</p>

<p>To fix that - let's perceive "entry" as a <code>(key, value)</code> pair.<br>
Therefore the definition of <code>entry_set</code> is changed to:</p>

<pre><code>def entry_set(self) -&gt; set:
    """
    Returns a set of the hashmap

    :return set: A set representation of the map
    """
    return set(self._map.items())
</code></pre></li>
<li><p><strong><code>get</code></strong> method. The noisy expression <code>self._map[key] if key in self._map.keys() else None</code> should be eliminated in favor of flexible <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a> method:</p>

<pre><code>self._map.get(key, None)
</code></pre></li>
<li><p><strong><code>get_or_default</code></strong> method has the same issue as <code>get</code> method, and the optimal way would be to just combine them into a single unified method:</p>

<pre><code>def get(self, key: object, default_value=None) -&gt; object:
    """
    Returns the value at the passed key, or default_value if not present

    :param key -&gt; object: Key to retrieve value in map\n
    :param default_value -&gt; object: Value to return if key is not present in map

    :return object: Value associated with "key", "default_value" otherwise 
    """
    return self._map.get(key, default_value)
</code></pre></li>
<li><p><strong><code>is_empty</code></strong> method. The returned value <code>self._map != {}</code> is simply replaced with <strong><code>bool(self._map)</code></strong></p></li>
<li><p><strong><code>key_set</code></strong> method. The returned value <code>set(self._map.keys())</code> is simplified to <strong><code>set(self._map)</code></strong></p></li>
<li><p><strong><code>remove</code></strong> method. The whole method body:</p>

<pre><code>if key in self._map.keys():
    value = self._map[key]
    del self._map[key]
    return value
return None
</code></pre>

<p>can be replaced with the convenient <a href="https://docs.python.org/3/library/stdtypes.html#dict.pop" rel="nofollow noreferrer"><code>dict.pop</code></a> method:</p>

<pre><code>return self._map.pop(key, None)
</code></pre></li>
</ul>

<hr>

<p>The final optimized implementation:</p>

<pre><code>class HashMap:

    def __init__(self):
        self.capacity = 16
        self._map = {}

    def clear(self) -&gt; None:
        """
        Clears all the entries into this hashmap

        :return: None
        """
        self._map.clear()

    def contains_key(self, key: object) -&gt; bool:
        """
        Returns if the map contains the passed key

        :param key -&gt; object: Value to check residency in map keyset

        :return bool: True if "key" in map keyset, False otherwise
        """
        return key in self._map

    def contains_value(self, value: object) -&gt; bool:
        """
        Returns if the map contains the passed value

        :param value -&gt; object: Value to check residency in map valueset

        :return bool: True if "value" in map valueset, False otherwise
        """
        return value in self._map.values()

    def entry_set(self) -&gt; set:
        """
        Returns a set of the hashmap

        :return set: A set representation of the map
        """
        return set(self._map.items())

    def get(self, key: object, default_value=None) -&gt; object:
        """
        Returns the value at the passed key, or default_value if not present

        :param key -&gt; object: Key to retrieve value in map\n
        :param default_value -&gt; object: Value to return if key is not present in map

        :return object: Value associated with "key", "default_value" otherwise 
        """
        return self._map.get(key, default_value)

    def is_empty(self) -&gt; bool:
        """
        Returns if the map has no key-value entries

        :return bool: True if map isn't empty, False otherwise
        """
        return bool(self._map)

    def key_set(self) -&gt; set:
        """
        Returns a set of all the keys

        :return set: Set of all keys in map
        """
        return set(self._map)

    def put(self, key: object, value: object) -&gt; object:
        """
        Adds the key-value pair to the map, returning the value

        :param key -&gt; object: Key to add to set\n
        :param value -&gt; object: Value to add to set

        :return object: "value" passed
        """
        self._map[key] = value
        return value

    def remove(self, key: object) -&gt; Union[object, None]:
        """
        Removes the mapping for the passed key, returning the value

        :param key -&gt; object: Key to retrieve value from map

        :return object: Value associated with "key", None if key not in map keyset
        """

        return self._map.pop(key, None)

    def size(self) -&gt; int:
        """
        Returns the size of the hashmap

        :return int: Size of map
        """
        return len(self._map)

    def values(self) -&gt; List[object]:
        """
        Returns a list of the values in the hashmap

        :return List[object]: List of values in map
        """
        return list(self._map.values())
</code></pre>

<p>P.S. obviously, Python's <code>dict</code> itself is a good <em>hashmap</em> :-)</p>
    </div>