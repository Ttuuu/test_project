<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static int CountDescendants&lt;TSource, T&gt;(
    this IEnumerable&lt;TSource&gt; source, 
    T startKey, 
    Func&lt;TSource, T&gt; selfReference,
    Func&lt;TSource, T&gt; parentReference)
{
    if(source == null) {
        throw new ArgumentNullException("source");
    }

    return Count(source, startKey, selfReference, parentReference);
}
</code></pre>
</blockquote>

<p>Thumbs up for doing the validation in a non-coroutine method, although I wonder why <code>source</code> is the only argument which needs validation.</p>

<hr>

<blockquote>
<pre><code>    // hash-map + .Where is faster than using IEnumerable + .Where
    ReadOnlyDictionary&lt;T, T&gt; consolidatedSource = 
        new ReadOnlyDictionary&lt;T, T&gt;(source.ToDictionary(selfReference, parentReference));
</code></pre>
</blockquote>

<p>Firstly, why <code>ReadOnlyDictionary</code>? This isn't exposed outside this method, and within the method you should able to trust yourself not to do anything nasty with it.</p>

<p>Secondly, I think the comment is indicative of a misunderstanding. Hash-map + <code>.TryGetValue</code> is faster than <code>IEnumerable</code> + <code>.Where</code>, but a linear search through a hash-map is no faster than a linear search through a list.</p>

<p>What you probably want to use here is <code>source.ToLookup(parentReference)</code>. That <em>will</em> give an asymptotic performance improvement.</p>

<hr>

<blockquote>
<pre><code>    Stack&lt;KeyValuePair&lt;T, T&gt;&gt; stack = new Stack&lt;KeyValuePair&lt;T, T&gt;&gt;();
</code></pre>
</blockquote>

<p>If you have C# 7 then it would probably be nicer to use <code>Stack&lt;(T foo, T bar)&gt;</code> with suitable names. The ability to have names at all is part of the point here.</p>

<p>Although, FWIW, I'm not convinced that you need anything more than <code>Stack&lt;T&gt;</code>, and I don't think <code>keys</code> is necessary at all.</p>
    </div>