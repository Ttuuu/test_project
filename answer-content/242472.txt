<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your initial claim sounds about right to me, since for each iteration, checking at most <code>cutoff</code> elements for the <code>insertion_point</code> in the straight version (due to the restriction on the input) should become increasingly faster than checking logarithmic many in the binary version. Of course there is a lot more to consider like <a href="https://en.wikipedia.org/wiki/Locality_of_reference" rel="noreferrer">cache locality</a>, but computational complexity should be the dominating factor in this case. That being said, I see some potential to improve your benchmark.</p>

<h2>Benchmarking</h2>

<h3>Verify that your implementations are correct</h3>

<p>A testsuite would of course be best practice, but the absolute minimum is to make sure that your algorithms return the same result as <code>std::sort</code>. The binary insertion sort you provided has an off-by-one-error, thus rendering your results useless. For the following two lines, the shown fix was to increase all end-iterators by one:</p>

<pre><code>auto insertion_point = std::lower_bound(first, cur, *cur);
std::copy_backward(insertion_point, cur, cur + 1);
</code></pre>

<h3>Choose a suitable baseline</h3>

<p>Without any generally accepted baseline for the runtime of the algorithms, it is hard to argue whether the results are significant in any way. Again, <code>std::sort</code> does the job.</p>

<h3>Test against (somewhat) equally optimized implementations</h3>

<p>I am not an expert in optimization, but managed to shave off about 30% of the runtime of the binary version by adding an early return and using <code>std::upper_bound</code> instead of <code>std::lower_bound</code>, both of which indirectly happen in your straight version:</p>

<pre><code>for (auto cur = first + 1; cur &lt; last; ++cur) {
    if (*(cur - 1) &lt; *cur) { continue; }
    auto val = *cur;
    auto insertion_point = std::upper_bound(first, cur, *cur);
    std::copy_backward(insertion_point, cur, cur + 1);
    *insertion_point = val;
}
</code></pre>

<p>The change from <code>std::lower_bound</code> to <code>std::upper_bound</code> does not change much due to the input format, which leads us to the next chapter.</p>

<h3>Use realistic data</h3>

<p>In your benchmark, you simply shuffle the numbers from 0 to n and partially sort them again, which means that there are no duplicates in the input. This is a rather strict constraint and probably allows for even more optimized algorithms (e.g. bucket sort). An input vector where each element is drawn from a chosen probability distribution (and then again partially sorted) should yield more representative results.</p>

<p>Additionally, you should always put some thought into the type of elements you are sorting, e.g. for <code>int</code> copying is fine, but for larger classes the benchmark needs to be adapted towards utilizing <code>std::move</code>.</p>

<h3>Run tests multiple times</h3>

<p>This is especially important for micro optimizations, so small <code>size</code> in our case, and the reason why microbenchmark support libraries like <a href="https://github.com/google/benchmark" rel="noreferrer">google/benchmark</a> exist. If you’re not willing to put up with the hazzle of integrating it in your project, <a href="http://quick-bench.com/" rel="noreferrer">quick-bench.com</a> allows for easy online benchmarking.</p>

<p>I quickly threw together an example using your code and the fixed algorithm, you can find it <a href="http://quick-bench.com/VsGg3pkTpteNs--EK19EeZrUyhk" rel="noreferrer">here</a>.</p>

<h3>Specify your compiler version and hardware</h3>

<p>This is not as relevant for proving a general point, but of course results will differ when using compilers of different development levels (or even using your own homecrafted one). Here, websites like quick-bench come in handy again.</p>

<h2>Code quality</h2>

<h3>Naming</h3>

<p>As mentioned by others, <code>duration1</code> and <code>duration2</code> as well as <code>data1</code> and <code>data2</code> are quite unhelpful. Also, iterators are usually named <code>begin</code> and <code>end</code> instead of <code>first</code> and <code>last</code>. Other than that, your naming is expressive enough.</p>

<h3>Creating the input vector</h3>

<p>You initialize two vectors of the needed size, thus default initializing all the elements. Then you fill the first one and copy the partially sorted result back to the other. Preferably, one would reserve an empty vector and then use a custom function like <code>iota_n</code> (<a href="https://stackoverflow.com/questions/11767512/what-would-be-a-good-implementation-of-iota-n-missing-algorithm-from-the-stl">example</a>) to back-insert all the elements. Once they are shuffled and partially sorted, simply use</p>

<pre><code>auto data_copy = initial_data;
</code></pre>

<p>instead of calling <code>std::copy</code>.</p>

<p>Also, you included <code>&lt;iostream&gt;</code> twice.</p>

<h3>Insertion sort</h3>

<p>Whereas binary_insertion_sort is readable and reasonably easy to grasp, it took me a while longer for straight_insertion_sort. The if-case can only occur in the beginning of the range to sort and does nothing but catch an edge-case. It can be simplified to </p>

<pre><code>for (auto cur = first + 1; cur &lt; last; ++cur) {
    if (*cur &lt; *first) {
        std::rotate(first, cur, cur + 1);
    }
    else {
        auto val = *cur;
        auto it = cur;
        for (it = cur; val &lt; *(it - 1); --it) {
            *it = *(it - 1);
        }
        *it = val;
    }
}
</code></pre>

<p>, which actually seems to be a bit faster. I tried making the else-case more readable whilst preserving speed by using <code>std::rotate</code> once more, but failed to do so.</p>

<p>For both algorithms, you use <code>&lt;</code> to compare iterators, where usually <code>!=</code> is used, see <a href="https://stackoverflow.com/questions/6673762/why-is-used-with-iterators-instead-of">this SO thread</a>. It doesn’t make any difference speedwise.</p>
    </div>