<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    int highRange = 100;
    int lowRange = 0;
</code></pre>
<p>Mark them <code>const</code>. Then the reader doesn't need to check the whole code to see if these numbers are modified or not.</p>
<blockquote>
<p>Immutable objects are easier to reason about, so make objects non-const only when there is a need to change their value. Prevents accidental or hard-to-notice change of value.</p>
</blockquote>
<ul>
<li><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rconst-immutable" rel="nofollow noreferrer">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rconst-immutable</a></li>
</ul>
<hr>
<pre><code>std::cout &lt;&lt; "\tWelcome to Guess My Number\n\n";

std::cout &lt;&lt; "\tPlease enter your number between 1 and 100:\n";

std::cin &gt;&gt; secretNumber;
</code></pre>
<p>Since you need the statements asking for input to appear in the console <em>definitely</em> before you start reading for input, use <code>std::endl</code>. That will force a buffer flush to the console.</p>
<p>If you read that this affects performance, try to guess (<code>:)</code>) how much would the cost be compared to a human entering a number and hitting enter.</p>
<hr>
<pre><code>std::cin &gt;&gt; secretNumber;
</code></pre>
<p>Since secretNumber is going to remain a constant for the rest of the program, use a lambda to store it.</p>
<pre><code>const int secretNumer = [](){
  int n;
  std::cin &gt;&gt; n;
  return n;
}();
</code></pre>
<p>Sorry I don't know a better way to return a number read from stream.</p>
<blockquote>
<p>It nicely encapsulates local initialization, including cleaning up scratch variables needed only for the initialization, without needing to create a needless non-local yet non-reusable function. It also works for variables that should be const but only after some initialization work.</p>
</blockquote>
<ul>
<li><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-lambda-init" rel="nofollow noreferrer">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-lambda-init</a></li>
</ul>
<hr>
<p>Avoid <code>do</code> statements</p>
<blockquote>
<p>Readability, avoidance of errors. The termination condition is at the end (where it can be overlooked) and the condition is not checked the first time through.</p>
</blockquote>
<p>There is no benefit here of using the <code>do..while</code> but the harm is readability.</p>
<ul>
<li><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-do" rel="nofollow noreferrer">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-do</a></li>
</ul>
    </div>