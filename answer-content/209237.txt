<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>I/O problems</h2>

<p>I trust that this code works on your machine, but it did not work for me (Homebrew Python 3.7.1 on macOS 10.14.2).  As soon as the client connects, both sides crash.  The client's stack trace:</p>

<pre class="lang-none prettyprint-override"><code>$ python3 pycat.py -i localhost -p 8080 --ssl
Traceback (most recent call last):
  File "pycat.py", line 188, in &lt;module&gt;
    PyCat(*parse_arguments())
  File "pycat.py", line 31, in __init__
    self.main()
  File "pycat.py", line 78, in main
    self.main_func()
  File "pycat.py", line 125, in nc_connect
    self.socket.send(response)
  File "/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py", line 984, in send
    return self._sslobj.write(data)
ssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:2324)
</code></pre>

<p>If I try to launch both the server and client without <code>--ssl</code>, then after the server reports that it accepted the incoming connection, both sides just sit there and do nothing, no matter what I type.</p>

<p>I suspect that the default I/O buffering behavior in Windows is different from Unix.</p>

<h2>Object-oriented design</h2>

<p>In OOP, classes are nouns.  <strong>A constructor should initialize an object.  The constructor should not also start actively doing things.</strong>  The action happens when someone calls a method (a verb) on the object. </p>

<p>I don't think that the <code>PyCat</code> class is a good one.  Its behavior completely switches depending on <code>self.main_func = self.nc_listen if self.listen else self.nc_connect</code>!  Consider the calling chains for the server mode compared to the client mode:</p>

<p>Server mode:</p>

<ul>
<li><code>PyCat.__init__()</code>

<ul>
<li><code>self.generate_temp_cert()</code></li>
<li><code>self.main()</code></li>
<li><code>self.nc_listen()</code>

<ul>
<li><code>self.socket.…</code></li>
<li><code>self.client_handler(…)</code></li>
<li><code>self.create_prompt_string(…)</code>

<ul>
<li><code>self.read(…)</code></li>
</ul></li>
<li><code>self.read(…)</code></li>
</ul></li>
</ul></li>
</ul>

<p>Client mode:</p>

<ul>
<li><code>PyCat.__init__()</code>

<ul>
<li><code>self.main()</code></li>
<li><code>self.nc_connect()</code>

<ul>
<li><code>self.socket.connect(…)</code></li>
<li><code>self.context.…</code></li>
<li><code>self.read(…)</code></li>
<li><code>self.handle_command(…)</code></li>
<li><code>self.exec_command(…)</code></li>
<li><code>self.socket.send(…)</code></li>
</ul></li>
</ul></li>
</ul>

<p>There is very little in common between the two modes.  There is, therefore, no advantage to cramming them into the same class.  All that the two modes have in common, really, are some socket-creation parameters and the ability to read and write.  That should be a class used in some composition, or perhaps a base class in some inheritance hierarchy.</p>

<h2>Nitpicks</h2>

<p>Imports should be listed in alphabetical order.  The <code>argparse</code> import belongs with the first group of imports.</p>

<p>Having <code>parse_arguments()</code> return a tuple, whose elements are in the same order that the <code>PyCat</code> constructor expects, is fragile.  Rather, <code>parse_arguments</code> should return a dictionary, and you can call <code>PyCat(**parse_arguments())</code>.  Note that what the argument parser calls an "ip" is what the <code>PyCat</code> class inconsistently calls the "host".  Also, the <code>_ssl</code> parameter is ugly.  If you're worried about name collisions, you can rename the parameter to <code>use_ssl</code>, or change the import statement in one of these ways:</p>

<pre><code>from ssl import CERT_NONE, create_default_context, wrap_socket
import ssl as ssllib
</code></pre>

<p>A shorter way to write</p>

<blockquote>
<pre><code>self.host = host if host else '0.0.0.0'
</code></pre>
</blockquote>

<p>would be</p>

<pre><code>self.host = host or '0.0.0.0'
</code></pre>
    </div>