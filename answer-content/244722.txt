<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a great alternative to timeouts. I've added the clearTimeout for completeness.</p>
<pre><code>function requestTimeout(callback, delay) {
    var tickTimeout = window.requestAnimationFrame, dateNow = Date.now,

        start   = dateNow(),
        stop    = false,

        timeout = function () {
            if (dateNow() - start &lt; delay) {
                return stop || tickTimeout( timeout );
            } else {
                return callback();
            }
        };

    tickTimeout( timeout );

    return {
        clearTimeout: function () {
            stop = true
        }
    };
}
</code></pre>
<p>Here it has seamlessly replaced setTimeout in a debounce method.</p>
<pre><code>$.extend({
    debounce: function (fn, timeout, invokeAsap, ctx) {
        var timer;

        if (arguments.length == 3 &amp;&amp; typeof invokeAsap != 'boolean') {
            ctx = invokeAsap, invokeAsap = false;
        }

        return function () {
            var args = arguments;

            ctx = ctx || this;

            invokeAsap &amp;&amp; !timer &amp;&amp; fn.apply(ctx, args);

            timer &amp;&amp; timer.clearTimeout();

            timer = requestTimeout(function () {
                !invokeAsap &amp;&amp; fn.apply(ctx, args);
                timer = null;
            }, timeout);
        };
    }
});
</code></pre>
<p>Here is an example:</p>
<pre><code>// The Target will fadeout 3 seconds after the 
// last time it has been clicked.

const fadeTargetDebounce = $.debounce(function () {
    $(this).fadeOut();
}, 3000);


$('button').on('click', function () {
    $(this).show( fadeTargetDebounce );
});
</code></pre>
    </div>