<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it would be interesting to have such a collection of tools be standardized.</p>

<p>However, it will require a bit more thinking. I would not want to use these tools as they are now.</p>

<h1><code>mean()</code></h1>

<p>I wrote this simple test program:</p>

<pre><code>#include &lt;vector_functionals.hpp&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

int main() {
   std::vector&lt;std::uint8_t&gt; test1{ 5, 4, 4 };
   std::vector&lt;std::uint8_t&gt; test2{ 4, 4, 5 };
   std::cout &lt;&lt; "mean of test1 = " &lt;&lt; (int)boost::math::tools::mean( test1.begin(), test1.end() ) &lt;&lt; '\n';
   std::cout &lt;&lt; "mean of test2 = " &lt;&lt; (int)boost::math::tools::mean( test2.begin(), test2.end() ) &lt;&lt; '\n';
}
</code></pre>

<p>This is the output:</p>

<pre><code>mean of test1 = 5
mean of test2 = 4
</code></pre>

<p>The order of the elements in the array affects the mean? No!</p>

<p>Similarly, it computes the mean of integers <code>{255, 0, 0, 0}</code> not as <code>255.0/4=63.75</code>, not as that value rounded up or down, but as 65.</p>

<p><code>mean_and_population_variance()</code> will have similar issues, and it will overflow.</p>

<p>I would expect <code>mean()</code> to return a <code>double</code> if the input is integer. But determining the correct output type is not possible to do in a generic way. I'd suggest you require type traits to exist for the arithmetic type being used, and that one of these type traits be the type of the output for these functions. I believe other Boost modules work similarly.</p>

<h1><code>median()</code></h1>

<p>This one is really only useful for arithmetic types, and that is a shame. It'd be interesting if it could return the median of a set of words, for example. But you can't do <code>(word1 + word2) / 2</code>.</p>
    </div>