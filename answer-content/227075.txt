<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You took a curved path to where you want to go :)</p>

<p>It seems you are ill at ease at building flat lists and take long routes at building nested ones then unpacking them. But you can replace :</p>

<pre class="lang-py prettyprint-override"><code>    omegas_ext = []
    for element in omegas:
        item = [x for x in element if x is not None]
        omegas_ext.append(item)
# [...]
    for element in omegas_ext:
        for item in element:
            omegas_unpacked.append(item)
</code></pre>

<p>By:</p>

<pre class="lang-py prettyprint-override"><code>    omegas_ext = []
    for element in omegas:
        item = [x for x in element if x is not None]
        omegas_ext.extend(item)
</code></pre>

<p>Second, this if else is unecessary. <code>[value] * 1</code> is equivalent to <code>[value]</code>.</p>

<pre class="lang-py prettyprint-override"><code>        if len(omegas_ext[idx])&gt;1:
            value = delays[idx]
            item_to_add = [value]*(len(omegas_ext[idx]))
            delays_exp.append(item_to_add)
        elif len(omegas_ext[idx]) == 1:
            value = delays[idx]
            delays_exp.append([value])
</code></pre>

<p>Can be replaced by:</p>

<pre class="lang-py prettyprint-override"><code>    if len(omegas_ext[idx])&gt;=1:
        delays_exp.append([delays[idx]]*(len(omegas_ext[idx])))
</code></pre>

<p>Again you unpack this later on. So you could extend and this would also make it unecessary to have this check for an element (since extending with an empty list is a no-op)</p>

<pre class="lang-py prettyprint-override"><code>    delays_exp.extend([delays[idx]*len(omegas_ext[idx]))
    # itertools.chain no longer needed
</code></pre>

<p>Finally, you missed the fact you can build the two lists in a single for, by using <code>zip</code>. This would save you the need to use an index to recompute the length of the <code>omegas_ext</code> items.</p>

<p>Here would be the function :</p>

<pre class="lang-py prettyprint-override"><code>def spp_method(omegas, delays):
    delays = delays[delays != np.array(None)]
    omegas_ext = []
    delays_exp = []
    for delay, element in zip(delays, omegas):
        item = [x for x in element if x is not None]
        omegas_ext.extend(item)
        delays_exp.extend(len(item) * [delay])
    return np.array(delays_exp), np.array(omegas_ext)
</code></pre>

<p>Code returns the same output.</p>
    </div>