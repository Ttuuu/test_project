<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Aim</h2>

<p>It's not 100% clear in your question, but what I am <em>assuming</em> is that you would like some feedback on:</p>

<ul>
<li>How to utilize C++ for this problem domain without using the STL (ie namespace <code>std::</code>)</li>
<li>How to improve / re-structure the code to make it "better and shorter". </li>
</ul>

<p>Just a general point. Obviously both C and C++ have standard functions and algorithms for doing this task. You have said that don't want to use these. You have not said "why". Perhaps you are on an embedded system, so C++ STL is not available? But then C <code>stdlib.h</code> should still be available and it has building blocks which you could be using (e.g. <code>strstr</code> <code>strncpy</code>) thereby avoiding quite so much manual pointer fiddling. So is your constraint of hand-coding this purely for educational purposes, or is there a possibility of at least using <code>stdlib</code> (which is also available under C++, of course)?</p>

<h2>Evaluating existing code</h2>

<ul>
<li>Compiles =&gt; good</li>
<li>Works =&gt; good</li>
<li>doesn't appear to leak memory or access out of bounds (I only ran <code>valgrind</code>, more checks are needed) =&gt; good </li>
<li><p>One warning generated:</p>

<pre><code>fr.cpp:60:17: warning: unused variable 'move_right' [-Wunused-variable]
    char* move_right = current;
</code></pre>

<p>if I enable <code>-Wall -Wextra</code> on <code>clang</code>. You should turn warnings on and address them. </p></li>
<li>Structure: One big <code>while</code> loop =&gt; could be better. </li>
<li>Clarity: Related to structure. Without diving deep and putting my "pointer-foo" hat on, it's not trivial to understand what the code is doing. I get the general idea, but it's not very clear.</li>
</ul>

<h2>Feedback</h2>

<p>Follows straight from the evaluation:</p>

<ul>
<li>Decide what you can and cannot use. Is <code>stdlib</code> (as opposed to C++ <code>std::</code>) allowed? If not, why not? If so, you should use it. I could show how, but it's been done already: <a href="https://www.geeksforgeeks.org/c-program-replace-word-text-another-given-word/" rel="nofollow noreferrer">https://www.geeksforgeeks.org/c-program-replace-word-text-another-given-word/</a>. That example uses the heap, but could be easily adapted to use the stack. Although the problem with <em>any</em> stack implementation (including yours) is that the <code>max_length</code> needs to be fixed at compile time. If I change your <code>replace</code> string to something &gt; 25 characters long (replaced twice) the program segfaults due to clobbering its own stack. </li>
<li>Decide if this is just an educational exercise and you do not want to use <code>stdlib</code> string primitives. The main answer to improving your code is using <em>functions</em>. Using functions will make each piece more digestible. Using good names for your functions will make the code self-documenting. A casual reader might get close to being able to read it like an English sentence. </li>
</ul>

<p>If you look at the link above, it shows you how the primitives can be used to make the code more readable, maintainable, reusable, and shorter. If you were to start with your own code and pull out some sections of the <code>while</code> loop as functions, you may find that the functions you pull out are very similar to the <code>stdlib</code> primitives. </p>

<p>This could be a neat piece of experience. If you are unsure how to split your while loop, you could let the example above using the C library primitives guide you. Or you could do it blind and find out if you end up with similar functions/abstractions as the C library writers did. </p>

<p>In the end <code>main()</code> should be a few lines, and each function should be no longer than say 10-15 lines at most. </p>

<p>Assuming educational purpose, it would be better for you to try to pull out those sections rather than having someone do it for you. You learn more that way. </p>

<h2>Some C++ points:</h2>

<ul>
<li>If you don't use any library at all, then, for this specific problem domain, the difference between C and C++ is going to be minimal. However, in general, one of big gains of using C++ over C for day-to-day usage is the convenience of handling strings using <code>std::string</code>. No more <code>malloc</code> <code>strncpy</code> <code>strdup</code> <code>strstr</code> etc. </li>
<li>in C++ the include should be <code>#include &lt;cstdio&gt;</code></li>
<li>C++ usually shouldn't use <code>printf</code>, but <code>std::cout</code> (assuming you don't mind about I/O using a base lib, as you already are). </li>
<li>You should use a <code>constexpr</code> variable for <code>ARRAY_MAX</code>. <code>enum</code> is "one of set", which is not the case. (In C you should use a <code>#define</code> for this). </li>
</ul>

<h2>Python comparison</h2>

<p>I feel the "few lines of python" comparison is not very relevant, because:</p>

<ul>
<li>a manually coded <code>str_replace</code> in python is likely to be unacceptably slow as a general function</li>
<li>the operators you would have likely used in python (eg <code>str1 = str2</code>) are just calling some C or C++ function which are using <code>strncpy</code>/<code>std::string operator=()</code> or similar. </li>
<li>So to use those operators in python, but refuse to use the C-functions is not a reasonable comparison IMO. </li>
</ul>

<p>Hope that gives you something to get on with. </p>
    </div>