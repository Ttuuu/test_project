<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am concentrating on the solver method, since my sense for a good UX is close to null. I added inline comments for my changes.</p>

<p>But here some major changes:</p>

<ul>
<li>Your code was not showing all combinations because you were breaking the loop after first item.</li>
<li>The two nested fors with combinations_with_replacement and permutations, does the same as <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow noreferrer">product()</a>.</li>
<li>Defined groups and operators as constants (in uppercase) at the beginning of the code.</li>
<li>Used END instead of INSERT in output so it clears text of previous results.</li>
<li>Added formula_key right away and not in the condition, it was computing the same formula multiple times.</li>
<li><a href="https://en.wikipedia.org/wiki/Snake_case" rel="nofollow noreferrer">Snake case</a> for naming variables convention in python.</li>
</ul>

<p>Here the code (create_widgets and the constructor stay the same):</p>

<pre><code>from tkinter import Tk, Frame, Label, Button, IntVar, Entry, Text, W, N, WORD, INSERT, END
from itertools import permutations, product

# Define constants
OPERATORS = ["+","-","*","/"]
GROUPS    = ['X+X+X+X', 'X+X+(X+X)', 'X+(X+X)+X', '(X+X+X)+X', '(X+X)+X+X', 'X+(X+X+X)', '((X+X)+X)+X', 'X+(X+(X+X))', 'X+((X+X)+X)', '(X+X)+(X+X)', '(X+(X+X))+X']

class Application(Frame):
    def __init__(self, master=None):
        # ...

    def create_widgets(self):
        # ...

    def solver(self):
        self.output.delete(1.0, END)  # END removes previous results instead of INSERT
        target = self.target_num.get()
        number1 = self.num1.get()
        number2 = self.num2.get()
        number3 = self.num3.get()
        number4 = self.num4.get()
        numbers = [number1, number2, number3, number4]
        seen = set()
        len_opr = len(numbers) - 1  # Compute once
        for values in permutations(numbers): # No need to specify len
            for oper in product(OPERATORS, repeat=len_opr):  # Product does what you want instead of two fors
                formula_key = "".join(str(oper + values))
                if formula_key in seen: continue # ignore variations for repeated numbers
                seen.add(formula_key)  # Add right away not in the condition
                # if only one operation, do not permute parenthesis
                filtered_groups = [GROUPS[0]] if len(set(oper)) == 1 else GROUPS
                for pattern in filtered_groups:
                    formula = "".join(str(o)+str(p) for o, p in zip([""] + list(oper), pattern.split("+")))
                    formula = "".join(str(v)+str(p) for v, p in zip([""] + list(values), formula.split("X")))
                    try:
                        if eval(formula) == target:
                            answer = formula, "=", target  # vars start by minuscule
                            #insert value in output Textbox
                            self.output.insert(INSERT, answer)
                            self.output.insert(INSERT, '\n')
                            result = True
                        # REMOVE this condition or it does not try all groups with parenthesis
                    except: pass
        if self.output.get("1.0", END)=="\n":
            self.output.insert(INSERT, 'Solution could not be found')
root = Tk()
app = Application(master=root)
app.master.title("target number solution")
app.mainloop()
</code></pre>

<p>If you have any questions, don't hesitate!</p>
    </div>