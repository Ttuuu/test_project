<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Code duplication</h3>

<p>To be honest - yes, this code is rather messy, mostly due to the code duplication. At least you could've shortened it by reusing the existing SQL, like</p>

<pre><code>$sql = "SELECT company.id, company.name, inn, ceo, city, phone
      FROM company
      LEFT JOIN address ON company.id = address.company_id
      LEFT JOIN contact ON company.id = contact.company_id
      WHERE
        MATCH (company.name, inn, ceo) AGAINST (:searchTerm)
        OR MATCH (city, street) AGAINST (:searchTerm)
        OR MATCH(contact.name, phone, email) AGAINST (:searchTerm)";
$stmt = $pdo-&gt;prepare($sql);
// ...
$sql .= " ORDER BY id DESC LIMIT $starting_limit, $limit";
$stmt = $pdo-&gt;prepare($sql);
</code></pre>

<h3>Performance problems</h3>

<p>But the biggest problem with this code is not its structure but its ability to kill your server. <a href="https://phpdelusions.net/top#num_rows" rel="nofollow noreferrer">Getting the number of rows returned by SELECT query is the most misused functinality in PHP.</a>. Aside of the fact it is most of time just pointless, in a case like yours it could be dangerously harmful. Let's take your code, that looks quite simple and innocent:</p>

<pre><code>$sql = "SELECT * FROM company";
$stmt = $pdo-&gt;prepare($sql);
$stmt-&gt;execute();
$total_results = $stmt-&gt;rowCount();
</code></pre>

<p>What does this code do? It is merely selecting <strong>all rows from the table</strong> and sending them to PHP, so it will be able to count them. Imagine there will be 100000 rows, with 1k data in each. It will result in sending 1G of data from database server to PHP. Not only it will consume a lot of resources in the process but most likely it will overflow the memory limit in PHP and make it die with the fatal error. </p>

<p>So you should n<strong>ever ever use rowCount() for pagination</strong>. Instead, you must ask a database to get you the number of rows. </p>

<h3>Query builder</h3>

<p>In order to make this code more maintainable (so every query part would be written only once), we must split the SQL into distinct parts and then use them to construct the particular query:</p>

<pre><code>$select_count = "SELECT count(*) FROM company";
$select_data = "SELECT company.id, company.name, inn, ceo, city, phone
          FROM company
          LEFT JOIN address ON company.id = address.company_id
          LEFT JOIN contact ON company.id = contact.company_id";
$where = "WHERE MATCH (company.name, inn, ceo) AGAINST (:searchTerm)
            OR MATCH (city, street) AGAINST (:searchTerm)
            OR MATCH(contact.name, phone, email) AGAINST (:searchTerm)";
$order_limit = "ORDER BY id DESC LIMIT $starting_limit, $limit";

if (isset($_GET['search'])) {

    $parameters = [':searchTerm' =&gt; $_GET['search']];
    $sql_count = "$select_count $where";
    $sql_data = "$select_data $where $order_limit";

} else {

    $parameters = [];
    $sql_count = "$select_count";
    $sql_data = "$select_data $order_limit";
}

$stmt = $pdo-&gt;prepare($sql_count);
$stmt-&gt;execute($parameters);
$num_results = $stmt-&gt;fetchColumn();
$total_pages = ceil($num_results/$limit);

$stmt = $pdo-&gt;prepare($sql_data);
$stmt-&gt;execute($parameters);
$results = $stmt-&gt;fetchAll();
</code></pre>

<h3>Better separation between HTML and database stuff</h3>

<p>The rest is your code is Okay, I would only remove any mention of a database stuff from HTML. So I would rather get all the rows into array first and than just iterate over it in HTML.</p>

<pre><code>        &lt;tbody&gt;
        &lt;?php foreach ($results as $row): ?&gt;
            &lt;tr&gt;
                &lt;td scope='row'&gt;&lt;?=$row['inn']?&gt;&lt;/td&gt;
                &lt;td&gt;&lt;a href="company.php?id=&lt;?=$row["id"]?&gt;"&gt;&lt;?=$row['name']?&gt;&lt;/a&gt;&lt;/td&gt;
                &lt;td&gt;&lt;?=$row['ceo']?&gt;&lt;/td&gt;
                &lt;td&gt;&lt;?=$row['city']?&gt;&lt;/td&gt;
                &lt;td&gt;&lt;?=$row['phone']?&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;?php endforeach ?&gt;
        &lt;/tbody&gt;
</code></pre>
    </div>