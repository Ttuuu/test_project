<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A significant performance drain is bit-by-bit computation loops such as</p>

<pre><code>  TypeBase&lt;Size&gt; &amp;operator+=(const TypeBase&lt;Size&gt; &amp;other) {
    bool carry = false;
    for (size_t ix = 0; ix &lt; Size; ++ix) {
      data_[ix] = add_(data_[ix], other.data_[ix], carry);
    }
    return *this;
  }
</code></pre>

<p>Unfortunately, at this time such constructs are not recognized by <a href="https://gcc.godbolt.org/z/ZHDPZk" rel="noreferrer">major compilers</a>, and probably also not by various embedded compilers (which if I recall correctly you mentioned earlier).</p>

<p>For small <code>Size</code> it could be implemented with plain old arithmetic operators,</p>

<pre><code>  TypeBase&lt;Size&gt; &amp;operator+=(const TypeBase&lt;Size&gt; &amp;other) {
    data_ = std::bitset&lt;Size&gt;(to_ullong() + other.to_ullong());
    return *this;
  }
</code></pre>

<p>Which unsurprisingly compiles to normal addition. </p>

<p>Larger <code>Size</code> is trickier to support efficiently this way.</p>
    </div>