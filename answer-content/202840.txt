<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This</p>

<pre><code>#include &lt;bits/stdc++.h&gt;
using namespace std;
</code></pre>

<p>is given by the submission template from HackerRank (so it is not your fault),
but note that both lines are generally considered as bad practice.
See for example</p>

<ul>
<li><a href="https://stackoverflow.com/q/31816095/1187415">Why should I not <code>#include &lt;bits/stdc++.h&gt;</code>?</a></li>
<li><a href="https://stackoverflow.com/q/1452721/1187415">Why is “using namespace std” considered bad practice?</a></li>
</ul>

<p>on Stack Overflow.</p>

<p>With respect to your</p>

<pre><code>long substrCount(int n, string s)
</code></pre>

<p>function: </p>

<ul>
<li>The outer <code>while</code> loop could be made a <code>for</code> loop as well – why should it
be different from the inner <code>for(long int ...)</code> loop?</li>
<li>The proper data type for <code>string</code> lengths and indices is <code>string::size_type</code>
aka <code>size_t</code>.</li>
</ul>

<p>One step to increase the efficiency would be to avoid the creation (and reversal)
of the additional strings <code>sub</code> and <code>rev_sub</code>. All tests can be done directly on
the original string <code>s</code>. As an example, </p>

<pre><code>if (sub[j] != c || rev_sub[j] != c)
</code></pre>

<p>is equivalent to</p>

<pre><code>if (s[i + j] != c || s[i + length_sub - 1 - j] != c) 
</code></pre>

<p>Your method checks all \$ n (n-1)/2 \$ substrings of length 2 or more if 
it is a “special palindromic string.”. The following approach seems more
efficient to me:</p>

<ul>
<li><p>The number of substrings with all identical characters (e.g. "aaa")
can be determined with a single traversal of the string. All sequences
of \$ k \$ contiguous identical characters contain \$ k(k+1)/2 \$
substrings with identical characters.</p></li>
<li><p>To determine the number of substrings where characters except the middle one
are the same (e.g. "aadaa") traverse the string, and check for each character
(e.g. "d") how many identical characters exist to the left and to the right
of this character.</p></li>
</ul>

<p><em>Example:</em> The string "mnonopoo" has the following sequences of contiguous 
identical characters</p>

<pre><code>m n o n o p oo
</code></pre>

<p>which gives a total</p>

<pre><code>1+1+1+1+1+1+3 = 9
</code></pre>

<p>substrings with all identical characters. The number of substrings where
all characters except the middle one are the same around each character are</p>

<pre><code>m n o n o p o o
0+0+1+1+0+1+0+0 = 3
</code></pre>
    </div>