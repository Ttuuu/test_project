<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you had was generally very good. I have just a couple of notes.</p>

<p>The default argument in <code>get_digits</code> probably does not do what you expect it to do. That one list will be shared across all calls to the <code>get_digits</code> function. As an example, try calling <code>get_digits(12)</code> followed by <code>get_digits(7)</code>. The output? <code>[2, 1, 7]</code>. A quick fix to this is to set the default value to <code>None</code> and then conditionally initialize the <code>digits</code> to the empty list <code>if digits is None</code>.</p>

<p>For efficiency reasons, you probably want to avoid creating a new list every time <code>get_digits</code> is called. I recommend that you instead make <code>get_digits</code> a generator function by using the <code>yield</code> keyword. (I also gave it an optional arbitrary base argument just for fun.)</p>

<p>Finally, make all of the functions iterative. It probably has better performance than the recursive solution, and is logically clearer to most people.</p>

<p>All in all...</p>

<pre><code>from functools import reduce
from operator import mul


def get_digits(num, base=10):
    while num &gt; 0:
        yield num % base
        num /= base


def product(it):
    return reduce(mul, it, 1)


def persistence(num):
    count = 0
    while num &gt; 9:
        num = product(get_digits(num))
        count += 1
    return count
</code></pre>
    </div>