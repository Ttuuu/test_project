<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>First thing first, <code>check</code> is a waste of time.</p></li>
<li><p>Why bother with</p>

<pre><code>        else:
            return(remove(s[0:i]))
</code></pre>

<p>The new pair suitable for removal may emerge only when you remove something from the midst of the string. When you remove the last two characters, it is not possible, and the entire string is already inspected. Just <code>return s[0:i]</code>.</p></li>
<li><p>Now with the small rearrangement we have</p>

<pre><code>def remove(s):
    for i in range(len(s)-1):
        if(s[i] == s[i+1]):
            if(i+2 == len(s)):
                return s[0:i]
            return remove(s[0:i]+s[i+2:])
</code></pre>

<p>You may notice that even though the recursive call is made in the loop, it is done only once: <code>return</code> will prevent the further looping. Let's make it explicit:</p>

<pre><code>def remove(s):
    if len(s &lt; 2):
        return s
    for i in range(len(s)-1):
        if(s[i] == s[i+1]):
            break
    if i == len(s):
        return s
    if(i+2 == len(s)):
        return s[0:i]
    return remove(s[0:i]+s[i+2:])
</code></pre>

<p>Now we have a tail recursive call. It translates to the iterations quite mechanically. The tail recursive form</p>

<pre><code>def foo_recursive(x):
    if condition(x):
        return something(x)
    x = modify_argument(x)
    return foo_recursive(x)
</code></pre>

<p>is equivalent to</p>

<pre><code>def foo_iterative(x):
    while !condition(x):
        x = modify_argument(x)
    return something(x)
</code></pre>

<p>Try to apply this recipe.</p>

<p>PS: I am not saying that the result is the best (that is the most performant) solution. In fact, there is a better algorithm: after a removal of a pair, do not reinspect the string from the very beginning.</p></li>
</ul>
    </div>