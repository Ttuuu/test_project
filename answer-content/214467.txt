<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some improvements</p>

<ul>
<li><p>Style</p>

<p>Please indent your file properly, since indentation is important in Python, those lines like</p>

<blockquote>
<pre><code>if path.isdir(pth):   res.update(regex_search(regex, pth))
</code></pre>
</blockquote>

<p>Are frowned upon, instead do</p>

<pre><code>if path.isdir(pth):
    res.update(regex_search(regex, pth))
</code></pre></li>
<li><p>Use <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer"><code>glob</code></a> for listing files in a directory</p>

<p>With Python3.5+ <code>glob</code> is the easiest way to list all files in a directory and subdirectory, before you should use <code>os.walk()</code> </p></li>
<li><p>Use generators when appropriate</p>

<p>This will save some memory space, as it doesn't have to append to the temporary list all the time</p></li>
<li><p>Use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> over <code>sys.argv[]</code></p>

<p>Argparse is <em>the</em> module for CLI input, easy to use and has a ton of features I definitely recommend it!</p></li>
</ul>

<h1>Code</h1>

<pre><code>import argparse
import glob
import re
import os
import pathlib

def regex_search(regex, directory):
    for f in glob.glob(f"{directory}**/*.*", recursive=True):
        with open(f) as _file:
            for i, line in enumerate(_file.readlines()):
                if regex.search(line):
                    yield f"In file {f} matched: {line.rstrip()} at position: {i}"

def parse_args():
    parser = argparse.ArgumentParser(
        usage='%(prog)s [options] &lt;regex&gt; &lt;directory&gt;',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('regex', type=str)
    parser.add_argument('directory', type=str)
    args = parser.parse_args()

    try:
        rgx = re.compile(args.regex)
    except Exception as e:
        parser.error('Regex does not compile')
    directory = pathlib.Path(args.directory)
    if not os.path.isdir(directory):
        parser.error('Directory is not valid')
    return rgx, directory

if __name__ == '__main__':
    regex, directory = parse_args()
    for match in regex_search(regex, directory):
        print(match)
</code></pre>

<h1>Bonus Round!</h1>

<p><code>grep</code> is a Unix tool that can basically do this by default</p>

<pre><code>grep -Hrn 'search term' path/to/dir
</code></pre>

<p>Where:</p>

<ul>
<li><code>-H</code> prints the matching line</li>
<li><code>-r</code> Does a recursive search</li>
<li><code>-n</code> prints the line number </li>
</ul>
    </div>