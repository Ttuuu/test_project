<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Different approach</h2>

<p>The approach in the question is somewhat procedural. My aim is to use RAII to facilitate ease of use, as the code currently can leak memory and relies on programmer to free it.</p>

<h2>Usage cases</h2>

<p>Lets first have a look at the usage:</p>

<ol>
<li><p>Create cstring style array from <code>std::string</code>s.</p></li>
<li><p>Sink the created array into <code>exec</code> family of functions</p></li>
<li><p>Wait until child process exits</p></li>
<li><p>Reclaim the memory</p></li>
</ol>

<p>Now, it clearly looks like constructor and destructor calls, as they operate on the same data, possibly even unmodified.</p>

<h2>Code</h2>

<p>Here is rough sketch of the class I had in mind:</p>

<pre><code>class owned_cstrings {
    std::vector&lt;char*&gt; cstring_array;
public:
    owned_cstrings(const std::vector&lt;std::string&gt;&amp; source) :
        cstring_array(source.size())
    {
        std::transform(source.begin(), source.end(), cstring_array.begin(), [](const auto&amp; elem_str) {
            char* buffer = new char[elem_str.size() + 1];
            std::copy(elem_str.begin(), elem_str.end(), buffer);
            buffer[elem_str.size()] = 0;
            return buffer;
        });
        cstring_array.push_back(nullptr);
    }

    owned_cstrings(const owned_cstrings&amp; other) = delete;
    owned_cstrings&amp; operator=(const owned_cstrings&amp; other) = delete;

    owned_cstrings(owned_cstrings&amp;&amp; other) = default;
    owned_cstrings&amp; operator=(owned_cstrings&amp;&amp; other) = default;

    char** data() {
        return cstring_array.data();
    }

    ~owned_cstrings() {
        for (char* elem : cstring_array) {
            delete[] elem;
        }
    }
};
</code></pre>

<h2>Design decisions</h2>

<p>The code above would've been much more dangerous footgun without some thought put into it. First of all, it is not copyable, although it could do deep copy, I believe it is not intended. Not doing deep copy will result in more than one delete, which is disastrous. Second, the data access is somewhat limited, because the only usage case covered is sinking into <code>exec</code> family of functions.</p>

<h2>Demo</h2>

<p><a href="https://wandbox.org/permlink/yxPU30LMqzu1H0XT" rel="nofollow noreferrer">Small demo on Wandbox</a>:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;

class owned_cstrings {
    std::vector&lt;char*&gt; cstring_array;
public:
    owned_cstrings(const std::vector&lt;std::string&gt;&amp; source) :
        cstring_array(source.size())
    {
        std::transform(source.begin(), source.end(), cstring_array.begin(), [](const auto&amp; elem_str) {
            char* buffer = new char[elem_str.size() + 1];
            std::copy(elem_str.begin(), elem_str.end(), buffer);
            buffer[elem_str.size()] = 0;
            return buffer;
        });
        cstring_array.push_back(nullptr);
    }

    owned_cstrings(const owned_cstrings&amp; other) = delete;
    owned_cstrings&amp; operator=(const owned_cstrings&amp; other) = delete;

    owned_cstrings(owned_cstrings&amp;&amp; other) = default;
    owned_cstrings&amp; operator=(owned_cstrings&amp;&amp; other) = default;

    char** data() {
        return cstring_array.data();
    }

    ~owned_cstrings() {
        for (char* elem : cstring_array) {
            delete[] elem;
        }
    }
};

#include &lt;iostream&gt;

template &lt;typename T&gt;
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const std::vector&lt;T&gt;&amp; v) {
    if (v.empty()) {
        return os;
    }
    os &lt;&lt; v.front();

    for (std::size_t i = 1; i &lt; v.size(); ++i) {
        os &lt;&lt; ' ' &lt;&lt; v[i];
    }
    return os;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, char** words) {
    while (*words) {
        os &lt;&lt; *words++ &lt;&lt; ' ';
    }
    return os;
}

int main() {
    std::vector&lt;std::string&gt; words = { "What", "a", "beautiful", "world" };
    std::cout &lt;&lt; words &lt;&lt; '\n';

    owned_cstrings cstring_words(words);
    std::cout &lt;&lt; cstring_words.data() &lt;&lt; '\n';
}
</code></pre>
    </div>