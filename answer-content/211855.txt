<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>
<p>There is a small chance  (about 1 in 16) that the random color function will generate an bad color as you don't check for leading zeros. See code below for an alternative.</p>
<h2>DRYing out code (Don't Repeat Yourself)</h2>
<p>Yes there is way to much repeated code.</p>
<p>Repeated code is not only a pain to create, it is a source of bugs when it comes time to make changes.</p>
<h2>Differences as arguments.</h2>
<p>To reduce repetition we use functions to wrap up code that has only slight differences, passing the differences as arguments.</p>
<p>For example you have the 3 button event handlers with 3 sections of almost identical code.</p>
<blockquote>
<pre><code>const newGridButton = document.getElementById('newGridButton');
newGridButton.addEventListener('click', function(e){
    clearGrid();
    let newSize = prompt('New Grid Size:');
    createGrid(newSize);
});

const pencilButton = document.getElementById('pencilButton');
pencilButton.addEventListener('click', function(e){
    clearGrid();
    let newSize = prompt('New Grid Size')
    pencilGrid(newSize);
});

const colorfulButton = document.getElementById('colorfulButton');
colorfulButton.addEventListener('click', function(e){
    clearGrid();
    let newSize = prompt('New Grid Size')
    colorfulGrid(newSize);
});
</code></pre>
</blockquote>
<p>The only difference in each is the Id of the button and the function called at the end. Thus we can simply wrap one of those sections in a function passing the <code>Id</code> and the setup function as arguments.</p>
<pre><code>function setUpButton(buttonId, createGrid) {
    const button = document.getElementById(buttonId);
    button.addEventListener('click', function(e){
        clearGrid();
        let newSize = prompt('New Grid Size')
        createGrid(newSize);
    });
}
</code></pre>
<h2>Reduce code noise</h2>
<p>Shorten it little by removing code noise,</p>
<ul>
<li>The <code>prompt</code> can move into the function call.</li>
<li>The <code>clearGrid</code> can move to the <code>createGrid</code> function</li>
<li>We can use direct DOM reference for the button element when we call the function, so we don't need <code>document.getElementById</code></li>
<li>Use an arrow function for the event, and we don't need to <code>event</code> argument.</li>
</ul>
<p>Thus we get the whole thing done in 6 lines.</p>
<pre><code>function setUpButton(button, createGrid) {
    button.addEventListener('click', () =&gt; createGrid(prompt('New Grid Size')))
}
setUpButton(newGridButton, createGrid);
setUpButton(pencilButton, pencilGrid);
setUpButton(colorfulButton, colorfulGrid);
</code></pre>
<p>18 lines down to 6.</p>
<h2>Using names to reference functions</h2>
<p>Looking at the create grid function the only difference is the mouse event, all the rest is identical. Create the mouse event functions separately. We need a reference to the <code>newSquare</code>, that can be found in the event as <code>event.target</code></p>
<p>To make accessing the functions easier we can add them to an object and use their names in the create grid function.</p>
<pre><code>const draw = {
    colorful(e) {
        e.target.style.background = (Math.random()*0xFFFFFF|0).toString(16).padStart(7,"#000000");
        e.target.style.border = '0px';
    },
    pencil(e) {
        e.target.style.background = 'black';
        e.target.style.opacity += 0.1;
    },
    create(e) { e.target.style.background = 'black' }
}
</code></pre>
<p>and modify the create grid function to take the name of the draw function as well as the size. Also move the clear grid function into this function.</p>
<h2>The end result</h2>
<p>Putting it all together we get it all done in about half the code.</p>
<pre><code>const drawing = {
    colorful(e) {
        e.target.style.background = (Math.random()*0xFFFFFF|0).toString(16).padStart(7,"#000000");
        e.target.style.border = "0px";
    },
    pencil(e) {
        e.target.style.backgroundColor = 'black';
        e.target.style.opacity += 0.1;
    },
    black(e) { e.target.style.backgroundColor = 'black' },
};
setUpButton(newGridButton, "black");
setUpButton(pencilButton, "pencil"");
setUpButton(colorfulButton, "colorful");   
createGrid("black");

function setUpButton(button, name) {
    button.addEventListener('click', () =&gt; createGrid(name, prompt('New Grid Size')))
}

function createGrid(name, size = 16){
    var count = size ** 2;
    while (gridContainer.firstChild) { gridContainer.removeChild(gridContainer.firstChild) }
    while (count--) {
        const cell = Object.assign(document.createElement("div"), {className : "newSquare"});
        gridContainer.appendChild(cell);
        cell.addEventListener("mouseover", drawing[name]);  
    }
    ["--rowNum","--colNum"].forEach(p =&gt; document.documentElement.style.setProperty(p, size));
} 
</code></pre>
<p>I used direct element reference for <code>gridContainer</code>, <code>newGridButton</code>, <code>colorfulButton</code>, and <code>pencilButton</code> so you must ensure that they are unique ids on the page.</p>
    </div>