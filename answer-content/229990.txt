<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your solution 2 is heading the right direction here. What I consider it's advantages over solution 1:</p>

<ol>
<li>It is much more readable</li>
<li>It clearly shows that every member of *args is treated the same.</li>
</ol>

<p>You might want to generic-ify it a bit more to handle more types. For example, the following has a good chance of also handling custom container types:</p>

<pre class="lang-py prettyprint-override"><code>import collections
# -- Other code ---
        if isinstance(arg, collections.abc.Mapping):
            items = list(arg.items())
            results.append(type(arg)(items[i] for i in idx))
        else:
            results.append(type(arg)(arg[i] for i in idx))
</code></pre>

<p>Which will inspect the type of the iterable and feed it an iterator in an attempt to create a new one. This version here will handle lists and tuples the same as your does. If any custom container type supports a <code>__init__(self, *args)</code> constructor to fill itself, it'll also work.</p>

<p>To be honest, those will probably be very rare. I've never seen one. But this is a very easy generic to support, and it's already worth it because you have the same code handling tuples and lists, in my opinion.</p>

<p>Keep in mind you need at least python 3.6 for dictionaries to have a stable insertion ordering. </p>

<h3>Readability &gt; Shortness.</h3>

<p>Unless you're planning on visiting <a href="https://codegolf.stackexchange.com/">Codegolf</a>, don't do this. But if you do, you can shorten your functions a lot more, like this:</p>

<pre class="lang-py prettyprint-override"><code>f = lambda *a:[type(y[i])(b) for i,bin enumerate(map(list, zip(*random.sample([y for y in 
    zip(*[x if type(x)!=dict else x.items() for x in a])], min(len(z) for z in a)))))]
</code></pre>

<p>I hope this example makes it abundantly clear why readability is important. If not, try and figure out if there's a bug in here.</p>
    </div>