<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thank you so much for the input! It gave me great insight into solving this problem.</p>

<p>Thanks <a href="https://codereview.stackexchange.com/users/220915/jeremy-albright">@Jeremy Albright</a> for your insight and advice. It inspired me to rewrite my node.js file.</p>

<p>My setup so far:</p>

<pre class="lang-js prettyprint-override"><code>
// gatsby-node.js

exports.createPages = require("./gatsby/node/createPages")
exports.onCreateNode = require("./gatsby/node/onCreateNode")

</code></pre>

<p>I'm still learning react I find it helpful to split up the code into groups, to get a better understanding of the process and how they function; I split up my gatsby-node.js file into a dedicated folder.</p>

<pre class="lang-js prettyprint-override"><code>
// creatPages.js

const path = require(`path`)
const query = require("../data/data-query")

module.exports = async ({ graphql, reporter, actions }) =&gt; {
  const { createPage } = actions

  const templatesDirectory = path.resolve(__dirname, "../../src/templates/")

  const templates = {
    blog: path.resolve(templatesDirectory, "template-blog-post.js"),
    projects: path.resolve(templatesDirectory, "template-project-entry.js"),
  }

  const result = await graphql(query.local.content)

  if (result.errors) {
    reporter.panicOnBuild(
      'ðŸš¨  ERROR: Loading "createPages" query.'
    )
  }

  const mdxContent = result.data.allMdx.edges

  mdxContent.forEach(({ node }) =&gt; {
    const instance = node.fields.instance
    createPage({
      path: node.fields.slug,
      component: templates[instance],
      context: {
        id: node.id,
        instance,
      },
    })
  })
}
</code></pre>

<p>I like the approach of letting gatsby-source-filesystem define the templates and content types. What I don't like is the strict naming. I would need to name the template files to something that also works well within the URL structure. Here is where I hit a snag.</p>

<p>I want the name of the file to say something about it. Naming a blog template file just "blog" seems a bit vague. The approach I came up with requires a little more work, but it gave me the chance to name my templates how I want to and use my 'weird' naming scheme.</p>

<p>I used <code>templatesDirectory</code> to get the template path and <code>templates</code> to get the instance and combine the actual template name to the instance name</p>

<pre class="lang-js prettyprint-override"><code>
// onCreateNode.js

const { createFilePath } = require("gatsby-source-filesystem")
module.exports = ({ node, actions, getNode }) =&gt; {
  const { createNodeField } = actions

  if (node.internal.type === "Mdx") {
    const value = createFilePath({ node, getNode })
    const file = getNode(node.parent)
    createNodeField({
      name: "slug",
      node,
      value: `/${file.sourceInstanceName}${value}`,
    })
    createNodeField({
      name: "instance",
      node,
      value: file.sourceInstanceName,
    })
  }
}


</code></pre>

<p>My onCreateNode.js file is copy-paste from Jeremy.</p>

<hr>

<p>What is your opinion on this approach? I'm struggling with finding 'best practices' and documentation for working with multiple content types. So many people approach this entirely differently.</p>

<p>I would like to know what you guys think about this!</p>

<p>Cheers!</p>
    </div>