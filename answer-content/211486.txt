<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Or you can try this approach.</p>

<pre><code>interface EmailTemplateInterface
{
    public function create($type);

    /**
     * @param string $name
     * @return bool
     */
    public function supports($type);
}

class EmailNewSubscription implements EmailTemplateInterface
{
    /**
     * @inheritdoc
     */
    public function create($type)
    {
        echo 'XML_PATH_SUBSCRIPTION_EMAIL';
    }

    /**
     * @inheritdoc
     */
    public function supports($type)
    {
        return $type === 'XML_PATH_SUBSCRIPTION_EMAIL';
    }
}

class EmailCardAdd implements EmailTemplateInterface
{
    /**
     * @inheritdoc
     */
    public function create($type)
    {
        echo 'EMAIL_CARD_ADD';
    }

    /**
     * @inheritdoc
     */
    public function supports($type)
    {
        return $type === 'EMAIL_CARD_ADD';
    }
}

class BuildEmailTemplate implements EmailTemplateInterface
{
    /**
     * @var EmailTemplateInterface[]
     */
    private $emailTemplateInterface;

    /**
     * @param EmailTemplateInterface[] $emailCreators
     * @throws \InvalidArgumentException
     */
    public function __construct(array $emailCreators)
    {
        foreach ($emailCreators as $builder) {
            if (!$builder instanceof EmailTemplateInterface) {
                throw new \InvalidArgumentException('emailCreator is not valid');
            }
        }
        $this-&gt;emailTemplateInterface = $emailCreators;
    }

    /**
     * @inheritdoc
     */
    public function create($type)
    {
        foreach ($this-&gt;emailTemplateInterface as $builder) {
            if ($builder-&gt;supports($type)) {
                return $builder-&gt;create($type);
            }
        }

        throw new \UnexpectedValueException('email creator for supporting this type is not found');
    }

    /**
     * @inheritdoc
     */
    public function supports($type)
    {
        foreach ($this-&gt;emailTemplateInterface as $builder) {
            if ($builder-&gt;supports($type)) {
                return true;
            }
        }

        return false;
    }

}
// usage
$emailCreators = [
    new EmailNewSubscription(),
    new EmailCardAdd(),
];

$delegate = new BuildEmailTemplate($emailCreators);

$delegate-&gt;create('XML_PATH_SUBSCRIPTION_EMAIL');
</code></pre>
    </div>