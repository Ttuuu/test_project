<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Precomputed Moves</h2>

<p>You are computing a lot of integer quotients and remainders.  (@Josay's solution as well).  You can reduce the amount of work done during the solving of the Knight's Tour by pre-computing the positions which can be reached from each square:</p>

<pre><code>legal_moves = (-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)
moves = [ [ (r+dr) * cols + (c+dc) for dr, dc in legal_moves
            if 0 &lt;= r+dr &lt; rows  and  0 &lt;= c+dc &lt; cols ]
          for r in range(rows) for c in range(cols) ]
</code></pre>

<p>I've used <code>rows</code> and <code>cols</code> here, to generalize from a square board to an NxM board.  After this point, the logic doesn't change.</p>

<p>Now <code>moves[0]</code> is a list of all (both) positions that can be reached from square #0, <code>moves[1]</code> is a list of the 3 positions that can be reached from square #1, and so on.  Note that you never need to deal with the dimension of the board again.  No integer division or modulo remainders; just use the square's index number.</p>

<h2>Visited</h2>

<p>Your <code>visited</code> set is a nice way, to keep track of whether or not a position has been visited or not.  In <span class="math-container">\$O(1)\$</span> time, you can tell if you've reached a visited location or not.  @Josay's suggestion of using <code>set(route)</code> to recompute the set of visited locations removes the need for maintaining a separate global <code>set()</code> structure, but the cost is recreating the <code>set(route)</code> each move.  This is at least <span class="math-container">\$O(N)\$</span> per move, a huge decrease in performance.</p>

<p>A different structure for keeping track of <code>visited</code> locations is to simply use an array of positions.  If <code>visited[move]</code> is <code>True</code>, you've been there, if not, you haven't.  This is faster that using a <code>set()</code>; you a just looking up an index.  It is <span class="math-container">\$O(1)\$</span> with a very small constant.</p>

<p>Better: <code>visited[move] = move_number</code>.  Initialize the array to <code>0</code> to start with every spot unvisited, and mark a <code>1</code> in the first move location, <code>2</code> in the second and so on.  Set <code>visited[move] = 0</code> when you back-track.  No need to keep track of the <code>route</code>, as it is implicit in the <code>visited[]</code> array.  <code>print_route()</code> amounts to reshaping the <code>visited</code> array into a 2D array, and printing it.</p>
    </div>