<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Depending on what one is trying to achive, one could also preserve views' backgroundColor with .zero lines of code, by setting said view's layer backgroundColor , and keeping its backgroundColor to <code>.clear</code> (e.g. during view creation)</p>

<p>For example, add a flag in a view-creating helper-function to denote where BG color ought to be placed:
<strong>Swift 4+ code</strong></p>

<pre><code>func makeLabel(_ text:String, back_color:UIColor? = nil, lock_back_color:Bool = false, etc etc) -&gt; UILabel {

    let lbl = UILabel(frame: .zero)
    lbl.text = text

    ...

    if lock_back_color {
            lbl.backgroundColor = UIColor.clear // note 0: set it before layer BG color.
            lbl.layer.backgroundColor = back_color.cgColor // note 1: it's CGColor
     }else{
            lbl.backgroundColor = back_color
     }

    ...

    return lbl
}    
</code></pre>

<p>This way, one can prevent the default behaviour of UITableViewCell from setting child-views' background to clear on select/highlight. Indirectly, the said view's back color is <strong>some-what <em>private</em></strong> (on the cheap).</p>
    </div>