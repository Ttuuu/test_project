<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>(self-answer)</em></p>

<hr>

<p>I'll post another question when I made some more signifficant changes and for now I'll just summarize your feedback:</p>

<p>Suggestions by <a href="https://codereview.stackexchange.com/a/226882/59161">@VisualMelon</a></p>

<ul>
<li>✔ - no public tuples (but one small extension) (you need to forgive me)</li>
<li>✔ - I must use the <code>\G</code> anchor more often; this simplfied the <code>Regex</code> matching</li>
<li>✔ - no more <em>Making the compiler happy</em> - removed <em>weird</em> <code>switche</code>s</li>
<li>✔ - replaced mysterious <code>return (false, token.ToString(), 0)</code> with <code>MatchResult&lt;T&gt;.Failure</code></li>
<li>✔ - <code>Tokenize</code> - a clean small <code>while</code> with a good looking <code>switch</code></li>
<li>✔ - not generating tuples anymore; replaces with <code>MatchResult&lt;T&gt;</code></li>
<li>✔ - <code>State&lt;TToken&gt;</code> is no longer restricted to <code>Enum</code>; instead, it now handles <code>TToken</code> via the new <code>MatcherProviderAttribute</code> that knows more about <code>TToken</code> and how to get <code>IMatcher</code></li>
<li>✔ - <code>MatchDelegate</code> replaced with <code>IMacher</code> interface</li>
<li>✔/✖ - <em>inline documentation</em> - I'm trying ;-]</li>
</ul>

<p>Suggestions by <a href="https://codereview.stackexchange.com/a/226891/59161">@dfhwze</a></p>

<ul>
<li>✔ - both double and single quotes can be used; the first found is the one that must close a string</li>
<li>✔ - no more <em>helper</em> tokens like <code>ValueBegin</code> that weren't returned</li>
<li>✖ - <em>context-bound grammars</em> - maybe another time;</li>
<li>✖ - <em>use a full blown lexer</em> - maybe another time; for now this is fun</li>
</ul>

<p>Suggestions by <a href="https://codereview.stackexchange.com/a/226911/59161">@JAD</a></p>

<ul>
<li>✔ - no more <code>switch</code> flood</li>
</ul>

<blockquote class="spoiler">
  <p> <strong>Conventions</strong> I might use some <em>unusual</em> conventions in my code and I think it's good to know them so that you're not surprised<br>
 - <code>else if</code> - this is worse than a <code>goto</code><br>
 - <code>is var x</code> - I like this expression so I often use it to create inline variables<br>
 - <code>?:</code> - I use this only for single expressions; who would want to debug a giant ternary; I prefer <code>if/else</code> with multiple conditions<br>
 - beware of <code>var str = default(string)</code> because I <strong>never</strong> define variables explicitly; this is not negotiable ;-P<br>
 - I use local functions to encapsulate <em>small</em> expressions<br>
 - I tend to (over)use <code>System.Collections.Immutable</code> because these classes have very convenient APIs<br>
 - I usually don't include parameter checking in proof-of-concept code  </p>
</blockquote>

<h3>API</h3>

<p>The <code>Tokenizer</code> is now only a small loop:</p>

<pre><code>public interface ITokenizer&lt;TToken&gt; where TToken : Enum
{
    IEnumerable&lt;Token&lt;TToken&gt;&gt; Tokenize(string value);
}

public class Tokenizer&lt;TToken&gt; : ITokenizer&lt;TToken&gt; where TToken : Enum
{
    private readonly IImmutableDictionary&lt;TToken, IImmutableList&lt;State&lt;TToken&gt;&gt;&gt; _transitions;

    public Tokenizer(IImmutableList&lt;State&lt;TToken&gt;&gt; states)
    {
        _transitions = StateTransitionMapper.CreateTransitionMap(states);
    }

    public IEnumerable&lt;Token&lt;TToken&gt;&gt; Tokenize(string value)
    {
        var state = _transitions[default];
        var offset = 0;

        while (Any())
        {
            // Using a switch because it looks good here. 
            switch (state.Select(s =&gt; s.Match(value, offset)).FirstOrDefault(m =&gt; m.Success))
            {
                case null:
                    throw new ArgumentException($"Invalid character '{value[offset]}' at {offset}.");

                case MatchResult&lt;TToken&gt; match:
                    yield return new Token&lt;TToken&gt;(match.Token, match.Length, offset, match.TokenType);
                    offset += match.Length;
                    state = _transitions[match.TokenType];
                    break;
            }
        }

        // Let's hide this ugly expression behind this nice helper.
        bool Any() =&gt; offset &lt; value.Length - 1;
    }
}

public static class StateTransitionMapper
{
    // Turns the adjacency-list of states into a dictionary for faster lookup.
    public static IImmutableDictionary&lt;TToken, IImmutableList&lt;State&lt;TToken&gt;&gt;&gt; CreateTransitionMap&lt;TToken&gt;(IImmutableList&lt;State&lt;TToken&gt;&gt; states) where TToken : Enum
    {
        return states.Aggregate(ImmutableDictionary&lt;TToken, IImmutableList&lt;State&lt;TToken&gt;&gt;&gt;.Empty, (mappings, state) =&gt;
        {
            var nextStates =
                from n in state.Next
                join s in states on n equals s.Token
                select s;

            return mappings.Add(state.Token, nextStates.ToImmutableList());
        });
    }
}
</code></pre>

<h3>Supporting types</h3>

<p>All other supporting types implementing the changes listed in the summary above.</p>

<pre><code>public class MatchResult&lt;TToken&gt;
{
    public MatchResult(string token, int length, TToken tokenType)
    {
        Success = true;
        Token = token;
        Length = length;
        TokenType = tokenType;
    }

    public static MatchResult&lt;TToken&gt; Failure(TToken tokenType) =&gt; new MatchResult&lt;TToken&gt;(string.Empty, 0, tokenType) { Success = false };

    public bool Success { get; private set; }

    public string Token { get; }

    public int Length { get; }

    public TToken TokenType { get; }
}

public interface IMatcher
{
    MatchResult&lt;TToken&gt; Match&lt;TToken&gt;(string value, int offset, TToken tokenType);
}

public abstract class MatcherAttribute : Attribute, IMatcher
{
    public abstract MatchResult&lt;TToken&gt; Match&lt;TToken&gt;(string value, int offset, TToken tokenType);
}

// Can recognize regexable patterns.
// The pattern requires one group that is the token to return. 
public class RegexAttribute : MatcherAttribute
{
    private readonly Regex _regex;

    public RegexAttribute([RegexPattern] string prefixPattern)
    {
        _regex = new Regex($@"\G{prefixPattern}");
    }

    public override MatchResult&lt;TToken&gt; Match&lt;TToken&gt;(string value, int offset, TToken tokenType)
    {
        return
            _regex.Match(value, offset) is var match &amp;&amp; match.Success
                ? new MatchResult&lt;TToken&gt;(match.Groups[1].Value, match.Length, tokenType)
                : MatchResult&lt;TToken&gt;.Failure(tokenType);
    }
}

// Can recognize constant patterns.
public class ConstAttribute : MatcherAttribute
{
    private readonly string _pattern;

    public ConstAttribute(string pattern) =&gt; _pattern = pattern;

    public override MatchResult&lt;TToken&gt; Match&lt;TToken&gt;(string value, int offset, TToken tokenType)
    {
        return
            // All characters have to be matched.
            MatchLength() == _pattern.Length
                ? new MatchResult&lt;TToken&gt;(_pattern, _pattern.Length, tokenType)
                : MatchResult&lt;TToken&gt;.Failure(tokenType);

        int MatchLength() =&gt; _pattern.TakeWhile((t, i) =&gt; value[offset + i].Equals(t)).Count();
    }
}

// Assists regex in tokenizing quoted strings because regex has no memory of what it has seen.
// Requires two patterns:
// - one for the separator because it has to know where the value begins
// - the other for an unquoted value if it's not already quoted
public class QTextAttribute : MatcherAttribute
{
    public static readonly IImmutableSet&lt;char&gt; Escapables = new[] { '\\', '"', '\'' }.ToImmutableHashSet();

    private readonly Regex _prefixRegex;
    private readonly Regex _unquotedValuePattern;

    public QTextAttribute([RegexPattern] string separatorPattern, [RegexPattern] string unquotedValuePattern)
    {
        _prefixRegex = new Regex($@"\G{separatorPattern}");
        _unquotedValuePattern = new Regex($@"\G{unquotedValuePattern}");
    }

    public override MatchResult&lt;TToken&gt; Match&lt;TToken&gt;(string value, int offset, TToken tokenType)
    {
        if (_prefixRegex.Match(value, offset) is var prefixMatch &amp;&amp; prefixMatch.Success)
        {
            if (MatchQuoted(value, offset + prefixMatch.Length, tokenType) is var matchQuoted &amp;&amp; matchQuoted.Success)
            {
                return matchQuoted;
            }
            else
            {
                if (_unquotedValuePattern.Match(value, offset + prefixMatch.Length) is var valueMatch &amp;&amp; valueMatch.Groups[1].Success)
                {
                    return new MatchResult&lt;TToken&gt;(valueMatch.Groups[1].Value, prefixMatch.Length + valueMatch.Length, tokenType);
                }
            }
        }

        return MatchResult&lt;TToken&gt;.Failure(tokenType);
    }

    // "foo \"bar\" baz"
    // ^ start         ^ end
    private static MatchResult&lt;TToken&gt; MatchQuoted&lt;TToken&gt;(string value, int offset, TToken tokenType)
    {
        var token = new StringBuilder();
        var escapeSequence = false;
        var quote = '\0'; // Opening/closing quote.

        foreach (var (c, i) in value.SkipFastOrDefault(offset).SelectIndexed())
        {
            if (i == 0)
            {
                if (@"'""".Contains(c))
                {
                    quote = c;
                }
                else
                {
                    // It doesn't start with a quote. This is unacceptable. Either an empty value or an unquoted one.
                    return MatchResult&lt;TToken&gt;.Failure(tokenType);
                }
            }
            else
            {
                if (c == '\\' &amp;&amp; !escapeSequence)
                {
                    escapeSequence = true;
                }
                else
                {
                    if (escapeSequence)
                    {
                        if (Escapables.Contains(c))
                        {
                            // Remove escape char. We don't need them in the result.
                            token.Length--;
                        }

                        escapeSequence = false;
                    }
                    else
                    {
                        if (c == quote)
                        {
                            // +2 because there were two quotes.
                            return new MatchResult&lt;TToken&gt;(token.ToString(), i + 2, tokenType);
                        }
                    }
                }

                token.Append(c);
            }
        }

        return MatchResult&lt;TToken&gt;.Failure(tokenType);
    }
}

public static class StringExtensions
{
    // Doesn't enumerate the string from the beginning for skipping.
    public static IEnumerable&lt;char&gt; SkipFastOrDefault(this string source, int offset)
    {
        // Who uses for-loop these days? Let's hide it here so nobody can see this monster.
        for (var i = offset; i &lt; source.Length; i++)
        {
            yield return source[i];
        }
    }

    // Doesn't enumerate a collection from the beginning if it implements `IList&lt;T&gt;`.
    // Falls back to the default `Skip`.
    public static IEnumerable&lt;T&gt; SkipFastOrDefault&lt;T&gt;(this IEnumerable&lt;T&gt; source, int offset)
    {
        // Even more for-loops to hide.
        switch (source)
        {
            case IList&lt;T&gt; list:
                for (var i = offset; i &lt; list.Count; i++)
                {
                    yield return list[i];
                }

                break;

            default:
                foreach (var item in source.Skip(offset))
                {
                    yield return item;
                }

                break;
        }
    }
}

public static class EnumerableExtensions
{
    // This is so common that it deserves its own extension.
    public static IEnumerable&lt;(T Item, int Index)&gt; SelectIndexed&lt;T&gt;(this IEnumerable&lt;T&gt; source)
    {
        return source.Select((c, i) =&gt; (c, i));
    }
}

public abstract class MatcherProviderAttribute : Attribute
{
    public abstract IMatcher GetMatcher&lt;TToken&gt;(TToken token);
}

public class EnumMatcherProviderAttribute : MatcherProviderAttribute
{
    public override IMatcher GetMatcher&lt;TToken&gt;(TToken token)
    {
        if (!typeof(TToken).IsEnum) throw new ArgumentException($"Token must by of Enum type.");

        return
            typeof(TToken)
                .GetField(token.ToString())
                .GetCustomAttribute&lt;MatcherAttribute&gt;();
    }
}

public class State&lt;TToken&gt; where TToken : Enum
{
    private readonly IMatcher _matcher;

    public State(TToken token, params TToken[] next)
    {
        Token = token;
        Next = next;
        _matcher =
            typeof(TToken)
                .GetCustomAttribute&lt;MatcherProviderAttribute&gt;()
                .GetMatcher(token);
    }

    public TToken Token { get; }

    public IEnumerable&lt;TToken&gt; Next { get; }

    public MatchResult&lt;TToken&gt; Match(string value, int offset) =&gt; _matcher.Match(value, offset, Token);

    public override string ToString() =&gt; $"{Token} --&gt; [{string.Join(", ", Next)}]";
}

public class Token&lt;TToken&gt;
{
    public Token(string token, int length, int index, TToken type)
    {
        Text = token;
        Length = length;
        Index = index;
        Type = type;
    }

    public int Index { get; }

    public int Length { get; }

    public string Text { get; }

    public TToken Type { get; }

    public override string ToString() =&gt; $"{Index}: {Text} ({Type})";
}
</code></pre>

<h3>Tests &amp; Examples</h3>

<p>This is how I use it with a simplfied commad-line syntax:</p>

<pre><code>using static CommandLineToken;

public class CommandLineTokenizerTest
{
    private static readonly ITokenizer&lt;CommandLineToken&gt; Tokenizer = new CommandLineTokenizer();

    [Theory]
    [InlineData(
        "command -argument value -argument",
        "command  argument value argument")]
    [InlineData(
        "command -argument value value",
        "command  argument value value")]
    [InlineData(
        "command -argument:value,value",
        "command  argument value value")]
    [InlineData(
        "command -argument=value",
        "command  argument value")]
    [InlineData(
        "command -argument:value,value",
        "command  argument value value")]
    [InlineData(
        @"command -argument=""foo--bar"",value -argument value",
        @"command  argument   foo--bar   value  argument value")]
    [InlineData(
        @"command -argument=""foo--\""bar"",value -argument value",
        @"command  argument   foo-- ""bar   value  argument value")]
    public void Can_tokenize_command_lines(string uri, string expected)
    {
        var tokens = Tokenizer.Tokenize(uri).ToList();
        var actual = string.Join("", tokens.Select(t =&gt; t.Text));
        Assert.Equal(expected.Replace(" ", string.Empty), actual);
    }
}

[EnumMatcherProvider]
public enum CommandLineToken
{
    Start = 0,

    [Regex(@"\s*(\?|[a-z0-9][a-z0-9\-_]*)")]
    Command,

    [Regex(@"\s*[\-\.\/]([a-z0-9][a-z\-_]*)")]
    Argument,

    [QText(@"([\=\:\,]|\,?\s*)", @"([a-z0-9\.\;\-]+)")]
    Value,
}

public class CommandLineTokenizer : Tokenizer&lt;CommandLineToken&gt;
{
    /*

     command [-argument][=value][,value]

     command --------------------------- CommandLine
            \                           /
             -argument ------   ------ /    
                      \      / \      /
                       =value   ,value

    */
    private static readonly State&lt;CommandLineToken&gt;[] States =
    {
        new State&lt;CommandLineToken&gt;(default, Command),
        new State&lt;CommandLineToken&gt;(Command, Argument),
        new State&lt;CommandLineToken&gt;(Argument, Argument, Value),
        new State&lt;CommandLineToken&gt;(Value, Argument, Value),
    };

    public CommandLineTokenizer() : base(States.ToImmutableList()) { }
}
</code></pre>
    </div>