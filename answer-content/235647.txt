<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's generally best to divide your code into separate sections (possibly separate functions) for argument handling and actual computation.</p>

<p>Errors should be printed to standard error rather than standard output.  Also, prefer small integer values for exit status (and since we're in <code>main()</code>, we can use simple <code>return</code> rather than <code>exit()</code> - note the useful <code>EXIT_FAILURE</code> macro for the return value).</p>

<p>It's worth documenting case fallthroughs.  This one is especially suspect:</p>

<blockquote>
<pre><code>               case 1: sa.sin_family = AF_INET6;
             }
    case 1: sa.sin_family = AF_INET;
  }
</code></pre>
</blockquote>

<p>After we store <code>AF_INET6</code>, it's immediately overwritten with <code>AF_INET</code> - is that really intended?</p>

<p>This fallthrough would be clearer as two independent cases:</p>

<blockquote>
<pre><code>    case 0:
        printf("\nInput address is not a valid IPv6 address.\n");
        /* fallthrough */
    case -1:
        if (n_res == -1)
            printf("\nError(%s)\n",strerror(errno));
        exit(-1);
</code></pre>
</blockquote>

<p>Compare:</p>

<pre><code>    case 0:
        fprintf(stderr, "\nInput address is not a valid IPv6 address.\n");
        return 1;
    case -1:
        fprintf(stderr, "\nError(%s)\n", strerror(errno));
        return 1;
</code></pre>

<p>This line seems to be no use to a user:</p>

<blockquote>
<pre><code>printf("\nsa.sin_addr.s_addr[%d]\n",sa.sin_addr.s_addr);
</code></pre>
</blockquote>

<p>We check for <code>argv</code> less than 2, but we neither complain about nor use any excess arguments.</p>

<p>There's no need to null out the <code>node</code> storage, as <code>getnameinfo()</code> will either fail (in which case we'll never access it) or write a valid string.</p>

<p>Minor (grammar): don't use "for" with "e.g." - that reads like, "for for example".</p>

<hr>

<p>When I tried running the program, I found it wouldn't work at all with IPv6 addresses, because <code>sockaddr_in</code> is too small for IPv6 addresses.  I had to totally rewrite with a union of address types:</p>

<pre><code>#include &lt;arpa/inet.h&gt; //for inet_pton()
#include &lt;netdb.h&gt; // for NI_MAXHOST, getnameinfo() and gai_strerror()

#include &lt;errno.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

static int convert4(struct sockaddr_in *sa, const char *name)
{
    return inet_pton(sa-&gt;sin_family = AF_INET, name, &amp;sa-&gt;sin_addr);
}

static int convert6(struct sockaddr_in6 *sa, const char *name)
{
    return inet_pton(sa-&gt;sin6_family = AF_INET6, name, &amp;sa-&gt;sin6_addr);
}


int main(int argc, char** argv)
{
    if (argc != 2) {
        fprintf(stderr, "Usage: %s [IP]\nE.g. %s 10.32.129.77\n", argv[0], argv[0]);
        return EXIT_FAILURE;
    }

    union {
        struct sockaddr         sa;
        struct sockaddr_in      s4;
        struct sockaddr_in6     s6;
        struct sockaddr_storage ss;
    } addr;

    if (convert4(&amp;addr.s4, argv[1]) != 1 &amp;&amp; convert6(&amp;addr.s6, argv[1]) != 1) {
        fprintf(stderr, "%s: not a valid IP address.\n", argv[1]);
        return EXIT_FAILURE;
    }

    char node[NI_MAXHOST];
    int res = getnameinfo(&amp;addr.sa, sizeof addr, node, sizeof node, NULL, 0, NI_NAMEREQD);
    if (res) {
        fprintf(stderr, "%s: %s\n", argv[1], gai_strerror(res));
        return EXIT_FAILURE;
    }

    puts(node);
}
</code></pre>
    </div>