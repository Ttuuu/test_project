<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>Python comes with an <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">official style guide</a> (often just called PEP8) which is commonly accepted among Python programmers. Since you said you are new to Python, I wholeheartedly recommend to read and follow it. </p>

<p>E.g. one of the recommendations of the style guide is to indent code by <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="nofollow noreferrer">4 spaces per indentation level</a>, while you have a mix of 2 and four spaces. Even if you decide to stick with 2 spaces: be consistent!</p>

<p>Another very widely accepted convention is to have no whitespace around <code>=</code> if used in keyword-arguments to functions, e.g. instead of</p>

<blockquote>
<pre><code>def is_sequence_missing(filename, packet_size = 5392, sequence_offset = 11): 
</code></pre>
</blockquote>

<p>use </p>

<pre><code>def is_sequence_missing(filename, packet_size=5392, sequence_offset=11):
</code></pre>

<h1>Outdated Python</h1>

<p>Your code uses some parts of the Python language which have become a bit "rusty", i.e. have been superseded in later versions of the language. Especially in the light of <a href="https://pythonclock.org/" rel="nofollow noreferrer">soon to come end-of-life of Python 2.7</a>, I would highly recommend to have a look at Python 3 or at least use "more current" features of Python 2.7.</p>

<p>A few examples:</p>

<h2>Command-line arguments</h2>

<p>Your code uses <code>getopt</code> to parse command-line arguments. <code>getopt</code> has been superseded by <a href="https://docs.python.org/2/library/optparse.html" rel="nofollow noreferrer"><code>optparse</code></a>, which in turn has been marked as deprecated starting from Python 2.7 to be replaced by <a href="https://docs.python.org/2/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> (see also <a href="https://stackoverflow.com/a/3217687/5682996">this SO post</a> from 2010!) from there on. Apart from being easier to use, <code>argparse</code> will e.g. also generate and show usage instructions if the user fails to give the correct arguments.</p>

<p><strong>Further reading:</strong> The official and reasonably comprehensive <a href="https://docs.python.org/2/howto/argparse.html" rel="nofollow noreferrer">tutorial</a> on <code>argparse</code>.</p>

<h2>String formatting</h2>

<p>String output is generated using the old <code>%</code> formatting. As of Python 2.6, the recommended way is to use <code>str.format</code> for string formatting. If you happen to have access to Python 3.6 and later, also so called f-strings are available to you which make the whole thing even more comfortable. An example from your code:</p>

<pre><code>"not matching expected: 0x%x received: 0x%x at 0x%x"% (counter, v, i)
"not matching expected: 0x{:x} received: 0x{:x} at 0x{:x}".format(counter, v, i)  # Python 2.6+
f"not matching expected: 0x{counter:x} received: 0x{v:x} at 0x{i:x}"  # Python 3.6+
</code></pre>

<p><strong>Further reading:</strong> <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">This blog post</a> has a nice comparison of all three variants and their possibilities.</p>

<h1>General recommendations</h1>

<h2>Variable definition</h2>

<p>Usually it's always a good idea to define your variables as close as possible to where they are needed, and also arguably define one variable per line. This helps to avoid unused or uninitialized variables, although the later part is not so critical here in Python as it would be e.g. in C or C++.</p>

<h2>Documentation</h2>

<p>Also not strictly specific to Python: Do yourself (and possible also others) a favor and document your code. Maybe in a few months time where you have done something different you will (have to) come back and wonder why the default value for <code>sequence_offset</code> is <code>11</code>. Python has a feature called <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">docstrings</a> which are also described in the style guide (and in more detail in <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP 257</a>) and are very commonly found in Python code. docstrings are essentially <code>"""triple quoted strings"""</code> placed immediately after the function definition, trying to describe what to expect from the function. As an example:</p>

<pre><code>def is_sequence_missing(filename, packet_size=5392, sequence_offset=11):
    """Check file for gaps in the sequence number

    read up binray data from filename and check for ascending
    sequence numbers starting sequence_offset (default: 11) bytes away
    from the sentinel value
    """
    # rest of the code here
</code></pre>

<p>Documentation written using docstrings will be picked up by Python's built-in <code>help(...)</code> as well as by most Python IDEs.</p>

<hr>

<p><strike>That's all for now. Maybe I can spare some time tomorrow to have a closer look at the actual algorithm.</strike> <strong>Edit:</strong> See the <a href="https://codereview.stackexchange.com/a/227356/92478">second answer</a> for a more detailed feedback on the actual algorithm.</p>
    </div>