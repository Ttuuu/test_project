<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>False sharing</h1>
<p><code>struct Counters</code> is smaller than a cache line. For a read-only data structure that would be fine, a "clean" copy of the data can be in the Shared state in a cache so it wouldn't matter if two or more cores wanted to have the same data. But here it's being used for many read/write/modify operations, and multiple cores are trying to jump on the same cache line - not the same data exactly, so it's not true sharing, the data is logically independent but since it's located in the same cache line, from the point of view of the hardware there is sharing: false sharing.</p>
<p>Padding out <code>Counters</code> to 64 bytes works .. to some extent. At least it will start to scale properly with thread count, but the code is still slow enough that I needed 4 threads before it overtook the single-threaded version.</p>
<h1>Accidental pessimisation of the inner loop</h1>
<p>From the point of view of the compiler, there are writes to (and reads from) shared memory. Maybe they are necessary, how would it know they're not? But we humans, with our whole-program reasoning skills, know most of them aren't necessary because the main thread waits for the workers to complete and then the results are collected, the partial counts are not observed along the way, so we can do this:</p>
<pre><code>void MultiThread_Merge(int index)
{
    Counters local;
    for (unsigned long long x = parts[index].first; x &lt;= parts[index].second; ++x)
    {
        // Count the even number
        if ((x % 2) == 0)
            ++local.CountEven;

        // Count divisible by 5
        if ((x % 5) == 0)
            ++local.CountDivFive;

        // Count divisible by 8
        if ((x % 8) == 0)
            ++local.CountDivEight;

        // Count divisible by 10
        if ((x % 10) == 0)
            ++local.CountDivTen;
    }

    MyCounters[index] = local;
}
</code></pre>
<p>And now it's fast.</p>
    </div>