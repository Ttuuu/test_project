<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, there's a reason I wouldn't ever use a smart-pointer which isn't a shared-pointer or self-relative as base for a doubly-linked-list:</p>

<p>Most of the time, one has to work around the smart-pointer to get things done efficiently, or with the right semantics at all. Some examples from your code:</p>

<ol>
<li>Your list-destructor is deeply recursive, needing \$O(n)\$ stack-space. An iterative version would only need a miniscule fixed amount of stack-space and be faster too. That <em>can</em> be fixed without going to different pointers, but you are fighting against them.</li>
<li>You must handle an empty list, specifically inserting or removing the first node, as a special case. Special-casing leads to repetition and loss of efficiency.</li>
<li>You will have difficulties creating a standard iterator-interface for your list: Iterators to nodes are fine, but what about the end-iterator? <a href="http://eel.is/c++draft/container.requirements.general#9" rel="nofollow noreferrer">The container-requirements</a> say that all iterators to elements have to stay valid after container-swap (<code>std::array</code> obviously has an exception).</li>
</ol>

<p>Base your list-class and its nodes on something like the following instead, and do your memory-management manually or with shared-pointers when building that basic abstraction.</p>

<pre><code>struct node_base {
    node_base *next, *prev;
};
template &lt;class T&gt;
class linked_list {
    struct node { node_base links; T data; };
    node_base links { &amp;links, &amp;links };
    void fix_links() noexcept {
        if (links.next != links.prev)
            links.next-&gt;prev = links.prev-&gt;next = &amp;links;
        else
            links.next = links.prev = &amp;links;
    }
public:
    linked_list() = default;
    ~linked_list() {
        while (auto p = links.next; p != &amp;links)
            delete (node*)std::exchange(p, p-&gt;next);
    }
...
</code></pre>

<p>Printing the list should be done by a free non-friend function using the now easily implemented iterator-interface. And it should probably be done in <code>template &lt;class T&gt; std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, linked_list&lt;T&gt; const&amp; ll)</code>.</p>

<p>Naturally, your proof-of-concept still misses most of its interface. Still, those you have should all follow the standard-library as closely as reasonable, in order to take advantage of all the template-magic and to follow the rule of least surprise.</p>
    </div>