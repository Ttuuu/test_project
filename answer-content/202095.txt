<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>session_start();</code> being set and called on a per-script basis is a poor approach. Prone to problems like forgetting to set it, setting it more than once when there are multiple layers of files being <code>included()</code>.</p>

<p>The "system" should have services (and other "things" that are re-used) invoked before it gets to things such as <code>login.php</code>.</p>

<p>Though this is more a limitation of writing procedural code and not using modular setup with OOP etc.</p>

<hr>

<p>You should choose a standard, like PSR2 that is more globally recognised. Consistency is absolute key, but the standards such as PSR2 are quite logical in their decisions and makes for better readability.</p>

<p>Such as:</p>

<pre><code>// Yours
if($_GET["logout"]){

// PSR2
if ($_GET["logout"]) {
</code></pre>

<hr>

<p>Why is "<code>login.php</code>" handling "logout"?<br>
Even using procedural (instead of nice classes) doesn't mean you wont benefit from things like SRP. </p>

<p>You should have a "logout.php" file and "login.php" file.</p>

<p>Though, you should use classes really. You say you're going to use this in some public projects, but you have no namespaces so would possibly have name clashes with others' code. And people don't want to <code>require()</code> your file they want to inject it in an OOP fashion.</p>

<hr>

<p>You have no namespaces, so this is all in global namespace. Any other file in that name space (probably all of your other code) has potential for naming clashes. Which not only potentially causes issues, but ones that can be very hard to find and debug.</p>

<hr>

<p>This seems very prone to things going wrong - 404 and possible other issues.</p>

<pre><code>header('Location: '. $_SERVER['SCRIPT_NAME']);
</code></pre>

<p>I'd consider a good resource handler, but again this would really need classes otherwise you're going to be stuck including things.</p>

<hr>

<p>As with all of your code (missing some kind of nice coding standard), this can be simplified and tidied to be more readable:</p>

<pre><code>if(empty($_SESSION["loggedIn"])){
    if(isset($_POST["password"])){
        if(hash('sha256', $_POST['password'])===$password){
                session_regenerate_id(true);
                $_SESSION["loggedIn"]=true;
        } else{
            echo "Incorrect password! &lt;br&gt;";
        }   
    }
}
</code></pre>

<p>To this:</p>

<pre><code>if (
    empty($_SESSION["loggedIn"])
    &amp;&amp; isset($_POST["password"])
    &amp;&amp; hash('sha256', $_POST['password']) === $password
) {
       session_regenerate_id(true);
       $_SESSION["loggedIn"] = true;

   } else {
       echo "Incorrect password! &lt;br&gt;";
   }
}
</code></pre>

<hr>

<blockquote>
  <p>Yes, I know, sha-256 hashes aren't recommended for password storage,
  but that's only for testing, when deployed it'll be using proper
  salting for password storage</p>
</blockquote>

<p>Calling a variable that stores the username <code>$get_da_user_name_like</code> is "not recommended". Using SHA-256 or similar is not "not recommended" it's entirely insecure.</p>

<p>Also, this approach means that once you're done writing your code and have it all tested, you'll... start writing your code and start testing again to add this other thing. Or won't because something else will be needed.</p>

<p>Honestly, this is a pointless thing to "put off" - it's 2 single PHP functions, built in.</p>

<pre><code>// Store this in the DB
$hashed_password = password_hash($password);

// Check their login pass with the one stored in the DB
if (password_verify($passwordFromLoginForm, $passwordFromDb)) {
</code></pre>

<hr>

<pre><code>if($_SESSION["loggedIn"] == true){
</code></pre>

<p>Using a loose comparison <code>==</code> instead of strict <code>===</code> means this will be "true" for many values (almost everything, basically barring a few values it'll just be set and so true). It might not matter but is usually better to be strict in these matters. Even if not for security and just for clear intent.</p>

<hr>

<p>Echoing out in a PHP file is not ideal. Even with procedural (no classes) treat PHP files as "controllers" that do the system things, and "view" files that output.</p>

<p>It's an old approach but set a variable to the desired output, then at the end call a new file (e.g. <code>loginView.php</code>) and have that display the HTML/CSS and data from the controller (<code>login.php</code>).</p>

<p>Then you can also call this file early and exit, eg when there are errors.</p>

<hr>

<p>I will just presume this is for testing purposes:  </p>

<pre><code>$password = '8f434346648f6b96df89dda901c5176b10a6d83961dd3c1ac88b59b2dc327aa4';
</code></pre>

<hr>

<p>I said it before but honestly, switch to using classes. Writing procedural code seems easier on face value, but in the long run it <em>will without doubt</em> cost you more time, headaches, bugs, and limitations.</p>
    </div>