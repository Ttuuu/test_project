<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Remove the <code>everyOtherMove</code> flag variable</h3>

<p>You use it only once to control the logic of your program:</p>

<pre><code>if ( ! everyOtherMove ) {
</code></pre>

<p>and this usage may be substitued with a evenness check of the <code>moveCount</code> variable that you would have anyway.</p>

<h3>Do not declare vars so much before using them</h3>

<p>At line 36 <code>temp</code> is declared as an <code>int</code>, at line 113 <code>temp</code> is used for the first time. How can the reader remember the type of <code>temp</code> 77 lines later? Declare it just before using it.</p>

<p>Loop variables should be declared inside the loop statement as C99 allows it.</p>

<h3>Use ternary when it clearly simplifies</h3>

<pre><code>if ( (numberOfDisks &amp; 1) == 0 )
    smallestDir = 1;
else
    smallestDir = -1;    
</code></pre>

<p>Becomes</p>

<pre><code>int smallestDir = (numberOfDisks &amp; 1) == 0 ? 1 : -1
</code></pre>

<p>Much shorter and without the <code>smallestDir =</code> repetition.</p>

<p><strong>Using <code>%</code> instead of bitwise operations to check evenness would be a further improvement.</strong></p>

<h3>Reduce <code>main</code> (both code and vertical whitespace)</h3>

<p>I introduce this helper function:</p>

<pre><code>int wrap_around(int min, int max, int value)
{
    return value &lt; min ? max : (value &gt; max ? min : value);
}
</code></pre>

<p>(Please note that it could also be written with <code>if</code> conditionals, I wrote it like this just because of my familiarity with ternary).</p>

<p>The first <code>if</code> branch now is:</p>

<pre><code>    if (moveCount % 2 == 0) {
        // move smallest disk
        rodFrom = rod[1];
        rodTo = wrap_around(1, 3, rodFrom + smallestDir);
        disk = 1;
    }
</code></pre>

<p>while before it was:</p>

<pre><code>    if ( ! everyOtherMove ) {

        // move smallest disk

        rodFrom = rod[1];

        rodTo = rodFrom + smallestDir;
        if ( rodTo &gt; 3 )
            rodTo = 1;
        if ( rodTo &lt; 1 )
            rodTo = 3;

        disk = 1;

    }
</code></pre>

<p>The same concept is expressed in much less space, and this is a good attribute in my view because:</p>

<ul>
<li>Some logic is modularized in other functions, the reader gets a more abstract overview.</li>
<li>If all code is compacted this way an overall view of the program becomes possible helping understanding.</li>
</ul>

<p><strong>Compacting the <code>else</code> clause</strong></p>

<pre><code>    else {

        // make only valid move not involving the smallest disk

        // find disk at the top of each rod

        for ( i = 1; i &lt;= 3; ++i )
            topDisk[i] = numberOfDisks + 1;

        for ( i = numberOfDisks; i &gt;= 1; --i )
            topDisk[rod[i]] = i;            

        // find which disk to move

        switch ( rod[1] )
        {
            case 1:
                rodFrom = 2;
                rodTo = 3;
                break;
            case 2:
                rodFrom = 1;
                rodTo = 3;
                break;
            case 3:
                rodFrom = 1;
                rodTo = 2;
               break;
            default:
                printf ("error");
                break;
        }            

        if ( topDisk[rodFrom] &gt; topDisk[rodTo] ) {
            // swap values
            temp = rodFrom;
            rodFrom = rodTo;
            rodTo = temp;            
        }

        disk = topDisk[rodFrom]; 

    }    
</code></pre>

<p>I do not fully understand the uppermost two <code>for</code> loops but both the switch and the body of the <code>if ( topDisk[rodFrom] &gt; topDisk[rodTo] )</code> statement are performing very clear, specific tasks, so:</p>

<pre><code>    else {
        // make only valid move not involving the smallest disk
        // find disk at the top of each rod
        for ( i = 1; i &lt;= 3; ++i )
            topDisk[i] = numberOfDisks + 1;
        for ( i = numberOfDisks; i &gt;= 1; --i )
            topDisk[rod[i]] = i;            

        // find which disk to move
        find_start_and_destination(rod[1], *rodFrom, *rodTo);
        if ( topDisk[rodFrom] &gt; topDisk[rodTo] ) {
            SWAP(rodFrom, rodTo);    
        }
        disk = topDisk[rodFrom]; 

    }    
</code></pre>

<p>I just removed the unnecessary blanklines (blanklines should separate logically separated blocks of code, not each line / statement), and used a function to incorporate the switch and a macro to swap variables. The function must use pointers because two values may not be returned from a function in C, but I think the modularization is still an advantage.</p>
    </div>