<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>while True:
    now = datetime.now()
    # repeats = 1 if now.hour % 3 == 0 else now.hour % 3
    repeats = now.hour % 3 + 1

    if now.hour &lt; 6:
        break
</code></pre>

<p>The <code>repeats</code> is not used in the condition of the <code>break</code>. Therefore you should reorder your code like this, to avoid computing things you don't need later:</p>

<pre><code>    now = datetime.now()
    if now.hour &lt; 6:
        break

    repeats = now.hour % 3 + 1
</code></pre>

<p>I was confused by the last line of code. I thought it would mean to ring the bell 3 times at 2 o'clock. What confused me was that <code>now.hour</code> does not correspond to my intuitive understanding of <code>now</code> anymore, since by the time the bell will ring, some time has passed.</p>

<p>To avoid this confusion, you should define a variable <code>next_hour = now.hour + 1</code>. When you then define <code>repeats = (next_hour - 1) % 3 + 1</code>, that may look even more confusing because of the <code>- 1</code> at the beginning and the <code>+ 1</code> at the end. That's probably why you considered <code>repeats = 3 if next_hour % 3 == 0 else next_hour % 3</code>, and it's good that you did that.</p>

<p>Continuing with your code:</p>

<pre><code>    # report on whole hour
    if now.minute == 0:
        for _ in range(repeats):  # bell the hours
            play(bell_sound)
        time.sleep(60 * 58)  # save the computation
</code></pre>

<p>I hope that each bell takes only a few seconds. As soon as they become longer, you might miss the next hour completely. The "save the computation" part feels dangerous to me. This is because on practically all operating systems you can put a process to sleep and later resume it. I don't know how exactly this affects the clock and the measurement of <code>datetime.now()</code>, but that's definitely something you should experiment with.</p>

<p>It's better to define a high-level overview first:</p>

<pre><code>def ring_until_midnight():
    current_hour = datetime.now().hour
    if current_hour &lt; 6:
        break

    while current_hour &lt; 23:
        wait_until_hour(current_hour + 1)
        ring_the_bell(current_hour + 1)
        current_hour += 1
</code></pre>

<p>This raises the question what to do if the hour steps forward fast, such as when the daylight saving time changes. Since you probably don't want the clock to ring 5 times in a row, it's better to replace the last line above with:</p>

<pre><code>        current_hour = datetime.now().hour  # instead of current_hour + 1
</code></pre>

<p>Next, it's time to fill the missing details, which are <code>wait_until_hour</code> and <code>ring_the_bell</code>. For <code>wait_until</code> I propose this simple solution:</p>

<pre><code>def wait_until_hour(hour):
    while datetime.now().hour &lt; hour:
        time.sleep(1)
</code></pre>

<p>Note that I intentionally wrote <code>&lt; hour</code> instead of <code>!= hour</code>. Just in case the process is stopped for 3 hours. If I had written <code>!= hour</code>, the code would continue to wait until the next day. Again, it depends on your exact requirements whether <code>&lt;</code> or <code>!=</code> is appropriate in this situation. In any case, you have to make this choice consciously.</p>

<p>Having a possible clock offset of 1 second (from the above <code>sleep(1)</code>) sounds acceptable to me. If you need more precision, you can say <code>time.sleep(0.1)</code> instead as well.</p>

<p>The second detail, <code>ring_the_bell</code>, is similarly simple:</p>

<pre><code>def ring_the_bell(hour):
    repeats = (hour - 1) % 3 + 1

    for _ in range(repeats):
        play(bell_sound)
</code></pre>

<p>Now that I think of it, in the definition of <code>ring_until_midnight</code> above, I made an unfortunate choice:</p>

<pre><code>        ring_the_bell(current_hour + 1)
</code></pre>

<p>This should rather be:</p>

<pre><code>        ring_the_bell(datetime.now().hour)
</code></pre>

<p>The point is that during all this waiting, there is much that can happen, and there is no guarantee that waiting for "the next hour" will finally arrive at exactly that hour. Therefore better ask for the then-current time again.</p>

<p>When you build your programs out of composable pieces like these, you will find that you can reuse some parts by just copying them to your next project, which is good because it saves you the work of writing the same code over and over again, plus you will build up your library of small, hopefully tested code that you know you can trust.</p>

<p>As you saw in the process I outlined above, even writing a simple ring-the-bell program can be made quite complicated. It needs lots of decisions that you might not think about when you first decide to write such a program. The complexity arises mainly because this program is dealing with time and measurement and calendars, which always gets complicated. That's the way it is.</p>

<p>You also saw that it is of utmost importance to get the exact wording right in every line of the code. Is saying "the current hour" really the best way to express your requirement? What does "current" mean, when was it measured, for how long is that measurement valid, what happens in between? Lots of questions, and you sometimes have to revise your initial program. I'm quite experienced, and I didn't get it right either on the first attempt.</p>
    </div>