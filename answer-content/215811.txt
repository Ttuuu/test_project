<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code uses a number of things seldom if ever seen in idiomatic Scala:</p>

<ol>
<li><code>return</code></li>
<li><code>null</code></li>
<li><code>throw</code></li>
<li><code>var</code></li>
</ol>

<p><strong>the land of no return</strong></p>

<p>The final statement in a code block is the return value of that block, so the keyword <code>return</code> isn't needed. If you structure your code so that each block/method/function has only one exit point, at the end, then your code is easier to read and understand, and less prone to unexpected results.</p>

<p>Also, under some circumstances (I won't detail here) using <code>return</code> will do unexpected things. Easier to just avoid it altogether.</p>

<p><strong>failure is an option</strong></p>

<p>Code that might fail to complete correctly usually does one of two things: return a nonsense value, like <code>null</code>, which the calling code will test for (hopefully), or <code>throw</code> an exception, indicating the source of the problem, which some routine somewhere will catch (hopefully) and process.</p>

<p>Scala offers a third and better option: put the failure in the type system. If a routine might fail, put that in its return <em>type</em>, not its return <em>value</em>. That way the calling code can't ignore the possibility of failure.</p>

<p>In this case, instead of returning a <code>Document</code>, return a <code>Try[Document]</code>. Much like an <code>Option</code>, which is <code>Some(value)</code> or <code>None</code>, a <code>Try</code> is expressed as <code>Success(value)</code> or <code>Failure(exception)</code>.</p>

<p><strong>iteration without mutation</strong></p>

<p>Functional Programming avoids data structures with mutable state. Scala has <code>var</code>s but they are discouraged. There are a number of different ways to iterate without using a <code>var</code>. In this case here's what I'd do.</p>

<pre><code>Seq.iterate(Try(browser get page), 5)(_ orElse Try(browser get page))
</code></pre>

<p>This is a sequence of 5 results from the page requests, but a new attempt is made only if the previous one failed. The first <code>Success</code> is passed down the line to all subsequent positions in the sequence.</p>

<p><strong>putting it all together</strong></p>

<pre><code>import util.Try

def getPage(browser :Browser, page :String) :Try[Document] =
  Seq.iterate(Try(browser get page), 5)(_ orElse Try(browser get page))
     .last
</code></pre>
    </div>