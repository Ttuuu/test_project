<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Remarks</h2>
<ul>
<li>Functions that require an argument to work should rather than silently fail, <code>throw</code> <code>TypeError()</code>.</li>
</ul>
<pre class="lang-js prettyprint-override"><code>/**
 * Without a file no need to execute script
 */
if (!file)
{
    return;
}
</code></pre>
<p>could become</p>
<pre><code>if (!file) { throw new TypeError(`${file} is not a valid path name`); }
</code></pre>
<p>There's also no need for comment here — it's in the error's message.</p>
<hr>
<ul>
<li>You shouldn't touch the prototype of <code>HTMLMediaElement</code>. <a href="https://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/" rel="nofollow noreferrer">Don't modify objects you don't own</a>.</li>
</ul>
<hr>
<ul>
<li>If you didn't extend the prototype of <code>HTMLMediaElement</code> but of <code>HTMLVideoElement</code> instead, the following check wouldn't be necessary:</li>
</ul>
<pre class="lang-js prettyprint-override"><code>if (HTMLMediaElement.tagName !== 'VIDEO')
{
    return;
}
</code></pre>
<hr>
<ul>
<li>In <code>setTextContent()</code> and <code>getTextContent()</code> instead of <code>.innerHTML</code> you should use <code>.textContent</code>. It's more performant since <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#Differences_from_innerText" rel="nofollow noreferrer">it's not parsing HTML, which also prevents potential XSS attacks</a>.</li>
</ul>
<hr>
<ul>
<li>In <code>setTextContent()</code> this ternary: <code>text ? text : ''</code> could become <code>text || ''</code>.</li>
</ul>
<hr>
<ul>
<li><p>In <code>createElement()</code> instead of enclosing everything in one big <code>if</code> you could check for the opposite condition and <code>return</code> if it matches.</p>
<p>Also, to make the code more concise and not to repeat <code>HTMLMediaElement.nextSibling.tagName</code> twice, you could put both strings that you test for in an array, like so:</p>
</li>
</ul>
<pre class="lang-js prettyprint-override"><code>if (!['undefined', 'SUB'].includes(HTMLVideoElement.nextSibling.tagName))
</code></pre>
<hr>
<ul>
<li>There are some comments that are not telling more than the code itself, but their presence makes reading far harder, e.g.:</li>
</ul>
<pre class="lang-js prettyprint-override"><code>/**
 * Create new sub element
 */
var element = document.createElement('sub');
</code></pre>
<hr>
<ul>
<li>Entire 22-line synchronous <code>load()</code> function can be replaced with a neat asynchronous one-liner using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" rel="nofollow noreferrer">Fetch API</a>:</li>
</ul>
<pre class="lang-js prettyprint-override"><code>file =&gt; fetch(file).then(response =&gt; response.text()).then(subtitle.parse)
</code></pre>
<hr>
<ul>
<li>In <code>parse()</code> function you've got <code>arr.slice(0, 1).join()</code> and <code>arr.slice(1, 2).join()</code>. They are simply equal to <code>arr[0]</code> and <code>arr[1]</code> respectively.</li>
</ul>
<hr>
<ul>
<li>There are 3 instances (in <code>play()</code> and <code>recalculate()</code>) of</li>
</ul>
<pre class="lang-js prettyprint-override"><code>subtitle.stringToArray(video.getCurrentTime.toString()).join('')
</code></pre>
<p>which is equal to</p>
<pre class="lang-js prettyprint-override"><code>video.getCurrentTime.toString().replace(/[:,]+/g, '')
</code></pre>
<p>It's more concise and has one less function call. Replacing one with the other has also that advantage, that it removes all the cases where you pass string to <code>stringToArray()</code> fucntion. Speaking of…</p>
<hr>
<ul>
<li><p><code>stringToArray()</code> function was especially confusing to me, until I went down the stream to see how it's actually used. Both documentation and parameter name suggested you expect a string, but then there was a check if <code>string</code> is actually an <code>object</code> and if so it seemed you… iterate over it. <code>time instanceof Array</code> would be more clear. Also, a comment that you test for an array, different parameter name and mention in documentation that both string as well as an array may be passed would be really helpful.</p>
<p>All together with the previous bullet point, the entire function could be:</p>
</li>
</ul>
<pre class="lang-js prettyprint-override"><code>splitTimes: time =&gt; time.map(str =&gt; str.split(/[:,]+/))
</code></pre>
<hr>
<ul>
<li>In <code>recalculate()</code> function instead of <code>for</code> and <code>if</code> to find particular index, you could use function… well, <code>.findIndex()</code>. ES2015 goodies (｡◕‿‿◕｡).</li>
</ul>
<hr>
<ul>
<li>In <code>video.getCurrentTime</code> you've got a lot of long statements with ternary operators to pad time to 2 digits with zero. In ES2015 it can be done like this:</li>
</ul>
<pre class="lang-js prettyprint-override"><code>`${…}`.padStart(2, '0'),
</code></pre>
<p>Note: the two back-ticks are <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow noreferrer">template literals</a> to convert math expression in them to string.</p>
<p>What's more, splitting the whole thing into so many functions harms performance and readability. It could all be written as:</p>
<pre class="lang-js prettyprint-override"><code>getCurrentTime: () =&gt; {
  const time = HTMLVideoElement.currentTime,
  hours = `${Math.floor(time / 3600)}`.padStart(2, '0'),
  minutes = `${Math.floor(time / 60)}`.padStart(2, '0'),
  seconds = `${Math.floor(time % 60)}`.padStart(2, '0'),
  milliseconds = `${time % 60}`.replace('.', '').substring(2, 5);

  return `${hours}:${minutes}:${seconds},${milliseconds}`;
}
</code></pre>
<hr>
<ul>
<li>Other little things: there are a few unnecessary semicolons, few are missing, <code>sub</code> is not the right HTML element in this context and many comments are invalid and hence confusing.</li>
</ul>
<h2>Rewrite</h2>
<p>Below code has less than 45% of lines and around 50% of characters of the original one. I hope I didn't miss anything ;).</p>
<pre class="lang-js prettyprint-override"><code>HTMLVideoElement.prototype.subtitle = function(file) {

  if (!file) { throw new TypeError(`${file} is not a valid path name`); }

  const HTMLVideoElement = this;

  const subtitle = {
    data: {
      subtitles: [],
      paragraphs: null,
      element: null,
      index: 0,
      current: null,
      next: null,
    },
    // Sets textContent of the &lt;sub&gt; element
    setTextContent: text =&gt; subtitle.data.element.textContent = text || '',
    // Returns textContent of the &lt;sub&gt; element
    getTextContent: () =&gt; subtitle.data.element.textContent,
    // Creates a subtitle element for the current video
    createElement: () =&gt; {
      // Return immediately if subtitle element doesn't exist yet
      if (!['undefined', 'SUB'].includes(HTMLVideoElement.nextSibling.tagName)) { return; }

      // Insert nice subtitle font
      const font = document.createElement('link');
      [font.rel, font.href] = ['stylesheet', 'https://fonts.googleapis.com/css?family=Sunflower:300'];
      document.head.appendChild(font);

      // Store new 'sub' element into the current subtitle object
      subtitle.data.element = document.createElement('sub');

      // Append node to document
      HTMLVideoElement.parentNode.insertBefore(subtitle.data.element, HTMLVideoElement.nextSibling);
    },
    /**
     * Loads subtitle file over HTTP(S)
     * Calls subtitle.parse(content)
     *
     * @param   {string}    - Path / URL to subtitle file
     */
    load: file =&gt; fetch(file).then(response =&gt; response.text()).then(subtitle.parse),
    /**
     * Parses subtitle file
     *
     * @param   {string}    - SRT text content
     * @returns {object}    - Object containing subtitles
     */
    parse: content =&gt; {
      // First split all paragraphs into chunks
      subtitle.data.paragraphs = content.split(/\n\s*\n/g);

      subtitle.data.paragraphs.forEach(paragraph =&gt; {
        const arr = paragraph.split('\n');

        // Store paragraph information
        subtitle.data.subtitles.push({
          '$index': arr[0],
          '$timing': subtitle.splitTimes(arr[1].split(' --&gt; ')),
          '$textContent': arr.slice(2, arr.length).join()
        });
      });

      // Set defaults
      subtitle.data.current = subtitle.data.subtitles[subtitle.data.index];
      subtitle.data.next = subtitle.data.subtitles[subtitle.data.index + 1];
      subtitle.createElement();
    },
    /**
     * Starts displaying the subtitles when video is started
     * Gets called using the video.timeupdate event listener
     */
    play: () =&gt; {
      const currentTime = video.getCurrentTime().replace(/[:,]+/g, '');

      // Set subtitle when video's currentTime matches the subtitle time
      if (currentTime &gt; subtitle.data.current.$timing[0].join('') &amp;&amp; subtitle.getTextContent() === '') {
        subtitle.setTextContent(subtitle.data.current.$textContent);
      }
      // Unset current and set next subtitle when video's currentTime is greater than subtitles end time
      if (currentTime &gt; subtitle.data.current.$timing[1].join('')) {
        subtitle.setTextContent('');
        subtitle.data.index++;
        subtitle.data.current = subtitle.data.next;
        subtitle.data.next = subtitle.data.subtitles[subtitle.data.index];
      }
    },
    /**
     * Splits each of SRT timing strings (HH:MM:SS,fff) into an array like ['00', '00', '00', '000']
     *
     * @param   {time}    - Array of SRT timing strings, eg. 01:44:03,732
     * @returns {array}   - Array of ['hour', 'minute', 'seconds', 'milliseconds']
     */
    splitTimes: time =&gt; time.map(str =&gt; str.split(/[:,]+/)),
    /**
     * Gets the current active subtitle
     *
     * @returns {object}    - Current subtitle
     */
    getCurrentSubtitle: () =&gt; subtitle.data.current,
    getNextSubtitle: () =&gt; subtitle.data.next,
    setNextSubtitle: () =&gt; {
      subtitle.data.index++;
      subtitle.data.current = subtitle.data.next;
      subtitle.data.next = subtitle.data.subtitles[subtitle.data.index];
    },
    recalculate: () =&gt; { // Recalculates which subtitle is current and next
      const i = subtitle.data.subtitles.findIndex(sub =&gt;
        video.getCurrentTime().replace(/[:,]+/g, '') &lt; sub.$timing[0].join('')
      );

      // Update subtitle data
      subtitle.data.index = i;
      subtitle.data.current = subtitle.data.subtitles[i];
      subtitle.data.next = subtitle.data.subtitles[i + 1];
    }
  };

  const video = {
    /**
     * Returns the current playback position in format HH:MM:SS,fff
     *
     * @returns {string}    - Playback position in seconds
     */
    getCurrentTime: () =&gt; {
      const time = HTMLVideoElement.currentTime,
        hours = `${Math.floor(time / 3600)}`.padStart(2, '0'),
        minutes = `${Math.floor(time / 60)}`.padStart(2, '0'),
        seconds = `${Math.floor(time % 60)}`.padStart(2, '0'),
        milliseconds = `${time % 60}`.replace('.', '').substring(2, 5);

      return `${hours}:${minutes}:${seconds},${milliseconds}`;
    },
    playing: () =&gt; subtitle.play(), // When video starts playing or gets unpaused
    seeking: () =&gt; subtitle.recalculate() // When video is set forwards or backwards
  };

  HTMLVideoElement.addEventListener('timeupdate', video.playing);
  HTMLVideoElement.addEventListener('seeking', video.seeking);

  // Initialize the subtitle
  subtitle.load(file);
};

window.addEventListener('DOMContentLoaded', () =&gt; document.getElementById('video').subtitle('/subs/sub.txt'));
</code></pre>

    </div>