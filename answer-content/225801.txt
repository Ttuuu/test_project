<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First I will propose only some simple changes to make the code more readable.<br>
1. add <code>#!/bin/bash</code> as first line then it is guaranteed that bash is used<br>
2. use consistent indentation<br>
3. when you do arithmetic evaluation you don't need the <code>$</code> character to evaluate the variables,<br>
4. use consistent spacing to structure expressions, e.g. <code>(( j=max; j&gt;=i; j-- ))</code><br>
5. instead of <code>expr</code> use <code>$((...))</code><br>
    this is more readable but has <a href="https://unix.stackexchange.com/a/534631/17485">other advantages</a>, too.<br>
6. <code>echo ""</code> hase the same effect as <code>echo</code>, so use the latter, it is more clear<br>
7. <code>echo "Total No. of stars :"    $sum</code> is the same as <code>echo "Total No. of stars : $sum"</code>, but the latter is more clear, so use the latter.<br>
8. Initialize variables. They may be set outside the script to a wrong value.</p>

<pre><code>#!/bin/bash
echo "enter the mininum number of stars"
read min
echo "enter the maximum number of stars"
read max
sum=0
for (( i=min; i&lt;=max; i++ )); do
    for (( j=max; j&gt;=i; j-- )); do
        echo -n " "
        done
    for (( c=1; c&lt;=i; c++ )); do
        echo -n " *"
        sum=$(( sum+1 ))
        done
    echo
    done
d_max=$(( max-1 ))
for (( i=d_max; i&gt;=min; i-- )); do
    for (( j=i; j&lt;=d_max; j++ )); do
        if (( j==d_max )); then
            echo -n " "
            fi
        echo -n " "
        done
    for (( c=1; c&lt;=i; c++ )); do
        echo -n " *"
        sum=$(( sum+1 ))
        done
    echo 
    done
echo "Total No. of stars : $sum"
</code></pre>

<p>This loop is executed d_max-i+1 mal, and d_max-i+2 times " " is printed.</p>

<pre><code>for (( j=i; j&lt;=d_max; j++ )); do
    if (( j==d_max )); then
        echo -n " "
        fi
    echo -n " "
    done
</code></pre>

<p>So use the simpler loop to print d_max-i+2 times " ".</p>

<pre><code>for (( j=i; j&lt;=d_max+1; j++ )); do
    echo -n " "
    done
</code></pre>

<p>Instead of</p>

<pre><code>for (( c=1; c&lt;=i; c++ )); do
    echo -n " *"
    sum=$(( sum+1 ))
    done
</code></pre>

<p>use the simpler</p>

<pre><code>for (( c=1; c&lt;=i; c++ )); do
    echo -n " *"
    done
sum=$(( sum+i ))
</code></pre>

<p>You have 4 times a similar block of code. Is it possible to replace it by a function? Yes!</p>

<pre><code>print_from_to(){
    str=$1
    from=$2
    to=$3
    for (( t=$from; t&lt;=$to; t++ )); do
        echo -n $str
        done
}       
</code></pre>

<p>So we have the following code now</p>

<pre><code>#!/bin/bash

print_from_to(){
    str=$1
    from=$2
    to=$3
    for (( t=$from; t&lt;=$to; t++ )); do
        echo -n $str
        done
}       

echo "enter the mininum number of stars"
read min
echo "enter the maximum number of stars"
read max
sum=0
for (( i=min; i&lt;=max; i++ )); do
    print_from_to " " $i $max
    print_from_to  " *" 1 $i 
    sum=$(( sum+i ))
    echo
    done
d_max=$(( max-1 ))
for (( i=d_max; i&gt;=min; i-- )); do
    print_from_to " " $i $((d_max+1))
    print_from_to " *" 1 $i 
    sum=$(( sum+i ))
    echo 
    done
echo "Total No. of stars : $sum"
</code></pre>

<p>All in all you do a lot of <code>echo</code> commands, I think </p>

<p><span class="math-container">$$2\cdot max\cdot (max-min+1).$$</span></p>

<p>You can simplify your program. Note that for the first half of your lines the next line to be print can be constructed out of the previous line by removing  <code>' '</code> from the beginning and adding <code>' *'</code> at the end.</p>

<pre><code>line=${line# }   # remove leading blank
line="$line *"   # add blank and asterisk at the end
</code></pre>

<p>The second half of the lines can be constructed by adding a <code>' '</code> at the beginning and removing <code>' *'</code> from the end. </p>

<pre><code>line=" $line"     # add blank at the beginning
line=${line% *}   # remove trailing blank and asterisk 
</code></pre>
    </div>