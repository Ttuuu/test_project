<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The only way of making an odd total is with a five euro bill.  There is no point ever having more than 1 five euro bill, as you could replace pairs with a ten euro bill.  So, you should start off checking for the odd total.</p>

<pre><code>if (change &gt;= 5  &amp;&amp;  change % 2 == 1) {
    c.bill5 = 1;
    change -= 5;
}
</code></pre>

<p>At this point, you can simply compute the number of ten euro bills, and remaining 2 euro coins.</p>

<pre><code>c.bill10 = change / 10;
change = change % 10;

c.coin2 = change / 2;
</code></pre>

<p>The only thing you have to watch out for is a total change amount of 1 or 3 euros (or negative), which is not possible to make.  Handle those as a special case.</p>

<hr>

<p>Your <code>optimalChange()</code> creates a change object, and if <code>dealWithChangeLike31Euros()</code> methods is called, it creates its own <code>Change</code> object, and the first object is abandoned.  You shouldn't create the object if it isn't going to be used.  Options include passing the change object to the <code>dealWithChangeLike31Euros()</code> method, or delaying the creation.</p>

<p>Multiple return points is sometimes a code smell.  <code>optimalChange()</code> has 3:</p>

<ul>
<li><code>return dealWithChangeLike31Euros(change);</code></li>
<li><code>return null;</code></li>
<li><code>return c;</code></li>
</ul>

<p>If you initialized <code>Change c = null;</code>, and only created the <code>Change</code> object when needed, you could have just the one <code>return c;</code> at the end.  Less returns may reduce the complexity.</p>
    </div>