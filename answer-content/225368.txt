<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few items as I look through the code:</p>

<p>Use <code>Option Explicit</code>. Always. Every time. Every module. No exception.</p>

<p>When I added <code>Option Explicit</code> (well, OK, I have it set to always add it), your code won't compile because you are using undeclared variables. Without it, VBA "helpfully" declares any new variable name you type as a <code>Variant</code>. <code>Variant</code>s have use, but they're slow and 99% of the time you don't need to use a variant, and your code is more readable and will be faster since VBA won't have to figure out what type of data the variable <em>currently</em> contains then convert it to what it <em>thinks</em> you need at this point. </p>

<p>Oh, VBA will also "helpfully" create 2 variables for when you use <code>KeePass = "KeePass"</code> in one place and <code>If KeepPass &lt;&gt; vbNullString</code> somewhere else, creating very difficult to track down bugs.</p>

<p>You <s>can</s> should have the VBE automatically insert <code>Option Explicit</code> for you in <em>every</em> code module by going to 'Tools | Options' then on the <code>Editor</code> tab check the <code>Require Variable Declaration</code> checkbox. <strong>Highly recommended.</strong></p>

<p><em>Always</em>. <strong>Every time</strong>.</p>

<hr>

<pre><code>Dim oFS As Object
</code></pre>

<p>Drop the Hungarian Notation. You use it inconsistently, so it's not egregious and overly offensive, but you, along with about 99.9% of other programmers use it inappropriately. <a href="https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/" rel="nofollow noreferrer">Read this</a> on why HN, as most people use it, is bad form. There's absolutely nothing wrong with it when used properly.</p>

<p>Additionally, there's no need to late bind <code>oFS</code> by declaring it as <code>Object</code> now, then later</p>

<pre><code>Set oFS = CreateObject("Scripting.FileSystemObject")
</code></pre>

<p><em>unless</em>, you expect there's the possibility that some machines your code may run on won't have the <code>Scripting</code> DLL installed and you've got error handling around it to catch that situation. Considering that every version of Windows since... Win95? (maybe earlier) has the <code>Scripting</code> DLL installed by default, it's highly unlikely you'll run into this situation.</p>

<p>An additional benefit of declaring it properly (<code>Dim fileSystem as Scripting.FileSystemObject</code>) is that you get Intellisense helping you at coding time, ensuring you're typing function names properly, minimizing typing (thanks auto-complete!), and getting parameter list prompts. <strong>Note:</strong> to early bind this, you'll have to add a reference <code>Tools | References</code> to <code>Microsoft Scripting Runtime</code>, but it's worth the few moments to make the one-time change to your project.</p>

<p>Another specific advantage for your code, as <a href="https://codereview.stackexchange.com/questions/225344/exvcel-vba-code-that-copies-data-from-one-sheet-to-another#comment437517_225344">PeterT mentioned</a> is that you only declare it once and don't have to create and destroy the object 7 times.</p>

<hr>

<pre><code>Do While Len(StrFile) &gt; 0
</code></pre>

<p>the <code>Dir()</code> function returns <code>""</code> if it doesn't find a matching file name or when it's exhausted the list of matching files. In VBA land, <code>""</code> is the same as <code>vbNullString</code>, so lets use that to avoid the <code>Len()</code> function call to speed up your processing by just a smidge more.</p>

<hr>

<pre><code>Dim x, y, o, p, u, j, k, s As Workbook
</code></pre>

<p>Gives you 7 <code>variant</code> variables and one <code>Workbook</code> variable (<code>s</code>). These all seem to be assigned the result of a <code>Workbook.Open()</code> statement, so declaring them all as <code>Workbook</code> will a) make that more obvious, and b) eliminate the constant implicit conversion from <code>Variant</code> to <code>Workbook</code>.</p>

<p>While you're at it, give them some sort of meaningful names. Since you didn't pick 8 consecutive letters, they must mean something to you, make it easier on future you and anyone else who may have to look at your code and change those single letters to something helpful. You get 256 characters in a variable name, and with Intellisense helping, you won't ever have to type the whole variable name (once it's been <code>Dim</code>med, that is).</p>

<hr>

<pre><code>'Source Files location
my_path = "C:\Users\xxxxx"
</code></pre>

<p>As written, that doesn't have a trailing <code>\</code>, so when you <code>Dir(my_path &amp; file_name)</code>, you'll get <code>"c:\users\xxxxxfilename*.xlsx"</code> which probably won't be found. This may simply be a copy/pasta/privacy/obsfucation error in your post, so it's probably a minor issue. You may consider writing a small function to ensure a path (passed to the function as a parameter) has a trailing slash, just to be sure.</p>

<hr>

<pre><code>If DateSerial(Year(current), Month(current), Day(current)) &gt;= _
DateSerial(Year(newest), Month(newest), Day(newest)) _
And Right(StrFile, 6) &lt;&gt; "*.xlsm" Then
    newest = oFS.GetFile(my_path &amp; StrFile).DateCreated
    right_file = my_path &amp; StrFile
End If
</code></pre>

<p>Is rather difficult to read because of that first line continuation. Maybe it's a matter of style and preference, but if you put one complete condition on one line, it's much easier to mentally parse. No, the compiler doesn't care, so make it easier on the person reading it. If the line is too long for your liking, declare a couple of temporary variables to hold your dates. Maybe something like this:</p>

<pre><code>Dim currentYear as Date
currentDate = DateSerial(Year(current), Month(current), Day(current))
Dim newestDate as Date
newestDate = DateSerial(Year(newest), Month(newest), Day(newest))
If  currentDate &gt;= newestDate _
And Right(StrFile, 6) &lt;&gt; "*.xlsm" Then
    newest = oFS.GetFile(my_path &amp; StrFile).DateCreated
    right_file = my_path &amp; StrFile
End If
</code></pre>

<p><strong>However</strong>, even <em>that</em> is way overkill! <code>oFS.GetFile(my_path &amp; StrFile).DateCreated</code> kindly returns a <code>Date</code> which you're storing in either <code>newest</code> or <code>current</code>, so the first part of that <code>If</code> statement can read:</p>

<pre><code>If current &gt;= newest _
And ...
</code></pre>

<p>and simply be done with it. As you can see, though, it's now even less clear that <code>current</code> and <code>newest</code> are actually file dates, so you may want to consider renaming those to something a bit more meaningful and descriptive.</p>

<p>In that same <code>If</code> statement, there's a second condition</p>

<pre><code>And Right(StrFile, 6) &lt;&gt; "*.xlsm" Then
</code></pre>

<p>If you look back up the code a bit, you'll notice</p>

<pre><code>file_name = "filename*.xlsx"
StrFile = Dir(my_path &amp; file_name)
</code></pre>

<p>See that <code>*.xlsx"</code> part of <code>file_name</code>? Yeah, you'll never get a <code>*.xlsm</code> file being returned by <code>Dir()</code> so this bit of the check is totally unnecessary. (NB: if you find that you <em>are</em> getting <code>*.xlsm</code> files when passing that file name mask to <code>Dir()</code> <em>please</em> file a bug report with Microsoft to save the rest of us from hitting this, too!)</p>

<p>While we're there, <code>file_name</code> is a poor choice for a variable name because of the <code>_</code>. VBA uses underscores in events and interfaces and it will create problems when implementing classes. It doesn't appear that this code is in a class, but if/when you do start writing classes, this will create problems for you, so it's probably best to get out of the habit of using them in the first place. </p>

<p>Assuming we meet the conditions of the <code>If</code> statement, we drop into the <code>TRUE</code> clause (for lack of a better term).</p>

<pre><code>newest = oFS.GetFile(my_path &amp; StrFile).DateCreated
</code></pre>

<p>You're now hitting the OS again to get the <code>.DateCreated</code>, but you've already got it stored in <code>current</code>. It would be much faster to do</p>

<pre><code>newest = current
</code></pre>

<p>and be done with it.</p>

<p>Then there's </p>

<pre><code>right_file = my_path &amp; StrFile
</code></pre>

<p>Again, we've got an underscore, but why <code>"Right"file</code>? What makes it "right"? How 'bout something like <code>mostCurrentSourceFileName</code>. Sure it's longer, but with Intellisense, you'll only have to type it once and there will be no question about <em>why</em> it's the right file!</p>

<pre><code>rot_cnt = rot_cnt + 1
</code></pre>

<p>OK, you're keeping track of whether you're testing the first file or not, but <code>rot_cnt</code> doesn't really tell me that. How 'bout </p>

<pre><code>Dim firstFile As Boolean
</code></pre>

<p>and set <code>firstFile = True</code> before you start the loop, then unconditionally set <code>firstFile = False</code> within the loop. Now you know exactly what conditions you're looking for a few lines back where you're evaluating <code>rot_cnt</code>.</p>

<p>Finally, we get to:</p>

<pre><code>Set oFS = Nothing
</code></pre>

<p>Frankly, since this is <em>within</em> the <code>Do...Loop</code> and you're recreating the object at the top of the loop, I'm not really certain <em>how</em> you're getting the newest file each time. <code>Dir</code> is known for giving you files back in a somewhat random order, but once it's been initialized with <code>Dir(path &amp; filemask)</code> I believe it's pretty much guaranteed to give you every file matching the mask. Since you're killing the instance of the <code>FSO</code> that holds <code>Dir</code>s current pointer there's no telling what you're going to get each time through. That <em>has</em> to come out of the loop.</p>

<p>Put all those changes together and that little bit of code ends up looking something like this:</p>

<pre><code>Const SOURCE_PATH As String = "c:\users\xxxx\"

Dim firstFile As Boolean
firstFile = False
Dim FSO As Scripting.FileSystemObject
Set FSO = New Scripting.FileSystemObject
Dim fileMask As String
fileMask = "Filename*.xlsx"

Dim currentFileName As String
currentFileName = Dir(SOURCE_PATH &amp; currentFileName)
Do While currentFileName &lt;&gt; vbNullString
  If firstFile Then
    newest = FSO.GetFile(SOURCE_PATH &amp; currentFileName).DateCreated
    current = newest
    firstFile = False
    Dim mostCurrentSourceFileName As String
    mostCurrentSourceFileName = currentFileName
  Else
    current = FSO.GetFile(SOURCE_PATH &amp; currentFileName).DateCreated
  End If

  If current &gt; newest Then
    mostCurrentSourceFileName = currentFileName
    newest = current
  End If

  currentFileName = Dir
Loop
Set x = Workbooks.Open(SOURCE_PATH &amp; mostCurrentSourceFileName)
</code></pre>

<p><em>Yes, yes, there's an underscore in <code>SOURCE_PATH</code>, but someone, somewhere deemed it appropriate and conventional to shoutcase constant names and separate the words with <code>_</code>, so who am I to buck convention? Besides, as a <code>Const</code>, there won't be any issues with that being confused with an event handler, so that problem goes away.</em></p>

<hr>

<p>Now that you've got that little bit of code cleaned up, you can copy/paste that yourself 8 times and change the variable names so that you aren't overwriting things. Oh, wait. That's a royal PITA, so make a <code>Function</code> out of it and call it 8 times! Something like this</p>

<pre><code>Private Function GetNewestSourceFileFullName(ByVal fileMask As String) As String

    Const SOURCE_PATH As String = "c:\users\xxxx\"

    Dim firstFile As Boolean
    firstFile = False
    Dim FSO As Scripting.FileSystemObject
    Set FSO = New Scripting.FileSystemObject

    Dim currentFileName As String
    currentFileName = Dir(SOURCE_PATH &amp; currentFileName)
    Do While currentFileName &lt;&gt; vbNullString
      If firstFile Then
        newest = FSO.GetFile(SOURCE_PATH &amp; currentFileName).DateCreated
        current = newest
        firstFile = False
        Dim mostCurrentSourceFileName As String
        mostCurrentSourceFileName = currentFileName
      Else
        current = FSO.GetFile(SOURCE_PATH &amp; currentFileName).DateCreated
      End If

      If current &gt; newest Then
        mostCurrentSourceFileName = currentFileName
        newest = current
      End If

      currentFileName = Dir
    Loop

    GetNewestSourceFileFullName = SOURCE_PATH &amp; mostCurrentSourceFileName

End Function
</code></pre>

<hr>

<p>Now, it's a simple matter of </p>

<pre><code>Set x = Workbooks.Open(GetNewestSourceFileFullName("filename*.xlsx"))
Set o = Workbooks.Open(GetNewestSourceFileFullName("file_name1*.xlsx"))
Set p = Workbooks.Open(GetNewestSourceFileFullName("file_name2*.xlsx"))
</code></pre>

<p>etc...</p>

<p>Now, if you ever need to change/fix the logic in <code>GetNewestSourceFileFullName</code>, you can do it once and not 8 times. </p>

<p>Oh, wait, I guess you only have to do it 4 times for <code>x</code>, <code>o</code>, <code>p</code>, and <code>j</code>. After reading through nearly 3/4 of the code, I finally discovered that <em>those</em> are the 4 <em>source</em> files. <em>Did I mention that some better naming would help a lot?</em></p>

<hr>

<p>I'm not sure what the <code>Application.Wait()</code>s are for, but if it floats your boat, they only add 6 seconds to the processing time.</p>

<p>Also, I'm not sure why you do the <code>win.WindoState = xlMinimized</code>, but again, if it floats your boat, go for it.</p>

<hr>

<p>Hey, guess what! I just discovered that <code>Workbooks</code> object <code>x</code> is "2G Voice" data. I think I have a great new name for <code>x</code> and <code>y</code>:</p>

<pre><code>Dim source2gVoice as Workbook
Dim destination2gVoice as Workbook
</code></pre>

<p>thanks to making the <code>Function</code>, we only need to change <code>x</code> to <code>source2gVoice</code> in <em>one</em> place - where we assigned the workbook!</p>

<hr>

<p>I'm not a huge fan of the <code>range.copy</code>/<code>range.paste</code> methods of copying cells, but in this case where there are some unknown number of rows to be copied, this may well be the best way to do it.</p>

<p>I'm not certain what you're getting out of specifying <code>.PasteSpecial</code>, but that may be slowing down the copy. The default value for <code>.PasteSpecial</code> (which is what you're getting by <em>not</em> specifying a parameter to the method call) is <code>xlPasteAll</code> which is going to get you values and formatting and everything. If that's what you need, then carry on. If all you want is values then you need to specify <code>xlPasteValues</code>. Rummage through the Intellisense list of available options to make sure you're not pasting anything more than you need.</p>
    </div>