<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Good job!</h1>
<ul>
<li>I like the use of <code>classmethod</code>s to allow different constructors.</li>
<li>You have typed a significant amount of the code.</li>
<li>You have a nice amount of documentation.</li>
<li>You have input validation on most of your functions.</li>
</ul>
<h1>Improvements</h1>
<p>Most of these can be seen as nitpicks or alternate perspectives.
Your code is pretty good.
Nice job!</p>
<ul>
<li><p>Whilst your code is almost fully statically typed, you're not quite there for mypy in strict mode.
Since mypy's main goal is to help convert people from untyped code to typed code many of the checks don't run by default.
This is because it'd be demoralizing fixing hundreds or thousands of issues just to get mypy to not complain.</p>
<ul>
<li><p>You've not defined a return type for <code>generate_codes</code>, <code>eprint</code>, <code>main</code> and many double-under (dunder) methods.</p>
</li>
<li><p>You're relying on mypy to automatically apply <a href="https://docs.python.org/3/library/typing.html#typing.Optional" rel="nofollow noreferrer"><code>Optional</code></a>.</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>def __init__(self, char: str = None, weight: int = None, left: 'Huffman' = None, right: 'Huffman' = None):
</code></pre>
</blockquote>
</li>
<li><p>You should use <code>typing.Tuple</code> rather than "<code>('Huffman', int)</code>" to specify returning a tuple.
Since we can <a href="https://stackoverflow.com/a/62033243/2044866">just use <code>tuple</code> in Python 3.9</a> I'll be using that in the below code.</p>
</li>
</ul>
</li>
<li><p>If you're running Python 3.7+ then we can remove the need to use "<code>'Huffman'</code>" by <a href="https://www.python.org/dev/peps/pep-0563/" rel="nofollow noreferrer">postponing evaluation of annotations</a>. We can do that by importing <code>annotations</code> from <a href="https://docs.python.org/3/library/__future__.html" rel="nofollow noreferrer"><code>__future__</code></a>.</p>
</li>
<li><p>I would split the tree and the Huffman interface into two separate classes.
To store the tree you can just define a simple <code>Node</code> class:</p>
<pre class="lang-py prettyprint-override"><code>@dataclasses.dataclass
class Node:
    weight: int
    char: Optional[str] = None
    left: "Optional[Node]" = None
    right: "Optional[Node]" = None
</code></pre>
</li>
<li><p><code>generate_codes</code> is nice, it's roughly how I'd do it.<br>
However I'd define it on <code>Node</code> and make it work the same way that <code>items()</code> does on dictionaries.</p>
<p>This gives users a familiar interface and doesn't give them a full blown dictionary.
Which they can make if needed.</p>
<pre class="lang-py prettyprint-override"><code>class Node:
    ...

    def items(self):
        yield from self._items('')

    def _items(self, path):
        if self.char is not None:
            yield path, self.char
        else:
            yield from self.left._items(path + '0')
            yield from self.right._items(path + '1')
</code></pre>
</li>
<li><p>We can change <code>from_counter</code> to use <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer"><code>heapq</code></a> so we don't need to call <code>.sort()</code> all the time.</p>
<p>By adding the <code>__lt__</code> dunder to <code>Node</code> we can just enter <code>Node</code>s into the heap and it'll play ball.</p>
<pre class="lang-py prettyprint-override"><code>heap = []
for char, weight in collections.Counter(text).items():
    heapq.heappush(heap, Node(weight, char))
while 1 &lt; len(heap):
    right = heapq.heappop(heap)
    left = heapq.heappop(heap)
    node = Node(left.weight + right.weight, None, left, right)
    heapq.heappush(heap, node)
root = heap[0]
</code></pre>
</li>
<li><p>The function <code>decode_from_string</code> is pretty good.
I'm not a fan of the premature optimization "<code>decoded = node.char * len(data)</code>".</p>
<p>The way I'd do it includes abusing <code>__getitem__</code> and iterators to consume the text whilst getting the values.
I think your way is much easier to read and understand.
However I will include it below so you can see this magic.</p>
</li>
<li><p>I don't think the user should call <code>generate_codes</code>.
If this is needed you should build it, and cache it to <code>self._codes</code>.</p>
<p>This just removes an unneeded step for the user of your class.</p>
</li>
<li><p>I think <code>from_bytes</code> is smart and cool. Nice!</p>
</li>
<li><p>I'm not a fan of <code>as_binary</code> as all those string concatenations could get expensive.
Assuming CPython isn't nice and makes string concatenation run in <span class="math-container">\$O(1)\$</span> time.</p>
<p>To not rely on this I'd change to using a private generator function that you then just call <code>''.join</code> on in the public one. (Like <code>items</code> above.)</p>
</li>
<li><p>I'm not a fan of how you define most of your exceptions.
Having a default message kinda makes sense.
However it makes your exceptions function differently to Python's exceptions where you have to provide the message.</p>
<p>If this is because you want to DRY the messages then you can move them into a global constant.</p>
</li>
</ul>
<p>Again your code is pretty good.
Here is the, really hacky, solution I came up with when trying to learn how <code>Huffman</code> works.</p>
<pre class="lang-py prettyprint-override"><code>from __future__ import annotations

import collections
import dataclasses
import heapq
from collections.abc import Iterator
from pprint import pprint
from typing import Optional


@dataclasses.dataclass
class Node:
    weight: int
    char: Optional[str] = None
    left: Optional[Node] = None
    right: Optional[Node] = None

    def __lt__(self, other: Node) -&gt; bool:
        return self.weight &lt; other.weight

    def __getitem__(self, key: str) -&gt; str:
        if self.char is not None:
            return self.char
        key = iter(key)
        if next(key) == '0':
            return self.left[key]
        else:
            return self.right[key]

    def items(self) -&gt; Iterator[tuple[str, str]]:
        yield from self._items('')

    def _items(self, path) -&gt; Iterator[tuple[str, str]]:
        if self.char is not None:
            yield path, self.char
        else:
            yield from self.left._items(path + '0')
            yield from self.right._items(path + '1')


class Huffman:
    _tree: Node
    _graph: dict[str, str]

    def __init__(self, tree: Node) -&gt; None:
        self._tree = tree
        self._graph = None

    @classmethod
    def from_text(cls, text: str) -&gt; Huffman:
        heap = []
        for char, weight in collections.Counter(text).items():
            heapq.heappush(heap, Node(weight, char))
        while 1 &lt; len(heap):
            right = heapq.heappop(heap)
            left = heapq.heappop(heap)
            node = Node(
                weight=left.weight + right.weight,
                left=left,
                right=right,
            )
            heapq.heappush(heap, node)
        return cls(heap[0])

    def encode(self, text: str) -&gt; str:
        graph = self._graph
        if graph is None:
            self._graph = graph = {c: p for p, c in self._tree.items()}
        return ''.join(
            graph[letter]
            for letter in text
        )

    def decode(self, text: str) -&gt; str:
        return ''.join(self._decode(iter(text)))

    def _decode(self, text: Iterator[str]) -&gt; Iterator[str]:
        try:
            while True:
                yield self._tree[text]
        except StopIteration:
            pass


if __name__ == '__main__':
    text = 'abcdeaba'
    huff = Huffman.from_text(text)
    encoded = huff.encode(text)
    print(encoded)
    print(huff.decode(encoded))
</code></pre>
    </div>