<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In fact you have keys:</p>

<pre><code>String[] keys = { "ABCD", "EFGH", "1234", ... };
</code></pre>

<p>And you want to throw an exception when one of them is <em>not</em> found.
That is hard in regex. Easier would be to form <code>"(ABCD|EFGH|1234|...)"</code> and check having handled all (once) by keeping a Set.</p>

<p>Furthermore you want a regular expression, maybe for <code>"(?m)^ABCD\s+..."</code>, that is MULTILINE (or embedded <code>(?m)</code>), where <code>^</code> means begin-of-line.</p>

<pre><code>for (String key : keys) {
    String format = String.format(SEARCH_PATTERN, "\\Q" + key + "\\E");
    if (!output.matches("(?ms).*" + format + ".*")) {
        throw new IllegalArgumentException("Missing key: " + key);
    }
}
</code></pre>

<p><code>String.matches</code> unfortunately considers the entire string, hence for a <em>find</em> pattern, that pattern must be added <code>.*</code> at both sides.</p>

<ul>
<li><code>(?m)</code> for multiline (<code>^</code> and <code>$</code> line based)</li>
<li><code>(?s)</code> for single-dot (<code>.</code> can also be a newline character)</li>
<li><code>\Q</code>...<code>\E</code> is quoted text without regex operators: <code>.</code> just meaning period.</li>
</ul>

<p>Streams might exploit parallelism with many keys. However as not finding (the early stop criterion) is the longest thread, that might merely be faster by a factor of the number of used threads.</p>
    </div>