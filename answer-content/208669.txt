<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>combinations(â€¦, 3)</code> loop makes your algorithm O(<em>N</em><sup>3</sup>).</p>

<p>It's easy to improve it to be O(<em>N</em><sup>2</sup>).  The question is, essentially: for every pair of entries, how many occurrences of their product are in the list?  So, make an <code>indexes</code> data structure to help you find, in O(1) time, where the product might be located.</p>

<pre><code>from collections import defaultdict
from itertools import combinations

a = [int(ai) for ai in input('Input: ').split()]

indexes = defaultdict(set)
for i, ai in enumerate(a):
    indexes[ai].add(i)

triplets = set()
for x, y in combinations(range(len(a)), 2):
    for z in indexes[a[x] * a[y]].difference([x, y]):
        triplets.add(tuple(sorted((x, y, z))))

print(len(triplets))
</code></pre>

<p>Here, I've chosen to stick closer to the notation used in the challenge itself, with <code>a</code> being the list, and <code>x</code>, <code>y</code>, <code>z</code> as the indexes of entries (but 0-based rather than 1-based).</p>
    </div>