<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Functions &amp; code organisation</strong></p>

<p>At the moment, your code is basically split into 3 parts:</p>

<ul>
<li>getting the input from the user</li>
<li>generating a triangle</li>
<li>printing a triangle</li>
</ul>

<p>Things would be easier to understand/test/reuse if we could split them into 3 logical parts. Functions could be a good way to do things here.</p>

<p>Also, it could be a good occasion to use the <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> trick</a> to split function definitions from the code using it and performing Input/Output.</p>

<pre><code>def generate_pascal(n):
    ...
    return a

def print_pascal(a):
    ...

if __name__ == "__main__":
    n = int(input("Enter number of rows: "))
    p = generate_pascal(n)
    print_pascal(p)
</code></pre>

<hr>

<p><strong>Simplifying <code>print_pascal</code></strong></p>

<p>You can define <code>end</code> and <code>sep</code> as parameters to <code>print_pascal</code>.</p>

<p><strong>Loop like a native</strong>: I highly recommend <a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">Ned Batchelder's excellent talk called "Loop like a native"</a>. You usually do not need to write loops based on the length of the list you are working on, you can just iterate over it.</p>

<p>In our case, this leads to the following code:</p>

<pre><code>def print_pascal(a, end = " ", sep = " "):
    n = len(a)
    for i, line in enumerate(a):
        print("   " * (n - i), end = end, sep = sep)
        for e in line:
            print('{0:5}'.format(e), end = sep, sep = sep)
        print()
</code></pre>

<p>Note: This hilight an issue with the structure provided to the printing procedure as the first line contains 2 numbers.</p>

<hr>

<p><strong>Simplifying <code>generate_pascal</code></strong></p>

<p>In <code>generate_pascal</code>, you add a list to a there refer to that list using <code>a[i]</code>.</p>

<p>It would be clearer and more efficient to just define a new list that you fill and then eventually add to a.</p>

<p>We get:</p>

<pre><code>def generate_pascal(n):
    a = []
    for i in range(n):
        line = []
        line.append(1)
        for j in range(1, i):
            line.append(a[i - 1][j - 1] + a[i - 1][j])
        if (n != 0):
            line.append(1)
        a.append(line)
    return a
</code></pre>

<p><strong>Fixing a bug in <code>generate_pascal</code></strong></p>

<p>The issue hilighted previously can probably be fixed by replacing <code>if (n != 0)</code> with <code>if (i != 0)</code> which is more usually written without the superfluous parenthesis: <code>if i != 0</code> or even <code>if i</code>.</p>

<p>More generally, this <code>if</code> could be applied to most of the logic in the loop:</p>

<pre><code>def generate_pascal(n):
    a = []
    for i in range(n):
        line = []
        line.append(1)
        if i:
            for j in range(1, i):
                line.append(a[i - 1][j - 1] + a[i - 1][j])
            line.append(1)
        a.append(line)
    return a
</code></pre>

<p>Now, we can take this chance to access <code>a[i - 1]</code> via a variable with a proper name for instance <code>prev_line</code>. Also, The conventional way to access the latest element from an array is to use the <code>-1</code> index. We could write:</p>

<pre><code>        prev_line = a[-1]
        for j in range(1, i):
            line.append(prev_line[j - 1] + prev_line[j])
</code></pre>

<hr>

<p>This this stage, the full code looks like:</p>

<pre><code>def generate_pascal(n):
    p = []
    for i in range(n):
        line = [1]
        if i:
            prev_line = p[-1]
            for j in range(1, i):
                line.append(prev_line[j - 1] + prev_line[j])
            line.append(1)
        p.append(line)
    return p

def print_pascal(p, end = " ", sep = " "):
    n = len(p)
    for i, line in enumerate(p):
        print("   " * (n - i), end = end, sep = sep)
        for e in line:
            print('{0:5}'.format(e), end = sep, sep = sep)
        print()

if __name__ == "__main__":
    n = int(input("Enter number of rows: "))
    p = generate_pascal(n)
    print_pascal(p)


</code></pre>
    </div>