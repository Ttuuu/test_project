<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A first simple clean up could be made here:</p>

<blockquote>
<pre><code>       | 1 -&gt;
            let a = ops.[ops.[i+1]]
            let b = ops.[ops.[i+2]]
            ops.[ops.[i+3]] &lt;- a + b
            i &lt;- i + 4
        | 2 -&gt;
            let a = ops.[ops.[i+1]]
            let b = ops.[ops.[i+2]]
            ops.[ops.[i+3]] &lt;- a * b
            i &lt;- i + 4
</code></pre>
</blockquote>

<p>The two entries are equal except from the operators (<code>+</code> and <code>*</code>). So you could define a function that takes an operator as argument and return the next <code>i</code>:</p>

<pre><code>let operation i oper (ops: int[]) = 
    let a = ops.[ops.[i+1]]
    let b = ops.[ops.[i+2]]
    ops.[ops.[i+3]] &lt;- oper a b
    i + 4
</code></pre>

<p>This will clean up the main loop to:</p>

<pre><code>let run (ops:int[]) = 
    let mutable i = 0
    while i &lt; ops.Length do
        match ops.[i] with
            | 1 -&gt; i &lt;- operation i (+) ops
            | 2 -&gt; i &lt;- operation i (*) ops
            | 99 -&gt; i &lt;- ops.Length
            | _ -&gt; printfn "doh %A" i
    ops
</code></pre>

<hr>

<p>The answer in F# to loops updating mutable variables is often (if not always) recursion (optimally with <a href="https://en.wikipedia.org/wiki/Tail_call" rel="nofollow noreferrer">tail calls</a>). Changing your <code>run</code> function to use recursion could be like this:</p>

<pre><code>let run (ops:int[]) = 

    let rec runner i =
        match ops.[i] with
        | 1 -&gt; runner (operation i (+) ops)
        | 2 -&gt; runner (operation i (*) ops)
        | 99 -&gt; ops
        | _ -&gt; failwith (sprintf "Invalid value at index %d" i)

    runner 0
</code></pre>
    </div>