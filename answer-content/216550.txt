<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The line to scrub punctuation and spaces could be simplified from:</p>

<pre><code>str = str.replace(/[^\w\s]|_/g, "").toLowerCase().split(" ").join("");
</code></pre>

<p>to:</p>

<pre><code>str = str.replace(/[^\w]|_/g, "").toLowerCase();
</code></pre>

<p>Essentially, your original regex marks spaces as legal characters, which you're then going and later scrubbing out with <code>.split(" ").join("")</code>.  By excluding the <code>\s</code> in your regex, you cause the regex to match spaces in the string, which would then be replaced along with the punctuation in the <code>str.replace</code> method.  See this <a href="https://regex101.com/r/mjy969/4" rel="nofollow noreferrer">regex101</a>.</p>

<p>I'd also ask you to consider what it means to be a palindrome.  Words like <code>racecar</code>.  The way you're currently doing it is by reversing the string, and then checking equality.  I suggest it could be half (worst case) or O(1) (best case) the complexity if you'd think about how you could check the front and the back of the string at the same time.  I won't give you the code how to do this, but I'll outline the algorithm. Consider the word <code>Urithiru</code>, a faster way to check palindrome-ness would to be doing something like this:</p>

<p>Take the first and last letters, compare them, if true, then grab the next in sequence (next from the start; next from reverse). Essentially the program would evaluate it in these steps:</p>

<ol>
<li><code>u</code> == <code>u</code>: true</li>
<li><code>r</code> == <code>r</code>: true</li>
<li><code>i</code> == <code>i</code>: true</li>
<li><code>t</code> == <code>h</code>: false</li>
</ol>

<p>Words like <code>Urithiru</code> and palindromes have the worst complexity cases for the algorithm because every letter must be checked to prove it's a palidrome. However, if you checked a work like <code>supercalifragilisticexpialidocious</code>, it'd only take two iterations, and then most words in the English language (the ones that don't start and end with the same letters), would be an O(1) result.  For instance, <code>English</code> would fail after the first comparison.</p>
    </div>