<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The question seems to be related to <a href="https://en.wikipedia.org/wiki/Prime_gap" rel="nofollow noreferrer">prime gaps</a>.</p>

<p>Some observations:</p>

<ol>
<li><p>Since we are trying to find the smallest number formed with some length operations, that means it is the first number formed with that length operations if we start our search from 1.</p></li>
<li><p>For the number 6, the biggest prime power less than 6 is 5 i.e. 6-5 = 1 </p>

<p>For the number 95, the biggest prime power less than 95 is 89 i.e. 95-89 = 6</p>

<p>For the number 360748, the biggest prime power less than 360748 is 360653 i.e. 360748-360653=95.</p></li>
</ol>

<p>This shows that for the next number that will be formed using 5 length operations, the gap between that number and biggest prime power less that number must be 360748. The problem is simplified to finding the smallest number with has a prime power gap of 360748 and so on.</p>

<hr>

<p>Now consider the list of prime numbers and list of prime power numbers. It is obvious that prime power numbers are more frequent that prime numbers. So it is safe to assume that the <em>gaps between prime power numbers will be less than gaps between prime numbers</em>.</p>

<p>Straight from Wikipedia article <a href="https://en.wikipedia.org/wiki/Prime_gap" rel="nofollow noreferrer">prime gaps</a>,</p>

<blockquote>
  <p>As of August 2018 the largest known maximal prime gap has length 1550, found by Bertil Nyman. It is the 80th maximal gap, and it occurs after the prime 18361375334787046697.</p>
</blockquote>

<p>From <a href="https://mathoverflow.net/a/41222">this post</a>, we can make a reasonable estimate for the prime number with gap 360748 i.e. <code>exp(sqrt(360748)) ~ 7*10^260</code>. (There are better estimations available in literature). </p>

<p>Too big and not suitable for our Personal Computers. In general sieves are faster than checking primes directly. It is easy to make a sieve for prime power numbers, however it is impractical for current problem. To make a boolean array of length 10^260, we will need around 10^247 TeraByte.</p>

<p>Even if we somehow manage to determine the result for length 5, for the next number in sequence, it should have a prime power gap of 10^260. We will probably have to wait for Personal Quantum computers for that.</p>

<hr>

<p><strong>EDIT</strong>: Following is the code to generate a prime power sieve.</p>

<pre class="lang-py prettyprint-override"><code>def prime_power_sieve(limit):
    sieve = [1]*limit
    sieve[0] = 0
    p = 2
    while p&lt;limit:
        if sieve[p]&gt;0:
            # mark multiples of p
            for j in range(p*p, limit, p):
                sieve[j] = 0
            # mark powers of p
            j = p
            while j*p&lt;limit :
                j *= p
                sieve[j] = 1 
        p += 1
    return sieve
</code></pre>

<p>To find largest prime power lower than or equal to that number, we can apply a simple modification by tracking the previously encountered prime power.</p>

<pre class="lang-py prettyprint-override"><code>def prime_power_sieve_with_previous(limit):
    sieve = list(range(0,limit))
    p = 2
    prev = p
    while p&lt;limit:
        if sieve[p]&gt;0:
            prev = p
            # mark multiples of p
            for j in range(p*p, limit, p):
                sieve[j] = 0
            # mark powers of p
            j = p
            while j*p&lt;limit :
                j *= p
                sieve[j] = j
        elif sieve[p] == 0:
            sieve[p] = prev
        p += 1
    return sieve
</code></pre>

<p>With this, largest prime power less than or equal to <code>p</code> will be <code>sieve[p]</code>.</p>

<pre><code>print(prime_power_sieve(20))
print(prime_power_sieve_with_previous(20))

Output:
[0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1]
[0, 1, 2, 3, 4, 5, 5, 7, 8, 9, 9, 11, 11, 13, 13, 13, 16, 17, 17, 19]

</code></pre>
    </div>