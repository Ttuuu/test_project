<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, the <strong>big bug.</strong>  Your <code>Widget</code> class has no virtual destructor! This means that every time you return a <code>unique_ptr&lt;Widget&gt;</code>, you're losing the information about what <em>kind</em> of widget needs destroying.</p>

<p><a href="https://godbolt.org/z/cuDgyB" rel="noreferrer">Clang will actually diagnose this mistake for you.</a> No matter what compiler you use, make sure you turn on warnings via <code>-Wall -Wextra</code> (or <code>-W4</code> on MSVC).</p>

<hr>

<pre><code>int _tmain(int argc, _TCHAR* argv[])
</code></pre>

<p>This is a non-standard main routine. Maybe I'm a POSIX chauvinist, but at least for posting publicly, I'd think it would be more appropriate to use</p>

<pre><code>int main(int, char **)
</code></pre>

<p>or even better,</p>

<pre><code>int main()
</code></pre>

<p>(since you don't use either of those parameters for anything).</p>

<p>Also notice that I'm using <code>char**</code> instead of <code>char*[]</code>, because in C and C++, <a href="https://lkml.org/lkml/2015/9/3/428" rel="noreferrer">a function parameter cannot be an array.</a> It is pointless to deceive yourself and mean to deceive others.</p>

<hr>

<pre><code>SmartClient(std::unique_ptr&lt;SmartWidgetFactory&gt; oFactory)
</code></pre>

<p>This constructor should be marked <code>explicit</code>. In fact, <em>every constructor you ever write</em> (except for copy constructors and move constructors) should be <code>explicit</code>. If you leave off the <code>explicit</code>, then you're enabling people to write code like</p>

<pre><code>std::unique_ptr&lt;SmartWidgetFactory&gt; pf = ...;
SmartClient sc = std::move(pf);
</code></pre>

<p>or even</p>

<pre><code>SmartClient sc = nullptr;
</code></pre>

<p>and it'll compile, and they won't realize what they did wrong until runtime. It's better to catch this kind of thing at compile time. Mark all your constructors <code>explicit</code>.</p>

<hr>

<pre><code>std::unique_ptr&lt;Widget&gt; CreateButton()
</code></pre>

<p>If you intended this function to override the virtual function in the base class, you should have marked it <code>override</code>. (It may <em>still</em> override the virtual function in the base class, even without <code>override</code>, if you spelled everything correctly; but don't bet your workday on it. Mark all overriding functions <code>override</code> and catch your bugs at compile time.)</p>

<p>Also, consider whether it makes conceptual sense that "creating a button" is a <em>non-const</em> method of the factory. Maybe it does; I tend to think it doesn't. So I would write this as</p>

<pre><code>std::unique_ptr&lt;Widget&gt; CreateButton() const override
</code></pre>

<hr>

<pre><code>std::unique_ptr&lt;SmartClient&gt; oClient = std::make_unique&lt;SmartClient&gt;( std::move(oFactory) );
</code></pre>

<p>Why does this need to be heap-allocated?</p>

<pre><code>auto oClient = SmartClient(std::move(oFactory));
</code></pre>

<p>Even if you want to keep using <code>make_unique</code> for some reason, consider replacing the cumbersome type name <code>std::unique_ptr&lt;SmartClient&gt;</code> with <code>auto</code>:</p>

<pre><code>auto oClient = std::make_unique&lt;SmartClient&gt;(std::move(oFactory));
</code></pre>

<p>Notice I've also normalized the whitespace while I'm at it.</p>

<hr>

<pre><code>void LOG(std::string strText)
</code></pre>

<p>Pass large expensive-to-copy objects, such as <code>std::string</code>, by const reference.</p>

<pre><code>void LOG(const std::string&amp; text)
</code></pre>

<p>If you are on C++17, consider replacing <code>const std::string&amp;</code> parameters with <code>std::string_view</code> parameters:</p>

<pre><code>void LOG(std::string_view text)
</code></pre>

<p>Be aware that you should use <code>string_view</code> only in places where it would make equal sense to use a reference type (so, parameters, and that's it).</p>

<p>Also be aware that when people see <code>LOG("foo")</code> in your code, they will assume that <code>LOG</code> is a macro, because it's ALL UPPER CASE. If you mean for people to assume it's a function, call it <code>print_to_log</code> or something like that.</p>
    </div>