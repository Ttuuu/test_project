<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>The algorithm works as expected …</p>
</blockquote>

<p>How do you know? Sketch what tests you did how. </p>

<blockquote>
  <p>…but it is very slow.</p>
</blockquote>

<p>My current take: due to Exception handling, due in turn to <strong><em>not</em></strong> working as specified.<br>
(Test input: download of <a href="https://norvig.com/big.txt" rel="nofollow noreferrer">norvig.com/big.txt</a> - loads of <code>NullPointerException</code> trying to dereference <code>next_run_first_elements[i]</code>.)  </p>

<hr>

<p>For every class where instances can be expected to turn up in arrays, collections and such, override <code>toString()</code>:</p>

<pre><code>@Override
public String toString() {
    return new StringBuilder().append(value)
        .append('#').append(file_index).toString();
}
</code></pre>

<p>I failed to come up with a <em>good</em> summary of what <code>setNextDistributionLevel()</code> and <code>setPreviousRunDistributionLevel()</code> do, which is why I present the 1st <em>without doc comment</em>. (The naming is inconsistent.)</p>

<pre><code>private static void setNextDistributionLevel()
{
    final int
        ways_1 = distribution_array.length - 2,
        diff = distribution_array[0];
    for (int i = 0, next ; i &lt;= ways_1 ; i = next)
        distribution_array[i] = distribution_array[next = i+1] + diff;
    runs_per_level += diff * ways_1;
    // System.out.println("next " + runs_per_level + ": " + Arrays.toString(distribution_array));
}

/**
* Calculates previous run distribution level:
* every number of runs is smaller than in the previous level
*  by the smallest number therein */// ToDo: describe commendably
private static void setPreviousRunDistributionLevel()
{
    final int 
        ways_1 = distribution_array.length - 2,
        diff = distribution_array[ways_1];

    for (int i = ways_1, next ; 0 &lt; i ; i = next)
        distribution_array[i] = distribution_array[next = i-1] - diff;
    runs_per_level -= diff * ways_1;
    distribution_array[0] = diff;
    // System.out.println("prev " + runs_per_level + ": " + Arrays.toString(distribution_array));
}
</code></pre>

<p><code>closeReaders()</code> &amp; <code>closeWriters()</code> contain repeated code and don't live up to their documentation in case of an exception - suggestion:</p>

<pre><code>/** Closes all Writers in &lt;code&gt;run_file_writers&lt;/code&gt;. */
private static void closeWriters(BufferedWriter run_file_writers[]) {
    closeAll(run_file_writers);
}

/** Closes all &lt;code&gt;candidates&lt;/code&gt;. */
private static void closeAll(Closeable candidates[]) {
    for (Closeable candidate: candidates)
        try {
            candidate.close();
        } catch (Exception e) {
        }
}
</code></pre>

<p>Use the runtime environmnt's support in favour of open coding, e.g. <code>Arrays.fill()</code> instead of iterating over array indices to assign to elements.</p>
    </div>