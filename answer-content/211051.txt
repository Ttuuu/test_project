<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In Python 3.5 type annotations were introduced. These let you add annotations to variables and functions to denote which type they should be. This is not enforced on its own, but you can get access to these annotations with the <code>__anotations__</code> property:</p>

<pre><code>def f(a: str) -&gt; str:
    return a
f.__annotations__
# {'a': str, 'return': str}
</code></pre>

<p>With this it is relatively easy to write a decorator that checks all specified types:</p>

<pre><code>from functools import wraps
import inspect

def check_types(func):
    annotations = func.__annotations__
    params = inspect.signature(func).parameters
    @wraps(func)
    def wrapper(*args, **kwargs):
        # positional arguments
        for value, (name, param) in zip(args, params.items()):
            if param.annotation is inspect._empty:
                continue
            if not isinstance(value, param.annotation):
                raise TypeError(f"type({name}) != {param.annotation}, type({name}) == {type(value)}")
        # keyword arguments
        for name, value in kwargs.items():
            try:
                required_type = annotations[name]
            except KeyError:
                continue
            if not isinstance(value, required_type):
                raise TypeError(f"type({name}) != {required_type}, type({name}) == {type(value)}")
        return func(*args, **kwargs)
    return wrapper
</code></pre>

<p>Your methods would then simply look like this:</p>

<pre><code>Chrome = selenium.webdriver.chrome.webdriver.WebDriver

class SaltBot:
    ...

    @check_types
    def watch(self, browser: Chrome, source: str = "data.json", output: str = "data.json", matches: int = 1):
        """
        Watch matches, make predictions, and record the results.
        :type browser: selenium.webDriver, Example: selenium.webdriver.Chrome(). 
        :type source: str, directory to source file.
        :type target: str, directory to output file.
        :type matches: int, No. matches to watch.
        """
        if matches &lt;= 0:
            raise ValueError(
                "matches &lt;= 0, matches == {}, matches must be &gt; 0".format(matches))

        ...
</code></pre>

<p>This is of course only a dynamic type checking at run time and can probably be improved itself (I don't use type hints regularly). It does not conform to <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP 484</a> in that you can't e.g. use strings as types. You might want to go the full way and use the <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>typing</code> module</a> and a static type checker, as described e.g. <a href="https://medium.com/@ageitgey/learn-how-to-use-static-type-checking-in-python-3-6-in-10-minutes-12c86d72677b" rel="nofollow noreferrer">here</a>.</p>
    </div>