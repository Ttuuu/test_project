<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A respectable program for someone learning to code with Python.</p>

<h3>Style</h3>

<p>Comments are good when they add useful information to help someone (likely you in the future) understand the code.  MODULE IMPORT, CLASS IMPORTS, and GLOBAL VARIABLES don't really add anything.  In contrast, a comment that explains what a global variable is used for and why it needs to be a global variable would be useful.</p>

<p>The Phrase class doesn't really serve a purpose here. The class attributes aren't really so related as to belong in a class.</p>

<p>Global variables should be avoided if possible.  They represent an interface to functions that is hidden and likely undocumented.  For example, you can't tell from the call <code>create_new_p()</code> at the end of <code>run_puzzle()</code> that you need to first:</p>

<ol>
<li>set <code>p_p</code> to a list of phrases,</li>
<li>pick a phrase and store the index of the phrase in <code>phrase_picked</code>,</li>
<li>set <code>p_unique_letters</code> to a list of the unique letters in the picked phrase,</li>
<li>set <code>p_unique_nums</code> to a list of random integers between 1 and 26 that has the same length as <code>p_unique_letters</code>, and</li>
<li>set <code>converted_phrase</code> to an empty string.</li>
</ol>

<p>or the function won't run correctly.  It also doesn't show that the result of the call is returned in <code>converted_phrase</code>.</p>

<p>Docstrings go inside the function, not before it.  And please, not in all caps.  All uppercase text is actually harder to read than proper mixed case text.</p>

<h3>Substance</h3>

<p>Looking at a call to <code>get_rand_num()</code>, you don't know what it returns without inspecting the function.  However, a Python programmer, would readily understand a call to  <code>random.randint(1, 26)</code>.  So just use the later.</p>

<p>From the doc string for <code>create_new_p()</code> (p for puzzle?), the purpose of the function is to take an input phrase and create a puzzle phrase by mapping the letters to a random permutation of the letters.  For example, 'a' may be mapped to 'x' and 'b' may be mapped to 'e'.  Anything that isn't a letter is unchanged.</p>

<pre><code>def create_new_puzzle(phrase, letter_mapping):
    ''' Makes a cryptogram of `phrase` by replacing letters according to
        letter_mapping.  Other characters are unchanged.
    '''

    puzzle_phrase = []

    for letter in phrase:
        if letter.isalpha():
            puzzle_phrase.append(letter_mapping[letter])
        else:
            puzzle_phrase.append(letter)

    return ''.join(puzzle_phrase)
</code></pre>

<p>In python, strings are immutable. So contcatenating a letter to a string may have to create a new string, copy the old string and the new letter into the new string.  You will frequently see code that creates strings  by appending letters to a list, and then using ''.join() on the list at the end to make a string.</p>

<p>With experience, you will learn to write this as a list comprehension:</p>

<pre><code>def create_new_puzzle(phrase, letter_mapping):
    ''' Makes a cryptogram of `phrase` by replacing letters according to
        letter_mapping.  Other characters are unchanged.
    '''

    puzzle_phrase = [letter_mapping.get(letter,letter) for letter in phrase]

    return ''.join(puzzle_phrase)
</code></pre>

<p>Or, using feature of the standard library, maybe like this:</p>

<pre><code>def create_new_puzzle(phrase, letter_mapping):
    ''' Makes a cryptogram of `phrase` by replacing letters according to
        letter_mapping.  Other characters are unchanged.
    '''

    return phrase.translate(str.maketrans(letter_mapping))
</code></pre>

<p>Notice how the interface for <code>create_new_puzzle()</code> is independent from how the function is implemented.  The phrase and mapping are passed in and the cryptogram gets returned.  This is good because you can change the internals of the function without affecting the rest of the program.</p>

<p><code>run_puzzle()</code> goes through a lot of work to build a mapping from the alphabet to a randomized alphabet.  First it collects the unique letters in the phrase, and then associating a unique random number from 1 to 26 to each letter.  This can be improved by realizing that it is unnecessary to get the unique letters or associating the numbers. Instead just build a mapping from the alphabet to a jumbled up version of the alphabet.  This can also be made into a separate function:</p>

<pre><code>import random
import string

def create_mapping():
    to_alphabet = list(string.ascii_uppercase)
    random.shuffle(to_alphabet)

    return dict(zip(string.ascii_letters, to_alphabet*2))
</code></pre>

<p>I presume phrases is supposed to be a list of phrases, so that one can be picked at random to make a cryptogram puzzle.</p>

<pre><code>phrases = [
   ("phrase one", "cite 1"),
   ("phrase two", "cite 2"),
   ... etc.
]
</code></pre>

<p>So <code>run_puzzle()</code> becomes:</p>

<pre><code>import phrases

def run_puzzle():
    phrase, citation = random.choice(phrases)
    mapping = create_mapping()
    puzzle_phrase = create_new_puzzle(phrase, mapping)

    print("\n{}\n\n{}".format(puzzle_phrase, citation))
</code></pre>
    </div>