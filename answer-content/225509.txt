<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Exception handling</h2>

<p>It is not customary to let the main method throw an exception. At the very least you can catch the base <code>Exception</code> class and use <code>printStackTrace()</code> to print the error message and related debug info. </p>

<h2>IO handling</h2>

<ol>
<li><p>This program only deals with one file.  However, it is good practice to remember to close every external resource.  That includes files, database connections (and other related resources, like prepared statements and result sets), network sockets, etc. not closing resources may result in resource leaks that can escalate to JVM crash. Java 7 introduced the <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try-with-resources</a> construct that allows the compiler to automatically handle resource closure as well as error handling.</p></li>
<li><p>Java 7 also introduced the "new io" <code>java.nio</code> package that improves IO handling in Java.   the <code>Files.readAllLines()</code> is a convenient method that reads whole file into <code>List</code> of <code>String</code>s (and also internally handles the external resource). (alas, no equivalent <code>writeAllLines()</code>)</p></li>
</ol>

<h2>Naming conventions</h2>

<p><code>gradesString</code> is a List of <code>Double</code> items. the name is <em>very</em> confusing.</p>
    </div>