<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my suggested version, which you should take as coming from a fellow learner.</p>

<ol>
<li><p>ToCsv is doing too much. I would be inclined to keep it very simple
and perform only its very narrow responsibility: properly
transforming a sequence of strings to a properly formatted csv
string. Let the caller transform its sequence of arbitrary objects
into strings.</p></li>
<li><p>String.Join exists in the BCL, which is exactly suited to this
purpose.</p></li>
<li>Properly encodes the quote character</li>
</ol>

<hr>

<pre><code>private class Program
{
    private static void Main(string[] args)
    {
        int[] someInts = {1, 2, 3, 4, 10, 9, 8};
        string[] someStrings = {"one", "two", "seven", "eight"};
        string[] specialStrings = {"o'ne", "\"tw\"o", ",,three", "fo,ur", "five"};

        Console.WriteLine(someInts.Select(s =&gt; s.ToString()).ToCsv());
        Console.WriteLine(someStrings.ToCsv());
        Console.WriteLine(specialStrings.ToCsv());
    }
}

public static class CsvHelpers
{
    private static readonly char[] csvSpecialChars = new[] { ',', '"', ' ', '\n', '\r' };

    public static string ToCsv(this IEnumerable&lt;string&gt; source)
    {
        if (source == null)
        {
            return string.Empty;
        }

        var encodedStrings = from item in source
                     select EncodeCsvField(item);

        return string.Join(",", encodedStrings);
    }

    private static string EncodeCsvField(string input)
    {
        string encodedString = input.Replace("\"", "\"\"");
        if (input.IndexOfAny(csvSpecialChars) &gt;= 0)
        {
            encodedString = "\"" + encodedString + "\"";
        }

        return encodedString;
    }
}
</code></pre>
    </div>