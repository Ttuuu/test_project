<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of thoughts. There really isn't any need for <code>correct_answers_combined</code>. After <code>shift</code>, <code>$*</code> will hold the combined remaining arguments (answers) to your question. The additional <code>printf</code>, pipe, and call to <code>sed</code> are simply incurring additional overhead in the form of subshells and separate utility calls. You could do:</p>

<pre><code>    correct_answers="$*"

    ## prompt
    printf '%b' "$question\\nPlease answer [ $correct_answers ] to confirm (Not &lt;Enter&gt;): "
    read -r user_answer
</code></pre>

<p>Since you do not want to accept <kbd>[Enter]</kbd> as an answer, a validation that <code>user_answer</code> is unset can provide the answer and return for your function in that case, e.g.</p>

<pre><code>    ## validate answer provided
    [ -z "$user_answer" ] &amp;&amp; return 1
</code></pre>

<p>Your <code>"optional... speed up the whole process"</code>, with a bit of rearranging can be used as a single call to provide a return to your function. Since you want to know whether the <code>user_answer</code> exists among the <code>correct_answers</code> you can simply return the result of <code>grep -qi</code>:</p>

<pre><code>    # this part is can be the whole process
    printf '%s\n' $correct_answers | grep -qi "$user_answer" &gt; /dev/null 2&gt;&amp;1
        return $?
}
</code></pre>

<p>(<strong>note:</strong> using <code>printf '%s\n' "$correct_answers"</code> will separate each of the whitespace separated answers by <code>newline</code> which eliminates any possible combination of parts of adjacent answers returning true)</p>

<p>With those suggestions, your <code>confirmation ()</code> function would reduce to:</p>

<pre><code>confirmation ()
# $1    = a string containing the question
# $2,.. = arguments containing the right answers (case insensitive)
{
    question="$1"; shift
    correct_answers="$*"

    ## prompt
    printf '%b' "$question\\nPlease answer [ $correct_answers ] to confirm (Not &lt;Enter&gt;): "
    read -r user_answer

    ## validate answer provided
    [ -z "$user_answer" ] &amp;&amp; return 1

    # this part is can be the whole process
    printf '%s\n' "$correct_answers" | grep -qi "$user_answer" &gt; /dev/null 2&gt;&amp;1
        return $?
}
</code></pre>

<p>I haven't tested all corner cases, but for single word answers it should function as you intend. If you want the some delimiter between the answers inside <code>[ ... ]</code> then an additional command substitution can be used, but space separated options appear fine between the brackets.</p>

<p>Let me know if you have any questions over the changes.</p>

<p><strong>Edit In Response to You Comments</strong></p>

<p>As stated above, if you want delimiters between the possible correct answers, simply use a <em>command substitution</em>, e.g.</p>

<pre><code>## prompt
printf '%b' "$question\\nPlease answer [ $(echo $correct_answers | tr ' ' /) ] to confirm (Not &lt;Enter&gt;): "
read -r user_answer
</code></pre>

<p>If you are concerned about the expansion of <code>printf '%s\n'</code>, don't quote the <code>$correct answers</code>, </p>

<pre><code># this part is can be the whole process
printf '%s\n' $correct_answers | grep -qi "$user_answer" &gt; /dev/null 2&gt;&amp;1
    return $?
</code></pre>

<p>Otherwise based on your stated question, it performs identical to the original saving at least half-a-dozen unnecessary subshells.</p>
    </div>