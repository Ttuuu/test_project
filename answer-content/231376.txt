<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Pascals Triangle?</h2>

<p>The output of your code is not <a href="https://en.wikipedia.org/wiki/Pascal%27s_triangle" rel="nofollow noreferrer">Pascals triangle</a> (even if the bug? is ignored). </p>

<p>As you only present one example with the statement <em>"The generated triangle should look like that:"</em>, that contains what you state is a bug (erroneous? 13) </p>

<p>What the rules defining the correct result are is anyone's guess. I will address your code as is and ignore the bug or not bug.</p>

<h2>Style and logic</h2>

<ul>
<li>Don't add comments that state the obvious. Eg <code>// first case</code>, <code>// second case</code> and so on. </li>
<li><p>Don't add comments that are just an alternative representation of the code Eg <code>// if the col number is even, add only the previous 2 elements in the previous row</code>. This just add another line of maintainable content, which can be dangerous because if you change the code there is nothing forcing you to change the comment. Even worse than redundant comments are comments that are in conflict with the actual logic</p></li>
<li><p>Use <code>const</code> for variables that do not change. Eg <code>let matrix = [];</code> can be <code>const matrix = []</code></p></li>
<li><p>Don't repeat code. </p>

<ul>
<li>You calculate <code>row - 1</code> (and the like) many times</li>
<li>You index <code>matrix[row]</code> and <code>matrix[row-1]</code> many times</li>
</ul></li>
<li><p>You are repeating logic. Eg the second last statement <code>else if (j &lt; i &amp;&amp; i % 2 === 0) {</code> is followed by <code>else if (j &lt; i &amp;&amp; i % 2 === 1) {</code> but you know that <code>i % 2 === 1</code> as the previous statement determined its value. </p></li>
<li><p>Don't calculate known data. Eg the very last <code>else if</code> statement can just be a <code>else</code> because you must add to the array each iteration, the last statement MUST pass.</p></li>
</ul>

<p>There is no advantage using let in for loops when performance is a concern. Try to favor function scoped variables and declare them at the top of the function.</p>

<h2>Rewrite (cleanup)</h2>

<p>The snippets below is the same logic you used, just cleaned up using the points above </p>

<pre><code>function createTriangle(n) {
    var i, j;
    const matrix = [];
    for (j = 0; j &lt; n; j++) {
        const prevRow = matrix[j - 1], row = []; 
        matrix.push(row);
        for (i = 0; i &lt;= 2 * j; i++) {
            if ((i === 0 &amp;&amp; j &gt;= 0 || i === 2 * j) || (i === j &amp;&amp; i === 1)) {
                row[i] = 1;
            } else {
                const r1 = row[i - 1], pr = prevRow[i], pr12 = prevRow[i - 1] + prevRow[i - 2];
                if (j &gt; i &amp;&amp; r1 === 1) {
                    row[i] = 1 + pr;
                } else if (j &gt; i &amp;&amp; r1 !== 1) {
                    row[i] = pr + pr12;
                } else if (j === i &amp;&amp; r1 !== 1) {
                    row[i] = pr + pr12;
                } else if (j &lt; i &amp;&amp; i % 2 === 0) {
                    row[i] = pr + pr12;
                } else {
                    row[i] = pr12;
                }
            }
        }
    }
    return matrix;
}
</code></pre>

<p>Or</p>

<pre><code>function createTriangle(n) {
    var i, j, row;
    const matrix = [];
    for (j = 0; j &lt; n; j++) {
        const prevRow = row; 
        matrix.push(row = []);
        for (i = 0; i &lt;= 2 * j; i++) {
            if ((i === 0 &amp;&amp; j &gt;= 0 || i === 2 * j) || (i === j &amp;&amp; i === 1)) {
                row[i] = 1;
            } else {
                const r1 = row[i - 1], pr = prevRow[i], pr12 = prevRow[i - 1] + prevRow[i - 2];
                if (j &gt; i &amp;&amp; r1 === 1) { row[i] = 1 + pr }
                else if (j &gt; i &amp;&amp; r1 !== 1) { row[i] = pr + pr12 }
                else if (j === i &amp;&amp; r1 !== 1) { row[i] = pr + pr12 }
                else if (j &lt; i &amp;&amp; i % 2 === 0) { row[i] = pr + pr12 }
                else { row[i] = pr12 }
            }
        }
    }
    return matrix;
}
</code></pre>

<h2>Pascals triangle example</h2>

<p>As an example pascals triangle can be calculated as follows. I would assume that the rules you use are similar and thus it is likely that your triangle can be calculated using a modification of this method that does not require indexing into the previous row.</p>

<pre><code>function pascalsTriangle(rows) {
    var i, j, row, p, result = [[1]];
    for (i = 1; i &lt;= rows; i++) {
        result.push(row = [p = 1]);
        for (j = 1; j &lt;= i; j++) { row.push(p = p * (i - j + 1) / j) }
    }
    return result;
}
</code></pre>
    </div>