<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a readability viewpoint, your <code>operator&lt;&lt;</code> for <code>std::vector</code> declared at the top of your file should be spread out onto multiple lines so that it is easier to read and understand.</p>

<p>Also, the calculation of <code>((hash &lt;&lt; 5) + hash)</code> should be rewritten as the simpler <code>hash * 33</code>.  The compiler will know the best way to multiply a number by 33.  This could be a multiply, a shift-and-add like you've coded, or some sequence involving the address calculation instructions.</p>

<p>Rather than using an <code>assert</code> to verify that the needle is not longer than the haystack (which will only <a href="https://en.cppreference.com/w/cpp/error/assert" rel="nofollow noreferrer">check the condition</a> if the <code>NDEBUG</code> macro is not defined), just check the condition and return an empty collection.</p>

<p>In <code>rabin_karp_hash</code> you assume that two strings match if their hash values are the same.  This is not necessarily the case.  It is possible, however unlikely, that two different strings will have the same hash value.  This is a <em>hash collision</em>.  To ensure that your potential match are identical strings, you still need to compare both strings when the hashes match.</p>

<p>To simplify the code in <code>main</code> and eliminate the duplication, you can create a class with a virtual <code>compare</code> member.  Then derive two classes from it, one for the naive comparison, the other for the Rabin-Karp one.  Put your loop into another function, and pass instances of the appropriate derived class to use the specific comparison you want to test.</p>
    </div>