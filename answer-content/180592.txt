<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other answers have already covered what can be improved in your script so I will not repeat any of that. Just wanted to add an alternative I found interesting. </p>

<p>An <em>elimination-based</em> approach:</p>

<pre><code>def f(my_string):
    brackets = ['()', '{}', '[]']
    while any(x in my_string for x in brackets):
        for br in brackets:
            my_string = my_string.replace(br, '')
    return not my_string
</code></pre>

<p>In every iteration the innermost brackets get eliminated (replaced with empty string). If we end up with an empty string, our initial one was balanced; otherwise, not.</p>

<hr>

<p>Examples and notes:</p>

<ul>
<li><strong>Best</strong> case: <code>s = '[](){}{}()[]'</code> -&gt; reduces to nothing in one <code>while</code> iteration.</li>
<li><strong>Worst</strong> case: <code>s = '({[[{()}]]})'</code> -&gt; same length string requires 6 iterations (destroyed inside out)</li>
</ul>

<p>You could add some short-circuiting for quickly catching cases of lengthy strings that have an uneven number of opening and closing brackets so that you don't waste your time eliminating...</p>
    </div>