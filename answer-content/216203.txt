<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't mix presentation and business logic</h2>

<p>Let's take a look at <code>self.turn</code>. You're using it for two purposes - to talk to humans (that's why it's a string), and for the computer to track which turn it is. These concerns should be separated. If there will always be two players, the turn could be represented by a boolean, or maybe as an integer that's the player ID. It should only be converted to a string when you want to display whose turn it is on the screen.</p>

<p>Your entire game is baked into one <code>Game</code> class, but a bunch of separation needs to be done. A great example of a method that should only appear in the business logic layer is <code>generate_question</code>. It shouldn't interact with the UI at all. Solving this issue will dramatically clean up your code, make debugging and maintenance easier, and generally decrease headaches.</p>

<h2>Use modern formatting</h2>

<p>Rather than this:</p>

<pre><code>str(self.first_numerator) + " " + " " + " " + str(self.second_numerator)
</code></pre>

<p>you can do:</p>

<pre><code>f'{self.first_numerator}   {self.second_numerator}'
</code></pre>

<h2>Be careful about rounding</h2>

<p>This:</p>

<p><code>== float(</code></p>

<p>is a great way to create a nasty bug. Sometimes this will evaluate to false even if the numbers seem like they should match -- they're just infinitesimally different. Either track integers as a member of fractions, or if you really need to compare floats, do so with some small tolerance, i.e.</p>

<pre><code>epsilon = 1e-12
if abs(self.answer - self.attempted_answer) &lt; epsilon:
    # ...
</code></pre>

<h2>Create an upper <code>main</code> function</h2>

<p>...to house the code that's currently in global scope.</p>

<h2>Don't repeat yourself</h2>

<p>This:</p>

<pre><code>    if self.turn == "BLUE TURN":
        if self.answer == float(self.attempted_answer):
            self.blue_team_points += self.round * 100
        else:
            self.blue_team_points -= self.round * 100
    else:
        if self.answer == float(self.attempted_answer):
            self.red_team_points += self.round * 100
        else:
            self.red_team_points -= self.round * 100
</code></pre>

<p>can be compressed - make a variable to hold the result of your multiplication:</p>

<pre><code>award = self.round * 100
</code></pre>

<p>And you don't need to repeat the entire block based on turn if you make a <code>Player</code> class with an <code>award</code> method.</p>
    </div>