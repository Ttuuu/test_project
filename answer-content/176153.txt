<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The way Antlr visitors and listeners work, there's little we can do to avoid redundant code - you've done quite a good job at keeping the redundancies minimal.</p>

<p>Essentially the logic is the same in all overrides: return a <code>new ExtractMethodValidationResult</code> when <code>context</code> is contained in the user's selection, or the no-op <code>base</code> return value otherwise.</p>

<p>You could remove the dots and extract a generic <code>IsSelected&lt;TContext&gt;</code> function to turn this:</p>

<pre><code>if (_qualifiedSelection.Selection.Contains(context)
{
    return ...
}

return ...
</code></pre>

<p>into a single <code>return</code> statement:</p>

<pre><code>return IsSelected(context) 
    ? new ExtractMethodValidationResult&lt;SomeParserRuleType&gt;(context, RubberduckUI.SomeResourceKey)
    : base.VisitSomeNode(context);
</code></pre>

<p>It would be nice to be able to infer the generic type parameter from the <code>context</code>, and note the use of <code>RubberduckUI</code> resources instead of a hard-coded string literal.</p>

<p>That constructor's signature doesn't look right:</p>

<blockquote>
<pre><code>public ExtractMethodValidationResult(ParserRuleContext InvalidContext, String ErrorMessage) : this()
</code></pre>
</blockquote>

<p>Parameter names should be <code>camelCase</code>, and constructor chaining <em>usually</em> go the other way around (least parameters calling overloads with more parameters), but I can see why it was done this way.</p>

<p>Encapsulation is broken here:</p>

<blockquote>
<pre><code>    public IList&lt;Result&gt; ValidContexts { get; set; }
    public IList&lt;Tuple&lt;ParserRuleContext, String&gt;&gt; InvalidContexts { get; set; }
</code></pre>
</blockquote>

<p>These properties shouldn't expose setters, these references should be immutable. You could use <code>private readonly</code> backing fields, or since Rubberduck is now written in C#7, leverage truly immutable get-only autoproperties:</p>

<pre><code>public IList&lt;TResult&gt; ValidContexts { get; } = new List&lt;TResult&gt;();
public IList&lt;Tuple&lt;ParserRuleContext, string&gt;&gt; InvalidContexts { get; } = new List&lt;Tuple&lt;ParserRuleContext, string&gt;&gt;();
</code></pre>

<p>This would remove the need to chain the parameterized constructor overload; you'd still need to have an explicit default constructor though.</p>

<p>Note the use of the <code>string</code> language keyword/alias for <code>System.String</code>; Rubberduck's code base uses language aliases whenever they are available.</p>

<p>I'm not sure exposing <code>Tuple&lt;ParserRuleContext, string&gt;</code> makes the greatest API for the consuming class. The class itself being <code>private</code> tells me this would be a nested class and as such, some sort of "implementation detail" of <em>something bigger</em> (which, indeed it is) - so it might not matter much. But if the class were <code>public</code> or <code>internal</code>, I'd avoid exposing a <code>Tuple</code> like this.</p>

<p>Might be just a copy/paste artifact, but watch brace position:</p>

<blockquote>
<pre><code>private class ExtractMethodValidatorVisitor : VBAParserBaseVisitor&lt;ExtractMethodValidationResult&lt;VBAParser.BlockStmtContext&gt;&gt;

    {
</code></pre>
</blockquote>

<p>Should be:</p>

<pre><code>private class ExtractMethodValidatorVisitor : VBAParserBaseVisitor&lt;ExtractMethodValidationResult&lt;VBAParser.BlockStmtContext&gt;&gt;    
{
</code></pre>

<p>This check works against <code>IList&lt;T&gt;</code>:</p>

<blockquote>
<pre><code>if (children.InvalidContexts.Count == 0)
</code></pre>
</blockquote>

<p>Not wrong in itself, but then further encapsulating the lists and eventually exposing the contexts as <code>IEnumerable</code>s would make that code require adjustments. I'd go with LINQ here, and work against the more general-purpose <code>IEnumerable&lt;T&gt;</code> interface:</p>

<pre><code>if (!children.InvalidContexts.Any())
</code></pre>

<p>The <code>List&lt;T&gt;</code> is an implementation detail anyway.</p>

<hr>

<p>I need to learn to leverage Antlr visitors myself, to I hope another reviewer will be commenting on the general approach.</p>
    </div>