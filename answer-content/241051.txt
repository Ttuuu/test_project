<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Many thanks to Konrad Rudolph and Miguel Avila for time spent reading the code and responding.</p>

<p>I'm responding in an answer, because I want to post an update to the code in which I've followed most of Konrad's suggestions.</p>

<p>In answer to Konrad's points:</p>

<ul>
<li>Thank you for pointing out the error with <code>using</code> in headers. Fixed.</li>
<li>I named the template parameter 'S' for Scalar. The idea was to hint that, although this derives from std::array, it is not to be treated as a generic container of any other type. I realise this might look confusing, when T is conventional, but I have left the naming scheme in my updated code as I think this is perhaps a matter of preference rather than correctness.</li>
<li>I did want an is-a relationship. This relates to Miguel's answer too. I will discuss after finishing this list.</li>
<li><code>fn(void)</code> all changed to <code>fn()</code>; I'm happy to follow this convention; it looks better, too.</li>
<li><code>setFrom()</code>: First, I changed to <code>set_from()</code> in the update because lower case looks more in-keeping with STL derived code. Second it can't be a constructor, because I want to keep the Vector as an aggregate type. I don't anticipate using <code>set_from()</code> often, but there is some of my code which needs the feature.</li>
<li>Good point. I've updated and made use of algorithms; this was a good exercise for me.</li>
<li>Good point; I've removed output()</li>
<li>Good point; asString() is now str()</li>
<li>I like this alternative to static_casts, so I've updated the code accordingly.</li>
<li>Many of the while's disappeared with std::aggregate and std::transform. Others have been replaced with fors</li>
<li>I've added a guard for renormalise; I think that occurred to me while I was writing it, but it got forgotten!</li>
</ul>

<p>So, the last point to discuss is whether deriving from std::array is a good idea. You guys are suspicious, I think, but I still like it.</p>

<p>What does it do for the Vector class?</p>

<ul>
<li>No need to write constructors - they're banned anyway</li>
<li>compiler knows exactly the size of the object</li>
<li>I can use STL iterators on my Vector objects in client code. Consider that these vectors may be used for computations where they really do have high dimensionality (neural nets are one application)</li>
</ul>

<p>Downsides</p>

<ul>
<li>If you really need to assign from another type, such as std::array, you have to write an ugly method like set_from().</li>
<li>Because it derives from an STL container, a coder using Vector might think they can set S=array_type or S=SomeClass - but the type_trait tests should address that.</li>
</ul>

<p>If you can think of any other concrete downsides, do please list them!</p>

<p>Here is the updated class template. Note that I've included the Random number generator code so that this listing is compilable, even though that code is out of scope. I'll also list a test program to compile against it.</p>

<p>Thanks again!</p>

<pre class="lang-cpp prettyprint-override"><code>/*!
 * \file
 * \brief An N dimensional vector class template which derives from std::array.
 *
 * \author Seb James (with thanks to Konrad Rudolph  and Miguel Avila for code review)
 * \date April 2020
 */
#pragma once

#include &lt;cmath&gt;
#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;type_traits&gt;
#include &lt;numeric&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;
// For random number generator only (would normally be a separate &lt;Random.h&gt;)
#include &lt;random&gt;
#include &lt;vector&gt;
#include &lt;limits&gt;

namespace morph {

    /*!
     * \brief N-D vector class
     *
     * An N dimensional vector class template which derives from std::array. Vector
     * components are of scalar type S. It is anticipated that S will be set either to
     * floating point scalar types such as float or double, or to integer scalar types
     * such as int, long long int and so on. Thus, a typical (and in fact, the default)
     * signature would be:
     *
     * Vector&lt;float, 3&gt; v;
     *
     * The class inherits std:array's fixed-size array of memory for storing the
     * components of the vector. It adds numerous methods which allow objects of type
     * Vector to have arithmetic operations applied to them, either scalar (add a scalar
     * to all elements; divide all elements by a scalar, etc) or vector (including dot
     * and cross products, normalization and so on.
     *
     * Because morph::Vector extends std::array, it works best when compiled with a
     * c++-17 compiler (although it can be compiled with a c++-11 compiler). This is
     * because std::array is an 'aggregate class' with no user-provided constructors,
     * and morph::Vector does not add any of its own constructors. Prior to c++-17,
     * aggregate classes were not permitted to have base classes. So, if you want to do:
     *
     * Vector&lt;float, 3&gt; v = { 1.0f , 1.0f, 1.0f };
     *
     * You need c++-17. Otherwise, restrict your client code to doing:
     *
     * Vector&lt;float, 3&gt; v;
     * v[0] = 1.0f; v[1] = 1.0f; v[2] = 1.0f;
     */
    template &lt;typename S, size_t N&gt; struct Vector;

    /*!
     * Template friendly mechanism to overload the stream operator.
     *
     * Note forward declaration of the Vector template class and this template for
     * stream operator overloading. Example adapted from
     * https://stackoverflow.com/questions/4660123
     */
    template &lt;typename S, size_t N&gt; std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, const Vector&lt;S, N&gt;&amp;);

    //! forward declaration of random number generator classes
    template &lt;typename T&gt; class RandUniformReal;
    template &lt;typename T&gt; class RandUniformInt;

    template &lt;typename S=float, size_t N=3&gt;
    struct Vector : public std::array&lt;S, N&gt;
    {
        //! \return the first component of the vector
        template &lt;size_t _N = N, std::enable_if_t&lt;(_N&gt;0), int&gt; = 0&gt;
        S x() const {
            return (*this)[0];
        }
        //! \return the second component of the vector
        template &lt;size_t _N = N, std::enable_if_t&lt;(_N&gt;1), int&gt; = 0&gt;
        S y() const {
            return (*this)[1];
        }
        //! \return the third component of the vector
        template &lt;size_t _N = N, std::enable_if_t&lt;(_N&gt;2), int&gt; = 0&gt;
        S z() const {
            return (*this)[2];
        }
        //! \return the fourth component of the vector
        template &lt;size_t _N = N, std::enable_if_t&lt;(_N&gt;3), int&gt; = 0&gt;
        S w() const {
            return (*this)[3];
        }

        /*!
         * \brief Unit vector threshold
         *
         * The threshold outside of which the vector is no longer considered to be a
         * unit vector. Note this is hard coded as a constexpr, to avoid messing with
         * the initialization of the Vector with curly brace initialization.
         *
         * Clearly, this will be the wrong threshold for some cases. Possibly, a
         * template parameter could set this; so size_t U could indicate the threshold;
         * 0.001 could be U=-3 (10^-3).
         *
         * Another idea would be to change unitThresh based on the type S. Or use
         * numeric_limits&lt;S&gt;::epsilon and find out what multiple of epsilon would make
         * sense.
         */
        static constexpr S unitThresh = 0.001;

        /*!
         * Set data members from an array the of same size and type.
         */
        void set_from (const std::array&lt;S, N&gt;&amp; ar) {
            std::copy (ar.begin(), ar.end(), this-&gt;begin());
        }

        /*!
         * Set the data members of this Vector from the passed in, larger array, \a ar,
         * ignoring the last element of \a ar. Used when working with 4D vectors in
         * graphics applications involving 4x4 transform matrices.
         */
        void set_from (const std::array&lt;S, (N+1)&gt;&amp; ar) {
            // Don't use std::copy here, because ar has more elements than *this.
            for (size_t i = 0; i &lt; N; ++i) {
                (*this)[i] = ar[i];
            }
        }

        /*!
         * Set an N-D Vector from an N+1 D Vector. Intended to convert 4D vectors (that
         * have been operated on by 4x4 matrices) into 3D vectors.
         */
        void set_from (const Vector&lt;S, (N+1)&gt;&amp; v) {
            for (size_t i = 0; i &lt; N; ++i) {
                (*this)[i] = v[i];
            }
        }

        /*!
         * Create a string representation of the vector
         *
         * \return A 'coordinate format' string such as "(1,1,2)", "(0.2,0.4)" or
         * "(5,4,5,5,40)".
         */
        std::string str() const {
            std::stringstream ss;
            ss &lt;&lt; "(";
            bool first = true;
            for (auto i : *this) {
                if (first) {
                    ss &lt;&lt; i;
                    first = false;
                } else {
                    ss &lt;&lt; "," &lt;&lt; i;
                }
            }
            ss &lt;&lt; ")";
            return ss.str();
        }

        /*!
         * Renormalize the vector to length 1.0. Only for S types that are floating point.
         */
        template &lt;typename F=S, std::enable_if_t&lt;!std::is_integral&lt;std::decay_t&lt;F&gt;&gt;::value, int&gt; = 0 &gt;
        void renormalize() {
            auto add_squared = [](F a, F b) { return a + b * b; };
            const F denom = std::sqrt (std::accumulate (this-&gt;begin(), this-&gt;end(), F{0}, add_squared));
            if (denom != F{0}) {
                F oneovermag = F{1} / denom;
                auto x_oneovermag = [oneovermag](F f) { return f * oneovermag; };
                std::transform (this-&gt;begin(), this-&gt;end(), this-&gt;begin(), x_oneovermag);
            }
        }

        /*!
         * Randomize the vector
         *
         * Randomly set the elements of the vector consisting of floating point
         * coordinates. Coordinates are set to random numbers drawn from a uniform
         * distribution between 0 and 1 (See morph::RandUniformReal for details).
         *
         * Note that I need a real or int implementation here, depending on the type of
         * S. This allows me to use the correct type of randomizer.
         *
         * Note, if you omit the second template arg from enable_if_t (or enable_if)
         * then the type defaults to void.
         *
         * \tparam F A floating point scalar type
         */
        template &lt;typename F=S, std::enable_if_t&lt;!std::is_integral&lt;std::decay_t&lt;F&gt;&gt;::value, int&gt; = 0 &gt;
        void randomize() {
            RandUniformReal&lt;F&gt; ruf (static_cast&lt;F&gt;(0), static_cast&lt;F&gt;(1));
            for (auto&amp; i : *this) {
                i = ruf.get();
            }
        }

        /*!
         * Randomize the vector
         *
         * Randomly set the elements of the vector consisting of integer
         * coordinates. Coordinates are set to random numbers drawn from a uniform
         * distribution between 0 and 255 (See morph::RandUniformInt for details).
         *
         * Note on the template syntax: Here, if I is integral, then enable_if_t's type
         * is '0' and the function is defined (I think).
         *
         * \tparam I An integer scalar type
         */
        template &lt;typename I=S, std::enable_if_t&lt;std::is_integral&lt;std::decay_t&lt;I&gt;&gt;::value, int&gt; = 0 &gt;
        void randomize() {
            RandUniformInt&lt;I&gt; rui (static_cast&lt;I&gt;(0), static_cast&lt;I&gt;(255));
            for (auto&amp; i : *this) {
                i = rui.get();
            }
        }

        /*!
         * Test to see if this vector is a unit vector (it doesn't *have* to be).
         *
         * \return true if the length of the vector is 1.
         */
        bool checkunit() const {
            auto subtract_squared = [](S a, S b) { return a - b * b; };
            const S metric = std::accumulate (this-&gt;begin(), this-&gt;end(), S{1}, subtract_squared);
            if (std::abs(metric) &gt; Vector&lt;S, N&gt;::unitThresh) {
                return false;
            }
            return true;
        }

        /*!
         * Find the length of the vector.
         *
         * \return the length
         */
        S length() const {
            auto add_squared = [](S a, S b) { return a + b * b; };
            const S len = std::sqrt (std::accumulate (this-&gt;begin(), this-&gt;end(), S{0}, add_squared));
            return len;
        }

        /*!
         * Unary negate operator
         *
         * \return a Vector whose elements have been negated.
         */
        Vector&lt;S, N&gt; operator-() const {
            Vector&lt;S, N&gt; rtn;
            std::transform (this-&gt;begin(), this-&gt;end(), rtn.begin(), std::negate&lt;S&gt;());
            return rtn;
        }

        /*!
         * Unary not operator.
         *
         * \return true if the vector length is 0, otherwise it returns false.
         */
        bool operator!() const {
            return (this-&gt;length() == S{0}) ? true : false;
        }

        /*!
         * Vector multiply * operator.
         *
         * Cross product of this with another vector \a v (if N==3). In
         * higher dimensions, its more complicated to define what the cross product is,
         * and I'm unlikely to need anything other than the plain old 3D cross product.
         */
        template &lt;size_t _N = N, std::enable_if_t&lt;(_N==3), int&gt; = 0&gt;
        Vector&lt;S, N&gt; operator* (const Vector&lt;S, _N&gt;&amp; v) const {
            Vector&lt;S, _N&gt; vrtn;
            vrtn[0] = (*this)[1] * v.z() - (*this)[2] * v.y();
            vrtn[1] = (*this)[2] * v.x() - (*this)[0] * v.z();
            vrtn[2] = (*this)[0] * v.y() - (*this)[1] * v.x();
            return vrtn;
        }

        /*!
         * Vector multiply *= operator.
         *
         * Cross product of this with another vector v (if N==3). Result written into
         * this.
         */
        template &lt;size_t _N = N, std::enable_if_t&lt;(_N==3), int&gt; = 0&gt;
        void operator*= (const Vector&lt;S, _N&gt;&amp; v) {
            Vector&lt;S, _N&gt; vtmp;
            vtmp[0] = (*this)[1] * v.z() - (*this)[2] * v.y();
            vtmp[1] = (*this)[2] * v.x() - (*this)[0] * v.z();
            vtmp[2] = (*this)[0] * v.y() - (*this)[1] * v.x();
            std::copy (vtmp.begin(), vtmp.end(), this-&gt;begin());
        }

        /*!
         * \brief Scalar (dot) product
         *
         * Compute the scalar product of this Vector and the Vector, v.
         *
         * \return scalar product
         */
        S dot (const Vector&lt;S, N&gt;&amp; v) const {
            auto vi = v.begin();
            auto dot_product = [vi](S a, S b) mutable { return a + b * (*vi++); };
            const S rtn = std::accumulate (this-&gt;begin(), this-&gt;end(), S{0}, dot_product);
            return rtn;
        }

        /*!
         * Scalar multiply * operator
         *
         * This function will only be defined if typename _S is a
         * scalar type. Multiplies this Vector&lt;S, N&gt; by s, element-wise.
         */
        template &lt;typename _S=S, std::enable_if_t&lt;std::is_scalar&lt;std::decay_t&lt;_S&gt;&gt;::value, int&gt; = 0 &gt;
        Vector&lt;_S, N&gt; operator* (const _S&amp; s) const {
            Vector&lt;_S, N&gt; rtn;
            auto mult_by_s = [s](_S coord) { return coord * s; };
            std::transform (this-&gt;begin(), this-&gt;end(), rtn.begin(), mult_by_s);
            return rtn;
        }

        /*!
         * Scalar multiply *= operator
         *
         * This function will only be defined if typename _S is a
         * scalar type. Multiplies this Vector&lt;S, N&gt; by s, element-wise.
         */
        template &lt;typename _S=S, std::enable_if_t&lt;std::is_scalar&lt;std::decay_t&lt;_S&gt;&gt;::value, int&gt; = 0 &gt;
        void operator*= (const _S&amp; s) {
            auto mult_by_s = [s](_S coord) { return coord * s; };
            std::transform (this-&gt;begin(), this-&gt;end(), this-&gt;begin(), mult_by_s);
        }

        /*!
         * Scalar divide by s
         */
        template &lt;typename _S=S, std::enable_if_t&lt;std::is_scalar&lt;std::decay_t&lt;_S&gt;&gt;::value, int&gt; = 0 &gt;
        Vector&lt;_S, N&gt; operator/ (const _S&amp; s) const {
            Vector&lt;_S, N&gt; rtn;
            auto div_by_s = [s](_S coord) { return coord / s; };
            std::transform (this-&gt;begin(), this-&gt;end(), rtn.begin(), div_by_s);
            return rtn;
        }

        /*!
         * Scalar divide by s
         */
        template &lt;typename _S=S, std::enable_if_t&lt;std::is_scalar&lt;std::decay_t&lt;_S&gt;&gt;::value, int&gt; = 0 &gt;
        void operator/= (const _S&amp; s) {
            auto div_by_s = [s](_S coord) { return coord / s; };
            std::transform (this-&gt;begin(), this-&gt;end(), this-&gt;begin(), div_by_s);
        }

        /*!
         * Vector addition operator
         */
        Vector&lt;S, N&gt; operator+ (const Vector&lt;S, N&gt;&amp; v) const {
            Vector&lt;S, N&gt; vrtn;
            auto vi = v.begin();
            auto add_v = [vi](S a) mutable { return a + (*vi++); };
            std::transform (this-&gt;begin(), this-&gt;end(), vrtn.begin(), add_v);
            return vrtn;
        }

        /*!
         * Vector addition operator
         */
        void operator+= (const Vector&lt;S, N&gt;&amp; v) {
            auto vi = v.begin();
            auto add_v = [vi](S a) mutable { return a + (*vi++); };
            std::transform (this-&gt;begin(), this-&gt;end(), this-&gt;begin(), add_v);
        }

        /*!
         * Vector subtraction operator
         */
        Vector&lt;S, N&gt; operator- (const Vector&lt;S, N&gt;&amp; v) const {
            Vector&lt;S, N&gt; vrtn;
            auto vi = v.begin();
            auto subtract_v = [vi](S a) mutable { return a - (*vi++); };
            std::transform (this-&gt;begin(), this-&gt;end(), vrtn.begin(), subtract_v);
            return vrtn;
        }

        /*!
         * Vector subtraction operator
         */
        void operator-= (const Vector&lt;S, N&gt;&amp; v) {
            auto vi = v.begin();
            auto subtract_v = [vi](S a) mutable { return a - (*vi++); };
            std::transform (this-&gt;begin(), this-&gt;end(), this-&gt;begin(), subtract_v);
        }

        /*!
         * Scalar addition
         */
        template &lt;typename _S=S, std::enable_if_t&lt;std::is_scalar&lt;std::decay_t&lt;_S&gt;&gt;::value, int&gt; = 0 &gt;
        Vector&lt;_S, N&gt; operator+ (const _S&amp; s) const {
            Vector&lt;_S, N&gt; rtn;
            auto add_s = [s](_S coord) { return coord + s; };
            std::transform (this-&gt;begin(), this-&gt;end(), rtn.begin(), add_s);
            return rtn;
        }

        /*!
         * Scalar addition
         */
        template &lt;typename _S=S, std::enable_if_t&lt;std::is_scalar&lt;std::decay_t&lt;_S&gt;&gt;::value, int&gt; = 0 &gt;
        void operator+= (const _S&amp; s) {
            auto add_s = [s](_S coord) { return coord + s; };
            std::transform (this-&gt;begin(), this-&gt;end(), this-&gt;begin(), add_s);
        }

        /*!
         * Scalar subtraction
         */
        template &lt;typename _S=S, std::enable_if_t&lt;std::is_scalar&lt;std::decay_t&lt;_S&gt;&gt;::value, int&gt; = 0 &gt;
        Vector&lt;_S, N&gt; operator- (const _S&amp; s) const {
            Vector&lt;_S, N&gt; rtn;
            auto subtract_s = [s](_S coord) { return coord - s; };
            std::transform (this-&gt;begin(), this-&gt;end(), rtn.begin(), subtract_s);
            return rtn;
        }

        /*!
         * Scalar subtraction
         */
        template &lt;typename _S=S, std::enable_if_t&lt;std::is_scalar&lt;std::decay_t&lt;_S&gt;&gt;::value, int&gt; = 0 &gt;
        void operator-= (const _S&amp; s) {
            auto subtract_s = [s](_S coord) { return coord - s; };
            std::transform (this-&gt;begin(), this-&gt;end(), this-&gt;begin(), subtract_s);
        }

        /*!
         * Overload the stream output operator
         */
        friend std::ostream&amp; operator&lt;&lt; &lt;S, N&gt; (std::ostream&amp; os, const Vector&lt;S, N&gt;&amp; v);
    };

    template &lt;typename S=float, size_t N=3&gt;
    std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, const Vector&lt;S, N&gt;&amp; v)
    {
        os &lt;&lt; v.str();
        return os;
    }

    /*
     * Random number generator classes outside scope of code review, but included so
     * that file compiles:
     */

    //! Generate uniform random numbers in a floating point format.
    template &lt;typename T = double&gt;
    class RandUniformReal
    {
    private:
        std::random_device rd{};
        std::mt19937_64 generator{rd()};
        std::uniform_real_distribution&lt;T&gt; dist;
    public:
        //! Default constructor gives RN generator which works in range [0,1)
        RandUniformReal (void) {
            typename std::uniform_real_distribution&lt;T&gt;::param_type prms (T{0}, T{1});
            this-&gt;dist.param (prms);
        }
        //! This constructor gives RN generator which works in range [a,b)
        RandUniformReal (T a, T b) {
            typename std::uniform_real_distribution&lt;T&gt;::param_type prms (a, b);
            this-&gt;dist.param (prms);
        }
        //! Get 1 random number from the generator
        T get (void) { return this-&gt;dist (this-&gt;generator); }
        //! Get n random numbers from the generator
        std::vector&lt;T&gt; get (size_t n) {
            std::vector&lt;T&gt; rtn (n, T{0});
            for (size_t i = 0; i &lt; n; ++i) {
                rtn[i] = this-&gt;dist (this-&gt;generator);
            }
            return rtn;
        }
        T min (void) { return this-&gt;dist.min(); }
        T max (void) { return this-&gt;dist.max(); }
    };

    //! Generate uniform random numbers in a integer format
    template &lt;typename T = unsigned int&gt;
    class RandUniformInt
    {
    private:
        std::random_device rd{};
        std::mt19937_64 generator{rd()};
        std::uniform_int_distribution&lt;T&gt; dist;
    public:
        //! Default constructor gives an integer RNG which works in range [0,(type max))
        RandUniformInt (void) {
            typename std::uniform_int_distribution&lt;T&gt;::param_type prms (std::numeric_limits&lt;T&gt;::min(),
                                                                        std::numeric_limits&lt;T&gt;::max());
            this-&gt;dist.param (prms);
        }
        //! This constructor gives RN generator which works in range [a,b)
        RandUniformInt (T a, T b) {
            typename std::uniform_int_distribution&lt;T&gt;::param_type prms (a, b);
            this-&gt;dist.param (prms);
        }
        //! Get 1 random number from the generator
        T get (void) { return this-&gt;dist (this-&gt;generator); }
        //! Get n random numbers from the generator
        std::vector&lt;T&gt; get (size_t n) {
            std::vector&lt;T&gt; rtn (n, T{0});
            for (size_t i = 0; i &lt; n; ++i) {
                rtn[i] = this-&gt;dist (this-&gt;generator);
            }
            return rtn;
        }
        T min (void) { return this-&gt;dist.min(); }
        T max (void) { return this-&gt;dist.max(); }
    };

} // namespace morph
</code></pre>

<p>The test program:</p>

<pre class="lang-cpp prettyprint-override"><code>#include "Vector.h"
using morph::Vector;
using std::cout;
using std::endl;
using std::array;

int main() {
    int rtn = 0;
    Vector&lt;float, 4&gt; v = {1,2,3};
    cout &lt;&lt; "x component of v: " &lt;&lt; v.x() &lt;&lt; endl;
    v.renormalize();
    cout &lt;&lt; "After renormalize: " &lt;&lt; v &lt;&lt; "; unit vector? " &lt;&lt; (v.checkunit() ? "yes" : "no") &lt;&lt; endl;
    v.randomize();
    cout &lt;&lt; "After randomize: " &lt;&lt; v &lt;&lt; endl;
    Vector&lt;int, 5&gt; vi;
    vi.randomize();
    cout &lt;&lt; "After randomize of 5D int vector: " &lt;&lt; vi &lt;&lt; endl;
    cout &lt;&lt; "Length: " &lt;&lt; vi.length() &lt;&lt; endl;
    // Test assignment
    Vector&lt;int, 5&gt; vi2 = vi;
    cout &lt;&lt; "Copy of int vector: " &lt;&lt; vi2 &lt;&lt; endl;
    // Test comparison
    cout &lt;&lt; "vi == vi2? " &lt;&lt; (vi == vi2 ? "yes" : "no") &lt;&lt; endl;
    // Test negate
    Vector&lt;int, 5&gt; vi3 = -vi;
    cout &lt;&lt; "-ve Copy of int vector: " &lt;&lt; vi3 &lt;&lt; endl;
    // Test comparison
    cout &lt;&lt; "vi == vi3? " &lt;&lt; (vi == vi3 ? "yes" : "no") &lt;&lt; endl;
    // Test cross product (3D only
    Vector&lt;double, 3&gt; a = {1,0,0};
    Vector&lt;double, 3&gt; b = {0,1,0};
    Vector&lt;double, 3&gt; c = a * b;
    cout &lt;&lt; a &lt;&lt; "*" &lt;&lt; b &lt;&lt; "=" &lt;&lt; c &lt;&lt; endl;
    // dot product
    Vector&lt;int, 2&gt; vv1 = {5,8};
    Vector&lt;int, 2&gt; vv2 = {2,5};
    int dp = vv1.dot (vv2);
    cout &lt;&lt; vv1 &lt;&lt; "." &lt;&lt; vv2 &lt;&lt; " = " &lt;&lt; dp &lt;&lt; endl;
#if 0 // No good:
    // Test init from array
    array&lt;float, 3&gt; arr = { 2,3,4 };
    Vector&lt;float, 3&gt; varr = arr; // Tried overloading operator= to no avail.
    cout &lt;&lt; "Vector from array: " &lt;&lt; varr &lt;&lt; endl;
#endif
    // Scalar multiply
    cout &lt;&lt; vv2;
    vv2 *= 2UL;
    cout &lt;&lt; " * 2 = " &lt;&lt; vv2 &lt;&lt; endl;
    Vector&lt;int, 2&gt; vv4 = vv1 * 3;
    cout &lt;&lt; "vv1 * 3 = " &lt;&lt; vv4 &lt;&lt; endl;
#if 0 // No good, as expected:
    // Scalar multiply with different type
    double dbl = 3.0;
    Vector&lt;int, 2&gt; vv5 = vv1 * dbl;
    cout &lt;&lt; "vv1 * 3.0 = " &lt;&lt; vv4 &lt;&lt; endl;
#endif
    // Scalar division
    Vector&lt;double, 3&gt; d = a/3.0;
    cout &lt;&lt; "a / 3.0 = " &lt;&lt; d &lt;&lt; endl;
    // Vector addition
    Vector&lt;double, 3&gt; e = a+b;
    cout &lt;&lt; "a + b = " &lt;&lt; e &lt;&lt; endl;
    // Vector subtraction
    Vector&lt;double, 3&gt; f = a-b;
    cout &lt;&lt; "a - b = " &lt;&lt; f &lt;&lt; endl;
    // Test default template args
    Vector&lt;double&gt; vd_def;
    vd_def.randomize();
    cout &lt;&lt; "Vector&lt;double&gt; and randomize: " &lt;&lt; vd_def &lt;&lt; endl;
    Vector&lt;&gt; v_def;
    v_def.randomize();
    cout &lt;&lt; "Vector&lt;&gt; and randomize: " &lt;&lt; v_def &lt;&lt; endl;

    // dot product of large vector
    const size_t n = 1000000; // Approx limit on my laptop: 1045000
    Vector&lt;float, n&gt; big1;
    Vector&lt;float, n&gt; big2;
    big1.randomize();
    big2.randomize();
    float bdp = big1.dot(big2);
    cout &lt;&lt; "(N="&lt;&lt;n&lt;&lt;") big1.big2 = " &lt;&lt; bdp &lt;&lt; endl;

    // Test set_from
    Vector&lt;double, 3&gt; d1;
    array&lt;double, 3&gt; a1 = { 5,6,7 };
    d1.set_from (a1);
    cout &lt;&lt; "After set_from(), d1 should be (5,6,7): " &lt;&lt; d1 &lt;&lt; endl;
    array&lt;double, 4&gt; a2 = { 5,6,8,8 };
    d1.set_from (a2);
    cout &lt;&lt; "After set_from(), d1 should be (5,6,8): " &lt;&lt; d1 &lt;&lt; endl;

    return rtn;
}
<span class="math-container">```</span>
</code></pre>
    </div>