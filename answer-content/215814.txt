<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no need to define a class <em>at all</em>. Everything you want to do, you can do with extension methods:</p>

<ul>
<li><p>The <code>Length</code> field is completely unnecessary. There is not a need to make <code>Length</code> a synonym for <code>Count</code>.  Yes, it is unfortunate that in .NET some collections have <code>Count</code> and some have <code>Length</code>. It's a dumb inconsistency. Live with it.</p></li>
<li><p>The indexer with the fancy wraparound behavior can be replaced by an extension method:</p></li>
</ul>

<hr>

<pre><code>public static T Index&lt;T&gt;(this IImmutableList&lt;T&gt; items, int i) =&gt; 
  items[i &gt;= 0 ? i : items.Count + i]
</code></pre>

<hr>

<ul>
<li>The <code>AsString</code> can also be replaced with an extension method, or even better, two:</li>
</ul>

<hr>

<pre><code>public static string WithSpaces&lt;T&gt;(this IEnumerable&lt;T&gt; items) =&gt;
  string.Join(" ", items);

public static string AsHex(this IEnumerable&lt;byte&gt; bytes) =&gt; 
  bytes.Select(b =&gt; $"0x{b:X2}").WithSpaces();
</code></pre>

<hr>

<p>And now you can delete <code>class Bytes</code> and just use an <code>ImmutableList&lt;byte&gt;</code> in all places where you used <code>Bytes</code> before.  Want to index it with your fancy indexer?  <code>myBytes.Index(-1)</code>, done.  Want a hex string? <code>myBytes.ToHex()</code>, done.  No class required.</p>

<blockquote>
  <p>global imports and polluting the global namespace are almost unbearable to me</p>
</blockquote>

<p>Well, you be you, but C# programmers do not consider <code>using System.Collections.Generic;</code> to be "polluting the global namespace".  The notion that bringing useful types into scope is "pollution" is a strange one.</p>

<blockquote>
  <p>this class is meant to be inherited by multiple derived classes, which actually define the constants.</p>
</blockquote>

<p>Please do not. There is no reason you've given to build an inheritance hierarchy for <em>constant byte sequences</em>.  Just make an <code>ImmutableList&lt;byte&gt;</code> when you need one!</p>

<p>You may be suffering from a condition I call "object oriented happiness syndrome", which is a condition common to OO programmers who think they have to use OO techniques in order to solve problems that they don't actually have. You want an immutable sequence of bytes, then <em>make an immutable sequence of bytes</em>. Don't make a class and then have to figure out an inheritance mechanism that you don't need. OO techniques are for organizing large bodies of code written by teams that have to communicate across organizational boundaries; you don't have to use all that ceremony to represent what is essentially a string!</p>
    </div>