<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That last linq routine was half baked. Moving to a more Drier Approach for bitmap handling.</p>

<p>First here is the new Search Routine</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace AutoBot
{
    public partial class ActiveScreenMatch
    {
        public static Point ScreenMatch(BitData Target = default)
        {
            if (Target == default)
            {
                return default;
            }
            var TargetArea = Target.GetBitData();

            int SkippedBlackLines = 0;
            foreach (bool[] bl1 in TargetArea)
            {
                if (bl1.Any(x =&gt; x))
                {
                    break;
                }
                else
                {
                    SkippedBlackLines++;
                }
            }
            TargetArea = TargetArea.Skip(SkippedBlackLines).ToArray();

            Bitmap SourceImage = GetBlackWhiteAt(new Point(0, 0), new Size(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height));

            BitData SourceData = new BitData(dataMap: SourceImage);

            var SourceArea = SourceData.GetBitData();

            SourceImage.Dispose();

            var m = TargetArea.Count() -1;

            return (from line in Enumerable.Range(0, SourceArea.Count() - 1)
                    let Index = SubListIndex(SourceArea.ElementAt(line), 0, TargetArea.ElementAt(0))
                    where Index != -1 &amp;&amp; Index != 0 &amp;&amp; line &gt; m
                    let SourceLast = SourceArea.ElementAt(line + m).Skip(Index).Take(TargetArea.ElementAt(0).Length).ToArray()
                    let TargetLast = TargetArea.ElementAt(m).ToArray()
                    let SourceMid = SourceArea.ElementAt(line + (m/2)).Skip(Index).Take(TargetArea.ElementAt(0).Length).ToArray()
                    let TargetMid = TargetArea.ElementAt(m/2).ToArray()
                    where TargetLast.SequenceEqual(SourceLast) &amp;&amp; TargetMid.SequenceEqual(SourceMid)
                    select new Point(Index + (TargetArea.ElementAt(0).Length / 2), line + (TargetArea.ElementAt(0).Length / 2))).FirstOrDefault();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static int SubListIndex(IEnumerable&lt;bool&gt; list, int start, IEnumerable&lt;bool&gt; sublist)
        {
            for (int listIndex = start; listIndex &lt; list.Count() - sublist.Count() + 1; listIndex++)
            {
                int count = 0;
                while (count &lt; sublist.Count() &amp;&amp; sublist.ElementAt(count).Equals(list.ElementAt(listIndex + count)))
                    count++;
                if (count == sublist.Count())
                    return listIndex;
            }
            return -1;
        }

        public static Bitmap GetBlackWhiteAt(Point On, Size PickArea)
        {
            // Create a new bitmap.
            using (Bitmap bmp = PrintWindow())
                return bmp.Clone(new Rectangle(On, PickArea), PixelFormat.Format1bppIndexed);
        }

        private static void PrintScreen()
        {
            keybd_event(VKey.VK_SNAPSHOT, 0, KEYEVENTF_EXTENDEDKEY, 0);
            keybd_event(VKey.VK_SNAPSHOT, 0, KEYEVENTF_KEYUP, 0);
        }

        private static Bitmap PrintWindow()
        {
            PrintScreen();
            Application.DoEvents();
            if (Clipboard.ContainsImage())
            {
                using (Image img = Clipboard.GetImage())
                {
                    if (img != null)
                    {
                        img.Save("Output.PNG", ImageFormat.Png);
                        return new Bitmap(img);
                    }
                }
            }
            return PrintWindow();
        }
    }

    public static class VKey
    {
        public readonly static byte VK_BACK = 0x08;
        public readonly static byte VK_TAB = 0x09;
        public readonly static byte VK_RETURN = 0x0D;
        public readonly static byte VK_SHIFT = 0x10;
        public readonly static byte VK_CONTROL = 0x11;
        public readonly static byte VK_MENU = 0x12;
        public readonly static byte VK_PAUSE = 0x13;
        public readonly static byte VK_CAPITAL = 0x14;
        public readonly static byte VK_ESCAPE = 0x1B;
        public readonly static byte VK_SPACE = 0x20;
        public readonly static byte VK_END = 0x23;
        public readonly static byte VK_HOME = 0x24;
        public readonly static byte VK_LEFT = 0x25;
        public readonly static byte VK_UP = 0x26;
        public readonly static byte VK_RIGHT = 0x27;
        public readonly static byte VK_DOWN = 0x28;
        public readonly static byte VK_PRINT = 0x2A;
        public readonly static byte VK_SNAPSHOT = 0x2C;
        public readonly static byte VK_INSERT = 0x2D;
        public readonly static byte VK_DELETE = 0x2E;
        public readonly static byte VK_LWIN = 0x5B;
        public readonly static byte VK_RWIN = 0x5C;
        public readonly static byte VK_NUMPAD0 = 0x60;
        public readonly static byte VK_NUMPAD1 = 0x61;
        public readonly static byte VK_NUMPAD2 = 0x62;
        public readonly static byte VK_NUMPAD3 = 0x63;
        public readonly static byte VK_NUMPAD4 = 0x64;
        public readonly static byte VK_NUMPAD5 = 0x65;
        public readonly static byte VK_NUMPAD6 = 0x66;
        public readonly static byte VK_NUMPAD7 = 0x67;
        public readonly static byte VK_NUMPAD8 = 0x68;
        public readonly static byte VK_NUMPAD9 = 0x69;
        public readonly static byte VK_MULTIPLY = 0x6A;
        public readonly static byte VK_ADD = 0x6B;
        public readonly static byte VK_SEPARATOR = 0x6C;
        public readonly static byte VK_SUBTRACT = 0x6D;
        public readonly static byte VK_DECIMAL = 0x6E;
        public readonly static byte VK_DIVIDE = 0x6F;
        public readonly static byte VK_F1 = 0x70;
        public readonly static byte VK_F2 = 0x71;
        public readonly static byte VK_F3 = 0x72;
        public readonly static byte VK_F4 = 0x73;
        public readonly static byte VK_F5 = 0x74;
        public readonly static byte VK_F6 = 0x75;
        public readonly static byte VK_F7 = 0x76;
        public readonly static byte VK_F8 = 0x77;
        public readonly static byte VK_F9 = 0x78;
        public readonly static byte VK_F10 = 0x79;
        public readonly static byte VK_F11 = 0x7A;
        public readonly static byte VK_F12 = 0x7B;
        public readonly static byte VK_NUMLOCK = 0x90;
        public readonly static byte VK_SCROLL = 0x91;
        public readonly static byte VK_LSHIFT = 0xA0;
        public readonly static byte VK_RSHIFT = 0xA1;
        public readonly static byte VK_LCONTROL = 0xA2;
        public readonly static byte VK_RCONTROL = 0xA3;
        public readonly static byte VK_LMENU = 0xA4;
        public readonly static byte VK_RMENU = 0xA5;
    }
}
</code></pre>

<p>And the BitData Class</p>

<pre><code>using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace AutoBot
{
    public class BitData
    {
        private Rectangle DataRect { get; }
        private string DataPath { get; }
        private Stream DataStream { get; }
        private Image DataImage { get; }
        private Bitmap DataMap { get; }

        public IEnumerable&lt;bool[]&gt; GetBitData()
        {
            if (DataMap == default &amp;&amp; DataRect == default &amp;&amp; string.IsNullOrEmpty(DataPath) &amp;&amp; DataStream == default &amp;&amp; DataImage == default)
            {
                return default;
            }

            Bitmap TargetImage;
            if (DataMap != default)
            {
                TargetImage = DataMap;
            }
            else if (DataRect != default)
            {
                TargetImage = ActiveScreenMatch.GetBlackWhiteAt(DataRect.Location, DataRect.Size);
            }
            else if (!string.IsNullOrEmpty(DataPath))
            {
                if (File.Exists(DataPath))
                {
                    using (var Image = new Bitmap(DataPath))
                        TargetImage = Image.Clone(new Rectangle(new Point(0, 0), new Size(Image.Width, Image.Height)), PixelFormat.Format1bppIndexed);
                }
                else
                {
                    return default;
                }
            }
            else if (DataStream != default)
            {
                using (var Image = new Bitmap(DataStream))
                    TargetImage = Image.Clone(new Rectangle(new Point(0, 0), new Size(Image.Width, Image.Height)), PixelFormat.Format1bppIndexed);
            }
            else
            {
                using (var Image = new Bitmap(DataImage))
                    TargetImage = Image.Clone(new Rectangle(new Point(0, 0), new Size(Image.Width, Image.Height)), PixelFormat.Format1bppIndexed);
            }

            var Array = GetBooleanArray(TargetImage);

            TargetImage.Dispose();

            return Array;
        }

        public BitData(Rectangle dataRect = default, string dataPath = default, Stream dataStream = default, Image dataImage = default, Bitmap dataMap = default)
        {
            DataRect = dataRect;
            DataPath = dataPath;
            DataStream = dataStream;
            DataImage = dataImage;
            DataMap = dataMap;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static IEnumerable&lt;bool[]&gt; GetBooleanArray(Bitmap bitmap)
        {
            BitmapData data = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadOnly, PixelFormat.Format1bppIndexed);
            bool[][] ba2 = new bool[bitmap.Height][];
            for (int y = 0; y &lt;= bitmap.Height - 1; y++)
            {
                ba2[y] = new bool[bitmap.Width];
                for (int x = 0; x &lt;= bitmap.Width - 1; x++)
                {
                    if (GetIndexedPixel(x, y, data) &gt; 0)
                    {
                        ba2[y][x] = true;
                    }
                }
            }

            bitmap.UnlockBits(data);
            return ba2;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static int GetIndexedPixel(int x, int y, BitmapData data)
        {
            var index = (y * data.Stride) + (x &gt;&gt; 3);
            var mask = (byte)(0x80 &gt;&gt; (x &amp; 0x7));
            byte ret = Marshal.ReadByte(data.Scan0, index);
            ret &amp;= mask;
            return ret;
        }
    }
}
</code></pre>

<p>I think this version is much improved and would greatly appreciate another's eye.</p>
    </div>