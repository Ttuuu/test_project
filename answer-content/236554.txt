<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Building off the the already excellent points made by Juho,</p>

<h1>Redundant arguments</h1>

<p>Within your member function, you never make reference to the object being called on. Take for instance your <code>ComplexNumber::add</code> function. A more sound object-oriented implementation might resemble</p>

<pre><code>        void add(ComplexNumber other) {

            //Just add real- and imaginary-parts
            double real = this-&gt;real + other.real;
            double imaginary = this-&gt;imaginary + other.imaginary;
            ComplexNumber c = ComplexNumber(real, imaginary);
            cout &lt;&lt; "a + b = " &lt;&lt; c.real &lt;&lt; " + (" &lt;&lt; c.imaginary &lt;&lt; ") * i" &lt;&lt; endl; 
        }
</code></pre>

<h1>No Returns</h1>

<p>The addition, subtraction, multiplication, and division operation you implemented aren't terribly useful to the user since they have no way to access the result. Consider updating all of these member function to return a new complex number, which might look like:</p>

<pre><code>        ComplexNumber add(ComplexNumber other) {

            //Just add real- and imaginary-parts
            double real = this-&gt;real + other.real;
            double imaginary = this-&gt;imaginary + other.imaginary;
            ComplexNumber c = ComplexNumber(real, imaginary);
            cout &lt;&lt; "a + b = " &lt;&lt; c.real &lt;&lt; " + (" &lt;&lt; c.imaginary &lt;&lt; ") * i" &lt;&lt; endl; 
            return c;
        }
</code></pre>

<p>Now the can perform operations such as <code>ComplexNumber sum = a.add(b)</code>.</p>

<h1>Printing within functions</h1>

<p>Write to stdout from inside of a function is usually considered bad practice. If, for instance, I wanted to use your complex number library to write my own CLI application, I would have not way prevent every complex number addition from being printed out. This is rather undesirable. I would recommend moving all of your statements with <code>cout</code> to your <code>main</code> function, leaving your member functions to resemble</p>

<pre><code>        ComplexNumber add(ComplexNumber other) {

            //Just add real- and imaginary-parts
            double real = this-&gt;real + other.real;
            double imaginary = this-&gt;imaginary + other.imaginary;
            ComplexNumber c = ComplexNumber(real, imaginary);
            return c;
        }
</code></pre>

<h1>Operator Overloading</h1>

<p>This is a more advanced C++ concept, but it is good to be aware of. Instead of writing</p>

<pre><code>ComplexNumber sum = a.add(b);
</code></pre>

<p>you can instead have the interface</p>

<pre><code>ComplexNumber sum = a + b;
</code></pre>

<p>by overloading the addition operator for your class. A tutorial describing how to accomplish this can be found <a href="https://www.learncpp.com/cpp-tutorial/92-overloading-the-arithmetic-operators-using-friend-functions/" rel="noreferrer">here</a>. A possible implementation might look like</p>

<pre><code>        ComplexNumber operator+(ComplexNumber other) {

            //Just add real- and imaginary-parts
            double real = this-&gt;real + other.real;
            double imaginary = this-&gt;imaginary + other.imaginary;
            ComplexNumber c = ComplexNumber(real, imaginary);
            return c;
        }
<span class="math-container">```</span>
</code></pre>
    </div>