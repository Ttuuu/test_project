<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre class="lang-java prettyprint-override"><code>    private Integer[] marks;
</code></pre>

<p><a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html" rel="nofollow noreferrer">There's a difference between int and Integer</a>, be aware of it.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>private char grade;
</code></pre>

<p>For better clarity, you want to use an <code>enum</code>:</p>

<pre class="lang-java prettyprint-override"><code>public enum Grade {
    O,
    A,
    B,
    C,
    D,
    E,
    F
}
</code></pre>

<p>You could even assign it ranges, which would make it easy to fetch one:</p>

<pre class="lang-java prettyprint-override"><code>public enum Grade {
    O(80, 100),
    A(50, 80),
    F(0, 50);

    private int lowerBound;
    private int upperBound;

    private Grade(int lowerBound, int upperBound) {
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
    }

    public static final Grade getGrade(float gradeAverage) {
        for (Grade grade : values()) {
            if (grade.lowerBound &gt;= gradeAverage &amp;&amp; grade.upperBound &lt;= gradeAverage) {
                return grade;
            }
        }

        return null; // IllegalStateException?
    }
}
</code></pre>

<hr>

<pre class="lang-java prettyprint-override"><code>public Integer[] setMarks(Integer[] marks){
    return this.marks = getMarks();
}
</code></pre>

<p>That's an odd pattern I haven't seen before, the traditional pattern is to return nothing. But [the fluent pattern](<a href="https://en.wikipedia.org/wiki/Fluent_interface#Java0" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Fluent_interface#Java0</a> is also very nice:</p>

<pre class="lang-java prettyprint-override"><code>public Student setMarks(Integer[] marks){
    this.marks = marks;

    return this;
}
</code></pre>

<hr>

<pre class="lang-java prettyprint-override"><code>return this.marks = getMarks();
</code></pre>

<p>That's a nice typo.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>public void calculateAvg(){
    StudentMain sm = new StudentMain ();
    int sum=0;
    //int no=0;
    for(int i=0;i&lt;marks.length;i++){
        sum+=marks[i];
    }
    float avg=sum/sm.n;
    //System.out.println(sum);
    setAverage(avg);
}
</code></pre>

<p>Now that's an odd one, and an error I believe. You don't want to create a new instance of <code>StudentMain</code> here, you want to pass the values you need.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>float avg=sum/sm.n;
</code></pre>

<p>That's a bug, dividing and <code>int</code> by an <code>int</code> will yield an <code>int</code>, not a <code>float</code>:</p>

<pre class="lang-java prettyprint-override"><code>float result = 5/2; // == 2 int
float result = 5/(float)2; // == 2.5 float
</code></pre>

<hr>

<pre class="lang-java prettyprint-override"><code>if (avg&gt;+80 &amp;&amp; avg&lt;+100){
   setGrade('O');
}  
else if (avg&gt;=50 &amp;&amp; avg&lt;80){
    setGrade('A');
}
else {
   setGrade('F');
}
</code></pre>

<p>That's another bug, a student with a perfect 100 (though, unlikely because of <code>float</code>), will get an <code>F</code>.</p>

<p>Also, the leading "+" is unconventional.</p>

<hr>

<pre class="lang-java prettyprint-override"><code>static Scanner sc = new Scanner(System.in);
static int n;
static List&lt;Integer&gt; al = new ArrayList&lt;Integer&gt;();
</code></pre>

<p>Stop shorting your (variable) names, you're gaining <strong><em>nothing</em></strong> from it, the code is only harder to read because of it.</p>

<hr>

<p>Also, keep your code clean, use git or mercurial and commit your code and then remove what you don't need anymore.</p>
    </div>