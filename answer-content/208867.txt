<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is actually a good place for a <code>class</code>. It allows you to define methods on the vector object itself and it also allows you to document your data format (it took me a bit to figure out that you initialize your vector as <code>[magnitude, angle_from_x_axis_in_degrees]</code>. It also means that you don't need to repeat yourself quite so often. Internally I would store the vector as its x and y components, since that is usually more useful (especially when adding two vectors):</p>

<pre><code>from math import sqrt, cos, sin, radians

class Vector2D:
    """A 2D vector that supports addition, calculation of magnitude
       and initialization from (magnitude, angle)."""

    def __init__(self, x, y):
        """Standard constructor with x and y components."""
        self.x = x
        self.y = y

    @classmethod
    def from_mag_and_angle(cls, magnitude, angle):
        """Alternative constructor from magnitude and angle from x-axis in degrees."""
        x = magnitude * cos(radians(angle))
        y = magnitude * sin(radians(angle))
        return cls(x, y)

    def __add__(self, other):
        """v1 + v2 if both are 2D vectors"""
        if not isinstance(other, self.__class__):
            return NotImplemented
        return self.__class__(self.x + other.x, self.y + other.y)

    @property
    def magnitude(self):
        """Magnitude/length of vector"""
        return sqrt(self.x**2 + self.y**2)

    def __str__(self):
        """Readable representation of vector as list"""
        return f"[{self.x}, {self.y}]"
</code></pre>

<p>This uses two differently decorated methods. <a href="https://stackoverflow.com/questions/12179271/meaning-of-classmethod-and-staticmethod-for-beginner"><code>@classmethod</code></a> is basically a way to define alternative constructors (here instead of giving the components we give the magnitude and angle). <a href="https://www.programiz.com/python-programming/property" rel="nofollow noreferrer"><code>@property</code></a> allows a method to be accessed like an attribute, so we can write <code>v.magnitude</code>, instead of <code>v.magnitude()</code>. This way we do not need to update the magnitude if we change the x or y components, it is calculated whenever we access the attribute.</p>

<p>Finally, getting the x and y components does not need all your special cases. The formula is valid in all four quadrants. Only when doing the opposite (getting the angle) do you need to special case (actually you don't because it is done for you in <code>math.atan2</code>).</p>

<p>The <code>__add__</code> and <code>__str__</code> methods are <a href="https://www.python-course.eu/python3_magic_methods.php" rel="nofollow noreferrer">magic (or dunder) methods</a>. They allow you to give custom classes built-in behaviour. The former allows you to write <code>v1 + v2</code> and the latter defines <code>str(v)</code>. <code>__str__</code> is also called by <code>str.format</code>, so printing the coordinates of the vector is a lot easier.</p>

<p>You might want to define, e.g. <code>__mul__</code> for multiplication with another vector or a scalar.</p>

<p>This can be used similarly to your code:</p>

<pre><code>if __name__ == "__main__":
    vector_A = Vector2D.from_mag_and_angle(2, 45)
    vector_B = Vector2D.from_mag_and_angle(*[6, 73.5])
    vector_C = vector_A + vector_B

    print(f'Coordinates of the endpoint of your vector are {vector_C} and its magnitude is {vector_C.magnitude}.')
</code></pre>

<p>The execution of this code is protected by a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script from another script.</p>

<p>You can use tuple unpacking to unpack your list into the two arguments of the classmethod (as done for the second vector) or just specify the parameters directly (as done for the first).</p>
    </div>