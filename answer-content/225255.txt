<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to C++!  Java and C++ are quite different languages with different programming idioms and techniques, so hopefully this review will help you get better in C++.</p>

<h1><code>main.cpp</code></h1>

<p>The first thing I noticed is that you omitted the <code>#include</code> when posting your <code>main.cpp</code> code.  I checked your GitHub repository and noticed that <code>#include "Game.hpp"</code> is present in the <code>main.cpp</code> file.  Please post complete code in the future.</p>

<p>When I see the line</p>

<pre><code>Game game(2048, 1024, "Game Of Life");
</code></pre>

<p>I wonder which of the two numbers is the width and which is the height (if they are supposed to be dimensions at all) and what the <code>"Game Of Life"</code> string means.  You didn't post your <code>Game.hpp</code> file, but I go ahead and check it.  There is a constructor:</p>

<pre><code>Game(const int width, const int height, const std::string title);
</code></pre>

<p>which answers the questions.  It would be better if a reader does not need to examine another file to understand the code.  In this case, a simple comment is sufficient:</p>

<pre><code>// creates a 2048 x 1024 game with title "Game Of Life"
Game game(2048, 1024, "Game Of Life");
</code></pre>

<p>This approach has drawbacks: the comment is invalidated when the code changes, and comments shouldn't be used to indicate how the code works.  For more complicated cases, the <a href="https://isocpp.org/wiki/faq/ctors#named-parameter-idiom" rel="nofollow noreferrer">named argument idiom</a> is commonly used.</p>

<h1><code>Game.cpp</code></h1>

<p>You didn't actually post <code>Game.hpp</code>.  I can check your code on GitHub, but this answer can only review <code>Game.cpp</code>.</p>

<p>You included <code>&lt;time.h&gt;</code>.  C headers of the form <code>&lt;time.h&gt;</code> are deprecated in favor of <code>&lt;ctime&gt;</code>.  In fact, you should be using <code>&lt;chrono&gt;</code> instead of <code>&lt;ctime&gt;</code> in C++.</p>

<pre><code>const int Game::FPS = 25;
const int Game::SKIP_TICKS = 1000 / FPS;
</code></pre>

<p>These two lines are (probably) definitions of static <code>const</code> variables.  They can be made <code>constexpr</code> and defined directly in-class.  <code>ALL_CAPS</code> identifiers are usually reserved for macros, and constants shouldn't really use them.  In C++, types are used to assign values meanings.  Make a type alias <code>fps_t</code> for the type of <code>fps</code>:</p>

<pre><code>using fps_t = int;
</code></pre>

<p>Also, <code>skip_ticks</code> seems to be a time duration instead of a pure integer, so use <code>chrono</code>:</p>

<pre><code>// in the Game class declaration
static constexpr fps_t fps = 25;
static constexpr auto skip_ticks = 1000ms / fps;    
</code></pre>

<p>(Assumes <code>using namespace std::chrono_literals</code>.)  <code>1000ms</code> is unambiguously 1000 milliseconds instead of 1000 microseconds or 1000 Minecraft ticks.</p>

<p><code>this-&gt;</code> has limited use and is redundant in your case, so leave them out.  This applies to all functions.</p>

<p>Your constructor declares all parameters as <code>const</code>.  This is not necessary.  Also, <code>title</code> should be passed by <code>std::string_view</code>.</p>

<p>The <code>run</code> function is where the C time facilities become a bit unhandy with <code>timespec</code> and pointers.  Here's what the same code looks like when written using C++ chrono facilities: (just an idea, not tested because I am not familiar with SFML clocks)</p>

<pre><code>void Game::run()
{
    std::chrono::milliseconds nextGameTick{clock.getElapsedTime().asMilliseconds()};
    while (data-&gt;window.isOpen()) {
        updateGame();
        displayGame();

        nextGameTick += skip_ticks;                               // the units are handled properly by the type system

        std::chrono::milliseconds current_time{clock.getElapsedTime().asMilliseconds()};
        std::this_thread::sleep_for(nextGameTick - current_time); // more intuitive than timespec and nanosleep
    }
}
</code></pre>

<p>This needs <code>#include &lt;chrono&gt;</code> and <code>#include &lt;thread&gt;</code> (for <a href="https://en.cppreference.com/w/cpp/thread/sleep_until" rel="nofollow noreferrer"><code>sleep_until</code></a>).</p>

<p>The <code>updateGame</code> function uses a bunch of <code>if</code>s.  At least they should be made <code>else if</code> to avoid redundant checking.  And the right tool here is <code>switch</code>:</p>

<pre><code>switch (event.type) {
case sf::Event::Closed:
    // ...
    break;
case sf::Event::MouseButtonPressed:
    // ...
    break;
case sf::Event::KeyReleased:
    // ...
    break;
}
</code></pre>

<p>Your use of <code>endl</code> is justified because flushing is required here.  This may deserve a comment.</p>

<h1><code>AssetManager.cpp</code></h1>

<p>Both functions should pass the strings by <code>string_view</code> instead of <code>string</code> by value.  And it may be more convenient for <code>getTexture</code> to return a reference instead of a pointer.</p>

<h1><code>LifeState.cpp</code></h1>

<p>Several of your lambdas can be simplified with default captures.  For example, <code>[=]</code> instead of <code>[tile, posX, posY]</code>, and <code>[&amp;]</code> instead of <code>[&amp;translated_pos, this]</code>.  The lambda in <code>draw</code> can also be <code>[&amp;]</code> if you make <code>getTexture</code> return a reference as recommended above, or make <code>tile</code> and <code>tile2</code> references.</p>

<p>The process of assigning the game data should probably be in the constructor of the <code>LifeState</code> class instead of the <code>init</code> function.  Don't name the parameter identically to the data member.  <code>boolean</code> is not a useful name for the lambda.  <code>always_false</code> is better.</p>

<p>The <code>update</code> function can similarly be rewritten using <code>chrono</code>.</p>

<p>In the <code>getNeighbours</code> function, use prefix <code>++</code> instead of postfix <code>++</code>.  Replace all <code>neighbours++</code> with <code>++neighbours</code>.  And the logic should probably be simplified or organized somehow ...</p>

<h1><code>Grid.hpp</code></h1>

<p>Generic templates are not easy to get right.  You definitely shouldn't be implementing <code>Grid</code> yourself in this project.  Use an existing library instead.</p>

<p>A <code>vector&lt;vector&lt;T&gt;&gt;</code> doesn't feel good.  A library should use contiguous memory internally.</p>

<p>You are using <code>.at</code> all over the place.  Use <code>[]</code> when you have control over the index to reduce performance penalty.</p>

<p><code>fill</code> should be a constructor, and should accept any callable object.  <code>std::function</code> shouldn't be used here at all.  And in this case, the use of <code>std::endl</code> is inherently wrong â€” you don't need to flush every single time and <code>'\n'</code> is the way to go.  <code>int</code> also doesn't feel right here.  And your implementation is needlessly complex.  Here's a basic proofread (not tested):</p>

<pre><code>template &lt;typename T, typename F&gt;
Grid&lt;T&gt;::Grid(size_type x, size_type y, F f)
    :data(x)
{
    for (size_type i = 0; i &lt; x; ++i) {
        data[i].reserve(y);
        std::cout &lt;&lt; y &lt;&lt; '\n';
        for (size_type j = 0; j &lt; y; ++j) {
            data[i].push_back(f(i, j, i + 1, y)); // the arguments are guessed
        }
    }
}
</code></pre>

<p>where <code>size_type</code> is declared beforehand with</p>

<pre><code>using size_type = typename decltype(data)::size_type;
</code></pre>

<p>I don't see how <code>sizeY</code> should be taking an argument.  The grid is supposed to be rectangular, right?</p>

<p>The <code>get</code> and <code>set</code> functions also feel a bit anti-C++-ish.  <code>get</code> should be made <code>const</code>.  I'd expect this in C++:</p>

<pre><code>template &lt;typename T&gt;
T&amp; Grid&lt;T&gt;::operator()(size_type x, size_type y)
{
    return data.at(x).at(y);
}

template &lt;typename T&gt;
const T&amp; Grid&lt;T&gt;::operator()(size_type x, size_type y) const
{
    return data.at(x).at(y);
}
</code></pre>

<p>This way, we can do <code>grid(x, y)</code> to get and <code>grid(x, y) = value</code> to set.</p>

<p>Again, there are too many ways in which this feels unidiomatic and <em>please use an existing library instead of rolling out your own.</em></p>
    </div>