<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some shorter points:</p>

<ul>
<li>You don't need <code>#include "stdafx.h"</code>. It's usually used to consolidate includes in Windows projects. That's not applicable here.</li>
<li>Don't use <code>using namespace std;</code>. Instead refer to things in <code>std</code> with the <code>std::</code> prefix. C++ (name resolution) is <strike>needlessly</strike> complicated and as a result you can get bitten by some strange bugs if names collide. You avoid all of this by not doing <code>using namespace std;</code>.</li>
<li>Instead of <code>double quiz[2]</code>, use <code>std::array</code> (<code>std::array&lt;double, 2&gt; quizzes</code>). This is preferable to passing around pointers for many reasons, the primary one being that the length of the array is encoded in the type. With a pointer (<code>*double</code>), doing <code>quizzes[3]</code> is a really easy way to introduce undefined behavior. This is bad. (Another benefit is if you change the size, you don't have to change all the usage iteration sites; with your existing code you'd have to change the loops in <code>inputQuizzes()</code>, <code>main()</code>, etc.) If you want to accept a variable number of quizzes, use <code>std::vector</code> instead.</li>
<li>We usually prefix members with <code>m_</code> to differentiate between local variables. Ex. <code>finalGrade</code> should be <code>m_finalGrade</code></li>
<li>Separate implementation from interface. All of the foreward declarations should be in a <code>student.h</code> file (that begins with <code>#pragma once</code>) and the implementation should be in a <code>student.cpp</code> file (that has <code>#include "student.h"</code>)</li>
<li>Usually we write comments <code>// comment</code> instead of <code>// comment //</code>. Also dividers like <code>///////////</code> are rarely used. Your usage of them indicates that you probably want to split things up into different files.</li>
<li>You have a lot of information duplicates (ex. <code>Student</code> and <code>StudentRecord</code> has a <code>finalLetterGrade</code> with different access methods (ex. directly by <code>student.finalLetterGrade</code> and through a setter by <code>studentRecord.setFinalLetterGrade('A')</code>). You're conflating the getter/setter pattern. You probably want to pick just one approach. But also, this information should only live in one place. Any duplication is an opportunity for things to accidentally go out of sync (Think if somewhere else you changed the final letter grade for the <code>Student</code> but not the <code>StudentRecord</code>. Now how do you know which <code>finalLetterGrade</code> is correct?).</li>
<li>Some of your methods on <code>StudentRecord</code> don't really belong. For example, <code>calcFinalLetterGrade</code> (and <code>calcPercent</code>) doesn't perform an action on a specific student. It doesn't use any of the <code>private</code> member variables. It could just (and probably should) be a <code>static</code> function.</li>
<li><code>getQuizzes()</code> has a strange body. You can just <code>return quiz</code> as arrays decay to pointers (although as I argue above, relying on this is generally bad and you should be using <code>std::array</code>).</li>
<li>Be careful with <code>double</code>. There are some numbers that cannot be represented with it. In particular, you shouldn't use floating point numbers to encode currency (because small imprecisions can lead to lost money). I'm dubious as to whether you could make the same case for grades. It is possible that with the right series of divisions you could produce a number that in a pure math class would be &gt; 90 but wouldn't be representable and would instead be represented as closer to an 89. Since it's easier to use <code>double</code>, I'll stick with it, but keep this in mind.</li>
<li><code>cin</code> can fail. You also don't handle the case of an invalid grade. What if the user inputs a negative midterm grade?</li>
<li>Representation is up to you, of course, but often we'll represent 0-100% as the range 0-1 (like you would in math) instead of 1-100 (I'll stick with your convention, but keep this in mind).</li>
<li>Keep your indentation consistent. Indent blocks surrounded by <code>{}</code>. This makes code much easier to follow.</li>
</ul>

<p>Overall, this is a good first attempt, but it could use some work. My main observation is that there is a lot of code (with lots of methods and several objects) for relatively little logic. This is often a sign that you can refactor to simplify things. Shorter, simpler code will almost always be easier to understand.</p>

<p>The first thing we'll try is eliminating all of the indirection and doing everything inside of <code>main</code>. You're already almost doing this. <code>calcPercent</code> and <code>calcFinalLetterGrade</code> is the only real logic done outside of it (sans the input). The only thing you've really pulled out is where the grades and student information are stored (encapsulated in an object, instead of local variables).</p>

<pre><code>#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;string&gt;

int main() {
    std::string studentName;
    std::array&lt;double, 2&gt; quizGrades;
    double midtermGrade;
    double finalExamGrade;

    std::cout &lt;&lt; "Enter student name: ";
    std::cin &gt;&gt; studentName;

    // Read in grades
    for (size_t i = 0; i &lt; quizGrades.size(); i++) {
        std::cout &lt;&lt; "Enter quiz " &lt;&lt; (i + 1) &lt;&lt; " grade: ";
        std::cin &gt;&gt; quizGrades[i];
    }

    std::cout &lt;&lt; "Enter midterm grade: ";
    std::cin &gt;&gt; midtermGrade;

    std::cout &lt;&lt; "Enter final exam grade: ";
    std::cin &gt;&gt; finalExamGrade;

    // Compute final grade
    double finalGrade =
        25 * (std::accumulate(quizGrades.begin(), quizGrades.end(), 0) / (10 * quizGrades.size())) +
        25 * (midtermGrade / 100) +
        50 * (finalExamGrade / 100);

    char finalLetterGrade = (finalGrade &gt;= 90) ? 'A' :
                            (finalGrade &gt;= 80) ? 'B' :
                            (finalGrade &gt;= 70) ? 'C' :
                            (finalGrade &gt;= 60) ? 'D' : 'F';

    std::cout &lt;&lt; studentName &lt;&lt; " got an " &lt;&lt; finalLetterGrade &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>Some things to note with this approach:</p>

<ul>
<li>The use of <code>std::accumulate</code> to sum an arbitrary length collection.</li>
<li>I'm a little dubious about the ternary (because the precedence is abused a bit here), but it seems clear enough</li>
<li>It should illustrate just how simple the business logic of your program is. There's no need to complicate it much beyond this.</li>
<li>It doesn't handle invalid input (<code>cin</code> failing, negative grades). We'll get to this in a second</li>
</ul>

<p>With the exception of the last point, I'd argue for this scenario, there isn't a good reason to complicate the code any further than the above. But it looks like you want to learn how to properly OOP-ify a problem, so we'll tackle this as an example. But first, the validation.</p>

<p>We note that for the first half of our program, we're repeating two actions for each variable we need to fill:</p>

<ol>
<li>Print a message informing the user that data we are collecting</li>
<li>Read the grade from stdin</li>
</ol>

<p>Ideally (2) should also reask the user if they input an invalid grade (say, a negative one).</p>

<p>We could simplify the logic by <em>extracting</em> it into a function.</p>

<pre><code>double readGradeInteractive(std::string name) {
    double grade;

    do {
        std::cout &lt;&lt; "Enter " &lt;&lt; name &lt;&lt; " grade: ";
        std::cin &gt;&gt; grade;
    } while (std::cin.fail() || grade &lt; 0);

    return grade;
}
</code></pre>

<p>Note how this handles errors gracefully. It also allows grades &gt; 100 to allow for extra credit points. We can use this function like so:</p>

<pre><code>#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

static double readGradeInteractive(std::string name) {
    double grade;

    do {
        std::cout &lt;&lt; "Enter " &lt;&lt; name &lt;&lt; " grade: ";
        std::cin &gt;&gt; grade;
    } while (std::cin.fail() || grade &lt; 0);

    return grade;
}

int main() {
    std::string studentName;
    std::array&lt;double, 2&gt; quizGrades;
    double midtermGrade;
    double finalExamGrade;

    std::cout &lt;&lt; "Enter student name: ";
    std::cin &gt;&gt; studentName;

    // Read in grades
    for (size_t i = 0; i &lt; quizGrades.size(); i++) {
        std::stringstream name;
        name &lt;&lt; "quiz " &lt;&lt; (i + 1);

        quizGrades[i] = readGradeInteractive(name.str());
    }

    midtermGrade = readGradeInteractive("midterm");
    finalExamGrade = readGradeInteractive("final exam");

    // Compute final grade
    double finalGrade =
        25 * (std::accumulate(quizGrades.begin(), quizGrades.end(), 0) / (10 * quizGrades.size())) +
        25 * (midtermGrade / 100) +
        50 * (finalExamGrade / 100);

    char finalLetterGrade = (finalGrade &gt;= 90) ? 'A' :
                            (finalGrade &gt;= 80) ? 'B' :
                            (finalGrade &gt;= 70) ? 'C' :
                            (finalGrade &gt;= 60) ? 'D' : 'F';

    std::cout &lt;&lt; studentName &lt;&lt; " got an " &lt;&lt; finalLetterGrade &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>Now, you'll note this doesn't save us many lines in <code>main()</code> at first glance, but to handle errors, <code>readGradeInteractive</code> has to be a bit more complicated. So, this is a good refactoring.</p>

<p>I'd argue at this point, this is a fine solution to your problem. You don't really need to introduce OOP here. But, let's say we wanted to allow other programs to use this logic (the grade calculation) in their programs. Then, it may make sense to introduce a <code>Student</code> object, that encapsulates these grades and is capable of computing its final grade (as a number and letter grade). Why no <code>StudentRecord</code>? Think about what's going on here. A <code>Student</code> has grades. And an action you can perform on the student is asking it what its final grade is. There's no need for any intermediary objects. Let's start by redesigning our <code>main</code> to imagine what we need <code>Student</code> to be able to do.</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;iostream&gt;

#include "student.h"


int main() {
    auto student = Student::readInteractive();

    std::cout &lt;&lt; student.name() &lt;&lt; " got an " &lt;&lt; student.finalGrade() &lt;&lt; std::endl;

    return EXIT_SUCCESS;
}
</code></pre>

<p>Notice how much simpler this is! <code>main</code> no longer has any logic. It delegates reading the student name and grades in from stdin to a static method on <code>Student</code>. And it delegates computing the final (&amp; letter) grade to the student object.</p>

<p>Let's start by writing <code>student.h</code>. All we need to do is look at the API we want <code>Student</code> to expose (namely <code>static Student readInteractive()</code>, <code>char finalGrade()</code>, <code>std::string name()</code>) and consult our original code to recall the member variables that student needs to encapsulate:</p>

<pre><code>#pragma once

#include &lt;array&gt;
#include &lt;string&gt;


class Student {
public:
    static Student readInteractive();
    std::string name() const;
    char finalGrade() const;

private:
    std::string m_name;
    std::array&lt;double, 2&gt; m_quizGrades;
    double m_midtermGrade;
    double m_finalExamGrade;
};
</code></pre>

<p>Now, all that's left is to implement it in <code>student.cpp</code>:</p>

<pre><code>#include "student.h"

#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;sstream&gt;


static double readGradeInteractive(std::string name) {
    double grade;

    do {
        std::cout &lt;&lt; "Enter " &lt;&lt; name &lt;&lt; " grade: ";
        std::cin &gt;&gt; grade;
    } while (std::cin.fail() || grade &lt; 0);

    return grade;
}

Student Student::readInteractive() {
    Student student;

    std::cout &lt;&lt; "Enter student name: ";
    std::cin &gt;&gt; student.m_name;

    for (size_t i = 0; i &lt; student.m_quizGrades.size(); i++) {
        std::stringstream name;
        name &lt;&lt; "quiz " &lt;&lt; (i + 1);

        student.m_quizGrades[i] = readGradeInteractive(name.str());
    }

    student.m_midtermGrade = readGradeInteractive("midterm");
    student.m_finalExamGrade = readGradeInteractive("final exam");

    return student;
}

std::string Student::name() const { return m_name; }

char Student::finalGrade() const {
    double finalGrade =
        25 * (std::accumulate(m_quizGrades.begin(), m_quizGrades.end(), 0) / (10 * m_quizGrades.size())) +
        25 * (m_midtermGrade / 100) +
        50 * (m_finalExamGrade / 100);

    return (finalGrade &gt;= 90) ? 'A' :
           (finalGrade &gt;= 80) ? 'B' :
           (finalGrade &gt;= 70) ? 'C' :
           (finalGrade &gt;= 60) ? 'D' : 'F';
}
</code></pre>

<p>Note how we largely just copied the logic from our original program (changing the local variables to member variables where appropriate).</p>

<p>I'd wager this is a fairly reasonable application of OOP. You could take this one step further by examining the grade. Often, we like our type signatures to be very informative about the things they take and return. In the case of <code>char finalGrade()</code>, it may not immediately be clear that <code>char</code> is a letter grade. Additionally, the type <code>char</code> doesn't restrict the things that can be returned to just <code>ABCDEF</code>. An <code>H</code> could be returned. What would that mean? Additionally, there are other grade-like states like Incomplete, Withdrawn, etc. that you may want to encode here. But we wouldn't want to just use magic letters for them (lest we accidentally return a grade with them due to a bug). Another concern with the above approach is that it combines two concerns intot <code>finalGrade</code>: (1) computing the final grade as a number and (2) converting that numeric grade to a letter grade.</p>

<p>So, we could solve both of these by using an <code>enum class</code> to represent grades and make that enum responsible for converting from a numeric grade to a letter. I'll leave this as an exercise for you :)</p>
    </div>