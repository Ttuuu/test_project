<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have decided against (ab-)using a mathematical construct <code>Ring</code> for creating musical entities. 
As Roland pointed out, it just didn't fit the purpose.
Instead, I have created my own structure <code>Coil</code> which represents a <code>Value</code> with its <code>Index</code> in
a group <code>Group</code> of magnitude <code>Size</code>. I'm still using setters, but only for derived properties.</p>

<p><code>Coil</code> class:</p>

<pre><code>import kotlin.math.*

data class Coil(var value: Int, val size: Int) {

    var index: Int
        get() = modulo(value)
        set(n) { 
            value = group * size + modulo(n) 
        }

    var group: Int
        get() = value / size
        set(n) { 
            value = n * size + index 
        }

    val delta: Int
        get() {
            val d1 = index
            val d2 = size - d1
            return if (d1 &lt;= d2) d1 else -d2
        }

    private fun modulo(n: Int): Int {
        return (n % size + size) % size
    } 
}
</code></pre>

<p>To give you an idea how I am going to use a <code>Coil</code> I have created a simplified version of a <code>Note</code>.
The way I want to uses a note is to manipulate them and their role within chords and scales.
I do not intend to create sheet music, so I don't require a <em>position</em> or <em>duration</em>.
A note uses one coil to store its <em>pitch</em> and one to store its <em>degree</em>. 
Both these values are absolutes, meaning the <em>octave</em> is included in the value. Their setters re-sync the <em>octave</em>.
Setting the <em>pitchClass</em> or <em>degreeClass</em> does not change the <em>octave</em>.
A note's <em>name</em> consists of its <em>pitchClass</em> in scientific pitch notation, its <em>accidentals</em> (flat, sharp, natural) and <em>octave</em>.</p>

<p><code>Note</code> Usage: (to give an idea about the interaction between Coil and Note)</p>

<pre><code>fun main() {

    val note = Note(0, 0, 5)  // C5
    note.degreeClass = 1      // Dbb5
    note.pitchClass = 1       // Db5
    note.octave = 6           // Db6
    note.accidentals = 1      // D#6

    println(note.name)        
}
</code></pre>

<p><code>Note</code> class:</p>

<pre><code>import kotlin.math.*

class Note(var _pitch: Int, var _degree: Int, var _octave: Int) {

    private val PITCH_COUNT = 12
    private val DEGREE_COUNT = 7
    private val FLAT = 'b'
    private val SHARP = '#'

    private val DIATONIC_PITCH_CLASS_SET 
        : IntArray = intArrayOf(0, 2, 4, 5, 7, 9, 11)

    private val SCIENTIFIC_PITCH_CLASS_SET 
        : CharArray = charArrayOf('C', 'D', 'E', 'F', 'G', 'A', 'B')

    private val p = Coil(_pitch, PITCH_COUNT)
    private val d = Coil(_degree, DEGREE_COUNT)

    init {
        p.group = _octave
        d.group = _octave
    }

    var pitch: Int
        get() = p.value
        set(n) { 
            p.value = n 
            octave = p.group
        }

    var degree: Int
        get() = d.value
        set(n) { 
            d.value = n 
            octave = d.group
        }

    var octave: Int
        get() = p.group
        set(n) { 
            p.group = n
            d.group = n
        }

    var pitchClass: Int
        get() = p.index
        set(n) { 
            p.index = n
        }

    var degreeClass: Int
        get() = d.index
        set(n) { 
            d.index = n
        }

    var accidentals: Int
        get() {
            val delta = pitchClass - DIATONIC_PITCH_CLASS_SET[degreeClass]
            return Coil(delta, PITCH_COUNT).delta
        }
        set(n) { 
            pitchClass = DIATONIC_PITCH_CLASS_SET[degreeClass] + n
        }

    val name: String
        get() {
          val sb = StringBuilder()
          val d = accidentals
          sb.append(SCIENTIFIC_PITCH_CLASS_SET[degreeClass])
          if (d != 0) {
            sb.append(Character.toString((if (d &gt; 0) SHARP else FLAT)).repeat(abs(d)))
          }
          sb.append(octave)
          return sb.toString()
        } 
}
</code></pre>
    </div>