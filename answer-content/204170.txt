<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think an elevator rider would want to know the passing floors.</p>

<hr>

<p>Using <code>table</code> for layout is frowned upon, for good reasons. With any real layout complexity you quickly descend to the 7th level of html hell. Do not insist on re-learning the harsh lessons of the past, just believe me when I say do not do it.</p>

<hr>

<p>&lt; dryHumor &gt; The juxtaposition of good variable names with magic numbers is an excellent illustration of the "don't use magic numbers" trope. Good job &lt; / dryHumor &gt;</p>

<hr>

<p>The unnecessary complexity comes from mundging elevator display code with elevator functionality. The elevator object should have zero display code. The elevator should be able to run with zero regard for its display. Instead the display could subscribe to a change event, let's say, for the current floor updates. In other words you want an Elevator API.</p>

<p>The present simulator is very resistant to change. For example think about the extensive existing code <em>changes</em> to handle stops as riders press buttons on intermediate floors while the elevator is moving. This will be far easier and far less buggy given a Single Responsibility compliant design. A less ambitious project i.e. <em>Small ... Simulation</em>, is flawed rationale for disregarding general OO design and coding.</p>

<p>Look at the real parts of a problem domain as the starting guide for objects (classes). Think about what these things do - functionality. IMO this is a better guide for where state should reside. If you're writting shorter, less complex class/function code but more of them then you're going in the right direction. Good design manages overall complexity by distributing it into appropriate, focused (read 'single responsibility') classes and functions.</p>
    </div>