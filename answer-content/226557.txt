<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general, we try to keep functions small and nice, but in your case, using so many functions is just weird.  For example, are you sure the <code>uncrossedIntegersUpTo</code> function is needed at all?  How about <code>determineIterationLimit</code>?  You can just handle them in the main function.</p>

<p>Also, <code>std::vector&lt;bool&gt;</code> is not like the normal <code>vector</code>.  It is not a container because it (usually) packs the <code>bool</code>s together to save space.  This may result in a significant increase in runtime.  (See Howard Hinnant's <a href="https://howardhinnant.github.io/onvectorbool.html" rel="nofollow noreferrer">On <code>vector&lt;bool&gt;</code></a>)  This is definitely a big mistake, but there is no trivial backwards compatible way to fix it at this stage.  You may have to consider working around it with, say, <code>std::vector&lt;char&gt;</code> in this case.</p>

<p>Now let's talk about types.  First, it is <code>std::size_t</code>, not <code>size_t</code>.  Second, your use of <code>unsigned</code> everywhere is like a "magic type" (analogous to magic numbers) â€” it will help to define an alias like</p>

<pre><code>using number_t = unsigned;
</code></pre>

<p>And I think something like <code>std::uint_fast32_t</code> will be better in this case.  Also, <code>std::size_t</code> operates on sizes.  Are you sure you want to use it for numbers?</p>

<p><code>std::sqrt</code> operates on floating point numbers and may cause precision problems here.  You may want to design some <code>isqrt</code> function for integers.</p>

<p>Putting these together, your code may be as simple as something like: (not tested)</p>

<pre><code>// generate primes less than max
std::vector&lt;number_t&gt; generate_primes(number_t max)
{
    if (max &lt; 2)
        return {};

    // You may need to use char or something like that
    std::vector&lt;bool&gt; table(max, false); // crossed out numbers
    table[0] = table[1] = true;

    const number_t limit = isqrt(max); // like that
    for (number_t i = 2; i &lt; limit; ++i) {
        if (!table[i]) {
            for (number_t j = i * 2; j &lt; max; ++j)
                table[j] = true;
        }
    }

    std::vector&lt;number_t&gt; result;
    for (number_t i = 2; i &lt; max; ++i) {
        if (!table[i])
            result.push_back(i);
    }
    return result;
}
</code></pre>
    </div>