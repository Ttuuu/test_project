<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, one failure case that I didn't consider is that sublists that contain strings with "..." inside them break the function. Furthermore, converting a list to a string is an expensive operation. After consulting with people outside SE, I was able to refine the algorithm further:</p>

<h3>Refactored Version</h3>

<pre class="lang-py prettyprint-override"><code>"""
*   A faster version of `rTraverse()` that uses a set instead of a stack to store a list's ancestry. 

*   Searching a set is O(1) in the average case, while searching a list is O(n) in the average case, so `rTraverse2()` would run faster.
*   Params:
    *   `lst`: the list to be traversed.
    *   `f`: the function to be applied to the list items.
    *   `seen`: a set that stores the ancestry of the current sublist. (would be used for checking if a sublist is self referential).
*   Return:
    * None: The list is modified in place.
*   Caveats:
    *   The function no longer traverses in order.
*   Credits:
    *   The main insight(s) for the algorithm comes from "raylu" on the [programming discord](https://discord.gg/010z0Kw1A9ql5c1Qe)
"""
def rTraverse2(lst, f, seen=None):
    seen = set() if seen is None else seen      #Initialise the set.
    toRecurse = []      #The list of sublists to be recursed on.
    for idx in range(len(lst)):
        if isinstance(lst[idx], list):
            if id(lst[idx]) not in seen:    #Traverse only non self referential sublists.
                toRecurse.append(lst[idx])  #Add the sublist to the list of sublists to be recursed upon.
        else:
            lst[idx] = f(lst[idx])
    seen.update(id(x) for x in toRecurse)
    for item in toRecurse:  #Traverse all sublists in `toRecurse`.
        rTraverse2(item, f, seen)
<span class="math-container">```</span>
</code></pre>
    </div>