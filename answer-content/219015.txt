<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><code>return ''</code> doesn't have the type <code>List</code>.</li>
<li><code>List</code> means <code>List[Any]</code>, you should use <code>List[str]</code>.</li>
<li><p>Your variable names are garbage.</p>

<ul>
<li><code>s</code> -&gt; <code>string</code></li>
<li><code>n</code> -&gt; <code>length</code></li>
<li><code>ch_map</code> -&gt; <code>char_map</code> or <code>character_map</code></li>
<li><code>dp</code> -&gt; what does this even mean?</li>
<li><code>p1</code> -&gt; <code>position_1</code>?</li>
</ul></li>
<li><p>Don't put <code>return</code> statements on the same line as an <code>if</code>.</p></li>
<li>Again strings shouldn't be assigend to lists, yes you can iterate over them because they're both sequences. But they're not the same type. <code>[ch_map[s[:2]]] if s[:2] in char_map else ''</code></li>
<li><code>ch_map</code> should be a constant outside the function.</li>
<li>It's far easier to understand your code if it's written using recursion.</li>
<li>Recursion has some problems, and so it should be written in a way that allows you to easily convert it to a while loop.</li>
</ol>



<pre><code>CHAR_MAP = {str(i): chr(i) for i in range(10, 127)}


def asciidecode(string: str) -&gt; List[str]:
    if not string:
        return []
    string = string[::-1]
    length = len(string)

    def inner(index):
        if index == length:
            yield ''
        else:
            for size in (2, 3):
                if length &lt; index + size:
                    break
                letter = CHAR_MAP.get(string[index:index + size])
                if letter is not None:
                    for word in inner(index + size):
                        yield letter + word
    return list(inner(0))


def asciidecode_pre_while(string: str) -&gt; List[str]:
    if not string:
        return []
    string = string[::-1]
    length = len(string)
    output = []

    def inner(index, word):
        if index == length:
            output.append(word)
            return

        for size in (2, 3):
            if length &lt; index + size:
                break
            letter = CHAR_MAP.get(string[index:index + size])
            if letter is not None:
                inner(index + size, word + letter)
    inner(0, '')
    return output
</code></pre>

<p>From the second one it's easy to convert it to a while loop:</p>

<pre><code>CHAR_MAP = {str(i): chr(i) for i in range(10, 127)}


def asciidecode(string: str) -&gt; List[str]:
    if not string:
        return []
    string = string[::-1]
    length = len(string)
    output = []

    stack = [(0, '')]
    while stack:
        index, word = stack.pop()
        if index == length:
            output.append(word)
            continue

        for size in (2, 3):
            if length &lt; index + size:
                break
            letter = CHAR_MAP.get(string[index:index + size])
            if letter is not None:
                stack.append((index + size, word + letter))
    return output
</code></pre>
    </div>