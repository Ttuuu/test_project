<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Obviously, the algorithm provided will set up a number of equivalence classes of numbers containing the same ciphers. E. g. 1012, 1210, and all other permutations of are equivalent.</p>

<p>So you might want to sort the numbers by their digits (skipping all zeros), so you'd only have to store 112 for above numbers, or the other way round, only generate the sorted numbers by some appropriate algorithm.</p>

<p>Finally, you can easily generate the number of permutations from these numbers. Example above:</p>

<pre><code>00 000 112
</code></pre>

<p>There are 8! but we need to divide by the number of equivalent permutations (due to the five zeros and the two ones), so we get:</p>

<pre><code>8! / 5! / 2!
</code></pre>

<p>A mentioned number generator might look like this one:</p>

<pre><code>std::vector&lt;unsigned int&gt; current({1, 2, 3, 4, 5, 6, 7, 8, 9 });
std::vector&lt;unsigned int&gt; previous;

for(unsigned int i = 0; i &lt; 7; ++i)
{
    using std::swap;
    for(auto n : current)
        std::cout &lt;&lt; n &lt;&lt; ' ';
    std::cout &lt;&lt; std::endl;
    swap(current, previous);
    current.clear();
    for(auto n : previous)
    {
        for(unsigned int m = 1; m &lt;= n % 10; ++m)
        {
            current.push_back(n * 10 + m);
        }
    }
}
</code></pre>

<p>producing all sorted numbers up to 7 digits (OK, within numbers, sorting order is invers, but that's not of relevance...).</p>
    </div>