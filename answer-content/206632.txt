<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In Java, class names should begin with a capital letter.  So you should have</p>

<pre><code>class Book { ... }
class Books { ... }
class Student { ... }
class Students { ... }
</code></pre>

<hr>

<p>Each <code>book</code> has its own <code>Scanner</code>, as does <code>books</code>, every <code>student</code>, and <code>students</code>, and the <code>Library</code>.  This is <em>A Really Bad Idea</em>â„¢.  A <code>Scanner</code> can buffer many, many characters that it has read from the underlying input stream but not presented to the caller.  Having more than one <code>Scanner</code> can lead to strange behaviour, where it looks like the input is getting lost, or arriving in the wrong order.  Having 103 scanners (one for each of the 50 <code>book</code> instances, one for each of the 50 <code>student</code> instances, plus one each for the <code>books</code>, <code>students</code>, and <code>Library</code> instances) will make scanner input issues virtually impossible to debug.</p>

<p>Create only one <code>Scanner</code>, in the <code>Library</code> class, and pass that instance to any method that needs to perform any reading.</p>

<hr>

<h1><code>book</code></h1>

<p>The <code>book</code> class is a data model.  It should just store information; it should not perform any I/O operations on the Console.  Doing so prevents it from being used in a GUI application.  If we remove the I/O, it could be used in a Console application or a GUI application without modification.  Here is the <code>Book</code> class without any I/O:</p>

<pre><code>class Book {
    public int    sNo;
    public String bookName;
    public String authorName;
    public int    bookQty;
    public int    bookQtyCopy;

    public Book(int no, String title, String author, int quantity) {
        sNo         = no;
        bookName    = title;
        authorName  = author;
        bookQty     = quantity;
        bookQtyCopy = bookQty;
    }
 }
</code></pre>

<p>The creator of a <code>Book</code> would need to get the book information from the user (such as reading from the <code>Scanner</code>), and only call <code>new Book(...)</code> once it has all the data.</p>

<p>You haven't used <code>final</code> anywhere in your code.  If you have learnt it, consider that some of the <code>Book</code> fields should be <code>final</code> to prevent accidental changes.</p>

<p>You haven't used <code>private</code> anywhere in your code.  You may want to make some fields <code>private</code>, and provide getters (and setters), instead of allowing <code>public</code> access to the fields.</p>

<hr>

<h1><code>books</code></h1>

<pre><code>public class books {
    book theBooks[] = new book[50];     // Array that stores 'book' Objects.
    public static int count;            // Counter for No of book objects Added in Array.
</code></pre>

<p>Why is <code>count</code> static?  If you have two <code>books</code> objects (say, two libraries -- one on campus, one downtown), each would have its own <code>theBooks</code> array for storing the <code>book</code> objects that it owns.  But there would only be one common <code>count</code> between the two.  They would be required to have the same number of <code>book</code> objects, but the <code>book</code> objects could be completely different?  That is seems like a design error.</p>

<p><code>compareBookObjects()</code>: this function takes two books and returns ... what?  What does <code>0</code> mean?  What does <code>1</code> mean?  If <code>0</code> is returned, a message is written to the console, but what if we wanted to create a GUI program and there is no console???  It is only used by <code>addBook()</code>, so is more of a helper function, and perhaps should be <code>private</code>.  It is searching for a book title, and a book serial number.  You have other functions which search for books by title and serial number, and finding them is not an indication of a duplicate error, but of a successful search.  Maybe you need different helper functions, plural:</p>

<pre><code>private Book findByTitle(String title) {
    for (int i=0; i&lt;count; i++) {
        if (theBooks[I].bookName.equalsIgnoreCase(title)) {
            return book;
        }
    }
    return null;  // Not found
}

private Book findBySerialNo(int no) { ... }
</code></pre>

<p>The you could re-write <code>addBook(...)</code> like:</p>

<pre><code>public void addBook(book b) {
    if (findByTitle(b.bookName) != null) {
        System.out.println("Book of this Name Already Exists.");
    }
    if (findBySerialNo(b.sNo) != null) {
        System.out.println("Book of this Serial No Already Exists.");
    }
    if (count &lt; 50) {
       theBooks[count] = b;
       count++;
    } else {
       System.out.println("No Space to Add More Books.");
    }
}
</code></pre>

<p><strong>Note</strong>: Again, I/O in the <code>books</code> class should be eschewed.  <code>books</code> is another data model class, and shouldn't have any I/O.  So, perhaps the above checks can be moved out of <code>addBook</code> and to the caller which creates the <code>book</code>.  Then, the uniqueness of the book name / serial no can be tested even before creating the <code>book</code> object.</p>

<p>What is that magic number <code>50</code>?  Can we get rid of it?  Sure!</p>

<pre><code>    if (count &lt; theBooks.length) {
</code></pre>

<p>Now, if you change the allocation length of <code>theBooks</code>, you won't have to find all occurrences of that value in the source and change them.</p>

<p>The <code>flag</code> in <code>searchBySno()</code> is completely unnecessary.  If you find the book, you immediately return; the incremented <code>flag</code> value is unused.  If you don't find the book, you won't have returned, so the test <code>flag == 0</code> will always be <code>true</code>.  You can get rid of <code>flag</code>, and use the <code>findBySerialNo()</code> we created above:</p>

<pre><code>...
Book book = findBySerialNo(sNo);
if (book != null) {
   // Print the book info
} else {
   System.out.println("No Book for Serial No " + sNo + " Found.");
}
</code></pre>

<p>Similarly, <code>upgradeBookQty()</code> can use <code>findBySerialNo()</code> to avoid writing the search for serial number loop yet again.</p>

<p><code>dispMenu()</code> absolutely does not belong in <code>books</code>.  The menu is printed by a call in <code>Library</code>.  The input is asked for in <code>Library</code>.  The dispatch is done in <code>Library</code>.  The <code>dispMenu()</code> would make much more sense if move to <code>Library</code>.  Note that this is again moving I/O out of this data model.  (You might begin to think this is a common theme.)</p>

<p><code>isAvailable()</code>, <code>checkOutBook()</code>, again is searching for a book by serial number.  Use the helper function.</p>

<hr>

<h1><code>student</code></h1>

<p>Similar comments as <code>book</code>.  Move I/O out of data model class.</p>

<hr>

<h1><code>students</code></h1>

<p>Similar comments as <code>books</code>.</p>

<ul>
<li>Move I/O out of data model</li>
<li><code>count</code> should not be <code>static</code></li>
<li><code>50</code> should be <code>theStudents.length</code></li>
<li>Add a <code>findStudentByRegNum()</code> helper function, remove search loop from other methods.</li>
<li><code>3</code> should be <code>theStudents[studentIndex].borrowedBooks.length</code> ... wait ... what?</li>
</ul>

<p>The <code>student</code> class should manage its own books!  Consider:</p>

<pre><code>theStudents[studentIndex].borrowedBooks[theStudents[studentIndex].booksCount] = b;
</code></pre>

<p>You are referencing <code>theStudents[studentIndex]</code> twice in that statement, to get to the same <code>student</code> instance's <code>borrowedBooks</code> and <code>bookCount</code> fields.  Instead, imagine finding the student, and telling that student to add the book to its list.</p>

<pre><code>student s = findStudentByRegNum(reg_num);
s.addBook(b);
</code></pre>

<p>And the student class would do:</p>

<pre><code>borrowedBooks[ bookCount ] = b;
bookCount++;
</code></pre>

<p>As well as first checking whether it is allowed to borrow another book:</p>

<pre><code>if (booksCount &lt; borrowedBooks.length) { ... } else { ... }
</code></pre>

<p><strong>BUGS</strong></p>

<ul>
<li>Checking out the 4th book will cause an <code>ArrayIndexOutOfBoundsException</code>.</li>
<li>After a student has checked out 3 books, even after they have returned all 3 books, they can never check out another book, because <code>booksCounts</code> is never decremented.</li>
<li>If a student tried to check out a book, and fails due to too many borrowed books, the book is lost (quantity has already been decremented in the library).</li>
</ul>
    </div>