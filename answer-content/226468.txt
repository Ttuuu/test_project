<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Functions are your friend</h2>

<p>Even in Jython, functions are a valid construct. They allow for scope, so that you can better reason about temporary variables; give better stack traces when things go wrong; increase testability; etc. So you should move your code into some functions.</p>

<h2>Invert your logic</h2>

<p>This:</p>

<pre><code>if len(laty) == 7 and len(longx) == 6:
</code></pre>

<p>should probably be inverted, and something done about it, i.e.</p>

<pre><code>if len(laty) != 7 || len(longx) != 6:
    # throw, or at least print...
# continue on with the rest of the function
</code></pre>

<h2>If you had requests...</h2>

<p>then this:</p>

<pre><code>url="http://something.com/arcgis/rest/services/something/Zones/MapServer/15/query?geometry=" + longx + "%2C" + laty + "&amp;geometryType=esriGeometryPoint&amp;spatialRel=esriSpatialRelIntersects&amp;outFields=*&amp;returnGeometry=false&amp;f=pjson"
</code></pre>

<p>could be fairly reduced in insanity. The query params can be formed as a dictionary passed to the <code>get</code> method.</p>

<h2>PEP8</h2>

<p>Use any kind of linter or modern IDE, and it will give you suggestions on how to reformat this thing to follow Python formatting standards (PEP8). The most obvious thing it will notice is lack of spaces after commas.</p>

<p>Otherwise - perhaps you should provide some context about why this thing exists in Jython.</p>

<h2>Suggested</h2>

<p>I don't know whether this will work, because I don't have your setup; so you'll probably have to tweak it.</p>

<pre><code>from psdi.mbo import MboConstants
from java.util import HashMap
from urllib import urlencode
from urlparse import urlunparse, ParseResult


def get_coords():
    """
    Get the y and x coordinates(UTM projection) from the WOSERVICEADDRESS table
    via the SERVICEADDRESS system relationship.
    The datatype of the LatitydeY and LongitudeX is decimal, i.e.
    1234567.8335815760, 123456.4075621164.
    """
    laty = mbo.getDouble("SERVICEADDRESS.LatitudeY")
    longx = mbo.getDouble("SERVICEADDRESS.LONGITUDEX")
    return laty, longx


def is_valid(laty, longx):
    """
    Verify if the numbers are legitimate UTM coordinates
    """
    return (0 &lt;= laty &lt;= 10e6 and
            167e3 &lt;= longx &lt;= 833e3)


def make_url(laty, longx):
    """
    Assemble the URL (including the longx and the laty). Note: The coordinates
    are flipped in the url
    """

    query = {
        'geometry': '%d,%d' % (laty, longx),
        'geometryType': 'esriGeometryPoint',
        'spatialRel': 'esriSpatialRelIntersects',
        'outFields': '*',  # You should narrow this if you only care about work zone.
        'returnGeometry': 'false',
        'f': 'pjson'
    }

    parts = ParseResult(scheme='http',
                        netloc='something.com',
                        path='/arcgis/rest/services/something/Zones/MapServer'
                             '/15/query',
                        query=urlencode(query),
                        fragment='')

    url = urlunparse(parts)
    return url


def fetch_waste_zone(url):
    # Get the JSON text from the feature service (the JSON text contains the 
    # zone value)
    ctx = HashMap()
    ctx.put("url", url)
    service.invokeScript("LIB_HTTPCLIENT", ctx)
    json_text = str(ctx.get("response"))

    # Parse the zone value from the JSON text
    ctx = HashMap()
    ctx.put("json_text", json_text)
    service.invokeScript("LIB_PARSE_JSON", ctx)
    parsed_val = str(ctx.get("parsed_val"))

    return parsed_val


def main():
    laty, longx = get_coords()
    if not is_valid(laty, longx):
        print('Invalid coordinates')
        return

    url = make_url(laty, longx)
    waste_zone = fetch_waste_zone(url)

    # Enter the zone value into the zone field in the work order
    mbo.setValue("DESCRIPTION", "Waste Zone: " + waste_zone,
                 MboConstants.NOACCESSCHECK)


main()
</code></pre>

<p>Note:</p>

<ul>
<li>There are functions</li>
<li>The functions contain <code>"""docstrings"""</code> at the top</li>
<li>You should preserve the UTM coordinates as doubles until it's necessary to format them as integers in the URL string</li>
<li>UTM coordinates have real limits that you should use - not just string length</li>
<li>Even if you don't have <code>requests</code>, you can still do somewhat saner query string formation via dictionary</li>
<li>If the coordinates are invalid, do something - maybe print, definitely quit</li>
</ul>
    </div>