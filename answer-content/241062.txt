<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>2.1 Will I have problems modifying it to sort <code>float</code> and <code>double</code>?</p>
</blockquote>

<p>The "sort" comes down to one line:</p>

<pre><code>array_left[counter_left] &lt;= array_right[counter_right]
</code></pre>

<p>With floating point, sorting concerns include:</p>

<ul>
<li>Signed zeros: -0.0 and +0.0</li>
</ul>

<p>Typically the solution is to consider these of equal <em>value</em>.  So an array of [-0.0, +0.0, -0.0, +0.0 ...], with the code, should produce a stable sort.  If an order is needed (e.g. -0.0 before +0.0) , the compare will need to expand to account for the sign.</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/NaN" rel="nofollow noreferrer">Not-a-numbers</a></li>
</ul>

<p>When <code>x</code> is a NaN, comparing <em>usually</em><sup>1</sup> results in <code>false</code> as in <code>x &lt;= y</code> and even <code>x == x</code>.</p>

<p>With code's singular use of <code>&lt;=</code> for comparing, I foresee a problem, perhaps like  <a href="https://stackoverflow.com/q/48069404/2410359"><code>qsort()</code></a> which require <a href="https://en.wikipedia.org/wiki/Total_order" rel="nofollow noreferrer">total ordering</a>.  A more advanced <a href="https://stackoverflow.com/a/48069558/2410359">compare</a> would be needed to handle arrays which include NaN.</p>

<hr>

<p><sup>1</sup> C does not specify how compares behave with NaN.  Most systems do follow IEEE of comparing with <code>&lt;= , &lt;, &gt;, &gt;=, ==</code> involving at least 1 NaN is <em>false</em>.</p>
    </div>