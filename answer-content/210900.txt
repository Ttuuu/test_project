<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use the <code>operator</code> package</h2>

<p>This series of functions:</p>

<pre><code>def add(x, y):
    return x + y


def sub(x, y):
    return x - y


def mul(x, y):
    return x * y
</code></pre>

<p>can go away entirely. (You can include <code>div</code> too if you rework the way that exceptions are handled). Instead, use the <a href="https://docs.python.org/3.4/library/operator.html" rel="nofollow noreferrer">operator package</a>.</p>

<h2>Early return</h2>

<p>This:</p>

<pre><code>def num_input(prompt='Enter a number: '):
    while True:
        try:
            print(prompt, end='')
            x = int(input())
            break
        except ValueError:
            print('You must input a number. Try again.')
    return x
</code></pre>

<p>doesn't need a <code>break</code>. Replace the <code>break</code> with a <code>return</code> and delete the return outside of the loop.</p>

<h2>Write a <code>main</code> method</h2>

<p>...to pull your code out of global scope.</p>

<h2>Use more loops</h2>

<p>This:</p>

<pre><code>print(" 1. Add")
print(" 2. Subtract")
print(" 3. Multiply")
print(" 4. Divide")
print(" 5. Sales Tax Calculator")
print(" 6. Recent Calculations")
print(" 0. Quit")
</code></pre>

<p>can be rewritten as a tuple:</p>

<pre><code>menu_choices = (
    ('Add', do_add),
    ('Subtract', do_subtract),
    # ...
)
</code></pre>

<p>The index of the outer tuple is the user input, the first element of the inner tuple is the menu item name, and the second element of the inner tuple is the name of a function you can call to execute the menu item feature. Then your input logic can be simplified to something like</p>

<pre><code>print('Choose from the following options:')
print('\n'.join('%2d. %s' % (i, name)
                for i, (name, _) in enumerate(menu_choices)))
user_choice = num_input('Enter your choice:')
if 0 &lt;= user_choice &lt; len(menu_choices):
    menu_choices[user_choice][1]()
</code></pre>

<h2>Use append instead of extend</h2>

<p>This:</p>

<pre><code>calculations.extend([result])
</code></pre>

<p>should be</p>

<pre><code>calculations.append(result)
</code></pre>

<h2>Don't repeat yourself</h2>

<p>These four blocks:</p>

<pre><code>    elif num_of_calc_counter == 0:
        index_of_calc = 1
        for i in calculations:
            print(index_of_calc, i)
            index_of_calc += 1
        num_of_calc_counter += 1
    elif index_of_calc == num_of_calc_counter:
        index_of_calc = 1
        for i in calculations:
            print(index_of_calc, i)
            index_of_calc += 1
        num_of_calc_counter += 1
    elif num_of_calc_counter &gt; index_of_calc:
        index_of_calc = 1
        for i in calculations:
            print(index_of_calc, i)
            index_of_calc += 1
        num_of_calc_counter -= 1
    elif num_of_calc_counter &lt; index_of_calc:
        index_of_calc = 1
        for i in calculations:
            print(index_of_calc, i)
            index_of_calc += 1
        num_of_calc_counter += 1
</code></pre>

<p>do the exact same thing! So just replace them all with one <code>else</code> following your <code>if len(calculations) == 0</code>.</p>

<p>Also, that first <code>if</code> can be simplified to <code>if not calculations</code>.</p>
    </div>