<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Currently some of your code is very specialized to the exact use case you have. For example, the <code>get_factors</code> function takes the unparsed equation and needs to extract the constant itself. It would be a lot better if it just took a number and the parsing happens elsewhere. This way if you improve the parsing (to include multi-digit numbers, etc), you don't need to change the <code>get_factors</code> function.</p>

<p>At the same time, that function is borderline unreadable. It is also not the most efficient. Consider this alternative, which is shorter in lines of code, IMO way easier to read, and about two times faster:</p>

<pre><code>def get_factors_of_constant(equation):
    c = int(equation[-1])
    factors = set()
    for i in range(1, int(c**0.5) + 1):
        if c % i == 0:
            factors.update([i, c // i, -i, -c // i])
    return list(factors)
</code></pre>

<hr>

<p>For a better parsing, consider the output of the following regex:</p>

<pre><code>import re

equation = 'x^3 -4x^2 +1x +6'
print(re.findall(r'\s?([\+\-]?\s?\d*)?(x)?\^?(\d*)?', equation))
# [('', 'x', '3'), ('-4', 'x', '2'), ('+1', 'x', ''), ('+6', '', ''), ('', '', '')]
</code></pre>

<p>It produces tuples of coefficients, whether or not there is an <code>x</code> and exponents. If the coefficient is empty, a <code>1</code> is assumed, if the exponent is empty, it is either a <code>1</code> or a <code>0</code>, depending on if there is an x, and if all three are empty, you can skip it.</p>

<pre><code>def parse(equation):
    coefficients, exponents = [], []
    matches = re.findall(r'\s?([\+\-]?\s?\d*)?(x)?\^?(\d*)?', equation)
    for coefficient, x, exponent in matches:
        if coefficient == x == exponent == "":
            continue
        coefficients.append(coefficient.replace(" ", "") or "1")
        exponents.append(exponent or "1" if x else "0")
    coefficients = list(map(int, coefficients))
    exponents = list(map(int, exponents))
    return coefficients, exponents

print(parse(equation))
# ([1, -4, 1, 6], [3, 2, 1, 0])
</code></pre>

<p>This can also parse multi-digits and deals both with missing parts (since you have the info on the exponent) and additional whitespace between number and sign:</p>

<pre><code>parse("x^3 - 10x + 2")
# ([1, -10, 2], [3, 1, 0])
parse("x")
# ([1], [1])
</code></pre>

<p>It is also not perfect, for example it fails in this case:</p>

<pre><code>parse("-x^2")
# ValueError: invalid literal for int() with base 10: '-'
</code></pre>

<p>You would need to add some special cases to the function for it to cover all edge cases, but it should be a good starting point.</p>
    </div>