<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Specification</h3>

<p>There are a couple of strategies available to you depending on what exactly you mean with </p>

<blockquote>
  <p><em>"not spinning up too many concurrent tasks"</em></p>
</blockquote>

<h3>Possible Strategies</h3>

<ol>
<li><p>If you want a maximum allowed number of tasks to be processed concurrently on the server, regardless of this method, assuming you are using the default task scheduler, you can <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.setmaxthreads?view=netframework-4.8" rel="nofollow noreferrer">set the maximum number of threads of the .NET ThreadPool</a>.</p></li>
<li><p>If you want a maximum allowed number of tasks to be processed concurrently for this given scenario, leaving the other task scheduling on the server alone, you can:</p>

<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskscheduler?redirectedfrom=MSDN&amp;view=netframework-4.8" rel="nofollow noreferrer">implement a custom TaskScheduler</a> with its own dedicated thread pool. In .NET Framework you might also <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.synchronizationcontext?view=netframework-4.8" rel="nofollow noreferrer">implement a custom SynchronizationContext</a> instead. It's a lower level than the scheduler and you can always create a <code>TaskScheduler.FromCurrentSynchronizationContext();</code>.</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim?view=netframework-4.8" rel="nofollow noreferrer">use a SemaphoreSlim</a> to limit the number of tasks that actually perform work concurrently. Note that this could still lead to more threads than your threshold to be activated, however, only the specified threshold amount of threads would actually be performing work.</li>
<li>Use <a href="https://codereview.stackexchange.com/a/172819/200620">JanDotNet's</a> <code>Parallel</code> with <code>MaxDegreeOfParallelism</code> approach within a single <code>Task</code>. Note that this changes the affinity from threads to processors. Not sure whether this is what you are looking for. But at least it's a possibility, and non-blocking because wrapped inside a <code>Task</code>.</li>
</ul></li>
</ol>
    </div>