<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Even though you are implementing your own random number generator, I would stick to the interface defined in the standard library module <code>random</code>. You could have a <code>random</code>, a <code>uniform</code>, a <code>randint</code> (or <code>randrange</code> if it is inclusive on the end) and a <code>choices</code> method.</p>

<p>Your class should probably also allow setting the seed on creation.</p>

<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which recommends not using trailing <code>;</code> and using <code>lower_case</code> both for variables as well as functions/methods.</p>

<p>Even in Python 2 (which you should no longer use), if either the numerator or the divisor is a <code>float</code>, the result is also a <code>float</code> with the division operator <code>/</code>, so you only need to cast one of them. In Python 3 <code>/</code> is always float division and <code>//</code> is always integer division, so no need for the casts to <code>float</code>.</p>

<p>You should always add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>dosctring</code></a> to your code explaining how to use it.</p>

<p>For <code>range</code>, the start is implicitly <code>0</code>. Also <code>_</code> is conventionally used for unused loop variables.</p>

<p>Wrap the code that uses your class in a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script without it running.</p>

<pre><code>class Random:
    """A pseudo-random number generator using a LCG."""
    m = 4294967296 # modulus
    a = 1664525    # multiplier
    c = 1013904223 # increment

    def __init__(self, seed=1):
        """Initialize the pseudo-random number generator with a seed (default: 1)."""
        self.state = seed

    def randint(self, a=None, b=None):
        """Return either a random integer between `0` and `self.m`
        or between `a` and `b` (exclusive?)."""
        if a is None and b is None:
            self.state = (self.a * self.state + self.c) % self.m
            return self.state
        elif a is not None:
            if b is not None:
                return int(self.uniform(a, b))
            else:
                return int(self.uniform(0, a))
        else:
            raise ValueError("Need to also set `a` if you set `b`.")

    def random(self):
        """Return a random float between 0 and 1 (exclusive?)."""
        return float(self.randint()) / self.m

    def uniform(self, a, b):
        """Return a random float between `a` and `b` (exclusive?)."""
        return (b - a) * self.random() + a

    def choices(self, population, k=1):
        """Return a k sized list of population elements chosen with replacement."""
        n = len(population)
        return [population[self.randint(n - 1)] for _ in range(k)]
</code></pre>

<p>The usage of this is similar to your code, just with renamed methods.</p>

<p>You can also greatly shorten your examples using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a> and a utility function <code>mean</code>:</p>

<pre><code>random = Random()

def mean(x):
    return float(sum(x)) / len(x)

if __name__ == "__main__":
    N = 999999   
    population = [random.random() for _ in range(N)]
    print("Population mean = ", mean(population))

    rnd_num_count = 30
    sample_size = 12
    sample_means = [mean(random.choices(population, k=sample_size))
                    for _ in range(rnd_num_count)]
    print("Mean of sample mean = ", mean(sample_means))
</code></pre>

<p>This script has the advantage that you can easily test it with the standard library <code>random</code> module by replacing the line <code>random = Random()</code> with <code>import random</code>. This way you can see if your class produces random numbers somewhat correctly.</p>

<hr>

<p>If implementing so many different random functions gets tedious, you can also subclass <code>random.Random</code>:</p>

<blockquote>
  <p>Class <code>Random</code> can also be subclassed if you want to use a different
  basic generator of your own devising: in that case, override the
  following methods:  <code>random()</code>, <code>seed()</code>, <code>getstate()</code>, and <code>setstate()</code>.
  Optionally, implement a <code>getrandbits()</code> method so that <code>randrange()</code> can
  cover arbitrarily large ranges.</p>
</blockquote>

<p>This of course means that you are using the standard library and not your own implementations as much. In that case you probably also want to use <code>statistics.mean</code>.</p>
    </div>