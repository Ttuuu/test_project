<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    with open(filename) as json_data:
</code></pre>
</blockquote>

<p>Good!</p>

<hr>

<blockquote>
<pre><code>        lst = json.load(json_data)
        totalperms *= len(lst)
        pairlists.append(lst)
</code></pre>
</blockquote>

<p><code>lst</code> isn't a great name, but I think it's forgiveable with such a tight scope. Maybe worth sanity-checking that the structure is what you expect?</p>

<hr>

<blockquote>
<pre><code>print("Calculating permutations: %d" % totalperms)
perms = list(itertools.product(*pairlists))
</code></pre>
</blockquote>

<p>Why bother with the code to calculate <code>totalperms</code> if you can just extract it as <code>len(perms)</code>?</p>

<p>Although, on the flip side, why coerce <code>perms</code> to a list and force it all into memory?</p>

<hr>

<blockquote>
<pre><code># combo is a list of flattened lists of every resistor combination
combo = [[0 for rows in range(len(pairlists)*2)] for cols in range(len(perms))]
</code></pre>
</blockquote>

<p>I'm not sure what the point of this is. Perhaps the comment should explain why we need it.</p>

<hr>

<blockquote>
<pre><code>for i in range(0,len(perms)):
</code></pre>
</blockquote>

<p>You're right to think there's a more Pythonic way of doing this:</p>

<pre><code>    for i, perm in enumerate(perms):
</code></pre>

<p>This doesn't require <code>perms</code> to be a <code>list</code>, because it removes the need to index into it.</p>

<hr>

<blockquote>
<pre><code>    for j in range(0,len(pairlists)):
        combo[i][2*j] = perms[i][j][0]
        combo[i][2*j+1] = perms[i][j][1]
        price[i] += perms[i][j][2]
</code></pre>
</blockquote>

<p>This really isn't doing much. Why not inline the calculation of the best option?</p>

<hr>

<blockquote>
<pre><code>        count += 1
        if ( count % 1000000 == 0 ):
            print("%d of %d" % (count,totalperms))
</code></pre>
</blockquote>

<p>That's buggy: it should be at one less level of indentation.</p>

<hr>

<blockquote>
<pre><code># Find the combination with the least number of unique resistor values
</code></pre>
</blockquote>

<p>This is a pet peeve of mine: <em>unique</em> means that there is only one in existence. <em>Distinct</em> expresses precisely and unambiguously what you mean here.</p>

<hr>

<blockquote>
<pre><code>minlen = 999
for s in combo:
    if ( len(set(s)) &lt; len(pairlists)*2 ):
        if ( len(set(s)) &lt; minlen ):
            minlen = len(set(s))
</code></pre>
</blockquote>

<p>It's not standard Python style to use brackets around the condition. The conditions can be merged into one as</p>

<pre><code>    if len(set(s)) &lt; min(len(pairlists)*2, minlen):
        minlen = len(set(s))
</code></pre>

<p>but then that points to just initialising <code>minlen</code> to <code>len(pairlists)*2</code> instead of the magic number <code>999</code>.</p>

<hr>

<p>Finally, this doesn't strike me as likely to be an efficient approach.</p>

<p>I would think it's likely to be more efficient (although still not very) to build a <code>set</code> of the distinct values and then look at subsets in order of increasing size, maybe guided by frequencies of the values.</p>

<p>The best option is probably to try to work out an encoding to a standard problem and use an optimised solver. The obvious one is SAT: you've basically got a Boolean formula already: each resistor value corresponds to a variable, and each file is an OR of a bunch of two-variable ANDs. Then you just need to add a count of the number of variables which are TRUE and require it to be less than a threshold, and search for the critical value of the threshold. For the prices you can use the same SAT formulation and loop:</p>

<pre><code>while sat_instance.solve():
    yield sat_instance.solution()
    add a rule to sat_instance to exclude the solution
</code></pre>
    </div>