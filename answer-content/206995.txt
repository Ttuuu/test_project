<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Separate the logic and data from the presentation</h1>

<p><code>return</code> or <code>yield</code>, don't print. This way your code can be used in other programs that might reuse this. </p>

<h1>set</h1>

<p>Your <code>Library</code> and <code>StudentDatabase</code> uses <code>list</code>s to keep the books. Since the order is not important, but checking for containment and adding and removing is more important, a <code>set</code> is a more suited container than a list. This might give a problem when a student borrows more than 1 version of a book, but this can be solved by using real objects for the books instead of just strings for the titles.</p>

<h1>Communicate failure with exceptions</h1>

<pre><code>def get_student(self, name):
    if name not in self._books:
        return "Not Found"
    return self._books[name]
</code></pre>

<p>No you have to always check for that special value <code>"Not Found"</code></p>

<p>Better would be to raise an exception, or even just let the <code>KeyError</code> bubble up to the calling code</p>

<h1>String literals</h1>

<p>There are 4 ways to delimit string literals. <code>"</code>, <code>'</code>, <code>"""</code>, <code>'''</code>. If you need both <code>"</code> and <code>'</code> in the string itself, you can use one of the other ones to delimit the string. For example <code>f'''{name} doesn't seem to have borrowed "{book}"'''</code></p>

<p>Together with Graham's comments, the result could be something like:</p>

<pre><code>class StudentDataBaseException(Exception): pass
class NoStudent(StudentDataBaseException): pass
class NoBook(StudentDataBaseException): pass


class StudentDatabase:
    def __init__(self):
        self._books = defaultdict(set)

    def get_student(self, name):
        try:
            return self._books[name]
        except KeyError as exc:
            raise NoStudent(f"Student {name} not detected in Database") from exc

    def borrow_book(self, name, book, library):
        if library.lend_book(book):
            self._books[name].add(book)

    def return_book(self, name, book, library):
        if book not in self._books[name]:
            raise NoBook(f'''{name} doesn't seem to have borrowed "{book}"''')
        else:
            library.add_book(book)
            self._books[name].remove(book)

    def display_students_with_books(self):
        for name, books in self._books.items():
            if books:
                yield f"{name}: {books}" 

    def display_students_with_books(self):
        for name, books in self._books.items():
            if books:
                yield name, books
</code></pre>

<p>I added 2 versions of the <code>display_students_with_books</code> method, one yielding a <code>str</code>, the other yielding the actual name and books objects, so the user interface can take care of the formatting</p>

<h1>Atomic operations</h1>

<p>If an operation takes 2 steps, for example returning a book removes the book from a student's collection and adds it to the library, and something goes wrong with the second operation, the first operation needs to be cancelled. There are a number of ways to ensure this (<code>try-except</code> blocks,...) but this might be a concern.</p>
    </div>