<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In reviewing your code a couple things jumped out... </p>

<ol>
<li>The objects have no methods. They are what I would call "data bags". One OOP principle I generally stick to is, "Let the objects do the work".</li>
<li>Incrementing cost and price while looping works, but we can also store the book data and sum it as necessary via LINQ.</li>
</ol>

<p>I admire @tinstaafl's answer... short, sweet, and highly effective use of LINQ, which taught me something new about nested queries. Thank you.</p>

<p>While I appreciate the concentrated power of things like <code>library.First().First().LibraryName</code> I thought it might be nice to make the object model more domain-oriented and explicit.</p>

<p>Below is my general take on how I would solve this problem by relying on objects' methods rather than external manipulation of their data. </p>

<p>The LibraryChain class is the "container" for all the Libraries. It encapsulates everything, which allows the App_Library.Run() method to do be 3 lines.</p>

<p>Since Library and Shelf have the same Id and Name properties, I based them on the abstract Container class. We could take this abstraction further, but I didn't want to complicate things.</p>

<p>For good measure I added the IAccountable interface to identify all classes on which we'll be calculating sums. And, I played with the output format a bit...</p>

<p>If you do ever get the chance to modify the Book class, could replace LibraryId and LibraryName with a Library, and ShelveId and ShelveName with a Shelf.</p>

<p>Here's the code:</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace Forums
{
    public class Book
    {
        public int LibraryId { get; set; }
        public string LibraryName { get; set; }

        public int ShelveId { get; set; }
        public string ShelveName { get; set; }

        public int Cost { get; set; }
        public int Price { get; set; }
        public string Name { get; set; }
        public string ForeName { get; set; }
        public string Stuff { get; set; }

        public Book(int libraryId, string libraryName, int shelveId, string shelveName
                    , int cost, int price, string name, string foreName, string stuff)
        {
            LibraryId = libraryId;
            LibraryName = libraryName;
            ShelveId = shelveId;
            ShelveName = shelveName;
            Cost = cost;
            Price = price;
            Name = name;
            ForeName = foreName;
            Stuff = stuff;
        }
    }

    public interface IAccountable
    {
        int Cost { get; }
        int Price { get; }
    }

    public class LibraryChain : IAccountable
    {
        private List&lt;Book&gt; books;

        public List&lt;Library&gt; Libraries { get; private set; } = new List&lt;Library&gt;();
        public bool LibraryExists(int id) =&gt; Libraries.Where(l =&gt; l.Id == id).Any();
        public Library Library(int id) =&gt; Libraries.Where(l =&gt; l.Id == id).First();
        public int Cost =&gt; Libraries.Sum(l =&gt; l.Cost);
        public int Price =&gt; Libraries.Sum(l =&gt; l.Price);

        public LibraryChain(List&lt;Book&gt; books)
        {
            this.books = books;
        }

        public void Parse()
        {
            books.ForEach(b =&gt;
            {
                Library library;
                if (!LibraryExists(b.LibraryId))
                {
                    library = new Library(b.LibraryId, b.LibraryName);
                    Libraries.Add(library);
                }
                else
                {
                    library = Library(b.LibraryId);
                }

                Shelf shelf;
                if (!library.ShelfExists(b.ShelveId))
                {
                    shelf = new Shelf(b.ShelveId, b.ShelveName);
                    library.Add(shelf);
                }
                else
                {
                    shelf = library.Shelf(b.ShelveId);
                }

                shelf.Add(b);
            });
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.AppendLine($"All Libraries Report");
            sb.AppendLine($"Total Cost = {Cost}");
            sb.AppendLine($"Total Price = {Price}");
            sb.AppendLine($"Library Count = {Libraries.Count}");
            sb.AppendLine();
            Libraries.ForEach(l =&gt; sb.AppendLine(l.ToString()));
            return sb.ToString();
        }
    }

    public abstract class Container 
    {
        public int Id { get; private set; }
        public string Name { get; private set; }
        public Container(int id, string name)
        {
            Id = id;
            Name = name;
        }        
    }

    public class Library : Container, IAccountable
    {
        public List&lt;Shelf&gt; Shelves { get; set; } = new List&lt;Shelf&gt;();
        public bool ShelfExists(int id) =&gt; Shelves.Where(l =&gt; l.Id == id).Any();
        public Shelf Shelf(int id) =&gt; Shelves.Where(l =&gt; l.Id == id).First();
        public int Cost =&gt; Shelves.Sum(s =&gt; s.Cost);
        public int Price =&gt; Shelves.Sum(s =&gt; s.Price);

        public Library(int id, string name) : base(id, name)
        {
        }

        public void Add(Shelf shelf)
        {
            Shelves.Add(shelf);
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.AppendLine($"Library {Id}");
            sb.AppendLine($"Name = {Name}");
            sb.AppendLine($"Cost = {Cost}");
            sb.AppendLine($"Shelf Count = {Shelves.Count} ");
            sb.AppendLine($"Shelves:");
            Shelves.ForEach(s =&gt; sb.AppendLine(s.ToString()));
            return sb.ToString();
        }
    }

    public class Shelf : Container, IAccountable
    {
        public List&lt;Book&gt; Books { get; private set; } = new List&lt;Book&gt;();
        public int Cost =&gt; Books.Sum(b =&gt; b.Cost);
        public int Price =&gt; Books.Sum(b =&gt; b.Price);

        public Shelf(int id, string name) : base(id, name)
        {
        }

        public void Add(Book book)
        {
            Books.Add(book);
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.AppendLine($"\tShelf {Id}");
            sb.AppendLine($"\tName = {Name}");
            sb.AppendLine($"\tCost = {Cost}");
            sb.AppendLine($"\tBook Count = {Books.Count}");
            sb.AppendLine($"\tBooks:");
            Books.ForEach(b =&gt; sb.AppendLine($"\t\t{b.Name}"));
            return sb.ToString();
        }
    }

    public class App_Library
    {
        private LibraryChain getLibraryChain()
        {
            var list = new List&lt;Book&gt; {
                new Book (1, "Green", 42, "A", 10, 1, "Gra", "Bar", "etc."),
                new Book (1, "Green", 43, "B", 21, 2, "Grb", "Bar", "etc."),
                new Book (2, "Blue", 652, "C", 10, 1, "Blc", "Bar", "etc."),
                new Book (2, "Blue", 652, "C", 01, 7, "Bl2", "Bar", "etc."),
                new Book (2, "Blue", 123, "D", 12, 4, "Bld", "Bar", "etc."),
                new Book (8, "White", 94, "E", 14, 9, "Foo", "Bar", "etc."),
                new Book (9, "Grey", 142, "F", 11, 6, "Foo", "Bar", "etc."),
                new Book (9, "Grey", 142, "F", 12, 2, "Bar", "Bar", "etc.")
            };
            return new LibraryChain(list);
        }

        public void Run()
        {
            var chain = getLibraryChain();
            chain.Parse();
            Console.WriteLine(chain.ToString());
        }
    }
}
</code></pre>

<p>To Run:</p>

<pre><code>static void Main(string[] args)
{
    var app = new App_Library();
    app.Run();
    if (System.Diagnostics.Debugger.IsAttached)
    {
        Console.WriteLine("\nPress &lt;Enter&gt; to continue...");
        Console.ReadLine();
    }
}
</code></pre>

<p>Output:</p>

<pre><code>All Libraries Report
Total Cost = 91
Total Price = 32
Library Count = 4

Library 1
Name = Green
Cost = 31
Shelf Count = 2
Shelves:
        Shelf 42
        Name = A
        Cost = 10
        Book Count = 1
        Books:
                Gra

        Shelf 43
        Name = B
        Cost = 21
        Book Count = 1
        Books:
                Grb


Library 2
Name = Blue
Cost = 23
Shelf Count = 2
Shelves:
        Shelf 652
        Name = C
        Cost = 11
        Book Count = 2
        Books:
                Blc
                Bl2

        Shelf 123
        Name = D
        Cost = 12
        Book Count = 1
        Books:
                Bld


Library 8
Name = White
Cost = 14
Shelf Count = 1
Shelves:
        Shelf 94
        Name = E
        Cost = 14
        Book Count = 1
        Books:
                Foo


Library 9
Name = Grey
Cost = 23
Shelf Count = 1
Shelves:
        Shelf 142
        Name = F
        Cost = 23
        Book Count = 2
        Books:
                Foo
                Bar




Press &lt;Enter&gt; to continue...
</code></pre>
    </div>