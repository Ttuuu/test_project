<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(I'm on my phone on a road trip, so I can't do anything fancy here)</p>

<p>Your issues with <code>roster</code> are because you have it as a attribute of the class, not an instance attribute. That means that every instance shares the same <code>roster</code>. You need to define it in the <code>__init__</code> (or elsewhere, but ideally in the initializer) as <code>self.roster</code>, just like you did with the other instance attributes.</p>

<pre><code>class Player:
    def __init__(self, d_zone_x, d_zone_y, name):
        self.d_zone_x = d_zone_x
        self.d_zone_y = d_zone_y
        self.draft_zone = DraftZone(self.d_zone_x, self.d_zone_y)
        self.name = name
        self.roster = []  # Here

    def draft(self, card):
        pick_num = len(self.roster) + 1
        self.roster.append((pick_num, card.name))
</code></pre>

<p>When referring to it previously, <code>self.roster</code> worked despite it not being an instance attribute because you can refer to class attributes using an instance. Also note, you don't need <code>(object)</code> in Python 3. That was important in 2, but Python 3 uses "new style" classes by default. </p>

<p>With that change, now you can write:</p>

<pre><code>PLAYER1 = Player(P1_ZONE_X, P1_ZONE_Y, 'Player 1')
PLAYER2 = Player(P2_ZONE_X, P2_ZONE_Y, 'Player 2')

PLAYERS = [PLAYER1, PLAYER2]
</code></pre>

<hr>

<p>I think your use of UPPERCASE names for some variables like <code>PLAYER1</code> and <code>PLAYER2</code> are inappropriate. In my mind, constants (which uppercase signifies) are variables that always hold the same value. Now, you never reassign <code>PLAYER1</code>, <em>but</em>, since it and <code>PLAYER2</code> are mutable, they don't maintain the same value throughout the program.</p>

<p>Yes, it could be argued that the "value" being referred to as constant is the reference to the object, not the value of the object itself.</p>

<p>I'm going to suggest though only treating objects as constants if the <em>value of the object itself, as well as the reference to it</em> remain constant. I'd like to hear though if anyone disagrees with me on this point.</p>

<hr>

<p>I think the <code>if col ==</code> checks in <code>Card</code> could be neatened up using a dictionary. Something like:</p>

<pre><code>COL_NAME_TO_VALUE = \
    {"W": W, 
     "R": R
     . . . }

. . . 

self.col = COL_NAME_TO_VALUE[col]
</code></pre>

<p>That gets rid of all the duplicate <code>if col == . . .: self.col =. . .</code> bits which would complicate refactoring later. </p>
    </div>