<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>math</h1>
<blockquote>
<ol start="2">
<li>... unable to come up with an estimate of the probability of landing on a particular score</li>
</ol>
</blockquote>
<p>This is the max-3-cell problem in a two-dimensional setting.
I wonder if we could make analytic progress against this by considering
the max-2-cell problem in a one-dimensional setting.
There must be some sort of symmetry we can appeal to.
Considering the density on an infinite line
or an infinite plane
would let us ignore the complexities of boundary conditions,
at least for a little while.</p>
<h1>code</h1>
<pre><code>    def __init__(self, Row, Coloumn):
</code></pre>
<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> asks that you not use caps for such variables.
Prefer <a href="https://en.wikipedia.org/wiki/Snake_case" rel="nofollow noreferrer">snake_case</a> names like <code>u_neighbor</code> or <code>u_connection</code>.
Run <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer"><code>$ flake8</code></a>, and heed its advice, before sharing your code.
Also, typo: <code>column</code>.</p>
<p>You made a modeling choice here, that the <a href="https://en.wikipedia.org/wiki/Von_Neumann_neighborhood" rel="nofollow noreferrer">Von Neumann neighborhood</a>
should be represented as union of four distinct unrelated things.
I don't agree with that perspective.
I would prefer to see a vector of four similar things,
where you iterate through this list:</p>
<pre><code>[(0, -1),
 (0, 1),
 (-1, 0),
 (1, 0)]
</code></pre>
<p>You wrote:</p>
<pre><code>    self.Name = 'CellR'+str(Row)+'C'+str(Coloumn)
</code></pre>
<p>If a <a href="https://cito.github.io/blog/f-strings/" rel="nofollow noreferrer">modern</a> python is available to you, it would be more natural to use an <a href="https://www.python.org/dev/peps/pep-0498/#abstract" rel="nofollow noreferrer">f-string</a>:</p>
<pre><code>    self.name = f'CellR{row}C{column}'
</code></pre>
<p>Here is some tediously repetitive code to express the notion of adjacency:</p>
<pre><code>            if(i != 0):
                self.Cells[i][j].UNeighbor =  self.Cells[i - 1][j]
            if(i != m-1):
                self.Cells[i][j].DNeighbor =  self.Cells[i + 1][j]
            if(j != 0):
                self.Cells[i][j].LNeighbor =  self.Cells[i][j - 1]
            if(j != n-1):
                self.Cells[i][j].RNeighbor =  self.Cells[i][j + 1]
</code></pre>
<p>Recommend using a single assignment that loops through the <code>von_neumann</code> list of delta x's &amp; y's above.</p>
<p>This is obscure:</p>
<pre><code>    for i in range(m):
        for j in range(2 * n - 1):
            ThisCell = self.Cells[i][math.floor(j / 2)]
</code></pre>
<p>It's not clear why there's no symmetry between horizontal and vertical.
At a minimum it warrants a comment.</p>
<pre><code>            if (i != m - 1):
</code></pre>
<p>This is lovely C bounds checking, and you can certainly keep it.
But consider following the pythonic "ask forgiveness, not permission",
by using <code>try</code> / <code>catch IndexError</code> to deal with the borders.
Same remark for <code>CalcExp</code>.</p>
<p>Also, no need for <code>(</code> extra parens <code>)</code> in a python <code>if</code> statement.</p>
<p>Couple of issues with this one:</p>
<pre><code>if (ThisCell.LConnection &amp; (ThisCell.LNeighbor != None)):
</code></pre>
<ol>
<li>No <code>(</code> extra parens <code>)</code>, please.</li>
<li>Do <em>not</em> use bitwise <code>&amp;</code> and on booleans. Use boolean <code>and</code> instead.</li>
<li><code>flake8</code> would have told you to use <code>is</code> to test identity of the <code>None</code> singleton, rather than an equality operator.</li>
</ol>
<p>So that would leave us with:</p>
<pre><code>if this_cell.l_connection and this_cell.l_neighbor is not None:
</code></pre>
<p>or even more simply:</p>
<pre><code>if this_cell.l_connection and this_cell.l_neighbor:
</code></pre>
<p>Similarly a subsequent line would be <code>if not accounted:</code></p>
<p>More tedious statements follow, that could be a loop through <code>von_neumann</code>.</p>
<p>In <code>def connected_regions</code>, this takes too long:</p>
<pre><code>        Accounted = False
        for Region in ListOfRegions:
            if(ThisCell.Name in Region):
                Accounted = True
</code></pre>
<p>Please use a generator expression:</p>
<pre><code>        accounted = any(this_cell.name in region
                        for region in list_of_regions)
</code></pre>
<p>Why? Because <code>any()</code> will bail out early, upon encountering 1st <code>True</code>.</p>
<p>Kudos for using <code>set()</code>, so the <code>in</code> test will be fast.</p>
<pre><code>        score = score + 1
</code></pre>
<p>In python we prefer to phrase that as <code>score += 1</code>.</p>
<p>The name <code>calc_exp</code> surprisingly turns out to relate to expectations,
rather than <code>math.exp</code> or exponentials.</p>
<p>This is a bit cumbersome:</p>
<pre><code>ListOfScores = []
ProbsOfScores = []
</code></pre>
<p>Better to store a single list of (score, prob) tuples.
It would simplify some manipulations farther down in the function,
including allowing you to finish with <code>return sum( ... )</code>.</p>
<h1>visualization</h1>
<p>Consider writing code that depicts how a given configuration of matchsticks turned out, with
markings of the 1-, 2-, &amp; 3-cell regions.
This would facilitate manual checking of your results for a couple of particular configurations.</p>
<p>In a similar vein, unit tests using very small number of matchsticks wouldn't hurt.</p>
<h1>high level advice</h1>
<p>Run <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer"><code>flake8</code></a>.
Follow its instructions.
This will make your code more easily understood by people who interact with it.</p>
    </div>