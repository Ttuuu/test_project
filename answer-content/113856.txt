<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is the most terse way to do this.</p>

<p>To break this down, <code>Enumerable.Range</code> creates an ordered array. Then, <code>OrderBy</code> uses a random key generated by the random number generator. This key is associated with each cell in the <code>int[]</code>. This means that the <code>OrderBy</code> will reshuffle the array based on this random key and voila: a random array of <code>n</code> numbers.         </p>

<pre><code>public static int[] Shuffle(int n)
    {
        var randomGenerator = new Random();
        return Enumerable.Range(0, n).OrderBy(x =&gt; randomGenerator.Next()).ToArray();
    }
</code></pre>
    </div>