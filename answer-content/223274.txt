<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Pythonic, readable and convenient</p>
</blockquote>

<p>are all subjective and open to debate, even though "Pythonic" is less so than the others. That said, a simplified version may be illustrative. Comparing</p>

<pre><code>@foo
@bar
def baz(value: T) -&gt; T:
    return value
</code></pre>

<p>to</p>

<pre><code>def baz(value: T) -&gt; FooT:
    return foo(bar(value))
</code></pre>

<p>there are two issues with the former:</p>

<ol>
<li>The final return type is now hidden in <code>foo</code>.</li>
<li>It is easy to confuse the layering - is <code>baz(value)</code> equivalent to <code>foo(bar(baz(value)))</code> or <code>bar(foo(baz(value)))</code> (or even <code>baz(foo(bar(value)))</code> in case of a novice)? Nested decorators come up so rarely that I would have to look at the documentation to be absolutely sure whether they were in the right sequence.</li>
</ol>

<p>There seems to be two situations where multi-level decorators would be fine:</p>

<ol>
<li>If they pass through the return value unchanged. A logger would be a typical example.</li>
<li>If the decorators are <a href="https://en.wikipedia.org/wiki/Commutative_property" rel="nofollow noreferrer">commutative</a>, that is, their order doesn't matter for the outcome.</li>
</ol>
    </div>