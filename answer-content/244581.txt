<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks to be fairly clean code.</p>
<h1>Suggestions</h1>
<ol>
<li>Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice" rel="nofollow noreferrer">string::slice</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring" rel="nofollow noreferrer">string::substring</a> versus <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr" rel="nofollow noreferrer">string::substr</a>. <code>substr</code> isn't deprecated but also isn't recommended for use.</li>
</ol>
<blockquote>
<p>Warning: Although <code>String.prototype.substr(â€¦)</code> is not strictly
deprecated (as in "removed from the Web standards"), it is considered
a <strong>legacy function</strong> and should be avoided when possible. It is not part
of the core JavaScript language and may be removed in the future. If
at all possible, use the <code>substring()</code> method instead.</p>
</blockquote>
<pre><code>setCurrentString(currentString.slice(0, currentStringIndex.current + 1));
</code></pre>
<ol start="2">
<li>Provide clearer parameter names, i.e. <code>stringArray</code> versus just <code>strings</code>, and <code>setString</code> or <code>setCurrentString</code> versus <code>set</code>. <code>set</code> alone can be confusing as it isn't very descriptive, i.e. "is it a mathematical set?" By naming a function with verbNoun it is clearer to a reader <em>what</em> it is <em>and</em> what it does.</li>
</ol>
<pre><code>const useTyper = (stringsArray, setCurrentString, defaultDelay = 100) =&gt; {
</code></pre>
<ol start="3">
<li><code>stringIdx</code> and <code>stringsIdx</code> can cause mental gymnastics looking for the 's' to differentiate the two. Isolated from one another the names <em>aren't</em> terrible, but when used together within the same function it is more demanding. The names <em>should</em> also align closer to the variable they indicate an index for. Based on the previous parameter naming suggestion I recommend <code>stringArrayIndex</code> and <code>currentStringIndex</code>.</li>
<li>You also appear to do an extra iteration on the <code>currentString</code> with the conditional test <code>currentStringIndex.current &gt; currentString.length</code>. You can increment to the next string when the current string's index is equal to the length, <code>currentStringIndex.current &gt;= currentString.length</code>.</li>
<li>Similar conditional test for checking for the end of the strings array, when the index is. greater then <em>or equal</em> to the length you can quit. <code>stringArrayIndex.current &gt;= stringArray.length</code></li>
</ol>
<pre><code>const useTyper = (stringArray, setCurrentString, defaultDelay = 100) =&gt; {
  const [delay, setDelay] = React.useState(defaultDelay);
  // index counters, normally named i and j if this were an imperative loop
  const currentStringIndex = React.useRef(0);
  const stringArrayIndex = React.useRef(0);

  const textTyper = () =&gt; {
    const currentString = stringArray[stringArrayIndex.current];

    setCurrentString(currentString.slice(0, currentStringIndex.current + 1));

    if (currentStringIndex.current &gt;= currentString.length) {
      // Done with string
      stringArrayIndex.current += 1;
      currentStringIndex.current = 0;
      if (stringArrayIndex.current &gt;= stringArray.length) {
        setDelay(null); // Ended.
      }
    }
    currentStringIndex.current += 1;
  };

  useInterval(textTyper, delay);
};
</code></pre>
<p>Good job, nice hook.</p>
    </div>