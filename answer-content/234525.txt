<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>JavaScript style</h2>
<ul>
<li><p>Delimit cod blocks with <code>{}</code>. Eg <code>if (foo) bar = 0;</code> should be <code>if (foo) { bar = 0; }</code></p>
</li>
<li><p>Use semicolons consistently!</p>
</li>
<li><p>Avoid <code>Array.unshift</code> as it is much slower than <code>Array.push</code>. If you know the size of the array pre-allocate the array <code>new Array(size)</code> and then pput items on the array via an index. (See example)</p>
</li>
<li><p>Be wary of destructuring as it can sometimes be rather slow (engines converting the right side to array (like) before assigning to the left). As destructuring becomes more main stream and JS engines stabilize new features destructuring has and will continue to improve in terms of performance.</p>
</li>
</ul>
<h2>Complexity.</h2>
<p>Your function is too complex!</p>
<p>The complexity of this function is <span class="math-container">\$O(n)\$</span> where <span class="math-container">\$n\$</span> is the number of digits in the result. A well written function should thus have a performance that is related linearly to <span class="math-container">\$n\$</span> however your functions performance does not have this relationship, demonstrating a logarithmic performance (approx) <span class="math-container">\$O(n^2)\$</span> making it very slow for large numbers.</p>
<p>The reason is your use of <code>Array.unshift</code>. Each time you unshift a value to the array each item on the array needs to be moved up by one item. This is compounded every time the array size doubles as jS will then create a new array, and copy all the items to that array. As JS is a managed environment and memory is not cleaned up until the function exits or is forced by low memory your function not only has high time complexity but on theoretically infinite memory machines also has a storage complexity of <span class="math-container">\$O(n^2)\$</span></p>
<h2>Rewrites</h2>
<p>The rewrites are both <span class="math-container">\$O(n)\$</span> time and space complex, where <span class="math-container">\$n\$</span> is number of digits in the result (including leading zeros).</p>
<p>rather than revers the digits the code pre-allocates the result array with the required number of digits and then works from the least significant digit up.</p>
<p>Note that when the index into the strings <code>a</code> or <code>b</code> is less than 0 the coercion forced by the bitwise OR 0 <code>| 0</code> will convert <code>undefined</code> to the number <code>0</code>.</p>
<p>Ignoring leading zeros (assumes that there are no leading zeros for values over 0)</p>
<pre><code>"use strict";
function sumStrings(a, b) {
    var carry = 0, i = a.length, j = b.length, k = i &gt; j ? i : j;
    const res = new Array(k);
    while (i &gt; 0 || j &gt; 0) {
        const sum = (a[--i] | 0) + (b[--j] | 0) + carry;
        res[--k] = sum % 10;
        carry = (sum &gt; 9 &amp;&amp; 1) || 0;
    }
    return (carry ? carry : "") + res.join("");
}
</code></pre>
<p>The next version will accept leading zeros truncating the result string if there is no carry on the last digit. The truncation is at the last non zero digit encountered.</p>
<pre><code>"use strict";
function sumStrings(a, b) {
    var carry = 0, i = a.length, j = b.length, k = i &gt; j ? i : j, lastNonZero = k;
    const res = new Array(k);
    while (i &gt; 0 || j &gt; 0) {
        const sum = (a[--i] | 0) + (b[--j] | 0) + carry;
        lastNonZero = sum ? k : lastNonZero;
        res[--k] = sum % 10;
        carry = (sum &gt; 9 &amp;&amp; 1) || 0;
    }
    return carry ? carry + res.join("") : res.join("").slice(lastNonZero -1); 
}
</code></pre>
<h2>BigInt?</h2>
<p>You could also have just parsed the two strings as BigInt but that is not the point of the exercise.</p>
<p>The summing algorithm is a basic component of computing, the algorithm will also work on any number base. Eg Binary base 2 Hex base 16.</p>
<p>With only minor modifications the function will handle any base and never actually add any numbers</p>
    </div>