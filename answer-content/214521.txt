<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>C++ does not mandate a particular character coding, so while your code is functionally correct on ASCII and ISO-8859 systems, it won't work in <a href="https://en.wikipedia.org/wiki/EBCDIC" rel="noreferrer">EBCDIC</a> environments, for example.  Even with the obvious fix to add <code>'A'-1</code> in place of the magic constant <code>64</code>, the program assumes that English letters have consecutive values, which just isn't the case in BCD encodings.</p>

<p>The portable approach is to index a string literal:</p>

<pre><code>    static const std::string_view alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    if (letter &gt; 0 &amp;&amp; letter &lt;= alphabet.size()) {
        std::cout &lt;&lt; "Letter " &lt;&lt; letter &lt;&lt; " is '"
                  &lt;&lt; alphabet[letter-1]
                  &lt;&lt; "'\n";
    }
</code></pre>

<hr>

<p>Other issues:</p>

<ul>
<li>Don't use <code>letter</code> before checking whether <code>std::cin &gt;&gt; letter</code> succeeded.</li>
<li>Instead of an infinite loop, prefer a finite loop for reading inputs.</li>
<li>Consider accepting input as command-line argument(s) as a more convenient alternative to using standard input.</li>
<li>Spelling: "<em>corresponds</em>".</li>
</ul>
    </div>