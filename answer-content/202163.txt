<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <a href="https://codereview.stackexchange.com/a/202159/151754">cariehl's answer</a> you've already learned about implementing your iterator as a pointer, which would simplify the class significantly. Iterators were originally designed to mimic pointers, a pointer is an iterator. But it's nice to have a dedicated class as your iterator, because C++ is all about types, you want to let the compiler check your types and give error messages if things don't match.</p>

<h3>Style</h3>

<p><code>class Vector</code> is a common name, and likely to clash. So is <code>VECTOR_H</code> as an include guard. I would suggest that you always use namespaces, even if you don't think you'll re-use the code later in a larger project.</p>

<p>In C++, it is preferred to write <code>const T&amp; value</code> (or even <code>T const&amp; value</code>) rather than <code>const T &amp;value</code>. The <code>&amp;</code> is part of the type, and so should be close to the type, not to the variable name.</p>

<h3>Constructor</h3>

<p>Your constructor <code>Vector(int nCapacity)</code> sets the capacity, and leaves <code>size</code> at 0. This is not the behavior of <code>std::vector</code>, and therefore could be confusing. If you call <code>Vector(0)</code> you'll allocate an array of size 0, which is UB (as far as I know).</p>

<h3>Destructor</h3>

<p>Your destructor:</p>

<blockquote>
<pre><code>template &lt;typename T&gt;
Vector&lt;T&gt;::~Vector()
{
    delete m_pData;
    m_nSize = 0;
    m_nCapacity = 0;
}
</code></pre>
</blockquote>

<p>sets member variable values. This is unnecessary, as the destructor is called when the object ceases to exist. There is no need to leave it in a consistent state. You also have the bug that <a href="https://codereview.stackexchange.com/a/202159/151754">cariehl's answer</a> mentioned: <code>delete[] m_pData</code>.</p>

<p>However, ideally you don't have a destructor at all. If you store your pointer in a <code>std::unique_ptr&lt;T[]&gt;</code> instead of <code>T*</code>, you can skip writing a destructor.</p>

<p>By not writing a destructor, the compiler will automatically generate a move assignment and a move constructor for you. Currently, your class is not copyable or movable. To make it copyable, you'll have to explicitly write a copy constructor and assignment operator, since <code>std::unique_ptr</code> is not copyable.</p>

<h3>Insertion</h3>

<p>The <code>Vector::insert</code> method uses a loop to copy data:</p>

<blockquote>
<pre><code>for (auto idx = 0; idx &lt; m_nSize; ++idx)
    pNewMemory[idx] = m_pData[idx];
</code></pre>
</blockquote>

<p>This could be inefficient. For one, you should be moving the data, not copying it. For <code>T==int</code> it doesn't matter, but for more complex types it does. You can use the algorithm <code>std::move</code> effectively to move the data (which is implemented as a fast <code>memcpy</code> if data is trivially copyable):</p>

<pre><code>std::move(m_pData, m_pData + m_nSize, pNewMemory);
</code></pre>

<p>You'll need to include <code>&lt;algorithm&gt;</code> for this.</p>

<p>Now you need to change the signature for your <code>insert(const T &amp;value)</code> function to be <code>insert(T value)</code>. Then:</p>

<blockquote>
<pre><code>m_pData[m_nSize] = value;
</code></pre>
</blockquote>

<p>becomes:</p>

<pre><code>m_pData[m_nSize] = std::move(value);
</code></pre>

<p>Now the copy is made when you call the function, rather than inside the function. The advantage is that if the value used when calling the function is temporary, or you explicitly <code>std::move</code> it, no copy will be made at all.</p>

<h3>Exceptions</h3>

<blockquote>
<pre><code>throw std::exception("Index out of range");
</code></pre>
</blockquote>

<p>is not legal C++, as <a href="https://en.cppreference.com/w/cpp/error/exception/exception" rel="nofollow noreferrer"><code>std::exception</code></a> doesn't have such a constructor. Instead, use <code>std::runtime_error</code> or <code>std::logic_error</code>, or even <code>std::range_error</code>, which is derived from <code>std::runtime_error</code> and used by the standard library exactly for this type of error.</p>
    </div>