<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nested ternaries tend to be hard to read. The writing style could help a lot though, consider this:</p>

<pre><code>b === "("
  ? brackCounter.openBrackets++
  : brackCounter.openBrackets
    ? brackCounter.openBrackets--
    : brackCounter.closedBrackets++;
</code></pre>

<p>The term "bracket" is redundant within the implementation.
What else would you count, have open or closed, than brackets?
Nothing, so I suggest dropping that from the names:</p>

<ul>
<li><code>brackCounter</code> -&gt; <code>counter</code></li>
<li><code>openBrackets</code> -&gt; <code>open</code></li>
<li><code>closedBrackets</code> -&gt; <code>closed</code></li>
</ul>

<p>Functional programming tries to avoid mutation.
The way the object <code>{openBrackets: 0, closedBrackets: 0}</code> is mutated through the reduce goes against that.
You could return new <em>tuples</em> instead:</p>

<pre><code>const numberOfUnbalanced = brackets =&gt; brackets
  .split("")
  .reduce(([open, closed], b) =&gt; {
    return b === "("
      ? [open + 1, closed]
      : open
        ? [open - 1, closed]
        : [open, closed + 1];
  }, [0, 0])
  .reduce((sum, b) =&gt; sum + b);
</code></pre>
    </div>