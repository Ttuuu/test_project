<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>sineemore already covered <em>almost</em> everything I wanted to say.</p>

<ol>
<li><p>Make up your mind about what version of JS you are targeting.You use <code>let</code>, which was introduced in ES2015, but opt for <code>Array.from(arguments).slice(1)</code> instead of the more readable <code>...args</code> which was also introduced in ES2015. I recommend going for a later version as it makes it possible to write more readable code.</p></li>
<li><p>Since you store events in an object, users are forced to use string keys. This is probably what they will do anyways, but since the specification does not provide this assurance, your implementation should correctly handle more complex event keys. I recommend using a <code>Map</code> instead of <code>Object.create(null)</code>.</p></li>
<li><p>The specification mentions removing all event handlers. I took this to mean <em>all</em> event handlers, not just all event handlers registered for the passed event. If I call <code>emitter.off()</code>, I would expect the <code>eventHandlers</code> object to be reset.</p></li>
<li><p>Don't bother checking if an array contains content before iterating over it. It just creates more noise and provides next to no performance benefit. </p></li>
<li><p><strike>Most event emitter libraries allow passing in a <code>context</code> argument to the <code>on</code> which <code>this</code> will be bound to. I'd recommend adding this simple feature as it can greatly improve usability.</strike> With arrow functions, I don't use this feature in any implementation I consume, and I don't include it anymore in implementations I write.</p></li>
<li><p>If I pass the same function to <code>on</code> multiple times, what should happen? Should it drop the second subscription? What if the first subscription is with <code>once</code> and the second with <code>on</code>? The reverse? What your library does should be documented and is worth some thought.</p></li>
<li><p>Consider failing early if passed invalid arguments. I'd much rather be notified that a handler is not a function when calling <code>on</code> than when calling <code>emit</code>.</p></li>
<li><p>Don't repeat yourself! <code>emit</code> can and should use <code>off</code> to remove <code>once</code> events instead of doing it within the function.</p></li>
</ol>

<hr>

<p>I wanted to give this a shot myself, so I added a few tests to address sineemore's points and my own.</p>

<pre><code>it('Works with toString', function() {
  const callback = sinon.fake();
  emitter.on('toString', callback);
  emitter.emit('toString');
  callback.should.have.been.called;
})

it('Works with object references', function() {
  const callback = sinon.fake();
  emitter.on({}, callback);
  emitter.emit({});
  callback.should.not.have.been.called;
});

it('Does not apply `off` calls in the middle of emitting', function() {
  const callback = sinon.fake();
  emitter.once('event', () =&gt; {
    emitter.off('event', callback);
  })
  emitter.on('event', callback);
  emitter.emit('event');
  callback.should.have.been.called;
});
</code></pre>

<p>Implementation:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// The assert* functions really belong in their own module.

/**
 * Throws an error if fn is not a function.
 * @param {function?} fn
 * @param {string} name
 */
function assertFunction(fn, name) {
  if (typeof fn !== 'function') {
    throw new Error(`Expected ${name} to be a function. Got ${typeof fn}.`);
  }
}

/**
 * Throws an error if arg is not defined.
 * @param {*} arg
 * @param {string} name
 */
function assertDefined(arg, name) {
  if (arg === undefined) {
    throw new Error(`Expected ${name} to be defined.`);
  }
}

/**
 * Factory function to create an event emitter.
 */
function Emitter() {
  const listeners = new Map();
  const getHandlers = event =&gt; listeners.get(event) || listeners.set(event, []).get(event);

  /**
   * Attaches a listener to the emitter.
   * If on is called multiple times with the same callback, the callback will be subscribed multiple times.
   * @param {*} event may not be undefined.
   * @param {function} callback
   * @param {*} once if this callback should only be called once.
   */
  function on(event, callback, once = false) {
    assertDefined(event, 'event');
    assertFunction(callback, 'callback');
    const handlers = getHandlers(event);
    handlers.push({ callback, once });
  }

  /**
   * Attaches a listener to the emitter that will be called at most once.
   * @see on
   * @param {*} event may not be undefined
   * @param {function} callback
   */
  function once(event, callback) {
    on(event, callback, true);
  }

  /**
   * Removes listeners from an event, or from all events.
   * If a callback is subscribed multiple times, all subscriptions will be cancelled.
   * @param {*} event the event to remove listeners from, if not specified, all listeners on all events will be removed.
   * @param {function?} callback the listener to remove, if not specified all listeners on event will be removed.
   */
  function off(event, callback) {
    if (event === undefined) {
      listeners.clear();
    } else if (callback === undefined) {
      listeners.delete(event);
    } else {
      const handlers = getHandlers(event).filter(({ callback: cb }) =&gt; cb !== callback);
      listeners.set(event, handlers);
    }
  }

  /**
   * Fires an event, calling all subscribed listeners in their subscription order.
   * If a listener throws, listeners subscribed after that listener will not be called and this function will throw.
   * @param {*} event
   * @param {*[]} args arguments to pass into the subscribed listeners.
   */
  function emit(event, ...args) {
    assertDefined(event, 'event');
    getHandlers(event).slice().forEach(handler =&gt; {
      if (handler.once) {
        off(event, handler.callback);
      }
      handler.callback(...args);
    });
  }

  return { on, once, off, emit }
}

const emitter = Emitter()
emitter.on('test', console.log)
emitter.once('test', msg =&gt; console.log('&gt;Once&lt;', msg))
emitter.emit('test', 'It works!')
emitter.emit('test', 'Again!')</code></pre>
</div>
</div>

    </div>