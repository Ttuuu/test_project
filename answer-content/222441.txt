<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>                if (TaskCancellation == true)
                {
                    break;
                }
</code></pre>
</blockquote>



<blockquote>
<pre><code>                    CancellationToken.ThrowIfCancellationRequested();
</code></pre>
</blockquote>

<p>Some comments explaining why two different cancellation methods are necessary would be useful.</p>

<hr>

<blockquote>
<pre><code>                    if (jockey.Name != null)
                    {
                        lock (((ICollection)Jockeys).SyncRoot)
                        {
                            //if objects are already in the List
                            if (Jockeys.Any(h =&gt; h.Name.ToLower() == jockey.Name.ToLower()))
                            {
                                LoadedJockey doubledJockey = Jockeys.Where(h =&gt; h.Name.ToLower() == jockey.Name.ToLower()).FirstOrDefault();
                                Jockeys.Remove(doubledJockey);
                                MergeJockeysData(doubledJockey, jockey);
                            }
                            else
                            {
                                Jockeys.Add(jockey);
                            }
                        }
                    }
</code></pre>
</blockquote>

<p>There are at least four code smells here:</p>

<ol>
<li>Using <code>Name</code> as a primary key. With real world data, what prevents two jockeys from having the same name?</li>
<li>Using an <code>ICollection</code> for something which clearly needs to be an <code>IDictionary</code>, given the way its contents are looked up.</li>
<li><pre><code>if (collection.Any(predicate))
{
    variable = collection.Where(predicate).FirstOrDefault();
</code></pre>

<p>searches twice, when one search suffices:</p>

<pre><code>variable = collection.FirstOrDefault(predicate);
if (variable != null)
{
</code></pre></li>
<li>If <code>MergeJockeysData</code> doesn't modify <code>Jockeys</code> then data would seem to be lost, but if it does modify then the data flow is being obfuscated.</li>
</ol>

<hr>

<blockquote>
<pre><code>            try
            {
                await Task.WhenAll(tasks);
            }
            catch (OperationCanceledException)
            {
                //
            }
            finally
            {
                await _dataServices.SaveAllJockeysAsync(Jockeys.ToList()); //saves everything to JSON file
</code></pre>
</blockquote>

<p><code>Task.WhenAll</code> is a blunt weapon. If there could be hundreds of tasks, you may find that you get better performance by placing a cap on the number of tasks which are executed simultaneously. This requires a lazy enumerator of tasks and a loop with <code>Task.WhenAny</code>.</p>

<p>If an <code>OperationCanceledException</code> is thrown, does it really make sense to save the partial results?</p>

<hr>

<blockquote>
<pre><code>                    HtmlAgilityPack.HtmlWeb web = new HtmlAgilityPack.HtmlWeb();
                    HtmlAgilityPack.HtmlDocument doc = web.Load(link);
</code></pre>
</blockquote>

<p>This seems to me to be missing the point of <code>async</code>. It would make a lot more sense to me to first use <code>System.Net.WebClient.DownloadStringAsync</code> to do the IO asynchronously, and then load the string into HtmlAgilityPack for the CPU-bound part. In fact, unless memory consumption is an issue it probably makes sense to have a producer-consumer setup where multiple async tasks do IO and a single <code>Task.Run</code> does the parsing.</p>
    </div>