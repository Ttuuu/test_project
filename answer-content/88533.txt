<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Don't compare against <code>None</code></h3>

<p>Don't compare against <code>None</code> with <code>==</code> or <code>!=</code>.
Use <code>is None</code> and <code>is not None</code>.</p>

<h3>Use <code>@property</code> instead of getters</h3>

<p>Instead of getters like this:</p>

<blockquote>
<pre><code>def get_stren(self):
    """Return the animals strength"""
    return self._strength
</code></pre>
</blockquote>

<p>It's more natural to use properties:</p>

<pre><code>@property
def stren(self):
    return self._strength
</code></pre>

<p>When you use this, instead of <code>animal.get_stren()</code>, you will have to write <code>animal.stren</code> (without parentheses).</p>

<p>I also dropped the redundant comment.</p>

<h3>Generalize when possible</h3>

<p>The current code has many hard-wired elements for Bear and Fish,
for example:</p>

<blockquote>
<pre><code>    for i in range(self._length):
        rval = random.randint(1,3)
        if rval == 1:
            self._contents.append(Bear())
        elif rval == 2:
            self._contents.append(Fish())
        else:
            self._contents.append(None)
</code></pre>
</blockquote>

<p>If later you want to add one more animal type,
you will have to edit the code in many places,
and it can be quite troublesome.
You can make the above example easier to extend like this:</p>

<pre><code>    animal_types = (Bear, Fish)
    len_animal_types = len(animal_types)

    for _ in range(self._length):
        rval = random.randint(0, len_animal_types)
        if rval == len_animal_types:
            self._contents.append(None)
        else:
            self._contents.append(animal_types[rval]())
</code></pre>

<p>Another opportunity for generalization is when you print letter symbols depending on the animal type:</p>

<blockquote>
<pre><code>if type(x) == Bear:
    s += 'B'
elif type(x) == Fish:
    s += 'F'
</code></pre>
</blockquote>

<p>It would be better to add a <code>@property</code> in <code>Animal</code>:</p>

<pre><code>@property
def symbol(self):
    return self.__class__.__name__[0]
</code></pre>

<p>And then you could use simply <code>x.symbol</code> to get the initial letter of the class name of the <code>Animal</code> instance.</p>

<h3>Other simplifications</h3>

<p>Since strings are iterables,
instead of the tedious:</p>

<blockquote>
<pre><code>        self._gender = random.choice(['M', 'F'])
</code></pre>
</blockquote>

<p>You can write simpler:</p>

<pre><code>        self._gender = random.choice('MF')
</code></pre>

<h3>Follow PEP8</h3>

<p><a href="http://www.python.org/dev/peps/pep-0008/">PEP8</a> is the official Python coding style guide. Please follow it.</p>

<p>For example, instead of:</p>

<blockquote>
<pre><code>def __init__(self, gender = None, strength = None):
</code></pre>
</blockquote>

<p>Write like this:</p>

<pre><code>def __init__(self, gender=None, strength=None):
</code></pre>
    </div>