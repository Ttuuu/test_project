<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your major issue here is the algorithm, in which the number of operations grows as the factorial as <code>n</code>. To avoid this you will, I believe, need to go inside the loops that generate permutations. </p>

<p>First, I'd like to restate the problem as: if n individuals are seated around a table and then rearranged randomly, is it possible to move them in such a way that everybody moves a different number of places? The number of places moved is counted clockwise, from 0 to <code>n-1</code>. </p>

<p>This is equivalent to your problem, because if any two are moved displaced the same number of places, they can be rotated back to their original places.</p>

<p>This means that we are looking for solutions in which each displacement 0 to <code>n-1</code> is used once and only once. For any solution, we can generate another <code>n-1</code> solutions by rotations: if there is a solution in which place 1 does not move, we can re-label to get a solution in which 0 does not move. It follows that it is enough to look only at the cases in which position 0 has 0 displacement.</p>

<p>The next step is to observe that if we select 0 for position 0, the normal set of permutations as n-1 options for place 1, namely 1 to <code>n-1</code>, but in this problem we have only <code>n-2</code> options, 2 to <code>n-1</code>. Then when we make a selection for position 1, it will generally rule out two choices for position 2, so we only have <code>n-4</code> options left to try for position 2. This starts to look like a problem with <strong>only</strong> the <code>n/2</code> factorial options to search through. </p>

<p>The following code will loop through this algorithm recursively. The timing is 68 seconds for n=14, 0.083 seconds for n=10 (compared with 27 seconds for n=10 using your algorithm).</p>

<p>(Edited to take into account feedback below -- but the algorithm is unchanged).</p>

<pre><code>def options(ring_length,options_used):
  """The options functions computes the available options at the 
         next position in a ring of length *ring_length* given places 
         taken specified in *options_used*, taking into account 
         that no index should be reused and no displacement should 
         be reused.
  """

  l1 = len(options_used)

  displacements_used = [ ( options_used[i] - i ) % ring_length for i in range(l1) ]

  options_next = [i for i in range(ring_length) if (i not in options_used) and ( (i - l1) % ring_length not in displacements_used)]

  return options_next

def _recurse(ring_length,options_used,result_set):
  """
    ring_length: length of ring (number of elements)
    options_used: options which have been set for some of 
             the places: this is a list of length 1 up to ring_length - 1
            specifying the elements which have been set so far;
    result_set: a set which is used to accumulate permutations 
                 which match the imposed constraint.
  """

  for i in options(ring_length,options_used):
    if len(options_used) == ring_length-1:
      result_set.add( tuple( options_used + [i,] ) )
    else:
      _recurse(ring_length,options_used + [i,],result_set)

def testn(ring_length,result_set):
  """Search for permutations of a ring of length *ring_length* with 
       the constraint that all displacements should be different.
  """
  _recurse(ring_length,[0,],result_set)


if __name__ == "__main__":
  import sys
  ring_length = int( sys.argv[1] )
  result_set = set()
  testn(ring_length,result_set)

  count = len( result_set )
  print( "%s: %s,:: %s" % (ring_length, count, count*ring_length) )
</code></pre>

<p>To verify that the code is doing the same as your algorithm, I have tweaked your code to count the solutions, rather than stopping at the first, and verified that the results are the same up to <code>n=12</code>. The results are zero for even numbers and the following for odd numbers (extended up to <code>n=15</code>):</p>

<pre><code>n     # solutions
3           3
5          15
7         133
9        2025
11      37851
13    1030367
15   36362925
</code></pre>

<p>I've checked even numbers up to <code>n=14</code>: still no solutions. Despite these algorithmic improvements, checking <code>n=16</code> would take several hours on my laptop. The cost is growing roughly as the factorial of <code>n/2</code>, which is a lot slower than <code>n</code> factorial, but still fast. I suspect that the efficiency of the <code>options</code> function could be improved, but it would be nice to know if there is a mathematical solution.</p>
    </div>