<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>For embedded systems, don't use the native integer types of C, nor weird custom types like <code>byte</code>. Always use the types from <code>stdint.h</code>.</li>
<li>Avoid declaring variables at file scope. If you must, because they are shared between several functions in the same file, then declare them as <code>static</code> to narrow down the scope.</li>
<li>Never use binary constants <code>0b</code> because they are non-standard and non-portable. In addition, they are hard to read. Programmers are assumed to be able to read hex.</li>
<li>Similarly, don't mask with decimal numbers like <code>31</code> either, that's even more confusing. <code>0x1F</code> is much clearer.</li>
<li>Don't use "magic numbers" at all. Instead of code like <code>DDRD = DDRD &amp; B10000011;</code> you should have something like <code>DDRD = DDRD0 | DDRD1 | DDRD7</code>. This is now self-documenting code, so the comment "Masking to perserve bits 0,1 and 7" is no longer necessary.</li>
<li><p>Hardware peripheral registers are not to be regarded as normal variables! When accessing hardware registers, avoid accessing them several times needlessly, since that can cause unexpected order of evaluation bugs or extra needless read accesses. Or in worse case, spurious writes that toggle the port very quickly before writing the final value - such code creates EMI and hardware glitches.</p>

<p>The <code>void loop()</code> should be rewritten as:</p>

<pre><code>uint8_t portb = PORTB;
uint8_t portd = PORTD;

/* all if statements and arithmetic uses the above 2 RAM variables */

PORTB = portb; // write to the port one single time, when done
</code></pre></li>
<li><p>There's no award for most operators on a single line, quite the contrary. Expressions like <code>if ( ((~UpdatedPortD &amp; (1 &lt;&lt; 4)) &amp;&amp; (~UpdatedPortD &amp; (1 &lt;&lt; 5))) || (((~UpdatedPortD &amp; (1 &lt;&lt; 2)) &amp;&amp; (~UpdatedPortD &amp; (1 &lt;&lt; 3))) &amp;&amp; (~UpdatedPortD &amp; (1 &lt;&lt; 4) || ~UpdatedPortD &amp; (1 &lt;&lt; 5))))</code> need to be split in several expressions on several lines. It is important to realize that doing so does not lead to slower code. </p>

<p>Also, instead of having your program work on "magic port numbers", you can use meaningful variable names. Just an example with random names, since I don't know what your actual buttons are doing:</p>

<pre><code>bool button_up    = ~UpdatedPortD &amp; (1u&lt;&lt;2);
bool button_down  = ~UpdatedPortD &amp; (1u&lt;&lt;3);
bool button_left  = ~UpdatedPortD &amp; (1u&lt;&lt;4);
bool button_right = ~UpdatedPortD &amp; (1u&lt;&lt;5);

if(button_up &amp;&amp; button_left)
{ 
  /* do stuff */
}
</code></pre></li>
<li><p>Your code has the usual embedded systems problems with <a href="https://stackoverflow.com/questions/46073295/implicit-type-promotion-rules">implicit integer type promotion</a>, which is always a ticking bomb waiting to explode. For example <code>~UpdatedPortD</code> gives you a 16 bit signed <code>int</code> with value <code>0xFF**</code> (negative value), which is not what you want, ever. <code>1 &lt;&lt; 4;</code> perform bit shifts on a 16 bit signed <code>int</code>. And so on. <em>Never</em> use bitwise operations on signed types! </p>

<p>To solve this, always cast back promoted expressions to the intended type and always <code>u</code> suffix integer constants where it matters. <code>1 &lt;&lt; 4</code> should be <code>1u &lt;&lt; 4</code>.</p>

<p>Overall, legacy 8 bit MCUs are very hard to program and implicit promotions is one reason. I strongly recommend beginners to use 32 bit ARMs instead, since they are much more straight-forward.</p></li>
<li>50ms is a very long de-bounce time, to the point where humans might start to notice the lag (we might start to notice latency from somewhere around 100ms and beyond). Most switches don't need nearly that long, 10ms is sufficient for most buttons like tactile switches etc. If in doubt, hook up the button to an oscilloscope, feed it 5V and watch the bounce. </li>
</ul>
    </div>