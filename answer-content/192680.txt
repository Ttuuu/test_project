<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just some details that can make your code shorter:</p>

<p>I'd keep just one of the points and the height in <code>Triangle</code>. And instead of the height, I'd keep its logarithm, which makes operations on triangles much easier. In general, it's better to keep just the data you need in your data types with as little additional constraints as possible.</p>

<pre><code>type Point = (Int, Int)

data Triangle = Triangle
    { upper :: Point
    , heightLog :: Int
    } deriving (Eq, Show)
</code></pre>

<p>For comparing them, you can define an <code>Ord</code> instance to simplify your code. Instead of describing all the possible comparison states explicitly, you can take advantage of the <code>Ord</code> instance for tuples. So if you want to compare first by height, then by the Y axis and then by the X axis, you can write:</p>

<pre><code>instance Ord Triangle where
    compare (Triangle (x1, y1) hl1) (Triangle (x2, y2) hl2) =
        compare (hl1, y1, x1) (hl2, y2, x2)
</code></pre>

<p>If you want to compare by Y in the opposite order, you can write <code>compare (hl1, y2, x1) (hl2, y1, x2)</code>.</p>

<p>Now you don't need <code>makeTriangle</code> at all, and splitting them becomes simpler:</p>

<pre><code>-- | Splits a triangle into its 3 components.
-- Returned triangles are sorted by their position from upper to bottom, 
-- and left to right
split :: Triangle -&gt; [Triangle]
split (Triangle _ 0) = error "Cannot split singleton triangle"
split (Triangle u@(x, y) hl) =
    [ Triangle u hl'
    , Triangle (x - shift, y + shift) hl'
    , Triangle (x + shift, y + shift) hl'
    ]
  where
    hl' = hl - 1
    shift = 2^hl'
</code></pre>

<p>For iteration inside <code>serpinski</code> you can benefit from <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:iterate" rel="nofollow noreferrer"><code>iterate</code></a> and take the <code>n</code>-th element of the output. Note that thanks to laziness, you don't have to care that further elements in the list are not defined.</p>

<pre><code>-- total height -&gt; iteration -&gt; triangles 
sierpinski :: Int -&gt; Int -&gt; [Triangle]
sierpinski h = (iterate (concatMap split) [Triangle (0, 0) h] !!)
</code></pre>

<p>For grouping, sorting etc. according to some property there are two very useful combinators: <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Function.html#v:on" rel="nofollow noreferrer"><code>on</code></a>, which we use here:</p>

<pre><code>groupTriangles :: [Triangle] -&gt; [[Triangle]]
groupTriangles = groupBy (on (==) (snd . upper)) . sort
</code></pre>

<p>and <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Ord.html#v:comparing" rel="nofollow noreferrer"><code>comparing</code></a>.</p>

<p>(Unfortunately I don't have more time to review the rest, maybe later or someone else can continue.)</p>

<hr>

<p>And I recommend reading various ways of <a href="https://en.wikipedia.org/wiki/Sierpinski_triangle#Constructions" rel="nofollow noreferrer">constructing</a> Serpinski triangle, it's quite likely that it's possible to build one straight from the top very easily.</p>
    </div>