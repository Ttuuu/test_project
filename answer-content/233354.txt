<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your raw solution should use BigInteger:</p>

<pre><code>public static int solution(int n) {
    BigInteger elevenUpN = BigInteger.valueOf(11).pow(n);

    String repr = elevenUpN.toString();
    int ones = (int) repr.codePoints().filter(cp -&gt; cp == '1').count();
    System.out.printf("11^%d = %s with %d ones%n", n, repr, ones);
    return ones;
}
</code></pre>

<p>As multiplication by 11 is a shift and addition (*1 + *10), 11<sup>n</sup> can be done
symbolicly by n such steps.</p>

<p>Use an array of n+1 digit values, the least significant at index 0 (hence reversed).</p>
    </div>