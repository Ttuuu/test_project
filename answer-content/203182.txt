<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Edge cases</h3>

<p>This fails to handle several edge-cases:</p>

<ul>
<li>Undoing a remove action multiple times results in that item being added back multiple times.</li>
<li>Undoing an update action after other items have been inserted at a lower index causes the wrong items to be replaced.</li>
<li>Lists can contain duplicate items, but only the last operation for each distinct item is remembered.</li>
<li>Updating an item leaves the add-operation for the original item, but attempting to undo that add-operation fails unless the update action has first been undone.</li>
</ul>

<p>As the last point demonstrates, you can't just undo an action without undoing all actions that followed it first. If you do want to support something like that, you'll have to clearly define the requirements and figure out what the desired behavior is for a variety of edge-cases. You'll also want to make this information available to those that will use this code (documentation, see below).</p>

<h3>Implementation notes</h3>

<ul>
<li>Hiding methods with <code>new</code> is rarely a good idea: <code>(changeList as IList&lt;string&gt;).Add("untracked item");</code> probably does not do what you want it to do. In this case, don't inherit from <code>List&lt;T&gt;</code>: implement the necessary interfaces manually, and use an internal <code>List&lt;T&gt;</code> for the actual storage.</li>
<li><code>List&lt;T&gt;</code> (and <code>IList&lt;T&gt;</code>) provides some other methods (<code>Insert</code>, <code>[int index]</code> and <code>Clear</code>) that are not being 'intercepted', resulting in untracked changes.</li>
<li>Undoing an action is complicated. Why should the caller need to know whether to use <code>NewValue</code> or <code>OriginalValue</code>? That makes it difficult to use correctly. Why does the caller need to pass in any arguments at all? Why use a wrapper class if you can just create a closure with all the necessary state?</li>
<li>Try to use clear, descriptive names. <code>UndoableAction</code> and <code>Undo</code> are much clearer than <code>ActionWrapper</code> and <code>Action</code>, and <code>Replace</code> is a more accurate description of what the <code>Update</code> method does.</li>
<li>Those <code>RevertAdd/Remove/Update</code> methods don't seem to be intended for public use, so don't make them public. They only clutter the interface of your class.</li>
<li>Those <code>ActionWrapper</code> properties should probably not be public either, but if they have to be, then at least make them read-only. You don't want other code to be able to mess with the internals of your change-tracking/undo system. The same goes for that <code>ActionMap</code> property: it should only be exposed as a get-only <code>IReadOnlyDictionary</code>.</li>
<li>Documentation is entirely absent. That makes it even more difficult to tell how this class is meant to be used (or even what its exact purpose is), and various details such as <code>Remove</code> only removing the first matching item are left to the caller to figure out. It also makes it difficult for others to distinguish between intended and incorrect behavior.</li>
</ul>

<h3>Alternative design</h3>

<p>I'd go for a different design, one that doesn't expose internal details, doesn't allow for out-of-order undoing (which means less edge-cases), and that provides a simple interface that's easy to use correctly (note how it's not possible to undo the same action multiple times):</p>

<pre><code>public class ChangeTrackingList&lt;T&gt; // implements IList&lt;T&gt; and/or other interfaces
{
    private List&lt;T&gt; _items = new List&lt;T&gt;();
    private Stack&lt;Action&gt; _undoActions = new Stack&lt;Action&gt;();

    public bool UndoLastAction()
    {
        if (!_undoActions.Any())
            return false;

        var undoLastAction = _undoActions.Pop();
        undoLastAction();
        return true;
    }

    public void Add(T item)
    {
        _items.Add(item);

        // Ensure that this item gets removed, and not an identical earlier occurrence:
        var index = _items.Count - 1;
        _undoActions.Push(() =&gt; _items.RemoveAt(index));
    }

    ...
}
</code></pre>
    </div>