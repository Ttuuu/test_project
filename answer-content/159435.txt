<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay first off, let's make your random character choosing better.</p>

<p>The simplest way to get random symbols is to simply define the alphabet and then index into it. </p>

<p>So here's how you'd typically do it:</p>

<pre><code>static final private String ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
final private Random rng = new SecureRandom();    

char randomChar(){
    return ALPHABET.charAt(rng.nextInt(ALPHABET.length()));
}

String randomUUID(int length, int spacing, char spacerChar){
    StringBuilder sb = new StringBuilder();
    int spacer = 0;
    while(length &gt; 0){
        if(spacer == spacing){
            sb.append(spacerChar);
            spacer = 0;
        }
        length--;
        spacer++;
        sb.append(randomChar());
    }
    return sb.toString();
}
</code></pre>

<p>The likelihood of generating two keys that are duplicates is  <span class="math-container">\$\frac{1}{36^{16}} \approx 8\cdot 10^{-24}\$</span>. So if you generate 10000 (ten thousand) bulk keys, the likelyhood of not having any duplicates is: <span class="math-container">$$(1-\frac{1}{36^{16}})^{10000}=99.99999999999999999987\%$$</span>.</p>

<p>In other words, you are not very likely to get duplicates as long as your random function is good (hence the use of <a href="https://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html" rel="noreferrer"><code>SecureRandom</code></a> instead of <code>Math.random()</code>. To be certain you have to always check against your database anyway as a last step so I would just not bother with duplicate checking on the client side as the likelihood of finding duplicates is so very low.</p>
    </div>