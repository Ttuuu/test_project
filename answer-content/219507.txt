<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Initial impressions</h1>

<p>These are my initial impressions just reading from top to bottom:</p>

<h2>Sequence diagram</h2>

<p>I look at your sequence diagram and I think, "this isn't a sequence diagram!"</p>

<p>You have an actor with no identity, interacting with an unidentified first entity, doing various unrelated things. I assume this means you are merging several sequence diagrams into one.</p>

<p>All of your interactions ignore the <code>HomeUser,</code> so why is it even on there? </p>

<p>All of your interactions (save one) are identical. So what is the point of showing them all? Also, if they are all identical, does that not suggest to you that either your design is wrong, or perhaps there is a greater pattern that you are missing? </p>

<h2>class <code>Appliance</code></h2>

<p>You defined this class. And from what I can see, you never use it. Everything afterwards is just a list of <code>Attribute</code>? So what's the point of the class?</p>

<h2>class <code>Attribute</code></h2>

<p>Every attribute has a name, a weight, consumed, and limit? What do those mean? Especially considering that everything else in the system depends on a list of attributes, could you provide more detail in a class documentation comment or example code?</p>

<p>And is <code>List&lt;Attribute&gt;</code> really the best structure? Is there no minimum requirement for contents, no constructor, no validation for this?</p>

<h2><code>DesignHECA</code></h2>

<p>First, why is there a <code>Controller</code> interface? This seems like the one class which will not have more than a single implementation. So why does it need to conform to any interface?</p>

<p>Next, what is the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility</a> of this class? It looks like you're trying to make this class the user interface of your project. But ... there's no UI. </p>

<h1>Evaluation</h1>

<p>Now let's take a look at the stated objectives:</p>

<blockquote>
  <h2>Problem Statement</h2>
  
  <p>Following are the various scenarios to be considered</p>
  
  <ol>
  <li><p><strong>Track energy</strong> - Track consumption of water, gas and electricity. We should be able extend to capture other type of energies as well
  (e.g., fuel for vehicles). Apart from storing the consumption and time
  interval, also look into possibilities of capturing additional
  attributes for each type and extend it with ease.</p></li>
  <li><p><strong>Sustainability goals</strong> - Build a construct to provide an ability for users to capture sustainability goals, such as use x amount of
  alternate energy (wind or solar), cut down the usage by x, shift usage
  of certain energy to a non-peak time (e.g., running washing machine).</p></li>
  <li><p><strong>Savings</strong> - Based on goals, project savings ahead of time as well compute them for every given timeframe.</p></li>
  <li><p><strong>Suggest goals</strong> - Design a mechanism to suggest goals so that folks can pick from existing goals/template and tweak if needed to
  create their own.</p></li>
  <li><p><strong>Other scenarios to keep in mind</strong></p>
  
  <ol>
  <li>Sustainability score - to build a score for every home</li>
  <li>Badges - Provide badges or incentives for people when they achieve goals</li>
  <li>Incentives - Provide incentives when people achieve certain goals</li>
  </ol></li>
  </ol>
  
  <p><strong>Evaluation Criteria</strong></p>
  
  <p>Pay attention to the following for this exercise for design </p>
  
  <ol>
  <li>Scalable design </li>
  <li>Data extensibility - ability to quickly extend attributes to consider additional scenarios. </li>
  <li>For all devices - build the application to scale into using any devices or integrate with third party systems</li>
  </ol>
</blockquote>

<h2>1. Track Energy</h2>

<p>I don't see any mechanism for this. Your <code>Attribute</code> class provides no clear way to do this, since attribute names are totally arbitrary. If someone creates an attribute "CarOil" and someone else creates an attribute "Motor Oil", are they the same or different? Are "Cooking Oil" and "Canola Oil" and "Vegetable Oil" and "Peanut Oil" the same for tracking purposes? Can user "Mom" track "Gas" while user "Dad" tracks "Gasoline" and "LittleSister" tracks "Exxon"?</p>

<h3>Tracking</h3>

<p>There are two possible mechanisms for this: first, if your application is sitting on an extensible database, you might use the database key from the <code>resources</code> table to classify usage. Otherwise, with no database or a mapping layer above the database, you might have an <code>enum</code> identifying your resources. 
You don't do either one of these, so that's a fail from me.</p>

<h3>Extending</h3>

<p>Can you "extend to capture other type of energies as well"? No, since you can't track anything consistently. </p>

<p>Can you explore "capturing additional attributes for each type and extend it with ease"? No. You have no explicit identification of energy or resource types, and no relation between activities and resources. So there's no way you can do this.</p>

<h3>Alternate solutions</h3>

<p>Create a "table" for your resource types. Look into cost models of all the resources in your area (where you live). How are they billed? In my area, electricity and natural gas are billed in two bands: the initial  quantity units used costs differently than additional units over the  amount. (There might also be a  amount, Y&gt;X, that bills more, but I don't use that much.) There is <em>also</em> a time component: peak hours versus off-peak hours. Using electricity during peak hours costs more. (Gas is the same cost always.)</p>

<p>So how can you model just those details? You'll need to know the time-of-day for any activity. You'll need to know the "monthly usage" prior to an activity, or you'll want to only present cost data in monthly aggregate form. (That's two possibilities- you'll have to decide what makes more sense for your application.)</p>

<p>What about water? What about firewood or charcoal? Consider the possibility that some energy sources might get cheaper in volume: if one is buying small LP gas tanks to power a stove, and switches to larger tanks, the cost might go down! How can you store that data? (Hint: I don't think a single class can support all these options. It might be time for an interface...or two.)</p>

<h2>2. Sustainability Goals</h2>

<h3>Different sources</h3>

<p>How can you identify these things? For example, how can I tell if I'm using "wind power" versus "solar" versus "nuclear?" My household doesn't have different outlets for different kinds of electricity!</p>

<p>Again, there are a couple of options: some places support energy markets, so you can buy your electricity from a "solar" provider. The electricity comes from the grid, but you're paying someone to put solar-generated electricity into the grid and pretending that you take out what they put in.</p>

<p>Or maybe you have a solar panel array on your house, producing power during certain hours of the day. There are systems that just feed household demand, and systems that "sell back" power into the grid. For a local-only system, use only counts as solar if it happens when the sun is shining. </p>

<h3>Reducing usage</h3>

<p>This one you almost have a handle on, running an "actual" vs "target" model. But I don't see any indication of month-on-month or year-on-year tracking. Comparing my heating bill in April with my heating bill in March is going to show <strong>dramatic improvements!</strong> But it would be better to compare my heating bill in April 2019 with my heating bill from April 2018, since heating is a seasonal thing. </p>

<p>Other things may be seasonal, or not. Laundry is probably not seasonal for some people, and seasonal for others (the kids! the sports! the laundry!). </p>

<h3>Time-shifting</h3>

<p>Every usage needs to have a timestamp associated, or needs to be an "ongoing" expense. For example, my gas range connects to the gas line, but there's also an electric plug to power the display (and the lights). The display shows the current time, except when I'm programming the oven. So the electric expense is pretty much constant, while the gas usage only happens when I'm using the stovetop or oven.</p>

<p>Tracking that seems to mean there's at least two kinds of usage: on-demand or continuing. Another field.</p>

<h3>Alternate solutions</h3>

<p>Appliances can consume more than one kind of resource. A washing machine will consume water and electricity. And possibly hot water, which means it might trigger costs from a water heater. A range can consume electricity and natural gas or LP gas. A home heating system can consume electricity and hot water.</p>

<p>Consumption can be fixed: some power is required to run the little green light on the front of every electric device. But consumption can also be on-demand. Some costs might be best modeled as constant even if they are not: a refrigerator usually turns itself on and off as needed, making it a "demand" type appliance, but you don't have any control over when the demand happens (except not opening the door!) so you should model it as a fixed cost.</p>

<p>This says to me that an appliance object would not contain cost data. It's too complicated. Instead, there should be a separate costing mechanism that appliances refer to.</p>

<p>Appliances can vary in "intensity" by use. I can wash dark colors which uses cold water, or I can wash white cotton using hot water. I can wash a small or large load of clothes. I can cook pizza at high heat, or I can re-heat leftovers at low heat. So the activity needs to account for this, and the costing function needs to allow for some variable in its operation.</p>

<p>So you have <code>appliances</code> that use <code>resources</code> in continuing or on-demand costs. You don't specify how you are gathering information. If the information is entered by hand, I'd suggest you provide some kind of <code>activity</code> template for the user: "Took a hot shower. Duration X minutes." This is probably easer than trying to enter "Hot water heater: 2.2 gpm @ X minutes" and "Cold water: 0.4 gpm @ X minutes". </p>

<p>On the other hand, if you are gather data via sensors, there won't necessarily be any association between the activities and the expenses. (The water heater ran for 18 minutes this morning.) That will make it harder to suggest improvement goals.</p>

<h2>3. Savings</h2>

<p>This is relatively straightforward, if you have concrete, numerical goals and categories. There's no real evidence of this in your design. You have a <code>budget - actual</code> computation, but nothing more. </p>

<p>You would need to have strong support for resource types first, in order to have a resource budget, then resource savings. If I want to reduce my water consumption, I need to be tracking water use. If I just want to reduce my monthly monetary outlay, your mechanism probably works. I give this a 'C'.</p>

<h2>4. Suggest Goals</h2>

<p>This is interesting, because it's not the goals that are important, but the suggesting. How do you know what goals to suggest?</p>

<p>The spec suggests that a "template" mechanism might exist, with some kind of user editing facility.</p>

<p>I don't see any of that in your design. This is a fail.</p>

<p>How could you implement this?</p>

<p>Create some templates and meta-templates. For example, if a resource has a time-cost element, then time-shifting resource use is a viable goal. If a resource has a cost breakpoint, then reducing or increasing resource usage towards that breakpoint can make sense if the overall costs balance out.</p>

<p>Consider:</p>

<ul>
<li><p>If electricity has peak/off-peak costing, then it makes sense to suggest time-shifting the use of appliances like the washing machine or electric range. </p></li>
<li><p>If sustainability is a goal, it makes sense to suggest favoring charcoal or wood over gas or electric.</p></li>
<li><p>If carbon footprint is a goal, it makes sense to suggest gas over electric over charcoal, wood, and peat.</p></li>
<li><p>If gas has a low initial consumption charge with a higher charge after some threshold, then it makes sense to suggest lowering gas consumption if the household is close to (but over) that threshold. It makes no sense to suggest lowering consumption if the threshold is 150 but the household is using 2000. But if the household uses 2100 and the threshold is 2000, they might see good savings by reducing that 100 units to get out of the high-cost range.</p></li>
</ul>

<p>So you should classify possible goals according to things like "cost-saving", "sustainability", "carbon footprint". Then allow these categories to be prioritized or disabled. Finally, each goal should be evaluated with regard to applicability (do not suggest reducing gas consumption in an all-electric household), reachability, and value. If a goal does not apply, or cannot be reached, or will not provide useful value, don't suggest it. </p>

<p>Otherwise, rank the goals in some order, and suggest them. You might want to include a seasonal component: if you suggest using more charcoal during the summer, I'll grab a beer and some bratwursts and head outside. If you suggest using more charcoal when there's 8 inches of snow on the ground, I'll make fun of you on social media and uninstall the app.</p>

<h2>5. Other scenarios</h2>

<p>I'm going to skip these.</p>

<h2>Evaluation criteria</h2>

<p>You haven't picked an application model, as far as I can tell. Is your application intended to run on an embedded device, as an Android app, on a desktop, or on the web?</p>

<p>That choice is going to affect pretty much all the options listed in the spec. Does it make sense to store data in a database versus in-memory? Should you use flat files? Can you add a jar file with some extra classes later, or download an update from the app store? </p>

<h3>Alternate solutions</h3>

<p>If you have a database, then a lot of items can be referenced using <code>id</code> fields. Maybe those are strings, maybe they are integers. But if they are unique ids, it doesn't matter. </p>

<p>If you don't have a database, should you use <code>enum</code> types? Doing so reduces your ability to extend, since you'd have to rebuild if you add to the enum. That's possible for web and android apps, since the cost of deployment is low.</p>

<p>If you are integrating with 3rd-party systems, what kind? It might be trivial to add support for cost data from the local utility, or incredibly difficult to get usage data from a smart switch.</p>

<p>Also, what kind of integrations will you support. If you have sensors detecting the flow of resources, that's somewhat useful. But "gas is being used" or "electric usage went up" isn't as granular as "I turned on the stove burner high for 20 minutes". You'll want to be careful about what kind of data you collect, and how you use it. I'd suggest listing example integrations you think would obviously work, and leave it at that.</p>

<p>For "complicated" mechanisms, an interface is the go-to solution in Java. It's up to you to define where. Computation of costs seems obvious, but there might be others. You should specify a mechanism for things like plug-ins that can be used to add additional support for these interfaces. Can you add a new electricity-costing plugin for a new provider? </p>
    </div>