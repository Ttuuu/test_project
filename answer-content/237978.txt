<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When working with matrices in R, you can often do an operation with a single command if you are clever about how that is structured. Take padding a matrix with <code>npad</code> missing values as an example. Your current code does this by first padding the columns and then padding the rows. However, you could define a correct-sized matrix with all missing values to start, and then store the original matrix at the correct location within the new matrix:</p>

<pre><code>pad_matrix2 &lt;- function(M, npad) {
  padded &lt;- matrix(NA, nrow(M)+2*npad, ncol(M)+2*npad)
  padded[seq(npad+1, nrow(M)+npad),seq(npad+1, ncol(M)+npad)] &lt;- M
  padded
}
</code></pre>

<p>This is much more compact code and will also be more efficient.</p>

<p>In terms of the <code>search_product</code> function, you have a lot of repeated code that does the same thing for a particular direction. You could avoid that by looping through a set of directions that you want to search:</p>

<pre><code>search_product2 &lt;- function(M, n=4) {
  npad &lt;- n-1
  M_pad &lt;- pad_matrix2(M, npad)
  directions &lt;- rbind(c(1, 0), c(0, 1), c(1, 1), c(1, -1))
  all.pos &lt;- expand.grid(r=seq(npad+1, nrow(M)+npad),
                         c=seq(npad+1, ncol(M)+npad))
  max(apply(directions, 1, function(direction) {
    max(Reduce("*", lapply(seq(0, n-1), function(dist) {
      M_pad[cbind(all.pos$r+dist*direction[1],
                  all.pos$c+dist*direction[2])]
    })), na.rm=TRUE)
  }))
}
search_product2(M, 4) == search_product(M, 4)
# [1] TRUE
</code></pre>
    </div>