<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't use wildcard imports</h2>

<p>Instead of <code>from tkinter import *</code>, use <code>import tkinter as tk</code>. Then, wherever you reference a tkinter class or value, prefix it with <code>tk.</code> (eg: <code>tk.Label</code>, tk.Button`, etc).</p>

<p>This makes your code easier to understand, and helps keep the number of objects in the global namespace low. Plus, it keeps it consistent with <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> guidelines. </p>

<h2>Move the GUI code to a class</h2>

<p>Moving the GUI code to a class helps organize your code. It makes it clear which parts of your code are related to the GUI and which aren't. An example of how to do this can be found on stackoverflow at this question: <a href="https://stackoverflow.com/questions/17466561/best-way-to-structure-a-tkinter-application">Best way to structure a tkinter application?</a></p>

<h2>Separate widget creation from widget layout</h2>

<p>I consider the pattern where you create a widget, call grid, create a widget, call grid, ... to be an antipattern. It makes it difficult to visualize the layout and makes it more difficult to change the layout. I find that the layout code can change frequently during development as you add new widgets or improve the layout.</p>

<p>For example, instead of this:</p>

<pre><code>lbl_isbn_lone = Label(lone, text="ISBN:")
lbl_isbn_lone.grid(column=0, row=0, ipadx=5, pady=5)
txt_isbn_lone = Entry(lone, width=30)
txt_isbn_lone.grid(column=1, row=0, ipadx=5, pady=5)
lbl_title_lone = Label(lone, text="Title:")
lbl_title_lone.grid(column=0, row=1, ipadx=5, pady=5)
txt_title_lone = Entry(lone, width=30)
txt_title_lone.grid(column=1, row=1, ipadx=5, pady=5)
...
</code></pre>

<p>... do it like this:</p>

<pre><code>lbl_isbn_lone = Label(lone, text="ISBN:")
txt_isbn_lone = Entry(lone, width=30)
lbl_title_lone = Label(lone, text="Title:")
txt_title_lone = Entry(lone, width=30)
...
lbl_isbn_lone.grid(column=0, row=0, ipadx=5, pady=5)
txt_isbn_lone.grid(column=1, row=0, ipadx=5, pady=5)
lbl_title_lone.grid(column=0, row=1, ipadx=5, pady=5)
txt_title_lone.grid(column=1, row=1, ipadx=5, pady=5)
</code></pre>

<h2>Use more whitespace</h2>

<p>Right now you have a giant wall of code for creating widgets and laying them out. There's no way to tell if there's any sort of organization to your code, it's all just one giant block of code. You have some comments, but comments alone don't do a good job of helping our eye organize what we see.</p>

<p>Specifically, add a blank line before <code>#   Tab 1: Lone Code</code> and before <code>#   Tab 2: Codes from CSV</code></p>

<h2>Don't make complex function calls.</h2>

<p>Instead of this:</p>

<pre><code>save_code_png(txt_isbn_lone.get(), txt_title_lone.get(),
              Path(txt_save_path_lone.get()))
</code></pre>

<p>Do this:</p>

<pre><code>isbn = txt_isbn_lone.get()
title = txt_title_lone.get()
path = Path(txt_save_path_lone.get())

save_code_png(isbn, title, path)
</code></pre>

<p>I think it makes the code easier to read, and it makes the code easier to debug since it's easier to examine the values before passing them to the function. </p>
    </div>