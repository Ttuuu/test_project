<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Don't use a class, there's no need.</li>
<li><p>You can remove the <code>tmplst.append</code> if you move the comprehensions into the <code>th.append</code>.</p>

<p>To do this you can use <code>(i + idx) % 2 == 1</code> as the check. And <code>tmplst = [xrange(1,row + 1), xrange(m, m-row, -1)]</code>.</p></li>
<li><p>It doesn't make sense to build a <code>set</code>, to then convert it to a list. Sets have \$O(1)\$ lookup where lists have \$O(n)\$.</p></li>
<li>You don't need <code>get_list</code>, just use a comprehension.</li>
</ul>

<p>This can get something like:</p>

<pre><code>def bow_tie(self, size=5, fill_value='*', empty_value=' '):
    star = fill_value
    dot = empty_value
    center_row = size * 2 - 1
    th = [
        {
            j
            for nums in (
                xrange(1, i + 2),
                xrange(center_row, center_row - i - 1, -1)
            )
            for j in nums
            if (j + i) % 2 == 1
        }
        for i in range(size)
    ]
    th += th[len(th) -2::-1]

    return [
        ' '.join([
            star if i in indexes else dot
            for i in range(1, size * 2)
        ])
        for indexes in th
    ]
</code></pre>

<hr>

<p>However, this isn't that good an approach. Instead you can make a list containing the pattern. And show a 'view'. The view that you want could be:</p>

<pre class="lang-none prettyprint-override"><code>     *
    **
   ***
  ****
 *****
******
</code></pre>

<p>To achieve this, you can make the following list:</p>

<pre class="lang-none prettyprint-override"><code>'     ******'
</code></pre>

<p>With the following moving view:</p>

<pre class="lang-none prettyprint-override"><code>#     *######
##    **#####
###   ***####
####  ****###
##### *****##
######******#
</code></pre>

<p>You can also invert the view to get the other side of the bow tie. And so using the above, we just need to think of what the pattern of the list needs to be for your bowtie.</p>

<p>Since it's pretty much the same as the above, but with a space in-between the dots you could use something like:</p>

<pre><code>'     * * * '
</code></pre>

<p>And to create that, just make the first n chars space, with the following n chars flip between space and star:</p>

<pre><code>face = [empty_value] * (size - 1) + [fill_value, empty_value] * (size // 2 + 1)
</code></pre>

<p>After this combine the above slider, and chain the top and bottom starts, and you should get:</p>

<pre><code>from itertools import chain

def bow_tie(size=5, fill_value='*', empty_value=' '):
    face = [empty_value] * (size - 1) + [fill_value, empty_value] * (size // 2 + 1)
    starts = chain(range(size), reversed(range(size-1)))
    for i in starts:
        yield ' '.join(face[i:i+size][::-1][:-1] + face[i:i+size])
</code></pre>
    </div>