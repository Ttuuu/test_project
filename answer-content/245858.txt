<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, if you just want to get the sum, you can simply do this:</p>
<pre><code>const sumAll = (lowEnd, highEnd) =&gt;
  (lowEnd + highEnd) * ((Math.abs(highEnd - lowEnd)) + 1) / 2;
</code></pre>
<p>However, if you still want to sum them one by one, I prefer to create a function called <code>range</code> first
.</p>
<pre><code>function range (start, end) {
  return Array.from({ length: end - start + 1 }, () =&gt; start).map((v, i) =&gt; v + i);
}
</code></pre>
<p>Then create a function to sum the range:</p>
<pre><code>function sumRange (start, end) {
  return range(start, end).reduce((a, b) =&gt; a + b);
}
</code></pre>
<p>But what if end is smaller than start? Let's fix it:</p>
<pre><code>function sumRange (start, end) {
  if (end &lt; start) return sumRange(end, start);
  return range(start, end).reduce((a, b) =&gt; a + b);
}
</code></pre>
<p>But what if params are not valid number? Let's create a function to do this:</p>
<pre><code>function isValidNumber (num) {
  return typeof num === 'number' &amp;&amp; num &gt;= 0;
}
</code></pre>
<p>I don't want to hardcode it into <code>sumRange</code>, so I create a high order function:</p>
<pre><code>function checkParams (validFn) {
  return fn =&gt; {
    return (...args) =&gt; {
      if (args.some(v =&gt; !validFn(v))) throw new Error('error');
      return fn.apply(null, args);
    } 
  }
}
</code></pre>
<p>Finally we can get <code>sumAll</code>:</p>
<pre><code>const sumAll = checkParams(isValidNumber)(sumRange);
</code></pre>
<p>Put them together:</p>
<pre><code>function checkParams (validFn) {
  return fn =&gt; (...args) =&gt; {
    if (args.some(v =&gt; !validFn(v))) throw new Error('error');
    return fn.apply(null, args);
  }
}

function isValidNumber (num) {
  return typeof num === 'number' &amp;&amp; num &gt;= 0;
}

// you can simply replace `range` and `sumRange` with 
// const sumRange = (lowEnd, highEnd) =&gt;
//   (lowEnd + highEnd) * ((Math.abs(highEnd - lowEnd)) + 1) / 2;

function range (start, end) {
  return Array.from({ length: end - start + 1 }, () =&gt; start).map((v, i) =&gt; v + i);
}

function sumRange (start, end) {
  if (end &lt; start) return sumRange(end, start);
  return range(start, end).reduce((a, b) =&gt; a + b);
}

const sumAll = checkParams(isValidNumber)(sumRange);

sumAll(1, 4); // 10
sumAll(1, 4000); // 8002000
sumAll(123, 1); // 7626
sumAll(-10, 4); // Error
sumAll(10, '90'); // Error
sumAll(10, [90, 1]); // Error
</code></pre>
    </div>