<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In coding assignments, it's not always about if you can devise and implement an algorithm, but also about if you know how to avoid inventing a wheel. Leveraging the standard API as much as you can will show you know your language.</p>

<p>How about something like</p>

<pre><code>foreach (char c in str) {
  if ( str.IndexOf(c) == str.LastIndexOf(c) ) {
    return c;
  }
}
</code></pre>

<p>To show extensive understanding, you'd say/document that this solution has complexity of <code>O(n²)</code> and may have to be revisited if/when performance requirements are added.</p>

<p>They provided no constraints in the task as to performance or resource usage, and none about the input to be processed.</p>

<p>That's not saying that "performance" is not an indicator at all. But it has to be judged reasonably. If an algorithm exists with <code>O(n*log(n))</code> no one will blame you for your implementation with <code>O(n²)</code>. <code>O(n³)</code> might even be accepted, <code>O(n^4)</code> probably not.</p>

<p>An important skill in software development is to be able to find the right compromise between different aspects. Much of this comes only through experience. In your example, it's simply not required to produce an optimum performance solution. In a case like that, you go for the one with acceptable performance and best clarity, maintainability &amp;c.</p>
    </div>