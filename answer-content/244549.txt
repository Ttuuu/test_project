<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>... looking for help speeding up some code</p>
</blockquote>
<p><strong>Functional concern</strong></p>
<p>I see no provisional to insure the allocation meets universal alignment as <code>malloc()</code> does.  This is a potential fatal error.  Also research <code>max_align_t</code>.</p>
<blockquote>
<p><code>7.22.3 Memory management functions</code>  The pointer returned if the allocation succeeds is
suitably aligned so that it may be assigned to a pointer to any type of object with a fundamental alignment requirement ...</p>
</blockquote>
<p>Even super aligning the <code>size</code> a bit more, like to a multiple of 16 or 32 can result in less fragmentation, effecting faster matches after <code>lfree()</code> for later allocations.</p>
<hr>
<p>Rest is minor stuff.</p>
<hr>
<p><strong>Avoid mis-alignment</strong></p>
<p>Certainly a pointer and <code>size_t</code> may have the same size and alignment needs, but what if they do not?</p>
<p>Although a <code>struct *</code> could be narrower on some unicorn platform, the reverse is more likely: the pointer wider and performs better aligned well.</p>
<pre><code>typedef bblock* bb;
struct bblk {
    size_t ind;
    bb next;
    size_t occ;
    char mem[PAGESIZE - (sizeof(size_t) + sizeof(bb) + sizeof(size_t))];
} __attribute__((packed));
</code></pre>
<p>In general, put the widest members first and like with like.</p>
<pre><code>typedef bblock* bb;
struct bblk {
    bb next; // First
    size_t ind;
    size_t occ;
    char mem[PAGESIZE - (sizeof(bb) + sizeof(size_t) + sizeof(size_t))];
} __attribute__((packed));
</code></pre>
<p>In general this applies to <code>struct smmblk</code> too, but only benefits in rare implementations where <code>struct *</code> narrower than <code>void *</code>.</p>
<pre><code>struct smmblk {
    void* end; // void * certainly widest object point when objects pointer sizes differ.
    mb prev;
    mb next;
    bb bblk;
    bool free;
} __attribute__((packed));
</code></pre>
<p><strong>Set aside <code>packed</code></strong></p>
<p>It is not portable and tends to make data that is memory space efficient at the cost of speed.</p>
<p><strong><code>free(NULL)</code> is OK yet not <code>lfree(NULL)</code></strong></p>
<p>Consider adding an internal <code>NULL</code> test to allow users that same latitude as <code>free()</code>.</p>
<hr>
<p><strong>Hiding pointer types</strong></p>
<p><code>typedef bblock* bb;</code> and later use of <code>bb</code> hides that fact <code>bb</code> is a pointer and makes deciphering the code and ideas for improvements more challenging.</p>
<p><strong>Avoid UB</strong></p>
<p><code>void *</code> addition is UB (or IDB) and distracts from performance analysis.  Consider <code>unsigned char *</code> or <code>char *</code>.</p>
<pre><code>// ((void*)sb) + sizeof(memblock)
((unsigned char*) sb) + sizeof memblock

void* a
// mb sb = a - sizeof(memblock);
// mb sb = (mb) ((unsigned char *)a - sizeof(memblock));
</code></pre>
    </div>