<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As other answers have already said, the trick you're looking for is called <a href="https://en.cppreference.com/w/cpp/utility/functional/function" rel="nofollow noreferrer"><code>std::function</code></a>, and it's defined in the standard <code>&lt;functional&gt;</code> header.</p>

<p>You include <code>&lt;string&gt;</code> but never use it. You define <code>myMapType</code> but never use it.</p>

<p>Unless you need portability back to C++03, you should use <code>using X = Y;</code> in place of <code>typedef Y X;</code>.</p>

<p>A common name for "scratch" iterator variables is <code>it</code> (not to be confused with <code>i</code> for integer indices). Your <code>itr</code> is reasonably clear, but not idiomatic.</p>

<hr>

<p>Following the dictum that "good C++ code should look like Python," I'd write your program like this:</p>

<pre><code>#include &lt;cstdio&gt;
#include &lt;functional&gt;
#include &lt;map&gt;

void testFunc1() {
    puts("func1");
}    
void testFunc2() {
    puts("func2");
}

using MapType = std::map&lt;int, std::function&lt;void()&gt;&gt;;

int main() {
    MapType myMap = {
        { 1, testFunc1 },
        { 2, testFunc2 },
    };

    auto it = myMap.find(2);
    if (it != myMap.end()) {
        it-&gt;second();
    }
}
</code></pre>

<hr>

<p>Instead of the map initializer I wrote, you could write</p>

<pre><code>MapType myMap;
myMap[1] = testFunc1;
myMap[2] = testFunc2;
</code></pre>

<p>but I strongly recommend "declarative" over "imperative." "Declarative" style means to define the whole map at once, as a data object, in the state you want it; "imperative" style means to define an empty map and then repeatedly mutate it so as to <em>eventually arrive at</em> the state you want. "Declarative" tends to be easier to reason about.</p>
    </div>