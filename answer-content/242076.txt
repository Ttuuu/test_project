<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all the solution you have given is complexity <code>O(n)</code>, not <code>O(log(n))</code>. It is possible to do it in <code>O(log(n))</code> by calculating the result bit by bit. For example, suppose I have a range of four consecutive integers. Then I know that two of those numbers are odd and two of those numbers are even. Since only odd numbers have the first bit set I already know that XOR-ing the four numbers will leave the first bit at <code>0</code>. For the second bit, I notice that for each set of four consecutive numbers there is always one number <code>2 mod 4</code> and one number <code>3 mod 4</code>. Since all integers which have the second bit set ar either <code>2</code> or <code>3</code> <code>mod 4</code>, I know that XOR-ing the set of four integers will leave the second bit at <code>0</code>. In this way I can determine for each bit if it should be set or not by looking at the properties of the numbers in the range. Usually this can be done in <code>O(1)</code> by only using the boundries of the range. Since there are log<sub>2</sub>(n) rounded up bits in n, this solution will have complexity <code>O(log(n))</code>.</p>

<p>On to the code.</p>

<pre class="lang-java prettyprint-override"><code>static List&lt;Integer&gt; list;
</code></pre>

<p>This list is not needed, it can be removed.</p>

<pre class="lang-java prettyprint-override"><code>public static int solution(int M, int N)
</code></pre>

<p>The name of the method is <code>solution</code> but it doesn't describe what it is doing. Try to give it a name in accordance with it's function, something like <code>computeXorForRange</code> perhaps. Also, all other variables and methods in your code are camelCase so for consistency you should make <code>M</code> and <code>N</code> lower case. Or you can rename them to <code>lowerBound</code> and <code>upperBoundInclusive</code> if you like to tell the reader what they represent.</p>

<pre class="lang-java prettyprint-override"><code>int lastXOR = M;
currentXOR = 0;
try {
  for (int i = M; i &lt; N; i++) {
    currentXOR = computeXOR(lastXOR, i + 1);
    lastXOR = currentXOR;
  }
} catch (Exception e) {
  System.out.println("Error Found : -" + e);
}
</code></pre>

<p>In this part it is not needed to have to different variables, <code>currentXOR</code> and <code>lastXOR</code>. One should be enough. Having the two variables here makes it more complex than it should be. Also, why are you catching exceptions here? What exceptions do you expect to happen? Since the code used in the try does not throw any exception except for the possible standard java runtime exceptions like for example <code>OutOfMemoryException</code>, it is not needed to have a try catch.</p>

<pre class="lang-java prettyprint-override"><code>System.out.println("Input is not in the range or valid");
return -1;
</code></pre>

<p>This part is at the end of the method. Instead you can negate the if statement at the beginning of the method and put this piece in the if. Then it becomes more clear what happens if the conditions are not met. There is also a <code>return -1</code> which is more of a C style thing. In this case it is perfectly fine to use an Exception, the <code>IllegalArgumentException</code> will fit since the arguments passed are not valid (they are too small or too large).</p>

<pre class="lang-java prettyprint-override"><code>private static boolean isValidatedInput(int M, int N) {
  if (0 &lt;= M &amp;&amp; 0 &lt;= N &amp;&amp; M &lt;= Math.pow(10, 9) &amp;&amp; N &lt;= Math.pow(10, 9) &amp;&amp; M &lt;= N) {
    return true;
  } else
    return false;
}
</code></pre>

<p>The name of the method can be changed to <code>isValidInput</code>. The name <code>isValidatedInput</code> suggests that there will be a check if the input is already validated while it seems you are validating the input. There us also no reason to have the <code>return true</code> and <code>return false</code>, you can immediatly return the condition used in the if. Because if that condition is true the method will then return true and if the condition is false the method will then return false. Lastly, the upper bound of 10^9 seems arbitrary. If you want to prevent overflows and underflows you can use <code>Integer.MAX_VALUE</code> as upper bound.</p>

<pre class="lang-java prettyprint-override"><code>private static Integer computeXOR(Integer m, Integer n) {
  return m ^ n;
}
</code></pre>

<p>In the rest of the code you use <code>int</code> yet here you use <code>Integers</code>. Using <code>Integer</code> is not necessary in this case since you don't have to deal with null values so using <code>int</code> would be consistent with the rest of the code. You can also ask if this method is really needed. IMO something like <code>x ^ y</code> is perfectly fine and clear and you don't need a separate method for that, but if it helps you, you can leave it in.</p>

<p>All in all with the above suggestions the code will become</p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
  int bitXORProduct = solution(5,8);
  System.out.println(bitXORProduct);
}

public static int solution(int lowerBound, int upperBoundInclusive) {
  if (!isValidInput(lowerBound, upperBoundInclusive)) {
    throw new IllegalArgumentException("Input is not in the range or valid");
  }

  int currentXOR = lowerBound;
  for (int i = lowerBound; i &lt; upperBoundInclusive; i++) {
    currentXOR = currentXOR ^ (i + 1); // this can also be written as currentXOR ^= i + 1;
  }

  return currentXOR;
}

private static boolean isValidInput(int M, int N) {
  return 0 &lt;= M
      &amp;&amp; 0 &lt;= N
      &amp;&amp; M &lt;= Math.pow(10, 9)
      &amp;&amp; N &lt;= Math.pow(10, 9)
      &amp;&amp; M &lt;= N;
}
<span class="math-container">```</span>
</code></pre>
    </div>