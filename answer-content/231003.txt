<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My problem with this iterator is that it is very expensive to copy; as you have to copy a stack when you copy the iterator.</p>

<p>The main point of iterator is that it should be <strong>"cheap"</strong> to make copies. All algorithms that use iterators pass them by value (and all the advice you see on these pages that we give is to pass iterators by value) as a result iterators are copied a lot and as a result need to be "cheap" to copy.</p>

<p>The reason you need the stack is that your tree has no internal structure (yes it's a tree, but there is no relationship between parents parent and child), because there is no internal structure you need to maintain extra state to keep your position.</p>

<p>If we look at trees that exist in the standard library (std::set). This is an ordered binary tree (probably (the standard does not exactly specify but let's assume it is for the sake of argument. It is also probably balanced but let's not over complicate things for this analysis)).</p>

<p>Lets: Look at a set with the values:  12, 25, 37, 50, 75, 62, 85</p>

<p>Sorry for the bad drawing of a tree. Hope it is understandable:</p>

<pre><code>                          50
                         /  \
                        /    \
                       /      \
                     25        75
                    /  \      /  \
                  12    37  62    85
</code></pre>

<p>Each Node needs three pointers. Left/Right/Parent (the parent is only required to help iterators). The rules for creating an iterator are then trivial.</p>

<pre><code> 1. begin()    =&gt; Always return the left most node.   Iterator(12)
 2. ++
        1. If you have right pointer go down right then find the left most child.
        2. If you have no children. Go Up.
             a: If you just came from the left child stop.
             b: otherwise recursively up until you were a left child.
             c: When you are null you are out.
</code></pre>

<p>The rules are simple enough that you don't need to keep extra state in the iterator.</p>

<p>So from <code>Iterator(12)</code> no children so go up and get <code>Iterator(25)</code> next it has a right child <code>Iterator(37)</code> next it has no children go up (but I was the child so go up again now we are <code>Iterator(50)</code> etc.</p>
    </div>