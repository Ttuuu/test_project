<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Even if you have a 32-bits operating system, your virtual address space (VAS) is 4GB. Here is a Microsoft Windows <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366912(v=vs.85).aspx" rel="nofollow noreferrer">reference</a> for what I am saying. And you can confirm that, if you are using Ubuntu, by running: <code>cat /proc/meminfo | grep 'VmallocTotal'</code>. If you have a 64-bits OS, your VAS is even larger. </p>

<p>This means your processor is not impressed by the size of the file you are dealing with in your question. And since speed is your concern, I suggest you to map the whole file  into the VAS by using the <a href="https://docs.python.org/2/library/mmap.html" rel="nofollow noreferrer"><code>mmap</code></a> module (which stands for <em>memory mapping</em>). </p>

<p>The example provided in the documentation I linked to, show how to map the whole file into the virtual memory by setting the size to 0. So you can improve your work by relying on that trick:</p>

<pre><code>import mmap


with open('text_file.txt', 'rb') as text_file:
  # Map the file into the virtual memory
  mapped_file = mmap.mmap(text_file.fileno(), 0, prot=mmap.PROT_READ)
  # Any line you red, from now on, will be too fast:
  line = mapped_file.readline()
</code></pre>
    </div>