<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem" rel="nofollow noreferrer">Lagrange's_four-square_theorem</a> says:</p>

<blockquote>
  <p>every natural number can be represented as the sum of four integer squares.</p>
</blockquote>

<p>The theorem allows the squares to be zero, so in context of our problem we will say that every natural number can be represented as the sum of four or less integer squares. It means that when we want to determine which square is the largest in the "shortest" sum, it must be greater than n // 4. It is the most significant optimization of the code below, it is implemented in the line <code>elif square &gt; n_4:</code>. The code runs in 1136 ms and 30.7 MB on leetcode. I believe it can be better improved and explained but the theorem is the main idea.</p>

<pre><code>import collections


Parameters = collections.namedtuple('Parameters', ['n', 'last_index', 'num_squares'])


class Solution:
    def numSquares(self, n):
        squares = [i ** 2 for i in range(1, int(n ** 0.5) + 1)]
        min_num = n
        lst = [Parameters(n, len(squares) - 1, 0)]
        while lst:
            new_lst = []
            for parameters in lst:
                if parameters.num_squares &lt; min_num:
                    n_4 = parameters.n // 4
                    for index in range(parameters.last_index + 1):
                        square = squares[index]
                        if square == parameters.n:
                            min_num = min(min_num, parameters.num_squares + 1)
                        elif square &gt; parameters.n:
                            break
                        elif square &gt; n_4:
                            new_lst.append(
                                Parameters(
                                    parameters.n - square,
                                    index,
                                    parameters.num_squares + 1
                                )
                            )
            lst = new_lst
        return min_num
</code></pre>
    </div>