<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I had an idea to just try to make the word by removing all the needed characters from the rack/haystack and see if it works. The idea also follows the "Easier to ask for forgiveness than permission" approach.</p>

<pre><code>def set_includes(haystack, needle):
    haystack = list(haystack)
    try:
        for char in needle:
            haystack.remove(char)
        return True
    except ValueError:
        return False
</code></pre>

<p>Obviously, this will scale badly for cases where <code>haystack == needle</code> for larger string lengths (noticeable starting at about n &gt;= 500), but it does not need sorting. So you will have to check whether or not this is more efficient for your use case.</p>

<p>Depending on how often the check would return false because <code>needle</code> does contain one or more letters that are not on the rack, <a href="https://docs.python.org/2/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code></a>s can maybe help you to take a shortcut:</p>

<pre><code>if set(haystack).issuperset(needle):
    # check if there are enough letters to build needle from haystack
    ...
else:
    # haystack does not contain all the letters needed to build needle
    return False
</code></pre>

<hr>

<p>Just for fun: We here in Python have iterators, too :-D</p>

<pre><code>def set_includes(haystack, needle):
    it1 = iter(haystack)
    it2 = iter(needle)
    char2 = next(it2)
    while True:
        try:
            char1 = next(it1)
        except StopIteration:
            return False
        if char2 &lt; char1:
            return False

        if not char1 &lt; char2:
            try:
                char2 = next(it2)
            except StopIteration:
                return True
</code></pre>

<p>If you move the last <code>try: ... catch ...:</code> a few levels outwards, you can get quite close to the structure of the possible implementation given on cppreference. Don't take this to serious though. </p>

<p>We can do a little bit better:</p>

<pre><code>def set_includes(haystack, needle):
    it2 = iter(needle)
    char2 = next(it2)
    for char1 in haystack:
        if char2 &lt; char1:
            return False

        if not char1 &lt; char2:
            try:
                char2 = next(it2)
            except StopIteration:
                return True

    return False
</code></pre>

<p>Here, at least one of the <code>try: ... catch ...:</code>s is transformed into a proper loop.</p>
    </div>