<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Like <a href="https://codereview.stackexchange.com/questions/209661/game-of-life-in-ruby#comment405243_209661">I said in the comments</a> Ruby is an object oriented language. However in your first attempt you don't make use of custom classes and object at all. In your second attempt you do use custom classes, but in my opinion the design can be done better.</p>

<h3>Simple way to spot "bad" Ruby code</h3>

<p>One of the simplest ways to spot "bad" Ruby code is by the use of manual iteration. Ruby provides plenty of iterators that could be used instead of manually iterating over an collection. Examples are <a href="https://ruby-doc.org/core-2.5.3/Array.html#method-i-each" rel="nofollow noreferrer"><code>each</code></a>, <a href="https://ruby-doc.org/core-2.5.3/Array.html#method-i-each_index" rel="nofollow noreferrer"><code>each_with_index</code></a>, <a href="https://ruby-doc.org/core-2.5.3/Array.html#method-i-map" rel="nofollow noreferrer"><code>map</code></a>, <a href="https://ruby-doc.org/core-2.5.3/Enumerable.html#method-i-none-3F" rel="nofollow noreferrer"><code>none?</code></a>, <a href="https://ruby-doc.org/core-2.5.3/Enumerable.html#method-i-all-3F" rel="nofollow noreferrer"><code>all?</code></a>, <a href="https://ruby-doc.org/core-2.5.3/Array.html#method-i-any-3F" rel="nofollow noreferrer"><code>any?</code></a> and many others.</p>

<p>In some cases you may not be able to work around manual iteration, but most scenarios have a build-in solution.</p>

<p>In case you need the index with <code>map</code> you can make use of the <a href="https://ruby-doc.org/core-2.5.3/Enumerator.html" rel="nofollow noreferrer">enumerator</a> returned if no block is provided.</p>

<pre><code>array.map.with_index { |element, index| ... }
</code></pre>

<h3>Game rules</h3>

<p>Let's first address the rules of the game:</p>

<ol>
<li>Any live cell with fewer than two live neighbours dies, as if by under-population.</li>
<li>Any live cell with two or three live neighbours lives on to the next generation.</li>
<li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>
<li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>
</ol>

<h3>Rule evaluation</h3>

<p>The rules are all about the amount of neighbours that is alive. <strong>A cell could check this for himself if he knew who his neighbours are.</strong> For this reason I would leave the placement and neighbour assignment up to the <em>Grid</em>, but I would leave the state checking to the <em>Cell</em> itself. This would also eliminate a lot of the coordinate usage, since a cell doesn't care if a neighbour lives above, next or under him. The only thing that matters is the amount of neighbours alive. The only place where you still need the coordinates is when placing the cells and when assigning the neighbours of each cell.</p>

<p>In my opinion the code becomes a lot more readable when it speaks for itself.</p>

<h3>Advantages of working with classes</h3>

<p>Working with classes comes most of the time with some overhead (which can be seen in my example below), but has several advantages.</p>

<ul>
<li>When working with classes the methods are namespaced in the class. Keeping the global namespace free from clutter.</li>
<li>You can assign certain classes certain responsibilities. This makes it easier to maintain code since you know where you should look for certain problems.</li>
</ul>

<h3>Responsibilities</h3>

<p>I've chosen the following responsibilities for the different classes: </p>

<ul>
<li><p><em>Cell</em></p>

<p>A cell is responsible for its own state and the transition to the next state. It has references to its neighbours to check this.</p></li>
<li><p><em>Grid</em></p>

<p>The grid is responsible for creating the grid, creating initially activated cells and assigning each cell its neighbours.</p></li>
<li><p><em>Game</em></p>

<p>The game is responsible for grid instantiation and manages the game cycles to progress the grid further.</p></li>
</ul>

<h3>Code Example</h3>

<pre><code>class Cell
  RELATIVE_NEIGHBOUR_COORDINATES = {
    north: [-1, 0].freeze, north_east: [-1, 1].freeze,
    east:  [0, 1].freeze,  south_east: [1, 1].freeze,
    south: [1, 0].freeze,  south_west: [1, -1].freeze,
    west:  [0, -1].freeze, north_west: [-1, -1].freeze,
  }.freeze

  NEIGHBOUR_DIRECTIONS = RELATIVE_NEIGHBOUR_COORDINATES.keys.freeze

  attr_accessor(*NEIGHBOUR_DIRECTIONS)

  def initialize(alive = false)
    @alive = !!alive # "!!" converts alive value to boolean
  end

  def alive?
    @alive
  end

  def live!
    @alive = true
  end

  def die! # currently unused
    @alive = false
  end

  ##
  # Queues the next state. Returns true if the state is going to change and 
  # false if it stays the same.
  def queue_evolve
    @queued_alive = alive_next_cycle?

    @alive != @queued_alive
  end

  ##
  # Applies the queued state. Returns true if the state changed and false if the
  # state stayed the same.
  def apply_queued_evolve
    old_alive = @alive

    @alive = @queued_alive

    old_alive != @alive
  end

  def alive_next_cycle?
    alive_neighbours = neighbours.count(&amp;:alive?)

    if alive?
      (2..3).cover?(alive_neighbours)
    else
      alive_neighbours == 3
    end
  end

  def going_to_change?
    alive? != alive_next_cycle?
  end

  ##
  # Used to get a neighbour in dynamic fashion. Returns the neighbouring cell or
  # nil if there is no neighbour on the provided direction.
  #
  #     cell[:north]
  #     #=&gt; neighbouring_cell_or_nil
  #
  def [](direction)
    validate_direction(direction)
    send(direction)
  end

  ##
  # Used to set a neighbour in dynamic fashion. Returns the provided neighbour.
  #
  #     cell[:south] = other_cell 
  #     #=&gt; other_cell
  #
  def []=(direction, neighbour)
    validate_direction(direction)
    send("#{direction}=", neighbour)
  end

  ##
  # Returns a list of all present neighbours.
  def neighbours
    NEIGHBOUR_DIRECTIONS.map(&amp;method(:[])).compact
  end

  ##
  # Returns a hash of neighbours and their positions.
  #
  #     cell.neighbours_hash
  #     #=&gt; {
  #       north: nil,
  #       north_east: nil,
  #       east: some_cell,
  #       south_east: some_other_cell,
  #       # ...
  #     }
  #
  def neighbours_hash # currently unused
    NEIGHBOUR_DIRECTIONS.map { |dir| [dir, self[dir]] }.to_h
  end

  ##
  # Returns "x" if the cell is alive and "." if the cell is not.
  def to_s
    alive? ? 'x' : '.'
  end

  ##
  # Since neighbours point to each other the default inspect results in an
  # endless loop. Therefore this is overwritten with a simpler representation.
  #
  #     #&lt;Cell dead&gt; or #&lt;Cell alive&gt;
  #
  def inspect
    "#&lt;#{self.class} #{alive? ? 'alive' : 'dead'}&gt;"
  end

  private

  def validate_direction(direction)
    unless NEIGHBOUR_DIRECTIONS.map(&amp;:to_s).include?(direction.to_s)
      raise "unsupported direction #{direction}"
    end
  end
end

class Grid
  def initialize(width, height, seeds = [])
    @cells = Array.new(width * height).map { Cell.new }
    @grid  = @cells.each_slice(width).to_a

    seeds.each { |coordinate| @grid.dig(*coordinate).live! }

    assign_cell_neighbours
  end

  ##
  # Returns true if the resulting grid changed after evolution.
  def evolve
    # Keep in mind that any? short circuits after the first truethy evaluation.
    # Therefore the following line would yield incorrect results.
    #
    #     @cells.each(&amp;:queue_evolve).any?(&amp;:apply_queued_evolve)
    #

    @cells.each(&amp;:queue_evolve).map(&amp;:apply_queued_evolve).any?
  end

  ##
  # Returns true if the next evolutions doesn't change anything.
  def lifeless?
    @cells.none?(&amp;:going_to_change?)
  end

  ##
  # Returns the grid in string format. Placing an "x" if a cell is alive and "."
  # if a cell is dead. Rows are separated with newline characters.
  def to_s
    @grid.map { |row| row.map(&amp;:to_s).join }.join("\n")
  end

  private

  ##
  # Assigns every cell its neighbours. @grid must be initialized.
  def assign_cell_neighbours
    @grid.each_with_index do |row, row_index|
      row.each_with_index do |cell, column_index|
        Cell::RELATIVE_NEIGHBOUR_COORDINATES.each do |dir, rel_coord|
          (rel_row_index, rel_column_index) = rel_coord
          neighbour_row_index    = row_index    + rel_row_index
          neighbour_column_index = column_index + rel_column_index

          next if neighbour_row_index.negative? || 
                  neighbour_column_index.negative?

          cell[dir] = @grid.dig(neighbour_row_index, neighbour_column_index)
        end
      end
    end
  end
end

class Game
  def initialize(width, height, seeds)
    @width  = width
    @height = height
    @seeds  = seeds
  end

  def reset
    @grid = Grid.new(@width, @height, @seeds)
  end

  def start
    reset

    puts @grid

    until @grid.lifeless?
      @grid.evolve

      puts
      puts @grid
    end
  end
end

game = Game.new(5, 5, [[0,2], [1,0], [1,2], [2,1], [2,2]])
game.start
</code></pre>

<p>The reason cell needs to update its state in two steps is simple. It can't depend upon the new state of one of its neighbours. For this reason all cells prepare their new state first before applying the prepared state.</p>

<h3>References</h3>

<p>Most things speak for themselves, however I still think some references are needed for the not so obvious (Ruby specific) code.</p>

<ul>
<li><p>The <a href="https://ruby-doc.org/core-2.5.3/doc/syntax/calling_methods_rdoc.html#label-Array+to+Arguments+Conversion" rel="nofollow noreferrer">splat operator</a> (<code>*</code>) used to use the contents of an array as individual arguments. Used in the lines:</p>

<pre><code>@grid.dig(*coordinate)
# and
attr_accessor(*NEIGHBOUR_DIRECTIONS)
</code></pre></li>
<li><p><a href="https://ruby-doc.org/core-2.5.3/Module.html#method-i-attr_accessor" rel="nofollow noreferrer"><code>attr_accessor</code></a> is used to create getters and setters for the different neighbour directions.</p>

<pre><code>attr_accessor(:north) # or attr_accessor :north
# is the same as
def north
  @north
end

def north=(value)
  @north = value
end
</code></pre>

<p>This allows <code>cell.north</code> to fetch the north neighbour and <code>cell.north = neighbour</code> to set the north neighbour.</p></li>
<li><p>The use of <a href="https://ruby-doc.org/core-2.5.3/Object.html#method-i-send" rel="nofollow noreferrer"><code>send</code></a> to dynamically call methods inside the <em>Cell</em> class.</p></li>
<li><p><a href="https://ruby-doc.org/core-2.5.3/doc/syntax/assignment_rdoc.html#label-Array+Decomposition" rel="nofollow noreferrer">Array decomposition assignment</a> done in the following line:</p>

<pre><code>(rel_row_index, rel_column_index) = rel_coord
</code></pre></li>
<li><p>Block passing. I currently can't find a reference for this. But the following things yield the same result.</p>

<pre><code>numbers = [1, 2, 3, 4]

numbers.map { |number| number.to_s }
#=&gt; ["1", "2", "3", "4"]
# is the same as
numbers.map(&amp;:to_s) 
#=&gt; ["1", "2", "3", "4"]
#===========================================

def some_method(number)
  number.to_s
end

numbers.map { |number| some_method(number) }
#=&gt; ["1", "2", "3", "4"]
# is the same as
number.map(&amp;method(:some_method))
#=&gt; ["1", "2", "3", "4"]
</code></pre></li>
</ul>

<p>Most other methods I use (e.g. <code>none?</code>, <code>each_slice</code>) can be found in the <a href="https://ruby-doc.org/core-2.5.3/Enumerable.html" rel="nofollow noreferrer"><code>Enumerable</code></a> module.</p>
    </div>