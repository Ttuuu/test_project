<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looking at your code again, there are a few things that you could try:</p>

<h1>1. Avoid trigonometric functions</h1>

<p>These seem to be the most expensive part of your code. You compute a single uniformly distributed random value, turn it into a random angle, then get coordinates on the circle from that:</p>

<pre><code>angles = rand(qSize,1)*2*pi;
new_r = r + ceil(distance.*cos(angles)); % convert length to cell row
new_c = c + ceil(distance.*sin(angles)); % convert length to cell column
</code></pre>

<p>Instead you could compute two normally distributed values, and normalize the vector:</p>

<pre><code>pos = randn(n,2);
new_coords = coords + ceil(distance(pos ./ sqrt(sum(pos.^2,2)));
</code></pre>

<p>(with <code>coords</code> would be equivalent to <code>[c,r]</code> for simplicity here).</p>

<p>The 2D normal distribution is isotropic, this leads to exactly the same probability distribution.</p>

<p>In my test this was only about 10% faster, but every bit counts, right? <code>randn</code> is more expensive than <code>rand</code>, and there's the <code>sqrt</code> as well.</p>

<p>Ideally there would be a way to convert the Gaussian distribution into the power law distribution. This would avoid normalizing <code>pos</code>, and then sampling another random value for the distance. I don't know if this is possible, or how costly it would be.</p>

<h1>2. Modulo operation</h1>

<p>I'm surprised by the cost of the modulo operation. But it makes sense, it's a floating-point operation. Your coordinates never extend past the end of the matrix by a whole lot. You could instead try comparisons:</p>

<pre><code>% original code
new_r = mod(new_r,A)+1;

% alternative
I = new_r&gt;A;
new_r(I) = new_r(I)-A;
I = new_r&lt;1;
new_r(I) = new_r(I)+A;
</code></pre>

<p>This is actually slower in Octave, but it's possible that MATLAB does a better job at optimizing these indexing operations. Worth a try in any case. An alternative to <code>mod</code> is <code>rem</code>, but I don't think either is faster than the other.</p>

<p>Note that your original code is biased: you always add 1 to the index. This causes your movement to be biased by 1 to the right and bottom of the matrix. To be correct it would have to be:</p>

<pre><code>new_r = mod(new_r-1,A)+1;
</code></pre>

<p>The other bias in your code is the use of <code>ceil</code> instead of <code>round</code> when you initially compute the coordinates. This causes your movement to be biased by an additional 0.5 to the right and bottom of the matrix. I recommend that you plot the output of <code>randisp_so</code> for a thousand points, all in the same position in the matrix. Make sure that the output positions are distributed isotropically around that point!</p>

<p><strong>Edit:</strong></p>

<p>This function is about 30% faster than <code>mod</code> (sorry for the poor variable names):</p>

<pre><code>function v = fast_modulo(v,A)
persistent X;
if numel(X)~=3*A
   X = repmat(1:A,1,3);
end
v = X(v+A);
</code></pre>

<p>You'd call</p>

<pre><code>new_r = fast_modulo(new_r,A);
new_c = fast_modulo(new_c,A);
</code></pre>

<p>The function expects integer inputs that are not too far outside of the <code>1:A</code> range (should be OK in your application). As long as you call this function with the same A, it doesn't need to recompute <code>X</code>.</p>

<h1>3. Prevent conversion linear index from coordinates</h1>

<p>This is not the most expensive part of your code, but it seems illogical to me. You could pass coordinates to/from your function:</p>

<pre><code>[destenations,coords] = randisp_so(coords,A,alpha)
</code></pre>

<p>The calling function would use <code>destenations</code> (I presume), and store <code>coords</code> for the next iteration. <code>coords</code> would be equivalent to <code>[c,r]</code>.</p>

<p>BTW: did you notice that <code>destenations</code> is a typo? It's hard to type for me! :)</p>
    </div>