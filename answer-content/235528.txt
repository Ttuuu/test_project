<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>int letter</code> is not a letter. When printing you call it <code>The number</code>. Name it accordingly: <code>int number</code>.</p></li>
<li><p>The condition <code>(1 &lt;= letter &amp;&amp; letter &lt;= 26) == false</code> is very hard to follow. As a general rule, avoid boolean constants in conditions. Rewriting it as:</p>

<pre><code>!(1 &lt;= letter &amp;&amp; letter &lt;= 26)
</code></pre>

<p>immediately calls for a deMorgan transformation into a much more readable form:</p>

<pre><code>(letter &lt; 1 || letter &gt; 26)
</code></pre>

<p>It is also recommended to not rely on the operator precedence, which is very easy to get wrong. Use parenthesis instead:</p>

<pre><code>((letter &lt; 1) || (letter &gt; 26))
</code></pre></li>
<li><p>Avoid raw loops. Each loop represent an important algorithm, and as such deserves a name. The goal of:</p>

<pre><code>while((temp=getchar()) != EOF &amp;&amp; temp != '\n');
</code></pre>

<p>is to discard the line. Factor it out into a function:</p>

<pre><code>void discard_line()
{
    int temp;
    while((temp=getchar()) != EOF &amp;&amp; temp != '\n') {
    }
}
</code></pre>

<p>As a perk benefit, <code>temp</code> is no longer cluttering the essential logic.</p>

<p>I also recommend to be a bit more explicit with the empty loops.</p></li>
<li><p>Avoid magic numbers. <code>26</code> is really <code>strlen(alphabet)</code>. Better yet, declare the alphabet as an array, rather than a pointer, and use <code>sizeof</code>.</p></li>
</ul>
    </div>