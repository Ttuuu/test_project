<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The only problem I see with this code is, that for extending the enum, you need to change <em>two</em> methods in the code, which spreads out changes instead of keeping them local to a single place.</p>
<p>You could however harness the power of the java enum (which can have fields and methods) to make the changes locally.</p>
<p>Something along the lines of:</p>
<pre><code>enum ParserClassType {
    SPECIFIC_XML(SpecificXMLParser.FILE_TYPE_OUTPUT) {
        public ParserClass createParser(InputStream is, etc, ...) {
            return new SpecificXMLParser(...);
        }
    },
    XML(GenericXMLParser.FILE_TYPE_OUTPUT) {
        public ParserClass createParser(InputStream is, etc, ...) {
            return new GenericXMLParser(...);
        }
    },
    ...

    private final String fileExtension;

    private ParserClassType(String fileExtension) {
        this.fileExtension = fileExtension;
    }

    public String getFileExtension() {
        return fileExtension;
    }

    public abstract ParserClass createParser(InputStream is, etc, ...);
}

public static String getFileExtension(...) {
    ParserClassType parserClassType = ...
    return parserClassType.getFileExtension();
}

public ParserClass getParserClass(...) {
    ParserClassType parserClassType =  ...
    return parserClassType.createParser(...);
}
</code></pre>
<p>As you see, when you add a new type, you simply have to extend the enum. All the client code stays unmodified.</p>
<p>Apart from that, please look up the java naming conventions. Variables should start with lower case letters and definitely not shadow their class names.</p>
<p>Furthermore, getParserClass() / ParserClass is badly named, as it clearly involves around a concrete parser / parserInstance, not around a <em>class</em>.</p>
    </div>