<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I don't see many example for status code checking</p>
</blockquote>

<p>I think this way of thinking is a remnant of <code>jQuery.ajax</code> where anything not <code>2xx</code> rejects the promise. On the other hand, <code>fetch</code> makes a request, and returns an object that represents the response. It's up to you and your app to decide what's a "correct" response from a "wrong" response.</p>

<p>Coming from an Angular background, the task of capturing <code>403</code>s and doing redirects is the job of an HTTP interceptor service and not your component. This way, <em>your component is not aware of this logic</em> (it simply makes requests) and the behavior is applied globally on all your API calls. But since React doesn't have the same service structure, we'll make do with wrapping functions. </p>

<p>So ideally, what your component should only ever contain is:</p>

<pre><code>someWrappedVersionOfFetch(...)
  .then(response =&gt; response.json())
  .then(data =&gt; {
    this.setState({
      data: data,
      loaded: true,
      isModalActive: false,
      selectedElement: null,
      selectedId: null,
    }))
  })
</code></pre>

<p>Then the wrapped fetch would be like:</p>

<pre><code>export const someWrappedVersionOfFetch = (...args) =&gt; {
  return fetch(...args)
    .then(response =&gt; {

      if (response.status !== 200) {
        // Update your history and reject the promise
        history.pushState( APP_LOGIN_PATH )
        return Promise.reject(response)
      } else {
        // Just pass response through.
        return Promise.resolve(response)
      }
    })
}
</code></pre>

<p>The above answers your first question. For your second question, you could do it like the second snippet. You put the conditional on the first <code>then</code>, have it conditionally return a resolved or rejected promise. Then just chain the one with <code>setState</code> after it.</p>
    </div>