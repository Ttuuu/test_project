<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Usually, I do:</p>

<ol>
<li>Separate module, for example <code>utils.py</code>, that contains:</li>
</ol>

<pre><code>from datetime import datetime

def get_utcnow() -&gt; datetime:
    return datetime.utcnow()
</code></pre>

<ol start="2">
<li>Use this function everywhere in my code.</li>
<li>Add the mocking fixture in <code>tests/conftest.py</code>:</li>
</ol>

<pre><code>from datetime import datetime, timedelta

import pytest

from .. import utils

@pytest.fixture
def mock_utcnow(monkeypatch):
    now = datetime.min

    def wrapped(delta=0.0):
        when = now + timedelta(delta)
        monkeypatch.setattr(utils, "get_utcnow", lambda: when)
        return when

    return wrapped
</code></pre>

<ol start="4">
<li>Now it's easy to use it in your tests:</li>
</ol>

<pre><code>def test(mock_utcnow):
    now = mock_utcnow()
    new_now = mock_utcnow(0.1)
</code></pre>

<p>Additionally, with this fixture you can set the returning value with desired offset.</p>

<p>Hope it helps.</p>
    </div>