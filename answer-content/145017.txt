<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Code structure</h3>

<p>I find it odd that a <code>CarType</code> would know the distance it traveled. This class is supposed to model the type of the car, and this does not depend on the distance: a <code>CarType</code> is the same whether you traveled 100 or 1000 miles with it. What really depend on the distance traveled is the price; therefore, I'd refactor the method <code>showPrice</code> to take as parameter the <code>meter</code>:</p>

<pre><code>public int showPrice(Meter meter) {
    Bill bill = new Bill(carType, meter);
    return bill.calculate();
}
</code></pre>

<p>The idea is that when constructing a <code>TaxiMeterApp</code>, you don't know in advance the distance the person is going to travel, only the car type they chose. And note that <code>Bill</code> constructor would now take 2 parameters: the car type and the miles traveled, which is all it needs to derive the price.</p>

<p>A second point is the usage of an abstract class <code>CarType</code> with multiple implementations. If you intend in the future to let users of the API create new <code>CarType</code>s, this is a good solution; if not, consider having an enumeration, which will be simpler:</p>

<pre><code>public enum CarType {

    MINI(100), LIGHT(200), COMPACT(300);

    private final int baseCharge;

    CarType(int baseCharge) {
        this.baseCharge = baseCharge;
    }

    public int getBaseCharge() {
        return baseCharge;
    }
}
</code></pre>

<h3>The tests</h3>

<p>There is a lot of repeat in your tests. They are all structured the same way, with just data changing:</p>

<blockquote>
<pre><code>@Test
public void givenTheDistanceCoveredForTheFirst5KmsAndTheCarTypeAsCompactTheBaseFareShouldBe300() {
    Meter meter = new Meter(5);
    CarType car = new Compact(meter);
    TaxiMeterApp taxiMeter = new TaxiMeterApp(car);
    assertEquals(300, taxiMeter.showPrice());
}
</code></pre>
</blockquote>

<p>The only change with subsequent tests is that the type of the car, the distance and the expected result are different. Meaning the only changes are only data-changes. The same algorithm is tested on different data and it is asserted whether it behaves correctly or not. This leads to code duplication: if tomorrow you refactor the main algorithm, all of your tests will break and you'll need to revise each one to update them. Indeed, if you implement some of the changes discussed previously, you'll need to do just that.</p>

<p>The first possible solution is to refactor the structure of the test inside one method. You can create a method that takes the distance and the car type, and that would return the price:</p>

<pre><code>private int priceForCarTypeAndMeter(int distance, CarType carType) {
    Meter meter = new Meter(distance);
    TaxiMeterApp taxiMeter = new TaxiMeterApp(carType);
    return taxiMeter.showPrice(meter);
}
</code></pre>

<p>and then, all of tests are refactored to:</p>

<pre><code>@Test
public void givenTheDistanceCoveredForTheFirst5KmsAndTheCarTypeAsMiniTheBaseFareShouldBe100() {
    assertEquals(100, priceForCarTypeAndMeter(5, new Mini()));
}
</code></pre>

<p>without any code duplication as to how the price is actually derived from the distance and the car type.</p>

<p>Another approach in this case, is to have data-driven tests, which consists of a single test method, but which is invoked on multiple data. If you're using JUnit 4 or below, that can be done with <a href="https://github.com/junit-team/junit4/wiki/parameterized-tests" rel="nofollow">parameterized tests</a> and starting with JUnit 5, you can use <a href="http://junit.org/junit5/docs/current/user-guide/#writing-tests-dynamic-tests" rel="nofollow">dynamic tests</a>.</p>
    </div>