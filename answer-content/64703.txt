<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Choose the right types</h3>

<p>You used <code>double</code> for the coin types, for example:</p>

<blockquote>
<pre><code>System.out.println("How many quarters do you have?");
double quarters = keyboard.nextDouble();
quarters = quarters * (0.25);
</code></pre>
</blockquote>

<p>To the question "how many quarters ...",
it's logical to get an integer (whole number) as the answer, not a <code>double</code>.</p>

<p>I can guess that you choose the <code>double</code> type because you want to use the <code>quarters</code> variable for two different purposes:</p>

<ul>
<li>Count the quarters</li>
<li>Count the dollar value of the quarters</li>
</ul>

<p>These are conflicting meanings, and the right thing to do is to not mix them,
for example:</p>

<pre><code>int quarters = keyboard.nextInt();
double dollarValueOfQuarters = quarters * .25;
</code></pre>

<h3>The Single Responsibility Principle</h3>

<p>The <code>main</code> is doing too much: it has too many responsibilities:</p>

<ol>
<li>Calculate the dollar value of coins</li>
<li>Calculate the compound interest</li>
</ol>

<p>It would be better to split the method into, and give them a name according to their main responsibility, for example:</p>

<pre><code>private static void calculateDollarValueOfCoins(Scanner scanner, NumberFormat moneyFormat) { ... }

private static void calculateCompoundInterest(Scanner scanner, NumberFormat moneyFormat) { ... }

public static void main(String args[]) {
    Scanner scanner = new Scanner(System.in);
    NumberFormat moneyFormat = NumberFormat.getCurrencyInstance();

    calculateDollarValueOfCoins(scanner, moneyFormat);
    calculateCompoundInterest(scanner, moneyFormat);
}
</code></pre>

<p>Now the responsibilities are clearly separated.
I also renamed some variables to better match their purposes:</p>

<ul>
<li><code>scanner</code> instead of <code>keyboard</code>, because you don't really "scan" things from a keyboard. A scanner is a more abstract concept than a keyboard: for all you care, the input values could come as radio signals from the moon, as long as it implements the Scanner's API, your method can work.</li>
<li><code>moneyFormat</code> instead of <code>priceFormat</code>, which works for both responsibilities nicely: the dollar value of your coins is certainly not a "price", and the worth of your investment is not <em>exactly</em> a "price". They are both about money, and formatting money, so this more general name seems appropriate.</li>
</ul>

<h3>Modeling coins</h3>

<p>It might be a good idea to model coins using an enum:</p>

<pre><code>enum Coin {
    NICKLE(.05),
    DIME(.1),
    QUARTER(.25);

    private final double value;

    Coin(double value) {
        this.value = value;
    }
}
</code></pre>

<p>And to add a helper class for adding coins:</p>

<pre><code>private static class CoinAdder {
    private double value = 0;

    CoinAdder addCoins(Coin coin, int number) {
        value += coin.value * number;
        return this;
    }

    public double getValue() {
        return value;
    }
}
</code></pre>

<p>This way, the <code>calculateDollarValueOfCoins</code> method I suggested above can be implemented in a somewhat more natural way,
and without embedding the dollar value of coins in it:</p>

<pre><code>private static void calculateDollarValueOfCoins(Scanner scanner, NumberFormat moneyFormat) {
    System.out.println("How many quarters do you have?");
    int quarters = scanner.nextInt();

    System.out.println("How many dimes do you have?");
    int dimes = scanner.nextInt();

    System.out.println("How many nickles do you have?");
    int nickles = scanner.nextInt();

    double total = new CoinAdder()
            .addCoins(Coin.QUARTER, quarters)
            .addCoins(Coin.DIME, dimes)
            .addCoins(Coin.NICKLE, nickles)
            .getValue();
    System.out.println("You have: " + moneyFormat.format(total));
}
</code></pre>

<p>Now we have separated the responsibilities even further:
<code>calculateDollarValueOfCoins</code> doesn't know anymore the value of the different types of coins, and it doesn't know how to add them.
Those responsibilities are delegated to the <code>Coin</code> enum and the <code>CoinAdder</code> class,
which is a good thing.</p>

<h3>Quick tips</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>quarters = quarters * (0.25);
</code></pre>
</blockquote>

<p>Better:</p>

<pre><code>quarters *= 0.25;
</code></pre>

<p>You can write <code>0.25</code> as <code>.25</code>.</p>

<p>You can write <code>5.</code> instead of <code>(double) 5</code>.</p>

<h3>Suggested implementation</h3>

<p>Putting the above suggestions together, something like this would be better:</p>

<pre><code>class InterestCalculator {

    enum Coin {
        NICKLE(.05),
        DIME(.1),
        QUARTER(.25);

        private final double value;

        Coin(double value) {
            this.value = value;
        }
    }

    private static class CoinAdder {
        private double value = 0;

        CoinAdder addCoins(Coin coin, int number) {
            value += coin.value * number;
            return this;
        }

        public double getValue() {
            return value;
        }
    }

    private static void calculateDollarValueOfCoins(Scanner scanner, NumberFormat moneyFormat) {
        System.out.println("How many quarters do you have?");
        int quarters = scanner.nextInt();

        System.out.println("How many dimes do you have?");
        int dimes = scanner.nextInt();

        System.out.println("How many nickles do you have?");
        int nickles = scanner.nextInt();

        double total = new CoinAdder()
                .addCoins(Coin.QUARTER, quarters)
                .addCoins(Coin.DIME, dimes)
                .addCoins(Coin.NICKLE, nickles)
                .getValue();
        System.out.println("You have: " + moneyFormat.format(total));
    }

    private static void calculateCompoundInterest(Scanner scanner, NumberFormat moneyFormat) {
        System.out.println("What is the initial investment?");
        double investment = scanner.nextDouble();

        System.out.println("At what intrest rate is the intrest compounded annually?");
        double intrestRate = scanner.nextDouble();

        double futureValueFive = investment * Math.pow(1 + intrestRate, 5.);
        System.out.println("In five years the investment will be worth : " + moneyFormat.format(futureValueFive));

        double futureValueTen = investment * Math.pow(1 + intrestRate, 10.);
        System.out.println("In ten years the investment will be worth : " + moneyFormat.format(futureValueTen));

        double futureValueTwenty = investment * Math.pow(1 + intrestRate, 20.);
        System.out.println("In twenty years the investment will be worth : " + moneyFormat.format(futureValueTwenty));
    }

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        NumberFormat moneyFormat = NumberFormat.getCurrencyInstance();

        calculateDollarValueOfCoins(scanner, moneyFormat);
        calculateCompoundInterest(scanner, moneyFormat);
    }
}
</code></pre>
    </div>