<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can often replace <code>switch</code> statements with lookup functions. For example </p>

<pre><code>function returnsHome(moves) {
    var v = 0, h = 0;
    const dirs = { 
        U() {v++}, 
        D() {v--}, 
        L() {h--}, 
        R() {h++} 
    };
    for (const move of moves) { dirs[move]() }
    return !(h || v);
}

// or
function returnsHome(moves) {
    var v = 0, h = 0;
    const dirs = {U() {v++}, D() {v--}, L() {h--}, R() {h++}};
    for (const m of moves) { dirs[m]() }
    return !(h || v);
}
</code></pre>

<p>There is also a very quick way to workout if the result is false by checking if the number of moves is odd. </p>

<pre><code>function returnsHome(moves) {
    var v = 0, h = 0;
    if (moves.length % 2) { return false }        
    const dirs = {U() {v++}, D() {v--}, L() {h--}, R() {h++}};
    for (const m of moves) { dirs[m]() }
    return !(h || v);
}
</code></pre>

<p>Another early exit can be found if a particular distance moved if greater than the remaining number of moves.</p>

<pre><code>function returnsHome(moves) {
    var v = 0, h = 0, remainingSteps = moves.length;
    if (remainingSteps % 2) { return false }
    const dirs = {U() {v++}, D() {v--}, L() {h--}, R() {h++}};
    for (const m of moves) { 
        dirs[m]();
        if (--remainingSteps &lt; (Math.abs(v) + Math.abs(h))) {  return false }
    }
    return !(h || v);
}
</code></pre>

<p>UPDATE I got that wrong, it does not work for all cases</p>

<p><strike>Finally you could also use <code>String.replace</code> to solve</strike></p>

<pre><code>function returnsHome(m) {
    const rep = dir =&gt; (m = m.replace(dir, "")).length;
    return !(
        m.length % 2 || (m.length - rep(/D/g)) - (m.length - rep(/U/g)) || 
        m.length % 2 || rep(/L/g) - m.length
    );
}
</code></pre>
    </div>