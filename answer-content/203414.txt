<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The challenge only asks for the biggest number after all operations.
Printing the complete array after each operation might cause it to fail – 
either by the unexpected output or by the time spent for the log operation.</p>

<p>Also, determining the maximum after each operation is inefficient, this is
better done after all operations.</p>

<p>But what you actually need to pass the challenge is a better algorithm. 
The inner loop</p>

<pre><code>for (let k = startIndex; k &lt;= endIndex; k++)
</code></pre>

<p>takes too much time because it is executed up to \$ 10^7 \$ times, according
to the given limits.</p>

<p>The crucial idea is not to execute the operations “verbatim,” but to
store and update at each array index the “cumulative increment/decrement” with respect
to the preceding element after all operations encountered so far.
This requires only 2 updates for each operation, plus a final run over
all array elements to find the maximum value.</p>

<p>I don't want to deprive you from the joy to figure out the concrete code
yourself, but you'll find more information at <a href="https://www.geeksforgeeks.org/maximum-value-array-m-range-increment-operations/" rel="nofollow noreferrer">Maximum value in an array after m range increment operations</a>, if necessary.</p>
    </div>