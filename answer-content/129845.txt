<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><strong>Readibility</strong></h1>

<p>In the intrest of making it more readable, I would recommend removing magic numbers which are critical to your implementation.</p>

<p>From enqueue we have:</p>

<blockquote>
  <p>if (size == queue.length) {
              resize(2 * queue.length);
          }</p>
</blockquote>

<p>This is effectively the <strong>loadfactor</strong> for your resizing. If you wish to change this in the future you would have to look deep through the code (if it extends) to change it. A set of private const ints with a meaningful name would help.</p>

<h1><strong>Exception Safety</strong></h1>

<p>If you look at standard queue implementations they have a <strong>front</strong> method to get the element from the front of the queue and then have a <strong>deque</strong> or <strong>pop</strong> to remove an item. This guarantees <strong>strong</strong> exception safety if things go wrong. Herb and Sutter explains this very well with a stack implementation.</p>

<p>Consider the code: </p>

<blockquote>
  <p>1.Item i(q.dequeue());</p>
  
  <p>2.Item j;</p>
  
  <p>3.j = s.dequeue();</p>
</blockquote>

<p>Item i gets initialized with dequeue value. Now if the assignment operator fails on the dequeue for some odd reason (memory etc). The queue is now in an inconsistent state. It has removed the element without i being properly initialized.</p>

<p>When the line 3 executes we now have no element for j and that throws an exception</p>
    </div>