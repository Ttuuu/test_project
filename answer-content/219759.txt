<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, <code>check_replay</code> has a few notable things.</p>

<ul>
<li><p>Since you're only using <code>valid_yes</code> and <code>valid_no</code> to check for membership, they would be better as sets which have a much more efficient membership lookup. The performance difference won't be noticeable in this case, but it's a good thing to keep in mind.</p></li>
<li><p>The whole purpose of <code>check_replay</code> is to ask if they want to play again, yet you're printing the <code>"Do you want to play again?"</code> message outside of the function. I would just pass it into the initial <code>input</code> call.</p></li>
<li><p>Even as someone who loves recursion, I agree with @abendrot that recursion isn't the ideal tool for the job here. Using it here means your program could crash if the user enters bad input too many times. I'd just use a <code>while</code> loop.</p></li>
<li><p>I also think it should return the decision instead of calling <code>start_game</code></p></li>
</ul>

<p>Taking all that into consideration, I'd write it closer to:</p>

<pre><code>def check_replay():
    valid_yes = {"yes", "ye", "y"} # Using sets instead of lists
    valid_no = {"no", "n"}

    while True:
        answer = input("Do you want to play again?: ") # Printing the message here instead

        if answer.lower() in valid_yes:
            return True
                                          # I added blank lines for readability
        elif answer.lower() in valid_no:
            print("Thanks for playing!")
            return False

        else:
            print("Please enter yes or no")
</code></pre>

<hr>

<p>My other concern is that <code>start_game</code> and <code>check_valid</code> don't really make sense as two different functions. <code>start_game</code> is basically just being used to initialize the globals, but the globals aren't necessary in the first place. Normally I'm all for breaking up functions into smaller pieces, but I think here everything works better if you collapse them into one function. I also neatened up a lot of stuff. See the comments:</p>

<pre><code>def play_game():
    # I wrapped the whole thing in a loop to avoid the recursive call
    while True: 
        print("I'm thinking of a number between 1 and 10.")
        print("Can you guess it?")

        # No more globals 
        number = random.randint(1, 10)
        counter = 0

        while True:
            counter += 1
            guess = input("Your guess: ")

            try:
                val = int(guess) # You forgot to use val and were instead writing int(guess) all over

                if val not in set(range(0, 11)): # Made into a set as well
                    print("Hmmm.. that number is not between 1 and 10! Try again!")
                                                               # Again, I added blank lines for readability
                elif val &gt; number:
                    print("Too high, try a smaller number")

                elif val &lt; number:
                    print("Too low, try a bigger number")

                else: # This should just be an else since if the other two checks failed, they must be equal 
                    print("Congratulations, you guessed it! The number was " + 
                          str(number) + ".\nIt took you " + str(counter) + " tries!")

                    if check_replay():
                        break # Break to the outer loop to play again

                    else:
                        return # Else exit

            except ValueError:
                print("That's not a number, try again!")
</code></pre>

<p>If you wanted to break that large function up (which is understandable), I'd factor out the turn-taking loop aspect of it. Something like:</p>

<pre><code>def make_guess(computer_number): # Pass in the target number
    while True:
        guess = input("Your guess: ")

        try:
            val = int(guess)

            if val not in set(range(0, 11)):
                print("Hmmm.. that number is not between 1 and 10! Try again!")

            elif val &gt; computer_number:
                print("Too high, try a smaller number")

            elif val &lt; computer_number:
                print("Too low, try a bigger number")

            else:
                return True # Tell the caller that the player won

            return False # Else return that they haven't won yet

        except ValueError:
            print("That's not a number, try again!")

def play_game():
    while True: 
        print("I'm thinking of a number between 1 and 10.")
        print("Can you guess it?")

        number = random.randint(1, 10)
        counter = 0

        while True:
            counter += 1

            has_won = make_guess(number)

            if has_won:
                print("Congratulations, you guessed it! The number was " + 
                      str(number) + ".\nIt took you " + str(counter) + " tries!")

                if check_replay():
                    break

                else:
                    return
</code></pre>

<p>Normally I don't like using <code>while True</code>, but to avoid it here you'd need to use flags all over instead which I don't think would help readability.</p>

<p>Altogether, I have:</p>

<pre><code>import random

def make_guess(computer_number): # Pass in the target number
    while True:
        guess = input("Your guess: ")

        try:
            val = int(guess)

            if val not in set(range(0, 11)):
                print("Hmmm.. that number is not between 1 and 10! Try again!")

            elif val &gt; computer_number:
                print("Too high, try a smaller number")

            elif val &lt; computer_number:
                print("Too low, try a bigger number")

            else:
                return True # Tell the caller that the player won

            return False # Else return that they haven't won yet

        except ValueError:
            print("That's not a number, try again!")

def play_game():
    while True: 
        print("I'm thinking of a number between 1 and 10.")
        print("Can you guess it?")

        number = random.randint(1, 10)
        counter = 0

        while True:
            counter += 1

            has_won = make_guess(number)

            if has_won:
                print("Congratulations, you guessed it! The number was " + 
                      str(number) + ".\nIt took you " + str(counter) + " tries!")

                if check_replay():
                    break

                else:
                    return

def check_replay():
    valid_yes = {"yes", "ye", "y"} # Using sets instead of lists
    valid_no = {"no", "n"}

    while True:
        answer = input("Do you want to play again?: ") # Printing the message here instead

        if answer.lower() in valid_yes:
            return True
                                          # I added blank lines for readability
        elif answer.lower() in valid_no:
            print("Thanks for playing!")
            return False

        else:
            print("Please enter yes or no")

play_game()
</code></pre>
    </div>