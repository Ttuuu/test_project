<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Re-entrance</h2>

<p>These:</p>

<pre><code>static int *memory;
static int acc;     /* accumulator register (value being processed) */
static int ireg;    /* instruction register (current instruction) */
// ...

    static int count;
    static int opcode;
    static int operand;
</code></pre>

<p>force a user to start a new program if they want a new instance of the calculator. If you want to offer an API that allows the co-existence of multiple calculators, pass around a struct instead.</p>

<h2>C99</h2>

<p>These:</p>

<pre><code>int c, exitval, coredump;
FILE *fp;
</code></pre>

<p>haven't needed declaration at the beginning of the function for 20-ish years. It's more legible for them to be declared and initialized closer to where they're actually being used in the function.</p>

<h2>Assignment-in-condition</h2>

<p>About these various statements -</p>

<pre><code>while ((c = getopt(argc, argv, "cm:")) != -1) {
if ((memory = calloc(memsize, sizeof *memory)) == NULL)
if ((fp = fopen(*argv, "r")) == NULL)
while (isblank(c = getc(fp)))
</code></pre>

<p>Don't, please. Expand this out so that the variable is assigned in its own statement. The above is confusing and error-prone, and has no performance gains. The only thing it's good for is code golf, which you aren't currently playing.</p>

<h2>Addition efficiency</h2>

<pre><code>        if ((memory[operand] &gt; 0 &amp;&amp; acc &gt; MEM_MAX - memory[operand]) ||
            (memory[operand] &lt; 0 &amp;&amp; acc &lt; MEM_MIN - memory[operand])) {
            warnx("integer overflow");
            return 1;
        }
        else
            acc += memory[operand];
</code></pre>

<p>can become something like</p>

<pre><code>int sum = memory[operand] + acc;
if (sum &gt; MEM_MAX || sum &lt; MEM_MIN) {
    warnx("integer overflow");
    return 1;
}
acc = sum;
</code></pre>

<p>In other words: don't do the addition three times; do it once. The same applies to <code>SUBTRACT</code>.</p>

<h2>Order of operations</h2>

<pre><code>((acc == MEM_MIN) &amp;&amp; (memory[operand] == -1))
</code></pre>

<p>doesn't require inner parens, due to operator precedence.</p>

<h2>Typo</h2>

<p><code>REMINDER</code> should be <code>REMAINDER</code>.</p>

<h2>Loop sanity</h2>

<pre><code>    size_t i;

    i = 0;
    while(getinstruction(fp, &amp;instruction) &amp;&amp; i &lt; memsize)
        memory[i++] = instruction;
</code></pre>

<p>is better represented by</p>

<pre><code>for (size_t i = 0; i &lt; memsize; i++) {
    if (!getinstruction(fp, &amp;instruction))
        break;
    memory[i] = instruction;
}
</code></pre>

<h2>Memory efficiency</h2>

<p>Currently you're storing integers in 32 bits that, since they have values of less than 10,000, could fit in 16. Depending on your constraints - whether you're optimizing for execution speed or memory efficiency - you might want to change this. 16 bits might actually be slower on your architecture, but to be sure you'd want to profile. Also, if you ever plan on serializing the state of the machine into a file, you should use 16 bits (<code>int16_t</code> from <code>stdint.h</code>).</p>
    </div>