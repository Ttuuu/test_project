<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Prefer passing a std::string_view instead of a std::string in parameters. This avoids needing to create (and allocate) std::string when they don't need to be. Std::string should still be used in Node to ensure the string remains valid. </p>

<p>Having said that using integer keys is better. Using an enum for the keys means that a typo in the key becomes a compile error instead of a bug and if you take care to make them sequential and start from 0 the lookup is a vector index instead of a linear search.</p>

<p>the template parameters for the function type is meaningless. You can only use <code>std::function&lt;void(Course*)&gt;</code> in it. Any other parameter list will result in a compilation error. </p>

<p>Your control flow through the <code>Course</code> object is deeply recursive when it doesn't need to be. This means that the user could create a stack overflow by jumping back and forth between menu items.</p>

<p>Instead you can keep the index and current node as a local and manipulate it, if you get rid of the Waterfall class this becomes a bit easier:</p>

<pre><code>bool doStart(std::string_view name) {

    Node* currentNode = //find the corresponding Node;
    size_t functionIndex = 0;
    Course course;
    course.doNext = [&amp;]() {
        functionIndex ++;
    };

    course.doRestart = [&amp;]() {
        //nop
    };

    course.doReset = [&amp;]() {
        functionIndex = 0;
    };

    course.doReplace = [&amp;](std::string_view name) {
        currentNode = //find the corresponding Node;
        functionIndex = 0;
    };

    while(currentNode != nullptr &amp;&amp; functionIndex &lt; currentNode-&gt;funcs.length){
        currentNode-&gt;funcs[functionIndex](&amp;course);
    }
}
</code></pre>

<p>However looking at that code it makes sense to make <code>Node* currentNode</code>, <code>size_t functionIndex</code> and a <code>Flow* flow</code> as fields of <code>Course</code> and make the functions normal instance functions:</p>

<pre><code>struct Course {
    Node* currentNode = nullptr;
    size_t functionIndex = 0;
    Flow* flow;

    void doNext(){
            functionIndex ++;
    }
    void doRestart() {
        //nop
    }
    void doReset() {
        functionIndex = 0;
    }
    void doReplace(std::string_view name) {
        currentNode = flow-&gt;findNode(name);
        functionIndex = 0;
    }
};


bool doStart(std::string_view name) {

    Course course;
    course.currentNode = findNode(name);
    course.functionIndex = 0;
    course.flow = this;

    while(course.currentNode != nullptr &amp;&amp; 
            course.functionIndex &lt; course.currentNode-&gt;funcs.length){
        course.currentNode-&gt;funcs[course.functionIndex](&amp;course);
    }
}
</code></pre>
    </div>