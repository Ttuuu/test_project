<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>JavaScript</h2>
<ul>
<li>Javascript uses <code>camelCase</code> by convention not <code>snake_case</code></li>
<li>Undeclared variables are placed in global scope or throw a parsing error in strict mode. The further a variable's scope is from the current scope the longer it takes to get the reference and thus the slower the code. You have not declared <code>words</code>, <code>capitalized_sentence</code>  and more in the testing code</li>
<li>Best to use constants for variables that do not change.</li>
<li>Always use strict equality <code>===</code> and inequality <code>!==</code> as they are faster and unless you are familiar with JS type coercion safer to use as they do not coerce type.</li>
</ul>
<h2>Rewrite</h2>
<p>Rewriting your function using idiomatic JS</p>
<pre><code>function capitalize(str) {
    const words = [];
    for (const word of str.split(" ")) {
        if (word !== '') { word = word[0].toUpperCase() + word.slice(1) }
        words.push(word);
    }
    return words.join(" ");
}
</code></pre>
<p>You could also do a one liner using string replace and a RegExp</p>
<pre><code>const capitalize = str =&gt; str.replace(/\b[a-z]/g, char =&gt; char.toUpperCase());
</code></pre>
<p>However the regular expression does make it a little slow.</p>
<h2>Immutable strings</h2>
<p>JavaScript string are immutable, and thus you must take great care when handling strings as allocation overheads can slow things down. Avoid needless copying of strings</p>
<h2>Accessing characters</h2>
<p>The quickest way to get at characters in a string is via <code>String.charCodeAt(idx)</code></p>
<p>For simple capitalization if you know that the char is lower case  <code>String.fromCharCode(str.charCodeAt(0) - 32)</code> is twice as fast as <code>str[0].toUpperCase()</code></p>
<p>With the above two points in mind you can double (or better as it skips already uppercase words) the performance with the following.</p>
<ul>
<li>Only copies words if they need capitalization.</li>
<li>Uses the character code to do the capitalization.</li>
<li>Uses the one array, to avoid overhead building a second array.</li>
</ul>
<p>.</p>
<pre><code>function capit(str) {
    const words = str.split(" ");
    var i = 0, char;
    for (const word of words) {
        word !== "" &amp;&amp; (char = word.charCodeAt(0)) &gt; 96 &amp;&amp; char &lt; 122 &amp;&amp; 
            (words[i] = String.fromCharCode(char - 32)  + word.slice(1));
        i++;
    }
    return words.join(" ");
}
</code></pre>
    </div>