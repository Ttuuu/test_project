<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This can be solved using <code>groupby</code> directly. First, get the bins you want to use, then just <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.cut.html" rel="nofollow noreferrer"><code>pandas.cut</code></a> the actual values into those bins.</p>

<pre><code>binning = pd.qcut(bins['value'], 12, retbins=True)[1]
group_bins = price.groupby(pd.cut(price.value, binning)).amount.sum()
</code></pre>

<p>This produces basically the same output for the given example, except that it is a <code>pandas.Series</code> instead of a <code>pandas.DataFrame</code>:</p>

<pre><code>value
(1.0, 2.333]         50
(2.333, 3.0]        400
(3.0, 5.0]          144
(5.0, 7.333]        130
(7.333, 8.667]      157
(8.667, 11.0]       275
(11.0, 13.333]        0
(13.333, 18.667]    146
(18.667, 22.0]      148
(22.0, 26.333]        0
(26.333, 34.333]      0
(34.333, 54.0]        0
Name: amount, dtype: int64
</code></pre>

<p>In addition, you should probaly put this into a function and only call it from a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from the file.</p>

<p>I am not quite sure why you need to determine the binning the way you do, though. From your variable names I would have assumed that <code>bins.value</code> are the bin edges to be used instead.</p>
    </div>