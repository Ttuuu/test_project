<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, <code>this.items</code> is redundant in most cases - just <code>items</code> would be enough.</p>

<hr>

<pre><code>if(value != null)
{
    this.items.add(value);
}
else
{
    throw new IllegalArgumentException("Value must be JSON, was " + (value == null ? "null" : value.getClass()));
}
return this;
</code></pre>

<p>This format is not what I'd expect. Usually, I'd use a guard clause.</p>

<pre><code>if(value == null) {
    throw new IllegalArgumentException("Value must be JSON, was " + (value == null ? "null" : value.getClass()));
}

items.add(value);
return this;
</code></pre>

<hr>

<p>Java <a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html">coding conventions</a> show that there should be a space between an <code>if</code> and the parenthesis:</p>

<pre><code>if(value == null) //Doesn't follow the convention
if (value == null) //Follows the convention
</code></pre>

<hr>

<pre><code>return "[" + sb.toString() + "]";
</code></pre>

<p>If you are using a <code>StringBuilder</code> why don't you directly append '[' and ']' to the builder? Same in the other class.</p>

<hr>

<p>If I understand correctly, <code>JSONList</code> is a JSON array and <code>JSON</code> is a JSON object, is this correct?
Have you considered renaming them to JSONArray and JSONObject?
Also, if you reuse the <code>String</code>, <code>Boolean</code>, integer, etc. classes, why don't you also reuse Java's <code>List</code>?</p>

<p>Your arrays also seem overly restrictive. You allow arrays of objects but not anything else. How would I output <code>["Hello", "World"]</code> with your classes?</p>

<p>And what if I want an object inside another object? <code>{"foo":{}}</code></p>

<hr>

<pre><code>this.parts.put(key, "null");
</code></pre>

<p>This is problematic. You later use <code>Object v = entry.getValue();</code> and check for the type of <code>v</code>, which will be reported as <code>String</code>. This is incorrect. JSON supports null values, but your class will replace them by <code>"null"</code>.</p>

<hr>

<pre><code>sb.append("\"").append(entry.getKey())
</code></pre>

<p>You repeat this <em>a lot</em>. Consider moving this to <em>before</em> the type checks.</p>

<hr>

<p>As a precaution, after the last <code>else if(v instanceof JSONList)</code>, consider adding:</p>

<pre><code>else {
    assert false : "This should never happen";
}
</code></pre>

<p>as defensive programming.</p>

<hr>

<p>If I pass a NaN float to your JSON class, it'll generate a JSON like <code>{foo: NaN}</code> which is invalid. NaN is not supported in JSON.</p>

<p>Some Strings will be incorrectly output to the JSON file. Consider Strings using the <code>\</code> or <code>"</code> character, for instance. And also "control characters". You should properly escape them. Same applies to object keys.</p>

<p>For more information about the JSON format, see <a href="http://www.json.org/">http://www.json.org/</a>.</p>

<hr>

<p>In <code>JSON.add</code>, you never check if the key is null.</p>

<hr>

<p>You offer <code>add</code> methods but not <code>remove</code>. Is this intentional?</p>

<hr>

<p>You support <code>Integer</code> and <code>Float</code>, but not <code>Byte</code>, <code>Short</code>, <code>Long</code> and <code>Double</code>. This might cause some unpleasant surprises to users of your application.</p>

<hr>

<p><code>.append(((JSONList) v).toString())</code> is redundant. <code>.append(v)</code> would work (see documentation for <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/StringBuilder.html#append%28java.lang.Object%29"><code>StringBuilder</code></a> and <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html#valueOf%28java.lang.Object%29"><code>valueOf</code></a>.</p>
    </div>