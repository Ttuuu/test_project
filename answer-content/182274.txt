<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, so because I'm primarily a python 2.7 person, I'm not gonna write any real code. Instead, I'll talk through an algorithm, using pseudocode valid in python 2.7 AND python 3.x</p>

<p>We have the list [0,1,2,3,4,5...n-2,n-1,n] to begin with. </p>

<pre><code>Select (0,1)
Select (0,2)
Select (1,3)
Select (2,4)
Select (3,5)
...
Select (n-2,n)
Select (n-1,n)
</code></pre>

<p>There's a valid set. Specifically, for any set made of <code>range(n,m)</code>:</p>

<pre><code>select (n,n+1)
i = 0
While i+2&lt;m:
  select (n+i,n+i+2)
  i++
select (m-2,m)
select (m-1,m)
</code></pre>

<p>Now I know <code>Select</code> isn't a valid bit of code, but the base algorithm is the same. Furthermore, because this works on any range, it's more robust than your code. </p>

<p>Ok, fine. I'll add some code. No telling if it'll work for 3.x, though.</p>

<pre><code>def Select(lst,index1,index2):
  return (lst[index1],lst[index2])
def select_unordered_pairs_from_list(lts):
  if len(lts) == 2:
    return [Select(lts,0,1)]
  if len(lts) == 2:
    return [Select(lts,a,b) for a,b in [(0,1),(0,2),(1,2)]]
  out = []
  out.append(Select(lts,0,1))
  i = 0
  while i+2&lt;len(lts):
    out.append(Select(lts,i,i+2))
    i+= 1
  j = len(lts)
  out.append(Select(lts,j-2,j-1))
  return out
</code></pre>
    </div>