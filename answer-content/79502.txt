<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yeah don't use a dynamic variable for that, it's just confusing for the
user.</p>

<p>It is way easier to deal with input and output from a
function instead of having to take special variables into account, basically it's now part of your interface.  And I personally
would be really angry if a random function somewhere took a common
variable like <code>files</code> from outside its scope and filled it with data.</p>

<p>So, after that explanation, I would recommend using either a separate
function, or <code>cl-flet</code>/<code>cl-labels</code> to handle the recursive part and only
expose the necessary parts to the caller.  That means no optional
<code>rel-dir</code>, which isn't really part of the interface and no using <code>files</code>
from the outer scope.</p>

<p>To wit:</p>

<pre><code>(defun my-get-dir-files (dir pat)
  "..."
  (let (files)
    (cl-flet ((aux (dir pat rel-dir)
                    (let ((dir-files nil)
                          (cur-dir nil))
                      (unless rel-dir (setq rel-dir ""))
                      (setq cur-dir (expand-file-name rel-dir dir))
                      (setq dir-files (directory-files cur-dir nil nil t))
                      (dolist (name dir-files)
                        (unless (or (string= name ".") (string= name ".."))
                          (let ((fn (expand-file-name name cur-dir)))
                            (if (file-directory-p fn)
                                (let ((new-rel-dir nil))
                                  (if (string= "" rel-dir)
                                      (setq new-rel-dir name)
                                    (setq new-rel-dir (concat rel-dir "/" name)))
                                  (aux dir pat new-rel-dir)) ;; recursive call
                              (when (string-match pat name)
                                (let ((rel-fn nil))
                                  (if (string= "" rel-dir)
                                      (setq rel-fn name)
                                    (setq rel-fn (concat rel-dir "/" name))
                                    (setq files (append files `(,rel-fn)))))))))))))
      (aux dir pat nil)
      files)))
</code></pre>

<p>Note that I just wrapped the existing function one time and put a <code>let</code>
around it to keep the side effect more contained.  And now that <code>files</code>
is lexical, everything is fine.</p>

<p>But really, it would be better to just use an accumulator.  You
only ever add one element to the list, in which case you should just
immediately use <code>push</code> instead (and if you care about the output order,
<code>nreverse</code> the final result).</p>

<p>The following changes could also be made later:</p>

<ul>
<li>Use <code>member</code> instead of the <code>or</code>, less typing for you.</li>
<li>(Short variable names don't necessarily improve readability.  Even
though Elisp code seems to disagree in places.)</li>
<li>The explicit binding to <code>nil</code> isn't necessary as it's the default
anyway.</li>
<li>Also the <code>setq</code>s there are unnecessary, just put the initial binding
into the <code>let</code> instead, use <code>or</code> and other functional tools.</li>
<li><code>cond</code> is more readable for nested conditions, if applicable.</li>
<li>I would use <code>list</code> for simple list constructions like (,foo).</li>
<li><code>(setq rel-fn name)</code> in the <code>if</code> doesn't do anything as it's the only form in the true branch.</li>
</ul>

<p>So with all that it would be like this (even though personally I'd
rename the <code>fn</code> to <code>filename</code> as well.  YMMV:</p>

<pre><code>(defun my-get-dir-files (dir pat)
  (let (files)
    (cl-flet ((aux (dir path rel-dir)
                   (let ((cur-dir (expand-file-name rel-dir dir)))
                     (dolist (name (directory-files cur-dir nil nil t))
                       (unless (member name '("." ".."))
                         (let ((fn (expand-file-name name cur-dir)))
                           (cond
                            ((file-directory-p fn)
                             (aux dir pat (if (string= "" rel-dir)
                                              name
                                            (concat rel-dir "/" name))))
                            ((string-match pat name)
                             (unless (string= "" rel-dir)
                               (push (concat rel-dir "/" name) files))))))))))
      (aux dir pat "")
      files)))
</code></pre>

<p>I'm pretty sure all transformations kept the meaning the same; a quick
check via</p>

<pre><code>(set-exclusive-or (let (files) (my-get-dir-files-1 ".." ".*") files) (my-get-dir-files ".." ".*") :test #'equal)
</code></pre>

<p>with <code>-1</code> being the original function resulted in no difference in the
lists (except for order of course), so that was enough for me.  If you
return <code>(nreverse files)</code> instead the lists are exactly equal.</p>

<p>And at this point I'm done.  There might still be potential
optimisations during the concatenations and so on.  The recursion itself here is fine as you won't encounter directory trees deep enough to cause the recursion to fail and it's also fairly efficient now, so no need to change anything there.</p>

<p>You could still extract a local function for <code>(if (string= "" rel-dir) ...)</code> and use that there and in the other branch of the <code>cond</code>.</p>

<p>Next up:  Would be cool if the function also handled <code>"."</code> for <code>dir</code>.</p>
    </div>