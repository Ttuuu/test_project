<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you are using lists of strings to represent sequences of bits, the performance does not seem to matter. So if the performance does not matter anyway, one could at least try to make it as simple as possible. One way to make it simple, is to keep it close to the actual mathematical definition. The definition is: </p>

<pre><code>b(n) := b(n / 2) + (n % 2)        if n &gt; 1
b(n) := (n % 2)                   if n &lt;= 1
</code></pre>

<p>Using the neat ternary operator available in C# this becomes:</p>

<pre><code>public static string Convert(int n)
{
    return (n &gt; 1 ? Convert(n / 2) : "") + n % 2;
}
</code></pre>

<p>Same can be done with empty list instead of "" and adding list elements instead of "+", but I doubt that this return type is appropriate. Maybe you wanted something like a list of booleans?</p>

<p>Other points that I find suspicious: </p>

<ol>
<li><p>What do I have to do to my system in order to make the '0' and '1' appear as something else? Is it even possible? If not, why bother adding the internationalization settings?</p></li>
<li><p>One should require/assert that the input is positive, or treat the negative numbers differently. The current implementation seems to fail silently for negative arguments. Is this intended?</p></li>
<li><p>All results seem to start with a 0; this is unexpected.</p></li>
</ol>
    </div>