<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The Road to Good Program Design and Code</h3>

<p>Perhaps the worst coding horror I see day to day is absence of good practices when it comes to simple or short code. We all learn on simple examples so it feels like too much overkill effort. And we rationalize: "it's a throwaway", "it's too simple to bother", "I'm just experimenting."  </p>

<p>Focus on good basics and don't worry so much about SOLID, patterns, etc. per se.</p>

<p>Never forget that you are writing for the reader and for code maintainability.</p>

<hr>

<p><strong><code>static void Main(string[] args)</code></strong></p>

<p><code>Main</code> should only drive your program, it should not be the program. This makes the class(es) portable, re-usable. Like this:</p>

<pre><code>class Program {
    public MathQuiz testMe = new MathQuiz();
    testMe.Play();  // you'll need an entry point
} // Program

public class MathQuiz {
   // all the code
} // MathQuiz
</code></pre>

<hr>

<p><strong>Naming Things</strong></p>

<p>The general starting place for method names is <em>actionVerb-noun</em>. And abbvr. is not bad per se but understanding must not be sacrificed. <code>Cal</code> - could be short for Calvin, or calendar, or California, or ????. So <code>Calc</code> is better but still not good. <code>Calculate</code> is better but not much. <code>DoTheMath</code> is catchy! What does the method do? That's its name.</p>

<blockquote>
  <p><code>private static double Cal(double num1, double num2, **int randomIndex**)</code></p>
</blockquote>

<p>It is not a <code>randomIndex</code>, it's an arithmetic operator. Name things for what they are in the "problem domain", in this case a math quiz. I can read code but I can't <em>understand</em> it if all the variable names merely redundantly repeat implementation details.</p>

<p><code>Operation(int randomIndex)</code> How about <code>DecodeOperatorCode(int opCode)</code>.  Just keep leaning toward descriptive naming and the code will be better off. </p>

<hr>

<p><strong>Comments</strong></p>

<blockquote>
  <p><code>// 3 request input
       userInput = RequestInput(num1,num2,operation);</code></p>
</blockquote>

<p>I can imagine sketching an outline using comments but at this point leaving these kinds of comments is just plain amateur hour. It is obviously superfluous. It adds no understanding. Good structure and good naming are worth a thousand comments.</p>

<hr>

<blockquote>
  <p>do { ... } while(isPlaying)</p>
</blockquote>

<p>I had to read ALL the code just to find out <code>isPlaying</code> never changes. Here a comment would be nice to let the reader know the loop does not terminate. Oh, did I mention I had to read ALL the code?</p>

<hr>

<p><strong>Pick Up Your Dead</strong></p>

<pre><code>    // [2]
    //int lives = 0;

    // Console.Write("How many lives do you want?\t");
    // lives = Convert.ToInt32(Console.ReadLine());
    // Console.WriteLine("You have  {0} Lives", lives);
</code></pre>

<p>Never leave dead code lying about. If you want to know what the previous code state is then use version control; which is what you should be doing anyway.</p>

<p><strong>operator vs operation - naming precision</strong></p>

<p>An <em>operation</em> is what is done, an <em>operator</em> is what it is.  A plus sign is an operator. Adding things is an operation.</p>

<hr>

<p><strong>sum</strong></p>

<p>A sum is the result of addition by definition but is used universally for the result of all  operations (using the various operators). But it is used consistantly (see below) and that does mitigate potential misunderstanding.</p>

<hr>

<p><strong>string operation = "";</strong></p>

<p><code>string.Empty</code> is better. Sometimes the font and/or its size can make it hard to discern any blank space in there.</p>

<hr>

<p><strong>Consistency</strong></p>

<p>The program uses both an operatorCode and the operator (+, -, /, *). Be consistant and use one or the other. "Translate" the opCode up front and use that throughout, or vice versa. But not both. In context using one or the other makes better sense perhaps but consistancy gives the code more of the readability and understandability qualities.</p>

<hr>

<p><strong>Classes are where you find them</strong></p>

<p>And I find them anywhere I'm fussing with something and that code is spread around and/or duplicated and/or makes for "busy" code. The operator in this program can be a separate class.  If you think this class is too small to bother with re-read the opening statement of this post.</p>

<pre><code>public class MathOperators {
   protected Array operators = ["x", "/", "+", "-"];
   protected Random randomOpCode = new Random();

   public int OperatorToOpCode(string operator) { ... }
   public string OpCodeToOperator(int opCode) { ... }
   public int randomOpCode(){ ... }
}

- It's re-usable and reliable (assuming it's been tested!)
- The user doesn't know or care how the operators are stored or how to retrieve them
- Easier to test
- This class has a single, focused purpose
- Functionality encapsulation is a very good thing. You'll understand more deeply as you gain experience.
- Changes are a low risk for the using (client) code. All the client code cares about is the interface - that is, all the public class members' signatures. AKA, the API. 
- The Invisible Hand of good design and coding
   - Classes and methods tend to be smaller and simpler. 
   - Complexity stays under control as code is added.
</code></pre>
    </div>