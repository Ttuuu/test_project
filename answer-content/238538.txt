<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP 8</h1>
<p>Overall, your code is very clean.  However, there are a few minor <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> deviations:</p>
<ol>
<li><p><code>.getname()</code> should be <code>.get_name()</code>, as it is two words.</p>
</li>
<li><p>In several places, where a statement continues over multiple lines, the indentation is not PEP-8 compliant, such as:</p>
<pre><code> self.board = {1: ' ', 2: ' ', 3: ' ', 4: ' ',
                         5: ' ', 6: ' ', 7: ' ', 8: ' ', 9: ' '}
</code></pre>
</li>
</ol>
<p>should be:</p>
<pre><code>    self.board = {1: ' ', 2: ' ', 3: ' ', 4: ' ',
                  5: ' ', 6: ' ', 7: ' ', 8: ' ', 9: ' '}
</code></pre>
<p>(But perhaps this was an artifact of copying the code to the Code Review site.)</p>
<ol start="3">
<li><p>Commas should be followed by one space.  Eg)</p>
<pre><code> all_positions = {1,2,3,4,5,6,7,8,9}
</code></pre>
<p>should be:</p>
<pre><code> all_positions = {1, 2, 3, 4, 5, 6, 7, 8, 9}
</code></pre>
</li>
<li><p>Raise Objects not Classes</p>
<pre><code> raise PositionError
</code></pre>
<p>should be:</p>
<pre><code> raise PositionError()
</code></pre>
<p>or:</p>
<pre><code> raise PositionError("Your message here")
</code></pre>
</li>
</ol>
<h1>Classes</h1>
<p>Deriving from <code>object</code> is implicit:</p>
<pre><code>class Board(object):
    ...
</code></pre>
<p>should simply be written as:</p>
<pre><code>class Board:
    ...
</code></pre>
<h1>Imports</h1>
<p>Both <code>board.py</code> and <code>player.py</code> define the class:</p>
<pre><code>class PositionError(Exception):
    pass
</code></pre>
<p><code>player.py</code> should simply import <code>PositionError</code> from <code>board</code>, like was done in <code>game.py</code>:</p>
<pre><code>from board import Board, PositionError
</code></pre>
<h1>f-strings</h1>
<p>Beginning with Python 3.6, formatting strings has become easier.  Instead of separating the format code and the format argument be a large distance, like <code>"...{}...{}...{}".format(a, b, c)"</code>, f-strings allow you to embed the argument inside the format code:  <code>f"...{a}...{b}...{c}"</code>.  Note the leading <code>f</code> in <code>f"..."</code>.</p>
<p>So this code:</p>
<pre><code>    print('{} is playing noughts.'.format(player1.getname()))
</code></pre>
<p>can be rewritten like this:</p>
<pre><code>    print(f'{player1.getname()} is playing noughts.')
</code></pre>
<p>(Note: I'll be revisiting this below, and make it even cleaner.)</p>
<h1>Code Duplication</h1>
<p><code>game()</code> has virtually identical code in both branches of the <code>if ... else</code> inside the <code>while</code> loop.  The largest difference is one branch calls <code>nought_turn()</code> while the other calls <code>cross_turn()</code>.</p>
<p><code>nought_turn()</code> and <code>cross_turn()</code> also have virtually identical code.  The first difference is one displays a nought <code>(o)</code> while the other displays a cross <code>(x)</code>.  The second being the former calls <code>.add_nought()</code> and the latter calls <code>.add_cross()</code>.</p>
<p><code>add_nought()</code> and <code>add_cross()</code> also have virtually identical code.  The first difference being one stores '<code>o</code>' in <code>self.board</code> while the other stores <code>'x'</code>.  The second difference being the position is added to either <code>self.nought_positions</code> or <code>self.cross_positions</code>.</p>
<p>The code above is the same, only the data (the symbol) is different.  Let's pass the symbol down.  Instead of <code>nought_turn(player1, board)</code>, we could use <code>player_turn(player1, board, 'o')</code> and instead of <code>cross_turn(player2, board)</code>, we could use <code>player_turn(player2, board, 'x')</code>.  <code>player_turn()</code> might look like this:</p>
<pre><code>def player_turn(player, board, symbol):
    print(f"It is now {player.getname()}'s turn. ({symbol})")
    
    while True:
        try:
            move = player.getmove(deepcopy(board))
            board.add_symbol(move, symbol)
            break
        except PositionError:
            print('Sorry, the space has been taken. '
                  'Please try another space.')
    
    board.display_board()
</code></pre>
<p>Tiny changes.  We've added <code>{symbol}</code> to the print statement, and changed <code>.add_nought(...)</code> and <code>.add_cross(...)</code> to <code>.add_symbol(..., symbol)</code>.  But a big change; we've removed an entire duplicate code function.</p>
<p><code>add_symbol()</code> would replace <code>add_nought()</code> and <code>add_cross()</code>:</p>
<pre><code>    def add_symbol(self, position, symbol):
        if self.board[position] == ' ':
            self.board[position] = symbol
            if symbol == 'o':
                self.nought_positions.append(position)
            else:
                self.cross_positions.append(position)
        else:
            raise PositionError('Space is occupied.')
</code></pre>
<p>We've had to add an <code>if ... else</code> in the <code>add_symbol()</code> to append the position to the correct positions list, but again we've removed an entire extra duplicate code function, so that's a win.</p>
<p>Let's look at that revised main loop again:</p>
<pre><code>    turn = player1
    while len(board.available_positions()) != 0:
        if turn == player1:
            player_turn(player1, board, 'o')
            if board.is_winner() is True:
                game_winner = player1
                break
            else:
                turn = player2

        else:
            player_turn(player2, board, 'x')
            if board.is_winner() is True:
                game_winner = player2
                break
            else:
                turn = player1
</code></pre>
<p>We're passing <code>player1</code> or <code>player2</code> into the <code>player_turn()</code> function.  But <code>turn</code> is the current player, so we could just pass in <code>turn</code>.  Or better: rename the variable to <code>player</code>!  Ditto for <code>game_winner = ...</code>.  Then we just need to determine the correct symbol for the current player.</p>
<pre><code>    player = player1
    while len(board.available_positions()) != 0:
        symbol = 'o' if player == player1 else 'x'

        player_turn(player, board, symbol)
        if board.is_winner() is True:
            game_winner = player
            break

        player = player2 if player == player1 else player1
</code></pre>
<h1>nought &amp; cross positions</h1>
<p>What are these?</p>
<pre><code>        self.nought_positions = []
        self.cross_positions = []
</code></pre>
<p>You <code>.append(position)</code> to them when moves are successfully made.  But they are only ever used in:</p>
<pre><code>        nought_set = set(self.nought_positions)
        cross_set = set(self.cross_positions)
</code></pre>
<p>and <code>nought_set</code> and <code>cross_set</code> are never modified or destroyed.</p>
<p>So you are maintaining a <code>list</code> and generating the corresponding <code>set</code> when used.  Why not just maintain sets from the get-go?</p>
<pre><code>        self.nought_set = set()
        self.cross_set = set()
</code></pre>
<p>and use <code>.add(position)</code> to add <code>position</code> to the set when a move is successfully made.</p>
<h1>Available positions</h1>
<p>You are doing too much work with <code>all_positions</code>:</p>
<pre><code>        all_positions = {1,2,3,4,5,6,7,8,9}
</code></pre>
<p>The keys of <code>self.board</code> are all of the positions.  So the above statement can be replaced with simply:</p>
<pre><code>        all_positions = set(self.board)
</code></pre>
<p>If you changed the keys to be 0 through 8, or 'A' through 'I', using <code>set(self.board)</code> would automatically construct the correct set; you wouldn't need to change the hard-coded <code>{1,2,3,4,5,6,7,8,9}</code> set to the correct values, so is a win for program maintenance.</p>
<p>But wait.  From <code>all_positions</code>, you subtract <code>nought_set</code> and <code>cross_set</code>.  This leaves all the <code>self.board</code> positions which still have the value <code>" "</code>.  There is an easier way:</p>
<pre><code>    def available_positions(self):
        return [position for position, value in self.board.items() if value == " "]
</code></pre>
<p>No need for the <code>nought_set</code> or <code>cross_set</code> here!</p>
<h1>Is Winner</h1>
<p>Each call, you are checking if noughts has won or crosses has won.  This is double the required work.  Nought can only win on nought's turn, and cross can only win on cross's turn.</p>
<p>If you pass in the <code>symbol</code> that just played, you could eliminate half of the checks:</p>
<pre><code>    def is_winner(self, symbol):
        winning_positions = [{1,2,3}, {4,5,6},
                             {7,8,9}, {1,4,7},
                             {2,5,8}, {3,6,9},
                             {1,5,9}, {3,5,7}]

        if symbol == 'o':
            player_set = set(self.nought_positions)
        else:
            player_set = set(self.cross_positions)

        for position in winning_positions:
            if player_set &amp; position == position:
                return True

        return False
</code></pre>
<p><code>player_set &amp; position == position</code> takes two sets, constructs a new set which is the intersection of the two sets, and compares the result with the second set.  This is, effectively, an "is <code>position</code> a subset of <code>player_set</code>" test.  And <a href="https://docs.python.org/3/library/stdtypes.html?highlight=issubset#frozenset.issubset" rel="nofollow noreferrer"><code>.issubset(other)</code></a> is built-in to Python:</p>
<pre><code>        for position in winning_positions:
            if position.issubset(player_set):
                return True

        return False
</code></pre>
<p>The <code>position.issubset(player_set)</code> test can also be written as <code>position &lt;= player_set</code>.</p>
<p>Looping over a collection of items and testing if a condition is <code>True</code> for any of the items is an <a href="https://docs.python.org/3/library/functions.html?highlight=any#any" rel="nofollow noreferrer"><code>any()</code></a> test ... also built into Python:</p>
<pre><code>        return any(position &lt;= player_set for position in winning_positions)
</code></pre>
<p>But do we really need the <code>nought</code>/<code>cross</code> <code>_positions</code>/<code>_set</code>?  We got rid of them in <code>available_positions()</code>.</p>
<p>We want any <code>winning_positions</code> where all positions have the current players <code>symbol</code>.  If we move <code>winning_positions</code> out of the function and made it a global constant:</p>
<pre><code>WINNING_POSITIONS = ((1, 2, 3), (4, 5, 6), (7, 8, 9),
                     (1, 4, 7), (2, 5, 8), (3, 6, 9),
                     (1, 5, 9), (3, 5, 7))
</code></pre>
<p>Then,</p>
<pre><code>    def is_winner(self, symbol):

        return any(all(self.board[cell] == symbol for cell in position)
                   for position in WINNING_POSITIONS)
</code></pre>
<p>Now, there is no more references to <code>nought_positions</code> or <code>cross_set</code>.  Those can be removed globally!</p>
<h1>Private members</h1>
<p>In the <code>Board</code> class, <code>self.board</code> is a private member; no external class should manipulate it.  In Python, there are no private/public access modifiers which will enforce a member being private.  But there are conventions.</p>
<p>Members with a leading underscore are - by convention - private.  Many IDE's will omit those identifiers when providing auto-complete hints.  Additionally <code>from some_module import *</code> will not import any items beginning with an underscore, so it is a bit more than convention.</p>
<p>So:</p>
<ul>
<li><code>self.board</code> should be changed to <code>self._board</code></li>
<li><code>self.name</code> should be changed to <code>self._name</code></li>
</ul>
<p>When they existed:</p>
<ul>
<li><code>self.nought_positions</code> should have been <code>self._nought_positions</code></li>
<li><code>self.cross_positions</code> should have been <code>self._cross_positions</code></li>
</ul>
<h1>Properties</h1>
<p>In <code>Player</code>, the method <code>getname()</code> exists because <code>player.name</code> is supposed to be a private member, not accessed directly.  You wouldn't want external code to accidentally, or maliciously change a player's name:</p>
<pre><code>if game_winner != player1:
    player1.name = "The loser"
</code></pre>
<p>But <code>player1.name</code> is so convenient to use.  It is the player's name.  What could be simpler than typing <code>player1.name</code>?</p>
<p>We can do that.  Safely.</p>
<pre><code>class Player:

    def __init__(self, name):
        self._name = name

    @property
    def name(self):
        return self._name
</code></pre>
<p>Now we can access a <code>Player</code> objects <code>.name</code> property safely, and simply.  We can fetch the value, but we can't change it:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; p = Player("Fred")
&gt;&gt;&gt; p.name
'Fred'
&gt;&gt;&gt; p.name = "Bob"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
&gt;&gt;&gt; 
</code></pre>
<p>Which leads to even clearer print format statement I hinted about earlier:</p>
<pre><code>    print(f'{player1.name} is playing noughts.')
</code></pre>
<h1>Deep Copy</h1>
<pre><code>        move = player.getmove(deepcopy(board))
</code></pre>
<p>Neither <code>Player</code> nor <code>LazyRobot</code> modify <code>board</code> during <code>getmove(board)</code>.  Why the deep copy?</p>
<p>If it is when you make a better robot player, perhaps the robot player should do the deep copy?  Or add a <code>board.copy()</code> method which can return a duplicate <code>Board</code> for the player to scribble on while they try to determine the optimal move.</p>
    </div>