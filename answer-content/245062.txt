<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would include a comment at the top of the file indicating the version of the relevant software you've used. A quick comment stating "Tested with Python 3.6 (installed through Anaconda)" or something to that effect is nice to make sure everyone is on the same page.</p>
<hr>
<p>Since this is intended as teaching example, I will focus on minimizing the current code. I think that it is a reasonable assumption that more code gives more room for potential confusion.</p>
<pre><code>class Board:
    BOARD_SIZE = (8, 8)
</code></pre>
<p>Will you ever have a non-square board? Can this be a simple int? Changing this reduces the overall amount of code by a non-trivially amount.</p>
<pre><code>    def get_square(self, row, col):
        if not self.is_valid_square((row, col)):
            return None
        return self.board[row][col]

    def set_square(self, row, col, piece):
        self.board[row][col] = piece
</code></pre>
<p>Getters and setters are rare in Python, and since the board is public facing (it isn't prefixed with an underscore like later functions are), the setter doesn't really add much to the code. The getter smells a little bit, since a getter returning None is unexpected, and none of the provided code that uses the getter checks for None. I would remove both.</p>
<pre><code>    def is_valid_square(self, square):
        return (
            square[0] in range(self.BOARD_SIZE[0])
            and square[1] in range(self.BOARD_SIZE[1])
        )
</code></pre>
<p>This function is not pleasant to debug if it is used incorrectly. An example of this is the error given if the input parameter 'square' is empty.</p>
<pre><code>&gt;&gt;&gt; board.is_valid_square([])
Traceback (most recent call last):
...
    square[0] in range(self.BOARD_SIZE[0])
IndexError: list index out of range
</code></pre>
<p>Which list is indexed out of range? There are two index operations on the same line. There are also two different uses of the word range, each with different meanings. That could be confusing to a beginner.</p>
<p>Strictly speaking, the parameter square can be any size, but we expect it to be two elements big. I would make this assumption explicit with code through either an unpacking, an assert, or by changing the function signature.</p>
<pre><code>def is_valid_square(self, row, col):
    return row in range(self.BOARD_SIZE) and col in range(self.BOARD_SIZE)
</code></pre>
<hr>
<pre><code>def _generate_first_row(self, color):
    row_by_color = {Color.BLACK: 0, Color.WHITE: self.BOARD_SIZE[0] - 1}
    row = row_by_color[color]

    order = (Rook, Knight, Bishop, Queen, King, Bishop, Knight, Rook)
    params = {'color': color, 'row': row}
    return [order[i](col=i, **params) for i in range(self.BOARD_SIZE[0])]
</code></pre>
<p>As a small thing, I would change the name to _generate_back_row. I think that is a slightly more clear name. A quick <a href="https://en.wikipedia.org/wiki/Glossary_of_chess#B" rel="noreferrer">wikipedia search</a> tells me that the exact term to use would be first-rank or back-rank, but that might might not be well enough known.</p>
<p>This function has a lot going on in it. I think this could be simplified a little, taking advantage of the fact there are only two colours. The dictionary lookup and expanding kwargs from a dictionary are overkill (but are both great things to teach, I would leave them in _generate_pawn). The code could look something like</p>
<pre><code>def _generate_back_row(self, color):
    row = 0 if color == Color.BLACK else self.BOARD_SIZE - 1

    order = (Rook, Knight, Bishop, Queen, King, Bishop, Knight, Rook)
    return [
        order[i](col=i, row=row, color=color)
        for i in range(self.BOARD_SIZE[0])
    ]
</code></pre>
<hr>
<pre><code>def get_pieces(self, color=None):
    for row in self.board:
        for col in row:
            if col is not None and (color is None or col.color == color):
                yield col
</code></pre>
<p>I think the variable col should be named square. What does color=None mean? Get both colours pieces? The feature isn't used anywhere in the code. I think this function should be made simpler, removing the default parameter. I think it would be more reasonable for the code to look like</p>
<pre><code>def get_color_pieces(self, color):
    for row in self.board:
        for square in row:
            if square is not None and square.color == color:
                yield square
</code></pre>
<hr>
<pre><code>def get_possible_moves(self, color, with_king=False):
            """Return all player's possible moves."""
</code></pre>
<p>The comment is a little confusing. Which player are we talking about? What does with_king mean? I would have expected all possible moves to include those of the king by default. I would suggest something like below, which flips the default, including the possible king moves, but highlighting that the function can optionally not include them.</p>
<pre><code>def get_possible_moves(self, color, exclude_king=False):
    """Return all possible moves using the pieces of the specified color."""
</code></pre>
<hr>
<pre><code>def is_possible_target(self, board, target):
    is_target_valid = board.is_valid_square(target)
    is_empty_square = board.is_empty_square(target)
    is_hitting_enemy = self.is_enemy(board.get_square(*target))
    return is_target_valid and (is_empty_square or is_hitting_enemy)
</code></pre>
<p>This is a good function. The names of the functions it calls make the logic clear and easy to follow. I would consider changing the definition to <code>return is_target_valid and not is_hitting_self</code>, since that would be less work for the computer, but overall this looks really good.</p>
<pre><code>def is_enemy(self, piece):
    if piece is None:
        return False
    return piece.color == Color.enemy_of(self.color)
</code></pre>
<p>This could be slightly more obvious by ending with <code>return piece.color != self.color</code>.</p>
<hr>
<pre><code>def get_valid_moves(self, board):
    for row_change, col_change in self.directions:
        steps = 1
        stop_searching_in_this_direction = False
        while not stop_searching_in_this_direction:
            new_row = self.row + row_change * steps
            new_col = self.col + col_change * steps
            target = (new_row, new_col)
            is_valid_target = self.is_possible_target(board, target)
            if is_valid_target:
                yield target
                steps = steps + 1
                is_hit_enemy = self.is_enemy(board.get_square(*target))
            if not is_valid_target or (is_valid_target and is_hit_enemy):
                stop_searching_in_this_direction = True
</code></pre>
<p>I would make some small changes to the logic of this function. It has quite a bit of complexity (3 indents, a yield, and an if statement that directly affects the next if statement), so giving it more space whitespace, and inverting some of the booleans might make it a little cleaner and more importantly, easier to parse.</p>
<p>The first thing to change is to move the inner logic to its own function. This has two benefits, it makes the code a little easier to parse, and it allows the inner logic to stop whenever it needs to, rather than tracking the loop condition explicitly.</p>
<pre><code>def get_valid_moves(self, board):
    for row_change, col_change in self.directions:
        for move in moves_in_a_direction(self, row_change, col_change):
            yield move

def moves_in_a_direction(self, row_change, col_change):
    steps = 1
    stop_searching_in_this_direction = False
    while not stop_searching_in_this_direction:
        new_row = self.row + row_change * steps
        new_col = self.col + col_change * steps
        target = (new_row, new_col)
        is_valid_target = self.is_possible_target(board, target)
        if is_valid_target:
            yield target
            steps = steps + 1
            is_hit_enemy = self.is_enemy(board.get_square(*target))
        if not is_valid_target or (is_valid_target and is_hit_enemy):
            stop_searching_in_this_direction = True
</code></pre>
<p>is_hit_enemy is only set in the first if statement, it doesn't even exist before then. I would try and keep the logic to the one place (and change the name to has_hit_enemy, as that would be more accurate). To do this, invert the condition to make it a guard clause</p>
<pre><code>if not is_valid_target:
    return

yield target
steps += 1
has_hit_enemy = ...
...
</code></pre>
<p>This facilitates the removal of stop_searching_in_this_direction, as it was only used to stop the loop. Since we can return, it becomes unnecessary.</p>
<pre><code>def moves_in_a_direction(self, row_change, col_change):
    steps = 1
    while True:
        new_row = self.row + row_change * steps
        new_col = self.col + col_change * steps
        target = (new_row, new_col)
        is_valid_target = self.is_possible_target(board, target)
        if not is_valid_target:
            return

        yield target
        steps = steps + 1

        has_hit_enemy = self.is_enemy(board.get_square(*target))
        if has_hit_enemy:
            return
</code></pre>
<hr>
<pre><code>def _get_regular_walk(self):
    src_row, src_col = self.get_position()
    return (src_row + self.forward, src_col)
</code></pre>
<p>This looks ok, but src doesn't really mean anything here. I'd say drop it</p>
<pre><code>def _get_regular_walk(self):
    row, col = self.get_position()
    return row + self.forward, col
</code></pre>
<p>In fact, since each piece knows its own row and column, why do we need self.get_position() anyway? It might be a candidate for deletion.</p>
<pre><code>def _get_regular_walk(self):
    return self.row + self.forward, self.col
</code></pre>
<hr>
<pre><code>def is_possible_target(self, board, target):
    is_valid_move = board.is_valid_square(target)
    is_step_forward = (
        board.is_empty_square(target)
        and target == self._get_regular_walk()
    )
    is_valid_double_step_forward = (
        board.is_empty_square(target)
        and not self.moved
        and target == self._get_double_walk()
        and self.is_possible_target(board, self._get_regular_walk())
    )
    is_hitting_enemy = (
        self.is_enemy(board.get_square(*target))
        and target in self._get_diagonal_walks()
    )
    return is_valid_move and (
        is_step_forward or is_valid_double_step_forward or is_hitting_enemy
    )
</code></pre>
<p>The logic looks good, but it is hard to find it in amongst the code. The more I see is_valid_square, the less I like the name. Consider other names that let you know what the function checks for, such as is_within_bounds or is_inside. I have also noticed that every function which returns a boolean has been prefixed with is_, to an almost pathological degree. There are other prefixes which would be much better suited, like has, can, will, or simply leaving out the prefix. With a guard clause, and changing the prefixes to make more sense, the code might look like</p>
<pre><code>def is_possible_target(self, board, target):
    is_valid_move = board.is_valid_square(target)
    if not is_valid_move:
        return False

    can_step_forward = (
        board.is_empty_square(target)
        and target == self._get_regular_walk()
    )

    can_double_step_forward = (
        can_step_forward and
        not self.moved and
        board.is_empty_square(target) and
        target == self._get_double_walk()
    )

    can_capture = (
        self.is_enemy(board.get_square(*target))
        and target in self._get_diagonal_walks()
    )

    return can_step_forward or can_double_step_forward or can_capture
</code></pre>
<hr>
<pre><code>class King(WalksStraightMixin, WalksDiagonallyMixin, Piece):
    def _get_threatened_squares(self, board):
        enemy = Color.enemy_of(self.color)
        enemy_moves = list(board.get_possible_moves(enemy, with_king=False))
        enemy_pieces = board.get_pieces(color=enemy)
        king = next(p for p in enemy_pieces if isinstance(p, King))
        for move in king.get_squares_threatens(board):
            yield move
        for move in enemy_moves:
            yield move
</code></pre>
<p>This is okay, but not as clear as it could be. Rearranging the lines and renaming king to enemy king improves the code.</p>
<pre><code>class King(WalksStraightMixin, WalksDiagonallyMixin, Piece):
    def _get_threatened_squares(self, board):
        enemy = Color.enemy_of(self.color)
        enemy_moves = list(board.get_possible_moves(enemy, exclude_king=True))
        for move in enemy_moves:
            yield move

        enemy_pieces = board.get_pieces(color=enemy)
        enemy_king = next(p for p in enemy_pieces if isinstance(p, King))
        for move in enemy_king.get_squares_threatens(board):
            yield move
</code></pre>
<p>But this brings up the question of "Why is the enemy king treated differently?" Surely it is just another enemy piece that has a set of possible moves, each of which threatens this king? If there is something of note here, a comment explaining it would be helpful.</p>
    </div>