<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Some like to think of an interface like it's owned by the class that
implements it.</p>
<p>Some like to think of an interface like it's owned by the client that
uses it.</p>
<p>For the first time I'm starting to think either can be true.</p>
</blockquote>
<p>It is true. The difference lies in semantics.</p>
<h1>Interface owned by its own class</h1>
<p>The core is: EVERY class has an interface aside the language construct "interface". The problem is: Sometimes it is not beneficial.</p>
<p>If you have a class in JAVA sometimes it is hard to ensure encapsulation.  Therefore you hide the class behind an "interface" language construct.</p>
<p>The separate interface of a class is only an extraction of the interface the class already implicitly has. You can compare it to the header file in the programming language "C" where it provides perfect encapsulation.</p>
<p>In JAVA it is a helper construct which is not enforced. So nothing hinders you to use the concrete class implementation instead of the interface. In "C" you only make the header files known to other compilation units (I hope so, as I am not a C-developer).</p>
<h1>Interface owned by the framework</h1>
<p>The other way around: A framework provides functionality. To let your object cooperate with the framework they have to meet some requirements that are formulated as "interface" language constructs.</p>
<p>Here comes the complicated thing:</p>
<p>You may have a class with an extracted alternative interface AND you want to have a contract to work together with a framework. Then you have two interfaces with different semantics to handle.</p>
<h1>The clean architecture</h1>
<p>If you consequently follow the SOLID principle it will guide you to exact this architecture. You have no chance to miss it.</p>
<h1>Your code</h1>
<p>In general I do not think that pressing a button is a usecase but I think you have a correct reference implementation of clean architecture.</p>
    </div>