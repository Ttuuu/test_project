<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your FileType appears to me good to encapsulate itself all the things you need.</p>

<p>I used many strategies to archieve same result to illustrate how to use enum as you like. I think it works with very few changes</p>

<pre><code>public enum FileType{

ANCILLARY(Constants.Instrument.LYRA.name(), Boolean.FALSE){
    @Override
    public String getDestination(){
        return AClass.staticMethod.extractDestination(this.name(),this.instrument);
    }
},
DAILY_DIFF_MOVIE(Constants.Instrument.SWAP.name(), Boolean.TRUE){
    @Override
    public Date getDate(String fileName){
        return AClass.staticMethod.extractDateFromFileName(filename);
    }
    @Override
    public String getDestination(){
        return AClass.staticMethod.extractDestinationYearMonth(getDate(),this.instrument.toLowerCase(), Constants.DataType.MOVIE.name().toLowerCase()));
    }
},
DAILY_MOVIE(Constants.Instrument.SWAP.name(),Boolean.TRUE){
    @Override
    public Date getDate(String fileName){
        return getDateFromFile(filename);
    }
    @Override
    public String getDestination(){
        return AClass.staticMethod.extractDestinationYearMonth(getDate(),Constants.Instrument.SWAP.name().toLowerCase(), Constants.DataType.MOVIE.name().toLowerCase()));
    }
}
;


private final String instrument;
private final Boolean calibrated;

private FileType(String instrument, Boolean calibrated){
    this.instrument = instrument;
    this.calibrated = calibrated;
}

public String getInstrument(){
    return this.instrument;
}

public Boolean isCalibrated(){
    return this.calibrated;
}

abrstract public String getDestination(AnInstanceWIthStrategy object);

public Date getDate(String fileName){
    return new Date();
}

private Date getDateFromFile(String fileName){
    return filename.substring(foo);
}
</code></pre>

<p>and then your method will looks like:</p>

<pre><code>private P2SAFile populateP2SAFile(File file, Message out) throws Exception {
    String filename = file.getName();

    FileType fileType = null;
    try{
        FileType fileType = extractFileTypeFromFileName(filename);
    }
    catch{
     throw new IllegalArgumentException("Unknown file type " + filename);
    }

    out.setHeader(Constants.FILE_DESTINATION_HEADER, fileType.getDestination());
    FileExtension fileExtension = FileExtension.valueOf(getFileExtension(filename).toUpperCase());

    P2SAFile p2saFile = getP2SAFile(filename, fileExtension.name(), fileType.getInstrument(), fileType.isCalibrated());
    p2saFile.setFilePath(fileType.getDestination());
    p2saFile.setExtension(fileExtension.name());
    p2saFile.setFileDate(fileType.getDate(filename));
    p2saFile.setFileSize(file.length());
    p2saFile.setFileType(fileType.name());
    p2saFile.setProcessingLevel(Constants.NOT_APPLICABLE);
    return p2saFile;
}
</code></pre>
    </div>