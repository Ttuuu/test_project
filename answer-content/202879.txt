<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><strong>Pay attention to compiler warnings</strong>. Rust is a statically-compiled language. One of the big reasons you choose such a language is to get information at compile time:</p>

<pre class="lang-none prettyprint-override"><code>warning: unused import: `std::rc::Rc`
 --&gt; src/main.rs:7:5
  |
7 | use std::rc::Rc;
  |     ^^^^^^^^^^^
  |
  = note: #[warn(unused_imports)] on by default
</code></pre></li>
<li><p>Modern Rust coalesces imports from the same crate.</p></li>
<li><p>You are inconsistent with your usage of <code>for</code> loops and <code>for_each</code>. Have a reason for using one or the other.</p></li>
<li><p><code>dijkstra</code> requires no lifetime generics, so don't include them.</p></li>
<li><p>Don't have commented out code; that's what source control is for.</p></li>
<li><p>It feels very wrong to have <code>Eq</code> and <code>Hash</code> not working from the same data. This is undoubtedly sure to cause problems in the future.</p></li>
<li><p>It feels very wrong to have <code>distance</code> be a part of a <code>Vertex</code>; You can't calculate the distance for two things simultaneously.</p></li>
<li><p>Re-allocating the <code>BinaryHeap</code> so frequently feels like it will be highly inefficient.</p></li>
<li><p>You are deliberately formatting <code>Vertex</code> for output to the user. That means you should use <code>Display</code>, not <code>Debug</code></p></li>
<li><p>Using something like <code>usize::MAX</code> to indicate "not visited" is not idiomatic Rust. This conflates two concepts.</p></li>
</ol>



<pre><code>use std::{
    cell::Cell,
    cmp::Ordering,
    collections::{BinaryHeap, HashMap},
    fmt,
    hash::{Hash, Hasher},
};

fn main() {
    let s = Vertex::new("s");
    let t = Vertex::new("t");
    let x = Vertex::new("x");
    let y = Vertex::new("y");
    let z = Vertex::new("z");

    // A map from vertices to their adjacent vertices including costs
    let mut adjacency_list = HashMap::new();
    adjacency_list.insert(&amp;s, vec![(&amp;t, 10), (&amp;y, 5)]);
    adjacency_list.insert(&amp;t, vec![(&amp;y, 2), (&amp;x, 1)]);
    adjacency_list.insert(&amp;x, vec![(&amp;z, 4)]);
    adjacency_list.insert(&amp;y, vec![(&amp;t, 3), (&amp;x, 9), (&amp;z, 2)]);
    adjacency_list.insert(&amp;z, vec![(&amp;s, 7), (&amp;x, 6)]);

    dijkstra(&amp;s, &amp;adjacency_list);

    adjacency_list.keys().for_each(|v| println!("{}", v));
}

fn dijkstra(
    start: &amp;Vertex&lt;'_&gt;,
    adjacency_list: &amp;HashMap&lt;&amp;Vertex&lt;'_&gt;, Vec&lt;(&amp;Vertex&lt;'_&gt;, usize)&gt;&gt;,
) {
    start.distance.set(0);

    // Fill the binary heap, vertices with the smallest distance go first
    let mut to_visit = BinaryHeap::new();
    adjacency_list.keys().for_each(|v| to_visit.push(*v));

    // We visit the vertices with the smallest distance first, this is
    // what makes Dijkstra a greedy algorithm
    while let Some(v) = to_visit.pop() {
        if let Some(neighbors) = adjacency_list.get(v) {
            for (n, cost) in neighbors {
                let new_distance = v.distance.get() + cost;
                if new_distance &lt; n.distance.get() {
                    n.distance.set(new_distance);
                }
            }
            // When changing a vertex' distance, the BinaryHeap doesn't
            // update the position of the vertex.
            // That's why we create a new heap with the right order.
            let mut new_heap = BinaryHeap::new();
            to_visit.iter().for_each(|x| new_heap.push(*x));
            to_visit = new_heap;
        }
    }
}

#[derive(Eq)]
struct Vertex&lt;'a&gt; {
    name: &amp;'a str,
    distance: Cell&lt;usize&gt;,
}

impl&lt;'a&gt; Vertex&lt;'a&gt; {
    fn new(name: &amp;'a str) -&gt; Vertex&lt;'a&gt; {
        Vertex {
            name,
            distance: Cell::new(usize::max_value()),
        }
    }
}
impl&lt;'a&gt; Hash for Vertex&lt;'a&gt; {
    fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) {
        self.name.hash(state);
    }
}

/// Since this Vertex will be put in a priority queue where the vertices
/// with the *smallest* distance should be processed first, `cmp`
/// returns GT if self.distance().get() &lt; other.distance().get()
impl&lt;'a&gt; Ord for Vertex&lt;'a&gt; {
    fn cmp(&amp;self, other: &amp;Vertex&lt;'a&gt;) -&gt; Ordering {
        other.distance.get().cmp(&amp;self.distance.get())
    }
}
impl&lt;'a&gt; PartialOrd for Vertex&lt;'a&gt; {
    fn partial_cmp(&amp;self, other: &amp;Vertex&lt;'a&gt;) -&gt; Option&lt;Ordering&gt; {
        Some(self.cmp(other))
    }
}
impl&lt;'a&gt; PartialEq for Vertex&lt;'a&gt; {
    fn eq(&amp;self, other: &amp;Vertex&lt;'a&gt;) -&gt; bool {
        self.name == other.name
    }
}

impl&lt;'a&gt; fmt::Display for Vertex&lt;'a&gt; {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {
        write!(
            f,
            "name: {}, distance: {}",
            self.name,
            self.distance.get()
        )
    }
}
</code></pre>

<p>Turning to <a href="https://github.com/bluss/petgraph/blob/master/src/dijkstra.rs" rel="nofollow noreferrer">petgraph's implementation of Dijkstra's algorithm</a> for inspiration, I'd:</p>

<ul>
<li>Separate the costs from the graph</li>
<li>Maintain a list of visited nodes</li>
<li>Return the distances as a value</li>
</ul>



<pre><code>use std::{
    cmp::Ordering,
    collections::{BinaryHeap, HashMap, HashSet},
};

fn main() {
    let s = Vertex::new("s");
    let t = Vertex::new("t");
    let x = Vertex::new("x");
    let y = Vertex::new("y");
    let z = Vertex::new("z");

    let mut adjacency_list = HashMap::new();
    adjacency_list.insert(s, vec![(t, 10), (y, 5)]);
    adjacency_list.insert(t, vec![(y, 2), (x, 1)]);
    adjacency_list.insert(x, vec![(z, 4)]);
    adjacency_list.insert(y, vec![(t, 3), (x, 9), (z, 2)]);
    adjacency_list.insert(z, vec![(s, 7), (x, 6)]);

    let distances = dijkstra(s, &amp;adjacency_list);

    for (v, d) in &amp;distances {
        println!("name: {}, distance: {}", v.name, d);
    }

    assert_eq!(distances.get(&amp;t), Some(&amp;8));
    assert_eq!(distances.get(&amp;s), Some(&amp;0));
    assert_eq!(distances.get(&amp;y), Some(&amp;5));
    assert_eq!(distances.get(&amp;x), Some(&amp;9));
    assert_eq!(distances.get(&amp;z), Some(&amp;7));
}

fn dijkstra&lt;'a&gt;(
    start: Vertex&lt;'a&gt;,
    adjacency_list: &amp;HashMap&lt;Vertex&lt;'a&gt;, Vec&lt;(Vertex&lt;'a&gt;, usize)&gt;&gt;,
) -&gt; HashMap&lt;Vertex&lt;'a&gt;, usize&gt; {
    let mut distances = HashMap::new();
    let mut visited = HashSet::new();
    let mut to_visit = BinaryHeap::new();

    distances.insert(start, 0);
    to_visit.push(Visit {
        vertex: start,
        distance: 0,
    });

    while let Some(Visit { vertex, distance }) = to_visit.pop() {
        if !visited.insert(vertex) {
            // Already visited this node
            continue;
        }

        if let Some(neighbors) = adjacency_list.get(&amp;vertex) {
            for (neighbor, cost) in neighbors {
                let new_distance = distance + cost;
                let is_shorter = distances
                    .get(&amp;neighbor)
                    .map_or(true, |&amp;current| new_distance &lt; current);

                if is_shorter {
                    distances.insert(*neighbor, new_distance);
                    to_visit.push(Visit {
                        vertex: *neighbor,
                        distance: new_distance,
                    });
                }
            }
        }
    }

    distances
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
struct Vertex&lt;'a&gt; {
    name: &amp;'a str,
}

impl&lt;'a&gt; Vertex&lt;'a&gt; {
    fn new(name: &amp;'a str) -&gt; Vertex&lt;'a&gt; {
        Vertex { name }
    }
}

#[derive(Debug)]
struct Visit&lt;V&gt; {
    vertex: V,
    distance: usize,
}

impl&lt;V&gt; Ord for Visit&lt;V&gt; {
    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering {
        other.distance.cmp(&amp;self.distance)
    }
}

impl&lt;V&gt; PartialOrd for Visit&lt;V&gt; {
    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {
        Some(self.cmp(other))
    }
}

impl&lt;V&gt; PartialEq for Visit&lt;V&gt; {
    fn eq(&amp;self, other: &amp;Self) -&gt; bool {
        self.distance.eq(&amp;other.distance)
    }
}

impl&lt;V&gt; Eq for Visit&lt;V&gt; {}
</code></pre>

<p>Additional changes:</p>

<ol>
<li>There's no need to take references to <code>Vertex</code> if it's only a reference itself. Implement <code>Copy</code> instead.</li>
</ol>
    </div>