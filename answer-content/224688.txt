<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like the following approach that makes use of <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a>. It generalizes nicely to other indexable sequences such as lists and tuples.</p>

<pre><code>from functools import reduce
def get_nested_item(data, keys):
    return reduce(lambda seq, key: seq[key], keys, data)
</code></pre>

<p>This can be further simplified by direct access to the <code>__getitem__</code> method of the sequences, which leads to a noticeable increase in performance (I measured 20-35% for different test data):</p>

<pre><code>from functools import reduce
from operator import getitem
def get_nested_item(data, keys):
    return reduce(getitem, keys, data)
</code></pre>

<p>Usage:</p>

<pre><code>get_nested_item(data={"a":{"b":{"c":1}}}, keys=["a","b","c"]) # =&gt; 1
get_nested_item(data=[[[1,2,3],[10,20,30]]], keys=[0,1,2])    # =&gt; 30
get_nested_item(data={'a':0, 'b':[[1,2]]}, keys=['b',0,1])    # =&gt; 2
get_nested_item(data=some_sequence, keys=[])                  # =&gt; some_sequence
</code></pre>

<p>If one prefers soft failure for missing keys/indices, one can catch <code>KeyError</code> or <code>IndexError</code>.</p>

<pre><code>def get_nested_item(data, keys):
    try:
        return reduce(getitem, keys, data)
    except (KeyError, IndexError):
        return None
</code></pre>
    </div>