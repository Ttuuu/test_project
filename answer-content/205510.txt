<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd suggest these points to simplify your code:</p>

<ul>
<li><p>Make everything that returns <code>Maybe something</code> into <code>MaybeT</code>, and as close to the origin as possible. This will make composition of your functions much easier. For example:</p>

<pre><code>lookupIdGetParam :: (PathPiece (Key a), MonadHandler m) =&gt; Text -&gt; MaybeT m (Key a)
lookupIdGetParam name = liftM fromPathPiece (MaybeT $ lookupGetParam name)
</code></pre>

<p>Notice using <code>MaybeT</code> just at <code>lookupGetParam</code>, then we don't need to duplicate <code>MaybeT</code>'s functionality in the <code>case</code> expression.</p>

<p>This also helps you to avoid complicated code with two nested monads (such as <code>SqlPersistT m (Maybe MarketingCampaigns)</code>) and then complex and hard-to-read operations on them like <code>fmap join (mapM ...)</code>.</p></li>
<li><code>MaybeT . fmap Just</code> is equivalent to <a href="http://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Class.html#v:lift" rel="nofollow noreferrer"><code>lift</code></a>.</li>
<li><p>Whenever applicable, use functions from <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad.html#t:MonadPlus" rel="nofollow noreferrer"><code>MonadPlus</code></a>. Not just <code>mzero</code> (which is here equivalent to <code>Nothing</code>) and <code>mplus</code>, there are also some other very useful ones such as <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad.html#v:mfilter" rel="nofollow noreferrer"><code>mfilter</code></a> or <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad.html#v:guard" rel="nofollow noreferrer"><code>guard</code></a>. Like in:</p>

<pre><code>fetchCampaigns :: MonadHandler m =&gt; Key User -&gt; Key Dealership -&gt; MaybeT (SqlPersistT m) MarketingCampaigns
fetchCampaigns userKey dealershipKey = do
  enabled &lt;- lift $ campaignsEnabled userKey dealershipKey
  guard enabled
  lift $ getCampaigns dealershipKey
</code></pre></li>
<li><p>Something to try out, I'm not sure if this will help you, but it might: Instead of a function that returns a <code>Bool</code> in a monad, return <code>MaybeT MyMonad ()</code> such that original <code>False</code> corresponds to a failure in <code>MaybeT</code> and <code>True</code> to a <code>()</code> value. To be specific, instead of <code>isDiscountEligible</code>, you could have</p>

<pre><code>checkDiscountElegible :: MonadHandler m =&gt; Key Vehicle -&gt; MaybeT (SqlPersistT m) ()
checkDiscountElegible vehicleKey = do
  vehicle &lt;- MaybeT (get vehicleKey)
  hasDiscount &lt;- vehicleHasDiscount &lt;$&gt; (MaybeT . get $ vehicleManufacturer vehicle)
                                    &lt;*&gt; pure vehicle
  guard hasDiscount
</code></pre>

<p>The idea is that this will make these functions composable with the other <code>MaybeT ...</code> ones, and avoid the tedious <code>M.fromMaybe False &lt;$&gt; runMaybeT</code>.</p>

<p>In other words, in <code>MaybeT m Bool</code> there are two failure modes: One failing within the monad, and another returning <code>False</code>. If you know from the beginning that they're both equivalent, just collapse them instead of keeping the distinction.</p></li>
</ul>

<p><em>Disclaimer: I haven't tried to compile any of the above, so there might be syntax errors, but hopefully the meaning is clear.</em></p>
    </div>