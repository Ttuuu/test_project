<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't put implementation in header files</h2>

<p>You moved all of your code into header files. That's not what they are for. It is better to have only the declarations of the classes and functions in the .h files, and put the definitions of the functions in .cpp files. Compile your code using link time optimization (<code>-flto</code>) to ensure the compiler can still inline functions.</p>

<h2>Unnecessary namespace <code>Structures</code></h2>

<p>There is no need to have the namespace <code>Structures</code>. The classes inside it are already inside namespace <code>Npuzzle</code>. There is no benefit at all, and just adds more typing.</p>

<h2>Avoid overly generic names</h2>

<p>If I read something like <code>Structures::Container</code>, it doesn't tell me much. What kind of structure? What kind of container?</p>

<p>Also, don't use generic names that are already used for standard types, because that will cause a lot of confusion. Take for example <code>using set = std::priority_queue&lt;...&gt;</code> in Npuzzle.h. It is not even a set, it's a priority queue. I would avoid writing those aliases, especially since you only use them once or twice.</p>

<h2>Avoid passing a container and its size as arguments</h2>

<p>A container should know its own size. For example, if you write:</p>

<pre><code>someFunction(const Board b, const int n) {
    for (auto i = 0; i &lt; n *n; i++)
         do_something_with(b[i])
}
</code></pre>

<p>That could've been rewritten to:</p>

<pre><code>someFunction(const Board b) {
    for (auto element: b)
         do_something_with(element);
    }
}
</code></pre>

<p>In your case, your boards are <code>n * n</code>, and you need <code>n</code> often, and writing <code>sqrt(b.size())</code> is awkward. Maybe you can create a proper class for the board, that gives you access to <code>n</code> directly?</p>

<pre><code>struct board: public vector&lt;int&gt; {
    const int n;
    board(int n): vector&lt;int&gt;(n * n), n(n) {}
};
</code></pre>

<h2>Pass by reference where appropriate</h2>

<p>You are passing some variables by value, when it is more efficient to pass them by reference. For example, every time you call <code>findZero()</code> a copy of the <code>Board</code> is made. Just pass it by reference to avoid that overhead.</p>

<h2>Avoid calling <code>std::iota()</code> unnecessarily</h2>

<p>In <code>createBoard()</code>, you call <code>std::iota()</code> inside the do-while loop, but it only needs to be called once before the loop.</p>

<h2>What if <code>n &gt; 4</code>?</h2>

<p>Since your <code>encode()</code> function returns a 64-bit integer, you are limiting yourself to boards of up to 4 * 4 elements. So your code doesn't scale to bigger boards. Is this intentional? If not, you have to redesign this part to handle arbitrarily large boards.</p>
    </div>