<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Now, I fully congratulate you on the exercise - it's an interesting problem and I think a great learning opportunity.  However, to learn from this we must acknowledge it's shortcomings.</p>

<p>I think the biggest, most glaring issue for me is that this decomposes business logic beyond the simplest possible implementation!  Take a second and look at these three lines:</p>

<pre><code>    public static Pair DoFizz(this Pair data) =&gt; data.NewPair("Fizz " + data.Value);
    public static Pair DoBuzz(this Pair data) =&gt; data.NewPair(data.Value + " Buzz");
    public static Pair DoNumber(this Pair data) =&gt; data.NewPair(data.Key.ToString());
</code></pre>

<p>Now, why does 'Fizz' get prepended and yet 'Buzz' get suffixed?  Why does <code>DoNumber</code> simply take a brand new value?</p>

<p>Simple: there's an implicit dependency here between the business logic that has been obfuscated under the layers of fluent methods.</p>

<p>To put it another way, what happens if we change the order of these methods?  For example: <code>...Number(asynchronous).Fizz(asynchronous).Buzz(asynchronous)...</code>?  I think the results would not be what one would expect. </p>

<p>Other issues:</p>

<ul>
<li>There's to much focus on <em>what</em> you are doing, rather than <em>how</em> you are doing it.  You've decomposed the business logic... into separate, unreusable steps...rather than finding the common algorithm.</li>
</ul>

<p>One possible alternative solution would be to try and implement a case statement in Linq.  Something like:</p>

<pre><code>public IEnumerable&lt;T2&gt; Case&lt;T1, T2&gt;(Func&lt;T1, bool&gt; match, T2 result, Func&lt;T1, bool&gt; match2, T2 result2...)
</code></pre>

<ul>
<li>The code is incredibly hard to read (due to the above)... it took me a good 15 minutes, with access to the entire source, to understand what was happening.  KISS.

<ul>
<li>Take <code>public static IntEnum MakeIntArray(this int count, int start = 0) =&gt; Enumerable.Range(start, count);</code> - It doesn't return an Array, IntEnum is a confusing alias (especially as C# has 'enums' already), and it hides a method that C# developers are already familiar with.  </li>
</ul></li>
<li>The asynchronous... isn't asynchronous as others have mentioned.</li>
<li>It's not really LINQ - sure, it's Fluent and uses <code>IEnumerable&lt;T&gt;</code>'s... but it's not really extending the Query language to help me <em>query</em> things... it's just hardcoded business logic.  Think the difference between <code>.First(p =&gt; p.name)</code> and <code>.FirstName()</code>.</li>
</ul>

<p>To leave on a good note, I do think this is the beginning of a good idea:</p>

<pre><code>         public static string Combine(this StringEnum data) =&gt; string.Join(", ", data);
</code></pre>

<p>However, I'd call it <code>Join</code> and make it an alias of <code>String.Join</code>.  It's an operation that's generic, and I often find it useful.</p>
    </div>