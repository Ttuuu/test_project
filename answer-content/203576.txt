<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General Feedback</h1>

<h2>Large Methods</h2>

<p>Some of the class methods are really large - e.g. <code>ChessGame ::get_legal_moves_list()</code> which consumes ~150 lines. There is a lot of redundancy - especially in the code to assign <code>$directions_list</code>. That code should be moved out to a separate method. Generally whenever a method goes beyone ~10-15 lines you should consider refactoring it. In addition to readability it will also help with testing.</p>

<p>In that method, there are 4 calls to <code>ChessGame::add_slide_and_slidecapture_moves_to_moves_list()</code> and those could all likely be simplified to a single call whenever the piece type is <code>bishop</code>, <code>rook</code>, <code>queen</code> or <code>king</code>. </p>

<pre><code>//the array below could be stored in a constant - e.g. CAPTURABLE_PIECE_TYPES
else if ( in_array($piece-&gt;type, array('bishop', 'rook', 'queen', 'king')) {
    //getDirectionsListForPiece is a method that could accept the piece object, or it may be simpler to pass $piece-&gt;type
    $directions_list = $this-&gt;getDirectionsListForPiece($piece); 
    $moves = $this-&gt;add_slide_and_slidecapture_moves_to_moves_list($directions_list, 7, $moves, $piece, $color_to_move, $board);
}
</code></pre>

<p>Because <code>$directions_list</code> doesn't appear to be used later in that method, perhaps it could be removed from the list of arguments for all methods that accept it, and those methods could fetch it when necessary.</p>

<h3>Redundancies</h3>

<p>Looking at those methods like  <code>ChessGame::get_squares_in_these_directions()</code>, <code>ChessGame::add_capture_moves_to_moves_list()</code>, <code>ChessGame::add_slide_and_slidecapture_moves_to_moves_list()</code> we see the array <code>$xy</code> declared - sometimes even in a <code>foreach</code> loop!:</p>

<pre><code>$xy = array(
    'north' =&gt; array(0,1),
    'south' =&gt; array(0,-1),
    'east' =&gt; array(1,0),
    'west' =&gt; array(-1,0),
    'northeast' =&gt; array(1,1),
    'northwest' =&gt; array(-1,1),
    'southeast' =&gt; array(1,-1),
    'southwest' =&gt; array(-1,-1)
);
</code></pre>

<p>This goes against the <strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself principle (i.e. <strong>D.R.Y</strong>). It would be wise to put that initial value in a constant - maybe even store the value after it is flipped (via <code>ChessGame::convert_from_xy_to_rankfile()</code>) in a static property...</p>

<p>Also in <code>ChessGame::try_to_make_square_using_rank_and_file_num()</code> there is an assignment of <code>$valid_squares</code> that is never modified and appears to be identical to <code>ChessSquare::VALID_SQUARES</code>. It would be wise to re-use that constant in <code>ChessGame::try_to_make_square_using_rank_and_file_num()</code></p>

<p>I see other redundancies, like whenever a <code>Dictionary()</code> object is created, it is typically passed an array like below:</p>

<pre><code>$file_letters = new Dictionary(array(
    1 =&gt; 'a',
    2 =&gt; 'b',
    3 =&gt; 'c',
    4 =&gt; 'd',
    5 =&gt; 'e',
    6 =&gt; 'f',
    7 =&gt; 'g',
    8 =&gt; 'h'
));
</code></pre>

<p>I see three occurrences where such an object is assigned to <code>$file_letters</code>- one in <code>ChessGame::try_to_make_square_using_rank_and_file_num()</code>, one in <code>ChessBoard::get_graphical_board()</code> and <code>ChessSquare::__construct()</code>, plus that array is used in <code>ChessBoard::number_to_file()</code>. It would be wise to store that array in a constant somewhere, and perhaps make one dictionary to be used in multiple places. There are multiple ways to handle that - e.g. a static property could be made on the game class and referenced wherever necessary, or a static method could be made on the game class that would utilize that static property. Though maybe you should evaluate if it is worth having a separate Dictionary class with a single method - maybe it would be simpler just to have a (static) method somewhere that would handle that functionality...</p>

<p>For more tips on cleaning up code, check out <a href="https://www.youtube.com/watch?v=GtB5DAfOWMQ&amp;t=2910s" rel="nofollow noreferrer">this video of a presentation Rafael Dohms talk about cleaning up code</a> (or <a href="https://www.slideshare.net/rdohms/bettercode-phpbenelux212alternate/18-public_function_createPostrequest_entity_new" rel="nofollow noreferrer">see the slides here</a>).</p>

<h2>Exception Handling</h2>

<p>Exceptions are thrown but never caught. Currently if an exception is thrown, that is displayed to the user, like the one I see when I change the URL of a move: </p>

<blockquote>
  <p><strong>Fatal error</strong>: Uncaught exception 'Exception' with message 'ChessBoard Class - Invalid FEN' in /home/clania/clania.net/admiraladama/chess_v2/ChessBoard.php:54 Stack trace: #0 /home/clania/clania.net/admiraladama/chess_v2/index.php(23): ChessBoard-&gt;set_fen('rnbqkbnr/pppp1p...') #1 {main} thrown in <strong>/home/clania/clania.net/admiraladama/chess_v2/ChessBoard.php</strong> on line <strong>54</strong></p>
</blockquote>

<p>Ideally those would be handled - perhaps in Index.php with a <code>try</code>/<code>catch</code> that may set the value of an error variable and the view would display that error message instead of the board. </p>

<h3>PHP mixed within HTML</h3>

<p>Generally it is best to separate the business logic (PHP) from the view (HTML). Using a template engine could help for this aspect - e.g. <a href="https://www.smarty.net/" rel="nofollow noreferrer">Smarty</a>, <a href="https://twig.symfony.com/" rel="nofollow noreferrer">Twig</a>, etc. For more information on this topic, prefer to <a href="http://thisinterestsme.com/mixing-php-html/" rel="nofollow noreferrer">this article</a>.</p>

<h3>Form submission method</h3>

<p>Did you consider using <code>post</code> for the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method" rel="nofollow noreferrer">form method</a>? If the form was submitted as POST requests, then the form variables would not be in the query string, and the user might be less apt to modify them. The effect would be that on the server side <a href="http://php.net/manual/en/reserved.variables.post.php" rel="nofollow noreferrer"><code>$_POST</code></a> would need to be used instead of <code>$_GET</code>.</p>

<h1>More Specific points</h1>

<h2>PHP</h2>

<h3>Declaring Instance/Member variables</h3>

<p>The class definitions appear to use the PHP 4 style declarations for instance variables (i.e. <code>var</code>). Note that while support of this syntax isn't currently deprecated, it may be in the future:</p>

<blockquote>
  <p><strong>Note</strong>: The PHP 4 method of declaring a variable with the <code>var</code> keyword is still supported for compatibility reasons (as a synonym for the public keyword). In PHP 5 before 5.1.3, its usage would generate an <strong><code>E_STRICT</code></strong> warning.<sup><a href="http://php.net/manual/en/language.oop5.visibility.php#language.oop5.basic.class.class.name" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<h3>Getting the timestamp with microseconds</h3>

<p>Index.php starts with the following lines:</p>

<blockquote>
<pre><code>$time = microtime();
$time = explode(' ', $time);
$time = $time[1] + $time[0];
$start = $time;
</code></pre>
</blockquote>

<p>Some would argue that readability suffers here because on the first line, <code>$time</code> is a string, then on the second line it is an array and then on the third line it is a string again.  </p>

<p>This appears to function identically to the <a href="http://php.net/manual/en/function.microtime.php#example-2812" rel="nofollow noreferrer">Example 1: Example #1 Timing script execution with microtime()</a>  on the PHP Documentation for <a href="http://php.net/manual/en/function.microtime.php" rel="nofollow noreferrer"><code>microtime()</code></a>. Notice that the function in that example contains the comment:</p>

<blockquote>
<pre><code>/**
 * Simple function to replicate PHP 5 behaviour
 */
</code></pre>
</blockquote>

<p>And notice <a href="http://php.net/manual/en/function.microtime.php#example-2813" rel="nofollow noreferrer">the next example</a> is titled <strong>Example #2 Timing script execution in PHP 5</strong>, where it simply calls <code>microtime()</code> with <code>true</code> for the parameter <a href="http://php.net/manual/en/function.microtime.php#refsect1-function.microtime-parameters" rel="nofollow noreferrer"><code>get_as_float</code></a>. So instead of using those first three lines of Index.php could simply be replaced with the call to <code>microtime(true)</code> for the same functionality.</p>

<pre><code>$start = microtime(true);
</code></pre>

<p>The same applies to the identical code within View.php.</p>

<h3>Error Reporting</h3>

<p>Index.php also contains the following line: </p>

<pre><code>error_reporting(-1);
</code></pre>

<p>According to the code in <a href="http://php.net/manual/en/function.error-reporting.php#example-494" rel="nofollow noreferrer"><strong>Example #1 error_reporting() examples</strong></a> in the documentation for <a href="http://php.net/manual/en/function.error-reporting.php#example-494" rel="nofollow noreferrer"><code>error_reporting()</code></a>, <a href="http://php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-all" rel="nofollow noreferrer"><code>E_ALL</code></a> can also be used for that (presuming the PHP version is 5.4 or greater - otherwise <a href="http://php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-strict" rel="nofollow noreferrer"><code>E_STRICT</code></a> won't be included in that so you could use <code>error_reporting(E_ALL | E_STRICT);</code>):</p>

<blockquote>
<pre><code>// Report all PHP errors (see changelog)
error_reporting(E_ALL);

// Report all PHP errors
error_reporting(-1);    
</code></pre>
</blockquote>

<p>Using the constant like that (i.e. <code>error_reporting(E_ALL);</code>) is more readable for anyone who doesn't remember what <code>-1</code> signifies when passed to that  </p>

<h2>JS</h2>

<p>I like how the drag and drop code is effective and concise - typically such code ends up being overly-complex. And I often recommend DOM references (e.g. <code>$('#make_move')</code> be stored in a variable (or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> if <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> is used) but there are so few of them and most of the moves require a page-load that it likely wouldn't be worth it.</p>

<h3>DOM ready function</h3>

<p><a href="http://api.jquery.com/ready/" rel="nofollow noreferrer">the documentation for <code>.ready()</code></a> states:</p>

<blockquote>
  <p>jQuery offers several ways to attach a function that will run when the DOM is ready. All of the following syntaxes are equivalent:</p>
  
  <ul>
  <li><code>$( handler )</code></li>
  <li><code>$( document ).ready( handler )</code></li>
  <li><code>$( "document" ).ready( handler )</code></li>
  <li><code>$( "img" ).ready( handler )</code></li>
  <li><code>$().ready( handler )</code></li>
  </ul>
  
  <p>As of jQuery 3.0, only the first syntax is recommended; the other syntaxes still work but are deprecated.<sup><a href="http://api.jquery.com/ready/" rel="nofollow noreferrer">2</a></sup></p>
</blockquote>

<p>So the first line of the JavaScript file:</p>

<blockquote>
<pre><code>$(document).ready(function(){
</code></pre>
</blockquote>

<p>Can be simplified to:</p>

<pre><code>$(function(){
</code></pre>

<h2>CSS</h2>

<h3>Simplification of <code>padding</code> for status box</h3>

<p>The four padding styles can be simplified from:</p>

<blockquote>
<pre><code>padding-top: 2px;
padding-bottom: 2px;
padding-left: 4px;
padding-right: 4px;
</code></pre>
</blockquote>

<p>To the following:</p>

<pre><code>padding: 2px 4px;
</code></pre>

<p>Because:</p>

<blockquote>
  <p>When two values are specified, the first padding applies to the <strong>top and bottom</strong>, the second to the <strong>left and right</strong>.   <sup><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding#Syntax" rel="nofollow noreferrer">3</a></sup></p>
</blockquote>

<p><sup>1</sup><sub><a href="http://php.net/manual/en/language.oop5.visibility.php#language.oop5.basic.class.class.name" rel="nofollow noreferrer">http://php.net/manual/en/language.oop5.visibility.php#language.oop5.basic.class.class.name</a></sub><br>
<sup>2</sup><sub><a href="http://api.jquery.com/ready/" rel="nofollow noreferrer">http://api.jquery.com/ready/</a></sub><br>
<sup>3</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding#Syntax" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/CSS/padding#Syntax</a></sub></p>
    </div>