<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>None of the proposed approaches in the question or in the answer are correct and fast at the same time.</p>

<p>If you want a portable high-performance way to access a byte array as 32-bit integers, you're looking for memcpy:</p>

<pre><code>static inline uint32_t get_int32(const void *buf)
{
  uint32_t res;
  memcpy(&amp;res, buf, sizeof(res));
  return res;
}
</code></pre>

<p>An optimizing compiler will notice this is a 32-bit load on a possibly unaligned location, and will generate code accordingly. At least on i386 and AMD64 architectures the generated code is extremely fast.</p>

<p>Any form of <code>reinterpret_cast</code> will be undefined behavior due to strict aliasing rules and possibly due to alignment constraints. <code>memcpy</code> accesses the array as a character array, and any type of array can be accessed as character array using the aliasing rules. Also, <code>memcpy</code> is not alignment-dependent.</p>

<p>Any form of bit-shifting and bitwise OR, although correct, is terribly slow.</p>

<p>If you want to do byte swap from little endian to big endian on a big endian machine, you should really take a hard look at <code>__builtin_bswap32</code>, supported on at least GCC. Your compiler may be different, so use <code>#ifdef</code> and <code>#if</code> compiler preprocessor directives to identify the compiler and use its builtin. Most compilers have some fast way to perform high-performance 32-bit byte swap.</p>

<p>However, usually data is in big-endian and you want to access it in host byte order whether it's little- or big-endian. Then <code>htonl</code> and <code>ntohl</code> help you. Note <code>htonl</code> and <code>ntohl</code> are platform-dependent, but most platforms provide them.</p>
    </div>