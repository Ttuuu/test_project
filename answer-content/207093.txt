<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review</h2>

<p>There is no need to close the file manually, it will be closed as part of the <code>std::ifstream</code>'s destructor.</p>

<p>Checking if line is comment could be simplified into checking the first character and <code>or</code>ing the result.</p>

<p>There is a <a href="https://en.cppreference.com/w/cpp/string/basic_string/find" rel="nofollow noreferrer">character overload of <code>std::string::find</code></a>, which is at least more precise in conveying intent.</p>

<p>In <code>getLong()</code>, <code>dict[key]</code> might be an empty string, and it is possible to find such value in ini file if the equal sign is the last character of the line. As such, it is uncertain what the function should do, but I guess current implementation does the least surprising thing.</p>

<p><code>int</code> sometimes might be a bit too small, <code>std::size_t</code> is the current default for index type. There are gossips about <code>std::index</code> coming, but it doesn't seem to be near future.</p>

<p>If the code accepts a raw pointer, one should expect to get a <code>nullptr</code> until otherwise documented. My first impression would be that I could pass <code>nullptr</code> to check if there is a long with that key, but in reality the world will come to its end, in the best scenario.</p>

<h2>Interface</h2>

<p>I'd prefer to accept <code>std::istream&amp; input_stream</code> in the constructor, rather than a file name, but it is purely subjective opinion with current context.</p>

<p>Well, I'm uncertain how this class should be used. In my opinion, it should lean strongly on <em>open to extension, but close to modification</em> principle, as there might be multiple types serialized into ini file. I see multiple reasonable roads:</p>

<ol>
<li><p>Extension by inheritance</p>

<p>For this, <code>dict</code> must be <code>protected</code> member of the class. I don't see much benefits of this approach, other than being more intuitive to beginner C++ programmers only accustomed to raw object oriented programming. This might open pandora's box, and lead to things like diamonds of death, object slicing, wrong <code>reinterpret_cast</code>s and whatnot. But correct code will still be hiding inside :)</p></li>
<li><p>Making whole thing a function returning <code>dict</code></p>

<p>This approach is for those who like doing things themselves, but for most this will be a downgrade.</p></li>
<li><p>Template metaprogramming, which will scare away most of the maintainers</p>

<p>Until chariot of Helios, concepts, arrive, we have to fight the darkness using SFINAE.</p>

<pre><code>template &lt;typename T, typename = std::enable_if_t&lt;std::is_constructible_v&lt;T, const std::string&amp;&gt;, void&gt;
std::optional&lt;T&gt; ini_cast(const std::string&amp; key) {
    auto key_location = dict.find(key);
    if (key_location == dict.end()) {
        return {};
    }

    return T(key_location-&gt;second);
}

template &lt;typename Transformator&gt; //free? SFINAE on decltype :)
decltype(std::declval&lt;Transformator&gt;()(std::declval&lt;const std::string&amp;&gt;())) transform_value(const std::string&amp; key, Transformator&amp;&amp; transformator) {
    auto key_location = dict.find(key);
    if (key_location == dict.end()) {
        //throw?
    }

    return transformator(key_location-&gt;second);            
}
</code></pre>

<p>The code above is just a sketch, it might not work at all, but hopefully illustrates the rigorous work needed to make it work the way people expect. </p></li>
</ol>

<p><s>As noted by <a href="https://codereview.stackexchange.com/users/75307/toby-speight">@TobySpeight</a>, using ADL and calling free function might be a good option too. We'll lose invoke type deduction, but hopefully it will just return <code>T</code>.</s> Read Tobyâ€™s answer, the part about opening for extension.</p>
    </div>