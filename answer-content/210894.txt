<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This function:</p>

<pre><code>def get_csv_header(top_numb):
    fieldnames = ['Hashtag','Active Days Ago','Post Count','AVG. Likes','MAX. Likes','MIN. Likes','AVG. Comments','Hashtag URL','Post Ready Tag']
    return fieldnames
</code></pre>

<p>has a few issues. <code>top_numb</code> is unused, so delete it. You can both construct and return the list in the same statement, but due to its length I suggest that you add some linebreaks in that list. Finally: per <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" rel="noreferrer">Python 3 docs</a>, <code>fieldnames</code> must be a sequence but needn't be a list - so make this a tuple <code>()</code> and not a list <code>[]</code> because the data are immutable.</p>

<p>Otherwise:</p>

<h2>Remove redundant <code>return</code>s</h2>

<p>i.e. the no-op <code>return</code> seen in <code>write_csv_header</code>.</p>

<h2>Make a <code>main</code> function</h2>

<p>...for all of your global code, for a couple of reasons - to clean up the global namespace, and to make your code callable as a library for other applications.</p>

<h2>Use f-strings</h2>

<p>...for strings like this:</p>

<pre><code>data_filename = 'Hashtag Scrape ' + timestamp + '.csv'
</code></pre>

<p>that can be:</p>

<pre><code>data_filename = f'Hashtag Scrape {timestamp}.csv'
</code></pre>

<h2>Write more subroutines</h2>

<p>The bulk of your logic within the main <code>for keyword in keywords</code> loop is quite long. Break this up into several subroutines for legibility and maintainability.</p>

<h2>Use <code>requests</code></h2>

<p>You're calling into <code>urllib.request.Request</code>, but there's usually no good reason to do this. Use <code>requests</code> instead, which is better in nearly every way.</p>

<h2>Apply a linter</h2>

<p>This will catch non-PEP8 whitespace (or lack thereof) such as that seen in this statement:</p>

<pre><code>if len(proxies)!=0:
</code></pre>

<h2>Imports at the top</h2>

<p>In the middle of your source, we see:</p>

<pre><code>import datetime
from dateutil import relativedelta
post_datetime = datetime.datetime.fromtimestamp(most_recent_post).strftime('%Y-%m-%d %H:%M:%S')
post_cleandate = datetime.datetime.fromtimestamp(most_recent_post).strftime('%Y-%m-%d')
from datetime import datetime, date
</code></pre>

<p>It's usually considered better practice to do all of your imports at the top of the source file.</p>

<h2>Don't declare indices that you don't use</h2>

<p>This loop:</p>

<pre><code>i = avg_post_likes = 0
while i &lt;=x-1:
    # ...
    i += 1
</code></pre>

<p>should be</p>

<pre><code>for _ in range(x):
    # ...
</code></pre>

<p>You also need a better name for <code>x</code>.</p>

<h2>Use <code>dict.update</code></h2>

<p>This code:</p>

<pre><code>        post_info["Hashtag"] = hashtag_name
        post_info["Active Days Ago"] = posted_days_ago
        post_info["Post Count"] = post_count
        post_info["AVG. Likes"] = round(sum(likes_value)/len(likes_value),2)
        post_info["MAX. Likes"] = max(likes_value)
        post_info["MIN. Likes"] = min(likes_value)
        post_info["AVG. Comments"] = round(sum(comments_value)/len(comments_value),2)
        post_info["Hashtag URL"] = hashtag_url
        post_info["Post Ready Tag"] = post_ready_tag
</code></pre>

<p>can be greatly simplified by use of <code>update</code>:</p>

<pre><code>post_info.update({
    'Hashtag': hashtag_name,
    'Active Days Ago': posted_days_ago,
    # ...
</code></pre>

<h2>Use context management</h2>

<p>You were doing so well elsewhere in the file! But then we see this:</p>

<pre><code>data = open(data_filename, 'r',encoding='utf-8')
target = open(destination, 'w',encoding='utf-8')
</code></pre>

<p>Those should also use <code>with</code>. You can keep the indentation from getting out-of-control by writing more subroutines.</p>
    </div>