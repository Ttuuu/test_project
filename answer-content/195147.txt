<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have following concern about this structure:</p>

<ul>
<li>The <code>ViewHolder</code> keeps the layout logic, which shouldn't</li>
<li>You define the <code>ViewHolder</code> as the inner class of the Adapter. It's not a good idea</li>
</ul>

<p>You don't provide the adapter code so problems I found only in the <code>ViewHolder</code></p>

<p><strong>The reason is:</strong></p>

<p>The <code>ViewHolder</code> is just the holder of the inflated view. It should only contain the views, maybe some simple UI logic, but not the logic. The logic should be placed in the Adapter instead, it has all the necessary data, viewType, position and others method to construct the logic. An inner <code>ViewHolder</code> will create too many references since an inner class always has reference to its parent during its existence. It should be a stand-alone class, you can define your <code>ViewHolder</code> just like this:</p>

<pre><code>public static class ViewHolder extends RecyclerView.ViewHolder {
    public TextView vehicles;
    public TextView vehicle_type;
    public TextView vehicle_eta;
    public TextView timecard_no;
    public Button pass;

    public ViewHolder(View itemView) {
        super(itemView);

        vehicles = (TextView) itemView.findViewById(R.id.vehicle_no);
        vehicle_type = (TextView) itemView.findViewById(R.id.vehicle_type);
        vehicle_eta = (TextView) itemView.findViewById(R.id.vehicle_eta);
        timecard_no = (TextView) itemView.findViewById(R.id.timecard_no);
        pass = (Button) itemView.findViewById(R.id.pass_vehicle);
    }
}

public class MyAdapter extends RecyclerView.Adapter&lt;ViewHolder&gt; {

    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(getContext()).inflate(R.layout. vehicle_status, parent, false);
        return new ViewHolder(v);
    }

    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        // Put all the logic, access the holder view to update its data
        // Call holder.vehicles to access the ViewHolder vehicles view here
    }

    // Other implementations...
}
</code></pre>
    </div>