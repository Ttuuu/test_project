<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there a better way than these two methods?And are these methods complex?</p>
</blockquote>

<p>There are better methods, and although not that complex, few people would be able to develop such methods (such as Lucas sequence relations) on their own without relying on some reference.</p>

<p>For the recursive version shown in the question, the number of instances (calls) made to fibonacci(n) will be 2 * fibonacci(n+1) - 1. </p>

<p>As for better methods, Fibonacci(n) can be implemented in O(log(<em>n</em>)) time by raising a 2 x 2 matrix =  {{1,1},{1,0}} to a power using exponentiation by repeated squaring, but this takes 12 variables. This can be reduced to 5 variables using a method based on Lucas sequence relations.</p>

<p>Example code; <em>c</em> and <em>d</em> are used for the repeated squaring, while <em>a</em> and <em>b</em> are the cumulative results and end up as a = fib(n+1), b = fib(n).</p>

<p>Note: older compilers may be missing <code>&lt;inttypes.h&gt;</code> or <code>&lt;stdint.h&gt;</code>. If <code>&lt;inttypes.h&gt;</code> is not present (Visual Studio 2010), use compiler specific format string for <code>uint64_t</code>. If <code>&lt;stdint.h&gt;</code> is not present (Visual Studio 2005), use <code>typedef ... uint64_t</code> (usually <code>unsigned long long</code>) and the appropriate format string.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;inttypes.h&gt;

uint64_t fib(uint64_t n)
{
    uint64_t a, b, c, d;
    a = d = 1;
    b = c = 0;
    while (1) {
        if (n &amp; 1) {
            uint64_t ad = a*d;
            a = ad + a*c + b*d;
            b = ad + b*c;
        }
        n &gt;&gt;= 1;
        if (n == 0)
            break;
        {
            uint64_t dd = d*d;
            d = dd + 2 * d*c;
            c = dd + c*c;
        }
    }
    return b;
}

int main(void)
{
    uint64_t n;
    for (n = 0; n &lt;= 93; n++)
        printf("%20" PRIu64 " %20" PRIu64 "\n", n, fib(n));
    return 0;
}
</code></pre>

<hr>

<p>The code is based on Lucas sequence relations for Fibonacci numbers.</p>

<p><a href="https://en.wikipedia.org/wiki/Lucas_sequence#Other_relations" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Lucas_sequence#Other_relations</a></p>

<p>Specifically these equations:</p>

<pre><code>F(m)   = F(m-1) + F(m-2)
F(m+n) = F(m+1) F(n) + F(m) F(n-1)
F(2n)  = F(n) L(n) = F(n) (F(n+1) + F(n-1))
       = F(n)((F(n) + F(n-1)) + F(n-1))
       = F(n) F(n) + 2 F(n) F(n-1)
</code></pre>

<p>Initial state:</p>

<pre><code>a = F(1) = 1
b = F(0) = 0
c = F(0) = 0
d = F(1) = 1
</code></pre>

<p>n is treated as the sum of powers of 2: 2^a + 2^b + ... 
for each iteration <em>i</em> (starting from 0), let p = 2^i, then </p>

<pre><code>c = F(p-1)
d = F(p)
</code></pre>

<p>To advance to the next iteration, c and d are advanced to F(next power of 2):</p>

<pre><code>d' = F(2p) = F(p) F(p+1) + F(p) F(p-1)
   = F(p)(F(p) + F(p-1)) + F(p) F(p-1)
   = F(p) F(p) + F(p) F(p-1) + F(p) F(p-1)
   = F(p) F(p) + 2 F(p) F(p-1)
   = d d + 2 c d

c' = F(2p-1) = F(p+p-1) = F(p+1) F(p-1) + F(p) F(p-2)
   = (F(p) + F(p-1)) F(p-1) + F(p) (F(p) - F(p-1))
   = F(p) F(p-1) + F(p-1) F(p-1) + F(p) F(p) - F(p) F(p-1)
   = F(p) F(p) + F(p-1) F(p-1)
   = d d + c c
</code></pre>

<p>During the calculation of a and b, let <em>m</em> = current cumulative sum of bits of n:</p>

<pre><code>b = F(m)
a = F(m+1)
</code></pre>

<p>To update a and b for 1 bits in n corresponding to <em>p</em> = current power of 2:</p>

<pre><code>a' = F(m+1+p) = F(m+2) F(p) + F(m+1) F(p-1)
   = (F(m+1)+F(m)) F(p) + F(m+1) F(p-1)
   = F(m+1) F(p) + F(m) F(p) + F(m) F(p-1)
   = a d + b d + b c

b' = F(m+p) = F(m+1) F(p) + F(m) F(p-1)
   = a d + b c
</code></pre>

<hr>

<p>Note that if b' is the max value for uint64_t, a' will overflow, but it's not an issue. However, the algorithm can be modified so that when completed, a = fib(n-1):</p>

<pre><code>a = fib(-1) = 1
b = fib(0)  = 0

a = fib(m-1)
b = fib(m)

b' = fib(m+p)
   = fib(m+1)fib(p) + fib(m)fib(p-1)
   = (fib(m) + fib(m-1))fib(p) + fib(m)fib(p-1)
   = fib(m)fib(p) + fib(m-1)fib(p) + fib(m)fib(p-1)
   = bd           + ad             + bc

a' = fib(m-1+p)
   = fib(m)fib(p) + fib(m-1)fib(p-1)
   = bd           + ac

uint64_t fib(uint64_t n)
{
    uint64_t a, b, c, d;
    a = d = 1;
    b = c = 0;
    while (1) {
        if (n &amp; 1) {
            uint64_t bd = b*d;
            b = bd + a*d + b*c;
            a = bd + a*c;
        }
        n &gt;&gt;= 1;
        if (n == 0)
            break;
        {
            uint64_t dd = d*d;
            d = dd + 2*d*c;
            c = dd + c*c;
        }
    }
    return b;
}
</code></pre>
    </div>