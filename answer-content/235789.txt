<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Parameter for sorting the data (ASC, DESC)</strong></p>

<p>If the task actually used 'ASC', 'DESC', then I'd say that there's a good chance they were expecting you to use an <code>enum</code> to make it easy to select the sort type.  If not, then personally I'd have preferred a <code>boolean</code> for the <code>ascending</code> parameter.  Using magic numbers like '1' to indicate sorting direction is going to be a potential source of mistakes going forward, no matter what your JavaDoc says.  It's not intuitive that '-1', '0' and '2' all sort descending whilst '1' sorts ascending.</p>

<p><strong>Filtering</strong></p>

<p>Both of your filter methods do essentially the same thing.  The difference being that one filters by key and the other by value.  If you want to filter by key + value, then you have to call one filter, then the other, creating temporary maps at each interim step.  It seems like the complexity that you're really trying to hide here is the stream + collect steps.  Going down this route I'd have been tempted to use a <code>BiPredicate</code> instead and pass both the key + value from each <code>EntrySet</code> to the predicate.  This would allow the client to decide what they wanted to filter by (key, value or both).  Something like:</p>

<pre><code>private static &lt;K, V&gt;Map&lt;K,V&gt; filter(Map&lt;K,V&gt;map, BiPredicate&lt;K,V&gt; filterPredicate) {
    return map.entrySet()
            .stream()
            .filter(e-&gt;filterPredicate.test(e.getKey(), e.getValue()))
            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
</code></pre>

<p><strong>Naming</strong></p>

<p>It's also worth noting that naming is reasonably important... One of your examples is:</p>

<pre><code>Map&lt;String, Integer&gt; filterNames = FilterMap.filterByKey(firstNames, 
                                                   value -&gt; value.matches("(?i).*as.*"));
</code></pre>

<p>So, you're calling <code>filterByKey</code> with a lambda parameter <code>value</code>.  This isn't terrible, but since you also have a method <code>filterByValue</code>, I think it can create confusion i.e. did you mean to call <code>filterByKey</code> or <code>filterByValue</code>.  If you're using a proper name for the lambda parameter, try to make sure it matches what you're expecting to be passed into the lambda (in this case key).  If you are just saying it takes <code>someValue</code> then it's usually better to just use a single letter like <code>x-&gt;</code>.</p>
    </div>