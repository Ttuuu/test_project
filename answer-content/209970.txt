<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is enormously bloated and complicated for what it does. The score of each frame can be calculated in a simple loop, nicely encapsulated in a static method or extension method.</p>

<pre><code>public static IEnumerable&lt;int&gt; Scores(this IList&lt;int&gt; pins)
{
    // Walk the list in steps of two rolls (= one frame)
    for (int i = 0; i + 1 &lt; pins.Count; i += 2)
    {
        // Neither strike nor spare
        if (pins[i] + pins[i + 1] &lt; 10)
        {
            yield return pins[i] + pins[i + 1];
            continue;
        }

        // Score can only be determined if third roll is available
        if (i + 2 &gt;= pins.Count)
            yield break;

        yield return pins[i] + pins[i + 1] + pins[i + 2];

        // In case of strike, advance only by one
        if (pins[i] == 10)
            i--;
    }
}
</code></pre>

<p>The required interface can then be implemented in a small wrapper class.</p>

<pre><code>public class Bowling
{
    private List&lt;int&gt; pins = new List&lt;int&gt;();

    public void Roll(int n) =&gt; pins.Add(n);

    public int Score() =&gt; pins.Scores().Take(10).Sum();
}
</code></pre>
    </div>