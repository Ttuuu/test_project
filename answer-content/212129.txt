<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Micro-optimisation</h3>

<p>AJNeufeld's answer removes two multiplications and a <code>min</code> from <code>shortest-cuboid-dist-has-int-length?</code>. The next step, which is a much bigger rewrite, is to remove the remaining multiplications.</p>

<p>Suppose you have cached the value of <span class="math-container">\${len}^2(dim, i, j) = {dim}^2 + i^2 + j^2 + 2ij\$</span>. Now you increment <span class="math-container">\$j\$</span>: <span class="math-container">\$j' = j + 1\$</span>. Then <span class="math-container">$$\begin{eqnarray}{len}^2(dim, i, j') &amp;=&amp; {dim}^2 + i^2 + j'^2 + 2ij' \\
&amp;=&amp; {len}^2({dim}, i, j) + 2(i + j) + 1 \\
&amp;=&amp; {len}^2({dim}, i, j) + 2(i + j') - 1\end{eqnarray}$$</span>
So instead of five multiplications you only need one.</p>

<p>Similar caching of <span class="math-container">\${len}^2(dim, i, 1)\$</span> allows you to optimise the calculation of <span class="math-container">\${len}^2(dim, i+1, 1)\$</span>, and caching <span class="math-container">\${len}^2(dim, 1, 1)\$</span> allows you to optimise the calculation of <span class="math-container">\${len}^2(dim+1, 1, 1)\$</span>.</p>

<hr>

<h3>Algorithmic optimisation</h3>

<p>I don't want to go into too much detail here because I'm conscious of the ethos of Project Euler, but I think there are some things I can reasonably propose.</p>

<p>Rewrite as <span class="math-container">\${len}^2 = {dim}^2 + (i+j)^2\$</span> where <span class="math-container">\$2 \le i+j \le 2{dim}\$</span>. You could use a double loop rather than a triple one, and if you find a value <span class="math-container">\$2 \le s \le 2{dim}\$</span> for which <span class="math-container">\${dim}^2 + s^2\$</span> is a perfect square then increment the count of solutions by the number of integer values of <span class="math-container">\$i\$</span> for which <span class="math-container">\$1 \le i \le s - i \le dim\$</span>.</p>

<p>Then instead of looping over <span class="math-container">\${dim}\$</span> and <span class="math-container">\$s\$</span> and testing whether they're the shorter legs of a Pythagorean triple, you could look for a way to generate Pythagorean triples and test whether their shorter legs meet the constraints. With a good generation process this is probably the fastest option.</p>
    </div>