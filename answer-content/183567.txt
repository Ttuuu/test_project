<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Allow me to cite my answer from the Hackerrank <a href="https://www.hackerrank.com/challenges/crush/forum/comments/395339" rel="nofollow noreferrer">discussion</a>.</p>

<p><strong>Explanation:</strong></p>

<p>A straight forward implementation would start with an array \$s[i] = 0\$ for \$i \in \{ 1, \dotsc, n \}\$ and perform \$m\$ modifications, where the elements \$s[j]\$ for 
\$j \in \{ a_j, \dotsc, b_j \}\$ are getting the value \$k_j\$ added.</p>

<p>This would need
    $$
\sum_{j=1}^m \lvert \{ a_j, \dotsc, b_j \} \rvert
\approx m \frac{n}{2}
$$
operations, so it is \$O(m n)\$. The constraints require to handle up to \$m=2\cdot 10^{5}\$ and \$n=10^7\$ resulting in about \$10^{12}\$ operations, which is outside the given resources.</p>

<p>The <a href="https://www.hackerrank.com/challenges/crush/forum/comments/69550" rel="nofollow noreferrer">above solution</a> manages to requires \$m\$ setup steps and a final integration step visiting not more than \$n\$ array elements, so it is \$O(\max\{m, n\})\$. For the constraints not more than about \$2\cdot 10^7\$ steps are needed, which is possible to compute with the given resources.</p>

<p><strong>In Detail:</strong></p>

<p>Let us start with the continuous case:</p>

<p>We start with a constant function \$s_0(t) = 0\$ and then add the \$m\$ modifications, going through a sequence of modified functions \$s_i(t)\$.</p>

<p>Given \$s_i(t)\$ and adding the value \$k\$ for all times \$t \in [a, b]\$, this results into the modified function
    $$
\begin{align}
s_{i+1}(t)
&amp;= s_i(t) + k \, \chi_{[a, b]}(t) \\
&amp;= s_i(t) + k \, \text{Rect}_{[a, b]}(t) \\
&amp;= s_i(t) + k \, \Theta(t-a) - k \, \Theta(t-b)
\end{align}
$$
where \$\chi_I\$ is the characteristic function of set \$I\$ and \$\Theta(t)\$ is the Heaviside distribution
    $$
\Theta(t) =
\begin{cases}
0 &amp; t &lt; 0 \\
1 &amp; t &gt; 0
\end{cases}
$$
The derivative is
    $$
\dot{s}_{i+1}(t) = \dot{s}_i(t) + k \delta(t-a) - k \delta(t-b)
$$
where \$\delta\$ is the Dirac distribution.</p>

<p>For the discrete case this seems to turn into
    $$
\Delta s_{i+1}[t] = \Delta s_i[t] + k \delta[t-a] - k \delta[t-b+1]
$$
with 
    $$
\delta [n] =
\begin{cases}
1 &amp; n = 0 \\
0 &amp; n \ne 0
\end{cases}
$$</p>

<p>So the modeling of the derivative \$\Delta s[t]\$ is very efficient, only recording the changes at the interval borders.</p>

<p>After \$m\$ modifications of the constant null function we get:
    $$
\Delta s[t] 
= \sum_{j=1}^m k_j \delta[t-a_j] - k_j \delta[t-b_j+1]
$$</p>

<p>Finally \$s\$ is reconstructed by summing up (integrating) \$\Delta s\$ over \$t\$:
    $$
s[t] = \sum_{\tau=1}^t \Delta s[\tau]
$$
where we used \$t_\min = 1\$ as smallest value.</p>
    </div>