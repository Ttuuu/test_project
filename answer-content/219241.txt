<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no reason for DI here because <strong><code>Person</code> is not a service</strong>. It doesn't provide any  functionality that you need to do other things. It's the data that the APIs are build for. </p>

<p>This means that you should <strong>choose the 2nd version</strong> with their pure methods.</p>

<hr>

<p>However, there is a <strong>3rd option</strong>...</p>

<p>You can split all three methods into their own services and have:</p>

<pre><code>public class FullNameService : INameService { ... }
public class FullNameWithTitleService : INameService { ... }
public class FirstLastNameService : INameService { ... }
</code></pre>

<p>where all implement an interface like this one</p>

<pre><code>public interface INameService
{
    string CreateName(Person person);
}
</code></pre>

<p>With such a design you would have even <strong>more freedom in adding and testing new services</strong> and they wouldn't affect each other.</p>

<hr>

<p>No matter which solution you pick, you should always have some abstraction for the service (<strong>abstract class</strong> or <strong>interface</strong>). Without abstraction DI is pretty pointless because you cannot easily exchange the service and use an improved, different or even a test version.</p>
    </div>