<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function <code>facCount</code>, which should be called something like <code>count_factors</code>, according to Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, can be greatly improved by noticing that if <code>num % i == 0</code>, then automatically <code>num % num / i == 0</code> (in other words, factors always come in pairs of two, except for if the number is a square, in which case you double count one). This means you only need to check factors up to \$\sqrt{n}\$:</p>

<pre><code>from math import sqrt

def count_factors(num):
    """Return the number of factors of `num`"""
    sum_ = 2 * sum(num % i == 0 for i in range(1, int(sqrt(num)) + 1))
    if int(sqrt(num))**2 == num:
        sum_ -= 1
    return sum_
</code></pre>

<p>I also added a <a href="http://www.pythonforbeginners.com/basics/python-docstrings" rel="nofollow noreferrer">docstring</a> describing what the function does in an accessible way.</p>

<p>The other improvement concerns the way you get the triangular numbers. While it is good to know Gauss formula, IMO it is here easier to manually calculate them. Your function needs to do one increment, one multiplication and one division, when all you really need is one addition per loop iteration:</p>

<pre><code>from itertools import count

def triangular_nums():
    """Yield the triangular numbers"""
    t = 0
    for i in count():
        t += i
        yield t
</code></pre>

<p>If, for some reason, you dislike <code>itertools</code>, you can also replace it with a <code>while True</code> loop.</p>

<p>In Python 3+, you can use the new function <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> (3.2+) and the new keyword combination <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer"><code>yield from</code></a> (3.3+), as mentioned in the comments by @MaartenFabr√©:</p>

<pre><code>from itertools import accumulate, count

def triangular_nums():
    yield from accumulate(count())
</code></pre>

<p>With this your <code>main</code> function (which you should either make a real function or at least put under an <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a>) becomes:</p>

<pre><code>def main():
    for t in triangular_nums():
        if count_factors(t) &gt; 500:
            return t

if __name__ == "__main__":
    ans = main()
    if ans is not None:
        print(ans)
</code></pre>

<p>The timing you should factor out and make into a <a href="https://www.thecodeship.com/patterns/guide-to-python-function-decorators/" rel="nofollow noreferrer">decorator</a>:</p>

<pre><code>import time

def timeit(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        ret = func(*args, **kwargs)
        print("--- %s seconds ---" % (time.time() - start))
        return ret
    return wrapper

@timeit
def main():
    ...
</code></pre>
    </div>