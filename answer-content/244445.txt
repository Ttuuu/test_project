<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><s>First and foremost, I don't really like the idea of an ajax login because imagine the user is on a public device and logs in then steps away from the computer and someone else pulls up to the browser, opens up the Developer tools &gt; Network &gt; XHR &gt; Headers and gets an eyeful of the login credentials that were sent off for logging in.  Is it a bit "tinfoil hat"? Is it the user's responsibility? Yeah, maybe, but there will be users that will be blissfully unaware of this vulnerability.  Once a bad actor can infiltrate the parts of your system that are password protected, they may be able to cause more significant trouble in the application. </s> See @Kazz's argument against my claim which I find correct and invalidates my concern.</p>
</li>
<li><p>I agree with @slepic, don't bother sanitizing user input.  If they are fouling up their submitted data and you "fix" it for them, then you may be damaging their UX because what they typed is not being entered into your system as they expected.</p>
</li>
<li><p>I prefer to write my file assets (includes / function declarations) at the top of my file unless there is a logical reason to postpone the deed.  Perhaps you don't want to load/declare certain assets until the user's submission has passed qualifying checkpoints.  In doing so, the "flow" of your script will be uninterrupted visually (to the human developer).</p>
</li>
<li><p>In all places where you are writing <code>== true</code>, just omit it.  The loose comparison on true is the same as the expression with the last 7 characters.</p>
</li>
<li><p>Combine <code>if(isset($_POST["userLoginSubmit"]) == true){ if(!isset($_SESSION["userID"])){</code><br>to become <code>if (isset($_POST["userLoginSubmit"]) &amp;&amp; !isset($_SESSION["userID"])) {</code>.</p>
</li>
<li><p>I don't see any reason to <code>return true|false</code> from your function call. I mean, the return value from <code>userLogin()</code> is never used for anything.  It probably makes better sense to <code>exit(json_encode($return));</code></p>
</li>
<li><p>I certainly hope that the <code>email</code> column in your table is a UNIQUE KEY because you wouldn't want multiple people sharing an identity.  Assuming so, there is reason to explicitly write <code>LIMIT 1</code>.</p>
</li>
<li><p>Your prepared statement looks okay. I'd probably not bother declaring the single-use variable -- I'd just write the sql string directly into the <code>prepare()</code> call.</p>
</li>
<li><p><code>connection</code> is a somewhat inappropriate description of the error. It might not be a connection error.  But either way, it is good that you are not sending the raw error to the user.</p>
</li>
<li><p>I don't think that I would bother with <code>rowCount()</code>, I'd just check if the fetched result set was <code>null</code>.</p>
</li>
<li><p>Simplify the <code>SESSION</code> declaration block like this:</p>
<pre><code>$_SESSION = [
    "userID" =&gt; $selectedData["userID"],
    "firstName" =&gt; $selectedData["firstName"],
    "lastName" =&gt; $selectedData["lastName"],
    "email" =&gt; $selectedData["email"],
];
</code></pre>
</li>
<li><p><code>$return["error"] = "success";</code> is an oxymoron.  I think it would be more sensible to set the value to <code>0</code> or <code>""</code> or <code>false</code>.  A falsey value will also make checking the value simpler in the javascript.</p>
</li>
<li><p>I don't see it in your question, but I hope you are calling <code>start_session()</code> somewhere.</p>
</li>
</ol>
    </div>