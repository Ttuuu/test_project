<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>According to letcode submissions tab:</p>

<pre><code>                                        Runtime   Memory
Original solution form the question      108 ms    25   MB
Solution from this answer (no recursion) 104 ms    26   MB
Solution form Martin R answer            100 ms    25.3 MB
Solution from this answer (recursive)     84 ms    24.7 MB
</code></pre>

<p><strong>Solution recursive</strong></p>

<pre><code>public class DiameterOfBinaryTreeClass
    {
        private int MaxD = 0;

        public int DiameterOfBinaryTree(TreeNode root)
        {
            Height(root);
            return MaxD;
        }

        private int Height(TreeNode root)
        {
            if (root == null)
            {
                return 0;
            }

            int l = Height(root.left);
            int r = Height(root.right);
            int d = l + r;
            if (d &gt; MaxD)
                MaxD = d;

            return Math.Max(l, r) + 1;
        }
    }
</code></pre>

<p><strong>No recursion solution:</strong></p>

<pre><code>private int MaxD = 0;

public int DiameterOfBinaryTree(TreeNode root) {
 Solve(root);
 return MaxD;
}

class CalcNode {
 public sbyte Direction;
 public int Left;
 public int Right;
 public TreeNode TreeNode;
}

private void Solve(TreeNode root) {
 if (root == null)
  return;

 var stack = new Stack &lt; CalcNode &gt; ();

 stack.Push(new CalcNode() {
  Direction = 0, Left = 0, Right = 0, TreeNode = root
 });
 HashSet &lt; TreeNode &gt; usedTreeNodes = new HashSet &lt; TreeNode &gt; ();

 while (stack.Count != 0) {
  TreeNode cur = stack.Peek().TreeNode;
  if (cur.left != null &amp;&amp; !usedTreeNodes.Contains(cur.left)) {
   stack.Push(new CalcNode() {
    Direction = -1, Left = 0, Right = 0, TreeNode = cur.left
   });
   continue;
  }

  if (cur.right != null &amp;&amp; !usedTreeNodes.Contains(cur.right)) {
   stack.Push(new CalcNode() {
    Direction = 1, Left = 0, Right = 0, TreeNode = cur.right
   });
   continue;
  }

  CalcNode removedNode = stack.Pop();
  usedTreeNodes.Add(removedNode.TreeNode);
  int d = removedNode.Left + removedNode.Right;
  if (d &gt; MaxD)
   MaxD = d;

  if (removedNode.Direction == 0)
   continue;

  CalcNode curCalcNode = stack.Peek();
  int removedNodeHeight = Math.Max(removedNode.Left, removedNode.Right) + 1;
  if (removedNode.Direction == 1)
   curCalcNode.Right += removedNodeHeight;
  else
   curCalcNode.Left += removedNodeHeight;
 }
}
}
</code></pre>
    </div>