<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The algorithm should be:</h3>

<ol>
<li>Lose any unimportant contest where doing so does not lose luck.</li>
<li>Win any contest where doing so does not lose luck.</li>
<li>Lose the up to <code>k</code> contests where winning would cost most luck.</li>
</ol>

<p>At the moment, you assume winning never gains luck and losing never loses luck.</p>

<p>You do a full sort each iteration for point 3, which with a cost of <span class="math-container">\$O(k*\log(k))\$</span> leads to <span class="math-container">\$O(n*k*\log(k))\$</span>.<br>
Using a fixed-length priority-queue instead only needs <span class="math-container">\$O(\log(k))\$</span> per insert / replace, resulting in <span class="math-container">\$O(n*\log(k))\$</span>, a factor of <span class="math-container">\$k\$</span> better.<br>
While C++ doesn't have exactly that, <a href="https://en.cppreference.com/w/cpp/header/algorithm" rel="nofollow noreferrer"><code>&lt;algorithm&gt;</code></a> provides <a href="https://en.cppreference.com/w/cpp/algorithm/pop_heap" rel="nofollow noreferrer"><code>pop_heap()</code></a> and <a href="https://en.cppreference.com/w/cpp/algorithm/push_heap" rel="nofollow noreferrer"><code>push_heap()</code></a> which is enough to replace the head if the new item is less expensive. A custom <code>replace_heap()</code> or exposed <code>down_heap()</code> would be slightly more efficient, but for that you <a href="https://stackoverflow.com/questions/32672474/how-to-replace-top-element-of-heap-efficiently-withouth-re-establishing-heap-inv">have to branch out</a>.</p>

<h3>Now the form:</h3>

<ol>
<li><p><code>&lt;bits/stdc++.h&gt;</code> is non-standard and likely far more than you actually need. Unless coupled with use of precompiled headers, it will slow down compilation at least, if not bloat the resulting executable. Replace it with the standard includes. See <a href="https://stackoverflow.com/questions/25311011/how-does-include-bits-stdc-h-work-in-c">"<em>How does #include &lt;bits/stdc++.h&gt; work in C++?</em>"</a>.</p></li>
<li><p>Never import wholesale any namespace which isn't designed for it. Doing so leads to conflicts, silent changes of behaviour, and generally brittle code. See <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">"<em>Why is “using namespace std” considered bad practice?</em>"</a>.</p></li>
<li><p>Don't use a <code>std::vector</code> if all you need is an array of statically-known length.<br>
Such overkill costs. Anyway, a <code>std::tuple&lt;int, bool&gt;</code> or <code>std::pair&lt;int, bool&gt;</code> would be an even better fit.</p></li>
<li><p>If one can rely on anything, it's that if there is a way to screw something up, it will be done, at the most inconvenient time. Like the input. As it is under the coders control, it isn't quite a fatal defect though.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code>.</p></li>
<li><p>Small trivial types like <code>char</code> should not be passed by constant reference without good reason, but by value. Doing so avoids the pitfalls of aliasing, and is slightly more efficient. Happily, the compiler should fix that by inlining.</p></li>
<li><p>Getting and storing input in the loop-condition is actually idiomatic. And it avoids error-prone repetition.<br>
This:</p>

<pre><code>size_t i = 0;
size_t pos = input_string.find(delimiter);

while (pos != string::npos) {
    splits.push_back(input_string.substr(i, pos - i));

    i = pos + 1;
    pos = input_string.find(delimiter, i);
}
</code></pre>

<p>Could simply be:</p>

<pre><code>for (size_t i = 0, pos; (pos = input_string.find(delimiter, i)) != string::npos; i = pos + 1)
    splits.push_back(input_string.substr(i, pos - i));
</code></pre></li>
<li><p>The final call to <code>.substr()</code> needlessly contains a complicated calculation for the second argument. Just leaving it out will do the right thing.</p>

<pre><code>splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));
</code></pre></li>
<li><p>As an aside, <code>split_string()</code> would be better off accepting a <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer"><code>std::string_view</code></a> and returning a <code>std::vector&lt;std::string_view&gt;</code>. Less allocation-overhead.</p></li>
<li><p>There is no reason to pass the contests by copy. Either move them, pass a constant reference, or preferably use a <a href="https://en.cppreference.com/w/cpp/container/span" rel="nofollow noreferrer"><code>std::span</code> (C++20 or GSL (Guideline Support Library))</a>.</p></li>
<li><p>Yes, there's no need to forward-declare functions defined before first use, which is a good thing. But above all, please try to be consistent which option you use.</p></li>
</ol>

<h3>Finally your code:</h3>

<ol>
<li><p>There's no reason at all to keep track of parts of the result-sum separately. Just combine them already.</p></li>
<li><p>Using <code>auto</code> instead of explicit types avoids errors and reduces clutter. Thus, <a href="https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/" rel="nofollow noreferrer">almost always <code>auto</code></a>. That also counts for the form.</p></li>
</ol>

<p>The rest was handled in the algorithm section.</p>

<h3>Using the better algorithm:</h3>

<pre><code>int luckBalance(int k, vector&lt;vector&lt;int&gt;&gt; contests) {
    // Keeping the bad interface because they force it
    auto r = 0;
    const auto heap = std::make_unique&lt;int[]&gt;(k);
    for (const auto&amp; x : contests) {
        if (!x[1] || x[0] &lt;= heap[0]) {
            r += std::abs(x[0]);
        } else {
            std::pop_heap(heap.get(), heap.get() + k, std::greater());
            r -= heap[k - 1];
            heap[k - 1] = x[0];
            std::push_heap(heap.get(), heap.get() + k, std::greater());
        }
    }
    return r;
}
</code></pre>

<p>Could be improved by not pre-filling the heap with zeroes, but I'm too lazy.</p>
    </div>