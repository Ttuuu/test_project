<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Algorithm Complexity</strong></p>

<p>Ignoring the Assumptions made (Case doesn't matter), the tests and other triviality mentioned in other answers... Something no one else has mentioned: Your algorithms actual complexity.</p>

<p>Your algorithm is 2N - which means that you run through the entire "givenString" twice. In a string of 1 million characters, you could go through 2 million iterations: assuming the non-repeater is at/near the end of list. You go through the string twice.</p>

<p>You can adjust your algorithm to go through the list 1N + M (M being distinct number of characters... 26 for letters only, no case... 52 for upper lower.)</p>

<p><strong>My Version</strong></p>

<p>In my version, I remove all extraneous temp variable - no need for anything except input string and tracking dictionary. I'm following your "assumption" that case doesn't matter, although adjusting that (removing the ToUpper) is simple enough.</p>

<p>In my version, I'm not "counting" characters. The dictionary has a "Key" character and "Value" of the "Index" of a value seen for the first time... or -1 meaning it's been seen twice.</p>

<p>At the end, remove/ignore all the -1s... and get the min value - and corresponding Key/Character. (I'm sure this could be made more efficient, but I'm more just spit-balling here. I could make the "-1" into "Length" and just get "Min value &gt; length" for example)</p>

<pre><code>    static void Main(string[] args)
    {
        Console.WriteLine($"Input: EeFd");
        Console.WriteLine($"Desired Result: F");
        Console.Write($"Actual Result: ");
        Console.WriteLine(FindFirstNonRepeatingCharacter("EeFd"));

        Console.ReadLine();
    }

    public static char FindFirstNonRepeatingCharacter(string givenString)
    {
        givenString = givenString.ToUpper();
        Dictionary&lt;char, int&gt; charCounter = new Dictionary&lt;char, int&gt;();

        for (int index = 0; index &lt; givenString.Length; index++)
        {
            var c = givenString[index].ToUpper();
            if (!charCounter.ContainsKey(c))
            {
                charCounter.Add(c, index);
            }
            else
            {
                charCounter[c] = -1;
            }
        }

        return charCounter.Where(kvp =&gt; kvp.Value != -1).OrderBy(kvp =&gt; kvp.Value).First().Key;
    }
</code></pre>

<p><strong>Final Thoughts</strong></p>

<p>For big strings, the difference between 2N and 1N+M would be non-trivial.</p>

<pre><code>2(1million) = 2million. 
1million + 26 = 1million and 26.
</code></pre>

<p>Add other tidbits from the other answers, but I'm willing to bet money this (and possible a bad assumption) are the "killers" for your answer.</p>

<p><strong>Further Thoughts</strong></p>

<p>I'd also try to add some short circuits for "easy" answers (0/1/2 length strings) and verification that the string isn't ALL duplicates.</p>

<pre><code>    static void Main(string[] args)
    {
        Console.WriteLine($"Input: EeFd");
        Console.WriteLine($"Desired Result: F");
        Console.Write($"Actual Result: ");
        Console.WriteLine(FindFirstNonRepeatingCharacter("EeFd"));

        Console.WriteLine($"Input: EEEE");
        Console.WriteLine($"Desired Result: ");
        Console.Write($"Actual Result: ");
        Console.WriteLine(FindFirstNonRepeatingCharacter("EEEE"));

        Console.ReadLine();
    }

    public static char FindFirstNonRepeatingCharacter(string givenString)
    {
        /* Short circut some small cases */
        if (givenString == null) return ' ';
        if (givenString.Length == 0) return ' ';
        if (givenString.Length == 1) return givenString[0];

        var charCounter = new Dictionary&lt;char, int&gt;();

        for (int index = 0; index &lt; givenString.Length; index++)
        {
            var c = givenString[index].ToUpper();
            if (!charCounter.ContainsKey(c))
            {
                charCounter.Add(c, index);
            }
            else
            {
                charCounter[c] = givenString.Length;
            }
        }

        var removeDuplicates = charCounter.Where(kvp =&gt; kvp.Value != givenString.Length);
        if (removeDuplicates.Any() != 0)
            return removeDuplicates.OrderBy(kvp =&gt; kvp.Value).First().Key;
        else
            return ' ';
    }
</code></pre>
    </div>