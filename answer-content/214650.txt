<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview, and greetings! Your code looks nice: it is well indented, mostly PEP8-conformant, and has clear names. I suspect you may not have spent enough time in Atlantic City or Las Vegas, however. ;-)</p>

<h3>Encapsulation</h3>

<p>You correctly guard your "main routine" code with <code>if __name__ == '__main__'</code> but you didn't bother to put all that code into a function. Please do so. Call it <code>main</code> if you like, but take the chance to wrap it all up into something that can be invoked from outside, for testing.</p>

<pre><code>def main():
    ''' Play one hand of blackjack. '''
    deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']*4
    player = []
    dealer = []
    standing = False
    first_hand = True
    deal(deck, player, dealer)
    while True:
        display_info(player, dealer, standing)
        results(player, dealer, first_hand, standing)
        hit_stand(deck, player, dealer, first_hand, standing)

if __name__ == '__main__':
    main()
</code></pre>

<p>Similarly, have a look at this:</p>

<pre><code>if choice == '1':
    player.append(deck.pop())
</code></pre>

<p>And this:</p>

<pre><code>while score(dealer) &lt;= 16:
    dealer.append(deck.pop())
</code></pre>

<p>What are you doing there? That seems like another opportunity to use a name to describe what's happening:</p>

<pre><code>if choice == '1':
    deal_card(shoe, player)

# ... and ...

while score(dealer) &lt;= 16:
    deal_card(shoe, dealer)
</code></pre>

<p>Also, what's <code>16</code>? Is that a <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic number</a>? Should it have a name? (Hint: yes!)</p>

<pre><code>while score(dealer) &lt;= DEALER_MINIMUM_SCORE:
    deal_card(shoe, dealer)
</code></pre>

<p>While we're looking at the <code>hit_stand</code> function, consider that it does two things:</p>

<pre><code>def hit_stand(deck, player, dealer, hand, stand):
    print("What would you like to do")
    print("[1] - Hit\n[2] - Stand")
    choice = input("&gt; ")

    ########## End of part 1, start of part 2 ##########

    hand = False
    if choice == '1':
        player.append(deck.pop())
    elif choice == '2':
        stand = True
        while score(dealer) &lt;= 16:
            dealer.append(deck.pop())
        display_info(player, dealer, stand)
        results(player, dealer, hand, stand)
</code></pre>

<p>First, it asks for user input. Then it tries to update the game state based on that input. That's one thing too many!</p>

<p>Create separate functions for separate things. I know it may seem pointless when some of those functions are one line long. But it represents a chance for you to "write" an explanation of what you are doing, and it also provides a place to make changes to the behavior.</p>

<p>Also, consider that when you "grow" this blackjack game you will <em>really want</em> places to add behavior. There are many more possibilities than "hit or stand" at the table!</p>

<p>And always remember, user input is unreliable! You have to validate it. What if I type "hit" or "stand" instead of 1 or 2?</p>

<h3>Control Flow</h3>

<p>You don't actually have an exit condition for your <code>while</code> loop. Instead, you are relying on calls to <code>sys.exit()</code> from lower in your code. That's not going to work for very long as your code complexity grows. Instead, why not create a boolean variable <code>still_playing = True</code> and use <code>while still_playing:</code> as your loop condition. Then you can change that value when it's appropriate.</p>

<p>And your program structure doesn't really resemble the flow of a blackjack game. At a blackjack table, the dealer deals starting cards to all the players, then each player "plays" their entire game, then the dealer "plays" according to his rules, then the results are evaluated. You jammed your "dealer plays" element into the <code>hit_stand</code> function. Pry it loose! Make your flow look more like the real flow of the table, and it will be easier to understand and easier to extend.</p>

<h3>Data Flow</h3>

<p>In Pascal, a programming language we used in that last millennium by training dinosaurs to interpret the statements for us, there were two kinds of subroutines, <strong>procedures</strong> and <strong>functions</strong>. The difference was that a function could return a value, while a procedure just executed statements with no returned result. That discrimination doesn't exist in Python: you can do either thing, but it all starts with <code>def</code>. Regardless, you seem to write only subroutines that do not return values. I think you should change that.</p>

<p>Creating and shuffling the deck is a place where a function could be put to good use, especially if you grow your game. Just write:</p>

<pre><code>shoe = new_shoe()
</code></pre>

<p>or later:</p>

<pre><code>shuffle_shoe(shoe)
</code></pre>

<p>(If you can't tell, this is heading towards a <code>Shoe</code> class. That will come in a much later review. Also: a <a href="https://en.wikipedia.org/wiki/Shoe_(cards)" rel="nofollow noreferrer">shoe</a> is what the dealer takes the cards from.)</p>

<p>Speaking of data, have a look at this:</p>

<pre><code>def hit_stand(deck, player, dealer, hand, stand):
    print("What would you like to do")
    print("[1] - Hit\n[2] - Stand")
    choice = input("&gt; ")
    hand = False
</code></pre>

<p>Notice that you take a <code>hand</code> parameter, do nothing with it, and then set it to False? What's up with that? The only thing you use it for is to pass it down to <code>results</code>, but you could just as well write <code>results(..., False, ...)</code> and not bother with the <code>hand</code> parameter.</p>

<p>Also, have a look at the <code>results</code> subroutine. You call it in the middle of the loop, right after displaying the hands. But you've divided showing the hands and evaluating them, when that's kind of the same thing. And you're ignoring the distinction between "showing the current situation" and "wrapping up the end of the game." I'd suggest that your checking for blackjack and for busting should go near where you deal the cards, and should update the loop control variable.</p>

<h3>Game Flow</h3>

<p>There are a few aspects of blackjack that you are missing, even at this simple level. First, check for and announce blackjack, for both the dealer and the player! If a player gets blackjack, there's no Hit/Stand question, there's only the question of whether the dealer pushes. And if the dealer gets blackjack, the game is over before it began. So check that first.</p>

<p>The obvious extras, like assigning and displaying card suits as well as ranks, multiple players, support for splits, doubling down, insurance, surrendering, etc., would all take you away from a "simple" blackjack game. But your code should be organized in such a way that it is simple to add those features!</p>

<h3>Update:</h3>

<p>To answer your question from the comments, </p>

<blockquote>
  <p>Also, how do I handle the choice variable in the second function if I split hit_stand() as you suggested? And how results() should look like after I make still_playing Boolean? </p>
</blockquote>

<p>Let's say <code>hit_or_stand</code> becomes a separate function. You would write something like:</p>

<pre><code>def hit_or_stand():
    while True:
        ans = input("Hit or stand? ").lower()
        if ans in ('hit', 'stand'):
            return ans

# In your main loop:

player_stands = False
while not player_stands:
    # stuff like before
    if hit_or_stand() == 'stand':
        player_stands = True

    if not player_stands:
        deal_one_card(shoe, player)
        if score(player) &gt; 21:
            break

# After loop: dealer takes cards, etc.
results()
</code></pre>

<p>The results can stay mostly the same. But some of your passed in variables are not needed, since you can compute them from the other data. For example, if the <code>len(player)</code> is 2, that's the <code>first_hand</code> flag. What's key is that results is outside the loop, not inside. You print the results after breaking/exiting from the loop.</p>
    </div>