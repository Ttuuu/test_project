<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You have docstrings for your functions and classes, which makes your code better than 95% of code submitted to Code Review.</p></li>
<li><p>The behaviour of the pipes is split into several pieces: (i) the <code>PipePair</code> class; (ii) the motion, drawing, and destruction logic in <code>main</code>; (iii) the scoring logic in <code>main</code>; (iv) the factory function <code>random_pipe_pair</code>. It would make the code easier to understand and maintain if you collected all the pipe logic into methods on the <code>PipePair</code> class.</p></li>
<li><p>Similarly, the behaviour of the bird is distributed among several places: (i) the local variables <code>bird_y</code> and <code>steps_to_jump</code> in <code>main</code>; (ii) the "calculate position of jumping bird" logic; (iii) the flapping animation logic; (iv) the <code>get_frame_jump_height</code> function. It would make the code easier to understand if you collected all the bird logic into methods on a <code>Bird</code> class.</p></li>
<li><p>The word "jumping" doesn't seem like a good description of the behaviour of the bird.</p></li>
<li><p>Name <code>is_bird_collision</code> make not sense English.</p></li>
<li><p>In the collision logic you're effectively testing for intersection of rectangular hit boxes. Pygame provides a <a href="http://www.pygame.org/docs/ref/rect.html"><code>Rect</code> class</a> with various <code>collide</code> methods that would make your code clearer, and would make it easier to do things like drawing the hit boxes to help with debugging.</p></li>
<li><p>You store the pipes in a <code>list</code>, but this is inefficient when it comes to remove a pipe: <code>list.remove</code> takes time proportional to the length of the list. You should use a <code>set</code>, or, since you know that pipes get created on the right and destroyed on the left, a <a href="https://docs.python.org/3/library/collections.html#collections.deque"><code>collections.deque</code></a>.</p></li>
<li><p>When you test for collisions, you store the collision results in a list and then test to see if <code>True</code> is an element of the list. Instead, you should use the built-in function <a href="https://docs.python.org/3/library/functions.html#any"><code>any</code></a>:</p>

<pre><code>if any(p.collides_with(bird) for p in pipes):
</code></pre>

<p>(This has the additional advantage of short-circuiting: that is, stopping as soon as a collision has been detected, instead of going on to test the remaining pipes.)</p></li>
<li><p>You measure time in frames (for example, pipes move leftwards at a particular number of pixels per frame). This has the consequence that you cannot change the framerate without having to change many other parameters. It is more general to measure time in seconds: this makes it possible to vary the framerate.</p>

<p>(In this kind of simple game you can get away with measuring in frames, but in more sophisticated games you'll need to be able to vary the framerate and so it's worth practicing the necessary techniques.)</p></li>
<li><p>In <a href="https://github.com/TimoWilken/flappy-bird-pygame/commit/583c3e49e7b23762b071e51db1d7f7487a3012e9">commit 583c3e49</a> you broke the game by (i) removing the function <code>random_pipe_pair</code> without changing the caller; and (ii) changing the local variable <code>surface</code> to an attribute <code>self.surface</code> in some places but not others.</p>

<p>We all make commits in error from time to time, but there are <em>four</em> commits after this one, which suggests that you haven't been testing your code before committing it. This is a bad habit to get into!</p></li>
</ol>
    </div>