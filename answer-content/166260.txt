<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Simplify matching parentheses</h3>

<p>These <code>case</code> statements are very similar, and take a couple of lines to write:</p>

<blockquote>
<pre><code>case "}":
    if (stack.pop() !== "{") {
        isBalanced = false
    }
    break;
case "]":
    if (stack.pop() !== "[") {
        isBalanced = false
    }
    break;
case ")":
    if (stack.pop() !== "(") {
        isBalanced = false
    }
    break;
</code></pre>
</blockquote>

<p>You could simplify by reworking the <code>case</code> statements that handle the opening parentheses:</p>

<pre><code>case "{":
    stack.push("}");
    break;
case "[":
    stack.push("]");
    break;
case "(":
    stack.push(")");
    break;
</code></pre>

<p>And then you could replace the handling of the closers with the simpler:</p>

<pre><code>case "}":
case "]":
case ")":
    if (stack.pop() !== exp[i]) {
        isBalanced = false
    }
    break;
</code></pre>

<h3>Avoid flag variables when possible</h3>

<p>Instead of setting <code>isBalanced = false</code> and the multiple checks,
it would be simpler in such cases to immediately print the result and break, for example:</p>

<pre><code>next:
for (var a0 = 0; a0 &lt; t; a0++) {
    exp = readLine().split('');

    stack = [];
    i = -1;
    len = exp.length;

    while (++i &lt; len) {
        switch (exp[i]) {
            case "{":
                stack.push("}");
                break;
            case "[":
                stack.push("]");
                break;
            case "(":
                stack.push(")");
                break;
            case "}":
            case "]":
            case ")":
                if (stack.pop() !== exp[i]) {
                    console.log("NO");
                    continue next;
                }
                break;
        }
    }

    console.log(stack.length == 0 ? "YES" : "NO");
</code></pre>

<h3>Naming</h3>

<p>What is <code>exp</code>? It's not very obvious, but actually it's characters.
How about calling it <code>chars</code>?</p>
    </div>