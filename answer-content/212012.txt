<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Avoid assumptions</strong></p>

<p>Code subtracts 1 with no explanation.  A usual reason to do so here is an <em>assumed</em> <code>'\n'</code> at the end of <code>str</code>.</p>

<pre><code>fgets(str, 100, stdin);
int len = strlen(str);
int len2 = len - 1;  // Why - 1?
</code></pre>

<p>Consider why this is not always correct.</p>

<p>1) User input was long like <code>"000...(98 total zero characters)...000x\n"</code>.  <code>fgets()</code> would read the first 99 characters into <code>str</code> and code would identify that as a good string, even though it had a <code>x</code> in <code>str</code>.</p>

<p>2) User input was <code>"012"</code> and then input was closed.  <code>fgets()</code> would read <code>"012"</code> into <code>str</code> and code would identify that as a good string, even though it had a <code>2</code> in <code>str</code>.</p>

<p>3) Some hacker is messing with the program and inputs <code>"0z\0\n"</code> and code would identify that as a good string, even though input had a <code>'z'</code>.</p>

<p>4) <code>fgets()</code> suffered a rare input error. The state of <code>str</code> in indeterminate. <code>strlen(str)</code> leads to UB.</p>

<p>To fix 1,2, 4 and partially #3</p>

<pre><code>if (fgets(str, 100, stdin) == NULL) {
  printf("End of file or input error\n");
  return 0;
}
int len = strlen(str);
if (len &gt; 0 &amp;&amp; str[len-1] == '\n') str[--len] = '\0';
int len2 = len;
</code></pre>

<p><strong>Code passes the empty line</strong></p>

<p>I'd expect an input of <code>"\n"</code> to warrant a <code>"Not Valid...\n"</code></p>

<p><strong>Goal not cleanly met</strong></p>

<p>Given the task of "Is a string a bit string", code should have a function like </p>

<pre><code>bool is_bit_string(const char *s);
</code></pre>

<p>Instead OP's code answered "Is a <em>line</em> of input a bit string".</p>

<p>In C:</p>

<blockquote>
  <p>A <em>string</em> is a contiguous sequence of characters terminated by and including the first null character.</p>
  
  <p>A text stream is an ordered sequence of characters composed into <em>lines</em>, each line consisting of zero or more characters plus a terminating new-line character. Whether the last line requires a terminating new-line character is implementation-defined.</p>
</blockquote>

<p><code>'a'</code>, <code>'b'</code>, <code>'c'</code>, <code>'\0'</code> is  a string.<br>
<code>'a'</code>, <code>'b'</code>, <code>'c'</code>, <code>'\n'</code> is  a line.</p>

<p><strong>Separate core function</strong></p>

<p>The input/output should not be part of "Is a string a bit string".  Perhaps:</p>

<pre><code>#include &lt;stdbool.h&gt;

bool is_bit_string(const char *s) {
  if (*s == '\0') {
    return false;
  }
  while (*s &gt;= '0' &amp;&amp; *s &lt;= '1') {
    s++;
  }
  return *s == '\0';
}
</code></pre>

<p><strong>Test code</strong></p>

<p>Move testing of "Is a string a bit string" away from <code>is_bit_string()</code> definition.  perhaps even in separate .c files.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdbool.h&gt;
#define TEST_SZ 256

bool is_bit_string(const char *s);

int main(void) {
  char str[TEST_SZ];
  if (fgets(str, sizeof str, stdin) == NULL) {
    fprintf(stderr, "End of file or input error\n");
    return EXIT_FAILURE;
  } 

  // Lop off potential \n
  str[strcspn(str, "\n")] = '\0';

  if (is_bit_string(str)) {
    printf("Valid!\n");
  } else {
    printf("Not Valid...\n");
  }

  return EXIT_SUCESS;
}
</code></pre>
    </div>