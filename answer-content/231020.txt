<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Use <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer"><code>std::string_view</code></a> to simplify your code, avoid expensive temporaries, and to make your custom string-type more usable.</p>
</li>
<li><p>You have three empty states: (0, nullptr), (0, length-zero-array), (1, length-one-array). Standardize to simplify.</p>
<p>One option to remove special cases and still have noexcept-move-ctor would be using (0, static empty string) for all empty strings.</p>
</li>
<li><p>Wherever you don't have a good reason to deviate from it, keep to the interface of <a href="https://en.cppreference.com/w/cpp/string/basic_string" rel="nofollow noreferrer"><code>std::string</code></a>. Demonstrating your individuality here just hurts everyone.</p>
</li>
<li><p>Implicitly casting to pointer to constant string is inadvisable. Provide the standard accessors for that instead (<code>.begin()</code>, <code>.cbegin()</code>, <code>.data()</code>, <code>.cdata()</code>, <code>.c_str()</code>, and so on. Yes, a lot of them are redundant, though were not when introduced, or had to be added anyway for conformance to common interfaces.</p>
</li>
<li><p>If there is no good reason to make something a member, desist. The same for <code>friend</code>. Encapsulation works best when it is actually followed where it's easy enough.</p>
</li>
<li><p>Using in-class-initializers, ctor-init-list and delegation allows you to simplify your code and avoid errors.</p>
</li>
<li><p>Range-checking is unexpectedly expensive for <code>.operator[]()</code>. That's what <code>.at()</code> is for.</p>
</li>
<li><p>Make self-assignment safe without explicit check. Yes, that case will be more expensive, but pessimizing the common path really hurts.</p>
</li>
<li><p>If you copy a null terminated string, and the result should also be null terminated, copy the terminator too. Setting it separately afterwards is worse in any respect.</p>
</li>
<li><p>Your implementation of <code>.replace()</code> is quadratic when the replacement is <code>\0</code>. It should be linear. Anyway, why is your string-type not zero-clean?</p>
</li>
<li><p>Best get into the habit of preferring <code>++var</code> over <code>var++</code> when you don't need the value. It is more efficient for more complex types.</p>
</li>
</ol>
    </div>