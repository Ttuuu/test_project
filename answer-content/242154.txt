<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>We can move the while loop into another function.</p>

<pre class="lang-py prettyprint-override"><code>def is_prime(candidate, primes):
    n = 0
    while primes[n]**2 &lt;= candidate:
        if candidate % primes[n] == 0:
            return False
        n += 1
    return True

def sieve():
    primes = [2]
    for candidate in count(start=3, step=2):
        if not is_prime(candidate, primes):
            continue
        yield primes[-1]
        primes.append(candidate)
</code></pre></li>
<li><p>We can use <code>itertools.takewhile</code> to expose the while loop as an iterable.</p>

<pre class="lang-py prettyprint-override"><code>def is_prime(candidate, primes):
    for prime in itertools.takewhile(lambda p: p**2 &lt;= candidate, primes):
        if candidate % prime == 0:
            return False
    return True
</code></pre></li>
<li><p>We can use <code>any</code> to make <code>is_prime</code> easier to read.</p>

<p>If for any of the values, <code>candidate % prime == 0</code>, are true the result is true.
If none of them are then it is false.
Since we want it to be the other way around we can just use <code>not</code>.</p>

<pre class="lang-py prettyprint-override"><code>def is_prime(candidate, primes):
    return not any(
        candidate % prime == 0
        for prime in itertools.takewhile(lambda p: p**2 &lt;= candidate, primes)
    )
</code></pre></li>
<li><p>We can move <code>is_prime</code> back into the first function.</p>

<pre class="lang-py prettyprint-override"><code>def sieve():
    primes = [2]
    for candidate in count(start=3, step=2):
        if not not any(
            candidate % prime == 0
            for prime in itertools.takewhile(lambda p: p**2 &lt;= candidate, primes)
        ):
            continue
        yield primes[-1]
        primes.append(candidate)
</code></pre></li>
<li><p>We can swap the <code>if</code> to cancel the <code>continue</code> and a <code>not</code>.</p></li>
<li>We can swap the <code>any</code> and <code>== 0</code>, with <code>not all</code>.</li>
<li>We can cancel the double <code>not</code>.</li>
</ol>

<pre class="lang-py prettyprint-override"><code>def sieve():
    primes = [2]
    for candidate in count(start=3, step=2):
        if all(
            candidate % prime
            for prime in itertools.takewhile(lambda p: p**2 &lt;= candidate, primes)
        ):
            yield primes[-1]
            primes.append(candidate)
</code></pre>

<p>At the expense of readability you can get the following trade offs.</p>

<ol>
<li>There is a chance that using <code>int(candidate ** 0.5).__ge__</code> is faster than the <code>lambda</code>.</li>
</ol>
    </div>