<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In additional to @Reinderien answer:</p>
<p><strong>Constructor</strong></p>
<p>You're doing much work in your constructor, consider moving most of the configuration part into a separate method, and just keep the constructors to work on validating its parameters only, if you want any other code to be executed with the constructor, just put it inside a private method, then recall it from the constructor to initialize your configuration or required logic. Also, don't use optional parameters on the constructor arguments. Use overloads instead, as it would be safer for future changes, and also, to avoid any confusion.</p>
<p><strong>Naming Convention</strong></p>
<p>while your naming methodology is partially clear to me, but it took me sometime to follow up your code because of the naming confusion. For instance, <code>GetAllTheFiles</code> and <code>GetFiles</code> this confused me at first, but when I dig into the code, it came clear that <code>GetFiles</code> is for getting the files from the local disk, and <code>GetAllTheFiles</code> would download the remotely file. So, you need to consider naming your objects based on their logic and result. for instance, <code>GetAllTheFiles</code> can be renamed to something like `GetConfigurationFileFromServer' (just an example).</p>
<p><strong>Methods</strong></p>
<p>It's partially unclear, and could be misled others. As your requirements is clear (switch between local and remote configuration). you'll need to minimize them to have a better code clarity. Some methods can be used as helper methods like <code>GetFiles</code> so it would be useful to create a separate helper class for managing files, and then use this class. This way, you'll have a chance of reusing these methods in any part of the project.</p>
<p><strong>Design Pattern</strong></p>
<p>I suggest to try to find a design pattern that fits your current project, as designing your objects in a clear design would give you many advantages in which would make it easier to bind for future changes.</p>
<p>For instance, you could use Fluent API design pattern, here is an example of your code (including some changes based on the notes above).</p>
<pre><code>public class RecordManager
{
    private const string _remoteUrl = "remote-url-from-where-to-download-new-configs";
    private string _remoteFileName; 
    
    private const string SecondaryLocation = "SecondaryConfigs";
    private readonly IConfiguration _configuration;
    private readonly string _localPath; 
    private IEnumerable&lt;RecordHolder&gt; _records; 
    private readonly FileHelper _fileHelper = new FileHelper();
    
    public enum ConfigLocation { System, Local, Remote }
    
    public RecordManager(IConfiguration configuration, string localPath)
    {
        if(configuration == null) { throw new ArgumentNullException(nameof(configuration)); }
        
        if(localPath?.Length == 0) { throw new ArgumentNullException(nameof(localPath)); }
        
        _localPath = localPath;
        _configuration = configuration;
        ChangeToken.OnChange(configuration.GetReloadToken, _ =&gt; ConfigChanged(), new object());
    }
    
    public RecordManager(IConfiguration configuration) : this(configuration, "Records") { } 
    
    public RecordManager LoadConfigurationsFrom(ConfigLocation location)
    {
        switch(location)
        {
            case ConfigLocation.Remote:
                _records = GetConfigurationsFromServer();
                break; 
            case ConfigLocation.Local:
                _records = GetConfigurationsFromLocalFiles();
                break; 
            case ConfigLocation.System:
                _records = IsConfigruationFromServer() ?  GetConfigurationsFromServer() : GetConfigurationsFromLocalFiles();
                break;  
        }
        
        return this; 
    }
    
    public void Save()
    {
        // finalize your work.
    }

    private bool IsConfigruationFromServer()
    {
        string configValue = configuration["configKey"];

        if (string.IsNullOrWhiteSpace(configValue)){ return false; }
        
        var dcc = JsonConvert.DeserializeObject&lt;RecordPojo&gt;(configValue);
        
        // use conditional access instead of casting to avoid casting exceptions 
        // also you only need a valid boolean value, any other value should be ignored.
        if(!bool.TryParse(dcc.loadDefaultFlag?.ToString(), out bool loadDefaultFlag)) { return false; }
        
        _remoteFileName = dcc.remoteFileName;
        
        return !loadDefaultFlag &amp;&amp; !string.IsNullOrWhiteSpace(dcc.remoteFileName);
    }
    
    // adjust this to be parameterless
    // use the global variables _remoteUrl, _remoteFileName instead
    private IEnumerable&lt;RecordHolder&gt; GetConfigurationsFromServer()
    {       
        var isDownloaded = _fileHelper.Download($"{_remoteUrl}{_remoteFileName}", _secondaryLocation);
        
        if(!isDownloaded) { yield return default; }
        
        var isExtracted = _fileHelper.ExtractTarGz(_remoteFileName, _directory);
        
        if(!isExtracted) { yield return default; }
        
        foreach(var configPath in _fileHelper.GetFiles(directory))
        {
            if(!File.Exists(configPath)) { continue; }
            
            var fileDate = File.GetLastWriteTimeUtc(configPath);
            
            var fileContent = File.ReadAllText(configPath);
            
            var pathPieces = configPath.Split(System.IO.Path.DirectorySeparatorChar, StringSplitOptions.RemoveEmptyEntries);
            
            var fileName = pathPieces[pathPieces.Length - 1];
          
            yield return new RecordHolder
            {
                Name = fileName,
                Date = fileDate,
                JDoc = fileContent
            };
        }
    }


    private IEnumerable&lt;RecordHolder&gt; GetConfigurationsFromLocalFiles()
    {
        // Same concept as GetConfigurationsFromServer 
    }

}
</code></pre>
<p>usage would be like :</p>
<pre><code>new RecordManager(configuration)
    .LoadConfigurationsFrom(RecordManager.ConfigLocation.Remote)
    .Save();
</code></pre>
<p>I hope this would give you the boost you're seeking.</p>
<p>From Comments :</p>
<blockquote>
<p>Btw can you also explain what is the use of <code>yield</code> here and what
advantage does it have compared to what I had earlier.</p>
</blockquote>
<p><code>yield</code> keyword basically a shortcut of what you've already done in the same method, but with an effective and more efficient enumeration.</p>
<p>It would create a lazy enumeration over a managed collection elements that would only create what you asked for nothing more nothing less. (say you're iterating over 100 elements, and you just need the first element, it'll only build a collection for one element and it would ignore the rest). and it works with <code>IEnumerable</code> only. I encourage you to read more about it and try to use it when possible.</p>
<blockquote>
<p>Also what does yield return default means here?</p>
</blockquote>
<p>it would return the default value of the current element type. Say you're enumerating over <code>int</code> collection. the default value of <code>int</code> is <code>0</code> since it's <code>non-nullable</code> type. same thing for other types (each type has its own default value).</p>
    </div>