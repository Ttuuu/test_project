<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll review the Makefile here.  There's a surprising amount to say, for such a short file.  I'll assume your using GNU Make - if not, it's worth switching, and it's widely available.</p>

<blockquote>
<pre class="lang-make prettyprint-override"><code>all: clean compile run
</code></pre>
</blockquote>
<p>In a parallel build, you really don't want to be cleaning as you compile (or running before compile has finished, but I'll come to that later).  I recommend that you don't clean by default, as doing so negates much of the benefit of using Make.</p>
<p>Including <code>run</code> in the default target is unconventional, and will surprise others; I recommend you simply build the program as the default target, and have users <code>make run</code> if they want to execute it.</p>
<blockquote>
<pre class="lang-make prettyprint-override"><code>compile:
</code></pre>
</blockquote>
<p>The rules for this target don't create the target (it makes <code>bitmasker</code> rather than <code>compile</code>), so they will be executed even when the binary is up to date.  We should be honest about what it makes, and be clear when it needs remaking:</p>
<pre class="lang-make prettyprint-override"><code>bitmasker: $(wildcard *.c)
    $(CC) -o $@ $^  -Wall -Wextra -pedantic `pkg-config --cflags --libs gtk+-3.0` -export-dynamic
</code></pre>
<p>Really, we don't want to be rebuilding all the sources whenever any one of them changes; instead, let's compile them to object files, and only rebuild the ones that need it:</p>
<pre class="lang-make prettyprint-override"><code>LDLIBS += $(shell pkg-config --libs gtk+-3.0)
LDLIBS += -export-dynamic

bitmasker: main.o handlers.o utilities.o
    $(LINK.c) $^ $(LDLIBS) -o $@
</code></pre>
<p>If we set <code>CFLAGS</code> appropriately, we don't need to write rules for making *.o from *.c, because Make's built-in rule is perfect.  We just need to add dependencies on the header files:</p>
<pre class="lang-make prettyprint-override"><code>CFLAGS += -Wall -Wextra -pedantic
CFLAGS += $(shell pkg-config --cflags gtk+-3.0)

main.o: handlers.h utilities.h
handlers.o: utilities.h
</code></pre>
<p>(In passing, it's surprising that <code>handlers.c</code> doesn't include <code>handlers.h</code>, and <code>utilities.c</code> doesn't include <code>utilities.h</code> - is that an oversight?).</p>
<blockquote>
<pre class="lang-make prettyprint-override"><code>run:
    ./bitmasker
</code></pre>
</blockquote>
<p>We want to be sure that the program is up to date if we want to run it:</p>
<pre class="lang-make prettyprint-override"><code>run: bitmasker
    ./bitmasker
</code></pre>
<blockquote>
<pre class="lang-make prettyprint-override"><code>clean:
    rm -f bitmasker
</code></pre>
</blockquote>
<p>Mostly good, though we can use the cross-platform <code>$(RM)</code> provided by Make, and both <code>run</code> and <code>clean</code> should be declared as "phony" rules (i.e should be made even if the target already exists).</p>
<p>The final piece we're missing is that we should declare <code>.DELETE_ON_ERROR:</code>, to prevent partially-written targets being considered up to date when a command fails or is interrupted.</p>
<hr>
<h1>Improved Makefile</h1>
<pre class="lang-make prettyprint-override"><code>PROGRAM = bitmasker

CFLAGS += -Wall -Wextra -pedantic
CFLAGS += $(shell pkg-config --cflags gtk+-3.0)

LDLIBS += $(shell pkg-config --libs gtk+-3.0)
LDLIBS += -export-dynamic

$(PROGRAM): main.o handlers.o utilities.o
    $(LINK.c) $^ $(LDLIBS) -o $@

main.o: handlers.h utilities.h
handlers.o: utilities.h

run: $(PROGRAM)
    ./$(PROGRAM)

clean:
    $(RM) *.o $(PROGRAM)

.PHONY: clean run
.DELETE_ON_ERROR:
</code></pre>
    </div>