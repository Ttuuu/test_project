<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Taking the two answers in this post in consideration, as well as in the linked post, and the discussions, I came up with this solution. I believe it now finally respects all the SOLID principles! </p>

<pre><code>    public abstract class Animal : IEater
    {
        public AnimalKind Kind { get; set; }
        public AnimalSize Size { get; set; }
        public bool IsDead { get; set; }

        public IAnimalEatingPreferences EatingPreferences { get; set; }


        public Animal(AnimalSize size)
        {
            this.Size = size;
        }

        public virtual bool CanEat(Animal prey)
        {
            if (this.IsDead || prey.IsDead) return false;

            if (EatingPreferences.TryGetPreys(prey.Kind, out AnimalSize ediblePreySize))
            {
                if (ediblePreySize &gt;= prey.Size)
                {
                    return true;
                }
            }

            return false;
        }
    }

    public class Hyena : Animal
    {
        public Hyena(AnimalSize size) : base(size)
        {
            Kind = AnimalKind.Hyena;
        }

        // Some more logic, which the exercise had, but I omitted because it was not necessary for this question
    }

    public class Lion : Animal
    {
        public Lion(AnimalSize size) : base(size)
        {
            Kind = AnimalKind.Lion;
        }

        // Some more logic, which the exercise had, but I omitted because it was not necessary for this question
    }

    public enum AnimalKind
    {
        None = 0,
        Hyena = 1,
        Lion = 2
    }

    public enum AnimalSize
    {
        None = 0,
        Small = 1,
        Medium = 2,
        Big = 3
    }

    public interface IEater
    {
        bool CanEat(Animal prey);
    }

    public interface IEatingPreferencesFactory
    {
        IAnimalEatingPreferences GetEatingPreferences(AnimalKind animal, AnimalSize size);
    }

public interface IAnimalPark
    {
        void AddAnimal(Animal animal);
        void Process();
    }

    public interface IAnimalEatingPreferences
    {
        void AddPrey(AnimalKind animal, AnimalSize size);
        bool TryGetPreys(AnimalKind prey, out AnimalSize returnEdiblePreySize);
    }

    public class EatingPreferencesFactory : IEatingPreferencesFactory
    {
        public IAnimalEatingPreferences GetEatingPreferences(AnimalKind animal, AnimalSize size)
        {
            AnimalEatingPreferences eatingPreferences = new AnimalEatingPreferences();
            AnimalSize biggestPreySizeExclusive;

            switch(animal)
            {
                case AnimalKind.Lion:
                                    eatingPreferences.AddPrey(AnimalKind.Hyena, size);

                                    biggestPreySizeExclusive = size;
                                    if(biggestPreySizeExclusive &gt; AnimalSize.Small &amp;&amp; biggestPreySizeExclusive &lt; size)
                                    {
                                        eatingPreferences.AddPrey(AnimalKind.Lion, biggestPreySizeExclusive);
                                    }
                                    break;

                case AnimalKind.Hyena:
                                    biggestPreySizeExclusive = size;
                                    if (biggestPreySizeExclusive &gt; AnimalSize.Small &amp;&amp; biggestPreySizeExclusive &lt; size)
                                    {
                                        eatingPreferences.AddPrey(AnimalKind.Hyena, size);
                                    }
                                    break;

                default: break;
            }

            return eatingPreferences;
        }
    }

public class AnimalEatingPreferences : IAnimalEatingPreferences
    {
        private readonly IDictionary&lt;AnimalKind, AnimalSize&gt; _animalPreys;

        public AnimalEatingPreferences()
        {
            _animalPreys = new Dictionary&lt;AnimalKind, AnimalSize&gt;();
        }

        public void AddPrey(AnimalKind animal, AnimalSize size)
        {
            _animalPreys.Add(animal, size);
        }

        public bool TryGetPreys(AnimalKind prey, out AnimalSize returnEdiblePreySize)
        {
            if( _animalPreys.TryGetValue(prey, out AnimalSize ediblePreySize) )
            {
                returnEdiblePreySize = ediblePreySize;
                return true;
            }

            returnEdiblePreySize = AnimalSize.None;
            return false;
        }
    }

public class AnimalPark : IAnimalPark
    {
        private readonly IList&lt;Animal&gt; _animals;

        public AnimalPark(IList&lt;Animal&gt; animals)
        {
            _animals = animals;
        }

        public void AddAnimal(Animal animal)
        {
            _animals.Add(animal);
        }

        public void Process()
        {
            int length = _animals.Count;
            for(int i=1; i&lt;length; i++)
            {
                if( _animals[i-1].CanEat(_animals[i]) )
                {
                    _animals[i].IsDead = true;
                }
            }
        }
    }
</code></pre>
    </div>