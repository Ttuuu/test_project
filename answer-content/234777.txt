<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree, that your naming is mostly alright, no point to document these variables. Except for <code>event</code> variables.</p>

<p>What I seriously don't like about your approach is how tightly it is bound to html.
For example <code>removeBook</code> takes as parameter event, which you use to extract element and use that one to extract data that you use to remove. That is bad from many reasons.</p>

<p>Example:</p>

<p>If you are removing book, I expect parameter to be "book", not some kind of event. What if I wanted to add keyboard shortcut to remove book? Or maybe drag &amp;Â drop?
First step is to pass element, that represents the book <code>parentOfBookInfo</code>. But still, that element is both data and both it's html representation. Even that change makes your code cleaner and more flexible - you can remove that book/element based on different actions or events. Separating html and data is a bit harder and may be not worth it. It's better to keep "database" or "memory" of your <code>Book</code> objects and that then triggers UI update (or similar approach, depending on your pattern). But digging deeper and deeper into making this "clean" usually ends up making your own framework and then it is usually better to choose one, that is close to your mindset and what you are trying to do :)</p>

<p>Having "global" click listener can be fine, but then again you end up making some kind of routing to make sure clicking on element, that you wanted will trigger correct function and in the end it may be easier to just attach event to element in the first place :)
I don't like it in this case though. Again very much bound to css (and looks like visually-depended css) so if you change css for design, you break your functionality. Also theoretically it is possible with your code to trigger multiple events if your html allows it.
Ex. if element has both <code>modal__add</code> and <code>modal_cancel</code>, there will be 2 methods triggered. That seems bad and may lead to bugs hard to find in case someone messes up html. Better switch or explicit return after passing event to something to make sure it does not propagate further.</p>
    </div>