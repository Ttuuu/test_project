<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Remove UI code</strong></p>

<pre><code>if (d.getHours() &lt; openingHour || d.getHours() &gt;= closingHour || d.getDay() === weekend[0] || d.getDay() === weekend[1]) {
            document.body.style.backgroundColor = "red";
        }
        else {
            document.body.style.backgroundColor = "green";
        }
</code></pre>

<p>Mixing UI code with what should be pure holiday calculation code is the worse thing I see for the long term health of your application. Instead client code (the UI)  should call an object method or property but shall not return a color because that's UI business.</p>

<p>Think about it - why would my calculator assume anything about why I'm doing a calculation or how I will use it. When the calculation output is "green" instead of true or false (is what I suspect you want) then that calculator is now useless for anything except that exact, lone thing. The code is not reusable.</p>

<hr>

<p><strong>The comments</strong> read the literal code. You should assume the reader knows how to read code and then have comments that tell "why" or "what."  Kudos for referencing the algorithm source.</p>

<p>Bad comments:</p>

<pre><code>//Create new date object
var d = new Date();
. . .
// If easterDay is greater than 31, take value minus 31
// Set month to April
if (easterDay &gt; 31) {
   easterDay = easterDay - 31;
   easterMonth = 3;
}
. . .
// Pass current date and date array to function
checkDate(d, closedDates);
</code></pre>

<p>OK comments:</p>

<pre><code>// Exceptions to formula
. . .
// Run check time once to see if it is open
    checkTime();
</code></pre>

<hr>

<p>Should be unnecessary comments:</p>

<pre><code>// Easter Month as default March
        easterMonth = 2;
</code></pre>

<p>Define constants for the months</p>

<hr>

<p>Make <code>closedDates</code> an object then you don't have to memorize the order in the array and induce coding errors.</p>

<pre><code>var closedDates = [
        new Date(year, 0, 1),       // Fixed date: New Years day
        new Date(year, 0, 5),       // Fixed date: Twelfth Night
        new Date(year, 0, 6),       // Fixed date: Epiphany
        new Date(closedDates[0]),   // Thursday

var closedDates = {
        "NewYears" : new Date(year, 0, 1),
        "TwelfthNight" : new Date(year, 0, 5),
        "Epiphany" : new Date(year, 0, 6),
        "Thursday" : new Date(closedDates[0]), 
</code></pre>

<p>A weekday should not be in the holidays structure. Make a 'weekdays' structure instead. If you meant 'maundyThursday' I suspect that making an object in the first place would have avoided the commenting error.</p>

<hr>

<p><strong>Naming</strong></p>

<p>Name things to reflect the subject domain not the code implementation details. Sometimes (often?) unnecessary comments - see above - can suggest appropriate names.</p>

<p><code>closedDates</code> are not dates, they are holidays.  And does it really matter to the <code>closedDates</code> user if they are closed or not? Anyway <code>closedDates</code> also includes open dates and  so the name is more wrong. What does open and closed mean anyway?</p>

<p>Making day &amp; month constants will make the whole thing far more understandable, significantly prevent errors, and otherwise unnecessary comments.</p>

<p>Rethink all the function names. For example <code>checkDate</code> is meaningless. I know how hard that is; 30 character names is no so good either so sometimes you just have to settle for good function comments.</p>
    </div>