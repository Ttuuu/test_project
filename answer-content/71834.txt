<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, first off, I must commend you on the readability of your code.  You've employed nice spacing and enough comments to be able to find different sections easily without a lot of reading.  I think I could learn a thing or two from you here.  Nice job!</p>

<p>There are a few things you can do to improve your code, though.  Let's start with the general practices first.</p>

<p><strong>General practice advice</strong></p>

<ol>
<li><p>Unless your script is intended to set environment variables for other scripts or applications, you should always use <code>setlocal</code>.  Even if the script you're writing is intended to append a new directory to <code>%PATH%</code>, you should still <code>setlocal</code> at the top until your internal flow is complete and you're ready to commit the change to <code>%PATH%</code>.  This way you don't pollute your environment with a bunch of variables that only have meaning within a particular script -- or worse, have meaning in a different script that expects the variable not to be defined yet.  Whenever you <code>@echo off</code>, <code>setlocal</code> should automatically be the next thing you type.</p></li>
<li><p>When setting variables to string values, it's good practice to <code>set "varname=string"</code> with the quotation marks surrounding both the variable and its value.  That way, whenever you use your variable later, there's no ambiguity whether your <code>variable="value"</code> or <code>variable=value</code>.  Also, in a future script, you might capture special characters into a variable, like an ampersand or a percent.  Get into the habit of <code>set "variable=value"</code> now and you won't have to change your coding style for special cases like that, and you'll spend less time debugging.</p></li>
<li><p>Likewise, in your <code>if</code> statements, you should enclose the items on both sides of your comparison operator.  <code>if "%foo%" equ "%bar%"</code>, or <code>if "%%~xI"==".exe"</code>.  I can't count all the times as a rookie scripter I would struggle with errors when <code>%foo%</code> contained a space, causing "blah was unexpected at this time" because I didn't use quotes.</p></li>
<li><p><code>set /a</code> has some shorthand syntax you might find helpful.  Interestingly, when you're doing math with variables, you don't have to use <code>%</code> around the variable names.  For example, instead of <code>set /a year=%year%-1</code> you can <code>set /a year=year-1</code>.  You can also <a href="http://www.robvanderwoude.com/battech_math.php" rel="nofollow">combine operator and assignment</a> like <code>+=</code>, <code>*=</code>, <code>/=</code>, etc.  So instead of <code>set /a year=%year%-1</code> you can <code>set /a year-=1</code>.</p></li>
</ol>

<p>Now, there are a few issues specific to this script that can be improved.</p>

<p><strong>Script-specific suggestions</strong></p>

<ol>
<li><p><code>%date%</code> and <code>date /t</code> are ambiguous.  Some locales list date as <code>MM/DD/YYYY</code>, while others use <code>DD/MM/YYYY</code>, and still others use <code>YYYY/MM/DD</code>.  (<a href="http://en.wikipedia.org/wiki/Date_format_by_country" rel="nofollow">more information</a>.)  A more agnostic way of scraping the date would be to use <code>wmic</code>.  See <a href="http://ss64.com/nt/syntax-getdate.html" rel="nofollow">Method 2 on this page</a> for a way to put the date into variables that should work more universally.</p></li>
<li><p>When using <code>del</code> with a wildcard, consider adding the <code>/q</code> switch to suppress confirmation, unless you intentionally want your script to ask the user to confirm deletion.</p></li>
<li><p>Consider changing <code>ping -n 5 192.168.100.44 &gt; nul</code> to <code>ping -n 5 0.0.0.0 &gt;NUL</code>.  Having an actual IP there might (at at glance) prompt the reader to wonder whether the script will behave differently whether the host does or does not respond; whereas <code>0.0.0.0</code> makes it obvious that you're using the <code>ping</code> command as nothing more than a period of sleep.</p></li>
<li><p><code>if Not exist bkp-%lastmonthfiles%.zip</code> &lt;-- If this is ever true, you are going to <code>pause</code> twice, then exit.  Examine your logic here.  Did you leave out a <code>goto compress</code>?</p></li>
</ol>

<p>What it looks like you intended to do is attempt to zip; then if the zip file doesn't exist, echo a notice to the user, pause, then loop back to <code>:compress</code> to try again.  Otherwise, assume everything went fine and delete all the old stuff and exit.  What happens if a file is in use and locked, and 7-zip skips archiving it but was otherwise successful with the other log files?  <code>bkp-%lastmonthfiles%.zip</code> still exists, and your script could potentially delete the file that was skipped.</p>

<p>If I may make yet another suggestion, you should rewrite the end of your script to take advantage of <a href="http://sevenzip.sourceforge.jp/chm/cmdline/exit_codes.htm" rel="nofollow">7-zip's exit codes</a>.  Try this instead.  <em>(Note: <code>"%zip%"</code> is in quotes on the assumption that you followed "General practice advice #2" above.)</em></p>

<pre><code>:compress
"%zip%" -tzip  a -y "bkp-%lastmonthfiles%.zip" %lastmonthfiles%* &amp;&amp; (

    DEL /q %lastmonthfiles%*
    echo Zipping complete.  Press any key to exit.
    pause &gt;NUL
    goto :EOF

) || (

    if ERRORLEVEL 2 (

        echo Zipping failed ^(exit status %ERRORLEVEL%^).  Trying again in 5 seconds...

    ) else (

        echo Zip completed with warnings ^(most likely because a file was locked by another
        echo process and had to be skipped^).  Trying again in 5 seconds...

    )

    del "bkp-%lastmonthfiles%.zip" &gt;NUL 2&gt;&amp;1
    ping -n 6 0.0.0.0 &gt;NUL
    goto compress

)
</code></pre>

<p>A note about the <code>&amp;&amp;</code> and <code>||</code> notation there: That's shorthand code for testing the exit code of the command preceding it.  <code>program.exe &amp;&amp; success || fail</code>.  See <a href="http://www.robvanderwoude.com/condexec.php" rel="nofollow">conditional execution</a> for more details on how this works.</p>
    </div>