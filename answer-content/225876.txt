<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>DRY Code</h2>

<p>Your carousal is a circular construction. We can see that in your code you perform a modular incrementation/decrementation. There is a DRY way to write this code with the use of the <code>%</code> operator. Also, use <code>let</code> and <code>const</code> instead of <code>var</code>. The latter is scoped broader than you might expect.</p>

<p>Let's get rid of this redundant code:</p>

<blockquote>
<pre><code>      // ..
      if (direction == 'forward') {
        if (i + 1 &gt; reviews.length - 1) {
          nextReview = reviews[0];
        } else {
          nextReview = reviews[i + 1];
        }
      } else {
        if (i - 1 &lt; 0) {
          nextReview = reviews[reviews.length - 1];
        } else {
          nextReview = reviews[i - 1];
        }
      }
      // ..
</code></pre>
</blockquote>

<h3>Modulo Arithmic</h3>

<p>Refactored using modulo arithmic. <code>(i + offset + reviews.length) % reviews.length</code> makes sure you remain within bounds, both when decrementing before the beginning and incrementing after the end. Also note that it is common to use <code>i</code>, <code>j</code> to indicate indices. If you don't like this, you could use respectively <code>currentIndex</code> and <code>newIndex</code> instead.</p>

<pre><code>function carousel(direction) {
  const offset = direction == 'forward' ? 1 : -1;
  for (let i = 0; i &lt; reviews.length; i++) {
    if (reviews[i].classList.contains("show")) {
      currentReview = reviews[i];
      const j = (i + offset + reviews.length) % reviews.length;
      nextReview = reviews[j];
    }
  }

  currentReview.classList.remove("show");
  nextReview.classList.add("show");
}
</code></pre>

<h3>Method findIndex</h3>

<p>Also note that you only change the class <code>"show"</code> from the last occurence of <code>currentReview</code> in the loop above. I am not sure whether this is as designed (because maybe only 1 instance can be shown?) or a bug..</p>

<p>If only and exactly 1 item can be shown, you could rewrite the function to take use of <code>findIndex</code>.</p>

<pre><code>function carousel(direction) {
  const offset = direction == 'forward' ? 1 : -1;
  const i = reviews.findIndex(r =&gt; r.classList.contains("show"));
  const j = (i + offset + reviews.length) % reviews.length;
  reviews[i].classList.remove("show");
  reviews[j].classList.add("show");
}
</code></pre>

<h3>Parameters</h3>

<p>The last thing I would argue is the use of a readable string, rather than directly using the int value: <code>const offset = direction == 'forward' ? 1 : -1;</code>.</p>

<pre><code>const backward = -1;
const forward = 1;

leftArrow.onclick = function() {
  carousel(backward);
}
rightArrow.onclick = function() {
  carousel(forward);
}
</code></pre>
    </div>