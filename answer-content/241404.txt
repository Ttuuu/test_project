<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As far as I can tell, you're returning error only in case of <code>read_dir</code> failure. Not sure if anyone ever really needs it, but you could change upmost <code>Some()</code> to <code>Ok()</code>, remove <code>.ok()</code> and fix the signature so that my version works just like yours. Note: the code below wasn't tested. I didn't like nested structure of your function, so I came up with this:</p>

<pre><code>use std::fs;
use std::path::PathBuf;

fn list_files(pathname: &amp;PathBuf, filter: &amp;str) -&gt; Option&lt;Vec&lt;PathBuf&gt;&gt; {
    Some(fs::read_dir(pathname).ok()?
        .filter_map(|entry| {
            Some(
                entry
                    .ok()?
                    .path()
                    .strip_prefix(pathname)
                    .ok()?
                    .to_path_buf(),
            )
        })
        .filter(|path| path.starts_with(filter))
        .collect())
}
</code></pre>

<p>Explanation: <code>.ok()</code> maps <code>Result&lt;T, K&gt;</code> to <code>Option&lt;T&gt;</code>, <code>?</code> operator returns early in case if <code>Option</code> or <code>Result</code> aren't <code>Some()</code>/<code>Ok()</code></p>
    </div>