<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why is everything <code>static</code>? It's not necessarily wrong, but it may make integration into a larger project more ugly.</p>

<p>EDIT: Some background to this: A static utility class makes other classes that depend on it difficult to use and test. It basically breaks the principal called <em><a href="https://en.wikipedia.org/wiki/Inversion_of_control" rel="nofollow noreferrer">Inversion of control</a></em>. </p>

<p>Instead of having a second class hard-code the reference to such a static "employee factory" like this, it is given an instance of a "employee factory class" (e.g. as a constructor argument). That way the "employee factory" can easily be replaced without touching the second class. </p>

<p>This is especially interesting when you want to test that second class. In that case you don't need to worry about setting up the real "employee factory" and making sure that it works. Instead you can give the second class a so called mock class, that just simulates the workings of the "employee factory" and, for example, just returns hard-coded, predetermined employees.</p>

<hr>

<p>The conditional operator (<code>? :</code>) in <code>boolMapper</code> is unnecessary:</p>

<pre><code>public static boolean boolMapper(char value){
    return value == 'Y';
}
</code></pre>

<hr>

<p>As @gervais.b says, formatting the date string to include the hyphens is unnecessary. You can parse the date directly with the pattern <code>yyyyMMdd</code>. Also you shouldn't create a new <code>DateTimeFormatter</code> instance in each method call. Instead use an instance stored in a static constant field:</p>

<pre><code>private final static DateTimeFormatter EMPLOYEE_DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMdd");

public static LocalDate dateMapper(String value){
    return LocalDate.parse(value, EMPLOYEE_DATE_FORMATTER);
}
</code></pre>

<hr>

<p>Don't unnecessarily abbreviate variable/class names. Use <code>Employee</code> instead of <code>Emp</code>, use <code>dateOfBirth</code> instead of <code>dob</code>, etc.</p>

<hr>

<p>Considering you are converting <code>dob</code> and <code>shiftNeeded</code> to "proper" Java types, you should consider also consider converting <code>gender</code>, <code>jobType</code> and <code>empLevel</code>, which you currently store as a <code>char</code>s, into something more Java-esk, eg. enumerations.</p>
    </div>