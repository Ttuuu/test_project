<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#!/usr/bin/env python
#
# This script will run on Python 2.7.x and later
#
# By default, iter_modules looks in sys.path which is initialized from
# the environment variable PYTHONPATH, plus an installation-dependent default.
from pkgutil import iter_modules
import sys

def parse_command_line():
    import argparse # added to Python 2.7 to replace optparse
</code></pre>

<p>Its typically considered best to import all modules at the beginning. Avoid importing inside functions. Also, the python history lesson was pointless.</p>

<pre><code>    python_version = sys.version
</code></pre>

<p>Why are you doing this? Why not just use sys.version when you need this?</p>

<pre><code>    parser = argparse.ArgumentParser(description='Use this script to view the installed packages and/or modules for Python version: '+python_version)
    parser.add_argument('--type',dest='list_type',type=str,default='packages',help='Can be \'packages\' (default), \'modules\', or \'both\'')
    parser.add_argument('--ncols',type=int,default=2,help='Number of columns in output (default: 2)')
    args = parser.parse_args()
    return args
</code></pre>

<p>I'd combine these last two lines.</p>

<pre><code>def select_packages():
    return [ module[1:] for module in iter_modules() if module[2] ],'Packages'

def select_modules():
    return [ module[1:] for module in iter_modules() if not module[2] ],'Modules'

def select_both():
    return [ module[1:] for module in iter_modules() ],'Packages and Modules'
</code></pre>

<p>These three functions are awkward. For one, when looping over tuples, its generally best to unpack the tuples. This will make the code easier to follow. They are also largely duplicate of each other. </p>

<pre><code>options = { 'packages' : select_packages,
            'modules' : select_modules,
            'both' : select_both,
}
</code></pre>

<p>The python standard is to use ALL_CAPS for global constants.</p>

<pre><code>def get_printed_names(pack_tuple):
</code></pre>

<p>pack_tuple is a bad name, I don't know what its in it.</p>

<pre><code>    p_name = []
</code></pre>

<p>avoid abbreviations like p, it just makes it harder to see what's going on.</p>

<pre><code>    for code in pack_tuple:
        if ( code[1] ):
</code></pre>

<p>You don't need the parens. It'd also be easier to follow if you used <code>for name, ispkg in pack_tuple:</code></p>

<pre><code>            p_name.append(code[0]+' (Package)')
        else:
            p_name.append(code[0]+' (Module)')
    return p_name
</code></pre>

<p>Why does this function operate on a list of packages?   </p>

<pre><code>def fmt_cols(my_list, cols):
</code></pre>

<p><code>my_list</code> is a bad name. I have no idea what's in the list.</p>

<pre><code>    import math
    max_width = max(map(lambda x: len(x), my_list))
</code></pre>

<p><code>lamba x: len(x)</code> is just <code>len(x)</code>. So you can do <code>max(map(len, my_list))</code></p>

<pre><code>    col_length = int(math.ceil(len(my_list)/cols+1))
    justify_list = list(map(lambda x: x.ljust(max_width), my_list))
</code></pre>

<p>In python 2.x, <code>map</code> produces a list already. (Perhaps you're aiming to work on Python 3 as well?) It's also probably better to use a list comprehension.</p>

<pre><code>    lines = [ ' '.join(justify_list[i::col_length]) for i in range(col_length) ]
    print("\n".join(lines))
</code></pre>

<p>There's not much point in putting everything in a line just to print it. I'd just print it directly in a for loop.</p>

<pre><code>def sort_func(a_str):
    tmp_str = a_str.lower() # fine with ASCII subset of characters
    for index,letter in enumerate(a_str):
        if letter == '_':
            continue
        else:
            return tmp_str[index:]
</code></pre>

<p>It seems to me that you are just stripping off the <code>_</code> so instead, you can use <code>return a_str.lower().lstrip('_')</code></p>

<pre><code># main()
</code></pre>

<p>Normal style is to put this in a main function.</p>

<pre><code>arguments = parse_command_line()
detail_level = arguments.list_type
try:
    installed_code,tag = options[detail_level]()
except KeyError:
    print('Error: detail_level argument must be \'packages\', \'modules\', or \'both\'')
    sys.exit()
</code></pre>

<p>Why don't you have argument parser check this?</p>

<pre><code>ncols = arguments.ncols
</code></pre>

<p>Why are you copying this in a local?</p>

<pre><code>print('\nFor output options type \'python_pkginfo.py -h\'')
print('\nInstalled '+tag+' for Python version '+sys.version+':\n')
print('To see package versions try: pip freeze | sort')
print('after issuing the appropriate \"setpkgs -a python\" command\n')
print_list = get_printed_names(installed_code)
print_list.sort(key=sort_func)
fmt_cols(print_list,ncols)
</code></pre>

<p>My rewrite of your script:</p>

<pre><code>#!/usr/bin/env python
#
# This script will run on Python 2.7.x and later
#
# By default, iter_modules looks in sys.path which is initialized from
# the environment variable PYTHONPATH, plus an installation-dependent default.
from pkgutil import iter_modules
import sys
import argparse
import math

def parse_command_line():
    parser = argparse.ArgumentParser(description='Use this script to view the installed packages and/or modules for Python version: ' + sys.version)
    parser.add_argument('--type',dest='list_type',type=str,default='packages',help='What to list', choices = ['packages', 'modules', 'both'])
    parser.add_argument('--ncols',type=int,default=2,help='Number of columns in output (default: 2)')
    args = parser.parse_args()
    return args

LIST_TYPE = {
    'packages': (True, False, 'Packages'),
    'modules': (False, True, 'Modules'),
    'both': (True, True, 'Packages and Modules')
}

def find_modules(include_packages, include_modules):
    for module_loader, module_name, is_package in iter_modules():
        if is_package and include_packages:
            yield module_name, is_package
        elif not is_package and include_modules:
            yield module_name, is_package

def formatted_name(module):
    name, is_package = module
    if is_package:
        return name + ' (Package)'
    else:
        return name + ' (Module)'

def print_cols(cells, cols):
    max_width = max(map(len, cells))
    rows = int(math.ceil(len(cells)/cols+1))
    for row in range(rows):
        print(' '.join(x.ljust(max_width) for x in cells[row::rows]))

def main():
    arguments = parse_command_line()
    include_packages, include_modules, tag = LIST_TYPE[arguments.list_type]
    installed_code = sorted(
        find_modules(include_packages, include_modules),
        key = lambda module: module[0].lower().lstrip('_'))

    print('\nFor output options type \'python_pkginfo.py -h\'')
    print('\nInstalled '+tag+' for Python version '+sys.version+':\n')
    print('To see package versions try: pip freeze | sort')
    print('after issuing the appropriate \"setpkgs -a python\" command\n')
    print_cols(list(map(formatted_name, installed_code)), arguments.ncols)

if __name__ == '__main__':
    main()
</code></pre>
    </div>