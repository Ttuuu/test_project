<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yours is definitely an improvement, but there is still room for more improvement:</p>

<h2>PEP8</h2>

<p>The official Python style guide will tell you:</p>

<ul>
<li>two newlines between every function (i.e. before <code>detectCollision</code>, etc.)</li>
<li>function and variable names in snake_case, i.e. <code>detect_collision</code></li>
<li>avoid line continuation: this</li>
</ul>

<pre><code>    return cat.get_size()[0] + x &gt;= window_size[0] or \
        cat.get_size()[1] + y  &gt;= window_size[1] or \
            x &lt;= 0 or y &lt;= 0
</code></pre>

<p>should become</p>

<pre><code>return (
    cat.get_size()[0] + x &gt;= window_size[0]
    or cat.get_size()[1] + y  &gt;= window_size[1]
    or x &lt;= 0 
    or y &lt;= 0
)
</code></pre>

<ul>
<li>spaces after the commas in <code>['right','down','left','up']</code></li>
<li>remove the spaces before the commas here:</li>
</ul>

<pre><code>        return x , y+5
    elif direction == 'left':
        return x - 5 , y
    elif direction == 'up':
        return x , y - 5
</code></pre>

<h2>Main function</h2>

<p>Move everything starting with <code>i = 0</code> into a <code>main</code> function that is called with a name guard:</p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre>

<h2>Constant arrangement</h2>

<p>There's a big crazy mix of constants and variables in global scope. I consider these constants that should be grouped together:</p>

<pre><code>FPS = 30  # frames per second setting
WINDOW_SIZE = (400,300)
WHITE = (255, 255, 255)
</code></pre>

<p>Nothing else in that region should be in global scope.</p>

<h2>Enums</h2>

<p>Represent <code>direction</code> as an <code>enum.Enum</code> with four entries, rather than a stringly-typed variable.</p>

<h2>Hard exit</h2>

<p>Don't <code>exit</code> from <code>listen_to_quit</code> - just break out of the loop.</p>

<p>Better yet - rearrange your code so that you don't need a forever loop:</p>

<pre><code>while not should_quit():
    pygame.display.update()
    fps_clock.tick(FPS)

    DISPLAYSURF.fill(WHITE)

    x,y = getMovement(x_,y_,direction)
    while detectCollision(cat,x,y,window_size):  # if there would be a collision, change direction 
        direction = getDirection(direction)
        x,y = getMovement(x_,y_,direction) # re-calculate movement, now avoiding collision

    x_,y_ = x,y

    DISPLAYSURF.blit(cat,(x,y))
</code></pre>
    </div>