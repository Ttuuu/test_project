<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I just have a couple of minor points to add to <a href="/a/227517">Olivier Jacot-Descombes' excellent answer</a>.</p>

<blockquote>
<pre><code>    public override bool Faulty()
    {
        if (LogicalOperator == eLogicalOperator.Equal)
            return Value == Threshold;
        else if (LogicalOperator == eLogicalOperator.GreaterOrEqualThan)
            return Value &gt;= Threshold;
        else if (LogicalOperator == eLogicalOperator.GreaterThan)
            return Value &gt; Threshold;
        else if (LogicalOperator == eLogicalOperator.LowerOrEqualThan)
            return Value &lt;= Threshold;
        else if (LogicalOperator == eLogicalOperator.LowerThan)
            return Value &lt; Threshold;

        return false;
    }
</code></pre>
</blockquote>

<p>Enums support <code>switch</code>, and I don't think you'll find many people who claim that a chain of <code>if</code>/<code>else</code> is better style than a <code>switch</code>.</p>

<p>Also, most of the comparisons are fairly generic, in the sense that if you choose to follow Olivier's suggestion about a base non-generic class/interface and a generic implementation but not the suggestion about passing a delegate, it could have a base implementation using <code>Comparer&lt;T&gt;.Default()</code>:</p>

<pre><code>public class Metric&lt;T&gt; : IMetric&lt;T&gt;
{
    private static readonly IComparer&lt;T&gt; Comparer = Comparer&lt;T&gt;.Default;

    ...

    public T Value  { get; }
    public T Threshold  { get; }
    public eLogicalOperator LogicalOperator { get; }

    public virtual bool Faulty()
    {
        switch (LogicalOperator)
        {
            case eLogicalOperator.Equal:
                return Comparer.Compare(Value, Threshold) == 0;
            case eLogicalOperator.GreaterOrEqualThan:
                return Compare.Compare(Value, Threshold) &gt;= 0;
            case eLogicalOperator.GreaterThan:
                return Comparer.Compare(Value, Threshold) &gt; 0;
            case eLogicalOperator.LowerOrEqualThan:
                return Comparer.Compare(Value, Threshold) &lt;= 0;
            case eLogicalOperator.LowerThan:
                return Comparer.Compare(Value, Threshold) &lt; 0;
            default:
                throw new NotSupportedException($"Operator {LogicalOperator} is not supported for {typeof(T)}");
        }
    }
}
</code></pre>
    </div>