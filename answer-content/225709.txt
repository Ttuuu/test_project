<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Last answer deleted (instead of substantially revising).</p>

<p><strong>Notes</strong> (see comments in code)</p>

<ol>
<li><code>CalendarSpan</code> signed (date1 &gt; date2 =&gt; negative span)</li>
<li>Extension overload of <code>DateTime.Add()</code> taking CalendarSpan argument</li>
<li>Unit test approach (see <code>Main()</code> which iterates positive and negative differences, using <code>DateTime</code> functions to check integrity of results)  </li>
</ol>

<p>`</p>

<pre><code>using System;

namespace DateDiff
{
  static class Program
  {
    public readonly struct CalendarSpan 
    {
      public CalendarSpan(int months, int days)
      {
        Months = months;
        Days = days;
      }
      public readonly int Months;
      public readonly int Days;
    }

    //  Maintains sign-consistency, i.e. if l &gt; r returned value components are positive and if l &lt; r negative
    public static CalendarSpan MonthDaysDifference(this DateTime l, DateTime r)
    {
      var mDiff = l.Month - r.Month + 12 * (l.Year - r.Year);

      var dDiff = (l - r.AddMonths(mDiff)).Days;
      if (dDiff == 0 //  no day, the span is a whole number of months
          || l &gt; r &amp;&amp; dDiff &gt; 0 //  day and month differences ...
          || l &lt; r &amp;&amp; dDiff &lt; 0) //  ... have the same sign
        return new CalendarSpan(mDiff, dDiff);
      //  Signs differ
      var dSign = Math.Sign(dDiff);
      var mSign = Math.Sign(mDiff);
      //  It doesn't matter which sign is which, we adjust months in the correct direction
      mDiff += dSign;
      //  and recalculate days
      return new CalendarSpan(mDiff, (l - r.AddMonths(mDiff)).Days);
    }

    public static DateTime Add(this DateTime dt, CalendarSpan span)
    {
      return dt.AddMonths(span.Months).AddDays(span.Days);
    }

    //  Included to suggest how to test
    static void Main(string[] args)
    {
      for (int i = 0; i &lt; 1000; i++)
      {
        var date1 = new DateTime(2017, 12, 25).AddDays(i);
        for (int j = 0; j &lt; 1000; j++)
        {
          var date2 = new DateTime(2019, 01, 01).AddDays(j);
          var dateDiff = date1.MonthDaysDifference(date2);
          //var dateDiff2 = MonthDaysDifference(date1,date2);//just checking
          if (date2.Add(dateDiff) != date1)
          {
            Console.WriteLine($"ERROR: {date1:yyyy-MM-dd} - {date2:yyyy-MM-dd} = {dateDiff.Months} months + {dateDiff.Days} days");
            Console.WriteLine("Any key to exit");
            Console.ReadKey();
            return;
          }
          Console.WriteLine($"{date1:yyyy-MM-dd} - {date2:yyyy-MM-dd} = {dateDiff.Months} months + {dateDiff.Days} days");
        }
      }
    }
  }
}
</code></pre>
    </div>