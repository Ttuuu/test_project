<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Version incorporating all fixed bugs from various answers, with my own take on how to deal with the case where the intermediate result is 10 (aka M from the definition @Wikipedia) by adding another mod 10 operation to the check digit calculation, results in 0 if the sum mod 10 is 10, or the check digit otherwise. I also deleted the conversion to string because the reality is you have to handle UPCs as a string. Using Integer to represent UPC is bogus because UPCs can have leading 0's which are lost upon conversion to Integer.</p>

<p>At this point in time, all of the above have one or more bugs.</p>

<pre><code>    function valid_upc_a($upc) {

        if(!isset($upc[11])) {
            return FALSE;
        }

        $odd_sum = $even_sum = 0;

        for($i = 0; $i &lt; 11; ++$i) {
            if ($i % 2 == 0) {
                $even_sum += $upc[$i];
            }
            else {
                $odd_sum += $upc[$i];
            }
        }

        $total_sum = $even_sum + $odd_sum * 3;
        $modulo10 = $total_sum % 10;
        $check_digit = (10 - $modulo10) % 10;

        return $upc[11] == $check_digit;
    }
</code></pre>
    </div>