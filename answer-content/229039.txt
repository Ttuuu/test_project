<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><sub>Some observations and guidelines to get you started refactoring the code.</sub></p>

<h3>Check condition</h3>

<p>Checking a condition against a bool is rarely written like this in C#:</p>

<blockquote>
<pre><code>mayBeHigher == false
</code></pre>
</blockquote>

<p>Prefer:</p>

<pre><code>!mayBeHigher
</code></pre>

<hr>

<h3>Refactor variables to allow DRY code</h3>

<p>If you want to get rid of those if-statements with almost identical bodies, you should refactor your code in a way a single body would suffice.</p>

<p>For instance, you sometimes call <code>sum += pnlPerTick;</code> other times <code>sum -= pnlPerTick;</code>. The same occurs with <code>priceAtPnl += MinTick;</code> and <code>priceAtPnl -= MinTick;</code>. Ideally, you would want to do something like this:</p>

<pre><code>sum += offset;
priceAtPnl += priceDelta;
</code></pre>

<p>With <code>offset</code> calculated from <code>pnlPerTick</code> and <code>priceDelta</code> from <code>MinTick</code> given your parameters <code>position.pos</code> and <code>pnl</code>.</p>

<hr>

<h3>Refactor conditions for compactness</h3>

<p>The pattern of the conditions inside the if-statements could also be written in a more compact matter. The pattern is <code>(!a &amp;&amp; x + n &lt;= k) || (a &amp;&amp; x &lt;= k)</code> which could be rewritten as <code>x + (!a ? n : 0) &lt;= k</code>.</p>

<p>For instance,</p>

<blockquote>
<pre><code>while ((!mayBeHigher &amp;&amp; sum + pnlPerTick &lt;= pnl) || (mayBeHigher &amp;&amp; sum &lt;= pnl))
</code></pre>
</blockquote>

<p>Could be rewritten as:</p>

<pre><code>while (sum + (!mayBeHigher ? pnlPerTick : 0) &lt;= pnl))
</code></pre>

<p>Or if you introduce a variable <code>var padding = !mayBeHigher ? pnlPerTick : 0;</code> to:</p>

<pre><code>while (sum + padding &lt;= pnl))
</code></pre>
    </div>