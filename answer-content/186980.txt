<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>"Pointer" golfing?<br>
Continuing <a href="https://codereview.stackexchange.com/a/39261/93149">rolfl's clean-up</a>; supporting&amp;exploiting chaining:</p>

<pre><code>    public Node setNext(Node n) { Node o=next; next=n; return o; }
…
/** Reverses the list of &lt;code&gt;Node&lt;/code&gt;s sporting
 * &lt;code&gt;getNext()&lt;/code&gt; and &lt;code&gt;setNext(futureNext)&lt;/code&gt; */
public void reverse() {
    for (Node toReverse = start, inTransit = start = null ;
         null != toReverse ; start = inTransit)
        toReverse = (inTransit = toReverse).setNext(start);
    return this;
}
</code></pre>

<p>More or less random remarks:<br>
use doc comments<br>
<code>display()</code> is funny - rather override <code>toString()</code><br>
check corner cases (see, again, rolfl's answer, too); consider using JUnit<br>
consider implementing <code>java.util.List&lt;&gt;</code>/extending <code>java.util.AbstractList&lt;&gt;</code><br>
rename <code>insert()</code> to <code>append()</code> and <code>add()</code>/<code>insert()</code> at head  </p>

<pre><code>        Node(int newData, Node n) { data = newData; next = n; }
…
    /** Inserts &lt;code&gt;newData&lt;/code&gt; in front of list. */
    public ReverseLL add(int newData) {
        start = new Node(newData, start);
        return this;
    }
…
public static void main(String args[]) {
    ReverseLL ll = new ReverseLL();
    ll.reverse();
    ll.add(8);
    ll.reverse();
    for (int v = 8 ; 0 &lt; --v ; ) // just learned _ is reserved as of 1.8
        ll.add(v);
    ll.display();
    System.out.println();
    ll.reverse();
    ll.display();
}
</code></pre>
    </div>