<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You <a href="/a/226000/75307">already have a good review</a> with most of the points I was going to make (thanks vnp!).  A few that aren't mentioned there:</p>

<ul>
<li>We need a definition of <code>NULL</code> before we use it.  I recommend <code>#include &lt;stdlib.h&gt;</code>, for reasons evident in the next point.</li>
<li>We need a declaration of <code>malloc()</code> before we use it.  (This may be the reason you were casting the return value - that's wrong and dangerous).  Both <code>malloc()</code> and <code>free()</code> are declared by <code>#include &lt;stdlib.h&gt;</code>.</li>
<li>We need to include <code>&lt;stdio.h&gt;</code> for <code>fopen()</code> and <code>printf()</code>.</li>
<li>There's no checking that <code>argv[1]</code> converts to a positive integer.  Since <code>0</code> isn't a useful value for input, we can work with <code>atoi()</code>'s appalling interface here, and error if <code>number_of_lines &lt;= 0</code>.</li>
<li><p>Error messages should go to <code>stderr</code>, not <code>stdout</code>.  And to print a fixed line of text, we can use plain <code>fputs()</code> instead of the more heavyweight <code>fprintf()</code>:</p>

<pre><code>  fputs("Error!", stderr);
  return 1;
</code></pre></li>
<li><p>We can use <code>perror()</code> to get more informative messages following errors that set <code>errno</code>:</p>

<pre><code>FILE *f = fopen("file.txt", "r");
if (!f) {
    perror("file.txt");
    return EXIT_FAILURE;
};
</code></pre></li>
<li><p>Why are we opening a specific file anyway?  That's very inflexible.  It's more useful (and easier for us) to accept standard input, so we can operate within a pipeline.</p></li>
<li><p>What is <code>sizeof line</code> doing in the <code>fgets()</code> call?  <code>line</code> is a <code>char*</code>, but you probably want to read up to <code>LINE_SIZE</code> characters per line.  At present, the code behaves very badly when the input has lines longer than 6 characters on my system (and on systems with 4-byte <code>char*</code>, lines longer than 2 chars would be a problem).</p>

<blockquote>
<pre><code>while (fgets(temp, sizeof(line), f) != NULL) {
</code></pre>
</blockquote>

<p>It's also inefficient to read into <code>temp</code> only to allocate and copy into <code>line</code> - better to allocate first and read directly into <code>line</code> with no need for the copy.</p></li>
<li>Memory allocated for <code>temp</code> has no <code>free()</code> - this could be fixed simply by making it a <code>char[]</code> instead of dynamically allocated.  None of the lines read into the stack have a corresponding <code>free()</code>, and none of the stack nodes read but not printed has a <code>free()</code> - all meaning that we leak a vast amount of memory.</li>
<li>When finally printing the contents, why add extra newlines in between each line of input?  I'm not convinced that you've done any testing at all here.</li>
</ul>

<hr>

<p>Here's a slightly rewritten version fixing some of the above (but still not addressing the problem of storing far too much of the input):</p>

<pre><code>int main(int argc, char *argv[])
{
    if (argc &lt; 2) {
        fprintf(stderr, "usage: %s LINES\n", argv[0]);
        return EXIT_FAILURE;
    }

    int number_of_lines = atoi(argv[1]);
    if (number_of_lines &lt;= 0) {
        fputs("LINES must be a positive number\n", stderr);
        return EXIT_FAILURE;
    }

    FILE *f = fopen("file.txt", "r");
    if (!f) {
        perror("file.txt");
        return EXIT_FAILURE;
    };

    // push lines into stack
    Node *stack = stack_new();
    for (;;) {
        char *line = malloc(LINE_SIZE);
        if (!line) {
            fputs("Out of memory\n", stderr);
            return EXIT_FAILURE;
        }
        if (!fgets(line, LINE_SIZE, f)) {
            /* assume end of file */
            free(line);
            break;
        }
        stack_push(line, &amp;stack);
    }

    // pop and print n lines to screen
    for (int i = 0; i &lt; number_of_lines; i++) {
        char *line = stack_top(stack);
        fputs(line, stdout);
        free(line);
        stack_pop(&amp;stack);
    }

    // free the remainder of the stack
    while (stack) {
        free(stack_top(stack));
        stack_pop(&amp;stack);
    }
}
</code></pre>
    </div>