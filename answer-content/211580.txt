<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Questionable Design</strong> </p>

<p>The idea to read in the <em>entire</em> file and then process it has weaknesses:</p>

<ol>
<li><p>Code can only handle files fit-able in memory.  Risks allocation failures.</p></li>
<li><p>Limitations with file sizes more than <code>SIZE_MAX</code> and <code>LONG_MAX</code>.</p></li>
</ol>

<p>Code could read in 1 "word" at a time.  </p>

<p>If performance is an issue, then read in perhaps a block of memory at a time.</p>

<p><strong>Expand uses</strong></p>

<p>Consider if <code>argc == 2</code>, then with a stream view of the file as suggested above, <code>stdin</code> could be used as the input.  This makes for a useful "pipe-able" tool.</p>

<pre><code>foo | Ayxan_filter "gkmqvwxz"
</code></pre>

<p><strong>Certainly a bug on first word</strong> </p>

<p>Code's first call to <code>get_next_word_size()</code> is <code>get_next_word_size(1)</code>,  I'd expect <code>get_next_word_size(0)</code></p>

<p>Perform a  <code>size++</code> at the end of the loop rather than a <code>+ 1</code> at the beginning.</p>

<p><strong>Wrong type</strong></p>

<p>Precision specifier should be <code>int</code>, else code is UB.</p>

<pre><code>// printf("%.*s\n", msize, mbeg);
printf("%.*s\n", (int) msize, mbeg);
</code></pre>

<p>We can assume <code>msize &lt;= INT_MAX</code> too, but pedantic code would check that first.</p>

<p><strong>Questionable processing with binary mode</strong></p>

<p>File is opened in binary mode <code>"rb"</code> yet looks for <code>'\n'</code> as end-of-line.  I can foresee trouble with text files that end lines with <code>"\r\n"</code> or the rare <code>"\r"</code>.</p>

<p>For me, to be highly portable, I would still open in binary mode but use the presence of <code>'\n'</code> or <code>'\r'</code> as an end-of-line.</p>

<p><strong>Code can quit early</strong></p>

<p>Should the file contain a <em>null character</em>, its presence will stop the search early.  </p>

<p>Robust could would not treat the file as a <em>string</em>, but as a character array.</p>

<p><strong>Resource leak</strong></p>

<p><code>fclose(fp);</code> missing from various error returns from <code>get_buffer()</code>.</p>

<p><strong><code>islower()</code></strong></p>

<p><code>islower(int ch)</code> is defined for values in the <code>unsigned char</code> range and <code>EOF</code>.  Calling it with a <code>char</code> can lead to undefined behavior with a negative value.</p>

<pre><code>// char ch = tolower(*beg); 
char ch = tolower((unsigned char) *beg); 
</code></pre>

<p><strong><code>is_legal()</code> alternative</strong></p>

<pre><code>// No need for size, but append '\n' to the `bad` before this call.
static inline bool is_legal(const char* beg, /* size_t size, */ const char* bad) {
   char *y = strcspn(beg, bad);
   if (y == NULL) return true;
   return *y == '\n';
}
</code></pre>

<h2>Strongly recommend:</h2>

<p>To really move things along, rather than search each character to see it it is in a list of bad ones, create a table  (I'd do all using <code>unsigned char</code>)  This is reasonable as long as <code>UCHAR_MAX</code> is a sane a value.  I suspect this will measurable improve performance.</p>

<pre><code>bool bad_boys[UCHAR_MAX+1];
foo_populate(bad_boys, bad);

// Insure '\0', '\n' are true.
static inline bool is_legal_alt2(const char* beg, const bool *bad_boys) {
   const unsigned char* ubeg = (const unsigned char*) beg;
   while (!bad_boys[*ubeg]) {
     ubeg++;
   }
   return *ubeg == '\n' || ubeg == '\0';
}
</code></pre>

<p><strong>Code assumes <code>size_t</code> is like <code>long</code></strong></p>

<p>The length returned is a <code>long</code>.  Its range may be more or less than <code>size_t</code>.  Better code would not assume either.</p>

<pre><code>//size_t length;
//length = ftell(fp);
size_t length;
long ilength = ftell(fp);

#if LONG_MAX &gt;= SIZE_MAX
// &gt;= used here rather than &gt; due to later +1 in the allocation
if (ilength &gt;= SIZE_MAX) {
    perror("Too big\n");
    return NULL;         
}   
#endif

// Unclear what risks you want to take here.
// Suggest to just bail out
if (ilength &lt; 0) {
    perror("Unclear size\n");
    return NULL;            
}

length = (size_t) ilength;
</code></pre>

<p><strong>No check for <code>ftell()</code>, <code>fread()</code> error</strong></p>

<p>An error here is critical and not so improbable.</p>

<pre><code>ilength = ftell(fp);
// add
if (ilength == -1) {
    perror("ftell error\n");
    return NULL;            
}

//fread(buffer, 1, length, fp);  
if (fread(buffer, 1, length, fp) != length) {
    perror("fread error\n");
    return NULL;            
}
</code></pre>

<p><strong>Questionable style</strong></p>

<p>Consider a <code>while</code> loop</p>

<pre><code>//for (; beg[size] &amp;&amp; beg[size] != '\n'; ++size) /* read the next word */
//{ } /* for loop doesn't have a body */

while (beg[size] &amp;&amp; beg[size] != '\n') {
  ++size;
}
</code></pre>

<p><strong>Unneeded <code>free()</code></strong></p>

<p>No need for call <code>free(NULL)</code>;</p>

<pre><code> if (buffer == NULL) {
    perror("Failed to allocate memory\n");
//  free(buffer);  // not needed
    return NULL;
}
</code></pre>

<p><strong>Consider sentinels</strong></p>

<p>A "word" may have leading/trailing spaces.  In a pathological case, the longest word will be <code>""</code>.  Consider sentinels characters to show clearly the word.</p>

<pre><code>//printf("%.*s\n", msize, mbeg);
printf("\"%.*s\"\n", msize, mbeg);
</code></pre>
    </div>