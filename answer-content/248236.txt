<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Appreciable things:</p>
<ul>
<li>Documentation for implementations and sections made using comments.</li>
<li>Classes, functions and files following <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">Single Responsibility Principle</a>.</li>
<li>Descriptive names of functions. (not variables as I note below)</li>
<li>Testing framework! But the tests should check the inner functions too not just the whole program.</li>
</ul>
<hr>
<p>The terminology of file streams and filenames is very confusing and makes me look-up function return types or variable declaration too often.</p>
<p><code>Program::outputFile</code> is file<em>name</em> which is not clear here. I mistook it for <code>FILE*</code>.</p>
<p>In another place, <code>std::ofstream output;</code> output sounds like the output content of the program but it's a stream!</p>
<p><code>std::string output = getOutputFileData(this-&gt;outputFile);</code> And here it is a string again!</p>
<hr>
<p>The code doesn't take care of absolute and relative paths.</p>
<p>The test fails with this:</p>
<pre><code>runnerFiles/0x1005c05c0output.txt does not exist.
</code></pre>
<p>With such a code, I'd be very reluctant to use <code>rm</code>. At most, keep all the disposable files in a folder and ask user to delete it.</p>
<hr>
<pre><code>std::stringstream newCommand;
newCommand &lt;&lt; command;
newCommand &lt;&lt; "&gt;&gt; ";
newCommand &lt;&lt; outputFile;
newCommand &lt;&lt; " 2&gt;&amp;1";

system(newCommand.str().c_str());
</code></pre>
<p><code>std::stringstream</code> can be avoided and you can use concatenate <code>std::string</code>s directly as long as the first item is a <code>std::string</code>.</p>
<pre><code>std::string newCommand = command + "&gt;&gt; " + outputFile + "2&gt;&amp;1";
</code></pre>
<hr>
<p>The code in <code>getOutputFileData</code> that uses <code>FILE*</code> and char buffer (which you didn't even allocate!)  can be replaced with the following (add error handling)</p>
<pre><code>  std::ifstream run_output{outFileLocation};
  std::stringstream buffer;
  buffer &lt;&lt; run_output.rdbuf();
  return buffer.str();
</code></pre>
<ul>
<li><a href="https://stackoverflow.com/questions/2602013/read-whole-ascii-file-into-c-stdstring?noredirect=1&amp;lq=1">https://stackoverflow.com/questions/2602013/read-whole-ascii-file-into-c-stdstring?noredirect=1&amp;lq=1</a></li>
</ul>
<p>Since you don't need a fine control over lines, don't bother with <code>getline</code>.</p>
<blockquote>
<p>Prefer iostreams for I/O. iostreams are safe, flexible, and extensible.</p>
</blockquote>
<ul>
<li><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rio-streams" rel="nofollow noreferrer">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rio-streams</a></li>
</ul>
<hr>
<pre><code>std::ofstream output;
output.open(outFile);
output &lt;&lt; code;
output.close();
</code></pre>
<p>Can be made shorter as</p>
<pre><code>std::ofstream output(outFile);
output &lt;&lt; code;
</code></pre>
<p>Don't bother with closing if not needed. When <code>output</code> goes out of scope, file will be closed by itself. It's the same reason you don't go around deleting every trivially destructible <code>std::vector</code> or array which will be cleaned up automatically.</p>
<hr>
<p>Use <code>const &amp;</code> or <code>std::string_view</code>  where strings are only read. They're cheap to pass around and indicate the intent that the content will not be modified.</p>
<pre><code>std::string createFile(std::string lang, std::string code)
std::string getOutputFileData(std::string outFileLocation)
bool isSupportedLanguage(std::string lang)
void Program::cleanupFiles(std::string oldCommand)
</code></pre>
<hr>
<pre><code>auto iter = supportedLanguages.find(lang);
</code></pre>
<p>C++20 will have <code>contains</code> so that saves you a few lines.</p>
<ul>
<li><a href="https://en.cppreference.com/w/cpp/container/unordered_map" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/container/unordered_map</a></li>
</ul>
<hr>
<pre><code>this-&gt;code
</code></pre>
<p>Instead of <code>this-&gt;</code>, consider appending or prepending <code>_</code> to the variables to indicate that they're private members.</p>
<hr>
<p>It's more readable IMO if implementation order follows the declaration order for functions.</p>
<p>In <code>Program</code>, constructor can go to the top of the file, instead of the bottom.</p>
<ul>
<li><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#nl16-use-a-conventional-class-member-declaration-order" rel="nofollow noreferrer">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#nl16-use-a-conventional-class-member-declaration-order</a></li>
</ul>
    </div>