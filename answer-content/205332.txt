<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Functions like <code>execve</code> actually take a <code>char* const *</code>, so an array of <code>const</code> pointers, to mutable strings. So <code>strlist</code> could return <code>char* const *</code> instead.</p></li>
<li><p><code>strlist</code> should take the <code>input</code> argument by const reference, because it does not modify it.</p></li>
<li><p><code>char** result = new char*[input.size() + 1];</code> is needed, because an additional element (the trailing null pointer) is appended. (<code>array[3]</code> is an array of 3 items, with indices 0, 1, 2.)</p></li>
<li><p>Similarily, the strings need to allocated as <code>char *temp = new char[input[i].size() + 1];</code>, because <code>std::string::size</code> (or <code>std::string::length</code>) does not count the trailing 0 byte of the string.</p></li>
<li><p><code>std::strcpy</code> is needed, except if a <code>using</code> declaration was used before. In the C++ headers like <code>&lt;cstring&gt;</code>, the C functions are in the <code>std</code> namespace.</p></li>
<li><p>in <code>del_strlist</code>, <code>delete[]</code> needs to be used two times instead of <code>delete</code>, because the memory was allocated using <code>operator new[]</code>.</p></li>
<li><p>Because <code>del_strlist</code> is supposed to always finish (return false), it may be better to throw an exception if it does not, so that the user does not need to check the return value.</p></li>
</ul>

<hr>

<p>To avoid needing to have a deleting function <code>del_strlist</code>, it may be better to have a class that contains the allocated array, and deallocates it in the destructor. For example:</p>

<pre><code>class strlist {
private:
    std::vector&lt;char*&gt; cstrings_;

public:
    template&lt;typename It&gt;
    strlist(It begin, It end) {  // does not need std::vector as input
        for(It it = begin; it != end; ++it) {
            const std::string&amp; string = *it;
            char* cstring = new char[string.length() + 1];
            std::strcpy(cstring, string.c_str());
            cstrings_.push_back(cstring);
        }
        cstrings_.push_back(nullptr);
    }

    ~strlist() {
        for(char* cstring : cstrings_)
            if(cstring != nullptr) delete[] cstring;
    }

    char* const * data() const {
        return cstring_.data();
    }
};
</code></pre>

<p>And used like:</p>

<pre><code>void f() {
    std::vector&lt;std::string&gt; original_strings = ....
    strlist cstrings(original_strings.begin(), original_strings.end());
    execve("program", cstrings.data(), nullptr);
    // no need to call function to delete cstrings
}
</code></pre>

<hr>

<p>Some older C APIs may take <code>char*</code> arrays as input, but not actually modify the array contents. In that case it is simpler to not copy new strings, but take pointers to strings in the original array, using <code>const_cast</code>. For example:</p>

<pre><code>std::vector&lt;char*&gt; strlist(const std::vector&lt;std::string&gt;&amp; strings) {
    std::vector&lt;char*&gt; cstrings;
    for(const std::string&amp; string : strings)
         cstrings.push_back(const_cast&lt;char*&gt;(string.c_str()));
    cstrings.push_back(nullptr);
    return cstrings;
}
</code></pre>

<p>But this is a hack, and mostly useful only to gain performance / save memory.</p>
    </div>