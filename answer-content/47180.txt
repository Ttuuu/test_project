<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I get what you mean by "reversed":</p>

<p><img src="https://i.stack.imgur.com/sdjXl.png" alt="unit-of-work depends on repository"></p>

<p>As opposed to:</p>

<p><img src="https://i.stack.imgur.com/qBS8o.png" alt="repository depends on unit-of-work"></p>

<p>Makes sense, at least to me - the way I see UoW/Repository pattern (everybody seems to have their own take at this one, eh?), Entity Framework's <code>DbContext</code> is a unit-of-work, and an <code>IDbSet&lt;TEntity&gt;</code> is a repository.</p>

<p>Hence, I tend to agree with having unit-of-work depend on repositories and not the opposite. When we inherit <code>DbContext</code>, we expose <code>IDbSet&lt;TEntity&gt;</code> properties, and this is exactly what you've got here.</p>

<p>Thing is, if <code>DbContext</code> is a unit-of-work, and <code>IDbSet&lt;TEntity&gt;</code> is a repository... then what need is there to wrap it with infrastructure code that 
only buys additional complexity?</p>

<p>You're not showing how your UoW implementation is used in your controllers, but if you're using it directly, then you're playing with <code>IQueryable&lt;T&gt;</code> and you're not really wrapping anything, EF and Linq-to-Entities is bleeding out of every usage you're making of every repository call, making the extra abstraction <em>not-quite-an-abstraction</em>.</p>

<p>I have yet to see a UoW+Repository implementation with EF that will show me real benefits over using the <code>DbContext</code> directly in the controllers (or, more appropriately, in a dedicated, testable service class).</p>

<p>Instead, I tend to just go like this:</p>

<pre><code>public Interface IUnitOfWork
{
    IDbSet&lt;TEntity&gt; Set&lt;TEntity&gt;();
    void Save();
}

public class SomeContext : DbContext, IUnitOfWork
{
    public void Save() // base method returns an int that I don't want
    {
        base.SaveChanges(); // qualifier "base" is redundant, specified for readability
    }
}
</code></pre>

<p>Then, I can inject an <code>IUnitOfWork</code> and get an <code>IDbSet&lt;TEntity&gt;</code> for any entity type, and do everything EF has in store for me with that interface; the <code>IUnitOfWork</code> merely enables mocking, so I can set it up to return a mock <code>IDbSet&lt;Person&gt;</code> when <code>Set&lt;Person&gt;()</code> is called. Keep. It. Simple.</p>
    </div>