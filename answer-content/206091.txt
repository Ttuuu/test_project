<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We can improve your code in many areas.</p>

<p>First, a baseline on my laptop.  Run time for <code>N=70</code> is 16.4 seconds.</p>

<p><code>t(n)</code> is only called inside <code>dt(n)</code>, so we can avoid the extra function call and remove <code>t(n)</code> and move the calculation inside of <code>dt(n)</code>.
While doing so, we can see the calculation is actually being performed <span class="math-container">\$t(n)+1\$</span> times!  We should save the result of the calculation in a local variable <code>tn</code>:</p>

<pre><code>def dt(n):
    tn = n * (n+1) // 2
    count = 0
    for i in range(1, tn+1):
        if tn % i == 0:
            count += 1
    return count
</code></pre>

<p>Time for <code>N=70</code> drops to 4.5 seconds.</p>

<p>Counting factors from <code>1</code> to <code>tn</code> seems like it does a lot of extra work.  We can automatically include <code>1</code> and <code>tn</code> as factors, so we could start our count a 2 (assuming <code>tn&gt;1</code>), and only count the factors between <code>2</code> and <code>tn-1</code>.  But the largest possible factor below <code>tn</code> is <code>tn/2</code>, so we can cut that range in half.</p>

<pre><code>def dt(n):
    tn = n * (n+1) // 2
    if tn == 1:
      return 1
    count = 2
    for i in range(2,tn//2+1):
        if tn % i == 0:
            count += 1
    return count
</code></pre>

<p>Computes <code>N=70</code> in 2.1 seconds.</p>

<p>Our factors come in pairs.  <code>1</code> matches <code>tn</code>, <code>2</code> would match <code>tn//2</code> if <code>tn</code> is even, <code>3</code> would match <code>tn//3</code>, and so on.  We could count by <code>2</code> for every pair, and only count up to <span class="math-container">\$sqrt(tn)\$</span>.  Of course, we need to take into account the possibility of <code>t(n)</code> being a perfect square; <code>t(8) = 36 = 6*6</code>, so <code>6</code> should only count for 1 factor, not 2.</p>

<pre><code>def dt(n):
    tn = n * (n+1) // 2
    if tn == 1:
      return 1
    sqrt_tn = int(math.sqrt(tn))
    count = 2
    for i in range(2, sqrt_tn+1):
      if tn % i == 0:
        count += 2
    if sqrt_tn * sqrt_tn == tn:
      count -= 1

    return count
</code></pre>

<p>List comprehension can reduce the loop a little bit, too.</p>

<pre><code>def dt(n):
    tn = n * (n+1) // 2
    if tn == 1:
      return 1

    sqrt_tn = int(math.sqrt(tn))
    count = 2 + sum(2 for i in range(2, sqrt_tn+1) if tn % i == 0)
    if sqrt_tn * sqrt_tn == tn:
      count -= 1

    return count
</code></pre>

<p>Computes <code>N=70</code> in 0.3 seconds.</p>

<p>How many times are we calling <code>dt(n)</code> for any given value of <code>n</code>?  Does the same value get returned each time?  If so, why recalculate it?  <code>functools.lru_cache</code> can do the caching for us:</p>

<pre><code>@functools.lru_cache(maxsize=None)
def dt(n):
    tn = n * (n+1) // 2
    if tn == 1:
      return 1

    sqrt_tn = int(math.sqrt(tn))
    count = 2 + sum(2 for i in range(2, sqrt_tn+1) if tn % i == 0)
    if sqrt_tn * sqrt_tn == tn:
      count -= 1

    return count
</code></pre>

<p>Computes <code>N=70</code> in 0.09 seconds.</p>

<hr>

<p>Let's turn our attention to <code>tr(n)</code>.</p>

<pre><code>triples = [(i, j, k) for i in range(n)
                     for j in range(n)
                     for k in range(n)
                     if 1 &lt;= i &lt; j &lt; k &lt;= n and dt(i) &gt; dt(j) &gt; dt(k)]
</code></pre>

<p>If <code>1 &lt;= i &lt; j &lt; k &lt;= n</code>, why start <code>i</code> at 0, <code>j</code> at 0, and <code>k</code> at 0?  <code>j</code> should start at <code>i+1</code> and <code>k</code> at <code>j+1</code>.  And <code>k</code> should actually reach <code>n</code>, not <code>n-1</code> which is a bug.</p>

<pre><code>def tr(n):
    triplesnum = 0
    triples = [(i, j, k) for i in range(1, n-1)
                         for j in range(i+1, n)
                         for k in range(j+1, n+1)    # n+1: Bug fix
                         if 1 &lt;= i &lt; j &lt; k &lt;= n and dt(i) &gt; dt(j) &gt; dt(k)]
    for i in triples:
        triplesnum += 1

    return triplesnum
</code></pre>

<p>Computes <code>N=70</code> in 0.07 seconds.</p>

<p>Why generate the <code>tuple(i, j, k)</code> when we only count its existence?  Why generate an array only to count every element in it?</p>

<pre><code>def tr(n):
    return sum(1 for i in range(1, n-1)
                 for j in range(i+1, n)
                 for k in range(j+1, n+1)
                 if dt(i) &gt; dt(j) &gt; dt(k))
</code></pre>

<p>Computes <code>N=70</code> in 0.05 seconds.</p>

<p>Looks like a 328x speed-up, using just loops, list comprehensions and functions ... just by looking to avoid repeated work and overhead ... oh, and the @lru_cache decorator.</p>

<p>Unfortunately, <code>N=700</code> now takes 16 seconds.  So these incremental speedups aren't going to take you to <span class="math-container">\$Tr(60 000 000)\$</span> anytime in the near future.</p>

<hr>

<p>Oh, one last optimization.  Why loop over all the possible values of <code>k</code> when <code>dt(i) &gt; dt(j)</code> is <code>False</code>?</p>

<pre><code>def tr(n):
    return sum(1 for i in range(1, n-1)
                 for j in range(i+1, n)   if dt(i) &gt; dt(j)
                 for k in range(j+1, n+1) if dt(j) &gt; dt(k))
</code></pre>

<p>That brings <code>N=700</code> down to 5.9 seconds.  We now reach 16 seconds at <code>N=1000</code>.  60 million is still in the far, far future.</p>
    </div>