<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I understand that this is a code challenge, i.e a somewhat artificial exercise meant to show / test / improve your proficiency. But if you want the challenge to be more meaningful and challenging, you should consider it from a broader point of view: how user-friendly is my interface? is it extensible? is it idiomatic? does it fit nicely with the language concepts and abstractions?</p>

<p>I suspect you already know that your interface will discourage most users. It should be a lot more concise: <code>void print_permutations(const std::string&amp; src)</code>. But once you have offered a smooth interface, there is, especially in C++, a kind of promise you need to keep: don't make the user pay a price he wasn't warned about. But allocating two vectors the size of the original string is a price most of us wouldn't pay when it's well known there are efficient in-place algorithms.</p>

<h2>In-place permutations</h2>

<p>There are several strategies to achieve in-place permutations. One of the most efficient, without being complex at all, is <a href="https://en.wikipedia.org/wiki/Heap%27s_algorithm" rel="nofollow noreferrer">Heap's algorithm</a>. It's the first one to study (and I believe studying great algorithms is as profitable as devising your own). You could also take a look at the STL's approach: STL's algorithms generally are stateless and <code>std::next_permutation</code> is: it doesn't rely on a counter as Heap's algorithm, but generates the next permutation in the lexicographical order.</p>

<p>It's the first reason I would advise for a rewriting of your algorithm. The second is that it lacks orthogonality: printing and permuting are orthogonal tasks that should be separated.</p>

<h2>Orthogonality</h2>

<p>One of the most powerful concept behind C++ is generic programming. You don't code a <code>vector</code> of <code>int</code>s but a <code>vector</code> for an arbitrary type, for instance. And yet more interestingly, you don't code an algorithm for a specific purpose but for a generic one: in this case, not for printing every permutation, but for applying some function to every permutation. And while we're at it, we should be able to compute permutations of any string-like container.</p>

<p>That's why I would suggest another interface:</p>

<pre><code>template &lt;typename Iterator, typename Function&gt;
Function for_each_permutation(Iterator first, Iterator last, Function fn);
</code></pre>

<h2>Concrete implementation tips</h2>

<p>Apart from @vpn's advice:</p>

<p><em>use range-based for loops:</em> </p>

<pre><code>for (size_t i = 0; i &lt; string_length; ++i) {
    cout &lt;&lt; input.at( positions.at(i) );
} // a bit ugly

for (auto pos : positions)
    std::cout &lt;&lt; input[pos]; // nicer
</code></pre>

<p><em>don't abuse <code>using</code> directives.</em> It's a nice effort not to import the whole namespace, but that long a list of <code>using</code>s will be hard to maintain properly. Typing <code>std::</code> is a pain only the first few hundred times, after that you don't think about it anymore.</p>
    </div>