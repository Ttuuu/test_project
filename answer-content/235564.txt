<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Don't use <code>#define ll long long int</code> and don't use <code>long long int</code> either. Use <code>auto</code> for values and <code>size_t</code> for indices and cardinalities.</p></li>
<li><p>Your method should take iterators as parameters. It will still work with vectors, but also with linked lists and other containers.</p></li>
<li><p>Have a well defined behaviour for corner cases, such as empty lists. This behaviour should be documented in a comment.</p></li>
<li><p>Don't use indices and index calculations if not neccessary. There are container types that don't support indexing.</p></li>
<li><p>Dont't erase or otherwise modify the container or its contents if not neccessary or expected by the caller.</p></li>
<li><p>This particular problem can be solved by iterating over the list just once (see code below).</p></li>
</ul>

<p>I would have written it like this:</p>

<pre><code>template &lt;class ForwardIterator&gt;
size_t count_longest_sorted_subsequences (ForwardIterator first, ForwardIterator last)
{
    // The empty list contains no subsequences. If you want a different behavior,
    // such as one subsequence of zero length, modify these two lines.
    size_t maxlength = 0;
    size_t maxcount = 0;
    auto next = first;
    while (next != last)
    {
        // Move the 'next'-iterator until a decreasing element is discovered.
        // Count the number of moves (also works for non-random access iterators).
        size_t length = 1;
        auto prev = next++;
        while (next != last &amp;&amp; *prev &lt;= *next)
        {
            length++;
            prev = next++;
        }
        // Adjust 'maxlength' and 'maxcount'
        if (length == maxlength)
        {
            maxcount++;
        }
        else if (length &gt; maxlength)
        {
            maxlength = length;
            maxcount = 1;
        }
    }
    return maxcount;
}
</code></pre>
    </div>