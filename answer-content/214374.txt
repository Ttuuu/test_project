<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Objects not classes</h1>
<p>In JavaScript there are no classes only Objects. The token <code>class</code> is just an alternative syntax (often referred to as syntactical sugar) for defining an Object.</p>
<h2>Many ways to create objects</h2>
<p>The following shows two very similar objects defined using class syntax and standard syntax</p>
<pre><code>class Foo {
   constructor() { this.bar = "A" }
   poo() {}
}

function Foo() { this.bar = "B" }
Foo.prototype = { poo() {} }
</code></pre>
<p>You can also define the object as...</p>
<pre><code>function Foo() {
   this.bar = "C";
   this.poo = function(){};
}
</code></pre>
<p>or...</p>
<pre><code>const Foo = {
    bar: "D",
    poo() {},
};
</code></pre>
<p>or...</p>
<pre><code>const Foo = () =&gt; ({
    bar: "D",
    poo() {},
});
</code></pre>
<p>...and there are many more ways to define an object.</p>
<h2>Which to use</h2>
<p>Which you use is very dependent on how you use the object.</p>
<ul>
<li>Is there more than one instance?</li>
<li>What is the life time of an instance?</li>
<li>Do you need to extend the object? (polymorphic)</li>
<li>What level of encapsulation is required?</li>
<li>Do you need an inheritance model?</li>
<li>How do you wish to instantiate the object?</li>
<li>What is the legacy support requirement?</li>
</ul>
<p>To know the language you must be proficient in all its forms, and know what is the appropriate code to use.</p>
<h2>Questions</h2>
<blockquote>
<p>Is this something that would benefit from being a class?</p>
</blockquote>
<p>No as there are no classes in JavaScript.</p>
<blockquote>
<p>A <code>LightboxCollection</code> class for example? That has an array <code>Lightbox</code>?</p>
</blockquote>
<p>You can create a collection from an <code>Array</code>. Assuming you are using only a single instance. It has all the functions that an array has plus what ever you want to add. Eg <code>add</code></p>
<pre><code>const LightboxCollection = (() =&gt; {
    return Object.assign([],{
         add(lightBox){ this.push(lightBox) },
    });
})();
</code></pre>
<p>Or encapsulate the array, so you can maintain the array state (vet items and expose only functions that you need)</p>
<pre><code>const LightboxCollection = (() =&gt; {
    const items = [];
    return Object.freeze({
         add(lightBox) { lightBox instanceof LightBox &amp;&amp; items.push(lightBox) },
         get length() { return items.length },
         set length(len) { items.length = len &lt; items.length ? len : items.length },
         forEach: items.forEach.bind(items),
    });
})();   
</code></pre>
    </div>