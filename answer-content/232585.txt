<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As others have mentioned, python has a style guide, PEP8. It's very useful for yourself and people reading your code if you follow this guide as it makes your code consistent, readable and idiomatic.</p>

<p>You have some typos and warnings in your code which show up immediately in my editor. It's worth looking at using an IDE to see these while you're writing. Personally I use Pycharm which has a free community edition.</p>

<p>When comparing to <code>0</code> or <code>False</code>, just use <code>not</code>. It is clearer and more idiomatic. e.g. <code>if not condition(): ...</code> or <code>if not i % 2: ...</code>.</p>

<p>Don't name things <code>Print()</code> or other python built-in names. Be more descriptive. e.g. <code>display_board()</code> or something similar.</p>

<p>Handling user input is often where a while loop is used to set an exit condition. It's usually recommended to only take a few incorrect answers, and to have better handling of invalid inputs. Take the following for example:</p>

<pre class="lang-py prettyprint-override"><code>max_attempts, input_attempts = 3, 0
input_number = None

while input_attempts &lt; max_attempts:
    try:
        input_number = int(input('Please select a number between 0 and 8: '))
        if 0 &lt;= input_number &lt;= 8:
            # Input is valid, exit loop
            break
        else:
            print('Invalid input, input must be between 0 and 8')
            input_number = None
    except ValueError:
        print('Invalid input, input must be an integer')
        input_attempts += 1

if input_number is None:
    raise RuntimeError('No valid user input obtained.')
</code></pre>

<p>Here, I've clearly defined the maximum number of attempts, so there's no "magic number" 3 which may be confusing. I've handled different kinds of invalid input: not a string which can be cast to an int, or not a number between 0 and 8. I've also created an exit condition which is very clear and has a description for what is going on. This all may seem a little over the top for tic-tac-toe but it's good practice for the future.</p>

<p>@Sam-Stafford has some good suggestions for an alternative implementation of <code>condition()</code>. Checking against the list of winning positions is a good idea but I would not write it as an inner function, there's also no need to <code>return None</code> if no winner is found. Just check the board from turn 5 onwards for a winner.</p>

<p>It would be good to keep track of whose turn it is and exit when all of the board is filled in.</p>

<p>As for the class structure, personally I would have one class which keeps track of the board, it would contain win conditions and limits on size etc. Then a separate function which handles the game itself with user input etc. Inheritance shouldn't be necessary and I would discourage it in this case.</p>

<p>Hope that helps.</p>
    </div>