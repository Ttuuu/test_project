<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall the code looks good and you seem to have some good programming habits. You need to try to use more of the features available in C++ and the STL.</p>

<h2>Avoid <code>using namespace std;</code></h2>

<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<h2>Variable in Array Declarations</h2>

<p>Using a strict C++ compiler the following code does not compile</p>

<pre><code>    int num = 7;
    int arr[num] = {120, 30, 115, 40, 50, 100, 70};
</code></pre>

<p><em>Use the std::vector container class. Most or all of the container of the container classes have a size() member that returns the number of items stored in the container. This means if you have to pass the array you only have to pass the container class and not the number of elements in the container.</em></p>

<pre><code>    std::vector&lt;int&gt; arr = {120, 30, 115, 40, 50, 100, 70};
</code></pre>

<p><em>If you insist on using old style C programming arrays you can get num after the initialization of the array.</em></p>

<pre><code>    int arr[] = {120, 30, 115, 40, 50, 100, 70};
    size_t num = sizeof(arr)/ sizeof(*arr);
</code></pre>

<p><em>Declare num as a constexpr.</em></p>

<pre><code>    constexpr size_t num = 7;
    int arr[num] = {120, 30, 115, 40, 50, 100, 70};
</code></pre>

<p>Prefer container classes over old C style arrays. They are easier to use, here's an example updating on of the functions in the code. Note that the `std::vector.size() function is not referenced in the following code.</p>

<pre><code>void insertArrayTree(std::vector&lt;int&gt; arr, Node* &amp;tree)     //insert the array integer into the nodes label of BST
{
    for (int i: arr)
    {
        insertSearchNode(tree, i);
    }
    return;
}
</code></pre>

<p>The above for loop is called a <a href="https://en.cppreference.com/w/cpp/language/range-for" rel="nofollow noreferrer">ranged for loop</a>.</p>

<h2>Use Modern C++ Constructs</h2>

<p>In several places in the code there is the assignment of <code>NULL</code> to pointers. In modern C++ <code>NULL</code> has been replaced by nullptr.</p>

<pre><code>void insertSearchNode(Node* &amp;tree, int x)       //insert integer x into the BST
{
    if(!tree){
        tree = new Node;
        tree-&gt;label = x;
        tree-&gt;right = nullptr;
        tree-&gt;left = nullptr;
        return;
    }
    if(x &lt; tree-&gt;label) insertSearchNode(tree-&gt;left, x);
    if(x &gt; tree-&gt;label) insertSearchNode(tree-&gt;right, x);
    return;
}
</code></pre>

<h2>Possible Bug</h2>

<p>The above code does not handle the case where x is already in the tree, in large lists of values there may be duplicates.</p>

<h2>Return from Main()</h2>

<p>In a program as simple as this the <code>return 0;</code> statement is not necessary, the compiler will take care of it. The <code>return</code> statement is necessary when the program might exit due to failures <code>return ;</code>. In this case you would need both <code>return 1;</code> and <code>return 0;</code>. It would also be better in this case to include <code>cstdlib</code> and use <code>return EXIT_SUCCESS;</code> and <code>return EXIT_FAILURE;</code> to make the code more readable.</p>
    </div>