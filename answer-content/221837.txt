<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few observations off the top of my head</p>

<p><code>cerrMutex</code> is unused, and should be removed if not needed.</p>

<p><code>mapMutex</code> is used to guard a static <code>std::map</code> but is itself a regular class member variable. That suggests it probably isn't guarding the map against concurrent access. This is probably a bug.</p>

<p>This seems like a fairly heavyweight tool. The uses of maps and strings all smell bloaty. That's not of itself a killer, but it's worth being at least aware of. If there were the possibility of just using, say, object-local integers for counting (and perhaps a function scope static declaration to use the same counting variables), that would probably be lighter. </p>

<p>On the other hand, in a general use case, concurrency causes problems whenever two threads are interacting with the same resource, not only when executing the same function. For example this tool would be significantly more useful if it could detect different threads concurrently running two methods of a single object.<br>
At the same time, it would be more helpful if it actually <strong>did not</strong> interfere with two threads each holding their own object of a given class and each running methods on their own object. This is perhaps more of a documentation enhancement suggestion: your rough approach could work by changing what ID you pass, but it would benefit from examples. (And don't go changing it to make it lightweight if it means losing the ability to do this!)</p>

<hr>

<p>A final thing that is worth thinking about is whether this causes any inadvertant synchronisation that actually masks the very problems you're trying to detect. This is hard to predict, because schedulers can be such a dark art in general, but you could run into a problem like this.</p>

<p>Suppose that you have two threads running a function that does something lightweight, perhaps just increment a shared integer. Without this tool in place, you'd expect them to keep stomping on each other. </p>

<p>Because you're syncing up on <code>mapMutex</code> (which I'm going to assume as above is meant to be static) then each call to the function has to do a lot of extra work in the constructor and destructor of your tool, and that is all under exclusion. If thread 2 starts while thread 1 is still in the constructor, it will fail to take <code>mapMutex</code> and the scheduler will probably send it to sleep for a bit. The window for it to wake up in which thread 1 is in the function and does not have the mutex is actually quite small. What you could get, then, is the function seems to behave fine (albeit slowly) while this object is trying to help with debugging and then goes back into data races for release code when the debug object is removed. Suffice to say, that's unhelpful! </p>

<p>I don't have any suggestions about how to fix this problem, just that it's the sort of thing that is worth being aware of. </p>
    </div>