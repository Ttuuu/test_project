<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>list</code></h1>

<p>A <code>str</code> is an iterable itself, so calling <code>list</code> on it in <code>w = set(list(w))</code>  and <code>for x, i in enumerate(list(s)):</code> is unnecessary.</p>

<h1><code>set</code></h1>

<p>a set only has the unique elements. If the word <code>w</code> contains any double letters, they will be only counted once. A <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> is a more appropriate data structure </p>

<h1><code>deque</code></h1>

<p>For the queue, a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>deque</code></a> (double ended queue) would be a better data structure then a list for additions on one end, and pops on the other. If you define the <code>maxlen</code>, you don't even need to explicitly pop. </p>

<h1>generators</h1>

<p>You can forgo the <code>index</code> list, and instead <code>yield</code> the index at which there is an anagram</p>

<pre><code>def anagram_indices2(w, s):
    len_w = len(w)
    if len_w &gt; len(s):
        return # or raise an Exception
        # raise ValueError("`w` must not be at longer than `s`")

    word_counter = Counter(w)
    queue = deque(s[:len_w-1], maxlen=len_w)

    for i, char in enumerate(s[len_w-1:]):
        queue.append(char)
        if Counter(queue) == word_counter:
            yield i
</code></pre>

<p>The <code>s[:len_w-1]</code> is so you don't have to make a separate check for the first round of words</p>

<p>Which gives:</p>

<pre><code> list(anagram_indices2(word, string))
</code></pre>

<blockquote>
<pre><code>[0, 3, 4]
</code></pre>
</blockquote>

<pre><code> list(anagram_indices2("abab", "abxbabas"))
</code></pre>

<blockquote>
<pre><code>[3]
</code></pre>
</blockquote>
    </div>