<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Ownership</h2>

<p>This:</p>

<pre><code>// NOTE: The Animation object is responsible for the DELETION of the 
// GraphicsWindow object, the Visualisation object and the DynamicalSystem
// object. In effect is behaves like a smart triple pointer!
//

Animation::~Animation() {
    delete ptrWindow_;
    delete ptrVisualisation_;
    delete ptrSystem_;
</code></pre>

<p>sets off alarm bells. There are new methods for C++ to safely transfer ownership of a pointer; it used to be <code>auto_ptr</code> and now <code>unique_ptr</code> is recommended. Among other things, it will greatly simplify your destructor. Further reading: <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/memory/unique_ptr</a></p>

<p>Even if you didn't use an autopointer, these:</p>

<pre><code>DynamicalSystem* ptrSystem_;
Visualisation*   ptrVisualisation_;
GraphicsWindow*  ptrWindow_;
</code></pre>

<p>can be made <code>const</code> (the pointer itself does not change), i.e.</p>

<pre><code>DynamicalSystem *const ptrSystem_;
Visualisation *const ptrVisualisation_;
GraphicsWindow *const ptrWindow_;
</code></pre>

<h2>Boolean expressions</h2>

<pre><code>if (status == false) {
</code></pre>

<p>should simply be</p>

<pre><code>if (!status) {
</code></pre>

<h2>Structured coordinates</h2>

<p>This:</p>

<pre><code>const double* ptrMolecule = ptrSystem-&gt;getStatePtr();
// ...

    GLfloat x = static_cast&lt;GLfloat&gt;(ptrMolecule[0]);
    GLfloat y = static_cast&lt;GLfloat&gt;(ptrMolecule[1]);
    GLfloat z = static_cast&lt;GLfloat&gt;(ptrMolecule[2]); 
</code></pre>

<p>seems like a misuse of unsafe pointer references. The moment that you return a pointer, you lose information about the size of the array. In this particular case, if you were to keep it as a <code>const</code> reference to a vector, you could still index into it - but the indexing would have bounds-checking safety.</p>

<h2>Templating</h2>

<p>You may want to consider making the degree of freedom of <code>DynamicalSystem</code> an integer template parameter. That way, children such as <code>MoleculeSystem</code> can quickly and simply declare the DOF in the inheritance clause, and you can use a simple array instead of a <code>vector</code>.</p>
    </div>