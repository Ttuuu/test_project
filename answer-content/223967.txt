<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>Function TirNoPer360(Cash, Dates As Range, rate As Double)
</code></pre>
</blockquote>

<p>The function is implicitly <code>Public</code>, implicitly returns a <code>Variant</code>, and implicitly receives all its parameters <code>ByRef</code>; <code>Cash</code> is implicitly a <code>Variant</code>, and the name isn't making it obvious that...</p>

<blockquote>
<pre><code>If Opt(Cash, Dates, rate)
</code></pre>
</blockquote>

<p>...</p>

<blockquote>
<pre><code>Function Opt(Caja, Fecha As Range, tasa As Double)
    '...
    For i = 1 To Caja.Rows.Count
</code></pre>
</blockquote>

<p>...that <code>Cash</code> (and <code>Caja</code>) really needs to be a <code>Range</code> object, otherwise things can go all kinds of wrong.</p>

<p>Make these things explicit, pass parameters <code>ByVal</code>, and keep the same identifiers when concepts are the same:</p>

<pre><code>Public Function TirNoPer360(ByVl Cash As Range, ByVal Dates As Range, ByVal rate As Double) As Double
</code></pre>



<pre><code>Private Function Opt(ByVal Cash As Range, ByVal Dates As Range, ByVal rate As Double) As Double
</code></pre>

<p>Now it's much clearer that...</p>

<ul>
<li><code>TirNoPer360</code> is the public UDF, and <code>Opt</code> is a private implementation detail of it.</li>
<li><code>Cash</code> in <code>TirNoPer360</code> is the same thing as what you had as <code>Caja</code> in <code>Opt</code>.</li>
<li>The function(s) return a <code>Double</code></li>
</ul>



<p>This block needs immediate attention:</p>

<pre><code>If Opt(Cash, Dates, rate) &gt; 0 And Opt(Cash, Dates, rate) &gt; tolerance Then
    rate = rate + 0.0000001
ElseIf Opt(Cash, Dates, rate) &lt; 0 And Opt(Cash, Dates, rate) &lt; tolerance * -1 Then
    rate = rate - 0.0000001            
Else
    rate = rate
End If
</code></pre>

<p>The entire <code>Else</code> block is no-op and should be removed. <code>rate</code> is already equal to <code>rate</code>, but the biggest inefficiency here is the fact that, in the worst case, <code>Opt</code> is invoked 4 times, and it's a very expensive function call. Pull it into a local variable (<a href="https://codereview.stackexchange.com/a/223958/23788">as was already suggested</a>) and call it <em>once</em>:</p>

<pre><code>Dim optResult As Double
optResult = Opt(Cash, Dates, rate)
</code></pre>

<p>And now the conditionals become:</p>

<pre><code>If optResult &gt; 0 And optResult &gt; tolerance Then
    rate = rate + 0.0000001
ElseIf optResult &lt; 0 And optResult &lt; tolerance * -1 Then
    rate = rate - 0.0000001            
End If
</code></pre>

<p>The <code>tolerance</code> looks like it should be an optional parameter, with a default value of <code>0.00001</code>. You could amend the function's signature like this:</p>

<pre><code>Public Function TirNoPer360(ByVl Cash As Range, ByVal Dates As Range, ByVal rate As Double, Optional ByVal tolerance As Double = 0.00001) As Double
</code></pre>

<p>Variable <code>Iteration</code> is not declared. I like that it's a fully spelled-out identifier and not just <code>i</code>, but given the variable has no use other than counting the number of iterations... so <code>i</code> wouldn't hurt at all. Just <em>declare it</em> - the fact that the code is allowed to run without this variable being declared indicates that <code>Option Explicit</code> is not specified at the top of the module, and that's a very dangerous thing, because any typo will merrily compile and run.. and produce the wrong results... and typos can be hard to spot. Spare yourself the trouble, and <em>always</em> put <code>Option Explicit</code> at the top of <em>every</em> module you ever write any code in.</p>

<blockquote>
  <p><em>I need more than 100 tries in order to get a good rate</em></p>
</blockquote>

<p>Your function needs to define a concept of what a "good rate" is, and bail out (<code>Exit Function</code>, or <code>Exit For</code>) when it gets one. Currently, the function performs 100 iterations every time, regardless of whether the 2nd or 99th iteration yielded a "good rate".</p>

<blockquote>
<pre><code>    TirNoPer360 = rate
Next Iteration
</code></pre>
</blockquote>

<p>You're re-assigning the function's return value at every iteration. That's a redundant step, just assign it once, after the loop:</p>

<pre><code>Next Iteration
TirNoPer360 = rate
</code></pre>

<p>Now, about that <code>Opt</code> function...</p>

<blockquote>
<pre><code>For i = 1 To Caja.Rows.Count
    sum = sum + Caja(i) / ((1 + tasa) ^ (Application.WorksheetFunction.Days360(Initial, Fecha(i)) / 360))
Next i
</code></pre>
</blockquote>

<p><code>i</code> should be declared as a <code>Long</code>, not an <code>Integer</code>. I don't know how many rows this function is iterating, but <code>Caja</code> being a <code>Range</code> means it's absolutely possible that there are more than 32,767 (the maximum value an <code>Integer</code> can take).</p>

<p>The function would be more efficient if you were iterating a single-dimensional <code>Variant</code> array rather than a <code>Range</code>.</p>

<p>Consider declaring <code>Caja</code> and <code>Fecha</code> parameters <code>ByVal...As Variant</code>, and passing them from <code>TirNo360</code> like so:</p>

<pre><code>Public Function TirNoPer360(ByVl Cash As Range, ByVal Dates As Range, ByVal rate As Double, Optional ByVal tolerance As Double = 0.00001) As Double

    Dim cashValues As Variant
    cashValues = Application.WorksheetFunction.Transpose(Cash.Value)

    Dim dateValues As Variant
    dateValues = Application.WorksheetFunction.Transpose(Dates.Value)

    Dim optResult As Double
    optResult = Opt(cashValues, dateValues, rate)
</code></pre>

<p>Now instead of this:</p>

<blockquote>
<pre><code>For i = 1 To Caja.Rows.Count
    sum = sum + Caja(i) / ((1 + tasa) ^ (Application.WorksheetFunction.Days360(Initial, Fecha(i)) / 360))
Next i
</code></pre>
</blockquote>

<p>You'll have this (assuming the <code>Caja</code> parameter is now named <code>cashValues</code>):</p>

<pre><code>Dim firstDate As Date
firstDate = dateValues(1)

For i = LBound(cashValues) To UBound(cashValues)
    sum = sum + cashValues(i) / ((1 + rate) ^ (Application.WorksheetFunction.Days360(firstDate, dateValues(i)) / 360))
Next
</code></pre>

<p>Now the only thing left to address, is the function names: I've no idea what <code>TirNoPer360</code> actually stands for, and <code>Opt</code> is very cryptic. Give your functions meaningful names that ideally start with a verb, like, <code>FindOptimalRate</code> or something.</p>
    </div>