<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's my two cents:</p>

<ol>
<li><p>Do not <code>using namespace std;</code>.  It causes serious problems and is considered bad practice.  See <a href="https://stackoverflow.com/q/1452721/9716597">Why is <code>using namespace std;</code> considered bad practice?</a>.</p></li>
<li><p>Consider wrapping your class in a header so that it can be reused.  Use an include guard.</p></li>
<li><p><code>MinHeap</code> is a common name that may cause name clash.  Consider placing it in a namespace.</p></li>
<li><p><code>MinHeap</code> only supports <code>int</code>s.  You can make <code>MinHeap</code> a template.</p></li>
<li><p>Right now <code>MinHeap</code> can only be default initialized to empty.  Consider adding a constructor to initialize the <code>MinHeap</code> with a list of values.</p></li>
<li><p>Your comments apply to the function, instead of the first line of the function body.  They should really go outside the function.</p>

<pre><code>// this function foos the bar
void foo(int bar)
{
    ...
}
</code></pre></li>
<li><p>You use <code>int</code> for indexes.  This is not good because <code>int</code> may be too narrow â€” <code>INT_MAX</code> may be as small as <code>32767</code>.  Use <code>std::size_t</code> instead.</p></li>
<li><p>All of your functions that return an index have the suffix <code>_index</code>, except <code>get_min_child</code>.  I would suggest renaming it to <code>min_child_index</code> to be consistent.</p></li>
<li><p>Don't write the whole branch on the same line.  This decreases readability.  Instead of</p>

<pre><code>if (2*index + 2 &lt; heap.size()) return 2;
else if (2*index + 1 &lt; heap.size()) return 1;
else return 0;
</code></pre>

<p>Do</p>

<pre><code>if (2*index + 2 &lt; heap.size())
    return 2;
else if (2*index + 1 &lt; heap.size())
    return 1;
else
    return 0;
</code></pre></li>
<li><p>In <code>left_child_index</code> and <code>right_child_index</code>, <code>ind</code> can be computed in the <code>if</code> statement.  (C++17)</p></li>
<li><p>You <code>swap(heap[0], heap.back())</code> then immediately <code>heap.pop_back()</code>.  You are not doing heap sort, you are popping the value.  Just <code>heap[0] = heap.back()</code>.</p></li>
<li><p>Incidentally, the standard library offers a couple of <a href="https://en.cppreference.com/w/cpp/algorithm#Heap_operations" rel="noreferrer">heap operations</a>, and also <a href="https://en.cppreference.com/w/cpp/container/priority_queue" rel="noreferrer"><code>priority_queue</code></a>.  Maybe you can use them to simplify your implementation.</p></li>
</ol>
    </div>