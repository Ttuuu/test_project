<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In general, prefer to use the narrowest possible scope for variables. Old-school JavaScript is an exception for technical reasons to do with its scope rules being rather unusual and catching out people who were used to other languages: <code>let</code> was introduced to address that problem.</p>

<p>In short, <code>product</code> should be declared inside the loop over <code>j</code>.</p>

<p>Also, given the way it's used, it makes reasonable sense for it to be <code>"" + i*j</code> so that the conversion from number to string is only done once.</p>

<hr>

<blockquote>
<pre><code>            if(("" + product) == ("" + product).split("").reverse().join("")){
                largest = Math.max(largest, product);}
}
    }
</code></pre>
</blockquote>

<p>What happened to the whitespace there?</p>

<hr>

<blockquote>
  <p>So how can I make it more efficient and faster?</p>
</blockquote>

<p>Often the key to making something much faster is to use a completely different approach.</p>

<p>The challenge requires you to</p>

<blockquote>
  <p>Find the largest palindrome made from the product of two 3-digit numbers.</p>
</blockquote>

<p>but it doesn't tell you <em>how</em> to do that.</p>

<p>One approach is to look at products of 3-digit numbers, filter to palindromes, and find the largest product which passes the filter. This is the approach you've taken, and the one taken by all of the answers so far.</p>

<p>Another approach is to look at 6-digit palindromes in reverse order and filter to products of 3-digit numbers:</p>

<pre><code>for (let d50 = 900009; d50 &gt; 0; d50 -= 100001) {
    for (let d41 = 90090; d41 &gt;= 0; d41 -= 10010) {
        for (let d32 = 9900; d32 &gt;= 0; d32 -= 1100) {
            let palindrome = d50 + d41 + d32;
            for (let x = Math.ceil(palindrome / 999); x &lt; 1000 &amp;&amp; x * x &lt;= palindrome; x++) {
                if (palindrome % x === 0) {
                    return palindrome;
                }
            }
        }
    }
}
</code></pre>

<p>In my benchmarking this is twice as fast as the fastest proposal so far in this thread, and I haven't even micro-optimised it. (To do that: replace <code>x * x</code> with <code>x2</code>, initialised to <code>x * x</code> and then updated as <code>x2 += 2*x + 1</code>).</p>
    </div>