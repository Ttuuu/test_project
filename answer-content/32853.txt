<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>First things first</h2>

<p>When your scripts start to grow unruly like this it is usually a good idea to try and break them down into their component parts and compartmentalize functionality. I'm going to go through just a couple parts of your script with a few ideas that might help to 'modularize'. Doing so can help you with debugging in the future, as well as clarifying your thought process on <em>what</em> you are currently doing or not doing.</p>

<p>I haven't tried to radically re-implement what you're doing but your use of a CSV file as a container for the search page links seems a little unnecessary. Much of your script is spent doing something like:</p>

<blockquote>
  <p>parsed html &gt;&gt; CSV &gt;&gt; list</p>
</blockquote>

<p>It could be easier to instead work directly on the list and data - unless you want to use the CSV files for something else later. The list of HTML links won't be a memory issue unless it explodes to thousands and thousands of links (a 10k character string takes 10033 bytes on my machine)</p>

<h2>Modules You may be interested in</h2>

<p>Two modules I would recommend are the <a href="http://docs.python.org/2/library/csv.html" rel="nofollow noreferrer">CSV module</a>, which simplifies much of what you're doing and extends your ability to work with CSV files. Also, for these examples I've used the <a href="http://www.python-requests.org/en/latest/" rel="nofollow noreferrer">Requests</a> library rather than urllib/urllib2. This is more a style choice than a critique of your code - but you might look into it and see which you prefer.</p>

<h2>Parse HTML function</h2>

<pre><code>def build_list_of_links(ebay_page_url):
    page = requests.get(page_url).text
    soup = BeautifulSoup(page)
    list_of_links = []
    for item in soup.find_all('a', {'itemprop':'name'}):
        list_of_links.append(item.get('href'))
    return(list_of_links)
</code></pre>

<p>Arguably, the first useful thing your script does is parse the webpage, which is what I've amended above. You mention that your code is currently prone to crashing. This won't necessarily do anything to improve reliability but it can provide a clearer picture of where things are breaking. I have opted to build a list of links rather than writing to a file.</p>

<p>But writing those links to a CSV file could be done like this:</p>

<h2>Writing CSV</h2>

<pre><code>def write_links_file(output_links_file, links_list):
    with open(file_destination, "a") as output_file:
        link_writer = csv.writer(output_file)
        link_writer.writerow(links_list)
</code></pre>

<p>The main thing to note here is the use of the <a href="https://stackoverflow.com/a/3012921">With Statement</a>. It simplifies operations on files by removing the need to open/close the file manually. By calling</p>

<pre><code>    with open(....)
</code></pre>

<p>the file will remain open within the scope of the statement.</p>

<pre><code>    file = open("input.csv", "w")
    file.close()
</code></pre>

<p>Is unnecessary with the <strong>with statement</strong>, simply by calling with open... the file will be created if it does not exist currently. By designating the "a" - append flag, you can ensure that you don't lose any data this way either (as you have done).</p>

<p>To achieve the same thing that you have currently you could then just chain those two functions together:</p>

<pre><code>    write_links_file("/some/dir/", build_list_of_links("some.page"))
</code></pre>

<p>Nothing says this is the best way to do it - but it is much more apparent what is happening and where the execution is taking place.</p>

<p>Jumping down a bit further, I've written your image directory check into a function:</p>

<h2>If Not vs. If/Else</h2>

<pre><code>def create_img_dir():
  save_imgages = raw_input('Do you want to download the product pictures? (y/n)\n\n')
  if save_imgages == "y":
      if os.path.exists('images'):
          pass
      else:
          os.mkdir('images')
  else:
    ...
</code></pre>

<p>This is a readability issue and my personal preference, but instead of</p>

<pre><code>    if not os.path.exists
</code></pre>

<p>I would opt for:</p>

<pre><code>    if os.path.exists
        pass
    else
        os.mkdir
</code></pre>

<p>which is functionally identical but now reads more like what is actually happening (to me anyway).</p>

<h2>Various things to note:</h2>

<ul>
<li><p>instead of </p>

<pre><code>content.__len__() 
</code></pre>

<p>you can call </p>

<pre><code>len(content)
</code></pre></li>
<li><p>instead of </p>

<pre><code>for i in range(0, urlinnn) 
</code></pre>

<p>is the same as </p>

<pre><code>for i in range(urlinnn)
</code></pre></li>
<li><p>urlin/urlinn/urlinnn are totally inscrutable variable names</p></li>
<li><p>Writing:</p>

<pre><code> print 'Oh dear.\n'
 print 'Something went horribly wrong.\n'
 print 'The Input file is corrupt!'
 print 'Did you check the Input.csv file for mistakes?'
 print 'Pay attention to double commas!'
</code></pre>

<p>can also be written with a single print statement like this:</p>

<pre><code> print("Oh dear.\n\
 Something went horribly wrong.\n\
 The Input file is corrupt!\n\
 Did you check the Input.csv file for mistakes?\n\
 Pay attention to double commas!")
</code></pre></li>
</ul>

<p>You've actually done most of the hard work already in getting it to work. I think a good next step would be to go through your script and adjust things into logical 'partitions' (this section reads/writes CSV, this sections gets webpage data, this section logs errors etc.). That and improving your variable names!</p>
    </div>