<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>

<p>The only issue I see is that the data array is never expanded.</p>

<p>As a result any value of <code>ptr</code> that is not zero will cause undefined behavior. What you want to do is give a fixed but reasonable size for the data.</p>

<pre><code>std::size_t const maxDataSize = 10000;

...

   std::vector&lt;int&gt; values;
   values.resize(maxDataSize);
</code></pre>

<p>Then make sure when you access the data you mod it to the correct range:</p>

<pre><code>        case '&gt;': ptr = (ptr + 1) % maxDataSize; break;
        case '&lt;': ptr = (ptr - 1) % maxDataSize; break;
</code></pre>

<h2>Comment</h2>

<p>This is not a standard C++ header.</p>

<pre><code>#include &lt;bits/stdc++.h&gt;
</code></pre>

<p>What you want is</p>

<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
</code></pre>

<h2>Comment</h2>

<p>The code is non modifiable so the the code parameter should be constant. I would also pass by const reference to prevent a copy or require a move operation to pass the code into the interpretor.</p>

<hr>

<p>I can see how you would interpret the output as what is printed to the output stream by the interpreter as the result. But is not the whole of memory the actual output?</p>

<hr>

<p>Two things I would do:</p>

<ol>
<li><p>Make <code>.</code> output to the output stream (like <code>,</code> takes from the input stream.</p></li>
<li><p>I would give the <code>bf_interpreter()</code> two parameters. The code to execute and the data memory that can be used by the program. The data memory is passed by reference so that any changes can be inspected after the interpreter has finished.</p></li>
<li><p>Potentially I would even pass two streams (input/output) as parameters to <code>bf_interpreter()</code>. Though that is a bit more subjective.</p></li>
</ol>

<p>Thus my function definition would be this:</p>

<pre><code> std::string bf_interpreter(std::string const&amp; code,
                            std::vector&lt;int&gt;&amp;  memory,
                            std::istream&amp;      input = std::cin,
                            std::ostream&amp;      output = std::cout
                           );
</code></pre>

<h2>ReDesign</h2>

<p>OK. So given there is a lot more state here than I really want to pass as a function. I would change this a bit and create a "Brain Fuck" class where all the important state is passed to the constructor then you can call interpret on the object.</p>

<pre><code>class BF_Engine
{
         // Add Members here
         void nextStep() {
             // Add interpreter here
         }
    public:
         BF_Engine(std::string const&amp; code,
                   std::vector&lt;int&gt;&amp;  memory,
                   std::istream&amp;      input = std::cin,
                   std::ostream&amp;      output = std::cout
                  );

         void interpret(std::size_t steps = 1)
         {
             while (!finished &amp;&amp; steps &gt; 0) {
                 nextStep();
                 --steps;
             }
         }
         void interpretRun()
         {
             while (!finished) {
                 nextStep();
             }
         }
 };
</code></pre>
    </div>