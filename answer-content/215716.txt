<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Simple does not mean fast, so you cannot judge performance based on how simple the implementation looks. Usually the most efficient way to perform a non-trivial task is not also the simplest way to do it. In this case though, there is a much more efficient solution that is about equally simple, and is probably sufficient.</p>

<p>There is a serious problem with this implementation: it computes <code>kenc**d</code>.</p>

<p><code>kenc**d</code> is in general a very big number that takes a long time to compute, and then it takes a long time again to reduce it modulo <code>n</code>. For example, trying it out with 1024bit RSA (the lowest setting!):</p>

<pre><code>import Crypto
from Crypto.PublicKey import RSA
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator)

def decrypt(kenc,d,n):
  kdec=(kenc**d)%n
  return kdec

(ciphertext,) = key.encrypt(42, 0)
print(decrypt(ciphertext, key.d, key.n))
</code></pre>

<p>This does not finish in a reasonable time.</p>

<p>There is a simple remedy: use modular exponentiation, which keeps the size of the numbers that it is working with low throughout the whole calculation by reducing modulo <code>n</code> as it goes along. You could implement it yourself, but Python handily provides a built-in function for this: <code>pow(x, e, n)</code></p>

<p>So <code>decrypt</code> can be written as:</p>

<pre><code>def decrypt(kenc, d, n):
  return pow(kenc, d, n)
</code></pre>

<p>With that change, the code above decodes the message quickly.</p>

<p>Further improvements are possible, but more complicated, and won't be drop-in replacements.</p>
    </div>