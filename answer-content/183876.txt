<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Responses</h2>

<blockquote>
  <p>Does the code make sense to you? </p>
</blockquote>

<p>Yes, for the most part. I am still becoming acquainted with the game play and hacks.</p>

<blockquote>
  <p>anything I could make better or more efficient?</p>
</blockquote>

<p>In general, using an integer 0/1 instead of boolean would lead to faster performance<sup><a href="https://jsperf.com/bool-vs-int/8" rel="nofollow noreferrer">1</a></sup>. To change the value, the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#(Bitwise_NOT)" rel="nofollow noreferrer">bitwise NOT operator</a> (i.e. <code>~</code>) can be used. Note that applying NOT on a signed integer will yield -` but that is still a truthy value. While it was asked more than 6 years ago, <a href="https://stackoverflow.com/q/7221963/1575353">this post</a> has some interesting discussion on that matter.</p>

<p><a href="https://i.stack.imgur.com/2L0yH.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/2L0yH.png" alt="enter image description here"></a></p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var wrathCookieSwitchOn = 0;
var cookieSwitchOn = 0;

var wrathSwitch = function() {
  wrathCookieSwitchOn = ~wrathCookieSwitchOn;
  console.log("WrathCookieSwitchOn is set to " + wrathCookieSwitchOn);
}

function checkWrathCookieSwitchOn() {
  if (wrathCookieSwitchOn) {
    console.log('wrathCookieSwitchOn',wrathCookieSwitchOn);
  }
}
wrathSwitch();
checkWrathCookieSwitchOn();
wrathSwitch();
checkWrathCookieSwitchOn();</code></pre>
</div>
</div>


<h2>Other thoughts</h2>

<h3>Ternary vs Short-circuiting logical operators</h3>

<p>As I mentioned in <a href="https://codereview.stackexchange.com/a/182636/120114">an answer to your previous post</a>, the ternary could be simplified from:</p>

<blockquote>
<pre><code>(shimmer.type == "golden") &amp;&amp; (shimmer.wrath == 0 || wrathCookieSwitchOn) ? shimmer.pop() : 0;
</code></pre>
</blockquote>

<p>To: </p>

<pre><code>(shimmer.type == "golden") &amp;&amp; (shimmer.wrath == 0 || wrathCookieSwitchOn) &amp;&amp; shimmer.pop();
</code></pre>

<p>While it only saves about 2 keystrokes, it is essentially like removing an <code>else</code> clause from an <code>if</code> statement.</p>

<h3>Variable declaration</h3>

<p>The declaration of the timer variable <code>SpecialCookieClicker</code> is within the <em>true</em> block of the <code>if</code> statement. While <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting" rel="nofollow noreferrer">hoisting</a> allows the variable to exist throughout the function, 
"<em>it is recommended to always declare variables at the top of their scope</em>"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting" rel="nofollow noreferrer">2</a></sup> and then assign the value later (e.g.. </p>

<pre><code>var flipCookieSwitch = function(){
    var SpecialCookieClicker; //declare here
    cookieSwitchOn = !cookieSwitchOn;
    if (cookieSwitchOn) {
        SpecialCookieClicker = setInterval(/*function */, 500); //assign here
    }
}
</code></pre>

<p>While it <em>should</em> be the case that <code>SpecialCookieClicker</code> will always be assigned before the <code>else</code> block, it may be wise to guard against the scenario of an undefined value (e.g. due to <a href="https://en.wikipedia.org/wiki/Cosmic_ray#Effect_on_electronics" rel="nofollow noreferrer">cosmic rays</a>) and ensure it is at least truthy before calling <code>clearInterval()</code>.</p>

<pre><code>SpecialCookieClicker &amp;&amp; clearInterval(SpecialCookieClicker); 
</code></pre>

<h3>Variable names</h3>

<p>The word <code>On</code> in variables <code>wrathCookieSwitchOn</code> and <code>cookieSwitchOn</code> convey the sense that the switch is on when the variable is <code>true</code>. Without the word <code>On</code> it could still be considered semantically the same - so one could argue that the names could be shortened to <code>wrathCookieSwitch</code> and <code>cookieSwitch</code> without any loss of semantics</p>

<h3>ES-6</h3>

<p>Presuming you aren't using IE, you should be able to utilize ES-6 features, like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer">const</a> for values that shouldn't be re-assigned and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer">let</a> for variables that can change. Then the one-liner for that function to pop shimmers can be simplified with an arrow function:</p>

<pre><code>Game.shimmers.forEach((shimmer) =&gt; (shimmer.type == "golden") &amp;&amp; (shimmer.wrath == 0 || wrathCookieSwitchOn) &amp;&amp; shimmer.pop(), 500);
</code></pre>

<hr>

<p><sup>1</sup><sub><a href="https://jsperf.com/bool-vs-int/8" rel="nofollow noreferrer">https://jsperf.com/bool-vs-int/8</a></sub></p>

<p><sup>2</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting</a></sub></p>
    </div>