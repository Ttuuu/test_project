<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You need to fix indentation for the program to run (the fix is easy though, just look at the elif branches on line 102 onwards).</p>

<p>What you've essentially done is an explicit if-else structure where you've hardcoded all possible positions. While this works, it's quite difficult to read and it's easy to make mistakes. Thus, it would be a good idea to use a data structure not only for the board, but for the wins (rows, diagonals, columns) as well:</p>

<pre><code>player_symbol = 'X'
cpu_symbol = 'O'

board=np.array(['-','-','-',
                '-','-','-',
                '-','-','-'])

wins = [
        [0,1,2], [3,4,5], [6,7,8],  # rows
        [0,4,8], [2,4,6],           # diagonals
        [0,3,6], [1,4,7], [2,5,8],  # columns
       ]
</code></pre>

<p>Now, to check for a win we can do something much simpler like:</p>

<pre><code>def check_win():
    player_win = any(len(set(board[pos])) == 1 and player_symbol in board[pos] for pos in wins)
    cpu_win = any(len(set(board[pos])) == 1 and cpu_symbol in board[pos] for pos in wins)

    game_over = player_win or cpu_win
    winner = None
    if game_over:
        winner = 'Player' if player_win else 'CPU'

    return game_over, winner
</code></pre>

<p>In here, note that we can simply return values and we don't need global variables which are always difficult to reason about. Further, the "win checks" a reduced to simple generator expression: it goes over each element of <code>wins</code>, grabs the corresponding row, column or diagonal from <code>board</code>, checks to see if it has all of the same symbols (i.e., if the <code>set</code> taken over the elements of <code>board</code> has size 1) <em>and</em> checks if the unique symbol it contains is the <code>player_symbol</code> or <code>cpu_symbol</code>.</p>

<ul>
<li><p>For <code>Compute()</code>, the function could use a better name: it starts with an uppercase letter while all the other functions don't. Also, <code>compute()</code> is a very generic name and it doesn't explain what the function is supposed to move. So perhaps a better name would be e.g., <code>compute_cpu_move()</code>. </p></li>
<li><p>Now, using the same logic we <em>could</em> beautify <code>Compute()</code> as well but this is not necessarily a great idea. If you are interested in more challenge, you could make the CPU <em>perfect</em> by <a href="https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy" rel="nofollow noreferrer">playing with the optimal strategy</a> or implementing the <a href="https://en.wikipedia.org/wiki/Minimax" rel="nofollow noreferrer">minimax algorithm</a>. </p></li>
</ul>

<p>There's definitely more we could say here as well, but I hope this is enough to get you going. There are tons of questions and resources on tic-tac-toe on this site and elsewhere online that you can get more inspiration from.</p>
    </div>