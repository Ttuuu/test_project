<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Ignored code</strong></p>

<p>From the code sample provided, you're not actually doing anything with the <code>AppSettingsRequest</code> object after you've created it. Why? What is the purpose of this object?</p>

<hr>

<p><strong>Global variables</strong></p>

<pre><code>byte[] exportXml = exportSolutionResponse.ExportSolutionFile;
</code></pre>

<p>What is <code>exportSolutionResponse</code>? It comes out of nowhere, without being defined anywhere. This seems to be a global variable (I can't otherwise explain its existence).</p>

<p>Global variables are generally a bad idea. They create shortcuts in code that is one of the straws that will eventually break the camel's back (in this case, unmaintainable spaghetti code).</p>

<hr>

<p><strong>Stringly typing</strong></p>

<p>As you seem to be using a console application, the parameters can be parsed an an array of values, not as a single string. Why are you concatenating these values into a string, only to then split the string again?</p>

<p>This can be improved by using explicit method parameters:</p>

<pre><code>internal static void ExportSolution(SqlService service, string name, params bool[] values)
</code></pre>

<p>This means you no longer have to do the conversion in this method; which is a good separation of concerns.</p>

<p>Given that you are expect a <strong>fixed</strong> amount of booleans, it's better to explicitly name these booleans instead of allowing any array of arbitrary length:</p>

<pre><code>internal static void ExportSolution(SqlService service, string name, bool managed, bool prefix, bool managedprofile, bool email, bool calendar, bool appsettings)
</code></pre>

<hr>

<p><strong>Vague names</strong></p>

<p>Your variable names leave something to be desired. I can only guess at what these variables mean. Rename them to something clearer. I've <em>guessed</em> at what these booleans are used for:</p>

<pre><code>internal static void ExportSolution(SqlService service, string userName, bool isManaged, bool hasPrefix, bool useManagedProfile, bool importEmail, bool importCalendar, bool overrideAppSettings)
</code></pre>

<p>Don't get caught up on the names, my interpretations are only a guess. But these examples are much clearer on what the impact of these booleans is.</p>

<hr>

<p><strong>No null checking</strong></p>

<p>This ties into the earlier point. In your original code, you are taking in any string and splitting it into an array, and then <strong>assuming</strong> that this array will contain at least 8 values.</p>

<p>What happens when the array contains less than 8 values? You're going to end up with an <code>IndexOutOfRangeException</code>. While you do catch and display exceptions, it's still better to <strong>avoid exceptions where possible</strong>. It's not that hard to validate the length of the array before you try to access its elements.</p>

<pre><code>if(args.Length &lt; 8)
{
    Console.WriteLine("Insufficient parameters provided");
    return;
}
</code></pre>

<hr>

<p><strong>Pok√©mon exception handling</strong> (<a href="http://wiki.c2.com/?PokemonExceptionHandling" rel="noreferrer">link</a>)</p>

<pre><code>catch (Exception ex)
{
    Console.WriteLine(ex);
}
</code></pre>

<p>Instead of catching all exceptions, catch the exceptions you're interested in. For example:</p>

<pre><code>catch (IndexOutOfRangeException ex)
{
    Console.WriteLine("Insufficient parameters provided");
}
</code></pre>

<p><em>Note: as mentioned before, it is better to prevent the exception when possible, instead of just catching it afterwards. This only serves as a simple example of how you catch <strong>specific</strong> exceptions instead of all possible exception types.</em></p>

<hr>

<p><strong>Needlessly verbose code</strong></p>

<pre><code>AppSettingsRequest.Managed = (managed == true) ? true : false;
</code></pre>

<p>this can immediately be refactored to:</p>

<pre><code>AppSettingsRequest.Managed = managed;
</code></pre>

<p>For two reasons:</p>

<ol>
<li><code>== true</code> is redundant. If the variable is already a boolean, its "trueness" doesn't need to be checked. <code>managed == true</code> will always equal <code>managed</code>.</li>
<li><code>? true : false</code> is redundant. The evaluation (left of the <code>?</code>) is already a boolean, and what you're doing here is saying "if this evaluation is true, set this to true; if this evalutation is false, set it to false". It's much short to just say "set this to the evaluation's value". <code>managed ? true : false</code> will always equal <code>managed</code>.</li>
</ol>

<p><em>Note: if you were using nullable booleans, bullet point 1 wouldn't necessarily be correct (as you're also checking for non-null in that case), but you're not using nullable booleans here.</em></p>

<hr>

<p><strong>Saving some lines of code</strong></p>

<pre><code>bool managed = Convert.ToBoolean(args[2]);
AppSettingsRequest.Managed = managed;
</code></pre>

<p>Can be shortened to</p>

<pre><code>AppSettingsRequest.Managed = Convert.ToBoolean(args[2]);
</code></pre>

<p>In general, I wouldn't advise this. The added clarity from separating the steps makes things easier. However, given that one of your main issues is the amount of settings, combining the two steps will <strong>halve</strong> your line count. At the same time, the combined line is not unreadable by any stretch of the imagination so it's perfectly okay to combine them here.</p>

<hr>

<p><strong>Separating your concerns</strong></p>

<p>In general, your method is taking on too many tasks. It manipulates the input string, converts the values, handles them, writes to storage and updates the UI (console output). This is too many responsibilities for a single method.</p>

<p>However, this seems to be a very small and simple console application, and the overhead cost of implementing some separations may end up costing more effort than it's worth. I would still suggest a basic separation between the following tasks:</p>

<ul>
<li>Parsing the input values (to their correct string/bool types)</li>
<li>Instantiating the settings object and settings its properties</li>
<li>Writing your data to disk</li>
</ul>
    </div>