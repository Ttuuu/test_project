<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is rather good Python, pleasant to read and using good practices already. I'll just focus on making it more Pythonic.</p>

<hr>

<blockquote>
<pre><code>    def __repr__(self):
        return "&lt;Claim #%s - %s, %s - %sx%s&gt;" % (self.id, self.x, self.y, self.width, self.height)
</code></pre>
</blockquote>

<p>This should be <code>__str__</code>, as it is meant for "fancy" formatting like this. Ideally, <code>__repr__</code> should be build such as <code>eval(repr(x))</code> will reconstruct <code>x</code>.</p>

<blockquote>
<pre><code>class Claim(object):
    id = None
    x = None
    y = None
    width = None
    height = None

    def __init__(self, claim_id, x, y, width, height):
        self.id = claim_id
        self.x = x
        self.y = y
        self.width = width
        self.height = height

    def __repr__(self):
        return "&lt;Claim #%s - %s, %s - %sx%s&gt;" % (self.id, self.x, self.y, self.width, self.height)
</code></pre>
</blockquote>

<p>This whole class could be replaced by a <code>namedtuple</code>. Considering the previous remark, I’d write:</p>

<pre><code>from collections import namedtuple


class Claim(namedtuple('Claim', 'id x y width height')):
    def __str__(self):
        return "&lt;Claim #{} - {}, {} - {}x{}&gt;".format(self.id, self.x, self.y, self.width, self.height)
</code></pre>

<p>Note that I replaced old-school <code>%</code> formating with the prefered <code>str.format</code> method. Note that there is also f-strings available if you are using Python 3.6+.</p>

<p>Also note that in your original class you defined class variables that were overriden in the constructor. Don't. There is no gain in doing so as these class variables will never be used anyway.</p>

<hr>

<blockquote>
<pre><code>def read_file_lines(file_path, strip_lines=True):
    """ Reads the specified file and returns it's lines an array
        file_path: the path to the file
        strip_lines (default: true): boolean to indicate whether or not to strip leading and trailing whitespace from each line

        Returns: An array of the lines in the file as string
    """
    with open(file_path, "r") as f:
        if strip_lines:
            return [l.strip() for l in f.readlines()]

        return [l for l in f.readlines()]
</code></pre>
</blockquote>

<p>You don't need to read the whole file in memory at once and then create an array of the same content again. Instead, I’d suggest using a generator since you are transforming the output of this function anyway, so rather keep it nice with the memory:</p>

<pre><code>def read_file_lines(file_path, strip_lines=True):
    """ Reads the specified file and returns it's lines
        file_path: the path to the file
        strip_lines (default: true): boolean to indicate whether or not to strip leading and trailing whitespace from each line

        Generates the lines in the file as string
    """
    with open(file_path, "r") as f:
        for line in f:
            if strip_lines:
                yield line.strip()
            else:
                yield line
</code></pre>

<hr>

<blockquote>
<pre><code>def parse_input(lines):
    claims = []
    for line in lines:
        parts = line.split(" ")

        id = int(parts[0][1:])
        x = int(parts[2].split(",")[0])
        y = int(parts[2].split(",")[1][:-1])
        width = int(parts[3].split("x")[0])
        height = int(parts[3].split("x")[1])

        claims.append(Claim(id, x, y, width, height))

    return claims
</code></pre>
</blockquote>

<p>You used list-comprehensions in other places so you know how to use them. You should try to extract the parsing logic out of the loop so you can use them here too. I’d write this function as:</p>

<pre><code>def parse_input(lines):
    return [Claim.from_input(line) for line in lines]
</code></pre>

<p>and rework the <code>Claim</code> class into:</p>

<pre><code>class Claim(namedtuple('Claim', 'id x y width height')):
    def __str__(self):
        return "&lt;Claim #{} - {}, {} - {}x{}&gt;".format(self.id, self.x, self.y, self.width, self.height)

    @classmethod
    def from_input(cls, line):
        parts = line.split(" ")

        id = int(parts[0][1:])
        x = int(parts[2].split(",")[0])
        y = int(parts[2].split(",")[1][:-1])
        width = int(parts[3].split("x")[0])
        height = int(parts[3].split("x")[1])

        return cls(id, x, y, width, height)
</code></pre>

<p>In fact, I'd probably merge the two previous functions into a single one, but there is no harm in keeping both:</p>

<pre><code>def parse_input(filename):
    with open(filename) as f:
        return [Claim.from_input(line.strip()) for line in f]
</code></pre>

<hr>

<blockquote>
<pre><code>def generate_matrix(size):
    return [[0]*size for _ in range(size)]
</code></pre>
</blockquote>

<p>Nothing to say here, you didn't fall in the trap of writting <code>[[0] * size] * size</code>.</p>

<hr>

<blockquote>
<pre><code>def print_matrix(matrix):
    line = ""
    for y in range(0, len(matrix[0])):
        line = line + str(y) + ": "
        for x in range(0, len(matrix[0])):
            line = line + str(matrix[x][y])
        print(line)
        line = ""
</code></pre>
</blockquote>

<p>Time to learn to use <code>str.join</code>:</p>

<pre><code>def print_matrix(matrix):
    string = '\n'.join(
            'line {}: {}'.format(i, ''.join(map(str, line)))
            for i, line in enumerate(matrix))
    print(string)
</code></pre>

<hr>

<blockquote>
<pre><code>if __name__ == '__main__':
    content = read_file_lines("input.txt")
    claims = parse_input(content)

    matrix = generate_matrix(1000)
    print_matrix(matrix)

    for claim in claims:
        x_indexes = range(claim.x, claim.x + claim.width)
        y_indexes = range(claim.y, claim.y + claim.height)

        for x in x_indexes:
            for y in y_indexes:
                matrix[x][y] = matrix[x][y] + 1

    print_matrix(matrix)

    inches_double_claimed = 0
    for x in range(0, len(matrix[0])):
        for y in range(0, len(matrix[0])):
            if matrix[x][y] &gt;= 2:
                inches_double_claimed += 1

    print("Inches claimed by two or more claims:", inches_double_claimed)
</code></pre>
</blockquote>

<p>As you made in the <code>print_matrix</code> function, you are iterating over indices to access content of the matrix. Instead, you should iterate over the content directly if you need it:</p>

<pre><code>for line in matrix:
    for claims in line:
        if claims &gt; 1:
            inches_double_claimed += 1
</code></pre>

<p>And, in fact, these loops could be written in a single generator expression fed to <code>sum</code>:</p>

<pre><code>inches_double_claimed = sum(claims &gt; 1 for line in matrix for claims in line)
</code></pre>

<p>I would also advice you to wrap this code in a <code>main</code> function parametrized by the file name to read.</p>

<hr>

<p>There is still room for improvement: maybe defining a <code>Matrix</code> class to abstract your functions manipulating it, using <code>re</code> to simplify input parsing, using a <code>defaultdict(defaultdict(int))</code> to support arbitrary sizes of fabric (and avoid wasting memory on small problems); but it is still fine as it is.</p>
    </div>