<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Build reusable</h2>
<p>Always try to code in such a way that the effort you put in can be reused, first in the same app, and maybe in other apps.</p>
<p>One would assume that you likely have more than one list that acts like radio group, or even unrelated DOM items as part of a radio group.</p>
<p>Your best bet is to create a simple object that tracks the state of a group and provides functionality to switch selected items.</p>
<h2>Track current selected item</h2>
<p>There is no need to check all the elements each time one is clicked if you keep track of the currently active element. If you have the currently selected item then you need only remove the class name from that element and add it to the new element.</p>
<p>The following snippet is a very basic radio group via JavaScript.</p>
<pre><code>const RadioGroup = (activeClass, ...elements) =&gt; {
    var active = elements.find(el =&gt; el.classList.contains(activeClass));
    return {
        set selected(element) {
            if(elements.includes(element) &amp;&amp; active !== element) {
                active &amp;&amp; active.classList.remove(activeClass);
                element.classList.add(activeClass);
                active = element;
            }
        },
        get selected() { return active },
    };
}
// example create group and select first list item
const rGroup = RadioGroup("active", ...document.querySelectorAll("li"));
rGroup.selected = document.querySelector("li");
</code></pre>
<h2>Custom interfaces</h2>
<p>Javascript lets you build powerful reusable interfaces to suit your specific needs.</p>
<p>The example below creates a more sophisticated object that stores many radio groups by name and provides two interfaces and a on selected <code>callback</code></p>
<h2>Example</h2>
<p>Note that the second group is unselected at start.</p>
<p>The interface also lets you turn off a selection by selecting an item not in the selectable elements list eg <code>undefined</code>. This is demonstrated when an item in the first group is selected, if there is one selected in the second it is turned off.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>setTimeout(() =&gt; {  // for snippet rather than doc load/ed
    createGroup(document.getElementById("special-nav-one"), );
    createGroup(document.getElementById("special-nav-two"), "activeTwo");
    function createGroup(container, className = "active") {
        const group = radioGroups.addGroup(
            container.id, onItemSelected, className, 
            ...container.querySelectorAll('LI')
        );
        // NOTE property tagName is UPPERCASE
        container.addEventListener("click", e =&gt; (e.target.tagName === "LI") &amp;&amp; (group.selected = e.target));
    }
}, 0);

function onItemSelected(group, element) {
    info.textContent = "Selected from \"" + group.name + "\" item " +  element.textContent;
    if(group.name === "special-nav-one") {
        radioGroups.select("special-nav-two"); // unselect group 2
    }
}



const radioGroups = (()=&gt;{
    const namedGroups = {};
    function select(groupName, element) {
        const group = namedGroups[groupName];
        if (group &amp;&amp; group.active !== element) {
            group.active &amp;&amp; group.active.classList.remove(group.activeClass);
            if (group.elements.includes(element)) {
                group.callback &amp;&amp; group.callback(group.API, element);
                element.classList.add(group.activeClass);
                group.active = element;
            } else {
                group.active = undefined;
            }
        }
    }
    return Object.freeze({
        select,
        addGroup(name, callback, activeClass, ...elements) {
            const active = elements.find(el =&gt; el.classList.contains(activeClass));
            const API = Object.freeze({
                get name() { return name },
                set selected(element) { select(name, element) },
                get selected() { return group.active },                
            });
            const group = namedGroups[name] = {name, elements, active,  activeClass, callback, API};
            return API;

        },
    });
})();

/** Use ****************************************************************************
 Selects element from named group
 radioGroups.select(groupName, element)  
 
 Create a new group. Will replace a group if name is same.
 group = radioGroups.select(name, callback, activeClassName, ...elements)

 Arguments
     name: Unique name of group
     callback: Called when selection changed, null or undefined if not used
     activeClassName: Name of class to toggle
     ...elements: Selectable elements
 Returns a group object
     group.selected (read, write) To select or get the current selected item.
     group.name (read only) name of group
***********************************************************************************/</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.active {
  color: red;
  cursor: default;
}
.activeTwo {
  background: #AFA;
  cursor: default;
}
li {
  cursor: pointer;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="info"&gt;Select items&lt;/div&gt;
&lt;div id="special-nav-one"&gt;
  &lt;ul&gt;
    &lt;li class="active"&gt;A: one&lt;/li&gt;
    &lt;li&gt;A: two&lt;/li&gt;
    &lt;li&gt;A: three&lt;/li&gt;
    &lt;li&gt;A: four&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;div id="special-nav-two"&gt;
  &lt;ul&gt;
    &lt;li&gt;B: one&lt;/li&gt;
    &lt;li&gt;B: two&lt;/li&gt;
    &lt;li&gt;B: three&lt;/li&gt;
    &lt;li&gt;B: four&lt;/li&gt;
    &lt;li&gt;B: five&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

<p>If you plan to add and remove items from the lists you will need to extend the <code>radioGroups</code> interfaces so that you can do so safely.</p>
    </div>