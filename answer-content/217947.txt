<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>For the physics:</strong></p>

<p>Given that you don't have bodies that are constantly interacting, updating position and velocity based only on the previous step is fine. Be wary of doing this with lots of interacting objects if you decide to add more balls. Because you can't reasonably update simultaneously, you get issues with divergence. Again though, for this game it should be fine.</p>

<p>Be aware that in most games, physics is tweaked; a simple example being bouncing not being parabolic (instead, objects tend to fall faster than they rise). Players are used to behaviour like this and games can feel weird if objects behave as they would in the real world.</p>

<p><strong>For converting to SI units:</strong></p>

<p>You would need to ensure that ALL properties are SI (or unitless). If, for example, your dimensions are based on pixels, not metres, you would need to scale by some pixel:metre conversion. I suspect having things like density just being 1 rather than the actual density of a golf ball are causing issues. This is probably why gravity feels a little "heavy".</p>

<p>Using purely SI units may be a bit of a stretch. Accurately mimicking properties like friction may be a little over the top for a simple game. I would suggest it's a good idea to use real physical formulae, then tweak some constants and add scale factors.</p>

<p>I won't comment on the code style as I can see people have done that in the past. </p>

<p><strong>EDIT:</strong></p>

<p>Thinking about it a bit more, you're currently storing position and velocity with a precision of 1 pixel. It's not unusual for the actual values to be near 1 pixel (e.g. vx = 1 +/- 1). This will create issues where velocity will decay far faster than it should when it is close to zero. I would change it so that your ball physics properties are stored separately to its display properties. Update the physics, then draw accordingly.</p>
    </div>