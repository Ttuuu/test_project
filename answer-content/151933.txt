<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Overall design</strong></p>

<p><em>First a summary of your design:</em></p>

<p>The <code>Game</code> class initializes the game and runs the main game loop (<code>Update</code>). Every step, it applies user input and updates all game objects (by calling their <code>Before</code>, <code>Next</code> and <code>After</code> methods).</p>

<p>Game objects (the <code>ApplyObj</code>, <code>BarrierObj</code>, <code>SnakePartObj</code> and <code>DirectionObj</code> classes) are positioned on a 2D grid (represented by a <code>DataBase&lt;IVector2, Obj&gt;</code> instance).</p>

<p>The player controls a snake (the <code>Snake</code> class) that consists of multiple parts (<code>SnakePartObj</code>). When an arrow key press is handled, an invisible direction marker is placed on the grid. This marker tells snake parts in which direction they should move next. This prevents parts from becoming disconnected.</p>

<p>Apples check every step whether they're colliding with a snake part. If so, they tell the snake to increment its length (which increases the players score) and they'll move to a random new location.</p>

<p>Barriers also check every step whether they're colloding with a snake part. If so, they trigger a game-over.</p>

<p><strong>Overall design observations</strong></p>

<p>A few things stand out in the above summary:</p>

<ul>
<li>the direction markers</li>
<li>apples and barriers are constantly checking for snake parts</li>
<li>the <code>Before</code>/<code>Next</code>/<code>After</code> methods</li>
<li>an odd database class</li>
</ul>

<p>Keeping the snake together could be solved more elegantly. For example by removing the tail part and adding a new head part, so other parts don't need to move at all (when the snake grows you simply don't remove the tail). Or by giving each part a reference to the next part, so they don't need direction markers to tell them where to move next.</p>

<p>Why do apples and barriers need to check for snake parts all the time? Collisions always happen with the snake head, so it's sensible to only let the snake (head) check for collisions instead. Bytheway, does your code take into account that the snake may hit itself?</p>

<p>Having 3 different update methods indicates that you were running into order problems. With the above two changes, you likely don't need these 3 methods anymore. In fact, a single <code>Snake.Update</code> call per step should be sufficient - all other game objects are passive anyway.</p>

<p><code>DataBase&lt;key, obj&gt;</code> implies persistent storage, but it's actually used to represent a 2D grid that contains game objects. <code>Grid</code> (or <code>Level</code>, <code>Map</code>, <code>Environment</code>) would be a more descriptive name. The class is also only used with <code>IVector2</code> as key and <code>Obj</code> as value (obj), and its method names heavily imply 2D movement, so there is no reason to make it generic. YAGNI: 'you ain't gonna need it'.</p>

<p><strong>Class design</strong></p>

<p>When we look further into the code, we'll see that game objects (<code>Obj</code>) are created (and also updated) via a factory (<code>ObjFactory</code>), which also registers them in the game grid (<code>DataBase&lt;IVector2, Obj&gt;</code>). There's an additional factory for creating visual parts (<code>GameObjectInstantiator</code>).</p>

<p>The <code>DataBase&lt;key, obj&gt;</code> class is gives you access to all game objects, and provides fast spatial lookup for collision checks. It's using a <code>MultipleValuesDictionary&lt;key, value&gt;</code> class internally.</p>

<p>There are also several game-state related classes, such as <code>CreateGame</code>, <code>DeleteGame</code> and <code>GameOver</code>. <code>CreateGame</code> initializes the player snake and populates the game grid with barriers and apples, while <code>DeleteGame</code> erases the game grid, and <code>GameOver</code> uses the other two to restart the game.</p>

<p>Then there are the <code>InputHandler</code>, <code>Score</code>, <code>Direction</code> and <code>IVector2</code> classes - utilities, mostly. <code>InputHandler</code> checks for arrow key presses and returns an appropriate direction, <code>Score</code> keeps track of the score, <code>Direction</code> is used in various places as movement direction (up, down, left or right) and <code>IVector2</code> stores a 2D coordinate.</p>

<p><strong>Class design observations</strong></p>

<p>If we inspect the code, we'll note several things:</p>

<ul>
<li><code>ObjFactory</code> mixes object creation with updating (game logic)</li>
<li>a custom (semi-)dictionary class </li>
<li>the game grid must be kept up to date whenever an <code>Obj</code> is moved</li>
<li>some game-related functionality has been implemented with classes instead of methods</li>
<li><code>Direction</code> is oddly designed</li>
</ul>

<p><code>ObjFactory</code> has too many responsibilities. Those <code>CallAll*</code> methods do not belong there. It's also doing very little, so I'm not really convinced that a factory is adding much value here. One disadvantage of this design is that it uses a <code>new()</code> constraint, so you can't use constructors to enforce proper initialization (<code>SnakePartObj</code> is not properly initialized until you call <code>InstallSnakePart</code>, but the factory doesn't do that for you).</p>

<p>There's no need for <code>MultipleValuesDictionary&lt;key, value&gt;</code> - it's essentially just a <code>Dictionary&lt;IVector2, HashSet&lt;Obj&gt;&gt;</code>. If that's too inconvenient to use then a few (extension) helper methods should be sufficient. You could also use a 2D array of <code>HashSet&lt;Obj&gt;</code>. Actually, without direction markers you don't need to support multiple objects per cell, so a 2D array of <code>Obj</code> is sufficient.</p>

<p>Keeping object positions in sync with the game grid obviously complicates things. It may be easier to just keep a list of game objects - there aren't that many and you only need to check for collisions once, for the snake's head, so it's unlikely that you'll run into performance problems. Or, with a different snake movement strategy (removing/adding parts instead of moving them) you don't need any movement support at all. Alternately, you could perform all movement via the grid directly, so game objects don't need those methods that require a game grid reference.</p>

<p>Others have already commented on your <code>CreateGame</code>, <code>DeleteGame</code> and <code>GameOver</code> classes: those should be methods in <code>Game</code>.</p>

<p><code>Direction</code> is a mutable class that holds a <code>names</code> enum, and it contains some utility methods. Its mutable nature allows some rather unintuitive code: <code>InputHandler.HandleArrows</code> returns a direction by mutating its <code>Direction</code> argument. It would be much easier to understand (and harder to misuse) when <code>Direction</code> was an enum itself, and <code>InputHandler.HandleArrows</code> would just return a <code>Direction</code> (enum). You may want to read up on '(data) encapsulation'.</p>

<p><strong>Conclusion</strong></p>

<p>There's more to be said about the actual low-level code itself (adhering to standard C# naming conventions, using more descriptive method and class names, not hard-coding values, various other low-level improvements), but I feel this review is long enough as it is.</p>

<p>All in all, I think your code is overly complicated for what it does. SOLID is good and all, but don't forget KISS: 'keep it simple, stupid'. :)</p>
    </div>