<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're using <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8" rel="nofollow noreferrer">C# 8.0++</a> you can use the "<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges" rel="nofollow noreferrer">index from end</a>" operator instead of <code>Count - 1</code></p>
<pre><code>Names[^1].Suffix = suffix;
</code></pre>
<hr>
<p>I would make a private property <code>Current</code> of <code>NameBuilder</code> to reach the last name object by:</p>
<pre><code>private Name Current =&gt; Names.Count &gt; 0 ? Names[^1] : throw new InvalidOperationException("No names in Builder");
</code></pre>
<p>and maybe a method that sets a member via a delegate:</p>
<pre><code>private NamesBuilder SetValue(Action&lt;Name&gt; setter)
{
  setter(Current);
  return this;
}
</code></pre>
<p>Then the <code>Set_X()</code>-methods could be reduced to:</p>
<pre><code>public NamesBuilder SetRank(string rank) =&gt; SetValue(n =&gt; n.Rank = rank);
public NamesBuilder SetSuffix(string suffix) =&gt; SetValue(n =&gt; n.Suffix = suffix);
public NamesBuilder SetMiddleName(string middleName) =&gt; SetValue(n =&gt; n.MiddleName = middleName);
public NamesBuilder SetNickName(string nickName) =&gt; SetValue(n =&gt; n.NickName = nickName);
</code></pre>
<hr>
<p>if <code>FirstName</code> and <code>SurName</code> are mandatory, you should maybe make them readonly:</p>
<pre><code>public string FirstName { get; }
public string Surname { get; }
</code></pre>
<p>and check their values in the constructor:</p>
<pre><code>public Name(string firstName, string surname)
{
  this.FirstName = !string.IsNullOrWhiteSpace(firstName) ? firstName : throw new ArgumentException("Must have a valid value (at least one character)", nameof(firstName));
  this.Surname = !string.IsNullOrWhiteSpace(surname) ? surname : throw new ArgumentException("Must have a valid value (at least one character)", nameof(surname));
}
</code></pre>
<hr>
<p>You can override <code>ToString()</code> in <code>Name</code> as ISR5 also suggest, but I would avoid appending a space char at the end of the value. Instead I would do like this:</p>
<pre><code>public override string ToString()
{
  string[] parts = 
  { 
    Rank, 
    FirstName, 
    string.IsNullOrWhiteSpace(NickName) ? null : $"\"{NickName}\"", 
    Surname, 
    NickName, 
    Suffix, 
  };
  return string.Join(" ", parts.Where(p =&gt; !string.IsNullOrWhiteSpace(p)));
}
</code></pre>
<p>where the order of the parts in <code>parts</code> correspond to their order in the result string.</p>
<p>Then <code>GetListAsString()</code> - which should maybe be renamed to <code>GetNamesAsString()</code> - or just <code>ToString()</code> as ISR5 suggest - could look like:</p>
<pre><code>public string GetNamesAsString()
{
  return string.Join(Environment.NewLine, Names);
}
</code></pre>
    </div>