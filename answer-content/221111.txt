<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Points</h2>

<ul>
<li><p>Use strict equality and inequality, <code>===</code> or <code>!==</code> rather than <code>==</code> or  <code>!=</code></p></li>
<li><p>Use const for variables that do not change. Eg <code>let size =</code> can be <code>const size =</code></p></li>
<li><p>Spaces between <code>for(</code> and <code>if(</code> eg <code>for (</code> and <code>if (</code></p></li>
</ul>

<h2>Problem/Bug</h2>

<p>Your code has a very serious and hard to spot bug.</p>

<p>It seams to me that the array should be modified in place (which is the point of the exercise) which for the most part you do. However when the array size is zero you return a new array. I would call it a bug as it could have serious consequences in any code that manipulates or relies on the content of the referenced array.</p>

<p>The line should have been</p>

<pre><code>if (arr.length == 0) { return arr }
</code></pre>

<h2>Complexity</h2>

<p><code>Array.splice</code> is an expensive operation as it needs to move each item above the splice point. If you splice each item in the array you end up with high complexity.</p>

<p>This is compounded with how JS arrays grow. When the length is changed the JS engine checks if there is enough pre allocated space, if there is not, it doubles the allocation space, moves the old array to the new memory (if needed). That means that a single push can (if at the pre allocated boundary) cause the entire array to be iterated.</p>

<h2>From the top</h2>

<p>The problem is that modifying the array in place means that you need to avoid losing the original content while you copy. This can be done by splicing (as you have done) which has a high time complexity, or by creating a copy of either the original array.</p>

<p>If you start from the top of the array the copied items will always be at an index above the original position so you will not need to deal with the problem of overwriting the content as you copy.</p>

<h2>Examples</h2>

<p>The following stutters the array from top to bottom, growing the array via its length property. However some JS engines my create a sparse array so the second example grows the array by pushing itself onto the top</p>

<pre><code>function stutter(arr) {
    var iFrom = arr.length, iTo = iFrom * 2 - 1;
    arr.length *= 2;
    while (iFrom-- &gt; 0) { arr[iTo--] = arr[iTo--] = arr[iFrom] }
    return arr;
}
</code></pre>

<p>Using push to grow</p>

<pre><code>function stutter(arr) {
    var iFrom = arr.length, iTo = iFrom * 2 - 1;
    arr.push(...arr);
    while (iFrom-- &gt; 0) { arr[iTo--] = arr[iTo--] = arr[iFrom] }
    return arr;
}
</code></pre>

<p>What you should not do.</p>

<p>This example does not grow the array before adding to it. From a JS point of view the result is identical. However the array will be mutated into a sparse array which for large arrays can represent a serious performance reduction with any code that needs to access the array.</p>

<pre><code>function stutter(arr) {
    var iFrom = arr.length, iTo = iFrom * 2 - 1;
    while (iFrom-- &gt; 0) { arr[iTo--] = arr[iTo--] = arr[iFrom] }
    return arr;
}
</code></pre>
    </div>