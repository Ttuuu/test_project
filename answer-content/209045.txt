<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code scales poorly if there are many years between <code>STARTING_YEAR</code> and <code>localDate</code>.</p>

<p>Worse, if <code>localDate</code> occurs before the <code>STARTING_YEAR</code>, then your code behaves as if <code>STARTING_YEAR</code> is the same year as <code>localDate</code>, which is weird behavior.</p>

<p>To calculate the number of days between two dates, use <a href="https://docs.oracle.com/javase/10/docs/api/java/time/temporal/TemporalUnit.html#between%28java.time.temporal.Temporal,java.time.temporal.Temporal%29" rel="nofollow noreferrer"><code>DAYS.between()</code></a>.</p>

<pre><code>import java.time.LocalDate;
import static java.time.temporal.ChronoUnit.DAYS;

â€¦    
long jdn = 1 + DAYS.between(LocalDate.ofYearDay(STARTING_YEAR, 1), localDate);
</code></pre>

<p>The <code>1 +</code> is necessary because the convention when subtracting dates is inclusive-exclusive, whereas your code uses an inclusive-inclusive range.</p>
    </div>