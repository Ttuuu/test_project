<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My idea when it comes to optimizing code is to check the runtime with a profiler. Python has a useful module called cProfile with which you can easily track how long the individual function calls take.
With the main call wrapped in to</p>

<pre><code>import cProfile
...
cProfile.run('main()')
</code></pre>

<p>I get the following result</p>

<pre><code>Please enter each letter seperated by spaces: t e s t d a r r e
['a', 'at', 'as', 'ad', 'art', 'test', 'dear', 'date', 'dare', 'desert', 'arrest']
         4932040 function calls in 20.747 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000   20.747   20.747 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 codecs.py:318(decode)
        1    0.000    0.000    0.000    0.000 codecs.py:330(getstate)
   986409    0.234    0.000    0.234    0.000 word_game.py:14(_in_list_of_possibles)
   986379   14.626    0.000   14.626    0.000 word_game.py:21(_in_dictionary)
        1    0.800    0.800   16.245   16.245 word_game.py:28(get_possible_dict_words)
   986410    0.205    0.000    0.205    0.000 word_game.py:49(_get_permutations_draw)
        1    0.000    0.000   20.747   20.747 word_game.py:57(main)
        1    0.000    0.000    0.000    0.000 {built-in method _codecs.utf_8_decode}
        1    0.000    0.000   20.747   20.747 {built-in method builtins.exec}
        1    4.501    4.501    4.501    4.501 {built-in method builtins.input}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
   986410    0.205    0.000    0.411    0.000 {built-in method builtins.next}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.print}
       11    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
   986409    0.175    0.000    0.175    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
</code></pre>

<p>I added two functions </p>

<pre><code>def _in_list_of_possibles(combi, list_of_possibles):
    if combi in list_of_possibles:
        return True
    else:
        return False


def _in_dictionary(combi, dictionary):
    if combi in dictionary:
        return True
    else:
        return False
</code></pre>

<p>in order to get a better understanding of how long these steps take.
And with this we can see that the lookup of the combination in the dictionary is the culprit whereas the look up in the newly composed list of possibles doesn't really affect performance. </p>

<p><strike>My idea of performance increase would go into the direction of multi threading the lookup in the dictionary.</strike></p>

<p>Following the idea of <a href="https://codereview.stackexchange.com/users/140549/ludisposed">@ludisposed</a>: Converting the dictionary into a set increases performance quite significantly.</p>
    </div>