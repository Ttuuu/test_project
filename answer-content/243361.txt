<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code appears to be fairly clean and reduced well to me, I don't see much in the way of any DRY violations, but if you're looking for any places for tightening up your code:</p>

<p>If you can use the newer javascript goodies, then use array <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring assignment</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Property_definitions" rel="nofollow noreferrer">object shorthand assignment</a></p>

<p>Given</p>

<pre><code>function usp(parent) {
  return [parent.username.value, parent.password.value];
}
</code></pre>

<p>Then</p>

<pre><code>const [user, pass] = usp(create);
database.push({ user, pass });
</code></pre>

<p>and use '==' with caution as it isn't strictly equal, it will attempt a type coercion, i.e. <code>'5' == 5</code> is true, where as '===' won't, i.e. <code>'5' === 5</code> is false. As a rule, you will almost <em>always</em> want to use '===', only reach for '==' when necessary.</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators" rel="nofollow noreferrer">Comparison operators</a></p>

<pre><code>const [user, pass] = usp(log);
for (const x of database) {
  if (x.user === user &amp;&amp; x.pass === pass) {
    ...
  }
}
</code></pre>

<p>Looping through <em>any</em> data structure has an <code>O(n)</code> complexity, there's nothing really you can do here, but this is completely fine as any increases in data size is a linear increase in processing.</p>
    </div>