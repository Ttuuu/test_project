<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm seeing a few things you could do to improve your code. I won't focus just on speed considerations.</p>

<ol>
<li><p>Explicitly qualify your objects. Don't let Excel make any assumptions about them. Letting Excel make assumptions leads to frustrating, unpredictable, hard to diagnose errors.</p>

<ul>
<li><strong>Before</strong>: <code>Sheets()</code></li>
<li><strong>After</strong>: <code>ThisWorkbook.Sheets()</code>.</li>
</ul></li>
</ol>

<hr>

<ol start="2">
<li><p>Use <code>Worksheets()</code> instead of <code>Sheets()</code>, because <code>Sheets()</code> can also refer to <code>ListObjects</code> I believe. This will help you avoid referring to the wrong object.</p>

<ul>
<li><strong>Before</strong>: <code>.Sheets()</code></li>
<li><strong>After</strong>: <code>.Worksheets()</code>.</li>
</ul></li>
</ol>

<hr>

<ol start="3">
<li><p>You should use multiple <code>Sub()</code>s to accomplish this purpose. Your existing sub is too long and has too many variables. Using multiple subs will help you more quickly pinpoint errors and ease code reuse.</p>

<ul>
<li><strong>Before</strong>: Everything in <code>SpecialCopy()</code></li>
<li><strong>After</strong>: <code>SpecialCopy()</code> broken into multiple pieces, each of which has its own <code>Sub()</code> or <code>Function()</code> with a descriptive name describing what it does. Each <code>Sub()</code> or <code>Function()</code> you create is stored in the same module and you execute those names inside <code>SpecialCopy()</code> to execute those code pieces.</li>
</ul></li>
</ol>

<hr>

<ol start="4">
<li><p>You should use one variable on each line to make your code easier to read. Following the above recommendation to use multiple <code>Sub()</code>s will help you have fewer variables active at a time, decreasing your memory footprint and eliminating the need to put multiple variables on the same line to conserve screen space.</p>

<ul>
<li><strong>Before</strong>: <code>Dim rw As Range, rng_fOp As Range, item_mini As Long, item_no As Long, fetch_row As Long, op_no As Long</code></li>
<li><strong>After</strong>: <code>Dim rw As Range</code> as one line with the rest on subsequent lines</li>
</ul></li>
</ol>

<hr>

<ol start="5">
<li><p>If you have worksheets you know ahead of time you want to refer to, give them names in the Project Explorer.</p>

<ul>
<li><strong>Before</strong>: <code>Sheets("ProdRows_Mo").Range</code></li>
<li><strong>After</strong>: ProdRows_Mo.Range`</li>
</ul></li>
</ol>

<hr>

<ol start="6">
<li><p>Get rid of <code>.End(xlUp)(1)</code> after <code>.Cells(1,1)</code>. It's not accomplishing anything. </p>

<ul>
<li><strong>Before</strong>: <code>Sheets("OpRows_Mo_copy").Cells(1, 1).End(xlUp)(1)</code></li>
<li><strong>After</strong>: <code>Sheets("OpRows_Mo_copy").Cells(1, 1)</code></li>
</ul></li>
</ol>

<hr>

<ol start="7">
<li><p>Indent code inside blocks. After using <code>For</code>, <code>For Each</code>, <code>Do While</code>, <code>With</code>, etc., your next lines shouldn't be spaced with the same left margin.</p>

<ul>
<li><strong>Before</strong>: <code>Do While j &lt; lr_op</code> / <code>With Worksheets("OpRows_Mo_copy")</code> / <code>lr_op = Sheets("OpRows_Mo_copy").Cells(Rows.Count, 1).End(xlUp).Row</code></li>
<li><strong>After</strong>: <code>Do While j &lt; lr_op</code> / (indent) <code>With Worksheets("OpRows_Mo_copy")</code> / (2x indent) <code>lr_op = Sheets("OpRows_Mo_copy").Cells(Rows.Count, 1).End(xlUp).Row</code></li>
</ul></li>
</ol>

<hr>

<ol start="8">
<li>Every time you want to cycle through every cell in a range, just read it into an array. Every time you refer to a cell's value on a worksheet via a range object, Excel has to read it from the worksheet, one of the more time-expensive operations it does. Instead, load the range into an array in memory, and you can quickly test every value without having to touch the worksheet. Here, you can use my function:</li>
</ol>

<hr>

<pre><code>Private Function ConvertRangeToArray(ByVal rngInQuestion As Range) As Variant

    Dim arrRangeToArray() As Variant
    With rngInQuestion
        If .Cells.Count = 1 Then
            ReDim arrRangeToArray(1 To 1, 1 To 1)
            arrRangeToArray(1, 1) = .Cells(1, 1).Value
        Else
            arrRangeToArray = .Value
        End If
    End With

    ConvertRangeToArray = arrRangeToArray

End Function
</code></pre>

<hr>

<p>This is enough to get you started. Good effort on your code, I look forward to seeing you improve further.</p>
    </div>