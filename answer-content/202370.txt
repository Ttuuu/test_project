<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When I look at your solution, the first impression I get is that it's too complicated. To solve the problem you don't need any fancy algorithms for prime numbers, or <code>islice</code> and <code>count</code>. It's a simple task of trying to divide by possible factors. </p>

<p>One important thing to note is that we only need to check for prime factors that are smaller than the square root of the number. Once we have reached the square root, there can be only one remaining factor, which can be proved by contradiction. </p>

<p>Another important thing to note is that once we have found a prime factor, we can divide the original number by that factor and reduce our problem size.</p>

<p>Doing both of these things, I end up with something like this: </p>

<pre><code>def get_max_prime_factor(n):
    d = 2
    factors = []
    while d*d &lt;= n:
        while n%d == 0:
            n //= d
            factors.append(d)
        d += 1
    if n != 1:
        factors.append(n)
    return max(factors)
</code></pre>

<p>Now, I'll say that even this implementation might be too complicated, since I'm saving all prime factors in a list instead of only keeping track of the largest one. If you want you could change that implementation and make it even more efficient, but to solve the problem above it's not necessary. </p>
    </div>