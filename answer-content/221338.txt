<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I looked through your code, but to be honest, I don't see much to review. Believe it or not; That's actually a good thing. I think. </p>

<p>You're basically using two libraries in two classes. But you haven't paid much attention to structuring your own code.</p>

<p>You could, for instance, have take a bit more effort in the <code>validator</code> class, splitting it up in methods for validating the various aspects of a phone number. Now it is all inside one big <code>validateNumbers()</code> method. It works, but as a <code>validator</code> it is far less useful than it could be. I almost start to wonder why this is a class in the first place? The same is true for <code>mobileValidator</code>, almost everything is cramped inside the <code>main()</code> method. </p>

<p><strong>In general a method should perform a <em>single task</em> in the context of its class.</strong></p>

<p>That means it should concentrate on the details of that single task. In your <code>validator</code> class <code>validateNumbers()</code> deals with all the aspects of the phone numbers. Were you to split it up a bit more, you could end up with methods like this:</p>

<pre><code>__construct($phoneUtil, $carrierMapper, $phoneNumberType)
restrictCountryAndRegionCodes($countryCode, $regionCodes)
validateNumbers($phoneNumbers)
validateNumber($phoneNo)
cleanNumber($phoneNo)
isMobileNumber($phoneNo)
getCarrier($phoneNo)
</code></pre>

<p>These are, of course, just examples. Notice how I detached the phone numbers  completely from the class constructor. That way you can feed it one, or many,  numbers, several times.</p>

<p>The point is: Your <code>validator</code> class is very specifically made for one job and only for that job. It cannot do anything else. It cannot easily be modified, expanded, or reused. As a class it is <em>not flexible</em>. By breaking up the code, into its functional parts, it becomes more flexible, and easier to read, refactor, debug and test.</p>

<p>This is basically the <em>Single Responsibility</em> principle, of the <a href="https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design" rel="nofollow noreferrer">SOLID principles</a>, applied to methods. Although these princicles are rather abstract, they do have real benefits when applied consistently.</p>

<p>If I were to write your code, I would first think about the main entities that it deals with; The files and the phone number. </p>

<p>This almost automatically suggests to me that there should be a class called 'PhoneNumber'. This class then gets various methods like <code>getNumber()</code> and <code>setNumber()</code>, and, of course, it could have a method called <code>isValidMobileNumber()</code>. It would deal with only one phone number. </p>

<p>The next class I can see is the file with the phone numbers. A class name for that could be simply: <code>DataFile</code>, and it would deal with the details of that file. </p>

<p>The last class is the <code>CSV</code> file.</p>

<p>These three classes are used by my extended CLI class like this:</p>

<pre><code>class PhoneNoValidatorCLI extends CLI
{
    private $phoneData = [];

    private function __construct()
    {
        $this-&gt;phoneNo = new PhoneNumber(.....);
        $this-&gt;addPhoneData("Phone Number", "Carrier", "Status"); // header
        parent::__construct();
    }

    public function addPhoneData($number, $carrier, $status)
    {
        $this-&gt;phoneData[] = [$number, $carrier, $status];
    }

    public function writeData2CSV($filename)
    {
        $csv = new CSV($filename);
        $csv-&gt;writeData($this-&gt;phoneData);
    }

    protected function main(Options $options)
    {
        $file = new DataFile(.....);
        while ($number = $file-&gt;nextLine()) {
            $this-&gt;phoneNo-&gt;setNumber($number);
            $this-&gt;addPhoneData($this-&gt;phoneNo-&gt;getNumber(),
                                $this-&gt;phoneNo-&gt;getCarrier(),
                                $this-&gt;phoneNo-&gt;getStatus());
        }
        $file-&gt;close();
        $this-&gt;writeData2CSV("phone_numbers_" . date('d-M-Y-H-i'));
    }
}
</code></pre>

<p>This is just a very crude example, lacking many details, but I hope you get the idea. In <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" rel="nofollow noreferrer">OOP</a> you first try to find the logical objects you're dealing with, and then write your code around them. You had two libraries and wrote your code around those, without thinking about the possible objects in your own task. </p>

<p>One last thing. You extend the <code>CLI</code> class. It is considered "bad practice" to extend classes <em>you do not own</em>. Your extension could break their class. However, I also see that the library itself tells you to use it like that. So forget about this.</p>
    </div>