<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Error Handling</h1>

<p>Your error handling is pretty inconsistent. Sometimes you just unwrap:</p>

<pre><code>    poll.poll(&amp;mut events, Some(to)).unwrap();
</code></pre>

<p>Sometimes you use expect:</p>

<pre><code>    call.perform(htp, &amp;poll).expect("Call failed")
</code></pre>

<p>Sometimes you use ?:</p>

<pre><code>    let poll = Poll::new()?;
</code></pre>

<p>Sometimes you <code>match</code>:</p>

<pre><code>    match do_call(&amp;mut htp, &amp;poll, call) {
        Ok(response_string) =&gt; ...
        Err(e) =&gt; return Err(format_err!("{}", e)),
    };
</code></pre>

<p>If you plan to write a reusable crate, you certainly do not want to <code>panic!()</code> via <code>unwrap()</code> or <code>expect()</code>. Your code in general would be a lot simpler if it consistently used ? to handle errors. </p>

<h1>Types</h1>

<p>Right now you pass around strings a lot. Part of the advantage of Rust is a powerful type system. Where possible it is better to have code take more precise types as parameters. For example, instead of taking the urls as a list of strings, take a list of URLs. Instead of running a path as a String, return it as a <code>Path</code>.  When it comes download files from URLS, there is a good chance you don't want Strings at all (which have to be utf-8) but the more generic <code>Vec&lt;u8&gt;</code></p>

<h1>Api</h1>

<p>Your download function does very different things depending on whether the dir is None or not. In particular, the return value has a completely different meaning. This sort of thing is tolerated in some other languages, but deeply frowned upon in Rust. Downloading to memory and to file should be different functions.</p>
    </div>