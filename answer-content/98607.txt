<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The requirements are broken down into:</p>

<ul>
<li>Return the sum of all indices of elements of 'arr' that can be paired with one other element to form a sum that equals the value in the second argument 'arg'.</li>
<li>If multiple sums are possible, return the smallest sum. Once an element has been used</li>
<li>Once an element has been used, it cannot be reused to pair with another.</li>
</ul>

<p>The first bullet point is easy enough to understand. We find pairs that sum up to the total, and sum up the indices.</p>

<p>However, your example contradicts the second bullet point. If multiple sums are found, it should return the smallest. 4 and 3 are 1 and 3 which results to 4. 2 and 5 are 2 and 5 which results to 7. The result should be 4 in the first example.</p>

<p>So here's my take on it</p>

<p></p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function pairwise(arr, total) {
// For each item in the array
var sums = arr.reduce(function (indexSum, firstNumber, firstIndex) {
    // Collect the pair's index which causes the numbers to sum to total
    var secondIndices = arr.slice(firstIndex + 1).reduce(function (secondIndices, secondNumber, i) {
        if (firstNumber + secondNumber === total) secondIndices.push(firstIndex + i + 1);
        return secondIndices;
    }, []);
    // Add to our collection the sum this iteration's index and
    // the pair indices
    return indexSum.concat(secondIndices.map(function (secondIndex) {
        return secondIndex + firstIndex
    }));
}, []);
// In all the items, find the smallest sum
return Math.min.apply(null, sums);
}

console.log(pairwise([1, 4, 2, 3, 0, 5], 7));
console.log(pairwise([1, 3, 2, 4], 4));</code></pre>
</div>
</div>


<p>Regarding bullet point 3, I would care less if a number was reused, like in the case of 6 in <code>[4, 4, 2]</code> or say <code>[4, 2, 9, 9, 4]</code> because any number that's going to pair with it after the first established pair will have a higher index sum anyways.</p>
    </div>