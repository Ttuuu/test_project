<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Remove paths from local includes</h2>

<p>It's generally better not to put the path explicitly in a local <code>#include</code> like this:</p>

<pre><code>#include "Source\OpCodeCatalog.h"
</code></pre>

<p>Better is to omit that like this:</p>

<pre><code>#include "OpCodeCatalog.h"
</code></pre>

<p>and then point the compiler to the appropriate path.  This makes your source code cleaner, more portable and easier to maintain.</p>

<h2>Use include guards in all <code>.h</code> files</h2>

<p>Every <code>.h</code> file should have an include guard.  For example, your <code>OpCode.h</code> file could be written like this:</p>

<pre><code>#ifndef OPCODE_H
#define OPCODE_H
// existing code here
#endif // OPCODE_H
</code></pre>

<p>It's better to use this than <code>#pragma once</code> because, by definition, a <code>#pragma</code> is compiler-specific and non-portable, while the include guards are explicitly part of the C++ standard.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rs-guards" rel="nofollow noreferrer">SF.8</a></p>

<h2>Use the required <code>#include</code>s</h2>

<p>The code uses <code>std::invalid_argument</code> which means that it should <code>#include &lt;stdexcept&gt;</code>.  It was not difficult to infer, but it helps reviewers if the code is complete.</p>

<h2>Rethink your object model</h2>

<p>There doesn't seem to be much point to the <code>AssemblyLine</code> class.  It seems to do little more than store the bytes retrieved.  There is also no simple way to print the instructions as it is.  I wrote this to print, but it's not very nice:</p>

<pre><code>std::ostream&amp; AssemblyLine::print(std::ostream&amp; out, OpCodeCatalog&amp; cat) const {
    auto op = cat.getOpCode(code);
    switch (byteCount) {
        case 1:
            out &lt;&lt; op.getGeneratedAsm();
            break;
        case 2:
            out &lt;&lt; op.getGeneratedAsm(param1);
            break;
        case 3:
            out &lt;&lt; op.getGeneratedAsm(param1, param2);
            break;
        default:
            out &lt;&lt; "too long!";
    }
    return out &lt;&lt; '\n';
}
</code></pre>

<p>Part of the problem with it is the interaction between the <code>AssemblyLine</code> class and the <code>OpCodeCatalog</code> class and the <code>OpCode</code> class.  We really shouldn't need all three for this.  </p>

<p>Also, if the <code>Disassembler</code> class cannot function without the <code>OpCodeCatalog</code> class, is there really much point in having them as separate classes?</p>

<h2>Check your spelling</h2>

<p>The function in the disassembler is <code>disasemble</code> (missing an <code>s</code>).  Those kinds of errors don't bother the compiler at all, of course, but they're really annoying to human users of the code.</p>

<h2>Don't abuse <code>const</code></h2>

<p>The usual advice I give is to add more <code>const</code> to function declarations, parameters, etc.  However in this case we have a little <em>too much</em> <code>const</code>.  Specifically, <code>const</code> type qualifiers on return values such as this:</p>

<pre><code>static const int hexStringToInt(const std::string&amp; toSplit);
</code></pre>

<p>are simply ignored and should be discarded.</p>

<h2>Write member initializers in declaration order</h2>

<p>The <code>AssemblyLine</code> class has this constructor:</p>

<pre><code>AssemblyLine::AssemblyLine(uint8_t code, uint8_t byteCount, const uint8_t param1, const uint8_t param2) :
    code(code),
    byteCount(byteCount),
    param1(param1),
    param2(param2)
{
}
</code></pre>

<p>That looks fine, but in fact, <code>byteCount</code> will be initialized <em>before</em> <code>code</code> because members are always initialized in <em>declaration</em> order and <code>byteCount</code> is declared before <code>code</code> in this class. To avoid misleading another programmer, you should swap the order of those such that it says instead:</p>

<pre><code>AssemblyLine::AssemblyLine(uint8_t code, uint8_t byteCount, const uint8_t param1, const uint8_t param2) :
    byteCount(byteCount),
    code(code),
    param1(param1),
    param2(param2)
{
}
</code></pre>

<h2>Make character constants visible</h2>

<p>One line in <code>OpCodeCatalog.cpp</code> looks like this:</p>

<pre><code>const auto tokens = FileReaderHelper::splitString(line, '   ');
</code></pre>

<p>That second argument is a tab character, but it's hard to tell because that's a non-printing character.  Better would be to use <code>'\t'</code> instead to make it visible rather than actually using a tab character there.</p>

<h2>Fix the bug</h2>

<p>If we have a processor (such as the 8080) for which some byte values are not documented opcodes, there may be less than 256 opcodes in the <code>OpCodeCatalog</code>.  However, the <code>getOpCode</code> function uses a direct lookup which makes the assumption that all of the opcodes are populated and that they were read in from the file in numerical order.  Neither of those assumptions are checked or enforced by the code.  I'd suggest using a <code>std::map</code> instead.</p>
    </div>