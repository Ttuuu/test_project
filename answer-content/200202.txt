<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your database management is kind of a mess:</p>

<ul>
<li>SQLAlchemy <a href="http://docs.sqlalchemy.org/en/latest/orm/session_basics.html#when-do-i-construct-a-session-when-do-i-commit-it-and-when-do-i-close-it" rel="nofollow noreferrer">recommend to keep your <code>session</code>s scope the same than your requests scope</a>;</li>
<li>Having a single, global, <code>session</code> and closing it after a request mean that you can only ever make a single request for the whole lifetime of your application (which is not very useful);</li>
<li>(I suspect that because of that) You mix using SQLAlchemy <code>session</code>s and plain <code>sqlite</code> connection, this is bad as a single tool should perform all these operations;</li>
<li>You mix table creation with application operations, these should be separated into two different scripts/task: your web server operate on the table, and an administration task (either by hand or with a dedicated script) is responsible for creating them beforehand.</li>
</ul>

<p>For simplification of these tasks, a library have been developed: <a href="http://flask-sqlalchemy.pocoo.org/2.3/" rel="nofollow noreferrer">Flask-SQLAlchemy</a></p>

<p>You can have the following layout:</p>

<p><strong>movie.py</strong></p>

<pre><code>from flask_sqlalchemy import SQLAlchemy


db = SQLAlchemy()


class Movie(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String, nullable=False)
    release_date = db.Column(db.Date, nullable=False)

# Iâ€™ll let you manage actors accordingly
</code></pre>

<p><strong>main.py</strong></p>

<pre><code>from flask import Flask, render_template, request, flash, url_for, redirect
from movie import Movie, db


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///adatabase.db'
db.init_app(app)


# regular route definitions


if __name__ == '__main__':
    app.run(debug=True)
</code></pre>

<p>And then, the table creation can simply be done by launching into your Python interpreter and doing:</p>

<pre><code>&gt;&gt;&gt; from movie import db
&gt;&gt;&gt; from main import app
&gt;&gt;&gt; app.app_context().push()
&gt;&gt;&gt; db.create_all()
</code></pre>

<p>No need to embed this logic into your web-server. Or, at the very least, put it into a function in your <code>main.py</code>, you don't have to run this every time you launch your server.</p>

<hr>

<p>Now to the part about your web server. The kind of operations you display here is know as <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" rel="nofollow noreferrer">CRUD</a>. This usually requires two kind of routes:</p>

<ol>
<li>A general route to list all items of a kind and to create new ones;</li>
<li>A specific route to manage a single element (read, update, delete).</li>
</ol>

<p>The general route usually respond to GET and POST, the specific one usually respond to GET, <a href="https://stackoverflow.com/q/12142652/5069029">PUT and DELETE</a>.</p>

<p>A rough sketch of the application would be:</p>

<pre><code>from datetime import datetime
from contextlib import suppress

from flask import Flask, render_template, request, redirect, url_for
from movie import Movie, db


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///adatabase.db'
db.init_app(app)


@app.route('/', methods=['GET'])
@app.route('/movies', methods=['POST', 'GET'])
def movies():
    if request.method == 'POST':
        title = request.form['title']
        release_date = request.form['release_date']

        db.session.add(Movie(title, parse_release_date(release_date)))
        db.session.commit()

    movies = Movie.query.all()
    return render_template('movies.html', movies=movies)


@app.route('/movies/&lt;int:post_id&gt;', methods=['GET', 'PUT', 'DELETE'])
def movie(post_id):
    the_movie = Movie.query.filter(Movie.id == post_id).first()

    if request.method == 'DELETE':
        db.session.delete(the_movie)
        db.session.commit()
        return redirect(url_for('movies'))

    if request.method == 'PUT':
        with suppress(KeyError):
            the_movie.title = request.form['title']
        with suppress(KeyError):
            the_movie.release_date = parse_release_date(request.form['release_date'])
        db.session.commit()

    return render_template('single_movie.html', movie=the_movie)


def parse_release_date(date):
    parsed_date = datetime.strptime(date, '%Y-%m-%d')
    return parsed_date.date()


if __name__ == '__main__':
    app.run(debug=True)
</code></pre>

<p>Then you just need a simple <code>movies.html</code> displaying the list of movies and providing a form to add a new one; and a <code>single_movie.html</code> presenting the informations of a movie and providing a form to update it as well as a delete button.</p>
    </div>