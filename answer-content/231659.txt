<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, the iterative approach is unnecessary, as we know the minimum must be at x = -b/a.  I'll assume that the use of a quadratic function here is supposed to be illustrative of a more general function.</p>

<p>There's an unnecessary include of <code>&lt;stdlib.h&gt;</code>, so we can drop that.  <code>return 0;</code> is not needed at the end of <code>main()</code>, so we can omit that too.</p>

<p>It's clearer to declare <code>main()</code> as taking no arguments: <code>int main(void)</code>.</p>

<p>It's 20 years since local variables needed to be declared at the beginning of their enclosing scope; it's better to declare where first initialised if possible, to reduce the likelihood of accidentally using an uninitialised variable.  This is a bug we have in this program, where we use <code>x</code> before it's ever initialised.</p>

<p>Always, <strong>always</strong> check the result of <code>scanf()</code> and family before assuming that assignments were made.  If either of these fail, then we can't assume that <code>a</code> and <code>b</code> contain valid values:</p>

<pre><code>if (scanf("%d%d", &amp;a, &amp;b) != 2) {
    fputs("Invalid inputs\n", stderr);
    return EXIT_FAILURE;   /* from &lt;stdlib.h&gt; */
}
</code></pre>

<p>As an aside, why do we only want integer values for <code>a</code> and <code>b</code>?  I think they should be <code>double</code> (as should all the <code>float</code> variables).</p>

<p>A <code>while</code> loop that ends in an unconditional <code>break</code> or <code>return</code> can only ever run 0 or 1 times, so it's equivalent to an <code>if</code> statement, and should be written as such.  In fact, why are we returning a <code>float</code> from <code>main()</code>?</p>

<p>The code disagrees with the description in printing the result:</p>

<blockquote>
<pre><code>        printf("min y is %lf",min_y);
</code></pre>
</blockquote>

<p>Weren't we supposed to print the minimum <em>x</em> ordinate?  (<code>min_y</code> is trivially always zero for y = (<em>a</em>​x + <em>b</em>)², isn't it?)</p>
    </div>