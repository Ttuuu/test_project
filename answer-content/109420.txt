<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I suggest you allow printing to a different stream with <code>printArray</code>, though <code>std::cout</code> is a good default:</p>

<pre><code>void printArray(int arr[], int length, std::ostream&amp; out = std::cout)
</code></pre></li>
<li><p>If you define your functions before you use them, you don't need any forward-declarations. Repeating yourself is error-prone and tedious.</p></li>
<li><p><code>return 0;</code> is implicit for <code>main</code> in C++ and C99+.</p></li>
<li><p>There's a standard-function <code>std::swap</code> for swapping objects. Though if you really need to swap elements in an array that often, sure a convenience-function is a good idea, though it should be <code>static</code>:</p>

<pre><code>static void indexed_swap(int arr[], int i, int j) { std::swap(arr[i], arr[j]); }
</code></pre></li>
<li><p>In <code>bubbleSort</code> you forgot about your convenience-function and the standard-function, doing it manually instead. But <em>why</em> do you define your temporary all the way outside the loop?</p></li>
<li><p>Why do you pass around a pointer to the full array, a start- and an end-index in your implementations of quicksort and mergesort?<br>
It's irrelevant where the slice you are working on in that moment is in relation to the full array, so a pointer to the beginning and a length (or pointer to end) are enough.</p>

<p>Ah, yes, you said you were contaminated by Java...</p>

<p>Also, in C++ we have unsigned types.</p></li>
<li><p>In both quicksort and mergesort, consider sorting small sequences (maybe up to 4 elements, yours to test) with bubble-sort, insertion-sort or such.</p></li>
<li><p>Consider writing an in-place variant for merging, but at least get rid of the memory leak in <code>mergeSort</code>, you forgot to <code>delete []</code> your side-buffer.</p></li>
<li><p>One can easily replace recursive calls to mergesort with iteration.</p>

<p>Start with small windows (whatever you want to sort with a different method, or 2 if you want it pure, the last in each iteration is potentially partial), and work your way up until a single window encompasses the whole sequence.</p></li>
<li><p>If you keep needing <code>copyArray</code>, that's easily provided by the standard-library:</p>

<pre><code>void copyArray(int src[], int srcPos, int dest[], int destPos, int toCopyLength) {
    std::copy_n(src+srcPos, toCopyLength, dest+destPos);
}
</code></pre></li>
</ol>
    </div>