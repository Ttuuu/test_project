<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview. It's never too early to develop good coding habits, and reviewing your code is about the best way to do so.</p>

<p>First, congratulations on writing a clean, straightforward program. While you do have some issues (below), they're not major, and your program seems appropriate for its level.</p>

<p>Now, for the issues ;-)</p>

<h1>Use whitespace</h1>

<p>Python requires you to use horizontal whitespace. But you should also use vertical whitespace (aka "blank lines") to organize the different parts of your code into <em>paragraphs.</em></p>

<p>This huge block:</p>

<pre><code>import time
import random
fishing = True
a = b = c = d = e = 0 #define multiple variables as same thing
print ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
print ("Welcome to Lake Tocowaga")
print ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
time.sleep(1)
name = input("What is your name fisherman?")
answer = input("Would you like to go fishing, " + name + "?")
if answer.lower() == "no":
    fishing == False
while fishing == True:  
</code></pre>

<p>would read better if it were broken up like so:</p>

<pre><code>import time
import random

fishing = True
a = b = c = d = e = 0 #define multiple variables as same thing

print ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
print ("Welcome to Lake Tocowaga")
print ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
time.sleep(1)

name = input("What is your name fisherman?")
answer = input("Would you like to go fishing, " + name + "?")

if answer.lower() == "no":
    fishing == False

while fishing == True:    
</code></pre>

<p>All I did was add a few blank lines, but I was trying to show that "these things go together" and "these things are in sequence but not related".</p>

<h1>Use meaningful names:</h1>

<p>Which one of these is the shark?</p>

<pre><code>a = b = c = d = e = 0
</code></pre>

<p>I have no idea. But if you named them appropriately:</p>

<pre><code>cod = shark = wildfish = salmon = nothing = 0
</code></pre>

<p>I would know for sure!</p>

<h1>Use named constants</h1>

<p>This line appears three times:</p>

<pre><code>print ("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
</code></pre>

<p>It's probably hard to get the right number of tilde characters, unless you are copy/pasting it. And if you're doing that, it's probably a pain. Instead, create a name for the tildes. By convention, constants are spelled in uppercase. (It's not really a constant, but since constants are spelled in upper case, if you name it in upper case you'll know not to modify it.)</p>

<pre><code>H_LINE = "~" * 32

print(H_LINE)
print("Welcome to Lake Tocowaga")
print(H_LINE)
</code></pre>

<h1>Put last things last</h1>

<p>There's a place for everything. And everything should be in its place. The place for printing a summary would be at the bottom.</p>

<p>You had a good idea with your <code>while fishing:</code> loop. But instead of immediately printing the summary when you respond to the user input, just change the variable and let the loop fail, then print the summary at the bottom. It's more "natural" (and it makes your loops easier to read!).</p>

<pre><code>while fishing == True:    
    time.sleep(1)
    answer = input("Throw out your line, or go home?")
    if answer == "go home":
        fishing = False
        er = float(e / (a + b + c + d))
        print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
        print("Thanks for playing " + name + "!")
        print("You caught:", str(a), "cod, ", str(b), "salmon, ", str(c), "shark, ", str(d), "wildfish. \nEfficiency Rate: ", str(er), ".")
    else:
        ...
</code></pre>

<p>Becomes:</p>

<pre><code>while fishing == True:    
    time.sleep(1)
    answer = input("Throw out your line, or go home?")
    if answer == "go home":
        fishing = False
    else:
        ...

er = float(e / (a + b + c + d))
print(H_LINE)
print("Thanks for playing " + name + "!")
print("You caught:", str(a), "cod, ", str(b), "salmon, ", str(c), "shark, ", str(d), "wildfish. \nEfficiency Rate: ", str(er), ".")
</code></pre>

<h1>Let the built-in functions do their job</h1>

<p>You are calling functions that you don't need to call. The result of "true" division between integers is a float. You don't need to call <code>float(e / (a + b + c + d))</code>. And if you <em>did</em> need to call it, you'd be calling it too late!</p>

<p>Likewise, <code>print</code> knows how to handle integers and floating point numbers. You don't need to <code>print(..., str(a), ...)</code> when you can just do:  <code>print(..., a, ...)</code>.</p>
    </div>