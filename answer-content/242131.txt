<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public static class TaskExtensions
{
    private static readonly TaskFactory TaskFactory = new TaskFactory(
            CancellationToken.None, 
            TaskCreationOptions.None, 
            TaskContinuationOptions.None, 
            TaskScheduler.Default);

    public static TResult RunSync&lt;TResult&gt;(this Func&lt;Task&lt;TResult&gt;&gt; asyncFunc)
        =&gt; TaskFactory
            .StartNew(asyncFunc)
            .Unwrap()
            .GetAwaiter()
            .GetResult();

    public static void RunSync(this Func&lt;Task&gt; asyncAction)
        =&gt; TaskFactory
            .StartNew(asyncAction)
            .Unwrap()
            .GetAwaiter()
            .GetResult();
}
</code></pre>

<p>There are several things that worth mentioning:  </p>

<ul>
<li>Async methods were designed to be used all the way. So, if you call an async I/O operation in the bottom layer then it should be be called in an async fashion till the top layer.</li>
<li>Async operations are sensitive for <code>Exception</code>s. They can behave differently based on how you call them. (They can be swallowed, thrown as an <code>AggregateException</code> or thrown normally. Here the <code>UnWrap</code> + <code>GetAwaiter</code> do the magic for us to be able to handle the exception normally.  </li>
<li>In order to avoid deadlocks the async operation is passed to an other Task, that is where <code>TaskFactory.StartNew</code> comes into play. </li>
</ul>
    </div>