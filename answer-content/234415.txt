<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition of @Heslacher points, I would say the way you're handling the constants is making you doing extra work. </p>

<pre><code>public static readonly KeyValuePair&lt;string, string&gt; PERSON_NAME = new KeyValuePair&lt;string, string&gt;("client_name", "${PersonName}");
public static readonly KeyValuePair&lt;string, string&gt; PERSON_AGE = new KeyValuePair&lt;string, string&gt;("my_age", "${PersonAge}");
public static readonly KeyValuePair&lt;string, string&gt; MOTHER_NAME = new KeyValuePair&lt;string, string&gt;("mother", "${MotherName}");
</code></pre>

<p>Using the above can be simplified in a <code>Dictionary</code>. So, you can combine them to this : </p>

<pre><code>public static readonly Dictionary&lt;string, string&gt; Person_Info = new Dictionary&lt;string, string&gt;
{
    { "client_name", "${PersonName}" },
    { "my_age", "${PersonAge}" },
    { "mother", "${MotherName}" }
};
</code></pre>

<p>With this, you can get the constant value like this : </p>

<pre><code>var key = "mother";

if(Person_Info.TryGetValue(key, out string _value))
{
    // do something with the value
}
</code></pre>

<p>So, if you go to each class in <code>[X]Constants classes</code> and combine the <code>KeyValuePair&lt;string, string&gt;</code> you'll flatten your classes, and might end up with one class that holds multiple <code>Dictionary</code> properties, which will make things even simpler to access, and If the <code>keys</code> are unique in all classes, you can combine them all in one dictionary, so you can have one method that will process all the bindings process. </p>

<pre><code>public IEnumerable&lt;BindDto&gt; GenerateBinds(IEnumerable&lt;Form&gt; forms)
{
    // for demoenstration only when using Dictionary&lt;string,string&gt; .
    var constants = ConstsClass.ConstantsDictionary; 


    foreach (var form in forms)
    {
        var formResponses = form.response.ToObject&lt;Dictionary&lt;string, string&gt;&gt;();

        foreach (var field in formResponses.Keys)
        {
            if(constants.TryGetValue(field, out string _value))
            {       
                yield return new BindDto(_value, formResponses[field]);
            }               
        }
    }
}
</code></pre>

<p>With the <code>Dictionary</code> approach, you'll also eliminate the need of using reflection. If you need multiple dictionaries, you can adjust your method, and add a dictionary argument so you can pass the correct dictionary something like this : </p>

<pre><code>public IEnumerable&lt;BindDto&gt; GenerateBinds(IEnumerable&lt;Form&gt; forms, IDictionary&lt;string, string&gt; constants)
{
    foreach (var form in forms)
    {
        var formResponses = form.response.ToObject&lt;Dictionary&lt;string, string&gt;&gt;();

        foreach (var field in formResponses.Keys)
        {
            if(constants.TryGetValue(field, out string _value))
            {       
                yield return new BindDto(_value, formResponses[field]);
            }               
        }
    }
}
</code></pre>
    </div>