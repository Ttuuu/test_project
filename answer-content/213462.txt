<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Computers do numbers!</h1>

<p>Compared to manipulating numbers, strings are very slow and use a lot of memory relative to what is being done.</p>

<p>To test if it is a perfect integer</p>

<pre><code>const isPerfectInt = num =&gt; {
    var sum = (num | 0) % 10;
    while (num &gt; 0) { sum += (num = num / 10 | 0) % 10 }
    return sum === 10;
}
</code></pre>

<h2>Improved cache</h2>

<p>You are caching results in your answer and you only cache what you are looking for. However while you are searching you find all the perfect values below the one you are looking for. This negates most the advantage you get from caching calculations.</p>

<p>If you keep all calculated perfect numbers you can then use that last calculated value as a starting point. That way you will never test the same value twice.</p>

<pre><code>const cache = [0,19];  // set up first value. Saves some messing about
const getNthPerfectNumber = n =&gt; {
    if (cache[n]) { return cache[n] }

    // Start from the last number tested plus one.
    var idx = cache.length - 1, num = cache[idx] + 1;
    while (idx &lt; n) {
        if (isPerfectInt(num)) { cache[++idx] = num }
        num++;
    }
    return num - 1;
};
</code></pre>
    </div>