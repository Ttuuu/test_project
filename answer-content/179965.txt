<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>  @Override
  public void recordUserBidOnItem(Bid bid, Item item) throws InvalidBidException {
    checkForNull(bid);
    checkForNull(item);
    recordUserBidOnItemSync(bid,item);
  }
</code></pre>

<p>Did you use your auto-formatter? There's a missing space between the comma and <code>item</code> here.</p>

<pre><code>  private void addBidOnItem(Item item, Bid bid) {
    List&lt;Bid&gt; bidsOnItem = auctionBoard.getOrDefault(item, new ArrayList&lt;&gt;());
    bidsOnItem.add(bid);
    auctionBoard.put(item, bidsOnItem);
  }
</code></pre>

<p>This could be rewritten to use <code>computeIfAbsent</code>:</p>

<pre><code>auctionBoard.computeIfAbsent(item, ignored -&gt; new ArrayList&lt;&gt;()).add(bid);
</code></pre>

<p>Only slightly shorter, but it does help.</p>

<pre><code>  @Override
  public Optional&lt;Bid&gt; getCurrentWinningBidForItem(Item item) {
    LinkedList&lt;Bid&gt; bids = new LinkedList&lt;&gt;(getAllBidsForItem(item));
    return bids.isEmpty() ? Optional.empty() : Optional.of(bids.getLast());
  }
</code></pre>

<p>Here there's no real reason to wrap the bids in a linked list. </p>

<pre><code>  @Override
  public Optional&lt;Bid&gt; getCurrentWinningBidForItem(Item item) {
    List&lt;Bid&gt; bids = getAllBidsForItem(item);
    return bids.isEmpty() ? Optional.empty() : Optional.of(bids.get(bids.size() - 1));
  }
</code></pre>

<p>You could maybe turn that into a helper function, <code>getLastOfList</code>. </p>

<hr>

<pre><code>  private void checkForNull(Item item) {
    if(item == null)
      throw new IllegalArgumentException("Item can't be null");
  }

  private void checkForNull(Bid bid) {
    if(bid == null)
      throw new IllegalArgumentException("Bid can't be null");
    if(bid.getUser() == null)
      throw new IllegalArgumentException("Bid's user can't be null");
  }
</code></pre>

<p>To me, these two methods hurt the most.</p>

<p>To start with, these methods shouldn't have been implemented by you. Use <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#requireNonNull-T-java.lang.String-" rel="nofollow noreferrer">Objects.requireNotNull</a>:</p>

<pre><code>  @Override
  public List&lt;Bid&gt; getAllBidsForItem(Item item) {
    checkForNull(item);
    return auctionBoard.getOrDefault(item, new ArrayList&lt;&gt;());
  }
</code></pre>

<p>would become</p>

<pre><code>  @Override
  public List&lt;Bid&gt; getAllBidsForItem(Item item) {
    Objects.requireNotNull(item);
    return auctionBoard.getOrDefault(item, new ArrayList&lt;&gt;());
  }
</code></pre>

<p>or</p>

<pre><code>  @Override
  public List&lt;Bid&gt; getAllBidsForItem(Item item) {
    return auctionBoard.getOrDefault(Objects.requireNotNull(item), new ArrayList&lt;&gt;());
  }
</code></pre>

<p>possibly with custom message.</p>

<p>Second, but that's just personal preference, although that could make you a bad fit, </p>

<pre><code>  private void checkForNull(Bid bid) {
    if(bid == null)
      throw new IllegalArgumentException("Bid can't be null");
    if(bid.getUser() == null)
      throw new IllegalArgumentException("Bid's user can't be null");
  }
</code></pre>

<p>this right here, with the if statements without braces? That's bad form. At least, to me it is.</p>

<p>And then of course there's the overloading for checkForNull where it takes either Item or Bid. Even although the two are completely unrelated. That's weird.</p>

<p>I'd personally have named them <code>validateItem</code> and <code>validateBid</code>. You could have put various business logic in there. Maybe you can't have negative bids? I dunno. It's a bit of a shame they gave you no feedback, if I was interviewing you I'd be interested in pressing you on these points.</p>

<hr>

<pre><code> * The reason should be explained in the message or this Exception could be subclassed by finer grain Exceptions.
</code></pre>

<p>You've got a typo there, should be "finer grained Exceptions." ... it's a minor issue, though.</p>

<hr>

<pre><code>/**
 * The interface for a Bid Tracker.
 * This interface exposes methods allowing {@link User}s to post {@link Bid}s on {@link Item}s
 * and query the current state of the auction.
 */
public interface BidTracker {

  /**
   * Records a bid for a given item.
   * @param bid the bid to record
   * @param item the item to bid on
   * @throws InvalidBidException when the bid is invalid
   */
  void recordUserBidOnItem(Bid bid, Item item) throws InvalidBidException;

  /**
   * @param item the item
   * @return the current winning bid (last valid bid), as an {@link Optional}, for the given item
   */
  Optional&lt;Bid&gt; getCurrentWinningBidForItem(Item item);

  /**
   * @param item the item
   * @return the list of all bids made for the given item
   */
  List&lt;Bid&gt; getAllBidsForItem(Item item);

  /**
   * @param user the user to get the list of items for
   * @return the list of all items bid on by the given user
   */
  Set&lt;Item&gt; getAllItemsWithBidFromUser(User user);

}
</code></pre>

<p>Ooh, documentation.</p>

<p>How much of it is useful?</p>

<pre><code>/**
 * The interface for a Bid Tracker.
 * This interface exposes methods allowing {@link User}s to post {@link Bid}s on {@link Item}s
 * and query the current state of the auction.
 */
public interface BidTracker {
</code></pre>

<p>That first sentence is useless. <code>public interface BidTracker</code> - "The interface for a Bid Tracker." Autocomplete in IDEs tends to give you the first sentence and you've just wasted it. The second sentence is better and actually explains what a BidTracker ... Service... actually does.</p>

<pre><code>  /**
   * Records a bid for a given item.
   * @param bid the bid to record
   * @param item the item to bid on
   * @throws InvalidBidException when the bid is invalid
   */
  void recordUserBidOnItem(Bid bid, Item item) throws InvalidBidException;
</code></pre>

<p>The method <code>recordUserBidOnItem</code> Records a bid for a given item. Duhhh. It's redundant.</p>

<p>The bid is the bid to record (you know, "recordUserBid"), then item is the item to bid on ("OnItem"). This is all just duplication. Also, it throws InvalidBidException when the bid is invalid.</p>

<p>... All of that information you have put in the documentation was literally IN the method signature!</p>

<p>Look at it!</p>

<pre><code>void recordUserBidOnItem(Bid bid, Item item) throws InvalidBidException;
</code></pre>

<p>It records a user's bid on an item. You have to provide the bid and the item. Also, it might throw InvalidBidException (presumably because the bid is invalid). And it returns void, so I guess the recording is "saving" or something.</p>

<p>There was no new information in the javadoc, as a result the javadoc is just meaningless noise. I don't blame you, from the problem brief you have no real business rules to describe here, but still. Don't put javadoc on methods just to tick a box.</p>

<pre><code>  /**
   * @param item the item
   * @return the current winning bid (last valid bid), as an {@link Optional}, for the given item
   */
  Optional&lt;Bid&gt; getCurrentWinningBidForItem(Item item);
</code></pre>

<p>And here you do it again! Although I must admit - there's one nugget of information here. A "currentWinningBid" is the "last valid bid" for a given item. But the rest is noise. It can go.</p>

<pre><code>  /**
   * @param item the item
   * @return the list of all bids made for the given item
   */
  List&lt;Bid&gt; getAllBidsForItem(Item item);
</code></pre>

<p>Useless.</p>

<pre><code>  /**
   * @param user the user to get the list of items for
   * @return the list of all items bid on by the given user
   */
  Set&lt;Item&gt; getAllItemsWithBidFromUser(User user);
</code></pre>

<p>That's no <code>List</code>, that's a <code>Set</code>! So why are you calling it a list?</p>

<p>Also, the rest of the documentation here is useless too.</p>

<p>This entire interface would have been better off without method level javadoc.</p>

<hr>

<p>The thing is, as a junior backend developer, yeah, you'd be pretty workable. Depending on how badly I needed people, I'd hire you, if the personality was a match. I don't know what kind of job you applied to. For a higher experienced job, I'd expect better.</p>

<p>On the other hand, I don't know how much time you spent on this. An hour? Three hours? A day? If it was a day I'd think it to be a bit much but if you did this in an hour then I'd say it'd just need a bit of polishing. I mean, I did kinda tear into it, but most of my comments were minor. I'm not really spotting any bugs either. </p>

<p>I think the most important thing you should take away from this review is that you should have sensible javadoc. And, where possible, provide an explanation from your point of view when you're presenting your work. Why did you make certain choices? For instance, why does a BidTracker accept random items to be bidded on, items it has never seen before? Maybe you take it as a given that you can just let a BidTracker work like that for demonstration purposes. Maybe they see it as a law of Demeter violation.</p>
    </div>