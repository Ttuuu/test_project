<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Option Explicit!</h2>

<p>Suggestion #1: Put <code>Option Explicit</code> at the top of the module. <strong>Always!</strong></p>

<p>This would have prevented the very embarrassing error of <code>Dict.Add Ary(I, 1), MyClass</code>. Upon which I see that this code would neither compile nor run unless this Class is a default instance.</p>

<h2>Function or Sub?</h2>

<p>If you are only returning one value, then you can use a <code>Function</code>, not a <code>Sub</code>.</p>

<h2>Keep it Simple!</h2>

<p>You have made this more complicated than required. You already pass in a <code>ListObject</code>, and you want the <code>DataRange</code>. Just do that instead of calling custom classes that return something that you then have to modify/clean up. </p>

<blockquote>
<pre><code>Dim ThisList As TableHandler
Set ThisList = New TableHandler

Dim Ary As Variant

If ThisList.TryReadTable(Tbl, False, Ary) Then
    [...]
</code></pre>
</blockquote>

<p>becomes</p>

<pre><code>Dim Ary As Variant
If Not Tbl is Nothing then 
    Ary = Tbl.DataRange
    [...]
</code></pre>

<p>In addition, you have <code>pInitialized = True</code> but you don't declare or use <code>pInitialized</code> anywhere else.</p>

<h2>Interface or encapsulate?</h2>

<p>This is a classic example where the use of an interface would greatly assist.
Create an interface class which basically sets up a contract for some of the methods to be used. In other words, make sure that all of these 10-12 Classes you mention have the right method or property so that you can call and create as required.</p>

<blockquote>
<pre><code>Public Sub MakeDictionary( _
    ByVal Tbl As ListObject, _
    ByRef Dict As Scripting.Dictionary)
</code></pre>
</blockquote>

<p>Can become</p>

<pre><code>Public Sub MakeDictionary( _
    ByVal Tbl As ListObject, _
    ByRef Dict As Scripting.Dictionary, 
    ByVal SomeTag as &lt;whatever type is most appropriate&gt;)
</code></pre>

<p>And further in the code you can have</p>

<pre><code>    For I = LBound(Ary, 1) To UBound(Ary, 1) '&lt;- remember - we fixed this in my comment above!
        Dim ThisClass As IClass
        Select Case SomeTage
            Case TagA
                Set ThisClass = New MyClass1
            Case TagB
                Set ThisClass = New MyClass2
        End Select

        'ThisClass.Field1 = Ary(I, 1)
        'ThisClass.Field2 = Ary(I, 2)
        ThisClass.RelevantFillMethod(Ary(I, 1),Ary(I, 2))

        If Dict.Exists(Ary(I, 1)) Then ' Just in case there is some sort of transform?
            MsgBox "Entry already exists: " &amp; Ary(I, 1)
        Else
            Dict.Add Ary(I, 1), ThisClass 
        End If
    Next I
</code></pre>

<p>Now, if the Interface had a factory method which created a new version of the relevant class - you could dispense with the <code>Dim</code> and pass the <code>MyClass1</code> instance as a parameter, calling <code>MyClass1.New</code> as necessary.</p>

<pre><code>' Class IClass
Option Explicit

Public Function NewMe() As IClass
End Function

Public Sub RelevantFillMethod(val1 As Variant, val2 As Variant)
End Sub
</code></pre>

<p>And</p>

<pre><code>' Class Class1
Option Explicit
Implements IClass


Private p_V1 As Variant
Private P_V2 As String

Public Function EverythingElse()
    '[...]
End Function


Private Function IClass_NewMe() As IClass
    Set IClass_NewMe = New Class1
End Function

Private Sub IClass_RelevantFillMethod(val1 As Variant, val2 As Variant)
    p_V1 = val1
    P_V2 = CStr(val2)
End Sub
</code></pre>

<h2>Subs and functions!</h2>

<p>Of course, you can make this a bit easier by addressing the single responsibility concept and using logical functions. However, in the OP there is not enough information to understand where this logic break is.</p>

<pre><code>Identify and loop through tables
    Create array from table '&lt;= can be a function that returns an array - single responsibility
    Identify relevant Class
    Update Dictionary based on array '&lt;= single responsibility, 
        'parameters could be the array, the dictionary and 
        'the instance of the class based on the interface
</code></pre>

<p>For example</p>

<pre><code>Sub UpdateDictionary(ByVal Ary as Variant, ByRef Dict as Dictionary, ThisClass as IClass)    
    For I = LBound(Ary, 1) To UBound(Ary, 1)
        If Dict.Exists(Ary(I, 1)) Then 
            MsgBox "Entry already exists: " &amp; Ary(I, 1)
        Else
            Set ThisClass = ThisClass.NewMe
            ThisClass.RelevantFillMethod(Ary(I, 1),Ary(I, 2))
            Dict.Add Ary(I, 1), ThisClass 
        End If
    Next I
End Sub
</code></pre>

<h2>Final comments</h2>

<p>What I have suggested above may not be the most elegant - but it is a start. Making something generic is about being able to abstract to the relevant layer.</p>
    </div>