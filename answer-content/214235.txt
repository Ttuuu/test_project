<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To expand on <a href="https://codereview.stackexchange.com/questions/214221/allow-console-draw-poker-game-to-output-more-hands/214228#214228">@Graiphers</a> excellent review,</p>

<p><strong>Adding multiple decks</strong></p>

<p>@Graipher differs from your post as he only uses a single deck, but this can easily be added</p>

<pre><code>deck = [
    Card(value, suit) for value, suit in product(range(2, 15), "♥♠♣♦")
    for _ in range(num_of_decks)
]
</code></pre>

<p><strong>Avoid magic numbers</strong></p>

<p>Since a number has no special meaning, and you should avoid dedicating chunks of code to a specific number.</p>

<p>If that number changes you would have to change all occurrences of that number which is error-prone</p>

<p>Secondly and I already stressed this, numbers don;t have meaning variables do!</p>

<p>You can use <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Enum</a> which is in the standard library to solve this problem</p>

<pre><code>class PossibleHands(Enum):
    ROYAL_FLUSH = 10000,
    WHEEL_STRAIGHT_FLUSH = 8999,
    STRAIGHT_FLUSH = 90000,
    FLUSH = 6000
    ...
</code></pre>

<p>And when @Graipher returns the name and the strength value, you could use that Enum value</p>

<blockquote>
<pre><code>return "Royal Flush", 10000
</code></pre>
</blockquote>

<p>would be</p>

<pre><code>return PossibleHands.ROYAL_FLUSH , PossibleHands.ROYAL_FLUSH.value
</code></pre>

<p><strong>Validate your user input</strong></p>

<p>Your program will currently break if the user input some wrong values,</p>

<p>ie </p>

<pre><code>How many decks are there? s
...
ValueError: invalid literal for int() with base 10: 's'
</code></pre>

<p>Or if you input more players then is possible</p>

<pre><code>How many decks are there? 1
How many players are there (max 10)? 21
...
IndexError: pop from empty list
</code></pre>

<p>This can be avoided by using a function to check the input</p>

<pre><code>def get_value(_max, mess):
    while True:
        try:
            v = int(input(mess))
            if (_max is None or v &lt;= _max) and v &gt; 0:
                return v
            else:
                smaller = '' if _max is None else f'and smaller then {_max}'
                print(f'Value should be greater then 0 {smaller}')
        except ValueError:
            print('Please enter an integer')

def main():
    num_of_decks = get_value(None, f'How many decks? ')
    deck = [
        Card(value, suit) for value, suit in product(range(2, 15), "♥♠♣♦")
        for _ in range(num_of_decks)
    ]
    max_players = floor((num_decks*52) / 5)
    num_players = get_value(max_players, f'How many players are there? (max {max_players}) ')
   ...
</code></pre>

<p>Now the getting of wrong input is handled correctly</p>

<pre><code>How many decks? s
Please enter an integer
How many decks? 2
How many players are there? (max 20) 22
Value should be greater then 0 and smaller then 20
How many players are there? (max 20) 1
</code></pre>

<p><strong>Avoid using global variables</strong></p>

<p>You use <code>global val</code> a few times, and this is a bad habit to get into. Because it will make it unclear where a variable is changed. So it makes tracking down that 1 bug a real pain in the ***</p>

<p>@Graipher solves this by having a <code>Hand</code> class</p>
    </div>