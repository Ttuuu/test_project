<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The namespace <code>std</code> is not designed for wholesale importation, see "<em><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is “using namespace std” considered bad practice?</a></em>" for more detail.</p>
<p>You could instead do a <code>using std::cout;</code> or better qualify the three use-sites.</p>
</li>
<li><p>You don't in any way encapsulate the list and abstract over the list. It's just a bunch of <code>Node</code>s. Consider putting it all into a <code>List</code> owning and managing the whole lot.</p>
</li>
<li><p>Trying to <code>remove()</code> the root-<code>Node</code> uncovers a bug. Try to trace it through.</p>
</li>
<li><p><code>pointer != nullptr</code> is just a long-winded way to write <code>pointer</code> in a boolean context. Respectively for <code>pointer == nullptr</code> and <code>!pointer</code>. Yes, Java needs that, but this is C++.</p>
</li>
<li><p>When you <code>return</code> from the <code>if</code>-branch, putting the alternative in an <code>else</code>-branch is superfluous.</p>
</li>
<li><p>A function for printing an object should allow the <em>caller</em> to specify the stream, and be called <code>operator&lt;&lt;</code>.</p>
</li>
<li><p>There is no reason to rely on the compiler transforming recursion to iteration, especially as it might not always be able.</p>
</li>
<li><p><code>this</code> should rarely be used explicitly.</p>
</li>
</ol>
    </div>