<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Mathematical observation</strong></p>

<p>Let's consider the <code>i-th</code> door after <code>n</code> rounds and see when its state changes.</p>

<p>This boils down to considering the divisors of <code>i</code> smaller than n. In particular, we could try to handle them by pair <code>(p, q)</code> such than <code>i = p * q</code>. Without limitation, we can assume <code>p &lt;= q</code>.</p>

<ul>
<li>If <code>0 &lt; p &lt; q &lt; n</code> ("usual situation"), the door will change its state at step p and q =&gt; these divisors cancel each other</li>
<li>If <code>0 &lt; p = q &lt; n</code> ("perfect square root"), the door will change its state once =&gt; the door state changes</li>
<li>If <code>0 &lt; n &lt; p &lt;= q</code> ("both are too big"), the door will not be changed</li>
<li>If <code>0 &lt; p &lt; n &lt;= q</code> ("one is too big"), the door will change its state once =&gt; the door state changes</li>
</ul>

<p>The last cases are a bit tedious to consider but using the first 2 cases, we can see than once n gets big enough, we'll have only 2 different situations:</p>

<ul>
<li><p>i is a perfect square: all pairs of divisors cancel each other except for one: the door ends up open</p></li>
<li><p>i is not a perfect square: all pairs of divisors cancel each other: the door ends up closed.</p></li>
</ul>

<p>Changing details in your code, this can become very obvious:</p>

<pre><code>def check_doors_round(n):
    """Check which door is open after n rounds"""
    doors = [False] * 100
    for step in range(n):
        for (index, door) in enumerate(doors):
            if (index+1) % (step+1) == 0:
                doors[index] = not door
    return doors

def pretty_print_doors(doors):
    print([i+1 for i, d in enumerate(doors) if d])

if __name__ == "__main__":
    pretty_print_doors(check_doors_round(100))
</code></pre>

<p>Which return [1, 4, 9, 16, 25, 36, 49, 64, 81, 100].</p>

<p>Thus, we can rewrite the function:</p>

<pre><code>import math

def check_doors_round(n):
    """Check which door is open after n rounds"""
    doors = [False] * 100
    for i in range(int(math.sqrt(100))):
        doors[i*i -1] = True
    return doors
</code></pre>

<p>This still needs to be generalised for various values of n...</p>
    </div>