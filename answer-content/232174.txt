<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>int allValuesMask = values.Max();
</code></pre>

<p>You probably shouldn't assume that the enum has an explicit flag set for "all of the above". It's actually somewhat counter-intuitive to do that, since the enum are flags. If you want to collect all possible bit-flags, you could instead aggregate over all values in the enum:</p>

<pre><code>int allValuesMask = values.Aggregate((element, aggregate) =&gt; element | aggregate);
</code></pre>

<p>The same goes for this bit of code:</p>

<pre><code>    // Remove 0/NONE and OMNI/ALL
    values.Remove(0);
    values.Remove(values.Max());
</code></pre>

<p>There's no explicit (documented) guarantee that <code>values.Max()</code> will set all flags, so removing it is dangerous.</p>

<hr>

<pre><code>(int)(object)inEnum
</code></pre>

<p>Boxing structs to and from objects is relatively expensive. Since you're doing this multiple times in your code, consider making a local variable.</p>

<hr>

<pre><code>int maxRotation = Convert.ToString(values.Max(), 2).Length;
</code></pre>

<p>This is kind of a hacky roundabout way of figuring out the amount of bits in <code>values.Max()</code>. If you're adamant on doing it like this, add a comment on what the line is supposed to accomplish.</p>

<p>Other options of figuring this out is calculating <span class="math-container">\$\lceil \log_2x\rceil\$</span>:</p>

<pre><code>int maxRotation = (int)Math.Ceiling(Math.Log(values.Max()) / Math.Log(2));
</code></pre>

<p>Or  repeated right-shifting and comparing against 0. Any of these solutions should be in its own method, with proper name to document its purpose:</p>

<pre><code>private static int NumberOfBits(int number) {
  if(number &lt; 0) {
    throw new ArgumentOutOfRangeException();
  }

  var counter = 0;
  while(number != 0) {
    counter++;
    number &gt;&gt;= 1;
  }
  return counter;
}
</code></pre>

<p>Or </p>

<pre><code>private static int NumberOfBits(int number) {
  if(number &lt; 0) {
    throw new ArgumentOutOfRangeException();
  }
  return (int)Math.Ceiling(Math.Log(number) / Math.Log(2));
}
</code></pre>

<hr>

<pre><code>    while (Math.Abs(positions) &gt; maxRotation)
    {
        if (positions &gt; 0)
            positions -= maxRotation;
        else
            positions += maxRotation;
    }
</code></pre>

<p>This can be replaced with:</p>

<pre><code>positions %= maxRotation;
</code></pre>

<hr>

<p>Is there a difference between the two implementations you provided? Those should probably be one (private) method with two public overloads.</p>

<hr>

<p>Is there a specific reason you implemented the extension method as taking in a <code>ref</code> argument? It's counterintuitive, since we try to keep structs as immutable as possible. Even worse is that while generally in method calls the <code>ref</code> addition makes it really explicit that a parameter is called as ref, that's not visible here:</p>

<pre><code>Rotate(ref compass, 5); // We can see that compass is added as ref, so we can expect it to be mutated.
compass.Rotate(5); // We can't see it here.
</code></pre>

<p>I know of no system library extension methods that modify their <code>this</code> argument in place. Look at <code>Linq</code> for example. Each of these returns their result. It might be beneficial to adhere to this expected behaviour.</p>
    </div>