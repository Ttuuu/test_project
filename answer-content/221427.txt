<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Few things that I think will help ya in the long run...</p>

<pre class="lang-py prettyprint-override"><code>multi_line_string = """
Do you want to use the previous word?
    Yes/No
"""


print(multi_line_string)
</code></pre>

<p>Multi-line strings maybe assigned via triple quote (either <code>"""</code> or <code>'''</code>) blocks; having the stray apostrophe becomes <em>no big deal</em>. Furthermore one can utilize <code>dedent</code> from <code>textwrap</code> while <em><code>print</code>ing</em> such that the <em>flow</em> isn't broken...</p>

<pre class="lang-py prettyprint-override"><code>from textwrap import dedent


some_string = """
    Sorry, you've used all available possibilities!
        ... taking a nap...
"""

print(dedent(some_string))
</code></pre>

<p>Functions/Methods (<em><code>def</code>initions</em>) are super useful for repeated snippets of code...</p>

<pre class="lang-py prettyprint-override"><code>from textwrap import dedent
from translate import Translator


to_lang = 'en'

translator = None
if to_lang != 'en':
    translator = Translator(to_lang = to_lang)


def accessibility(msg, **kwargs):
    """
    Side note, this is a `__doc__ string` that _documents_
    how something is intended to be used. And is accessible
    via commands such as;

        print(accessibility.__doc__)
        help(accessibility)

    This is a shortcut for formatting and then translating
    passed `msg` string prior to `return`ing.
    """
    if kwargs:
        msg = msg.format(**kwargs)

    if translator:
        msg = translator.translate(msg)

    return msg


def whats_wanted(msg, **kwargs):
    """
    Simple short-cut for getting user input while also
    translating `msg` if necessary.
    """
    return input(accessibility(msg, **kwargs))


## ... also do __not__ be afraid of blank lines, two between
##     classes and functions, and one between blocks and/or
##     where it makes since to do so is the _rule of thumb_
##     that I use when writing. Also it's a good idea to
##     avoid comment blocks of this length, keep things _tight_
##     and use `__doc__ strings` to avoid feeling the need for'em ;-)
the_question = "Shall we continue {user}?"
an_answer = whats_wanted(the_question,
                         user = 'yourName here')


## ... Note, defaulting instead of else-ing on a single line
##     often looks _cleaner_ when re-reading code later.
the_answer = an_answer
if translator:
    reverse_translator = Translator(to_lang = 'en')
    the_answer = reverse_translator.translate(an_answer)

if the_answer.lower() == 'yes':
    msg = accessibility("I think I heard a 'yes' from {user}",
                        user = 'yourName here')
else:
    msg = accessibility('What are you talking about?')

print(msg)
</code></pre>

<p>The <code>try</code> blocks may need a little rewriting, following is a <em>starting point</em>...</p>

<pre class="lang-py prettyprint-override"><code>    ## ... Other code trimmed...

    if old == 0:
        _msg = """
        Sorry, you used all your possibility

        Do you want to restart the game?
            Yes/No
        """
        print(textwrap.dedent(_msg))
        choose = input('&gt;: ').capitalize()

        # from this point on, the user has the opportunity
        # to restart the game with the previous word(if not
        # guessed) or not, or close it

        try:  ## To do something that may result in an exception
            SENTINEL = answers[choose]
        except KeyError:  ## that some errors will occur
            msg = 'Please, insert a correct answer'
            choice = 0
            print(textwrap.dedent(msg))
        else:  ## Do things when there was no exceptions
            msg = '''
                Do you want to use the previous word?
                    Yes/No
            '''
            print(textwrap.dedent(msg))
            choose = input('&gt;: ').capitalize()
        finally:  ## Do things when there where no un-caught exceptions
            if choose == 'Yes':
                choice = int(lenght*(3/2))
                choices.clear()
            elif choose == 'No':
                choice = -1
                SENTINEL = 1
            else:
                choice = -1
                SENTINEL = 0

## ... other stuff...
</code></pre>

<p>... which'll hopefully expose bugs a bit easier; some will remain hiding though because you've got some formatting issues elsewhere as @Josay already pointed out.</p>

<p>With a little debugging and some tasteful use of abstraction you'll get there, so keep at it and in a few months time your code wont be as much of a danger to sobriety.</p>

<h2>Updates</h2>

<p>Some other bits that sorta <em>stood out</em> to me...</p>

<pre class="lang-py prettyprint-override"><code># ... Things such as
elif guess != 'help' and guess != 'exit' and guess != 'guess' and guess != 'list':

# ... look _neater_ with
elif guess not in ['help', 'exit', 'guess', 'list']:
</code></pre>

<p>And things like...</p>

<pre class="lang-py prettyprint-override"><code>def show_it(word1): 
    # The function creates dashes format like _ _ _
    newIt = ''
    for x in word1:
        newIt = newIt + x + ' '
    newIt = newIt.rstrip(' ')
    return newIt

def remove_spaces(word):
    string = ''
    for x in word:
        if x != ' ':
            string += x
    return string
</code></pre>

<p>... should be assigned prior to being used, and they may be written in a more <em>shorthand</em> way via...</p>

<pre class="lang-py prettyprint-override"><code>remove_spaces = lambda word: word.replace(' ', '')


def show_it(word): 
    """
    The function creates dashes format like _ _ _
    """
    newIt = ' '.join('_' for _ in word)
    return newIt.rstrip(' ')
</code></pre>

<blockquote>
  <blockquote>
    <p>I don't understand what lambda does. Can you explain me ?</p>
  </blockquote>
</blockquote>

<p>I can try to explain <code>lambda</code>, when programming their a <em>handy</em> way of writing one-line functions. Borrowing a few examples from a past <a href="https://math.stackexchange.com/a/3168091/657433">iteration</a>...</p>

<pre class="lang-py prettyprint-override"><code>edge_cost = lambda base_cost, drivers: base_cost * drivers

edge_cost(base_cost = 0.7, drivers = 2)
## -&gt; 1.4
</code></pre>

<ul>
<li><p><code>lambda base_cost, drivers</code> declares arguments names that maybe used on the other side of the <strong><code>:</code></strong> (colon)</p></li>
<li><p>what ever is done on the other side of the colon (<code>:</code>) should <code>return</code> something as part of the operations, in this case <code>base_cost * drivers</code></p></li>
<li><p>and the <code>edge_cost = ...</code> is <code>def</code>ining the name that this operation can be called up with</p></li>
</ul>

<p>I'll encourage you to try'em out in an active terminal session...</p>

<pre class="lang-bsh prettyprint-override"><code>user@host ~ $ python
</code></pre>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; remove_spaces = lambda word: word.replace(' ', '')
&gt;&gt;&gt; remove_spaces(word = 'lamb spam and ham')
'lambspamandham'
</code></pre>

<p><code>&gt;&gt;&gt;</code><kbd> Enter </kbd></p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; first_class = lambda base_cost: base_cost + 0.5
&gt;&gt;&gt; business_class = lambda base_cost: base_cost + 0.2
&gt;&gt;&gt; first_class(0.4)
0.9
&gt;&gt;&gt; business_class(0.4)
0.6
</code></pre>

<p>One thing to keep in mind when using'em is that their intended to be <strong>functional</strong> in the programming since, so please do not ever do...</p>

<pre class="lang-py prettyprint-override"><code>bad_idea = lambda d: [d.update({k: v * 2}) for k, v in d.items()]

some_data = {'first': 1, 'second': 2, 'third': 3}
worse_idea = bad_idea(some_data)
</code></pre>

<p>... because <code>worse_idea</code> will then equal <code>[None, None, None]</code>, nearly useless output, and <code>some_data</code> will have mutated into something like <em><code>{'second': 4, 'third': 6, 'first': 2}</code></em>. This type of usage of <code>lambda</code> will only lead to loss of time (if not hair) during the eventual debugging process.</p>

<p>Another <em>not so good</em> example would be...</p>

<pre class="lang-py prettyprint-override"><code>show_it = lambda i: ' '.join('_' for _ in range(0, i))
</code></pre>

<p>... which'll output <code>_ _ _ _ _</code> via <code>show_it(5)</code>, <strong>but</strong> unless you're changing changing <code>i</code> constantly it's far better to assign a variable that calculates things once...</p>

<pre class="lang-py prettyprint-override"><code>show_it = ' '.join('_' for _ in range(0, 5))
</code></pre>

<p>... Reasons that <code>remove_spaces</code> should be a function and not <code>show_it</code> is wonderfully obvious in this case, in the future figuring out how things should be assigned can be a little <em>murky</em>.</p>

<p>Other than that though their supper useful for simple things that get reused elsewhere, as well as for prototyping because it's less key-strokes to some kind of result... Oh and ya may run across <em>lambda</em> being used in Math (if I remember correctly this is where such ideas originated), and in most cases they'll operate very much the same, however, they're not equivalent so that can sometimes cause <em>troubles</em> when translating from one to the other.</p>

<hr>

<h2>Even more updates</h2>

<p>So I spent a little more time examining your code and other things <em>popped</em> out...</p>

<pre class="lang-py prettyprint-override"><code>## ...
            if guess == 'help':
                if hints == 0:
                    print('Sorry, you don\'t have anymore hints')
                    continue
                else:
                    guess = random.choice(itWord) 
                    while guess in newIt:
                        guess = random.choice(itWord)
## ...
</code></pre>

<p>... doesn't need an <code>else</code>, because when the <code>if</code> statement trips <code>continue</code> things <em>move on</em> to the next iteration. Following is a more <em>correct</em> way of expressing your intentions with a computer...</p>

<pre class="lang-py prettyprint-override"><code>## ...
            if guess == 'help':
                if hints == 0:
                    print("Sorry, you don't have anymore hints")
                    continue

                guess = random.choice(itWord) 
                while guess in newIt:
                    guess = random.choice(itWord)
## ...
</code></pre>

<p>... with a little editing other places that the code is using <code>continue</code> like this, the amount of tabbing in that's required (AKA <a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" rel="nofollow noreferrer">cyclomatic complexity</a>) could be significantly reduced.</p>
    </div>