<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I spent a bit of time on it and incorporated the suggestions of @BZngr as well as other small tricks. The first code was taking more than two minutes in processing a list of 6000 elements when the one below is taking around 10 seconds to do the same. I can't do much about the delays in the file and copy operations, so I'm quite ok with the result, but, again, any suggestion that makes me improve the way I code would be fantastic.</p>
<pre><code>Option Explicit
Option Base 1


Sub ImportDatabase()


ChDir MainWBPath

UnhideAll True
UnprotectAll True
ScreenAndAlertsOff True

'Maybe Create a sub for this, as can be used by createproject
If Dir(MainWBPath &amp; ProjectName, vbDirectory) = "" Then

    Dim Result As Boolean
    Call OKCancelButton(Result, "Project " &amp; ProjectName &amp; " Does not exist." &amp; vbNewLine &amp; vbNewLine &amp; "Do You want to Create it?")
    If Result = True Then
        Call CreateProjectFolders
        Call SaveStep(0)
    Else
        Call OKButton("You need to create a project before import a DataBase")
        GoTo Endline
    End If

End If

Call ResetWorkBookValues
Call WsExistsAndDelete("REGISTER", 2, Result) 'Option 2 to show a warning, result true means it exist
If Result = True Then GoTo Endline

Call OKButton("Please, be confirm that the DB to import is stored in the REGISTER tab of the file")

'Opening the File and copy to my workbook
Dim FileName As Variant, RegisterWorkBook As Workbook, Mainworkbook As Workbook
FileName = Application.GetOpenFilename(FileFilter:="Excel Files (*.XLSX), *.XLSX", Title:="Select File To Be Opened")
If FileName = False Then GoTo Endline
Set Mainworkbook = ActiveWorkbook
Dim t#, TimerReg(1 To 10) As Long
t = Timer
Set RegisterWorkBook = Workbooks.Open(FileName:=FileName)

RegisterWorkBook.Sheets("REGISTER").Copy After:=Mainworkbook.Sheets("LOTEVAL")
RegisterWorkBook.Close SaveChanges:=False

TimerReg(1) = Timer - t

CalculationsOff True

Dim WS_REG As Worksheet
Set WS_REG = Sheets("REGISTER")
WS_REG.Unprotect Password:="lukenandmeia"

'Change the formulas to Values
With WS_REG
    .Range("B1:B12000").value = .Range("B1:B12000").value
    .Range("V1:V12000").value = .Range("V1:V12000").value
    .Range("Y1:Y12000").value = .Range("Y1:Y12000").value
    .Range("G2").value = .Range("G2").value
    .AutoFilterMode = False
End With

TimerReg(2) = Timer - t

'RemoveConditional Formating
Dim RegFirstCell As Range, RegLastCell As Range, RegisterData As Range
Set RegFirstCell = WS_REG.Range("A6")
Set RegLastCell = GetLastCell(WS_REG.Range("A1:AH12000"))
Set RegisterData = WS_REG.Range(RegFirstCell.Address &amp; ":" &amp; RegLastCell.Address)

With WS_REG.Cells
    .FormatConditions.Delete
    .Validation.Delete
    .Hyperlinks.Delete
End With

Dim RegisterTemp As Long
RegisterTemp = RegLastCell.row - Register_Offset
RegisterNumb = RegisterTemp
RegisterNoError = RegisterTemp

TimerReg(3) = Timer - t

CalculationsOff False

'Error Filtering
RemoveErrors RegisterData
'Reorder
OrderRegisters WS_REG, "C7", "H7", "T7", 7

AssignAreasAndLots 'Area Asignation and calculation of Registers and last Rows

ExportErrorsAndRegisters 'Mirar por si se puede mejorar

Dim Errors As Long
Errors = Sheets("LOTS").Range("B5").value

OKButtonBig "Ex DataBase Import Completed" &amp; vbNewLine &amp; vbNewLine _
&amp; "TOTAL EQUIPMENT IN Ex DATABASE :  " &amp; RegisterNumb &amp; vbNewLine _
&amp; "EQUIPMENT EXCLUDED DUE TO ERROR :  " &amp; Errors &amp; vbNewLine _
&amp; "TOTAL EQUIPMENT IMPORTED :  " &amp; RegisterNoError &amp; vbNewLine &amp; vbNewLine _
&amp; "The Equipment with errors have been recorded on the ERRROR_LOG. You can continue discarting those elements or correct them in the originalfile and do the Import again." &amp; vbNewLine


ActualStep = 1
SaveStep 1

Endline:


UnhideAll False
UnprotectAll False
ScreenAndAlertsOff False
CalculationsOff False


End Sub

Sub CreateProjectFolders()

MkDir MainWBPath &amp; ProjectName
MkDir MainWBPath &amp; ProjectName &amp; "\AREAS"
MkDir MainWBPath &amp; ProjectName &amp; "\LOTS"
MkDir MainWBPath &amp; ProjectName &amp; "\NAV"

End Sub

Sub SaveStep(ByVal Step As Long)
Dim Path As String, Name As String

ScreenAndAlertsOff True

Path = MainWBPath
Name = MainWBname

On Error Resume Next
ActiveWorkbook.SaveAs Path &amp; ProjectName &amp; "\NAV\" &amp; ProjectName &amp; "_Step_" &amp; Step &amp; ".exp", FileFormat:=52
ActiveWorkbook.SaveAs Path &amp; ProjectName &amp; "\" &amp; ProjectName &amp; ".exp", FileFormat:=52
ActiveWorkbook.SaveAs Path &amp; Name, FileFormat:=52
On Error GoTo 0
End Sub

Sub ResetWorkBookValues()

CONTROL.Range("B22").ClearContents
LOTS.Range("B5:D5").ClearContents
LOTS.Range("D9:E100").ClearContents
LOTEVAL.Range("I6:U200").ClearContents

End Sub

Sub WsExistsAndDelete(ByVal Name As String, ByVal OptionErase As Long, ByRef Result As Boolean)

'Option 1 Delete, Option 2 For RegisterCheck
Dim Sheet As Worksheet
UnprotectAll True
Result = False
For Each Sheet In Worksheets
    If Sheet.Name Like Name Then
        Result = True
        If OptionErase = 1 Then Sheet.Delete
        If OptionErase = 2 Then
            Call OKButton("Reset Before Import")
            GoTo Endline
        End If
    Else
        Result = False
    End If
Next Sheet

Endline:
UnprotectAll False

End Sub

Sub RemoveErrors(ByRef RegisterData As Range)

Dim Result As Boolean
Call WsExistsAndDelete("ERROR", 1, Result)
Call CreateWsFromTemplate("ERROR", "ERRORT")

Dim WS_ERROR As Worksheet, WS_REG As Worksheet
Dim i As Integer

Set WS_ERROR = Sheets("ERROR")
Set WS_REG = Sheets("REGISTER")

CalculationsOff True
ClearAllFilters WS_REG

'For the Advance Filter
For i = 1 To 30
WS_REG.Cells(6, i).value = "Column " &amp; i
WS_ERROR.Cells(6, i).value = "Column " &amp; i
Next i

Dim Criteria(1 To 5) As Variant
Dim Column As Variant, Errorcode As Variant

Criteria(1) = Array("=")
Criteria(2) = Array("&lt;&gt;Z1", "&lt;&gt;Z2", "&lt;&gt;Z0")
Criteria(3) = Array("&lt;&gt;Instrument", "&lt;&gt;Electrical")
Criteria(4) = Array("&lt;&gt;Ex d", "&lt;&gt;Ex e", "&lt;&gt;Ex n", "&lt;&gt;Ex p", "&lt;&gt;Ex i")
Criteria(5) = Array("&lt;&gt;High", "&lt;&gt;Medium", "&lt;&gt;Low")
Column = Array("Column 2", "Column 8", "Column 20", "Column 21", "Column 22")
Errorcode = Array("Equipment Id", "Zone", "Discipline", "Protection Type", "Risk")

For i = 1 To 5
Call FilterAndCopy(RegisterData, Column, Criteria, Errorcode, i)
Next i

Dim NumberofErrors As Long, RegisterTemp As Long

NumberofErrors = GetLastCell(WS_ERROR.UsedRange).row - ErrorLog_Offset
LOTS.Range("B5") = NumberofErrors
RegisterTemp = RegisterNoError
RegisterNoError = RegisterNoError - NumberofErrors

WS_REG.Rows(6).ClearContents
WS_ERROR.Rows(6).ClearContents
ClearAllFilters WS_REG


Endline:
CalculationsOff False

End Sub
Sub CreateWsFromTemplate(ByVal Name As String, ByVal Template As String)
Sheets(Template).Copy After:=Sheets(Sheets.Count)
ActiveSheet.Name = Name
End Sub
Sub ClearAllFilters(WS As Worksheet)
  On Error Resume Next
    WS.ShowAllData
  On Error GoTo 0
End Sub
Sub FilterAndCopy(ByRef RegisterData As Range, ByRef Column As Variant, ByRef Criteria As Variant, ByRef Errorcode As Variant, ByVal Opt As Long)

Dim rngCriteria As Range, ErrLastCell As Range, ErrLastRow As Range
Dim WS_REG As Worksheet, WS_ERROR As Worksheet
Dim i As Long

Set WS_REG = Sheets("REGISTER")
Set WS_ERROR = Sheets("ERROR")
Set rngCriteria = WS_ERROR.Range("AA1:AE2")

Set rngCriteria = rngCriteria.Resize(2, UBound(Criteria(Opt)))
For i = 1 To UBound(Criteria(Opt))
   rngCriteria(1, i) = Column(Opt)
   rngCriteria(2, i) = Criteria(Opt)(i)
Next i

Set ErrLastCell = GetLastCell(WS_ERROR.UsedRange)
Set ErrLastRow = ErrLastCell.EntireRow

        With RegisterData
            .AdvancedFilter xlFilterInPlace, rngCriteria
            .SpecialCells(xlCellTypeVisible).Cells.Copy
            ErrLastRow.Offset(1, 0).PasteSpecial
            ErrLastRow.Offset(1, 0).EntireRow.Delete
            .Offset(1, 0).SpecialCells(xlCellTypeVisible).EntireRow.Delete
        End With

Set ErrLastCell = GetLastCell(WS_ERROR.UsedRange)

If (ErrLastCell.row - ErrLastRow.row) &lt;&gt; 0 Then WS_ERROR.Range("W" &amp; ErrLastRow.row + 1 &amp; ":W" &amp; ErrLastCell.row).value = Errorcode(Opt) &amp; " Not Valid"
rngCriteria.Clear

End Sub

Sub OrderRegisters(ByRef WS As Worksheet, ByVal Col1 As String, ByVal Col2 As String, ByVal Col3 As String, Optional ByVal OffsetO As Long = 0)

    With WS.Sort
        .SortFields.Clear
        .SortFields.Add Key:=WS.Range(Col1), Order:=xlAscending
        .SortFields.Add Key:=WS.Range(Col2), Order:=xlAscending
        .SortFields.Add Key:=WS.Range(Col3), Order:=xlAscending
        .SetRange WS.Range("A" &amp; OffsetO &amp; ":AH" &amp; GetLastCell(WS.UsedRange).row)
        .Apply
    End With


End Sub

Sub AssignAreasAndLots()

CalculationsOff True
ScreenAndAlertsOff True

Dim dictArea As New Scripting.Dictionary, dictAreaCode As New Scripting.Dictionary, dictLots As New Scripting.Dictionary
Dim WS_REG As Worksheet, WS_LOTS As Worksheet, i As Long, k As Long

dictArea.CompareMode = TextCompare

Set WS_REG = Sheets("REGISTER")
Set WS_LOTS = Sheets("LOTS")

For i = 7 To RegisterNoError + Register_Offset

dictArea(WS_REG.Range("C" &amp; i).value) = i
dictAreaCode(Sheets("REF1").Range("A" &amp; i - 6).value) = i
With WS_REG
    For k = 0 To dictArea.Count - 1
        If .Range("C" &amp; i).value = dictArea.Keys(k) Then .Range("AA" &amp; i).value = dictAreaCode.Keys(k)
    Next k
    .Range("AB" &amp; i).value = .Range("H" &amp; i).value
    .Range("AC" &amp; i).value = .Range("V" &amp; i).value
    .Range("AD" &amp; i).value = .Range("AA" &amp; i).value &amp; "_" &amp; .Range("AB" &amp; i).value &amp; "_" &amp; Left(.Range("AC" &amp; i).value, 1)
    dictLots(.Range("AD" &amp; i).value) = .Range("AA" &amp; i).value
End With

Next i

For i = 0 To dictArea.Count - 1
WS_LOTS.Range("E9").value = 7
With WS_LOTS
.Range("A" &amp; 9 + i).value = dictArea.Keys(i)
If .Range("A" &amp; 9 + i).value &lt;&gt; """" Then .Range("C" &amp; 9 + i).value = dictAreaCode.Keys(i)
.Range("E" &amp; 10 + i).value = dictArea.Items(i) + 1
.Range("F" &amp; 9 + i).value = dictArea.Items(i)
.Range("D" &amp; 9 + i).value = .Range("F" &amp; 9 + i) - .Range("E" &amp; 9 + i) + 1
End With
Next i
WS_LOTS.Range("E" &amp; 9 + dictArea.Count).ClearContents
WS_LOTS.Range("A5") = dictArea.Count

For i = 0 To dictLots.Count - 1
WS_LOTS.Range("G" &amp; 9 + i).value = dictLots.Keys(i)
WS_LOTS.Range("Q" &amp; 9 + i).value = dictLots.Keys(i)
LOTEVAL.Range("B" &amp; 6 + i).value = dictLots.Keys(i)
LOTEVAL.Range("C" &amp; 6 + i).value = dictLots.Items(i)
For k = 0 To dictArea.Count - 1
        If LOTEVAL.Range("C" &amp; 6 + i).value = dictAreaCode.Keys(k) Then LOTEVAL.Range("D" &amp; 6 + i).value = dictArea.Keys(k)
Next k
Next i

WS_LOTS.Range("E5") = dictLots.Count

CalculationsOff False

End Sub

Sub Reset_workbook()

ScreenAndAlertsOff True
UnprotectAll True

Dim WS As Worksheet

Dim Result As Boolean
Call OKCancelButton(Result, "This Will Reset All the Fields." &amp; vbNewLine &amp; "Are You Sure?")
If Result &lt;&gt; True Then GoTo Endline

For Each WS In ThisWorkbook.Sheets
    If WS.Name Like "AREA_*" Then
        WS.Delete
    ElseIf WS.Name Like "LOT_*" Then
        WS.Delete
    ElseIf WS.Name Like "REGISTER" Then
        WS.Delete
    End If
Next WS

ResetWorkBookValues
   
ActualStep = 0
   
Endline:

UnprotectAll False
ScreenAndAlertsOff False


End Sub

</code></pre>
<p>To complete the above, there are some public declarations and functions from other modules:</p>
<pre><code>Option Explicit

Public Const Register_Offset As Long = 6
Public Const ErrorLog_Offset As Long = 6
Public Const LotsOffset As Long = 12



Public Property Get MainWBPath() As String
MainWBPath = Application.ThisWorkbook.Path &amp; "\"
End Property

Public Property Get MainWBname() As String
MainWBname = ThisWorkbook.Name
End Property

Public Property Get NumberOfAreas() As String
NumberOfAreas = WS_CONTROL.Range("C6").Value2
End Property

Public Property Get NumberOfLots() As String
NumberOfLots = CONTROL.Range("C7").Value2
End Property

Public Property Get ProjectName() As String
ProjectName = Left(CONTROL.Range("C4").value, 8) &amp; "_" &amp; (Format(CONTROL.Range("C5").value, "yyyy_mm_dd"))
End Property
Public Property Get RegisterNoError() As Long
    RegisterNoError = Worksheets("LOTS").Range("C5").value
End Property

Public Property Let RegisterNoError(value As Long)
    Worksheets("LOTS").Range("C5").value = value
End Property

Public Property Get RegisterNumb() As Long
    RegisterNumb = Worksheets("LOTS").Range("D5").value
End Property

Public Property Let RegisterNumb(value As Long)
    Worksheets("LOTS").Range("D5").value = value
End Property
Public Property Get ActualStep() As Long
    ActualStep = Worksheets("CONTROL").Range("O3").value
End Property

Public Property Let ActualStep(value As Long)
    Worksheets("CONTROL").Range("O3").value = value
End Property

Public Function GetLastCell(Optional ByRef rng As Range = Nothing) As Range
'Credit to @ZygD

    'Returns the last cell containing a value, or A1 if Worksheet is empty

    Const NONEMPTY As String = "*"
    Dim lRow As Range, lCol As Range, GetMaxCell As Range

    If rng Is Nothing Then Set rng = Application.ActiveWorkbook.Activesheets.UsedRange
    If WorksheetFunction.CountA(rng) = 0 Then
        Set GetMaxCell = rng.Parent.Cells(1, 1)
    Else
        With rng
            Set lRow = .Cells.Find(What:=NONEMPTY, LookIn:=xlFormulas, _
                                        After:=.Cells(1, 1), _
                                        SearchDirection:=xlPrevious, _
                                        SearchOrder:=xlByRows)
            If Not lRow Is Nothing Then
                Set lCol = .Cells.Find(What:=NONEMPTY, LookIn:=xlFormulas, _
                                            After:=.Cells(1, 1), _
                                            SearchDirection:=xlPrevious, _
                                            SearchOrder:=xlByColumns)

                Set GetLastCell = .Parent.Cells(lRow.row, lCol.Column)
            End If
        End With
    End If
End Function

</code></pre>
    </div>