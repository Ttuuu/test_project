<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Query formatting</h2>

<pre><code>query = sql.SQL('SELECT COUNT(*) FROM {} WHERE {}={} AND {} IS NOT NULL AND {} IS NULL').format(
    sql.Identifier('RelationDuckFarm'),
    sql.Identifier('duck_id'),
    sql.Literal(duck_id),
    sql.Identifier('start_date'),
    sql.Identifier('end_date'))
</code></pre>

<p>You're using format to place constants into the query. Contants like the table name. Why? It makes the query harder to read, and I can imagine it hurts performance (ever so slightly).</p>

<pre><code>query = sql.SQL("""
SELECT COUNT(*) 
FROM RelationDuckFarm 

WHERE duck_id={} 
AND start_date IS NOT NULL 
AND end_date IS NULL
""").format(
    sql.Literal(duck_id))
</code></pre>

<h2>Duplicate queries</h2>

<p>Before you update the table, you perform 3 checks: Does the duck exist, is the duck available and is the duck not already rented? You could combine the first two checks into one query: if the duck doesn't exist, the second query will also return 0, because it has the same where-clause and then some. Additionally, when you rent out a duck, you also set that duck's status to <code>'rented'</code>. This means that ducks that are already rented out, will never pass the first filter (because their status is not <code>'available'</code>.</p>

<p>This means that your call to <code>duck_is_available</code> does everything you need to know. <strong>This does assume that you correctly set the duck's status back to available when the rent is over!</strong> I can't check that because you didn't provide the code. At the same time, if it's not consistently updated, why is it even there to begin with?</p>

<h2>Combining queries</h2>

<p>If the check above isn't sufficient, you can still combine the queries into one. I think that it's better to have two queries at different places that do what you need, than to split queries into small chuncks, forcing you to execute three every time.</p>

<pre><code>select 

case when d.duck_status = 'available' then 1 else 0 end IsAvailable,
case when rdf.start_date IS NOT NULL AND rdf.end_date IS NULL then 1 else 0 end IsAlreadyRented

from Ducks d

left join RelationDuckFarm rdf on d.duck_id = rdf.duck_id

where d.duck_id = {}
</code></pre>

<p>This does join (and filter) on duck_id. Duck_id is a PK/index right?</p>

<h2>Errors</h2>

<p>You raise a DuckDoesNotExistError, even when a duck exists, but is not available. I'm not sure if you really need that distinction in errors.</p>

<h2>All updates in one go:</h2>

<p>What is your desired behaviour if some ducks exist, and some don't? Will all changes that have been made be rolled back? If so, you can probably update for all ducks at once after you checked whether the ducks were available.</p>

<p>Both the <code>update</code> and the <code>insert</code> statement can be adapted to add/update multiple rows at once. I'm not familiar with the database API you use in Python, so I can't help you much with that, but it shouldn't be too hard.</p>
    </div>