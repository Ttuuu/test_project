<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  </p>

<h2>Don't use <code>system("pause")</code></h2>

<p>There are two reasons not to use <code>system("cls")</code> or <code>system("pause")</code>.  The first is that it is not portable to other operating systems which you may or may not care about now.  The second is that it's a security hole, which you absolutely <strong>must</strong> care about.  Specifically, if some program is defined and named <code>cls</code> or <code>pause</code>, your program will execute that program instead of what you intend, and that other program could be anything.  First, isolate these into a seperate functions <code>cls()</code> and <code>pause()</code> and then modify your code to call those functions instead of <code>system</code>.  Then rewrite the contents of those functions to do what you want using C++.  For example, for <code>pause</code> you might use this:</p>

<pre><code>void pause()
{
    std::string;
    std::cout &lt;&lt; "Press enter to continue...\n";
    std::cin &gt;&gt; foo;
}
</code></pre>

<h2>Use consistent formatting</h2>

<p>The code as posted has inconsistent indentation which makes it hard to read and understand. Pick a style and apply it consistently. </p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Use string concatenation</h2>

<p>The menu includes these lines:</p>

<pre><code>cout&lt;&lt;"\nMENU"&lt;&lt;endl;
cout&lt;&lt;" (A) Count the number of vowels in the string"&lt;&lt;endl;
cout&lt;&lt;" (B) Count the number of Consonants in the string"&lt;&lt;endl;
cout&lt;&lt;" (C) Count both the vowels and consonants in the string"&lt;&lt;endl;
cout&lt;&lt;" (D) Enter another string"&lt;&lt;endl;
cout&lt;&lt;" (E) Exit program"&lt;&lt;endl;
</code></pre>

<p>Each of those is a separate call to <code>operator&lt;&lt;</code> but they don't need to be.  Another way to write that would be like this:</p>

<pre><code>std::cout &lt;&lt; 
    "\nMENU\n"
    " (A) Count the number of vowels in the string\n"
    " (B) Count the number of Consonants in the string\n"
    " (C) Count both the vowels and consonants in the string\n"
    " (D) Enter another string\n"
    " (E) Exit program\n"
    "Enter choice\n";
</code></pre>

<p>This reduces the entire menu to a single call to <code>operator&lt;&lt;</code> because consecutive strings in C++ (and in C, for that matter) are automatically concatenated into a single string by the compiler.</p>

<h2>Check your <code>if</code> statements for proper braces</h2>

<p>I suspect that the <code>if</code> statement in the <code>Vowel_count()</code> routine is not what you intended to write.  It's written like this:</p>

<pre><code>if(*str=='a'||*str=='e'||*str=='i'||*str=='o'||*str=='u')
    count++;
    str++;
</code></pre>

<p>but because there are no braces, what's actually being executed is this:</p>

<pre><code>if(*str=='a'||*str=='e'||*str=='i'||*str=='o'||*str=='u') {
    count++;
}
str++;
</code></pre>

<p>That is the correct operation, but it's confusing to the reader.  I recommend using the braces always to avoid ambiguity or confusion.</p>

<h2>Use <code>const</code> where possible</h2>

<p>The <code>Vowel_count</code> and <code>Consonant_count</code> functions do not (and should not) alter the passed <code>char *</code>, so that parameter should be passed as <code>const</code>.</p>

<h2>Fix the bug</h2>

<p>If the user enters the string <code>"My dog has fleas."</code>, the program will report 4 vowels and 13 consonants, but that's not actually correct.  The <code>'y'</code> in "My" is a vowel in this usage and the spaces and period are not consonants.</p>
    </div>