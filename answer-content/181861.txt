<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<h1>Spacing</h1>

<p>A small thing, but a few more line-breaks between methods and control-flow constructs would be appreciated. It helps to break up the different members and parts of methods.</p>

<p>You should also pad your operators with spaces: <code>"|" + prtemp.Data + "|"</code>.</p>

<h1>Naming</h1>

<p><code>StackusingLinkedList</code> is a slightly odd name... there should probably be a capital <code>U</code> on <code>Using</code>.</p>

<p>You've used <code>ProperCamelCase</code> for all exposed members and <code>lowerCamelCase</code> for parameters, which is all good. It doesn't <em>really</em> matter how you name private members and variable, but they should be consistent and <code>CamelCase</code> of somesort (<code>NodeCount</code> rather than <code>Nodecount</code>). This is just convention, but if you follow <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions" rel="nofollow noreferrer">Microsofts Conventions</a>, your code will be easier to understand (because everyone follows them).</p>

<h1>Encapsulation and Mutability</h1>

<h2><code>Node&lt;T&gt;</code> class</h2>

<p>The <code>Node&lt;T&gt;</code> class is (presumably) completely specific to the <code>StackUsingLinkedList</code>. It would be better to enclose it as a <code>private</code> class within <code>StackUsingLinkedList</code>, as it is nothing but an implementation detail.</p>

<p>Inside the <code>Node&lt;T&gt;</code> class, you have the <code>Data</code> property, which is publically writeable. Very simply, it is usually best to have the most restrictive accessibility you can get away with. <code>Data</code> does need to be publically readable, but does it need to be publically writable? No! Does it even need to be privately writeable? No! This property can be readonly.</p>

<p>Furthermore, the only time you modify <code>Next</code> is directly after creating a <code>Node&lt;T&gt;</code>. This isn't very nice, and currently your constructor leaves <code>Head</code> to a default value, which is never ideal. It is obvious that you want to support a 'bottom' <code>Node</code>, which has no <code>Next</code> as well as a node with both <code>Data</code> and <code>Next</code>, so why not provide 2 constructors? This allows you to make <code>Next</code> readonly as well, making the whole class immutable:</p>

<pre class="lang-cs prettyprint-override"><code>// within StackUsingLinkedList
private class Node&lt;T&gt;
{
    public Node&lt;T&gt; Next { get; } // no 'set;' means it is readonly (can only be modified in a constructor)
    public T Data { get; }

    public Node(T data)
    {
        Data = data;
        Next = null; // explicitly mark this as null
    }

    public Node(T Data, Node&lt;T&gt; next)
    {
        Data = data;
        Next = next;
    }
}
</code></pre>

<p>The benefits of making properties (and whole classes) immutable where appropriate is that they are very predictable (values can never change) and difficult to misuse. It is all part of expressing your intent to the compiler. By saying "I don't want to change this", it will prevent you from changing it. This sounds obvious and simple, but expressing your intent in code is the most fundamental concept in writing usable and maintainable systems.</p>

<h2>Exposed API</h2>

<p>The exposed classes and members should ideally all have inline-documentation (<code>///</code>) so that it everyone knows what the method is meant to do. For example:</p>

<pre class="lang-cs prettyprint-override"><code>/// &lt;summary&gt;
/// Prints the stack to the console
/// &lt;/summary&gt;
public void Print()
</code></pre>

<h2>Other</h2>

<p>If you make <code>Node&lt;T&gt;</code> private, then the compiler will error on <code>public Node&lt;int&gt; Head</code>. This is great! We have expressed our intent that <code>Node&lt;T&gt;</code> is only the concern of <code>StackUsingLinkedList</code>, and it is stopping us from exposing this implementation detail to the world. <code>Head</code> should indeed be private. If someone trying to use your class was to modify Head, they could leave you in invalid state, and shoot themselves in the foot. As a general rule, unless you are writing some delicate code using structs, there is no harm in making all your fields into properties, but this isn't essential. It is good to explicitly mark private members of private (though thankfully this is the default):</p>

<pre class="lang-cs prettyprint-override"><code>private Node&lt;int&gt; Head { get; set; }
private int NodeCount { get; set; }
</code></pre>

<h1>Generics</h1>

<p>You have produced a generic <code>Node&lt;T&gt;</code> class, but you haven't made <code>StackUsingLinkedList</code> generic! If this is intended to be a reusable type, then it should be generic if possible. You haven't shown us <em>how</em> you intend to use this type, but there is nothing that stops it being generic, so you should strongly consider making it generic.</p>

<p>(Note that using inner classes with generic parameters of the same name is weird, but here they are the same parameter, so if you put <code>Node&lt;T&gt;</code> inside <code>StackUsingLinkedList&lt;T&gt;</code> you can just remove the parameter on <code>Node&lt;T&gt;</code> (make it <code>Node</code>).</p>

<h1>Methods</h1>

<h2><code>Push(...)</code></h2>

<p>This should take a generic parameter (if the type is made generic) and add it accordingly. Returning from within an <code>if</code> is usually harder to read than simply using an <code>else</code>.</p>

<p>The readability could be improved by defining a variable or property called 'isEmpty', making it clear what the <code>if</code> is switching on. Such a property could be private, but it might also be useful to make it public, since "are you empty?" this is a reasonable question to ask of a Stack.</p>

<pre class="lang-cs prettyprint-override"><code>public bool IsEmpty =&gt; Nodecount == 0;

public void Push(T data)
{
    if (IsEmpty)
    {
        Head = new Node&lt;T&gt;(data);
        Nodecount++;
    }
    else
    {
        Head = new Node(data, Head);cleaner
        NodeCount++;
    }
}
</code></pre>

<h2><code>Pop()</code></h2>

<p>Pop methods usually return the value that has been popped. Presently you record the current <code>Head</code> in <code>temp</code> unnecessarily, and then look up <code>temp</code> instead of <code>Head</code>, which is perhaps less clear. Somehting like this following may be better and more useful.</p>

<pre class="lang-cs prettyprint-override"><code>/// &lt;summary&gt; Pops a value from the top of the stack, and returns this value &lt;/summary&gt;
public T Pop()
{
    T temp = Head;
    Head = Head.Next;
    NodeCount--;

    return temp.Data;
}
</code></pre>

<p>There is also a <code>NodeCount--</code> in there. This was missing in your original code (thanks to JSextonn for pointing that out)</p>

<h2><code>Print()</code></h2>

<p>This is a slightly odd method. A Stack is usually considered a general-purpose data-type, but <em>this</em> method performs some <em>very specific</em> behaviour. At the very least.</p>

<p>What does <code>prtemp</code> mean? Temporary Pointer??? I don't know, it could do with a better name. I usually call these sort of things 'current', because they are thing we are <em>currently</em> looking at, but I'm sure opinions will vary on this.</p>

<p>You have an <code>if...break</code> statement at the start of your <code>while</code> loop: I would just make this condition part of the while.</p>

<pre class="lang-cs prettyprint-override"><code>while (prtemp != null)
{
    // ...
}
</code></pre>

<p>Since you arn't returning the string you build - only printing it - you could just print it directly.</p>

<h1>Putting it all together</h1>

<p>I can't say I'm overly fond of how your linked list actually works, but putting all of these simple changes together gives this (with extra comments indicating changes):</p>

<pre class="lang-cs prettyprint-override"><code>/// &lt;summary&gt;
/// Represents a stack of items implemented internally as a linked list
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;The type of items sorted in the stack&lt;/typeparam&gt;
public class StackUsingLinkedList&lt;T&gt;
{
    // private inner class
    private class Node
    {
        public Node Next { get; }
        public T Data { get; }

        public Node(T data)
        {
            Data = data;
            Next = null;
        }

        public Node(T data, Node next)
        {
            Data = data;
            Next = next;
        }
    }

    private Node Head; // private
    private int NodeCount = 0; // choice of CamelCase

    /// &lt;summary&gt;
    /// True is the stack is empty, otherwise False
    /// &lt;/summary&gt;
    public bool IsEmpty =&gt; NodeCount == 0;

    /// &lt;summary&gt;
    /// Pushes the data to the top of the stack
    /// &lt;/summary&gt;
    /// &lt;param name="data"&gt;The value to pushed onto the stack&lt;/param&gt;
    public void Push(T data)
    {
        if (IsEmpty) // easier to read and reason about
        {
            Head = new Node(data);
            NodeCount++;
        }
        else // else clause makes control-flow clearer
        {
            Head = new Node(data, Head); // no need for a tempory value, much cleaner
            NodeCount++;
        }
    }

    /// &lt;summary&gt;
    /// Pops the top value from the stack, and returns the popped value
    /// &lt;/summary&gt;
    public T Pop()
    {
        var temp = Head;
        Head = Head.Next;
        NodeCount--;

        return temp.Data; // return the value popped
    }

    /// &lt;summary&gt;
    /// Prints the stack to the console
    /// &lt;/summary&gt;
    public void Print()
    {
        var current = Head;
        StringBuilder sb = new StringBuilder();

        while (current != null)
        {
            sb.Append("|" + current.Data.ToString() + "|"); // operator padding
            current = current.Next;
        }

        Console.WriteLine(sb.ToString());
    }
}
</code></pre>

<h1>A short comment about Array performance</h1>

<p>You talk about wanting to use a linked list rather than an array for performance reasons. The reality is that a normal array/vector based stack will probably be more efficient in .NET! If you consider <code>List&lt;T&gt;</code>, it works by growing an array. The cost of each addition varies depending on whether it has to grow the array or not, and <em>on average</em> the cost is constant (i.e. not a function of the size of the array), which is the same complexity as handling a linked list. However, the linked list requires an allocation for every element, whilst a well-managed array based list won't, and in systems with high-level 'hands-off' memory management (like .NET) this can easily be more efficient in practise.</p>
    </div>