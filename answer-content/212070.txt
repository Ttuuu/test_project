<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Advice 1: Package names</strong></p>

<p>The package name <code>genesis</code> is not quite informative what software it contains. The common notation is to use the reversed name of the web address of your company. For example, you could use <code>net.genesis.ai</code> for the package name.</p>

<p><strong>Advice 2: <code>ResponseType</code></strong></p>

<p>You could use the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html#valueOf-java.lang.Class-java.lang.String-" rel="nofollow noreferrer"><code>valueOf</code></a> static method for converting a string to an corresponding enumeration:</p>

<pre><code>public static ResponseType getResponseType(String name) {
    try {
        return ResponseType.valueOf(name);
    } catch (IllegalArgumentException ex) {
        return null;
    }
}
</code></pre>

<p>What comes to <code>toString</code>, I suggest you prepend <code>@Override</code> to it: if someone makes a typo in the name <code>toString</code>, <code>@Override</code> will force your IDE (i.e., NetBeans) to underline it with red. Also, in the same method, you could save some typing:</p>

<pre><code>@Override
public String toString() {
    char[] chars = name().toLowerCase().toCharArray();
    chars[0] = Character.toUpperCase(chars[0]);
    return new String(chars);
}
</code></pre>

<p>Also, an enumeration may have satellite data:</p>

<pre><code>public enum ResponseType {

    GREETING("Greeting"),
    FAREWELL("Farewell"), 
    VALUE("Value"), // &lt;- Note the comma.
    LAUGH("Laugh"); // &lt;- Note the semicolon.

    private final String humanReadableName; // &lt;- That is were each enumeration knows its satellite data.

    ResponseType(String humanReadableName) {
        this.humanReadableName = humanReadableName;
    }

    public static ResponseType getResponseType(String name) {
        try {
            return ResponseType.valueOf(name);
        } catch (IllegalArgumentException ex) {
            // valueOf throws this when no suitable enumeration found.
            return null;
        }
    }
}
</code></pre>

<p><strong>Advice 3</strong></p>

<pre><code>public HashMap&lt;ResponseType, List&lt;String&gt;&gt; getResponses() { //get a hashmap of all responsetypes and responses for that type in list form
    ...
    HashMap&lt;ResponseType, List&lt;String&gt;&gt; res = new HashMap&lt;ResponseType, List&lt;String&gt;&gt;();
</code></pre>

<p>I suggest you program to interface, not implementation:</p>

<pre><code>Map&lt;ResponseType, List&lt;String&gt;&gt; res = new HashMap&lt;ResponseType, List&lt;String&gt;&gt;();
</code></pre>

<p><strong>Advice 4</strong> </p>

<p>As an addition to the 3rd advice, since Java 7 you can use so called <em>diamond inference</em>:</p>

<pre><code>Map&lt;ResponseType, List&lt;String&gt;&gt; res = new HashMap&lt;&gt;();
</code></pre>

<p><strong>Advice 5</strong> </p>

<p>There is inconsistency with placing a white space character between <code>if</code> and opening <code>(</code>: <code>if(</code> vs. <code>if (</code>. The common way is to place a white space character between the two tokens.</p>
    </div>