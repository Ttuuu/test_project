<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Below are edits to the question which were reverted due to the forum rule of not editing questions.</p>

<p>The reason for not creating a followup question is simply to keep the response text in the original question and in any case do not see how I would be able to re-post a question that including the answer (See update for 25 Dec 2018 below). </p>

<hr>

<blockquote>
  <p>Update 17 Nov 2018</p>
</blockquote>

<p>Below are some clarifications from greybeard's queries :</p>

<p>(1) - Idea behind creating it : was simply to see if I can come up with a sorting algorithm by myself - and be confirmed as it being a unique one. - I have posted previously regarding a different algorithm as well although it was only on the complexity and have not posted any code for the same.</p>

<p>What one could do with it : The licence in the comment was intended to convey that, I couldn't think of a better way to do it.</p>

<p>(2)</p>

<p>Concern's : in the context of this variation of pivot selection - only whether my understanding of the worst case scenario is correct or if there are more (in which case i would have to start figuring out a fix unless a fix is also suggested).
Update : Check the post-script at the end for a justification on the approach w.r.t worst-case-scenario.</p>

<p>(3)</p>

<p>Comparing quicksort's pivot selection schemes : Few of quicksort's pivot selections schemes include -&gt; random-pivot selection and the median-of-three (or dual/triple/multi pivot schemes).
However believe they are known to have worst case scenarios, in any case they appear to be mitigation steps not fully guaranteeing that the performance will not degrade to quadratic.
This is an attempt to make it more predictable.</p>

<p>(4)</p>

<p>How the scheme presented relates to prior work : Have primarily compared it against median-of-three's performance in case of random elements.
Since median-of-three on odd cases can still result in n*n performance (in theory atleast), wanted to see if there was a more predictable way.
This seems to be a better -atleast in the sense that its easier to analyze few of its worst case scenarios (numbers in sequence of powers of 2, identical numbers).
Note : There is an updated understanding w.r.t worst-case scenario analysis, see below post-script.</p>

<p>(5)</p>

<p>Reason for posting code : Originally wanted to just post the technique and check if its unique but wasn't sure where to post it.
Since I had built the code as part of analyzing the technique, and based on suggestions from meta, posted it here.
As suggested, in retrospect, computer-science might have been a better place to ask.</p>

<p>(6)</p>

<p>QS-SAVP Acronym : SAVP is short for simple-averaged virtual pivot. I used 'simple' average since i couldn't find a better name for (high+low)/2 approach.
The logical extension of this approach (a different technique) would be to take the sum of all the elements and then divide by the total number of elements.
The resulting value would then be the pivot to be considered.
The first approach is similar to statistical/arithmetic-mean (which uses the middle elements instead of highest and lowest) and the second approach is exactly the same as statistical/arithmetic-median.</p>

<p>(7)</p>

<p>Pivot calculation : The technique used is ... <code>pivot = (low) + ((high-low)/2)</code> ... which doesn't work if the array elements are a mix of positive and negative numbers ( Eg: the maximum possible value and the minimum possible value for given bit length).
Similarly the 'first-iteration' flag exists to ensure that if the arrays is completely negative, then its not skipped since the current logic (intended to handle arrays with identical elements) does precisely that.</p>

<p>To summarize, first the pivot value '0' is used to separate positive and negative values. The 'temp_low_index' count being same as 'high_index' check is used to ensure performance doesn't degrade to n*n for arrays with equal elements. Finally the 'first-iteration' flag is used to ensure an array with completely negative elements are not skipped.</p>

<p>(8)</p>

<p>With regard to expanding arrays.copy_of to system.array_copy its just what I've picked up (also the fact that arrays-copy-of was introduced only around JDK-6).</p>

<p>(9)</p>

<p>Notes : Believe a technique for determining worst case scenario for median-of-three algorithm can be found here although have not analyzed it myself.</p>

<p>(10)</p>

<p>Updated understanding w.r.t worst-case-scenario :</p>

<p>PS : Now that I think about it, using the virtual pivot technique, it seems impossible that the recursion go beyond [<code>log(n)+1</code>] calls. The justification is as follows :</p>

<ul>
<li>Consider a 32 bit unsigned integer</li>
<li>Min is 0 and Max is 4294967295 (lets denote it 'n').</li>
<li>First level would be using 2147483648 (n/2) as the pivot.</li>
<li>It would split the array into two halves (each of it being level-2 sub-arrays)</li>
<li>0 to 2147483648 and 2147483648 to 4294967295 (LHS being inclusive and RHS being exclusive).</li>
<li>Subsequent splits at level 3 would be in steps of (n/4) : 0 to 1073741824, 1073741824 to 2147483648, 2147483648 to 3221225472, 3221225472 to 4294967295.</li>
<li>Subsequent splits at level 4 would be in steps of (n/8)</li>
<li>Subsequent splits at level 5 would be in steps of (n/16)</li>
<li>..</li>
<li>and so on until the final split at around level 33 for (n/4294967296).</li>
</ul>

<p>Note that the above are regarding virtual pivots. The elements may or may not be present. If they are present, then they will get sorted, if not then its effectively a non-event. I'm merely trying to assert that in terms of complexity, it will not degrade to quadratic complexity.</p>

<p>In the above technique, I'm merely doing an optimization involving highest and lowest valued elements effectively bringing the value of the virtual pivot closer to reality by calculating it effectively as : <code>pivot = (high+low)/2</code>.</p>

<p>(11)</p>

<p>With regard to using logging package, would have typically used log4j but am trying to avoid having external dependencies for the POC here.</p>

<blockquote>
  <p>Update 26 Nov 2018</p>
</blockquote>

<p>Correction : The worst case should be <code>2.n.(k+1)</code> (where k is the number of bits in the datatype and the additional one is due to handling negative values).</p>

<blockquote>
  <p>Update 25 Dec 2018</p>
</blockquote>

<p>From what I've been able to gather from authors (through mails), believe this is equivalent to what is described as radix-exchange-sort (binary-radix-sort) in Knuth Vol-3. So effectively the complexity would be (<code>n.k</code>) where k is the number of bits in the datatype.</p>

<p>Regards</p>

<p>Ravindra</p>
    </div>