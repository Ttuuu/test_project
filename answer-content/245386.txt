<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The individual methods in your code are fine; the structure is what hurts its maintainability. By adding specific update methods to the main Item class, you are giving it a huge amount of responsibility. Adding a layer of abstraction could let you write a simpler Item class and implement the specifics of the item aging process somewhere else.</p>
<p>The trick with this challenge is to recognize the assumptions that are being made by all items, and which parts of the program change for different items. For example, the update logic only ever affects the <code>quality</code> and <code>sell_in</code> properties. Furthermore, these properties change based only on the state of that individual item.</p>
<p>With this in mind, the item class can be written as this, where <code>ager()</code> returns an object with a <code>nextQuality()</code> and a <code>nextSellIn()</code> method, which return the item's values for the next day.</p>
<pre><code>class Item:
    def __init__(self,name,sell_in,quality):
        self.ager = ager(name)

        self.name = name
        self.sell_in = sell_in
        self.quality = quality

    def age(self):
        self.quality = self.ager.nextQuality(self)
        self.sell_in = self.ager.nextSellIn(self)

    def __repr__(self):
        return "%s, %s, %s" % (self.name, self.sell_in, self.quality)
</code></pre>
<p>Then, an ager could be written like this, taking in the item as an input.</p>
<pre><code>class DefaultAger:
    @staticmethod
    def nextQuality(item):
        return clamp_quality(item.quality-1)
    @staticmethod
    def nextSellIn(item):
        return item.sell_in-1
</code></pre>
<p>Right, we need that <code>clamp_quality()</code>. There's no need to mutate the item with this function, as the mutation already occurs in the <code>age()</code> method of <code>Item</code>. <code>clamper()</code> returns a function that clamps values between lo and hi.</p>
<pre><code>def clamper(lo,hi):
    return lambda val:max(lo,min(hi,val))
clamp_quality = clamper(0,50)
</code></pre>
<p>With all of this, we can add a barebones implementaton of <code>ager()</code>. This will handle all items that don't have any special rules.</p>
<pre><code>def ager():
  return DefaultAger
</code></pre>
<p>Okay that's great and all, but the entire point of this program is the edge cases. Lets get those in. All of this logic can be handled using more Ager objects.</p>
<pre><code>class ConjuredAger(DefaultAger):
    @staticmethod
    def nextQuality(item):
        return clamp_quality(item.quality-2)

class LegendaryAger(DefaultAger):
    @staticmethod
    def nextQuality(item):
        return item.quality
    @staticmethod
    def nextSellIn(item):
        return item.sell_in

class BackstageAger(DefaultAger):
    @staticmethod
    def nextQuality(item):
        if item.sell_in&lt;=0:
            return 0
        if item.sell_in&lt;5:
            return clamp_quality(item.quality+3)
        if item.sell_in&lt;10:
            return clamp_quality(item.quality+2)
        return clamp_quality(item.quality+1)
</code></pre>
<p>Now for the beautiful part. If we dynamically give each item the correct ager, then all we need to do is call <code>item.age()</code> to update an item.</p>
<pre><code>#maps items by name to the correct ager
agers={
    "Aged Brie":BackstageAger,
    "Sulfuras":LegendaryAger,
    "Backstage Pass":BackstageAger,
    "Mystical Hat":ConjuredAger
}
def ager(name):
    if name in agers:
        return agers[name]
    else:
        return DefaultAger
</code></pre>
<p>To verify it works:</p>
<pre><code>items = [
    Item("Aged Brie",5,10),
    Item("Sulfuras",5,80),
    Item("Backstage Pass",5,20),
    Item("Jar",20,8)
]
# print this out to make sure we
# set all the agers correctly
print([
    item.ager for item in items
])

for i in range(10):
    print("========= Day %d ========="%i)
    for item in items:
        print(item)
        item.age()
</code></pre>
<p>I realize this probably comes off as me showing off my own solution to the problem , but it's the best way I could demonstrate this idea of delegating responsibility into smaller objects. If a new type of item were to be added, one would only need to write an ager and assign it; the <code>Item</code> class could remain untouched.</p>
    </div>