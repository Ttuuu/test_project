<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Clean and readable code!  Nice work.</p>

<p>Here's some nitpicks.</p>

<h1><code>swap_together</code></h1>

<blockquote>
<pre><code>template&lt;class... Its&gt;
void swap_together(size_t i, size_t j, Its... its)
{
    using std::swap;
    int dummy[] = {
        [&amp;](){
            auto it = its + i;
            auto jt = its + j;
            using std::swap;
            swap(*it, *jt);
            return 0;
        }() ...
    };
    (void)dummy;
}
</code></pre>
</blockquote>

<p>Some observations:</p>

<ul>
<li><p>the redundant <code>using std::swap;</code> on the first line can be removed;</p></li>
<li><p>we can use <code>std::iter_swap(a, b);</code> (requires <code>#include &lt;algorithm&gt;</code>) instead of <code>using std::swap; swap(*a, *b);</code>;</p></li>
<li><p>now all the lambda does is <code>std::iter_swap(its + i, its + j)</code>, which is an expression; and</p></li>
<li><p><code>int[0]</code> is illegal, so the function should be modified trivially in order to handle the case of <code>sizeof...(Its) == 0</code>.</p></li>
</ul>

<p>I also like to express the requirement that <code>Its</code> are all random access iterators more explicitly.  End result:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cstddef&gt;

template &lt;class... RanIts&gt;
void swap_together(std::size_t i, std::size_t j, RanIts... its)
{
    int arr[] = {0, ((void)(std::iter_swap(its + i, its + j)), 0)...};
    (void)arr;
}
</code></pre>

<p>(The first cast to <code>void</code> is to prevent overloaded <code>operator,</code>.)</p>

<p>This gets simpler in C++17, with fold expressions:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cstddef&gt;

template &lt;class... RanIts&gt;
void swap_together(std::size_t i, std::size_t j, RanIts... its)
{
    ((void)std::iter_swap(its + i, its + j), ...);
}
</code></pre>

<h1><code>partition_together</code></h1>

<blockquote>
<pre><code>template&lt;class Predicate, class Head, class... Rest&gt;
size_t partition_together(Predicate&amp; pred, size_t left, size_t right, Head head, const Rest... rest) {
    while (left &lt; right) {
        while (left != right &amp;&amp; pred(*(head + left))) ++left;
        while (left != right &amp;&amp; !pred(*(head + (right-1)))) --right;
        if (left + 1 &lt; right) {
            flatmap_detail::swap_together(left, right-1, head, rest...);
            ++left;
            --right;
        }
    }
    return right;
}
</code></pre>
</blockquote>

<p>We can use some standard algorithms from <code>&lt;algorithm&gt;</code> here:</p>

<blockquote>
<pre><code>while (left != right &amp;&amp; pred(*(head + left))) ++left;
</code></pre>
</blockquote>

<p>is equivalent to</p>

<pre><code>left = std::find_if(head + left, head + right, pred) - head;
</code></pre>

<p>(There is a signed/unsigned mismatch here; you can add a cast or change the types of <code>left</code> and <code>right</code>.)</p>

<blockquote>
<pre><code>while (left != right &amp;&amp; !pred(*(head + (right-1)))) --right;
</code></pre>
</blockquote>

<p>is equivalent to</p>

<pre><code>right = std::find_if_not(
    std::make_reverse_iterator(head + right),
    std::make_reverse_iterator(head + left),
    pred
).base() - head;
</code></pre>

<p>(Yes, the interface of the STL algorithms is clumsy for complex use cases, but the intent is clearer.)</p>

<p>Note that <code>left + 1</code> in the condition to <code>if</code> may be <code>end + 1</code> because the first nested <code>while</code> loop may set <code>left = end</code>.  <code>right - left &gt; 1</code> is safer.  You can also use postfix increment and prefix decrement:</p>

<pre><code>if (right - left &gt; 1) {
    flatmap_detail::swap_together(left++, --right, rest...);
}
</code></pre>

<h1><code>sort_together</code></h1>

<p>In the majority of cases (size &gt;= 3), two tests are performed: <code>right - left == 2</code> and <code>right - left &gt;= 3</code>.  Test for <code>&gt;= 3</code> first.</p>

<p>Instead of <code>if (...) { /* nothing to do */ } else</code>, use the negation operator:</p>

<pre><code>if (!less(*(head + left), *(head + (left + 1)))) {
    flatmap_detail::swap_together(left, left + 1, head, rest...);
}
</code></pre>

<p>The result of invoking a comparator should be <em>contextually converted</em> to <code>bool</code>; implicit conversion is not guaranteed to work.  So insert a cast here:</p>

<blockquote>
<pre><code>auto less_than_pivot = [&amp;](const auto&amp; x) -&gt; bool {
    return less(x, pivot_elt);
};
</code></pre>
</blockquote>

<p>I'm not sure about this:</p>

<blockquote>
<pre><code>// I don't like this special case, but I don't want to pay for
// "swap, partition an array of length 1, swap back" in this
// common case. Can this special case be subsumed into the
// general case somehow without losing performance?
</code></pre>
</blockquote>

<h1>Miscellaneous</h1>

<ul>
<li><p><code>std::size_t</code> instead of <code>size_t</code>.  Also missing <code>#include &lt;cstddef&gt;</code></p></li>
<li><p>Standard algorithms take comparators and predicates by value.  Your use of references here is probably to avoid copying them too many times around, but the user can choose to use <code>std::ref</code> to handle this.</p></li>
</ul>
    </div>