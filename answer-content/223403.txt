<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, whenever you see this ... this is a big no-no:</p>

<pre><code>'9'*work_dict[9] + '8'*work_dict[8] + '7'*work_dict[7] +
'6'*work_dict[6] + '5'*work_dict[5] + '4'*work_dict[4] +
'3'*work_dict[3] + '2'*work_dict[2] + '1'* work_dict[1] +
'0'*work_dict[0]
</code></pre>

<p>it could be replaced by a simple </p>

<pre><code>''.join(str(i) * work_dict[i] for i in reversed(range(10)))
</code></pre>

<p>Of course, the initialization of the <code>work_dict</code> is similar.  And in fact, you don't need to initialize it if you take care to use <code>dict.get</code> instead of <code>dict[]</code>:</p>

<pre><code>work_dict[number] = work_dict[number] + 1
# is equivalent to
work_dict[number] = work_dict.get(number, 0) + 1  # default to 0 if not in dict
</code></pre>

<p>Ps., whenever you are <em>counting</em> something, consider using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a>.</p>

<hr>

<p><em>Warning:</em>  The rest of this answer tries to address the problem that OP <em>say</em> they are solving in the comments to the question.  However, it is not certain that the understanding of the problem by the OP is correct.  From here on, we assume that you are allowed to shuffle all the input digits, whereas the original problem probably only allows shuffling around the numbers.</p>

<hr>

<p>If you want to have it as compact and "functional" as possible, it would be much easier to just sort the entire input and output it:</p>

<pre><code>def maximum_number(lst):
    return int(''.join(sorted(''.join(str(x) for x in lst), reverse=True)))
</code></pre>

<p>However, note that this doesn't work on the empty list (which might be okay, depending on the specification of the function).</p>

<p>It should also be mentioned that</p>

<ol>
<li>it is harder to write than the "manual loop" variant, which can be important in an interview</li>
<li>it might be harder to read and thus to debug, but I believe that this is up to the eye of the beholder to determine</li>
</ol>

<hr>

<p>For complexity, this is <em>O(n log n)</em> whereas the optimal algorithm has running time <em>O(n)</em>.  We again see the trade-off between running time and readability.</p>

<p>Here is an <em>O(n)</em> algorithm using <code>Counter</code>:</p>

<pre><code>from collections import Counter
def maximum_number(lst):
    counter = Counter()
    for elt in lst:
        counter += Counter(str(elt))
    return int("".join(str(i) * counter[str(i)] for i in range(9, -1, -1)))
</code></pre>
    </div>