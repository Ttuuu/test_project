<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Interesting question, </p>

<p>I am just going to talk about the JavaScript, I know nothing about C#. Though I will point out that your JavaScript code probably has comment envy ;)</p>

<p><strong>Naming</strong></p>

<p>In essence you seem to raise prices to a minimum, which increases the sum of prices. Then you need to reduce the other prices proportionally so that the sum total remains the same. Your variable names with <code>profit</code> make sense to me, the ones refering to <code>payment</code>, <code>loan</code>.</p>

<ul>
<li>I would suggest to call the sum total of rate increases to match minimum price 
<code>missing</code></li>
<li>Similarly, I would call the sum total of surplus rates ( delta between price and minimum price) <code>surplus</code></li>
</ul>

<p><strong>Abstraction</strong></p>

<p>I think you abstracted at the wrong level, it was extremely hard to follow the math because you replaced it with on-liner functions. My general rule of thumb is to avoid one-liners that you only use once. I would have created the abstraction on the collection level, something like</p>

<pre><code>var model = new PricingModel(data);
model.allocate();
</code></pre>

<p>And keep all the logic inside <code>allocate</code></p>

<p><strong>Proportions</strong></p>

<p>I had to bring this up, because my counter suggestion proportions differently.</p>

<p>If you have have to split <code>missing</code> over these 2 lines:</p>

<pre><code>Price       Minimum
1000        990
100         10
</code></pre>

<p>Then your code would try to reduce <code>1000</code> far more because the price is so much higher. I would suggest that you split over the <code>margin</code> since the price with the highest margin can take it better. Hope that makes sense..</p>

<p><strong>Counter Code</strong></p>

<pre><code>function LinePriceInfo(price, min)
{
    this.price = price;
    this.min = min;
}

var linePriceInfos =
[
    new LinePriceInfo(16,  22),
    new LinePriceInfo(12,  20),
    new LinePriceInfo(120, 90),
    new LinePriceInfo(25,  20)
];

Allocate(linePriceInfos);

function Allocate(infos)
{
    var missing = 0,  //Sum total of rate increases to match minimum price
        surplus = 0,  //Sum total of surplus rates ( delta between price and minmum price)
        info, i;

    //Analyze each line 
    for(i = 0; i &lt; infos.length; i++)
    {
        info = infos[i];
        //Is the price too low, then fix the price and updating `missing`
        if(info.price &lt;= info.min)
        {
            missing += (this.min - this.price);
            info.price = info.min;
        } 
        //Maintain surplus, adding 0 in case the price was too low is a non-operation
        info.bonus = info.price - info.min;
        surplus += info.bonus;
    }  

    //The missing rates have to be distributed, check whether this is possible
    var newSurplus = surplus - missing;
    if( newSurplus &lt; 0 ){
      throw 'can\'t solve!';      
    }

    //Analyze each line and add back the newly derived surplus 
    for(i = 0; i &lt; infos.length; i++)
    {
        info = infos[i];
        if( info.bonus ){
          info.price = info.min + info.bonus / surplus * newSurplus;
        }
    }         
}
</code></pre>
    </div>