<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The plot looks about right with the data, and I see no egrerious errors in your code. I do have a few remarks.</p>

<ul>
<li><p>In <code>r</code> it's unnecessary to end your lines with a semi-colon, and most styleguides advise against it. The only real purpose it has is allowing multiple statements on a single line, but why would we want that.</p></li>
<li><p>With regards to your code where you install packages. There are two ways of loading a library: <code>library(name)</code> and <code>require(name)</code>. One big difference is that <code>require</code> returns a <code>FALSE</code> when the package is missing, <code>library</code> throws an error. What you can do is try and load the library, and if it fails install it:</p></li>
</ul>

<pre><code>for(libraryName in c("ggplot2", "reshape2")){
  if(!require(libraryName)){
    install.package(libraryName)
    require(libraryName)
  }
}
</code></pre>

<ul>
<li>If your csv files are going to be huge, I recommend using <code>data.table::fread</code> for reading your csv files. In my experience it is the fastest reading large datasets. It also allows for efficient dataframe operations.</li>
<li><p>If at reading time you specify the correct columnnames, you can prevent having to do the <code>melt</code> operation later: add the argument <code>col.names = c("File.Length", "value")</code>. Add the column <code>FileOutputWithoutBufferMetrics["Time"] &lt;- "Non.Buffered.Time.Taken..ns."</code> to both dataframes, and simply <code>rbind</code> them. This is most likely more efficient than <code>melt</code>, especially on big datasets.</p></li>
<li><p><code># This line has to be updated on every place, possible.</code> This is generally accounted for using the "working directory" of the R process. If you run the script from commandline, the working directory is the current directory. If you run it from Rstudio you can set it using the <code>setwd(dir)</code> function, or in <code>Session -&gt; Set Working Directory -&gt; To Source File Location</code> in the Rstudio ui. Once that is set, you don't have to add that path to the filename in <code>read.csv</code>.</p></li>
</ul>

<hr>

<p>In summary:</p>

<pre><code>for(libraryName in c("ggplot2", "data.table")){
  if(!require(libraryName)){
    install.package(libraryName)
    require(libraryName)
  }
}

FileOutputWithoutBufferMetrics &lt;- fread("FileOutputWithoutBuffer-Metrics.csv"), col.names = c("File.Length", "value"))
FileOutputWithoutBufferMetrics["Time"] &lt;- "Non.Buffered.Time.Taken..ns."

FileOutputWithBufferMetrics    &lt;- fread("FileOutputWithBuffer-Metrics.csv"), col.names = c("File.Length", "value"))
FileOutputWithBufferMetrics["Time"] &lt;- "Buffered.Time.Taken..ns."

df &lt;- rbind(FileOutputWithoutBufferMetrics, FileOutputWithBufferMetrics)


ggplot(df, aes(File.Length, value)) + geom_line(aes(colour = Time))
</code></pre>
    </div>