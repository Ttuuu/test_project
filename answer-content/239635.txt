<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Loops</h1>

<blockquote>
<pre><code>for (int i = 0; i &lt; item_switch.size(); i++) {
</code></pre>
</blockquote>

<p>Your loops have a common problem: the correct type for traversing a <code>std::vector&lt;T&gt;</code> via index is <code>std::vector&lt;T&gt;::size_type</code> (<code>std::size_t</code> is fine too).  However, a better solution is to eliminate loops altogether using <a href="https://en.cppreference.com/w/cpp/algorithm/inner_product" rel="nofollow noreferrer"><code>std::inner_product</code></a> (defined in header <a href="https://en.cppreference.com/w/cpp/header/numeric" rel="nofollow noreferrer"><code>&lt;numeric&gt;</code></a>) and <a href="https://en.cppreference.com/w/cpp/utility/functional/plus" rel="nofollow noreferrer"><code>std::plus</code></a> (defined in header <a href="https://en.cppreference.com/w/cpp/header/functional" rel="nofollow noreferrer"><code>&lt;functional&gt;</code></a>):</p>

<pre><code>long weight(const std::vector&lt;Item&gt;&amp; item_list, const std::vector&lt;int&gt;&amp; item_switch)
{
    return std::inner_product(item_list.begin(), item_list.end(),
                              item_switch.begin(), item_switch.end(),
                              0L, std::plus{}, [](const Item&amp; item, int switch_) {
                                  return item.weight * switch_;
                              };
}

long profit(const std::vector&lt;Item&gt;&amp; item_list, const std::vector&lt;int&gt;&amp; item_switch)
{
    return std::inner_product(item_list.begin(), item_list.end(),
                              item_switch.begin(), item_switch.end(),
                              0L, std::plus{}, [](const Item&amp; item, int switch_) {
                                  return item.profit * switch_;
                              };
}
</code></pre>

<p>Or, with <a href="https://ericniebler.github.io/range-v3/" rel="nofollow noreferrer">range-v3</a>:</p>

<pre><code>long weight(const std::vector&lt;Item&gt;&amp; item_list, const std::vector&lt;int&gt;&amp; item_switch)
{
    return ranges::inner_product(item_list, item_switch, 0L, {}, {}, &amp;Item::weight, {});
}

long profit(const std::vector&lt;Item&gt;&amp; item_list, const std::vector&lt;int&gt;&amp; item_switch)
{
    return ranges::inner_product(item_list, item_switch, 0L, {}, {}, &amp;Item::profit, {});
}
</code></pre>

<h1>Enumerating possibilities</h1>

<p><a href="https://en.cppreference.com/w/cpp/utility/bitset" rel="nofollow noreferrer"><code>std::bitset</code></a> (defined in header <a href="https://en.cppreference.com/w/cpp/header/bitset" rel="nofollow noreferrer"></a>) seems more convenient for enumerating possibilities if the number of elements is fixed at compile-time â€” <code>std::bitset&lt;4&gt;{13}</code> yields <code>1101</code>, for example.</p>

<p>This loop:</p>

<blockquote>
<pre><code>for (int i = 0; i &lt; possible.size(); i++) {
    long temp = profit(items, possible[i]);
    if (temp &gt; pr) {
        pr = temp;
    }
}
</code></pre>
</blockquote>

<p>should be replaced by <code>std::max_element</code>.</p>

<h1>My version</h1>

<p>Just for fun, I rewrote the program in a functional style using C++20 and range-v3:</p>

<pre><code>#include &lt;array&gt;
#include &lt;cstddef&gt;
#include &lt;iostream&gt;
#include &lt;range/v3/all.hpp&gt;

// for convenience
constexpr auto operator""_zu(unsigned long long num) noexcept
{
    return static_cast&lt;std::size_t&gt;(num);
}

namespace views = ranges::views;

using profit_type = long long;
using weight_type = long long;

struct Item {
    int weight;
    int profit;
};

template &lt;std::size_t N&gt;
profit_type knapsack(const std::array&lt;Item, N&gt;&amp; items, weight_type max_weight)
{
    return ranges::max(
          views::iota(0ULL, 1ULL &lt;&lt; items.size())
        | views::transform([](auto code) { return std::bitset&lt;N&gt;{code}; })
        | views::filter([&amp;](const auto&amp; mask) {
              auto weight = ranges::accumulate(
                  views::iota(0_zu, N) | views::filter([&amp;](auto i) { return mask[i]; }),
                  weight_type{0}, {}, [&amp;](auto i) { return items[i].weight; }
              );
              return weight &lt;= max_weight;
          })
        | views::transform([&amp;](const auto&amp; mask) {
              return ranges::accumulate(
                  views::iota(0_zu, N) | views::filter([&amp;](auto i) { return mask[i]; }),
                  profit_type{0}, {}, [&amp;](auto i) { return items[i].profit; }
              );
          })
    );
}
</code></pre>

<p>Example usage:</p>

<pre><code>int main()
{
    std::cout &lt;&lt; knapsack(
        std::to_array&lt;Item&gt;({{10, 60}, {20, 100}, {30, 120}}), 50
    );
}
</code></pre>

<p>Output:</p>

<pre class="lang-none prettyprint-override"><code>220
</code></pre>

<p>(<a href="https://wandbox.org/permlink/dCaljg8hIcxMlMIu" rel="nofollow noreferrer">live demo</a>)</p>
    </div>