<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have found a couple of things that could help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  I don't know that you've actually done that, but it's an alarmingly common thing for new C++ programmers to do.  </p>

<p>An alternative could be to do the following, preferably within the calling function.</p>

<pre><code>using std::cout;
</code></pre>

<h2>Separate I/O from game logic</h2>

<p>The program currently has game logic and I/O all intermixed.  It would be better to separate the two.  Specifically I'd recommend that the player, each bet and the roulette wheel each be made separate objects.  That way, if you decided to have multiple players with multiple types of bets at the same wheel, it could be done very simply by applying the state of the wheel to each bet and then updating the player's status (account balance) accordingly.</p>

<h2>Eliminate "magic numbers"</h2>

<p>There are a few numbers in the code, such as <code>1</code> and <code>36</code> that have a specific meaning in their particular context.  By using named constants such as <code>MINIMUM_BET_AMOUNT</code> or <code>WHEEL_SLOTS</code>, the program becomes easier to read and maintain.  For cases in which the constant only has sense with respect to a particular object, consider making that constant part of the object.</p>

<h2>Reduce the scope of variables</h2>

<p>Within the current code essentially all variables are all in the same scope.  Better would be to minimize the scope of variables so that a variable such as <code>betAmount</code> are only in scope for the duration they're actually needed.  Object orientation will help a great deal with that.</p>

<h2>Add realism to the game</h2>

<p>Most real roulette tables have at least one zero slot (many have both 0 and 00).  Adding those to the game would make things a little more realistic.  I've also seen video screens in casinos which display the last dozen or so results.  On a fair wheel this, of course, has no useful value to bettors, but people often have fun looking at the previous results and making some bet based on that, thereby illustrating why they call it <a href="https://en.wikipedia.org/wiki/Gambler's_fallacy" rel="nofollow noreferrer">the Gambler's fallacy</a>.</p>

<h2>Use a menu object or at least a common menu function</h2>

<p>In a number of places in your code, you have something like a menu.  Your code presents a couple of options and then asks the user to pick one based on an input number. Rather than repeating that code in many places, it would make sense to make it generic.  Only the prompt strings actually change, but the underlying logic of presenting the choices and asking for input are all the same.  It looks like you're a beginning programmer, and so perhaps you haven't learned about objects yet, but this kind of repeated task with associated data is really well-suited to <em>object-oriented programming</em> and that's something that C++ is very good at expressing.  </p>

<h2>Consider using a better random number generator</h2>

<p>You are currently using this code to generate random numbers:</p>

<pre><code>srand(time(0));
randomNumber = 1 + (rand() % 36);
</code></pre>

<p>There are two problems with this approach. One is that the low order bits of the random number generator are not particularly random, so neither with <code>random1</code> be.  On my machine, there's a slight but measurable bias toward 0 with that.  The second problem is that you should only seed the random number generator once and not every time it's used.</p>

<p>A better solution, if your compiler and library supports it, would be to use the <a href="http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution" rel="nofollow noreferrer">C++11 `std::uniform_int_distribution</a>.  It looks complex, but it's actually pretty easy to use:</p>

<pre><code>// random number generator from Stroustrup: 
// http://www.stroustrup.com/C++11FAQ.html#std-random
int rand_int(int low, int high)
{
    static std::default_random_engine re {};
    using Dist = std::uniform_int_distribution&lt;int&gt;;
    static Dist uid {};
    return uid(re, Dist::param_type{low,high});
}
</code></pre>

<p>For a roulette table with possible values 0 to 36, call it with <code>rand_int(0,36);</code>.</p>
    </div>