<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's the Computer Science 101 answer: put the parameters that change between charts into an array, and then loop over that array.</p>

<p>I want to include your code and data as a dc.js example (if you will permit it?) so I started porting it to the standard format used by those examples.</p>

<p>The full example is here:
<a href="https://github.com/dc-js/dc.js/blob/compare-unfiltered-example/web/examples/compare-unfiltered.html" rel="nofollow noreferrer">https://github.com/dc-js/dc.js/blob/compare-unfiltered-example/web/examples/compare-unfiltered.html</a></p>

<p>I started from my fork of your fiddle, which answers the SO question <a href="https://stackoverflow.com/questions/55066391/display-original-conditional-brushed-unbrushed-crossfilter-bars-with-dc-js-wit">Display original (conditional) brushed unbrushed crossfilter bars with dc.js with different colors</a></p>

<p>You can look through the history to see all the changes from that point, but the big idea is just to put all the chart specifications into an array:</p>

<pre><code>  var chart_specs = [
      {
          variable: 'x',
          selector: '#chart-11',
          resolution: 10
      },
      {
          variable: 'y',
          selector: '#chart-12',
          resolution: 10
      },
      {
          variable: 'z',
          selector: '#chart-13',
          resolution: 500
      },
      {
          variable: 'a',
          selector: '#chart-21',
          resolution: 100
      },
      {
          variable: 'b',
          selector: '#chart-22',
          resolution: 20
      },
      {
          variable: 'c',
          selector: '#chart-23',
          resolution: 1000
      }
  ];
</code></pre>

<p>The three things we need to know about a chart are:</p>

<ul>
<li>what field or variable in the data to look at</li>
<li>the CSS selector of the div to put the chart in</li>
<li>what resolution to bin the data in this chart</li>
</ul>

<p>You also had unique selectors for the chart titles, but those were redundant, so I removed them.</p>

<p>Let's walk through the rest of the code.</p>

<h3>Cleaning the data</h3>

<p>It's more efficient to convert all the strings to numbers before giving the data to crossfilter:</p>

<pre><code>  data.forEach(function(d) {
      chart_specs.forEach(function(spec) {
          d[spec.variable] = +d[spec.variable];
      });
  });
</code></pre>

<p>This is the first of many places where you'll see <code>chart_specs.forEach()</code>. That's the essence of the "CS 101" answer!</p>

<h3>Creating the charts</h3>

<p>Here's it's <code>chart_specs.map()</code> but the same idea:</p>

<pre><code>  var charts = chart_specs.map(function(spec) {
      return dc.compositeChart(spec.selector);
  });
</code></pre>

<p>We'll get an array of charts back.</p>

<h3>Initializing the charts</h3>

<p>It's just one big loop over all the chart specs:</p>

<pre><code>  chart_specs.forEach(function(spec, i) {
</code></pre>

<h3>Title each chart</h3>

<pre><code>      d3.select(spec.selector).select('h5.chart-title').text(spec.variable);
</code></pre>

<p>For simplicity I changed the <code>div</code>s to <code>h5</code>s and gave them the class <code>chart-title</code>. Now we can change the titles with a simple generic D3 call. Otherwise it's the same idea as your old jQuery calls.</p>

<h3>Create the dimension and group for each chart</h3>

<p>We'll read <code>spec.variable</code> and <code>spec.resolution</code> in order to create appropriate dimensions and groups. We'll also make a static copy of the group data</p>

<pre><code>      var dim = cf.dimension(function(d) { return d[spec.variable]; }),
          group = dim.group(function(d) {
              return Math.floor(d / spec.resolution) * spec.resolution;
          }).reduceCount(),
          static_group = static_copy_group(group);
</code></pre>

<h3>Hiding the red bars if no filters are active</h3>

<p>See <a href="https://stackoverflow.com/questions/55066391/display-original-conditional-brushed-unbrushed-crossfilter-bars-with-dc-js-wit">the original answer</a> for the purpose of this code.</p>

<pre><code>      charts[i].on('pretransition', function(chart) {
          var any_filters = charts.some(chart =&gt; chart.filters().length);
          chart.select('.sub._1')
              .attr('visibility', any_filters ? 'visible' : 'hidden')
      });
</code></pre>

<p>The only interesting here is using <code>charts[i]</code>. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="nofollow noreferrer">Array.forEach</a> supplies us not just the current item but the index, which we can use to access the chart in the charts array.</p>

<h3>Finish the initialization</h3>

<p>Same idea with all of the rest of the code. We just look at <code>spec.variable</code> and <code>spec.resolution</code> instead of having special variables for every chart and every value.</p>

<pre><code>      charts[i]
          .compose([
              dc.barChart(charts[i])
                  .dimension(dim)
                  .group(static_group)
                  .controlsUseVisibility(true),
              dc.barChart(charts[i])
                  .dimension(dim)
                  .group(group)
                  .colors('red')
                  .controlsUseVisibility(true)
                  .brushOn(false)
          ]);

      var min = dim.bottom(1)[0][spec.variable],
          max = dim.top(1)[0][spec.variable];

      charts[i]
          .dimension(dim)
          .group(group)
          .round(dc.round.floor)
          .x(d3.scaleLinear().domain([min - ((max - min) * breathing_room), max + ((max - min) * breathing_room)]))
          .xUnits(function(start, end, xDomain) { return (end - start) / spec.resolution; })
          .controlsUseVisibility(true);
</code></pre>

<p>Please let me know if I can publish this example and data. It will be useful to a lot of people! (I have no idea if this data is publishable - looks suitably anonymous, hopefully...)</p>
    </div>