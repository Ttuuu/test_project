<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Decide on a header naming scheme</h2>

<p>The <code>emulate.cpp</code> file has these two lines:</p>

<pre><code>#include "z80emu.hpp"
#include "opcodes.h"
</code></pre>

<p>However the files are labeled in the question as both having <code>.hpp</code> extensions.  It's better to pick one or the other and stick with it rather than mixing both.  I use <code>.h</code> always.</p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Prefer <code>class</code> to <code>struct</code></h2>

<p>The only real difference, of course, is that by default, the members of a <code>struct</code> are public, while the members of a class are private.  Still, it's best to keep the internals of a class private to reduce linkage among objects to only what they need.  This simplifies the interface and therefore the maintenance.  In this case, the <code>z80</code> <code>struct</code> has a great many things, including registers and memory, that would likely be better hidden as internal <code>private</code> data structures.</p>

<h2>Only use <code>inline</code> for small, timing-critical functions</h2>

<p>The overuse of <code>inline</code> is a problem in two respects.  First, it makes it harder for readers to read and understand the interface to your class.  Second, it has the potential to ruin portability if you intend to maintain a stable ABI.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rf-inline" rel="nofollow noreferrer">F.5</a> for details.</p>

<h2>Prefer in-class initializers to member initializers</h2>

<p>The code currently includes this:</p>

<pre><code>struct registers
{
    reg af;
    reg bc;
    reg de;
    reg hl;
    reg ix;
    reg iy;
    reg sp;
    reg wz;
    uint16_t pc;
    registers()
    {
        pc = 0;
    }
};
</code></pre>

<p>This would be better written with no explicit constructor at all:</p>

<pre><code>struct registers
{
    reg af;
    reg bc;
    reg de;
    reg hl;
    reg ix;
    reg iy;
    reg sp;
    reg wz;
    uint16_t pc = 0;
};
</code></pre>

<p>The same applies to the underlying <code>reg</code>.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-in-class-initializer" rel="nofollow noreferrer">C.48</a> for details.</p>

<h2>Separate interface from implementation</h2>

<p>The interface is the part in the <code>.h</code> file and the implementation is in the <code>.cpp</code> file.  Users of this code should be able to read and understand everything they need from the interface file.  That means, among other things, that only <code>#include</code>s essential to being able to understand the interface should be in the <code>.h</code> file.  In this case, much of what is currently in the <code>z80emu.h</code> file should actually be moved into a <code>z80emu.cpp</code> file and the implementation of <code>z80::emulate</code> should be moved from <code>emulate.cpp</code> to <code>z80emu.cpp</code>.</p>

<h2>Strive for a minimal sufficient interface</h2>

<p>The code currently contains these lines:</p>

<pre><code>// calculate the two's complement of an 8-bit integer
template&lt;typename T&gt;
inline T twoscomp(T val)
{
    return ~val + 1;
}
</code></pre>

<p>There are a couple of problems with this.  First, it's only used internally in a single location.  Second, there's not really a need for it to be a template, since both the comment and the usage indicate that it's only intended for use with a <code>uint8_t</code> type.</p>

<h2>Use only necessary <code>#include</code>s</h2>

<p>The <code>#include &lt;vector&gt;</code> line in <code>z80emu.h</code> is not necessary and can be safely removed.  It would be good to review all includes to make sure that only the required ones are present.</p>

<h2>Initialize variables with declaration</h2>

<p>The code currently has these lines:</p>

<pre><code>std::ifstream infile;

infile.open(argv[1], std::ifstream::in | std::ifstream::binary);
if(!infile.good())
{
    std::cerr &lt;&lt; "Opening " &lt;&lt; argv[1] &lt;&lt; " failed: "
              &lt;&lt; std::strerror(errno) &lt;&lt; std::endl;
    return EXIT_FAILURE;
}
</code></pre>

<p>That's not wrong, per se, but there are more idiomatic ways to write that.  First, in C++, it's generally good practice to initialize variables as they are declared so that they're immediately useful.  In this case, that means combining lines:</p>

<pre><code>std::ifstream infile{argv[1], std::ifstream::in | std::ifstream::binary};
</code></pre>

<p>Here I am using the C++11 style of initialization, which I highly recommend, but the same can be done with older C++ compilers with slightly different syntax.  </p>

<p>The second thing is that instead of this:</p>

<pre><code>if(!infile.good())
</code></pre>

<p>We can use the more idiomatic:</p>

<pre><code>if (!infile) 
</code></pre>

<p>The result is the same, but the latter style is less verbose and more typical of modern style.</p>

<h2>Avoid C-style casts</h2>

<p>The code has these two lines:</p>

<pre><code>z80emu::z80 z80;
infile.read((char *)z80.mem, file_size);
</code></pre>

<p>One problem with this is the C-style cast of <code>z80.mem</code> to a <code>char *</code> but the the more fundamental problem is that we're reaching into the innards of the <code>z80</code> object.  Better would be to create a constructor that accepts a memory chunk and size.</p>

<h2>Check return values for errors</h2>

<p>In the lines quoted above, <code>infile.read()</code> simply throws away the return value.  That's not a good idea because that function returns the number of bytes actually read.  It's better to always check that you're actually getting what you expected from I/O functions or memory allocation functions and take the appropriate error handling actions otherwise.</p>

<h2>Rethink the class design</h2>

<p>The <code>opcodes</code> <code>enum</code> is currently just a list of numbers with associated names.  Better, in my view, would be to have an <code>instruction</code> class that would encapsulate both the opcode and the behavior.  This is the very definition of object-oriented programming, and would help a lot here.  To give you some ideas about how this might look consider <a href="https://codereview.stackexchange.com/questions/115118/mac1-simulator-debugger">MAC1 simulator/debugger</a>  and <a href="https://codereview.stackexchange.com/questions/122385/toyvm-a-small-and-simple-virtual-machine-in-c-fizzbuzz-demonstration/122399#122399">ToyVM - a small and simple virtual machine in C + FizzBuzz demonstration</a></p>
    </div>