<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, your implementation has improved so good job! Here's a few general comments. </p>

<ul>
<li><p>In <code>operator&lt;&lt;</code>, you can make <code>current</code> of type <code>const Node*</code> (but not of type <code>const Node* const</code>). In other words, you have a pointer to a const Node, but not a const pointer to const Node.</p></li>
<li><p>In <code>append</code>, if the else-branch is executed, you will have created <code>n</code> for no reason. So move its declaration inside of the if-branch where it is needed.</p></li>
<li><p>In your destructor, move the declaration of <code>n</code> inside the while-loop and make it const. So its first line should be <code>const Node* const n = current</code>.</p></li>
<li><p>For the constructor of <code>Node</code>, I find it confusing the argument name has a trailing underscore; this does not happen for the other function arguments anywhere. Perhaps you meant the private member to be <code>data_</code> (or <code>_data</code>) and the argument just <code>data</code>.</p></li>
<li><p>Why is the default constructor also not making <code>_tail</code> null? To avoid these type of problems, as per <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-in-class-initializer" rel="nofollow noreferrer">C.48</a>, I would omit the default constructor and just use in-class initialization to set both to <code>{nullptr}</code>.</p></li>
<li><p>Unless there is a reason not to, it is good practice (as per <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-explicit" rel="nofollow noreferrer">C.46</a>) to make single-argument constructors explicit to avoid unintentional conversions.</p></li>
<li><p>For a future version, you might want to look at smart pointers to avoid leaking memory.</p></li>
</ul>
    </div>