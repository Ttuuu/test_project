<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public interface IWebHandler {}

public class WebHandler {}

public class FirstType : IWebHandler {}
</code></pre>

<p>There is either a naming confusion here, or a misunderstanding of what interfaces represent and how they should be used.</p>

<p>It makes little sense for <code>WebHandler</code> to not implement <code>IWebHandler</code> but to take in an <code>IWebHandler</code>. At the very least, refrain from using "web handler" ambiguously in its two distinct roles.</p>

<p>I'd like to dedicate more time on this part of the review but I'm struggling to understand exactly what you wanted to achieve with this naming. And if I use the naming in a different way than you, it's going to be very complicated to understand what I mean.</p>

<hr>

<p>Similarly, <code>SelectAllResponsesAsync</code> and <code>GetAllResponsesAsync</code> are quite hard to keep apart, which is compounded by the counterintuitive interface naming.</p>

<hr>

<blockquote>
  <p>1) Should i instantiate the HttpClient in the "Main" function and pass it to every WebHandler as a Singleton?</p>
</blockquote>

<p>That's your decision. Do you want the same HttpClient to be used by multiple consumers that depend on it, or not?</p>

<p>There is no "one size fits all" answer. This is why DI frameworks tend to have 3 injection settings: </p>

<ul>
<li>Transient (always a new object)</li>
<li>Singleton (always the same)</li>
<li>Scoped (singleton within a scope, but new object for every different scope)</li>
</ul>

<p>Which one is appropriate is contextual.</p>

<blockquote>
  <p>2) Should i use DI for this purpose?</p>
</blockquote>

<p>For a project this size, including a DI framework is overkill. If this is going to become a much larger project, then DI framework becomes more relevant.</p>

<p>Should you be injecting dependencies? It's always a good idea. But to be fair, when I bang out a small project about the size of your posted code, I don't quite follow good practice as these projects often don't have the lifetime (or importantce) to warrant the additional effort.</p>

<p>The value of clean coding increases as the size of the codebase does. Many will tell you that you should always code cleanly, and it's definitely not bad advice (especially when learning). But in reality, there is a level of <em>tiny</em> project where it's just not that relevant.</p>

<blockquote>
  <p>3) How i could test, with an UnitTest, the SelectAllResponsesAsync method, passing to it a custom string as response, without doing a request to google.com?</p>
</blockquote>

<p>First make clear what you want to test.</p>

<p>If you want to test <code>SelectAllResponsesAsync()</code>, that seems to entail you specifically wanting to test the behavior when calling a <em>real</em> webpage (in this case, Google is hardcoded). </p>

<p>But you say you don't want to connect to Google, which means you want to mock your http client.</p>

<p>Note that I'll be using NSubstitute and FluentAssertions in the code below, simply because I know it by heart. Other frameworks exist too. Pick your favorite.</p>

<p><strong>1</strong>: Make sure everything you intend to mock is an injectable dependency. In this case, this means that the <code>HttpClient</code> needs to be injected.</p>

<pre><code>public class FirstType : IWebHandler
{
    HttpClient client;

    public FirstType(HttpClient client)
    {
        this.client = client;
    }
}
</code></pre>

<p><strong>2</strong>: Make a mocked httpClient. I'll be using NSubstitute here:</p>

<pre><code>var mockedHttpClient = Substitute.For&lt;HttpClient&gt;();
</code></pre>

<p><strong>3</strong>: Set up your mocked client to return exactly what you want to return. Create your own little HTML example for which you know exactly what the correct output should be. I'm using the simplest example here but you can make it bigger based on everything you want to test.</p>

<pre><code>string myTestHtml = "&lt;html&gt;&lt;body&gt;&lt;a href=\"http://www.google.com\"&gt;This is a link&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;";

mockedHttpClient.GetAsync(Arg.Any&lt;string&gt;()).Returns(myTestHtml);
</code></pre>

<p><strong>4</strong>: Set up your <strong>real</strong> <code>FirstType</code> to use your <strong>mocked</strong> <code>HttpClient</code></p>

<pre><code>var firstType = new FirstType(mockedHttpClient);
</code></pre>

<p><strong>5</strong>: Execute the code, which will unknowingly depend on the mock:</p>

<pre><code>var result = await firstType.SelectAllResponsesAsync();
</code></pre>

<p><strong>6</strong>: Confirm that the output is what you expect it to be. Note that I'm using FluentAssertions.</p>

<pre><code>result.Should().HaveCount(1);
result.Should().Contain("This is a link");
</code></pre>

<p>And that's the steps you take for a basic unit test. It all begins from having injected dependencies so you can mock them without the tested object being aware that it's working with mocks.</p>

<p>Whether you create mocks yourself (using interfaces) or using a framework is up to you.</p>
    </div>