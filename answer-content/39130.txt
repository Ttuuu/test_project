<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Suggestions from @200_success will bring you speedup like from ~28.1s to ~11.8s (gcc 4.8.2 with -O3).
Replacing all with <code>gcd</code> as suggested @EOF will give you ~11.4s and will save some memory.</p>

<p>Overall idea is somewhat correct. You collect factors of <code>n</code> and check that there is no factors within other numbers (that are not already factors of <code>n</code>).</p>

<p>But I guess you can improve solution by factoring with primes and avoid populating <code>num</code> with numbers like 4, 6, 8, 9 etc. That brings time to ~1.3s.</p>

<pre><code>for (int i = 2; i &lt; n; i++)
{
    if (n % i == 0)
    {
        bool foundFactor = false;
        for (int j = 0; j &lt; num.size(); ++j)
        {
            if (i % num[j] == 0)
            {
                foundFactor = true;
                break;
            }
        }
        if (!foundFactor) num.push_back(i);
        continue;
    }
    bool foundFactor = false;
    for (int j = 0; j &lt; num.size(); ++j)
    {
        if (i % num[j] == 0)
        {
            foundFactor = true;
            break;
        }
    }
    if (!foundFactor)
        cntr++;
}
</code></pre>

<p>For your <code>n = 1000000000</code> I've got ~13.6s</p>

<p>Note that there is a linear relation beetween numbers of co-primes in 1000000000 and 1000. That's because the only difference between them is <code>(2*5)**k</code>. That leads us to another optimization based on <a href="http://en.wikipedia.org/wiki/Wheel_factorization" rel="nofollow">the wheel factorization</a>:</p>

<pre><code>long long wheel = 1;

// factorization of n
for (long long i = 2, m = n; i &lt;= m; i++)
{
    if (m % i == 0)
    {
        num.push_back(i);
        wheel *= i; // re-size wheel
        // remove powers of i from m
        do { m /= i; } while (m % i == 0);
    }
}

for (int i = 2; i &lt; wheel; i++)
{
    if (n % i == 0)
    {
        continue;
    }
    bool foundFactor = false;
    for (int j = 0; j &lt; num.size() &amp;&amp; num[j] &lt; i; ++j)
    {
        if (i % num[j] == 0)
        {
            foundFactor = true;
            break;
        }
    }
    if (!foundFactor)
        cntr++;
}
cout &lt;&lt; cntr+1 &lt;&lt; endl;
cout &lt;&lt; (cntr+1)*n/wheel &lt;&lt; endl;
</code></pre>

<p>That gives ~0s for almost any <code>10**k</code></p>

<p>P.S. It sound pretty much as Project Euler problem I've met once. I used a bit different approach. I already had a pretty good framework for working with primes and I just simply generated all numbers out of primes that have no factors of <code>n</code> initially. I.e. built up sequence of combinations <code>3**k * 7**k ...</code> until they've reached <code>n</code>.</p>
    </div>