<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1201ProgramAlarm rightly comments:</p>

<blockquote>
  <p>Is <code>__xObject_Private_data_t</code> defined in the same header as <code>xObject_t</code>? If so, the application writer can do the same thing you are to get at the data.</p>
</blockquote>

<p>In other words, your chosen approach is no solution at all.</p>

<p><em>Besides</em>, your chosen approach is buggy! A C data type consists of more than its <code>sizeof</code>. You also have to consider <em>alignment</em>.</p>

<pre><code>struct Bad {
    char pad;
    xObject_t x;
};
struct Good {
    char pad;
    __xObject_Private_data_t x;
};
</code></pre>

<p><code>struct Bad</code>'s alignment is <code>1</code>, which means that after your cast to <code>__xObject_Private_data_t</code> you'll find you're getting a lot of misaligned loads and stores (or, on ARM and PowerPC, plain old bus errors).</p>

<p>You seem to be under the impression that double-underscoring an identifier makes it a "private implementation detail." If you trust your users to follow that convention, then you can use a much simpler solution:</p>

<pre><code>typedef struct {
   uint32_t __Private_parameter;
   uint8_t __Private_value;
   void *__Private_owner;
   size_t __Private_length;
} xObject_t;
</code></pre>

<p>(Obligatory note that in both C and C++, technically, it's not valid to use double-underscored names if you're not the compiler vendor. Use a single underscore followed by a lowercase letter — <code>_private0_parameter</code> — and you'll be okay.)</p>

<p>To help ensure that your clients don't go poking at <code>_private0_parameter</code>, you can just change its name to <code>_private1_parameter</code> in your next minor release. And then <code>_prviate2_parameter</code> in the release after that. (Heck, keep the misspelling! That will <em>really</em> ensure that nobody wants to touch those data members.)</p>
    </div>