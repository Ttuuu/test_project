<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Design</strong></p>

<ul>
<li>I see you fixed the bug where the method would get stuck in an infinite loop when <code>action</code> throws an exception, but note how similar the normal and the exception paths are now. The method can be simplified by incrementing <code>tries</code> before invoking the action and by awaiting the delay after (outside) the try-catch. Try to keep code DRY (Don't Repeat Yourself).</li>
<li>More simplifications include using a proper <code>while</code> condition: <code>while (tries &lt; numTries)</code>, to make the intent of the loop more clear, and the success check can be simplified to <code>if (predicate(result)) break;</code>.</li>
<li>There's no need for <code>goto</code> here - <code>break</code> is sufficient (and easier to understand).</li>
<li>The <code>T _object</code> parameter is useless. Currently, the only way to obtain a result is to use a closure. I assume you meant to make this a <code>ref</code> parameter? If so, I would rename it to <code>TResult result</code>. Alternately, you could return a <code>(bool success, TResult result)</code> value-tuple, which can be used like <code>var (success, result) = await CheckAndRetryAsync(...);</code></li>
<li>You may want to add <code>ConfigureAwait(false)</code> to your <code>awaits</code>, unless resuming in the same context is important.</li>
<li>Are you sure you want to ignore exceptions by default? Including the last try? No logging even?</li>
<li>What's the point of passing a <code>ManualResetEvent</code> into this method? Why not just do that in awaiting code: <code>await CheckAndRetryAsync(...); mr.Set();</code>?</li>
<li>You may want to enforce that <code>sleep</code> is not negative.</li>
</ul>

<p><strong>Tests</strong></p>

<ul>
<li>The test method names do not describe what they're testing, and none of the <code>Assert</code> statements contain a descriptive error message. That's not good for future maintenance.</li>
<li>There's a lot of code duplication in the tests. You may want to refactor it into a data-driven approach, or write a utility method for the repetitive parts.</li>
<li>What's the purpose of that <code>ManualResetEvent</code>? Why is it shared between all tests? You may want to add a comment explaining why it's there.</li>
<li>Throwing an exception from a constructor (<code>TObj</code>) instead of throwing it directly inside a test method is making the tests harder to understand.</li>
<li>You may want to add a timeout to your tests, to ensure that infinite loops and other such problems will get caught.</li>
<li>Instead of comparing <code>elapsed</code> against a magic number, I'd create local variables for the number of tries and timeout, so the minimum elapsed time can be calculated from them.</li>
<li>In <code>T_010</code>, <code>tries</code> will always end up being 5, even if <code>action</code> gets called more than 5 times.</li>
<li>There's no test that checks whether exceptions are rethrown.</li>
</ul>

<p><strong>Style/readability</strong></p>

<ul>
<li>All parameters are on a line of their own, except the two most important ones, so at first sight it looks like there's only one <code>Func</code> parameter. That's confusing!</li>
<li>Personally I'd put <code>action</code> before <code>predicate</code>, to match execution order (you first need a result before you can check it, after all).</li>
<li>Add some whitespace between methods and between blocks of code inside methods to improve readability.</li>
<li>The <code>l</code> prefix looks a lot like a 1 - consider using <code>L</code> instead, or just leave it out.</li>
</ul>
    </div>