<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Defines as defines</h2>

<p>I do not understand why you copy these precompiler macros to class constants:</p>

<pre><code>static const char exit_key = CONSOLE_EXIT_KEY;
static const char jump_key = CONSOLE_JUMP_KEY;
</code></pre>

<p>Can't you use the macros directly?</p>

<h2>Const methods</h2>

<p>Any method that does not modify any member variable in <code>this</code> should be made <code>const</code>; the most obvious example is this:</p>

<pre><code>virtual void Display(const std::string &amp;str = "") const = 0;
</code></pre>

<h2>Const arguments</h2>

<p>It's better to pass const references when possible, i.e.</p>

<pre><code>virtual void SetOutput(const std::string &amp;output) = 0;
</code></pre>

<h2>Typo</h2>

<p><code>DecrementFameRate</code> is most likely supposed to be <code>DecrementFrameRate</code>.</p>

<h2>Parens</h2>

<p><code>return</code> does not need parens in either of these cases:</p>

<pre><code>return (input_value == exit_key);

return (input_value == jump_key);
</code></pre>

<h2>Combining preprocessor predicates</h2>

<pre><code>#ifdef __unix
    return new Console();
#endif // __unix
#ifdef __APPLE__
    return new Console();
#endif // __APPLE__
</code></pre>

<p>can be</p>

<pre><code>#if defined(__unix) || defined(__APPLE__)
    return new Console();
#endif
</code></pre>

<p>see <a href="https://gcc.gnu.org/onlinedocs/cpp/Defined.html" rel="nofollow noreferrer">https://gcc.gnu.org/onlinedocs/cpp/Defined.html</a> for more details.</p>

<h2>High scores</h2>

<p>I question the placement of this variable:</p>

<pre><code>static int high_score;
</code></pre>

<p>If it truly is a high score per player, then it should not be made <code>static</code>. If this is not per-player, perhaps it deserves to live in <code>Game</code> instead.</p>

<h2>Object ownership</h2>

<p>Your <code>Game::console</code> is passed in from the <code>ConsoleFactory</code>, where you are then responsible for deleting it. The safer way to track this, rather than a bare pointer, is a <code>shared_ptr</code> (what used to be an <code>auto_ptr</code>). Among other things, this will simplify your destructor.</p>

<h2>Re-entrance</h2>

<p>As it is currently implemented, <code>Game</code> does not deserve to be a class; at most just a collection of methods and variables in a namespace. What if - down the road - you need to refactor this so that you're running a game server that can host multiple games? You should remove <code>static</code> from this, and if there is the current need for this to be a singleton, there are better ways to represent singletons. There are <a href="https://stackoverflow.com/questions/1008019/c-singleton-design-pattern">many, many different methods</a>.</p>

<h2>For loops</h2>

<p>I find this:</p>

<pre><code>    int j = player.GetJumpSpan();

    while (--j)
</code></pre>

<p>easier to read as</p>

<pre><code>for (int j = player.GetJumpSpan(); j &gt; 0; j--)
</code></pre>
    </div>