<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure if this is helpful, but this is some feedback:</p>

<ol>
<li><p><code>PrepStep</code> shouldn't have a <code>static int id</code> because that will be a class-wide variable.  This means that if you crease another PrepList, the numbers will not start at 1.  See the <a href="https://dart.dev/guides/language/language-tour#class-variables-and-methods" rel="nofollow noreferrer">dart docs</a>: </p>

<blockquote>
  <h3>Class variables and methods</h3>
  
  <p>Use the static keyword to implement class-wide variables and methods.</p>
  
  <h3>Static variables</h3>
  
  <p>Static variables (class variables) are useful for class-wide state and constants:</p>

<pre><code>class Queue {   static const initialCapacity = 16;   // ··· }

void main() {   assert(Queue.initialCapacity == 16); } Static variables aren’t initialized until they’re used.
</code></pre>
</blockquote>

<p>You want every <code>PrepStep</code> to have its own number, which you have, but...  </p></li>
<li><p><code>number</code> is a pretty confusable name for the step number. But you also don't need the step number because you can get it from the index of the List. Ask yourself if PrepSteps need to know their numbers. What happens when you insert a step in between? You'll have to regenerate.</p></li>
<li>Will each PrepStep just be part of exactly one list? If that's so, then you can use <a href="https://api.dartlang.org/stable/2.6.0/dart-core/List/indexOf.html" rel="nofollow noreferrer"><code>indexOf</code></a> to generate the step number.</li>
<li>Instead of <code>prepStepViewModels.add(new PrepStepViewModel(...</code>, can't you use <a href="https://dart.dev/guides/language/effective-dart/usage#consider-using-higher-order-methods-to-transform-a-sequence" rel="nofollow noreferrer"><code>.map(PrepStepViewModel)</code></a>? You might need to change the constructor of <code>PrepStepViewModel</code> so it can take one positional argument... i.e. take out the curly braces on the constructor.</li>
<li>Store <code>isFinished</code> in the model, not the viewModel.</li>
</ol>

<p>I'm going through the <a href="https://www.appbrewery.co/p/flutter-development-bootcamp-with-dart" rel="nofollow noreferrer">AppBrewery Flutter Course</a> and it is quite good at explaining some of these language issues. I like it a lot. (I don't get a commission for mentioning it.)</p>
    </div>