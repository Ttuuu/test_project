<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your first comment is misleading (it's the <code>itertools</code> module not the permutations module) and useless anyway. Remove it.</p>

<p>There's absolutely no reason to rename <code>permutations</code> to <code>prm</code>. Don't do it.</p>

<p><code>num_of_cases</code> would be better called <code>num_cases</code>, simply because it's more conventional.</p>

<p>Your <code>take input</code> comment is misplaced. It should be at the place it refers to.</p>

<p><code>counter</code> is too vague: <em>what</em> are you counting? I would call it <code>num_matched_anagrams</code>.</p>

<p>You don't need to convert <code>scrambled_word</code> to a list. <code>permutations</code> accepts any iterable. You don't need to call <code>str</code> on the output of <code>raw_input</code>; it already returns a string.</p>

<p>The prior improvements make the comment <code>take input</code> really obvious, so you can remove that.</p>

<p>The later comments are often misaligned. Have them in line with the text.</p>

<p><code>prm_list</code> can be generated with just <code>list(permutations(scrambled_word))</code>. This removes two comments.</p>

<p><code>prm_list</code> should just be called <code>word_orders</code> or similar; don't bother naming things by their type.</p>

<p><code>check</code> is badly named; it should be called something like <code>find_anagrams</code>.</p>

<p><code>check</code> should not use <code>file</code>, which is deprecated, but <code>open</code>. It should also use <code>with</code> to handle the file.</p>

<p><code>check</code> should save the dictionary between runs. In fact, this shouldn't really be <code>check</code>'s job at all.</p>

<p>The words should have their newlines trimmed, not the other way around.</p>

<p><code>check</code> should only return anagrams, not deal with appending.</p>

<p><code>check</code> should have sensibly named parameters.</p>

<p><code>check</code> should just call <code>permutations</code> itself.</p>

<p>You do</p>

<pre><code>possible_words = list(set(possible_words))
</code></pre>

<p>but why bother having <code>possible_words</code> as a list at all?</p>

<p>Instead of <code>if len(possible_words) == 0</code>, do <code>if not possible_words</code>. I would also switch the <code>if</code> around.</p>

<p><code>num_matched_anagrams+=1</code> should have spaces: <code>num_matched_anagrams += 1</code>. The comment is obvious, so remove it.</p>

<p>Now to deal with speed.</p>

<p><code>words</code> should be a set (since it's a set of words) and you loop over the permutations first. This allows a check of:</p>

<pre><code>def find_anagrams(scrambled_word, words):
    for word_order in permutations(scrambled_word):
        potential_word = ''.join(word_order)

        if potential_word in words:
            yield potential_word
</code></pre>

<p>which is <em>much</em> faster.</p>

<p>We can improve this further by doing all the work upfront by making a cannonical, sorted version. This generates a mapping:</p>

<pre><code>sorted word â†’ [list of words that sort to this word]
</code></pre>

<p>This can be generated like so:</p>

<pre><code>from collections import defaultdict

word_anagrams = defaultdict(set)

with open('dictionary.txt') as dictionary:
   for word in dictionary:
      word = word.rstrip()

      word_anagrams[sorted(word)].add(word)
</code></pre>

<p>This then makes <code>find_anagrams</code> just <code>word_anagrams[sorted(scrambled_word)]</code>. This has high initial overhead (0.5 seconds for me with 170k words) but makes subsequent lookups insanely fast.</p>

<p>This gives the code:</p>

<pre><code>from collections import defaultdict

word_anagrams = defaultdict(set)

with open('dictionary.txt') as dictionary:
   for word in dictionary:
      word = word.rstrip()

      word_anagrams[''.join(sorted(word))].add(word)

num_cases = int(raw_input("Input number of words needed to be unscrambled: "))

num_matched_anagrams = 1
while num_matched_anagrams &lt;= num_cases:
   scrambled_word = raw_input("Input scrambled word: ")
   sorted_word = ''.join(sorted(scrambled_word))

   if word_anagrams[sorted_word]:
      for word in word_anagrams[sorted_word]:
         print "Possible Word for Scrambled Word #" + str(num_matched_anagrams) + ": " + word

   else:
      print "No matches found"

   num_matched_anagrams += 1
</code></pre>

<p>The loop can be replaced with <code>for num_matched_anagrams in range(1, num_cases+1)</code>.</p>

<p>The whole thing should be put into a <code>main</code> function.</p>

<p>The dictionary parsing could be extracted to another function.</p>

<p>The <code>print</code> should use formatting and I'd add brackets for Python 3 compatibility:</p>

<pre><code>print("Possible Word for Scrambled Word #{}: {}".format(num_matched_anagrams, word))
</code></pre>

<p>To complete Python 3 compatibility, add this to the top:</p>

<pre><code>try:
   input = raw_input
except NameError:
   pass
</code></pre>

<p>This gives:</p>

<pre><code>from collections import defaultdict

try:
   input = raw_input
except NameError:
   pass

def parse_dictionary(filename):
   word_anagrams = defaultdict(set)

   with open(filename) as dictionary:
      for word in dictionary:
         word = word.rstrip()

         word_anagrams[''.join(sorted(word))].add(word)

   return word_anagrams

def main():
   word_anagrams = parse_dictionary("dictionary.txt")

   num_cases = int(input("Input number of words needed to be unscrambled: "))

   for num_matched_anagrams in range(1, num_cases+1):
      scrambled_word = input("Input scrambled word: ")
      sorted_word = ''.join(sorted(scrambled_word))

      if word_anagrams[sorted_word]:
         for word in word_anagrams[sorted_word]:
            print("Possible Word for Scrambled Word #{}: {}".format(num_matched_anagrams, word))

      else:
         print("No matches found")

if __name__ == "__main__":
   main()
</code></pre>

<p>Note that this is the same technique as Prashant gave.</p>
    </div>