<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Users can pass whatever they wish into the <code>u</code> field of your form.  Even the word <code>new</code> -- there is no defense against someone tricking your script and breaking the intended flow.  You will either need to blacklist the <code>u</code> value <code>new</code> or alter your script to not rely on it (use a different flagging mechanism).</p>
</li>
<li><p>When determining the value of <code>$user_to</code>, you can use more modern syntax.  This will make the step more concise and hopefully you won't find the syntax confusing.</p>
<pre><code>$user_to = $_GET['u'] ?? $message_obj-&gt;getMostRecentUser() ?: 'new';
</code></pre>
</li>
<li><p>When testing if multiple/all specified variables are set and not null, you can write multiple arguments into an <code>isset()</code> call.</p>
<pre><code>if (isset($_POST['post_message'], $_POST['message_body'])) {
</code></pre>
<p>but you should probably put a bit more effort into validating and sanitizing the submission data before allowing it into your system.</p>
</li>
<li><p>I do not like your call of <code>mysqli_real_escape()</code>, all of your queries should be relying on prepared statements and bound parameters.  This indicates that you probably need to adjust your <code>sendMessage()</code> method.</p>
</li>
<li><p><code>date("Y=m-d H:i:s")</code> has a typo, but I don't even recommend that you fix it in php.  It will be better that you simply declare that column in your db table to have a default value of the current datetime -- this way you never need to pass a value to that column when you execute an insert query.</p>
</li>
<li><p><code>$user_data_query-&gt;get_result()</code> produces a result set object, so you can feed it directly into a <code>foreach()</code> and avoid making iterated calls of <code>$user_data_query-&gt;get_result()</code>. You can access the associative elements in the same fashion inside the loop.</p>
</li>
<li><p>I don't see where <code>$userLoggedIn</code> is coming from.  As I work my way down the code, I must assume that this script is being run inside a password protected section of your application.  I have to assume that your <code>username</code> values are all unique in this project -- this means there is not a lot of reason to perform a loop on the SELECT query that fetches <code>first_name, last_name, num_likes</code>.  Furthermore, I don't see any reason to make a second trip to the same table in the database just to grab the <code>profile_pic</code>.  Just add <code>first_name, last_name, num_likes</code> to the <code>profile_pic</code> SELECT and bind all of the column values to variables.</p>
</li>
<li><p>Time to clean up the DOM producing portion.  Move all of your internal stylesheet to an external stylesheet.  Move all of your inline styling to the external stylesheet as well.</p>
</li>
<li><p>This doesn't look good to me: <code>getUsers(this.value, "&lt;?php echo $userLoggedIn; ?&gt;")</code>.  Am I correct that the end user can just manipulate your source code and fetch data by hardcoding a different value into the 2nd parameter?  I think this needs a rethink.</p>
</li>
</ol>
    </div>