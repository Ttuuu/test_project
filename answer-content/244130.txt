<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General Observations</strong><br>
The code displays some good programming habits already, such as include guards, good indentation, and wrapping all in <code>if</code> statements, <code>else</code> clauses and loops in braces (<code>{</code> and <code>}</code>). The file structure is good and it is easy to find which files need to be modified in maintenance. Many of the private sub functions are already removed from the global namespace using the keyword <code>static</code>. The comments are appropriate and don’t require a lot of maintenance.</p>
<p>The areas for improvement are C library functions (don’t reinvent the wheel), memory allocation in C, function complexity, function naming due to complexity, possible performance issues, and C programming conventions.
The rest of this review is organized by listing the items that can be improved in descending order from most major to most minor.</p>
<p>The question would have gotten more attention and wouldn’t have needed a bounty if the following were improved or added:</p>
<ol>
<li>A definition of what a hash cons is, I had to google it:</li>
</ol>
<blockquote>
<p>In computer science, particularly in functional programming, <a href="https://en.wikipedia.org/wiki/Hash_consing" rel="nofollow noreferrer">hash consing</a> is a technique used to share values that are structurally equal. The term hash consing originates from implementations of Lisp that attempt to reuse cons cells that have been constructed before, avoiding the penalty of memory allocation.</p>
</blockquote>
<ol start="2">
<li>Rather than just providing a link to a PDF file for the definition of It uses larger twin primes as the capacity and double hashing (open addressing) put at least some of the text in the PDF in the question and make that a link to the PDF for more information.</li>
<li>Include the entire program in the embedded code.</li>
<li>Remove commented out code before a code review, it shows that the code may not be ready for a code review.</li>
</ol>
<p>Contrary to Code Review rules, the review does cover code in the repository that is not included in the code embedded in the question. FYI I know for a fact that 3000 or more can be included in the question, because I have posted questions with more than 3000 lines. Unlike Stack Overflow on Code Review we encourage more of the code to be posted so that we have a really good idea of what the code does, this helps us give a better review.</p>
<p><strong>Improve the Unit Test</strong><br>
The second <code>for</code> loop in <code>main()</code> does not really test if the items were found in the hash cons table. The loop should have a void pointer that receives the value from ``.</p>
<pre><code>printf("starting to get stuff\n");
for (i = 0; i &lt; count; i++) {
    void *item = create_dummy(i);
    hash_cons_get(item, sizeof(struct dummy), hc);
}
</code></pre>
<p>The test should be something like this:</p>
<pre><code>printf("starting to get stuff\n");
for (i = 0; i &lt; count; i++) {
    void *item = create_dummy(i);
    if (hash_cons_get(item, sizeof(struct dummy), hc) == NULL)
    {
        printf("Item %d not found\n", i);
    }
}
</code></pre>
<p><strong>Memory Allocation in the C Programming Language</strong><br>
Unlike some more high level and modern languages, there is no garbage collection of memory that is no longer used. The C programming language provides a library function called <code>free</code> that is used for deallocating memory when it isn’t needed anymore. There is only one call to <code>free()</code> in the code and that is in <code>static void hc_resize(HASH_CONS_TABLE hc, const int capacity)</code>. Since the hash cons table itself is allocated as well as the <code>table</code> field within the hash cons table the code currently contains a huge memory leak. The table needs to be deallocated as well.</p>
<p>In the function <code>static void hc_resize(HASH_CONS_TABLE hc, const int capacity)</code> most of the code is unnecessary if the C library function <a href="http://www.cplusplus.com/reference/cstdlib/realloc/?kw=realloc" rel="nofollow noreferrer">realloc(void *ptr, size_t new_size)</a> is used.
The <code>realloc()</code> function automatically copies the contents of the memory of the original block allocated.</p>
<p>All the calls to <code>malloc()</code> and <code>calloc()</code> are missing necessary error checking. While it is uncommon with modern computers, the C programming memory allocation functions can fail. If they do fail they return <code>NULL</code>. Every call to <code>malloc()</code>, <code>calloc()</code> or <code>realloc()</code> should test that there was a block of memory returned immediately after the call before using the pointer returned. This is especially true in embedded programming where memory might be restricted. The following would be more appropriate in the code, in <code>main()</code></p>
<pre><code>    HASH_CONS_TABLE hc = malloc(sizeof(hc));
    if (hc == NULL)
    {
        fprintf(stderr, "Memory allocation of the hashcons table failed, program exiting.\n");
        return EXIT_FAILURE;
    }
</code></pre>
<p>In the function <code>void hc_initialize(HASH_CONS_TABLE hc, const int base_size)</code> the for loop is unnecessary after you change the code from <code>malloc()</code> to  <code>calloc()</code>. Since <code>calloc()</code> was created to allocate arrays the function zeros out the memory during the allocation. If you stayed with the <code>malloc()</code> call it would have been better to use <a href="http://www.cplusplus.com/reference/cstring/memset/?kw=memset" rel="nofollow noreferrer">void * memset ( void * ptr, int value, size_t num )</a>. The function <code>memset()</code> is optimized and it should before better than the for loop.</p>
<p><strong>Function Complexity</strong><br>
There are several functions in the program that are too complex (do too much), and their names don't necessarily indicate the complexity. Some of these functions are <code>main()</code>, <code>void hc_insert(HASH_CONS_TABLE hc, void *item)</code> and <code>static void hc_resize(HASH_CONS_TABLE hc, const int capacity)</code>. While the C programming language is not object oriented, there are some object oriented principles that can be applied.
The programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p>There is possible recursion in the functions <code>void hc_insert(HASH_CONS_TABLE hc, void *item)</code>, <code>static void hc_resize_up(HASH_CONS_TABLE hc)</code> and <code>static void hc_resize(HASH_CONS_TABLE hc, const int capacity)</code>, although I don’t think the recursion is intended.
One possible change in the design would be to have a function that just does an insert into the table and have that function called by <code>void hc_insert(HASH_CONS_TABLE hc, void *item)</code>, <code>static void hc_resize_up(HASH_CONS_TABLE hc)</code> and <code>static void hc_resize(HASH_CONS_TABLE hc, const int capacity)</code>.</p>
<pre><code>static void private_insert(HASH_CONS_TABLE hc, void *item)
{
    int h1 = hash1(hc, item);
    int h2 = hash2(hc, item);

    // if collision occurs
    if (hc-&gt;table[h1] != NULL) {
        int attempt = 1;
        while (true) {
            // get new index
            int index = hc_get_index(h1, h2, attempt, hc-&gt;capacity);

            // if no collision occurs, store
            if (hc-&gt;table[index] == NULL) {
                hc-&gt;table[index] = item;
                break;
            }
            attempt++;
        }
    }
        // if no collision occurs
    else {
        hc-&gt;table[h1] = item;
    }

    hc-&gt;size++;
}

static void hc_resize(HASH_CONS_TABLE hc, const int capacity) {

    HASH_CONS_TABLE temp_hc = malloc(sizeof(struct hash_cons_table));
    hc_initialize(temp_hc, capacity);
    temp_hc-&gt;equalf = hc-&gt;equalf;
    temp_hc-&gt;hashf = hc-&gt;hashf;

    for (int i = 0; i &lt; hc-&gt;capacity; i++) {
        void *item = hc-&gt;table[i];
        if (item != NULL) {
            private_insert(temp_hc, item);
        }
    }

    hc-&gt;table = temp_hc-&gt;table;
    hc-&gt;capacity = capacity;
    free(temp_hc);
}

void hc_insert(HASH_CONS_TABLE hc, void *item) {
    if (hc-&gt;size &gt; hc-&gt;capacity * MAX_DENSITY) {
        hc_resize_up(hc);
    }
    private_insert(hc, item);
}
</code></pre>
<p>Another concept we can use from object oriented programming is Data Hiding and private functions. For instance the function<code>hc_insert()</code> above should be a static function since it isn’t exported by the <code>hashcons.h</code> header file.
A good constructor function for the <code>*HASH_CONS_TABLE</code> struct might be added to <code>hashcons.c</code> and exported by <code>hashcons.h</code> as well as a destructor for the table.</p>
<p>hashcons.h:</p>
<pre><code>extern HASH_CONS_TABLE hash_cons_table_create(HASH_CONS_HASH hashf, HASH_CONS_EQUAL equalf);
extern HASH_CONS_TABLE hash_cons_table_delete(HASH_CONS_TABLE table);
</code></pre>
<p>hashcons.c</p>
<pre><code>Hash_Cons_Table_Ptr hash_cons_table_create(Hash_Cons_Hash hashf, Hash_Cons_Equal equalf)
{
    Hash_Cons_Table_Ptr hc = malloc(sizeof(*hc));
    if (hc == NULL)
    {
        fprintf(stderr, "Memory allocation of the hashcons table failed, program exiting.\n");
        return NULL;
    }

    memset(hc, 0, sizeof(*hc));
    hc-&gt;hashf = hashf;
    hc-&gt;equalf = equalf;

    return  hc;
}

HASH_CONS_TABLE hash_cons_table_delete(HASH_CONS_TABLE hc)
{
    for (size_t i = 0; i &lt; hc-&gt;capacity)
    {
        if (hc-&gt;table[i])
        {
            free(hc-&gt;table[i]);
        }
    }
    free(hc-&gt;table);
    free(hc);
    return NULL;
}
</code></pre>
<p>main.c:</p>
<pre><code>static int test_adding_items(HASH_CONS_TABLE hc, int test_sample)
{
    printf("starting to add stuff\n");
    int failure_count = 0;
    for (int i = 0; i &lt; test_sample; i++) {
        void *item = create_dummy(i);
        if (!hash_cons_get(item, sizeof(struct dummy), hc))
        {
            failure_count++;
        }
    }
    printf("finished adding stuff\n");

    return failure_count;
}

static int test_getting_times(HASH_CONS_TABLE hc, int test_sample)
{
    printf("starting to get stuff\n");
    int failure_count = 0;
    for (size_t i = 0; i &lt; test_sample; i++) {
        void *item = create_dummy(i);

        if (hash_cons_get(item, sizeof(struct dummy), hc) == NULL)
        {
            failure_count++;
            printf("Item %d not found\n", i);
        }
    }
    printf("finished getting stuff\n");

    return failure_count;
}

int main() {
    HASH_CONS_TABLE hc = hash_cons_table_create(hash, equal);
    if (hc == NULL)
    {
        fprintf(stderr, "Memory allocation of the hashcons table failed, program exiting.\n");
        return EXIT_FAILURE;
    }
    int count = 30000;

    printf("There were %d failures in test_adding_items", test_adding_items(hc, count));
    printf("There were %d failures in test_getting_times", test_getting_times(hc, count));

    hc = hash_cons_table_delete(hc);

    printf("Done!");

    return EXIT_SUCCESS;
}
</code></pre>
<p>It might be better to add a max_density field to the HASH_CONS_TABLE struct so that it could be set by flags during creation. Once the table is actually in use, the user may want to increase the density.</p>
<p><strong>Possible Performance Improvements</strong><br>
Rather than performing a search for the proper primes when resizing the table, it would be better to build a table of paired primes when the hash cons table is constructed using the Sieve of Eratosthenes.  When the table needs to be resized just index to the next pair of primes in the table and use those. This will prevent large overhead during item insert and improve performance. There will be a performance hit when the hash cons table is created, but that will be once rather than many times during execution.</p>
<p><strong>Portability (Don’t Reinvent the Wheel)</strong><br>
The code would be much more portable if the standard header file <code>stdbool.h</code> was include instead of the symbolic constants defined in <code>common.h</code>. This would allow the code to have Boolean types and use <code>true</code> and <code>false</code> rather than <code>TRUE</code> and <code>FALSE</code>. This will come in handy if the code is ported to C++ as some point, and <code>stdbool.h</code> should be available wherever C90 is available.</p>
<p><strong>Conventions</strong><br>
Rather than using int as an index into a table, prefer unsigned values such as <code>unsigned int</code>, <code>unsigned long</code> or <code>size_t</code>. This will prevent negative indexes in a table, especially when it is possible for integer overflow to happen (integers can go negative if they are incremented too far.</p>
<p>Capitalize types rather than making them all capitals, all capitals is generally reserved for macros and constants (the code is already doing this).</p>
<pre><code>#include &lt;stdbool.h&gt;

typedef long (*Hash_Cons_Hash)(void *item);

typedef bool (*Hash_Cons_Equal)(void *item1, void *item2);

typedef struct hash_cons_table {
    int size;
    int capacity;
    void **table;
    Hash_Cons_Hash hashf;
    Hash_Cons_Equal equalf;
} *Hash_Cons_Table_Ptr;
</code></pre>
<p>Include the variable names in the function prototypes so that users have some idea of what should be passed in. (self-documenting code)</p>
<p>The header file <code>stdlib.h</code> includes 2 symbolic constants for C program exit status. These are <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code>. These symbolic constants make <code>main()</code> easier to read and understand.</p>
<p>In main.c it might be better if 13, 17 and 3000 were symbolic constants that would make the code more self-documenting, it is unclear why those numbers were chosen.</p>
    </div>