<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start with your solution, it feels weird, because it is. You mixed C and C++, and on top of that you even refuted back to C string syntax and pointer arithmetic. Especially in plain C, string handling is rather easy to break, even more so if the string didn't come from C to begin with.</p>

<p>In fact, your implementation does not behave correctly in all situations. An <code>std::string</code> can also contain null-bytes <code>'\0'</code> as regular characters. The very same null bytes which double as sentinels when attempting to interpret as a C string.</p>

<p>Well, the assignment did guarantee you that only latin characters would appear in either input, ruling this case out. It's still a possibility you should be aware of though.</p>

<hr>

<pre><code>char *sPtr = new char[s.size() + 1];
sPtr++;
</code></pre>

<p>This is a huge problem. Even if you wanted to <code>delete</code> that <code>char[]</code> again, you wouldn't be able to. You just threw away your <strong>only</strong> reference you had.</p>

<p>If you would call <code>delete[] sPtr;</code> now, your application would just crash or worse, because you <strong>must</strong> call <code>delete</code> on the same pointer as returned by <code>new</code>.</p>

<p>Even if you were to write this in C, you must always keep a pointer to the base address of the dynamically allocated memory region, or you won't be able to free the memory again.</p>

<p>Even though it wouldn't had been necessary to allocate a new <code>char[]</code> anyway. As you don't modify the data, but only the pointer, you could just have said <code>char const *sPtr = s.c_str();</code> in which case you wouldn't have needed to deal with memory allocation at all.</p>

<hr>

<p>Your classmates solution is better, but not perfect. While he realized that you can just access an <code>std::string</code> as if it was an array, and avoided the handling of <code>'\0'</code>, going via indexes is usually not the preferred solution in C++. It's just far too easy to introduce an off-by-one error when doing that.</p>

<p>The solution to that is simple, rather than going by plain array indexes, stick to iterators when dealing with C++ code:</p>

<pre><code>class Solution {
    using std::string;
public:
    bool isSubsequence(const string &amp;s, const string &amp;t) {
        string::iterator s_it = s.begin();
        for (string::iterator t_it = t.begin(); s_it != s.end() &amp;&amp; t_it != t.end(); ++t_it) {
            if (*s_it == *t_it) {
                ++s_it;
            }
        }
        return s_it == s.end();
    }
};
</code></pre>

<p>Another benefit of working with iterators rather than array indexes is that this solution also works with other collection types, not just strings or similar array backed structures.</p>

<p>In this case, I e.g. only used the properties of an <a href="http://en.cppreference.com/w/cpp/concept/InputIterator" rel="nofollow"><code>InputIterator</code></a> which makes the very same algorithm applicable to a wide range of data structures, including not only <code>std::string</code>, <code>std::vector</code> or <code>std::list</code>, but if required even input streams and alike.</p>

<p>If you like to, you can try to rewrite the solution so that instead of expecting for <code>t</code> to be passed as a string, it just accepts an arbitrary pair of iterators replacing <code>t.begin()</code> and <code>t.end()</code>. These may e.g. be obtained from <code>std::cin</code> or an open file handle. Have a look at the documentation of <code>std::istream_iterator</code> for that.</p>
    </div>