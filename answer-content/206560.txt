<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>For session management, you might want to take a look at <a href="http://php.net/manual/ru/class.sessionhandlerinterface.php" rel="nofollow noreferrer"><code>SessionHandlerInterface</code></a>. Generally, your class can handle it all, but further on - you can set custom session data storage, like Memcache or Redis. </p></li>
<li><p>It seems like you're using <code>php7</code>(param typehints), but no return types. Consider doing that too. For instance, <code>UserSessionHelper::sessionHash</code> can be declared as <code>function sessionHash() : string</code></p></li>
<li><p>Class <code>User</code> sounds like a model class, while it's actually kind of a repository/manager. Consider re-naming.</p></li>
<li><p>It is considered a good practice to separate the resource handler logic and business logic, e.g. queries for DB and the user management. What I would do, is move the DB logic to a separate class, <code>UserStore</code>, for instance, </p>

<pre><code> class UserStore {
    public function isEmailUnique(string $email) : bool {
        // check in DB
    }

    public function isEmailUnique(string $username) : bool {
        // check in DB
    }

    public function create($email, $username, $password): UserModel {

    }
 }
</code></pre>

<p>and inject it to <code>User</code> class. So that the <code>UserManager</code> class could looks something like this:</p>

<pre><code>class UserManager {

    /**
     * @var UserStore
     */
    protected $store;

    public function __construct(UserStore $store) {
        $this-store = $store;
    }

    /**
     * @param array $args
     * @return UserModel
     */
    public function createUser(array $args): UserModel {
        if (!$this-&gt;store-&gt;isEmailUnique($args['email'])) {
            throw new \LogicException('Email address already exsist');
        }

        if (!$this-&gt;store-&gt;isUsernameUnique($args['username'])) {
            throw new \LogicException('Username is already taken.');
        }

        return $this-&gt;store-&gt;create(
            $args['email'], 
            $args['username'], 
            password_hash($password, PASSWORD_BCRYPT)
        );
    }
 }
</code></pre></li>
</ul>

<p>Hope that helps.</p>
    </div>