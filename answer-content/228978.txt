<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General feedback</h2>

<p>Overall this code isn’t bad but could be simplified quite a bit. The biggest thing I noticed is that jQuery is used for a few things but could be used a lot more - e.g. selecting DOM elements and manipulating them, adding event handlers, etc. There are some who believe jQuery isn't needed (see sites like <a href="http://youmightnotneedjquery.com/" rel="nofollow noreferrer">youmightnotneedjquery.com</a>. Some of the advice below comes after I read <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">this article <em>Stop Writing Slow Javascript</em></a> - I know it is from a few years ago but the concepts are still relevant. It also touches on the usage of jQuery in todays web.</p>

<p>If you really want to clean things up, run your code through a linter like eslint, jshint, etc. One of the first warnings will likely be to include <code>"use strict"</code> at the top of the JavaScript.</p>

<h2>Targeted feedback</h2>

<h3>JS</h3>

<ul>
<li><strong>functions doing more than necessary?</strong> I see the function <code>CreateAddToCartEventListener()</code> calls <code>updateCartCount()</code>. Is that really necessary when adding an event listener?</li>
<li><strong>scoping and DOM ready</strong> wrap JS in a DOM ready callback (I.e. <a href="https://api.jquery.com/ready" rel="nofollow noreferrer"><code>$(function() {})</code></a> - formerly <code>.ready()</code>) or else an <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">IIFE</a> to limit scope of variables</li>
<li><p><strong>utilize jQuery more</strong> As mentioned above, it can be used a lot more - e.g. instead of:</p>

<blockquote>
<pre><code> $clearAll = document.getElementById("clearAll");
</code></pre>
</blockquote>

<p>Just select it with the jQuery function:</p>

<pre><code>$clearAll = $(“#clearAll”);
</code></pre>

<p>Note that such a variable would then contain a jQuery collection and not a single DOM reference anymore, so with that one can call jQuery methods on the collection like <a href="https://api.jquery.com/hide/" rel="nofollow noreferrer"><code>.hide()</code></a> and <a href="https://api.jquery.com/show" rel="nofollow noreferrer"><code>.show()</code></a></p>

<blockquote>
<pre><code>$clearAll.style.display = "none";
</code></pre>
</blockquote>

<p>Can be changed to:</p>

<pre><code>$clearAll.hide();
</code></pre>

<p>Also I see things like this:</p>

<blockquote>
<pre><code>const CreateAddToCartEventListener = () =&gt; {
  var addToCart = document.getElementsByClassName("AddToCart");
  updateCartCount();
  Array.prototype.forEach.call(addToCart, function(element) {
    element.addEventListener("click", function() {
</code></pre>
</blockquote>

<p>Why not simplify the event handler registration to the jQuery syntax, like the code already does for other elements (e.g. with class name <code>plus-btn</code>, <code>minus-btn</code>). Instead of looping through all elements with the class name <code>.AddToCard</code> like the code does above, just use this:</p>

<pre><code>$(document.body).on("click", ".AddToCart", function() {
</code></pre>

<p>or event simpler with the <a href="https://api.jquery.com" rel="nofollow noreferrer"><code>.click()</code></a> shortcut method:</p>

<pre><code>$(document).click('.AddToCart', function() {
</code></pre></li>
<li><p><strong>global variables</strong> - any variable not declared with <code>var</code> (inside a function), <code>let</code> or <code>const</code> e.g. <code>$shoppingCartContainer</code> will be stored as a global variable - on <code>window</code>. In a small application that likely wouldn’t be an issue but it is a good habit to avoid those - especially when you get into a larger application and the same name is used to hold different data. </p></li>
<li><strong>variables starting with dollar symbol</strong> when using jQuery, that can be a sign that a variable represents a jQuery collection, so if <code>$shoppingCartContainer</code> is not a jQuery collection, somebody trying to extend your code might think it is a jQuery collection and use jQuery methods on it, which would lead to an error. See <a href="https://stackoverflow.com/a/553734/1575353">more in this post</a>.</li>
<li><strong>default to using <code>const</code></strong> for variables that don’t need to be reassigned - e.g. <code>$quantity</code> and then switch to <code>let</code> if it is determined that reassignment is necessary. </li>
<li><p><strong>setting length of new array to zero</strong> - when would the length of a new array be something other than zero?</p>

<blockquote>
<pre><code>var cart = [];
cart.length = 0;
</code></pre>
</blockquote></li>
<li><p><strong>use spread operator</strong> - since <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like arrow operators are used then instead of calling: </p>

<blockquote>
<pre><code>Array.prototype.forEach.call(addToCart, function(element) {
</code></pre>
</blockquote>

<p>The collection can be put into an array with the spread operator:</p>

<pre><code>[...addToCart].forEach( function(element) {
</code></pre></li>
<li><p>I see this line</p>

<blockquote>
<pre><code>window.setTimeout(function() {}, 1000); // prevent flickering
</code></pre>
</blockquote>

<p>but I am not convinced that calling an empty function after 1 second will prevent flickering. How did you reach that conclusion?</p>

<p><strong>EDIT</strong>: It might be better to wait for the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event" rel="nofollow noreferrer"><code>DOMContentLoaded</code></a> instead of the <code>load</code> event before starting to interact with the DOM. And as I mentioned above, the <a href="https://api.jquery.com/ready/" rel="nofollow noreferrer">jQuery DOM ready function</a> is available for this. </p>

<p>If the flickering you are seeing is the shopping cart container, then add <code>style="display: none"</code> to that HTML element instead of waiting for the DOM to be loaded to hide it. Then it can still be displayed dynamically via JS. If that was in the CSS then it would make displaying it more challenging. </p></li>
</ul>

<h3>HTML</h3>

<ul>
<li><strong>The <code>&lt;script&gt;</code> tags</strong> are outside the <code>&lt;html&gt;</code> tags. They are typically placed in the <code>&lt;head&gt;</code> or at the end of the <code>&lt;body&gt;</code> tag. For more information on this, <a href="https://stackoverflow.com/a/24070373/1575353">refer to this post</a>.</li>
</ul>

<h3>CSS</h3>

<ul>
<li><p><strong>multiple max-width media queries with same style</strong> I see the following rulesets:</p>

<blockquote>
<pre><code>@media (max-width: 1333px) {
  .column {
    flex-basis: 33.33%;
  }
}

@media (max-width: 1073px) {
  .column {
    flex-basis: 33.33%;
  }
}
</code></pre>
</blockquote>

<p>The second ruleset is overriding the first, but it doesn't appear to do anything different.</p></li>
<li><p><strong>excess margin style</strong>: <code>#totalCartItems</code> has <code>margin</code> with top, right, bottom and left, but then there is a separate style for <code>margin-left: auto</code>. Why not move that <code>auto</code> into the first <code>margin</code> style if it is needed?</p></li>
</ul>
    </div>