<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>

<p>I understand that you are learning, and this review may be a little harsh, but there has to be a minimum standard and your code and design falls short. That is not to say you have done poorly, for a beginner you have done well. If not a beginner,  well...</p>

<p>All good coders need access to a quality up to date reference. My preference is MDN, its not quite 5 star, but its keeps up with the tech, and missing content can always be found by following the standards links included with every reference.</p>

<p>A good entry point is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow noreferrer">MDN javascript reference</a> </p>

<hr>

<h2>Interface</h2>

<p>The interface design is very unfriendly.</p>

<h3>What this needs</h3>

<ul>
<li><p>Your update and render functions are out of sync with the display which is causing very bad flicker as the image is being dragged.</p></li>
<li><p>The image is constrained to its edges. This means that if the image is larger than the mask it can not be moved.</p></li>
<li><p>There is no feedback for both the mouse and touch input. The mouse cursor should show appropriate cursors when mouse is over draggable image. While dragging, mouse over, or on touch, there should be a visible (top layer) outline of the dragged image so the user does not lose it under the mask.</p></li>
<li><p>The page is not responsive, and the scroll does not behave as expected. The page should scale to fit the visible page and be centered.</p></li>
<li><p>There is no way to adjust the relative scale of the draggable image.</p></li>
</ul>

<h3>Extras</h3>

<p>Some extra features to make the app more usable.</p>

<ul>
<li><p>Change the background or mask colour.</p></li>
<li><p>Mirror or rotate the draggable image. Use widget style handles (render in canvas) for mouse, and pinch scale and rotate for touch.</p></li>
<li><p>Add drag drop for image input.</p></li>
</ul>

<hr>

<h2>Code</h2>

<p>The main problem is that you are not rendering correctly. This means that the code needs to be rewritten from the ground up</p>

<h3>JQuery</h3>

<p>jQuery is unneeded bloat, (both for page load and resources) and is encouraging you into some very bad design. You DON'T need jQuery, modern browsers have very advanced APIs that are much faster than jQuery, using jQuery means you are not keeping up with the state of the art in front end web design.</p>

<p>Examples of jQuery native equivalents</p>

<pre><code>/* You had...........................................................*/
$.getJSON('9images.json', function(data) {

// becomes
fetch("9images.json").then(result =&gt; result.json().then(function(data) {

/* You had...........................................................*/
$(".container")
// move to function scope and query once
const container = document.querySelector(".container");

/* You had...........................................................*/
$(".container").css('width', width + "px").css('height', height + "px").addClass('temp');

// becomes
container.style.width = width + "px";
container.style.height = height + "px";
container.classList.add("temp");

// or
Object.assign(container.style, {width: width + "px", height: height + "px");
container.classList.add("temp");

/* You had...........................................................*/
var settings = $.extend({
    // These are the defaults.
    maskImageUrl: undefined,
    imageUrl: undefined,
    scale: 1,
    id: new Date().getUTCMilliseconds().toString(),
    x: 0, // image start position
    y: 0, // image start position
    onMaskImageCreate: function(div) {},
}, options);    

// becomes        
const settings = {
    maskImageUrl: undefined,
    imageUrl: undefined,
    scale: 1,
    id: new Date().getUTCMilliseconds().toString(),
    x: 0, 
    y: 0, 
    onMaskImageCreate: function(div) {},
    ...options,
};    

/* You had...........................................................*/
item.length &gt; 0 ? $(item).attr("id") : "";

// becomes 
item.length ? item[0].id : "";


/* You had...........................................................*/
div.css({
    "z-index": 1
});

// becomes
div.style.zIndex = 1;

/* You had...........................................................*/
img.css({
    "position": "fixed",
    "left": x + "px",
    "top": y + "px"
});    

// becomes
Object.assign(img.style, {
    position : "fixed",
    left: x + "px",
    right: y + "px",
});
</code></pre>

<h3>Rendering</h3>

<p>To stop the flicker you need to use <code>requestAnimationFrame</code>. </p>

<p>Because mouse and touch events are not synced with the display device the render function needs to run in a polling loop. Mouse and touch events should signal via semaphore that there is need to render. The render function should check the semaphore and render as required.</p>

<p>Example</p>

<pre><code>var renderUpdate = true; // semaphore to render content
const mouse = {x,y,button};
function mouseMoveListener(event) {
    mouse.x = event.pageX;
    mouse.y = event.pageY;
    renderUpdate = true;
}
function mouseOverOutListener(event) {  // add to main canvas.
    mouse.cursor = event.type === "mouseover" ? "move" : "default";
}


requestAnimationFrame(renderLoop); // starts the loop
function renderLoop() {
    if (renderUpdate) {
        // call render functions
        renderUpdate = false;
    }
    mainCanvas.cursor = mouse.cursor;
    requestAnimationFrame(renderLoop);
}
</code></pre>

<h3>Compositing</h3>

<p>The DOM is fairly good at compositing, but it is not good at guessing what you want to do. </p>

<p>Multi layer image editing is best done on a single canvas with the alpha turned off (Not transparent). In your render loop you can then have very fine control over how the compositing is done.</p>

<pre><code>eg

// alpha : false. Prevents the DOM from compositing the canvas with the 
// page background, which may not even be visible.
const ctx = mainCanvas.getContext("2d", {alpha : false}); // do once

// load images and masks to a single array
const layers = [];
function addLayer(imgUrl) {
    const image = new Image;
    image.src = imgURL;
    image.onload = () =&gt; { // add image to layers when loaded
        layers.push({image, x : 0, y : 0, scale : 1});
    }
    // To do
    // Add handler for image error
}

// only call this from within the requestAnimationFrame callback function
function renderLayers(layers) {
    // As the canvas is not transparent you need to set the background colour
    ctx.fillStyle = backgroundColor;
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

    for (const layer of layers) {
        ctx.drawImage(
            layer.image, 
            layer.x, layer.y, 
            layer.image.width * layer.scale, 
            layer.image.height * layer.scale
        );
    }
}
</code></pre>
    </div>