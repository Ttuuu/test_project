<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ul>
<li><strong>Always use descriptive variable names</strong>. Would someone new to the code know straight away what <code>WS-RM05</code> or <code>WS-RS00</code> refer to? In contrast, what about <code>remainder-by-5</code> or <code>div-result</code>?</li>
<li><strong>Use named conditions to make things clearer</strong>. Again, if you're new, would you know what <code>WS-ML05</code> refers to? All that condition does is save characters and obscure the actual condition of <code>WS-RM05 = ZERO</code>.</li>
<li>Write <strong>identifiers in lower (or mixed) case</strong>. All caps text is generally hard to read (see this <a href="https://ux.stackexchange.com/q/72622/63140">UX StackExchange question</a> and <a href="http://practicaltypography.com/all-caps.html" rel="nofollow">Butterick's Practical Typography</a>) and in COBOL, it is worth differentiating between the numerous reserved words and identifiers to tell which is which.</li>
<li><strong>Remove the separator comments</strong> between/around division and section headers. Different divisions contain very distinctive code and you've already preceded sections by a blank line, thereby visibly separating code in different bits of the program. The separator comments are redundant. (However, if you mix sections and paragraphs in the procedure division, it may still be worth keeping them between sections for clarity.)</li>
<li><strong>Consider removing the <code>WS-DATA</code> and the <code>WS-COUNTS</code> groups</strong>. Neither are used directly. <code>WS-COUNTS</code> could be replaced by a comment. Regarding <code>WS-DATA</code>, (I'm assuming it contains all the data to simplify initialisation), consider marking the program as <code>INITIAL</code> or putting items in the local-storage section instead.</li>
<li><strong>Define constants as constants</strong>, e.g. define <code>WS-LAST</code> as <code>01  WS-LAST CONSTANT 20.</code> or, if you're a Micro Focus user, <code>78  WS-LAST VALUE 20.</code> (You have my sympathy if you're an IBM user.)</li>
<li><strong>Use the <code>REM</code> intrinsic function</strong> instead of <code>DIVIDE ... BY ... REMAINDER ...</code> if you only need the remainder.</li>
</ul>

<p>The following might be more personal preference than improvements:</p>

<ul>
<li><strong>Drop the leading numbers</strong> in procedure names. This seems to be a holdover from <a href="https://en.wikipedia.org/wiki/Jackson_structured_programming" rel="nofollow">Jackson Structured Programming</a>, which advocated a hierarchical approach to program design. The idea of a hierarchy cannot always be applied and if it is applied, the design should be intuitive enough to require no further qualification (e.g. it is logical that an <code>output-report</code> procedure would call the <code>output-control-heading</code> procedure). If not, it should be documented in comments or in a separate file, not in identifiers.</li>
<li><strong>Remove the WS/LS/etc. prefixes</strong> as the variable name or purpose of the program should provide sufficient information to determine what section the variable is defined in.</li>
</ul>

<p>Applying these suggestions the <code>10000-BEGIN</code> and <code>20000-MAIN</code> sections would become:</p>

<pre><code>begin.
    DISPLAY "**********"
    .
main.
    PERFORM compute-fizzbuzz
    DISPLAY ws-display-string
    .
</code></pre>
    </div>