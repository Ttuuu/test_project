<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>This avoids the problem of rigid object hierarchies (object-oriented code is inherently brittle)</p>
</li>
<li><p>The solution can be extended with the addition of additional matchers without affecting its cyclomatic complexity, thus adhering to the OCP.</p>
</li>
<li><p>This has the advantage of avoiding recursion.</p>
</li>
<li><p>It has the advantage of being able to represent the number 2702508209400 as</p>
<p>"2 Trillion 7 Hundred 2 Billion 5 Hundred 8 Million 2 Hundred 9 Thousand 4 Hundred"</p>
</li>
</ul>
<hr>
<p>Currently revising so that the following tests pass:</p>
<pre><code>2782513111456 |"Two Trillion Seven Hundred Eighty Two Billion Five Hundred Thirteen Million One Hundred Eleven Thousand Four Hundred Fifty Six"

9876543212345 |"Nine Trillion Eight Hundred Seventy Six Billion Five Hundred Forty Three Million Two Hundred Twelve Thousand Three Hundred Forty Five"

12345 | "Twelve Thousand Three Hundred Forty Five"

1112345 |" One Million One Hundred Twelve Thousand Three Hundred Forty Five"

17 | "Seventeen"

12 | "Twelve"

2 | "Two"
</code></pre>
<hr>
<p><strong>(Old)</strong>
I didn't go into decade sequences because of the additional parsing complexity (ten vs twenty vs thirty...etc) but the gist is the same....just slightly more code within the Pass logic and some additional matchers. I also didn't handle string representing the individual base10 digits, but it's the same algorithm.</p>
<p>This is untested (still need to implement the Mod for progressive declension through the stack of parsers)  I wrote it all straight from memory, so if you try it, you'll want to debug.</p>
<hr>
<h2>Edit</h2>
<p>Note that I'm adding a singular "Teen" regex resolver for turning 13,14,15,16,17,18,19 into String.Format("{0}teen",n); I'll report the current status of the implementation below</p>
<h2>Broken</h2>
<p>(I will change from "Broken" to "Fixed" when the implementation is finished...but I'm at work. Tinkering with this during my pomodoro breaks)</p>
<hr>
<pre><code>public class KataSolver
{
   private System.Int64 Number{get;set;}
   private System.Int64 TestNumber{get;set;}
   public List&lt;Matcher&gt; Matchers{get;set;}
   public KataSolver(int numberToLex)
   {
      Number = numberToLex;
      Matchers = new List&lt;Matcher&gt;();
      Matchers.Add(new Matcher(){Regex="[0-9]{13}$", Token="Trillion", Mod=1000000000000});
      Matchers.Add(new Matcher(){Regex="[0-9]{12}$", Token="Hundred", Mod=100000000000});
      Matchers.Add(new Matcher(){Regex="[0-9]{10}$", Token="Billion", Mod=100000000});
      Matchers.Add(new Matcher(){Regex="[0-9]{9}$", Token="Hundred", Mod=10000000});
      Matchers.Add(new Matcher(){Regex="[0-9]{7}$", Token="Million", Mod=1000000});
      Matchers.Add(new Matcher(){Regex="[0-9]{6}$", Token="Hundred", Mod=100000});
      Matchers.Add(new Matcher(){Regex="[0-9]{4}$", Token="Thousand",Mod=1000});
      Matchers.Add(new Matcher(){Regex="[0-9]{3}$", Token="Hundred", Mod=100});
      Matchers.Add(new Matcher(){Regex="^(90)$", Token="Ninety", Mod=90});
      Matchers.Add(new Matcher(){Regex="^(80)$", Token="Eighty", Mod=80});
      Matchers.Add(new Matcher(){Regex="^(70)$", Token="Seventy", Mod=70});
      Matchers.Add(new Matcher(){Regex="^(60)$", Token="Sixty", Mod=60});
      Matchers.Add(new Matcher(){Regex="^(50)$", Token="Fifty", Mod=50});
      Matchers.Add(new Matcher(){Regex="^(40)$", Token="Forty", Mod=40});
      Matchers.Add(new Matcher(){Regex="^(30)$", Token="Thirty", Mod=30});
      Matchers.Add(new Matcher(){Regex="^(20)$", Token="Twenty", Mod=20});
      Matchers.Add(new Matcher(){Regex="^(13|14|15|16|17|18|19)$",Token="{0}teen",Mod=10});
      Matchers.Add(new Matcher(){Regex="^(12)$", Token="Twelve", Mod=12});
      Matchers.Add(new Matcher(){Regex="^(11)$", Token="Eleven", Mod=11});
      Matchers.Add(new Matcher(){Regex="^(10)$", Token="Ten", Mod=10});
      Matchers.Add(new Matcher(){Regex="^(9)$", Token="Nine",Mod=9});
      Matchers.Add(new Matcher(){Regex="^(8)$", Token="Eight",Mod=8});
      Matchers.Add(new Matcher(){Regex="^(7)$", Token="Seven",Mod=7});
      Matchers.Add(new Matcher(){Regex="^(6)$", Token="Six",Mod=6});
      Matchers.Add(new Matcher(){Regex="^(5)$", Token="Five",Mod=5, AltToken="Fif"});
      Matchers.Add(new Matcher(){Regex="^(4)$", Token="Four",Mod=4});
      Matchers.Add(new Matcher(){Regex="^(3)$", Token="Three",Mod=3,AltToken="Thir"});
      Matchers.Add(new Matcher(){Regex="^(2)$", Token="Two",Mod=2});
      Matchers.Add(new Matcher(){Regex="^(1)$", Token="One", Mod=1});
   }
   public List&lt;string&gt; Solve()
   {
       TestNumber = Number;
       var results = new List&lt;String&gt;();
       foreach(var matcher in Matchers)
       {
          var result = Pass(TestNumber, matcher);
          if(result.Equals("NoMatch")break;
          if(result.Equals("Anomaly"){Console.WriteLine(String.Format("There was an anomaly parsing {0}, TestNumber.ToString());break;}
          results.Add(result);
       }
       return results;
   }
   public string Pass(long number, string matcher)
   {
       string test = number.ToString();
       string count = string.Empty;
       MatchCollection matches = Regex.Matches(test, matcher);
       if(matches.Count == 0) return "NoMatch";
       if(matches.Count &gt; 1) return "Anomaly";

       TestNumber %= matcher.Mod;
       count = Math.Floor(TestNumber).ToString();
       
       while(TestNumber &gt;= matcher.Mod)
       {
         TestNumber -= matcher.Mod;
       }
       return String.Format("{0} {1}", count, matcher.Token);
   }
}

public class Matcher
{
   public string Regex{get;set;}
   public string Token{get;set;}
   public string AltToken{get;set;}
   public long Mod{get;set;
}
</code></pre>
    </div>