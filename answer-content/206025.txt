<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As Slicer wrote in his comment you should create a method/function for the algorithm.
And you could make it as an extension method:</p>

<pre><code>public static class NumberExtensions
{
  public static ulong Factorial(this ulong number)
  {
    if (number &lt; 2) return 1;

    checked
    {
      ulong factorial = number;
      for (ulong i = 2; i &lt; number; i++)
      {
        factorial *= i;
      }
      return factorial;
    }
  }
}
</code></pre>

<p>Here I've widened the domain to <code>ulong</code> and I iterate upwards from 2 as it is more intuitive and easier to read. Further I've encapsulated the method in a <code>checked</code> statement in order to throw on overflow, because factorial grows quickly out of even the scope of <code>ulong</code>.</p>

<hr>

<p><strong>Usage</strong></p>

<pre><code>  while (true)
  {
    Console.Write($"Enter a number: ");
    if (ulong.TryParse(Console.ReadLine(), out ulong number))
    {
      try
      {
        Console.WriteLine($"Factorial of {number} = {number.Factorial()}");
      }
      catch (OverflowException ex)
      {
        Console.WriteLine($"Entered number is too big: {number}");
      }
      catch (Exception ex)
      {
        Console.WriteLine($"An Error occured: {ex.Message}");
      }
    }
    else
    {
      break;
    }
  }
</code></pre>
    </div>