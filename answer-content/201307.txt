<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unit tests.  Great!  Too many reviews don't have tests, so you're already ahead of the game.</p>

<p>We can improve them by giving better messages when tests fail.  What we really want to know is what result we got, as we'd like to see how it's different to what was expected.  We could enhance our <code>expect()</code> function, but I'll show you how to use the Python <code>unittest</code> module:</p>

<pre><code>import unittest

class TestKthSmallest(unittest.TestCase):

    def test_small(self):
        inputs = [1984, 1337, 9000, 8304, 5150, 9000, 8304]
        # sorted: [1337, 1984, 5150, 8304, 8304, 9000, 9000]
        self.assertEqual(kthSmallest(inputs, 1), 1337)
        self.assertEqual(kthSmallest(inputs, 2), 1984)
        self.assertEqual(kthSmallest(inputs, 3), 5150)
        # now check the last element, and the first n that's too big
        self.assertEqual(kthSmallest(inputs, len(inputs)), 9000)
        self.assertEqual(kthSmallest(inputs, len(inputs)+1), None)

if __name__ == '__main__':
    unittest.main()
</code></pre>

<p>These tests will be mercifully silent when they succeed, but if you make them fail, you get to see <em>how</em> they fail:</p>

<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "./201241.py", line 34, in test_small
    self.assertEqual(kthSmallest(inputs, 2), 1337)
AssertionError: 1984 != 1337
</code></pre>

<p>For the large test, we'll want to seed the random number generator, to ensure that we're performing the same test every time.  A test that sometimes fails is much less help than one that always fails!</p>

<pre><code>def test_large(self):
    random.seed(1)          # ensure the test is reproducible
    inputs = [random.uniform(1000, 9000) for _ in range(10000000)]
    result = kthSmallest(inputs, 185)
    inputs.sort()
    self.assertEqual(result, inputs[184])
</code></pre>

<p>As an alternative, we could make this faster by starting with a known order and then shuffling it to get the function input (shuffling should be faster than sorting, unless the <code>random()</code> function is really slow):</p>

<pre><code>def test_large(self):
    random.seed(1)          # ensure the test is reproducible
    inputs = list(range(1, 10000000))
    random.shuffle(inputs)
    result = kthSmallest(inputs, 185)
    self.assertEqual(result, 185)
</code></pre>

<hr>

<p>As a bonus, switching to <code>unittest</code> makes the code work in both Python 2 and Python 3 - that's a Good Thing to have.</p>
    </div>