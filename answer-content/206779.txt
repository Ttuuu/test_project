<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public interface IFaker&lt;T&gt; where T : class
{
    Faker&lt;T&gt; GetFaker();
}
</code></pre>
</blockquote>

<p>I don't think you need this interface and the additional call to <code>GetFaker</code>. Instead you can derive your class from the <code>Faker&lt;T&gt;</code> and use the constructor to set everything up:</p>

<pre><code>public class DogFaker : Faker&lt;Dog&gt;
{
    public DogFaker()
    {
        RuleFor(dog =&gt; dog.Name, f =&gt; f.Name.FirstName(Name.Gender.Male));
        RuleFor(dog =&gt; dog.IsGoodBoy, f =&gt; f.Random.Bool());
    }   
}
</code></pre>

<hr>

<blockquote>
<pre><code>private Faker&lt;T&gt; GetFaker&lt;T&gt;() where T : class
{
  if (!_fakers.ContainsKey(typeof(T)))
  {
      throw new ArgumentException($"Type: {typeof(T).FullName} not registered with FakerService");
  }
  var faker = (Faker&lt;T&gt;)_fakers[typeof(T)];
  return faker;
}
</code></pre>
</blockquote>

<p>In this case it would be much clener to query the dictionary only once with <code>TryGetValue</code> if you are going to use the value anyway rather then doing it twice, once with <code>ContainsKey</code> and then with the <code>[]</code> indexer. At the same time you can tun it into a ternary operator <code>?:</code>:</p>

<pre><code>private Faker&lt;T&gt; GetFaker&lt;T&gt;() where T : class
{
    return
        _fakers.TryGetValue(typeof(T), out var faker)
            ? (Faker&lt;T&gt;)faker
            : throw new ArgumentException($"Type: {typeof(T).FullName} not registered with FakerService");
}
</code></pre>

<hr>

<p>Since ´InitialiseFakers´ does not require any instance data I suggest making it <code>static</code>. I like the way you created this initializer. Instead of letting it set the <code>_fakers</code> dictionary you return it as a result and assign it in the construtor. This way it's much cleaner and all the initialization-assignment stays inside the construtor so a big plus for that.</p>

<hr>

<blockquote>
<pre><code>// Can we do better than &lt;Type, object&gt; ?
private Dictionary&lt;Type, object&gt; _fakers;
</code></pre>
</blockquote>

<p>I'm afraid we cannot because <code>Faker&lt;T&gt;</code> isn't derived from any other collection-friendly interface. All you have is:</p>

<blockquote>
<pre><code>public class Faker&lt;T&gt; : IFakerTInternal, ILocaleAware, IRuleSet&lt;T&gt; where T : class
</code></pre>
</blockquote>

<p>and this is not very useful so <code>object</code> is the only possible generalisation in this case. But this isn't that bad. It's an object so it doesn't cost you a penny to cast it. But sure, some general interface would be nice.</p>
    </div>