<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>Firstrow</code> and <code>LastRow</code></h2>

<p><code>Firstrow</code> and <code>LastRow</code> refer to cells on <code>ThisWorkbook.Worksheets(2)</code> but are used to iterate over the cells of the <code>ActiveSheet</code>.  I'm guessing that <code>ThisWorkbook.Worksheets(2)</code> is the original data that is being copied to a new worksheet for processing. In any case, it would be better to have them refer to the same worksheet.  After all you are reducing the number of rows 5 times.</p>

<pre><code>Firstrow = ThisWorkbook.Worksheets(2).UsedRange.Cells(1).Row
LastRow = ThisWorkbook.Worksheets(2).Cells(ThisWorkbook.Worksheets(2).Rows.Count, "A").End(xlUp).Row

With ActiveSheet
    For Lrow = LastRow To Firstrow Step -1
</code></pre>

<h2>Repeat Code</h2>

<p>There are 5 procedures that basically do the same thing.  Extracting the repeated code into its own subroutine and passing in the variable information will make the code easier to read, modify and debug.</p>

<blockquote>
<pre><code>Sub Remove_FutureRenewals(ws As Worksheet, EValue As Variant, CalcDate As Date)
</code></pre>
</blockquote>

<p>Note: The <code>eValue</code> parameter is meant to tests the values in Column e. It is typed as Long because all the values (30, 60, 90, 120) are integer values.  If this is the case then <code>.Value = "120"</code> should be <code>.Value = 120</code>.  Using a string for a number should be avoided.</p>

<h2>Keep Formatting</h2>

<p>If you want to preserve formatting then it would be best to <code>Union()</code> all the rows to be deleted and delete them all at once.</p>

<pre><code>Sub Remove_FutureRenewals(ws As Worksheet, EValue As Variant, CalcDate As Date)
    Dim cell As Range, target As Range

    CalcDate = DateValue(CalcDate)

    With ws
        For Each cell In .Range("E1", .Cells(.Rows.Count, "E").End(xlUp))
            With cell
                If Not IsError(.Value) And IsDate(.Offset(0, -1).Value) Then
                    If .Value = EValue And DateValue(.Offset(0, -1).Value) &lt;&gt; CalcDate Then
                        If target Is Nothing Then
                            Set target = .EntireRow
                        Else
                            Set target = Union(target, .EntireRow)
                        End If
                    End If
                End If
            End With
        Next
    End With

    If Not target Is Nothing Then
        Dim CalcMode As XlCalculation
        With Application
            CalcMode = .Calculation
            .Calculation = xlCalculationManual
            .ScreenUpdating = False
            .EnableEvents = False

            target.Delete

            .Calculation = CalcMode
            .ScreenUpdating = True
            .EnableEvents = True
        End With
    End If
End Sub
</code></pre>

<h2>Values Only</h2>

<p>When working with values it is much faster to use arrays then it is to delete multiple rows.  </p>

<p>Here is the pattern that I use:
 - Define a target Range.  In this case I just used the <code>UsedRange</code>
 - Load the <code>target.Value</code> into a variant called data.  <code>data = target.Value</code>
 - Make a second array named results the same size as the data array
 - Iterate over the data array adding any rows to be kept to the results array
 - Write the results over the original target range</p>

<pre><code>Sub Remove_FutureRenewals2(ws As Worksheet, EValue As Variant, CalcDate As Date)
    CalcDate = DateValue(CalcDate)
    Dim data As Variant, results As Variant
    data = ws.UsedRange.Value

    ReDim results(1 To UBound(data), 1 To UBound(data, 2))

    Dim r As Long, c As Long, resultsRow As Long

    For r = 1 To UBound(data)
        If data(r, 5) = EValue And DateValue(data(r, 4)) = CalcDate Then
            resultsRow = resultsRow + 1

            For c = 1 To UBound(data, 2)
                results(resultsRow, c) = data(r, c)
            Next

        End If

    Next

    Application.ScreenUpdating = False
    ws.UsedRange.Value = results

End Sub
</code></pre>
    </div>