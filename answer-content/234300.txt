<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Note: I started analyzing Minesweeper probabilities in 2008 and have over the years refined my stragegy for this and now have a <a href="https://codereview.stackexchange.com/q/54737/31562">powerful and fast</a> way to calculate <a href="https://codereview.stackexchange.com/q/62383/31562">every possible Minesweeper-related probability</a> that you would want to know.</em></p>

<p>All the credit for this answer goes to myself and my 10+ years of experience with Minesweeper. Especially all my hours spent back in the days to analyze the mathematics in Minesweeper. Since 2009 I run my own website to play <a href="https://play.minesweeperflags.net" rel="nofollow noreferrer">Minesweeper Flags</a> which is a multiplayer version of Minesweeper where the objective is to <em>take</em> the mines instead of avoiding them.</p>

<h3>KeyValue</h3>

<p>One of your KeyValue constructors is never used</p>

<p>KeyValue could use generics, or always use Sections (sometimes with just one GameSquare)</p>

<p>KeyValue seems to always use either <code>Section</code> or <code>section.getKey()</code> for its object. Might as well always use section then.</p>

<p>I also think that it's more than just a Key and a Value, it's maybe an <code>AssignedValue</code> ?</p>

<h3>GameSquare</h3>

<p>Besides just having an optional specific name, or some way to recognize it for debugging purposes, this does not really fill a purpose. I don't think this class is necessary and can instead be replaced by using a generic type in your other classes. For example, using <code>Section&lt;XYPosition&gt;</code>, <code>Section&lt;String&gt;</code>.</p>

<h3>Section</h3>

<p>I like that you group fields that has the same probability together with each other. This is a common mistake that other people do not take into consideration and it greatly helps with improving the speed of the algorithm.</p>

<p>I think this can be improved a little bit though, you have three constructors at the moment - out of which one seems to be only used in your tests (the one that takes a <code>Collection</code>), so one constructor could be removed. Ideally I think it would be best to have only one constructor for this class.</p>

<p>The constructor that takes a <code>Set</code> does not take a defensive copy of the Set, which can cause issues if the user of the class is not careful.</p>

<h3>Rule</h3>

<p>Your <code>Rule</code> class does not care about the order of the squares, which is good, but why is it then not using a <code>Set</code>?</p>

<p>I also think that it would be better if your rules would work with <code>Section</code>s instead of <code>GameSquare</code>s. Knowing that <code>{ABCD + EF + G} = 4</code> is more interesting than knowing that <code>{A+B+C+D+E+F+G} = 4</code></p>

<h3>The main logic</h3>

<p>Why is <code>UNKNOWN_VALUE</code> = 0 in <code>RulesCombinationCalculator</code> ? Zero is a perfectly well-suited known value in Minesweeper.</p>

<p>Your <code>RulesCombinationCalculator.getAllVariations</code> method returns a <code>List&lt;List&lt;KeyValue&gt;&gt;</code>. Then what? For someone who is not very familiar with your code, it's very unclear what to do with that. How do I get the probabilities for all the fields? And how do I know what I should pass this method to make it work properly?</p>

<p>What you could do is to provide a single method that does <strong>all</strong> the work of splitting squares into sections, creating rules, finding valid rule combinations, and calculate the probabilities. (The closest to this I could find in the rest of your code was <code>OddsCalculatorTest.getResultsComplete</code> which did everything except calculating the probabilities from the <code>List&lt;List&lt;KeyValue&gt;&gt;</code> )</p>

<p>Another thing to consider is to, in some method, instead of returning what you are currently returning encapsulate that result into another object and add a method of how to continue forward, so that you for example could write the following:</p>

<pre><code>GameBoardAnalyzer.analyze(gameBoard)
    .createRules()
    .splitIntoSections()
    .calculateAllVariations()
    .calculateOdds()
</code></pre>

<p>Although I imagine that in many causes you will want just the odds, or some more of these results, so encapsulating all of the above in a result object and simply doing <code>GameBoardAnalyzer.analyze(gameBoard)</code> might be a good idea.</p>

<p>Either way, there's great potential to make usage simpler here.</p>

<p>Speaking of usage, it was not clear from the start to me how to set the number of available mines on the whole board, and once I found that out (pass it to the <code>calculateOdds</code> that exists in other parts of your code) I found another parameter: <code>totalUnidentifiedSquares</code>. It would be good if the <code>GameBoard</code> could keep track of how many mines are left and how many totalUnidentifiedSquares there are.</p>

<h3>Tests</h3>

<p>Some of your tests (not mainly the ones in your post, but in other parts of your code) contain many test-cases that look almost identical, just using a few different values. Those would be ideal for <a href="https://github.com/junit-team/junit4/wiki/Parameterized-tests" rel="nofollow noreferrer">parameterized tests</a>.</p>

<h3>What if...</h3>

<p>Let's say that you have this board: ('_' indicating an unclicked field)</p>

<pre><code>0000
0122
02__
02__
</code></pre>

<p>This board has three mines left.</p>

<p>At the moment your code will believe that one of the mines here has the lowest probability (100%), because you don't take into consideration the lower-right square which is the only 0% square here. As the board has to have only three mines left, all those mines need to be placed on the regular sections that you do consider already. Leaving us with only one field that doesn't have a rule connected to it, and never getting its probabilities calculated.</p>

<p>Which can be solved by...</p>

<h3>Do not handle the total number of mines seperately</h3>

<p>The total number of mines on a Minesweeper board <strong>is not a special case</strong>. It is just another constraint and can be expressed as a regular rule.</p>

<p>Given these rules:</p>

<pre><code>{ABC + E} = 3
{ABC + F} = 2
{G + H} = 1
</code></pre>

<p>You can add this rule for the total number of mines:</p>

<pre><code>{ABC + E + F + G + H} = 4
</code></pre>

<h3>Rule simplifications</h3>

<p>Currently you are adding a lot of solutions at first, only to remove them later because they end up either overflowing a rule or elsewhere breaking a rule. You have three different checks for if a rule is not satisfied correctly: <code>anyValueTooHigh</code>, <code>anyRulesBroken</code>, and <code>isRuleFollowed</code>. If you would instead use some previous knowledge that you have learned, you could identify more quickly if something is not right. Basically, if a rule has 0 possible combinations, then something is wrong and some previously set value is not correct. In my code to analyze Minesweeper, I use the following process whenever I have set a value to a section:</p>

<p>If ABC has been assigned the value '2' in the example above. You don't need to loop the section for E from 0 to 1 and also assign it a value.</p>

<pre><code>{ABC + E} = 3
</code></pre>

<p>With the knowledge that ABC = 2, the above becomes</p>

<pre><code>{2 + E} = 3
</code></pre>

<p>Which means</p>

<pre><code>{E} = 1
</code></pre>

<p>So when you have assigned the value to the section ABC, you can create a new rule, {E} = 1, which only has one solution and therefore resolves itself and giving you more information.</p>

<p>This is especially effective in the case of these rules:</p>

<pre><code>{AEG + BCHI} = 1
{BCHI + DFJ} = 3
</code></pre>

<p>Which can be solved quickly by setting a value to <em>any</em> of the three current sections, AEG, BCHI, or DFJ. Of course, if you would set one value incorrectly you might one day find yourself in this situation:</p>

<pre><code>{} = -1
</code></pre>

<p>Which indicates that some of the previously set values is incorrect, so the facts so far can be disregarded. In this way, I believe these situations will be found much earlier instead of in your current code where you set a lot of values at first and then in the end check if anything went wrong.</p>

<h3>Overall</h3>

<p>It took me a while to figure it out, but your code does indeed calculate probabilities correctly. And faster than many other pieces of code written for this purpose, I believe. That's a job well done.</p>

<p>Try to simplify the usage of the code. If I would want to use your code, I shouldn't need to know all about the inner workings of it to be able to use it.</p>

<p>And focus on performance (although I might have been slightly evil to throw situations at it which never happen in regular Minesweeper)</p>
    </div>