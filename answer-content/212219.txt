<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't want to debate the usefulness of this utility class. I can provide some feedback which I think should allow you to make the code objectively more readable. Use C++14's additions to <code>type_traits</code>. That is you should e.g. use: <code>std::enable_if_t&lt;whatever&gt;</code> instead of <code>typename std::enable_if&lt;whatever&gt;::type</code>.<br>
A question: is there any use case for explicitly specifying template parameter to <code>get</code> or <code>get_mutable</code>? If not, then you can omit adding the template parameter 
Another minor suggestion (that is my personal preference) is to use <code>std::enable_if</code> in template parameters specification, in my opinion this makes easier to quickly take note of the function signature. Furthermore, you could do something like:</p>

<pre><code>    template&lt;typename Q&gt;
    using move_constructible = std::enable_if_t&lt;std::is_move_constructible_v&lt;Q&gt;&gt;;

    template&lt;typename = move_constructible&lt;_TLock&lt;_TMtx&gt;&gt;&gt;
    proxy&lt;lock_type&gt; get() {
        return proxy&lt;lock_type&gt;(obj_, lock_type(*mtx_));
    }

    template&lt;typename = move_constructible&lt;_TMutLock&lt;_TMtx&gt;&gt;&gt;
    proxy&lt;mutable_lock_type&gt; get_mutable() {
        return proxy&lt;mutable_lock_type&gt;(obj_, mutable_lock_type(mtx_));
    }
</code></pre>

<p>Of course if you don't feel like using C++17's <code>std::is_move_constructible_v</code> you can use C++11's <code>std::is_move_constructible&lt;&gt;::value</code>. If you want to preserve the ability for the caller to specify template arguments for those methods you can do this easily as well:</p>

<pre><code>    template&lt;typename Q = _TLock&lt;_TMtx&gt;, typename = move_constructible&lt;Q&gt;&gt;
    proxy&lt;lock_type&gt; get() {
        return proxy&lt;lock_type&gt;(obj_, lock_type(*mtx_));
    } 
</code></pre>

<p>Same can be done for types that are not move constructible.<br>
One more: most probably you should not use names starting with underscore followed by uppercase letter, see <a href="https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">here</a>.</p>
    </div>