<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As far as I can see, this looks correct for the behavior you've stated. A few possible improvements:</p>

<p>Efficiency:</p>

<ul>
<li>It would be better to check for failure conditions in a different order: string size, first or last is delimiter, presence of double-delimiter, and only if those all pass then find single-delimiter. </li>
<li><p>You re-search the string for the first occurrence of delimiter in the while loop instead of using the already calculated one.  You could rewrite the else block to:</p>

<pre><code>while (res != string::npos) {
    tokensVec.push_back(rawInput.substr(previous, res - previous));
    previous = res + 1;
    res = rawInput.find(delimiter, previous);
}
tokensVec.push_back(rawInput.substr(previous, size - previous));
</code></pre></li>
</ul>

<p>Style:</p>

<ul>
<li>There are a few too many variables, and the naming isn't very clear.  searchInd and pos can be condensed to a single one (<strong>previous</strong>, in the above snippet), returnableResult isn't used, and res2 doesn't need to be a variable.</li>
<li>Use full names, especially when it's only slightly longer.  </li>
<li>The lack of indentation at the top level and the use of /* */ for single-line comments is atypical; I wouldn't recommend it unless that's an existing coding style used by your team / company.</li>
</ul>

<p>Misc:</p>

<ul>
<li>Different failure messages for different failure conditions may be useful, depending on where that output  is used.</li>
</ul>
    </div>