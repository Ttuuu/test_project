<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code as presented is poorly formatted, which makes it difficult to read.  If this is how it is in your editor, then you should consider reformatting it to a standard indentation.  Most IDEs / code editors can do this automatically for you.</p>
<pre><code>public class List {
</code></pre>
<p>The list you've implemented is a linked list. This impacts on how it performs.   Consider giving it a name that reflects this. The standard library defines a <code>List&lt;T&gt;</code> interface, which is then implemented by concrete implementations (such as LinkedList).  This gives a common interface that can be used for working with lists, but allows different concrete selections to be made if particular performance charactersistics are required.</p>
<pre><code>    private Link head;
    private Link tail;
    private int elementCount;

    public List() {

        head = null;
        tail = head;
</code></pre>
<p>Consider <code>tail = null</code>, it's more explicit.</p>
<pre><code>        elementCount = 0;
    }

    public void insert(int position, Object data) {
</code></pre>
<p>The levels of abstraction in this method are mixed.  Some clauses directly change the list, whereas others delegate to member functions.  Consider consolidating these levels of abstraction.  On approach might be:</p>
<ul>
<li><p>If Invalid position, handle</p>
</li>
<li><p>If Position == Start, call insertHead</p>
</li>
<li><p>If Position == End, call insertEnd</p>
</li>
<li><p>Otherwise, call insertMiddle</p>
<pre><code>     if (position &lt; 1 || position &gt; elementCount + 1) {
         System.out.println("Sorry could not insert due to position problems"
                 + "Position can't be less than 1, or position is "
                 + "greater than element exists");
</code></pre>
</li>
</ul>
<p>Whilst you may be writing this list with user interaction in mind, it's generally better to separate the user interaction from the actual logic of the list.  If this list was being used from a different program, you might not want it outputting directly to the console like this.</p>
<pre><code>            return;
</code></pre>
<p>Whilst you've indicated to the console that the insert has failed, the caller has no way to know that the insertion has failed.</p>
<pre><code>        }
// insert head
        if (isEmpty() &amp;&amp; position == 1) {
            head = tail = new Link(data, null);
            elementCount++;
            return;
        }
        if (!isEmpty() &amp;&amp; position == 1) {
            Link temp = head;
            head = new Link(data, temp);
</code></pre>
<p>Consider, if the list was empty, what temp would be if this code was executed, rather than the clause above.  Really, the only difference between your processing for an empty list and a list with items is that the empty list also assigns the tail to head...</p>
<pre><code>            elementCount++;
            return;
        }
// insert middle
        if (position &lt;= elementCount) {
            int i = 1;
            Link current = head;
            Link previous = null;
            while (i != position) {
                previous = current;
                current = current.next;
                i++;
            }
            previous.next = new Link(data, current);
            elementCount++;
            return;
        }
// insert at end
</code></pre>
<p>Comments should add meaning to the code, otherwise they just add noise.  Would the code be any harder to understand without the comment above?</p>
<pre><code>        insertAtEnd(data);
    }

    public void insertAtEnd(Object data) {
</code></pre>
<p>This method is called from <code>insert</code> and it appears to be written with that in mind.  However, it's declared as a <code>public</code> method.  Consider what would happen if it was called on an empty list.</p>
<pre><code>        tail.next = new Link(data, null);
        tail = tail.next;
        elementCount++;
    }

    //
</code></pre>
<p>Is something important missing from this comment section?</p>
<pre><code>    public List find(Object toFind) {
        if (isEmpty()) {
            System.out.println("This List is empty");
            return null;
</code></pre>
<p>Returning <code>null</code> makes it necessary for the caller to handle the <code>null</code>.  Consider using <code>Optional&lt;List&gt;</code> instead to give the caller a hint that the list might not be returned.  Or, consider if a better approach would be to return a list of no items instead.  This would allow the caller to iterate over zero to many items, without needing to handle the null case explicitly.</p>
<pre><code>        }
        List listOfpositions = new List();
        Link current = head;
        int position = 1;

        while (current != null) {
            if (isEmpty(listOfpositions)) {
</code></pre>
<p>If <code>insertAtEnd</code> could be called on an empty list, would you need this branch?</p>
<pre><code>                if (current.data.equals(toFind)) {
                    listOfpositions.insert(1, position);
                }
            } else {
                if (current.data.equals(toFind)) {
                    listOfpositions.insertAtEnd(position);
                }
            }
            position++;
            current = current.next;
        }
        return listOfpositions;
    }

    public void deleteRange(int start, int end) {
        if (isEmpty()) {
            System.out.println("The list is empty");
</code></pre>
<p>Again, whilst the console knows nothing has happened the caller doesn't.  If these are error conditions, consider if you should be throwing exceptions, rather than just printing and returning.</p>
<pre><code>            return;
        }
        if (start &gt; end) {
            System.out.println("Your range is inverted");
            return;
        }
        if (start == end) {
            deleteAtIndex(start);
            System.out.println("Operation Complete...");
</code></pre>
<p>Your other operations like <code>insert</code> don't output this kind of message, does it make sense for this one to?</p>
<pre><code>            return;
        }
        int deleteCount = end - start + 1;
</code></pre>
<p>Would this logic still work if <code>start == end</code>?</p>
<pre><code>        for (int i = 0; i &lt; deleteCount; i++) {
            deleteAtIndex(start);
</code></pre>
<p>The way deleteAtIndex is implemented, it starts from the head of the list, iterates through to the target item, then removes it.  It'll do the same thing for the next item, starting again from the beginning.  This is really inefficient.  Consider if there's a better way to remove multiple items at once, without having to start from the beginning of the list each time.</p>
<pre><code>        }
        System.out.println("Operation Complete...");
    }

    public Object getSize() {
</code></pre>
<p>Size seems like it's a number, should this really be returning an <code>Object</code>?</p>
<pre><code>        return elementCount;
    }

    public void deleteItem(Object item) {
        if (isEmpty()) {
            System.out.println("This List is empty");
            return;
        }
        Link current = head;
        int index = 1;
        while (current != null) {
            if (current.data.equals(item)) {
                deleteAtIndex(index);
                index--;
            }
            current = current.next;
            index++;
        }
        System.out.println("Operation Complete...");
    }

    public Link retrieve(int index) {
</code></pre>
<p>Do you want the caller to be able to iterate through the Links themselves?  If not, consider returning the <code>Object</code> contained in the list, rather than the <code>Link</code> itself.</p>
<pre><code>        if (isEmpty()) {
            System.out.println("List is empty");
            return null;
        }
        if (index &gt; elementCount || index &lt; 1) {
            System.out.println("Out of bound");
            return null;
        }
        if (index == 1) {
            return head;
        }
        if (index == elementCount) {
            return tail;
        }
        Link current = head;
        int i = 1;
        while (current != null &amp;&amp; i != index) {
            current = current.next;
            i++;
        }
        return current;
    }

    @Override
    public String toString() {
        String linkedList = "This is your list" +
                "\n[";
        Link node = head;
        while (node != null) {
            linkedList += (node);
            linkedList += ",";
            node = node.next;
        }
        int lastComma = linkedList.lastIndexOf(",");
        if (lastComma != -1) {
            linkedList = linkedList.substring(0, linkedList.length() - 1);
        }
        linkedList += ']';


        return linkedList;
    }


    private void deleteAtIndex(int index) {
</code></pre>
<p>This is a private method.  You do a lot of checks in your public methods to make sure that you are operating on valid list elements.  Do you still need all of these checks here?</p>
<pre><code>        if (isEmpty()) {
            return;
        }
        if (index &lt; 1) {
            return;
        }
        if (index &gt; elementCount) {
            return;
        }
        if (index == 1) {
            head = head.next;
            elementCount--;
            return;
        }
        if (index == elementCount) {
            Link currentLink = head;
            while (currentLink.next != tail) {
                currentLink = currentLink.next;
            }
            tail = currentLink;
            currentLink.next = null;
            elementCount--;
            return;
        }
        int i = 1;
        Link current = head;
        Link previous = null;
        while (i != index) {
            previous = current;
            current = current.next;
            i++;
        }
        previous.next = current.next;
        elementCount--;
    }

    private boolean isEmpty(List listOfpositions) {
</code></pre>
<p>It's unclear why this method exists.  Why wouldn't the client call <code>listOfpositions.isEmpty()</code> ?  If you do want it, consider making it a <code>static</code> method.</p>
<pre><code>        return listOfpositions.head == null;
    }

    private boolean isEmpty() {
        return head == null;
    }
}
</code></pre>
    </div>