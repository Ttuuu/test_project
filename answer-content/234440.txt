<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review and thanks for sharing your code!</p>

<p>This is what I think about it:</p>

<h1>Formal aspects</h1>

<h2>order of elements in files</h2>

<p>There is a convention of the order of elements inside a java file. 
The most important you violated is, that <em>constructors</em> come before any (non static) method.</p>

<h2>comments</h2>

<p>Comments should explain <strong>why</strong> the code is like it is. 
Your comments merely repeat what the code expresses itself and are therefore useless.</p>

<h2>avoid work in constructors</h2>

<p>In the constructor <code>MathSession()</code> you create an instance of <code>MathQuestionGenerator</code> using the both parameters <code>operator</code> and <code>difficulty</code>.
forthemore these two parameters (respectively the properties, they are set to) are not used within the class.</p>

<p>The better way would be to create the <code>MathQuestionGenerator</code> instance outside <code>MathSession()</code> and pass this instance of  <code>MathQuestionGenerator</code> as constructor parameter into <code>MathSession()</code> instead of  <code>operator</code> and <code>difficulty</code>.</p>

<h2>Limit visibility and force immutability</h2>

<p>Your class <code>MathQuestion</code> is merly a <em>Data Transfer Object</em>. 
Most of its properties will not change during the LifeTime of the Object.
Therefore they should be <code>final</code>.</p>

<p>Declaring all the properties in your classes <code>public</code> makes them accessible from the outside. 
This is a violation of the most important principle of OOP: <em>Information hiding / encapsulation</em>. 
So declare your properties <code>private</code> by default and change that only if you have a very good reason to do so.</p>

<h1>OOP</h1>

<p>OOP doesn't mean to "split up" code into random classes with random inheritance relationships.</p>

<p>The ultimate goal of OOP is to reduce code duplication, improve readability and support reuse as well as extending the code.</p>

<p>Doing OOP means that you follow certain principles which are (among others):</p>

<ul>
<li>information hiding / encapsulation</li>
<li>single responsibility</li>
<li>separation of concerns</li>
<li>KISS (Keep it simple (and) stupid.)</li>
<li>DRY (Don't repeat yourself.)</li>
<li>"Tell! Don't ask."</li>
<li>Law of Demeter ("Don't talk to strangers!")</li>
</ul>

<h2>replace branching with polymorphism</h2>

<p>You created some <code>enum</code> types which is a good thing in the first place. 
But You only use the enum values to select execution branches in your <code>MathQuestionGenerator</code> class.
e.g.:</p>

<pre><code>    MathOperator operation = null;
    if (type == SessionType.Addition) {
        operation = MathOperator.Addition;
    } else if (type == SessionType.Subtraction) {
        operation = MathOperator.Subtraction;
    } else if (type == SessionType.Multiplication) {
        operation = MathOperator.Multiplication;
    } else if (type == SessionType.Division) {
        operation = MathOperator.Division;
    } else if (type == SessionType.Mixed) {
        // Choose an operation randomly
        operation = random.nextInt(1) == 0 ? 
                (random.nextInt(1) == 0 ? MathOperator.Addition : MathOperator.Subtraction) : 
                (random.nextInt(1) == 0 ? MathOperator.Multiplication : MathOperator.Division);
    }
</code></pre>

<p>The better way would be to transfer the "special behavior" in the individual branches into the various constants of the enum:</p>

<pre><code>public enum SessionType {
    Addition{
       return MathOperator.Addition;
    },
    Subtraction{
       return MathOperator.Subtraction;
    },
    Multiplication{
       return MathOperator.Multiplication;
    },
    Division{
       return MathOperator.Division;
    },
    Mixed{
       return random.nextInt(1) == 0 ? 
                (random.nextInt(1) == 0 ? MathOperator.Addition : MathOperator.Subtraction) : 
                (random.nextInt(1) == 0 ? MathOperator.Multiplication : MathOperator.Division);
    };
    public abstract MathOperator selectOperator();
}
</code></pre>

<p>Your original code would change to:</p>

<pre><code>MathOperator operation = type.selectOperator();
</code></pre>

<h2>Avoid special return values</h2>

<p>Your method <code>getFinalScore()</code> returns a <em>special value</em> to thell the caller, that something went wrong (the user did not yet answer enough questins).
The better way here would be to throw an <em>exception</em>.</p>

<blockquote>
  <p>The use of Exceptions is a mine field. ;o)<br>
  The rule of thumb is tat you do use Exceptions to to signal <em>unusual behavior</em> and not to implement <em>control flow</em>. 
  In My view your example is a corner case, since having not yet answered all questions is clearly not the "happy day path". </p>
</blockquote>

<p>An alternative to the Exception could be returning an Java8-Optional instead of the primitive <code>int</code>.</p>
    </div>