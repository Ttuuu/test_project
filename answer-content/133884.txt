<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I decided to write my own little Rock Paper Scissors game just so you could see the same project from another fellow programmer's perspective.  </p>

<pre><code>import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

/**
 * Created on 7/4/2016.
 *
 */

public class RockPaperScissors {
    public static void main(String[] args){
        List&lt;Integer&gt; computerMoves = Arrays.asList(1, 2, 3); // Used to generate random number.
        Scanner input = new Scanner(System.in);

        // Infinite loop until broken by exit case.
        loop : while(true){
            System.out.print("Rock, Paper, Scissors, Exit &gt;&gt;&gt; ");
            String move = input.nextLine().toLowerCase();
            Collections.shuffle(computerMoves); // Shuffles list to achieve random numbers.

            switch(move){
                case "rock" : determineWinner(computerMoves.get(0), "Tie", "You Lose", "You Win"); break; // if move is rock
                case "paper" : determineWinner(computerMoves.get(0), "You Win", "Tie", "You Lose"); break; // if move is paper
                case "scissors" : determineWinner(computerMoves.get(0), "You Lose", "You Win", "Tie"); break; // if move is scissors
                case "exit" : break loop; // if move is exit
                case "" : continue loop; // if move is blank
                default : System.out.println("Invalid Input"); // if move is none of the above
            }
        }
    }

    // Used in the interest of code re-usability
    private static void determineWinner(int computerMove, String m1, String m2, String m3){
        if(computerMove == 1){ // computer move is rock
            System.out.printf("Computer Chose Rock, %s%n", m1);
        } else if(computerMove == 2){ // computer move is paper
            System.out.printf("Computer Chose Paper, %s%n", m2);
        } else { // computer move is scissors
            System.out.printf("Computer Chose Scissors, %s%n", m3);
        }
    }
}
</code></pre>

<p>Now, whether my coding decisions were the absolute best for this situation or not, there are still a lot of things you can take from my code. I tried to reuse some of the same tools that you used so you wouldn't be too lost but I also tried to implement some new things you might have never used or seen before. </p>

<p><strong>Formatting:</strong>  </p>

<p>Take note of the curly braces in my code, they emphasize the actual "blocks" of code. Your code is very hard to read because of poorly placed braces. <a href="https://codereview.stackexchange.com/questions/133862/cheapest-hotel-finder">Here is a link to another review</a>, the top answer goes a lot more in depth on curly braces placement and has some decent visuals as well. Also while on the topic of indentation you have a few silly indentations through out.</p>

<pre><code>    Random rnd = new Random();
System.out.println("Rock Paper Scissors, by Sage!");
System.out.println("Select 1, 2, 3, for Rock, Paper, Scissors");
//Menu Present, pretty bad still
</code></pre>

<p>And</p>

<pre><code>input = sage.nextInt();

        if(input == yes){
            System.out.println("Rock,Paper,Scissors!");

        }else{
            System.out.println("Thanks for playing!");
        }
</code></pre>

<p>Indentations are generally only followed by open curly braces. Not sure if these were just copy paste issues but worth mentioning.</p>

<p><strong>Functionality:</strong>  </p>

<p>This line stands out the most I believe, </p>

<pre><code>input = sage.nextInt();
</code></pre>

<p>It accepts the next Integer, if given anything other than an integer your application will crash. Most of the time its a good idea to have some sort of check in there and correct a user or at least stop them from crashing the program. I deal with this by accepting a string and checking all expected input with a switch case statement. If a user gives this application something other than the 5 expected inputs, it will correct them by saying "Invalid Input".</p>

<p>Another notable problem with your game is that it will never stop. int b in your rps class never changes. When asking the player if they want to continue, you will have to change int b so that it equals 0 for the game to stop. Because int b is in another class from rps2, you would reference it like so:</p>

<pre><code>rps.b = 0;
</code></pre>

<p><strong>Conclusion</strong>  </p>

<p>These are just a few important things to keep in mind. I'm sure someone will touch on some of the others.</p>
    </div>