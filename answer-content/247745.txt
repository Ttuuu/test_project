<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>TL;DR summary:</strong> Use less comments, use meaningful comments, use <code>Deque</code>, DRY and generalise the repetitive code (with some smarts), out-of-border checking, make <code>Square</code> abstract &amp; paint in it's subclass, repaint only when something changes.</p>
<hr>
<p>Firstly, I am totally new to this StackExchange, so sorry if I misunderstood my review task or I cross any borders - I honestly don't want to be mean to you, just to point out style errors or things that can be improved in your design or implementation.</p>
<p>I have not run your solution at all, it looks functional and I believe you it works. But I have read all the code.</p>
<hr>
<h2>Review</h2>
<ol>
<li>You have good direction of control - you are calling the core functionality from the UI. However, it could be <em>brilliant</em> if you could get rid of the dependency on JavaFX totally. The <code>GameLogic</code> should be UI-agnostic, it should be an independent module you could reuse from say a console UI. You are on a very good way here - the only thing you do with JavaFX in <code>GameLogic</code> is <code>paintBoard()</code>. And good job injecting <code>Square[][]</code>! The color of the tile, or Square as you call it, should be the responsibility of the <code>Square</code> class itself. A <strong>color</strong> is not logically the responsibilty of the game logic. The <code>GameLogic</code> can call a method of the <code>Square</code> to change it's state and it is the responsibility of the <code>Square</code> to manifest the changed state by changing it's color.</li>
</ol>
<p>And the <code>Square</code> can easily do this task itself, you have provided it with fields (defining the state) <code>white</code>, <code>apple</code>. So the default color can be given by <code>white</code>, and then in the <code>setApple()</code> you can change the color if needed (hurray encapsualtion with setter methods!).</p>
<p>The only other state which has another color is when the snake is on the square.</p>
<ul>
<li><p>You could introduce another field marking this state (also update in setter).</p>
</li>
<li><p>Another solution which comes to my mind is to consider <code>Square</code> as a place where something can stand on or cover the square. This would be a good solution if you want to extend the possible entities which can be in your world (you could have poisoned apples, walls, holes...). I would implement this by introducing a new interface, f.e. <code>Placeable</code> with some method to draw the UI &amp; the <code>Square</code> would have a field <code>Placeable placedObject</code> or something similar. This way you do not need to add more fields to the <code>Square</code> for each item and each item has its own UI responsibility.</p>
</li>
</ul>
<p>The next step in making the core game logic independent is to make <code>Square</code> <strong>not</strong> extend <code>Label</code>, make it abstract. Extract the painting logic (which calls <code>setStyle</code>) into an abstract method and implement it in a subclass <code>JavaFxSquare</code> which can extend <code>Label</code>. You will probably call the <code>paint()</code> method in the setters or on demand.</p>
<ol start="2">
<li><p>Why does <code>Square</code> extend <code>Label</code> in the first place? It does not contain any text. I vaguely remember that I had a problem with <code>javafx.scene.shape.Rectangle</code> putting it into a <code>GridPane</code> - is this the reason? Anyway: don't extend <code>Label</code>, probably extending <code>Region</code> is enough.</p>
</li>
<li><p>Rename <code>white</code> =&gt; <code>isWhite</code> and <code>apple</code> =&gt; <code>hasApple</code>. Usually boolean variable names are adjectives or start with <code>is</code> or <code>has</code></p>
</li>
<li><p>The field <code>white</code> can be calculated inside the constructor of <code>Square</code>. One could say it is his responsibility, but if you want it to be configurable, it can stay a constructor parameter.</p>
</li>
<li><p>You have waaaaaaaaaaaaaaay too many comments. I am not sure whether you have commented each line just for the review or you actually have so many comments. The problem is these comments have no meaning most of the time:</p>
</li>
</ol>
<pre><code>// Create a scene and add the GridPane to it
stage.setScene(new Scene(root));

// Store the user inputs
List&lt;String&gt; input = new ArrayList&lt;&gt;();

// Create an instance of GameLogic. Pass it the board and the list of snake body parts
GameLogic snakeGame = new GameLogic(board, snake);

// If the nextSquare variable is an apple
        if (nextSquare.isApple()) {
</code></pre>
<p>A lot of code you have commented is self-explanatory and do not need comments. Some well-named variable is way better. So many comments are distracting when reading the code, because after a while I was just ignoring the comments - and this way I can miss something important! And comments should be only for the important stuff - something unusual, some bugfix which is not apparent why the implementation is that way... If you need to comment a block of code, you should probably extract it to a well-named method.</p>
<ol start="6">
<li><p>Rename <code>i</code>, <code>j</code> to <code>row</code> and <code>col</code>.</p>
</li>
<li><p><code>count</code> variable has no sense, it is identical to <code>j</code> (i.e. <code>col</code>)</p>
</li>
<li><p>What happens if you eat 2 apples quickly? can it happen?</p>
</li>
<li><p>Good job with detecting if the new apple position is not inside the snake already! However:</p>
<ul>
<li>DRY (don't repeat yourself): it should be on 1 place, probably inside <code>GameLogic</code> (and call it in constructor)</li>
<li>creating a <code>new Random()</code> always is not a good idea, it can produce the same values if initialised with a short interval. You should initialise it once in your constructor.</li>
</ul>
</li>
<li><p><code>LinkedList</code> is <em>the perfect</em> implementation for your Snake. Manipulating the "head" and "tail" should be enough for you, so you could use the <code>Deque</code> interface. You should replace your method calls:</p>
<ul>
<li><code>snake.get(0)</code> =&gt; <code>snake.getFirst()</code></li>
<li><code>snake.set(0, x)</code> =&gt; <code>snake.addFrist(x)</code></li>
<li><code>snake.get(snake.size() - 1)</code> =&gt; <code>snake.getLast()</code></li>
<li><code>snake.set(snake.size() - 1, nextSquare)</code> =&gt; <code>snake.addLast(nextSquare)</code></li>
</ul>
</li>
</ol>
<p>Why are you actually moving all the squares? It is enough to add a new head and remove the tail if it haven't eaten an apple. The other parts of the Snake stay untouched.</p>
<ol start="12">
<li>Change <code>input.size() == 0</code> =&gt; <code>input.isEmpty()</code>.</li>
</ol>
<p>Why is <code>input</code> a list? How does your game work if you hold one arrow and then press another arrow without releasing the first? The snake does not change it's direction, does it? Is it the expected behavior? If you want to store only the most recent key pressed, it would be enough to not use a <code>List</code>.</p>
<p>What happens if you press a non-arrow key?</p>
<p>Instead of using a <code>String</code> you can also store the <code>KeyCode</code> (maybe later you will want to enable WASD also, so you can have a method which maps it to <code>Direction</code>).</p>
<pre><code>- I am not sure how the threads on key pressed work, but maybe you need to `synchronise` the assignment and read of `input`
</code></pre>
<ol start="13">
<li>You have a hidden logic when you test</li>
</ol>
<pre><code>head.getDirection() == Direction.UP &amp;&amp; direction == Direction.DOWN
</code></pre>
<p>How would you name it? I'd say you are checking whether the directions are opposite. I suggest you add an <code>opposite</code> field to your <code>Direction</code> like so:</p>
<pre><code>    public enum Direction {
        UP, DOWN, RIGHT, LEFT;

        private Direction opposite;

        static {
            UP.opposite = DOWN;
            DOWN.opposite = UP;
            RIGHT.opposite = LEFT;
            LEFT.opposite = RIGHT;
        }

        Direction getOpposite() {
            return opposite;
        }
    }
</code></pre>
<p>Sadly, it is a bit complicated because of <a href="https://stackoverflow.com/questions/5678309/illegal-forward-reference-and-enums">Illegal forward reference</a>.</p>
<p>This way you can change your 4 (<strong>!</strong>) conditions to this:</p>
<pre><code>head.getDirection() == direction.opposite()
</code></pre>
<ol start="14">
<li>You yourself have commented:</li>
</ol>
<blockquote>
<p>"since they all function in the exact same way"</p>
</blockquote>
<p>Again: DRY! You should generalise the following code. Most of it is identical, except for the index calculation and border checking.</p>
<ol>
<li>The index calculation depends on the <code>Direction</code> you take. There is a pattern in which you move by 1 in the x-y axis. You can solve the index calculation by adding 1 if you move in the direction of the axis, subtracting 1 if you move in the opposite direction, or adding 0 if you stay on that axis. So:</li>
</ol>
<pre><code>public enum Direction {
    UP(-1, 0),
    DOWN(1, 0),
    RIGHT(0, 1),
    LEFT(0, -1);

    private int rowChange;
    private int colChange;

    Direction(int rowChange, int colChange) {
        this.rowChange = rowChange;
        this.colChange = colChange;
    }

    int getRowChange() {
        return rowChange;
    }

    int getColChange() {
        return colChange;
    }
}
</code></pre>
<p>So the resulting code is:</p>
<pre><code>nextSquare = board[row + direction.getRowChange()][column + direction.getColChange()];
</code></pre>
<ol start="2">
<li>Border checking is easy if you check the nextSquare: does it have a <code>row</code> or <code>col</code> <code>&lt; 0</code> or <code>&gt;= size</code> ?</li>
</ol>
<pre><code></code></pre>
<ol start="15">
<li><p>The <code>changeDirection()</code> comments nothing about ignoring opposite direction - THAT should be commented, it's an interesting edge case.</p>
</li>
<li><p><code>nextMove()</code> comment has nothing saying about the meaning of return value. The name of the method neither does help. The return type should be well documented in this case, it is not apparent - JavaDoc <code>@return</code> is just for this!</p>
</li>
<li><p><strike>It could be considered for <code>nextMove()</code> to be void and throw a <code>GameOverException</code> (what a cool name!). It's not necessary, just a possibility.</strike> Having a boolean returned in this case is even better, because philosophically it is the expected behaviour to hit a wall or eat your tail. However, see point 16.</p>
</li>
<li><p>what's this about? why should it be null?</p>
</li>
</ol>
<pre><code>if (square == null) {
    System.out.println("Square is null");
    return;
}
</code></pre>
<ol start="19">
<li>Is repainting of the whole board needed? repaint only what has changed, with larger grids, it can very quickly lag.</li>
</ol>
<p>If you implement reactive change inside <code>Square</code> upon setting <code>apple</code> for example, this is not an issue anymore.</p>
<ol start="20">
<li><p>In your <code>UI</code> class, the size could be parameterizable. For example the user could input it. Keep it in mind and use a variable for the size, not hardcoded int literals.</p>
</li>
<li><p>Calculate the middle of the board for the initial position of the snake. Alternatively, you could generate it randomly. The direction could also be random.</p>
</li>
</ol>
<hr>
<p>I hope all of this helps :D I think you could do most of the points separately, so don't be intimidated by the high amount. I am very much looking forward to your next steps and development! Don't hesitate to write in case of any questions.</p>
<hr>
<h2>Future extensions</h2>
<p>You could think about your solution to be flexible and extensible in the future. You could implement these in the future, or prepare your solution to be extended once. Some ideas:</p>
<ol>
<li>Configurable board size</li>
<li>Performance improvement - multi-threading</li>
<li>Other kinds of objects on the board, like walls, golden apples, laxatives, energy drink
<ul>
<li>think of leveraging the game aspects f.e. length of snake, score, speed of game, game over</li>
</ul>
</li>
<li>Another UI support - console or some other GUI</li>
<li>Multiplayer? :D</li>
<li>Tracking the score, keeping a highscore</li>
</ol>
    </div>