<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Don't flush where you don't need to.</p>

<p>Flushing is expensive, so don't use <code>std::endl</code> unless you need it.<br>
Nearly always, the shorter <code>'\n'</code> suffices, which can be merged with any bordering string-literal.</p>

<p>Still, that advice seems to be for your teacher, not you ;-)</p></li>
<li><p><code>return 0;</code> is implicit in <code>main</code> if control reaches the closing brace <code>}</code>.<br>
The same is true for C since C99.</p>

<p>This also seems to be one for your teacher.</p></li>
<li><p>I see you corrected your formatting since posting on SO.</p>

<p>Still, 6 spaces is unusual. Either use the standard tab-stop (8), or if that's too much for your tastes, 4 is a common choice.</p>

<p>Automatic formatting-tools exist which will do this and much additional formatting for you, which gain importance with the size of the project, especially the number of contributors.</p></li>
<li><p>There is no reason to write the member-functions of the template out-of-line.</p>

<p>Even if you later divide your projects in multiple files, and thus have headers and implementation-files, templates are always (with really few exceptions) implemented in the header anyway, due to technical constraints.</p></li>
<li><p>There is absolutely no reason to explicitly implement the copy-constructor.<br>
Let the compiler provide a default one.<br>
Since C++11, one can also explicitly default it, preferably at the point of declaration: <code>= default;</code>.</p>

<p>Additional benefit: Doing so re-enables move-ctor and move-assignment.</p></li>
<li><p>The 2-argument-ctor should be templated to accept any assignable types and use perfect forwarding:</p>

<pre><code>template &lt;typename T3, typename T4, typename = decltype(T1(std::declval&lt;T3&amp;&amp;&gt;()),
    T2(std::declval&lt;T4&amp;&amp;&gt;()), void())&gt;
Calculator(T3&amp;&amp; a, T4&amp;&amp; b) : number1(std::forward&lt;T3&gt;(a)), number2(std::forward&lt;T4&gt;(b)) {}
</code></pre></li>
<li><p>The setters should accept any assignable type and use perfect forwarding for optimal performance.</p>

<pre><code>template &lt;typename T3&gt;
auto setValue1(T3&amp;&amp; x) -&gt; decltype(number1 = std::forward&lt;T3&gt;(x), void())
{ number1 = std::forward&lt;T3&gt;(x); }
template &lt;typename T3&gt;
auto setValue2(T3&amp;&amp; x) -&gt; decltype(number2 = std::forward&lt;T3&gt;(x), void());
{ number2 = std::forward&lt;T3&gt;(x); }
</code></pre></li>
<li><p><code>add</code> and <code>multiply</code> should use a deduced return-type, and be <code>const</code>.
This transfers to avoiding explicit types in the implementations:</p>

<ul>
<li><p>Use <code>decltype(std::declval&lt;T1&amp;&gt;()+std::declval&lt;T2&amp;&gt;())</code> for C++11.</p>

<pre><code>decltype(std::declval&lt;T1&amp;&gt;()+std::declval&lt;T2&amp;&gt;()) add() const;
decltype(std::declval&lt;T1&amp;&gt;()*std::declval&lt;T2&amp;&gt;()) multiply() const;
</code></pre></li>
<li><p>Or since C++14, just <code>auto</code> for letting the compiler deduce it.</p>

<pre><code>auto add() const {
    auto answer = number1 + number2;
    return answer;
}
</code></pre></li>
<li><p>Or shorter:</p>

<pre><code>auto add() const {
    return number1 + number2;
}
</code></pre></li>
</ul></li>
</ol>

<p>Putting it all together:</p>

<pre><code>template &lt;class T1, class T2&gt;
class Calculator {
    T1 number1;
    T2 number2;
public:
    template &lt;class T3, class T4, class = decltype(T1(std::declval&lt;T3&amp;&amp;&gt;()),
        T2(std::declval&lt;T4&amp;&amp;&gt;()), void())&gt;
    Calculator(T3&amp;&amp; a, T4&amp;&amp; b) : number1(std::forward&lt;T3&gt;(a)), number2(std::forward&lt;T4&gt;(b)) {}
    // implicit: copy-ctor, move-ctor, copy-assignment, move-assignment, dtor

    template &lt;class T3&gt;
    auto setValue1(T3&amp;&amp; x) -&gt; decltype(number1 = std::forward&lt;T3&gt;(x), void())
    { number1 = std::forward&lt;T3&gt;(x); }
    template &lt;class T3&gt;
    void setValue2(T3&amp;&amp; x) -&gt; decltype(number2 = std::forward&lt;T3&gt;(x), void());
    { number2 = std::forward&lt;T3&gt;(x); }

    auto add() const { return number1 + number2; }
    auto multiply() const { return number1 * number2; }
};
</code></pre>
    </div>