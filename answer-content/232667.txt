<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both functions <code>checkPolygon1</code> and <code>checkPolygon2</code> perform essentially the same actions and only differ in specific <em>polygon</em> instance. <br>That's an appropriate case for <a href="https://refactoring.com/catalog/parameterizeFunction.html" rel="nofollow noreferrer"><em>Parameterize Function</em></a> refactoring technique where <em>polygon</em> instance can serve as a <em>factor</em>. </p>

<p>Define a unified function <strong><code>point_in_polygon</code></strong> (don't forget about Python naming conventions):</p>

<pre><code>def point_in_polygon(row, polygon):
    return polygon.contains(Point(row['X'], row['Y']))
</code></pre>

<p>Then, assuming that you already have a <em>list</em> or <em>generator</em> of polygons <code>polygons</code>:</p>

<pre><code>for i, polygon in enumerate(polygons, 1):
    datacopy[f'InPolygon{i}'] = datacopy.apply(point_in_polygon, axis=1, polygon=polygon)
</code></pre>
    </div>