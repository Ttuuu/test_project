<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When writing maintainable code, I'd recommend to declare variables in <em>narrow</em> scopes, if possible. If you do something like:</p>

<pre><code>var inputStr, inputsArray, numsArray, arrayStrNumber, isAdd, isSub, isMul, isDiv;
</code></pre>

<p>at the very beginning, then on every line throughout the rest of the program, you'll have to keep in mind the possible values for all of those variables. If the script is long, this can be a problem. Consider encapsulating related functionality into separate functions instead - for example, you could turn the input into an array in one function, sort it in another, and then finally iterate through it to produce the result in a third. That way, for example, <code>inputStr</code> will <em>only</em> be visible to the first function (as an argument), and neither of the first two functions will have <code>isAdd</code> etc visible to them. Separating functionality into smaller self-contained sections makes code a lot more readable.</p>

<p>Since it's 2020, it would be nice to write source code in modern syntax - <em>at least</em> in ES2015. Modern syntax generally makes code more concise, easier to read, and less buggy. (I'll be using modern syntax in suggestions below.)</p>

<p>Consider always using strict mode - you have some variables that you never declare (<code>strArray</code> and <code>x</code>), which means that they get implicitly assigned to the global object. This is an easy source of bugs, not to mention inelegant; strict mode will throw an error when this sort of thing happens, allowing you to fix it on sight.</p>

<p>When you have to iterate over an array or a string, it's nice to be able to immediately work with <em>each item</em> being iterated over immediately, rather than having to mess with indicies. Both strings and arrays have iterators (which iterate over either each character, or each array item), so you can do this concisely with <code>for..of</code>. For example:</p>

<pre><code>for (let i = 0; i &lt; inputsArray.length; i++) {
  const inputValue = inputsArray[i];
</code></pre>

<p>can be replaced with</p>

<pre><code>for (const inputValue of inputsArray) {
</code></pre>

<p>You do</p>

<pre><code>isNaN(numsArray[i]) ?
  (numsArray[i] = "" + inputValue[x] + "") :
  (numsArray[i] += "" + inputValue[x] + "");
</code></pre>

<p>The conditional operator should only be used when you need an <em>expression</em> which is identified conditionally, like <code>console.log(cond ? '1' : '2')</code>. If the expression that results from using the conditional operator isn't being used, like in your code, it would be more readable to remove it and use <code>if</code>/<code>else</code> instead. (It's fine for <em>minifiers</em> to do that, but minified code isn't intended to be read - source code that developers write <em>should</em> be as readable as possible). There's even <a href="https://eslint.org/docs/rules/no-unused-expressions" rel="nofollow noreferrer">a linting rule</a> to help you automatically identify and fix this sort of thing.</p>

<p>So, you have a string which is composed of numbers, plus one letter somewhere inside it, and you need to separate them. If you want to do this concisely, you might consider using <code>replace</code> to replace the letter character with the empty string, and use a callback to assign the matched value (the letter) to an outer variable, like this:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function separateWord(word) {
  let char;
  const num = Number(
    word.replace(
      /[a-z]/i,
      match =&gt; {
        char = match;
        return ''; // replace this match with the empty string
      }
    )
  );
  return { char, num };
}
console.log(separateWord('123b456'));</code></pre>
</div>
</div>


<p>On a broader scale, using the above function, I think the first section of the code which turns each word into a sorted array would be easier to manage if you used an <em>object</em> indexed by character instead, whose values are arrays of numbers. Eg, for the above <code>123b456</code>, that would result in the following object:</p>

<pre><code>{
  b: [123456]
}
</code></pre>

<p>Iterate over each word, pushing to an array on the object, creating it first if necessary. Then, the object properties can be arranged lexiographically by sorting its entries (<code>Object.entries</code> returns an array of entries, where an entry is an array containing the key and the value, so just compare the keys in the <code>.sort</code>). This makes things <em>so</em> much shorter and cleaner:</p>

<pre><code>function getOrderedNumbers(numbersByChar) {
  return Object.entries(numbersByChar)
    .sort((a, b) =&gt; (a[0] &gt; b[0]) - 0.5) // Order entries alphabetically
    .map(entry =&gt; entry[1]) // Take only the value of each entry
    .flat(); // Turn the array of arrays of numbers into a single array of numbers
}
function parseString(inputStr) {
  const numbersByChar = {};
  for (const word of inputStr.split(' ')) {
    const { char, num } = separateWord(word);
    if (!numbersByChar[char]) {
      numbersByChar[char] = [];
    }
    numbersByChar[char].push(num);
  }
  const numbersArr = getOrderedNumbers(numbersByChar);
  return doMath(numbersArr);
}
</code></pre>

<p>For the <code>doMath</code> function, keeping track of 4 separate booleans and performing 4 different <code>if</code> checks is a bit verbose for the task at hand. You might consider using an array of functions instead, and using the modulo operator to identify which function to call:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function doMath(numbersArr) {
  const fns = [
    (subtotal, num) =&gt; subtotal + num,
    (subtotal, num) =&gt; subtotal - num,
    (subtotal, num) =&gt; subtotal * num,
    (subtotal, num) =&gt; subtotal / num,
  ];
  // Remove first value so operation can start with + with first and second value:
  let subtotal = numbersArr.shift();
  numbersArr.forEach((num, i) =&gt; {
    subtotal = fns[i % 4](subtotal, num);
  });
  return subtotal;
}
console.log(doMath([1, 2, 4, 5])); // ((1 + 2) - 4) * 5</code></pre>
</div>
</div>


<p><code>reduce</code> would be more appropriate than <code>forEach</code> to transform the array of numbers into a single number, but if you're a beginner, you probably prefer the <code>forEach</code> version since it's more intuitive:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function doMath(numbersArr) {
  const fns = [
    (subtotal, num) =&gt; subtotal + num,
    (subtotal, num) =&gt; subtotal - num,
    (subtotal, num) =&gt; subtotal * num,
    (subtotal, num) =&gt; subtotal / num,
  ];
  // Remove first value so operation can start with + with first and second value:
  const initialValue = numbersArr.shift();
  return numbersArr.reduce((subtotal, num, i) =&gt; fns[i % 4](subtotal, num), initialValue);
}
console.log(doMath([1, 2, 4, 5])); // ((1 + 2) - 4) * 5</code></pre>
</div>
</div>


<p>Put it all together:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';

console.log(doMath("10a 90x 14b 78u 45a 7b 34y"));

function separateWord(word) {
  let char;
  const num = Number(
    word.replace(
      /[a-z]/i,
      match =&gt; {
        char = match;
        return ''; // replace this match with the empty string
      }
    )
  );
  return { char, num };
}
function getOrderedNumbers(numbersByChar) {
  return Object.entries(numbersByChar)
    .sort((a, b) =&gt; (a[0] &gt; b[0]) - 0.5) // Order entries alphabetically
    .map(entry =&gt; entry[1]) // Take only the value of each entry
    .flat(); // Turn the array of arrays of numbers into a single array of numbers
}
// Entry point:
function doMath(inputStr) {
  const numbersByChar = {};
  for (const word of inputStr.split(' ')) {
    const { char, num } = separateWord(word);
    if (!numbersByChar[char]) {
      numbersByChar[char] = [];
    }
    numbersByChar[char].push(num);
  }
  const numbersArr = getOrderedNumbers(numbersByChar);
  return getTotal(numbersArr);
}

function getTotal(numbersArr) {
  const fns = [
    (subtotal, num) =&gt; subtotal + num,
    (subtotal, num) =&gt; subtotal - num,
    (subtotal, num) =&gt; subtotal * num,
    (subtotal, num) =&gt; subtotal / num,
  ];
  // Remove first value so operation can start with + with first and second value:
  let subtotal = numbersArr.shift();
  numbersArr.forEach((num, i) =&gt; {
    subtotal = fns[i % 4](subtotal, num);
  });
  return Math.round(subtotal);
}</code></pre>
</div>
</div>


<p>Unfortunately, the latest JS version that Codewars supports is Node 8, which is old, <a href="https://blog.risingstack.com/update-nodejs-8-end-of-life-no-support/" rel="nofollow noreferrer">end-of-life</a>, and probably shouldn't be used - it doesn't support <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" rel="nofollow noreferrer"><code>Array.prototype.flat</code></a>. An alternative to achieve the same functionality is to spread into <code>concat</code> instead:</p>

<pre><code>arr.flat()
</code></pre>

<p>can be replaced by</p>

<pre><code>[].concat(...arr);
</code></pre>
    </div>