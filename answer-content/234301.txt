<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Space</h2>

<pre><code>class Space():

    def __init__(self):
        self.color = WHITE
        self.height = 40
        self.width = 40
        self.x = 5
        self.y = 5
    def Draw(self, screen):
        pygame.draw.ellipse(screen, self.color, [self.x, self.y, 40, 40])
</code></pre>

<p>According to PEP-8, methods should use <code>snake_case</code>.  <code>MixedCase</code> is reserved for class names.  So <code>Draw</code> should be <code>draw</code>.  Also, there should be a blank line before <code>def draw(...)</code>.</p>

<p>The members <code>height</code> and <code>width</code> are never used.  The members <code>x</code> and <code>y</code> are only used inside of the <code>Space</code> class (although they are changed externally shortly after creating the <code>Space</code> object.  Perhaps these should be passed in as arguments to the constructor.  Also, these should be named with a leading underscore to convey they are non-public members.</p>

<p>Perhaps better, instead of constructing the list <code>[self._x, self._y, self._width, self._height]</code> every time you draw the space object, you could store a list with this information:</p>

<pre><code>class Space():

    def __init__(self, x, y):
        self.color = WHITE
        self._rect = [x, y, 40, 40]

    def draw(self, screen):
        pygame.draw.ellipse(screen, self.color, self._rect)
</code></pre>

<h2>Spaces</h2>

<p>Utilizing the new constructor:</p>

<pre><code>x_list = [5, 50, 95, 140, 185, 230, 275]
y_list = [5, 50, 95, 140, 185, 230]

spaces_list = []
x_counter = 0
y_counter = 0

for i in range(42):
    slot = Space(x_list[x_counter], y_list[y_counter]

    spaces_list.append(slot)

    x_counter += 1
    if x_counter == 7:
        y_counter += 1
        x_counter = 0
</code></pre>

<p>This construction technique is very verbose.  More over, you've got magic numbers scattered around (<code>42</code>, <code>7</code>), which makes the code hard to understand.  Where did these numbers come from?  What do they mean?</p>

<p>You could help by declaring named constants <code>COLUMNS = 7</code> and <code>TOTAL_SPACES = 42</code>, and then using these symbol names, but that is missing the point.  You've got an <code>x_list</code> with 7 entries, so <code>COLUMNS = len(x_list)</code> makes it so that if you add an extra column to <code>x_list</code>, the <code>COLUMNS</code> value will be automatically computed.  Same for <code>TOTAL_SPACES</code>, it would be the product of the lengths of <code>x_list</code> and <code>y_list</code>.</p>

<p>But storing each <code>Space</code> object in a 42 element 1-dimensional list is just plain wrong.  You've got a 2-d grid of spaces.  You should store it as a 2-d structure.  A list of lists:</p>

<pre><code>spaces_grid = [ [...], [...], [...], [...], [...], [...], [...] ]
</code></pre>

<p>You could then access the spaces like <code>spaces_grid[x][y]</code>, with <span class="math-container">\$0 \le x \le 6\$</span> and <span class="math-container">\$0 \le y \le 5\$</span>.</p>

<p>The list comprehension expression <code>[Space(x, y) for y in y_list]</code> will create a list representing one column of that grid, using a particular fixed value of <code>x</code>, taking each <code>y</code> value from successive elements of <code>y_list</code>, and calling the <code>Space(x, y)</code> constructor for those values.  We then need to then repeat that for each value of <code>x</code> in <code>x_list</code>:</p>

<pre><code>spaces_grid = [ [Space(x, y) for y in y_list] for x in x_list]
</code></pre>

<p>And done in one line.</p>

<h2>Click on Column</h2>

<pre><code>        (posx,posy) = pygame.mouse.get_pos()
        if posx &gt; 5 and posx &lt; 45:
            ... 42 lines omitted ...
        if posx &gt; 50 and posx &lt; 90:
            ... 42 lines omitted ...
        if posx &gt; 95 and posx &lt; 135:
            ... 42 lines omitted ...
        if posx &gt; 140 and posx &lt; 180:
            ... 42 lines omitted ...
        if posx &gt; 185 and posx &lt; 225:
            ... 42 lines omitted ...
        if posx &gt; 230 and posx &lt; 270:
            ... 42 lines omitted ...
        if posx &gt; 275:
            ... 42 lines omitted ...
</code></pre>

<p>Magic numbers galore!  How much pain would it be to change the disc size from 40 pixels to 55 pixels?</p>

<p>When the user click the mouse button, you get an <code>(posx, posy)</code> coordinate.  You need to convert that <code>posx</code> value to a column index.  The <code>bisect</code> module can help.  It will search in a list of value for the position to insert another value at.  We're not inserting here, but using it would allow us to quickly determine the column based on the <code>posx</code> and the <code>x_list</code>.</p>

<pre><code>column_num = bisect.bisect(x_list, posx) - 1
</code></pre>

<p>You could then validate that you haven't clicked between columns:</p>

<pre><code>if column_num &gt;= 0 and posx &lt; x_list[column_num] + 40:
    column = spaces_grid[column_num]
</code></pre>

<p>Apologies for the magic number <code>40</code>.  Turn this into a named constant too.</p>

<p>Now you can work with <code>column</code> and determine how far down the <code>column</code> the coloured disc should fall.</p>

<pre><code>            if spaces_list[35].color == WHITE:
                if turn == 0:
                    spaces_list[35].color = RED
                    turn = 1
                elif turn == 1:
                    spaces_list[35].color = YELLOW
                    turn = 0
            elif spaces_list[28].color == WHITE:
                if turn == 0:
                    spaces_list[28].color = RED
                    turn = 1
                elif turn == 1:
                    spaces_list[28].color = YELLOW
                    turn = 0
            elif spaces_list[21].color == WHITE:
                if turn == 0:
                    spaces_list[21].color = RED
                    turn = 1
                elif turn == 1:
                    spaces_list[21].color = YELLOW
                    turn = 0
            elif spaces_list[14].color == WHITE:
                if turn == 0:
                    spaces_list[14].color = RED
                    turn = 1
                elif turn == 1:
                    spaces_list[14].color = YELLOW
                    turn = 0
            elif spaces_list[7].color == WHITE:
                if turn == 0:
                    spaces_list[7].color = RED
                    turn = 1
                elif turn == 1:
                    spaces_list[7].color = YELLOW
                    turn = 0
            elif spaces_list[0].color == WHITE:
                if turn == 0:
                    spaces_list[0].color = RED
                    turn = 1
                elif turn == 1:
                    spaces_list[0].color = YELLOW
                    turn = 0
</code></pre>

<p>Yeouch!  This is just one copy of the 7 blocks of "... 42 lines omitted ..." above.</p>

<p>With the <code>column</code> list computed above, you could change this code to read:</p>

<pre><code>    if column[5].color == WHITE:
        if turn == 0:
            column[5].color = RED
            turn = 1
        elif turn == 1:
            column[5].color = YELLOW
            turn = 0
    elif column[4].color == WHITE:
        if turn == 0:
            column[4].color = RED
            turn = 1
        elif turn == 1:
            column[4].color = YELLOW
            turn = 0
    elif column[3].color == WHITE:
        if turn == 0:
            column[3].color = RED
            turn = 1
        elif turn == 1:
            column[3].color = YELLOW
            turn = 0
    elif column[2].color == WHITE:
        if turn == 0:
            column[2].color = RED
            turn = 1
        elif turn == 1:
            column[2].color = YELLOW
            turn = 0
    elif column[1].color == WHITE:
        if turn == 0:
            column[1].color = RED
            turn = 1
        elif turn == 1:
            column[1].color = YELLOW
            turn = 0
    elif column[0].color == WHITE:
        if turn == 0:
            column[0].color = RED
            turn = 1
        elif turn == 1:
            column[0].color = YELLOW
            turn = 0
</code></pre>

<p>And delete the other 6 copies of the block.  This is a huge improvement, but it is clear we can do better.  We are doing exactly the same operation on the <code>Space</code> objects starting at <code>column[5]</code> and going down to <code>column[0]</code>.  This screams loop!</p>

<pre><code>    for space in column[::-1]:
        if space.color == WHITE:
            space.color = RED if turn == 0 else YELLOW
            turn = 1 - turn
            break
</code></pre>

<p>Breaking this down:</p>

<ul>
<li><code>column[::-1]</code> reverses the list of <code>Space</code> objects, so <code>column[5]</code> is returned first, and <code>column[0]</code> is returned last</li>
<li>When we find a <code>space</code> with <code>space.color == WHITE</code>, we do some stuff, and then <code>break</code> out of the <code>for</code> loop.</li>
<li>A ternary <code>... if ... else ...</code> is used to assign <code>RED</code> or <code>YELLOW</code> to the space, based on whether <code>turn == 0</code> is true or not.</li>
<li><code>turn = 1 - turn</code> will flip <code>turn</code> back and forth between <code>1</code> and <code>0</code>.</li>
</ul>

<p>42 lines reduced down to 6.</p>

<h2>Draw the grid</h2>

<p>What the code used to look like:</p>

<pre><code>    counter = 0

    for items in spaces_list:
        spaces_list[counter].Draw(screen)
        counter += 1
</code></pre>

<p>This was odd, since you were looping over all of the items in <code>spaces_list</code>, and then ignoring the <code>Space</code> that was stored in <code>items</code> on each iteration.  Instead, you added a counter, which you manually incremented, and then looked up the element at <code>spaces_list[counter]</code>, which would be the same items that was already stored in <code>items</code>.  You could have simply called <code>items.Draw(screen)</code>.</p>

<p>We no longer have <code>spaces_list</code>.  Instead, we have <code>spaces_grid</code>, which is a 2d grid of <code>Space</code> objects.  We'll draw this by looping over the columns in the grid, and then loop over the space in each column, and draw that space directly.</p>

<pre><code>    for column in spaces_grid:
        for space in column:
            space.draw(screen)
</code></pre>

<h2>Miscellaneous</h2>

<ul>
<li>You import <code>random</code> but never use it.</li>
<li>You should separate imports from code with a blank line.</li>
<li>You shouldn't split the mainline code up with some code before classes are declared, and some code after it.</li>
<li>I'm not sure what module <code>colors</code> is.  I don't have it, and needed to get the color constants a different way.</li>
</ul>

<h2>Reworked Code</h2>

<p>Here is my reworked code.  It is a wee bit shorter than your original implementation: </p>

<pre><code>import pygame, bisect

class Space():

    def __init__(self, x, y):
        self.color = WHITE
        self._rect = [x, y, 40, 40]

    def draw(self, screen):
        pygame.draw.ellipse(screen, self.color, self._rect)

pygame.init()

YELLOW = pygame.color.THECOLORS['yellow']
WHITE = pygame.color.THECOLORS['white']
BLUE = pygame.color.THECOLORS['blue']
RED = pygame.color.THECOLORS['red']

size = (320, 280)
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Connect 4 but Worse")
done = False
clock = pygame.time.Clock()

turn = 0

x_list = [5, 50, 95, 140, 185, 230, 275]
y_list = [5, 50, 95, 140, 185, 230]

spaces_grid = [ [Space(x, y) for y in y_list] for x in x_list]

while not done:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        if event.type == pygame.MOUSEBUTTONDOWN:
            (posx,posy) = pygame.mouse.get_pos()
            column_num = bisect.bisect(x_list, posx) - 1

            if column_num &gt;= 0 and posx &lt; x_list[column_num] + 40:
                column = spaces_grid[column_num]

                for space in column[::-1]:
                    if space.color == WHITE:
                        space.color = RED if turn == 0 else YELLOW
                        turn = 1 - turn
                        break

    screen.fill(BLUE)

    for column in spaces_grid:
        for space in column:
            space.draw(screen)

    pygame.display.flip()

    clock.tick(60)

pygame.quit()
</code></pre>

<p>There is still much work that should be done on it.  For instance, I don't think the <code>x_list</code> and <code>y_list</code> is the best way to determine positions.  I would rework things along these lines:</p>

<pre><code>DISC_SIZE = 40
GAP = 5
COLUMNS = 7
ROWS = 6

size = (GAP + (DISC_SIZE + GAP) * COLUMNS, GAP + (DISC_SIZE + GAP) * ROWS)
</code></pre>

<p>And then the <code>(x, y)</code> coordinates for each <code>Space</code> could be computed from a row and column number.  Bigger/smaller discs?  No problem! Larger gap?  No problem!  Different grid size?  No problem!  Just adjust these 4 numbers and your game grid is completely resized.</p>

<h2>Winning</h2>

<p>You eventually will need a 4-in-a-row check.  Let me get you started.  If <code>player</code> holds the current player's colour, then:</p>

<pre><code>a_horizontal_win = all(spaces_grid[x+i][y] == player for i in range(4))
</code></pre>

<p>will test if the spaces starting at <code>(x,y)</code>, passing through <code>(x+1,y)</code>, <code>(x+2,y)</code>, and ending at <code>(x+3,y)</code> all contain the that player's colour.  You just need to move the starting <code>(x,y)</code> location around to all the legal starting points, and do something similar for vertical, and the two diagonals.</p>
    </div>