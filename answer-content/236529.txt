<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Document your code. <a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="noreferrer">In the code.</a></p>

<p>Code the way <strong>you</strong> think about the problem - which may very well be as presented in the question.<br>
Leave a code comment where you have unresolved concerns (like<br>
<em>there should be a better way to code this, because a == b features in two conditions of a single elif chain</em>).</p>

<pre><code>def solitary_numbers_product(a, b, c):
    """ return the product of the numbers specified,
        ignoring numbers occurring more than once.
    """
    if a == b:
        return 1 if b == c else c
    if a == c:
        return b
    if b == c:
        return a

    return a * b * c


solve = solitary_numbers_product
# finger exercise in functional coding
# PEP 8 puts imports at module top
from collections import Counter
from functools import reduce


def unique_numbers_product(*numbers):
    """ return the product of the numbers specified,
        ignoring numbers occurring more than once.
    """
    counts = Counter(numbers)
    return reduce(lambda product, factor: product * factor,
                  filter(lambda n: counts[n] == 1, counts), 1)


if __name__ == '__main__':
    # ToDo: develop a decent test
    numbers = tuple(ord(c) - ord('0') for c in '2353332')
    for offset in range(5):
        triple = numbers[offset:offset + 3]
        print(solve(*triple))
        print(unique_numbers_product(*triple))
</code></pre>
    </div>