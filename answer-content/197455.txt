<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Being inspired by <a href="https://xkcd.com/2012/" rel="nofollow noreferrer">recent xkcd comic</a> I will review this particular piece of code:</p>

<pre><code>res := strings.Split(r.URL.Path, "/")
path, err := strconv.Atoi(res[1])
</code></pre>

<p>As far as I understand it converts path string <code>"/123"</code> to int <code>123</code>.</p>

<p>I see several issues here:</p>

<ul>
<li>this code creates unnecessary (and possibly large) slice,</li>
<li>assumes that <code>res[1]</code> is always there,</li>
<li>parses negative numbers,</li>
<li>and allows input <code>/123/whatever/goes/here/</code>.</li>
</ul>

<h3>Split</h3>

<p>Use <a href="https://golang.org/pkg/strings/#SplitN" rel="nofollow noreferrer">strings.SplitN</a> when you know how many parts of the slice you need. On <code>/a/b/c/d/</code> input <code>strings.Split</code> will create slice with six items, but you need only <code>res[1]</code>.</p>

<h3>..</h3>

<p><a href="https://golang.org/pkg/net/url/#URL" rel="nofollow noreferrer">url.URL documentation</a> states, that relative paths may omit leading slash. So on <code>..</code> or <code>.</code> input access to <code>res[1]</code> will trigger panic with "runtime error: index out of range" message.</p>

<p>Malicious HTTP request may contain lots of crap similar <code>../..</code> so is crucial to validate this.</p>

<p>I suggest you to check that the path begins with a slash or test the length of <code>res</code>.</p>

<h3>stronv.ParseUint</h3>

<p><code>strconv.Atoi</code> allows negative numbers. You can use <code>strconv.ParseUint</code> instead.</p>

<hr>

<p>Path from HTTP request is same thing as any other form of <strong>user input</strong>. Proper handling of it is full of gotchas.</p>

<p>I suggest you to check that path begins with a slash and use <a href="https://golang.org/pkg/strings/#TrimSuffix" rel="nofollow noreferrer">strings.TrimSuffix</a> to remove one possible trailing slash:</p>

<pre><code>// Check that r.URL.Path begins with "/",
if (r.URL.Path[0] == "/") {
    // skip leading slash and trim one(!) possible trailing shash.
    num := strings.TrimSuffix(r.URL.Path[1:], "/")
    // Try to parse non negative number,
    tmp, err := strconv.ParseUint(num, 10, 32)
    if err != nil {
        // and return 404 if there is no one.
    }
    // Convert uint to int.
    index := int(tmp)

    // function body continues...
}
</code></pre>
    </div>