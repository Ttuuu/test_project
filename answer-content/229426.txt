<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review! On my first scan through the code I was impressed. I learned a new C++ STL library function, std::transform(). I was really glad to see that there was no <code>using namespace std;</code> statement in the code. Keep up the good work!</p>

<p>Upon executing the program I found one problem:</p>

<p>It might be better to change the prompt at the end of the game to</p>

<pre><code>    } while (tolower(getCharInput("Play again? (y)es/no ")) == 'y');
</code></pre>

<p>or accept <code>yes</code> as well as <code>y</code>. I entered <code>yes</code> and the game quit.</p>

<p><strong>Complexity</strong><br>
While he function <code>main()</code> already calls 2 functions, it is still too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">Single Responsibility Principle</a> that applies here. The Single Responsibility Principle states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>One of the ideas behind this principle is that the smaller a function is, the easier it is to write, debug, read and maintain.</p>

<p>The outer <code>do while</code> loop could be a function. The inner <code>while</code> loop should be a function. The inner while loop could also add a couple of functions where the comments <code>Replace 'X' with matching character.</code> and <code>// Check if guessed character had any matches in word.</code> are.</p>

<p>In the outer loop I would have created a variable <code>word</code> to simplify the code in the inner loop.</p>

<pre><code>        std::string word = words[rn];
</code></pre>

<p><strong>Use of C Style Arrays</strong><br>
There are 2 <code>C style arrays</code> in use, <code>words</code> and <code>gallows</code>. It might be better if these were implemented using a C++ container class such as <code>std::vector</code> or <code>std::array</code>. My choice would be <code>std::vector</code>, at least for <code>words</code> because that would allow the replacement of the symbolic constant <code>numWords</code> with <code>words.size()</code>. Implementing <code>words</code> as a vector also allows additional words to be added to the game easily. If you stick with the current implementation <code>numWords</code> should be declared as <code>std::size_t</code> rather than unsigned, std::size_t is the preferred variable type for array indexes.</p>

<p>The declaration of these 2 arrays should be outside the <code>do while</code> loop because these arrays never change within the scope of the loop. A second reason to move them out of the loop, at least for <code>words</code> is that at some point in the future the contents of <code>words</code> might come from a text file which you would only want to read once.</p>

<p><strong>Declaration of Symbolic Constants</strong><br>
This is a personal style comment. I would define all the symbolic constants outside of any function so that they could be used by all functions, to limit the scope they might be defined as <code>static</code>.</p>

<pre><code>static constexpr std::size_t numWords{ 15 };
static constexpr std::size_t TOP{ 8 };
static constexpr std::size_t BASE{ 9 };
</code></pre>

<p>It is considered a good programming practice to define each constant or variable on it's own line to make maintenance and readability easier. It becomes difficult to find declarations defined on one line in large programs.</p>

<p><strong>Variable Names</strong><br>
In the game while loop:
  - <code>guess</code> might be a better choice than <code>g</code>, single character variable names are not very descriptive.<br>
  - <code>rn</code> can only be determined by reading all the code, I'm guessing it means <code>random number</code>.  </p>

<p>In the function <code>bool checkLetter(std::vector&lt;char&gt;&amp; ltrs, const char c, const std::string response)</code> it might be easier to understand <code>guessedLetters</code> than <code>ltrs</code>.</p>
    </div>