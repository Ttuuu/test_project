<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Inside of a function call, avoid echoing.  By hardcoding echoes, you prevent the "silent" usage of the function.  It may be necessary in the future to present the output in more than one format, so use a <code>return</code> inside the function declaration and perform the echo on the function call.</p>

<p>Pay close attention to <a href="https://www.php-fig.org/psr/psr-2/#5-control-structures" rel="nofollow noreferrer">psr-2's guidelines on control structures</a>.  They will help you (and future developers of your code) to read your code.  Always imagine that the next person to read your code will have a headache, a hatchet, and your home address; don't set them off.</p>

<p>Empty on <code>$_POST</code> is an imprecise way of checking for expected submission data.  </p>

<p><code>strcmp()</code> provides <a href="https://stackoverflow.com/a/3333369/2943403">greater specificity than your condition logic requires</a>.   For your logic, just check if the input is identical to the string without a function call.</p>

<p>Condense conditionals within the same block that have the same outcome.  Multiple conditions lead to <code>$passed = 1</code> so they can be consolidated. I didn't really bother to understand the conditional logic behind <code>$passed = 1</code> but it should certainly be refined.</p>

<p>Refine your validation check on <code>$_POST['pc']</code>.  You are checking if <code>is_numeric()</code>, that's fine. Then checking if the value that is cast as <code>(int)</code> is an integer -- um, at this point of course it is, it has no choice.  Better yet, why not just make a single check with <code>ctype_digit()</code>?  You might also like to check that the <code>strlen()</code> is valid (only you will know if/how to design this for your region).  If you want to check the quality and length of the postcode value, perhaps it would be more sensible to use <code>preg_match()</code> where you can design robust/flexible validation with a single function call (again, only you can determine this).</p>

<p><code>$temp_l</code> and <code>$temp_p</code> are poor variable naming choices.  As a new dev to your script, I don't instantly know what they contains (I can venture a guess, but don't ask devs to do this).  Try to practice a more literal naming convention.  Furthermore, try to avoid declaring single-use variables (<code>$temp_l</code>).  Often, fewer variables will lead to fewer typos/mistakes, concise code, and improved readability.  When data needs some explaining, use commenting. *notes: 1. I have read some cases where declaring a variable prior to a foreach loop can improve performance 2. Some devs don't like to see functions fed to a foreach loop, I can respect this and I don't typically do this in my own projects.</p>

<p>There is no use in checking if the return value from <code>explode()</code> is an array.  It returns an array by design, so you can remove that check.  Even if you explode a empty string with <code>PHP_EOL</code>, you will not get a <code>true</code> evaluation from <code>empty()</code>, so that check is pointless to write.  At the end of the day, if you try to use <code>foreach()</code> on an empty array, it simply won't iterate -- no worries.</p>

<p>If you have no intentions of using <code>$i</code> in your foreach loop, don't bother to declare it.  I don't like single-use variables; I super don't like no-use variables.</p>

<p>How to get the substring before the first occurrence of a character without <code>explode()</code>? <code>strstr()</code> with a <code>true</code> third parameter.  Otherwise, explode has to create an array enroute to delivering the string that you need.  My suggested snippet will attempt to extract the substring before the first colon, if there is no colon the full string will be used.</p>

<p>By storing qualifying matches as an array, you can avoid having to trim any trailing delimiters from your output string.  In fact, return the data without delimiters as an array so that you can easily adjust the way that your qualifying values are delimited.</p>

<p>Strictly speaking, having zero qualifying results from a postcode search doesn't mean that there was an "Error", so just have your function calling script accommodate for "Successful" yet "Empty" results.</p>

<p>I can't imagine a benefit from <code>JSON_FORCE_OBJECT</code>.</p>

<p><code>die()</code> in nearly every scenario should be avoided.</p>

<p>Suggested Code Overhaul:</p>

<pre><code>function sapc_ajax_check() {
    $checker_defaults = get_option('sapc_checker_settings_options');

    if (!isset($_POST['action']) ||  $_POST['action'] !== 'sapc_ajax_check') {
        $errors[] = 'Missing required submission data';
    }
    if (!isset($_POST['pc'])) {
        $errors[] = 'Missing postcode value';
    }
    if (isset($_POST['verify-int']) &amp;&amp; $_POST['verify-int'] === 'on' &amp;&amp; ctype_digit($_POST['pc'])) {
        $errors[] = 'Invalid postcode value';
    }
    if (isset($errors)) {
        return json_encode(['Error', $errors]);
    }

    $result = [];
    foreach (explode(PHP_EOL, $checker_defaults['postcodes']) as $postcode) {
        $before_colon = strstr($postcode, ':', true);
        $postcode = ($before_colon === false ? $postcode : $before_colon);
        if ($postcode === $_POST['pc'])) {
            $result[] = $postcode;
        }
    }
    return json_encode(['Success', $result]); 
}
</code></pre>

<p><strong>Much cleaner right?</strong></p>
    </div>