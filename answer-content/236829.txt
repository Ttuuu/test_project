<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>CustomArrayList</code> API is inconsistent because I can declare a list of type <code>E</code> to add elements of type <code>E</code>, but when I remove an element from it, I get an <code>Object</code> element:</p>

<blockquote>
<pre><code>public Object remove(int index) { /* ... */ }
</code></pre>
</blockquote>

<hr>

<p>Inside <code>CustomArrayList</code> you work with <code>Object[] elementData</code>. From the book <em>Effective Java; Item 26</em> you could change your code to:</p>

<pre><code>class CustomArrayList&lt;E&gt; {

  private E[] elementData;
  /* ... */

  public CustomArrayList() {
    elementData = (E[]) new Object[INITIAL_CAPACITY];
  }

  /* ... */

}
</code></pre>

<hr>

<p>Inside <code>remove</code> you modify <code>elementData</code> in an imperative way. You could use <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#arraycopy(java.lang.Object,%20int,%20java.lang.Object,%20int,%20int)" rel="noreferrer"><code>System.arraycopy</code></a> which would be more deklarative.</p>

<blockquote>
<pre><code>public Object remove(int index) {
 /* ... */
 Object removedElement = elementData[index];
 for (int i = index; i &lt; size - 1; i++) {
   elementData[i] = elementData[i + 1];
 }
 /* ... */
}
</code></pre>
</blockquote>

<pre><code>public E remove(int index) {
  /* ... */

  if (size - 1 - index &gt;= 0)
    System.arraycopy(elementData, index + 1, elementData, index, size - 1 - index);

  /* ... */
}
</code></pre>

<hr>

<p>The methods <code>get</code> and <code>remove</code> contain a code duplication:</p>

<blockquote>
<pre><code>public E get(int index) {
 if (index &lt; 0 || index &gt;= size) {
   throw new IndexOutOfBoundsException("Index: " + index + ", Size " + index);
  }
 return (E) elementData[index];
}

public Object remove(int index) {
 if (index &lt; 0 || index &gt;= size) {
   throw new IndexOutOfBoundsException("Index: " + index + ", Size " + index);
 }

 Object removedElement = elementData[index];

 /* ... */

 return removedElement;
}
</code></pre>
</blockquote>

<p>It is possible to invoke <code>get</code> inside <code>remove</code> like:</p>

<pre><code>public E remove(int index) {
  E elementToRemove = get(index);

  if (size - 1 - index &gt;= 0)
    System.arraycopy(elementData, index + 1, elementData, index, size - 1 - index);

  size--;

  return elementToRemove;
}
</code></pre>
    </div>