<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks pretty good.  My comments are trivial nitpicking.</p>

<ul>
<li><p>The constructor of <code>struct in_place_t</code> gains nothing from <code>explicit</code> (it can't be considered as a conversion if it has no arguments).  Whilst <code>explicit</code> prevents users writing <code>in_place_t x = {}</code>, I certainly think that's a reasonable thing to want to do, and won't cause any <em>surprising</em> conversions.</p></li>
<li><p>The comment <code>// [optional.comp.with.t], comparison with T</code> probably should read "comparison with value" or similar, given that the other argument is a <code>const U&amp;</code>.</p></li>
<li><p><del>It shouldn't be necessary to provide <code>my_std::swap()</code>: providing member swap should be sufficient to allow <code>std::swap()</code> to work.</del></p></li>
<li><p>Instead of writing out the return type again in <code>make_optional</code>, we can simply use a brace-expression: <code>return {std::forward&lt;T&gt;(v)};</code>.  Sadly this won't work for the <code>in_place</code> overloads as that uses an <code>explicit</code> constructor.</p></li>
<li><p>I'm not a fan of <code>else return false</code> in this:</p>

<blockquote>
<pre><code>    if (x)
        return *x == v;
    else
        return false;
</code></pre>
</blockquote>

<p>I'd probably rewrite as <code>return x &amp;&amp; *x == v;</code>; similarly for all these related comparisons.</p></li>
<li><p>I don't think there's a need for <code>static_cast&lt;bool&gt;</code> in the optional/optional comparisons, since the the arguments of logical operators are <a href="//stackoverflow.com/a/39995574/4850040">contextually converted to <code>bool</code></a>.</p></li>
</ul>
    </div>