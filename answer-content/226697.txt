<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My initial remark is the same as I read in the comments from Rick Davin. <code>Up</code> and <code>Down</code> are equivalents of <code>Left</code> and <code>Right</code> in the other dimension. <code>Top</code> and <code>Bottom</code> are boundaries.</p>

<pre><code>enum Direction
{
    Up,
    Right,
    Down,
    Left
}
</code></pre>

<p>It's a lot of code to review. I'll write down some remarks I notice when reading through the code.</p>

<ul>
<li>interface <code>IMainUserInterface</code> only provides one method, to start a game. Seems more like a bootstrapper interface <code>IGameBootstrap</code>. It should also store an instance to the game and perhaps has a way to terminate it (if early termination would even be possible).</li>
<li>Your game logic and user interaction logic are mixed throughout all classes and flow. Separating them is not a trivial task, but would allow for more reusable, maintainable and testable code. As an additional challenge, next time, try to write your code with <strong>Separation of Concerns</strong> in mind.</li>
<li>Method <code>IsWon</code> has a strange name. I would call it <code>HasWon</code> to address it from the player's perspective. Also, can a game only end when won? Should you have a <code>IsCompleted</code> property on the <code>Game</code>?</li>
<li>class <code>Point</code> inherits <code>Color</code>. This makes no sense to me. At best, I would have <code>Point</code> use an instance of <code>Color</code>. Favour <strong>Composition</strong> over <strong>Inheritance</strong>, specially when the base class is something the derived class <em>uses</em> rather than <em>is</em>.</li>
<li>Method <code>DisplayWalls</code> suggests you could use a class <code>Wall</code>. I think a cell could have an 'occupant', like a wall.</li>
</ul>
    </div>