<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To answer the question from the <a href="https://codereview.stackexchange.com/questions/229557/build-a-flat-list-from-a-tree-structure-in-java/229627#comment446796_229627">comment</a> on RoToRa's answer:</p>

<blockquote>
  <p>Thanks! I wonder if there is any way to do this by using, for example, just the Java 8 Stream API or something similar, to have it in just one line of code.</p>
</blockquote>

<h2>Using the Java Stream API</h2>

<p>Assuming the following <code>Entry</code> class:</p>

<pre><code>public class Entry {
   final String key;
   final List&lt;Entry&gt; entries = new ArrayList&lt;&gt;();

   Entry(String _key, Entry ...children) {
      key = _key;
      entries.addAll(Arrays.asList(children));
   }

   public List&lt;Entry&gt; getEntries() {
      return Collections.unmodifiableList(entries);
   }

   public String toString() {
      return key;
   }
}
</code></pre>

<p>We can build up the example input with:</p>

<pre><code>List&lt;Entry&gt; top = new ArrayList&lt;&gt;();
top.add(new Entry("level1.1"));
top.add(new Entry("level1.2", new Entry("level2.1")));
top.add(new Entry("level1.3", new Entry("level2.2"), new Entry("level2.3", new Entry("level3.1"))));
</code></pre>

<p>From @RoToRa's answer, we'll borrow these method signatures:</p>

<pre><code>public static List&lt;Entry&gt; flatTree(List&lt;Entry&gt; toFlat) {
   return flatTree(toFlat, ArrayList::new);
}

public static List&lt;Entry&gt; flatTree(List&lt;Entry&gt; toFlat, Supplier&lt;List&lt;Entry&gt;&gt; listSupplier) {
</code></pre>

<p>Now, to flatten with the Stream API, (the <strong>requested "one line of code"</strong>), we'd want to write something like:</p>

<pre><code>   return toFlat.stream().flatMap(Entry::leaves)
                         .collect(Collectors.toCollection(listSupplier));
}
</code></pre>

<p>So, we'll need to define <code>Entry::leaves</code> to extract only the leaves from our tree:</p>

<pre><code>public static Stream&lt;Entry&gt; leaves(Entry entry) {
   if (entry.getEntries().size() &gt; 0)
      return entry.getEntries().stream().flatMap(Entry::leaves);
   else
      return Stream.of(entry);
}
</code></pre>

<p>And on the sample data:</p>

<pre><code>jshell&gt; System.out.println(Entry.flatTree(top));
[level1.1, level2.1, level2.2, level3.1]

jshell&gt;
</code></pre>
    </div>