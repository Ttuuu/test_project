<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) Single Responsibility Principle is very important but checkout other principles too: <a href="https://robots.thoughtbot.com/back-to-basics-solid" rel="nofollow noreferrer">SOLID</a></p>

<p>2) Not a fan of concerns, so wouldn't recommend them. There are very good posts about their downsides (just Google it).</p>

<p>3) Design patterns are useful. However, I wouldn't recommend starting with them. If you have duplications in your controllers/models (or high complexity), then you can think about implementing them. Check out <a href="https://codeclimate.com/blog/7-ways-to-decompose-fat-activerecord-models/" rel="nofollow noreferrer">7 Patterns to Refactor Fat ActiveRecord Models</a>' Form Objects section.</p>

<p>4) If most part of your application requires signing-in, move <code>require_login</code> before hook to <code>ApplicationController</code> and skip it when necessary.</p>

<p>5) Most importantly, make your controllers <a href="http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions" rel="nofollow noreferrer">CRUD</a>. Example:</p>

<pre><code>class AnswersController &lt; ApplicationController
  def create
    # Keep track of score and questions already asked
    if params[:answer] == params[:orig]
      right_answer
    else
      wrong_answer
    end

    redirect_to quiz_path
  end
end
</code></pre>
    </div>