<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As an industry professional, here's what immediately comes to my mind:</p>

<ul>
<li><code>class SudokuSolver</code>: package private class? Why?</li>
<li>inconsistent spacing (two spaces before the <code>int[][] solveSudoku</code>, sometimes spaces before opening braces, sometimes not, ... - yes, we notice these details!)</li>
<li>Comments repeating the code.</li>
<li>Use of <code>Stack</code> class (see opening comment in API-doc, e.g. <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Stack.html" rel="noreferrer">https://docs.oracle.com/javase/10/docs/api/java/util/Stack.html</a>)</li>
<li><code>Integer[]</code> to represent a set of coordinates. Ususally, if you have a business concept behind a given set of variables, it is worth to create a class which has a correct name for that, so that every reader can immediately grasp the concept. Better: create a <code>Coordinates</code> class (or <code>Point</code> or whatever)</li>
<li><code>int EMPTY_CELL = 0</code> if this is a variable, this should be named <code>emptyCell</code>. As a constant, it should be <code>static final</code> in the class, and probably <code>public</code> as well, so that the user can utilize the constant to create the input.</li>
<li>I like the explanatory comment for the algorithm combined with the simple commentens <code>// 1</code>, <code>// 2</code> etc. - makes it very clear to me.</li>
<li>Use of recursion: even if the problem is small, (i.e. you'll have a maximum recursion depth of 81 - n where n is the number of initially filled fields) the technique of recursion itself is mostly a red light, as it tends to be uncontrollable very fast. So (in my book): either unroll the recursion to replace it with an iterative solution, or at least add a comment that you thought this out and why there is no risk in doing it recursively. (Note that this is not true in pure functional languages ;-))</li>
<li>Unit test based on random generation: NO. There is no guarantee that after a given software change the random test will actually catch a new bug. (E.g. maybe you "accidentally" generate a sudoku which is solvable by only looking at rows and columns, and never even uses the box-check.)</li>
</ul>

<p>Hope that helps. (And BTW: with this code, you'd get my consent to start in the company as a junior software engineer :-))</p>
    </div>