<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just reviewing generator.py.</p>

<h3>1. Review</h3>

<ol>
<li><p>There are no docstrings. What do these functions do? What arguments do they take? What do they return?</p></li>
<li><p>"verticies" is a typo for "vertices".</p></li>
<li><p>There's repetitive code for printing progress messages and measuring the time taken. I would avoid this repetition using a context manager, like this:</p>

<pre><code>from contextlib import contextmanager

@contextmanager
def timer(message):
    "Context manager that reports the time taken by a block of code."
    print("[*]", message)
    start = time.time()
    yield
    print("[#] finished in {:.3f} seconds".format(time.time() - start))
</code></pre>

<p>and then in <code>create</code> you can write:</p>

<pre><code>with timer("creating {}".format(filename)):
    print("size =", size_real, "x", size_real)
    with timer("generating graph"):
        graph = generate_graph(size)
    with timer("generating maze"):
        path = generate_maze(graph)
    with timer("generating image"):
        generate_image(filename, size_real, path)
</code></pre>

<p>This keeps the timing code out of the individual functions, making them shorter, simpler, and easier to test.</p></li>
<li><p>The graph data structure is complicated, and the only clue as to how it works is this comment:</p>

<pre><code># graph[vertex's number] = [(it's real position), [connected
# vertex's number, (wall between verticies position)]]
</code></pre>

<p>Lists and tuples are very convenient for building simple data structures, but code that accesses them is hard to understand. For example, what does this line test?</p>

<pre><code>if not visited[graph[v][i][0]]:
</code></pre>

<p>By reading the comment, we can figure out that <code>graph[v][i][0]</code> is the vertex number of the <code>i-1</code>-th neighbour of vertex number <code>v</code>. But it takes considerable effort to figure this out — first you have to find the comment explaining the data structure, and then you have to figure out that the comment isn't telling the whole truth (because there can be multiple connected vertices, not just one as in the comment).</p>

<p>So let's see if we can simplify this data structure. The first thing to observe is that vertices are represented by integers, not by their coordinates. Why is that? There are two places where this fact is used. First, in the <code>visited</code> list:</p>

<pre><code>visited = [False for i in range(len(graph))]
</code></pre>

<p>But we could make this a set instead:</p>

<pre><code>visited = set()
</code></pre>

<p>and instead of testing:</p>

<pre><code>if not visited[graph[v][i][0]]:
</code></pre>

<p>we can test for membership in the set:</p>

<pre><code>if graph[v][i][0] not in visited:
</code></pre>

<p>Second, in this line picking a random vertex:</p>

<pre><code>v = random.randint(1, len(graph)) - 1
</code></pre>

<p>But there are other ways of doing this, for example like this:</p>

<pre><code>v = random.choice(list(graph))
</code></pre>

<p>After making these two changes, the vertices can be represented by any hashable objects, in particular by tuples <code>(posx, posy)</code>.</p>

<p>The other redundant piece of information in the graph data structure is the position of the wall between a vertex and its neighbour. This is redundant because if you have a vertex at \$v_x, v_y\$ and a neighbouring vertex at \$w_x, w_y\$, then the wall must be exactly halfway between them, that is, at $${v_x + w_x \over 2}, {v_y + w_y \over 2}.$$ So we can omit the wall from the data structure, simplifying it to:</p>

<pre><code># Mapping from vertex coordinates to set of coordinates of
# neighbouring vertices: graph[x, y] = {(x1, y1), (x2, y2), ...}
</code></pre>

<p>(We'll see later why it's convenient to have a <em>set</em> of neighbours instead of a list.)</p>

<p>A convenient way to construct such a data structure is to use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a>.</p></li>
<li><p>This code iterates over the logical coordinates <code>x, y</code> and maintaining separate real coordinates <code>posx, posy</code>:</p>

<pre><code>posx = 1
for x in range(size):
    posy = 1
    for y in range(size):
        # ...
        # skip one pixel for wall
        posy += 2
    posx += 2
</code></pre>

<p>Instead, iterate directly over the real coordinates:</p>

<pre><code># Vertices are at odd coordinates (leaving room for walls).
coords = range(1, size * 2, 2)
for x in coords:
    for y in coords:
</code></pre>

<p>Now you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer"><code>itertools.product</code></a> to loop over both coordinates simultaneously:</p>

<pre><code>for x, y in product(coords, repeat=2):
</code></pre></li>
<li><p>There's repetitive code for adding the neighbours. The repetition can be avoided by making a list of cardinal directions:</p>

<pre><code># List of cardinal directions.
_DIRECTIONS = [(1, 0), (0, 1), (-1, 0), (0, -1)]
</code></pre>

<p>and then iterating over it:</p>

<pre><code>for x, y in product(coords, repeat=2):
    for dx, dy in _DIRECTIONS:
        nx, ny = x + dx * 2, y + dy * 2
        if nx in coords and ny in coords:
            graph[x, y].append((nx, ny))
</code></pre></li>
<li><p>In <code>generate_maze</code>, there are two data structures <code>visited</code> (containing all the visited vertices) and <code>path</code> (containing all the visited vertices plus the walls between them). But the only thing we use <code>visited</code> for is to get a list of unvisited neighbours, so we could use <code>path</code> for this, and avoid the need for <code>visited</code> at all.</p></li>
<li><p>Since the image is black-and-white, it's wasteful to use format <code>'RGB'</code> which has 24 bits per pixel. Format <code>'1'</code> uses 1 bit per pixel. (The saving on disk is only about 50% since PNG is compressed, but still worth it.)</p></li>
<li><p>I recommend refactoring <code>generate_image</code> so that it doesn't have to know anything about mazes — if its only job is to make the image then it will be simpler and easier to understand. This can easily be done by adding the entrance and exit to <code>path</code> before calling <code>generate_image</code>.</p></li>
</ol>

<h3>2. Revised code</h3>

<pre><code>#!/usr/bin/env python3

from collections import defaultdict
from contextlib import contextmanager
from itertools import product
import random
import time
from PIL import Image

# List of cardinal directions.
_DIRECTIONS = [(1, 0), (0, 1), (-1, 0), (0, -1)]

def generate_graph(size):
    """Return size-by-size maze graph in the form of a mapping from vertex
    coordinates to sets of coordinates of neighbouring vertices, that is:

        graph[x, y] = {(x1, y1), (x2, y2), ...}

    Vertices are placed at odd coordinates, leaving room for walls.

    """
    graph = defaultdict(set)
    coords = range(1, size * 2, 2)
    for x, y in product(coords, repeat=2):
        for dx, dy in _DIRECTIONS:
            nx, ny = x + dx * 2, y + dy * 2
            if nx in coords and ny in coords:
                graph[x, y].add((nx, ny))
    return graph

def generate_maze(graph):
    """Given a graph as returned by generate_graph, return the set of
    coordinates on the path in a random maze on that graph.

    """
    v = random.choice(list(graph)) # Current vertex.
    stack = [v]                    # Depth-first search stack. 
    path = set()        # Visited vertices and the walls between them.
    while stack:
        path.add(v)
        neighbours = graph[v] - path
        if neighbours:
            x, y = v
            nx, ny = neighbour = random.choice(list(neighbours))
            wall = (x + nx) // 2, (y + ny) // 2
            path.add(wall)
            stack.append(neighbour)
            v = neighbour
        else:
            v = stack.pop()
    return path

def generate_image(filename, size, path):
    """Create a size-by-size black-and-white image, with white on path and
    black elsewhere, and save it to filename.

    """
    image = Image.new('1', (size, size))
    pixels = image.load()
    for p in path:
        pixels[p] = 1
    image.save(filename)

@contextmanager
def timer(message):
    "Context manager that reports the time taken by a block of code."
    print("[*]", message)
    start = time.time()
    yield
    print("[#] finished in {:.3f} seconds".format(time.time() - start))

def create(filename, size):
    "Create a size-by-size maze and save it to filename."
    ext = '.png'
    if not filename.endswith(ext):
        filename += ext
    size_real = (2 * size) + 1
    with timer("creating {}".format(filename)):
        print("size =", size_real, "x", size_real)
        with timer("generating graph"):
            graph = generate_graph(size)
        with timer("generating maze"):
            path = generate_maze(graph)
        # Add entrance and exit.
        path.update([(1, 0), (size_real - 1, size_real - 2)])
        with timer("generating image"):
            generate_image(filename, size_real, path)
</code></pre>
    </div>