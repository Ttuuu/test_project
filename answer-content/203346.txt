<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few more short comments:</p>

<ol>
<li><p>I find a script easier to read if all necessary functions are defined before being called. This would mean moving <code>parse_file</code> and <code>parse_line</code> above <code>main</code>.</p></li>
<li><p>When returning a tuple, or using tuple assignment, you don't need parenthesis:</p>

<pre><code>def f(x):
    return x, 2*x

a, a2 = f(2)
</code></pre></li>
<li><p>Your <code>parse_file</code> function could be slightly shortened using <code>map</code>:</p>

<pre><code>def parse_file(file, database):
    for word, thesaurus in map(parse_line, file):
        database[word] = thesaurus
</code></pre></li>
<li><p>In <code>parse_line</code> you could use <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">extended tuple unpacking</a> to give the parts more meaningful names:</p>

<pre><code>def parse_line(line):
    word, *thesaurus = line.strip().split(",")
    return word, thesaurus
</code></pre></li>
<li><p>There is no need to define <code>database</code> if the number of arguments is not enough. I would move the line to where it is first needed. Or, even better, let <code>parse_file</code> return a dictionary, since you never update an existing dictionary (and even if you did, you could just call <code>dict.update</code> with that returned dictionary):</p>

<pre><code>def main():
    ...
    try:
        database = parse_file(filename)
        ...
    ...

def parse_file(file):
    return dict(map(parse_line, file))
</code></pre></li>
</ol>
    </div>