<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use the functional style for this task. This will help splitting the logic and general loop, so it simplifies the reading the code.</p>

<p>I've wrote this in sublime, so there may be some errors in code, but the main idea is clear from this example:</p>

<pre><code>public class TeamValidator {

    public static interface Function &lt;R, T&gt; {
        R apply(T val);
    }    

    public boolean generalIteration(Function&lt;Boolean, Member&gt; func, List&lt;Member&gt; list) {
        Boolean result = false;
        for (Member member : list) {
            result = func.apply(member);
            if (result) break;
        }
        return result;
    }

    public boolean isThereALeader(List&lt;Member&gt; team) {
        return generalIteration(new Function&lt;Boolean, Member&gt;() {
            @Override
            public Boolean apply(Member member) {
                return "Leader".equals(member.getRole());
            }
        }, team);
    }

    public boolean areThereAtLeast2NewJoiners(List&lt;Member&gt; team) {
        final int[] amountOfNewJoiners = {0};
        return generalIteration(new Function&lt;Boolean, Member&gt;() {
            @Override
            public Boolean apply(Member member) {
                DateTime aMonthAgo = DateTime.now().minusMonths(1);
                if (member.startingDate().isAfter(aMonthAgo)) {
                    int val = amountOfNewJoiners[0];
                    amountOfNewJoiners[0] = ++val;
                }
                return (amountOfNewJoiners[0] == 2);
            }
        }, team);
    }

}
</code></pre>
    </div>