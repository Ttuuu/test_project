<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>bug</h1>

<pre><code>def wordBreak(self, s, wordDict):
    wordDict = set(wordDict)
    str_map = dict()
    if not s or not wordDict: return False

    def check(s):
        if s in str_map: return str_map[s]
        if s in wordDict:
            str_map[s] = True
            return True
        for i, c in enumerate(s[1:], 1):
            if s[:i] in set(wordDict) and check(s[i:]):
                str_map[s[:i]] = True
                return True  # &lt;== you forgot this one
        str_map[s] = False
        return False

    return check(s)
</code></pre>

<p>passes all cases in 48ms</p>

<h1>set(wordDict)</h1>

<p>No need to do this in each iteration if you do that at the start of the algorithm</p>

<h1><code>c</code></h1>

<p>this variable is not used. Python convention uses <code>_</code> for variables that are not used</p>

<h1>reinventing the wheel (cache)</h1>

<p>Python is <em>batteries included</em></p>

<p>so you can as easily use <code>functools.lru_cache</code> instead of implementing your own cache:</p>

<pre><code>from functools import lru_cache

def wordBreak(self, s, wordDict):
    wordDict = set(wordDict)
    if not s or not wordDict: return False
    @lru_cache(None)
    def check(s):
        if s in wordDict:
            return True
        for i, _ in enumerate(s[1:], 1):
            if s[:i] in wordDict and check(s[i:]):
                return True
        return False
    return check(s)
</code></pre>

<p>passes in 36ms</p>

<hr>

<h1>alternative version</h1>

<p>instead of running over the string, you can also try to build a graph of all occurrences of the words in <code>wordDict</code>, and then look if you can find a path from <code>0</code> to <code>len(s)</code></p>

<h2>all chars in <code>wordDict</code></h2>

<p>you can check whether all chars in <code>s</code> appear in a word in <code>wordDict</code></p>

<pre><code>def validate_all_chars(text, words):
    all_chars = set()
    for word in words:
        all_chars.update(word)
    return all_chars.issuperset(text)
</code></pre>

<p>or with <code>itertools.chain</code>:</p>

<pre><code>from itertools import chain
def validate_all_chars(text, words):
    all_chars = set(chain.from_iterable(words))
    return all_chars.issuperset(text)
</code></pre>

<h2>occurrences:</h2>

<p>Unfortunately, <code>re.finditer</code> and <code>re.findall</code> only give non-overlapping occurrences, so we can't use them here. So we'll have to build our own finder:</p>

<pre><code>def find_occurrences(pattern: str, text: str):
    idx = 0
    while True:
        idx = text.find(pattern, idx)
        if idx == -1:
            return
        yield idx, idx + len(pattern)
        idx += 1
</code></pre>

<h2>build a graph</h2>

<pre><code>from collections import defaultdict
def build_span_graph(text, words):
    all_spans = defaultdict(set)
    spans = (find_occurrences(word, text) for word in words)
    for span in spans:
        for begin, end in span:
            all_spans[begin].add(end)
    return all_spans
</code></pre>

<h2>walk the graph:</h2>

<pre><code>def find_path(spans, length, begin=0, visited=None):
    visited = set() if visited is None else visited
    visited.add(begin)
    ends = spans[begin]
    return length in ends or any(
        find_path(spans, length=length, begin=new_begin, visited=visited)
        for new_begin in ends
        if new_begin not in visited and new_begin in spans
    )
</code></pre>

<p>Here you can try to optimize a bit by first visiting the furthest ends, but that is only marginally useful</p>

<h1>main:</h1>

<pre><code>def wordBreak(s: "str", wordDict: "List[str]") -&gt; "bool":
    if not validate_all_chars(s, wordDict):
        return False

    spans = build_span_graph(s, wordDict)

    return find_path(s, wordDict)
</code></pre>
    </div>