<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It looks like most of the encounters in your game follow this general sequence:</p>

<ol>
<li>Prompt the user for input.</li>
<li>Print a result and modify the user's HP.</li>
</ol>

<p>The part where you modify the HP isn't actually implemented, but based on the text it looks like that's something you're planning on doing, anyway.  :)  You could generalize that sequence as a function that takes the prompt and the set of possible results, prints the outcome, and returns the modified hit point total so you can keep track of it through the different encounters.</p>

<p>That function might look like this:</p>

<pre><code>from typing import Dict, Optional, Tuple

def do_encounter(
    prompt: str, 
    hp: int, 
    outcomes: Dict[Optional[str], Tuple[str, int]
) -&gt; int:
   """Run an encounter in the game, reading input from stdin and writing to stdout.
   If the encounter results in killing the player, exit the program.
   Otherwise, return the player's remaining hit points."""
   answer = input(prompt).lower()
   message, hp_change = outcomes[answer] if answer in outcomes else outcomes[None]
   print(message)
   hp += hp_change
   if hp &gt; 0:
       # Player still alive
       return hp
   # Player is dead!
   print("YOU LOST".center(72))
   exit()
</code></pre>

<p>And then you can do:</p>

<pre><code>hp = 10  # starting hp

# The dog encounter: if the player engages, they escape unharmed, otherwise -2 hp.
hp = do_encounter(
    "the dog readies to pounce again do you run or engage it in combat?", hp, {
        "engage": ("you bound towards the dog and strike it down", 0),
        None: ("you attempt to run but are chased and the dog bites" +
               "into your leg; you lose 2 hp as you shake it off", -2)
    }
)
print()

# ... more encounters here, you get the idea

# Initial dark knight attack-- dodge left or right, or suffer massive damage!
print(heroname, "YOU WILL BE CRUSHED!")
hp = do_encounter(
    "The dark knight swings his sword down; do you dodge left or right?", hp, {
        "left": ("You dodge the dark knight's swing", 0),
        "right": ("You dodge the dark knight's swing", 0),
        None: ("The dark knight digs his sword through your chest "+ 
               "as your soul leaves your body", -100)
    }
)
print()

# Second dark knight attack.  It doesn't matter what the player does here!
hp = do_encounter(
    "The dark knight swings his sword once again do you dodge or attack?", hp, {
        None: ("YOU WILL NOT DEFEAT ME! the dark night booms as he lurches forwards", 0)
    }
)

# Now we determine victory by random chance.
finalkill=random.randint(1,6)
# ... etc
</code></pre>

<p>Making your encounters follow a similar format makes it easier to tell by looking at your code how the game progresses -- for example, in the final encounter it doesn't matter whether the player dodges left or right initially (but they die if they do neither), and it doesn't matter at all what they do in the final question!  That's more of a game design problem than a coding one, but one of the properties of well-written code is that it's easier to perceive the overall design by reading the code.</p>
    </div>