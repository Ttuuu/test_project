<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>The IDE you linked uses CLISP, which is a bit lenient; when I evaluate
that definition, I immediately get two warnings from SBCL:</p>

<blockquote>
<pre class="lang-lisp prettyprint-override"><code>; in: DEFUN COUNT-UP-DOWN-CHARACTERS-WITH-DIFFERENCE
;     (SETF COUNT-DOWN 0)
; ==&gt;
;   (SETQ COUNT-DOWN 0)
;
; caught WARNING:
;   undefined variable: COUNT-DOWN

;     (SETF COUNT-UP 0)
; ==&gt;
;   (SETQ COUNT-UP 0)
;
; caught WARNING:
;   undefined variable: COUNT-UP
;
; compilation unit finished
;   Undefined variables:
;     COUNT-DOWN COUNT-UP
;   caught 2 WARNING conditions
</code></pre>
</blockquote>

<p>That is because <code>count-up</code> and <code>count-down</code> weren't defined anywhere.
It's implementation-defined what happens in this case.</p>

<p>So firstly let's define them with <code>defvar</code>:</p>

<pre class="lang-lisp prettyprint-override"><code>(defvar *count-up*)
(defvar *count-down*)
...
(defvar +night-before-xmas+ "...")
...
</code></pre>

<p>(Constants usually have <code>+</code> as markers, globals <code>*</code>.  Indentation is
usually a bit different as well, I'm only going to show the
Emacs-formatted code without more explanation though.)</p>

<p>Then again, if you want a functional solution, don't use <code>setf</code> (that
is, assignment) or globals at all.  Instead (and in general) prefer
<code>let</code>.</p>

<p>A few other things to make it more idiomatic (for some value of
idiomatic) are the use of the most strict equality operator possible,
which here would be <code>eql</code> (since you check for exact equality between
characters), and not using <code>if</code> if there's only one case, instead <code>when</code>
or <code>unless</code> would be preferable.</p>

<pre class="lang-lisp prettyprint-override"><code>(defun count-up-down-characters-with-difference (input-string up-char down-char)
  "..."
  (let ((count-up 0)
        (count-down 0))
    (loop
      for c across input-string
      do (when (eql c up-char)
           (incf count-up))
         (when (eql c down-char)
           (decf count-down)))
    (list count-up count-down (+ count-up count-down))))
</code></pre>

<p><code>loop</code> also has more grammar to compress it more, but I think this is
fine for now.  Also consider using <code>count</code> instead of a manual loop, i.e.:</p>

<pre class="lang-lisp prettyprint-override"><code>(defun count-up-down-characters-with-difference (input-string up-char down-char)
  "..."
  (let ((count-up (count up-char input-string))
        (count-down (- (count down-char input-string))))
    (list count-up count-down (+ count-up count-down))))
</code></pre>

<p>Or also <code>(count up-char input-string :test #'char-equal)</code> (see <a href="http://clhs.lisp.se/Body/f_countc.htm" rel="noreferrer"><code>COUNT</code></a>).</p>
    </div>