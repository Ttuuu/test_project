<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you were to solve it with a third-party package, like <a href="https://pypi.python.org/pypi/jsonpath-rw" rel="noreferrer"><code>jsonpath-rw</code></a>, the solution would be as simple as constructing the path by joining the keys with a dot and parsing the dictionary:</p>

<pre><code>from jsonpath_rw import parse


def nested_get(d, path):
    result = parse(".".join(path)).find(d)
    return result[0].value if result else None
</code></pre>

<p>Some code style notes about your current approach:</p>

<ul>
<li>Python functions does not follow the camel case naming conventions, put an underscore between words - <code>nested_get()</code> instead of <code>nestedGet()</code></li>
<li>there should be extra spaces after the commas (<a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="noreferrer">PEP8 reference</a>) </li>
<li>improve on variable naming, make them more descriptive - for instance, <code>p</code> can be named as <code>path</code></li>
<li>use <code>print()</code> <em>function</em> instead of a statement for Python3.x compatibility</li>
</ul>
    </div>