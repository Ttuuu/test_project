<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Any simple generator whose output is equivalent to its internal state will generate a non-repeating sequence. In fact, most will generate a permutation of the range [0, P) where P is the length of the period. Or [1, P), if state == 0 is forbidden.</p>

<p>Pick any simple generator with period P â‰¥ 2,704,000 and Bob's your uncle.</p>

<p>The simplest is the Golden Weyl generator (the 'Golden' is my moniker for it):</p>

<pre><code>x = (x + 0x9E3779B9u) mod 2^32
</code></pre>

<p>The net has a wide choice of suitable <a href="http://en.wikipedia.org/wiki/Linear_congruential_generator" rel="nofollow noreferrer">Linear Congruential Generators</a> (LCGs) of the form </p>

<pre><code>x = (a * x + c) mod 2^32
</code></pre>

<p>Julienne Walker has written a <a href="http://en.wikipedia.org/wiki/Linear_congruential_generator" rel="nofollow noreferrer">brilliant explanation of LCGs</a>, and the Weyl generators are just a special case with multiplier 1.</p>

<p>However, regardless of which type of generator you choose, its period P is likely to be too long. </p>

<p>Extracting a shorter non-repeating sequence of values [0,M) from a longer sequence of non-repeating values [0,P) is not trivial. In particular, if you map the [0,P) values to the [0,M) range in some fashion - e.g. by scaling, or by computing the remainder modulo M - then you lose the property of non-repetition. Stuffing P values into a smaller number M of pigeon holes means that some values must end up in the same hole.</p>

<p>One strategy that works well is <strong>rejection</strong>: inspect the generator output and if you don't like the value for some reason, throw it away and call the generator again. This method is perfect for generating even the most outlandish output distributions, in the sense that it does not introduce any bias at all and it leaves properties like non-repetition intact. The downside is that you have to do more work if a lot of stuff gets thrown away.</p>

<p>The trick, then, is to pick a non-repeating generator whose period length is as close to M = 2,704,000 as possible, and then use rejection with that.</p>

<p>LCGs modulo powers of 2 have the special property that any lower k bits cycle with period 2^k. I.e., the lowest bit is strictly alternating, the low 2 bits cycle with period 4, and so on. This means that these generators can be reduced modulo any power of 2 without losing the property of non-repetition. In other words, any LCG modulo 2^x is also a generator modulo 2^k for all k that are less than x. These subsequences can be extracted by throwing away (masking off) the unwanted higher bits.</p>

<p>The first power of two that is not less than the modulus M = 2,704,000 is 2^22. Masking with 2^22 - 1 = 0x3FFFFF we only have to reject the 35% of outputs that are in the range [M,2^22). This means the generator will have to be cycled 1.55 times on average for each good value in the range [0,M). That's less than two MULs for a non-repeating random value with an off-beat modulus.</p>

<p>Simple and effective.</p>

<p>An example for a suitable generator of higher quality (where the lower bits do not cycle with their own lower periods) is a 22-bit <a href="http://www.researchgate.net/profile/Pierre_LEcuyer/publication/220576197_Maximally_equidistributed_combined_Tausworthe_generators/links/0c960528a0fc4cece6000000" rel="nofollow noreferrer">Tausworthe</a>. Think of it as a single barrel of the four-barrelled <a href="http://books.google.de/books?id=BehaAwAAQBAJ&amp;pg=PT181&amp;lpg=PT181&amp;dq=lfsr113&amp;source=bl&amp;ots=CIWIBpC0Td&amp;sig=bGEIl-mCE8YQTDv1IVUMGbGpuLQ&amp;hl=en&amp;sa=X&amp;ei=lFloVKnEN5HYaoGcgvAB&amp;ved=0CEkQ6AEwBw#v=onepage&amp;q=lfsr113&amp;f=false" rel="nofollow noreferrer">lfsr113</a> that powers games like <a href="http://www.dragonage.com" rel="nofollow noreferrer">Dragon Age</a>, whose long-awaited newest chapter is due to be released in a few hours.</p>

<pre><code>x = (((x ^ (x &lt;&lt; 1)) &amp; 0x3FFFFF) &gt;&gt; (22 - 17)) ^ (x &lt;&lt; 17);

return (x &amp; 0x3FFFFF) - 1;
</code></pre>

<p>This generator has period 2^22 - 1 because 0 is a forbidden (sticky) state, hence the decrement after masking the output. The rejection method is then essentially the same as above. </p>

<p>I wrote <code>(22 - 17)</code> because the 17 corresponds to parameter <code>s</code> in the usual descriptions of the algorithm (and 22 equals <code>k</code>). Other possible choices for <code>s</code> are here: 1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 19 and 20. The algorithm is usually described in a way that makes the 'live' k bits sit at the upper end of the larger x:</p>

<pre><code>x = ((x ^ (x &lt;&lt; q)) &gt;&gt; (k - s)) ^ ((x &amp; m) &lt;&lt; s);
</code></pre>

<p>I took the liberty of shifting the whole shebang down to the lower end, so that the live bits can be extracted with simple masking. The output sequence is the same.</p>
    </div>