<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your idea is definitely better than the original, but I think it could be better still.</p>

<p>Firstly;</p>

<pre><code>if(part1.Length == 3 &amp;&amp; part2.Length == 8 &amp;&amp; part3.Length == 3)
{
    return true;
}
else
{
    return false;
}
</code></pre>

<p>This can be simplified into a single return statement, as follows;</p>

<pre><code>return part1.Length == 3 &amp;&amp; part2.Length == 8 &amp;&amp; part3.Length == 3;
</code></pre>

<p>Secondly, it would probably be better if the length values you are comparing to were constants. It's definitely better if there's ever a chance that the expected length changes (then you know you only need to change one place in the code), but even if you know it will remain constant for the life of the codebase it's a lot easier to read and understand <code>something.Length == XCodeLength</code> than <code>something.Length == 3</code> and having to know or find out that this is because XCodes always have length 3. (Obviously naming and set up of this are very context dependent...)</p>

<p>Thirdly, do the separate parts mean anything? I.e. is there a more meaningful name that could be used for each bit of the split? (e.g. if these were telephone numbers (which they aren't based on the numbers, but it's the best example I could think of) it'd be a lot more clear if <code>part1</code> was instead called <code>countryCode</code> (or <code>areaCode</code> - pick your format, but the point is the same)). Naming these well would also link nicely into putting the lengths into constants.</p>

<p>As a final point, you may have a specific code style you need to follow, but it's more normal for C# to use var when possible rather than writing out the type of a variable when it can be inferred (you can still easily see the type in an IDE).</p>
    </div>