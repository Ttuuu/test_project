<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>A standard way out of your problems is to </p>

<ul>
<li><p>Define few comparators, such as <code>operator&lt;</code> and the family, e.g.</p>

<pre><code>friend bool operator&lt;(const Node&amp; a, const Node&amp; b) {
    return a.data &lt; b.data;
}

friend bool operator&gt;=(const Node&amp; a, const Node&amp; b) {
    return !(a &lt; b);
}
</code></pre></li>
</ul>

<p>etc;</p>

<ul>
<li><p>Define the iterator over your list;</p></li>
<li><p>Do not implement the methods which are already implemented in STL <code>&lt;algorithm&gt;</code> library, but enjoy them for free. That includes <code>insertionsort</code> and <code>prnlist</code> for example, and greatly simplifies <code>addinorder</code> (just call <code>std::lower_bound</code> and notice that it returns exactly an insertion point you need).</p></li>
</ul></li>
<li><p>Except that iterators are preferred to raw pointers, I see nothing wrong with your <code>split</code>. A few nitpicks though. I would call it <code>split_in_half</code>, and define another <code>split_at</code> method with an iterator parameter telling <em>where</em> to split.</p></li>
</ul>
    </div>