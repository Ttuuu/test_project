<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Very fun game you created here, I like it. Your calculations for the probabilities are also impressive, and well tested.</p>

<hr>

<p>Some small suggestions:</p>

<ul>
<li>UI improvement: Print a message when "leveling up".</li>
<li><code>Answer.Wrong.also { }</code> has a redundant <code>.also</code> that can be removed.</li>
<li>Enum constants are usually written in uppercase, making it <code>AND</code>, <code>OR</code>, <code>XOR</code>, <code>IMPLIES</code>.</li>
<li>The usage of <code>Answer</code> has a <code>EOF</code> result, which gives me a feeling that whether or not the user gives the correct answer could be instead represented as the nullable type <code>Boolean?</code></li>
<li>The import <code>java.util.Random</code> can be changed to <code>kotlin.random.Random</code>, which you can access a default instance from by using <code>kotlin.random.Random.Default</code> or by using a constructor through <code>kotlin.random.Random(seed)</code>.</li>
<li>Many names have been unnecessarily shortened, <code>prob</code> -&gt; <code>probability</code>, <code>rnd</code> -&gt; <code>random</code>, <code>deg</code> -&gt; ??? (honestly not sure what this is short for), <code>Expr</code> -&gt; <code>Expression</code>...</li>
<li>Code organization:

<ul>
<li>Separate the game model from the view, so that it becomes easier to create other clients (REST service or Desktop application for example).</li>
<li>Create more classes instead of having many methods as top-level functions.</li>
</ul></li>
</ul>

<hr>

<p>Some possible changes that could be done but that not necessarily improves anything:</p>

<ul>
<li><code>Expr</code> could be changed to <code>typealias Expr = () -&gt; Boolean</code></li>
<li>A <code>toString</code> method is mostly for debugging and logging purposes and not to be displayed to users. It could be separated to a different method.</li>
<li><p>All your expressions have a <code>toString</code> and <code>eval</code> method, but the constant values of these are known already on creation. This would make it possible to do something like the following:</p>

<pre><code>interface Expression {
    val text: String
    val eval: Boolean
}

/** A boolean literal is either "true" or "false". */
class Literal(override val value: Boolean) : Expression {
    override val text: String = eval.toString()
    override val eval: Boolean = value
}
</code></pre>

<p>Again though, this doesn't necessarily improve anything as your code is already very readable by having both a toString and eval method.</p></li>
</ul>

<p>I also tried to experiment with other approaches, such as making a class for an expression and to have a <code>ExpressionFactory</code> that could create both literals, the not function, and the binary expressions, but in the end I felt that it became unnecessary complex.</p>

<h3>Summary</h3>

<p>Some organization of the code could be improved to better separate between the game logic and the user interaction, and some different minor improvements as mentioned in the beginning. But overall, nicely done and fun game.</p>
    </div>