<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Docstrings</h1>

<p>You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="noreferrer"><code>docstring</code></a> at the beginning of every module, class, and function you write. This will allow documentation to identify what your code is supposed to do.</p>

<h1><code>with open</code> vs <code>file = open</code></h1>

<p>Currently, you open the file with <code>text_file = open("D:\Output.sql", "a", encoding="utf-8")</code>, and manually close it with <code>text_file.close()</code>. You can save yourself from having to do this with opening the file using <code>with open(...) as ...:</code>. This lets you work with the file, and once done and out of scope, can continue writing the program. <em>"But wait. What about closing the file?"</em>. When you use <code>with</code>, once you are out of the scope of the <code>with</code>, it closes itself automatically.</p>

<h1>Magic Numbers</h1>

<pre><code>for i in range(1,10001): ...
for j in range(1,1500001): ...
</code></pre>

<p>At first look, I had no idea what these numbers were supposed to represent. You should assign these numbers to variables, and use those variables instead. This makes the code cleaner and easier to maintain. What if you wanted to change the number of tables or number of people? You'd need to find every instance of that magic number (should you use it more than once) and change it. Having it assigned to a variables fixes this problem, as you can just change the value of the variable.</p>

<h1>String Formatting <code>f""</code></h1>

<p><code>text_file.write('create table Python_test.'+x+'('+a[0]+' VARCHAR(255),'+a[1]+' VARCHAR(255),'+a[2]+' VARCHAR(255),'+a[3]+' VARCHAR(255),'+a[4]+' VARCHAR(255));\n')</code> </p>

<p>This hurts to read. All the <code>+</code> split apart the string and makes it really hard to know what the whole string is. My solution is to use <code>f"..."</code>. This allows you to directly incorporate variables into your strings, without having to <code>+...+</code>, and also avoiding (if present) <code>+str(...)+</code> which is <em>very</em> ugly to me.</p>

<h1>Objects</h1>

<p>Having a redefined list with fixed positions of properties of people is messy. Instead, you can generate a list with instances of a <code>Person</code>, and you can access their properties when incorporating it in your <code>SQL</code> string.</p>

<h1><code>_</code> for unused loop variables</h1>

<p>When you don't use a variable in a loop, like:</p>

<pre><code>for i in range(5):
    print("Hi!")
</code></pre>

<p>You should use a <code>_</code>. This makes it clear that the variable used for the loop is not needed, and should be ignored.</p>

<h1>Helper Functions</h1>

<p>I wrote a few helper functions for generating some random values in your code. Using helper functions in your code can really help you, as you don't have to cram everything into one function.</p>

<p><em>Exclaimer: I had no idea what you were trying to do when inserting data into your tables, so I left that blank. It also didn't help that <code>fake</code> and <code>rstr</code> weren't defined / weren't shown in your program.</em></p>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring
A description of your program goes here
"""

import random

class Person():
    """
    Class to store properties of Person
    """

    def __init__(self, name, ssn, address, dob, phone):
        self.name = name
        self.ssn = ssn
        self.address = address
        self.dob = dob
        self.phone = phone

def generate_ssn():
    """
    Returns a randomly generated SSN
    """
    return f"{random.randint(100, 999)}-{random.randint(10, 99)}-{random.randint(1000, 9999)}"

def generate_dob():
    """
    Returns a randomly generated address in format MM/DD/YYYY
    """
    return f"{random.randint(1, 12)}/{random.randint(1, 31)}/{random.randint(1919, 2019)}"

def generate_phone():
    """
    Returns a randomly generated phone number
    """
    return f"{random.randint(100, 999)}-{random.randint(100, 999)}-{random.randint(1000, 9999)}"

def generate_sql_script(num_people, num_tables, output_file):
    """
    Generates an SQL script for inserting people into tables
    """
    with open(output_file, "a") as out_file:
        people = []
        count = 0
        for i in range(1, num_people):
            people.append(Person(f"John_{i}",
                                 generate_ssn(),
                                 f"123 Main St_{i}",
                                 generate_dob(),
                                 generate_phone())
                         )
            random_person = random.choice(people)
            table = f"Tab_{i}"
            out_file.write(f'CREATE TABLE Python_test.{table}({random_person.name} VARCHAR(255), {random_person.ssn} VARCHAR(255), {random_person.address} VARCHAR(255), {random_person.dob} VARCHAR(255), {random_person.phone} VARCHAR(255)')

            for _ in range(1, num_tables):
                #Couldn't understand what this is doing with `fake` and `rstr`
                pass

            out_file.write('\n')
            count += 1
            print(count)
</code></pre>
    </div>