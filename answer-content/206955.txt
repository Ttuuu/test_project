<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yeah you're definitely off to a good start. Here's how I think about state and props. Props are like parameters - they're passed into the component (duh). State is for data that was not passed into the component as props - often times this is data returned from AJAX calls. There's only one good reason I've seen to ever mix the two (see #3 below).</p>

<p>The other thing to consider is the component's lifecycle. If there's no asynchronous work, you should be able to setup all the state in the constructor. If you need to do something asynchronously, your component needs to support two variants of itself: one without data, and one with data. </p>

<p>For the more complex scenario, set the state for the first variant in the constructor, trigger the async work in <em>componentDidMount()</em>, then <em>setState()</em> when you have all the data you need. This should result in one two renders at most - the initial mount and the update.</p>

<p>Good stuff:</p>

<ol>
<li>Data fetching logic is in a service, and not baked into your component – this code can be reused if you switch from React to something else.</li>
<li>Loading states (I start with this).</li>
</ol>

<p>Some things that could be improved:</p>

<ol>
<li>AJAX Promise tracking (TractorList's isLoading) is state - put it in
this.state; otherwise, your component might not update when you
expect it.</li>
<li>Parsing query string in TractorList could be moved to a function that simply returns state in an appropriate format – or you could do
this at a higher level and just pass the result in as props to
TractorList.</li>
<li>Don't copy props to state like in pagination's componentDidMount(), because it leads to <a href="https://en.wikipedia.org/wiki/Split-brain_(computing)" rel="nofollow noreferrer">split-brain</a>. The only
valid use case I've seen is when you need to allow state and props
to temporarily diverge, but still have the ability to roll-back to
the previous state (e.g. a form in a modal where the user can save
or cancel).</li>
<li>Calling setState() and nothing else in TableHeader's componentDidMount(). This results in an unnecessary update – you
could just put this in the constructor and assign to this.state
directly from props.</li>
<li>Error handling – AJAX calls fail all the time. To build a resilient app, you'll need to do crazy stuff, or leverage <a href="https://reactjs.org/docs/error-boundaries.html" rel="nofollow noreferrer">Error Boundaries</a>. This might introduce additional state, and it's good to think through this before your component gets too complex.</li>
</ol>
    </div>