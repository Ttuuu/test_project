<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that the "old" version should store the logger in a <code>std::unique_ptr</code> in <code>main</code>, rather than explicitly calling <code>new</code> and <code>delete</code>.</p>

<hr>

<p>The simplest possible thing would be something like this:</p>

<pre><code>struct Services // previously `Engine`
{
    Logger logger;
};

int main()
{
    {
        Services services;
        services.logger.log("yep");
    }

    //services.logger.log("nope"); // obviously doesn't compile
}
</code></pre>

<p>To use the logger "somewhere else" we can pass it into an object constructor by reference, (or pass the entire <code>Services</code> object by reference):</p>

<pre><code>struct Object
{
    explicit Object(Logger&amp; logger):
        logger(&amp;logger) { }

private:

    Logger* logger;
};
</code></pre>

<p>If necessary, the object can store the logger (or <code>Services</code>) by reference (which has the side-effect of preventing us defining assignment operators for <code>Object</code> as we can't re-assign a reference), or by pointer (which allows us to define assignment operators, but can also be reassigned to a <code>nullptr</code> (for better or worse)).</p>

<p>Either way, we still depend on the lifetime of the <code>Logger</code> being longer than the lifetime of the <code>Object</code>. With C++, this is usually enforced simply by the implicit order of destruction of stack objects (and any child objects they contain), e.g.:</p>

<pre><code>{
    Services services;
    Object object(services.logger);

} // destruction in reverse order: first object, then services.
</code></pre>

<hr>

<p>It might seem like we can use <code>std::shared_ptr</code> and <code>std::weak_ptr</code> to enforce the above constraint (longer service lifetime), but it adds overhead and complexity, and can lead to more serious issues. When we promote a <code>weak_ptr</code> to a <code>shared_ptr</code>, the new <code>shared_ptr</code> also "owns" the service. So the lifetime is no longer defined by <code>Services</code>, but by the service user as well.</p>

<p>If we enforce the <code>Object</code> lifetime constraint properly ourselves, we don't need this. If we don't enforce that constraint, then the exact moment of a service being destroyed becomes very difficult to determine, which leads to similar problems as with <code>Singleton</code> objects.</p>

<p><a href="https://seanmiddleditch.com/dangers-of-stdshared_ptr/" rel="nofollow noreferrer">This article has some more arguments against using <code>std::shared_ptr</code></a>, and points out that what we actually need is some sort of checked pointer or borrowed reference for debugging. Unfortunately, this doesn't exist in the C++ standard library.</p>

<hr>

<p>Note that if it's actually necessary to swap out, or destroy a service part-way through use, we can't store any pointer or reference to the service. It must be fetched from <code>Services</code> every time it's accessed. This is probably quite difficult to enforce though.</p>

<hr>

<p>In short:</p>

<ul>
<li>Avoid using this pattern if possible.</li>
<li>Pass dependencies by reference in constructors (or other functions).</li>
<li>Ensure that lifetimes are well-defined and easy to understand (i.e. avoid <code>std::shared_ptr</code>).</li>
<li>Ensure that the lifetime of the <code>Engine</code> / <code>Services</code> exceeds the lifetime of anything that uses them.</li>
<li>Don't move or copy the individual services, or the <code>Services</code> class.</li>
</ul>

<hr>

<p>And to answer your questions:</p>

<ol>
<li>Yes.</li>
<li>Allowing direct access to the service member, returning a raw pointer from an accessor function, or returning a reference from an accessor function are all reasonable options. The first is simplest unless you have some other constraints (enforcing access through an interface, or enforcing const correctness).</li>
<li>I'd argue not (see above).</li>
</ol>
    </div>