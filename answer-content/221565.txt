<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I never programmed in my life, and I am currently self teaching myself some C++ by reading books, online free classes and googling.</p>
</blockquote>

<p>If that is true, then I applaud you. This code is better than some code I've seen from people who "know what they're doing". For one thing, I understood it and could tell what you were trying to do. Of course, you can still improve a lot. Don't take this as a "okay, I don't need to learn anything more". Everyone can get better, except people who mistakenly think they're already the best. But for a first try, not bad. Anyway, on with the review.</p>

<blockquote>
  <p>PS: Can I move those enums out of the header file? I tried but with no success. They look ugly in a header file...</p>
</blockquote>

<p>Short answer no. It is necessary in the header file because you use the enums almost immediately on the next couple lines:</p>

<pre><code>private:
    CardSuit m_suit;
    CardRank m_rank;
</code></pre>

<p>So you can't just remove them. If you don't like how they look, you will have to come up with another solution for <code>m_suit</code> and <code>m_rank</code>.</p>

<p>Not that you want them out of the header. If they are not in the header, then other things like your <code>main()</code> function can't use them. If they are in the header, it makes using them easier.</p>

<blockquote>
  <p>I tried to put in functions the methods that were used more than once only, hence the long void playGame(Deck &amp;gameDeck) function.</p>
</blockquote>

<p>If what you're saying is that only functions that get used more than once become part of the class, then I say you're on the right track.</p>

<p>Generally, you want functions that are specific to the data in the class to be methods of that class. You don't want anything that has nothing to do with the class, or is program specific being part of that class.</p>

<p>The reason is let's say you decide to make a Solitaire game for example. Well, you've already written a <code>Card</code> class and a <code>Deck</code> class. Those classes you could probably use again in solitaire. Thus, anything that you think might find use in Solitaire, you might want to make part of the class. So <code>Deck::shuffleDeck()</code> for example, might find use in Solitaire, so it's a good fit to make part of the class. <code>playGame()</code>, however, is program specific. It has no use in a Solitaire game, on in Blackjack. Thus, it's a bad candidate to make part of the class.</p>

<p>All of that to say, I guess, is that <code>playGame()</code> doesn't need to be part of <code>Deck</code>. Good choice.</p>

<blockquote>
  <p>Am I doing the multi file division the right way? I aimed for a file and header per class.</p>
</blockquote>

<p>Yup. Your headers are great in my opinion. However, others may say that they are just good.</p>

<blockquote>
  <p>Should I separate the huge void playGame(Deck &amp;gameDeck) function into smaller ones?</p>
</blockquote>

<p>It does seem a little big. Sub-functions would reduce repeated code. Not fully sure how you can reduce at the moment, other than maybe if there was a was a way to not repeat the dealer and player hit process. Again, not sure how exactly you could do that at the moment, but that would help. Any place you've repeated the same basic code, a function will help.</p>

<blockquote>
  <p>What are my bad habits? What are my rookie mistakes?</p>
</blockquote>

<p>I didn't look at the code closely enough to give a complete answer, but one I did catch was this:</p>

<pre><code>public:
    std::vector&lt;Card*&gt; m_playerHand;
    std::vector&lt;Card*&gt; m_dealerHand;
</code></pre>

<p>Generally, it's better to keep these private if you can. Then, make a public interface for them. So, you could do, for instance:</p>

<pre><code>class Deck {
  private:
    std::vector&lt;Card*&gt; m_playerHand;
  public:
    std::vector&lt;Card*&gt;&amp; getPlayerHand() { return m_playerHand; }
}
</code></pre>

<p>You may have a good reason to make them public, or it may be just easier to make them public. But, if you can make them private, it is usually better to do so.</p>

<blockquote>
  <p>Anything you guys would change to this particular program? Any advice to me in general?</p>
</blockquote>

<p>This one I have several points for improvements:</p>

<ol>
<li>Consider adding a <code>ostream&amp;</code> parameter to <code>Card::PrintCard()</code></li>
</ol>

<p>The reason I am suggesting this is because right now there is no way to re-direct the print of card. It only goes to <code>std::cout</code>. If you want to make it go to <code>std::cerr</code> or a <code>fstream</code>, for instance, you can't. Your code would be much more flexible  if it accepted a <code>ostream</code> like this:</p>

<pre><code>void Card::printCard(ostream&amp; stream) const
{
    switch (m_rank)
    {
        case CR_2: stream &lt;&lt; '2'; break;
        case CR_3: stream &lt;&lt; '3'; break;
        case CR_4: stream &lt;&lt; '4'; break;
        case CR_5: stream &lt;&lt; '5'; break;
        case CR_6: stream &lt;&lt; '6'; break;
        case CR_7: stream &lt;&lt; '7'; break;
        case CR_8: stream &lt;&lt; '8'; break;
        case CR_9: stream &lt;&lt; '9'; break;
        case CR_T: stream &lt;&lt; 'T'; break;
        case CR_J: stream &lt;&lt; 'J'; break;
        case CR_Q: stream &lt;&lt; 'Q'; break;
        case CR_K: stream &lt;&lt; 'K'; break;
        case CR_A: stream &lt;&lt; 'A'; break;
    }

    switch (m_suit)
    {
        case CS_S: stream &lt;&lt; 'S'; break;
        case CS_D: stream &lt;&lt; 'D'; break;
        case CS_C: stream &lt;&lt; 'C'; break;
        case CS_H: stream &lt;&lt; 'H'; break;
    }
}
</code></pre>

<p>Of course, this breaks current code, since the current code isn't expecting a parameter, so you can overload the function lie this if you want:</p>

<pre><code>void Card::printCard() const
{
    printCard(std:cout);
}
</code></pre>

<p>That will make current code continue to work while making your printing far more flexible.</p>

<ol start="2">
<li>Consider adding a stream operator</li>
</ol>

<p>Now, all I said about #1 is good, but there's another reason to implement a <code>printCard()</code> function that takes a <code>ostream</code> as a parameter. That is because creating a stream operator for our card class really easy:</p>

<pre><code>ostream&amp; operator &lt;&lt;(ostream&amp; stream, Card c) {
    c.printCard(stream);

    return stream;
}
</code></pre>

<p>Now, with that in place, you have a new way to print to <code>std::cout</code>, and it looks like this:</p>

<pre><code>std::cout &lt;&lt; myCard;
stg::cout &lt;&lt; "We can even put a message here: " &lt;&lt; myCard &lt;&lt; " and even put a message after, if we want too!\n";
</code></pre>

<p>In fact, <code>std::cerr</code> and <code>fstreams</code> work this way too. It makes things a lot easier.</p>

<ol start="3">
<li>Consider making a <code>Hand</code> class</li>
</ol>

<p>Instead of using <code>std::vector&lt;Card*&gt;</code>, it would be much easier if you made a <code>Hand</code> class, or even a using or typedef name called <code>Hand</code>. It would look something like this:</p>

<pre><code>class Hand {
    // Option 1: create a class
};
// Or...
// Option 2: use using.
using Hand = std::vector&lt;Card*&gt;;
// or...
// Option 3: use a typedef
typedef std::vector&lt;Card*&gt; Hand;

</code></pre>

<p>Options 1 and 2 are preferred. Use 3 if you have to for some crazy unforseen reason.</p>

<p>This way, you can make a general purpose <code>Deck::deal()</code> function that would replace <code>Deck::dealPlayer()</code> and <code>Deck::dealDealer()</code>:</p>

<pre><code>void Deck::deal(Hand&amp; hand) {
    // implementation...
}
</code></pre>

<p>And turn the dealer and player hands into a <code>Hand</code>:</p>

<pre><code>public:
    Hand m_playerHand;
    Hand m_dealerHand;
</code></pre>

<p>You know, this leads me to my next point:</p>

<ol start="4">
<li><code>m_playerHand</code> and <code>m_dealerHand</code> seem unneeded as members of <code>Deck</code></li>
</ol>

<p>Instead, it feels like you should use them as member variables in <code>playGame()</code> instead:</p>

<pre><code>void playGame(Deck &amp;gameDeck)
{
    Hand playerHand;
    Hand dealerHand;

    // implementation...

    // then, if you take suggestion number 3, you can fill it like this:
    gameDeck.deal(playerHand);
    gameDeck.deal(dealerHand);

}
</code></pre>

<p>I'm sure there are lots of other things you could do, but I think this will get you started. Once you take my suggestions and yuri's suggestions, it will probably become more apparent how you could reduce your code even more.</p>
    </div>