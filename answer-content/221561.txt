<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Reference</h3>

<p>When solving puzzles from websites, I always include the link and the task description.
In case of Project Euler questions, this already helped me figure out that their tasks change over time.
In your case, such a reference could look like</p>

<pre><code># https://www.geeksforgeeks.org/generate-all-possible-sorted-arrays-from-alternate-elements-of-two-given-arrays/
# Given two sorted arrays A and B, generate all possible arrays such that first element is taken from A then from B then from A and so on in increasing order till the arrays exhausted. The generated arrays should end with an element from B.
</code></pre>

<h3>Redundant comparisons</h3>

<p>In your code I see <code>if xxx == True:</code> which can be shortened to <code>if xxx:</code>. I wrote the same code as a beginner, so I guess it's absolutely normal.</p>

<p>Similarly, <code>if xxx == False:</code> would be written as <code>if not xxx:</code>.</p>

<p>An IDE like PyCharm will give you hints for such issues and even help you replace it by an equivalent.</p>

<h3>Unnecessary continue statement</h3>

<pre><code>if print_valid == False:
    continue  
</code></pre>

<p>This part is unnecessary, since it's the last statement of the loop, so the loop would continue anyway.</p>

<h3>Separate output from logic</h3>

<p>Do the calculations on their own, then do all the printing. E.g. define a function which prints the lists as you like to:</p>

<pre><code>def print_all(results: List) -&gt; None:
    for result in results:
        for item in result:
            print(item, sep=" ", end=" ")
        print()
</code></pre>

<h3>Type safety</h3>

<p>You can <code>from typing import *</code>and use type hints to make clear what types are used. This is especially useful when using functions (see next section).</p>

<h3>Use testable functions</h3>

<p>Right now, you have some input which gives some output, but you don't have a test whether your code works for the given input. The website already indicates that there is a defined set of solutions for the given input <code>A = {10, 15, 25}</code>and <code>B = {1, 5, 20, 30}</code>.</p>

<p>You could implement it like this:</p>

<pre><code>def get_potential_solutions() -&gt; List:
    list_solutions = []
    ...
    return list_solutions = []

def filter_solutions(list_solutions: List) -&gt; List:
    # Print only valid solutions:
    valid_results = []
    current_result = []
    for item in list_solutions:
    ...
    return valid_results

list_solutions = get_potential_solutions(A, B)
list_solutions = filter_solutions(list_solutions)
print_all(list_solutions)
</code></pre>

<p>You can then implement an assertion which will warn you whenever you broke your code.</p>

<pre><code>givensolution = [[10, 20], [10, 30], [15, 20], [15, 30], [25, 30], [10, 20, 25, 30], [15, 20, 25, 30]]
solution = filter_solutions(get_potential_solutions([10, 15, 25], [1, 5, 20, 30]))
assert (solution == givensolution)
</code></pre>

<p>If you do this many times, read about unit tests.</p>

<h3>Naming</h3>

<p>I still didn't understand the algorithm you implemented. It may have to do with the terms <code>x</code>, <code>item</code>, <code>index</code>, <code>newA</code> and <code>newB</code>, <code>itemA</code> and <code>itemB</code>, which tell me nothing.</p>

<ul>
<li><code>x</code> is used in <code>itertools.combinations()</code>, so it must be the length</li>
<li><code>newA</code> and <code>newB</code> are combinations, so I renamed them to <code>combinationsA</code> and <code>combinationsB</code></li>
<li><code>itemA</code> and <code>itemB</code> are a specific combination, so I renamed them to <code>combinationA</code> and <code>combinationB</code></li>
</ul>

<p>You may say that this is not an improvement. I'd say I moved from a nonsense name to a honest name, which is at least one step better, but still on <a href="https://twitter.com/llewellynfalco/status/634014935706636288" rel="nofollow noreferrer">level 2 of the 6 stages of naming</a></p>

<h3>Doubled condition</h3>

<p>IMHO, the condition in <code>get_potential_solutions()</code></p>

<pre><code>if combinationA[position] &gt;= combinationB[position]:
    valid = False
    break
</code></pre>

<p>is identical to the condition in <code>filter_solutions()</code></p>

<pre><code>if item[0][index] &gt;= item[1][index]:
    valid = False
    break
</code></pre>

<p>Since it is about filtering, I'd prefer to remove it in the potentials method.</p>

<h3>Make smaller methods</h3>

<p>The check whether a potential solution is valid or not can be moved into its own method.</p>

<pre><code>def is_valid_solution(potential):
    for index in range(len(potential[0])):
        if potential[0][index] &gt;= potential[1][index]:
            return False
        if index &gt;= 1:
            if potential[0][index] &lt;= potential[1][index - 1]:
                return False
    return True
</code></pre>

<p>The next loop seems to just clean up the results in order to remove the tupels. This can be done in a method as well:</p>

<pre><code>def flatten(potential):
    current_result = []
    for index in range(len(potential[0])):
        current_result.append(potential[0][index])
        current_result.append(potential[1][index])
    return current_result
</code></pre>

<h3>Single responsibility</h3>

<p>The <code>filter_solutions()</code> method now does 2 things: filtering and flattening. One could argue that this should be separated. And it's simple to do now.</p>

<h3>Final result</h3>

<pre><code>import itertools
from typing import *

A = [10, 20, 30, 40]
B = [11, 21, 31, 41]


def get_potential_solutions(a: List, b: List) -&gt; List:
    potentials = []
    for length in range(min(len(a), len(b))):
        combinationsA = list(itertools.combinations(a, length + 1))
        combinationsB = list(itertools.combinations(b, length + 1))
        for combinationA in combinationsA:
            for combinationB in combinationsB:
                potentials.append([combinationA, combinationB])
    return potentials


def filter_solutions(potentials: List) -&gt; List:
    valid_results = []
    for potential in potentials:
        if is_valid_solution(potential):
            valid_results.append(potential)
    return valid_results


def is_valid_solution(potential):
    for index in range(len(potential[0])):
        if potential[0][index] &gt;= potential[1][index]:
            return False
        if index &gt;= 1:
            if potential[0][index] &lt;= potential[1][index - 1]:
                return False
    return True


def flatten_list(solutions: List) -&gt; List:
    result = []
    for solution in solutions:
        result.append(flatten(solution))
    return result


def flatten(potential):
    current_result = []
    for index in range(len(potential[0])):
        current_result.append(potential[0][index])
        current_result.append(potential[1][index])
    return current_result


def print_all(results: List) -&gt; None:
    for result in results:
        for item in result:
            print(item, sep=" ", end=" ")
        print()


givensolution = [[10, 20], [10, 30], [15, 20], [15, 30], [25, 30], [10, 20, 25, 30], [15, 20, 25, 30]]
solution = flatten_list(filter_solutions(get_potential_solutions([10, 15, 25], [1, 5, 20, 30])))
assert (solution == givensolution)

list_solutions = get_potential_solutions(A, B)
list_solutions = filter_solutions(list_solutions)
print_all(flatten_list(list_solutions))
</code></pre>
    </div>