<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After a little back and forth, we got the suggestions of the previous question implemented. However there are still some minor issues:</p>

<ul>
<li><p><em>Kind of strange mixing int and float calculations</em> – I know you got 0 when doing divisions, but that is more of a test number issue than a fault in code. As it currently stands you do float numbers for the division, but your operator is <code>operator.floordiv</code> which rounds of the division.</p>

<p>If you want to use floats when dividing, then change to <code>operator.div</code>, and if you want to use integer division remove the <code>float(input("Number: ")) ...</code>, and let the <code>operator.floordiv</code> remain.</p></li>
<li><p><em>No need for the initializing values when using <code>functools.reduce</code></em> – The newer reduce function does what is expected when reducing, so you don't need this at all in the new code.</p></li>
<li><p><em>The advice to use <code>doctest</code> still applies</em> – This both provides examples for use, and verifies that your code does what it is expected to do.</p></li>
<li><em>Don't use top level code, include it in <code>main()</code></em> - Move all of your code at the top level into a function, which you call from <code>if __name__ == '__main__':</code>, as this cleans up the code interface, allows your function to be called if imported in another file, and it looks nice.</li>
</ul>

<h2>Refactored code</h2>

<p>When implementing all of this, and using integer division the code looks like this:</p>

<pre><code>import operator
import functools
import doctest


OPERATION = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.floordiv
}

def calculate(numbers=None, operator=None):
    """Apply the operator to all numbers, and print result.

    &gt;&gt;&gt; calculate([1, 2, 3, 4], '+')
    10
    &gt;&gt;&gt; calculate([1, 2, 3, 4], '-')
    -8
    &gt;&gt;&gt; calculate([1, 2, 3, 4], '*')
    24
    &gt;&gt;&gt; calculate([120, 2, 3, 4], '/')
    5
    """

    if not numbers:
        amount_of_numbers = int(input("How many numbers? "))
        numbers = [int(input("Number: ")) for _ in range(amount_of_numbers)]

    if not operator:        
        operator = input("Which operator (*, /, +, -)? ")

    result = functools.reduce(OPERATION[operator], numbers)
    print(result)

if __name__ == '__main__':
    doctest.testmod()
    calculate()
</code></pre>

<p>Note how this way of making it a function allows for 'proper' use as a function, whilst still allowing for user to input the missing numbers and/or operator of choice.</p>

<p>Another possible extension would be to add another parameter to control whether it is printing the result, or returning it for further calculations. Possibly even adding a loop around it, so you can repeat calculating other stuff?</p>
    </div>