<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A decent compromise between readability and execution speed is this:</p>

<pre><code>#include &lt;stdint.h&gt;
#include &lt;string.h&gt;

char* i32tostr (int32_t n, char str[32+1])
{
  const char NIBBLE_LOOKUP[16][4] = 
  {
    "0000", "0001", "0010", "0011",
    "0100", "0101", "0110", "0111",
    "1000", "1001", "1010", "1011",
    "1100", "1101", "1110", "1111",
  };

  char* ptr = str;
  for(uint32_t bit=32; bit&gt;0; bit-=4)
  {
    uint32_t shift = bit - 4;
    uint32_t mask = 0xFu &lt;&lt; shift;
    size_t index = (n &amp; mask) &gt;&gt; shift;
    memcpy(ptr, NIBBLE_LOOKUP[index], 4); 
    ptr+=4;
  }
  *ptr = '\0';

  return str;
}
</code></pre>

<p>This reads the number 4 bits (a nibble) at a time from MSB to LSB. It masks out a nibble, then does a table look-up to get the pre-calculated string. </p>

<p>As it happens, a 4 byte string can be copied in a single instruction on 32 bit computers. Note the intentional subtle detail: <code>const char NIBBLE_LOOKUP[16][4]</code> instead of <code>const char* NIBBLE_LOOKUP[16]</code>. This means that the null terminator in the string literals is <em>not</em> stored and we can't use <code>strcpy</code>. Instead we use the significantly faster <code>memcpy</code>.</p>

<p>The local variables in the for loop are there for readability and don't affect performance. I could as well have written it as</p>

<pre><code>for(uint32_t shift=28; shift&gt;0; shift-=4)
{
  memcpy(ptr, NIBBLE_LOOKUP[(n &amp; 0xFu&lt;&lt;shift) &gt;&gt; shift], 4); 
  ptr+=4;
}
</code></pre>

<p>But that's much harder to read and yields exactly the same machine code anyway.</p>

<p>In terms of execution speed, this should be much faster than parsing bit by bit and building up a string that way. The x86 disassembly looks pretty good; branch-free and cache-friendly: <a href="https://godbolt.org/z/DgJcVC" rel="nofollow noreferrer">https://godbolt.org/z/DgJcVC</a>.</p>

<hr>

<p>Complete example:</p>

<pre><code>#include &lt;stdint.h&gt;
#include &lt;string.h&gt;

char* i32tostr (int32_t n, char str[32+1])
{
  const char NIBBLE_LOOKUP[16][4] = 
  {
    "0000", "0001", "0010", "0011",
    "0100", "0101", "0110", "0111",
    "1000", "1001", "1010", "1011",
    "1100", "1101", "1110", "1111",
  };

  char* ptr = str;
  for(uint32_t bit=32; bit&gt;0; bit-=4)
  {
    uint32_t shift = bit - 4;
    uint32_t mask = 0xFu &lt;&lt; shift;
    size_t index = (n &amp; mask) &gt;&gt; shift;
    memcpy(ptr, NIBBLE_LOOKUP[index], 4); 
    ptr+=4;
  }
  *ptr = '\0';

  return str;
}

#include &lt;stdio.h&gt;
#include &lt;limits.h&gt;

int main (void)
{
  char str[32+1];

  puts(i32tostr(0,str));
  puts(i32tostr(1,str));
  puts(i32tostr(-1,str));
  puts(i32tostr(INT_MIN,str));
  puts(i32tostr(INT_MAX,str));
}
</code></pre>

<p>Output:</p>

<pre><code>00000000000000000000000000000000
00000000000000000000000000000001
11111111111111111111111111111111
10000000000000000000000000000000
01111111111111111111111111111111
</code></pre>
    </div>