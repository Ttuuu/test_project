<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Standard public announcement: always include <code>Option Explicit</code> at the top of modules.</p>

<h2>How to improve performance</h2>

<p>Two tips here:</p>

<ul>
<li>Put your range into an array and work with the array, not Excel
objects. The switching between Excel and VBA models is computationally expensive.</li>
<li>Avoid wherever possible <code>ReDim</code>ming and <code>Preserve</code>-ing arrays. They are computationally expensive.</li>
</ul>

<p>To use your first function as an example</p>

<pre><code>Public Function MeanArr(rng As Range) As Double '&lt;-- I will make a comment about this later
'Error checks required for if the user selected a single cell, or if they selected more than one column.

    Dim initialValues as Variant '&lt;-- create an array here
    Dim initialQuantities as Variant '&lt;-- be explicit with all values you want to use
    initialValues = rng.Value 
    initialQuantities = rng.Offset(0,1).Value
    'Dim Arr() ' &lt;-- This would have been an array of variants, which is subtly different 
    Dim i As Long, j As Long
    Dim totalSum as Double, totalCount as Double 
    For j = LBound(initialValues,1) to UBound(initialValues,1)
        'Error checking required for valid input - is it really a Number?
        totalCount = totalCount + CDbl(initialQuantities(j,1))
        totalSum = totalSum + CDBL(initialValues(j,1)) * CDbl(initialQuantities(j,1))

    Next j
    MeanArr = totalSum / totalCount

    Exit Function '&lt;--- left this here for now but will address errors later.
ErrHandler:
    MeanArr = "Error" '&lt;-- I will make a comment about this later

End Function
</code></pre>

<p>You don't use <code>ws</code> (yes, you have a <code>With</code> statement, but how the code is written, that <code>With</code> is not used. Nor is it needed!</p>

<p>I was going to use a Collection instead of an expanding array - but turns out not necessary in this case. However, for the more complex formulae, consider using a Collection instead of an array, or try to resize the array only once at the beginning. See <a href="https://stackoverflow.com/a/56842847/9101981">https://stackoverflow.com/a/56842847/9101981</a></p>

<h2>Are the functions working correctly?</h2>

<p>I don't know - I hope they are otherwise this post is off-topic and I am wasting my time on this response! However, you can derive tests to ensure your own correctness.</p>

<h2>Proper error handling</h2>

<p>You are creating a UDF - Let Excel do some of the work for you.</p>

<pre><code>Public Function MeanArr(rng As Range) As Variant '&lt;-- significant
'Error checks required for if the user selected a single cell, or if they selected more than one column.

    If rng.Columns.Count &gt; 1 then
        MeanArr = CVErr(xlErrName)
        Exit Function
    End If

    Dim initialValues as Variant '&lt;-- create an array here
    Dim initialQuantities as Variant '&lt;-- be explicit with all values you want to use
    initialValues = rng.Value 
    initialQuantities = rng.Offset(0,1).Value

    Dim j As Long
    Dim totalSum as Double, totalCount as Double 
    For j = LBound(initialValues,1) to UBound(initialValues,1)
        'Error checking required for valid input - is it really a Number?
        If Not IsNumeric() or Not IsNumeric() Then
            MeanArr = CVErr(xlErrNum)
            Exit Function
        End If
        totalCount = totalCount + CDbl(initialQuantities(j,1))
        totalSum = totalSum + CDBL(initialValues(j,1)) * CDbl(initialQuantities(j,1))

    Next j
    MeanArr = CDbl(totalSum / totalCount)
' Error handling is now done in the code logic.    
End Function
</code></pre>

<p>Leaving the function return type as Variant is deliberate, it means that you can control what is returned and use the in-built error types to indicate to your user any issues. It also means that if you link the results cell to any other cell, Excel knows how to handle chained errors. Excel might misinterpret a random string ("error") potentially hiding issues from the user if you didn't use the built in types.</p>

<h2>Use Worksheet functions?</h2>

<p>This is an 'it depends' answer. For speed, writing your own routines will generally be faster. However, some of the more complex functions, using the built in worksheet function may be easier. Trade off against your own requirements, just remember that every switch to the Excel model costs.</p>

<h2>Use Global Array?</h2>

<p>Definitely not. You are writing portable, reusable UDFs which take a range as a parameter. Using a global variable just ties you down with no flexibility.</p>
    </div>