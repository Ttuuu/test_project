<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The permutation matrix always has the same form if you look at it the right way. 
Taking the indices of the elements as their identity you basically have the following "vector of vectors":</p>

<pre><code>[0, n//2+1, 1, n//2+2, ..., n//2, n]
</code></pre>

<p>once you realize that it becomes a matter of "interweaving the two halves of the identity matrix". <a href="https://stackoverflow.com/q/5347065/1803692">This Stack Overflow question</a> gives an interesting suggestion on how to do that.</p>

<p>This should work just fine for your purposes vastly simplifying the array accesses by virtue of using slicing to a bit more of its potential:</p>

<pre class="lang-py prettyprint-override"><code>def permutation_matrix(N):
    I = np.identity(N)
    P = np.empty((N,N))
    mid = N//2 if N % 2 == 0 else N//2+1
    P[0::2] = I[:mid]
    P[1::2] = I[mid:]
    return P
</code></pre>

<p>with this rather satisfying result:</p>

<pre><code>&gt;&gt;&gt; numbers
array([0, 1, 2, 3, 4, 5])
&gt;&gt;&gt; numbers.dot(permutation_matrix(6))
array([0., 2., 4., 1., 3., 5.])
</code></pre>

<p>introducing the more appropriate <code>mid</code> that uses flooring division even allows handling an uneven amount of numbers:</p>

<pre><code>&gt;&gt;&gt; numbers = np.array([0,1,2,3,4])
&gt;&gt;&gt; numbers.dot(permutation_matrix(5))
array([0., 2., 4., 1., 3.])
</code></pre>
    </div>