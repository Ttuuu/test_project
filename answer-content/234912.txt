<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some comments:</p>

<ol>
<li>Use the built-in database promise support in mysql2 rather than promisify stuff yourself.</li>
<li>In Model, don't hide low level database errors.  If the database has an error, let the caller see the error.  It's up to the caller what to do with errors.</li>
<li>There's no reason for your <code>Model.getStats()</code> to be <code>async</code>.</li>
<li>Service should use promises to communicate back the results, not a callback.  That's the modern way to handle asynchronous results.  When you already have a promise, don't introduce a plain callback.</li>
<li>In <code>Controller.getStats()</code>, when you get an error and do <code>res.send(err)</code> and then <code>res.json(result)</code>.  You can't call both of those.  You send one response and only one response for each request.  Then, your code doesn't send any response when there is no an error.</li>
<li>Log every error somewhere so you can diagnose server problems when they are occuring.</li>
<li>As currently shown, there's no reason for <code>Controller.getStats()</code> to be <code>async</code>.  You only need a function to be <code>async</code> if you need to use <code>await</code> or you're trying to use <code>async</code> to catch synchronous exceptions for you.  It appears you are throwing <code>async</code> in the function definition any time you have an asynchronous operation.  That's not the right reason to use <code>async</code> on your functions.</li>
<li>Performance/speed of this type of code is largely going to be determined entirely by your database configuration and performance as there's nothing in this code that really influences the performance/speed much.  You aren't doing any processing of the data here.  The extra Service layer isn't adding much value, but also probably doesn't really change much compared to the DB performance.</li>
</ol>
    </div>