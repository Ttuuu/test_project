<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What I dislike about your solution is the unnecessarily large amount of complexity your code has, which takes a toll on its performance.</p>

<p>When I solved this problem myself, I used the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">Sieve of Eratosthenes</a> to generate a list of prime numbers up to an arbitrary limit (I also picked one million, but you could <a href="https://math.stackexchange.com/questions/1270814/bounds-for-n-th-prime">use a formula</a> to compute it) and indexed that list at 10,000 to get the 10,001st number.</p>

<p>Here is how I implemented the sieve:</p>

<pre><code>def primes_upto(limit):
    limitN = limit+1
    not_prime = set()
    primes = [2]

    for i in range(3, limitN, 2):
        if i in not_prime:
            continue

        for j in range(i*3, limitN, i*2):
            not_prime.add(j)

        primes.append(i)
    return primes
</code></pre>

<p>As you can see, this approach reduces the complexity of your code. Also, this is approximately 28 seconds quicker than your approach.</p>
    </div>