<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You came far to a good solution.</p>

<pre><code>public void getDayCount(List&lt;DaySpan&gt; daySpans){
    Map&lt;LocalDate, Long&gt; freqs = daySpans.stream()
            .flatMap(daySpan -&gt;
                IntStream.range(0, daySpan.numberOfDays)
                    .mapToObj(i -&gt; daySpan.date.plusDays(i)))
            .collect(
                Collectors.groupingBy(Function.identity(), Collectors.counting()));

    freqs.entrySet().stream()
            .sorted(Map.Entry::getKey)
            .forEach(System.out::println);
}
</code></pre>

<ul>
<li>Creating a <code>Stream&lt;LocalDate&gt;</code> for some DaySpan is simply realized by an <code>IntStream.range</code>.</li>
<li>A flatMap makes a larger Stream of LocalDates.</li>
<li>Turning them into a counting map you already did.</li>
<li>Sorting them on the date remains.</li>
<li>You printed the entries as Entry, so I kept it that way.</li>
</ul>
    </div>