<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Building reusable programs</h3>

<blockquote>
  <p>Just fyi, this code wont run on its own as i have not included the HTML/CSS that accompanies this. I would like to not worry about the front end design in this particular post.</p>
</blockquote>

<p>Therein lies the top advice I can give to you. Try this exercise:</p>

<ol>
<li><p>Implement the main logic as a module with no UI (ideally unit tested)</p></li>
<li><p>Implement a snippet of code that demonstrates using the module, either by using hard-coded parameters, or input from the console</p></li>
<li><p>Implement the UI that uses the module, operations triggered by mouse or keyboard events, taking parameters from the events or the DOM</p></li>
</ol>

<p>You can do all that without using any frameworks or anything fancy.
Step 1 could go in a single <code>program.js</code> file,
with no code execution in the global scope.
Step 2 could be a function called <code>main</code> in the same file,
and it could be executed in global scope.
At this point the program should be executable by <code>node program.js</code>.
No frameworks used.</p>

<p>By building up your programs this way,
you end up with reusable and testable components.</p>

<h3>Your main questions</h3>

<blockquote>
  <ol>
  <li>What redundancies i'm failing to see and remove?</li>
  </ol>
</blockquote>

<p>Not a lot, congrats!
In <code>operateOnEntry</code>,
the parsing of the operators have some similar elements,
essentially following the logic:</p>

<ul>
<li>Find the index of an operator in the input array (which is a mix of numbers and operators)</li>
<li>Apply the operator using as arguments the left and right element</li>
<li>Replace the 3 values in the array with the result of the operation</li>
<li>Repeat until a single value remains</li>
</ul>

<p>Instead of spelling out the steps for each operator one by one,
you could have a mapping of <em>operators to operations</em>,
loop over the operators according to their precedence,
and follow the common logic as outlined above.</p>

<hr>

<blockquote>
  <ol start="2">
  <li>How is my naming for var's and functions? Is it clear or vague?</li>
  </ol>
</blockquote>

<p><code>operateOnEntry</code> doesn't describe well what it does.
What kind of operation? What kind of entry?
It actually evaluates a mathematical expression.
I'd call it <code>evaluate</code> and name its parameter <code>expression</code>,
and have this as a function of an abstraction (prototype) called <code>Calculator</code>.</p>

<p><code>filterUserInput</code> doesn't describe well what it does.
To "filter" usually means to eliminate some values from the input.
This function takes a string as input,
it operates on some global values,
and returns either an array or a string.
I think this function needs to be redesigned,
naming alone cannot fix its issues.</p>

<hr>

<p><code>let a, b, c</code> is clearly not great.
And it's not great to declare variables up front when they can be declared when they are initialized.
I would have used <code>let arg1 = ...</code> and <code>let arg2 = ...</code>,
and use <code>operator(arg1, arg2)</code> inlined without assigning it to <code>let result = ...</code>.</p>

<hr>

<p>Take a look at the different kind of uses of the <code>index</code> variable:</p>

<blockquote>
<pre><code> } else if (userEntry.includes("/")) {
  index = userEntry.indexOf('/');
  a = Number(userEntry[index - 1]);
  b = Number(userEntry[index + 1]);
  c = a / b;
  userEntry.splice((index - 1), 3, c);
  return operateOnEntry(userEntry);
 } else if (currentEntry.includes("+") || currentEntry.includes("-")) {
  index = userEntry[1];
  a = Number(userEntry[0]);
  b = Number(userEntry[2]);
  console.log("index: " + index);
  if (index == '+') {
</code></pre>
</blockquote>

<p>The first use is good, it indicates the <em>index</em> of an array.
In the second use it's not actually an index, but something else.</p>

<hr>

<p>Not related to naming, but to using variables, consider this:</p>

<blockquote>
<pre><code>  testCurrentEntry = currentArea.textContent; //.split(regexOperands)
  testCurrentEntry = testCurrentEntry.split(/([+\-\/x=])/g);
</code></pre>
</blockquote>

<p>After the first assignment, <code>testCurrentEntry</code> has a string value.
After the second assignment, the same variable has an array value.
This quickly gets confusing.
A type-safe language would not let you do this, for your own good.
I suggest to adopt the habit of not reusing a variable with multiple types,
even when the language allows it.</p>

<hr>

<p>Another issue with variables is in <code>operateOnEntry</code>,
<code>userEntry</code> and <code>currentEntry</code> are used,
but they actually point to the same value.
This is both extremely confusing and extremely error-prone.</p>

<hr>

<blockquote>
  <ol start="3">
  <li>How is my overall readability? Is what i'm writing even clear, or is it hard to decipher?</li>
  </ol>
</blockquote>

<p>I find it hard to understand, for several reasons:</p>

<ul>
<li>The calculator logic and the UI are mixed together</li>
<li>The names don't describe themselves well</li>
<li>There are many global variables (ideally there should be none), and global state is always hard to follow</li>
</ul>

<hr>

<blockquote>
  <ol start="4">
  <li>Are my comments helpful or redundant?</li>
  </ol>
</blockquote>

<p>I haven't found a helpful comment,
but I haven't tried to understand the entire code.
Since you ask, here are some examples to improve.</p>

<p>This comment states the obvious:</p>

<blockquote>
<pre><code>  //first we restrict input length to 17
  if (currentArea.textContent.length &gt; 17 || totalArea.textContent.length &gt; 17) {
</code></pre>
</blockquote>

<p>This comment is actually wrong, the function returns non-array values in some cases.</p>

<blockquote>
<pre><code>function filterUserInput(userInput) {
 //this function converts the user input into an array
</code></pre>
</blockquote>

<p>Incorrect comments cause harm.</p>

<p>It's best when the code can speak for itself without comments.
It's not always possible, but a good goal to strive for.</p>
    </div>