<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few major issues here. First, as already noted you could use <code>if (x) {...}</code> instead of <code>if (x == true) {...}</code>. Second the variable <code>result</code> is only used once so you can move the entire <code>int.TryParse(x, out i)</code> into the if condition: <code>if (int.TryParse(x, out i)) {...}</code>. Next you type <code>return source;</code> four times but you only need it once: at the end of the method. And fourth the first two conditions can be combined as C# uses shortcircuiting in evaluating if conditions. So <code>if (!string.isNullOrEmpty(source) || source.Contains("&lt;sup&gt;")) {...}</code>.</p>

<p>Also I'm not too familiar with regexes in C# but I suspect you can skip the <code>source.Contains("&lt;sup&gt;")</code> command entirely as the regex call makes it redundant. And I suspect the <code>!string.IsNullOrEmpty(source)</code> can be replaced with <code>source != null</code> for the same reason.</p>

<p>Also in the words of JetBrains: Invert 'if' statement to reduce nesting. That is instead of:</p>

<pre><code>if (cond1) {
    doStuff();
    if (cond2) {
        doMoreStuff();
    }
}
return;
</code></pre>

<p>You have:</p>

<pre><code>if (!cond1) {
    return;
}
doStuff();
if (cond2) {
    doMoreStuff();
}
return;
</code></pre>

<p>If you have nested if conditions it's probably a good idea. But it's pretty minor (some people may even disagree on this one).</p>
    </div>