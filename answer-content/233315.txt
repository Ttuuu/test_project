<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<p>Functions <em>do</em> things, so the name for a function should normally be a verb. In your case, the function should be something like <code>bf_interpret</code>, not <code>...interpreter</code>.</p>

<p>I'd also at least consider making <code>bf</code> a namespace, so the call in <code>main</code> would be something like:</p>

<pre><code>bf::interpret(s);
</code></pre>

<h3>Prefix operators</h3>

<p>Lacking a reason to do otherwise, I'd prefer to use prefix operators rather than postfix.</p>

<pre><code>     case '&gt;': ++ptr; break;
     case '&lt;': --ptr; break;
</code></pre>

<h3>Use the right types</h3>

<p>Since you're restricting the items in <code>values</code> to the range 0..255 anyway, I'd at least consider making them <code>uint8_t</code>, which guarantees exactly that range. This lets you simplify the code somewhat:</p>

<pre><code>        case '+': ++values[ptr]; break;
        case '-': --values[ptr]; break;
</code></pre>

<p>If you wanted the values to act differently, I'd still just use increment and decrement here, and implement the desired wrapping (or whatever) behavior in a separate data type, and make <code>values</code> a vector of that data type.</p>

<h3>Input/Output</h3>

<p>While I think Martin York is on the right track in saying that the input to and output from interpretation should be passed as parameters, I'd disagree about the exact form of those parameters. Rather than streams, I'd make them iterators, whose exact types are specified as template parameters. A user who wants to read/write streams for the I/O can do so by passing stream iterators. At the same time, a user who wants to read from a vector and write to a string (or whatever) can do that as well.</p>
    </div>