<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My attention is really drawn to your error-codes script.  I love a good lookup array, and you almost have one, but it needs some polishing.</p>

<ul>
<li>Rather than declaring the lookup variable with <code>global</code> to put it in the function's scope, realize that you probably aren't going to be modifying the data during processing, so it is a perfect candidate for being a constant.  A constant does not suffer scoping issues -- it is globally available.</li>
<li>Construct your lookup array to instantly deliver exactly what you need.  Don't bother with performing string manipulations to the first character.  Spend the few more characters in the array and just name boolean values in the second element of each subarray in the lookup.</li>
<li><code>error_codes</code> is a strange name for data that contains both positive and negative responses.  I wouldn't be saving any positive messages, but if you truly need to store the positive message, then it would be better to rename the file, the lookup, and the custom function.</li>
<li>The beauty of writing a lookup array with identifiable keys is that you can leverage a key check (<code>isset()</code> or similar) which will always perform better than an iterative process (even with an early <code>break</code>/<code>return</code>).  This is purely a matter of how php arrays are designed and processed. See my snippet for how simple the function call can be after the lookup array is sweetened up.</li>
</ul>

<p>Code: (<a href="https://3v4l.org/NpPUX" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>const response_codes = [
    ["Usuario incorrecto.", false],
    ["Password incorrecta.", false],
    ["Credenciales inv√°lidas.", false],
    ["Logueado correctamente.", true],
    ["No se pudo conectar al servidor LDAP para validar las credenciales.", false]
];

function interpretResponse($id)
{
    return response_codes[$id] ?? ["Error desconocido", false];
}
</code></pre>

<p>With <a href="https://www.php.net/manual/en/migration70.new-features.php" rel="nofollow noreferrer">null coalescing operator</a> in play, it's almost not worth declaring the custom function.</p>

<p>Beyond that...</p>

<ul>
<li><p>I don't see the point in writing <code>unset($_SESSION["error"]);</code> near the top of your LDAP connection script because no matter which outcome is reached, the value will be overwritten.</p></li>
<li><p>When you want to check if a string begins with specific characters use:</p>

<pre><code>if (strpos($link, 'docs/') === 0) {
</code></pre>

<p>instead of</p>

<pre><code>if (substr($link, 0, 5) === 'docs/') {
</code></pre>

<p>because you don't need the string, you only need to check the location.  It's not going to be a major performance booster, but I consider it to be more deliberate in coding intent.  I have seen other cases where the substring is a bit longer (say 20 or more characters) and the developer would have to go to the trouble to count the characters each time the substring was changed -- increasing the risk of human error.  <code>strpos()</code> -- when finding a substring from the start of the string (or near the start) spares that irritation.</p></li>
<li><p>You might also consider the slight shorting of conditional syntax from <code>variable.length === 0</code> to <code>!variable.length</code>.  They are equivalent.</p></li>
<li><p>Finally, you might like to check out this handy javascript feature: <a href="https://stackoverflow.com/a/14101453/2943403">https://stackoverflow.com/a/14101453/2943403</a>  <code>element.classList.add("input-error");</code>  This will spare you having the concat and trim stuff as you go.</p></li>
</ul>
    </div>