<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Whenever you find yourself writing code that feels the same, consider whether you can create a function to do it. For example consider using a function for padding to two digits.</p>

<hr>

<p>Instead of turning <code>newYear</code> into a string so you can split it on digits, consider using the remainder operator (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder_()" rel="noreferrer"><code>%</code></a>). That is, <code>var newYear = newDate.getFullYear() % 100;</code> </p>

<p>Although (actually, because) javascript lets you play fast and loose with whether a variable is a string or a number or something else, it's worth avoiding switching between them where possible. It also has the slight advantage that it always gets the last two digits, even if the year had 3 or 5 digits in it. (Of course that won't be relevant for a very long time if it only prints the current date, but you shouldn't bank on that.)</p>

<hr>

<p>I would be inclined to make this code slightly more general by allowing it to return rather than print out the formatted string, and allowing it to take a <code>Date</code> as a parameter rather than only using the current date. If you do want to print it, you can always do that with the output. </p>

<p>Of course that might actually be marginally <strong>longer</strong>, but I think that's worth it. Unless you're in a smallest number of characters competition, it is better to have readable, flexible code than short code if they conflict. Length is only a problem when there's too much there to keep in your head how it fits together.</p>

<hr>

<p>Sticking strings together one bit at a time with <code>+</code> is an expensive thing to do. It's worth getting into the habit of using something like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" rel="noreferrer"><code>join</code></a> As shown in jstudenski's code.</p>
    </div>