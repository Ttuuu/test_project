<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid magic</h1>
<ul>
<li><p>Avoid littering your code with magic numbers and strings. Keep them in one place and give them meaningful names. This makes it much easier to maintain.</p>
<p>Visualizations usually go through a tweaking stage to get the look perfect, having the same value in many places, or meaningless numbers make the process tedious, and dangerous (introduce bugs).</p>
<p>The easier it is to make adjustments the more time you can spend on improving quality, rather than avoid touching it in fear of breaking it.</p>
</li>
</ul>
<h2>Some points about code.</h2>
<ul>
<li>Use <code>const</code> for your constants. There are no variable that you change in the code.</li>
<li>Use arrow functions to reduce code noise.</li>
<li>Naming function arguments so that they have meaning in the context that they are used.</li>
<li>Use a containing object (eg DIV) to hold the resulting content.</li>
<li>Use the containing element<code>s </code>dataset`to define additional properties.</li>
<li>D3 is not just for SVG, for simple layouts you will get better performance using HTML elements</li>
<li>Vet your data sources, You had two spellings for <code>"ManchesterUnited"</code> and <code>"MancheserUnited"</code></li>
</ul>
<h2>The rewrite</h2>
<p>As an example of the above points, also cleaned up the data, (no need to have anything over 4 decimal points).</p>
<p>Cell size and cell padding is taken from the containing element. Uses viewBox to lock aspect and has resize listener to keep content centered and scaled to fit.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="false" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const data =[[["Arsenal", 0.0000], ["Chelsea", 0.6015], ["Liverpool", 0.5204], ["ManchesterCity", 0.5492], ["ManchesterUnited", 0.5441], ["Tottenham", 0.6305], ], [["Arsenal", 0.6015], ["Chelsea", 0.0000], ["Liverpool", 0.5507], ["ManchesterCity", 0.5559], ["ManchesterUnited", 0.5231], ["Tottenham", 0.6508], ], [["Arsenal", 0.5204], ["Chelsea", 0.5507], ["Liverpool", 0.0000], ["ManchesterCity", 0.4976], ["ManchesterUnited", 0.4788], ["Tottenham", 0.5749], ], [["Arsenal", 0.5492], ["Chelsea", 0.5559], ["Liverpool", 0.4976], ["ManchesterCity", 0.0000], ["ManchesterUnited", 0.5022], ["Tottenham", 0.5803], ], [["Arsenal", 0.5441], ["Chelsea", 0.5231], ["Liverpool", 0.4788], ["ManchesterCity", 0.5022], ["ManchesterUnited", 0.0000], ["Tottenham", 0.5497], ], [["Arsenal", 0.6305], ["Chelsea", 0.6508], ["Liverpool", 0.5749], ["ManchesterCity", 0.5803], ["ManchesterUnited", 0.5497], ["Tottenham", 0.0000], ]];
const fills = {
   col : ["#2A363B", "#F8B195", "#F67280", "#C06C84", "#6C5B7B", "#355C7D"],
   scale : [0, 0.5, 0.55, 0.59, 0.62, 1],
};

function scaleToFit() { // To scale and fit the page, is also called on resize
    const scaled = Math.min((innerWidth - pagePadding )/ size, (innerHeight - pagePadding ) / size) * size | 0;
    simMatrix.attr("width", scaled).attr("height", scaled);
    container.style.left = (innerWidth - scaled) / 2 + "px";
}

const containerId = "dataDisplay";
const contentId = "simMatrix";
const container = document.getElementById(containerId);
const cellPad = +container.dataset.cellPad;   
const cellSize = +container.dataset.cellSize + cellPad;
const rows = data.length;
const size = rows * cellSize;
const viewBox = `0 0 ${size} ${size}`;  // To maintain aspect when resizing
const position = (data, index) =&gt; cellSize * index; 
const pagePadding = 20; // to keep content away from  edges. Divide by 2 for actual dist from edges
const fill = data =&gt; fills.col[fills.scale.findIndex(v =&gt; data[1] &lt;= v)]; // fill color alternative to using d3.scaleThreshold
addEventListener("resize", scaleToFit); 

d3.select("#" + containerId)
  .append("svg")
  .attr("id", contentId)  
  .attr("viewBox",viewBox)
  .attr("width", size)
  .attr("height", size)
  .selectAll("g")
  .data(data)
  .enter()
  .append("svg") // using SVG rather than g element to simplify column positioning
  .attr("x", position) // use data index to set x position
  .selectAll("rect")
  .data(data =&gt; data)
  .enter()
  .append("rect")
  .attr("r", cellSize)
  .attr("width", cellSize - cellPad)
  .attr("height", cellSize - cellPad)
  .attr("y", position)
  .attr("fill", fill);

const simMatrix = d3.select("#" + contentId); 
scaleToFit(); // fit to page</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.d3Container {
  position : absolute;  
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://d3js.org/d3.v5.min.js"&gt;&lt;/script&gt;
&lt;div id="dataDisplay" class="d3Container" data-cell-size="40" data-cell-pad="4"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

    </div>