<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The exercise "suggests" you first store the data into a vector (sentence #1), then compute and display some results.</p>

<p>You should define separate  functions for the actions : input data, compute sum, compute minimum, compute average etc. See 4.5.1 from your book: "Why bother with functions".</p>

<p>With a correct decomposition, the <code>main()</code> function would look like</p>

<pre><code>int main() 
{  
    std::vector&lt;double&gt; distances;
    get_data(distances);

    std::cout &lt;&lt; "size is\t"  &lt;&lt; distances.size()   &lt;&lt; std::endl
              &lt;&lt; "total is\t" &lt;&lt; sum_of(distances)  &lt;&lt; std::endl
              &lt;&lt; "min is\t"   &lt;&lt; ....
              ;
    return 0;
}
</code></pre>

<p>ALSO, you should indent your code properly. It will show you why it doesn't work as required (instead you print the "final" results inside the input loop, each time a value is given).</p>

<p>EDIT 2 : If you follow your initial idea (processing data as soon as you get it), you don't have to store it to a vector, because you can compute sum, min and max "on the fly" </p>

<pre><code>number_of_values += 1;
sum_do_far += new_value;
if (new_value &gt; maximum_so_far) {
     maximum_so_far = new_value;
}
if (new_value &lt; minimum_so_far) {
     minimum_so_far = new_value;
}
</code></pre>

<p>(and then the exercise falls flat)</p>
    </div>