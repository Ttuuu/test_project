<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looking at the original question is seems that the input is constrained to be lower case letters. If this is so, then the <code>str.Lower()</code> is unneeded. Even if we decide that we do want to covert to lower, doing it upfront for the whole string means an extra traversal;  it can be done as we process.</p>

<p>It is possible to do this in a single loop without the inner while and its checks if we append a sentinel onto the end of the input. I don't know that it saves much on performance but it does cut out a few checks</p>

<pre><code>public string Encode(string input)
{
    if (input == null || input.Length == 0)
    {
        throw new ArgumentException("String must have at least one letter.");
    }

    int counter = 0;
    StringBuilder sb = new StringBuilder();
    char prev = char.ToLower(input[0]);

    foreach(var rawChar in input.Append('\0').Skip(1))
    {
        var ch = char.ToLower(rawChar);
        counter++;
        if (ch == prev) continue;

        if(!char.IsLetter(prev))
        { 
            throw new ArgumentException("string should contains only letters");
        }
        sb.Append($"{prev}{(counter &gt; 1 ? counter.ToString() : "")}");
        counter = 0;
        prev = ch;
    }
    return sb.ToString();
}
</code></pre>

<p><strong>Note:</strong> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.append?view=netframework-4.7.1" rel="nofollow noreferrer">Enumerable.Append()</a> is 4.7.1 and above.  </p>

<p><strong>EDIT</strong> <br>
Revised linq-less version. Sill uses the sentinel but 'injects' it when we get to the end of the loop</p>

<pre><code>public string Encode(string input)
{
    if (input == null || input.Length == 0)
    {
        throw new ArgumentException("String must have at least one letter.");
    }

    int counter = 0;
    StringBuilder sb = new StringBuilder();
    char prev = char.ToLower(input[0]);

    for(var index = 1; index &lt;=input.Length; index++)
    {
        var ch = index == input.Length
                      ? '\0'
                      : char.ToLower(input[index]);
        counter++;
        if (ch == prev) continue;

        if (!char.IsLetter(prev))
        {
            throw new ArgumentException("string should contains only letters");
        }
        if (counter == 1)
        {
            sb.Append(prev);
        }
        else
        {
            sb.Append(prev);
            sb.Append(counter);
        }
        counter = 0;
        prev = ch;
    }

    return sb.ToString();

}
</code></pre>

<p><strong>UPDATE</strong></p>

<p>So I ran some numbers on this</p>

<p>The options were</p>

<p></p><ol>
<li>Sentinel or not</li>
<li>Linq or not</li>
<li>Append count separately or use string interpolation</li>
<li>convert to lower up front or per character</li>
</ol>

<p>I tried 3 different inputs</p>

<ul>
<li>1000 copies of the sample string (wwwwaaadexxxxxx)</li>
<li>1000 copies of the sample string x 4 (wwwwaaadexxxxxxwwwwaaadexxxxxxwwwwaaadexxxxxxwwwwaaadexxxxxx)</li>
<li>1000 random strings or lengths between 10 and 250</li>
</ul>

<p>I ran each dataset 10 times and averaged the results (discarding the first each time as it was generally an outlier - startup costs?)</p>

<p><strong>Results</strong></p>

<p><em>1000 Copies of wwwwaaadexxxxxx</em></p>

<p>Original =&gt; 10,239 ticks <br>
Original PerChar Lower =&gt; 20,725 ticks <br>
Original String Interpolation =&gt; 22,309 ticks <br></p>

<p>Sentinel Linq PerChar Lower Interpolation =&gt; 19,409 ticks <br>
Sentinel Linq PerChar Lower Append =&gt; 12,350 ticks <br>
Sentinel Linq str Lower Append =&gt; 8,860 ticks <br></p>

<p>Sentinel NoLinq PerChar Lower Interpolation =&gt; 20,284 ticks <br>
Sentinel NoLinq PerChar Lower Append =&gt; 8,702 ticks <br>
Sentinel NoLinq Str Lower Append =&gt; 5,786 ticks <br></p>

<p><em>1000 Copies of wwwwaaadexxxxxxwwwwaaadexxxxxxwwwwaaadexxxxxxwwwwaaadexxxxxx</em></p>

<p>Original =&gt; 28,064 ticks <br>
Original PerChar Lower =&gt; 53,718 ticks <br>
Original String Interpolation =&gt; 44,618 ticks <br></p>

<p>Sentinel Linq PerChar Lower Interpolation =&gt; 80,699 ticks <br>
Sentinel Linq PerChar Lower Append =&gt; 41,440 ticks <br>
Sentinel Linq str Lower Append =&gt; 35,716 ticks <br></p>

<p>Sentinel NoLinq PerChar Lower Interpolation =&gt; 59,850 ticks <br>
Sentinel NoLinq PerChar Lower Append =&gt; 35,956 ticks <br>
Sentinel NoLinq Str Lower Append =&gt; 20,038 ticks <br></p>

<p><em>1000 random strings or lengths between 10 and 250</em></p>

<p>Original =&gt; 60,350 ticks <br>
Original PerChar Lower =&gt; 146,490 ticks <br>
Original String Interpolation =&gt; 170,631 ticks <br></p>

<p>Sentinel Linq PerChar Lower Interpolation =&gt; 221,283 ticks <br>
Sentinel Linq PerChar Lower Append =&gt; 79,732 ticks <br>
Sentinel Linq str Lower Append =&gt; 42,773 ticks <br></p>

<p>Sentinel NoLinq PerChar Lower Interpolation =&gt; 197,249 ticks <br>
Sentinel NoLinq PerChar Lower Append =&gt; 64,996 ticks <br>
Sentinel NoLinq Str Lower Append =&gt; 30,775 ticks <br></p>

<p><strong>Interpretation</strong></p>

<p>Firstly, string interpolation bad, it looks cute (a Matter of Personal Preference MOPP(tm)) but is not performant.</p>

<p>Secondly, and surprisingly to me, upfront conversion of the whole string ToLower() is better than character by character.  For the original code this is not a surprise as there are a lot of repeated conversions needed but even in the Sentinel version where we only convert each character once, it is better to convert the string upfront and then process it.</p>

<p>Thirdly, linq performance varied.  The sentinel version using linq was never better than the no linq version but sometimes it was better than the original code, sometimes it wasn't (this was not data related as I repeated the same dataset multiple times and sometimes it was faster, sometimes slower)</p>

<p><strong>Bottomline</strong></p>

<p>Pretty much everything in my original answer was wrong (well, except for the concept of the sentinel) <br>
When answering performance questions it is important to run the numbers :) <br></p>

<pre><code>public string Sentinel_NoLinqStrLowerAppend(string input)
{
    if (input == null || input.Length == 0)
    {
        throw new ArgumentException("String must have at least one letter.");
    }

    input = input.ToLower();

    int counter = 0;
    StringBuilder sb = new StringBuilder();
    char prev = input[0];

    for (var index = 1; index &lt;= input.Length; index++)
    {
        var ch = index == input.Length
                      ? '\0'
                      : input[index];
        counter++;
        if (ch == prev) continue;

        if (!char.IsLetter(prev))
        {
            throw new ArgumentException("string should contains only letters");
        }
        if (counter == 1)
        {
            sb.Append(prev);
        }
        else
        {
            sb.Append(prev);
            sb.Append(counter);
        }
        counter = 0;
        prev = ch;
    }

    return sb.ToString();

}
</code></pre>
    </div>