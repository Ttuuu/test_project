<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks good! Great job.</p>

<ol>
<li><p>To initialize the array completely I have to write:</p>

<pre><code>array2d&lt;int, 2, 2&gt; Array{{{{1, 2}, {2, 3}}}};
</code></pre>

<p>The two extra sets of braces are horrible! If you instead have a <code>T[][]</code> data member one layer of braces falls of and you need only one set of braces just like <code>std::array</code>.</p>

<pre><code>array2d&lt;int, 2, 2&gt; Array{{{1, 2}, {2, 3}}}; // manageable
</code></pre></li>
<li><p>Whatever happened to <code>constexpr</code> all the things? :)</p></li>
<li><p>Nested <code>std::array</code>s are not guaranteed to be continuous (see <a href="https://stackoverflow.com/questions/9762662/is-the-data-in-nested-stdarrays-guaranteed-to-be-contiguous">this post</a>), although in practice they probably are. Resolving point 1) also fixes this issue.</p></li>
<li><p>IMO a <code>at</code> member that takes only one index and returns a row would make sense for consistency with your <code>operator[]</code>.</p></li>
<li><p>Consider adding the various member types that a <a href="https://en.cppreference.com/w/cpp/named_req/Container" rel="nofollow noreferrer"><em>Container</em></a> is supposed to have (and also the other requirements, <code>cr[begin, end]</code>, <code>max_size</code>, member <code>swap</code>, ...).</p></li>
<li><p>I mean sure, <code>size</code> and <code>empty</code> can be <code>static</code>, but really, conceptually this doesn't make much sense. <code>std::array</code>'s <code>empty</code> and <code>size</code> are not static too.</p></li>
<li><p>How about providing various customization points of <code>std::get</code>, <code>std::tuple_size</code>, ... so that your array works with structured bindings.</p></li>
<li><p>You didn't add any relational operators. Is this intentional?</p></li>
</ol>
    </div>