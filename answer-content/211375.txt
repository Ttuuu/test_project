<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Have I used any bad practices?</strong></p>

<p>Yes. Here are some of them:</p>

<ul>
<li>You have pass vector by value to function when it should be by constant reference (<code>std::vector&lt;T&gt; input</code>).</li>
<li>You have not make your algorithm generic enough as it works only for vectors.</li>
<li>You declare iterator type explicitly when <code>auto</code> should be used. <em>See previous point.</em></li>
<li>You used <code>int</code> instead of <code>size_t</code> for the size so it might not handle very big vectors.</li>
<li>Your limit your binary search to <code>vector</code> of <code>double</code>.</li>
<li>You make way too much copy of the data (and thus use a lot of memory).</li>
<li>Your <code>binary_search</code> returns an index instead of an iterator.</li>
<li>You have made your algorithm recursive when a simple loop would do.</li>
<li>You have made easy for your user to call the function specifying an arbitrary index but if a user do so, it will return incorrect result in at least some cases.</li>
<li>If the <code>vector</code> is empty, it would return 0 instead of -1.</li>
<li>Because of the 2 previous points, the implementation function should be different than the actual function that user should call (usually in a nested namespace) as you use recursivity.</li>
<li>In some expression (for example: <code>startIndex+middleIndex+1</code>), you have not using whitespace. Your code should be consistant and readable.</li>
<li><code>last</code> is a poor variable name for <code>end</code>. Usually <code>last</code> mean the position on the last item while <code>end</code>mean the position after the last item. By not conforming to the convention, you make your code harder to understand as one might get mixed up.</li>
<li>In a case like that, recursivity can easily be replaced by a loop and might be more efficient (depending on the compiler).</li>
<li>Because of some point above, your code is much longer than it need to be.</li>
<li>You reinvent the wheel since that algorithm already exist in STL.</li>
</ul>

<p><strong>How could the code be improved upon in terms of efficiency?</strong></p>

<p>It is not very efficient as already mentioned by others as it copy the data multiple time. </p>

<p>As it is recursive, you will typically copy half the size on first level, one quarter on next level etc... so in the end, you will use almost twice as much memory as you should. And you would more or less have O(n) time complexity instead of O(log n). </p>

<p>At that point, a linear search would be much faster than your code in practice most of the time (because it would be more friendlier which the CPU cache and easier to optimize while having a similar complexity)</p>

<p><strong>Could recursion cause a stack overflow error, and if so how can I avoid this?</strong></p>

<p>It might be a possibility if the compiler decide not the remove recursion. As you copy the <code>vector</code> data, it might make it harder for the compiler to optimize since it is not as easy as to replace the value of a local variable.</p>

<p>In practice, except for large vectors or on embedded device, recursion should not be a problem. Assuming that each recursive call use about 50 bytes and your stack is 1MB, you should be able to handle vector of about 20000 items. This is a rough idea of the magnitude.</p>

<p>Given that you can easily rewrite <code>binary_search</code> without recursivity, the fix is obvious! Use a loop instead and update either <code>begin</code> or <code>last</code> on each iteration.</p>
    </div>