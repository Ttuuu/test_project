<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Actually <em>my</em> unit testing shows that your code is wrong!</strong></p>

<p>The problem is that you include the zero terminator in the output string, which is not supposed to happen with <code>std::string</code> and friends. Here's an example why this can lead to problems, especially if you use <code>std::string::compare</code>:</p>

<pre><code>// Allocate string with 5 characters (including the zero terminator as in your code!)
string s(5, '_');

memcpy(&amp;s[0], "ABCD\0", 5);

// Comparing with strcmp is all fine since it only compares until the terminator
const int cmp1 = strcmp(s.c_str(), "ABCD"); // 0

// ...however the number of characters that std::string::compare compares is
// someString.size(), and since s.size() == 5, it is obviously not equal to "ABCD"!
const int cmp2 = s.compare("ABCD"); // 1

// And just to prove that string implementations automatically add a zero terminator
// if you call .c_str()
s.resize(3);
const int cmp3 = strcmp(s.c_str(), "ABC"); // 0
const char term = s.c_str()[3]; // 0

printf("cmp1=%d, cmp2=%d, cmp3=%d, terminator=%d\n", cmp1, cmp2, cmp3, (int)term);
</code></pre>
    </div>