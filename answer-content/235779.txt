<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A potential issue is related to the static <code>Scanner</code> object:</p>

<blockquote>
<pre><code>private static Scanner scanner = new Scanner(System.in);
</code></pre>
</blockquote>

<p>This scenario can bring potential problems due to the closing of the <code>Scanner</code> resource left to the developer. From Java 8 it is possible to use the <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try-with-resources</a> statement to ensure closing of resources (in this case the <code>Scanner</code> object to avoid memory leaks). A possible solution is rewrite of the code including declaration and definition of the <code>Scanner</code> inside the main like below:</p>

<pre><code>public class Main {

    public static void main(String args[]) {
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.print("Money in Euro: ");
            double money = scanner.nextDouble();
            System.out.print("Annual percentage rate: ");
            double rate = scanner.nextDouble();
            System.out.print("Term in years: ");
            int years = scanner.nextInt();

            for (int i = 1; i &lt;= years; i++) {
                money += money * (rate / 100);
                System.out.println("Money after " + i + ". years: " + money);
            }
        }
    }
}
</code></pre>

<p>In this way the <code>Scanner</code> resource will be closed after its use in the main method.</p>
    </div>