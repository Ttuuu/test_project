<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I'm not sure if I'd use the phrase "too many", but I think you've included a header or two you'd probably be better off without.</p>

<p>The most obvious example would be <code>&lt;cstring&gt;</code>. There's rarely a good reason to use any of the <code>&lt;cstring&gt;</code> functions in C++ code (and I don't see any hint that this code is one of the rare exceptions either).</p>

<p>Right now, the main (only?) thing I see you using from <code>&lt;cstring&gt;</code> is <code>strstr</code>. <code>std::string</code> has a <code>find</code> member that can find a substring like <code>strstr</code> does.</p></li>
<li><p>Your code also seems somewhat inconsistent, at least to me. For example, in one place you create a string with N repetitions of a single character using code like: <code>std::string(character, repetitions)</code>. In another place you do roughly the same thing using a loop to append on underscore at a time. Since they're doing the same thing, it would be better for them to do it the same way (preferably the constructor for <code>std::string</code>).</p></li>
<li><p>Right now you use a string to hold a single character (and enforce its being only one character). Since it's only a single <code>char</code>, I'd rather just use a <code>char</code> to hold it.</p></li>
<li><p>As a general rule of thumb, I'd prefer a well-chosen algorithm from the standard library over a raw loop.</p></li>
<li><p>Yes, you can (and in my opinion, should) break the code up into more functions (and based on your question, it seems like you already agree, but may not be sure how to do it).</p></li>
<li><p>I'd generally prefer to use the new random-number generation routines in <code>&lt;random&gt;</code> over the <code>srand</code>/<code>rand</code> from the C library. Likewise, I'd rather use the distribution classes in the standard library over the <code>rand() % total_lines</code> you have now. (but in fairness, they are more work to use, and it's unlikely to make a difference anybody's likely to notice or care about (but in many other cases, it's more important).</p></li>
<li><p>I'd avoid <code>using namespace std;</code> I know at first it seems painful to type in <code>std::</code> everywhere, but it's still better than <code>using namespace std;</code>.</p></li>
<li><p>There are also neater ways to read words from a file into an array of strings, such as:</p>

<pre><code>std::ifstream infile("wordlist.txt");

std::vector&lt;std::string&gt;{std::istream_iterator&lt;std::string&gt;(infile), {}};
</code></pre>

<p>One point though: this will produce different results if your input file has multiple words on one line. In this case your code treats a whole line as one word, but this treats each word separately.</p></li>
<li><p>I generally advise against using <code>std::endl</code>. It's probably harmless in this case, but a habit I'd try to avoid anyway.</p></li>
</ol>
    </div>