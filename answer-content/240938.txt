<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Externalize your connection strings</h2>

<p>This information:</p>

<pre><code>  host="SVR",
  user="root",
  passwd="",
  database="production"

    "Driver={SQL Server Native Client 11.0};"
    "Server=svr;"
    "Database=SQL_Server;"
    "Trusted_Connection=yes;")

'G:/Technical/Labels/Production/Data/CSVExport.csv'
</code></pre>

<p>should not be baked into your program, for multiple reasons:</p>

<ul>
<li>configurability and maintainability</li>
<li>security</li>
</ul>

<p>Put these into a configuration file, a command-line argument, or an environmental variable.</p>

<h2>Typo</h2>

<p><code>#SQL Sevrer</code> -&gt; <code>#SQL Server</code></p>

<h2>Context management</h2>

<p>Doing a search through the <a href="https://github.com/mysql/mysql-connector-python/search?q=__exit__&amp;unscoped_q=__exit__" rel="nofollow noreferrer">MySQL Connector Python source code</a> as well as their <a href="https://bugs.mysql.com/bug.php?id=89113" rel="nofollow noreferrer">bug tracker</a>, it seems that the library has a deficiency where cursors cannot be used as context managers. You can do the next-best thing: <code>try</code>/<code>finally</code> whenever you make a connection or cursor that needs to be closed, or (probably better) make your <a href="https://docs.python.org/3.8/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer">own small context manager utilities</a> for such cases.</p>

<p>The situation for <code>pyodbc</code> <a href="https://stackoverflow.com/a/3783252/313768">seems to be better</a>. Connections and cursors should be used in <code>with</code> statements.</p>

<p>In all cases you should prefer this to explicit <code>close()</code> calls.</p>

<h2>Multi-line strings</h2>

<p>Since this is SQL:</p>

<pre><code>    SqlData.execute("select p.id, p.code,p.description, p.searchRef1, so.number, c.code, c.name \
         from salesorderline sol join \
         salesorder so \
         on sol.salesorderid = so.id join \
         product p \
         on sol.productid = p.id join \
         customer c \
         on so.customerid = c.id \
         where so.orderdate &gt; dateadd(dd,-10,cast(getdate() as date));")
</code></pre>

<p>Indentation does not matter. Your current string literal includes indentation, and it might as well stay that way but losing the continuation escapes and using a multi-line string:</p>

<pre><code>    SqlData.execute("""
        select p.id, p.code,p.description, p.searchRef1, so.number, c.code, c.name
        from salesorderline sol
        join salesorder so on sol.salesorderid = so.id
        join product p on sol.productid = p.id
        join customer c on so.customerid = c.id
        where so.orderdate &gt; dateadd(dd,-10,cast(getdate() as date));
    """)
</code></pre>

<p>I also think it is clearer and more logical to line-break before the <code>join</code> keyword rather than after, and include the <code>on</code> with its corresponding <code>join</code>.</p>

<h2>Unpacking</h2>

<p>This:</p>

<pre><code>a,b,c,d,e,f,g = x
</code></pre>

<p>is not helpful. Either give these meaningful names, or don't unpack at all:</p>

<pre><code>MySQLcursor2.execute("""
    insert into SQL_Server (
        product_id, product_code, product_description, product_weight,
        salesorder_number, customer_code, customer_name
    ) values (%s,%s,%s,%s,%s,%s,%s);
    """,
    x
)
</code></pre>

<h2>Magic numbers and home-rolled time math</h2>

<p>Do not do this:</p>

<pre><code>    time.sleep(240 - ((time.time() - starttime) % 240))
</code></pre>

<p>It's difficult to understand. I guess 240 seconds is 4 minutes. You're</p>

<ul>
<li>finding the elapsed time since the start,</li>
<li>modulating that by 4 minutes? Why?</li>
<li>subtracting that from 4 minutes.</li>
</ul>

<p>At a wild guess, what you are trying to do is "wait until 4 minutes have passed since the start of the program", which would actually require</p>

<pre><code>from datetime import datetime
from time import sleep

start_time = datetime.now()
# ...

elapsed = datetime.now() - start_time
until_4m = (timedelta(minutes=4) - elapsed).total_seconds()
if until_4m &gt; 0:
    sleep(until_4m)
</code></pre>
    </div>