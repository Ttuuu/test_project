<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your test is missing the central point of unit testing which is to prove the code under test works in the specific circumstances in question, these should be deterministic.  So for each parameter you can know in advance what the result <strong>should be</strong>.  Create multiple unit tests for the known factors that should work and a number for the parameters expected to fail.</p>

<p>Secondly, I suggest you create your own Checked Exception for the failing circumstance rather than reusing the runtime <code>UnsupportedOperationException</code>, this will ensure a client using your function/library is forced to handled the exception.  When the error can be handled use a checked exception, only use the unchecked runtime exceptions when the error cannot be handled by the code.  If the program can, it should still fail gracefully with either.  I can see that is what you are trying to achieve for your live code but visibility of the issue is more important in unit tests.</p>

<p>The client code handling exception could skip the value and proceed to the next value.  Simply retrying with the same value should produce the same result, so the retry with the same value is actually pointless.</p>

<p>You can verify that the test produces the result you expect by catching the expected failure with the expected Exception clause of the <code>@Test</code> annotation.</p>

<pre><code>@Test(expected = BirthdayParadoxException.class) 
public void testBirthdayParadox() {
    op.primeFactorsPollardRho(BIRTHDAY_PARADOX_VALUE); 
}

@Test 
public void testPassingValue() {
    assertEquals(EXPECTED_RESULT, op.primeFactorsPollardRho(FACTORABLE_VALUE); 
}
</code></pre>

<p>Create multiple tests for each specific situation you can predict and verify the expected behaviour, catching failures should be considered expected behaviour for unit testing purposes.  </p>

<p>Also see : <a href="https://github.com/junit-team/junit4/wiki/Exception-testing" rel="nofollow noreferrer">https://github.com/junit-team/junit4/wiki/Exception-testing</a></p>
    </div>