<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>if (orderedArray.Length == 0 || orderedArray == null)
{
    return string.Empty;
}
</code></pre>
</blockquote>

<p>You are checking this in the wrong order. The <code>null</code> check should be first. The other condition is actually not necessasry at all because if the collection is empty the resulting string will be empty too.</p>

<hr>

<p>As far as the rest of the code is concerned you can simplify it a little bit.</p>

<blockquote>
<pre><code>var groupedArray = orderedArray.Select((x, i) =&gt; new { Difference = i - x, Value = x })
</code></pre>
</blockquote>

<p>This <code>new</code> can be replaced by an anonymous tuple that is cheaper than an object.</p>

<blockquote>
<pre><code>        .GroupBy(x =&gt; x.Difference)
        .Select(group =&gt; group.Select(a =&gt; a.Value))
</code></pre>
</blockquote>

<p>This <code>Select</code> is not necessary. &gt;ou can put it inside the <code>GroupBy</code> method as an element selector, here <code>g =&gt; g.Value</code>.</p>

<blockquote>
<pre><code>        .Select(arr =&gt; arr.Count() &gt; 2
                    ? $"{arr.First()}-{arr.Last()}"
                    : string.Join(", ", arr));
</code></pre>
</blockquote>

<p>I think it'd be a better idea to encapsulate this by creating a new <code>Range</code> type where you overload the <code>ToString</code> method:</p>

<pre><code>readonly struct Range
{
    public Range(int min, int max)
    {
        Min = min;
        Max = max;
    }

    public int Min { get; }

    public int Max { get; }

    public static Range Create(int value) =&gt; new Range(value, value);

    public override string ToString() =&gt; Min == Max ? Min.ToString() : $"{Min}-{Max}";
}
</code></pre>

<p>The new version would then look like this:</p>

<pre><code>var ranges =
    source
        .Select((x, i) =&gt; (Difference: i - x, Value: x))
        .GroupBy(x =&gt; x.Difference, g =&gt; g.Value)
        .SelectMany(
            g =&gt; g.Count() &gt; 2
                ? new[] { new Range(g.First(), g.Last()) }
                : g.Select(Range.Create)
        );

return string.Join(", ", ranges);
</code></pre>

<p>Notice the new <code>SelectMany</code> that will give a collection of ranges so that you don't have to use <code>string.Join</code> multiple times. This makes it easier to replace the item delimiter because it now occurs only once.</p>
    </div>