<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(I only looked at the GitHub repository ...)</p>

<p>Ah you've got <code>go vet</code> already on, that's why it's not finding anything,
great!</p>

<p><code>Dockerfile</code> looks good too.  You might want to specify an exact Go
version just in case.</p>

<p><code>main.go</code> looks fine to me.  Only the unused return value from
<code>router.Run()</code> would pop up depending on your linter settings, which you
could explicitly ignore with <code>_ = router.Run()</code>, but I see it's being
logged in case of errors already.</p>

<p><code>airports.go</code> has a few obvious comments that therefore don't add much
information.  Also <code>f</code> should be closed.  Not sure what happens if you
can't open the file?  Also the constructed path there might not always
work, I'd argue that a command-line flag specifying the file directly,
or perhaps just a relative path if it's always called from the main
directory might be a bit safer.  Finally each struct is saved
individually - I'm guessing this is not a problem so far, but you might
want some batching and transaction safety at some point.</p>

<p><code>db.go</code> imports SQLite and PostgreSQL, but the connection opening is
using <code>"postgres"</code> only, consider moving that into the configuration
object too, or otherwise get rid of SQLite?</p>

<p>The <code>fmt.Println</code> should probably be a "proper" logger before you've to
convert more of those calls later on.</p>

<p><code>airports.go</code> has all methods that can return an <code>error</code>, but don't have
a single one that actually does in any situation.  I'd get rid of the
<code>error</code> return value if it's not being used.  Instead of
<code>upper(...) LIKE upper(...)</code> consider using <code>ILIKE</code>.  Now that I think
about it, also consider adding some default <code>LIMIT</code>'s to limit the
potential for mistakes/misuse.</p>

<p><code>airportsController.go</code> etc. use a global variable <code>environment</code> -
that's <em>usually</em> not a great idea since it makes it a bit harder to work
with, plus, nothing prevents you from putting that into the controller
structure and making e.g. <code>seachAirports</code> a method instead.</p>

<p>I'm not familiar with <code>gin</code>, so <code>context.JSON</code> etc. look a bit weird to
me, but nothing too bad.  Consider though logging the database error for
debug purposes!  It might be that the connection got dropped, or any
other of the big pool of possible failures and just returning
<code>"No results found"</code> will not help you figuring that one out after the
fact.  N.b. it looks like if the caller specifies <em>both</em> <code>iataCode</code> and
<code>cityName</code> that the HTTP response will be attempted to be written twice,
that looks wrong to me, even if the framework catches that for you.</p>

<p><code>destinations.go</code>, I had to look up the syntax again, the <code>[...]</code>
doesn't really buy you anything, does it.</p>

<p><code>quoteController.go</code> is a bit more interesting again, <code>saveQuotes</code>
should set up a transaction I think?</p>

<hr>

<p>Alright, so the <code>skyscanner</code> package again uses a global configuration
and again I'd advise against that.</p>

<p><code>analytics.go</code> looks okay as long as your floating point values don't
get too big I think.  Otherwise you'd have to search for the proper
algorithms and/or use a library.</p>

<p><code>http.go</code>, hmm, looks a bit more odd, the logging isn't consistent (more
<code>fmt.Print...</code>), also printing of values without indication where it's
coming from; I'd also expect that you'd get rate-limited at some point.
Maybe doing only a few requests at the same time plus handling errors
more gracefully (that is, retrying automatically) would improve this.
Also <code>prettyPrint</code> is unused.</p>

<p><code>response.go</code> looks fine, except in <code>LowestPrice</code> I rally dislike the
placeholder value <code>99999999</code> - of course it's somewhat common practice,
but simply looking at <code>len(r.Quotes)</code> would immediately tell you whether
there were any quotes at all!</p>

<hr>

<p>Overall looks good to me, you could then also add some tests maybe.</p>
    </div>