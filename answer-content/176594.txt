<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I'll offer three more methods that will provide the same/desired output, then explain some pros/cons:</p>

<p><strong>Input</strong>:</p>

<pre><code>$lo_designer=(object)['role'=&gt;'Commander-in-Chief Coffee Machine Attendant'];
</code></pre>

<p><strong>Output</strong>: (for all three methods to follow):</p>

<pre><code>&lt;div class="designer"&gt;&lt;span&gt;Commander-in-Chief &lt;/span&gt;&lt;span&gt;Coffee Machine Attendant&lt;/span&gt;&lt;/div&gt;
</code></pre>

<p><strong>Method #1</strong>: Limited <code>explode()</code></p>

<pre><code>$roles=explode(' ',$lo_designer-&gt;role,2);
?&gt;&lt;div class="designer"&gt;&lt;span&gt;&lt;?= $roles[0] ?&gt; &lt;/span&gt;&lt;span&gt;&lt;?= $roles[1] ?&gt;&lt;/span&gt;&lt;/div&gt;
</code></pre>

<p>This is probably the most sensible approach as it provides the two desired strings with a single function call.  Using <code>list()</code> to name the generated elements is fine if you place a high priority on speed of human comprehension, but it doesn't seem necessary to me -- given that the task is so overt.  You could also implode like this:<br><code>&lt;?= implode(' &lt;/span&gt;&lt;span&gt;', explode(' ', $lo_designer-&gt;role, 2)) ?&gt;</code></p>

<p><strong>Method #2</strong>: <code>strstr()</code> &amp; <code>substr()</code> w/ <code>strpos()</code></p>

<pre><code>&lt;div class="designer"&gt;&lt;span&gt;&lt;?= strstr($lo_designer-&gt;role,' ',true) ?&gt; &lt;/span&gt;&lt;span&gt;&lt;?= substr($lo_designer-&gt;role,strpos($lo_designer-&gt;role,' ')+1) ?&gt;&lt;/span&gt;&lt;/div&gt;
</code></pre>

<p>This approach doesn't add any new variables to the scope, but requires 3 function calls which doesn't seem very "tidy".</p>

<p><strong>Method #3</strong>: Limited <code>preg_replace()</code></p>

<pre><code>&lt;div class="designer"&gt;&lt;span&gt;&lt;?= preg_replace('/ /',' &lt;/span&gt;&lt;span&gt;',$lo_designer-&gt;role,1) ?&gt;&lt;/span&gt;&lt;/div&gt;
</code></pre>

<p>This regex-based approach enjoys replacement limiting and only uses one set of short echo tags.  However as a general rule (of mine anyhow), regex functions should only be used when other functions fail to offer a reasonably succinct equivalent.  For this reason, I see no justification to use <code>preg_split()</code> versus <code>explode()</code> to achieve the same resultant array.</p>

<hr>

<p>In conclusion, I would personally use and recommend Method #1 as it is lean and clean.  Many developers advise against blending the processing and displaying portions of code into the same line as a matter of cleanliness. (<a href="http://sandbox.onlinephpfunctions.com/code/5088f6dbd1e0c483752f1eb165f70bf6baedb4af" rel="nofollow noreferrer">Here is a demo link</a>)</p>

<p>That said, I'd like to make two more points:</p>

<ul>
<li><p>I don't like to bounce back and forth between html and php because it feels uglier to me.  Other developers may consider escaping quotes and curly bracket wrapping variables to be equally ugly; or inappropriate in a template structure.</p></li>
<li><p>I wouldn't write the "role separating space" before <code>&lt;/span&gt;</code>, I'd put it after since any visible css styling on the space will appear strange to the user.  (If you have a good reason for writing the space inside the first span tag, fair enough.)</p></li>
</ul>

<p>My Code:</p>

<pre><code>$roles=explode(' ',$lo_designer-&gt;role,2);
echo "&lt;div class=\"designer\"&gt;&lt;span&gt;{$roles[0]}&lt;/span&gt; &lt;span&gt;{$roles[1]}&lt;/span&gt;&lt;/div&gt;";
</code></pre>
    </div>