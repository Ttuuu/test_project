<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I believe the <code>DoubleDegrees</code> and <code>ConnectedComponents</code> functions are sub-optimal since they use simple algorithms but make use of matrix multiplications and search algorithms would be faster (in other languages). Is this still efficient code for APL? Or would a search-based solution be more efficient?</p>
</blockquote>

<p>Many APL implementations, especially Dyalog's, are heavily optimized around array operations using hardware SIMD instructions and parallel processing. Matrix multiplication is one of them.</p>

<p>Classical algorithms say that matrix multiplication is heavy, and a search algorithm will definitely do better. However, the uniqueness of APL gives very low constant factor to matrix multiplication (possibly even cutting down a dimension with enough parallelism), while it likely gives a high cost to a recursive search (interpreting a function over and over, and digging through a nested array).</p>

<p>In conclusion, I'd say matrix multiplication is the preferred way to solve such a task in APL. If in doubt, you can always implement both and compare the timings.</p>

<blockquote>
  <p>I'm particularly interested in feedback on the <code>AdjacencyMatrix</code> and on the <code>ConnectedComponents</code> functions.</p>
</blockquote>

<h2><code>AdjacencyMatrix</code></h2>

<pre><code>AdjacencyMatrix ← {
    ⍝ Compute the adjacency matrix of a graph.
    ⍝ Monadic function expecting an 'EdgeList'.

    vertices ← ⊃1↑⍵          ⍝ can be simplified to `vertices ← ⊃⍵`
    edges ← (↓⌽⍪⊢) 1↓⍵       ⍝ consider putting atop `↓` outside of the train
                             ⍝ to clarify the intent:
                             ⍝ edges ← ↓ (⌽⍪⊢) 1↓⍵
    mat ← 0⍴⍨ 2⍴ vertices
    (1@edges) mat            ⍝ `1@edges⊢ mat` is more common way to split
                             ⍝ right operand from right arg
}
</code></pre>

<h2><code>ConnectedComponents</code></h2>

<pre><code>ConnectedComponents ← {
    ⍝ Computes the number of connected components of a graph.
    ⍝ Monadic function expecting 'EdgeList' as argument.

    adj ← AdjacencyMatrix ⍵
    v ← ⊃⍴ adj                 ⍝ can be simplified to `v ← ≢adj`
    (1 1⍉adj) ← v⍴1            ⍝ can be simplified to `(1 1⍉adj) ← 1`
    accum ← (+.×)⍣(v-1)⍨ adj   ⍝ more on two last lines below
    ≢∪ (1@(≠∘0)) accum
}
</code></pre>

<p>Plain <span class="math-container">\$n\$</span>th matrix power of an adjacency matrix <span class="math-container">\$M\$</span> gives the <em>count</em> of all length-<span class="math-container">\$n\$</span> paths between given two vertices. Adding the 1 to the diagonal of <span class="math-container">\$M\$</span> has the effect of adding loops to the graph, and its power gives the count of all length-<span class="math-container">\$≤n\$</span> paths. To describe the inner workings: For each pair of vertices <span class="math-container">\$(p, r)\$</span>, <code>+.×</code> counts the paths <span class="math-container">\$p \rightarrow q \rightarrow r\$</span> for every intermediate vertex <span class="math-container">\$q\$</span> by multiplying <code>×</code> paths for <span class="math-container">\$p \rightarrow q\$</span> and <span class="math-container">\$q \rightarrow r\$</span>, and collects all of them by sum <code>+</code>.</p>

<p>But right now we don't need the counts, we just need to know whether such a path <em>exists</em>. This gives rise to the Boolean matrix product <code>∨.∧</code>. Analogously to <code>+.×</code>, <code>∨.∧</code> checks if any path <span class="math-container">\$p \rightarrow q \rightarrow r\$</span> <em>exists</em> by <code>∧</code>-ing <span class="math-container">\$p \rightarrow q\$</span> and <span class="math-container">\$q \rightarrow r\$</span>, and collects them by <code>∨</code> to indicate if <em>some</em> path exists. This has several benefits:</p>

<ul>
<li>Boolean arrays and operations on them are more time- and space-efficient over integer arrays.</li>
<li>Finding all connected pairs is easier with the fixed point <code>⍣≡</code>, while it can't be done with <code>+.×</code>.</li>
<li>You don't need an extra step (<code>1@(≠∘0)</code>, though it can be simplified to <code>0≠</code>or simply <code>×</code>) to extract the <em>exists</em> from the <em>counts</em>.</li>
</ul>

<p>Finally, if we change <code>∨.∧⍣≡⍨</code> to <code>∨.∧⍨⍣≡</code>, we double the number of steps instead of advancing only one step every iteration (thus reducing the number of matmul operation from <span class="math-container">\$O(n)\$</span> to <span class="math-container">\$O(\log{n})\$</span>). If we were calculating precisely the <span class="math-container">\$n\$</span>th power, we would need repeated squaring that refers to <span class="math-container">\$n\$</span>'s bit pattern. We don't need to care about it because we'll be iterating until it converges anyway.</p>

<p>Now the code looks like: (the variable <code>v</code> is removed since it is no longer used)</p>

<pre><code>ConnectedComponents ← {
    adj ← AdjacencyMatrix ⍵
    (1 1⍉adj) ← 1
    accum ← ∨.∧⍨⍣≡ adj    ⍝ (f.g)⍣≡⍨ is same as f.g⍣≡⍨ due to parsing rule
    ≢∪ accum
}
</code></pre>
    </div>