<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>from &lt;xx&gt; import *</code></h1>

<p>Prevent a <code>*</code> import. You don't know what it will inject in your module namespace. Instead only import the parts you need:</p>

<pre><code>from graphics import GraphWin, Line, Point, Rectangle, Text
</code></pre>

<p>The google style guide as <a href="http://google.github.io/styleguide/pyguide.html#22-imports" rel="nofollow noreferrer">linked</a> by Mircea also says not to import the classes, but only modules and packages, but that is a matter of style and taste.</p>

<h1>Magic numbers</h1>

<p>There are a lot of magic numbers, scattered in your code. If ever you want to change the location of the button, you will need to adapt that in a few places, and will most likely miss some. To prevent such magic numbers, you can do something like this:</p>

<pre><code>def main():
    coord_max = 40
    win = GraphWin("Regression Line", 10 * coord_max, 10 * coord_max)

    win.setCoords(0, 0, coord_max, coord_max)

    button_x, button_y = 35, 3
    button_width, button_height = 8, 4

    Text(Point(button_x, button_y), "DONE").draw(win)
    button = Rectangle(
        Point(button_x - button_width / 2, button_y - button_height / 2),
        Point(button_x + button_width / 2, button_y + button_height / 2),
    )
    button.draw(win)
</code></pre>

<h1>split functionality</h1>

<p>your <code>dots</code> method does a lot of things now. It:</p>

<ul>
<li>catches the click</li>
<li>checks whether it it is the button</li>
<li>draws the point</li>
<li>does the summary calculations</li>
</ul>

<p>Especially the last one should be factored to its own method. The easiest way to do this is let <code>dots</code> just yield the x and y coordinate, and let another method take care of the regression.</p>

<p>Checking whether the click is on the button can also be done simpler. Instead of hardcoding the coordinates, simplest would be to pass in the button object, and ask that one for its bounding coordinates:</p>

<pre><code>def dots(win, button):

    while True:

        click = win.getMouse()
        x = click.getX()
        y = click.getY()
        if button.p1.x &lt;= x &lt;= button.p2.x and button.p1.y &lt;= y &lt;= button.p2.y:
            break # button press
        Point(x, y).draw(win)
        yield x, y
</code></pre>

<p>Is to me a lot clearer and easier to understand.</p>

<p>If you don't know that p1 and p2 are bottomleft and topright, you can take that into account by doing:</p>

<pre><code>def dots(win, button):
    while True:
        click = win.getMouse()
        x = click.getX()
        y = click.getY()

        x1, x2 = sorted((button.p1.x, button.p2.x))
        y1, y2 =  sorted((button.p1.y, button.p2.y))
        if x1 &lt;= x &lt;= x2 and y1 &lt;= y &lt;= y2: # button press
            break
        Point(x, y).draw(win)
        yield x, y
</code></pre>

<h1>summarize:</h1>

<p>Instead of each summary metric getting its own variable, you can save them in a <code>dict</code> (or a <code>collections.Counter</code> more specifically)</p>

<pre><code>def summarize(points):
    summary = Counter()
    for x, y in points:
        summary["x"] += x
        summary["y"] += y
        summary["x2"] += x ** 2
        summary["xy"] += x * y
        summary["count"] += 1
    summary["mean_x"] = summary["x"] / summary["count"]
    summary["mean_y"] = summary["y"] / summary["count"]
    return summary
</code></pre>

<h1>regression:</h1>

<p>Then pass this on to a method that calculates the regression line. This needs the maximum <code>x</code> of the screen as an argument:</p>

<pre><code>def regression_line(summary, x_max, x_min=0):
    slope = (
        summary["xy"]
        - summary["count"] * summary["mean_x"] * summary["mean_y"]
    ) / (summary["x2"] - summary["count"] * summary["mean_x"] ** 2)

    y_min = summary["mean_y"] + slope * (x_min - summary["mean_x"])
    y_max = summary["mean_y"] + slope * (x_max - summary["mean_x"])

    return Line(Point(x_min, y_min), Point(x_max, y_max))
</code></pre>

<h1>rest of <code>main</code></h1>

<pre><code>points = dots(win, button=button)
summary = summarize(points)
try:
    regline = regression_line(summary, x_max=coord_max)
except ZeroDivisionError:
    middle_point = Point(coord_max / 2, coord_max / 2)
    Text(middle_point, "Enter at least 2 points!").draw(win)
else:
    regline.draw(win)
win.getMouse()
</code></pre>

<h1>main guard</h1>

<p>If you put the calling of <code>main()</code> behind <code>if __name__ == "__main__":</code>, you can later import this module from somewhere else, and reuse some of the code</p>

<pre><code>if __name__ == "__main__":
    main()
</code></pre>
    </div>