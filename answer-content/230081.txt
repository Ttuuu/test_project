<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>main()</h2>

<p>It looks like this line it trying to allocate some memory to store one of the morse code strings (e.g., "-...").</p>

<pre><code>master[i] = (char *)malloc(sizeof(ele) * sizeof(char));
</code></pre>

<p>However, <code>ele</code> is a char* and <code>sizeof(char)</code> is 1.  So, this allocates memory for one char*, not enough to store a string of up to 4 char plus a terminating NULL.  To get the length of the string pointed to by <code>ele</code> use <code>strlen()</code>.  </p>

<p>A pointer to the allocated memory is then stored in <code>master[i]</code>.  But, the very next line:</p>

<pre><code>master[i] = ele;
</code></pre>

<p>overwrites that pointer with the pointer returned by <code>strtok()</code>.  The malloced memory is goes unused and un-freed.  And is in fact not needed.</p>

<p>This loop could be written like:</p>

<pre><code>int i = 0;
for (char *ele = strtok(key, " "); ele; ele = strtok(NULL, " ")) {
    master[i++] = ele;
}
</code></pre>

<p>Or better yet, just hard code <code>master</code>, like user3629249 said.</p>

<p><code>smorse()</code> returns a pointer to malloc'd memory that is never freed.</p>

<h2>smorse()</h2>

<p>For proper morse code, you need a short space, or break, between letters and a slightly longer one between words.  The inter-letter space can be a space at the end of each master code.</p>

<p>The longest morse code string is 5 characters (including a space at the end of each code), so you could just do:</p>

<pre><code>output = (char *)malloc(5 * strlen(str))
</code></pre>

<p>In this loop, <code>i</code> is never used:</p>

<pre><code>for (i = 0; i &lt; end; i++) {
    ele = master[(*str) - 97];
    strcat(output, ele);
    str++;
}
</code></pre>

<p>It could be coded like:</p>

<pre><code>for (char *c = str; *c; c++) {
    ele = master[(*c) - 97];
    strcat(output, ele);
}
</code></pre>
    </div>