<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>class/instance variables</h2>

<p>In your code, you use class variables instead of instance variables.</p>

<p>You have to know that class variables are shared in all instance, for example:</p>

<pre class="lang-py prettyprint-override"><code>class CoffeeMachine:
    water = 400


my_machine = CoffeeMachine()
your_machine = CoffeeMachine()

CoffeeMachine.water = 0
print(my_machine.water)
print(your_machine.water)
</code></pre>

<p>You get 0 in both machines!</p>

<p>The right way is to used instance variable. Instance variables determine the state of your object:</p>

<pre class="lang-py prettyprint-override"><code>class CoffeeMachine:
    def __init__(self):
        self.water = 400


my_machine = CoffeeMachine()
your_machine = CoffeeMachine()

my_machine.water = 0
print(my_machine.water)
print(your_machine.water)
</code></pre>

<p>So, in your code, you can replace <code>CoffeeMachine.sothing</code> by <code>self.sothing</code>.</p>

<p>See the chapter <a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="noreferrer">Class and Instance Variables</a> in the Python documentation.</p>

<p>Your constructor become:</p>

<pre class="lang-py prettyprint-override"><code>class CoffeeMachine:
    def __init__(self):
        self.water = 400
        self.milk = 540
        self.coffee_beans = 120
        self.cups = 9
        self.money = 550
        self.running = False
</code></pre>

<h2>infinite recursion</h2>

<p>I have detected a potential infinite recursion:</p>

<ul>
<li>The <code>__init__</code> function calls `start``,</li>
<li>The <code>start</code> function calls on of the actions,</li>
<li>Each action calls <code>return_to_menu</code>,</li>
<li>And the <code>return_to_menu</code> function calls <code>start</code> againâ€¦</li>
</ul>

<p>To avoid that, you can use an infinite loop, which will be controlled by the <em>running</em> attribute.
Here is the scenario:</p>

<p>The machine is initialised: <em>running</em> is <code>True</code>,</p>

<p>While <em>running</em> is <code>True</code>:</p>

<ul>
<li>The user enter the action he wants to do</li>
<li>The machine execute the action</li>
</ul>

<p>You can easily translate into a <code>main</code> function:</p>

<pre class="lang-py prettyprint-override"><code>def main():
    machine = CoffeeMachine()
    while machine.running:
        action = ask_action()
        machine.execute_action(action)


if __name__ == '__main__':
    main()
</code></pre>

<p>Of course, we need to change the implementation slightly:</p>

<ul>
<li><p>the initialisation must set <em>running</em> to <code>True</code>,</p>

<pre class="lang-py prettyprint-override"><code>def __init__(self):
    ...
    self.running = False
</code></pre></li>
<li><p>the old <code>start</code> method is divided into 2 functions with a single role: prompting the user and running an action.</p></li>
<li><p>The <code>return_to_menu</code> is removed.</p></li>
</ul>

<h2>Prompting the user</h2>

<p>When you ask something to the user you generally need to check the input to make sure it matches what we need. If not, we loop forever.</p>

<p>For the <code>ask_action</code> function, we have a set of acceptable answers: "buy", "fill", "take", "exit", "remaining". So, we can loop forever until the user enter an acceptable answer.</p>

<p>In Python, we can use an enumeration for that:</p>

<pre class="lang-py prettyprint-override"><code>import enum

class Action(enum.Enum):
    BUY = "buy"
    FILL = "fill"
    TAKE = "take"
    EXIT = "exit"
    REMAINING = "remaining"
</code></pre>

<p>Here is a small demo of the possibilities:</p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; possible_values = [action.value for action in Action]
&gt;&gt;&gt; possible_values
['buy', 'fill', 'take', 'exit', 'remaining']

&gt;&gt;&gt; action = Action("fill")
&gt;&gt;&gt; action
&lt;Action.FILL: 'fill'&gt;

&gt;&gt;&gt; action = Action("quit")
Traceback (most recent call last):
  ...
ValueError: 'quit' is not a valid Action
</code></pre>

<p>Here is how you can define the <code>ask_action</code> function:</p>

<pre class="lang-py prettyprint-override"><code>import enum

class Action(enum.Enum):
    BUY = "buy"
    FILL = "fill"
    TAKE = "take"
    EXIT = "exit"
    REMAINING = "remaining"

def ask_action():
    possible_values = ", ".join([action.value for action in Action])
    while True:
        answer = input(f"Write action ({possible_values}):\n")
        try:
            return Action(answer)
        except ValueError:
            print(f"This answer is not valid: {answer}")
</code></pre>

<p>Note: <code>ask_action</code> is a function here, there no need to turn it into a method since it doesn't access the class variables or methods.</p>

<h2>executing an action</h2>

<p>It easy to change the old <code>start</code> method into a <code>execute_action</code> method. This method has the parameter <em>action</em>:</p>

<pre class="lang-py prettyprint-override"><code>def execute_action(self, action):
    if action == Action.BUY:
        self.buy()
    elif action == Action.FILL:
        self.fill()
    elif action == Action.TAKE:
        self.take()
    elif action == Action.EXIT:
        self.running = False
    elif action == Action.REMAINING:
        self.show_remaining()
    else:
        raise NotImplementedError(action)
</code></pre>

<p>The implementation is slightly changed:</p>

<ul>
<li>The <strong>exit</strong> action is changed to set <em>running</em> to <code>False</code>.</li>
<li><code>NotImplementedError</code> is raised if the action is unknown: this prevent unwanted behavior if your <code>Action</code> enumaration changes in the future but you forget to update <code>execute_action</code>.</li>
<li><code>status</code> (which is renamed <code>show_remaining</code>) is fixed: no need to take the class in parameter.</li>
</ul>

<p>As you can see, it is very simple.</p>

<h2>Show remaining</h2>

<p>The <code>status</code> function was renamed <code>show_remaining</code> to use a verb and match the term used in <code>Action</code>.
But you can also change the Action into "status" if you prefer.</p>

<p>The status don't need to have any parameter because you only want to display the instance variable values.
So, you can write:</p>

<pre class="lang-py prettyprint-override"><code>def show_remaining(self):
    """
    Display the quantities of supplies in the machine at the moment
    """
    print(f"The coffee machine has:")
    print(f"{self.water} of water")
    print(f"{self.milk} of milk")
    print(f"{self.coffee_beans} of coffee beans")
    print(f"{self.cups} of disposable cups")
    print(f"${self.money} of money")
</code></pre>

<p>Instead of using a comment you can use a docstring. This is that way we document function and classes in Python.</p>

<p>You can read <a href="https://docs.python-guide.org/writing/documentation/" rel="noreferrer">The Hitchhiker Guide to Python</a> about docstring and API documentation in general. Very good book.</p>

<h2>Ask for a drink</h2>

<p>The "buy" action is similar to the "ask_action/execute_action".
If you use the same logic, you'll see that you can drop or reimplement the <code>deduct_supplies</code> function too.</p>

<p>The difference is that you want the user to enter a number instead of a text.
You have: 1 - "espresso", 2 - "latte", 3 - "cappuccino", for "back to main menu", you can choose 9.
All that can be stored in a class Python <code>dict</code> to do the mapping between numbers and labels.</p>

<p>Note that <code>ask_drink</code> is a good name for this function:</p>

<pre class="lang-py prettyprint-override"><code>def ask_drink():
    choices = {1: "espresso", 2: "latte", 3: "cappuccino", 9: "back to main menu"}
    possible_values = ", ".join(f"{value} - {name}" for value, name in sorted(choices.items()))
    while True:
        answer = input(f"What do you want to buy?  ({possible_values}):\n")
        try:
            value = int(answer)
            if value in choices:
                return value
            print(f"This answer is not valid: {answer}")
        except ValueError:
            print(f"This is not a number: {answer}")
</code></pre>

<p>Remarks:</p>

<ul>
<li><code>sorted</code> is required because <code>dict</code> keys are unordered (well, actually, recent versions of Python keep keys order),</li>
<li>Using <code>value in choices</code> is a good way to check if a key is in a dictionary.</li>
</ul>

<h2>Consumption (deduced supplies)</h2>

<p>In your coffee machine, deduced supplies is represented as a list of 5 elements.
For instance, we have <code>[250, 0, 16, 1, 4]</code> for water, milk, coffee beans, cups and money.
If you have a list, you need to access the items by index. But I would be easier to access the items by name. To do that, you can use a <a href="https://docs.python.org/3.9/library/collections.html#collections.namedtuple" rel="noreferrer"><code>collections.namedtuple</code></a>. A <code>namedtuple</code> is a factory function which creates a class (a subclass of <code>tuple</code>).</p>

<p>First, you can define a new tuple class, we call it <code>Consumption</code>:</p>

<pre class="lang-py prettyprint-override"><code>import collections

Consumption = collections.namedtuple("Consumption", "water, milk, coffee_beans, cups, money")
</code></pre>

<p>You can instanciate the <code>Consumption</code> like a classic <code>tuple</code> or with key/value pairs:</p>

<pre class="lang-py prettyprint-override"><code>espresso_cons = Consumption(250, 0, 16, 1, 4)
latte_cons = Consumption(water=350, milk=75, coffee_beans=20, cups=1, money=7)
cappuccino_cons = Consumption(water=200, milk=100, coffee_beans=12, cups=1, money=6)
</code></pre>

<p><em>note:</em> the second form is really more readable.</p>

<h2>Checking availability</h2>

<p>When you need to "check" something, you can think about exceptions. The idea behind this is: I do some tests and if something is wrong I raise an exception. The exception type and/or the exception message can detail the problem. Then I can use an exception handler to display the message.</p>

<p>To define an exception, a good practice is to inherit the <code>Exception</code> class like this:</p>

<pre class="lang-py prettyprint-override"><code>class NotEnoughSupplyError(Exception):
    def __init__(self, supply):
        msg = f"Sorry, not enough {supply}"
        super(NotEnoughSupplyError, self).__init__(msg)
</code></pre>

<p>This exception take a <em>supply</em> parameter which is the name of the missing supply.</p>

<p>You can then implement the <code>available_check</code> method as below:</p>

<pre class="lang-py prettyprint-override"><code>def available_check(self, consumption):
    """
    Checks if it can afford making that type of coffee at the moment

    :param consumption: the Consumption
    :raise NotEnoughSupplyError: if at least one supply is missing.
    """
    if self.water - consumption.water &lt; 0:
        raise NotEnoughSupplyError("water")
    elif self.milk - consumption.milk &lt; 0:
        raise NotEnoughSupplyError("milk")
    elif self.coffee_beans - consumption.coffee_beans &lt; 0:
        raise NotEnoughSupplyError("coffee beans")
    elif self.cups - consumption.cups &lt; 0:
        raise NotEnoughSupplyError("cups")
</code></pre>

<p>Really simple, isn't it?</p>

<h2>The <code>buy</code> method</h2>

<p>You know have all the elements in hand to implement the <code>buy</code> method:</p>

<pre class="lang-py prettyprint-override"><code>def buy(self):
    drink = ask_drink()
    if drink == 9:
        return
    espresso_cons = Consumption(250, 0, 16, 1, 4)
    latte_cons = Consumption(water=350, milk=75, coffee_beans=20, cups=1, money=7)
    cappuccino_cons = Consumption(water=200, milk=100, coffee_beans=12, cups=1, money=6)
    consumption = {1: espresso_cons, 2: latte_cons, 3: cappuccino_cons}[drink]
    try:
        self.available_check(consumption)
    except NotEnoughSupplyError as exc:
        print(exc)
    else:
        print("I have enough resources, making you a coffee!")
        self.water -= consumption.water
        self.milk -= consumption.milk
        self.coffee_beans -= consumption.coffee_beans
        self.cups -= consumption.cups
        self.money += consumption.money
</code></pre>

<p>To get the <code>consumption</code> we introduce a small mapping between each drink value and each <code>Consumption</code> instances.</p>

<p>Of course, instead of an exception handler you can use a classic <code>if</code>. But I wanted to show you something powerful.</p>

<h2>The <code>fill</code> method</h2>

<p>Again, to implement the <code>fill</code> method, you can introduce a function <code>ask_quantity</code> which ask for a quantity of a given supply. This function take a message in parameter:</p>

<pre class="lang-py prettyprint-override"><code>def ask_quantity(msg):
    while True:
        answer = input(msg + "\n")
        try:
            value = int(answer)
            if value &gt;= 0:
                return value
            print(f"This answer is not valid: {answer}")
        except ValueError:
            print(f"This is not a number: {answer}")
</code></pre>

<p>The <code>fill</code> method can be implemented as follow:</p>

<pre class="lang-py prettyprint-override"><code>def fill(self):
    """
    Add supplies to the machine
    """
    self.water += ask_quantity("Write how many ml of water do you want to add:")
    self.milk += ask_quantity("Write how many ml of milk do you want to add:")
    self.coffee_beans += ask_quantity("Write how many grams of coffee beans do you want to add:")
    self.cups += ask_quantity("Write how many disposable cups of coffee do you want to add:")
</code></pre>

<h2>The <code>take</code> method.</h2>

<p>Not sure to understand what the <code>take</code> method do: <em>money</em> is always reset to 0!?</p>

<h2>Putting everything together</h2>

<p>As you can see, I have done a lot of improvements. You can certainly go further, but write something simple and easy to read.</p>

<pre class="lang-py prettyprint-override"><code>import collections
import enum


class Action(enum.Enum):
    BUY = "buy"
    FILL = "fill"
    TAKE = "take"
    EXIT = "exit"
    REMAINING = "remaining"


def ask_action():
    possible_values = ", ".join([action.value for action in Action])
    while True:
        answer = input(f"Write action ({possible_values}):\n")
        try:
            return Action(answer)
        except ValueError:
            print(f"This answer is not valid: {answer}")


def ask_drink():
    choices = {1: "espresso", 2: "latte", 3: "cappuccino", 9: "back to main menu"}
    possible_values = ", ".join(f"{value} - {name}" for value, name in sorted(choices.items()))
    while True:
        answer = input(f"What do you want to buy?  ({possible_values}):\n")
        try:
            value = int(answer)
            if value in choices:
                return value
            print(f"This answer is not valid: {answer}")
        except ValueError:
            print(f"This is not a number: {answer}")


def ask_quantity(msg):
    while True:
        answer = input(msg + "\n")
        try:
            value = int(answer)
            if value &gt;= 0:
                return value
            print(f"This answer is not valid: {answer}")
        except ValueError:
            print(f"This is not a number: {answer}")


Consumption = collections.namedtuple("Consumption", "water, milk, coffee_beans, cups, money")


class NotEnoughSupplyError(Exception):
    def __init__(self, supply):
        msg = f"Sorry, not enough {supply}"
        super(NotEnoughSupplyError, self).__init__(msg)


class CoffeeMachine:
    def __init__(self):
        # quantities of items the coffee machine already had
        self.water = 400
        self.milk = 540
        self.coffee_beans = 120
        self.cups = 9
        self.money = 550
        self.running = True

    def execute_action(self, action):
        if action == Action.BUY:
            self.buy()
        elif action == Action.FILL:
            self.fill()
        elif action == Action.TAKE:
            self.take()
        elif action == Action.EXIT:
            self.running = False
        elif action == Action.REMAINING:
            self.show_remaining()
        else:
            raise NotImplementedError(action)

    def available_check(self, consumption):
        """
        Checks if it can afford making that type of coffee at the moment

        :param consumption: the Consumption
        :raise NotEnoughSupplyError: if at least one supply is missing.
        """
        if self.water - consumption.water &lt; 0:
            raise NotEnoughSupplyError("water")
        elif self.milk - consumption.milk &lt; 0:
            raise NotEnoughSupplyError("milk")
        elif self.coffee_beans - consumption.coffee_beans &lt; 0:
            raise NotEnoughSupplyError("coffee beans")
        elif self.cups - consumption.cups &lt; 0:
            raise NotEnoughSupplyError("cups")

    def buy(self):
        drink = ask_drink()
        if drink == 9:
            return
        espresso_cons = Consumption(250, 0, 16, 1, 4)
        latte_cons = Consumption(water=350, milk=75, coffee_beans=20, cups=1, money=7)
        cappuccino_cons = Consumption(water=200, milk=100, coffee_beans=12, cups=1, money=6)
        consumption = {1: espresso_cons, 2: latte_cons, 3: cappuccino_cons}[drink]
        try:
            self.available_check(consumption)
        except NotEnoughSupplyError as exc:
            print(exc)
        else:
            print("I have enough resources, making you a coffee!")
            self.water -= consumption.water
            self.milk -= consumption.milk
            self.coffee_beans -= consumption.coffee_beans
            self.cups -= consumption.cups
            self.money += consumption.money

    def fill(self):
        """
        Add supplies to the machine
        """
        self.water += ask_quantity("Write how many ml of water do you want to add:")
        self.milk += ask_quantity("Write how many ml of milk do you want to add:")
        self.coffee_beans += ask_quantity("Write how many grams of coffee beans do you want to add:")
        self.cups += ask_quantity("Write how many disposable cups of coffee do you want to add:")

    def take(self):
        """
        Take the money from the machine
        """
        print(f"I gave you ${self.money}")
        self.money = 0

    def show_remaining(self):
        """
        Display the quantities of supplies in the machine at the moment
        """
        print(f"The coffee machine has:")
        print(f"{self.water} of water")
        print(f"{self.milk} of milk")
        print(f"{self.coffee_beans} of coffee beans")
        print(f"{self.cups} of disposable cups")
        print(f"${self.money} of money")


def main():
    machine = CoffeeMachine()
    while machine.running:
        action = ask_action()
        machine.execute_action(action)


if __name__ == '__main__':
    main()
</code></pre>

<p>IMO, the <em>money</em> should not be a supply like <em>water</em>...</p>
    </div>