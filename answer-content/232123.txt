<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, congratulations! Being able to produce something usable with another person is an incredibly important skill, and especially in programming. Please don't worry about the amount of suggestions below – I'm treating this like any other Python review.</p>

<h2>Specific suggestions</h2>

<ol>
<li><p>Module documentation, like the lines at the top of your file, is usually written within triple double quotes, like this:</p>

<pre><code>"""
AGENCRYPTION […]
"""
</code></pre>

<p>You can also use this to write multi-line strings without having to embed <code>\n</code> escape characters within them.</p></li>
<li>It would be handy to be able to set the debugging flag from the command line rather than having to modify the code. You can do that by using either <a href="https://docs.python.org/3/library/argparse.html" rel="noreferrer"><code>argparse</code></a> to add a <code>--debug</code> flag or by checking whether <code>os.environ["DEBUG"]</code> is not empty.</li>
<li><code>from [something] import *</code> is a handy shortcut, but it makes the code harder to read. Consider when you're looking at a line containing a call to <code>randint</code> somewhere. You might want to see how <code>randint</code> is implemented, to understand whether it's doing what you expect. To do so in a simple text editor you would have to first search for the string "randint", and once you confirm that it's not defined locally you'd have to look through each of the <code>*</code> imports to see where it's defined. If you <code>from random import randint</code> instead it's really easy to find.</li>
<li>Using <code>global</code> can also be handy, but it makes the interactions between the various parts of your code much harder to understand. The standard fix for this is to simply remove a single mention of the <code>global</code> keyword and instead pass parameters around until each piece of code gets exactly what it needs from the caller. You can then repeat this until there are no more globals.</li>
<li>The string consisting of all valid key characters is repeated a few times. If you pull it out into a constant such as <code>KEY_CHARACTERS = "[…]"</code> at the top of your file you can just refer to that in the rest of your code.</li>
<li>This program mixes GUI (TK) code with encryption code. It would be good to split the GUI code into its own file, and importing the relevant functions there. This makes it possible to understand and use the encryption code on its own, for example if you want to create a GUI with a different toolkit.</li>
<li><p>If you try to import your file in another file Python will actually <em>run</em> the code. This which means the code isn't actually reusable. The way to work around this is to create a <code>main</code> function in your file and call it only when your script is run from the shell:</p>

<pre><code>if __name__ == "__main__":
    main()
</code></pre>

<p>Your <code>main</code> function actually does the work of instantiating and running the GUI, which means the various functions can be imported without side effects.</p></li>
<li><code>"".join(key)</code> should be unnecessary, because <code>genkey</code> already returns a string.</li>
<li>The various modes should probably be an <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer"><code>enum</code></a> with values like <code>ENCRYPTION</code> and <code>DECRYPTION</code> - that way the "magic numbers" assigned to <code>mode</code> are instead human readable variable references such as <code>modes.ENCRYPTION</code>.</li>
<li>You probably already know this, but I need to warn about it just in case: you should not use this code to transfer actual secrets. Cryptography is really, really difficult, and there are existing systems like PGP (available from tools like <code>gnupg</code>) to do this. If you want to know how they work there is a lot of advanced maths and difficult code involved.</li>
</ol>

<h2>Tool support suggestions</h2>

<ol>
<li><a href="https://github.com/ambv/black" rel="noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic. It'll do things like adjusting the vertical and horizontal spacing, while keeping the functionality of the code unchanged.</li>
<li><a href="https://pypi.org/project/isort/" rel="noreferrer"><code>isort</code></a> can group imports (built-ins first, then libraries and finally imports from within your project) and sort them.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="noreferrer"><code>flake8</code></a> can give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre></li>
<li><p>I would then recommend validating your <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">type hints</a> using a strict <a href="https://github.com/python/mypy" rel="noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre>

<p>This ensures that anyone reading the code (including yourself) understand how it's meant to be called, which is very powerful in terms of modifying and reusing it. For example, it looks like the <code>genkey</code> signature should be <code>def genkey() -&gt; str:</code> to show that it returns a string, and <code>debug</code>'s signature should be <code>def debug(text: str) -&gt; None:</code> to show that it takes a string (as opposed to for example <code>bytes</code> or <code>StringIO</code>) and does not return anything.</p></li>
</ol>

<h2>General suggestions</h2>

<ol>
<li>Using a free IDE like PyCharm Community or Visual Studio Code is incredibly helpful to write non-trivial code. I can't possibly go into detail here, but if you explore an IDE you'll find literally hundreds of helpful features, such as highlighting unused variables, automatically pulling out variables and inlining them, and spell checking.</li>
</ol>
    </div>