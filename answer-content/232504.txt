<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have never seen a post proclaiming “optimized for speed” that uses so much LINQ enumeration.  There might be a good reason for that.  Don’t get me wrong.  I like LINQ.  It has nice syntactic sugar but is not known for being highly performant.</p>

<p>I have run some performance tests with your code, so let’s understand my test machine: CPU is an Intel I7-6700 with 4 cores/8 logical processors at 3.40 Ghz, 16GB RAM, .NET Framework 4.8, and Visual Studio 2019.  What happens when I run:</p>

<pre><code>var number = 10_000_000;

var sw = new Stopwatch();
var flag = PrimeTable.IsPrime(number);
sw.Stop();

Console.WriteLine($"Number: {number}, IsPrime: {flag}, Elapsed: {sw.Elapsed}");
</code></pre>

<p>Your code, supposedly “optimized for speed” returns:</p>

<pre><code>Number: 10000000, IsPrime: False, Elapsed: 00:14:50.8241307
</code></pre>

<p><strong>ALMOST 15 MINUTES?!</strong>  Which makes me wonder: did you even test your own code?  If you did not bother, but rather just felt in your mind that it should be fast, then SHAME ON YOU.  But if you did performance tests, and walked away thinking it was fast, then SHAME ON YOU 1000 TIMES.</p>

<p>The biggest disconnect I see with your code come from your first sentence, which ends with</p>

<blockquote>
  <p>I want to find (small) prime numbers fast, yet without needing too
  much memory.</p>
</blockquote>

<p>You never bother to define <strong>small</strong>.  Is it 1000, 100_000, or 1 million? What is <strong>small</strong> in your mind?  You never define it and yet you then use (A) performance dragging LINQ enumerations, and (B) memory consuming List for the <code>PrimeTable</code> both of which are in conflict with your stated objectives.</p>

<p>(As an aside, if you want something small, one can use a very fast, small sieve of Eratosthenes, say of with an upper limit of 1 or 10 million.  On my machine, it took a sieve 0.13 seconds (not 15 minutes) to generate the sieve for 10 million and return a fully populated list of primes. That is small, fast, and uses limited memory.  The downside is that is does not grow.  I am pondering making a sieve that can expand on-demand but that’s a topic for another day.)</p>

<p>When working with sets of primes, generally there are 2 ways to proceed.  Either you keep a table of the known primes, or you keep a table of all numbers (usually only the odds) with a flag to denote prime or not.  Both come with their own set of advantages and disadvantages.  After you weigh your objectives over the advantages/disadvantages, you then pick your poison, and should try to provide a practical solution.  You chose a prime table.</p>

<p>Your <code>PrimeTable</code> seems to be unbounded, other than it would be limited by <code>Int64.MaxValue</code>.  Except it’s really constrained earlier in that the index to <code>PrimeTable</code> is limited to <code>Int32.MaxValue</code>.  On a more practical level, you are limited further in .NET’s memory usage.  On my machine, I can have <code>List&lt;Int64&gt;</code> of <code>134_217_728</code> primes before throwing a memory error.  Consider further:</p>

<p>For 31 bit primes, that is all of <code>Int32</code>, there will be <code>105_097_565</code> primes and the last known prime is <code>2_147_483_647</code>.  For 32 bit primes, that is all of <code>UInt32</code>, there will be <code>203_280_221</code> primes and the last known prime is <code>4_294_967_291</code>.  I got this from using a sieve.  Granted it takes less than 45 seconds to generate the entire sieve, which you may scoff at, but then again it took 15 minutes for yours to tell me that 10 million is not a prime.</p>

<p>If you defined your <code>PrimeTable</code> to be a <code>List&lt;UInt32&gt;</code>, you could hold all <code>203_280_221</code> primes in memory.  Granted it may take months for your app to find them all.</p>

<p>On to other topics, I don’t like the static property named <code>MaxValue</code>.  There is no written standard, but generally when I see a property named <code>MaxValue</code>, I tend to think of it as a value that never changes.  You state that it’s only for debugging, but some very critical logic for producing primes depends on it.</p>

<p><strong>Suggestions for improvement</strong></p>

<p>Follow Eric Lippert's advice to use an efficient search instead of performance killing LINQ enumerations.</p>

<p>I would suggest starting out practical with <code>Int32</code> instead of <code>Int64</code>.  However, since I am working with your current code, I am using <code>long</code> below.</p>

<p>At the very least, I would initialize <code>PrimeTable</code> to be:</p>

<pre><code>private static readonly List&lt;long&gt; PrimeNumbers = new List&lt;long&gt;() { 2 };
</code></pre>

<p>But why stop there?  Why not start it with:</p>

<pre><code>private static readonly List&lt;long&gt; PrimeNumbers = new List&lt;long&gt;() { 2, 3, 5, 7, 11, 13, 17, 19 };
</code></pre>

<p>Once you do that, you can add 2 very nice properties:</p>

<pre><code>public static int KnownPrimeCount =&gt; PrimeNumbers.Count;
public static long LargestKnownPrime =&gt; PrimeNumbers.Last();
</code></pre>

<p>And maybe <code>LargestKnownPrime</code> can make <code>MaxValue</code> go away.</p>

<p>Another suggestion is that since you have a list in memory, why not expose that to the user?  Perhaps:</p>

<pre><code>public static IReadOnlyList&lt;long&gt; KnownPrimes =&gt; PrimeNumbers;
</code></pre>

<p><strong>IsPrime – Horrible Implementation</strong></p>

<p>As shown above, it took almost 15 minutes to determine that 10 million is not a prime.  Let’s start out with a couple of quick improvements for the very top of IsPrime:</p>

<pre><code>if (value &lt; 2) { return false; }
if (value % 2 == 0) { return value == 2; }
</code></pre>

<p>The performance still is bad if I were to use 10_000_001.  The problem is that checking an individual number for primality is a very different task than generating a list of a whole bunch of primes.  There is no need to use to <code>PrimeTable</code> just to determine primality, but since you have it, you could use it.  But I would use it as-is and not try to grow the table.</p>

<pre><code>public static bool IsPrime(this long value)
{
    if (value &lt; 2) { return false; }
    if (value % 2 == 0) { return value == 2; }
    if (value &lt;= LargestKnownPrime)
    {
        // determine using fast lookup to PrimeTable
        return from_table_via_fast_lookup;
    }
    // compute without modifying PrimeTable
    // https://codereview.stackexchange.com/questions/196196/get-prime-divisors-of-an-int32-using-a-wheel
    // https://codereview.stackexchange.com/questions/92575/optimized-ulong-prime-test-using-6k-1-in-parallel-threads-with-c
    return something;
}
</code></pre>
    </div>