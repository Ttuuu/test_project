<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm by no means a professional CMake user, I try to follow best practices though and have seen many talks and articles about modern CMake best practices, so lets go through your CMakeLists.</p>

<pre><code>set(CMAKE_CXX_STANDARD 14)
</code></pre>

<p>This is generally frowned upon for two different reasons. First and most important, you set this configuration globally for every target you create or import through <code>add_subdirectory</code>. In modern CMake best practices you should always prefer <code>target_</code> functions whenever possible to configure exactly the target which needs the configuration instead of setting it globally.
Second, you should not need to set the C++ standard directly, instead you should select <em>features</em> which you need to compile your project and let CMake decide the standard. See <a href="https://cmake.org/cmake/help/v3.13/command/target_compile_features.html" rel="nofollow noreferrer">target_compile_features</a>.</p>

<pre><code>set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DELPP_FEATURE_CRASH_LOG")
</code></pre>

<p>Same problem as previously, use <a href="https://cmake.org/cmake/help/v3.13/command/target_compile_definitions.html" rel="nofollow noreferrer"><code>target_compile_definitions(mytarget PUBLIC ELPP_FEATURE_CRASH_LOG)</code></a></p>

<pre><code>#
# Easylogging++
#
if(EXISTS "external/easyloggingpp")
else()
    file(MAKE_DIRECTORY external/easyloggingpp)
    file(DOWNLOAD https://github.com/muflihun/easyloggingpp/archive/v9.96.4.zip
                  downloads/easyloggingpp.zip)
    execute_process(COMMAND unzip downloads/easyloggingpp.zip -d downloads)
    file(GLOB easyloggingpp_files
              downloads/easyloggingpp-9.96.4/src/easylogging++.*)
    file(COPY ${easyloggingpp_files} DESTINATION external/easyloggingpp)
endif()
</code></pre>

<p>This looks like a messy hack to pull in a dependency. If this dependency is <strong>required</strong> to build your project you should probably add it as a subrepository to your own git source repository and use it using <code>add_subdirectory</code> (assuming it's a CMake project). Alternatively, there is also the <a href="https://cmake.org/cmake/help/latest/module/ExternalProject.html" rel="nofollow noreferrer">ExternalProject</a> module which exists for this sole reason, to pull in and compile external dependencies. </p>

<pre><code>include_directories(external/easyloggingpp)
add_library(easyloggingpp external/easyloggingpp/easylogging++.cc)
</code></pre>

<p>You're configuring globally again with <code>include_directories</code>, use <code>target_include_directories</code> instead. Also, I'd really consider splitting up your CMakeLists file, there is too much going on. Subdivide your project repository to subdirectories, one per library, and then use <code>add_subdirectory</code> to pull in all the libraries you need.</p>

<pre><code>find_package(gtest REQUIRED)
include_directories(${GTEST_INCLUDE_DIRS})
</code></pre>

<p>You're setting include directories globally again. Actually, you don't even need to set the directories at all. <code>target_link_libraries</code> does a <strong>lot</strong> more than linking. It probably should've called differently. Since <code>gtest</code> exports a target with it's <code>INTERFACE_INCLUDE_DIRECTORIES</code> set up, solely linking (<code>target_link_libraries</code>) to gtest sets up include directories automatically for the target.</p>

<p>If you follow best practices and set all configurations with <code>target_</code> functions then all you need to pull in a library should be a sole <code>target_link_library</code> since all other configurations (compiler features, include directories, ...) are automatically pulled in, given they're either set <code>PUBLIC</code> or <code>INTERFACE</code> on this library. As I said, <code>target_link_library</code> does a lot more than just linking, it's name is very misleading.
A perfect example is the <code>fmt</code> package you're using. All you're doing is <code>find_package(FMT REQUIRED CONFIG)</code> and <code>target_link_libraries(mytarget fmt::fmt)</code> and everything else to use this package is set up by the <code>target_link_libraries</code> command since the <code>fmt</code> package exports all its own requirements and include paths through its target.</p>

<p>I'm pretty sure I missed a few things but I hope these pointers help you to get started.</p>
    </div>