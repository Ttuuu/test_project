<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>awk</code> is a very heavy duty utility. Usually, if you are using <code>awk</code> you want its full power. Calling it just for line splitting seems like a huge overkill. Let's go over one at a time:</p>

<pre><code>    while read line_masses
    do
        mass=`echo $line_masses | awk -F' ' '{print $2}'`
        tag=`echo $line_masses | awk -F' ' '{print $1}'`
        ...
</code></pre>

<p>A <code>read</code> buit-in splits lines itself. Consider instead:</p>

<pre><code>    while read tag mass
    do
        ...
</code></pre>

<p>Similarly,</p>

<pre><code>    while read index hunoz1 a_tag hunoz2 rest:
</code></pre>

<p>allows the core to be rewritten as</p>

<pre><code>while read index hunoz1 a_tag hunoz2 rest; do
    while read tag mass; do
        case $mass in
            12.011150)
            if [ "$tag" == "$a_tag]; then echo -e "C\t" "$rest"; fi;;
             1.007970)
            if [ "$tag" == "$a_tag]; then echo -e "H\t" "$rest"; fi;;
        esac
    done &lt; masses.tmp
done &lt; coordinates.tmp
</code></pre>

<p>Next, I'd try to get rid of the inner loop. The <code>masses</code> file should be read just once, and its data stored in array. This is how the core should look like:</p>

<pre><code>declare -A elements

while read tag mass; do
    elements[tag]=mass
done &lt; masses.tmp

while read index hunoz1 tag hunoz2 rest; do
    mass = $elements[tag]
    case $mass in
        12.011150) symbol=C ;;
         1.007970) symbol=H ;;
    esac
    echo $symbol "\t" $rest
done &lt; coordinates.tmp
</code></pre>

<p>The preparation of temporary files may also be greatly simplified. I'll update on that later.</p>
    </div>