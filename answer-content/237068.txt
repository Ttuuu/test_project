<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to previous answers, which address valid points, I'd like to point out that your code is not scalable. If a matrix always has exactly 16 elements, time and space complexity are not really an issue, as they describe how the algorithm behaves at different scales.</p>

<p>You should figure out the row and column count of the matrix beforehand, and use these values when creating <code>transposedArray</code> and in your <code>for</code> loops.</p>

<p>As for time and space complexity, they both can be improved, as noted by Sharon Ben Asher in his answer. To go in further details, your algorithm performs <code>n*m</code> operations, or <code>n²</code> operations if <code>m = n</code>. Iterating on the upper half triangle reduces the number of operations to <code>n * (n-1) / 2</code>, which is a sizeable improvement by a factor 2. However, this would fail on a non-square matrix see the example below:</p>

<pre><code>  input    |    expected  |   iteration on
           |     output   |  upper triangle
-------------------------------------------
a b c d    |     a e i    |     a e i d
e f g h    |     b f j    |     b f j h
i j k l    |     c g k    |     c g k l
           |     d h l    |
</code></pre>

<p>As you state that you are currently learning big O notation, note that the time complexity is still <code>O(n²)</code>, as it is still the dominant term in the number of operations performed. The improvement is far from negligible, but it isn't represented in big O notation.</p>

<p>As of space complexity, swapping elements in place doesn't require allocating another <code>n*m</code> array to store the results of the operation. This means an improvement in terms of space complexity from <code>O(n²)</code> to <code>O(1)</code>. This is great, especially with larger inputs. However, this also fails for non-square inputs, and means the input is mutated. If you happen to need the input in its original state, you'd have to transpose the matrix again.</p>

<p>Depending on the exact behavior you need, iterating on the full matrix or the upper triangle, and transposing in place or returning a transposed array can both be justified.</p>

<p>Finally, for integration purposes, your class could use some refactoring, most importantly to allow processing a matrix of any size.</p>
    </div>