<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should reduce the use of explicit type declaration as much as possible.</p>

<hr>

<p>A function isn't of much value if it just prints its calculated result. You should return the result to let it be up to the client to handle it.</p>

<p>But you can't break out from a loop via an if-statement in F#. You can overcome that by wrapping the outer for-loop in a <code>seq {...}</code> statement and then <code>yield</code> the one and only result and then take the first element from that sequence. But that is inefficient in that it iterates through all the cities even if the first is the one searched for.</p>

<p>Below I've refactored your algorithm according to the above in order to be able to return the result from the function:</p>

<pre><code>let SumByTown town input =
    let rows = (string input).Split('\n')
    seq { for row in rows do
            if (row.Contains(town)) then 
                let months = row.Replace(town + ":" , "").Split(',')
                let sequence = seq { for j in months do yield j.Remove(0,4) |&gt; double } |&gt; Seq.sum
                yield sequence
    } |&gt; Seq.head
</code></pre>

<p>But this still doesn't look very functional IMO.</p>

<hr>

<p>For inspiration is here a version that uses the built in higher order functions in a more functional manner:</p>

<pre><code>let calculateCity city data =
    let sum values = values |&gt; Array.sum
    let avg values = values |&gt; Array.average
    let mean values = (values |&gt; Array.sort).[values.Length / 2]

    let handleCity cityText = 
        let values = Regex.Replace(cityText, "[^0-9,.]+", "").Split(',') |&gt; Array.map float
        (sum values, avg values, mean values)

    (string data).Split('\n') |&gt; Seq.find (fun s -&gt; s.StartsWith(city)) |&gt; handleCity

let printCityData (sum, avg, mean) = printfn "Sum: %.2f, Average: %.2f, Mean: %.2f" sum avg mean
</code></pre>

<p><strong>Usage:</strong></p>

<pre><code>printCityData (calculateCity town data)
</code></pre>

<hr>

<p><strong>Update</strong></p>

<p>Antoher way to use <code>Regex</code> is to match numbers instead of removing non-numeric chars:</p>

<pre><code>let calculateCity1 city data =
    let sum values = values |&gt; Seq.sum
    let avg values = values |&gt; Seq.average
    let mean values = (values |&gt; Seq.sort).ElementAt((values|&gt; Seq.length)/ 2)
    let extractValues text = Regex.Matches(text, "\d+.\d+").Cast&lt;Match&gt;() |&gt; Seq.map (fun m -&gt; m.Value)

    let handleCity cityText = 
        let values = cityText |&gt; extractValues |&gt; Seq.map float
        (sum values, avg values, mean values)

    (string data).Split('\n') |&gt; Seq.find (fun s -&gt; s.StartsWith(city)) |&gt; handleCity

let printCityData (sum, avg, mean) = printfn "Sum: %.2f, Average: %.2f, Mean: %.2f" sum avg mean
</code></pre>

<p>This requires an <code>open System.Linq</code> at the top of the module</p>
    </div>