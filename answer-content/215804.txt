<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>EDIT: I mistook "nearest" to mean "numerically closest" but the problem asks for minimum distance from the index.  As the other answer points out, there are faster methods than visiting every element.</em></p>

<p>The answer to the followup question is "yes."</p>

<p>"Larger" is <a href="https://english.stackexchange.com/questions/102351/what-is-an-adjective-for-a-very-large-negative-number">ambiguous</a>: if you ask someone for a "large negative number" they probably don't answer "negative one."   Attribute this to sloppiness on the author's part, unless you've reason to suspect trickery.</p>

<p>I'm not a fan of these variable names: <code>idx1</code> should be <code>idx0</code>, or <code>i0</code> or <code>initialIndex</code>.  <code>nearestLargest</code> isn't the largest anything and <code>nearestLarger</code> would be more accurate.  <code>num</code> <em>is</em> a number, but so is everything elseâ€”maybe <code>minimum</code> or <code>baseline</code> or <code>mustBeGreaterThan</code>. <code>nearestLargestNumber</code> contains an index, not a number, while the number is held in <code>nearestLargest</code>.</p>

<p>I suggest one common prefix for your index variables and another prefix for value variables (though you don't really need more than one).</p>

<pre><code>const nearestGreater = (arr, i0) =&gt; arr.reduce(  
        (iNearestGreater, val, i) =&gt; 
            ( val &gt; arr[i0] &amp;&amp; ( iNearestGreater===null || val &lt; arr[ iNearestGreater ] ) ) ? 
                i : iNearestGreater,
        null
    );
</code></pre>
    </div>