<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is the solution I proposed, thought more as a DP problem: We update the best distance with each passing week, so at all times we know the highest vacations we can get after x weeks have passed. Here <code>best[officeA]</code> stores the highest vacations we can get after the <code>week</code> ending up at officeA.</p>

<p>The complexity is the same as the one @Roman Susi proposed.</p>

<pre><code>vacation = [
{"H": 1, "A": 0, "B": 2},  # week 1
{"H": 0, "A": 2, "B": 0}
]


flights = [("H", "A"), ("H", "B")]

def get_optimal_path():
    best = {}
    neighbors = {}

    for officeA, officeB in flights:
       best[officeA] = 0
       best[officeB] = 0

       if officeA not in neighbors:
           neighbors[officeA] = [] 

       if officeB not in neighbors:
           neighbors[officeB] = []   

       neighbors[officeA].append(officeB)
       neighbors[officeB].append(officeA)      

    reached = set("H")

    for week in range(0, len(vacation)):
       oldBest = {}
       for office in best.keys():
           oldBest[office] = best[office]

       for currentOffice in set(reached): #for each office we have already reached
           for officeB in neighbors[currentOffice]:
               best[officeB] = max(oldBest[currentOffice] + vacation[week][officeB], best[officeB]) # keep max between taking the flight and what we had
               reached.add(officeB)
           best[currentOffice] = max(oldBest[currentOffice] + vacation[week][currentOffice], best[currentOffice]) #keep max between staying at current office and what we had

    print(max(best.values()))

get_optimal_path()
</code></pre>
    </div>