<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some of the variable names seem misleading. For example, <code>input</code> is actually a <code>jQuery</code> collection of elements with the radio inputs excluded, so perhaps <code>nonRadioInputs</code> would be more appropriate. Similarly, <code>radio</code> might be better named as <code>radioInputs</code>, <code>select</code> might be better named as <code>selectInputs</code>, etc.</p>

<p>Also, some of the method names are confusing. For example, when I read <code>isValid(input)</code> I would expect such a funtion to return a boolean about whether the input is valid or not. The function appears to actually remove a class name and add a class name. A name that would make more sense to me would be something like <code>addValidClassName()</code>. The same is true for <code>inValid(input)</code> and <code>isEmpty(input)</code>.</p>

<hr>

<p>The function <code>delay()</code> does not appear to be used, though there is a commented line utilizing it. It can be removed unless you plan to use it, in which case it might be advisable to only assign <code>timer</code> within that function.</p>

<hr>

<p>The variable <code>windowHeight</code> appears to be assigned a value but never used. It can be safely removed. </p>

<hr>

<p>The variable <code>windowWidth</code>  is declared without the <code>var</code> keyword, this it is considered a <strong>global</strong> variable - actually all the variables outside a function are considered global, so you could limit the scope of all those by moving the whole code into an <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">IIFE</a>.</p>

<hr>

<p>The registration of the callback for the window resize event can be simplified from </p>

<blockquote>
<pre><code>$(window).resize(function () {
    windowSize();
});
</code></pre>
</blockquote>

<p>To:</p>

<pre><code>$(window).resize(windowSize);
</code></pre>

<hr>

<p>The exclusion of radio inputs could be incorporated into the CSS selector using the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:not" rel="nofollow noreferrer"><code>:not()</code></a> CSS pseudo-class instead of the jQuery <a href="http://api.jquery.com/not/" rel="nofollow noreferrer"><code>.not()</code></a> filter - i.e. instead of </p>

<blockquote>
<pre><code>input = $('input').not('[type=radio]'),
</code></pre>
</blockquote>

<p>Use this:</p>

<pre><code>input = $('input:not([type=radio])'),
</code></pre>

<hr>

<p>In the <code>isEmpty()</code> method, the statement within the conditional block can be simplified:</p>

<blockquote>
<pre><code>$(input).removeClass('invalid').removeClass('valid').removeClass('invalid-radio');
</code></pre>
</blockquote>

<p>Because <a href="http://api.jquery.com/removeClass/" rel="nofollow noreferrer"><code>.removeClass()</code></a> accepts "<em>One or more space-separated classes to be removed from the class attribute of each matched element.</em>"<sup><a href="http://api.jquery.com/removeClass/#removeClass-className" rel="nofollow noreferrer">1</a></sup> the three calls can be simplified to a sing call:</p>

<pre><code>$(input).removeClass('invalid valid invalid-radio');
</code></pre>

<hr>

<p>The change handlers for the radio inputs within <code>AddValidationClasses()</code> could be abstracted into a function that accepts a class name for the closest element and made into <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">partial functions via <code>.bind()</code></a>.</p>

<p><sup>1</sup><sub><a href="http://api.jquery.com/removeClass/#removeClass-className" rel="nofollow noreferrer">http://api.jquery.com/removeClass/#removeClass-className</a></sub></p>
    </div>