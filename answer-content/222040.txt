<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I played around with this a bit more and came up with some alternatives.</p>

<p>First I tried to use <code>basic_ifstream&lt;byte&gt;</code> like this:</p>

<pre><code>bytes read_block(uint32_t offset,
                 uint32_t length,
                 const string&amp; filename) {
  basic_ifstream&lt;byte&gt; is(filename, ios::binary);
  istreambuf_iterator&lt;byte&gt; it(is);
  bytes data;
  copy_n(next(it, offset), length, data.begin());
  return data;
}
</code></pre>

<p>this compiles without issues and does not use C style arrays nor casts and copies directly from the file to the output vector (thus solving all of my mentioned issues).</p>

<p>However this throws a <code>std::bad_cast</code> at runtime. Based on <a href="https://stackoverflow.com/questions/17628207/stdbasic-ifstream-throws-stdbad-cast">this</a> it might be due to stl not having a <code>char_traits</code> for <code>std::byte</code>. Annoying that it's a runtime issue and not a compile issue. As of now I don't know how or if it's simple/possible to implement a char_traits for <code>std::byte</code> myself.</p>

<p>My next version loosens up on the cast restriction, but works also at runtime:</p>

<pre><code>bytes read_block(uint32_t offset,
                 uint32_t length,
                 const string&amp; filename) {
  ifstream is(filename, ios::binary);
  is.seekg(offset);
  bytes data;
  data.resize(length);
  is.read(reinterpret_cast&lt;char*&gt;(data.data()), length);
  return data;
}
</code></pre>
    </div>