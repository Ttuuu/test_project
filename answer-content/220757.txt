<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could allow for some more flexibility in type conversions by using type converters.</p>

<pre><code>    public static T Get&lt;T&gt;(this IDictionary&lt;string, object&gt; dictionary, TypedKey&lt;T&gt; key)
    {
        return (T)Convert.ChangeType(dictionary[key.Name], typeof(T));
    }
</code></pre>

<blockquote>
<pre><code>static class DictionaryExtensions
{
    public static T Get&lt;T&gt;(this IDictionary&lt;string, object&gt; dictionary, TypedKey&lt;T&gt; key)
    {
        return (T)dictionary[key.Name];
    }

    public static void Set&lt;T&gt;(this IDictionary&lt;string, object&gt; dictionary, TypedKey&lt;T&gt; key, T value)
    {
        dictionary[key.Name] = value;
    }
}
</code></pre>
</blockquote>

<hr>

<p>Edit (after remark OP)</p>

<p>The following operations make more sense. They can be overloads next to the existing original <code>Get</code>.</p>

<pre><code>public static V Get&lt;T, V&gt;(this IDictionary&lt;string, object&gt; dictionary, TypedKey&lt;T&gt; key)
{
    return (V)Convert.ChangeType(dictionary[key.Name], typeof(T));
}

public static T Get&lt;T&gt;(this IDictionary&lt;string, object&gt; dictionary, string key)
{
    return (T)Convert.ChangeType(dictionary[key], typeof(T));
}
</code></pre>
    </div>