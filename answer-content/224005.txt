<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Subclassing</h2>

<p>What's the point of this code?  Since <code>__CLASS__</code> always refers to the class in which the code appears, rather than the class of the current object, this method doesn't work with subclassing.  That is, with the following code, <code>(new SubModel())-&gt;getModelName()</code> would produce <code>base_model</code>, not <code>sub_model</code>:</p>

<pre><code>class BaseModel {
    public function getModelName() {
        return substr(strtolower(substr(strrchr(preg_replace('/(?&lt;!\ )[A-Z]/', '_$0', get_class($this)), "\\"), 1)), 1);
    }
}

class SubModel extends BaseModel {
}
</code></pre>

<p>If that's the case, why not just hard-code the result of <code>getModelName()</code> rather than using reflection?</p>

<p>Alternatively, if you want to make the code work with subclassing, use <code>get_class($this)</code> instead of <code>__CLASS__</code>.</p>

<h2>Deciphering</h2>

<p>That one-liner is hard to read because it does too many things.  One problem is that it's hard to see which argument goes with which function call.  Maybe indentation could help?</p>

<pre><code>public function getModelName()
{
    return substr(
        strtolower(
            substr(
                strrchr(
                    preg_replace('/(?&lt;!\ )[A-Z]/', '_$0', __CLASS__),
                    "\\"
                ),
                1
            )
        ),
    1);
}
</code></pre>

<p>But even that is ridiculously hard to read, because there are no hints as to what each part of the code does.  I don't know why there is a negative look-behind assertion in the regex.  The outermost <code>substr(…, 1)</code> should be avoidable if the <code>preg_replace(…)</code> call were smarter.  Maybe comments could help make it more decipherable?</p>

<h2>Suggested solution</h2>

<p>I suggest writing it as three statements:</p>

<ol>
<li>Get the name of the class, and discard the namespace (if any — your code doesn't handle un-namespaced classes).</li>
<li>Find all the CamelCase components within the name.</li>
<li>Join them with <code>_</code> and make the result lowercase.</li>
</ol>



<pre><code>public function getModelName() {
    $unqual_class = end(explode('\\', get_class($this)));
    preg_match_all('/.[^A-Z]*/', $unqual_class, $matches);
    return strtolower(implode('_', $matches[0]));
}
</code></pre>
    </div>