<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Ludisposed's great suggestions, I'd recommend another kind of approach in the flow of code. </p>

<p>Right now, your call stack becomes <code>main()-&gt;print_pilots_and_ships()-&gt;print_page()-&gt;print_pilots_on()-&gt;get_pilot_name()</code>, all of them called within each other. This means that you can only ever get the final result and even that's printing.</p>

<p>It makes code like this difficult to test, maintain and reuse.</p>

<p>Instead, you could first separate functions that <code>print</code> from functions that <code>return</code>.</p>

<pre><code>import requests
import json
import urllib.parse

PASSENGER_THRESHOLD = 20

def fetch_pilot(pilot_url):
    return requests.get(pilot_url).json()

def fetch_ships():
    endpoint = 'https://swapi.co/api/starships/?'

    ships = []
    for page_num in range(1, 10):
        params = urllib.parse.urlencode({'format': 'json', 'page': page_num})
        response = requests.get(endpoint + params).json()
        if 'results' in response:
            ships += response['results']

    return ships

def has_pilot(ship):
    return 'pilots' in ship

def has_enough_capacity(ship, threshold):
    return ship['passengers'] != 'unknown' and int(ship['passengers']) &gt;= threshold

def is_eligible(ship):
    return has_pilot(ship) and has_enough_capacity(ship, PASSENGER_THRESHOLD)

for pilot_url in ship['pilots']:
        pilot = fetch_pilot(pilot_url)
        print(pilot, ship['name'])

if __name__ == '__main__':
    ships = fetch_ships()
    eligible_ships = [ship for ship in ships if is_eligible(ship)]

    for ship in eligible_ships:
        print_pilots(ship)
</code></pre>

<p>Here I have done a couple of things: I've called all functions that do API calls <code>fetch_</code> to indicate that they do some heavier operations. I've followed Ludisposed's examples and made our <code>is_</code> and <code>has_</code> functions neater.</p>

<p>I did a minor change here as I save all the ships in a list and then iterate over that list when filtering. Since the amount of ships here is small, I felt comfortable doing that but if the data is big, it's gonna blow up so you can keep the filtering inside the fetch method as well.</p>

<p>Also in <code>fetch_pilot</code>, we fetch the entire model and then extract what we need when we need it. Now it's more reusable whenever in our code we want to retrieve pilot information.</p>

<p>I also renamed <code>has_enough_passenger</code> to <code>has_enough_capacity</code> since we're looking for the passenger capacity, not the amount of passengers.</p>

<p>Last, I refactored <code>PASSENGER_THRESHOLD</code> into a constant just to show that it's an option. Of course, in many scripts like these, it comes as a user input, in which case it's not really meaningful extraction.</p>
    </div>