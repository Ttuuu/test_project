<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use built-ins</h1>
<pre><code>alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
</code></pre>
<p>This is a very verbose and error-prone way of getting all of the ASCII lowercase letters.</p>
<pre><code>from string import ascii_lowercase as alpha
</code></pre>
<p>will give approximately the same result.  It is a string, instead of a list, but Python strings are effectively just lists of characters.  In particular, <code>alpha[0]</code> will be <code>'a'</code> and <code>alpha[25]</code> will be <code>'z'</code>.</p>
<h1>Unnecessary <code>str()</code></h1>
<p>The result of a <code>''.join(...)</code> call will be a string.  Wrapping this in a <code>str(...)</code> call is pointless.</p>
<h1>Unnecessary <code>abs()</code></h1>
<p><code>for j in range(0, n-1)</code> means that <code>j</code> will always be less than <code>n-1</code>.  In other words:</p>
<p><span class="math-container">$$ j \le n - 2 $$</span></p>
<p>Consider, <code>abs(n-(j+2))</code>:
<span class="math-container">$$ j \le n - 2$$</span>
<span class="math-container">$$ j + 2 \le n$$</span>
<span class="math-container">$$ n - (j+2) \ge 0$$</span>
In other words, the <code>abs(...)</code> is unnecessary, and just adds confusion.</p>
<h1>General Comments</h1>
<p>Follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP-8 guidelines</a> (spaces around operators, etc).  Use functions.  Use a main-guard.</p>
<h1>Reworked &amp; Simplified Code</h1>
<pre><code>from string import ascii_lowercase

def print_rangoli(n: int) -&gt; None:

    alpha = ascii_lowercase[:n]

    for row in range(- n + 1, n):
        row = abs(row)
        dashes = "-" * (2 * row)
        print(dashes + "-".join(alpha[:row:-1] + alpha[row:]) + dashes)

if __name__ == '__main__':
    n = int(input("Enter a size: "))
    print_rangoli(n)
    
</code></pre>
<h1>Format Specification Mini-Language</h1>
<p>Python's format statement (and <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="noreferrer">f-strings</a>) use a <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="noreferrer">format specification mini-language</a>.  This allow you substitute values into a larger string in fixed-width fields, with your choice of alignment and fill characters.  Here, you'd want centre alignment, with <code>'-'</code> for the fill character.</p>
<p>For example, <code>f"{'Hello':-^11}"</code> is a f-string, which places the string <code>'Hello'</code> into a field <code>11</code> characters wide, centre justified (<code>^</code>), with <code>'-'</code> used as a fill character.  Producing <code>'---Hello---'</code>.  Instead of a hard-coded width (<code>11</code> in the above example), we can use a computed <code>{width}</code> argument.</p>
<p>Using this, we can further "simplify" (for some definition of simplify) the <code>print_rangoli</code> function:</p>
<pre><code>def print_rangoli(n: int) -&gt; None:

    width = n * 4 - 3
    alpha = ascii_lowercase[:n]

    for row in range(- n + 1, n):
        row = abs(row)
        print(f"{'-'.join(alpha[:row:-1] + alpha[row:]):-^{width}}")
</code></pre>
    </div>