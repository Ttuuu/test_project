<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are three magic numbers in here:</p>
<blockquote>
<pre><code>AES.KeySize = 256;
//AES.BlockSize = 128;

var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 100);
AES.Key = key.GetBytes(AES.KeySize / 8);
</code></pre>
</blockquote>
<p>Also, that comment should go. Dead code is dead.</p>
<hr>
<p>As stated in the comments:</p>
<blockquote>
<pre><code>byte[] saltBytes = SHA512.Create().ComputeHash(passwordBytes);
</code></pre>
</blockquote>
<p>Generating the <code>saltBytes</code> <em>based</em> on the password is a bad idea. The salt should be random and if two users with the exact same password have the same salt, well now either of them can attack the other.</p>
<p>The salt does <strong>not</strong> need to be a secret. You can keep it in plain-text. Many time, in the case of a database, it will have two (or three) columns: <code>EncryptedPassword</code> and <code>Salt</code> (maybe <code>IV</code> if it's not based on the <code>Salt</code>). (Or in the case of ASP.NET Entity Framework / Simple Membership this is all stored in one column with separators.)</p>
<p>The attacker can know the <code>Salt</code> and <code>IV</code>, you can even use the <code>Salt</code> to generate the <code>IV</code> (or initialize the RNG for it), but you <strong>cannot</strong> use the password to generate either. That defeats the purpose of the password. If I know <code>Salt</code> is generated from the password, then I don't need the password at all, I can just brute force everything to find that <code>Salt</code>, or I can use a rainbow table lookup, et. al.</p>
    </div>