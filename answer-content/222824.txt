<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Usability / Testability</h1>

<p>The problem of this class is it has a dependency on <code>SerialPort</code>. This is very hard to test. You'd either need a serial port or a USB-2-Serial-Converter. Also note that these converters react differently on connection issues than a serial port. </p>

<p>The solution is to create an interface <code>IStreamResource</code> that provides all the methods you need.</p>

<pre><code>public interface IStreamResource : IDisposable
{
   void Open();
   void DiscardInBuffer();
   string ReadLine();
   void Write(string buffer);
   // ..
}
</code></pre>

<p>You can create an adapter/bridge for <code>SerialPort</code>.</p>

<pre><code>public class SerialPortAdapter : IStreamResource
{
    public SerialPort Source { get; }
    public SerialPortAdapter(SerialPort source) =&gt; SerialPort = source; // check not null..

    // IStreamResource impl ..
}
</code></pre>

<p>Havig done this, you could also make adapters for <code>TcpClient</code>, <code>UdpClient</code>, <code>UnitTestAdapter</code>, or any other stream resource.</p>

<p>You could then change your class to use the interface.</p>

<pre><code>public SerialPortConn(IStreamResource streamResource)
{
   StreamResource = streamResource; // check not null ..
}
</code></pre>

<p>You could allow for overloads for common stream resources.</p>

<pre><code>public SerialPortConn(SerialPort serialPort)
    : this (new SerialPortAdapter(serialPort)
{
}
</code></pre>
    </div>