<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately, using binary search both for rows and columns is not possible here. It fails if the last element of the first row is too small, i.e. for this input:</p>

<pre><code>matrix = [[ 0,  1,  2,  3,  4,  5],
          [ 6,  7,  8,  9, 10, 11],
          [12, 13, 14, 15, 16, 17],
          [18, 19, 20, 21, 22, 23],
          [24, 25, 26, 27, 28, 29]]
target = 10
</code></pre>

<p>However, you could use binary search within each row for <span class="math-container">\$\mathcal{O}(n\log m)\$</span> runtime, compared to your <span class="math-container">\$\mathcal{O}(n + m)\$</span> runtime, as you noted in the question. While this is nominally worse, for the actual testcases being tested by Leetcode it performs better.</p>

<pre><code>from bisect import bisect_left

class Solution:
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if not matrix or not matrix[0]:
            return False
        for row in matrix:
            i = bisect_left(row, target)
            if i &lt; len(row) and row[i] == target:
                return True
        return False
</code></pre>

<p>Your code: 36ms, faster than 85.35%</p>

<p>Binary search: 28 ms, faster than 98.39%</p>

<p>This is probably due to the testcases being small enough (and  if <span class="math-container">\$m = n\$</span>, <span class="math-container">\$2n &gt; n\log_b n\$</span> for <span class="math-container">\$n &lt; b^2\$</span>).</p>
    </div>