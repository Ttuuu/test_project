<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answer focuses on the text box functionality.</p>

<h1>Review</h1>

<blockquote>
<pre><code>std::string footer;
bool hasFooter;
</code></pre>
</blockquote>

<p>Use <a href="https://en.cppreference.com/w/cpp/utility/optional" rel="nofollow noreferrer"><code>std::optional</code></a> instead:</p>

<pre><code>std::optional&lt;std::string&gt; footer;
</code></pre>

<blockquote>
<pre><code>void printLine (std::string text)
{
    std::cout &lt;&lt; text + '\n';
    return;
}
</code></pre>
</blockquote>

<p>Consider using <code>std::string_view</code> and stream the <code>\n</code> separately to avoid allocations.  The <code>return</code> can also be elided in <code>void</code> functions:</p>

<pre><code>void print_line(std::string_view text)
{
    std::cout &lt;&lt; text &lt;&lt; '\n';
}
</code></pre>

<p>In fact, I don't think you need this function at all.</p>

<blockquote>
<pre><code>void makeBanner ()
{

    std::string newBanner;

    newBanner = "**";

    int lineLength = getLineLength();

    for (int i = 0; i &lt; lineLength; i++)
    {
        newBanner = newBanner + "*";
    }

    banner = newBanner;

    return;
}
</code></pre>
</blockquote>

<p>This function is too complex.  Use the <code>(count, character)</code> constructor of <code>std::string</code>.  Use <code>std::size_t</code> for line lengths.  It is also more readable to make it a free function and return the string instead of modifying in place:</p>

<pre><code>std::string make_banner(std::size_t line_length)
{
    return std::string(line_length + 2, '*');
}
</code></pre>

<blockquote>
<pre><code>int getLineLength ()
{
    int longestString = title.size();

    for (int i = 0; i &lt; lines.size(); i++)
    {
        if (lines[i].size() &gt; longestString)
        {
            longestString = lines[i].size();
        }
    }

    if (hasFooter &amp;&amp; (longestString &lt; footer.size()))
    {
        longestString = footer.size();
    }

    return longestString;
}
</code></pre>
</blockquote>

<p>Add <code>const</code> to the function.  You can use <a href="https://en.cppreference.com/w/cpp/algorithm/max_element" rel="nofollow noreferrer"><code>std::max_element</code></a> here:</p>

<pre><code>std::size_t max_length() const
{
    auto result = title.size();
    if (!lines.empty()) {
        auto it = std::max_element(lines.begin(), lines.end(),
                                   [](const auto&amp; lhs, const auto&amp; rhs) {
                                       return lhs.size() &lt; rhs.size();
                                   });
        result = std::max(result, it-&gt;size());
    }
    if (footer) {
        result = std::max(result, footer-&gt;size());
    }
}
</code></pre>

<blockquote>
<pre><code>std::vector&lt;std::string&gt; getLines ()
{
    return lines;
}
</code></pre>
</blockquote>

<p>Use <code>const &amp;</code> to prevent copying:</p>

<pre><code>const auto&amp; get_lines() const
{
    return lines;
}
</code></pre>

<h1>Redesign</h1>

<p>Here is my version of the text box functionality:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

namespace detail {
    template &lt;typename RanIt&gt;
    std::size_t max_length(RanIt first, RanIt last)
    {
        auto it = std::max_element(
            first, last,
            [](std::string_view lhs, std::string_view rhs) {
                return lhs.size() &lt; rhs.size();
            }
        );
        return it == last ? 0 : it-&gt;size();
    }
}

class TextBox {
public:
    template &lt;typename RanIt&gt;
    explicit TextBox(RanIt first, RanIt last)
    {
        lines.reserve(last - first + 2);

        auto length = detail::max_length(first, last);

        lines.emplace_back(length + 2, '*');
        std::transform(
            first, last,
            std::back_inserter(lines),
            [&amp;](std::string_view sv) {
                auto padding = length - sv.size();
                return '*' + std::string(sv) + std::string(padding, ' ') + '*';
            }
        );
        lines.emplace_back(length + 2, '*');
    }

    const auto&amp; rendered_lines() const
    {
        return lines;
    }
private:
    std::vector&lt;std::string&gt; lines;
};
</code></pre>

<p>(<a href="https://wandbox.org/permlink/tflCxnflQ6k4Y1V0" rel="nofollow noreferrer">live demo</a>)</p>

<p>Some notes:</p>

<ul>
<li><p>I opted for an immutable design.  The text box is built once, and the lines aren't modified.  This makes code easier to reason about.</p></li>
<li><p>No reuse of variables (as you do with <code>lines</code> in your version).</p></li>
<li><p>Instead of storing the original content, I rendered once and stored the result only.</p></li>
<li><p>More simplistic â€” features such as titles, footers, etc. are omitted.</p></li>
</ul>
    </div>