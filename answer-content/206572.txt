<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a general sentiment, I can't spot any glaring issues with the code just the one section and a few minor things (you did say you basically copied it; I'd imagine the Material UI team have some idea what they're doing)</p>

<hr>

<blockquote>
<pre><code>{children.map((child, i) =&gt; {
  return React.cloneElement(child, {
    ...child.props,
    ...{
      onClick: this.generateOnClick(child.props.onClick),
      key: `${menuId}${i}`
    }
  });
})}
</code></pre>
</blockquote>

<p><code>children</code> cannot always be defined as an array, if you pass a single list item it will be given as a single element which will not have <code>map</code> as a property. You should be using <code>React.Children.map</code> instead.</p>

<p>Slipping in a small code style comment here, doing <code>=&gt; {</code> just to <code>return</code> something moments later seems like wasted code.</p>

<blockquote>
<pre><code>{children.map((child, i) =&gt; {
  return React.cloneElement(child, {
</code></pre>
</blockquote>

<p>When using <code>React.cloneElement</code>, you don't need to manually specify the child props as that's the implication of cloning.</p>

<blockquote>
<pre><code>return React.cloneElement(child, {
  ...child.props,
</code></pre>
</blockquote>

<p>Creating a separate object inside another object just to spread is redundant.</p>

<blockquote>
<pre><code>...{
  onClick: this.generateOnClick(child.props.onClick),
  key: `${menuId}${i}`
}
</code></pre>
</blockquote>

<p>To finish things off here, using the index of the child as part of the key is an anti-pattern. Any time that someone wants to change the children, or reorder the list, React will assume it has already memoized the render during the previous reconcile and give you the wrong render.</p>

<p>There's a number of resources and in-depth explanations if you Google something along the lines of <code>React index as key</code>. Generally when building reusable components, I leave the key generating relative to each implementation, but, that's your decision, however, I would say that some developers want to use their own keys and manually overriding them is blocking that.</p>

<blockquote>
<pre><code>key: `${menuId}${i}`
</code></pre>
</blockquote>

<p>A better implementation would be:</p>

<pre><code>{React.Children.map(children, child =&gt; 
  React.cloneElement(child, {
    onClick: this.generateOnClick(child.props.onClick)
  })
)}
</code></pre>

<p>Even so, you're cloning <em>all</em> of your children inside each render of the component, with all the information used in that process being loaded in during the initialisation phase.</p>

<p>Everytime you act on the menu, you're performing the same element cloning on all your children again. If I had complex children or even a large amount, this could easily slow the render process.</p>

<hr>

<p>A few minor points:</p>

<ul>
<li><code>buttonChildren</code> would better be named <code>label</code> or <code>menuLabel</code></li>
<li>Using <code>propTypes</code> is very beneficial, especially if you're trying to create a reusable component/library, not only to the developer in charge of implementation to know what to expect but you (or whoever) in charge of fixing potential bugs in the library.</li>
<li><p>Usually the <code>Popper</code> component allows you to open and close a menu by clicking it... for whatever reason, you can't close the component by clicking it.</p></li>
<li><p>Stick with consistent bracketing around your <code>if/else</code></p>

<blockquote>
<pre><code>if (fn)
  return () =&gt; {
    fn();
    this.handleMenuClose();
  };
else {
 return this.handleMenuClose;
}
</code></pre>
</blockquote></li>
</ul>
    </div>