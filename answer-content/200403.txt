<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You already have a good review of your code's style, so I'll discuss the <em>performance</em> here.</p>
<p>Currently, we find all the partitions of <em>N</em>, and count the perfect squares in each.  What we could do instead is to start with two perfect squares, and count how many ways we can partition the remainder of <em>N</em> without using either of those initial square numbers.</p>
<p>Let's start with a loop that generates two distinct square numbers whose sum is less than <code>n</code>:</p>
<pre><code>for (unsigned i = 1;  i*i &lt; n/2;  ++i) {
    for (unsigned j = i + 1;  i*i + j*j &lt; n;  ++j) {
        ...
    }
}
</code></pre>
<p>For each of these combinations, we need to count how many ways we can partition the remainder of <code>n</code> without using <code>i*i</code> or <code>j*j</code>.  Let's write a simple function to do that:</p>
<pre><code>/* return number of distinct k-partitions of n that don't contain skip1
   or skip2, and where all numbers are greater than start. */
unsigned int count_partitions(unsigned int n, unsigned int k,
                              unsigned int start,
                              unsigned int skip1, unsigned int skip2)
{
    if (k == 1) {
        /* base case - we have a single 1-partition, unless it's a
           number we've already used. */
        return n &gt; start &amp;&amp; n != skip1 &amp;&amp; n != skip2;
    }

    unsigned count = 0;
    for (unsigned i = start+1;  i * k &lt;= n;  ++i) {
        if (i == skip1 || i == skip2) continue;
        count += count_partitions(n-i, k-1, i, skip1, skip2);
    }
    return count;
}
</code></pre>
<p>Note that the limit for the loop is <code>i * k &lt;= n</code> - since we know we'll be using <code>k</code> numbers at least the size of <code>i</code>, we can finish our loop relatively early.</p>
<p>You might be able to use your mathematical knowledge to reduce the recursion depth here (it's fairly easy to count the <code>k=2</code> partitions - but remember to deal with <code>skip1</code> and <code>skip2</code> as appropriate).</p>
<hr>
<h1>Full program</h1>
<pre><code>/* return number of distinct k-partitions of n that don't contain skip1
   or skip2, and where all numbers are greater than start. */
unsigned int count_partitions(unsigned int n, unsigned int k,
                              unsigned int start,
                              unsigned int skip1, unsigned int skip2)
{
    unsigned count = 0;
    switch (k) {
    case 0:                     /* Allow for top-level k==2 */
        return n==0;
    case 1:
        /* recursion base - we have a single 1-partition, unless it's a
           number we've already used. */
        return n &gt; start &amp;&amp; n != skip1 &amp;&amp; n != skip2;
    default:
        for (unsigned i = start+1;  i * k &lt; n;  ++i) {
            if (i == skip1 || i == skip2) continue;
            count += count_partitions(n-i, k-1, i, skip1, skip2);
        }
        return count;
    }
}

/* return number of k-partitions of n containing two or more perfect
   squares. */
unsigned int count_2perfect_partitions(unsigned int n, unsigned int k)
{
    unsigned count = 0;
    for (unsigned i = 1;  i*i &lt; n/2;  ++i) {
        for (unsigned j = i + 1;  i*i + j*j &lt;= n;  ++j) {
            count += count_partitions(n - (i*i + j*j), k-2, 0, i*i, j*j);
        }
    }
    return count;
}
</code></pre>

<pre><code>#include &lt;stdio.h&gt;    
int main()
{
    unsigned int n, k;
    if (scanf("%u,%u", &amp;n, &amp;k) != 2 || k &lt; 2) {
        fprintf(stderr, "Input format error\n");
        return 1;
    }

    printf("%u\n", count_2perfect_partitions(n, k));
    return 0;
}
</code></pre>
<p>My timing results show about 1ms each for <code>12,3</code> and <code>150,30</code> (this latter trivially gives <code>0</code> as output, as triangle(30) &gt; 150), and about 930ms for a more demanding test of <code>200, 10</code> (result 107,952,450);</p>
    </div>