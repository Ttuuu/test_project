<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should have a guard clause against someone passing in null </p>

<p>PropertyInfo has a PropertyType and you should use that instead of </p>

<pre><code> Type valueType = value.GetType();
</code></pre>

<p>as if value is null you will get a null reference error where PropertyType will give you the type of the property. </p>

<p>You will need to fix this line as well if value is null.  Again you will get a null reference error</p>

<pre><code> result += value.PropertiesToString(++tabs);
</code></pre>

<p>Better to compare types then their names.  Instead of </p>

<pre><code> valueType.Name.Equals("String")
</code></pre>

<p>use </p>

<pre><code> valueType == typeof(string)
</code></pre>

<p>You should separate out gathering the properties and displaying them.  I would have an extension method that returned IEnumerable&gt; and then you could use linq to convert that into the strings and how you want it displayed.  </p>

<p>Other things to consider is if you have two object that reference each other you will get a stack overflow.  </p>

<p>I would recommend looking at <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.objectmanager?view=netframework-4.8" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.objectmanager?view=netframework-4.8</a> to see an example of an object walker.  I think making the class IEnumerable is a bit confusion when learning and they would have been better making a method that returns IEnumerable.  still a good place to start when learning about walking an object graph.  </p>
    </div>