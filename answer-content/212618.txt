<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks alright but if I may offer a different approach that is more "pythonic".</p>

<p>One way to address the problem is to think of it as how many chars are in the two words combined minus the repeating chars.
Say S = len(s1 + s2) and X = repeating_chars(s1, s2) then the result is S - X.</p>

<p>To do so I've used Counter class from python <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections</a>.</p>

<p>the Counter is used to count the appearances of a char in the two strings combined, you can build your own Counter with a simple line but it wont have the same properties as the Class obviously, here is how you write a counter:</p>

<pre><code>def counter(string):
    return {ch: string.count(ch) for ch in set(string)}
</code></pre>

<hr>

<p>Back to the problem, here is the code for that approach:</p>

<pre><code>from collections import Counter

def deletion_distance(s1, s2):
    return sum(v % 2 for v in Counter(s1 + s2).values())
</code></pre>

<p>Hope it helps!</p>

<p>Hod</p>
    </div>