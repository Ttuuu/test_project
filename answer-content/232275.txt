<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would argue your garden-variety C# developer is pretty sharp with LINQ as it is, rather than abstracted away, and also hopefully keeping up with modern C# innovations such as first-class Tuple support. Your take becomes a two-liner which I would argue is just as readable and maintainable. If you are wanting real maintainability, usability, and extensibility, first look to separating the concerns (into different classes), segregating them via interfaces or delegates as needed, then injecting those dependencies where they're required. I'm not going to go into all that -- feel free to look at those "Enterprise FizzBuzz" links on the question. However, here's the short version that I described at the beginning (yes, I am aware the output is slightly different but matches most original FizzBuzz challenges):</p>

<pre><code>public static string FizzBuzz(this int count, bool parallel = false)
{
    IEnumerable&lt;int&gt; range = Enumerable.Range(0, count);

    return string.Join(
        ", ",
        (parallel ? range.AsParallel() : range)
            .Select(key =&gt; (Key: key, Value: string.Empty))
            .Select(data =&gt; data.Key % 3 == 0 ? (data.Key, Value: "Fizz") : data)
            .Select(data =&gt; data.Key % 5 == 0 ? (data.Key, Value: data.Value + "Buzz") : data)
            .Select(data =&gt; string.IsNullOrEmpty(data.Value) ? (data.Key, Value: data.Key.ToString()) : data)
            .OrderBy(p =&gt; p.Key)
            .Select(p =&gt; p.Value));
}
</code></pre>
    </div>