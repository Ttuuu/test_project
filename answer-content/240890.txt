<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Try:</p>

<pre class="lang-py prettyprint-override"><code>from collections import defaultdict
from datetime import date, datetime
from typing import DefaultDict, Set, List, Dict


DefaultSet = DefaultDict[date, Set[str]]


def default_set() -&gt; DefaultSet:
    return defaultdict(set)


aggregated: DefaultDict[str, DefaultSet] = defaultdict(default_set)

for entry in db_data:
    start_date: date = datetime.fromisoformat(entry['start_time']).date()
    result: Dict[str, List[str]] = entry['results']
    for k, v in result.items():
        aggregated[k][start_date].update(v)

grouped_data: Dict[str, Dict[date, int]] = {
    k: {gk: len(gv) for gk, gv in group.items()}
    for k, group in aggregated.items()
}
</code></pre>

<p>Notes:</p>

<ul>
<li>I do not know if this is faster, but it's certainly simpler</li>
<li>If you're able, maintain the output with actual <code>date</code> keys</li>
<li>Your data are better-modeled by a <code>defaultdict</code> of <code>defaultdict</code>s of <code>set</code>s.</li>
<li>I used a bunch of type hints to make sure that I'm doing the right thing.</li>
</ul>
    </div>