<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me first say that I admire the thought you've put into class and function names. For example, <code>Create.TheirDecks()</code> has a sort of fluent feel to it, which I appreciate. "Your code should read like a sentence" is advice I often give, but it seems you've already taken that to heart.</p>

<p>This isn't a complete answer (yet), but here are my notes on just the Deck class.</p>

<ol>
<li><p>There is a <a href="http://blog.ploeh.dk/2011/05/24/DesignSmellTemporalCoupling/" rel="noreferrer">temporal coupling</a> for users of the Deck class. If I instantiate a <code>new Deck()</code>, and then <code>Shuffle()</code> it, I will get a null reference exception because I failed to call <code>GenerateDeck()</code> in between. Is there ever value in having a new deck with no cards? I would say no, new decks should always have cards. That would mean the code to add cards belongs in (or should be called from) the constructor.</p></li>
<li><p>The code to fill the deck with cards uses two <code>for</code> loops. I am against use the use of <code>for</code>, for anything but generating a sequence of numbers. I would highly recommend using <code>foreach</code> to iterate through your Suits and Faces; you can do this with <a href="https://docs.microsoft.com/en-us/dotnet/api/system.enum.getvalues?view=netframework-4.7.2" rel="noreferrer"><code>Enum.GetValues</code></a>.</p></li>
<li><p>The <code>Cards</code> in the deck are exposed as a public list. This means that when I want to draw from the deck, I have to manage the list myself. This is an excellent opportunity to practice <a href="https://blogs.msdn.microsoft.com/alfredth/2011/07/26/encapsulationan-introduction/" rel="noreferrer">encapsulation</a>. You can make things simpler for users of the class, and at the same time make it easier for yourself to refactor in the future, by providing a <code>public Card Draw()</code> method and making <code>CurrentlyInDeck</code> private. Then, if you later decide that you want to make <code>CurrentlyInDeck</code> a Stack, or a Queue? You can make that change without touching any code outside of the class (and be sure you haven't broken code anywhere else either).</p></li>
<li><p>The <code>Shuffle</code> method is pretty good! This is one of those rare cases where I agree that a <code>for</code> loop is the right choice. If you want to implement a proper <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="noreferrer">Fisher-Yates shuffle</a>, I believe you'll only need to change to <code>rand.Next(i, 51)</code>. The other change I might make here is to add a <code>private void SwapCards(int i, int j)</code> method, so that the outline of the algorithm is as readable as possible.</p></li>
<li><p>The <code>PrintDeck</code> method is a bit odd.</p>

<ol>
<li>It's a method of the <code>Deck</code> class, and it's also got <code>Deck</code> in the name. If nothing else, I'd rename this to just <code>Print</code>.</li>
<li>It prints (because of the behavior of <code>Card</code>) directly to Console. Say I want to print to a file, or log to a database? I think you'd be better off returning a string representation the deck, so that I can do what I want with it. In fact, the best way to do that would probably be to override <code>ToString()</code></li>
<li>If it's code used only for testing, now that your class is developed, you might as well <a href="https://stackoverflow.com/questions/15699995/why-unused-code-should-be-deleted">just delete it</a>.</li>
</ol></li>
<li><p>This is a very minor point, but I would much rather see <code>i += 1</code> than <code>i++</code>. The fact that the <code>++</code> hieroglyph adds one to the variable it comes after (or sometimes before!) is <em>not</em> obvious or explicit, and typing 6 characters instead of 3 will certainly not harm any developer. The fact that <code>++</code> even exists in C# is a <a href="http://www.informit.com/articles/article.aspx?p=2425867" rel="noreferrer">major regret</a> (#3) of one of the language's designers.</p></li>
</ol>

<p>I know that's a lot of notes, but I want to emphasize that this is pretty good code for a beginner! I will check back in with some more notes when I get some more time.</p>
    </div>