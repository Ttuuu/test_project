<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me offer the following rewrite of your program and then let's walk through it:</p>

<pre><code>names = {'Addition' : '+',
         'Subtraction' : '-',
         'Division' : '/',
         'Exponentation': '**',
         'Radicalization': '**(1/'
        }

print("Operations that you can use:")
for op in names:
    print(op, names[op])

ops = {
       '+' : (lambda x, y: x + y),
       '-' : (lambda x, y: x - y),
       '*' : (lambda x, y: x * y),
       '/' : (lambda x, y: x / y),
       '**' : (lambda x, y: x ** y),
       '**(1/' : (lambda x, y: x ** 1.0 / y),
       'na' : (lambda x, y: 'Unknown binary operator')
      }

ce = 0
while ce != 1:
    x = float(input("First Value: "))
    y = input("Operation: ")
    z = float(input("Second Value: "))

    op = ops.get(y, 'na')
    print(ops[op](x, z))

    print("Continue or Exit?")
    ce = int(input("    0    or   1  : "))
</code></pre>

<ul>
<li><p>It seems unnecessary to define <code>x</code>, <code>y</code> and <code>z</code> to be <code>None</code> so we just define them inside the main loop.</p></li>
<li><p>The <code>ops</code> dictionary stores a symbol of the operator and the actual implementation in a lambda function. It also stores a special <code>'na'</code> value to represent any unknown operator; this is useful in the main loop where we return that key if we don't find what the user gave us as input.</p></li>
<li><p>The key difference and main idea here is a <em>data-driven solution</em>. That is, notice how we've put the supported operators into data structures. This way it's easier to make changes and to maintain the program, e.g., when you add a new binary operator, you don't have to touch the logic of your calculator, just add a new element into your data structure.</p></li>
<li><p>There's no explicit if-elif chain anymore, yay! Such chains are often annoying to write and it's always a potential code smell. No matter how experienced you are, it's one of those things where it's easy to make a human error and write something you didn't mean to, but it can be tough to discover the bug.</p></li>
</ul>
    </div>