<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The largest code quality issue in this code is the lack of understandability in the names used.<br>
It's also a bit unobvious at first glance that you're representing the operations as a stack-machine, as well as the way you're using the <code>ss</code>.</p>

<p>These two are what made me sit in front of your code for a while, somewhat dumbfounded.<br>
The first issue is resolvable by looking at the names and chosing better ones. </p>

<p>Things like <code>rpnCalc</code> could be <code>evaluateReversePolishNotation</code> (with <code>rpn</code> being renamed to <code>step</code> or <code>go</code> or maybe even <code>apply</code>). <code>ms</code> and <code>mo</code> should contain the word <code>multiply</code>, because that's the operation you are performing there, <code>as</code> and <code>ao</code> should contain <code>add</code> <code>ss</code> and <code>so</code> should contain <code>sub</code> (or even <code>subtract</code>)</p>

<p>Other naming suggestions include changing <code>best</code> to <code>argmax</code>, <code>deleteAll</code> to <code>setminus</code></p>

<hr>

<p>The second issue is easier to resolve by using comments.
Even after reading the code multiple times, I first thought there was a bug in <code>sacredGeo</code>, where <code>so</code> is calculated with <code>Add</code> instead of <code>Sub</code>.<br>
The issue here is that the subtraction itself is hidden within  <code>joiner</code> and the order of elements in <code>rto</code>. This makes it hard for humans to grasp the code at first glance.</p>

<p>While RPN is something that computers are really good at, puny humans like me (and possibly you) tend to have trouble following the steps in such a machine. 
It's very non-obvious how you're evaluating the expression (and  <code>rpnCalc</code> seems to only be used as context).</p>

<hr>

<p>As it stands your code only supports "sequential operations". This has benefits and drawbacks, the benefit being the easier implementation of a searching algorithm, the drawback being that you can't make use of "complex operands".</p>

<p>What I mean by that is the following:</p>

<p>The code you have here generates expressions that have a low level of nesting. Basically it creates expressions of the form:
<span class="math-container">\$(m_1 \cdot \ldots \cdot m_j) + (a_1 + \ldots + a_k) - (s_1 + \ldots + s_l) + (0 * \ldots)\$</span></p>

<p>This incorrectly limits the number of values you can generate (especially with a low number of thrown dice.</p>

<p>I'd recommend trying to find a way to search for an expression tree using a datatype like:</p>

<pre class="lang-hs prettyprint-override"><code>data Expr = 
  Add Expr Expr | 
  Sub Expr Expr | 
  Mul Expr Expr | 
  Div Expr Expr | 
  Value Int 
deriving (Show)
</code></pre>

<p>Note that this will make the search algorithm somewhat harder, but it simplifies following the logic of the generated expression :)</p>
    </div>