<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While this answer is a long time after the question was asked, it seems like a solid question, so I'll give answering it a shot.</p>
<h2>Small things</h2>
<p>I'll start off with a few small points that aren't all that important, but are nice to get fixed.</p>
<ul>
<li>Change <code>cls</code> to <code>cls_</code> (for example <code>data = cls(**item)</code>). <code>cls</code> is usually used to indicate the class passed into a <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer">classmethod</a>. A trailing underscore basically states "I know this name is taken, but it is still the best name possible."</li>
<li><code>def process_item(self, item, cls, object_link, spider)</code> doesn't use the last parameter <code>spider</code>.</li>
<li>unnecessary <code>pass</code> in the exception handling.</li>
<li>The <code>.keys()</code> in <code>for advert in adverts_dict.keys():</code> is not needed, as you don't mutate the dictionary while iterating over it. <code>for advert in adverts_dict:</code> should be enough.</li>
<li>(If you can) <code>id</code> is also taken, change it to <code>id_</code> (<code>id = Column(Integer, nullable=False, primary_key=True)</code>).</li>
</ul>
<hr>
<pre><code>if 'delete' in adv:
    session.delete(adv['delete'])

if 'archive' in adv:
    session.add(adv['archive'])

if 'new' in adv:
    session.add(adv['new'])
session.commit()

if 'delete' in adv:
    logger.info("[%s][DELETE] ID: %s, price: %s" % (
        adv['delete'].__class__,
        adv['delete'].id,
        adv['delete'].price)
                )
if 'archive' in adv:
    logger.info("[%s][ARCHIVE] ID: %s, price: %s" % (
        adv['archive'].__class__,
        adv['archive'].id,
        adv['archive'].price)
                )
if 'new' in adv:
    logger.info("[%s][NEW] ID: %s, price: %s" % (
        adv['new'].__class__,
        adv['new'].id,
        adv['new'].price)
                )
</code></pre>
<p>Since the only thing that really changes between each block is the string, you can parameterise it. I've left the delete separate to highlight that it is different. You could change the list to a dictionary of {action_name: action_func} and gettattr if you want to combine all of them.</p>
<pre><code>if 'delete' in adv:
    session.delete(adv['delete'])

for action in ('archive', 'new'):
    if action in adv:
        session.add(adv[action])

session.commit()

for action in ('delete', 'archive', 'new'):
    if action in adv:
        logger.info("[%s][%s] ID: %s, price: %s" % (
            adv[action].__class__,
            action.upper(),
            adv[action].id,
            adv[action].price)
</code></pre>
<hr>
<pre><code>for advert in adverts_dict.keys():
    
    if advert not in old_adverts_dict:
        # Absolutely new advert or inactive advert becomes active with changed price or m2 in advert
        self.actual_adverts.append({'new': adverts_dict[advert]})
    
    if advert in old_stat_adverts_dict:
        # Remove duplicate advert from current adverts and archived adverts
        if advert in old_adverts_dict:
            if old_adverts_dict[advert].price == old_stat_adverts_dict[advert].price:
                self.actual_adverts.append({'delete': old_stat_adverts_dict[advert]})
        else:
            # Remove duplicate advert from income adverts and archived adverts
            if adverts_dict[advert].price == old_stat_adverts_dict[advert].price:
                self.actual_adverts.append({'delete': old_stat_adverts_dict[advert]})
</code></pre>
<p>I don't really see a way to simplify this. You might get some better readability with more clearly distinct names. Another trick I've seen is to have the comments tell the story of the advert as it goes.</p>
<pre><code>for advert in adverts_dict:
    # If an advert is new (to us)
    if advert not in old_adverts_dict:
        # Add it to the new pile.
        self.actual_adverts.append({'new': adverts_dict[advert]})

    # Otherwise we need to may need to mark it off
    if advert in old_stat_adverts_dict:
        old_advert = old_stat_adverts_dict[advert]
        # if we've had an advert with the same name before
        if advert in old_adverts_dict:
            # and the same pirce
            if old_advert.price == old_adverts_dict[advert].price:
                self.actual_adverts.append({'delete': old_advert})
        else:
            # or it is the pile of current adverts, (again de-duplicating by price).
            if old_advert.price == adverts_dict[advert].price:
                self.actual_adverts.append({'delete': old_advert})
</code></pre>
<hr>
<pre><code># I have no idea how I can move particular attributes` values from one class object to different one
stat_advert = statistics_cls()
stat_advert.copy_properties(old_adverts_dict[advert])
</code></pre>
<p>This honestly looks fine to me. If you want to make it part of statistics_cls, and you can add to statistics_cls, you could <a href="https://code-maven.com/slides/python/class-methods-alternative-constructor" rel="nofollow noreferrer">implement a classmethod</a> that takes the old advert, and constructs the object from the values. The built-in dict has a great example of this API, <a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer">from_keys</a>.</p>
<hr>
<pre><code>stat_advert.status = ADVERT_STATUSES[ADVERT_SOLD]
</code></pre>
<p>This looks like a good candidate for an enum (assuming you either have &gt;= Python 3.4 or access to a library that does this. Alternatively, could you just use the global constant you have directly?</p>
<pre><code>stat_advert.status = ADVERT_SOLD
</code></pre>
<hr>
<p>I can't really see into the classes and how they are used, so I don't really have much I can add here. It does look like you have an open/close pattern, which may be nicer as a context manager, especially if you need to guarantee the close method is executed.</p>
    </div>