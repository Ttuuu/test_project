<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>JavaScript</h2>

<p>This code violates the <a href="https://deviq.com/don-t-repeat-yourself/" rel="nofollow noreferrer"><em><strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself</em> principle</a> because there is some redundancy in the code to handle the hover events, but for a beginner it might be challenging to know how to abstract the common code. </p>

<p>One way to reduce the redundancy is to define a mapping of id values to classes to toggle. This can be done with a plain-old JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" rel="nofollow noreferrer">Object</a>, like below, or with a <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map()</a> object. </p>

<pre><code>const targetClassMapping = {
  'menulink2': 'movedown1',
  'menulink3': 'movedown2'
};
</code></pre>

<p>Then the code can utilize <a href="http://api.jquery.com/hover/#hover2" rel="nofollow noreferrer"><code>.hover()</code></a> on any element with the class name <code>menulink</code> with a single event handler that checks the <code>id</code> attribute (using the jQuery <a href="https://api.jquery.com/attr" rel="nofollow noreferrer"><code>.attr()</code></a> method) of the event target and if the <code>id</code> matches a key in that mapping it then calls <a href="http://api.jquery.com/toggleClass" rel="nofollow noreferrer"><code>.toggleClass()</code></a> on the slider element. Additionally, <code>$('slider')</code> can be stored in a variable and used when needed instead of querying the DOM each time.</p>

<pre><code>const slide = $('#slide');
$('.menulink').hover(function(){
  const id = $(this).attr('id');
  if (id &amp;&amp; id in targetClassMapping) {
    slide.toggleClass(targetClassMapping[id]);
  }
});
</code></pre>

<p>This could also be done without jQuery, though the code wouldn't be quite as succinct.</p>

<pre><code>const slider = document.getElementById('slide');
const targetClassMapping = {
  'menulink2': 'movedown1',
  'menulink3': 'movedown2'
};
['mouseover', 'mouseout'].forEach(type =&gt; document.addEventListener(type, handleMouseEventOnMenuLink));
function handleMouseEventOnMenuLink(event) {
  if (event.target.parentNode) {
    const id = event.target.parentNode.id;
    if (id in targetClassMapping) {
      const method = event.type === 'mouseover' ? 'add' : 'remove';
      slider.classList[method](targetClassMapping[id]);
    }
  }
} 
</code></pre>

<h2>CSS / SASS</h2>

<p>I see a couple lines with <code>!important</code>. </p>

<blockquote>
<pre><code>.movedown1
  margin-top: 40px
  background-color: blue !important

.movedown2
  margin-top: 80px
  background-color: green !important
</code></pre>
</blockquote>

<p>It is wise to not depend on <code>!important</code> if possible, <a href="https://stackoverflow.com/a/3427813/1575353">to avoid confusion</a>. You can remove the <code>!important</code> from those background color styles if you make the selectors more specific than just <code>#slide</code> - e.g. <code>#slide.movedown1</code> and <code>#slide.movedown2</code>.</p>
    </div>