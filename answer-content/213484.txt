<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before I even looked at your program, I though I'd let the compiler discover any obvious flaws by compiling it with these flags:</p>

<pre><code>gcc -Wall -Wextra -pedantic -O2 noughts-and-crosses.c
</code></pre>

<p>I expected a few warnings, but there weren't any. This means your code is already free from the worst mistakes. This shows that you have already put some good work into it, and that the code is ready to be inspected by human proofreaders. Very good.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
</code></pre>

<p>The headers are in alphabetical order. This is good. Since there are only 3 of them I cannot say whether it is coincidence or arranged by your IDE or done by you manually. Anyway, this is how professional programs look. (Except when the headers <em>do need</em> a certain order. Then this order is of course more important than alphabetical.)</p>

<pre><code>// Struct with all game state variables.

struct game_data {
    int win;
    int turn;
    int grid[3][3];
}
</code></pre>

<p>You should remove the empty line between the comment and the beginning of the struct. As it is now, the comment reads like a general remark that applies to all the part below it and not just the struct.</p>

<p>This struct definition is the best place to document which values are valid for the <code>win</code> fields. There are several possible choices:</p>

<ul>
<li>true, false</li>
<li>0, 1</li>
<li>0, 1, 2</li>
<li>-1, 0, -1</li>
<li>0, 'o', 'x'</li>
<li>0, '0', '1'</li>
<li>0, '1', '2'</li>
</ul>

<p>It's good style to avoid this possible confusion by commenting the possible values. Especially when you use <code>int</code> as the data type, since that data type is used for almost everything.</p>

<p>For the <code>turn</code> field, I first thought it would mark the player whose turn it is. But that's not what the code says. It's actually the number of turns that have already been played. Therefore I'd expect it to be called <code>turns</code> instead of <code>turn</code>.</p>

<p>The <code>grid</code> field is obvious since it is a 3 by 3 array, which for noughts and crosses can only mean the content of the board. There should be a comment that explains the possible values. Again, there are almost as many possibilities as for the <code>win</code> field.</p>

<pre><code>game= {
        0,
        1,
        { { 8, 8, 8 },
          { 8, 8, 8 },
          { 8, 8, 8 } }
      };
</code></pre>

<p>You surprised me a lot with this part. I first thought about a syntax error, but then I saw that you left out the semicolon after the struct definition. This is unusual since an empty line typically means that the two parts around the empty line are somewhat independent. This is not the case here.</p>

<p>The usual form is to put the semicolon at the end of the struct definition and then repeat the words <code>struct game_data</code>, so that the full variable declaration starts with <code>struct game_data game = {</code>.</p>

<pre><code>void player_one_move(struct game_data* game)
{
    int y_val, x_val;
    printf("You are '-1's. Please input co-ordinates in the form 'row  column' for the 3x3 grid:\n");
    scanf(" %d %d", &amp;y_val, &amp;x_val); //Passes player input to variables x_val and y_val

    //Stops illegal moves and places player's position.
    if (game-&gt;grid[y_val - 1][x_val - 1] == 8) {
        game-&gt;grid[y_val - 1][x_val - 1] = -1;
        printf("\nYour turn:\n\n");
    }
    else {
        player_one_move(game);
    }
}
</code></pre>

<p>When the game starts, the empty board is not printed. Therefore there is absolutely no clue that the coordinates are in the range 1..3. It would be far easier if there were some example coordinates written somewhere.</p>

<p>Using 8 for an empty cell is something I don't understand. An 8 does not look like empty at all. A much better choice would be an actual space or at least an underscore or dot.</p>

<p>Also, having -1 for one player and 1 for the other leads to a board layout in which the position of the vertical lines depends on which player plays where. This has nothing to do with the game in reality, where the vertical and horizontal lines are fixed during a game.</p>

<pre><code>void computer_move(struct game_data* game)
{
    int x_val = rand() / (RAND_MAX / 4);
    int y_val = rand() / (RAND_MAX / 4);
</code></pre>

<p>This again looks unusual. First, why do you divide by 4 instead of by 3? This gives you random numbers between 0 and 3, therefore it might happen that the computer plays off the board (if the memory right behind the <code>struct game_state</code> just happens to have an 8 stored there).</p>

<p>Second, the usual pattern for generating a random number between 0 and n is to just calculate <code>rand() % n</code>, which in this case is <code>rand() % 3</code>.</p>

<pre><code>    if (game-&gt;grid[y_val][x_val] == 8) {
        game-&gt;grid[y_val][x_val] = 1;
        printf("\nComputer turn:\n\n");
    }
    else {
        computer_move(game);
    }
}

void update(struct game_data* game)
{
    //Displays grid.
    printf("%d | %d | %d \n---+---+---\n %d | %d | %d \n---+---+---\n %d | %d | %d \n\n",
        game-&gt;grid[0][0], game-&gt;grid[0][1], game-&gt;grid[0][2],
        game-&gt;grid[1][0], game-&gt;grid[1][1], game-&gt;grid[1][2],
        game-&gt;grid[2][0], game-&gt;grid[2][1], game-&gt;grid[2][2]);
}
</code></pre>

<p>The above code looks quite nice since it visually tells the reader that it prints the 3x3 board. You could make it even nicer if you'd split the string after each <code>\n</code>, like this:</p>

<pre><code>    printf(
        "%d | %d | %d \n"
        "---+---+---\n"
        " %d | %d | %d \n"
        "---+---+---\n"
        " %d | %d | %d \n"
        "\n",
        game-&gt;grid[0][0], game-&gt;grid[0][1], game-&gt;grid[0][2],
        game-&gt;grid[1][0], game-&gt;grid[1][1], game-&gt;grid[1][2],
        game-&gt;grid[2][0], game-&gt;grid[2][1], game-&gt;grid[2][2]);
</code></pre>

<p>Now the code looks almost exactly how the board will be printed, which is good.</p>

<pre><code>void game_event_won(struct game_data* game)
{
    int left_diag_sum = 0;
    int right_diag_sum = 0;
    int col_sum = 0;
    int row_sum = 0;

    // Counts all columns and rows to find sum
    for (int y_val = 0; y_val &lt; 3; y_val++) {
        for (int x_val = 0; x_val &lt; 3; x_val++) {
            col_sum += game-&gt;grid[y_val][x_val];
            row_sum += game-&gt;grid[x_val][y_val];
            if (col_sum == -3 || row_sum == -3) {
                game-&gt;win = 1;
                printf("You have won.\n");
            }
            if (col_sum == 3 || row_sum == 3) {
                game-&gt;win = 1;
                printf("You have lost.\n");
            }
        }
    }

    // Sums diagonals
    for (int y_val = 0; y_val &lt; 3; y_val++)

    {
        left_diag_sum += game-&gt;grid[y_val][y_val];
        right_diag_sum += game-&gt;grid[y_val][2 - y_val];

        if (left_diag_sum == -3 || right_diag_sum == -3) {
            game-&gt;win = 1;
            printf("You have won.\n");
        }
        if (left_diag_sum == 3 || right_diag_sum == 3) {
            game-&gt;win = 1;
            printf("You have lost.\n");
        }
     }
}
</code></pre>

<p>This function is the most important and the most complicated at the same time, which already sounds bad. It is also full of bugs.</p>

<p>For example, it doesn't recognize it when I play at <code>2 1, 2 2, 2 3</code>. That should be a win for me, but it isn't. The reason for this is that you also add each 8 (which means empty) to the sum. Therefore, the only situations in which I can currently win are the horizontal <code>1 1, 1 2, 1 3</code> or the vertical <code>1 1, 2 1, 3 1</code> (but only if the computer and I have also filled the cells at <code>1 2, 1 3, 2 2 and 2 3</code>.</p>

<p>Just counting up to 3 or down to -3 isn't enough. For example, the combination <code>1 3, 2 1, 2 2</code> is not a winning combination, but might be counted as such by your code.</p>

<p>A better approach is to look at each possible combination (3 horizontal, 3 vertical, 2 diagonal) and check for each one separately and independently whether all its cells have the same value and at least one of these cells is not empty.</p>

<p>One time I played against the computer, and to be sure I could not win, I played at <code>1 1, 1 2, 2 1, 2 2</code>. The computer meanwhile got 3 in a row, but nevertheless the game said <code>You have won.</code>, which is wrong.</p>

<p>This function can also print <code>You have won.</code> twice for the same situation (once horizontally or vertically, and once more diagonally). This is another bug.</p>

<pre><code>int main(void)
{
    //Initialises random number generator.
    srand((unsigned)time(0));


    while (game.win == 0 &amp;&amp; game.turn &lt; 9) {
        if (game.turn % 2) {
            player_one_move(&amp;game);
            game.turn++;
        }

        else {
            //player_two_move(&amp;game); Player two function
            computer_move(&amp;game);
            game.turn++;
        }
        update(&amp;game);
        game_event_won(&amp;game);
    }

    return 0;
}
</code></pre>

<p>There are some more things to how you should structure the code of the game, but the first thing to do is to fix the bugs. After that, you are welcome to post a follow-up question with the fixed code.</p>
    </div>