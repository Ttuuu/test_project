<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a prime candidate for object orientation - you clearly have concepts like user, game, hand, shoe, dealer, etc. Each of these would keep track of their respective pieces of data — the <code>User</code> class would have a <code>money</code> field, for example.</p>

<hr>

<p>A method called <code>display_info</code> would not be <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" rel="nofollow noreferrer">expected</a> to return anything - it should simply receive some information and display it.</p>

<hr>

<p>I always suggest users to run their code through Black, flake8 and mypy with a setup.cfg something like this:</p>

<pre><code>[flake8]
doctests = true
exclude =
    .git,
    __pycache__
max-complexity = 4
max-line-length = 120
ignore = W503,E203

[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre>

<p>This will help making your code simple, readable and explicit (but will never guarantee it). Understanding and acting on all the information you'll get from these tools is super helpful to write idiomatic and clear Python code.</p>

<hr>

<p>This is an excellent example of code which could be <a href="https://en.wikipedia.org/wiki/Test-driven_development" rel="nofollow noreferrer">test driven</a>. TDD is probably the hardest thing I've ever learned, but it's an incredibly powerful way to achieve confidence in your code and to be sure that you can act on any future change requests without fear of breaking existing functionality (because if you do, your tests will catch it).</p>

<hr>

<p>Database interaction code should not be in the <code>main</code> method - typically that should only create the main object and set it going. Your connection parameters should be <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">arguments</a> or configuration.</p>

<hr>

<p>You never call <code>deal_card</code> with any number other than 1. <a href="https://en.wikipedia.org/wiki/You_aren't_gonna_need_it" rel="nofollow noreferrer">YAGNI</a> - just remove that parameter and deal one card.</p>

<hr>

<p>Single letter variables are terrible for readability. <code>c</code> is <code>score</code> should simply be <code>card</code>, for example.</p>

<hr>

<p>Rather than string matching on the various cards to get the score it looks like cards should be objects with a <code>score</code> field (or method if the score depends on external state). That way you could simply <code>return sum([card.score for card in cards])</code>.</p>

<hr>

<p>You should update the database <code>WHERE id = %s</code> rather than keying on the (non-unique!) email field. Also, you don't need to use backticks to quote fields unless they contain special characters such as spaces.</p>

<hr>

<p>You can use a <a href="https://docs.python.org/3/library/crypt.html#crypt.crypt" rel="nofollow noreferrer">built-in secure password hashing method</a> instead of an external package.</p>

<hr>

<p>A password hash will be <em>fixed size,</em> so you should store it in a column with the correct data type and length (some hashing functions return binary blobs rather than strings).</p>

<p>For this reason you also shouldn't limit the password length to the size of the database field — it's unrelated to the length of the password. You may still want to limit the password length to something sane like 1,000 characters, though.</p>

<hr>

<p><a href="https://softwareengineering.stackexchange.com/q/234657/13162"><code>SELECT *</code> is discouraged in code</a> - it makes schema changes harder, wastes bandwidth, and is less explicit about what is needed.</p>

<hr>

<p>In general, input, output and persistence should be separate. If you rebuild this using TDD, making sure to <a href="https://stackoverflow.com/a/130862/96588">dependency inject</a> the database and user input handler, this should follow naturally.</p>
    </div>