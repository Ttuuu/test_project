<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can write the <code>MiinaInfo</code> function like this:</p>

<pre><code>class Minesweeper
{
    HashSet&lt;int&gt; mines = new HashSet&lt;int&gt;();
    int row = 6;
    int column = 6;

    int xy(int x, int y) =&gt; y * column + x;

    private int MiinaInfo(int index)
    {
        var x = index % column;
        var y = index / column;

        // Is {x,y} {plus,minus} 1 ok?
        bool xm1 = x - 1 &gt;= 0, xp1 = x + 1 &lt; column;
        bool ym1 = y - 1 &gt;= 0, yp1 = y + 1 &lt; row;
        bool ___ = true;

        return 0
            + (xm1 &amp;&amp; ym1 &amp;&amp; mines.Contains(xy(x - 1, y - 1)) ? 1 : 0)
            + (___ &amp;&amp; ym1 &amp;&amp; mines.Contains(xy(x + 0, y - 1)) ? 1 : 0)
            + (xp1 &amp;&amp; ym1 &amp;&amp; mines.Contains(xy(x + 1, y - 1)) ? 1 : 0)
            + (xm1 &amp;&amp; ___ &amp;&amp; mines.Contains(xy(x - 1, y + 0)) ? 1 : 0)
            + 0 // Center does not count.
            + (xp1 &amp;&amp; ___ &amp;&amp; mines.Contains(xy(x + 1, y + 0)) ? 1 : 0)
            + (xm1 &amp;&amp; yp1 &amp;&amp; mines.Contains(xy(x - 1, y + 1)) ? 1 : 0)
            + (___ &amp;&amp; yp1 &amp;&amp; mines.Contains(xy(x + 0, y + 1)) ? 1 : 0)
            + (xp1 &amp;&amp; yp1 &amp;&amp; mines.Contains(xy(x + 1, y + 1)) ? 1 : 0)
            + 0;
    }
}
</code></pre>

<p>It may be harder to read at first sight, but it actually is quite simple.</p>

<p>First, the index is converted into its <code>x</code> and <code>y</code> parts. Since the code does not use fixed numbers like <code>35</code>, it easily applies to rectangular fields of any size.</p>

<p>I chose the very short variable names <code>xm1, xp1, ym1, yp1</code> because they should have the same length, and <code>minus</code> and <code>plus</code> don't have that.</p>

<p>When you read the code in columns, it always follows the pattern (-1, 0, +1), or (xm1, ___, xp1). Therefore it should be easy to verify it for typos. Each of the 8 neighbors has one line of check, starting in the upper left, in typical European reading direction.</p>

<p>The <code>xy</code> function converts a pair of coordinates back into an index, as required by the <code>mines</code> field.</p>
    </div>