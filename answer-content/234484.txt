<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just adding to the tips already given in the other answers:</p>

<h1>Don't mix iostream and stdio functions</h1>

<p>Stick to one. Since you are writing C++, go for iostream functions. Note that there are libraries, like <a href="https://github.com/fmtlib/fmt" rel="nofollow noreferrer">fmtlib</a> that give you <code>printf</code>-like formatting that works with <code>std::string</code> and <code>std::ostream</code>s, which allows you to write something like:</p>

<pre><code>#include &lt;fmt/ostream.h&gt;
...
fmt::print(std::cout, "{} + {} = {}\n", a, b, zbroj);
</code></pre>

<h1>Avoid repetition</h1>

<p>Each of the four cases prompt for two input values before printing the result. There is a lot of code duplication there. That will make it hard whenever you want to change something in the behavior of your code. So whenever you spot repetition, try to avoid it by creating a function or a class that generalizes the thing you are trying to achieve.</p>

<p>For example, you can make the printing of the first line and reading in the two variables into a function:</p>

<pre><code>void get_values(const char *text, int &amp;a, int &amp;b) {
    std::cout &lt;&lt; text &lt;&lt; '\n';
    a = prompt("a: ");
    b = prompt("b: ");
} 
</code></pre>

<p>And then use that in your <code>switch</code>-statement as follows:</p>

<pre><code>int a, b;

switch (mod) {
case 1:
    get_values("Odabrali ste zbrajanje!", a, b);
    std::cout &lt;&lt; a &lt;&lt; " + " &lt;&lt; b &lt;&lt; " = " &lt;&lt; (a + b) &lt;&lt; 'n';
    break;
case 2:
    get_values("Odabrali ste oduzimnje!", a, b);
    std::cout &lt;&lt; a &lt;&lt; " - " &lt;&lt; b &lt;&lt; " = " &lt;&lt; (a - b) &lt;&lt; 'n';
    break;
case ...
}
</code></pre>

<p>You can go even further than that, although if you are not comfortable with this level of C++, just use the simple approach above:</p>

<pre><code>#include &lt;functional&gt;
...
void calculate(const char *name, char symbol, std::function&lt;int(int, int)&gt; operation) {
    std::cout &lt;&lt; "Odabrali ste " &lt;&lt; name &lt;&lt; "!\n";
    int a = prompt("a: ");
    int b = prompt("b: ");
    std::cout &lt;&lt; a &lt;&lt; symbol &lt;&lt; b &lt;&lt; " = " &lt;&lt; operation(a, b) &lt;&lt; 'n';
}
</code></pre>

<p>And use that in the <code>switch</code>-statement as follows:</p>

<pre><code>switch (mod) {
case 1:
    calculate("zbrajanje", '+', [](int a, int b){return a + b;});
    break;
case 2:
    calculate("oduzimanje", '-', [](int a, int b){return a - b;});
    break;
case ...
}
</code></pre>

<p>Instead of writing these lambda functions by hand, you could also use <code>std::plus</code>, <code>std::minus</code> et cetera from <a href="https://en.cppreference.com/w/cpp/utility/functional" rel="nofollow noreferrer"><code>&lt;functional&gt;</code></a>.</p>

<h1>The data-driven approach</h1>

<p>Currently you are using control flow (the <code>switch</code>-statement) to decide what to do given the initial input. There is nothing wrong with that, but there is another way that also prevents repetition, and that is by storing all the information about the operations in a table, and consult this table instead of using the <code>switch</code>-statement. Here is what it would look like:</p>

<pre><code>#include &lt;functional&gt;

struct operation {
    const char *name;
    char symbol;
    std::function&lt;int(int, int)&gt; function;

    void calculate();
};

static const operation operations[] = {
    {"zbrajanje",  '+', std::plus&lt;int&gt;},
    {"oduzimanje", '-', std::minus&lt;int&gt;},
    ...
};

operation::calculate() {
    std::cout &lt;&lt; "Odabrali ste " &lt;&lt; name &lt;&lt; "!\n";
    int a = prompt("a: ");
    int b = prompt("b: ");
    std::cout &lt;&lt; a &lt;&lt; symbol &lt;&lt; b &lt;&lt; " = " &lt;&lt; function(a, b) &lt;&lt; 'n';}
}
</code></pre>

<p>And instead of the <code>switch</code>-statement, write:</p>

<pre><code>if (mod &gt;= 1 &amp;&amp; mod &lt;= 4) {
    operations[mod - 1].calculate();
} else {
    std::cout &lt;&lt; "Nemamo tu opciju trenutno, prcekajte za nadogradnju programa, ili se javite developeru!\n";
}
</code></pre>

<p>Now you can also generate the help text you print in the beginning in an automated way:</p>

<pre><code>std::cout &lt;&lt; "U kojem modu kalkulatora zelis biti?\n";
for (int i = 1; i &lt;= std::size(operation); ++i) {
    std::cout &lt;&lt; "Mod " &lt;&lt; i &lt;&lt; "je za " &lt;&lt; operations[i - 1].name &lt;&lt; "\n";
}
</code></pre>

<p>Again, if you are a beginner, this might seem a bit much. Don't worry about it, try to get comfortable with the basics first. Just remember that the language provides you with a lot of tools to make your life easier :)</p>
    </div>