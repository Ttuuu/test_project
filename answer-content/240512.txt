<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is nicely documented, so keep that up!  I see some things that may help you improve your code.</p>

<h2>Use <code>int main(void)</code> in C</h2>

<p>You mentioned that you were coming from C++, so although it's not a problem in this code, it's important to realize that C and C++ are different when it comes to the formal argument list of a function.  In C, use <code>int main(void)</code> instead of <code>int main()</code>.  See <a href="https://stackoverflow.com/questions/12225171/difference-between-int-main-and-int-mainvoid">this question</a> for details.</p>

<h2>Think of the user</h2>

<p>The existing program has no graceful way for the user to end which also means that the <code>cstack_free()</code> function is never called.  I'd suggest that instead of <code>while (1)</code>, you could do this:</p>

<pre><code>bool running = true;
while (running)
</code></pre>

<p>and then provide a menu choice for the user to quit.</p>

<h2>Check return values for errors</h2>

<p>The calls <code>malloc</code> are all properly checked, but <code>fscanf</code> can also fail.  You must check the return values to make sure they haven't or your program may crash (or worse) when given malformed input.  Rigorous error handling is the difference between mostly working versus bug-free software.  You should, of course, strive for the latter.</p>

<h2>Avoid function-like macros</h2>

<p>Function-like macros are a common source of errors and the <code>min</code> and <code>max</code> macros are paricularly dangerous.  The reason is that any invocation of that macro with a side effect will be executed multiple times.  Here's an example:</p>

<pre><code>int a = 7, b = 9;
printf("a = %d, b = %d\n", a, b);
int c = max(++a, b++);
printf("a = %d, b = %d\n", a, b);
printf("c = %d\n", c);
</code></pre>

<p>The first <code>printf</code>, predictably, prints </p>

<pre><code> a = 7, b = 9
</code></pre>

<p>However, the second two <code>printf</code> statements result in this:</p>

<pre><code> a = 8, b = 11
 c = 10
</code></pre>

<p>What a mess!  The solution is simple: write a function instead.  That's particularly simple in this case because each macro is used only once anyway.</p>

<h2>Use string concatenation</h2>

<p>The menu includes these lines:</p>

<pre><code>fprintf(stdout, "1. push\n");
fprintf(stdout, "2. pop\n");
fprintf(stdout, "3. print\n");
fprintf(stdout, "&gt;&gt;&gt; ");
</code></pre>

<p>There are a couple ways in which this could be improved.  First, since you're printing to <code>stdout</code>, you could simply use <code>printf</code>.  Second, the strings can be concatenated and use a single invocation of <code>printf</code>:</p>

<pre><code>printf("1. push\n"
       "2. pop\n"
       "3. print\n"
       "&gt;&gt;&gt; ");
</code></pre>

<h2>Reconsider the interface</h2>

<p>If a <code>cstack_push</code> fails because <code>realloc</code> fails, the user has no way to detect this condition because <code>cstack_push</code> does not return anything.  It would be nice to provide a <code>bool</code> return instead.</p>

<h2>Exercise all functions</h2>

<p>It's understood that the sample program is just an illustration and not a comprehensive test, but it would be good to write test code that exercises all functions. </p>
    </div>