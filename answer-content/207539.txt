<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>roll</code> function generates a random sequence of integers. The loop body shows me that you know how to seed a pseudo-RNG with a true source of randomness but you're doing it for every iteration. You should seed the pseudo-RNG once and then use it in the loop. You know how big your <code>rand</code> vector will be by the time you're done with it so you should <code>reserve</code> memory for it so that it the memory doesn't need to be reallocated as you push integers. So your <code>roll</code> function should probably look like this:</p>

<pre><code>std::vector&lt;int&gt; roll(int times)
{
    std::vector&lt;int&gt; rand;
    rand.reserve(times);

    std::random_device seeder;
    std::mt19937 engine(seeder());
    std::uniform_int_distribution&lt;int&gt; dist(1, 6);

    while (times &gt; 0)
    {
        rand.push_back(dist(engine));
        --times;
    }

    return rand;
}
</code></pre>

<hr>

<p>The next function, <code>histrogram_calculate</code> creates a histogram. The histogram is stored in a <code>std::map&lt;int, int&gt;</code> which is not really the best choice. Think about what we're storing.</p>

<pre><code>1 -&gt; 7
2 -&gt; 3
3 -&gt; 10
4 -&gt; 1
5 -&gt; 0
6 -&gt; 5
</code></pre>

<p>We want to know the frequency of six numbers. Since six is a compile-time constant, we could use a <code>std::array&lt;int, 6&gt;</code> instead. Initializing an array to zero is as simple as <code>histogram.fill(0)</code>. With a <code>std::map&lt;int, int&gt;</code> you need to set keys to zero in a loop.</p>

<pre><code>auto max_element = 6;

for (int i = 1; i &lt;= max_element; ++i)
{
    cnt_hashmap[i] = 0;
}
</code></pre>

<p>Using <code>auto</code> here is not a good idea. In fact, <code>int</code> is shorter and provides more information. Also, <code>max_element</code> should be a <code>const</code>ant since it doesn't actually change. The <code>max_element</code> variable is a good start but <code>6</code> should be available to the <code>roll</code> function as well. You should create a global constant for <code>6</code> or perhaps use a template parameter.</p>

<pre><code>// The number of sides on a die
constexpr int num_sides = 6;
</code></pre>

<hr>

<p><code>histrogram_calculate</code> iterates the vector of random numbers and counts up the frequencies.</p>

<pre><code>for (auto iter = random_numbers.begin(); iter != random_numbers.end(); ++iter)
{
    cnt_hashmap[*iter] += 1;
}
</code></pre>

<p>Here, you're using iterators when you could be using a range-for.</p>

<pre><code>for (const int num : random_numbers) {
    cnt_hashmap[num]++;
}
</code></pre>

<hr>

<p>Wait just a minute!</p>

<p><code>histogram_calculate</code> makes a call to <code>roll</code> which returns a sequence of random integers but then, it's just thrown away! Do we really need the whole sequence in order to create a histogram?</p>

<p>No. We can create the histogram directly from the sequence of random numbers. There's no need to create an array and then just throw it away.</p>

<p>I'll let you try this yourself.</p>

<hr>

<p><code>histogram_draw</code> knows how to generate a histogram. <code>histogram_draw</code> should take a histogram and draw it. <code>histogram_draw</code> should have no idea where the histogram is coming from. <code>histrogram_draw</code> should just draw a histogram.</p>

<hr>

<p>As @Calak pointed out in the comments, <code>histrogram_draw</code> doesn't actually behave as intended so this question is technically off-topic. Might I suggest that you write code to print a horizontal histogram? English text is typically written left-to-right so it is considerably easier to draw a horizontal histogram than a vertical one.</p>

<pre><code>1 | ####### 7
2 | ### 3
3 | ########## 10
4 | # 1
5 | 0
6 | ##### 5
</code></pre>

<hr>

<p>If you make improvements to your code, feel free to create a new question with your improved code. Just make sure that it functions as intended, otherwise, you risk getting flagged for being off-topic.</p>
    </div>