<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Of course there is lots to improve:</p>

<ol>
<li><p>Always ask the compiler. <a href="http://coliru.stacked-crooked.com/a/0eb8716b375f3a85" rel="noreferrer">A reasonably-high warning-level helps.</a>.</p></li>
<li><p>You need to <code>#include &lt;algorithm&gt;</code> for <code>std::find()</code>.</p></li>
<li><p>Don't name a function-argument if you don't use it. In the case of <code>main()</code>, you could even leave them off. And there you may also omit <code>return 0;</code> while we are at it.</p></li>
<li><p>Avoid allocation, it's expensive. Every time you accept a <code>std::string const&amp;</code>, you should re-asses your options:</p>

<ul>
<li>Do you always store it somewhere? Accept a <code>std::string</code> instead.</li>
<li>Do you only inspect it, and don't depend on the 0-terminator? <code>std::string_view</code> excels there.</li>
<li>Do you only inspect it, but need the 0-terminator? Sorry, there's no standard view for you yet, you have to make do.</li>
<li>Do you sometimes store it somewhere? Maybe combine the two above.</li>
</ul>

<p>Of course, using universal references and perfect forwarding is also an interesting idea.</p></li>
<li><p>Use the right data-structure.</p>

<ul>
<li>If equal objects are just copies, use a <code>std::map</code>, <code>std::unordered_map</code>, or something like that.</li>
<li>Otherwise, consider a <code>std::multiset</code>, <code>std::unordered_multiset</code>, or the like.</li>
<li>And finally, it might pay to keep the array ordered, or explicitly order it before removals / queries. It depends on the use-patterns.</li>
</ul></li>
</ol>
    </div>