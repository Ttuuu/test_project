<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>I read through your profile and saw you are a 17 year old developer hobbiest. I didn't know what OO was at that age. Well done. I made this review under the impression you were a somewhat experienced professional.</em></p>

<h3>AbstractSocketWrapper</h3>

<ul>
<li>The constructor silently catches <code>IOException</code>. This leaves the socket in a corrupted state. Throw any exception up the stack to let higher level classes decide how to handle the corrupted socket connection.</li>
<li>method <code>run</code> could abort at any time when the the socket gets closed gracefully <code>!socket.isClosed()</code> or otherwise: <code>UncheckedIOException</code>. But the container class does not get notified about this. Perhaps you should raise an event. If not, container classes should periodically check for lingering socket connections and close them.</li>
<li>method <code>send</code> prints a friendly message (with a new line). This suggests to me the API can only be used for human readable messages, which limits its usability. The guard in this method is also not that useful. A disconnected socket should get disposed correctly, and the guard does not guarantee that the call will succeed.</li>
<li>method <code>close</code> seems robust, however when <code>socket.close();</code> fails, <code>input.close();</code> does not get called, possibly leading to unwanted behavior (memory leak?).</li>
</ul>

<h3>ConnectionAcceptor</h3>

<ul>
<li>method <code>run</code> is ill-implemented. You perform <code>handleConnect(socket);</code> before <code>sockets.add(socket);</code>. And as you can see in your example server, a server can close the socket in <code>handleConnect</code>. This would mean a socket gets added even though it's already been closed.</li>
</ul>

<h3>AbstractServer</h3>

<ul>
<li>method <code>close</code> is not robust. If any socket fails to close <code>sockets.forEach(this::close);</code> others will not get closed, causing lingering socket connections.</li>
<li>method <code>broadcast</code> has the same issue that failure in unicasting to a single client prevents other clients from being sent to.</li>
</ul>

<h3>General</h3>

<ul>
<li>Your API is not threadsafe. Consider using a locking mechanism when manipulating the list of connections in the server, and also when taking a snapshot of connections to send to.</li>
<li>Your API should be made more robust against exceptions, and should check for lingering connections.</li>
</ul>
    </div>