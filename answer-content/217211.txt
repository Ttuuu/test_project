<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Decouple the game engine from the data</h1>

<p>An adventure game is a good example of a <strong>state</strong> machine: at any given point in the game, a small number of parameters determine the user's position, and a small number of actions are available that cause transitions to possible new states.</p>

<p>For this game, we can give a number to each state:</p>

<ol>
<li>KGB Offices, Moscow</li>
<li>Vladimir makes an offer</li>
<li>Welcome to the KGB</li>
<li>Escape</li>
<li>Land-mine</li>
<li>Kill the guard</li>
<li>Prison</li>
<li>Torture</li>
<li>...</li>
</ol>

<p>We can represent each state as an object.  For example, state 1 might look something roughly like:</p>

<pre><code>id = 1
description = "You were arrested after participating in " + more_description
actions = [ ("Tell the KGB officer everything", 2), ("Say nothing", 8) ]
</code></pre>

<p>Now, we're able to turn the game into a loop that just prints the description from the current state and presents the available actions.  When the user inputs a valid action, then we set the current state from the action's next state.</p>

<p>With the data separated like this, it's easier to re-use the game engine for an entirely different game, just by changing the data.</p>

<p>If the game data are kept in a separate file to the code, the story could be written by a professional author and the text could be translated into many languages by professional translators even if none of them are programmers - this is common in the software industry, and allows each person to contribute what they're best at without needing additional skills.</p>

<hr>

<p>A small problem that needs fixing is that we always assume the user will enter a valid action.  If the user enters something other than the options presented, we should re-ask for valid input.  With the game engine transformed into a simple loop, there's only one <code>input()</code> that we need to change - another benefit of separating the code from the data.</p>
    </div>