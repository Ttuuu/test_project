<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One of the great things about working with OOP, is instance methods and polymorphism. </p>

<p>If you add methods in a <code>Line</code> class to perform this logic. Then you hold several instances of the line, and move each with a simple method call. You can also make use of inner properties to make the calculation simpler. </p>

<p>This may not help enough. You said there are 8 <em>types</em> of lines, so I'm assuming there some difference in the logic. In other words, you can make 8 classes which <code>extend Line</code> and customizes the general logic from <code>Line</code> to make the implementation work for the line type.</p>

<p>An example code for the concept:</p>

<pre><code>class Line {
    private double motionSpeed;

    public void move(Direction direction) {
        switch(direction) {
            case UP:
                moveBy(0, -motionSpeed);
                break;
            // other cases
        }
    }

    // child classes will implement how to actually move
    protected abstract void moveBy(double x, double y);
}
class LineType1 extends Line {

    @Override
    protected void moveBy(double x, double y) {
        // actually move
    } 
}

class UI {
     private Collection&lt;Line&gt; lines;

     public void moveLines(Direction direction) {
         for (Line line : lines) {
             line.move(direction);
         } 
     }
}
<span class="math-container">```</span> 
</code></pre>
    </div>