<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Design</strong></p>

<p>The problem with <code>getName</code> is already mentioned in the comments. <code>firstName + lastName</code> is at least missing a space. Note that there are multiple ways of creating a full name - you may want to leave the construction of a full name to the caller. For instance, Germans are a bit more formal and may prefer "lastname, firstname". Usually initials are also an important part of a name (and then there is title, junior/senior etc.). </p>

<p>Second is the age. An age is a property of a person, but it is not one that keeps constant in time. You generally store the birthday of a person. Usually the precise <em>day</em> is stored (YYYY-MM-DD), or in more complex systems just the month (YYYY-MM) or even just the year (YYYY) if the other information is unknown. This may seem strange, but not everybody knows their exact birthday. The <em>age</em> can then be calculated from that using comparison with the current date.</p>

<p>Related, using <code>0</code> to signify that no age is known is choosing a bad <em>magic value</em> (or sentinel). Magic values are already not recommended, but choosing a <em>valid age for a baby</em> as magic value is not a good idea at all. </p>

<p>Returning <code>return NO_ADDRESS;</code> is dangerous, especially if you don't have any method to indicate that <code>NO_ADDRESS</code> is indeed <strong>not an address</strong>. It is generally up to the caller to choose what to insert as string if no address is known, otherwise you may get packages posted to <code>NO_ADDRESS</code>. A <code>hasAddress</code> method would solve this. If you have an unknown address then you may use an <code>Optional</code> value instead. Accepting and returning an <code>Optional&lt;String&gt;</code> would remove the issue altogether and may bring down the number of methods and constructors. Storing the address as optional is not recommended because it cannot be serialized; probably best to use <code>null</code>, but make sure that you don't return <code>null</code>.</p>

<p>As you may notice, currently your <code>Person</code> instances can change completely by calling the setters. That's no good if you want to keep track of a person. This is why almost all organizations will create a unique ID for each person. That way any property can change without them becoming someone else. The ID can then represent the person in e.g. a transaction system.</p>

<p><strong>Code</strong></p>

<p>The code is generally well formed.</p>

<p>However there are some remarks to be made:</p>

<ul>
<li>fields default to <code>false</code> so there is no need to initialize them to that value; it might be a good idea to set all fields in the various constructors so that they are not forgotten;</li>
<li>the <code>if</code> statement does not use braces; <strong>always</strong> use braces to subsequent changes do not result in unmaintainable code;</li>
<li>similarly, you will probably use class instances in collections, so you need to implement the <code>hashCode</code> and <code>equals</code> methods;</li>
<li>implementing <code>toString</code> is recommended for any class really.</li>
</ul>

<p><strong>Ideas</strong></p>

<p>Using <code>set</code> methods is generally not a good idea. Having immutable objects often makes more sense. Other variants you may consider is having a <code>Map</code> of properties or having a factory / factory methods to create <code>Person</code> instances.</p>

<p>In Java, you may want to implement <code>Serializable</code> for data classes (and the static serializable UID - Eclipse will warn you about this) - that way you can more easily communicate data over a binary connection / stream. This is contended in the comments. In general, I would however try and keep in mind that you may want to be able to serialize a class in the future and - therefore - try and use serializable fields.</p>
    </div>