<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because you don't validate method parameters of your public methods you are leaking implementation details of your class. The user of your class shouldn't know which kind of underlaying datastructure you are using.  </p>

<p>Let's take e.g <code>RemoveAt(int)</code>:  </p>

<p>Calling this method with an <code>index &gt; _list.Count</code> will result in an <code>ArgumentOutOfRangeException</code> with the stacktrace  </p>

<blockquote>
  <p>StackTrace:<br>
  at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)<br>
         at System.Collections.Generic.List`1.get_Item(Int32 index) </p>
</blockquote>

<p>hence its exposing that you are using a<code>List&lt;T&gt;</code>.  </p>

<p>Sure you can say, hey I implement <code>IList&lt;T&gt;</code> that is what expected to be seen here. But if you, like correctly suggested, implement a <code>ISet&lt;T&gt;</code> then it wouldn't be that good if you are leaking the usage of the <code>List&lt;T&gt;</code>.  </p>

<hr>

<blockquote>
<pre><code>private List&lt;T&gt; _list;
  private HashSet&lt;T&gt; _set;  
</code></pre>
</blockquote>

<p>does this need to be a <code>List&lt;T&gt;</code> and a <code>HashSet&lt;T&gt;</code> ? I don't think so because you aren't using specific methods of this objects. You should declare them as <code>IList&lt;T&gt;</code> and <code>ISet&lt;T&gt;</code>. You should code against interfaces not implementations.  </p>

<p>In addition, by making these variables <code>readonly</code> your code will become more robust.  </p>

<hr>
    </div>