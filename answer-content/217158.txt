<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Confusion</h2>

<p>I think that the challenge is poorly posed, because of an ambiguity in the term "interesting".  On one hand, it says "A number is only interesting if it is greater than <code>99</code>!"  On the other hand, the specification calls for the <code>is_interesting()</code> function to return "<code>1</code> if an interesting number occurs with the next two miles".  So, what should <code>is_interesting(98, [])</code> return?  By my interpretation, it should return <code>1</code>, because <code>98</code> itself is not interesting, but it is nearly <code>100</code>, which is <code>1</code> followed by two zeroes.  Your code does that, but it's not obvious why it behaves that way, especially since you wrote <code>if(number&lt;98): return 0</code>.  (Why is 98 special?  Because it's 2 less than a three-digit number.  So, you've encoded the within-two rule in two places: <code>if(number&lt;98): return 0</code> and <code>for i in range(1,3)</code> — and it's <strong>bad practice to encode a rule twice</strong>.)</p>

<p>It's unfortunate that the challenge calls for an <code>is_interesting()</code> function to be written, when it would be more accurately described as "is interesting or <em>approaching</em> interesting".  Given the unfortunate specification, though, I think it would be a good idea to write a function <code>is_intrinsically_interesting()</code>, which returns either <code>True</code> or <code>False</code>, without considering the next two integers.  That would <strong>eliminate the redundancy in your implementation of <code>is_interesting()</code></strong>.</p>

<p><strong>Your comments confuse awesomeness (whether a number appears in the <code>awesome_phrases</code> list) with interestingness.</strong></p>

<h2>Functions</h2>

<p>You and the challenge talk about testing, but you haven't included any tests.  I suggest writing <a href="https://docs.python.org/3/library/doctest.html" rel="noreferrer"><strong>doctests</strong></a>.</p>

<p>A good <strong>naming convention</strong> to follow is <code>is_…</code> for predicates (functions that return either <code>True</code> or <code>False</code>.</p>

<p>Most of your functions take a <code>number</code> parameter, but for some reason you wrote <code>decreasing_sequential(numbers)</code> and <code>palindrome(numbers)</code>, which is confusing.</p>

<p>Since most of these tests operate on digits, consider accepting a list of digits instead of the integer.</p>

<h2>Expressiveness</h2>

<p>Some of your functions are rather long.  <strong>Each test could be written as a one-liner, or nearly so.</strong></p>

<p>Instead of writing</p>

<pre>
if <i>condition</i>:
    return True
return False
</pre>

<p>… you should just write <code>return <em>condition</em></code> (or, to explicitly coerce the result to a boolean, <code>return bool(<em>condition</em>)</code>.</p>

<p>The <code>pass</code> on the very last line is dead code.</p>

<p>The <code>palindrome()</code> function should be written such that you don't need separate even- and odd-length cases.</p>

<h2>Suggested solution</h2>

<pre><code>def is_digit_followed_by_all_zeroes(digits):
    """
    &gt;&gt;&gt; is_digit_followed_by_all_zeroes([1, 0, 0])
    True
    &gt;&gt;&gt; is_digit_followed_by_all_zeroes([9, 0, 0, 0, 0])
    True
    &gt;&gt;&gt; is_digit_followed_by_all_zeroes([1, 0, 1])
    False
    """
    return all(digit == 0 for digit in digits[1:])

def is_repeated_digit(digits):
    """
    &gt;&gt;&gt; is_repeated_digit([1, 1, 1, 1])
    True
    &gt;&gt;&gt; is_repeated_digit([2, 1, 2])
    False
    """
    return 1 == len(set(digits))

def is_increasing_sequential(digits):
    """
    &gt;&gt;&gt; is_increasing_sequential([1, 2, 3, 4])
    True
    &gt;&gt;&gt; is_increasing_sequential([7, 8, 9, 0])
    True
    &gt;&gt;&gt; is_increasing_sequential([9, 0, 1])
    False
    """
    ORDER = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    return all(
        ORDER.index(i) + 1 == ORDER.index(j)
        for i, j in zip(digits, digits[1:])
    )

def is_decreasing_sequential(digits):
    """
    &gt;&gt;&gt; is_decreasing_sequential([4, 3, 2, 1])
    True
    &gt;&gt;&gt; is_decreasing_sequential([3, 2, 1, 0])
    True
    &gt;&gt;&gt; is_decreasing_sequential([2, 1, 0, 9])
    False
    """
    return all(
        i - 1 == j
        for i, j in zip(digits, digits[1:])
    )

def is_palindrome(digits):
    """
    &gt;&gt;&gt; is_palindrome([7,3,8,3,7])
    True
    &gt;&gt;&gt; is_palindrome([1,2,2,1])
    True
    &gt;&gt;&gt; is_palindrome([1,2,3,1])
    False
    """
    half_len = (len(digits) + 1) // 2   # Half the length, rounding up
    return digits[:half_len] == digits[-1 : -half_len-1 : -1]

def is_intrinsically_interesting(number, awesome_phrases):
    """
    Test whether the number itself is "interesting".
    """
    digits = [int(d) for d in str(number)]
    return number &gt; 99 and (
        is_digit_followed_by_all_zeroes(digits) or
        is_repeated_digit(digits) or
        is_increasing_sequential(digits) or
        is_decreasing_sequential(digits) or
        is_palindrome(digits)
    ) or number in awesome_phrases

def is_interesting(number, awesome_phrases):
    return (
        2 if is_intrinsically_interesting(number, awesome_phrases) else
        1 if is_intrinsically_interesting(number + 1, awesome_phrases) else
        1 if is_intrinsically_interesting(number + 2, awesome_phrases) else
        0
    )
</code></pre>
    </div>