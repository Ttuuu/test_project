<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design Flaw:</h3>
<blockquote>
<pre><code>  _quantifier = new Quantifier(string.Empty); // these are always exactly once. Quantifying happens through groups
</code></pre>
</blockquote>
<p>This one in <code>IRegularExpression</code> is <strong>really, really</strong> smelly. Why is there a property that's only used for one special incarnation of <code>IRegularExpression</code>?</p>
<p>Move <code>Quantifier</code> from <code>IRegularExpression</code> into <code>IAtom</code>, where it's actually meaningful.</p>
<p>It might even be worth considering to have <code>IAtom</code> extend <code>IRegularExpression</code>. This goes better in line with the inductive definition of RegularExpressions you may know from CS Theory classes.</p>
<h3>new Quantifier("");</h3>
<p>well ... this could be semantically more meaningful as something like this:</p>
<pre><code>Quantifier.None
</code></pre>
<p>This is a bit more in line with things like <code>string.Empty</code>, <code>IEnumerable.Empty()</code> and generally all "Null-Object-Patterns"</p>
<h3>Missing localization</h3>
<p>In the Quantifier constructor the error messages are not localized. Since this must critically support i18n, why is that the case?</p>
    </div>