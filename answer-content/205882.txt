<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Staying close to your original appraoch, you could use another <code>for</code> loop with an <code>else</code> instead of <code>try/except</code> and <code>while</code>. The <code>else</code> is triggered when the inner loop has ended normally, without the <code>break</code>, i.e. when there are no more parts left in the sentence.</p>

<pre><code>def can_spell(sentence, word):
    words_iter = iter(sentence.split())
    for char in word:
        for part in words_iter:
            if char in part:
                break
        else:
            return False
    return True
</code></pre>

<p>Or, you could use a nested generator expression checking that <code>all</code> characters in the word are in <code>any</code> of the remaining parts of the sentence-iterator. This works since <code>any</code> will only consume as many items from the iterator as necessary until it finds a match.</p>

<pre><code>def can_spell(sentence, word):
    words_iter = iter(sentence.split())
    return all(any(char in part for part in words_iter) for char in word)
</code></pre>

<hr>

<p>Following an entirely different route, you could use a regular expression, joining the characters of the word such that between each character there has to be at least one space (and, optionally, any other characters), e.g. <code>b.* .*o.* .*o.* .*m</code> for <code>boom</code>, and check if that regular expression can be found in the sentence:</p>

<pre><code>import re
def can_spell(sentence, word):
    return re.search('.* .*'.join(word), sentence) is not None
</code></pre>
    </div>