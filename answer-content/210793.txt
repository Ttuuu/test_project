<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's weird that you picked <code>append</code> as your primitive for building test cases, when <code>prepend</code> would be so much simpler and faster — <code>O(1)</code> instead of <code>O(n)</code>.</p>

<hr>

<pre><code>auto newNode = new Node{data, nullptr};
</code></pre>

<p>This is a very "modern" way of writing what would be more idiomatically written as</p>

<pre><code>Node *newNode = new Node(data, nullptr);
</code></pre>

<p>I would weakly recommend the latter. And I would <em>strongly</em> recommend, if you do nothing else, at least calling out explicitly when you're working with raw (non-owning) pointers:</p>

<pre><code>auto *newNode = new Node{data, nullptr};  // the asterisk means watch out!
</code></pre>

<hr>

<pre><code>auto temp{head};
</code></pre>

<p>Again, I'd write simply</p>

<pre><code>Node *temp = head;
</code></pre>

<p>or at least</p>

<pre><code>auto *temp = head;
</code></pre>

<p>The <code>*</code> signals the reader to watch out for pointer pitfalls (aliasing, memory leaks); the <code>=</code> signals the reader that an initialization is happening here. You might be surprised how easy it is to glance over <code>auto temp{head};</code> surrounded by other lines of code and not even recognize that it's <em>introducing the name <code>temp</code>!</em></p>

<hr>

<pre><code>//  pairwise swap of the elements in the given linked lists
void pairwiseSwap(Node **head_ref) {
</code></pre>

<p>Some coding guidelines tell you to pass the inout parameter <code>head_ref</code> by pointer here, instead of by reference. I'm going to assume you're following one of those guidelines.</p>

<hr>

<pre><code>return ;
</code></pre>

<p>is an unidiomatic whitespace style; most programmers would write</p>

<pre><code>return;
</code></pre>

<p>You actually put an extra space before a <em>lot</em> of semicolons in this function (but not consistently). Are you French? ;)</p>

<hr>

<p>You should definitely factor out the "swap two nodes" functionality into a named function. I somewhat suspect that this would do, but you'd have to draw it out on paper...</p>

<pre><code>void swap_two_nodes(Node *&amp;p, Node *&amp;q) {
    assert(p-&gt;next == q);
    std::swap(p, q);
}
</code></pre>

<p>Alternatively — and since I've confused myself ;) — you could just write a recursive version of the whole thing:</p>

<pre><code>Node *pairwise_swap(Node *head) {
    if (head &amp;&amp; head-&gt;next) {
        Node *first = head-&gt;next;
        Node *second = head;
        Node *tail = pairwise_swap(head-&gt;next-&gt;next);
        head = first;
        first-&gt;next = second;
        second-&gt;next = tail;
    }
    return head;
}
</code></pre>

<p>Turning this into tail-recursion is left as an (easy) exercise for the reader.</p>

<hr>

<pre><code>// for even number of nodes
a = append(a, 15); 
</code></pre>

<p>Appending an even number of nodes to an odd-length list does <em>not</em> result in an even-length list. Did you try <em>running</em> your test code? Did you look at the output and verify that it was correct? You should have!</p>
    </div>