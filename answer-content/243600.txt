<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Formatting</h1>
<p>The formatting could be nicer and doesn't follow Java conventions.</p>
<ul>
<li>The indention isn't correct (maybe a copy and paste error).</li>
<li>Opening braces belong on the same line as the method header/statement.</li>
<li>There are random superfluous spaces (after <code>int curr</code> and <code>root.right == null</code>) and missing spaces around the <code>+</code> operator in <code>curr+root.data</code></li>
<li>There should be a space between keywords and opening brackets (<code>if (...</code>).</li>
<li>Braces should always be used around a conditional block, even if it only contains a single statement.</li>
<li>There shouldn't be more than a single blank line at a time and there shouldn't any at all inside <code>leafsum</code> in my opinion.</li>
</ul>
<h1>Names</h1>
<p>The parameter names could be better:</p>
<ul>
<li><code>root</code> should be <code>node</code>.</li>
<li>There is no need to abbreviate <code>curr</code>. It should be <code>current</code> or maybe even <code>currentSum</code>.</li>
<li>The list should have a plural name: <code>sums</code>.</li>
</ul>
<p>The method itself should also have a plural name such as <code>leafSums</code>.</p>
<h1>Early return</h1>
<p>In order to minimize indention depth return early out of <code>leafsum</code> instead of putting the complete method body inside the <code>if</code> block:</p>
<pre><code>void leafsum(TreeNode root, int curr, List&lt;Integer&gt; sum) {
    if (root == null) {
      return;
    }
    // method body here.
}
</code></pre>
<h1>DRY</h1>
<p>You are repeating the sum <code>curr + root.data</code> three times.</p>
<h1>Handling results</h1>
<p>I'm not a big fan creating, carrying around and mutating a list for the results, however your way is probably the least convoluted way with Java's standard collection library. Personally I'd do something like:</p>
<pre><code>static List&lt;Integer&gt; leafSums(TreeNode node, int currentSum) {
    if (node == null) {
        return Collections.emptyList();
    }

    int newSum = currentSum + node.data;

    List&lt;Integer&gt; leftSums = leafSums(node.left, newSum);
    List&lt;Integer&gt; rightSums = leafSums(node.right, newSum);

    List&lt;Integer&gt; sums = new ArrayList&lt;&gt;(leftSums);
    if (node.left == null &amp;&amp; node.right == null) {
        sums.add(newSum);
    }
    sums.addAll(rightSums);

    return sums;
}
</code></pre>
<p>except I'd look for alternative to <code>ArrayList</code> that allows more efficient list concatenation with a nicer API.</p>
    </div>