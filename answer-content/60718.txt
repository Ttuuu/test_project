<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>First off</h2>

<p>Never, ever use a <code>using</code> directive in a header as that can cause problems for your client code. As this is a code review I'm not going to comment on how to implement the C++11 features you mentioned. You can get help with this over at StackOverflow.</p>

<h2>Public interface</h2>

<p>Why is <code>node</code> a public type in <code>queue</code>? The user should never have to deal with the implementation details of <code>queue</code>. So I would recommend hiding it as a private or protected member class.</p>

<p>Your <code>front()</code> method returns a copy which is correct if called on a const declared queue. But on a non-const queue you're better of returning a reference to <code>T</code>.</p>

<h2>Correctness issues</h2>

<p>You should be aware of the fact that <code>new</code> can throw a <code>std::bad_alloc</code>. A destructor in C++ is allowed to throw an exception but it is generally discouraged. If an exception is thrown during handling of another exception the program will call std::terminate(), so if your destructor throws it can throw during stack unwinding and your program will terminates. Also if an exception is thrown from the destructor during a delete operation then the memory of the class may never be freed depending on the implementation of the delete operator. In short you are better off not throwing from the destructor. Not only that, your destructor actually leaks the allocated node which is never used.</p>

<p>Your <code>pop()</code> method also leaks memory through <code>tmp</code> if <code>elements!=0</code> which it always is because you throw an exception if <code>elements==0</code>. </p>

<p>A correct <code>pop()</code> method should be written like this:</p>

<pre><code>template &lt;typename T&gt;
void  queue&lt;T&gt;::pop() {
    if(head == nullptr)
        throw std::runtime_error("Invalid Action");

    node* remove = head;
    head = head-&gt;next;
    delete remove;

    --elements;
}
</code></pre>

<p>You are also unnecessarily allocating new nodes at many places.</p>

<p>Your <code>node()</code> constructs a <code>T(0)</code> in all cases which is not necessarily possible for all types a user may use as template argument. As Jerry also states this is incorrect. However Jerry's suggested solution to use <code>T()</code> instead requires that <code>T</code> be default-constructible without side-effects. This is not always true and you're better off using <code>std::aligned_storage&lt;sizeof(T)&gt;</code> like this:</p>

<pre><code>template&lt;typename T&gt;
struct node {
    std::aligned_storage_t&lt;sizeof(T)&gt; data;
    bool has_data{ false };
    node *next;

    node()
        : next(nullptr) 
    {}

    node(T const&amp; value, node* next)
        : next(next)
    {
        new (&amp;data) T(value);
        has_data = true; // just incase the constructor throws.
    }

    node(T&amp;&amp; value, node* next)
        : next(next)
    {
        new (&amp;data) T(std::move(value));
        has_data = true;
    }

    T&amp; getdata(){
        if (!has_data)
            throw std::runtime_error("error no data");
        return *reinterpret_cast&lt;T*&gt;(&amp;data);
    }

    ~node(){
        if (has_data)
            getdata().~T();
    }
};
</code></pre>

<p>This means that you can create nodes without actually running the constructor or initializing the node data.</p>

<h2>Style suggestion</h2>

<p>Prefer to test on what you need and not an invariant of what you need.</p>

<pre><code>template &lt;typename T&gt;
T queue&lt;T&gt;::front() const {
    if(elements == 0)
        throw std::runtime_error("Invalid Action");
    return head-&gt;data;
}
</code></pre>

<p>Is better written like this:</p>

<pre><code>template &lt;typename T&gt;
T queue&lt;T&gt;::front() const {
    if(head == nullptr)
        throw std::runtime_error("Invalid Action");
    return head-&gt;data;
}
</code></pre>

<p>Also you never call the <code>node</code> constructor with a non-null <code>*next</code> why not change the constructor to simplify usage?</p>

<h2>Use sentinels</h2>

<p>A sentinel node is an easy way to get around special casing the null list. Read more here: <a href="http://en.wikipedia.org/wiki/Sentinel_node" rel="noreferrer">Sentinel Node</a>.</p>

<h2>Performance</h2>

<p>The poor locality of reference due to linked lists can be mostly mitigated with a <a href="http://en.wikipedia.org/wiki/Memory_pool" rel="noreferrer">memory pool / fixed-size allocator</a>. As the queue is popped at the front, any form of naive vector use is out of the question. </p>

<p>If the maximum number of elements is known at compile time, a <a href="http://en.wikipedia.org/wiki/Circular_buffer" rel="noreferrer">Circular Buffer</a> will be your best choice. With some work you can construct a dynamically expanding circular buffer and resizing it would be no more costly than resizing a vector which would leave you with amortized \$\mathcal{O}(n)\$ time to fill a queue of size \$n\$. I believe this is the best approach for performance.</p>
    </div>