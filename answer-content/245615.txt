<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Don't forget to <code>#include &lt;algorithm&gt;</code></h1>
<p>You have to <code>#include &lt;algorithm&gt;</code> to get <code>std::shuffle</code>.</p>
<h1>Move <code>struct Node</code> and <code>enum class Color</code> inside <code>struct RBTree</code></h1>
<p>A <code>Node</code> is just an implementation detail of <code>RBTree</code>. It is better to move it inside <code>struct RBTree</code>. This also ensures you can just write <code>Node</code> instead of <code>Node&lt;T&gt;</code> everywhere. The same goes for <code>Color</code>. In fact, <code>Color</code> is just a property of a <code>Node</code>, so it could be moved into <code>struct Node</code>, but in this case it would just involve unnecessary typing.</p>
<p>This is how it looks:</p>
<pre><code>template &lt;typename T&gt;
struct RBTree {
    enum class Color {
       Red,
       Black,
    };

    struct Node {
        T key;
        Color color;
        std::unqiue_ptr&lt;Node&gt; left;
        ...
    };

    std::unique_ptr&lt;Node&gt; root;

private:
    ...
};
</code></pre>
<p>There is a slight difficulty changing the <code>operator&lt;&lt;</code> overload for <code>Node</code>, because <code>Node</code> is a <a href="https://en.cppreference.com/w/cpp/language/dependent_name" rel="nofollow noreferrer">dependent name</a> of <code>RBTree&lt;T&gt;</code>. To make it compile, you have to add <code>typename</code> before <code>RBTree&lt;T&gt;::Node</code>:</p>
<pre><code>template &lt;typename T&gt;
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, typename RBTree&lt;T&gt;::Node *node) {
    ...
}
</code></pre>
<h1>The public <code>Search()</code> function should not return a <code>Node *</code></h1>
<p><code>Node</code>s are just an implementation detail of your tree. By exposing this, it allows a user of your tree to make modifications to a <code>Node</code> that could cause the tree to become corrupted. I would make it return the key found in the tree as a <code>const T*</code> instead:</p>
<pre><code>const T* Search(const T&amp; key) {
    auto z = Search(root.get(), key);
    return z ? &amp;z-&gt;key : nullptr;
}
</code></pre>
<p>Another option is to return the key by value, and use <code>std::optional&lt;T&gt;</code> so you can inform the caller that the key was not in the tree:</p>
<pre><code>std::optional&lt;T&gt; Search(const T&amp; key) {
    auto z = Search(root.get(), key);
    return z ? std::make_optional(z-&gt;key) : nullopt;
}
</code></pre>
<p>You have to modify <code>Delete()</code> slightly to compensate for this.</p>
<h1>Make functions that do not modify the tree <code>const</code></h1>
<p>Make functions that do not change the tree <code>const</code>, so the compiler can generate better code, and will also allow you to call those functions on a <code>const RBTree</code>. The functions relating to searches can all be marked <code>const</code>:</p>
<pre><code>const T* Search(const T&amp; key) const { ... }
Node* Search(Node* x, const T&amp; key) const { ... }
Node* Minimum(Node* x) const { ... }
</code></pre>
<h1>Some unnecessary code</h1>
<p>I see some lines of code that basically do nothing and could be simplified. For example, in <code>Delete()</code>:</p>
<pre><code>auto pz = Transplant(z, std::move(z-&gt;right));
auto upz = std::unique_ptr&lt;Node&gt;(pz);
</code></pre>
<p>And afterwards, <code>upz</code> is no longer used. The above can be simplified to:</p>
<pre><code>delete Transplant(z, std::move(z-&gt;right));
</code></pre>
    </div>