<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that the algorithm only ever <strong>compares</strong> distances never using their actual value.</p>

<p>This means that you can speed up your algorithm significantly by directly comparing the <em>squares</em> of the distances instead. This works because the <code>sqrt</code> function is monotonic and thus <code>sqrt(a) &lt; sqrt(b)</code> if and only if <code>a &lt; b</code>.</p>

<p>This allows to change your <code>DouglasPeuckerReduction()</code> function to this:</p>

<pre><code>internal static void DouglasPeuckerReduction(float[] points, int firstPoint, int lastPoint, Double toleranceSquared, ref List&lt;int&gt; pointIndexsToKeep)
{
    float maxDistanceSquared = 0, tmp = 0, areaSquared = 0, X = 0, Y = 0, bottomSquared = 0, distanceSquared = 0;
    int indexFarthest = 0;

    unsafe
    {
        fixed (float* samples = points)
        {
            for (int i = firstPoint; i &lt; lastPoint; ++i)
            {
                //Perpendicular distance 
                tmp = 0.5f * ((lastPoint - i) * (firstPoint - i) + (*(samples + lastPoint) - *(samples + i)) * (*(samples + firstPoint) - *(samples + i)));
                //Abs
                areaSquared = tmp * tmp;
                X = (firstPoint - lastPoint);
                Y = (*(samples + firstPoint) - *(samples + lastPoint));
                bottomSquared = X * X + Y * Y;
                distanceSquared = areaSquared / bottomSquared;

                if (distanceSquared &gt; maxDistanceSquared)
                {
                    maxDistanceSquared = distanceSquared;
                    indexFarthest = i;
                }
            }
        }
    }

    if (maxDistanceSquared &gt; toleranceSquared &amp;&amp; indexFarthest != 0)
    {
        //Add the largest point that exceeds the tolerance
        DouglasPeuckerReduction(points, firstPoint, indexFarthest, toleranceSquared, ref pointIndexsToKeep);
        pointIndexsToKeep.Add(indexFarthest);
        DouglasPeuckerReduction(points, indexFarthest, lastPoint, toleranceSquared, ref pointIndexsToKeep);
    }
}
</code></pre>

<p>and call it with the tolerance squared and you'll get the same result in almost half the time. Note that your special <code>Sqrt</code> function is not used anymore and can now be removed.</p>

<p>Also note that I changed the order in which the <code>pointsToKeep</code> list is populated in the last three lines. This adds the indices in order and allows you to remove the sorting step in line 83 which should also save you some time.</p>
    </div>