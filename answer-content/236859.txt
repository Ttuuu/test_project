<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm agree with @TobySpeight's <a href="https://codereview.stackexchange.com/a/236838/203649">answer</a> so I only focus on refactoring your <code>if else</code> code:</p>

<blockquote>
<pre><code>String binx = Integer.toBinaryString(x);
String biny = Integer.toBinaryString(y);
int dif = 0;
StringBuilder sb = new StringBuilder();
if (binx.length() &gt; biny.length()) {
    dif = binx.length() - biny.length();
    for (int i = 0; i &lt; dif; i++) {
          sb.append(0);      
    }
    biny = sb.toString().concat(biny);
} else if (biny.length() &gt; binx.length()) {
       dif = biny.length() - binx.length();
       for (int i = 0; i &lt; dif; i++) {
            sb.append(0);      
       }
       binx = sb.toString().concat(binx);
}
</code></pre>
</blockquote>

<p>You can store the two String in one array and use them by index:</p>

<pre><code>String[] bins =  { Integer.toBinaryString(x), Integer.toBinaryString(y) };
int[] lengths =  { bin[0].length(), bin[1].length() };
</code></pre>

<p>This can be simplified noting that the same block will be executed in both branchs if the absolute difference between <code>binx</code> and <code>biny</code> is not 0 so you can calculate <code>abs</code> of difference rewriting the block like below:</p>

<pre><code>int dif = lengths[0] - lengths[1];
if (Math.abs(dif) != 0) {
    String s = String.join("", Collections.nCopies(dif, "0"));
    int i = dif &gt; 0 ? 1 : 0;
    bins[i] = s + bins[i];
}
</code></pre>

<p>I used <code>String.join</code> and <code>Collections.ncopies</code> methods to obtain a string composed by n '0' chars.</p>

<p>Below the complete code of the method:</p>

<pre><code>public static int hammingDistance(int x, int y) {
    String[] bins =  { Integer.toBinaryString(x), Integer.toBinaryString(y) };
    int[] lengths =  { bins[0].length(), bins[1].length() };

    int dif = lengths[0] - lengths[1];
    if (Math.abs(dif) != 0) {
        String s = String.join("", Collections.nCopies(dif, "0"));
        int i = dif &gt; 0 ? 1 : 0;
        bins[i] = s + bins[i];
    }

    int dist = 0;
    for (int i = 0; i &lt; lengths[0]; ++i) {
        if (bins[0].charAt(i) != bins[1].charAt(i)) {
            ++dist;
        }    
    }

    return dist;
}
</code></pre>
    </div>