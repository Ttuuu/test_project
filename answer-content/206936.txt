<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a very nice and clean implementation and looks like there's not much to complain about but I have a few thoughts.</p>

<hr>

<blockquote>
  <p>One thing I'm undecided on is restricting <code>T</code> to be <code>ICompareable&lt;T&gt;</code>. While this sends a strong signal about the requirements of <code>T</code> when using the default comparer, it's unnecessarily restrictive in the case where the user wants to provide their own comparer.</p>
</blockquote>

<p>I wouldn't say this is <em>unnecessarily restrictive</em> and in the .NET world this is an established way for such things. I as a seasoned C# user woulnd't expect anything else there but exactly this interface for providing my own logic. This feels the most natural thing to do to me - and very likely to others too. I even have small utility for creating them. <em>(You can look for <code>ComparerFactory</code> <a href="https://codereview.stackexchange.com/questions/206371/preparing-tabular-data-to-be-sent-as-json">here</a>.)</em></p>

<hr>

<p>Some tiny nitpicks...</p>

<ul>
<li>The <code>Empty</code> property should be called <code>IsEmpty</code> as the former one is not precise enough and suggests returning an empty <code>MinHeap&lt;T&gt;</code> rather then being a flag.</li>
<li><p>You can simplify the <code>Swap</code> operation with tuples:</p>

<pre><code>private void Swap(int i, int j)
{
    (data[j], data[i]) = (data[i], data[j]);        
}
</code></pre></li>
</ul>

<hr>

<p>With the comparer you could go <em>insane</em> and add a decorator wrapping the comparisons and translating them to more friednly operators <code>&lt;</code> and <code>&gt;</code></p>

<pre><code>internal class Comparable&lt;T&gt; : IComparable&lt;T&gt;
{
    private readonly T _value;
    private readonly IComparer&lt;T&gt; _comparer;

    public Comparable(T value, IComparer&lt;T&gt; comparer)
    {
        _value = value;
        _comparer = comparer;
    }

    public int CompareTo(T other) =&gt; _comparer.Compare(_value, other);

    public static implicit operator T(Comparable&lt;T&gt; comparable) =&gt; comparable._value;

    public static bool operator &lt;(Comparable&lt;T&gt; left, Comparable&lt;T&gt; right) =&gt; left.CompareTo(right._value) &lt; 0;

    public static bool operator &gt;(Comparable&lt;T&gt; left, Comparable&lt;T&gt; right) =&gt; left.CompareTo(right._value) &gt; 0;
}
</code></pre>

<p>When you then replace the <code>T</code> with it for <code>List&lt;Comparable&lt;T&gt;&gt; data</code>, you'll be able to write a very nice looking conditions:</p>

<blockquote>
<pre><code>comparer.Compare(data[left], data[largest]) &lt; 0
</code></pre>
</blockquote>

<p>will become:</p>

<pre><code> data[left] &lt; data[largest]
</code></pre>

<p>and the <code>implicit</code> cast will allow you to return the value without additional effort so here nothing changes:</p>

<blockquote>
<pre><code>  public T Peek()
  {
      if (Empty)
      {
          throw new InvalidOperationException("Cannot peek empty heap");
      }
      return data[0];
  }
</code></pre>
</blockquote>

<p>Example: (I'm not sure I didn't broke anything, I haven't run the tests)</p>

<pre><code>public sealed class MinHeap&lt;T&gt;
{
    private readonly IComparer&lt;T&gt; comparer;
    private readonly List&lt;Comparable&lt;T&gt;&gt; data;

    /// &lt;summary&gt;
    /// Returns the number of items in the heap.
    /// &lt;/summary&gt;
    public int Count =&gt; data.Count;

    /// &lt;summary&gt;
    /// Returns &lt;see langword="true"/&gt; if the heap is empty, otherwise
    /// &lt;see langword="false"/&gt;.
    /// &lt;/summary&gt;
    public bool Empty =&gt; data.Count == 0;


    /// &lt;summary&gt;
    /// Creates an empty &lt;see cref="MinHeap{T}"/&gt; that uses the default comparer.
    /// &lt;/summary&gt;
    public MinHeap() : this(Comparer&lt;T&gt;.Default) { }

    /// &lt;summary&gt;
    /// Creates an empty &lt;see cref="MinHeap{T}"/&gt; with the specified comparer.
    /// &lt;/summary&gt;
    /// &lt;param name="comparer"&gt;
    /// The comparer used to determine the order of elements in the heap.
    /// &lt;/param&gt;
    /// &lt;exception cref="ArgumentNullException"&gt;
    /// If &lt;paramref name="comparer"/&gt; is &lt;see langword="null"/&gt;.
    /// &lt;/exception&gt;
    public MinHeap(IComparer&lt;T&gt; comparer)
    {
        this.comparer = comparer ?? throw new ArgumentNullException("comparer");
        data = new List&lt;Comparable&lt;T&gt;&gt;();
    }

    /// &lt;summary&gt;
    /// Creates a new &lt;see cref="MinHeap{T}"/&gt; containing the elements of
    /// &lt;paramref name="src"/&gt;.
    /// &lt;/summary&gt;
    /// &lt;param name="collection"&gt;
    /// The elements to add to the heap.
    /// &lt;/param&gt;
    /// &lt;exception cref="ArgumentNullException"&gt;
    /// If &lt;paramref name="collection"/&gt; is &lt;see langword="null"/&gt;.
    /// &lt;/exception&gt;
    public MinHeap(IEnumerable&lt;T&gt; collection) : this(collection, Comparer&lt;T&gt;.Default) { }

    /// &lt;summary&gt;
    /// Creates a new &lt;see cref="MinHeap{T}"/&gt; containing the elements of
    /// &lt;paramref name="collection"/&gt;.
    /// &lt;/summary&gt;
    /// &lt;param name="collection"&gt;
    /// The elements to add to the heap.
    /// &lt;/param&gt;
    /// &lt;param name="comparer"&gt;
    /// The comparer used to determine the order of elements in the heap.
    /// &lt;/param&gt;
    /// &lt;exception cref="ArgumentNullException"&gt;
    /// If &lt;paramref name="collection"/&gt; or &lt;paramref name="comparer"/&gt; are
    /// &lt;see langword="null"/&gt;.
    /// &lt;/exception&gt;
    public MinHeap(IEnumerable&lt;T&gt; collection, IComparer&lt;T&gt; comparer)
    {
        this.comparer = comparer ?? throw new ArgumentNullException("comparer");
        data = new List&lt;Comparable&lt;T&gt;&gt;(collection.Select(c =&gt; new Comparable&lt;T&gt;(c, comparer)));
        for (int i = Count / 2; i &gt;= 0; --i)
        {
            SiftDown(i);
        }
    }

    /// &lt;summary&gt;
    /// Gets the item at the top of the heap.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;The item at the top of the heap.&lt;/returns&gt;
    /// &lt;exception cref="InvalidOperationException"&gt;
    /// If the heap is empty.
    /// &lt;/exception&gt;
    public T Peek()
    {
        if (Empty)
        {
            throw new InvalidOperationException("Cannot peek empty heap");
        }
        return data[0];
    }

    /// &lt;summary&gt;
    /// Removes the item at the top of the heap and returns it.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;The item at the top of the heap.&lt;/returns&gt;
    /// &lt;exception cref="InvalidOperationException"&gt;
    /// If the heap is empty.
    /// &lt;/exception&gt;
    public T Pop()
    {
        if (Empty)
        {
            throw new InvalidOperationException("Cannot pop empty heap");
        }
        T result = data[0];
        data[0] = data[Count - 1];
        data.RemoveAt(Count - 1);
        SiftDown(0);
        return result;
    }

    /// &lt;summary&gt;
    /// Inserts the specified item into the heap.
    /// &lt;/summary&gt;
    /// &lt;param name="item"&gt;The item to insert.&lt;/param&gt;
    public void Push(T item)
    {
        data.Add(new Comparable&lt;T&gt;(item, comparer));
        SiftUp(Count - 1);
    }

    /// &lt;summary&gt;
    /// Replaces the item at the top of the heap with &lt;paramref name="item"/&gt;
    /// and returns the old top.
    /// &lt;/summary&gt;
    /// &lt;param name="item"&gt;The item to insert.&lt;/param&gt;
    /// &lt;returns&gt;The previous top of the heap.&lt;/returns&gt;
    /// &lt;exception cref="InvalidOperationException"&gt;
    /// If the heap is empty.
    /// &lt;/exception&gt;
    /// &lt;remarks&gt;
    /// This operation is useful because it only needs to rebalance the heap
    /// once, as opposed to two rebalances for a pop followed by a push.
    /// &lt;/remarks&gt;
    public T Replace(T item)
    {
        if (Empty)
        {
            throw new InvalidOperationException("Cannot replace on empty heap");
        }
        T result = data[0];
        data[0] = new Comparable&lt;T&gt;(item, comparer);
        SiftDown(0);
        return result;
    }

    private void SiftUp(int index)
    {
        while (index &gt; 0)
        {
            int parent = (index - 1) / 2;
            if (comparer.Compare(data[index], data[parent]) &lt; 0)
            {
                Swap(index, parent);
                index = parent;
            }
            else
            {
                return;
            }
        }
    }

    private void SiftDown(int i)
    {
        while (i &lt; Count)
        {
            int left = 2 * i + 1;
            int right = 2 * i + 2;
            int largest = i;
            if (left &lt; Count &amp;&amp; data[left] &lt; data[largest])
            {
                largest = left;
            }
            if (right &lt; Count &amp;&amp; data[right] &lt; data[largest])
            {
                largest = right;
            }


            if (largest == i)
            {
                return;
            }
            Swap(i, largest);

            i = largest;
        }
    }

    private void Swap(int i, int j)
    {
        (data[j], data[i]) = (data[i], data[j]);
    }
}
</code></pre>
    </div>