<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I strongly recommend to increment <code>pc</code> once, right after the instruction is loaded:</p>

<pre><code>    opcode = memory[pc] &lt;&lt; 8 | memory[pc + 1];  // get instruction
    pc += 2;
</code></pre>

<p>First, that's how the do in real life, and second, doing that in every instruction bloats the code and is prone to errors.</p>

<p>Just make sure to <em>not</em> increment <code>pc</code> in <code>case 0x00EE</code>.</p></li>
<li><p>The indirect store instructions (via <code>I</code>) may access illegal memory. I am not versed with chip8 ISA, and I don't know how it is supposed to behave in such situation. The emulation surely is in the position to catch illegal accesses; otherwise you are open to UB.</p>

<p>It seems that some implementations set <code>VF</code> if <code>I</code> gets beyond <code>0xfff</code>. Looks prudent (yet still vulnerable).</p></li>
<li><p>I definitely don't like a huge C-style <code>case</code>, encompassing the entire emulation. Consider an <code>Instruction</code> class, which knows how to execute itself, and make the instruction decoding into a factory.</p></li>
<li><p>Once this change is made, <code>emulate_cycle</code> may (and should) be split into the natural stages: <code>fetch</code>, <code>decode</code>, and <code>execute</code> (and possibly <code>commit</code>).</p></li>
<li><p><code>0Fx0A</code> does not look correct. According to the spec, an instruction is <em>halted</em> until the next key event. Your implementation doesn't halt, but busy loops. In any case, <code>return</code> is not warranted, and complicates the design.</p></li>
<li><p><code>main</code> as a clock source looks dubious. Consider setting up an alarm timer.</p></li>
</ul>
    </div>