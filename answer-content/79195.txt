<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>To avoid bugs like one mentioned by @janos, a common recommendation is to express <code>operator!=</code> in terms of <code>operator==</code>:</p>

<pre><code>bool operator!=(const Complex a_, const Complex b_) {
    return !(a_ == b_);
}
</code></pre></li>
<li><p>The same recommendation goes for many other operators, for example <code>operator+</code> can and should be expressed in terms of <code>operator+=</code>:</p>

<pre><code>Complex operator+(Complex a_, const Complex b_) {
    return a_ += b_;
}
</code></pre>

<p>This enforces an important invariant (<code>a = b + c</code> <em>must</em> have the same effect as <code>a = b; a += c</code>), and removes the need to call getters and setters.</p></li>
<li><p>Speaking of getters and setters, in your case they serve no purpose other than hiding names. The access to private members is still unrestricted.</p></li>
<li><p>As a mathematician, I would expect <code>Complex</code> to have at least more methods,
namely <code>norm</code> and <code>conjugate</code>.</p></li>
<li><p><code>const</code> qualification of pass-by-value parameters is pointless.</p></li>
</ul>
    </div>