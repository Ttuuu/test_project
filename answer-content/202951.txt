<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The recursion results in \$O(n)\$ space complexity (each recursive invocation consumes some stack), so technically you did not fulfill the requirement of _not using extra space. Since it is a tail recursion, it can easy to eliminate. Unfortunately, Java doesn't do it, so you have to eliminate it manually. Fortunately, it is just a mechanical rewrite.</p></li>
<li><p>The time complexity is \$O(n^2)\$. There is not much to do with the current approach. There is however a linear solution: an element at index <code>k</code> goes to either <code>2k</code>, if <code>k &lt; n/2</code>, or <code>2k - n + 1</code> otherwise. Convince yourself that this permutation has no loops, and just follow a chain of indices.</p></li>
<li><p>The loop</p>

<pre><code>for (int i = swapInd2 ; i &gt; swapInd1; i--) {
    arr[i] = arr[i - 1];
}
</code></pre>

<p>shifts a range, and deserves to be a function on its own (<code>shift_range</code>perhaps).</p></li>
</ul>
    </div>