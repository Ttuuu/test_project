<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The biggest reason you flunked was probably that you wrote two identical functions: <code>bishopFindPhoneNumbers(bishop, start, path)</code> and <code>knightFindPhoneNumbers(knight, start, path)</code>. You didn't realize that since their code was identical, you didn't need to write both of them.</p>

<p>Just writing</p>

<pre><code>def findPhoneNumbers(adjacencies, start, path=[]):
    path += [start]
    if len(path) == 7:
        return [path]
    if not adjacencies.has_key(start):
        return []
    paths = []
    for node in adjacencies[start]:
        if node:
            newpaths = findPhoneNumbers(adjacencies, node, path)
            for newpath in newpaths:
                paths.append(newpath)
    return paths

# ...

findPhoneNumbers(bishop, start)
findPhoneNumbers(knight, start)
</code></pre>

<p>might have been all they were looking for.</p>

<p>Some style notes, though:</p>

<ul>
<li><p><code>if not adjacencies.has_key(start)</code> would be better written as <code>if start not in adjacencies</code>.</p></li>
<li><p><code>if node</code> can't ever be false, so don't write it.</p></li>
<li><p><code>['2', '3', '4', '5', '6', '7', '8', '9']</code> should set off your sense of code smell. Even <code>for start in "23456789":</code> would have been preferable.</p></li>
<li><p>Finally,</p>

<pre><code>    newpaths = findPhoneNumbers(adjacencies, node, path)
    for newpath in newpaths:
        paths.append(newpath)
</code></pre></li>
</ul>

<p>should be written as</p>

<pre><code>        paths += findPhoneNumbers(adjacencies, node, path)
</code></pre>

<p>Actually, a candidate's not knowing that <code>+=</code> concatenates lists in Python would also be cause to fail the interview, where I'm from. So it probably wasn't <em>just</em> the repetition of code that was the problem.</p>
    </div>