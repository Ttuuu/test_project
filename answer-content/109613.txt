<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm looking at this class and I'm confused.<br>
The reason why is that I'm doing web programming so a dialog can be asked on different sessions.<br>
In that case this class is useless.<br></p>

<p>In stead of holding your <code>ProgressDialog</code> and <code>AlertDialog</code> in your class as static variable, just return them in the method.<br>
Then your </p>

<pre><code>public static void hideLoader()
</code></pre>

<p>should be changed to :</p>

<pre><code>public static void hideLoader(ProgressDialog dialog)
</code></pre>

<p>So with a small refactoring you create a class what could be good for multiple users application.<br>
Other advantage is you can call the method multiple times, where in your setup this was impossible and even dangereous.</p>

<h2>Naming your class :</h2>

<p>A class <code>Utils</code> is just so poor chosen.<br>
If you see a class name like that, what do you expect what's in it?<br>
It could be Utils for Strings like <a href="https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html">StringUtils</a> or more like <a href="https://commons.apache.org/proper/commons-math/javadocs/api-2.2/org/apache/commons/math/util/MathUtils.html">MathUtils</a>?<br>
As you see at this name, you already know what to expect from it.<br>
A better name could be <code>DialogUtil</code></p>

<h2>Constants :</h2>

<p>In android there is a class <a href="http://developer.android.com/reference/android/R.string.html"><code>R.string</code></a> who have a lot of constants.<br>
In stead of doing this :</p>

<pre><code>builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
</code></pre>

<p>You could do :</p>

<pre><code>builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
</code></pre>

<p>It's cleaner code who saves a little amount of memory because you don't need to recreate the <code>String</code> every time you call the method.</p>
    </div>