<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As Loki Astari points out, there is a complete Tic Tac Toe strategy.  However, I'm going to ignore that and just review the code that you posted.  The main reason is that I think that a code review is more productive if you can compare code that at least follows the same algorithm.  </p>

<p>I would get rid of the global variables and replace them with class variables.  </p>

<p>The <code>gameWin</code> variable might better be an <code>enum</code> than an <code>int</code>.  The value of the <code>enum</code> is self-commenting.  With an <code>int</code>, you need to remember what each value means.  Same thing for <code>turnFirst</code>, although you could also just make that a boolean <code>playerFirst</code>.  </p>

<p>I would replace the nine block variables with a single array.  Something like </p>

<pre><code>const int ROW_SIZE = 3;
const int COLUMN_SIZE = 3;
const int BOARD_SIZE = ROW_SIZE * COLUMN_SIZE;
char blocks[BOARD_SIZE+1] = "123456789";
</code></pre>

<p>Why check if <code>playerTurn</code> is false/true in the check functions?  If it's necessary, you could just do </p>

<pre><code>if ( ! playerTurn ) {  // == false
    return NO_WIN; // assuming NO_WIN is one of the enum values
}
if ( playerTurn ) {  // == true
    return NO_WIN;
}
</code></pre>

<p>but it doesn't seem necessary.  </p>

<p>The two check functions could easily be one <code>checkWin()</code> function.  Also, you could add <code>checkRow()</code> and <code>checkColumn()</code> functions to reduce the copy and paste code.  </p>

<pre><code>bool checkColumn(char *column, char toCheck) {
    for ( int rowStart = 0; rowStart &lt; BOARD_SIZE; rowStart += ROW_SIZE ) {
        if ( column[rowStart] != toCheck ) {
            return false;
        }
    }

    return true;
}

bool checkWin(char toCheck) {
    // the first row starts at the same place as the board
    // the subsequent rows start ROW_SIZE blocks after the last
    for ( int offset = 0; offset &lt; BOARD_SIZE; offset += ROW_SIZE ) {
        if ( checkRow(blocks + offset, toCheck) ) {
          return true;
        }
    }

    // the first column starts the same place as the board
    // subsequent columns start one more
    for ( int offset = 0; offset &lt; ROW_SIZE; offset++ ) {
        if ( checkColumn(blocks + offset, toCheck) ) {
          return true;
        }
    }

    // both diagonals must include the center block
    if ( blocks[4] != toCheck ) {
        return false;
    }

    if ( blocks[0] == toCheck &amp;&amp; blocks[8] == toCheck ) {
        return true;
    }

    if ( blocks[6] == toCheck &amp;&amp; blocks[2] == toCheck ) {
        return true;
    }

    return false;
}
</code></pre>

<p>You return 0 from <code>computerAI()</code> but you never use the result.  Just make it a void.  You don't need to return at the end, only if you want to abort early.  Same thing with <code>checkPlayerInput()</code>.  </p>

<p>The <code>checkPlayerInput()</code> function should probably be called <code>isInputValid()</code> and can be made shorter:</p>

<pre><code>bool isInputValid(int playerChoice) {
    if ( playerChoice == blocks[playerChoice-1] ) {
        blocks[playerChoice-1] = playerLetter;
        return true;
    }

    return false;
}
</code></pre>

<p>It's odd to use a global variable for <code>playerChoice</code>.  You'd usually just pass it into the functions that needed it.  </p>

<p>In your <code>computerAI()</code> function, why not just return once a move has been found rather than setting the <code>playerTurn</code> boolean?  Something like </p>

<pre><code>void computerAI() {
    if ( computerLetter == blocks[0] &amp;&amp; computerLetter == blocks[1] &amp;&amp; '3' == blocks[2] ) {
        blocks[2] = computerLetter;
        status = COMPUTER_WIN;
        return;
    }
</code></pre>

<p>Also note that X is always the player that goes first in standard Tic Tac Toe rules.  So if the player can sometimes go second, then the player should sometimes be O.  </p>

<p>The computer's move should not depend on the player's choice but on the state of the board.  </p>

<p>In the <code>computerAI()</code> function, you have a do while loop on code that should only be run once.  Fortunately, I think that it will only run once, but there is still no reason to enclose it in a do while.  That code only runs if the player did not choose 3, 6, or 9, which seems like a bug.  </p>

<p>You don't have to check for a computer win separately.  You can do it as part of generating the computer's move.  </p>

<p>You never <code>checkComputerInput()</code>, so get rid of that function.  </p>

<p>You can check for ties with a for loop:</p>

<pre><code>bool checkTie() {
    for ( int offset = 0; offset &lt; BOARD_SIZE; offset++ ) {
        // if any block is still numbered as its count, then there are moves left
        if ( '1' + offset == blocks[offset] ) {
            return false;
        }
    }

    return true;
}
</code></pre>

<p>Even easier, just check if the block is any number.  Or remember that a tie will always occur after the <code>BOARD_SIZE</code> move.  Tracking a counter is easier than checking each block after every move.  </p>

<p>There's no reason for the computer to pick its first move randomly.  Picking the center square is the optimal move.  </p>

<p>Almost everything in the main function should be moved into a method (e.g. play) on an object.  One, this will provide access to the previously global variables that are now part of the object.  Two, this will allow you to easily move the class into a different program if you want.  For example, you might want to offer two or more games in the same program.  </p>

<p>You have two special checks to see if the player or the computer is going first and then special code to handle each situation.  It would be easier to just check if the computer is first.  If the computer is first, process the computer's move.  Then in either case display the board.</p>

<p>Your loop processes one move at a time and checks whose turn it is.  It would be better if it processed two moves at a time:  first the player and second the computer.  That would eliminate the need for an if.  Abort if either makes a winning move:</p>

<pre><code>if ( COMPUTER_WIN == status ) {
    cout &lt;&lt; "The computer wins!" &lt;&lt; endl;
    ++computerScore;
    break;
}
</code></pre>

<p>If the player choice is not valid, then redo the player's choice.  </p>

<pre><code>while ( ! ( cin &gt;&gt; playerChoice ) &amp;&amp; ! isInputValid(playerChoice) ) {
</code></pre>

<p>You can end the game after nine (BOARD_SIZE) moves.  </p>
    </div>