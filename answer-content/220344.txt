<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of looking for cool new features of Java i would strongly suggest that you concentrate on the basics of Java: Objects:</p>

<h2>Think in Objects:</h2>

<p>So far you have identified these Objects: <code>Map</code>, a <code>Cell</code> and an <code>Island</code> - so make some Objects of that type.</p>

<pre><code>Map map = new Map(int[][] src);
Island island = map.extractIsland();
int diameter = island.getPerimater();
</code></pre>

<p>the <code>Map</code> needs some methods to properly extract the island</p>

<pre><code>Cell cell = getCellAt(int x, int y);
</code></pre>

<p>and a method to gain relationship between each <code>Cells</code> on the map:</p>

<pre><code>List&lt;Cell&gt; getNeighbours(Cell center);
</code></pre>

<p>and some elementary methods on the <code>Cell</code> class</p>

<pre><code>boolean isWater();
boolean isLand();
int getAmountCoasts();
</code></pre>

<p>if you would have these elementary Objects you can simply create readable Code - see this example:</p>

<pre><code>Cell center; //yes, here center.isLand() = true
List&lt;Cell&gt; neigbour = map.getNeighbours(center);
for (Cell neigbour: neigbours){
    if (neigbour.isWater()){
        center.addCoast();
    }
}
</code></pre>

<h2>once you are here you can use features from java 8</h2>

<pre><code>List&lt;Cell&gt; landCells = cells.stream.filter(Cell::isLand).collect(CollectorsToList());
int perimeter = landCells.stream.mapToInt(Cell::.getAmountCoasts).sum();
</code></pre>

<p>Hint: you better let the <code>Island</code> class handle that, see first hints - Responsibility for coastLine is within the <code>Island</code> class!)</p>

<h2>NOTE:</h2>

<p>it's hard to think in objects whenever you try minimal code snippets as suggested from leet code. if minimal code is required, look maybe you are interested at <a href="https://codegolf.stackexchange.com/">CodeGolf</a>...</p>
    </div>