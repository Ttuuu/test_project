<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code review. I want to start out by highlighting a few things that I like about this code. </p>

<p>One thing that I quite liked is handling the tie case first. It is often good to simplify logic as much as possible, and the tie case is a good spot of somewhere that you can simplify, rather than have three more elif lines. </p>

<p>It is also good to see handling of erroneous input from the user. This includes making minor corrections when it is clear what was intended: using the <code>.lower()</code> function to ensure that "Rock" and "rock" work the same. It also includes making clear to the user if they entered something from which you can't guess what they meant. In many ways the mark of a good programmer is how well they handle the unexpected. </p>

<p>There is a minor bug in that though: because the '-1' is after the else it will first complain that the input is invalid, and only then realise that it's the exit signal. (There is another minor bug in that it won't actually call <code>exit()</code> because it needs indenting in to the <code>if</code>, but I think that is probably just a copy paste error to codereview.) </p>

<p>Mast suggested in the comments that you really want to be using functions to help make the code less redundant. In general when you find yourself repeating things it is a good opportunity to think about using a function. For example before your <code>while</code> loop, have this function:</p>

<pre><code>def print_win(bot, user_choice):
    print("You win! I chose",bot," and you chose", user_choice , ", ", user_choice, " beats ", bot, "!")
</code></pre>

<p>Then when you win, you can just use </p>

<pre><code>print_win(bot, user_choice)
</code></pre>

<p>That way if you ever had to change the message (perhaps, say, to translate the program into another language) you could change all the win messages in one place. </p>

<p>You could also structure the program so that you separate out user input from the actual game, which also makes it easier to improve the game bit. If, for example, you had a function that tells you who won, then it would be easy to track a score over multiple rounds. With your set up, you'd have to update the score separately with every one of those ifs or elifs.</p>
    </div>