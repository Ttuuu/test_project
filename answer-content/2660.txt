<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Javascript is not my primary language, and neither am I game a programmer. With that being said this is mostly pseudo-codeish way as to how I would structure the game loop</p>

<pre><code>var game = Coaches.StartGame()

while(game.IsPlaying)
{
    var pitcher = game.CurrentPitcher;
    var batter = game.CurrentBatter;


    var ball = pitcher.Pitch();
    var swing = batter.HandlePitch(ball);

    var decision = Umpire.HandleSwing(swing);

    var isInningOver = Umpire.CallInning(decision, game);

    if(isInningOver)
    {
        var isGameOver = Umpire.CallGame(decision, game);

        if(isGameOver)
        {
            game = Umpire.EndGame(game);
        }
        else
        {
            game = Coaches.AdvaceInning(game);
        }
    }
    else
    {    
        var field = Coaches.SendBaseRunners(decision, game)
        game = Umpire.Advance(field);   
        //theoretically at this point you could need to check whether game/inning ended
        //from base runners getting thrown out if you want to support that 
        game = Coaches.NextBatter(game);
    }
}
</code></pre>

<p>Following this you have coaches starting a game and fielding players, with the Umpire affiliating the game.</p>

<p>This allow will allow you to have the logic of the game without any <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow">single responsibility principle</a> violations that none of the methods I've shown above would ever need to change for any reason other than their specific logic.</p>

<p>This is different from your current setup where there is shared responsibility such as the atBat method that is both scoring the bat outcome and scoring the game. </p>
    </div>