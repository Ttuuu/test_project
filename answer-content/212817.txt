<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The important flaw in your code is runtime complexity.  <code>reduce</code>, <code>indexOf</code> and <code>includes</code> all have runtimes that are linear (<b>O</b>(n)) in the size of the array.  You're running the latter two once for every iteration of <code>reduce</code>, giving a quadratic (<b>O</b>(n<sup>2</sup>)) runtime.  Doubling the length of the input will quadruple the running time.</p>

<p>A secondary flaw is excess regular human-brain complexity: it's more lines of code and data structures than are needed.  </p>

<p>The typical approach involves a single hash table to count duplicates and just two lines of code: one to count, one to filter:</p>

<pre><code>var countKeys = {};
values.forEach( value =&gt; countKeys[value.name] = (countKeys[value.name] || 0) + 1 )
const duplicates = values.filter( value =&gt; countKeys[value.name]&gt;1 );
</code></pre>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const values = [
  {
    name: 'Duplicate 1',
    value: [1,2,3],
  },
  {
    name: 'Duplicate 2',
    value: [1,2,3],
  },
  {
    name: 'Duplicate 1',
    value: [1,2,34],
  },
  {
    name: 'Duplicate 2',
    value: [1,2,3],
  },
  {
    name: 'Duplicate 2',
    value: [1,2,3],
  },
  {
    name: 'Not Duplicate',
    value: [1,2,3],
  },
];


var countKeys = {};
values.forEach( value =&gt; countKeys[value.name] = (countKeys[value.name] || 0) + 1 )
const duplicates = values.filter( value =&gt; countKeys[value.name]&gt;1 );
console.log(duplicates)</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;p&gt;</code></pre>
</div>
</div>

    </div>