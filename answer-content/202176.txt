<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ul>
<li>Nested functions are unusual; typically they would be neighbour functions instead. This ensures that all the context that each function needs is passed to it, making it easier to grasp the entire context involved in the processing in each function.</li>
<li><p>Python 3 supports <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type annotations</a>, which are a more explicit way of declaring input and output types. You can check that your code is properly annotated using <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a>, for example with this rather strict configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre></li>
<li>Longer variable names can make your code more readable. For example, I can't tell what <code>q</code> is without reading most of the code, and even then it might be unclear, especially since it's an "intermediate" variable (neither a parameter nor a return value).</li>
<li>You could use a set of constants to define the directions in a more human readable form such as <code>DIRECTION_WEST = (-1, 0)</code>.</li>
<li>Inlining such as <code>if foo: continue</code> is generally frowned upon, since it makes it harder to skim the code vertically.</li>
<li>Your docstring could include a definition of the problem, possibly by simply copying from the LeetCode website.</li>
<li>Python has exceptions, and it's recommended to use them rather than special return values to signal a problem.</li>
</ul>
    </div>