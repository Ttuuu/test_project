<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In this review, I'll omit the code that was not implemented by you.  At some point, you can try to figure out how it works and then replace it with your own implementation that can be reviewed here.</p>

<p>As a beginner, it's great to see that you've started using functions to increase modularity.  However, you can use more, as <code>main()</code> is still doing a lot of work.  You generally should just have it collect input, call other functions, and display something at the end.  Most of the other functions will perform <em>one</em> primary thing and usually shouldn't need to display anything.  Many of your conditionals in <code>main()</code> can be moved elsewhere, also making it easier to see what <code>main()</code> should really be doing itself.</p>

<p>The structure at this level also seems okay, but more can still be done.  For instance, there is probably a better way to alphabetize, without using your own function.  It looks like you're just needing to <em>sort</em> the characters, and if I'm not mistaken, you're attempting to implement bubble sort.  Either way, this is one of the slowest sorting algorithms around, and should be avoided for serious code like this.  Instead of using this function, you can use <a href="http://en.cppreference.com/w/cpp/algorithm/sort" rel="nofollow noreferrer"><code>std::sort()</code></a> from the standard library, which utilizes a quicker sorting algorithm called quicksort.</p>

<pre><code>std::sort(source.begin(), source.end());
</code></pre>

<p>The same applies to <code>scramble()</code>.  It looks like you're trying to shuffle the characters in the string, so you can instead use <a href="http://en.cppreference.com/w/cpp/algorithm/random_shuffle" rel="nofollow noreferrer"><code>std::random_shuffle()</code></a> (assuming you don't have access to C++11):</p>

<pre><code>std::random_shuffle(source.begin(), source.end());
</code></pre>

<p>(The linked pages should also tell you what <code>begin()</code> and <code>end()</code> are for.)</p>

<p>While it is great that you're trying to implement these things yourself, you should eventually learn how to utilize the standard library to help simplify your code.</p>

<p>I'll now cover some individual points for further simplification:</p>

<ul>
<li><p>You don't actually need function prototypes.  In order to avoid them, simply define <code>main()</code> below the other functions.  That way, it'll already be aware of them.</p></li>
<li><p>It is common for beginners to use <code>std::endl</code> excessively for displaying newlines.  What is not always told is that it does something else: flushes the buffer.  This is a slower operation by itself, and it's not something that's usually needed.</p>

<p>Instead, you can display newlines with <code>"\n"</code>:</p>

<pre><code>std::cout &lt;&lt; "some text\n\n";
</code></pre>

<p>This is equivalent to the <code>std::endl</code> version:</p>

<pre><code>std::cout &lt;&lt; "some text" &lt;&lt; std::endl &lt;&lt; std::endl;
</code></pre>

<p>More info about this can be found <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">here</a>.</p></li>
<li><p>You can "move" <code>doesFileExist()</code> to <code>main()</code> since file input is involved.  But instead of returning and using a <code>bool</code>, you can just terminate from <code>main()</code> if the file cannot be opened:</p>

<pre><code>if (!file)
{
    std::cerr &lt;&lt; "file cannot be opened";
    return EXIT_FAILURE;
}
</code></pre>

<p>Notes: <code>std::cerr</code> is the error output stream, and <code>EXIT_FAILURE</code> is a macro primarily used for returning a failed error code.</p></li>
</ul>
    </div>