<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have comments in the definition of <code>RingBuffer</code> on the value limits for some members, but there is nothing in the code that enforces that or checks to see if those limits are exceeded.</p>

<p>Why does <code>TryRead</code> take its parameter by <code>const int&amp;</code>?  The reference is unnecessary.  Just pass in the int.</p>

<p>Why is <code>MAX_SIZE</code> a macro?  It should be a <code>constexpr</code> (if your compiler supports it) or <code>static const int</code> if not.</p>

<p>In the <code>RingBuffer</code> constructor, you can combine the <code>reserve</code> and <code>assign</code> calls into one, and include it in the member initializer list.</p>

<p><code>Push</code> will happily and silently overwrite things that have been added to your ring buffer but not consumed.</p>

<p>The way your <code>Push</code> is set up, you can have multiple threads write to the same memory location (if, for instance, there are enough other calls to <code>Push</code> so that the value calculated for index wraps back around).</p>

<p>It is also possible for <code>mMaxReadIdx</code> to indicate a slot is available for reading when it isn't.  For example, thread A starts a Push, and gets a write index.  Thread B then starts another Push, gets a write index, stores its value and increments <code>mMaxReaddx</code> before thread A has stored its message.  The slot used by thread A will be readable by a <code>TryRead</code> but won't have data in it yet.</p>

<p><code>TryRead</code> can return the same message to multiple consumers, since each consumer has its own idea of where the bottom of the buffer is.</p>

<pre><code>RingBuffer::RingBuffer(int pNumOfConsumers): mVector(MAX_SIZE, nullptr)
</code></pre>
    </div>