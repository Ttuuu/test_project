<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You tagged this question "beginner", but that algothithm on geeksforgeeks is fairly advanced.  Are you sure you should be using it over the simple repeated addition or subtraction?  In fact, you're still doing repeated subtraction by 9 when you do this:</p>

<pre><code>while(divby8 &gt;= 9)
    {
        divby8 = divby8 - 9;
    }
</code></pre>

<p>Thus, you're not getting the full benefit of the bitwise algorithm.</p>

<p>I altered @Edward's code (all good suggestions there) to more faithfully implement the algorithm you linked.  The performance gain is significant -- timed on my machine at 0.018s for this vs 3.497s for @Edward's and 41.787s for @Edenia's.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;assert.h&gt;

int isDivby9(int x)
{
    // early bailout when x is 0, otherwise the factor of 2 loop does not terminate.
    if (x == 0) {
        return 1;
    }

    // eliminate factors of 2
    while (0 == (x &amp; 1)) {
        x &gt;&gt;= 1;
    }

    // repeatedly reduce the problem to testing whether (floor(x/8) - x%8) is divisible by 9
    // until we can use the trivial case of whether a number smaller than 9 is divisible by 9.
    // Note that x &amp; 7 is not equal to x % 8 for negative numbers,
    // nor is floor(x/8) appropriate for negative numbers.
    // The algorithm requires a truncation toward 0, not to the next lower integer like floor() or &gt;&gt; 3 does.
    while (x &gt;= 9) {
        x = (x &gt;&gt; 3) - (x &amp; 7);
    }

    return x == 0;
}

int main()
{
    for (int i=0; i &lt; 1000000; ++i)
        assert(isDivby9(i) == (i%9 == 0));
}
</code></pre>
    </div>