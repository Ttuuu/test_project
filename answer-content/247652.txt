<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>[AllowNull]</code> does seem to be exactly what you need. If slug was declared as:</p>
<pre><code>    private string? slug;
    [AllowNull]
    public string Slug 
    { 
        get
        {
            if(slug is null)
            {
                slug = Title.Slugify();
            }
            return slug;
        }
        set =&gt; slug = value;
    }
</code></pre>
<p>One of the answers suggest that allowing a property to have a non-nullable getter, but nullable setter is "atypical" and straying off the beaten path. But it's not quite true. Let's look at the UX, when using the <code>[AllowNull]</code>:</p>
<pre><code>// Creating a Post without setting a slug
Post post1 = new Post(title: "Foo bar");
string slug1 = post1.Slug; // slug = "foo-bar"

// Creating a Post by setting an explicit slug
Post post2 = new Post(title: "Foo bar 2) { Slug = "hello-world" };
string slug2 = post2.Slug; // slug = "hello-world"

// Creating a Post by setting an explicit nullable slug
string? slug = vm.Slug;    // maybe null
Post post3 = new Post(title: "Foo bar 3") { Slug = slug }; // note that we dont need the ! operator
string slug3 = post3.Slug; // slug3 = slug
</code></pre>
<p>No compiler warnings, no null forgiving operators. The user can set the property if they want to, or set it to a nullable value. But when they get the value, since the value will not be null (implementation detail), so the compiler won't ask to check for null (what the API user sees).</p>
<p>From the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/nullable-migration-strategies" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>you can apply a number of attributes: <code>AllowNull</code>, <code>DisallowNull</code>, <code>MaybeNull</code>, <code>NotNull</code>, <code>NotNullWhen</code>, <code>MaybeNullWhen</code>, and <code>NotNullIfNotNull</code> to completely describe the null states of argument and return values. That provides a great experience as you write code. You get warnings if a non-nullable variable might be set to null. You get warnings if a nullable variable isn't null-checked before you dereference it.</p>
</blockquote>
<p>The other answers are spot-on about using a fully immutable type, and IMO is the best approach. Perhaps (if Post is an Entity) this could also be an opportunity to extract properties into a ValueObject.</p>
    </div>