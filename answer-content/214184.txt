<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>tokens.h</h1>

<p>Instead of <code>&lt;string.h&gt;</code> use <code>&lt;stddef.h&gt;</code>, you only need access to <code>size_t</code>.</p>

<h1>tokens.c</h1>

<p>Now you need, <code>&lt;string.h&gt;</code> :-)</p>

<p>Modify interface to <code>static bool tokens_add(struct Tokens *const tokens, const char *const token, size_t toklen)</code>. This we remove the need for extra copying in <code>split_string</code>.</p>

<p>Instead of the non-standard <code>strdup</code> you now use</p>

<pre><code>char *dupstr = malloc(toklen + 1u);
if (dupstr == NULL) {
    return false;
}
memcpy(dupstr, token, toklen);
dupstr[toklen] = '\0';
</code></pre>

<p>In <code>string_split</code> possibly start with this check</p>

<pre><code>if (input == NULL || delim == NULL) {
    return NULL;
}
</code></pre>

<p>later the check for zero <code>count</code> or <code>delimlen</code> led to a memory leak in the case of <code>tokens_add</code> failure.</p>

<pre><code>if (count == 0 || delimlen == 0) {
    if (tokens_add(tokens, input, inputlen)) {
        return tokens;
    } else {
        tokens_free(tokens);
        return NULL;
    }
}
</code></pre>

<p>The start of the <code>while</code>-loop can now be simplified to</p>

<pre><code>    const int delimpos = start - &amp;input[inputpos];
    if (!tokens_add(tokens, &amp;input[inputpos], delimpos)) {
        tokens_free(tokens);
        return NULL;
    }
</code></pre>

<p>since no <code>token</code> temporary buffer copy is needed (using VLA, a risk for stack overflow).</p>

<p>And the end</p>

<pre><code>if (inputpos &lt;= inputlen) {
    if (!tokens_add(tokens, &amp;input[inputpos], inputlen - inputpos)) {
        tokens_free(tokens);
        return NULL;
    }
}
</code></pre>

<p>Finally, in <code>tokens_free</code> you have a memory leak. You are missing</p>

<pre><code>free(tokens-&gt;array);
</code></pre>
    </div>