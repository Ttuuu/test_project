<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Define exactly what properties you want your container to have</h1>

<p>You say:</p>

<blockquote>
  <p>As you can see, with usual STL containers, you can't have O(1) performance and low memory footprint everywhere.</p>
</blockquote>

<p>That's not so much a property of STL, but of container structures in general. You only get O(1) performance if you don't have to search and don't have to shuffle memory around, and if you can't shuffle memory around you can't have a low memory footprint. So you have to make some compromises.</p>

<p>You don't mention what you want to optimize for, or what kind of usage patterns you are expecting. It would be good if you could write down (for yourself) what exact properties you want your container to have, and then verify whether your implementation actually has those properties.</p>

<h1>Your metadata uses storage as well</h1>

<p>Your container has a <code>vector&lt;T&gt;</code> with the actual data, which is quite efficient. However, there is also metadata. In particular, there is <code>vector&lt;int&gt; index</code>, which you never shrink. So this means that if you have an access pattern where there is a short spike where a lot of data is stored in the container, then after the spike the data itself doesn't use a lot of space, but the vector of indices is now very large. Especially if <code>T</code> is small, then the overhead of the indices and availability queue might be very significant.</p>

<p>Note that you also never shrink <code>index</code>, even if it is possible to do so (whenever tail indices are unused).</p>

<h1>Adding to a <code>vector&lt;&gt;</code> is <em>amortized</em> O(1)</h1>

<p>Adding items to a <code>vector&lt;&gt;</code> might cause memory allocations and moves, so the time used for an addition is variable, and does not have an upper bound. Whenever the STL has to reallocate memory for a <code>vector&lt;&gt;</code>, it basically doubles the size, so with a constant rate of addition, it needs less and less reallocations. The result is that the amortized cost is O(1). However, be aware that this container might not be suitable for a real-time system.</p>
    </div>