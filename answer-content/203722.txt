<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few comments in no specific order (mostly from top of your code to bottom):</p>

<ul>
<li><p>What you refer to as conditional <code>group_by</code> can be done with <code>group_by_at</code>. Define your values before with an <code>if</code> call, then have a single pipe chain using <code>group_by_at</code>. See also <code>group_if</code></p></li>
<li><p>Your code isn't commented at all (though arguments documented)</p></li>
<li><p><code>tidyverse</code> functions usually use argument names that start with a dot when they contain an <code>...</code>, so there are fewer chances of argument conflicts.</p></li>
<li><p>You call <code>quo</code> and not <code>rlang::quo</code> but you call <code>rlang::eval_tidy</code>, so not 100% consistent (unless it would conflict with another <code>eval_tidy</code> function?).</p></li>
<li><p>On the <code>valid_rank_type &lt;- ...</code> line you should use <code>||</code> unless you're comparing vectors or you want it to fail if rhs returns an error and lhs is <code>TRUE</code></p></li>
<li><p>Use <code>if_else</code> rather than <code>case_when</code> if you only have 2 case : <code>case_when(nextrank == denseRank + 1 ~ 1, TRUE ~ 0))</code> becomes <code>if_else(nextrank == denseRank + 1, 1, 0)</code></p></li>
<li><p>I don't understand what sense make <code>calculate &lt;- calculate</code> or <code>overall &lt;- overall</code></p></li>
<li><p>Instead of using <code>if(calculate == FALSE)</code> and <code>if(calculate == TRUE)</code> you can use <code>if(!calculate)</code> and <code>if(calculate)</code> (as you did with <code>if(period_missing)</code></p></li>
<li><p>It's generally good practice (though not a hard rule) not to use return call in the middle of the code when they can be avoided. In your case you could remove them and add out as a last line before exiting the function.</p></li>
<li><p><code>sum(nextrank == (denseRank+1), na.rm = TRUE)/n()</code> is <code>mean(nextrank == (denseRank+1), na.rm = TRUE)</code></p></li>
<li><p>It's not very "tidyesque" to finish your pipe chain with <code>as.numeric</code> here, though it does the job, the function that would make sense to me here is <code>dplyr::pull</code></p></li>
</ul>
    </div>