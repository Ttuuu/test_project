<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>object</code> should be plural, and should more clearly indicate what it contains. <code>gameObjects</code> would be preferable.</p>

<p>It's a good idea to always include curly braces, even when they're not required. It removes a possible source of later bugs.</p>

<p>It’s easier to read <code>isEmpty()</code> than <code>size() == 0</code>. You also don’t need the <code>else</code> statement, since the <code>if</code> returns.</p>

<p>If <code>handler.object</code> is a type that has an <code>iterator()</code> method, it would be better to use that than a <code>for</code> loop.</p>

<p>The performance of LinkedList is often worse than ArrayList. You should consider testing their relative performances.</p>

<p>You should code to interfaces, not implementations, where possible. <code>List&lt;GameObject&gt; objects = …</code> is preferable to <code>LinkedList&lt;GameObject&gt; objects =</code>.</p>

<p>If <code>ID</code> has a correct implementation of <code>equals()</code>, you should probably be using that. <code>==</code> asks if it’s the ID is the same object, not just if it has the same value.</p>

<p>In java, it’s preferable to only capitalize the first letter of an acronym, so <code>objectId</code> is preferred to <code>objectID</code>.</p>

<p>There’s probably something wrong with <code>getDistance()</code> - it should either be an instance method or you shouldn’t need to pass in <code>this</code>.</p>

<p>You don’t need to loop twice. Every time you find an object with a matching id, compare it’s distance to the current nearest object. Only keep the nearest. This will also save you from computing the distance twice.</p>

<p>As far as optimizing performance, you'll have to do some testing and see if it's working fast enough for you. Cutting out the one loop will make it closer to optimal, but we can't know how that will interact with the game.</p>

<p>If you were to apply all my suggestions, your code might look something like:</p>

<pre><code>public GameObject getNearest(final ID objectId) {
    GameObject nearestObject = null;
    int distance = Integer.MAX_VALUE;

    for (int i = 0; i &lt; this.handler.object.size(); i++) {
        final GameObject currentObject = this.handler.object.get(i);
        if (!currentObject.getId().equals(objectId)) {
            continue;
        }

        final int currentDistance = this.getDistance(this, currentObject);
        if (currentDistance &lt; distance) {
            nearestObject = currentObject;
            distance = currentDistance;
        }
    }

    return nearestObject;
}
</code></pre>
    </div>