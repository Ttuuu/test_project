<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You're using <code>printf</code> to print a single <code>char</code>:</p>

<pre><code>printf("%c", aux[j]);
</code></pre>

<p><code>printf</code> is a very handy tool to format output, but it carries quite a bit of overhead with it â€“ not something you want to call over and over without a good reason. A much more efficient way to print a single <code>char</code> to <code>stdout</code> would be:</p>

<pre><code>putchar(aux[j]);
</code></pre>

<p>Or, instead of looping over the string to print it character-by-character, you can print the whole thing with just one function call:</p>

<pre><code>puts(aux);
</code></pre>

<p>(Note that <code>puts</code> prints an additional newline character at the end of the string. If you want to avoid that, use <code>fputs(aux, stdout)</code> instead.)</p>

<p><code>puts</code> and <code>fputs</code> require the string (<code>aux</code>) to be terminated by a NUL-character (<code>'\0'</code>), which it isn't in your program. If you want to print a character sequence of known length (but possibly without such a terminator character), you can use:</p>

<pre><code>fwrite(aux, 1, strlen(n), stdout);
</code></pre></li>
<li><p>You can also use <code>puts</code> or <code>fputs</code> to print all the string literals in your program with less overhead, e. g.</p>

<pre><code>puts("\nWelcome to the super, duper string inverter!");
</code></pre>

<p>instead of</p>

<pre><code>printf("\nWelcome to the super, duper string inverter!\n");
</code></pre>

<p>Now you don't even need to worry about <code>%</code> characters being interpreted as format descriptors.</p></li>
<li><p>You can concatenate string literals that are printed right after each other to avoid the overhead of additional buffering and I/O locking and unlocking:</p>

<pre><code>fputs("Included with the super mojo from the string inverter, this is the result: ", stdout);
</code></pre>

<p>If you don't like long string literals you can break them into multiple parts:</p>

<pre><code>fputs("Included with the super mojo from the string inverter, "
      "this is the result: ", stdout);
</code></pre>

<p>produces exactly the same syntax tree and binary code as the source code just before.</p></li>
</ul>
    </div>