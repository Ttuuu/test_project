<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We need to include <code>&lt;stdlib.h&gt;</code>, to have a prototype for <code>calloc()</code>.</p>

<hr>

<p>There's no definition of <code>struct Entry</code> here; this isn't valid C:</p>

<pre><code>typedef struct {
    struct Entry *next;
    struct Entry *neighbor;
} Entry;
</code></pre>

<hr>

<p>Let's have a look at how we create a <code>HashMap</code> object:</p>

<blockquote>
<pre><code>   (*map) = (HashMap *) calloc(1, sizeof(HashMap));
</code></pre>
</blockquote>

<p>It's not necessary to cast the result of the <code>malloc()</code> family of functions, and can be considered harmful to do so.</p>

<p>Something that <em>is</em> necessary, but is absent, is a test that the return value is non-null before it's used.</p>

<p>It's better to return the <code>map</code> pointer than to assign it via pointer to pointer.</p>

<p>It also helps to use the size of <code>*map</code> rather than of <code>(HashMap)</code>, as it's then easier to visually match that the code is correct.</p>

<p>There's no benefit to using <code>calloc()</code> rather than <code>malloc()</code>, as we're initializing all members programmatically.  Using <code>calloc()</code> just wastes the processor's time.</p>

<p>Those changes lead to</p>

<pre><code>     map = malloc(sizeof *map);
     if (!map) { return map; }
</code></pre>

<hr>

<p>The function to free a hash map seems to be completely missing.</p>

<p>It seems strange to use <code>int</code> rather than <code>size_t</code> for <code>size</code> and <code>capacity</code> members.</p>

<p>There's more unnecessary casts in many places:</p>

<blockquote>
<pre><code>for (Entry *e = map-&gt;head; e != NULL; e = (Entry *) e-&gt;next) {
</code></pre>
</blockquote>



<blockquote>
<pre><code>    entry-&gt;neighbor = (struct Entry *) (*map)-&gt;table[key_hash];
</code></pre>
</blockquote>



<blockquote>
<pre><code>    (*map)-&gt;tail = (Entry *) (*map)-&gt;tail-&gt;next;
</code></pre>
</blockquote>
    </div>