<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My Bash complains about <code>sum=`expr $sum + 1`</code>, and it ain't pretty:</p>

<blockquote>
<pre><code>  *expr: syntax error
</code></pre>
</blockquote>

<p>What to make of that? Good ol' Bash won't treat you nicely if you don't treat it nicely! If I use <code>set -u</code>, things become clearer:</p>

<blockquote>
<pre><code>  *script.sh: line 13: sum: unbound variable
</code></pre>
</blockquote>

<p>Aha! Don't forget to initialize variables, <code>sum=0</code> in this case.</p>

<hr>

<p>Speaking of <code>sum=`...`</code>, use <code>sum=$(...)</code> in the future, it's better in every way.</p>

<hr>

<p>In arithmetic context you don't always need to use <code>$</code> for variables.
Instead of this:</p>

<blockquote>
<pre><code>for (( i=$min;i&lt;=$max;i++))
</code></pre>
</blockquote>

<p>You could write:</p>

<pre><code>for ((i = min; i &lt;= max; i++))
</code></pre>

<p>Notice that I adjusted the spacing around operators, to follow common conventions of many languages.</p>

<p>Also, I suggest to indent the loop body between <code>do</code> and <code>done</code> always, to make it easier to see the commands that are part of the loop. And it's common practice to indent by 4 spaces, not by 3.</p>

<hr>

<p>Instead of printing fragments of a line of text, it would be better to build the content of each line in a variable, and then <code>echo</code> the line. For example like this:</p>

<pre><code>for ((i = min; i &lt;= max; i++)); do
    line=
    for ((j = i; j &lt;= max; j++)); do
        line+=' '
    done
    for ((j = 1; j &lt;= i; j++)); do
        line+=' *'
        ((sum++))
    done
    echo "$line"
done
</code></pre>

<hr>

<p>Btw, all this is a really silly use of Bash :-)</p>
    </div>