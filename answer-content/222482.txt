<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Stop using namespace std;</h2>

<p>Having <code>using namespace std;</code>, especially in a header file is considered bad practice. <a href="https://stackoverflow.com/q/1452721/5682996">This</a> Stack Overflow post explains the reasoning quite well. In your case it's especially unnecessary since you do not even use something from this namespace in <code>BST.h</code> and only <code>std::string</code> in <code>Packet.h</code>.</p>

<h2>Unnecessary includes</h2>

<p>Again <code>BST.h</code>. There are a lot of unused includes in there. The only one that might serve a purpose would be <code>Packet.h</code> which could easily be replaced by <a href="https://stackoverflow.com/q/4757565/5682996">a forward declaration</a>. Most of the include should go to the corresponding <code>.cpp</code> file.</p>

<h2>The BST</h2>

<p>I'm not sure about the interface. If your intended usage is to pass packages by reference, it would be desirable to declare <code>BST::insert(Node *&amp;p, Node *newNode)</code> as private, similar to the public and private versions of <code>preorderTraversal</code>. <code>preorderTraversal</code> might also be better called <code>printPreorder</code> or something like this since it only prints the nodes and does not allow to access them.</p>

<p>There is also a <strike>small</strike> memleak in <code>insert</code> since those <code>Node*</code>s created with <code>Node *newNode = new Node;</code> will never get deleted. <a href="http://www.valgrind.org/" rel="nofollow noreferrer">valgrind</a> confirms this. As <a href="https://codereview.stackexchange.com/users/75307">@TobySpeight</a> rightfully pointed out in his comment and <a href="https://codereview.stackexchange.com/a/222509/92478">detailed in his answer</a>, one can argue if leaking all of the tree's nodes should really be considered as a "small" memleak. A possible solution for this is to use smart pointers from <code>&lt;memory&gt;</code>. There is a good overview in <a href="https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/" rel="nofollow noreferrer">this blog post</a> by Herb Sutter on which type of smart pointer (e.g. <code>std::unique_ptr</code> or <code>std::shared_ptr</code>) as well as the type of parameter passing (by-reference vs. by-value) should be used to express a certain "meaning".</p>
    </div>