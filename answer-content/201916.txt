<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All of this is in a Worksheet's code, right? In general if you have routines that are called by an event, you want to place those in a real module e.g.</p>

<pre><code>Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If Not Application.Intersect(Target, checkRange) Then Module1.HighLight target
End Sub
</code></pre>

<p>I mean, technically, you need that error check to validate the range on worksheet change, and if it's valid <em>then</em> you do some stuff. So logically it would be broken out as well.</p>

<p>Now, this would break every <code>.Me</code>, so you would pass your range as an argument and use the range to get the parent, if needed.</p>

<p>So instead of <code>.UsedRange</code> you would create a routine that takes your target and finds the correct range, and pass that. UsedRange isn't very specific to someone reading the code, you want to try to be explicit in everything you do.</p>

<blockquote>
<pre><code>Target.Cells.CountLarge
</code></pre>
</blockquote>

<p>Are we dealing with a graph? Using CountLarge is strange - is your range bounded by columns or rows? Explicitly check that those aren't exceeded.</p>

<hr>

<h3>Naming</h3>

<p>Your naming leaves a bit to be desired. Use the variable's name to <em>tell</em> me something about it. <code>r</code> is a range and <code>c</code> is a range? What range? Is it <code>parentRange</code> and <code>targetCell</code> maybe?</p>

<blockquote>
<pre><code>Sub HighlightIt(rng As Range, Optional hilite As Boolean = True)
</code></pre>
</blockquote>

<p>Oh, <code>rng</code> is a range and the other thing is a boolean? If it's a boolean, you can make it <em>look</em> like a boolean. <code>isHighlighted</code> or something similar. If I read through your <code>HighlightIt</code> routine, everytime I see <code>hilite</code> as a true/false test - what is being evaluated? What if you pass <code>False</code>? </p>

<blockquote>
<pre><code>HighlightIt Application.Intersect(Me.Range("K:K"), Me.UsedRange), False
</code></pre>
</blockquote>

<p>Well, it seems like a different highlighting will take place. I'd break those out into two different functions and do the check and call one or the other</p>

<p>Also, you haven't passed those parameters <em>ByVal</em> which means they are passed <em>ByRef</em> implicitly. If you want them <em>ByRef</em>, do it explicitly. If there's no good reason you need it <em>ByRef</em> then pass them <em>ByVal</em></p>

<pre><code> Private Sub HighlightTargetRange(ByVal target as Range)
</code></pre>

<p>So now there's a total of 3 variables? For all this code? Hmph</p>

<p>You also check some columns for intersect. I'd use some constants to identify the columns and make it more clear what your checking, for instance if column K is to check a conditions then</p>

<pre><code> Const COLUMN_CONDITION_CHECK as Long = 11
</code></pre>

<h3>Refactor</h3>

<p>You have this (roughly) four times -</p>

<blockquote>
<pre><code>     With Application.Intersect(Me.Range("K:K"), Me.UsedRange)
        .Font.Bold = False
        .Font.Color = vbBlack
        .Font.Size = 14

      End With
</code></pre>
</blockquote>

<p>You just pass a different range. That's screaming to be refactoring into a method which can then be called from each of the three locations, rather than repeating it.</p>

<blockquote>
<pre><code>Private Sub DefaultFormat(ByVal targetRange As Range)
    targetRange.Font.Bold = False
    targetRange.Font.Color = RGB(0, 0, 0)
    targetRange.Font.Size = 14
End Sub
</code></pre>
</blockquote>

<p>A lot cleaner. Oh, yeah, use <code>RGB</code> when you can. Sometimes the color constants <em>can</em> get weird and might cause issues on different systems. Instead, use the <a href="http://answers.microsoft.com/en-us/office/forum/office_2007-customize/color-versus-colorindex/3e913d63-2832-402c-bbb9-c457e1ad1d17" rel="nofollow noreferrer">RGB()</a> method. I know that's talking about <code>ColorIndex</code> but the point still stands.</p>

<p>But wait! It looks like you have the same thing 4 times with just different intersect ranges! Even better!</p>

<p>Also- your indentation levels are all messed up. Maybe that's a result of a copy/paste, but you should always make sure those levels are clear.</p>

<hr>

<p>So now your sheet code is</p>

<pre><code>Private Sub Worksheet_SelectionChange(ByVal target As Range)
    If Not Application.Intersect(Me.Range("N:Q"), target) Is Nothing Then
        Module1.BeginFormat target
    End Sub
End Sub
</code></pre>

<p>And your main code would be like</p>

<pre><code>Option Explicit
Private Sub BeginFormat(ByVal target As Range)
Application.ScreenUpdating = False
    Dim masterRange As Range
    Set masterRange = Application.Intersect(Sheet1.Range("N:Q", target))
    Dim originRange As Range
    Set originRange = Sheet1.UsedRange
    Dim targetCell As Range
    Dim index As Long
    Dim lastRow As Long
    lastRow = masterRange.Cells(Rows.Count, 8).End(xlUp).Row
    If masterRange Is Nothing Or target.Cells.CountLarge &gt; 960 Then GoTo CleanExit
        For columns N, O, J, K, Q, L
            CheckHighlight target, targetColumn
        Next
    End If

CleanExit:
    Application.ScreenUpdating = True
End Sub
Private Sub CheckHighlight(ByVal target As Range, ByVal targetColumn As Range)
    'check intersect
    'create range
    DefaultFormat Range
    If something Then
        BoldHighlight Range
    Else
        SecondaryHighlight Range
    End If
End Sub

Private Sub DefaultFormat(ByVal targetRange As Range)
    targetRange.Font.Bold = False
    targetRange.Font.Color = RGB(0, 0, 0)
    targetRange.Font.Size = 14
End Sub
</code></pre>
    </div>