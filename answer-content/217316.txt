<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>itertuples</code></h1>
<p>When traversing over the rows of a <code>DataFrame</code>, using itertuples is generally faster than <code>iterrows</code>. The latter makes a new <code>Series</code> for each row, the former a <code>namedtuple</code>, which is generally faster.</p>
<h1><code>defaultdict</code></h1>
<p>Appending items to a list on a key is typically done with a <code>defaultdict</code>.</p>
<pre><code>from collections import defaultdict
result = collections.defaultdict(list)
for row in X.itertuples():
    idx = row.Index
    for item in row.B:
        result[item].append(idx)
</code></pre>
<p>The method you use to combine the values in the dictionary is meant to include empty items as <code>None</code>. Here you add them, and then filter them out, so using a <code>defaultdict</code> will simplify this up a lot.</p>
<h1>naming</h1>
<p>Try to follow pep-8.</p>
<ul>
<li><code>snake_case</code> for variables, etc.</li>
<li>spaces around operators</li>
<li>...</li>
</ul>
<hr>
<h1>timings</h1>
<h2>dummy data</h2>
<pre><code>def make_dummydata(rows, max_length, seed=0):
    letters = string.ascii_letters
    np.random.seed(seed)
    random.seed(seed)
    col1 = np.random.randint(0, 10, size=rows)
    items_per_row = np.random.randint(0, max_length, size=rows) + 1
    col2 = [random.choices(letters, k=amount) for amount in items_per_row]
    return pd.DataFrame({"A": col1, "B": col2})
</code></pre>
<h2>benchmark method</h2>
<pre><code>import timeit

def benchmark(cases, functions):
    for rows, max_length in cases:
        df = make_dummydata(rows, max_length)
        for name, function in functions.items():
            result = timeit.timeit(
                stmt=f"function(df)",
                globals={"df": df, "function": function},
                number=1,
            )
            yield rows, max_length, name, result
</code></pre>
<h2>results</h2>
<pre><code>cases = [(10, 2), (100, 10), (1000, 40), (10000, 200)]
functions = {
    "OP": find_op,
    "maarten": find_maarten,
    "jezrael": find_jezrael,
}
list(benchmark())
</code></pre>
<blockquote>
<pre><code>[(10, 2, 'OP', 0.001344002000003286),
 (10, 2, 'maarten', 0.0003913850000003549),
 (10, 2, 'jezrael', 0.005293956000002709),
 (100, 10, 'OP', 0.027166392000005146),
 (100, 10, 'maarten', 0.0004795910000012782),
 (100, 10, 'jezrael', 0.013824836999994261),
 (1000, 40, 'OP', 0.3434149869999956),
 (1000, 40, 'maarten', 0.0032574399999987236),
 (1000, 40, 'jezrael', 0.018533767000000978),
 (10_000, 200, 'OP', 33.48681208600001),
 (10_000, 200, 'maarten', 0.10972772499999905),
 (10_000, 200, 'jezrael', 0.7631061700000004),
 (350_000, 1000, 'maarten', 22.097186581000003),
 (350_000, 1000, 'jezrael', 516.128048978)]
</code></pre>
</blockquote>
<p>The method using <code>defaultdict</code> is a lot faster. This only says something about the run-time, not the memory usage, where my method does not create a large intermediary <code>DataFrame</code>.</p>
    </div>