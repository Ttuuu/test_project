<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>import room_info as rooms
import character_and_items as char
</code></pre>

<p>If you're going to import them this way all the time, why didn't you just name the modules <code>rooms</code> and <code>char</code> respectively? What's the point of all the extra typing? Btw, it's conventional in text adventures to refer to the <code>player</code>; I'd go with <code>import player</code> over <code>import char</code>, just to de-confuse the syntax highlighter.</p>

<p>Your function <code>print_frog_title</code> is used in only one place. You should just inline it there.</p>

<hr>

<pre><code>snarky_remark_list = ["And how exactly are you going to do that?", "Fat chance", "In your dreams", "Inconceivable!",
                      "Aunt Frogatha would be ashamed.."]
</code></pre>

<p>When you start version-controlling your source code, you'll realize that it's better to indent sequences so that they have one element per line. This allows you to add and remove elements without introducing extra diffs into your history. Also add a trailing comma on <em>each</em> element; don't sigil the last element specially from all the rest.</p>

<pre><code>snarky_remark_list = [
    "And how exactly are you going to do that?",
    "Fat chance",
    "In your dreams",
    "Inconceivable!",
    "Aunt Frogatha would be ashamed..",
]
</code></pre>

<p>English grammar nit: I notice that some of these remarks end with punctuation and some don't. Another: You wrote <code>mantle</code> when you meant <code>mantel</code>.</p>

<p>Your <code>room_dict</code> has nice git-friendly indentation, but is also missing that trailing comma on the last element.</p>

<hr>

<pre><code>character_inventory = []
current_room = None
</code></pre>

<p>These two variables feel like they should be data members of a <code>class Player</code>. But then there's other stuff in this module that is clearly unrelated to the player, e.g.</p>

<pre><code># This could get tedious for every item in the game...
def get_description(item, form):
</code></pre>

<p>So number one, I'd consider splitting that out into an <code>items</code> or <code>objects</code> module; and number two, you already know the non-tedious solution! Just imagine that instead of writing</p>

<pre><code>pamphlet = Items("The flies future is YOUR Future. Donate today!",
                 "This is an annoying pamphlet, it came in the mail")
</code></pre>

<p>you wrote</p>

<pre><code>pamphlet = Item(
    name="pamphlet",
    read="The flies future is YOUR Future. Donate today!",
    examine="This is an annoying pamphlet, it came in the mail",
)
</code></pre>

<p>And instead of</p>

<pre><code>key = Items("34TH BURROW STREET",
            "It's an old cast iron key, it's been in your family for generations.")
</code></pre>

<p>imagine that you wrote</p>

<pre><code>key = Item(
    name="key",
    read="34TH BURROW STREET",
    examine="It's an old cast iron key, it's been in your family for generations.",
    use_on=["door"],
)
</code></pre>

<p>Can you see how to implement the constructor of <code>class Item</code> now?</p>

<p>EDITED TO ADD: It'd be something like this.</p>

<pre><code>class Item:
    def __init__(self, name, read, examine, use_on=None):
        self.name = name
        self.read = read
        self.examine = examine
        self.use_on = use_on or []
        # self.location = burrow
        # self.inroom_description = "There is a %s here." % name
</code></pre>

<p>No member functions are necessary yet.</p>

<p>And how to implement <code>get_description</code>? ...Well, almost. Suppose we wrote our list of "all the items in the game" like <em>this!</em></p>

<pre><code>all_items = [
    Item(
        name="pamphlet",
        read="The flies future is YOUR Future. Donate today!",
        examine="This is an annoying pamphlet, it came in the mail",
    ),
    Item(
        name="key",
        read="34TH BURROW STREET",
        examine="It's an old cast iron key, it's been in your family for generations.",
        use_on=["door"],
    ),
]
</code></pre>

<p>Now <code>get_description</code> starts out something like</p>

<pre><code>def get_description(verb, noun):
    for item in all_items:
        if item.name == noun:
            if verb == "examine":
                return item.examine
            elif verb == "read":
                return item.read
    return "I don't see what you're referring to."
</code></pre>

<p>You could preprocess <code>all_items</code> into a dict mapping from names to <code>Item</code> objects, to save two levels of indentation in that loop.</p>

<pre><code>def get_description(verb, noun):
    item = all_items_by_name.get(noun, None)
    [...]
</code></pre>

<p>Notice that I quietly turned <code>Items</code> plural into <code>Item</code> singular, and also turned <code>form</code> into <code>verb</code>.</p>

<hr>

<pre><code># This is a workaround for the from room_info import * method.
# Ideally this would all be one function, with a room parameter and an info parameter
def exam_ob(room):
    return room.examinable_objects
def use_ob(room):
    return room.usable_objects
</code></pre>

<p>Okay, this seems insane. Why not just take the one place you call <code>rooms.exam_ob(room)</code> and write <code>room.examinable_objects</code> instead?</p>

<hr>

<p>Your handling of takeable objects seems tedious and na√Øve... but also probably unavoidable, if you want to have that level of control over the messages. (The photo is cheerily on the mantel; the fish sticks are defrosting on the floor; etc.) If you want to add the ability to drop arbitrary objects in arbitrary places, you'll have to find a new way of doing these messages.</p>

<p>Have you seen <a href="http://literateprogramming.com/adventure.pdf" rel="nofollow noreferrer">Donald Knuth's literate version of <em>Adventure</em>?</a> See particularly section 63, on page 43.</p>
    </div>