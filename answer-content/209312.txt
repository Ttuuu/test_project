<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>
Because your program is already way above average, <a href="https://stackoverflow.com/questions/53559595/assembly-divide-by-zero-overflow/53562461?noredirect=1#comment94031519_53562461">I encouraged you to post it
 on Code Review</a>.
 I'm glad you decided to do so. Next comes the review that I promissed to
 write.</p>

<h2>A conceptual error</h2>

<p>You've programmed a byte-sized division for the "special Harshad" test (<code>div Temp2</code> along with <code>Temp2 db ?</code>). This is not OK! You need a word-sized division just like in the "normal Harshad" test.  </p>

<p>Consider the number 4368. The sum of its digits is 21. The flipped sum of its digits is 12.<br>
Division by 21 gives 208 <strong>but</strong> division by 12 gives 364. This quotient is bigger than <code>AL</code> can hold! It will generate a division exception #DE.</p>

<h2>Powerful loops</h2>

<p>There's a lot of duplicated code when you input the 4-digit number.<br>
Where the extra constraint on the 1st digit could justify a separate step,
 inputting the next 3 digits should definitely go in a loop.</p>

<p>A better strategy however is to not check the validity of the input based on
its digits but rather on the total value. For you know that any 4-digit number
 that is not allowed to start with a zero, will lie between 1000 and 9999.<br>
Simply keep asking for a digit until the total value is no longer below 1000.</p>

<hr>

<h2>Bad redundancy vs good redundancy</h2>

<p>You often wrote <code>mov ax, 0</code> followed by another instruction that loads the <code>AX</code>
 register. That <code>mov ax, 0</code> is not productive!</p>

<p>When the number checks out to be a special Harshad number, your program
 displays two separate messages. This is a redundancy since stating that a
 number is "special Harshad" already implies that it is "normal Harshad".</p>

<p>Testing for a valid digit you wrote <code>CMP AL,0</code> <code>JB WrongInput</code>. This is a redundant operation since nothing can ever be <strong>below</strong> zero. Remember the <em>below</em> condition pertains to unsigned values. Using <code>jl WrongInput</code> does make sense in this case.</p>

<p>As a 1st example of <em>good redundancy</em> consider this:</p>

<pre class="lang-none prettyprint-override"><code>        mov     si, BAD

        ; Input and test number
        ; Jump to Msg if invalid

        mov     si, NOK

        ; Test for Harshad
        ; Jump to Msg if not Harshad

        mov     si, OK1

        ; Test for special Harshad
        ; Jump to Msg if just Harshad

        mov     si, OK2

        ; Fall through if special Harshad

Msg:    mov     dx, si
        mov     ah, 09h                 ;DOS.PrintText
        int     21h
</code></pre>

<p>Loading the <code>SI</code> register with the address of the <em>BAD</em> message is redundant if
 the code that follows should determine that the number is fine.<br>
If on the other hand that code finds the number to be invalid, we can jump
 readily to a single place in the code where the result is shown.</p>

<p>Loading the <code>SI</code> register with the address of the <em>NOK</em> message is redundant if
 the code that follows should determine that the number is indeed Harshad.<br>
If on the other hand that code finds the number to be not Harshad, we can jump
 readily to a single place in the code where the result is shown.</p>

<p>Loading the <code>SI</code> register with the address of the <em>OK1</em> message is redundant if
 the code that follows should determine that the number happens to be special 
Harshad.
If on the other hand that code finds the number to be just Harshad, we can jump
 readily to a single place in the code where the result is shown.</p>

<p>As a 2nd example of <em>good redundancy</em> consider this:</p>

<pre class="lang-none prettyprint-override"><code>        xor     bx, bx                  ;InputNumber [1000,9999]
Key:    mov     ax, 10
        mul     bx
        mov     bx, ax
        mov     ah, 01h                 ;DOS.GetKey
        int     21h                     ; -&gt; AL
</code></pre>

<p>Isn't it silly to multiply by 10 when the number is known to be zero?<br>
 No, because this arrangement allows for cleaner/shorter code.<br>
Had I placed the multiplication after the DOS.GetKey function, I would have
 had to move the keycode from <code>AL</code> to a spare register in order to do the
 multiplication that mandatory uses <code>AX</code>, at least on 8086.</p>

<p>On 80386 and better, the issue would not exist since then multiplying any
 register by an immediate is an option:</p>

<pre class="lang-none prettyprint-override"><code>        cbw
        imul    bx, 10
        add     bx, ax
</code></pre>

<hr>

<h2>Useful shortcuts</h2>

<p>At the very least the following changes will give you shorter code which is
 generally speaking a good thing:</p>

<pre class="lang-none prettyprint-override"><code>From          To
----          --
mov  bx, 0    xor  bx, bx  If FLAGS are not important, or you need CF=0
cmp  dx, 0    test dx, dx
mov  ah, 0    cbw          Provided AL holds a positive number
mov  dx, 0    cwd          Provided AX holds a positive number
</code></pre>

<hr>

<h2>Explore the instruction set</h2>

<blockquote>
  <p><code>aam</code> divides the <code>AL</code> register by 10, leaves the quotient in <code>AH</code> and the
   remainder in <code>AL</code>.<br>
  <code>aad</code> multiplies the <code>AH</code> register by 10, adds <code>AL</code> and stores the result in
   <code>AX</code>.</p>
</blockquote>

<p>Given these descriptions it should be clear that these are ideal instructions
 to flip the digits in the <em>SumOfDigits</em> value.</p>

<pre class="lang-none prettyprint-override"><code>        mov     al, cl                  ;CX is SumOfDigits [1,36]
        aam
        xchg    al, ah
        aad
        mov     cl, al                  ; -&gt; CX is flipped SumOfDigits
</code></pre>

<hr>

<h2>My version of the program</h2>

<p>The <code>ORG 256</code> directive means that I've assembled this into a program with the
 .COM extension. If you prefer the .EXE style you'll need to arrange the DATA
 and CODE sections appropriately, initialize the <code>DS</code> segment register, and
 also drop the <code>ORG 256</code> directive.</p>

<pre class="lang-none prettyprint-override"><code>        ORG     256

        mov     dx, ASK
        mov     ah, 09h                 ;DOS.PrintText
        int     21h

        mov     si, BAD
        xor     cx, cx                  ;SumOfDigits [1,36]
        xor     bx, bx                  ;InputNumber [1000,9999]
Key:    mov     ax, 10
        mul     bx
        mov     bx, ax
        mov     ah, 01h                 ;DOS.GetKey
        int     21h                     ; -&gt; AL
        sub     al, "0"
        jb      Msg        &lt;&lt;&lt; No need for a separate CMP here, since
        cmp     al, 9          SUB already defined the required FLAGS
        ja      Msg
        cbw
        add     bx, ax
        add     cx, ax
        cmp     bx, 1000
        jb      Key

        mov     si, NOK
        mov     ax, bx
        cwd
        div     cx
        test    dx, dx
        jnz     Msg

        mov     si, OK1
        mov     al, cl                  ;CX is SumOfDigits [1,36]
        aam
        xchg    al, ah
        aad
        mov     cl, al                  ; -&gt; CX is flipped SumOfDigits
        mov     ax, bx
        cwd
        div     cx
        test    dx, dx
        jnz     Msg

        mov     si, OK2

Msg:    mov     dx, si
        mov     ah, 09h                 ;DOS.PrintText
        int     21h
        mov     ax, 4C00h               ;DOS.TerminateWithExitcode
        int     21h
; --------------------------------------
ASK:    db      'Please input a number between 1000 and 9999:', 13, 10, '$'
BAD:    db      ' is not a valid number.', 13, 10, '$'
NOK:    db      ' is not a Harshad number.', 13, 10, '$'
OK1:    db      ' is a Harshad number.', 13, 10, '$'
OK2:    db      ' is a special Harshad number.', 13, 10, '$'

        END
</code></pre>

<p>Testing the program on a variety of inputs:</p>

<p><a href="https://i.stack.imgur.com/BuYkO.gif" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/BuYkO.gif" alt="An example of running the program"></a></p>

<hr>

<h2>A cool trick</h2>

<blockquote>
<pre class="lang-none prettyprint-override"><code>BAD:    db      ' is not a valid number.', 13, 10, '$'
NOK:    db      ' is not a Harshad number.', 13, 10, '$'
OK1:    db      ' is a Harshad number.', 13, 10, '$'
OK2:    db      ' is a special Harshad number.', 13, 10, '$'
</code></pre>
</blockquote>

<p>Looking at these messages, you'll see they all end the same way. In their
 present form these identical endings consume 40 bytes. A space savings of 23
 bytes is possible through separating and later re-combining.<br>
This is a cool trick found in some of the larger DOS programs where wasting
 space is not an option!<br>
I'm not saying that you should write it this way in your little demonstration
 program though...</p>

<pre class="lang-none prettyprint-override"><code>Msg:    mov     dx, si
        mov     ah, 09h                 ;DOS.PrintText
        int     21h
        mov     dx, FUN
        mov     ah, 09h                 ;DOS.PrintText
        int     21h
        mov     ax, 4C00h               ;DOS.TerminateWithExitcode
        int     21h
; --------------------------------------
ASK:    db      'Please input a number between 1000 and 9999:', 13, 10, '$'
BAD:    db      ' is not a valid$'
NOK:    db      ' is not a Harshad$'
OK1:    db      ' is a Harshad$'
OK2:    db      ' is a special Harshad$'
FUN:    db      ' number.', 13, 10, '$'
</code></pre>

<p>An additional 4 byte savings is possible if we go crazy and apply the same
 principle on the identical beginnings of these messages (' is ').</p>
    </div>