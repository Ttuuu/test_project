<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Toward better performance and functionality (reducing code run time twice)</h3>

<p>Always give your identifier/variable/function a meaningful name.<br>Most of your identifiers/variables should be renamed to reflect the actual intention and purpose.<br> A short sample of better naming: </p>

<ul>
<li><code>dat</code> --&gt; <strong><code>df</code></strong></li>
<li><code>idat</code> --&gt; <strong><code>group</code></strong></li>
<li><code>i</code> variable, which is actually <code>t</code> value --&gt; <strong><code>t</code></strong></li>
<li><code>h1</code> variable, which is actually <code>rnum</code> mean value --&gt; <strong><code>rnum_mean</code></strong> </li>
</ul>

<p>and so on ... (see the final implementation below)</p>

<hr>

<p><strong><code>diff_n</code></strong> function <br></p>

<p>The number <code>5</code> serves as "subtraction factor" thus instead of hard-coding it it's better to make that factor adjustable and define it as default argument:</p>

<pre><code>def diff_n(group, n=5):
</code></pre>

<p>Calling <code>.groupby('t')</code> in <code>idat.groupby('t')</code> and <code>h2[h2.t == j].groupby('t')</code> is redundant as the input/initial dataframe is already grouped by same <code>t</code> values (<code>dat.groupby('t').apply(lambda x: diff_n(x)</code>) and <code>diff_n</code> function will accept sub-dataframe having the <strong>same</strong> <code>t</code> column values but various <code>rnum</code> column values. </p>

<p>No need to <code>mean().values</code> as <code>mean()</code> is a reducing function and returns a single value.</p>

<p>Instead of generating a new dataframe and accumulate data with <code>pd.concat()</code> on each loop iteration - a single dataframe can be generated at once accepting a list of composed dictionaries.</p>

<hr>

<p>The final optimized approach:</p>

<pre><code>import pandas as pd
import numpy.random as nr

df = pd.DataFrame({'t': [1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10], 'rnum': nr.rand(12)})

def diff_n(group, n=5):
    t, rnum_mean = group.t.iloc[0], group.rnum.mean()
    if t == 1:
        return None

    # Subset df (outside fn)
    diff_rows = df[(df.t &lt; t) &amp; (df.t &gt;= t - n)]
    return pd.DataFrame([{'t': t,
                          'lag': t - i,
                          'diff': diff_rows[diff_rows.t == i].rnum.mean() - rnum_mean}
                         for i in range(max(diff_rows.t), min(diff_rows.t), -1)])


res = df.groupby('t').apply(lambda x: diff_n(x))
</code></pre>

<hr>

<p><strong>Time performance comparison</strong> (tested on randomly generated sequence of numbers for <code>rnum</code> column):</p>

<pre><code>rnum_data = [0.32371336559866004, 0.10698919887971459, 0.7953413399540619,
             0.9868916409057458, 0.9441608945915095, 0.47072752314030053,
             0.4508488822488548, 0.028372702128714233, 0.87623218782289,
             0.16471466305535765, 0.1, 0.2]
df = pd.DataFrame({'t': [1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10], 'rnum': rnum_data})
...
</code></pre>

<p>The old (initial) approach:</p>

<pre><code>import timeit
print(timeit.timeit("dat.groupby('t').apply(lambda x: diff_n(x))", globals=globals(), number=100))

5.156789435990504
</code></pre>

<p>The new approach:</p>

<pre><code>import timeit
print(timeit.timeit("df.groupby('t').apply(lambda x: diff_n(x))", globals=globals(), number=100))

2.5971586129890056
</code></pre>
    </div>