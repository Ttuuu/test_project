<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>UI</h2>
<p>First thing to look at would probably the ease of use of the webpage itself. You could start by using typed input controls, like <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time" rel="nofollow noreferrer"><code>time</code></a>, ie:</p>
<pre><code>&lt;input type="time" step="00:30" value="10:00" id="startTime" /&gt;
</code></pre>
<p>Those would still render as <code>text</code> inputs for any browser that might not be able to render it, but it would give an easier way of inputting the data from a user perspective.</p>
<p>On the subject of user experience, I found it really weird that my previous inputs got erased once I clicked on the fields. I assume you were going for a <a href="https://www.w3schools.com/tags/att_input_placeholder.asp" rel="nofollow noreferrer"><em>placeholder</em></a> effect, but for me, it felt a bit weird.</p>
<p>Furthermore, I have no idea what it is exactly that I have to do on the page. I seem to be able to add work an break times, but nothing that indicates visually to me, if I have started it or not.</p>
<p>So, I would suggest you have a way to visualize the work times, it would definitely make it easier for the user to interact with a visual interpretation of the data than just saying the n-th interval.</p>
<p>I could also add a "resume to work time" that was set before a "break time", which seems contradictory.</p>
<p>All in all, a lot of the problems that I would have with the setup is:</p>
<ul>
<li>Not seeing a visual representation of break / resume times</li>
<li>Not seeing if I started the process</li>
<li>inputs that reset when clicking them (honestly I even had an input reset, when I was trying to correct a mistake, for me sometimes it goes faster to go back with the mouse)</li>
<li>You have a button that adds all breaks and resume times, but no button that erases both (but you do have two separate buttons for that)</li>
<li>After I added the automatic break and resume times, I can add an extra resume time in between</li>
<li>Mixture of time formats between start / stop time and add manual break / resume times</li>
<li>Use <code>required</code> attribute, indicating a user automatically that something must be set before you can continue</li>
</ul>
<p>Personally, I would also prefer the <code>&lt;button /&gt;</code> element over <code>&lt;input type="button" /&gt;</code></p>
<h3>Alerts</h3>
<p>All interactions with the page seem to go over alerts, that feels off. I could have added to the above list, but I think this illustrates the best what is wrong and that is that the user doesn't see something but the input fields.</p>
<h2>Javascript</h2>
<p>As a rule, don't mix JavaScript and html elements. Currently, input every element and every button has a html <code>onclick</code> attribute. This makes it a very tight coupling between html and the code behind it.</p>
<p>For example, the text fields all have a "clear" event on them. Although I am not in favor of it, you could have gone with a single clear function for all input elements.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function clearElement( e ) {
  e.target.value = '';
}

Array.from( document.querySelectorAll('input[type=text]') )
  .forEach( element =&gt; element.addEventListener('click', clearElement ) );</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;input type="text" value="a" /&gt;
&lt;input type="text" value="b" /&gt;
&lt;input type="text" value="c" /&gt;</code></pre>
</div>
</div>

<h3>Global variables</h3>
<p>The start of your code defines several global variables. For the current usage this might be fine, but can be handled differently. Global variables are like magic, especially for people who didn't write the code themselves, or for yourself when you might look at your code at a later time.</p>
<p>So define variables where you need them explicitly.</p>
<h3>Local storage</h3>
<p>You read and write data from and to the local store. That's a good place to store the data you need, but as you have also seen, you need to transform the data upon each read and write. You can make it a lot easier for yourself if you would abstract the localstorage away in a utility class or utility functions.</p>
<ul>
<li>it would allow you to exchange the localstorage for another option in the future</li>
<li>you can leave the data manipulation over to the abstraction</li>
<li>it will be easier to test</li>
</ul>
<h3>loopArray() function</h3>
<p>For some reason you are using a <code>while</code> loop, but you should be using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" rel="nofollow noreferrer"><code>Array.prototype.find</code></a> here instead. It would allow you to instantly get the <code>currentTime</code> in an array or <code>undefined</code>.</p>
<p>Instead of using the <code>&lt;meta http-equiv="refresh" content="55" /&gt;</code>, you could use <code>setInterval</code> here, with adding <code>loopArray()</code></p>
<pre><code>setInterval( loopArray, 55000 );
</code></pre>
<p>It would run the <code>loopArray</code> function every 55 seconds and you wouldn't have unintended page reloads.</p>
<h3>Declaration</h3>
<p><code>var</code> is fine, but <code>let</code> and <code>const</code> are generally better</p>
<h3>D(ont) R(epeat) Y(ourself)</h3>
<p>The <code>loopArray</code> function calls two "different" windows and sets an interval to close them, write a method and parametrize the things that are different, then call the single method with the different arguments</p>
<p>Similarly, you have repeat the same work for getting hours and minutes from a string value. This is something that really should be refactored to a new function. By moving repeating code in their own little function, you also reduce problems in case you might have an error in that repeating code (you don't have to fix it all over the code base but just in one place).</p>
<p>For example, you could rewrite it to the following</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const timeParser = {
  fromInput( elem ) {
    const parts = elem.value.split(':', 2).map( Number );
    return {
      hours: parts[0],
      minutes: parts[1]
    };
  }
}

const dateProvider = {
  fromTime( time ) {
    const date = new Date();
    date.setHours( time.hours );
    date.setMinutes( time.minutes );
    return date;
  },
  increaseWith( date, minutes ) {
    const result = new Date( date.valueOf() );
    result.setMinutes( date.getMinutes() + minutes );
    return result;
  },
  getTime( date ) {
    return {
      hours: date.getHours(),
      minutes: date.getMinutes()
    };
  }
}

function getIntervals( startDate, endDate, workInterval, breakInterval ) {
  // don't mutate input arguments when it's not expected
  // not making startsAt a new object would introduce side effects
  let currentTime = new Date( startDate.valueOf() );
  const endsAt = endDate;
  // when endDate is smaller than startDate, it's a night shift :)
  if (endsAt &lt; currentTime) {
    endsAt.setDate( endsAt.getDate() + 1 );
  }
  
  const intervals = [];
  while (currentTime &lt; endsAt) {
    const start = dateProvider.getTime( currentTime );
    currentTime = dateProvider.increaseWith( currentTime, workInterval );
    // if the work interval exceeds the endsAt, choose endsAt instead
    const end = currentTime &gt; endsAt ? dateProvider.getTime( endsAt ) : dateProvider.getTime( currentTime );
    intervals.push( { start, end } );
    currentTime = dateProvider.increaseWith( currentTime, breakInterval );
  }
  return intervals;
}

function getElement( id ) {
  return document.getElementById( id );
}

document.getElementById('allbreaks').addEventListener('submit', e =&gt; {
  e.preventDefault();
  const startTime = timeParser.fromInput( getElement('startTime') );
  const endTime = timeParser.fromInput( getElement('endTime') );
  console.log( 
    getIntervals( 
      dateProvider.fromTime( startTime ), 
      dateProvider.fromTime( endTime ),
      parseInt( getElement( 'workInterval' ).value ),
      parseInt( getElement( 'breakInterval' ).value )
    )
  );    
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form id="allbreaks"&gt;
  &lt;div&gt;
    &lt;label for="startTime"&gt;Start time&lt;/label&gt;
    &lt;input type="time" id="startTime" required /&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;label for="endTime"&gt;End time&lt;/label&gt;
    &lt;input type="time" id="endTime" required /&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;label for="workInterval"&gt;Work interval&lt;/label&gt;
    &lt;input type="number" min="5" max="720" step="5" value="25" id="workInterval" required /&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;label for="breakInterval"&gt;Break interval&lt;/label&gt;
    &lt;input type="number" min="5" max="720" step="5" value="5" id="breakInterval" required /&gt;
  &lt;/div&gt;
  &lt;button&gt;Add work and break intervals&lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>
</div>

<h3>Adding ranges to an array</h3>
<p>If you want to add a range to an array, just spread the assignments, for example:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const test = 'a, b, c, d, e, f';
const arr = [];

arr.push(...test.split(',').map( t =&gt; t.trim() ) );
console.log( arr );</code></pre>
</div>
</div>

<h3>Use arguments</h3>
<p>Currently none of your functions have arguments, you retrieve all data from the inputs and that functions uses the data. Having utility functions like the once in the above shown code, makes it easier to reuse the functionality</p>
<h3>function length</h3>
<p>The <code>addBreakResumeTimes</code> is a hefty function where you repeat similar code 3 times. It a function gets to long, it becomes harder to read. So refactor the code in to more manageable blocks. If you see the refactoring of the code, you can see I wrote it more concise and it covers all the use cases you have.</p>
<p>If one of those blocks has an error that is replicated in all 3 blocks, then you have to fix that error in all 3 of the blocks</p>
<h3>User input</h3>
<p>Validate user input. In the above example, I used <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim" rel="nofollow noreferrer"><code>string.prototype.trim</code></a> to at least ensure I don't have any whitespace leftover after the split</p>
<h3>Use objects to define your intervals</h3>
<p>I would argue that a work interval is defined as a defined time from a certain start to a certain end. By putting start &amp; end of an interval together, you have an easier way of manipulating the data afterwards.</p>
<p>For example, if I would like to erase a break, I could simply move the start of one object together with the end of the next object, say:</p>
<ul>
<li>Interval 8:00-8:25 and 8:30-8:55</li>
<li>Erase the end time for the first interval, would give me 8:00-8:55</li>
</ul>
    </div>