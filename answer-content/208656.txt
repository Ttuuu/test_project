<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Basic Algorithm</h1>
<p>At least if I understand the intent correctly, you simply want a count of the unique input characters that occurred at least twice.</p>
<p>In that case, I think I'd do something like this:</p>
<pre><code>int count_dupes(std::vector&lt;int&gt; const &amp;inputs) { 
    std::map&lt;int, int&gt; counts;

    for (auto i : inputs)
        ++counts[i];

    return std::count_if(counts.begin(), counts.end(),
                         [](auto const &amp;p) { return p.second &gt;= 2; });
}
</code></pre>
<p>I'd also consider using an array instead of a map, as outlined in an answer to an earlier question: <a href="https://codereview.stackexchange.com/a/208502/489">https://codereview.stackexchange.com/a/208502/489</a> --but this can depend on the range of values you're dealing with. With a 16-bit int, it's no problem at all on most machines. With a 32-bit <code>int</code> (and no other constraints on values) it's still possible on many machines, but probably impractical. For arbitrary 64-bit int, an array won't be practical.</p>
<h1>Parameter Passing</h1>
<p>Right now, you're passing the input by value. This means when you call the function with some vector, a copy of the original vector will normally be made and passed to the function. As a general rule, something like a vector that's potentially large and slow to copy should be passed by reference to const, as shown in the code above.</p>
<h1>Logical Comparisons</h1>
<p>Comparing a Boolean value to <code>true</code> or <code>false</code> is generally a poor idea. <code>if (x==true)</code> is equivalent to <code>if (x)</code> and <code>if (x == false)</code> is equivalent to <code>if (!x)</code>. Normally, if it's Boolean in nature, a variable should be given a name that reflects that nature, and should be used directly rather than being compared to <code>true</code> or <code>false</code>. For example, <code>s.insert(n).second == false</code> wold be better written as: <code>if (!s.insert(n).second)</code>.</p>
<p>Some people (understandably, I guess) prefer to use the written form: if <code>if (not s.insert(n).second)</code>. I've written C and C++ long enough that I have no difficulty with reading <code>!</code> as meaning "not", but especially if it may be read by people less accustomed to programming, it may make more sense to use the words instead of symbols.</p>
<h1>Formatting/Indentation</h1>
<p>At least to me, this indentation looks a bit odd:</p>
<pre><code>  if (s.insert(n).second == false &amp;&amp; m.find(n) == m.end()) {
      dups++;
      m.insert(pair&lt;int, int&gt;(n,0));
      // better to remove from vector than increase space with the map?
      // numbers.erase(remove(numbers.begin(), numbers.end(), n), numbers.end());          
    } else {
      s.insert(n);
    }
</code></pre>
<p>If you use indentation like that consistently, I guess it's not necessarily terrible, but I think more people are accustomed to something more like this:</p>
<pre><code>  if (s.insert(n).second == false &amp;&amp; m.find(n) == m.end()) {
      dups++;
      m.insert(pair&lt;int, int&gt;(n,0));
      // better to remove from vector than increase space with the map?
      // numbers.erase(remove(numbers.begin(), numbers.end(), n), numbers.end());          
  } else {
      s.insert(n);
  }
</code></pre>
<p>...where each closing brace is vertically aligned with the beginning of the block it closes. As a side-note, there are almost endless debates about the efficacy of various bracing styles. I'm not going to advocate for or against any of the well known styles, but I think there's a fair amount to be gained from using a style that's well known, and then using it consistently. I don't see much to gain from style that's different from what almost anybody else uses.</p>
    </div>