<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs</h2>

<p>Your simulation is buggy — and not just because an ant is involved!</p>

<p>It looks like you intend for each call of <code>AntFrame.SimulationThread.run()</code> to execute one step of the ant.  However, each call actually results in <strong>multiple steps</strong>, for two reasons:</p>

<ul>
<li><code>run()</code> calls <code>nextStep(…)</code> <strong>twice</strong>.  Furthermore, on the second call, it <strong>disregards the bounds check</strong>.</li>
<li>Within <code>nextStep(…)</code>, the <strong>eight cases are not mutually exclusive</strong>.  Rather, it's often the case that after a step is made, execution falls through to another <code>if</code> block.</li>
</ul>

<p>Note that the <code>inWorld(…)</code> bounds check is only done once, at the start of each call to <code>run()</code>.  Therefore, it is <strong>possible to step out of bounds</strong> and cause a crash.  (You have masked the effects of this bug by making the <code>inWorld(…)</code> bounds comparisons extra conservative.)  Furthermore, since the step counter is only occasionally incremented, the <code>Ant.steps</code> limit of 10000 is incorrectly enforced.  Also, the repainting of the display is requested less often than appropriate.</p>

<p>The way you have oriented your axes, <strong>"north" is towards the left of the screen</strong>.</p>

<p>The size of the <code>JFrame</code> and <code>JPanel</code>, 600×600, is insufficient to show a world of 400×400 cells.  Ideally, you should calculate the pixel dimensions by multiplying the world size by the number of pixels per cell.  Furthermore, instead of explicitly and redundantly calling <code>f.setSize(…, …)</code>, you should just set the <code>JPanel</code>'s preferred size, then call <code>f.pack()</code> to have the frame calculate its own appropriate size.</p>

<p>Swing methods should be called on the <a href="https://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html" rel="noreferrer">event dispatch thread</a>.</p>

<h2>Object-oriented design</h2>

<p>It's confusing that <code>AntFrame</code> is not a <code>JFrame</code>, as its name would suggest.  A more appropriate name would be <code>AntSim</code>.</p>

<p>In object-oriented programming, <strong>objects are nouns, and methods are verbs</strong>.  Instantiating an object should just bring a data structure, properly initialized, into existence; it should not also trigger events to happen.  Therefore, your <code>AntFrame()</code> constructor should not start the simulation thread.</p>

<p>How many <code>World</code>s should there be?  You instantiated <strong>two worlds</strong>.  One of them is a member variable of <code>AntFrame</code>.  There is also another one inside <code>Ant</code> — but that one is used for nothing but to get the world size for the <code>inWorld(…)</code> bounds check.</p>

<p><strong><code>World</code> is an underdeveloped class</strong>: as it is, it is just a glorified reference to a two-dimensional array.  You can't do anything with it except through the matrix returned by <code>getWorld()</code>.  That's bad design, because once you have returned the matrix, the caller has to read from and write to the matrix directly, breaking encapsulation.  Also, if you have to fetch the matrix, then <code>getWorldSize()</code> is not that useful, since the dimensions of the matrix can be determined using <code>.length</code> anyway.</p>

<p><strong><code>Direction</code> is an underdeveloped enum</strong>.  For each direction, you should be able to easily get the directions that are 90° to its left and right.  Furthermore, each direction should declare how a step in that direction should change the coordinates, in terms of (Δx, Δy).  With those improvements, you should be able to reduce the number of conditions in <code>Ant.nextStep()</code> by a factor of 4.</p>

<p><strong>It makes no sense for <code>Ant.inWorld()</code> and <code>Ant.nextStep()</code> to accept an <code>Ant</code> parameter.</strong>  Those are already methods of the <code>Ant</code> class; the ant that they act on should just be <code>this</code>.</p>

<p>I would expect <strong><code>Ant.step</code></strong> to keep track of the number of steps that the ant has taken.  Your <code>Ant.step</code> is just a constant, and I would consider the step limit to be a property of the simulation rather than of the ant.</p>

<p>The <code>AntFrame()</code> constructor redundantly initializes the ant's direction to south twice.</p>

<h2>Suggested solution</h2>

<p>Ant.java</p>

<pre><code>public class Ant {
    public static enum Direction {
        NORTH(0, -1),
        EAST(+1, 0),
        SOUTH(0, +1),
        WEST(-1, 0);

        public final int deltaX, deltaY;

        private Direction(int deltaX, int deltaY) {
            this.deltaX = deltaX;
            this.deltaY = deltaY;
        }

        /**
         * Returns the &lt;code&gt;Direction&lt;/code&gt; that is 90 degrees to the left.
         */
        public Direction left() {
            return Direction.values()[(this.ordinal() + 3) % 4];
        }

        /**
         * Returns the &lt;code&gt;Direction&lt;/code&gt; that is 90 degrees to the right.
         */
        public Direction right() {
            return Direction.values()[(this.ordinal() + 1) % 4];
        }
    }

    private int x, y, steps;
    private Direction direction;

    public Ant(int x, int y, Direction direction) {
        this.x = x;
        this.y = y;
        this.direction = direction;
    }

    public int getSteps() {
        return this.steps;
    }

    public int getX() {
        return this.x;
    }

    public int getY() {
        return this.y;
    }

    public Direction getDirection() {
        return this.direction;
    }

    public boolean isInWorld(World w) {
        return 0 &lt;= this.getX() &amp;&amp; this.getX() &lt; w.getSize() &amp;&amp;
               0 &lt;= this.getY() &amp;&amp; this.getY() &lt; w.getSize();
    }

    public void step(World w) {
        World.Color c = w.getCellColor(this.getX(), this.getY());
        this.direction = (World.Color.WHITE == c) ? this.direction.right()
                                                  : this.direction.left();
        w.setCellColor(this.getX(), this.getY(), c.inverse());
        this.x += this.direction.deltaX;
        this.y += this.direction.deltaY;
        this.steps++;
    }

    public String toString() {
        return String.format(
            "Ant(%4d, %4d, %s)", this.getX(), this.getY(), this.getDirection()
        );
    }
}
</code></pre>

<p>World.java</p>

<pre><code>public class World {
    public static enum Color {
        WHITE, BLACK;

        public Color inverse() {
            return WHITE.equals(this) ? BLACK : WHITE;
        }
    }

    private Color[][] cells;

    public World(int size) {
        this.cells = new Color[size][size];
        for (int x = 0; x &lt; size; x++) {
            for (int y = 0; y &lt; size; y++) {
                this.cells[x][y] = Color.WHITE;
            }
        }
    }

    public int getSize() {
        return this.cells.length;
    }

    public Color getCellColor(int x, int y) {
        return this.cells[x][y];
    }

    public void setCellColor(int x, int y, Color c) {
        this.cells[x][y] = c;
    }
}
</code></pre>

<p>AntSim.java</p>

<pre><code>import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class AntSim {
    private JFrame frame;
    private JPanel antPanel;
    private World world;
    private Ant ant;

    public class AntPanel extends JPanel {
        private final int dotSize;

        public AntPanel(int dotSize) {
            int pixels = dotSize * world.getSize();
            this.dotSize = dotSize;
            this.setPreferredSize(new Dimension(pixels, pixels));
            this.setBackground(Color.WHITE);
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            for (int x = 0; x &lt; world.getSize(); x++) {
                for (int y = 0; y &lt; world.getSize(); y++) {
                    if (world.getCellColor(x, y) == World.Color.BLACK) {
                        g.setColor(Color.BLACK);
                        g.fillRect(dotSize * x, dotSize * y, dotSize, dotSize);
                    }
                }
            }
        }
    }

    public AntSim() {
        this.world = new World(100);
        this.world.setCellColor(50, 50, World.Color.BLACK);
        this.ant = new Ant(50, 50, Ant.Direction.SOUTH);

        this.frame = new JFrame("Langton's Ant");
        this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.frame.setLayout(new FlowLayout());
        this.frame.add(this.antPanel = new AntPanel(3));
        this.frame.pack();
        this.frame.setVisible(true);
    }

    public void run(int maxSteps, long delay, long period) {
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                if (!(ant.getSteps() &lt; maxSteps &amp;&amp; ant.isInWorld(world))) {
                    timer.cancel();
                } else {
                    SwingUtilities.invokeLater(() -&gt; { antPanel.repaint(); });
                    ant.step(world);
                }
            }
        }, delay, period);
    }

    public static void main(String... args) {
        SwingUtilities.invokeLater(() -&gt; {
            new AntSim().run(15000, 400, 5);
        });
    }
}
</code></pre>
    </div>