<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Checking for a duplicate in the results array is one slow point. It adds one level of complexity because each <code>contains</code> call has to loop over the whole list. Instead use a <code>Set</code> (if you can use ECMAScript 6) or store the strings as a key in an object (this however requires counting the keys at the end which can be a bit bothersome unless you can use <code>Object.keys()</code> which in turn requires ECMAScript 5.1):</p>

<pre><code>var resultSet = {};

// ... inside the loop if the substring is a palindrome
resultSet[substring] = true;

var count = 0;
for (key in resultSet) {
   if (resultSet.hasOwnProperty(key)) count++;
}
return count;
</code></pre>

<p>(I just realized you are using <code>let</code> so you can use <code>Set</code>, too. I'm just leaving this in, in case it interests someone else.) </p>

<hr>

<p>There is no reason to actually create the reverse string in order to check for a palindrome. Instead simply loop over the first half of the string and compare the <em>n</em>th character with the (<em>length</em> - <em>n</em> - 1)th character.</p>

<pre><code>function isPalindrom(str) {
  var len = str.length;
  var half = Math.floor(len / 2);
  for (var i = 0; i &lt; half; i++) {
    if (str.charAt(i) !== str.charAt(len - i - 1)) {
      return false;
    }
  }
  return true;
}
</code></pre>

<hr>

<p>This even could be taken one more step: There is no reason to create the substring for the palindrome detection, except to put it in the result set afterwards.</p>

<pre><code>function isPalindrom(str, from, to) {
  let len = from - to + 1;
  let half = Math.floor(len / 2);
  let end = from + half + 1;
  for (var i = from; i &lt; end; i++) {
    if (str.charAt(i) !== str.charAt(len - i - 1)) {
      return false;
    }
  }
  return true;
}

function countPalindromesInString(s) {

    let subStrings = new Set();

    for (let i = 0; i &lt; s.length; i++) {
      for (let j = 0; j &lt; s.length - i; j++) {
        let end = j + i + 1;
        if (isPalindrom(s, j, end)) {
          subStrings.push(s.substring(j, end));
        }
      }
    }

    return subStrings.size;
}
</code></pre>
    </div>