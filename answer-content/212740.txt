<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a much easier way to do this. Python slicing allows you to reverse a string with <code>s[::-1]</code>. So you can just do:</p>

<pre><code>def is_palindrome(s):
    return s == s[::-1]
</code></pre>

<p>To make this work for integers, you can just <code>str()</code> the int.</p>

<p>Why would you want to do it this way? For one, you're already converting to a string. So this approach shouldn't have any worse performance characteristics. Your use of a <code>deque</code> here is probably a bit overkill. <code>deque</code>s make sense when you have lots of prepending to lists. Here, your numbers aren't likely to be that many digits (even though integers in python can be arbitrarily large).  And then on top of this you then convert back to an <code>int</code>, which is an unnecessary step (as you could just compare the strings) and could fail (although it shouldn't).</p>

<p>And beyond the performance, using the <code>deque</code> (and converting back to an <code>int</code>) makes it more difficult to understand what your code is doing. <code>s[::-1]</code> is a well understood idiom that clearly conveys its purpose in context (<code>s == s[::-1]</code>).</p>

<p>I wouldn't return a tuple from the function. It's much more informative to return a <code>bool</code> and then use that to print whatever string you want:</p>

<pre><code>if is_palindrome(str(num)):
    print(f'{num} is a palindrome')
else:
    print(f'{num} is not a palindrome')
</code></pre>

<p>You should also look into <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a> to make your code look more consistent with Python's widely accepted style guide.</p>

<p>Looking at the performance:</p>

<pre><code>$ python3 -m timeit -s 'from funcs import polindrome' 'polindrome(123456654321)'
200000 loops, best of 5: 1.26 usec per loop

$ python3 -m timeit -s 'from funcs import is_palindrome' 'is_palindrome(str(123456654321))'
500000 loops, best of 5: 435 nsec per loop
</code></pre>

<p><code>is_palindrome</code> is about 2.8 times faster.</p>

<p>You may also want to write some <a href="https://docs.python.org/3/library/unittest.html" rel="noreferrer">unit tests</a> as there are some strange cases that your code may not handle correctly (eg. should <code>120</code> be a palindrome of <code>21</code> since <code>021 == 21</code> or not since they are different lengths?)</p>
    </div>