<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is pretty good as-is. There are other ways to do the same thing, but yours is fine.</p>

<p>One thing I noticed is that you've skipped braces on the <code>if...else</code> in <code>reverseFromMap</code>. My advice is to <em>always</em> use braces, even for one-line expressions.</p>

<p>However, you could also do</p>

<pre><code>reversedMap[value] || (reversedMap[value] = []);
reversedMap[value].push(key);
</code></pre>

<p>You can collapse that into 1 line, although it's a little <em>too</em> terse if you ask me</p>

<pre><code>(reversedMap[value] || (reversedMap[value] = [])).push(key);
// or 
(reversedMap[value] = reversedMap[value] || []).push(key);
</code></pre>

<p>Or just reduce it to a ternary</p>

<pre><code>reversedMap[value] ? reversedMap[value].push(key) : reversedMap[value] = [key];
</code></pre>

<p>The <code>_.isUndefined</code> check isn't really required, since <code>reversedMap[key]</code> is either a non-empty array, or it's false'y.</p>

<p>Other small stuff:</p>

<ul>
<li><p>I'd prefer the name <code>iterator</code> instead of <code>callback</code>, but lo-dash uses <code>callback</code> in similar situations, so sticking with that convention is fine.</p></li>
<li><p>You don't necessarily need the <code>identity</code> function, as you could also do</p>

<pre><code>x = callback ? callback(x) : x;
</code></pre>

<p>and just not bother with the identity function. It may or may not be faster - I haven't benchmarked it. In any event, both approaches work just fine, so there's no need to change anything.</p></li>
<li><p>If you do need an identity function, lo-dash has one built-in (<code>_.identity</code>). Saves you having to type it out.</p></li>
<li><p>Lastly, if you want to be stringent, you might want to check whether <code>callback</code> is a function, instead of just doing "default if false'y". E.g.</p>

<pre><code>callback = _.isFunction(callback) ? callback : _.identity;
// or just plain JS
callback = typeof callback === 'function' ? callback : _.identity;
</code></pre>

<p>Personally, I'd skip this, though. If people pass in something that's not a function, it's their bug to deal with. Besides, I'd rather have the code fail loudly than having it silently ignore my (faulty) <code>callback</code> argument and default to something else without telling me. Still, type-checking is an option, so I thought I'd mention it.</p></li>
</ul>

<p>As for alternatives to the overall approach, I'd use <code>_.transform</code> (which is basically the same as <code>reduce</code>/<code>foldl</code> but aimed at objects)</p>

<pre><code>var reverseMapFromMap = function(map, callback) {
  callback = callback || _.identity;
  return _.transform(map, function (memo, value, key) {
    key = callback(key);
    memo[value] || (memo[value] = []);
    memo[value].push(key);
  }, {});
}
</code></pre>

<p>And again for <code>mapFromReverseMap</code></p>

<pre><code>var mapFromReverseMap = function(reverseMap, callback) {
  callback = callback || _.identity;
  return _.transform(reverseMap, function (memo, keys, value) {
    _.forEach(keys, function (key) {
      memo[callback(key)] = value;
    });
  }, {});
};
</code></pre>
    </div>