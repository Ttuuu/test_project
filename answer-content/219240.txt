<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When drawing graphics I admit that it in general can be difficult to split the code into meaningful sub methods because often many variables are used across different sections of the process. A way to do it could be to make a non static class, that holds the entire data set, constant key measurements and other resources as member fields/properties and then split the huge method <code>plot_curve(...)</code> into meaningful sub methods.</p>

<p>At least I would extract the preprocessing of the input data and the postprocessing of the resulting bmp in to dedicated methods.</p>

<hr>

<blockquote>
  <p><code>List&lt;(double x, double y)</code></p>
</blockquote>

<p>You use a named tuple as data type for points. Why not use the built in <code>PointF</code> instead. Or - if you want the double precision in calculations - make your own <code>PointD</code> data type - and then abstract the conversion to and from <code>Point</code> and <code>PointF</code> away in cast operators. I think that would make the entire code more readable. There are a lot of inline casting, that could be avoided this way, and you could use the <code>Graphics.DrawXXX(...)</code> overrides that take <code>PointF</code> arguments instead of <code>x,y</code> arguments.</p>

<hr>

<blockquote>
<pre><code>  if (perf_curve_type == 0)
  {
    throw new ArgumentException("Invalid performance curve type specified.", nameof(perf_curve_type));
  }
</code></pre>
</blockquote>

<p>You make this test, but what about values above 4? Should it even be necessary for an <code>enum</code> type?</p>

<hr>

<blockquote>
<pre><code>  List&lt;(string x_title, string y_title, List&lt;(double x, double y)&gt; xy)&gt; parsed_xy = encoded_plot_data.Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
      .Select(line =&gt;
      {
        var headers = line.Trim().Split('/').First().Split(';');
        var r = (x_title: headers[0], y_title: headers[1], xy: line.Trim().Split('/').Skip(1).Select(b =&gt; (x: double.Parse("" + b.Split(';')[0]), y: double.Parse("" + b.Split(';')[1]))).ToList());
        r.xy = r.xy.OrderBy(a =&gt; a.x).ThenBy(a =&gt; perf_curve_type == perf_curve_types.roc ? a.y : 1 - a.y).ToList();
        return r;
      }).ToList();
</code></pre>
</blockquote>

<p>This fails for the provided test input, because there is a whitespace line as the last line. You need to filter that out before the <code>Select(line...)</code> statement:</p>

<pre><code>  CultureInfo parseFormat = CultureInfo.InvariantCulture;
  List&lt;(string x_title, string y_title, List&lt;(double x, double y)&gt; xy)&gt; parsed_xy = encoded_plot_data.Split(new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
    .Where(line =&gt; !string.IsNullOrWhiteSpace(line)) 
    .Select(line =&gt;
    {
      var headers = line.Trim().Split('/').First().Split(';');

      var r = (x_title: headers[0], y_title: headers[1], xy: line.Trim().Split('/').Skip(1).Select(b =&gt; (x: double.Parse("" + b.Split(';')[0], parseFormat), y: double.Parse("" + b.Split(';')[1], parseFormat))).ToList());

      r.xy = r.xy.OrderBy(a =&gt; a.x).ThenBy(a =&gt; perf_curve_type == perf_curve_types.roc ? a.y : 1 - a.y).ToList();
      return r;
    }).ToList();
</code></pre>

<p>As shown above you also need a proper format provider, when parsing the coordinates and other numbers in order to handle <code>'.' and ','</code> correctly in respect to the file format.</p>

<p>Have you considered to use a <code>Regex</code> pattern instead?</p>

<hr>

<blockquote>
  <p><code>.ToList()</code></p>
</blockquote>

<p>You have a lot of these calls where you make a LINQ queries. For large data sets they might be expensive, because they create a copy of the data set. They should be unnecessary when just querying the set, so consider to avoid them as much as possible and only use them when you want to create a sub set reused more than once.</p>

<p>For instance:</p>

<blockquote>
<pre><code>public static double area_under_curve_trapz(List&lt;(double x, double y)&gt; coordinate_list)
{
  coordinate_list = coordinate_list.Distinct().ToList();
  coordinate_list = coordinate_list.OrderBy(a =&gt; a.x).ThenBy(a =&gt; a.y).ToList();
  var auc = coordinate_list.Select((c, i) =&gt; i &gt;= coordinate_list.Count - 1 ? 0 : (coordinate_list[i + 1].x - coordinate_list[i].x) * ((coordinate_list[i].y + coordinate_list[i + 1].y) / 2)).Sum();
  return auc;
}
</code></pre>
</blockquote>

<p>could be written as:</p>

<pre><code>public static double area_under_curve_trapz(List&lt;(double x, double y)&gt; coordinate_list)
{
  var auc = coordinate_list
    .Distinct()
    .OrderBy(a =&gt; a.x)
    .ThenBy(a =&gt; a.y)
    .Select((c, i) =&gt; 
      i &gt;= coordinate_list.Count - 1 
      ? 0 
      : (coordinate_list[i + 1].x - coordinate_list[i].x) * ((coordinate_list[i].y + coordinate_list[i + 1].y) / 2)).Sum();
  return auc;
}
</code></pre>

<p>It's just a query, that doesn't modify the source set, so it's safe to operate on that directly. </p>

<hr>

<p>In general all graphic resources like pens, fonts, brushes etc as:</p>

<blockquote>
  <p><code>new SolidBrush(title_color)</code></p>
</blockquote>

<p>should be disposed after use, so wrap them in a <code>using</code> statement.</p>

<hr>

<blockquote>
  <p><code>new Font("Tahoma", (int)graph_start_y / 4, GraphicsUnit.Pixel)</code>
  <code>new Font("Tahoma", (int)graph_start_x / 4, GraphicsUnit.Pixel);</code></p>
</blockquote>

<p>You repeatedly recreate these fonts, but <code>graph_start_x</code> and <code>graph_start_y</code> are constant throughout the method, so create them once</p>

<hr>

<blockquote>
<pre><code>      for (var y = 0.0; y &lt;= 1.0; y += 0.1)
      {
        var x1 = scale(0.0, 0.0, 1.0, graph_start_x, graph_end_x);
        var x2 = scale(1.0, 0.0, 1.0, graph_start_x, graph_end_x);
        ...
</code></pre>
</blockquote>

<p>In some of the loops you instantiate <code>x1, x2</code> or <code>y1, y2</code> inside the loop although they are invariant while the loop is running. Consider to declare them before the loop:</p>

<pre><code>      var x1 = scale(0.0, 0.0, 1.0, graph_start_x, graph_end_x); are constant =&gt; out of loop
      var x2 = scale(1.0, 0.0, 1.0, graph_start_x, graph_end_x);
      for (var y = 0.0; y &lt;= 1.0; y += 0.1)
      {
        ...
</code></pre>

<hr>

<p>All in all I think the output is quite nice. I would make some adjustments in font sizes and the placement of the AUC results, and I wouldn't rotate the values on the x-axis.</p>

<p>Consider to use a bitmap format that is compressed - for instance png. The produced output in bmp format has a size of about 15 MB where a png only takes &lt; 1 MB.</p>
    </div>