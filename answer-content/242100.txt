<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>review if this code can be improved upon for any redundancy or optimizations.</p>
</blockquote>

<p><strong>Micro optimization</strong></p>

<p>String duplication does not take advantage of the pre-calculation of the length.</p>

<pre><code>    data[i] = malloc(sizeof(char) * strlen(*items) + 1);
    if (data[i] == NULL) goto err;
    strcpy(data[i], *items);
</code></pre>

<p>For longer strings, code may (or may not) improve with the below.  This <em>tended</em> to improve things.  Less so today (usually a tie) unless in embedded platforms.</p>

<pre><code>    size_t sz = strlen(*items) + 1;
    data[i] = malloc(sz);  // dealing with `char` strings, no need for sizeof(char)
    if (data[i] == NULL) goto err;
    memcpy(data[i], *items, sz);
</code></pre>

<p>Note: <code>sizeof(char) * strlen(*items) + 1</code> is logically wrong.  Should have been <code>sizeof(char) * (strlen(*items) + 1)</code>, yet since <code>sizeof(char)</code> is 1, makes no arithmetic difference.</p>

<p><strong>Redundancy</strong></p>

<p>No need to start at 0 and add 1: Start at 1.  Better to use <code>size_t</code> for sizing.  Better to size to the referenced type, than explicitly code the type.</p>

<pre><code>// int size = 0; 
size_t size = 1; 
for (char **ptr = items; *ptr; ptr++) {
    size++;
}
// char **data = malloc(sizeof(char *) * (size + 1));
char **data = malloc(sizeof *data * size);
</code></pre>

<p>Even better, just subtract:</p>

<pre><code>for (char **ptr = items; *ptr; ptr++) {
    ;
}
size_t size = ptr - items; 
char **data = malloc(sizeof *data * size);
</code></pre>

<hr>

<p><strong>Design flaw</strong></p>

<p><code>if (data[i] == NULL) goto err;</code> fails to free prior allocations.</p>

<p><strong>Design</strong></p>

<p>The <code>for (int i = 0; *items; items++, i++)</code> increments one pointer with a ++ and indexes the other.  I'd expect the same for both.</p>

<p><strong>Caller flaw</strong></p>

<p><code>free(data);</code> leaks the individual strings. Recommend coding a <code>freeList(char **)</code>.</p>
    </div>