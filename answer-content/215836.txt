<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You usually want a zero-width word boundary <code>\b</code> on either end of the regex, to avoid matching things like <code>1a:1a</code>.</p>

<p>There's no need to capture <code>[a-z]+</code> since you are throwing it away. </p>

<p>You can use lookbehind <code>(?&lt;=…)</code> assertions to require a match to be preceded by whatever, without including the whatever in the match result.  This means no need for capturing parenthesis, only the integer is included in the match, and the final map is simply <code>_.toInt</code>. Variable-width lookbehind was introduced in Java 9; older versions have only fixed-width lookbehind.</p>

<p>Finally, removing the variable makes braces unnecessary.</p>

<pre><code>def numericValues(text: String): List[Int] = """(?&lt;=\b[a-z]+\s*:\s*)\d+\b""".r.findAllIn(text).toList.map(_.toInt)
</code></pre>

<p>With only fixed-width lookbehind, you could postprocess the matches to remove non-numerics:</p>

<pre><code>….map(_.replaceAll("[^0-9]", "").toInt)
</code></pre>

<p>Or, more idiomatically and less hacky, just capture the digits and extract the capture groups:</p>

<pre><code>"""\b[a-z]+\s*:\s*(\d+)\b""".r.findAllIn(text).matchData.toList.map(_.group(1).toInt)
</code></pre>
    </div>