<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Logic</h2>
<blockquote>
<p>Is the basic logic OK? Any obvious improvements?</p>
</blockquote>
<p>Well does the game work? If so then the basic logic must be OK.</p>
<p>Is there room for improvement, yes.</p>
<p>The code is tangled mess of roles and states.</p>
<ul>
<li>You have 4 functions that manage 7 distinct game states.</li>
<li>There is some repeated code (win and lose).</li>
<li>You have magic values in the code (text prompts and displays)</li>
<li>The whole thing runs in a continuous blocking state which is VERY bad for browser based code (you can not exit until end game)</li>
<li>There is no checking for repeated character guesses, or valid character guesses.</li>
<li>You randomly pick words, not checking if a new game is using an already used word.</li>
</ul>
<h2>Example</h2>
<p>The example shows some alternative approaches to creating game like state machines.</p>
<p>Note that I do not use the console, prompt, or confirm, thus the game needs an additional wait state to wait for input.</p>
<p>Nor do I vet input for repeats, or bad characters.</p>
<p><strong>update</strong> I have fixed the <code>inplay</code> state to only allow <code>start</code> when not <code>inplay</code></p>
<p>Some points.</p>
<ul>
<li>Uses finite state model to control the game.</li>
<li>Settings out of the code and grouped in one place to allow easy changes.</li>
<li>Encapsulate the game in a singleton (to keep the global scope clean)</li>
<li>Though I do not use prompt and confirm, the state changes use <code>setTimeout</code> to change between states, this stops the game from blocking the page.</li>
<li>States are pedantic but there roles are clear and without ambiguity.</li>
</ul>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";  // Always add this to the top of your code.


/* Start game is external state request */
document.getElementById("play").addEventListener("click", ()=&gt; {
    hangman.state = "start";
})


const hangman = (()=&gt; {
    const settings = {
        limit : 4,
        words : ["fish","cat","chicken","freedom","turnip"],
        text : {
            start : "Guess one letter at a time to reveal the secret word.",
            prompt : "Guess a letter. You have ## remaining guesses", // ## is replaced with remaining guesses
            good : "Well done.",
            bad : "That letter in not in the secret word.",
            win : "Yay, you guessed it!",
            lose : "You have used all your guesses. Game Over.",
            again : "Play again Y/[N] ",
            gameOver : "You have used up all the words. GAME OVER!",
            exit : "Bye!",
        }
    };
    
    const display = text =&gt; log(settings.text[text] ? settings.text[text] : text);
    var word, player, inplay, wrongGuesses;
    

    
    function start() {
        if(settings.words.length &gt; 0){
            word = settings.words.splice(Math.random() * settings.words.length | 0, 1)[0];
            player = "";
            wrongGuesses = 0;
            display("start");
            display("Cheat &gt;&gt;&gt; " + word + " &lt;&lt;&lt;&lt;");
            return states.guess;
        }
        return states.gameOver;
    }
    
    function getPlayerGuess() {
        const gotKey = (key) =&gt; {
          const guess = key.toLowerCase();
          player += guess;
          game.state = word.indexOf( guess ) === -1 ? states.badGuess : states.goodGuess;
        }
        var remaining = settings.limit - wrongGuesses;
        const guess = prompt(settings.text.prompt.replace("##", remaining), gotKey);
        return states.wait;
    }    

    function checkPlayer(){
        var wordDisplay = ""; 
        for (const char of word) { wordDisplay += player.indexOf(char) &gt; -1 ? char : "_" }
        display(wordDisplay);
        return wordDisplay === word ? states.win : states.guess;
    }
    
    const states = { // All game states named
        start : 1,
        guess : 2,
        badGuess : 3,
        goodGuess : 4,
        win : 5,
        lose : 6,
        playAgain : 7,
        gameOver : 8,
        wait : 9,
    };

    const game = {  // assign property game.state to change state
        set state(value) { 
            if(! inplay){
                if(value === "start") {
                    value = states.start;
                } else {
                    return;
                }
            }
            inplay = true; // prevents game restart while in play     
            var nextState; // if left undefined then game ends
            switch(value) {
                case states.wait:
                   return;
                case states.playAgain:
                    confirm(settings.text.again, result =&gt; {
                       game.state = result ? states.start : states.exit;
                    }); 
                    nextState = states.wait;
                    break;
                case states.start:
                    nextState = start();
                    break;
                case states.guess:
                    nextState = getPlayerGuess();
                    break;
                case states.goodGuess:
                    display("good");
                    nextState = checkPlayer();
                    break;
                case states.badGuess:
                    display("bad")
                    wrongGuesses += 1;
                    nextState = wrongGuesses === settings.limit ? states.lose : states.guess;
                    break;
                case states.win:
                    display("win");
                    nextState = states.playAgain;
                    break;                
                case states.lose:
                    display("lose");
                    nextState = states.playAgain;
                    break;
                case states.gameOver:
                    display("gameOver");   
                    break;
                default :
                    return;
            }
            if (nextState) { setTimeout(() =&gt; game.state = nextState, 0) }
            else { 
                display("exit");
                inplay = false; 
            }
        }
    };
    return game;
})();






















/*========================================================================*/
/*========== unrelated code to handle input and display ==================*/
var prompting;
var keyVal;
document.addEventListener("keyup",e=&gt;{
    if(prompting){
        keyVal = e.key;
        prompting = false;
    }
})
function prompt(text,cb){
    var ticker = 0;
    const line = log(text );
    prompting = true;
    function tick(){
        if(prompting){
            line.textContent = text + (ticker++ &amp; 1 ? "?" : ".");
            setTimeout(tick, 250);
        }else{
            line.textContent = text + "! " + keyVal;
            cb(keyVal[0]);
        }
    }
    tick();
}
function confirm(text, cb){
   prompt(text,(key)=&gt;{ cb(key.toLowerCase() === "y") });
}
function log(text){
    var line;
    if(textContainer.children.length &gt; 7){ line = textContainer.removeChild(textContainer.querySelector(".text")) }
    else{ line = Object.assign(document.createElement("div"),{className : "text"}) }
    textContainer.appendChild(line)
    line.textContent = text;
    return line;
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
   background : black;
   font-size : 16px;
   color : #0f0;
.text {


}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;input type="button" id="play" value="play hangman"&gt;
&lt;code id="textContainer"&gt;
&lt;/code&gt;</code></pre>
</div>
</div>

<h2>Style</h2>
<blockquote>
<p>Any details or matters of style I need to address?</p>
</blockquote>
<p>The style is generally good. Adding spaces after opening and before closing parentheses is a little unusual <code>console.log( solutionSoFar.join( " " ) )</code> it is by no means bad. The most important aspect of code style is that you use it consistently, which you have done.</p>
<p>Comments should be kept to a minimum, they constitute un-vetted noise. None of your comments are needed, the code is self explanatory.</p>
<h2>Variable declaration type</h2>
<blockquote>
<p><code>var</code> vs <code>const</code> vs <code>let</code> - ... My basic approach was "If it needs to be global, use <code>var</code>, if it's not going to change, use <code>const</code> and if it is going to change but is not global, use <code>let</code>."</p>
</blockquote>
<h3><code>const</code></h3>
<p>OK first <code>const</code> it will be the most used type of variable declaration in any good code. You used it correctly for <code>words</code> but missed using it for <code>limit</code>.</p>
<p>For <code>solutionSoFar</code> which holds an array you assign a new array each time you need. There is nothing wrong with that. But it could also have been a <code>const</code> and it would be declared as <code>const solutionSoFar = []</code>; and <code>solutionSoFar.length = secretWord.length;' followed by </code>solutionSoFar.fill("_");`</p>
<p>Doing it this way lets you keep additional references to the same array, and reduces the overall memory management overhead (in this case negligible overhead)</p>
<h3><code>var</code> V <code>let</code></h3>
<p>Using either in global scope makes no difference apart from when you can access them.</p>
<p><code>var</code> is function scope and hoisted. The global scope can be thought of as the global function and <code>var</code> has scope to everything within that call. It is also hoisted to the top of the code and thus accessible at any time (however it may not yet contain a value).</p>
<p><code>let</code> is block scoped and is not hoisted. Again the global scope like a function is contained in a block and thus <code>let</code> is accessible from anywhere but only after its been declared or it will throw an error (Warning <code>let</code> and <code>const</code> can not be accessed before they have been declared) .</p>
<p>Which to use?</p>
<p>The argument that block scope reduces bugs is non sequitur.</p>
<p>What you use is up to you. But <code>var</code> for global and <code>let</code> for functions makes no sense. I use the rule that if declared in function scope (and not a <code>const</code>) it should be a <code>var</code></p>
<p>eg</p>
<pre><code>function foo() {
    var funcScope;  // this is correct for function scope
    let blockScope; // This could / (should in my book) be function scope

    if (true) {
        var blockVar; // this is function scoped and should be at the top
                      // of the function
        blockScope = 0;    // Reference error blockScope is not defined
                           // The next line recreates the variable for this
                           // scope putting the name in a temporary dead zone
                           // This is a run time error and will not be 
                           // thrown when parsing even in strict mode.
                           
        let blockScope; // this is correct and is a new instance, not the
                        // same as the previouse declared blockScope
    }
}
   
</code></pre>
    </div>