<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><blockquote>
  <p><code>Node</code> wants a constructor</p>
</blockquote>

<pre><code>Node(const Type&amp; tp, Node * prev = nullptr, Node * next = nullptr)
   : element(tp)
   , prev(prev)
   , next(next)
{}
</code></pre></li>
<li><blockquote>
  <p>What can be simplified</p>
</blockquote>

<p><code>push</code>s and <code>pop</code>s. There is common functionality between a special and common cases. Consider for example <code>push_front</code>: after the push a new node would become <code>head</code>, no matter what:</p>

<pre><code>push_front(const Type&amp; tp) {
    node = new Node(tp, nullptr, head);
    if (head == 0) {
        tail = node;
    } else {
        head-&gt;prev = node;
    }
    head = node;
}
</code></pre>

<p>Other three function can be similarly streamlined.</p></li>
<li><p>A copy constructor shares too much code with <code>push_back</code>. Consider consolidating the common base. Ditto for a destructor and <code>clear</code>.</p></li>
<li><p>You may want to assert your invariants: if you have, say, <code>head == nullptr</code>, you must also have <code>tail == nullptr</code> and <code>count == 0</code>.</p></li>
</ul>
    </div>