<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>malloc</h2>

<p>I start with one of the most common ones. Instead of <code>char *board = malloc(sizeof(char) * BOARD_SIZE)</code> write <code>char *board = malloc(sizeof(*board) * BOARD_SIZE)</code>. If you decide to change the type in the future, you don't have to change at more than one place. And besides, <code>sizeof(char)</code> is ALWAYS 1.</p>

<p>But the biggest problem is that you're not checking the return value. It should look like this:</p>

<pre><code>void *init_board()
{
    char *board = malloc(sizeof(char) * BOARD_SIZE);
    if(!board) { 
        /* Handle error */ 
    } else {     
        for(int i = 0; i &lt; BOARD_SIZE; i++) {
            board[i] = ' ';
        }
    }
    return board;
}
</code></pre>

<p>Or like this:</p>

<pre><code>void *init_board()
{
    char *board = malloc(sizeof(char) * BOARD_SIZE);
    if(board) {
        for(int i = 0; i &lt; BOARD_SIZE; i++) {
            board[i] = ' ';
        }
    }
    return board;
}
</code></pre>

<p>But if you choose the latter one, then you need to check the return value of <code>init_board()</code>.</p>

<p>Another thing about the board variable. Why not make it into a 3x3 array instead? It's overkill to call malloc for a 9 byte array. I would do like this instead:</p>

<pre><code>const int dim=3;

void init_board(char board[dim][dim]) 
{
    for(int i=0; i&lt;dim; i++)
        for(int j=0; j&lt;dim, j++)
            board[i][j]=' ';
}
</code></pre>

<p>And then in <code>main()</code></p>

<pre><code>char board[3][3];
init_board(board);
</code></pre>

<h2>scanf</h2>

<p>You're also not checking the return value of <code>scanf</code>. That should also always be done.</p>

<pre><code>scanf(" %d %d", &amp;x, &amp;y);
</code></pre>

<p>should be</p>

<pre><code>if(scanf(" %d %d", &amp;x, &amp;y) != 2) {
    /* Handle error */
} else {
</code></pre>

<p>But if you ask me, the best method, even though it takes a few more lines, is this:</p>

<pre><code>const size_t buffer_size = 100;
char buffer[buffer_size];
if(!fgets(buffer, buffer_size, stdin)) {
    /* Handle error */
} else {
    if(sscanf(buffer, "%d %d", &amp;x, &amp;y) != 2) {
        /* Handle error */
    }
}
</code></pre>

<h2>bool</h2>

<p>No reason to define <code>bool</code>, <code>true</code> and <code>false</code> on your own. Just include <code>stdbool.h</code>.</p>

<h2>const</h2>

<p>A minor thing is that you should declare <code>playerOneChar</code> and <code>playerTwoChar</code> as <code>const</code>.</p>

<h2>style</h2>

<p>This is my personal preference, but I think you waste a lot of space with unnecessary braces. I would at least move the opening brace to then end of previous line, except for functions. Like this:</p>

<pre><code>bool is_draw(char *board)
{
    for(int i = 0; i &lt; BOARD_SIZE; i++) {
        if(board[i] == ' ') {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>or even</p>

<pre><code>bool is_draw(char *board)
{
    for(int i = 0; i &lt; BOARD_SIZE; i++) 
        if(board[i] == ' ') 
            return false;
    return true;
}
</code></pre>

<p>Remember that readability also includes not having to scroll more than necessary. Putting the opening brace on the line before or sometimes even removing them completely barely makes it harder to read at all. If you ask me it's even easier. But it can save you a ton of lines, making more code visible at the same time. In the above example I would probably remove the braces for the if statement, but keep the braces for the for loop.</p>

<p>I usually go by the <a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html" rel="nofollow noreferrer">coding style guide for the Linux kernel</a>, except that I prefer a tab size of 4 instead of 8.</p>

<p>Apart from these things, I think it looks pretty good. Nice work.</p>
    </div>