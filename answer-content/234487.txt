<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You initialize a certain value as <code>x</code> but you never update it - even though this value is <strong>completely arbitrary</strong>. Which means you are not really using it in the solution. This is a <strong>certain indication</strong> that your solution is <strong>wrong</strong>, and only works on the special case that you tested.</p>
<p>If the "pivot" point (i.e. the point where the the max value is followed by the min value) is in the left half of the array you will get a max value, and if it's in the right half you will get a min value.</p>
<p>i.e. if I input this array <code>[10,11,12,1,2,3,4,5,6,7,8,9]</code> it will return 12, but if I input this <code>[5,6,7,8,9,10,11,12,1,2,3,4]</code> it will output 1.</p>
<h1>Problem Context</h1>
<p>Searching a value in an array can be up to <code>O(n)</code> in time complexity - you have to iterate through the array and check for each element if it's equal the search value. But - if the array is sorted, this is reduced to <code>O(log(n))</code> due to a strategy called <strong>Binary Search</strong>. Binary search allows us at each time cut half of the options to consider. You check the middle element in the array, if the search value is bigger you can discard the lower half, if it's lower you can discard the upper half, and now you do the same for the remaining array - until you either find the value or end up with an empty/1-element array - in that case the element is not in the array.</p>
<p>Here there is a problem that the array is swapped - the question is can we still reduce the time complexity to <code>O(log(n))</code> ?</p>
<p>The key insight here is that <strong>even though the array itself is not perfectly sorted, at least half of it IS</strong> - and so we can always tell something about that half, and reduce our scope. This is true for every sub-division we make of the array - at least half of it will be sorted (and in some cases, both halves).</p>
<p>If we are looking for the min/max value, we basically don't care about the part that is sorted, because the pivot value will be in the other half (though the mid value should be included, as it can be the min/max value) - so we can discard the sorted part.</p>
<p>If we are looking for a specific value - we can automatically check if our value is in the range of the sorted half, if it is we discard the non-sorted half, and focus on the sorted. If it's not we focus on the non-sorted - and do the same.</p>
<h1>Find Min value</h1>
<p>Here is a solution in python - here we check if the right half is sorted. If it is, we reduce our scope to the left half. If not, we reduce our scope to the right half (note that in that case we can safely discard the mid point and move beyond it).</p>
<pre><code>def findMin(arr):
    start = 0
    end = len(arr) - 1
    while(start &lt; end):
        mid = (start + end) // 2
        rightSorted = arr[mid] &lt; arr[end]
        if rightSorted:
            end = mid
        else:
            start = mid + 1
    return arr[start]
</code></pre>
<p>The decision to check the right is not arbitrary - it is necessary in case we search for a min value. If we instead search the left, and find out it is sorted - we could not confidently discard that half, as the array might be perfectly sorted - in that case the 0th element is the minimum. So we choose the right in order to be completely sure we still have the min value in the sub array.</p>
<h1>Find Max value</h1>
<p>In python this is actually very easy - you just need to go one element before the minimum - and even if the min is in 0 position, python interprets -1 as the last element of the array. So you could just use the same code as above, but with <code>return arr[start-1]</code>.</p>
<p>Alternatively, we could reverse the min function above:</p>
<pre><code>def findMax(arr):
    start = 0
    end = len(arr) - 1
    while(start &lt; end):
        mid = (start + end) // 2
        leftSorted = arr[mid] &gt; arr[start]
        if leftSorted:
            start = mid
        else:
            end = mid - 1
    return arr[start]
</code></pre>
<h1>Finding a specific value</h1>
<p>If we want to check if a specific value exists in the array - the same key insight hold.</p>
<pre><code>def findVal(arr, val): 
    start = 0
    end = len(arr) - 1    
    while(start &lt; end):
        mid = (start + end) // 2
        rightSorted = arr[mid] &lt; arr[end] and arr[start] &gt; arr[mid]
        if rightSorted:
            if val &gt;= arr[mid] and val &lt;= arr[end]:
                start = mid
            else:
                end = mid - 1
        else:
            if val &gt;= arr[start] and val &lt;= arr[mid]:
                end = mid
            else:
                start = mid + 1
    return val == arr[start]
</code></pre>
<p>A few differences: (1) we have to check if our value is in the sorted half, and if not discard it. (2) in order to avoid getting stuck with a sorted array of 2 elements - we have to define that the right half is sorted only if also the left half is not sorted (or vice versa). (otherwise we'll be stuck in an endless loop, as mid value won't advance)</p>
<p>[We could also create a less elegant implementation that simply goes until 2 elements and then just check if one of them is the value; or we could also always check the mid value and if it is the correct value return true, and if not we always discard it - I chose this implementation because I think it's more elegant and it is close to the other 2 min/max functions above]</p>
    </div>