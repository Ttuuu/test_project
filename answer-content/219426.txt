<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Some Tips</h1>

<ul>
<li>Avoid using constructor.</li>
<li>Avoid using <code>.bind(this)</code></li>
<li>Destructuring will help you to make cleaner code.</li>
</ul>

<h1>Questions</h1>

<blockquote>
  <ol>
  <li>Avoid initializing the state empty state in the constructor. However, I had to initialize shoppingCart: [] in componentDidMount hook to avoid type error. What is the better and cleaner approach?</li>
  </ol>
</blockquote>

<p>You can have 2 aproaches to this</p>

<ol>
<li><p>There is a way to avoid this, what you do is destruct the state in the variables you want and set then a default value of an array.</p>

<pre><code>state = {}

render() {
    const {
        shoppingCart = []
    } = this.state
    ...
}
</code></pre>

<p>This way you don't need to check if <code>shoppingCart</code> is an array, and you only need to declare <code>this.state</code> as an object ( it can be just an empty object ).</p>

<p>You can also do </p>

<pre><code>render() {
        const {
        shoppingCart = []
    } = this.state || {}
    ...
}
</code></pre>

<p>And now you don't even need <code>state = {}</code> </p></li>
<li><p>Because you are using arrow functions, you don't need <code>.bind(this)</code> and also you can avoid de constructor and just use</p>

<pre><code>state = {
    ...
}
</code></pre>

<p>This way you can declare <code>shoppingCart</code> and <code>items</code> and don't need to declare it in <code>componentDidMount</code> (wich is much better to understand) and now don't need to destruct the state.</p>

<pre><code>state = {
    shoppingCart = [],
    items = []
}
</code></pre>

<p>This way is good if the data you will get is always an array (or the type you specify) and another good reason to use this is that when other programmer look at the code, they will immediately know what is stored in that component state, but when you have too many things in the state, it can get confused.</p></li>
</ol>

<p>This aproaches will solve some problems like using ternary to check if you have an state and then return the mapping or if you don't have, return an empty array.</p>

<pre><code>render() {

    const {
        items = [],
        shoppingCart = []
    } = this.state

    let aisleList = items.map((item, index) =&gt; {
        return (
            &lt;div key={index}&gt;
                &lt;span&gt;{item}&lt;/span&gt;
                &lt;input
                    type="checkbox"
                    id={index}
                    value={item}
                    onClick={this.handleAileClick}
                /&gt;
            &lt;/div&gt;
        );
    });

    let cartList = shoppingCart.map((item, index) =&gt; {
        return (
            &lt;div key={index}&gt;
                &lt;span&gt;{item}&lt;/span&gt;
                &lt;input
                    type="checkbox"
                    autoComplete="off"
                    value={item}
                    onClick={this.handleCartClick}
                /&gt;
            &lt;/div&gt;
        );
    });
    ...
}
</code></pre>

<p>Looking at this, is much clean and easy to understand.</p>

<blockquote>
  <ol start="2">
  <li>Is it good practice to keep the logic simple in handleXXXClicks, separation of concern one for handling items and one for shoppingCart?</li>
  </ol>
</blockquote>

<p>You can do the way you want, but you need to see what you will do in the future, if both will always do the same, you can create one function for both and just send a different parameter, but if they will do some extra stuff, it's good to have then separated.</p>

<p>*(I'm not english native speaker and maybe I didn't understand exaclty what is this part about).</p>

<blockquote>
  <ol start="3">
  <li>I feel aisleList and cartList bloated and I could have written itemComponent which is avoidable duplicate code.</li>
  </ol>
</blockquote>

<p>Yes, they look so similar that you should create a component for both and pass the diference in props.</p>

<blockquote>
  <ol start="4">
  <li>Is there any better way to handle the item in setState? I couldn't think of using prevState in my scenario.</li>
  </ol>
</blockquote>

<p>Here is simple <code>setState</code> using a function with <code>prevState</code>. Note that the way you are doing it, you need to have <code>event.persist()</code>, for more info look <a href="https://reactjs.org/docs/events.html#event-pooling" rel="nofollow noreferrer">here</a></p>

<pre><code>handleCartClick = event =&gt; {
    event.persist();

    this.setState(prevState =&gt; {
        return {
            items: [...prevState.items, event.target.value],
            shoppingCart: prevState.shoppingCart.filter(item =&gt; {
                return item !== event.target.value;
            })
        };
    });
};
</code></pre>

<h1>Overall</h1>

<p>Your code looks ok, there is only one strange thing. You are using checkboxes and when you click, some get marked and other don't. I don't know if that was a test or you also wanted to solve the checkbox problem. Let me know and I can see what I can do.</p>

<p>I recommend you to start using some new things like I mentioned in the tips part, that help you alot and make your code cleaner.</p>

<p>Also have a look at <a href="https://reactjs.org/docs/hooks-intro.html" rel="nofollow noreferrer">hooks</a>.<br>
For me, using hooks makes alot of things easier, but also, the code looks cleaner.</p>

<p>I made a <a href="https://codesandbox.io/s/y2q17ynnzv" rel="nofollow noreferrer">demo</a> for you to test and see the new code. I changed some things.</p>

<ul>
<li>I changed <code>handleCartClick</code> but left <code>handleAileClick</code> the way it was before, so you can try useing <code>prevState</code> yourself.</li>
<li>And also left the part of <code>itemComponent</code> for you.</li>
</ul>

<p>The best way to learn, is doing it!</p>

<p>Hope I helped you! </p>
    </div>