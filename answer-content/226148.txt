<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some minor comments:</p>

<ul>
<li><p>No need to define <code>min</code>. Just <code>#include &lt;algorithm&gt;</code>and use <code>std::min</code>.</p></li>
<li><p>Move your magic numbers (like <code>MAX_WEIGHT</code>) right after the includes. That way, you avoid passing them around your methods.</p></li>
<li><p>Rather than returning all your vectors from <code>readFromFile</code> as output variables, and in order to shorten your type signature, return a struct instead in that function: </p></li>
</ul>

<pre class="lang-cpp prettyprint-override"><code>struct MassObjectsDescription {
  std::vector&lt;int&gt; weights;
  std::vector&lt;int&gt; startingOrder;
  std::vector&lt;int&gt; endingOrder;
  // Probably more fields here...
}

MassObjectsDescription readFromFile(int argc, char* argv[]) {
  // ...
}
</code></pre>

<p>You may want to move to classes in further iterations of your code.</p>

<ul>
<li><p>No need to <code>return 0</code> at the end of the main method.</p></li>
<li><p>Rather than reserving <span class="math-container">\$n\$</span> elements on vectors, instantiate them with the appropriate size as you have done in <code>std::vector&lt;int&gt; permutation(n);</code>.</p></li>
<li><p><code>int const &amp;n</code>. You may want to remove the reference to <code>n</code> as it is const, and there is no benefit (in fact, any) by passing the reference of such a little variable as an integer. Good job, though, doing it with vectors; it is a good practice doing so in order to avoid unnecessary copies.</p></li>
<li><p>Consider splitting your line <code>result +=</code> into several lines with auxiliary variables. It is impossible guessing what's going on with such long line.</p></li>
<li><p><code>int x = i;</code>. You first assign <code>x</code> to <code>i</code>, but suddenly it's got a value from <code>permutation</code> vector. Use <code>i</code> until changing its value and consider renaming the variable.</p></li>
<li><p>You are chaining <code>if(z==0)</code>, <code>if(z==1)</code>, <code>if(z==2)</code>... It is good practice to use <code>else if</code> or even switch statements. Plus, it would be a good idea creating a function that you may reuse to create vectors from istringstreams:</p></li>
</ul>

<pre class="lang-cpp prettyprint-override"><code>vector&lt;int&gt; readVector(std::istringstream&amp; iss, int n) {
    vector&lt;int&gt; v(n);
    for (int i = 0; i &lt; n; ++i) {
        int d;
        iss &gt;&gt; d;
        v[i] = d - 1;
    }
    return v;
}
</code></pre>

<ul>
<li><p>As a general rule, try to initialize variables <em>as close</em> to their first use. For instance, in your code you shouldn't be able to see the word <em>vector</em> in your main method; everything should be encapsulated on your methods.</p></li>
<li><p>Also, as a general rule, try to minimize the number of parameters of your functions. With the tips that I have given you above, probably you will end up having up to 3 or 4 parameters per function. </p></li>
</ul>

<p>Hopefully somebody else can give you some advice about exceptions.</p>
    </div>