<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Readability 1</strong></p>
<p>You mentioned splitting the code into functions, but functions should also be meaningful.</p>
<p>I would remove the <code>def difficult_easy():</code> functions, since they just call the <code>main_func</code> anyway, and put the contents of each of those functions directly in the if-else branch in the starting() function.</p>
<p>Like this:</p>
<pre><code>if difficult == 1:
    main_func(['hall', 'exam', 'road', 'gate', 'debt', 'poet', 'sir', 'girl', 'food'], 14)
</code></pre>
<p>This makes the code more readable and shorter. These 3 functions don't add anything useful or readable. They force me to look at the bottom of the file to see what they do, when that code could be in the same place as the if-else branch.</p>
<p><strong>Readability 2</strong></p>
<pre><code>if letter not in alphabet:
    print('You should enter only one letter!\n ')
</code></pre>
<p>I would add <code>continue</code> here on the line after <code>print</code> . It doesn't change the functionality, but it makes it clear that this is the end of the <code>while</code> loop in this branch and when reading the code I don't have to read further to see if anything more happens after the if-else branching. It also ensures that you don't accidentally execute code that you might add later on below the if-else branch.</p>
<p><strong>Readability 3</strong></p>
<pre><code>if letter not in alphabet:
    print('You should enter only one letter!\n ')
elif len(letter) != 1:
    print('You can only display 1 letter at a time\n')
</code></pre>
<p>These "early exit" branches are nice and make the code more readable. You could make one more early exit in the same style, by moving the</p>
<pre><code>if letter in guessed_letters:
    print('You have already guessed this letter!\n\n')
</code></pre>
<p>To come third here, instead of being nested at the very bottom. Logically, it doesn't change the program, but it becomes more readable and less nested, which is generally a good thing.</p>
<p><strong>Use variables</strong></p>
<p>You have defined the variable <code>length = len(secret_word)</code> but you're not using it, instead you are repeating <code>len(secret_word)</code> several times in the code that follows, where you could just use <code>length</code>.</p>
<p><strong>Other 1</strong></p>
<pre><code>output = []

for i in range(len(secret_word)):
    output.append('_')
</code></pre>
<p>All of this can be replaced by just one line <code>output = "_" * length</code>  since Python allows multiplying a string by a number. (It has to be below the definition of <code>length</code>)</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#common-sequence-operations</a></p>
<p><strong><s>Other 2</s></strong> (edit: this suggestion is not valid, we do need the index for the output. )</p>
<pre><code>for n in range(length):
    if secret_word[n] == letter:
        output[n] = letter.upper()
</code></pre>
<p>The above is a very C-style loop, but in Python you don't need to loop through the indexes, you can access the characters in the string directly like this:</p>
<pre><code>for c in secret_word:
    if c == letter:
        output[n] = letter.upper()
</code></pre>
<p><strong>Other 3</strong> (added after posting)</p>
<pre><code>if again.lower() == 'yes' or again.lower() == 'y':
</code></pre>
<p>To avoid repeating <code>again.lower()</code> , this can be changed into</p>
<pre><code>if again.lower() in ['yes', 'y']:
</code></pre>
<p>When you have more than 2 options, this becomes even more useful.</p>
<p><strong>Final comments</strong></p>
<p>Regarding classes and functions, I don't think you need them. This program is small enough and readable that it would just become more complex if you add classes and functions. If you want to practice, I suggest writing a bigger program instead where they would come to good use.</p>
    </div>