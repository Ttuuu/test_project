<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>While working on the stack you are using <code>stack.extend</code>. You can also use this in the part where you add the immediate subclasses.</li>
<li>There is no need to check if a list is empty before using <code>extend</code>, if it is empty it will just do nothing.</li>
<li>If you don't need the exception, just don't catch it with <code>as _</code>.</li>
<li>Not sure if you should be doing <code>if cls is type</code> instead of <code>if cls == type</code>.</li>
</ul>



<pre><code>def all_subclasses(cls):

    if cls == type:
        raise ValueError("Invalid class - 'type' is not a class")

    subclasses = set()

    stack = []
    try:
        stack.extend(cls.__subclasses__())
    except (TypeError, AttributeError) as ex:
        raise ValueError("Invalid class" + repr(cls)) from ex  

    while stack:
        sub = stack.pop()
        subclasses.add(sub)
        try:
            stack.extend(sub.__subclasses__())
        except (TypeError, AttributeError):
           continue

    return list(subclasses)
</code></pre>

<p>One way to optimize this further is to make sure you don't visit a class multiple times:</p>

<pre><code>    while stack:
        sub = stack.pop()
        subclasses.add(sub)
        try:
            stack.extend(s for s in sub.__subclasses__() if s not in subclasses)
        except (TypeError, AttributeError):
           continue
</code></pre>

<p>This should prevent having to visit (almost) every class twice with convoluted hierarchies like this:</p>

<pre><code>    A
  /   \
 B     C
  \   /
    D
 / | | \
E  F G ...
</code></pre>
    </div>