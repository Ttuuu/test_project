<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend starting the script with a shebang so it can be executed as a program:</p>

<pre><code>#!/bin/bash
</code></pre>

<p>As there's nothing in here that isn't standard shell, then we can make it leaner by using plain POSIX shell instead:</p>

<pre><code>#!/bin/sh
</code></pre>

<p>I recommend <code>set -eu</code>, to cause the shell to abort in more error cases.</p>

<p>We can save one fork by using <code>exec</code> for the final command.  In either case, the exit status should indicate whether the command completed successfully (if running from <code>cron</code>, consider using <code>chronic</code> when running the script, to only be mailed about the failures).</p>

<p>I question the use of <code>zip</code> as archive format - <code>tar</code> is generally installed on all Linux systems, and is the nearest we have to a standard.  <code>zip</code> usually needs to be specifically added.  Also, <code>tar</code> supports the <code>-C</code> option so that we can store relative paths in the archive, which may be useful if this backup is restored onto a new system with different file layout.</p>

<p>And whilst your quoting is good, it's slightly over the top - variable assignment is implicitly double-quoted.</p>

<pre><code>#!/bin/sh

date=$(date +%F-%T)
war=$HOME/public_html # Web Application Root
domain=example.com
archive=mediawiki_general_backups/$domain-directory-backup-$date.tar.gz

exec tar -C "$war" cfz "$archive" "$domain"
</code></pre>

<p>Finally, are you sure that's a good place to keep your backups?  If the disk fails and you lose the site contents, you've probably lost the backups as well.  I hope that this is only the first stage in making your backups and that you have a mechanism to transfer the archive files to offline media (preferably off-site) that you haven't shown us.</p>
    </div>