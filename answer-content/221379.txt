<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because I'm a fan of functional programming, I want to implement this without any <code>for</code> or <code>while</code> loops, which necessarily require mutating variables. </p>

<p>The way I'd do this, is with a recursive function. </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function findIndexes(n, h, acc = [], currentIndex = 0) {
  const index = h.indexOf(n);

  if (index &lt; 0) {
    return acc;
  } else {

    const newHaystack = h.slice(index + 1);
    return findIndexes(n, newHaystack, [...acc, index + currentIndex], currentIndex + index + 1);
  }
}

console.log(findIndexes("abr", "abracadabra"));
console.log(findIndexes("1", "1111"));
console.log(findIndexes("12", "121212"));
console.log(findIndexes("1212", "12121212")); //This one is a tricky case, as the sub strings overlap. 
console.log(findIndexes("1221", "1221221221"));
console.log(findIndexes("111", "11111111111"));
console.log(findIndexes("a", "banana"));</code></pre>
</div>
</div>


<p>Now, whether you want to implement that <code>indexOf</code> function yourself is up to you, but in any case - this how I'd do the rest of it. </p>
    </div>