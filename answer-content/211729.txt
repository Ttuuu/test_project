<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>No need for recursion. You may want to first convert the tuples to a <code>dict</code> to make it more readable. Then iterate over the <code>dict</code> to construct an ordered list.</p>

<p>In terms of efficiency (or time / space complexity), your code is <span class="math-container">\$O(n^3)\$</span> in time and <span class="math-container">\$O(1)\$</span> in auxiliary space. Note that <code>idx = tuples.index(e)</code> is not necessary at all, since <code>tuples.index(e) == i</code>. Making use of this would allow your code to be <span class="math-container">\$O(n^2)\$</span> in time. The most time-efficient solution is <span class="math-container">\$O(n)\$</span>, which is also the time complexity of the proposed solution involving a <code>dict</code>. However, the auxiliary space complexity of that solution is <span class="math-container">\$O(n)\$</span> -- inferior to your original approach.</p>

<p>If you want to update the order after obtaining a new <code>tuples</code> list, you can keep the <code>dict</code> and iterate over the new <code>tuples</code>, comparing with values in the <code>dict</code> to see if there is any change. However, the efficiency of this approach would probably be in most cases worse than constructing a new <code>dict</code> from scratch.</p>

<hr>

<pre><code>from collections import defaultdict

def tuples_to_neighbors_dict(tuples):
  """
  Covert `tuples` to a dict mapping each point to a list of its neighbors.
  """
  neighbors = defaultdict(list)

  for (a,b) in tuples:
    neighbors[a].append(b)
    neighbors[b].append(a)

  return neighbors

def tuples_to_order(tuples, start=0):
  """
  Covert `tuples` to a list of points.
  """
  neighbors = tuples_to_neighbors_dict(tuples)
  order = []

  prev = None
  current = start

  while current != start or prev is None:
    # add the current value to the list
    order.append(current)

    # move to the next -- pick the neighbor which we haven't visited yet
    neigh = neighbors[current]
    new = neigh[1] if neigh[0] == prev else neigh[0]
    prev = current
    current = new

  return order
</code></pre>

<hr>

<p><strong>EDIT</strong> ¬† I just now looked at the SO question and noticed that one answer is almost identical to mine üòÅ</p>
    </div>