<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Don't use non-portable terminal escape codes</h1>
<p>The <code>tput</code> program exists for exactly this purpose:</p>
<pre><code>red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
nocolor=$(tput sgr0)
</code></pre>
<p>(I've downcased your variable names, to avoid surprising conflicts with environment variables)</p>
<h1>Inline the single use functions</h1>
<p><code>show_success</code> and <code>show_error_and_exit</code> are laudable, and do help readability, but they are only used once each, and may be clearer if written directly into <code>error_handler</code>.  Either way, their output really ought to go to the error stream: <code>&gt;&amp;2</code>.</p>
<h1>Reduce duplication</h1>
<p>Look at this pattern:</p>
<pre><code>echo -e "\n${GREEN}Step 1: configure packages${NOCOLOR}"
echo -e "${YELLOW}dpkg --configure -a${NOCOLOR}"

sudo dpkg --configure -a

error_handler $?  1
</code></pre>
<p>This structure is repeated throughout the program, but it can be refactored.  Let's write the variable parts using variables:</p>
<pre><code>echo "${green}Step ${step}: ${description}${nocolor}"
echo "${yellow}${command}${nocolor}"

$command

error_handler $?  $step
</code></pre>
<p>There's three things we need: a step number, description, and the command to run.  The command needs to be an array; that's easy to arrange by passing it as <em>all the arguments after description</em>.  We can also inline the <code>error_handler</code>:</p>
<pre><code>do_action()
{
    step=$1; shift
    description=$1; shift
    printf "${green}Step %s: %s\n" "$step" "$description"
    printf "${yellow}"
    printf '%q ' "$@"
    printf "${nocolor}\n"

    if "$@"
    then
        printf "${green}Step %s: SUCCESS${nocolor}\n" "$step"
    else
        err=$?
        printf "${red}Step %s: FAILED${nocolor}\n" "$step" &gt;&amp;2
        exit $err
    fi
}
</code></pre>
<p>This function is then used as:</p>
<pre><code>i=0
do_action $((++i)) "configure packages" dpkg --configure -a
do_action $((++i)) "fix broken dependencies" apt-get install --fix-broken
do_action $((++i)) "update cache" apt-get update
do_action $((++i)) "upgrade packages" apt-get upgrade
do_action $((++i)) "upgrade distribution" apt-get dist-upgrade
do_action $((++i)) "remove unused packages" apt-get --purge autoremove
do_action $((++i)) "clean up" apt-get autoclean
</code></pre>
<p>You might choose to make the step number a global variable and increment it inside the function; I haven't done that, because global variables tend to proliferate and make the program hard to reason about.</p>
<h1>Don't sudo in a script</h1>
<p>Many calls to <code>sudo</code> is a sign that the entire script needs superuser capabilities, so it's better if the user runs the script as root.  You could automate this (though I would personally just error out):</p>
<pre><code>test $EUID = 0 || exec sudo $0 "$@"
</code></pre>
<hr>
<h1>Full program</h1>
<pre><code>#!/bin/bash
set -e -u

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
nocolor=$(tput sgr0)

do_action()
{
    step=$1; shift
    description=$1; shift
    printf "${green}Step %s: %s\n" "$step" "$description"
    printf "${yellow}"
    printf '%q ' "$@"
    printf "${nocolor}\n"

    if "$@"
    then
        printf "${green}Step %s: SUCCESS${nocolor}\n" "$step"
    else
        err=$?
        printf "${red}Step %s: FAILED${nocolor}\n" "$step" &gt;&amp;2
        exit $err
    fi
}

i=0
do_action $((++i)) "configure packages" dpkg --configure -a
do_action $((++i)) "fix broken dependencies" apt-get install --fix-broken
do_action $((++i)) "update cache" apt-get update
do_action $((++i)) "upgrade packages" apt-get upgrade
do_action $((++i)) "upgrade distribution" apt-get dist-upgrade
do_action $((++i)) "remove unused packages" apt-get --purge autoremove
do_action $((++i)) "clean up" apt-get autoclean
</code></pre>
    </div>