<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you are looking for ways to 'modernise' the code you might try some linq bits and pieces.</p>

<p>There should be no need for explicit adding to lists.</p>

<p>As the input numbers are both of the same size, we can easily use <code>.Zip()</code> to merge the digits. <strong>Note:</strong> We need to call <code>.ToArray()</code> or something else to evaluate the zip before we try to use the <code>carry</code> value to add the last digit or else it will not have the correct value.</p>

<p>Adding the last digit is a bit messy but works.</p>

<p><code>string.Join()</code> on the enumeration seems neater than the loop of <code>Write()</code> calls, but that is pretty much a matter of personal preference.</p>

<pre><code>public static void Main()
{
    var res = AddTwo(97,43);
    System.Console.WriteLine(string.Join("", res.Select(n =&gt; n.ToString())));
}


private static IEnumerable&lt;int&gt; AddTwo(int a, int b)
{
    int carry = 0;
    var digits = GetDigits(a).Zip(GetDigits(b), (x,y) =&gt; AddWithCarry(x,y, ref carry)).ToArray();

    return digits.Concat( carry == 1 ? new int[]{1} : Enumerable.Empty&lt;int&gt;()).Reverse();

}

private static int AddWithCarry(int a, int b, ref int carry)
{
    var sum = a + b + carry;
    var ret = sum %10;
    carry = (ret == sum) ? 0 : 1;
    return ret;    
}

private static IEnumerable&lt;int&gt; GetDigits(int value)
{
    while(value &gt; 0)
    {
        yield return value%10;
        value /=10;
    }
}
</code></pre>
    </div>