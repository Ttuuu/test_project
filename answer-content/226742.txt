<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This isn't exhaustive, because I don't have much time now, so I might add some more later.</p>

<hr>

<p>As I said in a comment, I don't buy the idea of looping over one char at a time: it's not documented that the patterns should match exactly one character, and it complicates the definitions of things like <code>Scheme</code>, which could be <code>[a-z]+</code> and everyone would be happy. Of course, anytime you allow the user to use non-trivial regexes you have to take precautions, but this would allow things like look-aheads which could be useful.</p>

<p>My main complaint would be that it means you can't realisticly parse surrogate pairs, and if you expect to use this for anything other than URL-encoded URIs, then I think you need something more powerful. You could of course deal with surrogate pairs specifically, but that would just add complexity.</p>

<p>It also means that comments like <code>// Using single letters for easier debugging</code> are somewhat frighening, because they fail to test that the thing copes with non-single-length tokens. Most importantly, <code>AuthorityPrefix</code> appears to be required to be <code>//</code>, but your system will match <code>/</code> as well: this would require two states to parse one-char-at-a-time.</p>

<p>This seems like a grand oportunity to exploit the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.match?view=netframework-4.8#System_Text_RegularExpressions_Regex_Match_System_String_System_Int32_" rel="noreferrer">Regex.Match(string, int) overload</a>, and parse the whole token at once, which may even simplify the implementation. I'll leave you the fun of implementing it... ;)</p>

<hr>

<p>I don't like this:</p>

<pre><code>foreach (var next in states.Where(s =&gt; s.Prev.Equals(token.Type)))
</code></pre>

<p>You should build a dictionary of prev/next pairs so that this things can hope with large numbers of transitions.</p>

<p>I'd be inclined to make <code>Tokenize</code> an instance member, so you can initialise a <code>Tokenizer</code> and reuse it. In my opinion this would provide a clearer API, and would make it easier to extend in future.</p>

<hr>

<p>I'm not wild about <code>Token</code> having a <code>StringBuilder</code>. Rather, it looks like a good candidate for an immutable class with a <code>string</code>. This would complicate the token creation.</p>

<p>Either way, you should initialize the first token fully: there is no guarentee that <code>createToken</code> will set the <code>StateIndex</code> to <code>0</code>. </p>

<hr>

<p>It would be nice if the <code>invalid character</code> exception gave some more information (e.g. what the current state is, how much has already been parsed).</p>

<hr>

<p><code>State.Next</code> is a confusing name: I think this is what dfhwze was getting at in the comments: all your states are tied to a transition, and the naming goes a bit funky as a result.</p>

<hr>

<p>The implemention of <code>State.IsMatch</code> is horrifying! I have no complaint with reflection, but this really should be cached, and you should probably build a single <code>Regex</code> object to reuse. Pre-loading the pattern would also create an exception somewhere useful (when the <code>State</code> is initialised) rather than when it is used. I also don't like that <code>State</code> is tied to the "enum with attribute" pattern: I'd rather it just had a regex attached, and a static method was provided to build it from the "enum with attribute" pattern. This would make the thing much more reusable. I'd actually be inclined to make <code>IState</code> (or whatever you call the thing that does the matching) an interface, so that it is completely general.</p>
    </div>