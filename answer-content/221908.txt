<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A starter note, throughout my answer: <code>FP = "functional programming"</code>.</p>

<h1>Possible Improvements</h1>

<p><strong>Use <code>==</code> rather than <code>is</code> for value comparisons.</strong></p>

<p>I see <code>if var is number</code> in multiple places. Specifically, lines 29, 96, 109. One could argue that <code>is</code> reads better than <code>==</code>, but the two are computationally different. (<code>is</code> breaks for large numbers.) Use <code>==</code> instead. See also: <a href="https://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is">Is there a difference between “==” and “is”?</a></p>

<p><strong>Thinking Functionally</strong></p>

<p>FP tends to avoid mutability, i.e. changing state. FP is more about telling the computer what things <em>are</em> rather than what things <em>do</em>. Here are a couple lines of code from <code>get_words</code> (lines 9-12):</p>

<pre><code># filter the words so that they have the same number of characters as the word in play.
words = [word.lower() for word in words_temp if len(word) is word_len]
# Get rid of any possible duplicates in the file.
words = list(set(words))
</code></pre>

<p>Sweet, looks innocent. But you're assigning to <code>words</code> twice... you're changing its state.</p>

<p>I like how Miran Lipovača (author of a Haskell tutorial) puts it:</p>

<blockquote>
  <p>[Y]ou set variable <code>a</code> to 5 and then do some stuff and then set it to something else. [...] If you say that <code>a</code> is 5, you can't say it's something else later because you just said it was 5. What are you, some kind of liar?<br>
  <sub><a href="http://learnyouahaskell.com/introduction" rel="nofollow noreferrer"><em>(source)</em></a></sub></p>
</blockquote>

<p>We can actually trim your two lines down to one by directly using a set comprehension and thereby eliminating the mutation of <code>words</code> (note also the replacement of <code>is</code> with <code>==</code>):</p>

<pre><code>words = list({word.lower() for word in words_temp if len(word) == word_len})
</code></pre>

<p>You could even return the list directly from the function!</p>

<p>Next, another interesting snippet (lines 29-33):</p>

<pre><code>if len(guesses) is 0:
    substitute = '.'
else:
    # exclude all of the wrong guesses
    substitute = f"[^{guesses}]"
</code></pre>

<p>This looks innocent too! But it also resembles an imperative statement: "if this, <code>substitute</code> is this, else <code>substitute</code> is that". We can make this more functional by clearly defining what <code>substitute</code> is:</p>

<pre><code>substitute = '.' if len(guesses) == 0 else f"[^{guesses}]"
</code></pre>

<p>And this reads "<code>substitute</code> is <code>'.'</code> if this else that". (Note how the statement is now <em>declarative</em> and the variable becomes the <em>subject</em> of the statement.)</p>

<p>Yet another snippet (lines 113-117):</p>

<pre><code># Get the frequencies of each character in the possible words.
stats = get_statistics(possible_words)

# Remove characters we've already guessed from the statistics.
[stats.pop(guessed_letter, None) for guessed_letter in guesses]
</code></pre>

<p>Line 117 is a list comprehension, which is in itself functional... <strong>but</strong> it's changing the state of <code>stats</code>! Instead of removing the <em>unneeded</em> letters, make a new dictionary with the <em>needed</em> letters.</p>

<p>And back to my point: with functional programming, avoid mutability, define variables as what they are and not what they do/how they come about.</p>

<p><strong>Game Loop and Mutability</strong></p>

<p>The game loop... ah. It's a while-loop... and this presents a couple problems.</p>

<ol>
<li>While-loops tend to be imperative construct (telling the interpreter to loop while something isn't true).</li>
<li><p>Since this is a dynamic game and since it's a single while-loop, you'll inevitably modify the state of surrounding variables to either keep track of progress.</p>

<pre><code>## Line 81 ##
# the number of guesses the computer has made.
num_of_guesses = 0

## Line 127 ##
# add our guess to the total listing of guesses.
num_of_guesses += 1
</code></pre>

<p>Lipovača: "But you just said <code>num_of_guesses</code> is 0!"</p></li>
</ol>

<p>Solution? Recursion. Pass in the mutable variables as arguments to the function and recurse all the way to the end. (Or of course, you could stick with the more readable <code>while</code>-loop. Some things are inevitable – <em>sigh</em>.)</p>

<p><strong>Consider using type-hints.</strong></p>

<p>This is really helpful in the world of FP. What does a function receive? What does it return? This allows you to reason with the input and output of functions. See also: <a href="https://stackoverflow.com/questions/32557920/what-are-type-hints-in-python-3-5">What are Type hints in Python 3.5</a></p>

<p><strong>Comments</strong></p>

<p>Yes, there are quite a lot. Some are unnecessary... and some of them are untruths.</p>

<p>Lines 20-21:</p>

<pre><code># Load the words in from the words.txt file.
words = get_words(num_of_characters)
</code></pre>

<p>What if the implementation of <code>get_words</code> changes? This comment becomes obsolete.</p>

<p>Lines 47-48:</p>

<pre><code># Print the list of possible words.
return possible_words
</code></pre>

<p>No printing here. You print it sometime later in the game loop, but not here. Here, there's only a return, which in itself doesn't do any printing.</p>

<p>Instead, consider commenting what each function <em>does</em>, preferably using Python doc-strings.</p>

<pre><code>def get_words(word_len):
    """
    Returns a list of words each with length equal to `word_len`.
    """
</code></pre>

<p>As above, you can choose to leave out the details of the implementation. Sure, <code>get_words</code> will open, read, and close a file, but this won't have any side-effects<sup>1</sup>. Perhaps in the future, you might want to load the words from a database, and the doc-string won't need to be updated, because the input and output are unchanged.</p>

<p><sup>1 – Unless if say, you're in a multi-threaded environment where the files will be accessed from different threads concurrently.</sup></p>

<p>We also don't need the comment on line 20: <code># Load the words in from the words.txt file.</code>. We can simply scroll to <code>get_words</code> and read the doc-string to know what it does.</p>

<p>See also: <a href="https://en.wikipedia.org/wiki/Self-documenting_code" rel="nofollow noreferrer">Self-Documenting Code</a>; <a href="https://stackoverflow.com/questions/209015/what-is-self-documenting-code-and-can-it-replace-well-documented-code">What is self-documenting code and can it replace well-documented code?</a></p>

<h1>The Bright Side</h1>

<p>Your program still has merits:</p>

<p><strong>Use of Functions</strong></p>

<p>Although all your functions are used only once, the functions clearly separate individual tasks, and this aids the reader to reason about the code.</p>

<p><strong>Variables</strong></p>

<p>Some are slightly redundant, but the names you've given them are helpful enough to remove at least a third of the comments.</p>

<p><strong>Use of f-strings</strong></p>

<p>f-strings are relatively new in Python, and they're not only more convenient, but also more functional over the OOP-variants: <code>str.format</code> and the <code>%</code>-printf notation. </p>

<p><strong>Use of Comprehensions</strong></p>

<p>I'm seeing quite a lot of comprehensions and no for-loop blocks. This is a merit: using a for-loop block with colon and suite bears the air of imperative programming (tells the interpreter to loop over an iterable), but comprehensions are more functional as they pack your values into a handy list/set/dictionary/generator expression.</p>

<p><strong>PEP 8</strong></p>

<p>Formatting is superb overall. What with snake_case, spacing, double line-breaks before and after functions, and a <code>if __name__ == '__main__'</code>. All this is good practice.</p>

<p>Keep it up!</p>
    </div>