<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>assorted findings</p>

<ul>
<li>your code does not <a href="https://www.python.org/dev/peps/pep-0257/#what-is-a-docstring" rel="nofollow noreferrer">document</a> what <code>predict()</code> accomplishes<br>
• I don't even get how the name <em>predict</em> is telling/helpful<br>
• your code documents neither the approach chosen nor alternatives disregarded</li>
<li>comparing a cheaper monotone function of Euclidean distance: nice<br>
• naming the variables without fussing that it's equivalent Euclidean at the end of the day rather than equal to or sum/Manhattan or max: nice, again</li>
<li>camelCase is not pythonic</li>
<li>initial value for minDistances should be <code>height*height+width*width+1</code></li>
<li>the approach visits each and every element of <code>mask</code></li>
<li>no <code>mask[x].index(True)</code> (careful with <code>mask[x].reverse().index(True)</code>)</li>
<li>the squares get computed time and again<br>
looks especially off with <code>x</code></li>
<li>code for the four pairs looks repetitive<br>
naming too, come to think of it</li>
<li>the mask example is useless for showing one value, only</li>
</ul>

<p><strong>context provided is lacking: what <em>is</em> <code>get the corners of [not-exactly-]quadrilateral</code></strong>?  </p>

<p>alternative approaches to find <code>closest to the [image] corners</code></p>

<ul>
<li>start from the middle<br>
when you find an element set, you still have to inspect all the element closer to the corner, up to the corner itself<br>
just complicates iteration</li>
<li>proceed in order of increasing distance from the corners<br>
+: you find elements set close to the corner early on<br>
  you don't need to look any further for that corner<br>
-: even with at least one element set, there may be more than two visits on average (solitary <code>True</code> in one corner)</li>
</ul>
    </div>