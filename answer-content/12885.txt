<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I thought about a comment, but too long, several things I can think of:</p>

<ol>
<li><p>This does not guarantee order, i.e. an item is entered into the next free slot, and if there is a fast producer, the order the consumer sees is not guaranteed. Is this intentional?</p></li>
<li><p>There is no atomic combined detach/attach operation, this means that for example:
Thread A: Attach starts, calls <code>getFree()</code>, which marks the node as not free (and is switched out before the element reference is set)
Thread B: is iterating, and hits this node, sees it's not free, so valid node, and returns this, if access to element is done (without a null pointer check), will result in an exception - I guess this is okay(?) Or should you test in your iterator and throw a ConcurrentModification?</p></li>
</ol>

<p>I think it's simpler if you maintain an <code>AtomicReference</code> in the node to the element and test that rather than a separate boolean and the reference.</p>

<p><strong>Edit 1:</strong></p>

<p>Looking at this:</p>

<pre><code>  // Doesn't matter if it fails. That would just mean someone else was doing the same.
  head.set(freeNode.next);
</code></pre>

<p>Is this necessarily correct? If Thread A sets <span class="math-container">\$n+1\$</span> as head at the same time as Thread B setting n as head, and B succeeds - is the ring in a consistent state? I guess the no ordering guarantee means that this doesn't matter too much, but it would violate the <span class="math-container">\$O(1)\$</span> claim! ;) In fact, I would question the whole <span class="math-container">\$O(1)\$</span> claim, this is at best <span class="math-container">\$O(1)\$</span> and at worst <span class="math-container">\$O(n)\$</span>...</p>
    </div>