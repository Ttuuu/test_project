<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>memoization</h1>

<p>The <code>_channel_to_hex</code> is called 3 times per pixel. It only takes 256 different inputs, so a logical first step would be to memoize the results. This can be done with either <code>functools.lru_cache</code></p>

<pre><code>from functools import lru_cache
@lru_cache(None)
def _channel_to_hex(color_val: int) -&gt; str:
    raw: str = hex(color_val)[2:]
    return raw.zfill(2)
</code></pre>

<p>This already reduces the time needed with about a 3rd</p>

<p>An alternative is using a dict:</p>

<pre><code>color_hexes ={
    color_val: hex(color_val)[2:].zfill(2)
    for color_val in range(256)
}

def rgb_to_hex_dict(red: int, green: int, blue: int) -&gt; str:
    return "#" + color_hexes[red] + color_hexes[green] + color_hexes[blue]
</code></pre>

<p>If the color-tuples are also limited (256**3 in worst case), so these can also be memoized</p>

<pre><code>color_tuple_hexes = {
    rgb_to_hex_dict(*color_tuple)
    for color_tuple in itertools.product(range(256), repeat=3)
}
</code></pre>

<p>This takes about 15 seconds on my machine, but only needs to be done once.</p>

<p>If only a limited set of tuples is used, you can also use <code>lru_cache</code></p>

<pre><code>@lru_cache(None)
def rgb_to_hex_dict(red: int, green: int, blue: int) -&gt; str:
    return "#" + color_hexes[red] + color_hexes[green] + color_hexes[blue]
</code></pre>

<h1>numpy</h1>

<p>if you have your data in a 3-dimensional numpy array, for example:</p>

<pre><code>color_data = np.random.randint(256, size=(10,10,3))
</code></pre>

<p>You could do something like this:</p>

<pre><code>coeffs = np.array([256**i for i in range(3)])
np_hex = (color_data * coeffs[np.newaxis, np.newaxis, :]).sum(axis=2)
np.vectorize(lambda x: "#" + hex(x)[2:].zfill(6))(np_hex)
</code></pre>
    </div>