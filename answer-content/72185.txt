<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The missed edge case</h3>

<p>The test case you're missing is longer text with non-repeating letters, for example: <code>abcdefghijkl</code>. And it's easy to fix that: just add these lines before the <code>return</code> statement:</p>

<pre><code>    if (holder &gt; charBlock) {
        charBlock = holder;
    }
</code></pre>

<p>The biggest clue for figuring out this problem was around these lines:</p>

<blockquote>
<pre><code>if((str.length() == 2) &amp;&amp; (str.charAt(i) != str.charAt(i+1))){
    charBlock =1; //return 1 if the length of the string is 2 and non of the two chars match
}
else if((str.length() == 3) &amp;&amp; (str.charAt(i) != str.charAt(i+1))){
    charBlock = 1; //return 1 if the length of the string is 3 and non of the three chars match
}
else if (str.charAt(i) == str.charAt(i+1)){
</code></pre>
</blockquote>

<p>That is, the special treatment for length 2 and 3. There doesn't seem to be a logical reason to treat these cases any special, and you could have quessed that this might break for longer strings. And as it turns out, these conditions are completely unnecessary: you can safely remove them, and the code will still pass the tests.</p>

<h3>Code review</h3>

<p>About this piece:</p>

<blockquote>
<pre><code>  int charBlock = 0;
  int holder = 1;
  if(str.length() == 0){ //If string is empty return 0
     charBlock = 0;
  } else if(str.length() == 1){ //If string contains only a single char return 1
     charBlock = 1;
  } else {
     // ...
  }
  return charBlock;
</code></pre>
</blockquote>

<p>Two things:</p>

<ul>
<li>It's good to use early returns to reduce the indent level and make the code more readable</li>
<li>It's good to limit variables to the smallest scope possible</li>
</ul>

<p>These two ideas go hand in hand in this example. Consider this alternative:</p>

<pre><code>    if (str.length() == 0) {
        return 0;
    }
    if (str.length() == 1) {
        return 1;
    }
    int charBlock = 0;
    int holder = 1;
    // ...
    return charBlock;
</code></pre>

<p>The guard statements don't need the <code>charBlock</code> or <code>holder</code> variable,
they can simply return,
and now those variables are declared where they are really needed.</p>

<p>When checking if a string is empty, use <code>str.isEmpty()</code> instead of checking on the length.</p>

<p>And in this program, you don't actually need the <code>str.length() == 1</code> check,
if you omit it the program will still work and pass the tests.</p>

<p>But the single biggest problem with this code, in my opinion,
is the naming of the variables <code>charBlock</code> and <code>holder</code>.
I would name them <code>longest</code> and <code>length</code>, respectively.</p>

<p>Putting the above suggestions together, the implementation becomes this:</p>

<pre><code>    if (str.isEmpty()) {
        return 0;
    }
    int longest = 0;
    int length = 1;
    for (int i = 0; i &lt; str.length() - 1; i++) {
        if (str.charAt(i) == str.charAt(i + 1)) {
            ++length;
            if (length &gt; longest) {
                longest = length;
            }
        } else {
            length = 1;
        }
    }
    if (length &gt; longest) {
        longest = length;
    }
    return longest;
</code></pre>

<p>Almost. There is one more important improvement to do: why update the longest length while still counting the same letters? It would be more efficient to move that piece of code to the <code>else</code> block, like this:</p>

<pre><code>        if (str.charAt(i) == str.charAt(i + 1)) {
            ++length;
        } else {
            if (length &gt; longest) {
                longest = length;
            }
            length = 1;
        }
</code></pre>

<h3>Unit testing</h3>

<p>When refactoring non-trivial code like this,
it's good to have unit tests to make it easy to re-validate everything, for example:</p>

<pre><code>@Test
public void test_hoopla() {
    assertEquals(2, maxBlock("hoopla"));
}

@Test
public void test_abbCCCddBBBxx() {
    assertEquals(3, maxBlock("abbCCCddBBBxx"));
}

@Test
public void test_empty() {
    assertEquals(0, maxBlock(""));
}

@Test
public void test_xyz() {
    assertEquals(1, maxBlock("xyz"));
}

@Test
public void test_xxyz() {
    assertEquals(2, maxBlock("xxyz"));
}

@Test
public void test_longer_nonrepeating_sequence() {
    assertEquals(1, maxBlock("abcdefghijkl"));
}
</code></pre>

<p>Especially when the contest provides the cases you should pass.
Heck, it's good to write unit tests always.</p>
    </div>