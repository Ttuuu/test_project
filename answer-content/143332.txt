<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, I would clean up the indices in the inner loop. I think the +2 and -2 are a bit confusing at the first glance.</p>

<pre><code>def sieve(n):
    array = []
    for i in range(0, n + 1):
        array.append(True)
    for i in range(2, n + 1):
        for j in range(2*i, n+1, i):
            if array[j] != False:
                if j % (i) == 0:
                    array[j] = False
    final = []
    for i in range(0, n+1):
        if array[i] == True:
            final.append(i)
    return final
</code></pre>

<p>This way, array indices directly correspond to their number, no conversion needed. This wastes array space for 0 and 1, but I think it is a lot easier to understand.</p>

<p>The primary optimization that is possible adjusts the ranges of the loops. Each non-prime 
<code>&lt;= n</code>
has a divisor <code>&lt;= sqrt(n)</code> and thus we can limit the outer loop to <code>range(2, math.sqrt(100) + 1)</code></p>

<p>Additionally we don't actually need to run the inner loop for numbers which are non-prime (since each non-prime has prime divisors) and we can add an <code>if array[i] == True:</code> to reduce the number of inner loops further.</p>

<p>The range of the inner loop can also be reduced. It actually can start at <code>i^2</code> instead of <code>2*i</code> since the argument made earlier also applies here. All non-primes smaller than <code>i^2</code> must have an divisor <code>&lt; i</code> and thus were already set to <code>false</code> in an earlier iteration of the outer loop.</p>

<p>If we apply these changes, we get the following code:</p>

<pre><code>def faster_sieve(n):
    array = []
    for i in range(0, n + 1):
        array.append(True)

    for i in range(2, int(math.sqrt(n)) + 1):
        if array[i] == True:
            for j in range(i*i, n + 1, i):
                if array[j] != False:
                    if j % i == 0:
                        array[j] = False
    final = []
    for i in range(2, n + 1):
        if array[i] == True:
            final.append(i)
    return final
</code></pre>

<p>For comparison we can run</p>

<pre><code>faster_sieve(int(math.pow(10, 7)))
</code></pre>

<p>and</p>

<pre><code>sieve(int(math.pow(10, 7)))
</code></pre>

<p>On my machine:</p>

<pre><code>~ time python faster_sieve.py
python faster_sieve.py  5.44s user 0.04s system 99% cpu 5.477 total

~ time python sieve.py 
python sieve.py  32.97s user 0.03s system 99% cpu 33.003 total
</code></pre>

<p>Which is a lot faster!</p>

<p>Now we could to some python microoptimizations, but I don't know anything about python. A first step could be to replace the <code>append</code>-loop with something faster like <code>array = [True] * (n + 1)</code>, which saves another second on my machine</p>

<pre><code>~ time python faster_sieve.py
python faster_sieve.py  4.46s user 0.02s system 99% cpu 4.475 total
</code></pre>

<p>So, yes indeed, your code could be further optimized.</p>

<p>/e
I might add that there are already good reviews of python code for the sieve on this site. For example <a href="https://codereview.stackexchange.com/questions/42420/sieve-of-eratosthenes-python?rq=1">this</a> which applies a lot of python optimization.</p>

<p>/e2</p>

<p>Looking at the code again and looking at <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="noreferrer">Wikipedia</a>, the checks inside the inner loop are actually not needed since j is per loop definition a multiple of i and we can simplify it to </p>

<pre><code>for j in range(i*i, n + 1, i):
    array[j] = False
</code></pre>

<p>which optimizes the program further:</p>

<pre><code>~ time python faster_sieve.py
python faster_sieve.py  2.61s user 0.01s system 99% cpu 2.617 total
</code></pre>

<hr>

<p>/e3 After reading jerry's response and finding two bugs in his implementation, I think there is another easy optimization that can be added to his approach. Since <code>i</code> is always odd in his inner loop, so is <code>i * i</code>. Thus we can increase the increment step of the inner loop from <code>i</code> to <code>i * 2</code> (<code>i * i + i</code> would be even). This result in the following results:</p>

<pre><code>Simon: 3.5496606826782227
Jerry (broken): 1.7031567096710205
Josay: 2.2623558044433594
Krypton: 5.4344189167022705
Krypton2: 2.5819575786590576
Jerry2: 1.396036148071289
</code></pre>

<p>Krypton2 and Jerry2 being:</p>

<pre><code>def krypton2(n):
    array = [True] * (n + 1)

    for i in range(2, int(math.sqrt(n)) + 1):
        if array[i] == True:
            for j in range(i*i, n + 1, i):
                array[j] = False
    final = []
    for i in range(2, n + 1):
        if array[i] == True:
            final.append(i)
    return final


def jerry2(n):
    array = [True] * n

    result = []

    result.append(2)
    for i in range(4, n, 2):
        array[i] = False;

    for i in range(3, int(math.sqrt(n) + 1), 2):
        if array[i]:
            for j in range (i*i, n, i * 2):
                array[j] = False;

    for i in range(3, n, 2):
        if array[i]:
            result.append(i)
    return result
</code></pre>
    </div>