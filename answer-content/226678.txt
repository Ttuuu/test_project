<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>class ContainsEverything:
"""Dummy container that mimics containing everything.
Has .add() method to mimic set.
"""
</code></pre>
</blockquote>

<p>The indentation is borked here, and needs correcting before the code will run.</p>

<hr>

<p>I profiled with <code>guppy3</code> (inlining everything into one file for my convenience - that explains the <code>__main__</code> below):</p>

<pre><code>lm = LanguageModel(4)
lm.train(generate_random_strings(10000))

from guppy import hpy
h = hpy(lm)
print(h.heap())
</code></pre>

<p>Nearly all of the memory was accounted for in the top two lines:</p>

<pre><code>Partition of a set of 502128 objects. Total size = 43108362 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0 233701  47 26174512  61  26174512  61 dict of __main__.Node
     1 233701  47 13087256  30  39261768  91 __main__.Node
</code></pre>

<p>I'm not entirely sure where the <code>dict of __main__.Node</code> comes from, but clearly <code>Node</code> is the culprit, and each node is contributing 56 bytes inherently and a further 112 bytes indirectly.</p>

<p>However, looking at the use of the tree:</p>

<blockquote>
<pre><code>        self._counts = TernarySearchTree(splitchar)
        ...
        frequency = self._counts.frequency(n_gram_string)
        ...
        self._counts.insert(n_gram_string)
        ...
        return n_gram in self._counts
</code></pre>
</blockquote>

<p>I can't see any reason to use a tree. There's no use of internal nodes. As far as I can see, it can easily be replaced by a <code>Counter</code>, whereupon the memory usage drops by 90%:</p>

<pre><code>Partition of a set of 34724 objects. Total size = 4141426 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0   9838  28   884914  21    884914  21 str
     1   8509  25   613768  15   1498682  36 tuple
     2    415   1   365544   9   1864226  45 type
     3   2226   6   320544   8   2184770  53 types.CodeType
     4   4329  12   309952   7   2494722  60 bytes
     5      1   0   295024   7   2789746  67 collections.Counter
</code></pre>
    </div>