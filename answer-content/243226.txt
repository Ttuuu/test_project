<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use <code>uint32_t</code></h1>

<p>You have to be careful with shift operations on signed integers. In particular, right shifts on signed integers have implementation-defined behaviour, so it is hard to write portable code for it. It might work out in this case, but it is better to treat the values as unsigned integers here.</p>

<h1>Bit shifting</h1>

<p>While you have written a correct function to print the individual bytes of a 32-bit integer, it is a bit overkill. You can write it like so:</p>

<pre><code>void print_register(uint32_t value) {
    printf("%c%c%c%c",
           (int)value,
           (int)(value &gt;&gt; 8),
           (int)(value &gt;&gt; 16),
           (int)(value &gt;&gt; 24));
}
</code></pre>

<p>This uses the fact that when printing a character, the value will already by truncated to 8 bits as if you would have written <code>value &amp; 0xFF, (value &gt;&gt; 8) &amp; 0xFF,</code> and so on. The cast to <code>int</code> might be necessary because the <code>%c</code> conversion expects an <code>int</code>, but <code>int32_t</code> might have a different size than an <code>int</code> on some platforms (for example, on an Arduino with an AVR CPU, <code>int</code> will be 16 bits).</p>
    </div>