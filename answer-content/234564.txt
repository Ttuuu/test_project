<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid <code>using namespace std;</code></h2>

<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<h2>DRY Code</h2>

<p>There is a programming principle called the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself Principle</a> sometimes referred to as DRY code. If you find yourself repeating the same code multiple times it is better to encapsulate it in a function. If it is possible to loop through the code that can reduce repetition as well.</p>

<p>In the example code below, 2 private functions, <code>SetExcusionData(std::string location, int distance)</code> and <code>SetFuelTypeAndCost(std::string ftype, double cost)</code> have been added. These private functions reduce the code in <code>SetLocation()</code> and <code>SetCarFuelType()</code>.</p>

<p>The logic in <code>SetLocation()</code> has been altered slightly to reduce the code in the function as well, the variable <code>bValid</code> is initialized to true rather than false, and the only place <code>bValid</code> needs to be modified is in the <code>default</code> case. There is no reason to use <code>toupper()</code> in this function because there is no upper case 1 through 4. The logic has also been modified so that the variable <code>cSelection</code> is an integer rather than a character.</p>

<h2>Readability</h2>

<p>The code would be more readable if there was more horizontal spacing, int the code most of the do while loops end with something like this <code>}while(bValid == false);</code> there should space between <code>}</code> and <code>while</code> and there should be a space between <code>while</code> and <code>(</code>.</p>

<h2>Minor Input Issue</h2>

<p>I generally include the make and model of my car as a car name, the code currently doesn't handle multiple word line well as input, it might be better in some cases to get the whole line of input and process it. I might also want to use both my first and last name when asked my name.</p>

<h2>Program Organization</h2>

<p>Most classes in C++ are implemented by a header file and a c++ source file. In most C++ editors there should be a button or a menu item that supports Add Class that creates this two file structure for you. One of the major benefits of this organization is that functions can be maintained/edits without needed to rebuild other files that include the header. Another benefit of this file organization is it somewhat easier to read the definition of the class, since the member variables and the member functions are just a list. Here is the User class broken up using a normal C++ editor:  </p>

<h2>User2.h</h2>

<pre><code>#ifndef CARMILAGEGEORGE_USER2_H
#define CARMILAGEGEORGE_USER2_H

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;iomanip&gt;    

class User2 {
public:
    User2();
    void SetName();
    void SetCarFuelType();
    void SetCarName();
    void DisplayTravelDestinations();
    void SetLocation();
    void CalculateTotalToBePaid();
    void CalculateVAT();
    void CalculateEstimatedTravelTime();
    std::string  GetName(){return sName;}
    std::string  GetCarName(){return sCarName;}
    std::string  GetFuelType(){return sCarFuelType;}
    std::string  GetChoiceOfLocation(){return sChoiceOfLocation;}
    double GetFuelCost(){return dFuelCost;}
    int GetMilesToTravel(){return iMilesToTravel;}
    double GetTotalToBePaid(){return dTotalToBePaid;}
    double GetVATAmount(){return dVATAmount;}
    double GetEstimatedTime(){return dEstimatedTime;}

private:
    void SetFuelTypeAndCost(std::string ftype, double cost);
    void SetExcusionData(std::string location, int distance);
    std::string  sName;
    std::string  sCarName;
    std::string  sCarFuelType;
    std::string  sChoiceOfLocation;
    double dFuelCost;
    int iMilesToTravel;
    double dTotalToBePaid;
    double dVATAmount;
    double dEstimatedTime;
};

#endif //CARMILAGEGEORGE_USER2_H
</code></pre>

<h2>User2.cpp</h2>

<pre><code>#include "User2.h"

User2::User2()
    :sName(""), sCarName(""), sCarFuelType(""), sChoiceOfLocation(""), dFuelCost(0), iMilesToTravel(0), dTotalToBePaid(0),dVATAmount(0), dEstimatedTime(0)
{
}

void User2:: SetName()
{
    std::cout &lt;&lt;  "What's your name?: ";
    std::cin &gt;&gt; sName;
}

void User2::SetFuelTypeAndCost(std::string ftype, double cost)
{
    sCarFuelType = ftype;
    dFuelCost = cost;
}

void User2:: SetCarFuelType(){
    bool bValid = false;
    char cSelection = 0;
    std::cout &lt;&lt;  "What's your fuel type? (p) petrol or (d) diesel: ";

    do{
        std::cin &gt;&gt; cSelection;
        cSelection = toupper(cSelection);
        if (cSelection == 'P')
        {
            SetFuelTypeAndCost("Petrol", 0.33);
            bValid = true;
        }
        else if (cSelection == 'D')
        {
            SetFuelTypeAndCost("Diesel", 0.40);
            bValid = true;
        }
        if (!bValid)
        {
            std::cout &lt;&lt;  "Invalid input. Please try again!";
        }
    } while (bValid == false);

    std::cout &lt;&lt;  "You've chosen " &lt;&lt; sCarFuelType &lt;&lt; " as your fuel type.\n";
}

void User2::SetCarName()
{
    bool bValid = false;

    do{
        std::cout &lt;&lt;  "What car do you drive?: ";
        std::cin &gt;&gt; sCarName;
        bValid = true;

    } while (bValid == false);

}

void User2::DisplayTravelDestinations()
{
    std::cout &lt;&lt;  "\n";
    std::cout &lt;&lt;  "Select a location number from the menu...\n";
    std::cout &lt;&lt;  "1. South West - 141 Miles\n";
    std::cout &lt;&lt;  "2. Leeds - 195\n";
    std::cout &lt;&lt;  "3. Birmingham - 220\n";
    std::cout &lt;&lt;  "4. Glasglow - 230 miles\n";
    std::cout &lt;&lt;  "\n";
}

void User2::SetExcusionData(std::string location, int distance)
{
    sChoiceOfLocation = location;
    iMilesToTravel = distance;
}

void User2::SetLocation(){
    bool bValid = true;
    int cSelection = 0;
    do{
        DisplayTravelDestinations();
        std::cout &lt;&lt;  "Where do you want to travel?: ";
        std::cin &gt;&gt; cSelection;
        switch(cSelection)
        {
            case 1:
                SetExcusionData("South West", 141);
                break;
            case 2:
                SetExcusionData("Leeds", 195);
                break;
            case 3:
                SetExcusionData("Birmingham", 220);
                break;
            case 4:
                SetExcusionData("Glasglow", 230);
                break;
            default:
                std::cout &lt;&lt;  "Invalid input! Please try again.";
                bValid = false;
                continue;
        }
    } while (bValid == false);

}

void User2::CalculateTotalToBePaid()
{
    if (iMilesToTravel &lt; 100)
    {
        dTotalToBePaid = iMilesToTravel * dFuelCost;

    }
    else
    {
        dTotalToBePaid = 100 * dFuelCost;
        dTotalToBePaid += (iMilesToTravel - 100) * (dFuelCost / 2);
    }
}

void User2::CalculateVAT()
{
    double dVATPercentage = 0.2;
    dVATAmount = dTotalToBePaid * dVATPercentage;

}

void User2::CalculateEstimatedTravelTime()
{
    const int iAverage = 50;
    dEstimatedTime = iMilesToTravel / iAverage;
}
</code></pre>
    </div>