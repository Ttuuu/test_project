<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In :</p>

<pre><code>table = []
valid_idxs = [(r,c) for r in range(level) for c in range(level)]
[compute(table, r, c) for r, c in valid_idxs] 
print(table)
</code></pre>

<p>the line <code>[compute(table, r, c) for r, c in valid_idxs]</code> definitly shouldn't be a list comprehension as we are building a list that we do not use. If it is side-effects we are interested in, we might as well use a <code>for</code>.</p>

<pre><code>table = []
valid_idxs = [(r,c) for r in range(level) for c in range(level)]
for r, c in valid_idxs:
    compute(table, r, c)
print(table)
</code></pre>

<p>Once, this is done, it seems quite clear that the first list comprehension is not really required neither as it could be :</p>

<pre><code>table = []
for r in range(level):
    for c in range(level):
        compute(table, r, c)
print(table)
</code></pre>

<p>This being said, even though it looked like a good idea to use a function to extract common code, the responsabilities are not clearly defined making things a bit hard to track. Let's put the body of the function back in the loop and try to see what can be improved :</p>

<pre><code>def pascal_triangle(level):
    table = []
    for r in range(level):
        for c in range(level):
            if r == 0:
                table.append([])
            if c == 0 or r == c:
                table[r].append(1)
            elif c &lt;= r:
                table[r].append(table[r-1][c] + table[r-1][c-1])
    print(table)
</code></pre>

<p>First thing to improve : print the content of <code>table</code> before or after the <code>table.append([])</code> : isn't it a bit weird to build all lists as we go through the <code>c</code> variable ? Also, the first list created is non-empty but the other one are. Let's make the process clearer and add an empty list at each <code>r</code> iteration.</p>

<pre><code>def pascal_triangle(level):
    table = []
    for r in range(level):
        print(table) # look how the tables gets populated now : isn't it cool ?
        table.append([])
        for c in range(level):
            if c == 0 or r == c:
                table[r].append(1)
            elif c &lt;= r:
                table[r].append(table[r-1][c] + table[r-1][c-1])
    print(table)
</code></pre>

<p>Let's go one step further, please note that the deeper loop will not do anything if <code>c &gt; r</code> (this wasn't true before previous change but it is now correct). We can easily remove this pointless iterations (and the pointless check) :</p>

<pre><code>def pascal_triangle(level):
    table = []
    for r in range(level):
        print(table)
        table.append([])
        for c in range(r+1):
            if c == 0 or r == c:
                table[r].append(1)
            else:
                assert(c&lt;=r)
                table[r].append(table[r-1][c] + table[r-1][c-1])
    print(table)
</code></pre>

<p>Now, it's time for the special trick : we could remove the test <code>if c == 0</code> by performing this before the loop. Also, we could't remove the <code>if c == r</code> by performing this after the loop (but we need to check that this would have happened which is when <code>r&gt;0</code>).</p>

<pre><code>def pascal_triangle(level):
    table = []
    for r in range(level):
        print(table)
        table.append([])
        table[r].append(1)
        for c in range(1, r):
            table[r].append(table[r-1][c] + table[r-1][c-1])
        if r:
            table[r].append(1)
    print(table)
</code></pre>

<p>Now, we can try to be more fancy : instead of calling <code>table[r]</code> every time : let's introduce a <code>line</code> variable and use it :</p>

<pre><code>def pascal_triangle(level):
    table = []
    for r in range(level):
        line = []
        line.append(1)
        for c in range(1, r):
            line.append(table[r-1][c] + table[r-1][c-1])
        if r:
            line.append(1)
        table.append(line)
    print(table)
</code></pre>

<p>We can see that this looks a lot like a list comprehension scenario and indeed, we can use it :</p>

<pre><code>def pascal_triangle(level):
    table = []
    for r in range(level):
        table.append([1] + [table[r-1][c] + table[r-1][c-1] for c in range(1, r)] + ([1] if r else []))
    print(table)
</code></pre>
    </div>