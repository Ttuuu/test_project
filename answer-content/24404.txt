<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@yatima2975 is dead right, there's a much easier way to do this as he has shown.</p>

<p>I'm going to write an answer though just because there's a couple things you're doing which you should be corrected of early as being the wrong approach in haskell.</p>

<pre><code> | nChars &lt;= 1           = nChars == 1
 | nChars == 2           = firstElem == lastElem
</code></pre>

<p>In both these cases you're using a guard statement to check the length of an array, in haskell it's much more idiomatic to use matching to create cases for specific lengths, like so:</p>

<pre><code>isPalindrome [] = False
isPalindrome [a] = True
isPalindrome [a,b] = a == b
</code></pre>

<p>Also:</p>

<pre><code> | firstElem == lastElem = isPalindrome (take (nChars - 2) (tail w))
</code></pre>

<p>Here you're doing math on the length, when all you need is the init and the tail, also this is your last case so you can simplify it using otherwise. But you don't even need to use a guard statement here because it's an and operation.</p>

<pre><code>isPalindrome w = (head w == last w) &amp;&amp; isPalindrome middle
  where middle = (init . tail) w
</code></pre>

<p>Learn your head/last/init/tail functions and get used to remember to use those. They work like so:</p>

<pre><code>               Head=1
               |
               | __________Tail=[2,3,4,5]
               ||
              [1,2,3,4,5]
[1,2,3,4]=Init________||
                       |
                       |
                  5=Last
</code></pre>

<p>All of that said, the <em>correct</em> way to do this is the implementation detailed by yatima.</p>
    </div>