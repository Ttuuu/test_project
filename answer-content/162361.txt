<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, a worth goal and a good coding attempt, yet many problems.</p>

<ol>
<li><p>Questionable functionality in <code>get_line()</code> and <code>get_string()</code>.  On <code>EOF</code>, both return a pointer to the supplied <code>char</code> array so the calling code lacks <code>EOF</code> distinguishably.  Functions are certainly a problem should a rare input error occur.</p></li>
<li><p>Questionable functionality in <code>get_line()</code> as it can get more that 1 line with <code>scanf(" ")</code>.  I'd expect the function to get 1 <em>line</em> of input only.</p>

<pre><code>char* get_line(char *_s, int _len) {
    ....
    scanf(" ");
</code></pre></li>
<li><p>Use of <code>int</code> for buffer size when <code>size_t</code> is the right-size for array sizes.  </p>

<pre><code>//char* get_line(char *_s, int _len);
//char* get_string(char *_s, int _len); 
char* get_line(char *_s, size_t _len);
char* get_string(char *_s, size_t _len); 
</code></pre></li>
<li><p>Mis-leading comment <code>/* trailing white spaces are preserved */</code>.  For both <code>get_line()</code> and <code>char* get_string()</code>, the <em>trailing</em> white spaces (aside from <code>'\n'</code>) are preserved.</p></li>
<li><p>There is no function to get a <em>line</em> that includes the potential <code>'\n'</code>.  C library defines a <em>line</em> as including that.</p>

<blockquote>
  <p>A text stream is an ordered sequence of characters composed into <em>lines</em>, each line consisting of zero or more characters plus a terminating new-line character. Whether the last line requires a terminating new-line character is implementation-defined.  C11 7.21.2 1</p>
</blockquote></li>
<li><p>With <code>smartinput.c</code>, put <code>#include "smartinput.h"</code> first as that will help detect any missing <code>#include &lt;xxx.h&gt;</code> that are needed in <code>smartinput.h</code>.</p>

<pre><code>#include "smartinput.h"
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
...
</code></pre></li>
<li><p>Not a fan of using a global <code>char buffer[]</code> especially where a short local array would do.</p></li>
<li><p>Integer conversion problems.  1) return value of <code>get_line()</code> is not checked - not that it helps much given the above no EOF detect issue.  Without detecting EOF, conversion may use the previous contents of global <code>buffer</code>,  2) "No conversion" is not detected.  3) On conversion outside <code>short</code> range, <code>errno</code> is not set. and the value is set to the end of the <code>short</code> range.  Similar troubles with all integer conversion functions.  <a href="https://stackoverflow.com/a/29378380/2410359">Alternative</a></p></li>
<li><p>The get FP routines also fail to detect no conversion.  Those FP routines have a special implementation defined (ID) behavior concerning <em>underflow</em> not handled by OP's code.  Noted as follows:</p>

<blockquote>
  <p>If the result underflows (7.12.1), the functions return a value whose magnitude is no greater than the smallest normalized positive number in the return type; whether <code>errno</code> acquires the value <code>ERANGE</code> is implementation-defined. ยง7.22.1.3 10</p>
</blockquote></li>
<li><p>Questionable test code.  As <code>get_line(s,...)</code> always return <code>s</code>, the following will only print if <code>r-&gt;name == NULL</code></p>

<pre><code>while (!get_line(r-&gt;name,MAX_NAME))   
  fprintf(stderr,"error: invalid name. try again..\n");
</code></pre></li>
<li><p>Design asymmetry.  The get line/string return the value on the others return a <code>bool</code> flag indicating success.  I'd expect all to return <code>bool</code>.</p></li>
</ol>

<hr>

<ol start="12">
<li><p>Minor: <code>()</code> not needed with <code>#define BUF_SIZE (1024)</code></p></li>
<li><p>Pedantic: <code>char* get_line(char *_s, int _len)</code> writes before <code>_s</code> if <code>_len &lt;= 0</code>.  Better to detect and return that perform UB.  If code did call <code>get_line(char *_s, 0)</code>, then <code>if (i &lt; _len-1)</code> would become <code>f (i &lt; SIZE_MAX)</code> allowing buffer overruns.</p></li>
</ol>

<p>Alternative <code>get_line()</code>, something like:</p>

<pre><code>char *get_line(char * s, size_t n) {
  if (n == 0) {
    return NULL; // or TBD on how to handle pathological case.
  }
  n--;

  int ch;
  size_t i = 0;
  while (i &lt; n &amp;&amp; (ch = fgetc(stdin)) != EOF) {
    s[i++] = (char) ch;
    if (ch == '\n') break;
  }
  s[i] = '\0';

  // Consume rest of line
  while (ch != '\n' &amp;&amp; ch != EOF) {
    ch = fgetc(stdin);
  }

  if (ch == EOF) {
    if (i == 0 || ferror(stdin)) {
      return NULL;
    }
  }
  return s;
}
</code></pre>
    </div>