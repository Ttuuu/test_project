<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You’ve got an object leak.</p>

<p><a href="https://docs.python.org/3/c-api/object.html?highlight=pyobject_getiter#c.PyObject_GetIter" rel="nofollow noreferrer"><code>PyObject_GetIter()</code></a> returns a new instance, which you aren’t calling <code>Py_DECREF()</code> on.</p>

<p>If you pass in an <strong>iterable</strong> object to your function (a list, a tuple, a dictionary, etc), <code>PyObject_GetIter()</code> will return a brand new <strong>iterator</strong> over than object.  You test the return value, discover it is not <code>NULL</code>, and then lose the returned value, since it was not stored in a local variable.  Then, you try to retrieve <code>tp_iternext</code> from the iterable’s type, which is likely not defined, so chaos will ensue.</p>

<p>If you pass in an <strong>iterator</strong> object to your function, <code>PyObject_GetIter()</code> will return it, but also increment the reference count of that object by one.  At the end of your function, you don’t call <code>Py_DECREF()</code> on the returned iterator, so the reference count will remain incremented, and the iterator will never be released.</p>

<pre><code>static PyObject *
consume(PyObject *self, PyObject *iterable)
{
    PyObject *(*iternext)(PyObject *);
    PyObject *item;
    PyObject *iterator;

    iterator = PyObject_GetIter(iterable);  // No references to iterable beyond this point.
    if (iterator == NULL)
        return NULL;

    iternext = *Py_TYPE(iterator)-&gt;tp_iternext;
    while ((item = iternext(iterator)) != NULL) 
        Py_DECREF(item);

    Py_DECREF(iterator);

    if (PyErr_Occurred()) {
        if (PyErr_ExceptionMatches(PyExc_StopIteration))
            PyErr_Clear();
        else
            return NULL;
    }

    Py_RETURN_NONE;
}
</code></pre>
    </div>