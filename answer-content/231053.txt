<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OK to place it in one file. Variable naming is fine.</p>

<pre><code>type student struct {
    ID   string `gorm:"primary_key" json:"id"`
    Name string `json:"name"`
    Age  int    `json:"age"`
}
</code></pre>

<p>Probably useful to export it, so <code>Student</code></p>

<pre><code>type App struct {
    DB *gorm.DB
}
</code></pre>

<p>YAGNI. Just a global variable <code>db</code> is fine. Definitely you won't import <code>App</code> in another program, not under this name.</p>

<pre><code>func (a *App) start() {
    db, err := gorm.Open(
        "postgres",
        "user=go password=go dbname=go sslmode=disable")
</code></pre>

<p>Lack of secret injection.</p>

<pre><code>    r.HandleFunc("/students", a.getAllStudents).Methods("GET")
</code></pre>

<p>I prefer singular, so <code>/student</code></p>

<pre><code>    if err != nil {
        sendErr(w, http.StatusBadRequest, err.Error())
    } else {
</code></pre>

<p>Maybe instead:</p>

<pre><code>    if err != nil {
        sendErr(w, http.StatusBadRequest, err.Error())
        return
    }
</code></pre>

<p>The less <code>else</code>s the more readable the code.</p>

<pre><code>func (a *App) deleteStudent(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    s := student{}
    a.DB.First(&amp;s, mux.Vars(r)["id"])
    err := a.DB.Delete(s).Error
</code></pre>

<p>Weird. I think this would work:   <code>s.ID, ok := mux.Vars(r)["id"]</code>
Then <code>if !ok</code> to be more defensive. (This place is far away from <code>/student/{id}</code> so they can get easily out of sync. You never used this <code>v, ok := m[key]</code> idiom, so be advised you're ignoring the key-not-found situations.)</p>

<p>Then <code>Delete(s)</code> which should only use the primary key, ignoring all the other fields.</p>

<p>Overall the program looks nice, assuming it's one of your first Go programs, I'd say impressive.</p>
    </div>