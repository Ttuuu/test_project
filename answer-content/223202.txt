<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Instead of <code>rootdir.glob("**/*")</code> you can write <code>rootdir.rglob("*")</code>. <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob" rel="nofollow noreferrer"><code>rglob</code></a> adds "<code>**/</code>" automatically before the given pattern.</li>
<li>You specify the return type of the <code>comparison</code> functions as <code>Hashable</code>. I'm not really sure why. Are you thinking that you will have more <code>comparison</code> functions in the future that would return something other than <code>int</code> or <code>str</code>? I think you could limit it to <code>FileHash = Union[int, str]</code> for now. I doubt that you will have functions that would return such hashable objects as, for example,  <code>namedtuple</code>s or <code>frozenset</code>s.</li>
<li><p>Maybe I don't understand something, but I don't really see the point why <code>compare_files</code> function exists. I would expect it to take as an argument an iterable of paths to the files, but instead, it takes them packed in a dictionary which doesn't make much sense to me. By taking the logic out of it to the outer <code>find_duplicates</code> function you will also avoid the problem with mypy complaining about incompatible types. It could look, for example, like this</p>

<pre><code>FileHash = Union[int, str]
Hashes = Tuple[FileHash, ...]


def find_duplicates(rootdir: Path,
                    comparisons: Iterable[Callable[[Path], FileHash]] = ()
                    ) -&gt; List[Tuple[str, ...]]:
    if not comparisons:
        comparisons = filesize, hash_first, hash_all

    files = filter(Path.is_file, rootdir.rglob("*"))

    files_per_hashes: Dict[Hashes, List[Path]] = defaultdict(list)
    for file in files:
        key = tuple(hasher(file) for hasher in comparisons)
        files_per_hashes[key].append(file)
    duplicates = (files for files in files_per_hashes.values() 
                  if len(files) &gt; 1)
    return [tuple(map(str, files)) for files in duplicates]
</code></pre></li>
<li><p>You are missing type hints for <code>hash_function</code>s. Unfortunately, I'm not sure how to solve the problem with their return types. If you are on Python 3.7, you could try something like this (idea taken from <a href="https://github.com/python/typeshed/issues/2928" rel="nofollow noreferrer">https://github.com/python/typeshed/issues/2928</a>):</p>

<pre><code>from __future__ import annotations

Hasher = Union[Callable[[ByteString], hashlib._hashlib.HASH],
               Callable[[], hashlib._hashlib.HASH]]
...
def hash_first(path: Path,
               hash_function: Hasher = hashlib.md5,
               blocksize: int = 65536) -&gt; str:
...
</code></pre>

<p>but mypy doesn't like it. It says: </p>

<pre class="lang-none prettyprint-override"><code>error: Name 'hashlib._hashlib.HASH' is not defined
</code></pre>

<p>Maybe you could dig a bit more in this direction.</p></li>
<li><p>I also think that it would be better to make the <code>comparisons</code> as an <code>Optional</code> argument in the <code>find_duplicates</code> function with default value set to <code>None</code> because right now you use tuple as an immutable version of list (the data you keep in that tuple is homogeneous but tuples are meant to keep heterogenous data, and the number of elements in the tuples is usually fixed). As Guido van Rossum said: <a href="http://code.activestate.com/lists/python-dev/%3C200303120211.h2C2BCH28989@pcp02138704pcs.reston01.va.comcast.net%3E/" rel="nofollow noreferrer">"<em>Tuples are *not* read-only lists.</em>"</a></p></li>
</ol>
    </div>