<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend a naming style that uses <code>CamelCase</code> for template parameters and <code>snake_case</code> (only) for plain old variables and functions, so that the reader can tell at a glance if something is a template parameter. For example, in the code that follows, you use <code>indices</code> as the name of a parameter pack; where I would name that pack <code>Is</code> (<code>Is</code> being the plural of <code>I</code>, and <code>I</code> being the natural name for a template parameter of type <code>int</code> just as <code>i</code> is the natural name for a plain old variable of type <code>int</code>).</p>

<p>I recommend a whitespace style that is much more compact than what you've got. I think your uncuddled <code>&lt;</code> brackets make reading hard for both the human reader and (I would think) for the IDE. When you write</p>

<pre><code>using type = std::tuple
</code></pre>

<p>I (and the IDE?) expect "hey, you're missing a semicolon!" whereas the actual diagnosis is "the line continues on the next source line, with an angle bracket." You wouldn't write</p>

<pre><code>int value = sqrt
(
    pow(2, 10)
)+1;
</code></pre>

<p>would you? So how is it acceptable to write</p>

<pre><code>using type = typename tuple_element_swap_impl
&lt;
    std::make_index_sequence&lt;std::tuple_size&lt;Tuple&gt;::value&gt;
&gt;::type;
</code></pre>

<p>?</p>

<pre><code>// swap types at index i and index j in the template argument tuple
template &lt;std::size_t i, std::size_t j, class Tuple&gt;
class tuple_element_swap
{
    template &lt;class IndexSequence&gt;
    struct tuple_element_swap_impl;

    template &lt;std::size_t... indices&gt;
    struct tuple_element_swap_impl&lt;std::index_sequence&lt;indices...&gt;&gt;
    {
        using type = std::tuple
        &lt;
            std::tuple_element_t
            &lt;
                indices != i &amp;&amp; indices != j ? indices : indices == i ? j : i, Tuple
            &gt;...
        &gt;;
    };

public:
    using type = typename tuple_element_swap_impl
    &lt;
        std::make_index_sequence&lt;std::tuple_size&lt;Tuple&gt;::value&gt;
    &gt;::type;
};
</code></pre>

<p>Purely by applying my naming and whitespace rules, we get</p>

<pre><code>// swap types at index I and index J in the template argument Tuple
template&lt;size_t I, size_t J, class Tuple&gt;
class tuple_element_swap {
    template&lt;class&gt;
    struct tuple_element_swap_impl;

    template&lt;size_t... Is&gt;
    struct tuple_element_swap_impl&lt;std::index_sequence&lt;Is...&gt;&gt; {
        using type = std::tuple&lt;
            std::tuple_element_t&lt;
                Is != I &amp;&amp; Is != J ? Is : Is == I ? J : I, Tuple
            &gt;...
        &gt;;
    };

public:
    using type = typename tuple_element_swap_impl&lt;
        std::make_index_sequence&lt;std::tuple_size&lt;Tuple&gt;::value&gt;
    &gt;::type;
};
</code></pre>

<p>And we can rewrite the expression <code>Is != I &amp;&amp; Is != J ? Is : Is == I ? J : I</code> as simply <code>Is == I ? J : Is == J ? I : Is</code> — which is both cleaner <em>and</em> shorter.</p>

<p>In C++17, you could use <code>std::tuple_size_v&lt;Tuple&gt;</code> in place of <code>std::tuple_size&lt;Tuple&gt;::value</code>. That wouldn't be any more performant — in fact it would be a minor <em>harm</em> to compile-time performance — but it would be a little shorter in terms of readability.</p>

<hr>

<p>EDITED TO ADD:</p>

<p>Okay, I've looked at the sort part now, too, a little bit.</p>

<p>I notice that you're using the equivalent of</p>

<pre><code>if (condition) {
    return true;
} else {
    return false;
}
</code></pre>

<p>right here:</p>

<pre><code>template &lt;class T, class U&gt;
struct descending
    : std::conditional_t&lt;( sizeof( U ) &gt; sizeof( T ) ), std::true_type, std::false_type&gt;
{};
</code></pre>

<p>That can be written more compactly in C++14 as</p>

<pre><code>template&lt;class T, class U&gt;
struct descending : std::bool_constant&lt;sizeof(T) &lt; sizeof(U)&gt; {};
</code></pre>

<p>or in C++11 as</p>

<pre><code>template&lt;class T, class U&gt;
struct descending : std::integral_constant&lt;bool, sizeof(T) &lt; sizeof(U)&gt; {};
</code></pre>

<p>Notice that your sort uses the comparator <em>backwards!</em> You named the comparator <code>descending</code>, which is correct for what your sort algorithm does; but in reality your comparator is a lifted version of <code>std::less</code>, a.k.a. "ascending" (when passed to <code>std::sort</code>)! You should probably reverse the sense in which your sort algorithm uses the comparator, and then reverse the sense of your comparator. That is,</p>

<pre><code>template&lt;class T, class U&gt;  // analogous to std::less
struct ascending : std::bool_constant&lt;(sizeof(T) &lt; sizeof(U))&gt; {};

template&lt;class T, class U&gt;  // analogous to std::greater
struct descending : std::bool_constant&lt;(sizeof(T) &gt; sizeof(U))&gt; {};
</code></pre>

<hr>

<p>This code screams out at me for <a href="https://quuxplusone.github.io/blog/2018/07/09/scary-metafunctions/" rel="nofollow noreferrer">SCARY-fication</a>, or what Odin Holmes calls the "Rule of Chiel." Rather than instantiating new struct types for <code>std::conditional&lt;true, int, float&gt;</code>, <code>std::conditional&lt;false, float, double&gt;</code>, and so on, let's just instantiate <em>two</em> concrete types — <code>conditional_&lt;true&gt;</code> and <code>conditional_&lt;false&gt;</code> — and use type aliases for everything else.</p>

<p>Taking your current code, you'd make two substitutions. Instead of</p>

<pre><code>template&lt;class T, class U&gt;
struct descending : std::bool_constant&lt;sizeof(T) &lt; sizeof(U)&gt; {};
</code></pre>

<p>you'd write</p>

<pre><code>template&lt;bool B&gt;
struct conditional_ {
    template&lt;class T, class&gt; using type = T;
};
template&lt;&gt;
struct conditional_&lt;false&gt; {
    template&lt;class, class U&gt; using type = U;
};

template&lt;class T, class U&gt;
using descending = conditional_&lt;sizeof(T) &lt; sizeof(U)&gt;;
</code></pre>

<p>And then instead of</p>

<pre><code>template &lt;std::size_t i, std::size_t j, std::size_t tuple_size, class LoopTuple&gt;
struct tuple_selection_sort_impl
{
    // this is done until we have compared every element in the type list
    using tuple_type = std::conditional_t
    &lt;
        Comparator
        &lt;
            std::tuple_element_t&lt;i, LoopTuple&gt;,
            std::tuple_element_t&lt;j, LoopTuple&gt;
        &gt;::value,
        typename tuple_element_swap&lt;i, j, LoopTuple&gt;::type, // true: swap(i, j)
        LoopTuple                                           // false: do nothing
    &gt;;

    using type = typename tuple_selection_sort_impl // recurse until j == tuple_size
    &lt;
        i, j + 1, tuple_size, tuple_type // using the modified tuple
    &gt;::type;
};
</code></pre>

<p>you'd write</p>

<pre><code>template&lt;size_t I, size_t J, size_t N, class LoopTuple&gt;
struct tuple_selection_sort_impl {
    using NextLoopTuple = typename Comparator&lt;
        std::tuple_element_t&lt;I, LoopTuple&gt;,
        std::tuple_element_t&lt;J, LoopTuple&gt;
    &gt;::template type&lt;
        typename tuple_element_swap&lt;I, J, LoopTuple&gt;::type,
        LoopTuple
    &gt;;
    using type = typename tuple_selection_sort_impl&lt;I, J+1, N, NextLoopTuple&gt;::type;
};
</code></pre>

<p>You could perform the same transformation on <code>tuple_element_swap</code>; that is, instead of writing <code>typename tuple_element_swap&lt;I, J, LoopTuple&gt;::type</code> above, you could write <code>typename tuple_element_swap&lt;I, J&gt;::template type&lt;LoopTuple&gt;</code>. This again cuts down on unnecessary type instantiations.</p>

<p>As to whether any of this SCARY-fication actually matters to your compile times in practice, I don't know, you'd have to benchmark it. (For example, by running your sort on a whole bunch of very long and not-identical inputs.) For your single 6-element example that compiles in under a second, of course none of this matters, except for getting comfortable with the idiom.</p>

<hr>

<p>Notice that I renamed your snake_case template parameter <code>tuple_size</code> to <code>N</code>. This not only flags it for the reader as a template parameter, but also makes the code <em>significantly</em> less confusing, since you do use some instantiations of <code>std::tuple_size</code> (a <em>class template</em>) sprinkled in among your references to <code>tuple_size</code> (an <em>integer constant</em>). Using different names for these different entities helps the reader understand what's going on. Additionally, the reader is already familiar with the runtime idea of "<code>i</code> looping up to <code>n</code> and then stopping," so the idea of <code>I</code> looping up to <code>N</code> and then stopping is immediately accessible in a way that it wasn't accessible when the name of <code>N</code> wasn't <code>N</code>.</p>

<hr>

<p>EDITED AGAIN TO ADD: I actually tried out a <a href="https://godbolt.org/z/SaZM0D" rel="nofollow noreferrer">complete rewrite</a> into "SCARY" style, and compilation with Clang got drastically <em>slower</em>. Maybe I'm doing something wrong, or maybe I've misunderstood the advice that I was trying to pass on. :/  In any event, please benchmark before committing to any of my advice above!</p>

<p>The only thing that did noticeably improve compile time in practice was to replace your repeated use of <code>std::tuple_element_t</code> with a bare-bones compiler-intrinsic implementation <a href="https://ldionne.com/2015/11/29/efficient-parameter-pack-indexing/" rel="nofollow noreferrer">as described by Louis Dionne in late 2015</a>:</p>

<pre><code>template&lt;size_t, class&gt; struct nth_;
template&lt;size_t I, class... Ts&gt;
struct nth_&lt;I, std::tuple&lt;Ts...&gt;&gt; {
    using type = __type_pack_element&lt;I, Ts...&gt;;
};
</code></pre>
    </div>