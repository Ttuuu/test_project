<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General feedback</h2>

<p>There are a few ways that some of the loops can be simplified (see below). These may or may not improve the high CPU issue.</p>

<p>The code makes some repeated calls to functions with the same values in close proximity (e.g. calling <code>th()</code> with each value of <code>rgb</code> twice in <code>rgbToHex()</code>). Storing the returned values and re-using the stored values would make the code more efficient.</p>

<p>I'd consider suggesting the use of functional approaches (E.g. with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer"><code>Array.map()</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" rel="nofollow noreferrer"><code>Array.reduce()</code></a>) but I wouldn't in this case, given that execution time is an issue.</p>

<h2>Targeted feedback</h2>

<p>There are some places where <code>const</code> could be used for any variable that doesn't get re-assigned - e.g. <code>vals</code> in <code>ExtractColours::calculateCenter()</code>, <code>plen</code> in <code>ExtractColours::kmeans()</code>, etc. This avoid unintentional re-assignment. </p>

<hr>

<p>There are places where <code>parseInt()</code> is called without a radix - e.g.</p>

<blockquote>
<pre><code>let idx = parseInt(String(Math.random() * plen));
</code></pre>
</blockquote>

<p>and</p>

<blockquote>
<pre><code>let h = parseInt(i).toString(16);
</code></pre>
</blockquote>

<p>The radix should always be specified<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Octal_interpretations_with_no_radix" rel="nofollow noreferrer">1</a></sup> because it doesn't always default to 10. </p>

<hr>

<p>Let's look at that method <code>ExtractColours::calculateCenter()</code>. The variable <code>plen</code> could be assigned to <code>points.length</code> (like it is in <code>ExtractColours::kmeans()</code>), instead of incrementing that in the second <code>for</code> loop. And then the division of each array element by <code>plen</code> could be moved into the previous <code>for</code> loop.</p>

<p>And <code>vals</code> is declared and assigned like this:</p>

<blockquote>
<pre><code>let vals = [];
let plen = 0;

for (let i = 0; i &lt; n; i++) { vals.push(0); }
</code></pre>
</blockquote>

<p>This could be simplified using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" rel="nofollow noreferrer"><code>Array.fill()</code></a></p>

<pre><code>const vals = Array(n).fill(0);
</code></pre>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Octal_interpretations_with_no_radix" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Octal_interpretations_with_no_radix</a></sub></p>
    </div>