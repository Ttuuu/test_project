<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could use the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.fromiter.html" rel="nofollow"><code>np.fromiter</code></a> function and Python's built in <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> to create the array you need:</p>

<blockquote>
  <p>Note: I'm assuming you're using Python 2.x based on your <code>print</code> statements.</p>
</blockquote>

<pre><code>import itertools
import numpy as np

product = itertools.product(xrange(X, X + 1000*STEP_X, STEP_X),
                            [Y],
                            xrange(Z, Z + 1000*STEP_Z, STEP_Z))

targets = np.fromiter(product)
</code></pre>

<p>This should be faster because it uses iterators instead of creating and allocating an entire list. </p>

<hr>

<p><strong>UPDATE</strong></p>

<p>Here are some style pointers and other minor improvements that I could see. Most of these recommendations stem from <a href="http://legacy.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a>, the official Python style guide, so if you need a reference for my suggestions, you can head over there.</p>

<ol>
<li><p><strong>ALWAYS USE <code>with</code></strong>. Whenever you deal with file access, use a with block as it is significantly less prone to user errors than using <code>open()</code> and <code>close()</code>. Luckily, you're code doesn't show the typical bug of not calling <code>close()</code> after an <code>open()</code>. However, its best to get into the habit of using <code>with</code>:</p>

<p>with open('some_file.txt', 'r') as file:
    # Do stuff</p></li>
<li><p>Use <code>underscores_in_names</code> when naming variables and functions. For the most part you do this. However, your function names could be updated.</p></li>
<li><p>Function names should be verb-based as this style helps show that the function <em>does</em> something:</p>

<pre><code># Currently...
def XYZ2sRGB(...):

# Better...
def convert_to_RGB(...)
</code></pre>

<blockquote>
  <p>A quick note: Typically I don't like using upper-case letters in anything except constants. However, because <code>RGB</code> is basically an acronym, capital letters seem appropriate.</p>
</blockquote></li>
<li><p>Speaking about upper-case letters, convention says that only constants should be capitalized in Python. This is relatively significant because convention is the only way we can 'define' constants in Python as there is no syntactic way to do so. </p></li>
<li><p>Whitespace is your friend, however be careful not to overdo it. PEP8 actually calls extraneous whitespace a <a href="http://legacy.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="nofollow">pet peeve</a>. A few of the points mentioned in that section of PEP8 that are applicable are:</p>

<pre><code># Bad                  # Good
foo            = 1  |  foo = 1
some_long_name = 0  |  some_long_name = 0
--------------------+---------------------
range (1000)        |  range(1000)
--------------------+---------------------
foo = ( x + 1 * 2 ) |  foo = (x + 1*2)
</code></pre>

<p>The last example is really based on preference: simply use whitespace to group operations and operands together so that the calculation reads well.</p></li>
<li><p>Parenetheses aren't required in if statements (unless they group conditionals together). You can remove almost all of yours.</p></li>
<li><p>Use <code>if ... elif ...</code> when applicable. Take this group of statements:</p>

<pre><code>G = var_G * 255
if (G &gt; 255):
    G = 255
if (G &lt; 0):
    G = 0
</code></pre>

<p>The second if will always be evaluated even if the first evaluated to <code>True</code> which means the second will evaluate to <code>False</code>. Because the two conditional are mutually exclusive, use and if-elif structure. Also, instead of basing your conditionals off of <code>G</code> (which requires a calculation beforehand) base your conditionals off of <code>var_G</code>:</p>

<pre><code>if var_G &gt; 1:
    G = 255
elif var_G &lt; 0:
    G = 0
else:
    G = var_G * 255
</code></pre>

<p>This code only does the calculation if necessary and has the same number of possible comparisions (in the <em>worst</em> case).</p></li>
<li><p>Use <code>str.format</code> instead of string concatenation. While whether string formatting performs better than string concatenation is up in the air, its more conventional (and, in my opinion, MUCH cleaner) to use <code>str.format</code>:</p>

<pre><code>with open(str(filename), "a") as f:
    f.write('&lt;path d="M{} {} \n'.format(x*1/2.54*72, y*1/2.54*72)) #moveto
    f.write('    m {},0 \n'.format(-radius))
    f.write('    a {} 0 1,0 {},0 \n'.format(radius, radius, radius*2))
    f.write('    a {} 0 1,0 {},0 \n'.format(radius, radius, -radius*2))
    f.write('    " fill = "rgb({},{},{})"/&gt; \n'.format(R, G, B))
</code></pre></li>
</ol>
    </div>