<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Choice of language</h2>

<p>I understand you probably want to do this in C, but I felt it was worth mentioning that Python is a much more suitable language for this task.</p>

<h2>malloc call</h2>

<p>You're using <code>points = malloc(SPACE_FOR_POINTS * sizeof(char*))</code>. I'll advice you to instead use <code>points = malloc(SPACE_FOR_POINTS * sizeof(*points))</code> to prevent problems if you change type of <code>points</code> in the future. </p>

<h2>Comparing pointers to NULL</h2>

<p>Not a big deal, but checking if a pointer is valid with <code>if(ptr)</code> or not valid with <code>if(!ptr)</code> is so common in C that it adds almost no readability. </p>

<h2>Comments</h2>

<p>You're using some unmotivated comments. Like when you are wasting 7(!) lines just to explain why you are using <code>calloc</code> instead of <code>malloc</code>.</p>

<h2>return instead of exit</h2>

<p>Using return instead of exit works as long as you're in the main function. So if you have a return statement that should quit the program, then instead use <code>exit(EXIT_FAILURE)</code> so that it does not matter if you refactor it into a function.</p>

<h2>Massive main function</h2>

<p>The thing that strikes me most is that you have a massive main function with a really huge switch statement. The first thing I would do put the whole switch statement into a function with the signature <code>enum state DFA(enum state state, char ch)</code> and then have a main loop like this:</p>

<pre><code>for (char ch = fgetc(fp); ch != EOF; ch = fgetc(fp)) {
    state = DFA(state, ch);
    if(state == error) { /* Handle error*/ }
}
</code></pre>

<p>But this would not be enough, since your states are much more complicated than that. The actual state of your machine is a combination of <code>state</code> and <code>shape</code>. So I would rename the current <code>state</code>. I will choose <code>category</code> but I'm sure you can come up with something better. Then I would do this:</p>

<pre><code>struct state {
    enum category;
    enum shape;
};

struct state DFA(struct state state, char ch);
</code></pre>

<p>Of course, you would also need to pass <code>rectangles</code>, <code>points</code>, <code>rectangles_index</code>, <code>points_index</code> and <code>actual_index</code> somehow. I would use a struct for that:</p>

<pre><code>struct data {
    char **rectangles;
    char **points;
    size_t rectangle_index;
    size_t points_index;
    size_t actual_index;
};

struct state DFA(struct state state, char ch, struct data * data);
</code></pre>

<p>Another alternative would be to just declare them as globals. Don't think that would be a too terrible idea in your project.</p>

<h2>Massive switch</h2>

<p>I would consider rewriting the whole automata. I would have rewritten it a bit like this:</p>

<pre><code>switch(state) {
case name:
    nameFunction(ch, data); break;
case openparen:
    openparenFunction(ch, data); break;
</code></pre>
    </div>