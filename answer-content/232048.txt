<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Assigning number of processors</h1>

<p>You currently set <code>procs = 3</code>, specifically for your 4-core machine. You can get the number of (logical) cores of your machine using the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.cpu_count" rel="nofollow noreferrer"><code>multiprocessing.cpu_count</code></a> function:</p>

<pre><code>from multiprocessing import Pool, cpu_count
procs = cpu_count() - 1
</code></pre>

<h1>Create <code>Pool</code> just once</h1>

<p>Rather than creating a new <code>Pool</code> every iteration of your for-loop, it is better to just create it once and keep using the same one. By using the <code>with</code> statement, it also makes sure to close it all neatly when you're done with it.</p>

<pre class="lang-py prettyprint-override"><code>with Pool(procs) as p:
    for max_iter in max_iter_list:
        jobs = [max_iter] * n_trials
        duration_list = p.map(simulate_game, jobs)
        gambler_stats.update_stats(duration_list)
</code></pre>

<h1>Hardcoded values in <code>simulate_games</code> function</h1>

<p>First of all, you can define your default values in the function definition. This also makes the difference more clear between the hardcoded defaults and initializations like <code>cur_iter = 0</code></p>

<pre class="lang-py prettyprint-override"><code>def simulate_game(max_iter, 
                  gambler_limit=100, 
                  house_limit=200, 
                  gambler_win_prob=0.5):
</code></pre>

<h2>Create different fixed-value alternative using <code>partial</code></h2>

<p>To have a fixed different set of default values, you could use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a>:</p>

<pre><code>from functools import partial
simulate_high_roller = partial(simulate_game, gambler_limit=1_000)
with Pool(procs) as p:
    duration_list = p.map(simulate_high_roller , jobs)
</code></pre>

<h2>Mapping with multiple arguments: <code>starmap</code></h2>

<p>If instead you want to simulate using a whole range of parameter values, <a href="https://docs.python.org/3.8/library/multiprocessing.html#multiprocessing.pool.Pool.starmap" rel="nofollow noreferrer"><code>Pool.starmap</code></a> is probably what you're looking for. Just like the 'regular' <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a>, it allows you to pass in a list of tuples that it will unpack and pass to your function.</p>

<p>So if you have pre-defined lists of parameters you want to simulate, you can use <code>zip</code> to create the tuples.</p>

<pre class="lang-py prettyprint-override"><code># Example
max_iter_list = [10, 20, 50]
gambler_limits = [50, 100, 200]
house_limits = [150, 200, 250]
win_probabilities = [0.6, 0.5, 0.4]

with Pool(procs) as p:
    for arguments in zip(max_iter_list, gambler_limits, house_limits, win_probabilities):
        jobs = [arguments] * n_trials
        duration_list = p.starmap(simulate_game, jobs)
</code></pre>

<p>In case of a full grid-search of your parameters, this combines nicely with <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>, although that set of combinations will grow quite fast, so be deliberate about which ones you need to test.</p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; arguments = list(product(max_iter_list, gambler_limits, 
...                          house_limits, win_probabilities))
&gt;&gt;&gt; print(arguments)
[(10, 50, 150, 0.6),
 (10, 50, 150, 0.5),
 (10, 50, 150, 0.4),
 (10, 50, 200, 0.6),
 ...
 (50, 200, 200, 0.4),
 (50, 200, 250, 0.6),
 (50, 200, 250, 0.5),
 (50, 200, 250, 0.4)]
&gt;&gt;&gt; len(arguments)
81
</code></pre>
    </div>