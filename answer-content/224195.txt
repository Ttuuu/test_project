<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Quick Review</h3>

<p>An API like this, dealing with thread-sensitive operations, requires time and effort to test and review rigorously. When I will find this time, I will do a thorough review. But here are some things I notice right off the bat.</p>

<ul>
<li><code>CommMemoryDisposedException</code> should inherit from <code>ObjectDisposedException</code>. This way, consumers can handle your exception as a common exception when an object is disposed.</li>
<li>Private utility methods like <code>CheckCapacity</code>, <code>EnsureAlive</code> and <code>EnsureAliveAcquire</code> could/should be adorned with <code>[DebuggerStepThrough]</code> or any of its sibling attributes to enhance debugging interop.</li>
<li>Local variables <code>ReadAvailable</code> and <code>WriteAvailable</code> may optimize performance, but they are not required.</li>
<li>Local variables <code>ReadRequest</code>, <code>WriteRequest</code>, <code>ReadState</code> and <code>WriteState</code> and the logic build around them should be replaced with <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlock?view=netframework-4.8" rel="noreferrer">ReaderWriterLock</a>. Although, reading your goals, you don't want to allow concurrent access. So only implement this if your goals would allow for it.</li>
<li>Using <code>Semaphore</code> for signaling threads would not be my preferred option. I would opt to use <code>ManualResetEventSlim</code>.</li>
<li>Variable <code>IsDisposed</code> can return <code>true</code> even if its state might indicate otherwise. Is this a hack? Perhaps you're also including <code>IsDisposing</code> in here.</li>
<li><code>DisposeInternal</code> should block new readers and writers while allowing existing operations to continue.</li>
<li><code>DisposeInternal</code> does not clean up event <code>Disposed</code>. This is a memory leak waiting to happen.</li>
<li>Think about which thread should invoke the event <code>Disposed</code>. I would execute this event asynchronously not to influence the current thread that is disposing the instance.</li>
<li>An object that is able to <code>Dispose</code> itself is an anti-pattern in my opinion. A mediator or owner object should handle its lifetime.</li>
<li>Methods <code>RequestWrite</code> and <code>RequestRead</code> perform double-checked locking. This might seem a good idea not to eagerly acquire a lock. But it can still lead to race conditions. Avoid double-checking and just acquire the lock. There are several articles online that address these issues.</li>
<li>You have written an elaborate question with a good spec and lots of unit tests. Your code also reads very well.</li>
</ul>

<p>Your goals are clear about not allowing concurrent read/write access. However, if you do want to allow this, then..</p>

<ul>
<li>you are basically implementing a blocking queue. C# comes with <code>BlockingCollection</code> and <code>ConcurrentQueue</code>. Unfortunately, both don't exactly apply to your case. Java does have a class that does what you want, even using a circular buffer: <a href="http://fuseyism.com/classpath/doc/java/util/concurrent/ArrayBlockingQueue-source.html" rel="noreferrer">ArrayBlockingQueue</a>. Perhaps you could find some inspiration in its implementation. It uses Java's built in class <code>Condition</code> which unfortunately does not exist in C#. You have to work around that by using <code>ManualResetEventSlim</code>.</li>
</ul>
    </div>