<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>using Duration = decltype(std::chrono::duration_cast&lt;DurationType&gt;(std::chrono::high_resolution_clock::now() - std::chrono::high_resolution_clock::now()).count());
</code></pre>

<p>I'm confused by this line. <code>decltype(std::chrono::duration_cast&lt;DurationType&gt;(expr))</code> is invariably <code>DurationType</code>, isn't it? That's why it's a "cast"? So this simplifies down to <code>decltype(std::declval&lt;DurationType&amp;&gt;().count())</code>, which I'm pretty sure <a href="https://en.cppreference.com/w/cpp/chrono/duration" rel="nofollow noreferrer">can be spelled as</a> <code>DurationType::rep</code> unless you're really eager to support non-standard duration types that might not have a <code>rep</code> member. So:</p>

<pre><code>using Duration = typename DurationType::rep;
</code></pre>

<p>And now it appears that maybe <code>Duration</code> is the wrong name for this typedef, eh?</p>

<p>(EDIT: Oops, the keyword <code>typename</code> is not needed here because <code>DurationType</code> is not dependent. Just <code>using Duration = DurationType::rep;</code> should be sufficient.)</p>

<hr>

<pre><code>static ScopesTiming&amp;  getScopesTimingStaticInstance() {
  static ScopesTiming scopesTimingContainer;

  return (scopesTimingContainer);
};
</code></pre>

<p>Minor nits on whitespace and naming and parentheses and trailing semicolons:</p>

<pre><code>static ScopesTiming&amp; getScopesTimingStaticInstance() {
    static ScopesTiming instance;
    return instance;
}
</code></pre>

<p>The defining quality of <code>instance</code> is that it's a static instance of <code>ScopesTiming</code>. If you want to convey the additional information that <code>ScopesTiming</code> is actually a <em>container type</em>, then that information belongs in the name of the <em>type</em>. Personally I'd call it something like <code>TimingVectorMap</code>, because it's a map of <code>TimingVector</code>s.</p>

<hr>

<p>Since the static map is not guarded by any mutex, your function <code>addTimingToNamedScope</code> (which mutates the map) is not safe to call from multiple threads concurrently. This could be a problem for real-world use.</p>

<hr>

<p><code>ScopeTimer</code> has two <code>const</code>-qualified fields. This doesn't do anything except pessimize its implicitly generated move-constructor into a copy-constructor. I recommend removing the <code>const</code>.</p>

<p><code>ScopeTimer</code> also has an implicit conversion from <code>ScopeSignature</code> a.k.a. <code>std::string</code>, so that for example</p>

<pre><code>void f(ScopeTimer timer);
std::string hello = "hello world";
f(hello);  // compiles without any diagnostic
</code></pre>

<p>I very strongly suggest that you never enable any implicit conversion unless you have a very good reason for it. This means putting <code>explicit</code> on every constructor and conversion operator.</p>

<pre><code>explicit ScopeTimer(const ScopeSignature&amp; scopeName);
</code></pre>

<hr>

<pre><code>dumpfile.open(path, std::ios::out | std::ios::trunc);
</code></pre>

<p>Should you check to see if the open succeeded?</p>

<hr>

<pre><code>inline void  ScopeTimerStaticCore::clearTimingForNamedScope(const ScopeTimer::ScopeSignature&amp; scopeName) {
  ScopesTiming&amp;           scopesTimingContainer = ScopeTimerStaticCore::getScopesTimingStaticInstance();
  ScopesTiming::iterator  it_scopes = scopesTimingContainer.find(scopeName);

  if (it_scopes != scopesTimingContainer.end())
    it_scopes-&gt;second.clear();
  return ;
};
</code></pre>

<p>This would be a good place to use C++11 <code>auto</code>:</p>

<pre><code>inline void ScopeTimerStaticCore::clearTimingForNamedScope(const ScopeTimer::ScopeSignature&amp; scopeName) {
  ScopesTiming&amp; instance = getScopesTimingStaticInstance();
  auto it = instance.find(scopeName);
  if (it != instance.end()) {
      it-&gt;second.clear();
  }
}
</code></pre>

<p>Or, if you don't mind removing the element from the map completely, you could just use <code>erase</code>:</p>

<pre><code>inline void ScopeTimerStaticCore::clearTimingForNamedScope(const ScopeTimer::ScopeSignature&amp; scopeName) {
  ScopesTiming&amp; instance = getScopesTimingStaticInstance();
  instance.erase(scopeName);
}
</code></pre>

<p>I also notice that these functions would get a <em>lot</em> shorter and simpler to read if you put their definitions in-line into the class body of <code>ScopeTimerStaticCore</code>. In this case you could omit the keyword <code>inline</code> and the qualification of the parameter type:</p>

<pre><code>void clearTimingForNamedScope(const ScopeSignature&amp; scopeName) {
  ScopesTiming&amp; instance = getScopesTimingStaticInstance();
  instance.erase(scopeName);
}
</code></pre>

<p>(Assuming that <code>ScopeTimerStaticCore</code> contains a member typedef <code>using ScopeSignature = ScopeTimer::ScopeSignature;</code>, I guess. It probably should â€” or vice versa.)</p>
    </div>