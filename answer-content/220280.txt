<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>printf '%b'</code> will expand backslash escapes in <code>$question</code> and in <code>$correct_answers_combined</code>.  It's not obvious that both of those are desirable.</p>
<p>I'd probably re-write that to expand only <code>$question</code>, and to avoid an unnecessary pipeline:</p>
<pre><code>printf '%b\nPlease answer [ ' "$question"
printf '%s ' "$@"
printf '] to confirm (Not &lt;Enter&gt;): '
</code></pre>
<p>You almost certainly want <code>fgrep</code> (or <code>grep -F</code>) rather than standard regular-expression <code>grep</code>, and it would be simpler to search through the items one per line, rather than using a <code>for</code> loop:</p>
<pre><code>read -r user_answer

printf '%s\n' "$@" | grep -qFx "$user_answer"
</code></pre>
<p>If this is the last command in the function, then the return status will be that of the <code>grep</code> command, which is just what we need.</p>
<p>Finally, be aware that <code>read</code> can fail (e.g. when it reaches EOF).  If you don't want that to be an automatic "no", then make provision for that.  I don't know what the right behaviour is for this application so I'll leave that as an open issue for you to address appropriately.</p>
<hr>
<h1>Modified version</h1>
<p>Here's what I ended up with:</p>
<pre><code># $1    = a string containing the question
# $2,.. = arguments containing the right answers (case insensitive)
confirmation()
{
    question=$1; shift

    printf '%b\nPlease answer [ ' "$question"
    printf '%s ' "$@"
    printf '] to confirm (Not &lt;Enter&gt;): '
    read -r user_answer

    printf '%s\n' "$@" | grep -qFxi "$user_answer"
}
</code></pre>
    </div>