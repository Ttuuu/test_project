<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The difference between <code>$*</code> and <code>$@</code></h3>

<blockquote>
<pre><code>warn() { printf '%s\n' "$*" &gt;&amp;2; }
</code></pre>
</blockquote>

<p>This is equivalent to the simpler:</p>

<pre><code>warn() { echo "$*" &gt;&amp;2; }
</code></pre>

<p>The <code>printf</code> version is useful if you want to produce one line per parameter,
and in that case you must use <code>"$@"</code> instead of <code>"$*"</code>.
Also in callers of <code>warn</code>.</p>

<h3>Use <code>-r</code> for raw output of <code>jq</code></h3>

<p>Instead of <code>jq "..." | tr -d '"'</code> a better way is <code>jq -r "..."</code>.</p>

<h3>An alternative to <code>printf</code> and a sub-shell</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>  # shellcheck disable=SC2046
  printf '  %s\n' $(shfmt -tojson &lt; "$filename" | jq "$jq_query" | tr -d '"')
</code></pre>
</blockquote>

<p>I recommend this way (and no need to disable shellcheck):</p>

<pre><code>shfmt -tojson &lt; "$filename" | jq -r "$jq_query" | sed -e 's/^/  /'
</code></pre>

<h3>Use a bit more double-quotes</h3>

<p>You did a good job of double-quoting the most important things.
I would double-quote here too:</p>

<blockquote>
<pre><code>command_exists $r || die This script depends on $r and it is not found.
</code></pre>
</blockquote>

<p>To train good habits:</p>

<pre><code>command_exists "$r" || die "This script depends on $r and it is not found."
</code></pre>

<h3><code>"$@"</code> is the default list for <code>for</code></h3>

<p>Instead of <code>for f in "$@"; do</code>, you can simply write <code>for f; do</code>.</p>

<h3>The shebang</h3>

<p>In some systems Bash is not in <code>/bin/bash</code>.
For that reason I prefer to use <code>#!/usr/bin/env bash</code> as the shebang, it makes the script more portable.</p>

<h3>Simplify the readable file check?</h3>

<blockquote>
<pre><code>  [[ -f $filename ]] || die "$filename is not a file or does not exist."
  [[ -r $filename ]] || die "$filename is not readable."
</code></pre>
</blockquote>

<p>The <code>-r</code> implies <code>-f</code>. I would simplify this to one line:</p>

<pre><code>[[ -r $filename ]] || die "$filename is not a readable file."
</code></pre>

<h3>Use <code>echo</code> when it's good enough</h3>

<p>Instead of <code>printf '\n%s:\n' "$f"</code> I would write:</p>

<pre><code>echo
echo "$f:"
</code></pre>

<h3>Here-documents</h3>

<p><code>EOH</code> is an unusual symbol for the here-document marker.
That's not a problem, but I think the less surprising elements in a script,
the better.
I don't see a good reason to not call this <code>EOF</code> as usual.</p>

<h3>Your questions</h3>

<blockquote>
  <p>Some possible areas for improvement:</p>
  
  <ul>
  <li>Can the jq query be improved?</li>
  <li>Are there other entries in the json output of shfmt that I can look for variable assignments.</li>
  </ul>
</blockquote>

<p>Unfortunately I'm not able to answer these. 
You might want to wait for another reviewer who can!</p>
    </div>