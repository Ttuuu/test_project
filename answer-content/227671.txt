<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is a better algorithm to solve the problem.</p>

<p>Let <span class="math-container">\$c(n, m)\$</span> be the number of ways to cover <span class="math-container">\$n\$</span> units with red blocks of minimum length <span class="math-container">\$m\$</span>. Let <span class="math-container">\$c_r(n, m)\$</span> and <span class="math-container">\$c_b(n, m)\$</span> be the respective number of covers that ends with a red or black unit. We have
<span class="math-container">$$
c(n, m) = c_r(n, m) + c_b(n, m)\label{f1}\tag{1}
$$</span></p>

<p>Since any length-<span class="math-container">\$(n-1)\$</span> cover can be extended with a black unit to yield a length <span class="math-container">\$n\$</span> cover, we have
<span class="math-container">$$
c_b(n,m)=c(n-1,m)\label{f2}\tag{2}
$$</span></p>

<p>For any length-<span class="math-container">\$n\$</span> cover that ends with a red unit, it either extends a red-ending, length-<span class="math-container">\$(n-1)\$</span> cover, or adds a length-<span class="math-container">\$m\$</span> red block to a black-ending, length-<span class="math-container">\$(n-m)\$</span> cover. Therefore
<span class="math-container">$$
\begin{eqnarray}
c_r(n,m) &amp; = &amp; c_r(n-1,m)+c_b(n-m,m) \\
         &amp; = &amp; c(n - 1, m) - c_b(n - 1, m) + c_b(n - m, m) \\
         &amp; = &amp; c(n - 1, m) - c(n - 2, m) + c(n - m - 1, m) \label{f3}\tag{3}
\end{eqnarray}
$$</span></p>

<p>Substituting (\ref{f2}) and (\ref{f3}) into (\ref{f1}) yields:
<span class="math-container">$$
c(n, m) = 2 \cdot c(n - 1, m) - c(n - 2, m) + c(n - m - 1, m) \label{f4} \tag{4}
$$</span></p>

<p>The sequence <span class="math-container">\$\{c(i, m)\}_{i=0}^n\$</span> can now be generated from the linear recurrence (\ref{f4}) with initial values <span class="math-container">\$c(-1,m)=c(0,m)=\ldots=c(m-1,m)=1\$</span>.</p>

<p>While a linear algorithm solves the original problem with ease, it is not efficient enough to solve <a href="https://www.hackerrank.com/contests/projecteuler/challenges/euler114/problem" rel="nofollow noreferrer">the extended version</a> where the input <span class="math-container">\$n\$</span> can go up to <span class="math-container">\$10^{18}\$</span>. To speed up computation using the linear recurrence, we define a length-<span class="math-container">\$(m+1)\$</span> column vector
<span class="math-container">$$
C_i=
\begin{pmatrix}
c(i+m,m) &amp; c(i+m-1,m) &amp; \ldots &amp; c(i,m)
\end{pmatrix} ^T
$$</span>
and a <span class="math-container">\$(m+1)\times (m+1)\$</span> coefficient matrix
<span class="math-container">$$
A=
\begin{pmatrix}
2 &amp; -1 &amp; 0 &amp; \cdots &amp; 0 &amp; 1 \\
1 &amp; 0  &amp; 0 &amp; \cdots &amp; 0 &amp; 0 \\
0 &amp; 1  &amp; 0 &amp; \cdots &amp; 0 &amp; 0 \\
0 &amp; 0  &amp; 1 &amp; \cdots &amp; 0 &amp; 0 \\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \\
0 &amp; 0  &amp; 0 &amp; \cdots &amp; 1 &amp; 0 \\
\end{pmatrix}
$$</span>
Then we can see <span class="math-container">\$C_i=AC_{i-1}=\ldots=A^{i+1}C_{-1}\$</span>, where 
<span class="math-container">\$
C_{-1}=
\begin{pmatrix}
1 &amp; 1 &amp; \ldots &amp; 1
\end{pmatrix} ^T
\$</span>. Therefore <span class="math-container">\$c(n,m)\$</span> can be obtained by extracting the first element of 
<span class="math-container">$$C_{n-m}=A^{n-m+1}C_{-1}$$</span>
Since the power operation can be computed in <span class="math-container">\$\Theta(\log(n-m+1))\$</span> matrix multiplications and the multiplication time complexity is <span class="math-container">\$O(m^3)\$</span>, the entire algorithm is <span class="math-container">\$O(m^3\log(n-m))\$</span> which is sufficient to solve the extended problem.</p>
    </div>