<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Answering my own question because there <em>is</em> a faster and simpler way to solve the problem assuming your table doesn't contain formulas. If that's a problem for you, I'd stick with the original answer. Thanks to Raystafarian for the suggestion to read the data into an array first.</p>

<p>My actual implementation is a bit shorter because it references a bunch of other functions I use regularly, but this answer is self-contained.</p>

<pre><code>Function deleteRows(tbl As ListObject, ByVal critCol As String, ByVal critVals As Variant, Optional invert As Boolean = False) As Long
'Deletes rows in a table (tbl) based on value criteria (critVal) in a given column (critCol)
'Maintains original sort order
'Inverted setting deletes all rows *not* containing criteria
'Can search for partial matches by using wildcards with criteria

    'Get count of table rows/columns and exit function if table is empty
    Dim numCols As Long
    Dim numRows As Long
    numCols = tbl.ListColumns.Count
    numRows = tbl.ListRows.Count

    If numRows = 0 Then
        Exit Function
    End If

    'Get 2d array of table headers
    Dim headerArr As Variant
    If numCols = 1 Then
        ReDim headerArr(1 To 1, 1 To 1)
        headerArr(1, 1) = tbl.HeaderRowRange(1).Value2
    Else
        headerArr = tbl.HeaderRowRange.Value2
    End If

    Dim colToCheck As Long
    Dim colFound As Boolean
    Dim i As Long
    For i = 1 To numCols
        If headerArr(1, i) = critCol Then
            colToCheck = i
            colFound = True
            Exit For
        End If
    Next

    'If criteria column doesn't exist, exit sub
    If Not colFound Then
        MsgBox "Error: Column " &amp; critCol &amp; " does not exist in table"
        Stop
        Exit Function
    End If

    'Get 2d array of table data and create results array of same size
    'If table has no data, exit sub
    Dim bodyArr As Variant
    If numCols = 1 And numRows = 1 Then
        ReDim bodyArr(1 To 1, 1 To 1) As Variant
        bodyArr(1, 1) = tbl.DataBodyRange(1, 1).Value2
    Else
        bodyArr = tbl.DataBodyRange.Value2
    End If

    ReDim newArr(1 To numRows, 1 To numCols) As Variant

    'Turn criteria values into array
    Dim toCheck As Variant
    toCheck = IIf(IsArray(critVals), critVals, Array(critVals))

    'Loop through array, adding rows that meet criteria to new array
    Dim rowsKept As Long
    rowsKept = 0
    For i = 1 To numRows
        Dim toKeep As Boolean
        toKeep = Not invert
        Dim j As Long
        For j = LBound(toCheck) To UBound(toCheck)
            If bodyArr(i, colToCheck) Like toCheck(j) Then
                toKeep = invert
                Exit For
            End If
        Next
        If toKeep Then
            rowsKept = rowsKept + 1
            For j = 1 To numCols
                newArr(rowsKept, j) = bodyArr(i, j)
            Next
        End If
    Next

    Dim numDeleted As Long
    numDeleted = numRows - rowsKept
    If Not (numDeleted = 0) Then
        'Write new array to table
        tbl.DataBodyRange.Value2 = newArr

        'Delete empty rows from table
        Dim firstCol As Long
        Dim lastCol As Long
        Dim headerRow As Long
        firstCol = tbl.ListColumns(1).Range.Column
        lastCol = tbl.ListColumns(tbl.ListColumns.Count).Range.Column
        headerRow = tbl.HeaderRowRange(1).Row

        With tbl.Parent
            .Range(.Cells(rowsKept + headerRow + 1, firstCol), _
                   .Cells(tbl.ListRows.Count + headerRow, lastCol)).Delete xlShiftUp
        End With
    End If

    'Return count of rows deleted
    deleteRows = numDeleted

End Function
</code></pre>
    </div>