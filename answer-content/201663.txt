<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments</h2>
<p>There's a common misconception about comments. You should not write comments to explain <strong>what</strong> something does. Your code should be clear enough so that does comments are not necessary. Sadly, there are times where we need to write complex code that is hard to understand. In this very case, you are "allowed" to write comments to explain :</p>
<p>1- <strong>Why</strong> you did what you did. Example :</p>
<blockquote>
<p><code>FooBar</code> was super complex because of <code>Bar</code> and <code>Foo</code> dependency, so I had to write <code>this</code> like this because of <code>that</code>.</p>
</blockquote>
<p>This comment gives insight on what happened in your head while you were writing the code. So if someone ever comes up on the <code>FooBar</code> complex method, they'll be able to use your comment to understand what needs to be considered.</p>
<p>2- Explain what the code does.</p>
<blockquote>
<p><code>FooBar</code> does <code>something</code> by using [Insert shady algorithm] to have maximum performance.</p>
</blockquote>
<p>A good rule of thumb would be to ask yourself "If I came back to my code in 2 weeks, is there something I might have trouble understanding in my code?". If the answer is yes, try to refactor that thing. If the answer is still yes, add a comment.</p>
<p>So, in my opinion, most, if not all, your comments could be deleted.</p>
<h2>Coding style</h2>
<h3>Brackets</h3>
<p>I'll use this piece of code as an example :</p>
<pre><code>else if (tempInput.Equals("\b"))
{
    if (userInput.Length &gt; 0)
        userInput = userInput.Substring(0, userInput.Length - 1);
}
else
    userInput += tempInput;
</code></pre>
<p>The parenthesis on the <code>else if</code> aren't even necessary, yet you use them, but with the <code>else</code>, you don't. This lack of consistency makes the code harder to read and adds bugs potential. Since the <a href="https://www.dwheeler.com/essays/apple-goto-fail.html" rel="nofollow noreferrer">Apple bracket's fail</a>, I <em>always</em> use brackets around my flow operators (<code>for</code>, <code>if</code>, etc..). You should too!</p>
<h3>Constants vs local variables</h3>
<p><code>Keywords</code> could be a <code>const</code>. That's that. :p</p>
<h2>Application flow</h2>
<h3>Method extraction</h3>
<p>There is a lot of different flows in your code (lots of ifs, while, for, etc), it would help if some parts were separated in different methods. For example :</p>
<pre><code>private string GetSuggestionFromKeywords(string userInput)
{
    for (int i = 0; i &lt; Keywords.Length; i++)
    {
        if (Keywords[i].StartsWith(userInput))
        {
            return Keywords[i];
        }
    }
}
</code></pre>
<p>This method is small, super easy to understand and as a bonus you get a method name which "acts as a comment" on what the inside of the method does.</p>
<p><em>Tip : Try to figure out what other pieces of code could be extracted to methods, it's a very good exercise to help you develop (pun intended) as a better developer.</em></p>
<h3>Conditions</h3>
<pre><code>else if (tempInput.Equals("\b"))
{
    if (userInput.Length &gt; 0)
        userInput = userInput.Substring(0, userInput.Length - 1);
}
</code></pre>
<p>So, what if <code>tempInput.Equals("\b") == true</code> but <code>userInput.Length &gt; 0 == false</code>? Nothing happens right? In this case, why not use :</p>
<pre><code>else if (tempInput.Equals("\b") &amp;&amp; userInput.Length &gt; 0)
{
    userInput = userInput.Substring(0, userInput.Length - 1);
}
</code></pre>
<p>That's one <code>if</code> less. Try to reduce <a href="https://www.codeproject.com/Articles/626403/How-and-Why-to-Avoid-Excessive-Nesting" rel="nofollow noreferrer">nesting</a> as much as possible as it cripples readability.</p>
<p><em>Tip : Once again, try to find every way you can to reduce nesting, this is another good exercise which will make you a better developer.</em></p>
<h3>Exceptions</h3>
<pre><code>if (Keywords.Length == 0)
    throw new ArgumentException(nameof(Keywords), "No Keywords set!");
</code></pre>
<p>Now, you're the one who sets the <code>Keywords</code> and they are not modifiable by anyone, ever, except you. This means that the only way this exception would be thrown is if you forgot to write the line just above, which would be hard, since you wrote it already.</p>
<p>Considering this, you should think about removing this exception.</p>
<p><em>Regarding my "tips". Extracting methods, reducing nesting etc. should <strong>never</strong>  be at the detriment of code readability. If extracting a method makes your code uglier, don't do it. But think about ways to do it to make your code more readable.</em></p>
    </div>