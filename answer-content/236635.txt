<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>localization.h</code> doesn't need <code>&lt;string.h&gt;</code>, but does need <code>&lt;string&gt;</code>.  In any case, prefer the C++ header <code>&lt;cstring&gt;</code> rather than the C compatibility header <code>&lt;string.h&gt;</code> - the former guarantees to declare identifiers in the <code>std</code> namespace.</p>

<p>Similarly, in the implementation file, prefer <code>&lt;cstdlib&gt;</code> to <code>&lt;stdlib.h&gt;</code>, and <code>&lt;cstdio&gt;</code> to <code>&lt;stdio.h&gt;</code> (but consider using C++ streams instead of C stdio; it's much easier to get right).  Yes, this does mean that you'll need to spell <code>std::size_t</code>, <code>std::</code> and others correctly.</p>

<p>Please don't name members in all-uppercase.  We reserve that shouting for macros, which should be used very sparingly, if at all.</p>

<p>Prefer pass-by-value for arguments that we store:</p>

<pre><code>Localization::Localization(const std::string lang,
                           const std::string defLang,
                           const std::string defPath)
    : language{std::move(lang)},
      default_path{std::move(defPath)},
      strs{}, groups{}
</code></pre>

<p>But why are we even keeping a copy of default language?  We never use it after the constructor.</p>

<p>There's no need for <code>typedef struct LocalString</code> - in C++, a struct tag is automatically also the type name.  Just write <code>struct LocalString { ... };</code>.</p>

<p>The empty destructor adds no value and should simply be omitted.</p>

<p>There's no need to write <code>this-&gt;</code> when accessing members - we're writing C++, not Python.</p>

<p>Please use smart pointers to manage ownership, instead of requiring the caller of <code>LoadFile</code> to <code>delete[]</code> the returned value.</p>

<p>Think about error handling.  At present, if a localization file can't be read, we fail silently with no opportunity for the application to log a message.  This will make debugging more difficult.</p>

<p>We can reduce some tests like this one (which, though repeated, is strangely inconsistent with its use or not of braces):</p>

<pre><code>        if (exist != nullptr) *exist = false;
</code></pre>

<p>Just test once whether <code>exist</code> is a null pointer, and point it write to a local variable instead:</p>

<pre><code>bool exist_discard;
if (!exist) {
    exist = &amp;exist_discard;
}
</code></pre>

<p>Simply write <code>1</code> in place of <code>sizeof (char)</code>, since <code>sizeof</code> measures in units of <code>char</code>.</p>

<p>Why does <code>LocalizeWithReplace()</code> pass <code>params</code> by value?  It doesn't need a copy, and should be passed as a const ref.</p>
    </div>