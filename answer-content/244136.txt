<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I won't be reviewing this code for efficiency, since I'm not quite so comfortable with analyzing some combination of State monad, immutable data structures, and laziness.</p>
<p>However, there are a few obvious changes you can make to your code.</p>
<h1>Passing State Properly</h1>
<p>This is what Franky was getting at with his comment, and it's a bit of a tricky bug. When you do</p>
<pre><code>put $ Map.insert x (prev1 + prev2) solved
</code></pre>
<p>you use the <code>solved</code> that you get at the beginning of the function invocation. But your recursion goes from top-to-bottom, so if you're computing <code>fib 10</code>, <code>solved</code> is the empty map when you are getting the final answer. Essentially, your memo map keeps getting overwritten with maps that have less information. The fix is pretty easy.</p>
<pre><code>prev1 &lt;- fib (x - 1)
prev2 &lt;- fib (x - 2)
solved' &lt;- get
put $ Map.insert x (prev1 + prev2) solved'
</code></pre>
<p>Just get the updated state after the recursive invocations.</p>
<h1>Naming</h1>
<p>I think <code>solved</code> is ambiguous as to whether it refers to a single solution or the memo map. I would call it something like <code>solutions</code>, maybe <code>sols</code> or <code>fibs</code> if you feel like abbreviating. In light of the previous bug, you may wish to call the first one <code>initialSolutions</code> and later ones <code>updatedSolutions</code> or something like that (I just used <code>solutions</code> and <code>solutions'</code>).</p>
<p>The name <code>m</code> is OK, but it doesn't really need to exist at all. You can just case on <code>Map.lookup x solved</code> directly instead of binding <code>m</code> and then casing on it.</p>
<h1>The <code>case</code> Statement</h1>
<p>It seems like you're trying to use the <code>case</code> statement to set up your memo map so that it always has a value for <code>x</code>. There are two things to address about this.</p>
<h2>Indexing</h2>
<p>If you, the programmer, are sure that <code>x</code> exists in the map (and in the <code>case</code> above you guarantee it), you could instead use the unsafe lookup <code>Map.!</code>. Given the option between returning an erroneous value silently (your <code>fromMaybe 0</code>) and crashing and burning in case of a bug, I would generally prefer the latter. So your last line would look something like <code>gets (Map.! x)</code>.</p>
<h2>The Last Lookup</h2>
<p>However, doing the lookup itself is inelegant. It <em>might</em> make sense if there was a lot of convoluted stuff happening between, but proper indexing doesn't get checked by the type system and doing a lookup takes (not much, but some) extra time. Fortunately, you don't need to do it. Since I'm going to assume you're learning Haskell, consider how you'd approach a similar problem in an imperative language. What would you do to change this code:</p>
<pre><code>if (x in solutions):
  solutions[x] = solutions[x]
else:
  prev1 = fib(x-1)
  prev2 = fib(x-2)
  solutions[x] = prev1 + prev2
return solutions[x]
</code></pre>
<p>There are many right answers, but one thing you can do is as follows (this particular code is nice because it avoids extra lookups):</p>
<pre><code>if (x in solutions):
  return solutions[x]
else:
  prev1 = fib(x-1)
  prev2 = fib(x-2)
  solution = prev1 + prev2
  solutions[x] = solution
  return solution
</code></pre>
<p>Your <code>case</code> statement functions like the imperative <code>if</code> statement, except more powerful since you have guarantees on the types! So mirroring the imperative's revision, you can revise your code like so</p>
<pre><code>case Map.lookup x solved of
        Just solution -&gt; return solution
        Nothing -&gt; do
            prev1 &lt;- fib (x - 1)
            prev2 &lt;- fib (x - 2)
            solutions' &lt;- get
            let solution = prev1 + prev2
            put $ Map.insert x solutions' solved
            return solution
</code></pre>
<p>Now you don't need the last lookup. Notice how we also avoid the issue entirely of whether <code>x</code> is in <code>solutions</code>, because we explicitly handle the case where it is and isn't. This code doesn't have any unsafe lookups!</p>
<h2>Addendum on Lookups</h2>
<p>Now, even if you wanted to make your <code>case</code> statement only fill out the memo map instead of also returning the answers, I agree with you that you are doing unnecessary work.</p>
<pre><code>Just value -&gt; put $ Map.insert x value solved
</code></pre>
<p>The line above needlessly reinserts the value of <code>x</code>. The memo map already has <code>x</code>, and <code>x</code> is already set to <code>value</code>. If you wanted to otherwise keep your code the same, at least change this to</p>
<pre><code>Just value -&gt; return ()
</code></pre>
<p><code>put</code> has type <code>a -&gt; State a ()</code>. It's a convention for monads to pass <code>()</code> as their return value if they perform an action that doesn't return anything (like how <code>putStrLn</code> has type <code>String -&gt; IO ()</code>). You can simply <code>return ()</code> to do nothing instead of actually modifying the memo map, which I assume you did to fix a type error.</p>
<h1>Revised Function</h1>
<p>Included are comments noting the revision</p>
<pre class="lang-hs prettyprint-override"><code>fib :: Int -&gt; State DP Int
fib 0 = return 1
fib 1 = return 1
fib x = do
    -- Change to a more descriptive name
    solutions &lt;- get
    -- Case directly on the value without intermediate variable
    case Map.lookup x solutions of
            Nothing -&gt; do
                prev1 &lt;- fib (x - 1)
                prev2 &lt;- fib (x - 2)
                -- Get updated solutions
                solutions' &lt;- get
                let solution = prev1 + prev2
                put $ Map.insert x solution solutions'
                -- Return solution directly
                return solution
            Just solution -&gt;
                -- Return solution directly
                return solution
    -- Elide previous lookup
</code></pre>
    </div>