<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Or you know, it's Python.  Not particularly known for high performance.
If you want more speed you should look at parallelisation, modules
written in more performant compiled languages, or possibly PyPy.</p>

<p>Now, first of all, please look at
<a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a> to make the reader's
job a lot easier.  In particular some whitespace would be nice.  It's
also not necessary to fit everything onto a single line.  Also a lot of
comments just restate the code in the line - don't add comments if they
don't add any new information.</p>

<p>Next, the first line is wrong, there should be no slash at the end.
Ideally, since you're restricted to Python 2.7(?) it should rather be
<code>#!/usr/bin/env python2.7</code> instead.</p>

<p>Even though it's Python 2.7 it's still advisable to use the function
form of <code>print</code>, i.e. <code>print(...)</code>, since it removes on special syntax
case without much ill effect.  Similarly, using
<a href="https://docs.python.org/2/library/functions.html#xrange"><code>xrange</code></a>
makes sense in many situations.</p>

<p>A <code>if __name__ == "__main__":</code> block with a separate <code>main</code> function
would be nice too, that way the number of globals could also be reduced
a bit.</p>

<p><code>while 1==1:</code> is less clear than <code>while True:</code>.</p>

<p>A plain <code>open</code> without <code>with</code> doesn't close the file afterwards.  It's
good practice to use <code>with</code> all the time anyway.</p>

<p>An <code>exit</code> call at the end of the program is unnecessary, the program
will exit immediately afterwards anyway and the exit code is well
defined too.</p>

<p>The <code>Respond</code> module should probably be <code>import</code>ed as well.</p>

<p><code>re.compile</code> is supposed to be run <em>once</em> if the regular expression
doesn't change.  The whole point is to compile it only once.</p>

<p>Inlining functions will likely give you better performance, but first
comes clarity.  It's a <em>good</em> idea to put chunks of logic into functions
instead of having a incomprehensible blob of code.</p>

<p>For the command line arguments using a module like
<a href="https://docs.python.org/2/library/argparse.html">argparse</a> would be a
splendid idea.  At the moment you have to know that there's a single
argument and what semantics it has.  The lower-/uppercase switch could
also be a command line flag instead.</p>

<p>The two cases in <code>getCheck</code> should either be rewritten with <code>if/else</code>,
or with a single <code>return</code> statement:</p>

<pre><code>def getCheck(chk, tf):
    if tf:
        return chk
    else:
        return string.lower(chk)

# or

def getCheck(chk, tf):
    return chk if tf else string.lower(chk)
</code></pre>

<p>Also, if there's already a function for it, use it when possible,
e.g. for the <code>isCaseSensitive</code> check.</p>

<pre><code>Find = getCheck(sys.argv[1], isCaseSensitive)
</code></pre>

<p>The <code>Length</code> argument for <code>GenerateRandomString</code> isn't used.</p>

<p>I'll stop here, you already got an answer with some cleanup, so I'll not paste my current state (which looks otherwise pretty similar).</p>
    </div>