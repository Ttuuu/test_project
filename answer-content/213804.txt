<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is pretty compact already so there isn't much room to reduce the size of it. Typically separating the error handling, calculations, and output of content are separated so you may want to look into that for code improvements but that won't make the code any smaller.</p>
<p><strong>Better data sanitation</strong></p>
<p>It's great that you do your best to sanitize user input before you use it. But, there's better ways to go about it. Since
both inputs are expected to be floating point numbers you can use PHP's built in <a href="http://php.net/manual/en/function.filter-var.php" rel="nofollow noreferrer"><code>filter_var()</code></a> with the
<code>FILTER_VALIDATE_FLOAT</code> flag to sanitize the value to a floating point number:</p>
<pre><code>$pies     = filter_var($_REQUEST["pies"], FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND);
$pulgadas = filter_var($_REQUEST["pulgadas"], FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND);
</code></pre>
<p><strong>Combine/remove your IF statements</strong></p>
<p>When you see an IF statement followed by another IF statement that's usually a sign that you could combine the two into one as all of them must be true for the following code to be executed:</p>
<pre><code>if ( !empty($pies) &amp;&amp; !empty($pulgadas) &amp;&amp; (s_numeric($pies) &amp;&amp; is_numeric($pulgadas) ) {
</code></pre>
<p>The above line can then be shortened thanks to the better sanitation used above. The checks to is_numeric are no longer
needed since <code>filter_var()</code> will return a number or false which will be caught by the <code>empty()</code> checks. So you can now safely remove them:</p>
<pre><code>if ( !empty($pies) &amp;&amp; !empty($pulgadas) ) {
</code></pre>
<p>You can eliminate your check to see if <code>$pies &gt;= 0</code> by passing an extra flag to <code>filter_var()</code> to only allow positive numbers and zero.</p>
<pre><code>if ( filter_var($pies, FILTER_VALIDATE_INT) &amp;&amp; $pies &gt;= 0 ) {
</code></pre>
<p>becomes</p>
<pre><code>if ( filter_var($pies, FILTER_VALIDATE_INT, ['options' =&gt; ['min_range' =&gt; 0]]) ) {
</code></pre>
<p>You also forgot to add this check for <code>$pulgadas</code>.</p>
<h1>Other notes</h1>
<p><strong>Use constants to store values that will remain the same and are unchangeable</strong></p>
<p>Your variables containing the ratios for converting the measurements are better off set as constants than variables since they will remain the same and are unchangeable. (i.e. constant)</p>
<pre><code>$converPC = 30.48;
$converPlC = 2.54;
</code></pre>
<p>becomes (notice the use of all capital letters as that is the expected format of constants in PHP)</p>
<pre><code>define('CONVER_PC', 30.48);
define('CONVER_PLC', 2.54);
</code></pre>
<p><strong>Omit closing PHP tag</strong></p>
<p>When the closing tag is the last line of a PHP file you can safely omit and it is the standard practice as set forth by
the <a href="http://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">PSR-2</a> coding standard for PHP. There are <a href="https://stackoverflow.com/a/4499749/250259">lots of good reasons to do this</a>.</p>
<p><strong>Use <code>echo</code> over <code>print()</code></strong></p>
<p><code>print()</code> is an alias of <code>echo</code> but there are minor differences between the two. Although they don't come into play here, it is the PHP convention to use <code>echo</code> for outputting content.</p>
<p><strong>Unnecessary parenthesis</strong></p>
<p>If your IF statements you have parenthesis around each conditional. That is not necessary. You only need to use them when you need to clarify scope. When there's only one condition there is nothing that needs clarification.</p>
<h1>Outcome</h1>
<p>This code is untested but should give you the idea of what the comments above mean.</p>
<pre><code>define('CONVER_PC', 30.48);
define('CONVER_PLC', 2.54);
$pies     = filter_var($_REQUEST["pies"], FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND);
$pulgadas = filter_var($_REQUEST["pulgadas"], FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND);
if ( !empty($pies) &amp;&amp; !empty($pulgadas) ) {
    //Apartado de los pies
    if ( filter_var($pies, FILTER_VALIDATE_INT, ['options' =&gt; ['min_range' =&gt; 0]]) ) {
        $resultadoPI = $pies*CONVER_PC;
        echo "&lt;b&gt;CONVERSIÓN PIES - CENTÍMETROS&lt;/b&gt;&lt;br/&gt;";
        echo "$pies pies son $resultadoPI centímetros&lt;br/&gt;&lt;br/&gt;";
    } else {
        echo "&lt;b&gt;Error en pies&lt;/b&gt;&lt;br/&gt;";
        echo "Debe introducir un número entero mayor o igual que cero&lt;br/&gt;&lt;br/&gt;";
    }
    //Apartado de las pulgadas
    if ( filter_var($pulgadas, FILTER_VALIDATE_INT, ['options' =&gt; ['min_range' =&gt; 0]]) ) {
        $resultadoPU = $pulgadas*CONVER_PLC;
        echo "&lt;b&gt;CONVERSIÓN PULGADAS - CENTÍMETROS&lt;/b&gt;&lt;br/&gt;";
        echo "$pulgadas pulgadas son $resultadoPU centímetros";
    } else {
        echo "&lt;b&gt;Error en pulgadas&lt;/b&gt;&lt;br/&gt;";
        echo "Debe introducir un número mayor o igual que cero";
    }
} else {
    print "Para que todo funcione, debe rellenar TODOS los campos del formulario";
}
</code></pre>
    </div>