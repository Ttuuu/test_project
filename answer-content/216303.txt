<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't <code>sqrt</code> the distance.</h2>

<p>It is a common mistake when filtering distances to use the complete distance calculation.</p>

<p>Given 2 values <code>a</code> and <code>b</code>, if <code>a</code> &lt; <code>b</code> then it is also true that <code>sqrt(a)</code> &lt; <code>sqrt(b)</code>. Hence you don't need the expensive <code>sqrt</code> calculation to know the if a point is closer than another.</p>

<p>To find the closest the following does not use the <code>sqrt</code> of the distance.</p>

<pre><code>function closestPoint(points, point, dist){
    var x, y, found, min = dist * dist; // sqr distance
    for(const p of points) {
        x = p[0] - point[0];
        y = p[1] - point[1];
        x *= x;
        y *= y;
        if(x + y &lt; min){
            min = x + y;
            if (min === 0) { return p } // early exit
            found = p;
        }
    }
    return found;

}
</code></pre>

<h2>Not in the sort!!!</h2>

<p>You are doing the distance calculation in the sort DON'T!!!, that means you repeat the same calculations over and over.</p>

<p>To improve you throughput the following will reduce the over all time. The improvement is linear and does not change the complexity.</p>

<p><strong>Note</strong> that in JS <code>a ** 2</code> is slightly slower than <code>a * a</code></p>

<p>A more efficient version of your solution</p>

<pre><code>function findNearestPoints({list, center, k}) {
    const res = [];
    const cx = center[0], cy = center[1]; // alias and reduce indexing overhead
    const distSqr = (x, y) =&gt; (x -= cx) * x + (y -= cy) * y;
    const sort = (a, b) =&gt; a[1] - b[1];

    for (const p of list) { res.push([p, distSqr(p[0], p[1])]) }
    res.sort(sort).length = k;
    return res.map(p =&gt; p[0]);
}
</code></pre>

<h2>The <code>**</code> operator for roots</h2>

<p><strong>Note</strong> that JS has the <code>**</code> operator. That you can use it to get roots by making the right side the inverse, 1 over the power. Thus the sqrt is <code>**(1/2)</code> the cube root is <code>**(1/3)</code></p>

<p>eg </p>

<pre><code>if 2 ** 2 === 4 then 4 ** (1/2) === 2
if 2 ** 3 === 8 then 8 ** (1/3) === 2  Don't approximate 8 ** 0.33 !== 2
if 2 ** 4 === 16 then 16 ** (1/4) === 2
</code></pre>

<h2>Better sort</h2>

<p>The sort is the bottle neck in this problem.</p>

<p>You can use a binary tree sort as it is the least complex for real numbers (every coder should learn how to implement a binary tree sort)</p>

<h2>Do you need the sort?</h2>

<p>However I think (think means might be, I am going by instinct) that there is a faster solution that does not involve a sort and that is at most <span class="math-container">\$O(n)\$</span></p>

<p>Remember that the order of the points is not important, that you need only separate the points in two. It may take a few passes to do, but as long as the number of passes is not related to the number of points or 'k' you will have a <span class="math-container">\$O(n)\$</span> solution.</p>

<p>I am not going to give you the solution this time (if there is one) as there is no problem solving experienced gained coping code.</p>
    </div>