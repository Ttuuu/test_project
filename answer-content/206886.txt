<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things I noticed while looking over the code:</p>

<ol>
<li>You don't need the <code>import scala.math.Ordering._</code> statement. It's not buying you anything.</li>
<li>It would be easier to read/follow the code if you used better variable names.</li>
<li><code>12345</code> actually isn't a very big <code>Int</code>. <code>Int.MaxValue</code> would be better.</li>
<li>If this <code>val size = args(0).toInt</code> is zero then this <code>println(a(pa), b(pb), c(pc))</code> will throw.</li>
<li>According to a hint from the IntelliJ IDE, <code>array.length</code> is more efficient than <code>array.size</code> because <code>.size</code> "requires an additional implicit conversion to <code>SeqLike</code> to be made."</li>
</ol>

<p>But the real problem is that you're using Scala, a functional language, to write imperative code with many mutable variables, making the code more verbose.</p>

<p>Your algorithm is efficient and limits the number of <code>while</code> loop iterations, so how to express it in a functional manner: recursion.</p>

<pre><code>def minDif[N:Numeric](x :Seq[N] ,y :Seq[N] ,z :Seq[N]
                     ,curSet :Seq[N] ,curDiff :N) :Unit = {
  import Numeric.Implicits._
  import Ordering.Implicits._

  if (x.isEmpty || y.isEmpty || z.isEmpty)
    println(curSet.mkString(","))  //done
  else {
    val newSet  = Seq(x.head, y.head, z.head)
    val newMin  = newSet.min
    val newDiff = newSet.max - newMin
    val (nxtSet, nxtDiff) = if (curDiff &gt; newDiff) (newSet, newDiff)
                            else                   (curSet, curDiff)
    newSet match {
      case Seq(`newMin`,_,_) =&gt; minDif(x.tail, y, z, nxtSet, nxtDiff)
      case Seq(_,`newMin`,_) =&gt; minDif(x, y.tail, z, nxtSet, nxtDiff)
      case Seq(_,_,`newMin`) =&gt; minDif(x, y, z.tail, nxtSet, nxtDiff)
    }
  }
}

// a b and c have already been populated and sorted
minDif(a, b, c, Seq(), Int.MaxValue)
</code></pre>

<p>The <code>minDif()</code> method is tail recursive so it is compiled to an equivalent <code>while</code> loop under the hood.</p>

<p>Notice that I used <code>Seq</code> as the collection type. This allows <code>minDif()</code> to accept many different types as input: <code>Array</code>, <code>Stream</code>, <code>Vector</code>, etc. Since there is no indexing into any collection there is little advantage in restricting it to just arrays.</p>

<p>Also the element type is <code>Numeric</code> so this will work with <code>Int</code>, <code>Float</code>, <code>Long</code>, etc.</p>
    </div>