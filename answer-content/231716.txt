<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think there is nothing wrong with using boolean-valued expressions to compute boolean results, instead of <code>if</code>/<code>elif</code>/<code>else</code> statements. However, it is still important to write these expressions clearly. Most of your expressions can be simplified, and none of your expressions actually require using the ternary operator.</p>

<p>If you write a ternary operator where the true-branch has the value <code>True</code> and the false-branch has the value <code>False</code>, then the ternary operator is superfluous.</p>

<p>If the condition is a boolean already, such as <code>True if column['hidden'] != 0 else False</code>, then you can simply write <code>column['hidden'] != 0</code> as this will already be either <code>True</code> or <code>False</code> as required.</p>

<p>If the condition is not necessarily a boolean, e.g. <code>True if my_list else False</code> (not from your example) where <code>my_list</code> is a list and the condition tests if it is non-empty, then you can simply write <code>bool(my_list)</code> to calculate the boolean result you want.</p>

<p>When you have a condition like <code>isCalendar or isString and not isFile</code> which has both <code>and</code> and <code>or</code>, I recommend <em>always</em> using brackets to clarify the order of operations. Not everyone knows that <code>and</code> takes precedence over <code>or</code>, and even if they do know this, they may not know that <em>you</em> knew, and might trust the code less. Write <code>isCalendar or (isString and not isFile)</code> to make clear what this code does; or if you wanted it to be <code>(isCalendar or isString) and not isFile</code>, write that.</p>

<p>The expression for <code>isReadOnly</code> is very long, so I suggest splitting this over multiple lines. If an expression is inside <code>(</code>parentheses<code>)</code>, then you can space it across multiple lines however you wish.</p>

<p>By the way, <code>column['type_file'] is True</code> is redundant, assuming <code>column['type_file']</code> is always a boolean. If it's <code>True</code>, then <code>True is True</code> results in <code>True</code>, while <code>False is True</code> results in <code>False</code>; either way, the result is the same as the original value of <code>column['type_file']</code>. Imagine writing <code>x + 0</code> where <code>x</code> is a number; it won't change the result, so you might as well just write <code>x</code>.</p>
    </div>