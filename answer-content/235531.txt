<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Per se returning a promise from an Angular Service is not bad, however there are numerous things in Angular world that are heavily based on Observables:</p>

<ul>
<li><del>usually you will likely change the <em>change detection</em> to <code>ChangeDetectionStrategy.OnPush</code> in your components and this will most likely be easier with Angular's <code>async</code> pipe</del> <strong>not a problem</strong>, because <code>async</code> also supports Promises.</li>
<li>if you use your services for any kind of state and if your are using <em>NgRx</em> for effectively managing it, you'll be using <code>@Effects</code>that are basically a lot of RxJs magic and thus it might be easier to use <em>Observables</em> in the first place.</li>
<li>composing services for <em>Guards</em> is easier with Observables</li>
</ul>

<p>Having that said, I agree with you, that typical REST services are <em>fire and forget</em> and thus IMO do not fit really into <code>Observables</code> well which are meant to be constant sources of events.</p>

<p>It is all about composition, Observables allow better composition for <strong>multiple</strong> async operations that need to be <strong>composed</strong>, whereas Promises can be nowadays used pretty easy with <code>async/await</code> for <strong>singular, isolated</strong> operations.</p>

<p>In the end, I'd advise to stick with the same convention throughout your whole app - <strong>either</strong> have all services return <em>Promises</em> and convert them to <em>Observables</em> when needed <strong>or</strong> always use <em>Observables</em>. I assume a lot of examples are using Observables because for non-trivial apps you end up needing better composition options than with pure Promises.</p>
    </div>