<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>std::vector&lt;&gt;</code> is a dynamically sized container.  The allocation strategy is implementation dependent, but for sake of the argument, assume the <code>.capacity()</code> of a <code>std::vector&lt;&gt;</code> starts off at 1 and doubles each time the vector's size exceeds the current capacity.  This capacity increase requires a reallocation of storage, and possibly a copying of the entire array contents to a new location.  If you are generating 1 trillion primes, you'll need 40 reallocations and will have done 1 trillion number copies over the course of the 40 reallocations.  This is wasting time.  If the operating system gets involved with virtual memory paging, you are going to suck up a lot more time.</p>

<p>This overhead can be eliminated by simply <a href="http://www.cplusplus.com/reference/vector/vector/reserve/" rel="nofollow noreferrer"><code>.reserve(size_type n)</code></a>-ing the expected size of the vector ahead of time.  With sufficient memory allocated to the vector upfront, no reallocations will occur, and no copies will occur.</p>

<hr>

<pre><code>    for (unsigned long long i = 7;; i += 2) 
    {
        for (int j = 0; i % primes[j] != 0; ++j)  
        {
            if (sqrt(i) &lt;= primes[j]) 
            {
</code></pre>

<p>When <code>i</code> is a prime number or semi-prime number in the order of, say, one million, you are looping over all the prime numbers upto the square root of a million, to see if any of them can divide your current number.</p>

<p>How many different values will <code>sqrt(i)</code> evaluate to over those thousand iterations?  Or phrased another way, how many times are you computing the same square root?  You may want to move that <code>sqrt(i)</code> calculation out of the inner loop.</p>

<hr>

<pre><code>    for (unsigned long long i = 7;; i += 2) 
</code></pre>

<p>If you let this loop run over night, or even over a fort-night, will this loop ever end?  No!  <code>i</code> will overflow the <code>long long</code> and become negative, and slowly increment back towards positive numbers and repeat.  Forever is not long enough.  Use, at the very least, <code>i &gt; 0</code> as the loop test condition.</p>

<hr>

<p>A <code>long long</code> has at least 64 bits. A <code>double</code> has only a 52 bit mantissa.  This means when you pass a large <code>long long</code> to <code>sqrt( )</code>, you will end up losing a few bits of precision, which can make your <code>sqrt()</code> return slightly the wrong value.  When you test <code>sqrt(i) &lt;= primes[j]</code>, if <code>i</code> is greater than 2^52, and is a perfect square, you might return a value slightly less than the correct value and fail to test the last prime value, and erroneously declare the perfect square a prime number.</p>

<hr>

<p>You are stuffing <code>long long</code> values into a <code>std:vector&lt;int&gt;</code> container.  After a while, they ain't gonna fit.</p>

<hr>

<p>You are using <code>long long</code> for your prime number candidates, which means you expect to find some prime numbers above 2^31.</p>

<p>The Prime Number Theorem tells us the density of prime numbers in that range to be around 1/21.  Or, after testing numbers up to 21 billion, you should have found around 1 billion prime numbers.</p>

<p>Your prime number index <code>j</code> is declared as an <code>int</code>.  An <code>int</code> is only guaranteed to have 16 bits.  You would need at least a <code>long</code> to guarantee 32 bits.  But if you hope to find prime numbers up to 2^52, you have to expect to find 2^45 primes, which even exceeds a <code>long</code>.  Your <code>j</code> index should be a <code>long long</code> as well.</p>

<hr>

<p>Finally, as mentioned in the comments, look at the Sieve of Eratosthenes.</p>
    </div>