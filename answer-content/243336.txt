<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot of things that are ... quite suboptimal in this code. Let's start with the easy and obvious ones:</p>

<h3>The naming scheme and bracing style is a bit of a mess</h3>

<p>The following names are bordering on meaninglessness. When naming variables you should strive to imbue them with semantic information that helps the reader understand the thought process and the surrounding context.</p>

<p><code>extlist</code>, <code>arr</code>, <code>data</code>, <code>obj</code>, <code>counter</code> and similar variables do <strong>nothing</strong> to illuminate the context of the code. That costs time and mental resources when reading the code.</p>

<p><code>conv_obj</code>, <code>conv_arr</code> and <code>subList_output</code> should not be named with underscores in the names, since there's no java style guide recommending snake_case for the variables.</p>

<p>In addition, there are at least two if-blocks that do not have braces around the block and at least one "double if-block" that should be merged into a single one.<br>
Speaking overall, the formatting seems to be constrained to some arbitrary number of columns, which I found to be somewhat ... hard to read. </p>

<h3>Serialization shouldn't be manual work</h3>

<p>What you have here is the serialization of data into a JSON object that you do <strong>manually</strong>. In general you'd want to not do that.</p>

<p>In the ideal case you'd be able to leave the JSON serialization to a renderer that follows in your usual action chain. That <strong>should</strong> allow you to cut out all of the rendering code for JSON interacting with JSONArray, JSONObject and all the other related classes.</p>

<p>Unfortunately it's impossible to see from the code you presented, how your environment is set up, so I can't really give you any hints on how to achieve that.</p>

<h3>Avoid System.out.println</h3>

<p>System.out.println is not a replacement for proper logging and you can expect it to cost you quite some runtime if you use it inside a loop or on a hotpath because it's not really optimized (and shouldn't be).</p>

<p>If you want debug information, use a debugger. If you want to retrace an execution after it's taken place, either use logging or use an observability provider and instrument your code with that.<br>
System.out is <strong>not</strong> intended for either of these things, so don't use it like that.</p>

<h3>Unused, overscoped and wrongly used variables and language constructs</h3>

<ul>
<li><code>extlist</code> is only ever used to initialize JSONArray instances. Instead of calling the JSONArray constructor taking a list as argument, you should just use the no-argument constructor and remove <code>extlist</code>.</li>
<li><code>data</code> is <strong>never used</strong> in the code you show here. Remove it.</li>
<li><code>obj</code> doesn't need to be created outside of the if-block. Push it inside the block because it's not used outside.</li>
<li><code>stockInfoList</code> does not need to be initialized before directly being overwritten again. Remove <code>stockInfoList = new ArrayList&lt;StockTransInfo&gt;();</code>.</li>
<li><code>privilegeInterface</code> can be inlined because it's only ever used to get the status list. That statusList is only used when the info status is <code>ADMIN_CORRECTION</code> or <code>CORRECTED_BY_MEMBER</code>. You subsequently check whether the status is in the <code>statusList</code> <strong>just</strong> to put the status object's correct casing <strong>back into the <code>info</code> object</strong>. In 99.9% of the cases this <strong>SHOULD NOT ACCOMPLISH ANYTHING</strong>.</li>
<li><p>The <code>sbCertificates</code> String is only ever used directly after being cleared and then set once. It's never used to actually build a string and should be replaced by:</p>

<pre class="lang-java prettyprint-override"><code>String cert = String.format("&lt;span style=\"%s\"&gt;&lt;b&gt;%s&lt;/b&gt;&lt;/span&gt;",
    AppConstants.LEGENDS_CERTIFICATE_COLOR, dateUtil.seprateVolume(
        info.getConvertedCertificates(), locale.ENGLISH));
obj.put("TransactionVolume", cert);
info.setVolumeStr(cert);
</code></pre></li>
<li><p>While we're here: <code>seprateVolume</code> should probably be <code>separateVolume</code>?</p></li>
<li><p>There's at least one if-statement where the corresponding else-statement does <strong>EXACTLY THE SAME</strong>, making the distinction utterly meaningless.</p>

<pre class="lang-java prettyprint-override"><code>if (info.getStockTransactionType().equalsIgnoreCase(
        CreditTradeConstants.CNVCRBK)
        || info.getStockTransactionType().equalsIgnoreCase(
                CreditTradeConstants.CNVCRBK_SYSTEM) ) {
    obj.put(PROGRAM, programName);
    info.setProgramName(programName);
} else {
    obj.put(PROGRAM, programName);
    info.setProgramName(programName);
}
</code></pre></li>
<li>The <code>counter</code> variable is only ever used in System.out calls. I don't see it adding much value at all, since it won't allow identifying a transaction, as such it should just be removed along with all the System.out calls. If you want to diagnose the code in production, use the StockTransactionId to identify a transaction.</li>
<li>The <code>if (info.getStatus() != null)</code> block is completely useless, just remove it.</li>
<li>While <code>conversionRatio</code> is written to multiple times, it's only read in a System.out call directly after it's initialization, making it a pointless exercise.</li>
</ul>

<h3>I'm tired.</h3>

<p>I'm really tired by this code.<br>
What this code needs is a good scrubbing and cleanup around removing things that are never used or used in ways that don't actually make an impact.</p>

<p>After that you need to find a way to separate display logic from business logic. It doesn't seem viable to generate html inside an Action to put into a JSON object as a string. That's something for the frontend to do.</p>

<p>When all of that is done, the next thing is taking a good hard look at your domain model and identifying places where you can take advantage of a strongly typed language. The obvious example I can see is the <code>stockTransactionType</code>. There's a variety of types you handle, but they are always mutually exclusive and there only exists a finite number of them. From what I can see, they should be represented by an <code>enum</code> and not a <code>String</code>. A sideeffect of that would be a significant increase in speed when checking which transactionType you're currently dealing with.</p>
    </div>