<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There certainly are ways to break this down to more understandable chunks, in fact, there are refactoring techniques that address your specific issue, long method.</p>

<p>You can look at <a href="https://refactoring.guru/smells/long-method" rel="nofollow noreferrer">https://refactoring.guru/smells/long-method</a></p>

<p>The most common way to simplify a long method is just to break it up to smaller parts using the Extract method technique.</p>

<p>So for example, first, I would take out the pattern creation and make an own method for that (I'm assuming you are working in a class):</p>

<pre><code>/**
 * @param $filters
 * @return string
 */
private function getPattern($filters): string
{
    if ($filters !== null) {
        $sn = utf8_decode($filters-&gt;name);
        $givenName = utf8_decode($filters-&gt;firstName);
        $employeeId = $filters-&gt;id;
    } else {
        $sn = '';
        $givenName = '*';
        $employeeId = '';
    }
    $pattern = '(&amp;';

    if ($givenName !== '') {
        $pattern .= '(givenName=' . $givenName . ')';
    }

    if ($sn !== '') {
        $pattern .= '(sn=' . $sn . ')';
    }

    if ($employeeId !== '') {
        $pattern .= '(employeeid=' . $employeeId . ')';
    }

    $pattern .= ')';
    return $pattern;
}

private function _searchADUser($filters) {
    try {
        $pattern = $this-&gt;getPattern($filters);

        $con = ldap_connect($this-&gt;ldap-&gt;connection);
        ...
</code></pre>

<p>You can refactor the getPattern method further but let's wait with that now and see what else we can do.</p>

<p>The other chunk would probably be to take out that ldap stuff and put that in it's own method:</p>

<pre><code>/**
 * @param string $pattern
 * @return array
 * @throws ErrorException
 */
private function getUserInfo(string $pattern): array
{
    $con = ldap_connect($this-&gt;ldap-&gt;connection);
    ldap_bind($con, $this-&gt;ldap-&gt;username, $this-&gt;ldap-&gt;password);

    $result = ldap_search($con, $this-&gt;ldap-&gt;dn, $pattern);
    $userInfo = ldap_get_entries($con, $result);

    if ($userInfo['count'] === 0) {
        throw new ErrorException('Die Suche lieferte keine Ergebnisse.');
    }
    return $userInfo;
}
</code></pre>

<p>The main method know looks something like this:</p>

<pre><code>private function _searchADUser($filters) {
    try {
        $pattern = $this-&gt;getPattern($filters);
        $userInfo = $this-&gt;getUserInfo($pattern);
</code></pre>

<p>When refactoring, I like to try to make the code as clear as I can and one thing that makes code difficult to read is when the naming changes, my advice would be to stick be the name already in use.</p>

<pre><code>$name = $userInfo[$i]['sn'][0];
</code></pre>

<p>would become</p>

<pre><code>$sn = $userInfo[$i]['sn'][0];
</code></pre>

<p>Break them out in their own methods:</p>

<pre><code>private function getSN(array $userInfo, int $i): string
{
    if (array_key_exists('sn', $userInfo[$i])) {
        $sn = $userInfo[$i]['sn'][0];
    } else {
        $sn = '--';
    }
    return $sn;
}

private function getGivenName(array $userInfo, int $i): string
{
    if (array_key_exists('givenname', $userInfo[$i])) {
        $givenname = $userInfo[$i]['givenname'][0];
    } else {
        $givenname = '--';
    }
    return $givenname;
}

private function getEmployeeId(array $userInfo, int $i): string
{
    if (isset($userInfo[$i]['employeeid'])) {
        $employeeId = $userInfo[$i]['employeeid'][0];
    } else {
        $employeeId = '--';
    }

    return $employeeId;
}
</code></pre>

<p>The for loop would then start like this:</p>

<pre><code>for ($i = 0; $i &lt; $userInfo['count']; $i++) {
    $sn = $this-&gt;getSN($userInfo, $i);
    $givenName = $this-&gt;getGivenName($userInfo, $i);
    $employeeId = $this-&gt;getEmployeeId($userInfo, $i);
</code></pre>

<p>As you can see, you can break up the code into smaller chunks and by doing so making it more approachable. </p>

<p>I will stop here but please continue to explore the extract method technique and continue to apply it.</p>

<p>Hopes this helps.</p>
    </div>