<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Since this is in Java and for academic purposes, my guess would be that you're using Eclipse. Hit <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>F</kbd> to format your code, and move any lines that it chops up back into one where appropriate. The key binding is similar for Netbeans and IntelliJ's IDEA.</p></li>
<li><p>Too many useless variables. You have a bad habit of creating variables for one off-uses, e.g. in <code>elementOrElements()</code>. Just return what <code>send</code> equals. If you want to describe what the code does, then use comments (which you don't use at all in your implementation btw).</p></li>
<li><p>If the functionality isn't obvious, then use comments. Most programmers can discern what generic methods and operations look like, but when in doubt comment. Remember that you're writing software primarily for other <em>humans</em>. This is critical in a professional environment.</p></li>
<li><p>Delete <code>elementOrElements()</code>. In the single <code>print</code> call in which it's used, just say, <code>The contents of the Queue are:</code>.</p></li>
<li><p>Consistent variable naming is required. You have <code>tmpfront</code>, which should be <code>tempFront</code> according to Java conventions. Not a huge deal since you seem to adhere to this throughout the program. I add the extra <code>e</code> out of personal preference (and the fact that it helps other humans ever so slightly).</p></li>
<li><p>Use proper <code>Queue</code> naming conventions, i.e. use <code>enqueue</code> instead of <code>enQueue</code>. Creating a couple of helper methods like <code>isEmpty()</code> and <code>isFull()</code> would help your implementation in a couple of places.</p></li>
<li><p>Move <code>CircularQueue</code> to <code>CircularQueue.java</code> and add some <code>public</code> modifiers to your methods. This is mainly for convention training.</p></li>
</ol>
    </div>