<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unused: we don't use <code>j</code>, and we don't need to include <code>&lt;stdbool.h&gt;</code>, <code>&lt;stdlib.h&gt;</code> or <code>&lt;time.h&gt;</code>.</p>
<p>We have two loops - one that reads input into <code>message[]</code> and one that converts and outputs the content of <code>message[]</code>.  We can avoid the storage by combining the two loops into one:</p>
<pre><code>while ((ch = getchar()) != '\n') {
    ch = toupper(ch);

    switch (ch) {
        /* ... */
    }
</code></pre>
<p>There's a couple of fixes needed above.  Firstly, we need to check that <code>ch</code> is not <code>EOF</code>, or we'll loop indefinitely if the input stream is closed before the first newline.  <code>ch</code> needs to be an <code>int</code> value here, as the distinction between a character and end-of-file is lost when we narrow to <code>char</code>.</p>
<p>Secondly, <code>ch</code> holds values of a (possibly signed) char, but <code>toupper()</code> (like all the <code>&lt;ctype.h&gt;</code> functions) works on an <code>int</code> representation of <code>unsigned char</code> value.  Fixing those gives us:</p>
<pre><code>int ch;
while ((ch = getchar()) != '\n' &amp;&amp; ch != EOF) {
    ch = toupper((unsigned char)ch);
</code></pre>
<hr>
<p>Instead of the <code>switch</code>, we might consider a table-driven approach.  That would work something like this:</p>
<pre><code>char conversions[UCHAR_MAX];
/* identity mapping for most chars */
for (unsigned i = 0;  i &lt; sizeof conversions;  ++i) {
    conversions[i] = (char)i;
}
/* exceptions */
conversions['S'] = '5';
conversions['O'] = '0';
conversions['I'] = '1';
conversions['E'] = '3';
conversions['B'] = '8';
conversions['A'] = '4';


int ch;
while ((ch = getchar()) != '\n' &amp;&amp; ch != EOF) {
    putchar(conversions[toupper(ch)]);
}
</code></pre>
<hr>
<p>Finally, <code>puts()</code> is simpler than <code>printf()</code> for simple strings ending in newline, and we don't need to return 0 from <code>main()</code>.</p>
<hr>
<h1>Modified code</h1>
<pre><code>#include &lt;ctype.h&gt;
#include &lt;limits.h&gt;
#include &lt;stdio.h&gt;

int main(void)
{
    char conversions[UCHAR_MAX];
    /* identity mapping for most chars */
    for (unsigned i = 0;  i &lt; sizeof conversions;  ++i) {
        conversions[i] = (char)i;
    }
    /* exceptions */
    conversions['S'] = '5';
    conversions['O'] = '0';
    conversions['I'] = '1';
    conversions['E'] = '3';
    conversions['B'] = '8';
    conversions['A'] = '4';


    printf("Enter a message: ");

    int ch;
    while ((ch = getchar()) != '\n' &amp;&amp; ch != EOF) {
        putchar(conversions[toupper(ch)]);
    }

    // Finish the sentence
    puts("!!!!!!!!!!!!!!");
}
</code></pre>
    </div>