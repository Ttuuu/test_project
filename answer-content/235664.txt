<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Others have improved the parsing, but the code surrounding it is lacking. You asked for help for parsing the date but if the code should be made more "elegant", then instead of defining a single purpose static method for accessing the birth date, you should define a class to represent the Rodne Cislo number. Provide a constructor that performs validation and getters for accessing different fields in the number:</p>

<pre><code>public class RodneCislo {
    private final LocalDate birthate;
    private final int serialNumber;

    public RodneCislo(final String rodneCislo) throws ValidationException {
        // Check format for correctness with regex.
        // Extract date and serial number.
        // Verify that checksum is correct.
    }

    public LocalDate getBirthDate() {
        ...
    }

    public int getSerialNumber() {
        ...
    }

    public Optional&lt;Character&gt; getChecksum() {
        ...
    }
}
</code></pre>

<p>Now you have one reusable component that contains all the responsibilities involved in reading Rodne Cislo numbers. Define unit tests in a separate <code>RodneCisloTest</code> class.</p>

<p>The point of representing the Rodne Cislo number as a dedicated class instead of a string is to provide code level guarantee to whoever processes the numbers that it is actually a valid number and not just a random piece of text (and thus input validation needs to be performed only once).</p>
    </div>