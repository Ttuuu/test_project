<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While I do agree with the others that a loop is the simpler solution in this situation, I'd nevertheless like demonstrate a <code>Stream</code> solution, because IMO the noted disadvantages are not due to streams and functional programming in general, but due to Java's limited concept and implementations of streams.</p>
<p>A functional way would be extend the stream of converted addresses with an "infinite" stream of default addresses and then cut that stream off at 16:</p>
<pre><code>Stream&lt;Address&gt; addressStream = cardAccountDetails.stream().map(AccountService::buildAddress);
Stream&lt;Address&gt; defaultAddressStream = Stream.generate(AccountService::buildDefaultAddress);

return Stream.concat(addressStream, defaultAddressStream).limit(16).collect(Collectors.toList());
</code></pre>
<p>If you are interested in more realistic functional programming you could try one of several functional libraries which allow a more concise and readable syntax. For example with <a href="https://vavr.io" rel="nofollow noreferrer">vavr.io</a>:</p>
<pre><code>return Stream.ofAll(cardAccountDetails) // Creates a io.vavr.collections.Stream
  .map(AccountService::buildAddress)
  .extend(AccountService::buildDefaultAddress)
  .take(16)
  .collect(Collectors.toList()); // Converts back to a regular Java List 
</code></pre>
<p>Instead of converting back to a Java <code>List</code> you could just use vavr colletions through out your project.</p>
    </div>