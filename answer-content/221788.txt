<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Headers and namespaces</h1>

<p>Don't <code>using namespace</code>, especially a big and growing namespace like <code>std</code> that's not designed for it.</p>

<p>There's no need to include <code>&lt;cmath&gt;</code>.  On the other hand, there is a clear need for <code>&lt;iostream&gt;</code>, which has been omitted.</p>

<h1>Structure</h1>

<p>There's no need for the <code>Power</code> class; it maintains no state.  The functions should simply be free functions, perhaps in a namespace.</p>

<h1>Consider full range of types</h1>

<p><code>raiseToPower()</code> only works with non-negative exponents; it should either accept an unsigned type or be modified to work correctly with negative inputs.  Perhaps like this:</p>

<pre><code>    if (power &lt; 0) {
        return raiseToPower(1/x, -power);
    }
</code></pre>

<h1>Improve the algorithm</h1>

<p>For large <code>power</code>, the loop is executed many times.  We can use <em>binary exponentation</em> to reduce that to <code>logâ‚‚ power</code> iterations of the loop.</p>

<h1>Avoid over-complication</h1>

<p><code>floor0()</code> doesn't need that <code>if</code>/<code>else</code>; simply add 0.5 <em>before</em> truncating:</p>

<pre><code>constexpr double floor0(double num)
{
    return int(num + 0.5);
}
</code></pre>

<p>It might be better to use <code>long</code> or <code>long long</code> there; in any case, you'll still suffer bugs when the value is too big for the integer type.  <code>std::floor()</code> doesn't have that problem.</p>

<h1>Validate inputs</h1>

<p>If I enter a non-number, I don't get a clear error message.  Instead, the program uses uninitialised values, which is Undefined Behaviour.  Don't do that; instead check that <code>std::cin</code> is still good before using <code>x</code> or <code>i</code>.</p>

<h1>Avoid <code>std::endl</code> unless you need output flushing</h1>

<p>None of the uses of <code>std::endl</code> here are necessary, and we can use <code>\n</code> instead.  (Remember that using <code>std::cin</code> flushes the output streams, and returning from <code>main()</code> also flushes outputs).</p>

<hr>

<h1>Modified code</h1>

<pre><code>double raiseToPower(double x, int power)
{
    if (power &lt; 0) {
        return raiseToPower(1/x, -power);
    }

    double result = 1.0;
    double m = x;

    for (;  power;  power /= 2) {
        if (power % 2) {
            result *= m;
        }
        m *= m;
    }
    return result;
}

constexpr double floor0(double num)
{
    return int(num + 0.5);
}
</code></pre>

  

<pre><code>#include &lt;iostream&gt;

int main()
{
    double x;
    int i;
    std::cout &lt;&lt; "Please enter the number\n";
    std::cin &gt;&gt; x;
    std::cout &lt;&lt; "Please enter the integer power that "
                 "you want this number raised to\n";
    std::cin &gt;&gt; i;
    if (!std::cin) {
        std::cerr &lt;&lt; "Input format error\n";
        return 1;
    }
    auto const result = raiseToPower(x,i);
    std::cout &lt;&lt; x &lt;&lt; " raised to power " &lt;&lt; i &lt;&lt; " is equal to "
              &lt;&lt; result &lt;&lt; '\n';
    std::cout &lt;&lt; "The result rounded is "
              &lt;&lt; floor0(result) &lt;&lt; '\n';
}
</code></pre>
    </div>