<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>let rec getParents results state =
  let currentConfig = stateList |&gt; List.find (fun x -&gt; x.State = state)
  if isSome currentConfig.SuperState then 
    let super = get currentConfig.SuperState
    getParents (super::results) super
  else results |&gt; List.rev
</code></pre>

<p>I think it's cleaner to use pattern matching here, it would avoid having to repeat <code>currentConfig.SuperState</code>.</p>

<p>Also, using accumulator like this makes sense if the results from the deepest level of recursion should be first, not last. But that's not what you want, so you can just drop the accumulator and then do something like <code>super::(getParents super)</code>.</p>

<p>The rewritten function would look like this:</p>

<pre><code>let rec getParents state =
  let currentConfig = stateList |&gt; List.find (fun x -&gt; x.State = state)
  match currentConfig.SuperState with
  | None -&gt; []
  | Some super -&gt; super::(getParents super)
</code></pre>

<p>It's possible you intentionally wrote it the way you did, because it's tail recursive, so it won't blow up your stack no matter how deep the recursion is. If that's the case, then I think you should make sure stack overflow is a real risk with the non-tail-recursive version. And then you should add a comment that explains that's the reason why you wrote it that way.</p>
    </div>