<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't do this in a header file:</p>

<pre><code>using std::cout;
</code></pre>

<p>You are now messing with everybody else's code that uses your header file. That will not please them and can lead to issues down the road for them for which your name will be cursed for a thousand years.</p>

<p>No need to make the <code>node</code> public. The people using your class do not need to know the internal workings of the class.</p>

<pre><code>public:
    struct node {
        T data;
</code></pre>

<p>Don't use zero here.</p>

<pre><code>        node()
            : data(0)
            , next(nullptr)
</code></pre>

<p>If you use just braces, you force POD types to be zero, while user-defined types get default constructed.</p>

<pre><code>        // Try this.
        node()
            : data()           // Zero init POD. Or default construct.
            , next(nullptr)
</code></pre>

<p>But to be honest you don't need this constructor at all. I would just remove it.</p>

<p>Don't dynamically allocate a node in the destructor.</p>

<pre><code>queue&lt;T&gt;::~queue() {
    node *curr = new node();    // You just leak this.
                                // Just remove everything from the `new` forward.
</code></pre>

<p>If the tail is part of the list then you are going to call <code>delete</code> twice on some object.</p>

<pre><code>    delete tail;     
</code></pre>

<p>Remove that line. It is not needed.</p>

<p>Note: Here you are returning a copy of the value on the stack.</p>

<pre><code>template &lt;typename T&gt;
T queue&lt;T&gt;::front() const {
</code></pre>

<p>This may be what you want, but usually I would expect to see you return a reference to the object. That way a user can potentially modify the value. If they want to make a copy they can also do that by assigning it to an object (but it is not required).</p>

<p>As a result, you also usually want two versions of this function. A normal one and a const one.</p>

<pre><code>template &lt;typename T&gt;
T&amp; queue&lt;T&gt;::front() {


template &lt;typename T&gt;
T const&amp; queue&lt;T&gt;::front() const {
</code></pre>

<p>In:</p>

<pre><code>void  queue&lt;T&gt;::pop() {
</code></pre>

<p>No need to crate a tmp node (you just leak it).</p>

<pre><code>    node *tmp = new node();
</code></pre>

<p>You have already tested for <code>(elements == 0)</code> above, and thrown if so. So this <code>if</code> statement is always true.</p>

<pre><code>    if(elements != 0) tmp = head;
</code></pre>
    </div>