<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that could help you improve your code.</p>

<h2>Don't define a default constructor that only initializes data</h2>

<p>Instead of writing this:</p>

<pre><code>class LinkedList
{
    Node* _head;
    Node* _tail;
 public:
    LinkedList() : _head(nullptr) { }
    // etc.
};
</code></pre>

<p>write this:</p>

<pre><code>class LinkedList
{
    Node* _head = nullptr;
    Node* _tail = nullptr;
 public:
    // no need to explicitly write default constructor
    LinkedList() = default;
};
</code></pre>

<p>See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-default" rel="nofollow noreferrer">Cpp Core Guidelines C.45</a> for details.  Note also that this initializes <em>both</em> member data items.</p>

<h2>Think about whether the destructor should be virtual</h2>

<p>For an interview, you should be prepared to answer why the class destructor is not virtual and to explain circumstances in which it should be virtual.</p>

<h2>Eliminate redundant variables</h2>

<p>The current code contains this constructor:</p>

<pre><code>LinkedList(int data) { // O(1)
    Node* n = new Node(data);
    _head = n;
    _tail = n;
}
</code></pre>

<p>I'd prefer to see <code>n</code> eliminated and to see it written instead like this:</p>

<pre><code>LinkedList(int data) :
    _head{new Node{data}}, _tail{_head} {}
</code></pre>

<h2>Use <code>for</code> rather than <code>while</code> where appropriate</h2>

<p>The desructor currently looks like this:</p>

<pre><code>~LinkedList() { // O(n)
    Node* current = _head;
    Node* n;
    while(current) {
        n = current;
        current = current-&gt;next;
        delete n;
    }
    _head = nullptr;
}
</code></pre>

<p>Rather than introducing two extra variables, I'd write it using a <code>for</code> loop like this:</p>

<pre><code>~LinkedList() { // O(n)
    if (_head == nullptr) {
        return;
    }
    for (auto current{_head-&gt;next}; current; current = current-&gt;next) {
        delete _head;
        _head = current;
    }
}
</code></pre>

<h2>Fix the memory leak</h2>

<p>The current code has this member function:</p>

<pre><code>void append(int new_data) { // O(1)
    auto n = new Node(new_data);
    if(!_head) {
       _head = n;
       _tail = n;
    }
    else {
        _tail-&gt;next = new Node(new_data);
        _tail = _tail-&gt;next;
    }
}
</code></pre>

<p>The problem is that we create <em>two</em> nodes but only use one unless the list is empty.  I'd fix that like this:</p>

<pre><code>void append(int new_data) { // O(1)
    auto n{new Node(new_data)};
    if(_head == nullptr) {
       _head = _tail = n;
    } else {
        _tail-&gt;next = n;
        _tail = _tail-&gt;next;
    }
}
</code></pre>

<h2>Simplify your code</h2>

<p>The <code>remove</code> function is much more longer than it needs to be.  Right now it looks like this:</p>

<pre><code>    void remove(int target_data) { // O(n)
        if(!_head) { return; }
        Node* previous = nullptr;
        auto current = _head;
        for(; current-&gt;data != target_data; current = current-&gt;next) {
            if(!current-&gt;next) {
                return;
            }
            previous = current;
        }
        if(!current-&gt;next) {
            if(previous) {
                delete current;
                previous-&gt;next = nullptr;
            }
            else {
                 delete current;
                _head = nullptr;
            }
        }
        else {
            auto dangling_ptr = current-&gt;next;
            current-&gt;data = current-&gt;next-&gt;data;
            current-&gt;next = current-&gt;next-&gt;next;
            delete dangling_ptr;
        }
    }
</code></pre>

<p>It could be made somewhat simpler by creating a temporary <code>Node</code> that points to <code>_head</code>:</p>

<pre><code>void remove(int target_data) { // O(n)
    Node headptr{0};
    headptr.next = _head;
    for (Node* curr{&amp;headptr}; curr &amp;&amp; curr-&gt;next; curr = curr-&gt;next) {
        if (curr-&gt;next-&gt;data == target_data) {
            auto victim = curr-&gt;next;
            if (victim == _tail) {
                _tail = curr;
            }
            if (victim == _head) {
                _head = victim-&gt;next;
            }
            curr-&gt;next = victim-&gt;next;
            delete victim;
            return;
        }
    }
}
</code></pre>

<h2>Rethink the interface</h2>

<p>It's not unreasonable to expect that one might want to actually do something with the things inserted into a list.  Right now, there's no way to do anything except print which suggests an incomplete interface.</p>

<h2>Don't use <code>std::endl</code> if <code>'\n'</code> will do</h2>

<p>Using <code>std::endl</code> emits a <code>\n</code> and flushes the stream.  Unless you really need the stream flushed, you can improve the performance of the code by simply emitting <code>'\n'</code> instead of using the potentially more computationally costly <code>std::endl</code>.</p>

<h2>Make test success obvious</h2>

<p>The current test code exersizes the list, but it doesn't indicate what is <em>expected</em> to be printed.  I'd instead write both test scenarios and also the expected result so that it would be clear to anyone running the code whether everything was working as expected or not.</p>

<h2>Consider using a template</h2>

<p>A linked list is a fairly generic structure that could hold any kind of data if the class were templated, and not just an <code>int</code>.</p>

<h2>Consider possible uses</h2>

<p>For any code production, but especially if you're in an interview, think about how the class is being used and whether there are any restrictions or limits inherent in the design.  For example, think about <code>copy</code> and <code>move</code> operations.  If you write this, does the code do the right thing?</p>

<pre><code>LinkedList a;
a.append(1);
a.append(2);
a.append(3);
a.append(4);
auto b{a};
std::cout &lt;&lt; "a: " &lt;&lt; a &lt;&lt; '\n';
std::cout &lt;&lt; "b: " &lt;&lt; b &lt;&lt; '\n';
a.remove(1);
std::cout &lt;&lt; "a: " &lt;&lt; a &lt;&lt; '\n';
std::cout &lt;&lt; "b: " &lt;&lt; b &lt;&lt; '\n';
</code></pre>

<p>Also consider multithreaded code.  Would it be thread-safe to insert nodes from one thread and remove them from another?  If not, what would be needed to make that work?</p>
    </div>