<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public class MilisecondToDate {
</code></pre>
</blockquote>

<p>Millisecond has two 'l's in it.  </p>

<pre><code>public class MillisecondToDate {
</code></pre>

<p>You were consistent in your spelling, so this typo appears a lot.  I won't try to correct every instance but will fix it without comment where I happen to be editing code.  </p>

<blockquote>
<pre><code>    public final int DAY_OF_YEAR_IN_END_OF_JANUARY = 31;
    public final int DAY_OF_YEAR_IN_END_OF_FEBRUARY = 59;
    public final int DAY_OF_YEAR_IN_END_OF_MARCH = 90;
    public final int DAY_OF_YEAR_IN_END_OF_APRIL = 120;
    public final int DAY_OF_YEAR_IN_END_OF_MAY = 151;
    public final int DAY_OF_YEAR_IN_END_OF_JUNE = 181;
    public final int DAY_OF_YEAR_IN_END_OF_JULY = 212;
    public final int DAY_OF_YEAR_IN_END_OF_AUGUST = 243;
    public final int DAY_OF_YEAR_IN_END_OF_SEPTEMBER = 273;
    public final int DAY_OF_YEAR_IN_END_OF_OCTOBER = 304;
    public final int DAY_OF_YEAR_IN_END_OF_NOVEMBER = 334;
    public final int DAY_OF_YEAR_IN_END_OF_DECEMBER = 365;
</code></pre>
</blockquote>

<p>Given how you use this, this would be better written </p>

<pre><code>    public final int[] END_DAY_OF_MONTH = new int[] {
            0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };
</code></pre>

<p>Then </p>

<blockquote>
<pre><code>        int leapYear = 0;

        if(isLeapYear(getYear())) {
            leapYear = 1 ;
        }

        if(dayOfYear &lt; DAY_OF_YEAR_IN_END_OF_JANUARY) {
            month = 1;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_FEBRUARY + leapYear)) {
            month = 2;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_MARCH + leapYear)) {
            month = 3;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_APRIL + leapYear)) {
            month = 4;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_MAY + leapYear)) {
            month = 5;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_JUNE + leapYear)) {
            month = 6;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_JULY + leapYear)) {
            month = 7;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_AUGUST + leapYear)) {
            month = 8;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_SEPTEMBER + leapYear)) {
            month = 9;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_OCTOBER + leapYear)) {
            month = 10;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_NOVEMBER + leapYear)) {
            month = 11;
        }else if(dayOfYear &lt; (DAY_OF_YEAR_IN_END_OF_DECEMBER + leapYear)) {
            month = 12;
        }else {
            throw new Error("An error occurred trying to get the day of the month");
        }
</code></pre>
</blockquote>

<p>becomes </p>

<pre><code>        if (dayOfYear &lt;= END_DAY_OF_MONTH[0]) {
            throw new IllegalArgumentException("Cannot have non-positive day of year.");
        }

        if (dayOfYear &lt;= END_DAY_OF_MONTH[1]) {
            return 1;
        }

        if (isLeapYear(calculateYear())) {
            dayOfYear--;
        }

        for (int month = 2; month &lt; END_DAY_OF_MONTH.length; month++) {
            if (dayOfYear &lt;= END_DAY_OF_MONTH[month]) {
                return month;
            }
        }

        throw new IllegalArgumentException(
                "Cannot have day of year more than number of days in year.");
</code></pre>

<p>And </p>

<blockquote>
<pre><code>        int dayOfYear = getDayOfYear();
        int month = getMonth();
        int leapYear = 0;

        if(isLeapYear(getYear())) {
            leapYear = 1 ;
        }

        switch (month) {
            case 1:
                break;
            case 2:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_JANUARY; 
                break;
            case 3:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_FEBRUARY - leapYear; 
                break;
            case 4:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_MARCH - leapYear; 
                break;
            case 5:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_APRIL - leapYear; 
                break;
            case 6:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_MAY - leapYear; 
                break;
            case 7:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_JUNE - leapYear; 
                break;
            case 8:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_JULY - leapYear; 
                break;
            case 9:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_AUGUST - leapYear; 
                break;
            case 10:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_SEPTEMBER - leapYear; 
                break;
            case 11:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_OCTOBER - leapYear; 
                break;
            case 12:
                dayOfYear -= DAY_OF_YEAR_IN_END_OF_NOVEMBER - leapYear; 
                break;
            default:
                throw new Error("An error occurred trying to get the day of the month");
        }

        return dayOfYear;
</code></pre>
</blockquote>

<p>becomes </p>

<pre><code>        int day = calculateDayOfYear();
        int monthNumber = calculateMonth();

        if (monthNumber &gt; Month.FEBRUARY.getNumber() &amp;&amp; isLeapYear(calculateYear()) {
            // leap years have an extra day in February, so subtract that out
            // for days after February
            day--;
        }

        return day - END_DAY_OF_MONTH[monthNumber - 1];
</code></pre>

<p>I'm not sure about throwing an <code>IllegalArgumentException</code>.  There may be a better one.  But I am sure that you should not just throw <code>Error</code>.  The second method will throw an <code>ArrayIndexOutOfBounds</code> exception.  Perhaps the first one should too.  </p>

<p>It's also worth noting that these should never be called, as there should be no way to generate them.  There's an argument that they should be left out.  Because if you can't write a unit test for it, there's no point in having the code for it.  </p>

<p>This requires an <code>enum</code> named <code>Month</code> with the month names as values.  It should have a <code>getNumber</code> method that returns the one-indexed month of the year.  In particular, it should return a 2 for <code>Month.FEBRUARY</code>.  </p>

<p>I changed <code>get</code> to <code>calculate</code> wherever you were not accessing a field.  </p>

<p>I disagree with this approach.  Note that you have to recalculate each value every time you need it.  I would rather calculate all the values once, save them, and just fetch them as needed.  To do this, I would create a <code>DateTime</code> class with getters for each field (millisecond, second, minute, hour, day of year, day of month, month, year, etc.).  Then your <code>MillisecondToDate</code> class could have have a <code>convert</code> method that would return a <code>DateTime</code> and take an <code>epochMillisecond</code> parameter.  I suspect that you would find synergies in the conversion.  </p>

<blockquote>
<pre><code>    private int getTotalOfLeapYears() {
        int currentYear = getYear();
        int totalLeapYears = 0;
        for(int year = FIRST_YEAR; year &lt;= currentYear; year++) {
            if(isLeapYear(year)) {
                totalLeapYears += 1;
            }
        }
        return totalLeapYears;
    }
</code></pre>
</blockquote>

<p>First, I would call this <code>countLeapYears</code>.  </p>

<p>Second, why increment by one?  Find the first leap year after <code>FIRST_YEAR</code> (1972) and increment by four.   </p>

<p>Third, you shouldn't need to count.  You can calculate this.  </p>

<pre><code>    public final int LEAP_CENTURY_YEAR_COUNT = 400;
    public final int EPOCH_LEAP_CENTURY_COUNT = FIRST_YEAR / LEAP_CENTURY_YEAR_COUNT;
    public final int LEAP_CENTURY_LEAP_YEAR_COUNT = 97;

    private calculateLeapYearsUntil() {
        int currentYear = calculateYear();
        if (currentYear &lt; FIRST_YEAR) {
            return 0;
        }

        int sinceLeapCenturyCount = currentYear % LEAP_CENTURY_YEAR_COUNT;
        int leapCenturyCount = currentYear / LEAP_CENTURY_YEAR_COUNT - EPOCH_LEAP_CENTURY_COUNT;

        int leapYearCount = leapCenturyCount * LEAP_CENTURY_YEAR_COUNT;
        leapYearCount += sinceLeapCenturyCount / 4;
        leapYearCount -= sinceLeapCenturyCount / 100;

        return leapYearCount;
    }
</code></pre>

<p>I haven't tested this, so be careful of off-by-one errors and such.  But an approach like this should calculate the number of leap years directly.  It won't make much difference if the year is 2019, but if the year is 12019, then this should do significantly fewer calculations.  </p>

<p>This solution won't work with years before 1970, but neither did your solution.  I did my best to make the return values match yours.  </p>

<blockquote>
<pre><code>        if ((year % 4 == 0) &amp;&amp; ((year % 100 != 0) || (year % 400 == 0))) {
            return true;
        }else {
            return false;
        }
</code></pre>
</blockquote>

<p>This pattern can be written more briefly and simply as </p>

<pre><code>        return (year % 4 == 0) &amp;&amp; ((year % 100 != 0) || (year % 400 == 0));
</code></pre>

<blockquote>
<pre><code>    public String toString() {
        String date = "";

        date += getYear() + "-";
        date += getMonth() + "-";
        date += getDayOfMonth() + " ";

        date += getHour() + ":";
        date += getMinute() + ":";
        date += getSecond();

        return date;
    }
</code></pre>
</blockquote>

<p>You can use either <code>String.format</code> or <code>StringBuilder</code> here.  </p>

<pre><code>    public String toString() {
        StringBuilder result = new StringBuilder();

        result.append(calculateYear()).append('-')
              .append(calculateMonth()).append('-')
              .append(calculateDayOfMonth()).append(' ');

        result.append(calculateHour()).append(':')
              .append(calculateMinute()).append(':')
              .append(calculateSecond());

        return result.toString();
    }
</code></pre>

<p>The best thing that I can say about using <code>+=</code> with strings is that it usually uses <code>StringBuilder</code> behind the scenes.  The problem here is that it might use more than one <code>StringBuilder</code>.  </p>
    </div>