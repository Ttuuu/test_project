<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code seems to be working and trying to use OOP is a nice touch.
Let's see what can be improved.</p>

<p><strong>Style</strong></p>

<p>There is an official standard Python style guide called <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>. This is a highly recommended reading. It gives guidelines to help writing code that is both readable and consistent. The Python community tries to follow these guidelines, more or less strictly (a key aspect of PEP 8 is that it provides guidelines and not strict rules to follow blindly).</p>

<p>It deals with various aspects of the code style: naming conventions, indentation convention, etc.</p>

<p>You'll find various tools to try to check whether your code is PEP 8 compliant and if is it not, to try and fix this:</p>

<ul>
<li><p><a href="https://pypi.python.org/pypi/pycodestyle" rel="nofollow noreferrer"><code>pycodestyle</code> package</a> (formerly known as <code>pep8</code>) to check you code</p></li>
<li><p><a href="http://pep8online.com/" rel="nofollow noreferrer"><code>pep8online</code></a> to check your code with an online tool</p></li>
<li><p><a href="https://pypi.python.org/pypi/autopep8" rel="nofollow noreferrer"><code>autopep8</code> package</a> to fix your code automatically</p></li>
<li><p>Also, this is also checked by various linters: <a href="http://pypi.python.org/pypi/pylint" rel="nofollow noreferrer"><code>pylint</code></a>, <a href="http://pypi.python.org/pypi/pyflakes" rel="nofollow noreferrer"><code>pyflakes</code></a>, <a href="https://pypi.python.org/pypi/flake8" rel="nofollow noreferrer"><code>flake8</code></a>, etc.</p></li>
<li><p>There also a code formatter getting very popular in the Python communinity called <a href="https://black.readthedocs.io/en/stable/" rel="nofollow noreferrer">Black</a>.</p></li>
</ul>

<p>In your case, various things can be modified: class names should start with an uppercase letter, whitespace can be improved, etc.</p>

<p><strong>Docstring</strong></p>

<p>There is also a document describing <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">Docstring conventions called PEP 257</a>.</p>

<p>The comments you've written on top of the functions definition could be used as the function docstring.</p>

<p><strong>The <code>Disk</code> class</strong></p>

<p>It seems like <code>num</code> is not needed. Thus, the whole class could be written:</p>

<pre><code>class Disk:
    def __init__(self, size):
        self.size = size
</code></pre>

<p>Ultimately, we could try to see if such a class is needed at all.</p>

<p><strong>Building disks</strong></p>

<p><code>disk_num</code> could be written in uppercase as it is a constant.</p>

<p><code>disks</code> could be initialised using list comprehension:</p>

<pre><code># Generating disks of increasing size
DISK_NUM = 8
disks = [Disk(i) for i in range(DISK_NUM)]
</code></pre>

<p><strong>Building rods</strong></p>

<p>You could use keyword arguments to provide only the position value without the need to provide the disks value (and thus, rely on the default behavior). Another option could be to change the argument order to have the position first - by the way, maybe "name" would be better than "position" as it conveys better the fact that it is not an integer used for computation but just a string just for logging.</p>

<pre><code>rods.append(Rod(position="Left"))
rods.append(Rod(position="Middle"))
rods.append(Rod(position="Right"))
</code></pre>

<p>We could once again use list comprehension to define the rods here:</p>

<pre><code># Generating rods
rods = [Rod(position=p) for p in ("Left", "Middle", "Right")]
</code></pre>

<p><strong>Comparison to boolean</strong></p>

<p>You don't need to write: <code>if announce==True</code>, you can simply write: <code>if announce</code>.</p>

<p><strong>Rewrite logic in <code>add_to_top</code></strong></p>

<p>You could use <code>elif</code> to make the various cases easier to identify and remove a level of indentation in the second part of the function.</p>

<pre><code>def add_to_top(self,current_disk,announce=True):
    """Add a disk to the top of a rod. Only allows in two conditions a. No disks currently on that rod b. Disk smaller than the disk below it."""
    if len(self.diskslist) == 0:
        if announce:
            print(f"on to the top of the {self.rod_position} Rod", end="\n")
        self.diskslist.insert(0,current_disk)
        return True
    elif current_disk.size &lt; self.diskslist[-1].size:
        if announce:
            print(f"on to the top of the {self.rod_position} Rod", end="\n")
        self.diskslist.insert(0,current_disk)
        return True
    else:
        return False
</code></pre>

<p>It is now clearer that the 2 first cases are identical and can be merged:</p>

<pre><code>def add_to_top(self,current_disk,announce=True):
    """Add a disk to the top of a rod. Only allows in two conditions a. No disks currently on that rod b. Disk smaller than the disk below it."""
    if (len(self.diskslist) == 0) or (current_disk.size &lt; self.diskslist[-1].size):
        if announce:
            print(f"on to the top of the {self.rod_position} Rod", end="\n")
        self.diskslist.insert(0,current_disk)
        return True
    else:
        return False
</code></pre>

<p>Also, maybe you could throw an exception when the disk size is invalid instead of just returning False:</p>

<pre><code>def add_to_top(self,current_disk,announce=True):
    """Add a disk to the top of a rod. Only allows in two conditions a. No disks currently on that rod b. Disk smaller than the disk below it."""
    if self.diskslist and current_disk.size &gt;= self.diskslist[-1].size:
        raise Exception("Invalid disk size")

    if announce:
        print(f"on to the top of the {self.rod_position} Rod", end="\n")
    self.diskslist.insert(0,current_disk)
</code></pre>

<p><strong>Reconsider the <code>Rod</code> initialisation</strong></p>

<p>A disk list can be provided to the <code>Rod</code> initialisation.</p>

<p>Two things are a bit awkward here:</p>

<ul>
<li><p>you are using <a href="https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments" rel="nofollow noreferrer">Mutable Default Arguments</a> which is a common Gotcha in Python</p></li>
<li><p>the provided list may be unsorted: if we really want to provide the list, maybe we should pass it through the <code>add_to_top</code> logic element by element or just check that it is sorted.</p></li>
</ul>

<p>It may be easier to weaken the API by getting rid of it and default to <code>[]</code>.</p>

<pre><code>def __init__(self, name=""):
    self.diskslist = []
    self.rod_name = name
</code></pre>

<p>At this stage, the code looks like:</p>

<pre><code>class Rod:
    move_count = 0

    def __init__(self, name=""):
        self.diskslist = []
        self.rod_name = name

    def remove_top(self):
        """Remove the top disk of a rod."""
        print(f"Move the disk of size {self.diskslist[0].size} from {self.rod_name} Rod ", end="")
        Rod.move_count += 1
        return self.diskslist.pop(0)

    def add_to_top(self,current_disk,announce=True):
        """Add a disk to the top of a rod. Only allows in two conditions a. No disks currently on that rod b. Disk smaller than the disk below it."""
        if self.diskslist and current_disk.size &gt;= self.diskslist[-1].size:
            raise Exception("Invalid disk size") 

        if announce:
            print(f"on to the top of the {self.rod_name} Rod", end="\n")
        self.diskslist.insert(0,current_disk)


class Disk:
    def __init__(self, size):
        self.size = size


def recursive_solve(current_rod, lower_range, target_rod):
    # If only moving the top disk, execute it
    if lower_range == 0:
        rods[target_rod].add_to_top(rods[current_rod].remove_top())
    # If not, keeping simplifying the recursion.
    else:
        alt_rod = 3 - current_rod - target_rod
        recursive_solve(current_rod, lower_range - 1, alt_rod)
        recursive_solve(current_rod, 0, target_rod)
        recursive_solve(alt_rod, lower_range - 1, target_rod)


# Generating disks of increasing size
DISK_NUM = 8
disks = [Disk(i) for i in range(DISK_NUM)]

# Generating rods
rods = [Rod(name=p) for p in ("Left", "Middle", "Right")]

# Attaching all disks to the left rod
for i in range(len(disks)):
    rods[0].add_to_top(disks[len(disks)-i-1],False)


print(f"The steps needed to move {DISK_NUM} pieces of disks are:")
recursive_solve(0,len(disks)-1,2)

for i in range(len(rods)):
    print(f'\n For rod number {i+1}:',end=" ")
    for j in range(len(rods[i].diskslist)):
        print(rods[i].diskslist[j].size,end=" ")

print(f'\n The number of moves taken in total is {Rod.move_count}')
</code></pre>

<p><strong>Loop with the proper tools</strong></p>

<p>I highly recommend <a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">Ned Batchelder's talk "Loop like a native"</a>. Basically, anytime you use something like <code>for xxx in range(len(yyy))</code>, there is a better way to do it. In your case, enumerate can help you as well to write:</p>

<pre><code># Attaching all disks to the left rod
for d in reversed(disks):
    rods[0].add_to_top(d, False)

print(f"The steps needed to move {DISK_NUM} pieces of disks are:")
recursive_solve(0,len(disks)-1,2)

for i, rod in enumerate(rods):
    print(f'\n For rod number {i+1}:',end=" ")
    for d in rod.diskslist:
        print(d.size,end=" ")
</code></pre>

<p>Also, we could consider that we can refer to rod by their name instead of their positions and thus get rid of positions altogether:</p>

<pre><code>for rod in rods:
    print(f'\n For rod {rod.rod_name}:',end=" ")
    for d in rod.diskslist:
        print(d.size,end=" ")
</code></pre>

<p><strong>The <code>recursive_solve</code> function</strong></p>

<p>The fact that you access <code>rods</code> from the <code>recursive_solve</code> function seems a bit weird to me. It may be easier to provide the 3 rods to the function.</p>

<p>Also, providing the length of <code>disks</code> should not be necessary: in the best possible world, we could just rely on the number of disks on the starting rod.</p>

<p>I've performed a few changes to handle this, using an intermediate function:</p>

<pre><code>def recursive_solve(start_rod, end_rod, third_rod, nb_disk_to_move):
    if nb_disk_to_move == 1:
        end_rod.add_to_top(start_rod.remove_top())
    # If not, keeping simplifying the recursion.
    else:
        recursive_solve(start_rod, third_rod, end_rod, nb_disk_to_move - 1)
        recursive_solve(start_rod, end_rod, third_rod, 1)
        recursive_solve(third_rod, end_rod, start_rod, nb_disk_to_move - 1)




def move(start_rod, end_rod, third_rod):
    nb_disk = len(start_rod.diskslist)
    print(f"The steps needed to move {nb_disk} pieces of disks are:")
    recursive_solve(start_rod, end_rod, third_rod, nb_disk)

...    
move(rods[0], rods[2], rods[1])
</code></pre>

<p>Also, that removes the need for the <code>disks</code> variable:</p>

<pre><code># Attaching all disks to the left rod
for i in reversed(range(DISK_NUM)):
    rods[0].add_to_top(Disk(i), False)

move(rods[0], rods[2], rods[1])
</code></pre>

<p>Finally, the function can be slightly simplified:</p>

<pre><code>def recursive_solve(start_rod, end_rod, third_rod, nb_disk_to_move):
    if nb_disk_to_move:
        recursive_solve(start_rod, third_rod, end_rod, nb_disk_to_move - 1)
        end_rod.add_to_top(start_rod.remove_top())
        recursive_solve(third_rod, end_rod, start_rod, nb_disk_to_move - 1)
</code></pre>

<p><strong>More OOP</strong></p>

<p>One of the principle of OOP is the encapsulation. In our case, <code>disklist</code> could be considered as an implementation detail which is best not to rely on. In order to print the content on a rod, we could write a <code>__str__</code> magic method. Then, the calling code becomes much simpler:</p>

<pre><code>    def __str__(self):
        return self.rod_name + ": " + " ".join(str(d.size) for d in self.diskslist)

for rod in rods:
    print(f' For rod {rod}')
</code></pre>

<p>At this stage, the code looks like:</p>

<pre><code>class Rod:
    move_count = 0

    def __init__(self, name):
        self.diskslist = []
        self.rod_name = name

    def remove_top(self):
        """Remove the top disk of a rod."""
        print(f"Move the disk of size {self.diskslist[0].size} from {self.rod_name} Rod ", end="")
        Rod.move_count += 1
        return self.diskslist.pop(0)

    def add_to_top(self,current_disk,announce=True):
        """Add a disk to the top of a rod. Only allows in two conditions a. No disks currently on that rod b. Disk smaller than the disk below it."""
        if self.diskslist and current_disk.size &gt;= self.diskslist[-1].size:
            raise Exception("Invalid disk size") 

        if announce:
            print(f"on to the top of the {self.rod_name} Rod", end="\n")
        self.diskslist.insert(0,current_disk)

    def __str__(self):
        return self.rod_name + ": " + " ".join(str(d.size) for d in self.diskslist)


class Disk:
    def __init__(self, size):
        self.size = size


def recursive_solve(start_rod, end_rod, third_rod, nb_disk_to_move):
    if nb_disk_to_move:
        recursive_solve(start_rod, third_rod, end_rod, nb_disk_to_move - 1)
        end_rod.add_to_top(start_rod.remove_top())
        recursive_solve(third_rod, end_rod, start_rod, nb_disk_to_move - 1)

def move(start_rod, end_rod, third_rod):
    nb_disk = len(start_rod.diskslist)
    print(f"The steps needed to move {nb_disk} pieces of disks are:")
    recursive_solve(start_rod, end_rod, third_rod, nb_disk)


# Generating rods
rods = [Rod(name=p) for p in ("Left", "Middle", "Right")]

# Attaching all disks to the left rod
DISK_NUM = 8
for i in reversed(range(DISK_NUM)):
    rods[0].add_to_top(Disk(i), False)

move(rods[0], rods[2], rods[1])

for rod in rods:
    print(f' For rod {rod}')

print(f'\n The number of moves taken in total is {Rod.move_count}')
</code></pre>

<p><em>I have to stop here, I'll try to continue.</em></p>
    </div>