<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, I am not at all sure it is good idea to learn OOP by re-implementing security-sensitive feature for a web-framework, which already has support for such things. Please, at least consider using Flask-Security, Flask-Login, Flask-Principal unless you plan a total rewrite of all those. Also, I see plain text passwords in use - most of the time a security risk.</p>

<p>That said, I can find the following problems:</p>

<ol>
<li><p>Persistence service is too intrusive and its logic is not clear.
For example, you are creating a user just to login: Why do you want to
persist anything someone tries to enter as a login attempt? Consider
using some ORM, where you can control object's persistence, or come
up with something better than object dealing with its persistence.</p>

<p>Those aspects better be invisible in the model. In Python, it's probably best to use a DTO (data-transfer object, received from the login form, usually a dict) until identity is verified.</p></li>
<li>I do not really understand why you are using threads. In the Flask environment one can use a session as an abstraction, so dealing at thread level is strange and can make your code too dependent on a specific implementation, preventing porting it to multiprocessing, async/greenlets and the like.</li>
</ol>

<p>There are some naming problems (what is <code>ph_no</code>?).</p>

<p>In my opinion the best place for OOP in user authentication is (in addition to <code>User</code> class) a possibility to define different authentication strategies (and inject dependencies like <code>Utils.encrypt</code> that way). Then, if a more complex system is in question - role-based authorization, etc, etc. The code you presented above is not geared towards those goals. Instead, it deals with low-level concerns which are already solved in the framework.</p>
    </div>