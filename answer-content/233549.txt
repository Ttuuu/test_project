<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Presumably, <code>if array[i] == '-'</code> is meant to check if the number is negative. Having it like you have though doesn't make a lot of sense. If it's in the loop, that suggests that a <code>-</code> could be expected at any point within the number. In reality though, it will only ever occur as the first character in the string. I'd just check <code>N</code> the number with <code>if N &lt; 0</code> to see if it's negative. You can streamline this check right in the definition of <code>mod</code>:</p>

<pre><code>mod = 1 if N &gt;= 0 else -1
</code></pre>

<p>Unfortunately, that slightly complicates adding <code>-</code> to <code>result</code>. The simplest way to deal with it I think is just to change the definition of <code>result</code> to be similar to that of <code>mod</code>:</p>

<pre><code>result = [] if n &gt;= 0 else ['-']
</code></pre>

<p>Since the checks are the same though, you could combine then into returning a tuple instead then unpacking it:</p>

<pre><code>mod, result = (1, []) if n &gt;= 0 else (-1, ['-'])
</code></pre>

<p>And, <code>array</code> will need to have the <code>-</code> cleaved off if we're doing it before the loop:</p>

<pre><code>mod, result, checked_digits = (1, [], digits) if n &gt;= 0 else (-1, ['-'], digits[1:])
</code></pre>

<p>Normally, I don't think a triple variable definition like this should be encouraged, but there's nothing too fancy or complicated going on here to make the line confusing. I think it's fine.</p>

<hr>

<p>I'd rename <code>array</code> and <code>N</code>:</p>

<ul>
<li><p><code>array</code> isn't really a correct or useful description. I think <code>digits</code> would be better.</p></li>
<li><p><code>N</code> should be <code>n</code>.</p></li>
</ul>

<hr>

<p>You're iterating over the indices of <code>digits</code> and using <code>digits[i]</code> all over the place even though you don't even need the index in most cases. I'd iterate over the digits themselves, and use <code>enumerate</code> to get the index in the couple cases that you actually need it for:</p>

<pre><code>for i, digit in enumerate(digits):
    . . .

    if int(digit) * mod &gt; 5 * mod:
        result.append(digit)
</code></pre>

<hr>

<p>I'd move the <code>if i == len(array):</code> check out of the loop as well. Really, it's just checking if at no point a <code>break</code> was encountered. That's exactly the use case for <code>for</code>'s <code>else</code> clause <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer">(yes, <code>for</code> can have an <code>else</code>)</a>:</p>

<pre><code>for i, digit in enumerate(checked_digits):
    . . .

else:
    result.append(5)
</code></pre>

<p>The <code>else</code> will only execute if no <code>break</code> was encountered. In the case of this code, that means that no digit greater than <code>5</code> was found.</p>

<p>Honestly, this is the first time I've ever found a useful case for <code>for...else</code>. It worked out nice here though.</p>

<hr>

<p>I'd add <code>5</code> and <code>'5'</code> as constants at the top. Having the magic strings and numbers floating your code makes your code harder to change latter, and doesn't indicate what the <code>5</code> and <code>'5'</code> actually are for:</p>

<pre><code>TARGET_NUM = 5
TARGET_DIGIT = str(TARGET_NUM)


def solution(n):
</code></pre>

<p>Or, just make that number a parameter with a default to make it easy to use different target numbers:</p>

<pre><code>def solution(n: int, target_num: int = 5) -&gt; int:
    target_digit = str(target_num)
</code></pre>

<p>I also added some type hints in there, because why not?</p>

<hr>

<hr>

<p>In the end, this is what I ended up with:</p>

<pre><code>def solution(n: int, target_num: int = 5):
    target_digit = str(target_num)
    digits = str(n)

    mod, result, checked_digits = (1, [], digits) if n &gt;= 0 else (-1, ['-'], digits[1:])

    for i, digit in enumerate(checked_digits):
        if int(digit) * mod &gt; TARGET_NUM * mod:
            result.append(digit)

        else:
            result.append(TARGET_DIGIT)
            result.append(checked_digits[i:])
            break

    else:
        result.append(TARGET_DIGIT)

    return int("".join(result))
</code></pre>
    </div>