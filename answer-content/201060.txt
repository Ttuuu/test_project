<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Create iterators over the elements in the list</h1>
<p>Here's how to go about creating iterators for this collection.  They will naturally be <em>forward iterators</em>, as we can't traverse the singly-linked list backwards.</p>
<p>First, let's declare the iterator class, and <code>begin()</code> and <code>end()</code> methods to create them:</p>
<pre><code>public:
    class iterator;
    iterator begin();
    iterator end();
</code></pre>
<p>The state within an iterator is obviously its current <code>Node</code>:</p>
<pre><code>template&lt;class T&gt;
class SingleLinkedList&lt;T&gt;::iterator
{
    Node* node;
}
</code></pre>
<p>For a forward iterator, we need to be able to dereference and to increment it; also we need to be able to compare iterators for equality, and to construct (including default-construct) instances:</p>
<pre><code>template&lt;class T&gt;
class SingleLinkedList&lt;T&gt;::iterator
{
    Node* node = nullptr;

public:
    iterator(Node *node = nullptr)
        : node(node)
    {}

    bool operator!=(const iterator&amp; other) const { return node != other.node; }
    bool operator==(const iterator&amp; other) const { return node == other.node; }

    T&amp; operator*() const { return node-&gt;data; }
    T&amp; operator-&gt;() const { return node-&gt;data; }

    iterator&amp; operator++() { node = node-&gt;next.get(); return *this; }
};

template&lt;class T&gt;
typename SingleLinkedList&lt;T&gt;::iterator SingleLinkedList&lt;T&gt;::begin()
{
    return head.get();
}

template&lt;class T&gt;
typename SingleLinkedList&lt;T&gt;::iterator SingleLinkedList&lt;T&gt;::end()
{
    return {};
}
</code></pre>
<p>To use with standard algorithms, we need to provide some type names that can be found by <code>std::iterator_traits</code>:</p>
<pre><code>#include &lt;iterator&gt;

template&lt;class T&gt;
class SingleLinkedList&lt;T&gt;::iterator
{
public:
    using iterator_category = std::forward_iterator_tag;
    using value_type = T;
    using difference_type = std::ptrdiff_t;
    using pointer = T*;
    using reference = T&amp;;
</code></pre>
<p>Then we can use iterators to simplify our code:</p>
<pre><code>template &lt;class T&gt;
bool SingleLinkedList&lt;T&gt;::search(const T &amp;x) {
    return std::find(begin(), end(), x) != end();
}
</code></pre>
<hr>
<h2>Exercise</h2>
<p>Implement a <strong><code>const</code></strong> iterator for the list.  You'll start with these methods in <code>SingleLinkedList</code>:</p>
<pre><code>class const_iterator;
const_iterator cbegin() const;
const_iterator cend() const;
const_iterator begin() const;
const_iterator end() const;
</code></pre>
<p>and the iterator traits will refer to <code>const T</code> in place of <code>T</code>.</p>
    </div>