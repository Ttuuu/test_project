<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview :-)</p>

<h1>Code to contract (interface) not to implementation</h1>

<p>Your program components should be loosely coupled. It is important for two main reasons:</p>

<ul>
<li>you can easily swap components of your program. </li>
<li>change in one place would not force you to alter code independent components</li>
</ul>

<p>What does this mean in practice?</p>

<p>Start with defining interfaces. For starter, they can be 1:1 copy of your public methods signatures. Then register them in your DI container and pass interfaces into the constructor. (ie. <code>IAdviceLayoutFactory</code>, <code>IPatientLogService</code> instead of <code>AdviceLayoutFactory</code>, <code>PatientLogService</code>)</p>

<h1>Single Responsibility Principle</h1>

<p>In simple terms, classes should be small and have one purpose. When someone asks you - <em>what does class X do?</em> you should be able to answer with a simple sentence, containing one verb.</p>

<p>Another rule of thumb - if a class has more than 6 parameters in a constructor it should be split.</p>

<p>A good example of counter-example would be <code>IndicatorController</code>. It has like 20 parameters. I presume it can't be described with a simple sentence.</p>

<p>Controllers have only one purpose - call application (domain) logic with parameters deserialized from the network request. As simple as it sounds:</p>

<pre><code>public IndicatorController(IIndicatorService service) {
    _service = service;
}

// Methods matching endpoints related to Indicators
...
</code></pre>

<h1>Code has to be testable</h1>

<p>When you follow the rules mentioned above your code is match more testable.</p>

<p>With interfaces, you can easily replace actual implementation with a fake one. Eg. Instead of connecting to a real database you can simply create a fake implementation of class responsible for data manipulation.
With dependence on interfaces and some mocking library (like Moq) it is super easy.</p>

<p>Thanks to smaller classes it would be easier to focus on a single feature of your app and unit test it with less moving parts. Just moq all code on which your feature depends. </p>

<p><strong>I would like to give you a change to refactor your code a bit. If you are stuck I would be glad to help - I just don't want to steal all the fun :-)</strong></p>
    </div>