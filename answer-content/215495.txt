<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It works well, according to my simple test program:</p>
<pre><code>#include &lt;functional&gt;
int main()
{
    return min(std::less&lt;int&gt;(), 2, 0, 3);
}
</code></pre>
<p>I suggest that when you present code for review, you include the tests, too - I imagine that your testing is much more thorough than mine, and I'm too lazy to re-create the full suite.  It also helps reviewers identify scenarios that are missing from the tests (or, conversely, scenarios that are redundant).</p>
<hr>
<p>I recommend using perfect forwarding for the comparator:</p>
<pre><code>constexpr const T&amp; min(Less&amp;&amp; less,
//                         ^^
</code></pre>

<pre><code>    return std::min(a, b, std::forward&lt;Less&gt;(less));
//                        ^^^^^^^^^^^^^^^^^^
</code></pre>
<p>There's a couple of other uses that need to be forwarded, too.</p>
<hr>
<p>As  lubgr <a href="/a/215486">mentioned</a>, it's worth using an initializer list.  If we want to avoid copying (if the inputs are large, or can't be copied), then we'll want to use a initializer-list of reference wrappers, and use <code>std::min_element()</code> (since the initializer-list <code>std::min()</code> returns a copy.  That can be achieved like this:</p>
<pre><code>#include &lt;algorithm&gt;
#include &lt;functional&gt;

template&lt;typename Less, typename... T&gt;
constexpr auto&amp; min(Less&amp;&amp; less, const T&amp; ...values)
{
    auto const compare_wrapped =
        [&amp;less](auto const&amp;a, auto const&amp; b) {
            return std::forward&lt;Less&gt;(less)(a.get(), b.get());
        };

    auto const list = { std::ref(values)..., };
    auto const smallest =
        std::min_element(list.begin(), list.end(), compare_wrapped);
    return smallest-&gt;get();
}
</code></pre>
    
<pre><code>int main()
{
    auto const a = 3;
    auto const b = 0;
    auto const c = 2;

    auto const&amp; lowest = min(std::less&lt;int&gt;(), a, b, c);

    return &amp;lowest != &amp;b;
}
</code></pre>
<p>Or, more succinctly:</p>
<pre><code>template&lt;typename Less, typename... T&gt;
constexpr auto&amp; min(Less&amp;&amp; less, const T&amp; ...values)
{
    return std::min({std::cref(values)...,}, std::forward&lt;Less&gt;(less)).get();
}
</code></pre>
<p>One defect in this implementation is that it will accept xvalues and happily return a (useless) reference in that case.  I think it ought to be possible to distinguish that case, and forward the chosen xvalue as result, but I haven't had time to implement that.</p>
    </div>