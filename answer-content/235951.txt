<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Logically you have two different forms of chance. The 'top level' to pick between <code>AMOUNT1</code> and <code>AMOUNT2</code> and then the second form to pick the function <code>get_10_20</code> or <code>get_20_30</code>. This requires you to generate <em>two</em> random numbers. A pretty expensive operation.</p>

<p>Secondly you're performing a cumulative sum each and every time you're looping through either <code>AMOUNT</code>. This is just a waste when you can do it once. And so you should aim to normalize your input data.</p>

<p>Your input format is pretty poor, what if I want a 50/50 chance, or a 1:1:1 chance. To do so a cumulative sum would work best. But lets get your input to work in a meh way.</p>

<pre class="lang-py prettyprint-override"><code>AMOUNTS = [
    {
        0.6 : get_10_20,
        0.4 : get_20_30,
    },
    {
        0.4 : get_10_20,
        0.6 : get_20_30,
    }
]

def normalize_input(amounts):
    by_value = {}
    for chances in amounts:
        for chance, value in chances.items():
            by_value.setdefault(value, 0)
            by_value[value] += chance / len(amounts)

    total_chance = 0
    output = {}
    for value, chance in by_value.items():
        total_chance += chance
        output[total_chance] = value
    return output
</code></pre>

<p>This works hunkydory and returns:</p>

<pre class="lang-py prettyprint-override"><code>{
    0.5: get_10_20,
    1.0: get_20_30,
}
</code></pre>

<p><sub><strong>Note</strong>: untested, provided purely as an example.</sub></p>

<pre class="lang-py prettyprint-override"><code>def pick_random(chances):
    def inner(chance):
        for c in chances:
            if c &gt;= chance:
                return chances[c]()
    return inner


CHANCES = pd.DataFrame(np.random.random(size=(n, m)))
AMOUNTS = CHANCES.applymap(pick_random(normalize_input(OUTCOMES)))
</code></pre>

<hr>

<p>But do you really need that <code>for</code> loop? From the looks of it no, not really.<br>
You could change your input to integers and provide your chances in <em>cumulative ratios</em> so you could have:</p>

<pre class="lang-py prettyprint-override"><code>{
    1: foo,
    2: bar,
    4: baz,
}
</code></pre>

<p>From this you can then normalize to an array, and just index the array. Using <code>np.random.randint</code> rather than <code>np.random.random</code>. The array would look like:</p>

<pre class="lang-py prettyprint-override"><code>[foo, bar, baz, baz]
</code></pre>

<p>Which would make <code>inner</code> super simple:</p>

<pre class="lang-py prettyprint-override"><code>def inner(chance):
    return chances[chance]()
</code></pre>
    </div>