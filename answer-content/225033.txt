<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design Review</h2>

<p><em>I challenge the need for a huge enum like this.</em></p>

<p>Even if you find a succint and maintainable way to map this huge enum from a string, what does this provide you in your code? Do you now have a method that needs a huge switch case on the enum to decide proper actions when the interaction is triggered?</p>

<pre><code>void InteractWith(InteractionType interaction)
{
   switch (interaction)
   {
       case InteractionType.Gate:
           InteractWithAGate();
           break;
       case InteractionType.Moodlight:
           InteractWithAMoodlight();
           break;
       // .. and here we go again
   }
}
</code></pre>

<p>Let's consider the <strong>SOLID</strong> principles. We are in particular interested in <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle" rel="nofollow noreferrer">Interface segregation principle</a> and just common sense when dealing with OO-design.</p>

<blockquote>
  <p><em>Many client-specific interfaces are better than one general-purpose interface.</em></p>
</blockquote>

<p>I would make many different enums, each containing a subset of interactions. I'm also not convinced of the name <em>interaction</em>. Many enum values appear to be <em>assets</em> or <em>items</em>.</p>

<pre><code>enum GateKind
{
    Gate,
    OneWayGate,
    // .. others
}
</code></pre>

<p>And have specific methods or even classes that handle these specific interaction types. Some trivial example of a game where a player interacts with items, such as a gate.</p>

<pre><code>class GateState
{
    void HandlePlayerInteraction(Player player, GateKind gate)
    {
       if (player.WantsToEnter(gate))
       {
           player.Enter(gate);
       }
       else
       {
           player.GoBack();
       }
    }
}
</code></pre>
    </div>