<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Q&amp;A</h3>

<blockquote>
  <p>I am thinking of removing timeoutStyle and timeout from the Cache
  constructor and providing default values that can be changed via
  public properties. How do you like that?</p>
</blockquote>

<ul>
<li>This would add additional complexity that is unlikely to be useful. Normal usage of a cache is to be a long-lived instance that is task-scheduled periodically given a fixed schedule.</li>
<li>What you can do is provide overloads for the consumer not to care about defining timeout values or strategy.</li>
</ul>

<blockquote>
  <p>How do you like my abstraction LockManager for ReaderWriterLockSlim?</p>
</blockquote>

<ul>
<li>I don't see an advantage in abstracting threading constructs. It adds unnecessary complexity. Your cache is as thread-safe as the weakest link in the exotic implementation of the lock manager. Stick with well known best practices.</li>
<li>Besides, from the perspective of TDD, these threading constructs are no bottlenecks.</li>
</ul>

<blockquote>
  <p>Do you think my timer in Cache should be configurable? Through a
  property in cache, change internal to public or by another method?</p>
</blockquote>

<ul>
<li>As with your first question, don't add this complexity. It is not worth it.</li>
</ul>

<blockquote>
  <p>Do you think it is a bad practice to start a timer in a constructor?
  If so, what would you do?</p>
</blockquote>

<ul>
<li>I do think it is bad practice to do anything else but assigning state in constructors. Provide a method <code>Initialise</code> or <code>Start</code>. Make it <em>idempotent</em> and call it when a request to cache an item is made.</li>
</ul>

<blockquote>
  <p>Would you consider the Cache threadsafe? Could it be better
  implemented?</p>
</blockquote>

<ul>
<li>Thread-safety depends for a great part on the implementation of <code>LockManager</code>.</li>
<li>Acquiring a read lock, releasing it and then requiring a write lock does not feel right. Possible food for race conditions. Instead go for what is suggested by others, an upgradable lock.</li>
<li>Since this is a long-lived object with a timer and possibly storing lots of items, I would implement <code>IDisposable</code> and call it on application exit. You'd have a clean way of releasing resources.</li>
</ul>
    </div>