<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>The function <code>get_sums_freqs</code> returns an <code>int</code>, but when I call it, I do not assign the result to anything: <code>get_sums_freqs (root, sum_freqs);</code>. Is it ok to do it this way? </p>
</blockquote>

<p>Your uneasiness here probably arises from the difference between a <code>Tree</code> and a <code>TreeNode</code>.  A <code>TreeNode</code> is an internal tree detail, which should be hidden from the user of the <code>Tree</code>.  I should be able to pass an <code>Tree</code> object to some function, and have it add some number of nodes to the <code>Tree</code>.  If I pass an <code>nullptr</code> as the <code>TreeNode * root</code>, the caller can't modify <em>my</em> tree.  Similarly, if two entities are supposed to share access to a <code>Tree</code>, that is fine as long as the <code>TreeNode *root</code> contains at least one node.  But you can't share a common empty <code>Tree</code>; instead you have two <code>nullptr</code> ... which are not "shareable".</p>

<pre><code>class Tree {
    TreeNode *root;
    int num_nodes;
    int max_depth;
}
</code></pre>

<p>Now we have a <code>Tree</code> object, which can be shared ... even if it is an empty tree.  As a bonus, our <code>Tree</code> can hold meta-information about the tree, such as the number of nodes in the tree, the maximum depth of the tree, and so on.</p>

<p>The LeetCode challenge is promoting a broken tree model, by using a <code>TreeNode *</code> to represent a tree.  It works, but it has issues; I wouldn't want to see it used in a professional "Project".</p>

<p>I prefer not to walk into <code>nullptr</code> nodes.  Imagine:</p>

<pre><code>void TreeNode::get_sums_freqs(unordered_map&lt;int, int&gt;&amp; sum_freqs) { ... }
</code></pre>

<p>Now, you would be calling <code>TreeNode::get_sums_freqs()</code> with a <code>nullptr</code> for <code>this</code>, which is bad.</p>

<p>Instead:</p>

<pre><code>int get_sums_freqs(TreeNode* node, unordered_map&lt;int, int&gt;&amp; sum_freqs) {

    int curr_sum = root-&gt;val;

    if (node-&gt;left)
       curr_sum += get_sums_freqs(node-&gt;left, sum_freqs);
    if (node-&gt;right)
       curr_sum += get_sums_freqs(node-&gt;right, sum_freqs);

    sum_freqs[curr_sum]++;

    return curr_sum;
}
</code></pre>

<p>Note we are calling the current node <code>node</code>, instead of <code>root</code>.  We need to start off the search at the root of the tree, which is a little different:</p>

<pre><code>void tree_get_sums_freqs(Tree* tree, unordered_map&lt;int, int&gt; &amp;sum_freqs) {
    if (tree-&gt;root) {
       root_sum = get_sums_freqs(tree-&gt;root, sum_freqs);
       sum_freqs[root_sum]++;
    }
}
</code></pre>

<p>No <code>root_sum</code> needs to be returned from this top-level.</p>

<p>Of course, since LeetCode doesn't define their trees this way, you have your odd, unused return value.</p>

<blockquote>
  <p>For some reason, it feels like a bad style to me to initialize the hash map <code>unordered_map&lt;int, int&gt; sum_freqs;</code> in one function and then pass it to another function to fill it out. Is there a better way to do it? Or is this a correct way?</p>
</blockquote>

<p>This is fine.  It is a visitor pattern.  You create an accumulator object, and visit every node of your structure with it, to accumulate the results.</p>
    </div>