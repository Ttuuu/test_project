<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Updating an element in a collection is significantly faster than inserting or removing an element, as you've observed.  I think your code is better than the book's version.  </p>

<p>We can be even more efficient by using a <code>std::array</code> if we convert characters to <code>unsigned char</code> for the indexing - then there's no insertion of elements required.  The flip side is that we check all possible characters, even those that never appear in the string; I'm guessing that's a small cost compared to allocating memory.</p>

<hr>

<p>One improvement I'd recommend is to note that counts can't be negative:</p>

<pre><code>std::unordered_map&lt;char, unsigned int&gt; letter_count;
</code></pre>

<p>(That also deals nicely with overflow, which is defined for unsigned types, and consistent with what we need).</p>

<hr>

<p>Alternatively, you might simply toggle the value using XOR, rather than counting:</p>

<pre><code>for (char c: s) {
  letter_count[c] ^= 1;
}
</code></pre>

<p>Then we only have to compare equality when looking for odd counts.</p>

<p>Using only one bit per possible character would allow us to use <code>std::bitset</code> as an alternative to <code>std::array</code>.  That trades some speed for lower storage requirement.</p>

<hr>

<p>A slight improvement - we know the original string's length - if it's even, then there should be <em>no</em> odd counts at all, so we can exit the checking loop earlier.</p>

<pre><code>#include &lt;string&gt;
#include &lt;unordered_map&gt;

bool CanFormPalindrome(const std::string&amp; s) {
    std::unordered_map&lt;char, bool&gt; letter_count;
    for (char c: s) {
      letter_count[c] ^= 1;
    }

    int odd_letter_count = s.length() % 1;
    for (const auto&amp; letter: letter_count) {
        if ((odd_letter_count -= letter.second) &lt; 0) {
            return false;
      }
    }

    return true;
}
</code></pre>

<hr>

<p>Here's a version using <code>std::array</code>, and a standard algorithm instead of a loop:</p>

<pre><code>#include &lt;string&gt;
#include &lt;array&gt;
#include &lt;algorithm&gt;
#include &lt;climits&gt;

bool CanFormPalindrome(const std::string&amp; s) {
    std::array&lt;bool, UCHAR_MAX&gt; letter_count = {};
    for (unsigned char c: s) {
        letter_count[c] ^= 1;
    }

    int odd = s.length() % 2;
    return std::none_of(letter_count.begin(), letter_count.end(),
                        [&amp;odd](auto x) { return (odd -= x) &lt; 0; });
}
</code></pre>

<p>The <code>std::none_of()</code> function returns early in the same way as the loop above.  Also (though unlikely to be helpful here), from C++17 onwards it has an option to parallelize its execution.</p>

<hr>

<p>And some tests (for all versions of the code):</p>

<pre><code>int main()
{
    return
        + !CanFormPalindrome("")
        + !CanFormPalindrome("a")
        +  CanFormPalindrome("ab")
        +  CanFormPalindrome("abcb")
        + !CanFormPalindrome("abab")
        + !CanFormPalindrome("edified")
        ;
}
</code></pre>
    </div>