<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Constraints-</p>

<p>3‚â§ùëÅ‚â§10^7</p>

<p>1‚â§ùëÄ‚â§2‚ãÖ10^5</p>

<p>1‚â§ùëé‚â§ùëè‚â§ùëÅ</p>

<p>0‚â§ùëò‚â§10^9</p>

<p><strong>Why your brute force solution will not work?</strong></p>

<p>Today generation system can perform 10^8 operation in one second. keep this in mind you have to process N=10^7 input per query in worse case. so if you use your solution with O(NM) complexity it has to handle (10^7 *10 ^5)= 10^12 operation in worse case (which can not be computed in 1 sec at all)</p>

<p>That is the reason you will get the time out error for your brute force solution.
So you need to optimise your code which can be done with the help of prefix sum array.</p>

<p>instead of adding k to all the elements within a range from a to b in an array, accumulate the difference array</p>

<p>Whenever we add anything at any index into an array and apply prefix sum algorithm the same element will be added to every element till the end of the array.</p>

<p>ex- n=5, m=1, a=2 b=5 k=5  </p>

<pre><code>    i     0.....1.....2.....3.....4.....5.....6   //take array of size N+2 to avoid index out of bound
  A[i]    0     0     0     0     0     0     0
</code></pre>

<p>Add k=5 to at a=2</p>

<p>A[a]=A[a]+k  // start index from where k element should be added</p>

<pre><code>     i    0.....1.....2.....3.....4.....5.....6 
   A[i]   0     0     5     0     0     0     0
</code></pre>

<p>now apply prefix sum algorithm</p>

<pre><code>     i    0.....1.....2.....3.....4.....5.....6 
  A[i]    0     0     5     5     5     5     5
</code></pre>

<p>so you can see K=5 add to all the element till the end after applying prefix sum but we don't have to add k till the end. so to negate this effect we have to add -K also after b+1 index so that only from [a,b] range only will have K element addition effect.</p>

<p>A[b+1]=A[b]-k  // to remove the effect of previously added k element after bth index.
that's why adding -k in the initial array along with +k.</p>

<pre><code>    i    0.....1.....2.....3.....4.....5.....6 
  A[i]   0     0     5     0     0     0    -5
</code></pre>

<p>Now apply prefix sum Array</p>

<pre><code>    i    0.....1.....2.....3.....4.....5.....6 
  A[i]   0     0     5     5     5     5     0
</code></pre>

<p>You can see now K=5 got added from a=2 to b=5 which was expected.
Here we are only updating two indices for every query so complexity will be O(1).</p>

<p>Now apply the same algorithm in the input</p>

<pre><code>         # 0.....1.....2.....3.....4.....5.....6    //taken array of size N+2 to avoid index out of bound
5 3      # 0     0     0     0     0     0     0
1 2 100  # 0    100    0   -100    0     0     0       
2 5 100  # 0    100   100  -100    0     0   -100
3 4 100  # 0    100   100    0     0  -100   -100
</code></pre>

<p>To calculate the max prefix sum, accumulate the difference array to ùëÅ while taking the maximum accumulated prefix. </p>

<p>After performing all the operation now apply prefix sum Array</p>

<pre><code>    i      0.....1.....2.....3.....4.....5.....6 
  A[i]     0     100   200  200   200   100    0
</code></pre>

<p>Now you can traverse this array to find max which is 200.
traversing the array will take O(N) time and updating the two indices for each query will take O(1)* number of queries(m)</p>

<p>overall complexity=O(N)+O(M) 
                  = O(N+M)</p>

<p>it means = (10^7+10^5) which is less than 10^8 (per second)</p>

<p><strong>Note:</strong> If searching for <strong><a href="https://youtu.be/hDhf04AJIRs" rel="nofollow noreferrer">video tutorial</a></strong> , you must check it out <strong><a href="https://youtu.be/hDhf04AJIRs" rel="nofollow noreferrer">here</a></strong> for detailed explanation.</p>
    </div>