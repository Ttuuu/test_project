<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Feedback</h2>

<p>The library looks useful and the code appears to adhere to style guides like <a href="https://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">PSR-2</a> for the most part. </p>

<p>I don't see docblocks in the code. Each method should have a description of what it does, along with any parameters and the return type. Then anyone reading or contributing will be able to know how methods are implemented without having to read through them.</p>

<p>Are there any unit tests for the library? It would be wise to have those defined, especially since you invite others to fork the repository and contribute to it. Minimum tests would likely include testing all styles supported, as well as chaining calls and cases where an exception is expected to be thrown.</p>

<p>The <a href="https://php.net/manual/en/migration56.new-features.php#migration56.new-features.splat" rel="nofollow noreferrer">splat operator</a> (i.e. <code>...</code>) could likely be used to simplify some of the calls that utilize <code>call_user_func_array()</code>, unless PHP versions prior to 5.6 need to be supported. </p>

<h2>Suggestion about the styles array</h2>

<p>Instead of making dynamic functions for each style in <code>$style</code>, use a method that accepts the color and offset. This would mean that the <code>__get()</code> method would need to be updated to conditionally handle <code>rgb</code> with that method. </p>

<p>Then the array stored in <code>$style</code> could be declared as a constant. </p>

<pre><code>class Chalk
{  
    const RESET = "\033[0m";

    const STYLES = [
        'reset' =&gt; 0,
        'bold' =&gt; 1,
        'dim' =&gt; 2,
</code></pre>

<p>That way each instance of the class wouldn't need to have that data tied to it, and there wouldn't be a need to call the <code>initSeqBuilders()</code> method.</p>

<p>And then define new methods for getting the styles from that array as well as the RGB colors:</p>

<pre><code>public function getStyle($name, $offset) {
    $code = self::STYLES[$name];
    if ($code &gt; 0)
        $code = $offset + $code;
    return "\033[{$code}m";
}
public function getRgbStyle ($r, $g, $b, $offset) {
    // TODO: Fallback to ANSI 256 if possible
    if (!$this-&gt;has16mSupport()) return "";

    $type = 38 + $offset;
    return "\033[{$type};2;{$r};{$g};{$b}m";
}
</code></pre>

<p>There would obviously need to be updates to any place that <code>$this-&gt;styles</code> is used.</p>

<h2>Error when throwing exception</h2>

<p>In the <code>__call()</code> method of <code>Chalk</code> there is a possibility that an exception will be thrown:</p>

<blockquote>
<pre><code>public function __call($styleName, $arguments)
{
    if (!$this-&gt;isValidStyle($styleName)) {
        throw InvalidStyleException($styleName);
    }
</code></pre>
</blockquote>

<p>Instead of instantiating a <code>InvalidStyleException</code> object, that code calls <code>InvalidStyleException()</code> as if it is a function, which causes an error because that is not a function. Add the <code>new</code> operator to instantiate the exception:</p>

<pre><code>public function __call($styleName, $arguments)
{
    if (!$this-&gt;isValidStyle($styleName)) {
        throw new InvalidStyleException($styleName);
    }
</code></pre>
    </div>