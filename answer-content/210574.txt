<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should make better use of functions to reduce duplication.</p>

<p>Here:</p>

<pre><code>def write1():
    print("Player 1 ",username1," Wins!")
    file = open("scores.txt","a")
    file.write(username1 + " has " + str(total_score1) + " points" + "\n")
    file.close()
    sys.exit()

def write2():
    print("Player 2 ",username2," Wins!")
    file = open("scores.txt","a")
    file.write(username2 + " has " + str(total_score2) + " points" + "\n")
    file.close()
    sys.exit()
</code></pre>

<p>Note how 99% of those functions are identical. The only difference is the usernames and scores. Add those as parameters to the function and pass the data in as arguments. This will make even more sense once you get rid of global variables as the other answer suggested:</p>

<pre><code>def write_score(username, score):
    print(username," wins!") # Got rid of the "Player #" part for simplicity
    file = open("scores.txt","a")
    file.write(username + " has " + str(score) + " points" + "\n")
    file.close()

     # This arguably shouldn't be here.
     # Do you really want it to be necessary to close the program after writing?
    sys.exit()
</code></pre>

<p>Then change the calling code to something like:</p>

<pre><code>if total_score1 &gt; total_score2:
    write_score(total_score1, username1)

elif total_score2 &gt; total_score1:
    write_score(total_score2, username2)
</code></pre>

<p>You don't gain as much with functions if you're just moving two nearly identical chunks of code into two separate, nearly identical functions.</p>

<p>If code looks almost the same, here's a simple way to turn it into a common function: Look at the pieces of code, and determine what is the same, and what is different. Make the different parts parameters of the function and pass that data in, and make the identical parts the body of the function. You can see how I used that with the example above.</p>

<p>This can be made much neater though if you tuck the name and score away into a Player object. That way you aren't needing to deal with those bits of data separately.</p>

<hr>

<p>Everything under <code>if ens == "e":</code> should be moved out into its own function. There's no reason to have that much dense code all lumped together. It makes your code much harder to read, and forces you to have a ridiculous amount of nesting/indentation. You should create a function that reads the account information from file, another function that takes that information and checks the supplied login credentials, a function that takes input from the user, and a main procedure function that encompasses the logic of the game.</p>

<p>Splitting it up like that will not only reduces duplication (since then you can, for example, call the "get user input" function twice instead of copying and pasting nearly the same chunk of code), but it will make the program easier to test. To see if loading information works, you just need to feed data to the "load" function and see what it returns back. With how you have it setup now, you need to run the entire program just to see if a small part of it works.</p>

<hr>

<p>Another example of reducing duplication is creating a function to test if a username/password combo is correct. It would make much more sense to write something like:</p>

<pre><code>def verify_login(username, password, login_data):
    for line in login_data:
       if ("username: " + username + " password: " + password) == line.strip():
           return True

    return False
</code></pre>

<p>And then call this function for each player in the main routine.</p>

<pre><code>with open("accountfile.txt","r") as username_finder:
    username1 = input(...)
    password1 = input(...)

    if verify_login(username1, password1, username_finder):
        print("you are logged in")

        username2 = input(...)
        password2 = input(...)

        if verify_login(username2, password2, username_finder):
</code></pre>

<p>Now, you can test this functionality without ever needing to load data from a file, or even run the program, and you don't need to deal with the whole <code>check_failed</code> mess.</p>

<p>That part could be extracted out too so the user is asked to enter a username/password pair until it matches:</p>

<pre><code>def ask_for_login(login_data):
    while True:
        username = input(...)
        password = input(...)

        if verify_login(username, password, login_data):
            # Return the verified username that the user entered
            return username

        else:
            validation()
</code></pre>

<p>Then use it as:</p>

<pre><code>with open("accountfile.txt","r") as username_finder:
    username1 = ask_for_login(username_finder)
    username2 = ask_for_login(username_finder)

    # Once you get rid of the globals, you'd pass "username1" and
    #  "username2" as arguments to "game"
    game()
</code></pre>

<p>Notice how much nesting this gets rid of.</p>

<hr>

<p>Practice looking at similar looking code and thinking about how it could be made into a function. This entire piece of code could be reduced by probably half once all the duplication is removed.</p>
    </div>