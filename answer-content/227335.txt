<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#level1
global level1
</code></pre>

<p>The comment here is not useful, if you have a variable <code>level1</code>, well... that's <code>level1</code>, right?</p>

<p>The same goes for all your other comments in the code. You should think of comments as a way to describe why you did things that specific way or the meaning of something. If you need them to describe what is happening, most likely you need to refactor something.</p>

<p>Also, as already pointed out in the other answers, this is a global variable, which in this case would not be terrible except that if it's <code>level1</code>, you probably also expect to have <code>level2</code> and maybe <code>level3</code>, which would make it quite ugly, especially if you hardcode your levels in the module.</p>

<p>You might want to look into loading a text file into a variable. You might have different text files named <code>level1.txt</code>, <code>level2.txt</code> and so on, depending on the level.</p>

<pre><code>class paddle:
    def __init__(self,x,y,width,height,vel):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self. vel = vel
Paddle = paddle(350,550,80,20,5)
def draw_paddle():
    pygame.draw.rect(screen,red,(Paddle.x,Paddle.y,Paddle.width,Paddle.height))
</code></pre>

<p>You have a class paddle (as already noted it should be <code>Paddle</code>), so why not having the <code>draw</code> inside the class?</p>

<p>That way you'd have something like:</p>

<pre><code>class Paddle:
    def __init__(self,x,y,width,height,vel):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self. vel = vel

    def draw(self):
        pygame.draw.rect(screen,red,(self.x, self.y, self.width, self.height))

paddle = Paddle(350,550,80,20,5)
...
paddle.draw()
</code></pre>

<p>The same goes for <code>block</code> and <code>ball</code>.</p>

<p>Actually, you could go the extra mile and have a list of objects on which you loop to call the <code>draw</code> and maybe a possible <code>update</code> function.</p>

<p>Something like:</p>

<pre><code>game_objects = [Paddle(350,550,80,20,5), Block(0,0,75,35), Ball(30,30,10,2,5)]
for game_object in game_objects:
    game_object.update()
    game_object.draw()
</code></pre>

<p>As already noted, these magic numbers (e.g. <code>row = posx // 35</code>) are better written as constants, even if you use them only once, to explain their meaning.</p>

<pre><code>if Paddle.x &lt;= Ball.x &lt;= Paddle.x +44 and Paddle.y == Ball.y:
    Ball.vely = - Ball.vely
    if Ball.x &gt; Paddle.x:
        Ball.velx =  Ball.velx
    if Ball.x &lt; Paddle.x:
        Ball.velx = -Ball.velx
if Paddle.x +45 &lt;= Ball.x &lt;= Paddle.x +80 and Paddle.y == Ball.y:
    Ball.vely = - Ball.vely
    if Ball.x &lt; Paddle.x:
        Ball.velx = - Ball.velx
    if Ball.x &gt; Paddle.x:
        Ball.velx = Ball.velx
</code></pre>

<p>This is a block of code that is prone to errors, because of the multiple conditions check and the multiple nested <code>if</code>s.</p>

<p>You don't need the <code>Ball.velx = Ball.velx</code> line, that doesn't do anything, which mean that you can remove that check.</p>

<p>There's also an issue with checking a strict <code>Paddle.y == Ball.y</code> because if you increase the speed of the ball, there's the chance that it will go past the paddle's <code>y</code> and not be detected, so you should check if the ball's <code>y</code> plus the ball's height is within the paddle's <code>y</code> plus the paddle's height.</p>

<p>The outer <code>if</code> would also be more readable if you put that in a function and called it with the specific parameters, something like:</p>

<pre><code>if paddle_and_ball_collided(paddle, ball):
    Ball.vely = - Ball.vely
    if Ball.x &lt; Paddle.x:
        Ball.velx = -Ball.velx
</code></pre>

<p>You should also look into the integrated collision detection functions from pygame, they can save you a bit of trouble (see e.g. <a href="https://stackoverflow.com/questions/29640685/how-do-i-detect-collision-in-pygame">https://stackoverflow.com/questions/29640685/how-do-i-detect-collision-in-pygame</a> )</p>
    </div>