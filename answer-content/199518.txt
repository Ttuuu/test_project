<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bugs</h2>

<ol>
<li><p>The loop</p>

<pre><code>for (let i = 0; i &lt; tempArray.length - 1 ; i++) {
</code></pre>

<p>omits the last array element, it should be</p>

<pre><code>for (let i = 0; i &lt; tempArray.length ; i++) {
</code></pre></li>
<li><p>If all array elements have the same sign then 
either <code>plusTemps</code> or <code>minusTemps</code> is an empty array, and accessing
its first element in</p>

<pre><code>if (plusTemps[0] === Math.abs(minusTemps[0])) {
</code></pre>

<p>is undefined. Those cases must be treated separately in your approach.</p></li>
<li><p>If the array is not empty, but all array elements are zero then
both <code>plusTemps</code> are <code>minusTemps</code> are empty, again making the result
undefined. What would be the expected result for this case?
Returning zero looks like a sensible choice to me.</p></li>
</ol>

<h2>Simplifications</h2>

<p>The first and second check in</p>

<pre><code>if (plusTemps[0] === Math.abs(minusTemps[0])) {
    return(plusTemps[0])
}

if (plusTemps[0] &lt; Math.abs(minusTemps[0])) {
    return(plusTemps[0])
}

if (plusTemps[0] &gt; Math.abs(minusTemps[0])) {
    return(minusTemps[0])
}
</code></pre>

<p>can be combined to </p>

<pre><code>if (plusTemps[0] &lt;= Math.abs(minusTemps[0])) {
    return(plusTemps[0])
}

if (plusTemps[0] &gt; Math.abs(minusTemps[0])) {
    return(minusTemps[0])
}
</code></pre>

<p>and the second <code>if</code> is better done with an <code>else</code>:</p>

<pre><code>if (plusTemps[0] &lt;= Math.abs(minusTemps[0])) {
    return(plusTemps[0])
} else {
    return(minusTemps[0])
}
</code></pre>

<p>This saves a comparison and makes it clear that a value is returned
in any case. And since we know that <code>minusTemps[0]</code> is negative we need
not call <code>Math.abs</code>:</p>

<pre><code>if (plusTemps[0] &lt;= -minusTemps[0]) {
    return(plusTemps[0])
} else {
    return(minusTemps[0])
}
</code></pre>

<h2>A better approach</h2>

<p>As already mentioned in the comments and in the other answers, the solution
can be determined with a single traversal of the array, without the need to
create additional arrays or any filtering or sorting.</p>

<p>Just keep track of the closest element found so far, and replace it if a
negative element with a closer distance is found, or a positive element
with the a closer or the same distance.</p>

<p><code>closest</code> stays zero until the first non-zero array element is found.
If non non-zero element exists then zero is returned. This covers the case
of an empty array, making the check for the array length obsolete.</p>

<pre><code>function calculateClosestTo0 (arr) {
    let closest = 0
    for (let i = 0; i &lt; tempArray.length ; i++) {
        if (closest === 0) {
            closest = arr[i]
        } else if (arr[i] &gt; 0 &amp;&amp; arr[i] &lt;= Math.abs(closest)) {
            closest = arr[i]
        } else if (arr[i] &lt; 0 &amp;&amp; -arr[i] &lt; Math.abs(closest)) {
            closest = arr[i]
        }
    }
    return closest
}
</code></pre>

<p>Using <code>Array.reduce</code> this can be written more concisely as</p>

<pre><code>function calculateClosestTo0 (arr) {
    return arr.reduce((acc, x) =&gt;
        acc === 0 ? x :
        x &gt; 0 &amp;&amp; x &lt;= Math.abs(acc) ? x :
        x &lt; 0 &amp;&amp; -x &lt; Math.abs(acc) ? x : acc
    , 0)
}
</code></pre>

<h2>Unit tests</h2>

<p>The first versions of my suggested code had bugs as well: It “looked”
simple and correct, but returned a wrong result in special cases.
It is a good idea to collect those (and similar) cases, as well as
other special cases that you think of, into a list. Then each iteration 
of the code can be tested against that list, to ensure that it does
not introduce new bugs.</p>

<p>Here is the list that I came up with, it should cover many of the
possible situations:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function calculateClosestTo0 (arr) {
    return arr.reduce((acc, x) =&gt;
        acc === 0 ? x :
        x &gt; 0 &amp;&amp; x &lt;= Math.abs(acc) ? x :
        x &lt; 0 &amp;&amp; -x &lt; Math.abs(acc) ? x : acc
    , 0)
}

let tests = [
    // Single element:
    { array: [5], result: 5 },
    { array: [-5], result: -5},
    // Positive element is closer to zero:
    { array: [-3, 2], result: 2 },
    { array: [1, -2, 3, -4], result: 1 },
    // Negative element is closer to zero:
    { array: [-2, 3], result: -2 },
    { array: [-1, 2, -3, 4], result: -1 },
    // Two elements with same distance but opposite sign:
    { array: [1, -1], result: 1},
    { array: [-1, 1], result: 1},
    { array: [0, 1, -1], result: 1},
    { array: [1, 0, -1], result: 1},
    { array: [1, -1, 0], result: 1},
    { array: [0, -1, 1], result: 1},
    { array: [-1, 0, 1], result: 1},
    { array: [-1, 1, 0], result: 1},
    // Only elements of same sign:
    { array: [4, 2, 3], result: 2},
    { array: [-4, -2, -3], result: -2},
    // Empty array, or only zeros:
    { array: [], result: 0},
    { array: [0, 0, 0, 0], result: 0},
    // Closest element is at front, medium, or tail position:
    { array: [2, 0, -2, 0, -3], result: 2},
    { array: [-2, 0, 2, 0, -3], result: 2},
    { array: [-2, 0, -3, 0, 2], result: 2}
]

for (let i = 0; i &lt; tests.length; i++) {
    console.log(calculateClosestTo0(tests[i].array) == tests[i].result)
}</code></pre>
</div>
</div>

    </div>