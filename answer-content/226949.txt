<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is your bottleneck in retrieving the new head at removal, which can not be avoided in a Singly-Linked structure, so it's <span class="math-container">\$O(n)\$</span>.</p>

<blockquote>
<pre><code>while (temp.Next != head)  // Get the previous Node of the head
    temp = temp.Next;
</code></pre>
</blockquote>

<h2>Doubly-Linked</h2>

<p>If you want fast removal <span class="math-container">\$O(1)\$</span>, you can do so at the cost of slightly slower insertion. You'd need to augment the queue to a doubly linked queue:</p>

<pre><code>var previous = head.Previous;
head.Previous = null;
head = previous;
head.Next = null;
</code></pre>

<p>Make sure at insertion, you'll set both <code>Previous</code> as <code>Next</code> references on the relevant nodes.</p>

<h2>Circular Doubly-Linked</h2>

<p>If you make the queue circular, you don't even need to store the <code>tail</code>, only the <code>head</code>. The <code>tail</code> would be <code>head.Previous</code>; In case of a single element, since it's circular, <code>head.Previous</code> would point to <code>head</code>. Make sure in iterators to terminate at <code>head</code>, instead of at <code>null</code>.</p>
    </div>