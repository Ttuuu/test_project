<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is my updated version, It looks simpler and better by creating a class, <code>Node</code>.</p>

<pre><code>import random


def formula(region_1, av1, region_2, av2):
    return sum([(i[1]-av1)**2 for i in region_1]) \
           + sum([(i[1]-av2)**2 for i in region_2])

def average(data):
    return sum([d[2] for d in data])/len(data)

Np = 400
x_data = [abs(random.gauss(5, 0.2) + random.gauss(8, 0.5)) for i in range(Np)]
y_data = [abs(random.gauss(10, 0.2) + random.uniform(0, 10)) for i in range(Np)]
z_data = [abs(random.gauss(4, 0.5)) for i in range(Np)]


class Node:
    def __init__(self, x_data, y_data, z_data):
        self.x_data = x_data
        self.y_data = y_data
        self.z_data = z_data
        self.points = [(i, j, k) for i, j, k in zip(x_data, y_data, z_data)]
        self.avg = average(self.points)

    def split(self):
        #Finding the best split:
        candidates = []
        for x in self.x_data:
            split_point = x
            region_1 = [i for i in self.points if i[0] &lt;= split_point]
            region_2 = [i for i in self.points if i not in region_1]
            if (region_1 != []) and (region_2 != []):
                leaf_1 = Node([i[0] for i in region_1], \
                         [i[1] for i in region_1], \
                         [i[2] for i in region_1])
                leaf_2 = Node([i[0] for i in region_2], \
                         [i[1] for i in region_2], \
                         [i[2] for i in region_2])
                f = formula(region_1, leaf_1.avg, region_2, leaf_2.avg)
                candidates.append( (leaf_1, leaf_2, ('x', split_point), f) )
        for y in self.y_data:
            split_point = y
            region_1 = [i for i in self.points if i[1] &lt;= split_point]
            region_2 = [i for i in self.points if i not in region_1]
            if (region_1 != []) and (region_2 != []):
                leaf_1 = Node([i[0] for i in region_1], \
                         [i[1] for i in region_1], \
                         [i[2] for i in region_1])
                leaf_2 = Node([i[0] for i in region_2], \
                         [i[1] for i in region_2], \
                         [i[2] for i in region_2])
                f = formula(region_1, leaf_1.avg, region_2, leaf_2.avg)
                candidates.append( (leaf_1, leaf_2, ('y', split_point), f) )

        sorted_f = sorted(candidates, key = lambda x: x[3])
        best_split = sorted_f[0]

        #The result:
        self.split_point = best_split[2]
        self.left_node = best_split[0]
        self.right_node = best_split[1]


#Source node and 1st split
source = Node(x_data, y_data, z_data)
source.split()

#Generate Binary Tree
result_nodes = [source.left_node, source.right_node]
all_nodes = [source.left_node, source.right_node]

min_nodes = 1000
min_points = 5

while len(all_nodes) &lt;= min_nodes:
    next_nodes = []
    for node in result_nodes:
        if (len(node.points) &gt; min_points):
            node.split()
            next_nodes.append(node.left_node)
            next_nodes.append(node.right_node)
    result_nodes = next_nodes
    all_nodes.extend(result_nodes)
    if len(result_nodes) == 0:
        break
</code></pre>
    </div>