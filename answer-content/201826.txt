<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The layout of your program is non-standard.  You have:</p>

<ul>
<li>main program part 1</li>
<li>function definitions</li>
<li>main program part 2</li>
</ul>

<p>Keep your main program together, don't split it up by adding functions in the middle, at least, not without a compelling reason.</p>

<hr>

<p>There is minimal error checking in the program.  If the target weight is less than the bar weight, this is not reported.</p>

<hr>

<pre><code>    for  i, weight in enumerate(weights):
        if int(remaining / weight) % 2 == 0:
            nweights.append(int(remaining/ weight))
        else:
            nweights.append(int(remaining/ weight) - 1)
        remaining = remaining - nweights[i]*weights[i]
        if remaining == 0:
            break

    listweights=zip(nweights, weights)
</code></pre>

<p>This code is duplicated in <code>user_one()</code>, <code>user_two()</code> and <code>perfect_combo()</code>.  You should move this into a function.</p>

<p>The code computes the number of a specific weight, and then adds the number to a list if it is even, or 1 less if it is odd.  Presumably, this is because the weights have to be added in pairs, one on each side of the bar, but this is never spelt out.</p>

<p>Finally, the list is zipped with the original list of weight options, to create pairs of counts and weights.</p>

<p>Let's create the function which does this computation, but let's make it more general.  You might have different bar types, say a light weight bar and a heavy weight bar.  The light weight bar would be lighter, and perhaps uses a different set of weights, but the algorithm would remain the same.  So the available weights should be passed in:</p>

<pre><code>def weights_in_pairs(added_weight, available_weights):

    """Compute and return list of numbers and sizes of weights to
    form the desired additional weight for bar-bell.  Also returns any
    excess weight that could not be added."""

    weights = []
    remaining = added_weight
    for weight in available_weights:
        pairs = int(remaining / (2*weight))
        if pairs  &gt; 0:
            weights.append((pairs * 2, weight))
            remaining -= 2 * pairs * weight

    return weights, remaining
</code></pre>

<p>Instead of dealing with even/odd numbers, we double the weight and compute the number of pairs that can be added add.  Instead of zipping at the end, we add the <code>(count, weight)</code> tuple to the <code>weights</code> list; this allows us to omit the zero counts, to simplify printing later</p>

<hr>

<pre><code>    for weight in listweights:
        if weight[0] &gt;= 2:
            print(f"{weight[0]} | {weight[1]}'s")

    if remaining !=0:
        print(f'the correct weight combination cannot be found,'
              f'the remaining weight is: {remaining} pound')
</code></pre>

<p>This code is also duplicated between <code>user_one()</code>, <code>user_two()</code> and <code>perfect_combo()</code>.  Again, we'll move this into a function.</p>

<pre><code>def print_weights(weights, remaining):

    """Print out the weights to be added to the bar-bell,
    and the amount of un-added weight, if necessary."""

    for n, weight in weights:
        print(f"{n} | {weight}'s")

    if remaining != 0:
        print(f'the correct weight combination cannot be found,'
              f'the remaining weight is: {remaining} pound')
</code></pre>

<p>Note that the for loop immediate extracts the tuple into two variables, with the names <code>n</code> and <code>weight</code>.  This allows us to use these named quantities in the body of the loop, instead of indexes like <code>weight[0]</code> and <code>weight[1]</code> where the reader will have to look elsewhere to determine what was stored in the different indexes.</p>

<p>Also, since we skipped added the zero-count weights, we didn't need the <code>if weight[0] &gt;= 2:</code> statement.</p>

<hr>

<p>We can combined the above two functions, to compute and print out the information displayed by <code>user_one()</code> and <code>user_two()</code>.  Again, we'll pass in arguments for the desired weight, the bar weight, and the available weights:</p>

<pre><code>def print_bar_configuration(target_weight, bar_weight, weights):

    """Compute and print bar-bell configuration for given weights."""

    listweights, remaining = weights_in_pairs(target_weight - bar_weight, weights)

    print(f'{bar_weight}lb bar')
    print(f'{target_weight}lbs')

    print_weights(listweights, remaining)
</code></pre>

<hr>

<p>With the above functions, <code>perfect_combo()</code> can be simplified:</p>

<pre><code>def perfect_combo(heavy_weight, light_weight):

    """Compute and print optimal additional weight configuration."""

    weight_difference = heavy_weight - light_weight

    print(f"Add {weight_difference}lbs for heavier weight")

    listweights, remaining = weights_in_pairs(weight_difference, weights)
    print_weights(listweights, remaining)
</code></pre>

<p><strong>Note</strong>: This raise the question of "what happens if the first weight was lighter than the second?"  Perhaps your program should mention that requirement, and test for it.  Or adapt the reversed data input.</p>

<hr>

<p>Using the above functions, we can simplify the main program, moving and combining the code at the top with the code at the bottom.  Also, renaming odd variables like <code>target_weight1</code> to something more meaningful:</p>

<pre><code>if prog_select == 1:
    target_weight = int(input('Enter weight: '))
    print_bar_configuration(target_weight, bar_weight, weights)
elif prog_select == 2:
    heavy_weight = int(input('Enter heavier weight: '))
    light_weight = int(input('Enter lighter weight: '))

    if heavy_weight - light_weight &gt; 99:
        print("You might want to use separate bars...")
    else:
        print_bar_configuration(light_weight, bar_weight, weights)
        perfect_combo(heavy_weight, light_weight)
else:
    print("That's too many peeps on one bar!")
</code></pre>
    </div>