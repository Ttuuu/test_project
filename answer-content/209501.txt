<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll add to what @bruglesco says.</p>

<h1>Storing the running <code>min</code> and <code>max</code></h1>

<p>If I understand correctly your goal is to have a stack where you can <code>pop()</code> and still access <code>min()</code> and <code>max()</code> in constant time.</p>

<p>Then it's indeed not sufficient to have a single <code>max_</code> and <code>min_</code> member in your class and your approach of storing the current <code>min</code> and <code>max</code> values in the stack is fine.</p>

<p>Alternatively you could store the values in a simple <code>std::vector&lt;int&gt;</code> and have two additional <code>std::vector&lt;int&gt;</code> instances <code>currMax</code> and <code>currMin</code>. Then <code>push(val)</code> would append <code>val</code> to <code>currMax</code> iff <code>val</code> is greater or equal to <code>currMax.back()</code>, and <code>pop()</code> would pop the last item from <code>currMax</code> if the popped item is equal to <code>currMax.back()</code>. (Similarly for <code>currMin</code>)</p>

<h1>Member initialization</h1>

<p>Remove the default member initialization from <code>Stack::Node::maxVal</code> and <code>Stack::Node::minVal</code>.<br>
<code>push()</code> always sets these values.</p>

<h1>Exception style</h1>

<p><code>top()</code>, <code>min()</code> and <code>max()</code> throw an exception if the stack is empty. <code>pop()</code> just calls <code>currStack.pop()</code> which is UB if the stack is empty. Both approaches are valid, you should just be consistent.</p>

<h1>DRY</h1>

<p>You have the same <code>if (currStack.empty()) { throw std::out_of_range ("Stack is empty"); }</code> in three functions. Make it a private function of its own, say <code>void throwIfEmpty() const</code> and call that.</p>

<h1><code>empty()</code> / <code>clear()</code></h1>

<p>From a practical view you could add a <code>clear()</code> method that clears the stack.<br>
Some people complain about <code>empty()</code> because it's unclear it it's used as an attribute ("Is this instance empty?") or a command ("Empty this instance!"). In C++17 you could add a <a href="https://en.cppreference.com/w/cpp/language/attributes/nodiscard" rel="nofollow noreferrer"><code>[[nodiscard]]</code></a> attribute to issue warnings if <code>empty()</code> is used as a command.</p>
    </div>