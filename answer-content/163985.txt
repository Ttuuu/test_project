<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well your provided example data can't be real, because I never ever saw an <code>int?</code> which could take <code>1.1</code> as value.  </p>

<p>I will apply to the posted code the standard C# naming convention, meaning that properties are named using <code>PascalCase</code> casing.  </p>

<p>That being said, lets take a look at the <code>Tree</code> class </p>

<blockquote>
<pre><code>public class Tree
{
    public int? id { get; set; }
    public string text { get; set; }
    public List&lt;Tree&gt; children { get; set; }
}  
</code></pre>
</blockquote>

<p>which seems to be just a <code>TreeNode</code> with <code>children</code> and without a <code>parent</code>. IMO this is too much. Just add your <code>TreeNode</code> to a <code>List&lt;TreeNode&gt; Children</code> property and you won't need the <code>Tree</code> class anymore.  </p>

<ul>
<li><p>By initializing the <code>Children</code> property at creation of the object, you will waste some space (memory) but you won't need to check if <code>Children == null</code> anymore.  </p></li>
<li><p><strong>If the root node (parent == null) won't be the first node in the collection then your method will fail.</strong></p></li>
<li><p>Omitting braces although they might be optional is dangerous because this can lead to hidden and therefore hard to find bugs.</p>

<p>I would like to encourage you to always use them.  </p></li>
<li><p>Using recursion to tackle this problem is a good idea.  </p></li>
</ul>

<h3>Another approach</h3>

<p>which assumes the <code>TreeNode</code> looks like so  </p>

<pre><code>public class TreeNode
{
    public int? Id { get; set; }
    public string Text { get; set; }
    public int? Parent { get; set; }
    public List&lt;TreeNode&gt; Children { get; set; }

    public TreeNode()
    {
        Children = new List&lt;TreeNode&gt;();
    }
}  
</code></pre>

<p>where I would usually make the setters <code>private</code> and fill the properties at constructor level, but I will leave this for you to do.</p>

<p><s>
By using <code>FirstOrDefault()</code> we can get the <code>root</code> node very easily and should remove it from the nodes collection. Let us introduce a method to do this  </s></p>

<pre><code>private static TreeNode RemoveRootNode(this List&lt;TreeNode&gt; nodes)
{
    if (nodes == null)
    {
        throw new NullReferenceException("nodes");
    }

    var root = nodes.FirstOrDefault(n =&gt; !n.Parent.HasValue);
    if (root != null)
    {
        nodes.Remove(root);
    }

    return root;
}  
</code></pre>

<p>Now we don't need the root node to be the first item in the collection anymore.  </p>

<p>Next we need the "main"  method which takes a <code>List&lt;TreeNode&gt;</code> as a parameter and returns a <code>TreeNode</code> which is the root node like so  </p>

<pre><code>public static TreeNode BuildTree(this List&lt;TreeNode&gt; nodes)
{
    var root = nodes.RemoveRootNode();
    if (root == null) { throw new ArgumentOutOfRangeException("nodes"); }
    return root.BuildTree(nodes);
}  
</code></pre>

<p></p>

<h3>Edit</h3>

<p>Based on the changed example data, we now can have multiple <code>TreeNode</code> with <code>Parent == null</code> which makes the <code>RemoveRootNode()</code> method superfluous and will result in <code>TreeNode buildTree(this List&lt;TreeNode&gt;)</code> like so  </p>

<pre><code>public static TreeNode BuildTree(this List&lt;TreeNode&gt; nodes)
{
    if (nodes == null)
    {
        throw new ArgumentNullException("nodes");
    }
    return new TreeNode().BuildTree(nodes);
}
</code></pre>

<p>As we see there should be a <code>BuildTree(this TreeNode, List&lt;TreeNode&gt;)</code> method which will look like: </p>

<pre><code>private static TreeNode BuildTree(this TreeNode root, List&lt;TreeNode&gt; nodes)
{
    if (nodes.Count == 0) { return root; }

    var children = root.FetchChildren(nodes).ToList();
    root.Children.AddRange(children);
    root.RemoveChildren(nodes);

    for (int i = 0; i &lt; children.Count; i++)
    {
        children[i] = children[i].BuildTree(nodes);
        if (nodes.Count == 0) { break; }
    }

    return root;
} 
</code></pre>

<p>which is self-explanatory. It fetches the children by using  </p>

<pre><code>public static IEnumerable&lt;TreeNode&gt; FetchChildren(this TreeNode root, List&lt;TreeNode&gt; nodes)
{
    return nodes.Where(n =&gt; n.Parent == root.Id);
}  
</code></pre>

<p>and add them to the <code>Children</code> property of the root node and removes them from the <code>nodes</code> by  </p>

<pre><code>public static void RemoveChildren(this TreeNode root, List&lt;TreeNode&gt; nodes)
{
    foreach (var node in root.Children)
    {
        nodes.Remove(node);
    }
}
</code></pre>

<p>Then it iterates over the the children and calls itself recursively. </p>
    </div>