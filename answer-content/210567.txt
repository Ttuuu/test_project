<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code block</p>

<pre><code>Integer index = ThreadLocalRandom.current().nextInt(min, max + 1);
Boolean loop = false; 
if(!added.add(index)) loop = true;
while(loop)
{
    index = ThreadLocalRandom.current().nextInt(min, max + 1);
    if(added.add(index)) loop = false;
}
</code></pre>

<p>Contains several lines of duplicated code.  This pattern can often be simplified by removing the code outside of the while block:</p>

<pre><code>Boolean success = false; 
while (!success)
{
    Integer index = ThreadLocalRandom.current().nextInt(min, max + 1);
    if (added.add(index))
        success = true;
}
</code></pre>

<p>or a do/while block, which is more idiomatic for code that needs to execute at least once:</p>

<pre><code>Boolean success = false;
do
{
    Integer index = ThreadLocalRandom.current().nextInt(min, max + 1);
    success = added.add(index); // note: this is simpler than the if version
}
while (!success);
</code></pre>

<p>I'm not a huge fan of <code>while (true)</code>, but some people might prefer the simpler:</p>

<pre><code>while (true)
{
    Integer index = ThreadLocalRandom.current().nextInt(min, max + 1);
    if (added.add(index))
        break;
}
</code></pre>

<p>This is all if you want to simply improve the existing structure. janos is correct that if all you want is a shuffling of a range of numbers you should approach it from that direction.  Your current solution can take an unbounded amount of time to run, if the random number generator is "unlucky".  You are returning a <code>Set</code>, which generally doesn't have a predictable order.  You happen to use an implementation that does preserve insert order, but callers of you code have now way of knowing that.  I would return a data structure that implies ordering, like a <code>List</code>.  Internally you used a <code>Set</code> to have it prevent duplicates, but if you shuffle that's not functionality you need.</p>

<p>A final nit: <code>added</code> isn't a great name for the set that you are going to return.  I often use <code>ret</code> to name the variable that will be the return value, though some might prefer a more descriptive name like <code>set</code>.</p>
    </div>