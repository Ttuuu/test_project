<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Method 1 (Sieve of Eratosthenes) is definitely the faster method to use.</p>

<p>Starting point on my computer, summing primes less than 100,000 takes 39.916 seconds.</p>

<h2>List to Set</h2>

<p>The problem is basically this line:</p>

<pre><code>primes_in_range = [2]
</code></pre>

<p>This creates a <code>list</code>, to which you add all odd numbers above 1, and then repeatedly search for existence of a number within (<code>d in primes_in_range</code>),  then for all multiples of that number, search for the multiple (<code>j in primes_in_range</code>), and then search for it a second time in the process of removing it (<code>primes_in_range.remove(j)</code>).  Searching a <code>list</code> is an <span class="math-container">\$O(n)\$</span> operation.  When you do it approximately once for every number in the list, your algorithm devolves to <span class="math-container">\$O(n^2)\$</span>.</p>

<p>On top of this, you’re computing<code>math.sqrt(n)</code> many, many times - a relatively expensive operation - yet the value does not change.  You only need to compute it once.</p>

<p>The second item you can solve by computing the <span class="math-container">\$\sqrt n\$</span> once, and store it in a local variable.</p>

<p>For the first issue, there are a few possibilities.  One, you could use a <code>set</code>, instead of a <code>list</code>.  A <code>set</code> has approximately <span class="math-container">\$O(1)\$</span> lookup time, which is much faster than <span class="math-container">\$O(n)\$</span>.</p>

<pre><code>primes_in_range = { 2 }
</code></pre>

<p>Since sets are not ordered, you don’t "<code>append()</code>" items to it, you "<code>add</code>" them instead.</p>

<p>Time has now dropped to 0.020511 seconds</p>

<p>Since the time has dropped to under a second, let's increase to primes less than 10,000,000 for better time measurements.</p>

<p>Time for summing primes less than 10,000,000: 3.519 seconds</p>

<h2>Search to Remove</h2>

<p>When removing, you are checking for the existence of the item in <code>primes_in_range</code> before removing it, since removing it when it is not present will raise an exception.  The <code>set</code> class has a <code>discard</code> method, which will only remove an item if present.  No need to check for it to be present ahead of time.</p>

<p>Time for summing primes less than 10,000,000: 3.453 seconds</p>

<h2>Removing Multiples</h2>

<p>When you find a prime, <code>d</code>, you cross off multiples of that prime, starting at <code>2*d</code>, and going <code>3*d</code>, <code>4*d</code>, <code>5*d</code>, and so on.  But when you determined <code>3</code> was a prime number, you crossed off all multiples of <code>3</code>, so crossing off <code>3*d</code> is a waste of time, for <code>d &gt; 3</code>.  Similarly, crossing off multiples of the prime <code>5</code> means crossing off <code>5*d</code> for <code>d &gt; 5</code> is also a waste of time.  The first multiple of <code>d</code> that hasn't been crossed off will be <code>d*d</code>, so you can remove starting at that point:</p>

<pre><code>        for j in range(d * d, n + 1, d):
            primes_in_range.discard(j)
</code></pre>

<p>Time for summing primes less than 10,000,000: 3.305 seconds</p>

<p>Similarly, since you are only considering odd prime candidates in your sieve, you don't need to cross off any even multiples.  Starting at <code>d*d</code>, the next multiple you need to remove would be <code>(d+2)*d</code>, not <code>(d+1)*d</code>.  Your step size can be <code>2*d</code>.</p>

<pre><code>        for j in range(d * d, n + 1, 2 * d):
            primes_in_range.discard(j)
</code></pre>

<p>Time for summing primes less than 10,000,000: 2.105 seconds</p>

<h2>Loop Like a Native</h2>

<p>Python has its own looping, which includes incrementing loop indexes.  This native Python looping is usually faster than writing loops with their own index manipulation:</p>

<pre><code>primes_in_range = {2}
primes_in_range.update(x for x in range(3, n+1, 2))

for d in range(3, math.isqrt(n) + 1, 2):
    if d in primes_in_range:
        primes_in_range.difference_update(j for j in range(d * d, n + 1, 2*d))
</code></pre>

<p>Here, constructing the set is done with a generator expression in <code>primes_in_range.update(...)</code>, and removing prime multiples is done with a generator expression in <code>primes_in_range.difference_update(...)</code> which adds and removes entire swathes of items in a single operation:</p>

<p>Time for summing primes less than 10,000,000: 2.049 seconds</p>

<h2>Direct Indexing</h2>

<p>However, a <code>set</code> is still an expensive memory structure to maintain.  It requires hashing the values which are being added, creating bins to store the values in, rebinning as the set size changes, and so on.  An array of flags is much more efficient, time-wise:</p>

<pre><code>primes_in_range = [False] * n
primes_in_range[2] = True
for x in range(3, n, 2):
    primes_in_range[x] = True

for d in range(3, math.isqrt(n) + 1, 2):
    if primes_in_range[d]:
        for j in range(d * d, n + 1, 2 * d):
            primes_in_range[j] = False

total = sum(idx for idx, flag in enumerate(primes_in_range) if flag)
</code></pre>

<p>The first line, above, allocates an array of <code>n</code> items, each containing the flag value <code>False</code>.  Then, indexing into the array is an <span class="math-container">\$O(1)\$</span> operation.  Set the flag to <code>True</code> for all odd numbers above 3, and then proceed to set the appropriate flags to <code>False</code> based on the Sieve of Eratosthenes algorithm.</p>

<p>Time for summing primes less than 10,000,000: 1.398 seconds</p>

<h2>Bit Array</h2>

<p>That last approach is a little inefficient when it comes to memory.  It requires a list of <code>n</code> 28-byte items to store one <code>True</code>/<code>False</code> flag.  These flags could be packed 8 to a byte, resulting in a 99.5% reduction in required memory!  The <code>bitarray</code> package provides such an array of flags.</p>

<pre><code>from math import isqrt
from bitarray import bitarray

def sum_of_primes_below(n):
    primes_in_range = bitarray(n)
    primes_in_range.setall(False)

    primes_in_range[2] = True      # 2 is a prime
    primes_in_range[3::2] = True   # Odd numbers starting at 3 are prime candidates

    for d in range(3, isqrt(n) + 1, 2):
        if primes_in_range[d]:
            primes_in_range[d*d::2*d] = False    # Reset multiples of prime candidate

    return sum(idx for idx, flag in enumerate(primes_in_range) if flag)
</code></pre>

<p>Time for summing primes less than 10,000,000: 0.455 seconds</p>
    </div>