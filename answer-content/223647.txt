<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>if (data == null || count &lt; 0) yield break;
</code></pre>
</blockquote>

<p>This behaviour is somewhat consistent with <code>Take</code>, but not with <code>Skip</code>: <code>Skip</code> treats a negative values as a zero. As, indeed, does the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.skiplast?view=netstandard-2.1" rel="nofollow noreferrer"><code>SkipLast</code></a> which doesn't appear in .NET Framework.</p>

<p>It should throw on a <code>null</code> argument with an <code>ArgumentNullException</code>.</p>

<hr>

<p>My only other real issue with the methods is that neither will work with <code>IEnumerable</code>s that can't be enumerated multiple times, and will incur overheads in any that can but have to generate the data lazily.</p>

<p>I would go for the slightly more painful:</p>



<pre class="lang-cs prettyprint-override"><code>if (source == null)
    throw new ArgumentNullException("Source Enumeration may not be null", nameof(source));

if (count &lt;= 0)
{
    foreach (T item in source)
        yield return item;
}
else
{
    bool yielding = false;
    T[] buffer = new T[count];
    int index = 0;

    foreach (T item in source)
    {
        if (index == count)
        {
            index = 0;
            yielding = true;
        }

        if (yielding)
            yield return buffer[index];

        buffer[index] = item;
        index++;
    }
}
</code></pre>

<p>If I cared about performance, I might consider the following, which reduces the amount of decision making inside the loop (which might make it faster: I'd better benchmark it).</p>

<pre class="lang-cs prettyprint-override"><code>// just the bit inside the else
T[] buffer = new T[count];

using (var e = source.GetEnumerator())
{
    // initial filling of buffer
    for (int i = 0; i &lt; buffer.Length; i++)
    {
        if (!e.MoveNext())
            yield break;

        buffer[i] = e.Current;
    }

    int index = 0;
    while (e.MoveNext())
    {
        yield return buffer[index];
        buffer[index] = e.Current;
        index = (index + 1) % count;
    }
}
</code></pre>

<hr>

<blockquote>
  <p>Performance wise they seems to be even.</p>
</blockquote>

<p>That's encouraging, since <code>Queue&lt;T&gt;</code> is also implemented as a circular buffer. You'd hope that the array based version would be a bit lighter, but may consume more memory is <code>Count &gt; data.Count()</code>.</p>

<p>Having benchmarked your two proposals, my two proposals, and the .NET Core <code>SkipLast</code> (didn't include the <code>Reverse</code> based method), it seems the fastest methods are that built into .NET Core (hurray) and my last one, but the difference between test instance (with different data lengths and skip counts) is great. Unfortunately, I messed up and didn't run a third of the .NET Core tests, so the saga of incompetence on my part continues. The code and data can be found in a <a href="https://gist.github.com/VisualMelon/1ab841a5b9204517675236e6645c537d" rel="nofollow noreferrer">gist</a>. The only real conclusion I would want to draw from this data (aside from 'use the BCL method if you can') is that your first method is consistently the slowest when the input array isn't empty <em>in these tests on my machine with it's current workload</em>. The difference is jolly significant, with your first method requiring twice as much time as others in some cases. <em>Why</em> the methods have different performance is less than clear.</p>
    </div>