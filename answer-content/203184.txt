<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The best and most idiomatic way to articulate this is, in my opinion, a combination of iterators and algorithms: iterators to represent row / column traversal, and an algorithm to compute the next state for each row / column.</p>

<h2>Iterators</h2>

<p>As you know, iterators are used in C++ to represent a position in a range. They can be dereferenced, like a pointer, to access the element at the position they point to. If your board is implemented as an array or a vector, and that you provide two kinds of iterators, one horizontal and one vertical (the vertical one is increased by the number of cells in a row to get to the next position), you can then use a single algorithm to make the tiles fold as in the game.</p>

<p>Oh, and I forgot to tell you that once you have an iterator going one direction, there's a <code>std::reverse_iterator</code> to make it go the other way around.</p>

<p>Writing iterators isn't as trivial as one could think, if you want them perfect at least, but you can simplify the task by using Boost::Iterator_facade. There are also guides available; see for instance <a href="https://stackoverflow.com/questions/8054273/how-to-implement-an-stl-style-iterator-and-avoid-common-pitfalls">this SO question</a>.</p>

<h2>Algorithm</h2>

<p>Once you have this done, a single algorithm will suffice. I've written a stub to give you a rough idea of how it could be done:</p>

<pre><code>template &lt;typename Iterator&gt;
auto move_2048(Iterator first, Iterator last) {
    auto consider = std::stable_partition(first, last, [](const Cell&amp; cell) {
        return is_empty(cell);
        });
    auto garbage = consider;
    // [first, garbage) are empty cells or trash
    // [consider, last) are candidates to folding
    while (true) {
        auto merge = std::adjacent_find(consider, last);
        if (merge == last) break;
        *std::next(merge) *= 2;
        std::rotate(garbage++, merge, std::next(merge));
        consider = std::next(merge, 2);
    }
    std::fill(first, garbage, empty_cell());
    return garbage;
}
</code></pre>

<p><del>I haven't tested it extensively but it seems ok.</del>
This algorithm is, IMO, correctly balanced between efficiency and readability. It returns the first non-empty cell after the move, so that you can compute the number of empty cells in that line/row: this by-product is a useful indication to compute the place where you'll insert the new tile.</p>
    </div>