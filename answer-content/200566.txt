<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I highly recommend you compile your code with clang and use all of its facilities (like sanitizer, which didn't find anything, so good job). Compiling your code with <code>-Wall -Wextra -pedantic -pedantic-errors</code> results in 81 warnings!!</p>

<p>To be fair, some of those warnings are stylistic (<code>-Wmissing-braces</code>), but some of them are correct (<code>-Wunitialized</code>) and there is even a bug in your code uncovered by a warning:</p>

<pre><code>for (size_t i = 0; i &lt; rooms.size(), i &lt; random_room_numbers.size(); ++i)
//                 ^^^^^^^^^^^^^^^^
//               discarded expression
</code></pre>

<p>It's not actually a bug, because <code>rooms</code> and <code>random_room_numbers</code> have the same size. More on that later.</p>

<p>As a side note, it's very interesting that you're using try-catch function bodies; I've never seen one of those "in the wild".</p>

<ol>
<li><p>Don't catch exceptions by reference, catch them by <code>const&amp;</code> or your handler will not get called if I <code>throw v;</code> where <code>v</code> is an lvalue.</p></li>
<li><p>I'd recommend to use single character literals instead of string literals if you're only going to put in one character (see main.cpp:10); that's a stylistic issue however (feel free to ignore those).</p></li>
<li><p>You should be consistent. Some things are not (space before <code>&lt;</code> with templates for example). An automated tool (like <code>clang-format</code>) helps a lot for me.</p></li>
<li><p>Typos: <code>seperator</code> =&gt; <code>separator</code>; menue =&gt; menu; </p></li>
<li><p>You don't actually need to catch any exceptions, because not of part of your code throws an exception.</p></li>
<li><p>(opinion) You should mark class that aren't supposed to be inherited from as <code>final</code>.</p></li>
<li><p>The <code>-Wuninitialized</code> warning is pretty useful: <code>&amp;rooms[1]</code> dereferences uninitialized memory. <code>rooms[1]</code> returns the first element of <code>rooms</code>, but at that point <code>rooms</code> hasn't been initialized yet. You'll need to defer initialization.</p></li>
<li><p>The initialization of <code>random_room_numbers</code> can be simplified using <a href="https://en.cppreference.com/w/cpp/algorithm/iota" rel="nofollow noreferrer"><code>std::iota</code></a>:</p>

<pre><code>std::iota(random_room_numbers.begin(), random_room_numbers.end(), 1);
</code></pre></li>
<li><p>To guarantee that <code>random_room_numbers</code> and <code>rooms</code> always have the same size, use a constant:</p>

<pre><code>static constexpr int total_rooms = 20;
</code></pre></li>
<li><p>(opinion) I'd suggest to name the member variable <code>room_number</code> just <code>number</code>, because the class is already a room, so it's implied.</p></li>
<li><p>Use <code>assert</code>s to guard against (accidental) precondition violations. For example, in <code>Dungeon::indicate_hazards</code>, you are assuming that <code>player_room != rooms.end()</code>. I'd put an <code>assert(player_room != rooms.end() &amp;&amp; "...");</code> afterwards just to be sure. (In C++20 you'd use contracts for this).</p></li>
<li><p>Because you're not going to modify <code>target_rooms</code> (in <code>Dungeon::shoot_arrow</code>), take it by <code>const&amp;</code>.</p></li>
<li><p>Sometimes you use <code>Room_number</code> (+1) for a room number, but you also use just an <code>int</code> :(. Consistency!</p></li>
<li><p><code>std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');</code> is safer than some random <code>999</code>. It also fixes a bug that you had: Try to enter a whitespace followed by a newline. This results in 999 characters been ignored and the game isn't playable anymore.</p>

<p>There is an exception for the maximum amount, which is why it works in that case, and not in the <code>999</code> case.</p></li>
<li><p>Instead of checking for stream failure (in <code>Dungeon::select_room_to_move</code>) using <code>fail, use</code>std::cin<code>'s</code>operator bool<code>:</code>if (!std::cin) /<em>fail</em>/;`.</p></li>
<li><p><code>if (game_over == true)</code> can be simplified to <code>if (game_over)</code>.</p></li>
<li><p>The introduction text is not up-to-date. There are three pits and super bats, not two. Might want to use the actual variables instead of hardcoding text.</p></li>
<li><p>It's my understanding that neighbors cannot ever be <code>nullptr</code>, so the extra if statement for it is unnecessary (wumpus.cpp:226). Might want to consider using an <code>assert</code> instead.</p></li>
<li><p>It seems like you are using <code>player_room</code> a lot. You might want to consider using a member variable for that so that you avoid to iterate over (potentially) the whole room container.</p></li>
<li><p><code>Dungeon::shoot_arrow</code> has a bug. If I shoot my last arrow into a non-existent room, then I can illegally continue ;)</p></li>
<li><p><code>Dungeon::move_player</code> has a bug, it moves the player into the wrong room. That's because <code>rooms</code> is not sorted, so <code>rooms[target_room_number]</code> doesn't get you the room with <code>room_number == target_room_number</code>. Use <code>std::find</code> again :)</p></li>
</ol>

<p>Apart from that, I really like your game so good job! :)</p>
    </div>