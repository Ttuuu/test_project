<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The are two big problems with the presented code: <code>global</code>s and incorrect use of functions.  </p>

<p>Try to avoid <code>global</code>s by any means. The code that uses them becomes more difficult to debug. See here for discussion: <a href="https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil">Why is Global State so Evil?</a> For example, in the function called <code>button</code> it's like you have two interfaces, one with passed parameters and one with <code>global</code>s. </p>

<p>The functions don't follow <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single responsibility principle</a>. In the <code>button</code> function too many things happen: changing color, appending dirty rectangle to a list and drawing rectangle. Try not to put too much logic in a single function. Just an example of how a function should look like, when you draw buttons for selecting colors you could use a function like this: </p>

<pre><code>def toolbar_element_offset(count: int,
                           *,
                           first_offset: int,
                           shift: int = 48) -&gt; int:
    """Distance of element on toolbar from the left border"""
    return first_offset + count * shift
</code></pre>

<p>and then call it with different <code>first_offset</code> values for selected or unselected buttons to get their coordinates. Moreover, it could be used to print number labels as well.</p>

<p>Though, I understand that with <em>pygame</em> it will be challenging to stick to a functional programming approach. I'm not a <em>pygame</em> expert (in fact I know almost nothing about it), but I think it's worth to try the OOP approach. Probably, you would want to use <a href="https://www.pygame.org/docs/tut/SpriteIntro.html" rel="nofollow noreferrer">Sprites</a>. My advice is to go through examples presented in the tutorials around the web and see how experts organize their code with <em>pygame</em>.</p>

<hr>

<p>Another problem that will definitely cause you problems is <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic numbers</a>. For example, if you would want to change the number of canvas copies from <code>5</code> to something else, you would have to change it in two places. Make them constants instead, something like: </p>

<pre><code>CANVAS_BACKUPS_COUNT = 5
</code></pre>

<p>Also, as I understand some magic numbers depend on each other, like screen resolution, size of the canvas and their ratio: <code>500 * 0.84 = 80</code>. You have all three in the code. Make two of them constants, and calculate the third one.</p>

<hr>

<p>Try to follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> style guide. 
Things that I noticed you violate are: imports, blank lines, spaces after commas, equations aligning, comparing with <code>None</code> (instead of <code>if startpoint == None:</code> should be <code>if startpoint is None:</code>), and 79 characters per line. Also, make constants <code>UPPER_CASE</code>. And follow  the conventions for variables names. <code>screenres -&gt; screen_resolution</code>, <code>holdingclick -&gt; holding_click</code>, etc. Some names though could be improved, like <code>clr -&gt; current_color</code>. And remove unnecessary comments like <code># Rects:</code>. It's pretty clear from the code that those are <code>Rect</code>s.</p>

<p>Looks like there is no need to keep both <code>layers</code> and <code>latests</code>. Just one list should be enough. Also, instead of writing:</p>

<pre><code>latest1 = canvas.copy()
latest2 = canvas.copy()
latest3 = canvas.copy()
latest4 = canvas.copy()
latest5 = canvas.copy()
layers = [latest1,latest2,latest3,latest4,latest5]
</code></pre>

<p>you could write:</p>

<pre><code>layers = [canvas.copy() for _ in range(CANVAS_BACKUPS_COUNT)]
</code></pre>

<hr>

<p>This looks inefficient:</p>

<pre><code>for color in colors:
    text = font.render(str(colors.index(color)+1),True,black)
</code></pre>

<p>Instead of searching the color in the list of colors, you could simply iterate over <code>range</code>:</p>

<pre><code>for index in range(len(colors)):
    text = font.render(str(index + 1), True, BLACK)
</code></pre>

<hr>

<p>This:</p>

<pre><code>if event.button == 4 and r &lt; 100:
    r += 1
elif event.button == 5 and r &gt; 2:
    r -= 1
</code></pre>

<p>is unclear for me. To understand what those <code>4</code> and <code>5</code> mean I had to go to documentation. What you could do is to use <a href="https://docs.python.org/3/library/enum.html#enum.IntEnum" rel="nofollow noreferrer"><code>enum.IntEnum</code></a>. And it would be something like this:</p>

<pre><code>from enum import IntEnum
...
class MouseWheel(IntEnum):
    UP = 4
    DOWN = 5
...
if event.button == MouseWheel.UP and brush_size &lt; max_size:
    brush_size += size_delta
elif event.button == MouseWheel.DOWN and brush_size &gt; min_size:
    brush_size -= size_delta
</code></pre>

<hr>

<p>Finally, you use lots of <code>tuple</code>s for mouse position or sizes of rectangles. I think it's worth to check out <a href="https://www.pygame.org/docs/ref/math.html?highlight=vector#pygame.math.Vector2" rel="nofollow noreferrer"><code>pg.Vector2</code></a>.</p>
    </div>