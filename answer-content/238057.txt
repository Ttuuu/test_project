<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code looks largely OK to me. I've written a Sudoku resolver myself, mainly to test my coding skills on the then new Collection framework (which again, shows my age).</p>

<p>A few remarks then:</p>

<ul>
<li>The rows, columns and blocks can be seen as "groups". That way it would even be possible to allow Sudoku's with different or additional groups.</li>
<li>I don't know the speed of my Sudoku for 12 x 12, but I do know that it ran in 0.2 seconds on my dual core core 2 based IBM cheapo thinkpad for 9 x 9. And that was basically the startup time of the VM.</li>
<li>I used a two step guessing -&gt; simple reduction of possible values for each "group", and then taking a guess. So if possible I would run <code>presolve</code> not only at the start, but also after each guess.  There are many tricks that can be used to be able to "guess" better, but most of them seem to slow down the guessing really (I played fair and looked up the tricks after getting it running).</li>
</ul>

<p>As for the code:</p>

<ul>
<li><p>the parameters of the Sudoku <code>w</code>, <code>h</code>, <code>size</code> / <code>fields</code> all seem related. Only use those that are really required. Isn't <code>size = w * h</code>?</p></li>
<li><p>The Field class is a bit weird. It has a special field for <code>value</code> and it is unclear if that is needed. It uses <code>0</code> as special value. For such a special value I would use a constant (e.g. <code>NOT_POSSIBLE = 0</code>) and document the use. Furthermore, it seems to rely on external calls to <code>setIfOnePossible</code> to get into the next valid state. I can remember I used <code>Set&lt;Integer&gt;</code> instead, with no significant issues (but then, my goal was to test the collection classes). <code>setIfOnePossible</code> returns a value, but that's not clear from the name.</p></li>
<li><code>public boolean isValid()</code> has side effects. A method that is called <code>isValid</code> should not contain any side effects, so it is really important that you rename the method.</li>
<li><code>raw = raw.substring(2)</code> generally we frown upon using <code>substring</code> in loops. What about <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Integer.html#parseInt(java.lang.CharSequence,int,int,int)" rel="nofollow noreferrer">the longer <code>parseInt</code></a> method or a regular expression using <code>Matcher.find()</code>?</li>
</ul>
    </div>