<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just another approach. It is recursive solution, so it can't process big lists. I get "maximum recursion depth exceeded" with more than 1000 items lists. Also, I think it is slow, because it walks through both lists from the beginning every time to greater number search. But it is easy and short, so as an example.</p>

<pre><code>def possible_arrays(lis, num, selector, buf):
    for val in lis[selector]:   

        if val &gt; num:

            if selector:
                print(*buf, val)

            possible_arrays(lis, val, selector ^ 1, buf + [val])
</code></pre>

<p><strong>Explanation:</strong></p>

<p><code>selector ^ 1</code> - is an <a href="https://stackoverflow.com/q/14526584/2913477">exclusive or</a> logical operation. I use it for fast switching <code>selector</code> from <code>1</code> to <code>0</code> or from <code>0</code> to <code>1</code>. It is needed, because the <code>lis</code> variable is a list comprising two lists: <code>l_a</code> and <code>l_b</code> and I want to select one or another alternately. <code>lis[0]</code> points to <code>l_a</code>, <code>lis[1]</code> points to <code>l_b</code>.</p>

<p><strong>For example:</strong> in the first <code>possible_arrays</code> function call the <code>selector</code> equals to <code>0</code>, so we work with the first list (<code>l_a</code>). When the necessary number is found, we should change the working list to the second one (<code>l_b</code>). We achieve this by doing <code>selector ^ 1</code> -&gt; <code>0 ^ 1</code> -&gt; <code>1</code> and passing the <code>1</code> to the next <code>possible_arrays</code> call. In the next call, when we should switch back to the first list, we do <code>selector ^ 1</code> -&gt; <code>1 ^ 1</code> -&gt; <code>0</code> again. And so on. This way we alternate used lists from one to another as the task was supposing.</p>

<p><strong>Test 1:</strong></p>

<pre><code>l_a = [10, 15, 25]
l_b = [1, 5, 20, 30]

l_main = [l_a, l_b]
possible_arrays(l_main, 0, 0, [])
</code></pre>

<p><strong>Output:</strong></p>

<pre><code>10 20
10 20 25 30
10 30
15 20
15 20 25 30
15 30
25 30
</code></pre>

<p><strong>Test 2:</strong></p>

<pre><code>l_a = [1, 2, 3]
l_b = [2, 4, 6]

l_main = [l_a, l_b]
possible_arrays(l_main, 0, 0, [])
</code></pre>

<p><strong>Output:</strong></p>

<pre><code>1 2
1 2 3 4
1 2 3 6
1 4
1 6
2 4
2 6
3 4
3 6
</code></pre>
    </div>