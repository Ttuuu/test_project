<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is likely not the dictionary look-up that kills your performance here, and more those nested <code>for</code> loops. <a href="https://www.youtube.com/watch?v=EEUXKG97YRw" rel="noreferrer">Python is known for its notoriously slow (<code>for</code>) loops</a>.</p>

<p>Since my numpy fu is a little bit weak lately, short of writing the code in C(++), I could only come up with an improvement using a nested list comprehension:</p>

<pre><code>def affinity_matrix_lc(protein_sequence, rna_sequence):
    python_matrix = [[scales[base][item] for base in rna_sequence]
                     for item in protein_sequence]

    return np.array(python_matrix)
</code></pre>

<p>Conceptually it is very similar to <a href="https://codereview.stackexchange.com/a/233072/92478">RomanPerekhrest's version</a>, but slightly easier to see what's going on I would say.</p>

<p>The list comprehension reduces the runtime of your example by about 30% here on my machine, with on-par performance to the one from Roman.</p>

<pre class="lang-none prettyprint-override"><code>%timeit affinity_matrix_op(protein_sequence, rna_sequence)   # your original code
409 ms ± 3.79 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

%timeit affinity_matrix_rp(protein_sequence, rna_sequence)   # RomanPerekhrest's version
277 ms ± 5.63 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

%timeit affinity_matrix_lc(protein_sequence, rna_sequence)              
275 ms ± 2.06 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>

<h2>Edit - int version at OP's request:</h2>

<p>I cobbled up a version of your code that first performs a translation to a vector of <code>int</code>s for both inputs. The look-up then uses numpy's indexing and broadcasting features to get the affinity matrix:</p>

<pre><code>RNA_MAPPING = {'U': 0, 'G': 1, 'C': 2, 'A': 3}
PROTEIN_MAPPING = {
    'R': 0,'A': 1,'S': 2,'D': 3,'Q': 4,'N': 5,'W': 6,'V': 7,'L': 8,'K': 9,
    'H': 10,'E': 11,'C': 12,'G': 13,'Y': 14,'P': 15,'M': 16,'I': 17,'T': 18,
    'F': 19
}
LUT = np.array([
    [ 0.005856,  0.130008,  0.31803 ,  0.005557, -0.065384, -0.215165,
      0.094917, -0.078486, -0.153234,  0.096389, -0.198936,  0.043517,
     -0.012462, -0.031819, -0.118544,  0.240871,  0.351179, -0.084679,
      0.264754, -0.269202],
    [-0.055897,  0.157098,  0.273463,  0.047448, -0.085275, -0.225754,
      0.093968,  0.108108,  0.177462, -0.186721,  0.144117, -0.193184,
      0.006956, -0.279106,  0.263202,  0.097558, -0.139056,  0.170305,
      0.166763,  0.480436],
    [ 0.009869, -0.170978, -0.357084,  0.011352, -0.031332,  0.439522,
      0.417484,  0.248514,  0.112175,  0.093534, -0.166851,  0.456847,
      0.460587,  0.209027,  0.059507, -0.189412, -0.08656 , -0.016438,
     -0.360561, -0.157944],
    [ 0.045458, -0.103534, -0.068299, -0.057364,  0.286417,  0.211717,
     -0.352338, -0.126037, -0.093059,  0.058532,  0.114486,  0.025673,
     -0.141027,  0.155926, -0.059715, -0.187549, -0.093239, -0.064125,
     -0.256675, -0.160025]
])

def affinity_matrix_int(protein_sequence, rna_sequence):
    protein_sequence_int = np.array(
        [PROTEIN_MAPPING[i] for i in protein_sequence], dtype=int
    ).reshape(-1, 1)
    rna_sequence_int = np.array(
        [RNA_MAPPING[i] for i in rna_sequence], dtype=int
    ).reshape(1, -1)
    return LUT[rna_sequence_int, protein_sequence_int]
</code></pre>

<p>I then checked the correctness of the implementation using</p>

<pre><code>&gt;&gt;&gt; np.allclose(
        affinity_matrix_int(protein_sequence, rna_sequence),
        affinity_matrix_op(protein_sequence, rna_sequence)
    )
True
</code></pre>

<p>And did another round of timing:</p>

<pre class="lang-none prettyprint-override"><code>%timeit affinity_matrix_int(protein_sequence, rna_sequence)             
10.9 ms ± 36.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>

<p>To answer your question in the comments: It turns out, this is quite a bit faster ;-)</p>
    </div>