<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're missing <code>Option Explicit</code> from the top of your code. From the menu at the top choose Tools&gt;Options... to display the Options dialog&gt;Code Settings group&gt;Require Variable Declaration. Make sure that box is checked. Thereafter <code>Option Explicit</code> will be added to the top of all modules mandating that you do <code>Dim fooBar as Range</code> or whatever the appropriate data type is. Future-You will thank you because it'll help avoid silly errors like having <code>bananna</code> as a variable name instead of <code>banana</code>.</p>

<p>Once you have option explicit at the top of a module intentionally misspell a variable and then from the menu Debug&gt;Compile and you'll see it in affect.</p>

<p>For modules that already exist you need to add this so go ahead and do that.</p>

<hr>

<p>For your variable names it's usually convention to have the first word lower case and the first letter of each word upper cased. <code>lastRow</code> or <code>targetTable</code> would be examples of this.</p>

<p>The actual names of variables like <code>x</code>, <code>rng</code>, <code>sh</code> are, well, not helpful. The same is true for <code>lrow</code> which I'm at present assuming could be <code>lastRow</code>. If you rename it to be something more descriptive it will tell Future-You at a glance what it's used for.</p>

<pre><code>Set nameArea = lookupSheet.Cells(startRow, lookupColumnIndex).Resize(rowSpan,1)
</code></pre>

<p>is much easier to understand than</p>

<pre><code>Set rng = ws.Cells(x,y).Resize(z,1)
</code></pre>

<p>Underscores in variable names is used by the <a href="https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/implements-statement" rel="nofollow noreferrer">Implements statement</a> and IMO is something that should be used only for it.</p>

<hr>

<p>Indentation. You have <code>Do</code> then way at the end you have <code>Loop</code> that isn't on the same indentation level. This makes it hard to figure out should be indented. <a href="http://rubberduckvba.com/" rel="nofollow noreferrer">rubberduckvba.com</a> can help you out with this and so much more. <strong>Disclosure Note</strong>: I'm a contributing member to Rubberduck.</p>

<p>You have a very long Sub that's doing a whole lot. If you have smaller Subs you'll notice things you didn't before. An example of things hidden in plain view several variables that, as far as I can tell aren't being used. These include <code>MyCell</code>, <code>TargetTable</code>, <code>NumberOfAreas</code>, <code>rng</code>, <code>LastRow</code>, and <code>MyRange</code>.</p>

<p>Others have already pointed out confusing nature of your if condition on the <a href="https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/ifthenelse-statement" rel="nofollow noreferrer">If...Then...Else statement</a> <code>If WorksheetsExists = Not sh Is Nothing Then</code>. Since <code>WorksheetsExists</code> is of type <code>Boolean</code> which initializes as <code>False</code> you have <code>False = Not sh Is Nothing Then</code>. When <code>sh is Nothing</code> is evaluated you'll end up with a boolean that you can use directly. You don't need, and shouldn't, compare it to a boolean. That needlessly complicates it. Leaving it out also simplifies your code so you have <code>If Not companySheet Is Nothing Then</code>.</p>

<p>You have empty else blocks that should be removed.</p>

<pre><code>Else
End If
</code></pre>

<p>If there's nothing in them and aren't being used remove <code>Else</code> key.</p>

<hr>

<p>You've a <code>On Error Resume Next</code> before a conditional check in the if statement. My suggestion is to use the following instead. This turns on error handling for the single line and turns it off again after comparison. Just remember to assign it to false just before the loop restarts to avoid false positives.</p>

<pre><code>On Error Resume Next
Dim firstColumnContainsNoVisibleCells As Boolean
firstColumnContainsNoVisibleCells = sourceTable.AutoFilter.Range.Columns(1).SpecialCells(xlCellTypeVisible).Count &lt;= 1
On Error GoTo 0

If firstColumnContainsNoVisibleCells Then
</code></pre>

<hr>

<p>You are doing a comparison using <code>""</code>. <code>""</code> can lead you to question if the string <em>might</em> have contained something but was inadvertently deleted. The better way to do this uses <code>vbNullString</code> as it lets you know that the comparison is intentional. <code>FooBar.Value &lt;&gt; vbNullString</code> is unambiguous.</p>

<hr>

<p>You're using a <a href="https://en.wikipedia.org/wiki/Magic_number_%28programming%29" rel="nofollow noreferrer">magic number</a> <code>65535</code>. What's the significance of that number? You only know what it is because of a comment. Going back to renaming variable names you have access to the <a href="https://docs.microsoft.com/en-us/office/vba/api/excel.xlrgbcolor" rel="nofollow noreferrer">XlRgbColor enumeration</a> which has the member <code>rgbYellow</code> which <em>is</em> that number. Note how 
<code>ActiveSheet.Tab.Color = XlRgbColor.rgbYellow</code> is self documenting. If you're not familiar with the <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/enum-statement" rel="nofollow noreferrer">Enum statement</a> have a read through it. Layman's explanation is it gives number a word to go along with it.</p>

<hr>

<p>Any time a sheet was referenced multiple times with a string argument, <code>Sheets("Template")</code> I created a Worksheet object for it. This is because if the name is ever changed you only have to change it in that once location and not chase after it because of Run-Time error when you find out you missed one.</p>

<p>Below is my refactoring that I got to by incorporating all my suggestions. <code>figureOutFRow</code> needs to be supplied as your orginal <code>frow</code> is never given a value and defaults to 0. </p>

<pre><code>Option Explicit

Sub Update_Backup_Sheets()
    Dim amalgamatedDateSheet As Worksheet
    Set amalgamatedDateSheet = Sheets("Amalgamated Data")

    Dim sourceTable As ListObject
    Set sourceTable = amalgamatedDateSheet.ListObjects("TableFullData")

    Dim generalSheet As Worksheet
    Set generalSheet = Worksheets("General")

    Dim templateSheet As Worksheet
    Set templateSheet = Worksheets("Template")

    Dim balanceDownloadSheet As Worksheet
    Set balanceDownloadSheet = Worksheets("Balance Download")

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    Dim companyName As Range
    For Each companyName In generalSheet.Range(generalSheet.Range("A4"), generalSheet.Range("A4").End(xlDown))
        If companyName.Value2 &lt;&gt; vbNullString Then
            sourceTable.AutoFilter.ShowAllData
            sourceTable.DataBodyRange.AutoFilter Field:=2, Criteria1:="=" &amp; companyName.Value2

            Dim firstColumnContainsNoVisibleCells As Boolean
            Dim companySheet As Worksheet
            On Error Resume Next
            firstColumnContainsNoVisibleCells = sourceTable.AutoFilter.Range.Columns(1).SpecialCells(xlCellTypeVisible).Count &lt;= 1
            Set companySheet = Sheets(companyName.Value2)
            On Error GoTo 0

            If firstColumnContainsNoVisibleCells Then
                If Not companySheet Is Nothing Then
                    With companySheet.ListObjects(1)
                        .DataBodyRange.Offset(1).Resize(.DataBodyRange.Rows.Count - 1, .DataBodyRange.Columns.Count).Rows.Delete
                        .DataBodyRange.ClearContents
                    End With
                End If
            Else
                If Not companySheet Is Nothing Then
                    If templateSheet.Visible = xlSheetHidden Then
                        templateSheet.Visible = xlSheetVisible
                    End If

                    templateSheet.Copy After:=Sheets(4)
                    ActiveSheet.Range("A20").ListObject.Name = "Table" &amp; companyName.Value2
                    ActiveSheet.Name = companyName.Value2
                    With ActiveSheet.Tab
                        .Color = XlRgbColor.rgbYellow
                        .TintAndShade = 0
                    End With

                    Dim figureOutFRow As Long
                    figureOutFRow = 0  '&lt;--- need to supply correct row
                    CheckBalanceDownloadRecords balanceDownloadSheet, companyName.Value2, figureOutFRow

                    templateSheet.Visible = xlSheetHidden

                    MsgBox "Worksheet for " &amp; companyName.Value2 &amp; " created"
                End If

                'Clear existing data and resize table
                With companySheet.ListObjects(1)
                    .DataBodyRange.Offset(1).Resize(.DataBodyRange.Rows.Count - 1, .DataBodyRange.Columns.Count).Rows.Delete
                    .DataBodyRange.ClearContents
                End With

                'Find first row of table (las row of sheet as data previously cleared)
                Dim lrow As Long
                lrow = companySheet.Range("B" &amp; Rows.Count).End(xlUp).Row

                With sourceTable.DataBodyRange.SpecialCells(xlCellTypeVisible).Copy
                    With companySheet
                        .Range("A" &amp; lrow).PasteSpecial Paste:=xlPasteValuesAndNumberFormats, Operation:=xlNone
                        Application.CutCopyMode = False
                    End With
                End With
            End If

            Set companySheet = Nothing
            firstColumnContainsNoVisibleCells = False 'To avoid false positives
        End If
    Next

    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    amalgamatedDateSheet.Select

    sourceTable.AutoFilter.ShowAllData
    MsgBox "All Sheets Updated"
End Sub

Private Sub CheckBalanceDownloadRecords(ByVal balanceDownloadSheet As Worksheet, ByVal companyName As String, ByVal frow As Long)
    Dim rgfound As Range
    Set rgfound = balanceDownloadSheet.Range("A1", "A" &amp; frow - 1).Find(companyName)

    If rgfound Is Nothing Then
        Dim flrow As Long
        flrow = balanceDownloadSheet.Range("a" &amp; Rows.Count).End(xlUp).Row

        With balanceDownloadSheet
            .ListObjects(1).ListRows.Add
            .Rows(flrow).Copy
            .Range("A" &amp; flrow + 1).PasteSpecial Paste:=xlPasteValuesAndNumberFormats, Operation:=xlNone
            Application.CutCopyMode = False
            .Range("a" &amp; flrow + 1).Value = companyName
        End With
    End If
End Sub
</code></pre>

<p>I really can't go any farther. This should be plenty to get you started. I'm pretty confident the <code>If Not companySheet Is Nothing Then</code> can actually be removed. Without being able to test it leaves it to you to step through the code and see if it actually can be removed.</p>
    </div>