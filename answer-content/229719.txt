<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In JavaScript using exceptions to communicate standard logic information is rather bad. Exceptions are bulky and slow (some browsers can not optimise code containing try blocks).
Your handling of errors will also mask real errors and thus let serious problems slip by while developing the code.</p>

<p>When you use exceptions always check the error in the catch to see if it is part of the functions proper execution, all other errors you should re throw.</p>

<p>Also use one try catch, there is no need to add try catches in every function.</p>

<h2>Using exceptions</h2>

<p>The rewrite cleans up your exception handling and adds a custom error <code>StackError</code> The one <code>catch</code> first checks the error and passes on all unrelated errors to a higher level.</p>

<pre><code>function problem(S) {
    function StackError() {  }
    if (!S.length) { return -1 }
    const stack = [];
    const push = n =&gt; stack.push(Number(n));
    const pop = () =&gt; {
        if (stack.length) { return stack.pop() }
        throw new StackError();
    }
    const duplicate = () =&gt; {
        const dup = pop();
        push(dup);
        push(dup);            
    };
    const add = () =&gt; {
        const sum1 = pop();
        const sum2 = pop();
        push(sum1 + sum2);    
    };
    const minus = () =&gt; {
        const min1 = pop();
        const min2 = pop();
        push(min1 - min2);
    };
    const ops = {
        "DUP": duplicate,
        "POP": pop,
        "+": add,
        "-": minus,
    };

    const input = S.split(' ');
    try {   
        input.forEach(x =&gt; {
            if (!isNaN(x)) {
                push(x);
            } else {
                const op = ops[x.toUpperCase()];
                if (op) { op() } else { throw new StackError() }
            }
        });
        return pop();
    } catch(error) {
        if (!(error instanceof StackError)) { throw error }
        return -1;
    }
}
</code></pre>

<h2>Without the error handling</h2>

<p>The next rewrite handles the error state via a semaphore that when true is used to exit the function. This also shows why using <code>for of</code> loops makes the code less complex. (You can only exit early from a iteration function via an exception (or other hacks)</p>

<pre><code>function problem(S) {
    if (!S.length) { return -1 }
    const stack = [];
    const push = n =&gt; stack.push(Number(n));
    var error = false;
    const pop = () =&gt; {
        if (stack.length) { return stack.pop() }
        return (error = true, -1);
    }
    const ops = {
        POP: pop,
        DUP() {
            const dup = pop();
            push(dup);
            push(dup);            
        },
        "+"() { push(pop() + pop()) },
        "-"() { push(pop() - pop()) }
    };
    for (const item of S.split(" ")) {
        if (!isNaN(item)) {
            push(item);
        } else {
            const op = ops[item];
            if (op) { op() }
            if (error) { return - 1 }
        }
    }
    return pop();
}
</code></pre>

<p>I removed some repeated code defining functions and then adding them to <code>ops</code> was just repeated definitions.</p>

<h2>Performance</h2>

<p>Pushing and popping from a stack is fast but will still incur memory allocation and release (GC) overheads. If the stack grows and shrinks a lot then this overhead becomes significant.</p>

<p>To avoid most of the allocation / de allocation overhead only grow the array and keep a pointer to the top of the stack.</p>

<p>The stack will never use more memory than it already does (well in fact using the pointer method uses less memory as de/allocation can result in duplicated arrays in RAM waiting for GC and the pointer method reduces the number of GC tasks) </p>

<pre><code>function problem(instructionStr) {
  var err = false, len = 0, item;
  if (instructionStr.trim() === "") { return -1 }
  const defaultOp = () =&gt; isNaN(item) ? err = true : stack[len++] = Number(item);
  const stack = [], ops = {
    DUP() { len ? stack[len] = stack[len++ - 1] : err = true },
    POP() { len ? len-- : err = true },
    "+"() { --len ? stack[len - 1] = stack[len] + stack[len - 1] : err = true },
    "-"() { --len ? stack[len - 1] = stack[len] - stack[len - 1] : err = true }
  };
  for (item of instructionStr.split(" ")) {
    ops[item] ? ops[item]() : defaultOp();
    if (err) { return -1 }
  }
  return len ? stack[len - 1] : -1;
}
</code></pre>

<h2>Re Optimization</h2>

<p>I totally disagree with Joseph comment under his answer</p>

<blockquote>
  <p><em>"Pre-mature optimization is bad. I'd optimize for readability and reducing cognitive overhead first before anything else"</em></p>
</blockquote>

<p>Optimization does not mean that the code is any less readable. Micro optimizations sum up and should be habit, not the exception. Readability is what people are accustomed to, and I think this is where such comments as Joseph's stem.</p>
    </div>