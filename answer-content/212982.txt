<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't understand the point of the <code>IComponent</code> / <code>IComponentConsumer</code> stuff. Nothing else in the large section of code you've posted uses them. Are you sure they're at the right layer?</p>

<p>Also, with <code>IComponentConsumer</code>, I think the code falls into the trap of extending when it should compose. It seems to me that every class which implements the interface will have the same implementation, so you should probably replace the interface with a <code>sealed</code> class which implements the same API and compose that into whatever classes actually use the functionality.</p>

<hr>

<blockquote>
<pre><code>    public override bool Equals(object obj)
    {
        return obj is IdentifiableTcpClient client &amp;&amp; Equals(client);
    }
</code></pre>
</blockquote>

<p>I have a slight preference for</p>

<pre><code>    public override bool Equals(object obj) =&gt; Equals(client as IdentifiableTcpClient);
</code></pre>

<hr>

<p>I am confused about <code>Message</code>. As I read it, the client sends plain strings to the server, and the server sends <code>Message</code> instances back to the client. So why does <code>Message</code> have a property <code>public IdentifiableTcpClientDTO SenderDTO { get; }</code>? The sender is a server, not a client, and it should be clear from context who sent the message so it shouldn't need to be transmitted across the network.</p>

<hr>

<blockquote>
<pre><code>public class ClientDataEventArgs
</code></pre>
</blockquote>

<p>It's conventional that <code>XYZEventArgs</code> should extend <code>EventArgs</code>.</p>

<hr>

<blockquote>
<pre><code>    public HashSet&lt;IdentifiableTcpClient&gt; Clients { get; } = new HashSet&lt;IdentifiableTcpClient&gt;();
</code></pre>
</blockquote>

<p>It's normally a bad idea to make a mutable collection of your state publicly available. Are you sure you don't want to have a private mutable set and make available a readonly view of it?</p>

<hr>

<blockquote>
<pre><code>        lock (_padlock)
        {
            ...

            foreach (var tcpClient in faultedClients)
            {
                OnDisconnectedClient(tcpClient);
            }
        }
</code></pre>
</blockquote>

<p>Invoking callbacks while holding a lock is potentially a source of pain in the future. I would consider refactoring so that you modify the set while holding the lock and invoke the events after releasing it. That way any deadlock is entirely the fault of the invoking class.</p>

<hr>

<blockquote>
<pre><code>            catch (Exception e)
            {
                Console.WriteLine(e);
            }
</code></pre>
</blockquote>

<p>Consider using a more sophisticated logging library. Serilog, log4net, even TraceWriter.</p>

<hr>

<p>The <code>Encoding</code> instance is probably worth caching in a static field. And I would suggest that since it's not 1990 any more you should prefer UTF-8 (without BOM, since UTF-8-BOM is a monstrosity).</p>

<hr>

<blockquote>
<pre><code>        catch (InvalidOperationException)
        {
        }
        catch (IOException e)
        {
            if (!(e.InnerException is SocketException))
            {
                throw;
            }
        }
</code></pre>
</blockquote>

<p>Silently swallowing exceptions is worrying. You should alleviate the worry by adding some comments to explain why these particular exceptions can be safely ignored.</p>

<hr>

<p>The <code>BeginFoo/EndFoo</code> style is now legacy. In new code, I would suggest using <code>Task</code> (<code>async/await</code>) style asynchronous code, because that seems to be the preferred modern option.</p>
    </div>