<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me reflect to your other question, which is related to the good old <code>ServicePointManager</code>.</p>

<p>In the early versions of .NET Core they tried to get rid of the <code>ServicePointManager</code> and the related <code>HttpWebRequest</code> class as well. Instead they have introduced two new classes: <code>WinHttpHandler</code> and <code>CurlHandler</code>. Former should be used in Windows environment and latter should be used everywhere else.</p>

<p>So prior .NET Core 2.0, you had to write something like this:</p>

<pre><code>var httpHandler = new WinHttpHandler();
httpHandler.SslProtocols = SslProtocols.Tls13;
var httpClient = new HttpClient(httpHandler);  
</code></pre>

<p>But in .NET Core 2.0 it was reintroduced but in a slightly different way. Please read <a href="https://www.stevejgordon.co.uk/httpclient-connection-pooling-in-dotnet-core" rel="nofollow noreferrer">this excellent article</a> if you are interested about the details.</p>

<p>So, in short: Yes, you can still use in .NET Core 3 the <code>ServicePointManager</code>, which now resides inside the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepointmanager.securityprotocol" rel="nofollow noreferrer">System.Net.ServicePoint.dll</a>.</p>
    </div>