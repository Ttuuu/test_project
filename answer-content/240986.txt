<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before we got any further, a word of warning. The complexity is only valid in a particular computational model.</p>

<p>The complexity of these algorithms is <span class="math-container">\$O(\log n)\$</span> <em>only</em> if the addition takes constant time. For large <span class="math-container">\$n\$</span> it is not the case.</p>

<p>Fibonacci numbers grow exponentially with <code>n</code>. It means that the number of bits grows linearly. Now we are in the Turing machine realm. The last addition itself takes <span class="math-container">\$O(n)\$</span>, which is way more than <span class="math-container">\$\log n\$</span>.</p>

<p>The overall complexity should be <span class="math-container">\$O(n\log{n})\$</span> in both cases. Why the two exhibit different performance?</p>

<p>The <em>likely</em> reason is that there is a subtle difference between them. <code>fib_1</code> maintains just one matrix, <code>F</code>. <code>fib_2</code> maintains two of them, <code>F, M</code>, and must do roughly twice as many reallocations as <code>fib_1</code> does. The matrices contain huge numbers, and I expect that the memory management time dominates. Yet another factor the computational model shall now consider.</p>
    </div>