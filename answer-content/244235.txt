<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Compilation Error</h2>
<p>The first problem is to solve the compiling error.</p>
<p>Just follow the interface:</p>
<pre><code>    public Node&lt;Integer&gt; mergeAscend(Node&lt;Integer&gt; a, Node&lt;Integer&gt; b) 
</code></pre>
<h2>Warnings and Code convention</h2>
<p>You should add the type information to the store_next_a_node variable (and store_next_b_node). Additionally, in <a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html" rel="nofollow noreferrer">Java naming conversion</a>, variable names use camel case. Therefore, I suggest substitute:</p>
<pre><code>            Node store_next_a_node = a.next;
           ...
            Node store_next_b_node = b.next;

</code></pre>
<p>By...</p>
<pre><code>            Node&lt;Integer&gt; nextNode = a.next;
</code></pre>
<h3>Simple "Test Case"</h3>
<p>The code bellow is just an example and not a full automated test (for more information, look for Java automated tests. eg: <a href="https://www.vogella.com/tutorials/JUnit/article.html" rel="nofollow noreferrer">junit tutorial</a>).But it is enough to  give us some hints what is going on. For example, we can see the original code does not solve the problem. Let us write a simple test case:</p>
<pre><code>    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] a = { 6, 4, 2 };
        Node&lt;Integer&gt; h1 = new Node&lt;&gt;(8, null);
        Node&lt;Integer&gt; previous = h1;
        for (int value : a) {
            Node&lt;Integer&gt; node = new Node&lt;&gt;(value, null);
            previous.next = node;
            previous = node;
        }


        int[] b = { 7, 5, 3, 1 };
        Node&lt;Integer&gt; h2 = new Node&lt;&gt;(9, null);
        previous = h2;
        for (int value : b) {
            Node&lt;Integer&gt; node = new Node&lt;&gt;(value, null);
            previous.next = node;
            previous = node;
        }
        solution.mergeAscend(h1, h2);
        Node&lt;Integer&gt; iterator = solution.dummy;
        while (iterator != null) {
            System.out.println(iterator.value);
            iterator = iterator.next;
        }
    }

</code></pre>
<p>The expected output would be the numbers printed in ascending order as the exercise suggests.</p>
<h2>NullPointerException</h2>
<p>With the test case, we can execute the code and and we will get a null pointer exception during the execution:</p>
<pre><code>Exception in thread "main" java.lang.NullPointerException
    at Solution.mergeAscend(Solution.java:13)
    at Solution.mergeAscend(Solution.java:19)
    at Solution.mergeAscend(Solution.java:24)
    at Solution.mergeAscend(Solution.java:19)
    at Solution.mergeAscend(Solution.java:24)
    at Solution.mergeAscend(Solution.java:19)
    at Solution.mergeAscend(Solution.java:24)
    at Solution.mergeAscend(Solution.java:19)
    at Solution.mergeAscend(Solution.java:24)
    at Solution.main(Solution.java:50)
</code></pre>
<h3>Bug</h3>
<p>If you look the code, the following statement is suspicious:</p>
<pre class="lang-java prettyprint-override"><code>if((a!=null&amp;&amp;b==null)||a.value&gt;=b.value)
</code></pre>
<p>What if <code>a</code> is null and b is not null? First condition is false and Java interpreter will try to evaluate the second condition. Unfortunately, a.value will throw a NullPointerException.</p>
<p><em>Next Step: How to fix it ?</em></p>
<h2>Clean Code makes our life easier</h2>
<p>Let's make the code cleaner . In our case, we want to preserve the original code ideas and just simplifying what is possible. Hopefully we will remove the conditions that make the code to fail.</p>
<h3>Remove unnecessary else-statement</h3>
<p>First, after the base case, we don't need a else-statement. Change..</p>
<pre class="lang-java prettyprint-override"><code>        if (a == null &amp;&amp; b == null) {//base case
            return null;
        }
        else {
        ...
        }

</code></pre>
<p>to</p>
<pre class="lang-java prettyprint-override"><code>        if (a == null &amp;&amp; b == null) {//base case
            return null;
        }
        ...

</code></pre>
<h3>Nullability test only once</h3>
<p>Second, remove the complication of testing <code>a</code> nullability all the time.</p>
<p>Just add the following check after the base case.</p>
<pre class="lang-java prettyprint-override"><code>        if (a == null)
            return mergeAscend(b, a);
</code></pre>
<p>With that, now we know that <code>a</code> is the longest list and we don't need to check again and again that condition.</p>
<p>So, your second "if-statement" can be change from</p>
<pre class="lang-java prettyprint-override"><code>        if ( (a!=null &amp;&amp; b==null) || a.value &gt;= b.value)
</code></pre>
<p>to:</p>
<pre class="lang-java prettyprint-override"><code>        if (b == null || a.value &gt;= b.value) // insert "b" after dummy
</code></pre>
<h3>Remove unnecessary if-statement</h3>
<p>After that, we might think about it... we don't need the third "if-statement". Just remove it.</p>
<pre class="lang-java prettyprint-override"><code> else if((a==null&amp;&amp;b!=null)||a.value&lt;b.value){
     ...
 }
</code></pre>
<p>To...</p>
<pre class="lang-java prettyprint-override"><code> else {
      ...
  }
</code></pre>
<h3>Congrats, your code now works!</h3>
<pre class="lang-java prettyprint-override"><code>    public Node&lt;Integer&gt; mergeAscend(Node&lt;Integer&gt; a, Node&lt;Integer&gt; b) {
        if (a == null &amp;&amp; b == null) {//base case
            return null;
        }
        if (a == null)
            return mergeAscend(b, a);
        if (b == null || a.value &gt;= b.value) {// insert "a" after dummy
            //store the next node of current a, before pointing a.next to dummy.next;
            Node&lt;Integer&gt; nextNode = a.next;
            //insert Node "a" between dummy and dummy.next
            a.next = dummy.next;
            dummy.next = a;
            mergeAscend(nextNode, b);
        } else {
            Node&lt;Integer&gt; nextNode = b.next;
            b.next = dummy.next;
            dummy.next = b;
            mergeAscend(a, nextNode);
        }
        return dummy.next;
    }
</code></pre>
<p>Test it!</p>
<h3>PS: Another Minor Thing - Comment misleading</h3>
<p>Your code comments are misleading. In the second if-statement, if the statement evaluate the expression as true, code below add <code>a</code> between dummy and dummy.next.</p>
<p>change</p>
<pre class="lang-java prettyprint-override"><code>// insert "b" after dummy
</code></pre>
<p>To</p>
<pre class="lang-java prettyprint-override"><code>// insert "a" after dummy
</code></pre>
<h2>PS2: Symmetric symplification</h2>
<p>Evaluating the code again, we might found the code is a little redundant. It means, part of the code is doing exactly the same thing, but the variable names are just swapped. In that case, we can simplify it further.</p>
<pre class="lang-java prettyprint-override"><code>    public Node&lt;Integer&gt; mergeAscend(Node&lt;Integer&gt; a, Node&lt;Integer&gt; b) {
        if (a == null &amp;&amp; b == null) {//base case
            return dummy.next;
        }
        if (a == null || (b != null &amp;&amp; a.value &lt; b.value)) { // symmetric case
            return mergeAscend(b, a);
        }
        //store the next node of current a, before pointing a.next to dummy.next;
        //insert Node "a" between dummy and dummy.next
        Node&lt;Integer&gt; nextNode = a.next;
        a.next = dummy.next;
        dummy.next = a;
        return mergeAscend(nextNode, b);
    }
</code></pre>
    </div>