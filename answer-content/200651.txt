<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Algorithms or data structures</h2>

<p>Let's start from an alternative way of checking if the two strings are anagrams: sort them both and compare them for equality:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;string&gt;

std::string a, b;
// ...
std::sort(a.begin(), a.end());
std::sort(b.begin(), b.end());
bool is_anagram = a == b;
</code></pre>

<p>What is the complexity of this method? sorting is <code>n * log(n)</code>, comparing is <code>n</code>, so we have <code>n * log(n) + n * log(n) + n</code> (given that the length of both strings is the same).</p>

<p>You can notice that it isn't more costly than the method you chose: <code>std::map</code> is implemented using red-black trees, with <code>log(n)</code> insertion, so that building one map from a string with n character is <code>n * log(n)</code>. Comparing between two maps is also <code>n</code>.</p>

<p>So, should you choose a sorted <code>std::string</code> or a <code>std::map</code>, given that the solution in each case has the same algorithmic complexity? The string is generally superior, because its characters are stored in contiguous memory, meaning cache locality and a better allocation strategy than <code>std::map</code>.</p>

<p>That is an important lesson in C++: algorithms applied to array-like structures are often more efficient than data structured "embedding" an algorithm. </p>

<h2>Hashing</h2>

<p>Can we now do better? There is a data structure that offers <code>O(n)</code> insertion and retrieval and an array disposition: hash maps. In c++ they're present as <code>std::unordered_map</code>. The idea behind the hash map is to associate a value with a key through a hashing function; keys are then positions in an array. So we have: <code>key_n == hash_fn(value_n)</code> and <code>array[key_n] == value_n</code> (actually there might be more than on value by key, but this is a good approximation).</p>

<p>In the case of a string with ordinary characters, you can choose the identity function as the hash function and use a simple array as the hash map:</p>

<pre><code>// ...
#include &lt;array&gt;

std::string s;
// ...
std::array&lt;unsigned char, 256&gt; hash_map{}; // the braces are required to ensure that all array elements are initialized to 0
for (auto c : s) ++hash_map[static_cast&lt;unsigned char&gt;(c)];
</code></pre>

<p>Checking if two strings are anagrams can now be done by incrementing values in the array for the first string, and decrementing them for the second string:</p>

<pre><code>// ...
#include &lt;array&gt;

std::string a, b;
// ...
if (a.size() != b.size()) return false;
std::array&lt;unsigned char, 256&gt; hash_map{}; // the braces are required to ensure that all array elements are initialized to 0
for (auto c : a) ++hash_map[static_cast&lt;unsigned char&gt;(c)];
for (auto c : b) --hash_map[static_cast&lt;unsigned char&gt;(c)];
bool is_anagram = std::none_of(hash_map.begin(), hash_map.end(), std::identity()); // std::identity is c++20, a lambda returning its argument unchanged will do the trick though
</code></pre>

<p>We can still do a little better since decrementing a value at zero in the second pass is a sign that the two strings aren't anagrams:</p>

<pre><code>bool are_anagrams(const std::string&amp; a, const std::string&amp; b) {
    std::array&lt;unsigned char, 256&gt; hash_map{};
    for (auto c : a) ++hash_map[static_cast&lt;unsigned char&gt;(c)];
    for (auto c : b) if (!hash_map[static_cast&lt;unsigned char&gt;(c)]--) return false;
    return std::none_of(hash_map.begin(), hash_map.end(), std::identity());
}
</code></pre>

<p>Actually, checking if all values have been decremented to zero is useless if both strings are the same size, so we can simplify a bit further:</p>

<pre><code>bool are_anagrams(const std::string&amp; a, const std::string&amp; b) {
    if (a.size() != b.size()) return false;
    std::array&lt;unsigned char, 256&gt; hash_map{};
    for (auto c : a) ++hash_map[static_cast&lt;unsigned char&gt;(c)];
    for (auto c : b) if (!hash_map[static_cast&lt;unsigned char&gt;(c)]--) return false;
    return true;
}
</code></pre>
    </div>