<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>extern crate glutin_window;
extern crate graphics;
extern crate piston;
extern crate piston_window;
</code></pre>

<p>The new edition of rust, 2018, does not require <code>extern crate</code> statements. Furthermore, you don't have <code>extern crate</code> statements for <code>rand</code> or <code>opengl_graphics</code> suggesting that you are already using Rust 2018, and you just have these extra extern crates for no reason.</p>

<pre><code>const BACKGROUND_COLOR: [f32; 4] = [0.5, 0.5, 0.5, 1.0];
const CELL_ALIVE: [f32; 4] = [0.0, 1.0, 0.0, 1.0];
const CELL_DEAD: [f32; 4] = [0.25, 0.25, 0.25, 1.0];
</code></pre>

<p>I suggest that you define a type alias for colors:</p>

<pre><code>type Color = [f32; 4];

const BACKGROUND_COLOR: Color = [0.5, 0.5, 0.5, 1.0];
const CELL_ALIVE: Color = [0.0, 1.0, 0.0, 1.0];
const CELL_DEAD: Color = [0.25, 0.25, 0.25, 1.0];
</code></pre>

<p>It doesn't make a big difference, but it makes it a bit clearer when reading this code what these values are.</p>

<pre><code>const CELL_SIZE: i32 = 1;
</code></pre>

<p>I think this should be an f64. Its the size of a cell in the OpenGL drawing context which is in f64, not i32. </p>

<pre><code>#[derive(Clone)]
struct Cell {
    alive: bool,
}

impl Cell {
    fn set(&amp;mut self, alive: bool) {
        self.alive = alive;
    }
}
</code></pre>

<p>Instead of a Cell containing a lone bool, it would make more sense to have an enum.</p>

<pre><code>enum Cell {
   Living,
   Dead
}
</code></pre>

<p>In Rust, you don't want to think in OO terms where you call on methods on objects to manipulate them. Instead, you want data structures that represent state. That's why it makes more sense to have a Living/Dead enum rather than a struct which you can call.</p>

<pre><code>struct CellWorld {
    rows: i32,
    columns: i32,
    map: Box&lt;Vec&lt;Vec&lt;Cell&gt;&gt;&gt;,
}
</code></pre>

<p>I might use <code>usize</code> instead of <code>i32</code> since the sizes correspond to the length of the <code>Vec</code>s. Also there doesn't seem to be any reason to put your Vec into a Box.</p>

<pre><code>impl CellWorld {
    fn new(window_height: f64, window_width: f64) -&gt; CellWorld {
        let n_rows = (window_height as i32) / CELL_SIZE;
        let n_cols = (window_width as i32) / CELL_SIZE;

        CellWorld {
            rows: n_rows,
            columns: n_cols,
            map: Box::new(Vec::new()),
        }
    }
}
</code></pre>

<p>It is odd that you don't fill in the map here. Typically, we'd have the <code>new</code> function CellWorld produce a fully ready <code>CellWorld</code>. Right now that returned <code>CellWorld</code> is in an inconsistent state, its width/height and actually cells aren't consistent.</p>

<pre><code>impl PistonApp {

    fn init(&amp;mut self) {
        let mut rand_life = thread_rng();
</code></pre>

<p>I wouldn't put <code>life</code> in the name, just because its a general random number generator, its not really life specific.</p>

<pre><code>        for row in 0..self.world.rows {
            let rand_num: i32 = rand_life.gen();
            let mut cell_row = vec![Cell { alive: row / rand_num == rand_life.gen() }; self.world.columns as usize];
</code></pre>

<p>I don't what this is trying to be... but I'm pretty sure this isn't it.</p>

<p><code>vec![]</code> doesn't re-evaluate the expression for each element created, it <code>clone()</code>s the one element repeatedly. So this won't produce different values for the different cells. </p>

<p>I'm not sure what you are trying to with generating the two different random values and then taking a division. As it works out, a random i32 is almost certainly much bigger than your row index so <code>row / rand_num</code> is almost always zero. And its is highly unlikely that the second call to <code>gen()</code> will also produce zero. So this seems like it will just always produce false.</p>

<pre><code>            for cell in 0..self.world.columns {
                cell_row[cell as usize].set(cell % 2 == 0);
            }
</code></pre>

<p>One way or the other, you then throw away everything you did above to set every other cell to true.</p>

<pre><code>            self.world.map.push(cell_row);
        }
    }
</code></pre>

<p>I'd use iterators to actually create this, something like:</p>

<pre><code>self.world.map = (0..self.world.rows).map(|_| 
   (0..self.world.columns).map(|_| 
       rand_life.rng()
   ).collect()
).collect();
</code></pre>

<p>That will create a randomly filled up grid.</p>

<pre><code>    fn render(&amp;mut self, render_args: &amp;RenderArgs) {
        let cell_map = &amp;self.world.map;
        let n_rows = self.world.rows;
        let n_columns = self.world.columns;

        self.gl_context.draw(render_args.viewport(), |c, gl| {
            clear(BACKGROUND_COLOR, gl);

            for row in 0..n_rows {
                let cell_row = &amp;cell_map[row as usize];

                let row_offset = row * CELL_SIZE;

                for col in 0..n_columns {
                    let cell = &amp;cell_row[col as usize];
</code></pre>

<p>Use iterators</p>

<pre><code>for (row_index, row) in cell_map.iter().enumerate() {
    for (col_index, col) in row.iter().enumerate() {
</code></pre>

<p>That simplifies access to the index alongside the values.</p>

<pre><code>    fn simulate(&amp;mut self) {
        let n_rows = self.world.rows;
        let n_cols = self.world.columns;

        for row in 0..n_rows {
            for col in 0..n_cols {
                self.update_cell(row as usize, col as usize);
            }
        }
    }
</code></pre>

<p>Your implementation seems subtlety incorrect to me. In the GoL, all cells update at once. That is, the state of each cell at time T + 1 depends on the state of all cells at time T. But since you update cell by cell, some cells will already have been updated when you are updating a cell. In order to GoL right, you need to two copies of the map, the previous state and the new state being computed.</p>

<pre><code>    fn update_cell(&amp;mut self, row: usize, col: usize) {
        let world = &amp;mut self.world;
        let world_map = &amp;mut world.map;
        let mut alive_neighbors = 0;

        let has_left_neighbors = if col == 0 { false } else { col - 1 &gt; 0 };
        let left_col = if has_left_neighbors { col - 1 } else { 0 };
        let has_right_neighbors = col + 1 &lt; world.columns as usize;
        let right_col = if has_right_neighbors { col + 1 } else { 0 };
        let has_top_neighbors = if row == 0 { false } else { row - 1 &gt; 0 };
        let top_row = if has_top_neighbors { row - 1 } else { 0 };
        let has_btm_neighbors = row + 1 &lt; world.rows as usize;
        let btm_row = if has_btm_neighbors { row + 1 } else { 0 };

        if has_left_neighbors {
            if world_map[row][left_col].alive {
                alive_neighbors += 1;
            }

            if has_top_neighbors &amp;&amp; world_map[top_row][left_col].alive {
                alive_neighbors += 1;
            }

            if has_btm_neighbors &amp;&amp; world_map[btm_row][left_col].alive {
                alive_neighbors += 1;
            }
        }

        if has_right_neighbors {
            if world_map[row][right_col].alive {
                alive_neighbors += 1;
            }

            if has_top_neighbors &amp;&amp; world_map[top_row][right_col].alive {
                alive_neighbors += 1;
            }

            if has_btm_neighbors &amp;&amp; world_map[btm_row][right_col].alive {
                alive_neighbors += 1;
            }
        }

        if has_top_neighbors {
            if world_map[top_row][col].alive {
                alive_neighbors += 1;
            }
        }

        if has_btm_neighbors {
            if world_map[btm_row][col].alive {
                alive_neighbors += 1;
            }
        }
</code></pre>

<p>So... that was complicated, here's what I'd do:</p>

<pre><code>   let mut alive_neighbors = 0;
   // by taking a slice of the vec we get rust to take care of the 
   // bounds checking.
   for row in world_map[row-1:row+2] {
          for col in row[col - 1:col + 2] {
             if col.alive {
                 alive_neighbors += 1;
             }
          }
       }
   }
   // the above will could the cell itself, so balance that.
   if world_map[row][col].alive {
      alive_neighbors -= 1;
   }
</code></pre>

<p>That, I think, is easier to follow.</p>

<pre><code>        if alive_neighbors &lt; 2 || alive_neighbors &gt; 3 {
            world_map[row][col].set(false);
        }

        if alive_neighbors == 2 || alive_neighbors == 3 || world_map[row][col].alive == false &amp;&amp; alive_neighbors == 3 {
            world_map[row][col].set(true);
        }
</code></pre>

<p>I'd do something like this:</p>

<pre><code>world_map[row][col].set(
   if world_map[row][col] {
      alive_neighbors &gt;= 2 &amp;&amp; alive_neighbors &lt;= 3
   } else {
      alive_neighbors == 3
   });
</code></pre>

<p>Firstly, this always set the value. This just makes the logic a bit more straightforward, since you don't have to figure out whether or not it changes. Also, by handling the living and dead cell cases seperately, we get a simpler presentation of the rule.</p>
    </div>