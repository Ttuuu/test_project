<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use <code>delete[]</code></h2>

<p>You are allocating an array of objects with <code>new[]</code>, but attempting to delete them with <code>delete</code>, which results in undefined behavior. You should delete the array with <code>delete[]</code> to ensure that your code functions properly. Do this in both <code>Vector&lt;T&gt;::~Vector()</code> and <code>Vector&lt;T&gt;::insert()</code>.</p>

<h2>Implement your <code>Iterator</code>s as pointers under-the-hood</h2>

<p>Since your data is stored sequentially, it makes sense to implement your <code>Iterator</code> members as a simple <code>T const *</code> rather than a pointer to the parent <code>Vector&lt;T&gt;</code> and an index. This cuts down the size of your <code>Iterator</code>, and avoids the awkward <code>m_nIndex = -1</code> state. You can replace the <code>Iterator</code>'s internals in this way without changing its interface.</p>

<p>(As a side note, the range-based <code>for</code>-loop would still function if you completely removed the <code>Iterator</code> class and just returned <code>T const *</code> from <code>Vector&lt;T&gt;::begin()</code> and <code>Vector&lt;T&gt;::end()</code>. I know this is not what you asked, but thought you might like to know! <a href="http://cpp.sh/8fzte" rel="noreferrer">Example</a>)</p>

<h2>Construct member variables in the constructor initializer list</h2>

<p>You are already using a member initializer list for your <code>Iterator</code> class, so you should do the same for <code>Vector&lt;T&gt;</code></p>

<pre><code>template &lt;typename T&gt;
Vector&lt;T&gt;::Vector(int nCapacity)
    : m_nCapacity(nCapacity)
    , m_pData(new T[nCapacity])
{
}
</code></pre>

<h2>Use <code>size_t</code> for container size</h2>

<p>A small detail, but using <code>size_t</code> instead of <code>int</code> for <code>Vector&lt;T&gt;::size</code> more closely resembles the standard library's containers. It is a very standard way of representing sizes.</p>
    </div>