<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By utilizing the power of pattern matching, your (faulty) algorithm can be expressed in a much more succinct manner that is also (IMHO) easier to read and comprehend.</p>

<pre><code>def countBinarySubstrings(s: String): Int =
  s.foldLeft((0, 0, 0)) {
    case ((zeros,0   ,ttl), '0') =&gt; (zeros+1, 0     , ttl)
    case ((0    ,ones,ttl), '1') =&gt; (0      , ones+1, ttl)
    case ((zeros,ones,ttl), '0') =&gt; (zeros+1, ones-1, ttl+1)
    case ((zeros,ones,ttl), '1') =&gt; (zeros-1, ones+1, ttl+1)
    case _ =&gt; throw new Error("bad string")
  }._3
</code></pre>

<hr>

<p>Here's a reworking of your basic algorithm. It fixes the bug (I believe) by updating the running total only at the transitions from 0-to-1 or 1-to-0.</p>

<pre><code>def countBinarySubstrings(s: String): Int = {
  val (runningTotal, countA, countB, _) = s.foldLeft((0, 0, 0, '_')) {
    case ((rt, otherCnt, thisCnt, prevC), currC) =&gt;
      if (prevC == currC)  //same Char
        (rt, otherCnt, thisCnt + 1, currC)  //increment this-Char count
      else  //transition
        //update running total
        //move this-count to other-count position
        //reset this-count
        (rt + (otherCnt min thisCnt), thisCnt, 1, currC)
  }
  runningTotal + (countA min countB) //final update
}
</code></pre>
    </div>