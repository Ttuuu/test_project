<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I encourage the use of interfaces, but this is not an interface. In an interface all the methods are public, and your code has private methods (which I'm not sure can actually compile given that they're <code>private</code>). The ideas of interfaces is that you only define the communication between objects, and don't define anything about the implementation details. What you have here is intended to be an abstract base class (assuming you change every private method to protected).</p>

<p>In most progress-bar interfaces I saw there weren't that many methods. Usually what you use is something like <code>start(...)</code>, <code>setProgress(double ...)</code> and <code>stop()</code>, and pass whatever arguments you need in the method call. It's simpler to pass all the arguments that are needed in one call instead of knowing that you actually have to call <code>setSomething</code> and <code>setSomethingElse</code> before calling <code>start()</code>. </p>

<p>Also keep in mind that one challenge of progress-bars are that they're usually a singleton (whether or not they follow the design pattern) so you need to think about how to handle many different objects accessing the same progress-bar. When you hold state, you're gonna have a lot of carry-on state from previous call and have unexpected behavior unless of course you complicate your progress-bar calls a little more by relying on clients to use some <code>clear</code> method.</p>

<p>I would look at your class from a <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a> perspective. I don't think you should have one interface for progress-bars and for sending emails whenever a progress of something reaches some point. I don't think it's gonna be the progress-bar responsibility in most cases. In most cases you have some object performing some operation and updating the progress in the progress bar (completion% and message if needed), so that class would be the one sending emails. It would be much easier if you can subscribe to some event on the progress-bar to handle any progress changes. Events are a great tool when you want to be able to respond to something without adding responsibility to classes.</p>
    </div>