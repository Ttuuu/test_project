<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you determine the valid types to handle in code as it seems from your method, I would do it more rigidly than by using Reflection. There is no meaning in determining the byte length by "hand" and then afterwards call a method by Reflection relying on consistency in names (not to mention possible types with the same byte length).</p>

<p>Why not try something plain and simple like:</p>

<pre><code>private void ConvertArray(byte[] response, ref object[] items)
{
  using (MemoryStream stream = new MemoryStream(response))
  using (BinaryReader reader = new BinaryReader(stream))
  {
    int index = 0;
    for (int i = 0; i &lt; items.Length; i++)
    {
      var itemType = items[i].GetType();
      int itemSize = 0;

      switch (itemType.Name)
      {
        case nameof(Byte):
          items[i] = reader.ReadByte();
          itemSize = sizeof(byte);
          break;
        case nameof(UInt16):
          items[i] = reader.ReadUInt16();
          itemSize = sizeof(ushort);
          break;
        case nameof(UInt32):
          items[i] = reader.ReadUInt32();
          itemSize = sizeof(uint);
          break;
      }

      index += itemSize;
    }
  }
}
</code></pre>

<hr>

<p>As dfhwze comments using the type code for primitives is even more stringent:</p>

<pre><code>private void ConvertArray(byte[] response, ref object[] items)
{
  using (MemoryStream stream = new MemoryStream(response))
  using (BinaryReader reader = new BinaryReader(stream))
  {
    for (int i = 0; i &lt; items.Length; i++)
    {
      var itemType = items[i].GetType();

      switch (Type.GetTypeCode(itemType))
      {
        case TypeCode.Byte:
          items[i] = reader.ReadByte();
          break;
        case TypeCode.UInt16:
          items[i] = reader.ReadUInt16();
          break;
        case TypeCode.UInt32:
          items[i] = reader.ReadUInt32();
          break;
      }
    }
  }
}
</code></pre>

<p>As sebpinski points out in the comment the <code>index</code> and <code>itemSize</code> is unecessary in this approach.</p>
    </div>