<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without more information <em>what</em>, when asked for a reason for two "time limit exceeded" results, motivated your teacher to mention the possibility to "get" a faster <em>minHeap</em>, you deprive yourself of getting more useful answers. See <a href="https://codereview.meta.stackexchange.com/q/2436">How to get the best value out of Code Review - Asking Questions</a><br>
First and foremost, just <em>what</em> is the task timed?<br>
I can't see anything seriously detrimental in your implementation:<br>
I guess a bigger task than, say, handle a batch of <em>insertions</em> and <em>min extractions</em> gets timed, in need of an algorithmic improvement more likely than any tuning.</p>

<hr>

<p>That said, there are principles like <em>YAGNI</em>, <em>KISS</em> and <em>DRY</em>.<br>
Let me start with the bright side of <em>YAGNI</em> - You <em>Are</em> Gonna Need It:</p>

<ul>
<li>Documentation. The type that does <em>not</em> get separated from the code:<br>
<a href="https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#styleguide" rel="nofollow noreferrer">Documentation <em>in</em> the code</a></li>
</ul>

<p>Otherwise, the code presented looks a pretty decent beginner's stab at coding a heap.<br>
Catch:  </p>

<ul>
<li>There are omissions from the <em>delete</em>s:<br>
• <em>not relevant when using an array of primitives as presented in the question</em>:<br>
 Failing to set the reference at the index deallocated to something innocent (as <code>null</code>) does not immediately impede garbage collection, as it gets copied to a lower index. Enter the next <em>delete</em>…

<ul>
<li>bug in <code>delete(int d)</code>:<br>
It replaces element <code>atD</code> with <code>formerLast</code> and restores the heap relations in <code>formerLast</code> and its descendants.<br>
But what about its ancestors?<br>
Not to worry <em>if</em><br>
1) it ends up at an index abode <code>d</code> <em>or</em><br>
a) it was a descendant of <code>atD</code>: none of those has higher priority<br>
There are many ways to handle the situation -<br>
I'd prefer just dropping <code>delete(int d)</code> over just calling <code>bubbleUp()</code> or some elaborate handling trying to keep the number of comparisons low.</li>
</ul></li>
</ul>

<p>Room for improvement:</p>

<ul>
<li>Part of <em>Don't Repeat Yourself</em> is using interfaces:<br>
Define an <code>interface</code> for an, um, <code>PriorityCollection&lt;E&gt; extends Collection&lt;E&gt;</code>.<br>
One advantage is that implementations don't get to reduce visibility of interface methods like <code>isEmpty()</code>.<br>
Another is <em>inheriting</em> documentation, too.<br>
• have an <code>E extractTop()</code> return the top priority element it just removed from the Collection<br>
• nowadays, Java <code>interface</code>s can include <em>unit test code</em>, too.  </li>
<li><em>Keep It Short&amp;Simple</em> meets <em>You Ain't Gonna Need It</em> in fixing arity at 2:<br>
• simpler/shorter code<br>
• fixes a naming issue in <code>d</code> (maximal <em>d</em>egree?)<br>
• maximises information in relative position of keys<br>
• doesn't show in the interface, anyway  </li>
</ul>

<hr>

<p>If and when competent (→ framework) measurements suggest the performance being a problem,<br>
• consider returning to an array of <em>primitives</em>.<br>
• <em>If</em> the cost of comparing elements is high, change tactics in <em>bubbleDown</em>(sink?): find the path along which to sink/bubble down, and look for elements that should stay in place starting from the bottom: this may almost half the number of comparisons.<br>
• an <code>E replaceTop(E replacement)</code> may save considerable work<br>
  it may be useful to additionally have the similar <code>E addAndExtractTop(E addition)</code></p>
    </div>