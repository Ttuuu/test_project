<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I just whipped this algorithm together, so I have no idea how good this is.  I fear that it will cause an overflow exception if used on <em>very</em> long strings.</p>

<p>Key concepts of this algorithm:</p>

<ul>
<li>When encountering a character for the first time, the maximum value is added to the un-normalized entropy total.  The "maximum value" is the length of the string.</li>
<li>If a character is encountered again, then we count the number of positions between this occurrence and the last occurrence, then we subtract the total number of times this character has appeared in the string.  We then add that value to the un-normalized entropy total.</li>
<li><p>Once the final un-normalized entropy total has been calculated, it is divided by the length of the string in order to "normalize" it.</p>

<pre><code>public static int Entropy(this string s)
{
    int entropy = 0;

    var mapOfIndexByChar = new Dictionary&lt;char, CharEntropyInfo&gt;();

    int index = 0;
    foreach (char c in s)
    {
        CharEntropyInfo charEntropyInfo;
        if (mapOfIndexByChar.TryGetValue(c, out charEntropyInfo))
        {
            // If this character has occurred previously, then only add the number of characters from
            // the last occurrence to this occurrence, and subtract the number of previous occurrences.
            // Many repeated characters can actually result in the entropy total being negative.
            entropy += ((index - charEntropyInfo.LastIndex) - charEntropyInfo.Occurrences);

            // update the last index and number of occurrences of this character
            mapOfIndexByChar[c] = new CharEntropyInfo(index, charEntropyInfo.Occurrences + 1);
        }
        else
        {
            // each newly found character adds the maximum possible value to the entropy total
            entropy += s.Length;

            // record the first index of this character
            mapOfIndexByChar.Add(c, new CharEntropyInfo(index, 1));
        }
    }

    // divide the entropy total by the length of the string to "normalize" the result
    return entropy / s.Length;
}

struct CharEntropyInfo
{
    int _LastIndex;
    int _Occurrences;

    public int LastIndex
    {
        get { return _LastIndex; }
    }
    public int Occurrences
    {
        get { return _Occurrences; }
    }

    public CharEntropyInfo(int lastIndex, int occurrences)
    {
        _LastIndex = lastIndex;
        _Occurrences = occurrences;
    }
}
</code></pre></li>
</ul>

<p>A quick test:</p>

<pre><code>        var inputs = new[]{
            "Hi there!",
            "Hi there, bob!",
            "ababababababababababababab",
            @"We're calculating entropy of a string a few places in Stack Overflow as a signifier of low quality.

I whipped up this simple method which counts unique characters in a string, but it is quite literally the first thing that popped into my head. It's the ""dumbest thing that works""."
        };

        foreach (string s in inputs)
        {
            System.Console.WriteLine("{1}: \"{0}\"", s, s.Entropy());
        }
</code></pre>

<p>Resulting entropy values:</p>

<ul>
<li>7: "Hi there!"</li>
<li>10: "Hi there, bob!"</li>
<li>-4: "ababababababababababababab"</li>
<li>25: "We're calculating entropy of a string ..."</li>
</ul>
    </div>