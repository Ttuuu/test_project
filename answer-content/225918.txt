<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Threading Design</h2>

<p>Your implementation has a very intrusive lock for all read and write operations, using the <code>SemaphoreSlim</code> with max concurrency 1. </p>

<blockquote>
<pre><code>try
{
    await _semaphoreSlim.WaitAsync()// &lt;- both read/write operations acquire single mutex

    return await Task.Run(async () =&gt;
    {
        return await func(_dictionary, keyValuePair);
    });
}
finally
{
    _semaphoreSlim.Release();
}
</code></pre>
</blockquote>

<p><code>CallSynchronizedAsync</code> is hence thread-safe to the extend you introduce possible <em>fairness</em> issues. In .NET, multiple threads awaiting a lock to get signaled are not notified in a fair way, meaning thread B may get the lock before A even if A asked to acquire the lock before B.</p>

<p><code>ConcurrentDictionary</code> mitigates the risk on unfair thread signaling by using the following behavior:</p>

<ul>
<li>Read operations are volatile/atomic. No locks are used (<a href="https://referencesource.microsoft.com/#mscorlib/system/Collections/Concurrent/ConcurrentDictionary.cs,4d0f4ac22dbeaf08" rel="noreferrer">Source: TryGetValue</a>).</li>
<li>Write operations are optimized for fast access and minimum lock timespans (<a href="https://referencesource.microsoft.com/#mscorlib/system/Collections/Concurrent/ConcurrentDictionary.cs,745f1b5cae223ff4" rel="noreferrer">Source: TryAddInternal</a>).</li>
</ul>

<p>Perhaps you should wrap a <code>ConcurrentDictionary</code> with <code>async/await Task.Run</code> or <code>Task.FromResult</code> functionality to take advantage of the built-in locking mechanism.</p>

<hr>

<h2>API Design</h2>

<p>After discussing a bit with you in the comments, it became apparent you would like normal dictionary method signatures. This should not be a problem. Let's say you have a private field of type concurrent dictionary <code>_dictionary</code>. One option is to call the code synchronously and return <code>Task.CompletedTask</code> to make it fit the async/await pattern.</p>

<pre><code>public async Task AddAsync(TKey key, TValue value)
{
    _dictionary.TryAdd(key, value);
    return Task.CompletedTask;
}
</code></pre>

<p>You could decide to also provide async/await-aware methods with concurrent dictionary signatures:</p>

<pre><code>public async Task&lt;bool&gt; TryAddAsync(TKey key, TValue value)
{
    return Task.FromResult(_dictionary.TryAdd(key, value));
}
</code></pre>
    </div>