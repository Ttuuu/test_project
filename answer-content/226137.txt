<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Simplifications for the pattern usage you currently have:</p>

<p>The pattern in <code>parseMessage</code> can be extended so you don't need to explicitly use <code>dropWords</code>. That only works if you change the signature to something based on words instead of the whole line, though.</p>

<p>That is the first thing you may want to adjust. As it now stands you're doing a lot of work with "splitting and reassembling" strings.<br>
In the spirit of avoiding unnecessary work, you should only do that once.</p>

<p>Now assuming your <code>parseMessage</code> were to work off a "splitted" string, you could instead have:</p>

<pre class="lang-hs prettyprint-override"><code>parseMessage :: [String] -&gt; L.LogMessage
parseMessage "E":e:t:m = L.LogMessage (L.Error (read e)) (read t) (unwords m)
parseMessage "W":t:m = L.LogMessage L.Warning (read t) (unwords m)
parseMessage "I":t:m = L.LogMessage L.Info (read t) (unwords m)
parseMessage p = L.Unknown (unwords p)
</code></pre>

<p>Note that <code>unwords</code> already correctly handles the case of <code>p = []</code> </p>

<p>This allows you to completely drop the helpers <code>dropWords</code> and <code>wordsToNum</code>.</p>

<hr>

<p>Additional minor simplifications, spoilers hide the full solution ;)</p>

<ul>
<li><p><code>parse</code> could be written as a function composition to avoid specifying the parameter <code>s</code>. </p>

<blockquote class="spoiler">
  <p> <code>parse = (map parseMessage) . lines</code></p>
</blockquote></li>
<li><p><code>build</code> is commonly known in functional programming as a <code>fold</code>. It collapses a list into a single element.<br>
In this case, the fold is "right-associative", so the whole thing can be reformulated with <code>rfold</code>:</p>

<blockquote class="spoiler">
  <p> <code>build = rfold insert Leaf</code></p>
</blockquote>

<p>Here's a bit of an explanation why this works:</p>

<blockquote class="spoiler">
  <p> Let's write this a bit more ... verbosely: <code>build ms = rfold insert Leaf ms</code>. What basically happens here is that you give a neutral or starter element (<code>Leaf</code>) and <code>insert</code> is repeatedly called in the following way:<br>
 
 <code>(m1 `insert` (m2 `insert` (... (mn `insert` Leaf))))</code></p>
</blockquote></li>
</ul>

<hr>

<p>Note  that there is a huge bug in how <code>insert</code> works. As it stands, <code>insert</code> will only ever return a tree with a single <code>Node</code> in it. To understand why you need to reevaluate what <code>insert</code> does and how mutability works in haskell (hint: it doesn't).</p>

<p>Sidenote here: you can simplify <code>insert</code> a bit with an <code>if .. then .. else ..</code>. You should call insert a few times and see what happens with the LogMessage that has the timestamp <code>t2</code>.</p>

<hr>

<p>If you weren't probably forced to use a tree for sorting <code>sort</code> would be much easier to write in terms of <code>Data.List.sortBy</code>.</p>

<p>Similarly, <code>filterList</code> also already exists in the form of <code>filter</code>:</p>

<blockquote class="spoiler">
  <p> <code>filterList = filter (\(L.LogMessage (Error e) _ _) -&gt; e &gt;= 50)</code>
 Note that this particular piece is untested</p>
</blockquote>

<p>An additional simplification is noticing that <code>toString</code> is just <code>map show</code></p>
    </div>