<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Formatting &amp; naming</h1>

<ul>
<li>According to PEP 8, <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="nofollow noreferrer">all lines should be &lt;= 79 characters</a>.</li>
<li><code>userchoice</code> -&gt; <code>user_choice</code> (given that you have <code>opponent_choice</code>)</li>
<li><code>continue_prompt</code> -&gt; <code>user_choice</code> (in the context of where it's being used, it's actually the user's choice/response to the continue prompt, not the continue prompt itself)</li>
</ul>

<h1>Documentation</h1>

<p>The docstring for <code>random_choice</code> could be improved. Instead of repeating verbatim what is happening in the code (implementation), prefer documenting it in a way so the reader doesn't need to read the implementation to know what the method will do:</p>

<pre class="lang-py prettyprint-override"><code>def random_choice(self) -&gt; str:
    """
    Randomly chooses rock, paper, or scissors.
    :return: 'rock', 'paper', or 'scissors'
    """
</code></pre>

<h1>Clean/normalize user input</h1>

<p>It's good that you are already calling <code>lower()</code> on the user input, but you should also be calling <code>strip()</code> on it as well. Otherwise, a user choice with leading or trailing whitespace is treated as invalid input (e.g. ' rock' or 'rock ', ' y' or 'y ').</p>

<h1>Efficiency</h1>

<p>Each call to <code>random_choice</code> calls <code>list()</code> on the <code>self.options</code> dictionary, which is re-creating the same list of choices on each call. Consider only creating the list once in <code>__init__</code>:</p>

<pre class="lang-py prettyprint-override"><code>def __init__(self):
    ...
    self.options = {'rock': 0, 'paper': 1, 'scissors': 2}
    self.choices = list(self.options.keys())
</code></pre>

<p>Then we can use it in <code>random_choice</code>:</p>

<pre class="lang-py prettyprint-override"><code>def random_choice(self):
    return random.choice(self.choices)
</code></pre>

<p>And when validating user input for choosing 'rock', 'paper', or 'scissors':</p>

<pre class="lang-py prettyprint-override"><code>if user_choice in self.choices:
    ...
</code></pre>

<h1>Class structure</h1>

<p>Since your class is already handling interactive user input, I think the code where you prompt the user to play another round should live inside the class. Then anyone who wants to use your class to launch an interactive multi-round game of rock-paper-scissors need only do <code>game.run_game()</code>.</p>

<p>For the same reason, the call to <code>print_score()</code> should be within the game coordination logic inside your class; a client of your class shouldn't need to call it directly.</p>

<p>I think it would be easier to read if you extracted the interactive prompting and retrieval of user input into their own methods, e.g.</p>

<pre class="lang-py prettyprint-override"><code>def player_choice(self) -&gt; str:
    """
    Prompts player for choice of rock, paper, or scissors.
    :return: 'rock', 'paper', or 'scissors'
    """
    while True:
        user_choice = input("Choices are 'rock', 'paper', or 'scissors'.\n"
                            "Which do you choose? ").lower().strip()
        if user_choice in self.choices:
            return user_choice

        print("Invalid input, try again!")
</code></pre>

<pre class="lang-py prettyprint-override"><code>def player_wants_to_play_again(self) -&gt; bool:
    """
    Prompts player to play again.
    :return: True if the player wants to play again.
    """
    prompt = "\nDo you wish to play again? (y/n): "
    valid_choices = {'y', 'n'}
    while True:
        user_choice = input(prompt).lower().strip()
        if user_choice in valid_choices:
            return user_choice == 'y'

        print("Invalid input!")
</code></pre>

<p>Then your main game methods could look something like this:</p>

<pre class="lang-py prettyprint-override"><code>def run_one_round(self):
    user_choice = self.player_choice()
    opponent_choice = self.random_choice()
    print(f"You've picked {user_choice}, and I picked {opponent_choice}.")
    self.check_win(self.options[user_choice],
                   self.options[opponent_choice])
    self.print_score()

def run_game(self):
    while True:
        self.run_one_round()
        if not self.player_wants_to_play_again():
            print("You are weak!")
            break
</code></pre>

<p>By structuring things like this, we no longer need to call <code>exit()</code> (which exits the Python interpreter) to break out of the main game loop. Note that it's generally considered bad form to use <code>exit()</code> for handling non-exceptional scenarios in your program flow, i.e. if it's possible to allow your program to terminate normally without having to resort to <code>exit()</code>, you should do that.</p>

<h1>Bonus: Improving clarity with a custom <code>Enum</code></h1>

<p>In the original program, the implicit contract is that the exact strings <code>rock</code>, <code>paper</code>, and <code>scissors</code> represent the choices each player can make, and are thus special. One can observe this by looking at the dictionary <code>self.options</code>, which has the above strings mapped to integers so we can compare them later on using modular arithmetic in <code>check_win</code>. This sounds like a case where having a custom <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum.Enum</code></a> type might help make things more explicit.</p>

<p>Let's define an <code>Enum</code> called <code>Choice</code> which can take one of three values: <code>ROCK</code>, <code>PAPER</code>, or <code>SCISSORS</code>. What's cool is that we can have <code>Choice</code> be responsible for all of the following:</p>

<ul>
<li>conversion from <code>str</code> to <code>Choice</code> (if the provided string cannot be converted, throw an exception)</li>
<li>define a canonical string representation for each <code>Choice</code>, e.g. "rock", "paper", and "scissors" (conversion from <code>Choice</code> to <code>str</code>)</li>
<li>make <code>Choice</code>s comparable, such that if you have two <code>Choice</code>s X and Y, you can compare them to determine which one would win</li>
</ul>

<p>The code:</p>

<pre class="lang-py prettyprint-override"><code>from enum import Enum


class Choice(Enum):
    ROCK = 0
    PAPER = 1
    SCISSORS = 2

    @classmethod
    def from_str(cls, s: str) -&gt; "Choice":
        try:
            return {
                "r": cls.ROCK,
                "rock": cls.ROCK,
                "p": cls.PAPER,
                "paper": cls.PAPER,
                "s": cls.SCISSORS,
                "scissors": cls.SCISSORS
            }[s.strip().lower()]
        except KeyError:
            raise ValueError(f"{s!r} is not a valid {cls.__name__}")

    def __str__(self) -&gt; str:
        return self.name.lower()

    def beats(self, other: "Choice") -&gt; bool:
        return (self.value - other.value) % 3 == 1
</code></pre>

<p>Interactive session showing it in action:</p>

<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; list(Choice)
[&lt;Choice.ROCK: 0&gt;, &lt;Choice.PAPER: 1&gt;, &lt;Choice.SCISSORS: 2&gt;]

&gt;&gt;&gt; Choice.from_str('rock')
&lt;Choice.ROCK: 0&gt;

&gt;&gt;&gt; Choice.from_str('paper')
&lt;Choice.PAPER: 1&gt;

&gt;&gt;&gt; Choice.from_str('scissors')
&lt;Choice.SCISSORS: 2&gt;

&gt;&gt;&gt; print(Choice.ROCK)
rock

&gt;&gt;&gt; print(Choice.PAPER)
paper

&gt;&gt;&gt; print(Choice.SCISSORS)
scissors

&gt;&gt;&gt; Choice.ROCK == Choice.ROCK
True

&gt;&gt;&gt; Choice.ROCK.beats(Choice.SCISSORS)
True

&gt;&gt;&gt; Choice.PAPER.beats(Choice.ROCK)
True

&gt;&gt;&gt; Choice.SCISSORS.beats(Choice.PAPER)
True
</code></pre>

<p>Let's use it in <code>RockPaperScissors</code> to see how it looks. Here's <code>__init__</code>:</p>

<pre class="lang-py prettyprint-override"><code>def __init__(self):
    self.wins = 0
    self.losses = 0
    self.ties = 0
    self.choices = list(Choice)
</code></pre>

<p>Now <code>random_choice</code> and <code>player_choice</code> both return a <code>Choice</code> instead of a <code>str</code>, making the type signatures of these methods much more expressive:</p>

<pre class="lang-py prettyprint-override"><code>def random_choice(self) -&gt; Choice:
    return random.choice(self.choices)

def player_choice(self) -&gt; Choice:
    prompt = ("\nChoices are 'rock', 'paper', or 'scissors'.\n"
              "Which do you choose? ")
    while True:
        try:
            return Choice.from_str(input(prompt))
        except ValueError:
            print("Invalid input, try again!")
</code></pre>

<p>When we were returning strings from the above two methods, it was necessary to clarify in the documentation that only one of three strings would be returned: 'rock', 'paper', or 'scissors'. With <code>Choice</code>, we no longer need to do that since all of that information is explicitly laid out in its definition.</p>

<p>Similarly, <code>check_win</code> now takes in as parameters two <code>Choice</code>s instead of two <code>int</code>s. The code is practically self-documenting at this point:</p>

<pre class="lang-py prettyprint-override"><code>def check_win(self, player_choice: Choice, opponent_choice: Choice):
    if player_choice == opponent_choice:
        self.ties += 1
        print("The game is a tie! You are a most worthy opponent!")
    elif player_choice.beats(opponent_choice):
        self.wins += 1
        print("You win! My honor demands a rematch!")
    else:
        self.losses += 1
        print("Haha, I am victorious! Dare you challenge me again?")
</code></pre>

<p>The full code using <code>Choice</code> can be found <a href="https://gist.github.com/AnotherTermina/7fd7650a4198b49d431e810fec839bef" rel="nofollow noreferrer">in this gist</a>.</p>
    </div>