<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance improvement</h2>

<p>AJNeufeld's answer is correct that you don't need to test both <code>100*101</code> and <code>101*100</code>, you're doing double work. The fix for that is small: don't evaluate any <code>y</code> that is smaller than <code>x</code> (or, in other words: start processing the inner loop when <code>y == x</code> and then increase the <code>y</code> value)</p>

<pre><code>for (int x = 100; x &lt;= 999; x++) {
    for (int y = x; y &lt;= 999; y++) {
</code></pre>

<hr>

<h2>Performance improvement 2</h2>

<p>For every iteration you do, it makes no sense to start checking from the <em>lowest</em> value, since you're only interested in the <em>highest</em> value.</p>

<p>Suppose you're in the inner loop, and for a given <code>x</code> value, you find a match for <code>y=105</code> and also a match for <code>y=305</code>. Since the value of <code>x</code> remains unchanged, you can conclusively state that <code>x*305</code> will always be bigger than <code>x*105</code> and thus <strong>your initial match is meaningless, you only want the biggest match</strong>.</p>

<p>You can massively improve this by starting with the highest <code>y</code> and working your way down. For the sake of simplicity, I'm only changing the <code>y</code> iteration for now:</p>

<pre><code>for (int x = 100; x &lt;= 999; x++) {
    for (int y = 999; y &gt;= x; y--) {
</code></pre>

<p>When you find your first matching <code>y</code> value (e.g. 305), then you know that you don't need to check any lower value for <code>y</code> anymore, as its product (with the same <code>x</code> value) will always be lower than the match you already found.</p>

<p>You can apply the same logic to the <code>x</code> iteration: start from the highest.</p>

<pre><code>for (int x = 999; x &gt;= 100; x--) {
    for (int y = 999; y &gt;= x; y--) {
</code></pre>

<hr>

<h2>Performance improvement 3</h2>

<p>Having this improved approach, there is a massive improvement we can make. First, let's look at which (x,y) values will be checked in the nested loops</p>

<pre><code>  X  |  Y 
===========
 999 | 999
     |
 998 | 999
 998 | 998
     |
 997 | 999
 997 | 998
 997 | 997
     |
 996 | 999
 996 | 998
 996 | 997
 996 | 996
</code></pre>

<p>You can see that the order of operations always tests <strong>the highest available (so far untested) pair of numbers</strong>. That means that when you find a palindrome, that you already know that you have <strong>the highest available product</strong> since bigger numbers always make for a bigger product, and thus you also know that you have <strong>the biggest (possible) palindrome</strong>.</p>

<p>When that biggest possible palindrome is tested and turns out to actually be a palindrome, then you don't need to look for any other palindromes anymore as you know you've found the biggest possible one already.</p>

<pre><code>for (int x = 999; x &gt;= 100; x--) 
{
    for (int y = 999; y &gt;= x; y--) 
    {
        int product = x * y;
        if(palindromeCheck(product))
        {
             std::cout &lt;&lt; highestPalindrome; 
             return;
        }
    }
}
std::cout &lt;&lt; "No palindrome found!?"; 
return;
</code></pre>

<p><em>Note: I used a <code>return</code> here to show that you can exit both loop at this point and there's no need to iterate any further. How you exit these loops can be done in many ways, but I tend to stick to methods that return as its maximizes both readability and ease of implementation.</em></p>

<hr>

<h2>Smaller comments</h2>

<pre><code>int palindromeCheck(int pp) {
</code></pre>

<p>Don't use unreadable parameter names. The amount of characters used in a parameter makes no different to the runtime of the application but it has a massive impact on readability. I assume <code>pp</code> stands for <code>possiblePalindrome</code>, so use the full name instead.</p>

<pre><code>while (it2 - it1 &gt;= 1) {
</code></pre>

<p>I would suggest using <code>while (it1 &lt; it2)</code> as it's more readable (but exactly the same from a technical perspective)</p>

<pre><code>int palindromeCheck(int pp) {
    // ...
        return 0;
    // ...
    return 1;
}
</code></pre>

<p>Don't use integer values for what is clearly intended to be a boolean value. Booleans exist for a reason, use them. </p>

<p>Methods should generally be phrased as imperative commands or questions. <code>checkPalindrome</code> would be better. But given this returns a boolean, <code>isPalindrome</code> would be even better.</p>

<p>This makes using the method a lot simpler and more readable: <code>if(isPalindrome(12321))</code></p>

<pre><code>int newDigit = x * y;
</code></pre>

<p><code>newDigit</code> is a meaningless name that doesn't tell me anything about the value stored inside of it. <code>product</code> is much clearer since this variable contains the product of <code>x</code> and <code>y</code>.</p>
    </div>