<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before I answer your question I should point out that:</p>

<pre><code>list = to_a if Range
</code></pre>

<p>is incorrect. <code>Range</code> is a constant and <code>if Range</code> is always true. You probably means <code>if is_a?(Range)</code> which would mean <code>list</code> was undefined in most cases.</p>

<p>As a first attempt at solving this I would take the case where an operator is provided and have the method call itself with a block something like below.</p>

<pre><code>module Enumerable
  def my_inject(*args)
    unless block_given?
      operator = args.delete_at(-1)
      initial  = args.first   
      return my_inject(initial) { |accumulator, i| accumulator.send(operator, i) }
    end

    list = is_a?(Range) ? to_a : self

    accumulator = args.first 
    list.each { |item| accumulator = accumulator ? yield(accumulator, item) : item
    accumulator
  end

end

</code></pre>

<p>Note: I didn't test this or check its complexity. </p>

<p>This code is also incorrect. There is actually a difference between an initial value that is not provided and one of <code>nil</code>. It is also possible for the block to to return <code>nil</code> which would cause the yield block not to be called for that iteration. The real solution is to check <code>args.length</code> not just <code>args.first</code> but that would increase your complexity.</p>

<p>To do this properly and still pass Rubocop's checks for complexity (as well as its other checks) you will need to break this method up into a few smaller methods.</p>
    </div>