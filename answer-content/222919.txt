<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The API you expose is very weird. Consider the following call:</p>

<pre><code>padString("foo", true, '\t', 5);
</code></pre>

<p>The result being <code>""</code> is not really obvious. </p>

<p>Let's just rewrite this from scratch and then compare it to the existing code.</p>

<hr>

<p>First we're going to have some requirements:</p>

<ul>
<li><code>padString</code> should not make the input smaller.
The code you present correctly deals with that, albeit only comparatively late in the process.</li>
<li><code>padString</code> should expose left and right padding</li>
<li><code>padString</code> should allow customization of the character used for padding.</li>
</ul>

<p>With this we can start pulling changes into your code.</p>

<p>The easiest of these to fulfil (incidentally simplifying your code) is the first requirement:</p>

<pre><code>    if (input.length() &gt;= maxLength) {
        return input;
    }
</code></pre>

<p>Note how I removed the assignment to <code>output</code> and instead directly returned the value to simplify the control stucture.</p>

<p>The next requirement is to enable leftPadding and rightPadding. The cleanest way to deal with that is to create separate methods for that, avoiding the <code>boolean leftPad</code> argument turning the method into a state automaton.</p>

<p>Instead I suggest you expose <code>leftPad</code> and <code>rightPad</code>. If you must keep using the API you present here, (which I highly doubt), you can implement <code>padString</code> as:</p>

<pre><code>return leftPad ? leftPad(input, padChar, maxLength) : rightPad(input, padChar, maxLength);
</code></pre>

<hr>

<p>Now that we have that sorted we want to deal with the actual implementation.</p>

<p>Consider the following simplification:</p>

<pre><code>int padSize = maxLength - input.length();
// generate an "infinite" stream of padChar, limit it to the padSize and collect as String
String padding = Stream.generate(() -&gt; padChar).limit(padSize).collect(Collectors.joining());
StringBuilder builder = new StringBuilder(padding);
if (leftPad) {
    // padding is supposed to be on the left, so append the input
    builder.append(input);
} else {
    // padding is supposed to be on the right, put input before
    builder.insert(0, input);
}
assert (builder.length() == maxLength);
return builder.toString();
</code></pre>

<p>At this point you should notice something that can be further simplified. The StringBuilder is just a glorified string concatenation:</p>

<pre><code>return leftPad ? padding + input : input + padding;
</code></pre>

<p>Note that the padding generation can be slightly simplified using <code>Arrays.fill</code>:</p>

<pre><code>char[] paddingChars = new char[padSize];
Arrays.fill(paddingChars, padChar);
String padding = new String(paddingChars);
</code></pre>

<p>If you want to enforce some more raw performance you could even go so far as to use <code>System.arraycopy</code>, though I have not done any performance testing.
Note also that I'm reasonably sure this does not correctly handle unicode codepoints outside of the Basic Multilingual Plane (BMP)...</p>

<pre><code>    if (input.length() &gt;= maxLength) { return input; }
    char[] result = new char[maxLength];
    int padSize = maxLength - input.length();
    if (leftPad) {
        Arrays.fill(result, 0, padSize, padChar);
        input.getChars(0, input.length(), result, padSize + 1);
    } else {
        input.getChars(0, input.length(), result, 0);
        Arrays.fill(result, input.length(), maxLength - 1, padChar);
    }
    return new String(result);
</code></pre>

<p>Sidenote: the existing code also does not correctly handle unicode codepoints outside of the BMP. I assume you were not aware of that because most people are not. The gist of it is: Some "characters" require more than 16 bits to be uniquely identifiable. These supplementary characters are ... weird around length and a handful of other String functions.</p>
    </div>