<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your approach is quite reasonable.  Separate the data, process them separately, and combine them at the end.  Can we improve the code?  Absolutely.  Can space and time be improved?  Yes, to a point.</p>

<hr>

<p>You open a <code>Scanner</code> at the start, and manually <code>.close()</code> it at the end.  This is error-prone.  If <code>sc.nextInt()</code> raises an exception due to illegal input, this block of code will exit without reaching the <code>.close()</code> statement, and the scanner will be left open.  It is better to use a try-with-resources statement to open <code>Closeable</code> resources, and have the resource closed properly whether or not the block completes normally or raises an exception.</p>

<pre><code>    try(Scanner sc = new Scanner(System.in) {
        // Use the scanner here
    }
    // Scanner is automatically closes when execution exits the above block.
</code></pre>

<hr>

<p>Storage space:</p>

<pre><code>        int size = sc.nextInt();
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
</code></pre>

<p>An <code>ArrayList&lt;&gt;</code> is a fantastic storage container.  You can add items to it, and it will automatically grow as needed.  But it can be inefficient in two ways.</p>

<p>First, although it will grow as required, this regrowth is both time-consuming and memory consuming.  It takes time to allocate the memory, and additional time to copy entries from the original to the new storage area.  If each reallocation doubles the storage space, then during the regrowth at least 50% extra space is allocated; reallocating the storage from 100 to 200 entries temporarily requires 100+200=300 entries of space!  Finally, if only 101 storage locations were actually needed, if not explicitly freed by the application, the extra 99 entries remain allocated.</p>

<p>This is all completely unnecessary.  You've just read in the number of values the <code>ArrayList&lt;&gt;</code> will contain.  Why not use that value to precisely allocate an <code>ArrayList&lt;&gt;</code> of the proper capacity?</p>

<pre><code>        int size = sc.nextInt();
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;(size);
</code></pre>

<p>No reallocations.  No wasted space.  Except...</p>

<p>The second inefficiency comes from storing primitive types in generic containers.  You can't just store an <code>int</code>, the value has to be first "boxed" into an <code>Integer</code> object, which takes both time and additional memory.</p>

<p>Since you are storing <code>int</code> values, and the exact number is known ahead of time, the advantages of the flexibility of <code>ArrayList&lt;&gt;</code> are not needed.  This could be done with an <code>int[]</code> array.</p>

<pre><code>        int size = sc.nextInt();
        int[] list = new int[size];

        for (int i = 0; i &lt; size; i++) {
            list[i] = sc.nextInt();
        }
</code></pre>

<p>Since <code>Integer</code> objects are not being stored, this takes significantly less memory, and creates only one heap object, instead of <code>size+1</code> heap objects.  It is also faster, since access an array doesn't required the overhead of the <code>add()</code> or <code>get()</code> function calls.</p>

<hr>

<p>Similar comments will, of course, apply to the <code>sortListOrder()</code> method.  While you don't know the number of elements which will be stored in either <code>oddList</code> or <code>evenList</code>, you do know the maximum: when all the numbers are odd or even.  You can pre-allocate for this worst case:</p>

<pre><code>    List&lt;Integer&gt; oddList = new ArrayList&lt;&gt;(list.size());
    List&lt;Integer&gt; evenList = new ArrayList&lt;&gt;(list.size());
</code></pre>

<p>While each list may be larger than needed, we know exactly \$O(2N)\$ memory is required.  The advantage here is time; no <code>ArrayList&lt;&gt;</code> resizing is required.</p>

<p>You sort the <code>evenList</code>.  No complaints there.</p>

<p>You sort the <code>oddList</code>.  And then you reverse the list the hard way, by allocating yet another <code>ArrayList&lt;&gt;</code> without pre-sizing it (<code>new ArrayList&lt;&gt;(list.size())</code> since you end up adding the even numbers into it as well), iterating over <code>oddList</code>, and <code>.add()</code>-ing the items one-at-a-time.</p>

<p>Better (as mentioned by @mtj) would be using <code>Collections.reverse(oddList);</code> to reverse <code>oddList</code> in-place without creating another temporary list.</p>

<p>Perhaps even better would be to sort the list using a comparator which produced the list in reverse order:</p>

<pre><code>    Collections.sort(oddList, Collections.reverseOrder());
</code></pre>

<p>Then, the sorted even list is appended to the reverse sorted odd list, using <code>.addAll()</code>.  Finally, the result is returned using <code>return reversedList;</code>, which is odd because the function is supposed to be sorting a list of numbers, not reversing them, so perhaps a better variable name is in order.</p>

<hr>

<p>Can we improve this further?  Certainly.  This can be done in-place, with no additional storage required.</p>

<ul>
<li>partition the list into <code>k</code> odd elements at the start, and <code>N-k</code> even elements at the end.</li>
<li>sort the sublist of odd elements <a href="https://docs.oracle.com/javase/10/docs/api/java/util/List.html#subList-int-int-" rel="nofollow noreferrer"><code>list.subList(0, k)</code></a> using <code>Collections.reverseOrder()</code>.</li>
<li>sort the sublist of even elements <code>list.subList(k, N)</code></li>
</ul>

<p>No joining of the two sorted lists is required, because the lists were never separated.</p>

<p>Alternately, it can be done with a custom sort operation, which sorts:</p>

<ul>
<li>an odd number always "less than" an even number,</li>
<li>if both numbers are even: in ascending order</li>
<li>if both numbers are odd: in descending order</li>
</ul>

<p>Or it can be done using appropriate preprocessing and post processing, to achieve the desired ordering.  For instance, convert all odd numbers to negative numbers, sort in the list in ascending order, and then turn the negative numbers back into positive ones.  For example, done using a <code>Stream</code>:</p>

<pre><code>jshell&gt; IntStream.of(0, 4, 5, 3, 7, 2, 1).
   ...&gt;    map(i -&gt; i%2 != 0 ? -i : i).      // 0, 4, -5, -3, -7, 2, -1
   ...&gt;    sorted().                         // -7, -5, -3, -1, 0, 2, 4
   ...&gt;    map(Math::abs).                   // 7, 5, 3, 1, 0, 2, 4
   ...&gt;    toArray();
$1 ==&gt; int[7] { 7, 5, 3, 1, 0, 2, 4 }
</code></pre>
    </div>