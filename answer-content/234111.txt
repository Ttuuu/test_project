<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The initial approach is over-complicated and has issues in design, namings and relations.</p>

<p><em>Class <strong><code>A</code></strong></em></p>

<p>The <strong><code>get_x</code></strong> method makes no sense for returning <em>public</em> attribute <code>self.x</code> value - that <code>x</code> attribute is accessible directly. Instead, it's better to apply <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>@property</code></a> decorator (provides a "getter" for a read-only attribute with the same name) to "protected" <code>self._x</code> attribute/field.</p>

<p>The <strong><code>a_runner</code></strong> function is coupled/dependent on specific behavior (<code>increment_x</code>, <code>get_x</code>) inherent to class <code>A</code> instance. Thus, it's better and reasonably moved to be  a part of class <strong><code>A</code></strong> scope. Time delay can be flexibly used/adjusted via additional keyword argument with default value <strong><code>delay=5</code></strong></p>

<p>The optimized class <code>A</code> definition:</p>

<pre><code>class A:
    def __init__(self, init_value=5):
        self._x = init_value

    def increment_x(self):
        self._x += 1

    @property
    def x(self):
        return self._x

    def run(self, delay=5):
        while True:
            self.increment_x()
            print(self.x)
            time.sleep(delay)
</code></pre>

<hr>

<p><em>Class <strong><code>B</code></strong></em></p>

<p>Flask API is usually declared at top level as <code>api = Api(app)</code> and it's absolutely normal to add/register resources <code>api.add_resource</code> at the same level.
Class <code>B</code> is redundant as itself. <br>
Class <code>GetAssetPairs</code> is defined as top-level class for custom resource. Using <code>resource_class_kwargs</code> feature is normal and designed for that cases.</p>

<p>The rest part, optimized:</p>

<pre><code>class GetAssetPairs(Resource):
    def __init__(self, a_instance: A):
        self.a_instance = a_instance

    def get(self):
        return {'test': self.a_instance.x}


if __name__ == "__main__":
    a = A()
    bot_th = threading.Thread(target=a.run, daemon=True)
    bot_th.start()

    api.add_resource(GetAssetPairs, '/test', resource_class_kwargs={'a_instance': a})
    app.run(port='5003', debug=False)
</code></pre>
    </div>