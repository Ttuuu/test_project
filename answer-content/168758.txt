<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just the general C++ coding style treatment.</p>

<ol>
<li>Do not use <code>using namespace std;</code>. It can introduce subtle bugs, makes the code harder to read and writing out the <code>std::</code> prefix generally is not going to be to time intensive.</li>
<li><p>Keep your spacing consistent. Compare the following two lines</p>

<pre><code>bool operator&lt; (const Node&amp; other)
vector&lt;int&gt; topKFrequent(vector&lt;int&gt;&amp; nums, int k)
</code></pre>

<p>Why is one method name followed by a space while the other is not? Consistency is important! If you are not sure which spacing variant to choose, you should read a <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md" rel="nofollow noreferrer">C++ style guide</a>. The same applies to control structures, such as </p>

<pre><code>for (auto n : nums )
if ( frequency.find(n) != frequency.end())
for ( auto f : frequency )
</code></pre></li>
<li><p>Use a member initializer list in your constructor. Although it does not matter in a lot of cases, it is a more concise way of expressing member initialization and leaves the constructor's body open for more complex setup tasks. The <code>Node</code> constructor would then look something like this:</p>

<pre><code>Node(int value, unsigned frequency) : value(value), frequency(frequency) { }
</code></pre>

<p>Also, since you default constructor does not actually do anything, you should remove it and the initializers for <code>value</code> and <code>frequency</code> and add default values to the constructor parameters instead, so that <code>Node</code>'s constructor becomes something like</p>

<pre><code>Node(int value = 0, unsigned frequency = 0) : value(value), frequency(frequency) { }
</code></pre>

<p>Keep in mind, however, that this constructor allows implicit conversions from integer types, which you typically want to avoid. This is easily prevented by making the constructor <code>explicit</code>.</p></li>
<li><p>Most people prefer to not write <code>this-&gt;</code> explicitly when not needed.</p></li>
<li><code>const</code>-correctness is important. You should take the parameter <code>nums</code> in <code>topKFrequent</code> by <code>const</code>-reference since you do not actually modify it.</li>
<li>Always use curly brackets with <code>if</code>,<code>else</code>,<code>for</code>,<code>while</code> etc. This prevents a lot of errors from statements not being included in conditionally dependent blocks when they should be. In fact, this kind of error is so common that <a href="https://gcc.gnu.org/gcc-6/changes.html" rel="nofollow noreferrer">gcc even introduced a diagnostic for misleading indentation in version 6</a>.</li>
</ol>
    </div>