<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Docstrings should be on the inside of a function or class, not on the outside - before the <code>def</code> or <code>class</code>.</li>
<li>Your logger doesn't automatically log to the next day's log. As <code>YEAR</code>, <code>MONTH</code>, <code>DAY</code> and <code>filename</code> are only defined once and never update.</li>
<li>It's abnormal to see <code>Logger.filename</code> rather than <code>self.filename</code> or <code>cls.filename</code>. If you need to guarantee it's the class' value rather than the instances than you can do <code>type(self)</code>. This makes it harder to rename your class if you ever need to in the future.</li>
<li>Your functions should be <em>classmethods</em> as they're interacting with the class. <em>staticmethod</em> is just wrong.</li>
<li>Due to a combination of the above two your class can't be instanced or subclassed. This is an artificial limitation and is un-Pythonic.</li>
<li>It's normally better to use <code>import x</code> rather than <code>from x import ...</code>. The only time I've found this to not be the case, is when you're importing from <code>typing</code>. But every other time I've found code to be <em>more readable</em>. As you know what the function is, without scrolling to the top of the file.</li>
<li>There's no benefit to using <code>datetime.now().today()</code> as they return the same object, but with a slightly different time due to the delay in each call.</li>
<li><p>It would be better to define the format once. Currently you're duplicating it across all functions. To do so you would need to pass a <code>datetime</code> / <code>time</code> object and you can just use the format specifier.</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>f"|{type}|{datetime:%I:%M}| {msg}\n"
</code></pre>
</blockquote></li>
<li><p>You don't need to manually call <code>str.ljust</code> you can just change your format to include:</p>

<pre class="lang-py prettyprint-override"><code>f"{type:&lt; {Logger.PADDING}}"
</code></pre></li>
<li><p>Don't use <code>return</code> on the same line as an <code>if</code>. It's un-Pythonic.</p></li>
<li>PEP 8 - Python's style guide - suggests using only 2 spaces before an inline comments <code>#</code>. You've used 1 and 5.</li>
<li>Personally I dislike inline comments as they're hard to read. Putting the comment before the line has normally always been more readable for me.</li>
<li>I suggest you rename <code>log</code> to <code>info</code> and allow <code>log</code> handle pretty much everything. For example interaction with the format string and also not logging if it's a debug message.</li>
<li><p>You could just open the file once and leave the file object to be closed when Python exits - as that the only time you'd want to actually close the file.</p>

<p>If you're sceptical that Python will clean up the file on exit you can just register an exit handler with <a href="https://docs.python.org/3/library/atexit.html" rel="noreferrer"><code>atexit</code></a>.</p></li>
<li><p>Your log levels aren't great. What if I want to ignore non-exceptions?</p></li>
<li>You don't log to <code>std.out</code> or <code>std.err</code>, this is a short coming.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>import datetime


class Logger:
    """If a log file for today already exist, open it in append mode.
    Else, create a new log file for today, and open it in append mode.
    """
    DEBUG = False
    PADDING = 9
    FORMAT = "|{type:&lt; {cls.PADDING}}|{datetime:%I:%M}| {msg}\n"
    FILE = open(f"logs/log{datetime.datetime.now():%d-%m-%Y}.txt", "w+")

    @classmethod
    def log(cls, msg, level):
        if not cls.DEBUG and level == "DEBUG":
            return
        cls.FILE.write(cls.FORMAT.format(
            type=level,
            msg=msg,
            datetime=datetime.datetime.now(),
        ))

    @classmethod
    def info(cls, msg):
        """Log info"""
        cls.log(msg, "INFO")

    @classmethod
    def update(cls, msg):
        "Used to log whenever a state is updated"
        cls.log(msg, "UPDATE")

    @classmethod
    def exception(cls, msg):
        cls.log(msg, "EXCEPTION")

    @classmethod
    def debug(cls, msg):
        "Only logs if the static variable {DEBUG} is set to True."
        cls.log(msg, "DEBUG")

    @classmethod
    def clear(cls):
        """Clears the log file"""
        cls.FILE.truncate(0)

    @classmethod
    def object(cls, object):
        """Intended for use on objects. They usually have a lot of information;
        therefor, we enclose the information with lines to make the log more readable."""
        cls.FILE.write(
            f"-----------------------       object log\n"
            + str(object)
            + f"\n-----------------------\n"
        )


if __name__ == "__main__":
    Logger.info("This is a test")
    Logger.info("running something")
    Logger.debug("Some debugging details")
    Logger.exception("Critical error!")
    Logger.debug("Some more debugging details")
</code></pre>

<h1>Logging</h1>

<p>But why not just use <code>logging</code>? You don't have to care if you've handled the file correctly, and you can get pretty much everything you want with ease. The entire of the logging module was created to be highly customizable. It's why it's so ridiculously complex.</p>

<p>As an example of defining UPDATE with a level of 5. And printing everything by default. With some functions removed for brevity.</p>

<pre class="lang-py prettyprint-override"><code>import datetime
import logging

def _update(self, message, *args, **kwargs):
    if self.isEnabledFor(5):
        self._log(5, message, args, **kwargs)

logging.basicConfig(
    filename=f"logs/log{datetime.datetime.now():%d-%m-%Y}.txt",
    format="|%(levelname)-9s|%(asctime)s| %(message)s",
    datefmt="%I:%M",
    level=0,
)
logging.addLevelName(5, "UPDATE")
logging.Logger.update = _update


if __name__ == '__main__':
    logging.debug("a")
    logging.info("a")
    logging.error("a")
    # update and object are not defined on the module
    # However you can do something similar to defining it on the class.

    logger = logging.getLogger('foo_application')
    logger.debug("b")
    logger.info("b")
    logger.error("b")
    logger.update("b")
</code></pre>
    </div>