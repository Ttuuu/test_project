<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>+1 on specifying argument <code>code: str</code> and return type <code>-&gt; str</code>. </p>

<p>I implemented a class seen below which has the advantage of seeing chars and their corresponding functions at a glance. Adding new chars if need be is incredibly easy. </p>

<pre class="lang-py prettyprint-override"><code>        self.actions = {
            '&gt;': self.greater_than,
            '&lt;': self.less_than,
            '+': self.plus,
            '-': self.minus,
            '[': self.left_bracket,
            ']': self.right_bracket,
            '.': self.dot,
            ',': self.comma
        }
</code></pre>

<p>You can use a </p>

<pre><code>try:
    ...
except KeyError:
    ...
</code></pre>

<p>to detect unrecognised chars.</p>

<h1>Complete Class</h1>

<pre class="lang-py prettyprint-override"><code>
class BFInterpreter:
    def __init__(self):
        self.outputs = []

        self.ptr = 0

        self.values = [0]
        self.length = 1

        self.brackets = []

        self.index = 0

    def greater_than(self):
        self.ptr += 1

    def less_than(self):
        self.ptr -= 1

    def plus(self):
        self.values[self.ptr] = (self.values[self.ptr] + 1) % 256

    def minus(self):
        self.values[self.ptr] = (self.values[self.ptr] - 1) % 256

    def left_bracket(self):
        self.brackets.append(self.index)

    def right_bracket(self):
        if self.values[self.ptr] == 0:
            self.brackets.pop()
        else:
            self.index = self.brackets[-1]

    def dot(self):
        self.outputs.append(chr(self.values[self.ptr]))

    def comma(self):
        self.values[self.ptr] = ord(input())

    def evaluate(self, code):
        self.code = code
        self.code_length = len(self.code)

        self.actions = {
            '&gt;': self.greater_than,
            '&lt;': self.less_than,
            '+': self.plus,
            '-': self.minus,
            '[': self.left_bracket,
            ']': self.right_bracket,
            '.': self.dot,
            ',': self.comma
        }

        while self.index &lt; self.code_length:
            char = self.code[self.index]

            while self.length &lt;= self.ptr:
                self.length += 1
                self.values.append(0)

            self.actions[char]()

            self.index += 1

        return ''.join(self.outputs)
</code></pre>

<h1>Usage</h1>

<pre class="lang-py prettyprint-override"><code>bf = BFInterpreter()
print(bf.evaluate('+++++&gt;++++[&lt;+&gt;-]++++++++[&lt;++++++&gt;-]&lt;.'))
</code></pre>

<p>code has been specified as an argument in the evaluate method rather than in the constructor to be able to evaluate without creating new objects.</p>
    </div>