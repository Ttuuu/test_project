<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Portability</h3>

<p>In calculations like</p>

<pre><code>c[n] = (text[i] &amp; 0b00000111) &lt;&lt; 18 | (text[i + 1] &amp; 0b00111111) &lt;&lt; 12 | (text[i + 2] &amp; 0b00111111) &lt;&lt; 6 | (text[i + 3] &amp; 0b00111111);
</code></pre>

<p>all operands are promoted to <code>int</code>. That is a 32-bit integer on most
platforms, but the C standard only requires that <code>int</code> has at least
16 bits, which means that the left-shift can overflow.</p>

<p>Better convert all bytes to <code>uint32_t</code> explicitly <em>before</em> shifting them:</p>

<pre><code>c[n] = ((uint32_t)text[i] &amp; 0b00000111) &lt;&lt; 18
        | ((uint32_t)text[i + 1] &amp; 0b00111111) &lt;&lt; 12
        | ((uint32_t)text[i + 2] &amp; 0b00111111) &lt;&lt; 6
        | ((uint32_t)text[i + 3] &amp; 0b00111111);
</code></pre>

<p>or, more verbosely:</p>

<pre><code>uint32_t b0 = text[i]     &amp; 0b00000111;
uint32_t b1 = text[i + 1] &amp; 0b00111111;
uint32_t b2 = text[i + 2] &amp; 0b00111111;
uint32_t b3 = text[i + 3] &amp; 0b00111111;
c[n] = (b0 &lt;&lt; 18) | (b1 &lt;&lt; 12) | (b2 &lt;&lt; 6) | b3;
</code></pre>
    </div>