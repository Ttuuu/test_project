<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Both endpoints have to execute in constant time and memory (O(1)). Include an in-memory DB.</p>
</blockquote>

<p>You ignored all four complexity constraints.</p>

<p>Even if for some reason we needed to store queued transaction logs, choosing PriorityBlockingQueue (which can take arbitrarily long to access) over PriorityQueue would be an odd choice.</p>

<p>But there is no such requirement, so simple counters would suffice. You just need a currentCounter and recentCounters, plus a timer or a timestamp telling you when the "current" count will be downgraded to "recent". Protect with a lock so concurrent updates are non-interfering. If you fire a maintenance timer once a minute then you don't even have to worry about ageing them during web requests.</p>

<p>You wrote lots and lots of code to accomplish a simple task, and consumed lots and lots of memory to do it, much more than a pair of counters use. The data structure you chose couldn't possibly conform to the spec. since a PQueue access needs O(log n) time rather than O(1) constant time. Avoid complexity, do the simplest thing that could possibly work.</p>
    </div>