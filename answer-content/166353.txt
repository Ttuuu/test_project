<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Counting bits</h3>

<p>When the main task involves bits,
it's good to look for opportunities for bit shifting operations.
For example, you can check if the last bit is 1 with:</p>

<pre><code>if ((num &amp; 1) == 1) {
</code></pre>

<p>And you can shift the bits to the right by 1 with:</p>

<pre><code>num &gt;&gt;= 1;
</code></pre>

<p>These are more natural in this context than <code>num % 2 == 1</code> and <code>num /= 2</code>.
And often might perform better too.</p>

<h3>Avoid flag variables</h3>

<p>When possible, it's good to avoid flag variables.</p>

<p>You are using <code>flag</code> to indicate if you've ever seen a 1-bit.
For each 0-bit, you check if the <code>flag</code> is set.
This is inefficient.</p>

<p>There is a way to avoid this flag.
You can first shift until the first 1-bit.
That is, skip all the trailing zeros.</p>

<pre><code>int work = N;
while (work &gt; 0 &amp;&amp; (work &amp; 1) == 0) {
  work &gt;&gt;= 1;
}
</code></pre>

<p>At this point we have reached a 1, or the end. It's safe to shift one more time, in case the last bit is 1.</p>

<pre><code>work &gt;&gt;= 1;
</code></pre>

<p>After this, we can start counting zeros,
and reset the count every time we see a 1.
There's no more need for a flag.</p>

<h3>Naming</h3>

<p><code>temp</code> is not a great name for a variable that counts zeros.
How about <code>zeros</code> instead?</p>

<h3>Alternative implementation</h3>

<p>Putting the above tips together (and a bit more),
this is a bit simpler and shorter:</p>

<pre><code>  public int solution(int N) {
    int work = N;
    while (work &gt; 0 &amp;&amp; (work &amp; 1) == 0) {
      work &gt;&gt;= 1;
    }
    work &gt;&gt;= 1;

    int max = 0;
    int zeros = 0;

    while (work &gt; 0) {
      if ((work &amp; 1) == 0) {
        zeros++;
      } else {
        max = Math.max(max, zeros);
        zeros = 0;
      }
      work &gt;&gt;= 1;
    }
    return max;
  }
</code></pre>
    </div>