<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On first glance, I wouldn't call things just <code>View</code>, <code>Controller</code>, and <code>Observable</code>, even if they are indirectly qualified by their package. It's a bit surprising to see that in Java, the names suggest reusability and independence of Chess. It probably should be <code>ChessBoardView</code> and <code>ChessBoardController</code>. Having <code>Observable</code> as an interface is a bit unusual in Java MVC, it's more common to have the counter-part <em>Observer</em> and name it <code>Listener</code>, in this case <code>ChessBoardListener</code>.</p>
<p>The <code>fileStream</code> is overly qualified as <code>FileInputStream</code>, <code>InputStream</code> would suffice.</p>
<p>If <code>readPieceImages()</code> fails, the program will continue with broken data and throw a <code>NullPointerException</code> when calling <code>updateTile()</code> at <code>new ImageIcon(pieceToImage.get(update))</code>: <code>pieceToImage.get(update)</code> will return <code>null</code>, and <code>new ImageIcon((java.awt.Image) null)</code> throws a <code>NullPointerException</code> in the constructor.</p>
<p>Method <code>fileIOError()</code> could use <code>JOptionPane.ERROR_MESSAGE</code> to signal to the user that the message is about an error.</p>
<p>Nice: Mostly immutable fields. You could go one step further and use unmodifiable collections as well. Instead of, in the constructor,</p>
<pre><code>        pieceToImage = new HashMap&lt;&gt;();
        addPieceImagesToMap();
</code></pre>
<p>you could have</p>
<pre><code>    private final Map&lt;String, Image&gt; pieceToImage = loadPieceImages();
</code></pre>
<p>and <code>loadPieceImages()</code> would create a <code>new HashMap&lt;&gt;()</code> plus <code>return Collections.unmodifiableMap(pieceToImage)</code>.</p>
<p>Besides, <code>pieceToImage</code> should probably cache the <code>ImageIcon</code>, not the <code>Image</code>. That would save repetitive constructor calls of <code>new ImageIcon</code> in <code>updateTile()</code>.</p>
<p>For <code>equals()</code> and <code>hashCode()</code> you might want to use Lombok, it saves a lot of boilerplate.</p>
<p>The <code>switch (movement)</code> could be avoided altogether by giving the <code>enum MovementType</code> fields <code>rowIncrement</code> and <code>columnIncrement</code>. This could also replace the <code>int[]</code> return type, which is not necessarily intuitive (one has to remember whether row or column comes first). (In other words. the implementation of the enum is not OO.)</p>
<p>The <code>MovementType</code> enum is also partially confusing, because in some contexts all four enum constants, including <code>HORSE</code> are allowed, and in some contexts, only 3 excluding <code>HORSE</code> are allowed.</p>
<p>Some of the methods and classes appear a bit long at first glance, and some responsibility misplaced. Loading and saving a board should probably not be in the same <code>Controller</code> as other UI functions.</p>
<p>Update: The current class <code>Board</code> conflates different responsibilities (it would change for more than one reason), and thus should be split:</p>
<ul>
<li>The <code>Board</code> itself, merely representing the chess board with the positions of the pieces. It shouldn't even know that the pieces are chess. Hypothetically, this should be reusable for implementing Draughts instead of Chess.</li>
<li>An interface <code>Rules</code> which merely connects the Board and the AI to what's allowed.</li>
<li>A class <code>ChessRules</code> which implements <code>Rules</code> for the actual rules of Chess.</li>
<li>A class <code>ChessAI</code> or something like that for all parts currently in <code>Board</code> which only serve the purpose of feeding the <code>MinimaxAI</code>.</li>
<li>The current behavior of the <code>MinimaxAI</code> is great, the behavior already doesn't know anything about Chess. The dependency could be decoupled so that even structurally it doesn't know about Chess. (Right now, <code>Board</code> is still specific to Chess.)</li>
</ul>
<p>Update 2</p>
<ul>
<li>In enum <code>Team</code> (not shown in the question), method <code>otherTeam()</code> should not be a <code>static</code> utility method but an instance method of the enum.</li>
<li>In enum <code>Team</code> (not shown in the question), method <code>toString()</code> also should not be a <code>static</code> utility method but an instance method of that enum.</li>
</ul>
<p>Overall, I really enjoyed looking at the code. That's it for now, I might have a more detailed look later.</p>
    </div>