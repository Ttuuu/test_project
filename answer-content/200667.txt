<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>You have a bug, if you remove an item in your <code>for</code> loop without breaking you get an <code>IndexError</code>.
Instead use a <code>worse</code> set so that you know what to skip.</li>
<li>What you seem to be doing is performing a sort, and so if you make a <code>cmp</code> function you can use <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a>.
To do this you need to use <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow noreferrer"><code>functools.cmp_to_key</code></a> and then you can <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile</code></a>.</li>
</ol>

<p>And so I'd use:</p>

<pre><code>import functools
import itertools
from typing import Set, List


class Term(int):
    def is_better_than(self, other):
        return self // 2 &gt; other // 2


def cmp(self: Term, other: Term):
    if self.is_better_than(other):
        return 1
    if other.is_better_than(self):
        return -1
    return 0


def get_best_terms(terms: Set[Term]) -&gt; List[Term]:
    if not terms:
        return []
    terms = sorted(terms, key=functools.cmp_to_key(cmp), reverse=True)
    best = terms[0]
    return list(itertools.takewhile(lambda i: not best.is_better_than(i), terms))


print(get_best_terms(map(Term, [1, 2, 3, 4, 5])))
print(get_best_terms(map(Term, [1, 2, 3, 4])))
print(get_best_terms(map(Term, [5, 1, 2, 4, 3])))
print(get_best_terms(map(Term, [5, 1, 4, 3])))
</code></pre>

<p>This can however be simplified if <code>Term</code>s are comparable, as you won't need to use <code>key</code> and can remove the need for a <code>lambda</code>.</p>

<pre><code>@functools.total_ordering
class Term(int):
    def __gt__(self, other: Term) -&gt; bool:
        return self // 2 &gt; other // 2

    def __eq__(self, other: Term) -&gt; bool:
        return self // 2 == other // 2


def get_best_terms(terms: Set[Term]) -&gt; List[Term]:
    if not terms:
        return []
    terms = sorted(terms, reverse=True)
    return list(itertools.takewhile(terms[0].__eq__, terms))
</code></pre>
    </div>