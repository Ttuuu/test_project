<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Now isn't now</h1>

<p>You call <code>now</code> at the top of the program. First of all, it's never used, so it should be deleted. Even if it were used, this call should be moved next to the usage so that any delay between program start and the usage of this variable won't introduce error.</p>

<h1>Use what Python gives you</h1>

<p>In this case, <code>os.environ["api_news"]</code> is more easily expressed as:</p>

<pre><code>from os import getenv
# ...
api_news = getenv('api_news')
</code></pre>

<h1>Configuration</h1>

<p>This isn't Python-specific, but for the kind of configuration you're pulling from the environment (access token, secret, etc.), the environment isn't really an appropriate place to keep it. Keep it in a permissions-protected file, perhaps JSON for ease of use.</p>

<h1>Make some functions</h1>

<p>Resist the urge to dump all of your code into global scope. Make a <code>main</code> method and a handful of subroutines. This makes the stack trace meaningful if something goes wrong, and helps with maintainability.</p>

<h1>Use snake case</h1>

<p>Python promotes <code>is_english</code> instead of <code>isEnglish</code>, in general.</p>

<h1>Use requests features</h1>

<p>You're using requests, which buys you a lot of power. Strip the query params off of your url and pass them into <code>get</code> as a dictionary on the <code>params</code> kwarg.</p>

<h1>Only call json() once</h1>

<p>You call <code>json()</code> a bunch of times on the response. Instead, you should probably save a temporary variable:</p>

<pre><code>articles = response.json()['articles']
</code></pre>

<p>and work with that.</p>

<h1>Check for failure</h1>

<p>Call <code>response.raise_for_status()</code>.</p>

<h1>Form strg as a text stream</h1>

<p>Rather than populating <code>listg</code> in a loop and then <code>join</code>ing it to <code>strg</code>, you should make <code>strg</code> a <code>StringIO</code> and write it out that way, so that you don't need to hold onto a list object at all.</p>

<h1>Early-bail out of your loops</h1>

<p>You're iterating over all of your content in several places but then only using the first ten items. Instead, slice the content before iterating. Also, don't use an index; iterate through the list itself. In other words:</p>

<pre><code>for article in articles[:10]:
</code></pre>

<h1>Use f-strings</h1>

<p>This:</p>

<pre><code>str(a) + ': '+ str(b) + '%'
</code></pre>

<p>can be expressed as</p>

<pre><code>f'{a}: {b}%'
</code></pre>

<h1>Don't except</h1>

<p>There are a few problems with your bare <code>except:</code>. First of all, it's catching things you won't expect to catch, like a user's Ctrl+C. At the least, you should be doing <code>except Exception:</code>. Also, when you fail, you don't do anything useful. You should probably print the exception along with your failure message and re-raise rather than continuing on with your database code.</p>
    </div>