<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>main()</code> function desperately needs to be busted up, for multiple reasons:</p>

<ul>
<li>You use a <strong><em>lot</em> of variables</strong>, all of them declared at the top of <code>main()</code>.  A human mind is only good at keeping track of about 7 things at a time, so this code is hard to follow.</li>
<li>It violates the <strong>Single Responsibility Principle</strong>, by parsing the command line, throwing the dice, keeping the statistics, and printing the report.  That's a lot of work for one function!</li>
<li><strong>Object-oriented code is preferred</strong> in Java.  A <code>static</code> function avoids object-oriented thinking.</li>
<li>It's <strong>unclear what you're simulating</strong>: what constitutes a trial, and what you mean by biggest/smallest sum.</li>
</ul>

<hr>

<p>A quick win in readability can be obtained by defining a <code>Die</code> class: <code>die.toss()</code> reads like English, whereas <code>1 + (int) ((Math.random() * (6 - 1)) + 1)</code> doesn't.</p>

<pre><code>class Die {
    // Since "throw" is a Java keyword, we use "toss"
    int toss() {
        return 1 + (int)(6 * Math.random());
    }
}
</code></pre>

<hr>

<p>A good start to taming the variables would be to declare each of them in the tightest scope possible.  For example, <code>theSum</code>, and <code>diceSum</code> are only relevant inside the loop.  <code>count</code> is a loop counter, and it's much easier to recognize if you rewrite the loop as a for-loop.  <code>dice1</code> and <code>dice2</code> are only relevant inside the inner loop, which is better expressed as a do-while loop.</p>

<pre><code>for (int count = 0; count &lt; Integer.parseInt(args[0]); count++) {
    int theSum = 0, diceSum;
    do {
        int dice1 = 1 + (int) ((Math.random() * (6 - 1)) + 1);
        int dice2 = 1 + (int) ((Math.random() * (6 - 1)) + 1);
        diceSum = dice1 + dice2;
        if (diceSum != 7) {
            theSum = theSum + diceSum;
        }
        //System.out.println("the sum is "+theSum);
    } while (diceSum != 7);
    …
}
</code></pre>

<p>Now a picture is beginning to emerge.  The inner loop is what you would call a <em>simulation trial</em>.  Based on that, I would define a <code>DiceSimulation</code> class with a <code>runTrial()</code> method.  Everything else just falls into place around that core function.  ☺</p>

<pre><code>public class DiceSimulation {
    private int trials = 0,                 // Formerly count
                min = Integer.MAX_VALUE,    // Formerly lowest
                max = 0,                    // Formerly finalSum
                sum = 0;                    // Formerly totalSum

    private Die die1 = new Die(),
                die2 = new Die();

    /**
     * One trial consists of tossing a pair of dice until a sum of 7 is obtained.
     * The result of the trial is the sum of all tosses up to, but not including,
     * the toss that resulted in 7.
     */
    public int runTrial() {
        int trialSum = 0, pairSum;           // Formerly theSum and diceSum
        while (7 != (pairSum = die1.toss() + die2.toss())) {
            trialSum += pairSum;
        }

        if (trialSum &gt; max) {
            max = trialSum;
        }
        if (trialSum &lt; min) {
            min = trialSum;
        }
        sum += trialSum;
        trials++;
        return trialSum;
    }

    public void report() {
        System.out.println("After " + trials + " simulations: ");
        System.out.println("Biggest sum: " + max);
        System.out.println("Smallest sum: " + min);
        System.out.println("The average is: " + (double)sum / trials);
    }

    public static void main(String[] args) {
        int trials = Integer.parseInt(args[0]);

        DiceSimulation sim = new DiceSimulation();
        for (int count = 0; count &lt; trials; count++) {
            sim.runTrial();
        }
        sim.report();
    }
}
</code></pre>
    </div>