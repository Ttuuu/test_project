<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Avoid magic numbers. That's <code>0.3048</code> and <code>0.82</code>. When another developer comes in and looks at the code, they won't know what those numbers are. Put them in variables that are named accordingly.</p>

<p>You converted height into meters, which implies that <code>height</code> isn't in meters. What unit does it come in? Is it some other metric unit or is it another unit? You didn't convert <code>weight</code>. Is <code>weight</code> already in metric? Would be better to use units as argument names instead.</p>

<p>Also, stick to one unit for calculation. Move conversions elsewhere. For instance, write in metric for everything. Then create separate APIs for other units, doing the conversion to metric there, then call the metric APIs.</p>

<p>That loop is a long-winded way to modify BMI for specific countries. It took me a while to figure that out. Would be nice to add comments on what that entire block does. Also, there's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" rel="nofollow noreferrer"><code>array.includes()</code></a>.</p>

<p>Lastly, any constant values in a function (values that literally never change, like your countries list and ratio), you should pull out of the function. Keeps the function less cluttered. Also, you wouldn't want to recreate those values every time the function is called.</p>

<pre><code>const adjustedRatio = 0.82
const countries = [...];

const computeBMI = (kilograms, meters, country) =&gt; {
  const baseBMI = weight / (meters * meters);
  const shouldRatio = countries.includes(country)
  const modifiedBMI = shouldRatio ? baseBMI * adjustedRatio : baseBMI
  return Math.round(modifiedBMI, 2);
};

// For non-metric users
const computeBMINonMetric = (pounds, feet, country) =&gt; {
  // TODO: convert pounds to kilograms
  // TODO: convert feet to meters
  return computeBMI(kilograms, meters, country)
}
</code></pre>
    </div>