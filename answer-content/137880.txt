<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider </p>

<pre><code>public static void findSubstringsWithKDistinctCharacters(String s, int k) {
    char[] letters = s.toCharArray();

    for (int i = 0, n = letters.length - k; i &lt;= n; i++) {
        Set&lt;Character&gt; uniques = new LinkedHashSet&lt;Character&gt;();

        for (int j = i, m = i + k; j &lt; m; j++) {
            uniques.add(letters[j]);
        }

        if (uniques.size() == k) {
            System.out.println("substring : " + uniques);
        }
    }
}
</code></pre>

<p>This is a simpler version of what you wrote.  It gets rid of your <code>r</code> variable entirely, as it is unnecessary.  </p>

<p>I also changed the names of <code>sArr</code> and <code>set</code> to things that I find more descriptive.  </p>

<p>I moved the code into its own method so that it can be called multiple times.  </p>

<p>There are two reasons to move the declaration of <code>uniques</code> into the loop.  One, this is less code.  Two, if you changed this code to produce a list of results rather than print the results, the other version doesn't work.  You'd have multiple copies of whatever the last set was rather than unique copies.  I'd only use the <code>clear</code> version if I knew that performance of this method was a bottleneck.  </p>

<h3>Bug</h3>

<p>Unfortunately, both this version and your original do not match the linked problem statement:  </p>

<blockquote>
  <p>Input: aba, k = 2<br>
  Output: 3<br>
  Possible substrings are {"ab", "ba", "aba"}</p>
  
  <p>Input: aa, k = 1<br>
  Output: 3<br>
  Possible substrings are {"a", "a", "aa"}</p>
</blockquote>

<p>They only find two solutions for each of these, as they stop counting once there are <code>k</code> characters (distinct or not) in the substring.  They should keep going until they've verified that the next character isn't a duplicate of a character already in the substring.  </p>

<h3>Complexity</h3>

<p>Calling the time complexity \$\mathcal{O}(n\cdot k)\$ is reasonable.  It's slightly more accurate to say that it is \$\mathcal{O}(n\cdot k - k^2)\$, but \$k\$ is never larger than \$n\$ so it's reasonable to view this as \$\mathcal{O}(n\cdot k)\$.  Note that if you fix the algorithm, it would be \$\mathcal{O}(n^2)\$, as the worst case is an input of all the same character.  That gives substrings up to length \$n\$ where this is limited to length \$k\$.  </p>
    </div>