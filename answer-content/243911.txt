<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Specific suggestions</h2>
<ol>
<li><p>The <code>while True</code> loop at the top is, well, pointless. Why have a section in the program asking whether the user wants to (effectively) run the program?</p>
</li>
<li><p><code>re.match(r"^[yn]$", confirmation, flags=re.IGNORECASE)</code> implies <code>len(confirmation) == 1</code>, so you could consider the length check redundant. The same goes for <code>count</code>.</p>
</li>
<li><p>You end up effectively converting the case of <code>confirmation</code> thrice:</p>
<ul>
<li><code>re.match(r"^[yn]$", confirmation, flags=re.IGNORECASE)</code></li>
<li><code>confirmation.casefold() == "n"</code></li>
<li><code>confirmation.casefold() == "y"</code></li>
</ul>
<p>By instead converting <code>confirmation</code> to lowercase before doing <em>any</em> of these you can do a case <em>sensitive</em> match, which is simpler code and faster.</p>
</li>
<li><p><code>r"^[0-9]*$"</code> includes matches for the empty string. What you probably want is <code>r"^[0-9]+$"</code>, which looks for <em>at least one</em> number.</p>
</li>
<li><p>The last <code>else</code> should just run <code>break</code>; then <code>p = inflect.engine()</code> etc can be moved outside the loop for clarity.</p>
</li>
<li><p>This code isn't really reusable. Almost 100% of Python scripts you will ever find in <em>production</em> systems will be reusable. This means they are:</p>
<ul>
<li><p><em>Non-interactive.</em> In this case, that means removing the <code>input</code>s, instead either using <code>argparse</code> or something to get a single parameter containing the number of dies you want to print, or very simply just printing one die number.</p>
</li>
<li><p><em>Importable.</em> Typically there are three parts to this: an entrypoint (in your case this could be a very simple function which prints a single random number in the specified range), a <code>main</code> method which takes care of reading command line parameters and running the entrypoint, and this magic:</p>
<pre><code> if __name__ == "__main__":
     main()
</code></pre>
</li>
</ul>
<p>The last bit runs the <code>main</code> method when the script is called from the command line. The entrypoint can then be imported from any other script and reused trivially.</p>
</li>
</ol>
<h2>Tool support suggestions</h2>
<ol>
<li><p><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic. It'll do things like adjusting the vertical and horizontal spacing, while keeping the functionality of the code unchanged.</p>
</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> can give you hints to write idiomatic Python. I would start with this configuration:</p>
<pre><code> [flake8]
 max-complexity = 4
 ignore = W503,E203
</code></pre>
<p>This would for example detect that you have a redundant import (<code>time</code>).</p>
</li>
</ol>
    </div>