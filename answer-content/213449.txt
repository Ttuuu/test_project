<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Possible bug</h1>

<blockquote>
<pre><code>while (*pa == '.')                  /* scan past "." and ".." */
    pa++;
</code></pre>
</blockquote>

<p>This also scans past <code>...</code> and <code>....</code>, which are perfectly valid filenames.</p>

<h1>Locale</h1>

<p>This program always sorts using the <code>C</code> locale.  We should instead order as the user prefers, by setting locale from environment in <code>main()</code>:</p>

<pre><code>setlocale(LC_ALL, "");
</code></pre>

<p>and then using <code>strcoll</code> rather than <code>strcmp</code> to order strings.</p>

<h1>Directory-first isn't recursive</h1>

<p>I was surprised to get this output:</p>

<pre class="lang-none prettyprint-override"><code>./a/A
./b/B
./b/x
./b/x/X
./b/y
./b/y/Y
./c/C
.
./a
./b
./c
</code></pre>

<p>Why is the file <code>b/B</code> shown before directory <code>b/x</code>?  I'd expected the directory-first rule to be applied recursively, too.</p>

<h1>Duplication</h1>

<p>The <code>sort_ascending</code> and <code>sort_descending</code> functions are almost identical.  I'd be inclined to refactor out the common part:</p>

<pre><code>static int sort_bydir (const char  *pa, const char *pb)
{
    /* scan past "." and ".." */
    if (*pa == '.') ++pa;
    if (*pa == '.') ++pa;

    if (*pb == '.') ++pb;
    if (*pb == '.') ++pb;

    const char *hasdira = strchr (pa + 1, '/');     /* check for 2nd '/' */
    const char *hasdirb = strchr (pb + 1, '/');

    return (!hasdira &amp;&amp; hasdirb) - (hasdira &amp;&amp; !hasdirb);
}
</code></pre>

<p>Then the two functions are greatly simplified:</p>

<pre><code>/* file/dir name comparison - ascending (sort dirs first) */
int sort_ascending (const void *a, const void *b) {
    const char *pa = *(char *const *)a;
    const char *pb = *(char *const *)b;

    int bydir = sort_bydir(pa, pb);
    return bydir ? bydir : strcoll(pa, pb);
}

/* file/dir name comparison - descending (sort dirs first) */
int sort_descending (const void *a, const void *b) {
    const char *pa = *(char *const *)a;
    const char *pb = *(char *const *)b;

    int bydir = sort_bydir(pa, pb);
    return bydir ? bydir : strcoll(pb, pa);
}
</code></pre>

<h1>Improve the error checking</h1>

<p>If we fail, we <code>perror()</code> but still continue to write incomplete (misleading) results.  I think it would be better to emit only the error message in these cases.</p>

<p>Using <code>perror()</code> following memory allocation failure is misleading, as these functions don't set <code>errno</code>.</p>

<p>We forgot to check <code>readdir()</code> for error:</p>

<blockquote>
  <p>If an error occurs, <code>NULL</code> is returned and <code>errno</code> is set appropriately. 
  To distinguish end of stream and  from an error, set <code>errno</code> to zero
  before calling <code>readdir()</code> and then check the value of <code>errno</code> if <code>NULL</code> is
  returned.</p>
</blockquote>

<h1>Cope with absence of <code>d_type</code> field</h1>

<p>Not all <code>readdir()</code> implementations provide file type information, and even on systems which do, you can't assume it's populated.  The GNU man page says:</p>

<blockquote>
  <p>Only the fields <code>d_name</code> and (as an XSI extension) <code>d_ino</code> are
  specified in POSIX.1.  Other than Linux, the <code>d_type</code> field is
  available mainly only on BSD systems.  The remaining fields  are 
  available  on  many,  but not all systems.  Under glibc, programs can
  check for the availability of the fields not defined in POSIX.1 by
  testing whether the macros <code>_DIRENT_HAVE_D_NAMLEN</code>,
  <code>_DIRENT_HAVE_D_RECLEN</code>, <code>_DIRENT_HAVE_D_OFF</code>, or
  <code>_DIRENT_HAVE_D_TYPE</code> are defined.</p>
</blockquote>

<p>It also says:</p>

<blockquote>
  <p>Currently,  only  some  filesystems (among them: Btrfs, ext2, ext3,
  and ext4) have full support for returning the file type in <code>d_type</code>. 
  All applications must properly handle a return of <code>DT_UNKNOWN</code>.</p>
</blockquote>

<p>This means that we must be prepared to fall back to <code>lstat()</code> if <code>_DIRENT_HAVE_D_TYPE</code> is undefined or if <code>entry-&gt;d_type == DT_UNKNOWN</code>.</p>
    </div>