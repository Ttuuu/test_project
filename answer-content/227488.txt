<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Readability</h2>

<p>I'll focus this review around this statement:</p>

<blockquote>
  <p><em>I hate it, it is ugly as hell and I feel like there should be more simpler and elegant ..</em></p>
</blockquote>

<p>You then suggest some object-oriented (visitor, composite) and functional (generator) patterns as ways to improve readability. I would indeed make the code adhere more to OO principles.</p>

<hr>

<h3>Separation of Concerns</h3>

<p>The first phase of refactoring the functional code is to define the concerns. You have: (1) Input Parsing (2) Calculator (3) Output Rendering. Ensure you split these concerns, by either providing separate classes, but definately separate methods, each focusing on their concern. </p>

<hr>

<h3>Object-Oriented Design</h3>

<p>You have chosen <code>Dictionary&lt;(int, int), List&lt;(int, int)&gt;&gt;</code> as your state for the calculator. ValueTuple instances are great replacements for boiler-plate classes that group certain properties together. However, when you need re-occuring behavior, they are not the best choice. Have a look at some convoluted statements:</p>

<p>snippet 1:</p>

<blockquote>
<pre><code>if (commonPort(cur, tar) == p &amp;&amp; cur.Item1 == cur.Item2 &amp;&amp; cur.Item1 == p) { return p; }
if ((cur.Item1 == tar.Item1 || cur.Item1 == tar.Item2) &amp;&amp; cur.Item1 != p) { return cur.Item1; }
if ((cur.Item2 == tar.Item1 || cur.Item2 == tar.Item2) &amp;&amp; cur.Item2 != p) { return cur.Item2; }
return -1;
</code></pre>
</blockquote>

<p>snippet 2:</p>

<blockquote>
<pre><code>if (current.Item1 == target.Item1 || current.Item1 == target.Item2) { return current.Item1; }
else if (current.Item2 == target.Item1 || current.Item2 == target.Item2) { return current.Item2; }
else { return -1; }
</code></pre>
</blockquote>

<p>These are a direct consequence of not having provided custom classes. The <code>(int, int)</code> tuple you are using everywhere represents a <code>Component</code> in the puzzle. Let's make a class for it.</p>

<pre><code>class Component : IEnumerable&lt;int&gt;
{
    public int Port1 { get; }
    public int Port2 { get; }

    public Component(int port1, int port2) =&gt; (Port1, Port2) = (port1, port2);

    // methods ..

    public IEnumerator&lt;int&gt; GetEnumerator()
    { 
        yield return Port1;
        yield return Port2;
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return this.GetEnumerator();
    }
}
</code></pre>

<p>Getting the common port can then be a method in this class.</p>

<pre><code>public int? GetCommonPort(Component other) =&gt; this.Intersect(other).FirstOrDefault();
</code></pre>

<p>You may even decide to make a class <code>Port</code> to store some additional information which may be useful for linking components together. Only a disconnected port can get connected to a disconnected port of another component. This information is required to decide which components and which of their ports can connect.</p>

<pre><code>class Port
{
    public int PortNumber { get; }
    public bool IsConnected { get; internal set; }

    public Port(int portNumber) =&gt; PortNumber = portNumber;
}
</code></pre>

<p>Another class I could imagine is <code>Bridge</code>, as it's a chain of components.</p>

<pre><code>class Bridge
{
    Component First { get; private set; }
    Component Last { get; private set; }

    public void Construct(Component next)
    {
        Last.Connect(next);
        Last = next;
    }

    // and so on ..
}
</code></pre>

<p>This should give you a good idea how to rewrite the algorithm using an object-oriented approach. 
Have a go at it..</p>
    </div>