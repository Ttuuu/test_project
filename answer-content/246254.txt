<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Capacity</h1>
<p>You don't use <code>capacity</code>, yet you pass it into both your Producer/Consumer classes.  Superficially, it looks like you should be passing the capacity in when creating your <code>Producer</code> semaphore.  This would allow 'capacity' items to be put into your list.  At the moment, you're restricting it to only putting a single item into the list, then reading it back out again.</p>
<h1>Thread safety</h1>
<p>As it stands, your program works, however, it only works because you have a single consumer and producer.  The way you're using the semaphores means that either a consumer can be running, or the producer can be running, they can't both be running at the same time.  As a consequence, only one thread is working with the <code>list</code>.  If you start supporting more than one producer/consumer however you'll have the potential for having more threads using the collection concurrently... in which case you should consider alternate protection or using a concurrent collection, I'd suggest one of the Queues.</p>
<h1>Naming</h1>
<p>Some of your names are a little confusing / misleading...</p>
<pre><code>List&lt;Integer&gt; arrayList = new LinkedList&lt;&gt;();
</code></pre>
<p>Creates a linked list that's called arrayList...</p>
<p>This is obviously subjective, but I'm also not a fan of <code>semaphoreProducer</code>... I can't help but expect it to be something that produces semaphores.  <code>producerSemaphore</code> works better for me, but as I said...very subjective.</p>
<h1>Exit Strategy</h1>
<p>Your <code>Consumer</code> thread doesn't have a way to exit, it just keeps on running.  Consider adding some way of notifying the consumer that it's time to shutdown so that the thread can be exited cleanly without you needing to force it to terminate.  This will become more important if your consumer starts doing some processing that takes a while that you don't want to exit in the middle of...</p>
    </div>