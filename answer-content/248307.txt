<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Variable names. Name your variables after what they do, no exceptions.</p>
<hr>
<p>As a sidenote, note that that you're relying on how integer division works in Java.</p>
<hr>
<p>Having said that, you can improve the code by being explicit.</p>
<pre class="lang-java prettyprint-override"><code>// As I've said, always name your variables and functions after
// what they are doing. Don't be afraid to use longer names,
// longer names which tell you what the class does are a good
// thing, even if they sound "funny".
public int countEights(int value) {
    // Early exit conditions are a good thing.
    if(value == 0) {
        return 0;
    }
    
    // We could also skip the declaration and instead return
    // the right count together with the function call. From
    // the viewpoint of the JVM it doesn't make a difference,
    // but here in the code it means that we have the logic
    // for stripping the last digit only once.
    int countedEights = 0;
    
    // We are testing explicitly for the mentioned "double eights",
    // this has the upside that the intent is clearly visible
    // when reading the code.
    if ((value % 100) == 88) {
        countedEights = 2;
    } else if ((value % 10) == 8) {
        countedEights = 1;
    }
    
    // And finally we call the function again in the return
    // statement, as it is easier to follow the recursion when
    // it is being called at the end of the function.
    return countedEights + countEights(value / 10);
}
</code></pre>
<p>As you can see, we can completely get rid of the nested <code>if</code> by being explicit about our intent.</p>
    </div>