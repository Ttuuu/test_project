<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing this.  There is a lot here, and in general it looks good.  Without a LOT more thought I would not be able to provide constructive feedback to the logic here.  So I will punt, and fallback to some relatively minor Pythonic (my opinion) comments.</p>
<h3>Max is .. really cool</h3>
<p>This method does some basic math with timestamps.</p>
<pre><code>def _calc_remainder(self):
    cur = cur_time()
    difference = cur - self._started_at
    remainder = self._remainder - difference
    self._started_at = cur
    if remainder &lt;= 0:
        remainder = 0
    self._remainder = remainder
    
</code></pre>
<p>I would take the 7 lines and reduce to 3 like.</p>
<pre><code>def _calc_remainder(self):
    cur = cur_time()
    self._remainder = max(self._remainder - (cur - self._started_at), 0)
    self._started_at = cur
        
</code></pre>
<p>The big differences are using <code>max()</code> to clip to <code>0</code> and removing some of the intermediate calcs.</p>
<h3>Be explicit about what you are calculating:</h3>
<p>This:</p>
<pre><code>def next_state(self):
    self._tomato.tomatoes += 1
    if self._tomato.tomatoes % TOMATOES_PER_SET == 0:
        return IntermediateState.transition_to(LongBreakState, tomato=self._tomato)
    return IntermediateState.transition_to(SmallBreakState, tomato=self._tomato)
</code></pre>
<p>Can be reduced a bit to:</p>
<pre><code>def next_state(self):
    self._tomato.tomatoes += 1
    next_state = LongBreakState if self._tomato.tomatoes % TOMATOES_PER_SET == 0 else SmallBreakState
    return IntermediateState.transition_to(next_state, tomato=self._tomato)
                
</code></pre>
<p>The primary change I would recommend here is the explict calculation of <code>next_state</code>.  This construct makes <code>next_state</code> explicit, while the previous requires the reader to figure this out.</p>
<h3>Python does not require <code>()</code> around tuples</h3>
<p>So this:</p>
<pre><code>ftext = TOMATO[:]
for i in range(1, 5):
    ftext[LOCATIONS["task" + str(i)]] = ("", task[i - 1])
ftext[LOCATIONS["status"]] = ("", status)
....    
</code></pre>
<p>Can be reduced to:</p>
<pre><code>ftext = TOMATO[:]
for i in range(1, 5):
    ftext[LOCATIONS["task" + str(i)]] = "", task[i - 1]
ftext[LOCATIONS["status"]] = "", status
....
</code></pre>
    </div>