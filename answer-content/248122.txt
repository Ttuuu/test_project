<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>May I ask what programming language did you practice before python?<br>
I want to mention a one-liner for this:</p>
<pre><code>max(l,key=lambda x:(x%2,x))
</code></pre>
<p>assuming you already have <code>l</code> somehow inputed, like</p>
<pre><code>s='Enter a number: '
l=[int(input(s)) for i in range(10)]
</code></pre>
<hr>
<p>How does the code work? It looks for maximum of <code>key(x)</code> for <code>x</code> in <code>l</code> and returns such <code>x</code>. Key here is the lambda function that returns tuple <code>(1,x)</code> for odd <code>x</code> and <code>(0,x)</code> for even <code>x</code>. Tuples are compared left to right, e.g. <code>(1,x)&gt;(0,y)</code> for every <code>x</code> and <code>y</code>. So we are just saying "give me the maximum of <code>l</code>, assuming that an odd number is always larger than an even number".</p>
<p>So all program will look like</p>
<pre><code>s='Enter a number: '
l=[int(input(s)) for i in range(10)]
m=max(l,key=lambda x:(x%2,x))
if m%2:
    print('The largest odd number is: %d'%m)
else: #the greatest is even, therefore no odd numbers
    print('No odd number was entered')
</code></pre>
<p>Short, nice and easy, as python.</p>
<p>But I agree that a try-except block around <code>int(input())</code> form the accepted answer is useful, along with no pre-storing the entire list of odd values.</p>
<p>I only wanted to demonstrate the paradigm of functional programming in python, when you just tell python 'I want that done (e.g. a maximum value)' and it does it for you, you don't need to explain how should it do it.</p>
<p>Thanks for reading.</p>
    </div>