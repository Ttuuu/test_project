<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice use of the Prime Number Theorem there. However, there are some issues with your code as is:</p>

<ul>
<li>The name <code>nth</code> does not convey the meaning of the function.</li>
<li>A <code>return</code> statement is used instead of an expression at the end of the function.</li>
<li>The composite marking can start at <code>prime * prime</code>, as all smaller composites are already marked by previous primes.</li>
<li>The <span class="math-container">\$\left(2^{32}-1\right)\text{th}\$</span> prime is larger than <span class="math-container">\$2^{32}-1\$</span>, but less than <span class="math-container">\$2^{64}-1\$</span>, so <code>u64</code> is a better return type.</li>
<li>The function will use a lot of memory if we use <code>&lt;u32&gt;::max_value()</code> as input.</li>
<li>The <a href="https://www.wolframalpha.com/input/?i=first%20prime" rel="nofollow noreferrer">first (<span class="math-container">\$1\text{st}\$</span>) prime number <span class="math-container">\$p_1\$</span> is <span class="math-container">\$2\$</span></a>, but your code returns <span class="math-container">\$3\$</span> on <code>nth(1)</code>.</li>
<li>The behaviour is not documented at the moment, as the function is missing <a href="https://doc.rust-lang.org/book/second-edition/ch14-02-publishing-to-crates-io.html#making-useful-documentation-comments" rel="nofollow noreferrer">all documentation</a>.</li>
<li><strong>The function doesn't necessarily return a prime number.</strong></li>
</ul>

<p>The last issue is the greatest one, to be honest. If I use a <code>nth_prime</code> function, I expect the function to return a prime number and only a prime number, whereas <code>&lt;u32&gt;::max_value()</code> is a composite. If it's possible that your function does not return a valid result, use <code>Option</code> or <code>Result</code> instead:</p>

<pre><code>// https://play.rust-lang.org/?gist=4d6abc78a8c0d205da57a17c02201d7c&amp;version=stable&amp;mode=release&amp;edition=2015

/// Returns the nth prime.
///
/// It uses a sieve internally, with a size of roughly
/// `n * (n.ln() + n.ln().ln()` bytes. As a result, its
/// runtime is also bound loglinear by the upper term.
///
/// # Examples
///
/// ```
/// use &lt;yourcrate&gt;::nth_prime;
///
/// assert_eq!(nth_prime(0), None);
/// assert_eq!(nth_prime(1), Some(2));
/// assert_eq!(nth_prime(2), Some(3));
/// assert_eq!(nth_prime(3), Some(5));
/// ```
///
/// 
pub fn nth_prime(n: u32) -&gt; Option&lt;u64&gt; {
    if n &lt; 1 {
        return None;
    }

    // The prime counting function is pi(x) which is approximately x/ln(x)
    // A good upper bound for the nth prime is ceil(x * ln(x * ln(x)))
    let x = if n &lt;= 10 { 10.0 } else { n as f64 };
    let limit: usize = (x * (x * (x).ln()).ln()).ceil() as usize;
    let mut sieve = vec![true; limit];
    let mut count = 0;

    // Exceptional case for 0 and 1
    sieve[0] = false;
    sieve[1] = false;

    for prime in 2..limit {
        if !sieve[prime] {
            continue;
        }
        count += 1;
        if count == n {
            return Some(prime as u64);
        }

        for multiple in ((prime * prime)..limit).step_by(prime) {
            sieve[multiple] = false;
        }
    }
    None
}
</code></pre>

<p>Note that the documentation's examples show that <code>0</code> isn't a viable index for primes, and that <code>nth_prime(1) == Some(2)</code>.</p>

<p>Other than that, we can optimize the code a little bit further if we consider <code>2</code> as a special case and then step <code>(3..limit).step_by(2)</code>, but that makes the code slightly harder to read. There are also several approaches to keep the memory usage limited, but they are harder to achieve.</p>

<p>Other than that, well done, although I'd link to the Prime Number Theorem for the approximation.</p>
    </div>