<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First some general remarks to coding conventions:</p>

<ul>
<li>JavaScript uses camelCase identifiers, not snake_case.</li>
<li>Insert a space between keywords and a following opening bracket (<code>if (...</code>) so that they don't look like functions.</li>
</ul>

<hr>

<p>I'm not a big fan of the method name. It should be called after what is does, not what it's for. <code>moveSelectedItemsBeforeIndex</code> would be my choice.</p>

<hr>

<p>Never use <code>for ... in</code> on arrays. It iterates over all properties not only integer properties, and it's not guaranteed to do that in order. Use either a regular <code>for</code> loop or <code>.forEach()</code>.</p>

<hr>

<p>Always use <code>===</code> for comparison, unless you specifically want loose equality (<code>null === undefined</code> is false, but <code>null == undefined</code> is true).</p>

<hr>

<p>You can replace the final loop with a simple <code>.filter</code>:</p>

<pre><code>return list.filter(i =&gt; i !== null);
</code></pre>

<hr>

<p>An alternative implementation with a more functional approach could be:</p>

<pre><code>function drag_and_drop(list, before_index){
    let part1 = list.slice(0, before_index);
    let part2 = list.slice(before_index);

    let [selected1, unselected1] = groupBySelect(part1);
    let [selected2, unselected2] = groupBySelect(part2);

    return [...unselected1, ...selected1, ...selected2, ...unselected2];
}

function groupBySelect(list) {
    return list.reduce(
        (acc, item) =&gt; item.selected ? [[...acc[0], item], acc[1]] : [acc[0], [...acc[1], item]], 
        [[], []]
    );
}
</code></pre>

<p>It first splits at the index and then groups the elements of the two "halves" of the list whether they are selected or not and finally reassembles the array in the right order.</p>
    </div>