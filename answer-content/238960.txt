<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The validation of the string seems to leave some gaps. For instance, the version numbers seem to be valid whatever size they have. They could be zero digits large, or contain so many digits that they would not fit into an integer.</p>

<p>I'd try not to print to standard error if this is supposed to be used as a library. In that case you might want to use separate header files, c code and test code of course as well.</p>

<p>I'd keep <code>version_compare_print</code> possibly out of the library; at the very least it should otherwise just populate a string pointer rather than print it to standard out. <code>version_print</code> makes more sense, but it should also populate a string. Then the application can print it to standard output. Probably best to call it <code>version_sprint</code>.</p>

<h2>Coding remarks</h2>

<p><strong>main</strong></p>

<p>I'm not sure if setting:</p>

<pre><code>ver = NULL;
</code></pre>

<p>does any good for a local variable, after you've already freed it.</p>

<p><strong>version_new</strong></p>

<p>I'm not sure if this function should be there at all, just let the caller perform the <code>malloc</code> and call <code>version_parse</code>. They'll have to <code>dealloc</code> anyway.</p>

<p><strong>version_parse</strong></p>

<pre><code>unsigned int count = 0;
</code></pre>

<p>Count of what? You should make that explicit in the variable name (<code>delimiter_count</code> seems logical).</p>

<pre><code>char *copy;
</code></pre>

<p>This doesn't seem to operate on a copy - just on a copy of the reference; just call it <code>position</code> or something similar.</p>

<pre><code>return -1;
</code></pre>

<p>You're hiding the error code. Either you should probably upgrade to a more application specific code or just return the code you're given. Currently it is possible to read the error from standard error stream, but the calling method will be left in the dark.</p>

<p><strong>version_compare</strong></p>

<p>Compare almost always use a negative value if the leftmost parameter is smaller than the second, zero if they are equal and a positive value if the leftmost parameter is great than the second.</p>

<p>As you don't seem to use FAIL value anyway (and since you use pointers to the already parsed versions), I think it is best to keep to that.</p>

<p><strong>version_compare_print</strong></p>

<p>I'm not sure if this should be a special function; better keep it with <code>main</code> or at least explain <em>what</em> it does.</p>

<p>There is a lot of repetition in the code. You could just set a variable to <code>"&lt;"</code>, <code>"=="</code> or <code>"&gt;"</code> and then perform the print after the switch.</p>

<p>The final <code>return</code> statement seems rather useless; nothing is returned and the method is at the end.</p>
    </div>