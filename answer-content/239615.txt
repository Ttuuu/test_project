<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>loadData</code> function looks just fine to me. I don't see a way it could be any more elegant given what it's doing. I do actually like the way you have separated reading the file and parsing it. That's the way to go. </p>

<p>Your concern about "avoiding the IO monad" shouldn't be a concern. On the contrary, that's actually a "best practice", known as "pushing I/O to the boundary". It means that the majority of your program should be pure, and only a thin shell should deal with external world. This way you can easily test and debug the majority of your program.</p>

<p>The only thing I might do is make the last three lines one expression:</p>

<pre><code>traverse readFile prefixed
  &lt;&amp;&gt; map parseTsv
  &lt;&amp;&gt; zip filtered
</code></pre>

<p>I find this a bit more readable, but that's just a matter of personal taste.</p>

<hr>

<p>But the <code>parseLine</code> function could sure use some improvement.</p>

<p><strong>First,</strong> the control flow. Look what it's doing: compute a <code>Maybe</code> value, then if it's <code>Just</code>, compute another <code>Maybe</code> value from its contents. That's exactly what "bind" does! This means it can be nicely represented as a <code>do</code> block.</p>

<p><strong>Second,</strong> <code>read</code> is a partial function. This means it can fail at runtime if there is a non-number in the file. I understand this probably Should Never Happenâ„¢, but you'd be surprised how many things that "should never happen" do, in fact, happen all the time. :-)</p>

<p>But since you're already in the <code>Maybe</code> context, it would be easy to use <a href="https://www.stackage.org/haddock/lts-15.5/base-4.13.0.0/Text-Read.html#v:readMaybe" rel="nofollow noreferrer"><code>readMaybe</code></a> instead, and skip the malformed numbers.</p>

<p>Applying both points:</p>

<pre><code>parseLine line = do
    i &lt;- elemIndex '\t' line
    let (word, strCount) = splitAt i line
    count &lt;- readMaybe strCount
    return (word, count)
</code></pre>
    </div>