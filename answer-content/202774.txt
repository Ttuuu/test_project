<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Similar to @Peilonrayz, I would map each of the comparators to a function, but I'd go further.</p>

<ul>
<li><p><strong>Function design:</strong> <code>check_if_condition_was_met(…)</code> is an awkward name, partly because of the unusual use of past tense.  But why make it so wordy?  Couldn't you just call it <code>verify(…)</code>?</p>

<p>Furthermore, it would be customary to put the <code>condition</code> parameter first, and the <code>row</code> second.  It would certainly read more naturally in English, especially after the function rename.  Also, based on the observation that <code>verify(condition)</code> could be considered as a test, it's a general <a href="/questions/tagged/functional-programming" class="post-tag" title="show questions tagged 'functional-programming'" rel="tag">functional-programming</a> principle that the <a href="https://docs.python.org/2/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>condition</code> parameter should be considered more tightly associated</a> with the verification process and should therefore be put first.</p></li>
<li><strong>Use <code>all(…)</code>:</strong>  You want to express the idea that a function should return <code>True</code> if all of the conditions must be met, and <code>False</code> if any condition fails.  You can do that using <a href="https://docs.python.org/2/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> with a <a href="https://docs.python.org/2/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>.   It's a lot less cumbersome than your <code>condition_met</code>, <code>for</code>, <code>continue</code>, and <code>break</code>.  The entire function can be simplified down to a single expression!</li>
<li><p><strong>Naming:</strong>  I think that "key" and "val" are not quite descriptive enough.  I suggest the following renamings:</p>

<p><code>key</code> → <code>comparator</code><br>
<code>val</code> → <code>criteria</code><br>
<code>condition_key</code> → <code>key</code><br>
<code>condition_val</code> → <code>desired_val</code></p></li>
</ul>

<p>I'm also skeptical about some of the behaviour when given anomalous input:</p>

<ul>
<li><strong>Why are there <a href="https://docs.python.org/2/library/functions.html#int" rel="nofollow noreferrer"><code>int(…)</code></a> casts with <code>'min'</code> and <code>'max'</code>?</strong>  Is it for parsing strings as numbers?  None of your example cases needs such parsing, though.  Is it for truncating floats towards zero?  Probably not, but it might have that unintended effect, if the thresholds or data are already numeric.</li>
<li><strong>What happens if the row is missing a key that is specified in the condition?</strong>  Maybe it's not a concern to you, but it might be more appropriate to have the function return <code>False</code> rather than raise a <code>KeyError</code>, as your code does?</li>
</ul>

<p><strong>Consider writing <a href="https://docs.python.org/2/library/doctest.html" rel="nofollow noreferrer">doctests</a></strong> to explain what the function does.  This is a situation where examples are more expressive than words.</p>

<h2>Suggested solution</h2>

<pre><code>COMPARATORS = {
    'in':       lambda v, lst: v in lst,
    'not in':   lambda v, lst: v not in lst,
    'min':      lambda v, n: (v is not None) and (v &gt;= n),
    'max':      lambda v, n: (v is not None) and (v &lt;= n),
}

def verify(condition, row):
    """
    Verify that the specified criteria are all true for the given row.

    &gt;&gt;&gt; rows = [
    ...     {'Flag1':'Y', 'Flag2':'Canada',        'Number':35},
    ...     {'Flag1':'Y', 'Flag2':'United States', 'Number':35},
    ...     {'Flag1':'N', 'Flag2':'United States', 'Number':35},
    ...     {'Flag1':'N', 'Flag2':'England',       'Number':35},
    ...     {'Flag1':'N', 'Flag2':'Canada',        'Number':35},
    ...     {'Flag1':'N', 'Flag2':'Canada',        'Number':5},
    ... ]

    &gt;&gt;&gt; [verify({'in': {'Flag1': ['N'], 'Flag2': ['United States']}}, r)
    ...  for r in rows]
    [False, False, True, False, False, False]

    &gt;&gt;&gt; [verify({'not in': {'Flag1': ['Y']}, 'min': {'Number': 7}}, r)
    ...  for r in rows]
    [False, False, True, True, True, False]

    &gt;&gt;&gt; [verify({'not in': {'Blah': ['whatever']}}, r) for r in rows]
    [True, True, True, True, True, True]
    """
    return all(
        all(
            COMPARATORS[comparator](row.get(key), desired_val)
            for key, desired_val in criteria.iteritems()
        )
        for comparator, criteria in condition.iteritems()
    )
</code></pre>
    </div>