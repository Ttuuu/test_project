<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You may proceed with ternary operators in your case, as the original intention might be applying <em>"Replace nested conditional with guard classes"</em> which is good and well-known refactoring technique.</p>

<p>As was mentioned, the condition itself is evaluated to boolean/logical value, no need to duplicate the <em>"evidence"</em> like <code>var_name = True if True else False</code>.</p>

<p>Additionally, the condition <code>column_type == "text"</code> is duplicated and can be consolidated/extracted into a separate flag <code>isTextType</code>:</p>

<pre><code>for column in columns:
    column_type = column['data_type']
    isTextType = column_type == "text"
    isValid = Someclass.perform_some_validation(column_type) # returns a boolean
    isCalendar = Someclass.is_calendar(column_type) # returns true if it's a time, datetime or datetime-local data type
    isString = Someclass.is_string(column_type) # ditto but with text, mediumtext or varchar

    isHidden = column['hidden'] != 0
    isReadOnly = (configuracion_open == "" and not column['open_insert']) \
                  or (configuracion_open == "Editando_registro" and not column['open_edit'])
    isFile = isTextType and column['type_file']
    isGeo = isTextType and column['type_geo']
    isGeneric = isCalendar or (isString and not isFile)
</code></pre>

<p>Furthermore, your validation logic goes within a <code>for</code> loop, but what if the program would need to validate a single column/record in some other place within application?<br>
To make it more unified and scalable it's better to extract the validation logic into a separate function applying <em>Extract function</em> technique.</p>
    </div>