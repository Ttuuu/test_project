<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This question is tagged C++ but I would say that the code looks more like <em>C with classes</em>.<br>
STL offers you a lot of functionality you could use.</p>

<hr>

<h2>Use STL instead of providing your own implementation</h2>

<p>Trust me, folks who wrote the standard library have a lot of experience, it was tested really hard and it's (almost always) more efficient than what you'd write yourself.</p>

<ul>
<li>Use <code>std::array</code> instead of <code>char grid[Xmax][Ymax]</code> if <em>Xmas/Ymas</em> is known at the compile time, otherwise use <code>std::vector</code></li>
<li>Do not create your own implementation of a linked list. Use <code>std::list</code> instead.</li>
<li>Smart pointers are your friend. Managing memory is highly error-prone. Take a look at <code>std::unique_ptr</code> or <code>std::shared_ptr</code> instead of using <code>Bunny *temp = new Bunny(x, y, a);</code></li>
</ul>

<hr>

<h2>Performance improvements</h2>

<p>Although recent compilers are really efficient in removing unnecessary creation/copying, still they are not perfect yet. </p>

<pre><code>string names[14] = {"Thumper", "Oreo", "Bunn", "Coco", "Cinnabun", "Snowball", "Bella",
                    "Midnight", "Angel", "Shadow", "Hops", "Bugs", "Floppy", "Whiskers"};
</code></pre>

<p>Names array above is created each time the function is executed. This has some performance penalties if compiler optimization does not kick in. Consider marking it as <code>static</code> to create a single array that lasts till you die. </p>

<hr>

<h2>Clarity improvements</h2>

<h3>Formatting</h3>

<p>This one is really important to me personally. If you ever read loads of code after somebody else, this gets quite serious real quick. It helps you keep on the track with the code, helps you better understand what it does and increases your effectiveness.</p>

<p>I am used to camelCase formatting, but whichever you choose, stay consistent. Take for example the following code  </p>

<pre><code>if (&lt;some really long code here with lots of ballast everywhere&gt;){
if (&lt;some more&gt;){
auto k = can();
    while(k){
  doFoo();
  k = can();} }}
</code></pre>

<p>is really hard to read. But if you rewrite it as follows:</p>

<pre><code>if (&lt;first&gt; &amp;&amp; &lt;second&gt;)
{
    auto keepRunning = canContine();
    while (keepRunning)
    {
         doFoo();
         keepRunning = canContinue();
    }
}
</code></pre>

<p>It is more readable and apparent what you are trying to accomplish. This is just an example so it might not make sense but you get the point.  </p>

<h3>Naming</h3>

<p>I know that naming variables <code>a</code>, <code>b</code>, <code>c</code>... are faster to write but you'll get lost pretty quickly if you try to read it later. Using <code>keepRunning</code> in the above example instead of <code>k</code> made it more clear what you're trying to do and what is the purpose of that variable.</p>

<hr>

<p>Yes, I know. It isn't much but should you get started at last. There are many more which I did not include but are the ones I consider quite important. Wish you best luck :)</p>
    </div>