<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure whether you're reinventing the wheel, but you are using the wrong tools for the job.</p>

<p>I've been through the phase where I think I'm doing something unique enough that I need to do something nonstandard. Every time I've done it, I inevitably regret it. Don't do it. It's not a good idea. Use tools very closely to the way they were intended to be used.</p>

<p>You seem to be trying to do basically two things.</p>

<h1>A guidance system to aid developers</h1>

<p>The first is a sort of "brief help" that prompts the users with details about the API.</p>

<p>You implement this with <code>repr</code>, but <code>repr</code> is absolutely the wrong tool for this job. 
<code>repr</code> is <em>not</em> intended to return help messages. <code>repr</code> is intended to be a quick and dirty introspection tool, showing just enough information for the programmer to identify the object they're looking at. You're reducing their ability to do so by misusing it, which is far and away something I would not advise for beginners.</p>

<p>To be honest, I wouldn't recommend building this into Python itself at all. Doing so is very nonstandard. Instead, I'd be more inclined to generate a set of HTML docs for them to use. <a href="https://docs.python.org/2.7/library/pydoc.html" rel="nofollow noreferrer">pydoc</a> is built in and is probably a good starting point. <a href="http://www.sphinx-doc.org/en/master/" rel="nofollow noreferrer">Sphinx</a> is also well known and used. <a href="https://wiki.python.org/moin/DocumentationTools" rel="nofollow noreferrer">Python's wiki</a> lists others to consider as well. Some of these will allow you to include documentation not just of the API, but also custom pages including examples and what have you. A set of HTML docs is likely to be infinitely more usable to your users since it doesn't require backspacing the command they're in the middle of typing.</p>

<p>Bottom line: I'd use the existing standard tools to provide your users with this kind of guidance, and the standard is to make it external to the code itself.</p>

<p>You might also want to take note of the <a href="https://docs.python.org/2/library/functions.html#dir" rel="nofollow noreferrer"><code>dir</code> command</a>. <code>dir(o)</code> lists the names bound to <code>o</code>, which includes attributes, descriptors (similar to "properties" in other languages), and methods. This can be combined with <code>pprint</code> or <code>pformat</code> for easier to read output, and the <code>if</code> clause of list comprehensions can be used to filter out private names (i.e., <code>[a for a in dir(o) if not a.startswith('_')]</code>) or based on other conditions. I use this myself to explore an API when the documentation is poor. <a href="https://docs.python.org/2/library/functions.html#vars" rel="nofollow noreferrer"><code>vars(o)</code></a> may also be useful for viewing attributes.</p>

<p>If it absolutely <em>must</em> be accessible by code, I think I'd probably implement it as a new "protocol". Something like this:</p>

<pre><code>class PROJECT(object):
    # Your other code
    @staticmethod
    def _mytips():
         return """
             PROJECT("bob")
               intantiate with p = PROJECT(name, Y_factor=None, use_MQTT=False)
               later use start_MQTT(), stop_MQTT(), and
               add THINGs with p.new_CARROT(name) or p.new_ONION(name, n_rings=None)
         """
</code></pre>

<p>Then in another module, you can leverage this <code>_mytips()</code> method:</p>

<pre><code>import os

def tips(o):
    try:
        raw_tips = o._mytips()
        # Use standardized indentation
        return (os.linesep + '  ').join([l.strip() for l in raw_tips.strip().splitlines()])
    except AttributeError:
        raise ValueError('object does not support tips')
</code></pre>

<p>Then it can be used like this:</p>

<pre><code>&gt;&gt;&gt; tips(PROJECT)
PROJECT("bob")
  intantiate with p = PROJECT(name, Y_factor=None, use_MQTT=False)
  later use start_MQTT(), stop_MQTT(), and
  add THINGs with p.new_CARROT(name) or p.new_ONION(name, n_rings=None)
&gt;&gt;&gt; p = PROJECT()
&gt;&gt;&gt; tips(p)
PROJECT("bob")
  intantiate with p = PROJECT(name, Y_factor=None, use_MQTT=False)
  later use start_MQTT(), stop_MQTT(), and
  add THINGs with p.new_CARROT(name) or p.new_ONION(name, n_rings=None)
</code></pre>

<p>Calling the method <code>_mytips</code> gives the <code>tips</code> call a standard method to look for, and prefixing it with an underscore indicates it's not intended to be called directly. Note that you should <em>not</em> use something like <code>__mytips__</code>, as the magic method syntax is reserved for the language or the standard library. Making it static means you can use it on other the class directly or an instance. You still have to write the documentation yourself or generate it somehow. This is not particularly common, but at least this is in line with the standard "protocol pattern" Python uses for things that need to be implemented by lots of different classes/objects. Other devs will recognize what you're doing when they look at the <code>tips</code> code.</p>

<p>I'd still prefer an actual help page open in the browser, though, and don't really recommend it. You might consider loading the tips from an actual external document, giving you both with the same content.</p>

<h1>Informational messages</h1>

<p>The other thing you seem to want to implement is informational messages. The standard solution for this is <em>logging</em>. That is definitely what you're doing when you print the "added" messages. Using the logging module in those cases would look like this:</p>

<pre><code>def new_carrot(self, name):
    """def new_carrot"""

    carrot = Carrot(project=self, name=name)

    self.things.append(carrot)
    logging.debug("a Carrot was added!")
    return carrot
</code></pre>

<p>But requires a tiny bit of set up:</p>

<pre><code>import logging

logging.basicConfig(level=logging.DEBUG)
</code></pre>

<p>You can get fancier if you want more control over the format, but I'm not going to get into all those details here.</p>

<p>This also gives your users the option of disabling these messages by cranking up the message level:</p>

<pre><code>logging.getLogger().setLevel(logging.INFO)
</code></pre>

<h1>Other concerns</h1>

<h3>Resource management</h3>

<p>I notice your <code>PROJECT</code> class starts up something in its initializer:</p>

<pre><code>status = self.start_MQTT()
</code></pre>

<p>and then has a stop method as well.</p>

<p>The Python standard for managing resources is <a href="http://book.pythontips.com/en/latest/context_managers.html" rel="nofollow noreferrer"><strong>context managers</strong></a>. Context managers are a fantastic little tool that will make your code much simpler. If you convert <code>PROJECT</code> to one, then callers will have much less boilerplate managing it:</p>

<pre><code>with PROJECT("myproj", use_MQTT=True) as p:
    p.new_CARROT("carrot 1")
</code></pre>

<p>Yes, that block of code is correct. There is no need to call <code>stop_MQTT</code>, and that's because the <code>with</code> block invokes the method to release it automatically:</p>

<pre><code>class PROJECT(object):
    def __init__(self, name, Y_factor=None, use_MQTT=False):
        # Everything EXCEPT starting the server

    def __enter__(self):
        if self.use_MQTT:
            # do stuff
            status = 'started'
            self.client = 'client instance'
            logging.debug("MQTT status: {}".format(status))

    def __exit__(self, type, value, traceback):
        if self.status == 'started':
            # do stuff to stop server
            status = 'stopped'
        return status

    # Other methods
</code></pre>

<p>Some details may not exactly line up with what you need to do, but you have pseudocode here anyway. <em>Much</em> simpler for your callers.</p>

<h3>Use <code>super</code></h3>

<p>You have this call:</p>

<pre><code>THING.__init__(self, project, name)
</code></pre>

<p><a href="https://stackoverflow.com/a/27134600/1394393">Don't do that</a>. Use <code>super</code>:</p>

<pre><code>super(ONION, self).__init__(project, name)
</code></pre>

<h3>Naming and formatting standards</h3>

<p>Please read <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> for naming conventions. Right off the bat, I notice that <code>PROJECT</code> would be <code>Project</code> and <code>Y_factor</code> should be <code>yfactor</code>. (One might argue that <code>y_factor</code> is also acceptable, but PEP8 notes that underscores should be used "to improve readability". Putting it after just a <code>y</code> doesn't really add any readability.)</p>

<h1>Conclusion</h1>

<p>The bottom line here is that Python has a lot of norms and standards, and your code doesn't conform to them. This isn't just a matter of being pedantic. Python's norms are built around <em>practical</em> concerns and avoiding <em>real world problems</em>. When you use Python the way it was intended to be used, it will make solving your problems easier.</p>

<p>If you want a sort of intro to the idea of writing "Pythonic" code and why it's important and a practical example, check out Raymond Hettinger's <a href="https://youtu.be/wf-BqAjZb8M" rel="nofollow noreferrer">Beyond PEP8</a>.</p>
    </div>