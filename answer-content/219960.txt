<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have put up a lot of code for review<sup>1</sup>, so my feedback cuts some corners. Maybe other members of the community will jump on.</p>

<hr>

<h2>Style</h2>

<p>Since your code base is quite substantial, there are some places where the style is not consistent. I will link to the relevant parts in <a href="https://www.python.org/dev/peps/pep-0008" rel="nofollow noreferrer">Python's official Style Guide (PEP8)</a> in the following. Before pointing out some of these spots, I would highly recommend to look into an IDE (e.g. PyCharm, Spyder, Visual Studio Code, Atom, ...) with a built-in style checker (e.g. <a href="https://www.pylint.org/" rel="nofollow noreferrer">pylint</a> or <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">flake8</a>, both may also be used standalone). These will help you to avoid those pesky traps and the overall appearance will be more consistent.</p>

<p><strong><a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="nofollow noreferrer">Whitespace in Expressions</a></strong><br>
There are some places like </p>

<pre class="lang-py prettyprint-override"><code>df_dict = {
    'df_validIndexDate':self.df_validIndexDate, 
    'df_validDx':self.df_validDx, 
    'df_validRx':self.df_validRx, 
    'df_validResidence_is1only':self.df_validResidence_is1only,
    }
</code></pre>

<p>where you miss out on spaces between the colons in dictionary definitions. The same goes for lines like <code>signal_total+=1</code> (should be <code>signal_total += 1</code>), etc.</p>

<p><strong><a href="https://www.python.org/dev/peps/pep-0008/#prescriptive-naming-conventions" rel="nofollow noreferrer">Names</a></strong><br>
The official recommendation is to use <code>snake_case</code> for variables and method/function names and <code>CamelCase</code> for classes, and most Python libraries consent with it. You also follow it most of the time, but some variable and function names use a funny mix one may call <code>snake_camelCase</code>, e.g. <code>self.df_validIndexDate</code> or <code>def spRx_addOn_tag(...)</code>. IMHO it's best to pick either one and follow it consistently.</p>

<p><a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer"><strong>Blank lines</strong></a><br>
Use the power of blank lines to give a more robust visual structure to your code. E.g. it is common to seperate class definitions and top-level functions with two blank lines. You may also use a single blank line within function/method bodies where appropriate to group lines of code.</p>

<p><a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer"><strong>Imports</strong></a><br>
This topic is closely related to the previous one. The PEP8 recommendation is to group import by 1) standard library imports, 2) third-library imports, 3) imports from within your module/code-structure. It sometimes also makes sense to use subgroubs, e.g. if you import a lot of third-party libraries with different topics. Applying this principle to your code could look like this:</p>

<pre class="lang-py prettyprint-override"><code>import sys
import random
import ctypes
import datetime
from abc import ABC, abstractmethod

import numpy as np
import pandas as pd
import pysnooper

import var_creator.var_creator as vc
import feature_tagger.feature_tagger as ft
import data_descriptor.data_descriptor as dd
import data_transformer.data_transformer as dt
import helper_functions.helper_functions as hf
import sec1_data_preparation as data_prep
import sec2_prepped_data_import as prepped_data_import
</code></pre>

<p>Side note: Visual Studio Code tells me that the imports of <code>sys</code>, <code>random</code>, and <code>pysnooper</code> (as well as <code>dd</code>, <code>dt</code>, and <code>hf</code>) are actually not used in the code you posted. But that might be an artifact of bringing the code to this site.</p>

<p><strong><a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">Documentation</a></strong><br>
I'ld say you did a reasonable job here. Most of your methods/functions have a little something of documentation. However, your classes lack any form of real documentation. There are some loose bits speaking of a <code>Main class</code> and a <code>Helper class</code>, but I think you could significantly improve it. Classes can also be documented using the <code>'''docstring style'''</code> and I would highly recommend to do so. Since you are working in the "scientific Python stack", you could also have a look at <a href="https://numpydoc.readthedocs.io/en/latest/format.html" rel="nofollow noreferrer">NumPy's docstring conventions</a> to boost the expressiveness even further.</p>

<h2>Code</h2>

<p>After picking on the style for a while, lets have a look at some parts of the actual code.</p>

<p><strong>Parenthesis in conditions</strong><br>
This is on the brink between style and code. Usually, you won't find lines like <code>if (self.df_id.lower() == 'dad'):</code> a lot in Python code. Most often it'll just be <code>if self.df_id.lower() == 'dad':</code>, since parenthesis are usually only put around the condition if it spans multiple lines.</p>

<p><strong>Assignments and copies</strong><br>
From what I know about Python and pandas, I would say <code>self.df_master = self.df_initialPool</code> does not create a copy. Instead, you will also modify <code>self.df_initialPool</code> when manipulating <code>self.df_master</code> afterwards. Since you are using <code>merge</code>, and <code>merge</code> will create a copy if not told otherwise, I think you can get away with it at that point. You will have to check if this is acceptable if there are other instances of this "pattern".</p>

<p><strong>Iterating over dictionary</strong><br>
There is</p>

<pre class="lang-py prettyprint-override"><code>df_dict = {
    'df_validIndexDate': self.df_validIndexDate,
    'df_validDx': self.df_validDx,
    'df_validRx': self.df_validRx,
    'df_validResidence_is1only': self.df_validResidence_is1only,
}
for df in df_dict.values():
    ...
</code></pre>

<p>almost at the same spot as the previous one. If I have not missed out on a substantial part of the function, the keys of the dictionary are never actually used. This means, the same effect can be accomplished using a simple list:</p>

<pre class="lang-py prettyprint-override"><code>df_list = [self.df_validIndexDate, self.df_validDx, 
           self.df_validRx, self.df_validResidence_is1only]
for df in df_list:
    self.df_master = self.df_master.merge(df, on='PATIENT_ID', how='left')
</code></pre>

<p>As a bonus, this will guarantee that the order in which these dataframes are merged is preserved also in Python versions prior to 3.6, where dicts where unordered (as far as a I know, this is still not an official language feature and considered an implementation detail). However, from what I can see that should be not an issue here.</p>

<p><strong>Exception handling</strong><br>
Code parts like</p>

<pre class="lang-py prettyprint-override"><code>try:
    first_signal_date = signal_date_list[0]
except:
    first_signal_date = np.NaN
</code></pre>

<p>can have unexpected/unwanted effects. Since you're catching all exceptions here, you may also miss things like wrong variables names or keyboard interrupts. So when catching exceptions, be as specific as possible on what you expect to go wrong. You can even catch <a href="https://stackoverflow.com/a/6470452/5682996">multiple exceptions on a single line</a> (just in case you were not aware of this). Using</p>

<pre class="lang-py prettyprint-override"><code>try:
   ...
except Exception:
    pass
</code></pre>

<p>is only a miniscule improvement, since <code>Exception</code> is still quite high up in the <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">exception hierarchy</a>.</p>

<p><strong>Memory management</strong><br>
I just wanted to bring to your attention that using <code>del t_obj, df_dict</code> does not immediately free the memory occupied by those variables. It only decrements the internal reference count. The excact moment when the memory will be freed still depends fully on the garbage collector. See also <a href="https://stackoverflow.com/a/14969798/5682996">this</a> SO post on that topic.</p>

<hr>

<p>Well, that's it for the first round. Maybe other members of the community or future me can give you more detailed feedback regarding the coding techniques you asked about.</p>

<hr>

<p><sup>1</sup> It may be worth to split those 600+ lines into more files for you to work with.</p>
    </div>