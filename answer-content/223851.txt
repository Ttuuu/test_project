<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with all that mickmackusa has said, but I have four additions:</p>

<ul>
<li>The return value must be defined for cases where the values in the yearly array add up to less than the total value that was spent. I chose to return <code>false</code> for this. So when the function return <code>false</code> it means that it cannot compute the payback years, given the input. </li>
<li>When the total value that was spent exactly matched the total sum of the array (15,000), the function of mickmackusa will return nothing. That's because of the <code>if ($newTarget &lt; 0)</code>, this should be <code>if ($newTarget &lt;= 0)</code>.</li>
<li>The names chosen are not the best possible. What information does <code>$array</code> or <code>$target</code> contain? The first name is chosen based on the type of the variable, and the second seems to be based on what the function needs to do. I've always learned that a variable name should reflect the meaning of the data it contains. The names I use in the code below might be a bit more verbose than the old ones, but they tell you clearly what they contain. Correctly chosen variable names help you to understand your own code, especially if you look at it again after a few years.</li>
<li>I've done the same thing with the algorithm inside the function. The function of mickmackusa works, but it is not the easiest to read or understand. A <code>$newTarget</code> is created and later replaces the original <code>$target</code>. So the target changes? Well, yes, it does. In the end this is not a complicated function, and it is understandable, but by using better names the algorithm can better explain itself. I use a variable called <code>$totalSaved</code> that keeps track of what was saved in total.</li>
</ul>

<p>This is new code:</p>

<pre><code>&lt;?php

$savingsPerYear = [1000.00, 2000.00, 3000.00, 4000.00, 5000.00];
$totalSpent     = 7500.00;

function getPaybackYears($totalSpent, $savingsPerYear) {
    $totalSaved = 0.00;
    foreach ($savingsPerYear as $yearNo =&gt; $savedThisYear) {
        $totalSaved += $savedThisYear;
        if ($totalSaved &gt;= $totalSpent) {
            $spendingLeftThisYear = $totalSpent - ($totalSaved - $savedThisYear);
            return round($yearNo + $spendingLeftThisYear / $savedThisYear, 2);
        }
    }
    return false;
}

$payback = getPaybackYears($totalSpent, $savingsPerYear);

if ($payback === false) echo "payback not reached";
                   else echo "payback in years: " . $payback;

?&gt;
</code></pre>

<p><strong>In summary:</strong> I've corrected two bugs and improved readability.</p>
    </div>