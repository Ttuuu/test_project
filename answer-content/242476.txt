<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Efficient file I/O</h1>

<p>By default, files opened with <code>fopen()</code> are buffered, meaning that not every call to <code>fread()</code> or <code>fwrite()</code> will result in a system call. Instead, the C library has an internal buffer and will try to read and write larger chunks at a time. However, you are still paying for the overhead of a regular function call each time you call <code>fread()</code> and <code>fwrite()</code>. To avoid this, it is best that you read and write in large chunks in your own code as well.</p>

<p>While you could try to read in the whole file at once, or even use technique like <code>mmap()</code> to memory map the file, you can already get very good performance by reading and writing blocks of say 64 kilobytes at a time. This avoids using a lot of memory.
Of course, you have to handle the last block not being exactly 64 kilobytes large, but that is quite easy to deal with.</p>

<p>Furthermore, <code>fread()</code> and <code>fwrite()</code> allow you to specify the size of an element and the number of elements you want to read, this comes in handy to ensure you read in a whole number of 4-byte codepoints.</p>

<p>I would structure your code like so:</p>

<pre><code>uint32_t bufferIn[16384]; // 16384 4-byte code points = 64 kB
char bufferOut[65536];

size_t countIn;

while ((countIn = fread(bufferIn, sizeof *bufferIn, sizeof bufferIn / sizeof *bufferIn, ptr)) &gt; 0) {
    // There are countIn codepoints in the buffer
    for (size_t i = 0; i &lt; countIn; i++) {
         uint32_t codepoint = ...; // Convert bufferIn[i] to native endian here.

         // Write UTF-8 to bufferOut here.
         // If bufferOut is almost full, fwrite() it and start writing to it from the start.
    }
}

// Flush the remaining bytes in bufferOut here.
</code></pre>

<h1>Don't use floating point math for integer problems</h1>

<p>Avoid using floating point math when you are dealing with integers. It is hard to get it right, and converting <code>int</code> to <code>double</code>, doing some math operation, and then converting back again can be quite slow.</p>

<p>There are several ways to get the <a href="https://stackoverflow.com/questions/2589096/find-most-significant-bit-left-most-that-is-set-in-a-bit-array">highest set bit in an integer</a>. If you want a portable one, I recommend using one of the <a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogLookup" rel="noreferrer">bit twiddling hacks</a>. Sometimes compilers will even recognize such a bit twiddling hack and convert it to a single CPU instruction if possible.</p>
    </div>