<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Addressing your questions</h2>

<blockquote>
  <ol>
  <li><strong>Code style/cleanliness</strong> Does the fact that I have so many functions make it more difficult to keep track of how data is passed around?</li>
  </ol>
</blockquote>

<p>I wouldn't say it makes it more difficult to keep track of how data is passed around...</p>

<blockquote>
  <ol start="2">
  <li><strong>The repos map</strong>: Is it okay that I have the global repos map up at the top? Is my approach here okay/understandable? What about the get convenience function I defined: is there a better approach? </li>
  </ol>
</blockquote>

<p>A <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">class</a> could be used to store the <em>repos</em> as a field declaration, however if you wanted it to be <em>private</em> such a feature is currently experimental<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations" rel="nofollow noreferrer">1</a></sup>, though <a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript" rel="nofollow noreferrer">the revealing module pattern</a> could be used for that.</p>

<p>You could also use a plain-old Javascript Object (i.e. POJO) instead of a set as long as the keys are only going to be string literals but then iteration of the items would not be in the same order they were inserted. Refer to answers to <a href="https://stackoverflow.com/q/18541940/1575353">Map vs Object in JavaScript
</a> for more information.</p>

<h2>Other feedback</h2>

<p>Many variable are declared with <code>let</code> but never re-assigned (e.g. <code>let request = new XMLHttpRequest();</code> in <code>requestRepoData</code>). It is recommended that you default to using <code>const</code> to avoid accidental re-assignment and then use <code>let</code> when you deem it necessary. </p>

<hr>

<p>I see <code>setAttribute()</code> is used in certain places to add class names to elements - for example:</p>

<blockquote>
<pre><code>let card = document.createElement('section');
card.setAttribute('class', 'project');
</code></pre>
</blockquote>

<p>There is a method: <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Methods" rel="nofollow noreferrer"><code>classList.add()</code></a> that can be used instead:</p>

<pre><code>card.classList.add('project');
</code></pre>

<hr>

<p>For this line in <code>addRepo()</code>:</p>

<blockquote>
<pre><code>repos.set(officialName, { "customName" : customName, "topics" : topics, "card" : null });
</code></pre>
</blockquote>

<p>The key names don't need to be in double quotes unless the names contain special characters like hyphens.</p>

<pre><code>repos.set(officialName, { customName : customName, topics : topics, card : null });
</code></pre>

<p>Additionally, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Property_definitions" rel="nofollow noreferrer">the shorthand property definition notation</a> could be used to simplify this code to this:</p>

<pre><code>repos.set(officialName, { customName, topics, "card" : null });
</code></pre>
    </div>