<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Recommendations</h2>

<p>The less tasks that a subroutine performs the easier it is debug and modify.  If I were to put this code into production (distribute it for general use) I would extract these functions from the main code:</p>

<ul>
<li><strong>ApplicationState(PauseEvents):</strong> - handles the application state </li>
<li><strong>getWorksheetNames()</strong>  - returns <code>Arquivo()</code>.  This will allow you to tests whether the worksheets exists in the main workbook and whether the files exists without having to run the main code.  This alone will reduce your main code from 49 lines to 31.  I personally like to keep my subroutines no bigger than 25 - 30 lines whenever possible.</li>
<li><strong>getXMLWorkBook(FilePath) As Workbook</strong> - use <code>Len(Dir(FilePath)) &gt; 0</code> to test if the file exists, if so, open and return the workbook.</li>
</ul>

<p>Next I would add error handlers to test if the workbook exists or if there are any missing worksheets.   </p>

<h2>Excel Do's and Don't</h2>

<p>There are very few times where you'll need to Select or Activate an Object.  </p>

<p>Watch: <a href="https://www.youtube.com/watch?v=c8reU-H1PKQ&amp;t=3123s&amp;index=5&amp;list=PLNIs-AWhQzckr8Dgmgb3akx_gFMnpxTN5" rel="noreferrer">Excel VBA Introduction Part 5 - Selecting Cells (Range, Cells, Activecell, End, Offset)
</a></p>

<p>There is no reason to use <code>Application.DisplayAlerts = False</code> in this code.  <code>Workbook.Close SaveChanges:=False</code> does not display any alerts.</p>

<p>Range references should be fully qualified.  If you are working with multiple workbooks, you should also qualify the worksheets to their parent workbook.  It might take a little getting used to but fully qualifying your references will save you a ton of headaches.  What usually happens is that you get the code working great and but later when you come back and to modify it you get unexpected results.  This can be especially tough to resolve in a large project.</p>

<h2>Refactored Code</h2>

<p>Here is how I would refactor the code for in-house use.  </p>

<pre><code>Sub AtualizarRelatorioGeral()
    Const BasePath As String = "C:\macrosm\prerelatoriolucimara\FileName.xls"
    Dim wsName As Variant, wbName As String
    ApplicationState True

    For Each wsName In Array("zpp03ontem", "vl10a", "mb51consumomensal", "mb51repassegerado", "mb52peixerev", "mb52peixepro", "mb52exp", "mb52repassesaldo", "zsd17", "zsd25fat", "zsd25dev", "mc.9estoquecd", "mc.9consumo", "mc.9centro", "mc.9cdhipet", "mc.9valor", "zpp25", "mc.9produto")
        wbName = Replace(BasePath, "FileName", wsName)
        With Workbooks.OpenXML(wbName)
            ThisWorkbook.Worksheets(wsName).Cells.Clear
            .Worksheets(wsName).Cells.Copy ThisWorkbook.Worksheets(wsName).Range("A1")
            .Close SaveChanges:=False
        Next
    Next

    ThisWorkbook.Worksheets("Sheet1").Cells(4, 16).Value = Date

    ApplicationState False
End Sub

Sub ApplicationState(PauseEvents As Boolean)
    With Application
        .Calculation = IIf(PauseEvents, xlCalculationManual, xlCalculationAutomatic)
        .ScreenUpdating = Not PauseEvents
        .EnableEvents = Not PauseEvents
    End With
End Sub
</code></pre>
    </div>