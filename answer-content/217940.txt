<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the end, since this was only needed (for now) for <span class="math-container">\$LU\$</span> decomposition, I ended up ditching the lower/upper subclasses and went for the classical approach instead (as suggested by @harold), which is storing the lower and upper matrices of the decomposition in a single matrix, by taking advantage of the fact that <span class="math-container">\$L\$</span> is unit triangular:</p>

<p><span class="math-container">$$ \begin{pmatrix} u_{1,1}    &amp; u_{1,2}    &amp; u_{1, 3} &amp; \cdots        &amp; u_{1,n}\\
\ell_{2,1} &amp; u_{2,2}    &amp; u_{2, 3} &amp; \cdots        &amp; u_{2,n}\\
\ell_{3,1} &amp; \ell_{3,2} &amp; u_{3, 3} &amp; \cdots        &amp; u_{3,n}\\
\vdots     &amp; \vdots     &amp; \ddots   &amp; \ddots        &amp; \vdots\\
\ell_{n,1} &amp; \ell_{n,2} &amp; \cdots   &amp; \ell_{n, n-1} &amp; u_{n, n}\\
\end{pmatrix} $$</span></p>

<p>where <span class="math-container">\$\ell_{i,j}\$</span> and <span class="math-container">\$u_{i,j}\$</span> are the elements of <span class="math-container">\$L\$</span> and <span class="math-container">\$U\$</span> respectively. </p>

<p>So I made an <span class="math-container">\$LU\$</span> class that internally stores a matrix as mentioned, with read-only interfaces for the lower/upper matrices:</p>

<pre class="lang-cpp prettyprint-override"><code>class LUDecomposition {
public:
    /**
     * Compute the LU decomposition of a matrix.
     * @param mat  matrix to decompose
     * @param tol  numerical tolerance
     * @throws SingularMatrixError if mat is singular
     */
    explicit LUDecomposition(const Matrix &amp;mat, double tol = numcomp::DEFAULT_TOL);
    LUDecomposition() = default;

    class L;
    class U;
    L lower() const;
    U upper() const;

    // [...]

private:
    Matrix _mat;  ///&lt; decomposition matrix (internal data storage)

    // [...]
};
</code></pre>

<p>Here are the interfaces for <code>LUDecomposition::L</code> and <code>LUDecomposition::U</code>:</p>

<pre class="lang-cpp prettyprint-override"><code>class LUDecomposition::L {
    L(const LUDecomposition &amp;luObj) : _luObj(luObj) {}

    double operator()(index_t i, index_t j) {
        if (j &gt; i) throw std::out_of_range();
        if (i == j) return 1;
        return _luObj._mat(i, j);
    }

private:
    const LUDecomposition &amp;_luObj;
}

class LUDecomposition::U {
    U(const LUDecomposition &amp;luObj) : _luObj(luObj) {}

    double operator()(index_t i, index_t j) {
        if (i &gt; j) throw std::out_of_range();
        return _luObj._mat(i, j);
    }

private:
    const LUDecomposition &amp;_luObj;
}
</code></pre>

<p>I'm hesitant on whether these specific interfaces should inherit from <code>Matrix</code> in some way â€” they do offer (a very reduced subset of) <code>Matrix</code> functionality, but they are fairly different in some regards.</p>

<p>This also has the advantage of not having to store the 1's in the lower matrix, as opposed to the more general approach for triangular matrices. The disadvantages are less conceptual separation between the two and the users having to be aware of the LU decomposition's internal representation.</p>

<hr>

<p>As you can guess, the definitions for <code>LUDecomposition::lower</code> and <code>LUDecomposition::upper</code> are just</p>

<pre class="lang-cpp prettyprint-override"><code>LUDecomposition::L LUDecomposition::lower() const { return L(*this); }

LUDecomposition::U LUDecomposition::upper() const { return U(*this); }
</code></pre>
    </div>