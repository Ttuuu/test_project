<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll be keeping a bit general with this. Over the whole, looks good. That means I won't be doing a line-by-line, but instead lifting out the points grabbing my attention.</p>

<h3><code>if __name__ == "__main__":</code></h3>

<p>You should <a href="https://stackoverflow.com/a/419185/4331885">guard</a> your code. It's a good thing that you already have one, but not all your code is inside it. For example, there's a rogue <code>input()</code> statement above ITEMS_DATA. Just do that inside the guard as well, and feed the result to any functions that need it. </p>

<h3>Naming</h3>

<p>You have a <code>Shop</code> class. What data does this contain? It's attributes set in <code>__init__()</code> are: ID, username, password, coins, my_items. These aren't things about the shop, these are actually properties of the player buying the items. </p>

<p>The actual shop's items are all in ITEM_DATA, which is the correctly named global. </p>

<p>So if you see me refer to a <code>Player.purchase()</code> method later, you'll know what I'm referring to ;)</p>

<h3><code>print()</code>ing in a class method</h3>

<p>is generally a bad idea. Instead, return a string which can then be printed. Examples of methods that should really be doing this are <code>show_all_items()</code>, which really should be a function <code>get_all_items()</code> which returns a list for consumption, or <code>render_all_items()</code> which returns a string you can then print from outside. </p>

<p>Same issue but different in <code>purchase()</code>, which calls <code>input()</code>. A class' methods shouldn't be about control flow, they should only handle the class' data and it's primary purpose. A pseudocode example could be:</p>

<pre class="lang-py prettyprint-override"><code>def purchase(self, item):
    if not item_exists() or not can_purchase():
        return False
    self.add_item(item)
    self.coins -= item_cost
# Calling code:
item = input("What do you want to buy?")
if person.purchase(item):
    print(f"Bought a {item}!")
else:
    print(f"Oh noes! Failed to buy {item}!")
</code></pre>

<p>If you want to have some excersize with Exceptions instead, you could also raise a InsufficientMoneyError or ItemDoesNotError exception, and catch those in your calling code, using them to print the correct problem. But I'm at risk of veering off-topic here, and if you want a howto, ask at StackOverflow. Link it in a comment and I'll happily type it out.</p>

<h3>Login security</h3>

<p>I'm going to assume you're not planning on using this login system for "real" purposes. A long diatribe on login security would also be offtopic, I think. Just be aware that this sort of system should not go beyond private toys like this, and even then it might be worth it to factor it out a bit clearer so you can replace it with a real system if the need ever arises.</p>

<h3>Generator Expressions</h3>

<p>You've already used a list comprehension for all_usernames, but you aren't using this tool to it's full potential yet. <code>show_all_items()</code> comes to mind. If we were to make this a function that returns a single string, it could look like this:</p>

<pre class="lang-py prettyprint-override"><code>@staticmethod
def all_items() -&gt; str:
    return "\n".join(f"{key: &lt;10}:{value}" for key, value in ITEMS_DATA.items())
</code></pre>

<p>The formatting string "{key: &lt;10}" right-fills the key to length 10 with spaces. If you want both keys and values of a dict, you should use <code>dict.items()</code> to get both instead of indexing into it - it's faster, but more important it's more readable. Then we set up a generator expression - the big brother of the list comprehension - and feed that to a <code>str.join()</code> which glues them together with a newlines between every line. Then it returns the one big string, so you can just call <code>print(shop.all_items())</code> if you want to.</p>

<p>Also, note the <a href="https://stackoverflow.com/q/136097/4331885"><code>@staticmethod</code></a> decorator. You're not using any of the class' variables. So we don't need access. You could of course split it off, but if you feel the functionality is tied to the class in a close way, <code>@staticmethod</code> is the way to go.</p>

<h3>Annotations</h3>

<p>This is never <em>required</em> for Python, but it's a good habit to get into. Most importantly, it makes you think about what your functions do, and what you functions should return. Smart IDE's can also warn you about feeding in the wrong values to a function, or expecting the wrong return values. </p>

<p>A minor example is in the <code>all_items()</code> method I showed upwards a bit - it shows that you should expect a string as a return value. Another would be:</p>

<pre class="lang-py prettyprint-override"><code>from typing import Union
# ...Other Code...
def purchase(self, item:str) -&gt; Union[str, None]:
</code></pre>

<p>Which shows that this function either returns a string, or None. And this begs the question - why are we returning different things? Perhaps we should refactor this function to either return strings only, or None only?</p>

<p>And the answer is of course, yes we should. I'll leave that decision to you - there's no "better practice" which forces you to use either. My personal choice would be what I did a bit upwards, and return a bool indicating success or failure of the purchase.</p>

<p>(Note for other reviewers: Yes, I could have used Optional here. But semantically, my not very humble opinion is that that should be restricted to arguments. Sue me. )</p>
    </div>