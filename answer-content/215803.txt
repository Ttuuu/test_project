<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure how much there can be gained performance-wise, since the problem has an inherent theoretical complexity limit (quite nicely elaborated in <a href="https://codereview.stackexchange.com/a/215802/92478">this</a> answer) not even the most well crafted code can overcome. Additionally, Python usually is not terribly fast when you have a lot of (nested) loops.</p>

<p>Python IDEs like Spyder come with a built-in profiler tool (<a href="https://docs.spyder-ide.org/profiler.html" rel="nofollow noreferrer">see the docs</a>), which allows you to identify performance bottlenecks. Having a quick run with your small example code showed me that on my machine most of the time is actually spent in printing the values.<br>
Feel free to give it a go with more realistic inputs on your machine.</p>

<hr>

<p>Nevertheless, I think your code could easily gain quite a bit on the style and clarity side.</p>

<p>What do I mean by this? Well, let me elaborate:</p>

<p>What (I think) your code wants to do:</p>

<ol>
<li>Build a dictionary/hash map where each query word is a key that maps to a collection of indices of all sentences where the query word occurs.</li>
<li>Use this dictionary to determine the indices of all sentences containing all the query's words</li>
<li>Print those indices to the command line</li>
</ol>

<h2>Printing</h2>

<p>Let's start with an easy one, #3. Your code was</p>

<pre><code>if len(final_set) == 0:
    print(-1)
else:
    for index in sorted(final_set):
        print(str(index), end=' ')
    print()
</code></pre>

<p>which does what you want to do. But can we do better?
I would like to propose as slight improvement.</p>

<pre><code>if final_set:
    print(' '.join(str(i) for i in sorted(final_set)))
else:
    print(-1)
</code></pre>

<p>So what is going on here?<br>
First, <code>if final_set:</code> quite obviously replaces <code>if len(final_set) == 0:</code>. <br>
How? In Python empty "iterables" like lists, tuples, strings or in your case sets evaluate to <code>False</code> which would then print <code>-1</code> in the console, just as before.<br>
Next, <code>" ".join(str(i) for i in sorted(final_set))</code> uses list comprehension together with the built-in <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">join</a>-function to generate the final indices output.
This does basically the same as your original code and is just a little shorter, as a bonus you get the newline for free.</p>

<h2>Building the hash map</h2>

<p>To get to point #1, most of the heavy lifting is done in the <code>else</code> branch of the major <code>if</code> statement in your code.<br>
So far so straightforward, not much to gain here. In my oppinion, <code>words = sentence.split()</code> should not be necessary. Python's <code>in</code> is capable of finding the word in the full string, too.<br>
One could argue that it would be increase clarity and maintainability to place move this functionality to the beginning of the function (or in a seperate function altogether) to better seperate subtasks #1 and #2.</p>

<h1>Using the hash map</h1>

<p>Last but not least #2.<br>
Your code in the <code>if</code> branch gets a little bit involved here.<br>
If you build your word_map before processing the sentences and I'm not mistaken this can be simplified quite a bit to</p>

<pre><code>final_set = set()
for word in query.split():
    if not final_set:
        final_set = word_map.get(word, set())
    else:
        final_set = final_set.intersection(word_map.get(word, set()))
    if not final_set:
        break
</code></pre>

<p>I have talked about using the "trueness/falseness" of iterables before so the use here should not suprise you. <code>word_map.get(word, set())</code> is just a way of saying "get me the value of key <code>word</code>, and if there's nothing, return <code>set()</code>".<br></p>

<h1>Final code</h1>

<p>My final code was</p>

<pre><code>def textQueriesRevised(sentences, queries):
    # 1. build the hash map
    word_map = {}
    for query in queries:
        for query_word in query.split():        
            for i, sentence in enumerate(sentences):
                if query_word in sentence:
                    word_map.setdefault(query_word, []).append(i)
    for query in queries:
        # 2. look up in the hash map
        final_set = set()
        for word in query.split():
            if not final_set:
                final_set = set(word_map.get(word, []))
            else:
                final_set = final_set.intersection(word_map.get(word, []))
            if not final_set:
                break
        # 3. print the indices
        if final_set:
            print(' '.join(str(i) for i in sorted(final_set)))
            # or
            #print(*sorted(final_set), sep=' ')
        else:
            print(-1)
</code></pre>

<p>You will find subtle differeces to some of the snippets posted above, but these mainly stem from me not wanting to work with sets while populating <code>word_map</code> (no particular reason for this - apart from that it's getting late here).
Performance-wise this should be comparable to your original solution, at least in the cases where I tested it.</p>
    </div>