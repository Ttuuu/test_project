<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To start, I think you should be proud of your work so far! There are still many ways to improve (I'm not going to cover all of them) but now you can say you have created a fun game in C++ and show it to your friends and family and the internet. Many people cannot say that.</p>
<h1>Grouping and Naming</h1>
<p>Regardless of which paradigm you're aiming for, this is a fundamental concept of programming that just takes different forms based on which paradigm and language you're working in. It is clear that you have this concept in mind but it's so fundamental that I will expand on it further.</p>
<h2>Naming Meaningful Operations</h2>
<p>Within your code you represent the screen as a one dimensional array and frequently access it like so <code>screen[x + y * screen_width]</code>. This isn't a meaningless fragment of some strange formula, this formula is how you access an (x, y) coordinate of your screen representation. In the context of OOP, you could create a screen class containing a member function that serves this purpose, so instead of writing screen[x + y * SCREEN_WIDTH] you would write screen.at(x, y). Notice that now you only have to make sure the calculation is correct on one line of code instead of like 8++.</p>
<h2>Grouping and Naming Meaningful Data</h2>
<p>Within your code the variables SCREEN_WIDITH, SCREEN_HEIGHT, and screen appear together frequently. These values work together to describe the visual state of your application. In the context of OOP classes are employed so you could create a class called Screen to hold these three variables. Notice now that if you have to pass this information on to another function, class, thread, etc... you only have to worry about one variable of type Screen instead of three of types (wchar_t*, int, int).</p>
<h2>Grouping Meaningful Data and Operations</h2>
<p>Having code that is conceptually related grouped together means it is easier to find, consume and understand. (Whether through a plain header file, a class, or any other grouping method). The advantages of this become clearer in larger projects when you are either searching for the definition of data that a function works on, searching for functionality related to some data definition, or trying to figure out the concepts behind some code.</p>
<h2>Un-grouping Meaningless Data and Operations</h2>
<p>Within your main function you have the variable dwBytesWritten which holds how many bytes have been written to the window. main() is an important function because it (usually) communicates every single thing our application is doing, and so it is essential to understanding any application. dwBytesWritten could not be less important to understanding how this snake game works, so we should un-group them. Now I personally don't think it has much meaning anywhere else at the moment but, since I'm assuming it is required for WriteConsoleOutputCharacter, the most logical place to put it is the Screen class.</p>
<p>So we apply these concepts to the screen representation and we arrive at this</p>
<pre><code>class Screen
{
private:
    const int WIDTH;
    const int HEIGHT;
    wchar_t *screen;
    HANDLE hConsole;
    DWORD dwBytesWritten;

public:
    Screen(int width, int height) : WIDTH(width),
                                    HEIGHT(height),
                                    dwBytesWritten(0)
    {
        this-&gt;screen = new wchar_t[this-&gt;WIDTH * this-&gt;HEIGHT];
        this-&gt;clear();
        this-&gt;hConsole = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
        SetConsoleActiveScreenBuffer(this-&gt;hConsole);
    }

    ~Screen()
    {
        CloseHandle(this-&gt;hConsole);
        delete[] this-&gt;screen;
    }

    void clear()
    {
        for (int i = 0; i &lt; this-&gt;WIDTH * this-&gt;HEIGHT; ++i)
            this-&gt;screen[i] = L' ';
    }

    wchar_t &amp;at(int x, int y)
    {
        return this-&gt;screen[x + y * this-&gt;WIDTH];
    }

    const wchar_t &amp;at(int x, int y) const
    {
        return this-&gt;at(x, y);
    }

    void display()
    {
        WriteConsoleOutputCharacter(this-&gt;hConsole, this-&gt;screen, this-&gt;WIDTH * this-&gt;HEIGHT, {0, 0}, &amp;this-&gt;dwBytesWritten);
    }

    int getWidth() const
    {
        return this-&gt;WIDTH;
    }

    int getHeight() const
    {
        return this-&gt;HEIGHT;
    }
};
</code></pre>
<p>Now the start of main would look like</p>
<pre><code>int main()
{
    Screen screen(120, 30);

    while (1)
    {
        Snake snake = ...
</code></pre>
<p>and your Food::DrawFood member function would look like</p>
<pre><code>void DrawFood(Screen&amp; screen)
{
    screen.at(m_CurrentPosiiton.m_X, m_CurrentPosiiton.m_Y) = L'%';
}
</code></pre>
<p>It's important to not be blind to the fact that the class itself generates more lines of code than if we hadn't grouped anything. This is why it is important not to apply the concepts without thought: we must always try to know that the benefits of the decisions we are making right now outweigh the drawbacks. This is not easy, but to get you started consider how sooo many classes are using the horizontal and vertical offset. Why should Food have to know it's absolute position in the console, rather than just where it is within the arena. Wouldn't it simplify many calculations if the top left square of the snake arena could be called (0, 0) instead of (horizontalOffset, verticalOffset)?</p>
    </div>