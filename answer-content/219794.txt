<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>img.style = "position: absolute; top: -100000px; left: -100000px;";
document.body.appendChild(img);

img.parentElement.removeChild(img);
</code></pre>
</blockquote>

<p>This seems weird.  The canvas can be drawn from an unattached image and these lines can be removed.</p>

<blockquote>
<pre><code>  if(url.src) url = url.src;

  img.src = url;
</code></pre>
</blockquote>

<p>A more idiomatic phrasing is <code>img.src = url.src || url</code>.</p>

<blockquote>
<pre><code> .querySelectorAll("link[rel *= 'icon']");
</code></pre>
</blockquote>

<p>Unless you have something specific in mind, I'd use <code>[rel='icon']</code> here.  It's faster, and not clear that matching an exotic future variant like <code>&lt;link rel="BiscottiConfig"&gt;</code> is going to be desirable.</p>

<blockquote>
<pre><code>let
</code></pre>
</blockquote>

<p>Except for the final loop, every use of <code>let</code> in your script can be replaced by <code>const</code>.  It's a good habit, even if the aesthetics are inferior to <code>let</code> or <code>var</code>.</p>

<blockquote>
<pre><code>const urlRegex = /https:\/\/yt3.ggpht.com\/a[/-]{1,2}[A-Za-z\d-_]+/;

roundImageToDataUrl(JSON.stringify(window.ytInitialData).match(urlRegex)[0]).then(setFavicon);
</code></pre>
</blockquote>

<p>This looks like a misstep.  Youtube avatars have <code>id=img</code>; why not just <code>roundImageToDataUrl( document.getElementById("img").src )</code>?  </p>

<p>Dealing with future changes to the host page is a constant challenge with userscripts.  There are many things that have to remain unchanged for this to work (the image host, the URL format, the name, content and encoding of <code>ytInitialData</code>) and I'll predict that some of them won't.  Selecting the avatar itself with semantic markup is likely to be less brittle, and easier to fix if the markup changes (assuming there will always be an avatar and it will always have some semantics attached to it).</p>
    </div>