<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I don't think "anagram" usually means "can have letters left over". You may want to find a better term.</p></li>
<li><p>Modern Rust uses braced imports to import multiple things from the same crate / module instead of separate lines.</p></li>
<li><p>I appreciate the documentation, but it's fairly close to reiterating what the types in the code already tell us. User-facing documentation in general shouldn't explain the internals of an implementation, otherwise you are promising more than you might mean to. Describe what the type can do, not how it does it.</p></li>
<li><p>Instead of scare-quoting "hash" everywhere, promote it to its own type and use the name. Since you seem to want to shy away from "hash", I'll use "fingerprint", but you could also use "letter counter", as you did in one place.</p></li>
<li><p>Note that extracting a type allows the <code>CountedWord::hash</code> method to become a constructor on <code>Fingerprint</code>.</p></li>
<li><p>It's more common to use <code>or_insert(0) += 1</code> instead of using <code>Entry::and_modify</code>.</p></li>
<li><p>If it's important, instead of documenting a field as "pretty", name the field "pretty". In addition, explain what "pretty" means.</p></li>
<li><p>Don't describe what the return value means when it's a boolean. Any programmer should already know that. In most cases, see if you can use a type that encodes those comments.</p></li>
<li><p>Instead of a <code>loop</code> with <code>break</code>, use a <code>for</code> loop and some <code>return</code> statements.</p></li>
<li><p>Use <code>unwrap_or</code> to provide a default count of 0.</p>

<pre><code>for (character, &amp;number_in_other) in &amp;other.0 {
    let number_in_self = self.0.get(character).cloned().unwrap_or(0);
    if number_in_self &lt; number_in_other {
        // we don't have enough of this letter, not a possibility
        return false;
    }
}

true
</code></pre></li>
<li><p>You can then simplify the superset method with <code>Iterator::all</code>.</p></li>
<li><p>Extract a function to load the dictionary. This removes the mutability from <code>dictionary_words</code> from <code>main</code>.</p></li>
<li><p>Instead of iterating over <code>lines</code> with a <code>for</code> loop, use <code>Iterator</code> combinators like <code>flat_map</code> and <code>map</code>, finishing with <code>collect</code>.</p></li>
<li><p>Likewise, use <code>filter</code> and <code>collect</code> together.</p></li>
<li><p><code>Iterator::skip</code> can skip the first argument instead of using slicing.</p></li>
<li><p>You can collect an iterator of strings into one <code>String</code>, no need to join a <code>Vec&lt;String&gt;</code>.</p></li>
<li><p>Calling <code>to_lowercase</code> when sorting is wasteful as it may be called multiple times. Unfortunately, <a href="https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by_cached_key" rel="nofollow noreferrer"><code>sort_by_cached_key</code></a> is unstable.</p></li>
<li><p>Use <code>cmp::Reverse</code> instead of negating an integer.</p></li>
<li><p>Don't use <code>if let</code> if you don't care about the <code>Err</code> body, use <code>is_err</code> instead.</p></li>
<li><p>Matching on a <code>Result</code> isn't catching a panic; it's <em>preventing</em> it from panicking.</p></li>
<li><p>Don't prefix test functions with the word "test"; they are in a test module and have the test attribute. Don't document them as a test either - that should be obvious from the test name</p></li>
<li><p>Directly poking into the implementation of <code>Fingerprint</code> in tests is brittle and won't hold up to refactoring. Poking into the implementation of <code>Fingerprint</code> via <code>CountedWord</code> is doubly bad.</p></li>
<li><p><code>is_possibility</code> is too ambiguous. Use a name with a more clear "directionality".</p></li>
</ol>



<pre><code>use std::{
    cmp,
    collections::HashMap,
    env,
    fs::File,
    io::{self, prelude::*, BufReader},
};

// A map of characters to counts of characters for the word
struct Fingerprint(HashMap&lt;char, u32&gt;);

impl Fingerprint {
    fn new(word: &amp;str) -&gt; Self {
        let clean_word = word.trim().to_lowercase();
        let mut counts = HashMap::new();
        for ch in clean_word.chars().filter(|ch| ch.is_alphabetic()) {
            *counts.entry(ch).or_insert(0) += 1;
        }
        Fingerprint(counts)
    }

    fn is_superset_of(&amp;self, other: &amp;Fingerprint) -&gt; bool {
        other.0.iter().all(|(character, number_in_other)| {
            let number_in_self = self.0.get(character).unwrap_or(&amp;0);
            number_in_self &gt;= number_in_other
        })
    }
}

pub struct CountedWord {
    word: String,
    fingerprint: Fingerprint,
}

impl CountedWord {
    pub fn new(word: &amp;str) -&gt; CountedWord {
        CountedWord {
            word: word.to_string(),
            fingerprint: Fingerprint::new(word),
        }
    }

    /// Determine if the other `CountedWord` can be made from the letters in `self`.
    /// (That is--is `self` an anagram of `other`, with some letters allowed to be left over in
    /// `self`?)
    pub fn can_create(&amp;self, other: &amp;CountedWord) -&gt; bool {
        self.fingerprint.is_superset_of(&amp;other.fingerprint)
    }
}

fn load_dictionary_words() -&gt; Vec&lt;CountedWord&gt; {
    let f = File::open("/usr/share/dict/words").expect("dictionary not found");

    BufReader::new(f)
        .lines()
        .flat_map(|l| l)
        .map(|l| CountedWord::new(&amp;l))
        .collect()
}

fn main() {
    let dictionary_words = load_dictionary_words();

    // process the "pile" of letters we have to anagram from the arguments
    // spaces are ignored--everything except the program name is collected here
    let letters: String = env::args().skip(1).collect();
    let pile = CountedWord::new(&amp;letters);

    // determine what words from the dictionary can be made from the letters in the pile
    let mut possibilities: Vec&lt;_&gt; = dictionary_words
        .iter()
        .filter(|word| pile.can_create(word))
        .collect();

    // output the possiblities in alphabetical order by length
    possibilities.sort_unstable_by_key(|k| (cmp::Reverse(k.word.len()), k.word.to_lowercase()));

    let mut stdout = io::stdout();
    for possibility in possibilities {
        // Prevent the panic when the pipe is closed early and exit instead
        if writeln!(stdout, "{}", possibility.word).is_err() {
            break;
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn fingerprint_new() {
        let counter = Fingerprint::new("test");

        let mut test_counter = HashMap::new();
        test_counter.insert('t', 2);
        test_counter.insert('e', 1);
        test_counter.insert('s', 1);

        assert_eq!(counter.0, test_counter);
    }

    #[test]
    fn counted_word_new() {
        let test_word = CountedWord::new("test");

        assert_eq!(test_word.word, "test");

        let mut test_counter = HashMap::new();
        test_counter.insert('t', 2);
        test_counter.insert('e', 1);
        test_counter.insert('s', 1);

        assert_eq!(test_word.fingerprint.0, test_counter);
    }

    #[test]
    fn counted_word_is_possiblity() {
        let test_word_1 = CountedWord::new("test");
        let test_word_2 = CountedWord::new("assessment");

        let input_letters = CountedWord::new("tssettioupuqwerwe");

        assert!(input_letters.can_create(&amp;test_word_1));
        assert!(!input_letters.can_create(&amp;test_word_2));
    }
}
</code></pre>
    </div>