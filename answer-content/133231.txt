<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code mostly follows usual coding style and reads good. I would just change <code>secondlow</code> to <code>second_low</code> and avoid using abreviations in variable names.</p>

<p>Now for the improvements:</p>

<h1>Print vs return</h1>

<p>Do not code too much behaviour into your functions. Let them compute their stuff and return the result so the caller can do whatever they want with it. It doesn't add much here, but it is a good habit to have.</p>

<h1>Getting the value you are looking for</h1>

<blockquote>
<pre><code>seclow_stud = []
for student in students: 
    if student[1] == seclow_grade:
        seclow_stud.append(student[0])
</code></pre>
</blockquote>

<p>You do not need to store the only value you are looking for into a list. Especialy when using a for loop after that to extract the element out of the list:</p>

<pre><code>for student in students: 
    if student[1] == seclow_grade:
        return student[0]
</code></pre>

<h1>Sorted</h1>

<blockquote>
<pre><code>sort_grades = sorted(grades)
seclow_grade = sort_grades[0]
for grade in sort_grades:
    if grade != seclow_grade:
        seclow_grade = grade
        break
</code></pre>
</blockquote>

<p>The <code>sorted</code> builtin returns a list of values in increasing order. What is important to note here is that <code>sort_grades</code> is a <code>list</code>. So <code>sort_grade[0]</code> is the lowest grade and <code>sort_grade[1]</code> is the second lowest. No need to search for the value yourself, <code>sorted</code> already did the work for you.</p>

<pre><code>seclow_grade = sorted(grades)[1]
</code></pre>

<h1>List-comprehensions</h1>

<blockquote>
<pre><code>grades = []
for student in students: 
    grades.append(student[1])
</code></pre>
</blockquote>

<p>Python have these construct to easily build lists out of other iterables:</p>

<pre><code>grades = [student[1] for student in students]
</code></pre>

<p>You can also use the same construct when building lists out of the input. Overall code would look like:</p>

<pre><code>def secondlow(students):
    grades = [student[1] for student in students]
    seclow_grade = sorted(grades)[1]
    for student in students: 
        if student[1] == seclow_grade:
            return student[0]


students = [[input(), float(input())] for _ in range(int(input()))]
print(secondlow(students))
</code></pre>

<h1>Dictionaries</h1>

<p>I know that the challenge explicitly mentionned lists of lists, but Python have dictionaries that can map a value to another. You can use them as a replacement:</p>

<pre><code>def secondlow(students):
    seclow_grade = sorted(students.values())[1]
    for student in students.items():
        if student[1] == seclow_grade:
            return student[0]


students = {}
for _ in range(int(input())):
    name = input()
    grade = float(input())
    students[name] = value
print(secondlow(students))
</code></pre>

<p>Or you can take advantage of the way you can retrieve items associated to others by switching the way you store your data:</p>

<pre><code>def secondlow(students):
    second_low = sorted(students)[1]
    return students[second_low]


students = {}
for _ in range(int(input())):
    name = input()
    grade = float(input())
    students[value] = name  # Note the switch here
print(secondlow(students))
</code></pre>

<h3>Edit</h3>

<p>After reading the challenge description again, I realised that there can be multiple students with the second lowest grade. And in fact, there might be cases where there are multiple student with the lowest grade. Making my point about having the second lowest grade as <code>sorted(grades)[1]</code> irrelevantâ€¦ Unless you remove duplicates using a set:</p>

<pre><code>def second_low(students):
    second_low_grade = sorted(set(students.values()))[1]
    for student in students.items():
        if student[1] == second_low_grade:
            yield student[0]


students = {}
for _ in range(int(input())):
    name = input()
    grade = float(input())
    students[name] = value

for second_lowest_student in second_low(students):
    print(second_lowest_student)
</code></pre>

<p>Here I used the <code>yield</code> keyword to avoid building a list in <code>second_low</code>. What it does is allowing the function to return several results: one each time there is a match (<code>if student[1] == second_low_grade</code>). Here is the version using list of lists:</p>

<pre><code>def second_low(students):
    grades = set(student[1] for student in students)
    seclow_grade = sorted(grades)[1]
    for student in students: 
        if student[1] == seclow_grade:
            yield student[0]


students = [[input(), float(input())] for _ in range(int(input()))]
for second_lowest_student in second_low(students):
    print(second_lowest_student)
</code></pre>

<p>Unfortunately, such requirements prevent you from using dictionaries the other way around.</p>
    </div>