<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The use of static variables to read the input file is kind of ugly and makes it harder to reason about what the code is doing. I'd ditch the <code>archives</code>, <code>rdFont</code> and <code>fileLine</code> variables, moving them into the main method. The <code>openFont</code> and <code>readFileLine</code> methods don't feel necessary either - <code>openFile</code> could just return the File that was picked and let the caller do whatever it wants with it.</p>

<p>The two-letter variable names make your code much harder to read. Yes, it's possible to figure out what it's doing, and even get a decent idea of why you chose the letters you did, but there's no need to put the people reading your code through that.</p>

<p>When you divide two <code>int</code>s, the result will be an <code>int</code> and thus rounded down if it has to. <code>(int) Math.floor(a / b)</code> can be written as simply <code>a / b</code> if <code>a</code> and <code>b</code> are <code>int</code>s.</p>

<p>When you initialise the variables, you do more or less the same logic as you do inside the loop later. I'd usually recommend keeping that logic in just one place to make it easier to change if necessary, with values in <code>mk</code>, <code>ma</code> and <code>ms</code> that will always be replaced on the first pass of the loop (though that does admittedly fail if one Krusty-burger takes longer to eat than the time you have available - more on that in a moment)</p>

<p>If there's a solution that leaves 0 time for beer, your algorithm will pick the first one it encounters, which might not be the one where you eat the most burgers. The input <code>5 1 15</code> should return <code>15</code> (as you can eat 15 entire Apu-burgers) but your code would return <code>3</code> (as eating 3 Krusty-burgers is the first solution you test, and that also leaves no time for beer). To get around this you could either iterate through all options every time, or you could have your loop start from "maximise whichever-burger-Homer-eats-faster" (which could be either of the two types) instead of "maximise Krusty-burgers".</p>

<p>If you do decide to go with the latter, you can end a loop early using the <code>break</code> statement. Your</p>

<pre><code>if ( dif &lt; ms &amp;&amp; ms &gt; 0) {
    mk = nk;
    ma = na;
    ms = dif;
}
</code></pre>

<p>could instead have been</p>

<pre><code>if (dif &lt; ms) {
    mk = nk;
    ma = na;
    ms = dif;
    if (dif == 0) break; // Don't bother going through the rest of the loop at all!
}
</code></pre>

<p>The <code>Filter7</code> class could probably be removed in favour of using a <code>javax.swing.filechooser.FileNameExtensionFilter</code>.</p>

<p>It's usually considered good practice to define variables only in the block that needs them - the <code>nk</code>, <code>na</code> and <code>dif</code> variables can be moved into the loop pretty easily.</p>

<p>Both of those while loops seem to me like they'd be better suited as for loops. There's simple initialisation that really doesn't matter outside of the loop itself, and simple statements you want to execute as part of just keeping the loop going rather than as part of the logic <em>within</em> the loop.</p>

<p>If you do all this, you might end up with something like:</p>

<pre><code>import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Date;
import java.text.SimpleDateFormat;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class ChallangePerformance {

    public static void main(String[] args) throws IOException
    { 
        // This try-with-resources syntax is usually considered good practice because it takes care of closing files for you - not really an issue in a program like this though.
        try (BufferedReader rdFont = new BufferedReader(new FileReader(openFile()))) {
            long start = System.currentTimeMillis();  

            for (String line = rdFont.readLine(); line != null; line = rdFont.line()) { // Alternatively, `for (String line; (line = rdFont.readLine()) != null;)` also works if you want to be all fancy.
                String[] array = line.split(" ");           
                int krustyBurgerTime = Integer.parseInt(array[0]); // Used to be kb
                int apuBurgerTime = Integer.parseInt(array[1]); // Used to be ab
                int initialTime = Integer.parseInt(array[2]); // Used to be total

                boolean krustyBurgersAreFastest = krustyBurgerTime &lt;= apuBurgerTime;
                int fastestBurgerTime;
                int slowestBurgerTime;
                if (krustyBurgersAreFastest) {
                    fastestBurgerTime = krustyBurgerTime;
                    slowestBurgerTime = apuBurgerTime;
                } else {
                    fastestBurgerTime = apuBurgerTime;
                    slowestBurgerTime = krustyBurgerTime;
                }

                // Sensible defaults in case there's not enough time to eat even a single burger - no need to duplicate the loop's logic as the loop will replace these anyway.
                int bestBeerTime = initialTime; // Used to be ms
                int bestFastBurgers = 0; // Used to be mk
                int bestSlowBurgers = 0; // Used to be ma

                // Replaced while loop with for loop
                for (int fastBurgers = initialTime / fastestBurgerTime; fastBurgers &gt; 0; fastBurgers--) {
                    int leftover = initialTime - fastBurgers * fastestBurgerTime;
                    int slowBurgers = leftover / slowestBurgerTime;
                    int beerTime = initialTime - (fastBurgers * fastestBurgerTime + slowBurgers * slowestBurgerTime);
                    if ( beerTime &lt; bestBeerTime &amp;&amp; bestFastBurgers + bestSlowBurgers &lt; fastBurgers + slowBurgers) {
                        bestFastBurgers = fastBurgers;
                        bestSlowBurgers = slowBurgers;
                        bestBeerTime = beerTime;
                        if (beerTime == 0) break; // Since the first perfect solution will be the best perfect solution, we can stop here.
                    }
                }

                if (krustyBurgersAreFastest) {
                    System.out.println(" " + bestFastBurgers + " " + bestSlowBurgers);
                } else {
                    System.out.println(" " + bestSlowBurgers + " " + bestFastBurgers);
                }
            }


            long end  = System.currentTimeMillis();   
            System.out.println(new SimpleDateFormat("ss.SSS").format(new Date(end - start)));  

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog( null, "Invalid file name", "Invalid file name", JOptionPane.ERROR_MESSAGE );
        }
    }

    private static File openFile() {
        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode( JFileChooser.FILES_ONLY );

        fileChooser.addChoosableFileFilter( new FileNameExtensionFilter("*.est", "est") );
        int result = fileChooser.showOpenDialog( null );

        if( result == JFileChooser.CANCEL_OPTION ) {
            return null;
        }

        return fileChooser.getSelectedFile();
    }
}
</code></pre>
    </div>