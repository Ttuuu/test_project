<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Casting should <strong>never</strong> have side effects. Right now, calling <code>ToList</code> in your cast will send the query to the database. This is the most obscure way to execute a query and that's dangerous.</p>

<p>You should have an <code>Execute</code> method, which well.. executes the query and returns the result.</p>

<p><code>Active</code> should be <code>IsActive</code>, to respect the boolean type of the method.</p>

<p>The <code>Dispose</code> of your query shouldn't dispose the <code>DbContext</code>. The <code>QueryBuilder</code> is dependant on <code>DbContext</code>, not upside down. When disposing, you should dispose of dependant objects. So now, the <code>QueryBuilder</code> shouldn't implement <code>IDisposable</code>, it serves no purpose.</p>

<p>Don't make <code>Query</code> <code>static</code>, that's something you'll regret. Imagine you have two queries to run at the same time, both your queries will step on each other and you'll have a mess of a query. Keep Query an instance <em>property</em>. Because while we're at it, you should make it a <code>protected</code> property. Instance variable shouldn't be anything other than <code>private</code>.</p>

<p>I want to point out that <code>Contains</code> using Entity Framework Linq To Entities is pretty slow. There's nothing much you can do about it, but just be aware that you might have problems with this someday.</p>

<p>I think your <code>Context</code> property should be <code>private set;</code>. You offer the possibility to your child classes to set the <code>Context</code> by the <code>protected</code> constructor, don't let them set it back.</p>
    </div>