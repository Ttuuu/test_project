<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see any point in this function in its present form.</p>
<p>Given you've got a <a href="https://phpdelusions.net/pdo/pdo_wrapper#function" rel="noreferrer">general purpose query function</a>,</p>
<pre><code>function pdo($pdo, $sql, $args = NULL)
{
    $stmt = $pdo-&gt;prepare($sql);
    $stmt-&gt;execute($args);
    return $stmt;
}
</code></pre>
<p>it will be cleaner, easier to use and more readable to have a conventional SQL than such random rags of a code:</p>
<pre><code>$session_id = '1000000001';
$createdBy  = 12;

$sql = "INSERT INTO web_statistics (session_id, username, createdBy) VALUES (?,?,?)";
pdo($pdo, $sql, [$session_id,  'boss 21', $createdBy]);
</code></pre>
<p>The same goes for SELECT and UPDATE. You can find a complete set of examples by the link above.</p>
<h1>Update.</h1>
<p>Looks like this question got some traction, due to some mysterious ways of Stack overflow. It means it will attract people other than the OP, who may have the same question but have different code, or just curious about Dynamic insert function for PDO in general. Well then, I must admit that the answer is rather a trick and too localized, being focused on the actual code in the OP. For the present code, where different query parts are still hardcoded in the different function parameters, it is indeed makes a lot more sense to have them hardcoded in the form of a conventional SQL query instead.</p>
<p>But of course the common idea of a dynamic insert function for PDO is different. it's rather a function that is called like this:</p>
<pre><code>prepared_insert($pdo, $table_name, $data);
</code></pre>
<p>where <code>$data</code> is an associative array like this</p>
<pre><code>$data = [
    'name' =&gt; $name, 
    'password' =&gt; $hashed_password,
];
</code></pre>
<p>Well then for this case I've got a simple <a href="https://phpdelusions.net/pdo_examples/insert_helper" rel="noreferrer">INSERT helper function for PDO Mysql</a></p>
<pre><code>function prepared_insert($pdo, $table, $data) {
    $keys = array_keys($data);
    $keys = array_map('escape_mysql_identifier', $keys);
    $fields = implode(",", $keys);
    $table = escape_mysql_identifier($table);
    $placeholders = str_repeat('?,', count($keys) - 1) . '?';
    $sql = "INSERT INTO $table ($fields) VALUES ($placeholders)";
    $pdo-&gt;prepare($sql)-&gt;execute(array_values($data));
}
</code></pre>
<p>Note that his function will need a helper function of its own,</p>
<pre><code>function escape_mysql_identifier($field){
    return "`".str_replace("`", "``", $field)."`";
}
</code></pre>
<p>to protect identifiers added to the query.</p>
    </div>