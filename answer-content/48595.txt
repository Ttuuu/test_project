<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Right now, the code doesn't work. Your code only validates ISBNs that use Arabic numerals, but some ISBNs can end in an "X". Quoting from the <a href="http://www.isbn.org/faqs_general_questions#isbn_faq5" rel="nofollow noreferrer">ISBN FAQs</a>:</p>
<blockquote>
<p><strong>Why do some ISBNs end in an "X"?</strong></p>
<p>In the case of the check digit, the last digit of the ISBN, the upper case X can appear. The method of determining the check digit for the ISBN is the modulus 11 with the weighting factors 10 to 1. The Roman numeral X is used in lieu of 10 where ten would occur as a check digit.</p>
</blockquote>
<p>So you should think about how you’d fix that first.</p>
<h2>Comments on the existing <code>isbn()</code> function</h2>
<p>This isn't how I'd write it. Your function doesn’t return a True/False value. The code which acts interactively, and prints things to the user, and the code which validates the ISBN, are both intertwined. I would separate the two. This will make debugging issues like the "X" easier, and you can reuse the validating function later.</p>
<p>For example, if you wanted to enter IBSNs to a database, and verify that the entered numbers were accurate, you could get a True/False value from the function without printing to the console.</p>
<p>Here are some general comments on the existing <code>isbn()</code> function:</p>
<ul>
<li><p>It's not clear what the difference between the <code>numberzero</code>, <code>numberreal</code> and <code>number</code> variables are. This is a side-effect of mixing the validation and printing code.</p>
</li>
<li><p>Give it a more specific name, and add a docstring (a way to document functions in Python). Later you may want to validate ISBN-13 codes, and you don't want the namespace cluttered.</p>
</li>
<li><p>There are better ways of handling errors than printing the word "Error" to the console. You could raise a custom <code>ValueError</code>, or something else.</p>
</li>
<li><p>The line which constructs <code>num</code> is excessively long: you can use <code>sum()</code> and a list comprehension to construct it in a more compact way, and it will make it clearer what formula you're using later down the line.</p>
</li>
<li><p>The line <code>num = num%11</code> can be replaced by <code>num %= 11</code>. Just makes things slightly neater.</p>
</li>
</ul>
<p>With those points in mind, here's how I might rewrite your function:</p>

<pre><code>def validate_isbn10(number):
    """A function for validating ISBN-10 codes."""
    formatted_num = number.replace("-", "")

    if len(formatted_num) != 10:
        raise ValueError('The number %s is not a 10-digit string.' % number)

    check_sum = sum(int(formatted_num[i]) * (10 - i) for i in xrange(8))
    check_sum %= 11
    check_digit = 11 - check_sum
        
    if formatted_num[-1] == "X":
        return check_digit == 10
    else:
        return check_digit == int(formatted_num[-1])
</code></pre>
<p>If you wanted to be able to tell the user what the correct check digit should be (in the event of an incorrectly formatted string), then you could factor our a <code>check_digit()</code> function as well.</p>
<p>I leave it as an exercise to write a separate function which interactively prompts the user for an ISBN-10 code, and tells them whether or nots it correctly formatted.</p>
<h2>Comments on the rest of the code</h2>
<p>Here are some things that concern me in the rest of your code:</p>
<ul>
<li><p>You should wrap the interactive code in a <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code></a> block. This means that it will only run if the file is executed directly, but you can also <code>import</code> the file to just get the function definitions (say, if you wanted to use this ISBN validator in a larger project).</p>
</li>
<li><p>The line <code>while running == True:</code>. If you're going to compare to booleans, then it's much more idiomatic to write <code>while running is True:</code>, or even better, <code>while running:</code>. But that's not a good way to do it.</p>
<p>Instead, suppose you have a <code>interactive_user_isbn()</code> function which runs the interactive session with the user. Then at the end of that function, if they want to go again, then you can ask them, and if they do, <em>call the function again</em>.</p>
<p>Make the repeat prompt more explicit about what will be repeated, and give them a hint about what they can type to repeat the function.</p>
<p>If they type nothing, then I would err on assuming that they don't want to go again, but that's just my opinion.</p>
<p>Something like:</p>

<pre><code>def interactive_user_isbn():
    # ask the user for an ISBN
    # check if it's correct
    # pay the user a compliment etc

    repeat = input("Do you want to check another number? (y/n)")
    if repeat.lower() in ["yes", "y", "ok", "sure"]:
        print("\n")
        interactive_user_isbn()
    else:
        print("Okay, bye!")
</code></pre>
</li>
</ul>
    </div>