<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your logic is probably the biggest factor here. Using your estimate of 70,000 rows and assuming that <code>aPRTS</code> and <code>bNIMS</code> are equal for all of them, then you are doing around 420,000 <code>Match</code> calculations and an even greater number of accesses to cells (with all the overheads these have in comparison to array calculations).</p>

<h2>Use of Match</h2>

<p>From what I can work out from the convoluted logic, you are using the <code>Match</code> merely to determine which columns you must compare. However, once you are in your worksheet, this column order does not change.</p>

<p>So, you can remove nearly half a million expensive calculations by doing this up front. For you logic, this is a good place to use a <code>Variant</code>.</p>

<pre><code>With wsa
    AudLastCol = .Cells(1, Columns.Count).End(xlToLeft).Column
    AudLastRow = .Cells(Rows.Count, 1).End(xlUp).Row
    ' *** Do these next lines only once, not 70,000 times.
    Deployed19 = Application.Match("Deployed(1.9)", .Rows(1), 0)
    Deployed800 = Application.Match("Deployed (800)", .Rows(1), 0)
    Deployed2500 = Application.Match("Deployed (2.5)", .Rows(1), 0)
    PRTS1900 = Application.Match("Total-1900-PRTS", .Rows(1), 0)
    PRTS800 = Application.Match("Total-800-PRTS", .Rows(1), 0)
    PRTS2500 = Application.Match("Total-2500-PRTS", .Rows(1), 0)
    .Cells(1, AudLastCol + 1).Value = "Match;Issue Type;Actions"
    For l = 2 To AudLastRow
        aPRTS = .Cells(l, AudLastCol).Value
        bNIMS = .Cells(l, NIMsLastCol).Value
'        tempin = .Cells(l, 2).Value
        If aPRTS = bNIMS Then
            If IsNumeric(Deployed19) Then
                d19 = .Cells(l, Deployed19).Value
            Else
                d19 = 0
            End If
            If IsNumeric(Deployed800) Then
                d8 = .Cells(l, Deployed800).Value
            Else
                d8 = 0
            End If
            If IsNumeric(Deployed2500) Then
                d25 = .Cells(l, Deployed2500).Value
            Else
                d25 = 0
            End If

            If IsNumeric(PRTS800) Then
                p8 = .Cells(l, PRTS800).Value
            Else
                p8 = 0
            End If

            If IsNumeric(PRTS1900) Then
                p19 = .Cells(l, PRTS1900).Value
            Else
                p19 = 0
            End If

            If IsNumeric(PRTS2500) Then
                p25 = .Cells(l, PRTS2500).Value
            Else
                p25 = 0
            End If
            If (p19 = d19) And (p8 = d8) And (p25 = d25) Then
                .Cells(l, AudLastCol + 1).Value = "TRUE;None;No Action Required."
            Else
                .Cells(l, AudLastCol + 1).Value = "FALSE;Both;Update NIMS and PRTS."
            End If
        '[ELSEIF] statements here.
        End If
' [Other code here]
    Next l
End With
</code></pre>

<p>I have stuck with <code>Variant</code> because the <code>Match</code> might return an error. I have also left the standard <code>If-Then-Else</code> construct because the VBA <code>IIF()</code> statement evaluates all expressions so would return and error should the desired column not exist.</p>

<h2>Variable declaration</h2>

<p>Your code to declare the variables is not doing what you think it should.</p>

<pre><code>Dim wsa As Worksheet
Dim l, AudLastRow, AudLastCol, NIMsLastCol, NIMsRow As Long
Dim d19, d8, d25, p19, p8, p25 As Integer
Dim ColLtr As String
Dim aPRTS, bNIMS, Deployed19, Deployed800, Deployed2500, PRTS800, PRTS1900, PRTS2500 As Variant
</code></pre>

<p>Only <code>NIMsRow</code> is <code>Long</code>, <code>p25</code> is <code>Integer</code>, the rest are <code>Variant</code> which is the default type. Each variable must be individually declared as shown below. Also, while possibly not important for your dataset, get in the habit of using <code>Long</code> instead of <code>Integer</code>. Memory is cheap these days!</p>

<pre><code>Dim wsa As Worksheet
Dim l As Long, AudLastRow As Long, AudLastCol As Long, NIMsLastCol As Long, NIMsRow As Long
Dim d19 As Long, d8 As Long, d25 As Long, p19 As Long, p8 As Long, p25 As Long
Dim ColLtr As String
Dim aPRTS, bNIMS, Deployed19, Deployed800, Deployed2500, PRTS800, PRTS1900, PRTS2500 'As Variant
</code></pre>

<h2>Use Arrays</h2>

<p>It is faster to dump the data into arrays and then run through the arrays than to keep on referencing cells. Because you have blank cells in your data, you would use a <code>Variant</code> type and your code would check accordingly while doing comparisons. You can put the results of the audit into another array and then simple write this array in one hit at the end of your routine.</p>

<p>I am not going to write sample code here. But where you do an early check for the existence of a column (your <code>Match</code> functions), you can quickly create an array of <code>0</code> if it does not exist. This also simplify your <code>If aPRTS = bNIMS Then</code> block because you will not need all those <code>If-Then-Else</code>.</p>

<p>What arrays would you need?</p>

<ul>
<li><code>aPRTS</code> and <code>bNIMS</code>: replaces/fixes <code>If aPRTS = bNIMS Then</code> etc</li>
<li><code>d19</code> and <code>p19</code>: replaces/fixes <code>If (p19 = d19) And (p8 = d8) And (p25 = d25) Then</code> </li>
<li><code>d8</code> and <code>p8</code>: replaces/fixes <code>If (p19 = d19) And (p8 = d8) And (p25 = d25) Then</code></li>
<li><code>d25</code> and <code>p25</code>: replaces/fixes <code>If (p19 = d19) And (p8 = d8) And (p25 = d25) Then</code></li>
<li><code>Name</code>: replaces/fixes <code>If InStr(1, .Cells(l, 1).Value, "52XC") &gt; 0 Then</code> etc</li>
<li><code>AuditResult</code>: What you will write into the sheet at the end. fixes/replaces <code>.Cells(l, AudLastCol + 1).Value = "N/A;NIMS;Update NIMS."</code> etc.</li>
</ul>
    </div>