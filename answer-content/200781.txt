<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Overall design</h1>

<p>I noticed that if an alert is displayed with a message that a given user wins, then the column buttons can still be clicked, which could lead to an alert displaying a message that the other user won. Normally once a user is declared a winner, the game should be reset...</p>

<h1>Code feedback</h1>

<h2>HTML</h2>

<blockquote>
<pre><code>&lt;center&gt;
&lt;br/&gt;
&lt;div style="font-family:Arial,sans-serif; font-size:14pt; font-weight:bold; color: black" id="p1"&gt;Velkommen til fire på stribe&lt;/div&gt;&lt;br/&gt;
&lt;body bgcolor="#87cefa"&gt;
</code></pre>
</blockquote>

<p>With this markup, the body tag is a child of the <code>&lt;center&gt;</code> tag (which is "also considered obsolete"<sup><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center" rel="nofollow noreferrer">1</a></sup>)... this appears to be invalid. The <code>&lt;center&gt;</code> tag (as well as the <code>&lt;div&gt;</code> before it) should be a child of the body tag.</p>

<pre><code>&lt;body bgcolor="#87cefa"&gt;
    &lt;center&gt;
    &lt;br/&gt;
    &lt;div style="font-family:Arial,sans-serif; font-size:14pt; font-weight:bold; color: black" id="p1"&gt;Velkommen til fire på stribe&lt;/div&gt;&lt;br/&gt;
</code></pre>

<h2>Put redundant styles in classes and use CSS</h2>

<p>Many of the buttom elements have redundant <code>style</code> attributes (i.e. <code>background-color: antiquewhite; border-radius: 16px</code>) - much of that redundancy could be eliminated with CSS. For example a class name could be added, or even the selector of any button that is a child element of a new container, could have that style applied. The same is true for the elements which have an id attribute containing the word <em>spiller</em>.</p>

<h2>JavaScript</h2>

<h3>Use <code>const</code> instead of <code>let</code> for anything that doesn't get re-assigned</h3>

<p>Variables like <code>context</code>, <code>activeColumn</code> and <code>winner</code>  in <code>putPieceInColumnNo()</code>, <code>activeCol</code> in <code>checkWinnerVertical()</code>, etc. don't get re-assigned and thus are good candidates for <code>const</code> instead of <code>let</code>. While properties of constants can be re-assigned, the object/value itself cannot be re-assigned. </p>

<h3>Simplifying <code>drawCircle()</code></h3>

<p>The code in <code>drawCircle()</code> - i.e. </p>

<blockquote>
<pre><code>function drawCircle(x, y, r, fill) {
//Fill the circle if fill is set
    if (fill){
        //debugger;
        context.beginPath();
        context.arc(x, y, r, 0, Math.PI*2);
        context.fillStyle = fill;
        context.fill();
    } else {
        context.beginPath();
        context.arc(x, y, r, 0, Math.PI*2);
        context.stroke();
    }
}
</code></pre>
</blockquote>

<p>could be simplified in several ways, including the following, where redundant lines are removed (follows the <a href="https://deviq.com/don-t-repeat-yourself/" rel="nofollow noreferrer">D.R.Y. principle</a>):</p>

<pre><code>function drawCircle(x, y, r, fill) {
    //Fill the circle if fill is set
    context.beginPath();
    context.arc(x, y, r, 0, Math.PI*2);
    if (fill){
        context.fillStyle = fill;
        context.fill();
    } else {
        context.stroke();
    }
}
</code></pre>

<h3>Move the logic out of <code>onclick</code> in HTML (calling <code>putPieceInColumnNo()</code>) and use a JavaScript delegate instead</h3>

<p>Instead of mixing the JavaScript calls in with the HTML, add JavaScript code to call the function when appropriate. </p>

<pre><code>document.addEventListener('click', function(event) {
    if(event.target.id === 'restart') {
        reloadPage();
    }
    else if (event.target.id.substr(0, 3) === 'col') { //could also use data-attributes
        const parts = event.target.id.split('col');
        putPieceInColumnNo(parts[1] - 1);
    }
});
</code></pre>

<p>One could also use <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes" rel="nofollow noreferrer">data attributes</a> to specify the column passed to the function.</p>

<h3>Reducing redundancy with column creation:</h3>

<p>The following setup code:</p>

<blockquote>
<pre><code>let column0 = [0,0,0,0,0,0];
let column1 = [0,0,0,0,0,0];
let column2 = [0,0,0,0,0,0];
let column3 = [0,0,0,0,0,0];
let column4 = [0,0,0,0,0,0];
let column5 = [0,0,0,0,0,0];
let column6 = [0,0,0,0,0,0];
let columns = [column0,column1,column2, column3, column4, column5, column6];
</code></pre>
</blockquote>

<p>Can be simplified using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" rel="nofollow noreferrer">Array.fill()</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="nofollow noreferrer">Array.forEach()</a></p>

<pre><code>const columns = new Array(7).fill('');
columns.forEach(function(column, index) {
    columns[index] = [0,0,0,0,0,0];
}); 
</code></pre>

<p>Initially I was thinking <code>.fill()</code> could be used with the array of zeroes, but then each nested array would have the same memory location.</p>

<h2>Rewrite</h2>

<p>See updated code with advice taken into consideration below in the snippet</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const context = document.getElementById("mycanvas").getContext('2d');
context.fillStyle = "antiqueWhite";
context.fillRect(0, 0, 420, 375);

let col = 7;
let row = 6;
let x = 28;
let y = 35;
let r = 25;
let activePlayer = 1;

const columns = new Array(7).fill('');
columns.forEach(function(column, index) {
  columns[index] = [0, 0, 0, 0, 0, 0];
});

//Players:
const name1 = prompt("Indtast spiller 1's navn:");
document.getElementById("spiller1").innerHTML = "Spiller 1: " + name1;

const name2 = prompt("Indtast spiller 2's navn:");
document.getElementById("spiller2").innerHTML = "Spiller 2: " + name2;

drawBoard();

//-------Functions--------

function drawBoard() {
  for (let i = 0; i &lt; col; i++) {
    for (let j = 0; j &lt; row; j++) {
      drawCircle(x + i * 60, y + j * 60, r);
      context.strokeStyle = "black";
      context.stroke();
      context.fillStyle = "white";
      context.fill();
    }
  }
}
document.addEventListener('click', function(event) {
  if (event.target.id === 'restart') {
    reloadPage();
  } else if (event.target.dataset.id) {
    putPieceInColumnNo(event.target.dataset.id - 1);
  }
});

function putPieceInColumnNo(no) {
  const activeColumn = columns[no];
  let height = 0;

  for (let i = 0; i &lt; activeColumn.length; i++) {
    if (activeColumn[i] === 0) {
      activeColumn[i] = activePlayer;
      drawPieceAt(no, 5 - i, activePlayer);
      height = i;
      i = activeColumn.length
    }
  }
  let winner = checkWinnerVertical(activePlayer, no);
  if (winner === true) {
    publishWinner();
  }
  winner = checkWinnerHorizontal(activePlayer, height);
  if (winner === true) {
    publishWinner();
  }
  swapPl();
}

function checkWinnerVertical(activePlayer, no) {
  const activeCol = columns[no];
  let inARow = 0;
  for (let i = 0; i &lt; activeCol.length; i++) {
    if (activeCol[i] === activePlayer) {
      inARow++;
    } else {
      inARow = 0;
    }
    if (inARow &gt;= 4) {
      return true;
    }
  }
  return false;
}

function checkWinnerHorizontal(activePlayer, height) {
  let inACol = 0;
  for (let i = 0; i &lt; columns.length; i++) {
    if (columns[i][height] === activePlayer) {
      inACol++;
    } else {
      inACol = 0;
    }
    if (inACol &gt;= 4) {
      return true;
    }
  }
  return false;
}

function swapPl() {
  if (activePlayer === 1) {
    activePlayer = 2;
  } else {
    activePlayer = 1;
  }
}

function reloadPage() {
  window.location.reload();
}

function drawPieceAt(x, y, activePlayer) {
  let color = 'red';
  if (activePlayer === 1) {
    color = 'blue'
  }
  drawCircle(28 + x * 60, 35 + y * 60, r, color);
}

function drawCircle(x, y, r, fill) {
  //Fill the circle if fill is set
  context.beginPath();
  context.arc(x, y, r, 0, Math.PI * 2);
  if (fill) {
    //debugger;
    context.fillStyle = fill;
    context.fill();
  } else {
    context.stroke();
  }
}

function publishWinner() {
  if (activePlayer === 1) {
    alert("Tillykke " + name1 + " du har vundet!!");
  } else {
    alert("Tillykke " + name2 + " du har vundet!!")
  }
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>button[id^='col'] {
  background-color: antiquewhite;
  border-radius: 16px;
}

.spiller {
  font-family: Arial, sans-serif;
  font-size: 14pt;
  font-weight: bold;
}
#spiller1 {
  color: blue;
}
#spiller2 {
  color: red;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;center&gt;
  &lt;br/&gt;
  &lt;div style="font-family:Arial,sans-serif; font-size:14pt; font-weight:bold; color: black" id="p1"&gt;Velkommen til fire på stribe&lt;/div&gt;&lt;br/&gt;
  &lt;div class="spiller" id="spiller1"&gt;&lt;/div&gt;
  &lt;div class="spiller" id="spiller2"&gt;&lt;/div&gt;&lt;br/&gt;
  &lt;button data-id="1"&gt; - - 1 - -&lt;/button&gt;
  &lt;button data-id="2"&gt; - - 2 - -&lt;/button&gt;
  &lt;button data-id="3"&gt; - - 3 - -&lt;/button&gt;
  &lt;button data-id="4"&gt; - - 4 - -&lt;/button&gt;
  &lt;button data-id="5"&gt; - - 5 - -&lt;/button&gt;
  &lt;button data-id="6"&gt; - - 6 - -&lt;/button&gt;
  &lt;button data-id="7"&gt; - - 7 - -&lt;/button&gt;&lt;br&gt;
  &lt;canvas id="mycanvas" width="420" height="420"&gt;&lt;/canvas&gt;
&lt;/center&gt;
&lt;center&gt;&lt;button style="border-radius:16px; background-color: antiquewhite" id="restart"&gt;Genstart spillet&lt;/button&gt;&lt;/center&gt;&lt;br/&gt;</code></pre>
</div>
</div>


<hr>
    </div>