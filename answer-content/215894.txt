<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Use data to control how password strength is decided.  Make a list of objects with properties that describe each level of strength.</p>

<p>This makes it easy to compare strengths.  In your code, <code>12345678</code> is classified as "Strong."  It's not!</p>

<p>Matching <code>[a-z]+</code> is the same as matching <code>[a-z]</code> if you aren't saving the match.</p>

<p>Use CSS classes to control appearance.</p>

<p>Use dot notation for constant property names:  <code>object.thing</code> instead of <code>object["thing"]</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const elemInput = document.forms.takis.hero;
elemInput.addEventListener("input", sila);

function sila() {
    const elemStrength = document.getElementById("strength"),
        strength = pwRate( elemInput.value ),
        classes = "strength " + strength.replace( /[^A-Za-z0-9]/g, '' );
        
    elemStrength.className = classes;
    elemStrength.textContent = strength;
}

function pwRate(pw) { 
    const ranks = [ 
        { rank: "Very Strong",
          minLength: 8,
          minParts: 3,
        },
        { rank: "Strong",
          minLength: 8,
          minParts: 2,
          mustMatch: "digit",
        },
        { rank: "Medium",
          minLength: 8,
          minParts: 2,
        },
        { rank: "Medium",
          minLength: 6,
          minParts: 3,
        },
        { rank: "Weak",
          minLength: 3 // let the user type a few before calling him weak
        }
    ];
    
    const parts = { digit: /[0-9]/,
                    upper: /[A-Z]/,
                    lower: /[a-z]/,
                    other: /[^A-Za-z0-9]/
                  };
    
    const hasParts = Object.keys( parts )
            .filter( p =&gt; parts[p].test(pw) )
            .reduce( (matches, key) =&gt; matches[key]=1 &amp;&amp; matches, {} ),
        nParts = Object.keys( hasParts ).length;
    
    for (var rank of ranks) {
        if (
            (!rank.minLength || pw.length &gt;= rank.minLength)
            &amp;&amp;
            (!rank.minParts || nParts &gt;= rank.minParts)
            &amp;&amp;
            (!rank.mustMatch || hasParts[ rank.mustMatch ])
        ) return rank.rank
    }
    return "";
}       </code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.strength             { background-color: #444444; }
.strength.VeryStrong  { color: #449055 }
.strength.Strong      { color: #aaee99 }
.strength.Medium      { color: yellow }
.strength.Weak        { color: red }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form name="takis"&gt; Password: &lt;input type="password" name="hero"&gt; &lt;/form&gt;
&lt;div id="strength" class="strength" /&gt;</code></pre>
</div>
</div>

    </div>