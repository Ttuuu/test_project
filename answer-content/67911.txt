<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have code outside of functions or an <code>if __name__ == "__main__"</code> guard (which isn't ideal in itself), both <em>above and below</em> the various function definitions, which makes the code relatively difficult to follow. I would structure the script as follows:</p>

<pre><code>import os
import subprocess
import sys
import time

def proct(pid):
    ...

def cput():
    ...

def main(pid):
    ...

def parse_args():
    ...
    return pid

if __name__ == "__main__":
    main(parse_args())
</code></pre>

<p>Now if you want to <code>import</code> this functionality elsewhere, it's easy. Also, note that I have made the imports alphabetical, per <a href="http://legacy.python.org/dev/peps/pep-0008/" rel="noreferrer">the style guide</a>.</p>

<hr>

<p>I would factor out any temporary variables, e.g.</p>

<pre><code>proctotal = int(utime) + int(stime)
return(float(proctotal))
</code></pre>

<p>can be written:</p>

<pre><code>return float(int(utime) + int(stime))
</code></pre>

<hr>

<p>Try not to do the same thing twice, e.g. </p>

<pre><code>proctimes = pidfile.readline()
utime = proctimes.split(' ')[13]
stime = proctimes.split(' ')[14]
</code></pre>

<p>could be rewritten</p>

<pre><code>proctimes = pidfile.readline().split(' ')
utime = proctime[13] # you could also call int here
stime = proctime[14]
</code></pre>

<p>which only calls <code>str.split</code> once.</p>

<hr>

<p>Consider adding <a href="http://legacy.python.org/dev/peps/pep-0257/" rel="noreferrer">docstrings</a> to your functions, rather than the inline comments (some of which are redundant - <code>utime = proctimes.split(' ')[13]</code> does not need the explanation <code># get utime from /proc/&lt;pid&gt;/stat, 14 item</code>, which just adds an extra line to read). Better function names would also help with clarity - e.g. <code>cpu_total</code> rather than <code>cput</code>.</p>

<hr>

<p>The main part of <code>cput</code>:</p>

<pre><code>cputimes = procfile.readline()
cputotal = 0
for i in cputimes.split(' ')[2:]:
    i = int(i)
    cputotal = (cputotal + i)
return(float(cputotal))
</code></pre>

<p>can be rewritten in a functional style:</p>

<pre><code>return sum(map(float, procfile.readline().split(' ')[2:]))
</code></pre>

<p>or using a generator expression:</p>

<pre><code>return sum(float(s) for s in procfile.readline().split(' ')[2:])
</code></pre>
    </div>