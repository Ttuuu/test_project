<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bugs</h1>
<p>It isn't necessary to require <code>x()</code> to return exactly <code>void</code> — in fact, any return type would do, since we can discard the result.  So, the requirements on the <code>struct</code>s should be simplified to <code>template &lt;std::invocable EF&gt;</code>.</p>
<p>This code is problematic:</p>
<blockquote>
<pre><code>template&lt;typename = std::disjunction&lt;std::enable_if_t&lt;std::is_nothrow_move_constructible_v&lt;EF&gt;, int&gt;,
        std::enable_if_t&lt;std::is_nothrow_move_constructible_v&lt;EF&gt;, int&gt;&gt;&gt;
</code></pre>
</blockquote>
<ul>
<li><p><code>std::disjunction</code> doesn't work the way you think it does;</p>
</li>
<li><p>one of the <code>move</code>s should be <code>copy</code>;</p>
</li>
<li><p>SFINAE with <code>std::enable_if_t</code> needs to depend on a template parameter of the function template.</p>
</li>
</ul>
<p>So it should be</p>
<pre><code>template &lt;typename EF2 = EF, typename = std::enable_if_t&lt;
       std::is_nothrow_move_constructible_v&lt;EF2&gt;
    || std::is_nothrow_copy_constructible_v&lt;EF2&gt;
&gt;&gt;
</code></pre>
<p>or just use <code>requires</code>.</p>
<p>You'll need to special-case references.  <code>union</code>s containing references are ill-formed IIRC.</p>
<p>Don't mark things as <code>constexpr</code> unless the spec says so if your objective is conformance — the standard <a href="https://eel.is/c++draft/constexpr.functions#1" rel="nofollow noreferrer">prohibits</a> implementations from adding <code>constexpr</code>.</p>
<h1>Non-bugs</h1>
<p>As I said before, you can use <code>requires</code> instead of <code>enable_if</code> in many cases.</p>
<p>You don't need a <code>union</code>-simulated <code>std::optional</code> to store the exit function, because all scope guards (including inactive ones) keep their exit function alive.  (per comment)  For the move constructor, use <code>std::move_if_noexcept</code> for the <code>noexcept</code> dispatch behavior; for example:</p>
<pre><code>scope_exit(scope_exit&amp;&amp; other)
    noexcept(std::is_nothrow_move_constructible_v&lt;EF&gt; ||
             std::is_nothrow_copy_constructible_v&lt;EF&gt;)
    requires std::is_nothrow_move_constructible_v&lt;EF&gt; ||
             std::is_copy_constructible_v&lt;EF&gt;
    : m_functor(std::move_if_noexcept(other.m_functor))
{
    other.release();
}
</code></pre>
    </div>