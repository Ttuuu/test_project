<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you return an object from <code>Start</code>, you could arrange for its destructor to stop the timer.  That RAII style instantly reduces the intrusiveness of the instrumentation by half (and saves you having to think about all the return points of the functions - which might be as exceptions, remember).</p>

<p>Other points of review:</p>

<ul>
<li>We have <code>std::clog</code>, which is to be preferred to <code>std::cout</code> for these informational messages.</li>
<li>Don't clutter members with unnecessary <code>this-&gt;</code> - it's only necessary if you have name shadowing in effect, which you don't.</li>
<li><p>Prefer initializer lists in your constructors, rather than assignment:</p>

<pre><code>ExecTimeLogger(Logger* logger = nullptr)
   : _sectionNumber{INSTANCE_TOKEN},
     _logger{logger}
{
    Start(INSTANCE_NAME);
}
</code></pre></li>
<li><p>There's no point assigning to members in the destructor - they will all be out of scope when it finishes.</p></li>
<li>Prefer not to own objects by raw pointers - Modern C++ uses smart pointers to manage ownership.</li>
</ul>
    </div>