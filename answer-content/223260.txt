<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're deliberately not making <code>dictionary</code> a trie, then at least make it a set. This gives you O(1) lookup time rather than O(n).</p>

<p>However, instead of checking every possible combination against your dictionary, it's better to check each word separately. A method that only needs to find a single word can bail out early, which lets you skip a <em>lot</em> of work. It'll make your method O(n), based on dictionary size, rather than, uhh, O(scary), based on board dimensions. If we take into account that most languages only contain up to a few hundred thousand words, while a tiny 4x4 board already results in about 12 million possible words (compared to only 60 for a 2x2 board), it's clear that this scales much better.</p>

<p>With this optimization you can still find thousands of words on a 100x100 within a reasonable amount of time, while the original solution isn't really practical anymore beyond a 4x4 board. This actually gets you relatively close to the performance of your trie-based solution. The main difference is that a trie lets you skip some duplicate work by optimizing for words with a common prefix.</p>
    </div>