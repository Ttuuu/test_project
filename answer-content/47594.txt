<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The regex-native way for commenting is using the <code>/x</code> (free spacing or <a href="http://doc.infosnel.nl/ruby_regular_expressions.html" rel="nofollow noreferrer">extended mode</a>) flag.</p>

<p>In many languages there is support for multiline strings, so your regular expression will look like:</p>

<pre class="lang-rb prettyprint-override"><code>regex = /\b     # Begin match at the word boundary(whitespace boundary)
         \d{3}  # Match three digits
         [-.]?  # Optional - Match dash or dot
         \d{3}  # Match three digits
         [-.]?  # Optional - Match dash or dot
         \d{4}  # Match four digits
         \b     # End match at the word boundary(whitespace boundary)
        /x
</code></pre>

<p>In java, however, there is still no way to do <a href="https://stackoverflow.com/questions/878573/java-multiline-string">this</a>, so you can either comment it as you did, or otherwise carefully construct your string with <code>\n</code> between each line:</p>

<pre><code>String regex = "\\b     # Begin match at the word boundary(whitespace boundary)\n" +
               "\\d{3}  # Match three digits\n" +
               "[-.]?   # Optional - Match dash or dot\n" +
               "\\d{3}  # Match three digits\n" +
               "[-.]?   # Optional - Match dash or dot\n" +
               "\\d{4}  # Match four digits\n" +
               "\\b     # End match at the word boundary(whitespace boundary)";

// Of course, you need to compile with `Pattern.COMMENTS`
Pattern pattern = Pattern.compile(regex, Pattern.COMMENTS);
if (pattern.matcher(args[0]).matches()) {
    System.out.println("Match!");
} else {
    System.out.println("No match.");
}
</code></pre>

<p>The above has no advantage to your suggestion on how to comment your regex, so I guess it a matter of taste...</p>
    </div>