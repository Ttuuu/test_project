<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, there are things to improve:</p>

<pre><code>if (defaults == NULL) {
    defaults = malloc(10 * sizeof(struct pair));
}

static short pos = 0;
if(pos % 10 == 0) {
    defaults = realloc(defaults, (pos + 10) * sizeof(struct pair));
}
</code></pre>

<p>That allocates space for 10 elements, and then re-allocates space for ten elements. What a waste of time.</p>

<p>Additionally, avoid <code>sizeof(TYPE)</code>. <code>sizeof expr</code> is safer, and will be obviously correct.</p>

<p>Next, allocating memory is known to fail sometimes. So, check for that.</p>

<p>And finally, rework <code>setDefault()</code> and <code>clearDefaults()</code> so the latter actually only clears the defaults.</p>

<pre><code>bool setDefault(const char *flagName, const char *defaultValue) {
    static short pos = 0;
    if (!defaults) pos = 0;
    if (pos % 10 == 0) {
        struct pair* temp = realloc(defaults, (pos + 10) * sizeof *temp);
        if (!temp) return false;
        defaults = temp;
    }
    ...
}

static void clearDefaults(void) {
    free(defaults);
    defaults = NULL;
}
</code></pre>

<p>Are you sure you want to use <a href="https://en.cppreference.com/w/c/string/byte/strncpy" rel="nofollow noreferrer"><code>strncpy()</code></a>? You know that's not really a string-function, but a zero-padding function?</p>

<p>Another interesting question is how the other functions should know how many elements are in the list. I have no idea, design something.</p>

<p>Also, consider being more dynamic, and just saving two pointers to independently-allocated strings in the pair-element.</p>

<p>And if having <code>defaults</code> starts as a null-pointer-value really disturbs you, just initialize it to oint to a statically-allocated null-object.</p>
    </div>