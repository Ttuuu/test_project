<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Formatting</h2>

<p>A PEP8 formatter, linter or IDE will tell you (among other things) that</p>

<ul>
<li>You need blank lines between your class definitions</li>
<li>You need spaces between your operators in statements like this: <code>0&lt;value&lt;501</code></li>
<li>Class names like <code>Descriptor_sex</code> should be <code>DescriptorSex</code></li>
<li>Variable names like <code>standarterror</code> should be <code>standard_error</code>; <code>_Hero__weight</code> should be <code>_hero_weight</code>.</li>
</ul>

<h2>Typos</h2>

<p>standart = standard, tatoo = tattoo, parametr = parameter, dicriptor = descriptor, parametres = parameters.</p>

<h2>Variable names</h2>

<p><code>_</code> is reserved by convention for a variable you don't use - but you <em>do</em> use it here:</p>

<pre><code>_=input("What do you want ?")
</code></pre>

<p>so give it a meaningful name.</p>

<p>Don't call your dict of all possible values <code>data</code>. Call it perhaps <code>possible_params</code>.</p>

<p>Don't use double-underscores for something like this: <code>self.__weight</code> - just use one underscore. Double underscores are used in <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">name mangling</a>, and your application doesn't justify the use of that mechanism.</p>

<h2>Abstract base class</h2>

<p><code>Descriptor</code> defines a <code>__get__</code> and a <code>__set__</code>, but they're no-ops, and overridden in all child classes. That means you probably intend for <code>Descriptor</code> to be abstract, in which case those base methods should <code>raise NotImplementedError</code>.</p>

<h2>Intervals</h2>

<pre><code>if 0&lt;value&lt;501
</code></pre>

<p>does not match your description. If you want to include 0 and 500, you're better off writing</p>

<pre><code>if 0 &lt;= value &lt;= 500
</code></pre>

<h2>Validation</h2>

<p>You hold onto a <code>possible_list</code> of allowed values for your various descriptors. This list is better off as a set, whose membership tests execute more quickly. You don't need to keep duplicates or order.</p>

<p>Also: you go through all of the trouble of making this descriptor class system, with an included <code>possible_data</code>, but then don't actually use it in the base class. You should factor out the membership tests from your children to the base class so that it only needs to be written once.</p>

<p>By example, the base class could include something like</p>

<pre><code>def __set__(self, instance, value):
    if value not in self.possible_values:
        raise self.standard_error
    instance._value = value
</code></pre>

<p>There's not really an advantage to having different names for your <code>value</code>, so you can just track it as a member in the base class. Then most <code>__set__</code> methods don't even need to be reimplemented in the children.</p>

<p>This:</p>

<pre><code>if _ in [str(i + 1) for i in range(len(self.types))]:
</code></pre>

<p>is doing things somewhat backwards. Instead of stringifying the expected values, you should integer-parse the user input; something like</p>

<pre><code>decision = int(input('Your decision'))
</code></pre>

<p>keeping in mind that you'll need to catch a <code>ValueError</code> if you want to deal with input validity there.</p>
    </div>