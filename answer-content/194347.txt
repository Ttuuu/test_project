<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Dangerous</h1>

<p>There are so many caveats in this function I would really not allow it in any code base because of potencial unexpected , or misunderstood behaviour. Its just waiting to cause problems in completely unrelated code.</p>

<h2>Some points.</h2>

<ul>
<li><p>Some variables should be <code>const</code> they are  <code>keys</code>, <code>key</code>, <code>useArray</code>, <code>nextKey</code>, <code>finalStep</code></p></li>
<li><p>Don't see why you create a new variable <code>curStep</code> (with very odd name)  to hold the current object. Just reuse <code>obj</code></p></li>
<li><p>Avoid the name <code>set</code> as it is used as a JavaScript token eg create a setter  <code>{ set val(blah) {...} }</code> Maybe the name could be <code>assignToPath</code></p></li>
<li><p><code>null</code> is also of type <code>"object"</code> so it will pay to extend the test on the first line to include the <code>null</code> Would be best to throw</p></li>
<li><p>You currently return <code>undefined</code>. Maybe it would be more helpful to return the object you assigned the new property to.</p></li>
<li><p>Why use the long version <code>!Object.prototype.hasOwnProperty.call(curStep, key)</code> ?? when <code>!curStep.hasOwnProperty(key)</code> will do the same.</p></li>
<li><p>If a property is expressly set to <code>undefined</code> your function fails.</p></li>
</ul>

<pre class="lang-js prettyprint-override"><code>const test = { a: undefined }
assignToPath(test, "a.b", "foo" ); //throws but would expect test.a.b = "foo"
</code></pre>

<ul>
<li><p>Objects can be locked via various <code>Object</code> functions <code>Object.freeze</code>, <code>Object.seal</code>, <code>Object.preventExtensions</code>, <code>Object.defineProperties</code> and <code>Object.defineProperty</code> Your function ignores these settings.</p></li>
<li><p>If a property exists but is not an <code>Object</code> or <code>Array</code> you still attempt to add a property to it.</p></li>
</ul>

<pre class="lang-js prettyprint-override"><code>const test = { a: "blah" }
assignToPath(test, "a.b", "foo" ); // fails
</code></pre>

<ul>
<li>This is what I would consider a low level function and as such would be one of the few that need to throw errors rather than fail silently. It should throw at anything that is not as expected. For example if the object to assign a property to is an array, or an object</li>
</ul>

<pre class="lang-js prettyprint-override"><code>const test = { a: [] }
assignToPath(test, "a.b", "foo" ); // Maybe this should throw

const test = { a: {} }
assignToPath(test, "a.1", "foo" ); // This should throw as it is unclear what the result should be.
// the case against the above
const test = {}
assignToPath(test, "a.1", "foo" ); // creates an array
</code></pre>

<h2>Suggestions only.</h2>

<p>Adding a settings argument would allow for better control of the behaviour when things get a little ambiguous.</p>

<pre><code>assignToPath({a:[]}, "a.b", "bar", {arrayHaveProps : true});

assignToPath({a:{}}, "a.1", "bar", {allowObjIndex : true});
</code></pre>

<p>You can shorten the code if you use a while loop and shift the path as you go.</p>

<pre><code>// simple example of using `while` and `shift` rather than a `for` loop
var obj = {a:{b:{c:"a"}}};
const path = "a.b.c".split(".");
while(path.length &gt; 1){
   obj = obj[path.shift()];
}
obj[path.shift()] = "b";
</code></pre>
    </div>