<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm no mathematician, but here are some suggestions as a long-time programmer:</p>

<ol>
<li><p><strong>Naming</strong> is one of the hardest programming skills to learn, but it is also incredibly important for readability and maintainability. Renaming things can make certain bugs and code smells obvious.</p>

<ul>
<li>I would recommend <strong>expanding any abbreviations</strong> within reason, as long as writing them out makes the code even a smidge more readable, like <code>denominator</code> instead of <code>denom</code>.</li>
<li>It is not clear what <code>Nx</code> etc. are. It looks like they are <em>half</em> of the extent of the world, since you create <code>x</code> from <code>-Nx</code> to <code>Nx</code> etc. (see below).</li>
<li><code>x</code>, <code>y</code> and <code>t</code> are usually used as names for coordinates. In your case they are instead collections of coordinates or axes, so I would name them <code>x_axis</code> or <code>x_coordinates</code> etc.</li>
<li><code>xx</code> etc. <em>are</em> coordinates, so I would name them <code>x_coordinate</code> or just <code>x</code>.</li>
<li><p>A good rule of thumb is to try to "optimize" comments into names. So rather than</p>

<pre><code># Define Function to realize Gaussian Disturbance
def g_source(xx, yy, tt):
</code></pre>

<p>I would probably write something like</p>

<pre><code>def gaussian_disturbance(x: int, y: int, t: int) -&gt; float:
</code></pre>

<p>As far as I can tell this should make at least some of the comments within that function redundant.</p></li>
</ul></li>
<li>As far as I can tell <code>np.linspace(-Nx, Nx, 100)</code> creates an array <code>[-100, -98, â€¦, 98, 100]</code>. Is it intentional that points are separated by two, should the range be from 0 to 100, or should <code>num</code> be 200? If the range is meant to be from 0 to 100 that would cut the memory and processing requirements by a factor of eight.</li>
</ol>

<p>General suggestions:</p>

<ol>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic. In terms of bang for your buck this tool is unbeatable.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> with a strict complexity limit will give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre>

<p>It can take some time to understand and correct for all the things it prints out, but doing so will help a lot in the long run.</p></li>
<li><p>I would then recommend adding <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> and validating them using a strict <a href="https://github.com/python/mypy" rel="nofollow noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre>

<p>This makes it clear what you are passing around, and can highlight issues such as using a variable for more than one thing.</p></li>
</ol>
    </div>