<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><a href="https://tour.golang.org/methods/18" rel="nofollow noreferrer">an exercise from the Go Tour website</a></p>
  
  <p>I found two ways to achieve the goal but I am wondering if there is no
  other clean way of doing it.</p>
  
  <p><a href="https://play.golang.org/p/yplYlWVgVR3" rel="nofollow noreferrer">Example 1 with range.</a></p>
  
  <p><a href="https://play.golang.org/p/p423hhwjsqO" rel="nofollow noreferrer">Example 2 with a simple <em>fmt.Sprintf</em></a></p>
</blockquote>

<hr>

<p>Another way (Example 3):</p>

<pre><code>package main

import (
    "fmt"
    "strconv"
)

type IPAddr [4]byte

func (ip IPAddr) String() string {
    s := make([]byte, 0, (1+3)*len(IPAddr{}))
    for i, b := range ip {
        if i &gt; 0 {
            s = append(s, '.')
        }
        s = strconv.AppendInt(s, int64(b), 10)
    }
    return string(s)
}

func main() {
    hosts := map[string]IPAddr{
        "loopback":  {127, 0, 0, 1},
        "googleDNS": {8, 8, 8, 8},
    }
    for name, ip := range hosts {
        fmt.Printf("%v: %v\n", name, ip)
    }
}
</code></pre>

<p>Playground: <a href="https://play.golang.org/p/HQPd8cVAg-U" rel="nofollow noreferrer">https://play.golang.org/p/HQPd8cVAg-U</a></p>

<p>Output:</p>

<pre><code>loopback: 127.0.0.1
googleDNS: 8.8.8.8
</code></pre>

<hr>

<p>Yet another way (Example 4):</p>

<pre><code>package main

import (
    "fmt"
    "net"
)

type IPAddr [4]byte

func (ip IPAddr) String() string {
    return net.IP(ip[:]).String()
}

func main() {
    hosts := map[string]IPAddr{
        "loopback":  {127, 0, 0, 1},
        "googleDNS": {8, 8, 8, 8},
    }
    for name, ip := range hosts {
        fmt.Printf("%v: %v\n", name, ip)
    }
}
</code></pre>

<p>Playground: <a href="https://play.golang.org/p/p3XKFFMBVI-" rel="nofollow noreferrer">https://play.golang.org/p/p3XKFFMBVI-</a></p>

<p>Output:</p>

<pre><code>loopback: 127.0.0.1
googleDNS: 8.8.8.8
</code></pre>

<hr>

<p>Go programmers strongly believe in meaningful code metrics. For example, performance.</p>

<p>A Go benchmark for Example 1:</p>

<pre><code>$ go test string1_test.go -bench=. -benchmem
</code></pre>

<p><code>string1_test.go</code>:</p>

<pre><code>package main

import (
    "fmt"
    "testing"
)

type IPAddr [4]byte

func (ip IPAddr) String() string {
    rs := ""
    for k, v := range ip {
        if k == 0 {
            rs += fmt.Sprintf("%v", v)
            continue
        }
        rs += fmt.Sprintf(".%v", v)
    }
    return rs
}

func BenchmarkString1(b *testing.B) {
    hosts := map[string]IPAddr{
        "loopback":  {127, 0, 0, 1},
        "googleDNS": {8, 8, 8, 8},
    }
    for N := 0; N &lt; b.N; N++ {
        for name, ip := range hosts {
            fmt.Sprintf("%v: %v\n", name, ip)
        }
    }
}
</code></pre>

<p>Running the same benchmark for all four examples:</p>

<pre><code>BenchmarkString1-8    841730   1412 ns/op   176 B/op   19 allocs/op
BenchmarkString2-8   1228399    931 ns/op   128 B/op    8 allocs/op
BenchmarkString3-8   1765022    626 ns/op   128 B/op    8 allocs/op
BenchmarkString4-8   1984806    574 ns/op   128 B/op    8 allocs/op
</code></pre>

<p>Examples 1 and 2 are inefficient.</p>
    </div>