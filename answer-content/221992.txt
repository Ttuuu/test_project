<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ul>
<li>You could use <code>str(datetime.date.today())</code> to get the current date.</li>
<li><p>You can chain <code>replace</code> calls:</p>

<pre><code>&gt;&gt;&gt; 'abba'.replace('a', 'c').replace('b', 'd')
'cddc'
</code></pre></li>
<li><code>if len(inspect.stack()[1:]) == 0:</code> would usually be replaced with just <code>if inspect.stack()[1:]</code>.</li>
<li>Treating your variables as immutable makes the code much easier to read. For example, <code>log_path = "/".join(frame.filename.split("/")[:-1]) + "/log"</code> means you only have to understand one assignment rather than the connection between two of them.</li>
<li><code>os.makedirs</code> takes <a href="https://docs.python.org/3/library/os.html?highlight=makedirs#os.makedirs" rel="nofollow noreferrer">an option so you don't have to check whether the directory exists already</a>.</li>
<li>String concatenation using <code>+</code> is discouraged for anything more than two strings. Probably the best solution available today is <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">f-strings</a>. For example, <code>log_path + "/" + log_file_name + ".txt"</code> would become <code>f"{log_path}/{log_file_name}.txt"</code>.</li>
<li>I don't understand the name <code>amk</code>. Names are incredibly important for the maintainability of your code, but I don't know what to suggest as a replacement except possibly <code>message</code>.</li>
<li>You could put the globals into fields in a class; that way they would be kept between invocations without polluting the main namespace.</li>
</ul>
    </div>