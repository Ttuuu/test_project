<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The thread pool is not storing messages on a queue; it is storing <code>Runnable</code> tasks.  However, each <code>Runnable</code> task has access to the effectively final <code>StringBuffer message</code> variable from the calling context.</p></li>
<li><p>See <a href="https://stackoverflow.com/questions/17957382/fixedthreadpool-vs-cachedthreadpool-the-lesser-of-two-evils">this StackOverflow question</a>.  Each is a <code>ThreadPoolExecutor</code>, just with different parameters to control how many threads are created and the type of queue.  I would lean in favour of the <code>FixedThreadPool</code> with 1 thread for each CPU core, but many other factors can and will impact that; profile to be sure.</p></li>
<li><p><strong>No</strong>.  Making <code>processMessage()</code> synchronized will mean you are single threaded ... worse, because the overhead of multiple threads being scheduled to process the task queue in a single threaded fashion.   At 150 messages/10 seconds, with one thread the function would need to complete in 66ms.  If you have 8 cores, with 1 thread per core, each thread could take a leisurely 500ms to process the message, as long as they can run independently.  You may have parts of <code>processMessage</code> that you may need to make synchronized, but you’ll want to make those regions as small and fast as possible.</p></li>
</ol>

<p>Other comments:</p>

<p>A <code>StringBuffer</code> is a mutable object;  since <code>message</code> is being passed to another thread, for safety, I’d want the message to be transformed into a immutable <code>String</code> so the caller doesn’t clear the message buffer while the executor thread is processing it.</p>

<p><code>processMessage()</code> does not need to be <code>public</code>; <code>private</code> would be more appropriate. </p>

<p>It looks like <code>executor</code> should be <code>private</code> and <code>final</code> as well.</p>
    </div>