<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OK, in the interest of not inventing wheels, I tried boost::multi_index. Took half an hour to get over their approach, type syntax and their API. </p>

<p>But it's actually really good. Very flexible, very performant. And not that verbose for reasonable real world cases. It all seems a bit C++03, but that doesn't actually get in the way. In fact if you use modern features "like <code>auto</code> you can avoid some of the very verbose <code>typename .... ::value_type</code> type syntax, see below</p>

<p>Code does something similar to my code above (ie simple map with an additional "linked-list" sequence index) but using boost::multi_index:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;boost/multi_index/member.hpp&gt;
#include &lt;boost/multi_index/ordered_index.hpp&gt;
#include &lt;boost/multi_index/sequenced_index.hpp&gt;
#include &lt;boost/multi_index_container.hpp&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

using boost::multi_index_container;
using namespace boost::multi_index;

struct Pair {
  std::string key;
  int value;

  Pair(std::string key_, int value_) : key(key_), value(value_) {}

  friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Pair&amp; p) {
    os &lt;&lt; p.key &lt;&lt; " -&gt; " &lt;&lt; p.value &lt;&lt; "\n";
    return os;
  }
};

struct key {};

typedef multi_index_container&lt;
    Pair, indexed_by&lt;sequenced&lt;&gt;, ordered_unique&lt;tag&lt;key&gt;, member&lt;Pair, std::string, &amp;Pair::key&gt;&gt;&gt;&gt;
    PairContainer;

template &lt;typename Tag, typename MIC&gt; void print_out_by(const MIC&amp; mic) {
  auto&amp; i = get&lt;Tag&gt;(mic);
  std::copy(i.begin(), i.end(), std::ostream_iterator&lt;typename MIC::value_type&gt;(std::cout));
}

int main() {

  PairContainer ps;
  ps.push_back(Pair("Johnny", 10));
  ps.push_back(Pair("Alex", 20));
  ps.push_back(Pair("Barty", 30));
  ps.push_back(Pair("Zoe", 40));
  ps.push_back(Pair("Vaughan", 50));

    int sum       = 0;
    for (auto it = ps.begin(); it != ps.end(); ++it) {
        sum += it-&gt;value;
    }
    std::cout &lt;&lt; sum &lt;&lt; "\n";
    {
        const auto&amp; i = get&lt;key&gt;(ps);
        for (auto it = i.begin(); it != i.end(); ++it) {
        std::cout &lt;&lt; *it;
        }
    }
    std::cout &lt;&lt; sum &lt;&lt; "\n";
    {
        for (auto it = ps.begin();  it != ps.end(); ++it) {
        std::cout &lt;&lt; *it;
        }
    }
  return 0;
}

<span class="math-container">```</span>
</code></pre>
    </div>