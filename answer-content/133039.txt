<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>String[] temp = new String[stringList.length*2];

for(int i =0 ; i&lt; stringList.length; i++){
    temp[i] = stringList[i];
}
</code></pre>

<p>I feel this is the major flaw in your algorithm. </p>

<p>You'd be better off with a linked list - no copying needed to expand the list.</p>

<p>Also, why are you manually copying from the string array when there is <code>System.arraycopy</code> to do just this for you? (Granted, I wouldn't use it in an interview either, but that's because the interviews I envision don't give me access to the internet or documentation, and getting the parameters for <code>System.arraycopy</code> right is tricky.)</p>

<p>The working of your StringBuilder is correct, though it doesn't offer much in terms of utility. It's not null safe, it's not thread-safe, and it doesn't offer any functionality besides appending Strings. There are no constructors that start with a string or capacity, and add returns void, so you can't chain method calls.</p>

<p>I expect a StringBuilder like this to end up in a utilities package so it is not a major concern, but your instance variables are package-scoped. So other code can violate your internals.</p>

<p>There's also a lack of an API; something which is much needed in utility classes because they're far more likely to be reused.</p>
    </div>