<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure if it is ideal to keep the logic on how much XP is needed for a level up inside the player class itself. Usually these are properties kept outside and feed into the logic. While there are certain designs that consider the player to be a <a href="https://refactoring.guru/smells/data-class" rel="nofollow noreferrer">data class</a> with some external manager performing modifications like the levleUp and other routines on the player object, this somehow violates OOP principles where state should be encapsulated in the class and method invocations used to alter the state internally.</p>

<p>By that, the first thing which comes to my mind on analyzing your code is, that you are actually performing a mapping between XP and the level. Your current solution creates such a mapping per player. If you have a system with hundreds of players this mapping would probably create a lot of duplicate data unless you want a per-player solution, which also would not work with the current approach. This therefore is a strong candidate for refactoring. </p>

<p>You might use an implementation of <code>Map</code> that you can leverage to see how many XP are required for a player to gain a level-up. As mention before, ideally you sepcify such a mapping outside of the code and then only read in the configuration on application start. This allows you to tweak your application later on without having to recompile the whole code. As the levels are furthermore progressing you only need to store the XP required per level.</p>

<p>You could i.e. have an <code>xpPerLevel.txt</code> file with the following content:</p>

<pre><code>6
17
36
...
</code></pre>

<p>which you could read in with a method like below:</p>

<pre><code>public Map&lt;Integer, Integer&gt; loadXpPerLevel() {
    Map&lt;Integer, Integer&gt; xpPerLevel = new LinkedHashMap&lt;&gt;();
    int level = 1;
    try (Stream&lt;String&gt; lines = Files.lines(Paths.get("xpPerLevel.txt"))) {
      lines.forEach(line -&gt; xpPerLevel.put(level++, Integer.valueOf(line));
    }
    return xpPerLevel;
}
</code></pre>

<p>Ideally this code sits outside of the <code>Player</code> class and only the <code>xpPerLevel</code> map is injected to the player through its constructor. This allows certain different XP-level settings for different kinds of players, i.e. premium players get a different map injected than normal players. Via a <a href="https://dzone.com/articles/design-patterns-strategy" rel="nofollow noreferrer">strategy pattern</a> this can be customized quite easily.</p>

<p>Next in your <code>levelUp</code> method you perform a check for the <code>currentXP</code> against the <code>requiredXP</code>. In order for a level up to kick in the player has tho have exactly the same amount of XP as required. If s/he has more though, no level up would occur. With the changes proposed from above the <code>levelUp()</code> method can be refactored as follows, which was renamed to <code>checkCurrentXP</code> to give it a bit more clarity:</p>

<pre><code>private void checkCurrentXP() {
    Integer xpRequired = null;
    do {
        xpRequired = xpPerLevel.get(curLevel);
        if (null != xpRequired) {
            if (curXP &gt;= xpRequired) {
                performLevelUp();
            }
        }
    } while (xpRequired == null || curXP &lt; xpRequired);
}
</code></pre>

<p>This method simply retrieves the XP required for a level up based on the user's current level and checks whether the user already acquired more XP than needed for a level up and in that case invokes the <code>performLevelUp()</code> method, which is just a renamed version of <code>ding()</code>. As the level up is XP driven it may occur that a user acquired more XP than actually needed for a single level up in which cace the proposed soultion automatically would perform a second, third, ... level up as well.</p>

<p>Note that I started the <code>xpPerLevel.txt</code> by the XP requirements needed to reach level 2 as the current logic would initially bump a player to level 2 automatically as 0 XP are required to reach that level. On applying these changes you basically only need to store the <code>xpPerLevel</code> map, the current level of the user as well as the gained XP on the user.</p>

<p>As before with the <code>xpPerLevel</code> map, <code>ding()</code> or <code>performLevelUp()</code>, as I renamed it to, are also good candidates for a strategy pattern that allows you to define different level up behaviors for different players which can be changed during runtime i.e. to see during test time which level-up logic is more suitable if multiple candidates may exist (i.e. one strategy might reset the XP of a user after a level up was performed while an other just builds up on the old amount. Yet another strategy might refill the player's HP back to maximum and so forth). The method itself has also a lot of duplicate code, which you don't really need as you don't do anything differently from level to leve. It is therefore a strong candidate for refactoring as well:</p>

<pre><code>private void performLevelUp() {
    System.out.println(" #############################");
    System.out.println(" # You have reached level " + (++curLevel) + "! # ");
    System.out.println(" #############################");
}
</code></pre>

<p>As the level of a player is dependent on the XP earned I'd remove the <code>setLevel(int level)</code> method completly. Instead I'd provide a method that allows a player to gain XP:</p>

<pre><code>public void awardXP(int xpAmount) {
    curXP += xpAmount;
    checkCurrentXP();
}
</code></pre>

<p>Right after you awarded the player with a number of XP it will automatically check the whether it lead to a level up or not and thus update the user's level accordingly.</p>

<p>As hopefully can be seen, certain state, such as the player's <code>level</code> and <code>curXP</code>, is encapsulated in the player's object and through invoking methods on that player's object that state gets manipulated. This is in essence what object-oriented programming should be.</p>

<p>Whithin your game loop you only need to award the player a certain amount of XP which will trigger internal state changes automatically. So there is no need to invoke <code>p.levelUp()</code> and <code>p.levelUpXp()</code> within your game loop.</p>

<p>As your main-loop is basically a typical console application reading in some user input and performing some task on the input applying a <a href="https://dzone.com/articles/design-patterns-command" rel="nofollow noreferrer">command pattern</a> here does make the code a bit more readable. You basically refactor out your if/if-else segments into own little classes that are only focusing on that particular task. Your loop is basically responsible for too many things, which violates a bit the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single responsibility principle</a> which is further a part of <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">SOLID</a>.</p>

<p>Basically what you can do to improve your code here is, i.e. introduce a new <code>EventLoop</code> class where you can register a couple of commands with it. The commands are just implementations of either an interface or abstract base class. The <code>EventLoop</code> class will store the commands within a map for a certain input command. Upon user-input the input will be parsed and the respective command invoked, if available. In Java this may look something like this:</p>

<pre><code>public class EventLoop {

    private final Map&lt;String, ConsoleCommand&gt; registeredCommands;

    EventLoop() {
        reisteredCommands = new ConcurrentSkipListMap&lt;&gt;();
    }

    public void registerCommand(String command, ConsoleCommand action) {
        if (action == null) {
            throws new IllegalArgumentException("No defined action for command " + command);
        }
        registeredCommands.put(command, action);
    }

    public vod unregisterCommand(String command) {
        registeredCommands.remove(command);
    }

    public void update(GameState state) {
        Scanner scanner = new Scanner(System.in);

        while(GameState.FINISHED != state.currentState()) {
          printHelp(state);

          String input = scanner.nextLine();
          // String input = validate(input);
          ConsoleCommand action = registeredCommands.get(input);
          if (null != action) {
              action.perform(state);
          } else {
              System.err.println("\t Invalid Command!");
          }
        }
        scanner.close();
    }

    private void printHelp(GameState state) {
        System.out.println(
                getPlayerInfo(state.getPlayer()) 
                + "\n\t\n\t" 
                + getEnemyInfo(state.getEnemy()));
        System.out.println("\n\t What would you like to do?");
        for(String cmd : registeredCommands.keySet()) {
            ConsoleCommand action = registeredCommands.get(cmd);
            System.out.println("\t " + cmd + ". " + action.printHelp());
        } 
    }

    private String getPlayerInfo(Player player) {
        return "\t" + player.getName() + "\n\t HP: " player.getHealth() + " Level: " + player.getCurrentLevel() + " Exp: " + player.getCurrentXP();
    }

    private String getEnemyInfo(Creature enemy) {
        return "\t" + enemy.getName() + "\n\t HP: " +enemy.getHealth() + " Level: " + enemy.getCurrentLevel();
    }
}
</code></pre>

<p>A <code>ConsoleCommand</code> defines now the concrete action to perform once invoked. As can be seen from the <code>EventLoop</code> two methods are at least necessary:</p>

<pre><code>public interface ConsoleCommand {
    void perform(GameState state);
    String printHelp();
}
</code></pre>

<p>If you later on decide that you want to pass certain properties to a command, you should change the interface to an abstract class and implement a method like <code>parseCommand(String input)</code> in it so that inheriting classes automatically have access to the already parsed values.</p>

<p>A concrete implementation of the <code>AttackCommand</code> may now look like this</p>

<pre><code>public class AttackCommand implements ConsoleCommand {

    private Random rand = new SecureRandom();

    @Override
    public String printHelp() {
        return "Attack"
    }

    @Override
    public void perform(GameState state) {

        Player player = state.getPlayer();
        Creature enemy = state.getEnemy();
        int damageDealt = rand.nextInt(player.getAttackDamage());
        int damageTaken = rand.nextInt(enemy.getAttackDamage());

        player.takeDamage(damageTaken);
        enemy.takeDamage(damageDealt);

        if (damageDealt &gt; 0) {
            System.out.println("\t&gt; You strike the " 
                + enemy.getName() + " for " + damageDealt + " damage!");
         } else if (damageDealt &lt; 1) {
            System.out.println("\t&gt; You attempt to hit the " 
                + enemy.getName() + " but miss!");
         }
         if (damageTaken &gt; 0) {
             System.out.println("\t&gt; The " + enemy.getName() 
                + " retaliates! You take " + damageTaken + " damage!");
         } else if (damageTaken &lt; 1) {
             System.out.println("\t&gt; The " + enemy.getName() 
                + " retaliates but misses!");
         }

         if (player.getHealth() &lt; 1) {
             System.out.println("\t ##################" 
                 + "\n\t # You Have Died! #" 
                 + "\n\t ##################");
             state.updateGameState(GameState.FINISHED);
         }

         if (enemy.getHealth() &lt; 1) {
             System.out.println("\t Enemy " + enemy.getName() 
                 + " was crushed by your mighty strikes. You have been awarded with "
                 + enemy.getAmountOfXPWorthForKilling() + " XP";
             player.awardXP(enemy.getAmountOfXPWorthForKilling());
         }
    }
}
</code></pre>

<p>I hope that by the presented examples it does make sense to you, that by separating the actual actions into commands the general code becomes less cluttered and therefore easily readable and understandable. You further can test an action more easily as well.</p>

<p>As you might have noticed that I also changed a couple of things throughout this example. I like to have names of methods that actually do the same things on the object to be the same. So <code>player.takeDamage(int)</code> does basically the same as <code>enemy.takeDamage(int)</code>. Refactoring this behavior to a parent class would make sense here as everything has to die once it has no HP left. The difference here is though that if a player dies the game is over compared to when a creature dies the player is awarded with XP.</p>

<p>Further, it is IMO a good design to refactor the overall GameState out of the actual main-loop so that it can get passed around more easily. This allows the action commands to update the game state if needed without having to perform a callback into the main-loop.</p>
    </div>