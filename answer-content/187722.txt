<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm working on something of a simple REST client myself and I wonder if my core bit might be able to help your implementation and vice-versa. I'll just post a tiny bit here (the generic GET async method and its internal implementation) (also null checks removed for space)</p>

<p>One of the more interesting things I found in my research is that both <code>HttpRequestMessage</code> and <code>HttpResponseMessage</code> both implement <code>IDisposable</code>. Yes, so does <code>HttpClient</code>, but it's an <a href="https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/" rel="nofollow noreferrer">exception to the rule</a>. <code>HttpContent</code> does as well, but disposing of <code>HttpResponseMessage</code> also disposes of the content. While it was easy in a non-<code>async</code> way to wrap the whole thing in a <code>using</code>, being fully <code>async</code> required the response message to stay alive while the <code>contentFunc</code> was processing. Anyhow, this may or may not be applicable to your scenario, but I'm mentioning it due to your comment and <a href="https://youtu.be/YnNSnJbjdws?t=106" rel="nofollow noreferrer">lack of disposal</a>.</p>

<pre><code>    private const string JsonContentType = "application/json";
    private static readonly HttpClient _HttpClient = new HttpClient();

    public static Task&lt;T&gt; GetAsync&lt;T&gt;(this Uri uri)
    {
        return uri.GetDeleteAsync(
            HttpMethod.Get,
            async content =&gt; JsonConvert.DeserializeObject&lt;T&gt;(
                await content.ReadAsStringAsync().ConfigureAwait(false)));
    }

    private static async Task&lt;T&gt; GetDeleteAsync&lt;T&gt;(
        this Uri uri,
        HttpMethod httpMethod,
        Func&lt;HttpContent, Task&lt;T&gt;&gt; contentFunc,
        string contentType = JsonContentType,
        bool disposeResponse = true)
    {
        HttpResponseMessage httpResponseMessage;

        using (HttpRequestMessage httpRequestMessage = new HttpRequestMessage(httpMethod, uri))
        {
            httpRequestMessage.Headers.Accept.Clear();
            httpRequestMessage.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(contentType));
            httpResponseMessage = await _HttpClient.SendAsync(httpRequestMessage).ConfigureAwait(false);
        }

        httpResponseMessage.EnsureSuccessStatusCode();
        if (contentFunc != null)
        {
            return await contentFunc(httpResponseMessage.Content).ContinueWith(previousTask =&gt;
            {
                if (disposeResponse)
                {
                    httpResponseMessage.Dispose();
                }

                return previousTask.Result;
            }).ConfigureAwait(false);
        }

        httpResponseMessage.Dispose();
        return default(T);
    }
</code></pre>
    </div>