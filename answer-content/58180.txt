<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I'm pretty sure this will fail for some IBANs. You convert the country code to digits, but I don't see you doing the same for any other letters in the IBAN - and there might well be others. The example Wikipedia gives is <code>GB82WEST12345698765432</code>. The "WEST" should be converted to numbers as well (same procedure as the country code; <code>'A' = 10</code>, <code>B = 11</code>, etc.).</p></li>
<li><p>Not sure why <code>getLengthMap</code> is a function - it's basically a constant value, and might as well be declared as a simple variable.</p></li>
<li><p>The regexes have some redundancy.This one, <code>/^[a-zA-Z0-9]+$/</code>, checks for lowercase letters, though the line before has already called <code>toUpperCase()</code>. And the next regex accepts trailing whitespace and dashes, though those have been removed.</p></li>
<li><p>And while you're using regexes, you might as well use that to pick the string apart, rather than <code>substring</code> plus magic numbers.</p></li>
<li><p>Your <code>modulo</code> function seems fine, though there's little reason to have it accept a <code>divisor</code> argument. Since it's an internal helper function specifically for IBAN, it'll always be mod 97. So in this case, I might actually prefer that that was hard-coded (and the function was named <code>mod97</code> or something equally explanatory).</p></li>
</ol>

<p>In all, I think you can do a lot more with fewer regexes, which would help streamline the code.</p>

<p>To sanitize the input:</p>

<pre><code>var iban = value.toUpperCase().replace(/[^A-Z0-9]/g, '');
</code></pre>

<p>To "parse" the IBAN:</p>

<pre><code>var match = iban.match(/^([A-Z]{2})(\d{2})(.+)$/);
</code></pre>

<p>if <code>match</code> is <code>null</code> the code's automatically invalid. Otherwise, <code>match[1]</code> will be the 2-letter country code, <code>match[2]</code> will be the check digits, and <code>match[3]</code> will be the rest of the IBAN. Provided there's a match it should then rearranged as <code>match[3] + match[1] + match[2]</code></p>

<p>Alternatively, you can check and rearrange in one go:</p>

<pre><code>var code = iban.replace(/^([A-Z]{2})(\d{2})(.+)$/, "$3$1$2");
</code></pre>

<p>if <code>code === iban</code>, nothing's been rearranged, which means there wasn't a match, and the code's invalid. You'd still have to extract the country code, though, so not much is won by doing this.</p>

<p>Finally, to convert letters to numbers:</p>

<pre><code> var digits = iban.replace(/[A-Z]/g, function (letter) {
   return String(letter.charCodeAt(0) - 55);
 });
</code></pre>

<hr>

<p>Here's my take</p>

<pre><code>var validIBAN = (function () { // use an IIFE
  // A "constant" lookup table of IBAN lengths per country
  // (the funky formatting is just to make it fit better in the answer here on CR)
  var CODE_LENGTHS = {
    AD: 24, AE: 23, AT: 20, AZ: 28, BA: 20, BE: 16, BG: 22, BH: 22, BR: 29,
    CH: 21, CR: 21, CY: 28, CZ: 24, DE: 22, DK: 18, DO: 28, EE: 20, ES: 24,
    FI: 18, FO: 18, FR: 27, GB: 22, GI: 23, GL: 18, GR: 27, GT: 28, HR: 21,
    HU: 28, IE: 22, IL: 23, IS: 26, IT: 27, JO: 30, KW: 30, KZ: 20, LB: 28,
    LI: 21, LT: 20, LU: 20, LV: 21, MC: 27, MD: 24, ME: 22, MK: 19, MR: 27,
    MT: 31, MU: 30, NL: 18, NO: 15, PK: 24, PL: 28, PS: 29, PT: 25, QA: 29,
    RO: 24, RS: 22, SA: 24, SE: 24, SI: 19, SK: 24, SM: 27, TN: 24, TR: 26
  };

  // piece-wise mod97 using 9 digit "chunks", as per Wikipedia's example:
  // http://en.wikipedia.org/wiki/International_Bank_Account_Number#Modulo_operation_on_IBAN
  function mod97(string) {
    var checksum = string.slice(0, 2),
        fragment;

    for(var offset = 2 ; offset &lt; string.length ; offset += 7) {
      fragment = String(checksum) + string.substring(offset, offset + 7);
      checksum = parseInt(fragment, 10) % 97;
    }

    return checksum;
  }

  // return a function that does the actual work
  return function (input) {
    var iban = String(input).toUpperCase().replace(/[^A-Z0-9]/g, ''), // keep only alphanumeric characters
        code = iban.match(/^([A-Z]{2})(\d{2})([A-Z\d]+)$/),           // match and capture (1) the country code, (2) the check digits, and (3) the rest
        digits;

    // check syntax and length
    if(!code || iban.length !== CODE_LENGTHS[code[1]]) {
      return false;
    }

    // rearrange country code and check digits, and convert chars to ints
    digits = (code[3] + code[1] + code[2]).replace(/[A-Z]/g, function (letter) {
      return letter.charCodeAt(0) - 55;
    });

    // final check
    return mod97(digits) === 1;
  };
}());
</code></pre>
    </div>