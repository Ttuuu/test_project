<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So there are multiple things. First of all I'll share the code refactoring related suggestions and then we can look at the performance improvements of code.</p>

<h2>Refactoring</h2>

<ol>
<li><p>You don't really need to pass a block to <code>Array.new</code> to initialize the array with <code>nil</code> values.</p>

<pre><code>def initialize(capacity:, weight:)
  @capacity = capacity
  @weight   = weight
  @contents = Array.new(@capacity) { nil }
end
</code></pre>

<p>can be refactored to:</p>

<pre><code>def initialize(capacity:, weight:)
  @capacity = capacity
  @weight   = weight
  @contents = Array.new(@capacity)
end
</code></pre></li>
<li><pre><code>def contents=(new_contents)
  raise KnapsackCapacityExceededError if self.exceeds_capacity? new_contents
  raise KnapsackWeightExceededError   if self.exceeds_weight? new_contents
  raise KnapsackContentError          unless new_contents.all? { |e| e.is_a? Item }

  @contents = new_contents
end
</code></pre>

<p>can be refactored to:</p>

<pre><code>def contents=(new_contents)
  raise KnapsackCapacityExceededError if exceeds_capacity? new_contents
  raise KnapsackWeightExceededError   if exceeds_weight? new_contents
  raise KnapsackContentError          if has_non_items? new_contents

  @contents = new_contents
end

def has_non_items?(contents)
  contents.any? { |content| !content.is_a?(Item) }
end
</code></pre>

<p>-&gt; Notice that usage of <code>self</code> keyword has been removed.</p>

<p>-&gt; Moved the logic of checking any non-items in contents to a separate method. That makes the if conditions more readable and it replaces the <code>unless</code> with <code>if</code> to make it consistent with rest of the conditions.</p></li>
<li><p>Method <code>fit?</code> can be refactored to:</p>

<pre><code>def fit?(contents)
  fits_weight?(contents) &amp;&amp; fits_capacity?(contents)
end
</code></pre></li>
<li><p>Method <code>fits_weight?</code> can be refactored as well.</p>

<pre><code>def fits_weight?(contents)
  contents.map(&amp;:weight).sum &lt;= weight
end
</code></pre></li>
</ol>

<h2>Performance Tuning</h2>

<p>You don't need to initialize the <code>@contents</code> array with <code>nil</code> elements. You can just write <code>@contents = []</code> to save some extra used memory.</p>
    </div>