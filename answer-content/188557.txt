<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Questions</h2>
<blockquote>
<p>I suspect that this code is messy.</p>
</blockquote>
<p>It doesn't really look <em>very</em> messy... One great aspect is that the DOM references are cached.</p>
<blockquote>
<p>Is there a way the following JS code be made efficient?</p>
</blockquote>
<p>I'm not sure it needs to be much more efficient. The code looks similar to many examples one can find searching the internet for a clock in JavaScript. If memory was an issue and you really wanted, perhaps you could create only one date object and merely update that date object with the updated hour, minute and seconds values but you would need to do the bookkeeping manually, which might end up being less efficient.</p>
<h2>Suggestions</h2>
<h3>global variables</h3>
<p>The variables created using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer"><code>var</code></a> are technically global variables, since they are not contained in a function. For a small script like this it likely won't make a difference, but in a larger application that can lead to namespace collisions. It would be wise to wrap the code in a function (perhaps in an <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">IIFE</a>) and use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a>/<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" rel="nofollow noreferrer"><code>let</code></a> instead of <code>var</code> to keep the scope limited.</p>
<h3>Use Date method to get formatted time</h3>
<p>It could be simplified by using the Date method <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString" rel="nofollow noreferrer">toLocaleTimeString()</a> (or alternatively <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" rel="nofollow noreferrer">Intl.DateTimeFormat()</a>). See the example below for a demonstration of this.</p>
<p><strong>Edit</strong>: I realize after posting it that the 24-hour format was still the default for the hours so I had to add <code>hour12</code> to the options and an extra call to <code>.replace()</code> to remove the <code>am</code>/<code>pm</code>. Also that doesn't apparently support the 2-digit format well so it also has to additionally add the leading <code>0</code> if necessary. Apparently this code suffers from <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=527926" rel="nofollow noreferrer">this issue</a>.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>(function() { //IIFE
  const clock = document.getElementById('clockElement');
  const color = document.getElementById('hex-color');
  const options = {
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  };

  function hexclock() {
    const time = new Date();
    //use preferred locale accordingly
    let clockString = time.toLocaleTimeString('en-GB', options).replace(/[a-z\s]/g, '');
    //add missing 0 - hour12 doesn't work ideally for this scenario
    clockString.length &lt; 8 &amp;&amp; (clockString = '0' + clockString);
    const hexColorString = '#' + clockString.replace(/:/g, "");

    clock.textContent = clockString;
    color.textContent = hexColorString;

    document.body.style.backgroundColor = hexColorString;
  }

  setInterval(hexclock, 1000);
  setTimeout(function() {
    console.log('window.clock (global variable)? :', window.clock !== undefined);
  }, 1100);
})(); //end IIFE</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  marin-top: 20px;
  text-align: center;
  color: white;
}

#clock {
  font-weight: 300;
  font-size: 60px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;h1 id="clockElement"&gt;00 : 00 : 00&lt;/h1&gt;
&lt;p id="hex-color"&gt;#000000&lt;/p&gt;</code></pre>
</div>
</div>

    </div>