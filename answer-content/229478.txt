<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Edit: the tone of this might seem a bit negative, so I'll add that this was a fun one to review in hopes of lightening the mood ;)</em></p>

<p>Miscellaneous thoughts:</p>

<ul>
<li><p>This is horrifying! Why did you do this?!</p></li>
<li><p>You can just about get away with this for properties, but for method calls with required/optional fields, a <code>FormatException</code> will be inadequate (an <code>ArgumentException</code> telling the caller which argument went wrong is important), which rather limits the scope of this technique.</p></li>
<li><p>Because the thing is type specific, you could give it a sensible name (e.g. <code>OptionalString</code>), make both conversions implicit, and use it as the field type. This would required even less syntax, and would be somewhat less opaque to the maintainer who has to live with this.</p></li>
<li><p>These need documentation: it's not obvious that an <code>Optional</code> should convert <code>""</code> to <code>null</code>: this is enough to put me off it completely.</p></li>
<li><p>You can get this 'low-char-count syntax by using a <code>static using</code> and providing these as static methods to a static class. The advantages would include:</p>

<ul>
<li>It's not horrifying</li>
<li>It requires less code, because you don't have to build a whole type and its conversions for each sort of string</li>
<li>You can't misuse the types in ways you didn't intend, and they don't appear everywhere</li>
<li>You can throw the static methods at a delegate if you have need</li>
<li>It's not horrifying</li>
<li>People who don't hate themselves can use the fully qualified name</li>
<li>It won't incur an allocation every time you assign a value (though using <code>struct</code>s would address this already)</li>
<li>You have greater freedom with the type of checks you can perform (e.g. multiple parameters)</li>
<li>It will be easier to document, because the API will be single method, not a type+stuff</li>
<li>It's not horrifying</li>
</ul></li>
<li><p>It's good that the conversion to the types is an explicit one, as this limits the scope for things going wrong with the intended usage.</p></li>
<li>It would be nice if the <code>Text</code> members were explicitly <code>private</code>, so there was no question as to your intentions.</li>
<li>I personally do not like the expression-bodied syntax for constructors, but that's probably just me.</li>
</ul>
    </div>