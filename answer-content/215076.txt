<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>The second for-loop doesn’t look very nice with the break ...</p>
</blockquote>

<p>You can remove that for-loop if you test <code>p</code> for being prime in the while-loop:</p>

<pre><code>while p ** 2 &lt; max_n:
    if sieve[p]:
        # p is prime: cross-out all true multiples of p:
        for z in range(2 * p, max_n, p):
            sieve[z] = False
    p += 1
</code></pre>

<blockquote>
  <p>Are there still any simplifications possible? Or non-hackish ways to increase performance?</p>
</blockquote>

<p>Here are two simple changes which increase the performance:
First, since 2 is the only even prime, you can increment <code>p</code> by two after the first iteration:</p>

<pre><code>    p = p + 2 if p &gt; 2 else 3
</code></pre>

<p>Second, it suffices to “cross-out” the multiples of <code>p</code> starting at <code>p*p</code> (instead of <code>2*p</code>) because all lesser multiples have been handled before:</p>

<pre><code>        for z in range(p * p, max_n, p):
            sieve[z] = False
</code></pre>
    </div>