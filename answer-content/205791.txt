<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I haven't access to the ESRI assemblies, so it's impossible to test and comment about performance, but in this:</p>

<blockquote>
<pre><code>public static IEnumerable&lt;IEnumerable&lt;int&gt;&gt; PolygonToDeltas(IPolygon4 polygon)
{
  IGeometryBag exteriorRingGeometryBag = polygon.ExteriorRingBag;
  IGeometryCollection exteriorRingGeometryCollection = exteriorRingGeometryBag as IGeometryCollection;
  for (int i = 0; i &lt; exteriorRingGeometryCollection.GeometryCount; i++)
  {
    IGeometry exteriorRingGeometry = exteriorRingGeometryCollection.get_Geometry(i);
    IPointCollection exteriorRingPointCollection = exteriorRingGeometry as IPointCollection;
    yield return CreateDeltas(exteriorRingPointCollection);

    IGeometryBag interiorRingGeometryBag = polygon.get_InteriorRingBag(exteriorRingGeometry as IRing);
    IGeometryCollection interiorRingGeometryCollection = interiorRingGeometryBag as IGeometryCollection;
    for (int k = 0; k &lt; interiorRingGeometryCollection.GeometryCount; k++)
    {
      IGeometry interiorRingGeometry = interiorRingGeometryCollection.get_Geometry(k);
      IPointCollection interiorRingPointCollection = interiorRingGeometry as IPointCollection;
      // ISN'T THIS A BUG:
      yield return CreateDeltas(exteriorRingPointCollection);
    }
  }
}
</code></pre>
</blockquote>

<p>... it seems that you call <code>CreateDeltas(exteriorRingPointCollection)</code> both in the outer for-loop where it is expected to be called and in the inner for-loop where I would expect this call: <code>CreateDeltas(interiorRingPointCollection)</code>. It seems to be a bug? If <code>exteriorRingPointCollection</code> is significantly larger than <code>interiorRingPointCollection</code> that could be a bottleneck for many interior rings per exterior ring?</p>

<hr>

<p>By the way: have you tested if sending the absolute coordinates is a real problem?</p>

<hr>

<p>From one of your comments below, I understand that the bottleneck must be at:</p>

<blockquote>
<pre><code>string output = JSON.ToJSON(result);
</code></pre>
</blockquote>

<p>The result classes are defined as:</p>

<blockquote>
<pre><code>    public class Result
    {
        public IEnumerable&lt;ResultFeature&gt; features { get; set; }
    }

    public class ResultFeature
    {
        public Dictionary&lt;string, dynamic&gt; attributes { get; set; }
        public IEnumerable&lt;IEnumerable&lt;int&gt;&gt; geometry { get; set; }
    }
</code></pre>
</blockquote>

<p>Where the <code>ResultFeature.attributes</code> is a Dictionary with value as <code>dynamic</code>. You could maybe try to change that to <code>string</code> or <code>object</code> or another defined type.</p>

<p>Alternatively:</p>

<p>You are using <code>fastJSON</code> which I have no experience with. Have you tried <code>Newtonsoft.Json</code> instead?</p>

<hr>

<p>If you want to use c++ apis in C# it can be done using <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/extern" rel="nofollow noreferrer">external references</a></p>
    </div>