<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The time complexity of <code>Sum</code> is <span class="math-container">\$O(m n)\$</span>,
because in the worst case it may need to enumerate all nodes.</p>

<p>An <span class="math-container">\$O(m)\$</span> implementation is possible with <span class="math-container">\$O(n)\$</span> extra space, and a bit of extra work in <code>Insert</code>:</p>

<ul>
<li>Add a <code>Dictionary&lt;string, int&gt;</code> to track the current values of the keys, let's call it <code>values</code>.</li>
<li>Use <code>TrieMSNode.Value</code> to store the sum of all values below each node</li>
<li>When inserting:

<ul>
<li>First check if the key replaces an existing key. Let's store in <code>int prev</code> the previous value of the key, or 0 if there was no previous value (the key is new). </li>
<li>Traverse the trie letter by letter as before, and for each node traversed, subtract <code>prev</code> and add <code>val</code>.</li>
<li>Set the new value in <code>values</code>.</li>
</ul></li>
</ul>

<p>Notice that the added work in <code>Insert</code> does not increase the time or space complexity.</p>

<pre><code>public void Insert(string key, int val)
{
    var prev = values.ContainsKey(key) ? values[key] : 0;
    values[key] = val;

    var current = Head;
    foreach (var letter in key)
    {
        if (!current.Edges.ContainsKey(letter))
        {
            current.Edges.Add(letter, new TrieMSNode(val));
        }
        else
        {
            current.Edges[letter].Value -= prev;
            current.Edges[letter].Value += val;
        }
        current = current.Edges[letter];
    }
}
</code></pre>

<p>And now, the implementation of <code>Sum</code> can become simpler and faster:</p>

<pre><code>public int Sum(string prefix)
{
    var current = Head;
    foreach (var letter in prefix)
    {
        if (!current.Edges.TryGetValue(letter, out current))
        {
            return 0;
        }
    }
    return current.Value;
}
</code></pre>

<p>Also notice that in this implementation the <code>TrieMSNode.IsTerminal</code> is no longer necessary.</p>
    </div>