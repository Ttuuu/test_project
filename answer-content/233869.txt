<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A dynamic expression might come in handy here to delegate the repeated code.</p>

<pre><code>public static class PersonExtensions {

    public static T Populate&lt;T&gt;(this Person person, Func&lt;Person, T&gt; accessor) {
        T target = accessor(person);
        var type = target.GetType();
        if (target is IEnumerable &amp;&amp; type.IsGenericType) {
            var arg = type.GetGenericArguments().First();
            if (typeof(IEnumerable&lt;&gt;).MakeGenericType(arg).IsAssignableFrom(type))
                type = arg;
        }
        Action&lt;object&gt; invoke = person.BuildActionFor(type);

        if (target is IEnumerable collection) {
            foreach (var item in collection) {
                invoke(item);
            }
        } else {
            invoke(target);
        }
        return target;
    }

    private static Action&lt;object&gt; BuildActionFor(this Person person, Type type) {
        //object obj =&gt;
        var parameter = Expression.Parameter(typeof(object), "obj");
        // T p;
        var variable = Expression.Variable(type, "p");

        var statements = new[] {
            // p = (T)obj;
            Expression.Assign(variable, Expression.Convert(parameter, type)),
            // p.PersonID = person.PersonID;
            Expression.Assign(Expression.Property(variable, "PersonID"), Expression.Constant(person.PersonID)),
            // p.PersonID = person.AccountID;
            Expression.Assign(Expression.Property(variable, "AccountID"), Expression.Constant(person.AccountID)),
            // p.PersonID = person.CreatedDateTim;
            Expression.Assign(Expression.Property(variable, "CreatedDateTime"), Expression.Constant(person.CreatedDateTime)),
            // p.PersonID = person.CreatedBy;
            Expression.Assign(Expression.Property(variable, "CreatedBy"), Expression.Constant(person.CreatedBy)),
        };
        BlockExpression body = Expression.Block(
            new[] { variable },
            statements)
        ;
        // T p =&gt; { ... };
        var expression = Expression.Lambda&lt;Action&lt;object&gt;&gt;(body, parameter);
        Action&lt;object&gt; populate = expression.Compile();
        return populate;
    }
}
</code></pre>

<p>The time stamp and created by are already set on the <code>person</code> at the beginning of the loop</p>

<pre><code>//...

foreach (var person in persons) {
    person.CreatedDateTime = DateTime.Now;
    person.CreatedBy = requestUser.FirstName + " " + requestUser.LastName;

//...
</code></pre>

<p>so there was no need to recreate those values lower down. </p>

<p>It meant that everything needed to populate the other object could be obtained from the already populate <code>Person</code> object.</p>

<p>With the extension methods in place, the code refactors to</p>

<pre><code>public void BulkInsertPeople(List&lt;Person&gt; persons, User requestUser) {
    var credentials = new List&lt;Credential&gt;();
    var educations = new List&lt;Education&gt;();
    var addresses = new List&lt;Address&gt;();
    var emails = new List&lt;Email&gt;();
    var phones = new List&lt;Phone&gt;();
    var practitionerDetails = new List&lt;PractitionerDetails&gt;();
    var recruitingInfo = new List&lt;RecruitingInfo&gt;();
    var familyMembers = new List&lt;FamilyMember&gt;();
    var socialLinks = new List&lt;SocialLink&gt;();
    var employments = new List&lt;Employment&gt;();

    if (_context != null) {
        var strategy = _context.Database.CreateExecutionStrategy();

        strategy.Execute(() =&gt; {
            using (var transaction = _context.Database.BeginTransaction()) {
                var bulkConfig = new BulkConfig() { 
                    SetOutputIdentity = true, 
                    CalculateStats = true, 
                    PreserveInsertOrder = true
                };
                _context.BulkInsertOrUpdate(persons, bulkConfig);

                foreach (var person in persons) {
                    person.CreatedDateTime = DateTime.Now;
                    person.CreatedBy = requestUser.FirstName + " " + requestUser.LastName;
                    if(requestUser.AccountID.HasValue)
                        person.AccountID = requestUser.AccountID.Value;

                    credentials.AddRange(person.Populate(p =&gt; p.Credentials));
                    educations.AddRange(person.Populate(p =&gt; p.Education));
                    addresses.AddRange(person.Populate(p =&gt; p.Addresses));
                    emails.AddRange(person.Populate(p =&gt; p.Emails));
                    phones.AddRange(person.Populate(p =&gt; p.Phones));
                    socialLinks.AddRange(person.Populate(p =&gt; p.SocialLinks));
                    employments.AddRange(person.Populate(p =&gt; p.Employments));
                    familyMembers.AddRange(person.Populate(p =&gt; p.FamilyMembers));

                    practitionerDetails.Add(person.Populate(p =&gt; p.PractitionerDetails));
                    recruitingInfo.Add(person.Populate(p =&gt; p.RecruitingInfo)); 
                }

                _context.BulkInsertOrUpdate(credentials, bulkConfig);
                _context.BulkInsertOrUpdate(educations, bulkConfig);
                _context.BulkInsertOrUpdate(addresses, bulkConfig);
                _context.BulkInsertOrUpdate(emails,bulkConfig);
                _context.BulkInsertOrUpdate(phones,bulkConfig);
                _context.BulkInsertOrUpdate(socialLinks,bulkConfig);
                _context.BulkInsertOrUpdate(practitionerDetails,bulkConfig);
                _context.BulkInsertOrUpdate(recruitingInfo,bulkConfig);
                _context.BulkInsertOrUpdate(familyMembers,bulkConfig);
                _context.BulkInsertOrUpdate(employments,bulkConfig);

                transaction.Commit();
            }
       });
    }
} 
</code></pre>
    </div>