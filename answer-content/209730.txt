<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Control structure formatting</h3>

<blockquote>
<pre><code>            }
            // Checks 4
            else if (onesDigit == 4) {
                System.out.print (one + five);
</code></pre>
</blockquote>

<p>Please don't put comments in between curly braces and their associated control statements.  </p>

<pre><code>            }
            else if (onesDigit == 4) {
                // Checks 4
                System.out.print (one + five);
</code></pre>

<p>Just treat them as one unit.  The problem with separating them is that it looks like the structure is over, because Java (and other C-style languages) use the same symbol for ending the control structure as ending the current piece of the structure.  </p>

<p>I would actually write it as </p>

<pre><code>           } else if (onesDigit == 4) {
</code></pre>

<p>Which is also the <a href="https://www.oracle.com/technetwork/java/codeconvtoc-136057.html" rel="nofollow noreferrer">Java standard</a>.  But that's not as important as not adding more stuff between.  </p>

<h3>Comments</h3>

<p>Most of your comments just restate what the code does.  That makes sense in class, as the professor is telling you what the code does to help you learn.  And since you may not understand what the code does, those kind of comments can make your programs easier to grade.  But outside class, we expect programmers to be able to read code.  Comments should not tell us what the code does, but why it is doing it.  </p>

<h3>Declarations</h3>

<p>It is also the standard in Java to declare variables as late as possible, often at initialization.  Your method looks more like old C code with all the declarations at the beginning.  </p>

<h3><code>try</code>-with-resources</h3>

<p>This may be past what your assignment allowed, but the right way to use an <code>Autocloseable</code> resource like a <code>Scanner</code> is </p>

<pre><code>try (Scanner input = new Scanner(System.in)) {
    // do stuff with the Scanner
}
</code></pre>

<p>This will automatically close the <code>Scanner</code> when it is done, even if there is an exception.  It's essentially the equivalent of adding </p>

<pre><code>} finally {
    if (input != null) {
        input.close();
    }
</code></pre>

<p>I would also avoid putting spaces between a method name and the opening parenthesis.  E.g. <code>Scanner(System.in)</code> is a constructor call.  I would put a space in <code>if (</code>.  </p>

<h3>Putting it together</h3>

<p>Adding the method from <a href="https://codereview.stackexchange.com/a/205678/71574">this answer</a> (albeit with code that I find more readable):  </p>

<pre><code>class RomanNumeral {

    private static final String DIGITS = "IVXLCDM";

    public static void main(String[] args) {
        try (Scanner input = new Scanner(System.in)) {
            System.out.println(toRomanNumeral(input.nextInt()));
        }
    }

    private static String toRomanNumeral(int value) {
        StringBuilder out = new StringBuilder();

        int divisor = 1000;
        for (int i = DIGITS.length() - 1; i &gt;= 0; i -= 2) {
            int unit = value / divisor;
            value %= divisor;

            int unit5 = unit / 5;
            int remainder = unit % 5;

            if (remainder == 4) {
                // if the remainder is 4, then one of IV, IX, XL, XC, CD, CM
                // i tells us if it is I, X, or C
                // i + 1 tells us which pair:  VX, LC, or DM.  
                // unit5 tells us if it is the first (V, L, or D) or second (X, C, or M)
                out.append(DIGITS.charAt(i))
                   .append(DIGITS.charAt(i + 1 + unit5));
            } else {
                // add V, L, or D if needed
                if (unit5 == 1) {
                    out.append(DIGITS.charAt(i + 1));
                }

                // add up to three I, X, or C
                for (int j = 0; j &lt; remainder; j++) {
                    out.append(DIGITS.charAt(i));
                }
            }

            divisor /= 10;
        }

        return out.toString();
    }

}
</code></pre>

<p>Your professor also might bar <code>StringBuilder</code>, although he shouldn't.  Mixing calculation and output the way that your program does is a code smell.  <code>StringBuilder</code> should be taught before <code>System.out.print</code> in my opinion.  That said, the algorithm doesn't change if you replace the <code>append</code> calls with <code>System.out.print</code>.  </p>

<p>The initial check if there is no remainder was unnecessary.  The <code>else</code> case will handle it correctly.  So I removed it.  </p>

<p>I used a <code>for</code> loop as shorter and more readable than a <code>while</code> loop.  </p>

<p>Moving the code to a separate method is simply better practice.  Again, if your professor has not taught you that, that is a teaching failure.  IMnsHO, method calls should be taught before <code>if</code>, <code>else</code>, and loops (<code>for</code> or <code>while</code>).  </p>

<p>This code will throw an exception if given an input of 3900 or more (also probably for negative values).  The exception will be confusing.  It would be better to check for invalid values and throw a more sensible exception.  However, your professor may not have taught exceptions yet.  </p>

<p>I made <code>DIGITS</code> a class constant because it never changes throughout the program.  You can make it a method variable if your professor hasn't taught class constants yet.  </p>
    </div>