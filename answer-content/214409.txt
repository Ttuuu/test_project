<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a couple of points:</p>

<ol>
<li><p>You need to move your documentation and your comments into docstrings:</p>

<pre><code>class SlidingPuzzle:

  def __init__(self, start_board):
    self.start_configuration = str(start_board) + '0'
    self.goal_configuration = '123456780'
</code></pre>

<p>becomes:</p>

<pre><code>class SlidingPuzzle:
  """ The 15-puzzle (also called Gem Puzzle, Boss Puzzle, 
      Game of Fifteen, Mystic Square and many others) is 
      a sliding puzzle that consists of a frame of numbered
      square tiles in random order with one tile missing. 
      The puzzle also exists in other sizes, particularly
      the smaller 8-puzzle. 
  """    
  def __init__(self, start_board):
    """ Construct a new puzzle from a starting configuration.
        The starting configuration is a string containing all
        the numbers from 1..8, plus 0 or underscore ('_') 
        where the empty cell should be. The numbers are 
        considered to be in order from top to bottom, left to
        right, so that "1234_5678" represents a puzzle like:

            1 2 3
            4 _ 5
            6 7 8
    """
    self.start_configuration = str(start_board) + '0'
    self.goal_configuration = '123456780'
</code></pre></li>
<li><p>Validate your parameters during the <code>__init__</code> call so you won't have to do it again! Check that the right digits, underscore, spaces, etc. are present or deleted or whatever. Make sure nothing is duplicated.</p></li>
<li><p>You waste a lot of time converting from "string" to "square" format. Just stop doing that and re-write your code in string terms always.</p>

<pre><code>def slider(self, configuration):
  ...
  config = self._get_old_configuration(configuration[:9])
  ...

def move_up(self, configuration):
  slider_position = self.slider(configuration) # We need to have updated slider position everytime.
  dummy_board = self._get_old_configuration(configuration)
</code></pre>

<p>Notice that your <code>move_up</code> called <code>slider</code> (which called <code>_get_old_configuration</code>) and then <code>move_up</code> <em>called <code>_get_old_configuration</code> itself!</em> You just called the function, threw away the result, and called the function again.</p>

<p>What is worse, <code>slider</code> builds a matrix that never gets used. You only use the current position of the slider to check whether you can move up or not.</p>

<p>Think about your board as a string:  "123456789". The first three values are the top row. The last three values are the bottom row. Now think about the left and right columns: you can just compute an index into the string and use <code>index % 3</code> to determine what column a character is in: <code>index % 3 == 0</code> means left column. <code>== 2</code> means right column.</p>

<p>So knowing the index of the slider (which there's <code>str.index</code> for that) lets you know the row or column as well. Rather than call <code>str.index</code> four times, go ahead and build a <code>Sequence[Sequence[Callable]]</code> that contains the methods to be called:</p>

<pre><code>self.slider_index_to_called_methods = (
    # 0: top left
    (self.move_right, self.move_down),
    # 1: top middle
    (self.move_left, self.move_right, self.move_down),
    ...
    # 8: bottom right
    (self.move_up, self.move_left),
)
</code></pre>

<p>Now you can look up the methods to try using a single call to <code>str.index()</code>, iterate over them, and not do any checking or decomposition.</p>

<p>Similarly, you know how to "move" in string-only format. Just swap the slider position (index) with a character either one away (left/right) or three away (up/down).</p>

<pre><code>def move_up(self, configuration, index):
    new_index = index - 3
    b = configuration.board
    new_b = b[:new_index] + b[index] + b[new_index+1:index] \
        + b[new_index] + b[index+1:]
    new_configuration = Configuration(new_b)
    return new_configuration
</code></pre></li>
<li><p>You waste a lot of time encoding and decoding the <code>node_id</code> from your strings. Just make a separate data object! <code>collections.namedtuple</code> is perfect for this:</p>

<pre><code>Configuration = collections.namedtuple('Configuration', 'board id')
</code></pre>

<p>You can subclass the new type to provide your own <code>__init__</code> method, and use that to implement the <code>global node_id += 1</code> logic.</p></li>
</ol>
    </div>