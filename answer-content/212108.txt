<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some things you might like to think about. (Please don't be disheartened. Most of this is picky).</p>

<p>I'd like to see the people and the greyhounds more separated from the form used for display. There's no real reason for a greyhound to know anything about a picture box for example - it should know how far it's run, then the form draws the picture box using that information. This is probably not something to worry much about at this stage in your learning, but as you write more programs, you'll thank yourself for keeping business/game logic and presentation separate. (I'm not familiar with the book you're using by the way, but it sounds like it has fun examples/exercises).</p>

<p>However, given that you are letting the form run everything, I note that the <code>Assign</code> methods (particularly <code>AssignPictureBox</code>) are really just setters. <code>Greyhound.PictureBox</code> might just as well have public get and set if you're going to provide a method to set it anyway. (I like that you're trying to use encapsulation to keep the setter private, but if a method exists to set it anyway, encapsulation isn't working - let it be a public setter, if that's what it honestly is. It works much better for <code>Person.Cash</code> for example, where the setter is rightly private - nothing outside should be able to set how much cash a person has, only give or take cash when they win or lose a bet, so a private set is absolutely correct there).</p>

<p><code>Bet</code> is good, I like that it's immutable. Just a thought while I'm looking at it: the usual data type for currency is <code>decimal</code>, rather than <code>int</code> (what if someone wants to bet $5.75?). No big deal, but it'd be a good habit to get into.</p>

<p>Personally I <em>vastly</em> prefer using <code>var</code> whenever possible (i.e. local variables), for example <code>foreach (var person in People)</code>. There are good reasons for this (particularly making it easier to change the type of something without having to update everywhere it's used), though some people think it obscures information from the programmer and prefer not to use it. I think that misses the point, but I won't repeat the flame war about it here, just something for you to read about and make up your own mind. :-)</p>

<p>I really like that you're naming your controls (if I ever again have to try to work out what <code>button1</code> does or what gets entered into <code>textBox2</code>, I'll scream) but I would recommend including what the control is in the name. <code>personOne</code> doesn't sound like a radio button, <code>personOneRadioButton</code> does, and it's easily distinguishable from <code>personOneLabel</code> and <code>personOneTextBox</code>, if such things existed.</p>

<p><code>CheckedChanged</code> could definitely be improved by adding the <code>Person</code> as a <code>Tag</code> on the radio button. So, in your initialization code you'd do something like this:</p>

<pre><code>personOneRadioButton.Tag = People[0];
personTwoRadioButton.Tag = People[1];
...
</code></pre>

<p>Then, <code>CheckedChanged</code> doesn't need all those <code>if</code>s and <code>as</code>s, and becomes simply:</p>

<pre><code>var rb = (RadioButton)sender;
activePerson = (Person)(rb.Tag);
nameLabel.Text = activePerson.Name;
</code></pre>

<p>Unless I'm missing something, a person can make a bet they don't actually have enough money for? :-D Also, you don't show the generated code for the controls (which is fine), but I hope the betNumber <code>NumericUpDown</code> has a <code>MinValue</code> of 0, to prevent people placing negative bets and hoping they lose, right? :-D</p>

<p>I like that you've thought about how to handle ties, or at least are aware of it. An alternative approach might be to let all the greyhounds run in every tick, then at the end of <code>Timer1_Tick</code>, look for the greyhound with the largest X position and award them the win if they're past the finish line. (Ties would still be possible, and could be resolved however you see fit, but currently the greyhounds near the top of the track get more chances to win. If this were gambling real money, punters would not like that!)</p>

<p><code>Greyhound.Run()</code> is a little messy. There's a bit of code duplication, and the distance the greyhound ran that tick is mixed up with the picture box stuff, and two returns where there could be just one... looks like it works fine, but it could be cleaner. Something like:</p>

<pre><code>var distanceRan = random.Next(MinSpeed, MaxSpeed);
var newX = Math.Max(PictureBox.Location.X + distanceRan, FinishLine);
PictureBox.Location = new Point (newX, PictureBox.Location.Y);
return newX &gt;= FinishLine;
</code></pre>

<p>(Given the suggestion above about deciding who wins, the <code>Math.Max</code> didn't ought to be necessary, nor returning a bool of whether the greyhound has won or not; but I wanted to demonstrate changing only the way the method is laid out (neater IMO), not what it does.)</p>

<p>On the use of <code>Random</code> (as it was mentioned in the comments): personally I think what you've done is fine as-is. The clock is used as a seed in <code>new Random()</code> so it's not like every race will be the same, and there's no way to predict the outcome. It is very common for games to make sure a different seed is used each playthrough, but for everything after that to be deterministic - it helps with testing, replays, online multiplayer synchronization, etc. So I think it's fine. However, you may decide that for fairness or other reasons, that's not enough for you. In that case, you could use a new random seed each race, or for each greyhound, instead of just once.</p>

<p>Hope this helps.</p>
    </div>