<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) You can use templates to extend the functionality of your stack class to other types.</p>

<p>2) Use <code>nullptr</code> instead of <code>NULL</code>.</p>

<p>3) Implement <code>Stack</code> as a <code>class</code> instead of <code>struct</code>, since the former has private access specifier as default. You don't want users of this library to be manually able to access <code>top</code>.</p>

<p>4) <code>pop()</code> should return the value stored, not <code>StackElement</code>.</p>

<p>5) Your solution leaks memory. Your current way of releasing memory is assuming that the user will <code>pop()</code> on all elements; more of than that, it will not be the case. Consider this:</p>

<pre><code>int main()
{
 {
   Stack st;
   for(auto i = 0; i &lt; 10; i++)
   {
      st.push(static_cast&lt;char&gt;(i));
   }
  }
}
</code></pre>

<p>No <code>pop()</code> is called, and <code>st</code> object is deleted. All the allocations aren't deallocated, and you're leaking memory. The C++ way to solve this is <a href="https://stackoverflow.com/q/2321511">RAII</a> - delete all the elements in the destructor.</p>

<p>6) <code>using namespace std</code> is generally frowned upon.</p>

<p>7) Wrap your code inside a namespace.</p>
    </div>