<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Reaching through is not necessarily bad, although it's better to ask an object for its data rather than to going and getting it yourself.</p></li>
<li><p>You can fix the <code>Team</code> class to have regular attributes, or at least methods to retrieve them from a database result. So this class can have a name method, <code>def name; data['name']; end;</code> at the very least. FWIW, the alarms go off when I see <code>data</code> as a name in code. Most things are data... anyway...</p></li>
<li><p>As David Aldridge suggested, an OR mapping tool may help-- but not absolutely necessary. For scaling, I wonder whether you want a team to load all its fixtures-- or perhaps it can just load the IDs of it's fixtures and let the fixture class take care of loading the details of the fixture. And OR tool provides lots of help here.</p></li>
</ol>

<p>As far as OO, think about what data really belongs in a class-- from a concrete, real-world perspective. A <strong>fixture/match</strong> has a few things: a location, time, home team and away team, and eventually a score. I think you're missing that class. For OO design, it's best to start out with factual, non-abstract elements until you have a good grasp of the problem. Premature abstraction is this quickest way to confusion.</p>

<p>But also draw hard boundaries about what a class is responsible for. Does a team need to know the scores of all its matches? Probably not. </p>

<p>I personally don't like all the <code>if</code> statements based on home/away. This complexity in extracting information about a match based on your perspective, home or away, could be simplified with a small abstraction. I'd consider a decorator or bridge pattern to handle help with this. Here's one idea:</p>

<p>You can have a class that allows you to look at a match as the home team, or the visiting team.
<code>
  ...fixture
  home = AsHome.new(fixture)
  home.result
  home.own_score
  home.opponent_score
  home.opponent
  away = AsAway.new(fixture)
  ...
</code>
I'm not sure exactly what this looks like, but it gets rid of some of the messiness of the <code>TeamFixture</code> class.</p>
    </div>