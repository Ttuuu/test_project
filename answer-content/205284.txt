<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Algorithms:</h2>

<ol>
<li>You can sort the array, and compare continuously pairs instead of compare every pairs.
Then the result is minimum of continuously pairs.</li>
<li>Compare Array with count &lt; 1 is no meaning</li>
<li>If there are only 2 numbers, then don't need the loop.</li>
</ol>

<p>Take my solution as bellow:</p>

<pre><code>        public int findMinXor(List&lt;int&gt; A)
        {
            if (A.Count &lt;= 1)
            {
                throw new InvalidEnumArgumentException("list must be contain more than 2 numbers.");
        }

        if (A.Count == 2)
        {
            return A[0] ^ A[1];
        }

        var min = int.MaxValue;
        A.Sort();

        for (int i = 1; i &lt; A.Count; i++)
        {
            var tmp = A[i] ^ A[i - 1];

            if (tmp &lt; min)
            {
                min = tmp;
            }

        }

        return min;
    }
</code></pre>
    </div>