<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've seen this on SO, but only realised the biggest optimisation today.</p>

<p>The first optimization is to not build the <code>$interval_array</code> array in each iteration.  This code starts with the empty array and then in each loop just adds the next number in sequence to this array.</p>

<pre><code>for ($i=0; $i &lt;$n; $i++) {
    // Reset array in outer loop
    $interval_array = array();
    for($j = $i;$j &lt; $n; $j++){
        // Add in new number to interval array as the key
        $interval_array[$main_array[$j]] = 0;
</code></pre>

<p>So the first time round it will add be <code>[1]</code>, then on the second loop it add the next number in and will be <code>[1,2]</code> etc. (although they are actually <code>[1=&gt;0]</code>, <code>[1=&gt;0, 2=&gt;0]</code> the principle is the same)</p>

<p>The main difference is note that it adds the number as the key of the array and not the value.  This allows the main optimization which is when you are checking if you want to exclude particular combinations in...</p>

<pre><code>        if(in_array($abc[$l], $interval_array) &amp;&amp; 
         in_array($xyz[$l], $interval_array)){ 
</code></pre>

<p>it will look through (up to) the entire array twice to check for the values.</p>

<p>If instead you had the values as the key, you could use <code>isset()</code>...</p>

<pre><code>            if(isset($interval_array[$abc[$l]]) &amp;&amp;
                isset($interval_array[$xyz[$l]]))   {
</code></pre>

<p>This is much more efficient at just checking a value exists.</p>

<p>The last thing I've added is that I create an array with all of the numbers you are checking against in (use <code>array_flip()</code> to again make these numbers the keys)...</p>

<pre><code>$interest = array_flip(array_merge($abc, $xyz));
</code></pre>

<p>This allows me to check if the number is even something I'm interested in before running the more detailed checks...</p>

<pre><code>    if ( isset($interest[$main_array[$j]] )) {
</code></pre>

<p>Put all of this together...</p>

<pre><code>$n = 1299;
$start = microtime(true);
$main_array = range(1,$n);
$counter = 0;
$abc = [2,1];
$xyz = [3,4];
$count = sizeof($abc);  // $abc and $xyz size will same always.

// Create a combined array which lists all the numbers interested in
$interest = array_flip(array_merge($abc, $xyz));
for ($i=0; $i &lt;$n; $i++) {
    // Reset array in outer loop
    $interval_array = array();
    for($j = $i;$j &lt; $n; $j++){
        // Add in new number to interval array as the key
        $interval_array[$main_array[$j]] = 0;
        $counter++;
        // Only check for exclusion if interested in the number
        if ( isset($interest[$main_array[$j]] )) {
            for ($l=0; $l &lt; $count ; $l++) {
                // if block here to additional condition using isset()
                if(isset($interval_array[$abc[$l]]) &amp;&amp;
                    isset($interval_array[$xyz[$l]]))   {
                        $counter--;
                        // Exit 2 levels of array as all further combinations will be excluded
                        break 2;
                }
            }
        }
    }
}

echo $counter."=".(microtime(true)-$start);
</code></pre>

<p>On my laptop (i7-3632QM, 8GB) the results of running this for 1299 are</p>

<p>original code...</p>

<pre><code>841756=206.25858306885
</code></pre>

<p>modified code...</p>

<pre><code>841756=0.34013700485229
</code></pre>
    </div>