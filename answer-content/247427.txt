<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm thinking you should probably change your <code>Post</code> class as follows:</p>
<pre><code>public class Post
{
    public string Title { get; }
    public string Slug { get; set; }
    public Post(string title)
    {
        Title = title;
        Slug = title.Slugify();
    }
}
</code></pre>
<p>Now you have a slugified title by default. However, if a user of the <code>Post</code> class wants to provide an alternative slug, they can still do that:</p>
<pre><code>var post = new Post("foo bar") { Slug = altSlug };
</code></pre>
<p>The explanation for the user should be that they can either provide a slug explicitly, or have one auto-created by omitting it from the initializer. The only thing you cannot do with this code is set <code>Slug</code> to <code>null</code> explicitly. But I think it would not be good design to allow that.</p>
<p>On a side note, you might even want to make the <code>Slug</code> property getter-only, creating an immutable class, and providing a second constructor that takes the alternative slug. This makes reasoning easier:</p>
<pre><code>public class Post
{
    public string Title { get; }
    public string Slug { get; }
    public Post(string title) : Post(title, title.Slugify()) {}
    public Post(string title, string slug)
    {
        Title = title;
        Slug = slug;
    }
}
</code></pre>
    </div>