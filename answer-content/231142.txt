<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your program.</p>

<h2>The Arduino language isn't C++</h2>

<p>The language used for the Arduino isn't quite C and isn't quite C++, so if your goal is to learn or improve your C++, you might want to be careful about the differences. As <a href="https://www.arduino.cc/en/Main/FAQ#toc13" rel="nofollow noreferrer">they describe it</a> "the Arduino language is merely a set of C/C++ functions that can be called from your code."  So while the underlying compiler may actually be a C++ compiler, writing Arduino sketches is not the same as writing C++ programs.  Specifically, the Arduino's use of <code>setup</code> and <code>loop</code> is unique to it. Also, all of the "built-in" things such as <code>digitalWrite</code> and <code>Serial</code> are non-standard. Unlike C++, there is no user-defined <code>main</code>.  You can still learn useful things by learning to program the Arduino, but it's important to remain aware of the differences.</p>

<h2>Add comments for non-obvious constructs</h2>

<p>I happen to know that this line:</p>

<pre><code>while(!Serial);
</code></pre>

<p>is intended to wait until the serial port is successfully open, but a comment to that effect would greatly aid people reading the code.</p>

<h2>Use better naming</h2>

<p>Looking at your <code>setupNano</code> code, I came across this line:</p>

<pre><code>delay(DASH);
</code></pre>

<p>Then I had to look up <code>DASH</code> to find out it was a constant equal to 1500.  Why make your readers work harder?  While <code>DASH</code> and <code>DOT</code> are cute, <code>LONG_DELAY</code> and <code>SHORT_DELAY</code> would be more informative.</p>

<h2>Understand pre- versus post-increment</h2>

<p>If we write <code>count++</code> it has a different meaning than <code>++count</code>.  The difference is that <code>count++</code> increments the value and returns the previous (unicremented) value, while <code>++count</code> returns the incremented value.  It's a seemingly small difference, but on many processors, <code>++count</code> takes a wee bit less time and uses fewer machine instructions.  Unless you need to actually keep the old value, I recommend always using the preincrement version <code>++count</code>.  The compiler is probably smart enough to notice that you're not subsequently using the value and optimize that away anyway, but it's good to get into good habits.</p>

<h2>Don't hide loop exit conditions</h2>

<p>In <code>setupSoftSerial()</code> we have a rather convoluted loop construct:</p>

<pre><code>while(true)
{
    if(setupNano())
    {
      Serial.print(SETUP_SUCCESS);
      Serial.println(F("|Success!"));
      break;
    }
    else
    {
      Serial.print(FAILED_TO_RESPOND);
      Serial.println(F("|Module failed to respond."));
      count++;

      if(count &lt; MAX_LOOPS)
      {
        Serial.print(TRYING_AGAIN);
        Serial.println(F("|Trying again..."));
        continue;
      }
      else
      {
        Serial.print(GIVE_UP);
        Serial.println(F("|Give up."));
        while(true);
      }
    }
}
</code></pre>

<p>How, in human language, would you actually describe how this loop works?  You might say "repeat the loop until either the setup works or halt if it exhausts retries."  That sounds more like a <code>for</code> loop to me:</p>

<pre><code>for(retries = MAX_LOOPS; retries; --retries) 
{
    if(setupNano())
    {
      Serial.print(SETUP_SUCCESS);
      Serial.println(F("|Success!"));
      break;
    }
    else
    {
      Serial.print(FAILED_TO_RESPOND);
      Serial.println(F("|Module failed to respond."));
      Serial.print(TRYING_AGAIN);
      Serial.println(F("|Trying again..."));
    }
}
// if we're out of retries, give up
if (retries == 0) {
    Serial.print(GIVE_UP);
    Serial.println(F("|Give up."));
    while(true);
}
</code></pre>

<p>Note also that I have renamed the vaguely named <code>count</code> (count of <em>what</em>?) to the more descriptive <code>retries</code>.</p>

<h2>Use a <code>switch</code> instead of a long <code>if..else</code></h2>

<p>The Arduino language, like C and C++, implements a <a href="https://www.arduino.cc/reference/en/language/structure/control-structure/switchcase/" rel="nofollow noreferrer"><code>switch</code> control structure</a> which could replace a number of the long <code>if..else</code> chains in this code.  It makes it more clear to the reader that it's one condition that's being checked for multiple values and also provides for a <code>default</code> case for the truly unexpected.</p>

<h2>Control the external hardware</h2>

<p>The RFID module you're using has a hardware <code>EN</code> line.  If you connect that line to a GPIO pin on the Arduino, you can perform a hard reset of the module by bringing that line low and releasing it.</p>

<h2>General embedded system troubleshooting</h2>

<p>As every programmer knows, it's very common that things sometimes don't work.  When code running on a PC doesn't work, we often have fancy tools to debug and troubleshoot, but if it's an embedded system (as with your Arduino), we don't have a screen or a lot of automatic debugging logs, so we have to get a bit more creative.  In this case, you say that when you upload the code to the Arduino, things no longer seem to work.  Since you're using a soft UART, I'd suggest starting there.  Try to figure out if the problem is with the Arduino's serial or the RFID board.  One way to do that would be to reset the RFID board as mentioned above.  If you figure out which half isn't working (or perhaps they just disagree on baud rates?) then you can start figuring out why things aren't working.  Are spurious characters written to the RFID board during reprogramming of the Arduino?  Does the software serial port cleanly and completely reset?  Are the RFID and Arduino out of sync?  (I.e. does the Arduino only start listening in the middle of a sent character?)  An oscilloscope or logic analyzer is extremely useful for this kind of troubleshooting.  You can get a software-based device that supports both for less than you paid for the RFID board.  I use a <a href="http://www.bitscope.com/" rel="nofollow noreferrer">BitScope</a> but there are other similar devices out there.</p>
    </div>