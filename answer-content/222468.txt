<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Broad Feedback</h2>

<p>It appears that you have incorporated most of the feedback from <a href="https://codereview.stackexchange.com/a/194389/120114">my answer to your previous post</a>, except for a few places where <code>var</code> is still used but <code>let</code> or <code>const</code> could be used instead.</p>

<p>The functions used in the misc. functions for drawing, like in the objects <code>left</code> and <code>right</code>, which get used in <code>keyLookup</code> might be more appropriate as methods in the snake class.  </p>

<h2>Targeted Feedback</h2>

<p>Apparently it <a href="https://stackoverflow.com/a/28006379/1575353">isn't incorrect to return a value from a constructor</a> but it does seem strange.</p>

<hr>

<p><code>const</code> could be used more for any variable that doesn’t get reassigned, like <code>pos</code> in the callback of <code>Snake.draw()</code></p>

<hr>

<p>The method <code>Snake. checkCollision()</code> could be simplified to return the result of calling <code>.some()</code> (without storing it in <code>selfCollision</code>) and  the callback function could be simplified to a single return line- perhaps just an arrow function. </p>

<pre><code>const checkSegment = (item, index) =&gt; index &amp;&amp; item[0] === head[0] &amp;&amp; item[2] === head[2]);
return this.segments.some(checkSegment);
</code></pre>

<hr>

<p>There are multiple places in <code>Snake.drawStats()</code> where <code>extras</code> has a postfix increment operator on a single line and then later the value is used. For example:</p>

<blockquote>
<pre><code>if(showhighscore) {
  extras++;
  highscore.style.display = "block";
  highscore.style.top = extrasLookup[extras];
</code></pre>
</blockquote>

<p>The increment could be changed to a prefix increment and moved into the usage for the array access:</p>

<pre><code>if(showhighscore) {
  highscore.style.display = "block";
  highscore.style.top = extrasLookup[++extras];
</code></pre>

<p>That way there isn’t an excess line just to increment that value. </p>

<p>And also that method  <code>Snake.drawStats()</code> seems a bit repetitive in the last three blocks that conditionally show the high score, max speed and lag. It would be wise to abstract common functionality into a helper function and call it in each place (i.e. DRY it out).</p>

<hr>

<p>While I don't see it used anywhere, the function <code>stopShake()</code> could be simplified to a partial: </p>

<pre><code>const stopShake = shakeEvent.stop();
</code></pre>

<p>If the context needs to be bound, then use <code>Function.bind()</code> for that: </p>

<pre><code>const stopShake = shakeEvent.stop.bind(shakeEvent);
</code></pre>

<hr>

<p>Why does <code>Apple.move()</code> utilize <code>apple</code>? It should be able to use <code>this</code> instead of the global variable...</p>

<hr>

<p>Why does <code>Apple.draw()</code> use <code>var</code> for <code>sphere</code> and <code>applepos</code>? Why not use <code>const</code>?</p>

<hr>

<p>These CSS rule sets could be combined unless they need to diverge </p>

<blockquote>
<pre><code>#speed {
  top: 30px;
}
#highscore {
  top:30px;
}
</code></pre>
</blockquote>

<p>But looking at those elements it appears hard to read both when they have the same top setting. Perhaps one should be lowered to allow them to both be readable...</p>
    </div>