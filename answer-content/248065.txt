<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Good things</h1>
<ul>
<li>variables are block scoped, declared with <code>const</code> unless re-assignment is necessary</li>
<li>indentation is consistent</li>
</ul>
<h1>Suggestions</h1>
<h2>Number of times <code>recalc</code> is called initially</h2>
<p>Given the last two lines of the whole block:</p>
<blockquote>
<pre><code> window.addEventListener('load', recalc);
 recalc()
</code></pre>
</blockquote>
<p>Is the last line really necessary, given that the function would be called when the window is loaded? Perhaps instead of listening for the <code>load</code> event it should listen for the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event" rel="nofollow noreferrer"><code>DOMContentLoaded</code> event</a>.</p>
<h2>loops</h2>
<p>It looks like the code does the following:</p>
<ul>
<li>loops over elements with class name <code>grid</code>
<ul>
<li>loops over sub-elements with class <code>item</code>
<ul>
<li>filters out any item that isn't a child of the outer element with class <code>grid</code>, yet the inner loop doesn't appear to depend on the outer element with class <code>grid</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>I'm not sure what would be quicker but I would either take one of these approaches:</p>
<ul>
<li>use <code>document.querySelectorAll('.grid &gt; .item')</code> (like you mentioned in the description) to find the elements to iterate over, thus allowing one loop instead of a loop inside a loop</li>
<li>instead of calling <code>.filter().forEach()</code> do one loop - instead of the <code>.filter()</code> have the <code>.forEach()</code> callback return if the parent is not <code>gr</code>.</li>
</ul>
<h2>spreading items into an array</h2>
<p>Instead of calling <code>Array.from()</code> - e.g.</p>
<blockquote>
<pre><code>Array.from(grid)
</code></pre>
</blockquote>
<p>the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">spread syntax</a> can be used for the same result:</p>
<pre><code>[...grid]
</code></pre>
<h2>Redundant styles</h2>
<p>The CSS for <code>.grid</code> contains <code>--raster: 1</code></p>
<blockquote>
<pre><code>.grid {
  --cols: 12;
  --gap: 16;
  --raster: 1;
</code></pre>
</blockquote>
<p>And yet the element with class <code>grid</code> has the <code>--raster</code> style in-line:</p>
<blockquote>
<pre><code>&lt;div class="grid" style="--raster: 1;"&gt;
</code></pre>
</blockquote>
<p>I see that the inline style is used by the JavaScript code to determine the calculation for <code>span</code>. It may be simpler to simply make a class name - e.g.</p>
<pre><code>.raster1 { 
    --raster: 1
}
</code></pre>
<p>Then add that to the list of class names for that element and check for that class name in the JavaScript code instead of parsing the inline-style.</p>
    </div>