<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with Pieter Witvoet it doesn't improve readability. What you could do, since I know you like lambda's, is make additional convenience helpers to reduce <em>camel</em> code.</p>

<blockquote>
<pre><code>Disposable.Create(() =&gt;
{
    foreach (var item in cache.Values) item.Dispose();
})
</code></pre>
</blockquote>

<pre><code>Disposable.Create(cache.Values, (item) =&gt; item.Dispose());
</code></pre>

<p>Additional method:</p>

<pre><code>public static IDisposable Create&lt;T&gt;(IEnumerable&lt;T&gt; source, Action&lt;T&gt; action)
{
    return new Disposable(() =&gt;
    {
        foreach (var item in source) action(item);
    });
}
</code></pre>

<p>I am not a big fan of this:</p>

<blockquote>
<pre><code>foreach (var property in typeof(T).GetProperties())
{
    if (property.GetValue(Value) is IDisposable disposableProperty)
    {
        disposableProperty.Dispose();
    }
}
</code></pre>
</blockquote>

<p>Can we really assume all of the properties that implement <code>IDisposable</code> <em>want</em> to be disposed here? In addition, <code>property.GetValue(Value)</code> throws errors in this naive <code>GetProperties</code> call.</p>
    </div>