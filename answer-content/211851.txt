<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with all points mentioned in the <a href="https://codereview.stackexchange.com/a/211838/98493">other answer</a> by <a href="https://codereview.stackexchange.com/users/167170/pj-dewitte">@pj.dewitte</a>.</p>

<p>In addition, in Python it is frowned upon to write explicit getters and setters for your attributes if they are not needed. Just use the attribute directly. If you need to add more stuff around it later, then you can still write a getter/setter and use <code>@property</code> so the interface does not change.</p>

<pre><code>class User():
    def __init__(self, admin=False):
        self.is_admin = admin
</code></pre>

<p>Python also has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>. It recommends using a consistent amount of whitespace for indentation. Currently you seem to be using two spaces for methods and four spaces for indentation within those methods. Just use four spaces everywhere.</p>

<p>Python has something called <a href="https://www.python-course.eu/python3_magic_methods.php" rel="nofollow noreferrer">magic methods</a> (sometimes also called dunder methods, for "double-underscore", you will see why in a moment). They allow you to give your custom classes built-in behavior. For example, if you implement the <code>__str__</code> method, you can then do <code>print(obj)</code> and this method will be called internally to create a readable string to display to the user. </p>

<p>In Python 3.6, <code>f-string</code>s were introduced (described in <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP498</a>), which makes writing formatted strings a lot easier.</p>

<pre><code>class Cart():

    def __init__(self):
        self.items = {}

    def __str__(self):
        """
        Returns a string with each element of self.items, their price &amp; quantity
        """
        lines = []
        for name, product in self.items.items():
            lines.append(name)
            lines.append(f"   Price: ${product['price']}")
            lines.append(f"   Quantity: {product['quantity']}")
        return "\n".join(lines)

    @property
    def final_price(self):
        return sum(product["price"] * product["quantity"]
                   for product in self.items.values())

    def add_to_cart(self, product):
        """Adds product to cart."""
        self.items[product['name']] = {
            'price': product['price'],
            'quantity': product['quantity']
        }
</code></pre>

<p>By making <code>final_price</code> a <code>property</code> that is evaluated everytime it is accessed, this also allows you to implement <code>delete_item_from_cart</code> and <code>reduce_quantity_in_cart</code> methods without having to make sure to always update the price properly. Of course if your carts become very large (&gt; 10000 items), doing it like you did with an attribute that is updated where necessary will be faster.</p>

<p>One other point: It might make sense to make <code>cart.items</code> into a <code>list</code>, instead of a <code>dict</code>. Or at least add additional checks to <code>add_to_cart</code> against an item being added multiple times (with a <code>dict</code> it will just be overwritten, instead of the quantity added and checked that it actually is the same product and does not just have the same name).</p>
    </div>