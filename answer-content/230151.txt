<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>There's clearly no value in the interface.</li>
<li>Although I'm a proponent of using inheritance only in cases when you need to exercise <a href="https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/" rel="nofollow noreferrer">dynamic polymorphism</a> and this is not a case, your abstract class looks kinda ok as implementations are pretty similar and there's a lot of them. Still, you might consider using composition which is <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance" rel="nofollow noreferrer">preferrable</a>. Making <code>LogClassBuffer</code> abstract is a neat trick and widely used for abstract classes. The only real downfall I see is that your classes do not conform <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">Liskov substitution principle</a>. I would suggest you to rename your methods to <code>SetBuffer</code>, <code>ClearBuffer</code> and move them up to abstract class.</li>
<li>I guess there's not much wrong with casts. I'm not sure whether smth like this could work too for your case</li>
</ol>

<pre><code>internal CanceledDownloadEntry(DownloadEntry entry) 
{
    //your cast
}
</code></pre>

<p>You might want to investigate it at some point
4. This not relates to a question but you can replace this</p>

<pre><code>currentDownload = runningDownloads.Where(o =&gt; o.CommandSequenceNumber == sequenceNumber).FirstOrDefault();
</code></pre>

<p>with this</p>

<pre><code>currentDownload = runningDownloads.FirstOrDefault(o =&gt; o.CommandSequenceNumber == sequenceNumber);
</code></pre>
    </div>