<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So what you are trying to do is to have an implementation of <code>IEnumerable&lt;T&gt;</code> which has a singleton <code>IEnumerator&lt;T&gt;</code>? Why not implement that explicitly, instead of using undocumented (?) behaviour of <code>List&lt;T&gt;</code>'s iterator?</p>

<p>Simply create a class that consumes a <code>IEnumerable&lt;T&gt;</code>, takes its iterator and wraps it in an implementation of <code>IEnumerator&lt;T&gt;</code> that has a dysfunctional <code>Reset</code> method. <code>IEnumerator&lt;T&gt;.GetEnumerator()</code> can then return the instance to that same iterator instead of creating a new one for each call. It could look something like this:</p>

<pre><code>  public class OnlyOnceIterator&lt;T&gt; : IEnumerable&lt;T&gt;, IEnumerator&lt;T&gt; {
    private readonly IEnumerator&lt;T&gt; enumerator;
    internal OnlyOnceIterator(IEnumerable&lt;T&gt; sequence) {
      enumerator = sequence.GetEnumerator();
    }

    public T Current =&gt; enumerator.Current;

    object IEnumerator.Current =&gt; enumerator.Current;

    public void Dispose() {
      enumerator.Dispose();
    }

    public IEnumerator&lt;T&gt; GetEnumerator() =&gt; this;

    public bool MoveNext() {
      return enumerator.MoveNext();
    }

    public void Reset() {
      return;
    }

    IEnumerator IEnumerable.GetEnumerator() =&gt; this;
  }
</code></pre>

<p>This could then be used in an extension method:</p>

<pre><code>  public static OnlyOnceIterator&lt;T&gt; ToOnlyOnceIterator&lt;T&gt;(this IEnumerable&lt;T&gt; sequence) {
    if (sequence == null) {
      throw new System.ArgumentNullException(nameof(sequence));
    }

    return new OnlyOnceIterator&lt;T&gt;(sequence);
  }
</code></pre>

<p>Additionally, I would prefer a more specific return type than <code>IEnumerable&lt;T&gt;</code>, since the returned behaviour is significantly different to what any user might expect from <code>IEnumerable&lt;T&gt;</code>. Consider creating a new interface that inherits from <code>IEnumerable&lt;T&gt;</code> with a more descriptive name. Through inheritance, Linq will still be able to be used, and you can create methods that only accept this specific interface, (compare this to <code>IOrderedEnumerable&lt;T&gt;</code>).</p>
    </div>