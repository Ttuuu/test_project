<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of repeating <code>0 &lt;= dr &lt; m</code> and <code>0 &lt;= dc &lt; n</code> tests in the mine counting loop and the recursive search step, looping over the 2x2, 2x3, 3x2 or 3x3 grid for any <code>r,c</code> coordinate might be better done using a generator expression, using ranges:</p>

<pre><code>while stack:
    r, c = stack.pop()

    rows = range(max(0, r-1), min(r+2, m))
    cols = range(max(0, c-1), min(c+2, n))

    mines = sum(1 for i in rows for j in cols if board[i][j] == 'M')
</code></pre>

<p>As a bonus, you get to reuse those ranges if you find a blank square, for the queuing of virtual click coordinates.</p>

<pre><code>    if mines:
        board[r][c] = str(mines)
    else:
        board[r][c] = 'B'
        for i in rows:
            for j in cols:
                if board[i][j] == 'E':
                    stack.append((i, j))
</code></pre>

<hr>

<p>When you click on a square, and find it is empty, and there are no mines around it, you mark it <code>B</code>, and immediately "click" every <code>E</code> square around it (<code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>f</code>, <code>g</code>, <code>h</code>, &amp; <code>i</code>):</p>

<pre><code>. . . . . . . .
. . . . . . . .
. . a b c . . .
. . d B f . . .
. . g h i . . .
. . . . . . . .
. . . . . . . .
</code></pre>

<p>This adds positions <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>f</code>, <code>g</code>, <code>h</code>, &amp; <code>i</code> to <code>stack</code>.  You pop position <code>i</code> off the stack, and if it turns out to also be surrounded by 0 mines, you add its <code>E</code> neighbours to <code>stack</code>, including <code>f</code> and <code>h</code> a second time.  Eventually, you'll pop <code>h</code> off the stack, and add if it is surrounded by zero mines, add <code>d</code> &amp; <code>g</code> a second time, and <code>f</code> a third time.  This leads to needlessly counting up the mines around various positions multiple times during one <code>dfs</code> call.  Needless repeated counting will, of course, waste time and slow your algorithm down.</p>

<p>Instead of using a <code>list</code> as a <code>stack</code>, you could use a <code>set</code>, which would ignore any duplicate coordinates which are attempted to be queued for subsequent processing.</p>

<p>Alternately, you could mark the "just queued" position with a different symbol, say <code>_</code>, which will eventually be filled in with the number of mines surrounding that square (or <code>B</code>) once that position is popped off the stack for processing.  However, it will no longer be an <code>E</code>, so it won't be accidentally queued multiple times.</p>

<pre><code>    else:
        for i in rows:
            for j in cols:
                if board[i][j] == 'E':
                    stack.append((i, j))
                    board[i][j] = '_'    # Temporary mark to prevent repeated queueing
</code></pre>

<hr>

<p>Using slices for counting the number of mines may be slightly faster, due to the fewer indexing operations:</p>

<pre><code>while stack:
    r, c = stack.pop()

    rmin, rmax = max(0, r-1), min(r+2, m)
    cmin, cmax = max(0, c-1), min(c+2, n)

    mines = sum(cell == 'M' for row in board[rmin:rmax] for cell in row[cmin:cmax])
    if mines:
        board[r][c] = str(mines)
    else:
        board[r][c] = 'B'
        for i in range(rmin, rmax):
            for j in range(cmin, cmax):
                if board[i][j] == 'E':
                    stack.append((i, j))
                    board[i][j] = '_'    # Temporary mark to prevent repeated queueing
</code></pre>
    </div>