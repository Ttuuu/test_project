<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>API #3</h2>

<p>Several legacy Windows WMI API's (LAN adapters, CIM, installed products, ..) have extended state available in the Registry. It's a good idea to provide a wrapper class for consumers, keeping all the magic inside this class. I'm not convinced though about the name <code>Win32WmiClass</code>, it suggest a WMI-only interface, but you also use the Registry.</p>

<hr>

<h3><a href="https://github.com/ktaranov/naming-convention/blob/master/C%23%20Coding%20Standards%20and%20Naming%20Conventions.md" rel="nofollow noreferrer">Naming Concentions</a> (C#)</h3>

<ul>
<li>Constants should be PascalCased: <code>DEFAULT_WMI_NAMESPACE</code> -&gt; <code>DefaultWmiNamespace</code> </li>
</ul>

<hr>

<h3>General Guidelines</h3>

<p>Use arrow notation to write more clean and compact code.</p>

<blockquote>
<pre><code>public string Caption { get { return GetCimInstanceProperty&lt;string&gt;("Caption"); }}
</code></pre>
</blockquote>

<pre><code>   public string Caption =&gt; GetCimInstanceProperty&lt;string&gt;("Caption");
</code></pre>

<p>Use built-in path concatenation functions.</p>

<blockquote>
<pre><code>return share.Path + path;
</code></pre>
</blockquote>

<pre><code>return System.IO.Path.Combine(share.Path, path); // namespace could be using statement
</code></pre>

<p>Use built-in memoization support. The problem with the code below, is that it 
will always retrieve the value from the Registry on each <em>get</em>, if the value is an empty string.</p>

<blockquote>
<pre><code>private string WmiNamespace
{
    get
    {
        if (string.IsNullOrWhiteSpace(_wmiNamespace))
        {
            _wmiNamespace = Registry.GetValue(REGISTRY_KEY_NAMESPACE, 
                REGISTRY_KEY_VALUE_NAME, DEFAULT_WMI_NAMESPACE) as string;
        }

        return _wmiNamespace;
    }
}
</code></pre>
</blockquote>

<p>You only want initialise-once support instead.</p>

<pre><code>private Lazy&lt;string&gt; _wmiNamespace = new Lazy&lt;string&gt;(
    () =&gt; Registry.GetValue(REGISTRY_KEY_NAMESPACE, REGISTRY_KEY_VALUE_NAME, 
        DEFAULT_WMI_NAMESPACE) as string);

public string WmiNamespace =&gt; _wmiNamespace.Value; // only once initialized
</code></pre>

<hr>

<h3>OO-Design</h3>

<ul>
<li>Your base class is not <em>abstract</em>, but perhaps it should be. Is there a use case to instantiate the base class, I tend to think not? Your virtual properties are glorified constants. It's better, in my opinion, to make a <em>protected</em> constructor with the values of the properties for derived classes to set. This allows for better encapsulation.</li>
</ul>

<p>I would do something like this:</p>

<pre><code>public abstract class Win32WmiClass: IDisposable
{
    protected string WmiClassName { get; }
    protected string WmiKeyPropertyName { get; }
    protected string WmiKeySearchCriteria { get; }
    public string HostName { get; }

    protected Win32WmiClass(string wmiClassName, string wmiKeyPropertyName, 
        string wmiKeySearchCriteria, string hostName) 
    {
        WmiClassName = wmiClassName;
        WmiKeyPropertyName = wmiKeyPropertyName;
        WmiKeySearchCriteria = wmiKeySearchCriteria;
        HostName = hostName;
    }

    // .. CR: other code omitted for brevity
}
</code></pre>

<p>If <code>Win32Share</code> itself could have derived classes, also provide the <em>protected</em> constructor below. If not, take it out and <em>seal</em> the class.</p>

<pre><code>public class Win32Share: Win32WmiClass
{
    public string ShareName { get; }

    protected Win32Share(string wmiClassName, string wmiKeyPropertyName, 
            string wmiKeySearchCriteria, string hostName, string shareName) 
        : base (wmiClassName, wmiKeyPropertyName, wmiKeySearchCriteria, hostName)
    {
        ShareName = shareName;
    }

    public Win32Share(string hostName, string shareName) 
        : this("Win32_Share", "Name", hostName, shareName)
    { 
    }

    // .. CR: other code omitted for brevity
}
</code></pre>
    </div>