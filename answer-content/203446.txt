<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You describe what you did but you did not sufficiently describe why you did it. What problem you are trying to solve by your design?
I see some major problems in your design.</p>

<h1>Uno.h</h1>

<ul>
<li>does not need <code>inttypes.h</code>. <code>uint8_t</code> is in <code>stdint.h</code>.</li>
<li>namespace instead of class would be sufficient. Define these constants as plain int <code>constexpr</code>.</li>
<li>Never ever define pins like <code>A0</code> to <code>A5</code> incomplete, false and/or overlapping. That compiles and gives nasty errors at runtime. If you have no idea about the pin numbers or your board does not support some you want to know that at compile time.</li>
</ul>

<h1>Main file (.ino file)</h1>

<p><code>#include "US.cpp"//bad line?</code> - The answer is "yes". But it is not your fault here as the arduino suite "asks" for that. For a regular design (you could use a plain cpp-suite) you would split headers and cpp files to gain compile speed. However arduino does not offer a make project but suggest you should work in a single file and include only. You could have the code in your header files for projects that size. see examples (constructor, setup) below.</p>

<h1>HC_SR04.h</h1>

<ul>
<li><code>virtual uint8_t VCC() = 0;//???</code> - even you do not know what it shall be. how should someone else? What problem are you trying to solve? Unless you want to automatically draw schematics you do not need power pin numbers and should remove that <code>???</code>-lines</li>
<li><code>virtual uint8_t TRIG() = 0;</code> If it was designed for inheritance only it sould be <code>protected</code>. But again here we miss reason for this inheritance-design. I'd prefer a simple private member set at construction time. </li>
</ul>

<h1>HC_SR04.cpp</h1>

<ul>
<li>in `` the last <code>digitalWrite( _trig_pin, HIGH );</code> is redundant </li>
</ul>

<h1>The inheritance-design as such ...</h1>

<p>... is broken.</p>

<ul>
<li>a second sensor on a board requires you to write a second class.</li>
<li>the same sensor on a different board requires you to write another class with identical code but a modified include line for the board.</li>
</ul>

<p>You will end up with a full blown matrix of classes for all board-pin combinations. the same matrix again for a different sensor. </p>

<p>If you want to connect multiple sensors to a single board you definitely do not want to write multiple classes in a class hierarchy differing only by pin numbers.
You want to instantiate a single class with different parameters multiple times.</p>

<p>So we change the sensor project</p>

<ul>
<li>to be completely agnostic about board and/or pin</li>
<li>to couple modules at the very last level possible. This is at (test-)application level in our case</li>
</ul>

<p>we change the class to</p>

<pre><code>class HC_SR04
{
    public :
        HC_SR04(int trig_pin, echo_pin)
            : _trig_pin(trig_pin)
            , _echo_pin(echo_pin)
        {}
        //device specific functions
        void setup() {
            pinMode( _trig_pin, OUTPUT );
            pinMode( _echo_pin, INPUT );
        }
        long get_distance() {
            digitalWrite( _trig_pin, LOW );
            delayMicroseconds( 2 );
            digitalWrite( _trig_pin, HIGH );
            delayMicroseconds( 10 );
            return 0.017 * pulseIn( _echo_pin, HIGH );
        }
    private:
        int _trig_pin;
        int _echo_pin;
};
</code></pre>

<p>and use it like</p>

<pre><code>#include "HC_SR04.h"

HC_SR04 us(Uno::D10, Uno::D11);
</code></pre>
    </div>