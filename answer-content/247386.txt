<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Certainly your definitions of <code>printing_type</code> and <code>print</code> could be shortened. You're currently doing</p>
<pre><code>print(t...)  // print(a,b,c,d)
</code></pre>
<p>but what you actually want to happen is</p>
<pre><code>print(t)...  // print(a), print(b), print(c), print(d)
</code></pre>
<p>So then you have to do a bunch of extra work to transform the former into the latter. Instead of all that extra work, you could just write</p>
<pre><code>void print(size_t val) {
    std::cout &lt;&lt; val &lt;&lt; " ";
}

template&lt;template&lt;size_t...&gt; class T, size_t... S&gt;
void printing_type(T&lt;S...&gt;) {
    (print(S) , ...);
}
</code></pre>
<p>Notice that the single-argument <code>print</code> doesn't have to be a template, because <code>val</code> is always a <code>size_t</code>.</p>
<p>In fact, we can inline <code>print</code> into <code>printing_type</code> if we want:</p>
<pre><code>template&lt;template&lt;size_t...&gt; class TT, size_t... Values&gt;
void printing_type(TT&lt;Values...&gt;) {
    ((std::cout &lt;&lt; Values &lt;&lt; " ") , ...);
}
</code></pre>
<p>The <code>(ts , ...)</code> syntax is a C++17 fold-expression. If you aren't on C++17, then you can use an initializer list to accomplish the same thing:</p>
<pre><code>template&lt;template&lt;size_t...&gt; class TT, size_t... Values&gt;
void printing_type(TT&lt;Values...&gt;) {
    int dummy[] = {
        ((std::cout &lt;&lt; Values &lt;&lt; " "), 0) ...
    };
}
</code></pre>
<hr>
<p>Your definition for <code>sequence</code> is pretty confusing. Your code could benefit from some <em>unit tests</em>. Compile-time unit tests are easy:</p>
<pre><code>static_assert(std::is_same&lt;create_int_seq&lt;0&gt;, int_seq&lt;1&gt;&gt;::value, "");
static_assert(std::is_same&lt;create_int_seq&lt;1&gt;, int_seq&lt;1,2&gt;&gt;::value, "");
static_assert(std::is_same&lt;create_int_seq&lt;2&gt;, int_seq&lt;1,2,4&gt;&gt;::value, "");
static_assert(std::is_same&lt;create_int_seq&lt;3&gt;, int_seq&lt;1,2,4,8&gt;&gt;::value, "");
static_assert(std::is_same&lt;create_int_seq&lt;4&gt;, int_seq&lt;1,2,4,8,16&gt;&gt;::value, "");
</code></pre>
<p>As a bonus, these five lines serve as excellent documentation about what this code does... to the extent that I no longer mind the lack of code comments explaining <em>how</em> it might work.</p>
<p>FWIW, if I wanted to make these test cases pass, I'd implement <code>create_int_seq</code> like this:</p>
<pre><code>template&lt;class&gt; struct powers_of_two;
template&lt;size_t... Is&gt;
struct powers_of_two&lt;std::index_sequence&lt;Is...&gt;&gt; {
    using type = int_seq&lt;(size_t(1) &lt;&lt; Is)...&gt;;
};

template&lt;size_t N&gt;
using create_int_seq =
    typename powers_of_two&lt;std::make_index_sequence&lt;N+1&gt;&gt;::type;
</code></pre>
<p>Relevant blog post of mine: <a href="https://quuxplusone.github.io/blog/2018/07/23/metafilter/" rel="noreferrer">"Template metaprogramming: Iteration is better than recursion"</a> (July 2018).</p>
    </div>