<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>C99, assignment-in-conditions</h2>

<p>At the risk of sounding like a broken record - I'll make the same recommendations as in <a href="https://codereview.stackexchange.com/questions/239425/simpletron-simulator-in-c">Simpletron simulator in C</a> . Consider moving your variable declarations closer to where they're used, and expanding out your assignment-in-condition statements.</p>

<p>There's another benefit to C99: this - </p>

<pre><code>comp-&gt;symtable = symtable;
comp-&gt;sml = sml;
comp-&gt;flag = flag;
comp-&gt;memsize = MEMSIZE;
comp-&gt;file = filename;
comp-&gt;ln = 1;
comp-&gt;inscount = 0;
comp-&gt;datacount = comp-&gt;memsize - 1;
</code></pre>

<p>could be converted to a <code>const static</code> structure instance using C99 standard section 6.7.8 Initialization ("designated initializers"), like:</p>

<pre><code>const static struct compiler default = {
    .ln = 1,
    // ...
};
</code></pre>

<p>and then all of the defaults assigned in a single statement.</p>

<h2>Nasty side-effects</h2>

<p>This:</p>

<pre><code>static struct symbol symtable['z' - 'A'];
static memtype sml[MEMSIZE];
static char flag[MEMSIZE];

comp-&gt;symtable = symtable;
comp-&gt;sml = sml;
comp-&gt;flag = flag;
</code></pre>

<p>is nasty. From the outside it <em>looks</em> like <code>compiler</code> is a re-entrant structure, but in actuality the memory is shared. A naive caller would pass in two different compiler instances, and then be surprised when data leaks from one to the other.</p>

<h2>Surprising function names</h2>

<p>I would assume that this:</p>

<pre><code>iscommand(tok)
</code></pre>

<p>returns a boolean, but it actually returns a pointer?</p>

<pre><code>(*iscommand(tok))(comp);
</code></pre>

<p>It should be named something like <code>getinstruction</code>.</p>

<h2>Helper pointers</h2>

<p>This:</p>

<pre><code>    opcode0  = comp-&gt;sml[i] / comp-&gt;memsize;
    operand0 = comp-&gt;sml[i] % comp-&gt;memsize;
    opcode1  = comp-&gt;sml[i+1] / comp-&gt;memsize;
    operand1 = comp-&gt;sml[i+1] % comp-&gt;memsize;
    opcode2 = comp-&gt;sml[i+2] / comp-&gt;memsize;
</code></pre>

<p>can be somewhat abbreviated by the creation of a temporary pointer equal to <code>comp-&gt;sml + i</code>.</p>

<h2>Switch</h2>

<p>This is the perfect use-case for a <code>switch</code>:</p>

<pre><code>        if (expr-&gt;u.c == '+')
            comp-&gt;sml[comp-&gt;inscount++] = ADD * MEMSIZE + op2;
        if (expr-&gt;u.c == '-')
            comp-&gt;sml[comp-&gt;inscount++] = SUBTRACT * MEMSIZE + op2;
        if (expr-&gt;u.c == '*')
            comp-&gt;sml[comp-&gt;inscount++] = MULTIPLY * MEMSIZE + op2;
        if (expr-&gt;u.c == '/')
            comp-&gt;sml[comp-&gt;inscount++] = DIVIDE * MEMSIZE + op2;
        if (expr-&gt;u.c == '%')
            comp-&gt;sml[comp-&gt;inscount++] = REMINDER * MEMSIZE + op2;
</code></pre>
    </div>