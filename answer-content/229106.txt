<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Possibly unneeded variable</strong></p>

<p>I don't think this variable is needed:</p>

<pre><code>static size_t const front = 0;
</code></pre>

<p>Just using the constant <code>0</code> may or may not be clearer.</p>

<p><strong>Slight refactoring of comparisons</strong></p>

<p>Instead of doing:</p>

<pre><code>if((rear + 1) &gt; QUEUE_SIZE)
</code></pre>

<p>I suggest</p>

<pre><code>if(rear &gt;= QUEUE_SIZE)
</code></pre>

<p>and similarly for:</p>

<pre><code>(i+1) &lt; QUEUE_SIZE
</code></pre>

<p>which can be replaced by:</p>

<pre><code>i &lt; (QUEUE_SIZE-1)
</code></pre>

<p>This is clearer and easier to read.</p>

<p><strong><code>delete</code> is a reserved keyword in C++</strong></p>

<p>If you plan on this library being used in C++, you may want to know that <code>delete</code> is a reserved keyword. You can change this function name to something like <code>unqueue</code> or something that's not reserved. However, I strongly suggest you don't use this in C++; <code>std::queue</code> is a better, faster option.</p>

<p><strong>Faster copying</strong></p>

<p>Instead of using this construct:</p>

<pre><code>size_t i;

for(i = front; (i+1) &lt; QUEUE_SIZE; i++)
{
    queue[i] = queue[i+1];
}
</code></pre>

<p>you could probably use <code>memmove</code>:</p>

<pre><code>memmove(queue, queue+1, sizeof(*queue)*(QUEUE_SIZE-1));
</code></pre>

<p>This could probably provide a minimal speed benefit.</p>

<p><strong>Some good things that you have done</strong></p>

<p>Good job on not using <code>printf</code> where you don't need it. I find a lot of programmers unnecessarily using <code>printf("\n");</code> when they could've just used <code>putchar('\n')</code>.</p>
    </div>