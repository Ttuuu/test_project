<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of using indices from 0 to 9, change the way you store your board to be a 3x3 list.</p>
<pre class="lang-py prettyprint-override"><code>board = list([[0] * 3] * 3)
"""
1 | 2 | 3
4 | 5 | 6
7 | 8 | 9
"""
</code></pre>
<p>This will allow you to come back to it and add a GUI.
It also becomes easier for anyone reading the code to understand what's happening visually.</p>
<p>Next is your printout of the board. Join will be your friend here.</p>
<pre class="lang-py prettyprint-override"><code>for row in board:
  printout = "\t|\t".join(str(element) for element in row)
  print(printout) # this can be reduced to a single line if you want.
</code></pre>
<h3>ranges</h3>
<p><code>range()</code> accepts 3 variables. START, STOP and INCREMENT AMOUNT</p>
<pre class="lang-py prettyprint-override"><code>for i in range(0, 9, 3):

</code></pre>
<p>You can also reverse with negative values</p>
<pre class="lang-py prettyprint-override"><code>for i in range(9, 0, -1):
</code></pre>
<p>or</p>
<pre class="lang-py prettyprint-override"><code>for row in board[::-1]:
</code></pre>
<h3>if statements</h3>
<p>In math class you know how you were able to write a &lt; x &gt; b? You can do that in python without requiring <code>and</code>.</p>
<pre class="lang-py prettyprint-override"><code>if 0 &lt;= number &gt; 10:
</code></pre>
<p>Then there is checking the board state if someone has won.
Your current approach requires a lot of coding and can't be expanded on quickly</p>
<p>There are a few different approaches you can do with this. All will "work."</p>
<p>First the rows</p>
<pre class="lang-py prettyprint-override"><code>for row in board:
  if len(set(row)) == 1:
    return True
</code></pre>
<pre class="lang-py prettyprint-override"><code>for row in board:
  if all(element == row[0] for element in rows):
    return True
</code></pre>
<p>Diagonals next (I would use a tempory dummy variable for <code>len(board)</code> to increase readability. -&gt; <code>_ = len(board)</code></p>
<pre class="lang-py prettyprint-override"><code>if len(set(board[i][i] for i in range(len(board)) == 1:
  return True
if len(set(board[i][len(board)-i-1] for i in range(len(board)) == 1:
  return True
</code></pre>
<p>The columns can be a trickier but transposing would probably be the most pythonic way to approach it.</p>
<pre class="lang-py prettyprint-override"><code>board_T = [list(column) for column in zip(board)]
</code></pre>
<p>This will allow you to call the rows again and check to see if someone won.</p>
<p>It should be noted that the return values for the winner state could return the <strong>PLAYER</strong> of rather than <code>True</code> or <code>False</code>. Python sees 0, None, Empty iterables, and False as False in an if statement.</p>
<p>I also noticed you didn't follow a lot of the advice given to you in the original post. You are still lacking an <code>if __name__ == "__main__":</code> statement</p>
<pre class="lang-py prettyprint-override"><code>def playTicTacToe():
   display_board(test_board)
   ...

...
if __name__ == "__main__":
  playTicTacToe()
</code></pre>
    </div>