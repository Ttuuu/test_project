<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>[I'm reviewing this because I believe that both <code>f</code> and <code>f2</code> actually work; I think the discussion of "different call tree" is just talking about difficulty in profiling them meaningfully.]</p>

<p>From a code quality viewpoint, I think <code>f</code> is a clear win. <code>emplace_back</code> precisely describes what we want to accomplish here. <code>f2</code> spends a great deal more effort on the mechanics of filling the vector with the desired data.</p>

<p>However, I can't say I'm particularly excited about either one. First of all, I'm...less than excited about using <code>std::pair</code>. In most cases, I'd rather define a class with meaningful names for the members. In this case, it at least <em>looks</em> like you're counting the number of times each user name occurs (or something on that order). That being the case, I'd probably define a structure something along this line:</p>

<pre><code>struct UserCount { 
    std::string userName;
    int count { 0 };
    UserCount(std::string const &amp;s) : userName(s) {}
};
</code></pre>

<p>With that in place, we can construct our vector directly from the source:</p>

<pre><code>std::vector&lt;UserCount&gt; userOccurancies(users.begin(), users.end());
</code></pre>

<p>This should normally be at least as fast as either <code>f</code> or <code>f2</code>, and may be faster than either (though honestly, I wouldn't expect a huge speed gain from it).</p>

<p>That does lead to two other possibilities though. </p>

<ol>
<li>If we can count on <code>users</code> remaining valid for the entire time that <code>userOccurancies</code> will exist, we can have <code>UserCount</code> store just a reference to the user name rather than storing a copy of it. </li>
<li>Conversely, if we know that <code>users</code> will only be used to initialize <code>userOccurancies</code>, we can move the strings rather than copying them. Either of these is likely to be faster than copying the strings (if circumstances allow them, of course).</li>
</ol>

<p>A little here may also depend on what we're trying to optimize though. Storing references to the original strings may hurt cache locality a bit, so if we're <em>using</em> <code>userOccurancies</code> a lot, it may be faster overall to copy the strings rather than just storing references to them. This becomes especially true with short strings (for some definition of 'short') and a <code>std::string</code> that implements the short string optimization (which most modern implementations do).</p>
    </div>