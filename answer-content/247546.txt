<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming</h1>
<p>Your names are inconsistent. First, there is a mix of camelCase, PascalCase and snake_case. Pick one style and stick with it. You can make an exception for template type names, typically you would write <code>T</code> for the data type, and <code>Compare</code> for the comparison object.</p>
<p>Second, the three getter functions in <code>io_arrays_compared</code> are named <code>invalid_elems()</code>, <code>elems_lost()</code> and <code>out_of_order()</code>. Two have <code>elems</code> in the name, but one has it in front, the other at the back. Try to be consistent. Is it necessary to have "elems" in the name or is it clear from the context? If it's clear, then just write <code>invalid()</code>, <code>lost()</code> and <code>out_of_order()</code>. To make it clear that this returns a count, and not a boolean or a vector with the affected elements, I would prefix them all with <code>n_</code>, as that typically means "number of": <code>n_invalid()</code>, <code>n_lost()</code>, <code>n_out_of_order()</code>.</p>
<p>The class and function names could be improved too:</p>
<ul>
<li><code>io_arrays_compared</code> -&gt; <code>io_array_comparison_result</code></li>
<li><code>make_io_arrays_compare()</code> -&gt; <code>compare_io_arrays()</code></li>
</ul>
<h1>The result class should not hold unnecessary data</h1>
<p>The result class should just contain four member variables:</p>
<pre><code>const size_t n_sent;
const size_t n_invalid;
const size_t n_lost;
const size_t n_out_of_order;
</code></pre>
<p>If you make them <code>const</code>, you can then make them <code>public</code> and don't need any getter functions for them. You can still have the convenience functions such as <code>bool Success()</code>, <code>operator bool()</code> and <code>operator&lt;&lt;()</code>.</p>
<p>You shouldn't keep a copy of the sent and received data, because the caller of <code>compare_io_arrays()</code> already has that data. Furthermore, <code>validElems</code> is just a temporary vector used in <code>compare_io_arrays()</code>, so that should just be declared locally in that function.</p>
<p>Even if you plan to make use of the extra data in the future, it is best not to add currently unused member variables. Plans might never be turned into action, or they might change. The <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI principle</a> applies here. It also makes it harder for code reviewers to know what to ignore.</p>
<h1>Avoid copying the input vectors</h1>
<p>It's usually good practice to take <code>const</code> references to large parameters such as the <code>sent</code> and <code>received</code> vectors, so you avoid making unnecessary copies, so write:</p>
<pre><code>template &lt;typename T, typename Compare = std::less&lt;T&gt;&gt;
io_array_comparison_result&lt;T&gt; compare_io_arrays(const std::vector&lt;T&gt; &amp;sent,
                                                const std::vector&lt;T&gt; &amp;received,
                                                Compare comp = Compare())
{
    ...
</code></pre>
<p>If you want to use <code>std::set_intersection()</code>, you still need to make a copy of the received data though:</p>
<pre><code>auto received_sorted = received;
std::sort(received_sorted.begin(), received_sorted.end(), comp);
</code></pre>
<p>But that might not be necessary:</p>
<h1>Avoiding sorting the received data</h1>
<p>It's possible to avoid sorting the received data, which can improve performance if there are only few packets that are reordered. Since the <code>sent</code> vector is already sorted, you can check for each element in <code>received</code> if it was present in <code>sent</code> using <a href="https://en.cppreference.com/w/cpp/algorithm/binary_search" rel="nofollow noreferrer"><code>std::binary_search()</code></a>. This has complexity O(N log N), which is the same as first sorting the input and then using <code>std::set_intersection()</code>. But you can do better, since you can scan linearly through <code>sent</code> and <code>received</code> as long as their elements match, and when they don't you can start doing the binary search, until they start matching up again.</p>
<h1>How to count out of order elements</h1>
<p>Your method of checking whether elements are received in the same order as they are sent is too naive. It just checks whether elements at the same index in both vectors are equal. But what if one element is lost?</p>
<pre><code>std::vector&lt;int&gt; out{0, 1, 2, 3, 4, 5};
std::vector&lt;int&gt; in {0, 1,    3, 4, 5};
</code></pre>
<p>In this case, it will report that three elements are out of order. A better approach would be to just scan <code>received</code> and check whether successive elements are ordered as expected. For example:</p>
<pre><code>std::vector&lt;int&gt; out{0, 1, 2, 3, 4, 5};
std::vector&lt;int&gt; in {0, 2, 3, 4, 1, 5};
</code></pre>
<p>Only the pair <code>4, 1</code> is not in the right order, since <code>4 &lt; 1 == false</code>. And that makes sense, since it's just the element <code>1</code> that has skipped three places ahead.</p>
<h1>Additional analysis</h1>
<p>What I am missing is a check for duplicated elements. This is not an uncommon issue in networks.</p>
    </div>