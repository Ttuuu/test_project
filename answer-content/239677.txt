<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can simplify this by rearranging the function as follows (writing <code>z=(a+b)/2</code>):</p>

<pre><code>a log(a/z) + b log(b/z) + (1-a) log( (1-a)/(1-z) ) + (1-b) log( (1-b)/(1-z) )

= a log(a) + b log(b) + (1-a) log(1-a) + (1-b) log(1-b) - 2z log(z) - 2(1-z)log(1-z)
</code></pre>

<p>The first 4 terms can be evaluated outside the main loop, so that you only need to evaluate <code>log(z)</code> and <code>log(1-z)</code> within the inner loop. This should give close to a factor 2 speed up.</p>

<p>Since the remaining function to evaluate in the inner loop, <code>z log(z) + (1-z)log(1-z)</code> is a function of a single variable, you could possible replace this with a look-up table .... but I don't know how much you would gain from that. </p>

<p>Alternatively, use </p>

<pre><code>-log(0.5) - 2*(z-0.5)**2 &gt; -z log(z) - (1-z)log(1-z) &gt; -2z * log(0.5)
</code></pre>

<p>to first get upper and lower bounds for each <code>C[i,j]</code> and then focus attention on those values for which the upper bound is greater than the maximum of the lower bounds.</p>
    </div>