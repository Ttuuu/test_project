<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This seems over-complicated.  A simpler solution would use a <code>std::map</code> or <code>std::unordered_map</code> for the counting:</p>

<pre><code>std::unordered_map&lt;int, std::size_t&gt; counts;
for (auto const &amp;element: container) {
     ++counts[element];
}
</code></pre>

<hr>

<p>Instead of being tied to <code>std::vector&lt;int&gt;</code>, we could make the code much more flexible as a template, taking a pair of iterators (or, from C++20, a <code>std::range</code>) with any appropriate element type.  The signature might look something like:</p>

<pre><code>template&lt;typename Iter&gt;
auto getFrequencies(Iter begin, Iter end)
   -&gt; std::unordered_map&lt;decltype(*Iter), std::size_t&gt;;
</code></pre>

<p>We might use constraints or SFINAE to choose whether to return an ordered or unordered map, based on whether <code>*Iter</code> is ordered and/or hashable.</p>
    </div>