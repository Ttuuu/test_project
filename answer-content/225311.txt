<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All of <a href="https://codereview.stackexchange.com/a/225292/200133">dfhwze</a>'s points are spot-on, and the only thing I can think of to add to his type-signature is that if you're unfamiliar with all of the syntax he's using <em>that's ok</em>.<br>
<sub>(If you want to learn the stuff in question, search for "inheritance" (or "interface"), "generics", "extension methods", and possibly "generators" or "yield".)</sub></p>

<h2>Regarding your actual algorithm:</h2>

<p>The <strong>big red flag</strong> that your current algorithm isn't good is that you have two nearly-identical loops. That they happen to be <code>while</code> loops is a <strong>small red flag</strong>, which you noticed indirectly when you noted that <code>rnd.Next()</code> can yield duplicates. </p>

<p>The algorithm you probably want is to first <strong>shuffle</strong> your source list, and then take sequential runs from it as needed.
Stack Exchange gives us usable implementations of both those steps. Only copy-paste them if you understand how they work and you want those exact methods lying around your code-base; most of the time it's better to re-write these things so that you're making the "details" decisions for yourself.</p>

<ul>
<li><a href="https://stackoverflow.com/a/22668974/10135377">This answer</a> gives us a nice implementation of <a href="http://en.wikipedia.org/wiki/Fisher-Yates_shuffle" rel="noreferrer">The Fisher–Yates shuffle</a>, which is efficient and appropriate. </li>
<li><a href="https://stackoverflow.com/a/1396143/10135377">This answer</a> gives us tidy slicing. (What <em>exactly</em> happens if <code>source.Count / (Double)size</code> isn't an integer?)</li>
</ul>

<p>There are some details that <em>probably</em> matter, like whether or not the original order of the elements needs to be preserved, or what should happen if the source list isn't evenly divisible into the number of buckets in question.</p>

<p>And once you've resolved all of that, since you asked about efficiency, we can return to <a href="https://codereview.stackexchange.com/a/225292/200133">dfhwze</a>'s function signature. Specifically, <code>this IEnumerable&lt;T&gt; source</code> is taken as an enumer<strong>able</strong> collection; the Fisher–Yates shuffle shuffles a list <strong>in place</strong>. It's <em>very tempting</em> to change the argument to <code>this IList&lt;T&gt; source</code>, so that if the calling context already has a list, we're can just use that one instead of calling <code>source.ToList()</code>. If you do it that way you'll have written a function that returns a computed value <em>and</em> modifies the contents of its argument; <strong>strongly consider not doing that</strong>.</p>
    </div>