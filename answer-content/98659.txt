<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I looked through your code and it is a valid solution, but you could reduce your code base by better leveraging the functions that JavaScript already provides, such as <code>Array.prototype.indexOf()</code>.</p>

<p>For example, instead of building a new class-like-function (<code>Element</code>) to track the appearance of a certain index, I simply made a deep copy of the the initial array and parsed it with <code>indexOf()</code>.</p>

<p>Moreover, in your code, when you first declare <code>this.objects = []</code>, <code>this</code> actually refers to the global scope (<code>window object</code>). As you can see, you are calling pairwise without building a new instance (<code>new</code> keyword). In this case, thus the <code>this</code> keyword is bound to the global window object.</p>

<p>Please find below my take on it:</p>

<pre><code>function pairwise(arr, arg) {

  var result = 0,
      newArr = [],
      //Used to hold the indices that we have already used to form our sum
      indices = [];

  //Loop through arr and create a deep copy of it in newArr
  for(var k = 0; k &lt; arr.length; k++) {
    newArr.push(arr[k]);
  }

  //Loop through arr
  for(var i = 0; i &lt; arr.length; i++) {

    //Loop through newArr
    for(var j = 0; j &lt; newArr.length; j++) {
      //Since we want to add different elements of the array, we want to avoid adding the same element
      if(i !== j) {
        //If the sum of two elements is equal to arg AND the indices that we have in i and j are not part of the indices array
        //Indices array is used to hold the already used indices, thus ensuring the accurate parsing of the parameters
        if(arr[i] + newArr[j] === arg &amp;&amp; indices.indexOf(i) === -1 &amp;&amp; indices.indexOf(j) === -1) {
          //Sum the indices up
          result += i + j;
          //Push the indices in the indices array in order to not use them in further iterations
          indices.push(i, j);
        }
      }
    }
  }

  return result;
}

pairwise([1,4,2,3,0,5], 7);
</code></pre>
    </div>