<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rather than tie yourself to only one type (string), you could use the <code>reflect</code> package as well as interfaces to make it somewhat type indifferent. The following is my reworking of your code:</p>

<pre><code>package main

import "fmt"
import "reflect"

func in_array(val interface{}, array interface{}) (exists bool, index int) {
    exists = false
    index = -1

    switch reflect.TypeOf(array).Kind() {
    case reflect.Slice:
        s := reflect.ValueOf(array)

        for i := 0; i &lt; s.Len(); i++ {
            if reflect.DeepEqual(val, s.Index(i).Interface()) == true {
                index = i
                exists = true
                return
            }
        }
    }

    return
}
</code></pre>

<p>Note that we now import the <code>reflect</code> package. We also changed the types of <code>val</code> and <code>array</code> to <code>interface{}</code> so that we may pass any type in. We then use the <code>reflect.Typeof()</code> to glean the reflection <code>reflect.Type</code> of the value in the <code>array interface{}</code>. We then glean the type with <code>Kind()</code>, and use a case to fall into our inner code if its a slice (can add more cases to extend this). </p>

<p>In our inner code, we get the value of the <code>array</code> argument, and store it in <code>s</code>. We then iterate over the length of <code>s</code>, and compare <code>val</code> to <code>s</code> at the index <code>i</code> declared as an <code>interface</code> with <code>Interface()</code> and check for truthiness. If its true, we exit with a true and the index. </p>

<p>Running the main function with both a slice of strings and a slice of integers, as follows, works:</p>

<pre><code>func main() {
    names := []string{"Mary", "Anna", "Beth", "Johnny", "Beth"}
    fmt.Println(in_array("Anna", names))
    fmt.Println(in_array("Jon", names))

    ints := []int{1, 4, 3, 2, 6}
    fmt.Println(in_array(3, ints))
    fmt.Println(in_array(95, ints))
}
</code></pre>

<p>The above example gets us:</p>

<pre><code>true 1
false -1
true 2
false -1
</code></pre>
    </div>