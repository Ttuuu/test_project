<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll assume you have tested them enough to say they work for normal situations.</p>

<h2>Overall.</h2>

<p>Though perfectly fine. Your use on the outer loop "looks" strange. Personally I would replace them with <code>for()</code> loops. But that's just me.</p>

<h3>Swap</h3>

<p>Your use of swap works for integers and normal built in types. But it may not work for all types (some types have their own swap in their own namespace).</p>

<p>So the idiomatic way to use swap is:</p>

<pre><code>{
    using std::swap;
    swap(a, b);
}
</code></pre>

<p>Assuming <code>a</code> and <code>b</code> are type <code>NameSpace::Type</code>. Then if there is a swap function defined <code>NameSpace</code> for type <code>Type</code> then Koning lookup will find it. Otherwise the compiler will find swap in the local scope (imported from <code>std</code>) and use that.</p>

<p>But don't do that. There is a standard swap function for iterators that encapsulates all the above correctly. <code>std::iter_swap()</code>.</p>

<p>So rather than:</p>

<pre><code>std::swap(*temp_lhs, *temp_rhs);
</code></pre>

<p>use:</p>

<pre><code>std::iter_swap(temp_lhs, temp_rhs);   // Guaranteed correct swap.
</code></pre>

<h3>Bubble Sort</h3>

<p>You missed the standard optimization. If you do a pass and there was zero swaps required in the last past then the container is sorted and you can exit. This great property of bubble sort gives it a best case complexity of <code>O(n)</code> (ie if it is already sorted then its a single pass).</p>

<p>I am sure you can simplify the iterator manipulation so you don't have an extra comparison against end.</p>

<h3>Selection Sort</h3>

<p>You have an extra comparison against begin every iteration of the outer loop. Then you test to see if begin and smallest are the same at the end of the loop. Not sure that is an optimization or a pessimization. If you have found this to be a general case optimization then you should comment it.</p>

<h3>Merge Sort</h3>

<p>Looks like it should work.<br>
But writing it all in one method like that hurts my brain. I prefer when it is split into two logical methods. But writing it as one may be a requirement to do everything in place. If so make that point in a comment.</p>

<h2>Finaley</h2>

<p>What are the performance characteristics of your sort in relation to std::sort?</p>
    </div>