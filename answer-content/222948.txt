<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What do I like?</p>

<ol>
<li>You use an initializer list in the constructor of <code>Blinkedlist</code>, and you are initializing all the primitive-type members in the correct order.</li>
<li>You are using the more safe <code>nullptr</code> keyword instead of plain old <code>NULL</code>.</li>
<li>You try to resemble the STL container interface that is well-known by C++ programmers.</li>
<li>Mimicking the interface even extends to using the C++ standard exception classes.</li>
<li><code>insert</code> contains a useful optimization by detecting the <code>push_back</code> case.</li>
<li>There is a comment explaining the behaviour of <code>remove_value</code> in the case of repeated values.</li>
</ol>

<p>What do I dislike?</p>

<ol>
<li>The code you wrote allocates memory with <code>new</code>, but it <em>never</em> <code>delete</code>s anything.</li>
<li>While <code>pop_back</code> and <code>pop_front</code> return the value of the deleted note, <code>erase</code> does not. This feels inconsistent.</li>
<li>The tests for <code>head != nullptr</code> in <code>pop_front</code> and <code>pop_back</code> are unnecessary. If <code>size != 0</code>, we can be sure that <code>head != nullptr</code>.</li>
<li>The special casing of <code>pop_back</code> for <code>size == 2</code> is unneeded. It actually contains a bug: You forget to clear the <code>next</code> pointer in that case. The case for <code>size &gt; 2</code> actually works (without that bug) for <code>size &gt; 1</code>.</li>
<li><code>remove_value</code> iterates the list twice: Once to find the value and a second time to re-find the node in <code>erase</code>. You should either duplicate the erasure into this function, or provide an internal function that allows erasure of a <code>Node</code> given as a pointer to that node.</li>
<li>You do provide <code>pop_back</code>, although it is a very slow operation (on big lists).</li>
<li><code>value_n_from_end</code> could be the one-liner <code>return value_at(size-idx);</code>. The reimplementation of <code>value_at</code> doesn't make sense. Maybe you want a check that <code>size-idx</code> does not overflow, though.</li>
<li>Behaviour on the empty list is inconsistent: <code>pop_front</code> and <code>pop_back</code> throw an exception, while <code>front</code> and <code>back</code> dereference <code>nullptr</code> without checking. I would have expected that either all nor none of these functions contain a <code>throw</code> statement for the empty list.</li>
<li><code>Node</code> should be a private nested type inside <code>Blinkedlist</code></li>
<li>It might be helpful to exercise all the functions in the usage example, so it doubles as unit test.</li>
</ol>

<p>Let's get started with the most important question in my oppinion: Can we improve the code using smart pointers. And the answer is: Yes, a lot. Most importantly, my first dislike.</p>

<p><em>If</em> your data structures and algorithms that need dynamic allocations (and yes, a singly linked list does not allocations) can be made to work with <code>unique_ptr</code>, the compiler will insert the <code>delete</code> statements automatically where appropriate. A <code>unique_ptr</code> only works if it is the one-and-only owner of an object.</p>

<p>You can <em>not</em> just make <code>head</code> and <code>tail</code> both <code>std::unique_ptr&lt;Node&gt;</code>, because (as an example) in a single-element list, both <code>head</code> and <code>tail</code> would point to the same Node, which obviously breaks uniqueness. Looking more in depth shows that each node is pointed to by its previous node, except for the first node, which is pointed to by <code>head</code>. On the other hand, the <code>tail</code> pointer does not point to anything "new" compared to that. So I would make <code>Blinkedlist::head</code> and <code>Node::next</code> unique pointers.</p>

<p>This means you also need to be more stringent where you transfer ownership, and be careful to not use a <code>unique_ptr</code> after transferring ownership.</p>

<p><a href="https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSAbAQwDtRkBSAJgCFufSAZ1QBXYskwgA5NwDMeFsgYisAag6yAwgFtM2kgE8N2DgAYAgmfOCCxEcgKqAchkxWOAdj4XVv1QscAa0wjWW9zP1UbdBAQERY8AEcRTAB9AAdbDU0XLGNVFkwADwINcM8AETL3CyUmQUFVHgAZBWD0Bjwbdy8rdJEAI07kECtIlrbMDq6CCABKap8/ADdUPHRVfsEEVIGmZECIANVlpmVMBbCxlbWNrZ2AM2JUFlnj0/PL8MjV9f8WQSYYhvV7%2BdBFUj/RwfFJfa6%2BY7pVDpVJPF6zOFLBGgpEovYHeaLCI3P5A%2BqYI6g9ZFTHE7GOYh6VDLNIwinvM6wsqqAD0PMZ%2BhZjQICEwqgeeGINn8BD0/1UIrFnWlAHdCAgFQguidOW4sSdbqp8IJ0swDISrvqBqhUAxVHpMubaZEOedUkwQY5qc6/K6UqkWKjntpUpgWOhKV7wT76eLnq8Ld9faD8YcYwa/oyWVKKbT0sQ8KdZaN9cdBHgAF5uS10qIEGJxBLJNKZYjZXLV7CqUVMdBEyIdgBUCqYeAYRMqE4scgUShUYuy0WKEkyxncXHkimUamyeFQNkZTG0a%2BnFgmLHayoIsXPl5m8xA5arEFMc0hPYjLBEDAYrbfI7HCAvx/P8enKacPCqU9zF%2BDZbymK9YnuXZ9kOP0LjA%2BE6wbeIkn9Vt21cfJChVDsgMwFVnFceZ0xIjsAFpjGCAx1FkCodXOfs/Do1xGNkbBChKVj2OA38shrAdXGHEjUgIUc7Q0ESKI7AA6YBMAxLiEQeCAP1UMAwEUgpvzE4gFn1Twk0iXw5LHPiBOKRwjOiWJBQpHisHTSd9UwBhASwyysMiPTnPrVzmXc5TXC8yCsNshS2IKCjZPkrT1F4fgn2rcpYug2CmlaC8EJmJCRG2IN0UjDiuQgqzsNiXDmwycSciI/iktI6iSKorAaLSjzMHs5jhOq7KsLwHS9IMozRNAizen1SIBvswSnMSlyQDc3TMF7GKoNrXz/PmuqlqirAVsckbZvEk6/Hiq6zswNSNMTALctrEL1rCzaIvIzrPLS/hMsrMaIP2qx8vg6YbFiBRAWBKrqUhdDzMsBbawmo5wVYzRVFMdQPE0TxcepViuyy1HIkCxa7oQZ5KI20QCFSVAHlSYhWHUiBuC4ABJcNin8RomdUVnVA5thMGmrguD2rDDr1WtqdrF0dNJxSjNfIK/GV6y9c2MrHnjWY2XTKn3v1%2B0/LFTH1bY5yQcp/XdctvxkNTCBTbS839sthXtd8F3Xfqxs8JbFqO2Ix6/p63Mzf15amJCEa2SnFX9aHVRkDEYgRo/Z7NIk4OoX8EbqXo2hvf1lUtQYdkybxp3g6D4vfGz4hc6M9viAukoC9emng/o%2Bi8CrvXvPTvXE/41aRo2rbu97gh471xfjFn0KGy2gaV%2BsoHeCyseCfB%2BaT7Rs/jihxCQFxCqE1RlvMamwzEuuzuuAANm4D%2BohBsmjNlm9W6sYPh5x2ugIaIQj6fXYvPX6H4l672HofIuetGQEDECwDigMLZ%2BAVv4Sa4D9IvxEiZVs6Uv6f1/lWYSRlaBNwJsAkuoCjIIKTqEJhMDjIgRugHACCVSE8LbKg6yyCQZH3QZg7BIiJ6RH9sdPhIp6YhwYKgYAeBkChg7iQbmMtWjSm1GcQ86AWIOgIAYaWgCZHvQnlYS%2BhU7wwxvsiFCBIH7o1VttXsxCZpkNsBQ7%2B1CFztUAQowezCzhH0zt3MBvZ%2B67xrmOCka8Z6OSXj41%2BfizJ8JbpbGJXcc5L3iUfWR%2BsWGJRSQ5EokCOF8MqRvTJQij73QKR3I%2BYiqwSI0lIj4ODfZ4OtgQrxGxpqNNMgEqhWVaGJVCUrDx%2BtXSxIgevNJ7DmnySWcUkRkQOmg0nuLbpxAsG9Osf03w%2BCn5ENGYI8Z39AlTI1olehQC%2BGLNYeAmp0CiG%2BKadsu6GyfmmXafRFBTDJFHOkXVUp5zrYvPCUo1ADNvqqPUZooEzxiC6K4Por0jQjHgNMdoR0li5ZgxqDBQ0V8SogDJICRG0ZMKljVtjbIeMCZE0JmCIoDcKZwv2QipFDYmYszZhLLmPN%2BZYG5dqEWYsxVS0MjLUlB1YVhP2bbFl9tEpa3Cbk/Wt80T3xKbgvWFzmXcsebAx2OT5nB1vh7Xe0LrLyP2XqvW0Sc6bPUoXJhLoqRl3BBXI%2BkREl1yOA3HV%2Bzza%2Bv1vkiphSVl929QPKN%2Bth6jz%2BePE1rt6mXU3uFFkEBc3VMTcvYNfhdnGrOcfHoF9QRUqcQKCKqQ2RVS9rVLCHqO5epeumY4eARqmDSqG5JnrrncNMgwt1QzKnDUtaNBh0a%2BFyI5nSvAu9IjgqwRmphTrIhxvYsWggWzd0ZV4Dut61at2qCDTWWxFhIYOOKk440pomBOkZbWLtndEr52TemEdRax0kInXNOZTCNpoBEGtImWgs4Jv4nOrQrKNphg6EfA98GO5FP/X02t5LrS2gKpMaG14aVEvMYSDt%2Bpr0PK1exIdd6bEWHsSR6%2BbJ3Sei5e4uqmdZREp7T68a5qcZsuJsTLlPLrVqstgKkOwrWbs05hSCVAtpXC2g6LB44tlMkrwz5VV4HXn%2BqMtSI%2BgGB3jvxncqh/H0gZJuWBy207Ih2ZGnZnDvby2%2BHTVWvh16PNrNOfh6CrGiqkdiBxwMaIQxofpTST9ni7a42s4TCTdtybSaM/CumiL5PQZFUpyWWLJWCxlZpuVunFVWKhdml1S7wnHAeCQFUTBiDoF5pqq1ND6JcqPhqi19HG7Lr8AF%2BSnzM2x2HJhv9XnJuAea8QVr7XOuDa7JG5ztqc2etaT3UtJ6Rs%2Bfoot5bHXwR%2BfCde2dUDgtktC/Wp9EWQCGs0tR2s162GIZuzlOtjgG1kYdYl0bhysHxQmz98lj62PUqzECOlPGsIbUavhCObUuz5kwMsK6WS0pI6bCj4RrU8jtUw3AwtH5aRYUAzE8db8p1bciHjsOzVCeR3ag02B30F4IaqWWybR655c9%2Bhj5Yu8ReC63r9buu9SdC8LatZVwVvlfUl4WkXlPmPmGONoUcLAqNozqv91QV406RCvCpd2qEIDPJEeby3BIatYTt4bVxhxZDpmd%2BVD2AAWD3MwLcu49gAVj9zYAPXurcf0p/qc3r6zQpsR99KDMHWU82HunjPmes/Dx5jjFD300PjjvTH/3sOcwJ5L2HuP76K/vZB3jCckEpBvgYNIIPUhSAsGkKYDvqBpBEzPTwKIohxALg3LQDv14pA97mG%2BQIIBvcAA4VJcCD972gHhvceFkIvj%2B3ug%2B0G94waQ3uO9d%2Bn736QHfBAgFMKQKfM/SBwFgEgNARKklkAoEW1A7%2B67EBQMwGwIvqYHfhKAwLKFKJQAMNIBPqQAMAoG1gYDAR3m/roK8AAPIsAMBIFSCwFYA65sB1zd4d74CMgOCFiYA364Ed7FCYDZzFgX7kCvC%2BTEGMB4ADAczEAGCaCuDIH34FjaDIEt6cwoD7wCCdADA36QBvjIgEB7gAjSAgr1iKScCD60C0A3roFcDX4j4SB0CkCtYYGZD8zNbEEt5t5n6sF95SBFC770R75ZyAHACqDL6mAqT4wQC4CEAkDpSyD0CqA8G/5Ai%2BH0IBFiGT5mFz4gCfwqQb7e6mCyCmDAGyAACcKRO%2BKRR%2BreUgp%2BpAghtAIBneVhV%2BQgt%2B9%2BZhT%2BMAiAIATM/QBA5AlAb%2B6QH%2B%2BhUw3h/%2B9AKoHM6QQhx%2BUg7eRRjB1hcgGhaoIoqgthH89h3ujhnMLh7h7hERF%2Bs%2BpA8%2Bq%2BKkQeHgG%2BmR%2B%2B2%2BH8pgKRHgfRuR5%2BPepA1h1%2BZRD%2Bze5hUg2hgxZxFx5Ryxb42Y5YLwC%2BQAA%3D%3D" rel="noreferrer">Complete unique_ptr-ized example</a></p>
    </div>