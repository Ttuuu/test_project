<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Avoid <code>using namespace std;</code>. This can easily lead to name clashes. While a recommendation in source files, absolutely no-go in header files(!).</p></li>
<li><p>It's a good idea to encapsulate the linked list into its own class. However, still anybody could modify the nodes in the list unsupervised, in worst case destroing the list or creating memory leaks. So nobody should be able to change the <code>next</code> pointer apart from <code>LinkedList</code> class. Solution: Make the pointer private and <code>LinkedList</code> a friend of <code>Node</code>; as then <code>Node</code> gets closely coupled to <code>LinkedList</code>, it would be more apprpriate to make the former a nested class of the latter.</p></li>
<li><p>Give <code>Node</code> class a constructor accepting the value and setting its successor node to nullptr - as your friend did. You don't need accessor functions, remember, you made LinkedList friend (see above). In contrast to your friend, use the constructors initialiser list, though: </p><pre>
Node::Node(int data, Node* next)
: data(data), next(next)
{ }</pre></li>
<li><p>What did you intend with <code>appendExistingNodesToTail</code>? It does exactly the same as <code>appendToTail</code>, the first parameter is unused and gets overwritten immediately. If you <em>intended</em> to append multiple nodes (then second parameter is not needed): Better accept another <code>LinkedList</code> as const reference and copy the internal data from.</p></li>
<li><p>In both forementioned functions you forgot to set length to one if the list was empty before. Easiest fix: move <code>length++</code> out of the else clause to the very end of the function.</p></li>
<li><p>You have <code>appendToTail</code> - for symmetry, I'd name the other function <code>prependToHead</code>.</p></li>
<li><p>You did not provide search/find function as your friend did; albeit it was just a helper function for your friend, it still would nicely fit into your linked list's interface.</p></li>
<li><p>You are re-inventing the wheel! While it might be a good <em>exercise</em>, once you're done with, switch over to <code>std::list&lt;int&gt;</code> (doubly linked) or <code>std::forward_list&lt;int&gt;</code> (singly linked).</p></li>
<li><p>Your friend's merge algorithm is broken: </p></li>
</ul>

<p>So far for the linked list...</p>

<ul>
<li><p><code>intersect</code> is the better name (describing the same, but much shorter).</p></li>
<li><p>Intersection: Assuming you have lists <code>{ 7 }</code> and <code>{ 7, 7 }</code>, then your friend's algorithm will output <code>{ 7 }</code> while yours will: <code>{ 7, 7 }</code>. If you swap arguments, both algorithms will output <code>{ 7, 7 }</code>, i. e. your friend's variant is <em>not</em> symmetric. Your variant, though, with <code>{ 7, 7 }</code> and <code>{ 7, 7 }</code> as arguments, will yield <code>{ 7, 7, 7, 7 }</code>! To avoid, you'd have to check if the current <code>head1</code> element has occured in the list before. But if you do so in the native approach, you'd get an O(n³) algorithm from one that already now is O(n²). So we should really look for better alternatives. If it is fine to modify the lists, you could sort both of them in advance, then finding duplicates is straight forward and O(n). If want to retain original order, you might operate on duplicates instead (possibly copy the data into arrays for faster access and saving memory).</p></li>
<li><p>... in theory at least. Actually, your friend's <code>intersect</code> algorithm is broken: after <code>node-&gt;insertAfter(node1);</code>, <code>node1</code>'s successor is whatever <code>node</code>s was before, and the rest of the linked list gets lost (leaking). From a point of view of design, it's not a good idea to change the input lists anyway. Your friend would need to create new nodes as you did.</p></li>
<li><p>Your friend's merge algorithm is broken as well, suffers from same bad usage of <code>insertAfter</code> as <code>intersect</code> does already. Additionally: Why do we need three pointers? We'd pass two lists, merge them into one single list, and best: return pointer to new head. Your friend's algorithm seemd to try to merge as <code>x[0], y[0], x[1], y[1], ...</code>. One could. But what's the benefit from? The lists are not sorted anyway, so one could just as well only <em>append</em> one to the other.</p></li>
</ul>

<p>My personal assessment: Albeit there are yet a few issues left open, you already did quite a good job on improving the original interface of your friend...</p>

<p>One final issue about your main:</p>

<pre><code>LinkedList* list1 = new LinkedList();
// ...
delete list1;
</code></pre>

<p>It is good that you <code>delete</code> what you <code>new</code>ed. You can avoid explicit deletion by usage of a smart pointer:</p>

<pre><code>std::unique_ptr&lt;LinkedList&gt; list1(new LinkedList());
</code></pre>

<p>but why <code>new</code> at all? Your class is not that big that you might risk to consume up too much of the stack, so just do:</p>

<pre><code>LinkedList  list1;
//        ^ no pointer!
</code></pre>

<p>This will create a variable with scope local to main function and as soon as the scope is left, the object is destroyed automatically (just as with the smart pointer; actually, the smart pointer works exactly the same, <code>delete</code>ing the object it points to in its destructor).</p>
    </div>