<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all your code reads rather nicely, and there are just minor adjustments regarding style. After those comments, I'd also like to take the opportunity to propose a better algorithm for finding these palindromes.</p>

<ul>
<li><em>Add space around expressions</em> – When assinging to left and right you do it on one line, which is neat, butpleaseaddspaces to increase readability. It is much better as <code>left, right = 0, len(string)</code>. Similar use <code>j -= 1</code>, and <code>if j &lt; left + 2:</code></li>
<li><em>Avoid shortening names</em> – Although <code>check_palin</code> saved you a few characters, please don't shorten the names. And unless within a tight loop, avoid single letter variable names, like <code>j</code></li>
<li><em>Use a set directly, instead of list</em> – You could initialize with <code>results = set()</code>, and use <code>results.add(temp)</code> to do all your work directly on a set instead of a list. And the return would then be <code>return list(set)</code></li>
<li><em>Consider using generators</em> – Given a really long text, you would need to hold all palindromes in memory, using generators you could eliminate that memory issue, but you might return palindromes you've returned before (i.e. 'ala' which appears twice)</li>
<li><em>Add docstrings to your functions</em> – Adding docstrings helps you remember what the function actually does, and also helps you to clarify what this method actually does or what it returns. If you don't have a clear vision of what to write in a docstring, you most likely don't really have a clear vision of what the function does either...</li>
</ul>

<h2>Another algorithm</h2>

<p>Your algorithm builds up all permutations of substrings in the given text, and checks each and every one of these are palindromes. This gives a lot of extraneous checks as you keep on checking not taking advantage of known information.  One option to get better response could be to check if the current word you're checking is already part of the results set, alongside with if you find a palindrome, then split it down into all the sub palindromes.</p>

<p>Another option is to switch the algorithm around, and make the loop go through each character in the text, and see if you've got a palindrome when extending with the left and right character of your current character. This way you'll stop checking when it's not a palindrome and don't waste time checking non-palindromes.</p>

<p>Here is that algorithm in working code: </p>

<pre><code>DEFAULT_TEXT = "racecarenterelephantmalayalam"

def all_palindromes(text=DEFAULT_TEXT):
    """Return list with all palindrome strings within text.

    The base of this algorithm is to start with a given character,
    and then see if the surrounding characters are equal. If they
    are equal then it's a palindrome and is added to results set,
    extend to check if the next character on either side is equal, 
    adding to set if equal, and breaking out of loop if not.

    This needs to be repeated twice, once for palindromes of 
    odd lengths, and once for palindromes of an even length."""

    results = set()
    text_length = len(text)
    for idx, char in enumerate(text):

        # Check for longest odd palindrome(s)
        start, end = idx - 1, idx + 1
        while start &gt;= 0 and end &lt; text_length and text[start] == text[end]:
            results.add(text[start:end+1])
            start -= 1
            end += 1

        # Check for longest even palindrome(s)
        start, end = idx, idx + 1
        while start &gt;= 0 and end &lt; text_length and text[start] == text[end]:
            results.add(text[start:end+1])
            start -= 1
            end += 1

    return list(results)


def main(text=DEFAULT_TEXT):
    print all_palindromes(text)
</code></pre>

<p>I runned your version, and mine version multiple times with a few various texts. With the default text you supplied your version used 440 µs, whilst mine used 27 µs (7 % of your time).  When tripling the length of the text, yours used approx 4 000 µs, whilst mine used 77 µs (2 %). Tripling the triplet, your used 15.7 ms, and mine used 151 µs (&lt;1 %).</p>

<p>As can be seen, your version is growing faster as you always check everything, whilst my version depends on actual number of palindromes in correlation to length of text. Somewhat imprecise one can say that your algorithm has a constant time complexity \$O(n^2)\$, whilst mine has \$O(n*m)\$ where \$n\$ is length of text, whilst \$m\$ is number of palindromes. As number of palindromes is usually quite a bit lower than length of text, my version tends to go towards \$O(n)\$, whilst your version remain constantly at \$O(n^2)\$.</p>
    </div>