<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer, I am not the best at pandas, and I'm absolutely sure there is a far more readable way to accomplish this, but the following will rid you of your for loop and nested if statements, which are slower than vectorized numpy/pandas operations.</p>

<p>Your filter <code>if 'MBTS' not in y</code> won't work the way you think it will, at least, given the limited sample input, as <code>y</code> is a Series made from the column <code>ser_one</code>, not <code>type</code>. Let's assume that's an easy fix so in pseudocode it should be something like:</p>

<pre><code>for x in df_one.ser_one:
    for y in df_two: # iterate through the rows so you get both columns
        if 'MBTS' not in y.type and x in y.ser_two:
            if 'L' not in y.ser_two:
                print(y)
</code></pre>

<p>This is a bit clunky, and pandas is great for vectorizing these sorts of operations, so let's filter it down to just <code>Series</code> operations. I'm working with a small part of your dataframes, so as a sanity check, they look like </p>

<pre><code>df_one
     ser_one  type
0   VUMX1234  MBTS
1   VUMX6436  MBTS
2   VUMX5745  MBTS
3   VUMX5802  MBTS
4   VUMX8091  MBTS
5   VUMX1234  XXXX
6  VUMX1234L  XXXX

df_two
     ser_two
0   VUMX8091
1  VUMX8091L
2   VUMX1234
3  VUMX1234L
4   VUMX5838
</code></pre>

<p>I added a few entries that were non-MBTS to fit your problem.</p>

<p>The first bit, you want to find where <code>'MBTS'</code> is not in <code>df_one.type</code>, but we want to filter the <em>entire</em> dataframe for that. <code>df.loc</code> will give you the rows that pass a given filter:</p>

<pre class="lang-py prettyprint-override"><code>df_one.loc[df_one['type'] == 'MBTS']
    ser_one  type
0  VUMX1234  MBTS
1  VUMX6436  MBTS
2  VUMX5745  MBTS
3  VUMX5802  MBTS
4  VUMX8091  MBTS

# or
df_one.loc[df_one['type'] != 'MBTS']
     ser_one  type
5   VUMX1234  XXXX
6  VUMX1234L  XXXX
</code></pre>

<p>Now you can check if the results of <code>ser_one</code> are contained within <code>ser_two</code>, since the output of that previous check is a <code>Series</code>, like so:</p>

<pre class="lang-py prettyprint-override"><code>df_one.loc[df_one['type'] != 'MBTS']['ser_one'].isin(df_two['ser_two'])
5    True
6    True
</code></pre>

<p>Just get the <code>.loc</code> back from that, and you should be left with two records in this example:</p>

<pre class="lang-py prettyprint-override"><code>df_one.loc[df_one.loc[df_one['type'] != 'MBTS']['ser_one'].isin(df_two['ser_two']).index]
     ser_one  type
5   VUMX1234  XXXX
6  VUMX1234L  XXXX
</code></pre>

<p>It might be a bit easier to do the filtering against any <code>ser_one</code> that contains <code>'L'</code> ahead of time:</p>

<pre class="lang-py prettyprint-override"><code>df_one[~df_one['ser_one'].str.contains("L")]
    ser_one  type
0  VUMX1234  MBTS
1  VUMX6436  MBTS
2  VUMX5745  MBTS
3  VUMX5802  MBTS
4  VUMX8091  MBTS
5  VUMX1234  XXXX
</code></pre>

<p>Now, combining all of that into one big gigantic horrible expression</p>

<pre class="lang-py prettyprint-override"><code>df_one.loc[df_one[~df_one['ser_one'].str.contains("L")].loc[df_one['type'] != 'MBTS']['ser_one'].isin(df_two['ser_two']).index]

    ser_one  type
5  VUMX1234  XXXX
</code></pre>

<p>The outer <code>loc</code> will take an array of index values as returned by the <code>.index</code> call near the end of the expression. The rest is just chained filters which are operations in native pandas, implemented in C and fast.</p>
    </div>