<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Are there any leaks in code re-usability? Leak in terms of ability to re-use code.</p>
</blockquote>

<p><strong>Namespace</strong></p>

<p>Function names like <code>pop()</code>, <code>push()</code> surely will collide.  Consider <code>StackPop()</code>, <code>StackPush()</code> ...</p>

<p><strong>Unnecessary include</strong></p>

<p><code>stack.h</code> does not need <code>#include"../list/list.h"</code>.  I'd expect to use <code>Stack</code> routines, code should be able to get by with the `stack.h and the various compiled objects.</p>

<blockquote>
  <p>How can I avoid declaring List multiple times in List.h?</p>
</blockquote>

<p>Just have one <code>typedef struct List List;</code></p>

<hr>

<p>Other</p>

<p><strong>Inadequate declaration</strong></p>

<p>As a <em>declaration</em> <code>();</code> gives not info about the allowed parameters, thus allowing <code>createStack(42);</code> with no warning.  Add <code>void</code>.</p>

<pre><code>// Stack* createStack();
Stack* createStack(void);
</code></pre>

<p><strong>Expected functions missing</strong></p>

<p>Counter-part to <code>Stack *createStack();</code> to deallocate resources like <code>StackCleanup(Stack *);</code></p>

<p>Something to test if the Stack is empty - perhaps <code>size_t StackSize(const Stack *);</code> or <code>bool  StackEmpty(const Stack *);</code></p>
    </div>