<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can substitute <code>return</code>ing <code>Promise</code> objects from functions for using callbacks as parameters to function, to chain <code>.then()</code> and <code>.catch()</code>. <code>Array.prototype.map()</code> and <code>Promise.all()</code> can be substituted for <code>jQuery.each()</code> which does not await the fulfillment of <code>Promise</code> objects iterated.</p>

<p>Which requires <code>return</code>ing the jQuery promise object from <code>storeGroupOnServer</code></p>

<pre><code>storeGroupOnServer = function(uuid, callback) {
    return $.post('saveGroup.php', {uuid:uuid},'json')
           .then(function(data) {
             return data.groupid;
           });
};
</code></pre>

<p>and returning a jQuery promise object of <code>Promise</code> from <code>createGroupDomNode</code></p>

<pre><code>createGroupDomNode = function(groupid, callback) {
    var cloner = $('#cloner');
    var newnode = cloner.clone(true);
    newnode.attr('id',groupid);
    newnode.removeClass('hide');
    cloner.after(newnode);
    return $.Deferred().resolve(newnode);
}
</code></pre>

<p>and awaiting <code>&lt;img&gt;</code> element <code>load</code> event </p>

<pre><code>function createNewChildDomNode(imgpath, groupdom){
    return $.Deferred(function(dfd) {
             imgnode = $('&lt;img/&gt;')
                       .on("load", dfd.resolve)
                       .on("error", dfd.reject)
                       .attr('src',imgpath);
             picnode = $('&lt;picture/&gt;').append(imgnode);
             $(groupdom).first().prepend(picnode);
           }).promise();
}
</code></pre>

<p>For example</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const data = {
  uuid: {
    1: 4,
    2: 5,
    3: 6
  }
};
const response = {
  4: "a",
  5: "b",
  6: "c"
};

const groupPromise = Promise.resolve(data.uuid[1]); // initial `Promise`
const arrayOfFiles = [Promise.resolve({
  fileInfo: {
    cdnUrl: 10
  }
}), Promise.resolve({
  fileInfo: {
    cdnUrl: 20
  }
}), Promise.resolve({
  fileInfo: {
    cdnUrl: 30
  }
})];

const storeGroupOnServer = (uuid) =&gt; {
  console.log({
    uuid
  });
  // `return` response `Promise`
  return Promise.resolve(response[uuid])
};

const createGroupDomNode = (groupid) =&gt; {
  console.log({
    groupid
  });
  // `return` `groupid`
  return Promise.resolve(groupid)
};
const createNewChildDomNode = (groupdom, {
  // destructure `cdnUrl` define as `imgpath`
  fileInfo: {
    cdnUrl: imgpath 
  }
}) =&gt; {
  console.log({
    imgpath,
    groupdom
  });
  // process `&lt;img&gt;` elements here
  // `return` resolved or rejected `Promise` 
  // at `load` or `error` event
  return Promise.resolve("done processing " + imgpath)
};
let handleFiles = (groupnode, file) =&gt; {
  console.log({
    groupnode,
    file
  });
  // handle each `file` `Promise`, pass `group` node to 
  // function passed to `.then()`
  return file.then(createNewChildDomNode.bind(null, groupnode))
};
const handleGroupDomNodes = (groupnode) =&gt; {
  console.log({
    groupnode
  });
  // use `Promise.all()`, `.map()` to process array of `Promise` objects
  return Promise.all(
    arrayOfFiles.map(handleFiles.bind(null, groupnode))
  )
};

groupPromise
.then(storeGroupOnServer)
.then(createGroupDomNode)
.then(handleGroupDomNodes)
.then(complete =&gt; console.log(complete)) // to illustrate chain completes
.catch(err =&gt; console.error(err)); // handle errors in chain</code></pre>
</div>
</div>

    </div>