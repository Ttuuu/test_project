<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can instead use a dictionary to define your <code>n</code> values:</p>

<pre class="lang-py prettyprint-override"><code>nums = {1: 'one', 2: 'two'}
</code></pre>

<p>Then, when you want to use this, you can use <code>.get()</code>. <code>.get()</code> has a default argument which is returned when a dict doesn't have a key you've requested; here we use <code>'many'</code> to be returned.</p>

<pre class="lang-py prettyprint-override"><code>def oneTwoMany(n):
    nums = {1: 'one', 2: 'two'}
    return nums.get(n, 'many')
</code></pre>

<p>If you really want to be concise you can stop defining <code>nums</code>:</p>

<pre class="lang-py prettyprint-override"><code>def oneTwoMany(n):
    return {1: 'one', 2: 'two'}.get(n, 'many')
</code></pre>

<p><em>As an aside to the downvoters of the question; it may be a simple question but I don't see how it breaks any rules.</em></p>

<p>EDIT: incorporating some other answers which (quite rightly) suggest catching certain invalid inputs.</p>

<pre class="lang-py prettyprint-override"><code>def oneTwoMany(n):
    if type(n) is not int:
        raise TypeError('Invalid input, value must be integer')
    elif n &lt; 1:
        raise ValueError('Invalid input, value is below 1')
    else:
        return {1: 'one', 2: 'two'}.get(n, 'many')
</code></pre>
    </div>