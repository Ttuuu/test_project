<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's tradeoffs. On one hand you get useful static methods in a toolbox, functions that don't accidentally show up in Excel's  IntelliSense in the formula bar. On the other hand, you could get the very same out of a standard module with <code>Option Private Module</code> specified, minus the possibility of client code mistakenly attempting to create a <code>New</code> instance of the class... and since class modules are either <code>Private</code> or <code>PublicNotCreatable</code>, the best way to implement this <code>Framework</code> namespace would be to have an Excel add-in VBA project named <code>Framework</code>, exposing these predeclared instances to whoever wants to consume its members. The cost for using classes is a <code>LongPtr</code> per instance - the actual size of that pointer depends on the bitness of the host application... and it's negligible.</p>

<p>The main difference between a class and a standard module is that you can pass an object reference to a procedure, but you can't pass a module; you can't declare a variable <code>As</code> that module "type", <code>New</code> it up (in the same VBA project, accidentally or not), or make it handle events or implement interfaces.</p>

<p>I think <em>framework</em>-level static/shared functions, in VBA, feel right at home in a standard module.</p>

<p>So you would reference the <code>Framework</code> add-in project, and then you'd do <code>?Framework.Collections.HasItem(items, item)</code>, and <code>?Collections.HasItem(items, item)</code> would also be legal, and yes, <code>?HasItem(items, item)</code> would be as well! ...unless the identifier is shadowed by a public member with the same name in a higher-priority referenced library, or in the referencing VBA project itself.</p>

<p>You would use classes in a <code>Framework</code> add-in to encapsulate some state - you could have a <code>ProgressIndicator</code> class exposed, for example, that registers a worker method that never needs to know anything about any <code>ProgressIndicatorForm</code>, and even less about any <code>MSForms.Label</code> control's <code>Width</code>. You'd have a <code>StringBuilder</code> class, a <code>FileWriter</code> class, a <code>SqlCommand</code> class - you want classes that represent &amp; encapsulate some data and implement some behavior, and modules that group related procedures together... but why not have a custom collection class (some <code>List</code> perhaps) that exposes all the things you ever dreamed a <code>Collection</code> could do, instead of a <code>CollectionUtilities</code> class/module?</p>

<p>Maybe it's just the "utilities" name ringing a "bag of whatever" ring to it, but having <code>Utilities</code> in the name of every module feels like redundant suffixing, I find.</p>

<p>You want an <code>@IgnoreModule ProcedureNotUsed</code> annotation at module level here, rather than having an annotation on every individual member - that way it's much easier to toggle it back on if you choose to leave that code as a bunch of modules to import in every new project (rather than an Excel add-in you'd reference): these Rubberduck inspection results are telling you which members can be removed from this particular project; no need to bloat up a project you're distributing with a whole framework!</p>

<p>It's not clear what the difference is between <code>IsIn</code> and <code>HasItem</code> functions - both feel like just slightly different solutions to the same problem (although I suspect you removed an <code>On Error Resume Next</code> from JKP's code, since that function can't return <code>False</code> without throwing error 9), and that makes a confusing API. I'd keep <code>HasItem</code> but swap the <code>IsObject</code> check for an <code>Err.Number = 0</code> check.</p>

<p>Variables could be declared closer to where they're used in a few places, especially in <code>TableRowToCollection</code>.</p>

<p>Since this is a framework, there's an opportunity for every public member to have a short <code>@Description</code> annotation comment, and for modules to have a <code>@ModuleDescription</code>.</p>

<p>Side note, it's "copyright", ...and this Q&amp;A post is licensed under CC-BY-SA as per Stack Exchange terms of service ;-) </p>
    </div>