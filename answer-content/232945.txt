<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We're missing any documentation or template constraints, but it appears that this code parses only decimal integers, and silently ignores anything after the first non-digit.  There are other departures from the interface of the functions provided in <code>&lt;charconv&gt;</code>:</p>

<ul>
<li>a leading <code>+</code> is accepted and ignored</li>
<li><del>not all out-of-range values are detected</del>.</li>
</ul>

<p><del>Worse, there's no prevention of signed integer overflow, so there's undefined behaviour on certain inputs.</del><br>
The avoidance of signed overflow is fragile and could be made clearer to the reader (with suitable <code>static_assert()</code> if <code>requires</code> isn't palatable, for instance).</p>

<p>I think that writing a function to multiply by 10 is taking functional decomposition a step too far.  I would say the same for subtracting <code>'0'</code>, but that could be arguable if it were home for a comment explaining how C++ guarantees that the characters <code>'0'</code>..<code>'9'</code> are encoded as contiguous values.</p>

<p>There are no tests for any of the failure cases, and all the tests have to be checked externally.  It's better to make <code>main()</code> return an error status unless all the tests pass (and diagnostic output should go to <code>std::clog</code> or <code>std::cerr</code> as appropriate, rather than <code>std::cout</code>).</p>
    </div>