<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code style</h2>

<ul>
<li>Its <code>"use strict";</code> not <code>'using-strict';</code></li>
<li>Use object function shorthand for object functions. eg you use <code>{ foo: function() {},}</code>can be <code>{foo(){},}</code></li>
<li>Avoid long lists of <code>if ... else if ...</code> by using lookups. (see example) </li>
<li><p>When defining functions that are available across the current scope, if they are arrow functions make them constants <code>const name = (foo) =&gt; {}</code> and put them at the top of the scope (manually hoist them). Or use a function declaration that is automatically hoisted for you. <code>function name(foo){}</code>. </p></li>
<li><p>Avoid using function expressions eg <code>var roll = function() {</code> should be <code>function roll() {</code></p></li>
<li><p>When you have variables that only differ by a post-fixed number, <code>dice1</code>, <code>dice2</code>, <code>dice3</code> that is a good sign that they can be better handled in an array. You can still give them names, but keeping an array referencing the same can simplify the code at times.</p></li>
<li><p>Use variable aliases to reduce noisy and verbose code. For example in the function <code>game.getScore</code> you are repeatedly referencing by literal index into <code>results</code>. If you assigned 3 aliases the code becomes a lot cleaner See example <code>game.roll</code> line starts with <code>const [r1, r2, r3] =</code>...</p></li>
<li><p>Why the expression <code>void dice.o.offsetWidth</code>? It does nothing but evaluate to <code>undefined</code>. You may as well have added the line <code>undefined;</code> in its place.</p></li>
</ul>

<h2>Code logic and design</h2>

<p>Your encapsulation of the abstracts used in the game can be improved. </p>

<p>The fundamental working unit is the dice yet you define its behavior all over the place rather than creating an object to encapsulate its state and behavior.</p>

<p>Then you have the <code>view</code> and the <code>game</code> with roles that are a little vague. <code>view</code> calling functions outside its encapsulation, and <code>game</code> creating a (view-able) <code>message</code> rather than setting a state that <code>view</code> would convert to a message.</p>

<h2>CSS, HTML, and animation</h2>

<p>I noticed that as the page width gets small the dice are overlapping. Adding a margin to the dice would separate them, however that would mean you have to change the layout a little.</p>

<p>For this reason and more, I am not reviewing the CSS and HTML as personally animating anything but the most basic FX is severally limiting when done via CSS and HTML. I would have opted for WebGL to render and JS to define and animate as it provides much more flexibility and quality, though I understand its not everyone's cup of tea.</p>

<h2>Example</h2>

<p>I have rewritten your code to better encapsulate the data and behavior.  As an example only and is not the only way to go about it. It's main purpose is to give examples of the points in this answer.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";
const LOSS = '123', WIN = '456';
const FACE_NAMES = ",top,left,front,back,right,bottom".split(",");
const dice = name =&gt; {
  const el = document.querySelector(".dice-" + name);
  const animate = name =&gt; (el.classList.remove(state), el.classList.add(name), name);
  var value, state = "idle";          
  return {
    get val() { return "" + value },
    roll() { value = Math.floor(6 * Math.random()) + 1 },
    show() { state = animate("show-" + FACE_NAMES[value]) },
    spin() { state = animate("spin") },    
  };
}
const game = {
  score: document.querySelector('.score'),
  dice: [dice("one"), dice("two"), dice("three")],
  roll() { 
    game.callEach("roll");
    game.callEach("spin");
    setTimeout(game.callEach ,820, "show");
    const [r1,r2,r3] = [game.dice[0].val, game.dice[1].val, game.dice[2].val].sort();
    if (r1 + r2 + r3 === WIN) { return `${WIN} You Win!` }
    if (r1 + r2 + r3 === LOSS) { return `${LOSS} You lose!` }
    if (r1 === r2 &amp;&amp; r2 === r3) { return `Trips! ${r1}` }
    if (r1 === r2) { return  `You scored: ${r3}` }
    if (r3 === r2) { return  `You scored: ${r1}` }
    return  "Roll Again";
  },
  callEach(call) { game.dice.forEach(dice =&gt; dice[call]()) },
  turn() {
    const message = game.roll();
    setTimeout(() =&gt; game.score.textContent = message, 1000);
  }
};
document.getElementById('roll').addEventListener('click', game.turn);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>* {
  box-sizing: border-box;
}

body {
  background: repeating-linear-gradient(#071a1e 0%, #274249) fixed;
  display: grid;
  grid-template-columns: 20% auto 20%;
  grid-template-rows: 25% auto 25%;
}

.score {
  grid-column: 2 / 3;
  grid-row: 1 / 2;
  place-self: center;
  color: gainsboro;
  font-size: 30pt;
  margin-bottom: 15px;
}

.scene {
  display: flex;
  justify-content: space-evenly;
  grid-column: 2 / 3;
  grid-row: 2 / 3;
}


.controls {
  grid-column: 2 / 3;
  grid-row: 3 / 4;
  place-self: center;
}

#roll {
  margin-top: 50px;
}
.dice-display {
    width: 150px;
    height: 150px;
    perspective: 450px;
    margin:26px;
}

.dice {
    width: 100%;
    height: 100%;
    position: relative;
    transform-style: preserve-3d;
    transform: translateZ(-75px);
    transition: transform 0.4s;
}

.dice-one {
}

.dice-two {
}

.dice-three {
}

.face {
    position: absolute;
    width: 150px;
    height: 150px;
    display: grid;
    grid-template-columns: 50px, 50px, 50px;
    grid-template-rows: 50px, 50px, 50px;
    border: 1px solid hsla(0, 100%, 50%, 0.2);
    color: whitesmoke;
    font-size: 24pt;
}

/* 3 */
.face-front {
    background: hsla(0, 100%, 50%, 0.6);
    transform: rotateY(0deg) translateZ(75px);
}

.front-pip-1 {
    grid-column: 3 / 4;
    grid-row: 1 / 2;
    place-self: center;
}
.front-pip-2 {
    grid-column: 2 / 3;
    grid-row: 2 / 3;
    place-self: center;
}
.front-pip-3 {
    grid-column: 1 / 2;
    grid-row: 3 / 4;
    place-self: center;
}

/* 4 */
.face-back {
    background: hsla(0, 100%, 50%, 0.6);
    transform: rotateY(180deg) translateZ(75px);
}

.back-pip-1 {
    grid-column: 1 / 2;
    grid-row: 1 / 2;
    place-self: center;
}

.back-pip-2 {
    grid-column: 3 / 4;
    grid-row: 1 / 2;
    place-self: center;
}

.back-pip-3 {
    grid-column: 1 / 2;
    grid-row: 3 / 4;
    place-self: center;
}

.back-pip-4 {
    grid-column: 3 / 4;
    grid-row: 3 / 4;
    place-self: center;
}

/* 5 */
.face-right {
    background: hsla(0, 100%, 50%, 0.6);
    transform: rotateY(90deg) translateZ(75px);
}

.right-pip-1 {
    grid-column: 1 / 2;
    grid-row: 1 / 2;
    place-self: center;
}

.right-pip-2 {
    grid-column: 3 / 4;
    grid-row: 1 / 2;
    place-self: center;
}

.right-pip-3 {
    grid-column: 2 / 3;
    grid-row: 2 / 3;
    place-self: center;
}

.right-pip-4 {
    grid-column: 1 / 2;
    grid-row: 3 / 4;
    place-self: center;
}

.right-pip-5 {
    grid-column: 3 / 4;
    grid-row: 3 / 4;
    place-self: center;
}

/* 2 */
.face-left {
    background: hsla(0, 100%, 50%, 0.6);
    transform: rotateY(-90deg) translateZ(75px);
}

.left-pip-1 {
    grid-column: 3 / 4;
    grid-row: 1 / 2;
    place-self: center;
}

.left-pip-2 {
    grid-column: 1 / 2;
    grid-row: 3 / 4;
    place-self: center;
}

/* 1 */
.face-top {
    background: hsla(0, 100%, 50%, 0.6);
    transform: rotateX(90deg) translateZ(75px);
}

.top-pip-1 {
    grid-column: 2 / 3;
    grid-row: 2 / 3;
    place-self: center;
}

.top-blank-1 {
    grid-column: 1 / 4;
    grid-row: 1 / 2;
    place-self: center;
}

.top-blank-2 {
    grid-column: 1 / 4;
    grid-row: 3 / 4;
    place-self: center;
}

/* 6 */
.face-bottom {
    background: hsla(0, 100%, 50%, 0.6);
    transform: rotateX(-90deg) translateZ(75px);
}

.bottom-pip-1 {
    grid-column: 1 / 2;
    grid-row: 1 / 2;
    place-self: center;
}

.bottom-pip-2 {
    grid-column: 1 / 2;
    grid-row: 2 / 3;
    place-self: center;
}

.bottom-pip-3 {
    grid-column: 1 / 2;
    grid-row: 3 / 4;
    place-self: center;
}

.bottom-pip-4 {
    grid-column: 3 / 4;
    grid-row: 1 / 2;
    place-self: center;
}

.bottom-pip-5 {
    grid-column: 3 / 4;
    grid-row: 2 / 3;
    place-self: center;
}

.bottom-pip-6 {
    grid-column: 3 / 4;
    grid-row: 3 / 4;
    place-self: center;
}
.idle {
  animation: idle linear infinite 6s;
}

@keyframes idle {
    from {
        transform: translateZ(-75px) rotateX(0deg) rotateY(0deg);
    }

    to {
        transform: translateZ(-75px) rotateX(360deg) rotateY(360deg);
    }
}

.spin {
	animation: spin 0.8s linear 1;
}

@keyframes spin {
  0% {
    -webkit-transform: translateZ(-75px) scale(1) rotate3d(-1, 1, 0, 0deg);
            transform: translateZ(-75px) scale(1) rotate3d(-1, 1, 0, 0deg);
  }
  50% {
    -webkit-transform: translateZ(-75px) scale(1.4) rotate3d(-1, 1, 0, 180deg);
            transform: translateZ(-75px) scale(1.4) rotate3d(-1, 1, 0, 180deg);
  }
  100% {
    -webkit-transform: translateZ(-75px) scale(1) rotate3d(-1, 1, 0, 360deg);
            transform: translateZ(-75px) scale(1) rotate3d(-1, 1, 0, 360deg);
  }
}

.show-top    { transform: translateZ(-75px) rotateX(-90deg); }
.show-front  { transform: translateZ(-75px) rotateY(   0deg); }
.show-right  { transform: translateZ(-75px) rotateY( -90deg); }
.show-back   { transform: translateZ(-75px) rotateY(-180deg); }
.show-left   { transform: translateZ(-75px) rotateY(  90deg); }
.show-top    { transform: translateZ(-75px) rotateX( -90deg); }
.show-bottom { transform: translateZ(-75px) rotateX(  90deg); }</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="score"&gt;Let's Roll&lt;/div&gt;
  &lt;div class="scene"&gt;
    &lt;div class="dice-display"&gt;
      &lt;div class="dice dice-one idle"&gt;
        &lt;div class="face face-front"&gt;
          &lt;div class="front-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="front-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="front-pip-3"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-back"&gt;
          &lt;div class="back-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="back-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="back-pip-3"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="back-pip-4"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-right"&gt;
          &lt;div class="right-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-3"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-4"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-5"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-left"&gt;
          &lt;div class="left-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="left-pip-2"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-top"&gt;
          &lt;div class="top-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="top-blank-1"&gt;&lt;/div&gt;
          &lt;div class="top-blank-2"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-bottom"&gt;
          &lt;div class="bottom-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-3"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-4"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-5"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-6"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="dice-display"&gt;
      &lt;div class="dice dice-two idle"&gt;
        &lt;div class="face face-front"&gt;
          &lt;div class="front-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="front-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="front-pip-3"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-back"&gt;
          &lt;div class="back-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="back-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="back-pip-3"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="back-pip-4"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-right"&gt;
          &lt;div class="right-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-3"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-4"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-5"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-left"&gt;
          &lt;div class="left-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="left-pip-2"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-top"&gt;
          &lt;div class="top-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="top-blank-1"&gt;&lt;/div&gt;
          &lt;div class="top-blank-2"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-bottom"&gt;
          &lt;div class="bottom-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-3"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-4"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-5"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-6"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="dice-display"&gt;
      &lt;div class="dice dice-three idle"&gt;
        &lt;div class="face face-front"&gt;
          &lt;div class="front-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="front-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="front-pip-3"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-back"&gt;
          &lt;div class="back-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="back-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="back-pip-3"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="back-pip-4"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-right"&gt;
          &lt;div class="right-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-3"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-4"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="right-pip-5"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-left"&gt;
          &lt;div class="left-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="left-pip-2"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-top"&gt;
          &lt;div class="top-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="top-blank-1"&gt;&lt;/div&gt;
          &lt;div class="top-blank-2"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="face face-bottom"&gt;
          &lt;div class="bottom-pip-1"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-2"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-3"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-4"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-5"&gt;&amp;#11044&lt;/div&gt;
          &lt;div class="bottom-pip-6"&gt;&amp;#11044&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="controls"&gt;
    &lt;button id="roll"&gt;Roll&lt;/button&gt;
  &lt;/div&gt;</code></pre>
</div>
</div>

    </div>