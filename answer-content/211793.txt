<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, I would say that the code is okay but the biggest thing that stands out is that it has <strong>A LOT</strong> of DOM queries, and while that may not slow things down much for a small DOM, it isn't very efficient. There are also some redundant callback functions that can be abstracted to a named function - e.g. the function that adds the class <code>show-text</code> to an element.</p>

<hr>

<p>As of the latest version of jQuery, the recommended syntax for the DOM ready callback has been simplified to just <code>$(function() {...})</code><sup><a href="https://api.jquery.com/ready" rel="nofollow noreferrer">1</a></sup>.</p>

<hr>

<p>Last year I read <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">this article about optimizing JavaScript</a> code and suggest that you take a look at it if you haven't already. I know it has a negative tone towards jQuery so ignore that if you plan to keep going with jQuery. The third sub-heading of that article is <strong>Cache DOM Lookups</strong>. You could store <code>$('.slide')</code> in a variable in the DOM-ready callback, as well as <code>$('.dot')</code> and <code>$('.button')</code> and use those when manipulating the DOM later. </p>

<hr>

<p>If you cache those jQuery collections then you can utilize jQuery methods like <a href="https://api.jquery.com/first" rel="nofollow noreferrer"><code>.first()</code></a>, <a href="https://api.jquery.com/last" rel="nofollow noreferrer"><code>.last()</code></a>, <a href="https://api.jquery.com/eq" rel="nofollow noreferrer"><code>.eq()</code></a> to filter the existing collections to particular nodes instead of running new DOM queries.</p>

<p>That means that these lines:</p>

<blockquote>
<pre><code>$(document).ready(function() {

  $('.slide:eq(-1)').addClass('last');
  $('.dot:first').addClass('active');
  $('.slide:first').addClass('active').delay($duration).queue(function() {
    $(this).addClass('show-text');
  });
  $('.slide:eq(1)').addClass('next');
</code></pre>
</blockquote>

<p>Could be transformed like this:</p>

<pre><code>var slides, dots, buttons;
$(function() { //DOM ready callback 
  slides = $('.slide');
  dots = $('.dot');
  buttons = $('.button');

  slides.last().addClass('last');   
  dots.first().addClass('active');  
  slides.first().addClass('active').delay($duration).queue(function() {
    $(this).addClass('show-text');
  });                               
  slides.eq(1).addClass('next');    
</code></pre>

<p>Those cached collections can also be used when adding the clock handlers to the elements with class names <em>dot</em> and <em>button</em>, which should also happen after the DOM is ready. </p>

<pre><code>  buttons.click(function moveSlide() {...});
  dots.click(function() {...});
</code></pre>

<hr>

<p>As far as associating a dot with a slide, you could utilize <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes" rel="nofollow noreferrer">data attributes</a> and then take advantage of the jQuery method <a href="http://api.jquery.com/data/" rel="nofollow noreferrer"><code>.data()</code></a> to get/set such values, but utilizing <a href="https://api.jquery.com/index" rel="nofollow noreferrer"><code>.index()</code></a> should be sufficient.</p>

<hr>

<p>As was mentioned above, the function to add class <code>show-text</code> to an element can be abstracted to a named function:</p>

<pre><code>function addShowTextClass() {
  $(this).addClass('show-text');
}
</code></pre>

<p>Then that can be used in places where that function appears - e.g. instead of </p>

<blockquote>
<pre><code>$('.slide:first').addClass('active').delay($duration).queue(function() {
  $(this).addClass('show-text');
});
</code></pre>
</blockquote>

<p>That can be updated to the following:</p>

<pre><code>$('.slide:first').addClass('active').delay($duration).queue(addShowTextClass);
</code></pre>

<p>As well as for this line in the dot click handler:</p>

<blockquote>
<pre><code>$('#slide' + GetIndex).addClass('active').delay($duration).queue(function() {
  $(this).addClass('show-text');
});
</code></pre>
</blockquote>

<p>And two more occurrences in the <code>moveSlide()</code> function can be updated as well.</p>

<hr>

<p>The constants could be declared using the <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> keyword <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a>, unless you need to support browsers that don't support that keyword. A common convention in JavaScript and many other languages is to use all uppercase letters for constants. While there isn't anything wrong with starting variables with a dollar sign, that is typically only found with jQuery source code and plugins, but not required. If you prefer to keep those then go ahead.</p>

<hr>

<p>The click handlers are added in two forms - </p>

<blockquote>
<pre><code>$('.dot').on('click', function() { // the dot click
</code></pre>
</blockquote>

<p>and </p>

<blockquote>
<pre><code>$('.button').click(function moveSlide() {
</code></pre>
</blockquote>

<p>There isn't anything wrong with using the shortcut in one place but not the other, though it is inconsistent. Why not use the same format in both places? Also, why name one but not the other?</p>

<p>I would suggest moving the functions out and then after assigning the DOM collections to variables in the DOM ready callback, add the click handlers using named functions:</p>

<pre><code>var dots, slides, buttons;

$(function() { //DOM ready callback - see next section for explanation
  slides = $('.slide');
  dots = $('.dot');
  buttons = $('.button');

  dots.click(dotClickHandler);
  buttons.click(moveSlide);

});

function dotClickHandler() { ...}
function moveSlide() {...}
</code></pre>

<hr>

<p>This line can be eliminated:</p>

<blockquote>
<pre><code>var $This = $(this);
</code></pre>
</blockquote>

<p>while that variable is used twice, it doesn't hurt anything to replace the two instances with <code>$(this)</code>...</p>

<hr>

<p>Lastly, there are quite <a href="https://codereview.stackexchange.com/search?q=jquery+slideshow">a few posts on this site involving jquery slideshows</a>. It may help you to look at some of those as well.</p>

<h3>Rewrite</h3>

<p>The code below uses the advice above. The id attributes were removed from the dots and the same could likely be done to the slide elements if desired.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// Globals
const CLASSES = 'last active show-text next';
const DELAY_DURATION = 1250;

function addShowTextClass() {
  $(this).addClass('show-text');
}
var dots, slides, buttons;

$(function() { //DOM ready callback - simplified format which is recommended in jQuery documentation
  slides = $('.slide');
  dots = $('.dot');
  buttons = $('.button');

  slides.last().addClass('last');
  dots.first().addClass('active');
  slides.first().addClass('active').delay(DELAY_DURATION).queue(addShowTextClass); 
  slides.eq(1).addClass('next');

  dots.click(dotClickHandler);
  buttons.click(moveSlide);
});


// Function for the pagination operation
function dotClickHandler() { // the dot click

  //var $This = $(this);
  // Match the index to the slide numbers
  var listIndex = $(this).closest('li').index();

  dots.removeClass('active').filter($(this)).addClass('active');

  slides.dequeue();
  slides.removeClass(CLASSES);

  // Show new active slide
  slides.eq( listIndex).addClass('active').delay(DELAY_DURATION).queue(addShowTextClass);
  // Add class to previous slide
  slides.eq((slides.filter('.active').index() - 1) % slides.length).addClass('last');
  // Add class to next slide
  slides.eq(( slides.filter('.active').index() + 1) % slides.length).addClass('next');

}

function moveSlide() {

  // Variables for moving slide
  var $active = slides.filter('.active');
  var $prevSlide = slides.eq(($active.index() - 1) % slides.length);
  var $afterPrevSlide = slides.eq(($active.index() - 2) % slides.length);
  var $nextSlide = slides.eq(($active.index() + 1) % slides.length);
  var $slideAfterNext = slides.eq(($active.index() + 2) % slides.length);

  // Variables for pagination
  var $tagNextDot = dots.eq($prevSlide.index()); 
  var $tagPrevDot = dots.eq($nextSlide.index()); 

  $active.dequeue();
  slides.removeClass(CLASSES)
  dots.removeClass('active');

  if ($(this).is("#prev")) {

    $active.addClass('next');
    $tagNextDot.addClass('active');
    $prevSlide.addClass('active').delay(DELAY_DURATION).queue(addShowTextClass);
    $afterPrevSlide.addClass('last');

  } else {
    $active.addClass('last');
    $tagPrevDot.addClass('active');
    $nextSlide.addClass('active').delay(DELAY_DURATION).queue(addShowTextClass);
    $slideAfterNext.addClass('next');
  }
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  font-size: 16px;
  font-family: 'Heebo', sans-serif;
  text-transform: uppercase;
  font-weight: 900;
}


/* Slides */

.slide-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  display: flex;
  overflow: hidden;
}

.slide {
  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  width: 70%;
  left: 140%;
  z-index: 0;
  transition: 1.25s;
  box-shadow: -10px 0px 21px -5px rgba(0, 0, 0, 0.5);
}

.slide h2 {
  display: none;
  color: #fff;
  text-shadow: 0px 0px 8px rgba(0, 0, 0, 0.5);
  letter-spacing: -2px;
  font-size: 3rem;
}

.slide.active.show-text h2 {
  display: block;
  animation: reveal-text 1.5s forwards;
}

@keyframes reveal-text {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

#slide1 {
  background: linear-gradient(to right, #ff416c, #ff4b2b);
}

#slide2 {
  background: linear-gradient(to right, #00b4db, #0083b0);
}

#slide3 {
  background: linear-gradient(to right, #59c173, #a17fe0, #5d26c1);
}

#slide4 {
  background: linear-gradient(to right, #ad5389, #3c1053);
}

.slide.last {
  left: 0;
  z-index: 0;
}

.slide.active {
  left: 0;
  z-index: 1;
}

.slide.next {
  left: 70%;
  z-index: 2;
}

.dots-wrapper {
  z-index: 10;
  list-style: none;
  padding-left: 0;
  position: absolute;
  bottom: 0;
  padding: 10px;
}

.dots-wrapper li {
  display: inline;
}

.dot {
  display: inline-block;
  width: 8px;
  height: 8px;
  border: 2px solid #fff;
  border-radius: 6px;
}

.dot.active {
  background-color: red;
  border-color: red;
}


/* Buttons */

.button-wrapper {
  display: flex;
  z-index: 10;
  width: 100%;
  justify-content: space-between;
  align-items: center;
}

.button {
  background-color: rgba(0, 0, 0, 0.45);
  color: #ddd;
  height: 40px;
  border: none;
  font-weight: bold;
  padding: 10px 20px;
  transition: 0.3s;
}

.button:hover {
  cursor: pointer;
  background: rgba(0, 0, 0, 0.85);
  color: #fff;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;div class="slide-wrapper"&gt;
  &lt;div id="slide1" class="slide"&gt;
    &lt;h2&gt;Slide One.&lt;/h2&gt;
  &lt;/div&gt;
  &lt;div id="slide2" class="slide"&gt;
    &lt;h2&gt;Slide Two.&lt;/h2&gt;
  &lt;/div&gt;
  &lt;div id="slide3" class="slide"&gt;
    &lt;h2&gt;Slide Three.&lt;/h2&gt;
  &lt;/div&gt;
  &lt;div id="slide4" class="slide"&gt;
    &lt;h2&gt;Slide Four.&lt;/h2&gt;
  &lt;/div&gt;
  &lt;div class="button-wrapper"&gt;
    &lt;button id="prev" class="button"&gt;Prev.&lt;/button&gt;
    &lt;button id="next" class="button"&gt;Next.&lt;/button&gt;
  &lt;/div&gt;
  &lt;ul class="dots-wrapper"&gt;
    &lt;li&gt;
      &lt;span class="dot"&gt;&lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class="dot"&gt;&lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class="dot"&gt;&lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class="dot"&gt;&lt;/span&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</code></pre>
</div>
</div>


<p><sup>1</sup><sub><a href="https://api.jquery.com/ready" rel="nofollow noreferrer">https://api.jquery.com/ready</a></sub></p>
    </div>