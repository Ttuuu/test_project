<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The simple things:</p>

<p>I'm assuming you don't have <code>Option Explicit</code> turned on. That's found in the menu under Tools&gt;Code Settings&gt;Require Variable Declaration. Turn that on it will add <code>Option Explicit</code> to the top of any new code modules, you'll need to retroactively add it to any existing modules. Once you've done that from the menu open Debug&gt;Compile {ProjectName} and you'll be alerted to the fact that your variable <code>Count</code> isn't declared anywhere. A prime example of why it's best to turn it on.</p>

<p>Any sub that doesn't have an access modifier is implicitly <code>Public</code>. Add that to your code <code>Public Sub InfoExtract()</code> to explicitly show you do want it to be public.</p>

<p>Your Do ... Loop is using <code>""</code> which is better replaced with <code>vbNullString</code>. This lets you know that your code is intentionally using a string without any contents instead of <code>"Foo"</code> where Foo was removed but the string quotes weren't.</p>

<p>I personally find having variables declared just before their use, rather than at the top, makes my code more readable. You have <code>xWS</code> declared but it's never used in your code... This is an example of why a wall of variable declarations at the top makes it easy to miss an unused variable.</p>

<p>Your variable names can be improved. Intead of <code>xPath</code>, <code>xWB</code> and <code>xWS</code> try <code>externalPath</code>, <code>externalWorkbook</code>, and <code>externalWorksheet</code>. <code>i</code>, <code>j</code>, and <code>k</code> don't tell you what they're used for. <code>i</code> --&gt; <code>populationRow</code>, <code>j</code> --&gt; <code>populationColumn</code> makes your code more descriptive as to what it's doing. Converting <code>ThisWorkbook.Worksheets(2)</code> to a descriptive variable name like <code>destinationSheet</code> will make your code more maintainable.</p>

<p>Usage of <code>Cells(7, 4).Value</code> is implicitly using the <code>Activesheet</code>. This can introduce unintended bugs without realizing it. If you do indeed want to use the Activesheet then qualify with <code>Activesheet.Cells()</code> avoiding any ambiguity. At the point in your code where you open a new workbook you can reference it with a variable <code>externalWorksheet</code> like so <code>Set externalWorksheet = externalWorkbook.ActiveSheet</code>. Now when populating <code>destinationSheet.Cells(populationRow, populationColumn).Value = externalWorksheet.Cells(7, 4).Value</code> you have fully qualified references doing just what they say they're doing.</p>

<hr>

<p>Not so simple things:</p>

<p>Your use of the <code>For ... Next</code> statement is essentially transposing a single column vertical range of cells into a single row. </p>

<pre><code>k = 11
Dim count As Long
For count = 1 To 13
    ThisWorkbook.Worksheets(2).Cells(i, j).Value = Cells(k, 5).Value
    j = j + 1
    k = k + 1
Next count

</code></pre>

<p><a href="https://docs.microsoft.com/en-us/office/vba/api/excel.range.pastespecial" rel="nofollow noreferrer">Range.PasteSpecial</a> takes care of that as shown below.</p>

<pre><code>Dim transposeSourceArea As Range
Set transposeSourceArea = externalWorksheet.Cells(11, 5).Resize(RowSize:=13)
transposeSourceArea.Copy

Dim transposeDestinationArea As Range
Set transposeDestinationArea = destinationSheet.Cells(populationRow, populationColumn + 2).Resize(ColumnSize:=transposeSourceArea.Rows.count)
transposeDestinationArea.PasteSpecial XlPasteType.xlPasteValues, Transpose:=True
</code></pre>

<hr>

<p>Your use of a comment "Captures the comments" is an indication that a dedicated sub is hiding right in front of you. Create a sub that describes what it's doing and has descriptive parameters.</p>

<pre><code>Private Sub CaptureComments(ByVal sourceSheet As Worksheet, ByVal populationSheet As Worksheet, ByVal inputRow As Long, ByVal inputColumn As Long)
</code></pre>

<p>Use that function by providing it arguments when you call it <code>CaptureComments destinationSheet, externalWorksheet, populationRow, populationColumn + 15</code> Within the body of the Sub procedure you can copy all of your code and begin to update it. Your original code is populating a cell then incrementing <code>j</code>. Instead of incrementing it after every cell population change it to be something like below and you'll see that you want it to span across a column.</p>

<pre><code>populationSheet.Cells(i, j).Value = ...
populationSheet.Cells(i, j + 1).Value = ...
...
populationSheet.Cells(i, j + 11).Value = ...
</code></pre>

<p>Since population is in a contiguous range you can use an array to do this. You'll need to pull the source values from their cells to populate the array. The static values of 3 and 4 are replaced with constants for maintainability. You'll need to come up with a descriptive name for them.</p>

<pre><code>Const thirdColumn As Long = 3
Const fourthColumn As Long = 4

Dim comments(0 To 11) As String
comments(0) = sourceSheet.Cells(24, fourthColumn).Value
comments(1) = sourceSheet.Cells(25, thirdColumn).Value
...
comments(11) = ...
</code></pre>

<p>The final population is done via <code>populationSheet.Cells(inputRow, inputColumn).Resize(ColumnSize:=UBound(comments) - LBound(comments) + 1).Value = comments</code></p>

<hr>

<p>Putting everything together. I may have missed a number or two but this should give you an idea. There's likely a better way to deal with the varying rows/columns in <code>CaptureComments</code> using a named range or three but without seeing the data I can only guess what they'd be called.</p>

<pre><code>Public Sub InfoExtract()
    Dim externalPath As String
    externalPath = "T:\PROJECTS\***\"

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    Dim file As String
    file = Dir(externalPath)
    Dim populationRow As Long
    populationRow = 2
    Do While file &lt;&gt; vbNullString
        Const populationColumn As Long = 3
        ActiveSheet.Cells(populationRow, 2).Value2 = file

        Workbooks.Open (externalPath &amp; file)
        Dim externalWorkbook As Workbook
        Set externalWorkbook = ActiveWorkbook

        Dim externalWorksheet As Worksheet
        Set externalWorksheet = externalWorkbook.ActiveSheet

        Dim destinationSheet As Worksheet
        Set destinationSheet = ThisWorkbook.Worksheets(2)

        destinationSheet.Cells(populationRow, populationColumn).Value = externalWorksheet.Cells(7, 4).Value
        destinationSheet.Cells(populationRow, populationColumn + 1).Value = externalWorksheet.Cells(8, 4).Value

        Dim transposeSourceArea As Range
        Set transposeSourceArea = externalWorksheet.Cells(11, 5).Resize(RowSize:=13)
        transposeSourceArea.Copy

        Dim transposeDestinationArea As Range
        Set transposeDestinationArea = destinationSheet.Cells(populationRow, populationColumn + 2).Resize(ColumnSize:=transposeSourceArea.Rows.count)
        transposeDestinationArea.PasteSpecial XlPasteType.xlPasteValues, Transpose:=True

        CaptureComments destinationSheet, externalWorksheet, populationRow, populationColumn + 15

        externalWorkbook.Close
        file = Dir

        populationRow = populationRow + 1
    Loop

    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub

Private Sub CaptureComments(ByVal sourceSheet As Worksheet, _
                            ByVal populationSheet As Worksheet, _
                            ByVal inputRow As Long, _
                            ByVal inputColumn As Long)
    Const thirdColumn As Long = 3
    Const fourthColumn As Long = 4

    Dim comments(0 To 11) As String
    comments(0) = sourceSheet.Cells(24, fourthColumn).Value
    comments(1) = sourceSheet.Cells(25, thirdColumn).Value
    comments(2) = sourceSheet.Cells(26, thirdColumn).Value
    comments(3) = sourceSheet.Cells(27, thirdColumn).Value

    comments(4) = sourceSheet.Cells(28, fourthColumn).Value
    comments(5) = sourceSheet.Cells(29, thirdColumn).Value
    comments(6) = sourceSheet.Cells(30, thirdColumn).Value
    comments(7) = sourceSheet.Cells(31, thirdColumn).Value

    comments(8) = sourceSheet.Cells(32, fourthColumn).Value
    comments(9) = sourceSheet.Cells(33, thirdColumn).Value
    comments(10) = sourceSheet.Cells(34, thirdColumn).Value
    comments(11) = sourceSheet.Cells(35, thirdColumn).Value

    populationSheet.Cells(inputRow, inputColumn).Resize(ColumnSize:=UBound(comments) - LBound(comments) + 1).Value = comments
End Sub
</code></pre>
    </div>