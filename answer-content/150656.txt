<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Time Measurements!</h1>
<p>I tested all of the other answers' code and want to publish the results. This might help compare the different implementations and maybe tell us something about how to optimize VB6 code.</p>
<p>To measure this, I let each function calculate all colors from <code>0</code> to <code>&amp;HFFFFFF</code>, once in an EXE compiled just for speed and once in one compiled with all optimizations. My system is an AMD Phenom II X4 960. In measurements on a modern i7, Cody's version was closer to <em>Unknown user</em>'s. The full source is <a href="http://pastebin.com/evrwTdCB" rel="nofollow noreferrer">here</a>.</p>
<h2>Results</h2>
<pre><code>Version           Optimized:  only for speed       for speed, PPro, all advanced
----------------------------------------------------------------------------------
Original                        40.101 s                   40.556 s
MatÂ´s Mug                       32.531 s                   32.154 s
Thunderframe                    27.007 s                   26.893 s
Comintern                        7.871 s                    7.738 s
Roland Illig                     5.905 s                    5.639 s
Cody Gray/Roland Illig           5.342 s                    5.300 s
Cody Gray                        3.389 s                    3.261 s
Unknown user                     2.815 s                    2.700 s
</code></pre>
<p>The <em>Cody Gray/Roland Illig</em> data set refers to Cody's solution but without the conditional. The difference to Roland's version is the use of integer division. The impact of just using the conditional is really enormous (2 s!); of course enumerating the colors in this order plays extremely well with branch prediction.</p>
<p>The <em>Unknown user</em> data set refers to the answer posted by a new user whose name I forgot. The answer got deleted, but I saved it and I feel it is a valuable addition to this question. It used a trick to calculate the actual hex chars from the RGB byte values, and I replicate it below.</p>
<p>Strangely, my original code, while of course being the slowest, was even slower with optimizations turned on. This was reproducable in every run, but overall the optimization effects are smaller than I expected.</p>
<h2><em>Unknown user</em>'s original answer</h2>
<blockquote>
<p>Here's a somewhat cryptic version of RgbToHex I just wrote to demonstrate that we can actually do it internally with minimal external function calls (should be just the fixed string to BSTR at the end requiring an external call, edit: unless the LSet memory copies are done externally...), no conditional branching, and no slow string manipulation.</p>
<p>It should offer decent performance for those reasons, but I haven't benchmarked it against the other excellent answers you've already got.</p>
</blockquote>
<pre><code> Type Struct_Color
    Color As Long
End Type

 Type Struct_RGBABytes
    R As Byte
    G As Byte
    B As Byte
    A As Byte
End Type

 Type Struct_RGBALongs
    R As Long
    G As Long
    B As Long
    A As Long
End Type

 Type Struct_FixedString6
    FixedLenStr As String * 6
End Type

Public Function RgbToHex(ByVal ColorRGB As Long) As String

    Dim InputColor                      As Struct_Color
    Dim InputRGBAccessor                As Struct_RGBABytes
    Dim OutputRGBAccessor               As Struct_RGBALongs
    Dim IntermediateOutput              As Struct_FixedString6

    Const LowerCaseHex                  As Boolean = False
    Const AsciiZero                     As Long = 48                        ' Asc("0")
    Const AsciiTenToAOffset             As Long = 7 + (LowerCaseHex * -32)  ' Asc("A") - (Asc("9") + 1) = 7
    Const HalfByteDivider               As Long = 16                        ' divider to do right shift by 4 bits
    Const LowerToUpperWordMultiplier    As Long = &amp;H10000

    InputColor.Color = ColorRGB                                 ' copy the RGB Long value to a simple struct container
    LSet InputRGBAccessor = InputColor                          ' memory copy of struct to allow access to the individual R/G/B values

    ' convert each R/G/B value to a DWORD/Long containing the equivalent of 2 unicode characters (the high and low bits of each byte, each converted to hex)
    OutputRGBAccessor.R = AsciiZero + (InputRGBAccessor.R \ HalfByteDivider) + (((InputRGBAccessor.R \ HalfByteDivider) \ 10) * AsciiTenToAOffset) + _
                            (AsciiZero + (InputRGBAccessor.R Mod HalfByteDivider) + (((InputRGBAccessor.R Mod HalfByteDivider) \ 10) * AsciiTenToAOffset)) * LowerToUpperWordMultiplier
    OutputRGBAccessor.G = AsciiZero + (InputRGBAccessor.G \ HalfByteDivider) + (((InputRGBAccessor.G \ HalfByteDivider) \ 10) * AsciiTenToAOffset) + _
                            (AsciiZero + (InputRGBAccessor.G Mod HalfByteDivider) + (((InputRGBAccessor.G Mod HalfByteDivider) \ 10) * AsciiTenToAOffset)) * LowerToUpperWordMultiplier
    OutputRGBAccessor.B = AsciiZero + (InputRGBAccessor.B \ HalfByteDivider) + (((InputRGBAccessor.B \ HalfByteDivider) \ 10) * AsciiTenToAOffset) + _
                            (AsciiZero + (InputRGBAccessor.B Mod HalfByteDivider) + (((InputRGBAccessor.B Mod HalfByteDivider) \ 10) * AsciiTenToAOffset)) * LowerToUpperWordMultiplier

    LSet IntermediateOutput = OutputRGBAccessor                 ' copy the unicode equivalent struct over into a fixed-length string
    RgbToHex = IntermediateOutput.FixedLenStr                   ' convert the fixed-length string on the stack into a real BSTR.

End Function
</code></pre>
    </div>