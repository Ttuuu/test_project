<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Focusing on the design:</p>

<ul>
<li><p>Despite the way the question is framed, it is not correct to use an inheritance hierarchy here. Vehicles have no difference in behaviour, and uniformly contain a license plate and size. The parking lot handles the parking logic for all sizes / types of vehicle, which is just fine.</p></li>
<li><p>Although vehicle objects are allocated on the heap, it doesn't look like they are ever deleted.</p></li>
<li><p>Parking spots do not use inheritance, so should not have a virtual destructor (the class could be made <code>final</code> to prevent inheritance). Parking spots can be stored by value, rather than allocated on the heap.</p></li>
<li><p>Storing the parking spot level, row and position inside the id string is error prone and duplicates data. If the level, row and position form a unique id, there's no need for a separate id string.</p></li>
<li><p>Failing to find a parking spot does not seem particularly "exceptional", the function could just return a boolean to indicate success.</p></li>
</ul>

<hr>

<p>Reading the parking data from file should be done in a separate function, rather than <code>main</code>. For example:</p>

<pre><code>vector&lt;vector&lt;pair&lt;int, SpotSize&gt;&gt;&gt; parkingSpotsData;

if (!readParkingSpotData("parkingSpots.in", parkingSpotsData)) {
    // throw error / use default data / use empty data
}

ParkingLot myParkingLot(parkingSpotsData);

...
</code></pre>

<hr>

<p>Use an enum for user action choices (at least on the code side), rather than a magic number.</p>

<p>The input / main loop should also use functions to properly separate functionality. e.g.:</p>

<pre><code>void runMainLoop(ParkingLot&amp; myParkingLot)
{
    while (true)
    {
        UserAction action = requestUserAction(); // UserAction is an enum.

        switch (action)
        {
        case UserAction::Park:
            doParkAction(myParkingLot); // requests vehicle type, and then parks it.
            break;
        case UserAction::Unpark:
            doUnparkAction(myParkingLot); // requests vehicle id and unparks it.
            break;
        case UserAction::Print:
            doPrintAction(myParkingLot);
            break;
        case UserAction::Exit:
            return;
        }
    }
}

...

    // in main...
    runMainLoop(myParkingLot);
</code></pre>

<p>This will make using <code>goto</code> unnecessary.</p>

<p>Note also that the <code>-1</code> choice in the original code may cause an attempt to dereference a null pointer.</p>

<hr>

<p>To better reflect on the scenario, the vehicle id should probably be entered by the user, rather than generated in the vehicle class. (Which will also make it necessary to check that a vehicle isn't already parked before parking it).</p>

<p>It might be a good idea for motorcycles to prefer smaller spots, so we don't park motorcycles in all of the large spots, and have nowhere for buses to go.</p>

<hr>
    </div>