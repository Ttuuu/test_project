<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Improvement to @ChrisWue and @Heslacher's solution</h1>

<p>I really like @ChrisWue and @Heslacher's solution but it's inefficient in that a ton of temporary <code>String</code>s get created with all the calls to <code>Substring</code>, and the same string gets rebuilt over and over and over again (as many <code>StringBuilder</code> objects as there are matches).</p>

<p>It ought to be possible with just one <code>StringBuilder</code>, like so:</p>

<pre><code>var builder = new StringBuilder();
int prevIndex = 0
foreach (var match in matches)
{
    builder.Append(toSearchInside, prevIndex, match.Index);
    builder.Append(replacement);
    prevIndex = match.Length;
}
builder.Append(toSearchInside, prevIndex, toSearchInside.Length - prevIndex);
</code></pre>

<p>Benefits: only one <code>StringBuilder</code>, no temporary <code>string</code>s.</p>

<h1>Improvement to @t3chb0t's solution</h1>

<p>I also was glad that @t3chb0t pointed to the <code>MatchEvaluator</code> solution as I thought it has a lot of promise. I was hoping to replace one of the deficiencies I've seen so far with all proposed solutions to date: the haystack string is scanned multiple times, once for each target word. Regular expressions have the <code>|</code> operator to scan for multiple things at once! After a bit of thought I came up with this:</p>

<pre><code>var MemoizedCreateReplacement = Memoize&lt;string, string&gt;(CreateReplacement);

// note, no start paren, and ending with '|' instead of close paren
string pattern = @"[:@?]{0}|"; 

StringBuilder sb;
sb.Append"(";
foreach(var toMatch in searchStrings)
{
    sb.AppendFormat(pattern,toMatch);
}
sb.chars[sb.Length-1]=")"; // replace last | with )
var regex = new Regex(sb.ToString());
regex.Replace(toSearchInside, m =&gt; MemoizedCreateReplacement(m.Groups[1].Value));
</code></pre>

<p>Benefits: Only one pass over the <code>toSearchInside</code> string. Only one <code>StringBuilder</code>; no temporary strings used in calls to it. Only one temporary <code>string</code> (for the <code>Regex</code>) and each replacement gets computed once, only if it's needed.</p>

<p><code>Memoize()</code> code, based on what I found <a href="http://explodingcoder.com/blog/content/painless-caching-memoization-net" rel="nofollow noreferrer">http://explodingcoder.com/blog/content/painless-caching-memoization-net</a> </p>

<pre><code>public static Func&lt;TArg, TResult&gt; Memoize&lt;TArg, TResult&gt;(Func&lt;TArg, TResult&gt; function) {
   return Memoize(function, new Dictionary&lt;TArg, TResult&gt;());
}

public static Func&lt;TArg, TResult&gt; Memoize&lt;TArg, TResult&gt;(Func&lt;TArg, TResult&gt; function, IDictionary&lt;TArg, TResult&gt; cache) {
   return delegate(TArg key) {TResult replacement; return cache.TryGetValue(key, out replacement) ? replacement : (cache[key] = function(key));};
}
</code></pre>
    </div>