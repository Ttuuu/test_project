<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Don't initialize dynamic character arrays with a character string.  I.e. don't, for an (implicitly) auto variable, write:</p>

<pre><code>char numbers [] = "1234567890";
</code></pre>

<p>As written, the array is copied from a constant to an automatic variable at run time.
Instead write:</p>

<pre><code>char *numbers = "1234567890";
</code></pre>

<p>Or better still:</p>

<pre><code>char const *const numbers = "1234567890";
</code></pre>

<p>Alternatively, move it outside the function to make it global, or declare it static (in which case the array is initialized at compile and load time).  Thus, it is also reasonable to write something like:</p>

<pre><code>static char const numbers[] = "1234567890";
</code></pre></li>
<li><p>Don't use <code>rand()</code> and <code>srand()</code>.  They really are just to old and decrepit.  At the very least, use <code>rand48()</code> and <code>srand48()</code>.  Better still, find a cryptographic grade random number generator and use that.   This goes along with a previously mentioned "don't use <code>scanf()</code>".  (There are a few other functions you shouldn't touch, like <code>gets()</code>.)</p></li>
<li><p>If you try to develop this more fully, you may start getting extra restrictions, like don't use both "0" and "O", or both "1" and "l".  These two are about eliminating confusing characters.  Another might be to change the symbol set, as many sites use restricted symbol sets.   (And I note you already eliminated ", ', `, and ; yourself.)  Thus, I suggest dynamically building a single list of acceptable characters, and using a dynamic length for said list.</p></li>
<li><p>Personally, I've always like generating passwords by generating cryptographic-grade random characters (i.e. 8 bit samples) and then discarding unacceptable (unprintable) characters.  I'm sure there are reasons why this isn't good.</p></li>
</ol>
    </div>