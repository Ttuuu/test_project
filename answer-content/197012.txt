<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>Just some basic stuff, will add more later.</p>
</blockquote>
<h1>Strings</h1>
<p>The implementation uses a lot of hard-coded strings and is inconsistent regarding their encodings. Some strings are "normal" ASCII ones whereas others are wide strings. This might cause a lot of unforeseen problems.</p>
<h1>Randomness</h1>
<p><code>utility::get_random</code> might actually always return the same result for the same inputs. Depending on the standard library implementation, <code>std::random_device</code> might return the same sequence for each created object.</p>
<p>Since <code>utility::get_random</code> always creates a new object this basically "resets" the sequence for those implementations. (It's conceptually equivalent to <code>srand(0); /* do something with */ rand();</code>).</p>
<p>This can be fixed by marking <code>rd</code> as <code>static</code> so it only gets instantiated once. (And while we're at it, it might make sense to make <code>mt</code> <code>static</code> as well, since its construction is quite costly).</p>
<h1>Variable naming</h1>
<p>Many variables have very short and very cryptic names. This makes reasoning about code a lot harder than it has to be. Trying to understand the code gets interrupted by questions like "What is the difference between <code>s</code> and <code>ss</code>?", where a better choice of names would make their usage obvious.</p>
<h1>Magic numbers/strings</h1>
<p>There are very many hard-coded strings and numbers, and not always is it obvious what they are meant for.</p>
<p>Example:</p>
<pre><code>settings{ 10, L"spanish", L"german", 0, 15 } // taken from the menu constructor
</code></pre>
<p>It isn't obvious at all what all those values represent. Compare this with:</p>
<pre><code>settings{ threshold, source_lang, target_lang, colors::black, colors::white }
</code></pre>
<p>With this, I as a reader of the code don't have to guess what all those values mean.</p>
<h1>Other stuff</h1>
<ul>
<li>Nearly all the work is done in the <code>menu</code> constructor. This makes it very hard to reuse or even test that class.</li>
</ul>
    </div>