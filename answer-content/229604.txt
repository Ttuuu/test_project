<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>In-place sort</h2>

<p>Your <code>selection_sort</code> is an in-place sort, so there's no need to return the same list you were given. In fact, returning the list is confusing, because it somewhat implies that you would be returning something different from what you were given. You can just drop the return, here and in similar functions.</p>

<h2>Failure modes</h2>

<pre><code>if sublist_increment // 2 == 0:
    print("Please select an odd number for sublist incrementation. ")
    return
</code></pre>

<p>This has issues. You're printing - but what if the caller doesn't want you to print? You're returning <code>None</code> - but what if the caller wants to catch an exception and try with different input? You should be <code>raise</code>ing an exception here, not printing and returning <code>None</code>.</p>

<h2>Don't repeat yourself</h2>

<pre><code># Tests the Selection Sort Algorithm:
print("---------------------------------")
print(f"Selection Sort (Integer): {selection_sort(TEST_LIST_INTEGER.copy())}")
print(f"Selection Sort (Float): {selection_sort(TEST_LIST_FLOAT.copy())}")

# Tests the Optimized Bubble Sort Algorithm:
print("---------------------------------")
print(f"Optimized Bubble Sort (Integer): {optimized_bubble_sort(TEST_LIST_INTEGER.copy())}")
print(f"Optimized Bubble Sort (Float): {optimized_bubble_sort(TEST_LIST_INTEGER.copy())}")
# Tests the Bubble Sort Algorithm:
print("---------------------------------")
print(f"Bubble Sort (Integer): {bubble_sort(TEST_LIST_INTEGER.copy())}")
print(f"Bubble Sort (Float): {bubble_sort(TEST_LIST_INTEGER.copy())}")
# Tests the Insertion Sort Algorithm:
print("---------------------------------")
print(f"Insertion Sort (Integer): {insertion_sort(TEST_LIST_INTEGER.copy())}")
print(f"Insertion Sort (Float): {insertion_sort(TEST_LIST_INTEGER.copy())}")

# Tests the Shell Sort Algorithm:
print("---------------------------------")
print(f"Shell Sort (Integer): {shell_sort(TEST_LIST_INTEGER.copy(), 5)}")
print(f"Shell Sort (Float): {shell_sort(TEST_LIST_INTEGER.copy(), 5)}")
</code></pre>

<p>This should be a loop that executes five times. You can iterate over a tuple that contains entries for</p>

<ul>
<li>the name of the sorting algorithm, and</li>
<li>a reference to a wrapper function that passes arguments in addition to <code>TEST_LIST</code></li>
</ul>

<h2>Tests</h2>

<p>It seems that there's either a bug or an unimplemented mechanism, because there is no difference between the "integer" and "float" tests. They're all integer tests.</p>

<p>Also, these are only tests in the sense that a developer has to use their eyeballs and verify the output manually. You should consider writing real automated tests: pass methods a known input (as you already do), and assert that the output is equal to expected output.</p>
    </div>