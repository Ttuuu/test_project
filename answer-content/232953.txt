<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The solution I'm proposing is based on these rules and examples, so I suppose a generic message contains words of length more than 1 character and composed of letters and numbers. The edge cases like empty strings or others to pass other tests on the site can be added to my code.
My class contains a <code>main</code> method  including the tests:</p>

<pre><code>public class NewEnpc {

    public static void main(String[] args) {
        assertEquals(encryptThis("Hello"), "72olle");
        assertEquals(encryptThis("good"), "103doo");
        assertEquals(encryptThis("hello world"), "104olle 119drlo");
    }
}
</code></pre>

<p>The method <code>encryptThis</code> splits the message by space into words, encrypts every single word and finally return the encrypted message: this can be done like the code below:</p>

<pre><code>public static String encryptThis(String message) {
    String sep = " ";
    String[] words = message.split(sep);
    StringJoiner joiner = new StringJoiner(sep);

    for (String word : words) {
        String encryptedWord = encryptWord(word);
        joiner.add(encryptedWord);
    }

    return joiner.toString();
}
</code></pre>

<p>I used the class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html#StringJoiner-java.lang.CharSequence-" rel="nofollow noreferrer">StringJoiner</a> to obtain the encrypted message.
The method encryptWord takes a word as a parameter and encrypt it using rules I quoted at the beginning of my answer:</p>

<pre><code>private static String encryptWord(String word) {
    char[] arr = word.toCharArray();
    final int n = arr.length;
    int asciiFirstChar = arr[0];
    char secondChar = arr[n - 1];
    char lastChar = arr[1];

    StringBuilder builder = new StringBuilder(Integer.toString(asciiFirstChar));
    builder.append(secondChar);
    builder.append(word.substring(2, n - 1));
    builder.append(lastChar);

    return builder.toString();
}
</code></pre>

<p>Below all the code of the class:</p>

<pre><code>public class NewEnpc {

    public static void main(String[] args) {
        assertEquals(encryptThis("Hello"), "72olle");
        assertEquals(encryptThis("good"), "103doo");
        assertEquals(encryptThis("hello world"), "104olle 119drlo");
    }

    public static String encryptThis(String message) {
        String sep = " ";
        String[] words = message.split(sep);
        StringJoiner joiner = new StringJoiner(sep);

        for (String word : words) {
            String encryptedWord = encryptWord(word);
            joiner.add(encryptedWord);
        }

        return joiner.toString();
    }

    private static String encryptWord(String word) {
        char[] arr = word.toCharArray();
        final int n = arr.length;
        int asciiFirstChar = arr[0];
        char secondChar = arr[n - 1];
        char lastChar = arr[1];

        StringBuilder builder = new StringBuilder(Integer.toString(asciiFirstChar));
        builder.append(secondChar);
        builder.append(word.substring(2, n - 1));
        builder.append(lastChar);

        return builder.toString();
    }

}
</code></pre>
    </div>