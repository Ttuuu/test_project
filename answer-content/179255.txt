<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Switch to the native DOM methods like getElementById, which is orders of magnitude faster and you can keep <code>input</code>:</p>

<pre><code>$('[data-equal-to]').on('input', function() {
  var target = document.getElementById(this.dataset.equalTo);
  var isEqual = !target || target.value == this.value;  
  this.setCustomValidity(isEqual ? '' : this.dataset.msgError);
});
</code></pre>

<p>You can also debounce the verification by 200ms, for example:</p>

<pre><code>;(function() {
  var timeout;

  function validateEquality(element) {
    var target = document.getElementById(element.dataset.equalTo);
    var isEqual = !target || target.value == element.value;  
    element.setCustomValidity(isEqual ? '' : element.dataset.msgError);
  }

  $('[data-equal-to]').on({
    input: function() {
      clearTimeout(timeout);
      timeout = setTimeout(validateEquality, 200, this);
    }),
    blur: function() {
      clearTimeout(timeout);
      validateEquality(this);
    }),
  });
})();
</code></pre>

<p>You can also make this a jQuery plugin.</p>

<hr>

<p>As for mirroring the check for the target element, the preferable approach is to explicitly declare <code>data-equal-to</code> attribute on both input elements that points to the other one. But you can also do it implicitly by adding <code>equalOf</code> expando property pointing to the linked element so you can re-triggering <code>input</code> event on it:</p>

<pre><code>$('[data-equal-to]')
  .on('input', function() {
    var target = document.getElementById(this.dataset.equalTo);
    var isEqual = !target || target.value == this.value;  
    this.setCustomValidity(isEqual ? '' : this.dataset.msgError);
  })
  .map(function() {
    var target = document.getElementById(this.dataset.equalTo);
    target.equalOf = this;
    return target;
  })
  .on('input', function() {
    $(target.equalOf).trigger('input');
  });
</code></pre>
    </div>