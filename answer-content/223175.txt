<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based on your question, a similar question I asked yesterday, and some of the answers, I did a version that tries to have the benefits of all of them.</p>

<p>Disclaimer:  Code is GCC specific (although probably works in similar compilers such as Clang).</p>

<p>Usage:</p>

<pre class="lang-c prettyprint-override"><code>int *p;

/* Want &gt;int p[47];&lt; */
if (mallocs(&amp;p, 47))
        goto err;
...
free(p);
</code></pre>

<p>Properties:</p>

<ul>
<li>Avoid having to type <code>sizeof</code></li>
<li>Can be used inside an <code>if</code></li>
<li>Returns an <code>int</code> error code</li>
<li>Check for invalid input pointer: <code>mallocs(NULL, 47) == EINVAL</code></li>
<li>Check for negative nmemb: <code>mallocs(&amp;p, -47) == -EOVERFLOW</code> (and <code>p</code> set to <code>NULL</code>)</li>
<li>Check for overflow due to high nmemb: <code>mallocs(&amp;p, TOO_HIGH) == EOVERFLOW</code> (and <code>p</code> set to <code>NULL</code>)</li>
<li>Check for <code>malloc</code> error: <code>mallocs(&amp;p, 47) == ENOMEM</code> (and <code>p</code> set to <code>NULL</code>) (correct input, but malloc fails for some reson)</li>
<li>Sets <code>errno</code> on any failure (malloc shall set errno on failure, so if this is going to be in a library, it would make sense to set errno on failure too)</li>
<li>I don't need a pointer to a pointer given that this is a macro, but I think a user that doesn't know this would probably be happier passing a pointer to a pointer, and keep thinking it is a function :)  I would have to read the code if some tells me that (what looks like) a function call modifies a pointer without a pointer to it.</li>
<li>Prevents double evaluation of arguments</li>
<li>Removes the possibility that someone may cast the result of malloc</li>
</ul>

<p>Code:  (Edited: This code has problems; at the end of the answer is the fixed one)</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;errno.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stdlib.h&gt;


/*
 * int  mallocs(type **restrict p, ptrdiff_t nmemb);
 */
#define mallocs(ptr, nmemb)     (                                       \
{                                                                       \
        ptrdiff_t   nmemb_  = (nmemb);                                  \
        __auto_type ptr_    = (ptr);                                    \
        int         err_;                                               \
                                                                        \
        err_    = 0;                                                    \
        if (ptr_ == NULL) {                                             \
                errno   = EINVAL;                                       \
                err_    = EINVAL;                                       \
                goto ret_;                                              \
        }                                                               \
        if (nmemb_ &lt; 0) {                                               \
                *ptr_   = NULL;                                         \
                errno   = EOVERFLOW;                                    \
                err_    = -EOVERFLOW;                                   \
                goto ret_;                                              \
        }                                                               \
        if (nmemb_ &gt; (PTRDIFF_MAX / (ptrdiff_t)sizeof(**ptr_)) {        \
                *ptr_   = NULL;                                         \
                errno   = EOVERFLOW;                                    \
                err_    = EOVERFLOW;                                    \
                goto ret_;                                              \
        }                                                               \
                                                                        \
        *ptr_   = malloc(sizeof(**ptr_) * nmemb_);                      \
        if (*ptr_ == NULL)                                              \
                err_    = ENOMEM;                                       \
ret_:                                                                   \
        err_;                                                           \
}                                                                       \
)
</code></pre>

<p>I named it <code>mallocs</code> (<strong>malloc s</strong>afe)</p>

<hr>

<p><strong>EDIT:</strong></p>

<p>After finding that the code above <a href="https://stackoverflow.com/a/56825345/6872717">can only be called once in a function</a>, I improved it making use of an <code>inline</code>.  Now there is the possibility to call the function or the macro, depending on your preferences (both can be called multiple times):</p>

<pre class="lang-c prettyprint-override"><code>#include &lt;errno.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stdlib.h&gt;


#define mallocs(ptr, nmemb) (                               \
{                                                           \
        __auto_type     ptr_    = (ptr);                    \
                                                            \
        *ptr_   = mallocarray((nmemb), sizeof(**ptr_));     \
                                                            \
        !(*ptr_);                                           \
}                                                           \
)


inline
void    *mallocarray(ptrdiff_t nmemb, size_t size);


inline
void    *mallocarray(ptrdiff_t nmemb, size_t size)
{

    if (nmemb &lt; 0)
        goto ovf;
    if (nmemb &gt; (PTRDIFF_MAX / (ptrdiff_t)size))
        goto ovf;

    return  malloc(size * nmemb);
ovf:
    errno   = EOVERFLOW;
    return  NULL;
}
</code></pre>

<p>I named <code>mallocarray()</code> after the BSD extension <a href="https://man.openbsd.org/reallocarray" rel="nofollow noreferrer"><code>reallocarray()</code></a></p>
    </div>