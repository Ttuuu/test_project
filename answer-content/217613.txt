<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Both <code>pandas.Series</code> and <code>pandas.Index</code> have vectorized string additions. You can just do:</p>

<pre><code>to_emojize = pd.Series(":" + coef_mat_emoji.index + ":")
coef_mat_emoji.index = to_emojize.apply(emoji.emojize, use_aliases=True)
</code></pre>

<p>Note that <code>pandas.Series.apply</code> passes any additional keyword arguments along to the function, so there is no need for the <code>lambda</code> here at all.</p>

<p>This will create an intermediate series from the first addition, which might not be the most memory efficient way to do this. But it is the easiest and most readable, so unless you run out of memory with this, this is what I would use.</p>

<p>Alternatively you could put it all into one <code>apply</code> call (Python 3.6+ for <code>f-string</code>s):</p>

<pre><code>coef_mat_emoji.index = pd.Series(coef_mat_emoji.index).apply(
                        lambda x: emoji.emojize(f":{x}:", use_aliases=True))
</code></pre>

<p>You would have to timeit with your actual data to see if this is any faster. It might be that the call to <code>emoji.emojize</code> will dominate anyway.</p>
    </div>