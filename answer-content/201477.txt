<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>What you did right</h3>

<p>It's good that you designed an object,
and that you separated some operations to functions.
I think it would be good to go further:
more dedicated objects,
smaller functions,
helper functions.
More on all that below.</p>

<h3>Decompose to smaller functions</h3>

<p>The <code>playerTurn</code> function looks really complex,
with deeply nested code:
a <code>while (true)</code> outer loop,
and then nested conditionals.</p>

<p>Try to split to smaller steps. The steps performed by this function:</p>

<ol>
<li>Find randomly an available position</li>
<li>Mark the player's symbol on the board</li>
<li>Check if the game is over</li>
</ol>

<p>If you move the first step to a dedicated function,
you get a much simpler loop:</p>

<pre><code>findEmptyPos: function() {
    while (true) {
        let pos = Pos.create(randomInt(3), randomInt(3));
        if (this.board.isEmpty(pos)) return pos;
    }
}
</code></pre>

<p>Thanks to this new function,
the <code>playerTurn</code> will no longer have a complex <code>while</code> loop in it.</p>

<p>Note that I extracted the repeated <code>Math.floor(Math.random() * 3)</code> calls to a helper function call <code>randomInt(3)</code>.
It's good to avoid duplicated code, much less to type, and with good descriptive names, easier and less to read.</p>

<p>I also replaced other elements:</p>

<ul>
<li><p>Position used to be represented as an array of two elements. It worked, but it's a lazy solution with several flaws: the index 0 and 1 by themselves don't mean anything, and also nothing prevents you from assigning to other indexes. It probably makes sense to create a proper <code>Pos</code> abstraction, with <code>row</code> and <code>col</code> fields. Those fields will have meaning thanks to their names.</p></li>
<li><p>The check if a position is empty used verbose code like <code>this.board[pos[0]][pos[1]] == ""</code>, comparing to a hardcoded value.
Instead of that, it's better to have a <code>Board</code> abstraction with an <code>isEmpty</code> function, that would encapsulate and hide the implementation detail that "empty" is represented as an empty string.</p></li>
</ul>

<p>Lastly in the <code>playerTurn</code> function,
this snippet is a bit unfortunate:</p>

<blockquote>
<pre><code>if ( this.isWinningCombination( player.symbol, this.board ) ) {
    console.log( this.currentPlayer.name + " win!" )
    this.playAgainDialogue();
} else if ( this.isDraw( this.board ) ) {
    console.log( "It's a draw" );
    this.playAgainDialogue();
}
this.currentPlayer = this.currentPlayer == this.player1 ? this.player2 : this.player1;
</code></pre>
</blockquote>

<p>That is,
why let the <code>this.currentPlayer</code> switch take place after calling <code>this.playAgainDialogue();</code>?
It doesn't seem to make sense,
and that the <code>if</code> and <code>else if</code> there should have had a <code>break</code>.</p>

<h3>Short-circuit evaluation</h3>

<p>This may seem kind of clever, but it's not:</p>

<blockquote>
<pre><code>return [ // Rows
    board[ 0 ][ 0 ] === symbol &amp;&amp; board[ 0 ][ 1 ] === symbol &amp;&amp; board[ 0 ][ 2 ] === symbol,
    board[ 1 ][ 0 ] === symbol &amp;&amp; board[ 1 ][ 1 ] === symbol &amp;&amp; board[ 1 ][ 2 ] === symbol,
    board[ 2 ][ 0 ] === symbol &amp;&amp; board[ 2 ][ 1 ] === symbol &amp;&amp; board[ 2 ][ 2 ] === symbol,

    // Columns
    ...
].
includes( true );
</code></pre>
</blockquote>

<p>The problem is that <em>all</em> the conditions in the array are computer,
<em>and then</em> the <code>includes(...)</code> will return when it finds the first that was <code>true</code>. That's too late.
If instead of creating an array,
you had chained the conditions with <code>||</code> then short-circuiting would apply,
and once there is a match (any winning row, or column, etc),
the remaining conditions would not be evaluated.</p>

<h3>Benefit more from <code>this</code></h3>

<p>Some parameters are passed around to functions,
most noticeably <code>this.board</code>,
when those functions could access the board via <code>this.board</code>.
You can safely remove such parameters and access the values directly.</p>

<h3>Simplify printing</h3>

<p>The printing of the board is very tedious and error-prone.
Let's take a closer look at this:</p>

<blockquote>
<pre><code>// First row
display += board[ 0 ][ 0 ] == "" ? "  " : ` ${board[0][0]}`;
display += "|";
display += board[ 0 ][ 1 ] == "" ? " " : `${board[0][1]}`;
display += "|";
display += board[ 0 ][ 2 ] == "" ? "  \n" : `${board[0][2]}\n`;
</code></pre>
</blockquote>

<p>For <code>board[0][0]</code> there is a space prefix in both branches of the ternary.
For <code>board[0][2]</code> there is a <code>\n</code> in both branches of the ternary.
=&gt; It's better to not repeat characters in both branches of ternaries, for example:</p>

<pre><code>// First row
display += " " + (board[ 0 ][ 0 ] == "" ? " " : `${board[0][0]}`);
display += "|";
display += board[ 0 ][ 1 ] == "" ? " " : `${board[0][1]}`;
display += "|";
display += (board[ 0 ][ 2 ] == "" ? " " : `${board[0][2]}`) + "\n";
</code></pre>

<p>Now the lines look more similar.
When things look similar,
they make you think of further generalization opportunities.</p>

<p>You could benefit more from the <code>`...`</code> strings in JavaScript,
and also of the fallback values with <code>|| ...</code>:</p>

<pre><code>// First row
display += ` ${board[0][0] || ' '}`;
display += "|";
display += `${board[0][1] || ' '}`;
display += "|";
display += `${board[0][2] || ' '}\n`;
</code></pre>

<h3>Minor technical issues</h3>

<ul>
<li><p>The last statement in the <code>while</code> loop of <code>playerTurn</code> is <code>continue</code>. That's pointless and should be removed.</p></li>
<li><p>Some lines are extremely long. It's hard to read code like that, better to split to multiple lines.</p></li>
<li><p>In <code>displayBoard</code> you forgot to use the <code>let</code> keyword for the <code>display</code> variable.</p></li>
</ul>
    </div>