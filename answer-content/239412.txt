<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Re-implementing a dict is completely unnecessary. <code>codecs.register()</code> expects a search <em>function</em>, so a plain function will work just fine. You can use a regular dict to store codecs (in a closure). Normalization can be implemented in its own function.</p>

<p>Something as simple as this should work:</p>

<pre class="lang-py prettyprint-override"><code>def register_codecs(*encodings: Iterable[str]) -&gt; None:
    registered_codecs = {}

    def search(codecs_name):
        return registered_codecs.get(_normalize(codecs_name), None)

    codecs.register(search)

    # Add codecs

def _normalize(encoding: str) -&gt; str:
    return encoding.lower().replace('-', '_')
</code></pre>

<p>Instead of storing codecs in the global variable <code>_REGISTERED_CODECS</code>, we just register another search function each time the user calls <code>register_codecs()</code> (which means <code>_REGISTER_ONCE</code> is also not needed any more; we just got rid of two global variables with one shot!)</p></li>
<li><p>Now for the error checking in <code>register_codecs()</code>. Checking that aliases refer to the same codec is fine, but I doubt if it's really necessary to check for duplicates. The code works all right even if the same codec is registered twice. So I think it's probably not worth it.</p>

<p>After removing the check for duplicates, the complete <code>register_codecs()</code> function now looks like this:</p>

<pre class="lang-py prettyprint-override"><code>def register_codecs(*encodings: Iterable[str]) -&gt; None:
    registered_codecs = {}

    def search(codecs_name):
        return registered_codecs.get(codecs_name, None)

    codecs.register(search)

    # then add codecs to registered_codecs
    for encoding in encodings:
        # check that aliases refer to the same codec
        info_orig = codecs.lookup(encoding[0])
        if any(info_orig != codecs.lookup(alias) for alias in encoding[1:]):
            msg = f"{encoding!r} are not all aliases for the same codec!"
            raise ValueError(msg)

        for name in encoding:
            registered_codecs[_normalize(name) + "_rot128"] = _build_codec(info_orig)
</code></pre>

<p>And that's also one less global variable!</p></li>
<li><p><code>rot128_transform()</code> takes any bytes-like object as argument and returns bytes. It's OK to return bytes even if the caller passes in something else like a <code>memoryview</code>â€”the same way python's <code>Iterable</code> interface works.</p></li>
<li><p>As a side note, the <code>range()</code> function takes two arguments: <code>start</code> and <code>end</code>. So instead of <code>range(256)[128:]</code>, try <code>range(128, 256)</code>.</p></li>
</ul>
    </div>