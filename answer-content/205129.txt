<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>
<h2>Naming conventions</h2>
<p>In Python, methods and variables should be named the following way: <a href="https://stackoverflow.com/questions/159720/what-is-the-naming-convention-in-python-for-variable-and-function-names">https://stackoverflow.com/questions/159720/what-is-the-naming-convention-in-python-for-variable-and-function-names</a>
So in your case, it would be:</p>
<ul>
<li><code>self.snakeLength</code> &gt; <code>self.snake_length</code></li>
<li><code>def eatApple(self)</code> &gt; <code>def eat_apple(self)</code></li>
</ul>
<h2>Choose better names for variables</h2>
<p>Snake.snakeX seems to be a little bit too much. Why don't you</p>
<ul>
<li><code>Snake.snakeX</code> &gt; <code>Snake.x</code></li>
<li><code>Snake.snakeLength</code> &gt; <code>Snake.length</code></li>
<li><code>Apple.appleX</code> &gt; <code>Apple.x</code></li>
</ul>
<h2>Use class constants instead of global variables</h2>
<p>Usually you want to have as few golbal variables / constants as possible. Instead of <code>boardWidth = 30</code> you can create a cosntant and move it to some class, like <code>BOARD_WIDTH = 30</code> (see example).</p>
<h2>Wrap the main code</h2>
<p>Create a new class which wraps the code your script runs. You could, for exapmple, use the Tk class (see example)</p>
<h2>Use <strong>main</strong></h2>
<p>If someone wants to import your code, he will instatnly run the whole script, creating a Tkinter widget, running the gameloop infinitely. Instead, wrap it with a <code>if __name__ == "__main__":</code> statement.</p>
<h2>Prevent the snake of moving backwards</h2>
<p>In your implementation it is possible to do a 180Â° turn, which kills your snake instantly. You could always save the last move, e.g. "w", which blocks all incoming "s", so only "w", "a" and "d" are valid for the next move (see example).</p>
<h2>Reduce visibility</h2>
<p>You can reduce the visibility of class members by placing <code>__</code> in front of them. For example</p>
<ul>
<li><code>self.apple</code> &gt; <code>self.__apple</code></li>
</ul>
<p>Looks ugly, but this way these fields can't be accessed from outside your class.</p>
<h2>Use @property</h2>
<p>Instead of defining getters manually, use propteries (see example).
More information: <a href="https://www.smallsurething.com/private-methods-and-attributes-in-python/" rel="nofollow noreferrer">https://www.smallsurething.com/private-methods-and-attributes-in-python/</a></p>
<h2>Code improvements</h2>
<p>Instead of <code>event.char == "w" or event.char == "d" or event.char == "s" or event.char == "a"</code> you can define a list of all keys <code>KEYS = ["w", "a", "s", "d"]</code> and then do <code>event.char in Snake.KEYS</code></p>
<p>Do not write <code>if snake.checkGameOver() == False</code>, instead do <code>if not snake.checkGameOver()</code></p>
<h2>You might use type hinting</h2>
<p>Since python 3.5 there is typehinting (see example).
More information: <a href="https://blog.jetbrains.com/pycharm/2015/11/python-3-5-type-hinting-in-pycharm-5/" rel="nofollow noreferrer">https://blog.jetbrains.com/pycharm/2015/11/python-3-5-type-hinting-in-pycharm-5/</a></p>
<h1>Code example</h1>
<p>snake.py</p>
<pre><code>from tkinter import *
import random
from typing import List


class Apple:

    def __init__(self):
        self.__x = random.randint(1, App.BOARD_WIDTH - 2)
        self.__y = random.randint(1, App.BOARD_HEIGHT - 2)

    def create_new_apple(self) -&gt; None:
        self.__x = random.randint(1, App.BOARD_WIDTH - 2)
        self.__y = random.randint(1, App.BOARD_HEIGHT - 2)

    @property
    def x(self) -&gt; int:
        return self.__x

    @property
    def y(self) -&gt; int:
        return self.__y
        

class Snake:

    KEYS = ["w", "a", "s", "d"]
    MAP_KEY_OPP = {"w": "s", "a": "d", "s": "w", "d": "a"}

    def __init__(self, apple):
        self.__apple = apple
        self.__x = [20, 20, 20]
        self.__y = [20, 21, 22]
        self.__length = 3
        self.__key_current = "w"
        self.__key_last = self.__key_current
        self.__points = 0

    def move(self) -&gt; None:  # move and change direction with wasd

        self.__key_last = self.__key_current

        for i in range(self.length - 1, 0, -1):
            self.__x[i] = self.__x[i - 1]
            self.__y[i] = self.__y[i - 1]

        if self.__key_current == "w":
            self.__y[0] = self.__y[0] - 1

        elif self.__key_current == "s":
            self.__y[0] = self.__y[0] + 1

        elif self.__key_current == "a":
            self.__x[0] = self.__x[0] - 1

        elif self.__key_current == "d":
            self.__x[0] = self.__x[0] + 1

        self.eat_apple()

    def eat_apple(self) -&gt; None:

        if self.__x[0] == self.__apple.x and self.__y[0] == self.__apple.y:

            self.__length = self.__length + 1

            x = self.__x[len(self.__x) - 1]  # snake grows
            y = self.__y[len(self.__y) - 1]
            self.__x.append(x + 1)
            self.__y.append(y)

            self.__points = self.__points + 1
            self.__apple.create_new_apple()

    @property
    def gameover(self) -&gt; bool:

        for i in range(1, self.length, 1):

            if self.__y[0] == self.__y[i] and self.__x[0] == self.__x[i]:
                return True  # snake ate itself

        if self.__x[0] &lt; 1 or self.__x[0] &gt;= App.BOARD_WIDTH - 1 or self.__y[0] &lt; 1 or self.__y[0] &gt;= App.BOARD_HEIGHT - 1:
            return True  # snake out of bounds

        return False

    def set_key_event(self, event: Event) -&gt; None:

        if event.char in Snake.KEYS and event.char != Snake.MAP_KEY_OPP[self.__key_last]:
            self.__key_current = event.char

    @property
    def x(self) -&gt; List[int]:
        return self.__x.copy()

    @property
    def y(self) -&gt; List[int]:
        return self.__y.copy()

    @property
    def length(self) -&gt; int:
        return self.__length

    @property
    def points(self) -&gt; int:
        return self.__points


class App(Tk):

    BOARD_WIDTH = 30
    BOARD_HEIGHT = 30
    TILE_SIZE = 10

    COLOR_BACKGROUND = "yellow"
    COLOR_SNAKE_HEAD = "red"
    COLOR_SNAKE_BODY = "blue"
    COLOR_APPLE = "green"
    COLOR_FONT = "darkblue"
    FONT = "Times 20 italic bold"
    FONT_DISTANCE = 25

    TEXT_TITLE = "Snake"
    TEXT_GAMEOVER = "GameOver!"
    TEXT_POINTS = "Points: "

    TICK_RATE = 200  # in ms
    
    def __init__(self, screenName=None, baseName=None, className='Tk', useTk=1, sync=0, use=None):
        Tk.__init__(self, screenName, baseName, className, useTk, sync, use)
        
        self.__apple = Apple()
        self.__snake = Snake(self.__apple)

        self.__canvas = Canvas(self, width=App.BOARD_WIDTH * App.TILE_SIZE, height=App.BOARD_HEIGHT * App.TILE_SIZE)
        self.__canvas.pack()
        self.__canvas.configure(background=App.COLOR_BACKGROUND)
    
        self.title(App.TEXT_TITLE)
        self.bind('&lt;KeyPress&gt;', self.__snake.set_key_event)

    def mainloop(self, n=0):
        self.__gameloop()
        Tk.mainloop(self, n)

    def __gameloop(self):

        self.after(App.TICK_RATE, self.__gameloop)
        self.__canvas.delete(ALL)

        if not self.__snake.gameover:

            self.__snake.move()

            x = self.__snake.x
            y = self.__snake.y

            self.__canvas.create_rectangle(
                x[0] * App.TILE_SIZE,
                y[0] * App.TILE_SIZE,
                x[0] * App.TILE_SIZE + App.TILE_SIZE,
                y[0] * App.TILE_SIZE + App.TILE_SIZE,
                fill=App.COLOR_SNAKE_HEAD
            )  # Head

            for i in range(1, self.__snake.length, 1):
                self.__canvas.create_rectangle(
                    x[i] * App.TILE_SIZE,
                    y[i] * App.TILE_SIZE,
                    x[i] * App.TILE_SIZE + App.TILE_SIZE,
                    y[i] * App.TILE_SIZE + App.TILE_SIZE,
                    fill=App.COLOR_SNAKE_BODY
                )  # Body

            self.__canvas.create_rectangle(
                self.__apple.x * App.TILE_SIZE,
                self.__apple.y * App.TILE_SIZE,
                self.__apple.x * App.TILE_SIZE + App.TILE_SIZE,
                self.__apple.y * App.TILE_SIZE + App.TILE_SIZE,
                fill=App.COLOR_APPLE
            )  # Apple

        else:  # GameOver Message
            x = App.BOARD_WIDTH * App.TILE_SIZE / 2  # x coordinate of screen center
            y = App.BOARD_HEIGHT * App.TILE_SIZE / 2  # y coordinate of screen center
            self.__canvas.create_text(x, y - App.FONT_DISTANCE, fill=App.COLOR_FONT, font=App.FONT,
                                      text=App.TEXT_GAMEOVER)
            self.__canvas.create_text(x, y + App.FONT_DISTANCE, fill=App.COLOR_FONT, font=App.FONT,
                                      text=App.TEXT_POINTS + str(self.__snake.points))
    

if __name__ == "__main__":
    App().mainloop()
</code></pre>
<hr>
<p>As always, no warranty. As there are many different styles for programming python, these are some suggestions for you, how you COULD impove your code. Many things I mentioned are optional, not necessary.</p>
    </div>