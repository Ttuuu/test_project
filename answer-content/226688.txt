<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's a neat piece of engineering but it's not that much different from a std::vector
of unique_ptrs to the base class. The following accomplishes the same thing with a tad more typing.</p>

<pre><code>std::vector&lt;std::unique_ptr&lt;base&gt;&gt; pv;

pv.push_back(std::make_unique&lt;derived_a&gt;(derived_a{ "abc" }));
pv.push_back(std::make_unique&lt;derived_b&gt;(derived_b{ { 1, 2, 3 } }));

auto print = [&amp;](){    
  for (const auto&amp; el : pv) { el-&gt;print();}    
};

print();

pv.erase(pv.begin());

print();
</code></pre>

<p>This could be streamlined with a few free functions that hide the make_unique call and help deal with lists. NOTE, I prefer
to use the array by reference function signature but I included a delegate using initializer_list for completeness. I added an additional constructor to derived_b to that end to move the contents of the array into the vector.</p>

<pre><code>// tested with -std=c++14, gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04.1)

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;memory&gt;

struct base {
  // forbid instantiation of standalone ABC
protected:
  base() = default;

public:
  virtual ~base() = default;
  virtual void print() const = 0;
};

struct derived_a : public base {
  derived_a(std::string const&amp; m)
    : m_{m} {
    std::cout &lt;&lt; "(derived_a-string-ctor)\n";
  }

  void        print() const override { std::cout &lt;&lt; m_ &lt;&lt; '\n'; }
  std::string m_;
};

struct derived_b : public base {
  derived_b(std::vector&lt;int&gt; const&amp; m)
    : m_{m} {
      std::cout &lt;&lt; "(derived_b-vector-ctor)\n";
    }

  // accept an array by reference rather than mess with
  // initializer lists and all their associated problems.
  //
  // https://akrzemi1.wordpress.com/2016/07/07/the-cost-of-stdinitializer_list/
  // https://stackoverflow.com/questions/26379311/calling-initializer-list-constructor-via-make-unique-make-shared
  // http://mikelui.io/2019/01/03/seriously-bonkers.html
  // https://tristanbrindle.com/posts/beware-copies-initializer-list
  //
  template &lt;typename std::size_t N&gt;
  derived_b(const int (&amp;m)[N])
    : m_(std::make_move_iterator(std::begin(m)),
         std::make_move_iterator(std::end(m)))
  {
    std::cout &lt;&lt; "(derived_b-array-ctor)\n";
    //     m_.resize(N);
    //     std::copy(std::begin(m), std::end(m), std::begin(m_));
  }

  void print() const override {
    for (auto i : m_)
      std::cout &lt;&lt; i;
    std::cout &lt;&lt; '\n';
  }
  std::vector&lt;int&gt; m_;
};

namespace poly {
typedef std::vector&lt;std::unique_ptr&lt;base&gt;&gt; poly_vector;

// we don't want to type out the long make_unique sig every time
template &lt;typename T, typename... Args&gt;
void emplace_back(poly_vector&amp; pv, Args&amp;&amp;... args) {
  std::cout &lt;&lt; "(perfect forwarding delegator)";
  pv.emplace_back(std::make_unique&lt;T&gt;(std::forward&lt;Args&gt;(args)...));
}

// delegate arrays passed by reference
template &lt;typename T, std::size_t N&gt;
void emplace_back(poly_vector&amp; pv, const int (&amp;list)[N]) {
  std::cout &lt;&lt; "(reference array delegator)";
  pv.emplace_back(std::make_unique&lt;T&gt;(list));
}

#if 0
// delegate initializer_lists
template &lt;typename T&gt;
void emplace_back(poly_vector&amp; pv, std::initializer_list&lt;int&gt; list) {
  std::cout &lt;&lt; "(initializer_list&lt;int&gt; delegator)";
  pv.emplace_back(std::make_unique&lt;T&gt;(list));
}
#endif

// delegate vectors
template &lt;typename T&gt;
void emplace_back(poly_vector&amp; pv, std::vector&lt;int&gt; list) {
  std::cout &lt;&lt; "(std::vector&lt;int&gt; delegator)";
  pv.emplace_back(std::make_unique&lt;T&gt;(list));
}

void print(poly_vector&amp; c) {
  for (const auto&amp; el : c) {
    el-&gt;print();
  }
}

} // namespace poly

typedef poly::poly_vector poly_vector;

int main() {
  poly_vector pv;

  {
    using namespace poly;
    emplace_back&lt;derived_a&gt;(pv, "abc");

    // ref array
    emplace_back&lt;derived_b&gt;(pv, {1, 2, 3});

    // vector&lt;int&gt; delegate
    emplace_back&lt;derived_b&gt;(pv, {{4, 5, 6}});
    emplace_back&lt;derived_b&gt;(pv, std::vector&lt;int&gt;{{7, 8, 9}});

    std::cout &lt;&lt; "\n";
  }

  poly::print(pv);

  pv.erase(pv.begin());

  std::cout &lt;&lt; "\nafter...\n\n";

  poly::print(pv);
}

// output
/*
(perfect forwarding delegator)(derived_a-string-ctor)
(reference array delegator)(derived_b-array-ctor)
(std::vector&lt;int&gt; delegator)(derived_b-vector-ctor)
(std::vector&lt;int&gt; delegator)(derived_b-vector-ctor)

abc
123
456
789

after...

123
456
789
*/
</code></pre>
    </div>