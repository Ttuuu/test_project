<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since you’re willing to install third-party packages (I see a <code>pip install -r requirements.txt</code> step in your README), there are a couple of packages you can install that will probably be quite useful for your code.</p>

<h2>For secure config: consider <a href="https://pypi.org/project/keyring/" rel="noreferrer">keyring</a></h2>

<p>keyring provides an interface to the system keychain, so configuration is stored more securely than by mere filesystem access, and can only be accessed if the system keychain is unlocked.</p>

<p>So, for example, rather than hard-coding an access token, you could look it up like so:</p>

<pre><code>import keyring

keyring.get_password('pushover', 'user_key')
</code></pre>

<p></p>

<p>This has the downside that it’s a bit more fiddly to set up – the user either has to use the OS’s keychain manager (if one exists), or run <code>keyring.set_password()</code>. You might consider providing a helper script that sets up the keychain, using <a href="https://docs.python.org/3.5/library/getpass.html?highlight=getpass#module-getpass" rel="noreferrer">getpass</a> to ask for the password without dumping it to the console.</p>

<h2>For argument parsing: consider <a href="https://pypi.org/project/docopt/" rel="noreferrer">docopt</a></h2>

<p>You’re rolling your own argument parser, which is lots of extra code you have to write, debug and test. Within the standard library, there’s <a href="https://docs.python.org/3.5/library/argparse.html" rel="noreferrer">argparse</a>, which makes this a little easier, but docopt makes it easier still. You just write the help message in a standard format, and let docopt do the fiddly business of option parsing. </p>

<p>I often use it with the  of the module, like so:</p>

<pre><code>#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
Simple Notifications.

Usage:
  notifications.py email &lt;subject&gt; &lt;message&gt; &lt;recipients&gt;
  notifications.py pushbullet &lt;title&gt; &lt;message&gt;
  notifications.py pushover &lt;message&gt;
"""

import docopt

arguments = docopt.docopt(__doc__)
print(arguments)
</code></pre>

<p></p>

<p>And now anybody reading the code can easily see what the interface to the script is, and all that messy argument parsing code has been cleaned up. Additionally, docopt will do validation – for example, warning the user if they enter too many arguments, something your code doesn’t do.</p>

<h2>For HTTPS: consider <a href="https://pypi.org/project/requests/" rel="noreferrer">requests</a></h2>

<p>I’m a bit confused as to why you use requests to make the POST request in <code>send_pushbullet_notification()</code>, but fall back to httplib and setting up an <code>HTTPSConnection</code> instance for <code>send_pushover_notification()</code>.</p>

<p>Wouldn’t it be easier to just use <code>requests.post()</code> in both instances?</p>

<p>While I’m looking at these two functions, two additional comments:</p>

<ul>
<li><p>Don’t print anything on success, just return <code>True</code> or exit quietly. If I want to use these functions as part of a longer pipeline, it’s really inconvenient to have to suppress this printing when your function completes. Better not to do anything like that within the function, and let the caller decide how they want to notify the end user.</p></li>
<li><p>Don’t throw away the HTTP status code in your exception messages; it can be very useful for debugging why something failed. There may be more useful information in the response; that’s the minimum you should be sending.</p></li>
</ul>
    </div>