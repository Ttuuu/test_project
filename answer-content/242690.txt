<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, whatever you do, you should only re-check those sources which have not finished, so you should remember which have finished already, or equivalently, only those which have not. </p>

<pre><code>class MatchCollector:
    def __init__(self, teams, sources=settings.sources):
        self.teams = teams
        self.sources = sources
        self.unfinished = {SourceCollector(source, teams) for source in sources}
        self.timeout = 600  # s
        self.iterations = 1000 # arbitrarily chosen, have to make calc, when would be a good point to give up

    def execute(self):
        counter = 0
        while self.unfinished:
            self.unfinished = {source for source in self.unfinished if not s.execute()}
            time.sleep(self.timeout)
            counter += 1
            if counter &gt;= self.iterations 
                 raise IterationException('Tried for x hours without success. Somethings broken') 
        d = DataAggregator(self.sources)
        d.execute()
</code></pre>

<p>This assumes that <code>SourceCollector.execute</code> can be run repeatedly without needing to re-initialize it. If this is not the case, just do <code>self.unfinished = {source for source in self.unfinished if not SourceCollector(source, self.teams).execute()}</code>.</p>

<p>Note that doing <code>counter += counter</code> is probably not what you want. Since you initialize it to <code>0</code>, it does <code>0 + 0 = 0</code>, so nothing. If you had initialized it to a non-zero value, it would also not simply count up, but double every iteration.</p>

<p>I also made the timeout between retries and the number of iterations members of the class so they are no longer magic numbers.</p>

<p>You should also follow Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which recommends using spaces around <code>=</code> in assignments and after commas in argument lists of functions and methods.</p>
    </div>