<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>private void _timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
{
    lock (_syncObject)
    {
        if (_isDisposing)
        {
            return;
        }            
        try
        {
            _timer.Stop();
            Elapsed?.Invoke(sender, e);
        }
        finally
        {
            _timer.Start();
        }
    }
}
</code></pre>
</blockquote>

<p>As dfhwze writes - you can't lock in this way because it's a candidate for race conditions. And the only reason - I can see - you have to do it, is because you halts the timer, while the event consumers do their job. This also means that you effectively hands over the timer interval to the laziest event handler. Theoretically that could be one that opens a modal message box (which is not closed because the operator is to lunch or on vacation) with an error or something else that prevent it from finishing its job - which will cause all consumers (on different threads) to wait, and you then effectively disables the benefits/necessity of the multithreaded design. I anticipate that you stop and start the timer here, because you don't want the event handlers to be called if the previous call hasn't returned?</p>

<p>The above code actual acts as a single thread bottleneck that synchronize the threads with the slowest thread/event handler. Is that by design?</p>

<p>If you want to let the different threads work independently of each other you could invoke each handler in a thread by it self:</p>

<pre><code>private void _timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
{
  try
  {
    foreach (Delegate handler in Elapsed.GetInvocationList())
    {
      ThreadPool.QueueUserWorkItem(_ =&gt;
      {
        handler.DynamicInvoke(sender, e);
      });
    }
  }
  finally
  {
  }
}
</code></pre>

<p>The above doesn't prevent a handler to be called before the previous call to that handler has finished. To Handle that situation, you'll have to maintain a dictionary (<code>ConcurrentDictionary&lt;Delegate, bool&gt;</code> for instancce)  that controls if a handler is ready for a new call or not.</p>

<p>I of course have no idea of which impact this will have on your application otherwise - you'll have to test that thoroughly. </p>
    </div>