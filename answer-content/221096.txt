<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Hybrid Pattern</h2>

<p>The <em>bridge pattern</em> you have implemented is a combination of the <em>composite pattern</em> and <em>inheritance</em>. Why did you decide to let your <code>ILeftRightButtonsControl</code> implementation use composition and <code>ITopBottomButtonsControl</code> use inheritance?</p>

<blockquote>
<pre><code>public abstract class BPRemoteControl : IRemoteControl
{
    ILeftRightButtonsControl LeftRightControl { get; }

    public BPRemoteControl(ILeftRightButtonsControl leftRight)
    {
        LeftRightControl = leftRight;
    }

    public void LeftButtonPressed() =&gt; LeftRightControl.LeftButtonPressed();
    public void RightButtonPressed() =&gt; LeftRightControl.RightButtonPressed();

    public abstract void TopButtonPressed();
    public abstract void BottomButtonPressed();
}
</code></pre>
</blockquote>

<hr>

<h2>Bridge Pattern</h2>

<p>A useful implementation of the <em>bridge pattern</em> would be if <code>ChannelControl</code>, <code>ChapterControl</code> were third-party classes from let's say <code>OtherDomain</code> that do not adhere to your interfaces. If these other classes would have other interfaces, you might also consider the <em>adapter pattern</em> instead.</p>

<p>You would then create a bridge for <code>OtherDomain.ChannelControl</code>.</p>

<pre><code>public class ChannelControlBridge : ILeftRightButtonsControl
{
    private OtherDomain.ChannelControl impl;
    public ChannelControlBridge (OtherDomain.ChannelControl impl) {
        this.impl = impl;
    }
    // the name of the operations happens to be the same in their domain
    // but this is not a requirement
    public void LeftButtonPressed() =&gt; impl.LeftButtonPressed();
    public void RightButtonPressed() =&gt; impl.RightButtonPressed();
}
</code></pre>

<p>And a bridge for <code>OtherDomain.ChapterControl</code>.</p>

<pre><code>public class ChapterControlBridge : ILeftRightButtonsControl
{
    private OtherDomain.ChapterControl impl;
    public ChapterControlBridge (OtherDomain.ChapterControl impl) {
        this.impl = impl;
    }
    // the name of the operations happens to be the same in their domain
    // but this is not a requirement
    public void LeftButtonPressed() =&gt; impl.LeftButtonPressed();
    public void RightButtonPressed() =&gt; impl.RightButtonPressed();
}
</code></pre>

<hr>

<h2>Adapter Pattern</h2>

<p>The <em>adapter pattern</em> could be implemented if <code>ChannelControl</code>, <code>ChapterControl</code> were third-party classes from let's say <code>OtherDomain</code> that do not adhere to your interfaces, but use their own interfaces instead.</p>

<p>You would then create and adapter for <code>OtherDomain.IChannelControl</code>.</p>

<pre><code>public class ChannelControlAdapter : ILeftRightButtonsControl
{
    private OtherDomain.IChannelControl impl;
    public ChannelControlAdapter (OtherDomain.IChannelControl impl) {
        this.impl = impl;
    }
    // the name of the operations happens to be the same in their domain
    // but this is not a requirement
    public void LeftButtonPressed() =&gt; impl.LeftButtonPressed();
    public void RightButtonPressed() =&gt; impl.RightButtonPressed();
}
</code></pre>

<p>And an adapter for <code>OtherDomain.IChapterControl</code>.</p>

<pre><code>public class ChapterControlAdapter : ILeftRightButtonsControl
{
    private OtherDomain.IChapterControl impl;
    public ChapterControlAdapter (OtherDomain.IChapterControl impl) {
        this.impl = impl;
    }
    // the name of the operations happens to be the same in their domain
    // but this is not a requirement
    public void LeftButtonPressed() =&gt; impl.LeftButtonPressed();
    public void RightButtonPressed() =&gt; impl.RightButtonPressed();
}
</code></pre>

<hr>

<h2>Composite Pattern</h2>

<p>Your ECS is a perfect example of the <em>composite pattern</em> by forwarding the operations to your inner components.</p>

<blockquote>
<pre><code>public class ECSRemoteController : IRemoteControl
{
    private ITopBottomButtonsControl TopBottomButtonsComponent { get; }
    private ILeftRightButtonsControl LeftRightButtonsComponent { get; }

    public ECSRemoteController(ITopBottomButtonsControl topBottom, 
        ILeftRightButtonsControl leftRight)
    {
        TopBottomButtonsComponent = topBottom;
        LeftRightButtonsComponent = leftRight;
    }

    public void TopButtonPressed() =&gt; TopBottomButtonsComponent.TopButtonPressed();
    public void BottomButtonPressed() =&gt; TopBottomButtonsComponent.BottomButtonPressed();

    public void LeftButtonPressed() =&gt; LeftRightButtonsComponent.LeftButtonPressed();
    public void RightButtonPressed() =&gt; LeftRightButtonsComponent.RightButtonPressed();
}
</code></pre>
</blockquote>
    </div>