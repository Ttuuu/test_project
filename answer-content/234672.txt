<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All the methods in <code>InvokeRequest</code> are basically the same. The only part that differs is the URL. Just pass that in instead of passing in the parts of the URL and constructing the URL in the function.</p>

<p>Before I show the function that I came up with though, I'll note that there's no reason <code>InvokeRequest</code> should be a class, and there's also no reason that <code>self.URL</code> and <code>self.response</code> in those methods should be instance attributes. I'm far from practiced in OOP, but making arbitrary bits of code into classes isn't helpful. <em>If</em> you were passing the <code>self.server</code> data into the constructor, then <em>maybe</em> there would be some justification. As it stands now though, I'm going to get rid of the class and instance attributes.</p>

<p>To start out with, here's the basic part that was repeated in all the methods:</p>

<pre><code>def get_response(url):
    response = requests.get(url, auth=(username, PAT), verify=False)
    return response.json()
</code></pre>

<p>It now expects that the <code>url</code> will be passed in like I mentioned. You can ease making the URL though using a helper:</p>

<pre><code>def build_url(*parts):
    return BASE_URL + "".join(parts)
</code></pre>

<p>If you haven't encountered var-args before, <code>*parts</code> just means that the function accepts as many arguments as you want, and bundles them into a tuple.</p>

<p>Now you can write:</p>

<pre><code>json = get_response(build_url(project, "/_apis/git/repositories"))  # Was getRepositories
json = get_response(build_url(releaseID, "/_apis/git/releaseID"))  # Was getReleaseDefinitions
json = get_response(build_url(project, "/_apis/build/definitions/", str(ID)))  # Was getBuildDefinitionID
</code></pre>

<p>You could also put the call to <code>build_url</code> inside <code>get_response</code> and have <code>*parts</code> as the parameter to <code>get_response</code>:</p>

<pre><code>def get_response(*parts):
    url = build_url(*parts)
    response = requests.get(url, auth=(username, PAT), verify=False)
    return response.json()

json = get_response(project, "/_apis/git/repositories")
json = get_response(releaseID, "/_apis/git/releaseID")
json = get_response(project, "/_apis/build/definitions/", str(ID))
</code></pre>

<p>Which you want to use depends on if <code>get_response</code> will always use a URL returned by <code>build_url</code>, or if it can differ.</p>

<p>You could wrap the calls to <code>get_response</code> in some functions too to avoid needing to manually put the URL together each time:</p>

<pre><code>def get_build_definition_ID():
    return get_response(project, "/_apis/build/definitions/", str(ID))
</code></pre>

<hr>

<p>Also note the naming convention I used. <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="noreferrer">Python uses snake_case</a>, not camelCase.</p>
    </div>