<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Only going to comment on a couple things I noticed while scrolling, not enough time to review the full code.</p>

<h1>Be Consistent</h1>

<p>Here is your <code>to_win</code> function:</p>

<pre><code>def to_win():
    print('85/15 TO WIN', end='')
    for dot in range(4):
        print('.', end='', flush=True)
        time.sleep(1)
    print('or lose')
    print('Loading', end='', flush=True)
    for _ in range(15):
        time.sleep(1)
        print('.', end='', flush=True)
    print()
</code></pre>

<p>Looking through your code, you know when and when not to use an underscore as a loop variable. So, why do you use <code>dot</code> when you don't need to? You should be consistent everywhere in your code.</p>

<h1>Docstrings</h1>

<p>I may be wrong, but I only noticed <em>one</em> docstring for all your functions and classes. You should include a docstring at the beginning of every module, class, and function you write. It allows documentation to identify what your code is supposed to do. Also helps readers quickly understand your program from reading the module docstring.</p>

<h1>Constants Naming</h1>

<pre><code>ox_idea1 = '"numbers is key"'
cox_idea2 = '"hit the frontier hard with a direct attack to the most secure but vital part of them: downtown"'
cox_pro_cons = pro_con('militarist', 'quick-minded', 'assertive', 'convincing', 'irrational', 'close-minded')
chloe_cox = person('chloe cox', '09/25/98', 'Caucasian-American', 'F', 'Arlington, VA', cox_idea1, cox_idea2,
                   cox_pro_cons)
vazquez_idea1 = '"strategy is key"'
vazquez_idea2 = '"we weaken every strength, target every weakness and exploit every mistake rationally and ' \
                'intelligently until they fall"'
vazquez_pros_cons = pro_con('strategist', 'smart', 'methodical', 'realistic', 'flawed', 'negligent')
benjamin_vazquez = person('benjamin vazquez', '10/23/88', 'Mexican-American', 'M', 'Richmond, VA', vazquez_idea1,
                          vazquez_idea2, vazquez_pros_cons)
washington_idea1 = '"a prosperous army is key'
washington_idea2 = '"as long as are soldiers are well supplied and well fed, they will fight outstandingly"'
washington_pro_cons = pro_con('supplier', 'considerate', 'benevolent', 'focused', 'old', 'unassertive')
zaid_washington = person('zaid washington', '12/10/74', 'African-American', 'M', 'Virgina Beach, VA',
                         washington_idea1, washington_idea2, washington_pro_cons)
waters_idea1 = '"morale is key"'
waters_idea2 = '"as long as our soldiers have the drive and motivation to fight, they will conquer"'
waters_pro_cons = pro_con('therapist', 'energetic', 'optimistic', 'motivator', 'malleable', 'unassertive')
rob_waters = person('rob waters', '12/17/87', 'Caucasian-American', 'M', 'Roanoke Rapids, NC', waters_idea1,
                    waters_idea2, waters_pro_cons)
li_idea1 = '"firepower and intimidation is key"'
li_idea2 = '''"our priority is our guns, bombs, transportation and technology. we make as much weapons as possible use 
                      them, kill, send a message"'''
li_pro_cons = pro_con('warlord', 'aggressive', 'fearless', 'rational', 'inarticulate', 'young')
ju_li = person('ju_li', '02/06/03', 'Chinese-American', 'F', 'Richmond, VA', li_idea1, li_idea2, li_pro_cons)
lieutenants = [chloe_cox, benjamin_vazquez, rob_waters, zaid_washington, ju_li]
</code></pre>

<p>These are all constants. They should be UPPER_CASE to identify them as such.</p>

<h1>Meaningful Function Names</h1>

<pre><code>def present_person(people):
    for individual in people:
        print('\n{}'.format(individual))
        load(15)
</code></pre>

<p>From the name of this function, it seems that the code presents a <em>person</em>. Yet the function accepts <em>people</em> and prints <em>individuals</em>, not one person. Perhaps change the name of this function to make it clear what it's supposed to do.</p>

<h1>Unnecessary <code>else</code> after returning</h1>

<p>You have this function:</p>

<pre><code>def prompt_for_input(prompt, valid_inputs, max_tries=6):
    print(prompt)
    the_roadblock = '\nPlease enter a valid input\n'

    while max_tries &gt; 0:
        user_input = input('&gt; ').upper()

        if user_input in valid_inputs:
            return user_input
        else:
            print(the_roadblock)
            max_tries -= 1

        # the input was not valid, show the roadblock
    print('Seems like you are not willing to play. Goodbye!')
    sys.exit(0)
</code></pre>

<p>After returning in a function, the rest of the code is not executed. So it is unnecessary to have an else here. Your function should look like this now:</p>

<pre><code>def prompt_for_input(prompt, valid_inputs, max_tries=6):
    """
    Docstring here
    """
    print(prompt)
    the_roadblock = '\nPlease enter a valid input\n'

    while max_tries &gt; 0:
        user_input = input('&gt; ').upper()

        if user_input in valid_inputs:
            return user_input
        print(the_roadblock)
        max_tries -= 1

        # the input was not valid, show the roadblock
    print('Seems like you are not willing to play. Goodbye!')
    sys.exit(0)
</code></pre>

<p>The same goes for your <code>win_loss</code> function:</p>

<pre><code>def win_loss():
    if tide[Forces.YOU] &gt;= 85:
        return 'VICTORY! The New Frontier has been overpowered and has surrendered. The End.'
    elif tide[Forces.ENEMY] &gt;= 85:
        return 'DEFEAT! The New Frontier has conquered and killed you all. Nice one chief. The End.'
    else:
        return 'PEACE! The war is over and you know live alongside the New Frontier in tranquility.'
</code></pre>

<p>You don't need <code>elif</code> and an <code>else</code> here. Just have two if checks for the first two returns, and return the last one if both aren't true. This function should look like this now:</p>

<pre><code>def win_loss():
    """
    Docstring here
    """
    if tide[Forces.YOU] &gt;= 85:
        return 'VICTORY! The New Frontier has been overpowered and has surrendered. The End.'
    if tide[Forces.ENEMY] &gt;= 85:
        return 'DEFEAT! The New Frontier has conquered and killed you all. Nice one chief. The End.'
    return 'PEACE! The war is over and you know live alongside the New Frontier in tranquility.'
</code></pre>

<h1>Main Guard</h1>

<p>You should wrap the code that starts your game in a main guard. It prevents this code from running if you decide to import this program into another program. <a href="https://stackoverflow.com/a/419185/8968906">This StackOverflow answer</a> provides excellent reasoning to what it is and why to use it. So the starting code should look like this:</p>

<pre><code>if __name__ == '__main__':
    print(introduction)
    load(15)
    start()
    end()
</code></pre>
    </div>