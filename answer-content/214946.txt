<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are correct, this is an inefficient way to do this search. Even if the <code>groupInfo</code> is found in the first iteration of each loop, you still go through (almost) every single element.</p>

<p>First a couple comments on your code:</p>

<ol>
<li><p>The return type is lying to me. The function doesn't return <code>BudgetGroupInfo</code>. It returns <code>BudgetGroupInfo | null</code>. The fact that this doesn't complain means that you don't have <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html" rel="nofollow noreferrer"><code>strictNullChecks</code></a> on. In my experience, this is the single most helpful feature available. It will let TypeScript tell you about a whole class of errors that it otherwise ignores.</p></li>
<li><p><code>filter.map.forEach</code> is fine if you know only a few elements will be looped over, but if you end up having a lot of data, this will end up taking 3x the time. I don't find it that helpful for readability here, so I'd just pull the checks into the loop function.</p></li>
<li><p>TypeScript is generally pretty good about figuring out what variable types are. You don't need to manually type the result of <code>Array#find</code>.</p></li>
</ol>

<p>The main trick for optimizing this is to make use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" rel="nofollow noreferrer"><code>Array#some</code></a> and change the outer <code>forEach</code> into a <code>find</code>. Here's how I'd write your function:</p>

<pre><code>function getGroupInfo(budCat: string, account: string, budgetGroupInfo: BudgetGroupInfo[]) {
    return budgetGroupInfo.find(group =&gt; {
        return group.bcInfo.some(info =&gt; {
            if (info.name !== budCat) return false;
            return info.bcAccounts.some(acct =&gt; acct.name === account);
        });
    });
}
</code></pre>

<p>There are a few subtle differences:</p>

<ol>
<li><p>This returns <code>undefined</code> instead of <code>null</code> if there is no result. If this is a problem, it's a straightforward fix.</p></li>
<li><p>I removed the return type of the function. TypeScript can infer it easily in this case, and it will still be correctly inferred if you turn on <code>strictNullChecks</code></p></li>
<li><p>If there is multiple matches (I know you said there wouldn't be but...) my version will return the first match, while yours returns the last match.</p></li>
</ol>
    </div>