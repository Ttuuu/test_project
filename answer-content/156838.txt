<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your strategy of counting the spaces and then back-looping to shift the characters right (and replace spaces with <code>%20</code>) is good. The basic algorithm  is probably as good as it gets as a character array system.</p>

<p>Your variable names are decent, and the code flows well.</p>

<p>On the other hand, there are some small things I would change.</p>

<h2>Possible bug</h2>

<p>Your code, given the input <code>conversion("abc     ", 3)</code> you would output <code>"abc"</code> but you should not remove any "extra" padding in the string, you should return <code>"abc     "</code></p>

<p>In fact, you should only really have the one <code>char[]</code> array. The second one is making you do bad things ;-)</p>

<h2>Enhanced fors</h2>

<p>Use enhanced-for loops when possible, and <strong>always</strong> use <code>{}</code> blocks for if-statements, even 1-liners:</p>

<blockquote>
<pre><code>for(int i = 0; i &lt; length; i++){
    if(strChars[i] == ' ')
        numSpaces++;
}
</code></pre>
</blockquote>

<p>should be:</p>

<pre><code>for (char c : strChars) {
    if (c == ' ') {
        numSpaces++;
    }
}
</code></pre>

<h2>Comments</h2>

<p>Comment unusual loops - your second for-loop is an odd one, and it often helps the reader if you comment why a loop is non-sequential (or even if you just make sure they are aware of it).</p>

<h2>multiple indexes</h2>

<p>Have you considered having a separate index for each position in the array - the position of the source character, and the position of where to insert it?</p>

<pre><code>public static String conversion(String str, int length){

    char[] strChars = str.toCharArray();

    int numSpaces = 0;
    for (int i = 0; i &lt; length; i++) {
        if(strChars[i] == ' ') {
            numSpaces++;
        }
    }

    int insert = length + 2 * numSpaces - 1;

    // loop backwards through source characters.
    for (int i = length - 1; i &gt;= 0; i--) {
        char c = strChars[i];
        if (c == ' '){
            strChars[insert--] = '0';
            strChars[insert--] = '2';
            strChars[insert--] = '%';
        } else {
            strChars[insert--] = c;
        }
    }
    return String.valueOf(strChars);
}
</code></pre>

<p>The benefit of two indexes is that you can keep the logic more readable ... ("more" is relative) as each index moves by one character at a time... and a space counts as 3 characters.</p>
    </div>