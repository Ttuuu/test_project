<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Put <code>const</code> in the right place</h1>

<p>You write <code>int32_t *const fdMap</code>, which means the pointer <code>fdMap</code> is constant, but it allows writes to the values inside the map. You probably meant that you want the contents of <code>fdMap</code> to be read-only, so you have to write instead:</p>

<pre><code>const int32_t *fdMap
</code></pre>

<p>However, if you want you can make both the pointer and the values pointed to constant:</p>

<pre><code>const int32_t *const fdMap
</code></pre>

<p>The same goes for <code>argv</code> and <code>envp</code>.</p>

<h1>Filedescriptors are <code>int</code>s</h1>

<p>They are not <code>int32_t</code>s. So write:</p>

<pre><code>const int *fdMap
</code></pre>

<h1>Avoid unnecessary casts</h1>

<p>Calls to <code>sysconf()</code> return a <code>long</code>, not an <code>int</code>, so store the result in a variable of type <code>long</code>:</p>

<pre><code>long fdlimit = sysconf(_SC_OPEN_MAX);
</code></pre>

<p>And indeed, when you are looping over all possible filedescriptors, write <code>for (long i = 0; i &lt; fdlimit; i++)</code>.</p>

<h1>Avoid allocating potentially large arrays on the stack</h1>

<p>The maximum number of open files can be very large. The stack size your program gets is not unlimited. So a declaration like:</p>

<pre><code>uint8_t mentionedFds[fdlimit];
</code></pre>

<p>Can be larger than would fit in your stack. It is best to allocate memory on the heap for this:</p>

<pre><code>uint8_t *mentionedFds = calloc(fdlimit, sizeof(*mentionedFds));
</code></pre>

<h1>Consider passing <code>fdMap</code> in a more structured way</h1>

<p>The way you pass <code>fdMap</code> is a bit hackish. Since you actually pass an array of filedescriptor <em>pairs</em>, make this explicit, along with the size of that array:</p>

<pre><code>struct fd_pair {
    int src;
    int dst;
};
...
int spawn(..., const struct fd_pair *fdMap, size_t fdMap_size, ...)
</code></pre>

<p>Then later on, read the map like so:</p>

<pre><code>for (size_t i = 0; i &lt; fdMap_size; i++) {
    mentionedFds[fdMap[i].src] |= SRC;
    mentionedFds[fdMap[i].dst] |= DST;
}
</code></pre>

<h1>Make constants the right type</h1>

<p>Since <code>SRC</code> and <code>DST</code> are used to fill in <code>mentionedFds</code>, make sure they have the same type as the elements of the latter. You can also make them <code>static</code>:</p>

<pre><code>static const uint8_t SRC = 1;
static const uint8_t DST = 2;
</code></pre>
    </div>