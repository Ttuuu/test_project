<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think, I would provide the <code>CancellationToken</code> to each action, in order to let them respond to a possible cancellation request. Especially if the action is long running it would be a good idea.</p>

<pre><code>BlockingCollection&lt;Action&lt;CancellationToken&gt;&gt; actionQueue
</code></pre>

<hr>

<blockquote>
<pre><code>            while(!sorterHasEnded)
            {
                Thread.Sleep(100);
            }
</code></pre>
</blockquote>

<p>This tells me, that you are in the need for a mechanism that tells you when each queued action has finished. May be an event. You could then bind each action to a user defined Id of some kind and signal that, when the action is completed:</p>

<pre><code>private BlockingCollection&lt;ActionItem&gt; actionQueue;


public void EnqueueAction(string id, Action&lt;CancellationToken&gt; actionToEnqueue)
{
  if (string.IsNullOrWhiteSpace(id)) new ArgumentException("Can not be empty or null", nameof(id));
  if (actionToEnqueue == null) new ArgumentNullException(nameof(actionToEnqueue));

  actionQueue.Add(new ActionItem(id, actionToEnqueue));
}
</code></pre>

<p>And the background worker could be as something like:</p>

<pre><code>private void BackgroundWorker_ManageQueue(object sender, DoWorkEventArgs e)
{
  while (!backgroundWorker.CancellationPending)
  {
    ActionItem actionItem;
    try
    {
      IsBusy = false;
      actionItem = actionQueue.Take(cancellationTokenSource.Token);
      IsBusy = true;
    }
    catch (OperationCanceledException)
    {
      // This exception control intends to capture only when the cancellationToken has been requested to cancel
      break;
    }

    actionItem.Action(cancellationTokenSource.Token);
    OnActionEnded(actionItem.Id);
  }
}

public event EventHandler&lt;ActionEndedEventArgs&gt; ActionEnded;

private void OnActionEnded(string id)
{
  ActionEnded?.Invoke(this, new ActionEndedEventArgs(id));
}
</code></pre>

<p>Where <code>ActionItem</code> is defined as:</p>

<pre><code>class ActionItem
{
  public ActionItem(string id, Action&lt;CancellationToken&gt; action)
  {
    Id = id;
    Action = action;
  }

  public string Id { get; }
  public Action&lt;CancellationToken&gt; Action { get; }
}
</code></pre>

<p>Maybe the <code>ActionEnded</code> event should be fired in a separate thread in order to not block the execution queue while a client responds to it?</p>
    </div>