<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The advice I think most important:</p>

<ul>
<li><p>stick to the <a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow noreferrer">Style Guide for Python Code</a><br>
It helps everyone - including yourself - <em>read</em> your code.  </p></li>
<li><p>Naming: name things for what they can/will be used for, their <em>raison d'être</em>.<br>
For example, the class featuring <code>push()</code>, <code>rem()</code>, and <code>_properPlace()</code> is <em>not</em> used to <em>be open</em> or <em>open something</em>. It looks a <em>priority queue with <code>increase_priority()</code></em>.<br>
The <em>instance</em> <code>r</code> in <code>path_finder()</code> holds a set of <em>tentative costs</em>, or, if you insist, "open" nodes.<br>
The usual suggestion in the context of <a href="https://en.m.wikipedia.org/wiki/Pathfinding" rel="nofollow noreferrer">path finding</a> is to use a <a href="https://en.m.wikipedia.org/wiki/Fibonacci_heap" rel="nofollow noreferrer">Fibonacci_heap</a> - there is <a href="https://pypi.org/project/fibheap/" rel="nofollow noreferrer">PyPI fibheap</a>.</p></li>
<li><p>Modelling<br>
<code>node</code> is a strange hybrid of node and edge, given its single <code>parent</code> and <code>cost</code>:<br>
cost is <em>not</em> an attribute of a node, but an attribute of an edge, a pair of nodes  </p></li>
</ul>

<p>I suspect <code>del</code> and <code>insert</code> on <code>Open.container</code> to be the performance culprits.<br>
You could try and adapt <em>heapq</em>:<br>
locate nodes using <code>index()</code> as presented (O(n))<br>
update cost and use <code>_siftdown()</code> to restore heap property</p>
    </div>