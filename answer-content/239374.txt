<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you need to work on naming things (I know, I know, <a href="https://deviq.com/naming-things/" rel="nofollow noreferrer">naming things is hard</a>). I would recommend to try to find slightly shorter names, and also names that do not contain the type of the variable. Usually it is enough to know if a variable contains one or multiple of something. It is fine to re-use a variable name if you just transform the element(s) it contains.</p>

<p>Therefore I would use the following names:</p>

<pre><code>Current                                     Suggestion
#############################################################
punctuate                                   punctuation
iteratory_count                             i
multi_lined_input                           multiline_input
work_on_this_string_built_from_loop         user_input
raw_word_list                               words
get_rid_of_punctuation_marks                words
remove_consecutive_trailing_punctuation     words
capitalized_array                           words
frequency_of_words_dict                     word_frequencies
alphabetized_words                          word
frequency_of_word                           frequency
</code></pre>

<p>Names like <code>remove_punctuation</code> are not bad names. They are just not good names for variables. If you had a function named like that it would be perfectly fine and obvious what it does. And having a function like that might not be a bad idea as well.</p>

<p>In addition I would also like to encourage you to use whitespace sparingly (as recommended by <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>) and to remove no longer needed code (at least before sharing your code with others).</p>

<p>Here's how your code would look with these suggestions:</p>

<pre><code># text from websites use different quote marks than Pycharm so they where not registered
# ...but here are all the annoying punctuation marks
# that took forever to figure out how to decipher them in syntax and then get rid of them

punctuation = ['\"', ',', '\"', "\'", '.', ":", ";", "!", "?" , "\'", "\'", "'" ,
               "(", ")", "{", "}" , "[" , "]" , '“', '”', "'", "’", '‘', '.', '#']
print(punctuation)
punctuation = "".join(punctuation)

print("Enter/Paste your multi-line input / paragraph of text. Hit Ctrl + D to run it ")
print("DO NOT PRESS ENTER OR CTRL+V AFTER THE FIRST TIME YOU PASTED IN AND RUN YOUR TEXT(UNLESS PASTED TEXT IS A SINGLE LINE WITH NO BREAKS ")
print("INSTEAD HIT CTRL + D TO RUN IT AFTER TEXT IS INPUTTED WHEN TERMINAL HAS STOPPED RUNNING AND THE INPUT '|' IS STILL AND FLASHING")

user_input = []
while True:
    print()
    try:
        multiline_input = input("\n").lower().replace('-', ' ').strip()
        if not multiline_input:
            continue
        user_input.append(multiline_input)
    except EOFError as error :
        print("FINISHED INPUT\n")
        break

user_input = " ".join(user_input)
words = [word.strip(punctuation).capitalize() for word in user_input.split()]
word_frequencies = dict(Counter(words))
word_max_key, max_val = max(word_frequencies.items())  # unused

print("This sorts all words within the file by alphabetical order and tells the number of occurrences ")
for word, frequency in sorted(word_frequencies.items()):
    print(f"\n{word} : {frequency}")

print("#########################################################################################################")
print("PROGRAM COMPLETE")

print(f"the length of words in entry is : {len(words)}")
print(f"but the total number of unique words in the entry is {len(word_frequencies)}")
print("\nhere is the list of every number and at what location it occurs")
for index, word in enumerate(words):
    print(f"WORD: '{word}' INDEX : '{index}'")

m = max(word_frequencies.values())
most_frequent_words = [key for key, val in word_frequencies.items() if val == m]
print(f"The word(s) {most_frequent_words} occurs the most with {m} occurrences.")
</code></pre>

<p>Note that I also moved the splitting into words out of the loop so that you only need to do it once and accumulated the user input in a list instead of doing repeated string addition, which is costly. Your whole cleanup code fits into one list comprehension by using <code>str.strip</code> (note that <code>"abcba".strip("ab") == "c"</code>). I also used tuple assignment instead of doing <code>max(...)</code> twice to get both the key and value of the maximum and cleaned up the code in the bottom.</p>

<hr>

<p><strong>If <code>assert isinstance(alphabetized_words, object)</code> ever fails, you will have done something horribly, horribly wrong</strong>. Everything (except for keywords) is an object in Python, so this has to be always true. It is true even for functions (also built-ins), classes (not only instances, but also the classes themselves, including built-ins) exceptions, basic types (like integers and lists) singletons (like <code>None</code>).</p>

<p>The only way I can think of for this to be false is if you unnecessarily implemented your own <code>isinstance</code>, shadowing the built-in, which has some bug.</p>
    </div>