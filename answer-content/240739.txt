<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>About this code:</p>

<pre><code>def bezier_point(control_points, t):
    if len(control_points) == 1:
        result, = control_points  # &lt;-- here
</code></pre>

<p>you ask:</p>

<blockquote>
  <p>Is [the tuple-unpacking] idiom Pythonic?</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>Is it comprehensible?</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>Does the Python standard library offer any handy alternatives for this?</p>
</blockquote>

<p>Technically there is <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> but I do not recommend that you use that in this case. For one thing it would only provide an equivalent to <code>control_points[0]</code>, without effectively asserting for length.</p>

<blockquote>
  <p>Is there a way that is itself a single expression, so that it can be used inline in other expressions (e.g., in lambdas or in list comprehensions)?</p>
</blockquote>

<p>To put unpacking as an expression on the right-hand side of an assignment, no, this effectively can't be done without a really silly comprehension hack:</p>

<pre><code>next(iter(cp for (cp,) in (control_points,)))
</code></pre>

<p>Please do not do this. Doing anything more complicated than what you have now (for instance defining your own "unpacking function") is not advisable.</p>

<p>The exception might be if you also want to do some of your own validation, i.e. wrapping an exception in your own:</p>

<pre><code>def get_only_point(control_points: Iterable[float]) -&gt; float:
    try:
        point, = control_points
    except ValueError as e:
        raise MyDataError('too many control points') from e
    return point
</code></pre>
    </div>