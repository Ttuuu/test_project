<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>first, thank you for letting us know it's a homework. I'll try to give you some notes. </p>

<p>first let's take the initiation of a class instance <code>Counter gate = new Counter();</code>. In C#, whenever you're using <code>new</code> keyword, you're creating a new instance of that type. So, when you say <code>new Counter();</code> you're creating a new <code>Counter</code> instance of type <code>class</code>. Each instance is going to be treated independently. You can pass instances back and forth between each other, but in your case you need to work only on one instance in order to store the values and return them correctly. </p>

<p>for the class <code>Counter</code> </p>

<pre><code>private int _licznik;
public int Licznik 
{ 
    get { return _licznik; } 
    set { _licznik = value;  }
}
</code></pre>

<p>the shorthand for it is : </p>

<pre><code>public int Licznik { get; set; }
</code></pre>

<p>The class is okay, but you're overdoing it slightly. The better way of doing it is to divide your work into layers based on logic needs. In your case, you need two layers, one for user input validations, and the other one for the counter. </p>

<p>So, for the user input validations, you'll have to move all user input, messages into one place (in your current work, it should be under <code>Main()</code>). and the counter, should be inside the <code>Counter</code> class. </p>

<p>The <code>Counter</code> class should only acts as a calculator, add and subtracts, no user input required in it. It should have a method of each required functionality (increase, decrease, show total inside), and you just add the math to them. In your case, you need to use only two variables, one for the people entered, and the other one is for the people left. so you'll have to change <code>Licznik</code> and <code>quantity</code> to : </p>

<pre><code>private int entered;
private int left;
</code></pre>

<p>Then, use these two variables, in your methods to add and subtract, and show the total. Keep it simple. </p>

<p>After that, you'll need to work with the user input, so all logic inside  <code>IncNr</code>, <code>CheckNr</code>, <code>Count</code>, <code>DecNr</code> needs to be moved outside the Counter class into the Main() method (or create a method for it). as these logic are for user validation logic, and you should use them on top of <code>Counter</code> class and not inside it. </p>

<p>Something like this : </p>

<pre><code>public class Counter
{

    private int entered;
    private int left;

    public Counter() 
    { 
        entered = 0;
        left = 0;
    }

    public void Increase()
    {
        entered += 1;
    }

    public void Decrease()
    {
        left += 1;
    }

    public int TotalInside()
    {
        //[To-Do]
        ...
    }       

    public int TotalEntered()
    {
        //[To-Do]
        ...
    }

    public int TotalLeft()
    {
        //[To-Do]
        ...
    }   

}
</code></pre>

<p>Now, you'll need work under <code>Main</code> method, take the user input, and check it, if the input is <code>p</code> you just call the increment method, if <code>d</code> call the decrement method, and if <code>c</code> call the method which shows the total.  </p>

<p>So, it should be something like this : </p>

<pre><code>if (wybor == 'p')
{        
    gate.Increase();
    result = gate.TotalEntered();
    Console.WriteLine("The amount of people that just entered the building through the gate: {0}\n", result);
}
else if(wybor == 'd')
{
    gate.Decrease();
    result = gate.TotalLeft();
    Console.WriteLine("The amount of people that just passed the gate toward the exit is: {0}\n", result);
}
</code></pre>

<p>the <code>result</code> variable is a variable of type <code>int</code> and declared outside the loop. This should cover it all. </p>
    </div>