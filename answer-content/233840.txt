<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few points that stood out to me from a cursory glance:</p>

<ul>
<li><code>level_of_debugging</code> doesn't seem to serve any purpose as an attribute. The <code>__init__</code> function doesn't accept an argument to set it. The only other function which uses it, <code>init_logging</code>, takes it as an argument anyway. I think it should either

<ul>
<li>be configurable via <code>__init__</code>, and <code>init_logging</code> should then use <code>self.level_of_debugging</code> instead of accepting an argument,</li>
<li>or removed entirely and <code>init_logging</code> be simply called with <code>logging.INFO</code> directly.</li>
</ul></li>
<li><p>Instead of using <code>path + "\\" + name</code> and the like, fiddling with path separators manually, use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path" rel="nofollow noreferrer"><code>pathlib.Path</code></a>:</p>

<pre><code>path = pathlib.Path.cwd()
name = "logs"
full_path = path / name
</code></pre>

<p>Even though it uses a Unix-like <code>/</code> for joining the paths, it will work fine on both Windows and POSIX systems. Similarly, use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_dir" rel="nofollow noreferrer"><code>pathlib.Path.is_dir()</code></a> and <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir" rel="nofollow noreferrer"><code>pathlib.Path.mkdir()</code></a>.</p></li>
<li><p>If an activation function is not supported, a more appropriate action might to raise a <code>TypeError</code> or <a href="https://docs.python.org/3/library/exceptions.html#NotImplementedError" rel="nofollow noreferrer"><code>NotImplementedError</code></a> instead of a generic <code>Exception</code>. From the explanation of <a href="https://docs.python.org/3/library/exceptions.html#TypeError" rel="nofollow noreferrer"><code>TypeError</code></a>:</p>

<blockquote>
  <p>This exception may be raised by user code to indicate that an
  attempted operation on an object is not supported, and is not meant to
  be. If an object is meant to support a given operation but has not yet
  provided an implementation, <code>NotImplementedError</code> is the proper
  exception to raise.</p>
</blockquote>

<p>It's not a perfect fit, but it's a better fit than a generic <code>Exception</code>. More experienced Pythonistas can suggest better options.</p></li>
<li><p><a href="https://docs.python.org/3/tutorial/inputoutput.html#tut-f-strings" rel="nofollow noreferrer">f-strings</a> can, IMHO, give more readable code in the long run. Instead of lines like the following where you jump in and out of strings:</p>

<pre><code>print("For iteration/trainings-example: #" + str(curr_epoch) + "/#"+ str(curr_trainingsdata))
print("Input: " + str(data))
print("Actual Output: " + str(target))
print("Predicted Output: " + str(self.output_model))
print("Loss: " + str(self.loss(y=target, y_hat=self.output_model)))
print("Value of last weight change: " + str(self.weight_change_cache[-1]))
print("\n")
</code></pre>

<p>You can have a cleaner form:</p>

<pre><code>print(f"For iteration/trainings-example: #{curr_epoch)/#{curr_trainingsdata}")
print(f"Input: {data}")
print(f"Actual Output: {target}")
print(f"Predicted Output: {self.output_model}")
print(f"Loss: {self.loss(y=target, y_hat=self.output_model)}")
print(f"Value of last weight change: {self.weight_change_cache[-1]}")
print("\n")
</code></pre>

<p>Or, with <code>sep</code> to use a single <code>print()</code>, which is mostly a matter of taste (I think):</p>

<pre><code>print(
    f"For iteration/trainings-example: #{curr_epoch)/#{curr_trainingsdata}",
    f"Input: {data}",
    f"Actual Output: {target}",
    f"Predicted Output: {self.output_model}",
    f"Loss: {self.loss(y=target, y_hat=self.output_model)}",
    f"Value of last weight change: {self.weight_change_cache[-1]}",
    "\n",
    sep="\n"
)
</code></pre>

<p>This last version is much more readable than the repeated prints and manual concatenation of strings.</p></li>
</ul>
    </div>