<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a lot of lines like this:</p>

<blockquote>
<pre><code>worksheet.write(row, 0, item.pk)
</code></pre>
</blockquote>

<p>This means you should use a for loop. Take:</p>

<pre><code>for i, attr in enumerate(...):
    worksheet.write(row, i, item???attr)
</code></pre>

<p>But what should <code>item???attr</code> be? With <code>operator.attrgetter</code> it's pretty simple.</p>

<p>Take the following example:</p>

<pre><code>&gt;&gt;&gt; class Test:
        value = '{} world!'

&gt;&gt;&gt; Test.value.format('Hello')
'Hello world!'
&gt;&gt;&gt; operator.attrgetter('value.format')(Test)('Hello')
'Hello world!'
</code></pre>

<p>From this it's easy to see that the loop can be:</p>

<pre><code>for i, attr in enumerate(...):
    worksheet.write(row, i, operator.attrgetter(attr)(item))
</code></pre>

<hr>

<p>Assuming that <code>worksheet.set_column</code> can be called after all the <code>worksheet.write</code>s your code can be simplified.</p>

<pre><code>TITLES = [
    'ID',
    'OMCL ID',
    ...
]

COLUMNS = [
    ('A:B', 8),
    ('C:C', 25),
    ...
]

ATTRS = [
    (1, 'pk'),
    (2, 'ocml.id'),
    ...
]

def get(self, request):

    output = io.BytesIO()

    workbook = xlsxwriter.Workbook(output)
    worksheet = workbook.add_worksheet('Competence List')

    row = 0
    for i, name in enumerate(TITLES):
        worksheet.write(row, i, 'ID')

    for column, value in COLUMNS:
        worksheet.set_column(column, value)

    objects = Competence.objects.filter(
        id__in=self.request.session['result_recordset']
        ).select_related(
        'omcl', 'method', 'sub_method', 'sub_method__sub_method', 'sub_method__group', 'created_by',
        'omcl__country'
        ).annotate(
            concat_animals=StringAgg('animals__name', ';', True),
            concat_products=StringAgg('product_classes__name', ';', True),
            concat_manufacturers=StringAgg('manufacturers__name', ';', True),
            concat_bsp=StringAgg('bsp_items__code', ';', True),
            concat_cap=StringAgg('cap_items__code', ';', True),
            concat_mss=StringAgg('mss_items__code', ';', True),
            concat_pts=StringAgg(Cast('pts_years__pts_year', CharField(max_length=4)), ';', True))

    contacts = Contact.objects.filter(type='OMCL')
    omcl_contacts = {x.omcl_id: x for x in contacts}

    attrs = [(i, operator.attrgetter(a)) for i, a in ATTRS]

    for row, item in enumerate(objects, start=1):
        for i, attr_getter in attrs:
            worksheet.write(row, i, attr_getter(item))

        omcl_contact = omcl_contacts.get(item.omcl.id, None)
        if omcl_contact:
            worksheet.write(row, 5, omcl_contact.last_name or '')
            worksheet.write(row, 6, omcl_contact.first_name or '')
            worksheet.write(row, 7, omcl_contact.email)
            worksheet.write(row, 8, omcl_contact.title)

        worksheet.write(row, 17, item.get_level())
        worksheet.write(row, 19, item.get_frequency())

        locale = timezone.localtime(item.creation_date)
        worksheet.write(row, 34, date_format(locale, 'DATETIME_FORMAT'))
        worksheet.write(row, 35, six.u(str(item.created_by)))

        locale = timezone.localtime(item.modification_date)
        worksheet.write(row, 36, date_format(locale, 'DATETIME_FORMAT'))
        worksheet.write(row, 37, six.u(str(item.modified_by)))

    workbook.close()

    output.seek(0)
    response = HttpResponse(output.read(),
                            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename="competence_list.xlsx"'
    return response
</code></pre>
    </div>