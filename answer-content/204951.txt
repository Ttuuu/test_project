<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>Private Function InitializePlayerShip()
    Dim PlayerShip                                                          As ISpaceObject
    Set PlayerShip = SpaceObjectFactory.NewSpaceObject(Ship)
    CollectionShips.Add PlayerShip
End Function
</code></pre>
</blockquote>

<p>I really, really, <em>really</em> don't like this indentation style that shoves data types as far to the right as possible. The fact that, while consistent within modules, it's inconsistent across the project, makes it very distracting, and harder to parse what variable is of what data type - especially when there's a wall of declarations:</p>

<blockquote>
<pre><code>Private pFrequency                                                          As Double
Private pStartTS                                                            As UINT64
Private pEndTS                                                              As UINT64
Private pElapsed                                                            As Double
Private pRunning                                                            As Boolean
</code></pre>
</blockquote>

<p>Use an <a href="http://rubberduckvba.com/indentation" rel="noreferrer">indenter</a> to apply consistent indenting style across the entire project: don't change the rules depending on which module you're looking at. If fixed-column data types rocks your boat, configure the indenter as such, and use that. But don't switch indentation styles between modules.</p>

<p>That <code>Function InitializePlayerShip</code> procedure has no declared return type, and doesn't assign any; it returns an implicit <code>Variant/Empty</code> for no reason, every time it's invoked. Make it a <code>Sub</code> if you don't care for a return value.</p>

<p><code>CollectionShips.Add PlayerShip</code> is very worrying: you're storing application state in your classes' <em>default instance</em>, which effectively turns that state into global state. This is <em>exactly</em> what's wrong with storing state in default instances, and why it should be avoided at all costs: you might as well replace all these <code>PredeclaredId</code> classes with standard modules. They're full-fledged objects, but you're treating them like global state that can be accessed from anywhere: passing an instance as a parameter becomes useless/redundant, since the instance is already global.</p>

<p><code>VB_PredeclaredId</code> isn't wrong in itself. In fact, I use it all the time. But <strong>NEVER</strong> use it to turn a class into some global-scope data bag. Every single time I enable the predeclared ID on a class, I use it to expose a convenient <em>factory method</em>, and ensure I never, ever use that default instance as I would any other instance of the same type. <strong>Storing state in the default instance defeats the very purpose of having class modules in the first place.</strong></p>

<p>Every single <code>Collection*</code> class is redundant and should be removed. If you need a collection of ships, use a <code>Collection</code> and put ships in it.</p>

<p>Everything in <code>SpaceObjectFactory.bas</code> belongs in <code>SpaceObject</code>; only the <code>SpaceObject</code> class should ever need to use the <code>SpaceObject</code> type - everything else only needs to see <code>ISpaceObject</code>. That factory method belongs on the default instance, and the <code>SpaceObjectType</code> enum belongs in the <code>ISpaceObject</code> interface module. <em>Having a factory method on the class you're creating IS the reason for a <code>.Self</code> property and having a default instance</em> - without a factory method, there's pretty much no reason to have a <code>PredeclaredId</code>.</p>

<p>The <code>IsMissile</code> and <code>IsIncomingSpaceObject</code> properties smell: you're special-casing one <code>SpaceObjectType</code> and treating it differently from the others - from an OOP point of view, that's pretty much a violation of the Liskov Substitution Principle. What's special about a <code>Missile</code>? What's special about an "incoming space object"? You don't need either - you need a <code>Direction</code> and <code>Speed</code> values, perhaps encapsulated in some <code>Vector</code> class, exposed as a property on <code>ISpaceObject</code> - and now if you want you can have space objects coming from any direction, at varying speeds! Not that it's in the specs, but the point is, an <code>ISpaceObject</code> shouldn't care whether it's an <code>Alien</code> or a <code>Missile</code>, with the unwritten assumption that the <code>Missile</code> moves upward - using a <code>Vector</code> or a combination of <code>Direction</code> and <code>Speed</code> removes that assumption and makes every implementation equal.</p>
    </div>