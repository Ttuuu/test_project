<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Of course <code>min("3sdsdf44ldfkTsdfnsnприветsdfa5É")</code> (contains <em>unicode</em> chars)  approach won't be suitable in case if validating/requiring only ASCII chars. </p>

<p>Issues of initial approach :</p>

<ul>
<li><em>validating empty string.</em> To ensure non-empty input string we'll add a simple assertion at start:<br>
<code>assert string != "", "Empty string"</code></li>
<li><p><em>doubled traversals</em>. On valid input strings like <code>"3sdsdf44ldfkTe45456fghfgh678567sdfnsnsdfa23"</code> where the char with minimal code would be at the end part of the string the former approach will make a double traversal though 2 <code>for</code> loops. <br>To avoid that inefficiency we can combine validation and comparison/accumulation logic to be on a single iteration. (you may run time performance measurements to see the difference)</p></li>
<li><p><code>ord(letter)</code>. Duplicated calls can be eliminated through applying <em>Extract variable</em> technique:
<code>char_code = ord(char)</code></p></li>
</ul>

<hr>

<p>The final optimized version:</p>

<pre><code>def smallest_letter(string: str) -&gt; str:
    """
    Returns the smallest letter in the string
    Input is restricted to ASCII characters in range 0 &lt;= character &lt;= 127

    :param string: A string containing only ASCII letters
    :return: A string length one of the smallest letter
    """

    assert string != "", "Empty string"

    max_code, min_code = 128, 128

    for char in string:
        char_code = ord(char)
        assert char_code &lt; max_code, f"{char} is not ASCII character"  # ensure the char is in acceptable code range
        if char_code &lt; min_code:
            min_code = char_code

    return chr(min_code)
</code></pre>
    </div>