<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Be consistent with <code>#include</code></h1>
<p>We have C++ <code>&lt;cstdio&gt;</code> (which defines the C names in the <code>std</code> namespace), but the C-style <code>&lt;math.h&gt;</code> (which puts the identifiers in the global namespace).  For new C++ code, prefer <code>&lt;cmath&gt;</code>.  And don't use <code>using namespace std;</code> - that <a href="//stackoverflow.com/q/1452721">can be harmful</a>.</p>
<h1>Allow the compiler to define assignment</h1>
<p>We don't need to do anything in <code>operator=()</code> that's different from the compiler-generated (member-by-member copy) assignment.  Declaring our own actually prevents some optimizations that can be done for so-called "trivial" types (without the operator, the compiler knows it can simply copy the object's memory, but with one, it must assume that copying is more involved than that; it also inhibits the generation of a <em>move assignment</em> operator).</p>
<p>Similarly, we don't need to define a destructor - let the compiler generate that, too.</p>
<h1>Pass by value for primitive types</h1>
<p>There's no benefit to passing a reference to <code>const int</code> in the constructor - just pass the <code>int</code> by value.  That's simpler and (before optimization) faster.</p>
<p>Actually, why is this an <code>int</code>, when we could accept any <code>double</code> value?  And why is the default <code>1.0</code>?  I think that <code>0.0</code> (an empty circle) would be less surprising (it's then more like the numbers, where default initialization uses zero).  Consider also some validation - is a negative radius meaningful for your code?</p>
<p>It's better to return <code>double</code> by value from <code>getRadius()</code> for much the same reasons.</p>
<h1>Mark the constructor <code>explicit</code></h1>
<p>Unless you like surprises, it's better if you don't allow numbers to convert automatically to circles.</p>
<h1>Don't return 'const' values</h1>
<p>The <code>const double</code> return type of <code>getArea()</code> is no different to plain <code>double</code> - the <code>const</code> will be ignored (and that's a good thing).  So it's useless clutter to write it (and GCC will warn you, assuming you turn on a reasonable set of warnings).</p>
<h1>Operators</h1>
<p>What does it mean to subtract one circle from another?  In a geometry library, I'd want to get an annulus back (i.e. a circle with a hole cut out) or not be allowed to subtract at all.  Similarly for addition.</p>
<p>If you do choose to provide operators, you'll want to declare them with your interface (so this could be moved to a header).  And you should consider whether to provide the corresponding assignment operators (<code>+=</code> and <code>-=</code>).</p>
<p>On the positive, you have the correct argument and return types here.</p>
<h1>Portability</h1>
<p>Your environment clearly provides you with <code>M_PI</code> for a value of π.  That's not a standard identifier, and although it's a common extension, it's more portable to define your own.  Popular expressions producing <code>π</code> include <code>4 * std::atan(1)</code> and <code>std::acos(-1)</code>  These are both compile-time constants, so cost nothing to the program's users.</p>
<p>A thing I like in the <code>getArea()</code> is that you write <code>radius * radius</code> and didn't get seduced by <code>std::pow(radius, 2)</code> - which is generally slower and less accurate than multiplication (it's more versatile, because it supports fractional powers, but we don't need that here).</p>
<h1>Prefer C++ formatted output</h1>
<p>The <code>&lt;iostream&gt;</code> header provides I/O with better type-checking than the C-style <code>&lt;cstdio&gt;</code> functions.  Consider providing a <code>&lt;&lt;</code> operator to stream to a standard library stream.</p>
<hr>
<h1>Modified code</h1>

<pre><code>#include &lt;cmath&gt;
#include &lt;iosfwd&gt;

namespace corey
{
    class Circle
    {
        static constexpr double pi = 4 * std::atan(1);
        double radius;

    public:
        explicit Circle(double r = 0);

        double getRadius() const;
        double getArea() const;
    };

    Circle operator+(const Circle&amp;, const Circle&amp;);
    Circle operator-(const Circle&amp;, const Circle&amp;);

    std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const Circle&amp;);
}
</code></pre>

<pre><code>#include &lt;ostream&gt;

namespace corey {
    Circle::Circle(double r)
        : radius(r)
    {}

    double Circle::getRadius() const
    {
        return radius;
    }

    double Circle::getArea() const
    {
        return pi * radius * radius;
    }

    Circle operator+(const Circle&amp; lhs, const Circle&amp; rhs)
    {
        return Circle(lhs.getRadius() + rhs.getRadius());
    }

    Circle operator-(const Circle&amp; lhs, const Circle&amp; rhs)
    {
        return Circle(lhs.getRadius() - rhs.getRadius());
    }

    std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Circle&amp; c)
    {
        return os &lt;&lt; "Circle made with radius " &lt;&lt; c.getRadius()
                  &lt;&lt; " &amp; area " &lt;&lt; c.getArea();
    }
}
</code></pre>

<pre><code>#include &lt;iostream&gt;

int main()
{
    using corey::Circle;

    Circle c1(2);
    std::cout &lt;&lt; c1 &lt;&lt; '\n';

    const Circle c2(6);
    std::cout &lt;&lt; c2 &lt;&lt; '\n';

    Circle c3;
    c3 = c2 + c1;
    std::cout &lt;&lt; c3 &lt;&lt; '\n';

    c1 = c3;
    std::cout &lt;&lt; c1 &lt;&lt; '\n';
}
</code></pre>
    </div>