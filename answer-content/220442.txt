<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In terms of data structures and algorithms this all looks pretty straightforward - not much to say about that.</p>

<h3>Performance</h3>

<ul>
<li><code>Edges.ContainsKey</code> and <code>Edges[...]</code> each perform a lookup. <code>Edges.TryGetValue</code> lets you achieve the same with just a single lookup.</li>
</ul>

<h3>Design</h3>

<ul>
<li>I see no reason why <code>Trie.Head</code> should be public, and certainly not why it should have a public setter. That's poor encapsulation. Likewise, <code>TrieNode.Edges</code> should be get-only: you don't want outside code to be able to do <code>Edges = null;</code>.</li>
<li><code>Search</code> and <code>StartsWith</code> do exactly the same thing, except for the final check. I'd move the duplicate code to a <code>TrieNode FindNode(string prefix)</code> helper method.</li>
<li><code>TrieNode</code> is only used internally within <code>Trie</code>, so it makes sense to make it a private inner class.</li>
</ul>

<h3>Other notes</h3>

<ul>
<li>You can remove <code>Trie</code>'s constructor if you initialize <code>Head</code> directly: <code>TrieNode Head { get; } = new TrieNode();</code>. The same goes for <code>TrieNode</code> and <code>Edges</code>.</li>
<li>I'd replace those <code>for</code> loops with <code>foreach</code> loops, for clarity's sake.</li>
<li>Comparing a boolean against <code>true</code> is unnecessary. Just do <code>return current.IsTerminal;</code></li>
<li>I'd replace those default LeetCode comments with C#-specific xml comments.</li>
</ul>
    </div>