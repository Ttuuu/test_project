<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I was solving this problem at Pramp and I have trouble figuring out the algorithm for this problem.</p>
</blockquote>

<p>On the contrary, you've done a very good job of coming up with a solution. There are ways to improve it though.</p>

<p>As you note, this is just the Longest Common Subsequence problem in a thin disguise.  The "deletion distance" between two strings is just the total length of the strings minus twice the length of the LCS.</p>

<p>That is, the LCS of <code>dogs</code> (4 characters) and <code>frogs</code> (5 characters) is <code>ogs</code> (3 characters), so the deletion distance is (4 + 5) - 2 * 3 = 3.</p>

<p>Therefore, all you need to do to solve the problem is to get the length of the LCS, so let's solve that problem.</p>

<p>Your solution is pretty good but the primary problem is that it takes O(mn) time and memory if the strings are of length m and n.  You can improve this.  </p>

<p>The first thing to notice is that <em>if the strings have a common prefix or suffix then you can automatically eliminate it</em>.  That is, the deletion distance for <code>Who let the big dogs out?</code> and <code>Who let the little frogs out?</code> is the same as the deletion distance for <code>big d</code> and <code>little fr</code>. <strong>It is very cheap and easy to determine if two strings have a common prefix and suffix</strong>, and you go from having an array with 25*29 elements to an array with 5*9 elements, a huge win.</p>

<p>The next thing to notice is: you build the entire <code>m*n</code> array up front, but while you are filling in the array, <code>m[i][j]</code> only ever looks at <code>m[i-1][j-1]</code> or <code>m[i-1][j]</code> or <code>m[i][j-1]</code>. Since you never look at an array line that is <em>two away</em>, you don't ever need more than two lines! That is, you can:</p>

<ul>
<li>allocate and compute the first line</li>
<li>allocate and compute the second line given the first line</li>
<li>throw away the first line; we'll never use it again</li>
<li>allocate and compute the third line from the second line</li>
<li>throw away the second line</li>
<li>â€¦ and so on</li>
</ul>

<p>You still do O(mn) operations, and you still allocate <em>in total</em> the same amount of memory, but you only have a small amount of it in memory <em>at the same time</em>.  If the strings are large, that's a considerable savings.</p>
    </div>