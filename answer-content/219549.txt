<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You don’t need <code>Objects.isNull(...)</code>.  Simply using <code>!= null</code> would suffice, and avoids an extra function call so should be faster (unless the compiler can optimize the call out).</p>

<hr>

<p>Your loop at the end is using raw types.  You should use</p>

<pre><code>for(Map.Entry&lt;Character, Integer&gt; e : map.entrySey()) {
</code></pre>

<p>instead, for type safety.  Your castings then are unnecessary.</p>

<hr>

<p>There is no need to fetch the character <code>c = e.getKey()</code> unless <code>value == 1</code> is true; you can more that inside the <code>if</code> for a minor performance gain.</p>

<hr>

<p>Counting the character occurrences is slightly dangerous: you could overflow an <code>Integer</code>, or even a <code>Long</code> with a long enough string.  Simply flagging the character as “seen once” or “more than once” avoids the counting overflow bug.</p>

<hr>

<p>The <code>map.put(c, 1)</code> call returns the previous value stored in the map, or <code>null</code> if no value was stored.  Instead of fetching the value, testing whether it was present or not, and then storing another value, why not store &amp; fetch in one operation?  Then, if a value was already present, you can flag it as occurring twice (or more).</p>

<pre><code>if( map.put(c, 1) != null )
    map.put(c, 2);
</code></pre>

<hr>

<p>Since you are no longer counting, you don’t need a <code>LinkedHashMap&lt;Character, Integer&gt;</code>.  You just have 3 states: not seen, seen once, and seen more than once.  A <code>Boolean</code> can cover this.  <code>Boolean.TRUE</code> is seen once (unique), <code>Boolean.FALSE</code> is seen more than once, and not present (<code>null</code>) is never seen.</p>

<pre><code>LinkedHashMap&lt;Character, Boolean&gt; unique = new LinkedHashMap&lt;&gt;();

for(char c: ...) {
    if (unique.put(c, Boolean.TRUE) != null)
        unique.put(c, Boolean.FALSE);
}
</code></pre>

<p>We’ve saved a tiny bit of space, since we only have two <code>Boolean</code> objects, instead of several (possibly interned) <code>Integer</code> objects.  Much more importantly, we’ve avoided auto boxing, so this should be much faster.</p>

<hr>

<p>We are still wasting time storing both <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> successively on the third and subsequent occurrences of any character.</p>

<p>If we always store <code>Boolean.FALSE</code>, then on the first occurrence <code>null</code> will be returned.  We can detect that and overwrite it with <code>Boolean.TRUE</code> instead, so the exceptional first occurrence has 2 map <code>put</code> operations, but subsequent occurrences only use 1 map <code>put</code> operation, for better performance.</p>

<pre><code>    if (unique.put(c, Boolean.FALSE) == null)
        unique.put(c, Boolean.TRUE);
</code></pre>

<hr>

<p>To truly gain speed and reduce memory usage, avoid clunky <code>HashSet&lt;&gt;</code> memory structures, and store the data yourself.  You are told you can assume only lowercase letters are used, so you can use a <code>new byte[26]</code> array for “not seen”, “seen once”, and “seen multiple times” storage.  And use a <code>new char[26]</code> array to maintain encounter order of “first seen” characters.</p>

<p>You can use a bit more memory and store the index of the first seen characters in a <code>new int[26]</code>, so you can avoid the linear <code>s.indexOf(c)</code> search at the end.  You could even use <code>0</code> for not seen, <code>index+1</code> for seen once, and <code>-1</code> for seen multiple times, and avoid the <code>new byte[26]</code> flag storage.</p>
    </div>