<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have five improvements to suggest. The first two are about sanitizing inputs, and are very important. The next two are about user interface design, and are minor. The last is about coding style, and is completely optional.</p>

<ol>
<li><p>Fail elegantly on non-integer inputs. This can be done using the <code>fail()</code>, <code>clear()</code>, and <code>ignore()</code> methods of <code>std::cin</code>.</p></li>
<li><p>Respond to <code>EOF</code> appropriately. This can be done using <code>std::cin.eof()</code>.</p></li>
<li><p>Repeat the prompt after printing an error message.</p></li>
<li><p>Check spelling of <code>"corresponds"</code>. Do not capitalize <code>"alphabet"</code></p></li>
<li><p>In general, I dislike returning inside of a loop. For a clearer control flow, I would loop until getting a valid input, then, outside the loop convert to a letter.</p></li>
</ol>

<pre><code>#include &lt;iostream&gt;
#include &lt;limits&gt;

int main() {
    int letter = 0;

    while (1) {
        std::cout &lt;&lt; "Please type in a number: ";
        std::cin &gt;&gt; letter;

        if (std::cin.eof()) {
            std::cout &lt;&lt; std::endl;
            return 1;
        } else if (std::cin.fail()) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(),'\n');
            std::cout &lt;&lt;"Integer input required. Try again.\n";
        } else if (letter &lt; 1 || letter &gt; 26) {
            std::cout &lt;&lt;"The English alphabet only has 26 letters. Try again.\n";
        } else {
            break;
        }
    }

    std::cout &lt;&lt; "The letter that corresponds to that value is '" 
          &lt;&lt; char(64+letter) &lt;&lt; "'\n";

    return 0;
}
</code></pre>
    </div>