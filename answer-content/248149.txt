<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>For Pong:</h1>
<pre><code>if(input('Do you want to have a AI? (Y or N) ') == 'Y'):
    Ai = True
else:
    Ai = False
</code></pre>
<p>This can be shortened to simply</p>
<pre><code>ai = input('Do you want to have a AI? (Y or N) ').upper() == 'Y'
</code></pre>
<p><code>==</code> already evaluates to <code>True</code>/<code>False</code>, so using it in a condition then dispatching to <code>True</code>/<code>False</code> is redundant. I also added in a call to <code>upper</code> so the user can enter either case of "y" and it will still work.</p>
<hr>
<pre><code>random_range = []

if(ai == True):
    for i in range(-90, 90):
        random_range.append(i)
</code></pre>
<p>A few things to note:</p>
<ul>
<li><p>Similar to before, comparing against <code>True</code> using <code>==</code> is redundant. <code>ai</code> will either be <code>True</code> or <code>False</code> already, which is what <code>ai == True</code> would evaluate to to anyways. <code>if ai:</code> is fine.</p>
</li>
<li><p>If you're ever simply <code>append</code>ing to a list in a loop, you should consider using a list comprehension instead. Here though, your intent is just to turn the <code>range</code> into a list, so <code>random_range = list(range(-90, 90))</code> will work fine.</p>
</li>
<li><p><code>random_range</code> is only ever used later if <code>ai == true</code>. You could unconditionally create the list instead of checking what <code>ai</code> is. Ya, that wastes a little bit of time, but for such a small list, the time should be negligible.</p>
</li>
</ul>
<hr>
<hr>
<h1>For Breakout:</h1>
<p>I'd use "list multiplication" to neaten up all the massive lists you have at the top. For example, <code>Block_default</code> can be :</p>
<pre><code>block_default = [True] * (5 * 8)  # Or just [True] * 40
</code></pre>
<p>And similarly, <code>Block_y</code> could be something like:</p>
<pre><code>block_y = [row
           for val in range(250, 89, -40)  # Generate each of the vals
           for row in [val] * 8]  # Use list multiplication, then flatten
</code></pre>
<p>If you make some variables at the top that store the height and width of the block of blocks, you can use them instead, and also use some more sequence operations like <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> to <em>greatly</em> reduce duplication:</p>
<pre><code>BLOCKS_WIDTH = 8
BLOCKS_HEIGHT = 5

block_default = [True] * (BLOCKS_HEIGHT * BLOCKS_WIDTH)

block_y = [row
           for val in range(250, 89, -40)
           for row in [val] * BLOCKS_WIDTH]

block_x = list(range(-350, 351, 100)) * BLOCKS_HEIGHT

# Take the two existing coordinate lists, and "zip" them together
block_pos = list(zip(block_x, block_y))  
</code></pre>
<p>Also note, I fixed up your names. <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">PEP8</a> says that plain variables should be in "snake_case"</p>
<p>Beyond that though, I haven't used Turtle in forever, so I can't comment on much else.</p>
    </div>