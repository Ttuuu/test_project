<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>Node&lt;T&gt; nodeBefore = getNodeByIndex(index - 1);
Node&lt;T&gt; nodeBehind = getNodeByIndex(index + 1);
nodeBefore.setNextNode(nodeBehind);
</code></pre>

<p>This is from the <code>delete()</code> function. You call <code>getNodeByIndex()</code> twice which iterates from the start of the list twice, instead you can just go 2 nodes forward from <code>nodeBefore</code>:</p>

<pre><code>Node&lt;T&gt; nodeBefore = getNodeByIndex(index - 1);
Node&lt;T&gt; nodeBehind = nodeBefore.getNextNode().getNextNode();
nodeBefore.setNextNode(nodeBehind);
</code></pre>

<p>Also I would rename <code>nodeBehind</code> to <code>nodeAfter</code> for the sake of clarity.</p>

<hr>

<p>In the implementation of <code>getNumberOfElements()</code> you don't check if the first element is null.</p>

<hr>

<p>When deleting the last node in the list, you should turn the node into an empty node instead of removing it completely to ensure that <code>getEmptyNode()</code> will have a node to return.</p>

<hr>

<p>You can keep track of the number of nodes instead of re-counting them every time, that would greatly improve the performance of <code>getNumberOfElements()</code> and the other methods that use it:</p>

<pre><code>public class LinkedList&lt;T&gt; {
    private Node&lt;T&gt; startNode;
    private int length; // increment/decrement this every time you add/remove an element
</code></pre>

<hr>

<p>I don't like the idea of keeping an empty node at the end and using <code>getEmptyNode()</code> to find it by iterating over the whole list, it would be much simpler if you didn't keep an extra empty node at the end but kept a reference to the last node for internal use.</p>

<hr>

<p>In the constructor of <code>Node</code> you don't need to set the node's properties to null, they already are null.</p>
    </div>