<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>TDD is not for finding <em>"elegant"</em> solutions, but for finding <em>working</em> solutions that cover all edge cases. Without edge cases, solutions are often too naive and in the end won't work. </p>

<p>You missed some edge cases; the task states: "order of <strong>other elements</strong> in the array" (that are integer). How about <code>Infinity</code> and <code>-Infinity</code>? Are they numbers? :) <code>isNaN(Infinity)</code>?</p>

<p>Another thing is, that beauty lies in the eye of the beholder. For me elegant code, is code, that is easy to grasp and not overly complex. Whenever a problem can be solved in such a generic way, that edge case do not need any special handling this is good code. :)</p>

<p>Speaking of which - your problem is clearly about <em>transforming</em> an array - with JavaScript you have a good set of <code>Array.fns()</code> at you disposal and fat arrow functions. Thus I'd intuitively never use loops, but only array functions.</p>

<p>The original problem sounds very constructed to me - I guess some stupid code interview stuff. I guess it is about thinking of how to find zeros in an array and move them around.</p>

<p>However the solution is quite trivial if you are <em>thinking outside the box</em> (which you are!), that with the elements being numbers, the solution is <strong>not</strong> about <em>moving</em> around zeros (and thus maintain their reference, if it where not zeros but objects), <strong>but</strong> in <em>filtering</em> and reconstructing them.</p>

<pre><code>const move_zeros_to_left = function(unsortedArray) {
  const numberOfZeros = unsortedArray.filter(item =&gt; item === 0).length;
  const nonZeroArray = unsortedArray.filter(item =&gt; item !== 0);
  return [...Array.from({length: numberOfZeros}).fill(0), ...nonZeroArray];
}
</code></pre>

<p>Covers all the edge cases and is <em>readable</em>. Your provided sample solution is the worst of all solution, because it neglects the fact, that JavaScript has a rich set of Array functions and thus it is neither <em>readable</em> nor <em>idiomatic</em> and I'd say thus not elegant all. :)</p>
    </div>