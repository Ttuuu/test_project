<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Vulnerabilities</h1>

<p>There's <strong>no way this stored procedure can be used for SQL injection</strong>. The only way a stored procedure can allow SQL injection is if it allows an unsanitized user-entered string to be used to build a dynamic query using <code>sp_executesql</code> <a href="https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-executesql-transact-sql?view=sql-server-2017" rel="nofollow noreferrer">(see docs)</a>. You're all safe on the vulnerabilities side.</p>

<h1>Functionality</h1>

<p>The intended functionality with regards to the <code>FilterBy</code>s is not very clear in your posts so I'll try to explain how I think they'll behave:</p>

<p>Your procedure has three "modes" depending on what number is entered in to <code>FilterBy</code>.</p>

<ol>
<li>For <code>FilterBy = 1</code>, the procedure would return any rows that have the <code>@Name</code> parameter inside the <code>Name</code> column. It ignores whatever is entered in to <code>@Code</code> in this instance. Note, if <code>@Name</code> is an empty string, <strong>all records will be returned. Is that something you want?*</strong></li>
<li>For <code>FilterBy = 2</code>, the procedure returns any rows where the <code>@Code</code> parameter matches the <code>Code</code> column entirely. In this instance, if <code>@Code</code> is <code>null</code> or empty, <strong>no records are returned</strong>. Whatever is passed in as <code>@Name</code> is ignored â€“ whether it's <code>null</code> or not.</li>
<li>For <code>FilterBy = 3</code>, the procedure returns all rows, but only if <code>@Name</code> and <code>@Code</code> are <code>null</code>. If either of these parameters <strong>not</strong> <code>null</code>, no records are returned.</li>
</ol>

<hr>

<p>* If you don't want an empty string to return all rows, change the line to something like:</p>

<p><code>(@FilterBy = 1 AND Name LIKE '%'+@Name+'%' AND @Name &lt;&gt; '')</code></p>

<h1>Performance</h1>

<p>Performance of this query largely depends on the size of the <code>Dictionary</code> table (obviously), and indexes. If you can afford the disk space and slower write speed, you could add an index to <code>Dictionary</code> with the <code>Code</code> column as the first indexed field. Make sure you include <code>RecID</code>, <code>Status</code>, and <code>Name</code> columns somewhere in that index. This would increase performance when using <code>FilterBy = 2</code>.</p>

<p>You could try adding another index with the <code>Name</code> field first, however this wouldn't do much for performance since you're using wildcards on the left side of the parameter when searching the <code>Name</code> field. <a href="http://olicomber.co.uk/blog/b/Fast_wildcard_searching_in_SQL/" rel="nofollow noreferrer">Here's a quick little explanation of why with a nice analogy</a>.</p>
    </div>