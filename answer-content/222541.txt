<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<p>It's a good idea to give it a day or two before you accept an answer. Accepting too early discourages other people from answering.</p>

<p>Use @Override when overriding methods in a parent type. This makes the code easier to read and helps the compiler to warn you when something is amiss.</p>

<p>Your variable names are mostly meaningless, which makes your code hard to read and understand. That makes it more likely somebody editing it in the future will make a mistake. Use clear, meaningful variable names.</p>

<p>Your use of whitespace is inconsistent and non-idiomatic. There should be whitespace between a control flow keyword (<code>if</code>, <code>for</code>, ..) and the opening parenthesis. There should be whitespace on either side of a binary operator (<code>+</code>, <code>-</code>, ..). There should be no whitespace after an opening parenthesis. Again, this makes the code easier to read.</p>

<p>You should use guard clauses to return early and keep your code relatively flat. It's easy to get lost in code that looks like a <code>&gt;</code>.</p>

<p>It's confusing that you have one method name in Portuguese and the rest in English.</p>

<h1>ChallangePerformance</h1>

<p>Challenge is misspelled.</p>

<p>Curly braces belong on the same line as the method declaration.</p>

<p>In java, we use camelCase, not snake_case.</p>

<p>All your math and looping is extraneous. The maximum number of burgers that can be consumed is <code>time / min(timeToEatBurger1, timeToEatBurger2)</code>. The amount of time left over is <code>time % min(timeToEatBurger1, timeToEatBurger2)</code>.</p>

<p>The <code>still_has</code> variable isn't necessary. Just <code>break</code> out of the loop.</p>

<p>Your handling of readers is dangerous. You should always make sure that readers get closed in a <code>finally</code> block or, preferably, using a <code>try-with-resources</code>.</p>

<p>Don't use class variables to save state that you need to pipe from one internal method to another. Use return variables from the methods and pass the values.</p>

<p>With some refactoring, you can loop over the reading of lines. The canonical way to do that is <code>String line; while ((line = bufferedReader.readLine() != null) {</code></p>

<p>Declare arrays as <code>String[] array</code>, not <code>String array[]</code>. Both are legal, but the first is idiomatic and the second is rare.</p>

<p><code>openFile</code> doesn't really need a <code>Filter7</code> as a variable.</p>

<p><code>openFile</code> really wants to check for <code>ACCEPT_OPTION</code>, since both <code>CANCEL_OPTION</code> and <code>ERROR_OPTION</code> are bad cases handled the same way. And if you modify the method to return the File, you can just always return <code>getSelectedFile()</code>, which will return null in either of those cases.</p>

<p><code>openFont</code> is confusing. A <code>font</code> in English is a specific thing unrelated to your usage here.</p>

<p>Remove system-generated TODOs.</p>

<h1>Filter7</h1>

<p>The name of this class is not meaningful. Why 7? Why not EstFilter?</p>

<p>Hopefully Filter7 is defined in its own file. If not, it should be either a member of <code>ChallengePerformance</code> or defined in a separate file. While it's permissible to declare multiple classes in the same file, it's highly frowned upon and potentially problematic.</p>

<p><code>if</code> statements don't need a <code>;</code> at the end.</p>

<p>It appears that <code>getExtensao()</code> is designed to be used only by <code>Filter7</code>. In that case, it should be <code>private</code>. Try to minimize the scope of variables and methods wherever possible.</p>

<p>The second half of <code>accept</code> could be written <code>return "est".equalsIgnoreCase(getExtensao(file));</code></p>

<p><code>getExtensao</code> would be a little cleaner if you passed in a filename rather than a file.</p>

<p>The condition in the <code>getExtensao</code> <code>if</code> clause would be clearer if you used optional parentheses.</p>

<p>With all these modifications, your code might look more like:</p>

<pre><code>public class ChallengePerformance {

    public static void main(final String[] args) {

        final File archive = findArchive();
        if (archive == null || archive.getName().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Invalid file name", "Invalid file name", JOptionPane.ERROR_MESSAGE);
            return;
        }

        final long start = System.currentTimeMillis();

        try (final FileReader fileReader = new FileReader(archive);
                final BufferedReader bufferedReader = new BufferedReader(fileReader)) {

            String line;
            while ((line = bufferedReader.readLine()) != null) {
                final String[] array = line.split(" ");
                final int timeToEatKrustyBurger = Integer.parseInt(array[0]);
                final int timeToEatApuBurger = Integer.parseInt(array[1]);
                final int timeToEatFastestBurger = Math.min(timeToEatKrustyBurger, timeToEatApuBurger);

                final int timeAvailable = Integer.parseInt(array[2]);
                final int burgersEaten = timeAvailable / timeToEatFastestBurger;
                final int beersDrunk = timeAvailable % timeToEatFastestBurger;

                System.out.println(line);
                System.out.println(" " + burgersEaten + " " + beersDrunk);
            }
        } catch (final IOException e) {
            e.printStackTrace();
        }

        final long end = System.currentTimeMillis();
        System.out.println(new SimpleDateFormat("ss.SSS").format(new Date(end - start)));

    }

    private static File findArchive() {
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode( JFileChooser.FILES_ONLY );
        fileChooser.addChoosableFileFilter(new EstFilter());

        return fileChooser.getSelectedFile();
    }
}
</code></pre>

<p>With a filter class:</p>

<pre><code>final class EstFilter extends FileFilter {

    @Override
    public boolean accept(final File file) {
        if (file == null) {
            return false;
        }

        if (file.isDirectory()) {
            return true;
        }

        return "est".equalsIgnoreCase(getExtension(file.getName()));
    }

    /**
     * Returns which extensions can be chosen
     */
    @Override
    public String getDescription() {
        return "*.est";
    }

    /**
     * Returns the part with the extension of an archive
     */
    private String getExtension(final String filename) {
        if (filename == null) {
            return null;
        }

        final int extensionIndex = filename.lastIndexOf('.');
        if ((extensionIndex &gt; 0) &amp;&amp; (extensionIndex &lt; filename.length() - 1)) {
            return filename.substring(extensionIndex + 1).toLowerCase();
        }

        return null;
    }
}
</code></pre>
    </div>