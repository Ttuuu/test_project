<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main issue is that the comparator object is passed by value. Not only from your application to <code>std::sort()</code>, but it's also passed by value internally in the <a href="https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1950" rel="noreferrer">implementation of <code>std::sort()</code></a>. This means that <code>bag</code> and <code>indices</code> get copied by value a lot. So you ideally want to generate those only once, and then have <code>class compare</code> store a pointer or reference to those. I think there are several possible approaches; you could keep the constructor mainly as it is, but instead of storing those vectors directly, use a <code>std::shared_ptr</code> to manage their storage. The default copy constructor will then just take care of updating the refcounts for you:</p>
<pre><code>struct compare {
    std::shared_ptr&lt;std::multiset&lt;unsigned&gt;&gt; bag;
    std::shared_ptr&lt;std::map&lt;unsigned, size_t&gt;&gt; indices;

    /// Extract frequency and initial index of every element.
    explicit compare(vector const &amp;xs):
        bag{new std::multiset&lt;unsigned&gt;},
        indices{new std::map&lt;unsigned, size_t&gt;},
    {
        for (size_t i = 0u; i &lt; xs.size(); ++i) {
            unsigned const x = xs[i];
            bag-&gt;insert(x);
            if (!indices-&gt;count(x)) {
                (*indices)[x] = i;
            }
        }
    }

    /// True if `x` must go before `y`.
    [[nodiscard]] bool operator()(unsigned x, unsigned y) const {
        return bag-&gt;count(x) &gt; bag_&gt;count(y)
               || (bag-&gt;count(x) == bag-&gt;count(y) &amp;&amp; indices-&gt;at(x) &lt; indices-&gt;at(y));
    }
};
</code></pre>
<p>You can improve this further by combining <code>bag</code> and <code>indices</code> into on struct, so you only need one <code>std::shared_ptr</code> to hold them.</p>
    </div>