<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are not handling all the constraints, and that is the main problem leading to long runtime. So the only change needed is in the <code>solve</code> member function: </p>

<blockquote>
<pre><code>  // Attempt to solve the puzzle.
  void Sudoku::solve()
  {
      // Note - values 0..8 in Backtrack correspond to values 1..9 in the 
      // usual puzzle.
      solved = false;
      while ((!solved) &amp;&amp; problem.more())
      {
          int known = problem.numberOfVariables();
          for (int i = 0; i &lt; 81; i++) {
              int rw = row(i);
              int col = column(i);
              int sqr = square(i);
              for (int d = 0; d &lt; 81; d++) {
                  int w = row(d);
                  int f = column(d);
                  int e = square(d);
                  if ((initial[i] &gt; 0 &amp;&amp; initial[i] != problem[i] + 1) ||
                      (d != i 
                          &amp;&amp; problem[i] == problem[d] 
                          &amp;&amp; (w == rw || col == f || sqr == e))) {
                      solved = false;
                      known = min(known, max(d, i));
                  }
              }
          }
          if (known &gt;= problem.numberOfVariables()) {
              solved = true;
          }
          else {
              problem.prune(known + 1);
          }
      }
   }
</code></pre>
</blockquote>

<p>The problem is that you are not taking into account the already filled values in the same col, row or box. This leads to a huge amount of unnecessary backtracking iterations. </p>

<p>So the correct code would be (with some minor changes such as moving out the 1st condition, since when that is true then the 2nd was never getting executed anyway):</p>

<pre><code>// Attempt to solve the puzzle.
void Sudoku::solve()
{
    // Note - values 0..8 in Backtrack correspond to values 1..9 in the 
    // usual puzzle.
    solved = false;
    while ((!solved) &amp;&amp; problem.more())
    {
        int known = problem.numberOfVariables();
        for (int i = 0; i &lt; 81; i++) {

            //existing value should be fixed first
            if (initial[i] &gt; 0 &amp;&amp; initial[i] != problem[i] + 1)
            {
                known = std::min(known,i);
                break;
            }

            int rw = row(i);
            int col = column(i);
            int sqr = square(i);

            for (int d = 0; d &lt; 81; d++) {
                int w = row(d);
                int f = column(d);
                int e = square(d);
                if(w == rw || col == f || sqr == e)
                {
                    if(d != i &amp;&amp; problem[i] == problem[d]) 
                    {  
                        known = min(known, max(d, i));
                    }
                    // you need to check if the same value exists in 
                    // the same row, col, or square 
                    // And if it does exist then fix i'th location first
                    if(d != i &amp;&amp; initial[d]&gt;0 &amp;&amp; initial[d] == problem[i]+1)
                    {
                        known = std::min(known,i);
                    }
                }
            }
        }

        if (known &gt;= problem.numberOfVariables()) {
            solved = true;
        }
        else {
          problem.prune(known + 1);
        }
    }
 }
</code></pre>
    </div>