<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As Adriano Repetti mentioned in comments you can already achieve this with extension methods on IQueryable.</p>

<p>E.g. for your users example:</p>

<pre><code>public static class UserPredicates
{
    public static IQueryable&lt;User&gt; WhichAreMale(this IQueryable&lt;User&gt; users)
    {
        return users.Where(u =&gt; u.Gender == Gender.Male);
    }

    public static IQueryable&lt;User&gt; WhichAreActive(this IQueryable&lt;User&gt; users)
    {
        return users.Where(u =&gt; u.IsActive);
    }

    public static IQueryable&lt;User&gt; WhichHaveAgeGreaterThan(this IQueryable&lt;User&gt; users, int age)
    {
        return users.Where(user =&gt; user.Age &gt;= age);
    }
}
</code></pre>

<p>Then you happily use it with your EF <code>DbSet&lt;User&gt;</code>:</p>

<pre><code>var maleOver25s = Users
        .WhichAreActive()
        .WhichAreMale()
        .WhichHaveAgeGreaterThan(25)
        .Include(u =&gt; u.UserProfile);
</code></pre>

<p>Update:</p>

<p>You can also add in other collections as normal parameters:</p>

<pre><code>public static class Predicates
{
    public static IQueryable&lt;User&gt; SomePredicate(this IQueryable&lt;User&gt; users, IQueryable&lt;Course&gt; courses)
    {
        // join courses and users and return users.
    }
}
</code></pre>
    </div>