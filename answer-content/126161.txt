<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all you are not verifying the input of your program. You also don't need the strings <code>stringFirstNumber</code>  <code>stringSecondNumber</code> you can just put this all into a method that will check if the input is in correct format and also return the value something like this :</p>

<pre><code>    private static double SetNumber(string outputText)
    {
        double parse;
        Console.Write(outputText);
        string tempInput = Console.ReadLine();
        while (!double.TryParse(tempInput, out parse))
        {
            Console.WriteLine("Incorrect input !");
            Console.Write(outputText);
            tempInput = Console.ReadLine();
        }
        return double.Parse(tempInput);
    }
</code></pre>

<p>and use it like this :</p>

<pre><code>        double firstNumber = SetNumber("Type you first number : ");
        double secondNumber = SetNumber("Type you second number: ");
</code></pre>

<p>Now, about the operations.. I'm not sure if you wanted the sign <em>%</em> to work as percentage because if that's the case it wont. This is called modulus you can read more about it here <a href="https://msdn.microsoft.com/en-us/library/0w4e0fzs.aspx">https://msdn.microsoft.com/en-us/library/0w4e0fzs.aspx</a> if you want to have percentages you must implement this yourself. Anyway I would recommend creating an array of strings that holds all your currently available operations and store them there something like this :</p>

<pre><code>private static readonly string[] operations = { "+", "-", "*", "/", "^", "%" };
</code></pre>

<p>Note that we are creating this variable outside of the <code>static void Main()</code>. Here we are seeing a few modifiers which might be new to you so let me quickly go over them.</p>

<ul>
<li><p><code>private</code> means we are keeping this variable only in our current class (<em>Program</em>)</p></li>
<li><p><code>static</code> means we are having just 1 instance of this variable.</p></li>
<li><p><code>readonly</code> means we wont modify those variables it's similar to <code>const</code> but it gives us a little bit more flexibility of where we can declare the value of the variable.</p></li>
</ul>

<p>If the modifiers confuse you just remove them :</p>

<pre><code>static string[] operations = { "+", "-", "*", "/", "^", "%" };
</code></pre>

<p>You need the static one since we are using this variable in static methods.</p>

<p>Let's move on. Once we have our operations declared in a <code>string</code> array we can easily check if the user is entering a correct input by creating the following function :</p>

<pre><code>    private static bool IsValidOperation(string input)
    {
        return operations.Contains(input);
    }
</code></pre>

<p>Well we have the checker method which uses <em>LINQ.Contains()</em> this extension checks if a specific collection contains a specific value. Now we just need a method that will return a <code>string</code> value to our <code>stringOperation</code></p>

<pre><code>    private static string SetOperation(string outputText)
    {
        Console.Write(outputText);
        string tempInput = Console.ReadLine();
        while (!IsValidOperation(tempInput))
        {
            Console.WriteLine("Incorrect input !");
            Console.Write(outputText);
            tempInput = Console.ReadLine();
        }
        return tempInput;
    }
</code></pre>

<p>and use like this </p>

<pre><code>string stringOperation =
          SetOperation(
               "Enter the operation + (addition), - (soustraction), * (multiplication), / (division), ^ (exposant) or % (reste) :");
</code></pre>

<p>Now notice that we are using only string's. I removed the integer idea that you had initially. You can still implement it pretty easily working around with the indexes of the string array, but I don't this is necessary. Also one thing to mention is that we are again taking a <em>parameter</em> in our method <code>SetOperation</code> well we could've avoided that since we have just 1 operation to be entered so we could've just do </p>

<pre><code>Console.Write("Enter the operation + (addition), - (soustraction), * (multiplication), / (division), ^ (exposant) or % (reste) :");
</code></pre>

<p>Instead of <code>Console.Write(outputText);</code>. But I used the same parameters in the previous method too so it's good to keep some consistency if you are still learning. We are almost done now all that's left is the big mess with <code>if</code>/<code>else if</code> statements and a <code>switch</code> case too .. So as I said earlier using <code>integer</code> and <code>string</code> is useless so I went just for a string. Combining both the <code>switch</code> case and the <code>if</code>/<code>else if</code> statements into this :</p>

<pre><code>        switch (stringOperation)
        {
            case "+":
            case "addition":
                result = firstNumber + secondNumber;
                break;
            case "-":
            case "soustraction":
                result = firstNumber - secondNumber;
                break;
            case "*":
            case "multiplication":
                result = firstNumber*secondNumber;
                break;
            case "/":
            case "division":
                result = firstNumber/secondNumber;
                break;
            case "^":
            case "exposant":
                result = Math.Pow(firstNumber, secondNumber);
                break;
            case "%":
            case "reste":
                result = firstNumber%secondNumber;
                break;
        }
</code></pre>

<p>I prefer the switch case version here because it's more readable but you can go with <code>if statements</code> too</p>

<pre><code>        if (stringOperation == "+" || stringOperation == "addition")
        {
            result = firstNumber + secondNumber;
        }
        else if (stringOperation == "-" || stringOperation == "soustraction")
        {
            result = firstNumber - secondNumber;
        }
        else if (stringOperation == "*" || stringOperation == "multiplication")
        {
            result = firstNumber*secondNumber;
        }
        else if (stringOperation == "/" || stringOperation == "division")
        {
            result = firstNumber/secondNumber;
        }
        else if (stringOperation == "^" || stringOperation == "exposant")
        {
            result = Math.Pow(firstNumber, secondNumber);
        }
        else if (stringOperation == "%" || stringOperation == "reste")
        {
            result = firstNumber%secondNumber;
        }
</code></pre>

<p>Notice that we don't have <code>else/default</code> at the end in case of wrong input, because we already made sure the nasty user wont be able to proceed unless he sticks to our rules.</p>

<p>And lastly I edited this line </p>

<pre><code>Console.WriteLine("\nResult of " + firstNumber + " " + stringOperation + " " + secondNumber + " = " + result + ".");
</code></pre>

<p>into a <em>formated</em> <code>string</code> which also looks a lot more readable :</p>

<pre><code>Console.WriteLine("Result of {0} {1} {2} = {3}", firstNumber, stringOperation, secondNumber, result);
</code></pre>

<p>Here's the full code if you got confused where to put something :</p>

<pre><code>    private static readonly string[] operations = { "+", "-", "*", "/", "^", "%" };
    static void Main(string[] args)
    {
        double result = 0;
        double firstNumber = SetNumber("Type you first number : ");
        double secondNumber = SetNumber("Type you second number: ");

        string stringOperation =
            SetOperation(
                "Enter the operation + (addition), - (soustraction), * (multiplication), / (division), ^ (exposant) or % (reste) :");

        switch (stringOperation)
        {
            case "+":
            case "addition":
                result = firstNumber + secondNumber;
                break;
            case "-":
            case "soustraction":
                result = firstNumber - secondNumber;
                break;
            case "*":
            case "multiplication":
                result = firstNumber*secondNumber;
                break;
            case "/":
            case "division":
                result = firstNumber/secondNumber;
                break;
            case "^":
            case "exposant":
                result = Math.Pow(firstNumber, secondNumber);
                break;
            case "%":
            case "reste":
                result = firstNumber%secondNumber;
                break;
        }
        Console.WriteLine("Result of {0} {1} {2} = {3}", firstNumber, stringOperation, secondNumber, result);
        Console.ReadKey();
    }

    private static double SetNumber(string outputText)
    {
        double parse;
        Console.Write(outputText);
        string tempInput = Console.ReadLine();
        while (!double.TryParse(tempInput, out parse))
        {
            Console.WriteLine("Incorrect input !");
            Console.Write(outputText);
            tempInput = Console.ReadLine();
        }
        return double.Parse(tempInput);
    }

    private static bool IsValidOperation(string input)
    {
        return operations.Contains(input);
    }

    private static string SetOperation(string outputText)
    {
        Console.Write(outputText);
        string tempInput = Console.ReadLine();
        while (!IsValidOperation(tempInput))
        {
            Console.WriteLine("Incorrect input !");
            Console.Write(outputText);
            tempInput = Console.ReadLine();
        }
        return tempInput;
    }
</code></pre>
    </div>