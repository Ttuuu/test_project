<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Evaluation</h2>

<p>For somebody learning Javascript this code isn't bad, however it does have some inefficiencies and practices that are frowned upon (e.g. Global variables). See the suggestions below for advice about improving it.</p>

<h2>Suggestions</h2>

<h3>Semicolon terminators</h3>

<p>Unless you are intimately familiar with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion" rel="nofollow noreferrer">the statements that need to be terminated by a semicolon</a> it is wise to always terminate each line with a semi-colon.</p>

<h3>Selecting elements by class vs id attribute</h3>

<p>The first line selects an element from the DOM by the <em>id</em> attribute - i.e. <code>document.querySelector('#orientation')</code>. The next line uses a <em>class</em> selector to select an element: <code>document.querySelector(".degrees")</code>. If there is only one element with class name <code>degrees</code> that matters for this application then an <em>id</em> attribute would be more appropriate than <em>class</em>. </p>

<p>Also, it isn't wrong to use <code>document.querySelector()</code> to get elements by <em>id</em> but using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById" rel="nofollow noreferrer"><code>document.getElementById()</code></a> "<em>is definitely faster</em>" <sup><a href="https://www.sitepoint.com/community/t/getelementbyid-vs-queryselector/280663/2" rel="nofollow noreferrer">1</a></sup> (see <a href="https://jsperf.com/getelementbyid-vs-queryselector" rel="nofollow noreferrer">this jsPerf test for comparison</a>). Similarly <code>document.getElementsByClassName()</code> is also faster. I would suggest only using <code>document.querySelector()</code> when there is a complex selector (e.g. <code>form lable[for="direction']</code></p>

<h3>Global variables</h3>

<p>Any variable not declared with a keyword like <code>var</code>, <code>const</code> or <code>let</code> is considered <code>global</code>. For a small application like this it likely wouldn't lead to any issues but in a larger application it could lead to unintentional side-effects if the same name is used in different functions.</p>

<h3>Excess closures</h3>

<p>The lines to add event listeners can be simplified:</p>

<blockquote>
<pre><code>document.querySelector("#orientation").addEventListener('input', function(event) {
  setCardinalDirection()
})

window.addEventListener("load", function(){
 setCardinalDirection()
})
</code></pre>
</blockquote>

<p>Instead of wrapping the calls to <code>setCardinalDirection()</code> in an extra function, just pass the name of the function:</p>

<pre><code>document.querySelector("#orientation").addEventListener('input', setCardinalDirection); 
window.addEventListener("load", setCardinalDirection);
</code></pre>
    </div>