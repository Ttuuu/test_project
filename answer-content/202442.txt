<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Building on <a href="https://codereview.stackexchange.com/a/184004/120114">@RichardJohnson's answer</a>: why not write one function that can filter <em>any</em> array of possibly-undefined values? Let's make it generic.</p>

<pre><code>export function filterUndef&lt;T&gt;(ts: (T | undefined)[]): T[] {
  return ts.filter((t: T | undefined): t is T =&gt; !!t)
}
</code></pre>

<p>This simplifies your filter call, too:</p>

<pre><code>const nums = [20, 44, undefined]
const numsSafe = filterUndef(ages)
</code></pre>

<p>The typescript compiler can even use type inference to figure out <code>numsSafe</code> is <code>number[]</code>. Just define this function once, and reuse it whenever you want to strip the <code>undefined</code>s from an array in a typesafe way.</p>
    </div>