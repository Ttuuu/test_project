<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just to have a more readable (than the <a href="https://codereview.stackexchange.com/a/220618/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/195671/justin">@Justin</a>) and complete (than the <a href="https://codereview.stackexchange.com/a/220617/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/201168/sedsarq">@Sedsarq</a>) version of the algorithm presented in the other answers, here is a version that keeps the factors in a <code>set</code> and uses the fact that factors always come in pairs:</p>

<pre><code>from math import sqrt

def get_factors(n):
    """Returns a sorted list of all unique factors of `n`."""
    factors = set()
    for i in range(1, int(sqrt(n)) + 1):
        if n % i == 0:
            factors.update([i, n // i])
    return sorted(factors)
</code></pre>

<p>Compared to your code this has the added advantage that it is encapsulated in a function, so you can call it repeatedly and give it a clear name and docstring describing what the function does.</p>

<p>It also follows Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which programmers are encouraged to follow.</p>

<p>With regards to which code is fastest, I'll let this graph speak for itself:</p>

<p><a href="https://i.stack.imgur.com/aVney.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/aVney.png" alt="enter image description here"></a></p>

<p>For the <code>op</code> function I used this code which has your checking of all factors up to <code>x</code>:</p>

<pre><code>def op(x):
    factors = []
    for i in range(1,x+1):
        if x%i==0:
            factors.append(i)
    return factors
</code></pre>

<p>And the <code>factors</code> function is from the <a href="https://codereview.stackexchange.com/a/220618/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/195671/justin">@Justin</a>.</p>

<hr>

<p>If all you really want is the number of factors, the best way is probably to use the prime factor decomposition. For this you can use a list of primes together with the algorithm in the <a href="https://codereview.stackexchange.com/a/220727/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/9452/josay">@Josay</a>:</p>

<pre><code>from math import sqrt
from functools import reduce
from operators import mul

def prime_sieve(limit):
    prime = [True] * limit
    prime[0] = prime[1] = False

    for i, is_prime in enumerate(prime):
        if is_prime:
            yield i
            for n in range(i * i, limit, i):
                prime[n] = False

def prime_factors(n):
    primes = prime_sieve(int(sqrt(n) + 1))
    for p in primes:
        c = 0
        while n % p == 0:
            n //= p
            c += 1
        if c &gt; 0:
            yield p, c
    if n &gt; 1:
        yield n, 1

def prod(x):
    return reduce(mul, x)

def number_of_factors(n)
    return prod(c + 1 for _, c in prime_factors(n))
</code></pre>

<p>Comparing this with just taking the <code>len</code> of the output of the <code>get_factors</code> function and this function which implements your algorithm as <code>op_count</code>:</p>

<pre><code>def len_get_factors(n):
    return len(get_factors(n))

def op_count(n):
    c = 0
    for i in range(1, n + 1):
        if n % i == 0:
            c = c + 1
    return c
</code></pre>

<p>The following timings result (note the increased range compared to the previous plot):</p>

<p><a href="https://i.stack.imgur.com/YaTnu.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/YaTnu.png" alt="enter image description here"></a></p>
    </div>