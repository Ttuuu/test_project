<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>if line := bf.Text(); (reg.Match([]byte(line)) &amp;&amp; !inverseSearch) || (!reg.Match([]byte(line)) &amp;&amp; inverseSearch) {
</code></pre>

<p>As in other C-like languages, golang <a href="https://golang.org/ref/spec#Logical_operators" rel="nofollow noreferrer">evaluates binary logical operators conditionally left-to-right</a>. As written, the program is often going to evaluate the reg.Match() twice, because it appears twice and in each subexpression it is tested before <code>inverseSearch</code>. As this is the program's most expensive operation, that's significant for performance.</p>

<pre><code>if line := bf.Text(); (!inverseSearch &amp;&amp; reg.Match([]byte(line))) || (inverseSearch &amp;&amp; !reg.Match([]byte(line))) {
</code></pre>

<p>should avoid the double evaluation. Or write an xor helper function.</p>

<p>Other things:</p>

<p>Don't test for stdin being usable if you aren't reading from it. It's common for programs executing a program in a subprocess to close filehandles that the program shouldn't need to use. In other words <code>/bin/grep foo filename &lt;&amp;-</code> works, your <code>./grep -r foo filename &lt;&amp;-</code> does not and should.</p>

<p>Rewrite/replace grepStdin() so that it reuses grep(). Nobody likes having the algorithm implemented twice in the same program. You can use /dev/stdin as a filename for stdin on *nix; or, keep the file opening part separate and have a common function for grepping over the opened file handle used by both codepaths.</p>

<p>The <code>format</code> parameter to formatRes uses magic constant values that one has to read its implementation to understand. It would be better to replace it with <code>verbose bool</code> so the verbose flag can be passed directly and its meaning is then obvious. The stdin case would be better not to treat specially here also.</p>
    </div>