<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Main Question</h2>

<blockquote>
  <p>Can somebody please tell me what would have made my code more "correct"? </p>
</blockquote>

<p>It is difficult to know exactly what <em>would have made my code more "correct"</em> but it does look like the method <code>handleClick</code> is more complex than it needs to be. Specifically, there is a <code>for</code> loop that is not needed. Perhaps you were attempting to guard against cases where <code>name</code> is not actually a property on <code>data</code>. That could be achieved using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" rel="nofollow noreferrer">Object.hasOwnProperty()</a> - for example, the <code>for</code> loop could be replaced with this block of code:</p>

<pre><code>if (data.hasOwnProperty(name)) {
    data[name] = value;
}
</code></pre>

<p>Or perhaps even simpler would be using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in" rel="nofollow noreferrer"><code>in</code></a> operator. For an explanation of the differences, refer to <a href="https://stackoverflow.com/a/13633027/1575353">this answer on SO</a>. </p>

<pre><code>if (name in data) {
    data[name] = value;
}
</code></pre>

<h3>Useless re-assignment of <code>data</code> in <code>handleClick</code> method</h3>

<p>At the beginning of the <code>handleClick</code> method, I see this line:</p>

<blockquote>
<pre><code>let data = this.state.data;
</code></pre>
</blockquote>

<p>And then after storing constants for the event target and its name, there is this line:</p>

<blockquote>
<pre><code>data = this.state.data;
</code></pre>
</blockquote>

<p>That line seems to serve no purpose.</p>

<h3>Input type other than <em>checkbox</em>?</h3>

<p>Are there other types of inputs besides checkboxes? If not, then the following line in <code>handleClick()</code> seems too complicated:</p>

<blockquote>
<pre><code>   const value = target.type === 'checkbox' ? target.checked : target.value;
</code></pre>
</blockquote>

<p>There appear to be no <em>value</em> attributes set on any elements.</p>

<h3>Binding the method to the event handler</h3>

<p>The <code>handleClick</code> method is called from an <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow function</a> in the <em>onChange</em> event handler attribute:</p>

<blockquote>
<pre><code>onChange={(event) =&gt; this.handleClick(event)}
</code></pre>
</blockquote>

<p>According to the ReactJS documentation:</p>

<blockquote>
  <p><em>The problem with this syntax is that a different callback is created each time the [component] renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem.</em><sup><a href="https://reactjs.org/docs/handling-events.html" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<p>There is no need to add an extra anonymous function just to call that method. Bind the method directly, like below:</p>

<pre><code>onChange={this.handleClick}
</code></pre>

<h3>Checked attribute</h3>

<p>The <em>checked</em> attribute of each checkbox input is set according to the following:</p>

<blockquote>
<pre><code>checked={this.state.data[key].value}
</code></pre>
</blockquote>

<p>But there is no need to use <code>.value</code> - it can be simplified like below:</p>

<pre><code>checked={this.state.data[key]}
</code></pre>

<hr>

<p><sup>1</sup><sub><a href="https://reactjs.org/docs/handling-events.html" rel="nofollow noreferrer">https://reactjs.org/docs/handling-events.html</a></sub></p>
    </div>