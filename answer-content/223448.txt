<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Efficiency</h2>

<p>Things that jump out.</p>

<pre><code>std::vector&lt;ABPair*&gt; validPathsThread;
</code></pre>

<p>An array of pointer looks odd. Especially since ABPair is simply a pair of integers. I notice in the code you are using <code>malloc()</code> to allocate them which itself is a very expensive operation.</p>

<p>I would just remove the pointer here:</p>

<p>Then this code:</p>

<pre><code>      ABPair* temp =
          static_cast&lt;ABPair*&gt;(malloc(sizeof(ABPair)));

      temp-&gt;alphaTriIndex = validAlphas[i];
      temp-&gt;betaTriIndex = j;

      validPathsThread.push_back(temp);
</code></pre>

<p>simplifies to:</p>

<pre><code>      validPathsThread.emplace_back(validAlphas[i], j);
</code></pre>

<h2>Simplify Types</h2>

<p>You don't need to define your own <code>what()</code> on exceptions.</p>

<pre><code>class PThreadException: public std::exception
{
  virtual const char* what() const throw()
  {
    return "Exception occured in a pthread_attr_init or pthread_create\n";
  }
};

class DynAllocationException: public std::exception
{
  virtual const char* what() const throw()
  {
    return "Exception occured when attempting to malloc or calloc\n";
  }
};
</code></pre>

<p>Simplify to:</p>

<pre><code>// Exceptions for experimentation
struct PThreadException: public std::runtime_exception
{
  PThreadException(): std::exception("Exception occured in a pthread_attr_init or pthread_create\n") {}
};

struct DynAllocationException: public std::runtime_exception
{
  DynAllocationException(): std::exception("Exception occured when attempting to malloc or calloc\n") {}
};
</code></pre>

<p>Simple bag types like this:</p>

<pre><code>struct ABPair
{
    unsigned int alphaTriIndex;
    unsigned int betaTriIndex;
};
</code></pre>

<p>Can be simpler defined using standard types.</p>

<pre><code>using ABPair = std::pair&lt;unsigned int, unsigned int&gt;;
</code></pre>

<h2>Memory Management</h2>

<p>There is a lot of memory management code that looks like C. You should remove all calls to malloc/calloc/free and replace with new/delete then you should remove all references to new/delete with containers (using reserve() or resize() to make sure you have pre-allocated enough space).</p>

<h2>Throwing Exceptions</h2>

<p>Don't do this:</p>

<pre><code>  DynAllocationException e;
  ...
            throw e;
</code></pre>

<p>Just do this:</p>

<pre><code>            throw DynAllocationException();
</code></pre>

<h2>Uneeded Loop</h2>

<pre><code>  // Loop over all valid alphas
  for(unsigned int i = 0; i &lt; validAlphas.size(); i++)
  {
    if ((i % uNumThreads) == uThreadID)
    {
        // Do Work
    }
  }
</code></pre>

<p>This is the same as writing:</p>

<pre><code>  for(unsigned int i = uThreadID; i &lt; validAlphas.size(); i += uNumThreads) {
      // Do Work
  }
</code></pre>
    </div>