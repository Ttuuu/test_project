<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Cloning the matrix</h3>

<p><code>.slice</code> is a good way to copy the values of an array, instead of getting a reference to the same array. Unfortunately all your values are themselves arrays, which you are still using a reference to and not a copy. In this code you are not changing individual values, but setting entire rows at a time, so it still works, but this could easily lead to unexpected behavior if you are not careful.</p>

<p>You don't mention if you have to modify the original matrix or return a new one (you are doing both). But if you leave the original unmodified, you don't even need to make a copy. Just start out with empty array and <code>.push</code> each new row to it.</p>

<h3>Mapping the values</h3>

<p>Your <code>.map</code> is a bit weird. You use it on one array, but then you don't even use the value and just use the index to access a different array. This can also be done simpler. The Nth row in the result is the Nth column in the input. So using <code>.map</code> on the input and getting the right value from each row will give you the new row (you have to reverse it too).</p>

<pre><code>var row = matrix.map(function(e) {
    return e[i]
}).reverse();
</code></pre>

<h3>ES6</h3>

<p>A lot of new features was introduced in ES6, which was finalized back in 2015. You should be using them by now. This means using <code>let</code> instead of <code>var</code>, and arrow functions, which are excellent for short inline function like the one above.</p>

<h3>The final code</h3>

<p>Another small change I made was to change to the loop to loop over the inner array. This way it also works for matrices of different dimensions.</p>

<pre><code>function rotate(matrix) {
    let result = [];
    for(let i = 0; i &lt; matrix[0].length; i++) {
        let row = matrix.map(e =&gt; e[i]).reverse();
        result.push(row);
    }
    return result;
};
</code></pre>
    </div>