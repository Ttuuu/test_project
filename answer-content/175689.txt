<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Assuming your actual project arrays will be a relatively small size (like your posted input arrays), there is going to be an unnoticeable margin of speed between the many ways that this can be done.</p>

<p>Here is a method that doesn't use a loop or <code>array_search()</code>.  The else portion of my <code>replaceTrailingZeros()</code> function could have been condensed into a one-liner, but I've declared <code>$replace</code> to make it easier to read.</p>

<p>Code: (<a href="http://sandbox.onlinephpfunctions.com/code/5550ac6335f2c5827e2aee2e381f53c3b415ac84" rel="nofollow noreferrer">Demo</a>)</p>

<pre><code>function replaceTrailingZeros($array) {
    $trimmed = array_diff($array, [0]);  // remove all zeros
    // seek last non-zero value (store value or false) and move array pointer to last element
    if (($last = end($trimmed)) === false) {
        return $array;  // nothing to change
    } else {
        // generate minimal array from zero element keys and last non-zero value
        $replace = array_fill($index = key($trimmed) + 1, sizeof($array) - $index, $last);
        return array_replace($array, $replace);  // only replace the trailing zero elements
    }
}
echo implode(',', replaceTrailingZeros([1,0,1,0,5,4,0,0,0,0])); // 1,0,1,0,5,4,4,4,4,4 (5 native func calls)
echo "\n";
echo implode(',', replaceTrailingZeros([0,0,0])); // 0,0,0 (just 2 native func calls)
echo "\n";
echo implode(',', replaceTrailingZeros([1,1,5,4,0,0])); // 1,1,5,4,4,4 (5 native func calls)
</code></pre>

<hr>

<p><strong>Older and wiser</strong>... using minimal function calls and relying on language constructs are great ways to maximize script efficiency.  You actually could have gotten away with using <code>$length</code> in both of your loops.</p>

<pre><code>$length = count($array);
for ($i = $length - 1; $i &gt;= 0; --$i) {
    if ($array[$i] !== 0) {
        for ($j = $i + 1; $j &lt; $length; ++$j) {
            $array[$j] = $array[$i];
        }
        break;
    }
}
return $array;
</code></pre>

<p>If you wanted to remove the nested loop, you could use <code>array_replace()</code> and <code>array_fill()</code>, but they won't outperform a simple <code>for()</code> loop.</p>

<pre><code>$length = sizeof($array);
for ($i = $length - 1; $i &gt;= 0; --$i) {
    if ($array[$i] !== 0) {
        return array_replace($array, array_fill($i, $length - $i, $array[$i]));
    }
}
return $array;
</code></pre>
    </div>