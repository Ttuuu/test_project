<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a long review;</p>
<ul>
<li><p>You should use a beautifier it will turn <code>if ( i === len-1 )</code> to <code>if (i === len-1)</code></p>
</li>
<li><p>This could really use an IFFE to hide your worker functions and expose 1 actual function, the <code>class</code>  seems overkill.</p>
</li>
<li><p>You can club together some statements</p>
<pre><code>  blocks = this._sortSelectors(lines);
  blocks = this._sortParameters(blocks);
</code></pre>
<p>can become</p>
<pre><code>  blocks = sortParameters(sortSelectors(lines));
</code></pre>
<p>and</p>
<pre><code>  s = this._makeString(blocks);
  s = this._addBlankLineBetweenBlocks(s);
  s = s.trim();
</code></pre>
<p>can become</p>
<pre><code>  s = this.separateBlocks(makeString(blocks)).trim();
</code></pre>
</li>
<li><p>This looks write you wrote your own <code>String.join()</code></p>
<pre><code>  // lines =&gt; string
  let s = "";
  for ( let line of lines ) {
      s += line[1] + "\n";
  }
  s = s.slice(0, s.length-1);
  return s;
</code></pre>
<p>you could just</p>
<pre><code>  return lines.map(line=&gt;line[1]).join('\n');
</code></pre>
</li>
<li><p>Always consider FP when dealing with list;</p>
<pre><code>  let lines = [];
  for ( let block of blocks ) {
      let lines2 = block[1];
      for ( let line of lines2 ) {
          lines.push(line);
      }
  }
</code></pre>
<p>could be</p>
<pre><code>  const lines = blocks.map(block =&gt; block[1]).flat(); 
</code></pre>
</li>
<li><p>Minor nitpicking on this;</p>
<pre><code>          // Trimmed line in first spot. Important for sorting.
          value.trim(),
</code></pre>
<p>You could have written a custom sort function that does the <code>trim()</code></p>
</li>
<li><p>Dont do <code>console.log</code> in final code</p>
</li>
<li><p><code>let</code> vs. <code>const</code> always requires some contemplation</p>
<ul>
<li><code>let value = lines[key];</code> should be <code>const value = lines[key];</code></li>
<li><code>let isParameter = line[3];</code> should be a <code>const</code></li>
<li><code>let lines = s.split("\n");</code> should be a <code>const</code></li>
</ul>
</li>
<li><p>Potential Parsing Problems</p>
<ul>
<li><code> value.includes("}"</code>  would go funky with some comments /* } */</li>
<li>Also, <code>value.includes("{")</code> of course</li>
</ul>
</li>
<li><p>If you like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" rel="nofollow noreferrer">ternary operators</a> then</p>
<pre><code>      if ( value.includes("{") ) {
          isParameter = true;
      }
</code></pre>
<p>could be</p>
<pre><code>      isParameter = value.includes("{") ? true : isParameter;
</code></pre>
<p>however I think your version reads better</p>
</li>
<li><p>The html could use a <code>&lt;meta charset="UTF-8"&gt;</code></p>
</li>
<li><p><code>if ( sortBuffer ) {</code> always executes, you probably meant to go for <code>if ( sortBuffer.length ) {</code>, personally I dropped the <code>if</code> statement altogether for elegance, the code works either way</p>
</li>
</ul>
<p>The below is my counter proposal, my FP skills were not good enough to convert <code>sortSelectors</code> and <code>sortParameters</code> but I am sure there is a way to make these functions cleaner;</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="false" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/*jshint esnext:true */

const styleSorter = (function createStyleSorter(){
  "use strict";
  
  // TODO: this._validate();
  // TODO: this._beautify(); using regex and replace of { ; }
  function alphabetize(s){
    
    const lines = makeLines(s + '\n');
    const blocks = sortParameters(sortSelectors(lines));

    return separateBlocks(makeString(blocks)).trim();        
  }
  
  //TODO: Always document your regex expressions
  function separateBlocks(s) {
    return s.replace(/}\n([^\n])/, "}\n\n$1");
  }  
  
  function makeString(blocks){
    //get 2nd element of each block, flatten, get 2nd element again
    const lines = blocks.map(block =&gt; block[1]).flat().map(fields =&gt; fields[1]);
    return lines.join('\n');
  }
    
  //Makes an array of arrays. [trimmed, notTrimmed, blockNum, isParameter].
  //Having unique block numbers will be important later, when we sort
  //TODO: refactor with associative array &lt;- Not sure that will help much?
  function makeLines(s) {
    let blockNum = 0;
    let isParameter = false;
        
    return s.split("\n").map((value, key) =&gt; {
          
      if ( value.includes("}") ) {
        isParameter = false;
      }
          
      //First value is trimmed for sorting
      const line = [value.trim(), value, blockNum, isParameter];
          
      if ( value.includes("}") ) {
        blockNum++;
      }
            
      if ( value.includes("{") ) {
        isParameter = true;
      }          
          
      return line;
    });
  }
  
  function sortSelectors(lines) {
    /** [parameterTrimmed, [line, line, line, line]] */
    let blocks = [];
    /** [line, line, line, line] **/
    let buffer = [];
    let lineNumTracker = 0;
    let parameterTrimmed = "";
    let len = lines.length;
        
    for ( let i = 0; i &lt; len; i++ ) {
      let line = lines[i];
      let lineNum = line[2];
            
      if (!parameterTrimmed &amp;&amp; line[0].includes("{") ) {
        parameterTrimmed = line[0];
      }
            
      if (lineNum !== lineNumTracker) {
        lineNumTracker++;
        blocks.push([parameterTrimmed, buffer]);
        buffer = [];
        parameterTrimmed = "";
      }
            
      buffer.push(line);
    }
        
    return blocks.sort();
  }
  
  function sortParameters(blocks) {
    const IS_PARAMETER = 3;
    for ( let key in blocks ) {
      let lines = blocks[key][1];
      let lineBuffer = [];
      let sortBuffer = [];
            
      for (let line of lines) {
                
        if (line[IS_PARAMETER]) {
          sortBuffer.push(line);
        } else {
          lineBuffer = lineBuffer.concat(sortBuffer.sort());
          lineBuffer.push(line);                    
        }
        
        blocks[key][1] = lineBuffer;
      }
      return blocks;
    }
  }
  
  return alphabetize;  
})();

window.addEventListener('DOMContentLoaded', (e) =&gt; {
  let css = document.getElementById('css');
  let alphabetize = document.getElementById('alphabetize');
    
  // TODO: Combo box that loads tests.
  alphabetize.addEventListener('click', function(e) {
    css.value = styleSorter(css.value);
  });
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
    margin: 1em;
    width: 95%;
    max-width: 700px;
    font-family: sans-serif;
}

textarea {
    width: 100%;
    height: 360px;
    tab-size: 4;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt;

&lt;html lang="en-us"&gt;

&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;CSS Alphabetizer&lt;/title&gt;
    &lt;link rel="stylesheet" href="style.css" /&gt;
    &lt;script type="module" src="css-alphabetizer.js"&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1&gt;
    CSS Alphabetizer
    &lt;/h1&gt;
    
    &lt;p&gt;
    Beautify your CSS. Sort your selectors alphabetically (which groups together #id's, .classes, and then elements), and sort your parameters alphabetically too. Parameters are nested within braces, so those aren't easy to sort with a normal A-Z sort.
    &lt;/p&gt;
    
    &lt;p&gt;
    &lt;textarea id="css"&gt;body {
    background-color: #999999;
    margin-bottom: 0;
}

#page-container {
    background-color: #DFDFDF;
    width: 1150px;
    margin: 12px auto 0 auto;
}

#page-container2 {
    padding: 12px 12px 0 12px;
}

header {
    background-color: white;
}

.category {
    display: inline-block;
    padding: 18px 25px;
    font-family: sans-serif;
}

.category:hover {
    background-color: #059BD8;
}&lt;/textarea&gt;
    &lt;/p&gt;
    
    &lt;p&gt;
    &lt;button id="alphabetize"&gt;Alphabetize&lt;/button&gt;
    &lt;/p&gt;
    
    &lt;p&gt;
    Want to report a bug or request a feature? &lt;a href="https://github.com/RedDragonWebDesign/css-alphabetizer/issues"&gt;Create an issue&lt;/a&gt; on our GitHub.
    &lt;/p&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>

    </div>