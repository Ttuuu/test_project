<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm just curious to know if this is a good way of doing it?</p>
</blockquote>

<p>No.</p>

<blockquote>
  <p>Any suggestions are welcome.</p>
</blockquote>

<p>Hold On.</p>

<blockquote>
  <p>Can we keep track of the number of elements in the stack using a count variable as used in the code?</p>
</blockquote>

<p>Yep.</p>

<p>Basically your memory management is broken.<br>
When you push elements on you create them with <code>new</code> and when you pop elements off you delete them. But what happens when the stack object goes out of scope? Anything still left in the stack is now leaked.</p>

<p>Also the use of a maximum count in the constructor suggests that you should be allocating a single piece of storage once on construction to store all the values. The point of using a linked list is to allow the list to grow dynamically. It would be a better idea to just create a storage area and keep track of how full it is (if you are allowed to use std::vector in your assignment this does all the hard work for you).</p>

<p>From this:</p>

<pre><code>int main(int argc, char** argv) {   
    StackusingList *sl = new StackusingList(5);
</code></pre>

<p>One assumes you have a Java background.<br>
If you don't need your object to live beyond the time span of the function then you don't need use new. What you need is just create a local object.</p>

<pre><code>int main(int argc, char** argv) {   
    StackusingList    sl(5);
</code></pre>

<p>This variable is created locally. It is destroyed when the function terminates. If you had written it correctly the destructor would then clean up any internal memory it had allocated.</p>
    </div>