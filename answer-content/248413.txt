<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would question what you intend with this system. In my personal experience, when someone writes something like this it's because they have no actual work assigned to them, but don't want their managers to realize that.</p>
<p>Take a step back and ask yourself what is the improvement you gain from:</p>
<ol>
<li>Requiring an additional class to be present in every form inheritance tree.</li>
<li>Making it so user controls aren't handled by this system (from the inside I mean, since your base class derives from <code>Form</code>).</li>
<li>Requiring a manual line of code to handle creation and removal of events in one specific function (what if I want to add a handler at run-time? What if I want to use post-2002 lambda expressions instead of 6 lines of code for a simple handler? What if I want to use the designer, which handles renaming for me?)</li>
<li>I don't think you even considered early event removal.</li>
</ol>
<p>You say you want to avoid forgetting to remove event handlers. Any properly written handler doesn't need to be removed, only handlers that strongly root the form object require this (and in this case it's not a memory leak exactly, it's your form not closing). And this system doesn't solve strong rooting, since it stores a non-weak-referenced list of these unsubscribe handlers, which reference your form, thus rooting the form in your object. You're literally creating the problem you're claiming to solve (refer back to my first statement).</p>
<p>You don't show this, but what triggers the unsubscribe? The form's own dispose call? I hope not, because that won't trigger in a problem scenario with this code, and the fact that you mark this "manager" as <code>IDisposable</code> worries me greatly. The <code>FormClosing</code> event? I hope not, because that would prevent close cancellation. Yet another manual call to something? I hope not, because you're supposedly trying to automate ..something, not throw in more manual calls that always have to happen or BOOM.</p>
<p>As to the actual code presented, it's not much, but at the very least write a bit of smart code to handle subscribing and unsubscribing automatically from a handle to the event and handler. You have expressions to parse code provided to your function and generate changed executable code from it, and you have code emitting, between those two you should be able to call your function like this at least:</p>
<pre><code>EventManager.Attach(button1_Click, button1.Click);
</code></pre>
<p>Edit: Oh god I just noticed your <code>new</code> field modifier. Use proper OOP and you won't need a <code>GenericTrackedEvent&lt;T&gt;</code> that's literally twice as large as the thing it "derives" from, since it has the previous fields as well as the <code>new</code> ones. And at the very least don't mark them <code>protected</code>, there's no reason for that.</p>
    </div>