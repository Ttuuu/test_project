<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Assuming that the ransom note in general is smaller than the magazine, the way would be to have a frequency map of the ransom words only, and <em>forget</em> about a frequeny map of magazine words.</p>

<p>Rather walk the magazine words and when a word was found in the ransom words' frequency map, decrement the frequency, on reaching 0 remove the key.</p>

<p>So:</p>

<ul>
<li><em>Adding.</em> Determine how many of which words are needed for the ransom note.</li>
<li><em>Subtracting.</em> Scratch those words reading the magazine words.</li>
<li>Remains the ransom words not occurring in the magazine.</li>
</ul>

<p>Should the frequency map become empty, you succeed. Otherwise at the end there is failure.</p>

<p>Several loops are imaginable, here one variant of computeIfPresent.</p>

<pre><code> Map&lt;String, Long&gt; ransomWords = getFrequencyMapFromArray(ransom);
 if (ransomWords.isEmpty()) {
     return true;
 }
 for (String magazineWord : magazine) {
     if (ransomWords.computeIfPresent(magazineWord,
             (w, freq) -&gt; freq.longValue() == 1L ? null : freq - 1L) == null) {
         // Entry was removed...
         if (ransomWords.isEmpty()) {
             return true;
         }
     }
 }
 return false;
</code></pre>
    </div>