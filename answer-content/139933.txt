<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since I didn't want to setup a webserver for this, I added a bare class, which should behave in the same way as your <code>request.GET</code>:</p>

<pre><code>class request:
    GET = dict(a1=34, a2=37, c1=50, c2=75)
</code></pre>

<hr>

<p>You should avoid setting keys in <code>globals()</code>, it clutters the namespace too much. Instead just use the <code>default</code> keyword of the <code>get</code> method of a dictionary, which will give you the specified value if the key is not present.</p>

<pre><code>get_dimension = request.GET.get(dim, 'None')
</code></pre>

<p>You can make your string formatting a bit easier to understand if you split it up a bit. I made the string itself a constant (avoiding having to allocate it multiple times) and used positional arguments, instead of keywords (which, admittedly, hurts the readability slightly).</p>

<p>Instead of doing a string addition every loop, it is better to append to a list and do one <code>join</code> at the end, because string addition means creating an intermediate new string, since strings are immutable.</p>

<pre><code>sql = "SELECT * FROM t_wishbone_dimensions WHERE 1=1" + "\n".join(sql_where)
</code></pre>

<p>I would also use <code>itertools.product</code> to replace your double loop, so something like:</p>

<pre><code>directions = {'1': '&gt;', '2': '&lt;'}
dimensions = ['a', 'b', 'c', 'd', 'e', 'f', 'f2', 'g']
for dimension, i in itertools.product(dimensions, ('1', '2')):
    direction = directions[i]
    ...
</code></pre>

<p>To improve readability you should separate the <code>AND</code>s with a newline each (like you did in your example output).</p>

<p>Lastly, python has an official style guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a>, which recommends having a blank after a comma in an argument list (in <code>dimensions</code> after <code>'a',</code> one was missing), as well as not adding unnecessary whitespace (so usually no <code>str( something )</code>, but just <code>str(something)</code>). </p>

<hr>

<p><strong>Final code:</strong></p>

<pre><code>import itertools

class request:
    # should handle the same same as your `request.GET`
    GET = dict(a1=34, a2=37, c1=50, c2=75)

dimensions = ['a', 'b', 'c', 'd', 'e', 'f', 'f2', 'g'] 
DIRS = {'1': '&gt;', '2': '&lt;'}
AND_STR = "AND ( `{0}` {1}= '{2}' OR '{2}' = ('None' OR '') )"

sql_where = ['']
for dimension, i in itertools.product(dimensions, ('1', '2')):
    val = request.GET.get(dimension+i, 'None')
    sql_where.append(AND_STR.format(dimension, DIRS[i], val))
sql = "SELECT * FROM t_wishbone_dimensions WHERE 1=1" + "\n".join(sql_where)
print sql
</code></pre>

<p>Output:</p>

<pre><code>SELECT * FROM t_wishbone_dimensions WHERE 1=1
AND ( `a` &gt;= '34' OR '34' = ('None' OR '') )
AND ( `a` &lt;= '37' OR '37' = ('None' OR '') )
AND ( `b` &gt;= 'None' OR 'None' = ('None' OR '') )
AND ( `b` &lt;= 'None' OR 'None' = ('None' OR '') )
AND ( `c` &gt;= '50' OR '50' = ('None' OR '') )
AND ( `c` &lt;= '75' OR '75' = ('None' OR '') )
AND ( `d` &gt;= 'None' OR 'None' = ('None' OR '') )
AND ( `d` &lt;= 'None' OR 'None' = ('None' OR '') )
AND ( `e` &gt;= 'None' OR 'None' = ('None' OR '') )
AND ( `e` &lt;= 'None' OR 'None' = ('None' OR '') )
AND ( `f` &gt;= 'None' OR 'None' = ('None' OR '') )
AND ( `f` &lt;= 'None' OR 'None' = ('None' OR '') )
AND ( `f2` &gt;= 'None' OR 'None' = ('None' OR '') )
AND ( `f2` &lt;= 'None' OR 'None' = ('None' OR '') )
AND ( `g` &gt;= 'None' OR 'None' = ('None' OR '') )
AND ( `g` &lt;= 'None' OR 'None' = ('None' OR '') )
</code></pre>
    </div>