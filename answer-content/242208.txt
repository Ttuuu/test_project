<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Three main things vex me about your code:</p>

<ul>
<li>the just generated prime isn't returned,</li>
<li>the boolean test a the end of the <code>while</code> loop</li>
<li>repeated prime "square and test" for candidacy.</li>
</ul>

<h1>Not returning generated prime</h1>

<p>Your code generates <code>3</code>, and yields <code>2</code>, then it generates <code>5</code> and yields <code>3</code>, then it generates <code>7</code> and yields <code>5</code>, then generates <code>11</code> and yields <code>7</code>, and so on.</p>

<p>This happens because you half treat <code>2</code> as a special case.  You initialize the <code>primes</code> array with it.  But to return it, you use <code>yield primes[-1]</code> just like every other prime.</p>

<p>If you treated it completely as a special case, and yield it right off the hop, you could <code>yield candidate</code> at the end of the loop, thus returning the prime you just computed.</p>

<pre><code>def sieve():
    primes = [2]
    yield 2

    for candidate in count(start=3, step=2):
        ...
        yield candidate
        primes.append(candidate)
</code></pre>

<h1>Unnecessary boolean test at end of while</h1>

<p>A <code>while</code> loop is often used for searching.  If the value is found, the <code>while</code> loop is escaped via a <code>break</code> statement.  If the while loop completes without ever breaking, the condition searched for was never found, and something different needs to happen.  In Python, this is the <code>while ... else</code> statement:</p>

<pre><code>def sieve():
    primes = [2]
    yield 2
    for candidate in count(start=3, step=2):
        n = 0
        while primes[n]**2 &lt;= candidate:  # Only check up to the square root of number.
            if candidate % primes[n] == 0:
                break
            n = n + 1
        else:
            yield candidate
            primes.append(candidate)
</code></pre>

<h1>Repeated prime "square and test" for candidacy.</h1>

<p>How often is the <code>primes[n]**2 &lt;= candidate</code> done?</p>

<p>If <code>candidate</code> is just over 10,000, and is prime, then we will be squaring all primes less than 100, and testing that they are less than <code>candidate</code>.  Then, we do the same thing for <code>candidate + 2</code>, and the results will be the same.  No prime number less than 100, squared, will ever be greater than <code>candidate</code> once <code>candidate</code> exceeds 10,000 ... so this is all busy work, repeating the same test over and over.</p>

<p>What you need is to partition your <code>primes</code> list into two parts: primes less or equal to the square-root of candidate, and primes greater the square-root of candidate.</p>

<p>You can do this in several ways.  The smallest change would be to keep track of a count of "small" primes.  As <code>candidate</code> gets larger by 2, you would only need add at most one more prime into the "small" primes bucket:</p>

<pre><code>def sieve():
    primes = [2]
    yield 2

    small_primes = 0
    for candidate in count(start=3, step=2):

        if primes[small_primes] ** 2 &lt;= candidate:
            small_primes += 1

        for n in range(small_primes):
             if candidate % primes[n] == 0:
                break
        else:
            yield candidate
            primes.append(candidate)
</code></pre>

<p>Now how often is <code>primes[small_primes] ** 2 &lt;= candidate</code> being done?  Once per candidate!  This has got to be an improvement.  Also, all <code>n = 0</code> and <code>n = n + 1</code> code has been absorbed into <code>for n in range(small_primes)</code>, and having Python do this work is faster than coding it ourselves.</p>

<h1>Other improvements</h1>

<h2>Odd numbers</h2>

<p>Why are we test-dividing all of our candidates by <code>primes[0] == 2</code>?  By design, they are all odd, and can never be evenly divided by 2. </p>

<pre><code>        for n in range(1, small_primes):    # Skip divide-by-2 tests
</code></pre>

<h2>All</h2>

<p>As mentioned by Peilonrayz, Python has an <code>any()</code> function, though I think <code>all()</code> is more appropriate here.</p>

<pre><code>def sieve():
    primes = [2]
    yield 2

    small_primes = 0
    for candidate in count(start=3, step=2):

        if primes[small_primes] ** 2 &lt;= candidate:
            small_primes += 1

        if all(candidate % primes[n] != 0 for n in range(1, small_primes)):
            yield candidate
            primes.append(candidate)
</code></pre>

<h2>Maintain separate lists</h2>

<p>Instead of <code>small_primes</code> being a count of the number of primes less than the square-root of the <code>candidate</code>, what if it actually was a list of the small prime numbers?  And instead of adding prime candidates to that list, we add to a <code>large_primes</code> list?  Then we could move primes from the <code>large_primes</code> to the <code>small_primes</code> as the square-root of the candidate increases.</p>

<p>Optimizations:</p>

<ul>
<li><code>deque</code> for <code>large_primes</code></li>
<li>Omit <code>2</code> from the <code>small_primes</code> list,</li>
<li>Cache the <code>large_prime[0] ** 2</code> value, to avoid repeatedly squaring the same quantity.</li>
</ul>

<p>Resulting code:</p>

<pre><code>from itertools import count
from collections import deque

def sieve():
    yield 2
    yield 3

    small_primes = []
    large_primes = deque((3,))
    next_prime_squared = large_primes[0] ** 2

    for candidate in count(start=5, step=2):

        if candidate &gt;= next_prime_squared:
            small_primes.append(large_primes.popleft())
            next_prime_squared = large_primes[0] ** 2

        if all(candidate % prime != 0 for prime in small_primes):
            yield candidate
            large_primes.append(candidate)
</code></pre>

<h1>Time Comparisons</h1>

<p>Time (in seconds) for generating 100 to 100,000 primes:
<a href="https://i.stack.imgur.com/g4RGA.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/g4RGA.png" alt="enter image description here"></a></p>

<p>Timing code:</p>

<pre><code>import array
from timeit import timeit
from itertools import count, takewhile
from collections import deque
import matplotlib.pyplot as plt

def martixy():
    primes = [2]
    for candidate in count(start=3, step=2):
        cont = False
        n = 0
        while primes[n]**2 &lt;= candidate:  # You only need to check up to the square root of a number.
            if candidate % primes[n] == 0:
                cont = True  # outer
                break
            n = n + 1
        if cont:
            cont = False
            continue
        yield primes[-1]
        primes.append(candidate)

def alex_povel():
    primes = array.array("L", [2])  # L: unsigned long int
    for candidate in count(start=3, step=2):
        n = 0
        while primes[n] ** 2 &lt;= candidate:
            if candidate % primes[n] == 0:
                break
            n += 1
        else:  # nobreak
            yield primes[-1]
            primes.append(candidate)

def peilonrayz():
    primes = [2]
    for candidate in count(start=3, step=2):
        if all(
            candidate % prime
            for prime in takewhile(lambda p: p**2 &lt;= candidate, primes)
        ):
            yield primes[-1]
            primes.append(candidate)

def ajneufeld():
    yield 2
    yield 3

    small_primes = []
    large_primes = deque((3,))
    next_prime_squared = large_primes[0] ** 2

    for candidate in count(start=5, step=2):

        if candidate &gt;= next_prime_squared:
            small_primes.append(large_primes.popleft())
            next_prime_squared = large_primes[0] ** 2

        if all(candidate % prime != 0 for prime in small_primes):
            yield candidate
            large_primes.append(candidate)

def test(candidate, limit):
    sieve = candidate()
    for _ in range(limit):
        next(sieve)

if __name__ == '__main__':
    candidates = (martixy, alex_povel, peilonrayz, ajneufeld)
    limits = [int(10 ** (power * 0.25)) for power in range(8, 21)]

    fig, ax = plt.subplots()

    for candidate in candidates:
        print("Testing", candidate.__name__)
        times = [ timeit(lambda: test(candidate, limit), number=1) for limit in limits ]
        ax.plot(limits, times, '-+', label=candidate.__name__)

    ax.legend()
    plt.show()
</code></pre>
    </div>