<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, from an Object-Oriented perspective, you have objects that represent real objects within the game with behaviors and attributes, so on that note, well done! There are, however, other areas that need a bit of TLC.</p>

<p>You have an enumeration of colors sitting there as individually-defined constants. For a bit more type-safety, I would suggest persisting them in an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Enum</a> instead:</p>

<pre class="lang-py prettyprint-override"><code>from enum import Enum

class Color(Enum):
    BLACK = (0, 0, 0)
    # other
    # colors
    # here
</code></pre>

<p>You can then access the enum constant for the color black as <code>Color.BLACK</code> and the tuple of RGB values as <code>Color.BLACK.value</code>.</p>

<p>Moving on to something a bit more functional, it doesn't make sense that each <code>BodyPart</code> has a direction. Conceptually speaking, the only thing in the game Snake that has a direction is the head, and each body part occupies the space of the body part in front of it per game tick.</p>

<p>I would suggest removing direction entirely from <code>BodyPart</code>, and storing the <code>BodyPart</code> objects within <code>Snake</code> as a <strong>linked list</strong>. Because in the end, you can still iterate through each <code>BodyPart</code>, but considering the 3 most important features:</p>

<ul>
<li>The <strong>head</strong>, and its directional movement</li>
<li>The <strong>link between each <code>BodyPart</code> and the next</strong>, to determine movement of the <code>BodyPart</code>s</li>
<li>The <strong>tail</strong>, for adding new <code>BodyPart</code>s to the <code>Snake</code></li>
</ul>

<p>The linked list is the most meaningful data structure to use here.</p>

<p>Also, <code>Food</code> is a bit weird. Actually initializing a <code>Food</code> object is hidden behind private methods, which makes no logical sense. <code>Food</code> initialization should require parameters to define what type of food it is and where it is on the game. We can revisit the idea of enums and introduce a <code>FoodType</code> enum of tuples of form <code>(length_bonus, Color)</code> where we can once again use our <code>Color</code> enum from before, then require a <code>FoodType</code> parameter in init along with x and y. Then we can move the methods that generate a random Color and position out of that class and use those to generate the necessities for a Food object.</p>

<p>Lastly, I would highly recommend encapsulating x and y in all cases into a Point object. That would make it much easier to keep track of each piece's coordinates, and subsequently movements, collisions, etc.</p>

<pre class="lang-py prettyprint-override"><code>class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    # __eq__ and other important methods here
</code></pre>
    </div>