<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use a <code>ParameterizedThreadStart</code> instead of <code>TheadStart</code> and then provide each <code>TcpListener</code> instance as parameter to each new <code>Thread</code>:</p>

<pre><code>  TcpListener[] listeners =
  {
    new TcpListener(15),
    new TcpListener(10)
  };

  foreach (TcpListener listener in listeners)
  {
    listener.Start();
    for (int i = 0; i &lt; numberOfClientsYouNeedToConnect; i++)
    {
      Thread newThread = new Thread(new ParameterizedThreadStart(Listeners));
      newThread.Start(listener);
    }
  }
</code></pre>

<p>You'll then have to change the signature of the <code>Listeners</code>-function:</p>

<pre><code>static void Listeners(object state)
{
  TcpListener listener = state as TcpListener;
  using (Socket socketForClient = listener.AcceptSocket())
  {
     ...
</code></pre>

<p><strong>EDIT</strong>:</p>

<p>If you want to provide more information to the thread function, you can create a class, that holds any information beside the <code>TcpListener</code> object:</p>

<pre><code>  public class ListenerInfo
  {
    public ListenerInfo(TcpListener listener, string name, int index)
    {
      Listener = listener;
      Name = name;
      Index = index;
    }

    public TcpListener Listener { get; }
    public string Name { get; }
    public int Index { get; }
  }
</code></pre>

<p>You can then create the threads like this:</p>

<pre><code>  var infos = new []
  {
    new { Listener = new TcpListener(15), Name = "Listener 15" },
    new { Listener = new TcpListener(10), Name = "Listener 10" }
  };

  foreach (var info in infos)
  {
    for (int i = 0; i &lt; numberOfClientsYouNeedToConnect; i++)
    {
      Thread newThread = new Thread(new ParameterizedThreadStart(AsynchIOServer.Listeners));
      newThread.Start(new ListenerInfo(info.Listener, info.Name, i));
    }
  }
</code></pre>

<p>And modify the thread-function to handle the new object:</p>

<pre><code>public static void Listeners(object state)
{
  ListenerInfo listenerInfo = state as ListenerInfo;
  using (Socket socketForClient = listenerInfo.Listener.AcceptSocket())
  {
    if (socketForClient.Connected)
    {
      Console.WriteLine("Client:" + socketForClient.RemoteEndPoint + " now connected to server.");
      using (NetworkStream networkStream = new NetworkStream(socketForClient))
      //using (NetworkStream networkStream2 = new NetworkStream(socketForClient))
      using (System.IO.StreamWriter streamWriter = new System.IO.StreamWriter(networkStream))
      using (System.IO.StreamReader streamReader = new System.IO.StreamReader(networkStream))
      //using (System.IO.StreamReader streamReader2 = new System.IO.StreamReader(networkStream2))
      {
        try
        {
          while (true)
          {
            string theString = streamReader.ReadLine();
            if (string.IsNullOrEmpty(theString) == false)
            {
              Console.WriteLine($"Connection {listenerInfo.Name} {listenerInfo.Index}: {theString}");
            }
          }
        }
        catch (Exception ex)
        {
          Console.WriteLine("Error: " + ex.Message);
        }
      }
    }
  }
  Console.WriteLine("Press any key to exit from server program");
  Console.ReadKey();
}
</code></pre>

<hr>

<p>What is your break/stop-condition for the <code>while (true)</code>-loop in the <code>Listener()</code>-method?</p>
    </div>