<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>An idiomatic approach </p>

<blockquote>
  <p>to implement this instead of basic arrays and raw pointers</p>
</blockquote>

<p>is to use iterators.</p></li>
<li><p>Returning <code>bool</code> is dubious. The situation where I <em>only</em> want to know if the element is present or not is very rare. Typically I want to know where exactly the element is (or, if absent, where it should be inserted to keep the collection sorted). Your function does compute this information, but immediately throws it away. Return an iterator.</p></li>
<li><p>All that said, consider the signature</p>

<pre><code>template&lt;typename It, typename T&gt;
It binary_search(It first, It last, const T&amp; target)
</code></pre>

<p>It is now suspiciously similar to the standard library's <a href="https://en.cppreference.com/w/cpp/algorithm/lower_bound" rel="noreferrer">std::lower_bound</a>. Follow the link for further insight and inspiration.</p></li>
</ul>
    </div>