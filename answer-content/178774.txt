<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Simple answer: No. Unless if your application only ever runs on 1 thread.</p>

<p>The easiest way to lazy initialise a singleton thread safe would be with a <a href="https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom" rel="nofollow noreferrer">holder pattern</a>. Example from wikipedia:</p>

<pre><code>public class Something {
    private Something() {}

    private static class LazyHolder {
        static final Something INSTANCE = new Something();
    }

    public static Something getInstance() {
        return LazyHolder.INSTANCE;
    }
}
</code></pre>

<p>This is thread safe because the java class loader ensures that the INSTANCE is initialised exactly once, when the LazyHolder class is used for the first time.</p>

<p>Since the database you initialise isn't known at compile time in this class you cannot use this pattern. What you can do is a pattern called <a href="https://en.wikipedia.org/wiki/Double-checked_locking" rel="nofollow noreferrer">double-checked locking</a>:</p>

<pre><code>public final class Singleton {
    private static volatile Singleton instance = null;

    private Singleton() {}

    public static Singleton getInstance() {
        if (instance == null) {
            synchronized(Singleton.class) {
                if (instance == null) {
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }
}
</code></pre>

<p>Important here are the <code>synchronized(...)</code> and <code>volatile</code> keywords.
The synchronised part makes sure only 1 thread can execute the construction code. And the <code>volatile</code> ensures that all threads always see all changes to the variable.</p>
    </div>