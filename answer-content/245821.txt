<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While the following list might seem somewhat intimidating, let me first make clear that your class has a nice interface, seems reasonable safe and has a reasonable implementation.</p>
<h1>Undefined behaviour</h1>
<p>Unfortunately, your code contains undefined behaviour:</p>
<pre class="lang-cpp prettyprint-override"><code>int main() {
    DynamicArray&lt;int&gt; test;
    test.append(1);
}
</code></pre>
<p>As <code>test</code> uses the default constructor, <code>m_array == nullptr</code>. As <code>m_size &lt; m_capacity</code>, we use <code>nullptr[0] = 1</code> in <code>append</code>, which leads to a segmentation fault on my system.</p>
<h1>Documentation of implementation details</h1>
<p>You should document your invariants: when do you need to allocate memory? When <code>m_capacity == 1</code>? Or when <code>m_array == nullptr</code>?</p>
<h1>Types</h1>
<p>An <code>index</code> should always be non-negative. Therefore, <code>size_t</code> is more suitable. This also removes the checks for a negative <code>index</code>.</p>
<h1>Copy vs moves</h1>
<p>Some of your internal operations use copies. However, those might be costly. Instead, use <code>std::move</code> or <code>std::move_backward</code> to move the elements in your ranges.</p>
<h1>Tests</h1>
<p>Add some basic tests for your class. Also, try <a href="https://github.com/google/sanitizers" rel="nofollow noreferrer">AddressSanitizer</a> to find memory issues like this faster.</p>
    </div>