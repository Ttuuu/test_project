<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>As previously noted, the <code>comparing</code> function is very useful for making compare functions. Especially if you are simply comparing by some field since you just have to give the accessor to <code>comparing</code>.</li>
<li><p>Its a good idea to display the error message if there is one and for the <code>Either</code> type use <code>either</code> to handle both <code>Left</code> and <code>Right</code> cases.</p></li>
<li><p>There is no need to make long variable names if they have a small scope and the variables don't have a nice succinct name, eg. with the <code>difference</code> function, using <code>first</code> and <code>second</code> as parameter names just clutters the definition.</p></li>
<li><p>It is common practice in Haskell to use function composition <code>.</code> and application <code>$</code> rather than parentheses wherever applicable. It is simply more readable.</p></li>
<li><p><code>putStrLn . show == print</code></p></li>
<li><p><code>groupBy (==) == group</code></p></li>
<li><p>There are quite a lot of combinators for working with functions over tupels,
unfortunately (or fortunately depending on how you look at it) most of them are abstracted over <code>Control.Arrow</code>, I haven't included any of that in the code below, but <code>(\x -&gt; difference toMatch (fst x),snd x)</code> could be written as <code>first (difference toMatch)</code> using <code>Control.Arrow.first</code>.</p></li>
<li><p>Rather than limiting the use of <code>findKNearest</code> to the <code>k</code> first elements of the list, make the function give all the elements and just consume as many as you need, saves you a parameter and makes the function more reusable.</p></li>
</ul>

<p><em>Note: I left out comments only to make the changes more visible.</em>
</p>

<pre><code>parseClassifiedRecord :: Record -&gt; (FeatureSet, SpamType)
parseClassifiedRecord x = (init converted, toSpam . truncate . last $ converted)
  where converted = map read x

difference a b = sqrt . sum . zipWith (\x y -&gt; (x - y)^2) a $ b

findNearest :: [(FeatureSet, SpamType)] -&gt; FeatureSet -&gt; [SpamType]
findNearest trainingSet toMatch =
  map snd
  . sortBy (comparing fst)
  . map (\(a,b) -&gt; (difference a toMatch, b))
  $ trainingSet

getMostCommon = head . maximumBy (comparing length) . group

classify :: Int -&gt; [(FeatureSet, SpamType)] -&gt; FeatureSet -&gt; SpamType
classify k trainingSet = getMostCommon . take k . findNearest trainingSet

accuracy :: [(SpamType, SpamType)] -&gt; Float
accuracy cs = 
  (fromIntegral 
  . length 
  . filter (uncurry (==)) 
  $ cs) / (fromIntegral . length $ cs)

parseFile = liftM (either (error . show) (tail . init)) . parseCSVFromFile

main = do 
  trainingSet &lt;- parseFile "spam-train.csv"
  testSet &lt;- parseFile "spam-test.csv"
  let classifiedTrainingSet = map parseClassifiedRecord trainingSet
  let unclassified = map parseClassifiedRecord testSet
  let classified = map
    (\(x,y) -&gt; (classify 1 classifiedTrainingSet x, y))
    unclassified
  print (accuracy classified)
</code></pre>
    </div>