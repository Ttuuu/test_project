<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Passwords and library functions</strong></p>

<p>Code dealing with passwords needs to be careful about calling library functions that are not secure as those functions might leave copies of data lingering who-knows-where or leak timing information.  That is a good reason to not call standard functions. Still, for developing code, better to first use standard functions and then later replace with secure code.</p>

<p><strong>Flaw: Ambiguous allocation</strong></p>

<p><code>httpString(char **dest, )</code> along some paths will allocate memory for <code>*dest</code>, but not all.  Function lacks any notification to the caller if allocation occurred or not.  This is one of those "I am worried about potential edge cases".</p>

<p><strong><code>const</code></strong></p>

<p>As <code>char *input</code> data does not change, add <code>const</code> for greater applicability and potential optimizations.</p>

<pre><code>//void httpString(char **dest, char *input, const char *find) {
//  char *start;
//  char *o_input = input;

void httpString(char **dest, const char *input, const char *find) {
  const char *start;
  const char *o_input = input;
</code></pre>

<hr>

<p>Minor</p>

<p><strong>No allocation check</strong></p>

<pre><code>*dest = malloc(length + 1);
if (*dest == NULL) {
  // do something
</code></pre>

<p><strong>Missing proto</strong></p>

<p>Add <code>#include &lt;stdlib.h&gt;</code> for <code>malloc()</code>.</p>

<p><strong>Unneeded code</strong></p>

<pre><code>while (*input == *find) {
  // if (*input == 0 || *find == 0) {
  if (*input == 0) {
    return;
  }
</code></pre>

<p><strong>Naming</strong></p>

<p><code>char *input</code> is not that useful.  Yes it is <em>input</em>, but input about what?</p>

<p>For such searching goals, code could use boring <code>s1, s2</code> like C lib <code>strstr(const char *s1, const char *s2)</code>, yet I prefer something more illustrative.</p>

<pre><code>void httpString(char **dest, const char *src, const char *pattern)
</code></pre>

<p>... or more <em>fun</em>: <a href="https://en.wikipedia.org/wiki/Needle_in_a_haystack" rel="nofollow noreferrer">Needle in a haystack</a></p>

<pre><code>void httpString(char **dest, const char *haystack, const char *needle)
</code></pre>

<hr>

<p>Candidate alternative:</p>

<pre><code>char *httpString(const char * restrict haystack, const char * restrict needle) {
  size_t needle_len = strlen(needle);
  while (*haystack) {
    if (*haystack++ == '&amp;' &amp;&amp; strncmp(haystack, needle, needle_len) == 0
        &amp;&amp; haystack[needle_len] == '=') {
      haystack += needle_len + 1;
      size_t password_len = strcspn(haystack, "&amp;");
      char *pw = malloc(password_len + 1u);
      if (pw == NULL) {
        return NULL; // Out of memory
      }
      pw[password_len] = '\0';
      return memcpy(pw, haystack, password_len);
    }
  }
  return NULL;  // Not found
}
</code></pre>
    </div>