<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I second @Steven's advice on using pattern matching.</p>

<p>Accessing list elements by index (<code>!!</code>) is discouraged because it has linear complexity and can raise unexpected errors if list is too short.
For example:</p>

<pre><code>let a = inputs !! 0 !! 0 + inputs !! 1 !! 0
</code></pre>

<p>is better written as</p>

<pre><code>let (x:xs) : (y:ys) : _ = inputs
let a = x + y
</code></pre>

<p>here you check input format declaratively and can give semantic names to its parts. </p>

<p>Using this idea you can get rid of <code>!!</code> and <code>tail</code> in your code:</p>

<pre><code>let [s, t, n]
      : (w : walkTimes)
      : rideTimes
      : intervals
      : _ = input

let a = s + w
let b = zipWith (+) walkTimes rideTimes
let c = intervals
</code></pre>

<hr>

<p>It is more idiomatic to use predefined higher-order recursion combinators like <a href="https://wiki.haskell.org/Fold" rel="nofollow noreferrer">fold</a> instead of simple recursion. E.g. you can rewrite <code>calcTime</code> in terms of <code>foldl</code>. This will make it clear that you iterate over <code>inputs</code> only once and computing some kind of "running sum" of its elements.</p>

<hr>

<p>Using <code>length</code> to check if list is empty is bad as it traverses whole list.
Use <code>travel == []</code> or <code>null travel</code> instead of <code>length travel == 0</code>.</p>

<hr>

<pre><code>main :: IO ()
main = do
    input &lt;- map (map read . words) . lines &lt;$&gt; getContents
    let [s, t, n]
          : (w : walkTimes)
          : rideTimes
          : intervals
          : _ = input

    let b = zipWith (+) walkTimes rideTimes
    let finalTime = calcTime (s + w) $ zip b intervals
    putStrLn $ if finalTime  &lt;= t then "yes" else "no"

calcTime :: Int -&gt; [(Int, Int)] -&gt; Int
calcTime = foldl (\c (t,i) -&gt; t + i * (div c i + signum (mod c i)))
</code></pre>
    </div>