<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Recovery from Errors</h2>

<p>The <code>safe_malloc()</code> function looks good, however, you could use <a href="http://www.cplusplus.com/reference/csetjmp/setjmp/" rel="nofollow noreferrer"><code>setjmp and longjmp</code></a> rather than <code>exit(EXIT_FAILURE)</code> to attempt to recover enough to clean up after errors occur and to only exit the program from main. According to an answer on this <a href="https://stackoverflow.com/questions/14685406/practical-usage-of-setjmp-and-longjmp-in-c">stackoverflow question</a> they can also be used for co-routines. The additional information that <code>exceptions</code> provide for a fuller recovery is not present.</p>

<h2>Portability</h2>

<p>While the function <code>getopt()</code> is part of the <code>POSIX</code> standard, it is not part of the C99 programming standard, and will not be portable to all systems. It might be good to add this to the Utilities files. <code>getopt()</code> also seems to be implementing a global variable <code>optind</code> which is generally considered a bad programming practice.</p>

<p>Another function in some C libraries that is not standard that you may want to add to the Utilities files is <code>char* strdup(char* Original)</code> which could be used to replace the following blocks of code in `Recipe.c:</p>

<pre><code>        int nameLength = (int)strlen(buffer);
        char name[nameLength];
        buffer[strcspn(buffer, "\n")] = '\0';
        strcpy(name, buffer);

        int instructionSize = (int)strlen(buffer);
        char instructions[instructionSize];
        strcpy(instructions, buffer);
</code></pre>

<p>Please note that the above code does not compile in a strict C compiler because arrays declared with a variable used as the length are not allowed. There is also an inherent bug in the above code because not enough memory will be allocated for the null terminator.</p>

<pre><code>char *strdup(char *Original)
{
    size_t duplicate_size = strlen(Original) + 1;   // Allocate for the null terminator as well.
    char *duplicate = (duplicate_size &gt; 1) ? safe_malloc(duplicate_size) : NULL;

    if (duplicate != NULL)
    {
        strcpy(duplicate, Original);
    }

    return duplicate;
}
</code></pre>

<p>The <code>strdup()</code> function will apparently be included in <a href="https://en.cppreference.com/w/c/experimental/dynamic/strdup" rel="nofollow noreferrer">future C programming standards</a>.</p>

<h2>Missing Header Includes</h2>

<p>The file <code>main.c</code> is missing the includes:<br>
  - <code>#include &lt;stdlib.h&gt;</code><br>
  - <code>#include "Recipe.h"</code></p>

<p>It really shouldn't compile.</p>

<h2>Complexity</h2>

<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states that</p>

<blockquote>
  <p>every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>The SRP is one of the 5 principles in <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">SOLID programming</a>.</p>

<p>The <code>while (1)</code> in <code>main()</code> should be in its own function and should probably be broken up into multiple functions.</p>

<p>The functions <code>Recipe* readRecipe()</code> and <code>Recipe* parseRecipes(const char* path)</code>  are also too complex. Generally any function that does not fit into one screen of an editor or IDE is too complex and should be broken up into multiple functions. I've had managers that insisted that any function larger than 10 lines to too complex, but I disagree with that. </p>

<h2>Algorithm</h2>

<p>Since <code>recipes</code> is a linked list it might be better to implement a full set of linked list operations such as <code>create_recipe</code>, <code>insert_recipe</code>, <code>append_recipe</code>, <code>find_recipe</code> and <code>delete_recipe</code> so that the program is easier to expand or modify. It might also be better to define two separate data structures: one for linked lists and one for recipes. The one for linked lists could be defined as:</p>

<pre><code>typedef  struct node
{
    Recipe *data;
    struct node* next;
} Node;
</code></pre>

<p>This would allow the separation of the processing of the linked list from the processing of the recipe. The linked list operators above would then be <code>create_node(Recipe* data)</code>, <code>insert_node(Node *a_node)</code>, <code>find_node()</code> and <code>delete_node()</code>.</p>
    </div>