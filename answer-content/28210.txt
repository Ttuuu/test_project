<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It will certainly be faster if you vectorize the distance calculations:</p>

<pre><code>def closest_node(node, nodes):
    nodes = np.asarray(nodes)
    dist_2 = np.sum((nodes - node)**2, axis=1)
    return np.argmin(dist_2)
</code></pre>

<p>There may be some speed to gain, and a lot of clarity to lose, by using one of the dot product functions:</p>

<pre><code>def closest_node(node, nodes):
    nodes = np.asarray(nodes)
    deltas = nodes - node
    dist_2 = np.einsum('ij,ij-&gt;i', deltas, deltas)
    return np.argmin(dist_2)
</code></pre>

<p>Ideally, you would already have your list of point in an array, not a list, which will speed things up a lot.</p>
    </div>