<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I came up with this:</p>
<pre><code>import itertools
import re

chunks = (grouped_chunk.split() for grouped_chunk in re.split("\\s+\\d+\\s+", mystring))
preceding_chunks = []

for reversed_chunk in map(reversed, chunks):
    preceding_chunk = list(itertools.takewhile(lambda word: word not in check_words, reversed_chunk))[::-1]
    preceding_chunks.append(preceding_chunk)
</code></pre>
<p>We apply <code>itertools.takewhile</code> to the <code>reversed_chunk</code> which gives us the preceding chunk in reversed order. We then obtain the correctly ordered <code>preceding_chunk</code> by reversing at the end with <code>[::-1]</code>.</p>
<p>The regex splits <code>mystring</code> based on a number (the escaped <code>\d+</code>). The surrounding escaped <code>\s+</code>s represent any padding around the number. This causes this code to have different behavior than yours if digits and letters are mixed in the same words (for example, <code>a1</code>).</p>
<p>For your original code, I'd make a couple suggestions:</p>
<ol>
<li>Follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>. For example, add spacing after the comma in <code>i,word</code>.</li>
<li>Remove the redundant expression <code>preceding_words[::-1]</code>. While this does evaluate to the reversed <code>preceding_words</code>, because it is not in-place, the evaluation has no side-effects. Plus, you already perform this reversal in <code>enumerate(preceding_words[::-1])</code>.</li>
</ol>
    </div>