<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should make an attempt to vectorize much of your code. It's an important way to re-think your code in terms that allow for computers to efficiently execute SIMD (single-instruction multiple-data) and achieve massive speedup as compared to naive implementations. There are many libraries to allow you to vectorize your code. So far the most promising-looking one (caveat: I haven't tried it) seems to be <a href="http://jblas.org/" rel="nofollow noreferrer">JBLAS</a>.</p>

<p>Specifically, this:</p>

<pre><code>double minX = points.get(0).getX().doubleValue();
double minY = points.get(0).getY().doubleValue();
double minZ = points.get(0).getZ().doubleValue();
</code></pre>

<p>should be represented by one vector, and this:</p>

<pre><code>double maxX = points.get(0).getX().doubleValue();
double maxY = points.get(0).getY().doubleValue();
double maxZ = points.get(0).getZ().doubleValue();
</code></pre>

<p>should be represented by one vector. This loop:</p>

<pre><code>for(Point_3 point : points) {

    // update the minimum.
    // ...
</code></pre>

<p>should not exist at all, and you should be calling a vectorized routine instead.</p>

<p>Similar to the above, this:</p>

<pre><code>this.width = 0.75*(maxX - minX);
this.height = 0.75*(maxY - minY);
this.depth = 0.75*(maxZ - minZ);
</code></pre>

<p>should not be represented by three separate members, nor should you be repeating the same operation three times. Instead, represent it as one vector perhaps called <code>this.size</code>.</p>

<p>This:</p>

<pre><code>public double diam() {
    if(this.isLeaf()) {
        return 0.0;
    }
    return 2*Math.sqrt(this.width*this.width + 
                       this.height*this.height + 
                       this.depth*this.depth);
}
</code></pre>

<p>is you rolling your own Euclidean norm, which you shouldn't do. BLAS has functions for this. Similar vectorization should be done elsewhere in your code, such as <code>inBoundary</code>. This:</p>

<pre><code>for(OctreeNode child : children) {
     child.width = this.width / 2;
     child.depth = this.depth / 2;
     child.height = this.height / 2;
}
</code></pre>

<p>should treat every child's size as a single vector rather than separate components. You should also compute <code>this.size / 2</code> outside of the loop. It may even be possible to represent <code>children</code> as a matrix with each row representing a child and the columns representing <code>x</code>, <code>y</code> and <code>z</code> respectively, which would eliminate the need for a loop altogether.</p>

<p>Along the same lines, <code>distance</code> can be greatly tightened up by dealing with vectors rather than individual components, particularly lines like these:</p>

<pre><code>x = Math.min(Math.abs(v.getX().doubleValue()) - o.width - u.width, 0.0);
y = Math.min(Math.abs(v.getX().doubleValue()) - o.height - u.height, 0.0);
z = Math.min(Math.abs(v.getX().doubleValue()) - o.depth - u.depth, 0.0);
return Math.sqrt(x*x + y*y + z*z);
</code></pre>

<p>This can be done in one line of vectorized code.</p>
    </div>