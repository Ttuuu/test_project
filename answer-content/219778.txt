<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Specification</h1>

<p>I'm having trouble understanding the problem. I <em>think</em> you roll two dice at once, and the results must be distinct and adjacent to each other and to the previous roll.</p>

<h1>Comments</h1>

<p>Your question includes some explanation before the program:</p>

<blockquote>
  <p>I'm modeling a simple dice game that a friend and I invented.</p>
  
  <p>On any one turn of the game, you must roll a specific combination to stay in the game.</p>
  
  <p>The particular rule I'm trying to model is this:</p>
  
  <p>Given a previous roll (where the dice are contiguous) make another contiguous roll either above the previous roll or before it. 6 and 1 are considered contiguous. Outside of being contiguous the order of the dice does not matter...</p>
</blockquote>

<p>This should be part of the program! It could be a docstring at the beginning of the file.</p>

<blockquote>
  <p>arguments:</p>
  
  <p>prev = previous/ existing roll</p>
  
  <p>curr = current roll to check</p>
  
  <p>sides = number of sides of the dice</p>
</blockquote>

<p>These should also be part of the program! They should be part of <code>chkStk</code>'s docstring, or better yet, included in the argument names. <code>prev</code> and <code>curr</code> could be called <code>previous_roll</code> and <code>current_roll</code>.</p>

<p><code>srt</code> returns its argument in order, unless it contains both bounds, in which case it's reversed. This is surprising, so it requires an explanation in a comment or docstring.</p>

<h2>Names</h2>

<p>All three function names are inscrutably short.</p>

<ul>
<li><code>srt</code> sorts its argument (which should be a two-element list) in a cyclic order. So it could be called <code>cyclic_order</code>.

<ul>
<li><code>srt</code>'s argument <code>a</code> is a 2-die roll (i.e. a pair), so it should be called <code>pair</code> or <code>roll</code>.</li>
</ul></li>
<li><code>cmp</code> checks whether its argument is a contiguous ascending sequence (in the same cyclic order). So it could be called <code>contiguous</code> or <code>is_contiguous</code> or <code>is_ascending</code> or even <code>in_order</code>.

<ul>
<li><code>cmp</code>'s argument <code>a</code> is a list of (1-die) rolls, so it should be called <code>rolls</code>.</li>
</ul></li>
<li><code>chkStk</code> checks whether <code>curr</code> is a valid roll after <code>prev</code>, so it should be called something like <code>valid_roll</code> or <code>is_valid_roll</code> or `</li>
</ul>

<p>(It's confusing to have <code>roll</code> mean a pair of 1-die rolls, so maybe the whole program should switch to something consistent, such as "roll" for one die and "pair" for two dice.)</p>

<h1>Small simplifications</h1>

<p><code>True if boolean_expression else False</code> can be simplified to just <code>boolean_expression</code>.</p>

<p>[debatable] <code>(min(a), max(a)) == (1, sides)</code> is short, but most people are accustomed to reading <code>min(a) == 1 and max(a) == sides</code>.</p>

<p>Even better: since <code>1</code> and <code>sides</code> are the minimum and maximum values possible, you can skip the <code>min</code> and <code>max</code> and just check whether the values are present: <code>1 in a and sides in a</code>.</p>

<p><code>list(x for x in foo)</code> can be simplified to just <code>list(foo)</code>.</p>

<h1>Simpler ways</h1>

<p>In <code>cmp</code>, instead of building a sequence in cyclic order and comparing to it, it might be simpler to check that each successive pair is in cyclic order.</p>

<p>There are easier ways to solve this problem.</p>

<p>If my restatement of the problem above ("the results must be adjacent to each other and to the previous roll") is correct, it can be easily turned into a program. You can simply check each part (possibly in a helper function):</p>

<ul>
<li>whether two dice of a pair are adjacent to each other</li>
<li>whether two pairs are adjacent to each other</li>
</ul>

<p>You can do both of these without any list operations.</p>

<h1>Tests</h1>

<p>Instead of printing out results for you to check, your test cases can check them for you! The simplest way to do this is with <code>assert</code>:</p>

<pre><code>assert chkStk([5, 6], [1, 2], 6)
assert not chkStk([5, 6], [1, 4], 6)
assert not chkStk([6, 1], [2, 1], 6), 'overlapping pairs should fail'
</code></pre>

<p>This won't print anything unless the test fails. You can include an optional error message.</p>
    </div>