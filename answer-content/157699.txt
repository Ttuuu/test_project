<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If we look at your <code>for</code> loop <em>very</em> carefully we can see that you can eliminate two multiplications:</p>

<blockquote>
<pre><code>for (int y = 0; y &lt; height; y++) {
    for (int x = 0; x &lt; width; x++) {
        for (int color = 0; color &lt; 3; color++) {
            int idx = (y * stride) + x * 4 + color;
            totals[color] += p[idx];
        }
    }
}
</code></pre>
</blockquote>

<p>You don't use <code>y</code> except for <code>y * stride</code>, and you don't use <code>x</code> except for <code>x * 4</code>, rewrite the <code>for</code> loop and you can eliminate those entirely.</p>

<pre><code>var heightLimit = height * stride;
var widthLimit = width * 4;

for (int y = 0; y &lt; heightLimit; y += stride) {
    for (int x = 0; x &lt; widthLimit; x += 4) {
        for (int color = 0; color &lt; 3; color++) {
            int idx = y + x + color;
            totals[color] += p[idx];
        }
    }
}
</code></pre>

<p>By removing all three multiplication operations, we effectively reduce the amount of work we do by a significant portion. (There are roughly 8 instructions in the original, and 6 in the reduced, so we've eliminated 25% of our work.)</p>

<p>Other than that, there really isn't <em>much</em> you can do. You could consider chunking the work, then only <em>recalculate</em> the regions that were re-drawn if that's reasonable, you could also chunk and thread it (this wouldn't reduce CPU usage but it would reduce time spend on this method).</p>

<p>With as frequently as you call this method, the next lines may be a potential for optimization as well:</p>

<blockquote>
<pre><code>int avgB = totals[0] / (width * height);
int avgG = totals[1] / (width * height);
int avgR = totals[2] / (width * height);
</code></pre>
</blockquote>

<p>Why do <code>width * height</code> in <em>all three calculations</em>? Why not store <code>var pixelCount = width * height;</code> then divide by <code>pixelCount</code>? Of course, division is still slow, but you're not using floating-point math so we can't use the reciprocal of it.</p>

<p>You could consider, <a href="https://codereview.stackexchange.com/questions/157667/getting-the-dominant-rgb-color-of-a-bitmap#comment298530_157667">as mentioned in a comment</a>, using CUDA/OpenGL/GPU-level work. Basically, operating on the GPU itself instead of using the CPU to do what <em>could</em> be very efficient on the GPU. (It's built <em>specifically for</em> this type of processing.) <a href="https://stackoverflow.com/q/4119876/4564272">There is at least one Stack Overflow question on running C# code on the GPU, it's not very easy or simple, but it <em>can</em> give you a lot of power.</a></p>
    </div>