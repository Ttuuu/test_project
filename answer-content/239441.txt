<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some of the issues include copying the data and passing by reference or const reference. Might I suggest following the STL's method of using iterators?</p>

<p>Your any function is essentially <a href="https://en.cppreference.com/w/cpp/algorithm/find" rel="nofollow noreferrer">std::find_if</a> using a container instead of iterators.</p>

<p>Rewriting it to use <code>std::find_if</code> reveals the differences:</p>

<pre class="lang-cpp prettyprint-override"><code>template&lt;typename List, typename Predicate&gt;
bool any(List&amp;&amp; list, Predicate&amp;&amp; pred)
{
    return std::find_if(
                        begin(list),
                        end(list), 
                        std::forward&lt;Predicate&gt;(pred))
           != end(list);
}
</code></pre>

<p>Some of the issues I see with your initial implementation are:</p>

<ul>
<li>Passing list as a non-const reference. This is fixed as in MSalters answer and shown above.</li>
<li>Passing the predicate as a pointer. We're using templates here, so let the predicate be anything it wants without being converted to a function pointer.</li>
<li>Reimplementing <code>std::find_if</code> (though I understand wanting to learn!)</li>
</ul>

<p>My recommended method of implementing this without <code>std::find_if</code> is:</p>

<pre class="lang-cpp prettyprint-override"><code>template&lt;typename List, typename Predicate&gt;
bool any(List&amp;&amp; list, Predicate&amp;&amp; pred)
{
    for(auto&amp;&amp; element : list) {
        if(pred(element))
            return true;
    }
    return false;
}
</code></pre>
    </div>