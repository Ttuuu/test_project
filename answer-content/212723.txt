<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PEP-8</h2>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> is a style guide for Python.
It contains several practices which you should follow, like having spaces around operators.  Use a tool, like pylint, to ensure you follow these practices.</p>

<h2>Integer Division</h2>

<pre><code>mid=int((left+right)/2)
</code></pre>

<p>Python comes with a built-in integer division operator: <code>//</code>.  You should use it.</p>

<pre><code>mid = (left + right) // 2
</code></pre>

<h2>Termination</h2>

<pre><code>while x[mid] != y:
</code></pre>

<p>You are searching until you find the desired value.  What if the desired value is not present?  You will search forever???  Consider adding a different stopping condition.</p>

<h2>Redundancy</h2>

<pre><code>    if x[mid]&gt;y:
        #...
        mid=int((left+right)/2)
    if x[mid]&lt;y:
        #...
        mid=int((left+right)/2)
</code></pre>

<p>Since you are looping while <code>x[mid] != y</code>, your only real choices are for <code>x[mid] &gt; y</code> or <code>x[mid] &lt; y</code>.  Instead of testing the second condition, how about using <code>else:</code>?</p>

<p>Since you enter will either the <code>x[mid] &gt; y</code> then clause, or the <code>x[mid] &lt; y</code> then clause, you will always be executing <code>mid=int((left+right)/2)</code>.  You can safely move those two statements out if the <code>if</code>, and unconditionally execute it at the end.  As in:</p>

<pre><code>    if x[mid] &gt; y:
        #...
    else:
        #...
    mid = (left + right) // 2
</code></pre>

<h2>Efficiency</h2>

<p>If you start with <code>left=0, right=99, mid=49</code>, and find <code>x[mid]&gt;y</code> is true, you proceed to search in the range <code>left=0, right=49</code>.  But you've already tested <code>x[49]</code> and found the value wasn't there; you don't need to include it in your search range anymore.  Similarly, when you find <code>x[mid]&lt;y</code>, you don't need to include that <code>mid</code> point as the <code>left</code> end of your range.</p>

<pre><code>    if x[mid] &gt; y:
        right = mid - 1
    else:
        left = mid + 1
</code></pre>

<h2>Bug</h2>

<p>Your existing algorithm will not terminate for certain numbers.  If you search for <code>99</code>, the value of <code>mid</code> will take on the following values:</p>

<pre><code>49, 74, 86, 92, 95, 97, 98, 98, 98, 98, 98, 98, 98, 98, ...
</code></pre>
    </div>