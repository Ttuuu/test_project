<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>here are some comments on the class code which I hope are of some use to you.</p>

<p><strong>Dependency Injection</strong>
Creating the PDO object inside the constructor introduces a POD dependency on User class. Think about <a href="https://www.thinktocode.com/2017/10/10/solid-principles-in-php/" rel="nofollow noreferrer">SOLID principles</a> when writing classes. The "S" in "SOLID" stands for <em>Single Responsibility</em>. Classes should have a <code>Single responsibility</code> - one specific purpose. The User class should not be dependent about what database connection it uses.</p>

<p>When building more complex software with many classes this becomes <strong>extremely</strong> important to reduce class coupling (and reduce complexity). Say if you need to mock an object (that class you want to mock because it not be written yet, or may not have been purchased yet from an external vendor) you can still test your class. </p>

<p>So, pass the PDO object into the User class constructor:</p>

<pre><code> // PDO object is injected into User class
    public function __construct(PDO $pdo)
    {
        $this-&gt;pdo = $pdo;
</code></pre>

<p>You <strong><em>may</em></strong> also consider (depending on your requirements) managing the user's session in another class and injecting that class into User.</p>

<p><strong>Type Declarations</strong>
Type declarations (or hinting as it was known in PHP5) has been around a while now. It was available for some types in PHP5. Now in PHP7 the feature is more extensive. Also we can enforce the type of parameters and return types. What benefits does this have?</p>

<ul>
<li><p>It states intent: making it clear what types functions and methods
support. It communicates to others (your team members say) what types
are valid.</p></li>
<li><p>It promotes better code: any use of the wrong type can  cause an<br>
exception to throw. No-one can ignore an exception.</p></li>
<li><p>Helps when using a PHP IDE.</p></li>
<li><p>Can help eliminates issues due to type coercion. For example, we may not wish our string to be converted to an integer.</p></li>
</ul>

<p>For more details read <a href="https://php.net/manual/en/migration70.new-features.php" rel="nofollow noreferrer">PHP7 new features</a></p>

<p>Rather than return either 0 or 1, enforce the return type as bool. It more clearly states the intent of the method.</p>

<pre><code>/**
 *  Register Function 
 *
 * Register a user to the system by adding record to the 
 * user_profile table, and then calls login method.

 * @param string $email - User's email
 * @param string $password - User's password
 * @param string $fname - User's first name
 * @param string $lname - User's last name
 * @return bool - true if user is registered without error.
*/
public function user_register(string $email, 
    string $password, 
    string $fname, 
    string $lname) : bool
{
   ....
    if ($result) {
      // register success
      $this-&gt;user_login($email, $password);
      return true;
    }

    ....
    return false; // user not registered
 }
</code></pre>

<p><strong>Documentation</strong> 
You've commented some methods which is good. Consider extending this by using a documentation generator such as <a href="https://en.wikipedia.org/wiki/PHPDoc" rel="nofollow noreferrer">PHPDoc</a>. In fact you've used PHPDoc format for register_user(). But the method comments should document the method purpose, what it returns and what the parameters are for. </p>

<p>This helps you remember  when returning to code you've written some time ago (as we all have done and you have mentioned you have in your post). Many IDE's (such as Netbeans, PHPStorm) use the documentation to help interpret code. See above code for example. </p>
    </div>