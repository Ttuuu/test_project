<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You use <code>IList&lt;&gt;</code> where you should use <code>ICollection&lt;&gt;</code>. I've rarely encountered a scenario where <code>IList&lt;&gt;</code> actually needs to be used. The <code>ICollection&lt;&gt;</code> interface has most of the list's methods, but without everything related to indexing, which you don't use anyway. It's not that big of a deal, but I think it's good knowledge.</p>

<hr>

<p>When you search for constructor parameters, I think you should match on parameter types in addition of parameter names. The reason behind this is that this that parameter types with names are guaranteed to be unique, where parameter names could not. For example (it's not a great one, but it's a case that would make your code potentially crash)</p>

<pre><code>class Foobar
{

    public Foobar(string a, int b)
    {
    }

    public Foobar(string a, double b)
    {
    }

}
</code></pre>

<hr>

<p>One problem I see with the <code>Immutable&lt;T&gt;</code> class is that I wouldn't expect a <code>static</code> property to return a new reference every time I call it. I've been trying to find another example in the .NET framework of when this happens, and... I couldn't. I would change it for a method named something like <code>CreateBuilder()</code> or something like that, this way it's clear that we are using a new builder every time we call the method.</p>

<hr>

<p>I think the <code>Immutable&lt;&gt;</code> type is misleading. When seeing this, I'd expect being able to use it to make some mutable type immutable (however that would be done), but that's not what it does. As a matter of fact, most of your code doesn't rely on the <code>T</code> type to be immutable, which makes me think a tweak or two could make your tool work on mutable types too. In that sense, claiming it's an <code>ImmutableBuilder</code> is kind of wrong, it's a builder that works on immutable types, but on mutable types too.</p>

<hr>

<p>According to comments, your <code>With</code> method in <code>ImmutableHelper</code> creates a copy of the object with a changed parameter, which is alright considering it doesn't modify the immutable type. What I think could be improved is a similar method with the signature <code>static T With&lt;T, TProperty&gt;(this T obj, IEnmerable&lt;(Expression&lt;Func&lt;T, TProperty&gt;&gt; selector, TProperty value)&gt;)</code>, so that if you want to modify more than one field in the object you could do so without having to create a copy of the object every time.</p>
    </div>