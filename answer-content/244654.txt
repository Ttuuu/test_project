<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Misplaced Responsibility: <code>print()</code></h1>
<p>The <code>class LinkedList</code> (or <code>data class Node</code>, see below) should not <code>print()</code> functions.
Calling <code>print()</code> functions is a separate responsibility and should be done elsewhere in the code:
What if you want your program to support different output formats like JSON or XML and they shall be sent over the network?
Of course, we don't prepare software for all what-ifs.
But we do make the obvious "cuts" between responsibilities.
To get a printable representation, extract the text used by the <code>print()</code> calls into a <code>toString()</code> method.
Then call <code>print(node)</code> from <code>main()</code>.</p>
<h1>Avoid Feature Envy (from <code>LinkedList</code> on <code>Node</code>)</h1>
<p><em>Feature Envy</em> is a special type of Misplaced Responsibility.
The <code>class LinkedList</code> doesn't have any features of its own, and no state.
Instead, it only operates on everything in the <code>data class Node</code>.
This is a design smell that we call <em>Feature Envy</em>.
Move all the methods from the <code>class LinkedList</code> to the <code>data class Node</code>.
Then remove the <code>class LinkedList</code>.</p>
<p>You will notice that when you fix <em>Feature Envy</em> problems, the lines become shorter: References that have to wander around because of the Feature Envy become the omittable <code>this</code>.</p>
<p>There are situations where this type of Feature Envy is justified:
In cases of specific design patterns like Proxy, Delegate, Facade.</p>
<p>The <code>class LinkedList</code> does not qualify as a <em>Facade</em> because it exposes the type <code>Node&lt;T&gt;</code>.
It would only qualify if its type <code>Node&lt;T&gt;</code> would be hidden from the user, and the only other type the user sees were <code>&lt;T&gt;</code>.</p>
<p>The sitaution would, of course, change once you give <code>class LinkedList</code> fields <code>head</code> and <code>tail</code>.</p>
<h1>Avoid error-prone interfaces</h1>
<p>The current interface is error-prone.
It allows for broken linked lists.
The fields <code>next</code> and <code>previous</code> should be read-only for the user of <code>Node</code>.
Instead, the user of <code>Node</code> should have to go through a method like <code>insertAfter()</code>, <code>insertBefore()</code>, <code>delete()</code>.
After all, insertion and deletion are not atomic operations but should be transactions.
As a next step, you could ponder about the thread-safety of these operations.</p>
<h1>Avoid exposing implementation detail</h1>
<p>That a LinkedList is implemented with Nodes is an implementation detail that the user doesn't need to know.
The user should be able to focus on the primary purposes of LinkedLists:</p>
<ul>
<li>Payload (data)</li>
<li>Iteration/Traversal</li>
<li>Insertion and Removal
Your interface is too low-level.</li>
</ul>
<p>The perfect <code>LinkedList</code> interface is (almost?) indistiguishable from an <code>ArrayList</code> interface. It should be possible to swap one implementation, like <code>LinkedList</code>, for another, like <code>ArrayList</code>, due to performance considerations (<em>O(1)</em> random access for <code>ArrayList</code>, <em>O(n/2)</em> random access for <code>LinkedList</code> vs <em>O(1)</em> insert/delete for <code>LinkedList</code>, <em>O(n/2)</em> insert/delete for <code>ArrayList</code>) without having to change all the code that uses the list.</p>
<h1>Null-Checking</h1>
<p>Only use <code>Type?</code> if you really need to support nullability.
I recommend to use <code>Type</code> instead of <code>Type?</code> whereever you can.
That the Kotlin compiler can enforce NonNull is one of the many strengths that it has over Java.
Don't squander it by making everything nullable with <code>?</code>.</p>
<h1>BUG: <code>fun nextDeepCopy()</code> doesn't create a deep copy</h1>
<p>It doesn't, because it doesn't recurse to itself but calls <code>newDeepCopy()</code>, and that is not recursive.</p>
<p>The correct way to create a deep copy of a LinkedList with additional random pointers would be to</p>
<ol>
<li>Create a map with the old nodes as key and the new node as value.</li>
<li>Loop over the map, setting the pointers of the new nodes by a lookup in the map.
Traditional ways of copying a LinkedList won't work because of the random pointer.</li>
</ol>
<p>Also, <code>fun newDeepCopy()</code> does exactly the same thing as the built-in <code>fun copy()</code>, it creates a shallow copy of the current object.</p>
<h1>Unit Tests?</h1>
<p>There are ways how to prevent bugs like the one above.
I recommend writing unit tests.
Even better, use Test-Driven Development.</p>
<h1>Use <code>if</code>-expressions</h1>
<p>In Kotlin, <code>if</code> is an expression.
You can make use of it.</p>
<p>The code:</p>
<pre><code>if (condition) return a else return b
</code></pre>
<p>can also be written as, more idiomatic:</p>
<pre><code>return if (condition) a else b
</code></pre>
<p>This would allow for all of your functions to become expression functions.</p>
<h1>Piece of Sample Code</h1>
<p>Here's a code snippet to show how your code could look like:</p>
<pre><code>data class Node&lt;T&gt;(
        var data: T?,
        var previous: Node&lt;T&gt;? = null,
        var next: Node&lt;T&gt;? = null,
        var random: Node&lt;T&gt;? = null
) {
    fun shallowCopy() = copy() // You could even omit this
    fun deepCopy(): Node&lt;T&gt; = TODO("Implement this")
    fun toString() = "Node data:${data} previous:${previous?.data} next:${next?.data} random:${random?.data}"
}
</code></pre>
    </div>