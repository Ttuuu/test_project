<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since we assume GCC or Clang, we can easily make the code adapt to the target's endianness:</p>

<pre><code>#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
    constexpr auto hton(std::uint64_t x){
        return __builtin_bswap64(x);
    }

    constexpr auto hton(std::uint32_t x){
        return __builtin_bswap32(x);
    }
#elif __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
    constexpr auto hton(std::uint64_t x){
        return x;
    }

    constexpr auto hton(std::uint32_t x){
        return x;
    }
#else
#error Unsupported byte order
#endif
</code></pre>

<p>I've used the conventional "host to net" name for the function, to be clearer.</p>

<hr>

<p>Some identifiers are misspelt: <code>std::uint32_t</code>, <code>std::uint64_t</code>, <code>std::strncpy</code>, <code>std::strncmp</code>, <code>std::printf</code>.</p>

<hr>

<p>This function is unnecessary:</p>

<blockquote>
<pre><code>template&lt;typename T&gt;
auto sscmp(T a, T b){
    return sshhash_implementation::sscmp(a, b);
}
</code></pre>
</blockquote>

<p>Much simpler to write</p>

<p>using sshhash_implementation::sscmp;</p>

<hr>

<p>No need for the immediately-executed lambda in <code>testC()</code>:</p>

<blockquote>
<pre><code>bool const ok = [=](){
    if (overflow)
        return x == 0 &amp;&amp; y == std::numeric_limits&lt;int&gt;::max();
    else
        return x == y;
}();
</code></pre>
</blockquote>

<p>That can be written as a simple expression:</p>

<pre><code>bool const ok = overflow
    ? x == 0 &amp;&amp; y == std::numeric_limits&lt;int&gt;::max()
    : x == y;
</code></pre>

<hr>

<p>In <code>mask()</code>, I think the constant <code>8</code> was intended to be <code>CHAR_BIT</code>, since it's converting a count of <code>char</code> to number of bits.</p>
    </div>