<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Python already has an exception that denotes that the value you passed is inappropriate somehow. It is <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="noreferrer"><code>ValueError</code></a>, which is what the built-in <a href="https://docs.python.org/3/library/functions.html#int" rel="noreferrer"><code>int</code></a> also raises if a wrong string is passed.</p>

<p>In addition, defining a nice readable error which you can raise, only to catch it directly within the function and to return <code>None</code> (the output of <code>print</code>) and print to the terminal is not ideal. Just let the exception rise to the caller of the function, it should be their problem if the function is used in a bad way (which you are telling them all about with that exception).</p></li>
<li><p>You should avoid magic constants. What are <code>57</code>  and <code>48</code>? Either give them names and use compound comparisons:</p>

<pre><code>zero = ord("0")
nine = ord("9")

if not zero &lt;= code &lt;= nine:
    ...
</code></pre>

<p>Or, maybe even better, write a <code>isdigit</code> function:</p>

<pre><code>def isdigit(s):
    return s in set("0123456789")
</code></pre>

<p>Which can be slightly sped up by using the standard library <a href="https://docs.python.org/3/library/string.html" rel="noreferrer"><code>string</code></a> module:</p>

<pre><code>from string import digits

DIGITS = set(digits)

def isdigit(s):
    return s in DIGITS
</code></pre>

<p>Incidentally, don't shadow the standard library <code>string</code> module, just call the input <code>s</code> or <code>x</code>, as <code>int</code> does.</p>

<p>Note that there are also <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="noreferrer"><code>str.isdigit</code></a>, but this unfortunately also returns true for unicode digits, such as all of <code>¹²³⁴⁵⁶⁷⁸⁹⁰</code>. Only with a whitelist can you fully control what counts as a digit in your case.</p></li>
<li><p>Instead of iterating over the string and directly calling <code>ord</code>, you can use <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer"><code>map</code></a> (and <a href="https://docs.python.org/3/library/functions.html#reversed" rel="noreferrer"><code>reversed</code></a>):</p>

<pre><code>for code in map(ord, reversed(string)):
    ...
</code></pre>

<p>You could also iterate over <code>multiplier</code> (or rather its exponent) at the same time using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a>:</p>

<pre><code>for exponent, code in enumerate(map(ord, reversed(string))):
    ...
    value += (code - zero) * 10 ** exponent
</code></pre></li>
<li><p>Actually directly manipulating ASCII values is not the most robust (although it works). Instead you could just make a dictionary that maps strings to integer values:</p>

<pre><code>VALUES = {c: d for d, c in enumerate(DIGITS)}
</code></pre></li>
<li><p>Using <code>string[0]</code> to check for a sign character can fail if the empty string is passed. Instead you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="noreferrer"><code>str.startswith("+")</code></a> or even <code>str.startswith(("+", "-"))</code>. This will just return <code>False</code> for an empty string.</p></li>
<li><p>With all this done, your function can actually easily be extended to arbitrary bases (but let's stick to maximum base 36, like <code>int</code>, i.e. all digits and lowercase letters):</p>

<pre><code>DIGITS = string.digits + string.ascii_lowercase
VALUES = {c: d for d, c in enumerate(DIGITS)}

def isdigit(s, base=10):
    return s in DIGITS[:base]

def atoi(x : str, base : int = 10):
    if not 2 &lt;= base &lt;= 36:
        raise ValueError("Only 2 &lt;= base &lt;= 36 currently supported")
    sign = 1
    if x.startswith(("+", "-")):
        if x[0] == "-":
            sign = -1
        x = x[1:]
    value = 0
    for exp, c in enumerate(reversed(x)):
        if c not in VALUES or VALUES[c] &gt;= base:
            raise ValueError(f"{c} is not a valid digit in base {base}")
        value += VALUES[c] * base ** exp
    return sign * value
</code></pre>

<p>This works, as demonstrated below:</p>

<pre><code>atoi("12345")
# 12345
atoi("+12345")
# 12345
atoi("-12345")
# -12345
atoi("12345", base=6)
# 1865
atoi("12345", base=5)
# ValueError: 5 is not a valid digit in base 5
atoi("101010", base=2)
# 42
atoi("1234567890abcdef", base=16)
# 1311768467294899695
atoi("1234567890abcdefghijklmnopqrstuvwxyz", base=36)
# 3126485650002806059265235559620383787531710118313327355
atoi("")
# 0
atoi("111", base=1)
# ValueError: Only 2 &lt;= base &lt;= 36 currently supported
atoi("Az", base=62)
# ValueError: Only 2 &lt;= base &lt;= 36 currently supported
</code></pre></li>
<li><p>You should surround your calling code with a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this module from another script without the user input/output being run:</p>

<pre><code>if __name__ == "__main__":
    x = input('Enter an optionally signed integer: ')
    try:
        print('It was a valid int! atoi() returned:', atoi(x))
    except ValueError:
        print('It was an invalid int!)
</code></pre></li>
</ul>
    </div>