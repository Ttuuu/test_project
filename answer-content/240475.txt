<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorry, you are not implementing OOP well, since it is true that you are defining a class, declaring its fields and instantiating it, this is being done in a wrong way.</p>
<h3>The Good</h3>
<ul>
<li>The abstraction is carried out properly for an exercise (because in a real design you may need more details)</li>
<li>The idea of giving a person an ID aka <code>pNumber</code> is something which will be closely related to ORM (Object Relational Mappings) which is a way to communicate your database(s) with your object oriented design</li>
</ul>
<h3>Review</h3>
<ul>
<li><strong>Don't Declare Public Variables</strong>, you have Getter/Setter methods to access the values or modify them.</li>
<li>In the class which owns your main method is where should go all the data gathering. Doing this</li>
</ul>
<pre class="lang-java prettyprint-override"><code>    Person()
    {
        pNumber++;
        pID = pNumber;
        //...
</code></pre>
<p>Is a bad practice you should (must) untie the logic from the view. Even if this is concept from the MVC (model view controller) pattern it is important to do that in each project in order to improve software quality, reduce errors and having a independent work structure so that when you change the UI for the user it won't affect the logic.</p>
<p>The alternative is to create a parametrized constructor:</p>
<pre class="lang-java prettyprint-override"><code>    Person(String fName, String lname, int age)
    {
        //also conssider call pID as personId (be descriptive)
        this.pID = ++pNumber;
        this.fName = fName;
        this.lName = lName;
        this.age = age;
    }

///how to use (in your main method)
    Person person = new Person("SyntÃ«y", "Emyl", 27);
</code></pre>
<ul>
<li>The variable <code>type</code> in Person class is something ambiguous (yes it is the type of the person but which implications does it have? which values may it take?), you should add a comment before the variable to describe it.</li>
</ul>
<h3>Some suggestions</h3>
<ul>
<li>Always use private fields.</li>
<li>The names given to your variables, it is quite short, it is not bad but it is better to specify them well so that your getter/setter have a quick meaning, <code>fName</code>, <code>lName</code> could be changed by <code>firstName</code>, <code>lastName</code>.</li>
<li>The static variable <code>pNumber</code> or <code>sNumber</code> could be named <code>personIdCounter</code> <code>studentIdCounter</code></li>
<li>It is not a standard but most people works with a regular expression which matches the following:
<code>[AccessModifier] [DataType] [FieldName];</code> and for static variables <code>[AccessModifier] static [DataType] [FieldName];</code></li>
<li>Try to not declare multiple fields (attributes) in the same line as in <code>public String fName, lName;</code></li>
</ul>
<p>Finally, I hope it has been helpful.</p>
    </div>