<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Manipulating bits</h1>

<p>One of the areas where your code may be improved is the way it handles and compares bits. You are using <code>char*</code> strings to represent bits while you could have used <code>unsigned</code> values and bitwise operations to speed up most of your operations. Actually, you should even replace every <code>int</code> representing bits by <code>unsigned</code> since the representation of <code>unsigned</code> values is known and they are the tool to use when representing bits.</p>

<ul>
<li><p>You can replace the <code>MANCHESTER_ONE</code> and <code>MANCHESTER_ZERO</code> definitions by:</p>

<pre><code>#define MANCHESTER_ONE 1u
#define MANCHESTER_ZERO 2u
</code></pre>

<p><code>1u</code> is <code>0b01</code> in binary and <code>2u</code> is <code>0b10</code>.</p></li>
<li><p>Then you can change the following bit of code in <code>encode</code>:</p>

<pre><code>switch (real)
{
case 0:
    bit = MANCHESTER_ZERO[0] - '0'; // Subtract 48 to work out the real value
    nbit = MANCHESTER_ZERO[1] - '0';
    break;
case 1:
    bit = MANCHESTER_ONE[0] - '0'; // Subtract 48 to work out the real value
    nbit = MANCHESTER_ONE[1] - '0';
    break;
}
</code></pre>

<p>By the way, the <code>switch</code> is useless since your are only checking for two values. You can replace it by a regular <code>if</code>:</p>

<pre><code>if (real == 0)
{
    bit = (MANCHESTER_ZERO &gt;&gt; 1) &amp; 1;
    nbit = MANCHESTER_ZERO &amp; 1;
}
else // real == 1
{
    bit = (MANCHESTER_ONE &gt;&gt; 1) &amp; 1;
    nbit = MANCHESTER_ONE &amp; 1;
}
</code></pre>

<p>Since we replaced the strings <code>MANCHESTER_*</code> by <code>unsigned</code> values, we use bitwise <code>AND</code>s instead of array subtracts.</p></li>
<li><p>A gain in efficiency may be obtained by refactoring this piece of code:</p>

<pre><code>// Put the data into a stringstream for comparison
std::stringstream con;
con &lt;&lt; bit &lt;&lt; nbit;
const char* sbit = con.str().c_str();

int real = 0;

// Compare the data and work out the value
if (strcmp(sbit, MANCHESTER_ONE) == 0)
{
    real = 1;
} else if (strcmp(sbit, MANCHESTER_ZERO) == 0) {
    real = 0;
}
</code></pre>

<p><code>std::stringstream</code> is known to be slow since you have to convert your integer values into strings first before performing operations on them. In a <code>for</code> loop, it may be a big performance loss. Here is how you can refactor this bit of code:</p>

<pre><code>// Put the bits in an unsigned
unsigned sbit = (bit &lt;&lt; 1) | nbit;

// Check only for MANCHESTER_ONE,
// assuming that it will be equal
// to MANCHESTER_ZERO if not
int real = int(sbit == MANCHESTER_ONE);
</code></pre>

<p>As said in the comments, I make the assumption that once computed, <code>sbit</code> can only be equal to <code>MANCHESTER_ONE</code> or <code>MANCHESTER_ZERO</code> and nothing else.</p></li>
</ul>

<h1>General advice about C++</h1>

<p>I cannot see any hint that you are using C++11, therefore I will review your code as C++03 code:</p>

<ul>
<li>As said in the comments, allocating memory in a function and not deallocating it is not a good idea. You should simply use a <code>std::vector</code> to represent your arrays of numbers.</li>
<li><code>#define</code> is to be avoided whenever possible in C++. Consider using <code>const</code> variables instead.</li>
<li>The standard way to check whether you are debugging is <code>#ifndef NDEBUG</code> (the double negative is kind of ugly, but it's the standard way).</li>
<li>In C++, it is useless to write <code>return 0;</code> at the end of <code>main</code>. If no <code>return</code> statement is given, the compiler will add an implicit <code>return 0;</code>.</li>
<li>If the <code>MANCHESTER_*</code> constants are not used anywhere else, you can define them as <code>private</code> <code>static const</code> variables of the class <code>Machester</code>.</li>
</ul>

<hr>

<p>Here is your code once refactored:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;vector&gt;

class Manchester
{
public:

    static std::vector&lt;unsigned&gt; encode(const std::vector&lt;unsigned&gt;&amp; data, unsigned length)
    {
        std::vector&lt;unsigned&gt; output(length * 2);

        for (unsigned i = 0; i &lt; length; i++)
        {

            // Work out the array indexes to use
            unsigned bid = i * 2;
            unsigned nbid = bid + 1;

            // Get the data
            unsigned real = data[i];

            unsigned bit = 0;
            unsigned nbit = 0;

            // Work out what it is
            if (real == 0)
            {
                bit = (ZERO &gt;&gt; 1) &amp; 1;
                nbit = ZERO &amp; 1;
            }
            else // real == 1
            {
                bit = (ONE &gt;&gt; 1) &amp; 1;
                nbit = ONE &amp; 1;
            }

            #ifndef NDEBUG
                std::cout &lt;&lt; "[encode] " &lt;&lt; real &lt;&lt; " [" &lt;&lt; bit &lt;&lt; nbit &lt;&lt; "]" &lt;&lt; std::endl;
            #endif

            output[bid] = bit;
            output[nbid] = nbit;
        }

        return output;
    }

    static std::vector&lt;unsigned&gt; decode(const std::vector&lt;unsigned&gt;&amp; data, unsigned length)
    {
        if ((length % 2) != 0)
        {
            throw std::range_error("length is not a multiple of 2");
        }

        std::vector&lt;unsigned&gt; output(length / 2);

        for (unsigned i = 0; i &lt; (length / 2); i++)
        {
            // Work out the array indexes to use
            unsigned bid = i * 2;
            unsigned nbid = bid + 1;

            // Get the data
            unsigned bit = data[bid];
            unsigned nbit = data[nbid];

            // Put the data into an unsigned int
            unsigned sbit = (bit &lt;&lt; 1) | nbit;

            // Check only for MANCHESTER_ONE,
            // assuming that it will be equal
            // to MANCHESTER_ZERO if not
            unsigned real = unsigned(sbit == ONE);

            #ifndef NDEBUG
                std::cout &lt;&lt; "[decode] bit: " &lt;&lt; bit &lt;&lt; nbit &lt;&lt; " [" &lt;&lt; real &lt;&lt; "]" &lt;&lt; std::endl;
            #endif

            output[i] = real;   
        }
        return output;
    }

private:

    static const unsigned ONE;
    static const unsigned ZERO;
};

const unsigned Manchester::ONE = 1u;
const unsigned Manchester::ZERO = 2u;


int main()
{
    typedef std::vector&lt;unsigned&gt; vec_t;

     // Some unencoded data
    unsigned data[] = { 1u, 1u, 0u, 0u };
    // Initialize vector with array
    vec_t vec(data, data+sizeof(data) / sizeof(unsigned));

    vec_t encoded = Manchester::encode(vec, 4);
    vec_t decoded = Manchester::decode(encoded, 8);
}
</code></pre>

<p>You can find a live working version <a href="http://coliru.stacked-crooked.com/a/8380911333b19863" rel="nofollow noreferrer">here</a> at Coliru.</p>
    </div>