<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With regex it's virtually a one-liner:</p>

<pre><code>var words = 
    Regex.Matches("SmallFireBall", @"([A-Z][a-z]+)")
    .Cast&lt;Match&gt;()
    .Select(m =&gt; m.Value);

var withSpaces = string.Join(" ", words);
</code></pre>

<ul>
<li><code>Regex.Matches</code> - searches an input string for all occurrences of a regular expression and returns all the matches. <a href="https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.matches(v=vs.110).aspx" rel="noreferrer">MSDN</a></li>
<li><code>[A-Z][a-z]+</code> - matches strings that begin with a capital letter and are followed by one or more lowercase letters</li>
</ul>

<p>Output:</p>

<blockquote>
  <p>Small Fire Ball</p>
</blockquote>

<hr>

<p>Let's review your code anyway and <em>optimize</em> it a little bit. Even without regex it still can be very short.</p>

<ul>
<li>Use a <code>StringBuilder</code> for building string dynamically</li>
<li><p>You can use a <code>foreach</code> loop for strings too</p>

<pre><code>public static string SplitOnCapitalLetters2(this string inputString)
{
    var result = new StringBuilder();

    foreach (var ch in inputString)
    {
        if (char.IsUpper(ch) &amp;&amp; result.Length &gt; 0)
        {
            result.Append(' ');
        }
        result.Append(ch);
    }
    return result.ToString();
}
</code></pre></li>
</ul>

<hr>

<p>The 3rd alternative would be only LINQ:</p>

<pre><code>public static string SplitOnCapitalLetters3(this string inputString)
{
    // starts with an empty string and accumulates the new string into 'result'
    // 'next' is the next character
    return inputString.Aggregate(string.Empty, (result, next) =&gt;
    {
        if (char.IsUpper(next) &amp;&amp; result.Length &gt; 0)
        {
            result += ' ';
        }
        return result + next;
    });
}
</code></pre>
    </div>