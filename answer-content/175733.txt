<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes there are better ways:</p>

<p>But exactly what will depend on your want. Do you want to maintain the original vector?</p>

<p>Zeta has shown several techniques that maintain the original container (by using copy). Personally I think that is wrong as copy is inherently an expensive operation.</p>

<p>If you want filter out I would say you want to remove bad items (effectively destroying the original). The the standard <code>Erase Remove Idiom</code> is the technique to use.</p>

<pre><code>ids.erase(std::remove_if(std::begin(ids), std::end(ids), isBadId), std::end(ids));
</code></pre>

<p>The <code>std::remove*()</code> algorithm "moves" all the bad elements to the end of the container (returning an iterator to the first bad elemenet). Then the erase will "erase" from the container from that point to the end.</p>

<p>Another alternative is to split the container into two. One of bad values and one of good values. A bit more work. But can be made relatively efficient by using <code>std::move(&lt;stcBegin&gt;, &lt;srcEnd&gt;, &lt;dstBegin&gt;)</code></p>

<pre><code> // Find all the bad elements and "move" them to the end, by using swap,
 // of your container. Note this is a usually a move (not a copy so cheap).
 auto firstBadValue = std::end(ids);
 for(auto loop = std::begin(ids); loop != firstBadValue; ++loop) {
     if (isBadId(*loop) {
         std::swap_iter(loop, --firstBadValue);
     }
 }

 // Now "move" one set of the elements from the original container
 // to the new container. Remember to reserve enough space to prevent
 // resizing.
 std::size_t            badSize = std::distance(firstBadValue, std::end(ids));
 std::vector&lt;mystruct&gt;  badValues;
 badValues.reserve(badSize);
 std::move(std::make_reverse_iterator(std::end(ids)), std::make_reverse_iterator(firstBadValue), std::back_insert_iterator(badValues));

 // Now that you have moved the elements out.
 // Reset the correct size of your original container.
 ids.resize(ids.size() - badSize);
</code></pre>

<p>The other thing I would note about your code is the use of <code>container.begin()</code>. The standard now provides <code>std::begin()</code> and <code>std::end()</code>. By using these functions you make your code easier to re-use with different container types (especially if you want to use C-Arrays).</p>

<p>Note: In the code above I use <code>badIds</code> as a filtering function. Filters are easy to write as lambdas.</p>

<pre><code> auto isBadId = [&amp;bad_ids](mystruct const&amp; item) {
     return std::find(std::begin(bad_ids), std::end(bad_ids), item.id) != std::end(bad_ids);
 }
</code></pre>

<p>But writing your filter like this (or as a separate function) is always a good idea. It makes your code more readable. This is called self documenting code. If we look at your original code and replace the test with a functor it make it more readable:</p>

<pre><code>// Original Code.
for (const auto&amp; item : all_items) {
    if ( std::find(bad_ids.begin(), bad_ids.end(), item.id) != bad_ids.end() ) {
        std::cout &lt;&lt; "id: " &lt;&lt; item.id &lt;&lt; " is bad" &lt;&lt; std::endl;
    } else {
        std::cout &lt;&lt; "id: " &lt;&lt; item.id &lt;&lt; " is good item" &lt;&lt; std::endl;
        filter_items.emplace_back(item);
    }
}

// Self documenting code:
// Easier to read and deduce things about.
for (auto const&amp; item : all_items) {
    if (isBadId(item)) {
        logItem(asBad,  item);
    } else {
        logItem(asGood, item);
        filter_items.emplace_back(item);
    }
}
</code></pre>
    </div>