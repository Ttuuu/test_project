<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This seems pretty good to me. I didn't notice any bugs, and I don't have knowledge of what pdf crates are available, so I just have a few points about idiomatic Rust.</p>

<p>To start, I just want to note that when I tried to create this project locally to work on, I had to fiddle around with the versions of the crates to get a working combination, which makes it an especially good idea to include what versions you're using somewhere in your question.</p>

<p>You can simply remove all uses of <code>extern crate some_crate</code>, since they aren't needed anymore in rust 2018 edition (the default by now).</p>

<p>I like the use of an error enum. You could consider using something like the crate <code>thiserror</code> to derive <code>Display</code> and <code>From</code> instances for the enum. (This just reduces boilerplate.)</p>

<p>I often like having <code>type Result&lt;T, E = MyErrorType&gt; = std::result::Result&lt;T, E&gt;;</code>, especially for a library, which lets me write <code>Result&lt;()&gt;</code> to use my error or <code>Result&lt;(), OtherError&gt;</code> to use another.</p>

<pre><code>pub fn create_thumbnail(pdf_path: &amp;Path, out_path: &amp;Path) -&gt; Result&lt;()&gt; {
    let doc = PopplerDocument::new_from_file(pdf_path, "")?;

    let page = doc.get_page(0).ok_or(Error::NoPagesError)?;

    let (width, height) = page.get_size();

    let surface = ImageSurface::create(Format::Rgb24, width as i32, height as i32)?;

    let ctxt = Context::new(&amp;surface);
    ctxt.set_source_rgb(1.0, 1.0, 1.0);
    ctxt.paint();

    page.render(&amp;ctxt);

    let mut f = File::create(out_path)?;
    surface.write_to_png(&amp;mut f)?;

    Ok(())
}
</code></pre>

<p>You should use <code>Path</code>s when you're representing paths. You can use <code>ok_or</code> or <code>ok_or_else</code> to convert <code>Option</code> to <code>Result</code>, which works well with <code>?</code>. Rust can infer the type of your floats in <code>set_source_rgb</code>, but if you want to be explicit then you should use <code>1.0f64</code> rather than <code>1.0 as f64</code>. I removed your comments just for space in the answer, but they are meaningful since they give reason and don't just restate the code.</p>
    </div>