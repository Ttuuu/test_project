<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is my code review. I added new class ScoringEngine please look on it. There can be made more but you have to specify what you want to achieve. I added some comments in classes.</p>

<pre><code>public class Player //  implements Comparable&lt;Player&gt; there is no need to implement that interface because you use different comparator implemented in GameEngine class
{
    private String playerid;
    private int playerscore;

    int x = 0;
    List&lt;String&gt; n = new ArrayList&lt;String&gt;();
    List&lt;Integer&gt; s = new ArrayList&lt;Integer&gt;();
    List&lt;Player&gt; players = new ArrayList &lt;Player&gt;();

    public Player (String name, int score)
    {
        playerid = name;
        playerscore = score;


    }
    public String getName()
    {
        return playerid;
    }

    public int getScore()
    {
        return playerscore;
    }

    public String toString ()
    {
        return playerid+"\t "+playerscore;
    }



     /* public int compareTo(Player lf)
        {
            return getName ().compareTo (lf.getName ());
        }
       */

}
</code></pre>

<p>ScoringEngine</p>

<pre><code>public class ScoringEngine {
  //for general attention is that you can save and read your scores from different files.
    private Scanner read;
    private PrintWriter write;
    final String scoresFileName = "lbout.txt";
    public void evaluateScores()
    {
        try
        {
            List&lt;Player&gt; playerScores = loadScores();

            Collections.sort(playerScores, Collections.reverseOrder(new PlayerComparator()));

            for (Player player : playerScores)
            {
                System.out.println("\t "+player.getName()+ " " + player.getScore());
            }


/*           this can be removed I think

            ArrayList&lt;Player&gt; arr = new ArrayList&lt;Player&gt;();
            for (int y = 0; y &lt; players.size (); ++y)
            {
                arr.add(players.get(y));
                //I tried to pass the players as an argument to the GUI class but I get an error saying there's a conflict between util and awt so I copied it to an ArrayList
            }
*/
             //filenames were the same so I replaced it with one value
            write = new PrintWriter(scoresFileName);

            for (Player player:playerScores)
            {
                write.print(player.getName()+" ");
                final String lineSeparatorKey = "line.separator";     //nice trick to keep code indepentent from platform
                write.println (player.getScore() + System.getProperty(lineSeparatorKey));
            }
            //displayScores();
        }

        catch (InputMismatchException ime)
        {
            System.out.println(ime+": INVALID DATA!");
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
        finally{        // remember to close all file descriptors or streams
            write.close();
        }
    }

    public List&lt;Player&gt; loadScores()
    {
        List&lt;Player&gt; scores = new ArrayList&lt;Player&gt;();
        FileReader source = null;

        try
        {

            source= new FileReader(scoresFileName);
            read = new Scanner(source);

            while (read.hasNext ())
            {
                Player player = new Player(read.next(),read.nextInt()); // this might throw exception because read.hasNext()
                // check weather only one reading can be made not two -&gt;read.next() and read.nextInt()... |
                // To repair it change format of stored data in your file with scores to keep data for one player in one line...
            }
            return scores;
        }
        catch (FileNotFoundException fnfe)
        {
            System.out.println(fnfe+": FILE NOT FOUND!");
        }
        catch (InputMismatchException ime)
        {
            System.out.println(ime+": INVALID DATA!");
        }
        catch (Exception e)
        {
            System.out.println(e);
        } finally{    //remember to close all streams and file descriptors
            assert source != null;
            try {
                read.close();
                source.close();
            } catch (IOException e) {
                System.out.println("PROBLEM WITH CLOSING FILE!");
            }
        }
        return scores;
    }


    private class PlayerComparator implements Comparator&lt;Player&gt;
    {
        public int compare(Player lf1, Player lf2)
        {
            int scoreA = lf1.getScore ();
            int scoreB = lf2.getScore ();

            if (scoreA == scoreB)
            {
                return 0;
            }

            else if (scoreA &gt; scoreB)
            {
                return 1;
            }
            else
            {
                return -1;
            }
        }
    }

}
</code></pre>
    </div>