<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few minor stylistic bits that may increase its utility:</p>

<ul>
<li>since you take in an <code>IDictionary</code>, return an <code>IDictionary</code>.</li>
<li>make it <code>static</code> as it accesses no instance data or methods.</li>
<li>since it's now <code>static</code>, make it an extension method.</li>
<li>validate the parameter passed in.</li>
</ul>

<p>Also:</p>

<ul>
<li>since it's a single <code>return</code> statement, make it an expression body.</li>
</ul>

<p>Further:</p>

<ul>
<li>yeah, the <code>.Any()</code> is redundant (and less performant if there is an <code>ExpandoObject</code> in the collection) with the <code>.Where()</code> criteria, so no need for it.</li>
<li>allowed for non-generic <code>IEnumerable</code>.</li>
<li>renamed some of the locals to be clearer as to their meaning.</li>
</ul>

<p>Giving:</p>

<pre><code>static IDictionary&lt;string, object&gt; ConvertDynamicToDictionary(this IDictionary&lt;string, object&gt; source) =&gt; source?.ToDictionary(
    keySelector =&gt; keySelector.Key,
    elementSelector =&gt;
    {
        object value = elementSelector.Value;

        // if it's another IDict (might be a ExpandoObject or could also be an actual Dict containing ExpandoObjects) just go through it recursively
        if (value is IDictionary&lt;string, object&gt; dictionary)
        {
            return dictionary.ConvertDynamicToDictionary();
        }

        // A special case since string implements IEnumerable.
        if (value is string stringValue)
        {
            return stringValue;
        }

        // if it's an IEnumerable, it might have ExpandoObjects inside, so check for that
        if (value is IEnumerable enumerable)
        {
            // if it does contain ExpandoObjects, take all of those and also go through them recursively
            return enumerable
                .Cast&lt;object&gt;()
                .Select(element =&gt; element is IDictionary&lt;string, object&gt; expando
                    ? expando.ConvertDynamicToDictionary()
                    : element);
        }

        // neither an IDict nor an IEnumerable -&gt; it's probably fine to just return the value it has
        return value;
    });
</code></pre>
    </div>