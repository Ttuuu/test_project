<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>For formatting, I would download the following tool, <a href="https://marketplace.visualstudio.com/items?itemName=TaoKlerks.PoorMansT-SqlFormatterSSMSVSExtension" rel="nofollow noreferrer">Poor Man's T-Sql Formatter</a> and on <a href="https://github.com/TaoK/PoorMansTSqlFormatter" rel="nofollow noreferrer">GitHub</a>, if you're unsure how to format your SQL. I use it when I have to edit other developers code. It should work fine for MySQL.</li>
</ol>

<blockquote>
  <p>Here are the settings I used</p>
</blockquote>

<p><a href="https://i.stack.imgur.com/i0NLI.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/i0NLI.png" alt="screenshot"></a></p>

<blockquote>
  <p>In one click it will format your SQL to the following:</p>
</blockquote>

<pre><code>CREATE TABLE user (
    id SMALLINT unsigned NOT NULL auto_increment
    , CONSTRAINT pk_user PRIMARY KEY (id)
    );

CREATE TABLE discord_user (
    id VARCHAR(20) NOT NULL
    , OWNER SMALLINT unsigned
    , CONSTRAINT pk_discord_user PRIMARY KEY (id)
    , CONSTRAINT fk_discord_user_owner FOREIGN KEY (OWNER) REFERENCES user(id)
    );

CREATE TABLE player (
    uuid VARCHAR(36) NOT NULL
    , OWNER SMALLINT unsigned
    , CONSTRAINT pk_player PRIMARY KEY (uuid)
    , CONSTRAINT fk_player_owner FOREIGN KEY (OWNER) REFERENCES user(id)
    );

CREATE TABLE kit (
    id mediumint unsigned NOT NULL auto_increment
    , designer SMALLINT unsigned
    , name VARCHAR(30) NOT NULL
    , disguise enum('ARMOR_STAND', 'ARROW', 'BAT', 'BLAZE', 'BOAT', 'CAVE_SPIDER', 'CHICKEN', 'COW', 'CREEPER', 'DONKEY', 'DROPPED_ITEM', 'EGG', 'ELDER_GUARDIAN', 'ENDER_CRYSTAL', 'ENDER_DRAGON', 'ENDER_PEARL', 'ENDER_SIGNAL', 'ENDERMAN', 'ENDERMITE', 'EXPERIENCE_ORB', 'FALLING_BLOCK', 'FIREBALL', 'FIREWORK', 'FISHING_HOOK', 'GHAST', 'GIANT', 'GUARDIAN', 'HORSE', 'IRON_GOLEM', 'ITEM_FRAME', 'LEASH_HITCH', 'MAGMA_CUBE', 'MINECART', 'MINECART_CHEST', 'MINECART_COMMAND', 'MINECART_FURNACE', 'MINECART_HOPPER', 'MINECART_MOB_SPAWNER', 'MINECART_TNT', 'MULE', 'MUSHROOM_COW', 'OCELOT', 'PAINTING', 'PIG', 'PIG_ZOMBIE', 'PLAYER', 'PRIMED_TNT', 'RABBIT', 'SHEEP', 'SILVERFISH', 'SKELETON', 'SKELETON_HORSE', 'SLIME', 'SMALL_FIREBALL', 'SNOWBALL', 'SNOWMAN', 'SPIDER', 'SPLASH_POTION', 'SQUID', 'THROWN_EXP_BOTTLE', 'UNDEAD_HORSE', 'VILLAGER', 'WITCH', 'WITHER', 'WITHER_SKELETON', 'WITHER_SKULL', 'WOLF', 'ZOMBIE', 'ZOMBIE_VILLAGER') NOT NULL
    , helmet enum('CHAINMAIL_HELMET', 'DIAMOND_HELMET', 'GOLD_HELMET', 'IRON_HELMET', 'LEATHER_HELMET')
    , chestplate enum('CHAINMAIL_CHESTPLATE', 'DIAMOND_CHESTPLATE', 'GOLD_CHESTPLATE', 'IRON_CHESTPLATE', 'LEATHER_CHESTPLATE')
    , leggings enum('CHAINMAIL_LEGGINGS', 'DIAMOND_LEGGINGS', 'GOLD_LEGGINGS', 'IRON_LEGGINGS', 'LEATHER_LEGGINGS')
    , boots enum('CHAINMAIL_BOOTS', 'DIAMOND_BOOTS', 'GOLD_BOOTS', 'IRON_BOOTS', 'LEATHER_BOOTS')
    , base_melee_damage TINYINT unsigned NOT NULL
    , base_arrow_damage TINYINT unsigned
    , base_knockback_taken_multiplier FLOAT(4, 2) NOT NULL
    , base_melee_knockback_dealt_multiplier FLOAT(4, 2) NOT NULL
    , CONSTRAINT pk_kit PRIMARY KEY (id)
    , CONSTRAINT fk_kit_designer FOREIGN KEY (designer) REFERENCES user(id)
    );
</code></pre>

<p><br></p>

<ol start="2">
<li>Naming conventions should use the following rules. <a href="https://www.sqlstyle.guide/" rel="nofollow noreferrer">Reference</a>

<ul>
<li>Ensure the name is unique and does not exist as a <a href="https://dev.mysql.com/doc/refman/5.5/en/keywords.html" rel="nofollow noreferrer">reserved word</a>.</li>
<li>Keep the length to a maximum of 30 bytes—in practice this is 30 characters unless you are using multi-byte character set.</li>
<li>Names must begin with a letter and may not end with an underscore.</li>
<li>Only use letters, numbers and underscores in names.</li>
<li>Avoid the use of multiple consecutive underscores—these can be hard to read.</li>
<li>Use underscores where you would naturally include a space in the name (first name becomes first_name).</li>
<li>Avoid abbreviations and if you have to use them make sure they are commonly understood.</li>
<li>Also checkout the book <a href="https://rads.stackoverflow.com/amzn/click/0132350882" rel="nofollow noreferrer">Clean Code</a></li>
</ul></li>
</ol>

<p><br></p>

<ol start="3">
<li>MySQL Server supports three comment styles:</li>
</ol>

<blockquote>
  <p>The naming convention you use should be clear enough that almost makes comments unnecessary.</p>
</blockquote>

<ul>
<li><p>From a “#” character to the end of the line.</p></li>
<li><p>From a “-- ” sequence to the end of the line. In MySQL, the “-- ” (double-dash) comment style requires the second dash to be followed by at least one whitespace or control character (such as a space, tab, newline, and so on). This syntax differs slightly from standard SQL comment syntax, as discussed in Section 1.8.5.6, “'--' as the Start of a Comment”.</p></li>
<li><p>From a /* sequence to the following */ sequence, as in the C programming language. This syntax allows a comment to extend over multiple lines because the beginning and closing sequences need not be on the same line.</p></li>
</ul>

<p><br></p>

<ol start="4">
<li><p>Choosing the Right Type for a Column <a href="https://dev.mysql.com/doc/refman/8.0/en/choosing-types.html" rel="nofollow noreferrer">Reference</a></p>

<ul>
<li><p>For optimum storage, you should try to use the most precise type in all cases. For example, if an integer column is used for values in the range from 1 to 99999, MEDIUMINT UNSIGNED is the best type. Of the types that represent all the required values, this type uses the least amount of storage.</p></li>
<li><p>All basic calculations (+, -, *, and /) with DECIMAL columns are done with precision of 65 decimal (base 10) digits. </p></li>
<li><p>If accuracy is not too important or if speed is the highest priority, the DOUBLE type may be good enough. For high precision, you can always convert to a fixed-point type stored in a BIGINT. This enables you to do all calculations with 64-bit integers and then convert results back to floating-point values as necessary.</p></li>
</ul></li>
</ol>
    </div>