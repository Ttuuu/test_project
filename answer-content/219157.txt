<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code provides a large number of rookie errors. I suspect, looking at the code, is that it was initially developed from a recorded macro (or two).</p>

<p>In summary, the issues to be addressed are:</p>

<ul>
<li>No <code>Option Explicit</code> - you use <code>Cell</code> as a variable in the code which
has not been declared</li>
<li>Variable names have no real meaning</li>
<li>You Select/Activate and do not use qualified names</li>
<li>You have sections of code that is very repetitive</li>
<li>You have loops that reference Excel objects, meaning that the VBA
engine keeps switching to the Excel engine and back again - very
expensive</li>
<li>Remember to turn <code>ScreenUpdating</code> back on!</li>
</ul>

<h2>Option Explicit</h2>

<p>Always use <code>Option Explicit</code>. This helps avoid typos (<code>r1</code> instead of <code>rl</code>, anyone?) which leads to undeclared variables using default values, which in turn leads to strange results that are hard to track down. In addition, it help enforce strong type discipline and enables the debugger to provide more meaningful error messages (relatively speaking!).</p>

<h2>Meaningful variable names</h2>

<p>Using meaningful variable names results in code that requires less comments and is easer to maintain. Some examples:</p>

<ul>
<li><code>r</code> could mean anything, but <code>rowCounter</code> provides a visual clue that
this is used as a counter or in a loop.</li>
<li><code>i</code> is a standard loop iterator, but what are we iterating?
<code>worksheetCounter</code> is similarly self-documenting.</li>
<li><code>c</code> could be <code>columnCounter</code></li>
<li><code>Cell</code> has the double danger of being a reserved word and an object
in Excel. Using this as a variable name can lead to confusion.
Perhaps <code>sourceToCopy</code> is more meaningful in this context?</li>
</ul>

<h2>Avoiding Select and Active[thingys]</h2>

<p>As noted in the comments, this StackOverflow answer provides some good guidance on avoiding select: <a href="https://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba/10717999#10717999">https://stackoverflow.com/questions/10714251/how-to-avoid-using-select-in-excel-vba/10717999#10717999</a>. </p>

<p>Selecting things slows the code down by forcing screen updates that are not necessary. <code>Select</code> in itself is not otherwise dangerous in code - just unnecessary and slow.</p>

<p>Using the Active Book/Sheet/Cell, however is very dangerous in code. In addition, every time you use an unqualified range, you are implicitly using the active range object (book, sheet, cell). As a coder, you have very little control over what is active - you could be running other code that switches the active thing. The user could be doing things and switching  while the code is running. Excel itself could for some unknown reason jump to another [thing] and make it active.</p>

<h2>Don't repeat yourself (DRY)</h2>

<p>I am lazy programmer. If I have to write the same code twice, I think it is too much work and I can address the repetition in two ways: in a loop or in a routine (with parameters!).</p>

<p>You have globs of code where the code is simple a cut and paste of previous stuff. If you ever wanted to adjust the code, you now have to do it in umpteen places and "London to a brick", you would miss one piece of repeated code and spend ages trying to figure out why you are getting bad results (or even worse, getting bad results and believing they are good).</p>

<h2>Excel objects versus VBA objects</h2>

<p>I don't want to get too technical here, there are others who can explain this much better than me. I think of this simply as having two object engines. There is a VBA engine and an Excel engine. VBA code uses the VBA engine, and the Excel specific objects (cells, sheets, workbooks, application formulas to name a few) use the Excel engine. </p>

<p>This is all fine and good, except that to switch between the two engines takes computing time and effort. And a relatively large amount of it. So in a loop like below, the system will switch engines 10,000 times (and that is without the effort to do calculations)</p>

<pre><code>For myIterator = 1 to 5000
    Debug.Print myWB.Range("A" &amp; CStr(myIterator)).Value
next myIterator
</code></pre>

<p>Whereas ...</p>

<pre><code>myValues = myWB.Range("A1:A5000").Value ' myValues is a Variant type
For myIterator = 1 to 5000
    Debug.Print myValues(myIterator,1) 
    ' two dimensional array because this is how the values are converted.
next myIterator
</code></pre>

<p>...is much more switch friendly.</p>

<h2>What does this mean?</h2>

<p>Here is a look at your code with the above points addressed.</p>

<pre><code>Option Explicit

Sub ConsolidateData() ' more meaningful name

    Application.ScreenUpdating = False  ' Use proper indenting.

    Dim consolidatedWorksheet As Worksheet
    Set consolidatedWorksheet = ThisWorkbook.Worksheets.Add(Before:=ThisWorkbook.Worksheets("CIP Summary")) ' assign the sheet so it can be qualified.
    consolidatedWorksheet.Name = "Consolidated" ' no longer working with ActiveSheet

    Dim titles As Variant 'Now we use an array to set the cell values. In one hit.
    titles = Array("Company", "Location", "Store", "RCT/Voucher", "Vendor", "Vendor Name", "Date", "Reference", "Reference", "Amount", "Period", "JE", "Project", "Expected Open Date", "Comment")
    With consolidatedWorksheet.Range("A1:N1")
        .Value = titles
        .Font.Bold = True
    End With

    Dim sheetIterator As Long ' always use long these days.
    Dim rowIterator As Long, columnIterator As Long
    Dim sheetContents As Variant

    'Cleanse the data
    ' using an array to save switching the engine nearly 14,000 * 2 times. Now we only switch a few times.
    For sheetIterator = 15 To Worksheets.Count ' 15 is a magic number - will it always be right?
        With ThisWorkbook.Sheets(sheetIterator) ' set up the array
            sheetContents = .Range(.Cells(5, 1), .Cells(1000, 14))
        End With
        For columnIterator = 1 To 14
            For rowIterator = 5 To 1000
                If VarType(sheetContents(rowIterator, columnIterator)) = vbError Or sheetContents(rowIterator, columnIterator) = "" Then
                    sheetContents(rowIterator, columnIterator) = "N/A"
                End If
            Next rowIterator
        Next columnIterator
        ' replace the values in case there have been changes
        With ThisWorkbook.Sheets(sheetIterator) ' set up the array
             .Range(.Cells(5, 1), .Cells(1000, 14)) = sheetContents
        End With
    Next sheetIterator

''''company
''' *** This code forms the thinking for the repetitive routine.
'''    Dim firstCompany As Range
'''    Dim allData As Range
'''    With ThisWorkbook.Sheets(15) ' magic number
'''        Set firstCompany = .Range("A1:N4").Find("Company", LookAt:=xlPart).Offset(1, 0)
'''        Set allData = .Range(firstCompany, firstCompany.End(xlDown))
'''    End With
'''    With ThisWorkbook.Worksheets("Consolidated")
'''        ' the use of the Cells method will open up to making a generic routine
'''        .Range(.Cells(1, 2), .Cells(1, 2)).Value = allData.Value
'''        ' set the values instead of copying cells. But you could adjust this to copy and paste if you wanted.
'''    End With
'''
'''    Dim pasteTarget As Range
'''    For sheetIterator = 16 To Worksheets.Count
'''        With ThisWorkbook.Sheets(sheetIterator)
'''            Set firstCompany = .Range("A1:N5").Find("Company", LookAt:=xlPart).Offset(1, 0)
'''            Set allData = .Range(firstCompany, firstCompany.End(xlDown))
'''        End With
'''        With ThisWorkbook.Worksheets("Consolidated")
'''            Set pasteTarget = Something.End(xlDown) ' At this point I can't tell which is the active cell and where to paste the data.
'''            pasteTarget.Value = allData.Value
'''        End With
'''    Next sheetIterator

' now that we have identified the repetition and put it into the routine
' all we have to do is call the routine

    CopyData "Company", 1
    CopyData "location", 2
    CopyData "store", 3
    CopyData "RCT", 4
    CopyData "Vendor", 5
    CopyData "Vendor Name", 6
    CopyData "date", 7
    CopyData "reference", 8
    CopyData "amount", 9
    CopyData "period", 10
    CopyData "JE", 11
    CopyData "Project", 12
    CopyData "expected", 13
    CopyData "comment", 14

    Application.ScreenUpdating = True ' turn it back on!
End Sub

Private Sub CopyData(category As String, columnNumber As Long)

    Dim firstFind As Range
    Dim allData As Range
    Dim sheetIterator As Long

    With ThisWorkbook.Sheets(15) ' magic number
        Set firstFind = .Range("A1:N4").Find(category, LookAt:=xlPart).Offset(1, 0)
        Set allData = .Range(firstFind, firstFind.End(xlDown))
    End With
    With ThisWorkbook.Worksheets("Consolidated")
        ' the use of the Cells method will open up to making a generic routine
        .Range(.Cells(1, columnNumber), .Cells(1, columnNumber)).Value = allData.Value
        ' set the values instead of copying cells. But you could adjust this to copy and paste if you wanted.
    End With

    Dim pasteTarget As Range
    For sheetIterator = 16 To Worksheets.Count
        With ThisWorkbook.Sheets(sheetIterator)
            Set firstFind = .Range("A1:N5").Find(category, LookAt:=xlPart).Offset(1, 0)
            Set allData = .Range(firstFind, firstFind.End(xlDown))
        End With
        With ThisWorkbook.Worksheets("Consolidated")
            Set pasteTarget = Something.End(xlDown) ' At this point I can't tell which is the active cell and where to paste the data.
            pasteTarget.Value = allData.Value
        End With
    Next sheetIterator

End Sub
</code></pre>

<p>Of course, the code is not tested so I apologise in advance for any minor errors or other typos that you may find. Also, in re-working the code I identified an ambiguity in selecting where to paste the data - <code>Something</code> is not declared and will cause a compile error. I am sure you can now work something out that does not involve <code>Select</code> or an <code>ActiveCell</code>!</p>
    </div>