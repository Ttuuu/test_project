<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Contrary to Julien Rous√© and you, I'm rather against the "1 point of return" policy. It doesn't make it more readable. It might make it a bit easier to formally prove correctness of the code, but I have never seen someone do that outside of an academic context.</p>

<p>As it is now, when looking at what would happen if the <code>json == null</code> you'd first encounter the <code>if(json != null)</code> line. Then you scroll down 20 or more lines to find the end of that <code>if</code> block finding that there's no <code>else</code> block. But the method doesn't end here yet. There's another <code>if (message != null)</code> line where I forgot if I had encountered any initialisation in the meantime so I have to go over the entire method again to see if it is null or not ...</p>

<p>Compare that with a method that starts with:</p>

<pre><code>public void validateJsonSchema(ObjectNode jsonSchema, ObjectNode json) throws InvalidRequestException {
    if (json == null) {
        return;
    } 
</code></pre>

<p>By writing in this "return as early as possible" style, you immediatly see that empty <code>json</code> objects are always valid. If at some point it's clear what the result of the method should be, then I want that to be clear explicitly at that point. I don't want to tire myself constantly looking up and down the method to see if I didn't miss anything (for example: was this <code>message</code> really still null when we got here?).</p>

<p>That's why I would prefer to structure the method like this:</p>

<pre><code>public void validateJsonSchema(ObjectNode jsonSchema, ObjectNode json) throws InvalidRequestException {
    if (json == null) {
        return;
    }

    if(jsonSchema == null) {
        throw new InvalidRequestException("json exist in request but there is no schema to validate it against");
    }

    try {
        JsonSchema jsonSchema = JsonSchemaFactory.byDefault().getJsonSchema(jsonSchema);
        ProcessingReport processingReport = jsonSchema.validate(json);

        if (!processingReport.isSuccess()) {

            StringBuilder sb = new StringBuilder();
            processingReport.forEach(jsonError -&gt; sb.append(String.format("[%s] ", jsonError)));

            throw new InvalidRequestException(String.format("json validation failed. Errors: %s", sb.toString()));
        }

    } catch (ProcessingException e) {
        throw new InvalidRequestException(String.format("json validation threw ProcessingException. Error Message: %s", e.getMessage()));
    }
}
</code></pre>

<p>I'd say this is more readable and especially easier to find out what the result is of the special cases. Not that I had any trouble reading/understanding your code ofcourse. I just prefer the way that takes a little bit less effort to understand completely.</p>
    </div>