<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Names beginning with <code>_</code> are reserved for the implementation; I'm surprised that <code>-Wpedantic</code> doesn't help with this!</p>

<p>Include what you use - it helps if your implementation and test program include <code>malloc.h</code> before any standard headers.  In this case, it's depending on <code>&lt;stddef.h&gt;</code> (or one of the other headers which define <code>size_t</code>).</p>

<p>With <code>-Wconversion</code>, I get a couple of warnings:</p>

<pre class="lang-none prettyprint-override"><code>206988.c:92:13: warning: conversion to ‘intptr_t’ {aka ‘long int’} from ‘size_t’ {aka ‘long unsigned int’} may change the sign of the result [-Wsign-conversion]
     if(sbrk(block_size) == (void *) -1)
             ^~~~~~~~~~
206988.c: In function ‘_free’:
206988.c:169:14: warning: conversion to ‘intptr_t’ {aka ‘long int’} from ‘size_t’ {aka ‘long unsigned int’} may change the sign of the result [-Wsign-conversion]
         sbrk(-excess);
              ^~~~~~~
</code></pre>

<p>The first warrants an explicit cast to draw attention.  The second of these could be an error; we want to cast before negating:</p>

<pre><code>         sbrk(-(intptr_t)excess);
</code></pre>

<hr>

<blockquote>
<pre><code>#define PAGE_SIZE 4096
</code></pre>
</blockquote>

<p>Although that's a common page size, this assumption does make your code less portable.  You might be able to find it available in system headers (I can't remember where, if so); it certainly makes sense to guard it so it can be overridden from the compile command:</p>

<pre><code>#ifndef PAGE_SIZE
#define PAGE_SIZE 4096
#endif
</code></pre>

<hr>

<p>I don't see any attention to alignment - you do need to ensure that the result of <code>malloc()</code> is suitably aligned for all types.  You might be testing on a platform that compensates for unaligned access with just a performance drop - on other systems, you might get a bus error or simply unexpected results.</p>

<hr>

<p>The linear search is going to be very inefficient after a few allocations.  Real implementations have several lists, holding different size blocks.</p>

<hr>

<p>There's no need for the <code>(void*)</code> cast here:</p>

<blockquote>
<pre><code>        /* Cast heap_ptr as char * since we're doing byte level arithmetic, then convert to void * before returning */
        return (void *)((char *) heap_ptr + sizeof(mem_header));
</code></pre>
</blockquote>

<p>Since all pointers convert implicitly to <code>void*</code>, that becomes simply</p>

<pre><code>            /* Add enough bytes for a header */
            return (char*)heap_ptr + sizeof (mem_header);
</code></pre>

<p>You might even get away with</p>

<pre><code>            /* Advance pointer beyond the header before passing to user */
            return heap_ptr + 1;
</code></pre>

<p>Similarly,</p>

<pre><code>    void * return_ptr = tail_ptr + 1;
</code></pre>

<hr>

<p>In the case where we called <code>sbrk()</code> to create more memory, it might make sense to simply add the new memory to the start of free list and immediately re-enter <code>malloc()</code> (which of course will now be able to satisfy the request).  That way, there's a single path for successful allocations, which might be handy if you want to "colour" the memory according to its status, for debugging.</p>

<p>It may be necessary to call <code>eat_next_block</code> to join a final free block with newly-created address space;  I couldn't quite see how this is done at present, and the test code doesn't exercise that path.</p>

<hr>

<p>Some minor bits in the test program:</p>

<ul>
<li><code>sizeof (char)</code> is always 1, since results are in units of <code>char</code>.  So multiplying by that is pointless.</li>
<li>We can use <code>ptrdiff_t</code> for the result of pointer subtraction, instead of casting to <code>size_t</code> first (where <code>intptr_t</code> would be safer).</li>
<li><p>This is a convoluted way to write <code>memset(mem_block[i], 'a', alloc_size[i])</code>:</p>

<pre><code>for(size_t j = 0; j &lt; alloc_size[i]; j++)
    mem_block[i][j] = 'a';
</code></pre></li>
</ul>

<p>(But thank you for sharing the test program - it really makes reviewing easier).</p>
    </div>