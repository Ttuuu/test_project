<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Mystery inputs</h2>
<p>It's clear that there's an implied structure to this input:</p>
<pre><code>message = input('&gt;')
reader = message.split(' ')
</code></pre>
<p>requiring between four and five tokens. I have no idea what those are, and neither does your user. Replace <code>'&gt;'</code> with an actual description of what's expected here.</p>
<h2>Unpacking</h2>
<pre><code>times = reader[0]
sides = reader[2]
</code></pre>
<p>can be</p>
<pre><code>times, _, sides = reader[:3]
</code></pre>
<p>though the discarded second item is suspicious. You do need to show what this is, and it probably shouldn't be there.</p>
<h2>Looping and overwrites</h2>
<p>This:</p>
<pre><code>for output in range(int(times)):
    output_with_modifier = [(int(x) + int(modifier)) for x in result]
</code></pre>
<p>does not make sense. If you ask for 100 times, <code>output_with_modifier</code> will be calculated 100 times and thrown away 99 of them. Only the last value will be kept. You probably want to de-indent that last assignment so that it happens outside of the loop.</p>
<h2>More looping</h2>
<pre><code>end = False
while end == False:
    dice_reader()
    end_message = input('Again? ')
    if end_message.lower() == 'no':
        end = True
else:
    pass
</code></pre>
<p>First, delete that <code>else; pass</code> - it isn't doing anything. Also, <code>end == False</code> should be <code>not end</code>; but you shouldn't be using a termination variable at all. If you find a <code>no</code>, simply <code>break</code>.</p>
<h2>Suggested code</h2>
<p>Some of this may challenge a beginner, but I like to think that CodeReview is for "aspiring advanced programmers". I've tried to comment it extensively, but feel free to ask questions in the comments.</p>
<pre><code>import re
from random import randint
from re import Pattern
from typing import ClassVar, Iterable


class Dice:
    """
    One specification for dice rolls in Dungeons &amp; Dragons-like format.
    """

    def __init__(self, times: int, sides: int, modifier: int = 0):
        if times &lt; 1:
            raise ValueError(f'times={times} is not a positive integer')
        if sides &lt; 1:
            raise ValueError(f'sides={sides} is not a positive integer')

        self.times, self.sides, self.modifier = times, sides, modifier

    # This is a class variable (basically a "static") that only has one copy
    # for the entire class type, rather than a copy for every class instance
    # It is a regular expression pattern that will allow us to parse user
    # input.
    INPUT_PAT: ClassVar[Pattern] = re.compile(
        # From the start, maybe some whitespace, then a group named "times"
        # that contains one or more digits
        r'^\s*(?P&lt;times&gt;\d+)'    
        
        # Maybe some whitespace, then the letter "d"
        r'\s*d'
        
        # Maybe some whitespace, then a group named "sides" that contains one
        # or more digits
        r'\s*(?P&lt;sides&gt;\d+)'
        
        # The beginning of a group that we do not store.
        r'(?:'
        
            # Maybe some whitespace, then a "+" character
            r'\s*\+'
        
            # Maybe some whitespace, then a group named "modifier" that
            # contains one or more digits
            r'\s*(?P&lt;modifier&gt;\d+)'
        
        # End of the group that we do not store; mark it optional
        r')?'
        
        # Maybe some whitespace, then the end.
        r'\s*$',

        # We might use "d" or "D"
        re.IGNORECASE
    )

    # This can only be called on the class type, not a class instance. It
    # returns a new class instance, so it acts as a secondary constructor.
    @classmethod
    def parse(cls, message: str) -&gt; 'Rolls':
        match = cls.INPUT_PAT.match(message)
        if match is None:
            raise ValueError(f'Invalid dice specification string "{message}"')

        # Make a new instance of this class based on the matched regular
        # expression.
        return cls(
            int(match['times']),
            int(match['sides']),
            # If there was no modifier specified, pass 0.
            0 if match['modifier'] is None else int(match['modifier']),
        )

    @classmethod
    def from_stdin(cls) -&gt; 'Rolls':
        """
        Parse and return a new Rolls instance from stdin.
        """

        while True:
            try:
                message = input(
                    'Enter your dice specification, of the form\n'
                    '&lt;times&gt;d&lt;sides&gt; [+ modifier], e.g. 3d6 or 4d12 + 1:\n'
                )
                return cls.parse(message)
            except ValueError as v:
                print(v)
                print('Please try again.')

    def roll(self, with_modifier: bool = False) -&gt; Iterable[int]:
        """
        Return a generator of rolls. This is "lazy" and will only execute the
        rolls that are consumed by the caller, because it returns a generator
        (not a list or a tuple).
        """
        mod = self.modifier if with_modifier else 0
        return (
            randint(1, self.sides) + mod
            for _ in range(self.times)
        )

    def print_roll(self):
        print(
            'Dice rolls:',
            ', '.join(str(x) for x in self.roll()),
        )

        if self.modifier != 0:
            print(
                'With modifier:',
                ', '.join(str(x) for x in self.roll(with_modifier=True)),
            )


def test():
    """
    This is an automated test method that does some sanity checks on the Dice
    implementation.
    """
    
    d = Dice.parse('3 d 6')
    assert d.times == 3
    assert d.sides == 6
    assert d.modifier == 0

    d = Dice.parse('3D6 + 2')
    assert d.times == 3
    assert d.sides == 6
    assert d.modifier == 2

    try:
        Dice.parse('nonsense')
        raise AssertionError()
    except ValueError as v:
        assert str(v) == 'Invalid dice specification string "nonsense"'

    try:
        Dice.parse('-2d5')
        raise AssertionError()
    except ValueError as v:
        assert str(v) == 'Invalid dice specification string "-2d5"'

    try:
        Dice.parse('0d6')
        raise AssertionError()
    except ValueError as v:
        assert str(v) == "times=0 is not a positive integer"

    d = Dice.parse('100 d 12+3')
    n = 0
    for x in d.roll(True):
        assert 4 &lt;= x &lt;= 15
        n += 1
    assert n == 100


def main():
    test()

    dice = Dice.from_stdin()
    dice.print_roll()


if __name__ == '__main__':
    main()
</code></pre>
    </div>