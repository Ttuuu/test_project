<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Encapsulate your code into functions</h1>

<p>Your code is neither reusable nor testable, wrap it into a function and call it from under an <a href="https://stackoverflow.com/q/419163/5069029"><code>if __name__ == '__main__'</code></a> guard. This will allow you to test it more easily. You will also be able to return values instead of printing them, this will make the code more reusable:</p>

<pre><code>def compress(string):
    temp={}
    result=" "
    for x in string:
        if x in temp:
            temp[x] = temp[x]+1
        else:
            temp[x] = 1
    for key, value in temp.items():
        result += str(key) + str(value)

    return result


if __name__ == '__main__':
    s = input("Enter the string:")
    print(compress(s))
</code></pre>

<p>You can then jump into an interactive shell and type:</p>

<pre><code>&gt;&gt;&gt; from your_file_name import compress
&gt;&gt;&gt; compress('aaabbccccddefg')
 a3b2c4d2e1f1g1
&gt;&gt;&gt; compress('b'*42)
 b42
</code></pre>

<h1>Use existing data structures</h1>

<p><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a> offers simplified ways of counting elements of an iterable:</p>

<pre><code>from collections import Counter


def compress(string):
    temp = Counter()
    result = " "
    for x in string:
        temp[x] += 1

    for key, value in temp.items():
        result += str(key) + str(value)
    return result


if __name__ == '__main__':
    s = input("Enter the string:")
    print(compress(s))
</code></pre>

<p>You can even simplify further as <code>Counter</code> can take any iterable in its constructor. You can also use <code>str.join</code> to simplify even further:</p>

<pre><code>from collections import Counter


def compress(string):
    counts = Counter(string)
    return ''.join(letter+str(count) for letter, count in counts.items())


if __name__ == '__main__':
    print(compress(input("Enter the string: ")))
</code></pre>

<h1>Possible bug</h1>

<p>To me, compressing a string mean having a mean to decompress it back. Using a dictionnary keyed by each letter as you do, you lost an important information: which letter is next to which one. Also <code>'aabaabaabaa'</code> will be compressed to <code>'a8b3'</code> which, to me, doesn't make sense and would be better as <code>'a2b1a2b1a2b1a2'</code>. But I might be wrong. In this case, <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>itertools.groupby</code></a> is much more usefull as it will keep the ordering and avoid aggregating separate groups of letters:</p>

<pre><code>import itertools


def compress(string):
    return ''.join(
            letter + str(len(list(group)))
            for letter, group in itertools.groupby(string))


if __name__ == '__main__':
    print(compress(input("Enter the string: ")))
</code></pre>
    </div>