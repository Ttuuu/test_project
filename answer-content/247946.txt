<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(This was a comment, but then I had more thoughts...)</p>
<p>I have some stylistic things for you to think about, but can't tell you what's "better".</p>
<p>What you've defined is an API for manipulating an ArrayList. I feel like it also shows that you've come from an OOP language, but may not have all the things you want out of your C implementation.</p>
<h2>Code structure</h2>
<p>One of the first things I'd do is actually split this into an implementation (in a <code>.c</code> file) and an API definition (in a <code>.h</code> file). In practice, this means you'd have declarations of functions that you want to expose in the <code>.h</code> file, and then you'd have definitions of those functions in the corresponding <code>.c</code> file.</p>
<p>The other very important thing you can do is <strong>comment your exposed API</strong>.</p>
<p>ArrayList.h</p>
<pre class="lang-c prettyprint-override"><code>/*
 * Create an ArrayList with specified initial capacity (can be resized).
 */
ListPtr initialiseWithCapacity(int initialCapacity);

/*
 * Create an ArrayList using the first `length` elements of the given array.
 */
ListPtr initialiseWithArray(int arr[], int length);
</code></pre>
<p>ArrayList.c</p>
<pre class="lang-c prettyprint-override"><code>ListPtr initialiseWithCapacity(int initialCapacity) {
    ListPtr a = malloc(sizeof *a);
    a-&gt;capacity = initialCapacity;
    a-&gt;arr = malloc(a-&gt;capacity * sizeof *(a-&gt;arr));
    a-&gt;size = 0;
    return a;
}

ListPtr initialiseWithArray(int arr[], int length) {
    ListPtr a = initialiseWithCapacity(length);
    for(int i = 0;  i &lt; length; i++)
        a-&gt;arr[a-&gt;size++] = arr[i];
    return a;
}
</code></pre>
<h2>Opaque handles</h2>
<p>Once you've separated your implementation and API definition, another thing you could consider consider is whether or not you want to actually expose the real type of <code>ListPtr</code> to the end-user, or if you want it to be an opaque pointer to a list.</p>
<p>The reason I say this is because the code looks like it's trying to adopt OOP-style encapsulation, but it also exposes the underlying <code>List *</code>.</p>
<p>In your case, it'd be:</p>
<p>ArrayList.h</p>
<pre class="lang-c prettyprint-override"><code>/*
 * Note that List isn't defined in this file!
 *
 * The user of your API now has to use your initialisation functions to get a ListPtr type.
 * This has advantages:
 *  - You can replace the underlying implementation without breaking user code
 *  - You can add happily add extra internal stuff that you don't want the user 
 *    to play with (e.g. do you really want them changing the size field?)
 *  - You clarify your expectation of how your API is used
 */

typedef struct *List ListPtr;
</code></pre>
<p>ArrayList.c</p>
<pre class="lang-c prettyprint-override"><code>struct List {
    int capacity;
    int size;
    int *arr;
}
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/7553750/what-is-an-opaque-pointer-in-c">this answer</a> for a much more involved and better description.</p>
<h2><code>static</code> functions</h2>
<p>Another benefit of splitting your API definition and implementation is that you can hide away the functions you don't want your user to mess with. That's what <code>static</code> is useful for with functions (see <a href="https://stackoverflow.com/questions/558122/what-is-a-static-function-in-c">here</a> for more details).</p>
<p>In your case, I haven't considered in much detail, but at the least I'd make your <code>int comparisonFunctionAscending (...)</code> and <code>int comparisonFunctionDescending (...)</code> functions static.</p>
<h2>Utility functions</h2>
<p>Another OOPism here is that a lot of these functions look like methods. That's certainly ok if it's what you're going for (see the previous sections). However, if you're not hiding the implementation of <code>ListPtr</code>, then I think it'd be easier for a C programmer to read:</p>
<pre><code>if (my_list-&gt;len != 0) {
    ...do stuff...
}
</code></pre>
<p>rather than:</p>
<pre><code>if (is_empty(my_list)) {
    ...do stuff...
}
</code></pre>
<h2>Early return</h2>
<p>This is contentious, but it's worth considering if you want to avoid early returns (i.e. just return once from your function at the very end). There's no right or wrong answer, but you should think about what is easiest for you.</p>
<h2>Use <code>void</code> functions</h2>
<p>You have some odd functions that return <code>bool</code> (e.g. <code>bool clear(...)</code>), which always return <code>true</code>. Just use <code>void</code>, or even better, consider some error handling and return some type saying whether the operation succeeded or not.</p>
    </div>