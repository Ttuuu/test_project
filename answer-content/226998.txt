<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>"""
Module Docstring
This is a simple object-oriented implementation of merging two Single Linked Lists with some associated methods, 
such as bubble sorting, create list, and such. 

"""
</code></pre>

<p>The line <code>Module Docstring</code> is probably a placeholder which you're meant to remove, but it's good to see that the methods are documented.</p>

<hr>

<pre><code>    def create_list(self):
        """
        Creates the single linked list
        """
</code></pre>

<p>What's the difference between <em>create</em> and <em>instantiate</em>? I think this is best described as <code>Reads values from stdin and appends them to this list</code>.</p>

<hr>

<pre><code>    def insert_in_beginning(self, data):
        """
        Inserts an integer in the beginning of the linked list
        """
        temp = Node(data)
        temp.link = self.start
        self.start = temp
</code></pre>

<p>There's an <code>insert_at_position</code> below: why not just call that with position <code>0</code>?</p>

<hr>

<pre><code>        if self.start is None:
</code></pre>

<p>Thumbs up for using the right comparison operator.</p>

<hr>

<pre><code>    def insert_before(self, data, x):
        """
        Inserts an integer before the x node
        """

        #If list is empty
        if self.start is None:
            print("ðŸ’” Sorry! The list is empty.")
            return 
</code></pre>

<p>In general, raising an exception is more useful than printing something to stdout.</p>

<pre><code>        #If x is the first node, and new node should be inserted before the first node
        if x == self.start.info:
            temp = Node(data)
            temp.link = p.link
            p.link = temp
</code></pre>

<p>I think this is extremely buggy. <code>p</code> doesn't exist yet, <code>self.start</code> should be updated to <code>temp</code>, and it shouldn't fall through and potentially insert the value twice.</p>

<hr>

<pre><code>    def insert_at_position(self, data, k):
        """
        Inserts an integer in k position of the linked list
        """     

        #if we wish to insert at the first node
        if k == 1:
</code></pre>

<p>1-indexing in Python? That's going to confuse people...</p>

<hr>

<pre><code>        p = self.start
        i = 1

        while i &lt; k-1 and p is not None:
            p = p.link
            i += 1
</code></pre>

<p>I suggest refactoring this to decrement <code>k</code> and eliminate the variable <code>i</code> entirely.</p>

<hr>

<pre><code>    def delete_node(self, x):
        ...
        #If there is only one node
        if self.start.info == x:
            self.start = self.start.link
</code></pre>

<p>The comment describes a different condition to the one which the code actually tests. This would be clearer without the comment.</p>

<hr>

<pre><code>    def reverse_list(self):
        ...
            prev = p
            p = next
</code></pre>

<p>Here Python's simultaneous assignment <code>prev, p = p, next</code> can be useful.</p>

<hr>

<p>This seems like a good point to ask the question: do you know what a <em>sentinel</em> is? A linked list using a sentinel node for <code>start</code> could avoid the special cases of most of the methods above.</p>

<hr>

<pre><code>    def bubble_sort_exdata(self):
        """
        Bubble sorts the linked list with respect to data
        """
</code></pre>

<p>The meaning of "<em>with respect to data</em>" is not transparent to me. I only figured it out once I looked at the implementation.</p>

<pre><code>        while end != self.start.link:
            p = self.start
            while p.link != end:
                q = p.link
                if p.info &gt; q.info:
                    p.info, q.info = q.info, p.info
                p = p.link
            end = p
</code></pre>

<p>So far I've resisted the temptation to comment on names, because you said that they're following the tutorial, but I find <code>end</code> to be very misleading. I would expect it to be the last node in the list, whereas in effect it's a sentinel for the end of the <em>unsorted</em> portion of the list.</p>

<hr>

<pre><code>    def bubble_sort_exlinks(self):
        ...
        while end != self.start.link:
            r = p = self.start
            while p.link != end:
                q = p.link
                if p.info &gt; q.info:
                    p.link = q.link
                    q.link = p
                if  p != self.start:
                    r.link = q.link
                else:
                    self.start = q
                p, q = q, p
                r = p
                p = p.link
            end = p
</code></pre>

<p>This is rather complex. I could use some comments to explain the loop invariants and the meanings of <code>p,q,r</code>.</p>

<hr>

<pre><code>    def merge1(self, list2):
        """
        Merges two already sorted single linked lists by creating new lists
        """
        merge_list = SingleLinkedList()
        merge_list.start = self._merge1(self.start, list2.start)
        return merge_list

    def _merge1(self, p1, p2):
        """
        Private method of merge1
        """
        if p1.info &lt;= p2.info:
</code></pre>

<p>What if <code>p1 is None</code> or <code>p2 is None</code>? I don't see anything which would prevent those cases arising.</p>

<pre><code>            StartM = Node(p1.info)
</code></pre>

<p>This could be just <code>self.start</code> instead of <code>StartM</code> if called with a different <code>self</code>. At present the method doesn't use <code>self</code> at all.</p>

<hr>

<pre><code>    def merge2(self, list2):
        """
        Merges two already sorted single linked lists in place in O(1) of space
        """
</code></pre>

<p>This should say something about the process being destructive to <code>this</code> and <code>list2</code>. And it would arguably make more sense to merge <code>list2</code> into <code>self</code> and not return anything.</p>

<pre><code>    def _merge2(self, p1, p2):
        """
        Merges two already sorted single linked lists in place in O(1) of space
        """
        if p1.info &lt;= p2.info:
</code></pre>

<p>Same bug as <code>_merge1</code>.</p>

<hr>

<pre><code># Testing

if __name__ == '__main__':
</code></pre>

<p>That's good, but it might be better to use <code>doctest</code>.</p>
    </div>