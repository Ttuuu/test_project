<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This monster of a function is hard to use and hard to maintain. Besides, it is bloated with duplicated and/or unnecessary code. Last but not least, the way <code>require "dbconn.script.php";</code> is called will make your code run slower and make some features (such as transactions) unavailable.</p>
<h3>Too many connections</h3>
<p>Your current code is connecting to the database every time it runs a query. You shouldn't do that. Always connect strictly  <strong>once</strong> and then pass a connection variable as a function parameter.</p>
<h3>Useless regexp</h3>
<p>You already control the return type buy means of $param variable. No need to check the query type manually. It is useless <em>and</em> error prone. What if your query is <code>CALL</code>? <code>SET</code>? <code>REPLACE</code>?</p>
<h3>Passing values as array is not that hard.</h3>
<p>With your function you have a choice, whether to pass $values as array or not. It makes the code hard to read. At the same time adding two square brackets to your $values is not a big deal. So just just make $values an array mandatory.</p>
<h3>Too much tasks for a function</h3>
<p>The first question I must ask, <em>why only a single function</em> to perform so many tasks? All right, I can make it you are not familiar with OOP and don't want to use a class (which would be the best solution of course). But why not to make a set of functions, each serving for its own purpose? Why following that horrible practice of procedural mysqli when you have to write a helluvalot of words every time you calling a simple function (<code>mysqli_stmt_get_result($stmt)</code> vs. <code>$stmt-&gt;get_result()</code>)?</p>
<p>Here is your intended function call</p>
<pre><code>$rows = mysqli_database_query($sql, $id, "affected_rows");
</code></pre>
<p>compare it with with a code which is shorter but more meaningful and readable at the same time:</p>
<pre><code>$rows = mysqli_delete($sql, [$id]);
</code></pre>
<p>A function name should be meaningful and tell you what does this function do. It should be a function name, not a parameter.</p>
<p>In your place I would create a set of functions. Say, a basic one that just performs a query</p>
<pre><code>function mysqli_database_query($conn, $sql, $values, $return_result = true)
{
    $types = $types ?: str_repeat("s", count($params));
    $stmt = $conn-&gt;prepare($sql);
    $stmt-&gt;bind_param($types, ...$params);
    $stmt-&gt;execute();
    return ($return_result) ? $stmt-&gt;get_result() : $stmt;
}
</code></pre>
<p>and then add some helper functions for various tasks</p>
<pre><code>function mysqli_delete($conn, $sql, $values)
{
    $stmt = mysqli_database_query($conn, $sql, $values, false);
    $return $stmt-&gt;affected_rows();
}
function mysqli_assoc($conn, $sql, $values)
{
    $result = mysqli_database_query($conn, $sql, $values);
    $return $result-&gt;fetch_assoc();
}
function mysqli_all($conn, $sql, $values)
{
    $result = mysqli_database_query($conn, $sql, $values);
    $return $result-&gt;fetch_all(MYSQLI_ASSOC);
}
</code></pre>
<p>you can use the following  function instead of that awkward $param = "id" of yours, for any column, not only id. Just select the desired column, i.e. <code>SELECT user_id FROM table ...</code>:</p>
<pre><code>function mysqli_cell($conn, $sql, $values)
{
    $result = mysqli_database_query($conn, $sql, $values);
    $row = $return $result-&gt;fetch_row();
    return ($row) ? $row[0] : false;
}
</code></pre>
    </div>