<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay,</p>

<p>I'd move your while loops to their own functions, for two reasons.  </p>

<ol>
<li>It's easier to read, if you know exactly what that function doing, because it is holding a while loop. Even though your while loops are infinite (more on that later)</li>
<li>The loops are long, and generally it looks like the loops can be self contained. When code looks like it is its own little 'island' as it were, it can move to a self contained function. </li>
</ol>

<p>Naming is key, variables with the names like "hoofd" is kinda hard to read, generally you want your variables to be short but descriptive. I'd prefer <code>pixelPlaceHolder</code> or <code>pixelCursor</code> over something short but harder to read. I know that is a preference. But I've heard fewer people complain about a long var name, then a hard to read name. </p>

<p>Also using a bool instead of yes or no would make your program easier to read. You don't have to use a string equator. So for buttonpressed, I would rename it to <code>bool buttonPressed</code>. So all you have to do is make buttonPressed, true or false. 
example: </p>

<p>Change this code:</p>

<pre><code>if (toets.Key.Equals(ConsoleKey.UpArrow) 
    &amp;&amp; movement != "DOWN" 
    &amp;&amp; buttonpressed == "no"
){
    movement = "UP";
    buttonpressed = "yes";
}
</code></pre>

<p>To this:</p>

<pre><code> if (toets.Key.Equals(ConsoleKey.UpArrow) 
     &amp;&amp; movement != "DOWN" 
     &amp;&amp; !buttonPressed
 ){
    //do something
 }
</code></pre>

<p>Also another thing to help you out, for literal like "UP" or 1 place them in const variables. like <code>const string UP = "UP"</code> Reason being, if anything were to change with your program in the future, and "UP" becomes "up" then you only have to change it in one spot, and not the whole program. Also 1 could mean anything. Instead, give it a name or a enum value. Like <code>const int GAME_OVER = 1</code> or <code>enum Condition { Started = 0, GameOver = 1};</code> This way someone sees the condition and not a number. You can call it like this <code>while(GameState == Condition.Started)</code> or <code>while(GameState != GAME_OVER)</code> Especially if you are using numbers in more then one spot. It cuts down on confusion for yourself and others. Trust me! Leave your code for a couple of weeks and come back to it... Let me know if you don't go, "what was I doing here?" :)</p>

<p>Infinite loops:</p>

<p>Debugging: to find an issue, you decide to use the debugger with a while loop == true, is fine. But generally you want to have a terminating condition in the loop. Example: gameover == 1 can easily be placed in your main 'while' loop to kill the program and exit. Or one step further, have the program return to menu and wait for the user to either: start a new game, or quit. I know some people will argue over it, but IMHO it is bad practice to use a break outside of a switch statement. Reason being, it is harder to debug a loop that has a non-natural break, IE a break inside of a loop, because it takes longer to figure out when that break is triggered. Especially in bigger programs it's hard to figure out when it will hit that statement. </p>

<p>Additional Note: </p>

<p>Another bigger issue, that is some times hard to debug, if you accidentally place a break outside a loop. The break statement will then "break" out of the function. This may cause the program to crash, or worse, the program will keep running like nothing happened. The program seems like it is operating normal, but in fact, it could be skipping a potentially important step that would cause the program to crash. Crashing is not a bad thing, because it is the most obvious way to detect an issue with your code. In fact, when something is wrong and you don't get feed back, that is when you pull out your hair.  </p>

<p>Overall:  </p>

<p>Your code is not bad, especially for a beginner. I know, when I started out, I was hesitant in putting code into classes or functions, if I could get away putting it all in one function like main. Once you get experience you will find, that functions make things easier to read and also program. </p>

<p>Take for instance your while loops. If they were in their own functions, you could pass in the condition to stop at, and pass back the result, and it will be a lot easier to read and handle the program flow. Try, making main, the Head Quarters of your program and the functions the actual controls for your program. So all main does, is kick off the action and the functions control the actual movement of the snake.  </p>

<p>Like have the first while loop, in a function called <code>Draw()</code>. It takes in the changes from the switch statement, and redraws the snake based on the input. Then have another function for the other while loop. Call that function <code>UserInput()</code>. If you want Co locate the switch statement with that loop, or have it in its own function. When you press a button while it's in the loop it can call the switch statement to make the adjustment, and then redraw the environment by calling the draw function. You may find by doing this "refactoring" that you can rid yourself of a while loop or loops, which will reduce your Big O notation which can make your program faster. Obviously, since your program is so small this reduction in loops will not be that noticeable. If you get in the practice now of doing it, when you move to something bigger, it will make a big difference. </p>

<p>As one of the commentators above have mentioned, Clean Code is a really good book for learning how to refactor, and making code more efficient. The plus side of making clean code, is you can use it in more then one program. The more 'Object' you make your code the easier it is to use the code in other programs. </p>

<p>I hope this helps you out, or at least, gives you ideas of how to improve your program. Either way, keep up the good work. Just like anything, everyone starts somewhere and with practice you will be as good or better as many of the people you see giving examples on this site or Stack Overflow. In other words, keep coding my friend.    </p>
    </div>