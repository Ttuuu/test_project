<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some ideas about how you might be able to improve your program.</p>

<h2>Avoid problems</h2>

<p>Rather than trying to deal with the problem for every instruction, one approach is avoiding it entirely.  One way to do that is to simply append a number of bytes to the end of the <code>vector</code>.  If the maximum bytes for an instruction is <span class="math-container">\$n\$</span>, then append <span class="math-container">\$n-1\$</span> bytes to the end and stop when you've advanced into the padded area.  </p>

<h2>Check before advancing</h2>

<p>One could also pass the number of remaining bytes to the <code>disassemble</code> function.  However, the mechanism I'd suggest would be to pass a range, e.g.:</p>

<pre><code>int diassembleOne(std::vector&lt;char&gt;::iterator&amp; it, std::vector&lt;char&gt;::iterator&amp; end) {
    //  figure out number of bytes for this opcode
    if (std::distance(it, end) &gt; opbytes) {
        it = end;
        // throw or return 0
    }
    // disassemble the instruction thoroughly
    std::advance(it, opbytes);
    return opbytes;
}
</code></pre>

<h2>Use <code>const</code> iterators</h2>

<p>If all the code is doing is disassembling, then it shouldn't alter the underlying <code>vector</code>.  For that reason, I'd recommend passing a <code>std::vector&lt;char&gt;::const_iterator &amp;</code>.</p>

<h2>Use classes</h2>

<p>I'd suggest using an <code>Opcode</code> class like this:</p>

<pre><code>class Opcode {
    char code;
    short int bytes;
    std::string_view name;
    bool operator==(char opcode) const { return code == opcode; }
    int decode(std::vector&lt;char&gt;::const_iterator&amp; it, std::ostream&amp; out=std::cout) const {
        out &lt;&lt; name; 
        ++it;
        for (int i{bytes-1}; i; --i) {
            out &lt;&lt; static_cast&lt;unsigned&gt;(*it++);
        }
        out &lt;&lt; '\n';
        return bytes;
    }
};

constexpr std::array&lt;Opcode,2&gt; instructions {
    { 0x10, 2, "STOP $" },
    { 0x76, 2, "HALT " },
};
</code></pre>

<h2>Pass a pair of iterators to the dissemble function</h2>

<p>As mentioned before, you can pass a pair of iterators to the <code>disassemble</code> function.  Using that plus the class above:</p>

<pre><code>int disassembleOne(std::vector&lt;char&gt;::const_iterator&amp; it, std::vector&lt;char&gt;::const_iterator&amp; end){
    auto op{std::find(instructions.begin(), instructions.end(), *it)};
    if (op == instructions.end()) {
        std::cout &lt;&lt; "Instruction not found\n";
        it = end;
        return 0; // instruction not found or off the end of the passed array
    }
    if (std::distance(it, end) &lt; op-&gt;bytes) {
        std::cout &lt;&lt; "Not enough bytes left to decode " &lt;&lt; op-&gt;name &lt;&lt; '\n';
        it = end;
        return 0; // instruction not found or off the end of the passed array
    }
    return op-&gt;decode(it);
}
</code></pre>

<p>Now <code>main</code> becomes very simple:</p>

<pre><code>int main(){
    const std::vector&lt;char&gt; char_vect = {0x76, 0x10, 0x20, 0x10}; // Fill vector of char
    auto end{char_vect.cend()};

    for (auto it{char_vect.cbegin()}; it != end; disassembleOne(it, end)) {
    }
}
</code></pre>

<p>Another way to do this would be to put more of the processing in the <code>Opcode</code> itself -- it would make sense that each opcode would know how to decode itself.</p>

<h2>Be clear about caller expectations</h2>

<p>This code, as with the original code, expects that the <code>it</code> being passed is a valid iterator that is not the end.  It is good to document that in comments in the code.</p>
    </div>