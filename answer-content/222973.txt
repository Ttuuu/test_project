<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing that I noticed that could be improved is to use <code>find_each</code> instead of <code>all</code>.</p>

<p><code>all</code> will load all the records from the database at once, which can blow up your server. Using <code>find_each</code> instead, you'll load records in batches.</p>

<p>Also, another thing here is that you're using heavily object in queries, for instance: <code>UserSegment.find_by(user: user_discount.user)</code> instead of <code>UserSegment.find_by(user_id: user_discount.user_id)</code></p>

<p>When using object references like that, if the object isn't loaded rails will perform a query to retrieve the object - therefore this code have a N+1 problem in it - meaning you end up loading those objects (such as user, discount and segment) even though have basically the same info in the parent object already loaded.</p>

<p>So always prefer to ids instead of objects for those type of queries.</p>

<p>If I understood your problem correctly I think you can simplify greatly its performance and syntax by just leveraging ActiveRecord query options. Instead of loading the objects in memory and using ruby to do the verifications for you, you can just instruct ActiveRecord to perform joins and whatnot and just return to you the information that you need.</p>

<p>Here's how I'd do it:</p>

<p>First, for removing invalid user discounts I'd create a query that return them to me, like so:</p>

<pre><code>class UserDiscount &lt; ApplicationRecord
  belongs_to :user
  belongs_to :discount

  def self.invalid_user_discounts
    UserDiscount.
      joins("INNER JOIN discount_segments ON user_discounts.discount_id = discount_segments.discount_id").
      joins("INNER JOIN user_segments ON user_discounts.user_id = user_segments.user_id").
      where("user_segments.segment_id &lt;&gt; discount_segments.segment_id")
  end
end
</code></pre>

<p>See how instead of loading multiple classes I just let the powerful SQL and rails do the job for me? This query isn't too complicated to understand and does the same job as the previous loop.</p>

<p>Once we have a query that returns invalid discounts, I can use <code>find_each</code> and remove them:</p>

<pre><code>def self.clean_user_discounts
  invalid_user_discounts.find_each do |user_discount|
    user_discount.destroy
  end
end
</code></pre>

<p>For creating discounts, I use the same approach, I let AR and SQL do the heavy lifting in this case, and just use the final formatted response to iterate over the results, like so:</p>

<pre><code>def self.create_user_discounts
  query = UserSegment.
    joins("INNER JOIN discount_segments ON user_segments.segment_id = discount_segments.segment_id").select(:id, :discount_id, :user_id)


  query.find_each do |user_and_discount_segment|
    UserDiscount.find_or_create_by(
      discount_id: user_and_discount_segment.discount_id,
      user_id: user_and_discount_segment.user_id)
  end
end
</code></pre>

<p>Rails allows us to merge the two tables <code>UserSegment</code> and <code>DiscountSegment</code> and as well to select just the fields from that query that we need, in this case: <code>user_id</code>, <code>discount_id</code> - making the creation of <code>UserDiscount</code> much easier.</p>

<p>Finally, you can see the usage of <code>find_or_create_by</code> - this is provided by Rails as well, so we don't have to issue two commands.</p>

<p>full source code: <a href="https://gist.github.com/jonduarte/c54146cb7e00f0045193aad739301c13" rel="nofollow noreferrer">https://gist.github.com/jonduarte/c54146cb7e00f0045193aad739301c13</a></p>
    </div>