<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Recursion</h1>

<p>Recursion is a bad idea if a simple loop does the job and if you have little control over recursion depth.</p>

<pre><code>In [1]: import sys
In [2]: sys.getrecursionlimit()
Out[2]: 1000
</code></pre>

<p>Of course you can set a higher limit, but you may run into a stack overflow. But lets refactor your code first.</p>

<h1>Code repetition</h1>

<p>Code repetition is one of the ugliest things you can do. copy pasted code is a real pitfall when you forget o update the other execution paths. We change </p>

<pre><code>def username_system(u, memo={}, users=[]):
    copy_u = u.copy()
    try:
        name = copy_u[0]
    except IndexError:
        return users
    if name in memo.keys():
        memo[name] += 1
        username = name + str(memo[name])
        users.append(username)
        copy_u.remove(name)
        return username_system(copy_u, memo, users)
    else:
        username = name
        users.append(username)
        memo.update({name: 0})
        copy_u.remove(name)
        return username_system(copy_u, memo, users)
    return users
</code></pre>

<p>to</p>

<pre><code>def username_system(u, memo={}, users=[]):
    copy_u = u.copy()
    try:
        name = copy_u[0]
    except IndexError:
        return users
    if name in memo.keys():
        memo[name] += 1
        username = name + str(memo[name])
    else:
        memo.update({name: 0})
        username = name
    users.append(username)
    copy_u.remove(name)
    return username_system(copy_u, memo, users)
    return users
</code></pre>

<p>We immediately see the unreachable code at the end and remove the last line</p>

<h1>Try/catch instead of if/else</h1>

<p>You misuse exception handling for a simple test. We replace</p>

<pre><code>try:
    name = copy_u[0]
except IndexError:
    return users
</code></pre>

<p>by</p>

<pre><code>if len(copy_u) == 0:
    return users
name = copy_u[0]
</code></pre>

<h1>Avoid unnecessary copies</h1>

<p>Where you iterate over your list you do</p>

<pre><code>copy_u = u.copy()
</code></pre>

<p>for no reason. This your absolute performance killer as it is of quadratic complexity. We can delete that line and the code is still working. If we want to save the initial list we do</p>

<pre><code>print(username_system(names.copy()))
</code></pre>

<p>in our main function.</p>

<h1>Be careful about remove()</h1>

<p><code>list.remove()</code> searches(!) for a value and deletes it from the list. You already know which index to delete, so use <code>del</code>.
In your case <code>remove()</code>has no negative impact to complexity as the element is found immediately at the front. However the code is more readable when you use <code>del</code> as this tells everybody that no search is done.</p>

<p>Current status</p>

<pre><code>def username_system(u, memo={}, users=[]):
    if len(u) == 0:
        return users

    name = u[0]
    if name in memo.keys():
        memo[name] += 1
        username = name + str(memo[name])
    else:
        memo.update({name: 0})
        username = name
    users.append(username)
    del u[0]
    return username_system(u, memo, users)
</code></pre>

<h1>And now the subtle bug</h1>

<p>If you call your function multiple times there is some persistence</p>

<pre><code>print("given:", names)
print("returns:", username_system(names.copy()))
print("given:", names)
print("returns:", username_system(names.copy()))
</code></pre>

<p>prints</p>

<pre><code>given: ['john', 'john', 'tom', 'john']
returns: ['john', 'john1', 'tom', 'john2']
given: ['john', 'john', 'tom', 'john']
returns: ['john', 'john1', 'tom', 'john2', 'john3', 'john4', 'tom1', 'john5']
</code></pre>

<p>How is that? You do default params in your function. This default value is created only once. If you alter the value, which is possible on containers like <code>list</code> the altered value persists. When you call your function the second time <code>memo</code>and <code>users</code> are initialized to the previously used objects and continue the up-count. That can be solved like</p>

<pre><code>def username_system(u, memo=None, users=None):
    memo = memo or {}
    users = users or []
</code></pre>

<h1>Some other python stuff</h1>

<pre><code>if name in memo.keys():
</code></pre>

<p>can be replaced by</p>

<pre><code>if name in memo:
</code></pre>

<p>The default iteration over a <code>dict()</code> gives the keys. Use <code>dict.keys</code> only if you e. g. want to copy keys to a list().</p>

<p>In the module <code>collections</code> there is a class <code>Counter</code> which does exactly what your <code>memo</code> does. We use it like</p>

<pre><code>from collections import Counter

def username_system(u, memo=None, users=None):
    memo = memo or Counter()
    users = users or []
    # [...]
    if name in memo:
        username = name + str(memo[name])
    else:
        username = name
    memo[name] += 1
</code></pre>
    </div>