<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are handling multibyte strings so additional care must be taken.  If you do not include the <code>u</code> pattern modifier, your multibyte return values will be damaged.  (<a href="https://3v4l.org/ZiXXb" rel="nofollow noreferrer">Demo</a>)</p>

<p>Let's dissect your posted patterns:</p>

<p>Patterns to be replaced by a single space:</p>

<pre><code>/\s{2,}/  // match two or more whitespace characters
/[\t\n]/  // then re-iterate the potentially modified string and match any tab or line-feed (newline) character
</code></pre>

<p>Rather than making two separate passes, you can safely merge the logic into one pattern.  To provide a more comprehensive "mop up" of newline characters, <a href="https://stackoverflow.com/a/18992691/2943403">I'll recommend <code>\R</code></a>.</p>

<pre><code>/\s{2,}|[\R\t]/u
</code></pre>

<p>As for the pattern to remove whitelisted characters, you have some overlapping logic which I believe is due to an ill-positioned hyphen.<br>
Reference: <a href="https://www.ascii.cl/htmlcodes.htm" rel="nofollow noreferrer">https://www.ascii.cl/htmlcodes.htm</a></p>

<pre><code> pattern | ASCII decimal place
 -----------------------------
   [a-z] | range 97 to 122
   [A-Z] | range 65 to 90
   [0-9] | range 48 to 57
     Ã   | 195
     §   | 167
   [&amp;-©] | range 38 to 169
     ‚   | 44
     Â   | 194
     ƒ   | 402
     â   | 226
     €   | 8364
     ˜   | 126
    \s   | *(equal to [\p{Z}\h\v])  &lt;-- I don't feel like writing it all out
</code></pre>

<p>The position of your hyphen between two non-ranged entities in your negated character class tells the regex engine that you which to declare a range of characters.  I interpret this to be a mistake.  Rather than escaping the hyphen, I always recommend positioning the hyphen as the final character in the character class.</p>

<p>My suggested pattern will condense the alphabetic ranges by writing the case-insensitive pattern modifier <code>i</code>, using <code>\d</code> to signify digits, moving character ranges to the front,  moving the hyphen to the back, and then (to be OCD) I've ordered single characters by their decimal value.</p>

<pre><code>/[^a-z\d\s&amp;‚~§©ÂÃâƒ€-]/ui
</code></pre>

<p>You could implement this without retyping <code>$string</code> to create a oneliner, but if you prefer shorter lines of code, you can break it up over multiple lines or declare variables.</p>

<pre><code>function stripSpecialCharater($string)
{
    return preg_replace(['/\s{2,}|[\t\R]/u', '/[^a-z\d\s&amp;‚~§©ÂÃâƒ€-]/ui'], [' ', ''], iconv("Windows-1252", "UTF-8", urldecode($string)));
}
</code></pre>

<p>Now we don't have any sample input to work with, but <a href="http://php.net/manual/en/function.urldecode.php#48481" rel="nofollow noreferrer">this may be a valuable read</a>.  It might be more stable to perform the replacement on the raw string, but that is for you to determine with your project data.  There are plenty of ways to mince multibyte characters that are not always obvious; I recommend testing against a large battery of cases.</p>

<p>Raw replacement:</p>

<pre><code>return preg_replace(['/\s{2,}|[\t\R]/u', '/[^a-z\d\s&amp;‚~§©ÂÃâƒ€-]/ui'], [' ', ''], $string);
</code></pre>

<p>As a final consideration, you may want to perform the whitespace reduction after the whitelist replacements so that you can handle newly consecutive whitespace characters.  A final <code>trim()</code> might be advisable too.  Add some realistic test strings to <a href="https://3v4l.org/VvVcc" rel="nofollow noreferrer">this demo</a> and see what processes ultimately provide the cleanest output.</p>
    </div>