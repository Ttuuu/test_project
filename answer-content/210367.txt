<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<h1>thorwables are good practice to handle semantic errors?</h1>

<p>There is an argument running in the community when exactly exceptions should be used and when not. You might get different answers depending on who you ask.
The common ground here ist that exceptions should not be misused to control the program flow.</p>

<p>IMHO your use of the exception is ok since the detected situation needs user interaction to be solved. The there is no way the program can recover from that on its own.</p>

<h1>one should always use "getters" and "setters"?</h1>

<p>Yes.</p>

<p>The reason is that your <code>Load</code> class may develop and get Extentions (specialized Loads that extend your currrent <code>Load</code> class). Or you decide to change the way your <code>Load</code> class stores its properties. accessing the properties via getter and setter yould enable you to change that without affecting the calling code.</p>

<p>Some may argue that this is overkill for such a small problem, but you should get used to do so "in principle". </p>

<p><strong>BUT</strong>
This holds only true for <em>Data Transfer Objects</em> or <em>Value Objects</em>, anything that can be considered being the "Data Model".</p>

<p>Classes holding <em>business logic</em> <strong>should not</strong> have getters or setters. </p>

<h1>How do you judge the readibility.</h1>

<h2>Comments</h2>

<p>Your code has a lot of comments.</p>

<p>Some decades ago this was concidered a good thing but currently the we agree that <em>less is more</em>. 
Comments should explain <strong>why</strong> the code is like it is. Your identifiers  (names of methods and variables) should explain how it works.</p>

<p>The reason is that comments thend to erode. 
While your program develops you change the code but not the comments for various resons: no time, to concentrated or something along that.
You intent to change the comment later but that never happens usually for the same reasons you did noch change it immediately.</p>

<p>This way youir comments turn into lies while the code they used to describe changes.</p>

<h3>good comments</h3>

<p>Yes, your code also has good comments. ;o)</p>

<p>The header comment of class <code>Solution</code> is a good one. 
It describes what the code is <em>supposed</em> to do.</p>

<h3>bad comments</h3>

variable explanations

<ol>
<li><p>repetition</p>

<pre><code>public double force; // Force
</code></pre>

<p>This is just a repetition of the name. 
It adds no value for the reader.</p></li>
<li><p>single character names / explained variables</p>

<p>In Java the length of identifiers is virtually unbounded. 
There is no need to be stingy with characters. 
Instead of that explanation in class <code>Load</code></p>

<pre><code>public double x;     // x= length from beginning of the girder to the force acting
</code></pre>

<p>the variable could be named like this</p>

<pre><code>public double distanceFromMount;
</code></pre>

<p>the same applies to variable <code>length</code></p>

<pre><code> public double lineLoadLegth;
</code></pre></li>
</ol>

<p>BTW: when dealing with physical values it is a good idea to add <em>units</em> to identifier names. </p>

<p>Remember the failed Mars missions <em>Mars Climate Orbiter</em> and <em>Mars Polar Lander</em>?
They failed because the main computer was build by NASA and as usual in science they handled physical values in SI units (km, km/h, kg) while the lander engine was build by <em>General Electrics</em> aviation department where engineers traditionally use imperial units (miles, knots, pounds) Since they did not had units in their identifiers this problem could not be detected by code reviews or the engineers while coding.</p>

<p>So even when not coding space mission control software you should consider adding units to variables (and method) dealing with physical values as the properties in your <code>Load</code> class do:</p>

<pre><code>public double forceInNewton;
public double distanceFromMountInMeter;
public double loadLengthInMeter;
</code></pre>

<p>I'd even consider this being a valid reason to violate the <a href="https://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">Naming Conventions</a> and write it like this:</p>

<pre><code>public double force_N;
public double distanceFromMount_m;
public double loadLength_ft;
</code></pre>

<h2>code formatting</h2>

<p>Put each instruction on a separate line.
So the method <code>addLoad</code> in class <code>Beam</code> should look like this:</p>

<pre><code>public void addLoad(Load load) throws BeamError {
    if (load.x&gt;=0 &amp;&amp; load.x&lt;=length &amp;&amp; load.x+load.length&lt;=length)
      stress.add(load);
    else 
      throw new BeamError ("Load not withing girder length!",stress.size()+1);
}
</code></pre>

<p>You may consider to use your IDEs *auto formatter" feature to always have proper line breaks and indentation.</p>

<h2>use private methods</h2>

<p>The method <code>addLoad</code> in class <code>Beam</code> has some more readability issue. 
It is not obvious what the condition is. 
So it might be a good idea to move that into a method of its own:</p>

<pre><code>private boolean isInside(Load load) throws BeamError {
    return load.x&gt;=0 &amp;&amp; load.x&lt;=length &amp;&amp; load.x+load.length&lt;=length;
}

public void addLoad(Load load) throws BeamError {
    if (isInside(load))
      stress.add(load);
    else 
      throw new BeamError ("Load not withing girder length!",stress.size()+1);
}
</code></pre>

<h2>separation of concerns (from readability point of view)</h2>

<p>Being inside class <code>Beam</code> the line </p>

<pre><code>if (isInside(load))
</code></pre>

<p>still reads a bit "bumpy", whereas </p>

<pre><code>public void addLoad(Load load) throws BeamError {
    if (load.isInside(length_m))
      stress.add(load);
    else 
      throw new BeamError ("Load not withing girder length!",stress.size()+1);
}
</code></pre>

<p>is much more expressive (IMHO).</p>

<p>This could be an indication that <code>isInside()</code> belongs to class <code>Load</code> rather than to class <code>Beam</code>.</p>
    </div>