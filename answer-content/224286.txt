<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>addnode(self, key1, key2, edge=0)</code></h2>

<p>The parameter <code>edge</code> is not used.  Either remove it, or use it, but keeping it with a default value and not using it is obfuscation.</p>

<p><code>self.graph</code> is a <code>defaultdict(list)</code>, so testing if <code>key2</code> is not present, and setting that key’s value to an empty list if it isn’t present, which is the raison d’être for the <code>defaultdict(list)</code>, isn’t using that class properly.  You want the key to exist, but don’t want to add any values to it.  Simply use:</p>

<pre><code>_ = self.graph[key2]
</code></pre>

<h2><code>findcycle(self)</code></h2>

<p>This function returns <code>True</code> or <code>None</code>.  It would be much easier to write documentation for the function if it returned only one “kind” of value.  Add <code>return False</code> to the end of the function. </p>

<h2>Test cases</h2>

<p>Put your test cases inside a <code>__name__ == '__main__'</code> guard.  Then you can <code>import</code> this as a module into another file without the tests running, but running this file by itself will still execute the tests. </p>

<pre><code>if __name__ == '__main__':
    g = graph()
    g.addnode(0, 1)
    # ...
</code></pre>

<h2>PEP8</h2>

<p>Follow the PEP8 standard guidelines.  Put a space after all commas, don’t put a space before the parentheses in function calls.  Use an automatic checker (pylint, pyflakes, ...) to ensure you don’t violate these guidelines. </p>
    </div>