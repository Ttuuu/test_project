<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There isn't much to say here, it is clear what your solution is doing, and attempts to make it more concise would just make it harder to read.</p>

<p>I recommend replacing <code>map!</code> with <code>each</code> - <code>map!</code> indicates that you want the values returned by <code>grep</code> to be changed in place. Since that result is then discarded, it makes the code more difficult to understand.</p>

<p>Personally, I avoid <code>!</code> methods whenever possible. The hidden mutation which can occur makes code harder to reason about. It is fine in this small example (especially once <code>map!</code> is replaced with <code>each</code>), but in a larger program it will hide bugs.</p>

<p>Avoiding mutation in this case makes the code a bit longer, but it has the benefit of not needing to stop and think about what has changed and if it matters. I spent several minutes trying to figure out why your code <em>didn't</em> fail when a field didn't include a <code>-</code> since <code>gsub!</code> returns <code>nil</code> when no replacements are made.</p>

<p>Though less concise, I prefer the following version:</p>

<pre class="lang-bsh prettyprint-override"><code>ruby -ane '
$F[11..] = $F[11..].map { |x| x.start_with?("RX:Z:") ? x.gsub(/-/, "") : x }
puts $F.join "\t"
' file.sam
</code></pre>

<p>Not automatically joining <code>$F</code> back together to create <code>$_</code> makes sense, what should ruby do if you use (or modify) <code>$F</code> but then set <code>$_</code> to something else? Setting <code>$_</code> whenever <code>$F</code> is modified would be rather confusing and bad for performance.</p>
    </div>