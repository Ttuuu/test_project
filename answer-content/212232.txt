<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code Style</h1>

<ul>
<li><p>Your code contains a few lines that accomplish nothing and obfuscate your intent:</p>

<pre><code>    else: 
        continue
</code></pre>

<p>If the conditional is false, you'll automatically <code>continue</code> on to the next iteration without having to tell the program to do that.</p>

<pre><code>    return None
</code></pre>

<p>All Python functions implicitly <code>return None</code>. While <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP 8</a> appears to endorse this practice ("explicit is better than implicit"), it seems noisy to me.</p></li>
<li><p><code>num_lst = list(range(len(nums)))</code> effectively generates a list of all the indices in the <code>nums</code> input list. Then, you immediately <code>enumerate</code> this list, which produces pairs of identical indices <code>indx, num</code>. If all you're attempting to do is iterate, this is significant obfuscation; simply call <code>enumerate</code> directly on <code>nums</code> to produce index-element tuples:</p>

<pre><code>def twoSum(self, nums, target):
    for i, num in enumerate(nums):
        for j in range(i + 1, len(nums)):
            if num + nums[j] == target:
                return [i, j]
</code></pre>

<p>This makes the intent much clearer: there are no duplicate variables with different names representing the same thing. It also saves unnecessary space and overhead associated with creating a list from a range.</p></li>
<li>Following on the previous item, <code>indx, num</code> and <code>num_lst</code> are confusing variable names, especially when they're all actually indices (which are technically numbers).</li>
</ul>

<hr>

<h1>Efficiency</h1>

<ul>
<li><p>This code is inefficient, running in <a href="https://en.wikipedia.org/wiki/Big_O_notation#Orders_of_common_functions" rel="nofollow noreferrer">quadratic time</a>, or  <span class="math-container">\$\mathcal{O}(n^2)\$</span>. Leetcode is generous to let this pass (but won't be so forgiving in the future!). The reason for this is the nested loop; for every element in your list, you iterate over every other element to draw comparisons. A linear solution should finish in ~65 ms, while this takes ~4400 ms. </p>

<p>Here is an efficient solution that runs in <span class="math-container">\$\mathcal{O}(n)\$</span> time:</p>

<pre><code>hist = {}

for i, n in enumerate(nums):
    if target - n in hist:
        return [hist[target-n], i]
    hist[n] = i
</code></pre>

<p>How does this work? The magic of <a href="https://en.wikipedia.org/wiki/Hash_function" rel="nofollow noreferrer">hashing</a>. The dictionary <code>hist</code> offers constant <span class="math-container">\$\mathcal{O}(1)\$</span> lookup time. Whenever we visit a new element in <code>nums</code>, we check to see if its sum complement is in the dictionary; else, we store it in the dictionary as a <code>num =&gt; index</code> pair.</p>

<p>This is the classic time-space tradeoff: the quadratic solution is slow but space efficient, while this solution takes more space but gains a huge boost in speed. In almost every case, choose speed over space.</p>

<p>For completeness, even if you were in a space-constrained environment, there is a fast solution that uses <span class="math-container">\$\mathcal{O}(1)\$</span> space and <span class="math-container">\$\mathcal{O}(n\log{}n)\$</span> time. This solution is worth knowing about for the practicality of the technique and the fact that it's a common interview follow-up. The way it works is:</p>

<ol>
<li>Sort <code>nums</code>.</li>
<li>Create two pointers representing an index at 0 and an index at <code>len(nums) - 1</code>.</li>
<li>Sum the elements at the pointers. 

<ul>
<li>If they produce the desired sum, return the pointer indices. </li>
<li>Otherwise, if the sum is less than the target, increment the left pointer</li>
<li>Otherwise, decrement the right pointer.</li>
</ul></li>
<li>Go back to step 3 unless the pointers are pointing to the same element, in which case return failure.</li>
</ol></li>
<li><p>Be wary of list slicing; it's often a hidden linear performance hit. Removing this slice as the nested loop code above illustrates doesn't improve the quadratic time complexity, but it does reduce overhead.</p></li>
</ul>

<p>Now you're ready to try <a href="https://leetcode.com/problems/3sum/" rel="nofollow noreferrer">3 Sum</a>!</p>
    </div>