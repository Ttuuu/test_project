<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Positive Feedback</h1>

<p>I liked how you follow the rules of <em>Clean Code</em>, that you write small methods and small classes and give all readable names!</p>

<p>You've introduced your own data types that make the code more readable. The MontyHall-Algorithm can now be read like a poem:</p>

<pre class="lang-java prettyprint-override"><code>montyHall.chooseDoor();
montyHall.openDoor();
if (player.preferresChange()){
   montyHall.changeDoor();
}
if (Price.CAR == montyHall.getPrice()){
   player.increaseWinCounter();
}
</code></pre>

<p>And all your methods have only one intention level what makes them so easy to understand.</p>

<h1>Some Criticism</h1>

<h2>Class Names Refer to Unexpected Behavior</h2>

<p>I read on <a href="https://en.wikipedia.org/wiki/Monty_Hall_problem" rel="nofollow noreferrer">Wikipedia</a>: </p>

<blockquote>
  <p>You [the player] pick a door, say No. 1, and the host, who knows what's behind the doors, opens another door, say No. 3</p>
</blockquote>

<p>After I read your code I was a little bit confused at some places. But not because of the quality of your code, which is for me very high, but because of the quote above.</p>

<p>In your game the <code>Player</code> can't pick a <code>Door</code>. Instead the <code>Player</code> gets picked a door by <code>MontyHall</code>: (<code>montyHall.chooseDoor()</code>).</p>

<p>Additional to that the <code>Player</code> has a <code>winCounter</code>, but actually the <code>Simulation</code> should track how often a <code>Player</code> wins the <code>MontyHall</code>.</p>

<h2>No Outcome</h2>

<p>What would you expect your <code>main</code> to do without any knowledge about our code base?</p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
    Simulator simulator = new Simulator();
    simulator.simulate(10000, 3);
}
</code></pre>

<p>It could run something like a game loop or start a GUI to interact with but instead it writes data to the console.</p>

<p>Much cleaner would be:</p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
    Simulator simulator = new Simulator();
    simulator.printSimulations(10000, 3);
}
</code></pre>

<p>But now imagine you want to compare a "Changer" and a "Stayer". <strong>You can't do it</strong> because you have <em>no outcome</em>! You through your outcome away by printing it to the console instead of storing and returning it.</p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
    Simulator simulator = new Simulator();
    SimulationResult result = simulator.simulate(10000, 3);
    int average = result.calculateAverageOfStayer();
    System.out.println(average);
}
</code></pre>

<h2><a href="https://refactoring.guru/smells/feature-envy" rel="nofollow noreferrer">Feature Envy</a></h2>

<blockquote>
  <p>A method accesses the data of another object more than its own data.</p>
</blockquote>

<p>The method <code>playOneRound</code> in <code>playOneRound</code> is in my eyes a <em>feature envy</em>. All the tasks should be done by <code>MontyHall</code>. So the method <code>playOneRound</code> should look like:</p>

<pre class="lang-java prettyprint-override"><code>private void playOneRound(Player player, MontyHall montyHall) {
    montyHall.playGameWith(player);
}
</code></pre>

<h1>Use Methods instead of Getters and Operations</h1>

<p>In your code I can find code structure like <code>x.getValue == something</code>, but much better to read would be <code>x.isSomething()</code></p>

<p>Some inspiration for you:</p>

<p><code>Price.GOAT == d.getPrice()</code> means <code>door.isHidingGoat()</code></p>

<p><code>Price.CAR == montyHall.getPrice()</code> means <code>montyHall.isWon()</code></p>

<p><code>!d.equals(selected)</code> means <code>door.notEquals(selected)</code></p>

<hr>

<p>In your older post <a href="https://codereview.stackexchange.com/users/31562/simon-forsberg">@Simon Forsberg</a> mentioned:</p>

<blockquote>
  <p>I have a feeling that using a class for <code>StraightPlayer</code>, <code>ChangePlayer</code> and <code>ShowMaster</code> will be a bit overkill. </p>
</blockquote>

<p>I know you still have the <a href="https://www.martinfowler.com/bliki/FlagArgument.html" rel="nofollow noreferrer">flag argument</a> in <code>Player</code>. But that's fine. In general, refactoring can be an overkill at all. And you can see that for this little problem you can divide the logic into so many different classes and methods. When you write code, you have to find a balance between all OOP/clean code and your task.</p>

<p>Thanks for this cool problem and that you let me review it. I learned a lot while read your code :] </p>
    </div>