<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since exactly one element will exist at a time, you can retrieve it by alternating with <code>||</code> between both <code>getElementById</code> calls. Then, there's no need for any existence test later.</p>

<p>Since you set disabled to true in both <code>branchTransitNumber.length &lt; 6</code> and <code>depositAccountNumber.length &lt; 8</code>, you can combine those blocks together:</p>

<pre><code>const button = document.getElementById('sortcodeError') || document.getElementById('accountnameError');
button.disabled = false;
if ($scope.data.branchTransitNumber &amp;&amp; $scope.data.depositAccountNumber) {
    if ($scope.data.branchTransitNumber.length &lt; 6 || $scope.data.depositAccountNumber.length &lt; 8) {
        button.disabled = true;
    }
}
</code></pre>

<p>(The above can be made even more concise via destructuring or optional chaining to avoid the double <code>if</code>s, but I think it'd look too confusing.)</p>

<p>Or, if you need the <code>addClass</code> call <em>only</em> in the case of <code>$scope.data.depositAccountNumber.length &lt; 8</code> <strong>and</strong> <code>accountnameError</code> existing:</p>

<pre><code>const button = document.getElementById('sortcodeError') || document.getElementById('accountnameError');
button.disabled = false;
if ($scope.data.branchTransitNumber &amp;&amp; $scope.data.depositAccountNumber) {
    const depositNumberProblem = $scope.data.depositAccountNumber.length &lt; 8;
    if ($scope.data.branchTransitNumber.length &lt; 6 || depositNumberProblem) {
        button.disabled = true;
        if (depositNumberProblem &amp;&amp; button.id === 'accountnameError') {
            angular.element($('#btnSubmi')).addClass("gray");
        }
    }
}
</code></pre>

<p>Depending on the logic of your script, the above may be simplifiable. For example, you may wish to do <code>.addClass("gray")</code> regardless when you disable the button.</p>

<p>Other notes:</p>

<ul>
<li>It's 2020, best to <em>at least</em> use ES2015 syntax in new code by declaring variables with <code>const</code>, not <code>var</code> (which has too many gotchas)</li>
<li>Whenever you do have to compare two different values, use strict equality with <code>===</code> or <code>!==</code> - avoid loose equality <code>==</code> and <code>!=</code>, since loose equality has <a href="https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons">too many strange rules</a> that a developer should not have to memorize.</li>
<li>If the alternation trick above weren't possible, you'd still be able to reference the variable names you saved the elements into to keep things concise. Eg, with <code>const sortcodeError = document.getElementById("sortcodeError")</code>, you should never have to call <code>document.getElementById("sortcodeError")</code> later - instead, just reference the <code>sortcodeError</code> variable.</li>
<li>Use consistent indentation. If one statement is in the same block as another, it should begin at the same indentation level. This significantly improves a code's readability.</li>
<li>Either use semicolons wherever appropriate, or don't. (If you're not an expert, I'd recommend using them, otherwise you'll occasionally run into strange bugs.) Consider using <a href="http://eslint.org/" rel="nofollow noreferrer">a linter</a> to automatically prompt you to fix potential mistakes (and to make the code nicer-looking).</li>
<li>The overall logic looks a bit weird. Do you <em>really</em> need to check that both <code>branchTransitNumber</code> and <code>depositAccountNumber</code> exist, but disable a button if <em>either</em> of them fail a length test? In a validation situation, I'd expect to disable a button if either fail, rather than if <em>both exist <strong>and</strong> either fail</em>. Double-check the logical paths your code requires and results in, and consider what sort of effect you <em>really</em> want.</li>
</ul>
    </div>