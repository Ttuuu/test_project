<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Heres my implementation, I abused pattern matching so that way I don't need to check for even and odd index. Your cipher function will also only work for 3, using ord and modulo however will cover all wrap around cases for all integers.</p>

<p>All the below line is doing is getting the next n circular element in our alphabet </p>

<p><code>[chr (((n + ord y - ord 'a') 'mod' 26) + ord 'a')]</code></p>

<pre><code>cipher :: [Char] -&gt; Int -&gt; [Char]
cipher [] _ = []
cipher (x:[]) _ = [toUpper x] 
cipher (x:y:xs) n = [toUpper x] ++ [chr (((n + ord y - ord 'a') `mod` 26) + ord 'a')] ++ cipher xs n
</code></pre>
    </div>