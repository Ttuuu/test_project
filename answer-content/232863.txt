<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Missing Header Include</h2>
<p>This code should have</p>
<pre><code>#include &lt;algorithm&gt;
</code></pre>
<p>So that the call to <code>max()</code> will compile.</p>
<h2>Symbolic Constants</h2>
<p>The declaration for MAX makes it a variable rather than a constant, that means that it could be changed within the code. It might be better if it was declared as a constant</p>
<pre><code>constexpr int MAX = 9999999999;
</code></pre>
<p>so that the code can't change it.</p>
<h2>Avoid <code>using namespace </code>std`</h2>
<p>As stated in another review if you are coding professionally you should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well.</p>
<h2>Put Classes in Their Own Files</h2>
<p>One of the basic reasons for Object Oriented Programming is that objects are reusable, however, if the object is defined in the same file as <code>main()</code> it can't be reused or shared between modules. Most C++ editors (IDEs) have a way to create classes that generate both a header file and a C++ source file for the class. Another reason for doing separating classes into their own files is that it makes building, writing, debugging, reading, maintaining and testing code easier. During build only files that have been edited will recompile.</p>
<h2>Complexity</h2>
<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>
<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p>There are at least 10 possible functions in <code>main()</code>.</p>
<ul>
<li>Show Menu</li>
<li>Get Option  (calls show menu and returns the option)</li>
<li>Open Account</li>
<li>Close Account</li>
<li>Deposit in Account</li>
<li>Withdraw from Account</li>
<li>Show All Accounts</li>
<li>Transfer to an Account</li>
<li>Show Balance</li>
<li>Show All Transactions</li>
</ul>
<p>Quit is not a function because it only indicates that the while loop should end.</p>
<p>Rather than use multiple <code>else if</code> to process the options, use a switch statement:</p>
<pre><code>        int option;
        cout &lt;&lt; "Please Enter Your Option Number: "; cin &gt;&gt; option;

        switch (option)
        {
            case 1: 
                OpenAccount();
                continue;
            case 2:
                CloseAccount();
                continue;
            case 3:
                ShowAllAccounts();
                continue;
                ...
            default:
                cerr &lt;&lt; "Invalid option " &lt;&lt; option &lt;&lt; "please enter a valid option\n";
                continue;
        }
</code></pre>
<p>There are conceptually other classes that could help implement the program, such as class <code>Bank</code> which would contain the accounts and the current account number to assign to an account. The current account number to assign does not belong in the Account class. The list of transactions belongs in the Account class because the user should not see any transactions that do not belong to them. There should also be a <code>Customer</code> class that contains the customer data name and gender. A customer may have several accounts.</p>
<h2>Default Constructors</h2>
<p>Rather than creating the default constructor as <code>Account(){}</code>, C++ allows you to assign a default constructor <code>Account() = default;</code> This is more readable.</p>
<h2>Readability</h2>
<p>There are a number of this that would improve the readability of the code, which would not only make it easier to review, but easier to maintain the code as well.</p>
<ul>
<li>Put all declarations on separate lines.</li>
<li>Horizontal spacing.</li>
<li>Use code blocks even for single statements within <code>if</code> statements, <code>then</code> clauses and loops.</li>
</ul>
    </div>