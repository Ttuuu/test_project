<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Initial comments for only the <code>dfs</code> function:</p>

<h3>Variable names</h3>

<ul>
<li><code>start</code> makes sense for the initial point.</li>
<li><code>is-goal?</code> <code>is-</code> is not necessary, the question marks already indicates that it's a predicate function, so name it <code>goal?</code>. </li>
<li><code>get-successors</code> is a pure function that will return the same answer given the same point, pure functions don't need a verb. Verbs are to indicate side effects. <code>successors</code> is fine. </li>
</ul>

<p>For later two points I followed Stuart Sierra's <a href="https://stuartsierra.com/2016/01/09/how-to-name-clojure-functions" rel="nofollow noreferrer">How to Name Clojure Functions</a>.</p>

<p>I would skip the intermediate variables names like <code>new-frontier</code> and <code>next-frontier</code> since I think they are more confusing than just chaining the function calls in a thread-last, it is implied in a <code>recur</code> that they will be the next. And in same fashion I think the <code>cur-</code> prefix is redundant since it is clear they belong to the current round in the recursion.</p>

<h3>Data representation</h3>

<p>I noticed points are represented as <code>{:row x, :col y}</code>, I would see if you can use <code>[x y]</code> and refactor to a <code>map</code> or even <a href="https://github.com/clojure/data.priority-map" rel="nofollow noreferrer"><code>priority-map</code></a> with points as keys and values the paths (you could then sort by for example shorter length of path being higher priority).</p>

<p>Also (bit outside <code>dfs</code>) I would try to skip the <code>cells</code> map and only use it for printing because the conversions (e.g., <code>cell-val (:path cells)</code>) clutter up the code. I would use the <code>:empty</code>, <code>:blocked</code> and so on directly.</p>

<p>The use of the set as a function to find the new successors in <code>(remove explored (get-successors cur-loc))</code> is idiomatic.</p>

<h3>nil-punning instead of <code>empty?</code> check</h3>

<p><a href="https://lispcast.com/nil-punning/" rel="nofollow noreferrer"><code>nil-punning</code></a> is the use of <code>(when (seq coll) ..)</code> instead of <code>(if (empty? coll) nil ..)</code>. When calling <code>seq</code> on an empty coll it will return <code>nil</code>, and <code>nil</code> is falsy, and the falsy clause of <code>when</code> is <code>nil</code>. So that leads to the same behaviour as returning <code>nil</code> when the coll is empty. </p>

<p>Destructuring an empty value like you do in <code>[cur-loc cur-path] (peek frontier)</code> will also lead to two nils for <code>cur-loc</code> and <code>cur-path</code> and an <code>nil</code> for the overall vector, so you could achieve <code>nil-punning</code> using <code>(when-let [[cur-loc cur-path] (peek frontier)] ..)</code>, now if the frontier is empty you will return the false clause and thus <code>nil</code>.</p>

<h3>New code with the above points addressed</h3>

<pre><code>(defn dfs
  [start goal? successors]
  (loop [frontier (list [start, []])
         explored #{start}]
    (when-let [[loc path] (peek frontier)]
      (let [next-path (conj path loc)]
        (if (goal? loc)
          next-path
          (recur (-&gt;&gt; (successors loc)
                      (remove explored)
                      (map (fn [l] [l next-path]))
                      (apply conj (pop frontier)))
                 (apply conj explored (successors loc))))))))
</code></pre>

<h3>Final remarks</h3>

<p>Overall, if I spend more time on this I would start looking at the representation of the maze and how to walk over it with <code>bfs</code>. I'd try to find a shorter representation of the point and also the maze, starting with trying to encode a point as <code>[x y]</code>. Then the associative destructuring later on can be changed to sequential (e.g., <code>(let [[x y]] loc] ...)</code> instead of <code>(let [{:keys [row col]} loc] ...)</code>) and I think the code will become more concise and readable.</p>

<p>Hope this helps!</p>

<p>PS For the nested <code>mapv</code> I would try to use a <a href="https://clojuredocs.org/clojure.core/for" rel="nofollow noreferrer"><code>for</code></a> comprehension. Note:</p>

<pre><code>(mapcat (fn [x]
          (mapv (fn [y] [x y]) (range 4 6)))
        (range 3))
;; =&gt; ([0 4] [0 5] [1 4] [1 5] [2 4] [2 5])

(for [x (range 3)
      y (range 4 6)]
  [x y])
;; =&gt; ([0 4] [0 5] [1 4] [1 5] [2 4] [2 5])
</code></pre>
    </div>