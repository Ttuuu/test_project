<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should really try to use a more modern approach to closeable resources. The try-with-resources statement has been introduced in Java 7 (2011).</p>

<p>This gets rid of all the hocus-pocus around closing and nested exceptions for you. Trivial rewrite of the first function:</p>

<pre><code>public static boolean checkLogin(String username, String password) {
    Connection connection = createConenction();
    String query = "select * from users where username = ? and password = ? ";

    try (
        PreparedStatement statement = connection.prepareStatement(query)
    ) {
        statement.setString(1, username);
        statement.setString(2, password);
        ResultSet result = statement.executeQuery();
        return result.next(); //True if User exists
    } catch(SQLException e) {
        e.printStackTrace();
        return false;
    }
}
</code></pre>

<p>Furthermore, if the method name <code>createConnection()</code> is not a lie, you should also close the connection. (Otherwise rename it to <code>getConnection()</code>):</p>

<pre><code>public static boolean checkLogin(String username, String password) {
    String query = "select * from users where username = ? and password = ? ";

    try (
        Connection connection = createConenction();
        PreparedStatement statement = connection.prepareStatement(query)
    ) {
        statement.setString(1, username);
        statement.setString(2, password);
        ResultSet result = statement.executeQuery();
        return result.next(); //True if User exists
    } catch(SQLException e) {
        e.printStackTrace();
        return false;
    }
}
</code></pre>

<p>Apart from that little optimization in syntax, I do <em>not</em> think that the methods bear enough similarity to warrant a common abstraction. Writing and retrieving a line of data is a totally different business case and should be kept separate to be able to develop into different directions in the future.</p>

<p>If you do not want to do all that basic handling of statements, result sets, rows, columns, rather look for a well established OR-mapping framework (e.g. JPA, Hibernate) instead of rolling your own.</p>
    </div>