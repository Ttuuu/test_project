<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@K. A. Buhr's answer is good but eventhough i have accepted, it is very tailored to a single problem. A more generalized one would be more idiomatic alas dealing with such nested data structures in Haskell quickly take you into many rabbit holes. Think about flattening an indefinitelly nested list with a recursive function. We have a similar problem at hand here.</p>

<p>As it turns out, we can do it without getting our hands wet with dependent types and type famillies etc. So here I am answering my own question starting with a little prologue. </p>

<p><strong>Prologue</strong></p>

<p>When I started with Haskell the most intimidating part happened to be (still is) the Language extensions. To start with there are so many of them. While some are very straightforward, some have the potentital to turn the language into a signifcantly different one. When you study them through some tutorials you are forced to walk on a specific case of authors choice. Most of the time i can not even tell which one to apply for a particular need of mine. Just like in this case.</p>

<p>Let's get started. As always most of the time, deep inside, at the dark corners of SO there are gem like answers. For this particular case my starting point was <a href="https://stackoverflow.com/a/5994717/4543207">Is there a function to flatten a nested list of elements?</a> This answer is old but really bears the answer to many similar problems. Deserves upvoting :)</p>

<p><strong>Solution</strong></p>

<p>We best start with a new type class which will be the home of the <code>axify</code> function. This particular type class definition will be unusual though. We will constrain it both with the input (<code>i</code>) and the output (<code>o</code>) types, well type parameters. So 2 type parameters and 1 type class =&gt; <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MultiParamTypeClasses" rel="nofollow noreferrer"><code>{-# LANGUAGE MultiParamTypeClasses #-}</code></a>.</p>

<pre><code>class Axable i o where
  axify :: [i] -&gt; Axis o
</code></pre>

<p>So <code>axify</code> function takes a list of <code>i</code> types and gives an <code>Axis o</code> type. <code>axify</code> also is a recursive function. So we need a base case for termination. If we think about the simplest case of <code>axify [1,2,3] == Axis 1 2 3</code>. We notice that both <code>i</code> and <code>o</code> are of the same type which is <code>Int</code>. This base case deserves an instance of it's own.</p>

<pre><code>instance Axable a a where
  axify [a,b,c] = Axis a b c
</code></pre>

<p>Now how about having a nested list to <code>axify</code> at hand?</p>

<pre><code>instance Axable i o =&gt; Axable [i] (Axis o) where
  axify [as,bs,cs] = Axis (axify as) (axify bs) (axify cs)
</code></pre>

<p>which says, given both <code>i</code> and <code>o</code> are of Axable class, we define an instance for the case when the input is of <code>[i]</code> and the output is of <code>Axis o</code> types.</p>

<p><code>:r</code> and</p>

<pre><code>• Illegal instance declaration for ‘Axable a a’
    (All instance types must be of the form (T a1 ... an)
     where a1 ... an are *distinct type variables*,
     and each type variable appears at most once in the instance head.
     Use FlexibleInstances if you want to disable this.)
</code></pre>

<p>Ok throw a <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-FlexibleInstances" rel="nofollow noreferrer"><code>{-# LANGUAGE FlexibleInstances #-}</code></a> in the mix to see <code>Ok, one module loaded.</code></p>

<pre><code>ts = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81"
nestList :: String -&gt; [[[[Int]]]]
nestList = map transpose . chunksOf 3 . chunksOf 3 . chunksOf 3 . map read . words

λ&gt; axify (nestList ts) :: Board Int
1 2 3 10 11 12 19 20 21 4 5 6 13 14 15 22 23 24 7 8 9 16 17 18 25 26 27 28 29 30 37 38 39 46 47 48 31 32 33 40 41 42 49 50 51 34 35 36 43 44 45 52 53 54 55 56 57 64 65 66 73 74 75 58 59 60 67 68 69 76 77 78 61 62 63 70 71 72 79 80 81
</code></pre>

<p><strong>Epilogue</strong></p>

<p>The above answer in SO uses the <code>OverlappingInstances</code> language extension which is depreciated in the favor of the new <em>instance only</em> pragmas <code>{-# OVERLAPPING #-}</code>, <code>{-# OVERLAPPABLE #-}</code>, <code>{-# OVERLAPS #-}</code>, or <code>{-# INCOHERENT #-}</code>. So i was getting prepared to use one of them but it seems nothing is overlapping here. Now of course we shall consider embedding the nesting functionality <code>nestList</code> into <code>axify</code> as well but that's a relatively trivial job which is out of the concerns of this topic.</p>
    </div>