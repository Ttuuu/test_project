<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Additionally to mcocdawc's <a href="https://codereview.stackexchange.com/a/241748/123200">answer</a>, since what I mean is too much for a comment</p>

<p>You need an intermediate stage. 
You used the list of Counters for this. But then to find anagrams in the list is expensive. A dict would be a better way, and a <code>collections.Counter</code> is especially made for this purpose. Now you just need to find an acceptable representation of your word to discern anagrams. mcocdawc suggested the sorted string, since 2 anagrams result in the same response if you sort the letters. An alternative is the <code>frozenset</code> of the items of a Counter. I suspect the sorted list will be faster, but you'll need to test that.</p>

<p>Based on mcocdawc, but without the intermediate lists:</p>

<pre><code>def count_anagrams(words):
    counter = Counter()
    intermediate = {}
    for word in words:
        intermediate_key = ''.join(sorted(word))
#         intermediate_key = tuple(sorted(word)) # alternatively
#         intermediate_key = frozenset(Counter(word).items()) # alternatively
        counter[intermediate_key] += 1
        intermediate[word] = intermediate_key 
    return {
        word: counter[intermediate_key]
        for word, intermediate_key in intermediate.items()
    }
</code></pre>

<p>I'm not saying this is better/faster than mcocdawc's answer, but I think the intermediate structure is closer to </p>
    </div>