<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider this a thoughtreview instead of a codereview.</p>

<p>A lot of this will depend on your scenario; both of them are viable options. How extensive are your <code>Book</code> objects? Do you have a few but with many fields or do you have many but there are only a few fields? Have you considered pagination?</p>

<p>There are a few approaches here.</p>

<h1>1. Thin overview, fat detail</h1>

<p>You can have your api setup like this:</p>

<pre><code>class Book
{
    public string Title { get; set; }
    public string Thumbnail { get; set; }
    public DateTime ReleaseDate { get; set; }
    public Author Author { get; set; }
}

class BookOverviewViewmodel
{
    public string Title { get; set; }
    public string Thumbnail { get; set; }
}

class BookViewmodel
{
    public string Title { get; set; }
    public string Thumbnail { get; set; }
    public DateTime ReleaseDate { get; set; }
    public Author Author { get; set; }
}

[HttpGet]
[Route("/api/books")]
[ResponseType(typeof(BookOverviewViewmodel))]
public IHttpActionResult GetBooks()
{
    var books = repo.GetBooks();
    return Ok(books.Select(Mapper.Map&lt;Book, BookOverviewViewmodel&gt;));
}

[HttpGet]
[Route("/api/books/{id:int}")]
[ResponseType(typeof(BookViewmodel))]
public IHttpActionResult GetBooks(int id)
{
    var book = repo.GetBook(id);
    return Ok(Mapper.Map&lt;Book, BookViewmodel&gt;(book));
}
</code></pre>

<p>Granted, this will duplicate some fields across types but it is a fairly flexible way of allowing you to define exactly what you want returned for each request. In this scenario the <code>Book</code> type is what you use in the backend and <code>*Viewmodel</code> are responses for the specific situation they're responding to.</p>

<p>Personally I like this because it allows me to easily define what should be returned when but on the other hand it does introduce quite a bit of duplication. If you feel really compelled though you could look into generating types based off annotations but that might be going down overengineeringlane perhaps.</p>

<h1>2. Select fields based on request</h1>

<p>I see three options here: </p>

<p><strong>2.1.</strong> Either you pass in a list of strings in the request which indicate which fields you are interested in and then you build a JSON response that only contains those fields.</p>

<p><strong>2.2.</strong> You define a few configurations beforehand and allow the user to pick either of those which will return a response based on this configuration. This can be done with hardcoded types or through some sort of lookup service which uses reflection like your example in the question.</p>

<p><strong>2.3.</strong> You don't pass in any query since it isn't really needed anyway if you're adhering to REST principles: if you want the overview of books you should query <code>/api/books/</code> and when you want a specific book's information you query <code>/api/books/{id}</code>. This will already tell you what kind of information you should return.</p>

<h1>3. Work with pagination</h1>

<p>This is also a common approach: simply return x-amount of objects and indicate in the response what "page" you're on. When you allow your API endpoint to take in this page as a parameter, you can gradually return data which solves your underlying problem: too many objects for one response.</p>

<p>Do note that you should define some sort of order somewhere. Either the user does this or you have a default ordering, there's a lot you can customize here.</p>

<p>A sample implementation could look like this:</p>

<pre><code>class BookRequestParameters
{
    public int GenreId { get; set; }
    public int Page { get; set; }
    public int PageSize { get; set; }
}

class BookViewmodel
{
    public string Title { get; set; }
    public string Thumbnail { get; set; }
    public DateTime ReleaseDate { get; set; }
    public Author Author { get; set; }
}

class BookPaginationResponse
{
    public BookRequestParameters Parameters { get; set; }
    public List&lt;BookViewmodel&gt; Books { get; set; }
}

[HttpGet]
[Route("/api/books")]
[ResponseType(typeof(BookPaginationResponse))]
public IHttpActionResult GetBooks([FromUri] BookRequestParameters parameters)
{
    var books = repo.GetBooks()
                    .Where(x =&gt; x.Genre.Id == parameters.GenreId)
                    .Skip(parameters.PageSize * (parameters.Page - 1))
                    .Take(parameters.PageSize);

    var response = new BookPaginationResponse 
                   { 
                     Parameters = parameters, 
                     Books = books.Select(Mapper.Map&lt;Book, BookOverviewViewmodel&gt;) 
                   };
    return Ok(response);
}
</code></pre>
    </div>