<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>packagetarget_close()</h2>

<p>First of all, you have a <strong>copy-and-paste error</strong> in <code>packagetarget_close()</code>, where you attempt to free <code>target-&gt;min</code> twice, but not <code>target-&gt;max</code>.</p>

<p>Next, note that most of the <code>if</code> statements are superfluous.  As per the <a href="https://en.cppreference.com/w/c/memory/free" rel="nofollow noreferrer">standard behaviour for <code>free()</code></a>,</p>

<blockquote>
  <p>If <code>ptr</code> is a null pointer, the function does nothing.</p>
</blockquote>

<h1>packagetarget_open()</h1>

<p>You have <strong>undefined behaviour</strong> due to the way your error-handling works.  The chunk of memory returned by <code>malloc()</code> contains arbitrary junk.  If <code>packagetarget *target = (packagetarget*) malloc(sizeof(packagetarget))</code> succeeds, but one of the setters fails, then you would call <code>packagetarget_close()</code>, which would then interpret that arbitrary junk as pointers to memory to be freed.  A good way to fix that is to zero the memory before calling any of the setters.  You can either use <code>calloc()</code> instead of <code>malloc()</code>, or <code>memset()</code>, or a <a href="https://stackoverflow.com/q/11152160/1157100">struct initializer</a>.</p>

<h2>Avoiding malloc()</h2>

<p>In C, I prefer the init-cleanup idiom over new-destroy (which you call open-close).  In the init-cleanup idiom, the caller is responsible for providing the chunk of memory to be initialized, which gives the caller the option of providing either stack-based or heap-based memory.</p>

<h2>Avoiding goto</h2>

<p>While indiscriminate use of <code>goto</code> leads to spaghetti code, there are <a href="https://lkml.org/lkml/2003/1/12/151" rel="nofollow noreferrer">some circumstances where <code>goto</code> is justifiable, if used in a readily recognizable pattern</a>.</p>

<p>I think that your use of <code>goto</code> isn't horrible, but personally I would prefer to write the <code>if</code> statements as a chain of <code>&amp;&amp;</code> expressions.</p>

<h2>Suggested solution</h2>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

typedef struct packagetarget {
    char *name;
    char *sys;
    char *arch;
    char *min;
    char *ver;
    char *max;
    linkedlist comp;
} packagetarget;

int packagetarget_setname(packagetarget *target, const char *name) {
    if (!target) return 1;
    if (!name) return 2;
    target-&gt;name = realloc(target-&gt;name, strlen(name) * sizeof(char));
    if (!target-&gt;name) return 3;
    strcpy(target-&gt;name, name);
    return 0;
}

int packagetarget_setsys(packagetarget *target, const char *sys) {
    …
}

int packagetarget_setarch(packagetarget *target, const char *arch) {
    …
}

int packagetarget_setmin(packagetarget *target, const char *min) {
    …
}

int packagetarget_setver(packagetarget *target, const char *ver) {
    …
}

int packagetarget_setmax(packagetarget *target, const char *max) {
    …
}

packagetarget *packagetarget_cleanup(packagetarget *target) {
    if (target) {
        free(target-&gt;name);
        free(target-&gt;sys);
        free(target-&gt;arch);
        free(target-&gt;min);
        free(target-&gt;ver);
        free(target-&gt;max);
        linkedlist_cleanup(&amp;target-&gt;comp);
    }
    return target;
}

packagetarget *packagetarget_init(packagetarget *target) {
    static const packagetarget empty = {};
    if (target) {
        *target = empty;
        if (!(0 == packagetarget_setname(target, "") &amp;&amp;
              0 == packagetarget_setsys(target, PACKAGETARGET_SYS) &amp;&amp;
              0 == packagetarget_setarch(target, PACKAGETARGET_ARCH) &amp;&amp;
              0 == packagetarget_setmin(target, PACKAGETARGET_MIN) &amp;&amp;
              0 == packagetarget_setver(target, PACKAGETARGET_VER) &amp;&amp;
              0 == packagetarget_setmax(target, PACKAGETARGET_MAX) &amp;&amp;
              linkedlist_init(&amp;target-&gt;comp))) {
            packagetarget_cleanup(target);
            return NULL;
        }
    }
    return target;
}

int main() {
    packagetarget t;
    if (packagetarget_init(&amp;t)) {
        …
    }
    packagetarget_cleanup(&amp;t);
}
</code></pre>
    </div>