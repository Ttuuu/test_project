<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>First thoughts</h3>

<ol>
<li><p><strong>Read and act on</strong> the warnings provided by the compiler. That's one of the biggest points of a compiled language. Do not ignore the <strong>10+</strong> warnings. You have a ton of unused imports, unused variables, and non-idiomatic variable names.</p></li>
<li><p>Run <a href="https://github.com/rust-lang-nursery/rustfmt" rel="nofollow noreferrer">Rustfmt</a>, a tool for automatically formatting Rust code to the community-accepted style.</p></li>
<li><p>Run <a href="https://github.com/rust-lang-nursery/rust-clippy" rel="nofollow noreferrer">Clippy</a>, a tool for finding common mistakes that may not be compilation errors but are unlikely to be what the programmer intended. This points out that almost all of your uses of <code>return</code> are non-idiomatic.</p></li>
</ol>

<h3><code>impl EditWord</code></h3>

<ol>
<li>Don't abbreviate the argument <code>w</code>; call it <code>word</code> and use the struct shorthand  syntax.</li>
</ol>

<h3><code>impl&lt;'a&gt; From&lt;Vec&lt;&amp;'a str&gt;&gt; for WordDataSet</code></h3>

<ol>
<li><p>There's no obvious reason to require a <code>Vec</code>. This could equally be <code>FromIterator</code>.</p></li>
<li><p>The required conversion to <code>String</code> is unfortunate. <a href="https://stackoverflow.com/q/51542024/155423">How do I use the Entry API with an expensive key that is only constructed if the Entry is Vacant?</a> talks about a future solution. Also, you could avoid allocation completely here by storing the string slices instead. </p></li>
</ol>

<h3><code>impl WordDataSet</code></h3>

<ol>
<li><p>Don't look up in a map twice. Instead, use <code>get</code> once and work with the <code>Option</code>.</p></li>
<li><p>Using <code>as</code> is dubious for integer &lt;-&gt; floating point conversions. It's better to use <code>TryFrom</code> and panic instead. See <a href="https://stackoverflow.com/q/28273169/155423">How do I convert between numeric types safely and idiomatically?</a> for more details.</p></li>
</ol>

<h3><code>fn splits</code></h3>

<ol>
<li>This doesn't need to return a <code>Vec</code> as you only iterate over it. You can return an iterator instead. In this case, you also need to make it <code>Clone</code> so that you can use it twice in <code>edit1</code>, but you could probably iterate just once or call <code>splits</code> twice, as it's cheap. See <a href="https://stackoverflow.com/q/27535289/155423">What is the correct way to return an Iterator (or any other trait)?</a>.</li>
</ol>

<h3><code>impl SimpleCorrector</code></h3>

<ol>
<li>Instead of always returning a <code>String</code>, you could return a <code>Cow&lt;str&gt;</code>. This would avoid allocation when the word is correctly spelled.</li>
</ol>

<h3><code>fn edit1</code></h3>

<ol>
<li>It's more common to use <code>&amp;collection</code> than <code>collection.iter()</code>.</li>
</ol>

<h3><code>fn test_corrector_on_valid_word</code></h3>

<ol>
<li>This has no assertions.</li>
</ol>

<h3><code>fn test_corrector_on_invalid_word</code></h3>

<ol>
<li>I avoid using <code>unwrap</code> whenever possible. It's fine in tests, but I still try.</li>
</ol>

<h3>General</h3>

<ol>
<li><p>From an outside API, it's not clear what benefit there is to exposing both <code>WordDataSet</code> and <code>SimpleCorrector</code>. Perhaps the API should be restricted to one.</p></li>
<li><p>I'm not excited about the <code>generator</code> crate. This may just be ignorance on my part, but I'd probably strive to use standard iterator techniques until Rust gains stable first-class support for generators</p></li>
</ol>

<pre class="lang-rust prettyprint-override"><code>use generator::{done, Generator, Gn};
use std::{
    collections::{HashMap, HashSet},
    iter::FromIterator,
};

#[derive(Debug)]
struct EditWord {
    word: String,
    edit_distance: usize,
}

impl EditWord {
    fn new(word: String, edit_distance: usize) -&gt; EditWord {
        EditWord {
            word,
            edit_distance,
        }
    }
}

static ASCII_LOWER: [char; 26] = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
    't', 'u', 'v', 'w', 'x', 'y', 'z',
];

type Stream&lt;'s, T&gt; = Generator&lt;'s, (), T&gt;;

#[derive(Debug)]
pub struct WordDataSet {
    counter: HashMap&lt;String, usize&gt;,
}

impl&lt;'a&gt; FromIterator&lt;&amp;'a str&gt; for WordDataSet {
    fn from_iter&lt;I&gt;(words: I) -&gt; Self
    where
        I: IntoIterator&lt;Item = &amp;'a str&gt;,
    {
        let mut counter = HashMap::new();
        for w in words {
            *counter.entry(w.to_string()).or_default() += 1;
        }
        WordDataSet { counter }
    }
}

impl WordDataSet {
    pub fn prob(&amp;self, word: &amp;str) -&gt; f64 {
        self.counter.get(word).map_or(0.0, |&amp;c| {
            let sum: usize = self.counter.values().sum();
            c as f64 / sum as f64
        })
    }

    fn exists(&amp;self, word: &amp;str) -&gt; bool {
        self.counter.contains_key(word)
    }
}

fn splits(w: &amp;str) -&gt; impl Iterator&lt;Item = (&amp;str, &amp;str)&gt; + Clone {
    (0..=w.len()).map(move |i| w.split_at(i))
}

pub struct SimpleCorrector {
    data_set: WordDataSet,
}

impl SimpleCorrector {
    pub fn correct(&amp;self, word: &amp;str) -&gt; Option&lt;String&gt; {
        if self.data_set.exists(word) {
            return Some(word.to_string());
        }

        edits(1, word)
            .filter(|e| self.data_set.exists(&amp;e.word))
            .map(|e| {
                (
                    (1 / e.edit_distance) as f64 * self.data_set.prob(&amp;e.word),
                    e.word,
                )
            })
            .max_by(|(p1, _w1), (p2, _w2)| p1.partial_cmp(p2).expect("Tried to compare NAN"))
            .map(|(_p, w)| w)
    }
}

fn edit1(w: &amp;str) -&gt; Stream&lt;String&gt; {
    let pairs = splits(w);
    Gn::new_scoped(move |mut s| {
        //deletes
        for (a, b) in pairs.clone() {
            let delete = format!("{}{}", a, b.get(1..).unwrap_or_default());
            s.yield_(delete);
        }

        for (a, b) in pairs {
            for c in &amp;ASCII_LOWER {
                //replace
                let replace = format!("{}{}{}", a, c, b.get(1..).unwrap_or_default());
                s.yield_(replace);

                //insert
                let insert = format!("{}{}{}", a, c, b);
                s.yield_(insert);
            }
        }

        done!();
    })
}

fn edits(n: usize, word: &amp;str) -&gt; Stream&lt;EditWord&gt; {
    Gn::new_scoped(move |mut s| {
        let mut v = vec![word.to_string()];
        let mut seen = HashSet::new();
        seen.insert(word.to_string());
        for i in 0..n {
            let mut next_list = vec![];
            for word in v {
                for w in edit1(&amp;word) {
                    if !seen.contains(&amp;w) {
                        next_list.push(w.to_string());
                        seen.insert(w.to_string());
                        let edit_word = EditWord::new(w.to_string(), i + 1);
                        s.yield_(edit_word);
                    }
                }
            }
            v = next_list;
        }
        done!();
    })
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_word_prob() {
        let data_set = WordDataSet::from_iter(vec!["A", "B"]);
        assert_eq!(data_set.prob("B"), 0.5)
    }

    #[test]
    fn test_word_split() {
        let word = "abc";
        let word_splits = splits(word).collect::&lt;Vec&lt;_&gt;&gt;();
        assert_eq!(
            word_splits,
            vec![("", "abc"), ("a", "bc"), ("ab", "c"), ("abc", "")]
        )
    }

    #[test]
    fn test_corrector_on_valid_word() {
        let word_list = vec!["ab", "cd"];
        let data_set = WordDataSet::from_iter(word_list);
        let s = SimpleCorrector { data_set };
        let res = s.correct("ab");
        dbg!(res);
    }

    #[test]
    fn test_corrector_on_invalid_word() {
        let test_word = "aa";
        let word_list = vec!["ab", "cd"];
        let data_set = WordDataSet::from_iter(word_list);
        let s = SimpleCorrector { data_set };
        let res = s.correct(test_word);
        assert_eq!(res.as_deref(), Some("ab"));
    }
}
</code></pre>
    </div>