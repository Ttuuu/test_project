<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The sort algorithms themselves look excellent. Minor issues include:</p>

<ul>
<li>sometimes not using the most succinct notation (use <code>--i;</code> instead of <code>i = i - 1;</code>)</li>
<li>a few variables declared in too wide a scope (always declare your variables for the smallest possible scope)</li>
<li>cryptic variable names (variable names should be meaningful except possibly for loop indexes)</li>
<li>indentation (please use your editor's automatic indent)</li>
<li>use <code>memcpy()</code> instead of copying lists an item at a time (the compiler may be smart enough to do this for you)</li>
<li><code>class heap</code> should probably be <code>struct heap</code></li>
</ul>

<p>You mention your suspicion that the repeated code is a code smell. It is. There's a clue earlier: Numeric suffixes on variable names is also a code smell, but it suggests that it should be an array. How about this:</p>

<pre><code>struct sortStatistics
{
    void * sortRoutine(int list[], int size);
    int threshold;
    double timeList[npoints];
    int * rlist;
    double temp_timer;
};
</code></pre>

<p>Then initialize it like so:</p>

<pre><code>sortStatistics algorithmArray[] =
{
     { merge_sort, 100000 }
    ,{ heap_sort, 100000 }
    ,{ quick_sort, 100000 }
    ,{ bubble_sort, 500 }
    ,{ insertion_sort, 500 }
} 

int numAlgorithms = sizeof(algorithmArray)/sizeof(sortStatistics);
</code></pre>

<p>So that way, your main loop is fully scalable:</p>

<pre><code>    // initialize rlist for each algorithm
    for (int alg=0; alg&lt;numAlgorithms; alg++)
    {
        algorithmArray[alg].rlist = new int[nPointsMax];
    }
    for(int j = 0; j&lt; nave; j++)
    {
        //generate random array
        for(int ii=0;ii&lt;npointsi;ii++)
        {
            algorithmArray[0].rlist[ii]=rand() % 1000;
        }

        //copy random array to each sort routine
        for (int alg=1; alg &lt; numAlgorithms; alg++)
        {
            memcpy(algorithmArray[alg].rlist,algorithmArray[0].rlist;npoints*sizeof(int));
        }

        // perform tests on each algorithm
        for (sortStatistics sa : algorithmArray)
        {
           if (npointsi &lt;= sa.threshold)
           {
               t1 = std::chrono::high_resolution_clock::now();
               sa.sortRoutine(sa.rlist,npointsi);
               t2 = std::chrono::high_resolution_clock::now();
               time = std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(t2-t1).count();
               sa.temp_timer += time;
           }
        }

        for (sortStatistics sa : algorithmArray)
        {
            sa.timelist[j] = temp_timer / nave;
            sa.temp_timer = 0;
        }
    }
</code></pre>

<p>I bet you can figure out how to write out the file.</p>
    </div>