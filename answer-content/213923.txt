<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General improvements</h1>

<h2>Names</h2>

<p>C++ member and variable declarations don't tell you the type of an object; they tell you what operations on it are legal.  Prefer <code>Block *newBlock</code> (object dereferenceable to value of type <code>Block</code>) to <code>Block* newBlock</code>; the latter will only confuse you.  </p>

<p>Tradition is to use all lowercase and separate words with underscores, but your naming convention is fine too.  </p>

<h2>Do you really mean "table"?</h2>

<p>Technically, what you've written here is not a table, but closer to a <em>jagged array</em>.  You have no compile-time constraints forcing the members of each row to be of the same length, so you could have a table looking like this:
<img src="https://www.baeldung.com/wp-content/uploads/2018/06/JaggedArray1.png" alt='A jagged array named &lt;code&gt;jaggedArr&lt;/code&gt;, pointing to three memory blocks label "0", "1", and "2", each themselves pointing to memory blocks labeled "1" and "2"; "3", "4", and "5"; and "6", "7", "8", and "9" (respectively).'></p>

<p>This image was pulled off the internet; the naming convention doesn't quite match your code.</p>

<p>Do you mean that to be the case?  </p>

<p>It's not just the varying row lengths that's strange.  Because each row is a <code>map</code> to the <em>values</em> of each block, the idea of each block having a fixed index is wrong.  In short, make sure your data structure matches your mental image of it.  </p>

<p>Finally, if you do want each block to have a fixed index and you want a rectangular table, I wouldn't bother with an intermediate data type <code>RowBlock</code>.  Instead, I would just have <code>BlockTable</code> manage the row/column distinction directly.  This also allows you to <em>flatten</em> your table, if performance demands: instead of <code>n</code> different rows of length <code>n</code>, you have a single array of length <code>n*n</code>.  What consumers of your class call the <code>(r,c)</code>th element is then internally at index <code>n*r+c</code>.  This reduces memory fragmentation.  I'm not going to flatten your tables for you, but it is something to consider.  </p>

<h2>Memory management</h2>

<blockquote>
  <p>I know it is not a C++ thing to play around with pointers but rather use const references, but again this is part of a bigger problem that we are trying to solve.</p>
</blockquote>

<p>No!  The important thing is to be aware of the lifetime of your memory and ensure that your code architecture manages it correctly.  If you need mutable references, or just to allow <code>nullptr</code> sentinels, then pointers are the way to go.  </p>

<p>Better still are the stdlib's <em>smart pointers</em>; choose <code>std::unique_ptr</code> or <code>std::shared_ptr</code> as appropriate.  </p>

<p>A usual way to handle this is to assume that the lifetime of each block and row should be the lifetime of the enclosing row and table, respectively.  If a consumer wants to preserve data beyond that time, they'll need to copy or <code>swap</code> it away.  </p>

<p>For example, you have lines like this: </p>

<pre><code>const std::map&lt;int, Block*&gt; getList();
</code></pre>

<p><em>Never</em> return large objects (like <code>std::map</code>) by value, if you can avoid it.  </p>

<pre><code>const std::map&lt;int, Block*&gt; &amp;getList() const;
</code></pre>

<p>is better (and const-correct).  </p>

<h2>RAII</h2>

<p>It should be hard to create your objects without initializing them.  (Ideally, it should be <em>impossible</em>, but for some of your objects,  induces undue performance limitations, so you'll have to trust your coworkers.)  This means you should support brace-initializion and swapping objects, so you don't need to create them twice.  For example, <code>BlockTable</code> should have lines looking something like this:</p>

<pre><code>public:
    BlockTable() = default;
    BlockTable(std::initializer_list&lt;std::pair&lt;int,RowBlock&gt;&gt; &amp;&amp;elems) : 
        m_BlockTable(elems)
    {}
    template&lt;typename T&gt;
    BlockTable(T start, T end) :
        m_BlockTable(start, end)
    {}
    friend std::swap&lt;BlockTable&gt;(BlockTable &amp;&amp;left, BlockTable &amp;&amp;right);
</code></pre>

<p>If you manage memory properly, using smart pointers, etc., your destructors should be trivial.  The long and complex ones you've written are a code smell.  </p>

<h2>Const-correctness</h2>

<p>Your classes offer almost no support for const-correctness.  Make sure to mark procedures that do not mutate as such!  A consumer of your class who cares about const-correctness will have fits if you don't.  </p>

<h2>ABI?</h2>

<p>You may want variants of these classes for different sizes of integers, i.e. <code>long long int</code>, <code>short int</code>.  The easy way to do this uses templates, but then compile-time constraints can be hidden by typos, and you do not have a consistent binary layout across compilers.  I'm going to assume that you specialized to <code>int</code> on purpose; the templated version is not much more than a find-and-replace if done correctly.  </p>

<h2>Synchronization</h2>

<p>C++ is no longer a single-threaded language, but most code is still written that way.  I assume you externally synchronize any accesses to <code>BlockTable</code> objects in multithreaded contexts, in which case there is no problem.  </p>

<h2>I/O</h2>

<p>C-style I/O (i.e. <code>printf</code>) has been superseded by <code>&lt;iostream&gt;</code>.  Prefer that, but if you aren't taking user input or writing anything complicated out, it doesn't matter too much.  </p>

<h2>MWE</h2>

<p>You forgot to define <code>Block::setvalue</code>.  Did you mean</p>

<pre><code>void Block::setvalue(int value)
{
    m_value=value;
}
</code></pre>

<p>perchance?  This also shows that your test suite (which appears to be <code>main</code>) is woefully incomplete.  Make sure the data structure behaves sanely with regard to inserted, non-random values! </p>

<h2>Other stylistic tips</h2>

<p><code>auto</code> is your friend.  Use it.  </p>

<p>The <a href="https://en.cppreference.com/w/cpp/language/range-for" rel="nofollow noreferrer">range-based for</a> is your friend too.  Use that.  </p>

<p>If you have to manipulate iterators by hand, prefer <code>++iter</code>.  <code>iter++</code> requires the iterator to spend a lot of effort copying itself, only for the old version to get promptly thrown away.  </p>

<h1>Specific rewriting</h1>

<p>I don't understand the exact purpose of your data structure; the <code>map</code>s don't seem to do what your documentation in the question describes.  So I can't tell you how to make <code>main</code> more informative.  But <em>even without understanding the most important semantics of your code</em>, I can tell you that, if you can add a few constructors and automatic memory management to your data structures so that the following mechanical rewriting of <code>main</code> is correct, your code will be better.  </p>

<pre><code>void main()
{
    BlockTable newBlockTable;
    for (auto const i : {1, 2, 3, 4, 5})
    {
        newBlockTable.insertBlockRow(Block(i * 10));
        //or better:
        //newBlockTable.insertBlockRow({i * 10});
        //or maybe even:
        //newBlockTable.insertBlockRow(i * 10);
    }
    //or best of all:
    //BlockTable const newBlockTable{10, 20, 30, 40, 50};

    //The names of your variables were too uninformative; I've changed them
    auto const &amp;row_map{newBlockTable.getList()}; //No need for complicated iterator types!  
    for (auto const &amp;key_and_row : row_map)
    {
        auto const &amp;block_map{key_and_row.second-&gt;getList()};
        for (auto const &amp;key_and_block : block_map)
            printf("%d\n", key_and_block.second-&gt;getvalue());
    }
    //If you aren't going to return anything but success, don't bother returning a value.  
}
</code></pre>
    </div>