<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Do you have any constraints?</p>

<ul>
<li>Is your example wrong? I would expected <code>lloHe</code></li>
<li>If you are concerned of modifying your method parameters make them <code>final</code>. Copy it to local variables and don't change the variables is kind of useless.</li>
<li>Don't use short variables names (exception: the loop counter)</li>
<li>If you use <code>Integer</code> instead of <code>int</code>, you should handle <code>null</code></li>
<li>Maybe a simple <code>static</code> utility method would be fine here, except you have some inheritance scenario in mind.</li>
<li>Maybe you should also indicate that you are shifting left for positive numbers</li>
<li>You should take the length of you string for the <code>char</code>.</li>
</ul>

<p>Assuming your example is wrong, what about:</p>

<pre><code>import java.util.Objects;
import javax.annotation.Nonnull;

public final class Shift
{
    @Nonnull
    public static String left( @Nonnull final String string, final int shift )
    {
        final int length = string.length();
        if( length == 0 ) return "";
        final int offset = ((shift % length) + length) % length; // get a positive offset

        return string.substring( offset, length ) + string.substring( 0, offset );
    }

    public static void main( String... args )
    {
        assertEquals( "loHel", Shift.left( "Hello", -2 ) );
        assertEquals( "oHell", Shift.left( "Hello", -1 ) );
        assertEquals( "Hello", Shift.left( "Hello", 0 ) );
        assertEquals( "elloH", Shift.left( "Hello", 1 ) );
        assertEquals( "lloHe", Shift.left( "Hello", 2 ) );
        assertEquals( "loHel", Shift.left( "Hello", 3 ) );
        assertEquals( "oHell", Shift.left( "Hello", 4 ) );
        assertEquals( "Hello", Shift.left( "Hello", 5 ) );
        assertEquals( "elloH", Shift.left( "Hello", 6 ) );
        assertEquals( "", Shift.left( "", 3 ) );
    }

    private static void assertEquals( String expected, String actual )
    {
        if( !Objects.equals( expected, actual ) ) throw new AssertionError( "Expected: &gt;" + expected + "&lt; was: &gt;" + actual + "&lt;" );
    }
}
</code></pre>
    </div>