<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Pick your framework</h2>
<p>You're learning new stuff, so your style will develop as you progress.  While the code is still fresh, try to refactor as you go, so that the code moves towards a consistent style.  If you want to move towards FluentAssertions, then try to use it for all of your assertions.  Rather than this:</p>
<blockquote>
<pre><code>// Fluent Assertions
accountExpected.Should().BeEquivalentTo(_bankAccount);

// Default (Without Fluent Assertions)
Assert.Equal(accountExpected.Balance, _bankAccount.Balance);
</code></pre>
</blockquote>
<p>Anybody moving into the code base will need to learn <strong>all</strong> for the frameworks that are used, so if you can standardise on them then it will mean there's a lower barrier to entry.</p>
<h2>The 3As</h2>
<p>Arrange, Act, Assert breaks the test into three sections.</p>
<ul>
<li>Arrange - Prepare/Setup for the test</li>
<li>Act - Typically invoke the method on the test</li>
<li>Assert - Validate the expected results</li>
</ul>
<p>I typically don't include AAA comments in my tests because if the tests are small it's usually fairly obvious which bit is which and sometimes I'll merge sections together for conciseness, i.e. Act and Assert:</p>
<pre><code>Assert.Throws&lt;ArgumentException&gt;(() =&gt; new BankAccount(bankAccountNo, balance));
</code></pre>
<p>Since you are adding comments, try to keep them up to date, so that they match what the test is doing.  If you don't, it can be create confusion in code reviews (do you not know what is in each stage, or has the code progressed and the comment not been moved) and for new developers who may follow the approach.  So, for example this:</p>
<blockquote>
<pre><code>[Fact]
public void BankAccountConstructorInvalidBalanceShouldFail()
{
    // Act
    var bankAccountNo = new Random().Next();
    var balance = -1;
    BankAccount TestCode() =&gt; new BankAccount(bankAccountNo, balance);
</code></pre>
</blockquote>
<p>Is really all Arrange, not Act.  The code isn't actually invoked until the AssertThrows executes.</p>
<h2>Remove Dead code</h2>
<p>Code that's commented out causes noise and makes the code more difficult to follow, use source control to track previous versions of files and delete code when it's not required rather than comment it out.</p>
<blockquote>
<pre><code>// Assert
//Assert.True(accountExpected.Equals(_bankAccount)); 
// Doesn't work due to object needs to be serialized first before compare.
</code></pre>
</blockquote>
<p>In the middle of a test, does this mean that the code doesn't work as expected?  If so, do you really want the test to be Green?  It feels wrong...</p>
<h2>Copy and paste</h2>
<p>Some of your exception code looks like it's been copy and pasted and as a consequence you've got what looks like an error:</p>
<blockquote>
<pre><code>if (bankTransaction.TransactionAmount &lt;= 0)
{
    throw new ArgumentException("Deposit failed. Transaction amount is more than account balance.");
}
</code></pre>
</blockquote>
<p>This is really "Transaction amount must be positive", not "Transaction amount is more than account balance"...</p>
<h2>(Null &amp;&amp; !Null) || (!Null &amp;&amp; Null) != (Null || Null)</h2>
<blockquote>
<pre><code>if( (startDate == null &amp;&amp; endDate != null) 
 || (startDate != null &amp;&amp; endDate == null))
{
    throw new ArgumentNullException("Start date or end date should not be null");
}
</code></pre>
</blockquote>
<p>If one of <code>startDate</code> or <code>endDate</code> is null, the argument exception triggers.  However, if they are both null it doesn't.  Again, this feels like a bug...  Consider what you're actually trying to test here, is it just that one of the values is null, or something else...</p>
    </div>