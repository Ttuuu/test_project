<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You don't use any method which is specific to <code>List&lt;T&gt;</code>. You should always code against interfaces if possible, meaning you should use <code>IList&lt;T&gt;</code> instead of <code>List&lt;T&gt;</code>.  </li>
<li>If <code>Retrieved</code> is called very often in a short time it is likely that you get the same <code>object</code> each time. This is because <code>Random</code> when <a href="https://docs.microsoft.com/en-us/dotnet/api/system.random?view=netframework-4.8#instantiating-the-random-number-generator" rel="nofollow noreferrer">instantiated</a> will use the system clock to provide a seed value. You should have one <code>Random</code> object as a class-level field which should be instantiated in the constructor or directly.  </li>
<li>The genericness of the method <code>Add&lt;T&gt;</code> doesn't buy you anything. A simple <code>Add(object)</code> would be enough and does the exact same.  </li>
<li><code>objects</code> should be made <code>readonly</code> because you don't change it.  </li>
<li>For <code>Retrieve</code> and <code>Remove</code> I wouldn't introduce the <code>numberObjects</code> variable but if you want to keep it you should rename it to e.g <code>numberOfObjects</code>.  </li>
</ul>

<p>Implementing the mentioned points would look like this:  </p>

<pre><code>public class Sack
{
    private readonly IList&lt;object&gt; objects = new List&lt;object&gt;();
    private readonly Random rand = new Random();

    public void Add(object obj)
    {
        objects.Add(obj);
    }

    public object Retrieve()
    {
        int selectedIndex = rand.Next(0, objects.Count);

        return objects[selectedIndex];
    }

    public object Remove()
    {
        int selectedIndex = rand.Next(0, objects.Count);

        object selectedObject = objects[selectedIndex];
        objects.RemoveAt(selectedIndex);

        return selectedObject;
    }

    public void Empty()
    {
        objects.Clear();
    }
}
</code></pre>
    </div>