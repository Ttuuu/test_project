<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, we encounter interface <code>IParse</code>.</p>

<blockquote>
<pre><code>public interface IParse {
    void Parse(string[] txtFile);
    void Add(List&lt;char&gt; map);
}
</code></pre>
</blockquote>

<p>You should use C# conventions.</p>

<ul>
<li>interface name should be a noun or noun phrase <code>IParse</code> -&gt; <code>IParser</code></li>
<li>use a plural name for a variable that represents a sequence of items <code>txtFile</code> -&gt; <code>segments??</code> </li>
<li>use a meaningful name to describe structures <code>map</code> -&gt; <code>??</code> -&gt; doesn't say anything</li>
<li>use the correct types, preferrably interfaces, when dealing with sequences; For instance, <code>IEnumerable</code> to iterate, <code>IList</code> to manipulate.</li>
<li>Note that your interface does not have any state or return values. We are never able to interact with it bi-directionally. Too much encapsulation perhaps?</li>
</ul>

<p>Refactored:</p>

<pre><code>public interface IParser {
    void Parse(IEnumerable&lt;string&gt; segments); // or whatever we are talking about ?
    void Add(IList&lt;char&gt; map); // what is map ?
}
</code></pre>

<p>Let's move on to <code>ParseObstacles</code>.</p>

<p>Your state is public, is this as designed or a code smell? Again, use conventions.</p>

<blockquote>
<pre><code>public Dictionary&lt;char, string&gt; Dict;
public List&lt;Entity&gt; Entities;
</code></pre>
</blockquote>

<pre><code>private IDictionary&lt;char, string&gt; values; // they are values I suppose
private IList&lt;Entity&gt; entities;
</code></pre>

<p>Next, we find method <em>Parse</em>. </p>

<ul>
<li>the signature is already changed by interface implementation</li>
<li>Only use <code>i</code> as an index in an iterator</li>
<li>perform <code>i.Split(')')</code> once</li>
<li><code>Dict</code> is already renamed previously</li>
</ul>

<blockquote>
<pre><code>public void Parse(string[] txtFile) {
    foreach (var i in txtFile) {
        if (i.Contains(")")) {
            var tile = i.Split(')')[0].ToCharArray()[0];
            var name = i.Split(')')[1].Trim();
            Dict.Add(tile, name);
        }
    }
}
</code></pre>
</blockquote>

<p>After changing the method:</p>

<pre><code> public void Parse(IEnumerable&lt;string&gt; segments) {
      foreach (var segment in segments) {
          if (segment.Contains(")")) {
              var tokens = segment.Split(')');
              var tile = tokens[0].ToCharArray()[0];
              var name = tokens[1].Trim();
              values.Add(tile, name);
          }
      }
 }
</code></pre>

<p>Next up, method <code>Add</code>. This is a black-box for us. Consider the fact <code>ParseHelper</code> adds cyclomatic complexity to your API. Perhaps its code should be divided into the other classes.</p>

<blockquote>
<pre><code>public void Add(List&lt;char&gt; map) {
     ParseHelper.AddEntities(map, Dict, Entities);
}
</code></pre>
</blockquote>

<pre><code>public void Add(IList&lt;char&gt; map) {
       // not convinced about ParseHelper ..
       ParseHelper.AddEntities(map, values, entities);
}
</code></pre>

<p>And finally, <code>ParserFacade</code>.</p>

<p>Let's have a look at the singleton. </p>

<ul>
<li>A private constructor, well done. </li>
<li>A nested static class holding the singleton, <a href="https://csharpindepth.com/articles/singleton" rel="nofollow noreferrer">good design</a>. </li>
<li>all caps -&gt; take it easy: <code>INSTANCE</code> -&gt; <code>Instance</code> </li>
<li>a getter method is best substituted with a property getter: <code>getInstance()</code> -&gt; <code>Instance</code></li>
</ul>

<blockquote>
<pre><code>private ParserFacade() { }

private static class ParserFacadeHolder {
    public static readonly ParserFacade INSTANCE = new ParserFacade();
}

public static ParserFacade getInstance() {
    return ParserFacadeHolder.INSTANCE;
}
</code></pre>
</blockquote>

<p>After changes:</p>

<pre><code>private static class ParserFacadeHolder {
    public static readonly ParserFacade Instance = new ParserFacade();
}

public static ParserFacade Instance =&gt; ParserFacadeHolder.Instance;
</code></pre>

<p>I don't like this helper class, but I did expect it to be static. Here you used an instance.</p>

<blockquote>
  <p><code>private ParseHelper parseHelper;</code></p>
</blockquote>

<p>Public state detected. Code smell?</p>

<blockquote>
<pre><code> public ParseExits exits;
 public ParseObstacles obstacles;
 public ParsePlatforms platforms;
 public ParseCustomers customers;
</code></pre>
</blockquote>

<p>Method <code>StartParse</code>:</p>

<p>What bothers me here is the inconsistent and convoluted design of parsing behavior. <code>ParseExits</code> (and sibling classes) can parse the file. But then the facade calls the infamous helper to parse additional data, to then forward this data to <code>ParseExits</code>. This design is too complex in behavioral complexity.</p>

<blockquote>
<pre><code> exits = new ParseExits();
 exits.Parse(file);
 exits.Add(ParseHelper.GetAllTiles(file));
</code></pre>
</blockquote>
    </div>