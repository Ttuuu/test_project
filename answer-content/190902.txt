<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Canvas &amp;&amp; tile maps</h1>

<p>First drop the jQuery you dont need it and it will just slow everything down.</p>

<h3>Canvas</h3>

<p>Displaying the map is much better done via a canvas. Each canvas pixel does not need an interface and can be a million (no exaggeration) times faster than a DOM element and use a tiny fraction of the memory.</p>

<p>Though you lose the functionality of a DOM element it is very easy to implement the basic needs using the canvas.</p>

<p>The canvas is a very powerful rendering surface. The 2D context is fully hardware accelerated and can do full screen 2D games at 60fps on average machines and on good machines it just awesome. It can also do 3D via webGL or as a hybrid 2D context and webGL working together.</p>

<p>Avoiding the DOM by using the canvas makes many apps fly and is the best bet for game / graphic intensive applications.</p>

<h3>Tile map</h3>

<p>This type of linear map map is best as an simple array (Tile map). It saves space, access is far quicker (including neighbours), and things like coordinates can be computed from the index.</p>

<p>Each element of the tile map holds the index into the terrain type. The world description object map holds an array of terrain type descriptions. To get the details for a tile you get the map item and use that as an index into the terrain description array.</p>

<p>eg if the world is 50 by 50 tiles and <code>world.map</code> is the tile map array. To get a terrain description for a tile</p>

<pre><code>   function getTerrainDesc(x,y){
       const index = x + y * 50; // get the array index
       const terrainType = world.map[index]
       return world.terrainDesc[terrainType];
   }
   // see example for better examples of using a tile map.
</code></pre>

<h3>Example</h3>

<p>I have done a very quick rewrite of your map generator using some patterns you may not be comfortable with. Take it as an example only and use what you want, it is not the only way to do this type of thing. </p>

<p>I have provide various links in the code to MDN in regard to JS language features you may not know about. MDN is a good reference for all things browser and worth having a bookmark to.</p>

<p>The example generates a map using the same logic you used. The additional calls to <code>createCanvas</code> and <code>drawWorld</code> are needed. </p>

<p>You can define many worlds each with a different set of terrains and set ups. The example only uses one named <code>world</code> Click on the map to regenerate a new one (it uses the old map so not a completely new map)</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// replacement for jQuery ready event
addEventListener("load",() =&gt; {
    world.container = document.querySelector(".world");  // get container
    createCanvas(world);
    genesis(world);
    terraform(world);
    drawWorld(world);
    world.canvas.addEventListener("click", () =&gt; {
       // comment the following to clear the world before regeneration.
       // world.map.fill(0);
       terraform(world);
       drawWorld(world);
    
    })

});

// some functionality for a cell
// const declaration see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const
const cell = {
    draw(x, y) { // x,y is map coord
        this.world.ctx.fillStyle = this.color;
        this.world.ctx.fillRect(x * this.width, y * this.height, this.width, this.height);
    }
}


// the ... is a spread operator link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
// set defaults for terrain types.
const terrains = {
    empty : {
        id : 0,  // type arrays are set to zero when created. This is the default cell type.
        odds : 0, 
        addedOdds : 0,
        color : "#fff",
        ...cell,
    },
    river : {
        id : 1,  // 
        odds : 1,  // default odds for the terrain 
        addedOdds : 2,  // additional odds if cell has river neighbour
        color : "#29b6f6",
        ...cell,     // add the default functions for this cell.
    },
    forest : {
        id : 2,
        odds : 2, 
        addedOdds : 4,
        color : "#1b5e20",
        ...cell,        
    },
    plain : {
        id : 3,
        odds : 3, 
        addedOdds : 4,
        color : "#66bb6a",
        ...cell,        
    },
    desert : {
        id : 4,
        odds : 1, 
        addedOdds : 4,
        color : "#ffee58",
        ...cell,        
    },
    mountain : {
        id : 5,
        odds : 1, 
        addedOdds : 4,
        color : "#b0bec5",
        ...cell,        
    },
}



const world = {          
    cells : { 
        width : 100,
        height : 100,
    },
    cell : {
        width : 5,
        height : 5,
    },
    terrains : "river,forest,plain,desert,mountain".split(","), // terrains to use with this world
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
Object.assign(world, { // using assign so that we can access the variable world
    terrainDesc : [
        {...terrains.empty }, // first one must always be empty
        // Now add the terrain types you want for this map
        ...world.terrains.map((name, i) =&gt; {
            return {
                ...terrains[name],   // make a copy of the terrain description
                id : i + 1,   // add custom details for this world
                ...world.cell, // add cell width and height for this world
                world,        // add a reference to the world so terrains can get details if needed
            }; 
        }),
    ],
});



function genesis(world) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array
    world.map = new Uint8Array(world.cells.width * world.cells.height);
}
function createCanvas(world){
    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D
    var canvas = document.createElement("canvas");
    canvas.width = world.cells.width * world.cell.width;
    canvas.height = world.cells.height * world.cell.height;
    canvas.ctx = canvas.getContext("2d");
    world.canvas = canvas;
    world.ctx = canvas.ctx;
    world.container.appendChild(canvas);
}
const selectTerrain = (() =&gt; {  // As a singleton. 
                                // This encasulates the functionality 
                                // so you dont polute the global scope.
    const tSelect = [];
    var tSelectBaseCount = 0;
    var neighbours, world, map, w, h;
    return { // the selectTerrain object 
        // next is a setter see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set
        set world(worldDesc) { 
            world = worldDesc;
            map = world.map;
            w = world.cells.width;
            h = world.cells.height;
            neighbours = [ // pre calculate neighbour coord and map array offet
                {x : -1, y : -1, offset : -w-1},
                {x :  0, y : -1, offset : -w},
                {x :  1, y : -1, offset : -w+1},
                {x : -1, y :  0, offset : -1},
                {x :  1, y :  0, offset :  1},
                {x : -1, y :  1, offset : w-1},
                {x :  0, y :  1, offset : w},
                {x :  1, y :  1, offset : w+1},
            ];
            tSelect.length = 0;
            tSelectBaseCount = 0;
            for (let i = 0; i &lt; world.terrainDesc.length; i ++) {
                var odds = world.terrainDesc[i].odds;
                while(odds-- ){ tSelect.push(i) }
            }
            tSelectBaseCount = tSelect.length;
        },
        select(index) {
            const x = index % w;
            const y = index / w | 0; // the | 0 (bitwize OR 0 is the same as
                                     // Math.floor( ONLY use for positive numbers))
            var count = tSelectBaseCount;
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of
            for (const n of neighbours) { // n as n and prefix for neighbour
                if (x + n.x &gt;= 0 &amp;&amp; y + n.y &gt;= 0 &amp;&amp; x + n.x &lt; w &amp;&amp; y + n.y &lt; h) {
                    var nType = map[index + n.offset];
                    var addOdds = world.terrainDesc[nType].addedOdds
                    while (addOdds--) { tSelect[count ++] = nType }
                }
            }
            map[index] = tSelect[Math.random() * count | 0]; // the | 0 (bitwize OR 0 is the
                                                             // same as Math.floor( 
                                                             // ONLY use for positive numbers))
        }
    }
})();

function terraform(world) {
    var i = 0;
    selectTerrain.world = world; // set up terrain selector
    while (i &lt; world.map.length) { selectTerrain.select(i++) }
}

function drawWorld(world) {
    var ctx = world.ctx; // get the 2D render context
    ctx.clearRect(0, 0, world.canvas.width, world.canvas.height);
    var index = 0;
    var width = world.cells.width;
    var cellW = world.cell.width;
    var cellH = world.cell.width;
    while (index &lt; world.map.length) {
        const terrainType = world.map[index];
        world.terrainDesc[terrainType]
           .draw(index % width | 0, (index++) / width | 0);
    }
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.world {
    position: absolute;


    border: solid #a1a1a1 3px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="world"&gt;&lt;/div&gt;</code></pre>
</div>
</div>

    </div>