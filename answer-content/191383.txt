<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I never found a code that was simple and easy to understand yet wasn't any slower  </p>
</blockquote>

<p>Note the order. Start <em>readable</em>.<br>
Start with <em>What shall this be good for?</em>: <a href="http://www.doxygen.nl/manual/docblocks.html" rel="nofollow noreferrer">(doc)comment</a> your code.  </p>

<p>No slower than <em>what</em>? A "well known implementation" for reference and as a base-line would be useful.</p>

<p>Things I liked:</p>

<ul>
<li>"non-obvious" code blocks are commented<br>
(<code>short-circuit set-up</code>, <code>negative numbers sort</code>)</li>
<li>trying to keep the number of passes low</li>
<li>handling of negative numbers via histogram instead of value manipulation</li>
</ul>

<p>Dislikes (beyond missing doc comments):</p>

<ul>
<li>not declaring the size parameter <code>const N</code><br>
this would at least hint that the memory pointed to by <code>A</code> and <code>Temp</code> may be modified</li>
<li>naming<br>
while I like <code>i</code> for <em>index without further significance</em>, I prefer <code>p</code> for a pointer<br>
What is the significance of <code>Z</code> in <code>Z1…4</code>?<br>
case:<br>
assuming capital case OK for arrays: why <code>N</code>, <code>T</code>, <code>Jump1…4</code>?</li>
<li>naked literals (beyond 0±1)</li>
<li>repetition<br>
starting with types: have a value type, a histogram type<br>
with "the rearrangement blocks", I'd prefer benchmark/machine code comparisons between  </li>
<li>zeroing memory with open code - use <code>memset(destination, 0, count)</code></li>
<li>"empty then" instead of inverting the condition</li>
<li><code>*(p+e)</code> instead of <code>p[e]</code> (let alone <code>*(e+p)</code>) - without revisiting the standard, I would have denied this was well defined.)</li>
<li>updating a counter using increment/decrement<br>
I think of those operations as <em>next/previous</em> and use <code>+= 1</code>(<code>-= 1</code>) for numerical adjustment  </li>
<li>not using an explicit variable (histogram handling, mostly)</li>
<li>re. <em>speed</em>: not special-casing "small" arrays</li>
</ul>

<p>Things I don't want to presume warranted:</p>

<ul>
<li>bit operations preferred to <code>ldiv_t ldiv()</code></li>
<li>bit operations using compile time constants over using parameters (would allow factoring out)  </li>
<li>"walking memory backwards" as fast as "forwards"</li>
</ul>
    </div>