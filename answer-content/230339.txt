<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Confusing documentation and lack of consistency</strong></p>

<pre><code>def check_value(self):
    '''
    Change self.value
    Doesnt return any value
    '''
    ace = self.aces
    self.value = 0

    for i in range(len(self.cards)):
        self.value += self.cards[i].value

        while self.value &gt; 21 and ace &gt; 0:
            self.value -= 10
            ace -= 1

    if self.value &gt; 21:
        self.isBusted = True

    return self.value

def check_aces(self):
    '''
    Check if 'A' in Hand 
    '''
    self.aces = 0

    for i in range(len(self.cards)):
        if self.cards[i].figure == 'A':
            self.aces += 1
</code></pre>

<p>In <code>check value</code> you say "Doesn't return any value" but it clerly has a return statement inside. It is important that code and comments never contradict each other. In your code you do not use the return value as far as I can see so this is confusing</p>

<p>In <code>check_aces</code> instead no value is returned but the name is very similar to the function above where something is returned.</p>

<p>You should try to keep consistent language between your methods.</p>

<p><strong>Built-in count and list comprehension</strong></p>

<p>You say <code>Check if 'A' in Hand</code> but you do not use the <code>in</code> keyword!</p>

<p>This way is much simpler:</p>

<pre><code>figures = [card.figure for card in self.cards]
self.aces = figures.count('A')
</code></pre>

<p><strong><code>restart</code></strong></p>

<p>Conceptually I feel like     </p>

<pre><code>def restart(self):
    self.deck = [Card(suit, figure) for suit in SUITS for figure in FIGURES]
</code></pre>

<p>should shuffle the deck, you cannot restart with all the cards in order.</p>

<p><strong>"Native" iteration</strong></p>

<pre><code>    for i in range(len(self.cards)):
        self.value += self.cards[i].value
</code></pre>

<p>Becomes:</p>

<pre><code>for card in self.cards:
    self.value += card.value
</code></pre>

<p>Much cleaner.</p>

<p>This page is good to learn python built-in methods for clean looping <a href="https://www.datadependence.com/2016/02/pythonic-for-loops/" rel="noreferrer">https://www.datadependence.com/2016/02/pythonic-for-loops/</a></p>

<p><strong>Potential debug problems</strong></p>

<pre><code>    while True:
        try:
            bet = int(input('Tell me your bet (should be lower or equal then your money)'))
        except:
            continue
</code></pre>

<p>Always specify which exception to except otherwise this suppresses all kinds of errors and can make debugging inconvenient.</p>

<p><strong>minor</strong></p>

<pre><code>def check_money(self):
    self.play = self.money &gt; self.min_bet
</code></pre>

<p><strong>Good</strong></p>

<p>I see you separated logic and input/output handling, this is very good.</p>
    </div>