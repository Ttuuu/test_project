<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based on the comments i updated the function, i feel more comfortable with it, changes:</p>

<ul>
<li>Removed unused macros.</li>
<li>Macro to init the ctx struct (INIT_CTX).</li>
<li>ctx_get_ip returns false on invalid data input, true otherwise.</li>
<li>Replaced the for loop that iterated all the possible ctx id with a while loop that iterate the qiact_reply input until is invalid.</li>
<li>Validation of the ctx_id found on the qiact_reply input.</li>
</ul>

<p>What do you think?</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;
#include &lt;string.h&gt;
#include &lt;stdbool.h&gt;

#define IS_CTX_ACTIVE(x)        ((*(x + 1)) == '1')
#define IS_VALID_CTX_ID(x)      ((CTX_ID_RANGE_MIN &lt;= x) &amp;&amp; (CTX_ID_RANGE_MAX &gt;= x))
#define INT_TO_ASCII(x)         (x + '0')
#define GET_CTX_STATE(x)        (*(x + 1))

struct ctx {
    uint8_t ip[4];
    uint8_t id;
    bool    is_active;
};

/**
 * The AT+QIACT? command will reply the list of the current activated context
 * and its IP address.
 *
 * Reply format: +QIACT: &lt;ctx_id&gt;,&lt;ctx_state&gt;,1,&lt;ip_address&gt;
 *
 * This function parses that reply (qiact_reply), look for the specified ctx_id
 * and verify if it's active, if so it will get the ip address and set the
 * is_active member to true.
 *
 * @return false is case of any invalid data, true otherwise.
 *
 * Examples qiact_reply data:
 * +QIACT: 1,1,1,\"10.162.143.228\"\r\n\r\nOK\r\n
 * +QIACT: 1,1,1,\"10.184.110.91\"\r\r\n+QIACT: 2,1,1,\"10.184.110.91\"\r\n\r\nOK\r\n
 */
static bool ctx_get_ip(const char *qiact_reply, struct ctx *ctx)
{
    bool result = false;

    if (!IS_VALID_CTX_ID(ctx-&gt;id) || (NULL == qiact_reply)) {
        return result;
    }

    const char *cursor = strchr(qiact_reply, '+');

    // iterate @c qiact_reply while @c cursor points to a '+' sign (it's not NULL)
    while (NULL != cursor) {

        // Find the current &lt;ctx_id&gt; field
        char *ctx_id_s = strchr(cursor, ' ');
        char *ctx_id_e = strchr(ctx_id_s, ',');
        ctx_id_s++;

        uint8_t ctx_id = (uint8_t) strtoul(ctx_id_s, &amp;ctx_id_e, 10);

        // Did we found the ctx id we are looking for?
        if ((ctx_id == ctx-&gt;id) &amp;&amp; IS_VALID_CTX_ID(ctx_id)) {
            result = true;
            ctx-&gt;is_active = false;

            // If so, get the &lt;ctx_state&gt;
            char *ctx_state = strchr(cursor, ',');
            if (IS_CTX_ACTIVE(ctx_state)) {
                ctx-&gt;is_active = true;

                // The ctx state is active, let's get the &lt;ip_address&gt;
                char *ip_start = strchr(cursor, '"');
                char *ip_end = strchr(ip_start, '.');
                ip_start++; // point to the digit after '"'

                for (size_t ip_octect = 0; ip_octect &lt; 4; ip_octect++) {
                    ctx-&gt;ip[ip_octect] = (uint8_t) strtoul(ip_start, &amp;ip_end, 10);
                    // Move to the next octect, we are here on the second octect
                    ip_start = ip_end + 1;
                    ip_end = strchr(ip_start, '.');
                }
            }

            break;
        } else {
            // Move to the next '+' symbol
            cursor = strchr(cursor + 1, '+');
            if (NULL == cursor) {
                // We reached the end of @c qiact_reply without finding the
                // ctx id we were looking for, let's exit
                ctx-&gt;is_active = false;
                result = false;
                break;
            }
        }
    }

    return result;
}

#define INIT_CTX(ctx_id)    \
{                           \
    .id = ctx_id,           \
    .ip[0] = 0,             \
    .ip[1] = 0,             \
    .ip[2] = 0,             \
    .ip[3] = 0,             \
    .is_active = false,     \
}

int main(void) {

    struct ctx my_ctx = INIT_CTX(1);

    bool result = ctx_get_ip("+QIACT: 1,1,1,\"10.184.110.91\"\r\r\n"
                             "+QIACT: 16,1,1,\"10.185.110.91\"\r\n\r\nOK\r\n",
                             &amp;my_ctx);

    if (result) {
        if (my_ctx.is_active) {
            printf("ctx %d is activated, ip: %d.%d.%d.%d\r\n", my_ctx.id,
                   my_ctx.ip[0], my_ctx.ip[1], my_ctx.ip[2], my_ctx.ip[3]);
        } else {
            printf("ctx %d is deactivated\r\n", my_ctx.id);
        }
    } else {
        printf("Invalid input\r\n");
    }

    return 0;
}
</code></pre>
    </div>