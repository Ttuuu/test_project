<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A short review;</p>

<ul>
<li>In stacktraces, <code>person</code> will be a nameless function, use <code>function person(){}</code> instead</li>
<li>There is no good reason to have different names (<code>first</code>-&gt;<code>firstName</code>) for your attributes. Using the same name allows you to use some nifty JS syntax</li>
<li>Your code will create a new function for each instance of <code>person</code>, unless you have a smart VM, that could be heavy on memory</li>
<li>I would extend the <code>.prototype</code> of <code>person</code> for <code>fullName</code> to prevent that memory issue</li>
<li>I also strive to name functions with a <code>&lt;verb&gt;&lt;thing&gt;</code> scheme so I would call it <code>getFullName()</code></li>
<li>Ideally functions that are akin to a class are capitalized, so <code>person</code> -&gt; <code>Person</code></li>
</ul>

<p>So, all in all, this is my counter proposal:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>    function Person(firstName, lastName, age, gender){
      Object.assign(this, {firstName, lastName, age, gender});
    }

    Person.prototype.getFullName = function personGetFullName(){
      return this.firstName + " " + this.lastName;
    }

    const John = new Person("John", "Anderson", 21, "Male");
    const Mary = new Person("Mary", "Smith", 32, "Female");
    console.log(John.firstName);
    console.log(Mary.getFullName());</code></pre>
</div>
</div>

    </div>