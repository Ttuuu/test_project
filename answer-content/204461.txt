<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>From my point of view the implementation is free of race condition because the parallel method does not access any shared variables. All its state is in its local variables so is not shared. </p>
</blockquote>

<p>That is not true. The variable <code>aResult</code> is shared between the thread that called <code>parallel</code> and the thread <code>t1</code>. So there needs to be some synchronization between these two threads, otherwise you run into undefined behaviour.</p>

<hr>

<p>This low-level JDK memory model gets tricky, so I would try to avoid it as far as possible, i.e. use higher-level abstractions and prefer immutable state.</p>

<p>I suppose the following (still rather low-level) tools (which would solve these issues) are not available for this exercise:</p>

<ul>
<li>Scala Futures</li>
<li>Java Callables (which return a result instead of having to publish it somewhere)</li>
<li>java.util.concurrent.AtomicReference (which you can use as a thread-safe holder if you have to use <code>Runnable</code> instead of <code>Callable</code>)</li>
</ul>

<hr>

<p>As for the specific question: According to the <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html" rel="nofollow noreferrer">Java Memory Model FAQ</a></p>

<blockquote>
  <p>All actions in a thread happen before any other thread successfully returns from a <code>join()</code> on that thread.</p>
</blockquote>

<p>Meaning that after your master thread has <code>join</code>ed the first worker thread, it <em>will</em> read the updated value of <code>aResult</code> without that field needing to be <code>volatile</code>.</p>

<p>So your code looks correct to me.</p>

<p>But I had to look this up. Really try to avoid mutable state when multiple threads are concerned.</p>
    </div>