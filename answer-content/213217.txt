<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Set your locale globally</h2>

<p>I would recommend doing this in your <code>settings.py</code> file or within a global <code>__init__.py</code> file.</p>

<pre><code>locale.setlocale(locale.LC_TIME, "de")
</code></pre>

<h2>Django template tags allow multiple parameters, use them</h2>

<p>Right now you have a single complex parameter which is being used to store two pieces of information: whether to use a sentence and if only the date should be rendered. Since this is passed in as a single string, you have to use <a href="https://stackoverflow.com/q/715417/359284">the <code>str2bool</code> function from Stack Overflow</a> in order to parse it. You don't need to parse that string if you use separate arguments.</p>

<pre><code>@register.filter
def naturaldaytime(daytime, sentence=False, only_date=False):
    from django.conf import settings

    if daytime is None:
        return daytime
</code></pre>

<h2>Use descriptive variable names in your comparisons</h2>

<p>Right now you have to look into nested calls to understand what comparisons are actually being done. While this still needs to happen, you can make us to intermediate variables which makes it a lot more clear what is happening.</p>

<pre><code>todays_date = datetime.now().date()
yesterdays_date = todays_date - timedelta(days=1)

daytime_week_number = daytime.date().isocalendar()[1]
todays_week_number = todays_date.isocalendar()[1]
</code></pre>

<h2>Construct the format key you need so you can avoid repetition</h2>

<p>Right now you have a complex set of conditional statements that you are using to determine what date format to use. This is resulting in a ton of repetition when it comes to doing the actual formatting, so I would recommend separating the "getting the right format settings" part from the actual "do the formatting".</p>

<pre><code>if not only_date:
    setting_key = "DATETIME_FORMAT"
else:
    setting_key = "DATE_FORMAT"

if daytime.date() == todays_date:
    setting_key += "_TODAY"
elif daytime.date() == yesterdays_date:
    setting_key += "_YESTERDAY"
elif daytime_week_number == todays_week_number:
    setting_key += "_THIS_WEEK"
elif daytime.date().year == todays_date.year:
    setting_key += "_THIS_YEAR"

if sentence:
    setting_key += "_SENTENCE"
</code></pre>

<p>This way you don't need to keep repeating the same logic for every "sentence" or "not only the date" variant, and you can keep settings keys consistent at the same time.</p>

<h2>Get the right date format using that settings key you already built</h2>

<p>This part doesn't change much, except you now need to dynamically retrieve the setting from the <code>settings</code> object.</p>

<pre><code>date_format = getattr(settings, setting_key)

return daytime.strptime(date_format)
</code></pre>
    </div>