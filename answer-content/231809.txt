<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of ideas that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  In this particular case, I happen to think it's perfectly appropriate because it's a single short program that and not a header. Some people seem to think it should never be used under any circumstance, but my view is that it can be used as long as it is done responsibly and with full knowledge of the consequences.  </p>

<h2>Don't <code>#include &lt;bits/stdc++.h&gt;</code></h2>

<p>This is not a standard header and it is poor practice to include a <code>gcc</code> specific header in your program.  See <a href="https://stackoverflow.com/Questions/31816095/Why-Should-I-Not-Include-Bits-Stdc-H.">this question</a> for elaboration on why you should not do that.</p>

<h2>Avoid the use of global variables</h2>

<p>My rewrite of this code uses no global variables, so clearly they are neither faster nor necessary.  Eliminating them allows your code to be more readable and maintainable, both of which are important characteristics of well-written code.  Global variables introduce messy linkages that are difficult to spot and error prone.</p>

<h2>Use <code>iostreams</code></h2>

<p>Using both <code>iostreams</code> and <code>cstdio</code> functions is not really helpful.  It's easy enough and usually cleaner to use only <code>iostreams</code> in modern C++ programs.</p>

<h2>Use <code>constexpr</code> where appropriate</h2>

<p>In this program, the values of <code>first</code>, <code>last</code>, <code>characters</code> and <code>hashval</code> are never altered, so we can easily enable some compiler optimizations by declaring them all <code>constexpr</code>. </p>

<h2>Use a class</h2>

<p>C++ is an object oriented language, and it seems natural for this problem to use an object to represent an array with the given number of characters.  I implemented such a thing and the class header looks like this:</p>

<pre><code>#ifndef REVERSE_HASHER2_H
#define REVERSE_HASHER2_H
#include &lt;iostream&gt;
#include &lt;string&gt;

class ReverseHasher {
public:
    explicit ReverseHasher(char first, char last, char len, int hashval); 
    ReverseHasher&amp; operator++();
    bool isMax() const { return !more; }
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const ReverseHasher&amp; fh);
private:
    bool more{true};
    const char first;
    const char last;
    const char characters;
    std::string values;
};

#endif // REVERSE_HASHER2_H
</code></pre>

<p>As you can see, the constructor is given all of the relevant numbers and contains a single string of <code>values</code> (as per the original code) which contains the hashed string.  I'll show a bit more of how this works a little later.</p>

<h2>Use a better algorithm</h2>

<p>The algorithm used here is much slower than it needs to be and there are several things we could do to speed things up.  First, we can check that the hash is even possible by quickly calculating the minimum and maximum values for the given character range.  If the desired hash is not within that range, there are zero combinations and we're done in microseconds.  Second, we can easily calculate a value that satisfies the hash value.  </p>

<p>For instance, let's say there are <span class="math-container">\$n = 10\$</span> characters and the values range from <span class="math-container">\$a = 0\$</span> to <span class="math-container">\$b = 9\$</span> inclusive.  It's easy to understand that the minimum hash value is <span class="math-container">\$x_{\text{min}} = n * a = 10 * 0 = 0\$</span> and the maximum value would be <span class="math-container">\$x_\text{max} = n * b = 10 * 9 = 90\$</span>.  For any hash value <span class="math-container">\$x\$</span> in that range, we could simply fill <span class="math-container">\$\lfloor \frac{x}{b-a} \rfloor\$</span> characters with <span class="math-container">\$b\$</span> and fill one character with the remainder of that division (if any) and the rest with the minimum value <span class="math-container">\$a\$</span>.  We can embody all of that in a constructor for the class shown above: </p>

<pre><code>ReverseHasher::ReverseHasher(char first, char last, char len, int hashval) : 
    first{first}, last{last}, characters{len}, values(characters, first) 
{
    const int minval{characters * first};
    const int maxval{characters * last};
    const int range{last - first};
    if (hashval &lt; minval) {
        throw std::domain_error("hashvalue too low; no combinations possible\n");
    }
    if (hashval &gt; maxval) {
        throw std::domain_error("hashvalue too high; no combinations possible\n");
    }
    hashval -= minval;
    std::generate(values.rbegin(), values.rend(), [&amp;hashval,first,range](){
        auto digitval = std::min(hashval, range);
        hashval -= digitval;
        return first + digitval;
    });
}
</code></pre>

<p>The effect is that this code either creates a sequence with the given <code>hashval</code> or if that's not possible, it <code>throw</code>s an exception to indicate what's wrong.  </p>

<h2>Increment intelligently</h2>

<p>Rather than simply incrementing values and hoping to eventually encounter a string with the same sum, we can be a lot smarter about incrementing so that we <em>only</em> have valid values.  Conceptually this is not hard.  If we have, for instance a string of three digits, 0-9 that must sum to 11, by the previous point, we can easily come up with a valid value <code>029</code> that sums to that value.  It would be nice if we increment so that the values are in numeric sequence; that is, if the values come out already sorted.  So in this case, the next value would be <code>038</code>.  If you work through this particular example, you'll see that the next values are <code>047</code>, <code>056</code>, <code>065</code>, <code>074</code>, <code>083</code> and <code>092</code>.  The pattern is that we subtract one from the lowest digit and add one to the next digit.  If we always subtract and add the same amounts, it's obvious we will always maintain a valid value.  The algorithm is a bit tricky, but here's how it can be implemented in C++:</p>

<pre><code>ReverseHasher&amp; ReverseHasher::operator++() {
    // from the right, try +1, -1 until it works
    auto it{values.rbegin()};
    auto end{values.rend()};
    auto movable{0};
    for (auto prev{it++}; it != end; ++it) {
        if (*it != last &amp;&amp; *prev != first) {
            ++(*it);
            --(*prev);
            if (movable != 0) { //propagate to the right
                auto debt{movable};
                while (movable &amp;&amp; prev != values.rbegin()) {
                    auto delta{std::min(*prev - first, movable)};
                    *prev -= delta;
                    movable -= delta;
                    --prev;
                }
                debt -= movable;
                for (auto ptr{values.rbegin()}; debt; ++ptr) {
                    auto delta{std::min(last - *ptr, debt)};
                    *ptr += delta;
                    debt -= delta;
                }
            }
            return *this;
        }
        movable += last - *prev;
        prev = it;
    }
    more = false;
    return *this;
}
</code></pre>

<p>Essentially what this does it to keep trying to do the <span class="math-container">\$+1, -1\$</span> on consecutive digits, sliding to the left until it's possible to do that.  But there's another step needed to make sure everything comes out in order.  If we consider that the next step after <code>092</code> in the previous example would be <code>182</code> if we just did the increment in that way.  That's a valid value, but in fact, the next one <em>in sorted order</em> would instead be <code>128</code> so we need to do a little adjustment.  Essentially, as we're looking for a value to increment, each value to the right of that which isn't at the maximum value (<code>last</code> in the code) represents a lower value (numerically sorted).  The code above keeps track of the sum of those residual values in the variable <code>movable</code> and then essentially redistributes that value over the next digits after the incremented one such that the largest digits are to the right and the lowest numbers are to the left, thus insuring that the terms are created in ascending order.</p>

<h2>Putting it all together</h2>

<p>Here's a <code>main</code> function that uses this:</p>

<h3>main.cpp</h3>

<pre><code>#include &lt;iostream&gt;
#include &lt;chrono&gt;
#include "ReverseHasher2.h"

int main() {
    using namespace std;
    using namespace std::chrono;
    auto start = high_resolution_clock::now();
    ios_base::sync_with_stdio(false);
    cerr.imbue(locale(""));  // get pretty local formatting for numeric values
    int count{0};
    for (ReverseHasher fh(32, 32+5, 13, 450); !fh.isMax(); ++fh) {
        ++count;
        std::cout &lt;&lt; fh &lt;&lt; '\n';
    }
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast&lt;milliseconds&gt;(stop - start);
    cerr &lt;&lt; "Found " &lt;&lt; count &lt;&lt; " solutions in " &lt;&lt; double(duration.count()/1000.0) &lt;&lt; " seconds.\r\n";
}
</code></pre>

<p>Here's the full header file:</p>

<h3>ReverseHasher2.h</h3>

<pre><code>#ifndef REVERSE_HASHER2_H
#define REVERSE_HASHER2_H
#include &lt;iostream&gt;
#include &lt;string&gt;

class ReverseHasher {
public:
    explicit ReverseHasher(char first, char last, char len, int hashval); 
    ReverseHasher&amp; operator++();
    bool isMax() const { return !more; }
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const ReverseHasher&amp; fh);
private:
    bool more{true};
    const char first;
    const char last;
    const char characters;
    std::string values;
};

#endif // REVERSE_HASHER2_H
</code></pre>

<p>And finally the full implementation of this, as mostly already listed above:</p>

<h3>ReverseHasher2.cpp</h3>

<pre><code>#include "ReverseHasher2.h"
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;

ReverseHasher::ReverseHasher(char first, char last, char len, int hashval) : 
    first{first}, last{last}, characters{len}, values(characters, first) 
{
    const int minval{characters * first};
    const int maxval{characters * last};
    const int range{last - first};
    if (hashval &lt; minval) {
        throw std::domain_error("hashvalue too low; no combinations possible\n");
    }
    if (hashval &gt; maxval) {
        throw std::domain_error("hashvalue too high; no combinations possible\n");
    }
    hashval -= minval;
    std::generate(values.rbegin(), values.rend(), [&amp;hashval,first,range](){
        auto digitval = std::min(hashval, range);
        hashval -= digitval;
        return first + digitval;
    });
}

ReverseHasher&amp; ReverseHasher::operator++() {
    // from the right, try +1, -1 until it works
    auto it{values.rbegin()};
    auto end{values.rend()};
    auto movable{0};
    for (auto prev{it++}; it != end; ++it) {
        if (*it != last &amp;&amp; *prev != first) {
            ++(*it);
            --(*prev);
            if (movable != 0) { //propagate to the right
                auto debt{movable};
                while (movable &amp;&amp; prev != values.rbegin()) {
                    auto delta{std::min(*prev - first, movable)};
                    *prev -= delta;
                    movable -= delta;
                    --prev;
                }
                debt -= movable;
                for (auto ptr{values.rbegin()}; debt; ++ptr) {
                    auto delta{std::min(last - *ptr, debt)};
                    *ptr += delta;
                    debt -= delta;
                }
            }
            return *this;
        }
        movable += last - *prev;
        prev = it;
    }
    more = false;
    return *this;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const ReverseHasher&amp; fh) {
    return out &lt;&lt; fh.values;
}
</code></pre>

<h2>Results</h2>

<p>I noticed this in one of the comments:</p>

<blockquote>
  <p>the outcome for parameters characters = 13, last = first+5, hashval = 450 was: 9 minutes runtime</p>
</blockquote>

<p>I wrote a streamlined and simplified version using the same algorithm as your original and got this result:</p>

<blockquote>
  <p>Found 812,525,155 solutions in 257.426 seconds.</p>
</blockquote>

<p>I piped the result to <code>/dev/null</code> (I'm running this on a 64-bit Linux machine) because I didn't really want to waste drive space on the resulting &gt;10GiB file.  That's over 4 minutes.</p>

<p>With the code posted above, I got this result:</p>

<blockquote>
  <p>Found 812,525,155 solutions in 31.458 seconds.</p>
</blockquote>

<p>In other words, it's over eight times faster.</p>

<h2>Going further</h2>

<p>There are still enhancements that could be done, such as doing parallel processing, but they are not likely to buy much overall performance because the I/O is likely to be the bottleneck at this point.  It's an interesting intellectual puzzle, but you probably don't really need a 10GiB file on your computer either, so it may be worth pondering in more detail what you're really trying to do, especially since this represents only a very tiny subset of the range your code was originally using.  Some benchmarking and estimation of how many solutions there might be and how much space they'll require is likely to be useful in determining whether or not it's even worthwhile writing a program to do this.</p>
    </div>