<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>global</h1>

<p>there is no need to make <code>primes</code> a <code>global</code>. You only read from it, but don't assign to it, you can use it as is. It will be even faster if you make <code>primes</code> a local variable by passing it in as a parameter, so Python uses the  <code>LOAD_FAST</code> bytecode instead of <code>LOAD_GLOBAL</code>. Since <code>primes</code> is called, indexed and sliced a lot, this can make a difference.</p>

<h1>while condition</h1>

<p><code>i1 &lt; len(primes) and i2 &lt; len(primes) and i3 &lt; len(primes) and ...</code>. Since <code>i1&lt;i2&lt;i3</code>, only <code>i3 &lt; len(primes)</code> is needed. If you use <code>len(primes)</code> so often, it pays to make it a local variable.</p>

<h1>return, don't print</h1>

<p>your method immediately prints the results. In general it is better to split the calculation and presentation, so to let the method <code>return</code> or <code>yield</code> the values, and another method do the presentation</p>

<h1>looping</h1>

<p>I suggest you watch the talk <a href="https://archive.org/stream/pycon-2017-looping#mode/2up" rel="nofollow noreferrer">Loop like a Pro</a> by David Baumgold. It's recommended material for every python programmer. </p>

<p>Instead of looping over the indices, you can loop over the primes-list immediately.</p>

<p>For <code>p</code>, and the first index (<code>i</code>), you can loop over <code>enumerate(primes)</code></p>

<p>Then you can use this index <code>i</code> to slice <code>primes</code> to only include the elements with an index larger than <code>p</code> and go on to <code>r</code>, so you arrive at the following, naive implementation:</p>

<pre><code>def generate4_naive(a, b, c, limit):
    for i, p in enumerate(primes):
        for j, q in enumerate(primes[i+1:], i+1):
            for r in primes[j+1:]:
                product = p**a * q**b * r**c
                if product &lt; limit:
                    yield p, q, r, product
</code></pre>

<p>If you include the early <code>break</code>s, you arrive at something like this:</p>

<pre><code>def generate4(a, b, c, limit):
    for i, p in enumerate(primes):
        for j, q in enumerate(primes[i+1:], i+1):
            sub_product = p**a * q**b
            for r in primes[j+1:]:
                product = sub_product * r**c
                if product &gt; limit:
                    break
                yield p, q, r, product
            if sub_product * primes[j+1]**c &gt; limit:
                break
        if p ** a * primes[i+1] **b * primes[i+2] ** c &gt; limit:
            return
</code></pre>

<p>then I also used <code>primes</code> as a local variable by changing the signature: <code>def generate4b(a, b, c, limit, primes):</code></p>

<h1>Performance:</h1>

<pre><code>limit = 1_000_000
%timeit tuple(generate3(2,3,4, limit=limit))
</code></pre>

<blockquote>
<pre><code>16.6 µs ± 166 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
</blockquote>

<pre><code>%timeit tuple(generate3b(2,3,4, limit=limit, primes=primes))
</code></pre>

<blockquote>
<pre><code>16.2 µs ± 138 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
</blockquote>

<pre><code>%timeit tuple(generate4(2,3,4, limit=limit))
</code></pre>

<blockquote>
<pre><code>14.2 µs ± 643 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
</blockquote>

<pre><code>%timeit tuple(generate4b(2,3,4, limit=limit, primes=primes))
</code></pre>

<blockquote>
<pre><code>7.72 ms ± 516 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
</blockquote>

<pre><code>%timeit list(generate4_naive(2,3,4, 1_000)) # primes also only to 1000
</code></pre>

<blockquote>
<pre><code>940 ms ± 84.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
</blockquote>
    </div>