<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you can do two things. First, you should be able to directly use the output of applying the outer function. No need for this <code>output_list</code> business. Next thing, you should vectorize your inner function. You actually don't need it at all, you can just use <code>numpy.searchsorted</code> to find how many rows you need.</p>
<pre><code>import numpy as np
import pandas as pd

def track(group, percent):
    assert 0 &lt;= percent &lt;= 1
    type_id = group["type_id"][0]
    is_buy = group["is_buy_order"][0]
    total_volume_to_process = int(group["volume"].sum() * percent)

    # find the position where the total volume is satisfied
    group = group.sort_values("price", ascending=not is_buy)
    cumulative_volume = group["volume"].cumsum()
    n = np.searchsorted(cumulative_volume, total_volume_to_process)

    # get only those rows which are needed
    # copy is needed because we will potentially modify it
    processed = group.head(n + 1).copy()

    if 0 &lt;= n &lt; len(group):
        # fix the last volume so that the sum is satisfied
        last_volume = total_volume_to_process - cumulative_volume.iloc[n-1]
        processed.iloc[-1, processed.columns.get_loc("volume")] = last_volume
    else:
        # np.searchsorted returns 0 or N in case no match is found
        # 0 is fine, we just take a part of the first volume,
        # but N means there is not enough volume available.
        raise RuntimeError("Could not satisfy order")

    # return results
    total_price = (processed["volume"] * processed["price"]).sum()
    return pd.Series({"volume_processed": processed["volume"].sum(),
                      "total_volume_to_process": total_volume_to_process,
                      "total_price_paid": total_price})
</code></pre>

<pre><code>if __name__ == "__main__":
    df = ...
    percent = 0.33
    print(df.groupby(["type_id", "is_buy_order"], as_index=False)
            .apply(track, percent)
            .reset_index()
            .rename(columns={"is_buy_order": "is_buy"}))

#    type_id  is_buy  volume_processed  total_volume_to_process  total_price_paid
# 0        0   False                14                       14               890
# 1        0    True                14                       14               570
# 2        1   False                15                       15               340
# 3        1    True                14                       14               180
</code></pre>
<p>Your question prompt can also be faster if you don't reset the index in the above call. Then it becomes just <code>result.loc[(0, True), "total_price_paid"]</code></p>
    </div>