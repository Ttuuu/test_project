<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe requirements around the contract should be more specific as well. Is there a reason why you expose all the members defined in IList or ISet or both?</p>

<p>How about defining an interface as below assuming these members are what your caller will need:</p>

<pre><code>public interface IOrderedSet&lt;T&gt; : IEnumerable&lt;T&gt; where T : IEquatable&lt;T&gt;
{
    long Count { get; }

    void Add(T item);

    void AddRange(IEnumerable&lt;T&gt; items);

    bool Remove(T item);
}
</code></pre>

<p>As you can see the implementation of above will offer the caller LINQ capabilities. I've added the IEquatable constraint for a better control over items' "uniqueness", however, it's a minor detail for now.</p>

<p>Following is the implementation:</p>

<pre><code>public class OrderedSet&lt;T&gt; : IOrderedSet&lt;T&gt; where T : IEquatable&lt;T&gt;
{
    private readonly HashSet&lt;T&gt; _lookup = new HashSet&lt;T&gt;();
    private readonly LinkedList&lt;T&gt; _elements = new LinkedList&lt;T&gt;();

    public long Count =&gt; _lookup.Count;

    public OrderedSet(IEnumerable&lt;T&gt; collection = null)
    {
        if (collection != null)
        {
            AddRange(collection);
        }
    }

    public void Add(T item)
    {
        if (_lookup.Contains(item)) return;

        _elements.AddLast(item);
        _lookup.Add(item);
    }

    public void AddRange(IEnumerable&lt;T&gt; items)
    {
        foreach(var item in items)
        {
            Add(item);
        }
    }

    public bool Remove(T item)
    {            
        if (_lookup.Contains(item))
        {
            _lookup.Remove(item);
            _elements.Remove(item);

            return true;
        }

        return false;
    }

    public IEnumerator&lt;T&gt; GetEnumerator()
    {
        return _elements.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}
</code></pre>

<p>The choice of the underlying collection depends on the use case which your contract should reflect. For instance if you need an item by an index than List is a better fit. However, LinkedList semantics makes more sense keeping the initial assumption around the contract in mind.</p>

<p>Here are some tests covering a few cases:</p>

<pre><code>[TestFixture]
public class OrderedSetTests
{
    [Test]
    public void AddRange_InsertsItem()
    {
        var list = new OrderedSet&lt;int&gt;();

        var items = new[] { 1, 2, 3, 4, 5, 6, 7 };

        list.AddRange(items);

        Assert.AreEqual(7, list.Count);
        CollectionAssert.AreEqual(items, list);
    }

    [Test]
    public void AddRange_IgnoresDuplicateInput()
    {
        var list = new OrderedSet&lt;int&gt;();

        var items = new[] { 1, 2, 3, 4, 5, 6, 7 };
        var items2 = new List&lt;int&gt; { 1, 2, 3, 4, 5, 6, 7, 7, 6, 6, 3 };            

        list.AddRange(items2);

        CollectionAssert.AreEqual(items, list);
    }

    [Test]
    public void Remove_RemovesItemIfItemExists()
    {
        var list = new OrderedSet&lt;int&gt;();

        var items = new[] { 1, 2, 3, 4, 5, 6, 7 };
        list.AddRange(items);
        var removed = list.Remove(3);
        Assert.IsTrue(removed);
        removed = list.Remove(1);
        Assert.IsTrue(removed);

        Assert.AreEqual(5, list.Count);
        CollectionAssert.AreEqual(new[] { 2, 4, 5, 6, 7 }, list);
    }

    [Test]
    public void Remove_IgnoresItemIfItemDoesNotExist()
    {
        var list = new OrderedSet&lt;int&gt;();

        var items = new[] { 1, 2, 3, 4, 5, 6, 7 };
        list.AddRange(items);
        var removed = list.Remove(9);
        Assert.IsFalse(removed);
        removed = list.Remove(11);
        Assert.IsFalse(removed);

        Assert.AreEqual(7, list.Count);
        CollectionAssert.AreEqual(items, list);
    }
}
</code></pre>
    </div>