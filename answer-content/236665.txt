<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some basics...</p>

<p><strong>throws</strong></p>

<blockquote>
<pre><code>public int startReading(Book book) throws InterruptedException
</code></pre>
</blockquote>

<p>This exception is never dealt with in main (it's not caught or declared).  It also doesn't look like it's thrown anywhere.  Don't add unnecessary <code>throws</code>.</p>

<p><strong>unused</strong></p>

<blockquote>
<pre><code>private Date subsciptionDate;
</code></pre>
</blockquote>

<p>This is never used.  Unnecessary code creates confusion by making the relevant code harder to find.</p>

<p>Other values are assigned, but the value is never used anywhere:</p>

<blockquote>
<pre><code>private String lastLoginDate;
</code></pre>
</blockquote>

<p><strong>casing</strong></p>

<p>Generally, java variables are <code>camelCase</code>, your mixing styles with <code>snake_case</code> in the same declarations.  Consistency really is key, but prefer <code>camelCase</code>:</p>

<blockquote>
<pre><code>public void login(String loginUser, String login_Password) {
</code></pre>
</blockquote>

<p><strong>access modifiers</strong></p>

<p>Java's default access modifier, if you don't supply one, is package private.  So, if you declare fields in classes without putting <code>private</code>  in front of them, they can be modified by any other class in the same package.  If this is really what you want, then fine, but otherwise, add the modifier.</p>

<blockquote>
<pre><code>long userId;
Book book;
int  resumedPage;
</code></pre>
</blockquote>

<p>Where you're wanting them to be accessible to child classes, then you should be declaring them as <code>protected</code>, however think carefully about whether or not you want child classes to have complete access to the implementation of their parent, do you want them to be able to modify the <code>bookId</code>, or would an accessor make more sense?</p>

<blockquote>
<pre><code>long bookId;
</code></pre>
</blockquote>

<p><strong>final</strong></p>

<p>You're setting most of a lot of your fields in the constructor and then never modifying them.  If this is likely to be the end state (you're not expecting the fields to change), then you should declare the fields as final.</p>

<p><strong>Constructor parameters</strong></p>

<p>You don't need to have the same constructor parameters on parent classes as children.  If you aren't going to use category, don't pass it into your <code>FictionBook</code> class, you can simply do:</p>

<pre><code>public FictionBook(String name, String author, int pageCount) {
    super(name,"Fiction", author, pageCount);
}
</code></pre>

<p><strong>Book model</strong> </p>

<p>I'm not sure it makes sense.  I think of Novel's as fiction books... you're treating them as distinct types, albeit books.</p>

<p><strong>String comparisons</strong></p>

<p>Usually you'd use <code>.equals</code>, rather than <code>==</code> to compare strings.  One does an actual string comparison, the other compares references...</p>

<blockquote>
<pre><code>if (this.login_UserId == login_UserId &amp;&amp; this.login_Password == login_Password)
</code></pre>
</blockquote>

<p>I'll stop at this point, because it actually looks like you're creating a user with 'password' and logging in as 'Password' which seems like a bug, or is unsuccessful login your expectation?</p>
    </div>