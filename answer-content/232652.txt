<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions for improving the code.</p>

<h2>Use all required <code>#include</code>s</h2>

<p>The code uses <code>vector</code> but doesn't include the corresponding header.  The code should have</p>

<pre><code>#include &lt;vector&gt;
</code></pre>

<h2>Use <code>&lt;cmath&gt;</code> instead of <code>&lt;math.h&gt;</code></h2>

<p>The difference between the two forms is that the former defines things within the <code>std::</code> namespace versus into the global namespace.  Language lawyers have lots of fun with this, but for daily use I'd recommend using <code>&lt;cmath&gt;</code> (and also <code>&lt;cstdio&gt;</code>).  See <a href="http://stackoverflow.com/questions/8734230/math-interface-vs-cmath-in-c/8734292#8734292">this SO question</a> for details. </p>

<h2>Avoid <code>malloc</code> and <code>free</code></h2>

<p>The old C-style calls still work, of course, but are not recommended.  They are error prone and tend to require more code to do correctly (i.e. checking the return value of <code>malloc</code> for <code>NULL</code>).  Instead, the modern C++ idiom is to use RAII which stand for "Resource Acquisition Is Initialization).  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-mallocfree" rel="nofollow noreferrer">R.10</a> and <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r1-manage-resources-automatically-using-resource-handles-and-raii-resource-acquisition-is-initialization" rel="nofollow noreferrer">R.1</a> for details.</p>

<h2>Use objects</h2>

<p>The 3D array would be much better implemented as an object.  While you could, of course, write one (and I'd encourage you to try that as a learning exercise), there's an even smarter way to do that in the next suggestion.</p>

<h2>Know your libraries</h2>

<p>The code is already using the OpenCV <code>Mat</code> class, so what would make sense would be to also use that for the Hough space as well.  So this line:</p>

<pre><code>int ***houghSpace = allocate3DArray(image.rows, image.cols, rLen);
</code></pre>

<p>would be written instead like this:</p>

<pre><code>int dims[] = { image.rows, image.cols, rLen };
Mat houghSpace(3, dims, CV_8UC(1), Scalar::all(0));
</code></pre>

<p>Since that's a properly designed C++ class, it will automatically allocate memory as needed and also de-allocate it when the <code>houghSpace</code> object's destructor is called.  Using it is almost a simple:</p>

<pre><code>houghSpace.at&lt;cv::Vec3i&gt;(y0,x0)[r]++;
</code></pre>

<h2>Eliminate unused variables</h2>

<p>Unused variables are a sign of poor code quality, so eliminating them should be a priority.  In this code, <code>gradient_mag</code> in <code>HoughTransformCircles</code> and <code>r</code> in <code>free3d</code> are unused. Your compiler is probably also smart enough to tell you that, if you ask it to do so. </p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  It also appears you've got <code>using namespace cv;</code> somewhere as well and it's also not a good idea for similar reasons.</p>

<h2>Use variables to clarify your code</h2>

<p>The code currently has this nested set of loops:</p>

<pre><code>for (int y = 0; y &lt; image.rows; y++) {
    for (int x = 0; x &lt; image.cols; x++) {
        for (int r = 0; r &lt; rLen; r++)     {
            int x0 = x - (int)(r*cos(gradient_dir.at&lt;double&gt;(y, x)));
            int y0 = y - (int)(r*sin(gradient_dir.at&lt;double&gt;(y, x)));
            if(x0 &gt;= 0 &amp;&amp; x0 &lt; image.cols &amp;&amp; y0 &gt;= 0 &amp;&amp; y0 &lt; image.rows )  {
                houghSpace[y0][x0][r]++;
            }
            x0 = x + (int)(r*cos(gradient_dir.at&lt;double&gt;(y, x)));
            y0 = y + (int)(r*sin(gradient_dir.at&lt;double&gt;(y, x)));
            if(x0 &gt;= 0 &amp;&amp; x0 &lt; image.cols &amp;&amp; y0 &gt;= 0 &amp;&amp; y0 &lt; image.rows )  {
                houghSpace[y0][x0][r]++;
            }
        }
    }
}
</code></pre>

<p>Instead, I'd write it like this:</p>

<pre><code>for (int y = 0; y &lt; image.rows; y++) {
    for (int x = 0; x &lt; image.cols; x++) {
        for (int r = 0; r &lt; rLen; r++)     {
            int a = r * std::cos(gradient_dir.at&lt;double&gt;(y, x));
            int b = r * std::sin(gradient_dir.at&lt;double&gt;(y, x));
            int x0 = x - a;
            int y0 = y - b;
            if(x0 &gt;= 0 &amp;&amp; x0 &lt; image.cols &amp;&amp; y0 &gt;= 0 &amp;&amp; y0 &lt; image.rows )  {
                houghSpace.at&lt;cv::Vec3i&gt;(y0,x0)[r]++;
            }
            x0 = x + a;
            y0 = y + b;
            if(x0 &gt;= 0 &amp;&amp; x0 &lt; image.cols &amp;&amp; y0 &gt;= 0 &amp;&amp; y0 &lt; image.rows )  {
                houghSpace.at&lt;cv::Vec3i&gt;(y0,x0)[r]++;
            }
        }
    }
}
</code></pre>

<p>In C++11, I'd use a range-for.</p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.</p>

<h2>Use <code>const</code> where possible</h2>

<p>The <code>HoughTransformCircles</code> routine does not  alter the <code>image</code> passed to it, and so it should be declared as taking <code>const Mat&amp; image</code> as an argument.</p>
    </div>