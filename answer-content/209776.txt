<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  It's particularly bad to put that into a header file because it pollutes the global namespace.</p>

<h2>Use appropriate <code>#include</code>s</h2>

<p>The header file contains these two lines:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
</code></pre>

<p>However, neither is actually required for the <em>interface</em>.  Also <code>main</code> does not need <code>&lt;fstream&gt;</code> but needs <code>&lt;string&gt;</code> but that is not included.</p>

<h2>Use better naming</h2>

<p>The file named <code>one.h</code> is not well named.  The include guard name suggests that it is actually named <code>sampler.h</code> which is indeed a better name.</p>

<h2>Prefer <code>private</code> to <code>public</code> where practical</h2>

<p>The <code>Sampler</code> class has data members <code>beats</code> and <code>samples</code> as public members.  Rather than do it that way, it would be better to keep it private because the class relies on an <em>invariant</em> -- namely that each entry in <code>beats</code> has a corresponding entry in <code>samples</code>.  Such invariants cannot easily be enforced if the data members are <code>public</code>.</p>

<h2>Use include guards correctly</h2>

<p>The <code>one.h</code> file does have an include guard, which is good, but doesn't have it as the first thing in the file.  This can waste preprocessing time as contrasted with the usual (and recommended) method of putting the include guard as the very first non-comment line in the header.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>b2s</code> and <code>s2b</code> functions don't alter the underlying object and so should be declared <code>const</code>.</p>

<h2>Reconsider the structures</h2>

<p>It's unclear to me what, if anything, you intend to do with the beats and samples stored in the <code>Sampler</code> class, but the current method of having parallel <code>std::map</code> structures seems less than optimal.  If, as I infer, the context is music, both the sample and beat are increasing functions.  This suggests that they could easily be contained in a single <code>std::set&lt;BeatTime&gt;</code> where <code>BeatTime</code> is a simple private <code>struct</code> containing both <code>double</code>s.  </p>

<p>With those changes, here's what the class declaration looks like:</p>

<pre><code>class Sampler {
        struct BeatTime { 
            double beat, sample; 
            bool operator&lt;(const BeatTime&amp; rhs) const {
                return beat &lt; rhs.beat;
            }
        };
        std::set&lt;BeatTime&gt; beats;
        std::set&lt;BeatTime&gt;::iterator sample_upper_bound(double sample) const;
    public:
        double endTempo;
        void addMarker(double beat, double sample);
        double b2s(double beat) const;
        double s2b(double sample) const;
};
</code></pre>

<p>Now the <code>addMarker</code> function is very simple:</p>

<pre><code>void Sampler::addMarker(double beat, double sample) {
    beats.emplace(BeatTime{beat, sample});
}
</code></pre>

<p>And the <code>b2s</code> code is simplified:</p>

<pre><code>double Sampler::b2s(double beat) const {
    auto marker2 = beats.upper_bound(BeatTime{beat, 0});
    double tempo{endTempo};
    if(marker2 == beats.begin()) {
        marker2 = next(marker2);
    }
    auto marker1 = prev(marker2);
    if(marker2 != beats.end()) {
        tempo = (marker2-&gt;beat - marker1-&gt;beat) / (marker2-&gt;sample - marker1-&gt;sample);
    }
    return marker1-&gt;sample + ((beat - marker1-&gt;beat) / tempo);
}
</code></pre>

<p>The <code>s2b</code> code is almost identical except that, of course, we can't use <code>upper_bound</code> directly.  Instead, it uses this:</p>

<pre><code>std::set&lt;Sampler::BeatTime&gt;::iterator Sampler::sample_upper_bound(double sample) const {
    auto ret{beats.begin()};
    for ( ; ret != beats.end() &amp;&amp; ret-&gt;sample &lt;= sample; ++ret) 
    {}   
    return ret;
}
</code></pre>

<p>This makes the search linear rather than logarithmic, but it's unlikely to make a huge practical difference until the set becomes very large.</p>
    </div>