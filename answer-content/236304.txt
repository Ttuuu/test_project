<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm adding just some thoughts to explain how I would solve the problem: assuming in the simplest scenario you have two fields <code>firstName</code> and <code>lastName</code> that must be always compiled when you create a <code>Person</code> object then the simplest way is have to have a constructor that takes them as parameters:</p>

<pre><code>public class Person {
    private String firstName;
    private String lastName; 

    public Person(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName  = lastName;
    }
    //getters and setters omitted for brevity
}
</code></pre>

<p>After you have two fields <code>address</code> and <code>age</code> that in one or more moments of the life of your objects can be null, to signal this situation to the user of your <code>Person</code> class you chose to return the values <code>"No address defined"</code> and 0 like the code below:</p>

<blockquote>
<pre><code>private static final String NO_ADDRESS = "No address defined";
public int getAge() {
    if (hasAge)
           return age;
    else
           return 0; //Return 0 if no age is defined
}
public String getAddress() {
    if (hasAddress)
           return address;
    else
           return NO_ADDRESS;
}
</code></pre>
</blockquote>

<p>I disagree with your choice because the user of your class <code>Person</code> is obliged to know the value of String <code>"No address defined"</code> to identify which address is valid and which not with <code>String.equals</code> method and for me 0 is a valid value for <code>age</code>.
My possible solution is the use of <code>Optional</code> and <code>OptionalInt</code> for address and age like my code below:</p>

<pre><code>public class Person {
    private String firstName;
    private String lastName; 
    private String address;
    private Integer age; //&lt;-- better use int age, see note for details

    public Person(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public Optional&lt;String&gt; getAddress() {
        return Optional.ofNullable(address);
    }

    public OptionalInt getAge() {
        return OptionalInt.of(age);
    }

   //others setters and getters omitted for brevity
}
</code></pre>

<p>In this way the user of your class <code>Person</code> is forced to check if the fields address and age are set before using them:</p>

<pre><code>Person person = new Person("firstName", "lastName");
person.setAddress("address");
person.setAge(10);
Optional&lt;String&gt; optAddress = person.getAddress();
if (optAddress.isPresent()) {
    System.out.println(optAddress.get());
}
OptionalInt optAge = person.getAge();
if (optAge.isPresent()) {
    System.out.println(optAge.getAsInt());
}
</code></pre>

<p>Note: following @Nathan's comment below, instead of use Integer for age field it is better to use directly int to avoid boxing and unboxing operations.</p>
    </div>