<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code works correctly under the assumption that the given list
contains only <code>True</code> or <code>False</code> elements. For other lists it can return
“false positives”</p>

<pre><code>&gt;&gt;&gt; check_true_then_false([1, 1, 0])
True
</code></pre>

<p>or abort with a runtime error:</p>

<pre><code>&gt;&gt;&gt; check_true_then_false(["a", "b"])
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</code></pre>

<p>The function traverses the given list in order to find the number of
<code>True</code> elements. It then creates two additional lists, which are also
traversed to check if all elements are <code>True</code> resp. <code>False</code>.</p>

<p>A more efficient way would be to iterate the given list only once:</p>

<ul>
<li>Find the first non-<code>True</code> element. If there is any then it must be <code>False</code>.</li>
<li>Then find the next non-<code>False</code> element. There should not be any.</li>
</ul>

<p>If either of the above iterations fails (and <code>next()</code> raises a
<code>StopIteration</code> exception) then the list <em>is</em> of the required form, and
the function returns <code>True</code>:</p>

<pre><code>def check_true_then_false(x):
    list_iter = iter(x)
    try:
        return (next(elem for elem in list_iter if elem is not True) is False
            and next(elem for elem in list_iter if elem is not False) is False)
    except StopIteration:
        return True
</code></pre>

<p>Peilonrayz <a href="https://codereview.stackexchange.com/a/203083/35991">explained</a> how to document the
function using docstrings. In addition, the test cases can also be
embedded into the docstrings, with <a href="https://docs.python.org/2/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code></a>:</p>

<pre><code>def check_true_then_false(x):
    """Check first n values are True and the rest are False.

    &gt;&gt;&gt; check_true_then_false([True])
    True
    &gt;&gt;&gt; check_true_then_false([False])
    True
    &gt;&gt;&gt; check_true_then_false([False, True])
    False
    &gt;&gt;&gt; check_true_then_false([True, False, True])
    False
    &gt;&gt;&gt; check_true_then_false([1, 1, 0])
    False
    &gt;&gt;&gt; check_true_then_false(["a", "b"])
    False

    """
    # ... Your code ...

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</code></pre>
    </div>