<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is one of the way you can use fixtures. Fixtures are a form of dependency injection. For example, I use pytest to execute integration testing for an embedded target over ssh. So I want to reuse the ssh connection between tests.</p>

<p>The pytest fixture documentation has a similar example with SMTP:
<a href="https://docs.pytest.org/en/latest/fixture.html" rel="nofollow noreferrer">https://docs.pytest.org/en/latest/fixture.html</a></p>

<p>Note that if you want to reuse the same exact object between tests, you need to specify the scope <code>@pytest.fixture(scope='module')</code></p>

<p>Another reason to use fixtures is that they are the basis for writing plugins. Here's the pytest documentation on turning fixtures into plugins:
<a href="https://docs.pytest.org/en/latest/writing_plugins.html" rel="nofollow noreferrer">https://docs.pytest.org/en/latest/writing_plugins.html</a></p>

<p>If you want to learn more about fixtures I would recommend checking out the source for some of the 3rd party plugins they have one their website:
<a href="https://pytest.readthedocs.io/en/2.7.3/plugins_index/index.html" rel="nofollow noreferrer">https://pytest.readthedocs.io/en/2.7.3/plugins_index/index.html</a></p>

<p>So that should give you an idea that fixtures are really flexible and people have implemented a lot of really cool ones.</p>

<p>Pytest fixtures let you do things like examine the values of existing command line options and add new command line options.
<a href="https://docs.pytest.org/en/latest/example/simple.html#pass-different-values-to-a-test-function-depending-on-command-line-options" rel="nofollow noreferrer">https://docs.pytest.org/en/latest/example/simple.html#pass-different-values-to-a-test-function-depending-on-command-line-options</a></p>
    </div>