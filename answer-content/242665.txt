<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You declare all your variables with <code>let</code>. You aren't using <code>var</code>, so that's good - but it's <a href="https://softwareengineering.stackexchange.com/questions/278652/how-much-should-i-be-using-let-vs-const-in-es6">better to prefer</a> <code>const</code> over <code>let</code> unless you have no choice but to reassign the variable later. (I recently did a check of one of my scripts and found 414 uses of <code>const</code> compared to 16 uses of <code>let</code> - that's the sort of proportion you want to be aiming towards.) Code is most readable when any reader can immediately understand that a variable is never going to be reassigned from its initial value.</p>
<p>This is a bit opinion-based, but I would prefer to avoid IDs in HTML when possible: they not only automatically create properties on the global object (which can result in strange bugs), but also, only one element with a particular ID can exist in the document at a given time. So, for example, if you were tasked to refactor the code so that multiple lists can be interacted with on a page, you would have to make changes.</p>
<p>(Actually, in new code, I get the feeling that the "industry standard" is to usually avoid vanilla DOM manipulation like this at all - usually, a framework like React is used instead, allowing for the functional composition of components. Eg, if you had a working <code>TodoList</code>, changing to a page with two of them would be as simple as <code>&lt;div&gt;&lt;TodoList /&gt;&lt;/div&gt;&lt;div&gt;&lt;TodoList /&gt;&lt;/div&gt;</code>)</p>
<p>You do</p>
<pre><code>&lt;input onblur="this.placeholder = 'What do you want to do?'" onfocus="this.placeholder = ''" placeholder="What do you want to do?" type="text"&gt;
</code></pre>
<p><a href="https://stackoverflow.com/a/59539045">Never, ever</a> use inline handlers. They have numerous problems (such as executing inside a few confusing <code>with</code> blocks) and have no place in modern code. To attach an event listener to an element, use <code>addEventListener</code> instead.</p>
<p>But here, you don't need Javascript at all: you can use CSS instead:</p>
<pre><code>input:focus::placeholder {
  color: transparent;
}
</code></pre>
<p>You sometimes use <code>function</code>s, and you sometimes use arrow functions. Code is best when its style is <em>consistent</em> - I'd recommend picking one and sticking with it everywhere. (I'd prefer arrow functions, since they're always expressions rather than hoisted and reassignable declarations, and because they're usually more concise, and because they make it clear that <code>this</code> is not being captured in the new function.)</p>
<p>You use <code>KeyboardEvent.keyCode</code>, but it's <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode" rel="noreferrer">deprecated</a>. As MDN puts it:</p>
<blockquote>
<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>
</blockquote>
<p>I'd prefer to use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key" rel="noreferrer"><code>key</code></a> property instead, which is not only supported, but it's also a whole lot more intuitive when you can simply perform a comparison against a <em>character as a string</em> rather than have to refer to a table mapping keycode numbers to their characters. So, this:</p>
<pre><code>if (e.keyCode === 13 &amp;&amp; input.value !== '') {
</code></pre>
<p>can be replaced with:</p>
<pre><code>if (e.key === 'Enter' &amp;&amp; input.value !== '') {
</code></pre>
<p>The <code>deleted</code> function here:</p>
<pre><code>let deleted = () =&gt; {
    let spans = document.querySelectorAll('span');
    for (let span of spans) {
        span.addEventListener('click', function() {
            this.parentNode.parentNode.removeChild(this.parentNode);
        });
    };
};
</code></pre>
<p>can be improved. First, its name isn't particularly informative - it's good for a function's name to represent what it does. What this function does is it adds an event listener to each <code>&lt;span&gt;</code> in the document, which deletes the span's ancestor when clicked. A better name would be <code>deleteTodosOnTrashClick</code>.</p>
<p>But, it selects <em>all</em> <code>&lt;span&gt;</code>s in the document. So, if you had, say, a header with a <code>&lt;span&gt;</code> in addition to the todo list, if the header's span was clicked on, the header would be removed. It would be better to remove only the <code>&lt;span&gt;</code>s which are children of the todo list:</p>
<pre><code>const spans = ul.querySelectorAll('span');
</code></pre>
<p>But you're also adding an event listener to <em>every</em> span, <em>every</em> time a new todo is added. Since these spans are being created dynamically, it would be even better to add an event listener to <em>just</em> the created <code>&lt;span&gt;</code>, at the moment that it's created:</p>
<pre><code>const addTodo = () =&gt; {
    const listItem = document.createElement('li');
    listItem.innerHTML = '&lt;span&gt;&lt;i class="far fa-trash-alt"&gt;&lt;/i&gt;&lt;/span&gt; ' + input.value;
    listItem.addEventListener("click", function() {
        this.classList.toggle("lineThrough");
    });
    ul.appendChild(listItem);
    listItem.querySelector('span').addEventListener('click', () =&gt; {
        listItem.remove();
    });
    input.value = '';
};
</code></pre>
<p>Note the use of <code>.remove()</code>. This is often preferable to <code>removeChild</code> because <code>removeChild</code> requires a reference to both the parent and the child, which can get a bit verbose, as you can see in your original code.</p>
<p>There's another issue in <code>addTodo</code>. You are creating the HTML string for the new todo <em>by concatenating user input</em>, which should be avoided without taking precautions; this allows the user to execute arbitrary scripts, and insert arbitrary elements, which is a security risk and can result in unpredictable behavior.</p>
<p>For example, imagine if this was hosted on a website for students learning, where the students have logged in, and one of them got a message saying:</p>
<blockquote>
<p>Try pasting the following string into the todo list, you won't believe what happens next!</p>
<pre><code>&lt;img onerror="document.body.appendChild(document.createElement('script')).src = 'evil.js'"&gt;
</code></pre>
</blockquote>
<p>(except obfuscated). Then the student could have their login stolen by an attacker, because the site created the HTML by concatenating user input and did not sanitize it beforehand.</p>
<p>Either strip out all HTML tags from the input first, or assign to the <code>textContent</code> of the container for the text instead, or use <code>insertAdjacentText</code>:</p>
<pre><code>listItem.innerHTML = '&lt;span&gt;&lt;i class="far fa-trash-alt"&gt;&lt;/i&gt;&lt;/span&gt; ';
// ...
listItem.insertAdjacentText('beforeend', input.value);
</code></pre>
<p>It would also be a good idea (as always) to run the script in strict mode, and put it inside an IIFE so as to avoid global pollution. All together:</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>(() =&gt; {
  'use strict';
  const ul = document.querySelector('.list');
  const input = document.querySelector("input");
  const toggle = document.querySelector('.fa-plus');
  toggle.addEventListener('click', () =&gt; {
    toggle.classList.toggle('rotated');
    input.classList.toggle('hide');
  });

  input.addEventListener('keydown', (e) =&gt; {
    if (e.key === 'Enter' &amp;&amp; input.value !== '') {
      addTodo();
    };
  });


  const addTodo = () =&gt; {
    const listItem = document.createElement('li');
    listItem.innerHTML = '&lt;span&gt;&lt;i class="far fa-trash-alt"&gt;&lt;/i&gt;&lt;/span&gt; ';
    listItem.addEventListener("click", () =&gt; {
      listItem.classList.toggle("lineThrough");
    });
    ul.appendChild(listItem);
    listItem.querySelector('span').addEventListener('click', () =&gt; {
      listItem.remove();
    });
    listItem.insertAdjacentText('beforeend', input.value);
    input.value = '';
  };
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>html {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  font-size: 16px;
}

*,
*:before,
*:after {
  -webkit-box-sizing: inherit;
  -moz-box-sizing: inherit;
  box-sizing: inherit;
}

body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
ol,
ul {
  margin: 0;
  padding: 0;
  font-weight: normal;
}

ol,
ul {
  list-style: none;
}

img {
  max-width: 100%;
  height: auto;
}


/* RESET FINISHED */

@import url('https://fonts.googleapis.com/css2?family=Heebo:wght@500&amp;display=swap');
body {
  font-family: 'Heebo', sans-serif;
  background: rgb(200, 230, 201);
  background: linear-gradient(90deg, #00b09b 0%, #96c93d 100%);
}

#container {
  width: 360px;
  margin: 100px auto;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 0 10px rgba(42, 59, 56, 0.4);
}

h1 {
  font-size: 1.6em;
  font-weight: bold;
  padding: .8em .5em;
  background: #00b09b;
  color: #fff;
}

.fa-plus {
  float: right;
  transition: ease-in .2s;
}

.rotated {
  transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transition: ease-in .2s;
}

.hide {
  display: none;
}

input {
  clear: left;
  font-size: 1em;
  padding: .8em .5em;
  width: 100%;
  outline: none;
  border-top: none;
  border-left: none;
  border-right: none;
  border-bottom: 1px solid rgba(48, 87, 80, 0.4);
  background-color: rgb(236, 236, 236);
  transition: ease-in .2s;
}

input:focus {
  box-shadow: 0 5px 5px rgba(42, 59, 56, .4);
  border-bottom: none;
}
input:focus::placeholder {
  color: transparent;
}

.lineThrough {
  text-decoration: line-through;
  color: grey;
  transition: ease-in .2s;
}

li {
  width: 100%;
  line-height: 40px;
  transition: ease-in .2s;
}

li:nth-child(2n) {
  background-color: rgb(236, 236, 236);
}

span {
  background-color: #e74c3c;
  height: 40px;
  margin-right: 10px;
  text-align: center;
  color: #fff;
  width: 0;
  display: inline-block;
  transition: 0.2s linear;
  opacity: 0;
}

li:hover span {
  width: 40px;
  opacity: 1;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://kit.fontawesome.com/391e6a689e.js" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="assets/js/lib/jquery-3.4.1.min.js"&gt;&lt;/script&gt;
&lt;div id="container"&gt;
  &lt;h1&gt;Javascript To-Do List&lt;i class="fa fa-plus rotated"&gt;&lt;/i&gt;&lt;/h1&gt;
  &lt;input placeholder="What do you want to do?" type="text"&gt;
  &lt;ul class="list"&gt;

  &lt;/ul&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>