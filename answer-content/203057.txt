<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Upfront, I've just grabbed a couple of things that stuck out to me, I've
not dug too much into the details.  Also while this got rather long, I
think the code is pretty well readable (which is easily one of the most important things) and it also deals with a good
number of edge cases that obviously come up with real-life use, so
congrats on that.  Btw. I do like the README, all information there plus
a screenshot, that's all I want.</p>

<hr>

<p>First thing I did when opening was to click every button and while there
are no crashes (good) I'd rather not see exceptions in the console - in
general it would be good idea to handle those invariants ("there needs
to be a download (at all, selected, ...) for 'Pause' to make any
sense").</p>

<p>Secondly, resizing of the UI elements could be nicer, but I don't know
JavaFX at all, so I can't tell you how exactly to change that:</p>

<ul>
<li>Resizing the window to a size larger than the default leaves a gap at
the bottom that could be filled by the table instead.</li>
<li>Resizing it to a smaller size than expected hides some UI elements
("Download", "URL:", and all the buttons eventually).  In particular
I'd suggest that the text entry should be the one thing to get smaller
and the whole window might benefit from a minimal size as well.</li>
</ul>

<p>The smallest window:</p>

<p><a href="https://i.stack.imgur.com/9poU7.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/9poU7.png" alt="enter image description here"></a></p>

<p>A smaller window:</p>

<p><a href="https://i.stack.imgur.com/JP0yF.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/JP0yF.png" alt="enter image description here"></a></p>

<p>A too big window:</p>

<p><a href="https://i.stack.imgur.com/GXd5t.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/GXd5t.png" alt="enter image description here"></a></p>

<p>Third thing was to enter a random website's address, which resulted in
another exception.</p>

<p>Okay, fourth try, a URL to a picture, this time things are happening,
but it errors out ... right, you might want to show some information if
an error occured, because I've no idea why it didn't that time, a few
other pages do work fine.</p>

<p>Also generally I'd be really careful with having the remove button (any
action really) remove files on disk, in particular when there's no
dedicated download folder and the download is just writing to the local
directory.  Which brings me to the fact that it's writing to the local
directory and basically overwriting existing files if the filename ends
up the same - with only the ID being prefixed that's easily possible.</p>

<p>Other than it being a bit dangerous :) looks nice and the UI feels
smooth.</p>

<hr>

<p>Now to the code - I'm not going to mention again what I said above, it
should be relatively clear for you where those points are located in the
code.</p>

<ul>
<li><p>There are a few comments from the IDE still in there, would be cleaner
to remove them ("To change this license header, ...").</p></li>
<li><p>In <code>Download.java</code>, <code>ranges != null &amp;&amp; !ranges.equals("none")</code> could
be reversed to make it shorter, <code>!"none".equals(ranges)</code>.</p></li>
<li><p>Still in that file, <code>divideDownload</code>, I can't tell if this is
correctly dividing up the download parts at a glance, and I should be
able to.  Apart from a test I'd suggest not having <code>double</code> nor
<code>Math.round</code> in there.  Basically all but the last parts should really
have the same size, so the multiplication is rather easy, the last
part can either be done separately, or with a comparison to the full
download size.  Now that I think about it though, what about files of
size zero to what, seven bytes?  For correctness the code should
handle those too (the number of parts is hardcoded to <code>8</code> though).</p></li>
<li><p>The idiom for loggers is usually
<code>private static final Logger logger = Logger.getLogger(...);</code> on the
class level, there's little point recreating a logger every time
something needs to be logged.</p></li>
<li><p>In <code>DownloadSaves.java</code> I'd suggest to first open the file like you
do, then directly stream the XML, the reader is already set up that
way.  From a quick glance at the documentation that's still called
<code>toXML</code>, just with a second argument, the <code>OutputStream</code>.  This is
basically so that you avoid creating larger strings unnecessarily
(which will matter if your structures are bigger than they are right
now).</p></li>
<li>I'm also not quite sure if <code>createNewFile</code> is really necessary,
ideally you should just be able to write out the empty list instead?</li>
<li><p>Oh now that I've looked at what it writes to disk ... that could also
be smaller.  I'm not sure how much benefit you're getting from
serialising the state like that, so it's probably fine for the moment,
just consider that at some point you might need to debug the content
of that file, not to mention migrating it to a new version or so.</p></li>
<li><p>In <code>Part.java</code> I'd rather use <code>"%d-%d".format(startByte, endByte)</code>
(c.f. <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html" rel="nofollow noreferrer"><code>Formatter</code></a>
instead of that long construction, but really anything that doesn't
force you to call <code>String.valueOf</code> would be nicer.</p></li>
<li><p>In <code>DownloadPart.java</code>, <code>copyToStream</code> is pretty inefficient.  Any
time you see something copying files a single byte at a time that's
probably not efficient.  Of course you'd actually have to time it with
a large number of samples, but I'd still suggest copying in larger
chunks, say kilobytes to megabytes, is a better approach.</p></li>
<li><p>In <code>DownloadPool.java</code>, there's a <code>null</code> check on
<code>downloadSaves.getDownloads()</code> - that indicates that the list should
really <em>always</em> be there, non-nullably, so that the code get's
easier.  In fact if it was there the <code>for</code>-loop immediately after
would still work, it just wouldn't do anything on the empty list.</p></li>
</ul>

<hr>

<p>Regarding the pattern of the command/response queues, it's probably safe
since there's no locks or <code>synchronized</code> blocks to be seen, which is
good.  One thing though is that external methods access the queues of
other classes and that definitely doesn't look good - I'd either suggest
encapsulating the queues into a separate object ("channel", ...), or
have better methods on each class.  Also note that e.g. <code>pauseAll</code> is
very synchronous:  It sends "pause" to each thread after the other, but
what it could do to speed it up (since every thread might take a while
to shutdown) is to send "pause" to all threads, then wait for the
responses from all threads.  Also consider that <code>stopDownload</code>,
<code>pauseDownload</code> and <code>resumeDownload</code> basically have the same structure,
as have <code>pauseAll</code>, <code>resumeAll</code> and <code>stopAll</code>.</p>
    </div>