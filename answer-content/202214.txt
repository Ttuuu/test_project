<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>
<ol>
<li>
<blockquote>
<p>NOTE: headerArray is the large array.</p>
</blockquote>
</li>
</ol>
<p>If you need to specify this to us, then your variable name isn't good. We should be able to understand your code with only your code because you wouldn't be beside us when we read it.</p>
<ol start="2">
<li>Don't worry about using full names for your variables. After all, is there a real difference between <code>idxP</code> and <code>indexPosition</code> apart from the fact that it's very clear I'll understand the latter one?</li>
</ol>
<h2>Commenting</h2>
<p>Every time you want to write a comment, ask yourself if it is necessary. When you think it is, think again! :p Comments suck (I'm not really talking about XML comments on methods and classes and etc). When you write a comment in a method, it's because there's something weird enough that you'd feel the need to explain <strong>why</strong> you did something <em>much more</em> than <strong>what</strong> you did. In your cases, I don't think the comments are necessary.</p>
<h2>Readability</h2>
<p>In my opinion, there are two great and easy ways to make code more readable.</p>
<ol>
<li><p>Extracting methods : Taking small chunks of your code that fills a single purpose and make a method out of it.</p>
</li>
<li><p>Reduce nesting : Remove as much forking as possible (if, while, for, etc.)</p>
</li>
</ol>
<p>When dealing with algorithms, it's often hard to extract methods as many things are dependent.</p>
<p>However, you have lots of forking, so we can work with that.</p>
<pre><code>if (pattern.length == 1) {
    if (pattern[0].equals(headerArray[idxH])) {
        allPositions.add(idxH);
    }
}
</code></pre>
<p><em>Everytime</em> (exceptions might apply lol) you have two <code>if</code> stuck one to another, they can be merged using the AND (<code>&amp;&amp;</code>) operator.</p>
<pre><code>if (pattern.length == 1 &amp;&amp; pattern[0].equals(headerArray[idxH])) {
    allPositions.add(idxH);
}    
</code></pre>
<p>Bam, nesting reduced.</p>
<p>You should try to find other ways to reduce nesting, but again, coding complex algorithms often imply spaghetti-ish code. And in <em>this case</em>, you might want to write a meaningful comment as to why your code is this way.</p>
<h2>What's next?</h2>
<p>If you really want to reach great performance for a "large" array, you might want to consider looking at <a href="https://en.wikipedia.org/wiki/String-searching_algorithm#Single-pattern_algorithms" rel="nofollow noreferrer">String searching algorithms</a>. It's not an exact fit to your problem, but there's something to be done.</p>
<p><em>Small nitpick</em> : <code>Large</code> has a vague definition. If you want to make your code as correct as possible regarding your input, it can be useful to know an approximation of how much data your working with. For you, maybe an array with 100 elements is large, but for some data scientist at IBM, maybe it's 15000000.</p>
    </div>