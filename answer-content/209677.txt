<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Your question</h2>

<blockquote>
  <p>Does the design of the grid system is compatible with the requirement so far?</p>
</blockquote>

<p>Well, maybe I don't understand how setting characters (be them Unicode if necessary, as your example shows) on each tile relates to dividing an image into squares but it seems like you would want to allow the user to upload or choose an image (perhaps from a list), which might likely be a binary file. Then you would need to do some graphical analysis of the image and divide up the area of the image (perhaps using the dimensions).</p>

<h2>Feedback on code</h2>

<h3>Design</h3>

<p>It appears that when a Grid object is created, it creates cells as plain objects that have an <code>x</code>, <code>y</code> and <code>tile</code> property. Then when the <code>setTile()</code> method is called, it re-assigns those cells, but the only thing that really changes is the tile, so the calculations of <code>x</code> and <code>y</code> seem unnecessary. Additionally, the tile object doesn't need to be recreated - the shape property could be simply re-assigned - perhaps via a setter method, but that property is public so it could be modified outside the class unless it is made <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations" rel="nofollow noreferrer">private</a> (though that is only experimental<sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations" rel="nofollow noreferrer">1</a></sup>.</p>

<h3>forEach with <code>push</code></h3>

<p>The <code>render()</code> method of the Grid uses <code>foreach</code> with <code>push</code>:</p>

<blockquote>
<pre><code>let output = [];
this.cells.forEach(row =&gt; {
  output.push(this.renderRow(row));
});
</code></pre>
</blockquote>

<p>That is essentially the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" rel="nofollow noreferrer"><code>map</code></a> method re-implemented... Why not use that method?</p>

<pre><code>const output = this.cells.map(row =&gt; this.renderRow(row));
</code></pre>

<p>Notice that <code>const</code> is used because that value is never re-assigned. This can even be used with the <code>forEach</code>, since calling <code>push()</code> doesn't re-assign the value.</p>

<p>The same principle applies for the <code>renderRow()</code> method.</p>

<h3>render method</h3>

<p>This method does not return any values, it merely logs output to the console. However, the method is called inside a call to <code>console.log()</code>, which results in <code>undefined</code> being output to the console. Maybe that is not a concern for you if you are the only one using the console (perhaps for debugging purposes) but be aware of this if you intend on primarily using the console for output.</p>

<blockquote>
<pre><code>ðŸ‘½ ðŸ‘»
ðŸ’© ðŸŽƒ
undefined
=&gt; undefined
</code></pre>
</blockquote>

<p><sup>1</sup><sub><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations" rel="nofollow noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations</a></sub></p>
    </div>