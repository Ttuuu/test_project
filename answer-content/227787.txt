<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>EnqueueAction</code> may want to throw an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.objectdisposedexception?view=netframework-4.8" rel="noreferrer"><code>ObjectDisposedException</code></a> if the queue is disposed, depending on the precise API you want.</p>

<hr>

<p>I don't see the value of <code>IsBusy</code>, and it won't be cleared if the task is cancelled.</p>

<hr>

<p>I little padding inside the <code>while</code> loop would make that code much easier to understand. I'd be temped to pull the logic for retrieving the next action out into its own method so that it can read more clearly:</p>

<pre><code>if (TryGetNextAction(out Action nextAction))
{
    // invoke etc.
}
else
{
    break;
}
</code></pre>

<p>This will make it easier to extend and modify the conditions under which the worker should terminate. You could make it a local function if you want to prevent misuse.</p>

<p>For example, <code>cancellationTokenSource.Token</code> could throw an <code>ObjectDisposedException</code>, which should probably be a case where you fail cleanly, but handling this logic would clutter the existing method.</p>

<hr>

<p>You never change any of your private members, so you might consider making them <code>readonly</code>. Alternatively you might consider setting them to <code>null</code> upon disposal. Implementation of <code>IDispose</code> looks standard, and I <em>think</em> disposing the <code>BackgroundWorker</code> there is OK, but I'm less than certain.</p>

<hr>

<p>Some inline documentation would help to confirm the precise API this class is providing, and should clarify things like "if the object is disposed, then pending tasks are dropped", and "order of operations is FIFO as observed from a single thread", etc. <code>BackGroundWorkerActionQueueManagerTest</code> doesn't really elucidate its behaviour.</p>
    </div>