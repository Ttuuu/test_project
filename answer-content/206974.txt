<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At several places in your code the explicit type annotation is not
needed, for example</p>

<pre><code>var from: Int = start.column
var to: Int = move.end.column + 1
</code></pre>

<p>can be simplified because the compiler infers the type automatically:</p>

<pre><code>var from = start.column
var to = move.end.column + 1
</code></pre>

<p>Checking for empty fields along the move can be simplified if you iterate
over a <code>stride()</code>, that allows stepping both in increasing and decreasing
order. In <code>func isValidHorizontal()</code> that would be</p>

<pre><code>let direction = (move.end.column - start.column).signum()
for column in stride(from: start.column + direction,
                     to: move.end.column,
                     by: direction) {
    if board.tileType(at: GameBoardPosition(row: start.row, column: column)) != .empty {
        return false
    }
}
return true
</code></pre>

<p>This can further be shortened to</p>

<pre><code>return stride(from: start.column + direction,
                to: move.end.column,
                by: direction).allSatisfy {
    board.tileType(at: GameBoardPosition(row: start.row, column: $0)) == .empty
}
</code></pre>

<p>using the <a href="https://developer.apple.com/documentation/swift/sequence/2996794-allsatisfy" rel="nofollow noreferrer"><code>allSatisfy(_:)</code></a>
method introduced in Swift 4.2.</p>

<p>This approach can be applied to the other methods as well.</p>

<p>In <code>func isValidDiagonal()</code> you can check if a destination position can
be reached <em>before</em> walking along the diagonal. For example, if the start position
is <code>(0, 0)</code> then an end position <code>(x, y)</code> can be reached only if <code>x == y</code>.</p>

<p><em>Further remarks:</em></p>

<p>You have defined the <code>start</code> property in <code>GameMove</code> as <em>optional</em> 
(in contrast to the <code>end</code> property). Does it really make sense to specify
only the end position in a move? If not then make that property non-optional,
that would also make several guard statements like</p>

<pre><code>guard let start = move.start else { return false }
</code></pre>

<p>obsolete.</p>
    </div>