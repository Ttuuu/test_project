<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks pretty good!  One suggestion off the bat is to run a style checker (e.g. PEP8) to help tell you about things like weird whitespace or lines that run on for a little too long.</p>

<p>Another overall suggestion is not to comment every line of code.  Use a docstring at the start of a function to say what the function does overall, and only comment individual lines of code that don't seem self-explanatory.  For example, if you have a comment in the definition of <code>Node</code> that explains what a <code>None</code> pointer represents, you don't need to re-explain this each time that situation is encountered.  A good example is a line like:</p>

<pre><code>if before_node is None: # if node is absent
</code></pre>

<p>The comment <code>if node is absent</code> is almost identical to the actual code and does not aid the reader in understanding; just omit comments like this.  :)</p>

<h2>Suggestions on class definitions</h2>

<ol>
<li>Use <code>CamelCase</code> for all class names (i.e. <code>LinkedList</code>, not <code>linked_list</code>.)</li>
<li>If a class is "private" to a module, consider naming it with a leading underscore (<code>_Node</code>).  That way other people importing your module know that the <code>Node</code> objects aren't part of the interface to your <code>LinkedList</code>.</li>
<li>Similarly, the <code>self.head</code> node attribute in your <code>LinkedList</code> class should be private.  The reason for this is that if a user of your list modifies the node directly, they're very likely to break the list; you want them to use the functions you've defined for accessing the list so that the structure stays correct.</li>
<li>If you want users of your list class to be able to declare types for what they contain, you can do that by defining it as a <code>Generic</code>.  (If you haven't learned about Python types yet, don't worry about it, but you can file this note away for when you do.)  </li>
</ol>

<p>That'd look like this:</p>

<pre><code>from typing import Generic, Optional, TypeVar


_V = TypeVar('_V')


class _Node(Generic[_V]):
    def __init__(self, data: _V):
        # The data for this node
        self.data = data
        # The next node in the list, or None if this is the last one.
        self.next: Optional['_Node[_V]'] = None


class LinkedList(Generic[_V]):
    def __init__(self):
        self._head: Optional[_Node[_V]] = None  # first node (starts as none)
</code></pre>

<p>The <code>Generic[_V]</code> business is saying that this is a class that can be associated with some arbitrary other type, which we're referring to with <code>_V</code> as a kind of placeholder to indicate that it doesn't matter what this type is, but it's the <em>same</em> type everywhere in these two classes -- whenever you create a <code>LinkedList</code> you can say it's a list of <strong>something</strong>, and the type of that something (<code>_V</code>) is the same throughout that list.  </p>

<p>So when you declare a <code>LinkedList[str]</code>, its <code>self._head</code> is an <code>Optional[_Node[str]]</code>, which itself has a <code>.next</code> that is also an <code>Optional[_Node[str]]</code>.  If we declare a <code>LinkedList[int]</code>, then <code>_V</code> in the context of that list is <code>int</code> instead, so all of its nodes hold <code>int</code>s.  Et cetera.</p>

<h2>Magic functions!</h2>

<p>For common operations like "get the number of items in this collection" or "give me a string representation of this object", Python has the concept of "magic functions" that you can implement so that your class can interact with built-in functions the same way as its own lists, dicts, etc.</p>

<p>In particular, your first two methods are very good candidates for implementations as "magic functions":</p>

<pre><code>    def __len__(self) -&gt; int:
        """The number of values in the linked list."""
        current_node = self._head
        count = 0
        while current_node is not None:
            current_node = current_node.next
            count += 1
        return count

    def __str__(self) -&gt; str:
        """Formats the data in the nodes as a list []"""
        current_node = self._head
        node_list = []
        while current_node is not None:
            node_list.append(current_node.data)
            current_node = current_node.next
        return(str(node_list))
</code></pre>

<p>With these changes, you can now use your list more or less like a native Python list:</p>

<pre><code>linked_list: LinkedList[str] = LinkedList()  # use snake_case for variable names
linked_list.append("Mon")   # use the public interface, not linked_list._head
linked_list.append("Tue")
linked_list.append("Wed")

print(linked_list)
print(len(linked_list))
</code></pre>

<p>Per the note above on class definitions and private variables, the user of your list shouldn't be creating their own <code>Node</code> objects, they should be using the nice <code>append()</code> method that you've implemented that takes care of all the pointers for them!  </p>

<p>Implementing the <code>__len__</code> and <code>__str__</code> methods makes it so that they can just <code>print(linked_list)</code> instead of calling a special display method, and get its <code>len</code> the same way as any other Python object.</p>

<h2>Error handling</h2>

<p>If your code encounters an error condition that means something has gone terribly wrong, it's better to <code>raise</code> an exception than to print a message and do nothing; you can see a message at the console, but it's hard to test for it in the code!  For example:</p>

<pre><code>        if before_node is None:
            raise ValueError("The mentioned node is absent")
</code></pre>

<p>will still get your error message to the user, but now it's also available to another coder who's using your list.</p>

<p>If you use type annotations, you can improve this type of error handling by explicitly stating in the definition of the function that <code>before_node</code> is not allowed to be <code>None</code>:</p>

<pre><code>    def after_insert(self, before_node: _Node[_V], new_data: _V) -&gt; None:
        if before_node is None:  # this is never a valid value now!
            raise ValueError("The mentioned node is absent")
</code></pre>

<p>Per the notes above on public/private interfaces, I'd suggest not having <code>after_insert</code> as a public method, at least not with <code>before_node</code> as the parameter.  Since you have a method to retrieve an index, maybe that could be the public interface for this method?  E.g.:</p>

<pre><code>    def _after_insert(self, before_node: _Node[_V], new_data: _V) -&gt; None:
        new_node = _Node(new_data)
        new_node.next = before_node.next
        before_node.next = new_node
        # before_node now points to new_node
        # Ex: since 2-&gt;3 now, 1-&gt;2, so 1-&gt;2-&gt;3

    def _find_node(self, index: int) -&gt; _Node[_V]:
        current_index = 0
        current_node = self._head
        while current_index &lt; index and current_node is not None:
            index += 1
            current_node = current_node.next
        if current_node is not None:
            return current_node
        raise IndexError("Index larger than this list!")

    def after_insert(self, before_index: int, new_data: _V) -&gt; None:
        """
        Inserts new data after the node with the given index.
        Raises IndexError if the index exceeds the length of the list.
        """
        self._after_insert(self._find_node(before_index), new_data)
</code></pre>

<h2>Avoid indirection</h2>

<p>This code in your <code>remove</code> looked at first like it was redundant because it was so similar to the <code>while</code> loop that follows it; a hazard of every line being commented is that when a comment is actually significant the reader's eyes are likely to skip over it!  :)</p>

<pre><code>        current_node = self._head # assigns the head node to the variable head 
        if current_node is not None: # then the linked list is not empty
            if current_node.data == node_data: # if the head node is the data to be removed
                self._head = current_node.next # the node after the head node is now the head node
                current_node = None # and there is no value at the head
                return
</code></pre>

<p>Since in this special case you're <em>specifically</em> operating on the head node, I think it would be better to do this before you even start with the <code>current_node</code> iteration:</p>

<pre><code>        if self._head and self._head.data == node_data:
            # Special case: remove the head.
            self._head = self._head.next
            return
        current_node = self._head
        while current_node is not None:
            ...
</code></pre>

<p>A couple of other notes on this function:</p>

<ol>
<li>Setting <code>current_node = None</code> before you return doesn't do anything since it's a local variable; omit lines of code that do nothing.</li>
<li>Should it raise an error if the caller tries to <code>remove</code> data that's not there?  For example:</li>
</ol>

<pre><code>        if current_node is None:
            raise ValueError("No such data in this list!")
        # Remove current_node by having previous_node skip over it.
        previous_node.next = current_node.next
</code></pre>

<h2>Return when you're done!</h2>

<p>The <code>find</code> method can be simplified by having it return as soon as you know the answer, rather than having it break out of the loop and then figure out afterward whether the loop is over because you found the answer or because you didn't.  :)</p>

<pre><code>    def find(self, key_data: _V) -&gt; Optional[int]:
        """returns the index of a data of a node if it exists"""
        if self._head is None:
            return None  # list is empty
        current_node = self._head
        current_index = 0
        while current_node is not None:
            if current_node.data == keydata:
                return current_index 
            current_node = current_node.next
            current_index += 1
        return None  # data not found
</code></pre>

<p>Note that rather than making a variable called <code>count</code> and then having a comment explaining that it represents an index:</p>

<pre><code>count = 0  # initialising a counter for index
</code></pre>

<p>you can let the name speak for itself:</p>

<pre><code>current_index = 0
</code></pre>

<p>Naming it <code>current_index</code> makes it clear that it's the index of <code>current_node</code> (make alike look alike!).  You could draw the association even closer by assigning the two values together, i.e.:</p>

<pre><code>        current_node, current_index = self._head, 0
        while current_node is not None:
            if current_node.data == keydata:
                return current_index 
            current_node, current_index = current_node.next, current_index + 1
</code></pre>

<p>but this makes the lines longer and creates a bit of visual clutter, so YMMV on that one.</p>

<h2>Testing</h2>

<p>All in all the code seems to work well; as I went through and added type annotations, I didn't get any errors from the type checker, which is a good sign that you've done a good job of handling all the null pointer cases.  :)  There's obviously lots of room for optimization (e.g. tracking the tail node would make your <code>append</code> faster, and tracking the length as you add/remove nodes would make your <code>len</code> faster), but as far as a basic singly-linked list this seems like a pretty solid implementation.</p>

<p>To make extra sure of that it'd be good to have a few tests.  For example, here's a way you could do a randomized test that your <code>remove</code> function works regardless of where in the list you're removing elements from and never messes up your <code>len</code> calculation:</p>

<pre><code>import random

number_list: LinkedList[int] = LinkedList()
# Add numbers 0-99 to the list in random order.
for i in random.sample(range(100), 100):
    number_list.append(i)
assert len(number_list) == 100
# Now remove from 99-0 in order to test that
# remove() works regardless of where the item is.
for n in range(99, -1, -1):
    number_list.remove(n)
    assert len(number_list) == n
</code></pre>
    </div>