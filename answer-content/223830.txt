<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are asking:</p>

<blockquote>
  <p>which version would you favour and why?</p>
</blockquote>

<p>Instead of answering directly to your question, I will try to show why that formulation is not, at least in my opinion, “a relic of former days”, but quite idiomatic for Common Lisp (and other “terse” languages). My attempt is done by first recalling an important concept of the language, and then by showing how to apply this concept to your definition of the function, by successive refining of it.</p>

<p>In Common Lisp there is the concept of “Generalized Boolean”:  the symbol <code>nil</code> (which represents also the empty list), represents <code>false</code> and <em>all</em> the other objects represent <code>true</code>. The concept is so deeply rooted in the language, and it so frequently used in defining primitive functions and special forms, that it has become an habit of programmers in this language to rely on this concept as much as possible, in order to shorten (and in some way to simplify) the code.</p>

<p>Let’s start from your definition:</p>

<pre><code>(defun bst-min (bst)
  (if (null (node-l bst))
      bst
      (bst-min (node-l bst))))
</code></pre>

<p>First of all, this definition does not work for the edge case in which the tree is empty. In this case, <code>(node-l bst)</code> causes the error: <code>The value NIL is not of the expected type NODE</code>.</p>

<p>Let’s try to correct it by adding a check before that case:</p>

<pre><code>(defun bst-min (bst)
  (cond ((null bst) nil)
        ((null (node-l bst)) bst)
        (t (bst-min (node-l bst)))))
</code></pre>

<p>Now we can note that the first two branches of the conditional have the same result: <code>bst</code> (which is <code>nil</code> in the first case), so that we can simplify the code by <code>or</code>ing the two conditions:</p>

<pre><code>(defun bst-min (bst)
  (if (or (null bst) (null (node-l bst)))
      bst
      (bst-min (node-l bst)))))
</code></pre>

<p>Since both the conditions of the <code>or</code> test the “emptyness” of an object (i.e. if it is equal to <code>nil</code>), for the concept of generalized boolean we can consider that <code>(null x)</code> is equivalent to <code>(not x)</code>, and <code>or</code> with two <code>not</code> can be “simplified” to an <code>and</code> with positive tests and inversion of the branches of the <code>if</code>:</p>

<pre><code>(defun bst-min (bst)
  (if (and bst (node-l bst))
      (bst-min (node-l bst))
      bst))
</code></pre>

<p>Note that this version is conceptually simpler than the previous versions, correct and more understandable (at least for me!).</p>

<p>However, we can note the presence of still an annoying point: <code>(node-l bst)</code> is called twice. </p>

<p>To remove the double call, we can note that, assuming that <code>bst</code> is not null, now the recursive call, <code>(bst-min (node-l bst))</code> gives the correct result both if <code>(node-l bst)</code> is present or not (in fact we have modified the function to treat the <code>nil</code> case). So we can call only once the selector by first trying <code>bst-min</code> on it, and, if it returns <code>nil</code>, by returning <code>bst</code> instead. This is done with the macro <code>or</code>, that returns the first non-null argument by evaluating them from the left:</p>

<pre><code>(defun bst-min (bst)
  (if bst
      (or (bst-min (node-l bst)) bst)
      bst))
</code></pre>

<p>which is equivalent to:</p>

<pre><code>(defun bst-min (bst)
  (if bst
      (or (bst-min (node-l bst)) bst)
      nil))   ; &lt;- note this, which is different from the previous definition
</code></pre>

<p>The idiomatic way of writing the previous definition in Common Lisp is to use <code>when</code> instead of <code>if</code>, since the former returns <code>nil</code> when the condition is false:</p>

<pre><code>(defun bst-min (bst)
  (when bst
    (or (bst-min (node-l bst)) bst)))
</code></pre>

<p>which is finally equivalent (from the point of view of the computation performed) to the Graham's formulation. In fact, by calling <code>macroexpand-1</code> in SBCL on the two bodies gives exactly the same result:</p>

<pre><code>(IF BST (OR (BST-MIN (NODE-L BST)) BST))
</code></pre>

<p>So both definitions can be considered “idiomatic”, with that of Graham a little more “lispy”, given the homogenous use of logical operators.</p>
    </div>