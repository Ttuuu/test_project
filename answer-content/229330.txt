<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Fix your imports of tkinter</h2>

<p>You are importing tkinter twice, once with a wildcard and once "as tk". You should not be using the global import at all (see <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP9</a>). Stick with a single import:</p>

<pre><code>import tkinter as tk
</code></pre>

<p>There will be places in your code that need to be modified to account for this. For example, change all instance of <code>Checkbutton</code> to <code>tk.Checkbutton</code>.</p>

<h2>Separate widget creation from widget layout</h2>

<p>Don't write code like <code>tk.Label(...).grid(...)</code>. Separate your widget creation from widget layout. It makes your code easier to read, and makes the layout easier to visualize. Plus, when you need to keep a reference to a widget, you won't trip over the common problem of having variables set to <code>None</code> because <code>.grid(...)</code> and <code>.pack(...)</code> return None.</p>

<p>For example:</p>

<pre><code>choose_label = tk.Label(mainframe, text="Choose your sign off here:")
popupMenu = tk.OptionMenu(mainframe, tkvar, *choices)
other_label = tk.Label(mainframe, image=None)
open_button = tk.Button(mainframe, text="Open", command=change_dropdown)

choose_label.grid(row=1, column=1)
popupMenu.grid(row=2, column=1)
open_button.grid(row=3, column=1)
other_label.grid(row=4, column=1)
</code></pre>

<p>This makes it much easier to see which widgets are grouped together and how they are arranged on screen. </p>

<p>As a rule of thumb, I always create all widgets that share the same parent as a group, and then lay them out as a group. That way I don't have to hunt through all of the code trying to find widgets that are arranged together. </p>

<h2>Organize your widgets</h2>

<p>You've put everything in <code>mainframe</code>. However, looking at your UI design you clearly have different sections to the UI. Have your code reflect those different sections.</p>

<p>For example, you seem to have a left half and a right half to the GUI, and their layout needs are somewhat different. On the right is just a list of checkbuttons that are all aligned to the left. On the left is a more complex layout with different widgets where everything is centered. Also, the items on the left take up less space than the items on the right.</p>

<p>I recommend that you start the GUI by creating two frames, one for the left and one for the right. </p>

<pre><code>left_frame = tk.Frame(...)
right_frame = tk.Frame(...)
</code></pre>

<p>You can then use <code>pack</code> to lay them out side-by-side, or use a paned window, or use <code>grid</code>. In this specific case I would choose <code>pack</code> simply because you don't have to worry about row and column weights.</p>

<p>For example, this causes each to be given half of the available free space in the window:</p>

<pre><code>left_frame.pack(side="left", fill="both", expand=True)
right_frame.pac(side="right", fill="both", expand=True)
</code></pre>

<p>Next, focus on just one side of the UI. For example, all of the widgets on the left would be a child of <code>left_frame</code>:</p>

<pre><code>choose_label = tk.Label(left_frame, text="Choose your sign off here:")
popupMenu = tk.OptionMenu(left_frame, tkvar, *choices)
other_label = tk.Label(left_frame, image=None)
open_button = tk.Button(left_frame, text="Open", command=change_dropdown)
save_button = tk.Button(left_frame, text = "Save", command = save)
</code></pre>

<p>Because these are all in a common frame, and separate from the widgets in the other frame, you are free to use <code>pack</code>, <code>grid</code>, or <code>place</code>. If you use <code>grid</code>, you don't have to worry about how the size of rows on the left affect the appearance of objects on the right.</p>

<p>Next, focus on the widgets on the right, following the same pattern: create the widgets as children of the right frame, and then lay them out using whatever layout manager works best. </p>

<h2>Organize your code</h2>

<p>You have code that looks like this, which is very hard to read:</p>

<pre><code>var1 = IntVar()
Checkbutton(mainframe, text="Ingredients present in full (any allergens in bold with allergen warning if necessary)", variable=var1).grid(column = 2, row=1, sticky=W)
var2 = IntVar()
Checkbutton(mainframe, text="May Contain Statement.", variable=var2).grid(column = 2, row=2, sticky=W)
...
</code></pre>

<p>Instead, do one of two things. First, you can separate your data definitions (<code>var1 = IntVar()</code>) from your widget definition. For example:</p>

<pre><code>var1 = IntVar()
var2 = IntVar()

Checkbutton(mainframe, text="Ingredients present in full (any allergens in bold with allergen warning if necessary)", variable=var1).grid(column = 2, row=1, sticky=W)
Checkbutton(mainframe, text="May Contain Statement.", variable=var2).grid(column = 2, row=2, sticky=W)
</code></pre>

<p>A better solution would be to use a data structure that lets you create these widgets and variables in a loop. By doing that, if you decide at a future date to change the look of a widget, you only have to change one or two lines of code rather than dozens.</p>

<p>For example, assuming you've created a separate frame just for the checkbuttons (eg: <code>right_frame</code>), it might look like this:</p>

<pre><code>required_info = [
    "Ingredients present in full ...",
    "May Contain Statement",
    "Cocoa Content (%)",
    "...",
    ]


vars = []
for info in required_info:
    var = IntVar(value=0)
    vars.append(var)
    cb = tk.Checkbutton(right_frame, text=info, variable=var, onvalue=1, offvalue=0, justify="left")
    cb.pack(side="top", fill="x")
</code></pre>

<p>With that, to add another required piece of info you only have to add a single line to the <code>required_info</code> array, rather than two or three lines of code. Plus, it makes it trivial to rearrange the order of the items since you only have to reorder the list rather than the code</p>

<p>To get the values, you can then just iterate over the list of vars:</p>

<pre><code>for var in vars:
    print(var.get())
</code></pre>

<p>You can even use the required information as the name of the widget:</p>

<pre><code>for info in required_info:
    var = IntVar(value=0, name=info)
    ...

...
for var in vars:
    print("{} = {}".format(str(var), var.get()))
</code></pre>

<h2>Use classes</h2>

<p>In my experience, tkinter is much easier to maintain if you use classes. At the very least, I recommend using a single class for the whole application, if for no other reason than it lets you specify widgets that use callbacks before having to define the callback, leaving your main logic near the top of the file. </p>

<p>For example, instead of this:</p>

<pre><code>&lt;define some widgets&gt;
def change_dropdown(*args): ...
&lt;define more widgets&gt;
def var_states(): ...
&lt;define more widgets&gt;
def user(): ...
user()
def save(): ...
&lt;define more widgets&gt;
root.mainloop()
</code></pre>

<p>... you could have this, which is considerably easier to read:</p>

<pre><code>class App():
    def __init__(self):
        &lt;define all widgets&gt;
    def change_dropdown(self, *args): ...
    def var_states(self): ...
    def user(self): ...
    def save(self): ...

app = App()
app.root.mainloop()
</code></pre>
    </div>