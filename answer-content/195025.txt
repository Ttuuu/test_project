<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Binomial coefficient <span class="math-container">\$\binom{n}{k}\$</span> is growing too fast (with <span class="math-container">\$n\$</span>) to keep a list of all combinations in memory. I would suggest to use <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield" rel="noreferrer"><code>yield return</code></a> instead.</p>

<hr>

<p>The main improvement which can be done here - <a href="https://rosettacode.org/wiki/Combinations#C.23" rel="noreferrer">not to use Recursion at all</a>.</p>

<p><strong>Solution without recursion</strong></p>

<pre><code>static class Combinations
{
    // Enumerate all possible m-size combinations of [0, 1, ..., n-1] array
    // in lexicographic order (first [0, 1, 2, ..., m-1]).
    private static IEnumerable&lt;int[]&gt; CombinationsRosettaWoRecursion(int m, int n)
    {
        int[] result = new int[m];
        Stack&lt;int&gt; stack = new Stack&lt;int&gt;(m);
        stack.Push(0);
        while (stack.Count &gt; 0)
        {
            int index = stack.Count - 1;
            int value = stack.Pop();
            while (value &lt; n)
            {
                result[index++] = value++;
                stack.Push(value);
                if (index != m) continue;
                yield return (int[])result.Clone(); // thanks to @xanatos
                //yield return result;
                break;
            }
        }
    }

    public static IEnumerable&lt;T[]&gt; CombinationsRosettaWoRecursion&lt;T&gt;(T[] array, int m)
    {
        if (array.Length &lt; m)
            throw new ArgumentException("Array length can't be less than number of selected elements");
        if (m &lt; 1)
            throw new ArgumentException("Number of selected elements can't be less than 1");
        T[] result = new T[m];
        foreach (int[] j in CombinationsRosettaWoRecursion(m, array.Length))
        {
            for (int i = 0; i &lt; m; i++)
            {
                result[i] = array[j[i]];
            }
            yield return result;
        }
    }
}
</code></pre>

<p><strong><a href="https://benchmarkdotnet.org/" rel="noreferrer">Benchmarking</a></strong></p>

<pre><code>[ClrJob(true)]
[RPlotExporter, RankColumn, MemoryDiagnoser]
public class CombinationBenchmark
{
    [Params(5, 6, 7, 8, 9, 10)]
    public int M;

    private readonly int[] _array = new int[20];

    [GlobalSetup]
    public void Setup()
    {
        Random r = new Random(123);
        for (int i = 0; i &lt; _array.Length; i++)
        {
            _array[i] = r.Next();
        }
    }

    [Benchmark]
    public void CombinationsWoRecursion()
    {
        int s = 0;
        foreach (int[] i in Combinations.CombinationsRosettaWoRecursion(_array, M))
        {
            s += i[0];
        }
    }


    [Benchmark]
    public void CombinationsDavid()
    {
        int s = 0;
        CombinationsDavid c = new CombinationsDavid();
        foreach (int[] i in c.GetAllCombinations(_array, M))
        {
            s += i[0];
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        BenchmarkRunner.Run&lt;CombinationBenchmark&gt;();
    }
}
</code></pre>

<p><strong>Results</strong>
<a href="https://i.stack.imgur.com/l4v1n.png" rel="noreferrer"><img src="https://i.stack.imgur.com/l4v1n.png" alt="enter image description here"></a></p>

<p>I would like also highlight an <a href="https://gist.github.com/pgsin/31a771aa07038668ba13f2b573500fc0" rel="noreferrer">extremely small memory footprint</a>, which was achieved thanks to <code>yield</code> usage. </p>

<hr>

<p>Another proposed solution is checking number of on-bits in <span class="math-container">\$2^{n}\$</span> numbers. By this, you are limiting your solution on <span class="math-container">\$n&lt;=32\$</span> and doing <span class="math-container">\$2^{n}-\binom{n}{k}\$</span> checks for nothing.</p>
    </div>