<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your first file could be a lot shorter if you made the <code>Type</code> class slightly more than a useless empty namespace:</p>

<pre><code>class Type:
    name = None

    def get_type(self):
        return self

    def show(self):
        if self.name is None:
            raise NotImplementedError
        return self.name
</code></pre>

<p>Then all your other types get shorter:</p>

<pre><code>class Int(Type, Node):
     """A basic integer node"""
    name = "int"

    def __init__(self, number):
        """A basic integer node

        Args:
            number: an integer
        """
        self.number = number
</code></pre>

<p>Especially the ones that don't need any argument in the constructor:</p>

<pre><code>class Void(Type, Node):
    """No type"""
    name = "void"
</code></pre>

<p>It could be argued that the <code>show</code> method should be called <code>__str__</code> or <code>__repr__</code>, making them <a href="https://rszalski.github.io/magicmethods/" rel="nofollow noreferrer">magic methods</a>, depending on your need.</p>

<p>Similarly for <code>Node</code>:</p>

<pre><code>class Node:

    def annotate_type(self, _type):
        self.type = _type

    def get_type(self):
        return self.type
</code></pre>

<p>At this point you could also realize that there is no need to have these getters and setters in the first place. <a href="https://www.python-course.eu/python3_properties.php" rel="nofollow noreferrer">In Python using a plain attribute is usually preferred</a>. You can always start with an attribute and add getters and setters if you need them (i.e. if they do more than just getting and setting an attribute) by using <code>property</code>.</p>
    </div>