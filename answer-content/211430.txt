<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Make a separate stack class. Even if this is a one time thing it is good OO practice. Good encapsulation will not allow the main program to access the stack's internal structure, <code>ptr</code> for example. Methods like <code>Stack.isEmpty()</code> would be more user friendly. If popping "below the bottom" of the stack, it's better returning <code>null</code> rather than a specific out of range ptr value. I think the stack should be self-expanding, but if intentional design says it is fixed length then fine.</p>
<p>Design classes with excellent customer service built in.</p>
<hr>
<pre><code>if (ptr == -1)
</code></pre>
<p>I suggest <code>ptr &lt;= -1</code>. This is really the condition and it is more error tolerant. What if some other bug decremented to -2 before this check?</p>
<hr>
<p>Data structures to simplify code</p>
<p>We want to avoid this:</p>
<pre><code>if(str.charAt(i)== '('|| str.charAt(i)== '{' || str.charAt(i)== '[')
</code></pre>
<p>Not extensible, error prone, hard to read. The goal is something like this:</p>
<pre><code>if( OpenDelimiters.contains ( str.charAt(i) ) )
</code></pre>
<p>There might be <code>OpenDelimiters</code>, <code>CloseDelimiters</code>, <code>PairDelimiter</code> structures - that might seem like a lot but code gets real simple real fast as seen above. Adding delimiters means no code changes, just add to the data structures.</p>
<hr>
<p><strong>Edit - RE: <code>if(ptr == -1)</code></strong></p>
<p>This needs clarification. Please be patient, this is a case of something simple taking extensive explanation to show how and why it is wrong.</p>
<p>The big picture is this:</p>
<ul>
<li>code the algorithm as precisely as possible</li>
<li>Don't assume simple code is bug free</li>
<li>Even correct arithmetic, at the bits and bytes level can be surprisingly inaccurate.</li>
<li>Make code robust because ongoing maintenance is toxic to code.</li>
<li>Develop good coding techniques that reduce bug risk and apply them consistently</li>
</ul>
<hr>
<p><strong>Algorithm vis-a-vis Code</strong></p>
<p>Pretend the program calculated <code>ptr = -2</code> instead of <code>-1</code>. Then <code>if(ptr == -1)</code> does not catch it. What is the error, the arithmetic or the condition or both? Change the condition to <code>if(ptr == -2)</code> and the program is fixed, right? How about we just throw an exception, is the program fixed now? If it runs why not?</p>
<ul>
<li>When <code>pop()</code>ing we need to catch "going off the bottom" of the stack. <em>By definition</em> that means an index less than zero. That algorithm definition is accurately coded as <code>ptr &lt; 0</code>.
<ul>
<li>Given the above, if ptr is <code>-2</code> - this is not a program error per se. The program will keep running correctly. The <code>pop</code> algorithm handles that condition - index is less than zero.</li>
<li>if <code>ptr</code> is <code>-2</code> - now this must be coding error because we intended <code>-1</code>. Lucky we're testing for  <code>&lt; 0</code>. Fix the arithmetic bug even if the conditional statement tolerates it. The arithmetic error and the conditional logic are two separate things. Arithmetic errors should be caught in testing. P.S.: throwing exceptions for arithmetic errors is just wrong!!</li>
<li><code>if(ptr == -1)</code> is not an execution bug but it is wrong. The algorithm is not coded correctly. There is no arithmetic error yet code change has more potential for inducing execution bugs.  The program will fail if the value is anything except <code>-1</code>.</li>
</ul>
</li>
</ul>
<hr>
<p><strong>Bit-level numbers</strong></p>
<p>Testing for exact values can bite you. It just became easier for me to quit testing for exactly -1 than to try to out smart the compiler or interpreter or my inadvertent bugs-waiting-to-happen or the idiot maintenance programmer (sometimes that was me).</p>
<p>Binary numbers in memory have inherent problems just like base-10 does. 1/3 in base-10 is .333... to infinity. Sometimes numbers converted to binary are like that.</p>
<p>Sometimes computation induces errors. For example the sum of a taylor series added "forward" can - will - be different from adding "backwards".  I.E. 1/2 + 1/3 + 1/4 + 1/5 ......   Do this for many thousand of terms and you'll see.</p>
<p>Even integer arithmetic can be quirky in some languages. JavaScript, for example, does not have integers. All numbers are stored as floating point in memory. Google "javascript the weird parts" and you'll see funky numeric WTFs.</p>
<p><strong>end Edit</strong></p>
    </div>