<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, mine is an addition to <a href="https://codereview.stackexchange.com/a/212805/110993">Carcigenicate's answer</a>. This is taking some of the concepts one step further and refining them using <a href="https://en.wikipedia.org/wiki/Software_design_pattern" rel="noreferrer">design patterns</a></p>

<pre><code>// This part sucks, but it's necessary in POD classes
public Stats(int hp, int mp,
             int strength, int agility, int resilience, int deftness,
             int charm, int magical_mending, int magical_might) {

    this.hp = hp;
    this.mp = mp;
    this.strength = strength;
    this.agility = agility;
    this.resilience = resilience;
    this.deftness = deftness;
    this.charm = charm;
    this.magical_mending = magical_mending;
    this.magical_might = magical_might;
}
</code></pre>

<p>I agree with the comment - this does suck. The problem here is remembering what is what, when we do <code>new Stats(1, 2, 3, 4, 5, 6, 7, 8, 9)</code> it's very hard to remember what <code>6</code> is or if that's even the correct number of arguments. I even had to check <em>three times</em> to make sure it was correct and even then I found I had miscounted. To solve this problem, we can use the <a href="https://en.wikipedia.org/wiki/Builder_pattern" rel="noreferrer">Builder pattern</a>:</p>

<pre><code>public class StatsBuilder {
    private int hp;
    private int mp;
    private int strength;
    private int agility;
    private int resilience;
    private int deftness;
    private int charm;
    private int magicalMending;
    private int magicalMight;

    public StatsBuilder setHp(int hp) {
        this.hp = hp;
        return this;
    }

    public StatsBuilder setMp(int mp) {
        this.mp = mp;
        return this;
    }

    public StatsBuilder setStrength(int strength) {
        this.strength = strength;
        return this;
    }

    public StatsBuilder setAgility(int agility) {
        this.agility = agility;
        return this;
    }

    public StatsBuilder setResilience(int resilience) {
        this.resilience = resilience;
        return this;
    }

    public StatsBuilder setDeftness(int deftness) {
        this.deftness = deftness;
        return this;
    }

    public StatsBuilder setCharm(int charm) {
        this.charm = charm;
        return this;
    }

    public StatsBuilder setMagicalMending(int magicalMending) {
        this.magicalMending = magicalMending;
        return this;
    }

    public StatsBuilder setMagicalMight(int magicalMight) {
        this.magicalMight = magicalMight;
        return this;
    }

    public Stats build() {
        return new Stats(hp, mp, strength, agility, resilience, deftness, charm, magicalMending, magicalMight);
    }
}
</code></pre>

<p>Note: a lot of IDEs have support to generate this for you via refactoring tools. They can even replace any direct calls to the constructor with using the Builder. </p>

<p>Since it a <a href="https://en.wikipedia.org/wiki/Fluent_interface" rel="noreferrer">fluent interface</a> we can chain the calls, so </p>

<pre><code>new Stats(26, 4, 18, 4, 18, 5, 4, 0, 0)
</code></pre>

<p>turns into the much more descriptive, albeit longer</p>

<pre><code>new StatsBuilder()
        .setHp(26)
        .setMp(4)
        .setStrength(18)
        .setAgility(4)
        .setResilience(18)
        .setDeftness(5)
        .setCharm(4)
        .setMagicalMending(0)
        .setMagicalMight(0)
    .build()
</code></pre>

<p>We now know exactly what you're setting to what without needing to look up the values. We can even set these in any order you want.</p>

<p>The Builder can also make copies of the stats for you if you just define a method <code>Stats buildFrom(Stats otherStats)</code> that takes a <code>Stats</code> object and creates a new one copying each property. But I'm just mentioning it, you might opt for a different route.</p>

<hr>

<p>In addition to this, as a further step from removing the stats logic from the <code>Player</code> class, we can also remove the level up logic by using a <a href="https://en.wikipedia.org/wiki/Delegation_(object-oriented_programming)" rel="noreferrer">delegation</a></p>

<p>Here is what this can look like. First, we'll separate the levelling functionality:</p>

<pre><code>public class Leveller {
    public void levelUp(Player player) {
        player.getStats().setHp(player.getStats().getHP() + player.getLevel() + 5);
        player.getStats().setMp(player.getStats().getMp() + player.getLevel() + 2);
        player.getStats().setStrength(player.getStats().getStrength() + player.getLevel() + 2);
        player.getStats().setAgility(player.getStats().getAgility() + player.getLevel() + 2);
        player.getStats().setResilience(player.getStats().getResilience() + player.getLevel() + 1);
        player.getStats().setDeftness(player.getStats().getDeftness() + player.getLevel() + 2);
        player.getStats().setCharm(player.getStats().getCharm() + player.getLevel() + 1);
        player.getStats().setMagicalMending(player.getStats().getMagicalMending() + player.getLevel() * 2);
        player.getStats().setMagicalMight(player.getStats().getMagicalMight() + player.getLevel() * 2);

        player.setLevel(player.getLevel() + 1);
    }
}
</code></pre>

<p>This is verbose but can be made shorter. For example, if you implement <code>addX</code> methods, that does <code>addX(int newX) { this.x += newX }</code> for each of the attributes and maybe if you also just pass in <code>Stats</code> and <code>level</code>, so you don't have to do <code>.getStats()</code> and <code>.getLevel()</code> all the time. These are options - it's your choice. This an implementation only utilizes <code>get</code> and <code>set</code> methods for illustrative purposes.</p>

<p>Now, we can have the <code>Leveller</code> handle any levelups, thus removing that logic from the <code>Player</code> class. You can implement this like so:</p>

<pre><code>public class Player {
    // other private variables
    //. . .
    // /other private variables

    private Leveller leveller = new Leveller();

    // other methods
    // . . .
    // /other methods

    public void levelUp() {
        leveller.levelUp(this);
    }
}
</code></pre>

<p>You can even make the <code>Leveller</code> a <code>private static final</code> variable, as it's not going to change at runtime, nor do you need multiple of these objects - a single <code>Leveller</code> can handle any player.</p>

<hr>

<p>However, taking this out leads to something interesting we can do. But to get there, first let's take a look at <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html" rel="noreferrer">Java enums</a> - the most important thing about them is that unlike other languages, Java enums are entire classes by themselves and can have methods and variables. In our case, this means we can associate classes more strongly with their stats by integrating them into the enum:</p>

<pre><code>public enum PlayerClass {
    WARRIOR, PRIEST, MAGE, ... 
}
</code></pre>

<p>and </p>

<pre><code>Map&lt;PlayerClass, Stats&gt; classToStats = Map.of(
    PlayerClass.WARRIOR, new Stats(26, 4, 18, 4, 18, 5, 4, 0, 0),
    PlayerClass.PRIEST, new Stats(19, 14, 9, 14, 9, 9, 7, 18, 0)
    // ...
);
</code></pre>

<p>can be more explicitly bound together by in this:</p>

<pre><code>public enum PlayerClass {

    WARRIOR(new Stats(26, 4, 18, 4, 18, 5, 4, 0, 0)), //&lt;-- we are passing new Stats(/*...*/) into the constructor
    PRIEST(new Stats(19, 14, 9, 14, 9, 9, 7, 18, 0)),
    //...
    ; //&lt;-- the semi-colon is needed if you want to define variables, methods, or a constructor

    private final Stats startingStats;

    PlayerClass(Stats startingStats) {
        this.startingStats = startingStats;
    }

    public Stats getStartingStats() {
        return startingStats; //it might be easier you can return a copy here but I'm keeping the code simple
    }
}
</code></pre>

<p>You can, of course, use the <code>StatsBuilder</code> to be more clear. I opted for conciseness and closeness to the previous example.</p>

<p>At any rate, now we have a more explicitly bound stats to classes because they really aren't separable - you can't have the warrior without the warrior's stats or vice versa. When we define them in the same place we enforce that binding and make it clear how it works. Otherwise if you come back to this code in a year, you might struggle to find where the connection between class and stats was.</p>

<hr>

<p>So, let's now come back to <code>Leveller</code> and what is the interesting thing to do here. We can have a <code>Leveller</code> as a variable defined in the <code>PlayerClass</code> enum. It doesn't make sense <em>right now</em> as there is a single level up mechanic defined, however, it might if we want a separate ones that can vary per class. For now, let's make it simple - we'll define a <code>MagicLeveller</code> and <code>MightLeveller</code> that will increase the stats for mages and fighters.</p>

<p>Here, we can use the <a href="https://en.wikipedia.org/wiki/Template_method_pattern" rel="noreferrer">Template Method design pattern</a>. First we can define <code>Leveller</code> to be an abstract class - we always want to increase the level but the stat increases can be different:</p>

<pre><code>public abstract class Leveller {
    public void levelUp(Player player) {
        this.incrementStats(player);

        player.setLevel(player.getLevel() + 1); //&lt;-- common levelup code
    }

    protected abstract void incrementStats(Player player); //&lt;-- to be implemented by subclasses
}
</code></pre>

<p>Now we can split the stat progression </p>

<pre><code>public class MagicLeveller extends Leveller {
    public void incrementStats(Player player) {
        player.getStats().setHp(player.getStats().getHP() + player.getLevel() + 5);
        player.getStats().setMp(player.getStats().getMp() + player.getLevel() + 2);
        player.getStats().setStrength(player.getStats().getStrength() + player.getLevel() + 2);
        player.getStats().setAgility(player.getStats().getAgility() + player.getLevel() + 2);
        player.getStats().setResilience(player.getStats().getResilience() + player.getLevel() + 1);
        player.getStats().setDeftness(player.getStats().getDeftness() + player.getLevel() + 2);
        player.getStats().setCharm(player.getStats().getCharm() + player.getLevel() + 1);
        player.getStats().setMagicalMending(player.getStats().getMagicalMending() + player.getLevel() * 2);
        player.getStats().setMagicalMight(player.getStats().getMagicalMight() + player.getLevel() * 2);
    }
}
</code></pre>

<p>and </p>

<pre><code>public class MightLeveller extends Leveller {
    protected void incrementStats(Player player) {
        player.getStats().setHp(player.getStats().getHP() + player.getLevel() + 10);
        player.getStats().setMp(player.getStats().getMp() + player.getLevel() + 1);
        player.getStats().setStrength(player.getStats().getStrength() + player.getLevel() + 4);
        player.getStats().setAgility(player.getStats().getAgility() + player.getLevel() + 4);
        player.getStats().setResilience(player.getStats().getResilience() + player.getLevel() + 2);
        player.getStats().setDeftness(player.getStats().getDeftness() + player.getLevel() + 1);
        player.getStats().setCharm(player.getStats().getCharm() + player.getLevel() + 1);
        player.getStats().setMagicalMending(player.getStats().getMagicalMending() + player.getLevel() * 1);
        player.getStats().setMagicalMight(player.getStats().getMagicalMight() + player.getLevel() * 1);
    }
}
</code></pre>

<p>The values are for illustration purposes. I'm not sure if they make sense in your case but it's just to show you now have two different progression paths. So, now we can bind these paths to the classes explicitly:</p>

<pre><code>public enum PlayerClass {

    WARRIOR(
            new Stats(26, 4, 18, 4, 18, 5, 4, 0, 0),
            new MightLeveller() //&lt;-- this class progresses like a physical fighter
    ),
    PRIEST(
            new Stats(19, 14, 9, 14, 9, 9, 7, 18, 0),
            new MagicLeveller() //&lt;-- this class progresses like a spellcaster
    ),
    MAGE(
            new Stats(18, 16, 4,18, 7, 14, 7, 0, 18),
            new MagicLeveller() //&lt;-- this class also progresses like a spellcaster
    )
    //...
    ; 

    private final Stats stats;
    private final Leveller leveller;

    PlayerClass(Stats stats, Leveller leveller) {
        this.stats = stats;
        this.leveller = leveller;
    }

    public Stats getStats() {
        return stats;
    }

    public Leveller getLeveller() {
        return leveller;
    }
}
</code></pre>

<p>In the <code>Player</code> class, the <code>levelUp</code> method can now look like this</p>

<pre><code>public void levelUp() {
    this.playerClass.getLeveller().levelUp(this);
}
</code></pre>

<p>Which means that the <code>Player</code> still doesn't need to have the logic for levelling nor does it even know or care what class it is. All that logic is separated away. We can easily have more levelling mechanics, even one for for each class if we wanted. If we made added the following method to <code>PlayerClass</code></p>

<pre><code>public void levelUp(Player player) {
    this.leveller.levelUp(player)
}
</code></pre>

<p>then the <code>Player</code> class doesn't even need to know or care about what a <code>Leveller</code> is, as it would just call <code>this.playerClass.levelUp(this)</code>. Perhaps we choose to change this in the future and we don't need to touch the <code>Player</code> class. </p>

<hr>

<p>Just a note on delegation here: This is a good example of delegation versus inheritance. Inheritance defines a <em>is-a</em> relationship, while delegation defines a <em>has-a</em> relationship. In this case we define that:</p>

<ul>
<li>The concrete level up mechanic (<code>MightLeveller</code>) <strong>is</strong> a type of level up mechanic (<code>extends Leveller</code>)</li>
<li>a Warrior <strong>has</strong> starting stats of <code>26, 4, 18, 4, 18, 5, 4, 0, 0</code> </li>
<li>it also <strong>has</strong> a levelling progression for might heroes</li>
<li>the Warrior <strong>is</strong> a <code>PlayerClass</code>. Although that is a little less clear here as it's an enum (not the normal inheritance route)</li>
</ul>

<p>It's worth emphasising because the delegation vs inheritance comes up a lot in object oriented programming but I find it's not explained well in the beginning, which leads to some misunderstandings later on. By structuring our classes using delegation, we have a lot of freedom about their components.</p>

<p>If you've noticed, this means that our player <strong>has</strong> a <code>PlayerClass</code> as opposed to <strong>is</strong> a <code>PlayerClass</code> (that would have been the case if it extended <code>PlayerClass</code> somehow). In this case the natural language root of is/has can be murky - it makes a bit more sense to say that "He is a Warrior" as opposed to "He has the Warrior class", although they can both be correct. And indeed, we could model both of these in the system, if we wanted. However, having the class and its associated mechanics as a delegate, allows more freedom in the system because it follows the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">single responsibility principle</a> - the <code>Player</code> doesn't need to know about how classes exactly operate in order to function. <code>Player</code> only needs to know it can get its starting stats and increase its stats each level and <em>somebody else is responsible</em> for how that is implemented.</p>

<hr>

<p>Another note about <code>Leveller</code> and its associated subclasses. I've chosen here to make it an abstract class. You can also opt to make it an interface and so <code>MagicLeveller</code> and <code>MightLeveller</code> would not be subclasses but implementations of the interface. Both are viable options. My decision for an abstract class here was partly to showcase the template method design pattern and thus have common functionality. For example, you can have a baseline stat growth for all classes - let's say everybody gets +1 to all stats but Might classes get further bonus to Strength and HP, while Magic classes get bonus to Magical Might. And so on.</p>
    </div>