<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Make immutable class members const</h2>

<p>If you have a member of a class that is set once at construction time, but will never change, then make it const. For example, in <code>Stock</code>:</p>

<pre><code>class Stock {
  const std::string name;
  ...
  public:
  Stock(..., std::string stock_name, ...): name(stock_name) {
    ...
  }
</code></pre>

<p>And once it is <code>const</code>, you can safely make <code>name</code> public and remove <code>get_name()</code>.</p>

<h2>Avoid circular references</h2>

<p>Your stock exchanges contain stocks, but stocks also refer to stock exchanges. This circular reference is unnecessary and might give you problems; for example you had to add forward references to <code>class Stock_Observer</code> and <code>class Stock</code> in <code>stock_exchange.hpp</code>. Conceptually, a stock is not tied to a specific stock exchange, so just remove the member variable <code>Stock::se</code>.</p>

<p>Of course, the problem is now how to notify observers when the stock price changes. One way to handle that is to allow one to set a callback function in a <code>Stock</code>, for example:</p>

<pre><code>#include &lt;functional&gt;

class Stock {
  std::function&lt;void(Stock &amp;)&gt; price_changed_callback;
  double price;
  ...
  public:
  void set_price_changed_callback(std::function&lt;void(Stock &amp;)&gt; callback) {
    price_changed_callback = callback;
  }

  void set_price(double p) {
    price = p;
    if (price_changed_callback)
      price_changed_callback(*this);
  }
  ...
}
</code></pre>

<p>Then the stock exchange calls <code>set_price_changed_callback()</code> when it registers the stock, and sets it to something like its <code>notify_observers()</code> function.
If you want to have a <code>Stock</code> be part of multiple exchanges, then you'd better look for a library that handles more complex callback registration for you, like libsigc++.</p>

<p>Another option would be to move <code>set_price()</code> to the stock exchange itself.</p>

<h2>Think carefully about ownership</h2>

<p>In your code, stock exchanges have pointers to stocks, and stocks have a pointer to a stock exchange. But what if a stock goes out of scope before a stock exchange, or vice versa? It's not a problem in your simple <code>main()</code>, but once your code grows the chance you will make a mistake will increase. It's best to use the right tools to control ownership.</p>

<p>One possibility is to use <code>shared_ptr&lt;&gt;</code>. Make it so you can only create a <code>shared_ptr</code> to a <code>Stock</code>:</p>

<pre><code>class Stock {
  private:
  Stock() { ... }

  public:
  static std::shared_ptr&lt;Stock&gt; make_stock(args) {
    return std::make_shared&lt;Stock&gt;(args);
  }
}
</code></pre>

<p>And have <code>Stock_Exchange</code> keep a map of <code>shared_ptr</code>s:</p>

<pre><code>class Stock_Exchange {
  std::unordered_map&lt;std::string, std::shared_ptr&lt;Stock&gt;&gt; registered_stocks;
  ...
}
</code></pre>

<p>Alternatively, if you'd only ever have stocks associated with a single exchange, you could have <code>Stock_Exchange</code> take direct ownership:</p>

<pre><code>class Stock_Exchange {
  std::unordered_map&lt;std::string, Stock&gt; registered_stocks;
  ...
  public:
  register_stock(std::string name, double price) {
    register_stocks.emplace(std::make_pair(name, Stock(name, price));
  }
}
</code></pre>

<p>Of course, if you go that route there is little point in having a <code>class Stock</code> anymore.</p>

<h2>Use references when iterating over a container where possible</h2>

<p>In this part of your code:</p>

<pre><code>for(auto o : stock_observers[stock_name])
{
    o-&gt;notify(stock_name);
}
</code></pre>

<p>You are actually making a copy of each observer. It is almost always better to use a reference when iterating through a container:</p>

<pre><code>for(auto &amp;o : stock_observers[stock_name])
{
    o-&gt;notify(stock_name);
}
</code></pre>
    </div>