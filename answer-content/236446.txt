<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>CRTP</h2>

<p><em>Caveat: It's not quite clear what the <code>&lt;a&gt;</code> template parameter is doing/</em></p>

<p>For my understanding your option1 defeats the purpose of CRTP. That is, if it's even trying to do CRTP. It's not clear due to the template parameter <code>&lt;a&gt;</code> which appears to have no purpose. Fact is, Option1 It's working just like normal polymorphism, see below. </p>

<p>In the context of polymorphism the purpose of CRTP is usually to avoid vtable calls / runtime dispatch. The point is to convert runtime polymorphism to compile time polymorphism. Your Option 1 does not do that, as far as I can see.</p>

<p>In terms of "what's different between these 2 Options", I have put a modified version of <a href="https://godbolt.org/z/2RWyqz" rel="nofollow noreferrer">your code on godbolt</a>. Modified only to be able to turn on <code>-O3</code> without the compiler removing the programme. The inheritance code is the same. You can clearly see that Derived1 has a vtable, and Derived2 does not. </p>

<p>Your Option1 also seems to lose one of the strengths of runtime polymorphism. With normal polyphism where <code>Derived</code> inherits from <code>Base</code> (no CRTP, not even your option1), all Derived classes inherit from the one base. Which means we can make a <code>std::vector&lt;Base*&gt;</code> or <code>std::vector&lt;unique_ptr&lt;Base&gt;&gt;</code>, ie hold pointers to many different types of objects in the same container. We can't do that with compile time / CRTP type polymorphism. But your Option1 suffers from Vtable and we still can't put them all in a <code>vector</code> because they don't have a common base. (ie <code>Base&lt;int&gt;*</code> and <code>Base&lt;D2&gt;*</code> won't go in the same <code>vector</code>. Unless <code>&lt;a&gt;</code> will one of a limited set loike <code>int</code> and <code>float</code> which can then fit a vector - again, not clear). Fact is that "proper" compile time polymorphism (see below), makes it hard/impossible to put different derived types in a collection. </p>

<p>I found <a href="https://youtu.be/jBnIMEb2GhA?t=1098" rel="nofollow noreferrer">this video</a> helpful (link is to the CRTP code moment) to understand it, as it explores the various options, and, based on a practical example, shows their implementation and compares their performance. </p>

<h2>Option2</h2>

<p>Your option 2 comes closer, but overcomplicates things as far as I can see. You don't need the Derived to be templated, you just need it to be inheriting from the Base specialised with the Derived type: <code>Base&lt;Derived&gt;</code>.  -- If you have an application specific need to make Derived templated, beyond CRTP, then that was not shown in your code, and yes, in that case, your Option 2 code is correct for "proper" CRTP. </p>

<h2>Proposed solution</h2>

<p>So by just cleaning up the above-mentioned over-complication, this works fine, doesn't it? (Note that I am showing a single Base with 2 Derived classes inheriting from it): </p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

// CRTP as explained in:
// https://youtu.be/jBnIMEb2GhA?t=1098
template&lt;typename D&gt;
class Base {
public:
  void f2() { std::cout &lt;&lt; static_cast&lt;D*&gt;(this)-&gt;f1() &lt;&lt; "\n"; }
};

class Derived1 : public Base&lt;Derived1&gt; {
public:
  std::string f1() { return "derived1"; }
};


class Derived2 : public Base&lt;Derived2&gt; {
public:
  std::string f1() { return "derived2"; }
};


int main() {
    Derived1 thing1;
    thing1.f2();
    Derived2 thing2;
    thing2.f2();
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>derived1
derived2
</code></pre>

<h2>More inheritance options, or rather...</h2>

<p>If you are looking at a re-design, you might also want to <a href="https://www.youtube.com/watch?v=QGcVXgEVMJg" rel="nofollow noreferrer">watch this from Sean Parent</a>, which is sort of "the next level", ie (almost) avoid inheritance altogether:</p>

<p>Or, the same subject, explained in a clear and <a href="https://foonathan.net/2020/01/type-erasure/#content" rel="nofollow noreferrer">recent blogpost here</a>. </p>

<p>These links are exploring their "type erasure" technique not for performance reasons, but to be able to remove tight inheritance coupling between different components. </p>

<h2>Performance motivation...be careful</h2>

<p>Note that if you are considering CRTP for performance reasons, because it can avoid the vtable, then <em>make sure you measure</em> before and after. The lady in the cppcon video does it nicely and the gains exist in her case, but they are not "ground breaking". Any gains are typically mostly due to the compiler's <em>inability to inline the calls</em> rather then the <em>indirection via the vtable</em>. So always measure, please. </p>

<p>Hope that helps. If I have misunderstood what you're trying to do, please come back in the comments. </p>
    </div>