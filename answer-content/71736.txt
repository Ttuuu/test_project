<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>These <code>using</code> directives are not needed and can be safely removed:</p>

<pre><code>using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
</code></pre>

<p>Method names should be <code>PascalCase</code>:</p>

<ul>
<li><code>getBackgroundURL</code> =&gt; <code>GetImageUrl</code></li>
<li><code>websiteExists</code> =&gt; <code>WebsiteExists</code></li>
<li><code>getResolutionExtension</code> =&gt; <code>GetResolutionExtension</code></li>
<li><code>downloadBackground</code> =&gt; <code>DownloadImage</code></li>
<li><code>getBackgroundPath</code> =&gt; <code>GetImageFilePath</code></li>
<li><code>saveBackground</code> =&gt; <code>SaveBackground</code> - this would be more precise as <code>SaveImageFile</code></li>
<li><code>setBackground</code> =&gt; <code>SetBackground</code> - this would be more precise as <code>SetDesktopWallpaper</code></li>
</ul>

<p><code>URL</code> as part of a member name, should be <code>Url</code>; as a parameter name, should be <code>url</code>.</p>

<p>I would move the nested types <code>PicturePosition</code> and <code>NativeMethods</code> to another file, named after the type (respectively, <code>PicturePosition.cs</code> and <code>NativeMethods.cs</code>).</p>

<p>In this snippet:</p>

<blockquote>
<pre><code>RegistryKey key = Registry.CurrentUser.OpenSubKey(@"Control Panel\Desktop", true);
switch (style)
{
    case PicturePosition.Tile:
        key.SetValue(@"PicturePosition", "0");
        key.SetValue(@"TileWallpaper", "1");
        break;
</code></pre>
</blockquote>

<p>There's a possibility for a <code>NullReferenceException</code> on every access of the <code>key</code> object, including <code>key.Close()</code> - also, since .net 4.0 the <code>RegistryKey</code> implements <code>IDisposable</code>, which means it should be wrapped with a <code>using</code> block and not closed explicitly:</p>

<pre><code>try
{
    using(var key = Registry.CurrentUser.OpenSubKey(@"Control Panel\Desktop", true))
    {
        switch (style)
        {
            //...
        }
    }
}
catch (NullReferenceException)
{
    Console.WriteLine("Specified registry key was not found.");
}
</code></pre>

<p>I'm not a big fan of that <code>switch</code> block, but abstracting a concept here would probably be overkill.</p>

<p>The verbatim specifier on <code>@"PicturePosition"</code> and <code>@"TileWallpaper"</code> isn't needed, as there are no escapes/backslashes in these strings.</p>

<p>I like that your type declarations are <em>consistently</em> explicit, but I would personally prefer them <em>consistently</em> implicit (i.e. using <code>var</code>) - but the keyword here is only "consistently", so that's just my own personal preference here.</p>

<p>This notation makes it hard to, say, add attributes to your enums, or just to maintain them in general:</p>

<blockquote>
<pre><code>public enum PicturePosition
{
    Tile, Center, Stretch, Fit, Fill
}
</code></pre>
</blockquote>

<p>Enum members should be laid out vertically:</p>

<pre><code>public enum PicturePosition
{
    Tile,
    Center,
    Stretch,
    Fit,
    Fill
}
</code></pre>

<hr>

<p>This is a nice missed opportunity for <code>string.Concat</code>:</p>

<blockquote>
<pre><code>String potentialURL = "_" + resolution.Width + "x" + resolution.Height + ".jpg";
</code></pre>
</blockquote>

<p>Overall I like your methods, they're small and relatively specialized, and are generally well named. I'd consider regrouping them into similar-themed classes:</p>

<ul>
<li><code>WebClient</code> and <code>JsonConvert</code>-related stuff into one.</li>
<li>IO-related stuff into another.</li>
</ul>

<p>This would only leave <code>Main</code> and <code>SetBackground</code> in the <code>Program</code> class, resulting in 3 smaller, specialized classes.</p>
    </div>