<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Though I think the problem here is not speed, but number of code lines.
For short code arrays would be best.</p>

<p>As extra in pseudo-code short (readable) code (with arrays):</p>

<pre><code>// Determine equality between i[] and j[].
dim k(1 to 4)     // Indices into j[].
for m = 1 to 4
    k[m] = m
for m = 1 to 4
    found = false
    for n = m to 4
        if (i[m] == j[k[n]])
            found = true
            t = k[m]
            k[m] = k[n]
            break
    next n
    if !found fail
next m
</code></pre>

<p>One can roll this out using variables:</p>

<pre><code>// (First version.)
// Determine equality between {i1, i2, i3, i4}] and {j1, j2, j3, j4}.
if i1 != j1
    if i1 != j2
        if i1 != j3
            if i1 != j4
                cycle
            else
                j4 = j1
        else
            j3 = j1
    else
        j2 = j1
if i2 != j2
    if i2 != j3
        if i2 != j4
            cycle
        else
            j4 = j2
    else
        j3 = j2
if i3 != j3
    if i3 != j4
        cycle
    else
        j4 = j3
if i4 != j4
    cycle
success
</code></pre>

<p>Which is the same as:</p>

<pre><code>// (Second version.)
// Determine equality between {i1, i2, i3, i4}] and {j1, j2, j3, j4}.
if i1 == j4
    j4 = j1
else if i1 == j3
    j3 = j1
else if i1 == j2
    j2 = j1
else if i1 != j1

if i2 = j4
    j4 = j2
else if i2 = j3
    j3 = j2
eise if i2 != j2
    cycle

if i3 = j4
    j4 = j3
else if i3 != j3
    cycle

if i4 != j4
    cycle
</code></pre>

<p>Checking for no duplicates should be done first, and can be for instance:</p>

<pre><code>if ((i1-i2)*(i1-i3)*(i1-i4)*(i2-i3)*(i2-i4) == 0) cycle
</code></pre>

<p>(Disregarding overflow of multiplication to 0!)</p>

<p><strong><em>As code review</em></strong></p>

<p>The array code version I gave, as that is reminiscant to your use of q1, q2, q3, q4: a kind of indexing. I would use <strong>primes</strong> in order to prevent a mix-up with <code>1*4=4</code> and <code>2*2=4</code>. (Or OR-ing of bit masks.)</p>

<p>For the rest the code has more the feel of assembly language (my code included).</p>

<p>The main optimisation would be in the <em>prelude</em> to this phase in coding: keeping a <em>set</em>, a sorted unique array.</p>
    </div>