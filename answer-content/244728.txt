<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As was already mentioned in the comments, a <code>switch</code> statement could be used to clean up the sets of <code>if</code> statements. Another option would be to abstract the similar callback functions passed to <code>.reduce()</code>- perhaps using partially applied functions to accept parameters - e.g. the minimum values in conditions like <code>currentChamp.getCost() &lt;= 3</code>.</p>
<p>It seems like <code>let</code> is used for most variables. It is wise to default to using <code>const</code> to avoid accidental re-assignment. When you decide you do need to reassign a value then use <code>let</code>.</p>
<p>The method <code>Pool::getChampProbability()</code> could use <code>this.champPool.find()</code> instead of <code>this.champPool.findIndex()</code>, since the <code>index</code> is only used to dereference an array element.  This would mean <code>0</code> should be returned if <code>find()</code> returned <code>undefined</code> (instead of <code>if (poolIndex === -1) return 0;</code>).</p>
<p>The method <code>Pool::getWholePool()</code> has a single use variable- i.e. <code>allPool</code>. That variable can be eliminated. Use of a linter would help find things like this.</p>
<p>The <code>else</code> keywords can be eliminated in many spots following a <code>return</code> in a conditional e.g. many of the elseâ€™s in <code>Pool::getPoolBasedOnLevel()</code></p>
    </div>