<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You do not need to iterate multiple times over the file. You just need to keep a record of all names seen so far and skip lines with already seen names. This takes <span class="math-container">\$\mathcal{O}(n)\$</span> additional memory, but only <span class="math-container">\$\mathcal{O}(n)\$</span> time.</p>

<p>It assumes that the file is already in the right order (i.e. you always want to keep the first time a name appears). Otherwise you would have to sort it first by time (also included further down).</p>

<p>This is particularly easy to implement, because it already exists as an <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> recipe</a>:</p>

<blockquote>
<pre><code>from itertools import filterfalse

def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
</code></pre>
</blockquote>

<p>In this case you can use it like this:</p>

<pre><code>from operator import itemgetter
import sys

with open(sys.argv[2]) as in_file, open("result2.csv", "w") as out_file:
    reader, writer = csv.reader(in_file), csv.writer(out_file)
    for row in unique_everseen(reader, key=itemgetter(0)):
        writer.writerow((row[0], row[6], row[9]))
</code></pre>

<p>If you do need to sort it, you can just add it before the filtering:</p>

<pre><code>for row in unique_everseen(sorted(reader, key=itemgetter(9)), key=itemgetter(0)):
</code></pre>

<p><a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> is basically just this function:</p>

<pre><code>def itemgetter(i):
    return lambda col: col[i]
</code></pre>

<hr>

<p>If you always have to sort anyway, you can sort by both name and date and use the slightly easier recipe <code>unique_justseen</code>, which has basically no memory overhead:</p>

<blockquote>
<pre><code>from itertools import groupby

def unique_justseen(iterable, key=None):
    "List unique elements, preserving order. Remember only the element just seen."
    # unique_justseen('AAAABBBCCDAABBB') --&gt; A B C D A B
    # unique_justseen('ABBCcAD', str.lower) --&gt; A B C A D
    return map(next, map(itemgetter(1), groupby(iterable, key)))
</code></pre>
</blockquote>

<pre><code>from operator import itemgetter
import sys

with open(sys.argv[2]) as in_file, open("result2.csv", "w") as out_file:
    reader, writer = csv.reader(in_file), csv.writer(out_file)
    sorted_rows = sorted(reader, key=itemgetter(0, 9), reverse=True)
    for row in unique_justseen(sorted_rows, key=itemgetter(0)):
        writer.writerow((row[0], row[6], row[9]))
</code></pre>
    </div>