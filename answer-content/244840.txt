<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I may be wrong, but I think you're trying to solve an XY-problem. If I understand the term "<code>DescriptiveStatisticalSet</code>", you want to provide a data set class, that exposes some  significant statistical properties and therefore the generic type parameter of the set must be a numeric type of some kind (int, double, ??). To fix that, you try to develop a certain <code>int</code> and <code>double</code> data type, that you can constraint the <code>DescriptiveStatisticalSet&lt;T&gt;</code>'s type parameter with. I think you'll get tired of that design rather quickly, because you'll have to convert to/from this "intermediate" type constantly, whenever you'll want to use the set.</p>
<p>I think I would go in another direction by only allow the creation of <code>DescriptiveStatisticalSet&lt;T&gt;</code> for certain data types, which can be done in the following way:</p>
<pre><code>  // For this illustration, I've just implemented the Set&lt;T&gt; as a generic list sub class. Yours is surely more sophisticated.
  public class Set&lt;T&gt; : List&lt;T&gt;
  {
    public Set()
    {

    }

    public Set(IEnumerable&lt;T&gt; data) : base(data)
    {

    }
  }


  public abstract class DescriptiveStatisticalSet&lt;T&gt; : Set&lt;T&gt;
  {
    protected DescriptiveStatisticalSet(IEnumerable&lt;T&gt; data) : base(data)
    {

    }

    public virtual T Average =&gt; default;
    public virtual T Median =&gt; default;
    public virtual T StdDev =&gt; default;
    // TODO public other key values...
  }

  public static class DescriptiveStatisticalSet
  {
    private class IntDescriptiveStatisticalSet : DescriptiveStatisticalSet&lt;int&gt;
    {
      public IntDescriptiveStatisticalSet(IEnumerable&lt;int&gt; data) : base(data)
      {

      }

      public override int Median
      {
        get
        {
          var ordered = this.OrderBy(v =&gt; v).ToArray();
          if (Count % 2 == 0) return (ordered[Count / 2] + ordered[Count / 2 + 1]) / 2;
          return ordered[Count / 2];
        }
      }
    }

    private class DoubleDescriptiveStatisticalSet : DescriptiveStatisticalSet&lt;double&gt;
    {
      public DoubleDescriptiveStatisticalSet(IEnumerable&lt;double&gt; data) : base(data)
      {

      }

      public override double Median
      {
        get
        {
          var ordered = this.OrderBy(v =&gt; v).ToArray();
          if (Count % 2 == 0) return (ordered[Count / 2] + ordered[Count / 2 + 1]) / 2.0;
          return ordered[Count / 2];
        }
      }

    }

    public static DescriptiveStatisticalSet&lt;int&gt; Create(IEnumerable&lt;int&gt; data)
    {
      return new IntDescriptiveStatisticalSet(data);
    }

    public static DescriptiveStatisticalSet&lt;double&gt; Create(IEnumerable&lt;double&gt; data)
    {
      return new DoubleDescriptiveStatisticalSet(data);
    }

  }
</code></pre>
<hr>
<p>Used as:</p>
<pre><code>  var doubleStatSet = DescriptiveStatisticalSet.Create(new[] { 1.2, 3.4, 5.6 });
  Console.WriteLine(doubleStatSet.GetType().Name);
  Console.WriteLine(doubleStatSet.Median);
  var intStatSet = DescriptiveStatisticalSet.Create(new[] { 1, 2, 3, 4, 5 });
  Console.WriteLine(intStatSet.GetType().Name);
  Console.WriteLine(intStatSet.Median);

  var decimalStatSet = DescriptiveStatisticalSet.Create(new[] { 1.2m, 3.4m, 5.6m }); // ERROR wont compile
</code></pre>
<hr>
<p>A simpler construct that builds on the same principles is to always operate on <code>double</code> in <code>DescriptiveStatisticalSet</code> and then only provide two constructors: one that takes a <code>double</code> data set and another taking an <code>int</code> data set:</p>
<pre><code>  public class DescriptiveStatisticalSet : Set&lt;double&gt;
  {
    public DescriptiveStatisticalSet(IEnumerable&lt;double&gt; data) : base(data)
    {
    }

    public DescriptiveStatisticalSet(IEnumerable&lt;int&gt; data) : this(data.Cast&lt;double&gt;())
    {

    }

    public double Average =&gt; ((IEnumerable&lt;double&gt;)this).Average();
    public double Median =&gt; default;
    public double StdDev =&gt; default;
    // TODO public other key values...

  }
</code></pre>
    </div>