<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>;</code></h1>

<p>why all the <code>;</code>. Python is not JS. They don't do any harm to the program, but they are unnecessary and hamper the readability</p>

<h1>1 letter variable names</h1>

<p>I try to avoid those as much as possible, unless they are the standard jargon in for example mathematical formula's, <code>i</code> as counter or <code>x</code> and <code>y</code> as coordinate</p>

<h1>Comments</h1>

<p>As already noted in the other answers. Comments should explain why you did something. What you do should be clear from the code, variable names, .... They should explain the edge cases, limitations, why you do the -1 to get to 0-based indexing.</p>

<p>Part of this can be helped by splitting the code into smaller functions with their doctstring</p>

<h1>reassigning variable names</h1>

<p>Like you do in <code>S = S.split(' ');</code> is a practice that leads to simple errors. Better to give the parsed product another name</p>

<h1>split the work in functions</h1>

<p>Your <code>Solution</code> method does a lot of work. It 
- translates the input string
- assembles the plane
- iterates over the rows
- asks <code>sliceMatrix</code> the number of free clusters
- sums the number for all rows</p>

<p>Better would be to split this into more functions</p>

<h1>translating the input string</h1>

<p>A simple method that translates the coordinates to row and column indices can be as simple as:</p>

<pre><code>def translate_seats(input_string):
    """
    Translates the input string to 0-indexed seat, row, column tuples

    skips the row "I". 
    case insensitive

    example: 
    "1A 1B 1F 2A 2B 2C 2D 3A 3C 3D 4A 4B 4E 5A 6K"
    --&gt; [
            ("1A", 0, 0),
            ("1B", 0, 1),
            ("1F", 0, 5),
            ("2A", 1, 0),
            ("2B", 1, 1),
            ("2C", 1, 2),
            ("2D", 1, 3),
            ("3A", 2, 0),
            ("3C", 2, 2),
            ("3D", 2, 3),
            ("4A", 3, 0),
            ("4B", 3, 1),
            ("4E", 3, 4),
            ("5A", 4, 0),
            ('6K', 5, 9),
        ]
    """
    if not input_string:
        return
    COLUMNS = {
        "a": 0,
        "b": 1,
        "c": 2,
        "d": 3,
        "e": 4,
        "f": 5,
        "g": 6,
        "h": 7,
        "j": 8,
        "k": 9,
    }
    for seat in input_string.split(" "):
        row = int(seat[:-1]) - 1
        column = COLUMNS[seat[-1].lower()]
        yield seat, row, column
</code></pre>

<p>The docstring immediately makes clear what this method does, and it being separate enables easy testing</p>

<h1>'Building' the plane</h1>

<p>Instead of 0 as placeholder for an empty seat, I've use <code>None</code>, since I think this better describes the chair being empty</p>

<pre><code>def assemble_plane(rows, seats, columns=10):
    """
    &lt; docstring &gt;
    """
    plane = [
        [None] * columns
        for _ in range(rows)
    ]
    for seat, row, column in translate_seats(seats):
        plane[row][column] = seat
    return plane
</code></pre>

<blockquote>
<pre><code>rows = 7
seats = "1A 1B 1F 2A 2B 2C 2D 3A 3C 3D 4A 4B 4E 5A"
assemble_plane(rows, seats, columns=10)
</code></pre>
</blockquote>

<pre><code>[['1A', '1B', None, None, None, '1F', None, None, None, None],
 ['2A', '2B', '2C', '2D', None, None, None, None, None, None],
 ['3A', None, '3C', '3D', None, None, None, None, None, None],
 ['4A', '4B', None, None, '4E', None, None, None, None, None],
 ['5A', None, None, None, None, None, None, None, None, None],
 [None, None, None, None, None, None, None, None, None, None],
 [None, None, None, None, None, None, None, None, None, None]]
</code></pre>

<p>I've added <code>columns</code> as an optional argument, should you ever wish wider or narrower planes.</p>

<p>In the inner loop, <code>[None] * columns</code> works since a new list is generated for each row, but the outer loop needs the <code>for _ in range(rows)</code> instead of <code>* rows</code></p>

<h1><code>sliceMatrix</code></h1>

<p>Has a number of things wrong. <code>C</code> and <code>i</code> are not used. It prints and calculates. If you want to see what happens, you either use a debugger, or use the logging module.</p>

<p>Instead of counting the number of <code>0</code>s, you can also use the <code>any()</code> builtin if you used a <code>False</code>y placeholder for empty seats to test whether any of the seats is occupied.</p>

<p>Instead of the <code>for</code>-loop, I would make this an explicit <code>while</code>-loop with your own indexer (<code>location</code>)</p>

<p>I changed the magic number 4 you had in your method to an optional argument.</p>

<pre><code>import logging
def clusters_in_row(row, cluster_length=4):
    """
    &lt; docstring &gt;
    """
    counter = 0
    location = 0

    while location &lt; len(row) - cluster_length + 1:
        # no need to check the last 3 seats for a cluster of 4
        my_slice = row[location : location + cluster_length]
        if any(my_slice): # an occupied seat, move on
            location += 1
            continue
        counter += 1
        logging.debug(f"empty cluster found starting on {location}")
        location += cluster_length
    return counter
</code></pre>

<p>Yet again, this is a small function whose function is clear, and can be independently tested</p>

<h1>putting it together</h1>

<pre><code>def solution(rows: int, seats: str):
    columns = 10 # plane is 10 seats wide
    cluster_length = 4
    plane = assemble_plane(rows, seats, columns=columns)
    total = 0

    for i, row in enumerate(plane, 1):
        empty_clusters = clusters_in_row(row, cluster_length=cluster_length)
        logging.debug(f"row {i} has {empty_clusters} empty clusters")
        total += empty_clusters
    return total
</code></pre>

<p>If you don't need the extra debug logging, you can even use the builtin <code>sum</code></p>

<pre><code>def solution(rows: int, seats: str):
    columns = 10  # plane is 10 seats wide
    cluster_length = 4
    plane = assemble_plane(rows, seats, columns=columns)
    total = 0

    return sum(
        clusters_in_row(row, cluster_length=cluster_length) for row in plane
    )
</code></pre>
    </div>