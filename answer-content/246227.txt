<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a short review;</p>
<ul>
<li><p>Whenever I deal with search algorithms, I like to use <code>haystack</code> and <code>needle</code> as variable names, they are more evocative then <code>str1</code> and <code>str2</code></p>
</li>
<li><p>There are no comments, I think you need to comment why you do <code>const set = new Set([...str2]);</code> The rest of the code is obvious once the reader figures that one out</p>
</li>
<li><p>For the counting part, there are really 3 strategies;</p>
<ul>
<li>use <code>String.split()</code> Fast, uses memory though</li>
<li>use <code>String.match()</code> Fast, uses more memory though</li>
<li>use <code>String.indexOf()</code> Somehow slow nowadays, least memory</li>
</ul>
<p>So I think your approach is fine. More research <a href="https://stackoverflow.com/questions/4009756/how-to-count-string-occurrence-in-string">here</a>.</p>
</li>
</ul>
<p>This is a counter proposal with the above in mind;</p>
<pre><code>function scramble(haystack, needle) {
  if (haystack.length &lt; needle.length) {
    return false;
  }
  //"Hello World" -&gt; Set('H', 'e', 'l','o','w','r','d')
  const uniqueCharacters = new Set([...needle]);
  return Array.from(uniqueCharacters).every(c =&gt; occurrences(needle,c) &lt;= occurrences(haystack, c));
}

function occurrences(haystack, needle){
  return haystack.split(needle).length - 1;
}
</code></pre>
    </div>