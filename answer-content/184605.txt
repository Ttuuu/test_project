<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks nice.</p>

<p>Here are a few detais:</p>

<h2>In <code>find_max_len</code></h2>

<p>The name <code>max_length</code> suggests an positive integer value corresponding to a length. We actually use it for a string, which may be slightly confusing.</p>

<p>At every iteration, you compute the length of 2 strings which is probably more than required for an optimal strategy.</p>

<p>You are lucky because the problem you are trying to solve has a generic solution : <a href="https://docs.python.org/3.6/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> which in your case gives <code>return max(text, key=len, default='')</code> (I've kept <code>''</code> as a default value as it corresponds to the current behavior but maybe an exception is a more desirable way to handle an empty list).</p>

<h2>In <code>sanitize_for_url</code></h2>

<p>The docstring says "alphanumeric" but the regexp does not include numbers. Also, if your pont is just to make an URL from a string, you may find better option in the <a href="https://docs.python.org/3.2/library/urllib.parse.html#urllib.parse.urlencode" rel="nofollow noreferrer"><code>urllib.parse</code> module</a>.</p>

<h2>In <code>check_standard_word</code></h2>

<p>You could write: <code>return tag in exclude</code>.</p>

<h2>In <code>determine_word_type</code></h2>

<p>Instead of using lists, you could use sets which is a data type more relevant to what you are trying to achieve.</p>

<p>Also, you may want to replace the code with a dictionnary structure:</p>

<pre><code>def determine_word_type(tag):
    types = {
        'adjective': {"JJ", "JJR", "JJS"},
        'verb': {"VB", "VBD", "VBG", "VBN", "VBP", "VBZ"},
        'adverb': {"RB", "RBR"},
        'noun': {"NN", "NNS", "NNPS", "FW"},
    }
    for type_, set_ in types.iteritems():
        if tag in set_:
            return type_
    return 'noun'
</code></pre>

<p>Also, if you want to make lookup faster, you could build a dictionnary from the initial dict mapping word to their types:</p>

<pre><code>def determine_word_type(tag):
    types = {
        'adjective': {"JJ", "JJR", "JJS"},
        'verb': {"VB", "VBD", "VBG", "VBN", "VBP", "VBZ"},
        'adverb': {"RB", "RBR"},
        'noun': {"NN", "NNS", "NNPS", "FW"},
    }
    types2 = dict()
    for type_, set_ in types.iteritems():
        for e in set_:
            assert e not in types2
            types2[e] = type_
    return types2.get(tag, 'noun')
</code></pre>

<p>(You'd need the dict building part to be moved out of the function to be performed only once).</p>
    </div>