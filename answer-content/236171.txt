<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A self answer per:
<a href="https://codereview.stackexchange.com/help/someone-answers">If you want to show everyone how you improved your code, but don't want to ask another question, then post an answer to your own question.</a></p>

<p><a href="https://codereview.stackexchange.com/a/115165/29485">@Mat</a> identified <em>undefined behavior</em> of using relational operators with unrelated pointers:</p>

<pre><code>if (format &gt;= GP_format[0] &amp;&amp; format &lt; GP_format[GP_format_N]) 
</code></pre>

<p>A fix:  </p>

<ol>
<li>Make each <code>GP_format[]</code> string start with its index.  </li>
<li>Use the first character of the string as an index to test against <code>GP_format[index]</code>.</li>
</ol>

<p>Now code can detect if a string is a non-<code>GP_format[]</code> one or return the index of the <code>GP_format[]</code>.</p>

<pre><code>// GPrint.h
// const char GP_format[GP_format_N + 1][1];
const char GP_format[GP_format_N + 1][2];

// GPrint.c
// const char GP_format[GP_format_N + 1][1] = { { 0 } };
_Static_assert(GP_format_N == 043);
// Unfortunately have not come up with an elegant way to initialize
const char GP_format[GP_format_N + 1][2] = { 
   "\0", "\1", "\2", "\3", "\4", "\5", "\6", "\7", 
   "\10", "\11", "\12", "\13", "\14", "\15", "\16", "\17", 
   "\20", "\21", "\22", "\23", "\24", "\25", "\26", "\27", 
   "\30", "\31", "\32", "\33", "\34", "\35", "\36", "\37", 
   "\40", "\41", "\42", "\43",
};
// Could alternatively use hex above as in \0x..

// GPrint.c
// Return index of GP_format[]
static int GP_get_type(const char *format) {

  //if (format &gt;= GP_format[0] &amp;&amp; format &lt; GP_format[GP_format_N]) {
  //  return (int) (format - GP_format[0]);
  //}
  char index = *format;
  if (index &gt;= 0 &amp;&amp; index &lt; GP_format_N &amp;&amp; format == GP_format[index]) {
      return index;
  }

  return GP_format_N;
}
</code></pre>

<hr>

<p>This approach may expand to go beyond <code>CHAR_MAX</code>.  Also only one <code>GP_format</code> string is really needed <code>"\0\1\2\3...."</code>, but to show that much more code needs to change.</p>
    </div>