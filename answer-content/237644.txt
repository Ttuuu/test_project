<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Took a guess at better variable names, but no idea what <code>list_zz</code> or <code>wd</code> should be.</p>

<p>Switched to <code>combinations()</code> instead of <code>permutations()</code> and process each player pair both ways (e.g. ('A','B') and ('B','A')).</p>

<p>Do combinations of player,score tuples, so there is only one call to <code>combinations()</code>.</p>

<p>Use nested dicts instead of dicts keyed by a tuple of players.</p>

<p><code>Counter()</code> is handy because <code>.update()</code> adds values rather than replacing them.</p>

<p>The code should be a function (or method).</p>

<pre><code>from collections import Counter, defaultdict
from itertools import combinations
import math

# test data
games = [['A', 'B'], ['B'], ['A', 'B', 'C', 'D', 'E'], ['B'], ['A', 'B', 'C'], ['A'], ['B', 'C'], ['A', 'B'], ['C', 'A', 'B'], ['A'], ['B', 'C']]

gamescores = [[1.0, 5.0], [3.0], [2.0, 7.0, 3.0, 1.0, 6.0], [3.0], [5.0, 2.0, 3.0], [1.0], [9.0, 3.0], [2.0, 7.0], [3.0, 6.0, 8.0], [2.0], [7.0, 9.0]]

list_zz= []

wd = defaultdict(Counter)
past_diffs = defaultdict(float)
this_diff = defaultdict(Counter)

for players, scores in zip(games, gamescores):
    if len(players) == 1:
        list_zz.append(math.nan)
        continue

    past_diffs.clear()
    this_diff.clear()

    for (player1, score1), (player2, score2) in combinations(zip(players, scores), 2):
        past_diffs[player1] += wd[player1][player2]
        past_diffs[player2] += wd[player2][player1]

        this_diff[player1][player2] = score1 - score2
        this_diff[player2][player1] = score2 - score1

    list_zz.extend(past_diffs[p] for p in players)

    for player in players:
        wd[player].update(this_diff[player])

print(list_zz)
</code></pre>
    </div>