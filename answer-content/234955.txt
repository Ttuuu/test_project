<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not a professional game developer, just trying to help you base on my experience with Ruby so far. Glad to see your willingness of coding correctly from the beginning.</p>

<p>Some points to improve:</p>

<p>1.Move the bot names and game mode options to CONSTANTS</p>

<p>2.Prompting for user's input is duplicated many times, you should make a function that take prompting lines and accepted values as arguments then return only when user input is in accepted values.</p>

<p>3.Beside <code>name</code>, a <code>Player</code> can have <code>weapon</code> as its instance variable also.</p>

<p>4.About the <code>logic</code> method, I found a way to improve it, please consider. If we put all the options to an array by a specific order that the option at higher index will win ([r, p, s] or [p, s, r] or [s, r, p]) then the logic can patternized. The only exception is when the higher index is the last element but the smaller index is the first element, we can solve the exception with a simple <code>if</code></p>

<p>5.You should also learn how to write test spec and apply it here especially for <code>logic</code> method</p>

<p>6.Last but not least, your indentation :)</p>

<pre><code>class Player
  attr_accessor :name, :weapon

  def initialize(name)
    @name = name
  end
end

class Game
  BOT_NAMES = ['Bob', 'Joseph', 'Catherine', 'Paul', 'Tom', 'Baker']
  WEAPONS   = {'r' =&gt; 'Rock', 'p' =&gt; 'Paper', 's' =&gt; 'Sissors'}

  def prompt_for_user_input(accepted_inputs=[], prompt_lines=[], is_case_sensitive=true)
    loop do
      prompt_lines.each { |line| puts line }
      user_input = gets.chomp
      return user_input.to_s if accepted_inputs.empty?
      is_valid_input = is_case_sensitive ? accepted_inputs.include?(user_input) : accepted_inputs.any?{ |s| s.casecmp(user_input) == 0 }
      return user_input.to_s if is_valid_input
    end
  end

  def mode_selection
    prompt_lines = [
      "Hello User...",
      "Will you be playing against another person or the computer?",
      "Choose 1 for another person or choose 2 for the computer"
    ]

    @mode = prompt_for_user_input(['1', '2'], prompt_lines)
  end

  def player_creation
    @player1 = Player.new(prompt_for_user_input([], ["Hi, please enter your name player 1:"]))
    @player2 = if (@mode == '1')
      Player.new(prompt_for_user_input([], ["Hi, please enter your name player 2:"]))
    else
      bot_name = BOT_NAMES.sample
      puts "Player 2 will be named #{bot_name}"
      Player.new(bot_name)
    end

    sleep(0.5)
    puts "Welcome #{@player1.name} and #{@player2.name} to Rock-Paper-Scissor"
  end

  def instruct
    puts "The rules of the game are simple\n"
    puts "Simply choose Rock(R), Paper(P) or Scissor(S) each turn\n "
    puts "Paper beats Rock, Scissor beats Paper and Rock beats Scissor\n"
    puts "Ready....?"
    sleep(1.0)
  end

  def weapon_selection
    @player1.weapon = prompt_for_user_input(WEAPONS.keys, ["#{@player1.name}, please chooose your choice of weapon: r(Rock), p(Paper), s(Sissor)"], false)
    @player2.weapon = if (@mode == '1')
      prompt_for_user_input(WEAPONS.keys, ["#{@player2.name}, please chooose your choice of weapon: r(Rock), p(Paper), s(Sissor)"], false)
    else
      bot_weapon = WEAPONS.keys.sample
      puts "#{@player2.name} chooses #{WEAPONS[bot_weapon]}"
      bot_weapon
    end

    puts "Let see who wins... will it be #{@player1.name} or will it be #{@player2.name}"
    sleep(2.0)
    decider
  end

  def decider
    if @player1.weapon == @player2.weapon
      puts "Opps, both players picked the same weapon, It is a TIE!!!"
      puts "Lets go back and choose again..."
      sleep(3.0)
      weapon_selection
    end

    weapon_keys = WEAPONS.keys
    weapon_1_index = weapon_keys.find_index(@player1.weapon)
    weapon_2_index = weapon_keys.find_index(@player2.weapon)
    if weapon_1_index &gt; weapon_2_index
      if (weapon_1_index == weapon_keys.length - 1) &amp;&amp; (weapon_2_index == 0)
        @winner, @loser = @player2, @player1
      else
        @winner, @loser = @player1, @player2
      end
    else
      if (weapon_2_index == weapon_keys.length - 1) &amp;&amp; (weapon_1_index == 0)
        @winner, @loser = @player1, @player2
      else
        @winner, @loser = @player2, @player1
      end
    end

  end

  def result 
    puts "#{@winner.name} you win !!! #{WEAPONS[@winner.weapon]} beats #{WEAPONS[@loser.weapon]}"
  end

  def again?
    prompt_for_user_input(['y', 'n'], prompt_lines=["Would you like to play again?(y/n)"]) == 'y'
  end

  def play
    loop do
      mode_selection
      player_creation
      instruct
      weapon_selection
      decider
      result
      break unless again?
    end
    puts "Thank #{@player1.name} and #{@player2.name} for playing!"
  end
end

g = Game.new
g.play
</code></pre>
    </div>