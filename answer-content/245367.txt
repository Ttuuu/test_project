<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>First:</strong> Since you already know how many chunks you want, there's no point in checking if the chunk exists and otherwise declare it. In general terms, you should not need to check for objects you can define deterministically.</p>
<p>So instead of doing this check on each loop:</p>
<pre><code>if (typeof result[i] == 'undefined'){
  result[i] = [];
}
</code></pre>
<p>create an array of N empty arrays beforehand.</p>
<pre><code>const result = Array.from(Array(chunks),item=&gt;[]);
</code></pre>
<p><strong>Second:</strong> Albeit the performance difference is negligible, checking for <code>i</code>'s value and conditionally reassigning it is less efficient than using the <em>modulo</em> operator on its value regardless</p>
<p>So instead of</p>
<pre><code>results[i].push(...)
i++
i = (i == chunks) ? 0 : i;
</code></pre>
<p>You can do</p>
<pre><code>results[i % chunks].push(...)
i++
</code></pre>
<p>With the above, your function could be expressed as</p>
<pre><code>function usingShift(myArray, chunks=5){
  const copiedArray = myArray.slice(),
        result=Array.from(Array(chunks),item=&gt;[]);
  let i=0;
  while(copiedArray.length){
    result[i % chunks].push(copiedArray.shift());
    i++;
  }
  return result;
}
</code></pre>
<hr>
<p><strong>Third:</strong> As you've been told, <strong>shift</strong>ing from an array is expensive. I understand you're doing it because you want to populate the chunks in the same order of the original array. However you can achieve the same <strong>pop</strong>ping from the a reversed array:</p>
<p>If you declare</p>
<pre><code>const a = myArray.slice().reverse();
</code></pre>
<p>You can replace the usage of shift with</p>
<pre><code>result[i].push(a.pop());
</code></pre>
<p>The function would be something like:</p>
<pre><code>function usingPop(myArray, chunks=5){
  const reversedArr = myArray.slice().reverse(),
        result=Array.from(Array(chunks),item=&gt;[]);
  let i=0;
  while(reversedArr.length){
    result[i % chunks].push(reversedArr.pop());
    i++;
  }
  return result;
}
</code></pre>
<p><strong>However...</strong> you'd still be copying the array and performing a mutation on the copy.  <a href="https://codereview.stackexchange.com/users/227528/mikl%C3%B3s-m%C3%A1ty%C3%A1s">@Miklós Mátyás</a> solution has the advantage of populating the result without copying nor extracting items from the source array. Now, you haven't said the source array will be always the same (9 elements from 1 to 9). It could as well have repeated/unsorted items, so his solution should take into account not the item itself but its index, which can be expressed as:</p>
<pre><code>function filterByModulo(myArray, chunks=5){
  return Array.from(Array(chunks),(_,modulo)=&gt;{
    return myArray.filter((item,index) =&gt;  index % chunks === modulo);
  });
}
</code></pre>
<p>That's pretty clean, but it's filtering on the original array as many times as chunks you want, so it's performance degrades according to the source array length AND the chunk quantity.</p>
<p><strong>Personally</strong> I believe this is a case in which <code>reduce</code> would be more appropiate and pretty concise, while avoiding the copying or mutation of the source array.</p>
<pre><code>function usingReduce(myArray,chunks=5) {
   const result=Array.from(Array(chunks),i=&gt;[]);

   return myArray.reduce( (accum,item,index)=&gt;{ 
      accum[index%chunks].push(item);
      return accum;
   }, result);
}
</code></pre>
<p><strong>Finally</strong> there's the classic <code>for</code> loop</p>
<pre><code>function classicFor(sourceArr, chunks=5) {
  const lengthOfArray=sourceArr.length;
  const result=Array.from(Array(chunks),i=&gt;[]);
   
  for(let index=0; index&lt;lengthOfArray ; index++) {
     result[index % chunks ].push(sourceArr[index]);
  }
  return result;
}
</code></pre>
<p>I made a <a href="https://jsperf.com/split-array-n-chunks/7" rel="noreferrer">test case at JSPerf</a> in which it shows that <strong>the for loop is the most efficient</strong>. (I threw in <code>forEach</code> and <code>for..of</code> implementations too).</p>
<p>Running with a source array of 5000 items and 5 chunks shows that using pop on the source is more efficient than using shift by a 2.89x factor. It even looks more efficient that reduce. The classic for loop is the fastest whereas filtering N times comes up last by a ratio of 9x the modulo filtering.</p>
<p>If you use <a href="https://jsperf.com/split-array-n-chunks/9" rel="noreferrer">a source of 100000 items and 15 chunks</a> the classic for is still the most efficient (still 9x modulo filtering) but the other implementations do scale a bit better than modulo filtering.</p>
    </div>