<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for this, I used your example to finish mine that also uses <code>State</code>:</p>

<pre class="lang-hs prettyprint-override"><code>import System.IO
import Data.Sequence
import Control.Monad.State
import qualified Data.Text as T
import Data.Maybe

convertToInteger :: String -&gt; Int
convertToInteger s = read s :: Int

type CompState = (Int, Seq Int)
type CompValue = Int

data Instruction = Add | Mult | Stop deriving (Show)

instruction :: State CompState Instruction
instruction = state $ \(pointer, mem) -&gt;
    (case (Data.Sequence.lookup pointer mem) of
        Just 1 -&gt; Add
        Just 2 -&gt; Mult
        Just 99 -&gt; Stop
        _ -&gt; Stop
    , (pointer, mem))

calcul :: (Int -&gt; Int -&gt; Int) -&gt; State CompState ()
calcul operator = state $ \(pointer, mem) -&gt;
    let addr1 = Data.Sequence.lookup (pointer+1) mem
        addr2 = Data.Sequence.lookup (pointer+2) mem
        op1 = join $ Data.Sequence.lookup &lt;$&gt; addr1 &lt;*&gt; pure mem
        op2 = join $ Data.Sequence.lookup &lt;$&gt; addr2 &lt;*&gt; pure mem
        destAddr = Data.Sequence.lookup (pointer+3) mem 
        val = (operator &lt;$&gt; op1 &lt;*&gt; op2)
        newMem = Data.Sequence.update &lt;$&gt; destAddr &lt;*&gt; val &lt;*&gt; pure mem in
    ((), (pointer+4, fromJust newMem))

computeStep :: State CompState ()
computeStep = do
    inst &lt;- instruction

    _ &lt;- case inst of
        Add -&gt; calcul (+) &gt;&gt; computeStep
        Mult -&gt; calcul (*) &gt;&gt; computeStep
        Stop -&gt; return ()

    return ()

a = [1,0,0,0,99]
b = [2,3,0,3,99]
c = [2,4,4,5,99,0]   
d = [1,1,1,4,99,5,6,0,99]

main :: IO()
main = do
    handle &lt;- openFile "2-input.txt" ReadMode
    contents &lt;- hGetContents handle

    let inputData = fromList . map convertToInteger . map T.unpack $ T.splitOn (T.pack ",") (T.pack contents)
    let updatedInputData = update 2 2 (update 1 12 inputData)

    print $ snd $ snd $ runState computeStep (0, updatedInputData)
</code></pre>

<p>Is it shorter or does it only look like it?</p>
    </div>