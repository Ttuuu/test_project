<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another way to speed this up is to keep a record of all the sum of divisors seen so far (by using a caching decorator on the function, like <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a>) and realize that you only need a single loop if you make this a generator and use the fact that a number is amicable if \$d(d(a)) = a\$ and \$d(a) \neq a\$:</p>

<pre><code>import math
from functools import lru_cache

@lru_cache(None)
def sum_div(n):
    # Taken from AJNeufeld's answer
    total = 1
    for x in range(2, int(math.sqrt(n) + 1)):
        if n % x == 0:
            total += x
            y = n // x
            if y &gt; x:
                total += y
    return total

def amicable_numbers(limit):
    for a in range(limit):
        b = sum_div(a)
        if a != b and sum_div(b) == a:
            yield a

print(sum(amicable_numbers(10000)))
</code></pre>

<p>This runs in a bit more than 4 milli-seconds on my computer.</p>

<hr>

<p>As for timing the runtime, I usually either prefer using ipythons magic command <code>%timeit</code>, or writing a small context manager:</p>

<pre><code>from time import perf_counter

class Timer:
    def __init__(self, name=""):
        self.name = name

    def __enter__(self):
        self.start = perf_counter()

    def __exit__(self, *args):
        runtime = perf_counter() - self.start

        # get it in nice units
        units = ["s", "ms", "Î¼s"]
        for unit in units:
            if runtime &gt; 1:
                break
            runtime *= 1000

        if self.name:
            print(f"{self.name}: {runtime:.1f}{unit}")
        else:
            print(f"{runtime:.1f}{unit}")
</code></pre>

<p>Which you can use like this:</p>

<pre><code>with Timer("amicable numbers"):
    print(sum(set(amicable_numbers(10000))))
# XXXXX  # I don't want to give away the correct answer
# amicable numbers: 4.1ms
</code></pre>

<p>Note that this will not be more precise than micro-seconds due to the time it takes to run the context manager.</p>
    </div>