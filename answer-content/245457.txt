<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are great improvement points that are mentioned by @Reinderien, so I won't iterate on them.<br>
There are also other areas that can be fine-tuned.</p>
<h3>LoanRepaymentPlan - Properties</h3>
<p>You do not need to explicitly say <code>private set</code> for properties in this particular case. If you specify only <strong>getters</strong> that would be perfectly fine, because ctors can set properties even if they don't expose getters.</p>
<pre><code>public class LoanRepaymentPlan
{
    public decimal TotalRepaymentAmount { get; }
    public decimal CurrentOutstandingAmount { get; }
    public decimal MonthlyRepaymentInterestAmount { get; }
    public decimal MonthlyRepaymentAmount { get; }
    public DateTime RepaymentDate { get; }

    public LoanRepaymentPlan(decimal TotalRepaymentAmount, decimal CurrentOutstandingAmount, decimal MonthlyRepaymentAmount)
    {
        this.TotalRepaymentAmount = TotalRepaymentAmount;
        this.CurrentOutstandingAmount = CurrentOutstandingAmount;
        this.MonthlyRepaymentAmount = MonthlyRepaymentAmount;
    }
}
</code></pre>
<p>With this you have created an <strong>immutable class</strong> (can't be modified after it has been initialized). From memory optimization perspective it make sense to change <code>class</code> to <code>struct</code>. That way it is a great chance that it will be allocated on the stack (or even in CPU registers) so no heap allocation is needed and no gargabe collection for this object.</p>
<p>There is another interesting topic, which is currently not available, but worth mentioning <a href="https://devblogs.microsoft.com/dotnet/welcome-to-c-9-0/#records" rel="nofollow noreferrer">C# 9 records</a>. In C# 9 the same could be achieved via the following code:</p>
<pre><code>public data class LoanRepaymentPlan
{
    public decimal TotalRepaymentAmount { get; init; }
    public decimal CurrentOutstandingAmount { get; init; }
    public decimal MonthlyRepaymentInterestAmount { get; }
    public decimal MonthlyRepaymentAmount { get; init; }
    public DateTime RepaymentDate { get; }    
}
</code></pre>
<h3>LoanRepaymentPlan - Static constructor</h3>
<p>In my opinion it does not make too much sense. You have to write 2 more characters at each initialization and you have to maintain 2 object creator functions. I don't see the whole point of this static ctor.</p>
<h3>Input handling</h3>
<p>Your code bouncing between double and decimal types. If precision matters then use <code>decimal</code> everywhere otherwise use <code>double</code>.</p>
<p>The <code>Convert.ToDouble(Console.ReadLine())</code> is really error-prone. What if the user enters "some string"? It will throw a <code>FormatException</code>. Use <code>double.TryParse</code> instead:</p>
<pre><code>var userInput = Console.ReadLine();
if(!double.TryParse(userInput, out var principal))
{
  //TODO: handle that case
}

</code></pre>
<p>You should also consider to validate user input against valid ranges. For example interest rate should be between 0 and 100.</p>
<h3>while vs for loop</h3>
<p>Even though your while loop works fine in my opinion the for loop might be way more expressive and concise.</p>
<pre><code>for (var tenure = years * 12; tenure &gt;= 0; tenure--)
{
    totalRepaymentAmount += (decimal)monthlyRepaymentAmount;

    repaymentPlans.Add(LoanRepaymentPlan.Create(totalRepaymentAmount,
        (decimal)principalAndInterest - totalRepaymentAmount, (decimal)monthlyRepaymentAmount));
}
</code></pre>
<p>The iterator variable is declared at the same place where it is modified.<br>
It improves readability and maintainability.</p>
<h3>Functional decomposition</h3>
<p>I would highly encourage you to split your main function into smaller chunks with dedicated responsibilities:</p>
<ol>
<li>Gather user inputs for calculation</li>
<li>Perform calculation</li>
<li>Dump calculation result</li>
</ol>
<p>It would improve testability, maintainability and readability as well.</p>
    </div>