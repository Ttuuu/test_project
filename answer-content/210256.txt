<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A 2+ digit fare prime number can never have an even digit, or a 5 digit in its set of digits, because a rotation which moves an even digit or a 5 to the last digit will be divisible by 2 or 5.  You could use that as a filter for your possible fare primes from the list of primes you calculate. </p>

<p>When calculating primes, you can stop at <code>sqrt(num)</code>.  Any number greater than <code>sqrt(num)</code> that evenly divides <code>num</code> will have a compliment number less than <code>sqrt(num)</code> that you have already tested. </p>

<p>Speaking of primes that you’ve calculated, why don’t you use those for your subsequent prime test?  Why try dividing by every number from 2 up to <code>int_num</code> when you could just try the numbers in <code>primes</code> upto <code>int_num</code>.</p>

<p>... or just ask if <code>int_num in primes</code>.  Speed tip: turn <code>primes</code> into a <code>set()</code> first for faster inclusion testing.</p>

<p>Your <code>digit_list</code> code is very inefficient. For any number, once you’ve split the number into digits, you don’t need to resplit it into digits again for each rotation.  Actually, you don’t even need to split it into individual digits.  This will give you the rotated values:</p>

<pre><code>digits = str(i)
for j in range(1, length):
    int_num = int( digits[j:] + digits[:j])
</code></pre>
    </div>