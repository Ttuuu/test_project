<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Pedantically, none of the included headers are guaranteed to define <code>std::size_t</code>.  It is (in principle) possible to implement those headers without defining that type, and we're required to include one of the headers that <em>does</em> define it (e.g. <code>&lt;cstddef&gt;</code>).</p>

<p>We could avoid the <code>push_back</code> loop by using the <code>std::copy()</code> algorithm with a <code>std::back_inserter</code> as the destination.  More simply, we could just use the deque's <code>insert()</code> like this:</p>

<pre><code>template &lt;typename T1, typename T2&gt;
auto&amp; operator&lt;&lt;(std::deque&lt;T1&gt;&amp; deq, const T2&amp; seq)
{
    using std::begin();
    using std::end();

    deq.insert(end(deq), begin(seq), end(seq));
    return deq;
}
</code></pre>

<p>I think the <code>old_sz</code> check in <code>readN()</code> is less clear than simply checking whether the input chunk is an empty string:</p>

<pre><code>std::string s;
while (buffer.size() &lt; n &amp;&amp; !(s = read7()).empty()) {
    buffer &lt;&lt; std::move(s);
}
</code></pre>

<p>Or, just inline the <code>&lt;&lt;</code>, given that it's a one-liner and not used anywhere else:</p>

<pre><code>using std::begin();
using std::end();

std::string s;
while (buffer.size() &lt; n &amp;&amp; !(s = read7()).empty()) {
    buffer.insert(end(buffer), start(s), end(s));
}
</code></pre>

<hr>

<p>On the choice of approach: I probably wouldn't use a deque.  We only need to store a surplus of up to 7 characters, which is fine to hold in a string (most implementations use a "small-string" optimisation to avoid allocating heap space for the characters).  I would implement <code>readN()</code> by starting with an empty, <code>n</code>-capacity string and building it up in place, storing the new surplus back to the string where we keep it.</p>
    </div>