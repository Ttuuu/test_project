<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your approach is suitable for a language like Java.  But in Python?  <a href="https://pyvideo.org/pycon-us-2012/stop-writing-classes.html" rel="noreferrer">Stop writing classes!</a>  This is especially true for your task, where much of the code consists of do-nothing placeholders (in <b>bold</b> below) just to allow functionality to be implemented by subclasses.</p>

<pre><b>from abc import ABC, abstractmethod

class DataProcessing(ABC):
    def __init__(self, my_list):
        self.my_list = my_list

    def data_processing_steps(self):</b>
        self.remove_duplicate()
        <b>self.general_filtering()
        self.subject_specific_filtering()
        self.return_list()</b>

    def remove_duplicate(self):
        self.my_list = set(list(self.my_list))

    <b>@abstractmethod
    def general_filtering(self): pass

    def subject_specific_filtering(self): pass

    def return_list(self):
        return self.my_list</b>

class DataProcessing_Project1(DataProcessing):
    def general_filtering(self):
        maxfilter_obj = MaxFilter()
        minfilter_obj = MinFilter()
        CombinedFilter_obj = CombinedFilter(maxfilter_obj, minfilter_obj)
        self.my_list = CombinedFilter_obj.filter(self.my_list)

class DataProcessing_Project1_SubjectA(DataProcessing_Project1):
    def subject_specific_filtering(self):
        twentythreefilter_obj = TwentyThreeFilter()
        self.my_list = twentythreefilter_obj.filter(self.my_list)

class DataProcessing_Project1_SubjectB(DataProcessing_Project1): pass
</pre>

<p>Furthermore, it's unnatural to have <code>my_list</code> be part of the state of the <code>DataProcessing</code> instance, and it's especially awkward to have to retrieve the result by calling <code>.return_list()</code>.</p>

<p>Note that in</p>

<blockquote>
<pre><code>def remove_duplicate(self):
    self.my_list = set(list(self.my_list))
</code></pre>
</blockquote>

<p>â€¦ <code>my_list</code> temporarily becomes a <code>set</code> rather than a <code>list</code>.  You should have written <code>self.my_list = list(set(self.my_list))</code> instead.</p>

<h2>Suggested solution</h2>

<p>This task is more naturally suited to functional programming.  Each filter can be a function that accepts an iterable and returns an iterable.  You can then easily combine filters through <a href="https://en.wikipedia.org/wiki/Function_composition_%28computer_science%29" rel="noreferrer">function composition</a>.</p>

<p>As a bonus, you can take advantage of <strong>default parameter values</strong> in Python to supply generic processing steps.  Then, just <strong>use <code>None</code> to indicate that an absent processing step</strong>.</p>

<pre><code>######################################################################
# Primitive filters
######################################################################
def deduplicator():
    return lambda iterable: list(set(iterable))

def at_least(threshold=10):
    return lambda iterable: [n for n in iterable if n &gt;= threshold]

def at_most(threshold=100):
    return lambda iterable: [n for n in iterable if n &lt;= threshold]

def is_not(bad_value):
    return lambda iterable: [n for n in iterable if n != bad_value]

######################################################################
# Higher-order filters
######################################################################
def compose(*filters):
    def composed(iterable):
        for f in filters:
            if f is not None:
                iterable = f(iterable)
        return iterable
    return composed

def data_processing(
        deduplicate=deduplicator(),
        general=compose(at_least(), at_most()),
        specific=None,
    ):
    return compose(deduplicate, general, specific)

######################################################################
# Demonstration
######################################################################
this_list = [1, 2, 23, 4, 34, 456, 234, 23, 3457, 5, 2]

ob = at_most()
this_list2 = ob(this_list)
print(this_list2)       # [1, 2, 23, 4, 34, 23, 5, 2]

ob2 = at_least()
this_list3 = ob2(this_list2)
print(this_list3)       # [23, 34, 23]

ob3 = compose(ob, ob2)
this_list4 = ob3(this_list)
print(this_list4)       # [23, 34, 23]

ob4 = data_processing()
print(ob4(this_list))   # [34, 23]

ob5 = data_processing(specific=is_not(23))
print(ob5(this_list))   # [34]

ob6 = compose(ob, ob2, is_not(23))
print(ob6(this_list))   # [34]
</code></pre>
    </div>