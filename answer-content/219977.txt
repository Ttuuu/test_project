<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure how to review your code, because I don't understand what you're aiming for. There is a <code>std::bitset</code> class but it's different from yours: its size is known at compile-time and it's chiefly designed to function as a group of flags you would have coded into an integer of some kind in a more basic language.</p>

<p>But you use <code>std::vector&lt;bool&gt;</code> as the underlying data-structure of your class, which has a different goal, although it's hard to define precisely: <code>std::vector&lt;bool&gt;</code> is designed to manage collections of bits whose size isn't known beforehand, so I would say it's best used to represent a collection of something else very densely, or more accurately a collection's projection. An example would be an Eratosthenes's sieve, where each integer (let's say 32 bits) is only considered as whether prime or not (1 bit).</p>

<p>Anyway, you seem to aim for yet something else, something like providing an easier to manipulate binary interface to third-part classes: integers, characters, even strings. I have some reservations about this:</p>

<ol>
<li><p>binary manipulation is already handy in C++: you have dedicated operators, they aren't arcane C++, there's no need to build a complex class hierarchy to extract one bit from an object.</p></li>
<li><p>binary manipulation is often not what you desire: when you copy a string, which essentially is a pointer, you don't want to copy that pointer but to copy what is pointed to in a different memory location, and keep a pointer to that new location. The semantic of a class is implemented through its constructor and can't be summed up into its binary lay-out. On that topic, your <code>s_bitset</code> class is ill-named, because it offers the binary representation of a <code>char[]</code>, not of a string.</p></li>
<li><p>From 1 and 2, I conclude that your project is not well conceived (unless of course it only has a learning purpose), because it ties down the object to its binary representation, and doesn't offer many more functionalities than the language itself. It leads to strange things, like the translation of a vector of booleans into a integer (in <code>int i_bitset::pGet()</code>), although the integer already is a sequence of 0's and 1's.</p></li>
</ol>

<p>So, my first piece of advice is to think more deeply about what you're trying to achieve, and to look more closely at what's already been done. And then decide: do I want to reinvent the wheel to learn how it rolls? Then re-implement <code>std::bitset</code>, <code>std::vector&lt;bool&gt;</code>, or more ambitiously implement a <code>big_integer</code> class; all three offer different challenges: <code>std::bitset</code> is template-programming oriented, <code>std::vector&lt;bool&gt;</code> needs memory manipulation and proxies, and <code>big_integer</code> is more mathematically / algorithmically intensive.</p>

<p>Now onto the review of some details in your code:</p>

<ul>
<li>use initialization lists in constructors:</li>
</ul>

<p>For instance, when you write:</p>

<pre><code>bitset::bitset(int bits){
  BitSet.clear();
  for(int i = 0; i &lt; bits; i++){
    BitSet.push_back(false);
  }
}
</code></pre>

<p>what is done is: <code>Bitset</code> is created and initialized before entering the constructor's body. It is then cleared, which doesn't really make sense because it's empty. Finally, you fill it one bit at a time through proxy references. All this comes at a cost. You could have written:</p>

<pre><code>bitset::bitset(int bits) : Bitset(bits, false) {}
</code></pre>

<p>Bitset is then directly constructed with these two arguments (number of elements, element initial value).</p>

<ul>
<li><p>do not assume that integers are 8 bits long. It's generally false: 32- or 64-bits sized integers are more frequent.</p></li>
<li><p>it isn't idiomatic to take a const reference to a built-in type: so rather <code>int operator=(int b);</code> than <code>int operator=(const int&amp; b);</code></p></li>
<li><p>it isn't idiomatic, and even surprising, not to return a reference to the <code>bitset</code> in this assignment, so rather <code>bitset&amp; operator=(int b);</code> than <code>int operator=(const int&amp; b);</code>. It allows chained assignment.</p></li>
<li><p>it is also dangerous to have a constructor and an assignment operator with identical arguments but different semantics: <code>i_bitset bs(8)</code> is a bitset of eight bits, but <code>bs = 8;</code> means it contains the binary representation of eight.</p></li>
<li><p>try to insulate the basic operations from the more complex ones. For instance, you define a <code>get_bit</code> function, but don't use it in your <code>print</code> function. It's a pity, because you could very well forget to actualize it if you change the underlying data structure (for instance to a <code>std::vector&lt;char&gt;</code> instead).</p></li>
<li><p>try to offer an easier to use interface: it seems you can't initialize a bitset from another one (<code>i_bitset&amp; operator=(const i_bitset&amp; b);</code> for instance.</p></li>
</ul>
    </div>