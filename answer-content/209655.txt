<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Highly inefficient</h1>

<p>The code is highly inefficient, wasting CPU cycles and memory due to poor use of Javascript API's. It is also badly formatted and thus hard to read and follow and poor naming also made working out what you were doing difficult.</p>

<h2>Code Points.</h2>

<ul>
<li>Better naming alround. Example, you have two functions <code>transformLinkToTextOnly</code> and <code>transformLinksToTextOnly</code> Now I might be a bit blind but without spaces its not at all clear that these are two separate functions. If you consider the context of the functions and encapsulate them you can reduce the complex names to <code>transformLink</code> and <code>transformLinks</code> making the plural stand out, the rest is inferred due to context.</li>
<li>Indent chained functions.</li>
<li>Use semicolons to end lines. There are many arguments for and against using semicolons. Semicolons are required by the language, and are inserted automatically when javascript is parsed, however there are many edge cases that most people are unaware of and can catch you out. The rule of thumb is "Can you list all edge cases where semicolon insertion can cause problems?" if not use them. It is even more important that you are consistent. Even if you know all the rules, using semicolons in some places and not in others breaks the style rule "Be consistent".</li>
<li>Avoid single use variable declarations.</li>
<li>If you use terneries in multi expression lines, put them inside <code>(...)</code> for clarity. See example A</li>
<li>Know your javascript. It is important that you are thoroughly familiar with the language you write in. You need to regularly review the JS reference and know the most concise and performant forms to achieve what you desire. Your code is very GC (garbage collection) unfriendly creating many arrays and thrashing memory and slowuing down the code, all of which can be avoided . See example B</li>
</ul>

<h2>Example A</h2>

<pre><code>  return withReaddedOpeningTags
    .reduce((prev, curr) =&gt; [
        ...prev,
      curr.indexOf('&lt;a') &gt; -1 ?
            splitByLinkEnds(curr) : curr
    ], []).flat()
</code></pre>

<p>Better syntax written as    </p>

<pre><code>return withReaddedOpeningTags
    .reduce((prev, curr) =&gt;
        [...prev, (curr.indexOf('&lt;a') &gt; -1 ? splitByLinkEnds(curr) : curr)]
        , [])
    .flat();
</code></pre>

<p>As I am at this function I will point out that for every iteration you make a new copy of the array, add it as another array, and in the end you are forced to flatten the result to get what you want.    </p>

<p>The same can be done with.</p>

<pre><code>return withReaddedOpeningTags
    .map(item =&gt;  item.indexOf('&lt;a') &gt; -1 ? splitByLinkEnds(item) : item);
</code></pre>

<p>or </p>

<pre><code>return withReaddedOpeningTags
    .map(item =&gt; item.includes('&lt;a') ? splitByLinkEnds(item) : item);
</code></pre>

<h2>Example B</h2>

<p>An example function <code>splitByLinkEnds</code> create 5 arrays</p>

<pre><code>const splitByLinkEnds = html =&gt; {
    const split = html.split('&lt;/a&gt;');       // array 1

    const allButLast = split.slice(0, -1);  // array 2
    const last = split.slice(-1)[0];        // creates array 3 an uses first item

    return [
        ...allButLast.map(x =&gt; `${x}&lt;/a&gt;`),  // map creates an array 4 that is then 
                                             // copied to the return array 5
        last 
    ];
}    
</code></pre>

<p>It can be done using only one new array.</p>

<pre><code>const splitEnds = markup =&gt; {
    const parts = markup.split("&lt;/a&gt;");
    const end = parts.pop();
    parts.forEach((x, i) =&gt; parts[i] = x + "&lt;/a&gt;");
    parts.push(end);
    return parts;
}
</code></pre>

<p>or as</p>

<pre><code>const splitEnds = markup =&gt; {
    return markup.split("&lt;/a&gt;").forEach((x, i, a) =&gt; a[i] = x + (i &lt; a.length - 1 ? "&lt;/a&gt;" : ""));
}
</code></pre>

<h2>Rewrites</h2>

<p>I have include 4 ways of achieving the same result. Javascript is very expressive so there is no single right way to do anything.</p>

<h3>Rewrite using only strings and arrays</h3>

<p>This method does not require the DOM and splits the markup at anchor boundaries creating an array of anchor descriptions which is then used to replace the anchors in the original markup.</p>

<pre><code>function replaceAnchors(markup) {
    function findLinks(markup) {
        return markup.substring(markup.indexOf("&lt;a") + 2).split("&lt;a")
            .map(markup =&gt; ({
                markup : "&lt;a" + markup.split("&lt;/a&gt;")[0] + "&lt;/a&gt;",
                anchor : markup.split("&gt;")[0],
                href : markup.split("href=\"")[1].split("\"")[0],
                text : markup.split("&gt;")[1].split("&lt;/a")[0],
            }));
    }        
    findLinks(markup).forEach(link =&gt; {
        markup = markup.replace(link.markup,`&lt;span${link.anchor}&gt;${link.text}(${link.href})&lt;/span&gt;`);
    });
    return markup;
}
</code></pre>

<p>Second version does away with the intermediate array and does it in one pass.    </p>

<pre><code>function replaceAnchors(markup) {
    markup.substring(markup.indexOf("&lt;a") + 2).split("&lt;a")
        .forEach(a =&gt; {
            const href = a.split("href=\"")[1].split("\"")[0];
            const text = a.split("&gt;")[1].split("&lt;/a")[0];

            markup = markup.replace(
                `&lt;a${a.split("&lt;/a&gt;")[0]}&lt;/a&gt;`,
                `&lt;span${a.split("&gt;")[0]}&gt;${text}(${href})&lt;/span&gt;`
                );
        });
    return markup;
}
</code></pre>

<h3>Rewrite with memory and performance in mind.</h3>

<p>This uses named properties to determine what to do with each character in turn. If a <code>match[current]</code> is found then <code>actions[current].add</code> and <code>actions[current].action</code> are performed, each action sets up the next expected match and actions by setting the string <code>current</code> to the correct name. It is very fast and has a little room to go even faster. It is also very memory efficient</p>

<pre><code>function replaceAnchors(markup) {
    const match = {
        get anchorStart() { return markup[idx] === "&lt;" &amp;&amp; markup[idx+1] === "a" },
        get hrefStart() { return markup.substring(idx,idx + 6) === "href=\"" },
        get hrefEnd() { return markup[idx] === "\"" },
        get tagClose() { return markup[idx]  === "&lt;" &amp;&amp; markup[idx+1]  === "/" &amp;&amp; markup[idx+2]  === "a" },
    };
    const actions = {
        anchorStart: {
            add() { idx += 2; return "&lt;span" },
            action() { current = "hrefStart" }
        },
        hrefStart: {
            add() { idx += 6; return "href=\""}, 
            action() { hrefStart = idx; current = "hrefEnd" }
        },
        hrefEnd: {
            add() { idx += 1; return "\""}, 
            action() { href = markup.substring(hrefStart, idx -1); current = "tagClose" }
        },
        tagClose: {
            add() { idx += 4; return "(" + href + ")&lt;/span&gt;" },
            action() { current = "anchorStart" }
        },
    }
    var result = "", idx = 0, hrefStart, href, current = "anchorStart";
    while (idx &lt; markup.length) {
        if (match[current]) {
            result += searchs[current].add();
            searchs[current].action();
        } else {
            result += markup[idx++]; 
        }
    }
    return result;
}
</code></pre>

<h3>Rewrite using the DOM</h3>

<p>This method uses the Markup parser to help locate anchor tags and then just replaces the start and end tag with span and the additional href</p>

<pre><code>function replaceAnchors(markup) {
    const nodes = document.createElement("span");
    nodes.innerHTML = markup;
    for (const a of nodes.querySelectorAll("a")) {
        const anchor = a.outerHTML;
        markup = markup.replace(anchor, anchor
            .replace("&lt;/a&gt;",`(${a.getAttribute("href")})&lt;/span&gt;`)
            .replace("&lt;a","&lt;span")
        );

    }
    return markup;
}   
</code></pre>
    </div>