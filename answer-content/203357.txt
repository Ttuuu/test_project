<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Don't overcomplicate your code</h2>

<p>The only thing required of the <code>Shape</code> and <code>Triangle</code> classes is the calculation of area.  For that reason, the code can be considerably simplified if the constructor calculates and stores the area.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The <code>Area()</code> function probably shouldn't alter the underlying <code>Shape</code> object, so it makes sense to declare it <code>const</code>.</p>

<h2>Use a standard exception where appropriate</h2>

<p>There's really nothing, well... <em>exceptional</em> about the <code>Exception</code> class, so it seems not really to be required.  Maybe <code>std::domain_error</code> could be used instead like this:</p>

<pre><code>throw std::domain_error("Any two sides of a triangle must be longer than one");
</code></pre>

<h2>Provide a test driver</h2>

<p>This is more about getting a good review rather than the code itself, but it's often good to give reviewers a complete, compileable example to allow them to see the code in context.  Here's what I used:</p>

<pre><code>#include &lt;iostream&gt;
int main() {
    Triangle t1{3, 4, 5};
    std::cout &lt;&lt; t1.Area() &lt;&lt; '\n';
    try {
        Triangle t2{3, 4, 15};
    }
    catch (std::exception &amp;e) {
        std::cout &lt;&lt; e.what() &lt;&lt; '\n';
    }
    Triangle t3{3, 4};
    std::cout &lt;&lt; t3.Area() &lt;&lt; '\n';
}
</code></pre>

<h2>Use <code>std::</code> for math functions</h2>

<p>The <code>sqrt</code> function is often in the global namespace, but it's required to be in the <code>std</code> namespace.  For that reason, it's probably safer to write <code>std::sqrt</code> than just <code>sqrt</code>.</p>

<h2>Use standard keywords</h2>

<p>Instead of <code>_NOEXCEPT</code> which is not standard, the code could use <code>noexcept</code>.</p>

<h2>Reworked example</h2>

<pre><code>#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;stdexcept&gt;

class Shape
{
public:
    virtual double Area() const = 0;
};

class Triangle : public Shape
{
public:
    Triangle(double base, double height);
    Triangle(double a, double b, double c);
    double Area() const override { return area;}

private:
    double area;
};

Triangle::Triangle(double base, double height) 
    : area{(base * height)/2}
{
}

Triangle::Triangle(double a, double b, double c) 
    : area{(a-b-c)*(-a+b-c)*(a+b-c)*(a+b+c)/16}
{
    if (area &lt; 0)
        throw std::domain_error("Any two sides of a triangle must be longer than one");
    area = std::sqrt(area);
}
</code></pre>
    </div>