<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If the grader is complaining about "time limit exceeded," it must be because some loop is executing too many times. All of your functions are clearly O(1) â€” they have no loops. So which loop is executing too many times? It must be the only loop in the entire program:</p>

<pre><code>    while(!isFull(n)){
        cin&gt;&gt;a;
        push(a);
    }
</code></pre>

<p>Is it possible that your <code>isFull</code> is returning an incorrect answer? It's very straightforward: it tests <code>s.size() == n</code>. Is it possible that <code>push(a)</code> is not updating <code>s.size()</code>?</p>

<p>Reflowed for brevity and clarity, your <code>push</code> looks like this:</p>

<pre><code>void push(int a)
{
     if (s.empty()) {
         minEle = a;
         s.push(a);
     } else if (a &lt; minEle) {
         s.push(a - minEle);
         minEle = a;
     } else if (a &gt; minEle) {
         s.push(a); 
     }
}
</code></pre>

<p>Do you see the bug yet? The problem is that when <code>a == minEle</code>, you never push anything! So if you get the input <code>1 1</code>, you'll cause the test driver to loop forever... and that is what causes the timeout.</p>

<p>Also consider that there is no limit on the values of the integers you're given (just on the number of test cases <code>T</code> and the number of integers per test case <code>N</code>). So you'll have to find a way to make your code work with input <code>-1</code> as well.</p>

<p>Consider maintaining a second stack <code>std::stack&lt;int&gt; minEle</code> alongside your <code>std::stack&lt;int&gt; s</code>. Does that make the problem easier?</p>

<hr>

<p>EDITED TO ADD: If you kept the current <code>push</code>, then you could rewrite it for <em>even more clarity</em> by factoring the <code>s.push</code> to the bottom of the function, like this:</p>

<pre><code>void push(int a)
{
     if (s.empty()) {
         minEle = a;
     } else if (a &lt; minEle) {
         a -= std::exchange(minEle, a);
     } else if (a &gt; minEle) {
         // do nothing
     } else {
         return;  // uh-oh!
     }
     s.push(a);
}
</code></pre>

<p>This shows clearly that each call to <code>push</code> results in one and only one call to <code>s.push</code> (except for the buggy case).</p>
    </div>