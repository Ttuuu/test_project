<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think there's a simpler way to do this:</p>

<pre><code>fmt = [
    [ "", "", "" ],
    [ "{c:+g}", "{sign:s}x", "{sign:s}x^{n:g}" ],
    [ "{c:+g}", "{c:+g}x", "{c:+g}x^{n:g}" ]
]

def term(c, n):
    return fmt[cmp(abs(c),1)+1][cmp(n,1)+1].format(sign="- +"[cmp(c,0)+1], c=c, n=n)

def poly(xs):
    return "".join(term(xs[i],len(xs)-i-1) for i in xrange(len(xs)))

def suppsign(s):
    return s.lstrip('+')

print suppsign(poly([1,1,1]))
</code></pre>

<p>The <code>term</code> function takes a coefficient and power value and uses the characteristics of those two to select the appropriate format string to generate a string representing an individual term. </p>

<p>The <code>poly</code> function uses a list comprehension to efficiently concatenate the string for each term. </p>

<p>The <code>suppsign</code> function simply removes the leading <code>+</code> from the resulting string if desired.</p>
    </div>