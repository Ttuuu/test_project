<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Performance</h1>

<p>Here's where all the action happens:</p>

<pre><code># Select the first r columns of u corresponding to the r principle Eigenvector of
# MatrixForEigenvalues
TRANSPOSE_NEW_EIGVEC = array(NEW_EIGVEC).real.T   # Done for easy accessibility of matrix
TRANSPOSE_MATRIX_U = array(NEW_U).real.T  # Done for easy accessibility of matrix
FINAL_ARRAY_EIGVAL = []
FINAL_ARRAY_EIGVEC = []
FINAL_MATRIX_U = []
for i in range(len(array(NEW_EIGVAL).real)):
    j = argmax(array(NEW_EIGVAL).real)
    FINAL_ARRAY_EIGVAL.append((array(NEW_EIGVAL).real)[j])
    FINAL_ARRAY_EIGVEC.append(TRANSPOSE_NEW_EIGVEC[j])
    FINAL_MATRIX_U.append(TRANSPOSE_MATRIX_U[j])
    TRANSPOSE_NEW_EIGVEC = concatenate((TRANSPOSE_NEW_EIGVEC[:j], TRANSPOSE_NEW_EIGVEC[j+1:]))
    TRANSPOSE_MATRIX_U = concatenate((TRANSPOSE_MATRIX_U[:j], TRANSPOSE_MATRIX_U[j+1:]))
RESULT_MATRIX_U = array(FINAL_MATRIX_U).T     # This is the actual R
</code></pre>

<p>The first thing I notice is multiple calls to <code>array()</code>, specifically for <code>array(NEW_EIGVAL).real</code>. This is inefficient; doing all the necessary conversions at the beginning and then referencing the variables would be much more efficient. Next, I get the strong suspician that <code>j = argmax(array(NEW_EIGVAL).real)</code> could be moved out of the loop, since <code>array(NEW_EIGVAL).real</code> isn't changing between iterations of the for loop. This in turn makes me strongly suspect that the line appending to <code>FINAL_ARRAY_EIGVAL</code> is buggy in some manner, since it's just getting the same element of <code>NEW_EIGVALUE</code> each time. Another thing I notice is that neither <code>FINAL_ARRAY_EIGVAL</code> nor <code>FINAL_ARRAY_EIGVEC</code> is referenced outside of the loop, making them functionally useless at the moment. If you plan to use them later, they can stay, but otherwise, they are just unnecessary cycles. Finally, <code>concatenate</code> is a very hacky and non idiomatic way to remove one element of an array; I would probably try to use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.delete.html" rel="nofollow noreferrer">delete()</a> instead.</p>

<p>Since I'm unfamiliar with matrix eigenvector calculations, I unfortunately can't help you much more with optimization, unless I did some more research (and I probably would need some more information about your datasets). Anyway, I have some other suggestions to help you improve your Python coding style in general:</p>

<h1>Descriptive variable names are useful</h1>

<p>I recommend looking at <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">PEP 8 variable naming conventions</a>. It would improve the readability of your code.</p>

<p>In particular, instead of using names like <code>U</code> and <code>K</code>, I would recommend using more descriptive names. Also, instead of continually phasing names out and deleting them, it may be better to create temp variables to store the new value and then delete those, so the same variable has the same name throughout, but that's a matter of personal style (I'll address this more in the next section.)</p>

<h1>Touch-ups</h1>

<p>I notice a lot of <code>del</code> statements in your code. This can be avoided by taking advantage of the for-loop scope and not naming one use variables:</p>

<pre><code>U = []
for k in uread('U.csv'):
    # ...

S = []
for s in uread('s.csv'):
    # ...

EIGVAL = []
for e in uread('EIGVAL.csv'):
    # ...

EIGVEC = []
for e in uread('EIGVEC.csv'):
    # ...
</code></pre>

<p>With statements can use an <code>as</code> clause to specify the name of the file so you don't have to define it on a separate line:</p>

<pre><code>def uread(filename):
    with open(filename, 'r') as UFILE:
        READER = csv.reader(UFILE)
        for i in READER:
            yield i
</code></pre>

<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List comprehensions</a> can significantly simplify your code, and eliminate unnecessary (explicit) variable assignment:</p>

<p><strong>Original</strong>:</p>

<pre><code>for k in ufinal:
    TEMP = []
    for j in k:
        TEMP.append(eval(j))
    U.append(TEMP)
    del TEMP
    del k
</code></pre>

<p><strong>Improved</strong>:</p>

<pre><code>for k in ufinal:
    U.append([eval(i) for i in k])
    del k
</code></pre>

<p>Better yet, you can just turn most of your initial loops into list comprehensions:</p>

<p><strong>Original</strong>:</p>

<pre><code>U = []
for k in uread('U.csv'):
    U.append([eval(i) for i in k])

S = []
for s in uread('s.csv'):
    for t in s:
        S.append(eval(t))

EIGVAL = []
for e in uread('EIGVAL.csv'):
    for l in e:
        EIGVAL.append(eval(l))

EIGVEC = []
for e in uread('EIGVEC.csv'):
    for l in e:
        EIGVEC.append(eval(l))
</code></pre>

<p><strong>Improved</strong>:</p>

<pre><code>U = [[eval(j) for j in i] for i in uread('U.csv')]
S = [eval(j) for i in uread('s.csv') for j in i]
EIGVAL = [eval(j) for i in uread('EIGVAL.csv') for j in i]
EIGVEC = [eval(j) for i in uread('EIGVEC.csv') for j in i]
</code></pre>

<h1>Final improved code</h1>

<p>Warning: this is untested, so one or two things may be broken (but I've tried my very best to avoid that.) Since I don't know your datasets, I thought I'd leave testing up to you.</p>

<pre><code># -*- coding: utf-8 -*-
from numpy import array, argmax, delete
import csv

def uread(filename):
    with open(filename, 'r') as UFILE:
        READER = csv.reader(UFILE)
        for i in READER:
            yield i

U = [[eval(j) for j in i] for i in uread('U.csv')]
S = [eval(j) for i in uread('s.csv') for j in i]
EIGVAL = [eval(j) for i in uread('EIGVAL.csv') for j in i]
EIGVEC = [eval(j) for i in uread('EIGVEC.csv') for j in i]

NEW_U = []
NEW_EIGVAL = []
NEW_EIGVEC = []
for i in range(len(S)):
    if S[i] &gt; 0.001:
        NEW_U.append(U[i])
        NEW_EIGVAL.append(EIGVAL[i])
        NEW_EIGVEC.append(EIGVEC[i])
del U
del EIGVAL
del EIGVEC
# Select the first r columns of u corresponding to the r principle Eigenvector of
# MatrixForEigenvalues
NEW_EIGVAL = array(NEW_EIGVAL).real
NEW_EIGVEC = array(NEW_EIGVEC)
TRANSPOSE_NEW_EIGVEC = NEW_EIGVEC.real.T   # Done for easy accessibility of matrix
TRANSPOSE_MATRIX_U = array(NEW_U).real.T  # Done for easy accessibility of matrix
FINAL_ARRAY_EIGVAL = []
FINAL_ARRAY_EIGVEC = []
FINAL_MATRIX_U = []
j = argmax(NEW_EIGVAL)
for i in range(len(NEW_EIGVAL)):
    FINAL_ARRAY_EIGVAL.append((NEW_EIGVAL)[j])
    FINAL_ARRAY_EIGVEC.append(TRANSPOSE_NEW_EIGVEC[j])
    FINAL_MATRIX_U.append(TRANSPOSE_MATRIX_U[j])
    TRANSPOSE_NEW_EIGVEC = delete(TRANSPOSE_NEW_EIGVEC, j)
    TRANSPOSE_MATRIX_U = delete(TRANSPOSE_MATRIX_U, j)
RESULT_MATRIX_U = array(FINAL_MATRIX_U).T     # This is the actual R
with open('r.csv', 'w') as r_file:
    WRITER = csv.writer(r_file)
    WRITER.writerows(RESULT_MATRIX_U)
print(RESULT_MATRIX_U)
</code></pre>
    </div>