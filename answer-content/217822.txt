<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In C, <a href="https://wiki.sei.cmu.edu/confluence/plugins/servlet/mobile?contentId=87152150#content/view/87152150" rel="noreferrer">initialization and destruction should be done at the same level of abstraction</a>.  This is important because it defines who is responsible for the memory.</p>

<p>There are two good ways to follow this guideline:</p>

<ul>
<li><p>Allocate and deallocate in the API's init/destroy functions (your first code example).  <code>fopen</code> does this although it maps files rather than regular memory.</p>

<pre><code>type *t = CHECK(init_t());
...
CHECK(destroy_t(t));
</code></pre></li>
<li><p>Allocate and deallocate at the call site before/after the API calls.  <code>pthread_mutex_create</code> does this.</p>

<pre><code>type t;
CHECK(init_t(&amp;t));
...
CHECK(destroy_t(&amp;t));
</code></pre></li>
</ul>

<p>It is <strong>not</strong> acceptable to allocate in an initializer and then free outside.  There are many examples of this pattern in the Windows API, and it is extremely error prone.   You have to check the docs for which deallocation function needs to be called each time.</p>

<p>I personally prefer to allocate/deallocate outside the API.  That way I can use automatic variables and the return value of the initializer can be a specific error code.</p>
    </div>