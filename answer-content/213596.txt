<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<h1>what I like</h1>

<ul>
<li>you follow the Java Naming conventions</li>
<li>you resist to solve the problem based on an array</li>
</ul>

<h1>what I dislike</h1>

<h2>violation of <em>encapsulation / information hiding</em></h2>

<p>You access directly properties of an object and (even worse) their properties too like this:</p>

<blockquote>
<pre><code>x == ship.shipGeographic.x &amp;&amp; ship.shipGeographic.y &lt;= y
</code></pre>
</blockquote>

<p>But the code using an object should not know anything about the internal implementation pf this object. The using code should only call (public) methods on on an object. This enables both: polymorphism and improving the internal implementation without affecting the calling code. The getters and setters you mention are <em>not</em> a solution to this problem.</p>

<p>The names for this "code smells" is <em>feature envy</em>: the calling code does something what should better be done inside the object by applying the "tell, don't ask" principle.</p>

<h2>separation of concerns - intermix of user IO and business logic</h2>

<p>In your code the <code>Board</code> class is responsible for the user IO and also does game logic. This reduces the  re-usability of the game logic. I.e.: you have to do a complete rewrite if you want to change the User interface to  graphics instead of a command line. You should learn about the Model-View-Controller concept (MVC) and its relatives MCP, MVVC and MVVM.</p>

<h2>unnecessary mutability</h2>

<p>Your ship objects are mutable, this means their properties could be changed at any time during the game. But in practice the properties never change after initialization. Therefore your should pass all the properties as constructor parameters and store them in <code>final</code> declared properties.</p>

<h2>incomplete OO approach.</h2>

<p>IMHO you stopped doing an OO approach half way.  </p>

<p>Holding a list of ships which know their positions is a good first step. But you could walked that path further.</p>

<p>E.g. The list of ships could only hold unsunk ones. Then the check for the end of the game would change from a <em>loop</em> to a simple statement: </p>

<pre><code>boolean allShipsSank() {
    return listOfShips.isEmpty();    
}
</code></pre>

<p>Next possibility could be the "ship hit" logik.</p>

<p>For once the ship should know itself if being hit:</p>

<pre><code>class Ship {
  //...
  boolean isHitBy(int x, int y) {
    // logic here
  }
  //...
}
</code></pre>

<p>but instead of doing a calculation here I'd go the "collection" approach again. </p>

<p>First we need to introduce another class:</p>

<pre><code>class BordPosition{ // this is a DTO and has no business logik
   final int x;
   final int y;
   BordPosition(int x, int y){
     this.x = x;
     this.y = y;
   }
   // implement equals() and hascode()
}
</code></pre>

<p>and we need to enhance the <code>Orientation</code> enum:</p>

<pre><code>enum Orientation {
    HORIZONTAL{
        public BordPosition translate(BordPosition startPoint, int stepsToMove){
           return new BordPosition(startPoint.x+stepsToMove, startPoint.y);
        }
    }, 
    VERTICAL{
        public BordPosition translate(BordPosition startPoint, int stepsToMove){
           return new BordPosition(startPoint.x, startPoint.y+stepsToMove);
        }
    };
    abstract public BordPosition translate(BordPosition startPoint, int stepsToMove);
}
</code></pre>

<p>then class <code>Ship</code> would change to this</p>

<pre><code>class Ship {
  private final Collection&lt;BordPosition&gt; occupiedFields = new HashSet&lt;&gt;();
  private final Collection&lt;BordPosition&gt; hitFields = new HashSet&lt;&gt;();
  Ship(BordPosition startPoint, Orientation orientation, int size){
    for (int stepsToMove = 0; stepsToMove&lt;size; stepsToMove++) {
        occupiedFields.add(orientation.translate(startPoint,stepsToMove));
    }
  }

  boolean isHitBy(BordPosition missleTarget) {
    if(occupiedFields.contains(missleTarget)){
      hitFields.add(missleTarget);
      if (hitFields.size()==occupiedFields.size()){
       // deregister from ship list via Listener pattern
      }
      return true;
    } else {
      return false;
    } 
  }
  //...
}
</code></pre>
    </div>