<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Concurrency</h2>

<blockquote>
  <p><em>Is this parallel implementation correct?</em></p>
</blockquote>

<p>I would expect a method called <code>RunParallel&lt;T&gt;</code> to use processor affinity (<a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallel?view=netframework-4.8" rel="nofollow noreferrer">Parallel.For</a>) specially since you take the processor count into account  <code>var tasks = new Task&lt;Maybe&lt;T&gt;&gt;[Environment.ProcessorCount];</code>. But instead, you use thread affinity <code>tasks[i] = Task.Run(() =&gt; ..</code> </p>

<p>Either refactor <code>RunParallel&lt;T&gt;</code> to actually be parallel, or keep it asynchronous and rename it to something in the likes of <code>Any&lt;T&gt;</code>. You might also want to use the <a href="https://www.dotnetperls.com/async" rel="nofollow noreferrer">async/await pattern</a> when choosing the latter.</p>

<hr>

<h2>Syntax</h2>

<blockquote>
  <p><em>Is the creation of a non-generic class just to enable a prettier syntax legitimate? I prefer writing <code>Maybe.Just(whatever)</code> than
  <code>Maybe&lt;LongType&gt;.Just(whatever)</code>.</em></p>
</blockquote>

<p>Have you considered an extension method:</p>

<pre><code>public static class Maybe {

    public static Maybe&lt;T&gt; Just&lt;T&gt;(this T value) =&gt; Maybe&lt;T&gt;.Just(value);
}
</code></pre>

<p>And usage:</p>

<pre><code>int myValue = 5;
var maybe = myValue.Just(); // Maybe&lt;int&gt;();
</code></pre>
    </div>