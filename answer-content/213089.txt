<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The test itself seems okay. </p>

<h1>bug</h1>

<p>You use <code>"ID"</code> as columns name in the test, but <code>"TRADEID"</code> in the method to test.</p>

<p>And the result is not what was expected. The <code>TRADEID</code>s don't match </p>

<h1>Classes</h1>

<p>There is no use for the class <code>Operations</code>. If you want to group functions that belong together, you can do so in a module (file) and import that. The fact <code>disaggregate_ops_volume_date</code> has a <code>self</code> parameter that is unused is a giveaway here</p>

<h1>Vectorize</h1>

<p>there is no reason to calculate <code>ops['NDAYS']</code> row per row via apply. <code>(df["SEQ_PERIODEND"] - df["SEQ_PERIODSTART"]).dt.days</code> works just as well.</p>

<p>Then you can use <code>DataFrame.assign</code>, and don't have to explicitly make a copy of <code>df</code></p>

<pre><code>ndays = (df["SEQ_PERIODEND"] - df["SEQ_PERIODSTART"]).dt.days
ops = df.assign(NDAYS = ndays)
</code></pre>

<h1>Day</h1>

<p>Since a days is used a lot in that method, it can be clearer to define that up front:</p>

<pre><code>DAY = pd.Timedelta("1d")
</code></pre>

<p><code>ndays</code> can then be defined as <code>ndays = (df["SEQ_PERIODEND"] - df["SEQ_PERIODSTART"]) // DAY</code>. Whether this is clearer than the <code>.dt.days</code> is a matter of taste.</p>

<p>correcting the date can then be expessed more clearly as:</p>

<pre><code>ops["SEQ_PERIODSTART"] += ops.groupby("TRADEID").cumcount() * DAY
ops["SEQ_PERIODEND"] = ops["SEQ_PERIODSTART"] + DAY
</code></pre>

<h1><code>input</code></h1>

<p><code>input</code> is a <code>builtin</code>. By using that name as a variable name, you shadow that builtin. In this case this is not a big problem, but in general you should avoid this</p>

<h1>indentation style</h1>

<p>You use a very inconsistent style of indenting the code, and what goes on a separate line. Better would be to remain consistent. For this, I use <a href="https://github.com/ambv/black" rel="nofollow noreferrer">black</a>.</p>

<p>This changes:</p>

<pre><code>expected = pd.DataFrame(
    {'SEQ_PERIODSTART':  
         ['2019-02-10', '2019-02-12',                                                           '2019-02-13', '2019-02-13',                                              '2019-02-14', '2019-02-15',                                             '2019-02-16', '2019-02-17'],

      'SEQ_PERIODEND': 
          ['2019-02-11',  '2019-02-13', 
          '2019-02-14', '2019-02-14',                                               '2019-02-15', '2019-02-16',                                          '2019-02-17', '2019-02-18'],
       'ID': [0, 1, 2, 3, 4, 5, 6, 7],
       'NDAYS': [1, 2, 2, 5, 5, 5, 5, 5]
                       })
</code></pre>

<p>to:</p>

<pre><code>expected = pd.DataFrame(
    {
        "SEQ_PERIODSTART": [
            "2019-02-10",
            "2019-02-12",
            "2019-02-13",
            "2019-02-13",
            "2019-02-14",
            "2019-02-15",
            "2019-02-16",
            "2019-02-17",
        ],
        "SEQ_PERIODEND": [
            "2019-02-11",
            "2019-02-13",
            "2019-02-14",
            "2019-02-14",
            "2019-02-15",
            "2019-02-16",
            "2019-02-17",
            "2019-02-18",
        ],
        "ID": [0, 1, 2, 3, 4, 5, 6, 7],
        "NDAYS": [1, 2, 2, 5, 5, 5, 5, 5],
    }
)
</code></pre>

<p>Which I think, is a lot more clear</p>

<h1><code>pd.to_datetime</code></h1>

<p>You can invoke this immediately on a <code>list</code>, so defining the input DataFrame can become:</p>

<pre><code>input_df = pd.DataFrame(
    {
        "SEQ_PERIODSTART": pd.to_datetime(
            ["2019-02-10", "2019-02-12", "2019-02-13"]
        ),
        "SEQ_PERIODEND": pd.to_datetime(
            ["2019-02-11", "2019-02-14", "2019-02-18"]
        ),
        "ID": [0, 1, 2],
    }
)
</code></pre>

<h1>defining test DataFrames</h1>

<p>Instead of invoking <code>pd.DataFrame</code> immediately, an alternative is working via a <code>csv</code>-like text input, and then use <code>pd.read_csv</code> and <code>StringIO</code> to convert it to a DataFrame.</p>

<pre><code>expected_str = """
SEQ_PERIODSTART  SEQ_PERIODEND  TRADEID  NDAYS
2019-02-10       2019-02-11     0        1
2019-02-12       2019-02-13     1        2
2019-02-13       2019-02-14     2        2
2019-02-13       2019-02-14     3        5
2019-02-14       2019-02-15     4        5
2019-02-15       2019-02-16     5        5
2019-02-16       2019-02-17     6        5
2019-02-17       2019-02-18     7        5"""
expected = pd.read_csv(
    StringIO(expected_str),
    sep="\s+",
    parse_dates=["SEQ_PERIODSTART", "SEQ_PERIODEND"],
)
</code></pre>

<p>Whether this is more clear than using <code>pd.DataFrame()</code> is a matter of taste. The advantage of this method is that it is easy to add or remove a line, and see whether the data is aligned correctly.</p>
    </div>