<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Don't write getters and setters for every class</h2>

<p>C++ isn't Java and writing getter and setter functions for every C++ class is not good style. Instead, move setter functionality into constructors and think very carefully about whether a getter is needed at all. In this code, there are some invariants being enforced, but I'd still be skeptical about the need for all of these setters and getters. For example, the whole chaining of raw pointers to loggers is rather suspect.  While checks are made to verify the pointer isn't <code>nullptr</code>, a handler or parent could go out of scope and the class would still be using a non-<code>nullptr</code> but invalid pointer.</p>

<h2>Minimize the interface</h2>

<p>Is there really a compelling need to have an <code>is_trace</code> and related?  I'd recommend simplifying the interface by omitting all of those.  The user can just as easily write <code>if(log.threshold &lt;= log_severity::TRACE) {}</code>.  </p>

<h2>Use better data structures</h2>

<p>The code currently contains code for <code>operator&lt;&lt;</code> that looks like this:</p>

<pre><code>std::ostream&amp; bran::operator&lt;&lt;(std::ostream&amp; out, bran::log_severity severity) {
        static const std::string SEVERITY_NAMES[] = {"INHERIT", "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL"};
        static const size_t SEVERITY_COUNT = sizeof(SEVERITY_NAMES) / sizeof(SEVERITY_NAMES[0]);

    auto index = static_cast&lt;size_t&gt;(severity);
    assert(index &lt; SEVERITY_COUNT);

    return out &lt;&lt; SEVERITY_NAMES[index];
}
</code></pre>

<p>Since you're using the C++17 <code>[[nodiscard]]</code>, you could also use <code>std::string_view</code> and <code>std::array</code> to make this cleaner and more modern.</p>

<pre><code>#include &lt;array&gt;
#include &lt;string_view&gt;
std::ostream&amp; bran::operator&lt;&lt;(std::ostream&amp; out, bran::log_severity severity) {
    static constexpr std::array&lt;std::string_view, 7&gt; severity_names{"INHERIT", "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL"};
    auto index = static_cast&lt;size_t&gt;(severity);
    assert(index &lt; severity_names.size());
    return out &lt;&lt; severity_names[index];
}
</code></pre>

<p>Also, it's better to avoid ALL_CAPS names.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-not-CAPS" rel="nofollow noreferrer">ES.9</a></p>

<h2>Rethink the existence of the class</h2>

<p>As noted in the description of the code, all of the real work is being done by an unposted <code>Handler</code> function.  Since the only useful things in the <code>basic_logger</code> class are the name and severity level, I'd suggest replacing the entire templated class with a concrete class that contains those two data items and whatever actual behavior is in <code>Handler</code>.  The only required function in the <code>Handler</code> is apparently <code>log</code>.  If you think you might need variations on the handler, simply make it a base class and make the <code>log</code> and destructor <code>virtual</code>.</p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.</p>
    </div>