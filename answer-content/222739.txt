<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm on my phone, so it's hard to really see this code as a whole and really take the full context of everything. I'm just going to flip through and mention things as I notice them.</p>

<hr>

<p>At the top, you have</p>

<pre><code>vengeful = 'VENGEFUL.'
</code></pre>

<p>And other such lines. This strikes me as odd. The only small benefit I can see is this would help the IDE auto-complete the word. Looking at how you're using it, you're forcing a <em>ton</em> of repetitious code in functions like <code>civil_left</code>. Look at that function, and look at the function below it and think about how much of those functions are the same. Not only are each of lines in the functions nearly identical, both of those functions are basically the same! Whenever you have code that's nearly identical in multiple spots, make the identical code the body of a function, and make the parts that differ parameters to the function. </p>

<p>How would that look? The only real part that differs is the end of that sentence where you decide what status to display. First, factor out the part that decides the word to use:</p>

<pre><code>def describe_status(relation):
    if relation &lt;= -8:
        return "vengeful"

    elif -8 &lt; relation &lt;= -4: # Note, you can chain comparison operators
        return "hateful"

    elif -4 &lt; relation &lt;= -1:
        return "disappointed"

    elif -1 &lt; relation &lt;= 2:
        return "conflicted" 

    #... The rest of the statuses
</code></pre>

<p>Then, use that function:</p>

<pre><code>def civil_left():
    status = describe_status(relationship[1])

    print('You left the', civilian, 'feeling', status)

def army_left():
    status = describe_status(relationship[0])

    print('You left the', army_government, 'feeling', status)
</code></pre>

<p>Now, the major problem here is that you set the relationship thresholds at different levels for each. You could add a second parameter to <code>describe_status</code> that adds an offset to each condition to remedy that though. Note how much duplication that removed though!</p>

<hr>

<p>I'll note that you tagged this as <code>functional-programming</code>, but this is <em>far</em> from what would be considered functional. I'm not going to go into great detail about what all FP means, but basically, if you're following FP principals, you're passing data around instead of mutating objects and carrying out side effects. All of your functions <code>print</code> directly, and none seem to accept any parameters. This is not good, regardless of the paradigm that you're following. You're relying entirely on global state (like <code>relationships</code>), and on operating through side effects (like altering <code>relationships</code> and using <code>print</code> everywhere). If you continue to code like this, you will have a very difficult time creating anything other than small projects, and debugging will increasingly become a nightmare.</p>

<p>Look at how <code>describe_status</code> operates. Every piece of data that it requires is a parameter (<code>relation</code>), and everything the function does is done via the data that's <code>return</code>ed. When functions are just taking and returning data, it becomes much easier to reason about how the code works; and that's an extremely important goal. Code that's hard to understand the operation of is code that's hard to maintain and build on.</p>

<hr>

<p>You have a lot of story Strings embedded in the code. I would save these in a file and read them from file as needed. That will make the code less bulky, and will make it so you don't need to alter the code if you want to alter the story. </p>

<hr>

<p>I'm going to submit this before it gets closed. Good luck! </p>
    </div>