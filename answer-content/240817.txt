<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To review your code, I opened it in IntelliJ, which is an integrated development environment (IDE). One of its main features is the thousands of inspections it has for making code simpler and shorter. For example, it suggests:</p>

<ul>
<li><p>In <code>Control.java</code>, instead of writing <code>String args[]</code>, the usual way is to write <code>String[] args</code>. Changing this does not affect the code execution in any way, it only makes the code easier to read for humans.</p></li>
<li><p>In <code>Minesweeper.java</code>, instead of writing <code>private int[][]</code>, you can write <code>private final int[][]</code> to document that this variable is only ever assigned once, which also helps the human reader since otherwise this variable might be modified in any of the other 60 lines.</p></li>
<li><p>In <code>Gui.java</code>, instead of writing <code>new ActionListener() { â€¦ }</code>, you can replace that code with a much shorter form, which is called a lambda expression. That's a terribly unhelpful name if you don't know what it is about. A much better name is <em>unnamed method</em>, or in some other programming languages, <em>anonymous function</em>. Basically it's just a piece of code that can be run.</p></li>
</ul>

<p>So much for the simple transformations. Having these code transformations at your finger tips makes it easy to experiment with your code and apply these suggestions from the IDE, as well as undo them if you don't like them.</p>

<p>An IDE can also format the source code, so that it has a consistent look that is familiar to many other readers. For example, in your code you write <code>for(int i</code>, while the common form is to have a space after the <code>for</code>, which makes it <code>for (int i</code>.</p>

<p>On a completely different topic, the label that displays the elapsed time sometimes jumps around on the screen. This is because the seconds "0" is thinner than the seconds "00". To avoid this, you can replace this code:</p>

<pre><code>counter.setText(minutes + " : " + seconds);
</code></pre>

<p>with this code:</p>

<pre><code>counter.setText(String.format("%d : %02d", minutes, seconds));
</code></pre>

<p>The <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/String.html#format%28java.lang.String,java.lang.Object...%29" rel="nofollow noreferrer">String.format</a> function is quite powerful. It defines a format with placeholders, into which the remaining arguments are inserted. In this case it means:</p>

<ul>
<li><code>%d</code> is just a decimal number.</li>
<li><code>%02d</code> is a decimal number, but with at least 2 digits. Any number thinner than this will be filled with 0.</li>
</ul>

<p>See <a href="https://blog.usejournal.com/proportional-vs-monospaced-numbers-when-to-use-which-one-in-order-to-avoid-wiggling-labels-e31b1c83e4d0" rel="nofollow noreferrer">this article</a> for other popular programs that didn't get this right, there are even some programs by Apple.</p>

<p>When I saw your code first, I was a bit disappointed that the Minesweeper class uses the constant <code>Gui.size</code>. That constant has nothing to do with the GUI, it should rather be defined in the <code>Minesweeper</code> class, since it is not specific to the screen representation but rather to the abstract representation of the mine field.</p>

<p>It would also be nice if I could have a Minesweeper object with different sizes. To do this, you can edit the Minesweeper class in these steps:</p>

<ol>
<li><p>At the top of the class, modify the code to be:</p>

<pre class="lang-java prettyprint-override"><code>public class Minesweeper {

    private final int width;
    private final int height;

    public Minesweeper(int width, int height) {
        this.width = width;
        this.height = height;
    }
</code></pre></li>
<li>Replace <code>Gui.size</code> with <code>widthOrHeight</code> everywhere in <code>Minesweeper.java</code>.</li>
<li>Replace each instance of <code>widthOrHeight</code> with either <code>width</code> or <code>height</code>, whichever fits.</li>
<li>Finally make the width and the height of the mine field publicly available by adding these methods at the bottom of the Minesweeper class:

<pre class="lang-java prettyprint-override"><code>public int getWidth() { return width; }
public int getHeight() { return height; }
</code></pre></li>
</ol>

<p>Now you can define mine fields of arbitrary sizes.</p>

<p>There's certainly more to say, but I'll leave that to the other reviewers.</p>
    </div>