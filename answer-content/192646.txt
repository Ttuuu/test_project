<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am aware this is old but here goes:</p>

<ul>
<li>Can you confirm that *sql.Tx.Query is a proper query builder that prevents sql injection attacks (I don't know).</li>
<li>You are correctly closing the rows using defer.</li>
<li>Your Follow function could do the down selection on the database using a where clause to determine if you are not already following without requiring two queries (to distinguish between non-existent user and already following, you would have to return a count of the unfiltered username as well).</li>
<li>DO NOT store a users password; instead have a random per user salt generated and stored to perform multiple (10 say) becrypt rounds to get a suitably secure hash.</li>
<li>You can probably reduce the number of retweet queries by using a slightly more complex version of the following approach</li>
<li>Your code implies discrete polling for tweets doing table searches; this gets inefficient quickly with a n * m * u load on your database (n ~ number of people, m ~ number of following per person, u ~ update rate)

<ul>
<li>A much lower processing load (but greater storage) way is to have sharded tweet and followed message tables containing a list of tweets for a users attention (referencing the original tweet entry) so that you only need to do a simple search of a single shard of the followed tweet table for a given user to find all tweets for that users attention without doing table joins.  Tweets of interest are pushed onto the sharded followed tweet tables when the original author tweets.  The tweet and followed message tables are sharded by the tweeting user and following user respectively. </li>
</ul></li>
<li>You could have a flag in the sharded user table that is set whenever there are new tweets to display, again avoiding excessive database loading by re-scanning an entire tweet table for new tweets.</li>
<li>You don't show how you would be doing app/web page updates; are you fast polling (bad idea), long polling (minimum fallback), a push notification service (which can get costly) or using websockets (good if it works for a given user but fiewalls and proxies often interfere) ?  </li>
</ul>

<p>NB: Reducing the sizes of tables, the number and complexity of queries to a minimum is essential to maintain system performance and minimise cost</p>
    </div>