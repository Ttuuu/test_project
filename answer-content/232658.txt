<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code already follows a good programming practice, which is to make all statements contained by <code>if</code>, <code>then</code> and loops logic blocks rather than single statements.</p>
<h2>Portability</h2>
<p>The code is specifically using Unix/Linux headers and is not portable to other systems, such as Windows. On Windows the code won't compile due to the headers <code>#include &lt;unistd.h&gt;</code> and <code>#include &lt;pthread.h&gt;</code>. The use of the function <code>sleep()</code> also prevents portability.</p>
<h2>Use C++ Random Number Generator Over C Random Number Generator</h2>
<p>The code is currently using the <code>C</code> programming language random number generation technique. Since C++11 the C++ programming language has had it's own random number generator that provides a better distribution of random numbers.</p>
<pre><code>#include &lt;random&gt;
#include &lt;iostream&gt;

int main()
{
    std::random_device dev;
    std::mt19937 rng(dev());
    std::uniform_int_distribution&lt;std::mt19937::result_type&gt; dist6(1,6); // distribution in range [1, 6]

    std::cout &lt;&lt; dist6(rng) &lt;&lt; std::endl;
}
</code></pre>
<p>This is discussed in more detail in <a href="https://stackoverflow.com/questions/13445688/how-to-generate-a-random-number-in-c">this stackoverflow question</a>.</p>
<h2>Initialize Variables</h2>
<p>As noted by @vnp a best practice in C++ is to always initialize variables. Local variables in a function is memory allocated from the stack and may contain previous values, the C++ programming standard does not require local variables to be initialized by the compiler. This has caused many bugs over the years. This <a href="https://stackoverflow.com/questions/2218254/variable-initialization-in-c">stackoverflow question</a> discusses when a variable will or will not be initialized.</p>
<h2>Magic Numbers</h2>
<p>As noted by @vnp there are Magic Numbers in the <code>double eggHolderEvaluation(std::array&lt;double, DIMENSIONS&gt; p)</code> function (47), there are also magic numbers in the function <code>void* hillClimb(void* ignore)</code> (-512, 512, -5, 5 and 4). Tt might be better to create symbolic constants for them to make the code more readble and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintainence easier.</p>
<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>
<h2>Proper Include Headers</h2>
<p>This program uses the <code>C</code> programming include files <code>#include &lt;signal.h&gt;</code> and <code>#include &lt;float.h&gt;</code>. The <code>C++</code> version of these headers can be used by removing the dot h and prepending the file name with <code>'c'</code>.</p>
<pre><code>#include &lt;csignal&gt;
#include &lt;cfloat&gt;
</code></pre>
<p>The code is missing the header file <code>ctime</code> which is used to to initialize the random number generator.</p>
<h2>Exit Status</h2>
<p>The <code>return 0;</code> is not absolutely necessary, C++ will do the proper thing without it. If there were possible failure modes as well as successful exits, it might be better to include <code>cstdlib</code> and use <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="nofollow noreferrer">EXIT_SUCCESS and EXIT_FAILURE</a> rather than return 0.</p>
<h2>Readability</h2>
<p>The code might be more readable if it contained more vertical spacing. While there is vertical spacing between functions, the more complex functions could use vertical spacing to show separate logic blocks. Here is an example</p>
<pre><code>void* hillClimb(void* ignore) {
    std::array&lt;double, DIMENSIONS&gt; position; // position for evaluation later
    std::array&lt;double, DIMENSIONS&gt; stoch; // stochastic element
    double best, tempBest; // best of thread, temporary best used later

    while (continuing) { // while thread alive
        position = getRandPosition(-512, 512); // find a random position -512..512 for each dimension
        best = eggHolderEvaluation(position); // find fitness of that position
        while (checkInBounds(position, -512, 512)) { // while the position is within bounds
            for (unsigned int i = 0; i &lt; 4; i++) { // four possible moves
                stoch = getRandPosition(-5, 5); // stochastic summand position -5..5
                std::array&lt;double, DIMENSIONS&gt; tempPos; // for adding
                // add the stochastic element to the position
                for (unsigned int j = 0; j &lt; DIMENSIONS; j++) {
                    tempPos[j] = stoch[j] + position[j];
                }
                tempBest = eggHolderEvaluation(tempPos); // evaluate that new position

                if (tempBest &lt; best) { // if better than loop
                    position = tempPos; // overwrite
                    best = tempBest;
                }
            }

            if (best &lt; bestResult) { // if better than global
                bestPosition = position; // overwrite
                bestResult = best;
                std::cout &lt;&lt; "New minimum: " &lt;&lt; printBest();
            }
        }
    }

    return 0;
}
</code></pre>
<p>By breaking it up this way, it becomes obvious that the variables <code>best</code>, <code>tempBest</code> <code>position</code> and <code>stoch</code> can actually be declared within the loops themselvers rather than the top of the function.</p>
<p>If statements and loops become more readable if they are not on one line as shown above.</p>
    </div>