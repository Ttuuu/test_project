<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>Modelling the domain is crucial when designing a multi-layered application. Your concerns about polutting the domain with file or web specific code is pivotal to make a clean, extensible, reusable and testable API.</p>

<blockquote>
  <p><em>I am finding it very difficult to think of a domain object which does not include FileInfo or FileStream.</em></p>
</blockquote>

<hr>

<p>I would suggest the following guidelines for designing your layers.</p>

<h3>Domain Entities</h3>

<ul>
<li>Use <a href="https://en.wikipedia.org/wiki/Plain_old_CLR_object" rel="nofollow noreferrer">plain and simple classes</a> with public getters and setters.</li>
<li>Don't include web or file specific references like <code>FileUpload.FileToUpload</code> which is of type <code>System.Web.HttpPostedFileBase</code>. Instead have a property <code>IReadOnlyCollection&lt;byte&gt; Content</code> and <code>string FileName</code>.</li>
</ul>

<h3>Domain Services</h3>

<ul>
<li>Put all configuration and validation logic in services, not in the entities. This way, you can inject configuration and validation behavior at runtime using IoC. Entity <code>UserPhotosPath</code> should have its methods extracted to (for example) a <code>IUserPermissionsValidator</code> and <code>IUserPhotoRepository</code> interface. </li>
<li>Perhaps you could provide a <code>IUserPhotoService</code> as a facade for dealing with the validators and repositories internally. Like Entities, <a href="https://en.wikipedia.org/wiki/Domain-driven_design#Building_blocks" rel="nofollow noreferrer">Services</a> are a thing in DDD :)</li>
<li>Async methods could provide resource consuming behavior: You might want to include a method <code>async Task&lt;IReadOnlyCollection&lt;byte&gt;&gt; ReadContentAsync();</code></li>
</ul>

<h3>Infrastructure Services/Repositories</h3>

<ul>
<li>It is fine for the infrastructure layer to have file and web specific operations. But their public interface should work with the domain classes. Have your services call the infrastructure layer internally. Use the <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" rel="nofollow noreferrer">Dependency Inversion Principle</a> to provide the interfaces for the infrastructure layer at the domain layer.</li>
</ul>

<hr>

<p>When providing the above layers using the aforementioned patterns and principles, you should be able to provide:</p>

<ul>
<li>DRY code (services with common logic, infrastructure specific implementations)</li>
<li>an independant domain (no web, no file specific concerns)</li>
<li>DDD using POCO entities and Services</li>
<li>Layers communicating through the Dependency Inversion Principle</li>
<li>Testable and reusable services using interfaces</li>
</ul>
    </div>