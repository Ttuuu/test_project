<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution does what has been asked, however for some simple improvements I'd look at removing the duplicate code as the <code>Thread1</code> and <code>Thread2</code> classes only diff in their name.  So I'd delete one of the classes and pass a name parameter, now called <code>NamedThread</code>...</p>

<pre><code>public static class NamedThread implements Runnable {
    private final String name;

    NamedThread(String name) {
        this.name = name;
    }

    @Override
    public void run() {
        System.out.println("Echo from " + name);
    }
}
</code></pre>

<p>We can also improve the solution to make it reusable and extendable, for example, say we wanted it to work for 3 threads. So <code>andThen</code> can accept any number of
<code>Runnable</code>s and call <code>run()</code> on each of then</p>

<pre><code>public static Runnable andThen(Runnable... runnables) {
    return () -&gt; Arrays.asList(runnables).forEach(Runnable::run);
}
</code></pre>

<p>We can then improve main and remove the local variables</p>

<pre><code>public static void main(String[] args) {
    andThen(new NamedThread("thread1"),
            new NamedThread("thread2")).run();
}
</code></pre>
    </div>