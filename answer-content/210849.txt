<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use <code>[[ .. ]]</code> instead of <code>[ .. ]</code> to do tests.  The former is a bash builtin and saves a fork.</p>

<p>You don't need to eval anything since you're just building a couple of optional switches to grep.  Start with empty strings and populate variables or an array, and pass the result to an invocation of grep as variables.  This also avoids enumerating every possible combination of arguments (already 4 combos with 2 options -- that approach quickly becomes unsustainable).</p>

<p>There's no need to absorb searchTerm.  Just leave it in the arguments and pass all those to grep, which allows you to include grep switches too, like <code>-i</code>.</p>

<p>Use <code>set +x</code> to see what's going on.</p>

<p>Tying it all together:</p>

<pre><code>findInFile() {
    :&lt;&lt;_comment_
        Function to be placed in bash profile
        Allows user to specify what contents of a file they are looking for
        in what file types and in what NOT file types
        Iterate over the number of scripts arugments
_comment_
    declare -a select
    while [[ "$#" -gt 0 ]]
    do
        if [[ $1 =~ ^(-ft|--fileTypes|-et|--excludeTypes)$ ]]
        then
            local type="$2"
            [[ "$type" == *,* ]] &amp;&amp; type="{$type}"
            if [[ $1 == *-f* ]]
            then 
                select+=( "--include=*$type" )
            else
                select+=( "--exclude=*$type" )
            fi
            shift 2
        else
            break
        fi
    done
    set -x
    grep -r ${select[@]} "$@" .
    { set +x; } 2&gt;/dev/null
}
</code></pre>

<p>You can include long comments as here-docs piped to the null operator <code>:</code>.  </p>
    </div>