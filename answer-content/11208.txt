<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few thoughts which come to my mind, without having actually profiled your code:</p>

<ol>
<li>Try passing <code>std::string</code> as reference-to-const to avoid a copy (in case your <code>std::string</code> implementation is not Copy-On-Write).</li>
<li>Reserve space in the <code>std::string</code> by calling <code>reserve</code>.</li>
<li>Avoid calling <code>std::string::length</code> repeatedly, memorize the value.</li>
<li>Avoid indexing the string repeatedly, use an iterator instead.</li>
</ol>

<p>For what it's worth, you could try a different (more functional) way to implement this function. Some may consider this idiomatic, other will find it harder to read. Your call -maybe just for the fun of it, to see how it performs (remember to enable optimizations!):</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;locale&gt;
#include &lt;string&gt;

std::string strip( const std::string &amp;s ) {
    std::string result;
    result.reserve( s.length() );

    std::remove_copy_if( s.begin(),
                         s.end(),
                         std::back_inserter( result ),
                         std::not1( std::ptr_fun( isalpha ) ) );

    return result;
}
</code></pre>
    </div>