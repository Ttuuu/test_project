<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's pretty good! Some small points...</p>

<p><strong>Motivation</strong></p>

<p>As, some of the comments point out, standard algorithms exist for <code>std::sort</code> and <code>std::partition</code>. You seem to be doing this in order to learn about algorithm implementation. That's fine and good for learning. Please be aware that in general / commercial / production code you should probably not be writing this and should use the above standard library functions instead. </p>

<p><strong>Completeness</strong></p>

<p>As some other comments point out, please try to post complete code. ie include the <code>#include</code> statements so that the code compiles and runs as posted. </p>

<p><strong>Form / style / minor</strong> </p>

<ul>
<li>It is generally discouraged to use <code>using namespace std;</code>; which would
be required to make your code work, because that includes a whole namespace and can cause clashes. </li>
<li>Generally avoid declaring more than one variable on one line. </li>
<li>The <code>size()</code> of containers returns <code>std::size_t</code>, which is usually an
<code>unsigned long</code>. If you enable <code>-Wall -Wextra</code> (on gcc / clang)
during compilation this will often give you warnings when you are
comparing with <code>int</code>. Your code as posted as actually OK on this
front, but it is still good practice to use <code>std::size_t</code> for those
integers which represent an index into a vector or similar  (bigger
max value too, for very large vectors). I usually write a <code>using std::size_t</code> to avoid having to repeat <code>std::</code> for each variable declaration. </li>
<li>using <code>at()</code> is slower than <code>operator[]</code> because it does bounds checking. This might be what you intended, but given the "closed" nature of the algorithm it should be possible to use <code>operator[]</code> without errors or undefined behaviour.</li>
<li>You could use try using default params to <code>DutchFlag()</code> for low/high to avoid the caller having to specify <code>0, size()</code> in the external API.</li>
<li>In general C++ and the STL tend to use Iterators and not vector indeces. So it would be more idiomatic for DutchFlag to take <code>begin(), end()</code> iterators. </li>
<li>C++ (like python) also uses the "one past the end" convention for a range of iterators, so DutchFlag (as written) should probably be taking <code>0, size()</code> and some of your <code>&lt;=</code> should change to <code>&lt;</code>. </li>
</ul>

<p><strong>Algorithm</strong></p>

<p>I am not an expert on the Dutch flag algo. Clearly a plain quicksort, which you have implemented, works. Are there some efficiencies which can be gained from the knowledge that there are lots of repeats and only 3 possible values? If there are, you should probably try to achieve some of those. Otherwise this is just quicksort? See the example code on <a href="https://en.cppreference.com/w/cpp/algorithm/partition" rel="nofollow noreferrer">std::partition reference page</a>. </p>

<p>For example, one might imagine an algorithm where you just have a local <code>int counts[3]{0}</code> run through the unsorted data and <code>counts[v]++</code>. Then produce an answer which repeats each value <code>count[v]</code> number of times. This is O(N) as opposed to quicksort which is generally O(NlogN).</p>

<p>Something along these lines:</p>

<pre><code>#include &lt;array&gt;
#include &lt;iostream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

using std::size_t;

void DutchFlag(std::vector&lt;int&gt;&amp; nums) {
  auto counts = std::array&lt;size_t, 3&gt;{0};

  for (auto n: nums) ++counts[n];

  auto start = std::begin(nums);
  for (int i = 0; i &lt; 3; ++i) {
    auto end = std::next(start, counts[i]);
    std::fill(start, end, i);
    start = end;
  }
}

int main() {
  std::vector&lt;int&gt; nums = {0, 1, 2, 2, 2, 1, 0, 0};
  DutchFlag(nums);
  std::copy(nums.begin(), nums.end(), std::ostream_iterator&lt;int&gt;(std::cout, " "));
}

</code></pre>

<p>It depends on what your motivation is, but such an algorithm would likely be faster for very large inputs and the code is probably simpler (than implementing quicksort by hand). </p>
    </div>