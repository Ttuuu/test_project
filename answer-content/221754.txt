<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorry, but that someone is probably right. At the same time, thanks for being thus brave and asking on how to improve here.</p>

<p>It's not so simple to give feedback in such a scenario, since there are so many details that go "wrong". Since you tagged this for beginner, I'll focus on things that will benefit you most as well as things you can easily adapt. You might want to apply some of these to see how your code becomes more and more readable.</p>

<h3>Designing</h3>

<p>When thinking about the software (don't forget to do that before coding), write down some sentences in prose English that describe the game. Let me give an example:</p>

<blockquote>
  <p>TicTacToe is a game played by two players. They play on a square 3x3 sized board. In an alternating manner, player 1 puts an X onto a cell and player 2 puts an O onto a cell. Only one sign is allowed per cell. The game ends when the first player has 3 contiguous of his own signs in any direction (horizontal, vertical, diagonal)</p>
</blockquote>

<p>Find the subjects in these sentences. Each one is a candidate for a class. We have <code>Game</code>, <code>Player</code>, <code>Board</code>, <code>Cell</code>, <code>Sign</code>, <code>Direction</code>.</p>

<p>Next, find out what each of these could be doing (methods) and what data it needs to do that (members). <code>Game</code> might hold the rules, e.g. alternating the players and ending the game. <code>Player</code> could have the name of the player and the sign and perhaps a statistic of wins versus looses. <code>Board</code> might not do a lot, but it needs to hold the data (empty cells, full cells, size). <code>Sign</code> is just <code>X</code> or <code>O</code> - perhaps not enough to recitify a class. <code>Direction</code> could hold masks for all 8 ways to get a win.</p>

<p>It'll be a long way to go from the current code to 4 classes. This really is a hint for your next project or a complete rewrite.</p>

<h3>IDE</h3>

<p>Use a real IDE. It's clearly visible that your IDE (BlueJ) did not help you write good code.</p>

<p>A good IDE will give you hints about</p>

<ul>
<li>unused variables</li>
<li>unnecessary imports</li>
<li>typos</li>
<li>redundant initializers</li>
<li>simplification of boolean expressions</li>
<li>invalid <code>String</code> comparisons</li>
<li>unnecessary public access to methods</li>
<li>prefer primitive types</li>
<li>move assignments to declaration</li>
<li>join declaration and assignment</li>
<li>replace for loops by foreach loops</li>
</ul>

<p>I'll not go into details with any of these, because it's usually not necessary to do a review on those, because the IDE does the review for me (or you).</p>

<p>You can learn a lot from the hints of the IDE alone. And it will make review easier for us. </p>

<p>In this review, I'll tell you a bit about IntelliJ.</p>

<h3>Size of the class</h3>

<p>Your code has 450 lines. Some people would say it's ok and fits the rule of 30. Others, including me, would like to see classes <a href="https://softwareengineering.stackexchange.com/a/66598/109304">with about 200 lines</a>. Assuming that this code would split up evenly with the 4 classes mentioned in the designing chapter, that's ~ 110 lines each. That would be great!</p>

<p>Why does size matter? If a method is very long, it does probably more than one thing. If a class is too big, it likely has too many reasons for change.</p>

<p>One file (which is one class in Java) is often the smalles unit a developer needs to read in order to understand something. Reading and understanding 450 lines is a lot and I'd better not be interrupted during that time.</p>

<p>What can easily be separated here?</p>

<p>A <code>Main</code> class which only contains the <code>main()</code> method. Some call it <code>Application</code> or <code>Program</code>. You could also name it <code>TicTacToe</code>. That <code>main()</code> method will wire up all other parts, so it does <strong>integration</strong> work.</p>

<p>How would you do that? Don't do it manually. Assuming IntelliJ as the IDE, right click the main method and choose <code>Refactor / Move</code>. Then enter <code>Main</code> as the class name and ignore the fact that it's red. The class will be created when you click <code>Refactor</code>.</p>

<p>The method <code>drawBoard()</code> seems to do drawing only. You could move it to a <code>Board</code> class.</p>

<p>The method <code>capitalize()</code> is used in <code>main()</code> only. It can be moved to the <code>Main</code> class.</p>

<h3>Remove dead code</h3>

<p>Applying all the IDE suggestions will reveal dead code at this point:</p>

<pre><code>boolean toSeed = false;
    if(toSeed){
        ...
    }
</code></pre>

<p>You can get rid of 22 lines (5%) immediately.</p>

<p>How would you do that? Don't do it manually. Click on the condition. Press <code>Alt+Enter</code> to access the quick tip light bulb. Choose <code>Remove if statement</code>.</p>

<p>You'll then find that <code>updateBoard()</code> and <code>seedBoard()</code> and <code>seedAvailable()</code> are unused. Similar, use <code>Remove unused method</code>. Again 30 lines (6%) less reading.</p>

<p>Also: delete all commented code without thinking.</p>

<h3>Naming</h3>

<p>What is <code>Shortver</code>? Is that in contrast to <code>Longver</code>?</p>

<p>Do you see how class names <code>TicTacToe</code>, <code>Game</code>, <code>Player</code> and <code>Board</code> tell me so much more about what the program is about in comparison to <code>Shortver</code>?</p>

<p>Example: at what time do I figure out what the code is about? In line 440, the code mentions the term "TicTacToe" for the first time. Usually people read top to bottom, so that's very late.</p>

<p>How would you rename that? Don't do it manually. Right click the class name <code>Shortver</code>, choose <code>Refactor / Rename</code> and give it at least a slightly better name, following the <a href="http://arlobelshee.com/good-naming-is-a-process-not-a-single-step/" rel="noreferrer">6 steps of naming</a>.</p>

<h3>Too many empty lines</h3>

<p>Use empty lines for separating things. Using empty lines you can create paragraphs. Paragraphs will help the reader understand what code belongs together and where something new starts.</p>

<p>Paragraphs will help you finding methods to extract (example later).</p>

<h3>Remove nonsense comments</h3>

<p>Like </p>

<pre><code>/*
 * just some static methods to help make things easy
 */
</code></pre>

<p>Hopefully every method in your code does something useful and makes things easier.</p>

<h3>Size of methods</h3>

<p>You can reduce the size of methods by extracting smaller methods. Example:</p>

<pre><code>if(score(board) == gameTargetScore) {
    System.out.println(playerName + " you are too good for me. \n" +
            "Congratulations you won!!\n\n");
} else if(score(board) == -gameTargetScore) {
    System.out.println("IWONIWONIWONohboyIWONIWONIWON");
} else if(draw) {
    System.out.println("Good game. It's a draw!");
}
</code></pre>

<p>That would make an excellent method <code>printGameEndMessage()</code>.</p>

<p>How would you do that? Don't do it manually. Mark all of these lines, right click, choose <code>Refactor / Extract / Method</code>.</p>

<p>Another example:</p>

<pre><code>        if(humanGoes){
            ...
        }else{
            ...
        }
</code></pre>

<p>The code inside the if block would make up a method <code>humanMove()</code> and the code in the else block goes into <code>computerMove()</code>.</p>

<p>That way, you end up with a short 30 line method <code>playGame()</code>.</p>

<h3>Bugs</h3>

<p>In <code>drawBoard()</code>, you're doing string comparison with the <code>==</code> operator. IMHO this only accidentally works due to string interning. The correct way is to use <code>.equals()</code>.</p>

<p>To me that was an indicator that you might have been a <a href="/questions/tagged/beginner" class="post-tag" title="show questions tagged 'beginner'" rel="tag">beginner</a> on Java and you have probably worked with a language before that allowed string comparisons with <code>==</code>. (I asked both questions in the comments)</p>

<h3>Magic numbers</h3>

<p>When we find numbers in code that don't have a name, we call them "magic numbers", because they don't have an explanation.</p>

<p>If the number 3.14 is in your code without the name <code>pi</code>, do you know that should be <code>pi</code> or it's just 3.14000?</p>

<p>One of these methods is <code>drawBoard()</code>. All that <code>i</code> and <code>j</code> and numbers... Which one is a column, which one is a line? But then there is <code>row</code> and <code>col</code>, argh ...!</p>

<p>Rename <code>i</code> to <code>consoleRow</code>, <code>j</code> to <code>colsoleColumn</code>, <code>row</code> to <code>boardRow</code>, <code>col</code> to <code>boardColumn</code>.</p>

<p>Change 15 to 3*5. Change 27 to 3*9. This will make it more clear that we still have a 3*3 board. Change 10 to 2*5. Change 8 to 9-1. Change 17 to 2*9-1.</p>

<p>That way you have less different numbers and it's easier to guess their meaning.</p>

<h3>Conclusion</h3>

<p>After about 2 hour of working on your code, I slowly begin to understand what it does. </p>

<p>I reduced from 460 lines of code to 28 + 53 + 275 = 357 lines (in 3 classes).</p>

<p>At this point I would need a few more advanced changes, since I need to remove duplicate code. I still don't understand the 80 lines method <code>findBestMove()</code>.</p>

<p>So, that's pretty bad for a simple game like TicTacToe - but hey, I probably wrote worse code when I was your age. Nothing to worry about. Keep on learning. Keep on asking. Embrace feedback. Do pair programming.</p>
    </div>