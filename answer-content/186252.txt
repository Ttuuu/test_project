<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>try-with-resources</code></h3>

<p>Since Java 7, you can use <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer"><code>try-with-resources</code></a> for safe and efficient handling of the underlying I/O resource.</p>

<h3><code>return boolean</code></h3>

<pre><code>if (condition) {
    return true;
} else {
    return false;
}
</code></pre>

<p>This kind of code can be simplified as <code>return condition</code>.</p>

<h3>Method names</h3>

<p>Your naming can be better refined to reflect what they are doing. For example, <code>getStatus</code> can be renamed as <code>hasUniqueNumerals</code>, following the standard <code>is/has</code> prefix for methods returning a <code>boolean</code>. <code>winningLotteryTicket</code> can be renamed as <code>countWinningPairs</code>.</p>

<h3><code>for-each</code> loop</h3>

<p>Your loop on <code>c.toCharArray()</code> can also be written as:</p>

<pre><code>for (char current : c.toCharArray()) {
    charSet.add(current);
}
</code></pre>

<h3>What's nice</h3>

<ul>
<li><p>You checked if the concatenation of the two inputs will give you 10 or more digits, returning <code>false</code> first if not.</p></li>
<li><p>You declared <code>charSet</code> as a <code>Set</code> rather than a <code>HashSet</code> and relied on generic type inference.</p></li>
</ul>
    </div>