<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't follow a Lot  </p>

<p>You fail to provide the definition of person</p>

<p>Where you keep selecting random and compare with a HashSet should use a shuffle.<br>
Swap the person with the last person or remove the person.  Then next time just random range is 1 less. </p>

<p>I totally don't follow this </p>

<pre><code>int numConnections = shorterListOfPersons == maleIndividuals ? random.Next(1, femaleIndividuals.Length + 1) : random.Next(1, maleIndividuals.Length + 1);
</code></pre>

<p>Why would someone have a random number of connection.  It seems like intersection would determine the number of connection.  </p>

<p>I don't get random(5,15)  what if there are not 14 people? Your output is only 10 people. Why are you only processing 10 people?</p>

<p>It seems like you are mixing the creation of the compatibility with optimizing the matches.  That should be separate so you can try new optimization.</p>

<p>Check this out.  There is no arbitrary 10. It separates the compatibility matrix from the matching. It uses a shuffle to get the random compatible. It is still greedy but it puts you in a spot to work on the algorithm without a lot of other noise.  It assign from 1/4 to 3/4 compatible.</p>

<pre><code>public static List&lt;PersonMatch&gt; MatchMaker(HashSet&lt;string&gt; males, HashSet&lt;string&gt; females)
{
    List&lt;PersonMatch&gt; personsMatch = new List&lt;PersonMatch&gt;();
    if (males.Count == 0)
    {
        personsMatch.Add(new PersonMatch("a", gender.m));
        personsMatch.Add(new PersonMatch("b", gender.m));
        personsMatch.Add(new PersonMatch("c", gender.m));
        personsMatch.Add(new PersonMatch("d", gender.m));
        personsMatch.Add(new PersonMatch("e", gender.m));
        personsMatch.Add(new PersonMatch("f", gender.m));
        personsMatch.Add(new PersonMatch("g", gender.m));
        personsMatch.Add(new PersonMatch("h", gender.m));
        personsMatch.Add(new PersonMatch("i", gender.m));
        personsMatch.Add(new PersonMatch("j", gender.m));
        personsMatch.Add(new PersonMatch("k", gender.m));
        personsMatch.Add(new PersonMatch("l", gender.m));
        personsMatch.Add(new PersonMatch("m", gender.m));
    }
    if (females.Count == 0)
    {
        personsMatch.Add(new PersonMatch("n", gender.f));
        personsMatch.Add(new PersonMatch("o", gender.f));
        personsMatch.Add(new PersonMatch("p", gender.f));
        personsMatch.Add(new PersonMatch("q", gender.f));
        personsMatch.Add(new PersonMatch("r", gender.f));
        personsMatch.Add(new PersonMatch("s", gender.f));
        personsMatch.Add(new PersonMatch("t", gender.f));
        personsMatch.Add(new PersonMatch("u", gender.f));
        personsMatch.Add(new PersonMatch("v", gender.f));
        personsMatch.Add(new PersonMatch("w", gender.f));
        personsMatch.Add(new PersonMatch("x", gender.f));
        personsMatch.Add(new PersonMatch("y", gender.f));
        personsMatch.Add(new PersonMatch("z", gender.f));
    }
    foreach(PersonMatch m in personsMatch.Where(x  =&gt; x.Gender == gender.m))
    {
        //Debug.WriteLine(m.Name);
        foreach(PersonMatch c in GetRandomPersonMatch(personsMatch.Where(x =&gt; x.Gender == gender.f).ToList()))
        {
            //Debug.WriteLine(c.Name);
            m.CompatableWith.Add(c);
        }
        //Debug.WriteLine("");
    }
    foreach (PersonMatch f in personsMatch.Where(x =&gt; x.Gender == gender.f))
    {
        //Debug.WriteLine(f.Name);
        foreach (PersonMatch c in GetRandomPersonMatch(personsMatch.Where(x =&gt; x.Gender == gender.m).ToList()))
        {
            //Debug.WriteLine(c.Name);
            f.CompatableWith.Add(c);
        }
        //Debug.WriteLine("");
    }
    foreach (PersonMatch m in personsMatch.Where(x =&gt; x.Gender == gender.m))
    {
        foreach (PersonMatch cc in GetPersonCrossCompatable(m, personsMatch.Where(x =&gt; x.Gender == gender.f).ToList()))
        {
            m.CrossCompatable.Add(cc);
        }
    }
    foreach (PersonMatch m in personsMatch.Where(x =&gt; x.Gender == gender.f))
    {
        foreach (PersonMatch cc in GetPersonCrossCompatable(m, personsMatch.Where(x =&gt; x.Gender == gender.m).ToList()))
        {
            m.CrossCompatable.Add(cc);
        }
    }

    //now get down to business
    foreach (PersonMatch m in personsMatch.OrderBy(x =&gt; x.CrossCompatableCount).Where(x =&gt; x.CrossCompatableCount &gt; 0 &amp;&amp; !x.Matched))
    {
        if (m.CrossCompatableCount == 1)
        {
            m.Match = m.CrossCompatable[0];
            m.Match.Match = m;
        }
        else
        {
            PersonMatch mb = m.CrossCompatable.Where(x =&gt; !x.Matched).OrderBy(x =&gt; x.CrossCompatableCount).FirstOrDefault();
            if (mb != null)
            {
                m.Match = mb;
                m.Match.Match = m;
            }
        }
        //Debug.WriteLine(m.ToString());
    }
    foreach (PersonMatch m in personsMatch.OrderBy(x =&gt; x.CrossCompatableCount).ThenBy(x =&gt; x.Gender).ThenBy(x =&gt; x.Name))
    {
        Debug.WriteLine(m.ToString());
    }
    Debug.WriteLine("Done");
    return personsMatch;
}
public enum gender { m, f };
public class PersonMatch
{          
    public string Name { get; }
    public List&lt;PersonMatch&gt; CompatableWith { get; }  = new List&lt;PersonMatch&gt;();
    public String CompatableWithString { get { return string.Join(", ", CompatableWith.Select(x =&gt; x.Name)); } }
    public List&lt;PersonMatch&gt; CrossCompatable { get; } = new List&lt;PersonMatch&gt;();
    public String CrossCompatableString { get { return string.Join(", ", CrossCompatable.Select(x =&gt; x.Name)); } }
    public int CrossCompatableCount { get { return CrossCompatable.Count(); } }
    public PersonMatch Match { get; set; }
    public bool Matched { get { return Match != null; } }
    public gender Gender { get; }
    public PersonMatch (string name, gender g)
    {
        Name = name;
        Gender = g;
    }
    public override string ToString()
    {
        return ($"Name {Name}  Gender {Gender} CrossCompatableCount {CrossCompatableCount}  Match {(Match == null ? "" : Match.Name)}  \n CompatableWith  {CompatableWithString} \n CrossCompatable {CrossCompatableString}");
    }
    public override int GetHashCode()
    {
        return (Name + Gender.ToString()).GetHashCode();
    }
    public override bool Equals(object obj)
    {
        if(obj== null)
        {
            return false;
        }
        PersonMatch other = obj as PersonMatch;
        if(other == null)
        {
            return false;
        }
        return (Name == other.Name &amp;&amp; Gender == other.Gender);
    }
}
private static Random rand = new Random();
public static IEnumerable&lt;PersonMatch&gt; GetPersonCrossCompatable(PersonMatch p, List&lt;PersonMatch&gt; pool)
{
    //Debug.WriteLine($"GetPersonCrossCompatable {p.Name}");
    foreach (PersonMatch cm in pool)
    {
        //Debug.WriteLine($"pool {cm.Name}");
        if(cm.CompatableWith.Contains(p) &amp;&amp; p.CompatableWith.Contains(cm))
        {
            //Debug.WriteLine($"cross match");
            yield return cm;
        }
    }
}
public static IEnumerable&lt;PersonMatch&gt; GetRandomPersonMatch(List&lt;PersonMatch&gt; pool)
{
    int wantCount = rand.Next(pool.Count / 4, pool.Count * 3 / 4);
    //Debug.WriteLine(wantCount);
    for(int i = pool.Count - 1; i &gt; pool.Count - wantCount - 1; i--)
    {
        int next = rand.Next(i + 1);
        yield return pool[next];
        if(next != i)
        {
            PersonMatch temp = pool[i];
            pool[i] = pool[next];
            pool[next] = temp; 
        }
    }
}
</code></pre>
    </div>