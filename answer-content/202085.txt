<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<p>I see originally the code utilized <code>document.querySelector("form");</code> to get the form element, but has since been changed to utilize <code>document.forms[0]</code>. I had planned to mention that using that property can be quicker (since a function doesn't need to be called) but now I don't have to. </p>

<h2>Suggestions</h2>

<h3>Spread operator</h3>

<p>Because <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> is utilized, the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">spread syntax</a> can be used to add the HTML elements. For example, instead of using <code>Array.from()</code>: </p>

<blockquote>
<pre><code>const cakes = Array.from(calculator.elements["cake"]).slice(0, 3)
</code></pre>
</blockquote>

<p>Create an array and use the spread operator to put the elements into an array:</p>

<pre><code>const cakes = [...calculator.elements["cake"]].slice(0, 3);
</code></pre>

<p>The same is also true for <code>occasions</code> and <code>fieldsets</code>.</p>

<h3>Arrow functions</h3>

<p>Another <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> feature that can be used to simplify things is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">arrow functions</a>, which is actually used in the click handler for the occasion options. For example, the function <code>isChecked</code>:</p>

<blockquote>
<pre><code>function isChecked(checkbox) {
  return checkbox.checked
}
</code></pre>
</blockquote>

<p>Can be simplified to an arrow function:</p>

<pre><code>const isChecked = checkbox =&gt; checkbox.checked;
</code></pre>

<p>This could actually be done to all functions if so desired, but beware that <a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting" rel="nofollow noreferrer">hoisting</a> won't apply to arrow functions declared as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#Constructor_vs._declaration_vs._expression#The_function_expression_(function_expression)" rel="nofollow noreferrer">a function expression</a>.</p>

<h3>Wait for DOM to be ready</h3>

<p>I thought I mentioned this <a href="https://codereview.stackexchange.com/a/201688/120114">in my answer to your previous post</a> but realize now that I hadn't (so I had to update my answer): it is best to wait for the DOM to be ready before performing DOM queries. One way to do this is to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>document.addEventListener</code></a> to add a callback function for the <a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded" rel="nofollow noreferrer"><code>DOMContentLoaded</code></a> event:</p>

<pre><code>document.addEventListener("DOMContentLoaded", function(event) {
    //code to execute now that the DOM is ready
});
</code></pre>

<h3>Cache DOM References</h3>

<p>As I mentioned <a href="https://codereview.stackexchange.com/a/201688/120114">in my answer to your previous post</a>, DOM references can be stored in variables once to avoid repeated lookups. In the code here, <code>cakes</code> and <code>raphael</code> are declared within the <code>cakes</code> function, so every time that function runs it queries the DOM for those elements. </p>

<h3>Function names</h3>

<p>The function <code>cake</code> might be better named something like <code>getCakeCount</code> or <code>getCakeMultiplier</code>, since it is returning a number.</p>

<h3>Variable names</h3>

<p>The <code>forEach</code> iterator at the end has a <code>currentValue</code> argument named <code>resetWhenAllUnchecked</code> :</p>

<blockquote>
<pre><code>cakeOptions.forEach(function(resetWhenAllUnchecked) {
</code></pre>
</blockquote>

<p><code>resetWhenAllUnchecked</code> sounds like a boolean value. A more appropriate name would be <code>cakeOption</code>.</p>

<h3>Early returns from functions</h3>

<p>The function <code>occasion</code> could be simplified from:</p>

<blockquote>
<pre><code>function occasion() {
  let occasionCost = 0
  const occasion = calculator.elements.occasion

  for (let i = 0; i &lt; occasion.length; i++) {
      if (occasion[i].checked) {
        occasionCost = occasionOptions[occasion[i].id]
        break
      }
    }
  return occasionCost
}
</code></pre>
</blockquote>

<p>Instead of creating <code>occasionCost</code>, updating it if an option is checked and then returning that value, one could return as soon as a found item is checked. That way there is no need to <code>break</code> out of the <code>for</code> loop nor update the return value. Some may argue that it is better to have a single return statement at the end of the function but that is a preference/convention that must be agreed upon.</p>

<pre><code>function occasion() {
  const occasion = calculator.elements.occasion

  for (let i = 0; i &lt; occasion.length; i++) {
    if (occasion[i].checked) {
      return occasionOptions[occasion[i].id];
    }
  }
  return 0;
}
</code></pre>

<h2>Rewrite</h2>

<p>See code below using advice from suggestions above. I feel there are still some simplifications that could be done to the functions toward the end - perhaps that can be an exercise to the reader to do.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>document.addEventListener('DOMContentLoaded', _ =&gt; {
  //DOM references
  const calculator = document.forms[0]
  const total = calculator.elements.total
  const firstThreeCakeOptions = [...calculator.elements["cake"]].slice(0, 3)
  const raphael = calculator.elements.raphael
  const cakeOptions = document.querySelectorAll(
    "fieldset:first-of-type input[type=checkbox]"
  )
  const occasions = [...calculator.elements.occasion]
  const fieldset = [...document.getElementsByTagName("fieldset")]

  const occasionOptions = {
    party: 20,
    birthday: 25,
    anniversary: 50,
    wedding: 100
  }

  const sizeOptions = {
    six: 1,
    eight: 1.5,
    ten: 2,
    twelve: 2.5
  }

  const extrasOptions = {
    inscription: 10,
    decoration: 25,
    special: 50
  }

  calculator.addEventListener("click", calculateTotal)

  function cake() {
    const isChecked = checkbox =&gt; checkbox.checked;

    let count = firstThreeCakeOptions.filter(isChecked).length
    if (count) {
      count = count * 0.5 + 0.5
    }
    if (raphael.checked) {
      count += 1
    }
    return count
  }

  function occasion() {
    const occasion = calculator.elements.occasion

    for (let i = 0; i &lt; occasion.length; i++) {
      if (occasion[i].checked) {
        return occasionOptions[occasion[i].id]
      }
    }
    return 0
  }

  function size() {
    const size = calculator.elements.size

    for (let i = 0; i &lt; size.length; i++) {
      if (size[i].checked) {
        return sizeOptions[size[i].id]
      }
    }
    return 1
  }

  function extras() {
    let extrasCost = 0
    const extras = calculator.elements.extras

    for (let i = 0; i &lt; extras.length; i++) {
      if (extras[i].checked) {
        extrasCost = extrasCost + extrasOptions[extras[i].id]
      }
    }
    return extrasCost
  }

  function calculateTotal() {
    const totalCost = cake() * occasion() * size() + extras()
    total.value = "$" + totalCost.toLocaleString("en")
  }

  // Display "extras" fieldset when "wedding" occasion is selected


  fieldset[3].style.display = "none"

  occasions.forEach(occasion =&gt; {
    occasion.addEventListener("click", () =&gt; {
      if (occasion.id == "wedding") {
        fieldset[3].style.setProperty("display", "inherit")
      } else {
        fieldset[3].style.setProperty("display", "none")
      }
    })
  })

  // Display cost after size has been selected

  const sizes = calculator.elements.size

  total.style.display = "none"

  for (let i = 0; i &lt; sizes.length; i++) {
    sizes[i].onclick = function() {
      if (this.checked) {
        total.style.setProperty("display", "inherit")
      } else {
        total.style.setProperty("display", "none")
      }
    }
  }

  // Disable all fieldsets except the first one

  const disabledFieldsets = document.querySelectorAll(
    "fieldset:not(:first-of-type)"
  )
  for (let i = 0; i &lt; disabledFieldsets.length; i++) {
    disabledFieldsets[i].disabled = true
  }

  // Enable fieldsets sequentially on selection

  document.querySelectorAll("fieldset").forEach(fieldset =&gt; {
    fieldset.addEventListener("change", function() {
      let nextFieldset = this.nextElementSibling

      while (nextFieldset &amp;&amp; !nextFieldset.disabled) {
        nextFieldset = nextFieldset.nextElementSibling
      }

      if (nextFieldset) {
        nextFieldset.disabled = false
      }
    })
  })

  // Reset form after all inputs in the first fieldset are deselected


  let isChecked = false

  cakeOptions.forEach(function(resetWhenAllUnchecked) {
    resetWhenAllUnchecked.addEventListener("click", function(e) {
      if (this.checked) {
        isChecked = true
      } else {
        if (
          isChecked &amp;&amp;
          !document.querySelectorAll(
            "fieldset:first-of-type input[type=checkbox]:checked"
          ).length
        ) {
          calculator.reset()
          fieldset[3].style.setProperty("display", "none")
          total.style.setProperty("display", "none")
        }
      }
    })
  })
});</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form&gt;
  &lt;fieldset&gt;
    &lt;legend&gt;Select Cakes&lt;/legend&gt;
    &lt;label&gt;&lt;input type="checkbox" name="cake" id="leonardo"&gt;Leonardo&lt;/label&gt;
    &lt;label&gt;&lt;input type="checkbox" name="cake" id="donatello"&gt;Donatello&lt;/label&gt;
    &lt;label&gt;&lt;input type="checkbox" name="cake" id="michelangelo"&gt;Michelangelo&lt;/label&gt;
    &lt;label&gt;&lt;input type="checkbox" name="cake" id="raphael"&gt;Raphael&lt;/label&gt;
    &lt;p&gt;If you select more than one cake, the other cakes are discounted 50%.&lt;/p&gt;
    &lt;p&gt;&lt;small&gt;Does not apply to Raphael.&lt;/small&gt;&lt;/p&gt;
  &lt;/fieldset&gt;

  &lt;fieldset&gt;
    &lt;legend&gt;Choose Occasion&lt;/legend&gt;
    &lt;label&gt;&lt;input type="radio" name="occasion" id="party" required&gt;Party&lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="occasion" id="birthday"&gt;Birthday&lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="occasion" id="anniversary"&gt;Anniversary&lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="occasion" id="wedding"&gt;Wedding&lt;/label&gt;
  &lt;/fieldset&gt;

  &lt;fieldset&gt;
    &lt;legend&gt;Choose Size&lt;/legend&gt;
    &lt;label&gt;&lt;input type="radio" name="size" id="six" required&gt;6-inch&lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="size" id="eight"&gt;8-inch&lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="size" id="ten"&gt;10-inch&lt;/label&gt;
    &lt;label&gt;&lt;input type="radio" name="size" id="twelve"&gt;12-inch&lt;/label&gt;
  &lt;/fieldset&gt;

  &lt;fieldset&gt;
    &lt;legend&gt;Select Extras&lt;/legend&gt;
    &lt;label&gt;&lt;input type="checkbox" name="extras" id="inscription"&gt;Inscription&lt;/label&gt;
    &lt;label&gt;&lt;input type="checkbox" name="extras" id="decoration"&gt;Decoration&lt;/label&gt;
    &lt;label&gt;&lt;input type="checkbox" name="extras" id="special"&gt;Special Frosting &amp; Icing&lt;/label&gt;
  &lt;/fieldset&gt;

  &lt;input type="text" name="total" readonly&gt;
  &lt;input type="submit" value="Submit"&gt;
&lt;/form&gt;</code></pre>
</div>
</div>

    </div>