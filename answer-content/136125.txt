<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As motivated by @Vogel612 I post my suggestion as an answer. An answer should probably contain a bit more than just a link to the <a href="http://www.tutorialspoint.com/design_pattern/strategy_pattern.htm" rel="nofollow noreferrer">strategy pattern</a> therefore I'll adept the pattern to your presented code.</p>

<p>Instead of keeping the logic in the <code>Filter</code> class, this class is refactored to an interface which provides a simple <code>apply()</code> method.</p>

<pre><code>public interface Filter {
    Conversation apply(Conversation conversation, String argumentValue);
}
</code></pre>

<p>If you need certain base logic you could also use an abstract base class instead of an interface of course.</p>

<p>A concrete implementation of a filter could now look like this:</p>

<pre><code>public class UserFilter implements Filter {
    @Override
    public Conversation apply(Conversation conversation, String specificUser) {
        List&lt;Message&gt; messageList = new ArrayList&lt;&gt;();
        //Filter by used id
        for (Message message : conversation.messages) {
            if (message.senderId.equals(specificUser)) {
                messageList.add(message);
                Conversation filteredConversation = 
                    new Conversation(conversation.name, messageList);
                conversation = filteredConversation;
            }
        }
        return conversation;
    }
}
</code></pre>

<p>This allows you to refactor the <code>filter</code> method to something like this:</p>

<pre><code>private void filter(Filter filter, Conversation conversation, String outputFilePath) throws Exception {
    if (filter != null) {
        String argumentValue = filter.argumentValue;
        conv = filter.apply(conversation, argumentValue);
    }
    this.writeConversation(conversation, outputFilePath);
}
</code></pre>

<p>This also makes the <code>filterType</code> property redundant which thus can be removed. However, instead of keeping a single <code>Filter</code> class around, you need to create a concrete instance of a filter and pass it around. As you did not include the code where you set the <code>filterType</code>, I can't give more code on where the concrete object should be instantiated.</p>

<p>One advantage of the strategy pattern is, that it separates the implementation details into its own class and therefore allows switching strategies easily during runtime if needed. This also fosters the idea of one responsibility per class only. </p>
    </div>