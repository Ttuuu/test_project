<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to be brutally honest, because I think it will do the most good for you as you look for a job. You say you "have the right frame of mind" and "just need someone to 'nudge' [you] in the right direction." You're way ahead of most of the pack, as you are capable of something much harder than FizzBuzz. However, this code needs a lot of work and a lot of reorganization. It's going to take time to learn the culture of C#, and it's going to take time to learn OO principles in an effective way. If I were you, I'd start writing a lot of OO code in C# in my free time and posting it to codereview. </p>

<p>This is C#. You don't need to call <code>.Equals</code> on strings. Instead, do:</p>

<pre><code>if (men1 == "0")
</code></pre>

<p>You don't need <code>? true : false</code> or the extra parentheses. Instead, do:</p>

<pre><code>is_other = men1.Equals("2");
</code></pre>

<p>As everyone else said, you're not following C# naming conventions:</p>

<ul>
<li>For local variables, the first word is lower cased, and every word after that has its first letter capitalized. Underscores are not used. (e.g. <code>isImport</code>)</li>
<li>Method names, class names, and property names all differ from locals by starting with a capital letter.</li>
</ul>

<p><code>TotalTax</code> shouldn't be a property on the program. Nothing is going to be accessing the <code>Program</code> file, so if it's going to be in there, it may as well just be an instance variable:</p>

<pre><code>private decimal _TotalTax;
</code></pre>

<p>If you need to add to it....</p>

<pre><code>_TotalTax += ...;
</code></pre>

<p>In <code>if (item.count &gt; 1)</code>, you do a lot of the same as in the else. Also, <code>Console.WriteLine</code> has an overload for a format string. Use that one instead of concatenating a bunch of strings and variables together. Also, it's hard to read when it's all on one line: </p>

<pre><code>Console.Write("{0}: {1:0.00}",
    item.prod_name,
    CalcTax(item.sum, item.is_other, item.is_import));

if (item.count &gt; 1)
    Console.Write(" ({0} @ {1})", item.count, item.prod_price);

Console.WriteLine();
</code></pre>

<p><code>CalcTax</code> returns the price plus the tax. If it's going to do that, I would name it <code>AddTax</code>. There's also a lot of repetition in the method. Find out the part that's not repetitive, and do that first:</p>

<pre><code>public decimal AddTax(decimal price, bool is_other, bool is_import)
{
    int percentage = 0;
    if (is_other) percentage += 10;
    if (is_import) percentage += 5;

    var tax = price * percentage / 100;
    Total_Tax = tax; //have to because of the value + in the property

    return price + tax;
}
</code></pre>

<p>I removed <code>customRound</code> because I don't think it's necessary. </p>

<p>I would also check for malformed input, as <code>Convert.ToDecimal</code> can fail with an error, and <code>men1</code> can be something other than <code>0</code>, <code>1</code>, and <code>2</code>. Before I got into the industry, I had flaky UIs that worked <em>if you used it how I, the programmer, intended</em>. There were quite a few ways to misuse it and break the program. One of the first things I learned on the job was that that was not going to fly. </p>

<p>Ewan's answer is great for the OO principles, so I'll neglect to cover that. </p>
    </div>