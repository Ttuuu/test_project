<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although it's a short function/macro, there are a number of problems here:</p>
<ul>
<li><p><code>__FILE__</code> and <code>__LINE__</code> are expanded in the function definition, rather than at the call site.  We need an interface that passes those in, so that the macro is</p>
<pre><code>  #define debug(args...) if (DEBUG) _debug(__FILE__, __LINE__, args);
</code></pre>
</li>
<li><p>That's a non-standard variadic macro expansion.  The standard way is to write the parameter as <code>...</code> and expand it using <code>__VA_ARGS__</code>.</p>
</li>
<li><p>Identifiers in global scope beginning with underscore are reserved for the implementation.  Use a namespace instead (e.g. <code>debugging::debug</code>).</p>
</li>
<li><p>Debug information should go to <code>std::clog</code>, not <code>std::cout</code>.</p>
</li>
<li><p>The macro doesn't play nicely in <code>if</code>/<code>else</code> statements - use the <code>do</code>...<code>while(0)</code> idiom to make it statement-like.</p>
</li>
<li><p>Conventional style is to use all-caps for macros (to indicate their dangers) and nothing else.  We have this exactly backwards here, with <code>debug</code> and <code>DEBUG</code>.</p>
</li>
</ul>
<hr>
<h1>Improved version</h1>
<pre><code>#include &lt;iostream&gt;

namespace debugging
{
#ifdef ENABLE_DEBUG
    constexpr bool debug = true;
#else
    constexpr bool debug = false;
#endif

    template &lt;typename... Args&gt;
    void print(const char* file, int line, Args... args) {
        (std::clog &lt;&lt; "[" &lt;&lt; file &lt;&lt; ":" &lt;&lt; line &lt;&lt; "] "
                  &lt;&lt; ... &lt;&lt; args) &lt;&lt; std::endl;
    }
}

#define DEBUG(...)                                              \
    do {                                                        \
        if (debugging::debug)                                   \
            debugging::print(__FILE__, __LINE__, __VA_ARGS__);  \
    } while (0)
</code></pre>
<p>And a quick test (that demonstrates that the arguments are evaluated only when we're debugging):</p>
<pre><code>int main()
{
    DEBUG("Started main");
    int status = 1;
    DEBUG("Leaving main, status=", status=0);
    return status;
}
</code></pre>
<hr>
<h1>Addendum</h1>
<p>We don't need the <code>debug</code> constant - just change the definition of the macro according to whether or not we're debugging:</p>
<pre><code>#ifndef ENABLE_DEBUG
#define DEBUG(...)  ((void)0)
#else
#include &lt;iostream&gt;

namespace debugging
{
    template&lt;typename... Args&gt;
    void print(const char* file, int line, Args... args) {
        (std::clog &lt;&lt; "[" &lt;&lt; file &lt;&lt; ":" &lt;&lt; line &lt;&lt; "] "
                  &lt;&lt; ... &lt;&lt; args) &lt;&lt; std::endl;
    }
}

#define DEBUG(...)  debugging::print(__FILE__, __LINE__, __VA_ARGS__)
#endif
</code></pre>
    </div>