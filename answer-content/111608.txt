<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Potential improvements:</p>

<ul>
<li><p>Increase clarity, this will need to use more than one line. And so <em>you</em> may dislike it.</p></li>
<li><blockquote>
  <p>Let us assume</p>
</blockquote>

<p>Always reminds me of quote/saying "assume -- makes an <em>ass</em> out of <em>u</em> and <em>me</em>".<br>
So I would say not to assume. (There is a easy fix anyway.)</p></li>
</ul>

<hr>

<p>Since this is tagged <a href="/questions/tagged/performance" class="post-tag" title="show questions tagged 'performance'" rel="tag">performance</a>, and we're already assuming.
We should decide what is the fastest way to do the if statement.</p>

<p>If we look at the check, you can input <code>...AM</code> or <code>...PM</code>.
Since the last letter is always the same, there is no point in checking it is there?<br>
But not only that not checking is <em>faster</em> by a factor of 10.</p>

<pre><code>&gt;&gt;&gt; timeit.timeit('"abcde"[:-2]')
0.2815848802857645
&gt;&gt;&gt; timeit.timeit('"abcde"[-2]')
0.028008557233969
</code></pre>

<p>And so, if you use that it should be the fastest you can get it. (Unless <a href="https://docs.python.org/2/library/datetime.html" rel="nofollow"><code>datetime</code></a> is faster.)</p>

<pre><code>return time[:8] if time[-2] == "A" else str(int(time[:2]) + 12) + time[2:8]
</code></pre>

<hr>

<p>Design improvements</p>

<p>Lets say you just scraped a dodgy web page and got <code>'  10:47:00   PM   '</code> as the time.
We would want your function to work. But <em>it won't</em>. </p>

<p>There is an easy way to fix this however! Just use <code>str.strip()</code>.</p>

<pre><code>&gt;&gt;&gt; '  10:47:00   PM   '.strip()
'10:47:00   PM'
</code></pre>

<p>Now you have the beginning time, and the latter AM/PM in the correct places.</p>

<p>Now you want to return without the space. But I want to be able to put <code>1:30PM</code> in the function, and it to work.<br>
To do this you should use <code>str.find(':')</code> and <code>str.rstrip()</code>:</p>

<pre><code>&gt;&gt;&gt; '  10:47:00   PM   '.find(':')
4
&gt;&gt;&gt; '  10:47:00   PM   '.rstrip()
'  10:47:00   PM'
</code></pre>

<p>However using two <code>str.strip</code>s seems counter intuitive. So if you assume that it won't have any of <code>'\t\n\f'</code>s in it,
then you can use <code>str.replace</code>.</p>

<pre><code>&gt;&gt;&gt; '  10:47:00   PM   '.replace(' ', '')
'10:47:00PM'
</code></pre>

<p>And now let's say I'm being really lazy today, I don't want to press shift, and only put in <code>1:30am</code>.
I would still expect it to work.<br>
And again there is another simple fix.</p>

<pre><code>&gt;&gt;&gt; 'AM'.lower()
'am'
</code></pre>

<p>However we still haven't validated if the user actually entered AM or PM, and it's bad to assume they put in PM. Instead I would raise an error.<br>
Just something simple will do:</p>

<pre><code>raise ValueError("Didn't finish with AM or PM.")
</code></pre>

<p>I'd say it's good now that it works with <code>' 1:30:20.45 am '</code>, but what if I just can't count today... and I just want to know what the hour is. I input <code>1pm</code>, and I get some weird error. Not good.<br>
This is as the program can't find a <code>:</code> and so returns <code>-1</code>. And so you should change to something more sensible.</p>

<pre><code>index = time.find(':')
if index == -1:
    # Pick one depending on implementation
    index = -2
    index = None
</code></pre>

<p>And so, if you tie it all together.</p>

<pre><code>def convert_to_24(time):
    """Converts 12 hours time format to 24 hours
    """
    time = time.replace(' ', '')
    time, half_day = time[:-2], time[-2:].lower()
    if half_day == 'am':
        return time
    elif half_day == 'pm':
        split = time.find(':')
        if split == -1:
            split = None
        return str(int(time[:split]) + 12) + time[split:]
    else:
        raise ValueError("Didn't finish with AM or PM.")
</code></pre>

<hr>

<p>In short, assumptions are bad. Unless the assumption is the end user is going to put something unexpected in.</p>

<p>(Also this still errors if you put <code>'abc:de:fAM'</code>.)</p>
    </div>