<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public int intModifiter;          //int modifiter for every effect type that require it
public float floatModifiter;        //float modifiter for every effect type that require it
</code></pre>
</blockquote>

<p>You write in the comment <em>modifiter for every effect type</em> so why not give the variable such a name: <code>effectTypeModifier</code>?</p>

<p>I nowhere see the <code>floatModifiter</code> being used. This could be removed.</p>

<hr>

<blockquote>
<pre><code>public bool enable;           //enable or disable another event?
public bool isEnabled = true; //defines event activity
</code></pre>
</blockquote>

<p><code>enable</code> and <code>isEnabled</code> are too similar. You need a better name at least for one of them besides <code>enable</code> sound like an action so maybe <code>canEnableNextEvent</code>?</p>

<hr>

<blockquote>
<pre><code>public bool positiveResult;   //defines that condition was satisfied or not.
</code></pre>
</blockquote>

<p>How about <code>success(ful)</code>?</p>

<hr>

<blockquote>
<pre><code>public bool finished;         //is event finished?
public bool isPlaying;        //is event playing?
</code></pre>
</blockquote>

<p>The code could use some more consistency. Make them both have the <code>is</code> prefix or none of them.</p>

<hr>

<blockquote>
<pre><code>public bool condExpanded;
public int condArrLength;
public bool effExpanded;
public int effArrLength;
..
</code></pre>
</blockquote>

<p>You shouldn't use abbreviated names if they are not some common abbreviations like Html or Xml.</p>

<hr>

<blockquote>
<pre><code>public interface IEventConditionable
{
  void Play();
}
</code></pre>
</blockquote>

<p>This interface is named <code>Conditionable</code> but it contains a <code>Play</code> method. There is nothing about any conditions. The name <code>IPlayable</code> would be much better I think.</p>

<hr>

<blockquote>
<pre><code>public void PlayEvent(EventManager em)
{
  IEventConditionable tmp = null;
  switch (effect)
  {
      case Effect.GiveExperiencePoints: tmp = new ExperienceEvent(intModifiter); break;
      case Effect.GiveItemToPlayer: tmp = new ItemEvent(effectItemsIndexes, true); break;
      case Effect.RemoveItemFromPlayerEquipment: tmp = new ItemEvent(effectItemsIndexes, false); break;
      case Effect.GiveQuest: tmp = new QuestEvent(QuestEventType.GiveQuest, intModifiter); break;
      case Effect.RemoveQuest: tmp = new QuestEvent(QuestEventType.RemoveQuest, intModifiter); break;
      case Effect.IncrementActualStatusOfQuest: tmp = new QuestEvent(QuestEventType.IncrementQuestStatus, intModifiter); break;
      case Effect.EnableOrDisableAnotherEvent: tmp = new AnotherEventsRelationsEvent(intModifiter, enable, em); break;
      default: Debug.Log("Event cannot be recognized."); break;
  }

  if (tmp != null)
      tmp.Play();
}
</code></pre>
</blockquote>

<p>This method doesn't require the <code>tmp</code> variable. You don't store the result anywhere so you could simply call <code>Play</code> inside the <code>switch</code> just after you create an event:</p>

<pre><code>switch (effect)
{
    case Effect.GiveExperiencePoints: new ExperienceEvent(intModifiter).Play(); break;
    ..
}
</code></pre>

<hr>

<blockquote>
<pre><code>private bool lastRes;
</code></pre>
</blockquote>

<p>And again an abbrevaited name. Does <code>Res</code> stand for result, resolution, rest or restaurant? You won't know this in a few days/weeks anymore.</p>

<hr>

<blockquote>
<pre><code>bool playerIsColliding = Physics.OverlapBox(
    transform.position,
    transform.localScale * 0.5f,
    transform.rotation
)
.Where(item =&gt; item.gameObject.layer == LayerMask.NameToLayer("Player"))
.ToArray()
.Length &gt; 0;
</code></pre>
</blockquote>

<p>You can call simply <code>Count</code> on this.</p>

<pre><code>bool playerIsColliding = Physics.OverlapBox(
    ..
)
.Where(item =&gt; item.gameObject.layer == LayerMask.NameToLayer("Player"))
.Count() &gt; 0;
</code></pre>
    </div>