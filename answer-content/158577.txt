<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to give an alternative approach to <a href="https://codereview.stackexchange.com/a/158551/23902">tchbot's answer</a></p>

<p>There are places where SOLID prinicpals are required. </p>

<p>I don't see this as one of them. Here, we have a simple "Are you capable of writing a loop" question - about the same level as <a href="http://wiki.c2.com/?FizzBuzzTest" rel="noreferrer">the Fizz Buzz test</a>.</p>

<p>Really, the function is described in one line, and when applying mathematical formulas, I think it's OK to write terse code.</p>

<pre><code>using namespace System;

public class Program
{
    public static void Main()
    {
        double t = 0.0;
        for(int i = 1, m = 1, c=0; c &lt; 1000000; i+=2,m*=-1,++c) {
            t += (1.0/i)*m; 
        }
        Console.WriteLine("pi={0}", 4*t);
    }
}
</code></pre>

<p></p><hr>
Note one principal I'm applying here: The length of a variable name should be proportional to its scope. ( <a href="https://twitter.com/unclebobmartin/status/39333982050975744?lang=en" rel="noreferrer">Bob C. Martin</a>. )  

<p>I could name the variable <code>m</code> something descriptive like <code>togglingNegativeMultiplier</code>, but as it's entire lifetime is over two lines of code a reader would be able to see what it is doing.
</p><hr>
Incidentally, I wrote a performance test to compare the performance of the Linq solution against the performance of a simple loop. <a href="https://dotnetfiddle.net/M3e649" rel="noreferrer">https://dotnetfiddle.net/M3e649</a>

<p>When calculating a million iterations:</p>

<ul>
<li>Time using Linq: 89 milliseconds</li>
<li>Time using Loop: 10 milliseconds</li>
</ul>

<p>Granted, there are situations where a nine-fold difference in performance matters, and some where it doesn't. But here we're writing number-crunching code, and in these areas performance tends to be important.</p>
    </div>