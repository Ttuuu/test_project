<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you have is very good and it certainly functions as expected. I have just a few ideas to consider implementing (more in relation to the game than the code):</p>

<ul>
<li>Print the number ranges for each difficulty at the start, so that the user knows what range to guess in.</li>
<li>Check if the guess is outside the range.</li>
<li>Count the number of guesses and report back to the user at the end.</li>
<li>Edit the prompts slightly so user knows when input is expected.</li>
</ul>

<p>I have shown my code below, implementing these features. I reduced it to a single function (to avoid having to use global variables). I have used a dictionary to store the top end of the range of each difficulty (<code>difficulty_ranges</code>) so this can be checked easily later, using fewer <code>if else</code> checks.</p>

<p>I also corrected a few <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> style warnings (spacing, use snake case instead of camel case for function name etc).</p>

<pre><code>import random


def number_guess_game():
    # Set up main variables
    guesses = 0
    difficulty_ranges = {'e': 20, 'm': 50, 'h': 100}

    while True:
        difficulty = input(
            "Type E, M or H for easy (0-20), medium (0-50), or hard (0-100) number range:\n").lower()
        try:
            number = random.randint(0, difficulty_ranges[difficulty])
            break  # Need to break the while loop here
        except KeyError:
            print("Incorrect input! Choose again...")  # Encourage user input

    while True:
        try:
            guess = int(input("Your guess: "))
            guesses += 1
            if number == guess:
                print("Correct guess! You used {} guesses.".format(guesses))
                return number_guess_game() if input(
                    "Play again? Press Y to play again or any key to exit.").lower() == 'y' else 0
            elif guess &lt; 0 or guess &gt; difficulty_ranges[difficulty]:
                print("Your guess was out of range!")
            else:
                print("Too High. Guess again..." if number &lt; guess else "Too Low. Guess again...")
        except ValueError:
            print("Must be an integer value.\n")


def main():
    number_guess_game()


if __name__ == '__main__':
    main()
</code></pre>

<p>I should add that I am not a Python expert, so other users will likely provide more useful information on the code. I think your layout is good and the logic is easy to follow. I wanted to suggest a few of these extra features as it is a game and these may improve the experience. </p>
    </div>