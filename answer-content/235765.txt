<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Alright so I am going to give myself and <a href="https://twitter.com/XorDev" rel="nofollow noreferrer">@XorDev on Twitter</a> kudos on this one. We worked together to optimize and simplify the process of ray-tracing the lights and removed a bunch of redundant code. Here are the final versions:</p>

<pre><code>///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Shd_RayTracer (Final)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D in_WorldMap;
uniform vec3 in_Light;
uniform vec2 in_World;
uniform float in_RayTexSize;
varying vec2 in_Coord;
const float MAXRADIUS = 65535., TAU = 6.2831853071795864769252867665590;

void main() {
    vec2 Coord = floor(in_Coord * in_RayTexSize),
        xyRay = vec2((Coord.y * in_RayTexSize) + Coord.x, TAU * in_Light.z);
    float Theta = TAU * (xyRay.x / xyRay.y);
    vec2 Delta = vec2(cos(Theta), -sin(Theta));

    float Validated = step(xyRay.x,xyRay.y);
    for(float d = 0.; d &lt; MAXRADIUS * Validated; d++) {
        if (in_Light.z &lt; d + in_Light.z * texture2D(in_WorldMap, (in_Light.xy + xyRay) * in_World).a) break;
        xyRay = floor(Delta * d + 0.5);
    }

    float rayLength = length(xyRay) / in_Light.z;
    gl_FragColor = vec4(vec2(floor(rayLength * 255.0) / 255.0, fract(rayLength * 255.0)), 0.0, 1.0);
}
</code></pre>

<pre><code>///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Shd_LightSampler (Final)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D in_WorldMap, in_LightMap;
uniform vec3 in_Light, in_Color;
uniform vec2 in_World, in_LightCenter, in_TexCenter;
uniform float in_RayTexSize, in_LightTexSize;
varying vec2 in_Coord;
const float TAU = 6.2831853071795864769252867665590;

void main() {
    vec2 Coord = in_Coord * in_LightTexSize,
        Delta = Coord - in_TexCenter;
    float RayCount = TAU * in_Light.z,
        RayIndex = floor((RayCount * fract(atan(-Delta.y, Delta.x)/TAU)) + 0.5);
    vec2 RayPos = vec2(mod(RayIndex, in_RayTexSize), RayIndex / in_RayTexSize) * (1./in_RayTexSize),
        TexRay = texture2D(in_LightMap, RayPos).rg;
    float Distance = distance(Coord, in_TexCenter),
        RayLength = clamp(TexRay.r + (TexRay.g / 255.0), 0.0, 1.0) * in_Light.z,
        RayVisible = sign(RayLength - Distance) * (1. - texture2D(in_WorldMap, (in_Light.xy + Delta) * in_World).a),
        ToneMap = 1. - (Distance/in_Light.z);
    gl_FragColor = vec4(in_Color * ToneMap, RayVisible);
}
</code></pre>

<p><strong>SHADER: Shd_RayTracer</strong></p>

<p>The first major hurdle was just eliminating IF-Statements. I didn't actually know that if-statements and the code they encapsulate still continue to run despite the fact that typically IF-statements keep that from happening. Not in shaders, IF-statements and the code they encapsulate all still get evaluated regardless....</p>

<p>So instead what @XorDev mentioned was that I should be using the <code>step(a,b)</code> as a comparative validation statement to multiply by the condition for my <code>for loop</code>. This multiplies out and cancels the for-loop by setting the condition to 0 loops in the event that a pixel is out of range of the set of rays to be indexed. Fancy.</p>

<p>Next I realized that specifically for GameMaker when running GLSL ES shaders that the size of the for-loop does not affect run-time or compile time. So I don't think GameMaker is particularly unrolling the for loop here when compiling the shader. So I set the for loop to the maximum radius of what this shader will be processing on, <code>2^16-1</code> radius or a <code>2*(2^16-1)</code> diameter light. Plenty for games IMO. The reason for this restriction is to reduce the actual floating point conversion to RG components when rendering to the texture for a total of 2 bytes instead of 3 or 4 for efficiency purposes.</p>

<p><strong><em>CANCELING OUT DISTANCE IN LOOP</em></strong>
As another user mentioned, I do not need to cancel out the distance in order to break away from the loop. This is false and actually highly necessary. The reason for the trickery here is to prematurely exit the for-loop in the event that we've hit a collision and don't want to proceed tracing out the full length of the ray.</p>

<p><strong>SHADER: Shd_LightSampler</strong></p>

<p>Again the same idea was used here as well, just simply eliminate the if-statements. The shader still runs the same, but more efficiently, even if I am not evaluating out each pixel via an IF-statement. Branching is slow. The reason here that the shader still runs the same is that I actually multiply out the color to black if the pixel is out of range regardless, so pixels outside the light radius still end up blank.</p>

<p>Finally one of the bigger hurdles was eliminating the secondary ray check. Originally I had designed the shader to check the 2 closest rays to the pixel being rendered in the event that the first ray failed to validate the pixel. Essentially this was unnecessary and all I did was <code>floor()</code> the desired ray index so as to get the correct ray appropriate for the pixel where as before it was hit or miss depending upon rounding errors.</p>

<p>This all allowed for several other small optimizations such as not using several multiplication maths to calculate out the <code>ToneMap</code> based on whatever IF-condition.</p>

<p><strong>TL:DR</strong></p>

<p>IF-statements are bad, GPUs love floating point operations and I can prematurely exit loop iterations. Fantastic, I saw about a 6x improvement on speed roughly, though I'm not doing rigorous highly skilled testing. All I know is that now I can render more lights at higher radius (roughly 600 lights at a 512px radius on a 1080 Ti) and in the order of thousands of lights with smaller and smaller radius, eventually hitting a bandwidth cap I believe on the part of either GameMaker or my GPU, no idea.</p>
    </div>