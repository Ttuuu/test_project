<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Move your startup/init code into a <code>main</code> routine, and replace it with the more usual Python idiom:</p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre></li>
<li><p>As a pet peeve, get rid of the delay timers. I don't think they add any value, and they do make it irritating when debugging.</p></li>
<li><p>Move your data away from your code. For example, you have a bunch of literal text in your <code>showInstructions</code> function. Instead, create a list of tuples:</p>

<pre><code>INSTRUCTIONS = [ # (title, text)
    ("Instructions", """You are a treasure hunter, your goal is to collect at least 
     100 gold by the end of the game from treasure chests randomly ..."""),
    # ... etc ...
]
</code></pre>

<p>Then use the tuples in a simple loop inside <code>showInstructions</code>:</p>

<pre><code>def showInstructions():
    """Hide main window, then show a series of message boxes with instructions in them."""

    window.withdraw()
    for title, text in INSTRUCTIONS:
        messageBox(title, text)
</code></pre>

<p>Also, since your message boxes always end with "Press enter to continue..." go ahead and define a <code>messageBox</code> function that appends that text.</p>

<pre><code>def messageBox(title, text):
    message = text.rstrip() + '\n\nPress enter to continue...'
    messagebox.showinfo(title, message)
</code></pre></li>
<li><p>Decide how you want to handle input, and write a function to do that. Checking a Y/N response for a 'y' and an 'n' is annoying. Users prefer there to be a default behavior that requires only one answer. For example, if the default is N, then the user can type 'Y' or just hit enter, defaulting to N. This will reduce the amount of code you have to write, as well.</p>

<p>Writing a function for this should be easy and obvious. You can return a boolean true for yes, false for no, and use that inside an <code>if</code> statement:</p>

<pre><code>if ask_yorn("Are you sure you with to play this game?"):
   print("Okay lets continue then!")
   print("")
   print("")
   print("""~~~~~~~~~~MENU~~~~~~~~~~""")
   # ...
else:
   quit("Thank you for playing!")
</code></pre></li>
<li><p>A same suggestion applies to numeric text entry for selecting from a menu. Write a function that takes a maximum value, a prompt, and keeps looping until a valid input is found. Call it <code>get_number(3, "&gt; ")</code>. Let the return value be the integer result.</p></li>
<li><p>Collapse your various <code>xxx_easy/med/hard</code> functions into code as much as you can. Your only change seems to be the board size, so why not just create a size variable, or use the <code>len(board)</code> directly to know how many rows/columns there are? </p></li>
<li><p>Write a function to handle getting a board command, checking it against the valid list of commands, and returning a valid result. It should just loop until something valid happens, either <code>up</code>, <code>down</code>, etc or an <code>exit</code>. </p></li>
<li><p>Finally, stop using <code>current[0]</code> and <code>current[1]</code>. You are storing values into the list, then unpacking the elements of the list each time. You should consider some of these possibilities:</p>

<ul>
<li>Declare <code>global position</code> (instead of current) and stop passing arguments.</li>
<li>Create a <code>namedtuple</code> and use <code>current.x, current.y</code>.</li>
<li>Create a tuple and pass it directly.</li>
<li>Create <code>global X</code> and <code>global Y</code> and pass them directly.</li>
</ul></li>
</ol>
    </div>