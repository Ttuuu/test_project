<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug: Initial allocation not cleared to zero</h3>
<p>Your initial allocation of <code>sb-&gt;mem</code> uses <code>malloc</code> instead of <code>calloc</code>, so its contents are uninitialized.  If you then append a few characters and call <code>sb_as_string()</code>, you will get back a string that is not properly terminated.  You should use <code>calloc</code> instead.</p>
<h3>Minor bug</h3>
<p>If your call to <code>realloc</code> fails, your buffer will be incorrect because it will no longer be null terminated (you just appended a character to the last spot).  You should either rewrite a <code>'\0'</code> to the end of the buffer if <code>realloc</code> fails, or do the <code>realloc</code> before you append the character.</p>
<h3>Argument check</h3>
<p>When creating a string buffer, you should handle the case where <code>init_cap</code> is passed in as 0.  You can set it to some default value in that case.  Right now, an initial capacity of 0 will cause a crash down the line because your append function will append to a zero length buffer without ever reallocating.</p>
<h3>Usability</h3>
<p>I would much prefer an append function that took a string argument instead of a character argument.  I'm not sure that I would ever need to append one character at a time.</p>
<p>Also, it might be nice to have a <code>to_string</code> type function that returns the string but also frees the stringbuilder.  The way you currently have it, you can retrieve the string, but if you subsequently free the stringbuilder it will also free the string you just retrieved.  That makes it difficult to use the string because its lifetime is tied to the lifetime of the stringbuilder.</p>
    </div>