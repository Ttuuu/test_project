<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I really don't know whether or not this is the best implementation; any advice would be much appreciated</p>
</blockquote>

<p>In my opinion, the 'best' way is relative, subjective, arbitrary. There's a lot of moving parts to the DOM and many avenues that get you to the same destination. So there, <em>for the majority of scenarios</em>, is no 'righter' way. I do, circumstantially, think there are more efficient ways to do things, but I stress circumstantially. Your performance hits are few and far between in personal websites like you are building though so in my opinion I would say don't make that a focal point for concern. </p>

<p>For brevity, I think it's a valid concern and shows that you have a great mentality thinking about the 'grand scheme' of things, but you should never say things like </p>

<blockquote>
  <p>due to the absence of great degrees of experience in the field of front-end development, my opinion may very well be wrong</p>
</blockquote>

<p>That pre-dispositions you for failure. Just because you don't have a degree, which is debatably relevant in today's scope anyways, does not automatically dismiss your creative freedom or mean you automatically know less. Anyone on a team can have a good idea and even PMs mess up :) we're all just people. Although I get what you are saying, try not to make it a habit, for many reasons.</p>

<p>Anyways, I'm going to offer a solution and I'm aware it may not be what you are looking for, but it's there if you fancy it, it's there if you don't. I'll certainly explain my thought process however, but right, wrong or indifferent, it's a way to do it, I'm not implicitly arguing it's <em>the</em> way to do it either. </p>

<p>Located at the bottom for review, just keep in mind I'm not a graphic designer :p 
The solution is also not responsive because I don't know what your plans are so I didn't want to force it, but of course it can/should be. The CSS isn't important anyways, it's just for the demo, you're going to change it to fit your needs.</p>

<p>However, my solution, as it stands now, is a pure CSS solution. My high-level reasons for that are</p>

<ul>
<li>Maintainability  </li>
<li>Accessibility</li>
<li>Readability</li>
<li>Semantics</li>
</ul>

<p>There really are no efficiency concerns with this ask. Overall though, in my opinion, keeping a timeline like this CSS-focused will make it easier to maintain as your requirements change or get more complex. As you can see, there isn't that much HTML involved, we let CSS handle it independently, like it should, so that way we can move the HTML around anywhere without causing conflicts, and we can even use the same stylesheet for other projects. Overall, it feels moduralized, your HTML is maintainable now, same for CSS but now you don't have scripts dependent on, or creating, elements or altering/creating selectors like ids other files are dependent on. I'm not saying what you are doing is wrong, I'm just saying don't make it hard on yourself maintainability wise by having attributes and elements set in different ways in different places, if it can be avoided. </p>

<p>I don't want to drag this on or bore you, so I think readability is understood.</p>

<p>I'm sure other people have suggestions about your javascript, as do I, but I just wanted to talk about semantics and accessibility. </p>

<h3>semantics</h3>

<p>Semantics are very important for many reasons, like SEO and accessibility. There's lots of resources out there already for you to review so I won't double-tap; but for me, the biggest take away is that it's layered. Semantics isn't just about using the right tag for it's intended purpose, it's also about UIX and how are those tags semantically being used by the end user. Meaning, would you rather, as a user, want to manually click 'load more' at the end of a picture feed, or would you prefer the 'infinite scrolling' method. Both work, both apply, but one of them just feels right as a user. You know what you want, you're obviously at the end for a reason. </p>

<p>So I would just ask, re the UIX topic, how will your users <strong><em>know</em></strong> they need to click on a year for more details? How do they even know they can? Timelines are tough because usually they are static content and what you want to do is very cool and different, so you need to give them a reason to invest their time in your portfolio and use those cool things. You have to effectively sell yourself very quickly and I would just ask maybe reconsider the explicit interaction you are suggesting, or at least how I interpreted it. Think about how often you really digest a persons portfolio, I'm guessing not much but I think that's normal; just consider there potentially are a lot of people out there with "not much attitude" too.</p>

<p>My way may not be the best answer to that, but I think people at least can gather that with every year there are months next to it. Curiosity is left up to them after that in my case, but again, I'm not a designer I actually hire some for my personal stuff so I leave no room for doubt in my own mind. </p>

<p>Lastly on this topic, what you have in HTML isn't wrong, it's what the spec would call <code>conformed</code>, but it could use improvement. Think about the structure, a timeline is a list of events that happen in a specific order(ol) and can also happen in any order (ul). All checks out, your syntax meets that requirement. </p>

<p>But by your definition, "a timeline separated by years that contains a list of months" implicitly identifies a sectioning flow of content; a la an address book. Each section has a header, usually the first letter of last name, then lists those contacts that qualify. Again, this helps screen readers, but more importantly SEO. What you are trying to do is fit a header into an li, so how do you suppose google will index that? Probably as just another li. </p>

<p>What I like to do when I think about content model is simply go to MDN or the spec and review what the <code>permitted content</code> is to make sure I'm giving myself the best chance at SEO. Over time this will come to you like it's second nature because there are only so many pre-defined tags.</p>

<p>If you look at the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li" rel="nofollow noreferrer">permitted content</a> of an li, it states "flow content", which actually includes h1,h2,h3 etc. So again, while it's valid HTML, it's not reflecting intention. </p>

<p>Now, if you read the <a href="https://html.spec.whatwg.org/multipage/grouping-content.html#the-li-element" rel="nofollow noreferrer">spec</a> at the very end of that section, it states:</p>

<blockquote>
  <p>While it is conforming to include heading elements (e.g. h1) inside li elements, it likely does not convey the semantics that the author intended. A heading starts a new section, so a heading in a list implicitly splits the list into spanning multiple sections.</p>
</blockquote>

<p>How oddly specific to this situation :P</p>

<p>Now the question comes, how do you add a section title to a ul/ol, there's no tag or attribute for it? Well, turns out there are many ways, using a <code>dl</code>, an <code>h3</code> before the list tag and more 'list-like' tags, but the example I used in the snippet below comes straight from the source and satisfies intention and helps SEO and screen readers and makes it easier to style! Win-win-win-wins!! If you go back to the <a href="https://html.spec.whatwg.org/multipage/grouping-content.html#the-li-element" rel="nofollow noreferrer">spec</a>, in the examples for li, the second example they provide demonstrates that edge case, what I consider an edge case any ways.</p>

<p>Really, when it comes to knowing what tag is used where and when and how just comes down to practice. I have spent many a nights in a endless loop of reading all the details for some scenarios but as mentioned, over time it is just a thought a way. I walked through all this just to show how I approach some of these same issues. Those resources are a great start but you'll find what works best for you.</p>

<h3>accessibility</h3>

<p>Accessibility and semantics kind of go hand-in-hand. Whatever is semantically sound is <em>almost</em> accessibility-ready. Unfortunately, a lot of devs don't consider doing it because they aren't impacted by an inaccessible web or don't do it for their job. It's one of things that "you think will never happen to you" until something bad happens or you have a family member. I think a personal site is a great time to start learning if you haven't already because you have the luxury of taking your time to learn it right, understand how it works and be a resume builder. Mostly because you do not want to give anyone a reason to disqualify you from a job if their recruiter happens to be disabled and visits your site. Additionally, trust me, even if they aren't some will inspect the page to see whats under the hood, so if anything, it could very well set you apart from other candidates.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-css lang-css prettyprint-override"><code>:root {
  --color-tl-chevron-fg-hover: rgba(255,255,255,1);
        --color-tl-chevron-fg: rgba(255,255,255,0.6);
           --color-tl-chevron: cornflowerblue;
                --color-tl-bg: snow;
                --color-tl-fg: rgba(0,0,0,1);
}

html {
  font-family: "Trebuchet MS", Geneva, sans-serif;
  font-size: 16px;
  background-color:#022b3a;
}

.timeline-container {
  display: flex; 
  position: relative;
  flex-flow: row nowrap;  
  margin: 0 auto;  padding: 0;
  width: 96%;
  
  background-color:  var(--color-tl-bg);
  box-shadow:  7px 0px 30px 0px rgba(0,0,0,0.3);
}
.timeline-container:after {
    content: '';
    position: absolute;
    width: 0; height: 0;
    right:0;
    margin-right: -1em;
    
    border: solid var(--color-tl-bg) 1.6em;
    border-left-width: 1em;
    border-right-width: 0;
    border-top-color: transparent;
    border-bottom-color: transparent;
  
    overflow: hidden;
}

figure {
  display: flex;
  margin: 0; padding: 0;
  
  transition: flex 0.15s ease-in-out;
  z-index: 1;
}
figure:hover:not(:last-child) ~ figure:last-child {
  flex: unset; 
}
figure:hover:not(:nth-last-child(-n+2)) ~ figure:last-child figcaption {
  color: var(--color-tl-chevron-fg);
  font-weight: normal;
}
figure:hover:not(:last-child) ~ figure:last-child ul {
  display: none;
} 

figure figcaption {
  position: relative;
  padding: 1rem;
  
  background-color: var(--color-tl-chevron);
  color: var(--color-tl-chevron-fg);
}
figure figcaption:before,
figure figcaption:after {
    content: '';
    position: absolute;
    width: 0; height: 0;
    right:0;
    top:0;
    
    border: solid var(--color-tl-chevron) 1.59rem;
    border-left-width: 1em;
    border-right-width: 0;
    
    overflow: hidden;
}
figure figcaption:after {
    margin-right: -1em;
  
    border-color: var(--color-tl-chevron);
    border-top-color: transparent;
    border-bottom-color: transparent;
}
figure figcaption:before {
    margin-right: 3.5em;
  
    border-right-width: 1em;
    border-left-color: transparent;
}
figure:hover,
figure:not(:hover):last-child {
  flex: 2;
  cursor: default;
}

figure:hover figcaption,
figure:hover + figure figcaption,
figure:not(:hover):last-child figcaption {
  color: var(--color-tl-chevron-fg-hover);
  font-weight: bold;
}
figure:hover ul,
figure:not(:hover):last-child ul {
  display: flex;
}


ul {
  display: none; 
  flex: 1;
  margin: 0; padding: 0;
}

ul li {
  display: flex;
  flex: 1;
  justify-content: center;
  align-items:center;
  
  font-size: 0.85em;
  list-style: none;
}

a,
a:link,
a:visited,
a:focus,
a:active,
a:hover {
  color: var(--color-tl-fg);
  
  text-decoration: none;
  cursor: pointer;
}

a:hover {
  font-weight: bold;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="timeline-container"&gt;
  &lt;figure&gt;
    &lt;figcaption&gt;2015&lt;/figcaption&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=""&gt;Jan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;Feb&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;March&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;April&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
    &lt;figcaption&gt;2016&lt;/figcaption&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=""&gt;May&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;Jun&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;July&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;Aug&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
    &lt;figcaption&gt;2017&lt;/figcaption&gt;
    &lt;ul id="2017-Portfolio"&gt;
      &lt;li&gt;&lt;a href=""&gt;Oct&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;Nov&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;Dec&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;Jan&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
    &lt;figcaption&gt;2018&lt;/figcaption&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=""&gt;Jan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;Feb&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;March&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;April&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
    &lt;figcaption&gt;2019&lt;/figcaption&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=""&gt;Jan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;Feb&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;March&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""&gt;April&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/figure&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>