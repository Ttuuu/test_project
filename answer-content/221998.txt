<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple of thoughts:</p>

<ol>
<li><p>You say</p>

<blockquote>
  <p>Given that I'm calculating 8 times as many pixels at once, I was hoping for more.</p>
</blockquote>

<p>Yes, simd delivers some pretty spectacular performance improvements when doing vector/matrix operations, but for the Mandelbrot, all you’re doing is elementwise addition and multiplication, so you should see improvements, but nothing approaching 8× for these simple elementwise calculations. In my tests, the simd achieved just about twice the performance of the scalar rendition on both i9 Mac and iPhone Xs Max.</p></li>
<li><p>Two algorithmic observations:</p>

<ul>
<li><p>I notice that you’re squaring <code>as</code> and <code>bs</code> twice, once during the algorithm and again in the escaping test. I’d suggest refactoring this so you use the results of this squaring for both the algorithm and for the escaping test.</p></li>
<li><p>I notice that you’re doing vector multiplication for <code>2</code> in the <code>2×a×b</code> portion. I used the vector × scalar product rather than the vector elementwise product. That might be a tad faster.</p></li>
</ul></li>
<li><p>If you’d like to eliminate those unintuitive <code>_mm512_xxx</code> calls, you might consider the simd library, which is part of the <a href="https://developer.apple.com/documentation/accelerate?language=objc" rel="nofollow noreferrer">Accelerate</a> framework. This is a higher level of abstraction and, especially in Swift, you end up with very natural looking code which is, IMHO, easier to read.</p></li>
<li><p>Conceptually, it should be noted that the simd performance gains are going to be offset by those boundary cases where some pixels have escaped and others haven’t, as you’re going to be calculating iterations for all eight pixels in the vector, including those that have already escaped.</p>

<p>This probably doesn’t have a material impact on the performance, but it’s worth noting, especially if dealing with cases where dealing with intricate portions of the Mandelbrot set (which are the most interesting parts).</p></li>
</ol>



<hr>

<p>For what it’s worth, this is what a Swift simd rendition might look like:</p>

<pre><code>import simd

func calculate(real: simd_double8, imaginary: simd_double8) -&gt; simd_double8 {
    var zReal = real // simd_double8.zero
    var zImaginary = imaginary // simd_double8.zero

    let thresholds = simd_double8(repeating: 4)
    let maxIterations = 10_000.0

    var notEscaped = SIMDMask&lt;SIMD8&lt;Double.SIMDMaskScalar&gt;&gt;(repeating: true)
    let isDone = SIMDMask&lt;SIMD8&lt;Double.SIMDMaskScalar&gt;&gt;(repeating: false)

    var currentIterations = 0.0
    var iterations = simd_double8.zero

    repeat {                                                    // z = z^2 + c
        currentIterations += 1.0
        iterations.replace(with: currentIterations, where: notEscaped)

        let zRealSquared = zReal * zReal
        let zImaginarySquared = zImaginary * zImaginary

        zImaginary = 2.0 * zReal * zImaginary + imaginary       // 2 × zr × zi + ci
        zReal = zRealSquared - zImaginarySquared + real         // zr^2 - zi^2 + cr

        notEscaped = zRealSquared + zImaginarySquared .&lt; thresholds
    } while notEscaped != isDone &amp;&amp; currentIterations &lt; maxIterations

    iterations.replace(with: 0, where: notEscaped)

    return iterations
}
</code></pre>

<p>What’s nice about that, is that it’s very similar to the scalar rendition, free of cryptic method references. For example, here is the scalar version:</p>

<pre><code>func calculate(real: Double, imaginary: Double) -&gt; Int {
    var zReal = real
    var zImaginary = imaginary

    let thresholds = 4.0
    let maxIterations = 10_000

    var notEscaped = false

    var currentIterations = 0

    repeat {                                                    // z = z^2 + c
        currentIterations += 1

        let zRealSquared = zReal * zReal
        let zImaginarySquared = zImaginary * zImaginary

        zImaginary = 2.0 * zReal * zImaginary + imaginary       // 2 × zr × zi + ci
        zReal = zRealSquared - zImaginarySquared + real         // zr^2 - zi^2 + cr

        notEscaped = zRealSquared + zImaginarySquared &lt; thresholds
    } while notEscaped &amp;&amp; currentIterations &lt; maxIterations

    return currentIterations &gt;= maxIterations ? 0 : currentIterations
}
</code></pre>
    </div>