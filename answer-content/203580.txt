<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would begin with the imports.  When importing <code>UIKit</code> you will not need to import <code>Foundation</code> because the contents of <code>UIKit</code> will also include <code>Foundation</code>.</p>

<p>Now to recommend a few things with regards to the <code>Game</code> struct. Now the way the struct is instantiated means that one image is equivalent to a "Game," so you would be able to set the <code>correctWord</code>, and <code>image</code> to constants with <code>let</code>.  </p>

<p>Secondly, we can also provide a more descriptive names for the variables to eliminate any confusion later on down the line, like using <code>guessedLetters</code> instead of <code>guessedLetter</code> (plural indicates that this is likely an array), <code>correctAnswer</code> instead of <code>correctWord</code>, and <code>guessedWord</code> instead of <code>formatedWord</code> as these are more clear and descriptive of their purposes.</p>

<pre><code>import UIKit

struct Game
{
    let correctAnswer: String
    let image: UIImage
    var guessedLetters: [Character]
    // cr√©ation du bon mot par le joueur
    var guessedAnswer: String
    {
        var guessedAnswer = ""
        let answer = correctAnswer.lowercased()

        for letter in answer
        {
            if guessedLetters.contains(letter)
            {
                guessedAnswer += "\(letter)"
            }
            else
            {
                guessedAnswer += "_"
            }
        }

        return guessedAnswer
    }
    // Quand le joueur
    mutating func playerGuessed(_ letter: Character)
    {
        guessedLetters.append(letter)
    }
}
</code></pre>

<p>Now with regards to the View Controller. I would begin by dealing with the variables at the top of the controller.  These should either be included in the controller or refactored into their own file. For simplicity sake, I'll just move these to be part of the ViewController. </p>

<p>Next we would want to rename some of the variables to make their purposes more clear.  This will help with understanding of what everything does in a way that is more identifiable than comments. I've opted to use names like <code>imageDictionary</code> and <code>currentGameIndex</code> over <code>imageAndWord</code> and <code>imageFindNumber</code>, for example.</p>

<p>Next, there are a couple values that are unnecessary.  Particularly <code>theKey</code>, <code>theValue</code>, and <code>totalKey</code>. These are not needed because we already have a mutable dictionary that we can perform actions against, so we do not need to create extra versions of these values.  When we are setting the new game parameters, I've updated those references to use the following logic, which will do the same thing without needing additional arrays. </p>

<pre><code>imageDictionary.removeValue(forKey: currentGame.correctAnswer)
let word = imageDictionary.first?.key.lowercased()
let value = imageDictionary.first?.value
</code></pre>

<p>I've introduced a <code>guard</code> statement in the <code>newRound</code> method. This statement is useful for when you have a dependency that you need to continue executing.  In this case, you need to have an image available in order to proceed, so the <code>guard</code> case will verify if there is one, and then continue through or terminate early.  This is not necessary, but in cases where there are dependencies that are required, it can be useful and easier to read than nested if statements.</p>

<p>Another change I would recommend is renaming the <code>enableOrNotButton:</code> method. In my example, I've updated it to <code>setButtonStatus enabled:</code> as it helps you understand at a glance what the intent is.  <code>setButtonStatus(enabled:true)</code> shows you that you are intending that the button will be updated to enable = true.</p>

<p>Finally I've removed the redundant comments, as those don't really help much of anything. If the method is named appropriately, as is the case for <code>updateUI()</code>, then you don't really need a comment that says "<code>updateUI()</code> will update the UI".  Comments are more helpful when they explain something that isn't understood.  A good comment should be able to answer a question or provide information that isn't immediately obvious.</p>

<pre><code>import UIKit

class ViewController: UIViewController {

    var imageDictionary = ["Maison": #imageLiteral(resourceName: "image 1"),"Bateau": #imageLiteral(resourceName: "image2") ,"Train": #imageLiteral(resourceName: "image 3"),"Vase": #imageLiteral(resourceName: "image 4")]
    var currentGameIndex = 0
    var currentGame: Game!

    @IBOutlet var letterButtons: [UIButton]!
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var wordLabel: UILabel!
    @IBOutlet weak var scoreLabel: UILabel!

    @IBAction func letterButtonsPressed(_ sender: UIButton)
    {
        // Disable the button so the user cannot select the letter again.
        sender.isEnabled = false
        let guessedLetter = sender.title(for: .normal)!
        let lowercasedLetter = Character(guessedLetter.lowercased())
        currentGame.playerGuessed(lowercasedLetter)

        if currentGame.correctAnswer == currentGame.guessedAnswer
        {
            beginNewRound()
        }

        updateUI()
    }

    func updateUI()
    {
        let word = currentGame.guessedAnswer.map{String($0)}
        let spacingWord = word.joined(separator: " ")
        wordLabel.text = spacingWord
        imageView.image = currentGame.image
        scoreLabel.text = "Image: \(currentGameIndex)/\(totalKeys)"

    }

    func beginNewRound()
    {
        guard imageDictionary.isEmpty else {
            setButtonStatus(enabled:false)
            return
        }

        setButtonStatus(enabled:true)
        let word = imageDictionary.first?.key.lowercased()
        let value = imageDictionary.first?.value
        currentGame = Game(correctWord:word, image:value, guessedLetter: [])
        currentGameIndex += 1
        imageDictionary.removeValue(forKey: currentGame.correctAnswer)
        updateUI()
    }

    func setButtonStatus(enabled status: Bool)
    {
            for button in lettersButtons
            {
                button.isEnabled = status
            }
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        beginNewRound()
        print(currentGame.correctAnswer)
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }


}
</code></pre>
    </div>