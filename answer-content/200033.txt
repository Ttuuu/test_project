<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General remarks</h3>

<p>Don't use <code>namespace std;</code>, see for example <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is “using namespace std;” considered bad practice?</a>.</p>

<p><code>"stdafx.h"</code> is typically used in Visual Studio projects as the name
of a header file to be precompiled. To make the code portable, remove the
inclusion (your code compiles without it), or wrap it as suggested e.g.
<a href="https://codereview.stackexchange.com/a/106201/35991">here</a></p>

<pre><code>#ifdef WINDOWS
#include "stdafx.h"
#endif
</code></pre>

<p>Don't put everything into <code>main()</code>: With separate function for reading the
input and counting the rooms the program becomes more clearly arranged and
is better testable.</p>

<p>The final <code>return 0;</code> in <code>main()</code> is not needed.</p>

<h3>A problem</h3>

<p>While visiting the fields, the <code>'.'</code> character is replaced with the current
value of the room counter:</p>

<pre><code>house[row][column] = (char)counter;
</code></pre>

<p>As soon as the counter becomes 46 (or whatever the character code for <code>.</code>
is on your platform) it is impossible to distinguish between “dot” (for an
unvisited field) and the number 46 (for room number 46). </p>

<p>This can indeed cause an infinite loop in your program, e.g. with the input</p>

<pre>
9 25
#########################
#.#.#.#.#.#.#.#.#.#.#.#.#
#########################
#.#.#.#.#.#.#.#.#.#.#.#.#
#########################
#.#.#.#.#.#.#.#.#.#.#.#.#
#########################
#.#.#.#.#.#.#.#.#.#.#...#
#########################
</pre>

<p>The <code>visit</code> vector grows “indefinitely” – until the program aborts with
a memory failure.</p>

<p>Fortunately, this can be fixed easily: It is irrelevant for the flood-fill
algorithm which room a field belongs to, only if it has been visited or not.
So instead of assigning the counter value, assign some character (different
from <code>'.'</code> and <code>'#'</code>). Even better, use constants </p>

<pre><code>const char emptyField = '.';
const char visitedField = 'X';
</code></pre>

<p>and use them like</p>

<pre><code>if (house[row][column] == emptyField) {
    house[row][column] = visitedField;
    // ...
}
</code></pre>

<h3>Some simplifications</h3>

<p>You are using a “vector of vectors” to store the list of <code>row/column</code> pairs
of fields which still have to be visited. A “vector of pairs” would be more
appropriate, and requires less memory allocations.</p>

<p>Use an <code>auto</code> variable instead of casting the return value of <code>vector::size()</code>:</p>

<pre><code>for (auto i = 0; i &lt; visit.size(); i++) { ...
</code></pre>

<p>Even if on Windows (or any other platform with 32-bit integers) <code>int</code> would
be large enough for this application, it is generally a good idea to avoid
a possible truncation to a smaller integer type. </p>

<p>There are two places where all neighbors of a field are checked: First when
an empty field has been found, and again when traversing the <code>visit</code> list.
This can be combined, making the main program loop shorter and simpler:</p>

<pre><code>for (int row = 0; row &lt; numberofrows; row++) {
    for (int column = 0; column &lt; rowlength; column++) {

        if (house[row][column] == emptyField) {
            counter += 1;

            vector&lt;pair&lt;int, int&gt;&gt; visit = {{ row, column }};

            for (auto i = 0; i &lt; visit.size(); i++) {
                int r = visit[i].first;
                int c = visit[i].second;
                house[r][c] = visitedField;

                if (r != 0 &amp;&amp; house[r - 1][c] == emptyField) {
                    visit.push_back({ r - 1, c });
                }
                if (r != numberofrows - 1 &amp;&amp; house[r + 1][c] == emptyField) {
                    visit.push_back({ r + 1, c });
                }
                if (c != 0 &amp;&amp; house[r][c - 1] == emptyField) {
                    visit.push_back({ r, c - 1 });
                }
                if (c != rowlength &amp;&amp; house[r][c + 1] == emptyField) {
                    visit.push_back({ r, c + 1 });
                }
            }
        }
    }
}
</code></pre>

<h3>Further suggestions</h3>

<p>The <code>visit</code> vector only grows, but never shrinks. Some <em>list</em>
might be more memory efficient because you can remove the items that have
been handled.</p>

<p>Instead of the flood-fill algorithm, use a <a href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure" rel="nofollow noreferrer">“disjoint-set data structure”</a>
(also called “union-find data structure”) to find and count connected sets
of fields.</p>
    </div>