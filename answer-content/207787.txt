<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks a reasonably competent attempt.  It's very clear how it works.  I have a few observations or improvements:</p>

<ul>
<li><p>When reading input using <code>scanf()</code> (or otherwise), it's imperative to check for errors.  In this case, we just need to ensure that the return value (number of conversions made) is 1 (i.e. <code>scanf()</code> has assigned to <code>userInput</code>):</p>

<pre><code>if (scanf("%d", &amp;userInput) != 1) {
    fprintf(stderr, "User input is not a number!\n");
    return 1;
}
</code></pre></li>
<li><p>Should we be accepting negative inputs?  I think it would be better to use <code>unsigned int</code> and to ask the user only for positive values.</p></li>
<li><p>We don't really need three variables for the factors.  Since <code>secondFactor</code> is always equal to <code>firstFactor+1</code> and <code>thirdFactor</code> is always equal to <code>firstFactor+2</code>, we can replace them with those expressions:</p>

<pre><code>do {
    firstFactor++;
    product = firstFactor * (firstFactor + 1) * (firstFactor + 2);
} while(product &lt; userInput);
</code></pre>

<p>I might re-write that as a <code>for</code> loop, since there's an increment step (<code>firstFactor++;</code>).</p></li>
<li><p>Beware of arithmetic overflow - if the input is near <code>INT_MAX</code> (or <code>UINT_MAX</code> after moving to unsigned type), then <code>product</code> might exceed the limit of integer type - that's particularly bad for signed types, where overflow is Undefined Behaviour.  We might want to ensure that we don't reach that limit, either by using a wider type for <code>product</code> than <code>int</code> (if one exists - <code>long long int</code> could be the same size) or by testing product against the cube root of the limit (perhaps using <code>cbrt()</code> from <code>&lt;math.h&gt;</code>).</p></li>
<li><p>We don't need a special test for <code>userInput == 0</code>.  If we compute <code>product</code> <em>before</em> incrementing <code>firstFactor</code>, then the first iteration of the loop will produce 0.</p></li>
<li><p>We could improve the printing, by formatting the tested number as part of the output.</p></li>
</ul>

<hr>

<h1>Modified code</h1>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    printf("Enter an integer: ");

    unsigned int userInput;
    if (scanf("%u", &amp;userInput) != 1) {
        fprintf(stderr, "User input is not a number!\n");
        return 1;
    }

    /* avoid overflow by dividing input by one of the factors */
    for (unsigned int firstFactor = 0;  firstFactor * (firstFactor + 1) &lt;= userInput / (firstFactor + 2);  ++firstFactor) {
        if (userInput == firstFactor * (firstFactor + 1) * (firstFactor + 2)) {
            printf("%u is a triangular number\n", userInput);
            return 0;
        }
    }

    printf("%u is not a triangular number\n", userInput);
    return 0;
}
</code></pre>
    </div>