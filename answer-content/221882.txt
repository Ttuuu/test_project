<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Dispose Strategy</h3>
<p>It seems your class doesn't even need to implement <code>IDisposable</code>. <a href="https://stackoverflow.com/questions/15705092/do-httpclient-and-httpclienthandler-have-to-be-disposed">Should dispose HttpClient?</a></p>
<hr>
<h3>Single Responsibility</h3>
<p>I would extract configuration management from the implementation of <code>Client</code>.</p>
<pre><code>public Client(string baseUrl)
{
    _baseUrl = baseUrl ?? throw new ArgumentNullException(nameof(baseUrl));
    // ..
}
</code></pre>
<p>Add a factory for generating the client instance. This one uses hardcoded uri's, but you could also read from a config file or database.</p>
<pre><code>public static class ClientFactory
{
    public static Client Create(bool payment)
    {
        var baseUrl = payment 
            ? "https://payment.apiaddress.com/" : "https://api.apiaddress.com/";
        return new Client(baseUrl);
    }
}
</code></pre>
<hr>
<h3>Method Design</h3>
<p>I have my doubts about having <code>*..1..*</code> (junction) method interactions. I would refactor this to <code>1..1</code> (simple) or <code>1..*..1</code> (fork).</p>
<p>Original <code>*..1..*</code>:</p>
<blockquote>
<pre><code> public HttpResponseMessage Request(Methods method, string url, object data)
    {
        switch (method)
        {
            case Methods.GET: return _client.GetAsync(url).Result;
            case Methods.POST: return _client.PostAsJsonAsync(url, data).Result;
            case Methods.PUT: return _client.PutAsJsonAsync(url, data).Result;
            case Methods.DELETE: return _client.DeleteAsync(url).Result;
            default: return _client.GetAsync(url).Result;
        }
    }

    public string Get(string url) =&gt; 
        Request(Methods.GET, url, null).Content.ReadAsStringAsync().Result;

    // others ..
</code></pre>
</blockquote>
<p>Refactored to <code>1..1</code>:</p>
<pre><code>public string Get(string url) =&gt; 
    _client.GetAsync(url).Result.Content.ReadAsStringAsync().Result;

public string Post(string url, object data) =&gt; 
    _client.PostAsJsonAsync(url, data).Result.Content.ReadAsStringAsync().Result;

public string Put(string url, object data) =&gt; 
    _client.PutAsJsonAsync(url, data).Result.Content.ReadAsStringAsync().Result;

public string Delete(string url) =&gt; 
    _client.DeleteAsync(url).Result.Content.ReadAsStringAsync().Result;
</code></pre>
<p>And if you really must have wrapper function <code>1..*..1</code>:</p>
<pre><code> public HttpResponseMessage Request(Methods method, string url, object data)
    {
        switch (method)
        {
            case Methods.GET: return Get(url);
            case Methods.POST: return Post(url, data);
            case Methods.PUT: return Put(url, data);
            case Methods.DELETE: return Delete(url);
            default: return _client.GetAsync(url).Result;
        }
    }
</code></pre>
    </div>