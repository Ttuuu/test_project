<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Generation of prime numbers is suboptimal. Use a <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="noreferrer">sieve of Erathosthenes</a>.</p></li>
<li><p><code>isPrime</code> is highly suboptimal. You already generated an array of all necessary primes, so just binary search it.</p></li>
<li><p>Breaking the loop in</p>

<pre><code>        if(sumFromTo(cumulativeSums,start,end)&gt;limit)
            break;
</code></pre>

<p>looks like a bug. The intention is to loop by decreasing <code>end</code>, yet since the loop starts with the very long sequence, its sum is likely to exceed the limit right away. Shorter sequences with the same <code>start</code> are never tested.</p>

<p>Consider finding the proper <code>end</code> as an upper limit of a <code>sumFromTo(cumulativeSums, start, end) &lt;= limit</code> predicate (hint: another binary search).</p></li>
<li><p>You are not interested in <em>all</em> sequences of the primes. Most of the primes execs <code>2</code> are odd. Notice that if the sequence has an even number of odd primes, its sum is even, that is not a prime. Once the correct <code>end</code> is established, you may safely decrease it by <code>2</code>.</p></li>
<li><p>Style wise, give your operators some breathing space.</p>

<pre><code>    for (int end = s.size() - 1; end &gt;= start; end--) {
</code></pre>

<p>is much more readable than</p>

<pre><code>    for (int end=s.size()-1;end&gt;=start;end--){
</code></pre></li>
</ul>

<p>PS: I am not aware of any math regarding sums of consecutive primes. It is very much possible that such math exists, and the goal of this problem is to discover it. That would be a true optimization.</p>
    </div>