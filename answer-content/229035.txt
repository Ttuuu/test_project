<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Alternatives</h2>

<p>There are <a href="https://www.geeksforgeeks.org/remove-duplicates-from-an-unsorted-linked-list/" rel="nofollow noreferrer">other alternatives (spoiler alert)</a> with around the same time complexity, that adhere to the specification of in-place removal.</p>

<hr>

<h2>Review</h2>

<blockquote>
  <p>This is in <span class="math-container">\$O(n)\$</span>.</p>
</blockquote>

<p>I'm not sure it is. The outer iteration <code>while (node = node.next)</code> is <span class="math-container">\$O(n)\$</span>.</p>

<blockquote>
<pre><code>while (node = node.next)
  h[node.data] += 1
  if h[node.data] &gt; 1
    previous_node = find_previous(node.data)
    previous_node.next = previous_node.next.next
  end
end
</code></pre>
</blockquote>

<p>And <code>find_previous(data)</code> is <span class="math-container">\$O(\log{n})\$</span>.</p>

<blockquote>
<pre><code> def find_previous(value)
    node = @head 

    return false if !node.next
    return node if node.next.data == value 

    while(node = node.next)
      return node if node.next.data == value
    end   
 end
</code></pre>
</blockquote>

<p>This makes <code>remove_duplicates</code> to be <span class="math-container">\$O(n\log{n})\$</span>. </p>

<p>If you keep track of the previous node while iterating the nodes, you could optimize your algorithm to be <span class="math-container">\$O(n)\$</span>, but as you are using a hash table, it fails to meet the requirements of the challenge.</p>

<hr>
    </div>