<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good job so far! I got some remarks, hopefully you'll find them useful.</p>

<h2>Try Different Algorithms :)</h2>

<p>See this nice Wikipedia entry for a list of possible algorithms to solve a maze:</p>

<p><a href="https://en.wikipedia.org/wiki/Maze_solving_algorithm" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Maze_solving_algorithm</a></p>

<h2>Reuse code</h2>

<p>This switch block appears 1.5 times in your code. Consider making it a method. </p>

<pre><code>               case 0: output += " "; break;
               case 1: output += "@"; break;
               case 2: output += "S"; break;
               case 3: output += "E"; break;
               case 4: output += "^"; break;
               case 5: output += "v"; break;
               case 6: output += "&lt;"; break;
               case 7: output += "&gt;"; break;
</code></pre>

<h2>Remove unnecessary code</h2>

<p>You use this:</p>

<pre><code>   if(arr[pos[0]][pos[1] - 1] == 0) {
        return true;
   } else {
   return false;
   }
</code></pre>

<p>Which can be re-written to: </p>

<pre><code>    return arr[pos[0]][pos[1] - 1] == 0;
</code></pre>

<p>Which is much clearer to me :)</p>

<h2>AIOOBE vs bounds check</h2>

<p>You currently let the <code>canMove</code> throw an <code>ArrayIndexOutOfBoundsException</code>. Some consider this bad practice, because this is 'normal' flow. You should check before if your indices are valid.</p>

<h2>String concatenation</h2>

<p>Try to prevent String concatenation by using the <code>+</code> operator. It creates many unnecessary intermediate objects.</p>

<p>See also here: <a href="https://redfin.engineering/java-string-concatenation-which-way-is-best-8f590a7d22a8" rel="nofollow noreferrer">https://redfin.engineering/java-string-concatenation-which-way-is-best-8f590a7d22a8</a></p>

<h2>Consider using char directly</h2>

<p>Your memory-model model is an <code>int[][]</code>. Your code uses 'magic values' that test <code>int</code> values. <code>char</code> is also well-suited to use as values in your grid, and you can then directly print and test these <code>char</code> values. Constructing the grid can start from a list of <code>Strings</code> with <code>toCharArray()</code> and your maze in code looks exactly like the output on the console</p>

<p>(Or else, at least create readable constants for the <code>int</code>s in the  <code>if</code> statements)</p>

<h2>Consider coding the directions in an enum :</h2>

<pre><code>enum Direction {
  UP(0,-1), LEFT(-1,0), RIGHT(1,0), DOWN(0,1);

  int dx;
  int dy;

  Direction(dx, dy)
  {
     this.dx=dx;
     this.dy=dy;
  }
}

for (Direction d : Direction.values())
{
   if (canMove(arr, currentPos, direction))
   {
       markMove(arr, currentPos, direction);
   }
}
</code></pre>

<p>Something like this:</p>

<pre><code>  boolean canMove(int[][] arr, int[] pos, Direction d) {
        try {
            return arr[pos[0] + d.dx][pos[1] + d.dy] == 0
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            return false;
        }
    }
</code></pre>
    </div>