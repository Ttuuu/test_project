<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>First point</h2>

<p>Don't add quotes around property names when defining JS objects.</p>

<pre><code>[{'duration': 3600}, {'duration': 3600}]

// should be

[{duration: 3600}, {duration: 3600}]
</code></pre>

<h2>You state</h2>

<blockquote>
  <p><em>"And I want the output to be {3600: 2}, where 2 is the number of occurrences of 3600."</em></p>
</blockquote>

<p>Which is not that clear. Going by your code I assume you want  <code>[{duration: 60}, {duration: 60}, , {duration: 10}]</code> converted to  <code>{60:2, 10:1}</code></p>

<p>I will also assume that all array items contain an object with the property named <code>duration</code></p>

<p>Using these assumptions for the rest of the answer. </p>

<h2>Rewrite</h2>

<p>Taking your first snippet and turning it into a function.</p>

<ul>
<li>You don't need the <code>if (length in count) {</code>, you can just use <code>if (count[d.duration]) {</code></li>
<li>The object <code>count</code> and <code>d</code> should be constants as you don't change them.</li>
<li>Using a t<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" rel="nofollow noreferrer">ernary</a> you can reduce the 6 lines of the if else to one line.</li>
</ul>

<p>Code</p>

<pre><code>function countDurations(durations) {
    const counts = {};
    for (const {duration: len} of durations) {
        counts[len] = counts[len] ? counts[len] + 1 : 1;
    }
    return counts;
}
</code></pre>

<p>Or a little less verbose as a arrow function</p>

<pre><code>const countDur = dur =&gt; dur.reduce((c, {duration: l}) =&gt; (c[l] = c[l]? c[l] + 1: 1, c), {});
</code></pre>

<p>or</p>

<pre><code>const countDurs = durs =&gt; 
    durs.reduce((counts, {duration: len}) =&gt; 
        (counts[len] = counts[len] ? counts[len] + 1 : 1, counts)
    , {}
);
</code></pre>

<h2>Rewrite 2</h2>

<p>The second snippet is algorithmicly the same, just uses a different iteration method. </p>

<ul>
<li>JavaScript has <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" rel="nofollow noreferrer">Array.reduce</a> so you don't need to use a external library.</li>
<li>Separating the iterator inner block into a function <code>count</code></li>
</ul>

<p>Code</p>

<pre><code>const count= (cnt, {duration: len}) =&gt; (cnt[len] = cnt[len] ? cnt[len] + 1 : 1, cnt);
const countDurations = durations =&gt; durations.reduce(count, {});
</code></pre>

<p>Or encapsulating the <code>count</code> function via closure</p>

<pre><code>const countDurations = (()=&gt; {
    const count = (cnt, {duration: len}) =&gt; (cnt[len] = cnt[len] ? cnt[len] + 1 : 1, cnt);
    return durations =&gt; durations.reduce(count, {});
})();
</code></pre>

<h2>Functional?</h2>

<blockquote>
  <p><em>"Is there a way to write the iterate function foo more conform to functional programming?"</em></p>
</blockquote>

<p>JavaScript is not designed to be a functional language (it is impossible to create pure functions) so  It is best to use functional as a guide rather than a must.</p>

<h2>Almost pure</h2>

<p>The second rewrite is more along the functional approach, but functional purist would complain that the reducer function has side effects by modifying the counter. You can create a copy of the counts each call as follows..</p>

<pre><code>const counter = (c, {duration: len}) =&gt; (c = {...c}, (c[len] = c[len] ? c[len] + 1 : 1), c);
const countDurations = durations =&gt; durations.reduce(counter, {});
</code></pre>

<p>However this add significant memory and processing overhead with zero benefit (apart from a functional pat on the back).</p>

<h2>Note</h2>

<ul>
<li>This answer uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Assigning_to_new_variable_names" rel="nofollow noreferrer">destructuring property name alias</a> so check for browser compatibility.</li>
</ul>
    </div>