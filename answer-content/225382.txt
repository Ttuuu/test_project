<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't know how stable the precise HTML structure of those pages is, could that change in the future? Using a HTML parsing library might be a more robust approach.</p>

<p>Some remarks concerning the Swift implementation:</p>

<ul>
<li>Don't force-unwrap optionals. If one of the searched strings is not found, your program will terminate with a runtime error. Use optional binding with <code>if let</code> or <code>guard let</code> instead, and handle the failure case properly.</li>
<li>Instead of converting <code>revisionGUID</code> to lowercase you can do a case-insensitive search. </li>
<li><p>The first search string can be created with string interpolation instead of concatenation, that makes the expression slightly shorter:</p>

<pre><code>#"onclick="StackExchange.revisions.toggle('\#(revisionGUID)')""#
</code></pre></li>
<li><p>Use a regular expression with positive look-ahead and look-behind for the second search. That allows to find the precise range of the spacer, without relying on a particular length.</p></li>
<li>Put the code in a function, and add documentation.</li>
</ul>

<p>Putting it together, the function could look like this:</p>

<pre><code>/// Find spacer fragment for GUID on revisions page
/// - Parameter html: HTML of a revisions page
/// - Parameter revisionGUID: A revision GUID from the StackExchange API
/// - Returns: The spacer fragment, or `nil` if not found

func findFragment(html: String, revisionGUID: String) -&gt; String? {
    let pattern1 = #"onclick="StackExchange.revisions.toggle('\#(revisionGUID)')""#
    guard let range1 = html.range(of: pattern1, options: .caseInsensitive) else {
            return nil
    }
    let pattern2 = #"(?&lt;=&lt;tr id=")[^"]+(?=")"#
    guard let range2 = html.range(of: pattern2,
                                  options: [.backwards, .regularExpression],
                                  range: html.startIndex..&lt;range1.lowerBound) else {
            return nil
    }

    return(String(html[range2]))
}
</code></pre>
    </div>