<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The first thing I noticed.</h1>
<p>The calendar in the constructor. If you wanted to test this class it would be really difficult because you
are dependent on the Calendar implementation, and you have no control over the value it will return. It would be better to inject the calendar in to the
constructor, or Abstract the desired functionality in to an interface and inject that. This will also allow you to use one instance for your entire application.
instead of constructing a separate one in the <code>count</code> method.</p>
<p>injecting the calendar:</p>
<pre class="lang-java prettyprint-override"><code>public StatisticService(final Calendar calendar) {
        this.calender = calendar;
        this.currentSecond = new AtomicInteger(calendar.get(Calendar.SECOND));
        this.currentMinute = new AtomicInteger(calendar.get(Calendar.MINUTE));
        this.count = new AtomicInteger();
        this.minutesCount = new AtomicInteger();
    }
</code></pre>
<p>Creating an interface:
Using an interface gives you flexibility around the implementation of the counter. If in the future you want to change from using
a <code>Calendar</code> to something else only the code implementing the interface will change and classes dependent on it will be unchanged.</p>
<pre class="lang-java prettyprint-override"><code>public interface TimeProviderService {
    Integer getSecond();

    Integer getMinute();
}
</code></pre>
<h1>Second</h1>
<p>It is a lot more expensive to create a new <code>AtomicInteger</code> class then to just set it to zero.
So here instead of constructing a new class just reset the integer.</p>
<pre class="lang-java prettyprint-override"><code>//if it is new second, then clear second count and set new current second
            if (newSecond != prev) {
                count.set(0);
                return newSecond;
            } else {
                count.incrementAndGet();
                return prev;
            }
</code></pre>
<h1>Third suggestions for locking.</h1>
<p>Atomic classes are great but in this instance since you are wanting the entire count method to
be atomic I would suggest using your own lock. It simplifies the code for people trying to read it later and the entire
method would be synchronized instead of just when you're accessing the atomic integers.</p>
<p>Also, locking inside of a lock is asking for a deadlock. See Here.</p>
<pre class="lang-java prettyprint-override"><code>currentMinute.getAndUpdate(prev -&gt; {
            ...
                minutesCount.incrementAndGet();
            ...
        });

</code></pre>
<h1>Finally</h1>
<p>Here is what the class would look like if you implemented the suggestions I am proposing.</p>
<p><strong>Time Providers</strong></p>
<pre class="lang-java prettyprint-override"><code>public interface TimeProviderService {
    Integer getSecond();

    Integer getMinute();
}

public class CalendarTimeProviderService implements TimeProviderService {
    private final Calendar calendar;

    public CalendarTimeProviderService(Calendar calendar) {
        this.calendar = calendar;
    }

    @Override
    public Integer getSecond() {
        return this.calendar.get(Calendar.SECOND);
    }

    @Override
    public Integer getMinute() {
        return this.calendar.get(Calendar.MINUTE);
    }
}
</code></pre>
<p><strong>Statistic Service</strong></p>
<pre class="lang-java prettyprint-override"><code>public class StatisticService {
    private final TimeProviderService timeProviderService;
    private final Lock lock = new ReentrantLock();
    private int currentSecond;
    private int currentMinute;
    private int count;
    private int minutesCount;


    public StatisticService(TimeProviderService timeProviderService) {
        this.timeProviderService = timeProviderService;

        this.currentSecond = this.timeProviderService.getSecond();
        this.currentMinute = this.timeProviderService.getMinute();

        this.count = 0;
        this.minutesCount = 0;
    }


    public void count() {
        this.lock.lock();

        try {
            int newSecond = this.timeProviderService.getSecond();
            int newMinute = this.timeProviderService.getMinute();


            // seconds
            if (newSecond != currentSecond) {
                this.count = 0;
                this.currentSecond = newSecond;
            } else {
                this.count = this.count + 1;
            }

            // minutes
            if (newMinute != currentMinute) {
                this.minutesCount = 0;
                this.currentMinute = newMinute;
            } else {
                this.minutesCount = this.minutesCount + 1;
            }


        } finally {
            // make sure we are unlocking no matter what happens
            this.lock.unlock();
        }
    }
}
</code></pre>
<h2>one final note</h2>
<p>I did not change anything about how you were calculating the time I just changed the way you are doing it. I do not the problem you
are trying to solve, so I cannot speak on the best way.</p>
    </div>