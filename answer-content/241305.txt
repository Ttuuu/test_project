<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Error constants</h2>

<p>There's less value in doing this:</p>

<pre><code>EMPTY_LIST_ERROR_MSG = 'List is empty!'
</code></pre>

<p>and passing it like</p>

<pre><code>        raise IndexError(self.EMPTY_LIST_ERROR_MSG)
</code></pre>

<p>into a built-in exception. There's more value in making an exception type of your own, maybe derived from <code>IndexError</code>. I don't think it's really worth externalizing such strings into constants unless</p>

<ol>
<li>the string constant is very long;</li>
<li>the string constant's purpose cannot be understood by looking at its contents alone; or</li>
<li>you care about i18n.</li>
</ol>

<h2>Cascading comparison</h2>

<p>Are you sure that this:</p>

<pre><code>    def __eq__(self, other):
        return self.value == other.value and self.next == other.next
</code></pre>

<p>does what you want? I believe that, as written, due to the reference to <code>next</code> it will cascade to comparing every single value in the list after the current one. This is not likely what you want. If all you want to do is check whether <code>next</code> is the same <em>reference</em> without a cascaded equality comparison, then use <code>is</code> instead of <code>==</code>.</p>

<h2>Private variables</h2>

<p>Use <code>self._head</code> instead of <code>self.__head</code>, which has a different meaning.</p>

<h2>Method names</h2>

<p>Consider attempting to match Python's built-in collection terminology, i.e. <a href="https://docs.python.org/3.8/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>pop</code></a> instead of <code>remove_last</code>. A more useful interface would do what <code>pop</code> does and return the removed item as well.</p>

<h2>Predicate generators</h2>

<pre><code>    for value in self:
        if item == value:
            return True
    return False
</code></pre>

<p>can be</p>

<pre><code>return any(item == value for value in self)
</code></pre>

<p>Also,</p>

<pre><code>    count = 0
    for _ in self:
        count += 1
    return count
</code></pre>

<p>can be</p>

<pre><code>return sum(1 for _ in self)
</code></pre>
    </div>