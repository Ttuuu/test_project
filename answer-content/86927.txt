<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that with problems like this, you can always prove that there is a small value that is dependent on the smaller coins only. For example, in your case, with the coins <code>1,3,5</code>, you can get the following combinations:</p>

<pre><code>1 -&gt; 1
2 -&gt; 1,1
3 -&gt; 3
4 -&gt; 1,3
5 -&gt; 5
6 -&gt; 5,1
7 -&gt; 5,1,1
8 -&gt; 5,3
9 -&gt; 3,3,3
10 -&gt; 5,5
11 -&gt; 5,5,1
12 -&gt; 5,5,1,1
13 -&gt; 5,5,3
14 -&gt; 5,3,3,3
15 -&gt; 5,5,5
</code></pre>

<p>Note how, from point 10 onwards, all we did was add a 5?</p>

<p>So, the proof, for your situation, is that you can divide the total by 5 until your value is less than 10.... and then choose one of your canned solutions.... using some... as a consequence, you only need to solve the puzzle for the value less than 10, adter you have removed the 5-coins needed after that. In psuedocode:</p>

<pre><code>solvefor = X
fivecount = 0;
if (solvefor &gt; 10) {
    fivecount = (solvefor - 10) / 5;
    solvefor = solvefor - fivecount * 5;
}

solve for solvefor (which will be less than 10).
</code></pre>

<p>Putting this to some code:</p>

<pre><code>coins = [5,3,1]
maxcoin = coins.first
# initialize the memoization array with 0 coins for 0 dollars
base = [0]
diff = 0

# Use the test that the last maxcoin tests have 1
# more coin than the previous maxcoin tests.
until diff == maxcoin
    number = base.length
    min = 1000000
    found = false
    for c in coins
        num = number - c
        if num &lt; 0
            next
        end
        dist = 1 + base[num]
        if !found || dist &lt; min
            found = true
            min = dist
        end
    end
    base &lt;&lt; min

    if number &gt;= 2 * maxcoin
        sumhi = base[-maxcoin, maxcoin].reduce(:+)
        sumlo = base[-maxcoin - maxcoin, maxcoin].reduce(:+)
        diff = sumhi - sumlo
    end
end



#File.open(ARGV[0]).each_line do |line|
for number in 10000 .. 10009
  #number = line.to_i
  init = 0;
  if number &gt;= base.length
      init = 1 + (number - base.length) / maxcoin
  end
  coins = init + base[number - init * maxcoin]
  puts "#{number} -&gt; #{coins}"
end
</code></pre>

<p><a href="http://ideone.com/BYH8WR" rel="nofollow">(also in ideone)</a></p>
    </div>