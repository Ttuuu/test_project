<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall it isn't bad.</p>

<h2>Direct imports for common symbols</h2>

<p>Based on your discretion, certain often-used and unambiguous symbols can be imported without their module namespace, i.e.</p>

<pre><code>from pg.font import SysFont
# ...
strokeFont = SysFont("monospace", 50)
</code></pre>

<h2>snake_case</h2>

<p>i.e. <code>stroke_font</code> for variables and function names. Also, <code>Penalty</code> should be lower-case because it isn't a class.</p>

<h2>debug printing</h2>

<p>This kind of thing:</p>

<pre><code>print('     x-pos: %spx' % str(round(dx + x)))
</code></pre>

<p>can be improved in a few ways. Firstly, it looks like a debugging output and not actual game content, so typically you won't want to print this at all. That doesn't mean that you have to delete it, though - you can use actual Python logging at level debug to be able to select at the top level whether these statements are printed.</p>

<p>Also: do you really need round? Could you instead go</p>

<pre><code>print(f'    x-pos: {dx + x:.0f}px')
</code></pre>

<h2>f-strings</h2>

<p>As in the previous example, you should consider using the new syntactical sugar of f-strings instead of the <code>%</code> operator.</p>

<h2>Global clutter</h2>

<p>It's tempting in Python to add a bunch of stuff (x, y, time, power, etc.) to the global scope. Don't give in! Put these into a game state object. Break up your global code into multiple subroutines, potentially in methods of the game state object.</p>

<h2>Shadowing</h2>

<p>Don't call something <code>time</code>. <code>time</code> is already a thing in Python.</p>

<h2>Math</h2>

<p>I kind of had to jump through some hoops to take advantage of <code>atan2</code>. I don't recommend doing this, but here's a one-liner alternative to your <code>quadrant</code> function:</p>

<pre><code>return int(4 + 2/pi*atan2(y - ym, xm - x)) % 4 + 1
</code></pre>
    </div>