<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Missing header</h2>
<p>We need to include <code>&lt;string&gt;</code> to get declarations for <code>std::string</code> and <code>std::stoi</code>.</p>
<h2>Compile with warnings enabled</h2>
<p>You say you don't need any compilation flags.  Whilst that's true (providing your compiler defaults to C++11 or later), it's best to enable some warning flags.  That helps identify defects such as this:</p>
<pre class="lang-none prettyprint-override"><code>g++ -std=c++17 -Wall -Wextra -Wwrite-strings -Wno-parentheses -Wpedantic -Warray-bounds -Weffc++ 191455.cpp -o 191455
orig.cpp: In function ‘int main()’:
orig.cpp:20:26: warning: comparison of integer expressions of different signedness: ‘std::__cxx11::basic_string&lt;char&gt;::size_type’ {aka ‘long unsigned int’} and ‘int’ [-Wsign-compare]
     while(answer.length()&gt;=i){
           ~~~~~~~~~~~~~~~^~~
</code></pre>
<p>Although the mismatch won't cause an actual bug, it can be trivially fixed simply by changing <code>i</code> to an unsigned type.  Future readers can then be more confident about your code if you don't leave traps such as that.</p>
<h2>Just read from input</h2>
<p>There's little to be gained by reading into a string and then calling <code>std::stoi()</code> without checking the end pointer.  Just stream directly into the integer.</p>
<h2><s>Don't write your own code to convert to octal</s></h2>
<p><s>That's why we have the <code>std::oct</code> stream manipulator.</s></p>
<h2>Don't add <code>'0'</code> to turn numbers into digits and then subtract it again</h2>
<p>Either change the <code>case</code> to switch on the digits (e.g. <code>case '0':</code>, etc), or work directly with small integers.  I prefer the latter, as we can use a simple array to look up the output characters.</p>
<h2>Use <code>for</code> to show looping over elements</h2>
<p>Consider this loop:</p>
<pre><code>int i = 0;
while(answer.length()&gt;=i){
    //...
    i++;
}
</code></pre>
<p>That's more idiomatically written as:</p>
<pre><code>for (int i = 0;  i &lt;= answer.length();  ++i)
</code></pre>
<p>The off-by-one error becomes more obvious.  Better to avoid that by iterating over the characters:</p>
<pre><code>for (auto c: answer)
</code></pre>
<h2>Don't use narrow streams for wide characters</h2>
<p>If we're printing wide-character strings, we should be writing to <code>std::wcout</code> rather than to <code>std::cout</code>.</p>
<h2>Add some unit tests</h2>
<p>Enough said.</p>
<hr>
<h1>Replacement code</h1>
<p>With no specification, I can't check whether the output is <em>correct</em>, but it produces the same output as the original code for the given test case (301688), as demonstrated by the built-in self-test.</p>
<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;

std::wstring encode(unsigned long userid)
{
    static wchar_t const code[7] = {
        L'\u180E', // 0 =&gt; MONGOLIAN VOWEL SEPARATOR
        L'\u200B', // 1 =&gt; ZERO WIDTH SPACE
        L'\u200C', // 2 =&gt; ZERO WIDTH NON-JOINER
        L'\u200D', // 3 =&gt; ZERO WIDTH JOINER
        L'\u2060', // 4 =&gt; WORD JOINER
        L'\u2063', // 5 =&gt; INVISIBLE SEPARATOR
        L'\uFEFF', // 6 =&gt; ZERO WIDTH NO-BREAK SPACE
    };

    std::vector&lt;wchar_t&gt; octalid;
    for (auto i = userid;  i;  i/=7) {
        octalid.push_back(code[i % 7]);
    }

    return L"!!/blame\u180E "
        + std::wstring(octalid.rbegin(), octalid.rend())
        + L"a\n";
}
</code></pre>

<pre><code>#include &lt;iostream&gt;
#include &lt;locale&gt;

int main(int argc, char **argv)
{
    if (argc == 1) {
        // no arguments - run self tests
        return
            + (encode(0) != L"!!/blame\u180E a\n")
            + (encode(1) != L"!!/blame\u180E \u200Ba\n")
            + (encode(6) != L"!!/blame\u180E \uFEFFa\n")
            + (encode(7) != L"!!/blame\u180E \u200B\u180Ea\n")
            + (encode(8) != L"!!/blame\u180E \u200B\u200Ba\n")
            + (encode(301688) != L"!!/blame\u180E \u200C\u200D\uFEFF\u2060\u200D\uFEFF\u200Ca\n");
    }

    std::locale::global(std::locale{""});

    for (int i = 1;  i &lt; argc;  ++i) {
        try {
            std::size_t pos;
            unsigned long userid = std::stoul(argv[i], &amp;pos);
            if (argv[i][pos])
                throw std::invalid_argument("not a number");
            std::wcout &lt;&lt; encode(userid);
        } catch (std::exception&amp; e) {
            std::cerr &lt;&lt; "Invalid argument: " &lt;&lt; argv[i]
                      &lt;&lt; ": " &lt;&lt; e.what() &lt;&lt; std::endl;
        }
    }
}
</code></pre>
    </div>