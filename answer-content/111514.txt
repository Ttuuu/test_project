<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looking pretty cool! :)</p>

<h3>Think about meaningful names</h3>

<p>There are a few issues with naming though. What exactly is a <code>struct P</code>? And when you instantiate it inside <code>Segment</code>, can you think of better names than <code>p1</code> and <code>p2</code>? The <code>renderSegment</code> function is also heavy on single letter + number names, such as <code>w1,l1,r1</code>, etc. That function is by far the most intimidating piece in your code. Better names would make it a lot easier to read and understand.</p>

<h3>One declaration per line</h3>

<p>Something like this is completely unnecessary:</p>

<blockquote>
<pre><code>struct Light : public Color
{
    sf::Color road = sf::Color(100, 100, 100), grass = sf::Color(0, 100, 0), rumble = sf::Color(100, 0, 0), lane = sf::Color::White;
}light;
</code></pre>
</blockquote>

<p>It doesn't matter if you're going to have to repeat <code>sf::Color</code> for each declaration, that's still better than an absurdly compound statement like the above. Lines with multiple declaration will demand slightly more mental effort from the reader to identify everything in there, this can lead to overlooking important things when you are tired. Not to mention the need for horizontal scroll.</p>

<pre><code> struct Light : public Color
 {
     sf::Color road   { 100, 100, 100    };
     sf::Color grass  { 0,   100, 0      }; 
     sf::Color rumble { 100, 0,   0      };
     sf::Color lane   { sf::Color::White };
 } light;
</code></pre>

<h3>Good comments are good</h3>

<p>Some of your function are a little more involving, such as <code>project()</code>. It would be nice to have a summary comment at the top of the function describing the high-level algorithm is it implementing, why is the rounding necessary, etc. Links to external sites/tutorials with more step-by-step descriptions are always welcome.</p>

<p>You should do the same with <code>rumbleWidth</code> and <code>laneMarkerWidth</code> to explain what is going one in them. If you provide a good comment for each, you can even leave the magic numbers used inside.</p>

<h3><code>dynamic_cast</code> == bad class hierarchy design</h3>

<p>Using <code>dynamic_cast</code> at runtime to infer the underlaying type of an interface class is a clear indication that the class hierarchy is deficient. Doing this defeats the very purpose of an interface/base-class, which is to hide the implementation under a common type. <code>renderSegment</code> is meant to be a pure virtual member of the base class (<code>Color</code>) that each subclass implements to draw itself. No need for <code>dynamic_cast</code>ing once you do that.</p>

<h3>Try <code>M_PI</code> before defining your own</h3>

<p>Don't redefine the constant PI on your own, risking using less precision than the actual supported. <code>&lt;cmath&gt;</code> defines the macro constant <code>M_PI</code>. You can test that it is defined, then if not, provide a fallback:</p>

<pre><code>#ifndef M_PI
    #define M_PI 3.141592653589793238462643383
#endif 
</code></pre>
    </div>