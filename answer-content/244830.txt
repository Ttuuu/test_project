<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As has been said in the comments, it's unclear why you feel you need this behaviour to restrict the types used.  There's an interesting discussion around constraining types <a href="https://stackoverflow.com/a/34186/592182">here</a>, which includes a link to example code.</p>
<p>So, there's a couple of questions.  Why do you need to restrict it to <code>double</code> / <code>integer</code> types?  Is it really that you want to do is restrict it to types that support certain operations?  What is the actual downside to using it for <code>Decimal</code> / <code>float</code>?</p>
<p>You've presented an example of <code>IDataType</code>, however suggested that really your goal is to put these items into a set.  So this begs the question, are you planning on creating <code>DescriptiveStatisticalSet&lt;IntegerDataType&gt;</code> or <code>DescriptiveStatisticalSet&lt;IDataType&gt;</code>?  If it's <code>IntegerDataType</code>, what are you gaining over <code>Int32</code> for example?  If it's <code>IDataType</code>, then are you expecting to have both <code>IntegerDataType</code>  and <code>DoubleDataType</code> both present in the same set?  If so, what are you planning on doing if an Integer has the same value as a Double?  Do you keep both because they are different types, or keep whichever one was there first, or keep the Double because it's more flexible, or the Integer because it's faster?</p>
<p>Looking at your actual code, there's some aspects which are worth mentioning.</p>
<blockquote>
<pre><code>object Add(object other);
</code></pre>
</blockquote>
<p>If we look at <code>IntegerDataType</code>, this method takes in an other of type <code>IntegerDataType</code>, but returns an <code>int</code>.  This it not at all obvious from the method signature.  You are working around this to an extent in your <code>DataType</code> class, which does some recasting by creating a new instance of the returned object, however this seems unnecessarily complex.  Particularly since the implementation of <code>Add</code> relies on casting <code>other</code> to the correct type.  Calling <code>Add</code> with a <code>DoubleDataType</code> for example throws a cast exception.</p>
<blockquote>
<pre><code>public int Data { get; set; }
</code></pre>
</blockquote>
<p>Both your <code>Integer</code> and <code>Double</code> data types declare a <code>Data</code> property that has both public getter and setter.  Since you're implementing an interface to <code>setVal</code>, does it really make sense to declare this public setter?  It feels like it would be better for the <code>set</code> to be private, in order to encourage the client to use the interface method, in case you decide you need to do additional checking in the future.</p>
<p>Your <code>DataType</code> class seems to exist purely to create a new item from the <code>object</code> version of <code>Add</code>.  This seems to add unnecessary complexity over just having the initial <code>Add</code> return the correct datatype.  So, it's a bit unclear to me what advantage your current approach has over simply doing this:</p>
<pre><code>public interface IOtherDataType&lt;T&gt;
{
    T Data { get;}

    IOtherDataType&lt;T&gt; Add(IOtherDataType&lt;T&gt; other);
    void SetVal(T other);
}

public class IntType : IOtherDataType&lt;int&gt;
{
    public IntType(int data)
    {
        Data = data;
    }

    public int Data { get; private set; }

    public IOtherDataType&lt;int&gt; Add(IOtherDataType&lt;int&gt; other)
    {
        return new IntType(Data + other.Data);
    }

    public void SetVal(int other)
    {
        Data = other;
    }
}
</code></pre>
<p>Which can be used in a similar way...</p>
<pre><code>IntType five = new IntType(5);
IOtherDataType&lt;int&gt; eleven = five.Add(new IntType(6));
</code></pre>
    </div>