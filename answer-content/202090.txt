<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to @cariehl's excellent comments, I'll add a few more:</p>

<h3>Const Correctness</h3>

<p>Member functions that only report the object's current state (without changing it) should be marked <code>const</code>:</p>

<pre><code>void printList() const;

unsigned short length() const;

bool isEmpty() const;
bool isSorted() const;

void reversePrint() const;
</code></pre>

<p>This allows you to invoke the member function via a pointer or reference to const, so you can pass a list by const reference and still use those members that don't modify it. They also assure that if you accidentally write code that attempts to modify the list in a member function that shouldn't do so, the compiler will catch it and report it as an error.</p>

<h3>Exception safety</h3>

<p>Likewise, if a function is supposed to never throw an exception, it's better to mark it as <code>noexcept</code> to inform both the compiler and the user of that fact.</p>

<pre><code>unsigned short length() const noexcept;

bool isEmpty() const noexcept;
bool isSorted() const noexcept;
</code></pre>

<p>This list isn't necessarily comprehensive--I just glanced through things, noted a few I was (pretty) sure should never throw, and listed them. There may easily be others that shouldn't throw either.</p>

<h3>Use Boolean Values Directly</h3>

<p>In your <code>isEmpty()</code> you have:</p>

<pre><code>bool List::isEmpty() {
    if (length() == 0) {
        return true;
    }
    else {
        return false;
    }
}
</code></pre>

<p>You could simplify this quite a bit, to become something like:</p>

<pre><code>bool isEmpty() const noexcept {
    return length() == 0;
}
</code></pre>

<h3>Operator Usage</h3>

<p>The C++ standard library generally attempts to use <code>operator&lt;</code> rather than <code>operator&gt;</code>, so generic containers place the minimum possible requirements on the types that can be stored in those containers. I'd advise following their lead on this when possible, so (for example) your <code>isSorted</code> would replace:</p>

<pre><code>    if (tmp-&gt;x &gt; tmp-&gt;next-&gt;x) {
        return false;
    }
</code></pre>

<p>...with:</p>

<pre><code>    if (tmp-next-&gt;x &lt; temp-&gt;x) {
        return false;
    }
</code></pre>

<h3>Retain Information</h3>

<p>Rather than computing the length when needed, I'd tend to just store the length of the list, and return it when needed--increment it when you add an item, decrement it when you remove one, and return it when needed.</p>
    </div>