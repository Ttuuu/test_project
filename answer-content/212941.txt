<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have several comments about styling:</p>

<ol>
<li><p>check the indentation and fix it. There are some different styles that can be observed but universally lines that are <em>inside</em> a function (or even more generally - a scope) would have one indentation level more than before.</p></li>
<li><p>Spacing - be consistent. In one line you have <code>checkbox.value = "value";</code> with spaces around the equals sign. The next line you have <code>var idStr="id:"+numericalID</code> - no spaces around the equals or the operator. I personally put spaces around each but that's personal preference. You can have spaces only around equals signs, or even only on the right side of equals signs or only around operators, etc. Whatever you pick - be consistent.</p></li>
<li><p>Semicolons at the end of the line. In JavaScript, they are not strictly required due to a feature called <a href="https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi">automatic semicolon insertion (ASI)</a>. So, a lot of times you can get away without putting them. Although occasionally, you may find your code doesn't behave as expected. Still, as long as you understand how ASI works, you should be fine. Just pick a style - with or without a semicolon and stick with it. I personally prefer putting them in because I find the ASI rules quite annoying to try and remember every time.</p></li>
<li><p>Opening curly brackets - they should be either at the same line as the statement they accompany or the next line. You're pretty consistent with having it on the same line aside from where the <code>else</code> shows up. </p></li>
<li><p>Super tiny issue - you don't have <code>linebreakID</code> declared properly. It's missing the <code>var</code> keyword, so the variable is now an implied global. I'm mentioning it here with the style issues because you've been consistent with having <code>var</code> statements, so it seems like a simple typo, rather than a different problem.</p></li>
</ol>

<hr>

<p>Styling is pretty important for readable and understandable code. You can employ a linter like ESLint or JSCS (JavaScript Code Style) where you can define the style you want (indentation using spaces/tabs, spaces around equals signs, etc) and then they will scan your code and report back any style violations. They even have an autofix option that takes care of all the style changes, so you don't have to, for example, manually go and fill in every missing semicolon in the file. Linters are a pretty useful tool.</p>

<hr>

<p>Other than styles, I'd say the function is quite long. It can be broken down into smaller ones for the sake of readability. This is subjective, I know, but having to scroll to read everything is usually too much. There is no duplicate code but you can still just do something like this:</p>

<pre><code>function createCheckbox() {
  var checkbox = document.createElement('input');
  checkbox.type = "checkbox";
  checkbox.name = "name";
  checkbox.value = "value";

  var idStr = "id:" + numericalID;
  checkbox.id = idStr;

  checkbox.addEventListener('change', function() {
    var idSplitArray = this.id.split(':');
    var labelStr = "label:" + idSplitArray[1];
    var labelTask = document.getElementById(labelStr);

    if (this.checked) {
      labelTask.style.setProperty("text-decoration", "line-through");
    } else {
      labelTask.style.setProperty("text-decoration", "none");
    }
  });

  return checkbox;
}
</code></pre>

<p>So you don't have all the boring details about setting up a checkbox around more important code. It's a judgement call how you'd split off the code, though - you might elect to have the event handler defined back in the <code>addNewTask</code> function or even split off into a separate function. Whatever it is, the point is to make the main function shorter by splitting off logical portions of the code. In effect, you get code comments - only instead of <code>//creating checkbox</code> you have <code>checkbox = createCheckbox()</code>. But the latter is also self-documenting and has less of a chance to drift away from the code and become an irrelevant and/or inaccurate comment.</p>

<hr>

<p>For actual logic improvements - right now, there is string manipulation to determine which HTML ID corresponds to which element ID by employing string splitting and conversely creating complex ID values to accommodate that. That <em>works</em> and it's honestly something even big name libraries out there do. Still, it's possible to do better - you can use <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes" rel="noreferrer"><code>data-*</code> attributes in HTML</a>. In short, you can have custom attributes attached to HTML elements. The custom attribute is prefixed with <code>data-</code> and you can define the rest of the name. So, you can add a <code>data-id="1"</code>, for example, to all elements that will operate on the element with ID <code>1</code>. That way, you don't need to do string manipulation to get the correct data out of it, you can directly reference the custom attribute.</p>

<hr>

<p>And that's most of my advice. I think there are other things, too but I don't consider them that important. I'm honestly quite pleased with this code and my main issue is really formatting inconsistency. I am especially pleased that you create the HTML elements programmatically via <code>document.createElement</code> followed by setting the attributes. That is a very good style and amazing to see in a beginner. I very often see even experienced JS developers opting to just do something like <code>parentElement.innerHTML = '&lt;input type="checkbox" id="id:"' + numericalID +'" /&gt;</code> which can be quite annoying to read and has some potentially disadvantages, some even potential security vulnerabilities.</p>

<p>Overall, I'd applaud this effort, especially from a beginner. </p>
    </div>