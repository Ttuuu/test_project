<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>int sumOfDigitsSquared(int n) {
    auto digits = std::to_string(n);
    int sum = 0;

    for (auto c : digits) {
        sum += (c - '0') * (c - '0'); // I corrected the = into +=
    }

    return sum;
}
</code></pre>

<p>Conversions come with a performance hit, especially when the conversion implies memory allocation and copy, as here with <code>std::to_string</code>. It would make perfect sense if you had some use for the <code>string</code>, but you don't, since you return another int. And the math behind it is really basic:</p>

<pre><code>constexpr int sum_of_squared_digits(int n) {
    int res = 0;
    while (n) {
        const int digit = n % 10;
        res += digit * digit;
        n /= 10;
    }
    return res;
}
</code></pre>

<p>I've marked it <code>constexpr</code>, only to hint that the whole algorithm could be performed at compile-time, but it wouldn't really be fair, so it won't.</p>

<pre><code>bool arrivesAt89(int n) {
    static auto cache = std::unordered_map&lt;int,bool&gt;();
</code></pre>

<p><code>unordered_map</code> might not be necessary in this case. A simple array would suffice, with <code>0</code> meaning unexplored, <code>1</code> ending with <code>1</code> and <code>89</code> ending with <code>89</code>: it's even faster and all the memory allocation is done upfront.</p>

<pre><code>    int m = n;
    while (m != 1) {
        if(cache.find(m) != cache.end()) {
            return cache.find(m)-&gt;second;
        }
        if (m == 89) {
            auto perms = permutations(m);
            for (auto p : perms) {
                cache.insert({p, true});
            }
            return true;
        }
        m = sumOfDigitsSquared(m);
</code></pre>

<p>Here is I think the main weakness of your algorithm: you only cache the result for the number <code>n</code> and its permutations; all intermediary values are ignored, although they belong on the same path as <code>n</code> and would populate the <code>map</code> much faster. </p>

<pre><code>    }

    auto perms = permutations(n);
    for (auto p : perms) {
        cache.insert({p, false});
    }
    return false;
}
</code></pre>

<p>Computing the permutations come with another heavy conversion, with memory allocation and copy (<code>std::to_string</code>) and a <code>std::vector</code> you won't use beyond feeding it to the <code>static std::unordered_map</code> inside your master function.</p>

<pre><code>std::vector&lt;int&gt; permutations(int n) {
    auto digits = std::to_string(n);
    std::vector&lt;int&gt; res;
    res.push_back(n);

    do {
        res.push_back(stoi(digits));
    } while (std::next_permutation(digits.begin(), digits.end()));
</code></pre>

<p>Besides, it won't give you every permutation: if you want to go through all permutations with <code>std::next_permutation</code>, you need to start with a sorted <code>std::string</code>. </p>

<pre><code>    return res;
}
</code></pre>

<p>Anyway, I don't think that permutations are the best way of testing the numbers equivalence: you don't need it if you keep track of intermediary values, because permutations will result in the same squared digits' sum.</p>

<p>Here what I'd find correctly optimized:</p>

<pre><code>auto precompute_results(int n) {
    std::vector&lt;int&gt; results(n, 0); 
    // a vector instead of a map, 
    // elements can be:
    // 0 = unexplored, 1 = ending in 1, 89 = ending in 89
    // n = on the same path as n
    for (int i = 1; i &lt; n; ++i) {
        auto cur = results[i] ? results[i] : i;
        while (true) {
            if (cur == 1 || cur == 89) break;
            if (cur &lt; n &amp;&amp; results[cur]) {
                cur = results[cur];
                continue; // we go down the path to either 1 or 89
            }
            if (cur &lt; n) results[cur] = i; // we memorize that cur in on the same path as i
            cur = sum_of_squared_digits(cur);
        }
        results[i] = cur;
    }
    return results;
}
</code></pre>
    </div>