<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><code>eEmbosserType</code></h3>

<ul>
<li>Don't use Hungarian Notation in C#. A better name would be <code>EmbosserType</code> or <code>EmbosserKind</code>.</li>
</ul>

<h3><code>IEmbosser</code></h3>

<ul>
<li>This is a public interface, so I would expect that consumers could make their own implementations. If this is allowed, consumers are hampered by <code>EmbosserType</code> because this enum is under your control. Consider using an external key like <code>string</code> if more types are allowed.</li>
<li>Next up are methods <code>CreateFileForEmbosser</code>, <code>PrepareDataForEmboser</code> and a mutable property <code>Data</code>. These are 3 separate concerns: IO, data lookup and in-memory data storage. This might be a bit too much for a single interface to handle. I feel these concerns are sufficiently independant to warrant separate interfaces to allow better <em>reusability</em>, <em>granularity</em> and <em>modularity</em>. Consider splitting into interfaces <code>IDataRepository</code> (db or any other data source access), <code>IDataProvider</code> (store the data in-memory with a read-only getter) and <code>IDataWriter</code> (write data to a stream).</li>
<li>I have a few problems with method <code>PrepareDataForEmboser</code> since it's void and takes no parameters. Implementations only have the name of the method to decide what to do, and what is expected of them to do. From your implementatons I reverse engineered (should have documentation instead) that this method expects <code>Data</code> to be set. An additional problem here is that this property is mutable, allowing consumers to bypass the method and store <code>Data</code> directly, rendering your method unguarded and the design insufficiently encapsulated. Furthermore, implementations have to fetch the data <code>GetCardData</code> and store it internally, which is also mixing two different concerns.</li>
<li>Method <code>CreateFileForEmbosser</code> is very specific that it needs to write to the system. I would change the specification to allow to write to a <code>Stream</code> instead. This way, consumers are free to provide the type of stream to write to, a file, a string builder, or any other stream.</li>
</ul>

<h3><code>class *Embosser</code></h3>

<ul>
<li>I have questions about this design where each concrete instance fetches base class <code>EmbosserData</code> data using <code>GetCardData</code>, while iterating over concrete (for instance <code>DataCard</code>) data. I would have expected a base class to provide method <code>GetCardData</code> and perhaps also a generic type parameter for the return type.</li>
</ul>

<h3><code>EmbosserCreator</code></h3>

<ul>
<li>In the initial revision of your question, you called this an <em>Abstract Factory Pattern</em>. Note, this is just a <em>Factory Pattern</em>. The former pattern is a factory for factories.</li>
<li>Exception information might be a bit too cryptic for consumers and end-users: <code>throw new Exception("");</code>.</li>
</ul>

<hr>

<h3>Conclusion</h3>

<p>In general, I'm not sure why you need a factory for these different embossers, since each of them work with different data classes (probably also different data sources) and different data serialisation. Your question does not show us how you would use this pattern.</p>
    </div>