<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some thoughts:</p>

<ul>
<li>Make <code>formatter</code> a static <em>stored</em> property (which are guaranteed to be lazily initialized only once). This  allows to get rid of the backing property <code>_formatter</code>.</li>
<li>For more clarity, move the reinitialization code to a separate method, as in your Objective-C version.</li>
<li>Do not cache the other static properties. For example, returning <code>formatter.shortStandaloneMonthSymbols</code> is only one indirection more than returning <code>_shortMonthNames</code>, but is simpler and allows to get rid of the remaining backing properties. </li>
<li>A minor point: The notification closure does not access the <code>(notification)</code> argument, which can therefore be replaced by <code>_</code>.</li>
</ul>

<p>Putting it together, we have the following implementation:</p>

<pre><code>public struct DateInfo {

    private static func reinitialize() {
        formatter = DateFormatter()
    }

    private static var formatter: DateFormatter = {
        // This closure is executed exactly once, on the first accesss of the `formatter` property.
        NotificationCenter.default.addObserver(forName: NSLocale.currentLocaleDidChangeNotification, object: nil, queue: nil) { _ in
            reinitialize()
        }
        return DateFormatter()
    }()

    public static var shortMonthNames: [String] {
        return formatter.shortStandaloneMonthSymbols
    }

    public static var longMonthNames: [String] {
        return formatter.standaloneMonthSymbols
    }

    public static var numberOfMonths: Int {
        return shortMonthNames.count
    }
}
</code></pre>

<hr>

<p>Another option would be to use the typical <a href="https://developer.apple.com/documentation/swift/cocoa_design_patterns/managing_a_shared_resource_using_a_singleton" rel="nofollow noreferrer">Singleton pattern</a>:</p>

<pre><code>public class DateInfo {
    static let shared = DateInfo()

    private var formatter: DateFormatter

    private init() {
        formatter = DateFormatter()
        NotificationCenter.default.addObserver(forName: NSLocale.currentLocaleDidChangeNotification, object: nil, queue: nil) { _ in
            self.formatter = DateFormatter()
        }
    }

    public var shortMonthNames: [String] {
        return formatter.shortStandaloneMonthSymbols
    }

    public var longMonthNames: [String] {
        return formatter.standaloneMonthSymbols
    }

    public var numberOfMonths: Int {
        return shortMonthNames.count
    }
}
</code></pre>

<p>The advantage is that all initialization is clearly done in the init method. A small disadvantage might be that more typing is needed to access the properties (e.g. <code>DateInfo.shared.shortMonthNames</code>).</p>
    </div>