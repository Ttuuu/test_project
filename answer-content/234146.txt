<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>__str__</code> is actually <code>O(n^2)</code> because you do repeated string concatenations. In another language you would use a StringBuilder but in Python it's common to collect the results in a list and concatenate them all at the end. Here's how you can do that:</p>

<pre class="lang-py prettyprint-override"><code>    def __str__(self):
        ret = []
        for idx, val in enumerate(self.array):
            if idx == self.mid:
                ret.append("({})".format(str(val)))
            else:
                ret.append(str(val))

        return "[" + " ".join(ret) + "]"
</code></pre>

<p><code>join</code> will first check how much space is needed, allocate it once and then copy all the strings over, instead of reallocating blocks (potentially) every time there's a new concatenation</p>

<hr>

<p>The pythonic way to check if a collection is non-empty is with 
<code>if not self.array:</code>. It's also common to not use parentheses around the if condition.</p>

<hr>

<p>Also, I would recommend raising an exception instead of returning <code>None</code> in cases where the deque is empty. Otherwise, your caller may not know that they have to deal with <code>None</code>, and the caller also can't distinguish between popping off a <code>None</code> value and the deque being empty.<br>
To do this, I would simply remove the length check and allow the IndexError to be thrown by <code>self.array</code>. If you'd like, you could also catch that Exception and throw your own Exception instead, like <code>QueueEmptyError</code> (for example).</p>

<hr>

<p>I'll add that if you need a deque for your use cases, you should probably use <code>collections.deque</code> because it's well-optimized for common deque uses. It's implemented with a linkedlist of blocks to keep cache locality good.</p>

<hr>

<p>Finally, could you describe how your data structure works? It looks like both <code>push</code> methods and <code>pop_right</code> are <code>O(n)</code> because they operate on the middle of the list. Were you trying to implement a <a href="https://www.geeksforgeeks.org/circular-queue-set-1-introduction-array-implementation/" rel="nofollow noreferrer">circular queue?</a> In that case you should preallocate a list of a certain size (<code>self.array = [None for _ in range(10)]</code>) and then keep track of the index of both the first and last element. Then, all methods are <code>O(1)</code> unless you need to resize. This will make it amortized constant time, as long as you resize infrequently enough (i.e. double the array when you reach capacity).</p>
    </div>