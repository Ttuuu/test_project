<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template &lt;typename T,
          typename = std::enable_if_t&lt;std::is_floating_point&lt;T&gt;::value&gt;&gt;
T lerp(T a, T b, T t) noexcept;
</code></pre>

<p>Looks fine.  I'd prefer to see <code>static_assert</code> than <code>enable_if</code> since there's no other overloads (and if there are I'd rather fine out with a compilation error).</p>

<pre><code>T lerp(T a, T b, T t) noexcept {
  return a + t * (b - a);
}
</code></pre>

<p>How about <code>std::fma</code>?</p>

<p>Note that GCC and Clang both do this differently...  They do <code>b * t + a * (1-t)</code> and have special cases for <code>t</code> at 0 and near 1.  Maybe it's better to just copy their code exactly so the compiler version doesn't change the output?</p>

<hr>

<pre><code>template &lt;typename T,
          typename = std::enable_if_t&lt;std::is_floating_point&lt;T&gt;::value&gt;&gt;
std::vector&lt;T&gt; interp(const std::vector&lt;T&gt;&amp; xp, const std::vector&lt;T&gt;&amp; yp,
                      const std::vector&lt;T&gt;&amp; x);
</code></pre>

<p>There's nothing in this function that directly needs T to be a floating point type.  I think it's better to remove the <code>enable_if</code> and let the compiler show a traceback with the "real" reason T needs to be an FP.</p>

<p>This function takes vectors and returns a new vector.  That is a fine and very common pattern, but it's not optimally efficient.  If this is a hot function, you could return an iterator/some sort of range that computes the next result when it is incremented.  Boost example of this kind of thing: <a href="https://www.boost.org/doc/libs/1_66_0/libs/iterator/doc/html/iterator/specialized/transform.html" rel="nofollow noreferrer">https://www.boost.org/doc/libs/1_66_0/libs/iterator/doc/html/iterator/specialized/transform.html</a>.</p>

<p>If you want to generalize this to other iterables, then don't take <code>std::vector</code>... instead take a templated <code>T const&amp;</code> and same for <code>ListLerp</code>.</p>

<hr>

<pre><code>[[nodiscard]] T interp(const T x) noexcept;
</code></pre>

<p>Suppose I want to discard the result?  Maybe I only want to store every nth item?  <code>interp</code> is not a const member function (one might want the mutation to happen...) and T is not an "undiscardable" type.  I don't see why this needs to be here.</p>

<hr>

<p>I don't think you've separated your interests very well between <code>ListLerp::interp</code> and the free function <code>interp</code>.</p>

<p>I think there are two good options:</p>

<ul>
<li><p>make <code>ListLerp::interp</code> a const member function and get rid of <code>ListLerp::b</code>.  Then the free function <code>interp</code> just does a "pure" transformation of a single list.</p></li>
<li><p>iterate all three lists in a single function (my preference).</p></li>
</ul>

<p>E.g.</p>

<pre><code>auto interp(vec const&amp; a, vec const&amp; b, vec const&amp; t) {
    for idx = each index in a, b {
        ... Possibly emit a value corresponding to t ...
    }
}
</code></pre>

<p>This is very basic pseudo code, but the key idea is you iterate everything in one go rather than doing some iteration in a free function and some iteration in a class that holds potentially dangerous references.</p>

<hr>

<pre><code>const std::vector&lt;T&gt;&amp; xp;
</code></pre>

<p>This (and the lines like it) is moderately dangerous since you need to ensure the vector that is passed in outlives the class.  </p>

<p>E.g. you cannot do this:</p>

<pre><code>auto fn() {
     vector&lt;double&gt; v;
     ListLerp ll(v); // take reference to local variable v
     return ll; // v goes out of scope; ll has dangling reference to dead v
}
</code></pre>

<p>Often times the best option is to take the <code>const&amp;</code> and be careful about how you use it, but in this case I think it's easy enough to compute the full result in a function, not expose a class that can hold a reference to a ctor argument, and make it impossible to end up with a dangling reference.</p>

<hr>

<blockquote>
  <p>It assumes everything is sorted before hand - x and f(x) are the same length.</p>
</blockquote>

<p>How about <code>assert</code>ing this?</p>

<hr>

<pre><code>// find b position
while (x &gt; *b) b++;
</code></pre>

<p>If your input is sorted, this could be a binary search.  May or may not be better.</p>

<hr>

<p>I think your calculation at the end would be simpler if you use indices rather than iterators.  Many of the lines are basically "find the iterator in A that has the same index as this iterator in B" ... easier to say "A[i]"</p>
    </div>