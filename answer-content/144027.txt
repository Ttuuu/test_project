<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok so this is very cool code. I learned a lot looking at it myself. However, there is room for improvement. (When isn't there?) I wrote down the comments below while looking though your code and refactoring it. You can consider it my thought process in a sense.</p>

<h1>Naming things</h1>

<p>Let's start with the obvious: naming. .NET convention is to use <code>PascalCase</code> for classes, methods, and propetries; and <code>camelCase</code> for variables. The most obvious culprit is your class <code>pixel</code>, which should be named <code>Pixel</code>. It sounds like a trivial thing but it is really important when reading code.</p>

<p>Also, use English !! It makes programming easier. Quickly looking at your code I have no idea what each variable does because it is in Dutch (apparently).</p>

<p>Your new <code>Pixel</code> class then should look something like this:</p>

<pre><code>class Pixel
{
    public Pixel (int xPos, int yPos, ConsoleColor color)
    {
        XPos = xPos;
        YPos = yPos;
        ScreenColor = color;
    }
    public int XPos { get; set; }
    public int YPos { get; set; }
    public ConsoleColor ScreenColor { get; set; }
}
</code></pre>

<p>Note : I added a constructor, too. It makes creating a new <code>Pixel</code> cleaner. I also feel the class would be better as a <code>struct</code>, but let's not go there.</p>

<p>Your busy (too busy, but I am coming to that) list of declarations in the beginning becomes something like this:</p>

<pre><code>Console.WindowHeight = 16;
Console.WindowWidth = 32;

var screenWidth = Console.WindowWidth;
var screenHeight = Console.WindowHeight;

var rand = new Random ();

var score = 5;
var gameover = 0;

var head = new Pixel (screenWidth / 2, screenHeight / 2, ConsoleColor.Red);

var xPosBody = new List&lt;int&gt; ();
var yPosBody = new List&lt;int&gt; ();

var xPosBerry = rand.Next (0, screenWidth);
var yPosBerry = rand.Next (0, screenHeight);

var time = DateTime.Now;
var time2 = DateTime.Now;

var movement = "RIGHT";
var buttonPressed = "no";
</code></pre>

<p>You'll notice a few things (in addition to Dutch to English translation): I organized it so I grouped the related variables together. And I used <code>var</code> instead of using the full class name. The latter is a stylistic issue, but <code>var</code> is more readable, imo.</p>

<h1>using static</h1>

<p>You're using the <code>Console</code> class <em>a lot</em>. With C# 6, you can make life easier for yourself and write <code>using static System.Console;</code> at the top of your file. And then you don't have to suffix every call to the <code>Console</code> class with the class name. Less typing. Yay.</p>

<p>What this leads to, almost directly, is that you don't need your <code>screenWidth</code> and <code>screenHeight</code> variables any more. Personally, I think the less variables flying around the better. YMMV. I will remove them from subsequent code in this review.</p>

<h1>Using your classes properly</h1>

<p>Here is what I do not understand. Why did you create the <code>Pixel</code> class, then you refer to the body positions and the berry position as lists of numbers ? Why not use the class you already created?</p>

<p>I still have not looked at the rest of your code by this point but I bet you can make it easier on yourself if you used the class you created properly. Read the rest of my review with that in mind.</p>

<h1>Drawing the border</h1>

<p>As other answerers kindly said, your loop is too long. Split it into useful functions so you can separate it and read it better. For example, this portion: </p>

<pre><code>for (int i = 0; i &lt; WindowWidth; i++)
{
    Console.SetCursorPosition (i, 0);
    Console.Write ("■");
}

for (int i = 0; i &lt; WindowWidth; i++)
{
    Console.SetCursorPosition (i, WindowHeight - 1);
    Console.Write ("■");
}

for (int i = 0; i &lt; WindowHeight; i++)
{
    Console.SetCursorPosition (0, i);
    Console.Write ("■");
}
for (int i = 0; i &lt; WindowHeight; i++)
{
    Console.SetCursorPosition (WindowWidth - 1, i);
    Console.Write ("■");
}
</code></pre>

<p>Is simply drawing the border. Right? Select it all, click <code>Ctrl + .</code>, then choose Extract method. You can call it <code>DrawBorder()</code>. Note you dont need to use <code>Console</code> here at all, too, due to <code>using static</code>.</p>

<p>Since you're also using the same conditions for some of the loops, why not combine them? It becomes this:</p>

<pre><code>static void DrawBorder ()
{
    for (int i = 0; i &lt; WindowWidth; i++)
    {
        SetCursorPosition (i, 0);
        Write ("■");

        SetCursorPosition (i, WindowHeight - 1);
        Write ("■");
    }

    for (int i = 0; i &lt; WindowHeight; i++)
    {
        SetCursorPosition (0, i);
        Write ("■");

        SetCursorPosition (WindowWidth - 1, i);
        Write ("■");
    }
}
</code></pre>

<h1>Type safety</h1>

<h2>gameover and buttonPressed</h2>

<p>You're using <code>gameover</code> as a yes/no value. Don't use an <code>int</code> for that. Use a <code>bool</code>. Same thing with <code>buttonPressed</code>.</p>

<h2>Direction</h2>

<p>You're using <code>string</code> values to indicate direction. These values cannot be other than four particular cases. This is the perfect use case from an <code>enum</code> type.</p>

<pre><code>enum Direction
{
    Up,
    Down,
    Right,
    Left
}
</code></pre>

<p>You can then use that for your <code>movement</code> variable. It becomes :</p>

<pre><code>var movement = Direction.Right;
</code></pre>

<p>C# gives you type safety. Use it. You don't want to accidentally put <code>"NODIRECTION"</code> as a viable direction.</p>

<h1>Refactoring</h1>

<p>I noticed you use this exact pattern of code a lot :</p>

<pre><code>SetCursorPosition (head.XPos, head.YPos);
ForegroundColor = head.ScreenColor;
Write ("■");
</code></pre>

<p>When you notice that you're repeating a piece of code more than twice, you know you should create a method. Let's call it <code>DrawPixel(Pixel pixel)</code> . It takes a pixel as input and draws it.</p>

<pre><code>static void DrawPixel (Pixel pixel)
{
    SetCursorPosition (pixel.XPos, pixel.YPos);
    ForegroundColor = pixel.ScreenColor;
    Write ("■");
}
</code></pre>

<p>Now you can alter the declaration of the berry from:</p>

<pre><code>var xPosBerry = rand.Next (0, WindowWidth);
var yPosBerry = rand.Next (0, WindowHeight);
</code></pre>

<p>To (after correcting the numbers to avoid the berry ending up in the walls):</p>

<pre><code>var berry = new Pixel (rand.Next (1, WindowWidth - 2), rand.Next (1, WindowHeight - 2), ConsoleColor.Cyan);
</code></pre>

<p>This allows me to change a later part of the code to </p>

<pre><code>if (berry.XPos == head.XPos &amp;&amp; berry.YPos == head.YPos)
{
    score++;
    berry = new Pixel (rand.Next (1, WindowWidth - 2), rand.Next (1, WindowHeight - 2), ConsoleColor.Cyan);
}
</code></pre>

<p>and to draw the berry later all you have to do is :</p>

<pre><code>DrawPixel (berry);
</code></pre>

<p>I tested the code at this point and it seems to be still working fine with none of the functionality affected.</p>

<h2>Creating the body</h2>

<p>After what we did so far, you can define the body as <code>List&lt;Pixel&gt;</code>. You can define it as: </p>

<pre><code> var body = new List&lt;Pixel&gt; ();
</code></pre>

<p>Draw it like:</p>

<pre><code>for (int i = 0; i &lt; body.Count (); i++)
{
    DrawPixel (body[i]);

    if (body[i].XPos == head.XPos &amp;&amp; body[i].YPos == head.YPos)
    {
        gameover = true;
    }
}
</code></pre>

<p>One cool thing I found here (thanks to some refactoring tools I have installed), is that you can replace the <code>if</code> statement with an assignment statement (using <code>|=</code>) that takes less vertical space. It adds up to the same thing, due to how the OR operator works.</p>

<pre><code>for (int i = 0; i &lt; body.Count (); i++)
{
    DrawPixel (body[i]);
    gameover |= (body[i].XPos == head.XPos &amp;&amp; body[i].YPos == head.YPos);
}
</code></pre>

<p>Back to the body, you can add a Pixel to it like this:</p>

<pre><code>body.Add (new Pixel (head.XPos, head.YPos, ConsoleColor.Green));
</code></pre>

<p>Your way of making sure the body stays within the length, while growing with more food, is ... odd .. tbh. It took me a while to wrap my head around it. You're using the <code>score</code> variable for control. I felt it was clever enough so I left it as is.</p>

<h1>Small Things</h1>

<p>I am sure there are more possible improvements, but this is what I had the time to do currently.</p>

<ul>
<li>added a little <code>Console.ReadKey();</code> in the end so the Console app does not quit immediately.</li>
<li>rephrased the inner <code>while</code> loop with a condition that is more immediately readable.</li>
<li>put the content of the inner <code>while</code> loop into a separate method for readability. </li>
<li>removed buttonPressed as it is not needed, thanks to <code>else if</code>.</li>
<li>removed usage of <code>System.Linq</code>. The list type has its own running tally without calling a method.</li>
<li>changed some variables to more descriptive names</li>
<li>corrected your score display</li>
<li>removed annoying cursor next to the berry</li>
<li>used <code>Stopwatch</code> instead of crude <code>DateTime.Now</code></li>
</ul>

<h1>Final code</h1>

<p>without further ado:</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Diagnostics;
using static System.Console;

namespace Snake
{
    class Program
    {
        static void Main ()
        {
            WindowHeight = 16;
            WindowWidth = 32;

            var rand = new Random ();

            var score = 5;

            var head = new Pixel (WindowWidth / 2, WindowHeight / 2, ConsoleColor.Red);
            var berry = new Pixel (rand.Next (1, WindowWidth - 2), rand.Next (1, WindowHeight - 2),     ConsoleColor.Cyan);

            var body = new List&lt;Pixel&gt; ();

            var currentMovement = Direction.Right;

            var gameover = false;

            while (true)
            {
                Clear ();

                gameover |= (head.XPos == WindowWidth - 1 || head.XPos == 0 || head.YPos ==     WindowHeight - 1 || head.YPos == 0);

                DrawBorder ();

                if (berry.XPos == head.XPos &amp;&amp; berry.YPos == head.YPos)
                {
                    score++;
                    berry = new Pixel (rand.Next (1, WindowWidth - 2), rand.Next (1, WindowHeight -     2), ConsoleColor.Cyan);
                }

                for (int i = 0; i &lt; body.Count; i++)
                {
                    DrawPixel (body[i]);
                    gameover |= (body[i].XPos == head.XPos &amp;&amp; body[i].YPos == head.YPos);
                }

                if (gameover)
                {
                    break;
                }

                DrawPixel (head);
                DrawPixel (berry);

                var sw = Stopwatch.StartNew();
                while (sw.ElapsedMilliseconds &lt;= 500)
                {
                    currentMovement = ReadMovement (currentMovement);
                }

                body.Add (new Pixel (head.XPos, head.YPos, ConsoleColor.Green));

                switch (currentMovement)
                {
                    case Direction.Up:
                        head.YPos--;
                        break;
                    case Direction.Down:
                        head.YPos++;
                        break;
                    case Direction.Left:
                        head.XPos--;
                        break;
                    case Direction.Right:
                        head.XPos++;
                        break;
                }

                if (body.Count &gt; score)
                {
                    body.RemoveAt (0);
                }
            }
            SetCursorPosition (WindowWidth / 5, WindowHeight / 2);
            WriteLine ($"Game over, Score: {score - 5}");
            SetCursorPosition (WindowWidth / 5, WindowHeight / 2 + 1);
            ReadKey ();
        }

        static Direction ReadMovement (Direction movement)
        {
            if (KeyAvailable)
            {
                var key = ReadKey (true).Key;

                if (key == ConsoleKey.UpArrow &amp;&amp; movement != Direction.Down)
                {
                    movement = Direction.Up;
                }
                else if (key == ConsoleKey.DownArrow &amp;&amp; movement != Direction.Up)
                {
                    movement = Direction.Down;
                }
                else if (key == ConsoleKey.LeftArrow &amp;&amp; movement != Direction.Right)
                {
                    movement = Direction.Left;
                }
                else if (key == ConsoleKey.RightArrow &amp;&amp; movement != Direction.Left)
                {
                    movement = Direction.Right;
                }
            }

            return movement;
        }

        static void DrawPixel (Pixel pixel)
        {
            SetCursorPosition (pixel.XPos, pixel.YPos);
            ForegroundColor = pixel.ScreenColor;
            Write ("■");
            SetCursorPosition (0, 0);
        }

        static void DrawBorder ()
        {
            for (int i = 0; i &lt; WindowWidth; i++)
            {
                SetCursorPosition (i, 0);
                Write ("■");

                SetCursorPosition (i, WindowHeight - 1);
                Write ("■");
            }

            for (int i = 0; i &lt; WindowHeight; i++)
            {
                SetCursorPosition (0, i);
                Write ("■");

                SetCursorPosition (WindowWidth - 1, i);
                Write ("■");
            }
        }

        struct Pixel
        {
            public Pixel (int xPos, int yPos, ConsoleColor color)
            {
                XPos = xPos;
                YPos = yPos;
                ScreenColor = color;
            }
            public int XPos { get; set; }
            public int YPos { get; set; }
            public ConsoleColor ScreenColor { get; set; }
        }

        enum Direction
        {
            Up,
            Down,
            Right,
            Left
        }
    }
}
</code></pre>

<p>Please let me know if there is anything unclear in the comments. My version is far from perfect and I am sure I made some pitfalls myself.</p>
    </div>