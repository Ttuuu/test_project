<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The code</h2>

<p>The formatting has a number of PEP8 violations.</p>

<hr>

<p>It's not obvious from the name what <code>candidate_range</code> does. It seems to be a wheel for the sieve. Normally that would be inlined in the sieve; even if you prefer not to do that, you could place the function inside <code>sieve</code> to make its scope clear.</p>

<p>I don't find <code>sieve_list</code> a very helpful name. In general for sieving I prefer <code>is_composite</code>, inverting the booleans from the way you've done it. Similarly for <code>each_number</code>: it reads well on the first line which uses it, but very oddly on the others.</p>

<hr>

<blockquote>
<pre><code>goodprimes = []
for prime in primes:
    if prime%(4)==1:
        goodprimes.append(prime)
</code></pre>
</blockquote>

<p>It's more Pythonic to use comprehensions:</p>

<pre><code>goodprimes = [p for p in primes if p % 4 == 1]
</code></pre>

<hr>

<blockquote>
<pre><code>#get a number that works
</code></pre>
</blockquote>

<p>What does this mean? It looks more like noise than a useful comment to me.</p>

<hr>

<blockquote>
<pre><code>for L in range(1, len(goodprimes)+1):
    sumf=0
    for subset in itertools.combinations(goodprimes, L):
</code></pre>
</blockquote>

<p>I don't know why <code>itertools</code> doesn't have a function to give all subsets, but it seems like the kind of thing which is worth pulling out as a separate function, both for reuse and for readability.</p>

<hr>

<blockquote>
<pre><code>        max=2**L/2
</code></pre>
</blockquote>

<p>What does this do?</p>

<hr>

<blockquote>
<pre><code>        n=1
        for x in subset:
            n*=x
</code></pre>
</blockquote>

<p>Consider as an alternative</p>

<pre><code>from functools import reduce
import operator

    n = reduce(operator.mul, subset, 1)
</code></pre>

<hr>

<blockquote>
<pre><code>        for b in range(math.floor(math.sqrt(n/2)), math.floor(math.sqrt(n)+1)):
            a=math.sqrt(n-b*b)
            if a.is_integer() and b&gt;=a:
</code></pre>
</blockquote>

<p>Why <code>floor</code>s rather than <code>ceil</code>s?</p>

<p>Are you certain that <code>math.sqrt</code> on an integer is never out by 1ULP?</p>

<p>Why is <code>b&gt;=a</code> necessary? (Obviously <code>b==a</code> is impossible, and isn't the point of the <code>range</code> chosen to force <code>b &gt; a</code>?)</p>

<hr>

<blockquote>
<pre><code>                sum.append(a)
</code></pre>
</blockquote>

<p>Is this for debugging? I can't see why you wouldn't just add <code>a</code> to a <code>total</code>.</p>

<p>NB <code>sum</code> is aliasing the builtin function for adding up the values in a list.</p>

<hr>

<blockquote>
<pre><code>                    #q+=1
</code></pre>
</blockquote>

<p>??? I can't see any other mention of <code>q</code>.</p>

<h2>The algorithm</h2>

<p>There are a few Project Euler problems which fall to brute force, but in general you need to find the right mathematical insight. Given the way this question is structured, you probably need to figure out how to find <span class="math-container">\$S(n)\$</span> given the prime factorisation of <span class="math-container">\$n\$</span>.</p>
    </div>