<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre class="lang-rb prettyprint-override"><code>defmodule Test do
  def contains?(term, elem) do
    elem in term
  end

  def test do
    elems = [1,2,3]
    terms = [[1,2], [2,3]]
    
    for e &lt;- elems, reduce: %{} do
      acc -&gt;
        key = Enum.find(terms, &amp;contains?(&amp;1, e))
        Map.update(acc, key, [e], &amp;[e|&amp;1])
    end  
    #=&gt; %{[1, 2] =&gt; [2, 1], [2, 3] =&gt; [3]}
  end
end
</code></pre>
<p>Found a simple and elegant solution using a reduce comprehension.<br>
Here, we iterate over each <code>elem</code> in <code>elems</code>, find the first <code>term</code> which contains it, then update our map with either <code>term =&gt; [elem]</code> or <code>term =&gt; [elem|previous_elems]</code> depending on if that key exists in the map yet.</p>
<hr>
<p>Side note:<br>
If I needed the elems in the same as order they were originally I could use <code>&amp; &amp;1 ++ [e]</code> instead of <code>&amp;[e|&amp;1]</code>, but as I don't have that requirement it is more efficient to prepend the list.</p>
    </div>