<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to use object-oriented javascript for this calculator, I would prefer the <a href="https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript" rel="nofollow noreferrer"><em>class syntax</em></a> over the <em>prototype syntax</em>.</p>

<p>This prototype approach ..</p>

<blockquote>
<pre><code>function Calculate(num1, num2, op) {
      this.num1 = num1;
      this.num2 = num2;
      this.op = op;
    } 

    Calculate.prototype.result = function() {
       // ..
    }
</code></pre>
</blockquote>

<p>.. can be replaced by (<a href="https://jsfiddle.net/079axbj8/" rel="nofollow noreferrer">Fiddle</a>):</p>

<pre><code>class BinaryExpression {
    constructor(a, b, op) {
        this.a = a;
        this.b = b;
        this.op = op;
    }
    evaluate() {
        switch (this.op) {
          case 'add':
            return this.a + this.b;
          case 'sub':
            return this.a - this.b;
          case 'mul':
            return this.a * this.b;
          case 'div':
            return this.a / this.b;
          default:
            return 'Error! No operation selected.';
        }
    }
}
</code></pre>

<h3>Misc</h3>

<ul>
<li>Most math expression compilers would implement a switch for the specific binary operators, but you could take it a step further and sub-class each binary operation.</li>
<li>Rather than returning a default message when the operator is not known, you could throw an exception and let the consumer handle it. </li>
</ul>
    </div>