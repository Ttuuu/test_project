<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll re-hash some of what JaredT already said, but there will be some distinct insights. There's <em>a lot</em> to unpack here, so this answer is going to be <em>long</em>.</p>

<h1>General formatting and conventions</h1>

<p>As JaredT mentioned, your formatting and variable names are all over the place.<br>
These aren't improvements that affect the actual execution of your code, but fixing these will help other people (including yourself, after you forget exactly what you wrote) understand and maintain your code in the future.</p>

<ul>
<li>non-meaningful variable names like <code>g</code>, <code>rc</code>, <code>qu</code> should be replaced by more meaningful names like <code>allQueuesList</code>, <code>targetRecordTypesList</code>, and <code>currentQueue</code>.

<ul>
<li>Naming things is one of <a href="https://martinfowler.com/bliki/TwoHardThings.html" rel="nofollow noreferrer">the two hard problems in computer science</a> (the others being cache invalidation, and off-by-one errors). It's one of those skills that takes time to develop, because there's a balance between being too vague, and being tedious to type over and over</li>
</ul></li>
<li>Choose an indentation style, and stick with it.

<ul>
<li>Without getting into the spaces/tabs holy war, it doesn't really matter what you use, or how many spaces you use for indentation. What matters is that you consistently use the same style across your code (and the same style across the rest of your team, if applicable)</li>
<li>The default recommendation is 4 spaces, or one tab, every time you enter another block</li>
</ul></li>
<li>Choose a class/method/variable naming style, and stick with it

<ul>
<li>Personally, I use <code>TitleCaseNames</code> for classes and trigger names, and <code>camelCase</code> for method and variable names</li>
</ul></li>
<li>Choose a bracketing style, and stick with it

<ul>
<li>This is related to indentation style. Basically, choose whether opening and closing curly braces are on the same line or their own lines, and whether the braces are on the same indentation level as the code that is starting the block, or on the same indentation level as the code inside the block</li>
<li>My preference is for opening braces on same line, closing braces on their own line (with any <code>else</code> or <code>else if</code> on the same line as the closing brace) at the same indentation level as the <code>if</code>, <code>for</code>, etc...</li>
</ul></li>
<li>Make spacing between operators consistent

<ul>
<li>I find it helps to have a single space between all operators and their operands (e.g. <code>myVariable = value;</code> instead of <code>myVariable=value;</code>)</li>
</ul></li>
</ul>

<p>Those guidelines seem to be the common ones over on Salesforce StackExchange (where I also contribute).</p>

<h1>What you did correctly</h1>

<ul>
<li>All of your SOQL queries and DML are outside of loops

<ul>
<li>This is a common issue for people new to Apex, you did well to avoid this pitfall</li>
</ul></li>
</ul>

<h1>What can be improved</h1>

<p>Not all of these recommendations will make it into the final product. I'll be skimping on some of the explanations because 1) They won't be used in the final product, and 2) because this answer is already the length of a novella.</p>

<ul>
<li>Remove unused variables. Your <code>List&lt;Id&gt; caseId = new List&lt;Id&gt;();</code> is not used anywhere in your trigger</li>
<li><p>You're calling <code>Schema.SObjectType.case.getRecordTypeInfosByName()</code> multiple times. This isn't a big issue, but if you're going to be using the same thing more than once, it generally makes sense to create a variable for it. The following</p>

<pre><code>//Get the Ids of the different Queues
Id MarkeRecoTyId = Schema.SObjectType.case.getRecordTypeInfosByName().get('Marketing').getRecordTypeId();
Id GTGrLRecoTyId = Schema.SObjectType.case.getRecordTypeInfosByName().get('G&amp;T Group Leads').getRecordTypeId();
Id CCSCRecoTyId = Schema.SObjectType.case.getRecordTypeInfosByName().get('CCSC').getRecordTypeId();
Id EcomRecoTyId = Schema.SObjectType.case.getRecordTypeInfosByName().get('E-Commerce').getRecordTypeId();
</code></pre>

<p>could be replaced with</p>

<pre><code>// getRecordTypeInfosByName returns a Map&lt;String, System.RecordTypeInfo&gt;
Map&lt;String, System.RecordTypeInfo&gt; caseRecordTypes = Schema.SObjectType.Case.getRecordTypeInfosByName();

Id MarkeRecoTyId = caseRecordTypes.get('Marketing').getRecordTypeId();
Id GTGrLRecoTyId = caseRecordTypes.get('G&amp;T Group Leads').getRecordTypeId();
Id CCSCRecoTyId = caseRecordTypes.get('CCSC').getRecordTypeId();
Id EcomRecoTyId = caseRecordTypes.get('E-Commerce').getRecordTypeId();
</code></pre></li>
<li><p>Your first loop, over <code>trigger.new</code>, likely doesn't accomplish what you think it does.</p>

<pre><code>// Loop over trigger.new
for (Case c :trigger.new)
{
   // and overwrite oldC on each iteration
   oldC = trigger.oldMap.get(c.Id);
}

// This query only ends up returning one recordType record, for whatever the 
//   last record's recordTypeId was
rc = [Select ID, Name From RecordType Where sObjectType = 'case'  and id=:oldc.RecordTypeId limit 1 ];
</code></pre></li>
<li><p>Your query <code>List&lt;Group&gt; gc = [SELECT Id, Name FROM Group WHERE Id =:Trigger.new[0].ownerid and Type = 'Queue'];</code> is only considering the owner of the first record that is being processed by your trigger. This is usually a red flag that your trigger will not behave properly when working on more than one record</p></li>
<li>Your loop over your <code>g</code> variable (your <code>List&lt;Group&gt;</code> for queues) is unnecessary. The only thing that this loop is accomplishing is filtering the results of your query a few lines above. This would be more appropriately moved into the <code>WHERE</code> clause of the query. You can also remove the need for a separate <code>List&lt;Id&gt;</code> by using a map.</li>
<li><p>I would take your queue names, put them into a collection (a list or a set), and ammend your query like so</p>

<pre><code>    // The new list&lt;type&gt;{} syntax is how we declare and initialize a collection
    //   (similar syntax is used for sets and maps) on one line
    List&lt;String&gt; targetQueueNamesList = new List&lt;String&gt;{'DS Service Queue', 'Data Services RFP', 'Data Services'};

    // SOQL returns a List&lt;SObject&gt;, and the Map collection type has a constructor
    //   that takes a List&lt;SObject&gt;.
    // The Names IN :targetQueueNamesList, specifically the ":targetQueueNamesList" part
    //   is called a "bind expression".
    // This allows you to use apex variables in SOQL queries to reduce typing
    Map&lt;Id, Group&gt; targetQueues = new Map&lt;Id, Group&gt;([SELECT Id FROM Group WHERE Name IN :targetQueueNamesList]);
</code></pre></li>
<li><p>The first part of your second loop over <code>trigger.new</code>, where you detect if the owner is changing and the category and sub-category are null is arguably better off as a <em>validation rule</em> instead of being part of a trigger. The Salesforce mantra is "clicks, not code" (with validation rules counting as "clicks"). You don't need unit tests to deploy validation rules, and the error message that pops up when you use <code>.addError()</code> in code includes <code>CUSTOM_VALIDATION_EXCEPTION</code>. Adhering to the Principle of least astonishment means that the more appropriate place for this is therefore a validation rule.</p>

<ul>
<li>However, your requirement that you need to throw an error if owner is changing and certain fields are null may necessitate that you keep this in your trigger. If the case owner is changing to one of your queues, does it really matter whether your specified fields are null? You'll be overwriting them anyway. <strong>This is a requirement that should be analyzed further</strong>.</li>
</ul></li>
<li>Your inner loop, <code>for(RecordType rt : rc)</code> doesn't seem to be correct based on the requirements you've laid out for us. You state that you want to detect an owner change in your case, but you aren't checking the old and new values of your case owner anywhere. This ties into previous comments about how your <code>rc</code> and <code>gc</code> variables are likely not correct for your situation.</li>
<li>Your third nested loop (<code>for( Group qu :gc)</code>) contains a lot of individual <code>if</code> statements. They are all testing different values for the same object field (<code>qu.Name</code>). <em>Your if statements are all mutually exclusive and you will enter, at most, one of them per iteration</em>, so best practice here would be to use <code>else if</code> statements instead of individual <code>if</code> statements. Using <code>else if</code> means that Salesforce won't spend time testing conditions that we know will never be satisfied. It's a small performance gain, but the more important part is that it makes your code easier to understand. As of API v43.0, you could also use the <code>switch</code> statement as an alternative.</li>
<li><p>Now that I've given advice about if statements, let me undermine myself. Your if statements are all very similar. The common parts can be factored out of your <code>if</code>s. Accessing object fields takes an amount of time (a small one, but it's still a cost). Repeatedly typing out the same thing over and over again is also not very DRY (<strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself), and can be prone to errors.</p>

<pre><code>if (qu.name == 'Marketing Queue') { 
    c.RecordTypeId = MarkeRecoTyId;
    c.Department__c = 'Marketing';
    c.Sub_Department__c = 'Marketing';
    c.Category__c = 'Website Feature'; 
} 
if (qu.name == 'G&amp;T Service Queue' || Test.isRunningTest() ) {
    c.RecordTypeId = GTGrLRecoTyId; 
    c.Department__c = 'Group &amp; Tour';
    c.Sub_Department__c = 'Group &amp; Tour';
    c.Category__c = 'Group Event';                                 
} 
if (qu.name == 'CCSC Queue'||Test.isRunningTest()) {
    c.RecordTypeId = CCSCRecoTyId;
    c.Department__c = 'Guest Assistance';
    c.Sub_Department__c = 'Guest Assistance';
    c.Category__c = null ;                                 
} 
if (qu.name == 'E-Commerce'||Test.isRunningTest()) {
    c.RecordTypeId = EcomRecoTyId; 
    c.Department__c = 'E-Commerce';
    c.Sub_Department__c = 'E-Commerce';
    c.Category__c = 'Other';    
}
</code></pre>

<p>could become the following</p>

<pre><code>Id newRecordTypeId;
// Apex allows us to declare several variables of the same time on one line
String department, subDepartment, category;

if (qu.name == 'Marketing Queue') { 
    newRecordTypeId = MarkeRecoTyId;
    department = 'Marketing';
    subDepartment = 'Marketing';
    category = 'Website Feature'; 
} else if (qu.name == 'G&amp;T Service Queue' || Test.isRunningTest() ) {
    newRecordTypeId = GTGrLRecoTyId; 
    department = 'Group &amp; Tour';
    subDepartment = 'Group &amp; Tour';
    category = 'Group Event';                                 
} else if (qu.name == 'CCSC Queue'||Test.isRunningTest()) {
    newRecordTypeId = CCSCRecoTyId;
    department = 'Guest Assistance';
    subDepartment = 'Guest Assistance';
    cattegory = null ;                                 
} else if (qu.name == 'E-Commerce'||Test.isRunningTest()) {
    newRecordTypeId = EcomRecoTyId; 
    department = 'E-Commerce';
    subDepartment = 'E-Commerce';
    category = 'Other';    
}

// We only need to access/set fields on the object once
c.RecordTypeId = newRecordTypeId;
c.Department__c = department;
c.Sub_Department__c = subDepartment;
c.Category__c = category; 
</code></pre></li>
<li><p>Now that I've undermined myself once, let me do it again. You could remove the above if/else if entirely by making use of a map. This can also replace the need for individual Id variables for your various recordTypes.</p>

<pre><code>// Outside of all loops, likely at the top of your trigger
// A Map&lt;String, List&lt;String&gt;&gt; is probably not the absolute best choice, but
//   it should be the simplest to understand
// Ideally, this should probably be a Custom Metadata Type
Map&lt;String, List&lt;String&gt;&gt; queueNameToDefaultValues = new Map&lt;String, List&lt;String&gt;&gt;{
    // The key =&gt; value syntax is how we can set a map to have initial values
    // Here, the values are a List&lt;String&gt;, which we can initialize with the {} syntax
    //   as well
    // Strings and Ids may or may not be interchangeable.
    // For safety, I'm converting Ids to Strings
    'Marketing Queue' =&gt; new List&lt;String&gt;{String.valueOf(MarkeRecoTyId), 'Marketing', 'Marketing', 'Website Feature'},
    'G&amp;T Service Queue' =&gt; new List&lt;String&gt;{String.valueOf(GTGrLRecoTyId), 'Group &amp; Tour', 'Group &amp; Tour', 'Group Event'},
    'CCSC Queue' =&gt; new List&lt;String&gt;{String.valueOf(CCSCRecoTyId), 'Guest Assistance', 'Guest Assistance', null},
    'E-Commerce' =&gt; new List&lt;String&gt;{String.valueOf(EcomRecoTyId), 'E-Commerce', 'E-Commerce', 'Other'},
    'Guest Assistance Queue' =&gt; new List&lt;String&gt;{String.valueOf(CCSCRecoTyId), 'Guest Assistance', 'Guest Assistance', null}
};

for (Case c:trigger.new){
    // some code omitted

    for(RecordType rt : rc) {
        if(rt.Name == 'Guest Assistance') {
            // more code omitted
            for( Group qu :gc){
                // Gotta cast the string back to an Id here
                c.RecordTypeId = (Id)(queueNameToDefaultValues.get(qu.Name)[0]);
                c.Department__ c = c.RecordTypeId = queueNameToDefaultValues.get(qu.Name)[1];
                c.Sub_Department__ c = c.RecordTypeId = queueNameToDefaultValues.get(qu.Name)[2];
                c.Category__c = c.RecordTypeId = queueNameToDefaultValues.get(qu.Name)[3];
            }
        }
    }
}
</code></pre></li>
</ul>

<p>Getting back to a point I made earlier about the <code>for(RecordType rt :rc)</code> loop not making sense. Nested loops like this are generally a red flag. In most situations I see, there will be some code like this</p>

<pre><code>for(SObject obj1 :someList){
    for(SObject obj2 :otherList){
        if(obj2.Field__c == obj1.Field__c){
            // do work
        }
    }
}
</code></pre>

<p>Situations like those can be handled by a map instead of a nested loop. Your situation is a bit different though. Your requirements state that you need to check when a case owner is changing, and then assign default values. <em>You don't need your nested loops at all</em>.</p>

<pre><code>// somewhere before your loop...

// Trigger context variables will contain OwnerId, but the map from one of my previous
//   points is keyed on queue name.
// Trigger context variables only contain data on the object the trigger is defined on,
//   not "related data" (anything on a related record, or in other words, any field you
//   need to use more than one '.' to access like case.Owner.Name).
// Thus, we need to query.
Map&lt;Id, Group&gt; allGroupsMap = new Map&lt;Id, Group&gt;([SELECT Id, Name FROM Group WHERE Type = 'Queue']);

Case oldCase;
String ownerName;
for(Case c :trigger.new){
    oldCase = trigger.oldMap.get(c.Id);
    ownerName = allGroupsMap.get(c.OwnerId).Name;

    // Check to see that the owner has changed, and that we have default values
    //  defined for the new owner.
    // Doing both of these checks makes your code more robust.
    if(oldCase.OwnerId != c.OwnerId &amp;&amp; queueNameToDefaultValues.containsKey(ownerName)){
        c.RecordTypeId = (Id)(queueNameToDefaultValues.get(qu.Name)[0]);
        c.Department__ c = c.RecordTypeId = queueNameToDefaultValues.get(qu.Name)[1];
        c.Sub_Department__ c = c.RecordTypeId = queueNameToDefaultValues.get(qu.Name)[2];
        c.Category__c = c.RecordTypeId = queueNameToDefaultValues.get(qu.Name)[3];
    }
</code></pre>

<h1>Finally, putting it all together</h1>

<p>A greatly improved (but untested, and imperfect) trigger might look like this</p>

<pre><code>// This code is untested and, if you're seeing this comment, it was copy-pasted
//   from a question on codereview.stackexchange.com and is not representative
//   of the abilities of the person delivering this code to you
Trigger CaseUpdate on Case(Before Update){
    // getRecordTypeInfosByName returns a Map&lt;String, System.RecordTypeInfo&gt;
    Map&lt;String, System.RecordTypeInfo&gt; caseRecordTypes = Schema.SObjectType.Case.getRecordTypeInfosByName();

    // Most of your original queries and variables are likely unnecessary, and have
    //   been removed.

    // This map will help us turn an ownerId into something we can use to grab
    //   the list of default values later on
    Map&lt;Id, Group&gt; allGroupsMap = new Map&lt;Id, Group&gt;([SELECT Id, Name FROM Group WHERE Type = 'Queue']);

    // A Map&lt;String, List&lt;String&gt;&gt; is probably not the absolute best choice, but
    //   it should be the simplest to understand
    // Ideally, this should probably be a Custom Metadata Type
    Map&lt;String, List&lt;String&gt;&gt; queueNameToDefaultValues = new Map&lt;String, List&lt;String&gt;&gt;{
        // The key =&gt; value syntax is how we can set a map to have initial values
        // Here, the values are a List&lt;String&gt;, which we can initialize with the {} syntax
        //   as well
        // Strings and Ids may or may not be interchangeable.
        // For safety, I'm converting Ids to Strings
        'Marketing Queue' =&gt; new List&lt;String&gt;{String.valueOf(MarkeRecoTyId), 'Marketing', 'Marketing', 'Website Feature'},
        'G&amp;T Service Queue' =&gt; new List&lt;String&gt;{String.valueOf(GTGrLRecoTyId), 'Group &amp; Tour', 'Group &amp; Tour', 'Group Event'},
        'CCSC Queue' =&gt; new List&lt;String&gt;{String.valueOf(CCSCRecoTyId), 'Guest Assistance', 'Guest Assistance', null},
        'E-Commerce' =&gt; new List&lt;String&gt;{String.valueOf(EcomRecoTyId), 'E-Commerce', 'E-Commerce', 'Other'},
        'Guest Assistance Queue' =&gt; new List&lt;String&gt;{String.valueOf(CCSCRecoTyId), 'Guest Assistance', 'Guest Assistance', null}
    };

    Case oldCase;
    String ownerName;
    for(Case c :trigger.new){
        oldCase = trigger.oldMap.get(c.Id);
        ownerName = allGroupsMap.get(c.OwnerId).Name;

        // Check to see that the owner has changed, and that we have default values
        //  defined for the new owner.
        // Doing both of these checks makes your code more robust.
        // It's unclear what a standalone recordType has to do with your requirements
        //   (especially since the record type is being changed by the below code), 
        //   so that if statement is omitted
        if(oldCase.OwnerId != c.OwnerId &amp;&amp; queueNameToDefaultValues.containsKey(ownerName)){
            c.RecordTypeId = (Id)(queueNameToDefaultValues.get(qu.Name)[0]);
            c.Department__ c = c.RecordTypeId = queueNameToDefaultValues.get(qu.Name)[1];
            c.Sub_Department__ c = c.RecordTypeId = queueNameToDefaultValues.get(qu.Name)[2];
            c.Category__c = c.RecordTypeId = queueNameToDefaultValues.get(qu.Name)[3];
        }
    }
}
</code></pre>

<p>Much shorter, much more DRY, and the best representation of the requirements as you've provided them (save for adding an error on owner changes in some situations, which I maintain is better off as a validation rule).</p>
    </div>