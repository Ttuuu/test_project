<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Recursive Approach Review</h2>

<p>In this method you are performing too many look-ups.</p>

<p>First, you are looking up the 0th value of <code>p</code> two or three times.  List indexing does take time, so it may be faster to store <code>p[0]</code> in a local variable, to avoid repeatedly indexing into the list. </p>

<p>Second, you are  performing a dictionary looking ups two or three times.  While dictionary look-ups are fast, ideally <span class="math-container">\$O(1)\$</span> in time, they do take time.  <code>p[0] in d</code> is a dictionary lookup without retrieving the looked up value; <code>d[p[0]]</code> is a dictionary lookup that retrieves the value.</p>

<p>The first and second if statements do effectively the same things.  They check <code>p[0] in d</code>, and if true, they retrieve <code>d[p[0]]</code>.  We can extract this common functionality, perform it once, and then, depending on <code>len(p)</code>, perform the recursion.  Additionally, we'll use <code>dict.get(p[0], None)</code> to perform a single dictionary lookup, using the value from a single list index operation:</p>

<pre><code>def get_val_from_path_1(d, p):
    d = d.get(p[0], None)
    if d is not None and len(p) &gt; 1:
        return get_val_from_path_1(d, p[1:])
    return d
</code></pre>

<p>Note: I used <code>d is not None</code>, instead of simply testing if <code>d</code> is "truthy", so that if a subkey is requested of a "falsy" value (<code>0</code>, <code>False</code>, <code>""</code>), the dictionary lookup will happen in the recursive call, and an exception will be raised similar to the original code.</p>

<p><strong>EDIT</strong>: As mentioned by RootTwo in the comments, it is "safer" to use a sentinel object, in case <code>None</code> is an actual value contained in the JSON object.  Although if <code>None</code> values are contained in the JSON object, it is ambiguous as to whether the key does not exist, or exists with the value <code>None</code>:</p>

<pre><code>def get_val_from_path_1(d, p):
    sentinel = object()
    d = d.get(p[0], sentinel)
    if d == sentinel:
        return None
    if len(p) &gt; 1:
        return get_val_from_path_1(d, p[1:])
    return d
</code></pre>

<h2>Iterative Approach Review</h2>

<p>This code begins with <code>tmp = d</code>, which is odd as <code>d</code> is never used in the remainder of the code.  The temporary variable can be removed.</p>

<p>Similar to the Recursive Approach, you are using a double dictionary lookup.  <code>s in tmp</code> followed by <code>tmp[s]</code>.  Again, using <code>tmp.get(s, None)</code> would perform the dictionary lookup once, and return <code>None</code> if the key was not present.</p>

<pre><code>def get_val_from_path_2(d, p):
    for s in p:
        d = d.get(s, None)
        if d is None:
            break
    return d
</code></pre>

<p><strong>EDIT</strong>: A sentinel can be used here as well, with the same ambiguity disclaimer:</p>

<pre><code>def get_val_from_path_2(d, p):
    sentinel = object()
    for s in p:
        d = d.get(s, sentinel)
        if d is sentinel:
            return None
    return d
</code></pre>

<h2>Which approach is better?</h2>

<p><strong>EDIT</strong>: <em>Clarifications added</em> at based on comments by Konrad.</p>

<p>Gloweye attempts to make the case that "<em><a href="https://codereview.stackexchange.com/a/231414/100620">recursive is the way to go</a></em>".  I disagree.</p>

<p>First off, Python does not do tail call optimization.  If it did, it would close the performance gap with the iterative approach, but <em>with the current recursive implementation,</em> the iterative method would still win.</p>

<p>In each recursive call, the <code>p[1:]</code> is being passed to the <code>p</code> argument.  This is building a brand-new list, and copying the elements to the new list.  With <code>n</code> items in the original list, <code>n-1</code> elements are copied the first time, <code>n-2</code> are copied the second, <code>n-3</code> the third, and so on, making this an <span class="math-container">\$O(n^2)\$</span> time algorithm.</p>

<p>Gloweye's approach is a constant factor worse, since <code>*args[1:]</code> in addition to constructing the list slice must "splat" the items into the argument list, which then gets unsplatted back to <code>args</code> tuple in the next call.  I should stress it is not that much worse; it is still only <span class="math-container">\$O(n^2)\$</span>.</p>

<p><em>Both Gloweye's and the current recursive approach, passing <code>p[1:]</code> as the argument in the recursive call, can be corrected from <span class="math-container">\$O(n^2)\$</span> to <span class="math-container">\$O(n)\$</span> by replacing the list slicing with an iterator.  Since the recursive argument has changed from a list to an iterator, a second function would be needed to implement this change.</em></p>

<p>If tail call optimization was present, and the list was not being repeatedly sliced and recreated each step, such as by using an iterator to walk down the list of keys, then things would be <em>better (as in <span class="math-container">\$O(n)\$</span>)</em>.  Tail call optimization works by updating the arguments for the next call, and jumping to the top of the function, which turns the recursion into a simple loop.</p>

<p>So why not just use a loop?</p>

<p>One last optimization is to stop checking for the existence of the keys (or even a <code>None</code> default <em>or sentinel</em> value); these checks slow the loop down.  Instead, unconditionally lookup and retrieve the values.  Rely on Python's blazingly fast exception handling to efficiently recover from non-existent keys.</p>

<p>Also, use meaningful variable names.  <code>d</code> and <code>p</code> are far too obscure.</p>

<p>Finally, use <code>"""docstrings"""</code> to document how to use the function.</p>

<pre><code>def get_val_from_path(json_object, key_path):
    """
    Retrieve a value from a JSON object, using a key list to
    navigate through the JSON object tree.

    Parameters:
       json_object (JSON): An object return from json.loads()
       key_path (Iterable[str]): A list of keys forming the key path.

    Returns:
       The value found at the given key path, or `None` if
       any of the keys in the path is not found.
    """

    try:
        for key in key_path:
            json_object = json_object[key]

        return json_object

    except KeyError:
        return None
</code></pre>

<hr>

<p>Optionally, use Gloweye's <code>*args</code> method signature for slightly friendlier calls, without the <code>[]</code> noise.</p>

<pre><code>def get_val_from_path(json_object, *key_path):
    ...

get_val_from_path(d, "b", "2", "bb")  # --&gt; "b2"
</code></pre>
    </div>