<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Client-side validation can improve the UX and clarify the expected field  values for well-behaved users, but the naughty folks that want to interact with your application will have no trouble bypassing these barriers to submission.
All of the restrictions that you impose in the jquery <code>validate()</code> call must be duplicated in the php script if you want to truly filter submission data.</p>
</li>
<li><p>I don't see any reason to call <code>validate_data()</code> (honestly, the function should be named <code>sanitize_data()</code>) on <code>$_POST['user_email']</code>, a valid email will not allow any of the things that you are sanitizing.  If you want to sanitize the other values, okay.</p>
</li>
<li><p>You are using a battery of <code>if-elseif-else</code> statements (by the way, use <code>elseif</code> versus <code>else if</code> in php -- they are technically different but not meaningfully so), so it is impossible to collection more than one error in a submission.  For this reason, an array is an inappropriate data type.  Just save the error message as a string.</p>
</li>
<li><p>Use consistent spacing on either side of the assigment operator when declaring variables.  Use 4-spaces or tabs (depending on your preference) so that your script is easier to read and maintain.</p>
</li>
<li><p>Remove the redundant check for emptiness on <code>$rv_user_name</code> (specifically <code>($rv_user_name =="") || ($rv_user_name =="")</code>.  You also don't need to wrap any of the individual conditions in parentheses to maintain the disqualifying logic.</p>
</li>
<li><p>Pass a consistent set of response data back to your ajax call.  It needn't be anything more than</p>
<pre><code>$response = ['target' =&gt; 'formerros', 'message' =&gt; 'All fields must be completed before you submit the form.'];
</code></pre>
<p>or</p>
<pre><code>$response = ['target' =&gt; '', 'message' =&gt; 'Success'];
</code></pre>
<p>This way there are no magical <code>error_no</code> numbers to translate and you can simply check if <code>!response.target</code> (which means Success), otherwise show the <code>response.message</code> string at the targeted field by its id.</p>
</li>
<li><p>Don't use regex to validate an email, the more accurate it is the more convoluted it looks.  Just use <code>filter_var()</code> <a href="https://stackoverflow.com/a/5855853/2943403">How to validate an Email in PHP?</a>.</p>
</li>
<li><p>Any place where you are making a loose comparison on an empty string, you might as well just use <code>!</code> for example: <code>!$rv_user_mobileno</code>.</p>
</li>
<li><p>Condense your file extension check by using <code>in_array()</code> with an array of whitelisted extensions.</p>
</li>
<li><p>Don't bother with the <code>try-catch</code> block once you get this into production, you are going to want those errors to go to the logs. Read this advice: <a href="https://codereview.stackexchange.com/a/243749/141885">https://codereview.stackexchange.com/a/243749/141885</a> Definitely don't pass back the generated <code>$e-&gt;getMessage()</code> string.</p>
</li>
</ul>
    </div>