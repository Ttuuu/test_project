<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Hey, I think you have pretty nice code there already. Anyways, I have some suggestions:</em></p>

<hr>

<h2>Formatting</h2>

<p><em>This looks pretty good already so please don't take the points to seriously. Mostly it's my personal preferences.</em></p>

<hr>

<p>I don't like breaking variable definitions like so:</p>

<pre class="lang-java prettyprint-override"><code>    private HashMap&lt;GraphVertex, LinkedList&lt;WeightedEdge&gt;&gt;
            adjacentVerticesByVertex;
</code></pre>

<p>You could mistake it with a function when scrolling over the code.</p>

<hr>

<p>I don't like breaking code like so:</p>

<pre class="lang-java prettyprint-override"><code>                        int edgeWeightCumulative =
                                shortestPathMap.get(currentVertex) +
                                        edge.getEdgeWeight();
</code></pre>

<p>It's harder to read. Usually you want to split what is logically splittable but not single statements.</p>

<hr>

<p><em>You have more places with strange breaks but I guess you wanted to do it for the post here. Just keep in mind to put a little bit more thoughts into breaks. I won't repeat for the other places.</em></p>

<hr>

<p>You don't have an empty line at the beginning of <code>DirectedGraphWithWeights</code> like in the other classes. Please decide for one thing and do it consistently.</p>

<hr>

<p>Please add a space after keywords for control structures.</p>

<pre class="lang-java prettyprint-override"><code>            if(visitedVertices.size() == vertexSet.size()) {
                break;
            }
</code></pre>

<p>It will make things more readable.</p>

<hr>

<p>You should add empty space between overall text and keywords in the documentation.</p>

<pre class="lang-java prettyprint-override"><code>    /**
     * Returns the number of vertices in the Graph
     * @return Returns the number of vertices
     */
</code></pre>

<hr>

<h2>Naming</h2>

<hr>

<p>It's a directed graph so all methods should respect that in naming.</p>

<pre class="lang-java prettyprint-override"><code>    public void addEdge(int vertexA, int vertexB, int weight) {
</code></pre>

<p><code>A</code> and <code>B</code> can be replaced by <code>Source</code> or <code>Src</code> and <code>Destination</code> or <code>Dest</code>.</p>

<hr>

<p>The <code>value</code> variable in <code>GraphVertex</code> should be named something like <code>index</code>. When it's called <code>value</code> you could assume that two vertices can have the same value for that. As well, this will make the following method much clearer as you notice that vertices are addressed by their index.</p>

<pre class="lang-java prettyprint-override"><code>    public void addEdge(int vertexA, int vertexB, int weight) {
</code></pre>

<hr>

<h2>Syntax</h2>

<hr>

<p>Don't use <code>this</code> keyword where you don't need to.</p>

<pre class="lang-java prettyprint-override"><code>    public int getNumberOfVertices() {
        return this.vertexSet.size();
    }
</code></pre>

<hr>

<p>One line if statements should be avoided in general but especially multiple ones at the same place.</p>

<pre class="lang-java prettyprint-override"><code>    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        GraphVertex other = (GraphVertex) obj;
        if(value != other.getValue()) return false;
        return true;
    }
</code></pre>

<p>It's harder to read for no real benefit in exchange.</p>

<hr>

<p>Consider making <code>adjacentVerticesByVertex</code> and <code>vertexSet</code> <code>final</code> because the reference is never changed.</p>

<hr>

<p>I don't see why you should use a <code>LinkedList</code> here. The benefit is performance when you are removing items often. This is not the case for your code.</p>

<pre class="lang-java prettyprint-override"><code>    private HashMap&lt;GraphVertex, LinkedList&lt;WeightedEdge&gt;&gt;
            adjacentVerticesByVertex;
</code></pre>

<hr>

<p>The temporary variable is not necessary here. Just create the instance in the getter argument.</p>

<pre class="lang-java prettyprint-override"><code>    public Iterable&lt;WeightedEdge&gt; getAdjacentVertices(int source) {
        GraphVertex tempNode = new GraphVertex(source);
        return adjacentVerticesByVertex.get(tempNode);
    }
</code></pre>

<hr>

<h2>Documentation</h2>

<p><em>I must say that you don't have the best documentation. It's easy to get the feeling that the reader will understand the code as you do while writing, but that is not the case. Try to write more extensive documentation that includes explanations to the algorithm itself. Also add more detailed documentation to the functions and methods. Keep in mind that in production code, you want to minimize the time someone needs to understand the code. Time is money.</em></p>

<hr>

<p>Please avoid documentation that is not adding information to the code. In <code>WeightedEdge</code> you didn't add any comments to the trivial methods as it should be. But in <code>DirectedGraphWithWeights</code> you did:</p>

<pre class="lang-java prettyprint-override"><code>    /**
     * Constructor
     */
    DirectedGraphWithWeights() {
        adjacentVerticesByVertex = new HashMap&lt;&gt;();
        vertexSet = new HashSet&lt;&gt;();
    }
</code></pre>

<p>Have a look at <a href="https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/master/src/java.base/share/classes/java/util/ArrayList.java" rel="nofollow noreferrer">ArrayList</a> on GitHub. It's good reference for documentation.</p>

<hr>

<h2>Design</h2>

<p><em>While writing I'm checking constantly your logic. I can't find anything realy mentionable and think you did a good job on applying the algorithm itself on the class structure you created.</em></p>

<hr>

<p>You could have done something different when creating the class structure. The directed graph, including the vertices and edges, and the algorithm itself are two different concepts. Your program could reflect that with an additional class <code>DijkstraAlgorithm</code> or <code>DijkstraSolver</code> that has a static method with a parameter for <code>DirectedGraphWithWeights</code> to apply the algorithm on.</p>

<pre class="lang-java prettyprint-override"><code>public class DijkstraAlgorithm {
    public static void solve(DirectedGraphWithWeights graph) {
        // Apply algorithm and print the result.
    }
}
</code></pre>

<p>Another thing is that an edge can be regarded as a relationship between two vertices. The relationship has three attributes, i.e.:</p>

<ul>
<li>One vertex is the source.</li>
<li>The other is the destination.</li>
<li>The weight of the relationship.</li>
</ul>

<p>In your code you made the relationships a map with vertex as key and its relationships as value. This has to be managed like in the following code.</p>

<pre class="lang-java prettyprint-override"><code>    public void addEdge(int vertexA, int vertexB, int weight) {
        GraphVertex graphVertexA = new GraphVertex(vertexA);
        GraphVertex graphVertexB = new GraphVertex(vertexB);
        vertexSet.add(graphVertexA);
        vertexSet.add(graphVertexB);
        WeightedEdge weightedEdge = new WeightedEdge(weight, graphVertexA,
                graphVertexB);
        if(!adjacentVerticesByVertex.containsKey(graphVertexA))
            adjacentVerticesByVertex.put(graphVertexA, new
                    LinkedList&lt;WeightedEdge&gt;());
        adjacentVerticesByVertex.get(graphVertexA).add(weightedEdge);
    }
</code></pre>

<p>As the relationships are seperated from the concept <em>vertex</em> by the class <code>WeightedEdge</code>, the key value is stored in every relationship entity which is redundant. When I get the value for a key vertex, I get a list of <code>WeightedEdge</code> instances that all have the same key vertex as a field. Every vertex should know its relationship to other vertices.</p>

<p>A solution to that is to let every vertex manage its relations itself. As the graph is directed this will be reflected perfectly by a net of such vertices. To represent the weight we can simply make use of a map. An entry represents a key neighbour vertex and a value weight.</p>

<pre class="lang-java prettyprint-override"><code>public class GraphVertex {
    public final Map&lt;GraphVertex, Integer&gt; edges;
    public final int index; // The 'value' in your version.

    // All the methods needed for the algorithm.
}
</code></pre>

<p>Another think you could think about is not having indexing at all because it's not relevant to the algorithm. The algorithm only needs to know the first vertex. The first vertex is always the one that is not the destination of any relationship, or rather edge. The final vertex is the one that is not the source for any relationship, or rather edge. This will ensure that the graph organization is fully representable by the data itself. A class to represent the graph would become redundant. You can keep a variable to give the vertices good names for printing the result.</p>

<pre class="lang-java prettyprint-override"><code>public class Vertex {
    public final Map&lt;Vertex, Integer&gt; edges;
    public final String name;

    public Vertex(String name) {
        edges = new HashMap&lt;&gt;();
        this.name = name;
    }

    public Vertex addEdge(Vertex other, int weight) {
        edges.put(other, weight);
        return this;
    }

    public static void main(String[] args) {
        Vertex start = new Vertex("start");
        Vertex otherA = new Vertex("otherA");
        Vertex otherB = new Vertex("otherB");
        Vertex end = new Vertex("end");

        start.addEdge(otherA, 1).addEdge(otherB, 2);
        otherA.addEdge(otherB, 3).addEdge(end, 4);
        otherB.addEdge(end, 5);
    }

    // Other stuff.
}
</code></pre>

<p>This would limit you to some degree though because you will have a hard time in changing a graph. You will have an even harder time to go through the graph in a different way than from the implicit starting to the ending vertex. A class to manage that would become necessary. Anyways, these are all implementation details and depend on your requirements.</p>

<p>I've found <a href="https://www.baeldung.com/java-graphs" rel="nofollow noreferrer">this</a> tutorial that has a very similar approach to what you did. Maybe you can find some impressions there as well.</p>

<hr>

<p><em>I won't program the whole thing for you to post it here but you should have a good idea about what you could improve in your code to make it more object oriented and cleaner.</em></p>
    </div>