<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Enable compiler warnings and fix all of them</h1>

<p>I immediately see that your function <code>my_system()</code>, which should return an <code>int</code>, does not contain a <code>return</code> statement. That means the return value is undefined. If you enable compiler warnings, the compiler will complain about such mistakes.</p>

<h1>Don't add unnecessary forward declarations</h1>

<p>Why add a forward declaration of <code>my_system()</code> right before the actual implementation? This is an unnecessary repetition of code. It's best to always try to not repeat yourself.</p>

<h1>Read the man page again and pay attention to the details</h1>

<p>You implemented the call to <code>execl()</code> exactly as written in the man page, but that is only the easy part. You have to ensure that the return value and the behavior in the presence of errors is exactly as the man page describes.</p>

<p>In particular, <code>system()</code> does not call <code>error()</code> when there is an error, instead the return value and the value of <code>errno</code> is used to convey the type of error that has occurred.</p>

<h1>Create a test suite before making any changes to <code>my_system()</code></h1>

<p>You could change <code>my_system()</code> right now to fix any immediately obvious errors, but the temptation is very high that afterwards you consider the implementation to be complete. Instead, try to create a test suite first that calls <code>my_system()</code> in different ways to ensure that its behavior matches that given in the man page.
Also, instead of making assumptions of what the required behavior is, in this case you can just check what the actual <code>system()</code> function does.</p>

<p>So such a test suite could look like:</p>

<pre><code>#include &lt;assert.h&gt;
...
const char *commands[] = {
    "/bin/true",
    "/bin/false",
    // add more commands here
    "",
    NULL,
};

for (int i = 0; ; i++) {
    int my_ret = my_system(commands[i]);
    int my_errno = errno;
    int ret = system(commands[i]);
    assert(my_ret == ret);
    if (ret == -1)
        assert(my_errno == errno);

    if(!commands[i])
        break;
}
<span class="math-container">```</span>
</code></pre>
    </div>