<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll do a full answer then:  The algorithm choice seems <del>bad</del> suboptimal, or at least strange at first view: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rijndael?view=netframework-4.8" rel="nofollow noreferrer">"The Rijndael class is the predecessor of the Aes algorithm. You should use the Aes algorithm instead of Rijndael."</a></p>

<p>Even then the general advice would be not to <del>make up your own crypto scheme</del> do these choices on your own from scratch.  I usually look at <a href="https://latacora.micro.blog/2018/04/03/cryptographic-right-answers.html" rel="nofollow noreferrer">this article</a> every once in a while.  Also of course <a href="https://crypto.stackexchange.com/">https://crypto.stackexchange.com/</a> for detailed questions and answers.  <a href="https://crypto.stackexchange.com/questions/75078/using-different-iv-and-salt-with-aes-cbc-but-same-key">This answer</a> might be a start.</p>

<p>Long story short would probably be that there are better options than the choice of algorithms that are present in the code and if you're not sure what to use, some good library that has already done those choices for you would be preferable, like NaCl (for .NET of course).  I've seen some bindings for that, but I would hesitate to suggest which one is to be recommended at all.</p>

<p>Apart from algorithm choice a library might also be taking care of properly clearing any memory that was used (so some plaintext doesn't remain readable in memory) and prevents other problems (non-cryptographic random number generator, IV reuse, ... there's lots of things that can go wrong).</p>

<p>Also make sure to use of some form of authentication encryption so that you can be sure before decryption that the data hasn't been tampered with, c.f. <a href="https://en.wikipedia.org/wiki/Padding_oracle_attack" rel="nofollow noreferrer">Padding Oracle</a>.</p>

<p>Finally, credit card data is probably also more of a regulatory problem, <a href="https://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard" rel="nofollow noreferrer">PCI DSS</a> was mentioned.</p>

<hr>

<p>Okay, so keeping this specific code in mind:</p>

<ul>
<li>Depending on how it's stored (in a database at rest?) it might be good to also store the other parameters, like number of iterations (then again, the lengths could just also be stored, it's not a lot of data after all), as part of the data package, that way the parameters can be later increased without having to reprocess all stored data.</li>
<li>The exception should probably at least be logged so someone can check what's up in production.</li>
<li><code>new RNGCryptoServiceProvider()</code> gets run too often, should be enough to keep one instance around?</li>
<li>The password check is just to make sure there was no coding error, right?  Otherwise the minimum length should be a bit more, plus some dictionary checks etc. would be required.  But then again, where's this password coming from, is it user-chosen or the global password for the whole database?</li>
<li>1000 iterations seems low, but I also haven't (can't) checked what the actual run time of it is.  To prevent attacks based on that it should probably be high enough to be noticeable when doing the password derivation.  In any case there's a few better functions for this as mentioned in the linked documents.</li>
</ul>
    </div>