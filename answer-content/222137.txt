<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>comments</h1>

<p>comments should explain why you do something, not what you do. <code># Append R-Squared TO R-Squared list</code> adds nothing of value. On the contrary, it uses vertical space, and if ever you change something of the code you will need to change the co√†mments as well</p>

<pre><code># This function takes in a subset of a dataframe representing independent  
# variables (X) and a column for dependent variable (Y). This function fits 
# separate models for each possible combination of the k predictors (which is 
# based on the column length of X) and then select the best subset. The 
# resulting output is a dataframe.
</code></pre>

<p>could be the <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstring</a> of the method if it were correct. This function does not return a DataFrame, but only prints the results</p>

<h1>functions</h1>

<p>Now you have 1 monster function that:
- calls the test
- aggregates the values
- displays the results</p>

<p>Better would be to split this</p>

<h1>getting the results</h1>

<p>instead of having to append the results to 4 lists, I would extract this to a generator that <code>yield</code>s a <code>dict</code> and then use something like  <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records" rel="nofollow noreferrer"><code>DataFrame.from_records</code></a> to combine this.</p>

<h2>powerset</h2>

<p>what you do here:</p>

<pre><code>for k in range(1, len(X.columns) + 1):
        # Looping over all possible combinations: from 11 choose k
        for combo in itertools.combinations(X.columns,k):
</code></pre>

<p>looks a lot like the <code>powerset</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools-recipe</a>, so let's use that one:</p>

<pre><code>from itertools import chain, combinations


def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))


def generate_combo_comparisons(X, Y):
    for combo in powerset(X.columns):
        if not combo:  # the first combo is empty
            continue
        RSS, R_squared = fit_linear_reg(X[list(combo)], Y)
        yield {
            "No_of_Features": len(combo),
            "RSS": RSS,
            "R-Squared": R_squared,
            "Features": combo,
        }
</code></pre>

<p>To get the maximum indices of each group, you can use <a href="https://stackoverflow.com/a/51496653/1562285"><code>groupby.idxmax</code></a></p>

<p>You add columns <code>'min_RSS'</code>  to the original <code>DataFrame</code>. Better here would be to generate a new summary DataFrame</p>

<pre><code>def subset_results(X, Y):
    df = pd.DataFrame.from_records(
        data=list(generate_combo_comparisons(X, Y)),
        index=["No_of_Features", "RSS", "R-Squared", "Features"],
    )

    summary = df.groupby("No_of_Features")["R-Squared"].agg(
        {"RSS": "min", "R-Squared": "max"}
    )
    df_min = df.loc[df.groupby("No_of_Features")["RSS"].idxmin()]
    df_max = df.loc[df.groupby("No_of_Features")["R-Squared"].idxmax()]
    return df, df_min, df_max, summary
</code></pre>

<p>And then you can pass these results on to the plotting function</p>
    </div>