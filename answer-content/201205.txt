<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So this is a curious writeup, because primes can be calculated in many, many ways.</p>

<p>That said, there's one huge optimization we can use to cut your search pattern in half, and it starts here:</p>

<blockquote>
<pre><code>for (ulong i = 4; i&lt;inputnumber; i++)
{
</code></pre>
</blockquote>

<p>Fun fact: the <strong>only</strong> prime even number is <code>2</code>, so we can actually rewrite this very quickly to remove half of the numbers you need to search:</p>

<pre><code>for (ulong i = 5; i&lt;inputnumber; i += 2)
{
</code></pre>

<p>Bam. Cut our search grid in half.</p>

<p>The next thing I would do is remove <code>2</code> from the <code>List&lt;ulong&gt;</code> of results, and we'll insert it later, because that will <em>never</em> match any of the values we're searching now:</p>

<pre><code>var primes = new List&lt;ulong&gt;();
primes.Add(3);
...
primes.Insert(0, 2);
</code></pre>

<p>That way we get another speed boost, without sacrificing any of the rest of our code. (Are there better ways to do this? Sure.)</p>

<hr>

<p>Next, we need to talk about some "best practices" and such:</p>

<pre><code>Console.WriteLine("The Range from 0 to " + inputvar + " has " + Convert.ToString(numberofprimes) + " primes.");
</code></pre>

<p>This is something we call "string concatenation", basically, <code>string1 + string2</code>. It's frowned upon, and we recommend not doing it. Instead, use a formatted string, in one of two ways:</p>

<pre><code>Console.WriteLine("The Range from 0 to {0} has {1} primes.", inputvar, numberofprimes);
Console.WriteLine($"The Range from 0 to {inputvar} has {numberofprimes} primes.");
</code></pre>

<p>Either will work, though the second is only supported in C# 6.0.</p>

<hr>

<p>Next, there's one more <strong>huge</strong> optimization to make, and it's at this line:</p>

<pre><code>double result = 0;
</code></pre>

<p>You don't realize it, but there's a boatload of casting/conversions here that shouldn't exist. Replace <code>double</code> with <code>ulong</code> and it goes away.</p>

<p>What's happening, is <code>i % prime</code> is a <code>ulong</code>, that is being casted to a <code>double</code> when assigned to <code>result</code>. This is an expensive operation, because the two types are stored in memory in completely different formats. Change the type, and you should get a 50%+ speed boost. (At least, I did.)</p>

<hr>

<p>Additionally, you don't really <em>need</em> <code>result</code>, you don't use it for anything. So, I recommend removing it, and rewriting the <code>foreach</code> as follows:</p>

<pre><code>for (ulong i = 5; i &lt; inputnumber; i += 2)
{
    isprime = true;
    foreach (ulong prime in primes)
    {
        if (i % prime == 0UL)
        {
            isprime = false;
            break;
        }
    }
    if (isprime == true)
    {
        primes.Add(i);
    }
}
</code></pre>

<p>This gives you another speed boost, surprisingly.</p>

<hr>

<p>Lastly, I recommend initializing the <code>List</code> with a default buffer. This should help avoid "resizing" that happens throughout the lifetime of the program. I used 500000, but as long as you use something reasonable (even 10000 is fine) it will give you a decent performance boost. (1-2%)</p>

<hr>

<p>Overall, when we're done, the algorithm should look something like:</p>

<pre><code>var primes = new List&lt;ulong&gt;(10000);
primes.Add(3);
bool isprime = false;
for (ulong i = 5; i &lt; inputnumber; i += 2)
{
    isprime = true;
    foreach (ulong prime in primes)
    {
        if (i % prime == 0UL)
        {
            isprime = false;
            break;
        }
    }
    if (isprime == true)
    {
        primes.Add(i);
    }
}
primes.Insert(0, 2);
int numberofprimes = primes.Count;
</code></pre>
    </div>