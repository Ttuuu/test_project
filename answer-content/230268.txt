<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is this common practice?</p>
</blockquote>

<p>Enum-based type tracking in C? Yes.</p>

<blockquote>
  <p>Would there be a better way to do it?</p>
</blockquote>

<p>Depends on a few things, including your definition of <em>better</em>. I think this is fine, but if your type-conditional code ends up being extremely long, then you can move to a more C++-style approach, where instead of tracking a type enum, you track function pointers; then your <code>if (get_type())</code> code disappears and you can blindly call the function pointer. It's a little more complicated, and can have performance implications.</p>

<blockquote>
  <p>Would it have been okay to just waste the space and use a single struct as I did before?</p>
</blockquote>

<p>Again - it depends. How many of these structures are you instantiating? Seven, or seven billion?</p>

<p>Wasting the space can actually be more performant - you can simplify your allocation logic.</p>

<p>There's yet another option where you don't waste space at all - C allows you to do a dirty trick called <code>union</code> punning. Basically, write multiple versions of the structure whose memory overlaps, and choose the right one based on context. </p>

<p>Until performance becomes a very specific and dominant issue, just stick with what you have, which is simple and legible, and resist the urge to prematurely optimize.</p>
    </div>