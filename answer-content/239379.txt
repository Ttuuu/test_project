<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).</p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.  For this code, I added these two functions to make it compileable:</p>

<pre><code>int createID(int role) {
    static int id{1000};
    return ++id + role * 10000;
}

void loginMenu(int role, std::string&amp; username)
{
    std::cout &lt;&lt; "Successful login of " &lt;&lt; username &lt;&lt; " as role " &lt;&lt; role &lt;&lt; '\n';
}
</code></pre>

<h2>Use objects</h2>

<p>You have a <code>Person</code> structure and then separate functions that operate on <code>Person</code> data. With only a slight syntax change, you would have a real object instead of C-style code written in C++.<br>
So to begin with, you might define a <code>Person</code> class like this:</p>

<pre><code>class Person
{
public:
    Person(int id, std::string&amp; username, std::string&amp; fullName, std::string&amp; email, std::string&amp; password);
    bool isMatch(const std::string&amp; name, const std::string&amp; pw) const;
private:
    int id;
    std::string username;
    std::string fullName;
    std::string email;
    std::string password;
};
</code></pre>

<p>Now we can now create a <a href="https://en.cppreference.com/w/cpp/language/derived_class" rel="nofollow noreferrer">derived class</a> to define a <code>Doctor</code>:</p>

<pre><code>class Doctor : public Person
{
public:
    Doctor(Person&amp; p) : Person{p} {}
private:
    std::vector &lt;std::shared_ptr &lt;Course&gt;&gt; courses;
};
</code></pre>

<p>This derivation is the Object Oriented Programming (OOP) way to express the <em>is-a</em> relationship.  That is, a <code>Doctor</code> is a <code>Person</code> so everthing that a person has or can do, a doctor has or can do.  </p>

<h2>Add behavior to objects for simpler code</h2>

<p>Note too that we have defined the <code>isMatch</code> function for a <code>Person</code>.  We might define it like this:</p>

<pre><code>bool Person::isMatch(const std::string&amp; name, const std::string&amp; pw) const {
    return name == username &amp;&amp; pw == password;
}
</code></pre>

<p>Now instead of this code:</p>

<pre><code>bool verifyDoctorData(string username, string password) {
    for (auto doctor: doctors) {
        if (username == doctor-&gt;info.username &amp;&amp; password == doctor-&gt;info.password) {
            return true;
        }
    }
    return false;
}
</code></pre>

<p>We can write this:</p>

<pre><code>bool verifyDoctorData(std::string username, std::string password) {
    for (const auto&amp; doctor: doctors) {
        if (doctor-&gt;isMatch(username, password)) {
            return true;
        }
    }
    return false;
}
</code></pre>

<p>However, even better is the following suggestion.</p>

<h2>Use standard algorithms where practical</h2>

<p>Do we really need to have separate <code>verifyDoctorData</code> and <code>verifyStudentData</code>?  They're really nearly identical.  What I'd do instead is to use <code>std::none_of</code> or <code>std::any_of</code> and the function mentioned above.  So instead of this:</p>

<pre><code>if (role == 1 &amp;&amp; !verifyDoctorData(info.username, info.password)) {
    addUserInfo(role, info);
}
</code></pre>

<p>One could write this:</p>

<pre><code>if (role == 1 &amp;&amp; std::none_of(doctors.cbegin(), doctors.cend(), std::bind(&amp;Person::isMatch, std::placeholders::_1, username, password))) {
    addUserInfo(role, info);
}
</code></pre>

<p>Now there is no need at all to write a <code>verifyDoctorData</code> function.</p>

<h2>Use an <code>enum</code> where appropriate</h2>

<p>In the code above, instead of <code>role == 1</code>, wouldn't it make more sense to write <code>role == doctor</code>?  One could do that with an <code>enum</code>.  </p>

<p>There's much more, but this should be enough to get you started and to convey to you that learning C++ and learning OOP are not separate phases.</p>
    </div>