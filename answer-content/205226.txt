<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You say it "works fine" in all your tests, but you didn't show us the tests.</p>

<p>Unfortunately, it failed the very first test I wrote:</p>

<pre><code>#include &lt;gtest/gtest.h&gt;

TEST(length, zero)
{
    EXPECT_EQ(1, length(0));
}
</code></pre>

<p>Of the next batch, <code>one_minus</code> fails for the same reason:</p>

<pre><code>TEST(length, one)
{
    EXPECT_EQ(1, length(1.0));
}

TEST(length, one_plus)
{
    EXPECT_EQ(1, length(1.0 + 1e-12));
}

TEST(length, one_minus)
{
    EXPECT_EQ(1, length(1.0 - 1e-12));
}


TEST(length, two)
{
    EXPECT_EQ(1, length(2.0));
}

TEST(length, two_plus)
{
    EXPECT_EQ(1, length(2.0 + 1e-12));
}

TEST(length, two_minus)
{
    EXPECT_EQ(1, length(2.0 - 1e-12));
}


TEST(length, ten)
{
    EXPECT_EQ(2, length(10.0));
}

TEST(length, ten_plus)
{
    EXPECT_EQ(2, length(10.0 + 1e-12));
}

TEST(length, ten_minus)
{
    EXPECT_EQ(1, length(10.0 - 1e-12));
}
</code></pre>

<p>We can fix this by adding a simple check before the first division:</p>

<pre><code>if (number &lt; 0) number *= -1;
if (number &lt; 1) return 1;
</code></pre>

<p>Let's add some more tests:</p>

<pre><code>TEST(length, zillions)
{
    EXPECT_EQ(36, length(1.0e35));
}

TEST(length, negative_zillions)
{
    EXPECT_EQ(36, length(-1.0e35));
}
</code></pre>

<p>Now we just need some tests for invalid inputs (infinities, NaNs, etc) and we're golden.</p>

<hr>

<p>Let's look at the implementation now:</p>

<pre><code>while (number &gt; 1) {
    result++;
    number /= 10;
}
return result + (number == 1);
</code></pre>

<p>We can avoid adding <code>number == 1</code> if we include that case within the <code>while</code> loop:</p>

<pre><code>while (number &gt;= 1) {
    result++;
    number /= 10;
}
return result;
</code></pre>

<p>And our tests prove we haven't broken it.</p>

<p>We might now want to improve speed for large numbers: consider our <code>zillions</code> test that loops 36 times.  We could shorten that, at a very small cost to lower numbers by first looping (say) 6 digits at a time:</p>

<pre><code>int result = 0;
while (number &gt;= 1e6) {
    result += 6;
    number /= 1e6;
}
while (number &gt;= 1) {
    result++;
    number /= 10;
}
return result;
</code></pre>

<p>When I try this, it initially shows promise, but then fails the <code>zillions</code> tests with an off-by one error.  Is there a subtle difference in rounding between repeatedly dividing by ten and repeatedly dividing by a million when you're dealing with inexact numbers?  Actually, the problem is with our constant - <code>1.0e35</code> is most closely represented as <code>99999999999999999997871448567840768</code>, so we suffered a rounding error in our test - it happened that sequential division by ten introduces a rounding error that compensates for this, and we wrongly pass!</p>

<p>Which brings me neatly to the alternative implementation.  The most convenient tool for measuring digits in the integer part isn't in <code>&lt;math.h&gt;</code> at all - it's in <code>&lt;stdio.h&gt;</code>!  We can ask <code>printf</code> to measure the length for us:</p>

<pre><code>#include &lt;stdio.h&gt;

int length(double number)
{
    /* "unround" the number, as printf rounds to nearest */
    number += .5 - (number &gt; 0);
    /* format the sign, then subtract one, so we don't count
       minus as a digit */
    return snprintf(NULL, 0, "%+1.f", number) - 1;
}
</code></pre>

<p>Note that I've left the handling of NaNs and infinities in this version as an exercise...</p>
    </div>