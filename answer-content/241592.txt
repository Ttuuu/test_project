<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>With a great help from a <a href="https://www.quora.com/profile/Mark-Gritter" rel="nofollow noreferrer">mathematician (at least in spirit)</a> regarding permutations, factoradic and matrices, I could implement the following, which is 30 times faster. </p>

<p>I provide the opposite function as a bonus.</p>

<pre><code>def pmatrix2int(m):
    """Convert permutation matrix to number."""
    return fac2int(pmatrix2fac(m))


def int2pmatrix(big_number):
    """Convert number to permutation matrix."""
    return fac2pmatrix((int2fac(big_number)))


def pmatrix2fac(matrix):
    """Convert permutation matrix to factoradic number."""
    available = list(range(len(matrix)))
    digits = []
    for row in matrix:
        idx = available.index(row)
        del available[idx]
        digits.append(idx)
    return list(reversed(digits))


def fac2pmatrix(digits):
    """Convert factoradic number to permutation matrix."""
    available = list(range(len(digits)))
    mat = []
    for digit in reversed(digits):
        # print(digit, available)
        mat.append(available.pop(digit))
    return mat


def int2fac(number):
    """Convert decimal into factorial numeric system. Left-most is LSB."""
    i = 2
    res = [0]
    while number &gt; 0:
        number, r = divmod(number, i)
        res.append(r)
        i += 1
    return res


def fac2int(digits):
    """Convert factorial numeric system into decimal. Left-most is LSB."""
    radix = 1
    i = 1
    res = 0
    for digit in digits[1:]:
        res += digit * i
        radix += 1
        i *= radix
    return res
</code></pre>
    </div>