<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Here is an attempt to leverage Java's <code>BigInteger</code> class to implement the RSA algorithm, as well as md5 and sha512 hashing functions to generate keys for what I hope to be strong cryptography. My prayer is that some of my ideas are novel and not just wrong.</p>
</blockquote>

<p>If you start at cryptography, you should not start by making up your own schemes and <em>hoping</em> that they are correct. And you should write a paper in case you want to test your scheme, and clearly describe your goals and techniques. A code review is not what is expected for new schemes.</p>

<blockquote>
  <p>I apologize for the terrible naming of variables and methods, heinous runtime, useless commenting, unnecessary golfing, and using spaces over tabs.</p>
</blockquote>

<p>No, that's not how you develop. You should correctly name your variables, perform your spacing etc. <em>when writing</em> the program. Don't expect you get time to polish up your "proof of concept" and always expect that you need to share your code with others, if just to ask questions or to make sure it is readable after you've checked it into a shared code repository / versioning system such as Git.</p>

<p>Personally I prefer spaces over tabs, especially since that's more compatible with e.g. Markdown and other tools that expect text / disrespect tabs.</p>

<hr>

<pre><code>//seive array for lower 2b primes
</code></pre>

<p>Do a spellcheck or use an IDE that does this.</p>

<pre><code>  public static byte[] a = new byte[(Integer.MAX_VALUE/20)+1];
</code></pre>

<p>What is <code>a</code>? What is this 20? What is <code>1</code>? Why is <code>a</code> not a constant, written as <code>A</code>?</p>

<pre><code>  public static BigInteger p=BigInteger.ONE,q=BigInteger.ONE,t;
</code></pre>

<p>Statics are supposed to be constants. Don't use more than one statement per line unless there is a compelling reason to do otherwise. <code>t</code> is especially hidden here.</p>

<pre><code>  public static MessageDigest sha,md5;
</code></pre>

<p>You later use these instances to hide program state, don't do that.</p>

<pre><code>  public static int lp = 3; // last prime sieved
</code></pre>

<p>Place comments before the line, as they may disappear if you e.g. refactor the name <code>lp</code> into something that makes sense.</p>

<pre><code>  public static BigInteger h(byte[] ba, MessageDigest md){
</code></pre>

<p><code>ba</code> is not a good name as it doesn't tell what <code>ba</code> is used for. <code>seed</code> would probably be a better name.</p>

<pre><code>    BigInteger t=(new BigInteger(md.digest(ba))).abs().nextProbablePrime();
</code></pre>

<p>So you use a hash, then <code>abs</code> (probably not knowing about <code>new BigInteger(1, byte[])</code> and then go for <code>nextProbablePrime</code>, using <code>ba</code> for the entropy required to create a random prime. Ugh.</p>

<pre><code>    md.update(t.toByteArray());
</code></pre>

<p>Then, using a static method, you have an undocumented side effect in <code>md</code>, storing the state in a globally accessible class variable. Bad stuff all round.</p>

<pre><code>    BigInteger e,n,t,d,sec,cy,dec;
    byte[] a,ar;
    String secret;
    int itr, itr2; //itr: iterations
</code></pre>

<p>In Java, you declare the variables when you use them, not before, minimizing scope and therefore state you have to keep track of.</p>

<pre><code>    secret=args[1];
</code></pre>

<p>A string is not a secret but a password.</p>

<pre><code>    a=args[0].getBytes();
</code></pre>

<p>Here <code>a</code> depends on the platform default encoding, which differs in Java. Known bad practice.</p>

<pre><code>        sha = MessageDigest.getInstance("SHA-512");
        sha.update(a);
        md5 = MessageDigest.getInstance("MD5");
        md5.update(a);
</code></pre>

<p>Absolutely unclear why you need two hashes, and why you would ever use MD5 for anything new.</p>

<pre><code>    //generate primes from hash of string and its reverse
    p=p.multiply(h(a,sha)).nextProbablePrime();
    p=p.multiply(h(a,md5)).nextProbablePrime();
    p=p.multiply(h(ar,sha)).nextProbablePrime();
    p=p.multiply(h(ar,md5)).nextProbablePrime();
    sha.update(p.toByteArray());
    md5.update(p.toByteArray());
    q=q.multiply(h(ar,sha)).nextProbablePrime();
    q=q.multiply(h(ar,md5)).nextProbablePrime();
    sha.update(q.toByteArray());
    md5.update(q.toByteArray());
    q=q.multiply(h(a,sha)).nextProbablePrime();
    q=q.multiply(h(a,md5)).nextProbablePrime();
</code></pre>

<p>Great, now we have got no idea what is hashed or not, and it is not documented. Besides that, we call <code>nextProbablePrime()</code> as if it is a computationally efficient operation, which it definitely is <em>not</em>. As the input is only the amount of bytes in the hash operation, the result will be a list of tiny primes. Not useful at all. The variable reuse is horrid as well.</p>

<pre><code>    //increase computational time and ensure primality of p/q
    itr = p.mod(BigInteger.valueOf(1000)).intValue();
</code></pre>

<p>Why would you ever want to increase computation time? What are you trying to strengthen? What use is it if the result is only in the range 0..999, something that can be easily brute forced?</p>

<pre><code>    itr2 = 1000-itr;
    for(int i = 1;i&lt;itr;i++)p=p.nextProbablePrime();
    for(int x = 1;x&lt;itr2;x++)q=q.nextProbablePrime();
    while(!p.isProbablePrime(Integer.MAX_VALUE))p=p.nextProbablePrime();
    while(!q.isProbablePrime(Integer.MAX_VALUE))q=q.nextProbablePrime();
</code></pre>

<p>Whatever. Why?</p>

<p>Got bored. Encryption and decryption (using raw, insecure RSA) in the same method. Trash programming, no clear description. Exceptionally bad exception handling. The variable <code>secret</code> holds the plaintext, normally I would stop reading at <em>that</em>.</p>

<p>Don't see any "meat" in there because I have no idea what you are even trying to accomplish.</p>

<p>Start by learning cryptography and take a few lessons in structured programming. Then Effective Java and a style guide or two. Start over and post again when you're done, because this should put some blushes on your face. If it doesn't now, it will when you've studied these fields. You are just not ready what you've tried in the question.</p>
    </div>