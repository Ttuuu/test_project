<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is probably more in the spirit of functional programming to use pattern matches instead of long guard lists where possible. Your first function also has a few overlapping cases that could be eliminated in the interest of brevity:</p>

<pre><code>showFraction _ 0 = error "Division by zero."
showFraction 0 _ = "0"
showFraction n 1 = show n
showFraction n d = show n ++ "/" ++ show d
</code></pre>

<hr>

<p>Another simple change would be to exploit that <code>foldr1 (\acc x -&gt; acc ++ "," ++ x)</code> is simply <code>intercalate ','</code>, which you get from <code>Data.List</code>. In a somewhat similar fashion, you could also replace <code>foldr1 (\acc x -&gt; acc ++ ",\n" ++ x)</code> by <code>concat . intersperse ",\n"</code>.</p>

<p>The result would look like follows:</p>

<pre><code>dctRow j n = "{" ++ intercalate ',' [dctElement j x n | x &lt;- [0..n - 1]] ++ "}"
dctMatrix n = "{" ++ concat (intersperse ",\n" [dctRow x n | x &lt;- [0..n - 1]]) ++ "}"
</code></pre>

<p>Which in my opinion is more readable than the manual folds.</p>

<hr>

<p>A more involved change would be to try to get rid of the <span class="math-container">\$O(n^2)\$</span> behaviour you will get from overusing <code>(++)</code>. The background here is that <code>(++)</code> needs to make a full copy of the first operand in order to append the second one.</p>

<p>A fun functional way of improving this is to replace string concatenation by function composition:</p>

<pre><code>showFraction :: Int -&gt; Int -&gt; String -&gt; String
showFraction _ 0 = error "Division by zero."
showFraction 0 _ = ('0':)
showFraction n 1 = shows n
showFraction n d = shows n . ('/':) . shows d
</code></pre>

<p>So instead of a function that constructs a string, this is a function that <em>prepends</em> the string representation to a string passed as parameter. The nice thing about this is that you can simply compose these functions together in order to build bigger strings. As prepending doesn't require copying of the "tail" end in Haskell, this means that every part of the result string will be constructed exactly once!</p>

<p>Here is how to write the folds in this style:</p>

<pre><code>applyInter f = flip (foldr ($)) . intersperse f
dctRow j n = ('{':) . applyInter (',':) [dctElement j x n | x &lt;- [0..n - 1]] . ('}':)
</code></pre>

<p>(Realize that <code>flip (foldr ($)) [f,g,h]</code> is simply <code>f . g . h</code>)</p>

<p>Note however that while this indeed has <span class="math-container">\$O(n)\$</span> complexity, it is still not very efficient. This is due to GHC probably selecting a bad arity for some of the functions in question, as well as <code>String</code> not being very fast in the first place. For constructing strings fast, it's probably a better idea to use <code>Data.Text</code> and/or a special builder library like blaze-builder.</p>
    </div>