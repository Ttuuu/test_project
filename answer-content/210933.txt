<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are several areas for improvement.</p>
<h3>SQL injection.</h3>
<p>There is a fair possibility for the SQL injection. You are adding variables (namely array keys) into SQL query <em>absolutely untreated</em>, which is a big red flag.</p>
<p>Although your intended usage scenario is safe, but you cannot foresee any possible use case. There was an <a href="https://blog.ircmaxell.com/2014/10/a-lesson-in-security.html" rel="nofollow noreferrer">infamous SQL injection in Drupal 7</a> that used a code almost identical to yours - an array key is put into the query untreated. As you can see, it led to a severe vulnerability. Therefore, your function ought to offer a 100% safe query execution, no matter how it's called.</p>
<p>However, the best solution you can get will question the function's existence itself. Because the best way to protect the field names is to whitelist them, but the best way to whitelist table fields is... to list them explicitly in the query. And if you list them in the query, there will be no need for such a function at all. It shouldn't be a problem, however, as you are going to list your field names right in the code this way or another. Given you can use positional placeholders, the code could be reasonably small:</p>
<pre><code>    DB::query('INSERT INTO posts (name, content) VALUES (?,?)', [
        $_POST['postName'], $_POST['postContent']
    ]);
</code></pre>
<p>Whereas a function like <code>DB::insert()</code> could be justified not as a free-to-use function, but as method belongs to an ORM, that operates a predefined set of object's properties only. In this case, when it's guaranteed that only predefined field names are allowed to the query, such a function could be used safely.</p>
<p>If you are 100% determined to use this function as is, at least <strong>make sure you are <a href="https://phpdelusions.net/pdo#identifiers" rel="nofollow noreferrer">quoting and escaping field and table names properly</a></strong>.</p>
<h3>Error reporting</h3>
<p>The error reporting is completely flawed in this function. It tells everyone that you don't even consider your site to go live. Because present error reporting is only useful for the single-user dev mode, while it would be completely useless (and even harmful) on a live site. I've got a <a href="https://phpdelusions.net/articles/error_reporting" rel="nofollow noreferrer">comprehensive guide on PHP error reporting</a>, but in short, you must leave an error/exception alone and let it to bubble up to the site-wide handler, instead of catching it on the spot.</p>
<h3>A generic query function.</h3>
<p>From the code of your function it is evident that you don't have a generic query function (or you don't reuse its code which is equally bad). There should be a function that accepts a query and an array with parameters, and returns a statement:</p>
<pre><code>public static function query($query, $data = [])
{
    $statement = static::$connection-&gt;prepare($query);
    $statement-&gt;execute($data);
    return $statement;
}
</code></pre>
<p>and then it could be used in your insert() method (as well as in many other methods):</p>
<pre><code>$query = "INSERT INTO $table ($columnsString) VALUES ($valuesPlaceholder)";
static::query($query, $valuesArray);
</code></pre>
<p>(but again - remember that $table and values in $columnsString must be either quoted/escaped or - preferably - hardcoded in the class definition).</p>
<h3>A proper Model</h3>
<p>Your code hints that you are intending to follow the MVC pattern. However, the code in your controller is not reusable, it means that the pattern is broken. Imagine you are going to create a command-line utility to create posts. Or any other method like creating a post through e-mail. You will inevitably duplicate this insert call, which is against the very purpose of the MVC pattern.</p>
<p>So, to make it proper, you must create a Post Service with a create() method in it, whic would be called in your Controller. It will make your Controller thin, and the insert code reusable.</p>
    </div>