<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>string sourceFile = System.IO.Path.Combine(demoFileLocation, fileName);
string destFile = System.IO.Path.Combine(liveFileLocation, fileName);
if (!System.IO.Directory.Exists(demoFileLocation))
{
    resultStatus.ResultType = Result.Code.Error;
    resultStatus.Message = "Files cannot be located";
    return resultStatus;
}  
</code></pre>
</blockquote>

<ul>
<li>It would be better to check wether <code>sourceFile</code> exists than checking if the directory exists.  </li>
<li>Sometimes it may be a good thing to have a <code>else</code> but usually it is not needed if you <code>return</code> inside the <code>if</code>.    

<hr></li>
</ul>

<p>Inside the <code>else</code> you have   </p>

<pre><code>byte[] buffer = new byte[4097];  
</code></pre>

<p>which initialise the <code>buffer</code> to contain <code>4097</code> bytes acessible from <code>[0]..[4096</code>. It would be better performance wise to have <code>new byte [4096]</code>  </p>

<hr>

<p>Both streams</p>

<blockquote>
<pre><code>FileStream fileStream = file.OpenRead();
Stream stream = request.GetRequestStream();  
</code></pre>
</blockquote>

<p>are implenting the <code>IDisposable</code> interface. Therefor you should enclose them inside a <code>using</code> block to properly dispose and closing them. Having them inside a <code>using</code> block will dispose them as well if there is an exception beeing thrown.</p>

<hr>

<blockquote>
<pre><code>FtpWebResponse response = (FtpWebResponse)request.GetResponse();
response.Close();  
</code></pre>
</blockquote>

<p>This doesn't buy you anything because you aren't using it. You can remove it without problem.  </p>

<hr>
    </div>