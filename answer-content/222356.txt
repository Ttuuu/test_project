<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Using the String constant LOCAL_TIME_ZONE_STRING_REPRESENTATION, any user who wishes to compile the code can specify which time zone they want the code to run in, rather than it try to use Window's local time zone.</p>
</blockquote>

<p>I think this is not the right way to provide flexibility. Lets say you sell your application to three different customers that want three different <code>LOCAL_TIME_ZONE</code>, then you'll have to compile the application three times. Do yourself the favor and place this as a setting in a configuration file or database. And what if the application is to be used world wide by a global customer? Do you plan to use the same time zone in all their offices?</p>

<hr>

<blockquote>
<pre><code>    public static DateTime ConvertToUtcDateTime(DateTime dateAndTime)
    {
        return TimeZoneInfo.ConvertTime(dateAndTime, LOCAL_TIME_ZONE).ToUniversalTime();
    }
</code></pre>
</blockquote>

<p>I don't think this is working correctly: </p>

<p>A <code>DateTime</code> object can either represent a local time which is always regarded as  local according to the system settings or a UTC time if created with kind = <code>DateTimeKind.Utc</code> - seen from the <code>DateTime</code> api.</p>

<p>Let say <code>LOCAL_TIME_ZONE_STRING_REPRESENTATION = "GMT Standard Time";</code> and the system time zone = <code>"Romance Standard Time" (+01.00)</code>.</p>

<p>Because <code>TimeZoneInfo.ConvertTime(dateAndTime, LOCAL_TIME_ZONE)</code> converts from local time (<code>Romance Standard Time</code>), it converts </p>

<pre><code>DateTime inputDate = new DateTime(2019, 3, 1, 15, 30, 0);
</code></pre>

<p>to</p>

<pre><code>01-03-2019 14:30:00
</code></pre>

<p>and the call to <code>ToUniversalTime()</code> converts it further to:</p>

<pre><code>01-03-2019 13:30:00
</code></pre>

<p>because this too anticipate the <code>DateTime</code> object to be in local time, which is <code>"Romance Standard Time"</code> and not <code>"GMT Standard Time"</code>. </p>

<p>But if you - as you write in the explanation to the method - expect the input date time object to be in <code>LOCAL_TIME_ZONE</code>, no change should occur, because <code>GMT = UTC</code>.</p>

<p>To do it correctly I'll suggest this approach if the input <code>DateTime</code> object is still expected to be in <code>LOCAL_TIME_ZONE</code>:</p>

<pre><code>public static DateTime ConvertToUtcDateTime(DateTime dateAndTime)
{
  return TimeZoneInfo.ConvertTimeToUtc(dateAndTime, LOCAL_TIME_ZONE);
}
</code></pre>

<hr>

<p>That said, if I were you, I would reconsider the whole setup thoroughly before using it in a larger scale. Dates, Times and globalization in general is rather complicated, so do yourself the favor to read and test a lot before taking a concept into use that is not just relying on the system. A place to start reading could be <a href="https://docs.microsoft.com/en-us/dotnet/standard/datetime/converting-between-time-zones?view=netframework-4.8" rel="nofollow noreferrer">here</a>.</p>
    </div>