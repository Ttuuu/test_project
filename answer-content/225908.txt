<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a couple of remarks:</p>

<ul>
<li><p>You should add a newline after the last line:</p>

<pre><code>  $ ./nh
  First char match index: 18
  Char: t
  Exist count: 1
  Exist count: 2
  Exist count: 3
  Exist count: 4
  Position: 18 $
</code></pre></li>
<li><p>I don't know what compiler you use but with when compiled with <code>gcc</code> and <code>-Wall -Wextra -pedantic</code> you get:</p>

<pre><code>gcc -O2 nh.c -lm -o nh -Wall -Wextra -pedantic
nh.c: In function ‘contains’:
nh.c:25:15: warning: unused variable ‘j’ [-Wunused-variable]
 size_t i, j;
           ^
</code></pre></li>
<li><p>Code formatting should be more consistent. For example, in this line you put a whitespace before <code>needle</code> but don't put a whitespace before <code>haystack</code>:</p>

<pre><code>size_t contains(const char * needle, const char *haystack);
</code></pre></li>
<li><p><code>%lu</code> is not a portable specifier for <code>size_t</code> type, you should use <code>%zu</code> introduced in C99.</p></li>
<li><p>You said:</p></li>
</ul>

<blockquote>
  <p>returns the position if it does or 0 if it doesn't, unless the
  position is 0 in which case, it won't be located.</p>
</blockquote>

<p>This is really not good. For example, with this it returns 0:</p>

<pre><code>char *needle = "This";
char *haystack = "This is a dinosaurtest.";
</code></pre>

<p>With this, it also returns zero:</p>

<pre><code>char *needle = "non-existent";
char *haystack = "This is a dinosaurtest.";
</code></pre>

<p>You can't tell the difference between success and failure in this two
examples. Actually, <code>atoi()</code> has the same problem. I don't know what
operating system you use but maybe you could use <code>ssize_t</code> as the
return type if it's available and return -1 in case of failure.</p>
    </div>