<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is reasonably good. There are some inefficiencies and small bug that doesn't affect the result. </p>

<h2>Bug</h2>

<p><code>!in.eof()</code>, <code>.eof()</code> is never true until its read. It should be the getline instead.</p>

<h2>Inefficiencies</h2>

<ul>
<li>reading line by line</li>
</ul>

<p>It is in general better to just read into string variable, it is clearer and probably more efficient.</p>

<ul>
<li>Manually closing the file</li>
</ul>

<p>Standard file streams close themselves when they get out of scope, which end of <code>main</code> in this case.</p>

<h2>Alternative implementation</h2>

<p>Now, lets eliminate the main culprit, string validity check:</p>

<pre><code>bool is_valid_word(std::string_view word) {
    for (char letter: word) {
        switch (letter) {
            case 'g':
            case 'k':
            case 'm':
            case 'q':
            case 'v':
            case 'w':
            case 'x':
            case 'z':
                return false;
            default:
                ; //silence warnings
        }
    }

    return true;
}
</code></pre>

<p>The main change is to use jump table (switch statement) with fallthrough. The other change is to use <code>std::string_view</code>, immutable non owning view into string.</p>

<p>The next thing to care about is iteration through the file. My personal preference is to use a pair of iterators:</p>

<pre><code>std::ifstream file("words.txt");
auto first = std::istream_iterator&lt;std::string&gt;(file);
auto last = std::istream_iterator&lt;std::string&gt;();
</code></pre>

<p>And the algorithm itself:</p>

<pre><code>template &lt;typename InputIterator&gt;
std::string longest_valid_word(InputIterator first, InputIterator last) {
    std::string longest_word;
    while (first != last) {
        if (first-&gt;size() &gt; longest_word.size() &amp;&amp; is_valid_word(*first)) {
            longest_word = *first;
        }
        ++first;
    }

    return longest_word;
}
</code></pre>

<p>Note that the above algorithm can run on anything that provides a pair of iterators, e.g. <code>std::vector</code>, <code>std::list</code>, etc.</p>

<hr>

<h2>Full code</h2>

<p>No demo for this post, as I don't want to put the weight onto wandbox:</p>

<pre><code>#include &lt;string_view&gt;
#include &lt;utility&gt;
#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;iterator&gt;
#include &lt;chrono&gt;
#include &lt;atomic&gt;
#include &lt;iostream&gt;

bool is_valid_word(std::string_view word) {
    for (char letter: word) {
        switch (letter) {
            case 'g':
            case 'k':
            case 'm':
            case 'q':
            case 'v':
            case 'w':
            case 'x':
            case 'z':
                return false;
            default:
                ; //silence warnings
        }
    }

    return true;
}

template &lt;typename InputIterator&gt;
std::string longest_valid_word(InputIterator first, InputIterator last) {
    std::string longest_word;
    while (first != last) {
        if (first-&gt;size() &gt; longest_word.size() &amp;&amp; is_valid_word(*first)) {
            longest_word = *first;
        }
        ++first;
    }

    return longest_word;
}

int main() {
    std::ifstream file("words.txt");

    using namespace std::chrono;
    auto start_time = system_clock::now();
    //std::atomic_thread_fence(std::memory_order_seq_cst);
    auto found_word = longest_valid_word(std::istream_iterator&lt;std::string&gt;(file), {});
    //std::atomic_thread_fence(std::memory_order_seq_cst);
    auto end_time = system_clock::now();

    auto duration = duration_cast&lt;milliseconds&gt;(end_time - start_time);

    std::cout &lt;&lt; "[" &lt;&lt; duration.count() &lt;&lt; "ms] "
              &lt;&lt; found_word &lt;&lt; std::endl;
}
</code></pre>

<p>The atomic thread fences can be uncommented, but they don't really change much in this case. It is probably bottlenecked by performance of my SSD and of <code>std::ifstream</code>.</p>

<hr>

<h2>Conclusion</h2>

<p><s>Well, I got around 90-100 milliseconds on my machine. I've got no idea why it runs so slowly, but I've exhausted my sane ideas. The other one would be to do some manual parsing of the file, which is much harder.</s></p>

<p>Of course it didn't go as I expected :) this is what happens when optimizations are done in a rush. Let me break down why the code above is slower than what Toby and Edward (my speculations from results, of course):</p>

<ul>
<li><p><code>std::getline</code> is faster than using <code>std::istream_iterator&lt;std::string&gt;</code></p></li>
<li><p>using jump table or just using array of bad letters make no difference whatsoever on my timings</p></li>
</ul>

<h2>Different version of alternative approach (uses <code>std::getline</code>)</h2>

<pre><code>std::string longest_valid_word(std::ifstream&amp; is) {
    std::string buffer;
    std::string longest_word;
    while (std::getline(is, buffer)) {
        if (buffer.size() &gt; longest_word.size() &amp;&amp; is_valid_word(buffer)) {
            longest_word = buffer;
        }
    }

    return longest_word;
}
</code></pre>

<p>Just paste the function into the code and call it with the file stream, instead of calling the one with iterators.</p>
    </div>