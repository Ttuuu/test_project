<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The use of arrow functions looks okay to me. One advantage to using them is that they can be simplified to a single line but one might hold the opinion that is less readable.</p>
<p>For example:</p>
<blockquote>
<pre><code>app.get('/welcome', (req, res) =&gt; {
  res.render('pages/welcome');
});
</code></pre>
</blockquote>
<p>Could be simplified to:</p>
<pre><code>app.get('/welcome', (req, res) =&gt; res.render('pages/welcome'));
</code></pre>
<p>Note that while the return value isn’t used, the single line arrow function returns the value of the single expression.</p>
<hr>
<p>There is a common convention in JavaScript and many other languages to put constant names in All_CAPS- so the name <code>saltRounds</code> would be changed to <code>SALT_ROUNDS</code> instead.</p>
<hr>
<p>There is a single use variable <code>user</code> here:</p>
<blockquote>
<pre><code>userSchema.pre('save', function(next) {
  const user = this;
</code></pre>
</blockquote>
<p>I often see code like this when there is a need to reference the context of <code>this</code> in a different function context, but that doesn’t appear to be the case. If it was the case, arrow functions or <code>Function.bind()</code> could eliminate that need.</p>
<p>Why not just use <code>this</code> in the one spot <code>user</code> is used?</p>
<hr>
<p>One possibility to reduce the nesting levels is to use <code>async</code> functions- refer to <a href="https://zellwk.com/blog/async-await-express/" rel="nofollow noreferrer">this article</a> for more information.</p>
    </div>