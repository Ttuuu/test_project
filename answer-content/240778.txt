<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a <code>fn</code> which creates the internal object. Maybe call it something more precise, like <code>Collection</code> or <code>MakeCollection</code>. Since the argument to the <code>fn</code> will be an array or an NodeList, you can concisely assign each property of the argument to the instance with <code>Object.assign</code>, no need for manual iteration.</p>

<p>When possible, consider using dot notation instead of bracket notation - dot notation is shorter, easier to read, and works better with minifiers. See the <a href="https://eslint.org/docs/rules/dot-notation" rel="nofollow noreferrer">eslint rule</a>.</p>

<p>Right now, you're creating new methods for the instance every time the library is called. It would be more efficient to put them on the prototype instead, eg:</p>

<pre><code>_o.fn.prototype.eq = function(num) {
  // ...
</code></pre>

<p>But since it's 2020, it would make sense to <em>at least</em> write with modern ES2015 syntax, and use a <code>class</code>:</p>

<pre><code>class Collection {
  constructor() {
    // ...
  }
  eq(num) {
    // ...
  }
</code></pre>

<p>Using modern syntax often makes code more concise and easier to read, which means less surface area for bugs, as well as more methods available for use. If you need compatibility for obsolete 6+ year old browsers, use <a href="https://babeljs.io/" rel="nofollow noreferrer">Babel</a> to transpile it into ES5 syntax automatically for production (but keep your source code modern!).</p>

<p>In your <code>eq</code> method, something else that keeps code easy to read is when variables aren't reassigned unnecessarily. For example, if you see a variable created at line 5, and you see it used on line 25, if you aren't sure if you're reassigned it, you'll have to look closely to each line 6-24 to be absolutely certain of its value at 25. But even with that, I'm quite doubtful that the numeric verification in the <code>eq</code> provides any benefits - not even jQuery does such a thing. I think you may as well just return the <code>num</code> property on the instance. Worst-case, if the user provides an invalid argument, they'll get <code>undefined</code> in return, which is probably fine as-is.</p>

<pre><code>eq(num) {
  return this[num];
}
</code></pre>

<p>Though, if you wanted to emulate jQuery, <code>eq</code> should return a <em>new collection</em>, including the wrapper, not the underlying element:</p>

<pre><code>eq(num) {
  return new Collection(this[num]);
}
</code></pre>

<p>If you want the library to be similar to jQuery, something that would be helpful would be if it doesn't throw when the collection is empty. If the <code>elms</code> turn out to be empty, currently, you return <code>null</code>, which means that to be safe, a consumer of the library would often enough have to do something like:</p>

<pre><code>const $elms = $('.foo');
if ($elms) {
  $elms.display('inline-block');
}
</code></pre>

<p>instead of unconditionally calling <code>$('.foo').display('inline-block')</code>, which looks <em>much</em> cleaner. The <code>first</code> method has the same issue, though if this is deliberate, that's fine.</p>

<p>Your <code>first</code> method is doing something <em>markedly different</em> from jQuery's - yours takes a selector and searches for a descendant matching the selector, while jQuery's doesn't (jQuery's just extracts the first element in the collection). For those already experienced with jQuery, this has good potential to cause confusion. To find a selector-matching descendant of the first element in the collection, consider renaming your method, maybe to something like <code>firstDescendant</code>.</p>

<p>In each of your class methods, rather than assigning to <code>f_condition</code> if it doesn't exist on the first line:</p>

<pre><code>addClass(className, f_condition) {
  f_condition = f_condition || function() {
    return true;
  };
</code></pre>

<p>Consider using default arguments instead:</p>

<pre><code>addClass(className, f_condition = () =&gt; true) {
</code></pre>

<p>An option to make your <code>addClass</code>, <code>removeClass</code>, <code>toggleClass</code>, and <code>display</code> loops less repetitive would be to have a helper function which iterates over all elements in the collection, and executes a callback if a test provided by a different callback is passed:</p>

<pre><code>_iterate(test, callback) {
  for (let i = 0; i &lt; this.length; i++) {
    if (test(this[i], i, this)) {
      callback(this[i]);
    }
  }
}
addClass(className, f_condition = () =&gt; true) {
  this._iterate(f_condition, elm =&gt; elm.classList.add(className));
  return this;
}
</code></pre>

<p>For the <code>display</code> method, argument overloading is a bit messy in Javascript. You can do it if you want, but I think the code's logic would be easier to follow <em>and</em> it would make more intuitive sense to consumers if an object with multiple optional properties was passed instead:</p>

<pre><code>display({ newDisplay = 'block', test = () =&gt; true } = {}) {
  this._iterate(test, elm =&gt; elm.style.display = newDisplay)
  return this;
}
</code></pre>

<p>Another benefit to this is that you don't need to reassign anything.</p>

<p>Put it all together:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>;(function() {
  window._o = function(selector) {
    if (!selector) {
      throw new Error("Cannot create Object from " + selector);
    }
    return new _o.Collection(
      selector instanceof HTMLElement
        ? [selector]
        : document.querySelectorAll(selector)
    );
  }
  _o.Collection = class Collection {
    constructor(elems) {
      Object.assign(this, elems);
      this.length = elems?.length || 0;
    }
    *[Symbol.iterator]() {
      for (let i = 0; i &lt; this.length; i++) {
        yield this[i];
      }
    }
    eq(num) {
      return new Collection(this[num]);
    }
    first() {
      return new Collection(this[0]);
    }
    firstDescendant(selector) {
      // don't forget to check if elms[0] exists first:
      return new Collection(this[0]?.querySelector(selector));
    }
    
    _iterate(test, callback) {
      for (let i = 0; i &lt; this.length; i++) {
        if (test(this[i], i, this)) {
          callback(this[i]);
        }
      }
    }
    /***/
    /* className features */
    addClass(className, f_condition = () =&gt; true) {
      this._iterate(f_condition, elm =&gt; elm.classList.add(className));
      return this;
    }
    removeClass(className, f_condition = () =&gt; true) {
      this._iterate(f_condition, elm =&gt; elm.classList.remove(className));
      return this;
    }
    toggleClass(className, f_condition = () =&gt; true) {
      this._iterate(f_condition, elm =&gt; elm.classList.toggle(className));
      return this;
    }

    /***/
    /* show - hide */
    display({ newDisplay = 'block', test = () =&gt; true } = {}) {
      this._iterate(test, elm =&gt; elm.style.display = newDisplay)
      return this;
    }
  };
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>.demo {
  width: 50px;
  height: 50px;
  margin: 5px;
  background: orange;
}

.blue {
  background: #045acf;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div class="demo"&gt;&lt;/div&gt;
&lt;div class="demo"&gt;&lt;/div&gt;
&lt;div class="demo"&gt;&lt;/div&gt;
&lt;div class="demo"&gt;&lt;/div&gt;
&lt;div class="demo"&gt;&lt;/div&gt;
&lt;div class="demo"&gt;&lt;/div&gt;
&lt;div class="demo"&gt;&lt;/div&gt;

&lt;script&gt;
  setTimeout(function() {
    // Test to make sure selecting non-existent elements doesn't throw:
    _o('foo')
      .first()
      .eq(0)
      .firstDescendant('bar')
      .addClass('blue');
    _o('.demo').addClass('blue', (e, i) =&gt; i % 2).display({ newDisplay: 'inline-block' });
  });
&lt;/script&gt;</code></pre>
</div>
</div>


<blockquote>
  <p>write a separate mini-library before the main code?</p>
</blockquote>

<p>You can if you want a bit more experience figuring out how such a library would be made, but for anything you expect to <em>maintain</em> (or that others will maintain), I'd recommend using one of the common libraries that are already tried-and-tested and have thorough documentation, Q+A, and support (like jQuery). Otherwise, any reader of the code will first have to internalize <em>your</em> library before actually getting to any of the meat of what the main script does. It's a good amount of overhead without any real benefit. Not that you can't create helper functions (or an object of helper functions) for yourself, but it's not the best idea to reinvent the wheel with serious code.</p>
    </div>