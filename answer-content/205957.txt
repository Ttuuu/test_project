<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review and alternatives.</h1>
<ul>
<li>Use strict mode. This should go without saying, however I add it as a point in reviews when I see bugs or potencial bugs that would be caught easily.</li>
<li>Never use a variable that has not been declared. An example in your code is <code>encode</code> and if you were in strict mode you would have found it before you posted the review.</li>
<li>Use constants when the variable does not change. In your example you declare <code>result</code> as a variable, and define it as an array. But you never change the variable. It should be declared as a constant. <code>const result = [];</code></li>
<li>Comments are bad. They clutter up the source and are seldom of any help. Only coders will read your code and stating the obvious helps no one, and creating ambiguity via comments is dangerous. See more on comments below</li>
<li>Don't clutter your source with redundant code, less is best.</li>
<li>Don't repeat. You have the variable <code>len</code> and the only time you use it you subtract 1 from it, repeating computations for no reason. Better to subtract the one when you define the value <code>const lastIdx = array.length;</code></li>
<li>When iterating use <code>for of</code> loops in favour of array methods as they are slightly quicker, can be exited early unlike many array methods, and tend to be more suited to the logic and need of the code.</li>
</ul>
<h2>Don't use JSON to compare.</h2>
<ul>
<li>JSON.stringify is slow and should not be used unless you are saving or transporting data.</li>
<li>JSON.stringify will throw on cyclic references, meaning your compare function can throw even though the code state is good.</li>
<li>JSON.stringify converts undefined array <code>items</code> to null, meaning that is you compare <code>[undefined]</code> and <code>[null]</code> they will be equal.</li>
<li>JSON.stringify can be customised and thus there is no guarantee that it accurately reflects the data content.</li>
</ul>
<p>Run length encoding is about the equality of items. A more detailed comparison will make for a better encoder. See rewrites for two examples.</p>
<h2>Redundent code</h2>
<p>You had</p>
<blockquote>
<pre><code>   arrayEquals = (...arr) =&gt; {
     return arr[0].map(x =&gt; {
       return JSON.stringify(x);
     }).every((x, _, a) =&gt; {
       return x === a[0];
     });   
   };
</code></pre>
</blockquote>
<p>The returns are not needed</p>
<pre><code>const arrayEquals = (...arr) =&gt; arr[0].map(x =&gt; JSON.stringify(x)).every((x, _, a) =&gt; x === a[0]);
</code></pre>
<p>or</p>
<pre><code>const arrayEquals = (...arr) =&gt; {
    return arr[0]
        .map(x =&gt; JSON.stringify(x))
        .every((x, _, a) =&gt; x === a[0]);
};
</code></pre>
<p>or</p>
<pre><code>const arrayEquals = (...arr) =&gt; {
    return arr[0].map(x =&gt; JSON.stringify(x)).every((x, _, a) =&gt; x === a[0]);
};
</code></pre>
<h2>Comments</h2>
<p>Comments are rare and only when the immediate code (within eye shoot) is lacking needed abstract context, or has side effects beyond the scope of the current context.</p>
<p>Comment are not checked or vetted, and can remain in source even when the code that is commented has changed.</p>
<p>This mean it is easy for comments to lie, and an old comment can make your intent ambiguous. This is very dangerous when you later make changes, what do you believe the comment or the code.</p>
<p>If you feel some code needs a comment, before adding a comment ask yourself "Can I change the naming to make the code more readable?" Most of the time the answer will be yes.</p>
<p>Example of a poor comment in your code</p>
<pre><code>  // if current value differs from last
  if (i !== len - 1) {
</code></pre>
<p>The comment is confusing, <code>i</code> is an index, <code> \\ current val</code> infers a data value, and <code>\\ last</code> is obscure so anyone reading the comment  will still have to find <code>len</code> to workout what it is anyway</p>
<p>You could have commented</p>
<pre><code>  if (i !== len - 1) { // is not last index
      
</code></pre>
<p>or better let the code say it all</p>
<pre><code>  if (i !== arrayLen - 1) {
</code></pre>
<p>Personally I use <code>idx</code> for callback indexes, rather than <code>i</code> and resurve <code>i</code>, <code>j</code>, <code>k</code> for use in loops only.</p>
<p>Example of stating the obvious in your code</p>
<pre><code>count = 0; // reset the count
    
</code></pre>
<p>Does that code really need clarification?</p>
<h2>Rewrites</h2>
<p>The following rewrites simplify the encoding, while making the comparison more robust.</p>
<p>There are two versions. The first is cyclic unsafe and will throw a range error if the array contains references to itself. The second uses a depth limit to stop endless recursion marking such items as equal.</p>
<p>Cyclic unsafe version</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const runLengthEncode = array =&gt; {
    "use strict";
    const result = [];
    var item, i = 0;    
    
    const isArr = arr =&gt; Array.isArray(arr);
    const compare = (item1, item2) =&gt; {
        if (isArr(item1) &amp;&amp; isArr(item2)) {
            if (item1.length === item2.length) {
                for (let i = 0; i &lt; item1.length; i++) {
                    if (!compare(item1[i], item2[i])) { return false }
                }
            } else { return false }
        }else if(item1 !== item2) { return false }
        return true;
    }
    
    while (i &lt; array.length) {
        if (item &amp;&amp; compare(item[1], array[i])) { item[0] += 1 }
        else { result.push(item = [1, array[i]]) }
        i += 1;
    }
    
    return result;
}






// From here down is support code not part of answer
const array2Str = arr =&gt; "[" + arr.map(d =&gt; Array.isArray(d) ? array2Str(d) : d) + "]";
const log= data =&gt; { const div = document.createElement("div"); div.textContent = data; logEl.appendChild(div)}
const encode = d =&gt; {
   log("-------------------");
   log("Data " + array2Str(d));
   log("encode as " + array2Str(runLengthEncode(d)));
   
}
log(encode ([1, 1, 2, 2, 3, 3, 3, 3, 4]));
log(encode ([4, 4, 4, 4, 4]));
log(encode ([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]));
log(encode ([[1, 2, 3], [1, 2, 3], [4, 5, 6]]));
log(encode ([[0], [0], [1], [2, 3], [4, 5, 6], [], []]));</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code id="logEl"&gt;&lt;/code&gt;</code></pre>
</div>
</div>

<p>Example 2 cyclic safe.</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>"use strict";
const runLengthEncode = (array, maxDepth = 4) =&gt; {
    const result = [];
    var item, i = 0, depth = 0;    

    const isArr = arr =&gt; Array.isArray(arr);
    const compare = (item1, item2) =&gt; {
        var res = true;
        if (depth++ &lt; maxDepth) {
            if (isArr(item1) &amp;&amp; isArr(item2)) {
                if (item1.length === item2.length) {
                    for (let i = 0; i &lt; item1.length &amp;&amp; res; i++) {
                        if (!compare(item1[i], item2[i])) { res = false }
                    }
                } else { res = false }
            }else if(item1 !== item2) { res = false }
        }
        depth --;
        return res;
    }
    const compareItems = (item1, item2) =&gt; (depth = 0, compare(item1, item2));

    while(i &lt; array.length){
        if (item &amp;&amp; compareItems(item[1], array[i])) { item[0] += 1 }
        else { result.push(item = [1, array[i]]) }
        i += 1;
    }

    return result;
}





















// From here down is support code not part of answer

const array2Str = arr =&gt; "[" + arr.map(d =&gt; Array.isArray(d) ? array2Str(d) : d) + "]";
const log= data =&gt; { const div = document.createElement("div"); div.textContent = data; logEl.appendChild(div)}
const encode = d =&gt; {
   log("-------------------");
   log("Data " + array2Str(d));
   log("encode as " + array2Str(runLengthEncode(d)));
   
}
const encodeC = d =&gt; {
   log("--Cyclic test (arrays not formated and Cyclic arrays return empty strings) ----------");
   log("Data " + d);
   log("encode as " + runLengthEncode(d));
}

log("Test cyclic array");
var a = [1,a];
a.push(a);
log(encodeC ([a, a, a]));
log("-------------------");
log("Standard tests");

log(encode ([1, 1, 2, 2, 3, 3, 3, 3, 4]));
log(encode ([4, 4, 4, 4, 4]));
log(encode ([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]));
log(encode ([[1, 2, 3], [1, 2, 3], [4, 5, 6]]));
log(encode ([[0], [0], [1], [2, 3], [4, 5, 6], [], []]));</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;code id="logEl"&gt;&lt;/code&gt;</code></pre>
</div>
</div>

    </div>