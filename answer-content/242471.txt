<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What you want is a <code>Furniture</code> class:</p>

<pre class="lang-java prettyprint-override"><code>public abstract class AbstractFurniture {
    protected String color;
    protected String make;
    protected String type;

    protected AbstractFurniture(String type, String make, String color) {
        super();

        this.type = type;
        this.make = make;
        this.color = color;
    }

    // Getters go here.
    // toString with getClass().getSimpleName() goes here.
}
</code></pre>

<p>From that, you can derive your other classes:</p>

<pre class="lang-java prettyprint-override"><code>public class Sofa extends AbstractFurniture { ... }
public class Tv extends AbstractFurniture { ... }
public class Chair extends AbstractFurniture { ... }
// ...
</code></pre>

<p>You might want to have a <code>Room</code> interface which is implemented by <code>AbstractRoom</code>, though.</p>

<p>That will allow you to manage furniture as furniture, and not as a collection of TVs, chairs, etc..</p>

<pre class="lang-java prettyprint-override"><code>public abstract class AbstractRoom {
    // ...
    protected List&lt;AbstractFurniture&gt; furniture = null;

    protected AbstractRoom(Wall wall, Ceiling ceiling, Floor floor, AbstractFurniture... furniture) {
        super();

        // ...
        // TODO Check furniture for null first.
        this.furniture = Arrays.asList(furniture);
    }
}
</code></pre>

<p>Which will allow you to write code like:</p>

<pre class="lang-java prettyprint-override"><code>AbstractRoom room = new Bedroom(
        someWall,
        someCeiling,
        someFloor,
        smallTv,
        bigBed,
        smallSofa,
        someChair,
        someChair);

</code></pre>

<p>The abstract classes also allow you to have code like the rendering of the room in the abstract base class, so you don't need to duplicate it.</p>

<hr>

<p>Consider whether your classes need to be immutable, and if they don't need to, you can use a fluent API to make it easier to use instead.</p>

<pre class="lang-java prettyprint-override"><code>House house = new House()
        .addRoom(bedRoom)
        .addRoom(livingRoom)
        .addRoom(drawingRoom);
</code></pre>

<hr>

<p><code>getHouseDetails</code> and <code>getRoomDetails</code> are bad names, as they actually don't get anything, but instead write to stdout.</p>

<hr>

<p>If you want to get <em>extra</em> fancy, <code>Room</code>s and <code>House</code> are only data holders, and you have a separate <code>HouseRenderer</code>:</p>

<pre class="lang-java prettyprint-override"><code>public interface HouseRenderer {
    public void renderHouse(House house);
}

public class StdOutStringRenderer implements HouseRenderer {
    @Override
    public void renderHouse(House house) {
        // Code goes here.
    }
}
</code></pre>

<p>That would allow you to separate data from presentation, which is always a good idea.</p>
    </div>