<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The execution time of the program is determined by number of disk reads it has to make. So avoiding unnecessary disk reads by checking first if there is a file with the same size is a good thing. Maybe it makes sense, at least for large files, to calculate the hash only for a small part of the file. e.g. for the first BUFFER bytes, and you can avoid reading more of a file if no other file starts with the same BUFFER bytes. If it is possible to read blocks at any position of a file without reading all the blocks preceding this block, you should also use  blocks not only  from the beginning. </p></li>
<li><pre><code>FIND_CMD = "find . -name \*.* -print"
</code></pre>

<p>I don't understand why the first <code>*</code> is escaped by a <code>\</code> but the 2nd <code>*</code> is not.</p></li>
<li><p>Python has a way to list all files of a directory, so it is not necessary to exectute a shell command:</p>

<blockquote>
  <h3><code>os.walk(top, topdown=True, onerror=None, followlinks=False)</code></h3>
  
  <p>Generate the file names in a directory tree by walking the tree either top-down or bottom-up.</p>
</blockquote></li>
<li><p>The following code will not behave as you might expect:</p>

<pre><code>#Get path from the user
root_path = sys.argv[1]
#Checks that the user sent path
if not root_path:
    print("Error: No file specified.Please try again ")
    sys.exit(1)`
</code></pre>

<p>If no argument is supplied to the program then <code>sys.argv[1]</code> is not defined and an error is raised. So <code>print("Error: No file specified.Please try again ")</code> will never be printed.</p></li>
<li><p>Instead of </p>

<pre><code>if os.path.isdir(path):
    continue
if os.path.exists(path):
    ...
</code></pre>

<p>you can do</p>

<pre><code>if not os.path.isdir(path) and os.path.exists(path):
    ...
</code></pre>

<p>and save an ugly <code>continue</code>.</p>

<p>and a break used here</p>

<pre><code>while True:
    data = f.read(BUFFER)
    if not data:
        break
    md5.update(data)
</code></pre>

<p>can be avoided this way</p>

<pre><code>data = f.read(BUFFER)
while data:
    md5.update(data)
    data = f.read(BUFFER)
</code></pre>

<p>But this is a matter of taste, of course.</p></li>
<li><p>What happens with <code>os.chdir(root_path)</code>, if root_path does not exist? You should not trust user input. You will get an exception. You should write an appropriate error message. Also for other OS-functions you should it may make sense to handle an error appropriate. </p></li>
<li><pre><code>    i = 0
    while i &lt; len (same_size[size]):
        ...
        i=i+1
</code></pre>

<p>isn't the way how such loops are handled in python.</p>

<pre><code>for i in range(len (same_size[size])):
    ....
</code></pre>

<p>is the right way. In this special case <a href="https://codereview.stackexchange.com/a/202604/12462">Caridorc</a>  showed you an even better way.</p></li>
<li><p>In Unix like  sytems error messages should be printed to <code>stderr</code> and not to <code>stdout</code>. So ths is not the proper way to do this:</p>

<pre><code>if not root_path:
    print("Error: No file specified.Please try again ")
    sys.exit(1)
</code></pre>

<p>A possible way to achieve this is</p>

<pre><code>if not root_path:
    sys.exit("Error: No file specified.Please try again ")
</code></pre></li>
<li>Your indentation is mixed. This is allowed but you should use alway the same indentation, preferable four spaces.</li>
</ol>
    </div>