<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, draw and draw2 looks pretty similar to me, you can DRY them</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class drawingBoard {

    // ...

    draw (e) {
        this.draw2(e)
        let m = drawingBoardGetMouse(this.cvs, e)
        curLine = [m.x, m.y]
    }
    draw2 (e) {
        let m = drawingBoardGetMouse(this.cvs, e)
        this.ctx.beginPath()
        this.ctx.fillStyle = curColor
        this.ctx.lineWidth = curSize
        this.ctx.moveTo(curLine[0], curLine[1])
        this.ctx.lineTo(m.x, m.y)
        this.ctx.stroke()
    }

    // ...

}</code></pre>
</div>
</div>


<p>Then, there is a "not so useful" if statement</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>if (this.drawingMode == 1) {
    return this.draw(event) // Free-draw
} else if (this.drawingMode == 2) {
    return this.draw2(event) // Line-draw
} else if (this.drawingMode == 3) {
    return this.draw3(event) // Spray-draw
}</code></pre>
</div>
</div>


<p>Here is how you can replace it, which will improve the readability and elegance of the code</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// ...

class drawingBoard {

    // ...

    onMouseMove (event) {
        if (!this.mouseDown) {
            return // If mouse isnt held down, dont draw
        }
        if (this.drawingMode in this) {
            this[this.drawingMode](event)
        }
    }

    dragAndDraw (e) {
        this.dragAndLine(e)
        let m = drawingBoardGetMouse(this.cvs, e)
        curLine = [m.x, m.y]
    }

    dragAndLine (e) {
        let m = drawingBoardGetMouse(this.cvs, e)
        this.ctx.beginPath()
        this.ctx.fillStyle = curColor
        this.ctx.lineWidth = curSize
        this.ctx.moveTo(curLine[0], curLine[1])
        this.ctx.lineTo(m.x, m.y)
        this.ctx.stroke()
    }

    dragAndSpray () {
        // TODO ?
    }
}


// ...


query('.drawer').addEventListener('click', () =&gt; {
    draw.drawingMode = 'dragAndDraw'
})

query('.liner').addEventListener('click', () =&gt; {
    draw.drawingMode = 'dragAndLine'
})

query('.sprayer').addEventListener('click', () =&gt; {
    draw.drawingMode = 'dragAndSpray'
})</code></pre>
</div>
</div>


<p>You can move the global variables into instance variables so you can create multiple instances of drawingBoard if you want</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class drawingBoard {

    constructor (canvas) {

        // ...

        this.curLine = [0, 0]
        this.curColor = '#000000'
        this.curSize = 2


        this.cvs.addEventListener('mousedown', e =&gt; {
            let m = drawingBoardGetMouse(this.cvs, e)
            this.curLine = [m.x, m.y]
            this.mouseDown = true
        })

        // ...
        
    }

    dragAndDraw (e) {
        this.dragAndLine(e)
        this.curLine = [m.x, m.y]
    }
    
    dragAndLine (e) {
        // ...

        this.ctx.fillStyle = this.curColor
        this.ctx.lineWidth = this.curSize
        this.ctx.moveTo(this.curLine[0], this.curLine[1])

        // ...
    }
    
}</code></pre>
</div>
</div>


<hr>

<p>Here is my final take with some flavor adjustments</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class DrawingBoard {

    constructor (canvas) {

        this.canvas  = canvas || document.querySelector('canvas')
        this.ctx     = this.canvas.getContext('2d')

        this.currentLine = {x: 0, y: 0}
        this.color       = '#000000'
        this.size        = 2

        registerMouseEvents(this)
    }

    draw (mouseEvent) {
        if (!this.mouseDown) {
            return
        }

        if (this.drawingMode in this) {
            this[this.drawingMode](mouseEvent)
        }
    }

    dragAndDraw (e) {
        this.dragAndLine(e)
        this.currentLine = getMouseCoords(this.canvas, e)
    }

    dragAndLine (e) {
        let coords = getMouseCoords(this.canvas, e)
        this.ctx.beginPath()
        this.ctx.fillStyle = this.color
        this.ctx.lineWidth = this.size
        this.ctx.moveTo(this.currentLine.x, this.currentLine.y)
        this.ctx.lineTo(coords.x, coords.y)
        this.ctx.stroke()
    }

    dragAndSpray () {
        // TODO ?
    }
}



function registerMouseEvents (drawingBoard) {

    const canvas = drawingBoard.canvas

    canvas.addEventListener('mousedown', e =&gt; {
        drawingBoard.currentLine = getMouseCoords(canvas, e)
        drawingBoard.mouseDown = true
    })

    canvas.addEventListener('mouseup', e =&gt; {
        drawingBoard.mouseDown = false
    })

    canvas.addEventListener('mousemove', e =&gt; {
        drawingBoard.draw(e)
    })

}



function getMouseCoords (canvas, e) {

    let rect   = canvas.getBoundingClientRect()
    let scaleX = canvas.width  / rect.width
    let scaleY = canvas.height / rect.height

    return {
        x: (e.clientX - rect.left) * scaleX,
        y: (e.clientY - rect.top)  * scaleY
    }

}



// USAGE

const query = document.querySelector.bind(document)
const drawingBoard = new DrawingBoard()


query('.color').addEventListener('input', e =&gt; {
    drawingBoard.color = e.target.value
})

query('.drawer').addEventListener('click', () =&gt; {
    drawingBoard.drawingMode = 'dragAndDraw'
})

query('.liner').addEventListener('click', () =&gt; {
    drawingBoard.drawingMode = 'dragAndLine'
})

query('.sprayer').addEventListener('click', () =&gt; {
    drawingBoard.drawingMode = 'dragAndSpray'
})</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>* {
  text-align: center;
  vertical-align: top;
  box-sizing: border-box;
}

.canvas {
  display: inline-block;
  border: 1px solid black;
}

.buttons {
  display: inline-block;
}

button,
input {
  width: 8em;
  margin-bottom: 2px;
  margin-left: -2px;
}

input {
  text-align: left;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas class="canvas" width="300" height="300"&gt;&lt;/canvas&gt;
&lt;div class="buttons"&gt;
  &lt;input type="color" class="color"&gt;&lt;br&gt;
  &lt;input type="text" class="size" placeholder="Size"&gt;&lt;br&gt;
  &lt;button class="drawer"&gt;Free Draw&lt;/button&gt;&lt;br&gt;
  &lt;button class="liner"&gt;Line Draw&lt;/button&gt;&lt;br&gt;
  &lt;button class="sprayer"&gt;Spray Draw&lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>
</div>

    </div>