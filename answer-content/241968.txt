<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review and thanks for sharing your code.</p>

<p>The usual approach is that you identify parts of your code that do (exactly) the same and transform the code so that the duplicated lines can be merged.</p>

<p>In your case you have three lines duplicated:</p>

<pre><code>if (!user.getActivated()) {
            throw new UserNotActivatedException("User " + lowercaseLogin + " was not activated");
        }
</code></pre>

<p>The main problem is, that one of the occurrences is inside an <code>if</code> block. But if you take a closer look at this nested occurrence you can see, that it does not depend on the condition checked with the <code>if</code>. Therefore it is safe to move this three lines up before the <code>if</code> and delete the other occurrence. This also makes the <code>else</code> block completely obsolete.</p>

<hr>

<p>What I don't like in this code is that your method mixes concepts. The upper part is <em>procedural programming</em> while the lower part is <em>functional programming</em>.
Within a method you should stick to one concept only.
The usual approach to this is to put the different parts in separate methods called from the original method:</p>

<pre><code>private org.springframework.security.core.userdetails.User createSpringSecurityUser(String lowercaseLogin, User user) {
   checkUserData(lowercaseLogin,user);
   List&lt;GrantedAuthority&gt; grantedAuthorities =
      convertAuthoritiesOf(user);
 return new org.springframework.security.core.userdetails.User(user.getLogin(),
        user.getPassword(),
        grantedAuthorities);
}

checkUserData(String lowercaseLogin, User user) {
    if (user.getAccount() != null) {
    // ...
    }
}

convertAuthoritiesOf(User user){
    return user.getAuthorities().stream()
        .map(SimpleGrantedAuthority::new)
        .collect(Collectors.toList());
}
</code></pre>

<p>another way would be to convert one part to the same concept as the other:</p>

<pre><code>private org.springframework.security.core.userdetails.User createSpringSecurityUser(String lowercaseLogin, User user) {

    Stream.of(user)
          .filter(User::getActivated)
          .findFirst()
          .orElseThrow(()-&gt;new UserNotActivatedException("User " + lowercaseLogin + " was not activated"));

    PrimecastAccount account = Stream.of(user)
          .map(u-&gt;primecastAccountRepository.findOneBySystem(user.getAccount()))
          .findFirst()
          .orElseThrow(PrimecastAccountNotFoundException::new);

    Stream.of(account)
          .filter(AccountType.INTERNAL.equals(PrimecastAccount::getAccountType))
          .filter(PrimecastAccount::getActivated)
          .orElseThrow(()-&gt;new UserNotActivatedException("User " + lowercaseLogin + " was not activated"));

    Stream.of(account)
          .filter(Predicate.not(AccountType.DISABLED.equals(PrimecastAccount::getAccountType)))
          .orElseThrow(()-&gt;new UserNotActivatedException("User " + lowercaseLogin + " was not activated"));

    List&lt;GrantedAuthority&gt; grantedAuthorities = user.getAuthorities().stream()
          .map(SimpleGrantedAuthority::new)
          .collect(Collectors.toList());
    return new org.springframework.security.core.userdetails.User(user.getLogin(),
        user.getPassword(),
        grantedAuthorities);
}
</code></pre>

<p><strong>Attenion</strong>: your code has logical errors which I did not fix.</p>
    </div>