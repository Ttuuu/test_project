<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm running this on an Haswell (4770K but the specific model shouldn't matter). I compiled with MSVC 2017 version 15.9 .. and MASM I suppose, you will see. The performance difference between the selection sort and insertion sort was 5x: 166ms vs 33ms. That difference is simmilar to what you saw, so it may be for the same reason.</p>
<blockquote>
<p>I am particularly interested in insights on how the selection sort's performance might be improved, so as to ensure that the test is a fair one.</p>
</blockquote>
<p>As it turns out, there may be, but whether a comparison with that version is <em>more fair</em> is not a simple question.</p>
<p>An other fairness concern in benchmarks is ensuring that what gets measures is what was intended to be measured. C code is not what actually runs, so looking at it does not necessarily give much insight into that question. With that in mind, here are the annotated "most important blocks" from both algorithms, and analyzed with Intel VTune. So here is, from <code>selection</code>, the important part:</p>
<pre><code>Address       Instruction              Clock ticks
0x140001040   mov edx, dword ptr [r11] 1,862,000,000
0x140001043   lea r11, ptr [r11+0x4]       7,000,000
0x140001047   cmp edx, eax               700,000,000
0x140001049   mov ecx, r10d            1,736,000,000
0x14000104c   cmovnl ecx, r8d          1,837,500,000
0x140001050   cmovnl edx, eax          7,217,000,000
0x140001053   inc r10d                 4,140,500,000
0x140001056   mov r8d, ecx                 7,000,000
0x140001059   mov eax, edx               693,000,000
0x14000105b   cmp r10d, 0x4000         1,683,500,000
0x140001062   jb 0x140001040
</code></pre>
<p>The distribution of clock ticks does not entirely make sense when taken at face value (that <code>inc r10d</code> should be innocent), but some slight "smearing out" of slowdowns is normal. Anyway, <code>cmov</code> was used, and <code>cmov</code> is the main culprit according to VTune. Maybe <code>cmov</code> <em>should</em> take a lot of time, after all, it is what's really doing the work (the selection part of selection sort).</p>
<p>Whether <code>cmov</code> or a branch is used is unfortunately not up to the source code, from the point of view of C code it is an uncontrollable variable with a potentially huge impact. For completeness, it should be looked into anyway. So as an additional experiment, which I suggest you also try to replicate, I took the code that MSVC emitted for <code>selection</code> and modified it to use a branch (and did a minimal modification to make it work, MSVC is cheating just a little bit and not actually passing a pointer into the function but directly refers to a global):</p>
<pre><code>_text SEGMENT

selection2 PROC FRAME
.endprolog
 mov         qword ptr [rsp+8],rbx  
 mov         qword ptr [rsp+10h],rsi  
 mov         qword ptr [rsp+18h],rdi  
 mov         rsi,rcx  
 mov         r9d,1  
 mov         rbx,rsi  
_block2:
 mov         eax,dword ptr [rbx]  
 mov         edi,eax  
 lea         r8d,[r9-1]  
 mov         r10d,r9d  
 cmp         r9d,4000h  
 jae         _block5  
 mov         ecx,r9d  
 lea         r11,[rsi+rcx*4]  
_block4:
 mov         edx,dword ptr [r11]  
 lea         r11,[r11+4]  
 cmp         edx,eax  
 jge _skip
 mov r8d, r10d
 mov eax, edx
_skip:
 inc r10d
 cmp         r10d,4000h  
 jb          _block4
_block5:
 inc         r9d  
 mov         ecx,r8d  
 mov         dword ptr [rsi+rcx*4],edi  
 mov         dword ptr [rbx],eax  
 add         rbx,4  
 lea         eax,[r9-1]  
 cmp         eax,3FFFh  
 jb          _block2  
 mov         rbx,qword ptr [rsp+8]  
 mov         rsi,qword ptr [rsp+10h]  
 mov         rdi,qword ptr [rsp+18h]  
 ret 
selection2 ENDP

END
</code></pre>
<p>(various modifications would be needed to port this to linux, re-doing the <code>cmov</code>-to-branch conversion would be easier)</p>
<p>Imported on the C side with <code>extern void selection2(int* data);</code>.</p>
<p>Result: 72ms. Much faster! It's still twice as slow as insertion sort, but it's a huge improvement compared to the <code>cmov</code> version.</p>
<p>But what is fair, is the <code>cmov</code> version fair? That is what MSVC outputs by default, so in that sense it is representative of the "real life performance of selection sort", maybe.. but the <code>cmov</code> is not inherent to the algorithm, it's an artifact from an (apparently mistaken!) compiler optimization. A different compiler can just as well decide to use a branch, which could be why @pacmaninbw reports a similar 2x perf gap rather than a 4x or 5x gap.</p>
<p>Fortunately (maybe?) Selection Sort lost both ways, so all of this doesn't change the winner, but it could have.</p>
<p>The code MSVC outputs for <code>insertion</code> is actually not that interesting to look at. The assembly code does exactly what you'd expect, no curve balls. It's good to look, though, just in case.</p>
<p>Finally, I'll note that both algorithms can be optimized using SIMD, which has the potential to upset the balance. It could be seen as "unlocking the true potential" of those algorithms, so maybe it is fair in that sense. Or it could be seen as "going too far" - is that still representative of the algorithms or gone way past that into comparing specific snippets of assembly code, and unfair in that sense.</p>
    </div>