<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In all this is a good effort and helped me discover and report a <a href="https://gitlab.gnome.org/GNOME/mutter/issues/965" rel="nofollow noreferrer">bug in mutter</a>, so I learned some things, too.  There are still some things that I think can help you improve your program.</p>

<h2>Fix the bug</h2>

<p>It's a minor bug, but if the player decides to play again, the <code>Room::clear()</code> method doesn't completely reset each room.  Specifically, if the user has made a guess about the presence of a hazard, those guesses remain in the subsequent game.  Also, if the player actually encountered a bat, that box remains disabled.  One way to fix that is to add these lines to <code>Room::clear()</code>:</p>

<pre><code>// also send signals
mGuessPitAction-&gt;setChecked(false);
mGuessWumpusAction-&gt;setChecked(false);
mGuessBatAction-&gt;setChecked(false);
mGuessBatAction-&gt;setEnabled(true);
</code></pre>

<p>However I think I would instead create and use functions as shown in the next two suggestions.</p>

<h2>Prefer using boolean values directly over <code>if</code></h2>

<p>The <code>Room</code> code currently has this code:</p>

<pre><code>void Room::toggleGuessBat()
{
    if(mGuessBat) {
        mGuessBat = false;
        mGuessBatAction-&gt;setChecked(false);
    }
    else {
        mGuessBat = true;
        mGuessBatAction-&gt;setChecked(true);
    }
    update();
}
</code></pre>

<p>That seems a bit verbose to me.  We could shorten it by using the boolean value directly:</p>

<pre><code>void Room::toggleGuessBat()
{
    mGuessBat = !mGuessBat;
    mGuessBatAction-&gt;setChecked(mGuessBat);
    update();
}
</code></pre>

<p>However, we could also get rid of the variable entirely as in the next suggestion.</p>

<h2>Eliminate redundant variables</h2>

<p>The bug I mentioned above was caused by the fact that a stored boolean value and the display value were out of synchronization.  One certain way to eliminate all such bugs is to not have two separate things.  That is, the variable could be eliminated and only the value of the <code>QAction</code> used instead.  This makes it very simple to keep synchronization but also means that we no longer have a separate variable and so, of course, the program is more tightly coupled to the interface.  This may or may not be a good idea, depending on your tastes and goals, but I believe that in this case it has more advantages than disadvantages.  For instance, we can replace the three slots with a single very simple one:</p>

<pre><code>void Room::selfUpdate()
{
    update();
}
</code></pre>

<p>And now all three <code>connect</code> calls can use the same slot:</p>

<pre><code>connect(mGuessWumpusAction, &amp;QAction::triggered, this, &amp;Room::selfUpdate);
</code></pre>

<p>The <code>QAction</code> will take care of the appearance and the boolean variable and all that is left is to change from checking the eliminated boolean variables to the states of the checkboxes like this: </p>

<pre><code>if (mGuessWumpusAction-&gt;isChecked()) {
    drawWumpus(painter, wumpusImage());
}
</code></pre>

<h2>Simplify your code</h2>

<p>The existing <code>Room::boundingRect()</code> is this:</p>

<pre><code>QRectF Room::boundingRect() const
{
    return QRectF{ 0, 0,
        static_cast&lt;qreal&gt;(roomImage().width()),
        static_cast&lt;qreal&gt;(roomImage().height())};
}
</code></pre>

<p>I would use an alternative constructor that takes a <code>QRect</code> to simplify the code and eliminate casts:</p>

<pre><code>QRectF Room::boundingRect() const
{
    return roomImage().rect();
}
</code></pre>

<h2>Use a <code>std::array</code> for fixed-size collections</h2>

<p>The <code>mRooms</code> is currently a <code>QArray</code>, but it could just as easily be a fixed-size <code>std::array</code>.  The advantage is that many of the checks that are currently in the code are no longer needed.  For example, we could change the <code>Dungeon</code> class so that in now includes an <code>array</code> of actual <code>Room</code> objects rather than uninitialized pointers.</p>

<pre><code>std::array&lt;Room, mCountOfRooms&gt; mRooms;
</code></pre>

<p>That now eliminates the need for <code>createRooms</code>.  Then we could change the helper function <code>connectRoomsAsDodekaeder()</code> to a private member function of <code>Dungeon</code> and use a lambda instead of a separate additional helper function.</p>

<pre><code>void Dungeon::connectRoomsAsDodekaeder()
{
    auto makeNeighbours = [this](std::size_t src, std::array&lt;std::size_t, 3&gt;n){
        for (const auto i: n) {
            this-&gt;mRooms[src].addNeighbour(&amp;(this-&gt;mRooms[i]));
        }
    };

    makeNeighbours(0, {1, 4, 19});
    makeNeighbours(1, {0 , 2, 17});
    makeNeighbours(2, {1 , 3, 15});
    makeNeighbours(3, {2 , 4, 13});
    makeNeighbours(4, {0 , 3, 5});
    makeNeighbours(5, {4 , 6, 12});
    makeNeighbours(6, {5 , 7, 19});
    makeNeighbours(7, {6 , 8, 11});
    makeNeighbours(8, {7 , 9, 18});
    makeNeighbours(9, {8 , 10, 16});
    makeNeighbours(10, {9 , 11, 14});
    makeNeighbours(11, {7 , 10, 12});
    makeNeighbours(12, {5 , 11, 13});
    makeNeighbours(13, {3 , 12, 14});
    makeNeighbours(14, {10 , 13, 15});
    makeNeighbours(15, {2 , 14, 16});
    makeNeighbours(16, {9 , 15, 17});
    makeNeighbours(17, {1 , 16, 18});
    makeNeighbours(18, {8 , 17, 19});
    makeNeighbours(19, {0 , 6, 18});
}
</code></pre>

<h2>Consider simplifying randomization</h2>

<p>Right now the code to randomize the locations of hazards selects random numbers until it finds an empty room and then places each hazard.  There is a simpler way to do this:</p>

<pre><code>void Dungeon::populateRooms()
{
    // create a temporary array of room pointers
    std::array&lt;Room *, mCountOfRooms&gt; mixer;
    std::size_t i{0};
    for (auto &amp;r : mRooms) {
        mixer[i++] = &amp;r;
    }
    // shuffle the pointers to simplify initialization
    std::random_shuffle(mixer.begin(), mixer.end());
    auto it{mixer.begin()};
    // place the wumpus
    (*it++)-&gt;setWumpus(true);
    // now the bats
    for (int bats{mCountOfBats}; bats; --bats) {
        (*it++)-&gt;setBat(true);
    }
    // now the pits
    for (int pits{mCountOfPits}; pits; --pits) {
        (*it++)-&gt;setPit(true);
    }
}
</code></pre>

<p>Using <code>random_shuffle</code>, we essentially do the randomization just once and then simply sequentially add the hazards.</p>

<h2>Don't leak memory</h2>

<p>Most of the memory is automatically freed by Qt because the objects are all linked together.  However, the three <code>QAction</code> items allocated in the <code>Room</code> constructor are not freed.  Adding the appropriate destructor to <code>Room</code> could fix that memory leak.</p>
    </div>