<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Based on your constraints, which are:</p>

<ul>
<li>Single loop variable</li>
<li>No restarting of iteration over large arrays </li>
</ul>

<p>You could calculate your looping step sizes first, then go over the array only once.</p>

<pre><code>  const mushedArr = [];
  const remainderSize = arr.length % size
  const numberOfChunks = Math.floor(arr.length / size);
  let remainderStepSize = Math.floor(remainderSize / numberOfChunks);

</code></pre>

<p>I'm going to define the remainder with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" rel="nofollow noreferrer">negative index slicing</a>, so there has to be a guard against calculating a remainder even when division is exact.</p>

<pre><code>let remainder = remainderSize ? arr.slice(-remainderSize) : []
</code></pre>

<p>Second edge case is where the remainder is smaller than the chunk size, which would cause my step size to evaluate to 0 and not loop through the remainder properly.</p>

<pre><code>if(remainderStepSize === 0) remainderStepSize ++;
</code></pre>

<p>Finally, loop over the array and the remainder:</p>

<pre><code> let i = 0;
  while(i &lt; numberOfChunks){
    let remainderPortion = remainder
        .slice(i*remainderStepSize, i*remainderStepSize+remainderStepSize);

    let arrayPortion = arr.slice(i*size, i*size+size);

    mushedArr.push([...arrayPortion, ...remainderPortion]);
    i++;
  };
  return mushedArr;
};
</code></pre>

<p>Variable names here could be shorter, and the slice can be simplified to
something like <code>arr.slice(size*i, size*(i+1)</code>, but the idea is to loop over the array and copy the items in sizes that are equal to the chunk size. </p>

<p>Testing for both inputs in your question yielded:</p>

<pre><code>Calling function with input: [A,B,C,D,E,F,G,H,I,J,K,L,M,N]
 chunk size: 5
[ [ 'A', 'B', 'C', 'D', 'E', 'K', 'L' ],
  [ 'F', 'G', 'H', 'I', 'J', 'M', 'N' ] ]
Calling function with input: [A,B,C,D,E,F,G,H]
 chunk size: 3
[ [ 'A', 'B', 'C', 'G' ], [ 'D', 'E', 'F', 'H' ] ]
</code></pre>
    </div>