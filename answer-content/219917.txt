<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As per request in the comment, here's an implementation of the <code>rotate</code> function in a more idiomatic golang way (ie using a pointer receiver):</p>

<pre><code>// let's use constants so code becomes self-documenting
const (
    maxRotation float64 = 18 // max rotation as typed constant
    fullCircle  int     = 360 // just like all hard-coded values, let's use constants
    semiCircle  int     = fullCirle/2 // do this for all hard-coded values
)

// note the receiver is a pointer, and there's no return value
func (pod *Pod) rotate(p Dot) {
    a := pod.diffAngle(p)

    if a &gt; maxRotation {
        a = maxRotation
    } else if a &lt; -maxRotation {
        a = -maxRotation
    }

    pod.angle += int(math.Round(a))

    var add int // add this value, defaults to 0
    // you are comparing pod.angle (an int) to a float64 (360.0)
    // that shouldn't be happening. I'd say angle should be a float64
    // but keeping the fields in pod the types they are for now
    if pod.angle &gt;= fullCircle {
        add -= fullCircle
    } else if pod.angle &lt; 0 {
        add = fullCircle
    }
    pod.angle += add // adds 0, 360, or -360 depending on the new value for pod.angle
}
</code></pre>

<p>That's all there is to it, really. Instead of calling it like this:</p>

<pre><code>pod.angle = pod.rotate(p)
</code></pre>

<p>You simply call it like this:</p>

<pre><code>pod.rotate(p)
</code></pre>

<p>The value of <code>pod.angle</code> will be updated. If you start doing this stuff concurrently, you'll need to ensure that <code>pod.rotate()</code> is <em>"thread-safe"</em> (ignoring the fact that goroutines aren't really threads for a second). The easiest way to do this is using a <code>sync.Mutex</code> (or <code>sync.RWMutex</code>), to make sure that you're not accidentally updating <code>pod.angle</code> in 2 routines etc...</p>

<p>I might revisit this stuff to give a more detailed review, so stay tuned for updates.</p>
    </div>