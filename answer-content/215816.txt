<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Given an array of numbers and an index i, return the index of the nearest larger number of the number at index i, where distance is measured in array indices.</p>
</blockquote>

<p>I'm a bit confused to be honest. Reading this description, for input <code>[1, 5, 4], 0</code> I would expect 1 as output instead of 2 returned by the program. Because <code>arr[1] = 5</code> is larger than <code>arr[0] = 1</code>, and it's closer in distance than <code>arr[2] = 4</code>. Similarly, for input <code>[4, 5, 1], 2</code> I would expect 1 instead of 0.</p>

<p>In other words, the program seems to be implementing a more precisely worded problem statement:</p>

<blockquote>
  <p>Given an array of numbers and an index i, return the index of the nearest <strong><em>smallest</em></strong> larger number of the number at index i, where distance is measured in array indices.</p>
</blockquote>

<hr>

<blockquote>
  <p>Follow-up: If you can preprocess the array, can you do this in constant time?</p>
</blockquote>

<p>The posted code doesn't address the follow-up question.</p>

<p>I think this follow-up question is not specified well enough,
because it doesn't impose any limits on the preprocessing time and space.
You could certainly "preprocess" the array, using <code>nearestLargestNumber</code> to compute the answer for all valid indexes, store in another array. With the current implementation, computing a single answer takes linear time, therefore computing all answers up-front would take quadratic time. Since no limits were imposed, that may be fine and well.</p>

<p>This follow-up question would become a lot more interesting if preprocessing was limited to linear time and space.</p>
    </div>