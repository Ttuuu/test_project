<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code doesn't look that ugly!  Here are some suggestions to make it better.  Note that LeetCode makes significantly more mistakes than you when it comes to code quality; I have listed the suggestions for LeetCode-provided stuff too, so that you don't make the same mistakes when you are writing real code — you don't have to force LeetCode to accept them (i.e., some of them can be compromised for the purpose of passing their tests).</p>

<h1>General design</h1>

<p>The <code>Solution</code> class is very Java-style AFAIK, but it is not idiomatic in C++.  It should be replaced by a namespace, or removed altogether.  In C++, it is preferred to create a separate <code>Tree</code> class for the binary trees, instead of operating directly on the nodes.  Also, the value type should be a template parameter for reusability.</p>

<h1>Naming</h1>

<p>In C++, functions and variables are generally named in <code>snake_case</code>, with <code>CamelCase</code> names reserved for classes.</p>

<p>The name of the function is misleading — to me, <code>isSubtree(s, t)</code> means "<code>s</code> is a subtree of <code>t</code>," rather than the reverse.  <code>contains_subtree</code> may be better.  The parameters <code>s</code> and <code>t</code> are also non-descriptive and thus unreadable; I recommend <code>tree</code> and <code>subtree</code>.</p>

<p>The parameters to <code>isSame</code> (or maybe just <code>same</code>), on the other hand, can be named as simply as <code>tree_a</code> and <code>tree_b</code>, because the semantics is unambiguous.</p>

<h1>Logic</h1>

<p>(Note: the code snippets presented are intended to help you understand the review.  They are not tested; in other words, they and may contain mistakes and are not guaranteed to work.)</p>

<p>The logic of <code>same</code> can be simplified:</p>

<ul>
<li><p>if both arguments are non-null, then they are identical if and only if</p>

<ul>
<li><p>their values are equal; and</p></li>
<li><p>their left subtrees are identical; and</p></li>
<li><p>their right subtrees are identical;</p></li>
</ul></li>
<li><p>otherwise, they are identical if and only if they are both null.</p></li>
</ul>



<pre><code>bool same(TreeNode* tree_a, TreeNode* tree_b)
{
    if (tree_a &amp;&amp; tree_b) {
        return tree_a-&gt;val == tree_b-&gt;val
            &amp;&amp; same(tree_a-&gt;left, tree_b-&gt;left)
            &amp;&amp; same(tree_a-&gt;right, tree_b-&gt;right);
    } else {
        return !tree_a &amp;&amp; !tree_b;
    }
}
</code></pre>

<p>This presents your logic in a way that is (hopefully) more readable.</p>

<p>Similarly,</p>

<ul>
<li><p>if <code>tree</code> is non-null, then <code>tree</code> contains <code>subtree</code> if and only if</p>

<ul>
<li><p><code>same(tree, subtree)</code>; or</p></li>
<li><p><code>tree-&gt;left</code> contains <code>subtree</code>; or</p></li>
<li><p><code>tree-&gt;right</code> contains <code>subtree</code>;</p></li>
</ul></li>
<li><p>otherwise, <code>tree</code> contains <code>subtree</code> if and only if <code>subtree</code> is null as well.</p></li>
</ul>



<pre><code>bool contains_subtree(TreeNode* tree, TreeNode* subtree)
{
    if (tree) {
        return same(tree, subtree)
            || contains_subtree(tree-&gt;left, subtree)
            || contains_subtree(tree-&gt;right, subtree);
    } else {
        return !subtree;
    }
}
</code></pre>

<p>This refactoring eliminates the unnatural non-local control flow (i.e., writing to the <code>bool&amp;</code> argument instead of using the return value).  It also ensures that the function returns as soon as a match is found.</p>
    </div>