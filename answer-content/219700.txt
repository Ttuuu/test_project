<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>private class node</code></strong></p>

<p>I suggest you declare it as</p>

<pre><code>private static final class BinarySearchTreeNode&lt;E&gt; {

    E datum;
    BinarySearchTreeNode&lt;E&gt; left;
    BinarySearchTreeNode&lt;E&gt; right;

    BinarySearchTreeNode(E datum) {
        this.datum = datum;
    }
}
</code></pre>

<p>Above, <code>private</code> tells Java that the class is not accessible outside of enclosing <code>BSearchTree</code>, <code>static</code> removes an implicit reference to <code>BSearchTree</code> from each node object, <code>final</code> tells Java that it is not possible to inherit from <code>node</code>. Finally, I would go verbose here and rename <code>node</code> to <code>BinarySearchTreeNode</code>.</p>

<p><strong>Superfluous access modifier</strong></p>

<pre><code>private class node {
    int data = -1;
    node left = null;
    node right = null;

    public node(int n){ // 'public' does not buy you here anything.
        data = n;
    }
}
</code></pre>

<p><strong>Adding generics</strong></p>

<p>Going for generic binary search tree is not much harder, so, as a further exercise, I suggest to add generics (see the <strong>Summa summarum</strong>.)</p>

<p><strong>Miscellaneous advice</strong></p>

<p>I suggest you rename <code>head</code> to <code>root</code>.</p>

<p><strong>Package name</strong></p>

<p><code>graph</code> is too short and too uninformative name for you code's package. Consider renaming to, say, <code>net.villa.util</code>.</p>

<p><strong>Summa summarum</strong></p>

<p>Combining all the advices above, I came with this proposition:</p>

<pre><code>package net.villa.util;

public class BinarySearchTree&lt;E extends Comparable&lt;? super E&gt;&gt; {

    private BinarySearchTreeNode&lt;E&gt; root;

    public void insert(E value){
        if (root == null) {
            root = new BinarySearchTreeNode&lt;&gt;(value);
            return;
        }

        BinarySearchTreeNode&lt;E&gt; node = root;
        BinarySearchTreeNode&lt;E&gt; parent = null;
        int cmp = 0;

        while (node != null) {
            cmp = value.compareTo(node.datum);

            if (cmp == 0) {
                // The 'value' is already in this tree.
                return;
            }

            parent = node;

            if (cmp &gt; 0) {
                node = node.right;
            } else if (cmp &lt; 0) {
                node = node.left;
            }
        }

        BinarySearchTreeNode&lt;E&gt; newNode = new BinarySearchTreeNode&lt;&gt;(value);

        if (cmp &lt; 0) {
            parent.left = newNode;
        } else {
            parent.right = newNode;
        }
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("[");
        toStringImpl(stringBuilder, root, new Separator(""));
        stringBuilder.append("]");
        return stringBuilder.toString();
    }

    private static final class Separator {
        String separator;

        Separator(String separator) {
            this.separator = separator;
        }
    }

    private static &lt;E&gt; void toStringImpl(StringBuilder stringBuilder,
                                         BinarySearchTreeNode&lt;E&gt; node,
                                         Separator separator) {
        if (node.left != null) {
            toStringImpl(stringBuilder, node.left, separator);
        }

        stringBuilder.append(separator.separator);
        stringBuilder.append(node.datum);

        if (separator.separator.equals("")) {
            separator.separator = ", ";
        }

        if (node.right != null) {
            toStringImpl(stringBuilder, node.right, separator);
        }
    }

    public static void main(String[] args) {
        BinarySearchTree&lt;Integer&gt; bst = new BinarySearchTree&lt;&gt;();
        bst.insert(3);
        bst.insert(1);
        bst.insert(0);
        bst.insert(2);
        bst.insert(5);
        bst.insert(4);
        bst.insert(7);  
        System.out.println(bst.toString());
    }

    private static final class BinarySearchTreeNode&lt;E&gt; {

        E datum;
        BinarySearchTreeNode&lt;E&gt; left;
        BinarySearchTreeNode&lt;E&gt; right;

        BinarySearchTreeNode(E datum) {
            this.datum = datum;
        }
    }
}
</code></pre>
    </div>