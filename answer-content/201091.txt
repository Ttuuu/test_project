<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using a declarative approach instead of an imperative one allows a more expressive code.</p>

<pre><code>private static string GetFileDataType(string fullFileNameWithPath)
{
    var fileName = Path.GetFileNameWithoutExtension(fullFileNameWithPath);
    return matchingRules.First(tuple =&gt; tuple.Item1(fileName)).Item2;
}
</code></pre>

<p>With <code>matchingRules</code> declared as follow:</p>

<pre><code>var matchingRules = new List&lt;(Func&lt;string, bool&gt;, string)&gt;();
matchingRules.Add((f =&gt; !string.IsNullOrWhiteSpace(f) &amp;&amp; f.Contains("__Import__"), "Source Data"));
matchingRules.Add((f =&gt; !string.IsNullOrWhiteSpace(f) &amp;&amp; f.Contains("__Export__"), "Destination Data"));
matchingRules.Add((f =&gt; !string.IsNullOrWhiteSpace(f) &amp;&amp; f.Contains("__Transform__"), "Transformational Data"));
matchingRules.Add((f =&gt; !string.IsNullOrWhiteSpace(f), "General"));
matchingRules.Add((f =&gt; true, string.Empty));
</code></pre>

<p>There are two drawbacks with this solution however:</p>

<ol>
<li>Since each condition should be auto-sufficient, one has to repeat the <code>IsNullOrWhiteSpace</code> many times</li>
<li>Rules ordering matters (not a real drawback because the same ordering also applies with the imperative approach)</li>
</ol>
    </div>