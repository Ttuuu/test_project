<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should indent with 4 spaces, as per PEP8.</p>

<p>You can move your if out of the inner loop, and use <code>enumerate</code>, leading to a ~9% speed up.</p>

<pre><code>def split_d(d, key):
    include = defaultdict(list)
    exclude = defaultdict(list)
    for i, binary in enumerate(d[key]):
        if binary == 1:
            output = include
        elif binary == 0:
            output = exclude
        else:
            raise ValueError(f"Key {key} is not binary. Expected values 0 or 1")

        for k, v in d.items():
            if k == key:
                continue
            output[k].append(v[i])

    return include, exclude
</code></pre>

<p>You can also remove <code>key</code> from <code>d</code> and add it back when you've gone through both the loops. Leading to a further ~5% speed up.</p>

<pre><code>def split_d(d, key):
    include = defaultdict(list)
    exclude = defaultdict(list)
    keys = d.pop(key)
    try:
        for i, binary in enumerate(keys):
            if binary == 1:
                output = include
            elif not binary:
                output = exclude
            else:
                raise ValueError(f"Key {key} is not binary. Expected values 0 or 1")

            for k, v in d.items():
                output[k].append(v[i])
    finally:
        d[key] = keys
    return include, exclude
</code></pre>

<p>Other than the above your code looks good and I don't think there is any way to increase the performance in vanilla Python. And so if this is not fast enough then looking into NumPy would be the best thing next.</p>
    </div>