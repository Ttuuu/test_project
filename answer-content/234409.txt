<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use <code>&lt;stdint.h&gt;</code></h1>

<p>If your system has it, use it.  I bet your <code>long</code> is probably the same as <code>long long</code>, but to be sure of what you're using, use <code>intN_t</code>.</p>

<h1>Use <code>strtol</code> safely:</h1>

<p>(This part is about OP's own answer; not the question itself, which doesn't use <code>strtol()</code>)</p>

<p>Using <code>strtol</code> is good because it <em>can be</em> safer, but it is a pain in the ass to use it safely.</p>

<p>Here is an example of safe usage of <code>strtol</code>.  It encapsulates <code>strtol</code> into a function which handles all error conditions and let's you forget about it.  It also adds some useful things.  It is based on <a href="https://codereview.stackexchange.com/q/226969/200418">this code</a>.  The code is the following:</p>

<pre><code>#include &lt;ctype.h&gt;
#include &lt;errno.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdlib.h&gt;


int     strtol_status   (const char *restrict str,
                         const char *restrict endptr,
                         int errno_after, int errno_before)
{
        int status;

        status  = 0;

        if (str == endptr) {
                status  = -ECANCELED;
                goto out;
        }

        while (isspace((unsigned char)*endptr))
                endptr++;
        if (*endptr) {
                status  = ENOTSUP;
                goto out;
        }

        /* EINVAL or ERANGE */
        if (errno_after) {
                status  = errno_after;
                goto out;
        }
out:
        if (!errno)
                errno   = errno_before;

        return  status;
}

int     strtol_s    (long *restrict num,
                     const char *restrict str,
                     int base, ptrdiff_t *restrict read)
{
        const int   errno_before = errno;
        char        *endptr;

        errno   = 0;
        *num    = strtol(str, &amp;endptr, base);
        if (read)
                *read   = endptr - str;

        return  strtol_status(str, endptr, errno, errno_before);
}
</code></pre>

<p>Usage:</p>

<pre><code>if (strtol_s(&amp;n, optarg, 10, NULL)) {
        /* something went wrong */
}
if(n &lt; 1) {
        fprintf(stderr, "Line number: %u: Invalid sequence size. Should be a positive integer.\n", __LINE__);
        fprintf(stderr, "Refer to -h or --help for more information.\n");
        exit(EXIT_FAILURE);
}
</code></pre>
    </div>