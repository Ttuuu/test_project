<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre class="lang-py prettyprint-override"><code>y =input("")
if (y) == (x):
</code></pre>

<p>That part, among others, is unclear. Here's my version that's also backward compatible with Python 2. I've only done the bear part.</p>

<pre><code># Imports
from __future__ import print_function  # Makes Python 2 support Python 3 print().
import os
import sys
from random import randint
from time import sleep

# Definitions

# Use raw input in Python 2. Pass for Python 3.
try: input = raw_input
except: pass

DEATH = 0

def clear_screen():
    if os.name == "posix":
        # Unix/Linux/MacOS/BSD/etc
        os.system('clear')
    elif os.name in ("nt", "dos", "ce"):
        # DOS/Windows
        os.system('cls')


# Other code

# Player stats
hp = 20
hunger = 0
food_bars = 5

# Bear stats
bear_hp = 10

print("The bear looks aggressive. The bear has", bear_hp, "hp. Type attack or run")
command = input()
if command == "attack":
    while bear_hp &gt; DEATH:
        print("You hit the bear")
        print()
        sleep(3)
        damage = randint(3, 5)
        print("You do", damage, "damage")
        print()
        sleep(2)
        clear_screen()
        bear_hp -= damage
        if bear_hp &lt;= DEATH:
            print("You do a final blow against the bear")
            print()
            print("The bear has died")
            break

        sleep(3)
        bear_dmg = randint(1, 9)
        print("The bear does", bear_dmg, "damage")
        hp -= bear_dmg
        sleep(2)
        clear_screen()
        print()
        if hp &lt;= DEATH:
            print("OW! The bear does final blow against you!")
            print("You have died")
            sleep(2)
            print("Game over")
            sleep(5)
            sys.exit()

        sleep(3)
        print("You have", hp, "hp left")
        print()
        sleep(1)
        print("The bear has", bear_hp, "hp left")
        sleep(1)
        clear_screen()
elif command == "run":
    print("You run away.")
    sleep(2)
    if food_bars &gt; 0:
        print("You have wasted a food bar")
        food_bars -= 1
    else:
        print("You grow hungry")
        hunger += 1
    print("Hunger is", hunger)
    sleep(3)
else:
    print(command, "is not an option.")
</code></pre>

<p>The <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Python Style Guide</a> has more tips. If you're on Windows, i recommend using <a href="https://gist.github.com/CTimmerman/3fc259d7867c38f6919e" rel="nofollow noreferrer">Notepad++</a> to write Python.</p>

<p>Since Python 3.6, you can use formatted string literals (a.k.a. "<a href="https://cito.github.io/blog/f-strings/" rel="nofollow noreferrer">f-strings</a>"), like so:</p>

<pre><code>&gt;&gt;&gt; name = 'Fred'
&gt;&gt;&gt; seven = 7
&gt;&gt;&gt; f'''He said his name is {name.upper()}
...    and he is {6 * seven} years old.'''
'He said his name is FRED\n    and he is 42 years old.'
</code></pre>

<p>That snippet also demonstrates Python's triple-quoted strings that can span multiple lines, which can clean up parts like this:</p>

<pre><code>        print(f"""Access granted

              Cheat list
              {cheat01} - Walkthrough
              {cheat02} - You should know what that one does""")
</code></pre>

<p>Tested via the <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" rel="nofollow noreferrer">REPL</a>:</p>

<pre><code>&gt;&gt;&gt; cheat01 = 1
&gt;&gt;&gt; cheat02 = "two"
&gt;&gt;&gt;
&gt;&gt;&gt; print(f"""Access granted
...
... Cheat list
... {cheat01} - Walkthrough
... {cheat02} - You should know what that one does""")
Access granted

Cheat list
1 - Walkthrough
two - You should know what that one does
&gt;&gt;&gt;
</code></pre>
    </div>