<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For one, it's a bit wasteful to always create a new element for each tooltip; you could create one when the page loads, and just reuse that (since the user will only ever see one tooltip at the time).</p>

<p>The biggest pitfall, though, is that if you add new elements to the page programmatically, the event handlers won't be applied to them. E.g. if you do something like this:</p>

<pre><code>let newButton = document.createElement('button');
newButton.textContent = 'click me!';
newButton.setAttribute('tooltip', 'Click here to do stuff');
newButton.onclick = () =&gt; {
    alert('You did stuff');
}
document.body.appendChild(newButton);
</code></pre>

<p>This button, although it has a <code>tooltip</code> attribute, will not show the tooltip when hovered.</p>

<p>You can solve this by taking advantage of event propagation: instead of setting the event handler on each individual element, you can just set one event handler on the <code>window</code> object, and handle it there.</p>

<pre><code>(function() {
    // Create the tooltip element we will be reusing
    let tooltip = document.createElement('div');
    tooltip.className = 'tooltip';
    tooltip.style.left = '50%';
    tooltip.style.transform = 'translateX(-50%)';

    // Prepare the mouseout event handler
    let mouseoutHandler = (event) =&gt; {
        event.target.removeChild(tooltip);
    };

    // Set the mouseover event handler
    window.addEventListener('mouseover', event =&gt; {
        if (!event.target.dataset.tooltip) return true;

        tooltip.textContent = event.target.dataset.tooltip;

        event.target.appendChild(tooltip);
        event.target.addEventListener(
            'mouseout',
            mouseoutHandler,
            { once: true }
        );
    });
})();
</code></pre>

<p>In this version, we capture the <code>mouseenter</code> event on the window level, and only set the <code>mouseleave</code> event handler to fire once (by passing the option <code>{ once: true }</code>). This also means you don't have to check if there is a tooltip inside the target element, since it is guaranteed that there will be, and the event handler won't get invoked after that until the next time we show the tooltip.</p>

<p>Also, instead of <code>getAttribute()</code> I used the <code>dataset</code> property. This also means you'll have to use <code>&lt;button data-tooltip="click here"&gt;</code> instead of <code>&lt;button tooltip="click here"&gt;</code>. It's a bit longer, but it is recommended to always use the <code>data-</code> prefix for custom attributes; for one, because this way you can access the attribute directly in the <code>dataset</code> property as seen above, and also to make sure your custom attribute doesn't end up colliding with any standard attribute that might be introduced later (especially for something as common as "tooltip").</p>

<p>I also used pure CSS to center the tooltip.</p>
    </div>