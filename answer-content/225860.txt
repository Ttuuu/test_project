<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Earlier today I was driving home and came across this question, and thought of a method to do this in seconds.</p>

<ol>
<li><p>Each message has a 'chunk' depending on the amount of rows.</p>

<p>In the example, this is the first chunk:</p>

<pre><code>P
A P
Y
</code></pre></li>
<li><p>Each chunk uses the same indexes from the rest of the message. And so you can do a simple slice, <code>message[start::chunk_size]</code>.</p></li>
<li>The size of the chunk is easy to calculate, as it increases by 2 for each row. Starting with 1, 2, 4 ...</li>
<li><p>You can determine the row the slice is on by:</p>

<ol>
<li>By going in order for the first <code>row</code> slices; and</li>
<li>By going backward for the last <code>row-2</code> slices starting from the second to last row.</li>
</ol>

<p>Take:</p>

<pre><code>1
2 6
3 5
4
</code></pre>

<p>At first I thought of this in a slightly different way, in which it was:</p>

<pre><code>1
2 6
3 5
  4
</code></pre></li>
<li><p>From this you just intertwine the rows in those indexes. Which <a href="https://codegolf.stackexchange.com/a/188995">was a recent Code Golf HNQ</a>.</p></li>
</ol>

<p>This can be achieved using the following code in under 20 minutes. Where the hardest part is (4).</p>

<pre><code>import functools
import itertools
import operator


def intertwine(*lists):
    return functools.reduce(operator.add, itertools.zip_longest(*lists, fillvalue=''))


def change(text, rows):
    chunk_size = max((rows-1) * 2, 1)
    slices = [text[start::chunk_size] for start in range(chunk_size)]
    backward_rows = max(rows - 2, 0)
    rows = zip(slices[:rows], [''] + slices[:backward_rows + 1:-1] + [''])
    return ''.join([
        ''.join(intertwine(first, second))
        for first, second in rows
    ])
</code></pre>
    </div>