<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you can't use the suggestions in the comments by t3chb0t or tinstaafl, you could maybe use the <strong><a href="https://docs.microsoft.com/en-us/office/open-xml/open-xml-sdk" rel="nofollow noreferrer">Open XML SDK</a></strong>.</p>

<p>In your current code it is rather inefficient that you are calling <code>datasource.ElementAt(i)...</code> for each property on the same data element. Depending on how <code>ElementAt(i)</code> is implemented, it can be a considerable bottleneck, to search for the same element each time calling <code>ElementAt(i)</code>.</p>

<p>The solution is obviously to create a temporary <code>Plans_Result</code>-reference for each loop:</p>

<pre><code>for (int i = 0; i &lt; datasource.Count(); i++)
{
  Plans_result item = datasource.ElementAt(i) as Plans_result;
  ws.Cells[i + 2, 1].Value = item.ACC_DATE;
  ws.Cells[i + 2, 2].Value = item.DUE_DATE;
  ws.Cells[i + 2, 3].Value = item.IDENTIFIER_VALUE;
  ws.Cells[i + 2, 4].Value = item.INSTALLMENT_NO;
  ws.Cells[i + 2, 5].Value = item.PRINCIPAL_AMT_DUE;
  ws.Cells[i + 2, 6].Value = item.SPA;
}
</code></pre>

<p>Alternatively you could use a <code>foreach-statement</code> while counting the rows in a separate index variable:</p>

<pre><code>int index = 2;
foreach (Plans_result item in datasource)
{
  ws.Cells[index, 1].Value = item.ACC_DATE;
  ...
  index++;
}
</code></pre>

<p>I would use the latter as it is more efficient, because <code>ElementAt(i)</code> may be rather slow for large vectors.</p>
    </div>