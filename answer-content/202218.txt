<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>
<pre><code>var orders = new List&lt;XElement&gt;();
var _orders = new List&lt;Order&gt;();
</code></pre>
<p>First, according to the C# naming convention, you should never have underscores in your variable names declared inside methods. Second, this is pretty confusing.</p>
<p>How about :</p>
<pre><code>var xmlOrders = new List&lt;XElement&gt;();
var convertedOrders = new List&lt;Order&gt;();
</code></pre>
<p>It's a weird (and probably controversial) thing to say, but naming has to be one of the hardest thing to do when it comes to programming. You want your name to be so clear that anyone reading your code would be able to understand it quickly. So names need to be clear and exact.</p>
<p>For example : <code>secondOrder</code> isn't a second order, so it's confusing.</p>
<p>What is it, how should it be named? Well it seems like this <code>order</code> is an <code>alreadyAddedOrder</code>. You might want to find another name, but it should give the same "vibe".</p>
<h2>C# things</h2>
<ol>
<li><p>You can use the <em>object initializer</em> :</p>
<p>var orderTemp = new Order();
orderTemp.OrderDate = Convert.ToInt32(order.Attribute("date").ToString());
orderTemp.Id = Convert.ToInt32(order.Attribute("id").ToString());
orderTemp.CategoryId = Convert.ToInt32(order.Attribute("categoryId").ToString());
orderTemp.ProductCount = Convert.ToInt32(order.Attribute("productCount").ToString());</p>
</li>
</ol>
<p>becomes :</p>
<pre><code>var orderTemp = new Order
{
    OrderDate = Convert.ToInt32(order.Attribute("date").ToString()),
    Convert.ToInt32(order.Attribute("id").ToString()),
    //etc..
};
</code></pre>
<p>It's simply shorter and clearer, but it is compiled the same way as your previous code.</p>
<blockquote>
<ol start="2">
<li>Note : Order ID is not unique, date + id + category, is unique altogether</li>
</ol>
</blockquote>
<p>We've got a great case of <code>override Equals</code>.</p>
<p>As it is right now, the responsibility of deciding if two orders are equal is stored (as code) in your <code>Load</code> method. Is this fine? I don't think so!</p>
<p>An <code>Order</code> should be able to tell if it's equal to another Order`.</p>
<pre><code>public class Order
{
    public int Id;
    public int CategoryId;
    public int OrderDate;
    public int ProductCount;

    public override Equals(object obj)
    {
       //etc.
    }
}
</code></pre>
<p>I recommend you read a little bit on how to correctly implement the <code>Equals</code> override as you'll also need to override the <code>GetHashCode</code> method.</p>
<ol start="3">
<li><p>Don't use <code>Convert.ToInt32</code> when you have a <code>string</code> that should be an <code>int</code>. Use <code>int.Parse</code>. <a href="https://stackoverflow.com/a/199484/2785479">reference</a></p>
</li>
<li><p>Also, override <code>ToString</code> to replace <code>orderTemp.OrderDate.ToString() + orderTemp.Id.ToString() + orderTemp.CategoryId.ToString()</code>.</p>
</li>
</ol>
<h3>Encapsulation</h3>
<pre><code>public class Order
{
    public int Id;
    public int CategoryId;
    public int OrderDate;
    public int ProductCount;
}
</code></pre>
<p>Now, you might not feel it's necessary to implement this as it's a pretty "defensive programming" thing, but I feel it's important to talk about it. If I look at this class from a business point of view, it means that if I pass an order, I should be able to modify the said order afterwards. But when an order is passed, <em>should I</em> be able to modify, say, the <code>OrderDate</code>? Not really. There's also an important point that once you override the <code>GetHashCode</code> method, you should consider making your object "read only", so that it doesn't mess with the hashes.</p>
<p><code>Order</code> becomes :</p>
<pre><code>public class Order
{
    public Order(int id, int categoryId, int orderDate, int productCount)
    { 
        //etc.
    }

    public int Id { get; }
    public int CategoryId { get; }
    public int OrderDate { get; }
    public int ProductCount { get; }

    //Equals and GetHashCode override.
}
</code></pre>
<h2>General points</h2>
<ul>
<li><p>Don't use <code>_alreadyAddedOrders</code> to keep <code>string</code>. You're looking for orders, this list should contain orders.</p>
</li>
<li><p>Why is <code>OrderDate</code> an <code>int</code>? If it's stored as milliseconds, it should be a <code>long</code>, otherwise I don't see how you can parse an <code>int</code> to a meaningful date.</p>
</li>
</ul>
    </div>