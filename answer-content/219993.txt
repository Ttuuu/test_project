<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answer is written in the spirit of <a href="https://codereview.meta.stackexchange.com/questions/2169/new-answers-on-old-questions-using-new-language-features">New answers on old questions using new language features</a>: The Swift language has developed considerably from Swift 1 (in 2014) to the current version Swift 5. Many new features were added in the meantime, and that allows to simplify the provided code.</p>

<p>I will also use the current <a href="https://swift.org/documentation/api-design-guidelines/#general-conventions" rel="nofollow noreferrer">naming conventions</a> of Swift:</p>

<blockquote>
  <p>Names of types and protocols are <code>UpperCamelCase</code>. Everything else is <code>lowerCamelCase</code>.</p>
</blockquote>

<h3>Iterating over all enumeration values</h3>

<p>The first (and main) point is that with the implementation of <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md" rel="nofollow noreferrer">SE-0194 Derived Collection of Enum Cases</a> in Swift 4.2, “simple” enumerations (i.e.: enumerations without associated values) can conform to the <a href="https://developer.apple.com/documentation/swift/caseiterable" rel="nofollow noreferrer"><code>CaseIterable</code></a> protocol:</p>

<pre><code>enum Suit: String, CaseIterable {
    case clubs = "Clubs"
    case diamonds = "Diamonds"
    case hearts = "Hearts"
    case spades = "Spades"
}
</code></pre>

<p>That is an “opt-in” feature: You have to declare the protocol conformance, but then the compiler synthesizes the required code. And now iterating over all possible values becomes as simple as</p>

<pre><code>for suit in Suit.allCases {
    // ...
}
</code></pre>

<p>Defining a sentinel case (<code>__EXHAUST</code>) and a <code>successor()</code> method is no longer needed. If we define <code>enum Rank</code> in the same fashion then the complete deck can be created with</p>

<pre><code>var deck: [Card] = []
for suit in Suit.allCases {
    for rank in Rank.allCases {
        let newCard = Card(suit: suit, rank: rank)
        deck.append(newCard)
    }
}
</code></pre>

<p>Or by <code>map()</code>ing each suit and rank to a card and flattening the result:</p>

<pre><code>let deck = Suit.allCases.flatMap { suit in
    Rank.allCases.map { rank in
        Card(suit: suit, rank: rank)
    }
}
</code></pre>

<h3>Providing a textual representation</h3>

<p><code>Printable</code> and  <code>DebugPrintable</code> have been renamed to <code>CustomStringConvertible</code> and <code>CustomDebugStringConvertible</code>. If – as in your code – both <code>description</code> and <code>debugDescription</code> produce the <em>same result</em> then it is sufficient to implement the <code>CustomStringConvertible</code> conformance, it will serve as a fallback for <code>debugDescription</code>. Also,</p>

<ul>
<li>the <code>get { ... }</code> wrapper can be omitted in a read-only computed property,</li>
<li>the implicit <code>self</code> can be omitted.</li>
</ul>



<pre><code>extension Card: CustomStringConvertible {
    var description: String {
        return rank.rawValue + " of " + suit.rawValue
    }
}
</code></pre>

<p>Another option would be to use the default raw values of string-based enums</p>

<pre><code>enum Suit: String, CaseIterable {
    case clubs
    case diamonds
    case hearts
    case spades
}
</code></pre>

<p>and capitalize the initial character in the description method:</p>

<pre><code>extension Card: CustomStringConvertible {
    var description: String {
        return rank.rawValue.capitalized + " of " + self.suit.rawValue.capitalized
    }
}
</code></pre>

<h3>Shuffling the deck</h3>

<p>With the <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md" rel="nofollow noreferrer">Random Unification</a> in Swift 4.2, a <code>shuffle()</code> method has been added for mutable collections:</p>

<pre><code>deck.shuffle()
// Or:
let newDeck = deck.shuffled()
</code></pre>

<p>Implementing a custom (Fisher-Yates) shuffle method is no longer necessary.</p>
    </div>