<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Do you think this service is useful?</p>
</blockquote>

<p>I don't think it's possible to answer that question with the toy example given. IMO it doesn't shed any light on how you intend to use it for things like</p>

<blockquote>
  <p>committing things to the database, saving files, sending emails, reading files, executing queries and and and...</p>
</blockquote>

<hr>

<blockquote>
<pre><code>    public FeatureService(ILogger&lt;FeatureService&gt; logger, FeatureOptions defaultOptions = Enabled | Warn | Telemetry)
</code></pre>
</blockquote>

<p>I realise that the limitations of C#'s type system don't allow a good solution here, but ideally the logger would be typed (using Java's covariant notation) as <code>ILogger&lt;? extends FeatureService&gt;</code>. Have you considered using F-bounded polymorphism (<code>FeatureService&lt;T extends FeatureService&lt;T&gt;&gt;</code>)?</p>

<hr>

<blockquote>
<pre><code>    public async Task&lt;T&gt; ExecuteAsync&lt;T&gt;(string name, Func&lt;Task&lt;T&gt;&gt; body, Func&lt;Task&lt;T&gt;&gt; bodyWhenDisabled)
</code></pre>
</blockquote>

<p><code>name</code> of what? The <code>body</code>? I think it's actually the <em>label</em> of the toggle, but I'm having to reverse engineer the code to figure that out, rather than relying on the documentation and signature.</p>

<hr>

<blockquote>
<pre><code>            if (options.HasFlag(Enabled))
            {
                if (options.HasFlag(Warn) &amp;&amp; !_defaultOptions.HasFlag(Enabled))
                {
                    _logger.Log(Abstraction.Layer.Service().Decision($"Using feature '{name}'").Because("Enabled").Warning());
                }
            }
            else
            {
                ...
                if (options.HasFlag(Warn) &amp;&amp; _defaultOptions.HasFlag(Enabled))
                {
                    _logger.Log(Abstraction.Layer.Service().Decision($"Not using feature '{name}'").Because("Disabled").Warning());
                }
            }
</code></pre>
</blockquote>



<blockquote>
<pre><code>    /// &lt;summary&gt;
    /// When set a warning is logged when a feature is toggled.
    /// &lt;/summary&gt;
    Warn = 1 &lt;&lt; 1,
</code></pre>
</blockquote>

<p>The way I interpreted the documentation of the flag is very different to what it actually does. To me, "<em>when a feature is toggled</em>" refers to a trigger/event which is fired by calling <code>Configure</code>.</p>

<hr>

<blockquote>
<pre><code>            try
            {
                return await body();
            }
</code></pre>
</blockquote>

<p>If this is intended to be a library, which I think it is, it's missing <code>.ConfigureAwait(false)</code>. If you don't put it in now, you'll end up debugging a deadlock when you try using this in a WPF application.</p>
    </div>