<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't confuse module and module symbol imports</h2>

<p>You wrote this:</p>

<pre><code>import datetime
from datetime import datetime
</code></pre>

<p>which is both confusing and unnecessary. It doesn't seem that you use <code>datetime</code> anywhere, so just delete these lines. Even if you did need to use <code>datetime</code>, choose one or the other - either just import the module and use it for qualified names, or import symbols from it - not both.</p>

<h2>Make some functions</h2>

<p>You don't have any functions. Everything is hanging out in the same global scope. This is cluttered, difficult to read and difficult to maintain and debug. Write some functions!</p>

<h2>Make the computer do the repetition</h2>

<p>This:</p>

<pre><code>Pfc = arcpy.GetParameterAsText(0)##Blast locations
idField = arcpy.GetParameterAsText(1) ##Blast ID field - can be object id or user defined/named field
pointID = arcpy.GetParameterAsText(2) ##ID of blast location to be used (Amazon = Front Entrance or Loading Bay)
bFootprints = arcpy.GetParameterAsText(3)##Building footprint
totalEx = arcpy.GetParameterAsText(4) ##Total building exposure
buildType = arcpy.GetParameterAsText(5) ##Building construction type - this influences loss ratios
outGDB = arcpy.GetParameterAsText(6)##Output Location (gdb)
buffName = arcpy.GetParameterAsText(7) ##Buffer name - this will persist for intersect name(s) too
BlastZones = arcpy.GetParameterAsText(8) ##Blast zones to use - DHS or Lloyds.
BlastSize = arcpy.GetParameterAsText(9) ##Blast size - drop down list
outCorName = arcpy.GetParameterAsText(10) ##output coordinate system - drop down list
lossTable = arcpy.GetParameterAsText(11) ##Output loss table (to GDB)
outShape = arcpy.GetParameterAsText(12) ##Output to shapefile - T or F
outCSV = arcpy.GetParameterAsText(13) ##Output loss table as csv - T or F
</code></pre>

<p>should be populating either a class, or maybe a dictionary. If you do it as a dictionary, then:</p>

<pre><code>vars = {name: arcpy.GetParameterAsText(i)
        for i, name in enumerate((
            'Pfc',      # Blast ID field - can be object ID or user defined/named field
            'idField',  # ID of blast location to be used
            # ...
        ))
       }
</code></pre>

<h2>Use OS methods</h2>

<p>This seems harmless:</p>

<pre><code>Pfc = str(desc.path) + "\\" + desc.name
</code></pre>

<p>though it could be cleaned up somewhat by the use of a raw f-string:</p>

<pre><code>Pfc = rf'{desc.path}\{desc.name}'
</code></pre>

<p>But wait! Not all operating systems use a backslash as a path separator! So instead you should do</p>

<pre><code>Pfc = os.path.join(desc.path, desc.name)
</code></pre>

<h2>Just use literals</h2>

<p>This:</p>

<pre><code>TField1 = "DamageLevel"
TField2 = "ImpactZoneByFeet"
TField3 = "PropertyFootprint_Area"
TField4 = "PropertyImpacted_Area"
TField5 = "TotalExposure"
TField6 = "ImpactRatio"
TField7 = "ImpactExposure"
TField8 = "LossRatio"
TField9 = "Loss"
TablefList = [TField1,TField2,TField3,TField4,TField5,TField6,TField7,TField8,TField9]
</code></pre>

<p>should really just be</p>

<pre><code>table_f_list = [
    'DamageLevel',
    'ImpactZoneByFeet',
    # ...
]
</code></pre>

<h2>Parametrize hard-coded paths</h2>

<p>If this <em>never</em> changes:</p>

<pre><code>tableTemplate = r"O:\LossTable"
</code></pre>

<p>then it should be made capitalized (<code>TABLE_TEMPLATE</code>). However, it'd be better represented as an environmental variable or command-line argument.</p>

<h2>Don't use comma notation for exceptions</h2>

<p>This:</p>

<pre><code>except Exception, e:
</code></pre>

<p>should be converted to the "new" (Python 2.6 and later, so... really not new at all) syntax:</p>

<pre><code>except Exception as e:
</code></pre>
    </div>