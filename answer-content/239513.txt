<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Answers to your questions</h1>

<blockquote>
  <p>Should the default implementation of the event callback function stay or should be a pure virtual?</p>
</blockquote>

<p>There is no point in using the base class itself, so it's better to make it pure virtual. This way, bugs in the code where a base class is instantiated by accident are then caught by the compiler.</p>

<blockquote>
  <p>Should attach and detach interfaces be changed to variadic? If so then should the recursion take place in Publisher template or the Container template?</p>
</blockquote>

<p>Since you are asking, the answer is most likely no. If you have no real need for variadic interfaces, I would keep things simple.</p>

<blockquote>
  <p>How to break this up into headers and implementation to maintain a need to know basis with other code?</p>
</blockquote>

<p>It makes sense to have at least a <code>publisher.hpp</code> and a <code>subscriber.hpp</code>, since the various components of your application will need at least one of those two things. As it is now, the code is small enough that I would not split it further.</p>

<blockquote>
  <p>Thread safety? My assumption is to use mutex in the attach detach methods.</p>
</blockquote>

<p>If you do that, you also need to lock the mutex in the publish method, since it will be iterating over the list of subscribers. But yes, if you expect that you will attach, detach and publish from different threads, I would certainly add mutexes.</p>

<h1>Code review</h1>

<p>The code is quite simple, and if it does exactly what you need, then it's already nice code. I just have these remarks:</p>

<h2>Merge the <code>Subscribers</code> class into <code>Publisher</code></h2>

<p>There is no good reason to have a separate class <code>Subscribers</code>, that just takes care of attaching and detaching, and then have <code>Attach()</code> and <code>Detach()</code> methods in <code>Publisher</code> that just wrap the methods from <code>Subscribers</code>.</p>

<p>It would be different if you plan to be able to attach and detach multiple publishers to a given event type. Then you would want to have a separate class that represents the event queue where both publishers and subscribers can connect to.</p>

<h2>Avoid names starting with underscores</h2>

<p>Names starting with underscores are by convention reserved for the standard library. There are some exceptions, but it is best to just not use such names yourself.</p>

<p>In most cases, it's not necessary at all. Why make a protected function named <code>_attach()</code>, when it is explicitly marked <code>protected</code> in the class definition?</p>

<h2>Don't write <code>this-&gt;</code> unnecessarily</h2>

<p>It's almost never necessary to write <code>this-&gt;</code> in C++. In the case of <code>Attach()</code> for example, you can just write:</p>

<pre><code>void Attach(EventSubscriber &amp;s) { 
    Subscribers&lt;Subscriber&lt;EventType&gt;&gt;::_attach(s); 
}
</code></pre>
    </div>