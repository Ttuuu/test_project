<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While kyles and paritosh code should preform a sort, the code is not a true Insertion Sort and is not as efficient as a true Insertion Sort. The problem is that in your versions the inner loop has to proceed until <code>j == 0</code> where as with the real Insertion Sort, the inner loop terminates as soon as the condition <code>(inputArray[j-1] &gt; inputArray[j])</code> is no longer true. Another way of thinking about it is that that once the inner loop has moved a value to its optimum position in the array, the loop can terminate without having to do the remaining compares. If the initial array is randomly distributed, a true Insertion Sort only has to do about half the number of compares as your algorithms. And if the initial array is already nearly sorted, a true Insertion Sort will only have to do slightly more than N compares where as your algorithms will have to do about N squared compares. A true Insertion Sort looks like this:</p>

<pre><code>static int[] performInsertionSort(int[] array)
{
    int length = array.Length;

    for (int i = 1; i &lt; length; i++)
    {
        int j = i;

        while ((j &gt; 0) &amp;&amp; (array[j] &lt; array[j - 1]))
        {
            int k = j - 1;
            int temp = array[k];
            array[k] = array[j];
            array[j] = temp;

            j--;
        }
    }
    return array;
}
</code></pre>
    </div>