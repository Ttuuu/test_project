<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, first of all, decouple internal and external representation. This allows for efficient and elegant implementation of the game-logic, as well as easing any changes to the user-interface you might ever want to make.</p>

<pre><code>enum status { TIE, WIN, LOSS, UNKNOWN};
enum symbol { ROCK, PAPER, SCISSORS, UNKNOWN};

constexpr status resolve_game(symbol user, symbol gaia) noexcept {
    return (3 + user - gaia) % 3;
}

constexpr symbol to_symbol(std::string_view s) noexcept {
    return s == "rock" ? ROCK
        : s == "paper" ? PAPER
        : s == "scissors" ? SCISSORS
        : UNKNOWN;
}

constexpr std::string_view to_string(symbol s) noexcept {
    constexpr std::string_view names[] = { "rock", "paper", "scissors", "?", };
    return names[s];
}

constexpr std::string_view to_string(status s) noexcept {
    constexpr std::string_view names[] = { "tied", "won", "lost", "?", };
    return names[s];
}
</code></pre>

<p>Having done that should allow you to make the rest much nicer.</p>

<hr>

<p>A couple points to coding-style:</p>

<ol>
<li><p>Use <code>nullptr</code>, never <code>NULL</code>. The latter can cause ambiguity.</p></li>
<li><p>Namespaces <code>std</code> is not designed to be imported wholesale, so desist.</p></li>
<li><p>Only use <code>std::endl</code> if you really need to flush the stream. And in that case, prefer <code>std::flush</code> to demonstrate your conscious choice.</p></li>
<li><p>Header-files are for declarations, some <code>inline</code>-implementations, the rare preprocessor-macro and certain other constants. General function- and variable-definitions belong in implementation-files.</p></li>
<li><p>The name is an integral part of any symbol, and well-selected names clarify the code and obviate the need for most comments.</p></li>
<li><p>When you have the choice, avoid heap-allocations, even if properly encapsulated.</p></li>
</ol>
    </div>