<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type hints</h2>

<p>At a guess, this:</p>

<pre><code>def kmer_clumps(seq, k, L, t):
</code></pre>

<p>can become</p>

<pre><code>def kmer_clumps(seq: Sequence[str], k: int, l: int, t: int) -&gt; Set[str]:
</code></pre>

<p>It's somewhat more self-documenting, and helps your IDE with static analysis and autocompletion.</p>

<p>p.s. There's nothing wrong with returning an empty set. That's much more preferable than returning <code>None</code>. People iterating over the returned set often won't need to change their code for an empty set, but <em>would</em> need to change their code for a <code>None</code>.</p>

<h2>Logging</h2>

<pre><code>print("Starting a job")
</code></pre>

<p>can benefit from the (even simple) use of <a href="https://docs.python.org/3.8/library/logging.html#module-email" rel="nofollow noreferrer">https://docs.python.org/3.8/library/logging.html#module-email</a></p>

<h2>Global constants</h2>

<p>...such as</p>

<pre><code>k = 5
L = 50
t = 4
cores = 2
</code></pre>

<p>should be ALL_CAPS.</p>

<h2>Variable names</h2>

<p><code>seqLength</code> should be snake_case, i.e. <code>set_length</code>; and so on for your other variables.</p>

<h2>Generators</h2>

<pre><code>    parts = []
    for part in range(0, seqLength, jobSegments + extraSegments):
        tmpList = [seq[part:part + jobSegments +
                       extraSegments + overlapSize + 1], k, L, t]
        parts.append(tmpList)
</code></pre>

<p>can be cleaned up by factoring it out into a generator function:</p>

<pre><code>def make_part_list(...):
    for part in range(0, seqLength, jobSegments + extraSegments):
        tmpList = [seq[part:part + jobSegments +
                       extraSegments + overlapSize + 1], k, L, t]
        yield tmpList
        # or if you don't want nested lists...
        yield from tmpList

# ...
parts = tuple(make_part_list(...))
</code></pre>
    </div>