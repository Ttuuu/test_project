<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.  I'll start with the more superficial and progress to more substantive suggestions.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  In this particular case, I happen to think it's not terrible but it also doesn't help much.</p>

<h2>Make sure you have all required <code>#include</code>s</h2>

<p>The code uses <code>sqrt</code> but doesn't <code>#include &lt;cmath&gt;</code>.  Also, remember that <code>sqrt</code> is in the <code>std</code> namespace, so the fully qualified name is <code>std::sqrt</code>.  Additionally, <code>rand</code> is used but no <code>&lt;cstdlib&gt;</code></p>

<h2>Be careful with signed and unsigned</h2>

<p>In the current code, the loop integers <code>i</code> and <code>j</code> and <code>k</code> are signed <code>int</code> values, but they're being compared with <code>unsigned</code> quantities <code>x1.size()</code> and <code>x2.size()</code>.  Better would be to declare them all as <code>unsigned</code> or <code>size_t</code>.</p>

<h2>Use <code>const</code> where practical</h2>

<p>The passed vectors should not be altered (and are not altered) by the processing functions.  Indicate that fact (and maybe even get a small speed boost) by specifying <code>const std::vector&amp;</code> as the function arguments.</p>

<h2>Use "range <code>for</code>" and simplify your code</h2>

<p>If you're using a C++11 compliant compiler, the use of "range <code>for</code>" can simplify your code.  For example, the code currently contains this:</p>

<pre><code>for (unsigned i = 0; i &lt; res.size(); ++i)
    if (res[i] &lt; cutoff)
        res2.push_back(res[i]);
</code></pre>

<p>It could be this:</p>

<pre><code>for (auto dist: res)
    if (dist &lt; cutoff)
        res2.push_back(dist);
</code></pre>

<p>Better would be to eliminate it completely, but we'll get to that later.</p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference between <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Don't store data you don't need</h2>

<p>Right now, the code attempts to calculate the comprehensive list of distances and puts them into a large vector.  On my machine, a <code>double</code> is 8 bytes.  With 50000 and 25000 points in the two sets, this means the resulting distance vector is 50000 * 25000 * 8 = 10,000,000,000 bytes or 9.3 GiB.  That's a huge amount of data, which the program then mostly discards and then reduces to a single number.  (On my machine, that number is always <code>-nan</code> which suggests another problem, but more on that later.)  </p>

<h2>Use classes more effectively</h2>

<p>The description talks about points, but the program actually uses vectors of coordinates instead.  I'd recommend creating a templated <code>Point2D</code> object like this:</p>

<pre><code>template &lt;typename T&gt;
class Point2D {
public:
    Point2D(T x, T y) : x_(x), y_(y) {}
    T dist(const Point2D&amp; other) const {
        return std::sqrt(sqdist(other));
    }
    T sqdist(const Point2D&amp; other) const {
        const auto dx{x_ - other.x_};
        const auto dy{y_ - other.y_};
        return dx*dx + dy*dy;
    }
private:
    T x_, y_;
};
</code></pre>

<h2>Consider using a better random number generator</h2>

<p>Right now, the program is using the old C-style <code>rand</code> which is not a very good random number generator.  The intent is apparently to create numbers in the range <code>[0, RAND_MAX]</code> where <code>RAND_MAX</code> is implementation defined.  On my machine, <code>RAND_MAX = 2147483647</code> but on yours I suspect it must be 32768.  Otherwise you would also be getting <code>-nan</code> for the result or you'd have chosen a different cutoff value.  So rather than relying on implementation defined values and a poor random number generator, if you are using a compiler that supports at least C++11, consider using a better random number generator.  In particular, instead of <code>rand</code>, you might want to look at <a href="http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution" rel="nofollow noreferrer"><code>std::uniform_real_distribution</code></a> and friends in the <code>&lt;random&gt;</code> header.  Here's one way to do it:</p>

<pre><code>double newrand() {
    static std::random_device rd;
    static std::mt19937 gen(rd());
    static std::uniform_real_distribution&lt;double&gt; dis(0, 32768);
    return dis(gen);
}
</code></pre>

<h2>Avoid computationally costly operations</h2>

<p>The distance between every pair of points is calculated which means millions of calls to <code>std::sqrt</code>, but this is not really needed since it would be sufficient to calculate the squared distance instead and then compare with the squared cutoff value.  We can go a bit further and test the square of each coordinate pair.  That is, if <span class="math-container">\$(\Delta x)^2 \ge t^2\$</span>, or <span class="math-container">\$(\Delta y)^2 \ge t^2\$</span>, then there's no point in doing further calculations.</p>

<h2>Results</h2>

<p>When I first ran the program, it takes 30.9 seconds just for the <code>all_dist</code> call and a total of 55.1 seconds to finally print the answer.  After applying all of the suggestions above the program runs in 0.95 seconds.  Here's the revised code:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;ctime&gt;
#include &lt;cmath&gt;
#include &lt;random&gt;

double newrand() {
    static std::random_device rd;
    static std::mt19937 gen(rd());
    static std::uniform_real_distribution&lt;double&gt; dis(0, 32768);
    return dis(gen);
}

template &lt;typename T&gt;
class Point2D {
public:
    Point2D() : x_(newrand()), y_(newrand()) {}
    Point2D(T x, T y) : x_(x), y_(y) {}
    T dist(const Point2D&amp; other) const {
        return std::sqrt(sqdist(other));
    }
    T sqdist(const Point2D&amp; other) const {
        const auto dx{x_ - other.x_};
        const auto dy{y_ - other.y_};
        return dx*dx + dy*dy;
    }
    T sqdist_thr(const Point2D&amp; other, T threshold) const {
        const auto dx{x_ - other.x_};
        const auto dy{y_ - other.y_};
        if (dx &lt; threshold &amp;&amp; dy &lt; threshold)
            return dx*dx + dy*dy;
        return threshold;
    }
private:
    T x_, y_;
};

double avgdist(const std::vector&lt;Point2D&lt;double&gt;&gt;&amp; a, const std::vector&lt;Point2D&lt;double&gt;&gt;&amp; b, double threshold) {
    const double threshold2 = threshold*threshold;
    double sum{0};
    unsigned count{0};
    for (const auto &amp;one: a) {
        for (const auto &amp;two: b) {
            auto d2 = one.sqdist_thr(two, threshold2);
            if (d2 &lt; threshold2) {
                ++count;
                sum += std::sqrt(d2);
            }
        }
    }
    return sum/count;
}

int main() {
        constexpr int num_el = 50000;
        constexpr double cutoff = 200;
        const std::vector&lt;Point2D&lt;double&gt;&gt; a(num_el);
        const std::vector&lt;Point2D&lt;double&gt;&gt; b(num_el/2);

        clock_t begin_time = clock();
        std::cout &lt;&lt; avgdist(a, b, cutoff) &lt;&lt; '\n';
        std::cout &lt;&lt; float(clock() - begin_time) / CLOCKS_PER_SEC &lt;&lt; '\n';
}
</code></pre>
    </div>