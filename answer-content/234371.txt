<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>First of all thanks to all the authors @user3629249 @G.Sliepen @chux-Reinstate Monica who provided valuable insights to the source-code of a command-line based merge-sort algorithm described in the <a href="https://codereview.stackexchange.com/q/234294/115751"><strong>Problem Description.</strong></a>. </p>
</blockquote>

<p>I have made important changes to the source code in order to make it better in terms of security, loopholes, buffer-overflows, maintainability, readability, robustness, and to be production-ready.</p>

<p><strong>Changes Made:</strong>  </p>

<ul>
<li>Changed the format in which a user can give command-line arguments.  </li>
<li>Used <code>getopt_long()</code> for better processing of command-line arguments with support for long and short options.  </li>
<li>Added a help menu which you can access by passing <code>-h or --help</code> flag while running the program through command-line.<br>
E.g. <code>/merge_sort -h</code> </li>
<li>Used <code>strtol()</code> and <code>strtoll()</code> for coversion of string into <code>long</code> and <code>long long</code>.  </li>
<li>Replaced <code>memmove()</code> to <code>memcpy()</code> in the <code>merge_integer_data()</code> function for speed-up.  </li>
<li>Changed the function <code>static void display_sequence(const int64 *const,const size_t)</code> to <code>static void display_sequence(const int64 *const,const size_t,const char*)</code>.</li>
<li>Used macros <code>MEMORY_ALLOCATION_FAILED_ERROR(variable,x)</code> and <code>INVALID_COMMAND_LINE_OPTION_ERROR</code> to print the error messages.</li>
<li>Removed <code>-n --size</code> option.</li>
</ul>

<p><strong>Format to supply command-line arguments:</strong>  </p>

<pre><code>Command-Line Based Merge-Sort-Program:
-d,--data: To specify the integer sequence to sort.
-r,--reverse: To sort the sequence in decreasing order.
-h,--help: Call with -h or --help for help.
-n,--size | -d,--data are options which take one argument which is mandatory.
-r,--reverse | -h,--help are options which take no arguments.
</code></pre>

<p><strong>Source-Code:</strong>  </p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdbool.h&gt;
#include&lt;string.h&gt;
#include&lt;getopt.h&gt;
#include&lt;assert.h&gt;

#define MEMORY_ALLOCATION_FAILED_ERROR(variable,x) fprintf(stderr,"Line number: %u: Not able to allocate &lt;%lu&gt; bytes of memory to "#variable".\n", __LINE__,x)
#define INVALID_COMMAND_LINE_OPTION_ERROR fprintf(stderr,"Line number: %u: Invalid Arguments Passed.Refer to -h or --help for more information.\n", __LINE__)

bool reverse_order = false;

typedef unsigned long long uint64;
typedef long long int64;

static bool check_sorted(const int64 *const,const size_t,const bool);
static void merge_sort_integer_sequence(int64 *const,const size_t,const size_t);
static void merge_integer_data(int64 *const,const size_t,const size_t,const size_t,bool (*comparator)(const void*,const void*));
static void display_sequence(const int64 *const,const size_t,const char*);
static size_t compute_length_sequence(const char*);
static int64* preprocess_input_sequence(char *const,const size_t,bool *const,bool *const);
static bool check_int64(char *const);
static bool integer_comparator(const void*,const void*);
static void print_help_msg(void);

int main(int argc,char *const argv[]) {
    size_t data_size;
    int64 *sequence = NULL;
    bool invalid_data, size_mismatch;
    invalid_data = size_mismatch = false;
    const struct option long_options[] = {
        {"data", required_argument, NULL, 'd'},
        {"reverse", no_argument, NULL, 'r'},
        {"help", no_argument, NULL, 'h'}
    };
    bool dflag, hflag;
    dflag = hflag = false;
    while(true) {
        int option_index = 0;
        int option = getopt_long(argc,argv,"d:rh",long_options,&amp;option_index);
        if(option == -1) {
            break;
        }
        switch(option) {
            case 'd':
                dflag = true;
                data_size = compute_length_sequence(optarg);
                sequence = preprocess_input_sequence(optarg,data_size,&amp;invalid_data,&amp;size_mismatch);
                break;
            case 'r':
                reverse_order = true;
                break;
            case 'h':
                hflag = true;
                break;
            default:
                break;
        }
    }
    if(dflag) {
        if(!sequence) {
            if(invalid_data) {
                fprintf(stderr,"Line number: %u: Data in the sequence is invalid. Refer to -h or --help for more information.\n", __LINE__);
            } else if(size_mismatch) {
                fprintf(stderr,"Line number: %u: Size and total number of integers in sequence are not same. Refer to -h or --help for more information\n", __LINE__);
            }
            exit(0);
        }
    } else if(!dflag &amp;&amp; hflag) {
        print_help_msg();
        exit(0);
    } else {
        INVALID_COMMAND_LINE_OPTION_ERROR;
        exit(0);
    }
    if(!check_sorted(sequence,data_size,reverse_order)) {
        merge_sort_integer_sequence(sequence, 0, data_size - 1);
    }
    display_sequence(sequence, data_size, " ");
    free(sequence);
    return EXIT_SUCCESS;
}

static size_t compute_length_sequence(const char *data) {
    size_t length = 1;
    for(unsigned int i = 0; '\0' != data[i]; ++i) {
        if(' ' == data[i]) {
            ++length;
        }
    }
    return length;
}

static int64* preprocess_input_sequence(char *const data,const size_t data_size,bool *const invalid_data,bool *const size_mismatch) {
    int64 *sequence = calloc(data_size, sizeof(int64));

    if(sequence) {
        char *buffer = data, *extracted_data;
        extracted_data = strtok_r(buffer, " ", &amp;buffer);
        if(!check_int64(extracted_data)) {
            free(sequence);
            sequence = NULL;
            *size_mismatch = true;
        } else {
            sequence[0] = strtoll(extracted_data,NULL,10);
            size_t j = 1;
            while((extracted_data = strtok_r(NULL," ",&amp;buffer))) {
                if(!check_int64(extracted_data)) {
                    free(sequence);
                    sequence = NULL;
                    *invalid_data = true;
                    break;
                } else {
                    sequence[j++] = strtoll(extracted_data,NULL,10);
                }
            }
        }
    } else {
        MEMORY_ALLOCATION_FAILED_ERROR(sequence, (data_size * sizeof(int64)));
    }
    return sequence;
}

static bool check_int64(char *const data) {
    bool is_int64 = true;
    if(!data) {
        is_int64 = false;
    } else {
        for(size_t i = 0; data[i] != '\0'; ++i) {
            if('-' == data[0]) {
                if('-' == data[1]) {
                    is_int64 = false;
                    break;
                }
            } else if(!('0' &lt;= data[i] &amp;&amp; '9' &gt;= data[i])) {
                is_int64 = false;
                break;
            }
        }
    }
    return is_int64;
}

static void display_sequence(const int64 *const data,const size_t n,const char *delimiter) {
    printf("%lld", data[0]);
    for(size_t i = 1; i &lt; n; ++i) {
        printf("%s%lld", delimiter,data[i]);
    }
    printf("\n");
}

static bool check_sorted(const int64 *const data,const size_t n,const bool order) {
    bool is_sorted = true;

    if(!order) {
        for(size_t i = 0; i &lt; (n - 1); ++i) {
            if(data[i] &gt; data[i + 1]) {
                is_sorted = false;
                break;
            }
        }
    } else {
        for(size_t i = 0; i &lt; (n - 1); ++i) {
            if(data[i] &lt; data[i + 1]) {
                is_sorted = false;
                break;
            }
        }
    }
    return is_sorted;
}

static void merge_sort_integer_sequence(int64 *const data,const size_t start,const size_t end) {
    if(start &lt; end) {
        const size_t mid = ((end - start) &gt;&gt; 1) + start;
        merge_sort_integer_sequence(data,start,mid);
        merge_sort_integer_sequence(data,(mid + 1),end);
        merge_integer_data(data,start,mid,end,integer_comparator);
    }
}

static void merge_integer_data(int64 *const data,size_t start,size_t mid,size_t end,bool (*comparator)(const void *,const void *)) {
    size_t left_size = (mid - start) + 1;
    int64 left_data[left_size];
    memcpy(left_data,&amp;data[start],(sizeof(int64) * left_size));
    size_t right_size = end - mid;
    int64 right_data[right_size];
    memcpy(right_data,&amp;data[mid + 1],(sizeof(int64) * right_size));

    for(size_t k = start, i = 0, j = 0; k &lt;= end; ++k) {
        if(i == left_size) {
            data[k] = right_data[j++];
        } else if(j == right_size) {
            data[k] = left_data[i++];
        } else if(comparator(&amp;left_data[i],&amp;right_data[j])) {
            if(reverse_order) {
                data[k] = right_data[j++];
            } else {
                data[k] = left_data[i++];
            }
        } else {
            if(reverse_order) {
                data[k] = left_data[i++];
            } else {
                data[k] = right_data[j++];
            }
        }
    }
}

static bool integer_comparator(const void *a,const void *b) {
    return (*(int64*)a) &lt; (*(int64*)b);
}

static void print_help_msg(void) {
    printf("\nCommand-Line Based Merge-Sort-Program:\n"
    "-d,--data: To specify the integer sequence to sort.\n"
    "-r,--reverse: To sort the sequence in decreasing order.\n"
    "-h,--help: Call with -h or --help for help.\n"
    "-n,--size | -d,--data are options which take one argument which is mandatory.\n"
    "-r,--reverse | -h,--help are options which take no arguments.\n\n");
}

</code></pre>

<p>Before running the program do see the <code>help</code> message which will give you a fair idea about how the program works.</p>

<p><strong>Output of Program:</strong>  </p>

<pre><code>./merge_sort --help
Command-Line Based Merge-Sort-Program:
-d,--data: To specify the integer sequence to sort.
-r,--reverse: To sort the sequence in decreasing order.
-h,--help: Call with -h or --help for help.
-n,--size | -d,--data are options which take one argument which is mandatory.
-r,--reverse | -h,--help are options which take no arguments.

./merge_sort -d "34 2 4 11 3"
2 3 4 11 34

./merge_sort -d "34 2 4 11 3" -r
34 11 4 3 2
</code></pre>

<p>If you think there is a possibility of significant changes that will make the code better in terms of security, loopholes, buffer-overflows, maintainability, readability, robustness, and to be production-ready, then let me know.</p>
    </div>