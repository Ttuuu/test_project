<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to AJNeufeld's answer:</p>

<p>You have two <code>add()</code> methods.</p>

<pre><code>public Mass add(Mass rhs){
    this.mass += rhs.mass;
    return this;
}
public static Mass add(Mass lhs, Mass rhs){
    return new Mass(lhs.mass).add(rhs);
}
</code></pre>

<p>The first one can be the cause of nasty debugging sessions as you modify the contents of "this" Mass while from the method signature (returning a Mass instance) your caller might expect a fresh Mass instance to be created and the two input instances to stay unmodified. Java programmers will typically expect that behaviour as they know e.g. Java's <code>BigInteger.add()</code> method.</p>

<p>When programming in Java, it's always worth to think about object identity. Generally, you should only provide methods that keep your current object's identity intact. E.g. if your Person instance represents Donald Trump, you shouldn't allow something like <code>donaldTrump.setName("Barack Obama");</code>, as that fundamentally changes the identity of that instance. It's not at all the same person, so it shouldn't be the same Java instance.</p>

<p>In your case, an instance of <code>Mass</code> represents some mass value. Have a look at the following lines of code using your current API:</p>

<pre><code>Mass mass10kg = Mass.from_kg(10.0);
mass10kg.add(Mass.from_kg(15.0));
</code></pre>

<p>The second line modifies the Mass instance that previously represented 10kg to now represent 25kg. Is that still the same mass? Surely not, so I'd recommend to not do it that way.</p>

<p>With Java instances, it's a good idea to make the fields that define the object's identity final, so there's no chance to tamper with that identity. And then, your <code>add()</code> methods should read:</p>

<pre><code>public Mass add(Mass rhs){
    return new Mass(this.mass + rhs.mass);
}
public static Mass add(Mass lhs, Mass rhs){
    return new Mass(lhs.mass + rhs.mass);
}
</code></pre>

<p>These two methods do quite the same thing, so one of them is redundant. We Java programmers are more used to the non-static style, so I'd eliminate the static method.</p>

<p>One more thing: I recommend to implement a <code>toString()</code> method, so Mass instances don't show up as "Mass@123abc456", but have a readable representation like e.g. "25 kg". And have your IDE create <code>equals()</code> and <code>hashCode()</code> implementations based on the field <code>mass</code>.</p>
    </div>