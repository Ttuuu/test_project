<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The program compiles and runs on my machine, and I didn't notice any unexpected behavior or bug, so this is a good start.</p>

<h1>Issues</h1>

<h2>Naming conventions</h2>

<p>In C# CamelCase is preferred for naming class properties. As such, names like <code>PlayerName</code>, <code>PlayerScore</code>, <code>ComputerScore</code> would be better.</p>

<p>Same goes for namespaces, so <code>RockPaperScissors</code> would be better.</p>

<p>Also, some names choices aren't quite meaningful. I feel like <code>ComputerMove</code> and <code>PlayerMove</code> would make more sense than <code>c_rps</code> and <code>p_rps</code>.</p>

<h2>Unused <code>using</code></h2>

<p>You don't use anything from <code>System.ComponentModel.Design</code>, so the line <code>using System.ComponentModel.Design;</code> should be removed.</p>

<h2>Don't use global variables</h2>

<p>While they technically are properties of the <code>Program</code> class, the <code>play</code> and <code>startgame</code> variables are scoped over the whole program, and there is no reason for this. Pass the variables as arguments if they should be used across multiple methods.</p>

<h2>Use auto-properties</h2>

<p>Considering this snippet:</p>

<pre><code>private int playerscore;

public int Score
{
    get { return playerscore; }
    set { playerscore = value; }
}
</code></pre>

<p>C# has a shorthand for this kind of pattern, which would simply be:</p>

<pre><code>public int PlayerScore { get; set; }
</code></pre>

<h2>Inconsistent types</h2>

<p>A player move is stored as a <code>string</code>, while a computer move is store as an <code>int</code>. This is confusing, and makes it harder than necessary to compare the values. See your <code>Check()</code> method: there's got to be a way to make it simpler than listing all possible cases, right?</p>

<p>Using <code>int</code>s for both would already makes it much easier. </p>

<p>Another option is to create a class implementing the <code>IComparable</code> interface. It may be considered overkill in a simple case like this one, but has the advantage of being more generic and applicable to other, possibly more complex, cases.</p>

<h2>Magic number</h2>

<p>The game stops when a player's score reaches 5. That's fine, but it would better for this value to be a named constant. </p>

<p>If you change your mind and decide that 3 is better, you'd have to change the value in 2 places in your code. That would be easy to miss. Also, if you were to use this value elsewhere (e.g. the start screen, so the player knows for how long he'll be playing), you'd have to remember what that value is, and remember to modify it if you decide to change the value. It also makes the code more readable.</p>

<h2>Separation of concerns</h2>

<p>I can tell you tried to separate concerns, with the core of the game being in its own class, and console display being (somewhat) in the <code>Program</code> class. However, you only achieve this goal partially. A lot of methods directly print stuff on the console, instead of returning the value, so display is mixed with logic. </p>

<p>This is bad practice, the main reason being that it makes the code harder to reuse. Say you'd like to make a fancy-pants GUI to play the game, you'd have to rewrite most of the existing code because all your <code>Console.WriteLine</code>s would fail if you don't use a console.</p>

<p>A good approach would be to have a class holding the game state, and a class in charge of displaying the game, fetching the required data from the game state object.</p>

<h1>Possible game improvements</h1>

<p>When you'll have a clean code for your basic game of rock, paper, scissors, implementing one of these improvements should be possible with minimum changes.</p>

<h2>Set the length of the game</h2>

<p>Let the player decide for how long he wants to play before starting the game. </p>

<h2>PvP</h2>

<p>Playing vs the computer is nice, but an option to play vs a human opponent would be even better. I would have a <code>ComputerPlayer</code> and a <code>HumanPlayer</code> class, which both inherit from a <code>Player</code> class. That way</p>

<h2>Rock, paper, scissors, lizard, Spock</h2>

<p>How would you go at changing the rules to include more moves? Any odd number of moves can make a balanced game. (see <a href="https://en.wikipedia.org/wiki/Rock_paper_scissors#Additional_weapons" rel="noreferrer">Wikipedia</a> if you're not familiar with that variant).</p>

<p>This is where <code>Move</code> class would probably prove more readable than working with <code>int</code>s for moves.</p>
    </div>