<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The comments contain two proofs that a better solution exists.</p>

<ol>
<li><blockquote>
  <p>Start with an array of all ones, then repeatedly add one to the smallest number (because that gives the largest percentual increase) until you reach the maximum allowed sum. This can be fomulated as a proof by induction. – <a href="https://codereview.stackexchange.com/users/105198/rainer-p">Rainer P.</a></p>
</blockquote>

<p>This can be proven rather simply by using Python, but it can also be proven with a basic formula.
If we start with the array <span class="math-container">\$y, y-1\$</span> and we have to increase one of the values by one then we can deduce adding one to the <span class="math-container">\$y-1\$</span> value results in a larger product.</p>

<p><span class="math-container">$$
yy \gt (y + 1)(y-1)\\
y^2 \gt y^2 - 1\\
$$</span></p>

<p>This change works regardless of what the rest of the array is. And so we know adding one to the lowest value always nets the biggest increase.<br>
I used to not be very good with math, and so a more hands on proof using Python may be easier to follow and agree with.</p>

<pre class="lang-py prettyprint-override"><code>import math


def inc_1(numbers, pos):
    nums = numbers[:]
    nums[pos] += 1
    return nums


def proof(total, amount):
    if total &lt; amount:
        return 0
    numbers = [1] * amount
    for i in range(total - amount):
        d = i % amount
        if d:
            larger = math.prod(inc_1(numbers, d - 1))
            smaller = math.prod(inc_1(numbers, d))
            if smaller &lt; larger:
                raise ValueError('proof does not hold')
        numbers[d] += 1
    return numbers, math.prod(numbers)


print(proof(14, 7))
print(proof(302, 5))
</code></pre></li>
<li><blockquote>
  <p>if the product contains two factors which differ by more than one, then it is not optimal: Say these are <span class="math-container">\$x\$</span> and <span class="math-container">\$y\$</span> with <span class="math-container">\$x &lt; y\$</span>, then replace them by <span class="math-container">\$x + 1\$</span> and <span class="math-container">\$y - 1\$</span>. Now <span class="math-container">\$(x+1)(y-1) = xy + (y - x - 1) &gt; xy\$</span>. – <a href="https://codereview.stackexchange.com/users/81034/carsten-s">Carsten S</a></p>
</blockquote>

<p><sup>Changed to use mathjax</sup></p>

<p>With this description the factors are the array of numbers. With this we can start with a random assortment of numbers that total the desired number, and we can continuously improve the product.</p>

<p><span class="math-container">$$
3, 8\\
3 &lt; 8\\
4 \times 7 \gt 3 \times 8\\
28 \gt 24\\
5 \times 6 \gt 4 \times 7\\
30 \gt 24
$$</span></p></li>
</ol>

<hr>

<p>In all the fastest solution is to just use <code>divmod</code>, and produce the product once.</p>

<pre class="lang-py prettyprint-override"><code>def maximum_product_with_sum(total, count):
    q, r = divmod(total, count)
    return (q+1)**r * q**(count-r)


print(maximum_product_with_sum(14, 7))
print(maximum_product_with_sum(302, 5))
</code></pre>
    </div>