<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We consider singletons bad (i.e. your <code>getInstance</code> bit). There are numerous resources on why a short search away so I'm not going to list them here. </p>

<p>That said your <code>getInstance</code> is not safe in a threaded context. You need to use <a href="https://en.wikipedia.org/wiki/Double-checked_locking" rel="nofollow noreferrer">Double-checked locking</a>. Note that I do think that initialising the object in the <em>static</em> constructor or inline with the declaration is safe as well.</p>

<p>Your <code>subscribe</code> method is <code>synchronized</code> on the class object but the <code>publish</code>  method is not meaning that you have a data race where the subscribers for a topic may change in the middle of iterating over it, typically this will throw a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/ConcurrentModificationException.html" rel="nofollow noreferrer">ConcurrentModificationException</a> when it happens. Either you do a thread safe design and add <code>synchronized</code> to <code>publish</code> as well or do a thread-un-safe design and remove the <code>synchronized</code> keyword everywhere.</p>

<p>Your <code>publish</code> method swallows any errors. This is not good. Depending on your philosophy on error reporting you should either return a boolean signifying the success or failure of publishing the message to at least one receiver or throw an exception. In this case I would return an error, or maybe even the number of subscribers that the message was delivered too, yeah I think that makes more sense and is cheap to compute and rich in information.</p>

<p>And finally, your class will forever hold a reference to the subscriber object and is likely to cause a memory leak as you cannot remove them, especially since this is a singleton which has the same lifetime as your application. A common pattern is to either allow removal through <code>unsubscribe</code> or use <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ref/WeakReference.html" rel="nofollow noreferrer">WeakReference</a> and let the life time be tied to an external object with cleanup of any weak references whose get returns null (object removed/gcd)</p>
    </div>