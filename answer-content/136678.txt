<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will simply build on answer by @Flambino who gives strong advice on code formatting and some of the math concerns.</p>

<p>I would like to add a few more thoughts:</p>

<ul>
<li>I would decouple display concerns (i.e. adding things such as " of Spades") from the base functionality of this class or provide class methods to get human-readable output.  There is no reason to have this formatting concern be a part of your fundamental data model.</li>
<li>I would strongly think about using a more structured class approach to this, with prototype methods implemented for things such as shuffle, draw card, deal (i.e. draw multiple card hands), etc.</li>
<li>You might consider defining a card class. Right now a card is basically just a string. Fundamentally a card object would have two properties - suit and value, but you could expand the card class to define things such as an appropriate image for the card, or to provide methods for human-readable formatting (i.e. " of Spades").  These really are not properties of a card deck, but rather the cards themselves, so to me this calls out for a separate class from card deck.</li>
<li>It seems odd to me to have a key piece of input (in this case <code>Dk</code>) be read from DOM.  You have now tightly coupled your class to the display.  Why not pass this in as input?  I have similar concern over how to output into DOM.  Why should this be hardcoded into the card deck definition? If you had a proper card deck class, you could simply interact with the class methods and have all your DOM updates done based on the values the class returns.</li>
<li>I don't know if I am simply missing it due to code readability concerns, but I am not understanding how you persist the state of the card deck.  When a card is drawn, how do you remove it from list of cards available for the next draw?</li>
</ul>
    </div>