<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>
<p>The problem is that there can only be one vertext with a particular value. Well actually you can add the same value multiple times <strong>BUT</strong> any operation will be applied to the first vertex with that value, so its like there is only one visible value in the vertex list.</p>
<p>Either you should allow multiple values (in which case use the value is not a valid way to find a vertex). Or you should prevent the same value being added to the vertex list more than once.</p>
<p>You have issues with memory management. Caused by using new/delete and not considering the rule of 5.</p>
<p>You play with pointers all over the place with no attempt to check that they are <code>nullptr</code>.</p>
<h2>Code Review</h2>
<p>Yes you need to store them as pointers (non owning).</p>
<pre><code>std::unordered_map&lt;Vertex&lt;T&gt;*, int&gt; edges_in_;
std::unordered_map&lt;Vertex&lt;T&gt;*, int&gt; edges_out_;
</code></pre>
<p>But that does not mean the interface needs to be pointers.</p>
<pre><code>void add_edge_in(Vertex&lt;T&gt;* dest, int weight);
void add_edge_out(Vertex&lt;T&gt;* dest, int weight);
void remove_edge_in(Vertex&lt;T&gt;* dest);
void remove_edge_out(Vertex&lt;T&gt;* dest);
</code></pre>
<p>Here I would pass in references. That way you know that a <code>dest</code> can never be null.</p>
<hr>
<p>I don't see why you are storing pointer here:</p>
<pre><code>std::vector&lt;Vertex&lt;T&gt;*&gt; graph_;
</code></pre>
<p>Here the graph has ownership (and <code>Vertex&lt;T&gt;</code> is not polymorphic). So by using pointers you are adding the whole issue of memory management to your class without needing to.</p>
<p>By making this <code>std::vector&lt;Vertex&lt;T&gt;&gt;</code> you get around the whole problem of memory management. By making this <code>std::vector&lt;std::unique_ptr&lt;Vertex&lt;T&gt;&gt;&gt;</code> you make the graph non copyable (an alternative solution). I would go with the first.</p>
<hr>
<p>Because you store owned RAW pointers you need to implement the rule of 3/5. Or you need to fix it like I suggest above.</p>
<pre><code> {
     Graph&lt;int&gt;    x;
     x. add_vertex(1);
     Graph&lt;int&gt;    y(x);
 }
 // This currently is broken and will result in a double delete.
</code></pre>
<hr>
<p>Sure. I don't mind a <code>void Graph&lt;T&gt;::print() const</code>. But I also expect to see <code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, Graph&lt;T&gt; const&amp;)</code> for printing.</p>
<p>Also why does <code>print()</code> only print to <code>std::cout</code> you should allow it to print to any stream!</p>
<pre><code>class Graph
{
    void print(std::ostream&amp; str = std::cout) const;
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, Graph const&amp; d) {
        d.print(s);
        return s;
    }
};
</code></pre>
<hr>
<pre><code>Vertex&lt;T&gt;* Graph&lt;T&gt;::get_vertex(const T&amp; value)
{
    // STUFF
    return nullptr;
}
</code></pre>
<p>No caller of <code>get_vertex()</code> ever checks for <code>nullptr</code> being returned. This is going to blow up so easily.</p>
<hr>
<pre><code>for (auto it = graph_.begin(); it != graph_.end(); ++it)
{
    if ((*it)-&gt;value() == value)
    {
        delete *it;
        graph_.erase(it);
        return;
    }
}
</code></pre>
<p>There is a pattern for this: <strong>Erase Remove Idiom</strong>.</p>
<pre><code>auto end = std::remove_if(std::begin(graph_), std::end(graph_), [&amp;value](Vertex* it){return it-&gt;value == value;});
for(auto loop = end; loop != std::end(graph_); ++loop) {
    delete *loop;
}
graph_.erase(end, std::end(graph_));
</code></pre>
    </div>