<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>A word on programming competitions</h3>

<p>I realize that when solving a problem from a programming competition, you aren't going to end up with the nicest code.  It's more about getting something that works and passes all the tests, as fast as possible.  Most likely, no one else is even going to read your code.  With that in mind, I will say that your code is perfectly fine.  The solution was concise, understandable, and fairly readable.</p>

<p>However, in the spirit of code review, there are still improvements that could be made.</p>

<h3>Errors and warnings</h3>

<p>When I compiled your program I got this compile error:</p>

<blockquote>
<pre><code>foo.cc:39:40: error: pow was not declared in this scope
</code></pre>
</blockquote>

<p>I added <code>#include &lt;cmath&gt;</code> to fix that.</p>

<p>I also got several warnings of this type:</p>

<blockquote>
<pre><code>foo.cc:61:23: warning: comparison between signed and unsigned
              integer expressions [-Wsign-compare]
    for (int i = 0; i &lt; cows.size(); ++i) {
                      ^
</code></pre>
</blockquote>

<p>I changed the type of <code>i</code> (and other variables) to <code>size_t</code> to fix that.</p>

<p>Lastly, you have an unused variable <code>cow</code> in your main bfs loop.  I simply removed that line.</p>

<h3>Verbosity / Readability</h3>

<ul>
<li><p>I agree with the other reviewer that a <code>tuple</code> isn't the best data structure to represent your cow information.  It would be easier to read if you used a struct.</p></li>
<li><p>Your input parsing functions are quite verbose.  I replaced all of your input parsing code (including 3 functions) with just this:</p>

<pre><code>int n;
input &gt;&gt; n;

vector&lt;Cow&gt; cows(n);
for (int i = 0; i &lt; n; ++i) {
    input &gt;&gt; cows[i].x &gt;&gt; cows[i].y &gt;&gt; cows[i].range;
}
</code></pre></li>
<li><p>I'm not sure why you used an <code>unordered_map</code> for your edge lists, and a <code>set</code> for your visited list.  Since you know how many vertices you have, and every vertex needs an edge list and a visited boolean, you could just use <code>vector&lt;vector&lt;int&gt;&gt;</code> for the edge lists and <code>vector&lt;bool&gt;</code> for your visited list.  This simplifies things internally because maps and sets need to use hashes or comparisons to order their keys, whereas vectors don't need any of that.  I tested the timings and using a <code>vector&lt;bool&gt;</code> instead of a <code>set&lt;int&gt;</code> really sped things up (timings are listed later in the review).</p></li>
<li>I'm not a fan of using <code>pow()</code> just to compute a square of an integer.  It's a personal preference of mine since I know that if you use <code>pow()</code>, you have to convert your integer to floating point, call a function that does some complicated fp math, and then convert the fp result back into an integer, all of which takes more time.  Also, if you are squaring large 64-bit numbers, you may lose precision if you use <code>pow()</code>.</li>
</ul>

<h3>Is it a BFS or a DFS?</h3>

<p>It's strange that you have a variable called <code>queue</code> but it is actually of type <code>stack</code>.  In fact, because you are removing things from the back of <code>queue</code> instead of the front, you are actually performing a depth first search instead of a breadth first search.  It doesn't really matter because they both work for this program, but you should be careful to use the type that you really want to use.</p>

<h3>Small optimization</h3>

<p>Currently, the program is \$O(n^3)\$ because it does one BFS which is \$O(n^2)\$ for each of \$n\$ vertices.  You can improve on this by not doing the BFS for every vertex.  If on one BFS pass, you visit some vertex, you never have to start a new BFS from that vertex.  This is because on a pass that you visit some vertex, you must have started at an ancestor of that vertex.  Whatever count you got for the ancestor must have been greater than or equal to the count you got for any of its descendants, so you don't have to bother starting a new BFS from any of the descendants.  So in the current worst case where where all the cows can reach each other, you will only need to do 1 pass instead of \$n\$ passes.  It is really noticeable when the number of cows gets higher.  Here are test timings for 1000 cows all reachable by each other:</p>

<pre class="lang-none prettyprint-override"><code>Original program                  : 34.4 seconds
Replace set&lt;int&gt; with vector&lt;bool&gt;:  3.9 seconds
Also skip BFS from already visited:  0.3 seconds
</code></pre>

<p>Now, there are ways to construct a different worst case where even with the optimization, the algorithm will still take \$O(n^3)\$ time.  I feel that it is somewhat analogous to quicksort, where the worst case is \$O(n^2)\$ time but the expected case is \$O(n \log n)\$ time.  I believe the expected case time with the optimization is \$O(n^2)\$ with a worst case of \$O(n^3)\$.  I tested with randomized cow graphs with up to 20000 cows and the optimized solution never took more than 0.5 seconds for any graph.</p>

<h3>Sample rewrite</h3>

<p>Here is a rewrite that incorporates all of the ideas mentioned:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;queue&gt;

using namespace std;

typedef struct Cow {
    int x;
    int y;
    int range;
} Cow;

static inline int cowDistance(const Cow &amp;a, const Cow &amp;b)
{
    int dx = a.x - b.x;
    int dy = a.y - b.y;
    return dx * dx + dy * dy;
}

int main()
{
    ifstream input("moocast.in");

    // Read input.
    int n;
    input &gt;&gt; n;

    vector&lt;Cow&gt; cows(n);
    for (int i = 0; i &lt; n; ++i) {
        input &gt;&gt; cows[i].x &gt;&gt; cows[i].y &gt;&gt; cows[i].range;
    }

    // Construct cow graph.
    vector&lt;vector&lt;int&gt;&gt; cow_graph(n);
    for (size_t i = 0; i &lt; cows.size(); ++i) {
        Cow &amp;cow = cows[i];
        int cur_power = cow.range * cow.range;
        for (size_t j = 0; j &lt; cows.size(); ++j) {
            if (cowDistance(cow, cows[j]) &lt;= cur_power) {
                cow_graph[i].push_back(j);
            }
        }
    }

    // Do BFS starting from each cow not yet seen.
    queue&lt;int&gt;   cow_queue;
    vector&lt;bool&gt; ever_seen(n);
    int highest = 0;
    for (int i = 0; i &lt; n; ++i) {
        int count = 0;

        if (ever_seen[i])
            continue;

        vector&lt;bool&gt; seen(n);
        cow_queue.push(i);
        while (!cow_queue.empty()) {
            int v = cow_queue.front();
            cow_queue.pop();
            if (!seen[v]) {
                seen[v]      = true;
                ever_seen[v] = true;
                count++;
                for (int adjacent : cow_graph[v]) {
                    if (!seen[adjacent]) {
                        cow_queue.push(adjacent);
                    }
                }
            }
        }
        if (count &gt; highest) {
            highest = count;
        }
    }

    ofstream output("moocast.out");
    output &lt;&lt; highest &lt;&lt; endl;
}
</code></pre>
    </div>