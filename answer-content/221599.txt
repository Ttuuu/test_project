<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/users/98493/graipher">@Graipher</a> already shows you how your code can look like if you follow PEP8. But since you've explicetely mentioned the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide</a>, let's have a look closer look at some parts.</p>

<h2>Imports</h2>

<p>Your import look like this at the moment:</p>

<pre class="lang-py prettyprint-override"><code>import openpyxl, csv, os, re, shutil
</code></pre>

<p>Now listen and repeat after PEP8 - <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">Imports</a>:</p>

<blockquote>
  <ul>
  <li>Imports should usually be on separate lines.</li>
  <li><p>Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and
  constants.</p>
  
  <p>Imports should be grouped in the following order:</p>
  
  <ol>
  <li>Standard library imports.</li>
  <li>Related third party imports.</li>
  <li>Local application/library specific imports.</li>
  </ol>
  
  <p><br>You should put a blank line between each group of imports.</p></li>
  </ul>
</blockquote>

<p>Strictly following the Style Guide would lead to something like:</p>

<pre class="lang-py prettyprint-override"><code>import os
import re
import csv
import shutil

import openpyxl
</code></pre>

<p>I think it should be quite obvious to see how this would be applied to @Graipher's answer.</p>

<h2>Docstrings</h2>

<p><code>"""docstrings"""</code> have not yet found their way into your code, but again @Graipher presents a good execution of their use in his answer. They are also introduced in the Style Guide in section <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">Documentation Strings</a>, and even more detailed in <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP257</a>. Using the syntax as shown by @Graipher and the Style Guide has the nice benefit that Python's built-in <code>help(...)</code> as well as basically all Python IDEs will be able to find it easily. I highly recommend to get used to them, once you're at a point where you work on a program that spreads out over several files, these nifty little lines of documentation (together with an IDE that is able to read them) will likely help you to maintain your mental health.</p>

<h2>Bonus: Automate the Boring Stuff</h2>

<p>Maintaining a consistent, PEP8-compliant style can become tedious, especially on a larger scale. Luckily, there are a lot of good tools to automate the boring stuff for you. First, there are tools like <a href="https://www.pylint.org/" rel="nofollow noreferrer">pylint</a>, <a href="https://pycodestyle.readthedocs.io/en/latest/" rel="nofollow noreferrer">pycodestyle</a>, and <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">flake8</a> that can perform style checking on your code. But you can go even further! At the moment, these tools leave fixing the "issues" they find in your code to you. Enter tools like <a href="https://black.readthedocs.io/" rel="nofollow noreferrer">black</a> or <a href="https://github.com/google/yapf" rel="nofollow noreferrer">yapf</a>, just to name two of them. They can auto-format your to follow style guidelines, e.g. PEP8. If you use a feature-rich code editor like Visual Studio Code (or Atom - not 100% sure here), they can even perform the task on-the-fly while you're writing code. All<sup>[citation needed]</sup> the tools mentioned above are configurable so you don't have to have to figth windmills if they work against a pet peeve of yours. But often the default configuration will work quite reasonable.</p>
    </div>