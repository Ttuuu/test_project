<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On first sight, I see 2 issues:</p>

<h1><code>groupby</code>.</h1>

<p>From the documentation:</p>

<blockquote>
  <p>The operation of groupby() is similar to the <code>uniq</code> filter in Unix. It generates a break or new group every time the value of the key function changes <strong>(which is why it is usually necessary to have sorted the data using the same key function)</strong>.</p>
</blockquote>

<p>(emphasis mine)</p>

<p>Compare your result for</p>

<pre><code>fck 1
body 0
body 0
fck 0
body 0
ram 0
fck 1
</code></pre>

<p>to the result for </p>

<pre><code>fck 1
fck 0
body 0
body 0
body 0
ram 0
fck 1
</code></pre>

<h1>debugging</h1>

<p>The data structure that is important for the correctness of your answer is:</p>

<pre><code>[Counter(element[1]) for element in groupby(data_set, key=lambda x:x[0])]
</code></pre>

<p>Here you assemble the values, which you later count.</p>

<p>In the first case:</p>

<pre><code>[Counter({('fck', '1'): 1, ('fck', '0'): 1}),
 Counter({('body', '0'): 3}),
 Counter({('ram', '0'): 1}),
 Counter({('fck', '1'): 1})]
</code></pre>

<p>In the second case:</p>

<pre><code>[Counter({('fck', '1'): 1}),
 Counter({('body', '0'): 2}),
 Counter({('fck', '0'): 1}),
 Counter({('body', '0'): 1}),
 Counter({('ram', '0'): 1}),
 Counter({('fck', '1'): 1})]
</code></pre>

<p>The entries for <code>fck</code> are not grouped anymore.</p>

<p>The easiest way to solve this, is by changing <code>data_set</code> to <code>data_set = sorted(tuple(map(str, input().split())) for __ in range(n))</code>,</p>

<p>Or you can use an intermediate 2-level dict, but that is more complicated. I don't know which one will be the fastest.</p>

<p>-- </p>

<h1>alternative without <code>sorted</code></h1>

<p>You can use <code>defaultdict</code> and <code>Counter</code> to set up an alternative datastructure</p>

<pre><code>from collections import defaultdict, Counter

input_str = """
fck 1
body 0
body 0
fck 0
body 0
ram 0
fck 1
"""
results = defaultdict(Counter)

data_set = (row.split() for row in input_str.split("\n") if row)
for word, result_bool in data_set:
    results[word][result_bool] += 1
</code></pre>

<blockquote>
<pre><code>defaultdict(collections.Counter,
            {'fck': Counter({'1': 2, '0': 1}),
             'body': Counter({'0': 3}),
             'ram': Counter({'0': 1})})
</code></pre>
</blockquote>

<pre><code>sum(max(result_bools.values()) for word, result_bools in results.items())
</code></pre>

<p>This does not need the sorting.</p>
    </div>