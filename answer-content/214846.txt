<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to programming!  Here are some things that may help you improve your program.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  Know when to use it and when not to (as when writing include headers).  In this particular case, I happen to think it's perfectly appropriate because it's a single short program and not a header. Some people seem to think it should never be used under any circumstance, but my view is that it can be used as long as it is done responsibly and with full knowledge of the consequences.  </p>

<h2>Avoid the use of global variables</h2>

<p>I see that <code>toDraw</code>, <code>playerTurn</code> and <code>turnsPlayed</code> are declared as global variables rather than as local variables. It's generally better to explicitly pass variables your function will need rather than using the vague implicit linkage of a global variable.  See the next suggestion.</p>

<h2>Use object orientation</h2>

<p>Because you're writing in C++, it would make sense to collect things into a class such as <code>TicTacToe</code> that could hold the <code>toDraw</code>, <code>playerTurn</code> and <code>turnsPlayed</code> variables, and have <code>reset</code> and <code>reDrawBard</code> be member functions rather than separate functions.  You may not yet have learned about objects or classes, but they're one of the main strengths of C++ and something you should learn soon if you haven't already.  Use objects where they make sense.</p>

<h2>Use appropriate data types</h2>

<p>The code currently contains this code:</p>

<pre><code>int check() { // 0 - Game in progress, 1 - Player one wins, 2 - Player two wins
    string one = toDraw[0];
    string two = toDraw[1];
    string three = toDraw[2];
    string four = toDraw[3];
    string five = toDraw[4];
    string six = toDraw[5];
    string seven = toDraw[6];
    string eight = toDraw[7];
    string nine = toDraw[8];

    //FOR PLAYER ONE
    // If the player has 3X in a row, then
    if ((one == "X" &amp;&amp; two == "X" &amp;&amp; three == "X") || (one == "X" &amp;&amp; four == "X" &amp;&amp; seven == "X") ||
        (one == "X" &amp;&amp; five == "X" &amp;&amp; nine == "X") || (seven == "X" &amp;&amp; five == "X" &amp;&amp; three == "X") ||
        (seven == "X" &amp;&amp; eight == "X" &amp;&amp; nine == "X") || (three == "X" &amp;&amp; six == "X" &amp;&amp; nine == "X") ||
        (four == "X" &amp;&amp; five == "X" &amp;&amp; six == "X") || (two == "X" &amp;&amp; five == "X" &amp;&amp; six == "X")) {
        return 1;
    }
</code></pre>

<p>First, the comment is good, but the whole function could be improved if it instead returned an <code>enum</code> or even better, an <code>enum class</code>:</p>

<pre><code>enum class GameState { inProgress, Player1Wins, Player2Wins, Tie };
</code></pre>

<p>Now we can use names instead of values and we are also assured that the return value <em>must</em> be one of these instead of any possible <code>int</code> value.</p>

<p>Second, creating and naming all of those strings every time is both potentially slow and prone to error.  In fact ...</p>

<h2>Fix the bug</h2>

<p>Part of the current logic for checking for a win as shown above is this:</p>

<pre><code>|| (two == "X" &amp;&amp; five == "X" &amp;&amp; six == "X")) {
</code></pre>

<p>That should be squares <code>two</code>, <code>five</code> and <code>eight</code>, not <code>six</code>.  I'd recommend rewriting the <code>check</code> function entirely to avoid this.</p>

<h2>Think carefully about the problem</h2>

<p>By definition, only the player who just played can win, so instead of checking for both <code>X</code> and <code>O</code> wins each time, we can pass in a variable which indicates which player just played and only check that.  </p>

<h2>Make sure to <code>#include</code> all required headers</h2>

<p>This program calls <code>printf</code> but does not include the corresponding header.  Fix that by adding this line:</p>

<pre><code>#include &lt;cstdio&gt;
</code></pre>

<p>Or better yet...</p>

<h2>Don't mix <code>printf</code> and <code>iostream</code></h2>

<p>There's little reason to require both <code>&lt;cstdio&gt;</code> and <code>&lt;iostream&gt;</code> in this program.  Everywhere there is a <code>printf</code> could instead be a <code>std::cout &lt;&lt;</code> instead.</p>

<h2>Don't use non-standard escape sequences</h2>

<p>The <code>\e</code> escape sequence, while common, is not a <a href="https://en.cppreference.com/w/cpp/language/escape" rel="nofollow noreferrer">standard escape sequence</a>.  Instead, you could use <code>\x27</code> or <code>\033</code>.</p>

<h2>Don't Repeat Yourself (DRY)</h2>

<p>There is a lot of repeated code here that only differs by which player token is being considered.  Instead of repeating code, it's generally better to make common code into a function.</p>

<h2>Eliminate magic numbers</h2>

<p>The constants 3, 9 and the string <code>"\e[1;1H\e[2J"</code> are used in multiple places.  It would be better to have them as named <code>const</code> values so that it would be clear what those numbers and string represent.</p>

<h2>Declare the loop exit condition at the top</h2>

<p>The <code>while</code> loop inside <code>main</code> currently says this:</p>

<pre><code>while (true) {
</code></pre>

<p>but the loop doesn't really continue forever -- it exits when the player decides to quit the game.  For that reason, I'd suggest instead that it be something like this:</p>

<pre><code>bool playing = true;
while (playing) {
</code></pre>

<p>Then just set the condition within the loop at the appropriate place.</p>
    </div>