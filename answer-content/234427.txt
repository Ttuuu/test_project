<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Judging by looking at many of your previous posts, I notice that you've changed your programming style for the purpose of writing this program.</p>

<ul>
<li><p><em>You don't use whitelines to subdivide the code into logical blocks</em><br>
Allowing blank lines is just a matter of replacing that first <code>lodsb</code> by a
<code>jmp first</code>.</p></li>
<li><p><em>You don't use character constants</em><br>
There's no conflict in the code if you replace the numbers 100 and 98 by their
readable counterparts 'd' and 'b'.</p></li>
<li><p><em>You've written a label on a separate line</em><br>
Probably you wrote this for simplicity but I prefer to see what is a <em>data</em>
label on an actual <em>data</em> line. Additionally you can drop the colon.</p></li>
<li><p><em>You don't indent those <code>db</code> lines</em><br>
This is definitely not nice! Maybe you were afraid to have to write all of those space characters but the good news is that DOS can do that for you. Simply have your code print a TAB character and DOS will expand it even when output is redirected.</p></li>
</ul>

<hr>

<p>And then there's also that <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic number</a> in <code>mov cx, 36</code>. It's easy to eliminate it if you introduce an EndOfFile marker similar to the EndOfLine marker that you already use. In my version of your code I have chosen 126 as the EndOfLine marker and 127 as the EndOfFile marker. Sadly ASCII 127 doesn't show in this Windows environment that Code Review is! Trust me, it works OK.</p>

<p>Because the loop now runs without using the <code>CX</code> register you can put it to good use replacing <code>BX</code>. This will save some bytes because the pair
 <code>test bx, bx</code> <code>jz ...</code> is now turned into <code>jcxz ...</code>.</p>

<hr>

<pre class="lang-none prettyprint-override"><code>        org     256

        mov     ah, 02h         ; DOS.PrintChar
        xor     cx, cx          ; 1st pass CX=0
        call    job
        inc     cx              ; 2nd pass CX=1
        mov     dl, 'Z'         ; The data label
        int     21h

job:    mov     si, Z
more:   jcxz    first           ; 2nd pass prefixes:
        mov     dl, 9
        int     21h
        mov     dl, 'd'
        int     21h
        mov     dl, 'b'
        int     21h
        mov     dl, 9
        int     21h
        mov     dl, 34          ; quote
        int     21h
        jmp     first
next:   mov     dl, al
        int     21h
first:  lodsb
        cmp     al, 126         ; EOL or EOF ?
        jb      next
        jcxz    crlf            ; 2nd pass suffixes:
        mov     dl, al          ; EOL or EOF
        int     21h
        mov     dl, 34          ; quote
        int     21h
crlf:   mov     dl, 13
        int     21h
        mov     dl, 10
        int     21h
        cmp     byte [si-1], 127 ; EOF ?
        jb      more
        ret                     ; Exits to DOS on 2nd pass!

Z       db      "        org     256~"
        db      "~"
        db      "        mov     ah, 02h         ; DOS.PrintChar~"
        db      "        xor     cx, cx          ; 1st pass CX=0~"
        db      "        call    job~"
        db      "        inc     cx              ; 2nd pass CX=1~"
        db      "        mov     dl, 'Z'         ; The data label~"
        db      "        int     21h~"
        db      "~"
        db      "job:    mov     si, Z~"
        db      "more:   jcxz    first           ; 2nd pass prefixes:~"
        db      "        mov     dl, 9~"
        db      "        int     21h~"
        db      "        mov     dl, 'd'~"
        db      "        int     21h~"
        db      "        mov     dl, 'b'~"
        db      "        int     21h~"
        db      "        mov     dl, 9~"
        db      "        int     21h~"
        db      "        mov     dl, 34          ; quote~"
        db      "        int     21h~"
        db      "        jmp     first~"
        db      "next:   mov     dl, al~"
        db      "        int     21h~"
        db      "first:  lodsb~"
        db      "        cmp     al, 126         ; EOL or EOF ?~"
        db      "        jb      next~"
        db      "        jcxz    crlf            ; 2nd pass suffixes:~"
        db      "        mov     dl, al          ; EOL or EOF~"
        db      "        int     21h~"
        db      "        mov     dl, 34          ; quote~"
        db      "        int     21h~"
        db      "crlf:   mov     dl, 13~"
        db      "        int     21h~"
        db      "        mov     dl, 10~"
        db      "        int     21h~"
        db      "        cmp     byte [si-1], 127 ; EOF ?~"
        db      "        jb      more~"
        db      "        ret                     ; Exits to DOS on 2nd pass!~"
        db      ""
</code></pre>

<p>These changes, especially the new indentations, have enlarged the source file
 considerably. It went up from 2640 to 3032 bytes.<br>
Contrary the executable file is smaller now! Descending from 1243 to 1169 bytes.</p>

<p>BTW - nice job that 23-bytes quine!</p>
    </div>