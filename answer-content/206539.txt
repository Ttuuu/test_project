<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>make the code more compact and secure</p>
</blockquote>

<p><strong>Separate sort code from test code</strong></p>

<p>To well address security issues, OP needs to present a clear distinction between what is the sort code and what is not.  Put all <em>sort</em> code in a separate .c file.</p>

<p><strong>int vs. size_t</strong></p>

<p>C employs <code>size_t</code> as the type that is neither to narrow nor too wide for array indexing and sizing.</p>

<p>Although <code>int</code> is commonly sufficient, to make more <em>secure</em> and work with large data, use <code>size_t</code>.</p>

<p>Aside from changing <code>int</code> --&gt; <code>size_t</code> and <code>"%d"</code> --&gt; <code>"%zu"</code>, a singular challenge is to remember <code>size_t</code> is some <em>unsigned</em> type and code needs to consider that.  <code>(size_t)x &lt; 0</code> is never true.</p>

<p><strong>Beware large VLAs</strong></p>

<p>Security risk: <code>int left[n1];</code> is subject to <em>stack overflow</em>.  Consider <code>*alloc()</code> instead.  Insufficient memory can be detected that way.</p>

<p><strong>Avoid exposing helper functions</strong></p>

<p><code>mergeSequence()</code> is not meant to be used outside of <code>mergesort()</code>.  To prevent other code from using this functions, make it <code>static</code>.  Further, put it and <code>mergesort()</code> in their own .c file.</p>

<p>This increases security as <code>mergeSequence()</code>  then not need to handle all sorts of arguments, just the ones <code>mergesort()</code> generates.</p>

<p><strong>All warnings enabled?</strong></p>

<p>Save time, enable all warnings.</p>

<p>I'd expect <code>mergeSort(num,0,(n-1));</code> (upper case S) to warn about function usage before declaration.</p>

<p><code>void mergesort(int*,int,int);</code> (lower case S) is declared but not used.</p>

<p><strong>Avoid generic names when a specific type is required</strong></p>

<p><code>mergeSort()</code> sorts <code>int</code>.  With a name like <code>mergeSort</code>, I expected something like <code>qsort()</code> with its size-of-element parameter and compare function.</p>

<p>Of re-architect your merge sort code to take a generic object type.</p>

<pre><code>void SS_mergeSort(void *base, size_t nmemb, size_t size, 
    int (*compar)(const void *, const void *));`
</code></pre>

<p><strong>Compact by eliminating print out</strong></p>

<p>It is unexpected that a sort routine would do any printing.  Remove <code>printf()</code> and <code>displaySequence()</code> from <code>merge...()</code> functions.</p>

<p><strong>Compact left,right code</strong></p>

<p><code>int left[n1]; int right[n2];</code> can be <code>int left_right[n1+n2];</code> and then the copying facilitated with the fast lib function <code>memcpy()</code>.</p>

<pre><code>memcpy(left_right, num, sizeof left_right);
int *left = left_right;
int *right = left_right + n1;
...
</code></pre>
    </div>