<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>get_time</code> has a fair amount of repetition. I'd move the "padding" check to a new function, and just map it over a list holding the three pieces of time data:</p>

<pre><code>def zero_pad_format(n):
    if n &lt; 10:
        return "0" + str(n)
    else:
        return str(n)

def get_time(hours, minutes, seconds):
    padded = [zero_pad_format(t) for t in [hours, minutes, seconds]]

    return ":".join(padded)

&gt;&gt;&gt; get_time(5, 7, 43)
'05:07:43'
</code></pre>

<p>Really, it's unnecessary to turn the number into a string just to check if it needs to be padded. If the stringified number has a string length of greater than 1, that also means it's <code>&gt;= 10</code>. You can just check if the number is less than or equal to 9 to see if you should pad it. That's what I'm doing in the first function. Instead of writing the same code three times, I moved it to its own function so the single function can be used three times.</p>

<pre><code>padded = [zero_pad_format(t) for t in [hours, minutes, seconds]]
</code></pre>

<p>This puts the three time data into a list, and maps <code>zero_pad_format</code> over it, and returns a list <code>padded</code> containing the padded data. The line below it </p>

<pre><code>return ":".join(padded)
</code></pre>

<p>Takes the padded data, and "joins" the data together with <code>":"</code>. I recommend getting very familiar with <code>join</code>. It's a very useful function.</p>

<hr>

<p>The looping bit at the top of <code>draw_time</code> to get hours, minutes, and seconds from a raw seconds number is quite messy and inefficient. You're looping where straight math can be used:</p>

<pre><code>def time_from_seconds(elapsed_seconds):
    current_time = elapsed_seconds

    hours = current_time // 3600
    current_time -= 3600 * hours

    minutes = current_time // 60
    current_time -= 60 * minutes

    return hours, minutes, current_time

&gt;&gt;&gt; time_from_seconds(5000)
(1, 23, 20)

&gt;&gt;&gt; time_from_seconds(5001)
(1, 23, 21)

&gt;&gt;&gt; time_from_seconds(3600)
(1, 0, 0)

&gt;&gt;&gt; time_from_seconds(1234567890) 3 How long would this take if using loops?
(342935, 31, 30)
</code></pre>

<p>Use division to figure out how many hours you can get out of the <code>current_time</code>, store the number in <code>hours</code>, then multiply that by 3600 to figure how much needs to be subtracted from <code>current_time</code>. Then you do the same for minutes.</p>

<p>There's some repetition here that could be ironically be solved by using some loops, but I feel that wouldn't be quite as clear.</p>

<p>That gets rid of the majority of the code in <code>draw_time</code> though, which is a hint that that code shouldn't have been directly in <code>draw_time</code> in the first place. That chunk of code has nothing to do with drawing the time. It's just figuring out what to draw. You might want a set-up closer to this:</p>

<pre><code>def draw_time(hours, minutes, seconds):
    return (font1.render(get_time(hours, minutes, seconds),
                         True,
                         (0, 0, 0), (255, 255, 255)),
            get_time(hours, minutes, seconds))

# An awful name, and this still isn't an ideal setup. It's mildy better though.
def draw_time_from_start_pause(start_time, pause_time):
    current_time = time.time() - pause_time - start_time

    h, m, s = time_from_seconds(current_time)
    return draw_time(h, m, s)

    # or

    #data = time_from_seconds(current_time)
    #return draw_time(*data) # Spread the data into the arguments
</code></pre>
    </div>