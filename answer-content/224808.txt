<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using lambdas you can use multithread easily, it should improve your results:</p>

<pre class="lang-java prettyprint-override"><code>IntStream.rangeClosed(3, x).parallel().filter(n -&gt; n%3 == 0).count()
</code></pre>

<p>or, in case you need long values:</p>

<pre class="lang-java prettyprint-override"><code>LongStream.rangeClosed(3L, x).parallel().filter(n -&gt; n%3L == 0L).count()
</code></pre>

<hr>

<p>I tested it with the following example:</p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {

        Instant start, end;
        long x = 24923869024L;
        long count = 0;

        // normal loop
        start = Instant.now();
        for (long n=3L; n&lt;=x; n++) {
            if (n%3L==0L) count++;
        }
        end = Instant.now();
        System.out.println("method 1, result = "+count+", time = "+Duration.between(start, end));

        // non-parallel stream
        start = Instant.now();
        count = LongStream.rangeClosed(3L, x).filter(n -&gt; n%3L == 0L).count();
        end = Instant.now();
        System.out.println("method 2, result = "+count+", time = "+Duration.between(start, end));

        // parallel stream
        start = Instant.now();
        count = LongStream.rangeClosed(3L, x).parallel().filter(n -&gt; n%3L == 0L).count();
        end = Instant.now();
        System.out.println("method 3, result = "+count+", time = "+Duration.between(start, end));

    }
</code></pre>

<p>with the results:</p>

<pre><code>method 1, result = 8307956341, time = PT33.55S
method 2, result = 8307956341, time = PT40.611S
method 3, result = 8307956341, time = PT12.637S
<span class="math-container">```</span>
</code></pre>
    </div>