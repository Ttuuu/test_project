<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't understand why <code>QuickMatch</code> would be in standard <code>PascalCase</code>, while <code>getQuickRowValue</code> would be <code>camelCase</code>. Public member names should be <code>PascalCase</code> - not something that's always obvious to do with a case-insensitive language, but it's certainly feasible. Consistency!</p>

<blockquote>
<pre><code>Dim low As Long, high As Long, pivot As Long
Dim Value As Variant, NextValue As Variant, PrevValue As Variant

low = LBound(Values) + 1
high = UBound(Values)
</code></pre>
</blockquote>

<p>Might be just my opinion, but I find irrelevant (or rather, <em>not-yet-relevant</em>) variable declarations distracting. Avoid strings (or worse, walls) of declarations at the top of procedures; instead, declare them <em>as they're needed</em>. Code will read much more seamlessly, and variable declarations will always appear in the context they're relevant in:</p>

<pre><code>Dim low As Long
low = LBound(Values) + 1

Dim high As Long
high = UBound(Values)

While low &lt;&gt; high
    '...
    DoEvents
Wend
</code></pre>

<p>Here I'd probably take everything in that loop body, and move it to another procedure scope. I would also replace the <a href="http://rubberduckvba.com/Inspections/Details/ObsoleteWhileWendStatement" rel="nofollow noreferrer">obsolete <code>While...Wend</code></a> with a <code>Do While...Loop</code> construct:</p>

<pre><code>Dim low As Long
low = LBound(Values) + 1

Dim high As Long
high = UBound(Values)

Do While low &lt;&gt; high
    Dim count As Long
    count = count + 1
    QuickMatch = QuickMatchInternal(values, low, high, count)
Loop
</code></pre>

<p>And that would be the whole function's body: everything else belongs at a lower abstraction level... why <code>DoEvents</code> though? Code that clocks sub-millisecond execution times shouldn't need any special measures taken to help keep the UI thread responsive: <code>DoEvents</code> has no business anywhere, unless it's absolutely needed - in which case an explanatory comment is warranted. But commented-out, it's... dead code that should be removed.</p>

<p>So, this <code>QuickMatchInternal</code> private function would only need to be concerned about a single iteration, and needs to take its parameters <code>ByRef</code>.</p>

<p>Inside that procedure's scope, the main element that sticks out is the massive <code>Select Case</code> block. I'd try to break it down and move each <code>Case</code> to its own scope. Glancing at the code, I'd say make these <code>Boolean</code>-returning functions, and if they return <code>True</code> then we can <code>Exit Function</code>:</p>

<pre><code>    Select Case ComparisonMode
        Case MsoFilterComparison.msoFilterComparisonEqual
            If HandleComparisonEqual(...) Then Exit Function

        Case MsoFilterComparison.msoFilterComparisonLessThanEqual
            If HandleComparisonLessThanEqual(...) Then Exit Function

        Case MsoFilterComparison.msoFilterComparisonGreaterThanEqual
            If HandleComparisonGreaterThanEqual(...) Then Exit Function

        Case Else
            '?
    End Select
</code></pre>

<p>...and since nothing guarantees <code>ComparisonMode</code> will be one of these values, there needs to be a <code>Case Else</code> that throws an error accordingly. <a href="https://docs.microsoft.com/en-us/office/vba/api/office.msofiltercomparison" rel="nofollow noreferrer">The enum defines 10 members</a>, and even if inputs are only ever one of these, there is no indication anywhere that the function is only handling a small subset of them.</p>

<p>The <code>Exit Function</code> jumps probably make the move challenging, but if the outer loop's exit condition is met by then, then there shouldn't be a problem doing that.</p>
    </div>