<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is well-built and covers everything stated in the task, but could be made much shorter by using the <a href="https://www.geeksforgeeks.org/python-format-function/" rel="nofollow noreferrer"><em>.format()</em></a> function. </p>

<blockquote>
  <p><em><code>str.format()</code> is one of the string formatting methods in Python 3, which
  allows multiple substitutions and value formatting. This method lets
  us concatenate elements within a string through positional formatting.</em></p>
</blockquote>

<p>Your code can, therefore, be made shorter and more concise this way. Here is what your code might look like - </p>

<pre><code>def list_concatenator(your_list):

     if not your_list:
         return "Your list is empty!"

     elif len(your_list) == 1:
         return str(your_list[0])

     elif len(your_list) == 2:
         return '{0} and {1}'.format(your_list[0], your_list[1])

     else:
         body = ", ".join(map(str, your_list[:-1]))
         return '{0}, and {1}'.format(body, your_list[-1])
</code></pre>

<p>I have used <code>{0} and {1}</code> so that positional arguments can be placed in the order you want them to be in, though it is not necessary to do so.</p>

<p><strong>OR</strong></p>

<p>Another way to format in Python 3 is to use <a href="https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/" rel="nofollow noreferrer"><em>f-strings</em></a>.</p>

<blockquote>
  <p><em>The idea behind <code>f-strings</code> is to make string interpolation simpler. To create an <code>f-string</code>, prefix the string with the letter “ f ”. The string itself can be formatted in much the same way that you would with <code>str.format()</code>. <code>f-strings</code> provide a concise and convenient way to embed python expressions inside string literals for formatting.</em></p>
</blockquote>

<p>Here's how your code would look like with <code>f-strings</code> (much shorter) - </p>

<pre><code>def list_concetenator(your_list):

    if not your_list:
        return "Your list is empty!"

    elif len(your_list) == 1:
        return str(your_list[0])

    elif len(your_list) == 2:
        return f'{your_list[0]} and {your_list[1]}'

    else:
        body = ", ".join(map(str, a_list[:-1]))
        return f'{body}, and {your_list[-1]}'
</code></pre>

<p>Here are some example outputs -</p>

<pre class="lang-none prettyprint-override"><code>your_list = ['item1', 'item2', 3, 'item4', 'item5', 'item6', 7, 'item8', 9]

print(list_concatenator(['item1', 'item2', 3, 'item4', 'item5', 'item6', 7, 'item8', 9]))
&gt;&gt;&gt; item1, item2, 3, item4, item5, item6, 7, item8, and 9

print(list_concatenator(['item1', 'item2', 3]))
&gt;&gt;&gt; item1, item2, and 3

print(list_concatenator(['item1', 3]))
&gt;&gt;&gt; item1 and 3

print(list_concatenator(['item1']))
&gt;&gt;&gt; item1 

print(list_concatenator([]))
&gt;&gt;&gt; Your list is empty!
</code></pre>

<p>The program also takes care of the Oxford comma, where lists with <em>two</em> items do not have commas (e.g. <code>apples and bananas</code>) but lists with <em>more than</em> two items are separated with commas (<code>apples, bananas, and cakes</code>). Here are some useful links that help us understand what Oxford commas really are and when they should be used - </p>

<ol>
<li><p><em><a href="https://www.grammarly.com/blog/comma-before-and/" rel="nofollow noreferrer">https://www.grammarly.com/blog/comma-before-and/</a></em></p></li>
<li><p><em><a href="https://en.wikipedia.org/wiki/Serial_comma" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Serial_comma</a></em></p></li>
</ol>

<p>Overall, I believe formatting was the main problem in your code.</p>

<hr>

<p><strong>EDIT -</strong> </p>

<p>In the comments section above, @Ilmari Karonen correctly mentions that the usage of " <code>'</code> " in the book is the book's way of writing string literals. Therefore, I have edited my answer to make this change (i.e. remove unnecessary quotes). But if you require these quotes, then you could always wrap the string in double quotes, like this - <code>f"'{your_list[0]} and {your_list[1]}'"</code> or this - <code>"'{0} and {1}'".format(your_list[0], your_list[1])</code>. </p>

<p>Another let-down in your code is the use of inconsistent parentheses here,</p>

<p><code>(', '.join((map(str,your_list[:-1]))))</code> </p>

<p>which could just be written as -</p>

<p><code>', '.join(map(str,your_list[:-1]))</code>. </p>

<p>To remain concise and immaculate in writing programs, I suggest you have a look at <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer"><em>PEP 8</em></a>, which is Python's official style guide.</p>

<p>Hope this helps!</p>
    </div>