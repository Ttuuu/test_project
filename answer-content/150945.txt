<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although you've probably already solved this problem, I'll still post my review for completion's sake.</p>
<h3>1. Performance</h3>
<p>Just as Loki said, you should use <code>std::lower_bound()</code> and <code>std::distance()</code> to solve this task, because <code>std::find()</code> has higher complexity.</p>
<h3>2. General tips</h3>
<ol>
<li><p>Do not <code>include</code> unused libraries (in this case, <code>&lt;cmath&gt;</code> and <code>&lt;cstdio&gt;</code>).</p>
</li>
<li><p>Only declare variables when you need them. Declaring all the variables at the beginning of the program is old C style practice, which is discouraged in C++.</p>
</li>
<li><p>Prefer prefix to postfix <code>operator++</code>. The postfix version creates a copy, so if you do not need that copy, you should use the prefix version.</p>
</li>
<li><p>If you have access to C++11, you should consider using <code>auto</code> more. It'll make your code easier to read and save you some typing.</p>
</li>
<li><p>You can safely omit <code>return 0</code> from <code>main()</code>;</p>
</li>
</ol>
<blockquote>
<p>[C++11: 3.6.1/5]: A return statement in <code>main</code> has the effect of leaving the <code>main</code> function (destroying any objects with automatic storage duration) and calling <code>std::exit</code> with the return value as the argument. If control reaches the end of <code>main</code> without encountering a <code>return</code> statement, the effect is that of executing <code>return 0;</code>.</p>
</blockquote>
<ol start="6">
<li><p>Give your variables better names. Although other variable names in your code are good, a <code>vector</code> named <code>v</code> is not very descriptive.</p>
</li>
<li><p>Use <code>const_iterator</code>s for functions that do not alter the original range.</p>
</li>
</ol>
<h3>3. Final code</h3>
<pre><code>#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;

int main() {
    int N;
    std::cin &gt;&gt; N;
    
    std::vector&lt;int&gt; numbers(N);
    //populate the vector
     for(int i = 0; i &lt; N; ++i) {
         std::cin &gt;&gt; numbers[i];
     }
    
    int queryLength;
    std::cin &gt;&gt; queryLength;    

    for(int j = 0; j &lt; queryLength; ++j) {
        int query;
        std::cin &gt;&gt; query;
        auto lowerBoundIt = std::lower_bound(numbers.cbegin(), numbers.cend(), query);
        if(*lowerBoundIt == query) {
            std::cout &lt;&lt; "Yes ";
        }
        else {
            std::cout &lt;&lt; "No ";
        }
        std::cout &lt;&lt; std::distance(numbers.cbegin(), lowerBoundIt) + 1 &lt;&lt; '\n';
    }
}
</code></pre>
    </div>