<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This already has a good answer, but I noticed some other things, that you should be aware of.</p>

<h2>save_to_file</h2>

<ul>
<li><code>input_file_path</code> is never used</li>
<li>In simple loops it can be a valid choice to use single-letter names for iteration items. The usage of <code>a</code>, <code>b</code>, <code>c</code> here however is confusing, as it is not clear, that they are what you intend them to be, especially since the order you use differs from the comment directly above and the function signature.</li>
</ul>

<h2>main</h2>

<ul>
<li><code>file_count</code> is never used</li>
<li>The return tuple contains two of the call arguments entirely unchanged. Why should a caller want to have them in the return object? So only three of the return objects are relevant. A namedtuple would be a good choice anyway.</li>
<li>your try-except construct is flawed: You expect the individual arrays in the return tuple to have an equal number of elements. But if for example an exception ocurrs after <code>file_name_list.append(pdfFileObj)</code>, this is no longer the case, and your <code>save_to_file</code> will crash later. My suggestion would be to move everything in the try-block to a new function (or multiple), that returns a single (named-)tuple, that is added to an array at the end of the try-block. That array should be the only return value of main.</li>
<li>Your iterations (pdf pages and parsed pages) are a bit clumsy. Always prefer ready-to-use iterators over hand-made ones: Using <code>for page in pdfReader.pages:</code> makes two local variables obsolete. Or - as you asked if you can be more concise - directly use a list comprehension: <code>saved_text = [page.extractText() for page in pdfReader.pages]</code>, and a generator expression for the word count: <code>word_count_total = sum(len(page_text.split()) for page_text in saved_text)</code>.</li>
</ul>

<h2>general</h2>

<ul>
<li>You are using way too many comments for my taste. One good thing about Python is, that by choosing good names and structure, it's quite easy to make code explain itself. If you need lots of comments, you should start investing more time in structure (move parts to new methods with expressive names) and names (<code>pdfFileObj</code> is a filepath, why not <code>pdf_filepath</code>?). If your comments just state the obvious, they clutter the reader's view and should be removed (<code># create new var</code> before <code>word_count_total = 0</code>, or <code># write to file using write method</code> before <code>worksheet.write(row, 0, a )</code>).</li>
<li>the call to <code>main</code> at the end is probably not from your original code, as <code>file_count</code> is undefined. If it is, use an <code>if __name__ == '__main__':</code> block for it. Otherwise it's impossible to import the file without side effects for tests or code-reusage.</li>
<li>Using <code>ProcessPoolExecutor</code> is a good approach to increase performance. But it won't work in your current structure. You need a function that cares about nothing else outside the current file. If you implement the proposal from my third point in <code>main</code>, this will be a lot easier (filename as call-argument, 3-tuple as return value).</li>
</ul>
    </div>