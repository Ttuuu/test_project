<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Gameplay:</strong>  </p>

<p>By placing the paddle in a specific position I managed to break the game (see the image). I think you should add a random starting angle when the game restarts.  </p>

<p>Also, as <a href="https://en.wikipedia.org/wiki/Pong#Gameplay" rel="noreferrer">Wikipedia</a> says the game should be finished once someone reaches eleven points.</p>

<p><a href="https://i.stack.imgur.com/tpk6Um.png" rel="noreferrer"><img src="https://i.stack.imgur.com/tpk6Um.png" alt="I_broke_the_game.jpg"></a></p>

<p><strong>Code:</strong>  </p>

<p>You violate some of the <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a> style recommendations, namely:</p>

<ul>
<li><a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="noreferrer">order of imports</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="noreferrer">blank lines</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="noreferrer">maximum line length</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="noreferrer">variable names</a> (e.g. <code>normalizedRelativeIntersectY</code> should be <code>normalized_relative_intersect_y</code>)</li>
</ul>

<hr>

<p>In some methods like <code>GameScene.update</code> or <code>Player.update</code> you have empty <code>return</code> or <code>pass</code> statements after code blocks. They are redundant and should be removed.</p>

<hr>

<p>Consider changing the class <code>Globals</code> that consists of only width and height of the screen to a <a href="https://docs.python.org/library/collections.html#collections.namedtuple" rel="noreferrer"><code>namedtuple</code></a>:</p>

<pre><code>import namedtuple

Size = namedtuple('Size', ['width', 'height'])
WINDOW_SIZE = Size(width=800, height=600)
</code></pre>

<p>So, you could use it in two different ways. As a tuple in <code>main</code>:</p>

<pre><code>screen = pygame.display.set_mode(WINDOW_SIZE)
</code></pre>

<p>and as a class with <code>width</code> and <code>height</code> attributes, for example in <code>Player.update</code>:</p>

<pre><code>if down and self.y &lt;= WINDOW_SIZE.height - (self.height + 10):
</code></pre>

<hr>

<p>In the <em>config.py</em> you have a class with colors, but pygame has a special class for that already: <a href="https://www.pygame.org/docs/ref/color.html" rel="noreferrer"><code>pygame.Color</code></a>.
For example, in <code>main</code> you would simply write:</p>

<pre><code>screen.fill(pygame.Color('black'))
</code></pre>

<p>I think it would make sense to move lots of hardcoded values as fonts and dimensions of objects to the <em>config.py</em> file though. Also, be careful, some of your hardcoded values depend on each other, as in the <code>Player</code> class where you check if the paddle is going over the border. That <code>10</code> in <code>if up and self.y &gt;= 10:</code> should be tied with the paddle's dimensions <code>super(Player,self).__init__(20,225,20,150)</code>. </p>

<p>By the way, the last piece should be rewritten as <code>super().__init__(20, 225, 20, 150)</code>. It's been like this since Python 3.0: <a href="https://www.python.org/dev/peps/pep-3135/" rel="noreferrer">PEP 3135 -- New Super</a>.</p>

<hr>

<p>In some places you convert integers to strings using <code>format</code>:</p>

<pre><code>self.player_score=self.font.render("{}".format(self.points["player"]),1,Colors.white)
</code></pre>

<p>but it can be done by using <code>str</code> function:</p>

<pre><code>self.player_score = self.font.render(str(self.points["player"]), 1, pygame.Color('white'))
</code></pre>

<hr>

<p>Finally, don't print things like <code>print("player class initated")</code>. As these things are for debugging purposes, consider using <a href="https://docs.python.org/3/library/logging.html" rel="noreferrer"><code>logging</code></a> module.</p>

<hr>

<p>On overall, well done! I'm not a fan of OOP but it was easy to read and understand your code.</p>
    </div>