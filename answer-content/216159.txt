<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>Using namespace std</code> isn't a good practice in header files, where your program should at least partially reside, because you introduce potential name conflicts. So don't do that, and prefix the names you're importing with <code>std::</code>, you'll get used to it in no time.</p></li>
<li><p>Your function <code>keyExists</code> can be improved upon. First, its name is not the best you could have found, because it suggests you're looking for the existence of a particular key, whereas what you really want to know if the program has been launched before. So <code>is_first_use</code>, or <code>is_first_visit</code> as an analogy to a website, would tell more. Besides, it doesn't have to be that verbose:</p></li>
</ol>

<p><strong>Original version</strong></p>

<pre><code>bool keyExists() {
    bool keyExists = false; // the homonymy is a bad idea
    ifstream inFile("key.txt");

    if (inFile) { 
        keyExists = true; // 
    }

    return keyExists;
}
</code></pre>

<p><strong>first trimming</strong></p>

<pre><code>bool keyExists() {
    bool keyExists = false;
    ifstream inFile("key.txt");

    keyExists = inFile; // because streams can be converted to bool as you know

    return keyExists;
}
</code></pre>

<p><strong>second trimming</strong></p>

<pre><code>bool keyExists() {
    ifstream inFile("key.txt");
    return inFile; // you specified the return type, so the conversion will occur
}
</code></pre>

<p><strong>third trimming</strong></p>

<pre><code>bool keyExists() {
    return ifstream("key.txt"); // no need for a named object
}
</code></pre>

<p>So do you really need a function? It depends. If you want to let your program evolve from here, it's a good idea to keep the function, and implement a more viable test at a later point without disturbing the rest of your code. Otherwise it isn't worth the burden of finding a name for it.</p>

<ol start="3">
<li>Your function <code>isMatch</code> suffers from the same issue. </li>
</ol>

<p><strong>original version</strong></p>

<pre><code>bool isMatch(string key, string confirmKey) {

    bool match = false;
    if (key == confirmKey) {
        match = true;
    }

    return match;
}
</code></pre>

<p><strong>suggested implementation</strong></p>

<pre><code>bool isMatch(const string&amp; key, const string&amp; confirmKey) { // pass it by reference to avoid a potentially costly copy
    return key == confirmKey; // no need to store that in a `bool` before returning it
}
</code></pre>

<p>Then again I'm not sure it needs a function of its own...    </p>

<ol start="4">
<li>What's a valid key?</li>
</ol>

<p>It might be a design choice, but it's very rare to allow for tabs, spaces and such inside a password. Is this really what you want? Is it compatible with every way to store passwords that you can think of? How would you constrain the choice of a password?</p>
    </div>