<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't cover everything that can be done to improve the code, so I will start by the most important parts. Once you incorporate these, you can post the updated version as a new question</p>

<h1>variable names</h1>

<p>the naming of functions, variables etc is more than half of the documentation of your code, so you should be very careful with it. Saving a few characters like <code>maint</code> instead of <code>yearly_maintenance</code>is not worth it. It made me go back and forth between the method definition and place where you call the method a few times.</p>

<p>Also make it clear which cost is yearly, and which is monthly.</p>

<p>You can also include some intermediary variable to clarify some things: <code>loaned_amount = purchase_price - downpayment</code></p>

<h1>split calculation with presentation</h1>

<p>Your code both calculates the costs and gain, and does a lot of the presentation (for example <code>print('Home value after {:.0f} years: {:,.2f}'.format(print_ten/12, home_value[print_ten]))</code>) in the same method. Separating these two will make testing the code and algorithm a lot easier. If you want to build a GUI later, you will be able to reuse the calculation, which is rather difficult now due to all the side-effects (<code>print</code>)</p>

<h1>vectorize</h1>

<p>The costs which don't change every year, apart from appreciation or inflation, which are all apart from the loan repayments, can be easily vectorized:</p>

<pre><code>months = years * 12
months_array = np.arange(months + 1)
home_value = purchase_price * (1 + appreciation / 12) ** months_array
maintenance = yearly_maintenance / 12 * (1 + inflation / 12) ** months_array
</code></pre>

<p>and then later summed.</p>

<h1>split of more parts</h1>

<p>The calculation of the amount due each month, or the amortization can be easily split of in different function</p>

<pre><code>def monthly_payment(*, loaned_amount, months, monthly_interest_rate):
    return (
        loaned_amount
        * (1 - 1 / (1 + monthly_interest_rate))
        / (1 - 1 / (1 + monthly_interest_rate) ** (months))
    )
</code></pre>

<p>little exta comments is needed. The method does what it said in the name and variables. The only thing which might need explanation is the algorithm used.</p>

<pre><code>def amortize(*, loaned_amount, yearly_interest_rate, monthly_payment):
    monthly_interest_rate = yearly_interest_rate / 12
    principal_paid = 0
    interest = 0
    yield loaned_amount, interest, principal_paid
    while loaned_amount * (1+monthly_interest_rate) &gt;= monthly_payment:
        interest = loaned_amount * monthly_interest_rate
        principal_paid = monthly_payment - interest
        loaned_amount = loaned_amount - principal_paid
        yield loaned_amount, interest, principal_paid

    interest = loaned_amount * monthly_interest_rate  
    yield 0, interest, loaned_amount
</code></pre>

<p>Here, a <code>generator</code> is more clear than appending items to 3 different lists, and then returning the lists in the end.</p>

<p>For both I used keyword-only arguments, which are a lot clearer after 2 years (no more questions: <code>what argument came first...</code>)</p>

<p>and they are called like this:</p>

<pre><code>elif system.lower() == "price":
    monthly_amount = monthly_payment(
        loaned_amount=loaned_amount,
        months=months,
        monthly_interest_rate=yearly_interest_rate / 12,
    )
    amortization = np.array(
        list(
            amortize(
                loaned_amount=loaned_amount,
                yearly_interest_rate=yearly_interest_rate,
                monthly_payment=monthly_amount,
            )
        )
    )
    debt, interest_paid, principal_paid = np.split(amortization, 3, axis=1)
</code></pre>

<h1>line length</h1>

<p>Some of your lines were very long, requiring horizontal scrolling. Try to limit the length of the lines of code. I use the <a href="https://github.com/ambv/black" rel="nofollow noreferrer">black</a> formatter to take care of line lengths etc for me.</p>

<h1>the whole thing</h1>

<p>A (simplified) version of the <code>flow</code> method:</p>

<pre><code>def flow(
    purchase_price,
    downpayment,
    yearly_interest_rate,
    years,
    property_tax_rate,
    yearly_maintenance,
    yearly_comdominium,
    yearly_insurance,
    appreciation,
    income_tax_rate,
    inflation,
    initial_rent,
    return_cash,
    time,
    system,
):
    months = years * 12
    months_array = np.arange(months + 1)
    home_value = purchase_price * (1 + appreciation / 12) ** months_array
    maintenance = yearly_maintenance / 12 * (1 + inflation / 12) ** months_array
    insurance = yearly_insurance / 12 * (1 + inflation / 12) ** months_array

    loaned_amount = purchase_price - downpayment

    if system.upper() == "SAC":
        debt = loaned_amount * (1 - months_array / months)
        interest_paid = loaned_amount * yearly_interest_rate / 12
        principal_paid = loaned_amount / months * np.ones_like(months_array)

    elif system.lower() == "price":
        monthly_amount = monthly_payment(
            loaned_amount=loaned_amount,
            months=months,
            monthly_interest_rate=yearly_interest_rate / 12,
        )
        amortization = np.array(
            list(
                amortize(
                    loaned_amount=loaned_amount,
                    yearly_interest_rate=yearly_interest_rate,
                    monthly_payment=monthly_amount,
                )
            )
        )
        debt, interest_paid, principal_paid = np.split(amortization, 3, axis=1)

    property_tax = home_value * property_tax_rate
    income_tax = (interest_paid + property_tax) * income_tax_rate
    cash_outflow = (
        insurance
        + maintenance
        + property_tax
        + interest_paid
        + principal_paid
        - income_tax
    )
    rent = initial_rent * (1 + appreciation / 12) ** months_array

    rent_savings = (cash_outflow - rent) * (
        1 + return_cash / 12
    ) ** months_array

    return months, debt, rent_savings
</code></pre>

<p>the <code>return</code> statement can be expanded. Instead of all the arrays in a <code>tuple</code>, I would combine the either in a <code>dict</code> or a <code>pandas.DataFrame</code>.</p>

<p>This can be called like:</p>

<pre><code>if __name__ == "__main__":
    purchase_price = 800000
    downpayment = 0
    interest = 0.08
    years = 20
    property_tax_rate = 0
    yearly_maintenance = 100
    yearly_comdominium = 0
    yearly_insurance = 0
    appreciation = 0.03  # real appreciation 0%
    income_tax_rate = 0  # income deduction on interest and property taxes paid
    inflation = 0.03
    initial_rent = purchase_price * 0.004  # 0.4 % of real values
    return_cash = 0.06  # real return on cash 3%

    time = 240
    choice = "sac"
    months, debt, rent_savings = flow(
        purchase_price,
        downpayment,
        interest,
        years,
        property_tax_rate,
        yearly_maintenance,
        yearly_comdominium,
        yearly_insurance,
        appreciation,
        income_tax_rate,
        inflation,
        initial_rent,
        return_cash,
        time,
        choice,
    )
    rent_savings.sum()
</code></pre>
    </div>