<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>According to <a href="http://www.lizard.ws/" rel="nofollow noreferrer">www.lizard.ws</a> the original's function cyclomatic complexity is 29 and for the second version is 22. Both numbers are usually considered high, and teams aim for much lower values (<a href="https://softwareengineering.stackexchange.com/questions/194061/cyclomatic-complexity-ranges">debatable</a> what the good range is though and will see within this answer why).</p>

<p>In order to reduce it, one way is to encapsulate the <code>if</code> statements, among with removing the code duplication and separate the responsibilities. </p>

<p>The <code>next</code> calls seem duplicate, so let's reduce them first.</p>

<pre><code>providerSchema.pre('save', function (next) {

     var valid = true;
    if (this.level === 4) {
        if (this.description.length &gt;= 80 || this.certifications.length &gt; 5) {
            valid = false;
        }
    } else if (this.level === 3) {
        if (this.description.length &gt;= 50 || this.certifications.length &gt; 3) {
            valid = false;
        }
    } else if (this.level === 2) {
        if (this.description.length &gt;= 30 || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0) {
            valid = false;
        }
    } else if (this.level === 1) {
        if (this.description || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0 || this.locationLat || this.locationLong || this.workingHourEnd || this.workingHourStart) {
            valid = false;
        }
    } else {
        if (this.description || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0 || this.locationLat || this.locationLong || this.workingHourEnd || this.workingHourStart) {
            valid = false;
        }
    }

    if (valid) {
        next();
    } else {
        next(new Error('your current plan does not have this feature'));
    }
});
</code></pre>

<p>With this first refactoring we didn't gain much in terms of lowering CC, in fact it increased to 30, because of the added <code>if</code> statement. However this can let us to split the validation responsibility from enabling the actual feature (as @Margon mentioned).</p>

<pre><code>providerSchema.pre('save', function (next) {
    if (isValidFeatureRequest()) {
        next();
    } else {
        next(new Error('your current plan does not have this feature'));
    }

    function isValidFeatureRequest() {
        if (this.level === 4) {
            if (this.description.length &gt;= 80 || this.certifications.length &gt; 5) {
                return false;
            }
        } else if (this.level === 3) {
            if (this.description.length &gt;= 50 || this.certifications.length &gt; 3) {
                return false;
            }
        } else if (this.level === 2) {
            if (this.description.length &gt;= 30 || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0) {
                return false;
            }
        } else if (this.level === 1) {
            if (this.description || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0 || this.locationLat || this.locationLong || this.workingHourEnd || this.workingHourStart) {
                return false;
            }
        } else {
            if (this.description || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0 || this.locationLat || this.locationLong || this.workingHourEnd || this.workingHourStart) {
                return false;
            }
        }
        return true;
    }
});
</code></pre>

<p>The <code>isValidFeatureRequest</code> function is at 29 and <code>providerSchema</code> is at 2. We still need to work on.</p>

<p>Checking again the code duplication, I noticed the last two blocks have the the same checks for other levels than 2, 3 or 4, so let's merge them.</p>

<pre><code>providerSchema.pre('save', function (next) {
    if (isValidFeatureRequest()) {
        next();
    } else {
        next(new Error('your current plan does not have this feature'));
    }

    function isValidFeatureRequest() {
        if (this.level === 4) {
            if (this.description.length &gt;= 80 || this.certifications.length &gt; 5) {
                return false;
            }
        } else if (this.level === 3) {
            if (this.description.length &gt;= 50 || this.certifications.length &gt; 3) {
                return false;
            }
        } else if (this.level === 2) {
            if (this.description.length &gt;= 30 || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0) {
                return false;
            }
        } else {
            if (this.description || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0 || this.locationLat || this.locationLong || this.workingHourEnd || this.workingHourStart) {
                return false;
            }
        }
        return true;
    }
});
</code></pre>

<p>We gained the following figures</p>

<pre><code>function                               | CC
-------------------------------------------
providerSchema                         | 2
isValidFeatureRequest                  | 20
</code></pre>

<p>The CC for <code>isValidFeatureRequest</code> is now at 20, which is an improvement.
The check for <code>description</code> and <code>certifications</code> also seems to vary, so I can encapsulate it into a function.</p>

<pre><code>providerSchema.pre('save', function (next) {
    if (isValidFeatureRequest()) {
        next();
    } else {
        next(new Error('your current plan does not have this feature'));
    }

    function isValidFeatureRequest() {
        if (this.level === 4) {
            if (descriptionOrCertificationsOffLimits(80, 5)) {
                return false;
            }
        } else if (this.level === 3) {
            if (descriptionOrCertificationsOffLimits(40, 3)) {
                return false;
            }
        } else if (this.level === 2) {
            if (descriptionOrCertificationsOffLimits(30, 0) || this.teaser || this.social.length &gt; 0) {
                return false;
            }
        } else {
            if (this.description || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0 || this.locationLat || this.locationLong || this.workingHourEnd || this.workingHourStart) {
                return false;
            }
        }
        return true;
    }

    function descriptionOrCertificationsOffLimits(descriptionLimit, certificationsLimit) {
        return this.description.length &gt;= descriptionLimit || this.certifications.length &gt; certificationsLimit;
    }
});
</code></pre>

<pre><code>function                               | CC
-------------------------------------------
providerSchema                         | 2
isValidFeatureRequest                  | 17
descriptionOrCertificationsOffLimits   | 2
</code></pre>

<p>CC is now at 17, slightly better.</p>

<p>There is lot to check in the last branch, so let's extract it into his own function.</p>

<pre><code>providerSchema.pre('save', function (next) {
    if (isValidFeatureRequest()) {
        next();
    } else {
        next(new Error('your current plan does not have this feature'));
    }

    function isValidFeatureRequest() {
        if (this.level === 4) {
            if (descriptionOrCertificationsOffLimits(80, 5)) {
                return false;
            }
        } else if (this.level === 3) {
            if (descriptionOrCertificationsOffLimits(40, 3)) {
                return false;
            }
        } else if (this.level === 2) {
            if (descriptionOrCertificationsOffLimits(30, 0) || this.teaser || this.social.length &gt; 0) {
                return false;
            }
        } else if (hasAny()) {
            return false;
        }
        return true;
    }

    function descriptionOrCertificationsOffLimits(descriptionLimit, certificationsLimit) {
        return this.description.length &gt;= descriptionLimit || this.certifications.length &gt; certificationsLimit;
    }

    function hasAny() {
        return this.description || this.certifications.length &gt; 0 || this.teaser || this.social.length &gt; 0 || this.locationLat || this.locationLong || this.workingHourEnd || this.workingHourStart;
    }
});
</code></pre>

<p>Which results into</p>

<pre><code>function                               | CC
-------------------------------------------
providerSchema                         | 2
isValidFeatureRequest                  | 10
descriptionOrCertificationsOffLimits   | 2
hasAny                                 | 8
</code></pre>

<p>We have now 4 functions with manageable complexities.
The <code>hasAny</code> function seems to have a large CC, compared to what it does. What we can do here is to improve its readability, by displaying one condition per line. This is also the moment when I think we can't do anything about this function, and is the time not to look at an arbitrary CC limit in order to squize the code just to pass the analyzer.</p>

<pre><code> function hasAny() {
        return this.description ||
            this.certifications.length &gt; 0 ||
            this.teaser ||
            this.social.length &gt; 0 ||
            this.locationLat ||
            this.locationLong ||
            this.workingHourEnd ||
            this.workingHourStart;
    }
</code></pre>

<p>Let's extract more, to check if it has a teaser or social data</p>

<pre><code>providerSchema.pre('save', function (next) {
    if (isValidFeatureRequest()) {
        next();
    } else {
        next(new Error('your current plan does not have this feature'));
    }

    function isValidFeatureRequest() {
        if (this.level === 4) {
            if (descriptionOrCertificationsOffLimits(80, 5)) {
                return false;
            }
        } else if (this.level === 3) {
            if (descriptionOrCertificationsOffLimits(40, 3)) {
                return false;
            }
        } else if (this.level === 2) {
            if (descriptionOrCertificationsOffLimits(30, 0) || hasTeaserOrSocial()) {
                return false;
            }
        } else if (hasAny()) {
            return false;
        }
        return true;
    }

    function descriptionOrCertificationsOffLimits(descriptionLimit, certificationsLimit) {
        return this.description.length &gt;= descriptionLimit || this.certifications.length &gt; certificationsLimit;
    }

    function hasTeaserOrSocial() {
        return this.teaser || this.social.length &gt; 0;
    }

    function hasAny() {
        return this.description ||
            this.certifications.length &gt; 0 ||
            this.teaser ||
            this.social.length &gt; 0 ||
            this.locationLat ||
            this.locationLong ||
            this.workingHourEnd ||
            this.workingHourStart;
    }
});
</code></pre>

<p>Which results into</p>

<pre><code>function                               | CC
-------------------------------------------
providerSchema                         | 2
isValidFeatureRequest                  | 9
descriptionOrCertificationsOffLimits   | 2
hasTeaserOrSocial                      | 2
hasAny                                 | 8
</code></pre>

<p>The <code>if</code> followed by an inner <code>if</code> can be combined into and <code>and</code> operation so we can have this</p>

<pre><code> function isValidFeatureRequest() {
        if (this.level === 4 &amp;&amp; descriptionOrCertificationsOffLimits(80, 5)) {
            return false;
        } else if (this.level === 3 &amp;&amp; descriptionOrCertificationsOffLimits(40, 3)) {
            return false;
        } else if (this.level === 2 &amp;&amp; descriptionOrCertificationsOffLimits(30, 0) || hasTeaserOrSocial()) {
            return false;
        } else if ((this.level === 1 || this.level === 0) &amp;&amp; hasAny()) {
            return false;
        }
        return true;
    }
</code></pre>

<p><del>The CC doesn't change, but</del> it enables me to extract validation for every level, so I gain smaller functions, with smaller complexity.
<strong>Edit to fix a bug here</strong> - <em>This step introduced a bug, as @Roland Illig mentioned in the comments (the story of my life when I refactor even a simple <code>if</code>).
After fixing it the CC actually increased with 2, to 11, as I introduced two new checks and I also had to add a new function.</em> <strong>end of edit</strong></p>

<pre><code>function isValidFeatureRequest() {
    if (isLevel4AndNotValid()) {
        return false;
    } else if (isLevel3AndNotValid()) {
        return false;
    } else if (isLevel2AndNotValid()) {
        return false;
    } else if (isBellowLevel2AndNotValid()) {
        return false;
    }
    return true;
}

function isLevel4AndNotValid() {
    return this.level === 4 &amp;&amp; descriptionOrCertificationsOffLimits(80, 5);
}

function isLevel3AndNotValid() {
    return this.level === 3 &amp;&amp; descriptionOrCertificationsOffLimits(40, 3);
}

function isLevel2AndNotValid() {
    return this.level === 2 &amp;&amp; (descriptionOrCertificationsOffLimits(30, 0) || hasTeaserOrSocial());
}

function isBellowLevel2AndNotValid() {
    return (this.level === 1 || this.level === 0) &amp;&amp; hasAny();
}
</code></pre>

<p>Which are</p>

<pre><code>function                               | CC
-------------------------------------------
providerSchema                         | 2
isValidFeatureRequest                  | 5
isLevel4AndNotValid                    | 2
isLevel3AndNotValid                    | 2
isLevel2AndNotValid                    | 3
isBellowLevel2AndNotValid              | 3
descriptionOrCertificationsOffLimits   | 2
hasTeaserOrSocial                      | 2
hasAny                                 | 8
</code></pre>

<p>The <code>isValidFeatureRequest</code> still looks odd, I can remove the else statements and I can convert the last call into a return statement, which decrease the complexity with one point.</p>

<pre><code>function isValidFeatureRequest() {
    if (isLevel4AndNotValid()) {
        return false;
    }

    if (isLevel3AndNotValid()) {
        return false;
    }

    if (isLevel2AndNotValid()) {
        return false;
    }

    if (isBellowLevel2AndNotValid()) {
        return false;
    }

    return true;
}
</code></pre>

<p>My final attempt is this:</p>

<pre><code>providerSchema.pre('save', function (next) {
    if (isValidFeatureRequest()) {
        next();
    } else {
        next(new Error('your current plan does not have this feature'));
    }

    function isValidFeatureRequest() {
        if (isLevel4AndNotValid()) {
            return false;
        }

        if (isLevel3AndNotValid()) {
            return false;
        }

        if (isLevel2AndNotValid()) {
            return false;
        }

        if (isBellowLevel2AndNotValid()) {
            return false;
        }

        return true;
    }

    function isLevel4AndNotValid() {
        return this.level === 4 &amp;&amp; descriptionOrCertificationsOffLimits(80, 5);
    }

    function isLevel3AndNotValid() {
        return this.level === 3 &amp;&amp; descriptionOrCertificationsOffLimits(40, 3);
    }

    function isLevel2AndNotValid() {
        this.level === 2 &amp;&amp; (descriptionOrCertificationsOffLimits(30, 0) || hasTeaserOrSocial());
    }

    function isBellowLevel2AndNotValid() {
        return (this.level === 1 || this.level === 0) &amp;&amp; hasAny();
    }

    function descriptionOrCertificationsOffLimits(descriptionLimit, certificationsLimit) {
        return this.description.length &gt;= descriptionLimit || this.certifications.length &gt; certificationsLimit;
    }

    function hasTeaserOrSocial() {
        return this.teaser || this.social.length &gt; 0;
    }

    function hasAny() {
        return this.description ||
            this.certifications.length &gt; 0 ||
            this.teaser ||
            this.social.length &gt; 0 ||
            this.locationLat ||
            this.locationLong ||
            this.workingHourEnd ||
            this.workingHourStart;
    }
});
</code></pre>

<p>With the following resuts:</p>

<pre><code>function                               | CC
-------------------------------------------
providerSchema                         | 2
isValidFeatureRequest                  | 5
isLevel4AndNotValid                    | 2
isLevel3AndNotValid                    | 2
isLevel2AndNotValid                    | 3
isBellowLvel2AndNotValid               | 3
descriptionOrCertificationsOffLimits   | 2
hasTeaserOrSocial                      | 2
hasAny                                 | 8
</code></pre>
    </div>