<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of things that may help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  It's especially bad to use it when writing headers.</p>

<h2>Separate interface from implementation</h2>

<p>The interface goes into a header file and the implementation (that is, everything that actually emits bytes including all functions and data) should be in a separate <code>.cpp</code> file.  The reason is that you might have multiple source files including the <code>.h</code> file but only one instance of the corresponding <code>.cpp</code> file.  In other words, split your existing <code>Gameboard.cpp</code> and <code>User.cpp</code> file into a <code>.h</code> file and a <code>.cpp</code> file and only <code>#include</code> the <code>.h</code> files in <code>main.cpp</code>.</p>

<h2>Separate I/O from initialization</h2>

<p>The <code>create_2user()</code> function prints prompts, reads responses and then creates <code>User</code> objects.  Better design would be to separate prompts and input from initialization.  In other words, you could ask for names within <code>main</code> and then after both names are received, construct <code>User</code> objects.</p>

<h2>Understand compound objects</h2>

<p>In the <code>User.cpp</code> file, we have this struct:</p>

<pre><code>struct usrs { User usr0, usr1; };
</code></pre>

<p>Which is returned by this function:</p>

<pre><code>usrs create_2user() 
</code></pre>

<p>But then in <code>main</code> what we actually use is a list:</p>

<pre><code>list&lt;User&gt; playerList = { players.usr0, players.usr1 };
</code></pre>

<p>What would make things simpler would be to take the advice in the previous section (asking for names before object creation) and then using those directly to initialize the compound structure you actually want as further shown below.  </p>

<h2>Use appropriate data structures</h2>

<p>The <code>std::list</code> used in <code>main</code> to store the players is generally not a very good structure to use for that purpose.  It's typically implemented as a linked list which supports constant time insertion and removal of items but no random access.  You don't need that for this program.  Instead, I'd recommend using <code>std::array</code> since no insertion, removal or lookup is required.</p>

<h2>Don't use a single "include everywhere" file</h2>

<p>Generally, it's better practice not to have a single header file that's included everywhere, but individual header files that <em>only</em> include the minimally sufficient interface description as mentioned above.</p>

<h2>Use more whitespace to enhance readability of the code</h2>

<p>Instead of crowding things together like this:</p>

<pre><code>while((count &lt; 16)&amp;&amp;(out != 0)) {
</code></pre>

<p>most people find it more easily readable if you use more space:</p>

<pre><code>while ((count &lt; 16) &amp;&amp; (out != 0)) {
</code></pre>

<h2>Use consistent formatting</h2>

<p>The code as posted has inconsistent use of spaces within conditional clauses (as with <code>while</code> and <code>for</code>).  Pick a style and apply it consistently. </p>

<h2>Avoid magic numbers</h2>

<p>One of the lines of code here is this:</p>

<pre><code>while((count &lt; 16)&amp;&amp;(out != 0)) {
</code></pre>

<p>First, the number 16 has significance, but it's not immediately obvious what the significance is.  Second, since it seems to be related to the dimension <code>4</code> within the <code>Gameboard</code> class, should it be stored there?</p>

<h2>Use appropriate data types</h2>

<p>It appears that <code>out</code> is only intended to be <code>0</code> or <code>1</code>.  That strongly suggests that it should be of type <code>bool</code> instead of <code>int</code>.</p>

<h2>Use better variable names</h2>

<p>The variable name <code>players</code> is good, but the name <code>out</code> is not.  The first name explains something about what the variable means within the context of the code, but the latter is only confusing. A better name might be <code>playing</code>.</p>

<h2>Use <code>const</code> where possible</h2>

<p>The <code>Gameboard::printInfo</code> and <code>User::get_name</code> functions do not (and should not) alter the underlying structurs and should therefore be declared <code>const</code>.</p>

<h2>Don't write getters and setters for every class</h2>

<p>C++ isn't Java and writing getter and setter functions for every C++ class is not good style.  Instead, move setter functionality into constructors and think very carefully about whether a getter is needed at all.  In this code, neither getter nor setter for <code>Gameboard</code> is ever used, which emphasizes why they shouldn't be written in the first place.</p>

<h2>Put each statement on a single line</h2>

<p>It detrimental to the readability of your code to jam multiple statements on a single line like this:</p>

<pre><code>cout&lt;&lt;"\n"; game.printInfo(); cout&lt;&lt;"\n &gt; ";
</code></pre>

<p>Instead, I'd have preferred to write that like this:</p>

<pre><code>std::cout &lt;&lt; '\n' &lt;&lt; game &lt;&lt; "\n &gt; ";
</code></pre>

<p>Which brings us to the next suggestion:</p>

<h2>Prefer a stream inserter to a custom <code>print</code> routine</h2>

<p>Your custom <code>Gameboard::printInfo</code> routine could instead be written as a stream inserter:</p>

<pre><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Gameboard&amp; game) {
    for(int i = 0; i &lt; 4; ++i) { 
        for(int j = 0; j &lt; 4; ++j) {
            out &lt;&lt; game.gameSpace[i][j] &lt;&lt; '\t';
        }
        out &lt;&lt; '\n';
    }
    return out;
}
</code></pre>

<h2>Eliminate spurious semicolons</h2>

<p>With the commented-out lines removed, the <code>Gameboard</code> constructor looks like this:</p>

<pre><code>Gameboard::Gameboard() { //define the constructor
    for(int i=0;i&lt;4;i++) { 
        for(int j=0;j&lt;4;j++) {
            gameSpace[i][j] = std::to_string( (i+1)*10 + (j+1) );
        };   // &lt;-- no semicolon here
    };  // &lt;-- no semicolon here
}
</code></pre>

<p>As marked by the comments, there are spurious semicolons there which should be removed.</p>

<h2>Reconsider the interface</h2>

<p>Right now there is little relationship between the game play, defined in <code>main</code>, and the <code>Gameboard</code> class.  It would likely make the code simpler and better to move most  of the game logic inside <code>Gameboard</code> to keep it all in one place.  I'd suggest that it may also make sense to have the <code>Gameboard</code> object keep track of players.  If fully encapsulated, <code>main</code> might look like this:</p>

<pre><code>int main() {
    Game::play();
}
</code></pre>

<p>where <code>play</code> could be a <code>static</code> function that does everything <code>main</code> does right now.</p>
    </div>