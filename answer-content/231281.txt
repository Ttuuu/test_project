<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The </p>

<pre><code>public int Helper(TreeNode root, Dictionary&lt;TreeNode, int&gt; hash)
</code></pre>

<p>method can (and should) be <code>private</code>. It is not meant to be called from outside the class. </p>

<p>The helper method would also benefit from a (short) explaining comment: How does the recursion work, and what is cached?</p>

<p>The helper method does 6 recursive calls to itself. A dictionary is used to cache the results, so that the tree is essentially traversed only once, but that dictionary has to be passed down in the recursive calls.</p>

<p>A slightly different approach makes the cache obsolete and reduces the numbers of recursive calls. The idea is to compute <em>two sums</em> for every node:</p>

<ul>
<li>the maximal amount that can be achieved by robbing this house, and</li>
<li>the maximal amount that can be achieved by not robbing this house.</li>
</ul>

<p>The implementation is simple and almost self-explaining:</p>

<pre><code>public int Rob(TreeNode root)
{
    var (with, without) = Helper(root);
    return Math.Max(with, without);
}

// Recursively determine the maximal amount that can be achieved
// - by robbing this house,
// - by skipping this house.
private (int, int) Helper(TreeNode root)
{
    if (root == null)
    {
        return (0, 0);
    }

    var (leftWith, leftWithout) = Helper(root.left);
    var (rightWith, rightWithout) = Helper(root.right);

    // If we rob this house then we cannot rob its immediate children:
    var sumWith = root.val + leftWithout + rightWithout;
    // Otherwise we can rob the immediate children (and pick the
    // maximal possible sum for both):
    var sumWithout = Math.Max(leftWith, leftWithout) + Math.Max(rightWith, rightWithout);

    return (sumWith, sumWithout);
}
</code></pre>
    </div>