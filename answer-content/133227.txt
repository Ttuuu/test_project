<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You create too many new lists without using list comprehensions, and you iterate over your loops too many times.  You also don't validate your input.</p>

<h3>Validation</h3>

<p>Users are bad/silly/annoying people. They have these nasty habits of giving you things you didn't ask for or didn't want, that neatly fit into the exact edge cases that break everything. Thus we practice <a href="https://en.wikipedia.org/wiki/Defensive_programming" rel="nofollow">defensive programming</a>.  Your first problem is that you do literally no validation whatsoever - your app will just crash and burn if fed malicious or invalid input.  I'd do something like this.</p>

<pre><code>def validate_input(validator, message="Invalid input - please try again", *, retry=True, show_exception=False):
    while True:
        try:
            return validator(input())
        except Exception as e:
            if show_exception:
                print(e)
            print(message)

        if not retry:
            raise Exception("Input was invalid.")
</code></pre>

<p>Essentially, you have some validator that will attempt to transform the input into the desired shape (i.e. int, float, class, whatever) and raise an error otherwise.  You can control how much error is displayed to the user, if it should retry, etc.</p>

<h3>Too many lists/iterations</h3>

<p>You create three lists when you need at most. You loop over your list 4 times (not including sorting, and you don't take advantage of your sorting either), when you only need to do it once.  You should process things as you get them instead.  First, write a generator that gets you all of your students</p>

<pre><code>def get_students(num_pupils):
    for pupil in range(num_pupils):
        yield validate_input(str), validate_input(float)
</code></pre>

<p>then write your function to get the second lowest</p>

<pre><code>def second_lowest(pupils):
    worst_students = []
    second_worst_students = []

    worst_student_score = None
    second_worst_student_score = None

    for name, score in pupils:   
        if worst_student_score is None:
            worst_students.append(name)     
            worst_student_score = score
        elif second_worst_student_score is None:
            second_worst_students.append(name)
            second_worst_students_score = score
        else:
            if score &lt; worst_student_score:
                second_worst_student_score = worst_student_score
                second_worst_students = worst_students
                worst_students = [name]
                worst_student_score = score
            elif score == worst_student_score:
                worst_students.append(name)
            elif score &lt; second_worst_student_score:
                second_worst_student_score = score
                second_worst_students = [name]
            elif score == second_worst_student_score:
                second_worst_students.append(name)

    return second_worst_students, second_worst_Student_score
</code></pre>

<p>If you know what the maximum possible value will be then you can condense this code a bit, and if you're a little clever I think you'll be able to condense it even further, but I'll leave that as an exercise for the reader.</p>

<p>After that, all you need is this:</p>

<pre><code>if __name__ == '__main__':
    print second_lowest(validate_input(int))
</code></pre>

<p>As an aside, your description of the requirements (return) and your implementation don't match (you just print). You also didn't mention anything about sorting, but you print the sorted values. You also didn't mention what to do if there were ties, or how to handle floating point irregularities, so I left that alone.</p>
    </div>