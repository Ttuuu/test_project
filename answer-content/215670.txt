<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Your <code>directions</code> dictionary is only used by <code>get_direction</code>; why not put it inside the function rather than have it as a global? I'd maybe even put the dict inside <code>get_chance_of_positions()</code> and drop the <code>get_direction()</code> function entirely; it's short, only used once and doesn't require a docstring (its obvious how it works). Put dirs straight into the line as well, rather than creating the <code>dirs</code> variable.</p></li>
<li><p>I think you've created more functions than you need in the first file. Both <code>change_position()</code> and <code>increment_counter()</code> should probably be merged into your worker function (<code>get_chance_of_positions()</code>). At the moment, the reader has to jump around functions and their docstrings when a commented line in the worker function would be better.</p></li>
<li><p>When looping, you often use names like <code>n</code>, <code>i</code> or <code>j</code>. Try to be more explicit, e.g. <code>for sim in range(total_num_of_sims)</code>. Sometimes you actually define what the variable does in the docstring; a good name would do this job better.</p></li>
<li><p>You could use fstrings in your plotting rather than <code>.format()</code>. You shouldn't need to cast to int either.</p></li>
<li><p>I like ternary operators so I would change <code>get_options</code> to:</p>

<pre class="lang-py prettyprint-override"><code>return Options.options if Options.options is not None else Options.generate_options()
</code></pre></li>
<li><p>Try to be consistent with how you indent when splitting a line across multiple lines as you have in <code>options.Options.generate_options()</code>. By which I mean:</p>

<p>Instead of: </p>

<pre class="lang-py prettyprint-override"><code>arg_parser.add_argument('-N', '--num-of-rounds',
                    type = int,
                    required = False,
                    default = 10**5 ...)
</code></pre>

<p>Use:</p>

<pre><code>arg_parser.add_argument('-N', '--num-of-rounds',
                        type = int,
                        required = False,
                        default = 10**5 ...)
</code></pre>

<p>Or:</p>

<pre><code>arg_parser.add_argument(
    '-N', '--num-of-rounds',
    type = int,
    required = False,
    default = 10**5 ...
)
</code></pre></li>
</ul>

<p>Overall very readable code. Not many comments but the code generally speaks for itself. Try to avoid compartmentalising your code so much, it doesn't always make sense to split things up.</p>
    </div>