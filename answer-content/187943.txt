<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are my comments, in order of severity:</p>

<h2>Bugs</h2>

<p>(or bug-like behavior)</p>

<ol>
<li><h3>Resource leaks:</h3>

<p>You do not close any of the IO resources that you use (DB connection and various <code>InputStream</code>s you open on the input file).  Unclosed resources (aka leaks) leave JVM- or OS- level open handles behind. Even if you use a DB connection pool (I hope you did, did you?), you have to close the connection to return it to the pool.   Use <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">Java 7 try-with-resources</a> feature to optimally handle the life cycle of IO resources.</p>

<p>Note: <code>PreparedStatement</code> is also a closeable resource.</p></li>
<li><h3>SQL injection vulnerability:</h3>

<p>When you insert data with SQL <code>INSERT</code> statement, <a href="http://amolnaik4.blogspot.co.il/2012/02/sql-injection-in-insert-query.html" rel="nofollow noreferrer"><em>do not embed the values in the statement</em></a>. Use bind variables.</p></li>
<li><h3>Redundant instance creation:</h3>

<p>The third statement in <code>saveFile()</code> creates an instance of <code>JSONParserFile</code>. Since the method is not static, you already have an instance of <code>JSONParserFile</code>: <strong><code>this</code></strong>.  use it.</p></li>
</ol>

<h2>Performance</h2>

<ol>
<li><h3>Parsing the input file:</h3>

<p>You parse the input file twice (and create two unclosed <code>InputStream</code>s).  'nough said.</p></li>
<li><h3>Redundant size calculation:</h3>

<p>If you already took the trouble to calculate <code>listColumns.size()</code> and put it in an <code>int</code> variable <code>sizeColumns</code>, why do you keep calling the <code>size()</code> method in further processing? </p></li>
</ol>

<h2>Design</h2>

<ol>
<li><h3>Extensibility:</h3>

<p>When you decide that <code>saveFile()</code> accepts <code>MultipartFile</code> argument, you limit the usefulness of the method to very specific input type.  However, the processing of <code>saveFile()</code> does not rely on any specific feature of <code>MultipartFile</code> and can operate on any <code>InputStream</code>.  <code>InputStream</code> is more general purpose interface than <code>MultipartFile</code> so you will be able to use the same <code>saveFile()</code> for other scenarios.  </p>

<p>If you want to save the client the trouble of converting <code>MultipartFile</code> to <code>InputStream</code> you can offer an overloaded variation of the method:</p>

<pre><code>  public void saveFile(MultipartFile file,String tableName) throws Exception {
    // here we are responsible for the life-cycle of the input stream 
    try (InputStream is =  file.getInputStream()) {
        saveFile(is, tableName);
    }
  }

  public void saveFile(InputStream file, String tableName) throws Exception {
    // do work
  }
</code></pre></li>
<li><h3>Modularity:</h3>

<p>The <code>JSONParserFile</code> does all the work: the IO operation of reading the input file, parsing the JSON contents, and all the SQL processing. This means that any changes in the input or output will result in changes to this monolithic class.  This creates the potential problem of side effects: when you replace the JSON with XML, you may introduce bugs in the SQL processing.  For the sake of modularity (and also clarity), you better break the monolith class into smaller classes that take care of one aspect of the problem domain.</p></li>
</ol>

<h2>Readability</h2>

<ol>
<li><h3><code>StringBuilder</code>:</h3>

<p>The use of this class (may) have performance gains, but you pay for that in readability, big time (IMO). You should also know that the java compiler replaces plus sign string concatenation with <code>StringBuilder.append()</code> in the bytecode.  Only in very specific scenarios (frequent loops and such) does it actually make a different to explicitly use <code>StringBuilder</code>. I would say that, as a rule of thumb, string concatenation should be done with plus sign unless you know you have a loop that iterates over thousands of items or is called hundreds of times. </p></li>
<li><h3>But that is not enough.</h3>

<p>Even if we replace <code>StringBuilder</code> with plus sign string concatenation, this statement:</p>

<pre><code>"Create table " + tableName.replaceAll(" ", "_").replaceAll("\'", "") + " ( "; 
</code></pre>

<p>remains too obscure because it is hard to see where the plus sign is among all the other punctuation symbols. One way to solve this is by breaking the line according to the plus signs. However, if we look at the "big picture", what you have here is a template of an SQL statement where you want to embed table and column names. Embedding values into a <code>String</code> is the expertise of <code>printf</code> style formatting:</p>

<pre><code>String.format("Create table %s ( ", tableName.replaceAll(" ", "_").replaceAll("\'", "")); 
</code></pre>

<p>This is much better. You might consider breaking the above statement to two lines for further clarity.</p></li>
<li><h3>String joining:</h3>

<p>Java 8 stream API can (and should) be used in almost all the places where a <code>for</code> loop used to be. This is especially true with String-joining loops. For example, the entire loop that is used in the building of the <code>CREATE</code> SQL statement can be replaced by one line: </p>

<pre><code>listColumns.stream().collect(Collectors.joining(" VARCHAR(255),", "", " VARCHAR(255))"))
</code></pre>

<p>You can argue about the readability gain. someone who is familiar with java 8 stream API will know what this is about immediately. </p></li>
</ol>

<h2>Naming Convention</h2>

<ol>
<li><h3><code>void getRecordsInsert()</code></h3>

A getter returning <code>void</code>?</li>
</ol>
    </div>