<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Caution — naïve application of big-O analysis will lead you astray here!</p>

<p>First of all, you should be more precise about what you mean by "n".  In this problem, there are |<em>J</em>| and |<em>S</em>|: the lengths of <em>J</em> and <em>S</em>.  Your first approach is O(|<em>J</em>| |<em>S</em>|); your second one is O(|<em>J</em>| + |<em>S</em>|).</p>

<p>More importantly, <strong>big-O analysis only tells you how well an algorithm scales to handle large inputs.</strong>  In this challenge, though, |<em>J</em>| and |<em>S</em>| are at most 50 — very small inputs, by computer standards.  That means that the constant factors, which are disregarded in big-O analysis, actually matter.  (Another way to look at it: with those limits, |<em>J</em>| and |<em>S</em>| are both O(1), so any sane solution is also O(1)!)</p>

<p>Consider <a href="https://github.com/dmlloyd/openjdk/blob/jdk10/master/src/java.base/share/classes/java/util/HashSet.java" rel="noreferrer">how much code is involved in making a <code>HashSet</code></a>.  A <code>HashSet</code> is actually a disguise for a <a href="https://github.com/dmlloyd/openjdk/blob/jdk10/master/src/java.base/share/classes/java/util/HashMap.java" rel="noreferrer"><code>HashMap</code></a>.  A <code>HashMap</code> is implemented as an array of trees, each containing <code>Map.Entry</code> objects.  The array should be optimally sized to hold all the characters of <em>J</em> with no hashcode collisions, but you neglected to specify size hints when calling the <code>HashSet&lt;&gt;()</code> constructor.  Then, you have to insert each character of <em>J</em>, which involves boxing a <code>char</code> into a <code>Character</code>, calculating its hashcode, making a <code>Map.Entry</code> for it, and inserting it into the <code>HashMap</code>'s table.  The problem is, Java makes it easy to execute a lot of operations without making you aware of how much work it actually is!</p>

<p>Since the challenge states that all characters are letters — which I interpret to mean the 52 letters in the English alphabet, you could achieve an efficient test of membership in <em>J</em> using a simple lookup table:</p>

<pre><code>public int numJewelsInStones(String j, String s) {
    boolean[] jewels = new boolean[128];
    for (int i = 0; i &lt; j.length(); i++) {
        jewels[j.codePointAt(i)] = true;
    }
    int count = 0;
    for (int i = 0; i &lt; s.length(); i++) {
        if (jewels[s.codePointAt(i)]) {
            count++;
        }
    }
    return count;
}
</code></pre>
    </div>