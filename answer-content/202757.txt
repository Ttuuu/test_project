<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Use <code>return</code> to also return early. It's easier to understand and read then assigning to <code>condition_met</code> and <code>break</code>.</li>
<li>I'm ignoring the extra code that <code>key = 'max'</code> has.</li>
<li>Your code would be smaller and easier to read if you inverted all your ifs.</li>
<li><p>You need to check what the similarities between each if is:</p>

<pre><code>if row[condition_key] in condition_val:  # IN
if row[condition_key] not in condition_val:  # NOT IN
if int(row[condition_key]) &lt;= int(condition_val): # MAX (&lt;=)
if int(row[condition_key]) &gt;= int(condition_val): # MIN (&gt;=)
</code></pre>

<p>From this we should see that you use one of four operators in each if. <code>in</code>, <code>not in</code>, <code>&lt;=</code> and <code>&gt;=</code>.
You also cast the input into <code>int</code> on two of your ifs. To add this we can change each to cast to a type.</p>

<p>Checking the operators that we need against the <a href="https://docs.python.org/2.7/library/operator.html#mapping-operators-to-functions" rel="nofollow noreferrer"><code>operator</code> comparison table</a> we can see we need:</p>

<ul>
<li><code>contains</code></li>
<li><code>le</code></li>
<li><code>ge</code></li>
<li>And one for not contains.</li>
</ul>

<p>And so we can use:</p>

<pre><code>FUNCTIONS = {
    'in': (operator.contains, list),
    'not in': (lambda a, b: a not in b, list),
    'max': (operator.le, int),
    'min': (operator.ge, int),
}
</code></pre></li>
</ol>



<pre><code>import operator

FUNCTIONS = {
    'in': (operator.contains, list),
    'not in': (lambda a, b: a not in b, list),
    'max': (operator.le, int),
    'min': (operator.ge, int),
}


def check_if_condition_was_met(row, condition):
    for key, val in condition.iteritems():
        op, cast = FUNCTIONS[key]
        for condition_key, condition_val in val.iteritems():
            if not op(cast(row[condition_key]), cast(condition_val)):
                return False
    return True
</code></pre>
    </div>