<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Computing a square-root is unnecessary; further, it only works when <code>kBoardSize</code> is a perfect square. Prefer</p>

<pre><code>const int kBoardLength = 3;
const int kBoardSize = kBoardLength * kBoardLength;
</code></pre></li>
<li><p>Your test for unreachability is not complete. You verify that O has made no more moves than X, but you really need to check that the winner made the last move. If X won, then should have <code>numberOfX = numberOfO + 1</code>; if O won then should have <code>numberOfO = numberOfX</code>. It should be clear how to add these checks to your <code>CheckTicTacToeBoard</code> method.</p></li>
<li><p>A more overarching tension in this code is: should the board size really be a constant? The code is written so abstractly as to support any board size. But then the board size is fixed to a constant. I would choose one of the following directions to proceed in:</p>

<ul>
<li>Commit to a board size of 9. In this case, I would recommend hard-coding the win conditions in <code>winDetection</code>. There are only 8 ways to win, so the resulting code would be a lot cleaner.</li>
<li><p>Allow arbitrary board sizes. In this case, you should accept a <code>boardLength</code> argument. Further, you will have to refine the notion of an <code>UnreachableState</code>. For example, in 5-by-5 tic tac toe, the following state is unreachable, your code would return <code>Xwins</code>:</p>

<pre><code>x x x x x
o . o . o
x x x x x
o . o . o
o o x o o
</code></pre></li>
</ul></li>
</ol>
    </div>