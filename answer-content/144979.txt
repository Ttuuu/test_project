<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="//stackoverflow.com/q/1452721/1157100"><code>using namespace std</code> is considered bad practice.</a>  Also, in C++, you should <a href="http://en.cppreference.com/w/cpp/header/string" rel="noreferrer"><code>#include &lt;string&gt;</code></a> rather than <code>#include &lt;string.h&gt;</code>.</p>

<p>The <code>Solution</code> class is an unnecessary complication.  You would be better off with just an <code>isSubsequence()</code> function.</p>

<p>In your first function, <code>returnVal</code> is never used.  Compiling with warnings enabled should alert you to the dead code.</p>

<p>The memory management rule is simple: every <code>new</code> must be paired with exactly one <code>delete</code>, and every <code>new something[]</code> must be paired with exactly one <code>delete[]</code>.  Since the first solution calls <code>new[]</code> twice with no <code>delete[]</code>, you have a <strong>memory leak</strong>.  Your friend is right: you should take advantage of the <code>string</code> class, because the whole point of the <code>string</code> class is to take care of memory management for you.  The second solution is definitely better.</p>

<p>The function signature is not ideal.  Having <code>string</code> parameters will cause each string to be <strong>needlessly copied</strong> when the function is called.  You should write instead:</p>

<pre><code>bool isSubsequence(const std::string &amp;s, const std::string &amp;t) {
    â€¦
}
</code></pre>

<p><a href="http://en.cppreference.com/w/cpp/string/basic_string/size" rel="noreferrer"><code>std::string::size()</code> returns <code>std::string::size_type</code></a>, so strictly speaking, you should use <code>std::string::size_type</code> instead of <code>int</code>.  (Or, if using <a href="/questions/tagged/c%2b%2b11" class="post-tag" title="show questions tagged 'c++11'" rel="tag">c++11</a>, just use <a href="http://en.cppreference.com/w/cpp/language/auto" rel="noreferrer"><code>auto</code></a>.)</p>
    </div>