<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview @Seto! :]</p>

<hr>

<p>In a <a href="https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29#tests" rel="nofollow noreferrer">summery for tests</a> of the book Clean Code by Robert C. Martin the following points are important</p>

<blockquote>
  <ul>
  <li>One assert per test.</li>
  <li>Readable.</li>
  <li>Fast.</li>
  <li>Independent.</li>
  <li>Repeatable.</li>
  </ul>
</blockquote>

<p>At first glance, we can see that the tests break the rule of one assert per test and are not as readable as they could be. </p>

<hr>

<h1><a href="https://www.javacodegeeks.com/2013/06/builder-pattern-good-for-code-great-for-tests.html" rel="nofollow noreferrer">The Builder Pattern for Tests</a></h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>@Before
public void setupOnce() {

   case1 = new Traktamente();
   case1.startTime = "13:00";
   case1.startDate = "2019-01-07";
   // ...

   case2 = new Traktamente();
   case2.startTime = "20:00";
   case2.startDate = "2019-01-06";
   // ..

   case2 = new Traktamente();
   // ..
}
</code></pre>
</blockquote>

<p>Many fields share the same values. With the builder pattern we can add common values to clean up the <code>setupOnce</code>.</p>

<pre class="lang-java prettyprint-override"><code>public class TraktamenteBuilder {

    public String startDate = "2019-01-07";
    public String startTime = "13:00";
    public String endDate = // add your default here;
    public String endTime = // add your default here;
    public String origin = // add your default here;
    public String destination = // add your default here;
    public boolean switchEgetBoendeState = true;
    public boolean switchNinetyDaysState = true;
    public String comments = "Lorem ipsum dolor sit amet.";

    public TraktamenteBuilder withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }

    public TraktamenteBuilder withStartTime(String tartTime) {
        this.startTime = startTime;
        return this;
    }

    public TraktamenteBuilder withEgetBoendeState() {
        this.switchEgetBoendeState = true;
        return this;
    }

    // make them expressive - much better then setEgetBoendeState(boolean)
    public TraktamenteBuilder withoutEgetBoendeState() {
        this.switchEgetBoendeState = false;
        return this;
    }

    // add more..


    public Traktamente build() {
        Traktamente traktamente = new Traktamente();
        traktamente.startTime = startTime;
        traktamente.startDate = startDate; 
        traktamente.endTime = endTime;
        traktamente.endDate = endDate;
        traktamente.origin = origin;
        traktamente.destination = destination;
        traktamente.switchEgetBoendeState = switchEgetBoendeState;
        traktamente.switchNinetyDaysState = switchNinetyDaysState;
        traktamente.comments = comments;
        return traktamente;
    }

}
</code></pre>

<pre class="lang-java prettyprint-override"><code>public class TraktamenteTest {

    private final int CASE_1_REPORT_COUNT = 6;
    private final int CASE_2_REPORT_COUNT = 7;
    private final int CASE_3_REPORT_COUNT = 14;
    private final int CASE_4_REPORT_COUNT = 12;
    private final int CASE_5_REPORT_COUNT = 12;
    private final int CASE_6_REPORT_COUNT = 16;

    private final Traktamente case1 = new TraktamenteBuilder().withStartDate("2019-01-07")
                                                              .withStartTime("13:00")
                                                              .withEndDate("2019-01-10")
                                                              .withEndTime("21:00")
                                                              .build();

    private final Traktamente case2 = new TraktamenteBuilder().withStartDate("2019-01-06")
                                                              .withStartTime("20:00")
                                                              .withEndDate("2019-01-10")
                                                              .withEndTime("21:00")
                                                              .build();


    // more cases

    @Before
    public void setupOnce() {
        DateTimeZone.setProvider(new UTCProvider());
    }

    // test cases ...
}
</code></pre>

<hr>

<h1>Parameterized Tests</h1>

<p>You have 4 test and 3 of them contains repetitive code, because you want  to check the logic for different cases. The disadvantage is that your test cases are big, contains duplicate code and you need to change at so many places if the API of your application will change at one day.</p>

<p>Actually you can think of your different cases as parameters of one test. For jUnit4 you can take a look at <a href="https://github.com/junit-team/junit4/wiki/parameterized-tests" rel="nofollow noreferrer">a github guide for parameterized tests</a> or if you want to take a look at jUnit5 you can take a look into the <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests" rel="nofollow noreferrer">user guide for parameterized tests</a>. There also exists a tool with the name <a href="https://github.com/Pragmatists/JUnitParams" rel="nofollow noreferrer">JUnitParams</a></p>

<hr>

<h1>Focus on one Assertion</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>@Test
public void generateReport_shouldAddTwoDatesAfterTheEndDate() {
   case1.generateReport();
   // ..

   assertThat(case1.getDateArray().size()).isEqualTo(CASE_1_REPORT_COUNT);
   // ..

   assertThat(case1.startDate.equals(case1.getDateArray().get(0).toString())).isTrue();
   // ..

   assertThat(case1.endDate.equals(case1.getDateArray().get(CASE_1_REPORT_COUNT - 3).toString())).isTrue();
   // ..
}
</code></pre>
</blockquote>

<p>The test <code>generateReport_shouldAddTwoDatesAfterTheEndDate</code> tests more than just adding to dates to the end. It also check the array size and the first startDate. This tests should be in their own tests.</p>

<hr>

<h1><a href="http://wiki.c2.com/?ArrangeActAssert" rel="nofollow noreferrer">Arrange Act Assert</a></h1>

<blockquote>
  <p>Each method should group these functional sections, separated by blank lines:</p>
  
  <p><strong>Arrange</strong> all necessary preconditions and inputs.<br>
     <strong>Act</strong> on the object or method under test.<br>
     <strong>Assert</strong> that the expected results have occurred. </p>
</blockquote>

<p>The AAA-Pattern makes it easier to understand and maintain the code - not only for your self but for other programmers that need to read or change your code too.</p>

<pre class="lang-java prettyprint-override"><code>@Test
public void isEndDateOfTheTrip_shouldReturnsTrue() {
    // arrange
    case1.generateReport();

    // act
    boolean isEndDateOfTheTrip = case1.isEndDateOfTheTrip(CASE_1_REPORT_COUNT-3);

    // assert
    assertThat(isEndDateOfTheTrip).isTrue();
}
</code></pre>
    </div>