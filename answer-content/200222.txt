<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General remarks</h3>

<blockquote>
<pre><code>def points_in_lins(l):
</code></pre>
</blockquote>

<p>The function and argument name can be improved. <code>l</code> is too short and does
not indicate at all that this is a list of points, and <code>points_in_lins</code>
(perhaps you meant <code>points_in_line</code>?) does not indicate that the function
looks for <em>four</em> points in a line.</p>

<p><code>gradients</code> is in fact a dictionary counting <em>slopes.</em></p>

<p>Iterating over all pairs of points can be simplified with
<code>enumerate()</code> and slices:</p>

<pre><code>for idx, (x1, y1) in enumerate(l):
    gradients = {}
    for (x2, y2) in l[idx + 1:]:
</code></pre>

<p>The “set or increment” for <code>gradients</code> can be simplified with 
<a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> or a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>:</p>

<pre><code>gradients = Counter()

# ...

gradients[m] += 1
if gradients[m] == 3:
    return True
</code></pre>

<p>The parentheses in <code>return(True)</code> and <code>return(False)</code> are not necessary:</p>

<pre><code>return False
</code></pre>

<h3>The math</h3>

<p>Computing the slope as the quotient</p>

<pre><code>m = (y2 - y1) / (x2 - x1)
</code></pre>

<p>requires a separate check for a zero denominator, but is problematic
for another reason: <em>Rounding errors</em> can occur. As an example,</p>

<pre><code>points_in_lins([(0, 300000000000000000), (1, 0), (1, 1), (1, 2)])
</code></pre>

<p>evaluates to <code>True</code>: The slopes from the first point to the
other three points all evaluate to the same floating point number.</p>

<p>A possible fix is to compare the “directions” , i.e. the (2-dimensional)
vectors between the two points, normalized in a way such that
two vectors pointing in the same (or opposite direction) are
considered equal.</p>

<p>If all coordinates are integers, then it is best to stick with pure
integer calculations. Normalizing the connecting vector can be
achieved by division by the greatest common divisor of the x- and
y-component, and possibly mirroring it.</p>

<h3>Putting it together</h3>

<pre><code>from math import gcd
from collections import Counter


def four_points_in_line(points):
    for idx, (x1, y1) in enumerate(points):
        direction_counts = Counter()
        for (x2, y2) in points[idx + 1:]:
            # Compute normalized direction from (x1, y1) to (x2, y2):
            delta_x, delta_y = x2 - x1, y2 - y1
            g = gcd(delta_x, delta_y)
            delta_x, delta_y = delta_x // g, delta_y // g
            if delta_x &lt; 0 or (delta_x == 0 and delta_y &lt; 0):
                 delta_x, delta_y = -delta_x, -delta_y
            # Three identical directions from (x1, y1) means 4 collinear points:
            direction_counts[(delta_x, delta_y)] += 1
            if direction_counts[(delta_x, delta_y)] == 3:
                return True
    return False
</code></pre>

<p>It is still a \$ O(n^2) \$ algorithm, but more robust against
rounding and division by zero errors.</p>

<p>If the points are not guaranteed to be <em>distinct</em> then  identical points need have to be treated separately.</p>
    </div>