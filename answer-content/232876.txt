<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>

<p>The code is OK.</p>

<p>I found 1 bug.</p>

<p>The encapsulation is slightly lacking. You have Account as a class, which is good, but the getters/setters are not required and you have better methods to interact with it.</p>

<p>On encapsulation, you need to encapsulate a set of accounts and the "next account number" into a class (maybe Bank). Currently, you set up a vector of accounts and then have to remember to set the next highest account number back in Account.</p>

<p>I dislike the way you get user interaction inside a stream operator (input). I would change that and use stream operators simply for that.</p>

<p>Your main() needs to be broken up a bit to make the code a bit more self-documenting.</p>

<p>I dislike how user input of the account number requires you to then subtract one from the account number before you can use it. This is going to lead to a maintainability error where somebody forgets to subtract one before using the value entered by the user.</p>

<h2>Code Review</h2>

<h3>Using namespace std is bad practice.</h3>

<pre><code>using namespace std;
</code></pre>

<p>See: <a href="https://stackoverflow.com/q/1452721/14065">Why is “using namespace std;” considered bad practice?</a>  </p>

<p>The answers to this question go into a lot of detail about the subject. It is definitely a habit that is hard to break. But one that you should (as detailed in the answers to the above question).</p>

<p>But I hear you ask "Why do all books/articles always start with: <code>using namespace std;</code>?</p>

<p>The answer is context. In a book and/or magazine article the primary purpose is not maintainability but space (or the lack of it). They are prioritizing for space while in real life (or a professional setting) we are prioritizing for maintainability.</p>

<hr>

<h3>Using Global Constant rather than define</h3>

<p>This is a good start.</p>

<pre><code>int MAX = 9999999999;
</code></pre>

<p>But from the context, it also looks like it should be const. Or if you have a C compiler that supports more modern language, <code>constexpr</code>.</p>

<pre><code>int constexpr MAX = 9999999999;
</code></pre>

<p>In general, any globally accessible state should be non-mutable (unless you have a very good reason for it not to be).</p>

<hr>

<h3>Readability:</h3>

<pre><code>    string first_name, second_name;
</code></pre>

<p>Please, one variable per line. I have not come across a coding standard that does not emphasize this. We are not trying to win competitions on the least vertical space we can use. The whole point of using a high-level language is easier maintainability. One variable per line will help with that.</p>

<pre><code>    std::string     first_name;
    std::string     second_name;
</code></pre>

<hr>

<h3>Avoid getter/setter</h3>

<pre><code>    int getAccNo();
    double getBalance();
    string getGender();
    string getFirstName();
    string getSecondName();

    void setBalance(double);
    void setGender(string);
    void setFirstName(string);
    void setSecondName(string);
</code></pre>

<p>These break encapsulation.</p>

<p>Yes sure, it is better than making the variables public. But what are you trying to archive? Getters and setters are good for property bags (property bag =&gt; your class is just a set of unrelated objects being transported together) not for class objects where the state represents a thing.</p>

<pre><code>    a.setName(a.getName() + " Tool"); // Is this a valid use case?
</code></pre>

<p>If you have a function that retrieves the state, modifies the state, then puts the new state back, should that functionality not be a part of the class? This is why methods tend to be actions that are applied to the object.</p>

<p>Like these methods:</p>

<pre><code>    void deposit(double);
    void withdraw(double);
    void transfer(Account, double);
</code></pre>

<p>These methods are great.</p>

<p>If we analyze why you have getters and setters:</p>

<p>Methods used for printing:</p>

<pre><code> getBalance
 getGender
 getFirstName
 getSecondName
</code></pre>

<p>Methods used for passing in data:</p>

<pre><code> setBalance
 setGender
 setFirstName
 setSecondName
</code></pre>

<p>Validating that an amount can be added/withdrawn:</p>

<pre><code> getBalance
</code></pre>

<p>Used in constructor to validate input:</p>

<pre><code> setBalance
 setFirstName
 setSecondName
</code></pre>

<p>So you have 8 functions but only 4 primary use cases. The validation done by the constructor is a bit primitive and may as well be done by the constructor. The output operator (printing should be a friend anyway) is part of the public API for the Account class. The input operator similarly should be part of the public API but can more efficiently use the constructor and a swap operator to achieve the same results.</p>

<p>So I think the only valid use case is 'Validating that an amount can be added/withdrawn', which deserves its own method to make it clear what you are doing and the result of the action.</p>

<p>I'll go into more detail below when I re-design the class. See below.</p>

<hr>

<h3>Avoid silently failing checks</h3>

<p>The following appears to fail if no valid number is passed in:</p>

<pre><code>    static void setCurAccNo(int No){
        if(No &gt; 0)
            CurAccNo = No;
    }
</code></pre>

<p>Silent failure is the enemy of all coders. Make this scream and holler on failure as something has gone wrong. I would throw an exception on failure to make the application quit.</p>

<hr>

<h3>Currency should be integers</h3>

<p>When talking about representing money, doubles are a terrible way to go.</p>

<pre><code>    double getBalance();
</code></pre>

<p>The trouble is that they have rounding errors. You should use an integer value. If this is for American currency with dollars and cents then record the number of cents. When you display it you can convert to dollars by dividing by 100. But never store currency in a double.</p>

<hr>

<h3>Enum when you have a small subset of valid values</h3>

<p>Is a gender a string?</p>

<pre><code>    string getGender();
</code></pre>

<p>Maybe this is my old world bias showing here. I am assuming a small number of known versions.</p>

<p>What are you trying to store and why? Is it to help with fraud detection?</p>

<p>The reason I would not use a string is that it allows too many variants which could look valid under programmer scrutiny but are not actually valid inputs for the system.</p>

<pre><code> "f" or "F" or "Female" or "female" or "FEMALE"
 "m" or "M" or "Male" or "male" or "MALE" or 
 etc
</code></pre>

<p>These would all look valid to casual inspection. I think a better option would be an enum.</p>

<p>On the counter side of the argument would be the ability of the system to adapt to alternative gender types that had not been considered at the time the application was first written.</p>

<hr>

<h3>Stream formatting</h3>

<p>You want a different type of streaming to normal streaming when printing to a file.</p>

<pre><code>    friend istream&amp; operator &gt;&gt; (istream&amp; in, Account &amp;acc);
    friend ostream&amp; operator &lt;&lt; (ostream&amp; out, Account &amp;acc);

    friend ifstream&amp; operator &gt;&gt; (ifstream&amp; in, Account &amp;acc);
    friend ofstream&amp; operator &lt;&lt; (ofstream&amp; out, Account &amp;acc);
</code></pre>

<p>This effect is normally achieved with formatters. The account object would always be treated the same when printed to a stream. <strong>Because</strong> just because what you have locally is a reference to a stream does not mean it is not a file stream. This decision is made at compile time (not runtime). So you can definitely get different behaviors than expected.</p>

<p>To solve for this, you create "Format" objects which know how to format an account for a stream. You may have a "pretty print" format or a "pine print" format for printing to different types of forms, etc.</p>

<pre><code> std::cout &lt;&lt; PrettyPrintFormat(acc) &lt;&lt; "\n";
 file      &lt;&lt; LinePrintFormat(acc) &lt;&lt; "\n";
</code></pre>

<hr>

<h3>Bug</h3>

<p>Bug:</p>

<pre><code>void Account::transfer(Account other, double value)
{
    balance -= value ;
    other.balance += value;
}
</code></pre>

<p>You are passing the account by value.<br>
You have modified the copy of the account, not the original account.</p>

<hr>

<h3>Don't use interactions when streaming.</h3>

<p>Asking for user interaction as part of the streaming processes?</p>

<pre><code>istream&amp; operator &gt;&gt; (istream&amp; in, Account &amp;acc){
    string first_name, second_name;
    string gender;
    double balance;

    cout &lt;&lt; "Enter First Name: "; cin &gt;&gt; first_name;
    cout &lt;&lt; "Enter Second Name: "; cin &gt;&gt; second_name;
    cout &lt;&lt; "Enter Gender (M / F): "; cin &gt;&gt; gender;
    cout &lt;&lt; "Enter Initial Balance: "; cin &gt;&gt; balance;

    acc.setFirstName(first_name);
    acc.setSecondName(second_name);
    acc.setGender(gender);
    acc.setBalance(balance);

    return in;
}
</code></pre>

<hr>

<h3>Evil</h3>

<p>Dastardly</p>

<pre><code>bool isEmpty(ifstream&amp; pFile)
{
    return pFile.peek() == ifstream::traits_type::eof();
}
</code></pre>

<p>You are subverting the primary pattern used by all other developers. This is going to lead to errors in the long run. Please stick to established patterns.</p>

<p>This is where your dastardly pattern is used.</p>

<pre><code>    while(!ifs.eof() &amp;&amp; !isEmpty(ifs)){
        Account acc;
        ifs &gt;&gt; acc;

        Accounts.push_back(acc);
    }
</code></pre>

<p>It doesn't read that poorly, but it still makes it look wrong as most people are not expecting <code>isEmpty()</code> to peek. As such, you are going to go make them check. But it still looks better if you use the normal pattern:</p>

<pre><code>    Account acc;
    while(ifs &gt;&gt; acc) {
        Accounts.push_back(acc);
    }
</code></pre>

<p>Also you can take this a step further. You don't even need the loop. Just initialize the account vector with iterators:</p>

<pre><code>    std::ifstream        ifs("BankingSystem.txt");
    std::vector&lt;Account&gt; Accounts(std::istream_iterator&lt;Account&gt;{ifs}, std::istream_iterator&lt;Account&gt;{});
</code></pre>

<p>Done. Standard patterns are nice.</p>

<hr>

<h3>return bool</h3>

<p>The use of an if/then to return a bool.</p>

<pre><code>bool func() {
    if (cond) {return true;}
    else      {return false;}
}
</code></pre>

<p>Can be simplified to:</p>

<pre><code>bool func {return cond;}
</code></pre>

<p>So you can simplify this:</p>

<pre><code>bool Valid(unsigned int AccNo, vector&lt;Account&gt; Accounts){
    if(AccNo &lt;= Accounts.size() &amp;&amp; AccNo &gt; 0 &amp;&amp; Accounts[AccNo].isOpen())
        return true;
    return false;
}
</code></pre>

<hr>

<h3>Encapsulation</h3>

<p>Hmm:</p>

<pre><code>    Account::setCurAccNo(Accounts.size());
</code></pre>

<p>Forcing initialization of some global state independently of loading the state. This is a bug waiting to happen. Your account state and the next number need to be combined into their own class.</p>

<pre><code>    class Bank
    {
          // Some accounts.
          // Some state about the next valid bank account number.
    };
</code></pre>

<p>There is a dependency between <code>Accounts</code> and <code>Account::CurAccNo</code> you need to formalize and protect this dependency.</p>

<hr>

<h3>Prefer "\n" over std::endl</h3>

<p>Prefer <code>"\n"</code> over <code>std::endl</code>.</p>

<pre><code>    while(true){
        cout &lt;&lt; "|=============================|" &lt;&lt; endl;
        cout &lt;&lt; "|       WELCOME TO            |" &lt;&lt; endl;
        cout &lt;&lt; "|          RANDOM BANK        |" &lt;&lt; endl;
        cout &lt;&lt; "|=============================|" &lt;&lt; endl;

        cout &lt;&lt; endl;
</code></pre>

<p>Did you really want to force a flush after each line? Why? Don't do it. This is what leads to all the slowdowns in the C++ streams unnecessarily flushed by the engineer. The streams will always flush themselves at the correct time. You should only force a flush if you need to (unless you are very experienced and have done the tests to prove it).</p>

<hr>

<h3>Self-documenting code</h3>

<p>Long switch (or multi-branch if/else) statements are a pain to read.</p>

<p>This is where self-documenting code comes in. Each switch can call a function with a nice name so that you know what the option is doing.</p>

<pre><code>        if(option == "1"){
            Account acc;
            cin &gt;&gt; acc;

            if(Accounts.size() != 0)
                ofs &lt;&lt; endl;

            Accounts.push_back(acc);
            ofs &lt;&lt; acc;

            cout &lt;&lt; "Account Opened Successfully!" &lt;&lt; endl;
            cout &lt;&lt; "Your Account Number is " &lt;&lt; acc.getAccNo() &lt;&lt; endl;
        }
        etc...

        // More like this:

        switch(option) {
            case 1: loadAccount(); break;
            case 2: closeAccount(); break;
            etc...
</code></pre>

<hr>

<h3>Notes</h3>

<pre><code>        if(option == "1"){
</code></pre>

<p>This seems like the perfect place to ask those questions you put in the input operator.
                Account acc;<br>
                cin &gt;&gt; acc;</p>

<hr>

<h3>Range-based for loop</h3>

<pre><code>        else if(option == "3"){
            cout &lt;&lt; endl;

            for(unsigned int i = 0; i &lt; Accounts.size(); i++)
                cout &lt;&lt; Accounts[i] &lt;&lt; endl;
</code></pre>

<p>You might want to instead look at using a range-based for loop:</p>

<pre><code>            for(auto const&amp; account: Accounts) {
                std::cout &lt;&lt; account &lt;&lt; "\n";
            }
</code></pre>

<hr>

<h1>Alternative</h1>

<pre><code>#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;

enum Action {BADAction, OpenAccount, CloseAccount, ShowAllAccounts, DepositInAccount, WithdrawFromAccount, TransferToAnAccount, ShowBalance, ShowAllTransactions, Quit};

std::istream&amp; operator&gt;&gt;(std::istream&amp; str, Action&amp; action)
{
    int value;
    if (str &gt;&gt; value &amp;&amp; value &gt;= 1 &amp;&amp; value &lt;= 9) {
        action = static_cast&lt;Action&gt;(value);
    }
    else {
        action = BADAction;
    }
    return str;
}
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, Action const&amp; action)
{
    return str &lt;&lt; static_cast&lt;int&gt;(action);
}

class AccountPrettyPrint;
class Account
{
    // Pretty printing is tightly coupled to the
    // state of the class. So we are noting this
    // by making it a friend of the class.
    friend class AccountPrettyPrint;

    std::string         firstName;
    std::string         surName;
    int                 balance;
    bool                open;
    int                 accountNo;

    public:
        Account();
        Account(std::string const&amp; firstName, std::string const&amp; surName, int balance);
        Account(Account const&amp;)             = default;
        Account(Account&amp;&amp;)                  = default;
        Account&amp; operator=(Account const&amp;)  = default;
        Account&amp; operator=(Account&amp;&amp;)       = default;

        void swap(Account&amp; other) noexcept;
        friend void swap(Account&amp; lhs, Account&amp; rhs) {lhs.swap(rhs);}
        friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, Account const&amp; acc);
        friend std::istream&amp; operator&gt;&gt;(std::istream&amp; str, Account&amp; acc);
};

struct AccountPrettyPrint
{
    Account const&amp;    acc;
    AccountPrettyPrint(Account const&amp; acc): acc(acc) {}

    std::ostream&amp; print(std::ostream&amp; str) const
    {
        return str  &lt;&lt; "Print Account Nicely: " &lt;&lt; acc.firstName &lt;&lt; "\n"
                    &lt;&lt; " $" &lt;&lt; (acc.balance / 100)
                    &lt;&lt; "." &lt;&lt; std::setw(2) &lt;&lt; std::setfill('0') &lt;&lt; (acc.balance % 100)
                    &lt;&lt; "\n";
    }
    friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, AccountPrettyPrint const&amp; pp)
    {
        return pp.print(str);
    }
};

class Bank
{
    static std::vector&lt;Account&gt;        accounts;
    public:
        static int getNextAccountNumber()   {return accounts.size();}
        static void loadAccount(std::string const&amp; fileName);
};

Account::Account()
    : balance(0)
    , open(false)
    , accountNo(-1)
{}

Account::Account(std::string const&amp; firstName, std::string const&amp; surName, int balance)
    : firstName(firstName)
    , surName(surName)
    , balance(balance)
    , open(true)
    , accountNo(Bank::getNextAccountNumber())
{}

void Account::swap(Account&amp; other) noexcept
{
    using std::swap;
    swap(firstName, other.firstName);
    swap(surName,   other.surName);
    swap(balance,   other.balance);
    swap(open,      other.open);
    swap(accountNo, other.accountNo);
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, Account const&amp; acc)
{
    return str  &lt;&lt; acc.firstName.size() &lt;&lt; " " &lt;&lt; acc.firstName
                &lt;&lt; acc.surName.size() &lt;&lt; " " &lt;&lt; acc.surName
                &lt;&lt; acc.balance &lt;&lt; " "
                &lt;&lt; acc.open &lt;&lt; " "
                &lt;&lt; acc.accountNo &lt;&lt; "\n";
}

std::istream&amp; operator&gt;&gt;(std::istream&amp; str, Account&amp; acc)
{
    Account     tmp;
    std::size_t size;
    char        ignore;
    if (str &gt;&gt; size) {
        tmp.firstName.resize(size);
        str.read(&amp;ignore, 1);
        str.read(&amp;tmp.firstName[0], size);
    }
    if (str &gt;&gt; size) {
        tmp.surName.resize(size);
        str.read(&amp;ignore, 1);
        str.read(&amp;tmp.firstName[0], size);
    }
    if (str &gt;&gt; tmp.balance &gt;&gt; tmp.open &gt;&gt; tmp.accountNo) {
        // Only change the state if the object was correctly read from the stream.
        acc.swap(tmp);
    }
    return str;
}

std::vector&lt;Account&gt; Bank::accounts;

void Bank::loadAccount(std::string const&amp; fileName)
{
    std::ifstream           logFile(fileName);
    std::vector&lt;Account&gt;    load(std::istream_iterator&lt;Account&gt;{logFile},
                                 std::istream_iterator&lt;Account&gt;{});

    accounts = std::move(load);
}
oid reportError()
{
    std::cerr &lt;&lt; "Unrecognized user input\n";
    std::cerr &lt;&lt; "Flushing Input stream\n";
    std::cin.clear();
    cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n');
}
void openAccount()
{
    // Get user input
    // Bank::openAccount(userInput);
}
void closeAccount()
{
    // get user input
    // Bank::closeAccount(userInput);
}
void showAllAccounts()
{
    // Bank::showBalance()
}
void depositInAccount()
{
    // getUserInput
    // Bank::deposit(account, value)
}
void withdrawFromAccount()
{
    // get user input
    // Bank::withdraw(account, value);
}
void transferToAnAccount()
{
    // get user input
    // Bank::transfer(srcAccount, dstAccount, value);
}
void showBalance()
{
    // get user input
    // Bank::showBalance(account);
}
void showAllTransactions()
{
    // Bank::showAllTransactions();
}

void displayMenu()
{
    std::cout &lt;&lt; "Choose an Option:\n"
              &lt;&lt; "\t" &lt;&lt; OpenAccount            &lt;&lt; " To open an Account\n"
              &lt;&lt; "\t" &lt;&lt; CloseAccount           &lt;&lt; " To close an Account\n"
              &lt;&lt; "\t" &lt;&lt; ShowAllAccounts        &lt;&lt; " To show all accounts\n"
              &lt;&lt; "\t" &lt;&lt; DepositInAccount       &lt;&lt; " To deposit in an account\n"
              &lt;&lt; "\t" &lt;&lt; WithdrawFromAccount    &lt;&lt; " To withdraw from an account\n"
              &lt;&lt; "\t" &lt;&lt; TransferToAnAccount    &lt;&lt; " To transfer to an account\n"
              &lt;&lt; "\t" &lt;&lt; ShowBalance            &lt;&lt; " To show account balance\n"
              &lt;&lt; "\t" &lt;&lt; ShowAllTransactions    &lt;&lt; " To show all transactions\n"
              &lt;&lt; "\t" &lt;&lt; Quit                   &lt;&lt; " To quit application\n";
}

int main(int argc, char* argv[])
{
    if (argc != 2) {
        std::cerr &lt;&lt; "Failed to start: CLA &lt;transaction Log Name&gt;\n";
        exit(1);
    }
    Bank::loadAccount(argv[1]);

    Action  userAction;
    do {
        displayMenu();
        std::cin &gt;&gt; userAction;
        switch(userAction) {
            case BADAction:             reportError();          break;
            case OpenAccount:           openAccount();          break;
            case CloseAccount:          closeAccount();         break;
            case ShowAllAccounts:       showAllAccounts();      break;
            case DepositInAccount:      depositInAccount();     break;
            case WithdrawFromAccount:   withdrawFromAccount();  break;
            case TransferToAnAccount:   transferToAnAccount();  break;
            case ShowBalance:           showBalance();          break;
            case ShowAllTransactions:   showAllTransactions();  break;
            case Quit:                  /* Nothing */           break;
        }
    }
    while(userAction != Quit);
}
</code></pre>
    </div>