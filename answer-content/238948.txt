<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would tag your <code>struct</code> in addition to, if not instead of, using a <code>typedef</code>:</p>

<pre><code>struct v2
{
    int x, y;
};
// typedef struct v2 v2;
</code></pre>

<p>Then you can use <code>struct v2</code> wherever you are using <code>v2</code>. This makes it clear that <code>v2</code> is a structure.</p>

<p>I think you should create a symbolic <code>SUBGRID_SIZE</code> instead of using <code>3</code> here:</p>

<pre><code>x0 = (pos.x / 3) * 3;
y0 = (pos.y / 3) * 3;

for (i = 0; i &lt; 3; ++i)
    for (j = 0; j &lt; 3; ++j)
        if (board[i + y0][j + x0] == v)
            return 0;
</code></pre>

<p>This would make it more obvious about what you're dealing with. I would put <code>GRID_SIZE</code> and <code>SUBGRID_SIZE</code> next to each other, and then use an <code>#if</code> to check if they're valid:</p>

<pre><code>#define GRID_SIZE 9
#define SUBGRID_SIZE 3

#if SUBGRID_SIZE * SUBGRID_SIZE != GRID_SIZE
# error grid size and subgrid size dont match
#endif
</code></pre>

<p>You might use <code>printf("\n");</code> or <code>putchar('\n');</code> instead of <code>puts("");</code>. The compiler is likely to optimize the former into <code>puts("");</code> anyway, and the second may be faster.</p>

<p>I like that you've used <code>const</code> everywhere that you're not going to modify a variable. This eliminates chances to make mistakes.</p>

<p>Your formatting is very good. It is consistent, too.</p>

<p>Your code is also well-commented. The only thing that was slightly non-obvious you've commented:</p>

<pre><code>/* 0 represents an empty cell */
</code></pre>

<p>Being pedantic with you, your code has zero warnings with <code>-Wall -Wextra -std=c99 -pedantic</code>.</p>
    </div>