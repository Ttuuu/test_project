<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use type hints for parameters and members</h2>

<pre><code>def __init__(self, row, column):
    self.value = 0
    self.row = row
    self.column = column
    self.block = (row // 3) * 3 + column // 3
    self.permitted_values = set([])
</code></pre>

<p>can be</p>

<pre><code>def __init__(self, row: int, column: int):
    self.value: int = 0
    self.row = row
    self.column = column
    self.block: int = (row // 3) * 3 + column // 3
    self.permitted_values: Set[int] = set()
</code></pre>

<h2>Data structures</h2>

<p>These:</p>

<pre><code>    self.rows = {i: [] for i in range(9)}
    self.columns = {i: [] for i in range(9)}
    self.blocks = {i: [] for i in range(9)}
</code></pre>

<p>aren't a particularly useful representation of index-to-list. The index is contiguous, integral and zero-based, so you can simply represent them as a list rather than a dictionary; <code>i</code> can index into the list. Similarly,</p>

<pre><code>[self.fields[i].value for i in range(81)]
</code></pre>

<p>would probably become</p>

<pre><code>[f.value for f in self.fields]
</code></pre>

<h2>Range</h2>

<pre><code>set([i + 1 for i in range(9)])
</code></pre>

<p>should just be</p>

<pre><code>set(range(1, 10))
</code></pre>
    </div>