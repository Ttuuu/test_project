<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Order of anything never seems to matter, so I will use <code>[]</code> instead of <code>Seq</code>.</p>

<p><code>go</code> needs no <code>ok_bases</code> accumulator - see <code>foldl</code> vs <code>foldr</code>.</p>

<p>The type signatures on your helper functions are needlessly general. In fact, I'd just localize the helpers.</p>

<pre><code>knapsack :: (Ord a, Num a) =&gt; a -&gt; [a] -&gt; [[a]] -&gt; [[a]]
knapsack n addenda bases
  | null addenda = fst $ prune bases
  | null bases = go $ grow [[]]
  | otherwise  = go bases
    where
      go [] = []
      go bases = let (yes, maybe) = prune $ grow bases
                 in yes ++ go maybe
      grow = concatMap $ \base -&gt; map (:base) addenda
      prune = foldr partitioner (empty, empty)
      partitioner base = case compare n $ sum base of
        EQ -&gt; first (base :)
        GT -&gt; second (base :)
        LT -&gt; id
</code></pre>

<p><code>| null bases = go $ grow [[]]</code> can go away once the user recognizes that an empty list of starting bases means no solutions, while he probably wants an empty starting base. (Are you sure we shouldn't prune the singletons?)</p>

<p><code>| null addenda = fst $ prune bases</code> &lt;- when there's nothing to put in, you check whether the starting bases are already enough and then give up. Shouldn't you then always check whether the starting bases are already enough before involving <code>addenda</code>?</p>
    </div>