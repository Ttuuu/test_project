<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You've inserted some safety checks across your code, which is nice, but you are silently swallowing these errors. You should log something into the console when a check failed. For instance, you can <code>console.error(new Error("[...your message here...]"))</code> when the file parameter is not passed. Creating a new Error object instead of just logging a string gives you a convenient stack trace to examine when something weird happens.</li>
<li>You should use a different name for the video element. Shadowing the <code>HTMLMediaElement</code> makes the code somewhat confusing to read.</li>
<li>The method name says <code>setTextContent</code>, but <em>you are setting <code>innerHTML</code>!</em> You should avoid using <code>innerHTML</code> when <code>textContent</code> can be used instead because setting <code>innerHTML</code> unnecessarily can open you to a wide range of XSS attacks. If you absolutely have to set <code>innerHTML</code>, at least try to sanitize the HTML first.</li>
<li>I don't think you should be monkey-patching the HTMLMediaElement prototype. It's bad practice to modify objects you do not own.</li>
<li><em>"Resolve promise, return subtitle contents"</em> Well, technically you're not resolving any <code>Promise</code>s, but developers keep inventing new technical terms so I don't really know whether the word "promise" refers to anything other than <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="nofollow noreferrer">"[an] object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value"</a>.</li>
<li>The <code>sub</code> element is for <em>subscripts</em>, not for subtitles. Using a <code>div</code> element is better in this case. <em>It's better to say nothing than to lie.</em></li>
<li>Maybe it's time to write ES6 and beyond code?</li>
</ul>
    </div>