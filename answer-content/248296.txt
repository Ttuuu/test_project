<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is inefficient and overengineered because the code</p>
<ol>
<li><p>loops through the transactions several times when once would be enough, both by the multiple filters and the two separate loops.</p>
</li>
<li><p>uses more memory than needed, partly due to the above and partly due to the creation of the array "filteredTransactions"</p>
</li>
<li><p>calls <code>moment()</code> up to twice to convert the timestamp, when once would suffice.</p>
</li>
</ol>
<p>It is less maintainable / understandable by others in the team because</p>
<ol start="4">
<li>some may not commonly use map/filter and most may not commonly use <code>reduce</code> which is particularly complex. (See also any article on <a href="https://dzone.com/articles/software-design-principles-dry-and-kiss" rel="nofollow noreferrer">KISS</a>)</li>
</ol>
<p>You are overthinking this with filter and reduce and consuming more memory and cpu than needed in the process. If I got this code I would think that the interviewee was trying to impress me that they know about <code>filter</code> and <code>reduce</code> but the code ends up way longer and more complex than needed.</p>
<p>A simpler version would be</p>
<pre><code>sum = 0
transactions.forEach(t =&gt; {
    if (t.category == category) {
        let d = moment(transactionDate)
        if (d.isSameOrAfter(start) &amp;&amp; d.isBefore(end)) {
            sum += d.amount
        }
    }
})
return sum
</code></pre>
<p>This code is half the lines and almost no intermediate variables.</p>
<p>It does not require the next guy to understand filter, map or reduce.</p>
<p>It does not look at any transaction more than once.</p>
<p>It does not create 3 intermediate lists of transactions / numbers.</p>
<p>See also <a href="https://stackoverflow.com/questions/45691907/is-using-several-filter-calls-on-a-big-array-bad-for-performance-in-javascrip">this</a>.</p>
    </div>