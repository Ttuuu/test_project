<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Rather than maintaining the state of the iteration using three variables <code>val</code>, <code>i</code>, and <code>neg_toggle</code>, it would be more elegant to write a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer">generator</a>.  Then, the state of the iteration would be maintained by the flow of the execution of the generator itself.</p>

<pre><code>def zoom_out(center):
    decr = center
    incr = center + 1
    while True:
        yield decr
        decr -= 1
        yield incr
        incr += 1

for n in zoom_out(24):
    if n in (30, 50, 90):
        break
    print(n)
</code></pre>

<p>Furthermore, fancy iteration can often be expressed more elegantly using <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a>.  Here, I'd take advantage of <code>itertools.count()</code> to implement the generator, and <code>itertools.takewhile()</code> to detect when to stop executing the infinite generator.</p>

<pre><code>from itertools import count, takewhile

def zoom_out(center):
    decr = count(center, -1)
    incr = count(center + 1)
    while True:
        yield next(decr)
        yield next(incr)

for n in takewhile(lambda n: n not in (30, 50, 90), zoom_out(24)):
    print(n)
</code></pre>
    </div>