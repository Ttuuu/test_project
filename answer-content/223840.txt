<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions.  This answers uses the <a href="https://github.com/ericniebler/range-v3" rel="nofollow noreferrer">Range-v3</a> library and assumes</p>

<pre><code>#include &lt;range/v3/all.hpp&gt;

namespace view = ranges::view;
</code></pre>

<ol>
<li><p>Please include the <code>#include</code>s and supply a small test program in the future.  You probably have written them anyway, so why not post them to save reviewers' time? :)</p></li>
<li><p><code>int</code> may be too small for indexes.  Consider using <code>std::size_t</code>.  You can define a type alias for flexibility.</p>

<pre><code>using index_t = std::size_t;
</code></pre></li>
<li><p>The type <code>std::vector&lt;std::vector&lt;index_t&gt;&gt;</code> occurs many times.  Save time by writing</p>

<pre><code>using rule_t = std::vector&lt;index_t&gt;
using rules_t = std::vector&lt;rule_t&gt;;
</code></pre></li>
<li><p>The concept "<span class="math-container">\$n \times n\$</span> board" only makes sense when <span class="math-container">\$n\$</span> is a positive integer.  Therefore, enforce the pre-condition <span class="math-container">\$n \ge 1\$</span>.  Also, the name <code>x</code> is a bit vague.  <code>size</code> may be better.</p>

<pre><code>rules_t rules(index_t size)
{
    if (size == 0)
        throw std::invalid_argument{"..."};
    // ...
}
</code></pre></li>
<li><p><code>rules(1)</code> currently returns <code>{{0}, {0}, {0}, {0}}</code>, which is definitely wrong.  It should return <code>{{0}}</code>.  Your general logic is "<span class="math-container">\$n\$</span> rows + <span class="math-container">\$n\$</span> columns + <span class="math-container">\$2\$</span> diagonals", which only applies to <span class="math-container">\$n \ge 2\$</span>.  The easiest approach would be a special case:</p>

<pre><code>rules_t rules(index_t size)
{
    // ...
    else if (size == 1)
        return {{0}};
}
</code></pre></li>
<li><p>Following the previous bullet, why not make separate functions to make your logic clear?</p>

<pre><code>rules_t rules(index_t size)
{
    // ...
    else {
        auto rows = rules_row(size);
        auto columns = rules_column(size);
        auto diagonals = rules_diagonal(size);
        return ranges::to&lt;rules_t&gt;(view::concat(rows, columns, diagonals));
    }
}
</code></pre>

<p>where <code>view::concat</code> concatenates the three vectors and <code>ranges::to</code> converts the result to the desired return type.  (Note that <code>view::concat</code> is disabled with rvalues to prevent dangling iterators, so we first store the subvectors.)</p></li>
<li><p>The <code>rules_row</code> function is easy to write:</p>

<pre><code>rules_t rules_row(index_t size)
{
    return view::ints(index_t(0), size * size) | view::chunk(size);
}
</code></pre>

<p><code>view::ints</code> generate a left-inclusive sequence of integers <code>{0, 1, 2, ..., size * size - 1}</code>, and <code>view::chunk(size)</code> breaks it into chunks each of size <code>size</code>.</p></li>
<li><p>The <code>rules_column</code> function is a bit tricky, because the Range library does not provide a function like <code>chunk</code> that splits like this.  We do have a function <code>stride</code>, so we can write a manual "loop":  (it took me quite a while to figure this out, so tell me if there is a better way!)</p>

<pre><code>rules_t rules_column(index_t size)
{
    return view::ints(index_t(0), size) |
               view::transform([=](index_t col) {
                   return view::ints(index_t(col), size * size) | view::stride(size);
               });
}
</code></pre>

<p><code>view::ints(index_t(0), size)</code> generates the column numbers.  Each of them is passed to the lambda.  The lambda returns the corresponding rule for each column.</p></li>
<li><p>The <code>rules_diagonal</code> function is moderately simple:</p>

<pre><code>rules_t rules_diagonal(index_t size)
{
    return {
        view::ints(index_t(0), size) |
            view::transform([=](index_t r) { return r * (size + 1); }),
        view::ints(index_t(1), size + 1) |
            view::transform([=](index_t r) { return r * (size - 1); })
    };
}
</code></pre>

<p>Here, we always have two rules: one for the primary diagonal</p>

<pre><code>{0 * size + 0, 1 * size + 1, 2 * size + 2, ..., (size - 1) * size + (size - 1)}
</code></pre>

<p>which is equivalent to</p>

<pre><code>{0, 1, 2, ..., size - 1} * (size + 1)
</code></pre>

<p>and the other for the secondary diagonal</p>

<pre><code>{size - 1, 2 * size - 2, 3 * size - 3, ... size * size - (size - 1)}
</code></pre>

<p>which is equivalent to</p>

<pre><code>{1, 2, 3, ..., size + 1} * (size - 1)
</code></pre></li>
<li><p>Putting everything together:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;range/v3/all.hpp&gt;

namespace view = ranges::view;

using index_t = std::size_t;
using rule_t = std::vector&lt;index_t&gt;;
using rules_t = std::vector&lt;rule_t&gt;;

rules_t rules_row(index_t size)
{
    return view::ints(index_t(0), size * size) | view::chunk(size);
}

rules_t rules_column(index_t size)
{
    return view::ints(index_t(0), size) |
               view::transform([=](index_t col) {
                   return view::ints(index_t(col), size * size) | view::stride(size);
               });
}

rules_t rules_diagonal(index_t size)
{
    return {
        view::ints(index_t(0), size) |
            view::transform([=](index_t r) { return r * (size + 1); }),
        view::ints(index_t(1), size + 1) |
            view::transform([=](index_t r) { return r * (size - 1); })
    };
}

rules_t rules(index_t size)
{
    if (size == 0)
        throw std::invalid_argument{"A board cannot have size zero"};
    else if (size == 1)
        return {{0}};
    else {
        auto rows = rules_row(size);
        auto columns = rules_column(size);
        auto diagonals = rules_diagonal(size);
        return view::concat(rows, columns, diagonals);
    }
}
</code></pre>

<p>(<a href="https://wandbox.org/permlink/Np1OSewSm5HTW2hr" rel="nofollow noreferrer">live demo</a>, tests the function for <code>size = 1, 2, 3, ..., 10</code>)</p></li>
</ol>
    </div>