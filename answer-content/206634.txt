<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>FloodFill memory hog</h1>
<p>Using a library should reduce your source code size and create a higher performance app. If this is not the case then you should not be using the library.</p>
<p>Using react to hold the pixel state is beyond ludicrous. Just for a 50 by 50 square you create 2500 elements, and the same number of Javascript objects, and more under the hood, plus all the supporting code to hold and render pixels.</p>
<p>A typical image that you would want to fill is in the 1024 by 1024+ size. Most devices would have a hard time creating 1 million unique elements, and thats a low res image.</p>
<h2>The fill algorithm</h2>
<p>Forget the recursive fill, for anything but a small image there is a high probability that you will overflow the call stack. Also the recursion captures the function state meaning a large memory hit for each pixel you branch at.</p>
<p>The iterative fill is better but you are pushing to the stack the wrong way.</p>
<p>You push all neighboring pixels and check if they are valid when you pop them. This means that the stack grows a lot larger than it should.</p>
<p>Rather you should push only pixels that can be filled to the stack, doing the test before you push to the stack, reducing max stack size and the number of times you loop the fill function.</p>
<h2>Holding state</h2>
<p>The only state you need to hold are the options, the pixel buffer, and the color set. That is better handled with simple javascript object and a typedArray (in the form of a <code>ImageData</code> object). A canvas can hold the pixels. Two functions to handle the options (read and write), a reset function and a fill function. The state is not at all complex and the UI very simple, I can not imagine why you wanted to use react to implement it?</p>
<h2>My opinion</h2>
<p>You need to know when to use a high level UI library and when not to. The flood fill is a definite case of not. You could have just done the UI using react but the pixel data load is in the millions and not what react is designed to do.</p>
<h2>Example</h2>
<p>The example look identical to your demo, but is much much quicker. It uses a canvas to display the pixels, and keeps the pixel state in a <code>ImageData</code> array that uses 4 bytes per pixel (rather than an HTML element and an JS object)</p>
<p>It only implements the iterative flood fill using your method. Rather than push all neighboring pixels to the stack it check if pixels can be pained before pushing to the stack. Also an array of pixels is actually a 1D array so it stores pixel coordinates as a single index rather than an array of coordinates, further saving space.</p>
<p>I did not create a recursive fill as it will crash for large images and its memory growth per pixel is not worth the reduction in code size.</p>
<p>The example starts with a 500*500px bitmap that your app could not handle (well I gave up waiting for it to create the page), By not using react I got a reduction in source code complexity and runtime complexity and memory use.</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>;(()=&gt;{
    function setupUI(opts) {
        function updateUI() {
            widthOfSquareEl.value = opts.pixelSize;
            squaresPerRowEl.value = opts.width;
            numberOfColorsEl.value = opts.numColors;
            includeDiagonalsEl.checked = opts.diagonals;
        }
        
        function getOptionsFromUI() {
            opts.pixelSize = Number(widthOfSquareEl.value);
            opts.width = Number(squaresPerRowEl.value);
            opts.numColors = Number(numberOfColorsEl.value);
            opts.diagonals = includeDiagonalsEl.checked;
        }
        
        resetEl.addEventListener("click", opts.reset); 
        widthOfSquareEl.addEventListener("change", getOptionsFromUI); 
        squaresPerRowEl.addEventListener("change", getOptionsFromUI); 
        numberOfColorsEl.addEventListener("change", getOptionsFromUI); 
        includeDiagonalsEl.addEventListener("change", getOptionsFromUI); 
        
        canvas.addEventListener("click", event =&gt; {
            opts.fill(
                event.offsetX / opts.pixelSize | 0, 
                event.offsetY / opts.pixelSize | 0
            );
        });
        
        updateUI();
        opts.reset();
    }
    
    const options = {
        pixelSize: 1,
        width: 500,
        numColors: 3,
        diagonals: false,
        colors : [],
        ctx : canvas.getContext("2d"),
        randomColor(color) {
            var rand = Math.random() * options.colors.length | 0;
            if((options.colors[rand] | 0) === (color | 0)) { 
                rand = (rand + 1) % options.colors.length;
            }
            return options.colors[rand];
        },
        reset,
        fill,
    };
    
    setupUI(options);
    
    function reset(){
        options.colors.length = 0;
        for (let i = 0; i &lt; options.numColors; i++) { 
            options.colors[i] = (Math.random() * 0xFFFFFF | 0) | 0xFF000000;
        }
        options.ctx.imageSmoothingEnabled = false
        const width = canvas.height = canvas.width = options.width;
        canvas.style.height = canvas.style.width = width * options.pixelSize + "px";   
        options.imgData = options.ctx.getImageData(0, 0, width, width);
        const dat32 = new Uint32Array(options.imgData.data.buffer);
        var i = dat32.length;
        while (i--) { dat32[i] = options.colors[Math.random() * options.numColors | 0] }
        options.ctx.putImageData(options.imgData,0,0);
    }
    
    function fill(x, y) {
        const w = options.ctx.canvas.width;
        const imgData = options.imgData;
        const dat32 = new Uint32Array(imgData.data.buffer);
        const fillColor = dat32[x + y * w];
        const color = options.randomColor(fillColor);
        const canPaint = (idx, x) =&gt; {
            if (idx &lt; 0 || idx &gt;= dat32.length || x &lt; 0 || x &gt;= w) { return false }
            return dat32[idx] === fillColor;
        }    
        const stack = [x + y * w];
        while (stack.length) {
            const idx = stack.pop();
            dat32[idx] = color;
            x = idx % w;
            canPaint(idx - 1, x - 1) &amp;&amp; (stack.push(idx - 1));
            canPaint(idx + 1, x + 1) &amp;&amp; (stack.push(idx + 1));
            canPaint(idx - w, x) &amp;&amp; (stack.push(idx - w));
            canPaint(idx + w, x) &amp;&amp; (stack.push(idx + w));
            if (options.diagonals) {
                canPaint(idx - w - 1, x - 1) &amp;&amp; (stack.push(idx - w - 1));
                canPaint(idx - w + 1, x + 1) &amp;&amp; (stack.push(idx - w + 1));
                canPaint(idx + w - 1, x - 1) &amp;&amp; (stack.push(idx + w - 1));
                canPaint(idx + w + 1, x + 1) &amp;&amp; (stack.push(idx + w + 1));
            }
        }
        options.ctx.putImageData(imgData, 0, 0);
    }
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>#canvas {
  image-rendering: pixelated;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div&gt;
  &lt;p&gt; Instructions: Click on any square. &lt;/p&gt;

  &lt;label&gt;
    Width of square:
    &lt;input type="number" id="widthOfSquareEl" /&gt;
  &lt;/label&gt;
  &lt;br&gt;
  &lt;label&gt;
    Squares per row:
    &lt;input type="number" id="squaresPerRowEl" /&gt;
  &lt;/label&gt;
  &lt;br&gt;
  &lt;label&gt;
    Number of colors:
    &lt;input type="number" id="numberOfColorsEl" /&gt;
  &lt;/label&gt;
  &lt;br&gt;
  &lt;label&gt;
    Include diagonals:
    &lt;input id="includeDiagonalsEl" type="checkbox" /&gt;
  &lt;/label&gt;
  &lt;br&gt;
  &lt;input id="resetEl" type="button" value="Reset" /&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;canvas id="canvas"&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>

    </div>