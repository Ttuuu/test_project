<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Copying the string in step 3 is unnecessary</h2>

<p>You can iterate through the characters of a <code>std::string s</code> using <a href="http://en.cppreference.com/w/cpp/string/basic_string/operator_at" rel="nofollow noreferrer"><code>std::string::operator[]</code></a> and <a href="http://en.cppreference.com/w/cpp/string/basic_string/size" rel="nofollow noreferrer"><code>std::string::size()</code></a>:</p>

<pre><code>for (std::string::size_type pos = 0; pos &lt; s.size(); pos++) {
    char c = s[pos]; // do something with the char now
}
</code></pre>

<p>Alternatively, you can use <code>std::string::iterator</code> to iterate through the string.</p>

<hr>

<h2>Avoid <code>std::endl</code> in favor of <code>\n</code></h2>

<p><a href="https://stackoverflow.com/q/213907/3964927"><code>std::endl</code> flushes the stream, which can cause a loss in performance.</a></p>

<hr>

<h2>Use more whitespace in your code</h2>

<p>It's difficult to read code like <code>for(int i=0;temp[i];++i)</code>. Instead, use more whitespace as in <code>for (int i = 0; temp[i]; ++i)</code>.</p>

<hr>

<p>I would take a different approach to solve the problem. With your approach, you have to iterate through the string at least once to sort it (step 1), then again to remove the whitespace (step 2), then a third time to look for duplicates. If you copy the string in step 3 that's yet another iteration.</p>

<p>You only need to iterate through the string once. Here's one way to do that:</p>

<p>Iterate through the string's characters (skipping the whitespace characters) and put each character in a <code>std::set&lt;char&gt;</code> if you haven't encountered it before. If you've already encountered it (it's in the <code>std::set</code>) put it in a separate <code>std::set</code> of duplicates. Once you've iterated through the string's character's once, you can iterate through the set of duplicates to print them.</p>

<p>Here's a demo:</p>

<pre><code>#include &lt;iostream&gt; 
#include &lt;string&gt;
#include &lt;cctype&gt;
#include &lt;set&gt;

int main() {
    std::string s("Hello world");
    std::set&lt;char&gt; characters;
    std::set&lt;char&gt; duplicates;

    for (std::string::size_type pos = 0; pos &lt; s.size(); pos++) {
        char c = s[pos];

        // std::isspace() accepts an int, so cast c to an int
        if (!std::isspace(static_cast&lt;int&gt;(c))) {
            if (characters.count(c) == 0) {
                characters.insert(c);
            } else {
                duplicates.insert(c);
            }
        }
    }

    std::cout &lt;&lt; "Duplicates: ";

    for (std::set&lt;char&gt;::const_iterator it = duplicates.begin(); it != duplicates.end(); ++it) {
        std::cout &lt;&lt; *it &lt;&lt; " ";
    }

    return 0;
}
</code></pre>

<p>Note that it's better to <strong>use <a href="http://en.cppreference.com/w/cpp/string/byte/isspace" rel="nofollow noreferrer"><code>std::isspace()</code></a> instead of <code>' '</code> to check if a character is whitespace.</strong></p>

<p>If you need to count how many times each character occurs in the string, simply replace <code>std::set&lt;char&gt; duplicates</code> with a <code>std::map&lt;char, int&gt;</code> which maps each character to the number of times it occurs (as shown in <a href="https://codereview.stackexchange.com/a/182330/68618">@TobySpeight's answer</a>).</p>
    </div>