<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're using int as <em>flags</em>, which is what enum stands for! Instead, why don't we define two:</p>

<pre><code>enum Choice
{
    Rock,
    Paper,
    Scissors
}

enum Player
{
    User,
    Computer
}
</code></pre>

<p>Now that you have all the information, let's compute who win a round:</p>

<pre><code>static Player? ComputeWinner(Choice userChoice, Choice computerChoice)
{
    if (userChoice == computerChoice)
        return null;

    switch (computerChoice)
    {
        case Choice.Rock:
            switch (userChoice)
            {
                case Choice.Paper:
                    return Player.User;
                case Choice.Scissors:
                    return Player.Computer;
            }
            break;
        case Choice.Paper:
            switch (userChoice)
            {
                case Choice.Rock:
                    return Player.User;
                case Choice.Scissors:
                    return Player.Computer;
            }
            break;
        case Choice.Scissors:
            switch (userChoice)
            {
                case Choice.Rock:
                    return Player.User;
                case Choice.Paper:
                    return Player.Computer;
            }
            break;
    }

    return null;
}
</code></pre>

<p>What defines a game? A player score, a computer score and a winner. You put it as variables, I would suggest to make a class, named <code>Game</code>. Here we go:</p>

<pre><code>class Game
{
    public int PlayerScore { get; set; }
    public int ComputerScore { get; set; }
    public override string ToString()
    {
        return $"User's Score&lt;{PlayerScore}&gt;\tCom's Score&lt;{ComputerScore}&gt;\n";
    }

    public Player Winner =&gt; PlayerScore &gt; ComputerScore ? Player.User : Player.Computer;
}
</code></pre>

<p>Now the match display:</p>

<pre><code>static void Match(string userInput, Game game)
{
    // Adds some security around user input
    if (!Enum.TryParse(userInput, out Choice userChoice))
    {
        Console.WriteLine($"{userInput} is not valid");
        return;
    }

    // Let the computer pick a value
    var choices = Enum.GetValues(typeof(Choice));
    var random = new Random();
    var comChoice = (Choice)choices.GetValue(random.Next(choices.Length));

    Console.WriteLine($"Computer chose {comChoice}");

    switch (ComputeWinner(userChoice, comChoice))
    {
        case Player.User:
            Console.WriteLine("User won");
            game.PlayerScore++;
            break;
        case Player.Computer:
            Console.WriteLine("Computer won");
            game.ComputerScore++;
            break;
        default:
            Console.WriteLine("Tie");
            break;
    }
}
</code></pre>

<p>And here's the wrapping, in order to play as many games as you wish:</p>

<pre><code>public static void PlayGame()
{
    Console.WriteLine("Welcome Let's play Rock Paper Scissors");

    int around = SetRound();

    // initiate a new Game
    var game = new Game();

    // Allowed since we put a "break" if the answer is N
    while (true)
    {
        while (game.PlayerScore &lt; around &amp;&amp; game.ComputerScore &lt; around)
        {

            var userInput = PlayerInput();
            Console.WriteLine("\nPlayer chose {0}", userInput);

            Match(userInput, game);

            Console.WriteLine();
        }

        Console.WriteLine($"{game.Winner} won !");

        Console.WriteLine("Do you want to play again? y/n ");
        var again = Console.ReadLine()?.ToUpper();
        if (again == "N")
        {
            Console.WriteLine("Good Bye");
            break;
        }
        // Clear the screen if the user want to play more
        Console.Clear();

    }
}
</code></pre>

<p>Which gives:</p>

<pre><code>public class RockPaperScissor
{
    class Game
    {
        public int PlayerScore { get; set; } = 0 ;
        public int ComputerScore { get; set; } = 0;
        public override string ToString()
        {
            return $"User's Score&lt;{PlayerScore}&gt;\tCom's Score&lt;{ComputerScore}&gt;\n";
        }

        public Player Winner =&gt; PlayerScore &gt; ComputerScore ? Player.User : Player.Computer;
    }

    enum Choice
    {
        Rock,
        Paper,
        Scissors
    }

    enum Player
    {
        User,
        Computer
    }

    public static void PlayGame()
    {
        Console.WriteLine("Welcome Let's play Rock Paper Scissors");

        int around = SetRound();
        var game = new Game();

        while (true)
        {
            while (game.PlayerScore &lt; around &amp;&amp; game.ComputerScore &lt; around)
            {

                var userInput = PlayerInput();
                Console.WriteLine("\nPlayer chose {0}", userInput);

                Match(userInput, game);

                Console.WriteLine();
            }

            Console.WriteLine($"{game.Winner} won !");

            Console.WriteLine("Do you want to play again? y/n ");
            var again = Console.ReadLine()?.ToUpper();
            if (again == "N")
            {
                Console.WriteLine("Good Bye");
                break;
            }
            Console.Clear();
        }
    }
    public static string PlayerInput()
    {
        Console.Write("Choose btw RockPaperScissor \n");
        var input = Console.ReadLine();

        if (input == null)
            return null;

        return Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(input.ToLower());
    }

    static Player? ComputeWinner(Choice userChoice, Choice computerChoice)
    {
        if (userChoice == computerChoice)
            return null;

        switch (computerChoice)
        {
            case Choice.Rock:
                switch (userChoice)
                {
                    case Choice.Paper:
                        return Player.User;
                    case Choice.Scissors:
                        return Player.Computer;
                }
                break;
            case Choice.Paper:
                switch (userChoice)
                {
                    case Choice.Rock:
                        return Player.User;
                    case Choice.Scissors:
                        return Player.Computer;
                }
                break;
            case Choice.Scissors:
                switch (userChoice)
                {
                    case Choice.Rock:
                        return Player.User;
                    case Choice.Paper:
                        return Player.Computer;
                }
                break;
        }

        return null;
    }


    static void Match(string userInput, Game game)
    {
        if (!Enum.TryParse(userInput, out Choice myStatus))
        {
            Console.WriteLine($"{userInput} is not valid");
            return;
        }

        var userChoice = myStatus;

        var values = Enum.GetValues(typeof(Choice));
        var random = new Random();
        var comChoice = (Choice)values.GetValue(random.Next(values.Length));

        Console.WriteLine($"Computer chose {comChoice}");

        switch (ComputeWinner(userChoice, comChoice))
        {
            case Player.User:
                Console.WriteLine("User won");
                game.PlayerScore++;
                break;
            case Player.Computer:
                Console.WriteLine("Computer won");
                game.ComputerScore++;
                break;
            default:
                Console.WriteLine("Tie");
                break;
        }
    }
    public static int SetRound()
    {
        Console.Write("How many round would you like to play?\t");
        return Convert.ToInt32(Console.ReadLine());
    }
}
</code></pre>
    </div>