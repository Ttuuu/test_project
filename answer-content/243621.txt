<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>String Builder inefficiency</h1>
<h2>Non-words</h2>
<p>The first inefficiency deals with repeated non-letter characters:</p>
<pre><code>   if(!Character.isLetter((char)currentChar) || .... ){
        if (word.length() &gt; 0 ) {
            mapAllWordsPositionInFilesInFolder. ... .add(...);
        }
        word = new StringBuilder();
   }
</code></pre>
<p>If you encounter a non-letter, you check to see if you have a word accumulated in the <code>word</code> buffer, and if so, you add to <code>mapAllWordsPositionInFilesInFolder</code>.  Then, unconditionally, you create a new <code>StringBuilder</code> object.</p>
<p>If you encounter a long string of non-letters, perhaps a table of numbers, only at the first non-letter could you have a word accumulated.  But at each non-letter of this long series of non-letters, you create a new <code>StringBuilder</code> when you haven't even used the last one.  You only need a clean <code>StringBuilder</code> after you've accumulated and processed a word:</p>
<pre><code>   if(!Character.isLetter((char)currentChar) || .... ){
        if (word.length() &gt; 0 ) {
            mapAllWordsPositionInFilesInFolder. ... .add(...);
            word = new StringBuilder();
        }
   }
</code></pre>
<p>Small change, but huge improvement.</p>
<h2>setLength</h2>
<p>The second biggest inefficiency is the repeated construction of <code>StringBuilder</code> objects.  A <code>StringBuilder</code> can be reused.</p>
<p>Instead of</p>
<pre><code>        if (word.length() &gt; 0 ) {
            mapAllWordsPositionInFilesInFolder. ... .add(...);
            word = new StringBuilder();
        }
</code></pre>
<p>simply reset the <code>StringBuilder</code> object to "empty":</p>
<pre><code>        if (word.length() &gt; 0 ) {
            mapAllWordsPositionInFilesInFolder. ... .add(...);
            word.setLength(0);
        }
</code></pre>
<p>Now the same buffer is being reused to accumulate words.  Bonus: If the buffer ever reallocates to a larger size for an extra long word, this reallocation will not need to be repeated for the next extra long word, since the <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/StringBuilder.html#capacity()" rel="nofollow noreferrer"><code>capacity</code></a> is retained.</p>
<p>For more efficiency, you could reuse the same <code>StringBuilder</code> for each file, instead of reallocating a new one every file.</p>
<h1>try-with-resources</h1>
<p>If an <code>IOException</code> occurs, you are not closing the <code>bis</code> stream.  True, eventually the <code>bis</code> object will be garbage collected and the stream will be closed at that point, but that may take awhile and the operating system resources are held until that point.</p>
<p>Simply adding a <code>bis.close()</code> statement inside the <code>catch</code> clause is not enough, since that statement can itself raise an <code>IOException</code>.  It was hard to get the exception handling &amp; closing of files correctly written, until Java 1.7's <code>try-with-resources</code> statement.</p>
<p>Instead of:</p>
<pre><code>        try {
            BufferedInputStream bis=new BufferedInputStream(new FileInputStream(filePath));
            ...
            bis.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
</code></pre>
<p>write:</p>
<pre><code>        try (BufferedInputStream bis=new BufferedInputStream(new FileInputStream(filePath))) {
            ...
        } catch (IOException e) {
            e.printStackTrace();
        }
</code></pre>
<p>Note that the <code>bis.close();</code> statement has gone away.  Written this way, the <code>try ( ) { ... }</code> statement is responsible for closing the <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/AutoCloseable.html" rel="nofollow noreferrer"><code>AutoCloseable</code></a> resources; you no longer have to.</p>
<h1>Unused</h1>
<pre><code>public static  Map&lt;String, Map&lt;String, Set&lt;Integer&gt;&gt;&gt; getMap1() {
    return mapAllWordsPositionInFilesInFolder;
}
</code></pre>
<p>Why does this function exist?  Is the word map expected to be queried several times, and the same word map returned?</p>
<p>The caller can modify this map.  Perhaps an <a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Collections.html#unmodifiableMap(java.util.Map)" rel="nofollow noreferrer">unmodifiable map</a> should be returned.  Ideally, an unmodifiable map of unmodifiable maps of an unmodifiable sets, though that would take much more work.</p>
<h1>Usage</h1>
<p><code>showAllWordInFolder(...)</code> is a non-static method that updates and returns the map.  The map, however, is statically created.</p>
<p>If a different folder path is given, and the function is called again, the files in the new location are merged into the map.  If files are changed, and the function is called, the new file word/line information is merged into the sets along with the old and obsolete word/line information.</p>
<p>Maybe a new <code>Map</code> should be created and returned?  If each call returned a new object, then making the returned map unmodifiable wouldn't be as important.</p>
<h1>Line by Line</h1>
<p>Instead of processing the stream character by character, perhaps processing it line by line would be simpler.</p>
<pre><code>for(String path : fileInFolder) {
    try (BufferedReader reader = Files.newBufferedReader(Path.of(path))) {
        int line = 1
        for(String line : reader.lines()) {
            ...
            line++;
        }
    }
}
</code></pre>
<p>Words can be extracted from each line:</p>
<pre><code>var regex = Pattern.compile("[^\\p{Alpha}]+"); // Split using non-letters
...
            String[] words = regex.split(line);
            for (String word : words) {
                ...
            }
...
</code></pre>
<p>Or using <code>.splitAsStream()</code> and collectors, for stream processing of results without constructing arrays of the words.</p>
    </div>