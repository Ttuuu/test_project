<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regarding:</p>

<blockquote>
<pre><code>char* speed = malloc(sizeof(char) * 6);
</code></pre>
</blockquote>

<ol>
<li><p>The expression <code>sizeof(char)</code> is defined in the C standard as 1.  Multiplying anything by 1 has no effect and just clutters the code, making it more difficult to understand, debug, etc.</p></li>
<li><p>When calling any of the heap allocation functions: <code>malloc()</code> <code>calloc()</code> <code>realloc()</code>,  always check (!=NULL) the returned value to assure the operation was successful.  </p></li>
<li><p>It is a poor programming practice to use dynamic memory allocation (the call to <code>malloc()</code>)  in an embedded application.</p></li>
</ol>

<hr>

<p>Regarding:</p>

<blockquote>
<pre><code>char temp[5] = {0};
char* speed = malloc(sizeof(char) * 6);

memset(speed, 0, sizeof(temp));
</code></pre>
</blockquote>

<p>The call to <code>malloc()</code> allocated 6 bytes, but <code>sizeof temp</code> is only 5 bytes.  The result is that the last byte of <code>speed</code> is not initialized.</p>

<p>Suggest calling <code>calloc()</code> rather than <code>malloc()</code>, which will initialize the allocated memory to all <code>0x00</code>.</p>

<p>Regarding the numbers 5, 6. 10.</p>

<p>These are 'magic' numbers.  'magic' numbers have no basis.  Suggest using an <code>enum</code> statement or <code>#define</code> statements to give those 'magic' numbers meaningful names, then use those meaningful names throughout the code.</p>

<p>regarding: </p>

<pre><code>typedef int bool;
</code></pre>

<p>there is already the header file: <code>stdbool.h</code>  which defines <code>bool</code>, <code>true</code>, <code>false</code></p>
    </div>