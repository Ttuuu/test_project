<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have several variations on this in your code:</p>

<pre><code>    if input
        .chars()
        .nth(from_idx)
        .expect("Lexxer skipped past the end of the input")
        != '"'
    {
        return None;
    }
</code></pre>

<p>This is problematic. In general, taking <code>nth</code> item in an iterator isn't going to be very efficient, since it has to iterate through all the previous elements in the iterator to get there. Some iterators may override this with a fast implementation, but <code>str.chars()</code> because the string is UTF-8 which has variable length characters. So it has to read through the string counting up the characters. Because you do this in a loop, you are going through the input string over and over and over again.</p>

<p>A possible alternative is to pass around a mutable reference to the <code>std::char::Chars</code> object returned by <code>str.chars()</code>. Then you can have each lexing function move the iterator forward as it consume characters. This approach can be helped by using <code>.peekable()</code> to create an iterator with a <code>peek()</code> method that lets you look at the next item in the iterator without consuming it. Also, you can <code>clone()</code> this iterator to remember a particular position in the string, and assign to an iterator to reset it to a previous position.</p>

<p>But what I'd actually do is define a struct, something like</p>

<pre><code>struct Reader {
    currentLine: u32,
    currentColumn: u32,
    buffer: String,
    source: std::io::Read
}
</code></pre>

<p>This struct:</p>

<ol>
<li>Reads from a std::io::Read, so it can be used with files/in memory data/whatever.</li>
<li>Keeps track of the current line and column, probably quite useful for reporting errors.</li>
<li>Provides utility functions to peek/consume data from the stream in a way conducive to implementing the lexer.</li>
</ol>
    </div>