<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Don't do <code>using namespace std;</code></a></p>

<p>Qualify names properly with <code>std::</code> where necessary.</p>

<hr>

<pre><code>string getProdName() const { return prodName; }
int    getQuant() const { return quant; }
</code></pre>

<p>Avoid abbreviations as they harm code clarity. Most IDE's provide auto-completion, so abbreviations don't save typing anyway.</p>

<hr>

<pre><code>receipt(const string&amp; prdNm, int qnt)
      : prodName(prdNm), quant(qnt)
{}
</code></pre>

<p>The initializer list allows you to use the same name for the function argument as for the member variable, so this would be fine:</p>

<pre><code>receipt(std::string productName, int quantity)
      : productName(std::move(productName)), quantity(quantity)
{}
</code></pre>

<p>(Since the product name is a "sink argument" (we want to copy and store it locally), we can take it by value and move it into place).</p>

<hr>

<p>I don't think it's a good idea to overload <code>operator&lt;</code> for these classes. These aren't mathematical types, so there's no inherent ordered relationship. It would make just as much sense to sort by product price as by name.</p>

<p>We're using the <code>operator&lt;</code> for sorting in a particular structure, so we want to associate the ordering with that structure, not with the type itself. We can do that using a "functor" class to define comparison, and specifying it as a template argument:</p>

<pre><code>struct ProductLessThanByName
{
    bool operator()(const Product&amp; a, const Product&amp; b) const {
        return a.getName() &lt; b.getName();
    }
};

...

    std::map&lt;Product, int, ProductLessThanByName&gt; products;
</code></pre>

<hr>

<p><code>record</code> is a rather ambiguous name. Maybe <code>client_purchases</code> or <code>purchase_record</code> or something might be better.</p>

<p>Since we already have the <code>receipt</code> class, that stores product and quantity, we could perhaps use that internally.</p>

<hr>

<p>Although encapsulation is important, people often interpret it as "make all member variables private and add getter / setter functions". This is fine for classes that have associated logic in member functions, or where we can't change a member without extra work (we must adhere to the class invariants).</p>

<p>However, it's unnecessary for simple data containers. If we don't want to allow the user to change a member of the <code>product</code> or <code>receipt</code> classes, we can enforce that by giving them a <code>const&amp;</code> to the class. So we can save a lot of work and use plain structs. e.g.:</p>

<pre><code>struct  receipt
{
    std::string productName;
    int quantity;
};
</code></pre>

<hr>

<p>It's probably better to use unsigned types for the quantity and price. We don't expect these to ever be negative, and it's easier to rule out invalid values.</p>

<hr>

<p>As far as the design goes, I'm not sure we need to add clients outside of a transaction. I don't think it really makes sense to "remove" a client either. We have to keep the transaction history intact.</p>

<p>I think it would be helpful to separate the idea of "adding a product-type to the database" from "adding stock (actual items of a product-type) to the shop".</p>

<p>As Kyy13 notes in the comments, we need to store the price at which we sold an item in the transaction history.</p>
    </div>