<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a suggestion:</p>

<p>For question #1 and #2, <code>parse_expression</code> is written in a way that matches the grammar, which also ensures the parens are balanced.  If a '(' is matched, then the optional internal parts of an expression are parsed and then the ')'.</p>

<p>There is a separate top level function call, <code>parse()</code>, that takes the expression to parse and makes sure it starts with a '(' before calling <code>parse_expression</code>.  This helps with questions #1 and #3.</p>

<p>I left out <code>pretty_print_stack()</code> for brevity.</p>

<pre><code>class ParseError(Exception):
    def __init__(self, message=''):
        self.message = f"ParseError: {message}"



class Parser:
    def __init__(self, verbose=1):
        self.verbose = verbose


    def advance(self):
        if self.position &lt; len(self.expression):
            self.position += 1

        if self.position &lt; len(self.expression):
            self.current = self.expression[self.position]
        else:
            self.current = "EOF"


    def parse(self, expression):
        """
        Takes expression to parse and returns a parse tree in the form of a
        nested list. E.g., (a((b)c)) -&gt; ['a', ['', ['b', None, ''], 'c'], ''].

        At this level, an expression is required, so make sure the '(' is there.
        Then call self.expression(); otherwise, it's a syntax error.
        """

        self.expression = expression
        self.position = 0
        self.current = self.expression[:1]

        if self.current != '(':
            raise ParseError(f"Missing '(' at position {self.position}.")

        return self.parse_expression()


    def parse_datum(self):
        """
        datum :=  any string of characters other than ( or ) or EOF.

        returns string of chars or empty string
        """

        start = self.position

        while self.current not in ('(',')','EOF'):
            self.advance()

        return self.expression[start:self.position]


    def parse_expression(self):
        """expression :=  '(' [datum] [expression [datum]] ')'

        returns list of elements, or None if it doesn't parse
        """

        if self.current == '(':
            self.advance()

            datum1 = self.parse_datum()

            expression = self.parse_expression()

            datum2 = self.parse_datum() if expression else ''

            if self.current != ')':
                raise ParseError(f"Missing ')' at position {self.position}.")

            self.advance()
            return [ datum1, expression, datum2 ]

        else:
            return None
</code></pre>

<p>And the test cases:</p>

<pre><code>tests = {
    'good':[line.strip() for line in """
            (hello(one(two(three)a)b)c)
            (()abc)
            ((()))
            """.strip().splitlines()],
    'bad':[line.strip() for line in """
            )(
            abc
            ((abc)
            ((abc)(
            ((abc)(abc))
            """.strip().splitlines()]
}

p = Parser(verbose=True)

for kind, testset in tests.items():
    print(f"{kind} tests")

    for n,test in enumerate(testset):
        print(f"\n    Test {n}: {test}\n")
        try:
            tree = p.parse(test)
            print(f"        {tree}\n")

        except ParseError as e:
            print(f"        {e.message}")
</code></pre>

<p>Output:</p>

<pre><code>good tests

    Test 0: (hello(one(two(three)a)b)c)

        ['hello', ['one', ['two', ['three', None, ''], 'a'], 'b'], 'c']


    Test 1: (()abc)

        ['', ['', None, ''], 'abc']


    Test 2: ((()))

        ['', ['', ['', None, ''], ''], '']

bad tests

    Test 0: )(

        ParseError: Missing '(' at position 0.

    Test 1: abc

        ParseError: Missing '(' at position 0.

    Test 2: ((abc)

        ParseError: Missing ')' at position 6.

    Test 3: ((abc)(

        ParseError: Missing ')' at position 6.

    Test 4: ((abc)(abc))

        ParseError: Missing ')' at position 6.
</code></pre>
    </div>