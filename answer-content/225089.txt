<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Refactoring to DRY Code</h2>

<p>In order to avoid repetition, we could create a couple of reusable functions to enable your functions to all use the same pattern.</p>

<p>The pattern:</p>

<ul>
<li>start loading</li>
<li>await operation</li>
<li>loading completed</li>
<li>notify success</li>
<li>on error: notify error</li>
</ul>

<p><strong>buildErrorMessage</strong></p>

<p>Let's start by making a function that builds an error message given an error.</p>

<pre><code>function buildErrorMessage(error) {
  if (error.isAxiosError) {
    let concatMessages = '';
    Object.entries(error.response.data.errors)
      .forEach(([key, value]) =&gt; concatMessages += value);
    return concatMessages;
  }
  return error.toString();
}
</code></pre>

<p>to avoid writing code as..</p>

<blockquote>
<pre><code>if (error.isAxiosError) {
    var concatMessages = '';
    Object.entries(error.response.data.errors)
      .forEach(([key, value]) =&gt; concatMessages += value);
    this.$store.commit("errorMessage", concatMessages);
    this.$store.commit("errorModal", true);
}
//Other non-axios errors i.e. syntax error, code error etc...
else {
    this.$store.commit("errorMessage", error.toString());
    this.$store.commit("errorModal", true);
}
</code></pre>
</blockquote>

<hr>

<p><strong>executeInBackground</strong></p>

<p>Now we could provide a wrapper function to execute other functions in the background, updating the store before, after and on error of the operation.</p>

<pre><code>async function executeInBackground(operation) {
  try {
    this.$store.commit("isLoading", true);
    const response = await operation();
    this.$store.commit("successMessage", response.data.message);
    this.$store.commit("successModal", true);
  }
  catch (error) {
    const errorMessage = buildErrorMessage(error);
    this.$store.commit("errorMessage", errorMessage);
    this.$store.commit("errorModal", true);
  }
  finally {
    this.$store.commit("isLoading", false);
  }
}
</code></pre>

<p>This part..</p>

<pre><code>  const response = await operation();
</code></pre>

<p>Is a generic replacement for your code:</p>

<blockquote>
<pre><code>//Some axios code runs here...
const response = await this.axios.post(process.env.VUE_APP_API_ExampleAPI, 
    {param1: 'blaa', param2: 'blaa2' });
</code></pre>
</blockquote>

<p>By replacing the specific operation with a template place holder, we can avoid repetition for every other operation that needs to follow the same pattern.</p>

<hr>

<p><strong>entrypoint functions</strong></p>

<p>And finally, we create a function that handles the stuff from the OP.</p>

<pre><code>async function processExample() {
  await executeInBackground(() 
    =&gt; this.axios.post(process.env.VUE_APP_API_ExampleAPI, { 
      param1: 'blaa', param2: 'blaa2' }));
}
</code></pre>

<p>This way, you avoid redundant error handling, and update the store in a consistent fashion. Each new function that requires the same behavior should just call <code>await executeInBackground</code> with the operation that is required.</p>

<p>Suppose you have another function, it gets apparent that code duplication can be avoided:</p>

<pre><code>async function processSomethingElse() {
  await executeInBackground(() 
    =&gt; this.axios.post(process.env.VUE_APP_API_ExampleAPI, { 
      param1: 'other', param2: 'other2' }));
}
</code></pre>

<p>And thus we have established DRY code.</p>
    </div>