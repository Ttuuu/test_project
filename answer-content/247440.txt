<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming</h1>
<p>Renaming your instance variable <code>_V</code> and <code>_E</code> to <code>nbVertices</code> and <code>nbEdges</code> respectively allows you get rid of two unnecessary comments and also makes the rest of the code much clearer, especially to someone who's not too familiar with graph notation.</p>
<p>I'm also not a big fan of prefixing private instance variables with underscores, but that's just my personal opinion.</p>
<p>Similarly, you could give most of your methods' arguments much clearer names.</p>
<p>The standard naming convention for C# is to use <code>PascalCase</code> for methods &amp; properties, and <code>camelCase</code> for fields, so I would rename <code>getAdjacency()</code> and <code>addEdge()</code> to <code>GetAdjacency()</code> and <code>AddEdge()</code>.</p>
<h1>Properties</h1>
<pre><code>    // number of vertices
    public int V
    {
        get { return this._V; }
    }

    // number of edges
    public int E
    {
       get { return this._E; }
    }
</code></pre>
<p>can be changed to</p>
<pre><code>    // number of vertices
    public int V
    {
        get =&gt; this._V;
    }

    // number of edges
    public int E
    {
       get =&gt; this._E;
    }
</code></pre>
<p>which can further be simplified to</p>
<pre><code>    // number of vertices
    public int V =&gt; this._V;

    // number of edges
    public int E =&gt; this._E;
</code></pre>
<p>You could go one step further and merge <code>V</code> and <code>_V</code> into a single property, like this :</p>
<pre><code>public int V { get; private set; }

public int E { get; private set; }
</code></pre>
<p>and since <code>V</code> doesn't change after being set in the constructor, you can go even <em>further beyond</em> and make <code>V</code> into a read-only property :</p>
<pre><code>public int V { get; }
</code></pre>
<p>This makes it so that <code>V</code> can only be set once in the constructor.</p>
<h1>Comments</h1>
<p>Personal opinion again, but I don't like comments, especially when they can be made useless by simply changing a variable or a method's name, as was the case with your declarations of <code>_V</code> or <code>_E</code>.</p>
<p>I also really don't like comments that just say what the code is doing, like in your <code>addEdge()</code> method :</p>
<pre><code>public void addEdge(int v, int w)
{
    // validate given node numbers
    if ((v &gt; this._adj.Length) || (w &gt; this._adj.Length))
        throw new ArgumentException("Invalid node number specified.");

    // add to adjacency lists
    this._adj[v].Add(w);
    this._adj[w].Add(v);
    // increment edge count
    this._E++;
}
</code></pre>
<p>These comments add nothing more than redundant, distracting text that makes the code harder to read. If you see a line of code that says <code>NbEdges++;</code>, do you really need a comment to say <code>// increment edge count</code> ?</p>
<h1>Exceptions</h1>
<p>I'd recommend always throwing the exception that most closely fits the issue, which in this case would be an <code>ArgumentOutOfRangeException</code> (which is derived from <code>ArgumentException</code>).</p>
<p>Additionally, I would make the exception message more clear and give more information about what actually went wrong. Imagine being a user and seeing "Invalid node number specified."; which argument was wrong? Was it <code>v</code> or <code>w</code>? Why was the value wrong?</p>
<p>You could go even further and create your own exception class that inherits said exception, in order to reduce code repetition and give your exceptions meaningful names which would help your users.</p>
<pre><code>if (v &lt; 0 || v &gt; this._adj.Length)
{
    throw new ArgumentOutOfRangeException($"Error, the value provided for 'v' should be" + 
        "between 0 and {this._adj.Length - 1}\n" + 
        "\tv = {v}\n");
}

if (w &lt; 0 || w &gt; this._adj.Length)
{
    throw new ArgumentOutOfRangeException($"Error, the value provided for 'v' should be" + 
        "between 0 and {this._adj.Length - 1}\n" + 
        "\tv = {v}\n");
}
</code></pre>
    </div>