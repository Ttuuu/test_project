<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Method Names</h1>

<p>The most method names do not describe what the method really does and what the method name implies.</p>

<ul>
<li><code>getButtonData</code> let me imply that it returns information about one button</li>
<li><code>getButtonDataByPage</code> the same like <code>getButtonData</code></li>
<li><code>add</code> implies that something gets added to a collection</li>
</ul>

<p>In generell method names that start with <code>get</code> are known as <a href="https://guide.freecodecamp.org/java/getters-and-setters/" rel="nofollow noreferrer"><em>getter</em></a> and that they return values of an object that has no or less computation. The methods you provide starts with <code>get</code> but relay heavily on computation and do not return just a value.</p>

<p>Names that would better fit are: <code>buildInitialButtonList</code>, <code>buildNavigatedButtonList</code> and <code>createButton</code>.</p>

<h1>Hard to Read</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if (pageSize &gt; 10) {
   if (i &lt; 6) {
       buttons.push(add(i, i == 1 ? true : false, true, false));
   }
   else if (pageSize &gt;= 6 &amp;&amp; i == 6) {
       buttons.push(add(i, i == 1 ? true : false, pageSize &gt; 6 ? false : true, &gt;pageSize &gt; 6 ? true : false));
   }
   else if (i == pageSize) {
       buttons.push(add(i, false, true, false));
   }
}
</code></pre>
</blockquote>

<p>The code smells <a href="https://www.informit.com/articles/article.aspx?p=1392524" rel="nofollow noreferrer"><em>boolean flags</em></a> and <a href="https://en.wikipedia.org/wiki/Magic_number_%28programming%29" rel="nofollow noreferrer"><em>magic numbers</em></a> make your code hard to read an to maintain. </p>

<p>Imagine you want to show only 3 instead 6 buttons: Alone in this small snipped you have to touch the code 5 times and in the whole code you provide 12 times.</p>

<h1>Many Conditions</h1>

<p>Beside the code smells you have many conditions. The 3 lines below contain 4 conditions:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>else if (pageSize &gt;= 6 &amp;&amp; i == 6) {
   buttons.push(add(i, i == 1 ? true : false, pageSize &gt; 6 ? false : true, pageSize &gt; 6 ? true : false));
}
</code></pre>
</blockquote>

<h1>Simplify Conditions</h1>

<p>Some conditions follow the semantic of <code>condition ? true : false</code> which is the same as <code>condition</code>. For instance:</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>buttons.push(add(i, i == 1 ? true : false, pageSize &gt; 6 ? false : true, pageSize &gt; 6 ? true : false))
</code></pre>
</blockquote>

<p>Is the same as</p>

<pre class="lang-java prettyprint-override"><code>buttons.push(add(i, i == 1, pageSize &gt; 6, pageSize &gt; 6))
</code></pre>

<h1>Useless Conditions</h1>

<p>Let's analyze <code>getButtonData</code> and the same will be apply to <code>getButtonDataByPage</code>.</p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>else if (... &amp;&amp; i == 6) {
   buttons.push(add(i, i == 1 ? true : false, ..., ...));
}
</code></pre>
</blockquote>

<p>We first check if <code>(i == 6)</code> and if this is true we check if <code>i == 1</code> which will always be false:</p>

<pre class="lang-java prettyprint-override"><code>else if (... &amp;&amp; i == 6) {
    buttons.push(add(i, false, ..., ...));
}
</code></pre>

<hr>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>if (pageSize &gt; 10) {
   if (...) {/* ... */}
   else if (pageSize &gt;= 6 &amp;&amp; i == 6) {
       buttons.push(add(..., ..., pageSize &lt;= 6, pageSize &gt; 6));
   }
}
</code></pre>
</blockquote>

<p>First we make sure that <code>pageSize &gt; 10</code> and than we check if <code>pageSize &gt;= 6</code>, <code>pageSize &lt;= 6</code> and <code>pageSize &gt; 6</code>. Since we already know that <code>pageSize</code> is greater than 10 we can simplify to:</p>

<pre class="lang-java prettyprint-override"><code>if (pageSize &gt; 10) {
    if (...) {/* ... */}
    else if (i == 6) {
        buttons.push(add(..., ..., true, true));
    }
}
</code></pre>

<hr>

<p>After the simplification:</p>

<pre class="lang-java prettyprint-override"><code>for (let i = 1; i &lt;= pageSize; i++) {
    if (pageSize &gt; 10) {
        if (i &lt; 6) {
            buttons.push(add(i, i == 1, true, false));
        }
        else if (i == 6) {
            buttons.push(add(i, false, true, true));
        }
        else if (i == pageSize) {
            buttons.push(add(i, false, true, false));
        }
    }
    else {
        buttons.push(add(i, i == 1, true, false));
    }
}
</code></pre>

<p>where <code>i == 1</code> can have its own branch:</p>

<pre class="lang-java prettyprint-override"><code>if (i === 1) {
    buttons.push(add(i, true, true, false))
} else if (pageSize &gt; 10) {
    if (i &lt; 6) {
        buttons.push(add(i, false, true, false));
    } else if (i === 6) {
        buttons.push(add(i, false, true, true));
    } else if (i === pageSize) {
        buttons.push(add(i, false, true, false));
    }
} else {
    buttons.push(add(i, false, true, false));
}
</code></pre>

<p>Since only the first 6 button gets rendered we do not need to check for <code>pageSize &gt; 10</code>:</p>

<pre class="lang-java prettyprint-override"><code>if (i === 1) {
    buttons.push(add(i, true, true, false))
} else if (i &lt; 6) {
    buttons.push(add(i, false, true, false));
} else if (i === 6) {
    buttons.push(add(i, false, true, true));
} else if (i === pageSize) {
    buttons.push(add(i, false, true, false));
}
</code></pre>

<p>and since the branch body of <code>i &lt; 6</code> and <code>i === pageSize</code> are the same:</p>

<pre class="lang-java prettyprint-override"><code>if (i === 1) {
    buttons.push(add(i, true, true, false))
} else if (i &lt; 6 || i === pageSize) {
    buttons.push(add(i, false, true, false));
} else if (i === 6) {
    buttons.push(add(i, false, true, true));
}
</code></pre>

<h1>Builder Pattern</h1>

<p>To go away from all the boolean flags you could create a <a href="https://en.wikipedia.org/wiki/Builder_pattern" rel="nofollow noreferrer">Builder</a> and refactor the simplified version from above to something like: </p>

<pre class="lang-java prettyprint-override"><code>const firstButton = new ButtonBuilder().withValue(1).disabled().visible().noPlaceholder();
const placeholder = new ButtonBuilder().enabled().visible().placeholder();
const button = new ButtonBuilder().enabled().visible().noPlaceholder();
for (let i = 1; i &lt;= pageSize; i++) {
    if (i === 1) {
        buttons.push(firstButton);
    } else if (i &lt; 6 || i === pageSize) {
        buttons.push(button.withValue(i).build());
    } else if (i === 6) {
        buttons.push(placeholder.withValue(i).build());
    }
}
</code></pre>

<hr>

<h1>The Algorithm</h1>

<p>In your example, you can page through 50 buttons, of which only 6 are required to render. For each button click you have to loop 50 times to render 6 buttons again.</p>

<p>But actually you know directly which buttons are required to render without to loop 50 times. There are 3 cases:</p>

<ul>
<li>on the first to 5. button  : <code>1, 2, 3, 4, 5 ... 50</code></li>
<li>on button between 6. to 50.: <code>1, ... 6, [7], 8, ..., 50</code></li>
<li>on button 47. to 50.: <code>1, ... 47, 48, [49], 50</code></li>
</ul>

<p>some pseudo code:</p>

<pre><code>function buildPagination(current) {
    if (current &lt; 6) {
        const pagination =  [
            button(1),
            button(2),
            button(3),
            button(4),
            button(5),
            placeholder(),
            button(last),
        ];
        pagination[current].disable();
        return pagination;
    }

    if (current &gt; (last - 4)) {
        const pagination = [
            button(1),
            placeholder(),
            button(last - 4),
            button(last - 3),
            button(last - 2),
            button(last - 1),
            button(last),
        ];
        pagination[current].disable();
        return pagination;
    }

    return [
        button(1),
        placeholder(),
        button(current - 1),
        button(current).disable(),
        button(current + 1),
        placeholder(),
        button(last),
    ];
}
</code></pre>
    </div>