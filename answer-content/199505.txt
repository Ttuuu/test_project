<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>I suggest to use functional approach, which makes code more readable and concise.</li>
<li>I suggest to write functions that solve some generic problem, not particular one.</li>
<li>I think using word "temp" in variable names is redundant.</li>
</ol>

<p>My suggested solution:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const distance = (from, to) =&gt; Math.abs(from - to);
const closestTo = (arr, num) =&gt; {
	if (arr.length === 0) { return num; }
	return arr.filter(x =&gt; x !== num)
  	 	  .reduce((acc, x) =&gt; distance(num, x) &lt; distance(num, acc) ? x : acc, 
                          arr[0]);
}

console.log(closestTo([-1, 0, 0, 5, -5, 6, -3, 2, 10, 13, 8, 70, -36, 36], 0));</code></pre>
</div>
</div>


<p>Updated.
There is more readable, but less concise version of program.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const closestTo = (list, num) =&gt; {
	const distance = (from, to) =&gt; Math.abs(from - to);
	const excludeSelf = ([x, d]) =&gt; (x !== num);
	const byDistance = (([x1, d1], [x2, d2]) =&gt; (d1 !== d2) ? d1 - d2 : x2 - x1);

	if (list.length === 0) { return num; }
	
	const [x, d] = list
            .map(x =&gt; [x, distance(x, num)])
            .filter(excludeSelf)
            .sort(byDistance)
            .shift();
	return x;   
};

console.log(closestTo([4, -3, 1, -1], 0));</code></pre>
</div>
</div>

    </div>