<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two words: loops and arrays.</p>

<p>There a bunch of variable names that differ only by a number. Whenever you see code like this, you can probably clean it up by creating a collection of those things and looping over them. Basically, you have a checkbox and text field repeated multiple times, and one field where you display the total of all checked fields.</p>

<ol>
<li>Create a user control to encapsulate the checkbox and text field</li>
<li>Make sure this user control has a public property <code>decimal TotalCost { get }</code> that will:

<ul>
<li>Return the decimal-parsed values of <code>total - cost</code> for the fields when checked, and zero when unchecked.</li>
<li>Throws an exception if the decimal cannot be parsed</li>
</ul></li>
<li>Expose a boolean property <code>bool IsValid</code> that returns true when the user as entered a valid decimals</li>
<li>Expose a public property <code>bool IsChecked</code> that returns whether or not the checkbox is checked</li>
<li>Create a collection of these user controls, one for each checkbox/text field combo on screen</li>
</ol>

<p>Now loop and process:</p>

<pre><code>decimal purchaseTotal = 0m;
decimal totalAmount = 0m;

foreach (var control in PurchasedItems.Where(p =&gt; p.IsChecked &amp;&amp; p.IsValid))
{
    purchaseTotal += control.TotalCost;
}
</code></pre>

<p>I left some details out, but your code isn't really clear on what the UI looks like, or what the business use case is, but it really just boils down to:</p>

<ul>
<li>Create an abstraction for what each combo of controls represents (e.g. create a new user control)</li>
<li>Create a collection of these controls</li>
<li>Loop and calculate</li>
</ul>
    </div>