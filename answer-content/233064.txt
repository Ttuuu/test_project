<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Everything I'm going to talk about is in the <code>merge_sort</code> function</p>

<h2>General</h2>

<pre><code>i = 0
j = 0
k = 0
</code></pre>

<p>Can be defined as</p>

<p><code>i = j = k = 0</code></p>

<hr>

<p>You should always leave spaces between operators as per <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> rules</p>

<p><code>i&lt;len(left_half)</code> should be <code>i &lt; len(left_half)</code></p>

<hr>

<p>Use <code>x += y</code> instead of <code>x = x + y</code></p>

<hr>

<p><em>In my opinion</em>, I think using short and concise names such as <code>mid</code> or <code>middle</code> instead of <code>middle_index</code> would be better. If you don't wish to, you can leave it as it!</p>

<hr>

<p>Use <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">type hints</a></p>

<hr>

<p>Add <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a></p>

<hr>

<h2>Bug</h2>

<p>Your function only takes into account the <code>left_half</code> of the array, and ignores what's left in the <code>right_half</code></p>

<p>For example, if <code>nums</code> array was <code>[3, 9, 0]</code>, The array would be <code>[0, 3, 0]</code></p>

<p>This would happen as</p>

<p><code>merge_sort([3])</code> which won't change the <code>left_half</code>
<code>merge_sort([9, 0])</code> which would make the <code>right_half</code> as <code>[0, 9]</code></p>

<p>Then, </p>

<pre><code>left_half = [3]
right_half = [0, 9]

nums = [3, 9, 0]

i = 0
j = 0
k = 0

First, the else statement would be called as 3 &gt; 0.

i = 0
j = 1
k = 1

nums = [0, 9, 0]

Next, the if statement would be called as 3 &lt; 9

i = 1
j = 1
k = 2

nums = [0, 3, 0]

Now, the while loop will terminate as i = len(left_side)

Then, while i &lt; len(left_side) would immediately terminate as i = len(left_side)

</code></pre>

<p>Did you notice? <code>right_side</code> still has one element <code>9</code> waiting to be traversed, but it never will be.</p>

<p>To fix that, add the following to the end of the function</p>

<pre class="lang-py prettyprint-override"><code>while j &lt; len(right_half):
    nums[k] = right_half[j]
    j += 1
    k += 1
</code></pre>

<hr>

<h2>Improvement</h2>

<p>Now, instead of using a <code>while</code> loop at all, you can just use <code>a[k:] = left_half[i:] + right_half[j:]</code> to replace both the loops! This is true because one half must be empty and the other half must have the length of <code>n - k</code>.</p>

<hr>

<h2>Performance</h2>

<p>If you are using this function in real time with an array of a really large size, this won't work efficiently.</p>

<p><code>len</code> takes quite a bit of time. To make it even faster, use a parameter <code>length</code> which would be the length of the array</p>

<hr>

<p>The final implementation of the function:</p>

<pre class="lang-py prettyprint-override"><code>from typing import List, Any

def merge_sort(nums: List[Any], length: int) -&gt; None:
    """ Uses Merge Sort to sort an array """

    # Base case
    if length == 1:
        return

    mid = length // 2

    left, right = mid, length - mid

    left_half, right_half = nums[:mid], nums[mid:]

    merge_sort(left_half, left)
    merge_sort(right_half, right)

    i = j = k = 0

    while i &lt; left and j &lt; right:
        if left_half[i] &lt; right_half[j]:
            nums[k] = left_half[i]
            i += 1
        else:
            nums[k] = right_half[j]
            j += 1

        k += 1

    nums[k:] = left_half[i:] + right_half[j:]
</code></pre>

<p><em>Note:</em> <code>Any</code> in <code>typing</code> means any datatype is allowed. The function can sort any datatype that is comparable with another element of the same datatype.</p>
    </div>