<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a few ideas...</p>

<ul>
<li><code>CheckFileSize</code> &amp; <code>CheckFileType</code> should be implemented either via action-filters or <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-2.2" rel="noreferrer">Model validation attributes</a></li>
<li>the exceptions they throw are too generic and don't tell me which files where invalid</li>
<li><code>Repository.GetAll().Where(x =&gt; x.InspectionTypeId == 1)</code> getting everything and then filtering it is very inefficient. You should remove <code>GetAll</code></li>
<li><code>Conflict("Pre inspection already exists")</code> is not helpful. I'd like to know which pre-inspection caused the error.</li>
<li><code>var files = uploadFiles.ToList();</code> is unnecessary becuase <code>files.ForEach(f =&gt;</code> is an ugly way to work with a collection. Use a normal <code>foreach</code> instead. As a matter of fact you can do this with the other loop you have there. Is it by design that you don't want to uplodad valid attachements but stop processing them if anyone is invalid?</li>
<li><code>.Where(x =&gt; x.InspectionTypeId == 1)</code> doesn't make any sense with the hardcoded <code>1</code>. Did you mean to write <code>.Where(x =&gt; x.InspectionTypeId == input.InspectionTypeId)</code>?</li>
<li><code>var preInspectionCount = await Repository.GetAll().Where(x =&gt; x.InspectionTypeId == 1).ToListAsync();</code> you could use <code>CountAsync</code> here like <code>var preInspectionCount = await Repository.CountAsync(x =&gt; x.InspectionTypeId == 1)</code></li>
<li>what do you need <code>getAttachments</code> and <code>setAttachments</code> for? They are not used anywhere</li>
<li>what if <code>if (input.EvidenceAttachments != null)</code> and <code>if (input.FrontPropertyAttachments != null)</code> are true? Both <code>if</code>s assign the value to <code>inspectionGet.FrontPropertyAttachments =</code> so the second one will overwirte the result of the first one. Is this a bug or by design? They are also both using <code>input.EvidenceAttachments,</code> with the <code>UploadMultipleAttachmentAsync</code> so there is another bug. </li>
</ul>

<p>It looks like you have (at least) three bugs there. Are you sure this actually works?</p>
    </div>