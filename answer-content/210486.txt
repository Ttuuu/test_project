<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why do you submit the current user id in the form? I assume the user is logged in by the statement <code>current_user.id</code> in the form. If you're placing the current user id into the form, you allow the user to change the value (assuming you use the submitted user id in your handler). I know the field is hidden, but everything that an client submits can be manipulated. The only thing to do is open up the developer tools and alter the HTML source. Instead of submitting the id through the form I recommend simply using <code>current_user</code> in the handler and don't submit the user id at all.</p>

<p>You mention you're looking into Action Cable at the moment. However Action Cable is based on the web-socket technology. This could be used, but the main reason they where invented is to keep the connection between the server and client open so the server can send data to the client without the client making a request first. This is mostly done when something changed on the server that has impact on the current view of the client. The term for this would be push notifications or messages.</p>

<p>Since the view doesn't have to change when something changed on the server there is no need to make things more complicated. Instead you want to update the responses when user selects an answer (user initiated). The solution is to update the user response on change (using JavaScript). Rails has a build in system that does this documented in the <a href="https://guides.rubyonrails.org/working_with_javascript_in_rails.html#customize-remote-elements" rel="nofollow noreferrer">Ruby on Rails Guides - Working with JavaScript in Rails: 3.2 Customize remote elements</a>.</p>

<p>Let me provide you with an (untested) example:</p>

<p>First we ensure that the correct routes are present so we can update the response in a reasonable fashion.</p>

<pre><code># config/routes.rb
# ...
resources :questions, only: [] do
  member do
    post 'answer', to: 'responses#answer'
  end
end
# ...
</code></pre>

<p>This should create the route <code>/questions/:id/answer</code> that will be handled in <em>ResponsesController#answer</em>. This route should create a helper named <code>answer_question</code> that accepts an question or question id as its first argument.</p>

<p>The controller might look something like this:</p>

<pre><code># app/controllers/responses_controller.rb
# ...
def answer
  question = Question.find(params[:id])
  answer   = question.answers.find(params[:answer_id])
  response = question.responses.find_or_initialize_by(user: current_user)

  if response.update(answer: answer)
    head :ok
  else
    render 'answer_error'
    # renders /app/views/responses/answer_error.js.erb
    # Here you can write some JS to update the DOM and sets an error
    # message somewhere.
  end
end
# ...
</code></pre>

<p>And now for the final part of the puzzle we need the view.</p>

<pre><code>&lt;% # I don't know which view this is, but it replaces the one that OP provided. %&gt;
&lt;h1&gt;&lt;%= @question.prompt %&gt;&lt;/h1&gt;
&lt;% @question.answers.each do |question| %&gt;
  &lt;%= form_for @response, url: answer_question_path(@question), method: :post, remote: true do |f| %&gt;
    &lt;%= f.hidden_field :answer_id, value: answer.id %&gt;
    &lt;%= f.submit a.answer.titleize, class: 'btn btn-block btn-lg btn-primary' %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>

<p>By having an nested route you eliminate the need to submit the question id. And the user id can be left out for reasons mentioned before.</p>

<p>From the tone in your post I assume you also want to drop those forms. This is possible by using the "Customize remote elements" that I linked above. This would leave you with a view that might look something like this.</p>

<pre><code>&lt;h1&gt;&lt;%= @question.prompt %&gt;&lt;/h1&gt;
&lt;% @question.answers.each do |answer| %&gt;
  &lt;%= radio_button_tag "question_#{question.id}_answer", answer.id, false, data: {
    remote: true,
    method: :post,
    url:    answer_question_path(@question),
    params: { answer_id: answer.id }
  } %&gt;
&lt;% end %&gt;
</code></pre>

<p>The above would simply generate radio buttons (using <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag" rel="nofollow noreferrer"><code>radio_button_tag</code></a>) that are linked to each other (per question). On change a request will be send to the specified URL. This eliminates the need for a form altogether. Keep in mind that no labels are currently present for the radio buttons, you'll have to add them yourself.</p>

<p>Of course you could also use other input HTML input elements to achieve the same result. If you want to stick to the button approach I recommend taking a look at <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-button_tag" rel="nofollow noreferrer"><code>button_tag</code></a> in combination with the technique shown above. Or <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-button_to" rel="nofollow noreferrer"><code>button_to</code></a> which is an helper that generates the wrapping form for you.</p>

<p>As I said, this is an untested example. Might any errors come up let me know in the comments.</p>
    </div>