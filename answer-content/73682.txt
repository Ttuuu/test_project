<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To accept user input for dates, <a href="http://search.cpan.org/dist/DateTime-Format-Natural/"><code>DateTime::Format::Natural</code></a> is a nice CPAN module to use.  It spares you from having to input dates using the Unix epoch format and the tortured use of Perl-Bash-Perl to generate the table.  (Defining a subroutine would also have helped you generate the whole table in Perl.)</p>

<p>Perl has some features for writing numeric literals that you should take advantage of.  Instead of <code>102.026 * 10**-12</code>, you could write <code>102.026E-12</code>.  You can also insert underscores, as in <code>29.530_588_861</code>.  <a href="http://perldoc.perl.org/constant.html">Constants</a> would be better written as</p>

<pre><code>use constant {
    Y2K_EPOCH    =&gt; 946_702_800,
    Y2K_REF      =&gt; 5.597_661,

    LUNATION     =&gt; 29.530_588_861,
    K_FACTOR     =&gt; 102.026E-12,

    U_TO_S       =&gt; 0.000_739,
    UTK          =&gt; 235E-12,

    SECS_PER_DAY =&gt; 60 * 60 * 24,
};
</code></pre>

<p>Considering that you only want an approximate answer, I am perplexed by your concern for tiny numbers.  \$(102.026 \times 10^{-12}) \times N\$ amounts to slowdown of an additional 9 millionths of a second per month.  The \$(235 \times 10^{-12}) \times N^2\$ term works out to 20 millionths of a second per month per month.  At this rate, it would take millions of years before the time of the new moon is delayed by a whole night due to drag forces!</p>

<p>Once you drop the insignificant \$N^2\$ terms, the quadratic expressions become linear.  You no longer need to loop (nor do you need to solve a quadratic equation).</p>

<p><code>$now</code> is a misnomer, considering that the time can be overridden on the command line.</p>

<p>To decide between the previous and the following month, just round off <code>$moons</code> to the nearest integer.</p>

<pre><code>sub days_until_new_moon {
    my $date = shift // time;
    my $days = ($date - Y2K_EPOCH) / SECS_PER_DAY;

    # Use sprintf() for rounding: http://stackoverflow.com/q/178539
    my $moons = sprintf('%.0f', ($days - Y2K_REF) / LUNATION);
    my $newmoon_days = Y2K_REF + LUNATION * $moons;

    # Convert terrestrial time to universal time
    $newmoon_days -= U_TO_S;

    return $newmoon_days - $days;
}

say days_until_new_moon(@ARGV);
</code></pre>
    </div>