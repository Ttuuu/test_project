<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>for (c = c; c &lt; 26; baseNum++)
</code></pre>

<p>This line lead to "<code>warning CS1717: Assignment made to same variable; did you mean to assign something else?</code>"</p>

<pre><code>if (baseNum &gt; 9)
</code></pre>

<p>Instead of pay for a comparison in each iteration of the loop, directly set <code>baseNum</code> to 9.</p>

<pre><code>int sum = 0;
int baseNumD = baseNum;
while (baseNumD != 0)
{
    sum += baseNumD % 10;
    baseNumD /= 10;
}
</code></pre>

<p>You could move this into a function, because "summing digits of number" can be reused in many other challenges.</p>

<pre><code>public static void TryAll(long x, long y)
</code></pre>

<p>Try to use meaningful names. What does <code>x</code> or <code>y</code> mean here?</p>

<pre><code>for (int i = 2; i &lt; 10; i++)
</code></pre>

<p>Same here, a better name for <code>i</code> could be <code>exp</code> or <code>exponent</code>. Note also that 10 might be to low to handle some cases (eg: a<sup>32</sup> = 81 920 000 000 000 000 = 20<sup>13</sup>).</p>

<pre><code>double powered = Math.Pow(y, i);
</code></pre>

<p>Here, you don't have to try all exponentiations from exponents 2 to 9. There's <a href="https://stackoverflow.com/questions/4429044/check-if-one-integer-is-an-integer-power-of-another">many other ways</a> to check if an integer is a power of another.</p>

<pre><code>if (x % y == 0 &amp;&amp; powered == x &amp;&amp; x % 10 != 0)
</code></pre>

<p>Modulo <a href="https://stackoverflow.com/questions/15596318/is-it-better-to-avoid-using-the-mod-operator-when-possible">have a cost</a> and here, it's useless, since you already computed the computation of the power and if <code>powered == x</code> the "is divisible by" check is pointless. Also, I don't understand the <code>x % 10</code>, some expected results are divisible by 10 (check a<sup>32</sup> above).</p>

<hr>

<p>Where your code become slow is that you check for all numbers until you reach the expected results count.</p>

<p>Instead of checking for all of these iterations if the sum of digits can be powered to reach the current iteration, let's take the problem in another side.</p>

<p>Let's try, only all the powered bases from 7 to 100 (arbitrary values that that match possibles representations) and check if the sum of its digits match the base. So, we only test number that are a n<sup>th</sup> power.
Place all these results in a list that you sort to get the real order.</p>

<p>Here, for demonstration purpose, I used a struct embedding all info about results, but you can also just use a List and store the <code>number</code> part.</p>

<p><em>(note that I'm not a c# guru, there's surely some improvements possibles)</em></p>

<pre><code>using System;
using System.Collections.Generic;

public class Program
{
    private const int MinRadix = 7;
    private const int MaxRadix = 100;
    private static List&lt;Result&gt; results = new List&lt;Result&gt;();

    public struct Result
    {
        public long number;
        public long radix;
        public long exp;
    }

    public static void Main(string[] args)
    {
        ComputeResults();
        SortResults();
        PrintResults();
    }

    private static long SumOfDigits(long value)
    {
        long sum = 0;
        while (value &gt; 0)
        {
            sum += value % 10; 
            value /= 10; 
        }
        return sum;
    }

    private static void ComputeResults()
    {
        int count = 0;
        for (long radix = MinRadix; radix &lt;= MaxRadix; ++radix)
        {
            int exp = 1;
            var current = radix;

            while (current &lt; long.MaxValue / radix)
            {
                ++exp; 
                current *= radix;

                if (radix == SumOfDigits(current)) {
                    Result result = new Result();
                    result.number = current;
                    result.radix = radix;
                    result.exp = exp;
                    results.Add(result);
                    ++count;
                }               
            }
        }
    }

    private static void SortResults()
    {
        results.Sort((x, y) =&gt; x.number.CompareTo(y.number));
    }

    private static void PrintResults()
    {
        for (int i = 0; i &lt; results.Count; i++)
        {
            Console.WriteLine($"{i+1}: {results[i].number} = {results[i].radix} ^ {results[i].exp}");   
        }
    }
}
</code></pre>
    </div>