<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You got the result you wanted, so that is a good thing. However, I'm not convinced as to the build up of your classes and the responsibilities of them. A class should to me be self-contained, and have a defined set of responsibilities. </p>

<p>The <code>Board</code> class should only handle stuff directly related to the <code>Board</code>, that is initialisations, placing moves, reporting stuff like free spaces and status of the <code>Board</code>. It shouldn't do game logic like selecting a random move, and I'm a bit uncertain on the end of game reporter. </p>

<p>The <code>Game</code> class, could possible get a better name, would be the better place for me to place the logic of selecting the next position, and most likely the end of game reporter. <code>Game</code> shouldn't update the board directly either, that should have been a method of the <code>Board</code>. That way the game logic and game state would have been better separated.</p>

<p>In addition to that I've got some comments on the actual code, which in general is mostly nice and clean:</p>

<h3><code>Game</code> class</h3>

<ul>
<li><em>Why a singleton?</em> – Is there any reason why your game class is a singleton? It doesn't keep tags across instances, and neither does it have any class methods illustrating the need for it be a singleton.</li>
<li><em>No need for <code>i</code> to count games</em> – You could instead just count down on <code>number_of_games</code>, and check if larger than zero.</li>
<li><p><em>Why is <code>game_in_progress</code> linked to <code>make_move()</code></em> – To me it's unnatural that making a move updates whether the game is in progress or not. Expected return of <code>make_move()</code> would be whether the move was successful or not. I'd rather see something like:</p>

<pre><code>while number_of_games &gt; 0:
  board = Board()
  while board.game_in_progress():
    available_moves = board.get_available_squares()
    board.next_move(random(available_moves))

number_of_games -= 1
</code></pre></li>
<li><em>Next move should be in <code>Board</code></em> – Most of this logic should be in the <code>Board</code> class, with exception of the bits shown in previous code excerpt. This would also allow for safer moves, and easier handling of win/lose situations, as they can be calculated when the move is made.</li>
<li><em>Statistics should be done in this class</em> – It seems a little strange for the <code>Board</code> class to keep statistics, as that belongs more to the one playing the game. Imagine a scenario where you would allow your code to test out various game strategies, like always placing in the first available space, or trying to avoid wins on the other player, or random placements (like you do currently). The statistics connected directly to the <code>Board</code> class would then have a hard time differentiating between the various options. It would be better placed where the games where actually played.</li>
</ul>

<h3><code>Board</code> class</h3>

<ul>
<li><em>Don't test for <code>True</code></em> – In <code>end_of_game_reporter()</code> you test whether <code>self.x_won is True</code>, when a simpler <code>self.x_won</code> would suffice. </li>
<li><em>Extract similar bits of code</em> – Also in <code>end_of_game_reporter()</code>, you do <code>print(self)</code> in all three blocks. Move this in front of the <code>if</code>-statements, and you've saved yourself three code lines, and it's easier to read.</li>
<li><em>Avoid repeated computations</em> – For every time a move is made, you re-calculate the <code>list_of_open_squares</code>. You could have started out with a set of all available positions, and just remove the last move done. Easier to read, and faster.</li>
<li><em>Calculation of win</em> – Various strategy for win calculations exists, and doing the brute force option is not optimal. One better way could be use a little bit of extra memory, and store the sum of each winning combinations. That is have variables containing the sum of each of the three rows, each of the three columns, and each of the two diagonals. When a move is made, you correct the sum of corresponding row, column and diagonals. If the absolute value of either sum equals 3, you've got a winner.</li>
<li><em>Tie game calculation</em> – Using the set from before, if there are no more places available in the set of possible moves, and no one has won yet, it's a tie.</li>
<li><em>Simplify <code>if true: return True</code></em> – In <code>game_over()</code> you could simplify the code a lot as you return the value of the <code>if</code> statement: 

<pre><code>return self.game_won() or self.game_tied()
</code></pre></li>
<li><em>Changing state on end game reporting</em> – By default no end of game reporting is on, if you turn it on, there is no way of turning it back off again. Having a method to set this state, like <code>set_game_reports()</code> accepting a boolean value, and possible move the test inside of <code>end_of_game_reporter()</code> would look nicer.</li>
</ul>

<p><strong>PS!</strong> I'm somewhat rusty in reviewing code, so there might be bits and pieces I've left out, and I've not provided a refactor solution but leaving that for you to work out. Hopefully some of this will help you develop even better code.</p>
    </div>