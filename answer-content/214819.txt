<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>I understand you might have inserted some of the comments only for the sake of this review, but many of them are too verbose and in fact hurt readability. As a C++ programmer, if I see <code>int main()</code>, I know that's the main program without a comment, or if I see <code>#include &lt;thread&gt;</code> I know what it entails. So prefer comments that answer the question "how" instead of "why". Remember that good code is always self-commenting through proper variable names and so on.</p></li>
<li><p>Avoid writing <code>using namespace std;</code>. <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">See here for more</a>.</p></li>
<li><p>To answer your question about includes, no, you need to include a header if you need even a single function from it.</p></li>
<li><p>I would make 0xFF a constant instead of using it as a magic number.</p></li>
<li><p>Avoid using non-const global variables. Specifically, you can make <code>beepCount</code>, <code>substractDelay</code>, <code>noteDuration</code>, <code>shouldUpdateConsole</code> and <code>onSwitch</code> local to the main program. And moreover, is there a reason <code>noteDuration</code> can't be const?</p></li>
<li><p>To the previous point, <code>updateConsole</code> should take an argument <code>bool shouldUpdateConsole</code> so you don't need it to be a global.</p></li>
<li><p>You can use <code>\n</code> instead of <code>std::endl</code> for line breaks when you don't need to flush the buffer as well. <a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">See here</a>.</p></li>
<li><p>To make a constant only visible inside a .cpp, use an unnamed namespace:</p>

<pre><code>#include "notes.h"
#include &lt;cmath&gt;

namespace 
{
    const float a = std::pow( 2.0f , 1.0f/12 );
}

const int octave = 12;

float noteHz( int note ) 
{
    return 440.0f * std::pow( a , note );
}
</code></pre></li>
</ul>
    </div>