<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Compact html is very hard to read and edit.</p>

<blockquote>
<pre><code>                 strBeforeRows = "&lt;head&gt;&lt;style&gt;table, th, td {border: 1px solid gray; border-collapse:" &amp; "collapse;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;" &amp; _
                    "&lt;p&gt;" &amp; "Hello " &amp; Recipient &amp; "," &amp; "&lt;br&gt;&lt;br&gt;" &amp; vbNewLine &amp; vbNewLine &amp; _
                    "You have been assigned the following loan for " &amp; CustName &amp; "." &amp; "&lt;/p&gt;" &amp; vbNewLine &amp; _
                    "&lt;table style=""width:100%""&gt;&lt;tr&gt;" &amp; _
                    "&lt;th bgcolor=""#bdf0ff""&gt;Product&lt;/th&gt;" &amp; _
                    "&lt;th bgcolor=""#bdf0ff""&gt;Loan Amount&lt;/th&gt;" &amp; _
                    "&lt;th bgcolor=""#bdf0ff""&gt;Closing Date&lt;/th&gt;" &amp; _
                    "&lt;th bgcolor=""#bdf0ff""&gt;Title Company&lt;/th&gt;" &amp; _
                    "&lt;th bgcolor=""#bdf0ff""&gt;Notes&lt;/th&gt;" &amp; _
                    "&lt;th bgcolor=""#bdf0ff""&gt;Contract Price&lt;/th&gt;&lt;/tr&gt;"
&lt;head&gt;&lt;style&gt;table, th, td {border: 1px solid gray; border-collapse:collapse;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Hello Zack,&lt;br&gt;&lt;br&gt;
</code></pre>
</blockquote>

<p>Likewise the output is equally hard to read.</p>

<pre><code>You have been assigned the following loan for Bugs.&lt;/p&gt;
&lt;table style="width:100%"&gt;&lt;tr&gt;&lt;th bgcolor="#bdf0ff"&gt;Product&lt;/th&gt;&lt;th bgcolor="#bdf0ff"&gt;Loan Amount&lt;/th&gt;&lt;th bgcolor="#bdf0ff"&gt;Closing Date&lt;/th&gt;&lt;th bgcolor="#bdf0ff"&gt;Title Company&lt;/th&gt;&lt;th bgcolor="#bdf0ff"&gt;Notes&lt;/th&gt;&lt;th bgcolor="#bdf0ff"&gt;Contract Price&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td "col width=10%"&gt;Product&lt;/td&gt;&lt;td "col width=10%"&gt;Loan Amt&lt;/td&gt;&lt;td "col width=10%"&gt;12/3/2019&lt;/td&gt;&lt;td "col width=10%"&gt;Acme Title&lt;/td&gt;&lt;td "col width=10%"&gt;Notes&lt;/td&gt;&lt;td "col width=10%"&gt;Price&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;
</code></pre>

<p>Writing well formatted code that produces well formatted html will make it much easier to read, write and modify procedures.</p>

<p>Although <code>bgcolor</code> is supported by Outlook Mail html editor, it is depreciated.  Use <code>background-color</code> instead.</p>

<pre><code>"&lt;td ""col width=10%""&gt;"
</code></pre>

<p><code>col</code> is not an attribute, it is a html tag.  I recommend using any relevant table section tags (Col tags belong in a colgroup, column headers a tr in the thead, standard cells in a tr in the tbody...etc.)   </p>

<p>Using single quotes will make your code easier to read.</p>

<pre><code>&lt;col width='10%'&gt;
</code></pre>

<p>Why use inline styles when you have a style tag?</p>

<pre><code>"&lt;th bgcolor=""#bdf0ff""&gt;Product&lt;/th&gt;"


.HTMLBody = strAll &amp; "&lt;br&gt;" &amp; .HTMLBody
</code></pre>

<p>Replace the HTMLBody altogether, don't concatenate it to your html.  The default HTMLBody could potentially cause your message to display improperly.</p>

<p>Generating the html template, compiling the table rows, and creating the MailItem should be separate functions called by the <code>Worksheet_Change</code> event.  This will make it easier to test each part of the code.  </p>

<h2>Sample Code</h2>

<p>Notice that I put a Stop after I display the message.  This allows me to make changes to the functions that generate the html and update the message htmlbody.  This is a massive time saver. </p>

<pre><code>Option Explicit

Public Const TBodyMarker As String = "@tbody"

Sub CreateTestEmail()

    Dim Outlook As Object
    Set Outlook = CreateObject("Outlook.Application")

    Dim MailItem As Object
    Set MailItem = Outlook.CreateItem(0)

    With MailItem
        Const olFormatHTML As Long = 2
        .BodyFormat = olFormatHTML
        .HTMLBody = TestMessage
        .Display

        Stop
    End With

End Sub

Function TestMessage() As String
     Dim HTMLBody As String
    HTMLBody = getLoanMessageHTML

    Dim TBody As String
    TBody = getTR("Clothing", "$10,000", #1/1/2020#, "Acme Title", "Blah Blah Blah", "$200.00")
    TBody = TBody &amp; vbNewLine &amp; getTR("Purses", "$1000", #12/1/2019#, "Acme Title", "Blah Blah Blah", "$50.00")
    HTMLBody = Replace(HTMLBody, TBodyMarker, TBody)
    TestMessage = HTMLBody
End Function

Function getLoanMessageHTML()
    Dim list As Object
    Set list = CreateObject("System.Collections.Arraylist")
    list.Add "&lt;html&gt;"
    list.Add Space(2) &amp; "&lt;head&gt;"
    list.Add Space(4) &amp; "&lt;style&gt;"
    Rem Table
    list.Add Space(6) &amp; "table {"
    list.Add Space(8) &amp; "width:100%;"
    list.Add Space(6) &amp; "}"
    Rem Table TH TD
    list.Add Space(6) &amp; "table, th, td {"
    list.Add Space(8) &amp; "border:1px solid gray;"
    list.Add Space(8) &amp; "border-collapse:collapse;"
    list.Add Space(6) &amp; "}"
    Rem TH
    list.Add Space(6) &amp; "th {"
    list.Add Space(8) &amp; "background-color:#bdf0ff;"
    list.Add Space(6) &amp; "}"
    list.Add Space(4) &amp; "&lt;/style&gt;"
    list.Add Space(2) &amp; "&lt;head&gt;"
    list.Add Space(2) &amp; "&lt;body&gt;"
    Rem Message To Zack
    list.Add Space(4) &amp; "&lt;p&gt;Hello Zack,&lt;br&gt;&lt;br&gt;"
    Rem Table
    list.Add Space(4) &amp; "&lt;table&gt;"
    Rem Column Group
    list.Add Space(6) &amp; "&lt;colgroup&gt;"
    list.Add Space(8) &amp; "&lt;col width='10%'&gt;"
    list.Add Space(8) &amp; "&lt;col width='10%'&gt;"
    list.Add Space(8) &amp; "&lt;col width='10%'&gt;"
    list.Add Space(8) &amp; "&lt;col width='10%'&gt;"
    list.Add Space(8) &amp; "&lt;col width='10%'&gt;"
    list.Add Space(8) &amp; "&lt;col width='10%'&gt;"
    list.Add Space(6) &amp; "&lt;/colgroup&gt;"
    Rem THead
    list.Add Space(6) &amp; "&lt;thead&gt;"
    list.Add Space(8) &amp; "&lt;tr&gt;"
    list.Add Space(10) &amp; "&lt;th&gt;Product&lt;/th&gt;"
    list.Add Space(10) &amp; "&lt;th&gt;Loan Amount&lt;/th&gt;"
    list.Add Space(10) &amp; "&lt;th&gt;Closing Date&lt;/th&gt;"
    list.Add Space(10) &amp; "&lt;th&gt;Title Company&lt;/th&gt;"
    list.Add Space(10) &amp; "&lt;th&gt;Notes&lt;/th&gt;"
    list.Add Space(10) &amp; "&lt;th&gt;Contract Price&lt;/th&gt;"
    list.Add Space(8) &amp; "&lt;/tr&gt;"
    list.Add Space(6) &amp; "&lt;/thead&gt;"
    list.Add Space(6) &amp; "&lt;tbody&gt;"
    Rem TBody
    list.Add Space(6) &amp; TBodyMarker
    list.Add Space(6) &amp; "&lt;/tbody&gt;"
    list.Add Space(4) &amp; "&lt;/table&gt;"
    list.Add Space(2) &amp; "&lt;/body&gt;"
    list.Add "&lt;/html&gt;"

    getLoanMessageHTML = Join(list.ToArray, vbNewLine)
End Function

Function getTR(ParamArray TDValues() As Variant)
    Dim list As Object
    Set list = CreateObject("System.Collections.Arraylist")
    Dim Item As Variant
    list.Add Space(8) &amp; "&lt;tr&gt;"
    For Each Item In TDValues
        list.Add Space(10) &amp; "&lt;td&gt;" &amp; Item &amp; "&lt;/td&gt;"
    Next
    list.Add Space(8) &amp; "&lt;/tr&gt;"
    getTR = Join(list.ToArray, vbNewLine)
End Function
</code></pre>

<p>Having formatted output will also save you a lot of time and aggravation in the long run.</p>

<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;style&gt;
      table {
        width:100%;
      }
      table, th, td {
        border:1px solid gray;
        border-collapse:collapse;
      }
      th {
        background-color:#bdf0ff;
      }
    &lt;/style&gt;
  &lt;head&gt;
  &lt;body&gt;
    &lt;p&gt;Hello Zack,&lt;br&gt;&lt;br&gt;
    &lt;table&gt;
      &lt;colgroup&gt;
        &lt;col width='10%'&gt;
        &lt;col width='10%'&gt;
        &lt;col width='10%'&gt;
        &lt;col width='10%'&gt;
        &lt;col width='10%'&gt;
        &lt;col width='10%'&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;Product&lt;/th&gt;
          &lt;th&gt;Loan Amount&lt;/th&gt;
          &lt;th&gt;Closing Date&lt;/th&gt;
          &lt;th&gt;Title Company&lt;/th&gt;
          &lt;th&gt;Notes&lt;/th&gt;
          &lt;th&gt;Contract Price&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
              &lt;tr&gt;
          &lt;td&gt;Clothing&lt;/td&gt;
          &lt;td&gt;$10,000&lt;/td&gt;
          &lt;td&gt;1/1/2020&lt;/td&gt;
          &lt;td&gt;Acme Title&lt;/td&gt;
          &lt;td&gt;Blah Blah Blah&lt;/td&gt;
          &lt;td&gt;$200.00&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Purses&lt;/td&gt;
          &lt;td&gt;$1000&lt;/td&gt;
          &lt;td&gt;12/1/2019&lt;/td&gt;
          &lt;td&gt;Acme Title&lt;/td&gt;
          &lt;td&gt;Blah Blah Blah&lt;/td&gt;
          &lt;td&gt;$50.00&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>The sample code above is just a mockup.  In practice I might store the html template in a textbox for easier viewing and modifications.  I would also write a message class with settings to save, send or display the email.  IMO having it all wrapped up in a class will make it easier to test.</p>

<h2>Sample Class: EmailIyem</h2>

<pre><code>Option Explicit

Private MailItem As Object
Private Outlook As Object

Public Property Get GetMailItem() As Object
    Rem Some Code
End Property

Public Property Get GetOutlook() As Object
    Rem Some Code
End Property

Public Function CreateMailItem() As Object
    If Not MailItem Is Nothing Then
        Rem What do you want to do here?
        Rem Do you want to throw an Error?
        Rem Or have a Msgbox() propting to replace the current MailItem?
    End If
    If Outlook Is Nothing Then
        Rem What do you want to do here?
        Set Outlook = CreateObject("Outlook.Application")
    End If

    Set MailItem = Outlook.CreateItem(0)
End Function

Public Function Send() As Boolean
    Rem Raise Error if MailItem is Nothing
    Rem Attempt to Send the MailItem and return the True if sent
End Function

Public Sub Display()
    Rem Raise Error if MailItem is Nothing
    MailItem.Display
End Sub

Public Function Save() As Boolean
    Rem Raise Error if MailItem is Nothing
    Rem Attempt to Save the MailItem and return the True if Saved
End Function

Public Property Get HTMLBody() As String
    Rem Raise Error if MailItem is Nothing
    HTMLBody = Me.GetMailItem.HTMLBody
End Property

Public Property Let HTMLBody(ByVal newHTMLBody As String)
    Rem Raise Error if MailItem is Nothing
    Me.GetMailItem.HTMLBody = newHTMLBody
End Property

Public Property Get Subject() As String
    Rem Raise Error if MailItem is Nothing
    Subject = Me.GetMailItem.Subject
End Property

Public Property Let Subject(ByVal newSubject As String)
    Rem Raise Error if MailItem is Nothing
    Me.GetMailItem.Subject = newSubject
End Property

Public Property Get BCC() As String
    Rem Raise Error if MailItem is Nothing
    BCC = Me.GetMailItem.BCC
End Property

Public Property Let BCC(ByVal newBCC As String)
    Rem Raise Error if MailItem is Nothing
    Me.GetMailItem.BCC = newBCC
End Property

Public Property Get CC() As String
    Rem Raise Error if MailItem is Nothing
    CC = Me.GetMailItem.CC
End Property

Public Property Let CC(ByVal newCC As String)
    Rem Raise Error if MailItem is Nothing
    Me.GetMailItem.CC = newCC
End Property
</code></pre>

<p>This is just a rough muck-up.  The purpose of the class is to encapsulate the methods, settings and error handling associated for working with MailItems.  Avoid adding feature that are specific to the current project.  These features can easily be implemented in another class or module.  Keeping the logic separate from the implementation will allow you to reuse the class in many other projects.</p>

<p>For example:</p>

<p>Instead of hard coding an html template and having a routine that builds a specific table, you could create a Template property and a InsertHTML method.</p>

<pre><code>Public Property Get HTMLTemplate() As String

End Property

Public Property Let HTMLTemplate(ByVal newHTMLTemplate As String)

End Property

Public Function InsertHTML(ByVal Find As String, ByVal Replacement As String) As Boolean
    If InStr(Me.HTMLTemplate, Find) &gt; 0 Then
        Me.HTMLTemplate = Replace(Me.HTMLTemplate, Find, Replacement)
        InsertHTML = True
    End If
End Function
</code></pre>
    </div>