<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Runnable Review</h2>

<p>From <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html" rel="nofollow noreferrer">Reference Docs</a>:</p>

<blockquote>
  <p>When an object implementing interface <code>Runnable</code> is used to create a
  thread, starting the thread causes the object's <code>run</code> method to be
  called in that separately executing thread.</p>
</blockquote>

<p>This goes completely against the <a href="https://en.wikipedia.org/wiki/UML_state_machine#Run-to-completion_execution_model" rel="nofollow noreferrer">run-to-completion model</a> of a state machine. <code>Runnable</code> is implied to run in a dedicated thread, while your state machine operations (like transitions) are meant to run in the main state machine thread. So I suggest to create a custom <code>ITransition</code> interface.</p>

<h2>State Machine Review</h2>

<blockquote>
  <p><em>Is my state machine a state machine? The input it receives aren't any triggers or so, but a target state it should transition to.</em></p>
</blockquote>

<p>There is no single formal definition of a state machine. Different specifications such as <em>Mealy</em>, <em>Moore</em> and <em>UML</em> exist. And even within these specifications, you are not limited to using formal constraints. So yes, your state machine is a state machine, as you have states, transitions and a run-to-completion flow <code>go</code>. In fact, your state machine is a subset of a <a href="https://en.wikipedia.org/wiki/Mealy_machine" rel="nofollow noreferrer">Mealy machine</a>, where transitions are the driver for state changes. This can be seen in <code>go</code>:</p>

<blockquote>
<pre><code>log.trace("Going to state " + state);
runnables.forEach(Runnable::run);   // Mealy flow with transitions
currentState = state;
</code></pre>
</blockquote>

<p>If you would have picked a <a href="https://en.wikipedia.org/wiki/Moore_machine" rel="nofollow noreferrer">Moore machine</a> instead, <code>go</code> would have looked like this:</p>

<pre><code>log.trace("Going to state " + state);
currentState.exit();     // Moore machine Exit old state
currentState = state;
currentState.enter();    // Moore machine Enter new state
</code></pre>

<p>I do have a couple of considerations to make this state machine more robust:</p>

<h3>Error Handling</h3>

<p>When no valid transition is found, you <code>throw IllegalArgumentException("There is no valid transition!")</code> leaving the state machine in the current state. Who should handle the error? In a run-to-completion model, it is expected that each <em>run step</em> completes, even if an error occurs. I would opt adding an <em>error state</em> with a default transition to this state on any error in any other state.</p>

<h3>Transition Integrity</h3>

<p>When transitioning, you are calling the transition behavior <code>runnables.forEach(Runnable::run)</code> be careful that anything may happen in these operations, including throwing errors (already discussed in the previous point) and other state changes (calling <code>go</code> inside a transition). This latter flow is violating the flow integrity, as the current transitions get put on hold, new transitions take place, and then the remaining previous (obsolete) transitions continue, resulting in unwanted transitions. This could be solved by adding a boolean <code>isTransitioninig</code> in <code>go</code> and throwing an error when <code>go</code> is called from within another ongoing transition.</p>

<hr>

<h2>Builder Review</h2>

<blockquote>
  <p><em>Is my builder really a builder?</em></p>
</blockquote>

<p>You have designed a fluent API for building a state machine with its transitions. This definately is a builder pattern.</p>

<blockquote>
<pre><code>StateMachineBuilder
    .create(Human.class)
        .from(Human.UNBORN)
        .to(Human.DEAD, this::died);
</code></pre>
</blockquote>

<p>I would indent and nest each builder method, though, to make the hierarchy more clear.</p>

<blockquote>
  <p><em>Is there a simple way to not allow multiple from calls like <code>builder.from(KID).from(ADULT)</code>? I know I could introduce another class
  as return value for the first call to form, and using <code>TransitionAdder</code>
  only for to, but it seems like an overkill.</em></p>
</blockquote>

<p>It's unfortunate you find your own suggestion overkill. You should have indeed split the <code>TransitionAdder</code> up in a <code>TransitionFromBuilder</code> and <code>TransitionToBuilder</code>. This way, you could preserve integrity by removing <code>from()</code> from <code>TransitionFromBuilder</code> and having <code>to()</code> return a <code>TransitionFromBuilder</code>. You could always create a public reference back to the previous level. From <code>TransitionToBuilder</code> you should be able to go back to <code>TransitionFromBuilder</code> and from <code>TransitionFromBuilder</code> back to <code>StateMachineBuilder</code>.</p>

<hr>
    </div>