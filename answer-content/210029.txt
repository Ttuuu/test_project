<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/users/24208/alecxe">@alecxe</a> has the right idea, but there is more to improve</p>

<h1>Review</h1>

<ul>
<li><p><code>sys.path[0]</code> is unnecessary</p>

<p>The default of <code>open(filename)</code> will look in the in the current directory, so there is no need to convert it to a full path beforehand</p></li>
<li><p><code>dictionary</code> should also be a CONSTANT</p>

<p>Since dictionary is a global constant it should be written in <code>ALL_CAPS</code></p>

<p>Secondly this variable is oddly named, <code>dictionary</code> is a datatype (hashmap) in python.</p></li>
<li><p>Change the data type of <code>dictionary</code></p>

<p>@alecxe mentioned this as well, but a <code>set</code> will give O(0) lookup, instead of O(n), we can make the dictionary of words a set for faster lookup times</p></li>
<li><p><code>_</code> variables are used for variables you don't use later on.</p>

<p>You do use the variable so rename it.</p></li>
</ul>

<h1>Code</h1>

<pre><code>from itertools import permutations

WORD_FILE = 'words.txt'

def read_words(filename):
    with open(filename) as f:
        return {word.strip().lower() for word in f.readlines()}

def get_possible_words(target, word_set):
    used_words = set()
    for comb in get_permutations(target):
        if comb in word_set:
            used_words.add(comb)
    return used_words or "There are no combinations made with those letters."

def get_permutations(target):
    for i in range(1, len(target) + 1):
        for subset in permutations(target, i):
            yield(''.join(subset))

def main():
    target = input("Please enter each letter seperated by spaces: ").split()
    print(get_possible_words(target, read_words(WORD_FILE)))

if __name__ == '__main__':
    main()
</code></pre>
    </div>