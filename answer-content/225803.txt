<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><a href="https://hackernoon.com/solid-principles-made-easy-67b1246bcdf" rel="noreferrer">SOLID Principles</a></h1>

<h2>Single responsibility principle</h2>

<blockquote>
  <p>A class should have one, and only one, reason to change.</p>
</blockquote>

<p>This class should take a PlayerRequest and update the state of the corresponding Players. </p>

<p>The <code>public void play</code> method does more than that, by changing the state of the current game, creating a new round or pushing the latest turn. It would be easier to read the code if the <code>play</code> method was just updating the states and no more. The management of the current Round and Turn should be delegated to a different dependency. Since the Responsibility of the Service class is to update the states, it would be acceptable to have another method <code>wait</code> changing the states to <code>State.WAITING</code>.</p>

<p>Creating unit tests for this class would be then much easier, as we would need only to test the expected change of states and everything else would be mocked.</p>

<h2>Open-Closed Principle</h2>

<blockquote>
  <p>You should be able to extend a classâ€™s behavior, without modifying it.</p>
</blockquote>

<p>This block of code, even if moved to another class, could violate the Open-Closed Principle:</p>

<pre><code>      Turn turn = new Turn(player, Enum.valueOf(Move.class, playRequest.getMove()));
      if (currentSession.rounds().isEmpty()) {
        createNewRound(turn, currentSession);
      } else if (!currentSession.rounds().isEmpty()) {
        Round latestRound = currentSession.latestRound();
        if (OVER.equals(latestRound.getState())) {
          createNewRound(turn, currentSession);
        } else if (PLAYING.equals(latestRound.getState())) {
          latestRound.pushLatestTurn(turn);
        }
      }
</code></pre>

<p>It is not clear from the code if there are more possible Round States than <code>OVER</code> and <code>PLAYING</code>, but if the Game was extended and there was a new State to be handled (e.g. an <code>EXTRA</code> round), this code block would need to be changed to address it. The solution is to depend upon an abstraction to handle the Round management. Concrete classes will then handle the implementation for the different possible Round States.</p>

<h2>Liskov substitution principle</h2>

<blockquote>
  <p>Let <span class="math-container">\${\displaystyle \phi (x)}\$</span> be a property provable about objects <span class="math-container">\${\displaystyle x}\$</span> of type T. Then <span class="math-container">\${\displaystyle \phi (y)}\$</span> should be true for objects <span class="math-container">\${\displaystyle y}\$</span> of type S where S is a subtype of T.</p>
</blockquote>

<p>Following this principle will be a consequence of the abstraction made for the previous principle. The derived classes will have to not alter the expected behavior of their parent classes. This principle will be ensured by adding the correct assertions (postconditions) in the unit tests.</p>

<h2>Interface Segregation Principle</h2>

<blockquote>
  <p>Make fine grained interfaces that are client specific.</p>
</blockquote>

<p>As @RoToRa suggested, we would need to see the injected interfaces. They should be fine grained in order that the clients (derived classes) will only implement the methods they really use.</p>

<h2>Dependency Inversion Principle</h2>

<blockquote>
  <p>Depend on abstractions, not on concretions.</p>
</blockquote>

<p>Here it is pretty straight-forward: the injected dependencies of the <code>GameplayService</code> class should be abstractions (i.e. abstract classes or interfaces). Then it would be easy to change the behavior of the class in case the rules of the Game are extended.</p>

<h1>General comments</h1>

<p>The best way to check if your code is clean and well-written is to cover it by Unit Tests, even better if it is done using <a href="https://en.wikipedia.org/wiki/Test-driven_development" rel="noreferrer">TDD</a>. The complexity of the entire class would be then reduced and the feel of adding collaborators and mocking their behavior would come easier. </p>

<p>Any possible null pointer exceptions, bugs or redundancies in the code would also be avoided during Unit Testing, like this unnecessary <code>if</code> condition of the <code>else</code> branch:</p>

<pre><code>else if (!currentSession.rounds().isEmpty())
</code></pre>

<p>I would also use lambdas when working with Optionals and typical Java 8 features, e.g.:</p>

<pre><code>resultOptional.ifPresent(result -&gt; {...})
</code></pre>
    </div>