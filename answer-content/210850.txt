<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bugs</h3>

<ul>
<li><code>IndexOf("BC.xABC..ABC", "BC..ABC")</code> does not find a match, because your good-suffix table logic does not calculate shifts for situations where a suffix of the match is a prefix of pattern.</li>
<li><code>IndexOf("x.ABC..ABC", "..ABC")</code> fails with an <code>IndexOutOfRangeException</code>. This is because you always apply the good-suffix skip logic (the Galil rule) after a good-suffix shift, even when the suffix did not occur elsewhere in the pattern.</li>
</ul>

<h3><code>IndexOf</code></h3>

<ul>
<li>Returning 0 if pattern is an empty string leads to inconsistent results: <code>IndexOf(text.Substring(1), "")</code> returns 0, so you'd expect the result of <code>IndexOf(text, "")</code> to include 1, but that's not the case. I would throw an exception instead.</li>
<li><code>IndexOf</code> is public, but it doesn't check whether it's arguments are valid. I'd expect an <code>ArgumentNullException</code> if either <code>text</code> or <code>pattern</code> is null.</li>
<li>I would rename this method to <code>IndexesOf</code>. It's more accurate, and it allows you to make it an extension method without name-clashes.</li>
<li>The <code>if (goodSuffixCheck == 0)</code> check is only useful if the previous check succeeded, so this should be moved into the above <code>if</code> body. This happens inside a loop after all.</li>
<li>The name <code>matched</code> sounds like a boolean - <code>matchLength</code> is a more descriptive name.</li>
<li>In the bad-character shift lookup, use <code>TryGetValue</code> instead of <code>ContainsKey</code>, so you only need a single lookup.</li>
<li>The comment <code>// In case the bad character does exist in the pattern // We find the right most occurence of it and align them</code> is not correct - you don't want the right-most occurrence, but the first occurrence to the left of the current position.</li>
<li><code>if (goodSuffixShifts[matchLength] == 0) { goodSuffixShift = pattern.Length; }</code> - why not store the pattern length in this shift table during pre-processing?</li>
<li>While it's useful to see a description of a complicated algorithm, inserting such large comments in-between the code makes it more difficult to get an overview of the code itself, because it's so fragmented. I would prefer fewer and much more succinct in-line comments, and - if necessary - a more extensive explanation elsewhere (such as at the top of the file).</li>
</ul>

<h3><code>BuildBadCharacterShifts</code></h3>

<ul>
<li>You can shorten <code>Dictionary&lt;char, int[]&gt; badCharacterShifts = new Dictionary&lt;char, int[]&gt;();</code> to <code>var badCharacterShifts = new Dictionary&lt;char, int[]&gt;();</code>.</li>
<li><code>out</code> parameters can be declared in-line: <code>if (!badCharacterShifts.TryGetValue(c, out int[] shift))</code>.</li>
<li>Comments like <code>// A new array is by default zero filled</code> are clutter, in my opinion. There are plenty of places to read up on C# if someone is not sufficiently familiar with the language. I guess it depends on the target audience though.</li>
<li>Why not mark occurrences with <code>-1</code>? That saves a tiny bit of work further down. You may want to add an assertion in <code>IndexOf</code> to make sure that a <code>-1</code> shift is never used, just in case.</li>
<li>The <code>foreach</code> loop can be simplified - the <code>lastShift == -1</code> edge-case can be taken care of by the general <code>shift[i] = ++lastShift</code> case, if you initialize <code>lastShift</code> to 0.</li>
</ul>

<h3><code>BuildGoodSuffixShifts</code></h3>

<ul>
<li>I'd rename <code>s</code> to <code>pattern</code>, for consistency's sake.</li>
<li>Using both <code>length</code> and <code>s.Length</code> is inconsistent. Personally I'd stick to <code>s.Length</code>, so it's more obvious what length you're working with.</li>
<li>This method is fairly long. A helper method for finding a maximal suffix for a certain end position would be useful - not only to make this method shorter, but properly named helper methods can also make the intention of the code more clear. This is actually a good place for a local function.</li>
<li>Many comments here look very similar to the code, with a lot of <code>left + length - right</code> and similar expressions. That's like saying that <code>Frob(widget)</code> frobs the widget, without explaining what frobbing is or why the widget needs to be frobbed. It doesn't really make the code easier to understand.</li>
<li>The <code>if (left != -1)</code> part is actually an optimization, but that's not clearly explained. When inside an already known maximal suffix, it's sometimes possible to skip a few comparisons, but neither the code nor the comments make that very clear (expressions like <code>i + length - right + 1</code> aren't as easy to understand as I'd like).</li>
<li>Picking better initial values sometimes lets you simplify code. For example, initializing <code>left</code> to <code>s.Length</code> removes the need for that <code>left != -1</code> check.</li>
</ul>

<h3>Other methods</h3>

<ul>
<li>There's no need for that <code>if/else</code> check in <code>SubstringLeftRight</code> - the <code>else</code> body already takes care of the empty-string edge-case.</li>
<li>I'd rename <code>left</code> and <code>right</code> to <code>startIndex</code> and <code>endIndex</code>, to be more consistent with <code>string.Substring</code>'s parameter names.</li>
<li>The <code>right &gt;= 0</code> assert in <code>SubstringLeftRight</code>'s <code>else</code> body is superfluous.</li>
<li><code>IsSuffix</code> can be simplified by using <code>string.EndsWith</code>. And with that, there's very little need left for <code>SubstringLeftRight</code>.</li>
</ul>

<h3>Other notes</h3>

<ul>
<li>I would add messages to those <code>Debug.Assert</code> calls, so you can immediately see which assertion failed.</li>
<li>If you plan to use this code, then you may want to create a <code>SearchPattern</code> class that can store the shift tables for a pattern, so searching multiple texts with the same pattern will be faster because you don't need to repeat the pre-processing each time.</li>
<li>Using LeetCode as a 'unit test repository' is a smart idea, but note that you're returning the index of all matches, while their tests are geared towards finding only the first match. That might explain why those tests didn't catch the above two bugs. What I did was a basic form of fuzz-testing: generate a few random patterns, randomly join them together (a few hundred times for the text, a few times for the pattern) and feed that into the algorithm, then repeat that a few thousand times. The next step would've been writing a simple verification method (using repeated <code>string.IndexOf</code> calls), but at that point I had already found 2 bugs so I decided that was enough.</li>
</ul>
    </div>