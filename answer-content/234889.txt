<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your original code is simple and straightforward, easy to follow. There are a couple things that might trip you up when maintaining the code and that I would suggest could change.</p>

<ul>
<li>You have a solid list of <code>Private Const</code> declarations at the top of your code. Abstracting the strings into consts is very good practice, but eventually you'll find that it's even better to work around the need for as many of the consts as possible. In this regard, I'll repeat the suggestion from IvenBach that you <a href="https://riptutorial.com/excel-vba/example/11272/worksheet--name---index-or--codename" rel="nofollow noreferrer">create worksheet code names</a> in the IDE. </li>
</ul>

<p>So for my example below, you could rename the worksheets in the IDE manually by editing the Worksheet Properties (Name) field, or by running this short sub (after modifying it as needed):</p>

<pre><code>Private Sub RunOnceToChangeCodeNames()
    '--- you can delete this sub after you run it
    ThisWorkbook.VBProject.VBComponents("Voreinstellungen").Name = "PresetsWS"
    ThisWorkbook.VBProject.VBComponents("Urlaubsantrag").Name = "VacationWS"
    ThisWorkbook.VBProject.VBComponents("Spesen").Name = "ExpensesWS"
End Sub
</code></pre>

<p>Now you can directly refer to any of these worksheets by its code name directly, as in</p>

<pre><code>Debug.Print PresetsWS.Name
</code></pre>

<ul>
<li><p>I'll urge you to be a bit clearer in your variable naming. As an example, you use <code>shortName</code> for the part of the file name in a folder. But I could also interpret <code>shortName</code> to mean it's the shortened name of a person as in "Wolf" for "Wolfgang". So in my example you'll see <code>shortName</code> changed to <code>shortFilename</code> and other similar changes.</p></li>
<li><p>For the refactoring of the <code>ComposeFileName</code> function, there are several points.</p>

<ol>
<li>This is the only code that uses three of the <code>Consts</code> defined above. So I reccommend restricting the scope of these to this function only.</li>
<li>Change the input parameter to be the currently active worksheet, and pass it as a reference (<code>ByRef</code>). Passing the <code>PresetsWS</code> is meaningless because it never changes, whereas the currently active worksheet is significant.</li>
<li>Change the several <code>If</code> statements to a <code>Select Case</code> block. The reason is you'll save from using multiple <code>Exit Function</code> points.  Whether or not that's a good or bad thing is debatable, but I believe in this situation it makes the code cleaner.</li>
<li>Notice also that I've pulled the <code>MonthNumber</code> call out of the statement building the string. This is so I can use <code>Format</code> on the month number to create exactly what I want. I could have built this into the <code>MonthNumber</code> function, but that would make it less flexible if I wanted to use it in the future.</li>
</ol></li>
</ul>

<p>So here's the <code>ComposeShortFilname</code> function:</p>

<pre><code>Private Function ComposeShortFilname(ByRef thisWS As Worksheet) As String
    Private Const VacationApplicationName As String = "Urlaub_Gleittag_Antrag"
    Private Const ExpensesName As String = "Reisekosten"
    Private Const WorkingTime As String = "Arbeitszeit"

    Dim year As String
    year = PresetsWS.Cells(2, 11).Value

    Dim shortName As String
    shortName = PresetsWS.Cells(3, 11).Value

    Dim month As Long
    Select Case thisWS.CodeName
        Case PresetsWS.CodeName
            ComposeFileName = year &amp; "_" &amp; thisWS.CodeName &amp; "_" &amp; shortName

        Case ExpensesWS.CodeName
            month = MonthNumber(thisWS.Cells(4, 3).Value)
            ComposeFileName = Mid(year, 3) &amp; "-" &amp; _
                                           Format(month, "0#") &amp; _
                                           "_" &amp; ExpensesName &amp; "_" &amp; shortName

        Case VacationWS.CodeName
            ComposeFileName = year &amp; "_" &amp; VacationApplicationName &amp; _
                              "_(" &amp; Format(Date, "mm-dd-yyyy") &amp; ")_" &amp; shortName

        Case Else
            month = MonthNumber(thisWS.Name)
            ComposeFileName = Mid$(year, 3) &amp; "-" &amp; _
                                           Format(month, "0#") &amp; "_" &amp; _
                                           WorkingTime &amp; "_" &amp; shortName
    End Select
End Function
</code></pre>

<ul>
<li>I agree with others that your <code>FetchMonthNumber</code> routine is ripe for refactoring. However, I believe it can be greatly simplified using Siddarth's <a href="https://stackoverflow.com/a/11895352/4717755">valuable answer here</a>. </li>
</ul>

<p>So the routine collapses to</p>

<pre><code>Private Function MonthNumber(ByVal monthName As String) As Long
    MonthNumber = Month(DateValue("01 " &amp; monthName &amp; " 2019"))
End Function
</code></pre>

<p>Notice that the function relies on the application setting for the country code. As your settings should all be using German, then the month name should be interpreted correctly. Also, I believe that the "Fetch" part of the function name is redundant and can be shortened to simply <code>MonthNumber</code>. (Note that the year in the code statement above really doesn't matter at all.)</p>

<ul>
<li>Lastly, concatenate your strings with an ampersand "&amp;" and don't use a plus sign "+". For <a href="https://stackoverflow.com/a/1727709/4717755">reasons</a>.</li>
</ul>

<p>So here is the whole module is a single block:</p>

<pre><code>Option Explicit

Private Sub RunOnceToChangeCodeNames()
    '--- you can delete this sub after you run it
    ThisWorkbook.VBProject.VBComponents("Voreinstellungen").Name = "PresetsWS"
    ThisWorkbook.VBProject.VBComponents("Urlaubsantrag").Name = "VacationWS"
    ThisWorkbook.VBProject.VBComponents("Spesen").Name = "ExpensesWS"
End Sub

Sub SaveAsPdf()
    Private Const StaffEmailAdress = "StaffEmail@Company.org"
    Dim shortFilename As String
    shortFilename = ComposeShortFilename(ActiveSheet)

    Dim shell As Object
    Set shell = CreateObject("WScript.Shell")

    Dim fileName As String
    fileName = shell.SpecialFolders("MyDocuments") &amp; "\" &amp; shortName &amp; ".pdf"

    ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, _
                                    fileName:=fileName, _
                                    Quality:=xlQualityStandard, _
                                    IncludeDocProperties:=True, _
                                    IgnorePrintAreas:=False, _
                                    OpenAfterPublish:=False

    SendAsMail fileName, StaffEmailAdress, shortFilename
End Sub

Private Sub SendAsMail(fileName As String, receiver As String, subject As String)
    Dim outlook As Object
    Set outlook = CreateObject("Outlook.Application")

    Dim message As Object
    Set message = outlook.CreateItem(0)

    With message
        .Display
        .To = receiver
        .CC = ""
        .subject = subject
        .Attachments.Add fileName
    End With
End Sub

Private Function ComposeShortFilname(ByRef thisWS As Worksheet) As String
    Private Const VacationApplicationName As String = "Urlaub_Gleittag_Antrag"
    Private Const ExpensesName As String = "Reisekosten"
    Private Const WorkingTime As String = "Arbeitszeit"

    Dim year As String
    year = PresetsWS.Cells(2, 11).Value

    Dim shortName As String
    shortName = PresetsWS.Cells(3, 11).Value

    Dim month As Long
    Select Case thisWS.CodeName
        Case PresetsWS.CodeName
            ComposeFileName = year &amp; "_" &amp; thisWS.CodeName &amp; "_" &amp; shortName

        Case ExpensesWS.CodeName
            month = MonthNumber(thisWS.Cells(4, 3).Value)
            ComposeFileName = Mid(year, 3) &amp; "-" &amp; _
                                           Format(month, "0#") &amp; _
                                           "_" &amp; ExpensesName &amp; "_" &amp; shortName

        Case VacationWS.CodeName
            ComposeFileName = year &amp; "_" &amp; VacationApplicationName &amp; _
                              "_(" &amp; Format(Date, "mm-dd-yyyy") &amp; ")_" &amp; shortName

        Case Else
            month = MonthNumber(thisWS.Name)
            ComposeFileName = Mid$(year, 3) &amp; "-" &amp; _
                                           Format(month, "0#") &amp; "_" &amp; _
                                           WorkingTime &amp; "_" &amp; shortName
    End Select
End Function

Private Function MonthNumber(ByVal monthName As String) As Long
    MonthNumber = month(DateValue("01 " &amp; monthName &amp; " 2019"))
End Function
</code></pre>
    </div>