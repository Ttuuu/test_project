<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things I see that may help you improve your code.</p>
<h2>Shouldn't a compressed file be smaller?</h2>
<p>Imagine my surprise when I discovered that a 2037-byte file (the lzw.cpp source code itself) became 3524 bytes when "compressed!"  The original LZW algorithm encoded 8-bit values into 12-bit codes.  This appears to be encoding 8-bit values as 32-bit codes which is unlikely to offer much compression for short files like this.  I did, however, try it on the plain text version of <a href="http://www.gutenberg.org/ebooks/345" rel="nofollow noreferrer">Bram Stoker's <em>Dracula</em></a> and, as expected, the resulting file was about 75% of the size of the original.  Because it's a stream and you don't have access to the length of the source, there may not be much you can do about it, but it's probably a good thing to warn potential users about.</p>
<h2>Rethink the interface</h2>
<p>In order to use the compression, one must first create an object and <em>then</em> use it, perhaps like this:</p>
<pre><code>lzw::lzw_encoder lzw(in, out);
lzw.encode();
</code></pre>
<p>Wouldn't it be nicer to just be able to do this?</p>
<pre><code>lzw::encode(in, out);
</code></pre>
<h2>Write member initializers in declaration order</h2>
<p>The <code>lzw_encoder</code> class has this constructor</p>
<pre><code>lzw_encoder::lzw_encoder(std::istream &amp;is, std::ostream &amp;os)
    : is(is), os(os), current_code(0) {
  for (current_code = 0; current_code &lt; 256; ++current_code) {
    codebook[std::string(1, static_cast&lt;char&gt;(current_code))] = current_code;
  }
}
</code></pre>
<p>That looks fine, but in fact, <code>current_code</code> will be initialized <em>before</em> <code>is</code> and <code>os</code> because members are always initialized in <em>declaration</em> order and <code>current_code</code> is declared before <code>is</code> in this class. To avoid misleading another programmer, you could simply omit <code>current_code</code> since it is already initialized by the declaration:</p>
<pre><code>uint32_t current_code = 0;
</code></pre>
<h2>Use standard algorithms where appropriate</h2>
<p>Initializing the codebook uses this:</p>
<pre><code>for (current_code = 0; current_code &lt; 256; ++current_code) {
  codebook[std::string(1, static_cast&lt;char&gt;(current_code))] = current_code;
}
</code></pre>
<p>This can be improved in a number of ways.  First, we already know how large the codebook will be so we can reduce the number of memory reallocations by telling the compiler that information:</p>
<pre><code>codebook.reserve(256);
</code></pre>
<p>Next, we can avoid the cast and gain a bit of efficiency by using <code>emplace</code>:</p>
<pre><code>for (current_code = 0; current_code &lt; 256; ++current_code) {
    codebook.emplace(std::string(1, current_code), current_code);
}
</code></pre>
<p>I'd also recommend replacing <code>256</code> here with a <code>static constexpr initial_codebook_size</code>.</p>
<h2>Beware of endian-ness differences</h2>
<p>The code currently contains these lines:</p>
<pre><code>auto code_val = codebook[current];
os.write(reinterpret_cast&lt;char *&gt;(&amp;code_val), sizeof(code_val));
</code></pre>
<p>There problem is that depending on whether this is a big-endian or little-endian machine, the encoding will be different.  If the compressed stream is intended to be sent to a different machine, this needs to be consistent.  Consider using something like the POSIX <code>htonl</code> function here.</p>
<h2>Consider restructuring loops</h2>
<p>The problem with <code>while(true)</code> is that it hides the loop exit condition.  Instead of this:</p>
<pre><code>while (true) {
    is.read(buffer, ENCODER_BUFFER_SIZE);
    auto read_length = is.gcount();
    if (read_length == 0)
      break;
    // etc
}
</code></pre>
<p>Consider something like this:</p>
<pre><code>while (is.read(buffer, ENCODER_BUFFER_SIZE)) {
    // handle full block
}
if (is.gcount()) {
    // handle final partial block
}
</code></pre>
<h2>Understand the use of streams</h2>
<p>It's possible that the caller has set one or both streams to throw an <a href="https://en.cppreference.com/w/cpp/io/basic_ios/exceptions" rel="nofollow noreferrer">exception</a> on encountering a failure such as end of file on read.  Either override this or handle it appropriately.</p>
<h2>Consider adding convenience functions</h2>
<p>The handling of blocks for encode and for decode could both be made into functions within the namespace.  This would make the restructuring of loops as mentioned above a bit easier and cleaner and would isolate the handling of the data structures from basic stream I/O.  That may make things a bit easier when you convert to a trie.  Here's my rewrite of the loop:</p>
<pre><code>while (is.read(buffer, ENCODER_BUFFER_SIZE)) {
  encode_buffer(buffer, ENCODER_BUFFER_SIZE);
}
encode_buffer(buffer, is.gcount());
</code></pre>
    </div>