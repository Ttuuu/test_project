<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I want to improve time taken by the recursive solution proposed as an answer by @NlightNFotis:</p>

<ol>
<li>If <code>a ==0</code>, we know that 0 raised to the power of any number will be equal to zero before computing it.</li>
<li>For even numbers, we use the property \$a^{2n}\$=\$(a^{n})^2\$ to reduce by 2 the time taken by the algorithm when calculating the power for an even number.</li>
</ol>

<p>This is just in case we want to use recursion, but it is not an efficient  solution in Python. Just to see the beauty of it, here is an optimization for @NlightNFotis's answer:</p>

<pre><code> def power(a,b):
      """this function will raise a to the power b but recursivelly"""
      #first of all we need to verify the input
      if isinstance(a,(int,float)) and isinstance(b,int):
        if a==0:
          #to gain time
          return 0
        if b==0:
            return 1
        if b &gt;0:
          if (b%2==0): 
          #this will reduce time by 2 when number are even and it just calculate the power of one part and then multiply 
            if b==2:
              return a*a
            else:
              return power(power(a,b//2),2)
          else:
          #the main case when the number is odd
            return a * power(a, b- 1)
        elif not b &gt;0:
          #this is for negatives exposents
          return 1./float(power(a,-b))
      else:
        raise TypeError('Argument must be integer or float')
</code></pre>
    </div>