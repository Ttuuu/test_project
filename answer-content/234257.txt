<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>I also considered trying something like</p>
<pre><code>return Images.objects.filter(articles__publication=self) 
</code></pre>
<p>But I don't think that I can do this because then I have to define <code>Images</code> above
<code>Publications</code>, which won't work with <code>Articles</code> and <code>Images</code>.</p>
</blockquote>
<p>Did you try this?  It seems like it would work and would be the best approach.  You could add a <code>.distinct()</code> clause at the end of the query to avoid converting to a set.</p>
<p>It is best practice to set the <code>related_name</code> and <code>related_query_name</code> variables on your model related fields.  This will make your queries less verbose; <code>article_set</code> and <code>image_set</code> become <code>articles</code> and <code>images</code>, respectively.  See example below</p>
<pre><code>class Article(models.Model):
    filename = models.CharField(max_length=255)
    publication = models.ForeignKey(to=Publication,
                                    on_delete=models.CASCADE,
                                    related_name='articles',
                                    related_query_name='article')


class Image(models.Model):
    name = models.CharField(max_length=255)
    articles = models.ManyToManyField(to=Article,
                                      related_name='images',
                                      related_query_name='image')
</code></pre>
<p>Look at the <a href="https://docs.djangoproject.com/en/3.0/ref/models/querysets/#prefetch-related" rel="nofollow noreferrer"><code>prefetch_related</code></a> documentation.  You are querying the db for every image set on each article.</p>
<pre><code>@property
def images(self):
    images = []
    for article in self.article_set.all():
        images += list(article.images.all())
    return list(set(images))
</code></pre>
<p>Using <code>prefetch_related</code>:</p>
<pre><code>@property
def images(self):
    images = []
    publication = self.objects.prefetch_related('articles__images')
    for article in publication.articles.all():
        for image in article.images.all():
            images.append(image)

    return set(images)
</code></pre>
    </div>