<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no need to comment your code. It is totally broken. Very first thing you need to do is to calculate your complexity. ACM is not about code quality, it is not about language. It is about algorithms. You can write the ugliest code ever but can it be executed? Not a problem if you have <em>satisfying algorithm complexity</em>.</p>

<p>You can not just write different code without thinking about the algorithm and how your changes influence complexity. Moreover, you have to write code that will follow your algorithm.</p>

<p>General strategies for optimizing code for programming challenges? What? If there where such strategies no one would be challenging anymore. That is why it is so difficult and those competitions exist even now.</p>

<p>There are classes of problems that can be solved effectively with specific algorithm\approach. Competition task itself never describes what class or problems it is and what algorithm to use, you have to find it out by yourself. Determine the class of the problem you are trying to solve and then choose an algorithm that will satisfy the problem's memory/time requirements.</p>

<p>First of all. The problem you are trying to solve can be recognized as "implementation" when it didn't relate to any specific class directly. You have to do what it says. Implementation class requires you to be flexible minded, especially in this case because you have time requirements that brute-force didn't meet. </p>

<h2>Algorithm</h2>

<p>We have a set of digits with their costs. How to construct the largest possible number from it? We have to research the relation between numbers order and digits they have.</p>

<p><span class="math-container">$$ 
A &gt; B =
\begin{cases}
  true  &amp; \text{if } dc(A) &gt; dc(B) &amp; \text{(1)}
  \\
  true  &amp; \text{if } dc(A) = dc(B) \text{ and } \\
        &amp; \text{if } h(A) &gt; h(B) \text{ or } h(A) = h(B) \text{ and } t(A) &gt; t(B) &amp; \text{(2)}
  \\
  false &amp; \text{else}
\end{cases}
$$</span></p>

<p>, where <br>
<span class="math-container">\$ X = \left( x_1, x_2, \dots, x_n \right) \$</span> - number or vector of <span class="math-container">\$ n \$</span> digits  <br>
<span class="math-container">\$ dc(X) = |X| = n \$</span> - is number of digits in number (digits count) <br>
<span class="math-container">\$ h(X) = x_1 \$</span> - returns digit of the highest order (head), e.g. <span class="math-container">\$ h(123) = 1 \$</span> <br>
<span class="math-container">\$ t(X) = X' = \left( x_2, \dots, x_n \right) \$</span> - returns number without the highest order digit (tail), e.g. <span class="math-container">\$ t(123) = 23 \$</span></p>

<p>Let's look at those rules and figure out rules that will give us the biggest possible number using the given set of digits.</p>

<p><span class="math-container">\$ \text{(1)} \$</span> consequence: more digits you have - better.  That means we have to be greedy and take as much as possible digits with the lowest price.</p>

<p><span class="math-container">\$ \text{(2)} \$</span> consequence: is it obvious that some times we will have enough amount of paint to replace digit with the bigger one but not enough to add another one. Now we know that we have to replace digits starting from the number's head.</p>

<p>Now let's take a look at how much digits we will have in the worst case. It is around <span class="math-container">\$ 10^6 \$</span>. </p>

<p>With such a number of characters to output, we can not output by a single character at a time because input\output operations took too much time. I hope there is no need to prove that IO takes a long time.</p>

<p>Let's consider using python's big numbers. We will not look at their implementation, just pretend that we have <span class="math-container">\$ 10^6 \$</span> digits to write and we know exactly what is it.</p>

<pre><code>start = time.time()
num = 1;
for _ in range(10**5):
    num = num * 10 + 1
finish = time.time()
print (finish - start)
</code></pre>

<p>Takes 4 seconds to complete and it is still <span class="math-container">\$ 10^5 \$</span>. No, we can not use python's big integers.</p>

<p>We can not build a string because it is <a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str" rel="nofollow noreferrer">an immutable object</a> and we will copy it every time on change, same as with big integers.</p>

<p>More or less acceptable will be to make a list with the required amount of digits in it and then use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join()</code></a>. Let's stick with this approach for a while and continue research.</p>

<p>So, first, we will find the highest digit with the lowest price <span class="math-container">\$ d \$</span>, determine the length of the resulting number <span class="math-container">\$ n = \lfloor \frac{v}{\text{lowest cost}} \rfloor \$</span> and make a resulting list of <span class="math-container">\$ d \$</span> repeated <span class="math-container">\$ n \$</span> times.</p>

<p>Now, while we have some paint to spare, we will loop through digits from the highest to lowest and try to replace as many head digits as possible.</p>

<p>But yeah, now when we spell it, you can see that you do not actually need that list at all. You need to know how much digits to write and who it will be starting from the head of the result.</p>

<p>One can say: "hey, this is greedy problem class, not implementation" - yeah we are all smart now.</p>

<h1>Implementation</h1>

<p>Here is my implementation of described algorithm:</p>

<pre><code>from copy import deepcopy


class Digit(object):
    def __init__(self, _cost, _value):
        self.cost = _cost
        self.value = _value


def main():
    v = int(input())
    a = list(map(int, input().split()))
    a = tuple(Digit(cost, digit+1) for digit, cost in enumerate(a))
    low_digit = deepcopy(min(a, key=lambda digit: digit.cost*10 - digit.value))

    if low_digit.cost &gt; v:
        print(-1)
        return

    digits = v // low_digit.cost
    v -= digits * low_digit.cost
    for i in range(9):
        a[i].cost -= low_digit.cost
    low_digit.cost = 0

    for better in reversed(a):
        if better.cost &gt; 0 and better.value &gt; low_digit.value:
            count = v // better.cost
            v -= count * better.cost
            digits -= count
            print(str(better.value) * count, end='')
    print(str(low_digit.value) * digits)


if __name__ == "__main__":
    main()
</code></pre>
    </div>