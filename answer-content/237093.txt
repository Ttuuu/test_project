<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A function that asks its parameter is not really usable, but let's assume it is for the code review question.</p>

<p>The main error is starting right away to declare and create variables. Allocation certainly is not needed when deleting nodes.</p>

<p>Try postpone creating variables until one needs them. Thus reducing the effort to read the code, and being sure one needs them in that way.</p>

<p>C/C++ can use <em>aliasing</em>: keeping a variable pointing to either <code>head</code> or some <code>node_t-&gt;next</code> field. This really is a special feature of these languages. The usage here would be:</p>

<pre><code>node_t *funzione(node_t *head) {

    printf("Inserisci il valore che vuoi eliminare: \n");

    int x;
    scanf("%d", &amp;x);

    node_t **curr = &amp;head;
    while (*curr != NULL) {
        if ((*curr)-&gt;val == x) {
            node_t *removed = *curr;
            *curr = (*curr)-&gt; next;
            free(removed);
        } else {
            curr = &amp;(*curr)-&gt;next;
        }
    }
    return head;
}
</code></pre>

<p>As you see: the code is more straight forward. The alternative you applied: first handle head, and then in the loop remember the previous node, so its next field may be corrected.</p>

<p>Declaring the <code>removed</code> inside the loop is not more inefficient, neither costs more time or space.</p>

<hr>

<p><strong><em>Sketchy</em></strong></p>

<pre><code>curr ---&gt; head or next field ---&gt; node with data sought
                  insidde the preceding node
</code></pre>

<ul>
<li><code>*curr = xxx;</code>  will change head or next fields value</li>
<li><code>curr = &amp;(*curr)-&gt;next;</code> will remove the node</li>
</ul>

<p>Example:</p>

<pre><code>  head         node1          node2        node3
+-------+    +---------+    +-------+    +-------+
| node1 |---&gt;| +-----+ |    | node3 |---&gt;| null  |---|
+-------+    | |node2| |---&gt;| val2  |    | val3  |
             | + -^--+ |    +-------+    +-------+
             +----|----+
                  |
                 curr
      has the address of the next field containing node2
</code></pre>

<ul>
<li>*curr == node2</li>
<li>(*curr).val == val2</li>
</ul>
    </div>