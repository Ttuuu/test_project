<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, not all of your states are states. In particular, <code>Invalid</code> and <code>Dropping</code> are not states. Instead, they are types of transitions. The model would make more sense like this:</p>

<pre><code>enum State {
   Empty,
   First,
   Second,
   Both,
   Waiting
}

enum Transition {
   NewState(State),
   Invalid,
   Dropping
}
</code></pre>

<p>Further, I think that transition tables aren't a very Rust-y solution. Instead, I'd recommend using a match like so:</p>

<pre><code>match (state, event) {
   (State::Empty, Event::Arrived) =&gt; Transition::NewState(State::First),
   (State::Second, Event::Arrived) =&gt; Transition::NewState(State::Both),
   (State::_, Event::Arrived) =&gt; Transition::Dropped,
   (State::First, Event::FirstFinished) =&gt; Transition::NewState(State::Second),
   (State::Both, Event::FirstFinished) =&gt; Transition::NewState(State::Waiting),
   (State::Second, Event::SecondFinished) =&gt; Transition::NewState(State::Empty),
   (State::Both, Event::SecondFinished) =&gt; Transition::NewState(State::First),
   (State::Waiting, Event::SecondFinished) =&gt; Transition::NewState(State::Second),
   _ =&gt; Transition::Invalid
}
</code></pre>

<p>I would replace all of your <code>[;State::Dropping as usize]</code> arrays with <code>EnumMap</code> from the <code>enum-map</code> crate. It acts like a HashMap but is implemented in terms of an array. If you do that, your code will become somewhat simpler and you should be able to remove all conversions between usize and your state enum.</p>

<p>But, it seems to me that you actually have two pieces of semi-independent state: the state of your two seats. I think your code would simpler if you split them up. Something like this:</p>

<pre><code>enum SeatState {
   Empty,
   Busy,
   Waiting
}

let mut seat_state_1 = SeatState::Empty;
let mut seat_state_2 = SeatState::Empty;

match event {
   Event::Arrived =&gt; {
       if seat_state_1 == SeatState::Empty {
          seat_state_1 = SeatState::Busy;
       } else {
          // handle dropping
       }
   },
   Event::FirstFinished =&gt; {
       if seat_state_1 == SeatState::Busy {
          seat_state_1 = SeatState::Waiting;
       }
   },
   Event::SecondFinished =&gt; {
       if seat_state_2 == SeatState::Busy {
          seat_state_2 = SeatState::Waiting
       }
   }
}

// If the second seat is finished, they leave.
if seat_state_2 == SeatState::Waiting {
   seat_state_2 = SeatState::Empty;
}

// If the first seat is finished and the second seat is free, move over.
if seat_state_1 == SeatState::Waiting &amp;&amp; seat_state_2 == SeatState::Empty {
   seat_state_1 = SeatState::Empty;
   seat_state_2 = SeatState::Busy;
}
</code></pre>

<p>I think this more clearly presents the logic of how the state changes in your model then a transition table.</p>

<p>I would recommend against defining report as a macro as you have down. Don't use a macro when you can use a function. I think part of the reason you did this was because you ended up with a lots of traits on your generic definition. But you should be able to do it more simply:</p>

<pre><code>fn report&lt;T: Copy&gt;(title: &amp;str, counts: &amp;[T]) where f64: From&lt;T&gt; {
    println!("{}", title);
    let events: f64 = counts.iter().copied().map(f64::from).sum();

    for (i, count) in counts.iter().enumerate() {
        let state: State = i.try_into().unwrap();
        println!("{:?}: {}", state, f64::from(*count) / events);
    }

    println!();
}
</code></pre>

<p>You only need the T to be Copy and convertible to f64.</p>
    </div>