<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It can be achieved with less noise in the code. So we can have the guarding logic in the main call as follows:</p>

<pre><code>    public static IEnumerable&lt;IEnumerable&lt;TResult&gt;&gt; ZipManyWithDifferentLengths&lt;TIn, TResult&gt;(
        this IEnumerable&lt;IEnumerable&lt;TIn&gt;&gt; sequences,
        Func&lt;TIn, TResult&gt; resultSelector)
    {
        if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

        var sequenceCollection = sequences as IEnumerable&lt;TIn&gt;[] ?? sequences.ToArray();
        if (sequenceCollection.Any(_ =&gt; _ == null)) throw new ArgumentException(nameof(sequences));

        return ZipIterator(sequenceCollection, resultSelector);
    }
</code></pre>

<p>We can get all the enumerators in input sequences, then, iterate through them in a way which increments a counter when MoveNext fails to do so for an enumerator. If not, we Concat results of the selector function applied to each element in that certain position in each sequence. Once the counter is equal to the number of sequences, we break the loop as there is nothing more to iterate over. Below is the code doing that all:</p>

<pre><code>     private static IEnumerable&lt;IEnumerable&lt;TResult&gt;&gt; ZipIterator&lt;TIn, TResult&gt;(
        this IEnumerable&lt;IEnumerable&lt;TIn&gt;&gt; sequences,
        Func&lt;TIn, TResult&gt; resultSelector)
    {
        var enumerators = sequences.Select(_ =&gt; _.GetEnumerator()).ToArray();
        var length = enumerators.Length;
        var counter = 0;
        while (counter &lt; length)
        {
            var result = Enumerable.Empty&lt;TResult&gt;();
            foreach (var i in Enumerable.Range(0, length))
            {
                if (!enumerators[i].MoveNext()) counter++;
                else
                {
                    result = resultSelector(enumerators[i].Current).Yield().Concat(result);
                }
            }

            yield return result;
        }
    }
</code></pre>

<p>where Yield implementation is as follows:</p>

<pre><code>    public static IEnumerable&lt;T&gt; Yield&lt;T&gt;(this T item)
    {
        yield return item;
    }
</code></pre>

<p>Note that we need to make sure the extention method name is not misleading considering default Zip operation semantics.</p>

<p><strong>EDIT</strong></p>

<p>Fixing obvious issues caused by wrong choice of test data which made it look like it was working - I used 3 lists of 1, 2 and 3 elements which was hiding the <code>counter</code> issue. Also adding the dispose call for each enumerator.</p>

<pre><code>private static IEnumerable&lt;IEnumerable&lt;TResult&gt;&gt; ZipIteratorExtended&lt;TIn, TResult&gt;(
            IEnumerable&lt;IEnumerable&lt;TIn&gt;&gt; sequences,
            Func&lt;TIn, TResult&gt; resultSelector)
        {
            var enumerators = sequences.Select(_ =&gt; _.GetEnumerator()).ToList();
            var length = enumerators.Count;
            var breakEnumerators = new bool[length];
            while (breakEnumerators.Any(_ =&gt; !_))
            {
                var result = Enumerable.Empty&lt;TResult&gt;();
                foreach (var i in Enumerable.Range(0, length))
                {
                    if (!enumerators[i].MoveNext()) breakEnumerators[i] = true;
                    else
                    {
                        result = resultSelector(enumerators[i].Current).Yield().Concat(result);
                    }
                }

                yield return result;
            }

            enumerators.ForEach(_ =&gt; _.Dispose());
        }
</code></pre>
    </div>