<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Bigger Issues</h1>

<p>Making <code>Connection</code> static is usually asking for trouble. The reason is you can't swap out the connection for something else, you can't have it run it with two different servers in the same process.</p>

<p>Static classes also make it very difficult to unit test code.</p>

<p>I recommend you make a <code>IConnection</code> interface that describes your <code>Connection</code>. Then, create a single connection and pass it down through your various constructors. It is annoying, but if it really bothers you, you could consider using an IoC container such as Ninject to handle the constructor chains for you.</p>

<p>I <em>highly</em> recommend you use enums or symbolic types for some of your constants.</p>

<p><code>Tx.type = 257;
 Msg.type = encrypted ? 2 : 1;
</code></p>

<p>Having numbers like that are asking for trouble. Newton JSON has a fair amount of work in handling that so you can use C#-isms and reduce your chance of failures.</p>

<p>I recommend <code>deadline</code> is a <code>DateTimeOffset</code> or some sort of time-based element that you convert inside your DTO class. That will reduce the chance of errors but also make it more obvious how it works. As it stands know, you need to know a lot more of the internals to figure out how to format that deadline properly. If it is an offset, use <code>TimeSpan</code> instead. Things like the <code>/ 1000</code> should be encapsulated inside the class, not in the consumers.</p>

<p>While your <code>sender</code> and <code>recipient</code> are strings, it would reduce the chance of errors if you wrap that in a <code>NisPublicKey</code> (<code>NisPrivateKey</code> for sendiner?) or some sort of class that indicates its purpose. Again, it will make it easier to detect errors.</p>

<p>Fee processing should be encapsulated. Your DTO can hold the fee and calculate it (or have a wrapper that does it).</p>

<p><code>VersionOne</code> as a method name doesn't really scale well. I highly recommend you make your class based on one (and use numbers instead of text).</p>

<p>This code look wrong. The brace doesn't mean anything and gives the impression it is under the <code>response.Content</code> which it is not.</p>

<pre><code>    var content = response.Content;
    {
        var json = await content.ReadAsStringAsync();

        var model = JsonConvert.DeserializeObject&lt;GetPrepareAnnounce.Response&gt;(json);

        return model;
    }
</code></pre>

<h1>Minor</h1>

<p>You might consider using <code>UriBuilder</code> and <code>Uri</code> instead of strings. I know it is a minor thing, but the compiler will catch the three in the morning mistakes if you have type safety.</p>

<h1>Cosmetic</h1>

<p>If you are following Microsoft's suggested conventions, all of your properties and methods should be PascalCase. So, <code>partialUri</code> would be <code>PartialUri</code>.</p>

<p>Generally speaking, I would have named <code>Connection</code> to <code>NisConnection</code> and then make the method names simpler (<code>Connect</code>).</p>

<p>Consider avoiding generic class names (<code>Message</code>) since Intellisense will create a lot of noise since multiple packages with that name will show up.</p>

<p>I like one class per file, but I find it easier to work with.</p>

<p>NewtonJSON has the ability to convert PascalCase properties into camelCase automatically. That will let you use the conventions of your language without making things feel "off".</p>

<p>If you use Microsoft's conventions, variables are camelCase. So <code>Tx</code> would be <code>tx</code> (though, I would have used <code>transaction</code> instead).</p>
    </div>