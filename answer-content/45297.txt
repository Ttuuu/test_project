<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function <code>palindrom</code> just "reverses" your number without actually checking it is a palindrom. It would probably be more appropriate to give this function a proper name like <code>reverse_number()</code> and to use it in a different function which can be called <code>is_palindrome()</code>.</p>

<p>Please note that a faster implementation for this could be done differently as one could stop as soon as 2 digits do not match but we can consider that this is good enough: it's easy to test and it's easy to understand how it works.</p>

<p>Also, you could get rid of the magic number <code>10</code>. You could for instance provide the base with a default argument.</p>

<p>You should always try to define your variable in the smallest possible scope.</p>

<p>Here's what I have for the helper function :</p>

<pre><code>int reverse_number(int num, int base = 10)
{
    int new_num = 0;

    while (num != 0)
    {
        int digit = num % base;
        new_num = new_num*base + digit;
        num /= base;
    }
    return new_num;
}

bool is_palindrom(int num)
{
    return num == reverse_number(num);
}
</code></pre>

<hr>

<p>You should compile your code with all warnings activated as they can provide you good hints :</p>

<pre><code>euler3.cpp:28:18: warning: unused variable ‘n’ [-Wunused-variable]
</code></pre>

<hr>

<p>The way you are iterating is super weird. If you want to iterate over a range with <code>n1</code> and iterate over another range with <code>n2</code>, just use two nested for loops:</p>

<pre><code>for (auto n1 = 999u; n1&gt;=100; n1--)
for (auto n2 = 998u; n2&gt;=100; n2--)
</code></pre>

<p>Also, without any loss of generality, one can assume that <code>n1 &gt;= n2</code> :</p>

<pre><code>for (auto n1 = 999u; n1&gt;=100; n1--)
for (auto n2 = n1;   n2&gt;=100; n2--)
</code></pre>

<hr>

<p>Because the values will get smaller, you can break when you find a value smaller that the one you have already found.</p>

<p>At the stage, my code looks like:</p>

<pre><code>int main()
{
    unsigned int largest = 0;

    for (auto n1 = 999u; n1&gt;=100; n1--)
    {
        for (auto n2 = n1;   n2&gt;=100; n2--)
        {
            auto prod = n1*n2;
            if (prod &lt; largest)
                break;

            if (is_palindrom(prod))
            {
                cout &lt;&lt; "n1 &lt;&lt; " &lt;&lt; n1 &lt;&lt; " n2 " &lt;&lt; n2 &lt;&lt; " -&gt; " &lt;&lt; prod &lt;&lt; endl;
                largest = prod;
            }
        }
    }
    cout &lt;&lt; "Largest" &lt;&lt; largest &lt;&lt; endl;
    return 0;
}
</code></pre>
    </div>