<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>using namespace std;</h1>
<p>This is especially bad with your code because global variable log2 clashes with <a href="https://en.cppreference.com/w/cpp/numeric/math/log2" rel="nofollow noreferrer">std::log2</a>.</p>
<h1>Don't use global variable</h1>
<p>See <a href="https://stackoverflow.com/questions/484635/are-global-variables-bad">this</a> for some discussion.</p>
<h1>Use plain int</h1>
<pre><code>int *op = new int;
</code></pre>
<p>Why is op an int*? It should just be an int.</p>
<h1>Don't use goto</h1>
<p>See <a href="https://stackoverflow.com/questions/46586/goto-still-considered-harmful">this</a> for discussion. It makes it more difficult to read your code.</p>
<h1>More functions</h1>
<p>At least every switch case should be a separate function with appropriate name.</p>
<h1>Handle cin failure</h1>
<p>You didn't check the status of cin after getline. If getline fail for example user typed in too many characters, cin get stuck in failed state and getline will not work as intended.</p>
<h1>Weird recursion in setup</h1>
<p>Setup called itself if it fails to read user name or password, or username already exist This coupled with previous point blows up the stack because getline will fail which result in username or password to be empty which then recursively call setup.
Because log1 etc are global variable the recursive call can modify them half way in the previous function. Also the new instance of setup will run then the previous setup finish which duplicate the work that seems to be a bug.</p>
<h1>Use better name</h1>
<p>stu, s1, stud, op are poorly named. It is not clear what they meant to represent.</p>
    </div>