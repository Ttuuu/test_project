<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review! Hopefully you enjoy using this site and receive valuable feedback.</p>

<hr>

<p>Wow, what patience you have to type out/copy all of those lines to update the form inputs. Instead of doing that, you could loop through the input fields and check if the name matches a key in the returned data. One can use <a href="https://api.jquery.com/each" rel="nofollow noreferrer"><code>.each()</code></a> to iterate over the input fields, then check the name using <a href="https://api.jquery.com/attr" rel="nofollow noreferrer"><code>.attr()</code></a> and the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in" rel="nofollow noreferrer"><code>in</code></a> operator.</p>

<pre><code>$('#updateEmpForm input').each(function() {
    const inputName = $(this).attr('name');
    if (inputName in data) {
        $(this).val(data[key]);
    }
});
</code></pre>

<p>To exclude certain fields, like any password inputs, the selector could be updated to include pseudo-class selectors like <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:not" rel="nofollow noreferrer">`:not()</a> - for example:</p>

<pre><code>$('#updateEmpForm input:not([type="password"])').each(function() {
</code></pre>

<p>That should handle all but the last repeated line - which can be included before or after the call to <code>.each()</code>:</p>

<pre><code>$("#updateEmpForm input[name='edit']").val(data.ID);
</code></pre>

<p>You could also define a mapping of input names to keys and look in the mapping for values. For example:</p>

<pre><code>const inputNameKeyMapping = {
    edit: 'ID',
    //any other names that don't match keys directly
}
</code></pre>

<p>And use that mapping when assigning the value - something like:</p>

<pre><code>$('#updateEmpForm input').each(function() {
    const inputName = $(this).attr('name');
    const key = inputNameKeyMapping[inputName] || inputName;
    if (key in data) {
</code></pre>

<p>That way you wouldn't need to include manual value settings lines.</p>

<hr>

<p>Also, instead the click handler can be simplified from:</p>

<blockquote>
<pre><code>$('body').on('click', '.editButton',function(){
</code></pre>
</blockquote>

<p>To using the <a href="https://api.jquery.com/click" rel="nofollow noreferrer"><code>.click()</code></a>  (short-cut) method on only elements with that class name <code>editButton</code>:</p>

<pre><code>$('.editButton').click(function(){
</code></pre>

<hr>

<p>I see <code>let</code> is used to declare the variable <code>edit</code>:</p>

<blockquote>
<pre><code>let edit = $(this).val()
</code></pre>
</blockquote>

<p>However, that value is never re-assigned. To avoid unintentional re-assignment, you could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer"><code>const</code></a> instead.</p>

<pre><code>const edit = $(this).val()
</code></pre>

<p>And it is best to be consistent with line terminators - if most lines have them then make sure all do. </p>
    </div>