<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The parameters of <code>sentences</code> and <code>words</code> appear to be out of order when passed to <code>prune()</code>. Not sure why the parameters passed to <code>prune</code> are hard-coded at the example, though still passed to <code>prune()</code>. Since <code>words</code> does not pass a parameter for <code>at</code>, <code>10</code> is used, which is not the expected result, though can be remedied by defining the parameter <code>at</code> at <code>words</code> and <code>sentences</code> functions, given that each function call expects all three parameters, and <code>at</code> is not defined at any of the functions at the code at the question; instead <code>num</code> is set to <code>int</code>. </p>

<p>Adjusted body of <code>prune</code> to include an immediately invoked arrow function to handle the resulting array of <code>.split()</code> where delimiter character <code>!</code> is not contained in string by checking if the element at index <code>0</code> of array is equal to <code>val</code>, if true spread <code>val</code> to array else use existing array to chain <code>.splice()</code> to, then concatenate an empty string or <code>at</code> following <code>.join()</code> call. At which point the same function can be substituted for <code>sentences</code>, <code>words</code> and <code>characters</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const truncate = ((
  value = '',
  int = 0,
  elipsis = '\u2026', /* ... */
  prune = (val, at, num) =&gt; 
            ((s, k = s[0] === val) =&gt; 
              `${(k ? [...val] : s)
                 .splice(0, num)
                 .join(k ? '' : at)}${k ? at : ''}`)
            (val.split(at))
) =&gt; {
  const sentences = (val = value, at, num = int, end = elipsis) =&gt; prune(val, at, num) + end;
  const words = (val = value, at, num = int, end = elipsis) =&gt; prune(val, at, num) + end;
  const characters = (val = value, at, num = int, end = elipsis) =&gt; prune(val, at, num) + end;
  return {sentences, words, characters};
})();

console.clear();
console.log([
  truncate.sentences("This is a sentence. There are many like it but you won't see the 2nd one", '.', 1),
  truncate.words("These are words but you won't see what's after this because it'll be hidden", ' ', 10),
  truncate.characters("This won't exceed 31 characters so we cutting off the ending", '!', 31)
]);</code></pre>
</div>
</div>


<p>Alternatively, though not consistent with the <code>sentences</code>, <code>words</code> can be composed with <code>at</code> being set as a default parameter</p>

<pre><code>const words = ({val = value, at = ' ', num = int, end = elipsis} = {}) =&gt; prune(val, at, num) + end;
</code></pre>

<p>which would be called with</p>

<pre><code>truncate.words({val: "These are words but you won't see what's after this because it'll be hidden", num: 10})
</code></pre>

<p>providing the ability to call the function without explicitly setting and passing <code>at</code> as a parameter.</p>

<p>Substituting a single function for <code>sentences</code>, <code>words</code> and <code>characters</code></p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const truncate = (
  value = '',
  at = '',
  num = 0,
  elipsis = '\u2026', /* ... */
) =&gt; ((val, k = val[0] === value) =&gt; 
       `${(k ? [...value] : val).splice(0, num)
          .join(k ? '' : at)}${k ? at : ''}${elipsis}`)
     (value.split(at));

console.clear();
console.log([
  truncate("This is a sentence. There are many like it but you won't see the 2nd one", '.', 1),
  truncate("These are words but you won't see what's after this because it'll be hidden", ' ', 10),
  truncate("This won't exceed 31 characters so we cutting off the ending", '!', 31)
]);</code></pre>
</div>
</div>

    </div>