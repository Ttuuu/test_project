<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Good stuff</h1>

<ul>
<li>Consistent indentation</li>
<li><code>/// documenting comments</code> (I applaud to <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">that</a>)</li>
<li>What it does first, how it does it last <br><em>(although I personally prefer inline bodies, this is nice example of the separation being done right)</em></li>
</ul>

<h1>Design</h1>

<p>What could be the reason to have the nodes exposed and not owned? <br>The tree should, <em>in my opinion</em>, accept and expose only values and be a template:</p>

<pre><code>template&lt;class T&gt;
class BinarySearchTree {
    struct Node {
        std::unique_ptr&lt;Node&gt; left = nullptr;
        std::unique_ptr&lt;Node&gt; right = nullptr;
        T key;
        Node(T key) : key(std::move(key)) {}
    };
public:
    BinarySearchTree(std::initializer_list&lt;T&gt; init);
</code></pre>

<p>You should notice that:</p>

<ol>
<li>It uses <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" rel="nofollow noreferrer"><code>std::unique_ptr</code></a> because there is simply no excuse now! If you, for whatever reason, need something like <code>Node*</code> then it should rather be <a href="https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator" rel="nofollow noreferrer"><code>iterator</code></a> or <a href="https://en.cppreference.com/w/cpp/container/node_handle" rel="nofollow noreferrer">node handle</a> (C++17).</li>
<li>It has constructor accepting <a href="https://en.cppreference.com/w/cpp/utility/initializer_list" rel="nofollow noreferrer">std::initializer_list</a> to enable construction like <code>BinarySearchTree&lt;int&gt;{1,2,3}</code></li>
<li>No <code>parent</code> inside node. I will elaborate this a bit more:</li>
</ol>

<p>I can understand why you did this, because I have done it during my first exam and it was not received well by the teacher. You can use stacks tracking the path from root to current node (maybe make it part of the iterator if needed) to implement every exposed operation. I know it is easier to have the <code>parent</code> in the node, but it <em>should not</em> be there.</p>

<h2>Balancing the tree</h2>

<p>You have provided constructor (<code>BinarySearchTree(Node* nodes[], unsigned n)</code> using <code>build_bst(BinarySearchTree&amp; tree, Node* nodes[], unsigned n)</code>) that will produce well-balanced tree <strong>if</strong> the input array is sorted (should probably check and sort if needed), but did not make the tree read-only, which means, that you should provide some means of rebalancing the tree. Try reading about <a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree" rel="nofollow noreferrer">Red-Black Tree</a> (and maybe <a href="https://en.wikipedia.org/wiki/AVL_tree" rel="nofollow noreferrer">AVL Tree</a> as alternative).</p>

<hr>

<p><em>Personal story: The purpose of the exam was to show understanding of pointers to handle joining two trees or heaps. The teacher could not imagine that somebody would even think about optimal solution... ehm, I did, and received some unwanted attention for the rest of my studies for doing so while helping myself using that <code>parent</code> pointer instead of three stacks - there was simply not enough time to pull this out... and I was not supposed to even think about such solution, you know :D I hope you now understand that I am not stressing the removal of <code>parent</code> too much :)</em></p>
    </div>