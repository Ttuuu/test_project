<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Requirements</h2>

<p>It all depends on what you think is 'best'. The code that can be implemented in as little time as possible? The most efficient code? In terms of memory? CPU?</p>

<p>The solution below doesn't do any input checking, but instead is an approach that would be rather fast and very memory efficient</p>

<h2>Return type</h2>

<p>I prefer a solution that has an <code>Iterator</code> or <code>Stream</code> and uses as less memory as needed.</p>

<h2>State</h2>

<p>The problem is that you have to keep state of all the <code>?</code> you replace. This screams for a <code>BitSet</code>.</p>

<p>Basically, the solution keeps replacing all the <code>?</code> with bits in the current <code>BitSet</code>. For each iteration, determine the next <code>BitSet</code> and create a new String with the 0 and 1 in the correct places.</p>

<p>Lets see:</p>

<pre><code>input  n'th iteration   bitset   output
---------------------------------------
01?0?   0               00       01000
01?0?   1               01       01001
01?0?   2               10       01100
01?0?   3               11       01101
</code></pre>

<p>This is very memory efficient, as you only need 2 bits of state. Also efficient in terms of operations, as you build a <code>String</code> on the go, and never use slow <code>String</code> manipulation.</p>

<h2>Reuse</h2>

<p>Unfortunately, Java does not offer a <code>FixedBitSet</code> or a <code>next()</code> method on <code>BitSet</code>, so you'd have to implement it yourself</p>

<h2>Solution</h2>

<pre><code>package org.robau;

import java.util.BitSet;
import java.util.Iterator;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

public class Strings {

    public static void main(String[] args) {

        Iterable&lt;String&gt; iterable = () -&gt; getAllCominations("0??0?1");
        Stream&lt;String&gt; s = StreamSupport.stream(iterable.spliterator(), false);
        s.forEach(System.out::println);
    }

    // Given a string s consisting of 0, 1 and ?. The question mark can be either 0
    // or 1. Find all possible combinations for the string.
    static Iterator&lt;String&gt; getAllCominations(String s) {

        // Create a bitset the size of "the number of '?' in S" + 1 for         
        int nbits = (int) s.chars().filter(ch -&gt; ch == '?').count() + 1; 

        FixedBitSet sbs = new FixedBitSet(nbits);
        char[] input = s.toCharArray();

        return new Iterator&lt;String&gt;() {

            @Override
            public boolean hasNext() {

                boolean isDone = sbs.get(sbs.getSize()-1); 
                //We don't have a next() if we have the overflowbit set
                return !isDone;
            }

            @Override
            public String next() {

                String s = mergeWithInput(sbs);
                sbs.next();
                return s;
            }

            private String mergeWithInput(FixedBitSet sbs) {
                int bitSetIndex =0;
                StringBuilder sb = new StringBuilder(input.length);
                for (int i = 0; i &lt; s.length(); i++) {
                    if (s.charAt(i) == '?') {
                        sb.append(sbs.get(bitSetIndex)? '1': '0');
                        bitSetIndex++;
                    }
                    else
                    {
                        sb.append(s.charAt(i));
                    }
                }
                return sb.toString();
            }

        };
    }

    static class FixedBitSet extends BitSet {
        private int size;

        public FixedBitSet(int nbits) {
            super(nbits);
            this.size = nbits;
        }

        public int getSize() {
            return size;
        }

        public void next() {

            boolean carry = true;
            for (int i = 0; i &lt; size; i++) {

                if (carry &amp;&amp; !get(i)) {
                    flip(i);
                    return;
                } else if (carry &amp;&amp; get(i)) {
                    flip(i); // keep carrying
                } else if (!carry &amp;&amp; !get(i)) {
                    //done
                    return;
                } else {
                    //keep carry, take to next bit
                }
            }
        }

            @Override
        public String toString() {
            final StringBuilder buffer = new StringBuilder(size);
            IntStream.range(0, size).mapToObj(i -&gt; get(i) ? '1' : '0').forEach(buffer::append);
            return buffer.toString();
        }

    }




}
</code></pre>
    </div>