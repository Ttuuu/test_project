<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think I see a few bugs:</p>

<ol>
<li><p>In the initial processing loop, your handling for the <code>both</code> case appears wrong. If you have words 'aa' and 'aaa', you would not replace the 2 with a 3, but rather you would add the 2+3 getting 5, since you can concatenate the words as 'aaaaa'.</p></li>
<li><p>In the prefix/suffix handling, there is the possibility that the same word would be the largest prefix and suffix, which is an impossibility. Consider a test case like this:</p>

<pre><code>String[] arr = { "xxbxxx", "xbx", "x" }; // note: xx(2)bxxx(3)
res = solution(arr);
</code></pre>

<p>What should <code>res</code> be? I believe you will compute the <code>prefix['x']</code> as being 3, and the <code>suffix['x']</code> as being 2, yielding an answer of 6. But the correct answer is 5, since you cannot use "xxbxxx" twice.</p>

<p>(<strong>Note:</strong> This is a significant problem, since if true it will require you to significantly change how you are implementing your solution.)</p></li>
<li><p>In the final phase, computing results, your <code>prefix</code> and <code>suffix</code> loops ignore the possibility of a single winner. That is, <code>prefix</code> requires a <code>suffix</code> to win, and <code>suffix</code> requires a <code>prefix</code> to win. It does not allow for the possibility that a word like "xzzzzzzzzzz" could have a long enough (prefix|suffix) to just dominate the result.</p></li>
<li><p>The same is true for <code>both</code>: there is no acknowledgement of the possibility of a prefix+both+suffix.</p></li>
</ol>

<p>And now here's some non-bug stuff:</p>

<p>You spend a <strong>lot</strong> of time checking if a map contains a given key. If you go through and count lines of code, it is probably the most expensive thing you do. (Not to mention that many of your bugs are around this area.) I think it would benefit you to set up your maps so that the keys were always present with a default value of zero.  There are some proposed options in <a href="https://stackoverflow.com/questions/7519339/hashmap-to-return-default-value-for-non-found-keys">this SO question</a>.</p>

<p>For a specific example, consider this:</p>

<pre><code>if (both.containsKey(key)) {
    Integer temp = both.get(key);
    if (j &gt; temp) {
        both.put(key, j);
    }
} else {
    both.put(key, j);
}
</code></pre>

<p>That could be rewritten as:</p>

<pre><code>temp = both.getOrDefault(key, 0);
if (j &gt; temp)
    both.put(key, j)
</code></pre>

<p>Which could be rewritten as:</p>

<pre><code>if (j &gt; both.getOrDefault(key, 0))
    both.put(key, j);
</code></pre>

<p>I also see code like this in a few places:</p>

<pre><code>while (j &lt; word.length() &amp;&amp; word.charAt(0) == word.charAt(j)) {
    j++;
}
int key = word.charAt(0);
</code></pre>

<p>Why are you writing <code>word.charAt(0)</code> more than one time? Define the <code>key</code> above the loop, and make things shorter, clearer, and simpler:</p>

<pre><code>int key = word.charAt(0);
while (j &lt; word.length() &amp;&amp; key == word.charAt(j)) {
    j++;
}
</code></pre>

<p>In your bottom section, you can remove a lot of that code using the map-with-default-value approach. The best answer is the one that has the largest total of prefix + both + suffix, where the default for any of them is zero. Also, <code>res</code> is a bad name. Try <code>longest</code>.</p>

<pre><code>for (Integer key : prefix.keySet()) {
    longest_for_key = prefix.getOrDefault(key, 0) + both.getOrDefault(key, 0) + suffix.getOrDefault(key, 0);
    if (longest_for_key &gt; longest)
        longest = longest_for_key;
</code></pre>

<p>}</p>

<p>You'll still have to do all three, since there might be a unique key in one of the maps with a dominant string. But as least the code is simpler.</p>
    </div>