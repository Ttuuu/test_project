<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>TinMan posted his answer while I was typing mine out but I'm pretty much done so I'm just going to answer anyway!</p>
<h2>Use of ActiveSheet</h2>
<p>This is probably the biggest issue with the code as is.  Unless you don't know beforehand what sheet you'll be working with, you want to avoid <code>ActiveSheet</code> as it refers to whatever sheet the user is currently looking at, which may not even be in the same workbook!  If this is intentional (say you might want to run this macro on a variety of different sheets but you never know while coding what sheets you want to run it on) then you can ignore this, but that seems unlikely since you refer to tables by name.  This is an easy fix, you just change <code>set tbl = ActiveSheet.ListObjects("tblData")</code> to <code>set tbl = Sheet1.ListObjects("tblData")</code> (or whatever the codename for the sheet you're working with is).</p>
<p><strong>Magic numbers</strong></p>
<p>Using comments to explain random numbers in your code is good, but I prefer using constants to increase readability a tiny bit.  That way you could change this</p>
<pre><code>        message = Left(tbl.ListRows(x).Range(1, colNumMessage).Value, 7)
        Select Case message
            Case "Created"
                colorIndex = 43 '(Green)
            Case "Updated"
                colorIndex = 37 '(Blue)
            Case Else
                colorIndex = 3 '(Red)
            End Select
</code></pre>
<p>to</p>
<pre><code>        message = Left(tbl.ListRows(x).Range(1, colNumMessage).Value, 7)
        Select Case message
            Case "Created"
                colorIndex = GREEN
            Case "Updated"
                colorIndex = BLUE
            Case Else
                colorIndex = RED
            End Select
</code></pre>
<p>and declare somewhere up top <code>Const GREEN = 43</code> etc.  However, I don't know what that random 7 is about.  That should likely be a variable as well.</p>
<p><strong>GetColNum()</strong></p>
<p>I actually had a function just like this in the program I'm working on right now until I realized there's a built-in and way easier way to do it.  You can just assign all of your column number variables to <code>tbl.listcolumns("whateverColumn").Index</code>.  Then, you can just get rid of that function.</p>
<p><strong>Integers</strong></p>
<p>Except for a few niche cases (I think if you want to save the result of a msgbox to a variable you have to use integers), you should basically always use <code>long</code>s instead of <code>integer</code>s.  VBA automatically converts integers to longs behind-the-scenes so declaring as integer doesn't actually save any memory or anything (and actually adds a miniscule amount of time to your process since your data type has to be converted).</p>
<p><strong>Variable Names</strong></p>
<p>Code is meant to be read by people as well as machines, so you might as well make your variable names more readable!  Variables like <code>colNumLoad</code> can become <code>loadColumnIndex</code> or something similar that isn't unnecessarily truncated.</p>
<p><strong>Wall of Declarations</strong></p>
<p>This point is kind of debated (a lot of people like to throw all their variables at the top for some reason), but I find that declaring variables close to where you use them helps readability and reduces the chance of winding up with unused variables.  I didn't 100% follow through with this in my updated version below because all of the column numbers felt like properties to me</p>
<p><strong>The For Loop in LoadRecords()</strong></p>
<p>To me, this loop makes sense as a <code>for each</code> loop instead of just a <code>for</code> loop.  (I just noticed you even say "loops through each" in your comment!)  Realistically, this probably won't improve performance or anything, but I do think its a little simpler to read.  Also, for half of the lines, you use <code>.range.cells</code> but for the other half just <code>.range</code>.  I went with the latter because it seemed unnecessary to have both, but either way it's important to be consistent!</p>
<p>Also, since you have <code>response = getHTTP()</code> and <code>tbl.ListRows(x).Range(1, colNumMessage).Value = response</code>, you can cut out the response variable and just directly assign the return value of getHTTP to the range value.</p>
<p><strong>ConcatVars()</strong></p>
<p>Typically in VBA, function names use Pascal case.  I also changed the name to <code>ConcatenateVariables()</code> for the reasons outlined above.</p>
<h2>Refactored Code</h2>
<p>Overall, this is a very good start!  I hope my answer is helpful.</p>
<pre><code>Option Explicit

Public Sub LoadRecords()

    Const GREEN = 43
    Const BLUE = 37
    Const RED = 3
    
    'Refreshes the Concatenated Variables column
    Application.CalculateFull

    Dim recordTable As ListObject
    Set recordTable = Sheet1.ListObjects("tblData") 'or whatever sheet you're working with
    
    Dim loadColumnIndex As Long
    Dim messageColumnIndex As Long
    Dim URLColumnIndex As Long
    Dim timestampColumnIndex As Long
    
    loadColumnIndex = recordTable.ListColumns("Load?").Index
    messageColumnIndex = recordTable.ListColumns("Message").Index
    URLColumnIndex = recordTable.ListColumns("URL").Index
    timestampColumnIndex = recordTable.ListColumns("Message Timestamp").Index
    
    'Clear the cell formatting in the Message column
    'More info: VBA Guide To ListObject Excel Tables - 'https://www.thespreadsheetguru.com/blog/2014/6/20/the-vba-guide-to-listobject-excel-tables
    recordTable.ListColumns(messageColumnIndex).Range.Interior.colorIndex = 0

    Dim currentRow As ListRow
    'Loop through each data body row in the table
    For Each currentRow In recordTable.ListRows
        If UCase(currentRow.Range(columnindex:=loadColumnIndex).Value) = "Y" Then
        
            'Send an HTTP request to Maximo using the value in the URL column,
            'Return a message (created, updated, or error) and store it in the Message column.
            currentRow.Range(columnindex:=messageColumnIndex).Value = getHTTP(currentRow.Range(columnindex:=URLColumnIndex).Value)
        
            'Put the current date into the Message Timestamp column. Note: This is the Excel date, not a date from Maximo.
            currentRow.Range(columnindex:=timestampColumnIndex).Value = Now()

            'Change background colour in the Message column for rows that were loaded. Uses the Left function to get the first word or character from the message.
            'More info: https://www.excel-easy.com/vba/examples/background-colors.html
            Dim message As String
            message = Left(currentRow.Range(columnindex:=messageColumnIndex).Value, 7)
            
            Dim colorIndex As Long
            Select Case message
            Case "Created"
                colorIndex = GREEN
            Case "Updated"
                colorIndex = BLUE
            Case Else
                colorIndex = RED
            End Select

            currentRow.Range(columnindex:=messageColumnIndex).Interior.colorIndex = colorIndex

        End If
    Next

End Sub

'More info: https://stackoverflow.com/questions/817602/gethttp-with-excel-vba
Public Function getHTTP(ByVal url As String) As String

    With CreateObject("MSXML2.XMLHTTP")
        .Open "GET", url, False: .Send
        getHTTP = StrConv(.responseBody, vbUnicode)
    End With

End Function

'Concatenate the columns that contain parameters into the Concatenated Variables column.
Function ConcatenateVariables(ByVal RowNum As Long) As String

    Const PREFIX_LENGTH = 2
    Const PREFIX_END = 3 'you can probably choose better names for these

    Dim recordTable As ListObject
    Set recordTable = Set recordTable = Sheet1.ListObjects("tblData") 'or whatever sheet you're working with

    Dim currentColumn As ListColumn
    For Each currentColumn In recordTable.ListColumns
        If Left(currentColumn.Name, PREFIX_LENGTH) = "v_" Then
            Dim result As String
            If result &lt;&gt; vbNullString Then
                result = result &amp; "&amp;"
            End If
            'The MID function removes the "v_" prefix from the string
            result = result &amp; Mid(currentColumn.Name &amp; "=" &amp; currentColumn.Range(RowNum), PREFIX_END) 'prefix_length + 1 is also probably a good replacement for prefix_end
        End If
    Next

    ConcatenateVariables = result

End Function
</code></pre>
    </div>