<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Unused headers</h1>
<p>As far as I can tell, nothing from the following headers is actively being used, so they shouldn't be included.</p>
<ul>
<li><code>&lt;ctime&gt;</code></li>
<li><code>&lt;cctype&gt;</code></li>
<li><code>&lt;cstdlib&gt;</code></li>
</ul>
<h1><code>using namespace std</code></h1>
<p>While it's probably not quite as bad using it inside a .cpp file instead of a header, it's generally seen as a <a href="https://stackoverflow.com/q/1452721/6467688">code smell</a>.</p>
<h1>Variable usage</h1>
<p>There are some variables that are declared at the begin of <code>main</code>, but only used further down (if at all, <code>myIterator</code> appears to not be used at all). This makes it harder to keep track of variables.</p>
<h1>Magic numbers/literals</h1>
<p>There are a lot of numbers/string literals, whose intention is not obvious in all cases. Examples include values <code>1</code> to <code>4</code> for input choices, or strings like <code>"Your Games"</code>.</p>
<p>One way of dealing with these so called magic numbers is to put them into adequately named enums, constants or variables.</p>
<h1>Container choice</h1>
<p>There doesn't seem to be any dependency on actually keeping the order of the games intact. In addition, a small oversight (it is possible to add the same game twice) leads me to suggest that maybe a different container would be a better fit: <code>std::unordered_set</code>.</p>
<p><code>std::unordered_set</code> allows us to insert and remove items with amortized <span class="math-container">\$\mathcal{O}(1)\$</span> runtime complexity, as well as to ignore duplicates.</p>
<h1>Iterators or ranged <code>for</code> loops?</h1>
<p>Generally, I prefer ranged <code>for</code> loops over "manual" iterator loops if the code isn't requiring some specific iterator behavior. Since this isn't the case here, I would suggest using ranged <code>for</code> loops for ease of reading.</p>
<h1>Prefer smaller functions</h1>
<p>Generally, it is easier to work with smaller functions: There is less mental overhead due to shorter code, fewer variables and narrower scope. Additionally, it allows for code reuse, which might reduce code duplication.</p>
<p>While the given code is small enough that these concerns might not matter right now, it will become a lot more obvious once additional logic like formatting, input handling or similar gets added.</p>
<h1>Error checking</h1>
<p>Neither user inputs nor results of calls to <code>std::find</code> are being checked for invalid values. This means I can easily cause errors inside the program (or crash it) by just entering weird stuff, or trying to remove non-existing entries.</p>
<h1>Summary</h1>
<p>Using all these suggestions, a cleaned up version could look like this:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;unordered_set&gt;

enum class input_choices : int {
    add = 1,
    remove,
    list,
    exit
};

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; output, input_choices choice) {
    output &lt;&lt; static_cast&lt;int&gt;(choice);
    return output;
}

std::istream&amp; operator&gt;&gt;(std::istream&amp; input, input_choices&amp; choice) {
    int temp = 0;
    input &gt;&gt; temp;
    choice = static_cast&lt;input_choices&gt;(temp);
    
    return input;
}

namespace messages {
    static const auto menu_header = "Menu";
    static const auto option_add = "Add a game to the list";
    static const auto option_remove = "Remove a game from the list";
    static const auto option_list = "Show all games on the list";
    static const auto option_exit = "Exit the program";
    static const auto enter_menu_choice = "Your choice: ";

    static const auto enter_game_to_add = "Enter the Game Name to add";
    static const auto enter_game_to_remove = "Here is the list of games enter the one to remove";
    static const auto list_header = "Your games";
    static const auto quitting = "Exiting program...";
    static const auto invalid_choice = "Unknown menu option";
}

class game_list_menu {
    std::unordered_set&lt;std::string&gt; games;

public:
    void add_game() {
        const auto game = enter_game(messages::enter_game_to_add);
        games.insert(game);
    }

    void remove_game() {
        print_games();

        const auto game = enter_game(messages::enter_game_to_remove);
        games.erase(game);
    }
    
    std::string enter_game(std::string_view prompt) const {
        std::cout &lt;&lt; prompt &lt;&lt; ": ";
        
        auto game = std::string{};
        std::cin &gt;&gt; game;
        
        return game;
    }


    void print_games() const {
        std::cout &lt;&lt; "\n" &lt;&lt; messages::list_header &lt;&lt; ":\n\n";
        
        for(auto&amp; game : games) {
            std::cout &lt;&lt; "\t" &lt;&lt; game &lt;&lt; "\n";
        }
    }

    void print_menu() const {
        std::cout &lt;&lt; "\n" &lt;&lt; messages::menu_header &lt;&lt; "\n\n";
        
        print_choice(input_choices::add, messages::option_add);
        print_choice(input_choices::remove, messages::option_remove);
        print_choice(input_choices::list, messages::option_list);
        print_choice(input_choices::exit, messages::option_exit);
        
        std::cout &lt;&lt; "\n" &lt;&lt; messages::enter_menu_choice;
    }

    void print_choice(input_choices choice, std::string_view description) const {
        std::cout &lt;&lt; "\t" &lt;&lt; choice &lt;&lt; ": " &lt;&lt; description &lt;&lt; "\n";
    }

    void main_loop() {
        auto choice = input_choices::exit;

        do {
            print_menu();
            
            std::cin &gt;&gt; choice;

            switch(choice) {
            case input_choices::add:
                add_game();
                break;
            case input_choices::remove:
                remove_game();
                break;
            case input_choices::list:
                print_games();
                break;
            case input_choices::exit:
                std::cout &lt;&lt; messages::quitting &lt;&lt; "\n";
                break;
            default:
                std::cout &lt;&lt; messages::invalid_choice &lt;&lt; "\n";
                break;
            }
        } while(choice != input_choices::exit);
    }
};

int main() {
    auto menu = game_list_menu{};
    menu.main_loop();
}
</code></pre>
<blockquote>
<p>Can you see how you can easily tell what each function does or what the meaning of each number/literal is?</p>
</blockquote>
    </div>