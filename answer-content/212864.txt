<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll go over some of the basics</p>

<pre><code>let HMID = parseInt(document.getElementById("mySelect").value);
</code></pre>

<p>what should <code>HMID</code> be? Aside from being a number, I don't know what it is. And the only reason I know it's a number is because it's the value of <code>parseInt</code>. Looking at how it's used doesn't shed any light. You should name the variable something more descriptive.</p>

<p>Speaking of naming things more descriprive - <code>mySelect</code> is a really bad name, too. Part of why I don't know what <code>HMID</code> is, is because it's the value of something with the non-descriptive ID of <code>mySelect</code>. The <code>myX</code> naming convention is fine when prototyping but you really need to go with descriptive names upon finishing your code.</p>

<p>Echoing the same "descriptive names needed" sentiment for <code>onSelect</code> and <code>onSelectAdd</code>. What do they <em>do</em>? One is executed on select which...doesn't tell me much. The other...adds stuff on select? It's not clear. Somewhat better names would be </p>

<ul>
<li><code>onSelect</code> -&gt; <code>removeItemFromRange</code></li>
<li><code>onSelectAdd</code> -&gt; <code>addRemovedToRange</code></li>
</ul>

<p>I'm not great at naming things but I'd err on the side of verbose but descriptive rather than short but unclear. If you can have something shorter, feel free to use that. As it stands, the names aren't good.</p>

<p>You are better off adding the event listeners via <code>element.addEventListener</code> rather than in the HTML. That way, you keep the HTML clear of logic - it's all contained in your JavaScript. As an added benefit, you can attach more event listeners that do other stuff without changing these functions. Here is an example</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>let button = document.getElementById("buttonWithMultipleClickListenersExample"); //told you I'm not good at naming things...

button.addEventListener("click", sayFoo);
button.addEventListener("click", sayBar);

function sayFoo() {
  console.log("foo");
}

function sayBar() {
  console.log("bar");
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;button id="buttonWithMultipleClickListenersExample"&gt;Click Me&lt;/button&gt;</code></pre>
</div>
</div>


<p>Two different event listeners are attached for the <code>click</code> event and they can do two completely separate things. If <code>sayBar()</code> is altered or even a <code>sayBaz()</code> is added, we don't need to change anything else, whereas if we define the click handler in the HTML, we have to change <em>that</em> function with every alteration needed.</p>
    </div>