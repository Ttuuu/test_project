<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3><em>Towards better performance</em></h3>

<p>The initial approach generates redundant list comprehensions traversing the same list of words and passing around that list to different functions. <br>Switching to <em>generator functions/expressions</em>, as was already mentioned in <a href="https://codereview.stackexchange.com/a/234193/95789">previous answer</a> is definitely a way to go (it'll prevent holding the entire list of words in memory throughout the main processing).
Besides of that, I'll mention additional optimizations.
Won't stop on <em>docstrings</em> - they could be better (in wordings and description).</p>

<ul>
<li><p><code>visible_tag</code> function<br>
It's a predicate and thus better named as <strong><code>is_visible_tag</code></strong>.<br>The condition <code>not element.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']</code> introduces confused conclusion/perception - use explicit check <code>element.parent.name not in ...</code>.<br>Next, for fast containment check the list <code>['style', 'script', 'head', 'title', 'meta', '[document]']</code> is converted to <code>set</code> type and defined as top-level constant:</p>

<pre><code>EXCLUDE_TAGS = {'style', 'script', 'head', 'title', 'meta', '[document]'}
</code></pre>

<p>The optimized predicate is now looked as:</p>

<pre><code>def is_visible_tag(element: bs4.element) -&gt; bool:
    """
    Returns if the passed element is visible to scrape words.
    :param bs4.element element: Element to check
    :return bool: True is visible, False otherwise
    """
    return (
            element.parent.name not in EXCLUDE_TAGS and
            not isinstance(element, Comment)
    )
</code></pre>

<p>Furthermore, <code>soup.find_all</code> allows to directly specify a predicate function as <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-string-argument" rel="nofollow noreferrer"><code>string</code></a> argument to filter tags during search. <br>Therefore, the former <code>visible_texts = filter(visible_tag, texts)</code> call can be eliminated and <code>get_words</code> (which I would rename to <strong><code>extract_words</code></strong>) would look as below (docstrings omitted for demo purpose):</p>

<pre><code>TRANS_TABLE = str.maketrans('', '', string.punctuation)
...

def extract_words(url: str):
    """
    Returns all the words in the website. Steps this function takes:
    ...
    """
    body = requests.get(url).text
    soup = BeautifulSoup(body, 'html.parser')
    words = soup.findAll(string=is_visible_tag)

    return filter(None, (str(word).translate(TRANS_TABLE).rstrip().lower()
                        for word in words))
</code></pre></li>
</ul>

<p>No need to convert set of words into <code>list</code> with <code>words = list(set(words))</code> - <code>set</code> object is an iterable.</p>

<p>Considering that <strong><code>filter_words</code></strong> function switched to generator expression <code>(word for word in words if len(word) &lt;= max_length and word.isalpha())</code> and <strong><code>write_to_file</code></strong> function accepts a <code>set</code> of words and writes the words with <code>file.writelines(f"{word}\n" for word in words)</code>, the block of processing routines within <code>main()</code> function is shortened to:</p>

<pre><code>def main() -&gt; None:
    ...
    words = extract_words(website)
    words = filter_words(words, max_word_length)
    write_to_file(filename, set(words))
</code></pre>
    </div>