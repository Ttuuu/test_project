<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Tweaks</h3>

<blockquote>
<pre><code>    Character c;
    for (int i = 0; i &lt; characters.length; i++) {
         c = characters[i];
</code></pre>
</blockquote>

<p>You can write this more simply as </p>

<pre><code>    for (Character c : characters) {
</code></pre>

<p>Then <code>i</code> is Java's problem.  </p>

<p>Plus, this is clearer.  It says directly what is being done.  For each character in the string, do these things.  </p>

<blockquote>
<pre><code>            j += 1;
</code></pre>
</blockquote>

<p>You could write this as </p>

<pre><code>            j++;
</code></pre>

<p>which is more idiomatic.  </p>

<blockquote>
<pre><code>        }

        if (c.equals('1')) {
</code></pre>
</blockquote>

<p>You could replace this with either </p>

<pre><code>        } else if (c == '1') {
</code></pre>

<p>or </p>

<pre><code>        } else {
</code></pre>

<p>After all, what else would it be?  It's a binary string.  And obviously you don't have to check that it's not <code>'0'</code>.  You just did that.  </p>

<p>You don't need to use <code>equals</code> with a character, as it reduces to a primitive type (<code>char</code>).  You can do so here, but you don't have to do so.  </p>

<p>I'd move the <code>println</code> outside the method.  Then you can choose to output or not.  </p>

<h3>Performance</h3>

<p>Very little of that will make any performance difference.  What could though would be to stop mucking with strings.  It's possible to work directly with the integer.  </p>

<pre><code>public static int solution(int N) {
    int binaryGap = 0;

    if (N == 0) {
        return 0;
    }

    // remove trailing zeroes if not counted; credit to Peter Taylor
    while (N % 2 == 0) {
        N /= 2;
    }

    for (int j = 0; N &gt; 0; N /= 2) {
        if (N % 2 == 0) {
            j++;
        } else {
            if (j &gt; binaryGap) {
                binaryGap = j;
            }

            j = 0;
        }
    }

    return binaryGap;
}
</code></pre>

<p>This is essentially what the <code>Integer.toBinaryString</code> does to build the string.  Doing it like this means that we don't have to do it twice.  </p>

<p>You could also use bit operations instead of division and modulus.  Ideally the compiler should do that for you if it would be faster.  But you could benchmark instead.  </p>

<p>There's an argument that you should leave the declaration of <code>j</code> outside the <code>for</code> loop.  Since you don't iterate over <code>j</code>.  But you also don't use <code>j</code> outside the loop, so the scope is right this way.  </p>
    </div>