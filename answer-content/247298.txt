<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why Python 2? <a href="https://codereview.stackexchange.com/a/247293/26493">As Peilonrayz said</a>, Python 2 died 7 months ago and should really be replaced with Python 3 for all new projects. Personally, just f- strings are more than enough of a reason (even if you want to ignore other new features and security concerns).</p>
<p>Finding prime factors can be done in a far more efficient manner. The basic idea is: keep dividing your number by the smallest number greater than 1, as long as you can. Because it is the smallest divisor, it must be a prime (if it wasn't, its factors would divide your number too, so it wouldn't be the smallest divisor). This completely removes the need for <code>is_prime</code>.</p>
<p>As for Python, I'd go with generators, because they easily convert to a list if needed, but they also help you avoid lists when you don't need them (for example, in loops). Even better, they cut down computation in some cases (for example: find the smallest prime).</p>
<p>Also, every file, class, method, and function should have a doctring, with one line summary, any further explanations (if needed), and a list of arguments, raised exceptions, and return values, thoroughly explained.</p>
<p>As a matter of convenience and showing two very similar cases, I also added a <code>unique</code> flag, which lets you get all prime factors or only one of each (see the docstring below for the explanation).</p>
<pre><code>"""
A module for finding prime factors of a number.
"""

from __future__ import print_function


def prime_factors(x, unique=False):
    """
    Return a generator of prime factors of `x`.

    :param x: An `int` for which the prime factors are generated.
    :param unique: A Boolean flag. If `True`, only unique prime factors are
        return (i.e., 2 and 3 for `x = 24`). If `False`, all of them are
        returned (i.e., 2, 2, 2, and 3 for `x = 24`).
    :return: A generator of prime factors of `x`.
    """
    x = abs(x)
    p = 2
    while x &gt; 1:
        is_first = True
        while x % p == 0:
            if is_first or not unique:
                yield p
                is_first = False
            x //= p
        p += 1


if __name__ == "__main__":
    for x in (0, 1, 2, 3, 4, 5, 24, -24, 871):
        print("Number:", x)
        print("  All prime factors of %d: " % x, list(prime_factors(x)))
        print(
            "  Unique prime factors of %d:" % x,
            list(prime_factors(x, True)),
        )

        # This can be done with `if abs(x) &gt; 1`, but for educational purposes
        # we go with more general, catch-the-exception approach:
        try:
            print(
                "  The smallest prime factor of %d:" % x,
                next(prime_factors(x)),
            )
        except StopIteration:
            print("  Number %d has no prime factors." % x)
</code></pre>
<p>Let me also add a Python 3 version, with the only difference being the use of f-strings. Note how much more readable (and pleasant to write) this is:</p>
<pre><code>"""
A module for finding prime factors of a number.
"""


def prime_factors(x, unique=False):
    """
    Return a generator of prime factors of `x`.

    :param x: An `int` for which the prime factors are generated.
    :param unique: A Boolean flag. If `True`, only unique prime factors are
        return (i.e., 2 and 3 for `x = 24`). If `False`, all of them are
        returned (i.e., 2, 2, 2, and 3 for `x = 24`).
    :return: A generator of prime factors of `x`.
    """
    x = abs(x)
    p = 2
    while x &gt; 1:
        is_first = True
        while x % p == 0:
            if is_first or not unique:
                yield p
                is_first = False
            x //= p
        p += 1


if __name__ == "__main__":
    for x in (0, 1, 2, 3, 4, 5, 24, -24, 871):
        print(f"Number: {x}")
        print(f"  All prime factors of {x}: {list(prime_factors(x))}")
        print(f"  Unique prime factors of {x}: {list(prime_factors(x, True))}")

        # This can be done with `if abs(x) &gt; 1`, but for educational purposes
        # we go with more general, catch-the-exception approach:
        try:
            print(
                f"  The smallest prime factor of {x}:",
                next(prime_factors(x)),
            )
        except StopIteration:
            print(f"  Number {x} has no prime factors.")
</code></pre>
    </div>