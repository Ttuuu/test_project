<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One test is to see if a backward run produces the same number of turns. This test fails given inputs like:</p>

<p><code>start, end = (1, 0), (1, 4)
 grid = ['.....', 
         '...x.', 
         'xxxxx',
          ...]</code></p>

<p><code>MinTurns(start, end, grid).search()</code> results in output <code>([(1, 2), (0, 2), (0, 4)], 3, 8)</code></p>

<p><code>MinTurns(end, start, grid).search()</code> results in output <code>([(0, 4), (0, 0)]), 2, 8)</code></p>

<p>I'm finding that, since a turn is assigned and carried through the path along the top row starting with <code>(1, 1)</code>, the bottom row will be called first out of <code>open_pos</code> causing <code>(0, 2)</code> to become a child of <code>(1, 2)</code> instead of a child of <code>(0, 1)</code>. By the time we realize an extra turn will result from this path <code>(0, 2)</code> is in the visited set and won't be rewritten.</p>

<p>I can't see a way to correct this without adding a lot of complexity to the algorithm, and because of the heuristic nature of the algorithm, I don't see a one off in rare circumstances as all that bad.</p>

<p>Given all the above we can gain quite a bit of efficiency by returning the path when <code>end</code> is first encountered rather than waiting for all <code>open_pos</code> to be exhausted.  </p>
    </div>