<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Superfluous Fragments</h3>

<p>You don't need to wrap anything in a <code>&lt;Fragment&gt;</code>. <a href="https://reactjs.org/docs/fragments.html" rel="nofollow noreferrer">Fragments are just used for when you want to return multiple elements without adding anything extra to the DOM</a>.</p>

<h3>Exports</h3>

<p>In your components, you export an Object (like <code>export { Edit }</code>) when I think it would be best to just use the default export. So the last line of edit.jsx should become <code>export default Edit</code> and then change app.jsx to <code>import Edit from './components/Edit'</code>.</p>

<h3>"Smart and Dumb" or "<a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" rel="nofollow noreferrer">Presentational and Container</a>" components</h3>

<p>You mix your business logic and data access in with your view code, which works, but is bad for reusability and general code readability.</p>

<p>Instead, you should have a component that is only concerned with rendering a chirp (i.e. it takes in the chirp as a prop and doesn't fetch it), and another that fetches the data from the API and renders a <code>&lt;Chirp&gt;</code> with that.</p>

<p>It might look something like this:</p>

<pre><code>// presentational/Chirp.jsx
export default function Chirp(props) {
    return (
        &lt;div&gt;
            &lt;Link to="/" className="homelink" style={{ textDecoration: "none" }}&gt;Home&lt;/Link&gt;
            &lt;div className="current"&gt;
                &lt;div className="flex-column"&gt;
                    &lt;div className="chirps"&gt;
                        &lt;p&gt;{props.user}: {props.text}&lt;/p&gt;
                        &lt;Link to={{
                            pathname: `/${this.props.match.params.id}/edit`,
                            state: {
                                user: this.state.user,
                                text: this.state.text
                            }
                        }}&gt;Edit&lt;/Link&gt;
                        &lt;Link to={`/${this.props.match.params.id}/delete`}&gt;x&lt;/Link&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    )
}

// container/ChirpContainer.jsx
import Chirp from '../presentational/Chirp'

class ChirpContainer extends Component {
    constructor () {
        super()
        this.state = {
            user: '',
            text: ''
        }
    }

    componentDidMount () {
        fetch(`http://127.0.0.1:3000/api/chirps/${this.props.match.params.id}`)
            .then(response =&gt; response.json())
            .then(data =&gt; {
                this.setState({
                    user: data.user,
                    text: data.text
                })
            })
            .catch(err =&gt; console.log(err))
    }

    render () {
        return &lt;Chirp user={this.state.user} text={this.state.text} /&gt;
    }
}

export default ChirpContainer
</code></pre>

<h3>Showing an error message</h3>

<p>When the call to get data from your API fails, you just print the message out to the console. This is fine for testing and development, but maybe you want to look into showing a message to the user instead, as most of them don't bother to look through the console.</p>
    </div>