<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Model vs UI</h1>
<p>Your classes have basic separation of concerns. But as you can see by yourself some model elements like "Ball" or "Box" or "Paddle" or even "Game" have a dependency to the package java.awt.*. Try to reformulate your model not to point to UI elements. This is not just because you may provide another UI technology like JavaFX. Sure you can do that afterwards. But the real issue is code quality because you satisfy the "<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="noreferrer">single responsibility principle</a>". My advice is to have a look at the <a href="https://en.wikipedia.org/wiki/Observer_pattern" rel="noreferrer">observer pattern</a>.</p>
<p><strong>Doing the separation of UI and model is very hard while saying to do so is easy.</strong> I even saw experienced developers struggling with it as the do not put the fact into account that a proper separation implicitly makes the UI interchangable. I often heard "we do not need to exchange the UI but we have proper separation". But that is inherent contradictory. I see UI exchangability not as a feature. I see it as a measurement for a pretended separation.</p>
<h1>Game state</h1>
<p>You formulate the state of the game within an enum. My suggestion is to use a <a href="https://en.wikipedia.org/wiki/State_pattern" rel="noreferrer">full state pattern</a>. There you not only provide an artefact that says you are in state 1 or in state 2. You also encapsulate the corresponding behaviour and use polimorphism. Currently the state specific behaviour is spread all over the place within if-then-else-statements.</p>
<p>Furthermore you should extend your state handling. The game is a process that follows some <a href="https://en.wikipedia.org/wiki/Process_state" rel="noreferrer">process states</a>. And one other important process state is the <em>end of the process</em>. I do not say to model ALL states. But if you have behaviour that should handle the end of the game you should represent it as a separate state.</p>
<h1>Application State</h1>
<p>I think you mixed "application state" with "game state". State.MENU seems to be semantical anorganic to State.GAME if you model the game state with it. Either you should have two types of state (application state AND game state) or (my suggestion) omit the representation of the application state as the "menu" has nothing to do with the game itself.</p>
<h1>Magic numbers</h1>
<p>You have some magic numbers left you should name. You already did this with "HEIGHT_FRAME" or "WIDTH_FRAME". But the checks for the mouse position are comparing against magic numbers.</p>
<h1>Game vs. game instance</h1>
<p>You also mixed some further semantics as a game may be the set of rules you follow OR a concrete game currently in progress. I suggest to separate these responsibilities.</p>
<h1>Direction</h1>
<p>As the amount of directions are limitted in yur usecase using an enumeration is totally fine. But here again you have external behaviour you can internalize using polymorphism. Especially the move-behaviour can be encapsulated within the enumeration.</p>
<h1>Avoid early return-statements</h1>
<p>"return", "break" and "continue" are structured goto statements and they come with a heritage.</p>
<p>They break the control flow and say "I am not interested in the statements below me".</p>
<p>I do not say you have to have a single exit per method but I encourage you to have it. My point of view is: Code is never perfect. As code is never perfect it is continuously improved by refactorings. Maybe the statements below the return statement become important at some point or you want to some extract code into a new method then you will have a hard time to do so without reformulating the whole control flow.</p>
<p>But if you think your code fragment does currently not violate the single responsibility principle and will not in the future you will not face the burden of such a refactoring.</p>
<h1>Swing event dispatcher thread</h1>
<p>If you are working in a single thread environment you have no real problem. But you are working with multiple threads so the Swing-UI can asynchronously change for different reasons. The "Ball" will continue to move and your paddle as well if you press the direction keys.</p>
<p>To enforce a consistent UI state I suggest to make ANY change to your UI in the EDT (event dipatcher thread). Mostly you will not face the problem. But concurrency problems are those that are hard to interprete if they occur.</p>
<p>You already use the "EventQueue" when you start the appication.</p>
    </div>