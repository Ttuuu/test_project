<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When programming in C or C++, there are really many ways to shoot yourself in the foot. To prevent at least some of them, the compilers can produce warnings if they see typical mistakes. But you, as the programmer, have to tell the compiler to give you these warnings.</p>

<p>For GCC, the basic warning level is <code>-Wall</code>. It issues many useful warnings. So instead of running <code>g++ myfile.cpp</code>, run <code>g++ -Wall myfile.cpp</code>.</p>

<p>When you have understood the warnings and have fixed them (in this order), it's time for the next level:</p>

<pre><code>g++ -Wall -O2
</code></pre>

<p>The <code>-O2</code> option enables optimizations. This will make your code run faster, and it also generates new warnings. This is because some of the warnings (like "unused variable") are generated as a byproduct of the optimizations.</p>

<p>The next level is:</p>

<pre><code>g++ -Wall -Wextra -O2
</code></pre>

<p>Surprise: the <code>-Wall</code> option doesn't enable all warnings (even if its name suggests so). There are some additional warnings. And even now, you don't get all available warnings.</p>

<pre><code>g++ -Wall -Wextra -pedantic -std=c17
</code></pre>

<p>If you are at this stage and have understood and fixed all the warnings, your code is in a good shape. Now try the next compiler, CLang:</p>

<pre><code>clang -Wall -Weverything -O2
</code></pre>

<p>If you are developing on Solaris, try SUNPro, if you are developing on IRIX, use MIPSPro.</p>

<p>So far for the compiler.</p>

<hr>

<p>The <code>chmod</code> command is redundant. A compiler's job is to produces executable files, therefore it will make the file executable. You don't need to do that yourself.</p>

<p>The advice for running <code>chmod +x</code> comes from a different scenario. When you write programs in a programming language where the source code is executed directly, instead of being compiled, there's no program that transforms your written code into machine-executable code. These two kinds of code are in the same file. And only because your text editor does not make the file executable do you have to do this yourself. Examples for such programming languages are Python, Perl, Bash.</p>

<hr>

<p>You can remove the <code>sudo</code> command completely from your installation program. I'm assuming that all these files are somewhere in your home directory, probably <code>/home/username</code> or <code>/Users/username</code>. In these directories you have all the permissions you need to create files and to execute them.</p>

<p>The sudo command is only needed if you want to do things that affect <em>all</em> users of the computer, such as configuring the wifi or updating the system programs or installing your own programs in <code>/usr/bin</code>.</p>

<p>Don't use <code>sudo</code> unless it is really necessary. When you get error messages, try to understand them.</p>
    </div>