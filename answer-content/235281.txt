<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On Windows, you'd rather use the <a href="https://docs.microsoft.com/en-us/windows/console/console-functions" rel="nofollow noreferrer">console API</a> directly instead of stdio.h. This should increase performance somewhat, since these functions are what <code>getchar</code> etc will end up calling anyhow.</p>

<p>Other issues:</p>

<ul>
<li>All functions should be declared to take <code>void</code> as parameters, rather than to accept any parameter. If they are properly inlined this should hopefully not have any impact on the program, but in some cases it might mess up the calling convention.</li>
<li><p>Rather than making a mess with compiler switch <code>#ifdef</code> all over the place, you could in the header file do something like:</p>

<pre><code>#ifdef _WIN32
  #define fast_io_read_char fast_io_read_char_windows
#else
  #define fast_io_read_char fast_io_read_char_linux
#endif
</code></pre>

<p>And so on. Then separate the implementation of each function, so that you have one file <code>fastio_windows.c</code> and one <code>fastio_linux.c</code>. You can add both files to linking both no matter, the <code>#ifdef</code> in the header will determine which functions that actually get linked to the binary.</p></li>
<li>Left shifting the signed type <code>long rev</code> is questionable code - you have to ensure that <code>n</code> is never negative or too large.</li>
<li>Missing <code>#include &lt;stdbool.h&gt;</code> so the code won't compile.</li>
<li><code>getchar</code> calls incorrectly use <code>char</code> instead of <code>int</code> so the code cannot handle <code>EOF</code>. If you don't intend to handle <code>EOF</code>, then you should still cast the result of <code>getchar()</code> to <code>char</code> - to silence compiler warnings and write self-documenting code that shows that you have considered this.</li>
</ul>
    </div>