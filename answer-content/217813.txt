<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the first case, the caller is not given any control over allocation. This limits freedom and (therefore) performance: there is no control over the number of dynamic allocations or over which memory is used for what purpose, and there are limits on how the handle to the buffer can be stored (the returned pointer to <code>Buffer</code> must be kept around somehow, even if we would really just want to store the <code>Buffer</code> by value and avoid some unnecessary double-indirection).</p>

<p>In the second case, the caller does have control, but <code>Buffer2_destroy</code> makes a very limiting assumption about how the memory was allocated so in the end the caller still has no choice. Of course by looking into the implementation details, one could see that simply not calling <code>Buffer2_destroy</code> enables some freedom again, but this would probably be considered a hack. All in all this approach violates the guideline "allocate and free memory in the same module, at the same level of abstraction", and doesn't get much in return.</p>

<p>Practically what a user of some buffer may want to do is for example:</p>

<ul>
<li>Having the <code>Buffer</code> as a local variable but its data <code>malloc</code>-ed.</li>
<li>Having the <code>Buffer</code> as a local variable and making its data refer to a local array.</li>
<li>Save the <code>Buffer</code> into some other struct or array (by value, not a pointer to a <code>Buffer</code> which then points to the data).</li>
<li>Using (part of) a static array as the data.</li>
<li>Various other such combinations..</li>
<li>Allocate both the buffer data and the instance of <code>Buffer</code> in the same allocation.</li>
</ul>

<p>Which is why a common advice is, where possible, do not allocate or deallocate memory, use memory supplied by the caller. This applies especially to performance-sensitive settings, where "secret <code>malloc</code>" is not appreciated, and custom allocators are commonly used.</p>
    </div>