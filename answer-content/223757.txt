<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>typedef</code> <code>_t</code></h2>

<p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html" rel="nofollow noreferrer">POSIX</a> reserves identifiers ending in <code>_t</code>.  You should maybe use <code>_s</code> (s for struct) for the typedef:</p>

<pre><code>struct Foobar {
    void    *foo;
    int32_t bar;
};
typedef struct Foobar foobar_s;
</code></pre>

<p>For your typedefs for function types, I would use <code>_f</code> (f for function) to help easily differentiate the type from a normal identifier.</p>

<p>Or not use <code>typedef</code> at all :)</p>

<hr>

<h2>encapsulate into a function</h2>

<p>The following code deserves a function:</p>

<pre><code>    // eat any prepended newlines
    while (s != end &amp;&amp; *s &amp;&amp; (*s == '\r' || *s == '\n'))
        s++;
</code></pre>

<p>The following too:</p>

<pre><code>  case WAITFORCALL:
    {
      //parse call data in to caller id etc
      static char callerid[50] = {0};
      static char caller_date[20] = {0};
      static char caller_time[20] = {0};

      int size;
      char line[100];  // we assume no lines &gt; 100 chars
      const char* rest = buffer;
      char* end = buffer + *length;
      while ((rest = getline_stringstream(line, &amp;size, rest, end)) != NULL) {
          if(strncmp(line, "NMBR", 4) == 0 &amp;&amp; strlen(line) &gt; 7) {
              strcpy(callerid, &amp;line[7]);
          }
          if(strncmp(line, "DATE", 4) == 0 &amp;&amp; strlen(line) &gt;= 11) {
              sprintf(caller_date, "%c%c/%c%c", line[9], line[10], line[7], line[8]);
          }
          if(strncmp(line, "TIME", 4) == 0 &amp;&amp; strlen(line) &gt;= 11) {
              sprintf(caller_time, "%c%c:%c%c", line[7], line[8], line[9], line[10]);
          }
      }
      if(strlen(callerid) &gt; 0 &amp;&amp; strlen(caller_date) &gt; 0 &amp;&amp; strlen(caller_time) &gt; 0) {
          printf("%-6s%-6s%s\n", caller_date, caller_time, callerid);
          callerid[0] = caller_date[0] = caller_time[0] = '\0';
      }
    }
  break;
</code></pre>

<hr>

<h2>Safe usage of malloc</h2>

<p>Malloc is easily misused.</p>

<ul>
<li><code>sizeof(type)</code> vs <code>sizeof(*foo)</code>:</li>
</ul>

<p><code>foo = malloc(sizeof(*foo) * nmemb);</code> is better because if you ever change the type of <code>foo</code>, this call will still be valid, while if not, you would have to change every line where malloc is called with foo.  If you forget any of those lines, good luck.</p>

<hr>

<h2>Error checking:</h2>

<pre><code>// set port speed
if (set_speed(port-&gt;current_tty, port-&gt;baudrate) == -1) {
        // error setting tty speed
        return -1;
}
</code></pre>

<p>This is unsafe:  if you ever add another error code to <code>set_speed</code>, and forget to update this line, good luck!</p>

<p>Solution:  check for any non-zero values:</p>

<pre><code>// set port speed
if (set_speed(port-&gt;current_tty, port-&gt;baudrate)) {
        // error setting tty speed
        return -1;
}
</code></pre>

<hr>

<h2><code>fflush</code></h2>

<pre><code>fprintf(stderr, "something unexpected happened, aborting...\n");
fflush(stdout);
exit(1);  // something bad happened - exiting
</code></pre>

<p>This doesn't make any sense:</p>

<ul>
<li>when the program <code>exit</code>s, <code>stdout</code> is automatically <code>fflush</code>ed (actually, all streams, I think).</li>
<li>If you wanted to say <code>fflush(stderr);</code> it's not needed: <code>stderr</code> is either unbuffered or line-buffered.</li>
</ul>

<hr>

<h2><code>EXIT_FAILURE</code></h2>

<p>Use <code>exit(EXIT_FAILURE);</code> when you don't want a specific error code.</p>

<hr>

<h2><code>const</code> non-pointer parameters (just no)</h2>

<p><code>int port_start(const char* portname, const int baudrate, connect_callback connectcb, read_callback readcb, void* userdata);</code></p>

<p><code>const int baudrate</code> adds clutter to the code, and absolutely no difference to the user of the function.  A function can't modify its arguments.  Only pointers can point to modifiable data, and therefore need the <code>const</code> qualifier if they don't modify the data pointed to.</p>

<p>Use <code>int baudrate</code> instead.</p>

<hr>

<h2>inline</h2>

<p>This is a very good candidate for <code>inline</code>:</p>

<pre><code>int port_write(serial_port_t* port, const char* data, size_t length) {
    return write(port-&gt;fd, data, length);
}
</code></pre>

<p>It provides a free optimization with no downsides for one line functions (unless you want to keep its contents secret):</p>

<p><code>serial_port.h</code>:</p>

<pre><code>inline
int     port_write(struct Serial_Port* port, const char* data, size_t length);

inline
int     port_write(struct Serial_Port* port, const char* data, size_t length)
{
        return write(port-&gt;fd, data, length);
}
</code></pre>

<p><code>serial_port.c</code>:</p>

<pre><code>extern
int     port_write(struct Serial_Port* port, const char* data, size_t length);
</code></pre>
    </div>