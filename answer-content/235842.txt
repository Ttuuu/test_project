<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><blockquote>
  <p>After some research I found that tempfile.NamedTemporaryFile is broken on Windows (you could have a temporary file, or you could get a filename - but you cannot have both).</p>
</blockquote>

<p>This is just flat out wrong. Maybe you're misunderstanding something and conflating two things. But this is just factually incorrect. And can be seen in your code:</p>

<pre class="lang-py prettyprint-override"><code>temp_pptx.close()  # needed on windows systems to access file
prs.save(temp_pptx.name)
</code></pre>

<p>The first line is closing the temporary file, and the second is getting it's filename.</p></li>
<li><blockquote>
  <p>needed on windows systems to access file</p>
</blockquote>

<p><a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile" rel="nofollow noreferrer">This is due to a security feature.</a></p>

<blockquote>
  <p>The file is created securely, using the same rules as <a href="https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp" rel="nofollow noreferrer">mkstemp()</a>.</p>
</blockquote>



<blockquote>
  <p>Creates a temporary file in the most secure manner possible. There are no race conditions in the fileâ€™s creation, assuming that the platform properly implements the <a href="https://docs.python.org/3/library/os.html#os.O_EXCL" rel="nofollow noreferrer"><code>os.O_EXCL</code></a> flag for <a href="https://docs.python.org/3/library/os.html#os.open" rel="nofollow noreferrer"><code>os.open()</code></a>. The file is readable and writable only by the creating user ID. If the platform uses permission bits to indicate whether a file is executable, the file is executable by no one. The file descriptor is not inherited by child processes.</p>
</blockquote>

<p>Clearly you don't need this, so <code>tempfile</code> is pretty much useless to you and you will be fighting it.</p></li>
<li><p>Your code looks very much like a mix of an exploit of how generators and garbage collection work, and some dodgy monkey patch to get around <code>tempfile</code>. Both are on a level of wtf/m that I'd suggest just writing your own temporary file class.</p></li>
</ul>

<pre><code>import os


class TemporaryFile:
    __slots__ = ('_file',)

    def __init__(self, file):
        self._file = file

    @classmethod
    def open(cls, *args, **kwargs):
        return cls(open(*args, **kwargs))

    def __enter__(self):
        return self._file.__enter__()

    def __exit__(self, exc_type, exc_value, traceback):
        ret = self._file.__exit__(exc_type, exc_value, traceback)
        os.remove(self._file.name)
        return ret


if __name__ == '__main__':
    with TemporaryFile.open('foo.txt', 'w+') as f:
        pass
    with TemporaryFile(open('foo.txt', 'w+')) as f:
        pass
</code></pre>

<p>I can write to the file using Atom using the above. Even if Excel has more security operations, then you can easily work around them without monkey patches.</p>
    </div>