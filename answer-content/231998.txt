<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>If you need to get a value of a <code>Dictionary&lt;TKey, TValue&gt;</code> you shouldn't us <code>ContainsKey()</code> together with the <code>Item</code> property getter but <code>TryGetValue()</code>, because by using <code>ContainsKey()</code> in combination with the <code>Item</code> getter you are doing the check if the key exists twice.<br>
From the <a href="https://referencesource.microsoft.com/#mscorlib/system/Collections/Concurrent/ConcurrentDictionary.cs" rel="nofollow noreferrer">refernce source</a>  </p>

<pre><code>public bool ContainsKey(TKey key)
{
    if (key == null) throw new ArgumentNullException("key");

    TValue throwAwayValue;
    return TryGetValue(key, out throwAwayValue);
}

public TValue this[TKey key]
{
    get
    {
        TValue value;
        if (!TryGetValue(key, out value))
        {
            throw new KeyNotFoundException();
        }
        return value;
    }
    set
    {
        if (key == null) throw new ArgumentNullException("key");
        TValue dummy;
        TryAddInternal(key, value, true, true, out dummy);
    }
}
</code></pre></li>
<li><p>Multiple declarations of variables on a single line should be avoided because it reduces the readability of the code.  </p></li>
<li>If the type is clear from the right-hand-side of an assignment one should use <code>var</code> instead of the concrete type.  </li>
<li><p>You should declare the variables as near to their usage as possible. This makes reading the code easier as well.  </p></li>
<li><p>Althought this is from a programming excercise please note that methods should be named using <code>PascalCase</code> casing and method parameters should be named using <code>camelCase</code>casing. Meaning <code>solution</code> should be <code>Solution</code> and <code>A</code> should be <code>a</code> if we talk about casing.</p></li>
</ul>

<p>Implementing the mentioned points (without casing stuff) will look like this  </p>

<pre><code>public int solution(int[] A)
{
    var leftPartition = new Dictionary&lt;int, int&gt;();
    var rightPartition = new Dictionary&lt;int, int&gt;();

    for (var index = A.Length - 1; index &gt;= 0; index--)
    {
        var candidate = A[index];
        rightPartition.TryGetValue(candidate, out int value);
        rightPartition[candidate] = value + 1;
    }

    var leadersCounter = 0;
    var leftPartitionSize = 1;
    var rightPartitionSize = A.Length;
    var leader = A[0];

    for (var index = 0; index &lt; A.Length; index++)
    {
        var candidate = A[index];

        leftPartition.TryGetValue(candidate, out int value);
        leftPartition[candidate] = value + 1;

        rightPartition[candidate]--;
        rightPartitionSize--;

        if (leftPartition[candidate] &gt; leftPartitionSize / 2)
        {
            leader = candidate;
        }
        if (leftPartition[leader] &gt; leftPartitionSize / 2 &amp;&amp; rightPartition[leader] &gt; rightPartitionSize / 2)
        {
            leadersCounter++;
        }
        leftPartitionSize++;
    }
    return leadersCounter;
}
</code></pre>
    </div>