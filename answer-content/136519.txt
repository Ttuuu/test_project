<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>readStrings()</code> is better named <code>readCharacters()</code> because that is what it does.
I prefer <code>Array(...)</code> instead of <code>.map { $0 }</code> to convert a sequence into an array,
but that is a matter of taste:</p>

<pre><code>/// Reads one line from standard input and returns the result
/// as an array of characters.
func readCharacters() -&gt; [Character] {
    guard let line = readLine() else {
        fatalError("Unexpected end of input")
    }
    return Array(line.characters)
}
</code></pre>

<p>My main point of criticism is that 
the logic in your main function is far too complicated. The <code>outerLoop:</code> label is not
used. The inner loop is confusing, and comments like </p>

<pre><code>    // append closing bracket so YES doesn't print when breaking

    // stack has opening brackets and hasn't reach if statement in case } ] )
</code></pre>

<p>clearly indicate a code smell. The problem is that you have one single function doing
all the work.</p>

<p>It immediately becomes simpler if you separate the I/O from the
actual computations (which is generally a good idea):</p>

<pre><code>func isBalanced(sequence: [Character]) -&gt; Bool {
    // ... return `true` or `false` ...
}

func balancedBrackets() {
    let numSequences = readInteger()
    for _ in 0..&lt;numSequences {
        let sequence = readCharacters()
        let balanced = isBalanced(sequence)
        print(balanced ? "YES" : "NO")
    }
}

balancedBrackets()
</code></pre>

<p>This makes the code more modular, better readable, and  allows you to add
test cases easily. The <code>isBalanced()</code> function can "early return" if a non-match
is found, making the labels and the special <code>edgeCase</code> variable obsolete:</p>

<pre><code>func isBalanced(sequence: [Character]) -&gt; Bool {
    var stack = [Character]()
    for bracket  in sequence {
        switch bracket {
        case "{", "[", "(":
            stack.append(bracket)
        case "}", "]", ")":
            if stack.isEmpty
                || (bracket == "}" &amp;&amp; stack.last != "{")
                || (bracket == "]" &amp;&amp; stack.last != "[")
                || (bracket == ")" &amp;&amp; stack.last != "(")  {
                return false
            }
            stack.removeLast()
        default:
            fatalError("unknown bracket found")
        }
    }
    return stack.isEmpty
}
</code></pre>

<p>But the repeated usage of character literals is still error-prone.
Better define an <em>enumeration</em>:</p>

<pre><code>enum Bracket: Character {
    case Left = "("
    case Right = ")"
    case LeftCurly = "{"
    case RightCurly = "}"
    case LeftSquare = "["
    case RightSquare = "]"
}
</code></pre>

<p>Determining the matching open bracket for a given closing bracket can be
made a computed property of this enumeration:</p>

<pre><code>enum Bracket: Character {
    case Left = "("
    case Right = ")"
    case LeftCurly = "{"
    case RightCurly = "}"
    case LeftSquare = "["
    case RightSquare = "]"

    /// For a closing bracket, the corresponding opening bracket is returned.
    /// For an opening bracket, `nil` is returned.
    var matchingOpen: Bracket? {
        switch self {
        case .Right:        return .Left
        case .RightCurly:   return .LeftCurly
        case .RightSquare:  return .LeftSquare
        default:            return nil
        }
    }
}
</code></pre>

<p>Now the <code>isBalanced()</code> function does not use any explicit bracket values anymore:</p>

<pre><code>func isBalanced(sequence: [Character]) -&gt; Bool {
    var stack = [Bracket]()
    for char in sequence {
        if let bracket = Bracket(rawValue: char) {
            if let open = bracket.matchingOpen {
                // `bracket` is a closing bracket and `open` the corresponding opening bracket:
                guard let last = stack.last where last == open  else {
                    return false
                }
                stack.removeLast()
            } else {
                // `bracket` is an opening bracket:
                stack.append(bracket)
            }
        } else {
            fatalError("unknown bracket found")
        }
    }
    return stack.isEmpty
}
</code></pre>

<p>If you decide to add another type of brackets later (e.g. <code>«»</code>) then only the 
enumeration needs to be extended, but not the <code>isBalanced()</code> function.</p>
    </div>