<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Avoid <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice"><code>using namespace std;</code></a>.</p>

<p>You're not deleting any of the memory you allocate.</p>

<p>The <code>operator()</code> in <code>less_than_key</code> is defined inline, so you can omit the <code>inline</code> keyword.</p>

<p><code>BTreeRoot</code> is a global variable, which should be avoided.  It would be better off being declared in <code>main</code> (where you use it), with all the <code>BTree</code> functions being members of <code>BTreeNode</code>.  If you keep it as a global variable, declare it as the type (<code>BTreeNode BTreeRoot</code>), rather than as a pointer that you immediately allocate.</p>

<p>Instead of <code>tree-&gt;childLeafs.size() != 0</code>, use <code>!tree-&gt;childLeafs.empty()</code>.  Calling <code>size</code> on a vector may require a computation, while <code>empty</code> does not.</p>

<p>In <code>BTreeSearch</code>, replace <code>tree-&gt;datas[tree-&gt;datas.size()-1]</code> with <code>tree-&gt;datas.back()</code>.  This can be a bad access if <code>datas</code> is empty.  The <code>for</code> loop with <code>i</code> can start indexing at <code>1</code>, with appropriate changes in the condition and body, which will simplify some of the code (by not needing to subtract 1 from the size all the time).</p>

<p>All <code>#include</code> directives should be a the top of the file, rather than having some in the middle where they are hard to find (and makes it more likely that you'll include something twice).</p>
    </div>