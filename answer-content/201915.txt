<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It certainly looks clean and well-written.<br>
Just one thing, I really hate horizontal scrolling. I acknowlege this site is very restrictive there though.</p>

<ol>
<li><p>Make sure your use of move-semantics is type-appropriate:</p>

<ul>
<li>Move if it's a move-only type.</li>
<li>Move if moveing is <code>noexcept</code>.</li>
<li><strong>Otherwise, don't move it</strong>.</li>
</ul>

<p>The standard-library already has to do that in many places, and thankfully it is available to the public as <a href="https://en.cppreference.com/w/cpp/utility/move_if_noexcept" rel="nofollow noreferrer"><code>std::move_if_noexcept()</code></a> analogous to <code>std::move</code>.</p>

<p>I suggest adding your own helper which does that for iterators.</p></li>
<li><p>You know, it's itching in my fingers to modify <code>merge()</code> to use the conditional operator. Especially after applying the above point, which makes the common part even bigger.</p></li>
<li><p>One of the advantages moveing is that it allows for guaranteed success in more cases. Yes, writing flexible and comprehensive <code>noexcept</code>-specifications can be a pain, but your callers will thank you.</p>

<p>Without doing that work, a good part of the advantage of the two-range version is lost.</p></li>
<li><p>I would suggest renaming your iterator-ranges <em>source</em> and <em>target</em> respectively, neither is properly <em>scratch</em>. Also, I would use the more common <em>temp</em> as a name in <code>merge_sort(begin, end)</code>.</p></li>
<li><p>Are you aware of the sordid tale that is <a href="https://en.cppreference.com/w/cpp/container/vector_bool" rel="nofollow noreferrer"><code>std::vector&lt;bool&gt;</code></a>?<br>
I'm not saying it won't work in this case, though slowly.</p></li>
<li><p>You do know that C++17 has <em><a href="https://en.cppreference.com/w/cpp/language/class_template_argument_deduction" rel="nofollow noreferrer">class template argument deduction</a></em>?</p></li>
<li><p>It's nice to see that you only use <code>&lt;</code> for comparisons, just like the standard-library. That should enable you to easily modify your code to allow for a custom comparison-object.</p></li>
<li><p>But there is a problem in how you do the comparisons, as your <code>merge()</code> is needlessly <em>not stable</em>: If both are equal, you should take from the left range instead.</p></li>
<li><p>Consider asserting that the two iterator-types fit together in the function, or testing it for SFINAE outside.</p></li>
</ol>
    </div>