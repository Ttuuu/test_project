<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice implementation. The comments I have are mostly about overall structure.</p>

<p>I do have one comment on some low-level stuff: Use a string for the PIN instead of an int. When it's an integer, you can't have leading zeros, so if James Bond's PIN is <code>007</code>, you could enter <code>7</code>, <code>07</code>, or <code>0000000007</code>, and all would be equally valid. That's no good (and James Bond - already the world's worst "secret" agent is a fool for having that PIN anyway).</p>

<p>I'd also suggest making the PIN a constructor argument - otherwise everyone in your bank will have the same hard-coded PIN. Not exactly secure.</p>

<p>As for structure: Your <code>Account</code> class isn't only an account - it's a complete ATM, too. User interface (the command line in this case), is mixed in with the business logic of managing the balance.</p>

<p>I'd suggest separating those concerns. One would be the <code>Account</code> model/class that holds the information, and performs actions on said information, and the other would encapsulate the user interface.</p>

<p>Right now, if you decide that you want to do web banking too - not just command line banking - you'd run into trouble. You'd have to make a brand new <code>Account</code> class to handle it. But that wouldn't make sense, since mr Bond only has (or should only have) one account - not different ones depending on how he's accessing them.</p>

<p>I'd do something like this:</p>

<pre><code>class Account
  attr_reader :name, :balance

  def initialize(name, pin, balance)
    @name = name
    @pin = pin # TODO: Check that it's a valid PIN and not just blank or something
    @balance = balance
  end

  def valid_pin?(pin)
    @pin == pin
  end

  def withdraw(amount)
    # subtract amount from balance or raise error if balance
    # isn't large enough (or amount is negative)
  end

  def deposit(amount)
    # add amount to balance or raise error if amount is negative
  end
end

class Atm
  def initialize(account)
    @account = account
  end

  # ...
end
</code></pre>

<p>The <code>Atm</code> class handles all the user interaction much like now, but delegates the actual withdrawal/depositing and PIN checking to the account. How you structure it from here is up to you, but the basic point is that the account is "just" an account.</p>
    </div>