<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Performance</strong></p>

<ul>
<li><p>Avoid recursion like the plague. It is dangerous, it is slow, it leads to greater stack peak use, it is often hard to read. In your case, you don't have tail recursion so the compiler is not likely able to optimize away the recursion with a loop.</p>

<p>There is almost never a reason to use recursion outside algorithm theory and when designing ADTs with very specific requirements.</p></li>
</ul>

<p><strong>Style/best practices</strong></p>

<ul>
<li>Always use <code>{ }</code> after every control/loop statement, even if the following is only one line. Using this style consistently will prevent you from writing numerous bugs.</li>
<li><p>Assignment inside <code>if</code>/loop control expressions should be avoided, as it is dangerous and sometimes makes the code harder to read. For example if you would be tempted to change <code>while ((to[i] = from[i]) != '\0') ++i;</code> to <code>while ((to[i] = from[i++]) != '\0')</code> then you suddenly have a severe bug caused by your (K&amp;R's) coding style.  </p>

<p>In addition, if you never use assignment inside control expressions, you don't have to worry about <code>=</code> vs <code>==</code>. Most compilers warn against assignment for this reason.</p>

<p>Alternative code:</p>

<pre><code>for(i=0; from[i] != '\0'; i++)
{
  to[i] = from[i];
}
to[i] = '\0';
</code></pre></li>
<li><p>Similarly, try to keep loops and expressions simple, by splitting them over several lines. Code such as <code>for (i=0; i &lt; lim-1 &amp;&amp; (c=getchar())!=EOF &amp;&amp; c!='\n'; ++i)</code> is hard to read and maintain. This could be rewritten to for example</p>

<pre><code>for (int i=0; i &lt; lim-1; ++i)
{
  c=getchar();
  if(c==EOF || c=='\n')
  {
    break;
  }
  s[i] = c;
}
</code></pre>

<p>which means the same and results in exactly the same machine code. But it is multiple times easier to read.</p></li>
<li>The most correct type to use for array/string sizes is <code>size_t</code> and not <code>int</code>. This is an unsigned type used by all standard library functions and also what the <code>sizeof</code> operator returns.</li>
<li>The line <code>++head &amp;&amp; --tail)</code> is just weird, this shouldn't be a boolean condition. Replace it with the comma operator: <code>++head, --tail)</code>.</li>
</ul>

<p><strong>Modern standard C remarks</strong></p>

<ul>
<li>The form of <code>main</code> you should use (on hosted systems) is <code>int main (void)</code>. Functions relying on implicit <code>int</code> are not standard.</li>
<li>Declare the loop iterator <code>i</code> (<code>i</code> stands for iterator) inside <code>for</code> loops, unless you actually intend to use it once the loop is done. A common source for bugs in C90 code was that the same <code>i</code> was re-used between loops, potentially carrying garbage values with it.</li>
<li>Don't use <code>1</code> and <code>0</code> for function results, use <code>bool</code> with <code>true</code>/<code>false</code>.</li>
<li><code>//</code> line comments are very handy.</li>
</ul>

<p><strong>Other issues</strong></p>

<ul>
<li>The function <code>getline</code> exists as part of POSIX. It is not a standard C function, but the name might collide on compilers where non-standard POSIX extensions are enabled, such as <code>gcc -std=gnu90</code>.</li>
</ul>
    </div>