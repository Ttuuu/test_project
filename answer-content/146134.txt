<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think your conception of the factory pattern is a little off.  Throughout your classes, you seem to want to deal with concrete factory objects, which doesn't seem to make sense.  Typically, a factory would be invoked statically and would not store local references (i.e. in properties) to the dependencies it is acting upon.</p>

<p>Your MarkerFactory class is close, just needing to have <code>create()</code> method defined as static and possibly defining the class itself as abstract since there would not seem to be any reason to ever instantiate it.</p>

<p>But getting into your other classes, there seem to be issues with where logic lies.  The <code>InfoWindowFactory</code> probably should not have a method such as <code>renderWindowContent()</code> on it.  That would seem to be a method that should perhaps exist on the <code>InfoWindow</code> itself.  Now, if the factory needs to call that method on a concrete window object to get it set up properly before returning it, that might be OK (though I might suggest the InfoWindow constructor is changed to trigger this action).</p>

<p>I would like to see InfoWindowFactory be something like:</p>

<pre><code>namespace YourNamespace;

abstract class InfoWindowFactory
{
    public static final function create(
        Place $place,
        Twig_Environment $twig,
        $template
    ) {
        return new InfoWindow($place, $twig, $template);
    }
}
</code></pre>

<p>Note that we are pushing the render operation down into the InfoWindow object where it probably belongs.  Also note that we have removed the hard-coded template names from this class.  Maybe they truly belong here, in which case maybe they should be class constants rather than buried in a method. But, depending on how you are using these InfoWindows, perhaps this should be passed through as configuration.</p>

<p>My comments on <code>MapFactory</code> would be similar to those for the <code>InfoWindowFactory</code>.  Namely, I would rather see a class like structured like this:</p>

<pre><code>namespace YourNamespace;

use MarkerFactory;
use InfowindowFactory;

abstract class MapFactory
{

    public static final function create(Coordinate $mapCenter, array $places = [], array $mapOptions = [], $isEditableMap = false)
    {
        $map = new Map();

        $map-&gt;setCenter($mapCenter);
        $map-&gt;setMapOptions($mapOptions);

        $markers = [];

        foreach ($places as $place) {
            $position = new Coordinate($place-&gt;getLatitude(), $place-&gt;getLongitude());

            $marker = MarkerFactory::create($position);
            $infoWindow = InfoWindowFactory::create($place, $isEditableMap);

            $marker-&gt;setInfoWindow($infoWindow);

            $markers[] = $marker;
        }

        $map-&gt;getOverlayManager()-&gt;setMarkers($markers);

        return $map;
    }
}
</code></pre>

<p>A comment about validation...</p>

<p>You are doing a good job of trying to enforce typehints on your methods, however I do wonder if it might make sense for you to have classes defined which deal with say a collection of <code>Place</code> objects.  These seem to be critical dependencies that can only be enforced to be an array via type-hinting, meaning that if you truly wanted to be able to validate that you have valid place objects in your array, you might have to go into undesirable approach of inspecting each array item to validate it.  If instead of passing simple array, you passed <code>PlaceCollection</code> or similar, you could be ensured that everything in that collection is a valid <code>Place</code> object.   Certainly, this adds yet another bit of code to the overall system, so really only you can determine if it is worthwhile to do this depending on how you are planning to use this code.  But it is something to consider when these are key items you are working with (vs. say optional configurations or similar).</p>

<p>Do you need any error or exception handling here?  Typically one of the things a factory would do is raise an exception if the dependencies that are passed are not valid (typehinting can do a lot of this for you) or to handle any underyling exceptions that might happen within method execution (i.e. can instantiation of a <code>Map</code>, <code>InfoWindow</code>, etc. object throw an exception?).  I don't really see any consideration here in your code for error or edge conditions.  It seems as if this is considering happy path only.</p>
    </div>