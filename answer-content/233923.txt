<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you're just checking for two values in a range, use a lambda and search linearly through the vector. To speed things up, you can break once you find a second value in that range. Here's how I did it:</p>

<pre class="lang-cpp prettyprint-override"><code>struct Match
{
    bool has_match;
    int value;
};

Match has_one_match(const std::vector&lt;int&gt;&amp; data, int lower, int upper)
{
    if (upper &lt; lower)
    {
        return { false, 0 };
    }

    unsigned times_found = 0;
    const auto is_in_range = [&amp;lower, &amp;upper](int input)
    {
        return input &gt;= lower &amp;&amp; input &lt;= upper;
    };

    Match ret_match{ false, 0 };
    for (const auto&amp; num : data)
    {
        if (is_in_range(num))
        {
            if (++times_found == 2)
            { // 2 values found, condition violated; break
                break;
            }

            ret_match.value = num;
        }
    }

    if (times_found == 1)
    {
        ret_match.has_match = true;
    }

    return ret_match;
}
</code></pre>

<p>From there, to avoid using <code>std::optional</code>, just check if <code>Match::has_match</code> is true before preforming anything with the value.</p>
    </div>