<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, to me this code looks clean, easy to read, so overall, nicely done!</p>

<h3>Avoid repeated queries</h3>

<p>This piece of code runs the exact same query twice:</p>

<blockquote>
<pre><code>queried_titles = [ast.literal_eval(item.title) for item in trends.query.all()]
queried_time = [item.time for item in trends.query.all()]
</code></pre>
</blockquote>

<p>It would be better to run the query once and iterate over its result twice.
Optionally, if not too inconvenient for the rest of code,
a further, less important optimization would be to iterate over the results only once, and extract pairs of title and time in one pass.</p>

<p>There is another form of double-querying in the constructor of <code>trends</code>:</p>

<blockquote>
<pre><code>self.title = f"{list(trends_retriever('US').keys())}"
self.traffic = f"{list(trends_retriever('US').values())}"
</code></pre>
</blockquote>

<p><code>trends_retriever('US')</code> will fetch and parse an HTML document,
so it will be good to only do it once.</p>

<h3>Are some trends removed twice?</h3>

<p><code>inst_range</code> chains into a <code>list</code> the sets of trends returned by <code>title_query</code>.
I didn't analyze deeply to fully understand,
but isn't it possible that there can be duplicates in the resulting list?
If so, it would better to chain into a <code>set</code> instead of a <code>list</code>.</p>

<h3>Do not use exception handling for flow control</h3>

<p>This code catches <code>IndexError</code>:</p>

<blockquote>
<pre><code>for index, item in enumerate(itertools.count()):
    try:
        first_row = set(queried_titles[index])
        second_row = set(queried_titles[index + 1])
        removed_trend = first_row - second_row
        yield removed_trend
    except IndexError:
        break
</code></pre>
</blockquote>

<p>But there is nothing unexpected about <code>IndexError</code>,
<em>we know for certain</em> it will be raised for the last entry of <code>queried_title</code>.</p>

<p>Also note that <code>item</code> is not used in the loop.
For unused loop variables the convention is to name them <code>_</code>.</p>

<p>It seems to me that you can replace this loop with <code>for index in range(len(queried_titles) - 1)</code>.</p>

<h3>Simplify logic</h3>

<p>I find it hard to understand the logic in <code>inst_range</code>.
For example, <code>row_count</code> is incremented in a loop,
until some condition is reached.
During this loop, <code>row_count</code> is used as an index into a list,
but it's never verified if this index is valid.
In other words, it's not obvious that the loop is guaranteed to terminate before <code>row_count</code> goes out of range.
Also it's not a "count", it's really an <em>index</em>.
To add to the confusion, the variable is initialized before the outer for-loop,
and conditionally reset to 0.</p>

<p>Consider this alternative implementation, using more helper functions:</p>

<pre><code>for item in removed_trends:
    first_instance = find_first_instance(queried_titles, item)
    last_instance = find_last_instance(queried_titles, item)
    first_time = queried_time[first_instance]
    last_time = queried_time[last_instance]
    time_difference = (last_time - first_time).total_seconds() / 3600
    yield item, round(time_difference, 2)
</code></pre>

<p>With the introduction of the helper methods <code>find_first_instance</code> and <code>find_last_instance</code>, the earlier doubts are simply eliminated.
Of course, those functions need to be correctly implemented,
but their complexity is now hidden from this higher level code,
and better isolated, so that it will be probably easier to read.</p>

<h3>Beware of <code>x in ...</code> conditions on list</h3>

<p>The implementation of <code>inst_range</code> uses many <code>x in ...</code> conditions in lists.
Keep in mind that searching in a list is an <span class="math-container">\$O(n)\$</span> operation:
in the worst case, all elements will be checked.
The performance penalty can become even worse when this is part of a nested loop.</p>

<p>I haven't looked deeply into your code,
but probably you can optimize this part by building two dictionaries:</p>

<ol>
<li>the first time a trend was seen</li>
<li>the last time a trend was seen</li>
</ol>

<p>You could build these dictionaries by looping over trends and their times in one pass:</p>

<ul>
<li>if <code>trend not in first</code>, then <code>first[trend] = time</code></li>
<li><code>last[trend] = time</code></li>
</ul>

<p>This will be more efficient, because <code>key in ...</code> conditions on dictionaries is an <span class="math-container">\$O(1)\$</span> operation, and so is <code>d[key] = ...</code>.</p>
    </div>