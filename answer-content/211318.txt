<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code is not well organized. The 3 questions are very similar and does not explain <em>what</em> is being asked, and the top-level code mix together the setup logic, the solving logic and the testing logic.</p>

<p>Besides, the whole logic is convoluted: using strings to store state is error-prone; and relying so much on the global state (and even the name of some variables) is even more.</p>

<p>You should:</p>

<ol>
<li><p>Define some constant using enums:</p>

<pre><code>import enum


class Answer(enum.Enum):
    JA = 'ja'
    DA = 'da'


class God(enum.Enum):
    TRUE = True
    FALSE = False
    RANDOM = None
</code></pre></li>
<li><p>Extract out the question structure so it is easier to understand what is being asked:</p>

<pre><code>def answer_truthy(question):
    return yes if question else no


def answer_falsey(question):
    return no if question else yes


def would_you_say_ja_if_asked(question, god):
    if god is God.RANDOM:
        return choice((yes, no))

    god_answer = answer_truthy if god is God.TRUE else answer_falsey
    answer = god_answer(question)
    return god_answer(answer is Answer.JA)
</code></pre>

<p>So you can <code>would_you_say_ja_if_asked(a is God.RANDOM, b)</code> for instance, which is clearer what is being asked.</p>

<p>To make it read even better, you can define this last function as a method on the <code>God</code> class:</p>

<pre><code>class God(enum.Enum):
    TRUE = True
    FALSE = False
    RANDOM = None

    def would_you_say_ja_if_asked(self, question):
        if self is God.RANDOM:
            return choice((yes, no))

        god_answer = answer_truthy if self is God.TRUE else answer_falsey
        answer = god_answer(question)
        return god_answer(answer is Answer.JA)
</code></pre>

<p>Which is used as <code>b.would_you_say_ja_if_asked(a is God.RANDOM)</code> and reads very well.</p></li>
<li><p>Extract out your solving logic out of the setup + test one:</p>

<pre><code>def solve():
    """Solve the puzzle by asking three questions"""
    a = b = c = None

    # Determine which of A or C is not the Random god
    answer = B.would_you_say_ja_if_asked(A is God.RANDOM)
    non_random_god = C if answer is Answer.JA else A

    # Determine the identity of previously selected god
    answer = non_random_god.would_you_say_ja_if_asked(non_random_god is God.FALSE)
    if non_random_god is C:
        c = God.FALSE if answer is Answer.JA else God.TRUE
    else:
        a = God.FALSE if answer is Answer.JA else God.TRUE

    # Determine which god is Random
    answer = non_random_god.would_you_say_ja_if_asked(B is God.RANDOM)
    if answer is Answer.JA:
        b = God.RANDOM
    elif non_random_god is C:
        a = God.RANDOM
    else:
        c = God.RANDOM

    # Deduct the identity of the third god
    last_one = (set(God) - {a, b, c}).pop()
    if a is None:
        a = last_one
    elif b is None:
        b = last_one
    else:
        c = last_one

    return a, b, c
</code></pre></li>
<li><p>Stop relying on global variables and pass state explicitly around:</p>

<pre><code>#! /usr/bin/env python3

"""Setup and find an answer to the hardest puzzle ever.

The puzzle statement is as follows:

    Three gods A, B, and C are called, in no particular
    order, True, False, and Random. True always speaks
    truly, False always speaks falsely, but whether Random
    speaks truly or falsely is a completely random matter.
    Your task is to determine the identities of A, B, and
    C by asking three yes-no questions; each question must
    be put to exactly one god. The gods understand English,
    but will answer all questions in their own language, in
    which the words for yes and no are da and ja, in some
    order. You do not know which word means which.

    Furthermore, a single god may be asked more than one
    question, questions are permitted to depend on the
    answers to earlier questions, and the nature of Random's
    response should be thought of as depending on the flip
    of a fair coin hidden in his brain: if the coin comes
    down heads, he speaks truly; if tails, falsely.

Reference: https://en.wikipedia.org/wiki/The_Hardest_Logic_Puzzle_Ever

The solution is found as follows:

    * ask B if they would say ja if asked 'is A Random?';
    depending on the answer either A or C is not Random.
    * ask the non-Random god if they would say ja if asked
    'are you False?'; the answer will tell who they are.
    * ask the same god if they would say ja if asked
    'is B Random?'; the answer will tell who Random is.
    * the third god can be deduced without further questions.
"""

import sys
import enum
from random import choice, sample


class Answer(enum.Enum):
    JA = 'ja'
    DA = 'da'


class God(enum.Enum):
    TRUE = True
    FALSE = False
    RANDOM = None

    def would_you_say_ja_if_asked(self, question, yes_no_meaning):
        if self is God.RANDOM:
            return choice(yes_no_meaning)

        god_answer = answer_truthy if self is God.TRUE else answer_falsey
        answer = god_answer(question, yes_no_meaning)
        return god_answer(answer is Answer.JA, yes_no_meaning)


def answer_truthy(question, yes_no_meaning):
    yes, no = yes_no_meaning
    return yes if question else no


def answer_falsey(question, yes_no_meaning):
    yes, no = yes_no_meaning
    return no if question else yes


def solve(A, B, C, yes_no_meaning):
    """Solve the puzzle by asking three questions"""
    a = b = c = None

    # Determine which of A or C is not the Random god
    answer = B.would_you_say_ja_if_asked(A is God.RANDOM, yes_no_meaning)
    non_random_god = C if answer is Answer.JA else A

    # Determine the identity of previously selected god
    answer = non_random_god.would_you_say_ja_if_asked(non_random_god is God.FALSE, yes_no_meaning)
    if non_random_god is C:
        c = God.FALSE if answer is Answer.JA else God.TRUE
    else:
        a = God.FALSE if answer is Answer.JA else God.TRUE

    # Determine which god is Random
    answer = non_random_god.would_you_say_ja_if_asked(B is God.RANDOM, yes_no_meaning)
    if answer is Answer.JA:
        b = God.RANDOM
    elif non_random_god is C:
        a = God.RANDOM
    else:
        c = God.RANDOM

    # Deduct the identity of the third god
    last_one = (set(God) - {a, b, c}).pop()
    if a is None:
        a = last_one
    elif b is None:
        b = last_one
    else:
        c = last_one

    return a, b, c


def setup_puzzle():
    yes, no = sample(list(Answer), 2)
    a, b, c = sample(list(God), 3)
    return yes, no, a, b, c


def test(test_cases=10_000):
    for _ in range(test_cases):
        yes, no, A, B, C = setup_puzzle()
        a, b, c = solve(A, B, C, (yes, no))

        if (a, b, c) != (A, B, C):
            print(f'a, b, c = {a}, {b}, {c}', file=sys.stderr)
            print(f'A, B, C = {A}, {B}, {C}', file=sys.stderr)
            sys.exit('Found a failing case')

    print('All tests passed')


if __name__ == '__main__':
    test()
</code></pre></li>
</ol>
    </div>