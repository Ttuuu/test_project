<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know a directory looks like a tree structure. But you don't need to implement it as a tree. To me a file system is simply a map from name to object.</p>

<pre><code>class FileSystem
{
    std::map&lt;std::string, File&gt;.   fs;
    std::string                    currentDir;
};
</code></pre>

<p>The artificial construct of directories is just a convenient way to simplify things for the human brain. But you don't need to model it like that in memory.</p>

<p>I would use a simple map of 'full path name' to object. Then allow the user to use absolute or relative path names to iterate over the file system object.</p>

<p>This will simplify the number of objects you are maintaining. Your methods on the <code>FileSystem</code> class then internally impose the directory structure on the strings in the map. e.g.:</p>

<pre><code>iterator FileSystem::listbegin(std::string const&amp; directory)
{
    std::directory absDirectory = currentDirectory;
    if (directory[0] == '/') {
        absDirectory = directory;
    }
    else {
        absDirectory += '/' + directory;
    }
    if (absDirectory.back() != '/') {
        absDirectory += '/';
    }

    auto find = std::find_if(std::begin(fs), std::end(fs),
                             [&amp;absDirecotry](auto const&amp; v){return v.first.substr(0, absDirecotry.size()) == absDirecotry;});
    return iterator(find);
}
</code></pre>

<hr>

<p>The other thing I would do is that once you have a reference to a file, you should be able to get a standard C++ stream to the object.</p>

<pre><code>std::fsstream      memoryFile(fs, "/ThisIsAfile");
</code></pre>

<p>I would want to treat any file object in this memory filesystem just like a file that is in the standard filesystem.</p>

<hr>

<p>This is more like how S3 implements its filesystem structure.</p>
    </div>