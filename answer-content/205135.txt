<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the general consensus is to avoid functions in <code>Msg</code> constructors when possible.</p>

<p>The one certain thing that will break is the <code>Msg</code> history import/export of the Elm debugger, since functions cannot be serialized.</p>

<p>Evan included this comment in his <a href="https://github.com/evancz/elm-sortable-table#usage-rules" rel="nofollow noreferrer">Sortable Tables</a> example:</p>

<blockquote>
  <p>One of the core rules of The Elm Architecture is <strong>never put functions in your <code>Model</code> or <code>Msg</code> types</strong>. It may cost a little bit of extra code to model everything as data, but the architecture and debugging benefits are worth it.</p>
</blockquote>

<p>Here's some commentary by <a href="https://discourse.elm-lang.org/t/why-functions-cannot-be-part-of-msg/1221" rel="nofollow noreferrer">Zoul on Discourse</a>:</p>

<blockquote>
  <p>Generally speaking, in Elm you model an app with explicit state modified by a pure function based on messages with clear semantics. This makes it very easy to reason about the state changes: it’s quite obvious what state the app is in and what state transitions lead to this state.</p>
  
  <p>Once you start using functions in messages, this model gets much more powerful, but much less transparent. You lose the clear distinction between data and code – the messages no longer describe what you want done, they implement a part of it. You cannot see the behaviour just by looking at the update function anymore. And comparing or serializing the messages gets more complicated.</p>
  
  <p>In the end, it’s probably not worth it.</p>
</blockquote>

<p>Besides breaking the debugger for yourself (and for others, in case you publish a package violating this principle), I don't know of any kind of language problems you may run into if you go down this path, and the above comments are the norm for this question: vague warnings about never putting functions in messages but not much specificity into the <em>why not</em> of the question besides the debugger issue.</p>

<p>But in the end, if the language designer says to never put functions in your <code>Model</code> or <code>Msg</code> types, in bold text nonetheless, I'd defer to their judgment on the matter.</p>
    </div>