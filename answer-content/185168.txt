<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll concentrate on the syntactical issues in this review since the others have already commented on the other parts of the code.</p>

<pre><code>import acm.program.*;
import acm.util.RandomGenerator;

public class exercise4 extends Program {
public int nextPrime(int n){                                          //sieve of Eratosthenes
        final RandomGenerator rgen = RandomGenerator.getInstance();
        boolean[] array = new boolean[n];
</code></pre>

<p>Your code is difficult to read for an experienced Java programmer because you violate all kinds of conventions:</p>

<ul>
<li>Class names start with an uppercase letter, yours (<code>exercise4</code>) doesn't.</li>
<li>After every opening <code>{</code>, the code is written one more level to the right. So the line that declares <code>nextPrime</code> should be more to the right. Ideally you let your IDE format the code for you. For Eclipse, press <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd>, for IntelliJ press <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>L</kbd>, for Netbeans <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd>.</li>
<li><code>rgen</code> is a <code>final</code> variable, but <code>array</code> isn't. That's inconsistent. Either both or none should be final.</li>
</ul>

<p>Continuing:</p>

<pre><code>        for (int i=2; i&lt;n;i++) {
</code></pre>

<p>You should leave some space around the operators, so write <code>for (int i = 2; i &lt; n; i++) {</code>.</p>

<pre><code>            array[i]=true;
        }
        int i=2;
        while (i&lt;Math.sqrt(n)) {
            if (array[i]==true) {
</code></pre>

<p>You can leave out the <code>== true</code>.</p>

<pre><code>                int m=i*i;
                int j=0;
                while (m+j*i&lt;n) {
</code></pre>

<p>You should never call this code with an <code>n</code> that is close to <code>Integer.MAX_VALUE</code>. Otherwise the expression <code>m + j * i</code> will overflow and become negative, and something negative is surely smaller than a large <code>n</code>.</p>

<pre><code>                    array[m+j*i]=false;
                    j++;
                };
            };
            i++;
        };
        int random;
        do {
            random=rgen.nextInt(n);
        } while(array[random]==false);
        return random;
    }
    public void run(){
        //long start = System.currentTimeMillis(); 
        println(nextPrime(2_000_000));
        //long elapsedTimeMillis = System.currentTimeMillis()-start;
        //float elapsedTimeSec = elapsedTimeMillis/1000F;
        //println("Completed in: "+elapsedTimeSec+" seconds.");
    }
}
</code></pre>
    </div>