<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Write <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">doctests</a> for your three given test cases.</p>

<p>None of the following code has anything to do with <code>return len(safe_pawns_list)</code>, so it's dead code that can serve no purpose (except possibly to cause a crash):</p>

<blockquote>
<pre><code>#delete the pawns which belong to the lowest row number
for pawn in list_of_pawns:
    row_numbers.append(pawn[1])

lowest_row_indexes = []

for i, row_number in enumerate(row_numbers):
    if row_number == min(row_numbers):
        lowest_row_indexes.append(i)

for i, lowest_row_index in enumerate(lowest_row_indexes):
    del list_of_pawns[lowest_row_index - i]
    del row_numbers[lowest_row_index - i]
</code></pre>
</blockquote>

<p>The remaining first half of the function is mainly about finding the diagonal neighbours of each pawn.  That code is rather tedious, with lots of mentions of <code>pawn[0]</code> and <code>pawn[1]</code>, with a bit of arithmetic and validation mixed in.  That code can be made a lot more expressive by moving it into a <code>Position</code> class.</p>

<pre><code>from collections import namedtuple

class Position(namedtuple('Position', 'file rank')):
    def __new__(cls, algebraic):
        file, rank = algebraic[0], int(algebraic[1])
        return super(Position, cls).__new__(cls, file, rank)

    def offset(self, file=0, rank=0):
        """
        Return a Position relative to this position (or None, if it's off the
        board).

        &gt;&gt;&gt; Position('a3').offset(rank=-1) == Position('a2')
        True
        &gt;&gt;&gt; Position('a3').offset(file=-1) is None
        True
        &gt;&gt;&gt; Position('a2').offset(file=+1, rank=+2) == Position('b4')
        True
        """
        file = chr(ord(self.file) + file)
        rank += self.rank
        if 'a' &lt;= file &lt;= 'h' and 1 &lt;= rank &lt;= 8:
            return type(self)(file + str(rank))


def safe_pawns(pawns: set) -&gt; int:
    """
    Count the number of pawns that are safe.

    &gt;&gt;&gt; safe_pawns({"b4", "d4", "f4", "c3", "e3", "g5", "d2"})
    6
    &gt;&gt;&gt; safe_pawns({"b4", "c4", "d4", "e4", "f4", "g4", "e5"})
    1
    &gt;&gt;&gt; safe_pawns({"b4", "c4", "d4", "e4", "f4", "g4", "e3"})
    2
    """
    pawns = set(Position(p) for p in pawns)
    return sum(
        p.offset(file=-1, rank=-1) in pawns or
        p.offset(file=+1, rank=-1) in pawns
        for p in pawns
    )
</code></pre>
    </div>