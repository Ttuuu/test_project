<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Clarification (OK)</h2>
<p>After update of your question, it has gotten clear that:</p>
<ul>
<li>you work on a DAG, which includes a Tree</li>
<li>both your strategies DFS and BFS are in Pre-Order</li>
</ul>
<hr>
<p>=&gt; original answer requesting clarification from the OP</p>
<h2>Review Definitions</h2>
<p>Before being able to review your code, I would like to review your definitions. Perhaps you should clarify your algorithm with examples.</p>
<blockquote>
<p>I believe this code prints both the DFS and BFS of a directed graph.</p>
</blockquote>
<p>How do you decide the breadth level of a node when it has multiple parents? Or would you only work with <em>Tree</em> instead of <em>DAG</em>?</p>
<blockquote>
<p>As a reminder of the difference:</p>
<p>DFS (Depth first search) starts with a given node and explores the
first unexplored node it comes across before returning to itself again
and exploring its remaining nodes (e.g: if the parent node 1 has 2
children 2, 3 the DFS method will explore 2 and its children nodes
before exploring 3</p>
</blockquote>
<p>Because you say to explore remaining nodes before returning to self, you are not very clear whether the order is A or B.</p>
<ul>
<li>(A) 1 -&gt; 2 -&gt; 3</li>
<li>(B) 2 -&gt; 3 -&gt; 1</li>
</ul>
<blockquote>
<p>BFS (Breadth first search) works down a tree in a top-to-bottom manner
(e.g: a graph with parent 1 and children 2, 3 will print level 1 first
(1) then level 2 (2, 3) and then level 3 (the children of nodes 2 and
3)</p>
</blockquote>
<p>The <em>order</em> is independant of search <em>strategy</em> (DFS/BFS). BFS can be both top-to-bottom or bottom-to-top.</p>
<hr>
<h2>Terminology</h2>
<ul>
<li><strong>DFS</strong>: process each child completely before processing the next child</li>
<li><strong>BFS</strong>: process each level across childs before processing the next level</li>
<li><strong>Pre-Order</strong>: process self before rest of tree</li>
<li><strong>Post-Order</strong>: process rest of tree before self</li>
</ul>
<p>In your example of parent 1 having child 2 and child 3:</p>
<ul>
<li>DFS Pre-Order: 1 -&gt; 2 -&gt; 3</li>
<li>DFS Post-Order: 2 -&gt; 3 -&gt; 1</li>
<li>BFS Pre-Order: 1 -&gt; 2 -&gt; 3</li>
<li>BFS Post-Order: 2 -&gt; 3 -&gt; 1</li>
</ul>
<p>Suppose 2 would have its own child 4:</p>
<ul>
<li>DFS Pre-Order: 1 -&gt; 2 -&gt; 4 -&gt; 3</li>
<li>DFS Post-Order: 4 -&gt; 2 -&gt; 3 -&gt; 1</li>
<li>BFS Pre-Order: 1 -&gt; 2 -&gt; 3 -&gt; 4</li>
<li>BFS Post-Order: 4 -&gt; 2 -&gt; 3 -&gt; 1</li>
</ul>
<p>You could even add a third dimension <em>direction</em> in which case we distinguish left-to-right and right-to-left.</p>
    </div>