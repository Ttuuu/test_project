<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid <code>using namespace std</code></h1>
<p>That's not one of the namespaces designed for wholesale import into the global namespace.  Such a <code>using</code> directive denies you the advantages that namespaces bring.</p>
<h1>Always check your inputs</h1>
<p>See the problem here?</p>
<blockquote>
<pre><code>cin &gt;&gt; sUserNameInput;
sUserName.push_back(sUserNameInput);
</code></pre>
</blockquote>
<p>If the <code>&gt;&gt;</code> operator fails, <code>sUserNameInput</code> will still be empty.  But the requirement says it must be greater than 1 (presumably meaning the name length), so we fail.</p>
<p>Always check that <code>&gt;&gt;</code> was successful, either by testing the stream (it has a conversion to <code>bool</code>) or by setting it to throw exceptions (and then handle the exceptions appropriately).</p>
<h1>Use <code>const</code> on reference parameters that we're not changing.</h1>
<p>For example, <code>YearlyAmount()</code> only needs to read <code>dMonthlyWage</code>, not modify it, and doesn't use <code>sUserName</code> at all:</p>
<pre><code>void YearlyAmount(std::vector&lt;double&gt;&amp; dYearlySalary,
                  std::vector&lt;double&gt; const&amp; dMonthlyWage,
                  std::vector&lt;string&gt;&amp;)
</code></pre>
<p>We should probably just remove the unused paramater.</p>
<h1>Accessing last element</h1>
<p><code>std::vector()</code> provides <code>back()</code> as a more convenient way to write <code>*v.rbegin()</code>.</p>
<h1>Lines end in <code>\n</code></h1>
<p>We need to print <code>\n</code> at the <em>end</em> of each line, not at its beginning.</p>
<h1><code>std::toupper()</code> takes an <code>int</code> value</h1>
<p>Arguments to character conversion functions take the <em>unsigned</em> value of a character, represented as <code>int</code>.  We need to cast to <code>unsigned char</code> before the promotion to <code>int</code> happens, to avoid passing negative values.</p>
<h1>Prefer returning a value than writing to a reference.</h1>
<p><code>ContinueOptions</code> has a single return value, so return it.  Look how much clearer that is:</p>
<blockquote>
<pre><code>bool bExit = false;
do
{
    ...
    ContinueOptions(bExit);
}while(bExit == false);
</code></pre>
</blockquote>
<p>That becomes:</p>
<pre><code>do
{
    ...
} while(ContinueOptions());
</code></pre>
<p>That's with a function like this:</p>
<pre><code>bool ContinueOptions()
{
    std::cout &lt;&lt; "Do you wish to add another family member? (y/N) ";
    char cSelection;
    std::cin &gt;&gt; cSelection;
    if (!std::cin) {
        // input failed - assume "no"
        return false;
    }
    bool go_again = std::toupper(static_cast&lt;unsigned char&gt;(cSelection)) == 'Y';
    std::cout &lt;&lt; (go_again ? "Add a new family member\n" : "Goodbye!\n");
    return go_again;
}
</code></pre>
    </div>