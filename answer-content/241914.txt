<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview:</h2>
<p>In relation to the message queue:</p>
<ul>
<li>Since you are doing a manual <code>new</code> and <code>delete</code> that seems a bit of a waste.</li>
<li>Also the only thing you are creating is a unique_ptr.</li>
<li>The unique_ptr is never in stored correctly typed so it never does any work.</li>
</ul>
<p>So I would not store a pointer to a <code>std::unique_ptr</code> I would just store the original pointer. I like the idea of passing in and retrieving a <code>unique_ptr</code> to the access function.</p>
<hr>
<p>Why are you passing a pointer to <code>CommandMessage</code>? It can't be null (you never check so must be valid. To make this more formal pass by reference to indicate to the user that it should be a normal object.</p>
<pre><code>void setTestMessage(CommandMessage *testMsg, uint8_t someResource)
std::unique_ptr&lt;DummyHelper&gt; getUniquePtr(CommandMessage *testMsg)

// I would do this:

void setTestMessage(CommandMessage&amp; testMsg, uint8_t someResource)
std::unique_ptr&lt;DummyHelper&gt; getUniquePtr(CommandMessage&amp; testMsg)
</code></pre>
<p>Note: Putting the '*' on the right by the variable is very "C" like. C++ considers this part of the type information so it is usually on the left with the type.</p>
<hr>
<p>Why is the input message different from the output message?</p>
<pre><code>void setTestMessage(CommandMessage *testMsg, uint8_t someResource)
std::unique_ptr&lt;DummyHelper&gt; getUniquePtr(CommandMessage *testMsg)
</code></pre>
<p>So input is a <code>uint8_t</code> but the output is <code>std::unique_ptr&lt;DummyHelper&gt;</code>? I would expect the interface to be symmetric.</p>
<pre><code>template&lt;typename T&gt;
void sendMessage(CommandMessage&amp; messageStream, std::unique_ptr&lt;T&gt;&amp;&amp; msg);

template&lt;typename T&gt;
std::unique_ptr&lt;T&gt; recvMessage(CommandMessage&amp; messageStream);
</code></pre>
<hr>
<pre><code>template&lt;typename T&gt;
std::unique_ptr&lt;T&gt; recvMessage(CommandMessage&amp; messageStream)
{
   // To store pointers in an integer type you should be using `std::intptr_t`
   // This is an int type that is guaranteed large enough to store a pointer.
   // Don't make the assumption that `uint64_t` is large enough.
   // It might be but that is not guaranteed for the future.
   std::intptr_t raw_ptr = messageStream.getParameter();

   return reinterpret_cast&lt;T*&gt;(raw_ptr);
}


template&lt;typename T&gt;
void sendMessage(CommandMessage&amp; messageStream, std::unique_ptr&lt;T&gt;&amp;&amp; msg)
{
    messageStream.setParameter(msg.release());
}
</code></pre>
<hr>
    </div>