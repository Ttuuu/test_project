<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For such specific problems as you are facing here I almost always turn to <a href="https://benchmarkdotnet.org/index.html" rel="nofollow noreferrer">BenchmarkDotNet</a>, because it provide you with an easy what to try out different implementation strategies and various .NET features that might tweak the performance to your satisfaction.</p>

<h2>Parallel conversion</h2>

<pre><code>Parallel.ForEach(...)
</code></pre>

<p>and allocate a fair chunk of the array(s) to each of the threads to maximise the CPU utilization. Also try to find the optimal number of threads can be beneficial. The optimal number is often somewhere between the number of cores on your CPU to 2 x CPU cores - but play around with in in <a href="https://benchmarkdotnet.org/index.html" rel="nofollow noreferrer">BenchmarkDotNet</a></p>

<h2>Reading and Writing</h2>

<p>How are data being read and written between System 1 and System 2. Depending if it's database, REST, CSV, File, ... there might be numerous things that also can ben improved in that area. Maybe you can also partition your conversion and bulk read and write data in this part of the flow and not doing it directly on the conversion algorithm.</p>

<p>Maybe using the </p>

<pre><code>async / await
</code></pre>

<p>patterns to be less dependent on I/0 bottlenecks.</p>

<h2>Algorithm Tweaks</h2>

<p>Other StackOverflow articles describe optimised algorithms to do this type of conversion - like <a href="https://stackoverflow.com/a/3974535/356218">Here</a> and maybe in combo with the above you can get your application to perform in the way you need.</p>

<p>Hope you can use some of this for inspiration.</p>
    </div>