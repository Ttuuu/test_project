<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>

<p>If the user enters the values <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, <code>1</code>, ... they would expect the program to eventually stop asking me for input, but it won't.  When the input is odd, the <code>counter</code> variable only increments when the value entered is larger than <code>ans</code>.  The increment statement should be outdented one level, so it executes even when an odd number is not greater than <code>ans</code>:</p>

<pre><code>    if x%2!=0:
        if ans &lt; x:
            ans = x
        counter +=1    # &lt;-- outdented to level of "x%2 != 0" test
    else:
        even+=1
        counter+=1
</code></pre>

<h2>DRY: Don't Repeat Yourself</h2>

<p>In contrast to WET (Write Everything Twice).</p>

<p>You have two <code>counter += 1</code> statements, one in each path of the <code>if ... else</code> statement.  Since you are counting up by one in both paths, this code should be moved out of the <code>if ... else</code> statement, so it can be written just once:</p>

<pre><code>    if x%2!=0:
        if ans &lt; x:
            ans = x
    else:
        even+=1

    counter += 1       # Executed regardless of which branch of if/else is taken.
</code></pre>

<hr>

<p>In programming, there are 3 kinds of numbers: zero, one, and many.  Zero and one are generally fine when written as constants through-out a program. "Many" is an exception; you don't want to write it more than once.</p>

<p>If you are asked to change the program to allow up to 20 integer to be input, you would have to change two statements: <code>while counter &lt; 10:</code> and <code>if even == 10:</code>.  This is frowned up on; when you have more than one, it is easy to miss one.  One approach is to create a constant for each different kind of "many" value:</p>

<pre><code>LIMIT = 10
# ...

while count &lt; LIMIT:
    # ...

if even == LIMIT:
    # ...
else:
    # ...
</code></pre>

<p>Now, you just have to change the <code>LIMIT = 10</code> statement if you want to change the number of values to be input.</p>

<p>But there is another way.  Instead of checking if all the values were even (<code>even == LIMIT</code>), we could count the number of odd values:</p>

<pre><code>counter = 0
ans = 0
odd = 0
while counter &lt; 10:
    x = int(raw_input('Please enter an integer: '))
    if x % 2 != 0: 
        if ans &lt; x:
            ans = x
            odd += 1
    counter += 1

if odd &gt; 0:
    print 'the largest odd number entered was ', ans
else:
    print 'All numbers were even'
</code></pre>

<p>Now we are counting the number of odd values, and the test at the end checks if any odd numbers were given.  And "any odd numbers" simply means the count of odd numbers is greater than zero ... which is an "ok" constant to write directly into the code.</p>

<h2>Sentinels</h2>

<p>We still may have a bug.  If the user enters <code>-3</code>, <code>2</code>, <code>-5</code>, <code>4</code>, <code>6</code>, <code>-7</code>, <code>-8</code>, <code>4</code>, <code>-10</code>, <code>-8</code>, the program will reply:</p>

<blockquote>
  <p>the largest odd number entered was  0</p>
</blockquote>

<ol>
<li><code>0</code> isn't "odd".</li>
<li>We never entered the value <code>0</code>.</li>
</ol>

<p>The problem here stems from initializing <code>ans = 0</code>, and hoping that some odd value will be larger than that value, so it will be overwritten.</p>

<p>A better approach is to initialize <code>ans</code> to a sentinel value, and when the first odd value is encountered, update <code>ans</code> to that value instead of checking whether the first odd value is larger than <code>ans</code>.  Actually, <code>0</code> is a perfectly fine sentinel value, when looking for an odd value, but <code>None</code> is a more common value:</p>

<pre><code>counter = 0
ans = None                           # Sentinel value
while counter &lt; 10:
    x = int(raw_input('Please enter an integer: '))
    if x % 2 != 0: 
        if ans is None or ans &lt; x:   # Check now includes sentinel value
            ans = x
    counter += 1

if ans is not None:
    print 'the largest odd number entered was ', ans
else:
    print 'All numbers were even'
</code></pre>

<p>Note that the sentinel value performs double duty.  If <code>ans</code> is still the sentinel value at the end of the loop, then no odd values were found.  The <code>odd</code> count is unnecessary and has been eliminated.</p>

<p>Alternatively, you could initialize <code>ans</code> to a value smaller than any value the user could possibly enter.  Unfortunately, Python's integer range is not bounded, so they could enter any arbitrarily large negative integer.  However, we're not limited to integers, so we could initialize <code>ans = float("-inf")</code>.  Any integer the user enters will be greater than that, so the sentinel would not need to be checked inside the loop.  The test at the end could use <code>if not math.isinf(ans):</code> to detect if any odd values were entered.</p>

<h2>Loop Like a Native</h2>

<p>The expression "Loop Like a Native" comes from a <a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">PyCon 2013 presentation</a>, which contains advance topics, like generators.  Caution: sharp learning curve ahead if you follow that link.</p>

<p>But Python developers rarely write <code>while</code> loops with counters to loop a fixed number of times; they use a <code>for</code> loop.</p>

<pre><code>ans = None
for _ in range(10):
    x = int(raw_input('Please enter an integer: '))
    if x % 2 != 0: 
        if ans is None or ans &lt; x:
            ans = x

if ans is not None:
    print 'the largest odd number entered was ', ans
else:
    print 'All numbers were even'
</code></pre>

<h2>Minutiae</h2>

<ul>
<li>Python2.x's <a href="https://www.python.org/dev/peps/pep-0373/" rel="nofollow noreferrer">End Of Life</a> (EOL) is January 1, 2020.  If it is not a job/class requirement to study Python 2.x, you should learn Python 3.x</li>
<li>Follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> style guide when writing Python.  There are many tool to help you check compliance, such as PyLint, PyChecker, PyFlakes to name a few.</li>
<li><code>ans</code> is not a good variable name; it suggests "answer", but answer to what?  <code>greatest_odd_value</code> is much more descriptive, but perhaps too verbose.  <code>odd_max</code> would be a good balance between brevity and descriptiveness.</li>
</ul>
    </div>