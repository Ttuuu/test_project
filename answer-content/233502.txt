<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Copying <code>processResults.py</code> into the subdirectories is unnecessary and clutters up the code and your disk drive.  Change <code>processResults.py</code> so that it takes a path of the directory to process.  Better still, turn processResults.py into a function and combine the two scripts into one much simpler one.  Without the overhead of using <code>POpen()</code> or <code>call()</code> this should run faster.</p>

<pre><code>'''                                                                                                                      
Automates data processing and collection
'''

import csv
from pathlib import Path


def process(directory='.'):
    '''
    Artificial process() function that generates and returns
    dummy Summary_Total data.
    '''

    header = ['A','B','C','D','E','F','G']
    directory = Path(directory).resolve()
    name = directory.parts[-1]
    data = [[name] + [i]*(len(header) - 1) for i in range(1, 4)]

    return [header] + data


def write_csv(path, rows):
    '''
    Boilerplate for writing a list of lists to a csv file
    '''

    with path.open('w', newline='') as f:
        csv.writer(f).writerows(rows)


def generate_results(pattern='*'):
    '''
    Automates processing each data directory under folders matching the glob-style pattern
    and creating individual and collective summary CSV's
    '''
    for folder in Path('.').glob(pattern):

        summaries_csvs = []

        # if the sub_dirs need to be done in order, use sorted(folder.iterdir())
        for sub_dir in folder.iterdir():
            if sub_dir.is_dir():
                sub_dir = sub_dir.resolve()

                summary = process(sub_dir)

                # for the big csv, only include the header from the first summary data
                if not summaries_csvs:
                    summaries_csvs.extend(summary)
                else:
                    summaries_csvs.extend(summary[1:])

                result_dir = sub_dir / 'results'
                result_dir.mkdir(exist_ok=True)

                # this is the individual csv in each data sub_dir
                write_csv(result_dir / 'Summary_Total.csv', summary)

        # this is the collective summary csv in each data folder
        write_csv(folder.with_suffix('.csv'), summaries_csvs)


# process data folders that match the glob pattern
generate_results('Test/[UN]*Test')
</code></pre>
    </div>