<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a partial review, since I went over only some of the classes/methods  </p>

<h2><code>PlaylistTrack</code></h2>

<p>there are several problems with this class:</p>

<ol>
<li><p><strong>Copy of properties</strong><br>
if the class already holds a reference to <code>Track</code>, why does it hold a copy of the track's id in a separate property? it requires you to maintain that property via a separate setter. you can access the same info from the <code>track</code> instance variable. </p></li>
<li><p><strong>dateAdded</strong><br>
Don't use the obsolete date/time classes from <code>java.util</code>. use the newer <code>java.time</code> package. In your case, you probably want to define <code>dateAdded</code> with type <code>LocalDateTime</code> and assign it the returned value of <code>LocalDateTime.now()</code>.  </p></li>
<li><p><strong>playlist</strong><br>
I question the necessity of this reference. It seems to me like a direct translation of DB many-to-many model to Java. However, this relation is represented differently in Java, since we have the construct of collections. usually items inside a collection <em>do not</em> maintain a reference to the POJO that holds the collection, since it is not needed: when you access a collection of <code>PlaylistTrack</code> it is through a reference to a particular <code>PLaylist</code>. If you want to know which playlists have a particular track, you would maintain a collection of playlists in the <code>Track</code> class - this is how many-to-many relation is represented in Java - two independent one-to-many relations. I also do not understand why <code>addTracks()</code> returns a list of <code>PlaylistTrack</code>. the method is a special case of setter method, and we know what is the proper return value of this type of method.</p></li>
<li><p><strong>setters vs constructor</strong><br>
instances of <code>PlaylistTrack</code> class are initialized by calling multiple setter methods. this is an error prone process. what if you forgot to set a property? moreover, <code>dateAdded</code> is initialized to a default <code>now()</code> value that is not dependent on the track. Having an "all args" constructor forces the caller to supply values to all the properties that rely on external values. the constructor should <em>NOT</em> require a value for <code>dateAdded</code> as it can initialize this property internally.  If you fell like the constructor contains too many args, or that some properties can have default values, use the <code>Builder</code> pattern to supply callers with method-chaining instance creation.</p></li>
</ol>
    </div>