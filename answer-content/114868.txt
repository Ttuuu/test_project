<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>This answer is mostly about design and good practice, and not so much about the algorithms themselves. Therefore, I will mostly use <code>mergeSort</code> in the examples.</em></p>

<p>For the sake of completeness: a sorting algorithm with an array + size interface is really C-ish. A proper C++ algorithm would take a pair of iterators and would be templated:</p>

<pre><code>template&lt;typename RandomAccessIterator&gt;
void mergeSort(RandomAccessIterator first, RandomAccessIterator last);
</code></pre>

<p>Moreover, most of the sorting algorithms in the standard library additionally accept an optional <code>Compare</code> parameter so that you can use something else than <code>operator&lt;</code> to compare two elements. Assuming you have a C++14 compiler, you can use <a href="http://en.cppreference.com/w/cpp/utility/functional/less_void" rel="nofollow noreferrer"><code>std::less&lt;&gt;</code></a> as a default:</p>

<pre><code>template&lt;
    typename RandomAccessIterator,
    typename Compare = std::less&lt;&gt;
&gt;
void mergeSort(RandomAccessIterator first, RandomAccessIterator last,
               Compare compare={});
</code></pre>

<p>Now, let's have a look at the functions that you have reimplemented and that you can already find in the standard library (there is some overlap with other answers):</p>

<ul>
<li><p><code>swapElements</code> actually performs <code>std::swap(toSort[i], toSort[j]);</code>, or <code>std::swap(*it1, *it2);</code> if we consider that <code>it1</code> and <code>it2</code> are iterators corresponding to <code>toSort + i</code> and <code>toSort + j</code>. Note that we have templated <code>mergeSort</code> so that it can sort any random-access collection of any type. We would like our program to be able to use user-defined <code>swap</code> function instead of <code>std::swap</code> so that it can take advantage of the potential optimizations. We can use <a href="http://en.cppreference.com/w/cpp/language/adl" rel="nofollow noreferrer">argument-dependent lookup</a> to do the job:</p>

<pre><code>using std::swap;
swap(*it1, *it2);
</code></pre>

<p>The first line tells the compiler to take <code>std::swap</code> into account for unqualified calls to <code>swap</code>. The second makes an unqualified call to <code>swap</code>: the compiler will check the types of <code>*it1</code> and <code>*it2</code> and search for a <code>swap</code> function in their associated namespace. If the lookup finds such a function, it will use it, otherwise it will use <code>std::swap</code> instead. Note that you can also use <a href="http://en.cppreference.com/w/cpp/algorithm/iter_swap" rel="nofollow noreferrer"><code>std::iter_swap</code></a> which does exactly that:</p>

<pre><code>std::iter_swap(it1, it2);
</code></pre></li>
<li><p><code>partitionElements</code> could probably be replaced by <a href="http://en.cppreference.com/w/cpp/algorithm/partition" rel="nofollow noreferrer"><code>std::partition</code></a>.</p></li>
<li><p>You can replace <code>copyArray</code> by <a href="http://en.cppreference.com/w/cpp/algorithm/copy" rel="nofollow noreferrer"><code>std::copy</code></a>, or <a href="http://en.cppreference.com/w/cpp/algorithm/move" rel="nofollow noreferrer"><code>std::move</code></a> if you know that you won't read the elements after they have been moved-from. Note that <code>std::sort</code> from the standard library is required to work with move-only types too, so it would be nice if you could ensure that your sorting algorithms work with such types (agreed, it's not trivial for quicksort).</p></li>
<li><p>I am pretty sure that <code>mergeParts</code> could be replaced by <a href="http://en.cppreference.com/w/cpp/algorithm/inplace_merge" rel="nofollow noreferrer"><code>std::inplace_merge</code></a> too.</p></li>
</ul>

<hr>

<p>So, taking all of that into account, here is how a modern C++ <code>mergesort</code> could look:</p>

<pre><code>template&lt;typename RandomAccessIterator, typename Compare&gt;
void mergeSort(RandomAccessIterator first, RandomAccessIterator last,
               Compare compare, std::size_t size) {
    if (size &lt; 2) return;
    auto middle = first + size / 2;
    mergeSort(first, middle, compare, size / 2);
    mergeSort(middle, last, compare, size - size/2);
    std::inplace_merge(first, middle, last, compare);
}

template&lt;
    typename RandomAccessIterator,
    typename Compare = std::less&lt;&gt;
&gt;
void mergeSortImpl(RandomAccessIterator first, RandomAccessIterator last,
               Compare compare={})
{
    std::size_t size = last - first;
    mergeSortImpl(first, last, compare, size);
}
</code></pre>

<p>This is better, but still not perfect: the algorithm currently works with random-access iterators, which is ok with <code>std::vector</code>, <code>std::deque</code> or <code>std::array</code>, but it also means that it doesn't work with <code>std::list</code> or <code>std::forward_list</code> which respectively expose bidirectional iterators and forward iterators. <code>std::inplace_merge</code> doesn't work with forward iterators (yet?) but it works fine with bidirectional iterators; here is what we have to change to make our <code>mergeSort</code> work with bidirectional iterators:</p>

<ul>
<li>Change iterators subtractions by calls to <a href="http://en.cppreference.com/w/cpp/iterator/distance" rel="nofollow noreferrer"><code>std::distance</code></a>.</li>
<li>Change the iterator-size addition by <a href="http://en.cppreference.com/w/cpp/iterator/next" rel="nofollow noreferrer"><code>std::next</code></a>.</li>
<li>Change the name of the template parameters so that they do not lie.</li>
</ul>

<p>Those simple functions from the header <code>&lt;iterator&gt;</code> work with any category of iterator that is at least forward iterator. That also means that if one day <code>std::inplace_merge</code> works with forward iterators, then <code>mergeSort</code> will also work with forward iterators out-of-the-box and allow to sort, for example, singly linked lists. Here is our new enhanced algorithm:</p>

<pre><code>template&lt;typename RandomAccessIterator, typename Compare&gt;
void mergeSort(RandomAccessIterator first, RandomAccessIterator last,
               Compare compare, std::size_t size) {
    if (size &lt; 2) return;
    auto middle = std::next(first, size / 2);
    mergeSort(first, middle, compare, size / 2);
    mergeSort(middle, last, compare, size - size/2);
    std::inplace_merge(first, middle, last, compare);
}

template&lt;
    typename RandomAccessIterator,
    typename Compare = std::less&lt;&gt;
&gt;
void mergeSortImpl(RandomAccessIterator first, RandomAccessIterator last,
               Compare compare={})
{
    std::size_t size = std::distance(first, last);
    mergeSortImpl(first, last, compare, size);
}
</code></pre>

<p>More than an in-depth review of your algorithms, this answer was more about good pratices when writing algorithms. Basically, here is what you should keep in mind:</p>

<ul>
<li>Make your algorithms generic when possible.</li>
<li>Iterators are the way to go (even though ranges will enhance things).</li>
<li>The standard library can help you.</li>
<li>Categories of iterators matter.</li>
<li>Custom comparisons are cool (if you give <code>std::greater&lt;&gt;</code> instead of <code>std::less&lt;&gt;</code> to a sorting algorithm, it will sort the collection in reverse order).</li>
</ul>
    </div>