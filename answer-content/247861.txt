<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of the old <code>Tuple</code> objects, you should use <code>ValueTuple</code>. They are more flexible and easier to read and maintain according to names and is further more elaborated and incorporated in C# as language. So your Dictionary could look like:</p>
<pre><code>  var index2strings = new SortedDictionary&lt;int, (string source, string target)&gt;();
  for (int i = 0; i &lt; indexes.Length; i++)
  {
    index2strings.Add(indexes[i], (sources[i], targets[i]));
  }
</code></pre>
<hr>
<p>You can benefit from setting the capacity of the string builder to a large value, - maybe as:</p>
<pre><code>  StringBuilder res = new StringBuilder(S.Length * 2);
</code></pre>
<hr>
<p>Because <code>KeyValuePair&lt;K,V&gt;</code> provides a <a href="https://docs.microsoft.com/en-us/dotnet/csharp/deconstruct" rel="nofollow noreferrer">"decontructor"</a>, you can replace this:</p>
<blockquote>
<pre><code>  foreach (var item in index2strings)
  {
    var index = item.Key;
    var source = item.Value.Item1;
    var target = item.Value.Item2;
</code></pre>
</blockquote>
<p>with this:</p>
<pre><code>  foreach ((var index, (var source, var target)) in index2strings)
  {
</code></pre>
<p>if you use <code>ValueTuple</code> as suggested above.</p>
<hr>
<p>This:</p>
<blockquote>
<pre><code>    for (int k = curr; k &lt; index; k++)
    {
      res.Append(S[k]);
      curr++;
    }
</code></pre>
</blockquote>
<p>can be replaced with:</p>
<pre><code>    int length = index - curr;
    res.Append(S.Substring(curr, length));
    curr += length;
</code></pre>
<p>According to my measurements it's cheaper to add one string as a whole than a sequence of its chars.</p>
<hr>
<p>Likewise can this:</p>
<blockquote>
<pre><code>    //check the entire prefix is found
    bool isFound = true;
    for (int sIndx = index, j = 0; sIndx &lt; index + source.Length; sIndx++, j++)
    {
      if (S[sIndx] != source[j])
      {
        isFound = false;
        break;
      }
    }
    if (!isFound)
    {
      continue;
    }
</code></pre>
</blockquote>
<p>be replaced with:</p>
<pre><code>    if (S.Substring(index, source.Length) != source)
    {
      continue;
    }
</code></pre>
<p>and this:</p>
<blockquote>
<pre><code>    foreach (var t in target)
    {
      res.Append(t);
    }
</code></pre>
</blockquote>
<p>with:</p>
<pre><code>    res.Append(target);
</code></pre>
<p>and finally this:</p>
<blockquote>
<pre><code>  for (int i = curr; i &lt; S.Length; i++)
  {
    res.Append(S[i]);
  }
</code></pre>
</blockquote>
<p>with:</p>
<pre><code>  res.Append(S.Substring(curr));
</code></pre>
<p>When doing so it seems that you can cut the duration to about a little lesser than half the time.</p>
    </div>