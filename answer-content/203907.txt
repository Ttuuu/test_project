<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>inline functions</h2>

<p>inline function are great when:</p>

<ul>
<li>You want to surround a lambda with a little code</li>
<li>You want to use <a href="https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters" rel="nofollow noreferrer">reified types</a>.</li>
</ul>

<p>They are not great when you have a large function, as every call to that function will be replaced with the body of the function.</p>

<p>Therefor, inlining apiToDomain seams the wrong choice.
You have another function: API.toDomain.</p>

<h3><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/associate.html" rel="nofollow noreferrer">associate</a></h3>

<p>I found the following in your code:
    map{ it.a to it.b }.toMap() </p>

<p>This can replaced by:</p>

<pre><code>associate{ it.a to it.b }
</code></pre>

<p>(it can be used if you have one parameter)</p>

<h3>associateWith</h3>

<p>In kotlin 1.3, you can use associateWith for <code>simpleConstruct</code>:</p>

<pre><code>val map = listOf(1,2,3).associateWith{ it.toString }
println(map) // [1:"1", 2:"2", 3:"3"]
</code></pre>

<h3>when</h3>

<p>your when looks like</p>

<pre><code>when {
    param.type.classifier == List::class -&gt; 
    param.type.classifier == DateTime::class -&gt; 
    else -&gt;
}
</code></pre>

<p>this can be simplified to:</p>

<pre><code>when(param.type.classifier) {
    List::class -&gt; 
    DateTime::class -&gt; 
    else -&gt;
}
</code></pre>

<h3>run</h3>

<p>in your function, you use {...}(). run{} does exactly the same, but you can't forget to invoke it. This is however a personal choice.</p>

<h3>function bodies</h3>

<p>I personnaly don't like functions where the body starts with return:</p>

<pre><code>fun fromApi(apiModel: API): DOMAIN {
    return apiToDomain(apiModel, clazz)
}
</code></pre>

<p>you can rewrite this as:</p>

<pre><code>fun fromApi(apiModel: API): DOMAIN = apiToDomain(apiModel, clazz)
</code></pre>

<p>or even like:</p>

<pre><code>fun fromApi(apiModel: API) = apiToDomain(apiModel, clazz)
</code></pre>

<h2>typealias</h2>

<p>I dont know exactly the purpose of </p>

<pre><code>abstract class Adapter&lt;A, B&gt; : (B) -&gt; A
</code></pre>

<p>but maybe you can use a <a href="https://kotlinlang.org/docs/reference/type-aliases.html" rel="nofollow noreferrer">typealias</a>?</p>

<pre><code>typealias Adapter&lt;A, B&gt; = (B) -&gt; A
</code></pre>

<p><strong>constructing</strong></p>

<p>I thing you forgot a keyword in front of your constructor? As you wrote it out and you have a companion-object that creates a type of your class...
Ps. If you want to construct in your companion-object, but it should look like a constructor-call, you can use <code>operator fun invoke(...)</code></p>

<p>Hope this helps a bit</p>
    </div>