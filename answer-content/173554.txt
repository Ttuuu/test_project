<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Personally, I think the flag is not the best idea, or at least not, in the scenario you have added it, as it looks like a global variable.</p>

<p>The scenario you have set up now, poses a few problems as you present it, nl:</p>

<pre><code>setTimeout(() =&gt; {
  if (!responseReturned) {
     timedOut = true;
     spanSubmitErr.style.display = "inline";
  }
}, 8000);
</code></pre>

<p>This doesn't interact with the request at all, at most, the user will see something on his screen, however the response will still be running, and your code may eventually react on it, so you are pretty much unsure if it really worked. </p>

<p>But don't forget that any callback you create should be canceled in the end (through <code>setTimeout</code> (see PatrickRoberts comment below) or <code>setInterval</code>), so that there is no need for you to check if a response returned ;). I personally still prefer the <code>setInterval</code> and <code>clearInterval</code> methods to do that.</p>

<p><strong>Suggested rewrite ES5</strong></p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function fetch() {
  return new Promise( function (resolve) {
    var timeout = (Math.random() * 10 + 1) * 1000;
    console.log('Waiting ' + timeout + ' ms');
    setTimeout( function() {
      resolve();
    }, timeout);
  });
}

function _fetch( options ) {
  if (!options) {
    options = {
      timeout: 5000
    };
  }
  return new Promise( function(resolve, reject) {
    var interval = setInterval( function() {
      clearInterval( interval );
      reject( { statusCode: 504, status: 'timeout - client' } );
    }, options.timeout || 5000 );
    fetch().then( function( response ) {
      clearInterval( interval );
      resolve( response );
    } ).catch( function( error ) {
      clearInterval( interval );
      reject( error );
    } );
  });
}

function test() {
  var internal = function q() {
    _fetch().then( function() { 
      setTimeout( function() { 
        q(); 
      }, 0 ); 
    }).catch( function( result ) {
      console.log( result );
    });
  };
  internal();
}

test();</code></pre>
</div>
</div>


<p><strong>Suggested rewrite ES6</strong></p>

<p>If your code base is not to large, or if you are willing to put the time in for refactoring, I would suggest you wrap fetch with your own function, like in the following code sample.</p>

<p>You know that <code>fetch</code> will return a <code>Promise</code>, so create your own version of <code>fetch</code>, which you could then export if necessary, and redirect your files that point to the <code>fetch</code> functionality to your own implementation.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// random method that waits certain time, then resolves
const fetch = () =&gt; {
  let timeout = (Math.random() * 10 + 1) * 1000;
  console.log(`waiting ${timeout}`);
  return new Promise((resolve) =&gt; {
    setTimeout( () =&gt; resolve(), timeout);  
  });
}

const _fetch = ( opt = { timeout: 5000 } ) =&gt; {
  return new Promise( (resolve, reject) =&gt; {
    console.time('interval');
    let interval = setInterval(() =&gt; {
      console.timeEnd('interval');
      clearInterval( interval );
      reject({ message: 'timeout occured', statusCode: 504, status: 'timeout - client' });
    }, opt.timeout );
    fetch().then( (...args) =&gt; {
      console.timeEnd('interval');
      clearInterval( interval );
      resolve(...args);
    }).catch( (...args) =&gt; {
      console.timeEnd('interval');
      clearInterval( interval );
      reject(...args);
    });
  } );
}

async function runRandomTest() {
  let ok = 1;
  while (ok) {
    await _fetch().catch( (...args) =&gt; {
      console.log(...args);
      ok = false;
      });
  }
  console.log('test completed');
}

runRandomTest();</code></pre>
</div>
</div>


<p><strong>Explanation of rewrite</strong></p>

<p>The biggest change would be here, that the <code>fetch</code> function gets wrapped, and called from <code>_fetch</code>, which you would then use inside your code</p>

<p>If you look at it, it works slightly different, nl:</p>

<pre><code>function _fetch( options ) {
  if (!options) {
    options = {
      timeout: 5000
    };
  }
  return new Promise( function(resolve, reject) {
    var interval = setInterval( function() {
      clearInterval( interval );
      reject( { statusCode: 504, status: 'timeout - client' } );
    }, options.timeout || 5000 );
    fetch().then( function( response ) {
      clearInterval( interval );
      resolve( response );
    } ).catch( function( error ) {
      clearInterval( interval );
      reject( error );
    } );
  });
}
</code></pre>

<p>It returns it's own promise, and uses the <code>setInterval</code>. In case the result is returned (or another error is thrown), the <code>clearInterval</code> is called and the promise gets handled by either resolve or reject. In case the interval occurs, the promise gets rejected, and the <code>clearInterval</code> is also called.</p>

<p>Note that if you run the test (at least the es6 one), you can see the time it took before the timeout occured, and it will not run longer. Neither does the then method of the fetch still execute. It is true however that your httprequest will still be open, but I don't think that should be such a huge problem, as it will not interact with your own code anymore.</p>

<p>It is still important though to handle the catch of the fetch and pipe it through, so that the interval gets cleared, but that you also get notified of the other errors that might have occured during the request.</p>
    </div>