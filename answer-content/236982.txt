<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note, I don't think about performance, only about kotlin.</p>
<h1>Iluminate branch</h1>
<p>in your when, you check if the <code>rightIndex &gt;= string.length+1</code>.<br>
this means in the next branches the size is maximal <code>string.length</code>.
Substring is exclusive, so it allows str.length.<br>
this means the second and third branches are identical.</p>
<h1>Use Set</h1>
<p>It would make more sense to me to use <code>toSet</code> instead of <code>toList.distinct</code>, because sets are meant to hold distinct versions.</p>
<h1>personal Choices:</h1>
<h3>Single-expression function</h3>
<p>A <a href="https://kotlinlang.org/docs/reference/functions.html#single-expression-functions" rel="nofollow noreferrer">single-expression-function</a> is a function with one expression ðŸ™„.<br>
In kotlin, you can write this in an easier way.<br>
Instead of writing</p>
<pre><code>fun lengthOfLongestSubstring(str: String): Int {
    return when {
        ...
    }
}
</code></pre>
<p>you can write</p>
<pre><code>fun lengthOfLongestSubstring2(str: String): Int = when {
    ...
}
</code></pre>
<p>or even without return-type:</p>
<pre><code>fun lengthOfLongestSubstring2(str: String) = when {
    ...
}
</code></pre>
<p>I personally like to write these like:</p>
<pre><code>fun helper(
    str: String,
    leftIndex : Int,
    rightIndex : Int,
    max: Int
) = when {
    ...
}
</code></pre>
<h3>function with receiver</h3>
<p>If I'm right functional means:</p>
<ul>
<li>The function knows about the type and the type doesn't know about the function</li>
<li>If a function receives the same input, it should return the same output</li>
</ul>
<p>(or only the later)</p>
<p>The first way is often expressed by having a function that only takes parameters, but is not called on an object: <code>b(a)</code> instead of <code>a.b()</code></p>
<p>Kotlin allows to let a function like <code>b(a)</code> look like <code>a.b()</code>, if you define it that way.   This is called a <a href="https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver" rel="nofollow noreferrer">function with receiver</a>.<br>
Note, inside de function-body, you refer to the receiver using <code>this</code>.</p>
<pre><code>isDistinct("hi")
private fun isDistinct(
    substring: String
): Boolean = substring.toSet().size == substring.length
</code></pre>
<p>can be rewritten to</p>
<pre><code>"hi".isDistinct()
private fun String.isDistinct() : Boolean = this.toSet().size == this.length
</code></pre>
<p>And as you don't have to call <code>this</code> inside a scope:</p>
<pre><code>"hi".isDistinct()
private fun String.isDistinct() : Boolean = toSet().size == length
</code></pre>
<p>Or just:</p>
<pre><code>"hi".isDistinct()
private fun String.isDistinct() = toSet().size == length
</code></pre>
<p>Under the scenes it's still the same function.
Inside kotlin, you can't call it the old way anymore</p>
<h1>New code</h1>
<pre><code>class Solution {
    fun lengthOfLongestSubstring(
        str: String
    ) = when {
        str.length == 1 -&gt; 1
        str.isEmpty() -&gt; 0
        else -&gt; helper(str, 0, 1, 0)
    }

    private tailrec fun helper(
        str: String,
        leftIndex: Int,
        rightIndex: Int,
        max: Int
    ): Int = when {
        rightIndex &gt;= str.length + 1 -&gt; max
        str.substring(leftIndex, rightIndex).isDistinct() -&gt;
            helper(str, leftIndex, rightIndex + 1, max(rightIndex - leftIndex, max))
        else -&gt; helper(str, leftIndex + 1, leftIndex + max + 1, max)
    }

    private fun String.isDistinct() = toSet().size == length
}
</code></pre>
    </div>