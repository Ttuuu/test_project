<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In C# 6 or later you can write it in a single line of code using the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-conditional-operators" rel="nofollow noreferrer">null conditional operator (<code>?.</code>)</a> and the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-conditional-operator" rel="nofollow noreferrer">null coalescing operator (<code>??</code>)</a>:</p>

<pre><code>ver errorMessage =  exception.InnerException?.Message ?? 
                    exception.Message ?? 
                    exception.ToString();
</code></pre>

<p>Note that it will not handle empty strings (if the <code>Message</code> property contains an empty string it will be returned), but then again, I've never heard of exceptions with empty strings as their message...</p>

<p>If you fear that situation, you can always create an extension method for strings that will return <code>null</code> for empty strings:</p>

<pre><code>public static string NullIfEmpty(this string str)
{
    return string.IsNullOrEmpty(str) ? null : str;
}
</code></pre>

<p>and then use it like this:</p>

<pre><code>ver errorMessage =  exception.InnerException?.Message?.NullIfEmpty() ?? 
                    exception.Message?.NullIfEmpty() ?? 
                    exception.ToString();
</code></pre>
    </div>