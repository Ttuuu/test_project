<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General Feedback</h1>
<p>There is a lot of work going on in the <code>FetchDocumentsAndBuildList</code> Method. Consider breaking it up into smaller methods that make the main method easier to read and isolate units of work. One example would be to move the entire contents of the <code>foreach</code> into a method that could be named <code>FetchDocumentAsync</code>.</p>
<p>In general, async method names should end with Async. This means that <code>DataFetcher</code> would be named <code>DataFetcherAsync</code>. <a href="https://stackoverflow.com/a/24627122/7412948">See this answer for more information.</a></p>
<h1>Performance Feedback</h1>
<p>If performance is a real concern then you should consider profiling the application to see where the bottlenecks are. Even with a low volume of documents you should be able to get a general grasp of where the code is taking the longest. It is possible that performance issues only arise from a high document count in which case it would be best to profile in a similar scenario.</p>
<h3>Some potential improvements</h3>
<ol>
<li>The two <code>HttpWebRequest</code>s per <code>Document</code> are being run serially (that is, one must finish before the next one beings). Consider calling both DataFetcher calls and then later awaiting the results. This will cause both Http Requests to be sent and then later when the value is needed it will wait for a response. Theoretically doubling the speed. <a href="https://softwareengineering.stackexchange.com/a/376392/317394">See this answer for a more detailed explanation.</a></li>
</ol>
<pre><code>var detailedDataResponseTask = DataFetcher(XXXYYYUrl, HttpFetchMethod);
var inventoryDataTask = DataFetcher(XXXApiUrl, HttpFetchMethod);

var detailedDataResponse = await detailedDataResponseTask
if(detailedDataResponse != null)

...

singleDocument.SetPropertyValue("InventoryData", await inventoryDataTask);
</code></pre>
<ol start="2">
<li>A very small performance improvement could be done by taking <code>productList</code> code and removing the projection being done to get the index of an item.</li>
</ol>
<pre><code>// Original
var selectedIndex = productList["articlesList"]
    .Select((x, index) =&gt; new { code = x.Value&lt;string&gt;("code"), Node = x, Index = index })
    .Single(x =&gt; x.code == strArtNo)
    .Index;
detailedDataResponse = (JObject)productList["articlesList"][selectedIndex];

// New
detailedDataResponse = productList["articlesList"].Single(x =&gt; x.Value&lt;string&gt;("code") == strArtNo);
</code></pre>
<ol start="3">
<li>The final suggestion I have for performance, which probably needs some more careful planning to not have 80,000 tasks in progress, is to do the same optimization as before with <code>await</code>ing the <code>HttpWebRequest</code>s. Each document can be gathered and processed independently of each other document. A naive example of how to do this would be:</li>
</ol>
<pre><code>var tasks = new List&lt;Task&lt;string&gt;&gt;();
foreach(var singleDocument in await query.ExecuteNextAsync&lt;Document&gt;())
    tasks.Add(FetchDocumentAsync(singleDocument));

while(tasks.Count &gt; 0)
{
    Task&lt;string&gt; finishedTask = await Task.WhenAny(tasks);
    tasks.Remove(finishedTask);
    formattedList.Add(await finishedTask);
}
</code></pre>
    </div>