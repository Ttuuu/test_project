<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The algorithm is sound, and it's O(N). There are only two things I see you can improve.</p>

<h1>Make use of the standard library</h1>

<p>The C++ library comes with a lot of functions, including ones that can take care of summing elements of a vector for you. So to find the number of ones in the input vector, you can just write:</p>

<pre><code>#include &lt;algorithm&gt;
...
int window = std::accumulate(std::begin(data), std::end(data), 0);
</code></pre>

<h1>You don't need <code>onesTillNow</code></h1>

<p>When moving your window over the input array, you don't need to store all the number of ones for every window position. You just want to know the maximum number of ones in a window. If you just have a single variable <code>int onesInWindow</code>, and initialize it with the sum of ones in the first window:</p>

<pre><code>int onesInWindow = std::accumulate(std::begin(data), std::begin(data) + window, 0);
int maxOnes = onesInWindow;
</code></pre>

<p>Then you can iterate over all the other window positions like this:</p>

<pre><code>for(int i = window; i &lt; size; i++) {
    onesInWindow -= data[i - window];
    onesInWindow += data[i];
    maxOnes = std::max(maxOnes, onesInWindow);  
}
</code></pre>
    </div>