<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It could be made more functional by avoiding the mutation of <code>acc</code>. The effects are contained within <code>judgeCircle</code> so it's not a big deal, but it feels like if you're going to mutate the accumulator, you might as well just use an imperative loop.</p>

<p>I also preferred to be explicit about the final check. I find the intent of <code>!h &amp;&amp; !v</code> isn't quite as clear as <code>h == 0 &amp;&amp; v == 0;</code>.</p>

<p>I ended up with:</p>

<pre><code>const judgeCircle3 = moves =&gt; {
  const [hori, vert] = [...moves].reduce(([h, v], move) =&gt; {
    switch(move) {
      case "U":
        return [h, v + 1];

      case "D":
        return [h, v - 1];

      case "R":
        return [h + 1, v];

      case "L":
        return [h - 1, v];
    }

  }, [0, 0]);

  return hori == 0 &amp;&amp; vert == 0;
};
</code></pre>

<p>The need for the <code>switch</code> here is unfortunate, but the only other alternative I could think of was some mess where a you'd do a lookup on a map which returned a function that returned a "altered" accumulator state.</p>

<p>I also got rid of the <code>default</code> since it didn't seem to be doing anything. You could have done error handling in there (and should in most cases), but if it's a challenge with predefined input, that's probably not necessary unless it's part of the challenge.</p>
    </div>