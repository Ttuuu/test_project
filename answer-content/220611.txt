<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have much to add to Henrik's answer at a low level, but I think you've missed the point of the exercise at a high level.</p>

<p>The spec could be implemented as simply as</p>

<pre><code>public class MapSum
{
    private readonly IDictionary&lt;string, int&gt; data = new Dictionary&lt;string, int&gt;();

    public void Insert(string key, int val) =&gt; data[key] = val;

    public int Sum(string prefix) =&gt; data.Sum(kvp =&gt; kvp.Key.StartsWith(prefix) ? kvp.Value : 0);
}
</code></pre>

<p>The reason you instead used a trie was to avoid looping over all of the entries in <code>Sum</code>. But in the worst case <code>DFS</code> will do <em>exactly that</em>. The efficient solution is to add a field to <code>TrieMSNode</code> which caches the sum of the entire subtree rooted at that node. Updating it doesn't affect the asymptotic cost of <code>Insert</code>, just the constant. And returning it allows you to ditch <code>DFS</code> entirely, so that <code>Sum</code> is guaranteed to run in time linear in the length of the prefix.</p>
    </div>