<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Private versus public</h1>

<pre><code>    public int frame = 0;           // The current frame
    public int frameScore = 0;      // The total of first two throws in a normal frame
    public int[] throws;            // Input
    public int throw1;              // First throw in a frame
    public int throw2;              // Second throw in a frame
    public int throw3;              // Third throw in the 10th frame

    public List&lt;int&gt; tenFrameScores = new List&lt;int&gt;();
    public int[][] tenFrames = new int[10][]; // a JaggedArray (to allow for three numbers in the 10th frame)
</code></pre>

<p>All these fields should be <code>private</code>. Since your class implements the interface <code>ISimpleBowlingGame</code>, the idea is that most, if not all, interaction with this class should be based on that interface. By making these fields <code>public</code>, you're allowing the user to mess with the internal state of the class, which might mess up all logic you have.</p>

<p>The same goes for <code>Score.Set</code>, this should be <code>private</code>; the score is determined by the frames given through <code>RecordFrame()</code>, adjusting the score manually makes no sense.</p>

<p>When to use <code>public/private/internal</code> is a pretty basic part of understanding languages like C#, so be sure to review this some more.</p>

<hr>

<h1>Class fields versus method variables</h1>

<pre><code>    public int throw1;              // First throw in a frame
    public int throw2;              // Second throw in a frame
    public int throw3;              // Third throw in the 10th frame
</code></pre>

<p>These are only ever used within <code>RecordFrame</code>, so make them local variables within that method.</p>

<hr>

<h1><code>Console.WriteLine</code></h1>

<p>The spec specifically said that you didn't have to provide a user interface. So all of the printing to console was a wasted effort. Especially with all the different colours and such.</p>

<p>Not even was it unnecessary, but it's not the most flexible implementation either. What if instead of writing the output to console we wanted to write it to a file? Remember that the primary concern of the class is to calculate a bowling score. You don't know how it is going to be used yet, or where. So it's best to not make assumptions to that.</p>

<p>If you want to provide a way to turn the state of the class into a string, so that the user could <strong>choose</strong> to print it to commandline, provide an implementation of <code>ToString()</code>, which you can override:</p>

<pre><code>public override string ToString() {
  // implementation;
}
</code></pre>

<hr>

<h1>Scoring</h1>

<p>Your scoring code is a bit of a mess. Let's quickly go over the rules:</p>

<ol>
<li>A throw is worth at least the number of pins thrown.</li>
<li>If a strike is thrown (10 pins in the first throw of a frame), the next two throws are added to the score of the strike.</li>
<li>If a spare is thrown (10 pins in the frame, not a strike), the next throw is added to the score of the spare.</li>
<li>If the tenth frame ends in a strike or spare, 2 or 1 throws are added respectively to add the bonus score, these don't count on their own.</li>
</ol>

<p>Given that the complexity of the challenge is in the scoring mechanism, this should be leading for how you store the throws. I don't think that separating the throws in frames in <code>tenFrames</code> is the best approach.</p>

<p>Why? Because to score spares and strikes, you need to be able to look ahead to the next throws to determine the score. This is easiest if the next throws are adjacent in an array, instead of in a jagged array. Remember that if you throw 2 strikes in a row, you need to look two frames ahead to determine the score of the first strike!</p>

<p>So let's assume all throws are in an <code>int[]</code>, the first frame could then be scored as such:</p>

<pre><code>if(throws[0] == 10) {
  // strike
  score += 10 + throws[1] + throws[2];
} else if (throws[0] + throws[1] == 10) {
  // spare
  score += 10 + throws[2];
} else {
  // normal throw
  score += throws[0] + throws[1];
}
</code></pre>

<p>That's pretty neat isn't it? Let's loop over all frames:</p>

<pre><code>public int ScoreFrames(int[] throws)
{
  var frame = 1;
  var score = 0;
  var frameStart = 0;
  while (frame &lt;= 10)
  {
    if (throws[frameStart] == 10)
    {
      // strike
      score += 10 + throws[frameStart + 1] + throws[frameStart + 2];
      frameStart += 1;
    }
    else if (throws[frameStart] + throws[frameStart + 1] == 10)
    {
      // spare
      score += 10 + throws[frameStart + 2];
      frameStart += 2;
    }
    else
    {
      // normal throw
      score += throws[frameStart] + throws[frameStart + 1];
      frameStart += 2;
    }
    frame++;
  }
  return score;
}
</code></pre>

<p>You can keep track of where the next frame starts in <code>frameStart</code>: a strike is only one throw in a frame, the rest is two.</p>

<p>The rest is simple:</p>

<pre><code>  public class SimpleBowlingGame : ISimpleBowlingGame {
    private readonly List&lt;int&gt; throws = new List&lt;int&gt;(21); // 21 is the maximum amount of throws.
    private int numberOfFrames = 0;

    public int Score { get; private set; }

    public void RecordFrame(params int[] throws) {
      // Optional input validation.

      this.throws.AddRange(throws);
      numberOfFrames++;

      if(numberOfFrames == 10) {
        SetScore();
      }
    }

    private void SetScore() {
      var frame = 1;
      var score = 0;
      var frameStart = 0;
      while (frame &lt;= 10) {
        if (throws[frameStart] == 10) {
          // strike
          score += 10 + throws[frameStart + 1] + throws[frameStart + 2];
          frameStart += 1;
        }
        else if (throws[frameStart] + throws[frameStart + 1] == 10) {
          // spare
          score += 10 + throws[frameStart + 2];
          frameStart += 2;
        }
        else {
          // normal throw
          score += throws[frameStart] + throws[frameStart + 1];
          frameStart += 2;
        }
        frame++;
      }
      Score = score;
    }
  }
</code></pre>

<hr>

<h1>Bonus points: input validation</h1>

<p>Spec says it's not necessary, but it never hurts to verify that the throws you get as input are actually legal. In the <code>SetScore</code> method, we rely heavily on the inputs as we expect them to be, so it doesn't hurt to validate:</p>

<ol>
<li>All numbers in <code>throws</code> are between 0 and 10</li>
<li>If the first number is lower than 10, the second can at most be <code>10 - throws[0]</code></li>
<li><code>throws.Length</code> is 1 or 2, unless it's the tenth frame, then it can only be 3 if it's a spare or strike, else it's 2.</li>
<li>After the tenth frame, no more input is taken.</li>
</ol>

<hr>

<h1>Bonus points: Disallow <code>Score</code> from being called before the tenth frame is provided.</h1>

<pre><code>private int score;
public int Score {
  get {
    if (numberOfFrames != 10) {
      throw new InvalidOperationException("Can't provide score before 10 frames are recorded");
    }
    return score;
  }
  private set {
    score = value;
  }
}
</code></pre>
    </div>