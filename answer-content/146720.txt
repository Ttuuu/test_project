<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have worked out the typings and expressions required to extract the common logic that was being duplicated in numerous places. Lines like this:</p>

<pre><code>return query.Where(x =&gt; x.Clients.Any(y =&gt; y.Account.Notes.Contains(filter.Notes);
</code></pre>

<p>...can be expressed generically (well, this particular case requires that hardcoded 'string' typing, not sure if there's a way around that) as this:</p>

<pre><code>internal static IQueryable&lt;TContainerModel&gt; FilterByAnyContaining&lt;TContainerModel, TCollectionModel&gt;(this IQueryable&lt;TContainerModel&gt; query, string value, Expression&lt;Func&lt;TContainerModel, ICollection&lt;TCollectionModel&gt;&gt;&gt; collection, Expression&lt;Func&lt;TCollectionModel, string&gt;&gt; property)
{
    return query.Where(x =&gt; value == null || collection.Compile().Invoke(x).Any(y =&gt; property.Compile().Invoke(y).Contains(value)));
}
</code></pre>

<p>With that worked out finally, I think the only other thing I need is a somewhat similar method that works with a collection of items and a single value to find: </p>

<pre><code>internal static IQueryable&lt;TContainerModel&gt; FilterByAnyContaining&lt;TContainerModel, TPropertyType&gt;(this IQueryable&lt;TContainerModel&gt; query, ICollection&lt;TPropertyType&gt; collection, Expression&lt;Func&lt;TContainerModel, TPropertyType&gt;&gt; property)
{
    return query.Where(x =&gt; !collection.Any() || !collection.Contains(property.Compile().Invoke(x)));
}
</code></pre>

<p>Which allows me to convert lines like this:</p>

<pre><code>query = query.Where(x =&gt; !filter.ItemGuids.Any() || filter.ItemGuids.Contains(x.Id));
</code></pre>

<p>To this:</p>

<pre><code>query = query.FilterByAnyContaining(filter.ItemGuids, x =&gt; x.Id);
</code></pre>

<p>Everything else I see currently I think I can apply the Rule of Three to and just leave it be a single use case.</p>

<p>This is certainly a case where coming back to the problem a day later helped make wrapping my mind around the problem I faced easier.  Hopefully this helps somebody else!</p>
    </div>