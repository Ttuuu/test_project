<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Layers</h1>

<p>Perhaps the biggest problem with this project is a lack of clear layers of responsibility. You’ve got files and classes for organization, but it is highly coupled — which is not a good thing.</p>

<p>I would suggest reorganizing the code into layers:</p>

<ol>
<li>Presentation Layer: the UI.  Presenting information to the user, and asking the user for information</li>
<li>Business Logic.  Checking if the correct pin/authorization code has been provided, verifying withdrawals don’t cause balances to go negative, ensuring deposits and withdrawals aren’t negative, etc.</li>
<li>Data Model.  Your <code>BankAccount</code>, and <code>CreditCard</code> goes here.  They just store information.  But these are “dumb” classes; little or no logic here.</li>
<li>Data Access Layer: This is your connection to the database.  You read/write <code>BankAccount</code> and <code>CreditCard</code> information here.</li>
</ol>

<p>Why?</p>

<p>Presently, 6 of your 7 files import <code>sqlite3</code>.  If you need to change your database to “MySQL” or “DB2”, you will need to touch almost all of your code.  That is difficult and error prone.  If the <code>sqlite3</code> was contained in just one file, and that was the only thing in that file, you could easily switch out the database by switching out that one file.</p>

<p>Almost every file prints something too.  What if you need to change your UI from console input/output to some kind of GUI, say based on <code>tkinter</code>.  Again, you have to change almost every file.  If the UI was separate from the business logic, data model and data access layer, it would be easy to do.  As it presently stands, the entire application would change.</p>

<p>Ideally, each layer would be in a different package, but that might be overkill.  Simply, “these 3 files are the business logic, these 4 files are for the UI, these 3 are the data model, and this file is the data access layer” would go wonders for decoupling the application, and allowing an easier time adapting, upgrading it, or simply maintaining it.</p>

<h1>Doc Strings</h1>

<p>You’ve tried to add <code>"""doc-strings"""</code> to your code.  I applaud the effort.  But unfortunately you are doing it wrong.</p>

<p>Docstrings are simply strings that appear as the first statement of a function, class, and/or module.  While they can be triple-quoted or single-quoted strings, and they can use single or double quotes, what matters is they are the first statement.</p>

<p>In a Python shell, type:</p>

<pre><code>&gt;&gt;&gt; def myfunc(a, b, c):
...     """A cryptic function name for a function that returns
...     the geometric mean of 3 numbers."""
...     return (a * b * c) ** (1 / 3)
...
</code></pre>

<p>Then, ask for “help” on the function you just created:</p>

<pre><code>&gt;&gt;&gt; help(myfunc)
</code></pre>

<p>The <code>help</code> command looks for a doc-string attached to the function, if any, and displays that information.  Try <code>help(abs)</code> or <code>help(map)</code> or <code>help(str.endswith)</code>.  Useful information?  Any guesses how it got there?</p>

<p>You have 3 triple-quoted strings before <code>set_notifications</code>.  The benefit of triple-quoted strings are they can contain new-lines.  Moving the lines into the <code>set_notifications</code> function will result in just the first line becoming the doc-string.  You need to start the string with a triple-quote and end it three lines later with a triple-quote in order for the entire 3 lines of text to become the doc-string.</p>

<hr>

<p>What is the point of <code>print("""""""ATM Menu, choose an option""""""")</code>?  The first <code>"""</code> is ended by the next <code>"""</code>, creating an empty string, then you have <code>"ATM Menu, choose an option"</code>, followed by <code>"""</code> and <code>"""</code> which again creates another empty string.  These 3 string are concatenated together giving you simply <code>"ATM Menu, choose an option"</code>.     </p>
    </div>