<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't say, I have the full understanding of computation expressions, so here are some comments that may go in another direction than your purpose with the post:</p>
<blockquote>
<p><code>sq |&gt; Seq.skip 1</code></p>
</blockquote>
<p>can be replaced with</p>
<pre><code>sq |&gt; Seq.tail
</code></pre>
<hr>
<p>I'm not sure, I like that the function returns <code>[ Error null ]</code> for an empty sequence, but that again may be needed in the context? I would expect an empty sequence to return - an empty sequence.</p>
<hr>
<p>I don't understand the <code>Projection</code> layer, but that may be dictated by the original context.</p>
<p>You could define the type at the function level:</p>
<pre><code>type MaybeFunction&lt;'a, 'b, 'c&gt; = 
    | OptionFunction of ('a -&gt; 'b option)
    | ResultFunction of ('a -&gt; Result&lt;'b, 'c&gt;)
</code></pre>
<p>and then create the functions as:</p>
<pre><code>let mbopFunction = OptionFunction (fun x -&gt; if x &lt; 5 then Some x else None)
let mbrsFunction = ResultFunction (fun x -&gt; if x &lt; 5 then Ok x else Error "if &gt;= 5")
</code></pre>
<p>Your main function will then looks like:</p>
<pre><code>let mapTillFail mapper s = 
    let rec inner sq =
        seq {
            let mapped = orb {
                let! head = Seq.tryHead sq
                match mapper with
                | OptionFunction a -&gt; 
                  let! m = a head
                  return m
                | ResultFunction a -&gt; 
                    let! m = a head
                    return m
                }                    
                                
            match mapped with
                | Error _ as err-&gt; yield err
                | Ok _ -&gt; 
                    yield mapped
                    yield! sq |&gt; Seq.tail |&gt; inner
        }
    inner s
</code></pre>
<p>which tells that your monad can handle that level without modifications.</p>
<p>Maybe it would be fair to call these function <code>Projections</code> as well as that is what they do?</p>
<hr>
<p>That said, you can go without the computation expression:</p>
<pre><code>let mapTillFail projection data = 

    let test x =
        let result = 
            match projection with
            | OptionProjection a -&gt; 
                match a x with
                | Some d -&gt; Ok d
                | None -&gt; Error Unchecked.defaultof&lt;'c&gt;
            | ResultProjection a -&gt; a x
        result

    let rec inner lst =
        seq {
            match lst |&gt; Seq.isEmpty with
            | true -&gt; yield Error Unchecked.defaultof&lt;'c&gt;
            | _ -&gt;
                match test (lst |&gt; Seq.head) with
                | Error e -&gt; yield Error e
                | Ok o -&gt;
                    yield Ok o
                    yield! inner (lst |&gt; Seq.tail)
        }

    inner data
</code></pre>
<hr>
<p>Another alternative is to extent the <code>MaybeProjection</code> or <code>MaybeFunction</code> with a member called calculate:</p>
<pre><code>type MaybeFunction&lt;'a, 'b, 'c&gt; = 
    | OptionFunction of ('a -&gt; 'b option)
    | ResultFunction of ('a -&gt; Result&lt;'b, 'c&gt;)
with
member this.Calculate (a) =
    match this with
    | OptionFunction f -&gt; 
        match f a with
        | Some d -&gt; Ok d
        | None -&gt; Error Unchecked.defaultof&lt;'c&gt;
    | ResultFunction f -&gt; f a
</code></pre>
<p>used as:</p>
<pre><code>module Seq = 
    let mapTillFail (func: MaybeFunction&lt;'a, 'b, 'c&gt;) data =       
        
        let rec inner lst =
            seq {
                match lst |&gt; Seq.isEmpty with
                | true -&gt; ()
                | _ -&gt;
                    match func.Calculate (lst |&gt; Seq.head) with
                    | Error e -&gt; yield Error e
                    | Ok o -&gt;
                        yield Ok o
                        yield! inner (lst |&gt; Seq.tail)
            }

        inner data
</code></pre>
<p>Here I've made an extension to <code>Seq</code> so you can call it like any other <code>Seq</code> functions:</p>
<pre><code>printfn "%A" ((r |&gt; Seq.mapTillFail mbopFunction) |&gt; Seq.toList)
printfn "%A" ((s |&gt; Seq.mapTillFail mbopFunction) |&gt; Seq.toList)
printfn "%A" ((r |&gt; Seq.mapTillFail mbrsFunction) |&gt; Seq.toList)
printfn "%A" ((s |&gt; Seq.mapTillFail mbrsFunction) |&gt; Seq.toList)
</code></pre>
    </div>