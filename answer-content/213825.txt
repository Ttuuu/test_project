<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use more abstract data types</h3>

<p>In the current implementation two behaviors are mixed together:</p>

<ul>
<li>Caching</li>
<li>Linked list manipulation</li>
</ul>

<p>It would be better if the linked list manipulation was encapsulated in a dedicated abstract data type. Then <code>LRUCache</code> could use an instance of it, and perform operations that have nice descriptive names like <code>append_node</code>, <code>delete_node</code>, instead of blocks of nameless code. It will reveal more clearly the implemented logic of both the caching and linked list behaviors, and be more intuitively readable.</p>

<h3>Avoid unclear side effects</h3>

<p>At first glance I found this piece surprising in <code>put</code>:</p>

<blockquote>
<pre><code>if self.get(key) != -1:
    # Already have
    self.cache[key].val = value
    return
</code></pre>
</blockquote>

<p>Why <code>self.get(key) != -1</code> instead of <code>key not in self.cache</code>?
The <code>self.get</code> is of course necessary,
for its side effect of moving the node to the end.
This may be subjective,
but I would prefer to have an explicit private method that moves the node,
and call it from both <code>get</code> and <code>put</code>.
That will make the intention perfectly clear.
Another reason I prefer that is to eliminate using the magic value <code>-1</code> more than necessary.</p>
    </div>