<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    def __init__(self, n):
        self.n = n + 1
        self.bit = [0] * self.n
</code></pre>
</blockquote>

<p><code>bit</code> has a well-known interpretation in programming which distracts from the intended interpretation here. IMO even something as generic as <code>data</code> would be better.</p>

<hr>

<blockquote>
<pre><code>    def update(self, i, k):
        """Adds k to element with index i
        """
        while  i &lt;= self.n - 1:
            self.bit[i] += k
            i = i + (i &amp; -i)
</code></pre>
</blockquote>

<p>The loop condition would be more familiar as <code>while i &lt; self.n</code>.</p>

<p>I don't see any reason to avoid <code>+=</code>.</p>

<p>A reference to explain the data structure would be helpful, because otherwise this is quite mysterious.</p>

<hr>

<blockquote>
<pre><code>        mid = left + ((right - left) &gt;&gt; 1)
</code></pre>
</blockquote>

<p>The reason for this particular formulation of the midpoint is to avoid overflow in languages with fixed-width integer types. Since that's not an issue in Python, I'd favour the more straightforward <code>mid = (left + right) &gt;&gt; 1</code>. It might even be a tiny bit faster.</p>

<hr>

<blockquote>
<pre><code>    q = [ int( i ) for i in raw_input().strip().split() ]
</code></pre>
</blockquote>



<blockquote>
<pre><code>    index = map(lambda t: binary_search(arr, t) + 1, q)
</code></pre>
</blockquote>

<p>Why the inconsistency? I think it would be more Pythonic to use comprehensions for both.</p>

<hr>

<blockquote>
<pre><code>    # Copy q and sort it.
    arr = sorted(deepcopy(q))

    # index array.
    index = map(lambda t: binary_search(arr, t) + 1, q)
</code></pre>
</blockquote>

<p>This seems like a rather heavyweight approach. Why not just</p>

<pre><code>    index = sorted((val, idx) for idx, val in enumerate(q))
</code></pre>

<p>?</p>

<hr>

<p>Although asymptotically I don't see any reason why this would be <span class="math-container">\$\omega(n \lg n)\$</span>, it has a few <span class="math-container">\$\Theta(n \lg n)\$</span> stages. The standard algorithm for this problem, which is essentially merge sort, has the same asymptotic complexity but probably hides a much smaller constant behind the <span class="math-container">\$\Theta\$</span> / <span class="math-container">\$O\$</span>.</p>
    </div>