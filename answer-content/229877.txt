<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>Python comes with an "official" <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> (aka PEP 8) which is a widely accepted standard for naming conventions and the like. Since you say your professor is keen on using best practices, I'd recommend to have a look at those guidelines. There is also a variety of tools that can help you to check for those best practices automatically. A non-exhaustive list (including <a href="https://www.pylint.org/" rel="nofollow noreferrer">Pylint</a>) can be found in <a href="https://codereview.meta.stackexchange.com/a/5252/92478">this meta-post</a> here on Code Review.</p>

<p>From what I have seen, your code looks quite good in that regard. I especially like your docstrings. The most prevalent issue in your code would be that <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">there are usually two blank lines between different function definitions</a> in order to make their separation more clear.</p>

<h1>Code</h1>

<h2>Idiomatic Python</h2>

<p>As <a href="https://codereview.stackexchange.com/users/138084">@nz_21</a> already <a href="https://codereview.stackexchange.com/a/229874/92478">mentioned</a>, <code>if sth == True:</code> and also <code>if sth == False:</code> can be expressed in a more idiomatic way as <code>if sth:</code> and <code>if not sth:</code> (Note: Pylint would also catch this particular "mistake".)</p>

<h2>Redefining built-ins</h2>

<p>Some of the variable names you have chosen (<code>min</code>, <code>max</code>, <code>list</code>) redefine <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in functions</a> from the Python core. You should avoid that. The simplest way is to append a single trailing underscore, e.g. <code>list_</code>, in order to avoid that issue. Also the parameter <code>list</code> seems to be unused in <code>draw(...)</code>.</p>

<h2>Random number generation</h2>

<p><strike><code>card[letter] = random.sample(range(min_, max_), 5)</code> could also be rewritten as <code>card[letter] = [random.randrange(min_, max_) for _ in range(5)]</code>. Although I don't think that it will make a big difference in your case. The <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer">documentation</a> explicitly list them as alternatives:</strike></p>

<blockquote>
  <p><code>random.randrange(start, stop[, step])</code></p>
  
  <p>Return a randomly selected element from range(start, stop, step). This
  is equivalent to choice(range(start, stop, step)), but doesnâ€™t
  actually build a range object.</p>
</blockquote>

<p>From that it seems that the later approach would make more sense for a large range of values to choose from.</p>

<p>Edit: removed after hint in the comments with regard to sampling with and without replacement. Thanks to <a href="https://codereview.stackexchange.com/users/196041/">@Wombatz</a>.</p>

<h2>Global variables</h2>

<p><code>random_draw_list</code> is used as a global variable, but unfortunately not as a constant as one might expect, but as a mutable global variable. That makes it <a href="https://stackoverflow.com/a/16011147/5682996">harder to reuse code</a>. Since <code>draw(...)</code> is the only function using this variable, it makes no sense to have it as a global variable. Instead, it should defined in <code>main()</code> after you have changed <code>draw(...)</code> to accept it as parameter (maybe that's what <code>list</code> was supposed to do in the first place?) and passed when calling <code>draw(...)</code> from <code>main()</code>.</p>

<h2>Top-level script environment</h2>

<p>In order to show what part of the file is actually supposed to be run as a script, Python defines the concept of a <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer"><em>top-level script environment</em></a>. Although the name sounds daunting at first, it's quite likely that you have seen it in someone else's Python code: <code>if __name__ == "__main__":</code> This tells the Python interpreter to only run that part of code if the file is used as a script. In your case all there is to do is to do add the above right before calling the <code>main</code>-function:</p>

<pre><code>if __name__ == "__main__":
    main()
</code></pre>

<p>That also helps you to avoid the issue that Python always starts a new bingo game whenever you try to <code>import</code> a function from your file ;-)</p>
    </div>