<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Those are some very thorough class definitions, with many getters and setters. For context: I have some music experience (e.g. 22 years playing clarinet and saxophone, 18 years playing acoustic guitar) but wouldn't consider myself an expert in theory. I've gotten used to transposing from C to Eflat and Bflat in my head. I haven't really learned about coils in the context of pitches.</p>

<p>Good stuff:</p>

<ul>
<li>Separation of code into classes with many getters and setters</li>
<li>using <code>const</code> for anything that doesn't get re-assigned</li>
<li>many methods allow chaining by returning <code>this</code></li>
</ul>

<p>I read over <a href="https://codereview.stackexchange.com/a/116330/120114">the answer to the linked question by Flambino</a> and it looks like you have improved indentation, added spacing and made many other improvements. However, I don't see a <code>return</code> at the end of the IIFE, so nothing is really exposed and thus any code to utilize your code would need to be added inside the IIFE. Perhaps that is fine for you.</p>

<p>Have you considered using a linter? It would help clean up a lot of things. I tried running your code through the linter on jslint.com - it advised things like using double quotes on string literals and <code>"use strict"</code>. Apparently it had an issue with the regex with named groups...</p>

<p>I would expect a linter (maybe I am thinking of eslint) would mention that some variables are only used once - e.g. in <code>Note::Name()</code> (the setter) many variables are only used once after assignment - e.g. <code>degree</code>, <code>octave</code>, etc. Also in <code>Coil::translate()</code> there is little point in declaring <code>d</code>. The whole method could be simplified to add either <code>n.Value</code> or <code>n</code> to <code>this.Value</code> without assigning either value to <code>d</code>. </p>

<p>To answer your question</p>

<blockquote>
  <p>Are my methods self-describing or are comments required?</p>
</blockquote>

<p>I would say they are mostly self-describing but it would be wise to include documentation - at least for the parameters. For instance, the interval constructor takes two arguments: <code>di, pi</code>. I can tell by the other method names that one is for the Degree interval and the other is for the Pitch interval but if I wasn't looking at that it would be difficult to know. </p>

<hr>

<p>In <code>getScale()</code> there is a call to <code>pitchClasSet.reduce()</code> that always pushes a <code>Note</code> clone into the array and returns the array. Use <code>Array.map()</code> instead of <code>Array.reduce()</code> when simply pushing elements into an array and returning the array.</p>

<blockquote>
<pre><code> return pitchClassSet.reduce(function (scale, scaleStep, i) {
      const note = keyNote.clone().transpose(new Interval(i, scaleStep));
      scale.push(note);
      return scale;
  }, []);
</code></pre>
</blockquote>

<p>can be simplified to:</p>

<pre><code>return pitchClassSet.map((scaleStep, i) =&gt; keyNote.clone().transpose(new Interval(i, scaleStep)))
</code></pre>

<hr>

<p>The ES-6 standard adds <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" rel="nofollow noreferrer">default parameter</a> values - so places like: </p>

<blockquote>
<pre><code>enharmonic(preference, force) {
    if (typeof force === "undefined") {
        force = false;
    }
    if (typeof preference === "undefined") {
        preference = 0;
    }
</code></pre>
</blockquote>

<p>Can be simplified to:</p>

<pre><code>enharmonic(preference = 0, force = false) {
</code></pre>
    </div>