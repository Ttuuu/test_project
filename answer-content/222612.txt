<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>print_slow</code>:</p>

<ul>
<li><p>I would pass in a time delay value, or at the very least have the delay value as a "constant" above. Using magic numbers isn't a good habit to get in to. I'd lean to either one of these:</p>

<pre><code>def print_slow(str, delay = 0.1):
    for letter in str:
        sys.stdout.write(letter)
        sys.stdout.flush()
        time.sleep(delay)

    print("\n")
</code></pre>

<p>or</p>

<pre><code>SLOW_PRINT_DELAY = 0.1

def print_slow(str):
    for letter in str:
        sys.stdout.write(letter)
        sys.stdout.flush()
        time.sleep(SLOW_PRINT_DELAY)

    print("\n")
</code></pre>

<p>The first has the benefit that you can alter how slowly it prints for different circumstances. This does away with the need for a separate nearly identical function <code>load_effect</code>. I'm having it to default to 0.1 just in case they don't want to specify the delay. You could even combine both of these options and have the constant, and use it as the default value that <code>print_slow</code> defaults to.</p></li>
<li><p>I'm not entirely sure why you're using <code>sys.stdout</code> directly. It doesn't seem to be for portability reasons since you use plain <code>print</code> right below that. If it's to avoid the newline being added at the end when using <code>print</code>, I'll just point out that you can use the <code>end</code> parameter of <code>print</code> to avoid that:</p>

<pre><code>print("Some text", end = "") # Will not print a newline after
</code></pre></li>
</ul>

<hr>

<p>At the top of <code>menu</code> you have a dispatch where you're using <code>lower</code> then checking the input against several characters. My issue with how you have it here is you're calling <code>lower</code> repeatedly (and repeating yourself is never a good thing), and then you repeat that whole thing below that in a verification loop! Wrap the repetitious code up in a function and call it as needed:</p>

<pre><code>def dispatch_action(action_key):
    std_action = action_key.lower() # Standardize it once

    if std_action == "p":
        intro()

    elif std_action == "q":
        sys.exit()

    elif std_action == "i":
        info_menu()

    elif std_action == "h":
        help_menu()
</code></pre>

<p>Then, you can return <code>False</code> if they entered a bad action, and <code>True</code> if it was a good action, and loop in <code>menu</code> until <code>dispatch_action</code> returns <code>True</code>.</p>

<p>Or, you could get a little fancy and neaten it up a bit by having a map of functions:</p>

<pre><code>MENU_ACTIONS = {"p": intro,
                "q": sys.exit,
                "i": info_menu,
                "h": help_menu}

def dispatch_action(action_key):
    std_action = action_key.lower() # Standardize it once

    f = MENU_ACTIONS.get(std_action, None) # Default to None if the command is bad

    if f:
        f() # Call the menu function returned by the lookup

    else:
        # Handle a bad command
</code></pre>

<p>I like dictionaries when you're just doing  simple matching against something like a String or number. It'll be potentially faster than an <code>if</code> tree (although that doesn't matter here), and I just personally like how they read. It makes it so you don't have to write (and read) <code>std_action ==</code> over and over again.</p>

<hr>

<p>There's a <em>lot</em> more to get into here, but I'm quite tired. Hopefully someone else can comment on the rest.</p>
    </div>