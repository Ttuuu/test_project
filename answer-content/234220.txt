<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When I run your code in Octave I see the following:</p>

<pre class="lang-matlab prettyprint-override"><code>&gt;&gt; a=Enum.test()
a =

&lt;object Enum&gt;
</code></pre>

<p>Simply overloading the <code>disp</code> operator will solve this issue:</p>

<pre class="lang-matlab prettyprint-override"><code>       function disp(this)
           disp(['Enum with value ',this.value])
        end
</code></pre>

<p>Now:</p>

<pre class="lang-matlab prettyprint-override"><code>&gt;&gt; a=Enum.test()
a =

Enum with value test
</code></pre>

<hr>

<p>You created a handle class to define your enumerator object. I don't see the benefit of using a handle class for this. Handle classes are meant as an interface to resources (a file, memory) that cannot (or should not) be copied. The handle class is always passed by reference, and the assignment operator causes the new variable to refer to the same object rather than making a copy.</p>

<p>This means that <code>a=Enum; function(a)</code> can modify <code>a</code>. Also, <code>b=a; b.Value='foo'</code> will change the value of <code>a</code>. This is highly uncommon and unexpected behavior in the MATLAB language. In general, MATLAB/Octave data is never a handle class, and I think an enumerator class should not be a handle class either.</p>

<hr>

<p>I'm not sure what problem <code>enumConstructor</code> is avoiding. I'm running Octave 5.1 and don't have any issues overloading the constructor. A static function is a good workaround. I'm not sure why it is marked private though, since this makes it impossible to create an object of the class (I'm assuming the method <code>test</code> is just for show, not actually meant as part of the class).</p>

<hr>

<p>Octave has a few additions to the MATLAB language that I feel are unfortunate. I always suggest to people not to use these additions. In particular, comments should start with <code>%</code>, not with <code>#</code>, and you should use <code>end</code> rather than <code>endfunction</code>, <code>endif</code>, etc. I don't feel that these additions improve the language sufficiently to break comparability between the two systems.</p>

<hr>

<p>When you define a function with a single output argument, the square brackets around the output are superfluous. Thus, instead of writing</p>

<pre class="lang-matlab prettyprint-override"><code>function [out] = getValue (this)
</code></pre>

<p>you can write</p>

<pre class="lang-matlab prettyprint-override"><code>function out = getValue (this)
</code></pre>

<hr>

<p>The use of a private property to hold data, and a public, dependent property to read and write from it, adds unnecessary complexity. It is possible to define accessor functions to protect public properties. For example, if the class only had a public <code>value</code> property, then the function <code>set.value(this, value)</code> can prevent the user from changing the value to an illegal value. A function <code>value = get.value(this)</code> likewise can control the reading of the property. The advantage is that one does not need to define the reading property if it's not necessary (there are default property reading and writing functions if one doesn't explicitly define them).</p>

<hr>

<p>Putting all these things together, I would implement an enumerator class this way:</p>

<pre class="lang-matlab prettyprint-override"><code>classdef Enum
   properties
      value
   end

   methods
      function this = Enum(value)
         if nargin &gt; 0
            this.value = value;
         else
            this.value = 'none';
         end
      end

      function this = set.value(this, value)
         if ~ischar(value) || ~any(strcmp(value, {'foo','bar','baz','none'}))
            error(['Illegal value! ', value])
         end
         this.value = value;
      end

      function out = eq(this, other)
         out = strcmp(this.value, other.value);
      end

      function disp(this)
         disp(['Enum with value ',this.value])
      end
   end
end
</code></pre>

<p>You can use it as follows:</p>

<pre class="lang-matlab prettyprint-override"><code>a = Enum;
b = Enum('foo');
c = Enum('foo');
&gt;&gt; a==b
ans = 0
&gt;&gt; c==b
ans = 1
</code></pre>

<hr>

<p>Alternatively, if you don't want to allow the user to change the value of the enumerator (which, I gues, is not really necessary at all), then it is possible to keep the <code>value</code> property as read-only (<code>SetAccess=private</code>), or even completely private (<code>Access=private</code>), and remove the <code>set.value</code> function. With a private <code>value</code> property, the <code>Enum</code> class can still be copied, examined (using <code>disp</code>) and compared.</p>
    </div>