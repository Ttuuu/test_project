<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General</h2>

<ol>
<li>You don't have any comments. I recommend you document what basic blocks of code are doing</li>
<li>I recommend factoring out the parsing and algorithm parts of your code into different functions.</li>
<li>Why prompt the user for the number of input items? You can trivially detect it from the second line input, unless this specifies a different value.</li>
<li>Non-descriptive variable names: What does <code>s</code> contain? What does <code>ans</code> mean?</li>
<li>The <code>itertools</code> crate is super helpful whenever iterators are involved</li>
</ol>

<h2>Input Capture / Parsing</h2>

<ol>
<li>Read in both lines at once: <code>let lines = io::stdin().lock().lines().take(2);</code></li>
<li>Map over those lines, parsing the integers:</li>
</ol>

<pre class="lang-rust prettyprint-override"><code>let mut numbers = lines.map(|line| {
    line
    .trim()
    .split(' ')
    .map(|s| s.parse::&lt;i32&gt;().unwrap())
});
</code></pre>

<ol start="3">
<li>Split the first line:</li>
</ol>

<pre class="lang-rust prettyprint-override"><code>let first_line = numbers.next().unwrap().take(2).collect::&lt;Vec&lt;_&gt;&gt;();
assert_eq!(first_line.len(), 2);

let num_items = first_line[0];
let max_weights = first_line[1];
</code></pre>

<ol start="4">
<li>And grab the items from the second line: <code>let items = numbers.next().unwrap().collect::&lt;Vec&lt;_&gt;&gt;();</code></li>
</ol>

<h2>Algorithm Part 1 (<code>s</code>)</h2>

<ol>
<li>I'd specify the range as <code>1..(1 &lt;&lt; num_items)</code> to really make clear that second <code>1</code> is being shifted, not the whole range.</li>
<li>Personally, I prefer my tuples to be easily spotted. I'd set the iteration result a variable then use that in the tuple:</li>
</ol>

<pre class="lang-rust prettyprint-override"><code>.map(|i| {
    let sum = items
        .iter()
        .enumerate()
        .filter(|&amp;(t, _)| (i &gt;&gt; t &amp; 1 == 1))
        .map(|(_, elem)| elem.clone())
        .sum::&lt;i32&gt;();
    (sum, i)
})
</code></pre>

<ol start="3">
<li>It's unclear what <code>.filter(|&amp;(t, _)| (i &gt;&gt; t &amp; 1 == 1))</code> is doing here, but usually bitwise comparisons can be expressed more clearly with other operations.</li>
<li>Additionally, <code>i</code> and <code>t</code> should probably be renamed to be more clear.</li>
<li>Also, those extra parenthesis around the closure return value should instead be used to group whichever operation takes precedence for clarity of the expression</li>
<li><code>.map(|(_, elem)| elem.clone())</code> I think can be replaced with <code>.map(|(_, &amp;elem)| elem)</code></li>
<li>Recommend returning <code>(i, sum)</code> instead of <code>(sum, i)</code> to better match the pattern of <code>enumerate</code></li>
<li>Extra parenthesis around the return value in <code>.filter(|&amp;(elem, _)| (elem &gt;= 0))</code></li>
<li>I think <code>.min_by(|(a, _), (b, _)| a.cmp(&amp;b))</code> can be replaced with <code>.min_by_key(|(x, _)| x)</code></li>
<li>Doesn't look like you ever use <code>s.0</code> so you can ignore it with <code>let (_, s): (i32, i32) = ...</code></li>
<li>In fact, it doesn't look like you use the <code>i</code> index at all after the first <code>.map(|i| {</code> so you don't need to pass it through the rest of the chain.</li>
</ol>

<h2>Algorithm Part 2 (<code>ans</code>)</h2>

<ol>
<li>You repeat <code>(x &gt;&gt; t &amp; 1 == 1)</code> twice: here and above. Perhaps move it to a clearly-named function?</li>
<li>I'd store the <code>ans.iter().fold(...)</code> in a variable before printing the result. Makes the eventual format string output easier to predict.</li>
<li>Suggest using <code>format!</code> in the <code>fold</code>:</li>
</ol>

<pre class="lang-rust prettyprint-override"><code>.fold(|out, &amp;num| format!("{}{} ", out, num))
</code></pre>

<ol start="4">
<li>Alternatively, you could use <code>join</code> instead of the <code>fold</code>:</li>
</ol>

<pre class="lang-rust prettyprint-override"><code>ans.into_iter().map(|x| x.to_string()).collect::&lt;Vec&lt;_&gt;&gt;().join(" ")
</code></pre>
    </div>