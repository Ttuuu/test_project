<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/222282/200133">AlexV</a> has covered the formatting stuff.</p>

<h3>With regards to the length and efficiency of the code:</h3>

<p>You've clearly put a lot of thought into <em>how</em> to calculate the list of tuples requested. And you've found some good efficiencies! But you're approaching this from the wrong direction: Start with the <em>clearest syntactically legal expression of the desired result</em> you can write, and then add complexity/efficiency as needed.</p>

<pre class="lang-py prettyprint-override"><code>def three_sum(nums: List[int]) -&gt; Set[Tuple[int,int,int]]: # Type-hints are optional.
    return {
        tuple(sorted([a, b, c]))
        for a in nums
        for b in nums
        for c in nums
        if 0 == (a + b + c)
    }
</code></pre>

<p>That's pretty concise and pretty clear, but it's just about the least efficient way one could do it. </p>

<ul>
<li>We should be sorting first, and our inner loops should only cover values greater-than-or-equal-to (or only less than/equal to) the value grabbed by the outer loop.</li>
<li>We can ignore duplicate values in <code>nums</code>, since each value will be considered alongside itself anyway.</li>
</ul>

<p>This will reduce the length of our loops. It may actually <em>increase</em> the time we spend sorting/culling, but that will depend on the input data. </p>

<pre class="lang-py prettyprint-override"><code>def three_sum(nums: List[int]) -&gt; Set[Tuple[int,int,int]]:
    indexed_culled = enumerate(sorted(set(nums)))
    return {
        (a, b, c)
        for (a, i_a) in indexed_culled
        for (b, i_b) in indexed_culled[i_a:]
        for (c, _) in indexed_culled[i_b:]
        if 0 == (a + b + c)
    }
</code></pre>

<p>This is still lacking in the kind of maximal efficiency your code seems to be striving for. It <em>is</em> the version I'd want to see in most production situations, but if runtime optimization is critical then maybe we should try to shorten/avoid the innermost loop. If the <code>c</code> loop has five items to run, in ascending integer value, and the first <code>a + b + c</code> is 1, then we shouldn't have to do the other four.</p>

<pre class="lang-py prettyprint-override"><code>def three_sum(nums: List[int]) -&gt; Set[Tuple[int,int,int]]:
    culled = set(nums)
    indexed = enumerate(sorted(culled))
    pairs = {
        (a, b)
        for (a, i_a) in indexed
        for (b, _) in indexed[i_a:]
    }
    return {
        (a, b, 0 - (a + b))
        for (a, b) in pairs
        if 0 - (a + b) in culled
    }
</code></pre>

<p>Of course if runtime optimization is critical, you'll want someone better versed than me in python's different iterable types to reconsider all my Set/List/Tuple/Generator choices. </p>
    </div>