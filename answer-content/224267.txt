<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Correctness issues</strong></p>

<p>Correctness merits priority over efficiency. Important to get a correct answer, not a  fast and wrong one. </p>

<ul>
<li>Poor use of mixing types</li>
</ul>

<p><code>long interval</code>, and <code>int i</code> lead to <em>undefined behavior</em> (UB) when <code>interval &gt; INT_MAX</code>.  Use same type.</p>

<ul>
<li>Small range</li>
</ul>

<p><code>long</code> may use 32-bit.  Easy enough to run in less than 1 minute and exceed 2<sup>31</sup> - limiting how far we can test this code.  Use <code>long long</code> or, use <code>unsigned long long</code>.</p>

<ul>
<li>Off-by-1</li>
</ul>

<p>Using <code>/ (double) RAND_MAX</code>  may impart a small bias.  Yet given the <em>slow  convergence</em> of the Monte Carlo PI, I doubt any serious miscalculation.</p>

<p>I'd expect the random values to be in the middle of each random range:</p>

<pre><code>[0.5, 1.5, 2.5, ... RAND_MAX - 1.5, RAND_MAX - 0.5, RAND_MAX + 0.5]/(RAND_MAX + 1u)
</code></pre>

<p>Code has then distributed differently:</p>

<pre><code>[0.0, 1.0/RAND_MAX, 2.0/RAND_MAX, ... 1.0]
</code></pre>

<p>A more significant bias occurs when <code>(int)(double) RAND_MAX != RAND_MAX</code> - select platforms with more precision in <code>RAND_MAX</code> than <code>double</code>.</p>

<p>Note: to convert <code>RAND_MAX</code> plus 1 to <code>double</code>, code can use <code>(RAND_MAX/2 + 1)*2.0</code>.  Works well when <code>RAND_MAX</code> is a <a href="http://mathworld.wolfram.com/MersenneNumber.html" rel="nofollow noreferrer">Mersenne Number</a> or and odd value.  This avoids losing precision that <code>(double)RAND_MAX + 1.0</code> may incur.</p>

<hr>

<p><strong>Efficiency</strong></p>

<ul>
<li><code>pow()</code> vs <code>x*x</code></li>
</ul>

<p>A weak compiler may use a laborious function call seeing <code>pow(x,2)</code> and not the certainly more efficient <code>x*x</code> replacement.  Of course the right answer is to use a smart  compiler.  Still, profiling a direct coding of <code>x*x</code> may prove worth-wild.</p>

<ul>
<li><em>fp</em> vs. <em>integer</em> </li>
</ul>

<p>I'd even consider an integer only approach.  Something like the below.</p>

<pre><code>// int2x twice as wide as int
int2x limit = (int2x) RAND_MAX * RAND_MAX;
...
  int2x x = rand();
  int2x y = rand();
  if (x*x + y*y &lt;= limit) circle++;
</code></pre>

<ul>
<li><code>double</code> vs. <code>long double</code></li>
</ul>

<p>Seriously doubt any calculation run within a day will benefit using the higher precision <code>long double</code>.</p>

<pre><code>// return (long double) circle / interval * 4.0;
return circle / interval * 4.0;
</code></pre>

<ul>
<li>No comment on OP's major goal: Serial vs OMP - sorry.</li>
</ul>
    </div>