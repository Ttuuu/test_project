<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think a MenuOption should be a separate class. A MenuOption has a name, a pick function, and a way to call functions on your Main class where you have all your business logic. Right now you have duplication in the numbers for menu options and in the handling of menus.</p>

<pre><code>System.out.println("1. Checking");
System.out.println("2. Savings");
System.out.println("3. Logout");

//...

switch(selection){
    case 1:
    optionChecking();
    break;
    case 2:
    optionSavings();
    break;
    case 3:
    logOut();
    break;
}
</code></pre>

<p>This is where you're duplicating the numbers for menu options. If you could make a class which contains a method to call - anonymous classes, perhaps, like so:</p>

<pre><code>new MenuOption(this, "Deposit"){
    @Override
    public void pick(){
        main.depositChecking();
    }
};
</code></pre>

<p>then you'd be able to get rid of part of this duplication. To get rid of the numbers, you'll probably want to use a List.</p>

<pre><code>List&lt;MenuOption&gt; mainMenu = new ArrayList&lt;&gt;();
mainMenu.add(new MenuOption(this, "Checking"){...});
mainMenu.add(new MenuOption(this, "Savings"){...});
</code></pre>

<p>Like so, you can then print a menu:</p>

<pre><code>for(int i = 0; i &lt; menu.size(); i++){
   MenuOption option = menu.get(i);
   System.out.println((i+1)+". "+option.getName());
}
</code></pre>

<p>With something like that, you can get rid of the duplication of numbers. You can also use this to combine the menu printing functions into one function which takes a menu to print and then prints it. Like that, adding a new menu would be easier.</p>

<p>As for your Savings class, you can make use of <code>+=</code> and <code>-=</code> to shorten <code>balance = balance + amount</code> to <code>balance += amount</code>.</p>
    </div>