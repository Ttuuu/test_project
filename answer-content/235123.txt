<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Quite a bit of code to look at. This is not a complete review, but I did two simple things, which may prompt thought / improvements:</p>

<ol>
<li>I ran a static analyser over your code (clang-tidy V9). The output is below. It is pointing many of the stylistic things I would say too. And it highlights some actual issues.</li>
<li>I added a <code>main()</code> method and i tried to use your code. ie, I made it "work". This also highlighted a couple of small issues. Try it yourself. Is this the API you want for the users of your library? How could it be improved? </li>
</ol>

<p>my <code>main()</code>:</p>

<pre><code>int main()
{
  auto req_params = easyhttp::UrlParameters{{"q","test"}};
  auto req_config = easyhttp::RequestConfig{
    "https://www.google.com",
    req_params,
    {},
    {},
    std::chrono::duration&lt;long&gt;{10}
  };
  auto req = easyhttp::Request();
  auto response = req.get(req_config);
  std::cout &lt;&lt; response.content &lt;&lt; "\n";
  return 0;
}

</code></pre>

<p>clang-tidy output</p>

<pre><code>curl2.cpp:18:8: warning: constructor does not initialize these fields: error [hicpp-member-init]
struct HttpResponse {
       ^
curl2.cpp:29:3: warning: use '= default' to define a trivial default constructor [hicpp-use-equals-default]
  Parameters() {}
  ^            ~~
               = default;
curl2.cpp:31:12: warning: initializer-list constructor should not be declared explicit [google-explicit-constructor]
  explicit Parameters(const std::initializer_list&lt;std::pair&lt;std::string, std::string&gt;&gt;&amp; list) {
  ~~~~~~~~~^
curl2.cpp:32:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (auto itr = list.begin(); itr != list.end(); itr++) {
    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (const auto &amp; itr : list)
curl2.cpp:41:64: warning: the const qualified parameter 'x' is copied for each invocation; consider making it a reference [performance-unnecessary-value-param]
  explicit Parameters(const std::map&lt;std::string, std::string&gt; x) : items_{x} {}
                                                               ^
                                                              &amp;
curl2.cpp:43:48: warning: the parameter 'p' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  void add(std::pair&lt;std::string, std::string&gt; p) {
                                               ^
           const                              &amp;
curl2.cpp:49:27: warning: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  void remove(std::string key) { items_.erase(key); }
                          ^
              const      &amp;
curl2.cpp:53:37: warning: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  std::string get_value(std::string key) {
                                    ^
                        const      &amp;
curl2.cpp:64:38: warning: member variable 'items_' has protected visibility [cppcoreguidelines-non-private-member-variables-in-classes]
  std::map&lt;std::string, std::string&gt; items_;
                                     ^
curl2.cpp:69:21: warning: initializer for base class 'easyhttp::Parameters' is redundant [readability-redundant-member-init]
  UrlParameters() : Parameters() {}
                    ^~~~~~~~~~~~~
curl2.cpp:71:12: warning: initializer-list constructor should not be declared explicit [google-explicit-constructor]
  explicit UrlParameters(std::initializer_list&lt;std::pair&lt;std::string, std::string&gt;&gt; list)
  ~~~~~~~~~^
curl2.cpp:96:9: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
    if (items_.size() == 0) {
        ^~~~~~~~~~~~~~~~~~
        items_.empty()
/usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_map.h:463:7: note: method 'map'::empty() defined here
      empty() const _GLIBCXX_NOEXCEPT
      ^
curl2.cpp:107:30: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      str_ += ("&amp;" + k + "=" + v);
                             ^
curl2.cpp:118:15: warning: method 'url_escape_str' can be made static [readability-convert-member-functions-to-static]
  std::string url_escape_str(const std::string&amp; orig) {
              ^
  static
curl2.cpp:135:15: warning: initializer for base class 'easyhttp::Parameters' is redundant [readability-redundant-member-init]
  Headers() : Parameters() {}
              ^~~~~~~~~~~~~
curl2.cpp:137:12: warning: initializer-list constructor should not be declared explicit [google-explicit-constructor]
  explicit Headers(std::initializer_list&lt;std::pair&lt;std::string, std::string&gt;&gt; list)
  ~~~~~~~~~^
curl2.cpp:144:40: warning: the const qualified parameter 'key' is copied for each invocation; consider making it a reference [performance-unnecessary-value-param]
  std::string encode(const std::string key) {
                                       ^
                                      &amp;
curl2.cpp:161:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  std::stringstream* ss            = (std::stringstream*)ud;
  ^~~~~~~~~~~~~~~~~
  auto
curl2.cpp:161:38: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  std::stringstream* ss            = (std::stringstream*)ud;
                                     ^~~~~~~~~~~~~~~~~~~~
                                     static_cast&lt;std::stringstream*&gt;( )
curl2.cpp:161:38: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
curl2.cpp:180:16: warning: method 'http_request_impl' can be made static [readability-convert-member-functions-to-static]
  HttpResponse http_request_impl(const HttpRequestType r, RequestConfig&amp; c) {
               ^
  static
curl2.cpp:183:32: warning: use nullptr [modernize-use-nullptr]
    struct curl_slist* chunk = NULL;
                               ^~~~
                               nullptr

</code></pre>
    </div>