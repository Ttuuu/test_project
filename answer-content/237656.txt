<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall it's fine. My suggestions would be:</p>

<ol>
<li>Fix the indenting.</li>
<li>If you find the comments helpful, great. Otherwise, consider saying "why" and not "what", e.g. <code># set the var SUDO to "" (blank)</code> -&gt; <code># This will be used as a prefix to run a command as root</code></li>
<li>You can alternatively consider checking if the command exists by running it: <code>if htop --version &gt; /dev/null 2&gt;&amp;1</code>. This does not discriminate against aliases, functions and builtins.</li>
<li>Prefer user lowercase variable names to avoid conflicting with existing environment variables. <code>SUDO="sudo"</code> is ok since <code>SUDO</code> isn't in use, but if you had tried the same with <code>PWD="pwd"</code> or <code>SHELL="sh"</code> you could have gotten some odd side effects. </li>
<li>Use <code>echo 'Error: htop is not installed.' &gt;&amp;2</code> to write the error message to stderr</li>
<li>The <code>&gt;&amp;1</code> aka <code>1&gt;&amp;1</code> is redundant: it just redirects the FD to where it's already going. </li>
<li>It's generally considered rude to install packages without asking the user. A more canonical approach is to simply exit with an error saying that <code>htop</code> is missing and leave it to the user to install it (this also avoids tying the script to Ubuntu/Mint). </li>
<li>If you continue when <code>htop</code> exists, why is the script exiting after installing <code>htop</code>? If it's to handle installation failures due to bad password or full disk, you should probably handle that explicitly.</li>
<li>You can use <code>exit</code> aka <code>exit $?</code> to exit with the status of the previous command, so that if the installation failed, you don't claim that the script ran successfully.</li>
</ol>
    </div>