<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When using more than one <code>Using</code> block you actually don't need to nest the second one inside of the first one, so this:</p>

<pre><code>using (var fileStream = File.OpenRead("F:\\domains-final\\domains\\domains-final.csv"))
{
    using (var reader = new StreamReader(fileStream))
    {
...
</code></pre>

<p>looks like this instead</p>

<pre><code>using (var fileStream = File.OpenRead("F:\\domains-final\\domains\\domains-final.csv"))
using (var reader = new StreamReader(fileStream))
{
...
</code></pre>

<p>inside of your foreach loop I would also invert the first if statement to dump out of the current iteration, this will lessen the amount of indentation that you have inside the foreach loop.</p>

<p>in the if part of the if/else statement inside the foreach loop, you create the variable <code>cleanedDomain</code> but don't use it inside of that statement, once you leave the statement that variable is disposed of, you could remove that assignment as it could save you a little performance but it might not be noticeable.  I removed it in the "<em>After</em>" code to clean up some noise.</p>

<p>Foreach loop Before:</p>

<pre><code>foreach (string topLevelDomain in topLevelDomains)
{
    string domain = line.Trim();
    if (domain.EndsWith(topLevelDomain))
    {
        string cleanedDomainTemp = line.Replace(topLevelDomain, "");
        if (!cleanedDomainTemp.Contains('.'))
        {
            string cleanedDomain = cleanedDomainTemp + topLevelDomain;
            if (domainHashList.Contains(domain)) break;

            domainHashList.Add(domain);

            File.AppendAllText("F:\\domains-final\\domains\\doms.txt", domain + Environment.NewLine);
        }
        else
        {
            string cleanedDomain = cleanedDomainTemp.Split('.').Last() + topLevelDomain;

            if (domainHashList.Contains(cleanedDomain)) break;

            domainHashList.Add(cleanedDomain);

            File.AppendAllText("F:\\domains-final\\domains\\doms.txt", cleanedDomain + Environment.NewLine);
        }

        break;
    }
}
</code></pre>

<p>Foreach Loop After:</p>

<pre><code>foreach (string topLevelDomain in topLevelDomains)
{
    string domain = line.Trim();
    if (!domain.EndsWith(topLevelDomain)) continue;

    string cleanedDomainTemp = line.Replace(topLevelDomain, "");
    if (!cleanedDomainTemp.Contains('.'))
    {
        if (domainHashList.Contains(domain)) break;

        domainHashList.Add(domain);
        File.AppendAllText("F:\\domains-final\\domains\\doms.txt", domain + Environment.NewLine);
    }
    else
    {
        string cleanedDomain = cleanedDomainTemp.Split('.').Last() + topLevelDomain;
        if (domainHashList.Contains(cleanedDomain)) break;

        domainHashList.Add(cleanedDomain);
        File.AppendAllText("F:\\domains-final\\domains\\doms.txt", cleanedDomain + Environment.NewLine);
    }

    break;
}
</code></pre>

<hr>

<p>I would also caution you against using a try/catch to simply bypass exceptions in your code without handling them appropriately.</p>

<p>You should not catch all exceptions and do nothing in the catch statement, it is bad practice.  Instead, you should see what exceptions that do occur and figure out how to handle those situations in your code during the development stage, maybe you catch certain exceptions and perform certain tasks inside that catch statement.   Allowing exceptions to bubble up and alert you lets you know that there are issues in your input or issues with a connection to the application, if you simply keep the application running without handling the exception you could be throwing your money into a server and not know it.</p>

<hr>

<p>Your variables <code>pc</code> and <code>totalLines</code> are magic numbers</p>

<p>it appears that <code>pc</code> is a percentage, but the other variable has what seems to be an arbitrary number <code>1906663905</code>  you should let yourself know what this number is, or find a way to get it from the file that is being read in (assuming it is the total number of lines in the file that you are reading from.</p>
    </div>