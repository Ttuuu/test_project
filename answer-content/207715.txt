<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Separation</h2>

<p>Good attempt on separation of concerns, but I think you can go further.</p>

<ul>
<li>You can wrap the logic to generate a random integer in a function <code>generate_random_int (int min, int max);</code> where the content might looks like <a href="http://www.stroustrup.com/C++11FAQ.html#std-random" rel="nofollow noreferrer">the example</a> provided by Bjarne Stroustrup (look at <code>rand_int</code>) and so, no more globals.</li>
<li>You can wrap the logic about filling a container with random numbers in a function  <code>template&lt;class ForwardIt&gt; void fill_random(ForwardIt begin, ForwardIt end)</code>  (which internally can rely on <a href="https://en.cppreference.com/w/cpp/algorithm/generate" rel="nofollow noreferrer"> <code>std::generate</code></a>  and your  <code>generate_random_int</code>).</li>
</ul>

<h2>Be explicit</h2>

<p>Try to be explicit about "how" and "what" </p>

<ul>
<li><strong>How</strong>: Use self-explanary methods and algorithms.</li>
<li><strong>What</strong>: Uses names that make sense</li>
</ul>

<h2>Parameters type</h2>

<p>Try to pass types that are not cheap to copy, by <code>const&amp;</code> (unless you need "destructive" work on it).</p>

<h2>Map initialization</h2>

<p>You don't need to initialize the map with 0's because when you try accessing to a key that doesn't exist, it is default constructed (so with 0's here).</p>

<h2>Choose right types</h2>

<p>As stated in other answers since your map's keys is a range of integers, you should use a <code>std::vector</code> or even since you know it size at compile time, <code>std::array</code> that you automatically fill with 0's when you default construct: <code>std::array &lt;int, 7&gt; counts{};</code>. (If you don't want to waste space of the elem at index 0, you have to do some computation later).</p>

<h2>Occurrences counting</h2>

<p>When you write:</p>

<pre><code>if (some_var == 3) { do_something(); }             //A
if (some_var == 2) {  do_something_else(); }  //B
</code></pre>

<p>If A is <code>true</code>, B can never be true. Instead of re-checking when it's useless, simply use <code>else if</code> :</p>

<pre><code>if (some_var == 3) { do_something(); } 
else if (some_var == 3) { do_something_else(); } 
</code></pre>

<p>But...</p>

<p>... Instead of testing several times for each dice side possible count, you can reduce branchements checking all "combo" first:</p>

<pre><code>if (counts[1] &gt;= 3) {
    result += 1000;
    counts[1] -= 3; // here we decrement to remove the wombo combo from the count
 }
 else if (counts[2] &gt;= 3) {
    //...
 }
 // ...
if (counts[1] &gt; 1) {
    result += 100 * counts[1];
 } 
// ...
</code></pre>

<p>Or even, automatically compute combo count</p>

<pre><code>// superbonus
if (counts[1] &gt;= 3) {
    result += 1000;
    counts [1] -= 3; 
}
// combo bonus
else  {
    for (int index = 2; index &lt; 7; ++index) {
        if (counts[index] &gt;= 3) {
            result += index * 100;
            counts[index] -= 3;
            break;
        }
    }
}
 // ...
if (counts[1] &gt; 1) {
    result += counts[1] * 100;
 } 
// ...
</code></pre>

<p>Or, maybe more explicit:</p>

<pre><code>// combo bonus
for (int index = 1; index &lt; 7; ++index) {
    if (counts[index] &gt;= 3) {
        result += index * 100;
        counts[index] -= 3;
        break;
    }
}
if (result == 100) {
    result *= 10; // superbonus
}
if (counts[1] &gt; 1) {
    result += counts[1] * 100;
 } 
// ...
</code></pre>

<p>Or using the @Snowhawk method, more imperative (and surely more efficient) but less flexible if you want to change your algorithm later.</p>

<h2>User-friendly output</h2>

<p>Instead of just printing the output, add some information to the user.
It's look nicer if he get as output:</p>

<blockquote>
  <p>Roll the dice! We got 1, 1, 5, 1, 5,  for total of 1100 points</p>
</blockquote>

<h2>What's next?</h2>

<p>Maybe a good challenge is to try implementing the full game based on complete rules? (<a href="http://thehobbyts.com/greed-dice-game-rules/" rel="nofollow noreferrer">this</a> or <a href="http://janbroussard.com/Greedy.html" rel="nofollow noreferrer">this</a>)</p>
    </div>