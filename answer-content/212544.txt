<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>#include &lt;ctime&gt;</code> (for <code>time()</code>).</p></li>
<li><p>The C++ versions of standard functions are declared in the <code>std</code> namespace, not the global namespace, so we should use <code>std::srand</code> and <code>std::time</code>.</p></li>
<li><p>We can use the C++11 random number generation facilities in <code>&lt;random&gt;</code>, rather than <code>srand</code> and <code>rand</code> to generate random numbers. e.g.</p>

<pre><code>std::mt19937 rng(std::random_device()()); // seed the random number generator (do this once)

...
std::uniform_int_distribution&lt;int&gt; dist(0, vacant.size() - 1);
int r = dist(rng); // generate an int with the given distribution
</code></pre></li>
<li><p><code>int</code> is not an appropriate type to store room indices. We should use the index type of the container (i.e. <code>std::vector&lt;Room&gt;::size_type</code>, which is <code>std::size_t</code>), since that covers the correct range of values.</p></li>
<li><p>Constant variables (<code>ROOMS</code>, <code>BATS</code>, etc.) are better than <code>#defines</code>, but there's no reason these can't be normal member variables (e.g. in the <code>Map</code> class). This would, for example, give us the flexibility to start a new game with different number of rooms or pits.</p></li>
<li><p>The <code>Player</code> stores the index of the current room. Each <code>Room</code> stores the adjacent room indices. There is therefore no reason for the <code>Player</code> class to store adjacent room indices as well. We can get these from the <code>Map</code> instead.</p></li>
<li><p><code>warning C4715: 'Map::movePlayer': not all control paths return a value</code>, <code>warning C4715: 'Map::shoot': not all control paths return a value</code> - we should fix that!</p></li>
</ul>

<hr>

<p><code>Map</code>:</p>

<ul>
<li><p><code>Map</code> is a slightly misleading name, since this class largely handles game logic. Perhaps the game logic could be split into a <code>Game</code> class, or the class itself renamed <code>Game</code>.</p></li>
<li><p>Use the <code>Map</code> constructor to do initialization, removing the need to call a separate <code>init</code> function.</p></li>
<li><p>One would expect the vector of <code>Room</code>s in <code>Map</code> to be called <code>rooms</code>, not <code>cave</code>.</p></li>
<li><p>Since the bats, wumpus, and pit can all coexist, the <code>Map::add*</code> functions may be slightly wrong - we only need to place a bat in a room with no other bats.</p></li>
<li><p>We should probably check that we don't run out of vacant rooms in which to place things.</p></li>
<li><p><code>Map::input</code> returns an integer value. However, we're not using it as a number, but to represent game state. C++ has <code>enum</code>s for this purpose, e.g. <code>enum class MoveResult { END_GAME, CONTINUE }</code>, and we should return one of these instead.</p></li>
</ul>

<hr>

<p>bit-flags:</p>

<ul>
<li><p>There is some duplication of code when referring to the <code>.bat</code>, <code>.pit</code>, <code>.wump</code> members of <code>Room</code>. It would be nice to remove this, and abstract some more functionality (e.g. checking for an adjacent feature) into a single function. This would be easier if we used bit-flags for the room contents. e.g.:</p>

<pre><code>enum RoomFeatures
{
    Player = 1 &lt;&lt; 0,
    Bat = 1 &lt;&lt; 1,
    Pit = 1 &lt;&lt; 2,
    Wumpus = 1 &lt;&lt; 3,
};

struct Room
{
    ...
    RoomFeatures features;
};

...

room.features |= RoomFeatures::Bat; // add bat to room
if (room.features &amp; RoomFeatures::Pit) ... // test for pit
room.features &amp;= ~RoomFeatures::Wumpus // remove wumpus from room
</code></pre>

<p>While the bitwise operators are admittedly rather awkward, we could wrap this in a neat interface, which lets us do something like this:</p>

<pre><code>bool Map::isAdjacentTo(int roomIndex, RoomFeatures feature) const
{
    for (auto i : cave[roomIndex].adjRooms)
        if (cave[i].contains(feature)) // `bool Room::contains() const` tests the bit-flag
            return true;

    return false;
}

...

// e.g. in reportState
if (isAdjacentTo(p.room(), RoomFeatures::Bat))
    std::cout ... ;
</code></pre></li>
</ul>

<hr>

<ul>
<li><p>It would be nice to separate the input and output from the game logic:</p>

<ul>
<li><p>At the moment we output messages about the player losing or winning in <code>Map::shoot</code>, <code>Map::moveWump</code>, and <code>Map::movePlayer</code> .</p></li>
<li><p><code>movePlayer()</code> and <code>shoot()</code> are called from the input function, rather than as part of the main loop as one might expect.</p></li>
</ul></li>
</ul>
    </div>