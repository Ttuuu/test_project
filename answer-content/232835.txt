<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Iterating [1...num] is too slow</strong><br>
<strong>Only [1...sqrt(num)] needed</strong> </p>

<p>Instead of </p>

<pre><code>for (j=1; j&lt;=num; j++) {
  if (num % j == 0) {
    divisors += 1;
  }
}
</code></pre>

<p>Go to the root of <code>num</code> (when <code>j*j &lt;= num</code>) and get 2 or 1 divisors.</p>

<pre><code>for (j=1; j*j &lt;= num; j++) {
  if (num % j == 0) {
    divisors += 1;
    if (j*j &lt; num) divisors += 1;
  }
}
</code></pre>

<p>Re-formulate to avoid <code>j*j</code> overflow</p>

<pre><code>for (j=1; j &lt; num/j; j++) {
  if (num % j == 0) {
    divisors += 2;
  }
}
if (j == num/j) {
  divisors += 1;
}
</code></pre>

<p>Note: Many compilers with recognize the nearby <code>num/j</code> and <code>num % j</code> and perform the operation for the time cost one of one.</p>

<p><strong>Example</strong></p>

<p>Consider <code>num == 36</code>.  Original code tries 36 numbers with the starred ones having an exact division.</p>

<p>1*,2*,3*,4*,5,6*,7,8,9*,10,11,12*,13,14,15,16,17,18*,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36*.</p>

<p>Notice that when <code>num%j == 0</code>, both <code>j</code> and <code>num/j</code> are divisors.  Except when <code>j == num/j</code>, that discovers two unique divisors at once.  Code only needs to  iterate to 6.</p>

<p>j=1, divisors: 1 &amp; 36<br>
j=2, divisors: 2 &amp; 18<br>
j=3, divisors: 3 &amp; 12<br>
j=4, divisors: 4 &amp; 9<br>
j=5, divisors: none<br>
j=6, divisor: 6  </p>

<p>6 iterations faster than 36.</p>

<p>With a <code>num = 1,000,000</code>, new code will iterate to 1000 rather than 1,000,000 - a thousand times faster.</p>

<hr>

<p><strong>Detail on overflow possibility.</strong></p>

<p>Consider <code>num</code> is at or near <code>INT_MAX</code>:</p>

<p>With <code>for (j=1; j&lt;=INT_MAX; j++) {</code>, <code>j</code> will attempt to increment beyond <code>INT_MAX</code> resulting in <em>undefined behavior</em>.  </p>

<p>With <code>for (j=1; j*j &lt; near_INT_MAX; j++) {</code>, Unless <code>near_INT_MAX</code> is a perfect square, <code>j*j</code> will overflow.  Again <em>undefined behavior</em>.</p>

<p>With <code>for (j=1; j &lt; num/j; j++) {</code>, <code>j</code> never overflow for all <code>num</code>.</p>

<p>====</p>

<p>There are many more advance techniques for faster code.</p>
    </div>