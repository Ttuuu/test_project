<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are my comments:</p>

<h2>inheritance</h2>

<p>composition over inheritance is usually a good principle to follow. However, inheritance has the advantage that the compiler is aware of it and can be used to alert in case of errors. specifically, I saw that in <code>VampireGroup</code>, you declared <code>private List&lt;Character&gt; vampires;</code>. So theoretically, a player character can be placed in this list. This is where it would be beneficial to have <code>Player</code> and <code>Vampire</code> classes that inherit from <code>Character</code>. with this you could declare <code>private List&lt;Vampire&gt; vampires;</code> which is more clear and also makes the compiler guard from accidental addition of <code>Player</code> character. the other benefit is that you can further customize player and vampires separately (perhaps they can define their own symbol? more on that later).</p>

<h2><code>Direction</code> enum</h2>

<p>this was already mentioned by @glissi. I will add further: in <code>Character.move()</code>, you have a <code>switch</code> statement with <code>case</code> for every movement. the key binding itself is defined in the constructor of <code>MovementKey</code>. however, all these pieces of logic and data are tied together. What if you decide to expand your game to allow for diagonal (or other) movements? you will need to make code change in all the above places (possibly more that I didn't see).  in CS, this is called <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a>. One place that is responsible for all logic and data pertaining to an isolated functionality.</p>

<p>If you wrap your head on how to have the character movement in the enum:  you can have a <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html" rel="nofollow noreferrer"><code>Function</code></a> argument to every enum value. The <code>Function</code> interface defines a method that takes one argument and returns a value. in your case, it will receive a <code>Point</code> of current position and return a new <code>Point</code> (can be same instance) in new position. Alternatively, you can have a <code>Consumer</code> that returns void (more an that later). the actual body of the functions can be specified as lambda expressions</p>

<pre><code>enum Direction {
    UP((point -&gt; {point.setRelativeY(-1); return point;})),
    LEFT((point -&gt; {point.setRelativeX(-1); return point;})),
    ...
    public Function&lt;Point, Point&gt; move;
    Direction(Function&lt;Point, Point&gt; move) {
        this.move = move;
    }
}
</code></pre>

<h2>Immutability</h2>

<p><code>Point</code> class is mutable. it has setter methods that allow callers to alter the state (modify instance variables' values).  In contrast, if you remove the setter methods of <code>Point</code>. it becomes immutable. if you want to move a character, you don't alter its point. instead, you assign a new point.  This is similar to the immutable <code>java.lang.String</code>. There are several advantages to immutable objects: they can be better tested, are far better suited to be used in multi-threaded system and can be used by Java 8 lambda expressions (that require final objects only).  All these cases are perhaps out of scope or too advanced for this exercise. however, in terms of general good practices, this principle is well known.  That is why I prefer to use <code>Function</code> over <code>Consumer</code> for movement operation in the enum.</p>

<h2>Separation of Concerns</h2>

<p>This <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">CS principle</a> can be viewed as a higher hierarchy variant of the Single Responsibility principle.  You have a <code>UserInterface</code> class that is supposed to be the (only) place that both takes user input and displays data.  Yet, there are several places that affect the output that is displayed on the console: the dungeon prints its own grid, and is responsible for the symbols of the player and of an empty point. <code>VampireGroup</code> decides the symbol of a vampire and <code>MovementKey</code> hard codes key binding. </p>

<p>now what if you wanted to create an HTML version of your game that is viewed online? what if you wanted to allow users to modify key binding? with Separation of Concerns, you should create a "black box" game engine that has its own api.this api will have a getDungeun() method that will return a string representation of the dungeon. each user interface will know how to read this string representation and display to the user (with possibly different symbols). the string representation can be custom-made, which requires custom-made parser, or use one of the industry standard formats, like XML, JSON where you have ready made parsers.</p>
    </div>