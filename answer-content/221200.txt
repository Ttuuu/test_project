<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Question</h2>

<blockquote>
  <p><em>"Will this causes to performance issue to my application or is there a Better Approach than this I should follow."</em></p>
</blockquote>

<p>Well that will depend on a lot of factors.</p>

<ul>
<li>1million clients.</li>
<li><a href="https://www.npmjs.com/package/fuzzy" rel="nofollow noreferrer">fuzzy.js</a> and its performance.</li>
<li>A single medium level server.</li>
</ul>

<h2>State of development</h2>

<p>First a quick look at the link you provided to <a href="https://www.npmjs.com/package/fuzzy" rel="nofollow noreferrer">fuzzy</a> and at the bottom of the page you find the ToDo list which contains 2 points of interest</p>

<blockquote>
  <ol start="3">
  <li>Async batch updates so the UI doesn't block for huge sets. Or maybe Web Workers?</li>
  <li>Performance performance performance!</li>
  </ol>
</blockquote>

<p>Following through to the <a href="https://github.com/mattyork/fuzzy" rel="nofollow noreferrer">gitHub repository</a> and we find that the last activity was 3 years ago. This suggests (not implies) that development has ended. That a key issue recognized by the developers (performance) will not be worked on in the near future.</p>

<h2>Performance</h2>

<p>To try and determine the performance per search entry I went to their demo and timed the search over several differently size lists of names, and search strings. </p>

<p>The performance test shows a slightly below linear complexity (in the range of 628 - 1,250,000 names), however its too close to call and the safe bet is its linear. It searched 1.25million names in ~1 +/- 0.2seconds</p>

<h3>Tests method</h3>

<p>The test was performed in the console running the following snippet many times</p>

<pre><code>t = performance.now();
res = fuzzy.filter(searchStr, data);
totalTime += performance.now() - t;
count ++;
</code></pre>

<p>A complex <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="nofollow noreferrer">regular expression</a>, on the same data required 1/10th the time.</p>

<pre><code>t = performance.now();
res = data.filter(name =&gt; regExpSearch.test(name));
totalTime += performance.now() - t;
count ++;
</code></pre>

<h2>Conclusion</h2>

<p>What Node.js does well is IO, and what is does not do well is processing. </p>

<p>Assuming one medium level server.</p>

<ul>
<li><p>1 second for a search is a very long time.</p></li>
<li><p>Fuzzy.js performance is unlikely to change.</p></li>
<li><p>A response time over a second puts your site in the bottom 20% of services, and is unacceptable.</p></li>
<li><p>I estimate that at 30 thousand users performance will become a serious problem (see below)</p></li>
</ul>

<p>If you are serving 1million active users, (using the 20/80 rule) with 20% of users visiting your site one day a year 20% of them once a month and 20% of them once a week (~600,000 searches a year) with users geographically clustered resulting in significant peak times. </p>

<p>It is highly likely that you will regularly have 30+ concurrent queries and a few times a year you can expect 300, in which case your server will be blocked for over 5 minutes.</p>

<p><sup>(<strong>NOTE</strong>) these are very rough estimates based on one search per user per visit.</sup> </p>

<h2>The answers</h2>

<blockquote>
  <p><em>"Will this causes to performance issue to my application or..."</em></p>
</blockquote>

<p>Yes for a very heavy trafficked site this will present a serious performance issue.</p>

<p>No for a very small traffic loads nobody will notice.</p>

<blockquote>
  <p><em>"...is there a Better Approach than this I should follow."</em></p>
</blockquote>

<p>Yes of course there is, use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="nofollow noreferrer"><code>regExp</code></a>, and there are many more. But I can not hand out advice on speculation. The information given above is already dubious as it is based on a single request rather than the site/service as a whole.</p>

<h2>Refection</h2>

<p>Well gee... any nerd knows this...</p>

<p>1+ million regular users is cash in the bank.</p>

<p>A service must start somewhere and that is with a few users, with growth being gradual and predictable (once moving). If you are monetizing the service then growth is great and not a problem (if managed well). </p>

<p>Start with the basics and work your way up. Replacing infrastructure (the search methods, upgrading the server/s) is part of the business. Performance is the least of your initial problems.</p>

<p>If you plan for viral growth then you are in the realm of highly speculative investment capital. Outsource a solution to people that have the experience or you <strong>will</strong> miss a lucrative opportunity. </p>

<p>If you plan to provide a free service for 1+ million users, good on you :), but you will need to have a fairly deep pocket.</p>
    </div>