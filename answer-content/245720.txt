<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, here is your input correctly formatted:</p>
<pre class="lang-html prettyprint-override"><code>Stacks are helpful in many computer applications&lt;/h2&gt;
</code></pre>
<pre class="lang-html prettyprint-override"><code>&lt;p&gt;Java is my favourite language!&lt;/p&gt;
&lt;p&gt;Programming is fun
</code></pre>
<pre class="lang-html prettyprint-override"><code>&lt;h1&gt;&lt;i&gt;I am learning a lot in CS 1027!&lt;/h1&gt;&lt;/i&gt;
</code></pre>
<pre class="lang-html prettyprint-override"><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Python&lt;/td&gt;
        &lt;td&gt;Java&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;1026&lt;/td&gt;
        &lt;td&gt;1027&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre>
<pre class="lang-html prettyprint-override"><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My Website&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Welcome to my website!&lt;/h1&gt;
        &lt;p&gt;This is my website about Java programming.&lt;/p&gt;
        &lt;p&gt;Thanks for stopping by.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>As you can see, the last two <em>are</em> valid HTML.</p>
<p>Let me continue with saying that what is "valid" HTML is a...complicated matter. For over 20 years the browsers have tried to make the most sense of the HTML they get thrown at, and what constitutes "valid" HTML is in the eye of the beholder at this point. However, ideally, everyone would stick to these rules.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>private String text;
</code></pre>
<p><code>text</code> is not the correct name in this case, it should be either <code>input</code> or <code>html</code>/<code>htmlContent</code>.</p>
<hr>
<p><code>tags</code> is needlessly an array, using a <code>Set</code> would remove much of the code for handling it. A <code>LinkedHashSet</code> would preserve the order of the encountered if that is required, otherwise a "normal" <code>HashSet</code> will do.</p>
<p>That will remove <code>tagNum</code>, <code>addTagToArray</code> and <code>expandCapacity</code> completely.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>private ArrayStack&lt;String&gt; stack;
</code></pre>
<p>You omitted the information what this class. I mean, we can deduce that it implements <code>java.util.Stack</code>, but it would still be nice to know.</p>
<p>Also, it should be declared with its base interface.</p>
<pre><code>private Stack&lt;String&gt; stack = new ArrayStack&lt;&gt;();
</code></pre>
<p>Also also, <code>stack</code> is not a great name. <code>encounteredTags</code> or <code>foundTags</code> would be better.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>public HTMLChecker (String input) {
</code></pre>
<p>Validators accepting the to-be-checked-input in the constructor is unusual, it should have a <code>check</code> method which accepts the input.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>    public void printTagList () {
        String str = "";
        
        for (int i = 0; i &lt; tags.length; i++) {
            
            if (tags[i] != null) {
                str += tags[i] + " ";
            }
        }
        
        System.out.println(str);
    }
</code></pre>
<p>You want to use <code>StringBuilder</code> whenever concatening from an undefined-length list. As concatening <code>String</code>s like this will result in constant copying of the content. What happens is this:</p>
<ol>
<li>Allocate memory in the size of <code>a</code>+<code>b</code>, call it <code>c</code></li>
<li>Copy <code>a</code> into <code>c</code></li>
<li>Copy <code>b</code> into <code>c</code></li>
</ol>
<p>And repeat for every iteration. If you have 25 characters, it doesn't matter. If you have 25 <em>million</em> characters, it starts to get a problem.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>public void parseText(){
</code></pre>
<p>Again, this is not a great name, neither is <code>flag</code>.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>tag += text.charAt(j);
</code></pre>
<p>You want to iterate until you find the end of the tag, and the copy the whole substring instead of single characters.</p>
<hr>
<pre class="lang-java prettyprint-override"><code>!tag.equals("")
</code></pre>
<p><code>!tag.isEmpty()</code> is easier to read.</p>
<hr>
<p>A better structure for the class would be (a little pseudo-code):</p>
<pre class="lang-java prettyprint-override"><code>public class HtmlChecker {
    protected Set&lt;String&gt; tags;
    
    public HtmlChecker() {
        super();
    }
    
    public boolean parse(String html) { ... }
    public Set&lt;String&gt; getTags() { ... }
}

// Usage follows

HtmlChecker htmlChecker = new HtmlChecker();

if (htmlChecker.parse(input)) {
    System.out.println("input is valid HTML, encountered tags:");
    
    for (String tag : htmlChecker.getTags()) {
        System.out.println(" * " + tag);
    }
} else {
    System.out.println("input is not valid HTML.");
}
</code></pre>
<hr>
    </div>