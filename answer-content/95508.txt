<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your <code>validate</code> function, instead of doing a conditional, returning <code>True</code> if is passes and <code>False</code> if it does not, just return the conditional that you are checking.</p>

<p>Here is what I mean:</p>

<pre><code>return len(form) &gt; 0
</code></pre>

<p>This will return <code>True</code> if the expression evaluates to <code>True</code>, and <code>False</code> if it evaluates to <code>False</code>. No conditional needed.</p>

<p>Or, if you wish to further simplify this function, just return the length of <code>form</code>. Python treats 0 as <code>False</code> so if the length is 0, it will act as <code>False</code> in a conditional.</p>

<p>At that point, it may not even be worth it as a function.</p>

<hr>

<p>In your <code>login</code> function, you wrote this in your first <code>if</code> statement:</p>

<pre><code>not len(username) &gt; 0
</code></pre>

<p>Which looks almost exactly like your <code>validate</code> function, except for the <code>not</code>.</p>

<p>If you have the function <code>validate</code>, you might as well use it when you need it:</p>

<pre><code>not validate(username)
</code></pre>

<hr>

<p>You to be repeating something like this throughout your code:</p>

<pre><code>if not len(username) &gt; 0:
    print("Username can't be blank")
else:
    break
</code></pre>

<p>And the only thing that is really changing is this thing that can't be blank.</p>

<p>I recommend making a function so you can aren't repeating yourself as much.</p>

<p>Here is what I came up with</p>

<pre><code>def cant_be_blank(form, name):
    if not len(form) &gt; 0: # or, use `not validate`
        print(name + " can't be blank.")
        return False
    return True
</code></pre>

<p>Then, you can use the function like this:</p>

<pre><code>if not cant_be_blank(username, "Username"):
    break
</code></pre>

<hr>

<p>Add some documentation to your functions.</p>

<p>In your documentation, you should include things like what each parameter means (if there are any), what the return means (if there is any), and a short description of what the function does.</p>

<p>I wrote this for your <code>loginauth</code> function:</p>

<pre><code>def loginauth(username, password):
     """
     * Confirms that the username exists and that the password is correct for that username
     * @param(str) username -- the username
     * @param(str) password -- the password
     * @return(bool) True -- if successful login
     * @return(bool) False -- if unsucessful logic (either username does not exist, or password is incorrect)
     """
    if username in users:
        if password == users[username]["password"]:
            print("Login successful")
            return True
    return False
</code></pre>

<p><em>Note the placement of the, as it is called, docstring.</em></p>

<hr>

<p>On statements like this:</p>

<pre><code>if not len(username) &gt; 0:
    print("Username can't be blank")
    continue
else:
    break
</code></pre>

<p>I'm not sure how much of a difference this makes in efficiency (if it makes a difference in anything at all), but the <code>else</code> part is unnecessary. </p>

<p>If the conditional passes, <code>continue</code> will run and skip over everything else to go back to the top of the loop. If it does not run, it can just call down to <code>break</code> and exit the loop. No <code>else</code> needed.</p>

<p>So the above code snippet will become this:</p>

<pre><code>if not len(username) &gt; 0:
    print("Username can't be blank")
    continue
break # if the above conditional fails, execution will fall through to this
</code></pre>

<hr>

<p>I recommend creating a class for users so information is more easily stored.</p>

<p>It doesn't have to be too complicated; just a simple storage of values:</p>

<pre><code>class User:

    def __init__(self, username, password, group):
        self.username = username
        self.password = password
        self.group = group
        self.mail = []
</code></pre>

<p>Then, when inserting new <code>User</code>s into <code>users</code>, just do:</p>

<pre><code>users[username] = User("john", "smith", "user")
</code></pre>

<hr>

<p>In case in the future you make some mail parser, don't make it too complicated by storing the mail separated by strings ("Sender", "Subject", "Context"); store it in an object. Depending on what the user wrote, those strings can make messages really confusing.</p>

<p>Why not store mail in an object?</p>

<p>Here is what I came up with:</p>

<pre><code>class Mail:

    def __init__(self, sender, subject, context):
        self.sender = sender.username # assuming you use the `User` class I wrote
        self.subject = subject
        self.context = context

    def to_string():
        print("Sender: %s\nSubject: %s\nContext: %s" % (self.sender, self.subject, self.context))
</code></pre>

<p>I threw in an extra <code>to_string</code> method to format the object's properties in a way that made sense to output.</p>

<p><em>This is not coding related, but I believe the correct word would be "content" rather than "context".</em></p>

<hr>

<p>If you continue to work on this code, you are going to build up quite a big <code>if/elif/else</code> statement in your <code>session</code> function.</p>

<p>As an easier way to solve this problem, create a dictionary containing the name of the command and the function to call for that command.</p>

<p>Here is what I mean:</p>

<pre><code>commands = {
    "logout": logout,
    "view mail": view_mail
    ...
}
</code></pre>

<p>Then, your session function can be reduced to:</p>

<pre><code>if option in commands:
    return_code = commands[option]()
    if return_code == False:
        break
else:
    print(option + " is not an option")
</code></pre>

<p><em>Now, a command should return <code>False</code> if the session is supposed to stop after execution of the command.</em></p>

<p>Yes, before in your string of <code>if/elif</code> statements, you had a whole <code>if</code> block to if the user was in the group "admin".</p>

<p>Since you don't have this anymore, just create a function for it:</p>

<pre><code>def is_user_admin(user):
    return user.group == "admin"
</code></pre>
    </div>