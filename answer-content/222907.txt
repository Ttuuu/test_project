<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>using namespace std;</code> may seem fine for small projects, but <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">can cause problems later</a> so it's best to avoid it.</p></li>
<li><p>Prefer to output "\n" instead of <code>std::endl</code>. <code>std::endl</code> will also flush the output stream, which is usually unnecessary.</p></li>
<li><p>We should check that reading user input from <code>std::cin</code> didn't fail. We can do this by testing <code>std::cin.fail()</code> after reading the string.</p></li>
<li><p>The stack variable isn't used outside of the <code>checkParentheses</code> function, so it should be declared inside the function.</p></li>
<li><p>The <code>str</code> variable can be passed by const-reference, instead of by value (to avoid an unnecessary copy).</p></li>
<li><p>The <code>flag</code> variable has two possible values signifying <code>true</code> or <code>false</code>. The <code>bool</code> type would thus be more appropriate than an <code>int</code>.</p></li>
<li><p>There is no need to maintain a <code>top</code> variable. We can just use <code>s.top()</code> where necessary. Note that <a href="https://en.cppreference.com/w/cpp/container/stack/top" rel="noreferrer"><code>std::stack.top()</code> returns by reference</a>, so there is no need to worry about an extra copy, if that's why you're avoiding it.</p></li>
<li><p>We should use the appropriate index type for indexing into a container (in the <code>for</code> loop). This is <code>std::size_t</code> (or <code>std::string::size_type</code>), not <code>int</code>.</p></li>
<li><p>However, it's actually much easier to use a range-based <code>for</code> loop:</p>

<pre><code>for (auto const&amp; c : str) { ... }
</code></pre></li>
<li><p>There is quite a lot of redundancy in the return statements at the end (the <code>else</code> and <code>else if</code> both return <code>false</code>). We could simplify the condition to <code>return (s.empty() &amp;&amp; flag = 0);</code></p></li>
</ul>

<hr>

<p>Given the above, we would end up with something more like:</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;stack&gt;
#include &lt;string&gt;

bool checkParentheses(std::string const&amp; str) {

    std::stack&lt;char&gt; s;

    for (auto const&amp; c : str) {

        if (c == '(' || c == '{' || c == '[') {
            s.push(c);
        }
        else if (c == ')' || c == '}' || c == ']')
        {
            if (s.empty())
                return false;

            if (c == ')' &amp;&amp; s.top() == '(') {
                s.pop();
            }
            else if (c == '}' &amp;&amp; s.top() == '{') {
                s.pop();
            }
            else if (c == ']' &amp;&amp; s.top() == '[') {
                s.pop();
            }
            else {
                return false;
            }
        }
    }

    return s.empty();
}

int main() {

    std::cout &lt;&lt; "Enter an expression with brackets: \n";

    std::string str;
    std::cin &gt;&gt; str;

    if (std::cin.fail()) {
        std::cout &lt;&lt; "Invalid input!\n";
        return EXIT_FAILURE;
    }

    std::cout &lt;&lt; str &lt;&lt; "\n";
    std::cout &lt;&lt; "Expression is " &lt;&lt; (checkParentheses(str) ? "valid!" : "not valid") &lt;&lt; "\n";

    return EXIT_SUCCESS; // (done implicitly if this isn't here)
}
</code></pre>
    </div>