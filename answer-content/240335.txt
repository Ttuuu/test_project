<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like having a <code>Seq.groupAdjacentBy</code> helper function for this kind of thing. It uses mutation in its own small scope to keep the implementation simple and builds on F#'s own <code>Seq.groupBy</code>. It groups values based on their key according to a key generating function (like your function), but only puts values in the same group if they are adjacent. I like this because it has quite a well defined and understandable meaning so it's easy to re-use elsewhere:</p>

<pre><code>module Seq =
    let groupAdjacentBy f xs =
        let mutable prevKey, i = None, 0
        xs
        |&gt; Seq.groupBy (fun x -&gt;
            let key = f x
            if prevKey &lt;&gt; Some key then
                i &lt;- i + 1
                prevKey &lt;- Some key
            (i, key))
        |&gt; Seq.map (fun ((_, k), v) -&gt; (k, v))
</code></pre>

<p>Using this, a function like yours becomes fairly simple to write:</p>

<pre><code>let mapChange selector mapping xs =
    xs
    |&gt; Seq.groupAdjacentBy selector
    |&gt; Seq.collect (fun (_, values) -&gt;
        let values = values |&gt; Seq.toArray
        let mapped = mapping values.[0]
        seq {
            for x in values do
                x, mapped })

let isEven x = x % 2 = 0

mapChange isEven string [1; 3; 2; 3] // seq [(1, "1"); (3, "1"); (2, "2"); (3, "3")]
</code></pre>

<p>Note that this uses "unsafe" access of the first item in an array, which would throw an exception for an empty array, but we know that any groups created by the grouping function must have at least one item (just like F#'s <code>Seq.groupBy</code>).</p>
    </div>