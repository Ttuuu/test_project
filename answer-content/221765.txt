<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few simple observations:</p>

<ul>
<li><blockquote>
<pre><code>    if n % 2 == 0:
        ...
    elif n % 2 == 1:
        ...
</code></pre>
</blockquote>

<p>Here, we know that if <code>n % 2</code> isn't 0, it <em>must</em> be 1, since <code>n</code> is an integer.  So that <code>elif</code> can be simply <code>else</code>, making it simpler to read.  More experienced programmers will reverse the test, knowing that <code>1</code> is the only truthy result of <code>n % 2</code>, so write <code>if n % 2: ... ; else ...</code>.</p></li>
<li><blockquote>
<pre><code>    if ...:
        ...
        print (n)
    else:
        ...
        print (n)
</code></pre>
</blockquote>

<p>The <code>print</code> that's present in both branches could be placed after the <code>if</code>/<code>else</code>, since it doesn't depend on the condition.</p></li>
<li><p>The results of the arithmetic expressions are already <code>int</code>, so no conversion is necessary.</p></li>
<li><p>The <code>if</code>/<code>else</code> could be reduced to a single line:</p>

<pre><code>n = 3 * n + 1 if n % 2 else n // 2
</code></pre>

<p>but to me, that looks less clear, so I don't recommend that level of terseness here.</p></li>
</ul>

<hr>

<h1>Modified code</h1>

<p>Applying the observations above, I get a simpler version of the function:</p>

<pre><code>def collatz(n):
    while n &gt; 1:
        if n % 2:
            n = 3 * n + 1
        else:
            n = n // 2
        print(n)
</code></pre>
    </div>