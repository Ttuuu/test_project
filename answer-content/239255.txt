<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Indentation</h2>

<p>This:</p>

<pre><code>def conversion(acqList):


  prefix = ['MCS','FT', 'FS', 'GNo', 'Rs', 'WHw', 'Cy']
  newList = []

#to check if there is any of the items contains the prefix
  for e in acqList:
</code></pre>

<p>is (as a surprise to me) valid syntax, but that doesn't mean it's a good idea. The beginning of a comment, when that comment is the only thing on the line, should match the level of indentation of the block it's in. To do otherwise is pretty confusing.</p>

<p>You also seem to be using two-space indentation, when the standard is four.</p>

<h2>If-parens</h2>

<p>This:</p>

<pre><code>  if(e.label.startswith(pf)):
</code></pre>

<p>should become</p>

<pre><code>if e.label.startswith(pf):
</code></pre>

<h2>Nested functions</h2>

<p>There are sometimes good reasons for nested functions, but so far as I can see, this:</p>

<pre><code>  def pairwise(iterable):
    return zip(*[iter(iterable)]*2)
</code></pre>

<p>doesn't have any of them. You're better off moving this function to global scope.</p>

<h2>PEP8 spacing</h2>

<p>By the PEP8 formatting standard, this:</p>

<pre><code>  module.modify_acq(acquisition_id = acqID, label = newLabel )
</code></pre>

<p>would become</p>

<pre><code>module.modify_acq(acquisition_id=acq_id, label=new_label)
</code></pre>

<h2>Mutability</h2>

<p>This:</p>

<pre><code>  prefix = ['MCS','FT', 'FS', 'GNo', 'Rs', 'WHw', 'Cy']
</code></pre>

<p>never changes, so it should be made an immutable tuple:</p>

<pre><code>  prefix = ('MCS','FT', 'FS', 'GNo', 'Rs', 'WHw', 'Cy')
</code></pre>

<h2>Namespace pollution</h2>

<p>These:</p>

<pre><code>from datetime import *
from dateutil import *
from datetime import timedelta
from itertools import *
from math import *
</code></pre>

<p>have a few problems. First, your <code>timedelta</code> import is redundant, because you already <code>import *</code>.</p>

<p>Also, it's not a great idea to import everything from these modules. You're better off either</p>

<ol>
<li>importing specific symbols from these modules as necessary, or</li>
<li>importing only the module itself (i.e. <code>import math</code>) and then using fully-qualified references.</li>
</ol>

<p>Either of those will significantly clean up your namespace.</p>
    </div>