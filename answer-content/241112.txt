<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I choose <code>__invoke()</code> here for two reasons:</p>

<ol>
<li><p>The existence of <code>__invoke()</code> denotes the "primary purpose" of the object. It is designed to do a single thing only, so <code>__invoke()</code> stands out from other public methods when reading the method list of the class as its primary purpose.</p></li>
<li><p>The use of <code>__invoke()</code> allows the object to be directly used as callable, without using the more cumbersome <code>[$object, 'create']</code> notation. This is analogous to the concept of "functors" in C++. Specifically, if a callable is to be passed, but you also want to pre-fill some "state" with it, you can either generate a closure or use a class with <code>__invoke()</code> method. However, in PHP, a class can offer the additional benefit of interfaces so you can implement type-safe callable which isn't possible with traditional closures. <a href="https://miklcct.com/wordpress/2018/11/15/type-safe-callables-in-php-by-interfaces-with-__invoke/" rel="nofollow noreferrer">This can be used to migrate legacy code to type-safe PHP 7 code.</a> </p></li>
</ol>
    </div>