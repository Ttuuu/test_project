<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The presented solution is quite C-like with <code>strtok</code> and such. For your solution:</p>

<ul>
<li><p>Your function takes the input by-value, but this seems unnecessary and wasteful. Prefer to take it by const-reference. </p></li>
<li><p>The idea behind your solution looks OK, but you should notice that <code>std::string</code> can contain multiple null characters and is not null-terminated. In general, I would prefer to solve the problem by leveraging the standard library more. For example, we could write:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;cctype&gt;

std::string LongestWord(const std::string&amp; str)
{
    std::string longest;

    for (auto first = str.cbegin(); first != str.cend(); )
    {
        auto w_end = std::adjacent_find(first, str.cend(),
            [](char a, char b)
        {
            return std::isalpha(static_cast&lt;unsigned char&gt;(a)) !=
                std::isalpha(static_cast&lt;unsigned char&gt;(b));
        });

        if (w_end != str.cend())
        {
            ++w_end;
        }

        if(std::isalpha(static_cast&lt;unsigned char&gt;(*first)) &amp;&amp; 
            std::distance(first, w_end) &gt; longest.size())
        {
            longest = std::string(first, w_end);
        }

        first = w_end;
    }

    return longest;
}

int main()
{
    std::string sen = "Some ,long sentence!!!!! with punctuation \t, and. all that!";

    const std::string w = LongestWord(sen);
    std::cout &lt;&lt; w &lt;&lt; "\n";
}
</code></pre></li>
</ul>
    </div>