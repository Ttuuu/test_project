<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would try to be consistent and completely switch to utilizing ES6 <code>const</code> variable declarations for those require statements for example: </p>

<pre><code>const express = require('express'); 
const bodyParser = require('body-parser');
const app = express();
</code></pre>

<p>I would not have added the MongoDB address at all. We don't want to commit that URI to Github by accident. Rather than pasting that link, you can add that address to a <code>config/keys.js</code> file that you can use to store all your secret configuration data which you can then require like so: <code>const keys = require('./config/keys');</code></p>

<p>Then you can also install and require Mongoose to help out like so: <code>const mongoose = require('mongoose');</code> and then implement <code>mongoose.connect(keys.mongoURI);</code></p>

<p>Where did I get <code>mongoURI</code> from? From your <code>config/keys.js</code> file which would look something like this:</p>

<p><code>mongoURI:'mongodb://localhost:27017'</code></p>

<p>For your ports, if you plan on pushing to production especially a service like Heroku, I would configure like so:</p>

<pre><code>if (process.env.NODE_ENV === 'production') {
  // Express will serve up production assets
  // like main.js or main.css
  app.use(express.static('client/build'));

  // Express will serve up the index.html file if
  // it doesnt recognize the route
  const path = require('path');
  app.get('*', (req, res) =&gt; {
    res.sendFile(path.resolve(__dirname, 'client', 'build', 'index.html'));
  });
}

const PORT = process.env.PORT || 5000;
app.listen(PORT);
</code></pre>
    </div>