<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hi and welcome to the site. Your code already looks quite good. However, there are still some issues beyond what @Bj√∂rn Linqvist wrote.</p>

<ol>
<li><p><code>const</code> correctness</p>

<p>This means that all variables as well as function arguments that are not mutated should be declared <code>const</code>. In addition methods that do not change the state of the object, aka pure observers should also be marked <code>const</code>. This greatly improves the ability to reason about code and helps the compiler help you. As an example</p>

<pre><code>int size() const {
    return _size;
}

T get(const int pos) const {
    return array[pos];
}
</code></pre></li>
<li><p>The latter function is an even better example as it shows that something is missing. Often inside <code>const</code> code pathes you need to access elements of the array. So you need both a <code>const</code> and a non-<code>const</code> accessor. Also you are returning a <em>copy</em> of the object. Generally, a reference is returned.</p>

<pre><code>T&amp; get(const int pos) {
    return array[pos];
}

const T&amp; get(const int pos) const {
    return array[pos];
}
</code></pre></li>
<li><p>Your <code>deleteAt</code> function is subtly incorrect.</p>

<pre><code>void deleteAt(int pos) {
    assert(0 &lt;= pos &amp;&amp; pos &lt; _size);
    _size--;
    for (int i = pos; i &lt; _size; i++) {
        array[i] = array[i + 1];
    }
}
</code></pre>

<p>Here you are shifting the elements from <code>[pos, size_ - 1]</code> to the left. However, what happens when <code>T</code> is a nontrivial type that has a destructor? The element at position <code>size_</code> is copied to position <code>size_ - 1</code> but is still <code>alive</code>. You need to explicitely call <code>std::destroy</code> here or you will get a lot of incredibly hard to debug bugs.</p></li>
<li><p>Honor conventional naming.</p>

<p>C++ has a rich ecosystem of libraries and the STL. Most of these use consistent naming conventions, e.g. <code>insert</code> rather than <code>insertAt</code>. This might not seem a big deal but other programmers will have a hard time using your code. Even worse you will have a hard time using other code as you will mix those names. </p>

<p>This is especially bad when naming contradicts expected behavior. <code>resize</code> conventionally takes a input argument that represents the size the container should have. Your <code>resize</code> method does something different so it will be highly confusing.</p></li>
<li><p>Please do not use <code>using namespace std;</code> This will at some point get you in all sorts of trouble. Maybe not with the STL but definitely when you use it with other namespaces as the actual functionality of <code>using namespace foo</code> is highly surprising. There is a reason namespaces are generally short and typing <code>std::</code> is quite easy.</p></li>
<li><p>Iterators.</p>

<p>C++ algorithm use iterators as an incredibly powerfull abstraction. You should provide <code>begin()</code> and <code>end()</code> methods. Also you should understand why you would want <code>begin()</code> and <code>begin() const</code> and <code>cbegin()</code>. </p></li>
<li><p>Algorithms. </p>

<p>C++ algorithms are incredibly powerfull and the STL is full of them. You should have a look at the algorithms and try to use them in you code (insert and erase are good candidates). I can highly recommend Connor Hoekstra and his <a href="https://www.youtube.com/watch?v=pUEnO6SvAMo" rel="nofollow noreferrer">Algorithm Intuition</a>  talk.</p></li>
</ol>
    </div>