<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Indentation</h3>

<p>First of all, format your code wisely. Do not make your main program body shifted by <strong>five levels</strong> of indentation. It makes it awfully hard to read (and review, mind you). </p>

<p>Fail early. If a condition makes the further code execution impossible - just make it throw an error and then keep writing the following code on the same level, like</p>

<pre><code>require_once 'db.php';

if(!empty($user_id)) {
    die(json_encode(['error' =&gt; 'Unauthorized']));
}
$user_id = $_SESSION['user_id'];
if(empty($_FILES['uploadedIMG']['size'])) {
    die(json_encode(['error' =&gt; 'No file uploaded']));
}
</code></pre>

<p>As you can see, here we made your code die early (but informative, so in case the code won't process the image you would have an idea why), and then continue from the same indentation level. </p>

<h3>Code pollution</h3>

<p>As you can see, I removed <strong>a lot</strong> of code from a mere few lines. It means there was a lot of code which is just useless. There are two reasons for this:</p>

<ul>
<li>What you wrote in the user id checking code could be called "defensive programming" but in reality it is not:

<ul>
<li>First of all, a defensive programming code should <strong>always raise an error</strong> if a condition is not met. While your code just silently bypasses it. So if ever a user id won't be int, you will just have no idea why your code suddenly stopped working.  </li>
<li>even a defensive programming should be justified. You can wrap every operator in a dozen conditions, but it will just make no sense. Use strict verifications only if there is a chance that a variable could be the wrong type. Assuming user_id coming from a database, I don't see how a non-empty one could be any other type than int.</li>
</ul></li>
<li>You don't take the surrounding code into consideration. For example,

<ul>
<li>you are checking the <code>$_SESSION['user_id']</code> variable twice. Why? One condition is enough, then just assign it to a variable.</li>
<li>this one is rather tricky but <code>$_FILES['uploadedIMG']['size']</code> will be empty if <code>$_SERVER['REQUEST_METHOD']</code> is not 'POST'. So it makes the latter superfluous. </li>
</ul></li>
</ul>

<p>So just remember - the more code you write, the harder it is to read and the more errors you introduce. </p>

<h3>Security</h3>

<p>Like it often happens, while trying to do "the most secure way" you are overreacting. Most of your verification code is just duplicates itself. For example, <code>getimagesize()</code> would use the same mechanism as fileinfo. So just one call is enough. </p>

<p>At the same time, there is an <strong>open vulnerability</strong>. Your web-server doesn't judge your files by whatever "mime type" but by the extension. In means that if an image file will have a .php extension, a web-server will try to run it as a PHP file, not serve it as an image file. So, security-wise all your numerous mime-type checks are rather useless while <strong>the only real protection is missing.</strong></p>

<h3>You must verify the file extension against a while list</h3>

<pre><code>$allowedExts = array('png', 'jpeg', 'jpg', 'gif');
$ext = pathinfo($name, PATHINFO_EXTENSION);
if( !in_array($ext, $allowedExts) )
{
    die(json_encode(['error' =&gt; 'invalid image format'));
}
</code></pre>

<p>this one, given you are renaming the files, will be the real protection.</p>

<h3>Innocent users' experience</h3>

<p>It is very important not to spoil the innocent users' experience in pursue for the imaginary security. And you are outright deleting a user account if their image upload failed, which is gross. Imagine your frustration as are an active member for several years who just accidentally uploaded a broken image, like sometimes our cameras produce. Then out of the blue you have your account deleted! </p>

<p>At the same time, as you admit yourself, it "don't give any protection against attackers"! The consequences are just incomparable! So this approach won't offer any real protection but could ruin the whole site. </p>

<blockquote>
  <p>There was an old short story from the great science fiction writer Robert Sheckley, "Ghost V". Arnold, the main character, was trapped in the space ship with nightmares. On one occasion, he had to keep the lights on, but but wast tricked into believe that some creatures are attacking the lights. So he shot on them and as a result shot all the lights off!</p>
</blockquote>

<p>Don't be like Arnold, do not shoot your users off only to "make an attacker's life a bit harder".</p>

<h3>Better user experience</h3>

<p>It is considered a standard to let a user know what is their fault. So don't just return an empty response but tell a user what's wrong.</p>

<pre><code>if (filesize($_FILES["uploadedIMG"]["tmp_name"]) &gt; 768000){
    die(json_encode(['error' =&gt; 'File is too big']));
}
</code></pre>

<h3>Error reporting</h3>

<blockquote>
  <p>i'm using a try/catch and this error won't appear</p>
</blockquote>

<p>Here you are outright wrong. PHP has a designated setting that prevents errors from appearing. And it should be set to OFF on a live site. While in the program code there should be no operators responsible for this task. Please refer to my article on <a href="https://phpdelusions.net/articles/error_reporting" rel="noreferrer">PHP error reporting</a> for the further explanation.</p>

<p>However, as image processing error is a deliberately recoverable error, you can just inform the user and let it go.</p>

<h3>The refactored code.</h3>

<p>To be honest, I was unable to understand the whole affair with the image name, but as far as I can tell there was an awful lot of code that is either duplicated or not used at all. So, assuming there could be just one avatar, I decided to make its name static.</p>

<pre><code>&lt;?php
require_once 'db.php';

if(!empty($user_id)) {
    die(json_encode(['error' =&gt; 'Unauthorized']));
}
$user_id = $_SESSION['user_id'];
if(empty($_FILES['uploadedIMG']['size'])) {
    die(json_encode(['error' =&gt; 'No file uploaded']));
}
//Image verifications
$size = getimagesize($_FILES["uploadedIMG"]["tmp_name"]);
if (!$size) {
    die(json_encode(['error' =&gt; 'Unrecognized file format']));
}
if (filesize($_FILES["uploadedIMG"]["tmp_name"]) &gt; 768000){
    die(json_encode(['error' =&gt; 'File is too big']));
}
$allowedExts = array('png', 'jpeg', 'jpg', 'gif');
$ext = pathinfo($name, PATHINFO_EXTENSION);
if( !in_array($ext, $allowedExts) )
{
    die(json_encode(['error' =&gt; 'invalid image format']));
}
// saving the image
$imagePath = "/user/{$_SESSION['linkN']}/avatar/avatar.$ext";
$imagickWrite = $_SERVER['DOCUMENT_ROOT'].$imagePath;
try {
    $imgk = new Imagick($_FILES["uploadedIMG"]["tmp_name"]);
    $imgk-&gt;thumbnailImage(180, 180, true);
    $imgk-&gt;writeImage($imagickWrite);
} catch (ImagickException $e){
    die(json_encode(['error' =&gt; 'Error processing the image']));
}
echo json_encode(['avatar' =&gt; $imagePath]);
</code></pre>

<p>Note that you should amend your client side code in order to make it process errors returned.</p>
    </div>