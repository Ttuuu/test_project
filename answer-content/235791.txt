<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There isn't much to add to torbondes answer except the following details:</p>

<blockquote>
<pre><code>// Check each field of the record to see if it makes a set
let colorSet   = cardList |&gt; List.map (fun c -&gt; c.Color  ) |&gt; isSet
let shapeSet   = cardList |&gt; List.map (fun c -&gt; c.Shape  ) |&gt; isSet
let patternSet = cardList |&gt; List.map (fun c -&gt; c.Pattern) |&gt; isSet
let numsSet    = cardList |&gt; List.map (fun c -&gt; c.Number ) |&gt; isSet

// Check that they all make a set
colorSet &amp;&amp; shapeSet &amp;&amp; patternSet &amp;&amp; numsSet
</code></pre>
</blockquote>

<p>In the above you actually evaluate all properties of the cards before returning the result by "and-ing" them. The <code>&amp;&amp;-operator</code> evaluates from left to right, so if <code>colorSet = false</code> then the values of the others are skipped and so on. Therefore it would be an optimaization if you only caculate each property if needed. To do that, you could make each of the <code>xxxSet</code> bindings be functions instead as in:</p>

<pre><code>// Check each field of the record to see if it makes a set
let colorSet _ = cardList |&gt; List.map (fun c -&gt; c.Color  ) |&gt; isSet
let shapeSet _ = cardList |&gt; List.map (fun c -&gt; c.Shape  ) |&gt; isSet
let patternSet _ = cardList |&gt; List.map (fun c -&gt; c.Pattern) |&gt; isSet
let numsSet _ = cardList |&gt; List.map (fun c -&gt; c.Number ) |&gt; isSet

// Check that they all make a set
colorSet() &amp;&amp; shapeSet() &amp;&amp; patternSet() &amp;&amp; numsSet()
</code></pre>

<p>Here each property set is only called if the preceding set are true.</p>

<hr>

<p>Another optimization would be to put the repeated code <code>cardList |&gt; List.map (fun c -&gt; c.Color  ) |&gt; isSet</code> into a function:</p>

<pre><code>let isValid selector = cardList |&gt; List.map selector |&gt; isSet
</code></pre>

<p>and then call it as:</p>

<pre><code>// Check each field of the record to see if it makes a set
let checkColors _ = isValid (fun c -&gt; c.Color)
let shapeSet _ = isValid (fun c -&gt; c.Shape)
let patternSet _ = isValid (fun c -&gt; c.Pattern)
let numsSet _ = isValid (fun c -&gt; c.Number)

// Check that they all make a set
checkColors () &amp;&amp; shapeSet () &amp;&amp; patternSet () &amp;&amp; numsSet ()
</code></pre>

<p>... or simply just do:</p>

<pre><code>let compare card1 card2 card3 =
    // Put the cards together for easy iteration
    let cardList = [card1; card2; card3]

    let isValid selector = cardList |&gt; List.map selector |&gt; isSet

    // Check each field of the record to see if it makes a set
    isValid (fun c -&gt; c.Color)
    &amp;&amp; isValid (fun c -&gt; c.Shape)
    &amp;&amp; isValid (fun c -&gt; c.Pattern)
    &amp;&amp; isValid (fun c -&gt; c.Number)
</code></pre>

<hr>

<p>Yet another optimization could be to only run through the cards once and collect the properties in sets by using <code>List.fold</code> and the <code>Set</code> type instead of a <code>List</code>:</p>

<pre><code>let compare cards =
    let length = cards |&gt; List.length // Optimization because List.length is an O(n) operation

    let isValid s = s |&gt; Set.count = 1 || s |&gt; Set.count = length

    cards 
    |&gt; List.fold (
        fun (clrs, shps, pats, nums) card -&gt; 
            clrs |&gt; Set.add card.Color,
            shps |&gt; Set.add card.Shape,
            pats |&gt; Set.add card.Pattern,
            nums |&gt; Set.add card.Number
            ) (Set.empty, Set.empty, Set.empty, Set.empty)
    |&gt; fun (c, s, p, n) -&gt; isValid c &amp;&amp; isValid s &amp;&amp; isValid p &amp;&amp; isValid n
</code></pre>

<p>The benefit of using <code>Set</code> instead of <code>List</code> is that it is <code>distinct</code> by design, so it's sufficient to directly check if the set contains one or three elements. </p>

<p>That said I would prefer torbondes more static approach because the number of cards and properties aren't likely to change.</p>
    </div>