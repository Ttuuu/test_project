<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Towards better performance and code organization</h3>

<p>The list of required fields is better defined as <code>const</code> at top level:</p>

<pre><code>const requiredFields = ["code", "name", "pricings"];
</code></pre>

<p>There are 2 negative outcomes that can be combined and checked at once:
1) if the <code>response</code> is not of <code>Array</code> type, 2) if it's empty array. The <em>Consolidate conditional expression</em> technique is applied.</p>

<pre><code>if (!Array.isArray(resp) || !resp.length) {
    return false;
}
</code></pre>

<p>Instead of getting list of keys for each object in <code>response</code> array with <code>var keys = Object.keys(obj)</code> - the more efficient and faster way is to just apply <code>obj.hasOwnProperty(el)</code> to check if an object <code>obj</code> has required field <code>el</code> as a key.<br>
All the rest "movements" in the initial approach are redundant and eliminated.</p>

<hr>

<p>The final optimized approach:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function checkResponseApi(resp, mustHave) {     
    if (!Array.isArray(resp) || !resp.length) {
    	return false;
    }
    return resp.every(obj =&gt; {
        return mustHave.every(el =&gt; obj.hasOwnProperty(el))
    });
}

let arr = [
    {"code": "X", "name": "Product A", "pricings": []},
    {"code": "Y", "name": "Product B", "pricings": []},
    {"code": "Z", "name": "Product C", "pricings": []}
];
const requiredFields = ["code", "name", "pricings"];


if (checkResponseApi(arr, requiredFields)) {
    console.log('Ok')
} else {
    console.log('Bad response')
}</code></pre>
</div>
</div>

    </div>