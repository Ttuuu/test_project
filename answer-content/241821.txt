<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few quick notes on newGen(). The main one is you're calling getNeighbours twice in the cell-was-alive case, meaning you're doing double the work to count them when the value can't change. So you should only call it once and save the result in a variable, and since you're going to need the count in all cases so you can do it once before the <code>if</code>:</p>

<pre><code>    for (int j = 0; j &lt; height; j++) {
        for (int i = 0; i &lt; width; i++) {
            int neighbours = getNeighbours(j, i);
</code></pre>

<p>I'd then continue with the 'alive' case since it's the 'true' case, but that doesn't really matter. Sticking with what you had, this becomes</p>

<pre><code>            if (grid[j][i] == false) {
                // new life, due to having 3 neighbours!
                if (neighbours == 3) {
                    nGrid[j][i] = true;
                }
            } else {
                // isolation death!
                if (neighbours &lt;= 1) {
                    nGrid[j][i] = false;
                }
                // overcrowing death!
                if (neighbours &gt;= 4) {
                    nGrid[j][i] = false;
                }
            }
</code></pre>

<p>But as it stands you're copying the grid and then setting or resetting it for changes whereas we do explicitly know whether each cell is dead or alive in the conditions. If we change this to:</p>

<pre><code>            if (grid[j][i] == false) {
                // new life, due to having 3 neighbours!
                if (neighbours == 3) {
                    nGrid[j][i] = true;
                } else {
                    // still dead
                    nGrid[j][i] = false;
                }
            } else {
                // isolation death!
                if (neighbours &lt;= 1) {
                    nGrid[j][i] = false;
                } else if (neighbours &gt;= 4) {
                    // overcrowing death!
                    nGrid[j][i] = false;
                } else {
                    // still alive
                    nGrid[j][i] = true;
                }
            }
</code></pre>

<p>then we're always setting the cell in nGrid, meaning you no longer need to copy the old grid: you can just allocate an empty array instead.</p>

<pre><code>    // in newGen(), replacing the call to makeCopy()
    boolean[][] nGrid = new boolean[height][width];
</code></pre>

<p>Or we could simplify this condition further:</p>

<pre><code>            if (grid[j][i] == false) {
                // new life if 3 neighbours, else dead
                nGrid[j][i] = (neighbours == 3);
            } else {
                // still alive if 2 or 3 neighbours, else dead
                nGrid[j][i] = (neighbours == 2) || (neighbours == 3);
            }
</code></pre>

<p>or even flipping the logic slightly:</p>

<pre><code>            // New cell is alive if it has three neighbours, regardless whether it was
            // dead or alive before, or if it was already alive and has two neighbours.
            nGrid[j][i] = (neighbours == 3) || (grid[j][i] &amp;&amp; (neighbours == 2));
</code></pre>

<p>although I appreciate the previous way is a clearer statement of the rules.</p>
    </div>