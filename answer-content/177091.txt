<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Basically after reading over the code, I interpret that the conditional (i.e. <code>!obj[key].push</code>) checks if the value at the given <code>key</code> is not an array. A more robust way to do that is to use (the negated value of) <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray" rel="nofollow noreferrer"><code>Array.isArray()</code></a> instead. That may not be any shorter, but perhaps a better way to determine if the property at <code>key</code> is an array.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var obj={a:1,b:[1,2]}

function add(key,value){
  if(!Array.isArray(obj[key])){
    obj[key]=[obj[key]]
  }
  obj[key].push(value)
}
add('a',3);
console.log(obj);</code></pre>
</div>
</div>

<p>It would be difficult to prevent the re-assignment of the property <code>.push</code> (see example below). <code>.push</code> could be assigned to something other than a function, like an integer, string or object, or a function that does something other than push the supplied argument on the array.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var obj={a:1,b:[1,2]}

function add(key,value){
  if(!obj[key].push){
    obj[key]=[obj[key]]
  }
  obj[key].push(value)
}
obj.b.push = undefined;
add('b',3);
console.log(obj);</code></pre>
</div>
</div>

<h3>Edit</h3>
<p><a href="https://codereview.stackexchange.com/users/21444/insertusernamehere">insertusernamehere</a> made <a href="https://codereview.stackexchange.com/questions/177090/if-non-array-property-exists-convert-it-to-one-and-push-new-value/177091#comment335994_177091">a good point in a comment</a>: Perhaps it would be wise to guard against the case where the <code>obj[key]</code> is <code>undefined</code>. The current code would add that to the array, which is likely not preferable.</p>
<p>There are multiple ways to achieve this, including calling <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" rel="nofollow noreferrer"><code>obj.hasOwnProperty()</code></a>, checking the array returned by <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" rel="nofollow noreferrer"><code>Object.keys(obj)</code></a> does <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" rel="nofollow noreferrer">include</a> <code>key</code>, etc.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var obj={a:1,b:[1,2]}

function add(key,value){
  if (!Object.hasOwnProperty(key)) {
      obj[key]=[];
  }
  if(!Array.isArray(obj[key])){
    obj[key]=[obj[key]]
  }
  obj[key].push(value)
}
add('a',3);
add('c',4);
console.log(obj);</code></pre>
</div>
</div>

    </div>