<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few comments:</p>

<p>1)  You don't need the <code>new</code> keyword to use <code>RegExp</code>:</p>

<pre><code>regexp = RegExp(text, 'i');
</code></pre>

<p>2) The ternary operator can be used as an expression anywhere, such as an assignment. Use <code>textContent</code> instead of <code>text</code>. Then you can use the regex <code>test</code> method which returns a boolean:</p>

<pre><code>node.parentNode.style.display = node.textContent.test(regexp) ? 'block' : 'none';
</code></pre>

<p>Since this becomes a bit too long of a line, it would be better to cache the condition:</p>

<pre><code>var mustShow = regexp.test(node.textContent);
node.parentNode.style.display = mustShow ? 'block' : 'none';
</code></pre>

<p>4) Finally, use <code>addEventListener</code> instead of the <code>onevent</code> properties. If you don't need to support ancient browsers, use the <code>input</code> event:</p>

<pre><code>searchField.addEventListener('input', handler);
</code></pre>

<p>With a couple more edits, this is how it would look like:</p>

<pre><code>;(function() {
  var searchField = document.getElementById('filter');

  var handler = function() {
    var nodes = document.getElementsByClassName('phase'),
        regexp = RegExp(searchField.value, 'i');

    for (var i = 0; i &lt; nodes.length; i++) {
      var node = nodes[i];
      var mustShow = regexp.test(node.textContent);
      node.parentNode.style.display = mustShow ? 'block' : 'none';
    }
  };

  searchField.addEventListener('input', handler);
}());
</code></pre>
    </div>