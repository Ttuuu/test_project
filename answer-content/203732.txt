<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<p>You misspelled <code>pickSalaryData</code>. That’s a poor start.</p>

<p>I will bet a day’s pay that none of your <code>findAll</code> methods will ever return <code>null</code>. Assuming that’s the case, don’t check for <code>null</code>. It’s confusing and makes the code harder to read. And if they can remove <code>null</code>, then they shouldn’t.</p>

<p>Don’t use <code>null</code> values when you can use empty collections and loop zero times.</p>

<p>Don’t check if something is size zero to skip a loop that wouldn’t do anything if the size is zero.</p>

<p>Minimize the amount of code inside a <code>try-catch</code> block where possible.</p>

<p>Don’t write code to look like a giant <code>&gt;</code> sign. Use guard clauses. Instead of</p>

<pre><code>if (condition) {
    // lots of nested code
} else {
    throw new MyException();
}
</code></pre>

<p>prefer </p>

<pre><code>if (!condition) {
    throw new MyException();
}
// lots of code
</code></pre>

<p><code>!isEmpty</code> is easer to read than <code>size() &gt; 0</code>.</p>

<p>Your logic for saving salary reports is very messy and can be cleaned up. It can definitely be broken out into a method. Likewise for saving salary details.</p>

<p>It’s unclear why you need to manually batch your writes. Any reasonable ORM should handle that for you. I’ll assume it’s necessary for some reason, but it really shouldn’t be.</p>

<p>Your variable names are all confusing. <code>COMMIT_COUNT</code> should be <code>BATCH_SIZE</code>. <code>salaryDetailReport</code> might be more clearly named <code>reportsToSave</code>. <code>salaryDetail</code> should be <code>salaryDetailReport</code>. All of your names are of a different type than the name they have. It’s very important that this gets fixed.</p>

<p>Adding a <code>SalaryDetail</code> constructor that takes a <code>SalaryDetailReport</code> might be nice.</p>

<p>If you have a <code>Logger</code>, don’t write to <code>System.out</code>.</p>

<p>The <code>Logger</code> will print the stack trace correctly if you pass the exception in. You don’ t need to print it separately.</p>

<h1>Exception Handling</h1>

<p><code>MyExceptionHandler</code> is something that <em>handles</em> exceptions. You have a <code>MyException</code>.</p>

<p>You’re not handling the expected <code>Exception</code> when doing the final <code>save</code> of the salary detail report.</p>

<p>Don’t catch <code>Exception</code> when you can catch a more specific exception type. Don’ throw <code>Exception</code> when you can throw a more specific exception type.</p>

<p>When logging an <code>Exception</code> always include the stack trace.</p>

<p>You’re not stopping the transaction if saving the salary report details fails, or if the pick salary data call fails.</p>

<p>When there’s an underlying exception, it’s nice to include it when constructing <code>MyException</code>.</p>

<p>You’re throwing, catching, and creating a lot of exceptions. By the contract, sometimes <code>pickSalaryData</code> fails with an exception, and sometimes it returns <code>false</code>. In practice, though, all exceptions are handled and the code returns <code>true</code> or <code>false</code>. Take the <code>throws</code> out of the method declaration.</p>

<p>Several of your <code>catch</code> blocks are just to log a message. Make sure you really need those messages to help identify where a problem is. If not, you can remove the catch block and just let the exception percolate up.</p>

<p>There’s no functional difference in your code between a <code>MyException</code> and an <code>Exception</code>. It would be best if you could make everything a <code>MyException</code> and deal with that. If not, you can at least take advantage of Java’s ability to handle multiple exception types in a single <code>catch</code> clause.</p>

<p>If you were to make all the modifications I suggest, your code might look something like:</p>

<pre><code>public boolean pickSalaryData(final String yearMonth, final String regionId, final String circleId, final Userdetail loginUser) {
    final String tableSuffix = yearMonth.substring(4, 6) + yearMonth.substring(0, 4);

    this.log.info("Pick Salary Data From ERP " + DateUtility.dateToStringDDMMMYYYY(new Date()));
    final List&lt;SalaryDetailReport&gt; detailReports = this.hRMSPickSalaryDataDAO.findAll(yearMonth, regionId, circleId);

    final TransactionDefinition transactionDefinition = new DefaultTransactionDefinition();
    final TransactionStatus transaction = this.transactionManager.getTransaction(transactionDefinition);
    try {
        if (detailReports.isEmpty()) {
            throw new MyException("No record for Save in Database from ERP.");
        }

        this.saveSalaryReports(detailReports, tableSuffix, loginUser);
        this.salaryDetailReportDAO.update(tableSuffix, regionId, circleId);

        this.saveSalaryDetails(tableSuffix, regionId, circleId);
        this.salaryDetailDAO.updateEarningDeduction(tableSuffix);

        this.transactionManager.commit(transaction);

        try {
            this.hRMSPickSalaryDataDAO.update(regionId, circleId, yearMonth);
        } catch (final Exception e) {
            this.log.error("Error Occured while updating XXMPCD_SALARY_DETAIL_TABLE  : ", e);
            throw e;
        }

        return true;

    } catch (final Exception e) {
        this.transactionManager.rollback(transaction);
        this.log.error("Failed to Save Salary data  :" + e.getMessage(), e);
        return false;
    }
}

private void saveSalaryReports(
        final List&lt;SalaryDetailReport&gt; detailReports,
        final String tableSuffix,
        final Userdetail loginUser)
                throws Exception {

    final List&lt;SalaryDetailReport&gt; reportsToSave = new ArrayList&lt;&gt;(BATCH_SIZE);
    for (final SalaryDetailReport detailReport : detailReports) {
        reportsToSave.add(detailReport);
        if (reportsToSave.size() % BATCH_SIZE == 0) {
            this.saveReports(reportsToSave, tableSuffix, loginUser);
            reportsToSave.clear();
        }
    }
    this.saveReports(reportsToSave, tableSuffix, loginUser);
}

private void saveReports(final List&lt;SalaryDetailReport&gt; reportsToCommit, final String tableSuffix, final Userdetail loginUser) {
    try {
        this.salaryDetailReportDAO.save(reportsToCommit, tableSuffix);
        this.reportHistoryDAO.save(reportsToCommit, loginUser);
    } catch (final Exception e) {
        this.log.error("Error on Save Salary Pay Head Details Data from ERP to Prayas .", e);
        throw e;
    }
}

private void saveSalaryDetails(final String tableSuffix, final String regionId, final String circleId)
        throws MyException {

    final List&lt;SalaryDetailReport&gt; reports = this.salaryDetailReportDAO.findAll(tableSuffix, regionId, circleId);
    if (reports.isEmpty()) {
        this.log.error("Salary Record Not Found.");
        throw new MyException("No record Found.");
    }
    this.log.debug("data found");

    for (final SalaryDetailReport salaryDetail : reports) {
        this.salaryDetailDAO.save(new SalaryDetail(salaryDetail), tableSuffix);
    }
}
</code></pre>
    </div>