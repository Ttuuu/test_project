<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some improvement, but there's still more :)</p>

<h2>Don't semicolon-delimit statements</h2>

<pre><code>self.window = super(); self.window.__init__()
</code></pre>

<p>There's nearly never a good reason to do this. Just use two lines.</p>

<h2>.ini support</h2>

<p><a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">https://docs.python.org/3/library/configparser.html</a> is what you should be using instead of manual parsing for an actual .ini file.</p>

<h2>Inline functions</h2>

<p>Your <code>writeDefaults</code> is a closure: it's a function that can access the variables in the scope of its parent function. There are some scenarios where that's called for, but this isn't one of them. You're better off moving it to a <code>write_defaults</code> (Python doesn't recommend camelCase) on the class. If there is any state it requires to function, such as <code>default_settings</code>, put that either in the function itself or as a member of the class.</p>

<h2><code>None</code> comparison</h2>

<p>This:</p>

<pre><code>if value != None: value = str(value)
</code></pre>

<p>should be</p>

<pre><code>if value is not None:
    value = str(value)
</code></pre>

<h2>f-strings</h2>

<p>...are great, but there's a limit to the amount of stuff that you should actually do in interpolation blocks. This:</p>

<pre><code>                formatted_content = (
                                     f'''{key}{

                                     '=' if not
                                     value.isspace()
                                     else ''

                                     }{value}'''

                                     + '\n'
                                    )
</code></pre>

<p>should really just set a variable first, and invert its logic, i.e.</p>

<pre><code>sep = '' if value.isspace() else '='
formatted_content = f'{key}{sep}{value}\n'
</code></pre>

<p>...but that all goes away when you use <code>configparser</code>.</p>

<h2>List literals</h2>

<p>This:</p>

<pre><code>[].append(formatted_content)
</code></pre>

<p>should be</p>

<pre><code>[formatted_content]
</code></pre>

<h2>Casting to bool</h2>

<p>In this context there's no need:</p>

<pre><code>if not bool(f.tell()):
</code></pre>

<p>simply write</p>

<pre><code>if not f.tell():
</code></pre>

<h2>Use <code>split</code></h2>

<pre><code>j.lower()[:j.find('=')] == i:
</code></pre>

<p>should be</p>

<pre><code>j.lower().split('=', 1)[0] == i:
</code></pre>
    </div>