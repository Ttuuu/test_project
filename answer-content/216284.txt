<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can make a 'getter' method for <code>$twig</code> in your base controller, like this:</p>

<pre><code>class Base {
    private $twig;

    public function __construct(\Twig_Environment $twig) 
    {
        $this-&gt;twig = $twig;
    }

    public function getTwig()
    {
      return $this-&gt;twig;
    }

}
</code></pre>

<p>This would make the <code>getTemplate()</code> method look like this:</p>

<pre><code>public function getTemplate() {
    return $this-&gt;getTwig()-&gt;render('/templates/welcome.html', array());
}
</code></pre>

<p>Or you could make <code>$twig</code> <em>protected</em> instead of <em>private</em>. See: </p>

<p><a href="https://www.php.net/manual/en/language.oop5.visibility.php" rel="nofollow noreferrer">https://www.php.net/manual/en/language.oop5.visibility.php</a></p>

<p>Your code is far from complete, and so my answer is too. There may be other ways to do things. Always keep in might that ownership of classes should guide your decisions. For instance, if you don't own the twig class you could use the base controller to interface with it. In that case you would not make a getter for <code>$twig</code>, but implement a method for <code>render()</code>, inside the base controllor, which can be used by extended classes. That way you will only ever need to change the base controller if the twig class changes.</p>
    </div>