<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance</h2>

<p>As mentioned in the original question, my code is SLOW. It takes 1500ms to calculate approximately 30 moves.</p>

<p>This is way too slow for this code to be used in a chess engine. Chess engines (A.I.) need to be able to calculate hundreds of thousands of moves or more per second.</p>

<p>I installed WAMPP (Apache + PHP) on my computer, installed XDebug, loaded my chess game with the profiler on, then viewed the profiler log in QCacheGrind.</p>

<h2>Biggest performance gain (-942ms)</h2>

<p>I was expecting something like the <code>ChessSquare</code> class to be the slowest, because it is created so many times. But the results were very surprising. 45% of the calculation time is being spent on calculating the FEN for every chessboard created. (The FEN is a string that summarizes that particular chessboard's position in text format.)</p>

<p><a href="https://i.stack.imgur.com/3yz3R.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/3yz3R.png" alt="Screenshot of Xdebug profiler"></a></p>

<p>This is NOT what I expected to be taking the majority of the calculation time. And it's easy to refactor the code to only calculate the FEN about 30 times (instead of the 6,775 times in the screenshot).</p>

<p>I deleted the <code>ChessBoard-&gt;fen</code> variable, then I deleted most of the calls to <code>update_fen</code> and <code>get_fen</code>. By not having to keep the <code>ChessBoard-&gt;fen</code> variable up to date every single time the <code>ChessBoard</code>'s internal variables change, we save a lot of calculations.</p>

<ul>
<li>Original Code: 1529 ms</li>
<li>New Code: 587ms</li>
</ul>

<p>As you can see, this modification has made the code 2.6x faster.</p>

<h2>Second biggest performance gain (-306 ms)</h2>

<p>I kept tinkering with the code and realized that I do not need to place the entire <code>ChessBoard</code> in each move, if the move we are generating is a second layer move (just used to get threatened squares). I refactored the constructor of the <code>ChessMove</code> class and wrapped some of the <code>$board</code> stuff in a conditional.</p>

<pre><code>function __construct(
    $starting_square,
    $ending_square,
    $color,
    $piece_type,
    $capture,
    $old_board,
    $store_board = TRUE
) {
    $this-&gt;starting_square = $starting_square;
    $this-&gt;ending_square = $ending_square;
    $this-&gt;color = $color;
    $this-&gt;piece_type = $piece_type;
    $this-&gt;capture = $capture;

    // These cases are rare. The data is passed in via set functions instead of in the constructor.
    $this-&gt;disambiguation = '';
    $this-&gt;promotion_piece_type = NULL;
    $this-&gt;en_passant = FALSE;
    $this-&gt;check = FALSE;
    $this-&gt;checkmate = FALSE;

    if ( $store_board ) {
        $this-&gt;board = clone $old_board;
        $this-&gt;board-&gt;make_move($starting_square, $ending_square);

        $this-&gt;possibly_remove_castling_privileges();

        $this-&gt;if_castling_move_rook();
    }
}
</code></pre>

<p>This shaved off 306 ms. Awesome!</p>

<p>Current load time: 281 ms</p>

<h2>Other optimizations (-150 ms)</h2>

<ul>
<li>Use <code>$haystack[needle]</code> instead of <code>array_search($needle, $haystack)</code>.</li>
<li>Simplify <code>square_exists_and_not_occupied_by_friendly_piece</code>. I don't need to compare it to a giant array of legal squares. I just need to check that <code>$rank</code> and <code>$file</code> are <code>&gt;= 1</code> and <code>&lt;= 8</code>.</li>
<li>Move certain arrays to constants (mentioned in Sam Onela's answer), especially since they are currently inside of loops.</li>
<li>Delete <code>ChessMove-&gt;notation</code> and <code>ChessMove-&gt;coordinate_notation</code>, and use a getter instead. That way we don't need to update them every time <code>ChessMove</code>'s internal variables change.</li>
<li>Delete <code>Dictionary</code> and use constants and array functions instead.</li>
<li>Replaced <code>if ( is_a($square, 'ChessPiece') )</code> with <code>if ( $square )</code></li>
</ul>

<p>Current load time: 131 ms</p>
    </div>