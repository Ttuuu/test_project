<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Use class constants to store values that will remain the same and are unchangeable</strong></p>

<p>Your HTTP method verbs are better off set as class constants than class properties since they will remain the same and are unchangeable. (i.e. <em>constant</em>)</p>

<pre><code>private $POST = 'POST';
private $PUT = 'PUT';
private $GET = 'GET';
private $DELETE = 'DELETE';
private $PATCH = 'PATCH';
</code></pre>

<p>becomes</p>

<pre><code>const POST = 'POST';
const PUT = 'PUT';
const GET = 'GET';
const DELETE = 'DELETE';
const PATCH = 'PATCH';
</code></pre>

<p>You can then refer to them using <code>self</code></p>

<pre><code>self::POST
</code></pre>

<p><strong>No need for an empty constructor</strong></p>

<p>If your contractor doesn't have any code in it you could, and should omit it. It's just noise otherwise. You can always add it if the constructor definition changes.   </p>

<p><strong>Be sure to use docblock comments for your class properties</strong>    </p>

<p>Not just class methods should have well written docblock comments, so should your class properties.</p>

<pre><code>/**
 * @var string The body of the HTTP request
 */
private $body; 
</code></pre>

<p><strong>Follow PSR coding standards</strong>    </p>

<p>The PSR coding standards exist to ensure a high level of technical interoperability between shared PHP code. They also ensure conformity for projects with multiple developers. </p>

<p><a href="https://www.php-fig.org/psr/psr-2/" rel="nofollow noreferrer">PSR-2 </a> says that:</p>

<blockquote>
  <p>Opening braces for classes MUST go on the next line, and closing braces MUST go on the next line after the body.
  and
  Opening braces for methods MUST go on the next line, and closing braces MUST go on the next line after the body.</p>
</blockquote>

<pre><code>Class HttpRequest{
</code></pre>

<p>becomes</p>

<pre><code>Class HttpRequest
{
</code></pre>

<p>and </p>

<pre><code>public function post($url, $header, $options, $body){
</code></pre>

<p>becomes</p>

<pre><code>public function post($url, $header, $options, $body)
{
</code></pre>

<p><strong>Use type hinting to variable types in class methods</strong>    </p>

<p>From <a href="http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration" rel="nofollow noreferrer">the manual</a>:</p>

<blockquote>
  <p>Type declarations allow functions to require that parameters are of a certain type at call time. If the given value is of the incorrect type, then an error is generated</p>
</blockquote>

<p>To use your code as an example, you can declare that <code>$url</code> must be a string and <code>$header</code> and <code>$options</code> must be arrays. This will be enforced by PHP at run time and prevent obvious and non obvious errors from occurring.</p>

<pre><code>public function get($url,$header=array(), $options=array()){
</code></pre>

<p>becomes</p>

<pre><code>public function get(string $url, array $header=[], array $options=[])
{
</code></pre>

<p>(I used shortened array syntax <code>[]</code> versus the more verbose <code>array()</code> for brevity.)    </p>

<p><strong>Use return type declarations</strong></p>

<p>Just like you can enforce that class method parameters are a certain data type, you can also enforce the value returned by that method is a certain data type. Since all of your methods are stubs I'll pretend your <code>HttpRequestget()</code> method returns a Boolean to use as an example.</p>

<pre><code>public function get(string $url, array $header=[], array $options=[]): bool
{
</code></pre>

<p>Now my calling code will know that a Boolean, and only a Boolean value, will be returned by that method.    </p>

<p><strong>When doing comparisons use === whenever possible</strong></p>

<p>Unlike <code>==</code> which compares values only, <code>===</code> compares both values and <em>type</em>. This strict comparison helps to avoid error, and attacks, that occur when PHP encounters a comparison of two variables of different types it will coerce one of the variables into the type of the other variable in order to do the comparison.</p>

<p>For example</p>

<pre><code>1 == '1'  // true
1 === '1' // false
</code></pre>

<p>How much does this matter? It depends. If you get into a situation where you are getting numbers as strings but you are trying to use them as numbers, for something like sorting, you can get unexpected results if your check only checks value instead of type. And those of us who remember phpBB remember when it was subject to a slew of high profile vulnerabilities many of which were resolved simply by using a stricter comparison. So, yes, it matters.   </p>
    </div>