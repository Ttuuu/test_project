<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can optimize a bit by make it possible to step out of the first outer loop if the inner <code>foreach</code>-loop doesn't make any changes to <code>dist</code> in one iteration.</p>

<hr>

<p>Wouldn't it be possible to test for <code>maxWait</code> whenever you update <code>dist[v]</code> in the <code>foreach</code>-loop:</p>

<pre><code>{
    dist[v] = dist[u] + w;
    maxWait = Math.Max(maxWait, dist[v]);
}
</code></pre>

<p>This may og may not be an optimization - depending on the cost of comparing two integers potentially <code>N * N</code> times compared to the cost of an extra loop comparing them <code>N-1</code> times?</p>

<hr>

<p>You could make an early return in the find-max-loop:</p>

<pre><code>       int maxWait = 0;
        for (int i = 1; i &lt;= N; i++)
        {
          maxWait = Math.Max(maxWait, dist[i]);

          if (maxWait == int.MaxValue)
          {
            return -1;
          }
        }
</code></pre>

<p>or change it to:</p>

<pre><code>int maxWait = dist.Skip(1).Max();
return maxWait &lt; int.MaxValue ? maxWait : -1;
</code></pre>
    </div>