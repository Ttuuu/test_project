<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The only difference in your <code>if</code>/<code>else</code>s looks to be the function you pass to <code>this.chartData.reduce</code>. Everything else is the same, so you can create an object of functions indexed by the <code>newv</code>, and look up the appropriate one to pass.</p>

<p>You can also construct an array of values and an array of keys immediately by using <code>Object.keys</code> and <code>Object.values</code>:</p>

<pre><code>tab (newv, oldv) {
  // you could also define this object elsewhere if you wanted
  const reducersByNewv = {
    by_time: this.monthReducer,
    by_sellers: this.sellerReducers,
    by_category: this.categoryReducer,
    by_product: this.productReducer
  };
  this.reducerResult = this.chartData.reduce(reducersByNewv[newv], {});
  this.tabCategory = Object.keys(this.reducerResult);
  this.amount = Object.values(this.reducerResult);
  this.updateChart(this.tabCategory, this.amount);
  // updatechart garne
}
</code></pre>

<p>It also looks like you aren't actually using the <code>reducerResult</code>, <code>tabCategory</code>, or <code>amount</code> anywhere else. If that's true, standalone, function-scoped variables would be more appropriate than assigning to the instance:</p>

<pre><code>tab (newv, oldv) {
  const reducersByNewv = {
    by_time: this.monthReducer,
    by_sellers: this.sellerReducers,
    by_category: this.categoryReducer,
    by_product: this.productReducer
  };
  const reducerResult = this.chartData.reduce(reducersByNewv[newv], {});
  const tabCategory = Object.keys(reducerResult);
  const amount = Object.values(reducerResult);
  this.updateChart(tabCategory, amount);
  // updatechart garne
}
</code></pre>
    </div>