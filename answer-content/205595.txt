<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>struct Point</code></h1>

<p>The constructor could be omitted, with small changes to the calling code:</p>

<pre><code>openList.push_back({0,0,0});

        openList.push_back({y+jump, x, depth+1});

        openList.push_back({y, x+jump, depth+1});
</code></pre>

<h1><code>struct grid_t</code></h1>

<p><code>height</code> and <code>width</code> are redundant.</p>

<p>A better structure would use a single vector of <code>height</code> Ã— <code>width</code> elements, to give better locality of reference.  Consider providing an <code>operator()(std::size_t x, std::size_t y)</code> to index it.</p>

<p>Instead of reading unconditionally from <code>std::cin</code>, allow user to specify a stream (don't forget <code>explicit</code>!).  And throw an exception if reading fails - at present, a partially-read grid will be filled with zeros, without any indication of failure.</p>

<h1><code>go_find_it()</code></h1>

<p>Consider working backwards: from the target point to the starting point.  There will be much more opportunity for pruning at each step if we only need to consider the valid jumps that land exactly on the current square.</p>
    </div>