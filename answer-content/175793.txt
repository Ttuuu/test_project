<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all: how big is this document? If you're not expecting it to be big, you may want to use <a href="https://godoc.org/golang.org/x/net/html#Parse" rel="nofollow noreferrer">html.Parse</a> instead of a tokenizer - that way, you'll get the whole document in a tree and would be able to iterate over children of your div when found, which should make the whole thing simpler.</p>

<p>Your current approach is streaming, which conserves memory, but you are making the assumption that the div with the class <code>project-title</code> will always contain just text. What if the document looks like this:</p>

<pre><code>&lt;div class="project-title"&gt;&lt;div&gt;not title&lt;/div&gt;title&lt;/div&gt;
</code></pre>

<p>or this</p>

<pre><code>&lt;div class="project-title"&gt;&lt;/div&gt;&lt;div&gt;wrong title&lt;/div&gt;
</code></pre>

<p>In the first case, "not title" would be added. In the second, "wrong title" would be added.</p>

<hr>

<p>Assuming you want to keep your logic as-is, let's move on the review!</p>

<p>A few general tips:</p>

<ul>
<li>Always put string literals on top as constants (e.g. <code>const className = "project-title"</code>).</li>
<li>You don't need to name your return values unless you see a need.</li>
<li>While Go values brevity, <code>z</code> is (almost) never a good variable name.</li>
<li>Most of the comments don't add any value (e.g. "Check if the token is an &lt;div&gt; tag").</li>
</ul>

<p>Some specific things:</p>

<ul>
<li><p>In <code>isImageDiv</code>, you don't need a separate <code>if</code> block. You also don't need to name the return value, which actually simplifies your code in this case. Finally, you should also check if the element is a div - that way, you needn't do it in <code>crawl</code>:</p>

<pre><code>func isImageDiv(token html.Token) bool {
    if token.Data != "div" {
        return false
    }
    for _, a := range token.Attr {
        if a.Key == "class" &amp;&amp; a.Val == "project-title" {
            return true
        }
    }
    return false
}
</code></pre></li>
<li><p><code>getLabel</code> seems too simple to have a need to exist.</p></li>
<li><p>In <code>crawl</code>, you shouldn't use <code>fmt.Println</code>. Instead, return an <code>error</code>, the same way <code>http.Get</code> returns it. Let the caller handle it.</p></li>
<li><p>In <code>crawl</code>, you can simplify the <code>switch</code> a lot - <code>continue</code> is not really needed and we made our <code>isImageDiv</code> function do the div check as well:</p>

<pre><code>switch tt {
case html.ErrorToken:
    return
case html.StartTagToken:
    if isImageDiv(z.Token()) {
        readText = true
    }
case html.TextToken:
    if readText {
        *foundLabels = append(*foundLabels, getLabel(z))
        readText = false
    }
}
</code></pre></li>
<li><p>In <code>main</code>, you don't need to use <code>make</code> for a slice since the default value for a slice is an empty slice (you can just define it as <code>var foundLabels []string</code> and it will just work). Also, you shouldn't pass the slice as a pointer - slices are passed by reference anyway (not really, but due to <a href="https://blog.golang.org/go-slices-usage-and-internals" rel="nofollow noreferrer">the nature of how they work</a>, they're already pointers). Make sure you change your <code>crawl</code> function as well after that.</p></li>
</ul>
    </div>