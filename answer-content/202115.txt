<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>class OutofRange {
    std::string error = "The index is out of range.";
public:
    OutofRange() {}
</code></pre>

<p>If no user-declared constructors of any kind are provided for a class type (<code>struct</code>, <code>class</code>, or <code>union</code>), the compiler will always declare a <a href="https://en.cppreference.com/w/cpp/language/default_constructor" rel="nofollow noreferrer">default constructor</a> as an <code>inline public</code> member.  If that implicitly-declared default constructor is <a href="https://en.cppreference.com/w/cpp/language/definition#ODR-use" rel="nofollow noreferrer">odr-used</a>, then the compiler will implicitly provide a definition with the same effect as a user-defined constructor with an empty body and empty initializer list.  That is, if your default constructor does nothing, either <code>=default</code> the user-provided explicit declaration or omit the explicit-declaration and let the compiler implicitly generate it.</p>

<pre><code>// Implicitly-declared default constructor
class OutofRange {
    std::string error = "The index is out of range.";
public:
    std::string what() { return error; }
}

// Explicitly-declared default constructor that's been =default'd
class OutofRange {
    std::string error = "The index is out of range.";
public:
    OutofRange() = default;
    std::string what() { return error; }
}
</code></pre>

<p>The standard library provides plenty of exception types (<a href="https://en.cppreference.com/w/cpp/header/stdexcept" rel="nofollow noreferrer"><code>&lt;stdexcept&gt;</code></a>) you could be using.</p>

<p><a href="https://i.stack.imgur.com/7dUhZ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/7dUhZ.png" alt="Exception Hierarchy"></a></p>

<p>If you want to specify your own type, derive from <a href="https://en.cppreference.com/w/cpp/error/logic_error" rel="nofollow noreferrer"><code>std::logic_error</code></a> or <a href="https://en.cppreference.com/w/cpp/error/runtime_error" rel="nofollow noreferrer"><code>std::runtime_error</code></a> or any of their derived types.  For your program, <a href="https://en.cppreference.com/w/cpp/error/out_of_range" rel="nofollow noreferrer"><code>std::out_of_range</code></a> already exists, so you could use that.  Maybe you want something more specific, like <code>popped_on_empty</code>,</p>

<pre><code>struct popped_on_empty : public std::out_of_range {
    using std::out_of_range::out_of_range;
};
</code></pre>

<hr>

<pre><code>public:
    void heapify(int);
</code></pre>

<p>Should this be part of the public api?</p>

<hr>

<pre><code>template&lt;typename T&gt;
MinHeap&lt;T&gt;::MinHeap(size_t n)
{
    arr = new T[n];
    capacity = n;
    length = 0;
}
</code></pre>

<p>Make sure you namespace-qualify names. <a href="https://en.cppreference.com/w/c/types/size_t" rel="nofollow noreferrer"><code>size_t</code></a> is not guaranteed by the standard to exist while <a href="https://en.cppreference.com/w/cpp/types/size_t" rel="nofollow noreferrer"><code>std::size_t</code></a> is.</p>

<p>Don't rely on other headers to transitively include files your code is dependent on.  Always include the exact header that you <em>need</em>. (<code>&lt;cstddef&gt;</code> for <code>std::size_t</code>, <code>&lt;string&gt;</code> for <code>std::string</code>)</p>

<p>Your <code>minHeap</code> takes ownership of a dynamic allocation.  You should follow the <a href="https://en.cppreference.com/w/cpp/language/rule_of_three" rel="nofollow noreferrer">rule of five</a>.  Basically, whenever your class is managing some resource or responsibility, you should consider how the default compiler-generated behavior of the five special member functions operate on that object.  The five special member functions you must consider are the copy constructor, move constructor, copy assignment operator, move assignment operator, and destructor.  </p>

<p>A better approach is to use a container to manage the memory for you.  If the value semantics of a container behaves correctly with the compiler generated member functions, then you do not have to define them yourself. This is the considered the <a href="https://en.cppreference.com/w/cpp/language/rule_of_three" rel="nofollow noreferrer">rule of zero</a>.</p>

<p>When constructing objects, prefer initialization over assignment.  If you have a constant value you are initializing a data member to (like <code>length</code> with zero), use the <a href="https://en.cppreference.com/w/cpp/language/data_members#Member_initialization" rel="nofollow noreferrer">in-class member initializers</a>.</p>

<pre><code>class MinHeap {
    T* arr;
    std::size_t capacity = 0;
    std::size_t length = 0;
</code></pre>

<p>If you are taking want to initialize a value at construction, use the <a href="https://en.cppreference.com/w/cpp/language/data_members#Member_initialization" rel="nofollow noreferrer">constructor member initializer list</a>.  If a value is initialized at the data member and in the constructor init list, the compiler will initialize the value at the constructor init list.</p>

<pre><code>    MinHeap(std::size_t n)
    : arr(new T[n]), capacity(n), length(0) {}

    ~MinHeap() {
        delete[] arr;
    }

    MinHeap(const MinHeap&amp; other);
    MinHeap(MinHeap&amp;&amp; other);
    MinHeap&amp; operator=(const MinHeap&amp; other);
    MinHeap&amp; operator=(MinHeap&amp;&amp; other);
</code></pre>

<p>Avoid calling <code>new</code>/<code>delete</code> explicitly.  Use <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique" rel="nofollow noreferrer"><code>std::make_unique&lt;T[]&gt;</code></a> to create a <code>std::unique_ptr&lt;T[]&gt;</code> to manage the lifetime of <code>arr</code>.  You still need to consider the five special member functions.</p>

<hr>

<pre><code>T MinHeap&lt;T&gt;::get_min() {
    if(length &gt; 0) {
        return arr[0];
    } else {
        std::cout &lt;&lt; "Error: Invalid access" &lt;&lt; std::endl;
        throw OutofRange{};
    }
</code></pre>

<p>Should <code>get_min()</code> return a <code>const T&amp;</code>?  Should <code>get_min()</code> return the min for a <code>const MinHeap</code>? Consider applying <a href="https://isocpp.org/wiki/faq/const-correctness#const-member-fns" rel="nofollow noreferrer"><code>const</code>-correctness</a> on member functions that only inspect and not mutate.</p>

<p>Do not use <code>else</code> after the flow control has been interrupted by a <a href="https://en.cppreference.com/w/cpp/language/statements" rel="nofollow noreferrer">jump statement</a> (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>goto</code>).</p>

<p>There is no need to print an error message here. Any information you want to inform the callee should be passed back through the exception.  Let the callee report the error information to the console if they want to.  Use a logging library if you need to track events.</p>

<p>Avoid <a href="https://en.cppreference.com/w/cpp/io/manip/endl" rel="nofollow noreferrer"><code>std::endl</code></a>.  Passing the stream manipulator <code>std::endl</code> inserts a new line character into the stream and then flushes the stream.  When working with buffered streams, this is often an unexpected side effect.  Just stream the end line character (<code>'\n'</code> or <code>"\n"</code>).  If you want to flush the stream as well, explicitly state your intent by streaming <a href="https://en.cppreference.com/w/cpp/io/manip/flush" rel="nofollow noreferrer"><code>std::flush</code></a>.</p>

<hr>

<pre><code>template&lt;typename T&gt;
void MinHeap&lt;T&gt;::insert(T data) {
    // Check if capacity is reached
    if(length == capacity) {
    /* ... */

    // Insert the node
    arr[length] = data;
    this -&gt; heapify(length);
    length++;
}
</code></pre>

<p>Don't state in comments what can be clearly stated in code.  Compilers do not read comments.  The added verbosity is not as precise as code and is not updated nearly as often/consistently.  Comments should state what is done, not what is supposed to be done.</p>

<pre><code>template&lt;typename T&gt;
void MinHeap&lt;T&gt;::insert(T data) {
    // sort the underlying container using &lt;, percolating the inserted element up the heap
    // until it is inorder with its parent.
</code></pre>

<p><code>length</code> is an unsigned integral type of at least 32-bits (<code>std::size_t</code>). <code>MinHeap&lt;T&gt;::heapify(int)</code> is expecting an a signed integral type.  You have a narrowing conversion from <code>std::size_t</code> to <code>int</code> which could result in a possible loss of data.</p>

<hr>

<pre><code>template&lt;typename T&gt; T MinHeap&lt;T&gt;::delete_min() {
    /* ... */
    T del_min = arr[0];
    std::swap(arr[0], arr[length - 1]);
    arr[length - 1] = (T)NULL;
</code></pre>

<p>You have an accessor (<code>MinHeap&lt;T&gt;::get_min()</code>) that returns the minimum in the heap.  Does <code>MinHeap&lt;T&gt;::delete_min()</code> also need to provide the minimum?</p>

<p><code>NULL</code> is a macro variable that represents the value 0.  You are doing a C-style cast of 0 to type <code>T</code>.  If <code>T</code> is a non-integral type, bad things will happen.</p>

<p>If <code>std::swap</code> is not specialized for <code>T</code>, you'll have a problem.  You can read more about the <a href="http://ericniebler.com/2014/10/21/customization-point-design-in-c11-and-beyond/" rel="nofollow noreferrer">std two-step</a> here.</p>

<pre><code>    for(size_t i = 0; i &lt; length - 1 &amp;&amp; length &gt; 0;) {
        int min_child;
</code></pre>

<p>All of your math in this loop has implicit conversions between <code>std::size_t i</code> and <code>int min_child</code>; from changing signedness to possible precision loss to signed/unsigned comparison.</p>

<hr>

<pre><code>template&lt;typename T&gt; void MinHeap&lt;T&gt;::print_heap() { /* ... */ }
</code></pre>

<p>Should callers have access to the internal heapified array?  I'm not convinced it's necessary.  If you take the adapter approach for your heap class, in which some other container owns the memory, you can make the container a protected member accessible through inheritance.</p>

<hr>

<blockquote>
  <p>1) Are heaps used for data types other than numeric? </p>
</blockquote>

<p>Yes.  Anything that can be ordered can be heap sorted.  Uses that immediately spring to mind are:</p>

<ul>
<li>Order Statistics (Kth min/max element)</li>
<li>Heapsort as a fallback for a quadratic converging quicksort</li>
<li>K-Way merging</li>
<li>Dijkstra Shortest Path algorithm</li>
<li>Prim's Minimum Spanning Tree algorithm</li>
<li>Huffman Encoding</li>
<li>Process Scheduling</li>
</ul>

<p>Instead of using an extreme value to represent the priority, consider using a comparator that forces the value to sift up as the minimum (always returns true as being less than its parent).</p>

<blockquote>
  <p>2) Is there a better way to handle out of range errors without using exceptions and not returning a value such as INT_MAX, INT_MIN or zero?</p>
</blockquote>

<p>There are many ways to handle the unexpected situation of popping an empty list.  Here are a couple defensive design approaches that checks the preconditions and informs the user of an error:</p>

<ul>
<li>Throw an Exception - Control is transferred back to the caller and the caller is forced to either handle the error or let the program crash.</li>
<li>Return an Optional - The caller receives either the result or nothing in the form of a <code>nullopt</code>.  Error information has to be passed through a global error state.  C++17s <code>std::optional</code> is designed to work with values, not references.  If you need a specialization that works with references, see <a href="https://www.boost.org/doc/libs/1_68_0/libs/optional/doc/html/index.html" rel="nofollow noreferrer">Boost.Optional</a>.  If you need a pre-C++17 drop-in version of <a href="https://en.cppreference.com/w/cpp/utility/optional" rel="nofollow noreferrer">std::optional</a>, see <a href="https://github.com/abseil/abseil-cpp/" rel="nofollow noreferrer">absl::optional</a>.</li>
<li>Return an Either/Variant type - The caller receives the value (or reference/pointer) or an instance of another type, which could be an exception, error code, or error state.  C++17 introduces <code>std::variant</code>.  For C++11/14, see <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/variant.html" rel="nofollow noreferrer">Boost.Variant</a> or <a href="https://github.com/abseil/abseil-cpp/" rel="nofollow noreferrer">absl::variant</a>. For the Either types specialized for error handling, C++20 should introduce Alexandrescu's <code>std::expected</code>. Until then, there is <a href="https://github.com/ned14/outcome" rel="nofollow noreferrer">Boost.Outcome</a> (C++14), <a href="https://github.com/facebook/folly" rel="nofollow noreferrer">Folly::Expected</a>, and Simon Brand's take on <a href="https://github.com/TartanLlama/expected" rel="nofollow noreferrer"><code>expected</code></a>.</li>
</ul>

<p>The caller is free to ignore the result type unless the <a href="https://en.cppreference.com/w/cpp/language/attributes/nodiscard" rel="nofollow noreferrer"><code>[[nodiscard]]</code> attribute</a> is declared (C++17).</p>

<p>Alternatively, there is the <a href="https://en.wikipedia.org/wiki/Design_by_contract" rel="nofollow noreferrer">design-by-contract</a> approach - There is an assumption that all of the client components that invoke an operation will meet the preconditions specified as required for that operation.  The pop operation requires the container not be empty and calling pop on an empty heap will attempt to pop as if there were an element there.  The expected result is undefined behavior. Formal systems to enforce contracts are coming to C++.  <a href="https://www.boost.org/doc/libs/develop/libs/contract/doc/html/index.html" rel="nofollow noreferrer">Boost.Contracts</a> is currently in development.  C++20 will provide <a href="https://en.cppreference.com/w/cpp/language/attributes/contract" rel="nofollow noreferrer"><code>expects</code>, <code>ensures</code>, and <code>assert</code> attributes</a>.</p>

<blockquote>
  <p>3) What could be other possible improvements in the code?</p>
</blockquote>

<p>Besides what is listed, support for move operations. allocator, comparator, projections, <a href="https://en.cppreference.com/w/cpp/named_req/Container" rel="nofollow noreferrer">container requirement conformance</a>.</p>
    </div>