<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First things first, props to you for learning good old C in the day of dynamically typed high level languages! Now on to the review...</p>

<h1>Error checking</h1>

<p>Right now, there's nothing to stop me from entering 512351 as the seventh digit, for example. As a rule of thumb, if something comes from user input, double-check it. Your user is the greatest threat to program integrity. For example, check the input in a loop and only save it once it is a valid bit (0 or 1), if it's not valid, simply ask your user again. But this takes me to the next issue...</p>

<h1>Input</h1>

<p>Right now, you ask for each bit separately. I'm lazy. I wouldn't want to have 16 keystrokes to enter 8 digits. So, instead of asking for each bit on its own, consider just asking your user to type the digits as a string. Instead of eight integer variables, you could store them (temporarily, that is) in an array of characters. See the following snippet:</p>

<pre><code>char input[8 + 1 + 1]; // 8 characters + newline + null terminator

printf("Enter a binary number: ");
fgets(input, sizeof input, stdin);
input[8] = '\0'; // We don't want the newline
</code></pre>

<p>This reads a line from standard input and stores the first 9 characters - 8 bits and a newline - in the array <code>input</code>, as well as a <code>'\0'</code> to terminate the string.</p>

<p>Now this is way shorter!</p>

<h1>Conversion to decimal</h1>

<p>But now that you have your digits as characters in a array, the conversion has to change. You can even be fancy and make your conversion more generic, in case you want to handle arbitrarily long numbers one day.</p>

<p>A typical idiom to get the numeric value from a character is <code>int number = char - '0';</code> This subtracts the ASCII value for the character 0 from the character you have, leaving for example <code>'5'</code> as the integer 5. This will get strange when you use non-digit characters, of course. But you've checked that beforehand, I hope!</p>

<p>What's left is looping over your characters and adding their digit values to the total value.</p>

<pre><code>int decimal_value = 0;

for (int i = 0; i != 8; ++i) {
    int digit = input[i] - '0';
    int factor = pow(2, 7 - i);

    decimal_value += digit * factor;
}
</code></pre>

<p>But since your binary digits are always either 0 or 1, you could tweak this a bit to prevent adding 0 a bunch of times.</p>

<pre><code>int decimal_value = 0;

for (int i = 0; i != 8; ++i) {
    if (input[i] - '0') {
        decimal_value += pow(2, 7 - i);
    }
}
</code></pre>

<p>If the current character processed is <code>'0'</code>, <code>input[i] - '0'</code> will evaluate to 0, which is falsy - the body of the <code>if</code> will not be executed. Otherwise, it is non-zero, which leads to the <code>if</code>-body being executed. Nice!</p>

<h1>Conversion to hex</h1>

<p>Right now, you do two things which should not be done together. You store the hex-digits as integer value, but once they're larger than 10 you store a character instead. This... works, but it's unusual and not that great. Instead, convert both two characters! The actual conversion is left as an exercise for you, but once you have both digits stored as <code>first_hexdigit</code> and <code>last_hexdigit</code> for example, you could to this:</p>

<pre><code>char hex[2]; // Since we have two digits, let's store those as an array.
             // Note that, in contrast to before with input, we do not
             // have to make the array one larger than it needs to be,
             // as we do not use fgets which appends an extra character.

hex[0] = first_hexdigit &gt;= 10 ? first_hexdigit - 10 + 'A' 
                              : first_hexdigit + '0';
hex[1] = last_hexdigit &gt;= 10 ? last_hexdigit - 10 + 'A' 
                             : last_hexdigit + '0';
</code></pre>

<p>If you have never used it before, the <code>?</code> and <code>:</code> are the <em>ternary operator</em>. Basically, <code>a ? b : c</code> means: if <code>a</code> is a truthy value, then return b, else c. Or, in other words:</p>

<pre><code>int result;    
if (a) {
    result = b;
} else {
    result = c;
}
</code></pre>

<p>To convert from a numeric value to a character, we switch our previous idiom around a bit: instead of <em>subtracting</em> our lowes character, we <em>add</em> it as value. If <code>last_hexdigit</code> is 6, for example, this becomes <code>6 + '0'</code> which is just <code>'6'</code>. But if it's 12, the computation is <code>12 - 10 + 'A'</code>, which is <code>2 + 'A'</code> which is <code>'C'</code>.</p>

<h1>Output</h1>

<p>Since you've stored your results a bit differently, your way of printing has to be changed as well!</p>

<p>Assume we have our decimal value stored, as integer, in <code>decimal_value</code> and our hexadecimal as array of two characters in <code>hexadecimal_value</code>.</p>

<pre><code>int decimal_value; // Your decimal
char hexadecimal_value[2]; // Your hexadecimal

printf("Decimal: %d\n", decimal_value);
printf("Hexadecimal: %c%c\n", hexadecimal_value[0], hexadecimal_value[1]);
</code></pre>

<p>This could made better a bit if you do make the <code>hexadecimal_value</code> array one larger than it needs to be and set the last character to <code>'\0'</code>. Because then, <code>hexadecimal_value</code> would be a string (as strings need to be null-terminated), which you could easily print with <code>printf</code>:</p>

<pre><code>printf("Hexadecimal: %s\n", hexadecimal_value);
</code></pre>

<h1>Encapsulation</h1>

<p>Now that the actual code is cleaned up a bit, what can we do to make it more beautiful on a higher level?</p>

<p>Exctract functionality into functions, of course!</p>

<p>Right now, all your code is in <code>main</code>. This is okay for small programs like this, but should still be avoided. So instead, let's make some smaller functions for simple tasks! Your control flow is much like the following:</p>

<pre><code>int main() {
    get_input();
    process_input();
    print_output();
}
</code></pre>

<p>Since it makes sense to handle the input and output in <code>main</code> (for this scale at least), let's focus on making the <code>process_input()</code>!
I suggest you use three functions, which carry your main logic:</p>

<pre><code>int   is_valid_binary(const char *string);
char *binary_to_decimal(const char *string);
char *binary_to_hexadecimal(const char*string);
</code></pre>

<p><code>is_valid_binary</code> takes in a string and returns <code>0</code> if it is <em>not</em> a valid binary number (e.g. contains characters other than <code>'1'</code> and <code>'0'</code>), otherwise, it returns <code>1</code>. <code>binary_to_decimal</code> takes in a string of binary digits and returns a string of the very same number, but with decimal digits. <code>binary_to_hexadecimal</code> works similar; it takes a string and returns a string of hexadecimal digits. I leave actually writing these functions to you.</p>

<p>Once you have those three functions, your main would thus become:</p>

<pre><code>int main() {
    char input[8 + 1 + 1];
    printf("Enter a binary number: ");

    do {
        fgets(input, sizeof input, stdin);
        input[8] = '\0';
    } while (!is_valid_binary(input));

    char *decimal = binary_to_decimal(input);
    char *hexadecimal = binary_to_hexadecimal(input);

    printf("Decimal: %s\nHexadecimal: %s\n", decimal, hexadecimal);

    // Since you allocated the memory for decimal end hexadecimal yourself,
    // you have to free it yourself as well! At least, you should allocate
    // it yourself.
    free(decimal);
    free(hexadecimal);
}
</code></pre>

<h1>Exercise to you</h1>

<p>To recap, consider the final version of <code>main</code> I pasted above. Your task now is to write the functions <code>is_valid_binary</code>, <code>binary_to_decimal</code> and <code>binary_to_hexadecimal</code>. You could also expand those functions to handle arbitrarily long binary numbers (not necessarily eight digits, but also 2 digits or 24 digits!). And, as an extra, take the input from the commandline. Use <code>argv</code> for that one.</p>

<h1>Addendum</h1>

<p>As Toby Speight mentioned in the comments, it is not really a good idea to use <code>pow()</code> when calculating <code>2^n</code>. First of all, <code>pow()</code> uses <code>doubles</code>, which adds some conversion overhead (and, worst case scenario, wrong results due to the way <code>double</code> works. But it's rather unlikely.), and second: it's slow. Let me introduce you to bitmagic!</p>

<p>Consider the number 4, or <code>0b0100</code>. 4 times 2 is 8, or <code>0b1000</code>. There is a pattern going on here which is everywhere: if you multiply any number by 2, its binary representation gets shifted by 1 to the left. Since exponention is just repeated multiplication, <code>2^7</code> is just <code>1 * 2 * 2 * 2 * 2 * 2 * 2 * 2</code>. That's seven left-shifts right there! In C, performing left-shifts is done by using the <code>&lt;&lt;</code> operator.</p>

<p>So, instead of calculating <code>2^7</code> by using the slow <code>pow()</code>, you can use <code>1 &lt;&lt; 7</code> instead! </p>

<p>Basically: <code>pow(2,x) == 1 &lt;&lt; x</code>.</p>
    </div>