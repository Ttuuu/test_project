<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Iterators</h2>

<p>This is wrong:</p>

<pre><code>class BinarySort:

    def __iter__(self) -&gt; None:
        '''
        Calls the _inorder traversing method recursively;
        '''
        self._inorder(self.root)

    def _inorder(self, parent_node: Node) -&gt; None:
        ...
</code></pre>

<p>In <a href="https://codereview.stackexchange.com/a/229934/100620">this answer</a>, I suggested instead of creating a function for printing the tree in order, you create an iterator that could return the values in the tree in order, which the caller could print.  I mentioned <code>__iter__(self)</code> and <code>__next__(self)</code> methods, with the hope/intention that you would do some research yourself into how to create iterators.</p>

<p>I suppose I could have provided an example:</p>

<pre><code>class Container:

    def __init__(self, *data):
        self._items = data

    def __iter__(self):
        return Container.Iterator(self)

    class Iterator:
        def __init__(self, container):
            self._container = container
            self._i = 0

        def __next__(self):
            if self._i &lt; len(self._container._items):
                item = self._container._items[self._i]
                self._i += 1
                return item
            raise StopIteration
</code></pre>

<p>Here, I have a <code>Container</code>.  It stores a sequence of items.</p>

<pre><code>&gt;&gt;&gt; stuff = Container(1, 2, 3, 5, 8, 13)
</code></pre>

<p>While it defines an <code>__iter__</code> method, you should never call that method yourself.  Instead, you should use the <code>iter()</code> function:</p>

<pre><code>&gt;&gt;&gt; it = iter(stuff)
&gt;&gt;&gt; type(it)
&lt;class '__main__.Container.Iterator'&gt;
</code></pre>

<p>Note that the <code>__iter__</code> method does return something.  It must return an iterator, which is something that implements the <code>__next__</code> method.  Our <code>Container.Iterator</code> object does do that.  Again, you never call the <code>__next__</code> method yourself; you call the <code>next()</code> function instead:</p>

<pre><code>&gt;&gt;&gt; next(it)
1
&gt;&gt;&gt; next(it)
2
&gt;&gt;&gt; next(it)
3
&gt;&gt;&gt; next(it), next(it), next(it)
(5, 8, 13)
&gt;&gt;&gt; next(it)
Traceback (most recent call last):
  File "&lt;pyshell#40&gt;", line 1, in &lt;module&gt;
    next(it)
  File "C:\Users\aneufeld\Desktop\Playground\Python\StackOverflow\iter.py", line 19, in __next__
    raise StopIteration
StopIteration
</code></pre>

<p>Notice how that <code>iter(stuff)</code> returned an iterator, and calling <code>next(iterator)</code> returned each item from our container in sequence.</p>

<p>Normally, you would use the iterator in a loop, breaking out when <code>StopIteration</code> is raised:</p>

<pre><code>&gt;&gt;&gt; it = iter(stuff)
&gt;&gt;&gt; while True:
        try:
            val = next(it)
            print(val)
        except StopIteration:
            break

1
2
3
5
8
13
&gt;&gt;&gt; 
</code></pre>

<p>But Python will call <code>it = iter()</code> and <code>val = next(it)</code>, and catch the <code>StopIteration</code> exception for you, if you write it like this:</p>

<pre><code>&gt;&gt;&gt; for val in stuff:
        print(val)


1
2
3
5
8
13
&gt;&gt;&gt; 
</code></pre>

<h2>Tree Iterator</h2>

<p>A Tree iterator would be slightly more complicated.  The iterator itself would need a stack (<code>list</code>) to keep track of which node it is at.  While a node has a left child, you'd travel down to those children, pushing the current node onto your stack.  When no left child exist, you'd return the node's value.  When a right child exists, you'd travel down to those children, but not pushing the current node onto the stack.  When no children exists, you'd pop the last node you pushed off of your stack, return its value, and visit its right child node.  Effectively, you are traversing the tree inorder, but instead of using recursive calls, you have to keep track of where you are, and which direction you are going.</p>

<p>Left to student.</p>
    </div>