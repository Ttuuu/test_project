<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just a short answer, because I havn't the energy to type a long one.</p>

<h2>Algorithm</h2>

<p>This is indeed a Breadth-First-Search.</p>

<p>If you can assume that the costs will never be negative (i.e. path cost grows monotonically) then in either BFS or DFS it is easy to cut short paths which are more expensive than an already determined lower-bound. It's an assumption, but in the interest of fun if nothing else, taking all costs to be non-negative means you can reject (i.e. don't enqueue the children of) any path which is depper than the minimum path you have already found (if you have found such a path). In your code, the addition of a single if can give you this:</p>

<pre><code>if (node.cost &lt; min)
{
    Q.Enqueue(node);
}
</code></pre>

<p>Such a change means that your BFS has time and space complexity which are a function of the depth of the minimum path, rather than the depth of the whole tree. (It does of course need documenting)</p>

<p>Though it's pretty meaningless to ask for the 'most efficient' manner (I really dislike these kinds of problem definitions), this is not the algorithm with lowest time and space complexity. BFS has a high space complexity, but has the same time-complexity as an <a href="https://en.wikipedia.org/wiki/Iterative_deepening_depth-first_search" rel="nofollow noreferrer">iterative deepening</a> search. Alternatively, you could employ a heuristic search (i.e. A*) so that you explore only as much of the tree as necessary to find the minimum route. This doesn't come for free, as a heurisitic search requires a non-trivial ordering of nodes in the frontier, but a Priority Queue is ideal for this task. Without a better definition of the types of trees to expect, you can't know which algorithm is most suitable.</p>

<p>As always, I'll meantion that you code does not defend against cycles, but that's OK. It also won't work for a DAG (because it modifies the tree), which is still OK because the spec specifies a tree, but it's not documented.</p>

<h3>Complexity</h3>

<p>Without pruning trees (if you don't assume costs can be negative), this has time and space complexity linear in the size of the tree. If you do prune trees, then it has time and space complexity <code>b^s</code>, where <code>s</code> is the depth of the shallowest node with the minimum cost, and <code>b</code> is the slightly-fuzzy 'branching factor' (i.e. average-ish number of children per node). The second one is clearly exponential, the first only looks linear because I've changed the terms: instead we could consider the complexity of your algorithm to be <code>b^d</code>, where <code>d</code> is the average-ish depth of the tree.</p>

<p>Any DFS variant can give you space-complexity linear in <code>d</code>. An iterative deepening DFS will give you this linear space complexity and the same exponential time complexity as BFS. A heuristic search is a bit harder to classify (all the more so with such a limited specification), but essentially it's a better BFS.</p>

<h2>API</h2>

<p>It's mildly horrifying that your search modified the input as it does. This means that if the method is called twice with the same parameters that it could give a different answer. More importantly, this property is not documented, making it impossible for a consumer to know what is going on without careful debugging/looking at your code.</p>

<p>Though I'm sure you weren't asking about <code>SalesNode</code>... basically everything in <code>SalesNode</code> ought to be hidden away and (as a minimum) initialised by constructor. There is nothing preventing you from mis-using the class (e.g. by forgetting to set the <code>parent</code> attribute on children. You should provide methods to transform your objects from one consistent state to another.</p>

<p>You've clearly documented the fact that you are not checking for <code>null</code> with a comment. This is probably because you anticipate some miserable person like me telling you that this is a design decision, and you're not allowed to make those without documentation to go with it. However... you know that a <code>null</code> will cause the system to throw anyway, which means that implicitly you <em>have</em> made that decision, and you have essentially decided that it should throw (as opposed to returning something made-up-but-meaningful like <code>0</code>; my opinion is you made the right decision). Do your callers a favour by catching this early and providing a meaningful error <code>ArgumentNull</code> exception: you can document that you assumed this behaviour, and you're justified (in my opinio) in your assumption because the software has to do <em>something</em>, and crashing is a really helpful thing to do when an assumption (that <code>rootNode</code> is non-null) is violated. Throw a nice exception, add some inline doc, and in the worst instance someone can write an exception method which doesn't throw on <code>null</code> which wraps your code with confidence. Alternatively, adding an assertion (e.g. <code>Debug.Assert</code>) so that you explicitly document the assumption that <code>rootNode</code> is non-null is another way to communicate all this.</p>

<h2>Boring stuff</h2>

<ul>
<li><p>You know what I'm going to say about <code>Q</code> :) it should ideally be lower-case, and it should absolutely have a more meaningful name. Even <code>queue</code> wouldn't be great, because it describes how the thing is implemented, not what it is.</p></li>
<li><p><code>tempNode</code> is not a good name here: this is not a temporary node at all; it is the <code>current</code> node we are looking at, or perhaps the <code>next</code> node to expand.</p></li>
<li><p>I would put this comment inside the if; it's unclear otherwise:</p>

<pre><code>//this is a leaf
</code></pre></li>
<li><p>A blank line either side of the while loop would make me happier.</p></li>
<li><p>That single test method is woefully inadequate... but I'm guessing you knew that ;)</p></li>
</ul>
    </div>