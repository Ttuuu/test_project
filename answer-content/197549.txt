<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Magic numbers</h1>

<p>The implementation uses them a lot. While the bit-notation helps with indicating what is happening, it doesn't show the intention. What reads clearer:</p>

<pre><code>if((text[i] &amp; 0b1000000) == 0)
</code></pre>

<p>or</p>

<pre><code>if((text[i] &amp; UTF8_ONE_BYTE_MASK) == UTF8_ONE_BYTE_COUNT)
</code></pre>

<h1>Error handling</h1>

<p>It isn't guaranteed that only valid UTF8 strings will be given to this code. I don't see any error signaling for those cases.</p>

<h1>Code duplication</h1>

<p>All those checks for how many UTF8 bytes encode one UTF32 byte are repeated in both function. These could easily be extracted into one function.</p>

<h1>Missing null-terminator on UTF32 string</h1>

<p>As you realized in a comment, the UTF32 string doesn't have a null terminator. This is easily fixable, though</p>

<h1>Possible rewritten code</h1>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;

#define UTF8_ONE_BYTE_MASK 0b10000000
#define UTF8_ONE_BYTE_COUNT 0

#define UTF8_TWO_BYTE_MASK 0b11100000
#define UTF8_TWO_BYTE_COUNT 0b11000000

#define UTF8_THREE_BYTE_MASK 0b11110000
#define UTF8_THREE_BYTE_COUNT 0b11100000

#define UTF8_FOUR_BYTE_MASK 0b11111000
#define UTF8_FOUR_BYTE_COUNT 0b11110000

// This one could use a better name, I just don't know a better one (yet?)
#define UTF8_OTHER_MASK 0b00111111

size_t utf8_codepoint_size(uint8_t text) {
    if((text &amp; UTF8_ONE_BYTE_MASK) == UTF8_ONE_BYTE_COUNT) {
        return 1;
    }

    if((text &amp; UTF8_TWO_BYTE_MASK) == UTF8_TWO_BYTE_COUNT) {
        return 2;
    }

    if((text &amp; UTF8_THREE_BYTE_MASK) == UTF8_THREE_BYTE_COUNT) {
        return 3;
    }

    // TODO: what should happen if a byte with prefix 0b10xxxxxx is passed?
    return 4;
}

size_t utf8_strlen(uint8_t* text) {
    size_t i = 0;
    size_t num_chars = 0;

    while (text[i] != 0) {
        num_chars++;

        // TODO: error handling?
        i += utf8_codepoint_size(text[i]);
    }

    return num_chars;
}

uint32_t* utf8_to_utf32(uint8_t* text) {
    size_t num_chars = utf8_strlen(text) + 1;
    uint32_t* c = malloc(sizeof(uint32_t) * num_chars);
    size_t i = 0;

    for (size_t n = 0; n &lt; num_chars; n++) {
        size_t byte_count = utf8_codepoint_size(text[i]);

        switch(byte_count) {
        case 1:
            c[n] = (text[i] &amp; ~UTF8_ONE_BYTE_MASK);
            break;

        case 2:
            c[n] = (text[i] &amp; ~UTF8_TWO_BYTE_MASK) &lt;&lt; 6 | (text[i + 1] &amp; UTF8_OTHER_MASK);
            break;

        case 3:
            c[n] = (text[i] &amp; ~UTF8_THREE_BYTE_MASK) &lt;&lt; 12 | (text[i + 1] &amp; UTF8_OTHER_MASK) &lt;&lt; 6 | (text[i + 2] &amp; UTF8_OTHER_MASK);
            break;

        case 4:
            c[n] = (text[i] &amp; ~UTF8_FOUR_BYTE_MASK) &lt;&lt; 18 | (text[i + 1] &amp; UTF8_OTHER_MASK) &lt;&lt; 12 | (text[i + 2] &amp; UTF8_OTHER_MASK) &lt;&lt; 6 | (text[i + 3] &amp; UTF8_OTHER_MASK);
            break;

        // TODO: error handling?
        }

        i += byte_count;
    }

    return c;
}
</code></pre>
    </div>