<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Are the final templated functions <code>allocate</code> and <code>deallocate</code> thread safe?</p>
</blockquote>

<p>As every other state used is thread-local, the answer hinges on this:<br>
Is the <code>malloc()</code>/<code>free()</code> memory-management-system thread-safe?</p>

<p>The C++ Standard just defers to the C standard:  </p>

<blockquote>
  <p><a href="http://eel.is/c++draft/c.malloc#lib:malloc" rel="nofollow noreferrer"><em>Effects: These functions have the semantics specified in the C standard library.</em></a></p>
</blockquote>

<p>And the C Standard says something like (from C11 final draft n1570):</p>

<blockquote>
  <ol start="2">
  <li>For purposes of determining the existence of a data race, memory allocation functions behave as though they accessed only memory locations accessible through their arguments and not other static duration storage. These functions may, however, visibly modify the storage that they allocate or deallocate. A call to <code>free</code> or <code>realloc</code> that deallocates a region <em>p</em> of memory synchronizes with any allocation call that allocates all or part of the region <em>p</em>. This synchronization occurs after any access of <em>p</em> by the deallocating function, and before any such access by the allocating function.</li>
  </ol>
</blockquote>

<p>So, in the end, the answer is:<br>
<strong>Yes</strong>, it's thread-safe.</p>

<hr>

<p>Now, let's critic your code:</p>

<ol>
<li><p>You are only using <code>FreeList</code> for <code>Cache</code>, and don't call any of its methods more than once.<br>
Abstraction and encapsulation are tools for managing complexity, but all that useless boilerplate increases it instead.</p></li>
<li><p>There is no valid reason <code>Cache</code> and <code>FreeList</code> aren't literal types, which don't depend on dynamic initialization.<br>
Use <code>constexpr</code>, or better yet move to an in-class-initializer and <code>=default</code> the default-ctor.</p></li>
<li><p>To make a type non-copy- and non-move- constructible and assignable, it suffices to declare an explicitly deleted move-ctor or move-assignment-operator.</p></li>
<li><p>While it's a good thing <code>Cache``static_assert</code>s the block-size is big enough, make <code>get_cache()</code> fix the request if needed. The caller should not have to care.</p></li>
<li><p>Consider writing an <a href="https://en.cppreference.com/w/cpp/named_req/Allocator" rel="nofollow noreferrer">Allocator</a> using your caching-system. That way, it can be used by standard containers, instead of just manually. Though admittedly, as the block-size is a compile-time-constant, it can only be used in containers allocating single nodes instead of whole arrays.</p></li>
</ol>
    </div>