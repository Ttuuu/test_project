<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have improved my code and here's my new code:</p>

<pre><code> def max_heap(listmax):

    i = 1
    k = 0

    while i &lt;= len(listmax) -1:

        if i%2 == 0:
            j = int(i/2 -1)
        else:
            j = int(i//2)

#   parent is compared with the child and swapped if not in order. 

        if listmax[i] &gt; listmax[j]:
            listmax[i],listmax[j] = listmax[j],listmax[i]

#   k is used here to store the index of the latest node which is compared in the array. So that next time
#   the parent is compared to the child, then it starts with k+1 occurence.
#   coming inside this if loop means child was greater than parent and hence it was swapped. Also k will
#   now hold the index of child node

#   k is checked for 0 first because, we want to have the very first node when the swapping starts, so that 
#   the next node read should be from k+1 node

            if k == 0:
                k = i

#   i &gt; 2 means that the child also becomes parent in the flow, so the child is made parent and checked in while loop            

            if i &gt; 2: 
                if i%2 == 0:
                    i = int(i/2 -1)
                else:
                    i = int(i//2)
            else:
                if k &gt; 2:
                    i = k +1
                else:
                    i = i +1
                k = 0
        else:

#   this else means, parent was greater than the child, so no swapping happened
#   k has the value of last child where the swapping started so next node to be read should be k+1
#   if k is zero, it means the last child which was read was already smaller than parent and hence we 
#   just move to next node by i +1

            if k != 0:
                i = k +1
                k = 0
            else:
                i = i +1

    return listmax

def sort_heap(randomlist): 

    max_heap_tree = max_heap(randomlist)
    sorted_heap = []

    sorted_heap.append(max_heap_tree[0])

    while len(max_heap_tree) &gt; 1: 

# the next highest number is found using the max_heap by removing the [0] element from the list 

        max_heap_tree = max_heap(max_heap_tree[1:])
        sorted_heap.append(max_heap_tree[0])

    return sorted_heap


randomlist = [10,15,20,25,30,35,40,45,50,55] 
sort_heap(randomlist)
</code></pre>

<p>I had put a counter in while loop and to get max heap with 10 nodes in the above example it took 19 iterations and overall to sort the complete list 60 iterations. Not sure if can be improved more.</p>

<p>Also, the way i am creating the max heap is literally how we would do it on paper. </p>
    </div>