<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Normally, we'd use the vector's index type (<code>std::vector&lt;int&gt;::size_type</code>, i.e. <code>std::size_t</code>) for the return values.  But unfortunately we're required to return negative values when the search fails, so I'd recommend a pair of <code>std::ptrdiff_t</code> instead.  And the question specifically asks for <code>int</code>s, so I'd just insert a comment explaining that were limited to arrays of up to <code>INT_MAX</code> elements (the O(<em>n</em>²) scaling probably reduces the practical range, anyway).</p>

<hr>

<p>I don't see anywhere that says there can't be negative numbers present - if that's specified, then it would have been wise to quote that part.  As it is, you've introduced a bug - because we're not storing numbers larger than <code>sum</code> into <code>com</code>, the index calculation <code>it - com.begin() + 1</code> will be incorrect by the amount of omitted large numbers (also, where does the <code>+1</code> come from? - did you misread <em>zero-based indices</em> in the question?).</p>

<hr>

<p>The vector <code>com</code> could grow to (in the worst case) the same size as the input vector.  That's quite a lot of extra storage.  It might be more efficient to leave the <code>&gt;= sum</code> elements in place, and just search the beginning half of the input vector (no extra storage needed).</p>

<p>That looks like the following (making a few other simplifications, such as using an iterator instead of <code>count</code>, and reducing the scope of the <code>find</code> result):</p>

<pre><code>static std::pair&lt;int, int&gt; findTwoSum(const std::vector&lt;int&gt;&amp; list, int sum)
{
    for (auto it_b = list.begin();  it_b != list.end();  ++it_b) {
        if (auto it_a = std::find(list.begin(), it_b, sum - *it_b);  it_a != it_b) {
            return {it_a - list.begin(), it_b - list.begin()};
        }
    }
    return {-1, -1};
}
</code></pre>

<hr>

<p>We still have a pretty inefficient algorithm - it's O(<em>n</em>²), where <em>n</em> is the length of <code>list</code>, because for every element in <code>list</code>, we perform a linear search for its complement.  We can reduce that, at the cost of reintroducing extra storage, by maintaining a <em>set</em> of seen values.  That may seem little different to the present approach of maintaining a <em>vector</em>, but the advantage is that search scales much better with size.  What we actually need is a map, as we'll want to note the corresponding index to return as result; the best choice is <code>std::unordered_map</code>:</p>

<blockquote>
  <p>Unordered map is an associative container that contains key-value pairs with unique keys. <strong>Search, insertion, and removal of elements have average constant-time complexity.</strong></p>
</blockquote>

<p>That gives us:</p>

<pre><code>    std::unordered_map&lt;int, int&gt; seen; // value -&gt; index

    for (auto it_b = list.begin();  it_b != list.end();  ++it_b) {
        if (auto it_a = seen.find(sum - *it_b);  it_a != seen.end()) {
            return {it_a-&gt;second, it_b - list.begin()};
        } else {
            seen[*it_b] = it_b - list.begin();
        }
    }
</code></pre>

<hr>

<h1>Modified code</h1>

<pre><code>#include &lt;unordered_map&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

static std::pair&lt;int, int&gt; findTwoSum(const std::vector&lt;int&gt;&amp; list, int sum)
{
    std::unordered_map&lt;int, int&gt; seen; // value -&gt; index

    for (auto it_b = list.begin();  it_b != list.end();  ++it_b) {
        if (auto it_a = seen.find(sum - *it_b);  it_a != seen.end()) {
            return {it_a-&gt;second, it_b - list.begin()};
        } else {
            seen[*it_b] = it_b - list.begin();
        }
    }
    return {-1, -1};
}
</code></pre>

<p>And a very simple test program:</p>

<pre><code>#include &lt;iostream&gt;
int main()
{
    auto const [a, b] = findTwoSum({ 1, 3, 5, 7, 9 }, 12);
    std::cout &lt;&lt; a &lt;&lt; ',' &lt;&lt; b &lt;&lt; '\n';
}
</code></pre>
    </div>