<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I made a few adjustments (simplified the return handling for max queue size) and added in a dequeue method:</p>

<pre><code>class TemporaryQueue:
    def __init__(self, max_items=10):
        self._queue = []
        self.max_items = max_items

    def __repr__(self):
        return "&lt;TemporaryQueue max_items={}&gt;".format(self.max_items)

    def __iter__(self):
        yield from self._queue

    def __eq__(self, other):
        return other in self._queue

    def _full(self):
        return len(self._queue) &gt;= self.max_items

    def enqueue(self, value):
        if self._full():
            self._queue.clear()

        return self._queue.append(value)

    def dequeue(self):
        return self._queue.pop()
</code></pre>

<p>A queue doesn't seem like a good data structure for this problem. A ring buffer might be more applicable; it creates a fixed size list of elements (say 10) and when there isn't enough room left, it overwrites the oldest one. Depending on the implementation, the entire buffer can be searched to see if it contains a string (taken directly from <a href="https://www.oreilly.com/library/view/python-cookbook/0596001673/ch05s19.html" rel="nofollow noreferrer">https://www.oreilly.com/library/view/python-cookbook/0596001673/ch05s19.html</a>):</p>

<pre><code>class RingBuffer:
    """ class that implements a not-yet-full buffer """
    def __init__(self,size_max):
        self.max = size_max
        self.data = []

    class __Full:
        """ class that implements a full buffer """
        def append(self, x):
            """ Append an element overwriting the oldest one. """
            self.data[self.cur] = x
            self.cur = (self.cur+1) % self.max
        def get(self):
            """ return list of elements in correct order """
            return self.data[self.cur:]+self.data[:self.cur]

    def append(self,x):
        """append an element at the end of the buffer"""
        self.data.append(x)
        if len(self.data) == self.max:
            self.cur = 0
            # Permanently change self's class from non-full to full
            self._ _class_ _ = self._ _Full

    def get(self):
        """ Return a list of elements from the oldest to the newest. """
        return self.data

# sample usage
if __name__=='__main__':
    x=RingBuffer(5)
    x.append(1); x.append(2); x.append(3); x.append(4)
    print x.__class__, x.get(  )
    x.append(5)
    print x.__class__, x.get(  )
    x.append(6)
    print x.data, x.get(  )
    x.append(7); x.append(8); x.append(9); x.append(10)
    print x.data, x.get(  )
</code></pre>
    </div>