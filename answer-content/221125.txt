<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Perhaps you could rewrite the wait operations to await both the semaphore or cancellation token.</p>

<blockquote>
<pre><code>public async Task&lt;bool&gt; WaitOne(TimeSpan timeout, CancellationToken ct)
  {
    DateTime start = DateTime.UtcNow;
    while (!_semaphore.WaitOne(0))
    {
      ct.ThrowIfCancellationRequested();
      if (DateTime.UtcNow &lt; start.Add(timeout))
        return false;
      await Task.Delay(100, ct);
    }
    return true;
  }
</code></pre>
</blockquote>

<pre><code>  public async Task&lt;bool&gt; WaitOne(TimeSpan timeout, CancellationToken ct)
  {
      var success = await Task.Run(() =&gt;
      {
          return WaitHandle.WaitTimeout
              != WaitHandle.WaitAny(new[] { _semaphore, ct.WaitHandle }, timeout);
      });
      ct.ThrowIfCancellationRequested();
      return success;
  }
</code></pre>
    </div>