<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>char *
itoa(int n)
{
    static char out[WIDTH + 1];

    for(char *outp = out + WIDTH - 1; outp &gt;= out; --outp, n /= 10)
        *outp = '0' + n % 10;
</code></pre>

<p>Nice bounds-check (<code>outp &gt;= out</code>). This ensures that you don't overrun your buffer when given a very large integer. However, since <code>out-1</code> is not a valid pointer value, <code>outp &gt;= out</code> is an <em>incorrect</em> bounds-check for the same reason that</p>

<pre><code>int decr(int x) {
    int y = x - 1;
    if (y &gt; x) return 0;  // oops, overflow happened
    return y;
}
</code></pre>

<p>is an <em>incorrect</em> overflow-check.</p>

<p>Your bounds-check code also has another similarity to the above overflow-check code: When overflow happens, you return an <em>in-range value</em> that the caller might reasonably confuse for a valid result of the function. When <code>itoa(x)</code> returns <code>"42"</code>, does it mean that <code>x</code> was <code>42</code>, or does it mean that <code>x</code> was <code>1042</code> and overflow happened? It would be much better to say, if overflow happens, we return <code>NULL</code>.</p>

<p>Of course you'll have to express that "if" without <code>if</code>. ;)</p>

<hr>

<p><code>itoa</code> returns <code>char*</code>, but you don't expect the caller to modify the pointed-to chars, so you should declare it as returning a pointer to non-modifiable chars: <code>const char*</code>. <a href="https://quuxplusone.github.io/blog/2019/01/03/const-is-a-contract/" rel="nofollow noreferrer">Const is a contract.</a></p>

<p>Similarly, <code>static char *FBSTR[4]</code> should be <code>static const char *FBSTR[4]</code>.</p>

<hr>

<pre><code>static const char *FBSTR[4] = {"", "Fizz", "Buzz", NULL};
</code></pre>

<p>would be much clearer to the human reader; it shows that you didn't miscount the number of array elements. In fact, you might even write</p>

<pre><code>static const char *FBSTR[] = {"", "Fizz", "Buzz", NULL};
</code></pre>

<p>although the downside of that is that the number of indices is actually <em>really important</em> to your algorithm, so I can see a valid argument for keeping the <code>4</code> in this case.</p>

<hr>

<pre><code>fputs(FBSTR[1 * (n%3 == 0)], stdout);
fputs(FBSTR[2 * (n%5 == 0)], stdout);
fputs(FBSTR[3 * (n%3 &gt; 0 &amp;&amp; n%5 &gt; 0)], stdout);
putchar('\n');
</code></pre>

<p>I did puzzle this out, but printing all those empty strings feels like a strange way to go about it. Why not simply</p>

<pre><code>int idx = 1*(n%3 == 0)
        + 2*(n%5 == 0)
        + 3*(n%3 != 0 &amp;&amp; n%5 != 0);
fputs(FBSTR[idx], stdout);
putchar('\n');
</code></pre>

<p>In which case you can combine the <code>fputs</code> and <code>putchar</code> into</p>

<pre><code>puts(FBSTR[idx]);
</code></pre>

<hr>

<p>If you think it would be easier to understand, you could even rewrite the index computation using bitwise operations:</p>

<pre><code>const char *FBSTR[] = {itoa(n), "Fizz", "Buzz", "FizzBuzz"};
int idx = (n%3 == 0) + 2*(n%5 == 0);
puts(FBSTR[idx]);
</code></pre>

<hr>

<p>To avoid reinventing the wheel, you could replace <code>itoa(n)</code> with <code>snprintf(somelocalbuffer, sizeof somelocalbuffer, "%d", n)</code>. However, for this toy example, <code>itoa</code> does have a more ergonomic interface; and reinventing the wheel isn't necessarily a bad thing.</p>
    </div>