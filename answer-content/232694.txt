<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is pretty neat. One major improvement would be the addition of some <em>magic</em> methods, like <code>__iter__</code>, <code>__getitem__</code>, <code>__setitem__</code> and <code>__str__</code>.</p>

<h1><strong>iter</strong></h1>

<p>The magic method you'll use the most wil be <code>__iter__</code>. It will allow you to do <code>for node in linked_list</code></p>

<pre><code>def __iter__(self):
    current = self.head
    while current:
        yield current
        current = current.next
</code></pre>

<p>If there is the possibility for loops in the linked list, this will go on forever. In that case, it might be best to raise a specific exception</p>

<pre><code>class LoopListError(Exception): pass
...
def __iter__(self):
    current = self.head
    visited = set()
    while current:
        if current in visited:
            raise LoopListError("f{current} is part of a loop")
        set.add(current)
        yield current
        current = current.next
</code></pre>

<p>Make sure never to change the list while iterating over it. This might lead to strange errors.</p>

<h1><code>__len__</code></h1>

<p>len(self) can be renamed to <code>__len_</code>, so you can do <code>len(linked_list)</code> . It can also be implemented like this:</p>

<pre><code>def __len__(self):
    return sum(1 for _ in self)
</code></pre>

<p>If there is a loop in the list, this wil raise the <code>LoopListError</code>. If, in that case,  you want the length of the non-looped part of the list, then you can do:</p>

<pre><code>def __len__(self):
    count = 0
    try:
        for _ in self:
            count += 1
    except LoopListError:
        pass
    return count
</code></pre>

<p>If you want it to iterate over the nodes values instead of the nodes themselves, you can just change the <code>yield current</code> to <code>yield current.data</code>. Whichever option is best depends on the design of the rest and the use of this list.</p>

<p>I think it's cleaner to provide a separate <code>iter_values</code> method:</p>

<pre><code>def iter_values(self):
    return (node.data for node in self)
</code></pre>

<p>You don't need a specific <code>min</code> and <code>max</code> method any more, but can use the builtins</p>

<h1><code>__getitem__</code></h1>

<p>In your implementation, you load the complete linked list into a builtin <code>list</code>. This is not needed. You can use <code>enumerate</code> to loop over the elements, and keep track of the index</p>

<pre><code>def __getitem__(self, index):
    for i, node in enumerate(self):
        if i == index:
            return node
    raise IndexError(f"{index} not found")
</code></pre>

<p>This works for positive indices. If you also want to accept negative indices, you need to convert the negative index to a positive one:</p>

<pre><code>def __getitem__(self, index):
    if index &lt; 0:
        l = len(self)
        if abs(index) &gt; l:
            raise IndexError(f"{index} out of range")
        index = l - index

    for i, node in enumerate(self):
        if i == index:
            return node
    raise IndexError(f"{index} out of range")
</code></pre>

<h1><code>__bool__</code></h1>

<p>In python, by convention, empty containers are <em>falsey</em>. Their <code>__bool__</code> function returns <code>False</code>.</p>

<pre><code>def __bool__(self):
    return self.head is not None
</code></pre>

<h1><code>arrayToLinked</code></h1>

<p>In python, it's seldomly necessary to loop over an index. Instead of <code>for i in range(1, len(arr))</code>, you can use <code>for value in arr:</code>. This only needs a bit of special handling for the head of the list. </p>

<p>Your <code>arrayToLinked</code> method corresponds to <code>list.extend(iterable)</code>  on an ordinary list. I only clears the list first. My suggestion would be to skip the clearing of the list. If the user wants a fresh list, he can either explicitly clear it himself, or call the constructor while providing the iterable:</p>

<pre><code>def extend(self, iterable):
    it = iter(iterable)
    if not self:
        try:
            self.head = Node(next(it))
        except StopIteration:
            self.head = None

    for value in it:
        self.append(Node(value))

def __init__(self, iterable=None):
    self.head = None
    if iterable is not None:
        self.extend(iterable)
</code></pre>

<hr>

<p>As409_conflict noted in the comments, this might not be the most performant method to use</p>

<p>if you provide a <code>tail</code> method,</p>

<pre><code>def tail(self):
    """
    returns the last element in the linked list. 
    """

    if self.head is None:
        return None
    for current in self:
        pass
    return current


def extend(self, iterable):
    it = iter(iterable)
    if not self:
        try:
            self.head = Node(next(it))
        except StopIteration:
            return
    current = self.tail()

    for value in it:
        current.next = current = Node(value)
</code></pre>

<h1><code>copy</code></h1>

<p>The copy then becomes as simple as</p>

<pre><code>def copy(self):
    return type(self)(self.iter_values())
</code></pre>

<h1><code>sort</code></h1>

<pre><code>def sort(self):
    sorted_values = sorted(self.iter_values())
    self.clear()
    self.extend(sorted_values )
</code></pre>

<p>Or, If you want to return a new instance</p>

<pre><code>def sort(self):
    return type(self)(sorted(self.iter_values()))
</code></pre>

<hr>

<p>In general, I suggest you take a look at the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python data model</a>, and what methods a standard <code>list</code> provides, and thy to mimic those behaviours</p>
    </div>