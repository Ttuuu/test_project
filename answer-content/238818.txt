<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>bugs</h1>

<p>Due to the extra <code>:</code> in the lines, <code>POI</code> and <code>Datum</code> are parsed incorrectly </p>

<pre><code>{'cp_poi': 'POI',
 'cp_terminal': 'ABC123',
 'cp_merchant': '123456',
 'cp_period': '1234',
 'cp_transaction': '12345678',
 'cp_card': 'xxxxxxxxxxxxxxx1234',
 'cp_card_serial_number': '0',
 'cp_date': '01/01/2020 04',
 'cp_authorisation_code': '123ABC',
 'cp_total': '1,00 EUR',
 'cp_card_type_id': '1234',
 'cp_card_type_text': 'MAESTRO',
 'cp_drawer_id': 'drawers/default',
 'cp_drawer_amount': '1,00',
 'cp_cancelable': 'True',
 'cp_card_type': 'NFC Chip'}
</code></pre>

<h1>alternate approach</h1>

<p>Instead of a giant <code>if-elseif-if</code> tree, I would as a function that parses a line, and returns the type of line with the value.</p>

<pre><code>def parse_line(line):
    """
    parses a line on a receipt. 

    Returns the datafield and value as a tuple 
    or tuple with the original text if there is no data on the line
    """
    return tuple(part.strip() for part in line.split(': ')[-2:])
</code></pre>

<p>Note that I split on <code>": "</code>. The space makes the parsing of the date correct. The <code>[-2:]</code> selects the last 2 items, making the POI  parse correctly.</p>

<pre><code>parsed_results = {
    result[0]: result[1]
    for result in (parse_line(line) for line in text.split("\n"))
    if len(result) &gt; 1
}
</code></pre>

<blockquote>
<pre><code>{'Text': 'PINNEN',
 'POI': '12345678',
 'Terminal': 'ABC123',
 'Merchant': '123456',
 'Periode': '1234',
 'Transactie': '12345678',
 'Kaart': 'xxxxxxxxxxxxxxx1234',
 'Kaartserienummer': '0',
 'Datum': '01/01/2020 04:15',
 'Autorisatiecode': '123ABC',
 'Totaal': '1,00 EUR',
 'Leesmethode': 'NFC Chip',
 'CardTypeId': '1234',
 'CardTypeText': 'MAESTRO',
 'ReceiptNumber': '',
 'DrawerAmount': '1,00',
 'Number': '1',
 'DrawerId': 'drawers/default',
 'DrawerNumber': '1',
 'Amount': '1,00',
 'IsCancelable': 'True'}
</code></pre>
</blockquote>

<p>Or you can use regular expressions</p>

<pre><code>import re

PATTERN = re.compile(r"(?:.*:\s*)?(\w+?):\s+(.*?)\s*$")

def parse_line2(line):
    return PATTERN.findall(line)

parsed_results2 = {
    result[0][0]: result[0][1]
    for result in (parse_line2(line) for line in text.split("\n"))
    if result
}
</code></pre>

<p>In this simple case I would use the first parser method. If the patterns get a little more complicated, You can change to the <code>re</code>.</p>

<h1>translation:</h1>

<p>Here I would use a dictionary that links all keywords in your return dictionary to the keys in the parsed lines:</p>

<pre><code>data_translation = {
    "cp_poi": "POI",
    "cp_terminal": "Terminal",
    "cp_merchant": "Merchant",
    "cp_period": "Periode",
    "cp_total": "Totaal",
    "cp_date": "Datum"
    # ...
}

result = {
    keyword: parsed_results.get(key_value, None)
    for keyword, key_value in data_translation.items()
}
</code></pre>

<blockquote>
<pre><code>{'cp_poi': '12345678',
 'cp_terminal': 'ABC123',
 'cp_merchant': '123456',
 'cp_period': '1234',
 'cp_total': '1,00 EUR',
 'cp_date': '01/01/2020 04:15'}
</code></pre>
</blockquote>

<h1>further parsing.</h1>

<p>Since functions can be values in a dictionary, you can add functions to further process the values. For example convert thetotal to a tuple of <code>value, currency</code>, transform the date from a string to a <code>datetime object,...</code></p>

<pre><code>import decimal

def parse_amount(amount):
    """converts an amount to a tuple of amount, currency"""
    value, currency = amount.split(" ")
    value = value.replace(",", ".")
    context = decimal.Context(prec=2, rounding=decimal.ROUND_HALF_UP)
    value_decimal = decimal.Decimal(value, context=context).quantize(
        decimal.Decimal("0.01")
    )
    return value_decimal, currency

def parse_date(date_str):
    return datetime.datetime.strptime(date_str, "%d/%m/%Y %H:%M")

converters = {
    "cp_date": parse_date,
    "cp_total": parse_amount
}
converted_result = {
    key: converters.get(key, lambda x: x)(value)
    for key, value in results.items()
}
</code></pre>

<blockquote>
<pre><code>{'cp_poi': '12345678',
 'cp_terminal': 'ABC123',
 'cp_merchant': '123456',
 'cp_period': '1234',
 'cp_total': (Decimal('1.00'), 'EUR'),
 'cp_date': datetime.datetime(2020, 1, 1, 4, 15)}
</code></pre>
</blockquote>

<h1>other remarks:</h1>

<h2>docstring</h2>

<p>Use a docstring to describe what the method does</p>

<h1>formatting</h1>

<p>I don't like this style of dict literal</p>

<pre><code>cp = {'cp_poi': cp_poi,
      'cp_terminal': cp_terminal,
      'cp_merchant': cp_merchant,
      # ...
      'cp_cancelable': cp_cancelable,
      'cp_card_type': cp_card_type}
</code></pre>

<p>I use <a href="https://github.com/psf/black" rel="nofollow noreferrer"><code>black</code></a> with a line length of 79 as automatic formatter</p>

<p>Which turns this into </p>

<pre><code>cp = {
    "cp_poi": cp_poi,
    "cp_terminal": cp_terminal,
    "cp_merchant": cp_merchant,
    # ...
    "cp_cancelable": cp_cancelable,
    "cp_card_type": cp_card_type,
}
</code></pre>

<p>This minimizes the hassle if I want to remove or add a line, also in the git diffs.</p>

<h1>Data structures</h1>

<p>In general, if you needa lot of variables, each only differing in a slight amount, you can use a better data structure. In this case, this is with dicts, instead of the dozen variables and lone if-else tree. Get to know the python data structures, and the different looping arrangements in Python. Almost never is a dozen variables the best solution.</p>
    </div>