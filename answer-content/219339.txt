<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The following are a few suggestions on how I'd write your view.</h1>
<p><strong>Source Control</strong></p>
<p>If you don't already have a <a href="https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-data-tools/hh272677(v=vs.103)" rel="nofollow noreferrer">database project</a>, create one in <a href="https://visualstudio.microsoft.com/" rel="nofollow noreferrer">Visual Studio</a>. Then check it in to source control. <a href="https://azure.microsoft.com/en-au/services/devops/" rel="nofollow noreferrer">Microsoft Azure DevOps Services</a> is free &amp; private for teams of 5 or less (this is per project, so 5 developers per project). Then you'll be able to track changes you make to your stored procedures, views, tables, etc.</p>
<p><strong>Formatting</strong></p>
<p>I would download the following tool for SSMS and Visual Studio, <a href="https://marketplace.visualstudio.com/items?itemName=TaoKlerks.PoorMansT-SqlFormatterSSMSVSExtension" rel="nofollow noreferrer">Poor Man's T-Sql Formatter</a> and on <a href="https://github.com/TaoK/PoorMansTSqlFormatter" rel="nofollow noreferrer">GitHub</a>. I use it when I have to edit other developer's code. It's a great way to standardize your SQL. I find it does most of the formatting for me, but I'll still make a few changes after.</p>
<p>Here are the settings I used:</p>
<p><a href="https://i.stack.imgur.com/aBD8y.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/aBD8y.png" alt="screenshot"></a></p>
<p><strong>Commas</strong></p>
<p>I would put the commas in front to clearly define new columns. Versus code wrapped in multiple lines. It also makes trouble-shooting code easier.</p>
<p><strong>Where Clause</strong></p>
<p>If you put <code>1=1</code> at the top of a <code>WHERE</code> condition, it enables you to freely change the rest of the conditions when debugging a query. The SQL query engine will end up ignoring the <code>1=1</code> so it should have no performance impact. <a href="https://stackoverflow.com/q/242822/9059424">Reference</a></p>
<p><strong>Common Table Expressions (CTE)</strong></p>
<p><a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql?view=sql-server-2017" rel="nofollow noreferrer">CTE's</a> in your SQL help with documentation. The expression name can then let other developers know why you used that expression e.g. <code>current_suppliers</code> or <code>active_projects</code>.</p>
<p><strong>Schema Names</strong></p>
<p>Always reference the schema when selecting an object e.g. <code>[dbo].[SalesTable]</code>.</p>
<p><strong>Estimated Execution Plan</strong></p>
<p>It's a good idea to check the <a href="https://docs.microsoft.com/en-us/sql/relational-databases/performance/display-the-estimated-execution-plan?view=sql-server-2017" rel="nofollow noreferrer">Estimated Execution Plan</a>. The shortcut in Microsoft SQL Server Management Studio (SSMS) is <kbd>Ctrl</kbd> + <kbd>L</kbd>. You can even run 2 queries in the same tab to compare the plans.</p>
<p><strong>Keywords</strong></p>
<p>Avoid using keywords as object names. <a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/reserved-keywords-transact-sql?view=sql-server-2017" rel="nofollow noreferrer">Microsoft Reference</a></p>
<ul>
<li>Also check out the book <a href="https://rads.stackoverflow.com/amzn/click/0132350882" rel="nofollow noreferrer"><em>Clean Code</em></a>. It will change the way you think about naming conventions.</li>
</ul>
<hr>
<p><strong>Revised SQL</strong></p>
<p>Without table definitions and sample records I was unable to test this, but it should give you a good start.</p>
<pre><code>WITH
earliest_interaction
AS
(
    SELECT 
          [min_createdate] = CAST(MIN(r.[CreateDate]) AS DATE)
        , r.[Email]
    FROM 
        [dbo].[Results] AS r
    WHERE 
        1=1
        AND (r.[Email] IS NOT NULL AND r.[Email] != '')
    GROUP BY 
        r.[Email]
)
,
log_files
AS
(
    SELECT [Email] FROM [dbo].[LOG1] WHERE [Source] = 'LOGGED'
    UNION
    SELECT [Email] FROM [dbo].[LOG2] WHERE [Source] = 'LOGGED'
)
SELECT 
      ei.[min_createdate]
    , ei.[Email]
FROM 
    earliest_interaction AS ei
    INNER JOIN log_files AS lf ON lf.[Email] = ei.[Email]
WHERE 
    1=1
    AND (ei.[min_createdate] &gt;= DATEADD(YEAR, -1, GETDATE()))
</code></pre>
    </div>