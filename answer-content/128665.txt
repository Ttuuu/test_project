<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>threading</h1>

<p>So… you use multithreading to spawn 1 thread that execute a sequential function (meaning the function won't spawn any more threads) and do nothing in the meantime. That is, your main thread is just waiting for the thread executing the <code>main()</code> function to complete. I’m unsure about why you would do something like that, but it's a waste of resources.</p>

<h1>compute_height</h1>

<p>Checking if a sequence is empty is usualy done by testing the sequence directly since an implicit call to <code>bool()</code> is performed as needed. <code>bool()</code> returns <code>False</code> on an empty sequence and <code>True</code> otherwise. You can thus write:</p>

<pre><code>if tree['childreen']:
    return 0
else:
    …
</code></pre>

<p>You can also make use of generator expressions to avoir building a temporary list in memory:</p>

<pre><code>max_value = max(self.compute_height(child) for child in tree['children'])
return 1 + max_value
</code></pre>

<p>And, last but not least, you can make use of the <code>default</code> parameter of <code>max()</code> to avoid checking for empty sequence:</p>

<pre><code>def compute_height(self, tree):
    children = tree['children']
    return 1 + max((self.compute_height(c) for c in children), default=-1)
</code></pre>

<h1>getChildren</h1>

<p>First of, you should be consistent in your naming. Either use <em>camelCase</em> or <em>snake_case</em> but not both. PEP8 recommends <em>snake_case</em>.</p>

<p>Second, you could make use of list-comprehensions to simplify the writting and avoid calling <code>append</code>:</p>

<pre><code>parent['children'] = [
    self.getChildren(child, nodes)
    for child, node in enumerate(nodes)
    if node == parent['key']
]
</code></pre>

<p>Since it is the only operation you do besides building the <code>parent</code> dictionary, you could build this list and <em>then</em> build the dictionary:</p>

<pre><code>def get_children(self, root_node, nodes):
    children = [
        self.get_children(child, nodes)
        for child, node in enumerate(nodes)
        if node == root_node
    ]
    return {'key': root_node, 'children': children}
</code></pre>

<h1>read</h1>

<p>You can read from <code>stdin</code> using the builtin <code>input()</code> function. It will return a line of input at each call:</p>

<pre><code>def read(self):
    self.n = int(input())
    self.parent = list(map(int, input().split()))
</code></pre>

<p>However, you’re never making use of <code>self.n</code> in your program, so you might as well avoid storing it:</p>

<pre><code>def read(self):
    input()  # throw away number of nodes
    self.parent = list(map(int, input().split()))
</code></pre>

<h1>TreeHeight</h1>

<p>Building a class is generaly done to save a state and have utility functions that operates on said state. As regard to how you use it, I'd say you don't need a class. Just having a function building a tree and a function computing its height is enough. Your functions already have the right parameters to operate on without using the state associated to your objects.</p>

<p>You could thus simplify your code to:</p>

<pre><code>def build_tree(root_node, nodes):
    children = [
        build_tree(child, nodes)
        for child, node in enumerate(nodes)
        if node == root_node
    ]
    return {'key': root_node, 'children': children}

def compute_height(tree):
    return 1 + max((compute_height(c) for c in tree['children']), default=-1)

def main():
    input()  # Throw away the number of nodes
    tree = build_tree(-1, list(map(int, input().split())))
    print(compute_height(tree))

if __name__ == '__main__':
    main()
</code></pre>
    </div>