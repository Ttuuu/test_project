<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use Doxygen to document your code</h1>

<p>It's already mentioned by others, but you have a lot of comments. It's good to document all the functions, but you are not using a standard code documentation language as far as I can tell. I recomment that you use <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">Doxygen</a>. The advantage is that it understands C and C++, and will perform checks on your documentation, such as that you documented all the parameters and the return value. Furthermore, it allows the creation of a manual in PDF and HTML formats (amongs others), which are much nicer for a developer to read than having to read the source files.</p>

<h1>Avoid (complex) macros</h1>

<p>It's always better to use functions than macros. If you cannot avoid macros, for example to allow arbitrary type arguments to be passed, it is better to create a simple macro to deal with the parameter type, and then call a regular function to do the main work. For example:</p>

<pre><code>static inline int alx_callocs_impl(void **ptr, size_t nmemb, size_t size) {
    *ptr = calloc(nmemb, size);
    return !*ptr;
}

#define alx_callocs(ptr, nmemb) alx_callocs_impl((ptr), (nmemb), sizeof(ptr))
</code></pre>

<h1>About the disclaimers</h1>

<blockquote>
  <p>The library requires POSIX extensions, GCC extensions, and LIBBSD extensions</p>
</blockquote>

<p>That's a lot of requirements for such a low-level library, making it much less useful. Even if this library is only for your personal use, consider that in the future you might want to port your projects to platforms that don't support POSIX, libbsd or GCC.</p>

<blockquote>
  <p>I use goto because it is cleaner to me (the way I use it)</p>
</blockquote>

<p>I think a lot of these uses of <code>goto</code> are unnecessary. For example, you can rewrite <code>alx_mallocarray()</code> like this:</p>

<pre><code>inline void *alx_mallocarray(ptrdiff_t nmemb, size_t size) {
    if (nmemb &lt; 0) {
        errno = ENOMEM
        return NULL;
    }

    return reallocarray(NULL, nmemb, size);
}
</code></pre>

<blockquote>
  <p>I acknowledge some inconsistency in the parameter nmemb which is sometimes ptrdiff_t and some others size_t. I would like it to always be ptrdiff_t, but in the macros that call standard functions (instead of mine) those standard functions accept size_t, and the code to reject negative values of ptrdiff_t inside a macro would make the macros too long and dangerous. In functions and in macros that call functions of mine, I consistently use ptrdiff_t.</p>
</blockquote>

<p>There is a reason that standard library and POSIX functions use unsigned types like <code>size_t</code> sometimes, and signed types like <code>int</code> or <code>ssize_t</code> at other times, and there is a consistency to it. When a parameter should never be a negative number, <code>size_t</code> is used. Doing so will make it easier to catch errors; and avoids you having to write checks like <code>if (nmemb &lt; 0)</code>.</p>

<p>Another reason not to use different parameter types than those used by standard library functions is that it goes against users' expectations.</p>
    </div>