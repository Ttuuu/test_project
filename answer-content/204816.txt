<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another possibility :</p>

<pre><code>cols &lt;- c('var_in', 'var_out')
missing_variables &lt;- cols[!colSums(!is.na(input_df[cols]))]
if (length(missing_variables) == 2) 
  stop("both var_in and var_out are completely missing, so I cannot continue the EDA")
</code></pre>

<p>Let's unwrap the definition of <code>missing_variables</code> :</p>

<ul>
<li><code>!is.na(input_df[cols])</code> creates a matrix of logicals indicating if elements are <code>NA</code> (<code>FALSE</code>) or not (<code>TRUE</code>), </li>
<li><code>colSums(!is.na(input_df[cols]))</code> sum the columns of this matrix, <code>FALSE</code> is coerced to <code>0</code> and <code>TRUE</code> to <code>1</code> so a column will be full of <code>NA</code> if and only if this sum is <code>O</code></li>
<li>In <code>!colSums(!is.na(input_df[cols]))</code>, <code>!</code> changes <code>0</code> to <code>TRUE</code> and any other number to <code>FALSE</code>, so we get a vector of logical indicating if the variable is missing (<code>TRUE</code>) or not</li>
<li><code>cols[!colSums(!is.na(input_df[cols]))]</code> subsets <code>cols</code> to keep only "missing variables"</li>
</ul>
    </div>