<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's one major problem with the code:</p>

<p><strong>Your move assignment is broken.</strong></p>

<p>You forgot to <code>close(_s)</code> before overwriting it with <code>other._s</code>.</p>

<p>To avoid this kind of problems, I suggest using the copy-and-swap idiom. It makes writing a <code>operator=</code> a no-brainer in most cases:</p>

<pre><code>tcp_socket &amp;operator=(tcp_socket other) noexcept // Note the lack of `&amp;&amp;`.
{
    std::swap(_s, other._s);
    return *this;
}
</code></pre>

<p>If you decide to do this, you also need to remove <code>tcp_socket&amp; operator=(const tcp_socket&amp; other) = delete;</code> to prevent it from conflicting with this operator.</p>

<hr>

<p>Additionally...</p>

<p><strong>You shouldn't do <code>close(-1)</code>.</strong></p>

<p>Moving an object sets <code>_s</code> of the original object to <code>-1</code>.</p>

<p><code>close(-1)</code> is not a no-op. (It sets <code>errno</code> to 'bad file descriptor'.) Thus the destructor should do</p>

<pre><code>if (_s != -1)
    close(_s);
</code></pre>

<p><strong>It would be a good idea to have a way to create a 'null' <code>tcp_socket</code> instance.</strong></p>

<p>Instances of <code>tcp_socket</code> don't necessarily own sockets. By moving from an instance, or make it 'null' (i.e. it no longer owns a socket).</p>

<p>IMO, it would make sense to have a way to directly create 'null' intstances.</p>

<p>I wouldn't open the socket in <code>socket()</code>, and create a separate constructor that does open one.</p>

<p><strong>You don't <em>have</em> to explicitly delete the copy constructor and assignment operator.</strong></p>

<p>Declaring a move constructor or assignment operator causes both the constructor and assignment operator to be implicitly deleted. </p>

<p>Whether or not you <em>should</em> delete them explicitly (for extra clarity) is a different question.</p>
    </div>