<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't think Josay mentioned these yet.</p>

<hr>

<pre><code>for rows in likes: 
    repeatCheck = []        
    userCount += 1
</code></pre>

<p>Since you are counting what you are iterating, it would be Pythonic to use <code>enumerate</code>:</p>

<pre><code>for userCount, rows in enumerate(likes, start=1):
</code></pre>

<p>Also, <code>repeatCheck</code> above is only used for <code>in</code> and appending, so a <code>set</code> would be appropriate.</p>

<hr>

<p>You have several instances of:</p>

<pre><code>copy.deepcopy(userLikes[1:])
</code></pre>

<p>For no good reason. Slicing <code>userLikes[1:]</code> already creates a new list. You don't seem to be <em>modifying</em> anything you take out of the list either, which would explain a deep copy. Even worse, you then use the likes in:</p>

<pre><code>userLikes.remove(like)
</code></pre>

<p>which could be wrong for some deepcopied objects (it's not clear what object <code>like</code> is and is composed of).</p>

<p>If there is a reason for the deep copy that I'm not seeing, it should definitely be mentioned in a comment. Right now it just looks like defensive programming gone wrong.</p>

<hr>

<p>One of my pet peeves is:</p>

<pre><code>for rows in likes: 
    #...
    if len(toCheck) &lt; 1000:
        # huge if block containing the rest of the loop
</code></pre>

<p>If you are going to have a skip path, you can use continue to avoid indentation. This often makes the logic clearer as well.</p>

<pre><code>for rows in likes: 
    #...
    if len(toCheck) &gt;= too_large:
        continue
</code></pre>

<p>Now the code clearly says "skip too large values". Note naming the magic value â€“ not always necessary, but can lead to self documenting code.</p>

<p>(Same is possible with <code>return</code> in functions. It doesn't <em>always</em> lead to clearer code, so it's not a pattern to blindly follow.)</p>
    </div>