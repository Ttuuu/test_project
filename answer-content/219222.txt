<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For what it’s worth, when I see a progression like this, I lean towards <code>Sequence</code>/<code>Iterator</code> pattern, e.g.:</p>

<pre><code>struct CountAndSayIterator&lt;T&gt;: IteratorProtocol where T: RangeExpression, T.Bound == Int {
    private let range: T
    private var currentValue: String = ""
    private var currentIndex: Int = 0

    init(_ range: T) {
        self.range = range

        // burn off values if we have to

        while !range.contains(currentIndex) {
            calculateNext()
        }
    }

    mutating func next() -&gt; String? {
        guard range.contains(currentIndex) else {
            return nil
        }

        return calculateNext()
    }

    @discardableResult
    private mutating func calculateNext() -&gt; String? {
        currentIndex += 1

        if currentValue.isEmpty {
            currentValue = "1"
            return currentValue
        }

        var iterator = currentValue.makeIterator()

        guard var previousCharacter: Character = iterator.next() else { return nil }
        var count = 1

        var character: Character?
        var result = ""

        repeat {
            character = iterator.next()
            switch character {
            case previousCharacter:
                count += 1

            default:
                result += "\(count)\(previousCharacter)"
                if let character = character {
                    previousCharacter = character
                    count = 1
                }
            }
        } while character != nil

        currentValue = result
        return result
    }
}

struct CountAndSaySequence&lt;T&gt;: Sequence where T: RangeExpression, T.Bound == Int {
    let range: T

    init(_ range: T) {
        self.range = range
    }

    func makeIterator() -&gt; CountAndSayIterator&lt;T&gt; {
        return CountAndSayIterator(range)
    }
}
</code></pre>

<p>Then you can do natural things like:</p>

<pre><code>for value in CountAndSaySequence(0..&lt;5) {
    print(value)
}
</code></pre>

<p>Or</p>

<pre><code>let array = Array(CountAndSaySequence(0...4))
print(array)
</code></pre>

<p>And, when you have this <code>Iterator</code> that calculates the values for you, you can implement the requested method like so:</p>

<pre><code>func countAndSay(_ n: Int) -&gt; String {
    var iterator = CountAndSayIterator(n...)
    return iterator.next()!
}
</code></pre>

<p>Clearly, I’m using a zero-based index and this question, despite our living in a zero-based world, is using 1-based index, so adjust that <code>countAndSay</code> method as you see fit.</p>

<p>And, obviously, if you wanted, you could further extend this <code>CountAndSaySequence</code> type to be a <code>Collection</code> with caches for previously calculated values, etc. But that seemed beyond the scope of this question.</p>

<p>But using <code>Sequence</code> feels a bit swiftier to me.</p>
    </div>