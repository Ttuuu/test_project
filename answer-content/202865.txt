<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That <code>SalesAPI</code> is doing way too much. Which violates Single Responsibility Principle (SRP). The fluent interface also feels like over engineering but it can still be workable with some modifications to the current  design.</p>

<p>My first suggestion would be to simplify the main class and follow <a href="https://deviq.com/explicit-dependencies-principle/" rel="nofollow noreferrer">Explicit Dependency Principle</a>.</p>

<blockquote>
  <p>Methods and classes should explicitly require (typically through method parameters or constructor parameters) any collaborating objects they need in order to function correctly.</p>
</blockquote>

<p>The following abstraction </p>

<pre><code>public interface ISalesApi {
    Task&lt;SalesOrderObject&gt; GetSalesOrderDetailsAsync(SalesApiOptions options);
}
</code></pre>

<p>demonstrates this, with the <code>SalesApiOptions</code> argument being used to hold the necessary parameters for the request.</p>

<p>The <code>SalesApiOptions</code> will hold a collection of key-value pairs that represents the parameters to be sent to the API</p>

<pre><code>public class SalesApiOptions : Dictionary&lt;string, object&gt; {

}
</code></pre>

<p>A series of extension methods can be used to implement the fluent interface on the options as parameters are set</p>

<pre><code>public static class SalesApioptionsExtensions {
    public static SalesApiOptions SetProductNum(this SalesApiOptions options, List&lt;string&gt; productNumbers) {
        options["productNum"] = productNumbers;
        return options;
    }

    public static SalesApiOptions SetProductNum(this SalesApiOptions options, string productNumber) {
        options.SetProductNum(new List&lt;string&gt; { productNumber });
        return options;
    }

    public static SalesApiOptions SetCompany(this SalesApiOptions options, List&lt;string&gt; companies) {
        options["company"] = companies;
        return options;
    }

    public static SalesApiOptions SetCompany(this SalesApiOptions options, string company) {
        options.SetCompany(new List&lt;string&gt; { company });
        return options;
    }

    public static SalesApiOptions SetBillToCustCode(this SalesApiOptions options, List&lt;string&gt; custCodes) {
        options["custPOBillToID"] = custCodes;
        return options;
    }

    public static SalesApiOptions SetBillToCustCode(this SalesApiOptions options, string custCode) {
        options.SetBillToCustCode(new List&lt;string&gt; { custCode });
        return options;
    }

    public static SalesApiOptions SetCustPONum(this SalesApiOptions options, List&lt;string&gt; custPONums) {
        options["custPONum"] = custPONums;
        return options;
    }

    public static SalesApiOptions SetCustPONum(this SalesApiOptions options, string custPONum) {
        options.SetCustPONum(new List&lt;string&gt; { custPONum });
        return options;
    }

    public static SalesApiOptions SetWarehouse(this SalesApiOptions options, List&lt;string&gt; warehouses) {
        options["warehouse"] = warehouses;
        return options;
    }

    public static SalesApiOptions SetWarehouse(this SalesApiOptions options, string warehouse) {
        options.SetWarehouse(new List&lt;string&gt; { warehouse });
        return options;
    }

    public static SalesApiOptions SetShipToCustCode(this SalesApiOptions options, List&lt;string&gt; custCodes) {
        options["custShipToID"] = custCodes;
        return options;
    }

    public static SalesApiOptions SetShipToCustCode(this SalesApiOptions options, string custCode) {
        options.SetBillToCustCode(new List&lt;string&gt;() { custCode });
        return options;
    }

    public static SalesApiOptions SetDeliveryDateRange(this SalesApiOptions options, DateTime start, DateTime end) {
        options["startDeliveryDate"] = start.ToPPROFormattedDate();
        options["endDeliveryDate"] = end.ToPPROFormattedDate();
        return options;
    }

    public static SalesApiOptions SetShipDateRange(this SalesApiOptions options, DateTime start, DateTime end) {
        options["startShipDate"] = start.ToPPROFormattedDate();
        options["endShipDate"] = end.ToPPROFormattedDate();
        return options;
    }

    public static SalesApiOptions SetPickDateRange(this SalesApiOptions options, DateTime start, DateTime end) {
        options["startPickDate"] = start.ToPPROFormattedDate();
        options["endPickDate"] = end.ToPPROFormattedDate();
        return options;
    }

    public static SalesApiOptions SetStatus(this SalesApiOptions options, string status) {
        options["status"] = status;
        return options;
    }

    public static SalesApiOptions SetUsername(this SalesApiOptions options, string username) {
        options["username"] = username;
        return options;
    }
}
</code></pre>

<p>The key-value design of the <code>SalesApiOptions</code> still allows for other additional parameters to be added if needed.</p>

<pre><code>options["someKey"] = "some value";
</code></pre>

<p>This simplifies the <code>SalesApi</code> to </p>

<pre><code>public class SalesAPI : ISalesApi {
    private static HttpClient _client = new HttpClient();
    private string url;

    public SalesAPI(string url) {
        this.url = url;
    }

    public async Task&lt;SalesOrderObject&gt; GetSalesOrderDetailsAsync(SalesApiOptions options) {
        options["appId"] = "APISALES";
        options["command"] = "getSalesOrderDetails";
        // Parameters["username"] = HttpContext.Current.User.Identity.GetShortADName();

        var json = JsonConvert.SerializeObject(options);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await _client.PostAsync(url, content);
        var result = await response.Content.ReadAsAsync&lt;SalesOrderObject&gt;();
        return result;
    }
}
</code></pre>

<p>Note the removal of the tight coupling to <code>HttpContext</code>. I had a difficult time trying to figure out how to rework setting the user name without the tight coupling, but settled on an extension method</p>

<pre><code>public static SalesApiOptions SetUsername(this SalesApiOptions options, string username) {
    options["username"] = username;
    return options;
}
</code></pre>

<p>and having the caller decide.</p>

<p>So with all that, calling the refactored API would look like</p>

<pre><code>var salesAPI = new SalesAPI("https://xxxxx.xxxxx.com/yyyyy/services");
var companies = new List&lt;string&gt;()
{
    "0002",
    "0007",
    "0009"
};

var options = new SalesApiOptions()
    .SetCompany(companies)
    .SetDeliveryDateRange(DateTime.Now.AddDays(-3), DateTime.Now.AddDays(3))
    .SetProductNum("17876")
    .SetUsername(HttpContext.Current.User.Identity.GetShortADName());

return await salesAPI.GetSalesOrderDetailsAsync(options);
</code></pre>
    </div>