<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We take take advantage of these features of <code>numpy</code> to reduce the code quite a bit:</p>

<ol>
<li>array reshaping</li>
<li>array row, column and diagonal slices</li>
<li><code>np.prod</code> to compute the product of all elements in an array</li>
<li>flipping the array to get anti-diagonals</li>
</ol>

<h1>Reshaping</h1>

<p>Reshaping allows you to (for instance) reorganize a 1-dimensional array into a 2-dimenstional array. Just the dimension metadata is changed so the operation is very efficient:</p>

<pre><code>a = np.array([1,2,3,4,5,6]).reshape(3,2)
print a

[[1 2]
 [3 4]
 [5 6]]
</code></pre>

<h1>Slicing</h1>

<p>Here are example of how to take row, column and diagonal slices of arrays:</p>

<pre><code>import numpy as np

a = np.array( [[11,12,13,14,15,16],
               [21,22,23,24,25,26],
               [31,32,33,34,35,36],
               [41,42,43,44,45,46]
              ] )

print "row",     a[1][3:5]         # horizontal slice, row 1, columns 3..5
print "column:", a[:,4]            # column 4
print "diag:",   np.diagonal(a, 2) # 2nd diagonal
</code></pre>

<p>Note that row and column indices start from 0. In the case of diagonals, 0 is the main diagonal, with positive diagonals to the right and negative diagonals to the left of the main.</p>

<h1>Products</h1>

<p>And here is how to use <code>np.prod</code>:</p>

<pre><code>a = np.array([5,6,7,8])
print np.prod(a)             # prints 1680
</code></pre>

<h1>Anti-diagonals</h1>

<p>We can get anti-diagonals by first flipping the matrix along one of its dimensions:</p>

<pre><code>a = np.array([1,2,3,4,5,6,7,8]).reshape(2,4)
b = a[::-1,]
print b
</code></pre>

<p><code>b</code> has the same shape as <code>a</code> and the diagonals of <code>b</code> are the anti-diagonals of <code>a</code>.</p>

<h1>Solution</h1>

<p>Putting it all together:</p>

<pre><code>def euler11():
  data = """
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
"""
  a = np.array([ int(x) for x in data.split() ]).reshape(20,20)
  # print a
  b = a[::-1,]

  maxprod = 0
  for i in xrange(20):
    for j in xrange(20):
      r = np.prod( a[i][j:j+4] )
      c = np.prod( a[:,j][i:i+4] )
      k = min(i,j)
      d1 = np.prod( np.diagonal(a, j-i)[ k:k+4 ] )
      d2 = np.prod( np.diagonal(b, j-i)[ k:k+4 ] )
      maxprod = max([maxprod,r,c,d1,d2])
  print maxprod
</code></pre>

<p>Note here is <code>i,j</code> represents the upper left corner of either the row, column or diagonal we are taking the product of. <del>That's why both range from 0 to 16</del> We just run both <code>i</code> and <code>j</code> from 0 through 19. We examine a few extra products (some with less than 4 terms), but since we are looking for the maximum it doesn't matter.</p>
    </div>