<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Some notes on readability</strong></p>

<p>I will focus on method <code>getQuestion</code>. The first thing I noticed is that your indentation is very confusing. You start with an outer loop, and it looks it contains only 2 statements. However, the entire remaining method body is part of that loop. This pop in indentation introduced at <code>var characters</code> should never have been there.</p>

<blockquote>
<pre><code>for(var i = 0; i &lt; questionsdata.length; i++){
        questions[i] = questionsdata[i].question;
        incorrect[i] = questionsdata[i].incorrect_answers;

    var characters = ['&amp;amp;;', '&amp;quot;', // .. and so on
    var actual =  ['&amp;', '"', "'", "'", '"', '"', 'é', '-', 'Ü', 'Á', 'á'];
    // .. other code
</code></pre>
</blockquote>

<p>To increase readaibility, you migth also want to introduce some whitespace here and there:</p>

<pre><code>for (var i = 0; i &lt; questionsdata.length; i++) {
</code></pre>

<p>rather than</p>

<blockquote>
<pre><code>for(var i = 0; i &lt; questionsdata.length; i++){
</code></pre>
</blockquote>

<p>But I would use a different syntax than the <code>for (;;)</code> pattern altogether. You have statements deep in the method body that use indexes from both an inner and the outer loop:</p>

<blockquote>
<pre><code>correct[i].replace(new RegExp(characters[j], 'g'), actual[j])
</code></pre>
</blockquote>

<p>I'd have to scroll up to see what <code>j</code> and <code>i</code> represent.</p>

<p>A more readable option is to use the <code>for (. of .)</code> pattern. This would avoid the indexes.</p>

<p>You'd get:</p>

<pre><code>for (const question of questionsdata) {
</code></pre>

<p>as opposed to:</p>

<blockquote>
<pre><code>for (var i = 0; i &lt; questionsdata.length; i++) {
</code></pre>
</blockquote>

<p>You'd have to refactor some variables though, no longer to use the indexes:</p>

<blockquote>
<pre><code>incorrect[i][j] = // ..
</code></pre>
</blockquote>

<p>To avoid verbose loops you should check out some built-in methods, they might do the trick for you (<code>forEach</code>, <code>filter</code>, <code>map</code>, <code>reduce</code>, ..). I believe many of your inner loops could be rewritten in this style.</p>

<p>You should also be careful using <code>var</code>, it has a <a href="https://stackoverflow.com/questions/1470488/what-is-the-purpose-of-the-var-keyword-and-when-should-i-use-it-or-omit-it">scope</a> broader than the current block, unlike <code>let</code> and <code>const</code>. This could introduce unwanted behavior if you don't take the scope into account.</p>
    </div>