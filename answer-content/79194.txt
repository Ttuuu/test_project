<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug</h3>

<p>The <code>!=</code> operator returns true if <em>both</em> the real and imaginary parts are different.
That's clearly a bug.</p>

<p>Instead of this:</p>

<blockquote>
<pre><code>bool operator!=(const Complex a_, const Complex b_)
{
    return (a_.GetR() != b_.GetR() &amp;&amp; a_.GetI() != b_.GetI());
}
</code></pre>
</blockquote>

<p>You probably meant this:</p>

<pre><code>bool operator!=(const Complex a_, const Complex b_)
{
    return (a_.GetR() != b_.GetR() || a_.GetI() != b_.GetI());
}
</code></pre>

<h3>Coding style, readibility</h3>

<p>A common writing style is to put spaces around operators. For example instead of this:</p>

<blockquote>
<pre><code>double a=a_.GetR(), b=a_.GetI();
double c=b_.GetR(), d=b_.GetI();

Complex ret(a*c-b*d, b*c+a*d);

Complex ret(a_.GetR()+b_.GetR(), a_.GetI()+b_.GetI());
</code></pre>
</blockquote>

<p>Write this way:</p>

<pre><code>double a = a_.GetR(), b = a_.GetI();
double c = b_.GetR(), d = b_.GetI();

Complex ret(a * c - b * d, b * c + a * d);

Complex ret(a_.GetR() + b_.GetR(), a_.GetI() + b_.GetI());
</code></pre>

<p>The difference may be subtle, but it makes the code easier to read.</p>
    </div>