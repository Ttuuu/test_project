<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A conditional lookup array? Why do it? I never have and don't see the advantage. I think it would be cleaner to separate the data from the processing.  To do this, just add a higher level key...</p>

<pre><code>$allowedMimeTypes = [
    'images' =&gt; [
        'jpeg' =&gt; ...
    ],
    'all' =&gt; [
        'ez' =&gt; ...
    ]
];
</code></pre>

<p>This places all of the data with a similar purpose in a single, expressive lookup.  Downscript, you won't ever need to scroll back up to the top of your function to check which lookup array (which in your code will have one variable name, but two potential sets of data) that you are dealing with.</p>

<p>Furthermore, if you define the lookup as a constant, it becomes globally available.  This will afford you the ability to pull the general-use lookup out of the function and potentially share it elsewhere -- this is best practice.</p>

<p>With a static lookup array, all of your conditional logic can be written in a much tighter condition block.  You simply use your incoming function parameters to determine which parent key should be used on the lookup array.</p>

<p>Never use <code>@</code> as a silencer.  Always properly handle your data.</p>

<p>If you want to know if something <code>isset</code> and has <code>count</code>, use <code>!empty()</code>.  After you ensure that a variable exists via <code>isset()</code>, <code>array_key_exists()</code>, or <code>empty()</code>, then you can move on to accessing or counting the data as required.  If you know an array-type variable exist and you want to check if it is empty, you can simply use <code>!$variable</code> and spare a function call.</p>

<p>This line doesn't do what the comment says it does:</p>

<pre><code>$uploadPath = rtrim($uploadPath, '/') . '/'; // Checking if path ends in '/' ... if not then tack it on.
</code></pre>

<p>Either explain that it eliminates any right-hand side slashes, then appends a slash or change the code to something like:</p>

<pre><code>if (substr($uploadPath, -1) != '/') {
    $uploadPath .= '/';
}
</code></pre>

<p>Always use curly braces for every loop and condition block.  This will avoid accidental typos and make your code easier to read.  Never write nested if conditions in a single line ...for the same reason.</p>

<p>For simplicity,</p>

<pre><code>if((!empty($_FILES[$fileField])) &amp;&amp; ($_FILES[$fileField]['error'] == 0)) {
</code></pre>

<p>can be:</p>

<pre><code>if (!empty($_FILES[$fileField]) &amp;&amp; !$_FILES[$fileField]['error']) {
</code></pre>

<p>As a matter of consistency, I recommend always using <code>&amp;&amp;</code> and <code>||</code> in php versus <code>AND</code> and <code>OR</code>.  This will prevent any trip ups regarding precedence.  <a href="https://stackoverflow.com/a/2803576/2943403">'AND' vs '&amp;&amp;' as operator</a></p>
    </div>