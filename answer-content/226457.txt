<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your sudoku solver is missing a crucial part: the one that fills all obvious cells without backtracking.</p>

<p>In your example sudoku, in row 1 column 7 there must be a 1 because that's the only place in row 1 where a 1 is possible. That's because the blocks to the left already contain a 1, and columns 8 and 9 also contain a 1 further down.</p>

<p>With that improvement, the algorithm should get quite fast. That's probably how every other sudoku solver attacks the complexity, therefore you should have a look at the answers of related code reviews.</p>

<p>In 2006 <a href="http://roland-illig.de/tmp/sudoku-1.0.tar.gz" rel="nofollow noreferrer">I wrote a sudoku solver in C</a> using exactly this improvement. You may have a look at it, it should be pretty fast, even when you translate it back to Python.</p>

<p>Since sudokus are popular, several people have already <a href="https://warwick.ac.uk/fac/sci/moac/people/students/peter_cock/python/sudoku" rel="nofollow noreferrer">documented</a> how they wrote a sudoku solver. I found this one via <a href="https://rosettacode.org/wiki/Sudoku" rel="nofollow noreferrer">Rosetta Code</a>.</p>
    </div>