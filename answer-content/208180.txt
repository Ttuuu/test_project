<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Don't go against the language</h3>

<blockquote>
  <p>The main arguments can be thought of as being a single argument, but I do not want to force users to quote the entire thing, so when the argument contains spaces I must be able to handle multiple arguments.</p>
</blockquote>

<p>If you want to a value containing spaces as a single argument,
then you and your users should double-quote it,
otherwise Bash will perform word splitting.
This is a fundamental principle in Bash,
and it's better to play along with it than to go against.</p>

<p>Trying to go against will get you into all kinds of trouble.
For example, what would you expect for?</p>

<pre><code>my_command this      is   a test -new -- sed "s|a|b|"
</code></pre>

<p>That is, multiple spaces between <em>words</em>.
Those spaces will be lost,
the script will behave the same way as if there was a single space in between.</p>

<p>Keep in mind that users will have to quote special characters anyway.
You cannot shelter them from quoting.
It's better to learn the basic rules of word splitting and quoting early,
rather than trying to work around it with hacky solutions.</p>

<h3>Assign arrays to arrays</h3>

<p>This statement assigns an array to a non-array:</p>

<blockquote>
<pre><code>ext_command="${@:count}"
</code></pre>
</blockquote>

<p>This way you lose the ability to expand the original value correctly quoted.</p>

<p>Take for example this input:</p>

<blockquote>
<pre><code>my_command test -new -- sed "s|a| |"
</code></pre>
</blockquote>

<p>Notice the space in the <code>sed</code> pattern.</p>

<p>And let's say the script uses <code>ext_command</code> like this:</p>

<pre><code>ls | "$ext_command"
</code></pre>

<p>This will not work as intended (replacing "a" with spaces), because the original arguments are not preserved correctly.</p>

<p>Using an array you could leave this option open, that is:</p>

<pre><code>ext_command=("${@:count}")
</code></pre>

<p>And then later:</p>

<pre><code>ls | "${ext_command[@]}"
</code></pre>

<h3>Minor points</h3>

<p>Instead of this:</p>

<blockquote>
<pre><code>local inp=""
</code></pre>
</blockquote>

<p>You can write simply:</p>

<pre><code>local inp
</code></pre>

<hr>

<p>Instead of this:</p>

<blockquote>
<pre><code>count=$((count+1))
</code></pre>
</blockquote>

<p>You can write simply:</p>

<pre><code>((count++))
</code></pre>

<hr>

<p>Instead of this:</p>

<blockquote>
<pre><code>if [[ "$i" == '--' ]]
then
    ext_command="${@:count}"
    break
else
    # a long block of code ...
fi
</code></pre>
</blockquote>

<p>It's more readable like this:</p>

<pre><code>if [[ "$i" == '--' ]]
then
    ext_command="${@:count}"
    break
fi

# a long block of code ... but less deeply nested
</code></pre>
    </div>