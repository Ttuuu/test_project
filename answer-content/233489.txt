<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    data = []
    try:
        fp = open(path, 'r')
        for f_line in fp:
            data.append(f_line.rstrip())

    finally:
            fp.close()
    return data
</code></pre>

<p>This can be simplified to:</p>

<pre><code>data = []
with open(path) as fp:
   f_line = fp.readline()
   data.append(f_line.rstrip())
return data
</code></pre>

<p>The <code>with</code> statement in Python will automatically close the file after the code is done with it. It also handles the <code>finally</code> exception by closing it.</p>

<pre><code>findings = [[] for x in landscape]
</code></pre>

<p>This initialization can be skipped if the algorithm is transformed.</p>

<pre><code>for cnt, l_line in enumerate(findings):
    for found in l_line:
        if found[0] == 0 and len(findings) &gt; (cnt + len(bug) - 1):
            check = 1
            for i in range(1, len(bug)):
                if bugInLine(findings[cnt + i], i, found[1]):
                    check = check + 1

            if check == len(bug):
                complete_bugs_cnt = complete_bugs_cnt + 1
</code></pre>

<p>This is close to <code>text = [''.join(arr) for arr in zip(*text[::1])]</code> (rotate the text by -90 degrees and search) and <code>sum([word.count(pattern_to_find) for word in text])</code>. </p>

<p>The current algorithm is too complicated. Consider an algorithm which checks if a word is present in a single line. Given the line <code>abc  c  d e    a abc</code> the word <code>abc</code> occurs twice, and <code>.count()</code> can be used to find how many times that pattern occurs, or, a while loop with the string split on whitespace (then check if the item is equal to that item.)</p>

<p>However, the text is in columns instead of rows. The text can be rotated -90 degrees which turns it into the easy-to-parse row format. From there it becomes very easy to parse.</p>

<p>After applying these transformations, the code becomes the following (without file reading):</p>

<pre><code>def find_text_column(haystack, pattern_to_find):
  text = haystack.splitlines()
  maxlen = len(max(text, key=len))
  # make every line the same length so that zip() works, as it does not work with irregular arrays
  text = [line.ljust(maxlen, ' ') for line in text]

  # rotate string by -90 degrees
  text = [''.join(arr) for arr in zip(*text[::1])]
  return sum([word.count(pattern_to_find) for word in text])
</code></pre>
    </div>