<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using an <code>IEnumerator</code> as first argument is quite unexpected, and makes this method more cumbersome to use than it needs to be. I'd stick to <code>IEnumerable&lt;T&gt;</code>.</p>

<p>It looks like <code>StringInfo.GetTextElementEnumerator</code> was an important motivation for this decision, but that's an old method that predates the introduction of generics. Why not write a wrapper method for that instead, one that returns <code>IEnumerable&lt;string&gt;</code>?</p>

<hr>

<p>A few other points:</p>

<ul>
<li>You can use tuple deconstruction when calling <code>Slide</code>: <code>var (slide, pattern) = GetSlide(patternString, equalityComparer);</code>.</li>
<li>It's good to see documentation, but some of it isn't very useful. If parameter documentation is just a repetition of the (already properly descriptive) parameter name then I would leave it out.</li>
<li>I'd rename <code>i</code> to <code>sourceIndex</code> and <code>j</code> to <code>patternIndex</code>. Those comments already indicate that those names aren't sufficiently descriptive.</li>
<li>The <code>culture</code> parameter in <code>Ext.Contains</code> is not used.</li>
<li><code>TextElementEnumerator</code> has a <code>GetTextElement</code> method, which gives you <code>Current</code> as a <code>string</code>.</li>
</ul>
    </div>