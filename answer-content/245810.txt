<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Absolute positioning</h2>
<p>This:</p>
<pre><code>    l1.setBounds(550, 100, 250, 20);
</code></pre>
<p>and lines like it are non-ideal. Absolute positioning will fail to scale the controls and their positions according to different window sizes. Re-think your approach after <a href="https://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html" rel="noreferrer">reading about layouts</a>. Instead of setting bounds, you should specify layouts and border widths, etc.</p>
<h2>Members</h2>
<p>There is no reason to store these:</p>
<pre><code>JLabel l1, l2, l3, l4,
        l5, l6, l7, l8,
        l9, l10, l12, l13,
        l14, l11, l15;
</code></pre>
<p>as members on the class. They should just be declared at the function level. When they go out of scope they will not disappear; the <code>Frame</code> will keep a reference to them but you do not have to.</p>
<h2>Variable names</h2>
<p>Particularly for important variables like <code>f1</code> - but probably all of the others, too - you're going to want to give that a more meaningful name, such as <code>fileChooser</code>.</p>
<h2>Grouped <code>add</code></h2>
<p>Rather than issuing your <code>add</code>s all in one lump, I think it would be more legible to rearrange these such that they occur directly after the declaration of their respective control, i.e.</p>
<pre><code>        l1 = new JLabel("Fee Report");
        l1.setBounds(550, 100, 250, 20);
        add(l1);
</code></pre>
<h2>Action listeners</h2>
<p>Given the length of your action listener methods, you should move the body of those methods to methods on your class rather than on the anonymous <code>ActionListener</code> object you make.</p>
    </div>