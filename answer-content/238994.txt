<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As already said by <a href="https://codereview.stackexchange.com/a/238931/203649">greybeard</a> you have to try to be more specific about efficiency and what you want to improve. Your code can be simplified , for example your <code>genAttribute()</code> method:</p>

<blockquote>
<pre><code>public static int genAttribute() {
        Random dice = new Random();
        int[] sumArray = {dice.nextInt(6) + 1, dice.nextInt(6) + 1, dice.nextInt(6) + 1, dice.nextInt(6) + 1};
        for (int num : sumArray) {
            System.out.println(num);
        }
        //three cycles to obtain the three greatest elements omitted for brevity
        System.out.println(first + " " + second + " " + third);
        return first + second + third;
}
</code></pre>
</blockquote>

<p>You can use sort the array and loop over it in reverse, excluding the minimum element standing in the first position of the sorted array like below and avoiding the writing of three cycles for the three max elements:</p>

<pre><code>public static int genAttribute() {
    Random dice = new Random();
    final int n = 4;
    int[] sumArray = dice.ints(n, 1, 7).toArray();

    for (int num : sumArray) {
        System.out.println(num);
    }

    Arrays.sort(sumArray);

    int sum = 0;
    StringJoiner joiner = new StringJoiner(" ");
    for (int i = n - 1; i &gt; 0; --i) {
        sum += sumArray[i];
        joiner.add(Integer.toString(sumArray[i]));
    }
    System.out.println(joiner);

    return sum;
}
</code></pre>

<p>I used the method <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-long-int-int-" rel="nofollow noreferrer">Random.ints</a> to generate the array and after the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html" rel="nofollow noreferrer">StringJoiner</a> class to print the elements. The code is using a parameter <code>n</code> that can be modified at your choice, so the code will remain the same even if the parameter <code>n</code> (number of dices) is modified.</p>

<p>A slight modification can be applied on your method <code>checkFinalArray</code>:</p>

<blockquote>
<pre><code>public static boolean checkFinalArray(int[] checkArray) {
    int fifteenCount = 0;
    for (int z : checkArray) {
         if (z &gt;= 15) {
              fifteenCount++;
         }
    }
    return (fifteenCount &gt;= 2 &amp;&amp; Arrays.stream(checkArray).sum() &gt;= 75);
}
</code></pre>
</blockquote>

<p>Obtain the sum of the elements directly in the array inside the cycle without using of stream at the end of the method:</p>

<pre><code>public static boolean checkFinalArray(int[] checkArray) {
    int fifteenCount = 0;
    int sum = 0;
    for (int z : checkArray) {
        if (z &gt;= 15) {
            fifteenCount++;
        }
        sum += z;
    }
    return (fifteenCount &gt;= 2 &amp;&amp; sum &gt;= 75);
}
</code></pre>
    </div>