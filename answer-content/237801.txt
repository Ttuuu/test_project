<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Cool python exercise! And a nice job.<br>
I'm going to assume you are using python3. There are some points of improvement:</p>

<ul>
<li><a href="https://stackoverflow.com/a/10660443/7501501">Multiline strings</a>: In python you can create a string with more than one line using <code>"""</code> so you an put all of the printing in the beginning of your program in one print statement.</li>
<li><a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">Pathlib</a>: There is a library called pathlib which allows you to create multi platform path objects. Try to use it instead of concatenating strings yourself.</li>
<li>Constants in capitals: Is <code>access_rights</code> a constant? Write it in capital letters if so (It's a normal naming convention).</li>
<li>String formatting: You can use <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer"><code>fstrings</code></a> instead of <code>format</code>, it looks much nicer and more readable (to me). So <code>"Downloading images to {}{}.".format(path,x)</code> can now be <code>f"Downloading images to {path}{x}."</code>.</li>
<li>List comprehension: you can create the <code>yz_array</code> using list comprehension, it is a bit complicated but it will look like: <code>[2 ** x for x in range(8)]</code> - will get the same result!</li>
<li>Meaningful variable names: instead of <code>x</code> even use <code>x_index</code>.</li>
<li>Meaningful exceptions: Using <a href="https://stackoverflow.com/questions/18982610/difference-between-except-and-except-exception-as-e-in-python"><code>Exception as e</code></a> you can print the system error, giving the user more information.</li>
<li>Logical error: Notice that even if there was an error in the file creation process you will still print "Successfully filled folder" which is not true. Add a boolean variable to prevent that.</li>
<li>Multi Platform compatibility: You are probably using <code>windows</code>, but on other <code>os</code> your code will crush, by adding another <code>try - catch</code> you can prevent that. You can also try and find the <code>os</code> and create a matching case for windows.</li>
</ul>

<p>Maybe:</p>

<ul>
<li>Functions: You can use functions to avoid the indentations.</li>
<li>Spaces: According to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer"><code>PEP8</code></a> you should add a space after a <code>,</code> and you should not add space after a print statement.</li>
<li>Use type annotation: (Last but this one is my personal favourite) When your code gets complicated and you start to use function - Do not forget to read about <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>type annotations</code></a>.</li>
</ul>

<p>Overall - greate code, nicely written.<br>
Good luck and Have fun!</p>
    </div>