<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You wrote very clear and readable code:</p>

<ul>
<li>the variable names express the purpose</li>
<li>you use <code>const</code> and <code>let</code> instead of the old <code>var</code></li>
<li>you encapsulated all the interesting code in a function, which makes it easy to copy and reuse the code</li>
</ul>

<p>You chose to use as few temporary memory as possible (4 local variables, no arrays or other objects), at the cost of needing more execution time, <span class="math-container">\$\mathcal O\left(\text{len}(\textit{height})^2\right)\$</span>. If you later need it, you could reduce the execution time to <span class="math-container">\$\mathcal O\left(\text{len}(\textit{height})\right)\$</span> by calculating <code>maxRight</code> once for all <code>i</code> and storing it in an array.</p>

<p>You can optimize the inner <code>for</code> loop from the calculation of <code>maxLeft</code>, since it can be calculated by looking only at the previous <code>maxLeft</code> and the current <code>height[i]</code>:</p>

<pre><code>function trap(height) {
    const len = height.length;
    let result = 0;

    if (len === 0)
        return 0;
    let maxLeft = height[0];

    for (let i = 1; i &lt; len - 1; i++) {
        maxLeft = Math.max(maxLeft, height[i]);
        ...
    }
    ...
}
</code></pre>

<p>You only need to recalculate <code>maxRight</code> if <code>height[i - 1]</code> is equal to it. Because if it isn't, the maximum height cannot have changed.</p>

<p>These two optimizations destroy the nice-looking symmetry of your current code. Therefore you may or may not want to apply them. In any case, you should know that they exist.</p>

<p>In my above code I named the variable <code>len</code> instead of <code>LEN</code> since it feels more like a normal variable than like a constant. A constant is something whose value is the same over time. This <code>len</code> variable depends on the <code>height</code> parameter, therefore it may differ between multiple calls of the <code>trap</code> function.</p>
    </div>