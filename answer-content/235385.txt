<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Option 1) You can create a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.datarelation?view=netframework-4.8" rel="nofollow noreferrer">DataRelations</a> between the two Data Tables and change the loop to fill in both classes at the same time.  This would require you do change the code that converts the results set into C# classes.  Microsoft has an example of GetChildRows and navigation <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/dataset-datatable-dataview/navigating-datarelations" rel="nofollow noreferrer">here</a> </p>

<p>Option 2) Otherwise you could also create a DataView and set the Sort property on the child Data Table and use FindRows method. Again will require you to change how you convert from datatable to C# classes.  I'd lean toward the first option instead of creating another set of data objects just for sorting.</p>

<p>Option 3) I'm guessing it will not be much better performance but you can try is using the Linq <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.groupjoin?view=netframework-4.8#System_Linq_Enumerable_GroupJoin__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0_System_Collections_Generic_IEnumerable___1____3__" rel="nofollow noreferrer">GroupJoin</a> </p>

<pre><code>foreach (var data in items.GroupJoin(usageItems,
    x =&gt; new {x.ItemCode, x.WarehouseCode},
    x =&gt; new {x.ItemCode, x.WarehouseCode},
    (itm, usg) =&gt; new
    {
        item = itm,
        usage = usg.ToList()
    }))
{
    data.item.Usage = data.usage;
} 
</code></pre>

<p>Update #1 - Couple more options. </p>

<p>Option 4) Parallel the finding of data. Take Option 3 and add the AsParallel()</p>

<pre><code>foreach (var data in items.AsParallel().GroupJoin(usageItems.AsParallel(),
    x =&gt; new {x.ItemCode, x.WarehouseCode},
    x =&gt; new {x.ItemCode, x.WarehouseCode},
    (itm, usg) =&gt; new
    {
        item = itm,
        usage = usg.ToList()
    }))
{
    data.item.Usage = data.usage;
} 
</code></pre>

<p>I still think option 1 would be the best option as it will create a binary search tree for the relationship and give best performance. </p>

<p>Option 5) if you know the usageItems are sorted by the ItemCode and WarehouseCode you could just iterate over the list once and fill in the Item as it scans over the list.  This would be the most efficient but would require more complex code and also required that sort order is always correct.  While having this sort order would help Option 1 it wouldn't be required. </p>
    </div>