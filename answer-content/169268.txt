<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could break your <code>main</code> function into multiple functions. Doing that will not even make <code>main()</code> much more clearer but also you will get some re-useable functions.</p>

<p>Having these tiny functions allow you to mock them easily in tests and also allows them to be tested them separately.</p>

<p>I have also added <a href="http://docs.python-requests.org/en/master/api/#requests.Response.raise_for_status" rel="noreferrer"><code>response.raise_for_status()</code></a> calls to raise an <a href="http://docs.python-requests.org/en/master/api/#requests.HTTPError" rel="noreferrer"><code>HTTPError</code></a> if the API returns 4xx or 5xx status code. In these situations it's rare that you would get the expected key-value pairs.</p>

<p>Lastly if your code is going to stay in memory then having module level session will help as well.</p>

<pre><code>from datetime import datetime
import logging

from flask import Flask, jsonify
import requests


ML_ID_URL = "https://mybridge-backend.herokuapp.com/api/v1/skills/mapping/machine-learning"
ML_TOP_URL = "https://mybridge-backend.herokuapp.com/api/v1/knowledge/skills/{id}?offset=0&amp;limit={limit}&amp;sort="

logger = logging.getLogger()
logger.setLevel(logging.INFO)

app = Flask(__name__)
session = requests.Session()
session.headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36"}


def get_topic_id():
    response = session.get(ML_ID_URL)
    response.raise_for_status()
    data = response.json()
    return data["body"]["id"]


def get_trending_topics(ml_topic_id, limit=5):
    response = session.get(ML_TOP_URL.format(id=ml_topic_id, limit=limit))
    response.raise_for_status()
    return response.json()


@app.route("/")
def main():
    ml_topic_id = get_topic_id()
    trending_topics = get_trending_topics(ml_topic_id)

    return jsonify([
            {
                "uid": str(topic["id"]),
                "updateDate": datetime.strptime(topic["reg_date"], "%Y-%m-%d %H:%M:%S.%f").strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
                "titleText": topic["title"],
                "mainText": topic["excerpt"],
                "redirectionUrl": topic["externalURL"]
            }
            for topic in trending_topics['body']
        ])


if __name__ == '__main__':
    app.run(debug=True, use_reloader=True)
</code></pre>
    </div>