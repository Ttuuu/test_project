<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>
<ul>
<li>
<blockquote>
<p><em>Is there a better way to safely manage the cancellation and disposal of SemaphoreSlim instances?</em></p>
</blockquote>
<p>You've made a pattern to safely manage completing / aborting a task that is acquiring or has acquired a lock on a semaphore, not to safely manage the cancellation and disposal of <code>SemaphoreSlim</code> instances.</p>
</li>
<li><p>You should only release the semaphore if you are sure you have acquired a lock. So take <code>await semaphore.WaitAsync(cancellationToken);</code> out the <code>try</code> block (as suggested in the comments).</p>
</li>
<li><p>You should also provide overloads or equivalent checks that return <code>Task&lt;T&gt;</code> and/or accept a <code>CancellationToken</code> as argument for the task.</p>
</li>
<li><p>In your exception handlers you might get <code>false negatives</code>, in that it's possible an <code>OperationCanceledException</code> or <code>ObjectDisposedException</code> was raised while condition <code>cancellationToken.IsCancellationRequested</code> was met, but coming from a different source than the cancellationToken. I don't know whether this is a big issue, since cancellation was requested anyway. But you should definately document in which scenarios exceptions could be propagated to the consumer.</p>
</li>
<li><p>Rather than the <code>catch - if - throw</code> blocks, you could use <code>catch when (condition)</code> blocks. For instance, <code>catch (OperationCanceledException ex) when (cancellationToken == ex.CancellationToken)</code>. This is more compact, doesn't require you rethrow yourself and allows you to focus on silently capturing these exceptions on certain conditions. You might want to log something on such errors.</p>
</li>
<li><p>I'm not convinced this extension method should take the semaphore as source object. To me, the semaphore is more of a utility used to execute these tasks. Maybe a static <code>Helper</code> class would have been the better choice.</p>
</li>
</ul>
    </div>