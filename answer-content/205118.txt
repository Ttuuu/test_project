<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @200_success mentions, these classes seem a bit sparse, and you shouldn't bother with classes for them in the first place.</p>

<p>For instance, <code>Point</code> could be nicely replaced with a <code>namedtuple</code>.</p>

<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y', 'z'], defaults=[0,0,0])
&gt;&gt;&gt; p1 = Point(1,4,3)
&gt;&gt;&gt; p2 = Point(5,2,3)
</code></pre>

<p>The components of <code>Point</code> can now easily be referred to by name (eg, <code>p1.x</code> or <code>p2.z</code>) and can still be referred to by index (eg, <code>p1[0]</code> or <code>p2[2]</code>).</p>

<p>Similarly, you don't need a whole class just for a <code>minmax_coords</code> function:</p>

<pre><code>&gt;&gt;&gt; def minmax_coords(*pnts):
...    mn = Point( *(min(p[i] for p in pnts) for i in range(3)) )
...    mx = Point( *(max(p[i] for p in pnts) for i in range(3)) )
...    return mn, mx
... 
&gt;&gt;&gt; minmax_coords(p1, p2)
(Point(x=1, y=2, z=3), Point(x=5, y=4, z=3))
&gt;&gt;&gt; 
</code></pre>

<p>Note: As opposed to a dictionary of dictionaries for the result, I've changed the return into two points: a point with the minimum coordinate on each axis, and a point with the maximum coordinate on each axis.</p>

<p>Demystifying the <code>minmax_coords</code> implementation:</p>

<ul>
<li><code>min(p[i] for p in pnts)</code> computes the minimum value of the i'th axis over all of the points.</li>
<li><code>_____ for i in range(3)</code> is a generator expression which executes that minimum computation for each axis <code>i=0</code>, <code>i=1</code> and <code>i=2</code>.  </li>
<li><code>Point( *(____) )</code> immediately evaluates the generator expression and uses the values as the 0th, 1st, and 2nd arguments of the <code>Point()</code> constructor.</li>
</ul>
    </div>