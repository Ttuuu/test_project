<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Empty lines as separation around code lines that are related are always a good idea. Your code has a little too much empty lines where it is not common in C# (or C/C++, Java, JavaScript):</p>

<pre><code>public class RecentlyUsedList

{
</code></pre>

<p>This in fact decreases readability. Instead just write:</p>

<pre><code>public class RecentlyUsedList
{
</code></pre>

<hr>

<blockquote>
<pre><code>      private readonly List&lt;string&gt; items;

      public RecentlyUsedList()

      {

        items = new List&lt;string&gt;();

      }
</code></pre>
</blockquote>

<p>Here the constructor is not necessary. Just do:</p>

<pre><code>private readonly List&lt;string&gt; items = new List&lt;string&gt;();
</code></pre>

<hr>

<p>Your <code>Add(...)</code> method can be simplified to this:</p>

<pre><code>  public void Add(string newItem)
  {
    items.Remove(newItem);
    items.Insert(0, newItem);
  }
</code></pre>

<p><code>items.Remove(newItem)</code> just returns false, if the item is not present, so it's safe to use in any case. There is no need to be concerned about the existing string because it is the same as the <code>newItem</code>.</p>

<hr>

<p><code>public int Count...</code> can be simplified to:</p>

<pre><code>public int Count =&gt; items.Count;
</code></pre>

<hr>

<blockquote>
  <p><code>List&lt;string&gt; items</code></p>
</blockquote>

<p>has an indexer it self, so you can use that when implementing the indexer:</p>

<pre><code>  public string this[int index]
  {
    get
    {
      if (index &lt; 0 || index &gt;= items.Count)
      {
        throw new ArgumentOutOfRangeException();
      }
      return items[index];
    }
  }
</code></pre>

<p>Here I throw an exception if the <code>index</code> argument is out of range. You could let <code>items</code> handle that as well...</p>

<p>In fact your <code>foreach</code>-loop is potentially much slower than the <code>List&lt;T&gt;[index]</code> because you make a kind of search where <code>List&lt;T&gt;[index]</code> just performs a look up. So you hide an efficient behavior with a not so efficient one.</p>
    </div>