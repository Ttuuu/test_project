<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>std::string</code>s can be passed by <code>const&amp;</code> (or as a <code>std::string_view</code>) rather than by value if we don't need to make a copy, e.g.:</p>

<pre><code>Shader(std::string const&amp; vertex_shader_path, std::string const&amp; fragment_shader_path)

std::string get_contents(std::string const&amp; file_path);

void Shader::print_error(std::vector&lt;char&gt; const&amp; error_message, std::string const&amp; info)
</code></pre>

<p>Incidentally, using a <code>std::string</code> instead of a <code>std::vector&lt;char&gt;</code> for the error message would make printing easier.</p>

<hr>

<p>Member functions that don't change member data should be <code>const</code>.</p>

<pre><code>void use() const;
</code></pre>

<p>Member functions that don't require access to member data should be <code>static</code>.</p>

<pre><code>static std::string get_contents(std::string const&amp; file_path);
... and all of the others!
</code></pre>

<hr>

<p>There are quite a few error cases we have to handle:</p>

<ul>
<li>File opening fails.</li>
<li>Reading from the file fails.</li>
<li>Shader compilation fails.</li>
<li>Program linking fails.</li>
</ul>

<p>Currently the code continues attempting to create the shader program when an earlier step fails, even though it won't succeed. This adds complexity, since we have to check that everything will "work" (in this case fail gracefully) with our invalid state.</p>

<p>While it might be helpful to show the compilation errors for every shader object, we probably don't want to try linking the program - we'll just be generating an OpenGL error, as well as extra noise from the linking failure in our logs.</p>

<p>Similarly, if we fail to read from a file, we should output an appropriate error message, and not try to compile a shader object or link the program.</p>

<hr>

<p>I'd suggest using the specified OpenGL types for interacting with OpenGL. e.g. <code>GLuint</code> for shader object / program ids, <code>GLint</code> for compile status, etc.</p>

<p>This is safer and more portable, and also makes the purpose of each variable more obvious.</p>

<hr>

<p>We don't need to immediately delete shaders that fail to compile (or programs that fail to link). The <code>Shader</code> class destructor will still do that for us (it might even be useful to keep the ID around for debugging). So we can simpify a bit:</p>

<pre><code>unsigned int Shader::create_shader(const char* shader_code, Type shader_type)
{
    GLuint shader = glCreateShader(shader_type);
    glShaderSource(shader, 1, &amp;shader_code, nullptr);
    glCompileShader(shader);

    check_shader_compilation_status(shader);

    return shader;
}
</code></pre>

<hr>

<p>This looks fine for a simple shader class, but you might run into a few issues in future:</p>

<ul>
<li><p>A shader object can be composed from multiple shader source strings / files (which is very useful to avoid unnecessary duplication of shader code).</p></li>
<li><p>There are other types of shader object (tessellation control / evaluation, geometry, compute) that may or may not be present in the shader program.</p></li>
</ul>

<p>It would be more flexible to load the shader sources from their files outside of the <code>Shader</code> class and pass them in. Or even to add a separate <code>ShaderObject</code> class, and create the Shader from a <code>std::vector&lt;ShaderObject&gt;</code>.</p>

<p>But maybe that's more than you need right now.</p>

<hr>

<p>Technically, <a href="https://stackoverflow.com/a/48987445/673679">we should write error messages to <code>stderr</code>, not <code>stdout</code></a>, which means using <code>std::cerr</code> or <code>std::clog</code> instead of <code>std::cout</code>. It doesn't really matter for a graphical program though.</p>

<hr>

<pre><code>if (!is_compiled)
{
    // ...
    return false;
}
else
{
    return true;
}
</code></pre>

<p>We don't need the <code>else</code> statement here, since we <code>return</code> from the other branch. We can just <code>return true</code> and avoid the brackets and the extra indent. (This is more of an issue when there's more code in the <code>else</code> branch).</p>
    </div>