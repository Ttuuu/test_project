<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid <code>using namespace std;</code></h1>

<p>Bringing all names in from a namespace is problematic; <code>namespace std</code> particularly so. See <a href="//stackoverflow.com/q/1452721">Why is “using namespace std” considered bad practice?</a>.</p>

<h1>Don't do everything in <code>main()</code></h1>

<p>Putting all the code into the <code>main()</code> function makes it harder to test parts of the program separately.  If we at least create a function that can read from an arbitrary <code>std::istream</code>, then we're able to do more repeatable testing (by passing suitable <code>std::istringstream</code> objects with our test data in).</p>

<h1>Always test that input was successfully read</h1>

<p>When we read values from an input stream, we <em>must</em> check that the read was successful before using those values.  A simple way to do that is to set the stream to throw exceptions on failures.</p>

<p>We also need to be more robust when we've read the inequality type, rather than just assuming it will be found in <code>symbols</code>.</p>

<h1>Consider using unsigned types</h1>

<p>We know that <em>N</em> can't be negative, and the answer is a count of results, which must necessarily be non-negative, too.</p>

<h1>Magic numbers</h1>

<p>The magic numbers <code>1</code>..<code>5</code> used for the different inequalities should be given names.  But there's something better that we can do: we can change their type to be the actual functions:</p>

<pre><code>#include &lt;functional&gt;

///...
{

    using inequality = std::function&lt;bool(float,float)&gt;;

    vector&lt;float&gt; arrayOne(T, 0);
    vector&lt;inequality&gt; arrayTwo(T);
    static const std::map&lt;string, inequality&gt; symbols =
        {
         { "&gt;", std::greater&lt;float&gt;() },
         { "&gt;=", std::greater_equal&lt;float&gt;() },
         { "=", std::equal_to&lt;float&gt;() },
         { "&lt;=", std::less_equal&lt;float&gt;() },
         { "&lt;", std::less&lt;float&gt;() },
        };
</code></pre>

<p>Then the big <code>switch</code> becomes much simpler:</p>

<pre><code>    for (auto const&amp; numTwo: arrayTwo){
        passNum += numTwo(*testNum, arrayOne[i]);
        i++;
    }
</code></pre>

<p>(I must point out in passing that those names - <code>arrayOne</code>, <code>arrayTwo</code>, <code>numTwo</code> - are really uninformative and unhelpful; you really do need to spend some time thinking of better names if you want to be able to understand your code again later.)</p>

<h1>Reconsider the algorithm</h1>

<p>Instead of performing all the comparisons on a selection of values (which is O(<em>n</em>²) unless there's many duplicate <code>C</code> values), let's consider what happens to the number of satisfied inequalities as we move <code>X</code> from -∞ to +∞:</p>

<ul>
<li>each <code>&lt;</code> changes the count by -1 infinitesimally before <code>C</code></li>
<li>each <code>&lt;=</code> changes the count by -1 infinitesimally after <code>C</code></li>
<li><code>&gt;=</code> and <code>&gt;</code> change the count by +1 before or after <code>C</code>, respectively</li>
<li><code>=</code> changes the count by +1 before and -1 after.</li>
</ul>

<p>So we can keep an ordered map of those changes:</p>

<pre><code>struct delta
{
    int before;
    int after;

    delta&amp; operator+=(const delta&amp; other)
    {
        before += other.before;
        after  += other.after;
        return *this;
    }
};
</code></pre>

<p>Then, just add the appropriate delta values for each inequality:</p>

<pre><code>static const std::map&lt;string, delta&gt; symbol_delta =
    {
     { "&gt;",  {  0,  1 } },
     { "&gt;=", {  1,  0 } },
     { "=",  {  1, -1 } },
     { "&lt;=", {  0, -1 } },
     { "&lt;",  { -1,  0 } },
    };

for (auto i = 0u;  i &lt; lines;  ++i) {
    std::string var;
    std::string symbol;
    double value;

    in &gt;&gt; var &gt;&gt; symbol &gt;&gt; value;
    if (var != "X") {
        throw std::invalid_argument(var);
    }

    auto entry = symbol_delta.find(symbol);
    if (entry == symbol_delta.end()) {
        throw std::invalid_argument(symbol);
    }

    const delta&amp; d = entry-&gt;second;
    changes[value] += d;
    if (d.before + d.after &lt; 0) {
        // it's a less-than relation, so true at -∞
        ++count;
    }
}
</code></pre>

<p>When that's done, start with a count of the number of inequalities that are true at -∞, (i.e. the total number of <code>&lt;</code> and <code>&lt;=</code> we've seen) and update that count as we walk the map, keeping track of the maximum:</p>

<pre><code>auto max_count = count;
// now, advance to +∞; updating count as we go
for (auto&amp; entry: changes) {
    const delta&amp; d = entry.second;
    count += d.before;
    if (count &gt; max_count) { max_count = count; }
    count += d.after;
    if (count &gt; max_count) { max_count = count; }
}
</code></pre>

<p>The complexity of this algorithm is O(<em>n</em> log <em>n</em>), because we're doing a O(log <em>n</em>) insertion into the map <em>n</em> times.</p>

<h1>Full working alternative</h1>

<pre><code>#include &lt;istream&gt;
#include &lt;map&gt;
#include &lt;string&gt;

struct delta
{
    int before;
    int after;

    delta&amp; operator+=(const delta&amp; other)
    {
        before += other.before;
        after  += other.after;
        return *this;
    }
};

unsigned int max_inequalities(std::istream&amp; in)
{
    // ensure stream '&gt;&gt;' succeeds or throws
    in.exceptions(std::ios_base::badbit | std::ios_base::failbit);

    unsigned int lines;
    in &gt;&gt; lines;

    std::map&lt;double,delta&gt; changes;
    unsigned int count = 0;     // count of satisfied inequalities at -∞

    static const std::map&lt;std::string, delta&gt; deltas =
        {
         { "&gt;",  {  0,  1 } },
         { "&gt;=", {  1,  0 } },
         { "=",  {  1, -1 } },
         { "&lt;=", {  0, -1 } },
         { "&lt;",  { -1,  0 } },
        };

    for (auto i = 0u;  i &lt; lines;  ++i) {
        std::string var_name;
        std::string comparison;
        double value;

        in &gt;&gt; var_name &gt;&gt; comparison &gt;&gt; value;
        if (var_name != "X") {
            throw std::invalid_argument(var_name);
        }

        auto entry = deltas.find(comparison);
        if (entry == deltas.end()) {
            throw std::invalid_argument(comparison);
        }

        const delta&amp; d = entry-&gt;second;
        changes[value] += d;
        if (d.before + d.after &lt; 0) {
            // it's a less-than relation, so true at -∞
            ++count;
        }
    }

    auto max_count = count;
    // now, advance to +∞; updating count as we go
    for (auto&amp; entry: changes) {
        const delta&amp; d = entry.second;
        count += d.before;
        if (count &gt; max_count) { max_count = count; }
        count += d.after;
        if (count &gt; max_count) { max_count = count; }
    }

    return max_count;
}
</code></pre>



<pre><code>#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
{
    auto input = std::istringstream{"4\n"
                                    "X = 1\n"
                                    "X = 2\n"
                                    "X = 3\n"
                                    "X &gt; 0\n"
    };

    std::cout &lt;&lt; max_inequalities(input) &lt;&lt; '\n';
}
</code></pre>
    </div>