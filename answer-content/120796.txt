<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to go for the low hanging fruit first and then try to comb through the code.</p>
<p><strong>Structure</strong> - It's good practice to indent <em>all of your code</em> that way <code>Labels</code> will stick out as obvious. I'm not sure if you did that and the code block removed it or not.</p>
<p><em>Personal preference</em> - I like variables all defined on their own line as it makes it easier to read rather than several dim-ed together. In the same breath I'll say great job on always giving variables a type even if they are declared on the same line. A lot of people make the mistake of only using a type once.</p>
<p><strong><a href="https://msdn.microsoft.com/en-us/library/1s46s4ew(v=vs.140).aspx" rel="nofollow noreferrer">Standard VBA naming conventions</a></strong> have <code>camelCase</code> for local variables and <code>PascalCase</code> for other variables and names. Constants are usually <code>Const ALLCAPS</code>.</p>
<p><strong>Speaking of <em>Variable names</em></strong> - you've given your variables meaningful names, but they are difficult to work out. Why use <code>col</code> instead of <code>column</code>? Personal preference - I avoid variables like <code>i</code> and <code>j</code> because they aren't descriptive. But, there's technically nothing wrong with using them as it's standard practice to iterate with <code>i</code>. All of the underscores <code>_</code> look messy <em>to me</em> as I'm only familiar with VBA conventions.</p>
<p>There's a lot of <code>Worksheets("Matrix Inputs").Range("maintenance_cycles").Cells(1, 3)</code>.</p>
<p>Why not use the <strong>CodeName</strong> for the sheets? Worksheets have a <code>CodeName</code> property - View Properties window (F4) and the <code>(Name)</code> field can be used as the worksheet name. This way you can avoid <code>Sheets("mySheet")</code> and instead just use <code>mySheet</code>. At the same time you keep using <code>.cells()</code> - there has to be a better way. You're already using <strong>named ranges</strong>, so why the need for <code>.Cells()</code>? At least on the ones that aren't iterating.</p>
<p>Overall with your variables, they are pretty good, but there's no <em>consistency</em>. Some are like <code>c_aircraft</code> others are like <code>startWeek1</code> and even some are like <code>CInt</code>.</p>
<p><strong>A+</strong> on using <code>Option Explicit</code>. The same goes for not using any <code>.Select</code> or <code>.Activate</code> statements.</p>
<p>As well as always using <code>ByVal</code> instead of <code>ByRef</code>, <em>but</em> <a href="https://msdn.microsoft.com/en-us/library/ee478101(v=vs.84).aspx" rel="nofollow noreferrer">ByRef is the default</a> when not passing explicitly <code>ByVal</code>.</p>
<p><strong>Integers</strong> - <a href="https://stackoverflow.com/questions/26409117/why-use-integer-instead-of-long/26409520#26409520">integers are obsolete</a>. According to <a href="https://msdn.microsoft.com/en-us/library/office/aa164506(v=office.10).aspx" rel="nofollow noreferrer">msdn</a> VBA <em>silently</em> converts all integers to <code>long</code>.</p>
<p><strong>Comments</strong> (though with the complexity I may off) - <a href="http://blog.codinghorror.com/code-tells-you-how-comments-tell-you-why/" rel="nofollow noreferrer">"code tells you how, comments tell you why"</a>. The code should speak for itself, if it needs a comment, it might need to be made more clear. If not, the comment should describe <em>why</em> you're doing something rather than <em>how</em> you're doing it. Here are a <a href="https://softwareengineering.stackexchange.com/a/254979/125931">few reasons</a> to avoid comments all together.</p>
<hr>
<p>Maybe <a href="http://rubberduckvba.com/" rel="nofollow noreferrer">RubberDuck</a> has some things to say as well.</p>
<hr>
<p>For things like this</p>
<pre><code>            If cellIsInVisibleRange(Range("week_id").Cells(1, WorksheetFunction.Match(endWeek, Range("week_id"), 0))) Then
            If WorksheetFunction.Match(endWeek, Range("week_id"), 0) &lt; viewportOffset Then
                    Application.Goto Range("week_id").Cells(1, 1), True
            Else
                    Application.Goto Range("week_id").Cells(1, WorksheetFunction.Match(endWeek, Range("week_id"), 0) - viewportOffset), True
            End If
  End If
</code></pre>
<p>There's just way too much going on here to keep track of - what are the <code>Goto</code>s doing? They go to a particular cell? I don't understand that at all, but that might be because I have no data to test.</p>
<p>When you are doing two loops back to back like this -</p>
<pre><code>  For i = 2 To Range("mx_plan").Columns.Count Step 3
            'For j = 1 To Range("mx_plan").Rows.Count
                    Range("mx_plan").Columns(i).ClearContents
            'Next j
  Next i

  For i = 3 To Range("mx_plan").Columns.Count Step 3
            'For j = 1 To Range("mx_plan").Rows.Count
                    Range("mx_plan").Columns(i).ClearContents
            'Next j
  Next i
</code></pre>
<p>Why not just combine them?</p>
<pre><code>  For i = 2 To Range("mx_plan").Columns.Count Step 3
            
                    Range("mx_plan").Columns(i).ClearContents
                    Range("mx_plan").Columns(i + 1).ClearContents
            
  Next i
</code></pre>
<hr>
<p>I'm having a pretty difficult time figuring out how your table works. Where do you keep the current number of hours on the plane and cycle ID? Or are they stored and just not shown in the image? And the hours assigned per the constraints - do you assign that based on remaining hours or are those the required hours for the aircraft? If they are required, what happens if one plane is in maintenance and another needs the preventative maintenance? Does it just sit?</p>
<hr>
<h2>My approach</h2>
<p>would be to work directly with my tailnumber table and call functions to do the work. Ignoring the exact way that you do it, it would be something like this -</p>
<p>Option Explicit</p>
<pre><code>Sub myAircraftHours()
    Dim planeTailNumber As Long
    Dim planeTargetHours As Long
    Dim planeRemainingHours As Long
    Dim planeInMaintenance As Boolean
    Dim currentWeek As Range
    Dim plane As Range
    Dim currentWeekID As Long
    currentWeekID = 1
    Dim currentWorkWeek As Long
    
    For Each plane In Range("aircraft")
        currentWorkWeek = WorksheetFunction.Match(currentWeekID, Range("week_id"), 0)
        planeTailNumber = plane.Value
        planeTargetHours = plane.Offset(, 2 * currentWorkWeek)
            If Not IsNumeric(plane.Offset(, 3 * currentWorkWeek)) Then calculateMaintenace planeTailNumber
        planeRemainingHours = plane.Offset(, 3 * currentWorkWeek)
        
    Next plane
     

End Sub

Function calculateMaintenace(ByVal tailNumber As Long) As Long
    'work out maintenace
End Function
</code></pre>
<p>Since I have everything there already, I wouldn't need a class (mostly because I don't <s>use</s> know classes). <code>offset</code> isn't really the greatest way - you probably have named ranges you could use with the <code>currentWorkWeek</code> variable.</p>
<p>If the plane is in maintenance - go see how long it will stay. If it gets out - bring it back in to having <code>targetHours</code>. Etc.</p>
<p>The <code>For Next</code> loop would probably get tricky with planes going in and out of circulation, so maybe you create an array and store those sorted by remaining hours, then go and match the tail numbers in the order you want.</p>
<p>I know my example is <em>really simple</em> compared to what is all going on in your macro, but that's how I would approach it.</p>
    </div>