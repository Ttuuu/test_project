<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should always write the main program protected within a <code>if __name__ == '__main__':</code> block, so that you can import the file in another program without automatically executing code.  Eg)</p>

<pre><code>if __name__ == '__main__':
    ind = Indenter(s.readlines())
    ind.main()
</code></pre>

<hr>

<p>Don't write classes where you create the class object just to call one instance method of the object.  See the video <a href="https://www.youtube.com/watch?v=o9pEzgHorH0" rel="nofollow noreferrer">Stop Writing Classes</a>.</p>

<hr>

<p>Your code has:</p>

<pre><code>ind = Indenter(s.readlines())
</code></pre>

<p>which reads every single line of the file into memory, and stores it in a list.  Then, you call the <code>Indenter.main()</code> function which executes ...</p>

<pre><code>while self.count &lt; len(self.string):
    # ... many lines of code omitted ...
    self.count += 1
</code></pre>

<p>... sequentially loops through every element of the list (line of the file) for processing one at a time.  Each member function, including this <code>main()</code> function, uses <code>self.string[self.count]</code> to reference the current line.  This must have been maddening to write, having to type (or copy/paste) the same code over and over.  It is frightening to read.</p>

<p>Let's clean this up.</p>

<p><code>print_ln(self, string)</code> is structured correctly.  It takes the current line <code>string</code> as input.  Let's duplicate that in <code>indent()</code>, <code>dedent()</code>, and <code>dedent_indent()</code>, by adding the <code>string</code> argument to them, like:</p>

<pre><code>def indent(self, string):
    self.print_ln(string)
    self.space += 4
</code></pre>

<p>In the <code>main()</code> function, we now need to pass the line to each function, just like it was passed to <code>self.print_ln(self.string[self.count])</code>.  But that is a lot of duplicate <code>self.string[self.count]</code> access, so let's make a temporary variable for it.  We can use that temporary variable in the <code>re.search(....)</code> calls too.</p>

<pre><code>while self.count &lt; len(self.string):
    string = self.string[self.count]
    if re.search("^\s*if.*then", string, re.IGNORECASE):
        self.indent(string)
    elif # ... many lines of code omitted ...
    else:
        self.print_ln(string)
    self.count += 1
</code></pre>

<p>Note that each <code>string</code> is a string, so the <code>str(...)</code> calls can just be omitted.</p>

<p>Now that <code>self.count</code> is only used in <code>main()</code>, we can make it a local variable, instead of an instance member.</p>

<pre><code>count = 0
while count &lt; len(self.string):
    string = self.string[count]
    # ... many lines of code omitted ...
    count += 1
</code></pre>

<p>A <code>while</code> loop which counts from 0 up to some limit an be replaced by a <code>for ... in range(...)</code> loop:</p>

<pre><code>for count in range(len(self.string)):
    string = self.string[count]
    # ... many lines of code omitted ...
</code></pre>

<p>And since <code>count</code> is only ever used to index into the <code>list</code> that we are looping over the indices of, we can omit the indices altogether, and just loop over the list of strings itself.</p>

<pre><code>for string in self.string:
    # ... many lines of code omitted ...
</code></pre>

<p>Now that we are looping directly over <code>self.string</code>, we don't need to explicitly know that it is a list of strings.  It can be any iterable object that returns, one-at-a-time, all the string we are interested in.  Like a file object.  And that file object can be passed to the <code>main()</code> function.</p>

<pre><code>class Indenter:
    # ... omitted ...

    def main(self, lines):

        for line in lines:
            if re.search("^\s*if.*then", line), re.IGNORECASE):
                self.indent(line)
            elif # ... many lines of code omitted ...
            else:
                self.print_ln(line)

if __name__ == '__main__':
    with open('scratch.html') as file:
        ind = Indenter()
        ind.main(file)
</code></pre>

<p>Now we are no longer reading the entire file into memory.  Rather, we are opening the file, and reading it line-by-line, processing each line as it is read in, and then discarding it.</p>

<hr>

<p>What does your code do if it encounters a file which is already indented?  It indents it some more!</p>

<p>That is probably undesired behaviour.  You probably want to strip off any existing indentation before adding the new indentation.</p>

<pre><code>        for line in lines:
            line = line.strip()
            # ... if/elif/else statements omitted ...
</code></pre>

<p>Note that this removes the newline from the end of the lines as well, so you'll want to add that back in, perhaps by changing the <code>sys.stdout.write(...)</code> \ <code>sys.stdout.flush()</code> into a simple <code>print(...)</code> statement.</p>

<hr>

<p>With each line stripped of any previous indentation, you can remove the <code>\s*</code> from the start of all of the reg-ex patterns.</p>

<hr>

<p>There are 6 reg-ex patterns where you want to indent, 5 where you want to dedent, and 3 where you want to do both.  You always print.  You dedent before printing.  You indent after printing.</p>

<p>Instead of writing many lines of code which do the same thing with different patterns, it is much, much easier to write a loop, which loops through the patterns.  Let's put the patterns into lists:</p>

<pre><code>indent_patterns = ['^if.*then', '^for', '^with', '^do until', '^do$', '^select case',
                   '^case', '^else', '^elseif.*then']
dedent_patterns = ['^end select', '^loop', '^end with', '^end if', '^next',
                   '^case', '^else', '^elseif.*then']
</code></pre>

<p>Now we can say if the current line matches any of the <code>dedent_patterns</code>, reduce <code>space</code>.  Then print the line.  Then, if the current line matches any of the <code>indent_patterns</code>, increase <code>space</code>.</p>

<pre><code>if any(re.search(pattern, line, re.IGNORECASE) for pattern in dedent_patterns):
    self.space -= 4

self.print_ln(line)

if any(re.search(pattern, line, re.IGNORECASE) for pattern in indent_patterns):
    self.space += 4
</code></pre>

<p>... and the <code>indent</code>, <code>dedent</code> and <code>dedent_indent</code> functions just became unnecessary.</p>

<p>Since <code>print_ln()</code> is called in one spot, we can write than inline as well, which eliminates the need for <code>self.space</code> to be a member variable.</p>

<hr>

<p>With no member variables left, the entire class can be replaced with one function.</p>

<pre><code>import re

def indent(lines, spacing=4):

    indent_patterns = ['^if.*then', '^for', '^with', '^do until', '^do$', '^select case',
                       '^case', '^else', '^elseif.*then']
    dedent_patterns = ['^end select', '^loop', '^end with', '^end if', '^next',
                       '^case', '^else', '^elseif.*then']

    space = 0

    for line in lines:
        line = line.strip()

        if any(re.search(pattern, line, re.IGNORECASE) for pattern in dedent_patterns):
            space -= spacing

        print(" "*space + line)

        if any(re.search(pattern, line, re.IGNORECASE) for pattern in indent_patterns):
            space += spacing

if __name__ == '__main__':

    with open('scratch.html') as file:
        indent(file)
</code></pre>

<p>And like what was said above, stop writing classes.</p>

<hr>

<p>This does not address the sporadic indentation caused by HTML and Javascript in the file, but</p>

<ul>
<li>this is a Code Review, which only addresses the code you have actually written.  This is not a forum where you come to get help writing new code, but to get a review of code you have already written.</li>
<li>with a cleaner implementation of the indent code, you should have an easier time addressing that issue.  When you have finished, feel free to post a follow-up question.</li>
</ul>
    </div>