<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is very idomatic, in principle.  The loop refactoring is exactly what I would have done.</p>

<p>Here's some other suggestions:</p>

<pre><code>const Coords{T} = NTuple{N, T} where N

function _octaves(coords::Coords{T}; octaves::Int=1, persistence::T=one(T)) where {T&lt;:Real}
    if octaves &lt; 1
        # prevent zero division
        throw(DomainError(octaves, "`octaves` must be at least 1!"))
    end

    total = zero(T)
    maxval = zero(T)

    for octave in 1:octaves
        p = octave - 1
        frequency = 2 ^ p
        amplitude = persistence ^ p

        maxval += amplitude

        scaled_coords = coords .* frequency
        total += simplexnoise(scaled_coords...) * amplitude
    end

    return total / maxval
end
</code></pre>

<ol>
<li>Using <code>one</code> and <code>zero</code> to ensure <strong>type stability</strong> (a very important concept, which you should read about if you don't know it!)</li>
<li>Replacing some intermediate updates by explicit powers.  The calculation of <code>frequency</code> is trivial to the compiler, since it is an integer power of 2.  <code>amplitude</code> might do some unnecessary work; I think it is clearer that way, and not worth the microoptimisation, but you'd have to test that for your use case.</li>
</ol>

<p>The choice of type for <code>coords</code> is really determined by the rest of the code.  If this is only ever going to be used for coordinates of bounded dimension, I'd very much prefer a tuple as I wrote above.  If you use vectors all the way down (this looks a bit like signal processing?), then staying with <code>Coords{T} = Vector{T}</code> is easier.</p>

<p>While not part of the question, it might be nicer to have <code>simplenoise</code> work on an iterable, not a varargs argument.  Possibly even as <code>simplenoise(frequency, coords)</code>, then the allocation of <code>scaled_coords</code> is removed.</p>

<p>If there's any chance that the summation will overflow, take a look at <a href="https://docs.julialang.org/en/v1/base/base/#Base.widen" rel="nofollow noreferrer"><code>Base.widen</code></a>.  Also, you might want to ensure that <code>octaves &lt; 8 * sizeof(Int)</code> or something like that, and add this to the check at the beginning.</p>

<p>If this is really the hot part of some code to be optimized, with <code>octaves</code> being constant over many calls, there's the possibility to write a <code>@generated</code> function to unroll the loop completely, but unless it is critical, it's not worth it.</p>

<hr>

<p>As for the difference in benchmarking: first, you should do that with <a href="https://github.com/JuliaCI/BenchmarkTools.jl" rel="nofollow noreferrer">BenchmarkTools.jl</a>, not <code>@time</code>.  Then, I haven't measured myself, but it's quite surely due to the intermediate <code>inputs</code> array you construct.</p>
    </div>