<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Your docstrings are not compliant, they should use <code>"""</code> not <code>'''</code>. You currently have discouraged unless multiline string literals.</li>
<li>If you are inheriting from nothing <code>()</code>, then you can just remove the brackets and make your code cleaner.</li>
<li>The <code>Necklace</code> class is largely over complicated.</li>
<li>The <code>Necklace</code> class is even more redundant when you do <code>self.cycles_list = self.get_cycle()</code>.<br>
This also signals to me that the Necklace is actually performing two jobs, and not the one i would intuitively think.</li>
<li>It's un-Pythonic to use <code>while</code> loops when you can easily use a <code>for i in range</code> loop.</li>
<li>You can change <code>self.get_cycle()</code> to a simple list comprehension and merge <code>cycle_left</code> into it.</li>
<li>To handle the <code>solution_1("", "") is True</code> test case, we can default the <code>range</code> to 1 if the length is 0.</li>
<li><code>is_same_necklace</code> is a really poor name, even more so that a simple <code>in</code> is more readable and better understood. You can allow a class to utilize this operator by defining the <code>__contains__</code> dunder method.</li>
<li>You can simplify the logic of <code>count_repeats</code> by removing the last value.</li>
<li>Your tests would better be described as <a href="https://docs.pytest.org/en/latest/" rel="nofollow noreferrer">pytest</a> tests.</li>
</ul>

<p>So far this would get:</p>

<pre class="lang-py prettyprint-override"><code>def necklace_cycle(beads):
    return [
        beads[i:] + beads[:i]
        for i in range(len(beads) or 1)
    ]


def solution_1(original, changed):
    return changed in necklace_cycle(original)


def solution_2(original):
    return necklace_cycle(original).count(original)


def test_solution_1():
    for original, changed, expected in [
        ("nicole", "icolen", True),
        ("nicole", "lenico", True),
        ("nicole", "coneli", False),
        ("aabaaaaabaab", "aabaabaabaaa", True),
        ("abc", "cba", False),
        ("xxyyy", "xxxyy", False),
        ("xyxxz", "xxyxz", False),
        ("x", "x", True),
        ("x", "xx", False),
        ("x", "", False),
        ("", "", True),
    ]:
        assert solution_1(original, changed) is expected


def test_solution_2():
    for original, expected in [
        ("abc", 1),
        ("abcabcabc", 3),
        ("abcabcabcx", 1),
        ("aaaaaa", 6),
        ("a", 1),
        ("", 1),
    ]:
        assert solution_2(original) == expected
</code></pre>

<ul>
<li>You should always wrap <code>open</code> in a <code>with</code>. This is so the file is closed correctly. Currently you're not closing the file, which can lead to problems.</li>
<li>You can just use <code>file.read_lines()</code> and strip the newlines.</li>
<li><p>You can use <code>setdefault</code> to set a dictionaries key to a list and then append to that list.</p>

<pre class="lang-py prettyprint-override"><code>for word in all_words:
    words_dict.setdefault(len(word), []).append(word)
</code></pre></li>
<li><p>Personally I would move this grouping code into its own function. This will allow us to use it twice if we need to.</p></li>
<li><p>You can use <code>for key, words in words_dict.items():</code> rather than:</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>for key in words_dict:
    words = words_dict[key]
</code></pre>
</blockquote></li>
<li><p>If you remove the <code>print</code> then you can use <code>for words in words_dict.values():</code> instead.</p></li>
<li><p>You can use <code>for index, word in enumerate(words, start=1):</code> rather than:</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>for word in words:
    index = words.index(word)+1
</code></pre>
</blockquote>

<p><strong>Note</strong>: These are technically different operations if there are duplicates in <code>words</code>. However <code>enumerate</code> is the solution that you want to use.</p></li>
<li><p>You can update the <code>similar</code> to be appended to using <code>dict.setdefault</code>.</p></li>
<li>I would change the default to <code>[word]</code> rather than <code>[]</code>.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def get_words(file_name):
    with open(file_name) as f:
        return map(str.rstrip, f.readlines())


def grouper(values, transformation):
    output = {}
    for value in values:
        output.setdefault(transformation(value), []).append(value)
    return output


def find_similar_words(words):
    similar = {}
    for grouped_words in grouper(words, len).values():
        for index, word in enumerate(grouped_words, start=1):
            necklace = necklace_cycle(word)
            for word2 in grouped_words[index:]:
                if word2 in necklace:
                    similar.setdefault(word, [word]).append(word2)
    return similar.values()


def solution_3():
    four_words = (
        words
        for words in find_similar_words(get_words("enable1.txt"))
        if len(words) &gt;= 4
    )
    return next(four_words, None)


def test_solution_3():
    assert solution_3() == ["estop", "pesto", "stope", "topes"]
</code></pre>

<p>It's much easier to read, and also runs in 5:20 rather than 10:30. This includes the time it takes to run all tests. But since the other tests take 0.05s I'm fine with this. Now we can focus on improving performance.</p>

<h1>Anagrams</h1>

<p>You should group by anagrams. This is because you're currently checking if <code>four</code> and <code>cats</code> are similar. And I think them not sharing a single character in common <em>might</em> just indicate that they are not.</p>

<p>To do this you can just sort the value and group by that. This makes your <span class="math-container">\$O(n^2)\$</span> code perform better because <span class="math-container">\$n\$</span> is now <em>much</em> smaller than it was before. This is because <span class="math-container">\$a^2 + b^2 &lt;= (a + b)^2\$</span> when a and b are natural numbers - which is what we're working with.</p>

<pre class="lang-py prettyprint-override"><code>def by_anagram(word):
    return tuple(sorted(word))


def find_similar_words(words):
    similar = {}
    for grouped_words in grouper(words, by_anagram).values():
        ...
</code></pre>

<p>This runs in 1.04s rather than 5:20.</p>

<h1>Sets</h1>

<p>You can further improve the performance and readability of the code by using sets. We know that the updated <code>find_similar_words</code> should return the intersection of the necklace and the grouped words. Since you are already returning duplicates this means we can just use <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.intersection" rel="nofollow noreferrer"><code>set.intersection</code></a>. The performance increase from this is likely due to the fact that we're returning early, and so don't consume the entire of the grouper.</p>

<pre class="lang-py prettyprint-override"><code>def find_similar_words(words):
    for words_ in grouper(words, by_anagram).values():
        words_ = set(words_)
        for word in words_:
            yield words_ &amp; set(necklace_cycle(word))
</code></pre>

<p>This runs in 0.62s rather than 1.04s.</p>
    </div>