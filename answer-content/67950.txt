<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just compute the lcm of all numbers from 1Â to 20. </p>

<p>LCM of (a, b) is (a * b)/gcd(a, b) and the Euclids's algorithm for GCD is one of the earliest algorithm thaught in a class about functions and recursion.</p>

<p>I am not fluent in C# but here is an example in Scala :</p>

<pre><code>object Euclid extends App {

       def gcd(a: Long, b: Long): Long = {  
           if (b == 0) a else gcd(b, a % b)
       }

       def lcm(a: Long, b: Long) = (a / gcd(a, b)) * b

       var answer = 1l
       for (i &lt;- 2 to 20) answer = lcm(answer, i)

       println(answer)
}
</code></pre>

<p>Evaluating the complexities of algorithms is a must when trying to solve that kind of problems.</p>

<p>The complexity of Euclid's algorithm can be approximated by \$O(log(max(a,b)))\$. The LCM of numbers from 1 to n can be calculated in \$O(n.log(n))\$ steps and I think that this approach is the best proposed so far.</p>

<p>OK, here is a solution in Java, which should be more readable to a C# programmer:</p>

<pre><code>public static int gcd(int a, int b) {
  if (b == 0) return a; else return gcd(b, a%b);
}

public static int lcm(int a, int b) {
  return b*(a/gcd(a, b));
}

public static int euler() {
  int answer = 1;
  for (int i = 2; i &lt;= 20; i++) {
     answer = lcm(answer, i);
  }
  return answer;
}
</code></pre>

<p>[edit] Original code could overflow, be careful to use longs and doing the division before the multiplication in LCM.</p>
    </div>