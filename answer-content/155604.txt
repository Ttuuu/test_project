<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Alternative: Use static fields</h2>

<p>An alternative solution would eliminate both the <code>enum</code> and the <code>switch</code>, by using static fields instead.</p>

<p>This solution has the advantage of not having to do any bridging/mapping of the <code>string</code> to an <code>enum</code>, while making your code look neat and tidy.</p>

<pre><code>public static class InteractionType
{
    public static readonly string None = "";
    public static readonly string Gate = "gate";
    public static readonly string Postit = "postit";
    public static readonly string Moodlight = "dimmer";
    public static readonly string Trophy = "trophy";
    ...
}
</code></pre>

<p>However, among other disadvantages, the one that stands out against your provided code is going to be the default cases, as it would require you deal with assigning the default/unmapped cases manually to <code>None</code>. (i.e. <code>"default"</code> has to be turned into <code>""</code>)</p>

<p>You could fix that by using reflection and enumerate the static fields, to create a <code>List&lt;string&gt;</code> to aid your "cleaning up" of the <code>string</code>, so that it will match up with the <code>static string</code> (our <code>enum</code>/<code>switch</code> replacement).</p>

<pre><code>private static readonly List&lt;string&gt; _interactionTypes = typeof(InteractionType)
    .GetFields(BindingFlags.Static | BindingFlags.Public)
    .Select(_ =&gt; _.GetValue(null).ToString())
    .ToList();

public string MatchValidOrDefault(string value)
{
    if (value == null) throw new ArgumentNullException(nameof(value));

    if(_interactionTypes.Contains(value) return value; //exact matches only
    // you can also do alternative matching, such as
    // if(_interactionTypes.Contains(value), StringComparer.CurrentCultureIgnoreCase) return value.ToLower();
    return InteractionType.None;
}
</code></pre>

<h2>Additional things to consider</h2>

<p>Note that this also means that a single static field can be mapped to the same string, for example:</p>

<pre><code>public static readonly string Foo = "foo";
public static readonly string Bar = "foo";
</code></pre>

<p>Where the following statement is true...</p>

<pre><code>InteractionType.Foo == InteractionType.Bar // "foo" == "foo"
</code></pre>

<p>This solution allows multiple "enums" (static fields) to be mapped to a single <code>string</code>. Which can be useful depending on the requirements of your program.</p>
    </div>