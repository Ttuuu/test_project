<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I read the question and understood that <code>BowlingGame</code> interface is given.
Regardless, your design is overly complex and breaks the SOLID Design Principles (which I understood are part of the purpuses).</p>

<ol>
<li><p>The <code>Frame</code> class should be concerned about the logic of one frame <strong>and one frame only</strong>.<br>
instead, it is also the collection that holds all frames, and it also decides on the implementation of that collection - a user-defined linked list (re-inventing the wheel, since the JDK has a ready made implementation), the class is also responsible for deciding when and how to instantiate a new frame, and even when the game is finished (deciding if it is the last frame).  All of these topics are outside of the responsibilities of a single Frame.<br>
Because of that, the Game class has indeed really very little to do besides delegete all logic to the frame.   </p></li>
<li><p>Taking linked list as the collection seems unnecessary here, given that the number of frames is constant. in such cases (length is known in advance and it is a relatively small number) it would be better to use a plain array <code>Frame[] game = new Frame[10];</code> that tells in one line how many frames are in one game.  (instead of using recursion, really? for such a simple task use recursion??) and of course, declaring and manipulating the array is the responsibility of the <code>Game</code> class.<br>
...and while we are at the point, there are (usually) two rolls per frame, so why not make that into an array as well instead of two separate variables? the advantages of using an array over two separate variables: a frame gets a new <code>roll()</code> and it assigns the new roll to the next empty place in the array (instead of asking on a seperate variable) and hence the last frame might be initialised with an array of length==3.</p></li>
<li><p>Regarding the use of <code>Optional</code>: it was introduced to Java 8 mainly as a solution to <code>NullPointerException</code> that gets thrown when the developer forget to explicitly check for this condition. in most cases, it occurs in method chaining such as <code>map.get(key).toString()</code>. since the exception is unchecked and thus gets thrown at run time, there was no way for the compiler to check this and it was a common error. so while it is feasible, its really isn't a good use case. I would go with a primitive <code>int</code> that is initialized to a negative value. to avoid <a href="https://codeburst.io/software-anti-patterns-magic-numbers-7bc484f40544" rel="nofollow noreferrer">magic numbers anti pattern</a> you can define and use a constant <code>public static final int EMPTY_ROLL = -1;</code>  </p></li>
</ol>
    </div>