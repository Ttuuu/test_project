<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can almost always use a standard algorithm. It doesn't always look nicer though, but your intent is easier to read and you can benefit from the library's optimizations (and from parallelized algorithms with some luck)</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;iterator&gt;

...
std::vector&lt;int&gt; ids;
std::transform(users, std::next(users, total_users), std::back_inserter(ids), 
               [](const auto&amp; user) {
    return user.id;
});
</code></pre>

<p>Then it depends on the API call. </p>

<p>If the return value is a non-owning pointer, the best thing is to build a <code>span</code> from it. It isn't standardized, but is part of the <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines" rel="nofollow noreferrer">C++ core guidelines</a>. It basically is a pointer bundled with a size. You could the use a <code>range based for loop</code>:</p>

<pre><code>gsl::span&lt;User&gt; users( ... API CALL ... , total_users);
for (const auto&amp; user : users) ...
</code></pre>

<p>If the pointer owns the memory it points to, it can be a bit trickier, because the resource must be freed the same way it was allocated: <code>malloc</code> -&gt; <code>free</code>, <code>new</code> -&gt; <code>delete</code>, <code>new[]</code> -&gt; <code>delete[]</code>, etc. The best thing could be to use a smart pointer, but you'd need to specify the destructor to call. There is a level of complexity beyond which it is advisable to build a RAII wrapper around the legacy API, even if it looks like more work / complexity.</p>
    </div>