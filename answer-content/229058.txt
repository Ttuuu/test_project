<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>AbstractNode</code> must have a virtual destructor (if we have child classes, we'll be deleting them from a pointer to the base class).</p>

<hr>

<p>It doesn't look like we require shared ownership of nodes, so we don't need to use <code>std::shared_ptr</code>. The parent node owns its children, and children have a non-owning pointer to the parent.</p>

<p>We can therefore use <code>unique_ptr</code> for storing the children, and a raw pointer to refer to the parent. This makes the code quite a bit simpler.</p>

<hr>

<p>For "sink" arguments (function arguments that we want to copy and store internally), it's best to take them by value. The current code requires r-value references, <a href="http://blogs.microsoft.co.il/sasha/2014/08/21/c-sink-parameter-passing/" rel="nofollow noreferrer">which would force the user to do a copy themselves outside the class</a> if they don't want to move something, which is very awkward.</p>

<p>So we should be doing:</p>

<pre><code>    ParseWithDescriptorNode(std::string body, std::string_view innerBody, std::vector&lt;std::string&gt; tokens, ParentRef parent)
            : ParseNode(std::move(body), std::move(tokens), std::move(parent)), m_InnerBody(std::move(innerBody)) {
    }
</code></pre>

<p>(There's no point moving the <code>string_view</code>, but it's consistent, and there's no real downside).</p>

<hr>

<p>Since we specify exact types here:</p>

<pre><code>    using NodeFactory = std::function&lt;std::shared_ptr&lt;ParseWithDescriptorNode&gt;(std::string&amp;&amp;, std::string_view const&amp;, std::vector&lt;std::string&gt;&amp;&amp;, AbstractNode::ParentRef)&gt;;
</code></pre>

<p>It's kinda weird to use a generic lambda here:</p>

<pre><code>        m_NamesToNodes.emplace(nodeName, [](auto&amp;&amp; block, auto const&amp; body, auto&amp;&amp; tokens, auto parent) {
            auto node = std::make_shared&lt;TNode&gt;(std::forward&lt;decltype(block)&gt;(block), body, std::forward&lt;decltype(tokens)&gt;(tokens), parent);
            node-&gt;parse();
            return node;
        });
</code></pre>

<p>I guess the generic lambda is to get perfect forwarding working, but it's a bit confusing.</p>

<p>As above, the specification of <code>std::string&amp;&amp;</code> and <code>std::vector&lt;std::string&gt;&amp;&amp;</code> unnecessarily require r-value references, which isn't ideal.</p>

<hr>

<pre><code>    std::string_view m_InnerBody;
</code></pre>

<p>We need to be careful about keeping a <code>string_view</code> around as a class member. It looks like this will refer to a local variable in <code>recurseNodes</code>, which will go out of scope and become invalid well before the Node's lifetime ends. There are two things we could do to improve things:</p>

<p>Do everything we need to do with the string data in the constructor (i.e. call <code>parse()</code> in the constructor, instead of as a separate step).</p>

<p>Store indices instead (since an index remains valid and usable independent of the lifetime of the string).</p>

<hr>

<p>(Unlike the other answer) I personally like the use of <code>auto</code> for declaring local variables. It makes declarations instantly recognizable and uniform, and puts the focus on the semantics of the object (value, <code>&amp;</code>, <code>const&amp;</code>), instead unnecessarily repeating the type.</p>

<p>We can improve things a bit though:</p>

<ul>
<li>Use <code>auto</code> consistently for every local variable.</li>
<li>Put <code>const</code>ness after the <code>auto</code>, so <code>auto</code> is always the first word.</li>
<li>Put the type on the right-hand side of the declaration if necessary.</li>
<li>Never declare multiple variables in one line using commas.</li>
</ul>

<p>e.g.</p>

<pre><code>    auto sources = options["input"].as&lt;std::vector&lt;std::string&gt;&gt;();
    auto const&amp; firstFile = sources.front();
    ...
        auto c = char{ code[i] };
    ...
                auto blockWithInfo = std::string(code.substr(blockInfoStart, blockInfoSize));
</code></pre>

<hr>

<p>Using <code>boost</code> is fine, but it may be worth writing our own split function using <code>std::string_view</code>. It looks like we could do all the parsing without any string copies at all.</p>
    </div>