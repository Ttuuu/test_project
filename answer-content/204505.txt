<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Comments</h3>

<ol>
<li><p>Don't use <code>new RegExp</code> if you can just use the literal syntax. <code>new RegExp('^[a-z]*$')</code> is equivalent to <code>/^[a-z]*$/</code></p></li>
<li><p>Instead of using <code>''.match(/^$/)</code> to check if a string matches a regular expression, use <code>/^$/.test('')</code> to more clearly communicate your intent.</p></li>
<li><p>Watch out for HTML characters! You got lucky in this case that since <code>&lt;</code> is an invalid character, it will always be translated into <code>&lt;span class="strike"&gt;&lt;&lt;/span&gt;</code>, however this isn't really something to rely on. Building HTML from strings is dangerous and should be avoided if at all possible.</p></li>
<li><p>While this system helps the user recognize where they have included invalid characters, it doesn't tell them what they are missing. It would be helpful to indicate that they are missing part of the required string.</p></li>
</ol>

<h3>Invalid Emails</h3>

<p>You state that the assumptions about emails are already baked in, and cannot be changed, but it really should be. Why? <code>/^[a-z0-9]*[@][a-z]*[.][a-z]{1,3}$/.test('@.co')</code> is true. According to this regex, <code>@.co</code> is a valid email. Chances are, this will cause issues someday. It is likely that whoever wrote the regex really meant <code>^[a-z0-9]+[@][a-z]+[.][a-z]{1,3}$</code>, or more succinctly, <code>^[a-z0-9]+@[a-z]+\.[a-z]{1,3}$</code>. I'd recommend bringing this up to whoever can make this change, even if modifying the system more than this isn't feasible.</p>

<h3>Alternative Approach</h3>

<p>I'd like to make a note on your approach to validating the email itself. At its core, you assign a pattern, consume the string until you find a signal character, and then change patterns until you hit another signal character (or length). Recognizing this makes it possible to significantly simplify your logic, and leave room for expansion in the future. Here's one way to implement this scanner.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>// @ts-check

/**
 * Parses a string into an array of objects that can be combined to produce
 * a helpful display for the user to see where their input is invalid.
 * A matcher must mark its signal value as valid.
 * @param value {string} the string to parse.
 * @param matchers {{ valid: (c: string, i: number) =&gt; boolean, done: (c: string, i: number) =&gt; boolean}[]} the matchers that reveal if a character is valid.
 * @returns {{ text: string, valid: boolean }[]}
 */
function validateString(value, matchers) {
  const result = []

  let matcherIndex = 0
  let matcherLength = 0
  let outputLength = 0

  const append = (text, valid) =&gt; {
    outputLength += text.length
    if (!result.length || result[result.length - 1].valid !== valid) {
      result.push({ text, valid })
    } else {
      result[result.length - 1].text += text
    }
  }

  for (const char of value) {
    if (matchers.length &lt;= matcherIndex) {
      break
    }
    const matcher = matchers[matcherIndex]

    append(char, matcher.valid(char, matcherLength))

    if (matcher.done(char, matcherLength++)) {
      matcherIndex++
      matcherLength = 0
    }
  }

  // If we ran off the end of the matchers, the rest of the string is invalid
  if (outputLength &lt; value.length) {
    append(value.substring(outputLength), false)
  }

  return result
}

const emailMatchers = [
  { valid: c =&gt; /[a-z0-9@]/.test(c), done: c =&gt; c == '@' }, // ^[a-z0-9]*@
  { valid: c =&gt; /[a-z.]/.test(c), done: c =&gt; c === '.' }, // [a-z]*\.
  { valid: c =&gt; /[a-z]/.test(c), done: (_, i) =&gt; i === 2 } // [a-z]{1,3}
]

const emails = [
  'test@test.com',
  'test@*test.com',
  'test@*test.comasdf',
  'test***#@*#*test.com',
  '***aaa@bbb.com',
  '@example.com',
  '@asd.d**',
  'test$@'
]

const ul = document.querySelector('ul')
for (const email of emails) {
  const li = ul.appendChild(document.createElement('li'))
  for (const { text, valid } of validateString(email, emailMatchers)) {
    const el = document.createElement(valid ? 'span' : 'del')
    li.appendChild(el).textContent = text
  }
}

const resultEl = document.querySelector('div')

document.querySelector('input').addEventListener('input', ({ target }) =&gt; {
  resultEl.innerHTML = ''
  for (const { text, valid } of validateString(target.value, emailMatchers)) {
    const el = document.createElement(valid ? 'span' : 'del')
    resultEl.appendChild(el).textContent = text
  }
})</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>del {
  color: red;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;input placeholder="example@example.com"&gt;

&lt;div&gt;&lt;/div&gt;

&lt;ul&gt;&lt;/ul&gt;</code></pre>
</div>
</div>

    </div>