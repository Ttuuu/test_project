<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Reserved Name</h1>

<p><code>print</code> is a reserved name in python, so having a method with the same name isn't the best idea. I would use something like <code>print_grid</code> or <code>print_game</code>, something a little more descriptive, and also doesn't conflict with <code>print</code>.</p>

<h1>Naming Conventions</h1>

<p>Method and variable names should be in <code>snake_case</code>, not <code>camelCase</code>.</p>

<h1>Main Guard</h1>

<p>You should use a main guard when you have outside code. Take a look:</p>

<pre><code>if __name__ == '__main__':
    pong = Pong()
    pong.play()
</code></pre>

<p>This prevents the two lines from being run if you decide to import this game from another module.</p>

<h1>Keystrokes</h1>

<p>It seems a little unnecessary to use <code>tkinter</code> for a console game. Consider using something like <a href="https://pypi.org/project/pynput/" rel="nofollow noreferrer"><code>pynput</code></a> or <a href="https://docs.python.org/3/howto/curses.html" rel="nofollow noreferrer"><code>curses</code></a> to listen to keyboard strokes.</p>

<h1>Unnecessary Code</h1>

<p>This</p>

<pre><code>if (self.terminal[self.ball[0] - 1] == '-') and (self.terminal[self.ball[0] + 1] == '|') or (self.terminal[self.ball[0] + 1] == '-') and (self.terminal[self.ball[0] - 1] == '|'):
    self.move[0] *= -1
else:
    self.move[0] *= -1
    self.move[1] *= -1
</code></pre>

<p>is unnecessarily complicated. Since <code>self.move[0] *= -1</code> is run anyway, you only need to check if this condition is <code>False</code>:</p>

<pre><code>if not ((self.terminal[self.ball[0] - 1] == '-') and (self.terminal[self.ball[0] + 1] == '|') or (self.terminal[self.ball[0] + 1] == '-') and (self.terminal[self.ball[0] - 1] == '|')):
    self.move[1] *= -1
self.move[0] *= -1
</code></pre>

<h1>tkinter conventions</h1>

<p>When using <code>tkinter</code>, it's recommended to pass <code>tk</code> into the class's constructor. Take a look:</p>

<pre><code>def __init__(self, master):
    self.tk = master
</code></pre>

<p>Then your initialization code looks like this:</p>

<pre><code>if __name__ == '__main__':
    root = Tk()
    pong = Pong(root)
    pong.play()
</code></pre>

<h1>Type Hinting</h1>

<p>You can use type hints to make it clear what types of parameters are passed to functions, and what types are returned by functions. Lets take a look at your <code>moveDown</code> (should be <code>move_down</code>) function header:</p>

<pre><code>def moveDown(self, p):
</code></pre>

<p>Now consider this</p>

<pre><code>from typing import List

def moveDown(self, p: List[int]) -&gt; None:
</code></pre>

<p>This says that <code>moveDown</code> (again, <code>move_down</code>) should take a list of integers and returns None. This becomes more useful as you write functions with more parameters.</p>

<h1>Docstrings</h1>

<p>Lets expand upon your <code>moveDown</code> function. This can be even more descriptive by using a function docstring. This will allow you to put in words what the function is supposed to do. Take a look:</p>

<pre><code>def moveDown(self, p: List[int]) -&gt; None:
    """
    Moves the bars down. What player moves depends on the list passed.

    :param p -&gt; List[int]: Player to move

    :return: None
    """
</code></pre>

<p>Now there is more description to the method, and also allows you to describe the parameters accepted, what values are returned, and what happens in the function. You can also provide when you should use this function.</p>
    </div>