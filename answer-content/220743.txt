<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>(1) Algorithm</p>

<p>Since the octave and the note name are completely independant, you could mitigate boiler-plate concatenation and optimize reusability by using a class that stores the information for you. Additional complexity is required to determine the accidentals of a note given its degree and pitch. I have added the algorithm for this in my alternative solution.</p>

<blockquote>
<pre><code>const KEYS_NORMAL =  ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
let keys = KEYS_NORMAL.slice(-3);
keys = keys.map( k =&gt; k + '0');
</code></pre>
</blockquote>

<pre><code>class Note {
    constructor(degree, pitch) {
        this.degree = degree;
        this.pitch = pitch;
    }
    get Octave() {
        return this.modulo(this.pitch);
    }
    set Octave(n) {
        this.pitch = n * 12 + this.modulo(this.pitch);
    }
    modulo(n) {
        return (n % 12 + 12) % 12;
    }
    ..
}
</code></pre>

<p>(2) Algorithm</p>

<p>I like the idea of using interval patterns to identify scales.</p>

<blockquote>
<pre><code>majorSemiTones = [2,2,1,2,2,2];
minorSemiTones = [2,1,2,2,1,2];
</code></pre>
</blockquote>

<p>However, when hardcoding them in the algorithm, there is not much room for extensibility and modularity.</p>

<blockquote>
<pre><code>if(scaleName.indexOf("m") &gt; -1){
            minor = true;
            intervals = this.minorSemiTones;
        }
</code></pre>
</blockquote>

<h2>Alternative</h2>

<p>Given your expected outcome:</p>

<blockquote>
  <p>So I have to create this array (like the image):</p>

<pre><code>[ "A0", "Bb0", "B0", "C1", "Db1", "D1", "Eb1", "E1", "F1", "Gb1", "G1", "Ab1", "A1", "Bb1", "B1".............., "B7", "C8"]
</code></pre>
  
  <p>The second algorithm returns a scale given a note. For those who don't know a scale starts on any note and is given by the algorithm below:</p>

<pre><code>Major: 2 - 2 - 1 - 2 - 2 - 2 - 1
Minor : 2 - 1 - 2 - 2 - 1 - 2 - 2
</code></pre>
</blockquote>

<p>I have created a little API to get you the <em>scale</em> given the input <em>key</em> and scale <em>interval pattern</em>.</p>

<p><a href="https://jsfiddle.net/57qdm2ro/" rel="nofollow noreferrer">Fiddle that outputs to the browser console</a></p>

<pre><code>function getScaleByIntervalPattern(key, intervalPattern) {
  "use strict";

  const keyNote = Note.FromName(key);
  var currentNote = keyNote;

  var result = intervalPattern.reduce(function (scale, scaleStep, degree) {
    scale.push(currentNote.enharmonic().Name);
    currentNote = currentNote.clone().transpose(new Interval(1, scaleStep));
    return scale;
  }, []);

  return result;
}
</code></pre>

<p>This results in the following scales, using enharmonic note names. If you don't want to use the enharmonic names, you should substitute <code>currentNote.enharmonic().Name</code> with <code>currentNote.Name</code>. Or - in your case - if you want only flattened altered notes, use <code>currentNote.descendingEnharmonic().Name</code>.</p>

<pre><code>function onLoad() {
  "use strict";

  // C# major scale
  console.log(getScaleByIntervalPattern('C#', [2, 2, 1, 2, 2, 2, 1]));
  // Db major scale
  console.log(getScaleByIntervalPattern('Db', [2, 2, 1, 2, 2, 2, 1]));
  // C# minor scale
  console.log(getScaleByIntervalPattern('C#', [2, 1, 2, 2, 1, 2, 2]));
  // Db minor scale
  console.log(getScaleByIntervalPattern('Db', [2, 1, 2, 2, 1, 2, 2]));
}
</code></pre>

<p>results</p>

<p><em>by scale function</em></p>

<pre><code>- (7) ["C#5", "D#5", "E#5", "F#5", "G#5", "A#5", "B#6"]
- (7) ["Db5", "Eb5", "F5", "Gb5", "Ab5", "Bb5", "C6"]
- (7) ["C#5", "D#5", "E5", "F#5", "G#5", "A5", "B5"]
- (7) ["Db5", "Eb5", "Fb5", "Gb5", "Ab5", "Bbb5", "Cb5"]
</code></pre>

<p><em>enharmonic</em></p>

<pre><code>- (7) ["C#5", "D#5", "F5", "Gb5", "Ab5", "Bb5", "C6"]
- (7) ["Db5", "Eb5", "F5", "Gb5", "Ab5", "Bb5", "C6"]
- (7) ["C#5", "D#5", "E5", "F#5", "G#5", "A5", "B5"]
- (7) ["Db5", "Eb5", "E5", "F#5", "G#5", "A5", "B5"]
</code></pre>

<p><em>descending enharmonic</em> (how you'd prefer)</p>

<pre><code>- (7) ["Db5", "Eb5", "F5", "Gb5", "Ab5", "Bb5", "C6"]
- (7) ["Db5", "Eb5", "F5", "Gb5", "Ab5", "Bb5", "C6"]
- (7) ["Db5", "Eb5", "E5", "Gb5", "Ab5", "A5", "B5"]
- (7) ["Db5", "Eb5", "E5", "Gb5", "Ab5", "A5", "B5"]
</code></pre>

<p><em>ascending enharmonic</em></p>

<pre><code>- (7) ["C#5", "D#5", "F5", "F#5", "G#5", "A#5", "C6"]
- (7) ["C#5", "D#5", "F5", "F#5", "G#5", "A#5", "C6"]
- (7) ["C#5", "D#5", "E5", "F#5", "G#5", "A5", "B5"]
- (7) ["C#5", "D#5", "E5", "F#5", "G#5", "A5", "B5"]
</code></pre>
    </div>