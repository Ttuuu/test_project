<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review</h2>
<ul>
<li><p>Prefer <code>int</code> to <code>const inline int</code>. See Previous review.</p>
</li>
<li><p>Prefer to pass by const reference</p>
</li>
<li><p>Prefer to put the <code>&amp;</code> next to the type (not the parameter).<br>
Its part of the type information (note this is the opposite of C).</p>
<pre><code>  static const inline int maxPoints(const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;points)
</code></pre>
</li>
</ul>
<hr>
<p>This is absolutely fine (I have not problems with it).</p>
<pre><code>        int max_points = 0;
</code></pre>
<p>But most (I have no real metrics for this, but in my experience) tend to use "CamelCase" rather than "Snake_Case" naming convention.</p>
<hr>
<p>Prefer to use pre-increment rather than post increment</p>
<pre><code>        for (int index_i = 0; index_i &lt; points.size(); index_i++) {
</code></pre>
<p>The reason is that C++ code can simply be changed by changing the type used. Now pre/post fix increment on an integer has exactly the same type. But if we change the type used for the iterator then pre/post increment can be slightly different in cost. The standard implementation of iterators (the most common thing used in loops) will give you a slightly more expensive operation (in theory) than a pre-increment. Thus the standard advice is to always use the pre-increment to make sure you always use the most efficient operation.</p>
<hr>
<p>Be aware of the new range based operator.<br>
Not sure it totally helps here. But keep in mind the range based operator:</p>
<pre><code>        for (int index_i = 0; index_i &lt; points.size(); index_i++) {
            auto&amp; item = points[index_i];

            // STUFF
        }

        // can be simplified to:
        for (auto&amp; item: points) {

            // STUFF
        }
</code></pre>
<hr>
<p>Your assuming that <code>using namespace std;</code> is somewhere above you.</p>
<pre><code>            map&lt;pair&lt;int, int&gt;, int&gt; points_map;
</code></pre>
<p>Don't. Even using <code>using namespace std;</code> is considered bad pactice.</p>
<hr>
<p>Not very common to see the use of <code>not</code>. It is much more common to use <code>!</code>.</p>
<pre><code>        if (not b) {

        ----

        if (!b) {
</code></pre>
<p>For most C developers this will be the normal.</p>
    </div>