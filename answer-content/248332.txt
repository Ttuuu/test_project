<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The async/await method isn't really about running parallel code; it is about releasing the current thread instead of having it wait for i/o bound processing.</p>
<p>Imagine 20 people call that end point; on the first call there is a thread of execution create. If Security.IsAdministrator hits a database then this is IO and that calling thread would block until the IO was complete.</p>
<p>Using Task.Run and async/await will not cause the thread to block, the thread gets released to can process the next 19 calls. Once IO is complete another thread, or the same one, picks up the processing.</p>
<p>So I would say it is not meaningless, if the tasks involve IO.</p>
    </div>