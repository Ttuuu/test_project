<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't fully understand your code, but it seems to look only at the presence or absence of the previous element when deciding whether to include the current one, so I constructed a test case and verified that it fails:</p>

<pre><code>print(get_max_sum(6, [10, 10, 0, 0, 10, 10]))
</code></pre>

<p>should give <code>40</code> but actually gives <code>30</code>.</p>

<hr>

<blockquote>
<pre><code>    if main_output[0]['sum'] &gt;= main_output[1]['sum']:
        return main_output[0]['sum']
    else:
        return main_output[1]['sum']
</code></pre>
</blockquote>

<p>doesn't need to be so verbose. Prefer</p>

<pre><code>   return max(main_output[0]['sum'], main_output[1]['sum'])
</code></pre>

<hr>

<blockquote>
<pre><code>    output_1 = {'skip': True, 'sum': input[0]+input[1], 0: input[0], 1:input[1]}
    output_2 = {'skip': False, 'sum': input[0]+input[2], 0: input[0], 2:input[2]}
</code></pre>
</blockquote>

<p>What you need to keep track of is the <em>current run length</em>, which can be from 0 (previous element not included) to 2 (both previous elements included, so must skip this one). The requirement to include the first element means that a special case is required at the start. So we get</p>

<pre><code>    best_by_run_length = [float('-inf'), input[0], float('-inf')]
    for elt in input[1:]:
        best_by_run_length = [
            # Run length 0: don't include elt, preceding run length is unconstrained
            max(best_by_run_length),
            # Run length 1: include elt, preceded by run length of 0
            elt + best_by_run_length[0],
            # Run length 2: include elt, preceded by run length of 1
            elt + best_by_run_length[1]
        ]
    return max(best_by_run_length)
</code></pre>

<hr>

<blockquote>
<pre><code>print(get_max_sum(8, [3, 2, 3, 2, 3, 5, 1, 3]))
print(get_max_sum(5, [10, 3, 5, 7, 3]))
print(get_max_sum(5, [10, 1, 5, 7, 3]))
print(get_max_sum(5, [1, 2, 3, 4, 5]))
</code></pre>
</blockquote>

<p>How do you know that the output is correct? Rather than print the result, it's much more useful to print the comparison of the result against the expected value. Or you could take the testing up a level by using <code>doctest</code> (<a href="https://docs.python.org/2/library/doctest.html" rel="nofollow noreferrer">Python 2</a>, <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">Python 3</a>).</p>
    </div>