<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Are you sure you need to do this?</h1>

<p>Be aware that determinants for any reasonable sized matrix are very expensive to calculate, so if you're actually doing something else (linear solve, eigen-solve etc) there is probably a better way without calculating the determinant. And there are many external libraries which will solve this stuff for you. </p>

<p>In a real code review, I would be asking why you are implementing this yourself.</p>

<h1>Getting an idea of the complexity</h1>

<p>The best known algorithms are approx O(n<sup>2.4</sup>), and the best actually implemented algorithms are O(n<sup>3</sup>) (as discussed in <a href="https://stackoverflow.com/questions/27003062/fastest-algorithm-for-computing-the-determinant-of-a-matrix">this SO question</a>). That would put a rank 50 matrix determinant about 4600x slower than a 3x3. So if you are going to need determinants of large matrices, make sure your method will permit that to calculate in an acceptable time frame.</p>

<p>This method, if I understand it correctly, calculates the determinants of n minor matrices each of rank n-1. And that happens recursively. So y(n)=n.y(n-1) -&gt; y(n)/y(n-1) = n. This is a method that will be O(n!)... at 50x50 it will take of order 10<sup>63</sup> times longer than the 3x3.</p>

<h1>Critique of the code itself</h1>

<p>Aside from the questions over the method, we can look at the code itself. </p>

<h2>Data structure</h2>

<p>An array of pointers to arrays of doubles has some issues in terms of performance; every access of a matrix element requires 2 dereferences; one to the array of pointers, and then from there to an array of doubles.</p>

<p>Although it looks the same, this is less efficient than a multidimensional C array like double[4][4] - being a fixed size makes it possible for the lookup to index directly into the correct member without the additional dereference step; element [2][3] is always the same fixed distance from the beginning, and the whole array can be allocated as a single contiguous block.</p>

<p>The equivalent thing with vectors would not be a vector of vectors (which again requires 2 dereferences) but a single vector of size n<sup>2</sup> which you index into via a function. That could be put together as a matrix class:</p>

<pre><code>class SquareMatrix
{
    vector&lt;double&gt; _elements;
    size_t _rank;
  public:
    SquareMatrix(size_t rank) : _rank(rank), _elements(rank*rank)
    { }
    double &amp; elem(size_t i, size_t j)
    {
       return *(_elements.begin() + i*_rank + j);
    }
};
</code></pre>

<p>Usage:</p>

<pre><code>SquareMatrix a(10);
a.elem(2,3) = 5;
std::cout &lt;&lt; a.elem(2,3);
</code></pre>

<p>The improvement from this sort of change should be quite significant, partly from the reduction in dereferencing, but most significantly because the CPU will be able to usually cache the right values - much of the time the next value is adjacent to the prior one. This kind of predictable memory usage is also friendly to branch prediction.</p>

<h2>Copying copying</h2>

<p>The code is creating a copy of each minor in order to calculate its determinant; so for each minor you copy (n-1)<sup>2</sup> doubles in. That small part itself could be improved by reusing the matrix; instead of copying columns b,c,d in, then copying a,c,d in, you could just replace the relevant values:</p>

<pre><code>a b c d    f g h      a c  d
e f g h -&gt; j k l then i k* l*
i j k l    n o p      m o* p*
m n o p 
</code></pre>

<p>See that the marked elements have not changed. So at the very least this part could change to only copy in 2n-1 elements rather than (n-1)<sup>2</sup>. At 50x50 that means 96% fewer copies. </p>

<h2>Small things</h2>

<p>I would prefer pre-increment (<code>++value</code>) over post-increment (<code>value++</code>) because it is always unambiguous and thus a preferable default even when either would work.</p>

<p>You can do <code>sign = -sign</code> instead of <code>sign = -1 * sign</code>; I don't know whether the compiler will optimise it away, but a negation is much faster than a multiplication.</p>

<h2>Memory management in C++ is not like in Fortran</h2>

<p>Your code leaks almost all the memory it allocates. For a 50x50 matrix it would leak 50 matrices of size 49x49, and recurse to 50 rank-49 determinants which each leak 49 matrices of size 48x48, which is something like O((n+1)!) leaking.</p>

<p><code>calloc</code> is a C thing; the C++ equivalent is to call <code>new</code>. Either way, if you <code>calloc</code> some memory you must call <code>free</code> on it to release it, and if you <code>new</code> something you must <code>delete</code> it.</p>

<p>Generally in modern C++ you avoid calling either, and instead rely on structures that manage the memory for you, like <code>vector&lt;double&gt;</code> - this will free the memory it allocates when the vector goes out of scope, which is probably what you're expecting if you're used to Fortran 95/2003.</p>

<p>If you still want to allocate memory via <code>new</code>, then you can use a smart pointer to ensure that the memory is freed when the array goes out of scope. In C++11 that would likely be a unique_ptr or a shared_ptr. Note that you couldn't just wrap your array of pointers in the smart pointer, or it would only free that array and not all the arrays those pointers point to. It would need to be an array of smart pointers, so that each deletes its array when the top level array deconstructor runs.</p>

<h1>Summary</h1>

<p>Whilst this is a good initial attempt, and not a bad coding exercise, this code will not achieve what you want to achieve. Fixing the leaks will be an educational exercise, but will not result in code that can handle the sizes of matrices that you state you need to cope with. In general anything that needs to cope with matrices of any significant size requires a different kind of method - generally matrix methods that can be done by hand do not scale well. </p>
    </div>