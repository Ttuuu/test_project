<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>2D array or not?</strong></p>

<p>A "2D array" in common parlance is loosely something like the following</p>

<pre><code>int a[4][5];
int **b;
int *c[x];
</code></pre>

<p>For me, I prefer the only calling <code>a</code> a 2D array.</p>

<p>Yet I would not call <code>int* mat</code> a 2D array.  It is  a pointer and code-wise, used as a pointer to a single dimension array of <code>int</code>.</p>

<pre><code>/*function to transpose a N*N 2D mat */      // ??
void TransposeOf2DArray(int* mat, size_t n)  // `int*` is a 1D
</code></pre>

<p>As code called the function with a cast implies <em>something</em><sup>1</sup> unnecessary is happening.  </p>

<pre><code>printMat((int*)mat, 3);
</code></pre>

<p>Consider</p>

<pre><code>printMat(&amp;mat[0][0], 3);
TransposeOf2DArray(&amp;mat[0][0], 3);
// or 
printMat(mat[0], 3);
TransposeOf2DArray(mat[0], 3);
</code></pre>

<p>And re-word <code>void TransposeOf2DArray()</code> description.</p>

<p><strong>White space before <code>'\n'</code></strong></p>

<p>Trailing white-space (not <code>'\n'</code>) at the end of the line, too often causes problems.  Consider avoiding that.</p>

<p><strong>Return value from print</strong></p>

<p>Not too often code checks the return value of print, primarily to detect errors.   Yet <code>printMat()</code> still could provide a useful return.</p>

<pre><code>int printMat(const int* mat, size_t n) {
  retval = 0;
  if (NULL) {
    size_t nn = n*n;
    size_t i = 0;
    for(i = 0 ; i &lt; nn; ++i) {
      const char *sep = ((1+i)%n) ? "| " : "\n";  // No WS before \n
      int r = printf("%d%s", mat[i], sep);
      if (r) {
        retval = r;
        // Perhaps break here
      }
    }
  }
  return retval;
}
</code></pre>

<hr>

<p><sup>1</sup> Casting often indicate something amiss.  Avoid it as able.  I do find casting reluctantly needed in some <code>printf()</code> and some assignments between different types, but rarely with specified function argument.</p>
    </div>