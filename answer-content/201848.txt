<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Scoping the <code>case</code> body is unnecessary.</p></li>
<li><p><code>gapStarted</code> flag is redundant (<code>sizeGap</code> has all the necessary information). Consider</p>

<pre><code>while (N &gt; 0) {
    int remainder{N%2};
    switch (remainder) {
        case 0:
            sizeGap++;
            break;
        case 1:
            if (sizeGap &gt; longestSizeGap) {
                longestSizeGap = sizeGap;
            }
            sizeGap = 0;
            break;
        }
    }
    N /= 2;
}
</code></pre></li>
<li><p>To address your immediate concerns, there is too few variables to worry about cache, pages, or memory hierarchy. Everything will stay in registers. I don't think you can do anything about branch prediction; however, read the next bullet.</p></li>
<li><p>A nice to know approach is <a href="https://stackoverflow.com/a/757266/3403834">de Bruijn hashing</a>:</p>

<ul>
<li>find the length of trailing gap using a technique described in the answer</li>
<li>remember the length</li>
<li>shift the number left by that length</li>
<li>find the number of trailing ones (e.g. negate and find the number of trailing zeroes), and shift them off</li>
<li>keep going until the number becomes 0.</li>
</ul>

<p>Such loop will do as many iterations as there are gaps, as opposed to the argument width in your code. Worst case is still the same. OTOH, notice that there is no branches at all.</p></li>
</ul>
    </div>