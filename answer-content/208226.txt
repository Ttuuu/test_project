<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things you can do to simplify your code:</p>

<ul>
<li>There's no need to keep track of the maximum positive integer if you remove the condition from the second <code>for</code> loop: <code>for (int i = 1; ; i++)</code>.</li>
<li>That means you don't need to check whether the hash already contains the given number: just add it right away.</li>
<li>If you don't mind a small performance hit you can use Linq's <code>ToHashSet</code> instead: <code>var set = array.ToHashSet();</code> (<strong>Edit:</strong> or <code>new HashSet&lt;int&gt;(array);</code> if you're not using .NET Framework 4.7.2).</li>
<li><strong>Edit:</strong> Alternately, if you expect a lot of negative values in your inputs, not adding those to the set can result in a fair speed improvement - I'm seeing a 30% improvement for inputs with 50% negative values.</li>
</ul>

<p>The first three changes don't really speed things up, and the last one is fairly input-specific. For a significant and more reliable performance improvement, replace the hash with an array of booleans:</p>

<pre><code>var presence = new bool[array.Length + 1];
foreach (var value in array)
{
    if (value &gt; 0 &amp;&amp; value &lt; presence.Length)
    {
        presence[value] = true;
    }
}

for (int i = 1; i &lt; presence.Length; i++)
{
    if (!presence[i])
    {
        return i;
    }
}
return presence.Length;
</code></pre>

<p>The maximum possible return value is <code>array.Length + 1</code>, so values larger than that can safely be ignored (just like negative values) because they won't affect the result. The input <code>[1, 2, 3]</code> produces <code>4</code>. Replacing any of these numbers with a larger one will create a gap: <code>[1, 99, 3]</code> produces <code>2</code>. Whether or not <code>99</code> is present is irrelevant: what matters is that <code>2</code> is not present.</p>

<p>For large inputs this is about twice as fast, for small inputs it can be more than 10x faster. Hash set lookups are fast, but there is some overhead involved, so they won't beat array lookups.</p>

<hr>

<p><strong>Edit:</strong> The proposed solution on their website is (re)using the input array as a lookup table. It's moving all positive numbers to the front and then marking the presence of numbers by making the value at that index negative - somewhat similar to the above approach. I guess the first step allows them to simplify the rest of the algorithm, but it does make things slower. That first step can be removed with careful swapping and negating, making it run faster, but it's still a bit slower as the array of boolean approach - and more difficult to understand.</p>
    </div>