<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First thoughts:</p>

<p>You have this whole thing as all static. That's fine for a small simple program like this, but it might be better practice for you to make most of the methods into instance methods, and then in <code>main()</code>, instantiate it and call a driver method on that class. Static things can get messy in java when the logic gets more complicated. So, I would pull out most of the stuff that you have in your main method and put it into an instance method.</p>

<pre><code>public static void main(String[] args) {
    Assignment2 assignment = new Assignment2();
    assignment.start();
}
</code></pre>

<p>Also, unless you're required to have your class named Assignment2, I would suggest changing it to something more descriptive (it should tell you what it <em>does</em> not what it <em>is</em>).</p>

<p>Might want to rename a few methods also. For example, <code>showMenu()</code> doesn't just show a menu, it also gets input from the user, so maybe rename that to something like <code>getSelection()</code> (or something).</p>

<p>Let's talk about your <code>add()</code> method.</p>

<pre><code>  do {
        num1 = random.nextInt(100);
        num1++;
        num2 = random.nextInt(100);
        num2++;

        do {
            validAnswer = true;

            System.out.println("Adding numbers...");
            System.out.printf("What is: %d + %d? Please enter answer below", num1,num2);
            result = num1 + num2;
            try {
                input = scanner.nextInt();
            } catch (Exception ex) {
                System.out.println("Sorry, Invalid entry for Addition...Please Retry!");
                scanner.next();
                validAnswer = false;
            }
        } while (!validAnswer);
</code></pre>

<p>Instead of assigning num1 and num2 on one line, and on the next, incrementing them, put that on one line. </p>

<pre><code>num1 = random.nextInt(100) + 1;
num2 = random.nextInt(100) + 1;
</code></pre>

<p>Also, some minor issues with spacing. Change <code>boolean correctAnswer=false;</code> to <code>boolean correctAnswer = false;</code></p>

<p>Also, it's bad practice to catch <code>Exception</code>. Catch and handle only the ones you expect to deal with -- If Java makes you surround something with a try catch, <em>only catch the ones you need to catch and are prepared to handle</em>. The way you're doing it, if something throws a null pointer exception, your program won't give you useful crash reporting. I <em>think</em> what you really want to catch is <code>InputMismatchException</code>. So, catch that or leave an explanation as to why you're swallowing all exceptions in a comment.</p>

<p>Your <code>add()</code> and <code>subtract()</code> methods are pretty much exactly the same. You should think about making them into one method that accepts an argument for which behaviour to exhibit.</p>

<p>You spend a lot of lines getting and validating input from the user. Think about writing a helper function to do that all in one place:</p>

<pre><code>private int getInt(String message, int low, int high) {
    int num;
    boolean invalid = true;

    do {
        System.out.printf("Please enter an integer between %d and %d: ");

        try {
            num = scanner.nextInt();

            if (num &gt;= low &amp;&amp; num &lt;= high) {
                invalid = false;
            }
        }
        catch (InputMismatchException x) {
            System.out.println("Invalid entry, please try again");
        }
    } while (invalid);
}
</code></pre>

<p>Something like that (if you need to use a do-while. Personally, I try to avoid them but it looks like you like them, and maybe it's part of your assignment).</p>

<p>Those are just a few things that I would suggest you think about. The main problems I see mostly relate to code duplication, so really think about ways to reduce that.</p>
    </div>