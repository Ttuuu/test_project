<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend that you <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">read PEP 8</a>.</p>

<ul>
<li>It's advised against doing <code>import os, re</code>. Instead have one line dedicated to each import.</li>
<li>You should have an empty line between importing third party libraries and standard library ones.</li>
<li>In Python it's standard to use <code>snake_case</code>.</li>
<li>You should only have one space either side of the equals sign when performing assignment.</li>
<li>Rather than doing <code>path is not ''</code> you should use the <code>!=</code> operator.</li>
<li><code>'\.py$'</code> is <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="noreferrer">deprecated in Python 3.6, and will become a syntax error in a future version of Python</a>. Instead use <code>r'\.py$'</code>.</li>
<li>Don't mix <code>'</code> and <code>"</code> string delimiters. Unless it's to do <code>"'"</code>.</li>
<li>You don't need to use a <code>\</code> for line breaking as your within brackets.</li>
<li>You should have the <code>+</code> in front of the next line, rather than the end of the previous line.</li>
</ul>

<hr>

<ul>
<li>Your variable names are crap. <code>path</code>, <code>name</code> <code>FILE</code>, <code>cFILE</code>, <code>PATH</code>. The reason you need your comments is because of this.</li>
<li>If you fix your variable names your comments are useless.</li>
<li>Don't make a list to then call <code>os.system</code> just call it straight away.</li>
<li>Use <code>pathlib</code>, it singlehandedly makes your code ridiculously simple.</li>
<li>Put your code in an <code>if __name__ == '__main__'</code> guard. You don't want to destroy things by accident.</li>
</ul>

<p><sub>untested:</sub></p>

<pre><code>"""(PYCX) PYthon to Cython to eXec, a unix command line util
Usage:
  pycx FILES... [-o DIR --show --delete --run]
  pycx --help

Options:
  FILES              one or more python files to compile
  -o --output=DIR    output directory
  -s --show          show output from exec compiling
  -d --delete        delete the c file after compiling exec
  -r --run           run the exec after compiling
  -h --help          show this screen.
"""
import os
from pathlib import Path

from docopt import docopt


INCLUDES = '/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/include/python3.7m'
LIBRARY = '/usr/local/Cellar/python/3.7.2_2/Frameworks/Python.framework/Versions/3.7/lib'
HIDEDATA = '&amp;&gt;/dev/null'


def main(args):
    for path in args['FILES']:
        path = Path(path)
        if path.suffix != '.py':
            print(__doc__)
            continue

        output = Path(args['--output'] or '') / path.stem
        c_file = path.parent / path.stem + '.c'

        os.system(f'cython --embed -o {c_file} {path}')
        os.system(
            f'gcc -v -Os -I {INCLUDES} -L {LIBRARY} {c_file} '
            f'-o {output} -lpython3.7 -lpthread -lm -lutil -ldl '
            + HIDEDATA if not args['--show'] else ''
        )

        if args['--delete']:
            os.system(
                f'find {path.parent} -name "{path.stem}.c" -type f'
                f'|xargs rm -f'
            )

        if args['--run']:
            os.system(f'{output}')


if __name__ == '__main__':
    main(docopt(__doc__))
</code></pre>
    </div>