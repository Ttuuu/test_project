<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't include <code>&lt;bits/stdc++.h&gt;</code> - it's not standard, and on platforms that provide it, it drags in far too much.</p>

<p>Don't <code>using namespace std</code> - this namespace is not designed for wholesale inclusion, and can produce subtle bugs when its names overload your own.</p>

<p>Don't use a floating-point number such as <code>1e7</code> when you want a simple integer <code>10'000'000</code>.</p>

<p>Don't compute <code>std::sqrt(x)</code> every time around the loop - save the value as an integer for faster comparisons.</p>

<p>Use unsigned types for unsigned arithmetic.  Given that inputs (and therefore factors) are no greater than 10⁷, we can get away with <code>std::uint_fast32_t</code> rather than <code>long long</code>.</p>

<p>Although the code claims to use a sieve, every input number is inefficiently tested for primality without reference to the sieve (multiple times, even).</p>

<p>Why use a <code>std::vector</code> rather than <code>std::array</code> for something whose size is constant and known at compile time?  Also, why write the size in two places (which need to be consistent) instead of simply using <code>Primes.size()</code>?  (Also, fix the off-by-one error where we overstep the end of the vector).</p>

<p>I recommend using C++ streams, rather than mixing C buffered I/O and forcing the two libraries to repeatedly flush each other.</p>

<p>Avoid global variables - <code>Primes</code> can be a local static member (perhaps with an immediately-executed lambda expression as initializer).</p>

<p>Why not always include <code>1</code> as the first result, rather than have to add that in the printing code?</p>

<hr>

<p>To dive in to one function in particular, let's pick on <code>least_prime_factor()</code>.  Apart from the misleading name, we're doing a lot more work than we need to here.  Every time around the loop, we're multiplying <code>i</code> by <code>j</code> (a good compiler will hoist the three <code>i*j</code> into a single computation, and reuse that), but we could simply be adding <code>i</code> each time.</p>

<p>A standard improvement to naive sieves is to observe that every multiple of a prime <em>p</em> that's less than <em>p</em>² also has smaller factor than <em>p</em>, so once we've marked <em>p</em>, we can jump straight to <em>p</em>² before striding by <em>p</em> thereafter.</p>

<p>Apart from the first pass (which marks even numbers), we can stride by 2 <em>p</em> each time (knowing that we've already marked even numbers).  We can take that further with a wheel of factors, but even this is reducing the work by a factor of two.</p>

<p>Let's see what we have now:</p>

<pre><code>// Create an array populated with the smallest prime factor of each
// number, or 0 for primes (and unity).
void least_prime_factor()
{
    Primes[1]=1;
    // First, mark all the even numbers; this allows us to halve the
    // work for all other primes.
    for (std::size_t i = 2;  i &lt; Primes.size();  i += 2) {
        Primes[i] = 2;
    }

    for (std::size_t i = 3;  i &lt; Primes.size();  ++i) {
        if (Primes[i]) { continue; }

        Primes[i] = i;
        for (std::size_t j = i * i;  j &lt; Primes.size();  j += 2 * i) {
            if (!Primes[j]) {
                Primes[j] = i;
            }
        }
    }
}
</code></pre>

<p>That's noticeably less work, and if we also replace <code>prime()</code> with a simple lookup in <code>Primes[]</code>, then we'll have a much more efficient program.</p>
    </div>