<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I understand you are a beginner and you had the guts to post your code. You deserve some feedback and I will try.</p>

<h1>Your code is hard to read</h1>

<p>This is most probably why you didn't get answers till now. There is code repetition, global and reused variables, no clear control flow, and bad variable names. It is really hard to find the core functionality.
So I start in no particular order.</p>

<h1>Bad names</h1>

<pre><code>dic = {}                                #dictionary for storing list elements
</code></pre>

<p>Well I can see this is a dict. Bad name, bad comment. Use names describing the meaning, not the type. Comments shoud describe the hidden, not so obvious parts, that could not be expressed by names. Your whole comment <code>#dictionary for storing list elements</code> can be split into  <code>#dictionary for storing ... elements</code> and <code>... lists ...</code>.
the first one is completely obvious, the other is just some type information again. No hints to the sort of content (should be in the name), no hints as to the key.
You could safely replace the whole line with <code>guesswhat={}</code>.</p>

<h1>Do not use globals or nonlocals for no reason</h1>

<pre><code>def for_high (list_e):                  #defining a function for taking list elements and putting them into dic
</code></pre>

<p>Uses <code>filename</code>, <code>res</code>, and <code>l</code>. While one could expect that on <code>res</code> and as it was declared at global scope, it is a complete no-go to use variables that look like temporaries in their scope. This renders your function absolutely untestable and your function will easily break if you alter the outer code. Pass required variables, so the reader/maintainer is aware they are used by the function.
Unlike what the comment suggests, your function currently only takes a list length. And unless <code>for_high</code> is a well known / defined term in your community, it is a bad name again.</p>

<h1>Do not repeat yourself (DNRY)</h1>

<p>Your function has some code:</p>

<pre><code>output = paralleldots.emotion(dic.get(x))
res.update({x: output})
with open(os.path.join("C:\\Users\\User\\Desktop\\trial", filename), 'w') as text_file:
    text_file.write(json.dumps(res))
</code></pre>

<p>which is duplicated outside (slightly modified)</p>

<pre><code>in_txt = paralleldots.emotion(l)
filename = os.path.splitext(os.path.basename(txt_file))[0] + '.txt'
with open(os.path.join("C:\\Users\\User\\Desktop\\trial", filename), 'w') as text_file:
    text_file.write(str(in_txt))
</code></pre>

<p>How can something be either <code>output</code> or <code>in_txt</code>? Of course a function has a return value or output or result. None of these make a good name. What is returned?
For one code snippet <code>filename</code> is explicitly set, for the other it magically pre-exists? So the function accesses a value from outside and the outer code overwrites the existing value with the very same value before using it.
This is pure horror. Also one of this file writes is done in a loop, the file is overwritten in each iteration. It shall either be written once or appended.
Create a function handling one element.</p>

<h1>Simplify control flow</h1>

<p>If both execution paths of an <code>if</code> clause nearly do the same, check whether you can simplify it. Your </p>

<pre><code>if list_e % 2 != 0:             #checking if list has an odd no. of elements
    list_e += 1
    for_high(list_e)

else:
    for_high(list_e)
</code></pre>

<p>can be simplified to (again add a useful comment):</p>

<pre><code>if list_e % 2 != 0:             # list length may not be odd because ...
    list_e += 1
for_high(list_e)
</code></pre>

<p>but: are you sure it is a good idea to increase a list-length variable while the list itself stays odd?</p>

<h1>Define numeric constants once</h1>

<p>you have</p>

<pre><code>no_keys = list_e / 20
dic = {1: l[1:21]}
start_key_value = 21
end_key_value = start_key_value + 20
start_key_value += 20
if list_e &gt; 20:                     #checking if list has more than 20 elements
</code></pre>

<p>I do not think these are independent constants. So define this constant once and use that name throughout the code (again change the comment to have some meaning)</p>

<pre><code>max_emoticon_len = 20
no_keys = list_e / max_emoticon_len
dic = {1: l[1:max_emoticon_len + 1]}
start_key_value = max_emoticon_len + 1
end_key_value = start_key_value + max_emoticon_len
start_key_value += max_emoticon_len
if list_e &gt; max_emoticon_len:       #checking if list has more than elements than desired to fit for ...
</code></pre>

<h1>Other</h1>

<p>Also <code>list_e</code> is a bad name. <code>e</code> mostly is used as name/pre-/postfix for elements <code>for e in l:</code>. for no. of elements the term <code>length</code> as in <code>len()</code> is used. stick to those conventions to avoid irritation.</p>

<p>Also <code>dic = {1: l[1:21]}</code> - are you sure you want to skip the first element? In Python, indexing starts at 0.</p>

<p>Also is it desired, that when having a list of length 40, the first sequence has length 20, and the last one has length 19?</p>

<p>Also <code>dic = {1: l[1:21]}</code> hides the outer dic which therefor is never used and may be deleted</p>

<p>Also <code>dic = {1: l[1:21]}</code> - why do you set this explicitly? Why not inside the loop?</p>

<p>Also <code>dic.update({i: 'some'})</code> may be done by <code>dic[i] = 'some'</code>. The same goes for res.</p>

<p>Also you handle lists with less than 20 elements in your main code. However, if the list is bigger than 20 elements, you do batches of 20 and drop the last ones. Desired?</p>
    </div>