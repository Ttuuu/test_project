<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For this isolated piece of code, this is the way to go. Generally, in ORMs that support LINQ, navigation properties (like <code>ur.Roles</code>) should be used wherever possible. Using<code>join</code> should be reserved for custom joins where no navigation properties exist.</p>

<p>Reasons:  </p>

<ol>
<li><p>Joins are far more verbose than navigation properties, making code harder to read and causing repetitive code.</p></li>
<li><p>Joins are error-prone. It's easy to match the wrong fields. A navigation property, once configured correctly, will always generate a correct SQL join.</p></li>
<li><p>Navigation properties, if well-named, are more expressive. In a <code>join</code> the cardinality of a relationship isn't always obvious. In navigation properties it is. You know what you're looking at when reading <code>Role</code> vs <code>Roles</code>. Unfortunately, sometimes people tend to be sloppy in this area and they just use the generated class and property names as an ORM generated them, which may result in any mixture of plural class names, plural reference property names, and singular collection property names.</p></li>
</ol>

<p>One exception to this rule is when you want to overrule the ORM's SQL generation. Entity Framework will generate an <code>OUTER JOIN</code> for non-required navigation properties (i.e. where the "1"-side is optional, 0..1-n, 0..1-1). There may be cases where <code>INNER JOIN</code> performs better and the results with <code>null</code> navigation properties aren't interesting anyway. In those cases, using a manual <code>join</code>, overriding a navigation property, could be considered.</p>

<p>Side note: as said in a comment, it's recommended to use disposable objects, like a <code>DbContext</code>, in a <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement" rel="nofollow noreferrer"><code>using</code> statement</a>.</p>
    </div>