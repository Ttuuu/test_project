<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, in order to make this even remotely readable, let's convert it to a function and save intermediate results (especially the reused ones) to variables:</p>

<pre><code>def split_join6(table):
    cols = max(map(len, table))
    justified = ''.join([col.ljust(cols) for col in table])
    y = ''.join(justified[i::cols] for i in range(cols))
    return y.replace(' ','')
</code></pre>

<p>Now, what you seem to want is similar to the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>roundrobin</code> recipe from <code>itertools</code></a>:</p>

<blockquote>
<pre><code>from itertools import cycle, islice

def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    num_active = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while num_active:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            # Remove the iterator we just exhausted from the cycle.
            num_active -= 1
            nexts = cycle(islice(nexts, num_active))
</code></pre>
</blockquote>

<pre><code>x = ['fb','oa','or']
print("".join(roundrobin(*x))
# foobar
</code></pre>

<p>Note that making things into one-liners can only get you so far. It does sometimes help you to learn some new concepts in a language, but quite often it makes your code unreadable. In Python you should keep your lines to 80 or 120 characters (as per Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>). Anything that does not fit into that is probably too complicated to understand again, even a month later.</p>

<p>That being said, here is a shorter one-liner, albeit with one needed import:</p>

<pre><code>from itertools import zip_longest

f = lambda x: "".join(map(lambda t: "".join(filter(None, t)), zip_longest(*x)))

f(['fb','oa','or'])
# 'foobar'
</code></pre>

<p>The <code>zip_longest</code> and <code>filter(None, ...)</code> are only needed in case not all parts are the same length. Otherwise (which is at least true for <code>"foobar"</code>) it would just be:</p>

<pre><code>f = lambda x: "".join(map("".join, zip(*x)))
</code></pre>

<p>Both use the well-known trick of doing <code>zip(*iterable)</code> to transpose an iterable of iterables.</p>
    </div>