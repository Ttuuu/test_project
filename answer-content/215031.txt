<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Most severe issue:</p>

<ul>
<li><p>Never invent secret macro languages! This is about the single-worst thing a C programmer can ever do, all categories. </p>

<p>You are perfectly free to assume that any C programmer will understand what <code>1&lt;&lt;bit</code> means. You cannot assume that they will understand what <code>BFLAGS_WORD_MASK</code> means. It's nothing but obfuscation of what would otherwise have been clear code.</p>

<p>Therefore I would strongly recommend you to drop this whole idea. Many before you have tried this exact thing and it has always ended badly.</p></li>
</ul>

<p>Big picture issues:</p>

<ul>
<li><p><code>0x00000001L</code> creates a signed integer constant of type <code>long</code>. You should never use signed type for bitwise operations. Change this to <code>0x00000001UL</code>.</p>

<p>The danger is that signed types may invoke undefined behavior bugs when sign bits are accidentally set. And there's almost never a reason to use bitwise operators on signed types.</p>

<p>In addition, it is dangerous to type out all zeroes of hex constants, because they actually don't have any significance and don't make the number 32 bits as expected. You can get real nasty bugs this way. For example, lets say we have a 16 bit system and type this:</p>

<pre><code>#define BLIP 0x00007FFF  // this is type signed int 16 bit
#define BLOP 0x00008000  // this is type unsigned int 16 bit
#define BLUP 0x00010000  // this is type long 32 bit
</code></pre>

<p>You can get extremely subtle bugs this way. Been there, very hard to track down. Suffix all such hex constants with <code>UL</code>.</p></li>
<li><p>For the same reason, enums should never be used for bitwise operations, because an enumeration constant is <em>always</em> <code>int</code> and the compiler cannot change the type without violating the C standard. Therefore you should not use enum for this.</p>

<p>And you should not store <code>long</code> or <code>unsigned long</code> constants in an enum, because they will get converted to <code>int</code> which is wrong and bad.</p></li>
</ul>

<p>The above means your whole code must be rewritten from scratch.</p>

<p>Other problems:</p>

<ul>
<li><p>Avoid bit-shifting <code>1</code> since it is of type <code>int</code> and can give the same problems as mentioned above. Use <code>1u</code> instead.</p></li>
<li><p>Don't declare functions in C as <code>static char* bflags_or()</code> but use <code>static char* bflags_or (void)</code>. The empty parenthesis <code>()</code> means "accept any type", which is not what you want. This style has been flagged as obsolete in the C standard and can be removed at any point.</p></li>
<li><p>There is no reason to use non-standard <code>int UNUSED(argc)</code>. Instead write this:</p>

<pre><code>int main (int argc, char** argv)
{
  (void)argc;
  (void)argv;
</code></pre>

<p>This is 100% portable and standard, achieving the same thing as non-standard UNUSED.</p></li>
<li><p>Don't use non-standard <code>#pragma once</code>, use classic header guards <code>#ifndef SOMETHING_H #define SOMETHING_H ... #endif</code>. 100% portable and standard. Avoid pragmas in general.</p></li>
</ul>

<p>Style remarks:</p>

<ul>
<li>It is good practice to always use compound statements <code>{}</code> after <code>if</code> and loops, regardless of how many lines that the body contains. This reduces the amount of indention and maintenance related bugs. And as a bonus you don't have to use <code>do-while(0)</code> macro tricks any longer, if you don't allow selection/loop statements without <code>{}</code>.</li>
</ul>
    </div>