<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>I.</code> This chunk of code:</p>

<pre><code>a = []
n = int(input("Enter number of elements of list: "))
for i in range(0,n):
    b = int(input("Enter element: "))
    a.append(b)
</code></pre>

<p>is mostly C-like (or Pascal-like etc). You can replace it with more Pythonic:</p>

<p><code>a = input('Enter elements splitted by ":" ').split(' ')</code></p>

<p><code>II.</code> Here:</p>

<p><code>print (sub().f1(a))</code></p>

<p>You are creating a <code>sub</code> instance within the <code>print</code> function. It is a bad idea because it will disappear after print. You should create it before you print something (and, yes, classes names in Python are in CamelCase):</p>

<pre><code>waka = Sub()
print(waka.f1(a))
</code></pre>

<p><code>III.</code> I prefer to create <code>__init__()</code> function each time I create a class. It is not really necessary but in most cases, it is the first one is creating in the new class:</p>

<pre><code>class Sub(object):
    def __init__(self):
        pass
</code></pre>

<p><code>IV.</code> If it is your homework you should do with recursion, the code is pretty OK. In another case, I recommend you to use Python <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a> module (you should avoid recursion as much as possible):</p>

<pre><code>    def f2(self, current, s1):  
        return [
            e
            for e in itertools.chain.from_iterable([
                [sorted(l) for l in itertools.combinations(s1, length)]
                for length in range(1, len(s1))
            ])
        ]
</code></pre>

<p>So here is the result code for recursion version:</p>

<pre><code>class Sub(object):
    def __init__(self):
        pass

    def f1(self, s1):  
        return self.f2([], sorted(s1))  

    def f2(self, current, s1):  
        if s1:  
            return self.f2(current, s1[1:]) + self.f2(current + [s1[0]], s1[1:])  
        return [current]

a = input('Enter elements splitted by " ": ').split(' ')
waka = Sub()
print(waka.f1(a))
</code></pre>
    </div>