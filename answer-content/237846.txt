<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>High level comment: you have chosen your list to own its data (as you allocate/free the data behind list elements inside this code) but without compile-time checking of the type of the data being fed to it.</p>

<p>Now this is actually fine if the user code is very careful with the data pointers and size inputs.
But that is an assumption that you might not <em>want</em> to make.
Furthermore, constant allocation/deallocation is somewhat wasteful, and copying the underlying data around on every input/output operation isn't something I'd expect to be necessary most of the time.
In short, it looks like a generic Java list, minus type checking.</p>

<p>C isn't the best language for this sort of thing, but there are better ways even in pure C.
First, consider if your use-case could do with a list which doesn't actually contain anything other than the concept of things which are in a certain order. Instead of copying your data into the list elements, make a mapping between your data owned by some other object (typically an array) and the list elements. This is trivial if your list has a sane bound on the maximum number of elements, not so much otherwise. If your list isn't used to pass things around between different parts of the code (i.e. your list type doesn't show up in high level interfaces), then I would recommend going with this "light" variant. Incidentally, this is how lists are usually implemented in baremetal code because it means you can get rid of dynamic allocation.</p>

<p>Second point, the use of void* as a pointer to something with non-zero size is obviously not very safe.
If your list doesn't cross library boundaries, you can write function-like preprocessor macros with type names as argument to generate the exact function variants you need for every data type which you'll use your list with.
It's ugly and no code analysis tool on earth with like it, but this way you can get type checking (and not have to ask for the size of the data when allocating).</p>

<p>Finally, some small scale comments:</p>

<ul>
<li>At the very least add some text explaining how to use your code in the documentation block at the top of the header file. Better also put in there the things that the user has to pay attention to in order to not have the whole thing break horribly (i.e. your assumptions about your input).</li>
<li>If you use malloc then memset then it is always preferable to go straight for calloc. Actually, better always use calloc unless there's a demonstrable performance issue with it.</li>
<li>Use const whenever you can, except when it's meaningless such as the exterior type of a function parameter in a function declaration. Users will thank you. Yourself will thank you because const prevents you from writing nonsense.</li>
<li>Don't declare variables until you can give them a meaningful value (and ideally almost always their <em>final</em> value, see the const thing above). All that</li>
</ul>

<pre><code>GenListNode* node = NULL;
</code></pre>

<p>is achieving is to placate the compiler, without actually protecting you against using node before it is set to a good value. In cases such as these it's actually better to leave it uninitialized as then the compiler will figure out cases such as:</p>

<pre><code>int i;
if(somebool) { i = 0; } else { i = 1; }
</code></pre>

<p>without complaining.</p>

<ul>
<li>In the same spirit, don't re-use allocated variables for different purposes. Allocate your for loop counters inside the for loop initialization statement (actually, minimize the scope of your variables in general).</li>
<li>Don't omit braces after control flow statements. It's just too easy to make a mistake when refactoring code such as</li>
</ul>

<pre><code>if (list-&gt;count)
    list-&gt;count--;
</code></pre>

<ul>
<li>The standard type to use when a value is semantically the size of an object in bytes is <code>size_t</code>. It is effectively an unsigned int in most cases.</li>
</ul>
    </div>