<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's my updated code. Some things I've changed/added:</p>

<ul>
<li><p>Moved String building out of BattleAction logic and into a dedicated MessageBuilder class.</p></li>
<li><p>BattleActions now have instance variables (which are passed to the constructor) to hold things like the target and amount of damage to avoid them having to be passed in (as parameters) when the action in executed. They are now more of a self contained unit ready to be executed by the user, or even without a user if necessary (say in the case of poisoning, or some kind of area buff/debuff).</p></li>
<li><p>Seperated "%s hit for %d damage" from "%s health is now.." because although the latter inevitably follows the former, they are still separate statements. I plan on eventually having the Combatant's health values displayed and updated on their own dedicated part of the screen, with no associated messages.</p></li>
</ul>

<hr>

<pre><code>package packs.rpg;

public interface BattleAction {

    void execute();

    String getResult(); 
}



class AttackAction implements BattleAction {

    Combatant target;
    public int damage;
    String result;

    AttackAction(Combatant target, int damage, String result) {
        this.target = target;
        this.damage = damage;
        this.result = result;
    }

    public void execute() {
        target.decreaseHealth(damage);
    }

    public String getResult() {
        return result;
    }

}

class NoAction implements BattleAction {

    String result;

    NoAction(String result) {
        this.result = result;
    }

    public void execute(){
   }

    public String getResult() {
        return result;
    }
}
</code></pre>

<hr>

<pre><code>package packs.rpg;
import java.util.*;

public class Battle {   
    int input;  
    private Combatant player;
    private Combatant enemy;
    private BattleAction playerAction;

    public Battle(Combatant thePlayer, Combatant theEnemy) {
        player = thePlayer;
        enemy = theEnemy;
        fight();
    }


    private void fight(){
        while(player.getHealth() &gt; 0 &amp;&amp; enemy.getHealth() &gt; 0) {
            playerAction = BattleHelper.getBattleAction(player,enemy);  //poll for input to get choice of action
            player.takeTurn(playerAction, enemy);                       //pass the enemy encase decision was to attack
            BattleHelper.displayTurnResult(playerAction, enemy);
        }           
    }

}
</code></pre>

<hr>

<pre><code>package packs.rpg;
import java.util.*;

class BattleHelper {
    static Random rng = new Random();
    static Scanner in = new Scanner(System.in);


    public static BattleAction getBattleAction(Combatant user, Combatant target) {
        System.out.printf(MessageBuilder.inputPrompt(user.getName()));
        int action;
        do{
            action = in.nextInt();
        }
        while(action != 1 &amp;&amp; action != 2);

        if(action == 1){
            int damage = getRng(user.getStrength())+1;
            return new AttackAction(target, damage, MessageBuilder.attackAction(user.getName(), damage));
        }
        else{
            return new NoAction(MessageBuilder.noAction(user.getName()));
        }
    }

    public static void displayTurnResult(BattleAction action, Combatant target) {
        System.out.printf("%s",action.getResult());
        System.out.printf("%s health is now %d\n\n",target.getName(), target.getHealth());
    }




    public static int getRng(int range) {
        return rng.nextInt(range);
    }
}
</code></pre>

<hr>

<pre><code>package packs.rpg;

public class MessageBuilder {

    public static String inputPrompt(String userName) {
        return (userName + "'s turn\nSelect an action\n1. Attack | 2. Do Nothing");
    }

    public static String attackAction(String userName, int damage) {
        return (userName + " hits for " + damage + "\n");
    }

    public static String noAction(String userName) {
        return (userName + " is loafing around...");
    }
}
</code></pre>
    </div>