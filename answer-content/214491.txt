<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>You follow <a href="https://www.python.org/dev/peps/pep-0008" rel="nofollow noreferrer">PEP 8</a> pretty well. Just two minor things: the <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="nofollow noreferrer">maximum line length</a> should be 79 for characters, and 72 for docstrings. In <em>game.py</em>, for example, you have a line of 241 characters! Another thing is <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">imports</a>: </p>

<blockquote>
  <p>Imports should be grouped in the following order:  </p>
  
  <ol>
  <li>Standard library imports.</li>
  <li>Related third party imports.</li>
  <li>Local application/library specific imports.  </li>
  </ol>
  
  <p>You should put a blank line between each group of imports.  </p>
</blockquote>

<p>So, instead of this:</p>

<blockquote>
<pre><code>import sys
from game import GamesEngine
from reports import (GameReport, ManyGamesReport)
</code></pre>
</blockquote>

<p>you should have:</p>

<pre><code>import sys

from game import GamesEngine
from reports import GameReport, ManyGamesReport
</code></pre>

<p>Note that I removed redundant parenthesis.</p></li>
<li><p>In <em>tic_tac_toe.py</em> you have a hardcoded value <code>100</code> that defines the maximum number of games that will be printed. While it is clear what it does from the docstring, I advise you to make it an input parameter of the <code>prepare_reports</code> function.</p></li>
<li><p>In the same function you create and fill the <code>report_requests</code> list with one-two objects: <code>ManyGamesReport()</code> and/or <code>GameReport()</code>. And I see a problem here. The thing is that lists in Python are used only for homogeneous data. If you have heterogeneous data in a list then it means you are doing something wrong - you should rethink your design, think of other data structure, or simply use tuples, depending on the case. In fact, all this structure with reports seems too complicated for such a simple programming task. If I were you I would completely redesign the program. </p></li>
<li><p>When creating a board:</p>

<blockquote>
<pre><code>self.board = [[' ' for i in range(3)] for j in range(3)]
</code></pre>
</blockquote>

<p>you don't need <code>i</code> and <code>j</code>. For throwaway variables you should use <a href="https://stackoverflow.com/questions/5893163/what-is-the-purpose-of-the-single-underscore-variable-in-python">underscore</a> <code>_</code>:</p>

<pre><code>self.board = [[' ' for _ in range(3)] for _ in range(3)]
</code></pre></li>
<li><p>Why are <code>GameOutcome</code> and <code>GameState</code> separate classes? For me this didn't make any sense... Also, in <code>GameEngine</code> you have:</p>

<blockquote>
<pre><code>self.game_result_as_string = self.find_game_outcome.find_winner_or_tie(self.state_of_game, self.row_index_for_move, self.column_index_for_move)
</code></pre>
</blockquote>

<p>This just doesn't seem right. All this separation of logic to different classes is very confusing for me.</p></li>
<li><p>Function <code>play_games</code> is redundant. It just calls a <code>play_many_games</code> method of the <code>games_engine</code> object. You should take that call outside into <code>main</code> function.</p></li>
<li><p><code>play_many_games</code> has the following lines:</p>

<blockquote>
<pre><code>while num_games_to_play &gt; 0:
    self.play_one_game()
    num_games_to_play -= 1
</code></pre>
</blockquote>

<p>This is not Pythonic. Use <code>for _ in range(num_games_to_play)</code> instead.</p></li>
<li><p>In <code>GamesEngine</code> you create empty <code>GameState</code> but then you rewrite it by empty
<code>GameState</code> in <code>play_one_game</code>. This seems useless. Consider rewriting that part.</p></li>
<li><p><code>square_for_next_move_as_list_of_list</code> is a very long name for a variable! Usually, we don't write a type or structure details of a variable in its name. So, at least, remove the <code>as_list_of_list</code> part.</p></li>
<li><p>In <code>make_move</code> you generate a move and then delete it from a list of available moves. But how about using <code>random.sample(self.state_of_game.available_squares, 9)</code>
and just iterate over obtained random values? The code should look cleaner, and the performance shouldn't be a problem in this case.</p></li>
<li><p>The following function:</p>

<blockquote>
<pre><code>def update_who_moves_next(self):
    temp = self.state_of_game.next_move
    self.state_of_game.next_move = self.state_of_game.previous_move
    self.state_of_game.previous_move = temp
</code></pre>
</blockquote>

<p>can be rewritten as <code>a, b = b, a</code>. This is a standard Python solution for swapping variables values.</p></li>
</ol>

<hr>

<p>Just for fun I fun I wrote the same program but using functional approach. Feel free to compare. The square field here can have a variable size. You can also specify a number of players and a number of consequent cells to win.</p>

<pre><code>import collections
import itertools
import random
from typing import (Counter,
                    Iterator,
                    List,
                    Tuple)


FieldType = List[List[str]]


def run_games(count: int,
              *,
              printable_games_count: int = 5,
              players: Tuple[str, ...] = ('X', 'O'),
              cells_in_line: int = 3,
              cells_to_win: int = 3) -&gt; None:
    """Plays and prints results of Tic-Tac-Toe games"""
    wins_counter = collections.Counter()
    for _ in range(count):
        field, winner = game_result(size=cells_in_line,
                                    players=players,
                                    cells_to_win=cells_to_win)
        wins_counter[winner] += 1
        if count &lt;= printable_games_count:
            print_game_result(field, winner)
    print_final_stats(players, wins_counter, count)


def game_result(*,
                size: int,
                players: Tuple[str, ...],
                cells_to_win: int) -&gt; Tuple[FieldType, str]:
    """
    Plays a Tic-Tac-Toe game of specified size
    and returns final field with a winner
    """
    field = [[' ' for _ in range(size)]
             for _ in range(size)]
    symbols = itertools.cycle(players)
    possible_indices = list(itertools.product(range(size), repeat=2))
    indices = random.sample(possible_indices, size ** 2)
    for (row, col), symbol in zip(indices, symbols):
        field[row][col] = symbol
        for line in corresponding_lines(field, row=row, col=col):
            if win_condition(line, symbol=symbol, cells_to_win=cells_to_win):
                return field, symbol
    return field, 'Tie'


def corresponding_lines(field: FieldType,
                        *,
                        row: int,
                        col: int) -&gt; Iterator[List[str]]:
    """
    Yields row, column and diagonals (if applicable)
    for the input indices
    """
    yield field[row]
    yield [field[index][col] for index in range(len(field))]
    if row == col:
        yield [field[index][index] for index in range(len(field))]
    if row + col + 1 == len(field):
        yield [field[index][-index - 1] for index in range(len(field))]


def win_condition(line: List[str],
                  *,
                  symbol: str,
                  cells_to_win: int) -&gt; bool:
    """Checks if a line has enough same symbols for a victory"""
    return sum(element == symbol for element in line) == cells_to_win


def print_game_result(field: FieldType, winner: str) -&gt; None:
    """Prints field and a winner"""
    print(*prettify(field), sep='\n')
    winner_string = f'{winner} won' if winner != 'Tie' else 'Tie'
    print(winner_string, end='\n' * 2)


def prettify(field: FieldType) -&gt; Iterator[str]:
    """Yields rows of the field for pretty printing"""
    yield from map('|'.join, field)


def print_final_stats(players: Tuple[str, ...],
                      counter: Counter,
                      count: int) -&gt; None:
    """Prints proportions of victories for each player"""
    for player in players:
        print(f'Proportion of {player} wins: {counter[player] / count}')
    print(f'Proportion of ties: {counter["Tie"] / count}')


if __name__ == '__main__':
    run_games(3,
              printable_games_count=4,
              players=('a', 'b', 'c'),
              cells_in_line=5,
              cells_to_win=5)
</code></pre>

<p>Output: </p>

<pre class="lang-none prettyprint-override"><code>c|c|c|c|c
b|b|b|a|b
b|b|b|c|c
b|a|a| |a
a|a|a|a|c
c won

a|b|c|b|c
a|b|c|c|a
b|a|b|c|a
b|c|b|b|a
a|a|a|c|c
Tie

b|a| |a| 
b|a|c|b| 
c|a|c| |c
 |a|a|c|b
c|a| |b|b
a won

Proportion of a wins: 0.3333333333333333
Proportion of b wins: 0.0
Proportion of c wins: 0.3333333333333333
Proportion of ties: 0.3333333333333333
</code></pre>
    </div>