<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before dealing with your question, I'd like to point out that you probably want to use <code>empty()</code> instead of comparing with an empty string and that if you really want to compare to an empty string, use the <code>===</code> operator.</p>

<p>Anyway, default initialization <em>is</em> a real problem in many languages. C# even has a <a href="http://msdn.microsoft.com/en-US/library/ms173224(v=vs.80)" rel="noreferrer">?? operator</a> to solve this kind of issue! So, let's try to make it better to make your code better step by step.</p>

<h2>Ternary operator no more</h2>

<p>The one-liner is too long, and using the ternary operator on multiple lines is a bad idea: that's what if-statement are for:</p>

<pre><code>if (empty($newsItems[0]['image_url'])) {
    $newsItems[0]['image_url'] = '/img/cat_placeholder.jpg';
}
</code></pre>

<p>This is more readable for two reasons : it's easier to understand the syntax, but more importantly, it's easier to see that you simply want a default value when there's nothing. We don't need the 'else' part which is confusing with the ternary operator.</p>

<p>Note: as mentioned by Simon Scarfe and corrected by mseancole, PHP also has some special ternary syntax to do this:</p>

<pre><code>$newsItems[0]['image_url'] = $newsItems[0]['image_url'] ?: 'img/cat_placeholder.jpg';
</code></pre>

<h2>Factorize it!</h2>

<p>If you're doing this only once or twice, then all is good, but otherwise you'd want to factorize it into a function, since you don't repeat yourself, right? The simple way is:</p>

<pre><code>function default_value($var, $default) {
    return empty($var) ? $default : $var;
}

$newsItems[0]['image_url'] = default_value($newsItems[0]['image_url'], '/img/cat_placeholder.jpg');
</code></pre>

<p>(The ternary operator does make sense here since variable names are short and both branches of the condition are useful.)</p>

<p>However, we're looking up <code>$newsItems[0]['image_url']</code> when calling <code>default_value</code>, and this is possibly not defined, and will raise an error/warning. If that's a concern (it should), stick to the first version, or look at <a href="https://codereview.stackexchange.com/a/75849">this other answer</a> that gives a more robust solution at the expense of storing PHP code as a a string and thus cannot be checked syntactically.</p>

<h2>Still too long</h2>

<p>If we don't care about the warning/error, can we do better? Yes we can! We're writing the variable name twice, but <a href="http://www.php.net/manual/en/language.references.pass.php" rel="noreferrer">passing by reference</a> can help us here:</p>

<pre><code>function default_value(&amp;$var, $default) {
    if (empty($var)) {
        $var = $default;
    }
}

default_value($newsItems[0]['image_url'], '/img/cat_placeholder.jpg');
</code></pre>

<p>It's much shorter, and feels more declarative: you can look at a bunch of <code>default_value</code> calls and see what the default values are instantly. But we still have the same warning/error issue.</p>
    </div>