<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regarding testing:  Yes, it's <a href="https://golang.org/pkg/testing/" rel="nofollow noreferrer">in the standard library</a>.  There are of course more libraries to help out more, but that's where you should likely start your journey.</p>

<hr>

<p>For error reporting, well, it's a bit inconsistent at the moment?  There's both returning a value (<code>[NOT CONTENT]...</code>) as well as <code>fmt.Println</code> <em>and</em> <code>panic</code> too, all of which are not very appropriate for production usage.</p>

<p>The first of which can lead to <em>serious</em> debugging nightmares:  How do you know the file didn't contain that exact string for one?  This is always a problem if the valid values are mixed with error values (like how in most C APIs there are <code>int</code> return values with <code>-1</code> for errors, while everything <span class="math-container">\$&gt;= 0\$</span> are the "actual" return values in the non-error case)!  It's much better to keep them separate, which in Go could be done with separate types, or separate return values (which is what's done for errors).</p>

<p>The second one is perhaps less bad, but again, the error situation is just hidden, not actually dealt with.</p>

<p>The third one can be done, however it's usually reserved for programming errors, since not catching a <code>panic</code> call will simply abort the program (which is rarely what you want).</p>

<p>If in doubt, return an <code>error</code> in addition to any values: <code>func getContent(string) (string, error)</code> and <code>writeContent/appendContent(string, string) error</code> would be fine.  Maybe also <a href="https://blog.golang.org/error-handling-and-go" rel="nofollow noreferrer">see this blog post</a> and <a href="https://blog.golang.org/go1.13-errors" rel="nofollow noreferrer">this newer one</a> for 1.13.</p>

<hr>

<p>The <code>defer</code> to close files is pretty much required in my opinion.  Unless you can prove that nothing else between the opening of the file and the <code>Close</code> call can raise a <code>panic</code>, you pretty much <em>have</em> to use <code>defer ...Close()</code>, otherwise you risk leaking resources (open file handles).</p>

<p>For the comments, please <a href="https://blog.golang.org/godoc-documenting-go-code" rel="nofollow noreferrer">have a look here</a>:  Instead of comments simply add proper docstrings to the functions, that is good practice anyway and would certainly be appreciated by colleagues on bigger projects.</p>

<p>Maybe as a last note:  The permissions <code>0777</code> and <code>0600</code> are okay if those are the ones you want.  However, that might not be true in general.  Exactly how <code>ioutil.WriteFile</code> lets you specify them would be likely what you want in general.  If not, consider creating constants so that you don't have magic numbers inline with the code (e.g. <code>const defaultFilePermissions = 0777</code> or something similar).</p>
    </div>