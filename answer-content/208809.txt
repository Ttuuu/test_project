<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some minor changes to improve use and protect misuse.</p>

<p>The <code>take</code> function only takes from the start. It would be more flexible if you pass the generator, not the generator function. That way you can take from a generator where you left off.</p>

<pre><code>function *take(n, values) {    
    while (n-- &gt; 0) { yield values.next().value }
}
</code></pre>

<p>and then used as</p>

<pre><code>take(10, progression()); //to take the first 10
</code></pre>

<p>Or</p>

<pre><code>const values = progression();
take(10, values); // take ten
take(10, values); // take ten more
</code></pre>

<p>There is a danger someone might use the infinite generator to fill an array</p>

<pre><code>const array = [...progression()]; // uncatchable page crash
</code></pre>

<p>Which is an uncatchable error that will crash the page.</p>

<p>You could create an interface that protects the infinity by hiding the <code>progression</code> in closure. You can also then add some extras if need be.</p>

<pre><code>const progression = (()=&gt;{
    function *progression() {
        var n = 0;
        while (true) { yield n++ }
    }
    var current = progression();
    return {
        restart() { current = progression() },
        *take(count) {
            current = progression();
            while (count-- &gt; 0) { yield current.next().value }
        },
        *more(count) {
            while (count-- &gt; 0) { yield current.next().value }
        },
        get next() { return current.next().value }
    };
})();
</code></pre>

<p>And used as </p>

<pre><code>progression.take(10); /// get first ten
progression.take(10); /// get first ten again
progression.more(10); /// get ten more
const v = progression.next;  // get next value (21st)
progression.restart();
const first = progression.next;  // get next value (1st)
</code></pre>
    </div>