<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Docstrings</h1>

<p>You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>docstring</code></a> at the beginning of every method, class, and module you write. This will allow any documentation to identify what your code is supposed to do. Pulling from <a href="https://www.geeksforgeeks.org/python-docstrings/" rel="nofollow noreferrer">GeeksforGeeks</a>, this is what a docstring should be:</p>

<ul>
<li><p>What should a docstring look like?</p>

<ul>
<li>The doc string line should begin with a capital letter and end with a period.</li>
<li>The first line should be a short description.</li>
<li>If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description.</li>
<li>The following lines should be one or more paragraphs describing the objectâ€™s calling conventions, its side effects, etc.</li>
</ul></li>
</ul>

<h1>ClassNamingShouldBePascalCase</h1>

<p>Class names should normally use the CapWords convention. The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable. Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the CapWords convention used only for exception names and builtin constants. <a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">[source]</a></p>

<p>In your case, you have a class named <code>connect4</code>. This does not conform to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> standards. It should instead be <code>ConnectFour</code>.</p>

<h1>Variable Naming</h1>

<p>You variable names should be descriptive and thoughtful enough for you to understand what that variable is holding. In your test file, you use <code>b</code> as the variable to hold your <code>connect4</code> object. If you end up writing a larger program from this, how will you remember <code>b</code> is the game? What if you decide to use <code>c</code>, <code>d</code>, <code>e</code>, etc? Then you end up with variable names spanning the entire alphabet. This is become confusing very fast. Changing <code>b</code> to <code>game</code> makes it very clear that that's the game object.</p>

<h1>Accessor Method Naming</h1>

<p>Having accessor and mutator (getters and setters) methods aren't really common in <code>python</code>, at least not as much as in <code>java</code> or <code>c#</code>. When dealing with accessor methods, the name should be <code>get_...()</code>. This makes it clear that you're getting the thing from the object you're calling it on. For example, <code>get_board()</code> as opposed to <code>return_board()</code>. Not convinced? Consider this:</p>

<pre><code>...
if b.get_board() is not None:
    do_stuff()
...
</code></pre>

<pre><code>...
if b.return_board() is not None:
    do_stuff()
...
</code></pre>

<p>In this context, which is what you're using, it seems like <code>return_board</code> is returning a boolean, <code>True</code> or <code>False</code>, if the board was "returned successfully". <code>get_board</code> makes it clear that you're getting a board.</p>

<h1>Unnecessary accessor methods</h1>

<p>On the subject of <code>get_board()</code>, the whole method is unnecessary. In fact, all of the <code>get_...()</code> are unnecessary, but some of them are there so the code isn't all messy. Which I can appreciate. However, the <code>get_board()</code> is not needed. Just do <code>game.board</code> instead of <code>game.get_board()</code>. </p>

<h1><code>enumerate</code> vs <code>range(len())</code></h1>

<p>Many <code>python</code> beginners, whether they be coming from other languages like <code>C</code>, or brand new to programming, inevitably go through a phase where they try to do the same thing.</p>

<p>This results in things like this:</p>

<pre><code>for i in range(len(sequence)):
    print(sequence[i])
</code></pre>

<p>This is never the right answer.  In python we have the power and ability to loop directly over the items in a sequence.</p>

<p>We can instead do this:</p>

<pre><code>for item in sequence:
    print(item)
</code></pre>

<p>It is simpler to type; simpler to read; and most importantly makes more sense.  As we were never concerned with the index to begin with, we don't need to bother with it.</p>

<p>There are however cases in which one does want the index as well as the item.  In such cases enumerate is the tool of choice.</p>

<p>Our loop becomes:</p>

<pre><code>for i, item in enumerate(sequence):
    print("{} : {}".format(i,item)
</code></pre>

<p>In short, if you ever catch yourself writing <code>range(len(...))</code> rethink your goal and figure out what it really is you are interested in. You can apply this principle to your code. </p>

<h1><code>is not</code> vs <code>!=</code></h1>

<p><a href="https://stackoverflow.com/a/2209781/8968906">This StackOverflow answer</a> explains this amazingly:</p>

<p><code>==</code> is an <strong>equality test</strong>. It checks whether the right hand side and the left hand side are equal objects (according to their <code>__eq__</code> or <code>__cmp__</code> methods.)</p>

<p><code>is</code> is an <strong>identity test</strong>. It checks whether the right hand side and the left hand side are the very same object. No methodcalls are done, objects can't influence the <code>is</code> operation.</p>

<p>You use <code>is</code> (and <code>is not</code>) for singletons, like <code>None</code>, where you don't care about objects that might want to pretend to be <code>None</code> or where you want to protect against objects breaking when being compared against <code>None</code>.</p>

<h1><code>_</code> for unused loop variables</h1>

<p><code>_</code> has 4 main conventional uses in Python:</p>

<ol>
<li>To hold the result of the last executed expression(/statement) in an interactive
interpreter session. This precedent was set by the standard CPython
interpreter, and other interpreters have followed suit</li>
<li>For translation lookup in i18n (see the
<a href="https://docs.python.org/3/library/gettext.html#localizing-your-module" rel="nofollow noreferrer">gettext</a>
documentation for example), as in code like:
<code>raise forms.ValidationError(_("Please enter a correct username"))</code></li>
<li>As a general purpose "throwaway" variable name to indicate that part
of a function result is being deliberately ignored (Conceptually, it is being discarded.), as in code like:
<code>label, has_label, _ = text.partition(':')</code>.</li>
<li>As part of a function definition (using either <code>def</code> or <code>lambda</code>), where
the signature is fixed (e.g. by a callback or parent class API), but
this particular function implementation doesn't need all of the
parameters, as in code like: <code>callback = lambda _: True</code></li>
</ol>

<p>(For a long time this answer only listed the first three use cases, but the fourth case came up often enough, as noted <a href="https://stackoverflow.com/questions/5893163/what-is-the-purpose-of-the-single-underscore-variable-in-python/5893946?noredirect=1#comment100906549_5893946">here</a>, to be worth listing explicitly)</p>

<p>The latter "throwaway variable or parameter name" uses cases can conflict with the translation lookup use case, so it is necessary to avoid using <code>_</code> as a throwaway variable in any code block that also uses it for i18n translation (many folks prefer a double-underscore, <code>__</code>, as their throwaway variable for exactly this reason).</p>

<h1>Use <code>i</code> / <code>j</code> for double loops</h1>

<p>This one is my opinion / possibly a common practice. When using two nested <code>for</code> loops, I like to use <code>i</code> and <code>j</code> as the outer and inner loop variables, respectively. <code>i</code> and <code>j</code> have typically been used as subscripts in quite a bit of math for quite some time (e.g., even in papers that predate higher-level languages, you frequently see things like "Xi,j", especially in things like a summation). Most people seem to have seen little reason to change that.</p>

<h1>Multiple anonymous array checks</h1>

<p>You have this code:</p>

<pre><code>...
for i in range(self.height):  # check rows
    for x in range(self.width - 3):
        if self.get_row(i)[x:x + 4] in [['0', '0','0', '0'], ['1', '1', '1', '1']]:
            return self.board[i][x]
for i in range(self.width):  # check columns
    for x in range(self.height - 3):
        if self.get_column(i)[x:x + 4] in [['0', '0', '0', '0'], ['1', '1', '1', '1']]:
            return self.board[x][i]
for i in self.get_diagonals():
    for x in range(len(i)):
        if i[x:x + 4] in [['0', '0', '0', '0'], ['1', '1', '1', '1']]:
            return i[x]
...
</code></pre>

<p>You create the anonymous array <code>[['0', '0', '0', '0'], ['1', '1', '1', '1']]</code> three times! Instead of this repetition, you should assign this array to a variable, and check against that variable. The updated code reflects these changes.</p>

<h1><code>''</code> =&gt; <code>' '</code> formatting</h1>

<p>You have a couple of formatting problems when outputting the board to the console. When there's a column a couple stacks high in the middle of the board, it does this:</p>

<pre><code>['', '', '', '', '', '', '']
['', '', '', '', '', '', '']
['', '', '', '', '', '', '']
['', '1', '', '', '', '', '']
['0', '1', '', '', '', '', '']
['0', '1', '0', '', '', '', '']
</code></pre>

<p>Even after just one input, it gets shifted:</p>

<pre><code>['', '', '', '', '', '', '']
['', '', '', '', '', '', '']
['', '', '', '', '', '', '']
['', '', '', '', '', '', '']
['', '', '', '', '', '', '']
['0', '', '', '', '', '', '']
</code></pre>

<p>You should allocate this space in the beginning. In <code>__init__</code>, <code>self.board</code> should look like this:</p>

<pre><code>self.board = [[' ' for x in range(width)] for i in range(height)]
</code></pre>

<p>and <code>make_move(self, team, col)</code> should now look like this:</p>

<pre><code>def make_move(self, team, col):
    """
    Simulates a move and puts a 0/1 in the specified column
    """
    if ' ' not in self.get_column(col):
        return self.board
    i = self.height - 1
    while self.board[i][col] != ' ':
        i -= 1
    self.board[i][col] = team
    return self.board
</code></pre>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring
A description of your program/class goes here
"""

class ConnectFour:
    """
    Class for creating a connect four game
    """
    def __init__(self, height=6, width=7):
        self.height = height
        self.width = width
        self.board = [[' ' for x in range(width)] for i in range(height)]

    def get_column(self, index):
        """
        Returns a column at the specified index

        :param index: Index at which column will be returned
        """
        return [i[index] for i in self.board]

    def get_row(self, index):
        """
        Returns a row at the specified index

        :param index: Index at which row will be returned
        """
        return self.board[index]

    def get_diagonals(self):
        """
        Returns all the diagonals in the game
        """

        diagonals = []

        for i in range(self.height + self.width - 1):
            diagonals.append([])
            for j in range(max(i - self.height + 1, 0), min(i + 1, self.height)):
                diagonals[i].append(self.board[self.height - i + j - 1][j])

        for i in range(self.height + self.width - 1):
            diagonals.append([])
            for j in range(max(i - self.height + 1, 0), min(i + 1, self.height)):
                diagonals[i].append(self.board[i - j][j])

        return diagonals

    def make_move(self, team, col):
        """
        Simulates a move and puts a 0/1 in the specified column
        """
        if ' ' not in self.get_column(col):
            return self.board
        i = self.height - 1
        while self.board[i][col] != ' ':
            i -= 1
        self.board[i][col] = team
        return self.board

    def check_win(self):
        """
        Checks self.board if either user has four in a row
        """

        four_in_a_row = [['0', '0', '0', '0'], ['1', '1', '1', '1']]

        #Check rows
        for i in range(self.height):
            for j in range(self.width - 3):
                if self.get_row(i)[j:j + 4] in four_in_a_row:
                    return self.board[i][j]

        #Check columns
        for i in range(self.width):
            for j in range(self.height - 3):
                if self.get_column(i)[j:j + 4] in four_in_a_row:
                    return self.board[j][i]

        #Check diagonals
        for i in self.get_diagonals():
            for j, _ in enumerate(i):
                if i[j:j + 4] in four_in_a_row:
                    return i[j]

        return None

def start_game():
    """
    Starts a game of ConnectFour
    """
    game = ConnectFour()

    while True:

        for i in game.board:
            print(i)
        if game.check_win() is not None:
            break

        col = int(input('Team 0 choose column: ')) - 1
        game.make_move('0', col)

        for i in game.board:
            print(i)
        if game.check_win() is not None:
            break

        col = int(input('Team 1 choose column: ')) - 1
        game.make_move('1', col)

    print('Thank you for playing')

if __name__ == '__main__':
    start_game()
</code></pre>
    </div>