<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The deeper you go the more exceptions you'll find when it comes to the number representation. It is for a reason that the text is just lowercase, but it doesn't specify if you can find e.g. floating points.</p>

<p>Here is a more advanced example which tries to be a bit more practical for real world situations and minimizes the code. Note also the use of constants (<code>static final</code> class fields in Java).</p>

<p>Also note the explanation of the regular expression in the comments. For hard-to-read regular expressions I would very much add this in my own code as well, and explain <strong>what</strong> it tries to do at the very least. Otherwise the next programmers will have a hell of a time figuring it out themselves.</p>

<p>Code without integer literals should generally be preferred over code with integer literals most of the time. Let the computer do the counting.</p>

<pre><code>private static final String[] NUMBER_NAMES = new String[] { "zero", "one", "two", "three", "four", "five", "six",
        "seven", "eight", "nine", "ten" };

// A digit which is not preceded or followed by another word character,
// using negative lookbehind &amp; lookahead).
// Word characters (`\\w`) include digits.
// Comma's and dots are also excluded. 10 is a special case.
private static final Pattern NUMBER_PATTERN = Pattern.compile("(?&lt;!(\\w|[.,]))(\\d|10)(?!(\\w|[.,]))");

public static String replaceNumbersWithNumberNames(String test) {
    StringBuilder lineWithNumberNames = new StringBuilder();
    Matcher numberMatcher = NUMBER_PATTERN.matcher(test);
    while (numberMatcher.find()) {
        String numberName = NUMBER_NAMES[Integer.parseInt(numberMatcher.group())];
        numberMatcher.appendReplacement(lineWithNumberNames, numberName);
    }
    numberMatcher.appendTail(lineWithNumberNames);
    return lineWithNumberNames.toString();
}

public static void main(String[] args) {
    // digit at start, end, within a word, a 10 and 100, handled correctly!
    String test = "4 (nor 10 or 100 nor 0.5, even if you're XS4ALL) shalt thou not count,"
            + " neither shalt thou count 2, excepting that thou then proceedeth to 3";
    System.out.println(replaceNumbersWithNumberNames(test));
}
</code></pre>

<p>This will print:</p>

<pre><code>four (nor ten or 100 nor 0.5, even if you're XS4ALL) shalt thou not count, \
neither shalt thou count two, excepting that thou then proceedeth to three
</code></pre>

<p>Apologies for the Pythons for the addition between parentheses.</p>
    </div>