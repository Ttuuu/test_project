<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally speaking whenever we are about to write unit tests we should follow the <strong>F.I.R.S.T.</strong> principles. It is an acronym, which stand for:</p>

<ul>
<li><strong>Fast</strong>: The execution time should be measured in milliseconds. If it takes a second or two then it can be considered as slow and should be revised.</li>
<li><strong>Isolated</strong>: Each test is self-contained and does not rely on any other data. They can be run in any order.</li>
<li><strong>Repeatable</strong>: The test runs must be repeated over and over again. In each and every run they should either pass every time or always fail.</li>
<li><strong>Self-validating</strong>: There is no need for human interpretation whether or not the test succeeded or failed. The test result should be self-explanatory.</li>
<li><strong>Timely</strong>: The code and related tests should be written in almost the same time. A new code without relevant unit tests should not be deployed.</li>
</ul>

<p>Let's examine these ideas for your proposals:</p>

<h3>Single database and cleanup</h3>

<ul>
<li>Fast: If for whatever reason a previous cleanup phase missed / failed then your database will have some trash data in it, which might impact the performance of your database operations. Executing the cleanup during setup and teardown might solve the problem, but it will definitely have performance impact.</li>
<li>Isolated: They are sharing the same database, so they are not truly isolated. It might be the case that they can't run in parallel, because ordering might matter.</li>
<li>Repeatable: Because they are using the same database, that's why order might affect the result of your assertions. In case of MSTest you can define ordering but if you need to use them that means your tests are not really isolated.</li>
<li>Self-validating: Because there is a chance for race condition your test results are non-deterministic, which means human-intervention is needed to interpret several resultsets, reproduce the issues (if it is even possible) and fix them. </li>
<li>Timely: It is irrelevant in our discussion </li>
</ul>

<h3>Separate database for each test case</h3>

<ul>
<li>Fast: Creating new in-memory database for each test should not impose performance penalty onto tests if there not too many tables and constraints.</li>
<li>Isolated: Separate databases are used for each test, means no shared resource is being used, which helps isolation.</li>
<li>Repeatable: Because each and every time you run your test against a brand new database, there won't be any trash data, which could cause race condition.</li>
<li>Self-validating: By being deterministic, no human intervention is needed to understand the test results.</li>
<li>Timely: It is irrelevant in our discussion</li>
</ul>

<hr>

<p>If you don't want to examine the test data manually, then you don't really need use the test name in the database name. You can use any random value:</p>

<pre><code>int jitter = idGenerator.Next();
var condigBuilder = DbContextOptionsBuilder&lt;TestContext&gt;()
    .UseInMemoryDatabase(databaseName: $"TestDb{jitter}") 
    .Options;
</code></pre>

<p>or</p>

<pre><code>Guid jitter = Guid.NewGuid();
var condigBuilder = DbContextOptionsBuilder&lt;TestContext&gt;()
    .UseInMemoryDatabase(databaseName: $"TestDb{jitter}") 
    .Options;
</code></pre>
    </div>