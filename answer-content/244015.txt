<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>I have no idea what is happening inside the code or how it works.</p>
<p>@Code Gorilla has suggested comments. I would suggest writing self documenting code. Better type/method/variable names would be nice. Obtuse things should definitely be explained.</p>
<h2>Code Review</h2>
<p>Typedef's are old school.</p>
<pre><code>    typedef TimeEvent&lt;T&gt; TTimeEventType;
    typedef std::vector&lt;TTimeEventType&gt; TTimeEventContainerType;
</code></pre>
<p>The modern equivalent is a using statement.</p>
<pre><code>    using TTimeEventType          = TimeEvent&lt;T&gt;;
    using TTimeEventContainerType = std::vector&lt;TTimeEventType&gt;;
</code></pre>
<hr>
<p>Haveing zero (<code>0</code>) as the default value of a pointer is untidy.</p>
<pre><code>    CTimeEventDecorator(const TTimeEventContainerType&amp; TimeEventContainer, T* pValue = 0)
</code></pre>
<p>Use the modern <code>nullptr</code>.</p>
<pre><code>    CTimeEventDecorator(const TTimeEventContainerType&amp; TimeEventContainer, T* pValue = nullptr)
</code></pre>
<hr>
<p>Pointers are dangerous. Why are we allowing a dangerous item into your class. I would wrap that in a class to protect against accidental usage.</p>
<hr>
<p>Well that look particularly dangerious.</p>
<pre><code>        , pData((T*)((unsigned char*)ted.pData - (DWORD)pFirstInstance + (DWORD)pInstance))
</code></pre>
<p>I know I don't like comments. But this absolutely needs some explaining. I have no idea what is happening here.</p>
<p>Also you are using <code>C</code> cast <code>(T*)</code>. Please work out what the C++ equivalent is and use that. Probably <code>reinterpret_cast&lt;T*&gt;</code>. That will at least let automated tools find and warn people that you are trying to crash the program.</p>
<hr>
<p>Don't use pointers if you don't need to:</p>
<pre><code>    virtual CBaseDecorator* __Clone(CParticleInstance* pFirstInstance, CParticleInstance* pInstance)
    {
        return new CTimeEventDecorator(*this, pFirstInstance, pInstance);
    }
</code></pre>
<p>You could simply return an object here. The code would work just as well.</p>
<pre><code>    virtual CBaseDecorator __Clone(CParticleInstance* pFirstInstance, CParticleInstance* pInstance)
    {
        return CTimeEventDecorator(*this, pFirstInstance, pInstance);
    }
</code></pre>
<p>Now with no dynamic allocation.</p>
<p>OK. If you must use dynamic allocation (I can't tell because you don't show the base class so I can't see if this is inherited. Then at least return a smart pointer so that we can correctly control the lifespan of the object without worrying to much:</p>
<pre><code>    virtual std::unique_ptr&lt;CBaseDecorator&gt; __Clone(CParticleInstance* pFirstInstance, CParticleInstance* pInstance)
    {
        return std::make_unique&lt;CTimeEventDecorator&gt;(*this, pFirstInstance, pInstance);
    }
</code></pre>
<hr>
<p>In modern C++ you should probably add <code>overrides</code> if this overrides a virtual function in the base class.</p>
<p>If your base class does not have virtual functions then you should probably have a virtual destructor for this class (or your base class).</p>
<hr>
<p>I am going to say what are you trying to pull!!!!</p>
<pre><code>            while (it_next != it_end &amp;&amp; it_next-&gt;m_fTime &lt;= d.fTime)
                ++it_cur, ++it_next;

                // Your using the comma operator to get multile actions
                // actions into a single statement. Even if that was a
                // a good idea (and its not) I would still tell you to
                // add braces around the sub block to make it clear.

                // But this is truly horrible.
                // A lot of developer's will not even know what you did there.
</code></pre>
<p>Be clear concise and write like the next maintainer owns an axe and knows where you live.</p>
<pre><code>            while (it_next != it_end &amp;&amp; it_next-&gt;m_fTime &lt;= d.fTime)
            {
                ++it_cur;
                ++it_next;
            }
</code></pre>
<p>It will not be any less effecient spread over two lines.</p>
<hr>
<p>This might have been a place to add your own types to the class:</p>
<pre><code>    typename TTimeEventContainerType::const_iterator it_start;
    typename TTimeEventContainerType::const_iterator it_end;
    typename TTimeEventContainerType::const_iterator it_cur;
    typename TTimeEventContainerType::const_iterator it_next;
</code></pre>
<p>I would have written:</p>
<pre><code>    using const_iterator = TTimeEventContainerType::const_iterator;
    
    const_iterator   it_start;
    ...
</code></pre>
<hr>
<p>I hope that is not an owned pointer.</p>
<pre><code>    T* pData;
</code></pre>
<p>Otherwise your compiler generated copy and assignment operators are not going to work as expected. Which is another reason to wrap pointers. To make their use clear. As a maintainer I now have to go and find out if you are accidentally leaking pointers.</p>
<pre><code>    using NowOwnedRawPointer = T*;
    NowOwnedRawPointer  pData;
</code></pre>
    </div>