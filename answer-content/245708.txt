<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The thing is that the merge function is never called in your case, because all you are doing is reordering an existing map, so IMO you don't really need to worry about it.</p>
<p>Personally in such cases I just use <code>(m, n) -&gt; m</code>, because it's short and doesn't distract.</p>
<p>Another variant would be to use a function that throws an exception when called. The JDK <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/stream/Collectors.java#l132" rel="nofollow noreferrer">does this itself</a> when you use the <code>toMap</code> overload that doesn't take a merge function:</p>
<pre><code>private static &lt;T&gt; BinaryOperator&lt;T&gt; throwingMerger() {
  return (u,v) -&gt; { throw new IllegalStateException(String.format("Duplicate key %s", u)); };
}
</code></pre>
<p>Another thing you may want to consider it not to use a <code>(Linked)HashMap</code> at all here, but simply collect the <code>Entry</code>s into a list. If you need to lookup an entry by key later, then just keep the original map around.</p>
<hr>
<p>EDIT: In cases where the merge function is used, your implemention is fine. You may want to just put it in a variable, so that its name can describe its function.</p>
<p>One thing you could consider is using a function that creates a new list instead of "reusing" one of the existing lists. That would reflect the functional style of the code better, where one normally uses immutable data structures.</p>
<p>The basic problem is that Java's <code>List</code> interface isn't intended for functional/immutable situations and doesn't have a simple method to concatinate two lists.</p>
<p>If you are open to additional libraries you'd have more options. For example, Apache's Commons has a <a href="https://commons.apache.org/proper/commons-collections/apidocs/org/apache/commons/collections4/ListUtils.html#union-java.util.List-java.util.List-" rel="nofollow noreferrer"><code>union</code> method</a>.</p>
    </div>