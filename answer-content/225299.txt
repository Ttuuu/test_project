<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<p>You should avoid hardcoded strings. Take advantage of <code>nameof</code>. Also, <em>expression-bodied members</em> (arrow notation) makes code cleaner to read.</p>

<pre><code>public string Name
{
    get =&gt; GetFieldValue&lt;string&gt;(nameof(Name));
    set =&gt; SetFieldValue(nameof(Name), value);
}
</code></pre>

<p><code>EntitySubset&lt;T&gt;</code>'s method <code>GetFieldValue</code> makes sure a clean (but technical) error message is thrown whenever an asked field is not available. </p>

<blockquote>
<pre><code>public override U GetFieldValue&lt;U&gt;(string fieldName)
{
    if (!Fields.ContainsKey(fieldName))
    {
        throw new Exception($"{typeof(T).Name} must contain {fieldName} as a key!");
    }
    return base.GetFieldValue&lt;U&gt;(fieldName);
}
</code></pre>
</blockquote>

<p>However, don't fallback to this method to perform business rules checks. The business layer should check that mandatory fields are filled in, before mapping the entities to the data layer.</p>

<p>You should also optimize <code>ContainsKey</code> and <code>base.GetFieldValue</code>. You don't want to perform 2 lookups here. Implement something like a <code>TryGetFieldValue</code>.</p>
    </div>