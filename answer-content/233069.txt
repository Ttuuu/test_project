<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, it's wrong to write a Bash shebang at the start of <code>.profile</code>, for two reasons:</p>

<ol>
<li>It's not an executable script, but intended to be sourced from other shell environments</li>
<li><code>.profile</code> is sourced by the user's shell, which need not be Bash.</li>
</ol>

<p>The bashisms should be rewritten if possible; those that can't (such as <code>complete -r</code>) should be migrated to <code>.bash_profile</code>.</p>

<hr>

<p>These look a little odd:</p>

<blockquote>
<pre><code>    chmod -R a-x,a=rX,u+w "$war"/"$dmp"/
    echo "chmod -R 000 "$war"/"$dmp"/" | at now + 1 hours
</code></pre>
</blockquote>

<p>In the first, there's no need to leave double-quoted string for the <code>/</code> characters.  In the second, we definitely don't want argument splitting within the variables.  I'd rewrite those two lines as:</p>

<pre><code>    chmod -R a-x,a=rX,u+w "$war/$dmp/"
    echo "chmod -R 000 $war/$dmp/" | at now + 1 hours
</code></pre>

<hr>

<blockquote>
<pre><code>curl -sS https://getcomposer.org/installer -o composer-setup.php
php composer-setup.php --install-dir=/usr/local/bin --filename=composer
</code></pre>
</blockquote>

<p>Firstly, we don't check that <code>curl</code> succeeded before depending on its results.  Consider <code>set -e</code> for that.</p>

<p>Secondly, and more critically, there's no verification that what we downloaded is safe to execute.  I'd expect at least a simple SHA checksum before executing that PHP program.</p>

<hr>

<blockquote>
<pre><code>read -p "Have you created db credentials already?" yn
case $yn in
    [Yy]* ) break;;
    [Nn]* ) exit;;
    * ) echo "Please create db credentials and then comeback;";;
esac
</code></pre>
</blockquote>

<p>Firstly, a simple spelling mistake - "come back" has lost its space.
Secondly, it seems wrong to exit with no message when <code>n</code> is entered, but to assume <code>n</code> when an invalid reply is given.</p>

<p>I'd expect something like:</p>

<pre><code>read -p "Have you created db credentials already? [y/N] " yn
case "$yn" in
    [Yy]* ) true ;;
    [Nn]* ) echo &gt;&amp;2 "Please create db credentials and repeat this command;"; exit ;;
    * ) echo &gt;&amp;2 "Please respond with Y or N."; exit 1 ;;
esac
</code></pre>

<hr>

<p>Have you got the prompts right here?</p>

<blockquote>
<pre><code>function read_and_verify  {
    read -p "$1:" tmp1
    read -p "$2:" tmp2
    if [ "$tmp1" != "$tmp2" ]; then
        echo "Values unmatched. Please try again."; return 2
    else
        read "$1" &lt;&lt;&lt; "$tmp1"
    fi
}

read_and_verify domain "Please enter the domain of your web application twice" 
read_and_verify dbrootp "Please enter the app DB root password twice" 
read_and_verify dbuserp "Please enter the app DB user password twice"
</code></pre>
</blockquote>

<p>The first read, where the user is prompted with the variable name is unexpected; that's not in the user's world model, and the second prompt then asks for the same thing (in different words) "twice":</p>

<pre class="lang-none prettyprint-override"><code>domain:foo
Please enter the domain of your web application twice:foo
</code></pre>

<p>I think the prompt should be formed from <code>$2</code> each time:</p>

<pre><code>read_and_verify()  {
    read -p "Please enter $2: " tmp1
    read -p "Please enter $2 again to confirm: " tmp2
    if [ "$tmp1" != "$tmp2" ]; then
        echo &gt;&amp;2 "Values unmatched. Please try again."; return 2
    fi

    declare "$1=$tmp1"
}

read_and_verify domain "the domain of your web application" 
read_and_verify dbrootp "the app DB root password" 
read_and_verify dbuserp "the app DB user password"
</code></pre>

<pre class="lang-none prettyprint-override"><code>Please enter the domain of your web application: foo
Please enter the domain of your web application again to confirm: foo
</code></pre>

<p>All that said, requiring user to re-type (or to copy-paste) these values is annoying, and no more effective than re-printing them and asking for confirmation:</p>

<pre><code>read_and_verify()  {
    read -p "Please enter $2: " "$1"
    read -p "Please confirm $2: ${!1} [y/N] " yn
    case "$yn" in
        [Yy]*) true ;;
        *) echo &gt;&amp;2 "Cancelled." return 2
    esac
}
</code></pre>

<pre class="lang-none prettyprint-override"><code>Please enter the domain of your web application: foo
Please confirm the domain of your web application: foo [y/N] y
</code></pre>

<p>In fact, I might shuffle things around, to gather all the inputs, and present a single summary for confirmation:</p>

<pre><code>ask_yn() {
    while read -p "$* [y/n] " -n1
    do
       case "$REPLY" in
            ?) echo ;;&amp;
            [Yy]) return 0 ;;
            [Nn]) return 1 ;;
       esac
    done
}

until
    read -p 'Please enter the domain of your web application: ' domain
    read -p 'Please enter the app DB root password: ' dbrootp
    read -p 'Please enter the app DB user password: ' dbuserp
    printf '%s: "%s"\n' \
           'Application domain' "$domain" \
           'Database root password' "$dbrootp" \
           'Database user password' "$dbuserp"
    ask_yn 'Are these details correct?'
do
    true
done
</code></pre>

<p>There's one case where there's value in asking for the same input twice, and that's when the user is <em>setting</em> an unseen value (such as when using the <code>passwd</code> program).  The reasoning there is that a mistake can't be detected or easily corrected after the fact (because you're locked out of your account until/unless you can re-create the same typo).</p>

<p>Here, we're just <em>storing</em> values, and if we find the values are wrong, we can easily fix them up.  (In fact, we could even test the passwords work before accepting the settings, by making a simple connection to the database).</p>
    </div>