<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Ways to improve:</strong></p>

<ul>
<li><p>simplifying <em>list</em> construction:</p>

<p><code>*list(x if x != '0' else ' ' for x in board))</code> --&gt; <code>*[x if x != '0' else ' ' for x in board]</code></p></li>
<li><p><code>check_diagonal</code> function. The function performs a logical check if the passed <em>row</em> is fully selected/marked with the same mark/code and returns <em>boolean</em> result respectively.<br>Therefore, it's better to give it a more meaningful and unified name, say <strong><code>row_crossed</code></strong> (reflecting boolean purpose):</p>

<pre><code>def row_crossed(row):
    return '0' not in row and len(set(row)) == 1
</code></pre>

<p>Besides, renaming it will serve beneficially for the next improvements (see below)</p></li>
<li><p>2 consecutive conditions:</p>

<pre><code>if check_diagonal(a.diagonal()):
    return True

# check rl diagonal
if check_diagonal(np.fliplr(a).diagonal()):
    return True
</code></pre>

<p>return the same <em>boolean</em> result. That's a sign for <em>Consolidate conditional expression</em> technique.<br>Thus, the flow becomes:</p>

<pre><code># check lr diagonal
if row_crossed(a.diagonal()) or row_crossed(np.fliplr(a).diagonal()):
    return True
</code></pre></li>
<li><p>the <code>for</code> loop (in <code>check_for_win</code> function) which iterates through pair of  matrices (initial and transposed one) duplicates the same logical check </p>

<pre><code> ...
 if '0' not in row and len(set(row)) == 1:
</code></pre>

<p>as <strong><code>row_crossed</code></strong> (formerly <code>check_diagonal</code>) function does. Thus, replacing duplicated condition with function call.<br>Eventually, the restructured <code>check_for_win</code> function would look as below:</p>

<pre><code>def check_for_win(board):
    def row_crossed(row):
        return '0' not in row and len(set(row)) == 1

    a = np.array(board).reshape(3, 3)

    # check lr diagonal
    if row_crossed(a.diagonal()) or row_crossed(np.fliplr(a).diagonal()):
        return True

    # check rows &amp; cols
    for matr in (a, a.transpose()):
        for row in matr:
            if row_crossed(row):
                return True

    return False
</code></pre></li>
</ul>

<p>Actually, the above <em>Consolidation of conditionals</em> can be even more <em>encompassing</em> with applying <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html#numpy.concatenate" rel="nofollow noreferrer"><code>np.concatenate</code></a> and builtin <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> functions, though may seem less readable but quite viable for those who likes concise/compact code:</p>

<pre><code>def check_for_win(board):
    def row_crossed(row):
        return '0' not in row and len(set(row)) == 1

    a = np.array(board).reshape(3, 3)

    if row_crossed(a.diagonal()) \
            or row_crossed(np.fliplr(a).diagonal()) \
            or any(row_crossed(row) for row in np.concatenate([a, a.transpose()])):
        return True

    return False
</code></pre>

<hr>

<p>Minor "refinements":</p>

<ul>
<li><code>for matr in (a, a.transpose())</code> looks a bit more "connected" than <code>for matr in (a, np.transpose(a)):</code></li>
<li><p>optionally, to reduce typing misses of <code>codes = ('c1', 'c2', 'c3', 'b1', 'b2', 'b3', 'a1', 'a2', 'a3')</code> - a good alternative is:</p>

<pre><code>codes = tuple(map(''.join, itertools.product('cba', '123')))
</code></pre></li>
</ul>
    </div>