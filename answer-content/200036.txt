<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of things that may help you improve your code.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Fix the bug</h2>

<p>The code as posted has this line:</p>

<pre><code>cout &lt;&lt; a &lt;&lt; " " &lt;&lt; c &lt;&lt; " " &lt;&lt; " is " &lt;&lt; r &lt;&lt; endl;
</code></pre>

<p>From the context, what was probably actually intended was more like this:</p>

<pre><code>cout &lt;&lt; a &lt;&lt; " " &lt;&lt; c &lt;&lt; " " &lt;&lt; b &lt;&lt; " is " &lt;&lt; r &lt;&lt; endl;
</code></pre>

<h2>Use a <code>switch</code> where appropriate</h2>

<p>The function does an operation based on the operation passed in.  That's an ideal case for a <code>switch</code> statement.  In addition to the clarity this brings to the human reader, it can also provide optimization possibilities for the compiler.</p>

<h2>Use a boolean flag</h2>

<p>The code needs to treat an invalid operator differently from a valid one.  This suggests the use of a boolean flag.  I'd write <code>bool valid{true};</code> and then set it to false if an invalid operation is detected.  Then the printing can be wrapped in an <code>if..else</code> statement as <code>if (valid)...</code></p>

<h2>Use meaningful variable names</h2>

<p>The variable names <code>a</code>, <code>b</code>, and <code>c</code> are not at all descriptive. Better names might be <code>num1</code>, <code>num2</code> and <code>op</code>.  Doing so makes your code easier to read, understand and maintain.  Also, <code>printResults</code> is a very generic name and doesn't tell the reader much.</p>

<h2>Don't use <code>std::endl</code> if <code>'\n'</code> will do</h2>

<p>Using <code>std::endl</code> emits a <code>\n</code> and flushes the stream.  Unless you really need the stream flushed, you can improve the performance of the code by simply emitting <code>'\n'</code> instead of using the potentially more computationally costly <code>std::endl</code>.</p>

<h2>Rethink the interface</h2>

<p>Right now the code is hard-coded to only emit to <code>std::cout</code>.  It may be better to pass in a <code>std::ostream &amp;</code> as a parameter to allow any output stream to be used.  Better still, leave the printing to the calling code as in the following suggestion.</p>

<h2>Use <a href="https://en.cppreference.com/w/cpp/utility/optional" rel="nofollow noreferrer"><code>std::optional</code></a></h2>

<p>A C++17 feature is <code>std::optional</code> which is very useful for code like this.  Here's how it might be used:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;optional&gt;

auto applyOperation(double first, double second, char op)
{
    bool valid{true};
    double result;

    switch (op) {
        case '+':
            result = first + second;
            break;
        case '-':
            result = first - second;
            break;
        case '*':
            result = first * second;
            break;
        case '/':
            result = first / second;
            break;
        default:
            valid = false;
    }
    return valid ? std::optional&lt;double&gt;{result} : std::nullopt;
}

int main() {
    constexpr double limit{2};
    constexpr double epsilon{0.5};
    constexpr char ops[]{'+','-','*','/','?'};
    for (const char op : ops) {
        for (auto first{-limit}; first &lt; limit; first += epsilon) {
            for (auto second{-limit}; second &lt; limit; second += epsilon) {
                auto result{applyOperation(first, second, op)};
                if (result) {
                    std::cout &lt;&lt; first &lt;&lt; " " &lt;&lt; op &lt;&lt; " " &lt;&lt; second &lt;&lt; " is " &lt;&lt; result.value() &lt;&lt; '\n';
                } else {
                    std::cout &lt;&lt; "Invalid operator '" &lt;&lt; op &lt;&lt; "'\n";
                }
            }
        }
    }
}
</code></pre>
    </div>