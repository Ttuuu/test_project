<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can also do:</p>

<pre><code>from collections import Counter

def compare_lists(list1, list2): 
    return Counter(list1) == Counter(list2)
</code></pre>

<p>While <code>list.sort</code> / <code>sorted</code> has <code>O(n log n)</code> time complexity, constructing a <code>Counter</code> (which is a <code>dict</code> internally) is <code>O(n)</code>. This is also an improvement over the solution in the question, which is <code>O(n ^ 2)</code>. </p>

<p>There is also a more efficient memory allocation involved if you do not want to mutate <code>list1</code> and <code>list2</code>. Constructing the sorted list has <code>O(n)</code> space complexity, while constructing the <code>Counter</code> is <code>O(k)</code>, where <code>k</code> is the number of <em>unique</em> elements.</p>

<p>If you wanted to make this function scalable to an arbitrary number of lists, you could do:</p>

<pre><code>from collections import Counter

def compare_lists(*lists):
    counters = map(Counter, lists)

    try:
        first_counter = next(counters)
    except StopIteration:
        return True

    return all(first_counter == counter for counter in counters)
</code></pre>

<p>Now <code>compare_lists</code> takes a variable number of arguments, and would return <code>True</code> if all of the arguments are permutations of each other.</p>
    </div>