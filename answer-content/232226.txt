<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PEP 8</h2>

<p>You are following most of the PEP 8 style guidelines.  One that you are breaking is method names should be <code>snake_case</code>; your function should be named <code>longest_common_substring</code>.</p>

<h2>Tricky Code</h2>

<p>Your <code>dp</code> matrix is properly allocated to the size <code>m+1</code> by <code>n+1</code>.</p>

<p>When you index your matrix, you access <code>[i-1][j-1]</code> with <span class="math-container">\$0 \le i \lt m\$</span> and <span class="math-container">\$0 \le j \lt n\$</span>.  This means you never access the last allocated row <code>m</code> or the last allocated column <code>n</code>, but instead rely on accessing the <code>-1</code> row and the <code>-1</code> column wrapping around to reach these "unused" spaces.  This is "surprising" code at best, and "crashing" code if translated to a different programming language.</p>

<p>It would be better to add one to the indices used to index the <code>dp</code> matrix.  The simplest way would be to start the <code>i</code> and <code>j</code> enumerations at one:</p>

<pre><code>    for i, ic in enumerate(s1, 1):
        for j, jc in enumerate(s2, 1):
</code></pre>

<h2>Useless <code>else</code></h2>

<p>Expand out this <code>... if ... else ...</code> statement:</p>

<pre><code>            max_len = dp[i][j] if len(max_len) &lt; len(dp[i][j]) else max_len
</code></pre>

<p>Initially, this produces:</p>

<pre><code>            if len(max_len) &lt; len(dp[i][j]):
                max_len = dp[i][j]
            else:
                max_len = max_len
</code></pre>

<p>But we can immediately see the <code>else:</code> clause is a no-op, and can be removed:</p>

<pre><code>            if len(max_len) &lt; len(dp[i][j]):
                max_len = dp[i][j]
</code></pre>

<p>Which reads much more clearly than the original.</p>

<h2>From <span class="math-container">\$O(n m)\$</span> to <span class="math-container">\$O(n)\$</span> space</h2>

<p>During the first iteration of outer loop, you only access rows <code>-1</code> and <code>0</code>.  During the second iteration of outer loop, you only access rows <code>0</code> and <code>1</code>.  During the third iteration of outer loop, you only access rows <code>1</code> and <code>2</code>.  Etc.  You only need two rows of the <code>dp</code> matrix!</p>

<p>More over, you create the <code>0</code> row from the <code>-1</code> row, you create the <code>1</code> from the <code>0</code> row, you create the <code>2</code> row from the <code>1</code> row, and so on.</p>

<p>Do you really need to keep the <code>dp</code> matrix?  Or could you use a <code>previous_row</code> and a <code>current_row</code>?  Only storing two length <code>n</code> rows reduces your space to <span class="math-container">\$O(2n)\$</span>, which is simply <span class="math-container">\$O(n)\$</span>.</p>
    </div>