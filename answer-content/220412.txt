<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure how to answer all your questions but at least I'll provide my two cents :) </p>

<ol>
<li>Don't use regex unless you really need to. Regex is <a href="https://blog.codinghorror.com/regex-performance/" rel="nofollow noreferrer">notorious for its slow performance on large strings</a>. </li>
<li>I was thinking about some rule engine before I got to your code. So I think your class structure is perfectly fine.</li>
</ol>

<hr>

<p>Regarding the code readability: 
 - You could rename <code>Utils.RemoveStrings</code> to <code>Utils.SanitizeInput</code> or something in order to better express the intention behind your method. Also, you can move <code>cleanUpValues</code> inside in order to reduce the number of parameters.
 - Charge parameters can be converted to auto-property</p>

<pre><code>public List&lt;ChargeParameter&gt; Parameters { get; } = new List&lt;ChargeParameter&gt;();
</code></pre>

<ul>
<li>Please pay attention there is some dead code. </li>
<li>Many methods can be made private

<ul>
<li>No need to use <code>&amp;&amp;</code> operator for your evaluation. It can be rewritten like this. </li>
</ul></li>
</ul>

<pre><code>    private bool EvaluateRulesAgainstCharge(Charge charge, RuleSet allowRules, RuleSet denyRules)
    {
        var allowTransaction = CheckRules(charge, allowRules, true);

        if (!allowTransaction)
            return false;

        allowTransaction = CheckRules(charge, denyRules, false);
        return allowTransaction;
    }

    private static bool CheckRules(Charge charge, RuleSet rules, bool expectedResult)
    {
        var allowTransaction = true;
        if (rules != null)
        {
            foreach (var rule in rules.Rules)
            {
                var chargeParam = charge.Parameters.First(p =&gt; p.ParameterName == rule.ParameterName);
                if (rule.ParameterName == "amount")
                {
                    allowTransaction = Utils.Compare(rule.Operator, double.Parse(chargeParam.ParameterValue),
                        double.Parse(rule.Value)) == expectedResult;
                }
                else
                {
                    allowTransaction = Utils.Compare(rule.Operator, chargeParam.ParameterValue, rule.Value) == expectedResult;
                }

                if (!allowTransaction)
                    break;
            }
        }

        return allowTransaction;
    }
<span class="math-container">```</span>
</code></pre>
    </div>