<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Readability</strong>  </p>

<p>Use keyword <code>var</code> any time that the initialization of the variable clearly tells what the variable represents. Avoid abbreviations in variable names.</p>

<pre><code>var messageQueue = new MessageQueue(queue);
var semaphore = new SemaphoreSlim(15, 15);
</code></pre>

<hr>

<p><strong>Configuration</strong></p>

<p>Avoid hard-coded settings:</p>

<blockquote>
<pre><code>var semaphore = new SemaphoreSlim(15, 15);
</code></pre>
</blockquote>

<p>Make use of a pattern to allow the number of concurrent processing jobs to be configurable (instance property, configuration file, ..).</p>

<hr>

<p><strong>Main Loop</strong></p>

<p>The main loop <code>while (true)</code> is considered a code smell by some because it's not clear what the exit conditions are. But what's definately an issue is that the loop never exits. Always make sure the loop has a graceful exit. Since there's a cancellation token provided, why not use it to drive the loop? </p>

<p><em>sand-box mode:</em></p>

<pre><code>while (!token.IsCancellationRequested)
{
    // .. loop body
}
</code></pre>

<p><em>explicit mode:</em></p>

<pre><code>while (true)
{
    token.ThrowIfCancellationRequested();
    // .. loop body
}
</code></pre>

<hr>

<p><strong>Threading Integrity</strong></p>

<p>Once you have acquired the semaphore, you should immediately use the try-finally block to make sure to always release it.</p>

<blockquote>
<pre><code>await semaphore.WaitAsync();

// What if the code below throws an exception? The semaphore is not released!
await PeekAsync(messageQueue);
var message = await ReceiveAsync(messageQueue);
</code></pre>
</blockquote>

<pre><code>await semaphore.WaitAsync();
try
{
    // .. code while holding lock
}
finally 
{
    semaphore.Release();
}
</code></pre>

<hr>

<p><strong>MessageQueue</strong></p>

<p>There is no reason to peek before receiving, because <a href="https://docs.microsoft.com/en-us/dotnet/api/system.messaging.messagequeue?view=netframework-4.8" rel="nofollow noreferrer">both operations are blocking on the same trigger - an incoming message</a>.</p>

<blockquote>
<pre><code>await PeekAsync(messageQueue);
var message = await ReceiveAsync(messageQueue);
</code></pre>
</blockquote>

<p>You can replace the above with:</p>

<pre><code>var message = await ReceiveAsync(messageQueue);
</code></pre>
    </div>