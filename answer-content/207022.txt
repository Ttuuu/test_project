<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Buggy / fragile code</h2>

<p>As evidenced by the comments debating whether this code works or not, this code is fragile, if not outright broken.</p>

<ul>
<li><p><strong>In Python 2:</strong> If you run the program in Python 2, it will crash and explicitly tell you what the problem is:</p>

<pre class="lang-none prettyprint-override"><code>$ python algore.py 
Traceback (most recent call last):
  File "algore.py", line 14, in &lt;module&gt;
    if search_match(line, f.readline()):
ValueError: Mixing iteration and read methods would lose data
</code></pre>

<p>The problem is that you are using both <code>for line in f: …</code> and <code>f.readline()</code> to fetch text from <code>f</code>, and the two mechanisms don't interact well with each other:</p>

<p>Imagine that you are implementing the code to support <code>for line in f: …</code>.  Rather than reading one character at a time from the buffer, you'd want to fetch a block of characters to fill a buffer, then scan that buffer for the line break.  But then, <code>f.readline()</code> also reads from <code>f</code> into a buffer, but <em>starting from where the first read left off</em>, which is likely beyond where the first line break is.</p>

<p>One simple fix is to replace all calls to <code>f.readline()</code> with <code>next(f, '')</code>.  Then, you would be consistently treating <code>f</code> as a line-by-line iterator, and not mixing the two mechanisms.  But I'd still consider it to be poor style, since most people would assume that each iteration through the <code>for line in f: …</code> loop would consume just one line.</p></li>
<li><p><strong>In Python 3:</strong> In Python 3 appears to not suffer from that problem: <code>f.readline()</code> uses the same buffer as the line-by-line iterator for <code>f</code>.  However, your problem is that <code>if search_match(line, f.readline()):</code> <strong>always consumes another line from the buffer</strong>, whether or not <code>line</code> is a <code>From</code> header.  Therefore, if you put a <code>print(line)</code> immediately after <code>for line in f:</code>, you'll see that it's skipping some lines.</p></li>
</ul>

<h2>Style</h2>

<p>This simultaneous assignment of two variables is unnecessarily lengthening a line of code that is very long already.  It should be split up into two statements.</p>

<blockquote>
<pre><code>date, subject = datetime.datetime.strptime(f.readline().strip()[5:], "%A, %B %d, %Y"), f.readline()
</code></pre>
</blockquote>

<h2>Suggested solution</h2>

<p>Since the challenge states that every message contains headers that occur in a predictable order, we can simply do pattern matching using a regular expression.  If <code>whmail.log</code> is not too large to fit entirely in memory, then the task would be greatly simplified by treating the file as one big string rather than a collection of lines.</p>

<p>The code to print the output would be more readable if you wrote the template as a triple-quoted multi-line string, with named placeholders instead of numbers.</p>

<p>Your <code>get_date()</code> function is poorly named, as "get" implies that you are retrieving a piece of data from some existing place.  It's actually a date-formatting function, though.</p>

<pre><code>from datetime import datetime, timedelta
import re

BM_EMAIL_RE = re.compile(
    r'^From (?P&lt;From&gt;veep@whitehouse.gov)$\s+'
    r'^To (?P&lt;To&gt;buddha@whitehouse.gov)$\s+'
    r'^Date (?P&lt;Date&gt;.*)$\s+'
    r'^Subject (?P&lt;Subject&gt;.*)$\s+',
    re.MULTILINE
)

REPLY_TEMPLATE = """From buddha@whitehouse.gov
To veep@whitehouse.gov
Date {reply_date}
Subject Re: {subject}

Thank you for advising me of your BM. You may not have
another BM until {limit_date}."""

def format_date(date):
    # We want %e (day of month with no zero padding) instead of %d (day of
    # month with zero padding), but %e is not portable.  Perform substitution
    # as a workaround.
    return re.sub('0([0-9],)', r'\1', date.strftime('%A, %B %d, %Y'))

with open('whmail.log') as f:
    for email in BM_EMAIL_RE.finditer(f.read()):
        date = datetime.strptime(email.group('Date'), '%A, %B %d, %Y')
        print(REPLY_TEMPLATE.format(
            subject=email.group('Subject'),
            reply_date=format_date(date + timedelta(days=33)),
            limit_date=format_date(date + timedelta(days=28)),
        ))
</code></pre>
    </div>