<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Clarify requirements</h1>

<p>What result is desired if there's a tie for longest word?  Accepting the first of equal-length words is a valid choice, but we'll want to document that we've made a choice where the spec was vague.  Similarly, returning <code>None</code> when there are no matches is another valid choice that should be documented.</p>

<p>I'd lean toward returning a <em>collection</em> of results; that allows the caller to decide whether to print one or more, and streamlines the handling of the empty result.</p>

<h1>Reduce computational complexity</h1>

<p>The code presented tests every candidate against the entire input, in turn.  This scales as O(<em>M</em>✕<em>N</em>), where <em>M</em> is the size of the text and <em>N</em> is the number of candidate words.  We can reduce that complexity by grouping the words according to the next unseen letter in the word; then walk through the text, examining just the set of words that can be advanced at each step.  That scales as O(<em>M</em>+<em>Nn</em>), where <em>Nn</em> is the total length of all the candidate words.</p>

<p>It should be obvious that this really lends itself to a prefix-tree representation, but we can make it work for plain lists, too.</p>

<p>Here's a quickly knocked up implementation of that idea, with some small improvements (e.g. finish early if we match the longest candidate).  Please forgive a C++ coder's approach to Python:</p>

<pre><code>from collections import defaultdict

class Word:
    def __init__(self, s):
        self.chars = s
        self.index = 0

    def __repr__(self):
        return self.chars + "(" + str(self.index) + ")"

class Matcher:
    def __init__(self, words):
        self.candidates = defaultdict(list)
        self.longest = 0
        self.results = []
        for w in words:
            self.insert(Word(w))

    def insert(self, word):
        length = len(word.chars)
        if length &lt; self.longest:
            return
        elif word.index &lt; length:
            self.candidates[word.chars[word.index]].append(word)
        elif length == self.longest:
            self.results.append(word.chars)
        elif length &gt; self.longest:
            self.longest = length
            self.results = [word.chars]
            for i in self.candidates.values():
                i[:] = filter(lambda x: len(x.chars) &gt;= length, i)

    def step(self, char):
        words = self.candidates[char]
        del self.candidates[char]
        for w in words:
            w.index += 1
            self.insert(w)
        if not any(self.candidates.values()):
            raise StopIteration

    def read(self, it):
        try:
            for c in it:
                self.step(c)
        except StopIteration as e:
            pass
        return self.results
</code></pre>

<p>Testing this on a large problem set gives results around 20✕ faster (after removing the <code>print()</code> from your code, to give a fair comparison):</p>

<pre><code>import itertools
import random
import string
import time
import timeit

def make_random_words(min_len, max_len):
    """An infinite generator of words containing min_len to max_len letters"""
    while True:
        length = random.randint(min_len, max_len)
        yield ''.join([random.choice(string.ascii_letters) for n in range(length)])

if __name__ == "__main__":
    # try ten-thousand random words and a long text
    words = list(itertools.islice(make_random_words(5, 15), 10000))
    mobydick = open("moby-dick.txt").read()

    print(timeit.timeit("Main.get_longest_word(mobydick, words)",
                        number=10, timer=time.process_time, globals=globals()))

    print(timeit.timeit("Matcher(words).read(mobydick)",
                        number=10, timer=time.process_time, globals=globals()))
</code></pre>

<pre class="lang-none prettyprint-override"><code>9.290360821999998
0.510936933
</code></pre>

<p>These results might be more dramatic if we read directly from the file, as stopping early will have greater benefit in that case.</p>
    </div>