<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>The thing is, even so, standard grep still gets results faster by an amount of 60 % less processing time</p>
</blockquote>

<p>For more information on what makes GNU grep fast, read <a href="https://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html" rel="noreferrer">this</a> by the original author.</p>

<hr>

<p>Here is some feedback on writing idiomatic Go.</p>

<h2>Lines</h2>

<p>Your code is oddly formatted.</p>

<p>It is very uncommon to have empty lines everywhere. In your code, empty lines more than double the length of your code. In most cases, I only add extra lines to separate functions, structs, if statements, for loops, etc.</p>

<pre><code>package main


import (
    "bufio"

    "flag"

    "fmt"

    "io"

    "os"

    "path/filepath"

    "regexp"

    "sync"

)


type result struct {

    Filename string

    Line string

    LineNumber int

    Error error

}
</code></pre>

<p>Becomes:</p>

<pre><code>package main

import (
    "bufio"
    "flag"
    "fmt"
    "io"
    "os"
    "path/filepath"
    "regexp"
    "sync"
)


type result struct {
    Filename string
    Line string
    LineNumber int
    Error error
}
</code></pre>

<h2>Line length</h2>

<p>Keep lines to a length of 80 characters. It makes code easier to read on smaller monitors or if you split your screen to view multiple things.</p>

<pre><code>flag.StringVar(&amp;strRex, "r", "", "Regular expresion to match against the input files")

flag.BoolVar(&amp;verbose, "v", false, "It sets verbose output (Basically showing filename and line number for each match)")

flag.BoolVar(&amp;inverseSearch, "i", false, "It does what you might expect.. reverse the search")

flag.StringVar(&amp;recursive, "R", "", "Recursively find all files starting from the current folder and apply the given search to them")

flag.StringVar(&amp;fileFilter, "FF", "", "Filter to be applied to the filenames when used recursevily")
</code></pre>

<p>Becomes:</p>

<pre><code>flag.StringVar(&amp;strRex, "r", "",
    "Regular expresion to match against the input files")

flag.BoolVar(&amp;verbose, "v", false,
    "It sets verbose output (Basically showing filename and line number "+
    "for each match)")

flag.BoolVar(&amp;inverseSearch, "i", false,
    "It does what you might expect.. reverse the search")

flag.StringVar(&amp;recursive, "R", "",
    "Recursively find all files starting from the current folder and "+
    "apply the given search to them")

flag.StringVar(&amp;fileFilter, "FF", "",
    "Filter to be applied to the filenames when used recursevily")
</code></pre>

<h2>Use a C-style for loop</h2>

<p>In <code>grepStdin()</code> you initialize <code>lineno</code>, increment it and only use it in the for loop. That's a standard for loop. Once inside the for loop, we can rename it to <code>l</code> because it's purpose is clear from it's usage.</p>

<pre><code>var lineno = 1

for bf.Scan() {
    // There is no XOR in Golang, so you ahve to do this:
    if line := bf.Text(); (reg.Match([]byte(line)) &amp;&amp; !inverseSearch) || (!reg.Match([]byte(line)) &amp;&amp; inverseSearch) {
        formatRes(&amp;result{
            Line: line,
            LineNumber: lineno,
            Error: nil,
        }, 3)
    }
    lineno++
}
</code></pre>

<p>Becomes:</p>

<pre><code>for l := 1; bf.Scan(); l++ {
    // There is no XOR in Golang, so you ahve to do this:
    if line := bf.Text(); (reg.Match([]byte(line)) &amp;&amp; !inverseSearch) || (!reg.Match([]byte(line)) &amp;&amp; inverseSearch) {
        formatRes(&amp;result{
            Line:       line,
            LineNumber: l,
            Error:      nil,
        }, 3)
    }
}
</code></pre>

<h2>Combine multiple <code>var</code> declarations</h2>

<p>You can combine multiple variables declared with <code>var</code> as such:</p>

<pre><code>var strRex string

var filenames []string

var regRex *regexp.Regexp

var wg sync.WaitGroup

var allResults []result

var verbose = false

var recursive string

var recursiveFileList []string

var fileFilter string

var rexfileFilter *regexp.Regexp

var inverseSearch bool
</code></pre>

<p>Becomes:</p>

<pre><code>var (
    strRex            string
    filenames         []string
    regRex            *regexp.Regexp
    wg                sync.WaitGroup
    allResults        []result
    verbose           = false
    recursive         string
    recursiveFileList []string
    fileFilter        string
    rexfileFilter     *regexp.Regexp
    inverseSearch     bool
)
</code></pre>

<p>This is far more readable.</p>

<h2>Use <code>log</code> to write to standard error</h2>

<p>You can utilize the <code>log</code> package to print (possibly fatal) errors to standard error.</p>

<pre><code>fmt.Fprintf(os.Stderr,
    "The '-r' (regular expression flag is mandatory)\n")

os.Exit(1)
</code></pre>

<p>Becomes:</p>

<pre><code>if strRex == "" {
    log.Fatalln("The regular expression flag '-r' is mandatory")
}
</code></pre>

<p>And</p>

<pre><code>if rexError != nil {
    fmt.Fprintf(os.Stderr, "Your regex '%s' cant compile. Error : %s", strRex, rexError.Error())
    os.Exit(2)

}
</code></pre>

<p>Becomes:</p>

<pre><code>if rexError != nil {
    log.Fatalf("Your regex '%s' cant compile. Error : %s\n", strRex,
        rexError)
}
</code></pre>

<p>Notice that you don't need to call <code>Error()</code> to get the string from it.</p>

<p>By doing this, you won't get custom return values. I don't think they're very useful in lieu of a good error message.</p>

<h2>Combine if and assignment</h2>

<pre><code>var err error

filenames, err = walkDir(recursive)

if err != nil {
    fmt.Fprintf(os.Stderr, "%s", err.Error())
}
</code></pre>

<p>Becomes:</p>

<pre><code>var err error

if filenames, err = walkDir(recursive); err != nil {
    log.Println(err)
}
</code></pre>

<h2>Move things out of the global scope</h2>

<p>Your <code>wg</code> wait group is in the global scope. It doesn't need to be. You already pass <code>wait</code> to <code>grep()</code>, so use it.</p>

<p><code>allResults</code> is never used. <code>recursiveFileList</code> is never used.</p>

<p>We can also move all of your flag variables to a common <code>struct</code>. This is just a preference, but it tells readers what is a flag and what isn't.</p>

<h2>Use a switch statement</h2>

<p>In <code>formatRes</code> you can use a switch statement instead of multiple if statements.</p>

<p>You can also clean up how you print things, like using <code>Println</code> instead of <code>Printf</code>.</p>

<pre><code>switch format {
case 1:
    if r.Error == nil {
        fmt.Printf("%d - %s - %s\n", r.LineNumber, r.Filename, r.Line)
    } else {
        log.Printf("%s - %s\n", r.Filename, r.Error)
    }
    break
case 2:
    if r.Error == nil {
        fmt.Printf("%s\n", r.Line)
    } else {
        log.Printf("%s - %s\n", r.Filename, r.Error)
    }
    break
case 3:
    if r.Error == nil {
        fmt.Printf("%s\n", r.Line)
    } else {
        log.Println(r.Error)
    }
}
</code></pre>

<h2>Move your condition to a separate function</h2>

<p>Your condition</p>

<pre><code>(reg.Match([]byte(line)) &amp;&amp; !fl.inverseSearch) || (!reg.Match([]byte(line)) &amp;&amp; fl.inverseSearch)
</code></pre>

<p>Is long, and as Colin points out, you can take advantage of short circuiting.</p>

<p>Go does not provide XOR, but <a href="https://stackoverflow.com/a/23025720/6789498">it doesn't need to</a>. I'll leave that for you to implement.</p>

<p>We can define a function as such:</p>

<pre><code>func match(reg *regexp.Regexp, line string) bool {
    return !fl.inverseSearch &amp;&amp; reg.Match([]byte(line)) || (fl.inverseSearch &amp;&amp; !reg.Match([]byte(line)))
}
</code></pre>

<h2>Use <code>grepStdin()</code> in <code>grep()</code></h2>

<p>As Colin says, they contain duplicate code. I'll leave that for you to implement.</p>

<h2>Conclusion</h2>

<p>There are many other places to clean up the code, but I think you'll get the gist. Here is the final code I ended up with:</p>

<pre><code>package main

import (
    "bufio"
    "flag"
    "fmt"
    "io"
    "log"
    "os"
    "path/filepath"
    "regexp"
    "sync"
)

type result struct {
    Filename   string
    Line       string
    LineNumber int
    Error      error
}

type flags struct {
    strRex        string
    recursive     string
    fileFilter    string
    verbose       bool
    inverseSearch bool
}

var (
    fl            flags
    filenames     []string
    regRex        *regexp.Regexp
    rexfileFilter *regexp.Regexp
)

func init() {
    dfl := flags{
        strRex:        "",
        verbose:       false,
        inverseSearch: false,
        recursive:     "",
        fileFilter:    "",
    }

    var rexError error

    flag.StringVar(&amp;fl.strRex, "r", dfl.strRex,
        "Regular expresion to match against the input files")

    flag.StringVar(&amp;fl.recursive, "R", dfl.recursive,
        "Recursively find all files starting from the current folder and "+
            "apply the given search to them")

    flag.StringVar(&amp;fl.fileFilter, "FF", dfl.fileFilter,
        "Filter to be applied to the filenames when used recursevily")

    flag.BoolVar(&amp;fl.verbose, "v", dfl.verbose,
        "It sets verbose output (Basically showing filename and line number "+
            "for each match)")

    flag.BoolVar(&amp;fl.inverseSearch, "i", dfl.inverseSearch,
        "It does what you might expect.. reverse the search")

    flag.Parse()

    if fl.strRex == "" {
        log.Fatalln("The regular expression flag '-r' is mandatory")
    }

    regRex, rexError = regexp.Compile(fl.strRex)

    if rexError != nil {
        log.Fatalf("Your regex '%s' cant compile. Error : %s\n", fl.strRex,
            rexError)
    }

    rexfileFilter, rexError = regexp.Compile(fl.fileFilter)

    if rexError != nil {
        log.Fatalf("Your regex '%s' cant compile. Error : %s", rexfileFilter,
            rexError)
    }

    if fl.recursive != "" {
        var err error

        if filenames, err = walkDir(fl.recursive); err != nil {
            log.Println(err)
        }
    } else {
        filenames = flag.Args()
    }
}

func main() {
    stat, err := os.Stdin.Stat()

    if err != nil {
        log.Fatalf("There is an error reading from stdin: %s", err)
    }

    var wait sync.WaitGroup

    if (stat.Mode() &amp; os.ModeNamedPipe) != 0 {
        grepStdin(os.Stdin, regRex)
    } else {
        chResults := make(chan *result, 4)

        wait.Add(len(filenames))

        for _, fn := range filenames {
            go grep(fn, regRex, &amp;wait, chResults)
        }

        go func(wait *sync.WaitGroup, ch chan&lt;- *result) {
            wait.Wait()

            close(ch)
        }(&amp;wait, chResults)

        for res := range chResults {
            if fl.verbose {
                formatRes(res, 1)
            } else {
                formatRes(res, 2)
            }
        }
    }
}

func match(reg *regexp.Regexp, line string) bool {
    return !fl.inverseSearch &amp;&amp; reg.Match([]byte(line)) || (fl.inverseSearch &amp;&amp; !reg.Match([]byte(line)))
}

func grepStdin(ptr io.Reader, reg *regexp.Regexp) {
    bf := bufio.NewScanner(ptr)

    for l := 1; bf.Scan(); l++ {
        if line := bf.Text(); match(reg, line) {
            formatRes(&amp;result{
                Line:       line,
                LineNumber: l,
                Error:      nil,
            }, 3)
        }
    }
}

func grep(file string, reg *regexp.Regexp, wait *sync.WaitGroup,
    ch chan&lt;- *result) {

    fd, err := os.Open(file)

    if err != nil {
        ch &lt;- &amp;result{
            Filename: file,
            Error:    err,
        }
    }

    bf := bufio.NewScanner(fd)

    for l := 1; bf.Scan(); l++ {
        if line := bf.Text(); match(reg, line) {
            ch &lt;- &amp;result{
                Filename:   file,
                Line:       line,
                LineNumber: l,
                Error:      nil,
            }
        }
    }

    wait.Done()
}

func formatRes(r *result, format int) {
    switch format {
    case 1:
        if r.Error == nil {
            fmt.Printf("%d - %s - %s\n", r.LineNumber, r.Filename, r.Line)
        } else {
            log.Printf("%s - %s\n", r.Filename, r.Error)
        }
        break
    case 2:
        if r.Error == nil {
            fmt.Println(r.Line)
        } else {
            log.Printf("%s - %s\n", r.Filename, r.Error)
        }
        break
    case 3:
        if r.Error == nil {
            fmt.Println(r.Line)
        } else {
            log.Println(r.Error)
        }
    }
}

func walkDir(path string) ([]string, error) {
    list := make([]string, 0, 50)

    err := filepath.Walk(".",
        func(path string, info os.FileInfo, err error) error {
            if err != nil {
                return err
            }

            if fl.fileFilter != "" {
                if rexfileFilter.Match([]byte(filepath.Base(path))) {
                    list = append(list, path)
                }
            } else {
                list = append(list, path)
            }

            return nil
        })

    if err != nil {
        return nil, err
    }

    return list, nil
}
</code></pre>

<p>In my opinion, it's far more readable and to-the-point.</p>

<p>Hope this helps!</p>
    </div>