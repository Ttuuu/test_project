<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All your arguments can/should be passed <code>ByVal</code>. As they are presently written they are implicitly <code>ByRef</code>, the default when neither is specified. You want them written ByVal since you're accessing them and not changing them.</p>

<p>Use of <code>""</code> can be rewritten as <code>vbNullString</code>. <code>""</code> leaves doubt as possibly the string had contents previously but were possibly removed accidentally. Maybe? <code>vbNullstring</code> makes it unambiguous that it's intentional.</p>

<p>Sub <code>SaveAsPdf</code> is implicitly public. Explicitly set it to public with <code>Public Sub SaveAsPdf()</code> so there's no doubt you intended it to be this way.</p>

<p><code>Mid</code> can be written as the string version <code>Mid$</code> because year is declared as a string.</p>

<p>Within <code>ComposeFileName</code> you are using the ActiveSheet object. It's better to explicitly supply this dependency as an argument because right now it's an implicit dependency that needs to be known about. This is what it would look like at the call site <code>ComposeFileName(ActiveWorkbook.Sheets(1), ActiveSheet)</code> and below is the rewritten function signature. ***Note that <code>ActiveWorkbook.Sheets(1)</code> should be referenced by its CodeName as explained later.</p>

<pre><code>Private Function ComposeFileName(ByVal presetWorksheet As Worksheet, ByVal happenedToBeTheActiveSheet As Worksheet) As String
</code></pre>

<p>Again within <code>ComposeFileName</code> you have <code>year = presetSheet.Cells(2, 11).Value2</code> which is a problem waiting to occur. What happens if you insert a row above that cell, or a column to the left of it? You're now referencing an incorrect cell. Update that static cell reference by using a Named range. From the ribbon under the Formulas tab&gt;Defined Names group&gt;Name Manager (Hotkey: <code>Ctrl+F3</code>) to display the Name Manager dialog.</p>

<p><a href="https://i.stack.imgur.com/eQ9XR.png" rel="noreferrer"><img src="https://i.stack.imgur.com/eQ9XR.png" alt="enter image description here"></a></p>

<p>In the Name Manager dialog click the New button to create a named range for this cell. Under Scope choose the sheet it belongs to so it's limited to just that sheet and refer to the cell you want. Providing a descriptive name like YearCell will aid in understanding why it's has a name. Update your code to use <code>presetSheet.Names("YearCell").RefersToRange.Value2</code>. Now when, not if, a row/column is added your cell reference won't break. The same goes for the cells that refer to the variables <code>shortName</code> as well as the cells that contain the month's name.</p>

<hr>

<p>Similar to how cell references are fragile your use of the Worksheet.Name property is also fragile. If the sheet names are changed then your code will break. Prefer using the Worksheet.CodeName property as it can only be changed in the IDE. Do this by going to the Project Explorer and double clicking on the sheet you want to update the CodeName for. From the menu at the top of the IDE View&gt;Properties Window (Hotkey: <code>F4</code>) and where it says (Name) Sheet1 rename it to what you want. Naming it fooSheet allows you to use <code>fooSheet.Name</code> to get the name property or any other member of a worksheet object making your code less prone to easy breakage.</p>

<hr>

<p>Your <code>Const</code> values that deal with months feel like they should be an Enum. This way when you need to use them you can type <code>Months.</code> (note the period) and you'll be given a full list of month names.</p>

<pre><code>Public Enum Months
    NotSet
    January
    February
'   ...
    November
    December
End Enum
</code></pre>

<p>After converting to an Enum you can use a class module instead of a function. The class below uses a reference set from the menu at the top Tools&gt;References&gt;Microsoft Scripting Runtime which provides access to a dictionary <code>Scripting.Dictionary</code>. When the class is first initialized it populates the dictionaries thereafter allowing you to convert the supplied value instead of checking against every month.</p>

<p>The converter includes guard clauses to raise an error on invalid inputs. These can easily be modified as required.</p>

<pre><code>Option Explicit

Private StringForEnum As Scripting.Dictionary
Private EnumForString As Scripting.Dictionary

Private Sub Class_Initialize()
    PopulateDictionaries
End Sub

Private Sub PopulateDictionaries()
    Set EnumForString = New Scripting.Dictionary
    Set StringForEnum = New Scripting.Dictionary

    EnumForString.CompareMode = VBA.VbCompareMethod.vbTextCompare
    EnumForString.Add vbNullString, Months.NotSet
    EnumForString.Add "Januar", Months.January
    EnumForString.Add "Februar", Months.February
    EnumForString.Add "MÃ¤rz", Months.March
    EnumForString.Add "April", Months.April
    EnumForString.Add "Mai", Months.May
    EnumForString.Add "Juni", Months.June
    EnumForString.Add "Juli", Months.July
    EnumForString.Add "August", Months.August
    EnumForString.Add "September", Months.September
    EnumForString.Add "Oktober", Months.October
    EnumForString.Add "November", Months.November
    EnumForString.Add "Dezember", Months.December

    EnumForString.CompareMode = VBA.VbCompareMethod.vbTextCompare
    Dim i As Variant
    For Each i In EnumForString.Keys
        StringForEnum.Add EnumForString.Item(i), i
    Next
End Sub

Public Function ToEnum(ByVal value As String) As Months
    If Not EnumForString.Exists(value) Then
        ThrowInvalidArgument "ToEnum", value
    End If

    ToEnum = EnumForString(value)
End Function

Public Function ToString(ByVal value As Months) As String
    If Not StringForEnum.Exists(value) Then
        ThrowInvalidArgument "ToString", CStr(value)
    End If

    ToString = StringForEnum(value)
End Function

Private Sub ThrowInvalidArgument(ByVal source As String, ByVal value As String)
    Err.Raise 5, Information.TypeName(Me) &amp; "." &amp; source, "Invalid input '" &amp; value &amp; "' was supplied."
End Sub

Public Property Get Enums() As Variant
    Enums = EnumForString.Items
End Property

Public Property Get Strings() As Variant
    Strings = EnumForString.Keys
End Property
</code></pre>

<p>The converter is created and used as shown below. As shown it will return a value af <code>1</code></p>

<pre><code>Dim converter As MonthConverter
Set converter = New MonthConverter
Debug.Print converter.ToEnum("Januar")
</code></pre>

<p>Your original function returned a two digit string number. Achieve that by wrapping the return value with the Format member of the Strings class: <code>Strings.Format(converter.ToEnum("Januar"))</code>.</p>
    </div>