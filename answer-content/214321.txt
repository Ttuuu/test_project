<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Quick note first:</p>

<p>The post you link to only allows for positive numbers in input (with 0 also counting as possitive). Their proposed solution does work with a small adaptation that replaces any negative number with a 0 instead (where you just don't include the negative number in the maximum sum).</p>

<p>For example: The result is the same for arrays <code>[1,0,-1,0,1]</code> and <code>[1,0,0,0,1]</code>.</p>

<hr>

<p>Asking us to write a different solution or asking how someone elses code works is off topic here. Instead I'll try to just provide some hints on how to get started on the constant space solution.</p>

<p><strong>DISCLAIMER: None of the following code is tested. Copy at own risk (also indices in array are probably weird / inconsistent)</strong></p>

<p>Let us consider a different question first that can be solved with a really similar strategy. Namely finding the n-th number of the really well known fibonaci sequence.</p>

<p>The most obvious solution is using recursion to calculate the previous 2 steps:</p>

<pre><code>private static int recursiveFib(int n){
    if(n&lt;2){
        return 1;
    }

    return recursiveFib(n-2)+recursiveFib(n-1);
}
</code></pre>

<p>The problem with this solution is that it will do the same calculations for smaller numbers over and over. You already recognised this and used an array to store intermediate results. That way you only need to calculate each number only once.</p>

<pre><code>private static int recursiveFibMemorised(int n){
    return recursiveFibMemorised(n, new int[n]);
}

private static int recursiveFibMemorised(int n, int[] known){
    if(n&lt;2){
        return 1;
    }
    if(known[n]==0){
        known[n] = recursiveFibMemorised(n-1, known) + recursiveFibMemorised(n-2,known);
    }
    return known[n];
}
</code></pre>

<p>The only problem left here is the recursive call itself. If we're smarter and start calculation from number 0 upwards we can guarantee that any previous ones are already stored. So instead of the recursive call we can directly look those up from the known array instead:</p>

<pre><code>private static int recursiveFibMemorised2(int n){
    int[] known = new int[n+1];
    for(int i = 0; i&lt;n; i++){
        recursiveFibMemorised2(n, known);
    }
    return known[n];
}

private static int recursiveFibMemorised(int n, int[] known){
    if(n&lt;2){
        return 1;
    }
    if(known[n]==0){
        known[n] = known[n-1] + known[n-2];
    }
    return known[n];
}
</code></pre>

<p>Now that we got rid of the recursive call this looks kinda silly, so let's just do the calculation inside the loop directly instead:</p>

<pre><code>private static int recursiveFibMemorised2(int n){
    if(n&lt;2) return 1;

    int[] known = new int[n+1];
    known[0]=1;
    known[1]=1;
    for(int i = 0; i&lt;n; i++){
        known[i]=known[i-1] + known[i-2];
    }
    return known[n];
}
</code></pre>

<p>Finally you can see that we only ever access the known array with the last 2 indices. Any previous value could be discarded. So let's use 2 ints instead of an entire array:</p>

<pre><code>private static int optimisedFib(int n){
    if(n&lt;2){
        return 1;
    }
    int prev2 = 1;
    int prev1 = 1;
    int current = 2;
    for(int i = 2; i &lt;= n ; i++){
        current = prev2 + prev1;
        prev2 = prev1;
        prev1 = current;
    }
    return current;
}
</code></pre>

<hr>

<p>A really similar strategy can now be used for your original problem. The most important thing to see is how to use a previously know max sum of a sub array. Take for example the array <code>[5,1,1,4]</code>. If we first calculate the max sum of the subarray <code>[5,1]</code>. This is 5. Than at the 4th element we can calculate the maximum as 4 + result of <code>[5,1]</code> -&gt; 9.</p>

<p>Notice that we're not interested in the value of the second element anymore there. Only in the max at that point. This means that we want to always store either the maximum value of the subarray 2 elements before + the current value; OR the maximum sum up to 1 element before but without adding the current element since it's adjacent.</p>
    </div>