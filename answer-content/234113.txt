<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A quick skim shows some things that could be improved:</p>

<blockquote>
<pre><code>typedef struct Reagent
</code></pre>
</blockquote>

<p>There's no need for such typedefs in C++, as we can use the structure tag as a type name.</p>

<blockquote>
<pre><code>auto split = [](std::string input) {
</code></pre>
</blockquote>

<p>Perhaps better to pass a <code>const std::string&amp;</code> here?</p>

<blockquote>
<pre><code>    parsable &gt;&gt; reagent.units &gt;&gt; reagent.chemical;
</code></pre>
</blockquote>

<p>I would expect some checking that the stream is still good afterwards.</p>

<p>Having this <code>split</code> function here at all is surprising - we'd normally normally just write an <code>operator&gt;&gt;()</code> to stream into a <code>Reagent</code> object.</p>

<blockquote>
<pre><code>    std::int64_t found;
    if((found = line.find(" =&gt; "))
</code></pre>
</blockquote>

<p>That's a strange choice of type, given that <code>std::string::find()</code> returns a <code>std::string::size_type</code>, aka <code>std::size_t</code>:  we should avoid unnecessary conversions between signed and unsigned types.</p>

<p>In this case, it's simpler to let the compiler determine the most suitable type:</p>

<pre><code>if (auto found = line.find(" =&gt; "); found != std::string::npos)
</code></pre>
    </div>