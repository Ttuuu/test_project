<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The overall question could be better for stackoverflow. This is more about reviewing code, where one would expect to see the code. There is no source for the Levenshtein distance.</p>

<p>But well, let me separate my answer in two parts.</p>

<h2>First, the overall question</h2>

<blockquote>
  <p>Are there any good ideas as to how to improve the code, or trim my search space so I might come to a faster solution?</p>
</blockquote>

<p>According to the given preconditions:</p>

<blockquote>
  <p>One string being a description of a item in inventory and one string being a description of a item, but possibly truncated/missing some characters</p>
</blockquote>

<p>One string is correct, the other one has flaws in a way, that characters are missing.<br>
If we rephrase this, we have a string <code>correct</code> and a string <code>flawed</code> with this properties:<br>
For all characters <code>char</code> in <code>flawed</code></p>

<ul>
<li><code>char</code> is included in <code>correct</code> and <code>count(char)</code> in <code>flawed</code> is smaller or equal to <code>count(char)</code> in <code>correct</code> ("contained").</li>
<li><code>index(char)</code> in <code>flawed</code> is smaller or equal to <code>index(char)</code> in <code>correct</code> ("ordered").</li>
</ul>

<p>We use this properties to base our algorithm.  </p>

<p>Trivial version:<br>
For every flawed string, take every char, look if it is inside any correct string, if yes, remove char from correct string and continue with next char. If we found a correct string, which includes all chars from flawed string, we have a good candidate.<br>
An implementation could be:</p>

<pre><code>public static boolean isCharArrayIncludedInString(final char[] arrayChar, final String string) {
    final char[] targetArray = string.toCharArray();
    for (final char arrayCharItem : arrayChar) {
        boolean isFound = false;
        for (int i = 0; i &lt; targetArray.length; ++i) { //if we have large targetArrays, we could improve this by a linkedlist and removing the entries
            if (arrayCharItem == targetArray[i]) {
                targetArray[i] = 0;
                isFound = true;
                break;
            }
        }
        if (!isFound)
            return false;
    }
    return true;
}

//if we use the ordered property, too:

public static boolean isCharArrayIncludedInString(final char[] arrayChar, final String string) {
    final char[] targetArray = string.toCharArray();
    int innerIndex = 0;
    for (final char arrayCharItem : arrayChar) {
        boolean isFound = false;
        while (innerIndex &lt; targetArray.length) {
            if (arrayCharItem == targetArray[innerIndex++]) { // here we use the "ordered" property
                isFound = true;
                break;
            }
        }
        if (!isFound)
            return false;
    }
    return true;
}
// hint: i choosed isCharArrayIncludedInString instad of isStringIncludedInString, because the second typically assumes contiguous appearance
</code></pre>

<p>We can improve this, if you know that at least x of the first characters must be the same. Then do a startsWith for the substring.<br>
The algorithm has a worst time complexity of (n<em>m</em>len(longest string))</p>

<p>The not trivial solution:  </p>

<p>Create a modified trie data structure. If we did not found a character for a node, look for all subnodes. The complexity is hard to guess, but in the average case should be better than the trivial version.</p>

<hr>

<h2>Second part, Code quality</h2>

<p>Some parts are already pointed out, I try to avoid them.</p>

<pre><code>public boolean updateItems2(LinkedList&lt;String&gt; arg)
</code></pre>

<p>Bad name for method (what is the meaning of the 2? What is the difference between 1 and 2?), expected result from a update method with return boolean is the success state, which is not the case(?). Rename it perhaps to printAllMatchingDescriptions or something like that. getAllMatchingDescriptions if you want to return it later.</p>

<pre><code>public boolean updateItems2(LinkedList&lt;String&gt; arg)
</code></pre>

<p>Bad name for argument. Clearly, this is an argument, and arg could be an abbreviation for this. listDescriptions could be a better name. And use <code>List</code> if there is no specific need for LinkedList:</p>

<pre><code>public boolean printAllMatchingDescriptions(List&lt;String&gt; listDescriptions)
</code></pre>

<hr>

<pre><code> // Create a list of items with the CL descriptions
LinkedList&lt;Item&gt; clItems = new LinkedList&lt;Item&gt;();
</code></pre>

<p>Yes, the comment describes the next line. But it has no additional value as already written by the source code. You should avoid such comments.</p>

<hr>

<pre><code>LinkedList&lt;Item&gt; clItems = new LinkedList&lt;Item&gt;();
</code></pre>

<p>Again, i would avoid abbreviations and would name it listItems.</p>

<pre><code>for(String a : arg)
{
    Item newCL = new Item();
    newCL.setDesc(a);
    clItems.add(newCL);
}
</code></pre>

<p>It looks like the description is a good candidate for the constructor.<br>
And again, try to avoid abbreviations.<br>
It could be:</p>

<pre><code>    for (final String listDescriptionsItem : listDescriptions)
        listItems.add(new Item(listDescriptionsItem));
</code></pre>

<hr>

<pre><code>System.out.println("Update Items got " + clItems.size() + " items");
</code></pre>

<p>A logger could be nice. But ok, for quick &amp; dirty debugging in small programs, println could be fine.</p>

<hr>

<pre><code>// Try to set one item in the inventory to active for each clItem
int setNum = 1;
for(Item cl : clItems)
    for(Item cur : theApp.TheMasterList.Inventory)
        if(cur.getActv() != "YES" &amp;&amp; sameItemDesc(cl.getDesc(), cur.getDesc()))
        {
            System.out.println("Set#:" + setNum + "\nInvItem:" + cur.getDesc() + "\nCLItem:" + cl.getDesc());
            cl.setActv("YES");
            cur.setActv("YES");
            setNum++;
            break;
        }
</code></pre>

<p><code>int setNum = 1;</code>why does it start with 1?  From the code, it looks like you are counting the number of activated items. At least, this is what is happening. From the println it looks like this should be a index. If the second is the case, you should modify the code.<br>
Use brackets for statements with more than one line. This is confusing.<br>
Again, abbreviations.<br>
<code>theApp.TheMasterList.Inventory</code> this does not look good. But I can not make any suggestions, because code is unknown. Try to avoid static access for dynamic parts.<br>
The string "YES"/"NO" thing was already mentioned. Names for better method names could be <code>isActivated()</code> and <code>activate()</code>.<br>
You could call the <code>sameItemDesc</code> with two items, rather than the description.<br>
<code>cur.setActv("YES");</code> this does not make sense. You are only inside the statement, if this is already true. 
It could be:</p>

<pre><code>    for (final Item listItemsItem : listItems) {
        for (final Item inventoryItem : Inventory) {
            if (inventoryItem.isActivated())
                continue;
            if (!isFirstItemSameAsSecondItem(listItemsItem, inventoryItem))
                continue;
            System.out.println("Set#:" + numberOfActivatedItems + "\nInvItem:" + inventoryItem.getDescription() + "\nCLItem:"
                    + listItemsItem.getDescription());
            listItemsItem.activate();
            numberOfActivatedItems++;
            break;
        }
    }
</code></pre>

<hr>

<pre><code>// Print out the items that were not set
int notSet = 0;
for(Item cl : clItems)
    if(cl.getActv() != "YES")
        {System.out.println("Not Set:" + cl.getDesc());notSet++;}
</code></pre>

<p>You know it already, abbreviations. And unexpected brackets. And this method is perhaps not necessary.
Because the number of deactivated items is size of the list (all items) minus activated:</p>

<pre><code>final int numberOfDeactivatedItems = listItems.size() - numberOfActivatedItems;
</code></pre>

<hr>

<pre><code>// See how many we set
int actv = 0;
for(Item a : theApp.TheMasterList.Inventory)
    if(a.getActv() == "YES")
        actv++;
System.out.println("UpdateItems set:" + actv + " notset:" + notSet);
</code></pre>

<p>Why do you calculate this a second time?</p>

<hr>

<p>The <code>sameItemDesc</code> could be changed too, but I will spare this part because I do not know if it is necessary.</p>

<hr>

<p>Overall, we could have something like this:</p>

<pre><code>public void printAllMatchingDescriptions(final List&lt;String&gt; listDescriptions) {
    final List&lt;Item&gt; listItems = new LinkedList&lt;Item&gt;();
    for (final String listDescriptionsItem : listDescriptions)
        listItems.add(new Item(listDescriptionsItem));
    System.out.println("Update Items got " + listItems.size() + " items");

    // Plan: Check if any of the listDescriptions is contained in any state in the overall list
    int numberOfActivatedItems = 0;
    for (final Item listItemsItem : listItems) {
        for (final Item inventoryItem : Inventory) {
            if (inventoryItem.isActivated()) // if you have a lot of activated ones, it could be better to create a new list with only deactivated entries
                continue;
            if (!isFirstItemSameAsSecondItem(listItemsItem, inventoryItem))
                continue;
            System.out.println("Set#:" + numberOfActivatedItems + "\nInvItem:" + inventoryItem.getDescription() + "\nCLItem:"
                    + listItemsItem.getDescription());
            listItemsItem.activate();
            numberOfActivatedItems++;
            break;
        }
    }

    final int numberOfDeactivatedItems = listItems.size() - numberOfActivatedItems;

    System.out.println("Items activated:" + numberOfActivatedItems + ", deactivated:" + numberOfDeactivatedItems);

    showUserDif(listItems); // I do not know what is happening here. At least abbreviations again
}

public static boolean isFirstItemSameAsSecondItem(final Item item, final Item other) {
    return isCharArrayIncludedInString(item.getDescription().toCharArray(), other.getDescription());
}

public static boolean isCharArrayIncludedInString(final char[] arrayChar, final String string) {
    final char[] targetArray = string.toCharArray();
    int innerIndex = 0;
    for (final char arrayCharItem : arrayChar) {
        boolean isFound = false;
        while (innerIndex &lt; targetArray.length) {
            if (arrayCharItem == targetArray[innerIndex++]) { // here we use the "ordered" property
                isFound = true;
                break;
            }
        }
        if (!isFound)
            return false;
    }
    return true;
}
</code></pre>
    </div>