<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style</h2>

<p>Before diving in the actual code, some general style considerations first. Python comes with an official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide</a>. The most relevant parts for your code would be the sections on <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">how to structure code using blank lines where appropriate</a> (two blank lines between separate functions and classes, only single blank line within functions and classes) and the recommendations on <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">how to document your functions</a> using documentation strings <code>"""enclosed in triple quotes"""</code>. The code examples in the following answer will demonstrate both of these style elements.</p>

<hr>

<p><strong>Note:</strong> For convenience, some of the code below uses <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">f-strings</a>, which is a new Python feature introduced with Python 3.6. If you're not yet there, it should be obvious how to transform those pieces to use <code>.format(...)</code> instead.</p>

<hr>

<h2>Don't repeat yourself</h2>

<p>Your game has a lot of duplicate text, e.g. where you start to describe the possible changes in the relationship with the other factions. I would propose to collect those templates in a "dumb" class, or maybe a dictionary if you don't like classes, and then put in the factions as you need them. This could be done like so:</p>

<pre class="lang-py prettyprint-override"><code>class Factions:
    """Class to represent the factions found in the game"""

    ARMY = "ARMY &amp; GOVERNMENT"
    CIVILIANS = "CIVILIANS"
    EVERYBODY = "EVERYBODY"


class RelationshipChanges:
    """Holds templates to decribe changes in relationships"""

    HEROISM = '{} looks at you as a hero.'
    GREAT_INCREASE = 'This greatly improves your relationship with {}.'
    INCREASE = 'This improves your relationship with {}.'
    SLIGHT_INCREASE = 'This slightly improves your relationship with {}.'

    SLIGHT_DECREASE = 'This slightly decreases your relationship with {}.'
    DECREASE = 'This worsens your relationship with {}.'
    GREAT_DECREASE = 'This greatly worsens your relationship with {}.'
    TREASON = '{} wants you dead.'
</code></pre>

<p>and then do <code>RelationshipChanges.GREAT_INCREASE.format(Factions.CIVILIANS)</code> instead of defining <code>civil_great_increase</code> and all of its companions. The code would generate </p>

<pre class="lang-none prettyprint-override"><code>This greatly improves your relationship with CIVILIANS.
</code></pre>

<p>It might be also a good idea to define a function as a shorthand for this, since it's not quite a pleasure to type.</p>

<pre><code>def change_relation(faction, type_of_change):
    message_template = getattr(RelationshipChanges, type_of_change.upper())
    return message_template.format(getattr(Factions, faction.upper()))
</code></pre>

<p>With this, <code>change_relation("civilians", "great_increase")</code> would generate the same output as previously seen. The function uses Python's built-in <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr(...)</code></a> function to programmatically access members of the class by their name. As an example, <code>getattr(Factions, "ARMY")</code> would be the same as <code>Factions.ARMY</code>. Neat, isn't it? </p>

<p>If you were even more keen on saving some typing, this function would easily allow to add a "translation" <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow noreferrer">dictionaries</a> as an intermediate. These dict could then map <code>'+++'</code> to <code>RelationshipChanges.GREAT_INCREASE</code> or <code>'civ'</code> to <code>Factions.CIVILIANS</code> and shorten the previous function call to <code>change_relation('civ', '+++')</code>. <strike>I will leave that as an exercise to you.</strike> <em>See the updated version below.</em></p>

<p>The relationship levels themselves could be handled similarly.</p>

<pre><code>class RelationshipLevels:
    """Class to represent the player's relationship to other factions"""

    VENGEFUL = "VENGEFUL"
    HATEFUL = "HATEFUL"
    DISAPPOINTED = "DISAPPOINTED"
    CONFLICTED = "CONFLICTED/NEUTRAL"
    SATISFIED = "SATISFIED"
    HAPPY = "HAPPY"
    PROPEROUS = "PROPEROUS"

    ALL = [VENGEFUL, HATEFUL, DISAPPOINTED, CONFLICTED, SATISFIED, HAPPY, PROSPEROUS]
    #^--- this will become handy in a moment
</code></pre>

<p><code>army_left</code> and <code>civil_left</code> are another instance where you tend to repeat the same pieces of code/text over and over again. If you think about those two for a moment, the common pattern will become clear: For a given faction and its relationship score, you want to determine the relationship level. Therefor, you essentially check if the score is below a certain treshold, format the message and print it. A way to generalize that idea would be as follows:</p>

<pre><code>def get_final_standing(relation_score, thresholds):
    """Determine how the faction thinks about the player at the end"""
    for threshold, feeling in zip(thresholds, RelationshipLevels.ALL):
        if relation_score &lt;= threshold:
            return feeling

    return RelationshipLevels.ALL[-1]
</code></pre>

<p>The function uses <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip(...)</code></a> two iterate over two sequences in parallel, and stops the loop (<code>break</code>) if it has found the appropriate relationship level. It becomes a little bit tricky if you don't want to put an upper limit to the threshold so I decided to implement this in a way that whenever the score is greater than the last threshold you gave, the most positive (i.e. rightmost) level will be returned.
To realize the same funcationality as <code>army_left</code> formerly implemented you would then do</p>

<pre><code>final_standing = get_final_standing(relationships[Factions.CIVILIANS], (-7, -4, -2, 2, 5, 7))
print(f'You left the {Factions.ARMY} feeling {final_standing}.')
</code></pre>

<p>I leave <code>civil_left</code> as an exercise to you.</p>

<p>All the score increments/decrements should also be bundled somehow. At the moment you have <code>slight</code>, <code>slightly</code>, and <code>relationships[5]</code> to express a slight change in the score in either direction. The same pattern is more or less to be found for normal and major changes, as well as for hero/traitor. That's madness!</p>

<p>One way would be to put them into a class such as we did before with the other constant values. A dict might also be a viable solution. But wait! We have already started somethind related to those changes, haven't we? Well observed. Time to have another look at <code>RelationshipChanges</code>. At the moment this class simply holds the template message for each of the changes. With just one more level of "nesting", we can add the score modifiers as well.</p>

<pre class="lang-py prettyprint-override"><code>ULTIMATE_SCORE_CHANGE = 15
MAJOR_SCORE_CHANGE = 2
NORMAL_SCORE_CHANGE = 1
SLIGHT_SCORE_CHANGE = 0.5

class RelationshipChanges:
    """Holds templates and modifiers to decribe changes in the relationships"""

    HEORISM = {
        'message': '{} looks at you as a hero.',
        'modifier': ULTIMATE_SCORE_CHANGE
    }
    GREAT_INCREASE = {
        'message': 'This greatly improves your relationship with {}.',
        'modifier': MAJOR_SCORE_CHANGE
    }
    INCREASE = {
        'message': 'This improves your relationship with {}.',
        'modifier': NORMAL_SCORE_CHANGE
    }
    SLIGHT_INCREASE = {
        'message': 'This slightly improves your relationship with {}.',
        'modifier': SLIGHT_SCORE_CHANGE
    }

    SLIGHT_DECREASE = {
        'message': 'This slightly decreases your relationship with {}.',
        'modifier': -SLIGHT_SCORE_CHANGE
    }
    DECREASE = {
        'message': 'This worsens your relationship with {}.',
        'modifier': -NORMAL_SCORE_CHANGE
    }
    GREAT_DECREASE = {
        'message': 'This greatly worsens your relationship with {}.',
        'modifier': -MAJOR_SCORE_CHANGE
    }
    TREASON = {
        'message': '{} wants you dead.',
        'modifier': -ULTIMATE_SCORE_CHANGE
    }
</code></pre>

<p>Now that those messages and the actual changes to the score are linked more closely, it would be a great moment to remove those change messages from the static game text. A benefit of this would be that if you ever decided to change the effects of an action, you would only have to do this in on place, namely on of the event functions, and not there and somewhere else hidden in all the storyline text. Since those message are IIRC merely appended to the storyline text, the output should not change significantly. Of course the implementation of <code>change_relation</code> has to be adapted to fit these changes, and since all that stops <code>change_relation</code> from actually updating the relationship score is not knowing about <code>relationships</code> it is easy to adapt it to do more repetive work for us:</p>

<pre><code>def change_relation(relationships, faction, type_of_change):
    """Documentation omitted for brevity"""
    type_translation = {
        "---": "great_decrease", "--": "decrease", "-": "slight_decrease",
        "+++": "great_increase", "++": "increase", "+": "slight_increase"
    }
    if type_of_change in type_translation:
        # only apply the translation if it's own of ---/--/.../+++
        type_of_change = type_translation[type_of_change]

    change_descr = getattr(RelationshipChanges, type_of_change.upper())
    faction_name = getattr(Factions, faction.upper())
    relationships[faction_name] += change_descr['modifier']

    return change_descr['message'].format(faction_name)
</code></pre>

<p>You can now use something like <code>print(change_relation(relationships, "civilians", "---"))</code> to adapt the game state and tell the user about the consequences of his/her decision. (<strong>Note:</strong> The code above builds upon a change to <code>relationships</code> that will be explained in the following section.)</p>

<h2>Make it harder to be wrong</h2>

<p>Ah, that damn army ... where was their score in <code>relationships</code> again? Was it the first or the second position? Maybe the third?</p>

<p>To avoid situations like this, I would recommend to use a dictionary. This leaves you with something like <code>relationships = {"army": 0, "civil": 0}</code> or even <code>relationships = {Factions.ARMY: 0, Factions.CIVILIANS: 0}</code>. Using <code>relationships[Factions.ARMY]</code> leaves absolutely no doubt what you're trying to do. It will also make it waaaay easier to spot copy and paste errors.</p>

<h2>Avoid globals</h2>

<p>Global variables are best avoided, since it's harder to see which parts of the code modify them, which leads to all kind of problems. The core object of your game would be <code>relationships</code> and it would be easy to transform all your game functions to accept it as an argument instead of relying on it to be present on a global scope.
The most common approach would be to somehow define a main function which does all the needed initialization stuff, like displaying the synopsis or initializing <code>relationships</code>. <code>relationships</code> is then passed to <code>story</code> which again passes it onwards depending on how the player chooses his actions.</p>

<p>All the game text should wrightfully stay in global variables. For them I would recommend to <code>CAPITALIZE_THEIR_NAMES</code> to make it clear that they are supposed to be used/seen as constant values.</p>

<h2>User input handling</h2>

<p>At the moment the user input handling is not very robust. Once you enter an invalid command, e.g. by smashing the enter key to long, the program bails out and you have to start all over. This can be very annoying. A better approach would be to ask for invalid input several times and only bail out if a termination character like <code>q</code>/<code>Q</code> is entered or the user did not provide a valid input six times in a row. An implementation of this approach might look like:</p>

<pre class="lang-py prettyprint-override"><code>def prompt_for_input(prompt, valid_inputs, max_tries=6):
    print(prompt)
    for _ in range(max_tries):
        user_input = input('&gt; ').upper()
        if user_input in valid_inputs:
            return user_input
        if user_input == 'Q':
            break
        # the input was not valid, show the roadblock
        roadblock()
    # Either Q or excessive retrying brought us here
    print('Seems like you are not willing to play. Goodbye!')
    sys.exit(0)
</code></pre>

<h2>Mini demo</h2>

<p>The answer contains some a lof of proposals that change the code drastically. Since you requested to see more code to better understand it and the answer is already quite long, I decided to implement a reduced version of your game that implements those proposed changes and upload it into a <a href="https://gist.github.com/alexvorndran/48206dae7d6ba325e4c55f8281da0900" rel="nofollow noreferrer">gist</a>. The gist is hidden from search engines but accessible to everyone with the link.</p>
    </div>