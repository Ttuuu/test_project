<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, what we want to do? Add every second element to the new list, starting with the first.<br>
So a simplified description could be:</p>

<pre><code>function evenList(list)
  if list is empty or has only 1 element
    return list
  return new list(first element of list, evenList(all elements from the third to the end))
</code></pre>

<p>translate to algorithm in Java:</p>

<pre><code>public static List&lt;Integer&gt; evenList(final List&lt;Integer&gt; list) {
    if (list.size() &lt;= 1)
        return list;

    final List&lt;Integer&gt; newList = new ArrayList&lt;&gt;(Arrays.asList(list.get(0)));
    newList.addAll(evenList(list.subList(2, list.size())));
    return newList;
}
</code></pre>

<p>This version has (after compilation) the exact same signature. If it must be the same before compilation, we could do this:</p>

<pre><code>public static ArrayList&lt;Integer&gt; evenList2(final ArrayList&lt;Integer&gt; list) {
    if (list.size() &lt;= 1)
        return list;

    final ArrayList&lt;Integer&gt; newList = new ArrayList&lt;&gt;(Arrays.asList(list.get(0)));
    newList.addAll(evenList2(new ArrayList&lt;&gt;(list.subList(2, list.size()))));
    return newList;
}
</code></pre>

<p>I would suggest to use the first version.</p>

<hr>

<p>About your code:</p>

<pre><code>public static ArrayList&lt;Integer&gt; evenList (ArrayList&lt;Integer&gt; tList) {
</code></pre>

<p>The name is not that helpful. I would suggest <code>getNewListFromEvenIndices</code>. But ok, you are forced to use this name. You could propose it at least.</p>

<hr>

<pre><code>ArrayList&lt;Integer&gt; newList = ListMethods.deepClone(tList);
</code></pre>

<p>Could be:</p>

<pre><code>ArrayList&lt;Integer&gt; newList = new ArrayList&lt;Integer&gt;(tList);
</code></pre>

<hr>

<pre><code>int tempStorage = newList.size();
</code></pre>

<p>You could name it <code>size</code> or <code>newListSize</code>, this would be a more clear name.
(As we see later, this variable is not needed)</p>

<hr>

<pre><code>if (newList.size() &lt;= 0)
    return newList;
</code></pre>

<p>Either use your variable or even better, use <code>newList.isEmpty()</code> to make the meaning clear.</p>

<hr>

<pre><code>else     
{  
</code></pre>

<p>You do not need to specify an else clause here. Save braces, save intendation.</p>

<hr>

<pre><code>    if (newList.size()%2==0)                                    
</code></pre>

<p>Even if it is quite clear, I would suggest in such case to introduce a private method which is called <code>isEven</code>. Because it is not clear for all readers.
And if we make it this way, we could also switch to a logical and:</p>

<pre><code>private boolean isEven(int number)
{
    return (number &amp; 1) == 0;
}
</code></pre>

<hr>

<pre><code>        tempStorage = newList.remove(newList.size()-2);
</code></pre>

<p>This does not make any sense. Before, <code>tempStorage</code> was the size, now it is the value of a list element. This are 2 completely different meanings.<br>
You should not do such things. (And It will obviously fail for the example [0, 0])</p>

<hr>

<pre><code>    newList.remove(newList.size()-1);                           
    newList = ListMethods.evenList(newList);                    
    if (tempStorage!=0)
        newList.add(tempStorage);        
</code></pre>

<p>I am not sure about the plan behind this. You want to remove the last element, which should have an uneven index here?
After this, you want to add the element at the probably even index?
You can not do it in this way then, you have to introduce for example some boolean variable which could be named <code>elementFromSecondLastIndexMustBeAdded</code> and add it only if it is true.<br>
And you do not need to save it temporally, you could just access the original list <code>tList</code>.</p>

<hr>

<p>So if we try to keep your way, we could have something like:</p>

<pre><code>public static ArrayList&lt;Integer&gt; evenList(final ArrayList&lt;Integer&gt; tList) {
    // plan: if list is empty, return. If not look at the last indices.
    // Remove the uneven one, add the even one to a new list.
    // Do this in recursion until we do not have any last indices.
    if (tList.isEmpty())
        return newList;
    ArrayList&lt;Integer&gt; newList = new ArrayList&lt;&gt;(tList);
    boolean elementFromSecondLastIndexMustBeAdded = false;
    if (isEven(newList.size())) { // if size is even, the last is uneven, the second last is even
        elementFromSecondLastIndexMustBeAdded = true;
        newList.remove(newList.size() - 2);
    }
    newList.remove(newList.size() - 1);
    newList = ListMethods.evenList(newList);
    if (elementFromSecondLastIndexMustBeAdded)
        newList.add(tList.get(tList.size() - 2));
    return newList;
}

private static boolean isEven(final int number) {
    return (number &amp; 1) == 0;
}
</code></pre>

<p>The method is still rather complex and needs some comments, because your recursion goes over the end, which is a bit unusual if both cases are possible.</p>

<hr>

<p>And just because I do not like such question were seomone is forced to make bad solutions:</p>

<pre><code>public static List&lt;Integer&gt; evenList(final List&lt;Integer&gt; list) {
    final List&lt;Integer&gt; newList = new ArrayList&lt;&gt;();
    for (int i = 0; i &lt; list.size(); i += 2)
        newList.add(list.get(i));
    return newList;
}
</code></pre>

<p>This is valid according to the method signature.</p>

<hr>

<p>If you really have to add a deepClone method, add one with an empty body. Hint: If we are exact, this is not a clone method. For int, yes. For Integer, no.</p>
    </div>