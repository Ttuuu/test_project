<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><code>noexcept</code> on the explicitly defaulted default-ctor and copy-ctor is already implied.</li>
<li>Copy-ctor and dtor would be implicitly declared if left out.</li>
<li><p><code>.allocate()</code> (and also <code>.deallocate()</code>, but that doesn't matter) fails to check <code>n * sizeof(T)</code> for wrap-around.<br>
Possible Solutions:</p>

<ol>
<li><p>Start with a check. This has the advantage of simplicity and broadest conformity.</p>

<pre><code>if (n &gt; std::size_t(-1) / sizeof(T))
    throw std::bad_array_new_length();
</code></pre></li>
<li><p>Use saturating math, and rely on <code>::operator new</code> being unable to allocate <code>std::size_t(-1)</code> bytes on (nearly?) all implementations. This is generally more efficient for the common case.</p>

<pre><code>auto bytes = n &gt; std::size_t(-1) / sizeof(T) ? std::size_t(-1) : n * sizeof(T);
</code></pre></li>
</ol></li>
<li><p>Because the casts are so simple and obviously right, I would eschew the verbosity of <code>static_cast</code>. Guidelines may prohibit it though...</p></li>
<li><p>I suggest importing the following additional refinements from C++20:</p>

<ol>
<li>Mark the templated ctor <code>constexpr</code>.</li>
<li>Mark <code>.allocate()</code>'s return-value <code>[[nodiscard]]</code>.</li>
<li>Mark both <code>operator==</code> and <code>operator!=</code> <code>constexpr</code>.</li>
</ol></li>
</ol>
    </div>