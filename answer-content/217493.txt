<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a comment on your Python solution (I don't know anything about Scala).</p>

<p>You don't need to iterate over chunks of your file unless you want to do parallel processing. However, since there might be a close event in a different block from an opening event, this process is not so easy to parallelize (you would have to keep track of dangling users in both directions, which you don't do as far as I can tell).</p>

<p>Also, the restriction that the aggregate does not fit into memory is...unrealistic IMO. You would have to have more users than there are people in the world. Anyways, your code does not respect this constraint either, since <code>avgTimeSpentDict</code> contains all users and will therefore not fit into memory. So I'm going to ignore this part.</p>

<p>Instead, just iterate over the file normally, with a <code>for</code> loop. This does not read the whole file into memory. Update a running mean with the new value whenever you find a matching event for each user.</p>

<p>At the same time keep a dictionary of users that are <code>open</code> to look out for a matching <code>close</code> event. If you have a <code>close</code> event without an <code>open</code>, it is a broken one and we can ignore it because you said it is guaranteed that the times are sorted (and time travel has not been invented yet, AFAIK). Or do something else with it. Same goes for an <code>open</code> event after a previous <code>open</code>, without any intervening <code>close</code>. Here I just added a <code>print</code> in those cases.</p>

<pre class="lang-py prettyprint-override"><code>import sys
from collections import defaultdict

def update_mean(count, mean, new_value):
    count += 1.  # float so it also works in Python 2
    mean += (new_value - mean) / count
    return count, mean

def average_timeout(file_name):    
    open_users = {}
    time_spent = defaultdict(lambda: (0., 0.))

    with open(file_name) as f:
        for line in f:
            print(line.strip())
            try:
                user_id, timestamp, event = line.strip().split(",")
            except ValueError:
                print(f"misformed line: {line!r}")
                continue

            if event == "open":
                if user_id in open_users:
                    print("open with prior open, missed a close")
                open_users[user_id] = int(timestamp)
            elif event == "close":
                if user_id not in open_users:
                    print("close without open")
                else:
                    diff = int(timestamp) - open_users.pop(user_id)
                    time_spent[user_id] = update_mean(*time_spent[user_id], diff)
                    print(f"close with prior open, time difference {diff}")
            else:
                print(f"Unknown event: {event}")

    print(f"{len(open_users)} users left without close event")
    return time_spent

if __name__ == "__main__":
    time_spent = average_timeout(sys.argv[1])
    for user, (_, mean) in time_spent.items():
        print(f"{user} average timeout: {mean}")
</code></pre>

<p>In production you will obviously want to either remove most of the <code>print</code>s or at least make them <code>logging.debug</code> calls.</p>

<p>This can still run out of memory if the average length between an <code>open</code> and a <code>close</code> event contains more <code>open</code> events by different users than there is memory. Or if all events are broken and lack a <code>close</code>.</p>

<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>, which programmers are encouraged to follow. It recommends using <code>lower_case</code> for functions and variables and putting a space after each comma in an argument list.</p>

<p><code>fileObj.close</code> does not actually close the file if you don't call it, <code>fileObj.close()</code>. But even better is to use <code>with</code> which will take care of closing the file for you, even in the event of an exception occurring somewhere.</p>

<p>You should use Python 3. <a href="https://pythonclock.org/" rel="noreferrer">Python 2 will no longer be supported in less than a year</a>.</p>

<p>You can use <code>x in d</code> to check if some value <code>x</code> is in a dictionary <code>d</code>. No need to do <code>x in d.keys()</code>. In Python 2 this distinction is even more important since <code>x in d</code> is <span class="math-container">\$\mathcal{O}(1)\$</span>, while <code>x in d.keys()</code> is <span class="math-container">\$\mathcal{O}(n)\$</span> (since it is a <code>list</code>).</p>
    </div>