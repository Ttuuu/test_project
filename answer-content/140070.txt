<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The solutions are nowhere near equivalent.</p>

<p>You're using the remainder operator <code>%</code>, when the whole point - I assume - is to <em>not</em> do that (for the purposes of the exercise - in any other case, definitely use <code>%</code>). </p>

<p>The official solution only knows how to answer true/false for the numbers 0 and 1. For any other input, it uses recursion to reduce the input all the way to either 0 or 1. It also flips negative numbers, in order to get those to 0 or 1*.</p>

<p>Your solution answers immediately for any positive, even number, without recursion. So <em>you're sidestepping the whole exercise</em>. And your code ends up making little sense, since, if you can answer <code>true</code> immediately, it follows that you can answer <code>false</code> immediately too. Those are the only possible return values, so if it's not <code>true</code> it logically <em>must</em> be <code>false</code>. Since you're not recursing for the first case, why would you bother to recurse for the second one?</p>

<p>In addition, your code treats all negative numbers as odd, unlike the official solution. And math in general.</p>

<p>To put all this another way: The official solution approaches the problem with this knowledge:</p>

<ul>
<li>0 is even</li>
<li>1 is odd</li>
<li><em>We don't know anything about the parity of other numbers</em></li>
<li>But any number can be reduced to either 0 or 1 by repeatedly subtracting 2 and/or flipping the sign if the number's negative.</li>
</ul>

<p>Hence the need to recurse for numbers that are not 0 or 1.</p>

<p>Your approach says:</p>

<ul>
<li>Numbers that can be cleanly divided by 2 are even (which is cheating)</li>
<li>Negative numbers are odd (which is wrong)</li>
<li>Any other number becomes negative if you keep subtracting 2</li>
</ul>

<p>From the last point follows that any number that is not cleanly divisible by 2 is automatically an odd number. But you code doesn't make this leap, and instead uses (pointless) recursion.</p>

<p>Neither solution is by any means a <em>good</em> solution for determining the parity of a number(!), but the point (I assume, without knowing the context of the problem description) is to use recursion to drill down to something that can be answered categorically for specific numbers, i.e. 0 is even, 1 is odd. Your solution answers for <em>sets</em> of numbers, i.e positive even numbers and negative numbers.</p>

<p><sub>*) For all of this we're assuming the input will always be <em>a whole number</em>, and not something else. Yes, you can do input validation, but that's beyond the scope of the exercise and this review</sub></p>
    </div>