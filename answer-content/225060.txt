<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Separation of Concerns</h2>

<blockquote>
  <p><em>I am thinking about using a Repository but not sure it's going to add much value.</em></p>
</blockquote>

<p>The problem with letting the handler interact to the database layer directly is that it is handling both service layer (<code>GetUserQuery</code>, <code>ValidatedResponse</code>) and data layer (<code>SqlConnection</code>, <code>SqlConnection</code>) contracts and APIs. Without separating these concepts, both layers depend on eachother. In this architecture, <code>User</code> is both a service as data layer contract. In more complex environments, you would have a <code>UserDto</code> (service layer) and <code>UserRecord</code> (data layer). Since we are querying, the intermediate business entity is usually omitted.</p>

<blockquote>
<pre><code>public async Task&lt;ValidatedResponse&gt; Handle(
    GetUserQuery request, CancellationToken cancellationToken)
{
    using (IDbConnection conn = new SqlConnection(config.ConnectionString))
    {
        // .. code left out for brevity
    }
}
</code></pre>
</blockquote>

<p>I would refactor to keep <code>GetUserQueryHandler</code> in the service layer and create <code>UserRepository</code> in the data layer. Its interface <code>IUserRepository</code> should be stored at the business layer.</p>
    </div>