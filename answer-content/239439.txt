<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's a lot of code to review.  I've given it a cursory review and have a few comments, but by no means is it an exhaustive review.</p>

<p>Overall, I like your style.  Nice indentation, uses of braces, class access modifiers, IEnumerable(s), and variable names not being abbreviated.  Most of the times, but not all, your names are clear.</p>

<p>Other things stand out.  Unless an enum uses flags, naming should be singular, not plural.  See <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/enum" rel="nofollow noreferrer">Enum Design</a> for more.  Doing so could cause some confusion with an enum now renamed to Click or Action.  Perhaps you may rename them to CellClick and CellAction.</p>

<p>I'm not a fan of the class name <code>Squares</code>.  I personally would have chosen <code>Cell</code>.  This is a matter of taste.  However, if you keep it as square, then that class name should also be singular <code>Square</code> since the class describes a single square and not a collection.</p>

<p>I can't help but wonder if the Square properties IsMine, IsFlagged, and IsUncovered could not be condensed into a State.  Maybe not all 3 could be used, but 2 perhaps could determine a State.</p>

<p>I see no reason for the <code>ElapsedTime</code> class.  The <code>TimeInHourFormat</code> could become an extension method or just a method placed inside the UI form.  If it were an extension method, there could be 2 overloads.  One that accepts <code>(this Stopwatch stopwatch)</code> and the other that has <code>(this TimeSpan elapsedTime)</code>.  The main logic would be to the <code>TimeSpan</code>.</p>

<p>That's about all I can cover before getting to work.  Overall it looks very good, but there is definitely room for improvement.</p>

<p><strong>UPDATE WITH EXTENSIONS</strong></p>

<p>I had some free time to whip out sample extensions.  Note that <code>ToString("00")</code> takes care of the nit-picky details in a lot less code.</p>

<pre><code>public static class StopwatchExtensions
{
    public static string ToHoursMinutesSeconds(this Stopwatch stopwatch) =&gt; ToHoursMinutesSeconds(stopwatch.Elapsed);

    public static string ToHoursMinutesSeconds(this TimeSpan elapsed) 
    {
        // You really do not need secondsText and minutesText.  
        // You could use each respective right-hand expression in the return statement below.
        var secondsText = elapsed.Seconds.ToString("00");
        var minutesText = elapsed.Minutes.ToString("00");
        var hours = (long)Math.Truncate(elapsed.TotalHours);
        var hoursText = (hours &gt; 0) ? hours.ToString("00") + ":" : "";
        return $"{hoursText}{minutesText}:{secondsText}";
    }
}
</code></pre>

<p>Don't be thrown off by "00" for hours.  It will display a minimum of 2 digits, but if hours is &gt; 99, it will display all the digits.  You are liberated from worrying about having your custom stopwatch class take care of all the mechanics of operating a stopwatch.  All you care about is formatting the elapsed time, not just for a <code>Diagnostics.Stopwatch</code> but for any <code>TimeSpan</code>.</p>
    </div>