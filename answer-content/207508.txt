<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A couple quick house-keeping issues first:</p>

<ul>
<li>Get rid of your old commented out code - it's simply adding noise.</li>
<li><p>Your indentation is inconsistent. I had to <a href="http://rubberduckvba.com/Indentation" rel="noreferrer">run this through an indenter</a> before I could tell what this section was supposed to be doing:</p>

<blockquote>
<pre><code>End With
    tabSh.Select
    s.Offset(1).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    tabSh.Sort.SortFields.Clear
    tabSh.Sort.SortFields.Add key:=s, _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortTextAsNumbers
With tabSh.Sort
</code></pre>
</blockquote></li>
<li><p>You should move your variables closer to where you're using them, and give them meaningful names instead of things like <code>s</code>, <code>lcl</code>, <code>lrw</code>, and <code>rng</code>.  <code>s</code> is basically <code>Selection</code>, so I'd get rid of that entirely (see below), but the others would be better named as something like <code>lastColumn</code>, <code>lastRow</code>, and <code>searchRange</code>. Between the meaningless identifiers, the "<code>Dim</code>-wall" at the top of the procedure, and the multiple declaration lines like the ones below, I basically gave up on trying to keep them all straight when I was reading through the procedure.</p>

<blockquote>
<pre><code>Dim arrTab(), rng As Range, i As Integer, cl As Range
Dim colIndex As Long, lrw As Integer, lcl As Integer
</code></pre>
</blockquote></li>
<li><p>Remove the bench-marking code from your procedure. It doesn't do any meaningful work, and it took me a while to realize what it was actually there for (not helped by the cryptic variable names <code>ini</code>, <code>fin</code>, and <code>tmp</code>.  If you need to benchmark code, call it from a dedicated benchmarking procedure:</p>

<pre><code>'Note that I named the parameters 'foo' and 'bar', because they mean roughly
'as much to me as 'c' and 'str' do.
Private Sub BenchmarkAddTab1(foo As Integer, bar As String)
    Dim startTime As Single
    startTime = Timer

    AddTab1 foo, bar

    Debug.Print "AddTab1 " &amp; foo &amp; ", """ &amp; bar &amp; """ took "  &amp; Timer - startTime &amp; " seconds."
End Sub
</code></pre></li>
</ul>

<hr>

<p>I would suggest starting out by reading <a href="https://stackoverflow.com/q/10714251/4088852">How to avoid using Select in Excel VBA</a> over on SO. This will probably have more of a performance impact that anything else I'm going to recommend (other than maybe the use of <code>WorksheetFunction</code>). </p>

<p>That said, if your performance is reasonable, I'd focus on the more glaring issues in your code before you even start on that.  I'd pretty much plan on re-writing most of this.</p>

<hr>

<p>Even though you get references to the worksheets that you'll be dealing with later here...</p>

<blockquote>
<pre><code>Set dbSh = Sheets("db_Out")
Set tabSh = Sheets("Tab")
</code></pre>
</blockquote>

<p>... you continually reference the <code>ActiveSheet</code>, select ranges, and use the <code>Selection</code> object.  Note that since these are basically hard-coded, you should be using the code name of the worksheets instead - it's not like they're going to change, right?</p>

<hr>

<p>This <code>With</code> block isn't really doing that much:</p>

<blockquote>
<pre><code>tabSh.Select

With tabSh
    Set s = Range(str)
    s.Select
    If s.Offset(1) = vbNullString Then GoTo continue
    s.Select
    lrw = Columns(s.Column).Find(What:="*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row 'Selection.End(xlDown).row
    lcl = Selection.End(xlToRight).Column
    s.Offset(1).Select
    .Range(Selection, Cells(lrw, lcl)).ClearContents
    s.Offset(2).Select
    .Range(Selection, Cells(lrw, lcl)).Select
    Selection.Delete Shift:=xlUp
    s.Offset(1).Select
End With
</code></pre>
</blockquote>

<p>Every single call to <code>Range</code>, <code>Columns</code>, and <code>Cells</code> within the <code>With</code> block is referring implicitly to the <code>ActiveSheet</code>.  If they're supposed to be referring to <code>tabSh</code>, you need the dereference operator (the dot - <code>.</code>) in front of them.</p>

<hr>

<p>The use of <code>Goto</code> for flow control is completely unnecessary. You can invert your <code>If</code> statement to make it clear.  I actually had to use Ctrl-F to find it, and that's a <strong><em>really</em></strong> bad sign for readability.  Just do this:</p>

<pre><code>With tabSh
    Set s = Range(str)
    s.Select
    If s.Offset(1) &lt;&gt; vbNullString Then
        s.Select
        lrw = Columns(s.Column).Find(What:="*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row 'Selection.End(xlDown).row
        lcl = Selection.End(xlToRight).Column
        s.Offset(1).Select
        .Range(Selection, Cells(lrw, lcl)).ClearContents
        s.Offset(2).Select
        .Range(Selection, Cells(lrw, lcl)).Select
        Selection.Delete Shift:=xlUp
        s.Offset(1).Select
    End If
End With
</code></pre>

<p>...and no more <code>Goto</code></p>

<hr>

<p>This line...</p>

<blockquote>
<pre><code>Set rng = Range(Selection, Cells(Columns(s.Column).Find(What:="*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row, s.Column))
'c = D_KPI2_1        'Kpi KPI2_1
For Each cl In rng.Cells
</code></pre>
</blockquote>

<p>...is dangerous because you never test the return value of the <code>Find</code> call to make sure that it isn't <code>Nothing</code>. This is just waiting for run-time errors. There are <a href="https://stackoverflow.com/search?q=%5Bvba%5D+find+error+91">literally <em>hundreds</em> of questions on SO</a> because of this oversight.</p>

<hr>

<p>The most glaring performance issue is in your main loop with code like this:</p>

<blockquote>
<pre><code>arrTab(cl.Row, 2) = WorksheetFunction.CountIfs(dbSh.Columns(c), cl.Value, dbSh.Columns(TypeTra), "STD", dbSh.Columns(V_KPI2_1), 0.9) + WorksheetFunction.CountIfs(dbSh.Columns(c), cl.Value, dbSh.Columns(TypeTra), "STD", dbSh.Columns(V_KPI2_1), 1)
If Not arrTab(cl.Row, 2) &gt; 0 Then arrTab(cl.Row, 2) = Empty
arrTab(cl.Row, 3) = WorksheetFunction.CountIfs(dbSh.Columns(c), cl.Value, dbSh.Columns(TypeTra), "STD", dbSh.Columns(V_KPI2_1), "Out of KPI")
If Not arrTab(cl.Row, 3) &gt; 0 Then arrTab(cl.Row, 3) = Empty
arrTab(cl.Row, 4) = WorksheetFunction.CountIfs(dbSh.Columns(c), cl.Value, dbSh.Columns(TypeTra), "STD", dbSh.Columns(V_KPI2_1), "Backlog")
If Not arrTab(cl.Row, 4) &gt; 0 Then arrTab(cl.Row, 4) = Empty
</code></pre>
</blockquote>

<p>Not only is <code>WorksheetFunction</code> horrendously slow, you're calling it <em>repeatedly</em> inside a tight loop.  It's hard to tell from your question description what these <code>CountIfs</code> calls are supposed to be doing, but I guarantee that tracking the manually counts in some sort of collection would destroy that in performance.  You're writing VBA, not setting up formulas on a worksheet - simple functions like this shouldn't be delegated back to the worksheet.</p>
    </div>