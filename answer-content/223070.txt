<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Readability first</h3>

<blockquote>
  <p>I've tried to condense everything to one line, but am unsure if this is the most efficient way of approaching this problem.</p>
</blockquote>

<p>Your primary goal when writing code is <strong>readability</strong> and <strong>maintainability</strong> and not squeezing everything into single lines.</p>

<hr>

<p>Can you read this?</p>

<blockquote>
<pre><code>return exception != null ? string.Format("{0}: {1}\n{2}", msgCount, exception.Message, GetExceptionMessages(exception.InnerException, ++msgCount)) : string.Empty;
</code></pre>
</blockquote>

<p>I cannot. This line is way too long even on my large monitor.</p>

<p>How about this? A little bit better, but still, the third line is too long even with string interpolation instead of <code>string.Format</code></p>

<pre><code>return
    exception is null
        ? string.Empty
        : $"{messageCount}: {exception.Message}{Environment.NewLine}{GetExceptionMessages(exception.InnerException, ++messageCount)}";
</code></pre>

<hr>

<h3>Separation</h3>

<p>We need to change the strategy because your method is doing two things at a time:</p>

<ul>
<li>it's looking for exceptions and</li>
<li>it's building a string</li>
</ul>

<p>We need to separate them by implementing an extension that will enumerate exceptions:</p>

<pre><code>public static IEnumerable&lt;Exception&gt; DescendantsAndSelf(this Exception exception)
{
    do
    {
        yield return exception;
        exception = exception.InnerException;
    } while (!(exception is null));
}
</code></pre>

<p>Then we rewrite the string building method as an extension of the first one:</p>

<pre><code>public static string StringifyMessages(this IEnumerable&lt;Exception&gt; exceptions)
{
    var messages = exceptions.Select((e, i) =&gt; $"{i + 1}: {e.Message}")
    return string.Join(Environment.NewLine, messages);
}
</code></pre>

<p>So, finally you can chain them like this:</p>

<pre><code>catch (Exception e)
{
    Console.WriteLine(e.DescendantsAndSelf().StringifyMessages());
}
</code></pre>

<hr>

<h3>Advantages</h3>

<p>This means more code now but this code is testable, modular and can be reused for other things and extensions.</p>
    </div>