<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Functionality</h2>

<p>Good job satisfying the requirements! Aside from the obvious repetition you asked about, the code seems like a good start. It uses <code>const</code> and <code>let</code> appropriately.</p>

<h2>Repetition</h2>

<p>You asked:</p>

<blockquote>
  <p><em>How can DRY principles be applied to this code?</em></p>
</blockquote>

<p>You have a good start using components  - e.g. <em>TableFields</em> but keep going with that approach: make a component for things like each field in the loop.</p>

<p>After you make a component, e.g. <code>TableField</code> (Hint: which has one table and one button in the template) And import it into <code>TableFields</code> you can replace</p>

<pre><code>&lt;div class="wrapper" v-for="(field, index) in fields" :key="index"&gt;
</code></pre>

<p>With <a href="https://vuejs.org/v2/guide/list.html#v-for-with-a-Component" rel="nofollow noreferrer">the component in the <code>v-for</code></a>:</p>

<pre><code>&lt;table-field v-for="(field, index) in fields" :key="index" :field="field"&gt;
&lt;/table-field&gt;
</code></pre>

<p>Then each instance of that component can have its own properties like the index and field name, as well as data properties like the value, the sign, whether the timer is started/stopped, etc. This would allow for the removal of all the conditional logic to check the name of the field, etc.</p>

<p>You'd have to likely move the <code>signs</code> array elsewhere - e.g. declare it as a constant in the field component, declare it as a constant property on the <code>App</code> component (and then import the App in the component), or something similar. </p>

<p>I question whether <code>randomNumbers</code> really needs to be maintained... Unless I am missing something, a field component could just generate a random number when necessary...</p>

<p>Maybe you recently read it but in case not, familiarize yourself with <a href="https://vuejs.org/v2/guide/list.html#v-for-with-a-Component" rel="nofollow noreferrer">the VueJS documentation for <strong><code>v-for</code> with a components</strong></a>.</p>

<hr>

<p>One micro-optimization I see is in the calculations method:</p>

<blockquote>
<pre><code>this.randomSign[0] === "+"
      ? (this.initialValueA += this.randomNumbers[0])
      : (this.initialValueA -= this.randomNumbers[0]);
</code></pre>
</blockquote>

<p>Instead of having the ternary statement wrap the entire line, the assignment operation could be moved out to the start of the statement:</p>

<pre><code>this.initialValueA += (this.randomSign[0] === "+"
      ?  this.randomNumbers[0])
      : -1 * this.randomNumbers[0]);
</code></pre>
    </div>