<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Since <code>letters</code> is a list of characters (1 length strings) you logistically have made <code>letters</code> a string. And so you can simplify writing it as a string rather than a list of characters.</p>

<pre class="lang-py prettyprint-override"><code>letters = "ABCDE..."
</code></pre></li>
<li><p>You can remove the need to define <code>letters</code> by using <code>string.ascii_uppercase</code>.</p></li>
<li>It's good to see some type hints. Good job!</li>
<li>I would suggest changing your function to only take in the base and the number, and return a new number, rather than <code>print</code> it.</li>
<li><p>You don't need to use <code>math.floor</code> you have a couple of alternate options:</p>

<ul>
<li>Use <code>int</code> - <code>int(div / base)</code>.</li>
<li>Use the floordiv operator - <code>div // base</code>.</li>
</ul></li>
<li><p>Rather than using <code>div % base</code> and <code>math.floor(div / base)</code> you can use <code>divmod</code> to divide and get the modulo in <em>one</em> command.</p></li>
<li><p>Rather than using <code>list.insert</code> I would recommend using <code>list.append</code> and then using <code>reversed</code>.</p>

<p>This is because inserting at the start of a list in Python has to move every other item from the beginning of the list to the end of the list. Append on the other hand only needs to append to the end of the list and it doesn't have to touch the rest of the list.</p>

<p>I also find it cleaner to just use <code>.append</code>.</p></li>
<li>The check <code>len(str(div % base)) &gt; 1</code> would be better described as <code>(div % base) &gt;= 10</code>. This is as we're working with numbers - <code>/</code>, <code>%</code>, <code>divmod</code> - and so thinking of the value as a number is easier.</li>
<li>If you change <code>letters</code> to <code>string.digits + string.ascii_uppercase</code> then you can remove the need for the <code>if</code>.</li>
<li>I suggest you change the order of your function's arguments, so it's inline with other base conversion functions. <code>num</code> then <code>base</code>.</li>
<li>It's Pythonic to have constants be <code>UPPER_SNAKE_CASE</code> and so <code>letters</code> should be all caps.</li>
</ul>

<p>There's a lot of points above, but for a beginner your code is good. Good job!</p>

<pre class="lang-py prettyprint-override"><code>import string

LETTERS = string.digits + string.ascii_uppercase


def to_base(num: int, base: int) -&gt; str:
    new_num = []
    while num != 0:
        num, mod = divmod(num, base)
        new_num.append(LETTERS[mod])
    return "".join(reversed(new_num))


while True:
    while True:
        try:
            num = int(input("Please enter a number in base 10: "))
            break
        except (NameError, ValueError):
            print("Please use numbers only")
    for base in range(2, 37):
        new_num = to_base(num, base)
        print(f"{int(new_num, base)} in base {base} is {new_num}")
</code></pre>
    </div>