<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This problem fits as a <em>temporal</em> problem that requires you to find overlaps between date ranges. SQL is optimized for such problems. But I'm sure it can be done without too much performance loss in managed code.</p>

<blockquote>
  <p>Should your algorithm take each year as its base unit or just take
  into account the relevant date time ranges?</p>
</blockquote>

<p>I would favour the latter (specially in the OP's problem), unless</p>

<ul>
<li>there are short date ranges and many overlaps</li>
<li>there are a huge amount of overlaps</li>
</ul>

<blockquote>
  <p>What can be a good algorithm for finding the hot spot?</p>
</blockquote>

<p>In chronological order, I would</p>

<ul>
<li><em>find relevant date ranges</em>: add all start and end dates in a bag, remove duplicates, order by ascending date, pair up adjacent dates as a relevant date range.</li>
<li><em>determine overlaps</em>: for each relevant date range, store the number of people that have lived in this period</li>
<li><em>take date range with highest amount of overlaps</em></li>
</ul>

<p>Note that since this is not SQL, but rather managed code, an inline algorithm can be used that only keeps track of the date range that has currently (in the algorithm) the highest amount of overlaps.</p>
    </div>