<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would convert the sign flip into a generator, created via a generator comprehension, recognizing that evens should be negative:</p>

<pre><code>#  Integers from 1-100, where evens are negative: 1, -2, 3, -4, 5...
sequence_gen = (i if i % 2 else -i for i in range(1,101))
</code></pre>

<p>Equivalent to:</p>

<pre><code>def sequence_gen():
    for i in range(1, 101):
        if bool(i % 2):  # For our purposes this is i % 2 == 1:
            yield i
        else:
            yield -i
</code></pre>

<p>Then your code becomes:</p>

<pre><code>result = 0
for index, number in enumerate(sequence_gen):
    result += number
    if index % 10 == 9:  # Note the comparison change by starting at 0
        print(result)
</code></pre>

<p>Note this is about half way to what Mathias proposed, and can be used in conjunction, the combination being:</p>

<pre><code>def sequence_sums(start, stop, step):
    result = 0
    seq_gen = (i if i % 2 else -i for i in range(start, stop + 1))
    for index, number in enumerate(seq_gen):
        result += number
        if index % step == step - 1:
            yield result
</code></pre>

<hr>

<p>You could even go one further step and make the sequence a parameter:</p>

<pre><code># iterates through a sequence, printing every step'th sum
def sequence_sums(sequence, step):
    result = 0
    for index, number in enumerate(sequence):
        result += number
        if index % step == step - 1:
            yield result
</code></pre>

<p>Called via:</p>

<pre><code>sequence = (i if i % 2 else -i for i in range(1, 101))

for sum in sequence_sums(sequence, 10):
    print(sum)
</code></pre>
    </div>