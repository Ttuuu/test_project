<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you should indent <code>main()</code> a bit better, but that's probably because of copy/pasting it here.</p>

<p>So, having that said, your code is really ok in my opinion. There are just several things I find not so good.</p>

<h3>Don't use <code>using namespace std</code></h3>

<p>Please see <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">Why is <code>using namespace std</code> bad practice?</a> for an explanation why it is bad to use it. You should avoid it most of the time, especially in header files! But in the source file, and because this is not a 100k line project, it might be ok :)</p>

<h3>What happens when I enter <code>SwItCh</code>??</h3>

<p>Well, it just says: <code>Would you like to go again? (Y/N)\n</code> without any message or something.</p>

<p>The default way to check case-insensitive input is to convert the input to all lowercase, and compare that:</p>

<pre><code>std::cin &gt;&gt; ifswitch;
std::transform(ifswitch.begin(), ifswitch.end(), ifswitch.begin(), ::tolower);

if (ifswitch == "switch"); //...
</code></pre>

<p>I would say this is overkill for a single character, like <code>again</code>.</p>

<h3>Use <code>char</code>s for single characters, not <code>std::string</code></h3>

<p>You don't need a whole string if you only need 1 character. This is the case with <code>again</code>, which stores only 1 character and expects only 1 character.</p>

<h3>Don't endlessly flush the stream with <code>std::endl</code></h3>

<p><code>std::endl</code> is a big performance bottleneck because it outputs <code>'\n'</code>, but then uses <code>std::flush</code>, which flushes the stream. It is really unnecessary to do that every time you want a new line, so prefer using just <code>\n</code>:</p>

<pre><code>std::cout &lt;&lt; "Now using switch statements...\n\n";
</code></pre>

<p><sub>On some platforms, you have to flush the stream to see the output. In this case, better be explicit and use <code>std::flush</code>.</sub></p>

<h3>Remove duplicate code</h3>

<p>Duplicate code is a maintenance headache: If you want to add a sixth drink, you have to change it 2 times at 2 different places. What happens if you forget?</p>

<p>That's why it is better to remove code duplication using functions:</p>

<pre><code>int chooseDrink() 
{
    std::cout &lt;&lt; "Your choices of drinks are: \n";
    std::cout &lt;&lt; "1 - Coke\n";
    std::cout &lt;&lt; "2 - Sprite\n";
    std::cout &lt;&lt; "3 - Water\n";
    std::cout &lt;&lt; "4 - Orange Juice\n";
    std::cout &lt;&lt; "5 - Apple Juice\n";

    std::cout &lt;&lt; "What drink would you like (1/5): ";

    int drink = 0;
    std::cin &gt;&gt; drink;

    std::cout &lt;&lt; '\n';

    return drink;
}
</code></pre>

<h3>Duplicate strings?</h3>

<p>Like code, you have duplicate string literals. It has the exact same problem has with code: you have to change the string at 2 places, instead of 1. In a typical project, you would use a map, string constants or load them from file. Doesn't really matter for such a small project, you don't have 1k strings :)</p>

<h3>Output a newline for the last output</h3>

<p>My terminal looks like this if you forget to output the last newline:</p>

<pre>$ ./vendingmachine
Would you like to use if or switch statements?: if

Now using if statements...

Your choices of drinks are: 
1 - Coke
2 - Sprite
3 - Water
4 - Orange Juice
5 - Apple Juice
What drink would you like (1/5): 2

You chose Sprite.
Would you like to go again? (Y/N)
n

Ending...$</pre>

<p>Now I'm gonna enter the next command on the same line as <code>Ending...</code>, which is not really ideal. Consider outputting a newline.</p>
    </div>