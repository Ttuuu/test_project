<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In the case where you just want to find the best tuples, the code can be much simpler:</p>

<ul>
<li>find the <code>Tuple</code> with the best <code>t</code> for each value of <code>itv</code> (sounds like a job for <code>Map</code>)</li>
<li>put the best bunch of <code>Tuple</code> into a Set, and return it</li>
</ul>

<pre class="lang-java prettyprint-override"><code>public static Set&lt;Tuple&gt; bestTuples(Set&lt;Tuple&gt; set) {

    Map&lt;Integer, Tuple&gt; bestTuplesByItv = new HashMap&lt;Integer, Tuple&gt;();
    Tuple bestTupleSoFar;
    for (Tuple t: set) {
        if ((bestTupleSoFar = bestTuplesByItv.get(t.itv)) == null || t.t &gt; bestTupleSoFar.t) {
            bestTuplesByItv.put(t.itv, t);
        }
    }

    Set&lt;Tuple&gt; bestTuples = new HashSet&lt;Tuple&gt;();
    bestTuples.addAll(bestTuplesByItv.values());

    return bestTuples;

}
</code></pre>

<p>This should also be faster - your solution has some nested loops, O(n^2), but the suggestion above just iterates through the entire <code>set</code> once. My gut tells me that removing things from a Set is slower than just making a new set with the things we want, but I'm not sure about HashSet.</p>

<p>Since the values for the <code>Map</code> are coming from a <code>HashSet</code>, all the values are guaranteed to have unique hash value. Since that's the case, we don't need a <code>LinkedHashMap</code> - a plain <code>HashMap</code> will work just fine (<code>LinkedHashMap</code> creates linked lists to deal with hash collisions - but that's unnecessary as we won't have any).</p>

<p>Your code seems to be mutating the <code>Set</code> that is passed in as a parameter though - if that's desired behaviour, it's a trivial modification from the code above - just clear the values in <code>set</code> and add the values we want before returning:</p>

<pre class="lang-java prettyprint-override"><code>public static Set&lt;Tuple&gt; compareAndRemove(Set&lt;Tuple&gt; set) {

    Map&lt;Integer, Tuple&gt; bestTuplesByItv = new HashMap&lt;Integer, Tuple&gt;();
    Tuple bestTupleSoFar;
    for (Tuple t: set) {
        if ((bestTupleSoFar = bestTuplesByItv.get(t.itv)) == null || t.t &gt; bestTupleSoFar.t) {
            bestTuplesByItv.put(t.itv, t);
        }
    }

    set.clear();
    set.addAll(bestTuplesByItv.values());

    return set;

}
</code></pre>
    </div>