<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just to expand on Toby's response, the two functions are basically</p>

<pre><code>static ArithmeticType getAritmeticType(ArithmeticType min, ArithmeticType max)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    UniformDistributionType distribution(min, max);

    ArithmeticType rnd = distribution(gen);

    return rnd;
}
</code></pre>

<p>All of the duplicate code leaps out while the arithmetic type and distribution type (which depends on the arithmetic type) change. An alias may be used to switch to the appropriate uniform distribution based on the provided arithmetic type.</p>

<pre><code>template &lt;typename ArithmeticType&gt;
using uniform_distribution = typename std::conditional&lt;
            std::is_integral&lt;ArithmeticType&gt;::value,
                std::uniform_int_distribution&lt;ArithmeticType&gt;,
                std::uniform_real_distribution&lt;ArithmeticType&gt;
            &gt;::type;

template &lt;typename ArithmeticType&gt;
static ArithmeticType getAritmeticType(ArithmeticType min, ArithmeticType max)
{
    std::random_device rd;
    std::mt19937 gen(rd());
    return uniform_distribution&lt;ArithmeticType&gt;{min, max}(gen);
}
</code></pre>

<p>Side note: Consider how others will use this function. </p>

<ul>
<li>There is nothing in the name <code>getInt/Float</code> that documents how the numbers are being generated (first? random?) or how distributed the possible results are. We already know it gets an <code>int</code>/<code>float</code> by its signature. What does the function actually do?</li>
<li>The user may not even want to use <code>std::mt19937</code> or may want to reuse an existing psuedo-random bit generator.</li>
<li>The user may want to use a fixed seed for testing. </li>
<li><code>std::random_device</code> may actually be deterministic depending on the sources of entropy an implementation uses.  It can also throw at any time for all sorts of reasons.</li>
<li>Users are forced to use a poorly-initialized Mersenne Twister. <code>std::random_device</code> only produces a single 32-bit integer. A single 32-bit integer provides <span class="math-container">\$2^{32}\$</span> possible initialization states.   * Mersenne Twister needs 624 32-bit integers of seed to be properly initialized, which is provided when you seed with <code>std::seed_seq</code>. The result is a generator that is both easily predictable and biased.</li>
</ul>

<p>Consider allowing the user to pass the generator.</p>

<pre><code>template &lt;typename ArithmeticType&gt;
using uniform_distribution = typename std::conditional&lt;
            std::is_integral&lt;ArithmeticType&gt;::value,
                std::uniform_int_distribution&lt;ArithmeticType&gt;,
                std::uniform_real_distribution&lt;ArithmeticType&gt;
            &gt;::type;

template &lt;typename ArithmeticType, typename RandomBitGenerator&gt;
ArithmeticType uniform_rand(RandomBitGenerator&amp; gen,
                            ArithmeticType min,
                            ArithmeticType max)
{
    return uniform_distribution&lt;ArithmeticType&gt;{min, max}(gen);
}
</code></pre>

<blockquote>
  <p>I basically just want to know: is there a better / more efficient way to do it?</p>
</blockquote>

<p>Yes. There are non-standard distributions and pseudo-random bit generators that are better/more efficient. Daniel Lemire published a paper in late 2018 going over <a href="https://arxiv.org/pdf/1805.10941.pdf" rel="nofollow noreferrer">a faster approach to generating random integers in a range</a>.</p>
    </div>