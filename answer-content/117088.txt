<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A simple algorithm that uses <code>heapq</code>.</p>

<ul>
<li>Construct heap with (-count, value) [Negative count provides the appropriate priority as heapq returns lowest first]</li>
<li>Pop from heap if no previous element or exhaust previous element</li>
<li>Else pop element from heap (and push previous element to heap - <code>heapreplace</code>)</li>
<li>Add element to results</li>
<li>Increase count</li>
<li>Rinse and repeat until no heap</li>
<li>Add any remaining count of the last element (i.e. no solution) - alternatively you could raise an error.</li>
</ul>

<hr>

<pre><code>from collections import Counter
import itertools as it
import heapq

def unorder(alist):
    q = [(-c, v) for v, c in Counter(alist).items()]
    heapq.heapify(q)

    c = 0
    while q:
        c, v = heapq.heappop(q) if c == 0 else heapq.heapreplace(q, (c, v))
        yield v
        c += 1

    if c &gt; 0:  # No solution - add remaining values to the end
        yield from it.repeat(v, -c)

print(list(unorder([1, 2, 2, 3, 1, 3, 3])))
</code></pre>

<p>Output:</p>

<pre><code>[3, 1, 2, 3, 1, 2, 3]
</code></pre>
    </div>