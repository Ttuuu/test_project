<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>With <code>cv.wait_for(...</code> do i need the loop around it to catch spurious wakes?</p>
</blockquote>

<p>You should've read the answer better or checked the C++ reference for <code>std::condition_variable</code>. When you supply a predicate (the condition lambda) to <code>wait, wait_for, wait_until</code> the function already has a loop inside it to deal with spurious wake ups. It will exit only once the condition is met or the timeout was reached.</p>

<blockquote>
  <p>Finally, the wait time calculation is working well, but I am not sure if I need to worry about if the time calculated is negative. In the previous point I mentioned if the work took longer then the timeout, that means on the next iteration the time to wait calculation might -10ms! - what then?</p>
</blockquote>

<p>You decide what to do when the time passed, either trigger the handler immediately or skip for the next round. The timer class is meaningless if executing the handler takes more time than the trigger time.</p>

<p>Note 1: To avoid dealing with negative times - use <code>wait_until</code> and supply a time point instead of the unnecessary work around calculation. Just store a <code>steady_clock::time_point</code> and increment by the duration.</p>

<p>Another solution is to have access to an executor class (a thread pool) and request the executor class to execute the task given by the handler. So <code>timer</code>'s thread doesn't do anything besides waiting.</p>

<p>Note 2: It is advisable to not mix synchronizations of <code>std::atomic</code> with <code>std::mutex</code> as from time to time there are timing issues easy to miss. You should have <code>timer_running</code> be just a <code>bool</code> and use the mutex <code>mtx</code> for synchronizing it. This is a general rule. In this timer class it might cause only mild issues but in some cases it might result in serious and hard-to-catch errors as they are extremely rare and hard to reproduce. In your timer class it might cause the timer to wait the whole timeout even if <code>stop</code> method was called and only then exiting.</p>

<hr>

<p>Overall design: it is wasteful to have a separate thread for just a timer. Consider making a singleton class (alarm clock?) with a single thread that deals with all the timers you run and wakes them up on when asked. It should only triggers waking up not executing the handlers. It can also be utilized for other classes and services.</p>

<p>Note: Honestly, I don't like singletons and prefer context pattern but it requires a throughout integration of the context into the code.</p>
    </div>