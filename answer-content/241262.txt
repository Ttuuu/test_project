<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're doing micro-optimization, which means, you don't have any major optimization on your hands more than you've done already. All other optimizations would only impact <code>big-data</code>, but for average data, it won't be noticeable. Or that's what I think. </p>

<p>But, I agree, sorting the array would be much beneficial to your code as dealing with unsorted array would return unexpected results along with producing a disaster code experience. So, sort the array first, ascending or descending, all depends on your data-process. </p>

<p>Then, instead of looping and multiplying, you can try to decrease the amount of looping rounds by taking the max product then based on that value, do your looping while keeping in mind : </p>

<ul>
<li>the value should be less than the max  </li>
<li>the value should not be negative.  </li>
<li>avoid converting between collections types (like <code>IEnumerable</code> to <code>Array</code>).</li>
<li>break the loop if the multiplier and multiplicand has been found.</li>
</ul>

<p>This would cut your looping timing.</p>

<p>I'll demonstrate my idea. </p>

<p>your current code have 2 for loops, and also used <code>Contains</code> which has an also a loop. </p>

<p>Here is the <code>Contains</code> has something like this code : </p>

<pre><code>public static bool Contains(int[] array, int number) {

    if(array == null) return false;

    for(var x = 0; x &lt; array.Length; x++)
    {
        if (array[x].Equals(number)) { return true; }        
    }

    return false;
}
</code></pre>

<p>This would but your total iterations around 65 iterations (with the provided sample).   and that's with the <code>Contains</code> iterations. This is only on 5 elements, which means each element would iterate about 13 times. This is too much iterations. </p>

<p>to reduce that, we can take the highest values first, then iterate over the array based on these values. In your case, you can take the highest 3 values, and loop over them. </p>

<p>So, re-thinking over, the logic would be something like : </p>

<ol>
<li>take the highest 3 values and store them in descending order. </li>
<li>for each max value, iterate over the array to check wither there is a multiplier and multiplicand for it or not. </li>
<li>if there is, return this max. (which would end this process). </li>
</ol>

<p>with that in mind, we can start with something like this : </p>

<pre><code>public static int maxPairProduct(int[] a)
{
    foreach (var number in a.OrderByDescending(x =&gt; x).Skip(0).Take(3))
    {
        for (var j = 0; j &lt; a.Length; j++)
        {
            // skip if the numbers are equal or bigger than the max number
            if (j+1 &gt;= a.Length || a[j] &gt;= number || a[j + 1] &gt;= number) { continue; }

            if (a[j] * a[j + 1] == number) { return number; }
        }

    }

    return -1;
}
</code></pre>

<p>With this, we reduced the iterations to the minimum.</p>

<p><strong>UPDATE :</strong> </p>

<p>if you want to extend the <code>Take</code> so it will take 3 max integers and do the tests until it finds the product multiplier and multiplicand you can do this : </p>

<pre><code>public static int GetMaxPair(int[] a)
{
    var skip = 0; 
    var take = 3;        
    var descOrder = a.OrderByDescending(x =&gt; x); 

    do 
    {
        foreach(var number in descOrder.Skip(skip).Take(take))
        {
            for (var j = 0; j &lt; a.Length; j++)
            {
                // skip if the numbers are equal or bigger than the max number
                if (j+1 &gt;= a.Length || a[j] &gt;= number || a[j + 1] &gt;= number) { continue; }

                if (a[j] * a[j + 1] == number) { return number; }
            }                             
        }

        skip += take;

        if(skip &gt; a.Length) { return -1; }
    }
    while(true);
}
</code></pre>
    </div>