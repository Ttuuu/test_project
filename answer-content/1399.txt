<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Scheme is a lot more functional than Common Lisp. The way you can apply that to this situation is by making more use of passing functions around (to the point that this problem is almost a one-liner). For the puzzle as written, I'd do something like</p>

<pre><code>(define (big-squares a b c)
   (apply + (map (lambda (n) (* n n))
                 (take (sort (list a b c) &gt;) 2))))
</code></pre>

<p>If you wanted to decompose it properly into named functions</p>

<pre><code>(define (square num) (expt num 2))
(define (sum num-list) (apply + num-list))
(define (two-biggest num-list) (take (sort num-list &gt;) 2))

(define (big-squares a b c) (sum (map square (two-biggest (list a b c)))))
</code></pre>

<p>If you wanted to go completely overboard, also toss in</p>

<pre><code>(define (squares num-list) (map square num-list))
</code></pre>

<p>which would let you define <code>big-squares</code> as</p>

<pre><code>(sum (squares (two-biggest (list a b c))))
</code></pre>

<p>(code above in <code>mzscheme</code>)</p>
    </div>