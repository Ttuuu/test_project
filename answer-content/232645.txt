<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a number of things I would change here:</p>

<ul>
<li><p><code>gradient_mag</code> is unused in HoughTransformCircles and should be removed.</p></li>
<li><p><code>Mat</code> will presumably normally be a relatively large array so relatively expensive to copy, additionally you don't modify <code>image</code> or <code>gradient_dir</code> in the code. These can both be passed in as <code>const Mat &amp;</code>.</p></li>
<li><p>You should make variables that shouldn't change e.g. <code>rLen</code>, const. This prevents you accidentally modifying them later.</p></li>
<li><p>Similarly you should prefer <code>size_t</code> to int for variables that can't be &lt;0. In your case all the counters in the loops and rLen.</p></li>
<li><p>Avoid c style casts e.g. <code>(int)(r*cos(gradient_dir.at&lt;double&gt;(y, x)</code>, prefer explicit <code>static_cast&lt;int&gt;()</code> instead. The c style cast will do a const cast or re-interpret cast if it thinks it needs to which can lead to unexpected results if you are not careful.</p></li>
<li><p>I would avoid using c style arrays to store <code>houghSpace</code>. What you have done looks correct, but would be easy to break if you want to extend the code.
In modern c++ the obvious replacement for this is std::array, but if you are not using c++11 that is not an option.
Another option is to use std::vector. You can initialise the vector to zeros of the desired size. This option might have some memory overhead, but it should be small (would need testing).
A third option as you are already using opencv would be to make houghSpace another Mat. I'm not sure what the memory/performance characteristics of Mat are, but this seems like the natural solution.</p></li>
</ul>
    </div>