<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is not thread safe, just because the <code>LogType</code> static property. The basic problem of such design is that any log operation while setting the log type requires <em>two calls</em> and changes in global state. Imagine how an hypothetical client code would look like:</p>

<pre><code>Log.LogType = LogType.Database;
//What happens between these two lines?
Log.Info("CodeReview", "Testing error logging", new Exception("Kaboom"));
</code></pre>

<p>The first line sets the <em>global</em> log type, and the second uses it, quite simple. But what happens if another thread runs similar code in between? <code>LogType</code> can be changed in the meanwhile (look at my comment in the code), changing the effective destination to the unsuspecting code. Thus, it's not thread safe. As you mention, since Log4Net in itself is thread safe, logs methods have no problems with this, but the destination can be somewhat surprising.</p>

<p>You mention a lock to overcome this in comments. Again an hypothetical usage could be like this:</p>

<pre><code>lock (typeof(Log))
{
    Log.LogType = LogType.Database;
    Log.Info("CodeReview", "Testing error logging", new Exception("Kaboom"));
}
</code></pre>

<p>This solves the issue but at a high cost, the "fix" must be implemented in each and every call, instead of doing it centrally from within the <code>Log</code> class. Since the operation spans 2 methods, you can't lock within a method. Additionally this increases contention and reduces performance, as all logging is now syncronized and each thread must wait for the others to finish logging. While Log4Net could potentially do the same internally, it may also implement other optimizations, that such approach will nulify.</p>

<p>The root problem comes from the global state, the logger is a just stored in a static variable and can be overwriten by anyone, including between calls. A possible solution would be to pass the log type as a parameter and create a local logger for each call and get rid of the <code>LogType</code> property altogether:</p>

<pre><code>public static void Info(string source, string description, Exception exc = null, LogType logType = LogType.CMS)
{
    ILog logger = LogManager.GetLogger(logType.ToString());
    logger.Info(new LogItem() { Source = source, Description = description }, exc);
}
</code></pre>

<p>This results in NO global state, which eliminates chances of races conditions, and also simplify client code, as now every log request is a single call to the appropriate method.</p>
    </div>