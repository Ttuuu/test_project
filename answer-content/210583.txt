<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's have a look at some examples where it fails.</p>

<h3>Rule of Three</h3>

<p>You have not correctly over written the assignment operator.</p>

<pre><code>ptr::unq&lt;int&gt;   x(new int(5));
ptr::unq&lt;int&gt;   y;

y = x;   // This is broken. You should look up rule of three.
</code></pre>

<p>The above code compiles. <strong>BUT</strong> is broken. This pointer will get deleted twice. In debug mode on my compiler it even shows this.</p>

<pre><code>&gt; ./a.out
a.out(7619,0x10f20c5c0) malloc: *** error for object 0x7ff597c02ac0: pointer 
being freed was not allocated
a.out(7619,0x10f20c5c0) malloc: *** set a breakpoint in malloc_error_break to debug
&gt;
</code></pre>

<h3>Rule of Five</h3>

<p>Now I try and use the move operators.</p>

<pre><code>ptr::unq&lt;int&gt;   x(new int(5));
ptr::unq&lt;int&gt;   y;

y = std::move(x);   // This compiles. Which is a surprise.
</code></pre>

<p>But again when we run the code and generate an error.  </p>

<pre><code>&gt; ./a.out
a.out(7619,0x10f20c5c0) malloc: *** error for object 0x7ff597c02ac0: pointer 
being freed was not allocated
a.out(7619,0x10f20c5c0) malloc: *** set a breakpoint in malloc_error_break to debug
&gt;
</code></pre>

<p>This suggests that something not quite correct is happening.</p>

<h3>Implicit construction</h3>

<p>You have an implicit construction problem.</p>

<p>Imagine this situation:</p>

<pre><code>void doWork(ptr::unq&lt;int&gt; data)
{
    std::cout &lt;&lt; "Do Work\n";
}

int main()
{
    int*  x = new int(5);
    doWork(x);            // This creates a ptr::unq&lt;int&gt; object.
                          // This object is destroyed at the call which will
                          // call delete on the pointer passed.

    delete x;             // This means this is an extra delete on the pointer
                          // which makes it a bug.
}
</code></pre>

<p>Running this we get:</p>

<pre><code>&gt; ./a.out
a.out(7619,0x10f20c5c0) malloc: *** error for object 0x7ff597c02ac0: pointer 
being freed was not allocated
a.out(7619,0x10f20c5c0) malloc: *** set a breakpoint in malloc_error_break to debug
&gt;
</code></pre>

<p>I like that you added a bool operators</p>

<pre><code>        operator bool const () { return (obj != nullptr) ? true : false; }  
</code></pre>

<p>Couple of things wrong:</p>

<ul>
<li>The <code>const</code> is in the wrong place.</li>
<li>The test is a bit verbose. You are testing a boolean expression <code>(obj != nullptr)</code> then using a trinary operator to extract that value, much easier to simply return the expression.</li>
<li><p>You also need to use <code>explicit</code>. Otherwise we can use the comparison to compare pointers in a way that we do not intend.</p>

<pre><code>ptr::unq&lt;int&gt;    uniqueInt(new int(5));
ptr::unq&lt;flt&gt;    uniqueFlt(new flt(12.0));

if (uniqueInt == uniqueFlt) {
    std::cout &lt;&lt; "I bet this prints\n";
}
</code></pre></li>
</ul>

<p>Now when I run:</p>

<pre><code> &gt; ./a.out
 I bet this prints
 &gt;
</code></pre>

<p>To prevent this you should tack on <code>explicit</code>. This prevents unrequired conversions.</p>

<pre><code> explicit operator bool () const { return obj != nullptr; }  
</code></pre>
    </div>