<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a noble goal -- you will learn (and perhaps already have learned) a lot about higher level languages by diving a layer deeper.</p>

<p>Here are my thoughts as I read your code.  I hope you don't mind my stream of consciousness format.</p>

<h3>Project Layout</h3>

<ul>
<li>Did you put the declarations in headers?  It's definitely a good idea. I don't see any includes, so I'm a bit suspicious.  Also, headers have a lot of gotchas, so it might be good to review them.</li>
</ul>

<h3>Struct Declaration</h3>

<ul>
<li><p>Why not <code>typedef struct { ... } array</code>? I think that makes types easier to work with.</p></li>
<li><p>How about changing the name <code>contents</code> to <code>data</code>?  I think this would make your naming more consistent with C++ vector.  This would satisfy the principle of least surprise in my subjective opinion.</p></li>
<li><p>In C, it is sometimes helpful to store <code>void*</code> as your datatype.  That way, users can store simple types (like <code>int</code>s) in the <code>void*</code>, but they can also store pointers to larger types.  This allows composition e.g. storing an array of arrays.  But this can be trickier for the users.</p></li>
<li><p>Your comment is about a use case rather than what is going on.  I think you don't really need a comment at all.  At most, you might say <code>// currently used in line_number.c - Damiaan, 21/4/2019</code>.</p></li>
<li><p>(nitpick) Put the <code>data</code> first.  If <code>data</code> is first, and I want to get the 5th element from an <code>array *a</code>, then all the compiler needs to do is dereference and add.  Otherwise, it has to add, dereference, and add again.  Probably <code>size</code> should be next and then <code>capacity</code> following the general guideline that frequently used items should go first.</p></li>
</ul>

<h3><code>array_init</code></h3>

<ul>
<li><p><code>initial_capacity</code> should be <code>size_t</code> (and <code>const</code>).</p></li>
<li><p>Always cast the return value of <code>malloc</code> before assignment.  That way, you'll get a compiler warning if you mess up (or at least, you have a shot at getting a warning).  It looks OK here, but it's a good habit to get into.</p></li>
<li><p>I would have expected <code>array_init</code> to take a pointer as its first argument.  That way the caller can choose where the array struct lives.  I think the caller should be able to do that, since after all, the caller owns the array and is responsible for keeping it between calls to your API.  Also, that frees up the return value to potentially have more specific information.  This is contentious though -- many C libraries do what you've done.  </p></li>
<li><p>"If initial_capacity is zero, contents would always be NULL." This is not guaranteed.  It's implementation defined.  I don't think this would cause any problems for your code, but the comment is misleading.</p></li>
<li><p>Functions that do multiple allocations in C are really easy to get wrong. One common pattern is to use a goto chain. Declare your variables at the top of the function, then list their cleanups in the reverse order that you initialize.  On each failure, goto the cleanup after the one for the variable that failed. e.g.</p>

<pre><code>T *a, *b;

if (NULL == (a = (T*)malloc(sizeof(T)))) { goto failure_a; }
if (NULL == (b = (T*)malloc(sizeof(T)))) { goto failure_b; }

...

free(b);

failure_b:
free(a);

failure_a:

return 1;
</code></pre></li>
</ul>

<p>The advantage of a goto chain is that you don't have to repeate the cleanups at each possible failure.  It can make a big difference when you have lots of initializations.</p>

<p>Another tip -- in C, return is often the cause of bugs.  This is especially true for ex-C++/similar programmers who expect cleanup to be automatic.  A nice feature of the goto chain is it minimizes the number of return statements to think about.</p>

<h3><code>array_cleanup</code></h3>

<ul>
<li><p>I know <code>free</code> accepts <code>NULL</code>, but that's not always the best route.  I would <code>assert(a)</code>.  Other examples of cleanup functions that don't have to do null checks are <code>pthread_mutex_destroy</code> and <code>fclose</code>.  In general in C, there is a philosophy that the programmer is right and the computer will do what s/he says or die trying.  So if the programmer says array_cleanup, then do your darnest to cleanup the array.</p></li>
<li><p><code>if (a-&gt;contents)</code> is superfluous as free checks that anyway.</p></li>
<li><p>I know what you mean by the init/cleanup naming convention, but I prefer init/destroy (as in pthread_mutex_[init|destroy]) or create/destroy.  cleanup doesn't imply destroy to me -- I may want to cleanup a memory arena for example, but that doesn't mean I'm done using it.</p></li>
</ul>

<h3><code>array_get</code></h3>

<ul>
<li><p>The array could be const.  If not, I would expect the return the value to be something mutable like a ptr to a value.</p></li>
<li><p><code>index</code> should be <code>size_t const</code>.</p></li>
<li><p>It's completely horrible to return -1.  What if the element I stored is -1?  Are you saying I cannot store -1, but I should pass an int?  This needs to change.  One option is errno.  Another option is returning the element by ptr.</p></li>
<li><p>The <code>NULL</code> checks... again, I would assert.</p></li>
<li><p><code>index &gt; a-&gt;capacity - 1</code> should be <code>!(index &lt; a-&gt;capacity)</code> IMO.  In my personal style, I like to say <code>if (!(...))</code> when checking if something went wrong.  That way, <code>(...)</code> is the condition I want to be true.  This is just a personal preference though.  Also, it's bad practice to compare different types, so be sure to make them both <code>size_t</code>.</p></li>
<li><p>You could make the capacity check an assertion too.  If you make both of these checks into assertions, then the whole function will turn into just one instruction when compiled without assertions.  This means you'll be quicker.  Also, you won't have those nasty <code>return -1</code>s.</p></li>
</ul>

<h3><code>array_append</code></h3>

<ul>
<li><p>elem should be <code>const</code>.</p></li>
<li><p>The <code>NULL</code> check could be an assert.</p></li>
<li><p>Why does <code>array_append</code> return 1 for an error but <code>array_get</code> returns -1?  Either  get serious and return specific error codes, or always return the same value.  Fix <code>array_get</code> first, then see whether this still needs to change.</p></li>
<li><p>In this function, there is the concept of an old size and a new size.  I think it would be clearer to make <code>newsize</code> a variable, and then at the end set <code>size = newsize;</code>  currently, you increment <code>size</code> in two places.</p></li>
<li><p>Like <code>malloc</code>, you should cast the return value of <code>realloc</code> before assignment.  But it looks like you called it correctly -- nice job.  Many beginners do <code>p = realloc(p, size)</code> which is a mistake.</p></li>
<li><p>In <code>array_init</code> and here in <code>array_append</code>, you have special cases for <code>0 == capacity</code>.  However, a zero capacity array is pretty useless.  I propose that you <code>assert(0 &lt; capacity)</code> in <code>array_init</code> and in <code>array_append</code>.  Then it's the caller's responsibility to ensure that the array is allowed to have more tan 0 elements. As a side note, since you don't do anything like SSO, maybe you should have a higher minimum capcacity... e.g. 4 or 8?  That way you avoid reallocing so often for small arrays.  Would depend on benchmarks.</p></li>
<li><p>You might consider growing by 1.5 instead of 2.  This is highly contentious but worth looking into: <a href="https://github.com/facebook/folly/blob/master/folly/docs/FBVector.md" rel="nofollow noreferrer">https://github.com/facebook/folly/blob/master/folly/docs/FBVector.md</a>.  Again, benchmark.</p></li>
</ul>

<h3><code>array_size</code></h3>

<ul>
<li><p>The array should be <code>const</code>.</p></li>
<li><p>This function should return <code>size_t</code>.</p></li>
</ul>

<h3>Overall</h3>

<ul>
<li><p>What about <code>array_set</code>? <code>array_erase</code>? <code>array_insert</code>?  If you wanted a more generally applicable array, then you should implement those (and more).  But perhaps YAGNI.</p></li>
<li><p>This is very similar to a C++ vector.  Perhaps because I often write C++, I think of vectors as variable sized arrays and of arrays as fixed size vectors.  That's at least on reason to rename this to vector.  Maybe you have other reasons to use array.</p></li>
<li><p>I didn't compile or test this, but it looks solid.  Nice job.</p></li>
<li><p>For fun, you might try adding small value optimization.  This would take care of your zero capacity issue and also speed up growth for very small arrays.</p></li>
</ul>

<h3><code>struct table</code></h3>

<ul>
<li><p>The name <code>table</code> is not specific enough.  A table could be so many things.  It could be a 3D object representing a dinner table.  Or a lookup table.  Or a timetable.  </p></li>
<li><p>Again, typedef struct?</p></li>
<li><p>Why not declare <code>node</code> before table?</p></li>
<li><p>In an ideal world, hashtables wouldn't have hash functions or load factors.  Therefore, unless you have a good reason to do otherwise, do not force users to customize the hash function or the load factor.  Maybe don't allow users to customize these at all.  This change will clarify your levels of abstraction, make your type smaller, and simplify the interface.  Big wins.</p></li>
</ul>

<p>It would be a different story if your hashtable supported different multiple types.  Then you would need to pass in a hash function.</p>

<ul>
<li><p><code>load</code> should be called <code>size</code>.</p></li>
<li><p>Why are <code>load</code> and <code>capacity</code> <code>unsigned long</code>? <code>size_t</code> was the right type.</p></li>
<li><p>The comments here are clutter.  It took me &lt; 1s to read your struct array, but here I had to read every word.</p>

<pre><code>typedef struct {
    struct node** data;
    size_t size;
    size_t capacity;
} hashtable;
</code></pre></li>
</ul>

<p>So much simpler!</p>

<ul>
<li><p>I guess you are using chaining to solve collisions?  that might be worth commenting in the table.  Otherwise I would expect node* instead of node**.</p></li>
<li><p>Note that if your array stored <code>void*</code> and your hashtable did linear probing, then you could have reused your array for the hash table and simply changed the interface functions.  You might have needed to implement more function in the array, but so be it.</p>

<pre><code>typedef array_t hashtable_t;
</code></pre></li>
</ul>

<p>Even simpler!  But you'd want to comment about linear probing. This would be a big win because you wouldn't need to reimplement so much stuff.</p>

<ul>
<li>As I read through the implementation, I realized this is really a map of keys to sets of values.  I did not expect that, and I think it should be commented.  I usually expect a hashtable to map each key to a single value.  If I want multiple values, then I would expect to store a set as the value (which I might be able to do if the value were a <code>void*</code>).</li>
</ul>

<h3>The rest</h3>

<ul>
<li><p>A lot of the comments from the array also apply to the hash function (e.g. <code>assert</code> instead of <code>if</code>, use goto chains for complex failures, etc.).</p></li>
<li><p>This is getting long, so I'm going to sign off.  Perhaps another user will finish the review.</p></li>
<li><p>You might enjoy reading this style guide: <a href="https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard" rel="nofollow noreferrer">https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard</a></p></li>
<li><p>glib has these data structures (and many more) e.g. <a href="https://developer.gnome.org/glib/2.60/glib-Hash-Tables.html" rel="nofollow noreferrer">https://developer.gnome.org/glib/2.60/glib-Hash-Tables.html</a>.  Note that they agree with your implementation in a few key (pun intended) places e.g. passing the hash function to the constructor and returning a pointer from the creation routine.  However, their hashtable operates on <code>void*</code> key and <code>void*</code> value, so they are more generic solutions.  It's a shame the compiler cannot inline/remove these values even though it knows they will never change.</p></li>
</ul>
    </div>