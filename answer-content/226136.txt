<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is far easier to write, debug and modify smaller chunks of code that perform 1 or 2 operations.  For this reason, the code should be separated into multiple subs and functions.  I also recommend taking advantage of Field Aliases to give your Fields more meaningful names.</p>

<h2>Refactored Code</h2>

<pre><code>Option Explicit
Const REDACTED = "&lt;Connection String&gt;"

Private Type DBGrabRecord
    Name As String
    Address1 As String
    Address2 As String
    City As String
    State As String
    Zip As String
    HomePhone As String
    CellPhone As String
    BSA As String
    TableName As String
    ErrNumber As Long
End Type


Sub CIFIncoming()
    Const bhschlp8 As String = "bhschlp8.jhadat842.cfmast cfmast"
    Const cncttp08 As String = "cncttp08.jhadat842.cfmast cfmast"
    Const ConnectionError As Long = -2147467259

    Dim CIF As String
    Dim tDBGrabRecord As DBGrabRecord

    CIF = Sheet1.Range("B103").Text

    If Not CIF = vbNullString Then
        tDBGrabRecord = getDBGrabTestRecord(bhschlp8, CIF)
        If tDBGrabRecord.ErrNumber = ConnectionError Then tDBGrabRecord = getDBGrabTestRecord(cncttp08, CIF)
    End If

    With Sheet1
        .Range("B104") = tDBGrabRecord.Name
        .Range("B105") = tDBGrabRecord.Address1
        .Range("B106") = tDBGrabRecord.Address2
        .Range("B107") = tDBGrabRecord.City &amp; ", " &amp; tDBGrabRecord.State &amp; " " &amp; tDBGrabRecord.Zip
    End With

    Debug.Print "Table Name: "; tDBGrabRecord.TableName

End Sub

Private Function getDBGrabTestRecord(ByVal TableName As String, ByVal CIF As String) As DBGrabRecord
    Dim conn As New ADODB.Connection
    Dim rs As New ADODB.Recordset
    Dim SQL As String
    Dim tDBGrabRecord As DBGrabRecord

    On Error Resume Next

    conn.Open REDACTED

    SQL = getDBGrabSQL(TableName, CIF)

    rs.Open CIFstr, conn

    If Not (rs.BOF And rs.EOF) Then
        With tDBGrabRecord
            .Name = Trim(rs.Fields("Name").Value)
            .Address1 = Trim(rs.Fields("Address1").Value)
            .Address2 = Trim(rs.Fields("Address2").Value)
            .City = Trim(rs.Fields("City").Value)
            .State = Trim(rs.Fields("State").Value)
            .Zip = Trim(rs.Fields("Zip").Value)
            .HomePhone = Trim(rs.Fields("HomePhone").Value)
            .CellPhone = Trim(rs.Fields("CellPhone").Value)
            .BSA = Trim(rs.Fields("BSA").Value)
            .TableName = TableName
        End With
    End If

    rs.Close
    conn.Close

    tDBGrabRecord.ErrNumber = Err.Number

    getDBGrabTestRecord = tDBGrabRecord
End Function

Private Function getDBGrabSQL(ByVal TableName As String, ByVal CIF As String) As String
    Dim SelectClause As String
    Dim FromClause As String
    Dim WhereClause As String

    SelectClause = "SELECT cfna1 AS Name, cfna2 AS Address1, cfna3 AS Address2, cfcity AS City, cfstat AS State, LEFT(cfzip, 5) AS Zip, cfhpho AS HomePhone, cfcel1 AS CellPhone, cfudsc6 AS BSA"
    FromClause = "FROM " &amp; TableName
    WhereClause = "WHERE cfcif# = '" &amp; UCase(CIF) &amp; "'"

    getDBGrabSQL = SelectClause &amp; vbNewLine &amp; FromClause &amp; vbNewLine &amp; WhereClause
End Function
</code></pre>
    </div>