<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will not offer a complete refactor of your script, it's too much work I'm afraid. But well done, this is not an easy project.</p>

<p>I also agree that you should have more functions. Break up your code in smaller bits, to separate functionality and make it more readable. The flow is not very easy to follow.</p>

<p>I haven't tried all of your code but if I understand the desired functionality you should have a few logical blocks like:</p>

<ul>
<li>open the main page</li>
<li>pick a state</li>
<li>pick a district</li>
<li>collect some data</li>
<li>then come back to the home page and repeat the process</li>
</ul>

<p>When you have a clear operating flow in mind you can start writing dedicated functions for the various tasks you've identified.
I will give an example that retrieves the list of States/UT.<br>
NB: tested on Linux with Firefox.<br>
Warning: I may have changed a few options/imports from your original code.</p>

<pre><code>from typing import List
from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options as FirefoxOptions

# constants
url = r'https://districts.ecourts.gov.in/'

options = FirefoxOptions()
#options.add_argument("--headless")
options.add_argument("--private-window")
driver = webdriver.Firefox(options=options)

# FUNCTIONS
def get_states(driver) -&gt; List[str]:
    """Get list of States/UT from combo box
    Return a list of strings
    """

    # define the selector only once
    combo_identifier = '#sateist'

    try:
        # wait for combo box to be ready
        print("Waiting for combo box (States/UT)...")
        WebDriverWait(driver=driver, timeout=10).until(EC.presence_of_element_located((By.CSS_SELECTOR, combo_identifier)))
        print("Combo box should be ready, continue")
    except TimeoutException:
        print("Timed out/failed to load page")
        sys.exit()

    states_combo = Select(driver.find_element_by_css_selector(combo_identifier))

    # return list of non-empty values from combo box
    return [o.get_attribute("value") for o in states_combo.options if o.get_attribute("value") != '']


# MAIN CODE

# load the main page
driver.get(url)

# Step 1 - get the list of States/UT
print("List of States/UT:")
for counter, value in enumerate(get_states(driver=driver), start=1):
    print(f'[{counter}] {value}')
    # Step 2: choose a district
    # ....
</code></pre>

<p>Output:</p>

<pre>
List of States/UT:
Waiting for combo box (States/UT)...
Combo box should be ready, continue
[1] andaman
[2] ap
[3] arunachal
[4] assam
[5] bihar
[6] chandigarh-district-court
[7] chhattisgarh
[8] dadra
[9] damandiu
[10] delhi
[11] goa
[12] gujarat
[13] haryana
[14] hp
[15] jk
[16] jharkhand
[17] karnataka
[18] kerala
[19] lakshadweep
[20] mp
[21] maharashtra
[22] manipur
[23] meghalaya
[24] mizoram
[25] nagaland
[26] odisha
[27] puducherry
[28] punjab
[29] rajasthan
[30] sikkim
[31] tn
[32] telangana
[33] tripura
[34] up
[35] uttarakhand
[36] wb
</pre>

<p>The function <code>get_states</code> returns a list of string, combo values only. If you are interested in the State names as well, then you could return a a list of dictionary pairs.</p>

<p>Now that you have fetched the list you can select one item at a time, for example to choose Goa in the list you do this:</p>

<pre><code>combo_identifier = '#sateist'
state_option = Select(driver.find_element_by_css_selector(combo_identifier))
state_option.select_by_value('goa')
</code></pre>

<hr>

<p>Regarding structure/style I would recommend to add some more <strong>line spacing</strong>, and more <strong>comments</strong> to better follow the logic. I bet that the reason why you have so little line spacing is that your code is already so long and takes time to scroll. That's why you need small functions (say, 10-30 lines each) instead of big blocks.</p>

<hr>

<p>Something else that may be useful for you: <strong>logging</strong>. Python has an elaborate <a href="https://docs.python.org/3.8/library/logging.html" rel="nofollow noreferrer">logging module</a>, that you can use instead of writing to text files.</p>

<p>I use it extensively in my applications to write text to the console AND to file. Note that you can write to multiple destinations but with different formats.</p>

<p>You repeat paths and log file names too often eg:</p>

<pre><code>os.path.join(log_Directory, nameCourtComp + '.txt'), 'a')
</code></pre>

<p>The logging module should help you simplify this. When you harness the power of this module you will get rid of those prints.
This is more <em>flexible</em> because you can change the level of detail you want instead of commenting a lot of print statements.</p>

<p>Here is some sample code for demonstration purposes:</p>

<pre><code>import logging
import sys

log_file = '/home/anonymous/test.log'

# logging - source: https://stackoverflow.com/questions/13733552/logger-configuration-to-log-to-file-and-print-to-stdout
# Change root logger level from WARNING (default) to NOTSET in order for all messages to be delegated.
logging.getLogger().setLevel(logging.NOTSET)

# Add stdout handler, with level INFO
console = logging.StreamHandler(sys.stdout)
console.setLevel(logging.INFO)
formater = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', "%Y-%m-%d %H:%M:%S")
console.setFormatter(formater)
logging.getLogger().addHandler(console)

# Add file handler, with level DEBUG
handler = logging.FileHandler(log_file)
handler.setLevel(logging.DEBUG)
formater = logging.Formatter('%(asctime)s\t%(filename)s\t%(lineno)s\t%(name)s\t%(funcName)s\t%(levelname)s\t%(message)s', "%Y-%m-%d %H:%M:%S")
handler.setFormatter(formater)
logging.getLogger().addHandler(handler)

logger = logging.getLogger(__name__)

# this line will appear on console and in the log file
logger.info("Application started")

# this line will only appear in the log file because level  = debug
logger.debug("Log some gory details here")
</code></pre>

<hr>

<p>Once again, well done. But if think your code is too long. Maintenance and debugging is not going to be easy. You really need to break it up in a number of steps and call them in a logical order that is easy to follow.</p>

<p>The site will change at some point and you will have to review your code sooner or later. If you split the code in functions and add a lot of traces it will be easier to figure out (function name, line number) where the problem occurs.</p>

<p>Something that you could/should do is put all the functions in a <strong>separate module</strong> file, then import it as a module from your main code. This will <strong>declutter</strong> your application <em>a lot</em>.</p>
    </div>