<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code does not work the way you think it does.</p>

<blockquote>
<pre><code>.GroupBy(cli =&gt; cli, cli =&gt; cli.Tickets)
</code></pre>
</blockquote>

<p>This is not grouping anything because you are using the entire object as a key and since you are not providing any comparer for them each group will have exactly one item, itself.</p>

<blockquote>
<pre><code>.Select(grp =&gt;
</code></pre>
</blockquote>

<p>Then from each one-itemed-group you select its single item with </p>

<blockquote>
<pre><code>grp.FirstOrDefault().Count(t =&gt; t.Status == StatusType.Open
</code></pre>
</blockquote>

<p>This is probably very inefficient because the grouping isn't grouping anything and works like a <code>SELECT * FROM Table</code>.</p>

<p>Instead you should rather be doing this. Select tickets from active clients, group them by their <code>Status</code>, calculate their <code>Count</code> and then create the view-model.</p>

<pre><code>    var ticketGroups = tickets
        .Where(ticket =&gt; ticket.Client.IsActive)        
        .GroupBy(ticket =&gt; ticket.Status, tickets =&gt; tickets.Count())
        .ToList();

    return new DashboardItemViewModel
    {
        Id = grp.Key.Id,
        Name = grp.Key.Name,
        Open =  ticketGroups.SingleOrDefault(tg =&gt; tg.Key == StatusType.Open &amp;&amp; !tg.IsArchived),
        Responded = ticketGroups.SingleOrDefault(tg =&gt; tg.Status == StatusType.Responded &amp;&amp; !tg.IsArchived),
        Resolved = ticketGroups.SingleOrDefault(tg =&gt; tg.Status == StatusType.Resolved &amp;&amp; !tg.IsArchived),
    });
</code></pre>
    </div>