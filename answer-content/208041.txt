<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a lot of duplicated (and triplicated) code.  Learning how to write and use functions can help avoid this, but even without using functions your code can be significantly reduced.</p>

<p>But first, some initial(-ization) criticisms.</p>

<pre><code>numToGuess = random.randint(1, 100)
p1NumOfGuess = 1
p2NumOfGuess = 1
c1NumOfGuess = 1
prevHigh = 100
prevLow = 1
</code></pre>

<ol>
<li><p>You are initializing variables way ahead of where they are used.  At first, I thought <code>prevHigh</code> and <code>preLow</code> were unused variables.  Initializing variables just as they are about to be used will help increase the cohesiveness of the code.</p></li>
<li><p>You are initializing "guess" counter variables to <code>1</code>.  This is very unnatural.  The counts should be initialized to <code>0</code>, and incremented by 1 for each and every guess, including both the first and last guesses.</p></li>
</ol>

<p>The next 3 initializations are more confusing:</p>

<pre><code>p1 = int
p2 = int
c1 = int
</code></pre>

<p>I'm not certain what your intension was with these initializations.  Perhaps you were trying to use Python3.6's type-hint declarations, such as <code>p1 : int</code>?  But <code>p1</code>, <code>p2</code> and <code>c1</code> are used as <code>str</code> variables, not <code>int</code>.</p>

<hr>

<pre><code>print('1 or 2 Player?')
playerAmount = int(input())

if playerAmount == 1:
    print('Computer Player? [Y/N]')
    c1 = input()
    print('Player one enter your name')
    p1 = input()

else:
    print('Player one enter your name')
    p1 = input()
    print('Player two enter your name')
    p2 = input()
    print('Computer Player? [Y/N]')
    c1 = input()
</code></pre>

<p>Here is where we can start removing duplicate code.  Regardless of the number of players, you always ask for Player one's name.  Regardless of the number of players, you always ask if there is a computer player.  If you moved these questions out of the if-statements, you don't need to repeat them.</p>

<pre><code>print('1 or 2 Player?')
playerAmount = int(input())

print('Computer Player? [Y/N]')
c1 = input()

print('Player one enter your name')
p1 = input()

if playerAmount == 2:
    print('Player two enter your name')
    p2 = input()
</code></pre>

<p>Note that you are asking for a <code>Y</code> or a <code>N</code> for the computer player, but later check if <code>c1</code> is a <code>y</code>.  This is dangerous.  It would be wise to converting <code>c1</code> to a lower case, if you know how to do that, or ask <code>'Computer Player? [y/n]'</code> otherwise.</p>

<hr>

<p>The main portion of your program reads:</p>

<pre><code>if playerAmount == 1 and c1 != "y":
    # Player 1 game
    # Output score
elif playerAmount == 2 and c1 != "y":
    # Player 1 game
    # Player 2 game
    # Output score
elif c1 == "y" and playerAmount == 1:
    # Player 1 game
    # Computer game
    # Output score
elif c1 == "y" and playerAmount == 2:
    # Player 1 game
    # Player 2 game
    # Computer game
    # Output score
else:
    print('Thanks for playing')
</code></pre>

<p>Note the following:</p>

<ul>
<li>"Player 1 game" appears in 4 branches</li>
<li>"Player 2 game" appears in 2 branches</li>
<li>"Computer game" appears in 2 branches</li>
<li>"Output score" appears in 4 branches</li>
<li>"Thanks for playing" is only printed if no games are played.</li>
</ul>

<p>We can do much better by organizing the code as follows:</p>

<pre><code># Player 1 game

if playerAmount == 2:
    # Player 2 game

if c1 == "y":
    # Computer game

# Output score

print('Thanks for playing')
</code></pre>

<p>This removes 3 copies of the "Player 1 game" code, 1 copy of the "Player 2 game" code, 1 copy of the "Computer game" code.</p>

<p>However, "Output score" will become more complex, as we will need to distinguish between the combinations of players when we compute who wins.  Still, it looks like a significant reduction in code is possible.</p>

<hr>

<p>The guessing code for player 1 follows.  The code for player two and the computer is similar.</p>

<pre><code>p1Guess = int(input())
while p1Guess != numToGuess:
    p1NumOfGuess += 1

    if p1Guess &lt; numToGuess:
        print("Guess is to Low!""\n""Guess Again")
        p1Guess = int(input())

    elif p1Guess &gt; numToGuess:
        print("Guess is to High!""\n""Guess Again")
        p1Guess = int(input())

print("Congrats", p1Guess, "is correct!")
</code></pre>

<p>Here, I see 3 places where a guess is input <code>p1Guess = int(input())</code>.  The first is outside the loop, which is why you have the awkward initialization to <code>1</code> at the start of the code.  We can improve this code by starting the count at 0, inputting the guess at exactly one point in the code, and incrementing the count when the guess occurs.</p>

<pre><code>numToGuess = random.randint(1, 100)
print(p1, "Guess a Number between 1 and 100")

p1NumOfGuess = 0

while True:
    p1Guess = int(input())
    p1NumOfGuess += 1

    if p1Guess &lt; numToGuess:
        print("Guess is too Low!\nGuess Again")

    elif p1Guess &gt; numToGuess:
        print("Guess is too High!\nGuess Again")

    else:
        print("Congrats", p1Guess, "is correct!")
        break
</code></pre>

<p>Player two game code would look similar, but contained in an <code>if playerAmount == 2:</code> block.</p>

<hr>

<p>The computer game code would also look similar, but with the <code>preLow</code> and <code>prevHigh</code> variables.</p>

<pre><code>if c1 == 'y':

    numToGuess = random.randint(1, 100)

    print("Computer is guessing")

    prevLow = 1
    prevHigh = 100
    c1NumOfGuess = 0

    while True:
        c1Guess = random.randint(prevLow, prevHigh)
        c1NumOfGuess += 1
        time.sleep(1.25)

        if c1Guess &lt; numToGuess:
            print(c1Guess, "\nGuess is too Low!\nGuess Again")
            prevLow = c1Guess + 1    # Slight boost to the computer AI

        elif c1Guess &gt; numToGuess:
            print(c1Guess, "\nGuess is too High!\nGuess Again")
            prevHigh = c1Guess - 1   # Slight boost to the computer AI

        else:
            print("Congrats", c1Guess, "is correct!")
            break
</code></pre>

<hr>

<p>Scoring.  First, you are printing out the number of guesses for each player.  Like the above, you always print out player one's guess count, but only need to print out player two's and the computer's if they actually played. </p>

<pre><code>print(p1, 'took', p1NumOfGuess, 'guesses to guess correctly!')

if playerAmount == 2:
    print(p2, 'took', p2NumOfGuess, 'guesses to guess correctly!')

if c1 == "y":
    print('Computer took', c1NumOfGuess, 'guesses to guess correctly!')
</code></pre>

<p>Now, you only need to determine who won, but only if there were multiple players.  We'll cheat a little here, and set the number of guesses of players who didn't play to a large number:</p>

<pre><code>if playerAmount == 2  or  c1 == 'y':

    # Give unrealistically large guess counts to players who didn't play.

    if playerAmount != 2:
        p2NumOfGuess = 99999
    if c1 != 'y':
        c1NumOfGuess = 99999


    # Determine winner among all 3 players.

    if p1NumOfGuess &lt; p2NumOfGuess and p1NumOfGuess &lt; c1NumOfGuess:
        print(p1, 'WINS!')

    elif p2NumOfGuess &lt; p1NumOfGuess and p2NumOfGuess &lt; c1NumOfGuess:
        print(p2, 'WINS!')

    elif c1NumOfGuess &lt; p1NumOfGuess and c1NumOfGuess &lt; p2NumOfGuess:
        print('Computer WINS!')

    else:
        print('Tied Game!')
</code></pre>

<hr>

<p>Use functions to organize your code, and reduce code duplication:</p>

<p>Add the following function definition near the top of the file:</p>

<pre><code>def playGame(player_name):

    numToGuess = random.randint(1, 100)
    print(player_name, "Guess a Number between 1 and 100")

    numOfGuesses = 0

    while True:
        guess = int(input())
        numOfGuesses += 1

        if guess &lt; numToGuess:
            print("Guess is too Low!\nGuess Again")

        elif guess &gt; numToGuess:
            print("Guess is too High!\nGuess Again")

        else:
            print("Congrats", guess, "is correct!")
            break

    return numOfGuesses
</code></pre>

<p>Then, you can replace the Player one game and Player two game code with:</p>

<pre><code>p1NumOfGuess = playGame(p1)

if playerAmount == 2:
    p2NumOfGuess = playGame(p2)
</code></pre>
    </div>