<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        int len = data.length;
        if (len &lt;= 0) return data;
</code></pre>
</blockquote>

<p>While this will of course work, it seems unnecessary.  You could just say </p>

<pre><code>        if (data.length &lt;= 0) {
          return data;
        }
</code></pre>

<p>There is no efficiency or readability reason to make the other name.  In fact, you actively harm readability by using the extraneous variable.  Readers have to remember that <code>len</code> is the same thing as <code>data.length</code>.  If you just used <code>data.length</code>, we wouldn't have to make that link.  </p>

<blockquote>
<pre><code>        T temp;
        boolean swapped;
        for (int i = 0; i &lt; len - 1; i++) {
            swapped  = false;
            for (int j = 0; j &lt; len - 1 - i; j++) {
</code></pre>
</blockquote>

<p>You use <code>i</code> for one purpose and one purpose only.  That is to subtract from <code>len - 1</code>.  You could just say </p>

<pre><code>        for (int i = data.length - 1; i &gt; 0; i--) {
            boolean swapped = false;
            for (int j = 0; j &lt; i; j++) {
</code></pre>

<p>Then you don't have to write the length as much, so it matters even less to make a short alias for it.  </p>

<p>This also saves two math operations per iteration.  Although the compiler might remove that for you anyway.  </p>

<p>It doesn't help to declare the variables outside the loop and it may hurt.  It hurts readability in that it moves the declaration and use farther apart.  So readers have to look at more code to find declaration, initialization, and use.  </p>

<p>It also may hurt in that if the variable is actually stored in memory rather than just register, it's going to take longer to access.  Hopefully the compiler will realize that they don't need the larger scope.  But that optimization wouldn't be necessary if you'd given them minimal scope in the first place.  </p>
    </div>