<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Quick bits</h1>

<p>You have some issues that some linters would pick up:</p>

<ul>
<li>I would suggest moving your main code into a function. So that it doesn't pollute the global namespace.</li>
<li>You've got some trailing whitespace.</li>
<li>Add some docstrings to your code. Even something basic like "Fetch words in answers."</li>
<li>Your imports are kinda all over the place. I can't make any sense of them, and so I think they're just randomly placed there as and when you needed them.</li>
<li>I don't think <code>print</code> is the best tool for logging. I would suggest using <code>logging</code>.</li>
</ul>

<h1>Async</h1>

<p>I'm not a fan of your current <code>fetch</code> and <code>fetch_all</code> functions. I would prefer it if <code>fetch</code> only called <code>session.get</code>. This may seem strange, but it means that you can change your code to allow for caching of objects or easier logging.</p>

<p>Given that I've not done any of this I've left it returning just a plain RequestContextManager. However if I were to expand on this I would change it to my own custom class. This is because then you can keep the data you want / need such as the page body in a cache. Using your own class also means that can guarantee values will exist, and hide ones you can't guarantee.</p>

<p>Moving the content of the old <code>fetch</code> into a <code>fetch_all_words</code> allows almost the exact same code, and allows us to build the word list without the use of a convoluted <code>itertools</code> and <code>asyncio</code> one-liner.</p>

<p>Interestingly since the majority of the content of the <code>fetch_all_words</code> function is not async code, there is little to no performance difference between using <code>asyncio.as_completed</code> and <code>asyncio.gather</code>. In a small test function I found that <code>asyncio.as_completed</code> performs as well or better than <code>asyncio.gather</code>.</p>

<p>Finally I make <code>main</code> an async function, as calling <code>asyncio.run(main())</code> is simpler than building a loop and running until completion.</p>

<pre class="lang-py prettyprint-override"><code>"""Stack Exchange word cloud generator."""
import asyncio
import logging
import itertools
import operator

import aiohttp
import bs4
import nltk.tokenize
import matplotlib.pyplot as plt
import stackexchange
import wordcloud

API_KEY = '**redacted**'
CR = stackexchange.Site("CodeReview", API_KEY)

STRAINER = bs4.SoupStrainer(
    'div',
    attrs={'class': ['answer', 'answer accepted-answer']}
)


async def fetch(session, url):
    return url, await session.get(url)


async def fetch_all(urls):
    async with aiohttp.ClientSession() as session:
        tasks = [fetch(session, url) for url in urls]
        for task in asyncio.as_completed(tasks):
            yield await task


async def fetch_all_words(answers):
    words = []
    async for url, resp in fetch_all(answers):
        answer_id = answers[url]

        async with resp as response:
            page = await response.text()
        soup = bs4.BeautifulSoup(page, "lxml", parse_only=STRAINER)
        answer = soup.select_one(f'div#answer-{answer_id} div.post-text')
        try:
            answer_text = answer.text
        except AttributeError:
            logging.error(url)
            answer_words = []
        else:
            logging.info(url)
            answer_words = nltk.tokenize.word_tokenize(answer_text)
        words.extend(answer_words)
    return words


async def main():
    """Main code."""
    logging.getLogger().setLevel(logging.INFO)

    user = CR.user(42401)
    user.answers.fetch()

    answers = {
        answer.url.replace(CR.domain, "codereview.stackexchange.com"): answer.id
        for answer in user.answers
    }
    words = await fetch_all_words(answers)

    plt.figure()
    wc = wordcloud.WordCloud(width=480, height=480, colormap="Blues")
    wc = wc.generate(" ".join(words))
    plt.imshow(wc, interpolation="bilinear")
    plt.axis("off")
    plt.margins(x=0, y=0)
    plt.show()


if __name__ == "__main__":
    asyncio.run(main())
</code></pre>

<h1>Additional comments</h1>

<ul>
<li><p>The code heavily violates the SRP principle. Given that this is, I assume, an untested one-off script this doesn't matter much.</p>

<p>However in the future I think the changes to <code>fetch_all</code> makes <code>fetch_all_words</code> easier to split up to achieve this.</p></li>
<li><p>I have butchered your style.<br>
This may be hard to believe but I rewrote the code around three times. I've not changed much, but I don't think much needs to be changed. I mostly focused on trying to get <code>fetch_all</code> and <code>fetch</code> a way I like.</p>

<p>Whilst I like my style more, it's not intended to be some subtle hint yours is bad.</p></li>
<li><p>You have a bug apparently "n't", "ll", "n't use" and "ca n't" are words I commonly say.<br>
Also, "n't" appears on your image too.</p></li>
<li><p>Thanks for posting this, it was a fun little puzzle. First time I'd really looked into <code>asyncio</code> too!</p></li>
</ul>

<p><a href="https://i.stack.imgur.com/FcOiO.png" rel="noreferrer"><img src="https://i.stack.imgur.com/FcOiO.png" alt="Peilonrayz' wordmap"></a></p>
    </div>