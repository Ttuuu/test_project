<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When you're looking for performance bottlenecks, it may help to focus on the parts named <code>TURTLE</code>. ;) But I don't even think that's your main problem here.</p>
<p>It seems like all you want to do is attach a message to the assertion, right?</p>
<pre><code>#define myAssert(x, msg) assert((x) &amp;&amp; msg)
</code></pre>
<p>This works as long as you're conscientious to always double the parentheses on invocations that need double parens:</p>
<pre><code>myAssert(x &lt; 2, "x is too large");
myAssert((foo&lt;int,int&gt; &lt; 2), "foo&lt;int,int&gt; is too large");
</code></pre>
<p>If you want to eliminate the parens, I'd reduce that problem to <a href="https://stackoverflow.com/questions/24009797/how-can-i-retrieve-the-last-argument-of-a-c99-variadic-macro">"How do I extract the last macro argument from a pack?"</a> One sensible answerer suggests that you unask <em>that</em> question and just put the message as the first argument:</p>
<pre><code>#define myAssert(msg, ...) assert((__VA_ARGS__) &amp;&amp; msg)
myAssert("x is too large", x &lt; 2);
myAssert("foo&lt;int,int&gt; is too large", foo&lt;int,int&gt; &lt; 2);
</code></pre>
    </div>