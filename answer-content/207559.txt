<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>1) Is your CircleSlider really a window? Your code says yes, but as a user, I would find that quite strange. Your CircleSlider should use JFrame as an instance. You can see that clearly in your main method. You are using three methods from it. What about the rest? JFrame has probably 30 methods or more. Can I call all of them without destroying your CircleSlider class? Do I have to call the methods you provided or can I leave them untouched? Should I be able to call them?<br>
- Probably not. Define your own methods.</p>

<p>2) I guess you are writing this because you feel like it would waste too many lines otherwise, right?</p>

<pre><code>private final JSlider diameterSlider, redSlider, greenSlider, blueSlider;
</code></pre>

<p>The problem is not the waste of lines, but the number of instance variables you need for your class. That's your state and your state consists of 14 variables.<br>
Personally, I would try to stay below 5. It makes reasoning much easier, it makes it more testable, it keeps your class smaller and you could probably initialize the full state through the constructor - to name a few advantages.</p>

<p>3) </p>

<pre><code>//set the diameter of the circle
private void setDiameter(int newDiameter){
    //if new diameter is negative, set to 10
    diameter = newDiameter &gt;= 0 ? newDiameter : 10;
    repaint();
}
</code></pre>

<p>If you already write something like "This method does X with Y" then the method should be a member of Y and Y should be a class. In your case, make a circle class and put the methods with these comments inside it.</p>

<p>4) Yes, your constructor is really long. It seems like your application has different parts, but all of them are inside your CircleSlider class. You should create new classes for these parts, for example, a class containing the sliders for your circle (CircleAdjustment could be a name for it).</p>

<p>5)</p>

<pre><code>addComponent(greenLabel, 7, 1, 1, 1, 0, 1, GridBagConstraints.NONE, GridBagConstraints.WEST);
</code></pre>

<p>It's good that you are trying to help yourself with additional methods, but this one is quite difficult to read. I could easily swap some numbers and without looking at your method I wouldn't even dare to guess what these numbers mean. You could use additional classes to get around this:</p>

<pre><code>    // instead of:
    constraints.gridx = column;
    constraints.gridy = row;
    constraints.gridwidth = width;
    constraints.gridheight = height;
    // something like this:
    new Grid(column, row, width, height)
</code></pre>

<p>6) All these numbers you are using... ask yourself, do they depend on each other? I am sure some of them do because you are a grid-based layout and if you enlarge one field, it would influence another. This should be visible in your code. The easiest approach (not best) would be to make constants at the beginning of the class which depends on each other:</p>

<pre><code>private static final int RED_SLIDER_Y = 1;
private static final int GREEN_SLIDER_Y = RED_SLIDER_Y +1;
// ...
</code></pre>

<h2><strong>EDIT:</strong></h2>

<p>Here is an example of how an Adjustment class and some others around it could look like. I didn't implement the layout stuff completely, but the rest should be ok. If you've further questions, I am here.</p>

<pre><code>/**
 * Offers a convenient way to initialize a slider. Note that it is final like
 * the other classes. If you don't design your class to be inherited from, make
 * it final. Careless inheritance is dangerous and leads to bad code and bugs.
 */
public final class SliderValues {
    private final int min;
    private final int max;
    private final int value;

    /**
     * Secondary constructor. It's purpose is to offer another way to construct
     * the object. It's important that every secondary constructor has
     * only a single statement consisting of "this(...)" which calls the
     * primary constructor. Only the primary constructor sets the fields.
     */
    public SliderValues(int min, int max) {
        this(min, max, 0);
    }

    /**
     * Primary constructor. Ideally this is how a primary constructor should
     * look like: Just a simple setup without methods or calculations.
     */
    public SliderValues(int min, int max, int value) {
        this.min = min;
        this.max = max;
        this.value = value;
    }

    /**
     * Yes, you could also have just three getters, but I prefer this option,
     * because the purpose of this class is to initialize a slider and that's
     * what this method does.
     * This class is not a data container.
     */
    public JSlider initialized(JSlider slider) {
        slider.setMinimum(min);
        slider.setMaximum(max);
        slider.setValue(value);
        return slider;
    }
}

public final class LabeledSlider {
    private final JPanel panel;
    private final JSlider slider;
    private final JLabel label;

    /**
     * A secondary constructor again for the sake of convenience.
     */
    public LabeledSlider(String text, int min, int max, ChangeListener listener) {
        this(
            text,
            new SliderValues(min, max),
            listener
        );
    }

    /**
     * Why didn't I just use a constructor with five values instead of the
     * SliderValues class? First, three integers in a row are risky for the
     * client. He could mistaken the order. Additionally, I don't want more than
     * 4 parameters per method/constructor.
     * @param listener I replaced the ChangeListener for the Consumer. The advantage
     *  is that the caller doesn't need to somehow get the value of the slider
     *  but instead he just gets it from the slider. Additionally, the slider
     *  can hold its encapsulation and doesn't need to provide a getValue()
     *  method.
     */
    public LabeledSlider(String text, SliderValues values, Consumer&lt;Integer&gt; listener) {
        label = new JLabel(text);
        slider = values.initialized(new JSlider());
        slider.addChangeListener(
            e -&gt; listener.accept(slider.getValue())
        );
        panel = new JPanel(new BorderLayout());
        panel.add(label, BorderLayout.NORTH);
        panel.add(slider, BorderLayout.SOUTH);
    }

    /**
     * Note that I am not inheriting from any class, because there is exactly
     * one thing I want this class to do: Being attached on a container.
     * Inheriting from Container would give me this possibility - and 30 other
     * methods I don't want. This is a neat alternative using only one method.
     */
    public void addOn(Container container) {
        container.add(panel);
    }
}

public final class Adjustment {
    private final JPanel panel;

    public Adjustment(Circle circle) {
        panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        new LabeledSlider(
            "Diameter",
            new SliderValues(0, 150, 50),
            /*
            I don't know if you've used the other syntax on purpose, but if not,
            this is a way to shorten your ChangeListener creation. It's called
            "lambda" and is usable on Interfaces with only one method
            (ChangeListener is such an Interface).

            Note that this isn't the best application for a lambda. Normally
            you use it if you have short code around 4 lines or less, because
            it tends to hurt readability if it's longer.
             */
            e -&gt; {
                double radius = diameter / 2.0;
                setDiameter(diameterSlider.getValue());
                String message = String.format(
                    "Diameter: %d%nArea: %.2f%nCircumference: %.2f",
                    diameter, getArea(radius), getCircumference(radius));
                displayArea.setText(message);
            }
        ).addOn(panel);
        new LabeledSlider(
            "RGB: Red",
            0,
            255,
            value -&gt; circle.red(value)
        ).addOn(panel);
        new LabeledSlider(
            "RGB: Green",
            0,
            255,
            circle::green // alternative syntax for the lambda called "method reference".
            // If you don't understand it, just use the normal one.

            // It works only if your lambda provides the same amount and types
            // of values as the the method you're referencing takes.
            // In this case, green takes one argument (integer) and you get
            // one integer from the lambda.
        ).addOn(panel);
        // ...
    }

    public void addOn(Container container) {
        container.add(panel);
    }
}
</code></pre>
    </div>