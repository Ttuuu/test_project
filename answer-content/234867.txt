<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To start, I don't know Ktor, so what I'm going to tell is when Ktor doesn't do additional stuff, which is highly probably not the case.</p>

<p>Coroutines are managers for threads: they tell threads what to do and when to do it.<br>
When you write a coroutine, everytime you come across a suspend-keyword, the thread that executes the task asks the coroutine what to do next. The coroutine can tell to continue with the task he was working on, but it can also tell the thread to do something else.</p>

<p>This is great if you have to work with triggers:</p>

<ul>
<li>A database-call</li>
<li>A with triggers the threads</li>
<li>Another thread that returns something.</li>
</ul>

<p>Instead of waiting, the coroutine can tell the thread to do something else and once it comes across the <code>suspend</code>-keyword to continue with the task if the trigger is fulfilled.</p>

<p>In your code, you introduce a side-task by adding the async-keyword.
The next thing you do is telling to wait on this side-task.
This means that apart from adding a suspend-keyword, it does nothing.</p>

<p>So, a coroutine is not for computation, but for waiting. However, coroutines can manage more than one thread. Giving the side-task to a side-thread and waiting for that side-thread to finish is something that coroutines are great for.</p>

<p>Therefor, your code could be better written as:</p>

<pre><code>/**
 * A dedicated context for sample "compute-intensive" tasks.
 */
val compute = newFixedThreadPoolContext(4, "compute")

get("/"){
    val key = withContext(compute){
       //heavy computation
    }
    call.respond(key.toString())
}
</code></pre>

<p>The expanded example can be found here: <a href="https://ktor.io/samples/feature/async.html" rel="nofollow noreferrer">https://ktor.io/samples/feature/async.html</a></p>
    </div>