<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One idea for simplification is to count frequencies directly instead of putting all the values in an array that you only use for counting frequencies. You can then remove the <code>getFrequencyCounts</code> function and the whole thing gets a little more efficient. This works well when you have a set of values in a dense range like [80,85]. If you have a lot of values far between eachother, using a <code>set</code> or <code>unordered_set</code> is probably a better choice. I found the code easy enough to read. Here are some ideas with comments in the code:</p>

<pre><code>#include &lt;array&gt;
#include &lt;iostream&gt;

constexpr size_t INPUTSIZE = 10;
constexpr int MINLEGALVALUE = 80;
constexpr int MAXLEGALVALUE = 85;
constexpr size_t FREQUENCYSIZE = MAXLEGALVALUE - MINLEGALVALUE + 1;

std::array&lt;unsigned, FREQUENCYSIZE&gt; getUserInputFreq() {
    std::array&lt;unsigned, FREQUENCYSIZE&gt; inputValues{0}; // initialize with 0

    size_t i = 0;
    do {
        int inputValue = 0;
        std::cout &lt;&lt; "Please enter a number between " &lt;&lt; MINLEGALVALUE &lt;&lt; " and "
                  &lt;&lt; MAXLEGALVALUE &lt;&lt; ":";

        // make sure the istream you read from succeeded in extracting
        if(std::cin &gt;&gt; inputValue) {
            if(inputValue &gt;= MINLEGALVALUE &amp;&amp; inputValue &lt;= MAXLEGALVALUE) {
                // count frequencies directly if you don't actually need the
                // input values
                ++inputValues[static_cast&lt;size_t&gt;(inputValue - MINLEGALVALUE)];
                ++i; // prefer prefix operator++
            } else {
                std::cout &lt;&lt; "The number must be between" &lt;&lt; MINLEGALVALUE &lt;&lt; " and "
                          &lt;&lt; MAXLEGALVALUE &lt;&lt; "\n";
            }
        } else     
            break; // erroneous input or EOF

    } while(i &lt; INPUTSIZE);

    return inputValues;
}

void printFrequencies(std::array&lt;unsigned, FREQUENCYSIZE&gt; freqs) {
    int rowLabel = MINLEGALVALUE;
    for(auto frequency : freqs) {
        std::cout &lt;&lt; rowLabel &lt;&lt; "      " &lt;&lt; frequency &lt;&lt; "\n";
        ++rowLabel; // prefer prefix operator++
    }
}

int main() {
    std::array&lt;unsigned, FREQUENCYSIZE&gt; freqs = getUserInputFreq();

    std::cout &lt;&lt; "\n";

    printFrequencies(freqs);
}
</code></pre>
    </div>