<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.join?view=netframework-4.8#System_String_Join_System_String_System_Collections_Generic_IEnumerable_System_String__" rel="nofollow noreferrer">String.Join</a> makes this kind of string operation a breeze:</p>

<pre><code>// DON'T USE THIS - SQL INJECTION
string predicates = string.Join(" OR ", 
        batchNos.Select(item =&gt; item.Split('/')[1])
                .Distinct()
                .Select(splitItem =&gt; $"[TraceableItem].[IdentificationNo] LIKE N'%{splitItem}'"));
string queryInsertString = "(" + predicates + ")";
</code></pre>

<p>You'll notice the all capital warning not to use that code. It's not just because I haven't even checked if it compiles/works, it's because this kind of thing introduces a SQL Injection Vulnerability.</p>

<p>What you need to do is read up on using SqlParameters in C#. You'll want to generate SQL that looks more like:</p>

<pre><code>[TraceableItem].[IdentificationNo] LIKE @param1 OR [TraceableItem].[IdentificationNo] LIKE @param2
</code></pre>

<p>You then need to create a SqlParameter instance for each one and add that to the SqlCommand before you execute it. That's assuming you're using Ado.Net, if you're using a framework you'll have to look up the right way of doing it in the one you're using.</p>

<p>The danger is that if someone passes a batch number of <code>"a/'); delete from Users; --"</code>, you'll end up creating a query that looks like: </p>

<pre><code>WHERE ([TraceableItem].[IdentificationNo] LIKE N''); delete from Users; -- ...
</code></pre>

<p>You do not want a user to be able to do that!</p>
    </div>