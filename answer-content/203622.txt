<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Looks pretty good.</h3>

<p>I'm surmising that the console application is just a test/demo driver, and the code you want reviewed is just the <code>Provider</code> class at the bottom. I don't see any problems with its thread safety, or anything egregious in the way of style.</p>

<p>I do have some comments, though.</p>

<ol>
<li><p>The queue class implements an empty interface. If you plan on having multiple implementations, there will be some value in defining a common set of methods here. If you don't plan on having multiple implementations, the value of having an interface (empty or not) is diminished.</p></li>
<li><p>The <code>inputBuffer</code> and <code>queue</code> fields are initialized from within the constructor. I often like to initialize fields like these at their declaration, for two reasons. One, suppose a future developer adds a constructor overload accepting an <code>int capacity</code>. That developer won't need remember to chain to the empty constructor, and they won't need to set those fields from within the overload. Two, it communicates to future developers that there is "nothing up my sleeve"; it says "I have a private queue field, and it will always be exactly what you expect: a non-null, initially empty queue. You don't have to worry about it".</p></li>
<li><p>The <code>Dequeue</code> method will return <code>null</code> when the queue is empty. I would encourage you to instead write a <code>bool TryDequeue(out IItem)</code> method, and/or have <code>Dequeue</code> throw when the queue is empty. This both brings you closer in line to standard library's <code>Queue</code> behavior, and helps keep <code>null</code> values out of your program.</p></li>
<li><p>The "item exists or queue is full" check in <code>TryEnqueue</code> is a pretty long line. You might add a <code>private bool CanAdd(IItem)</code> method to handle those details.</p></li>
<li><p>The <code>inputBuffer</code> is a <code>Dictionary</code>, but the values are never used. If you have no plans to use them, you might "Keep It Simple" by changing this to a <code>HashSet</code>.</p></li>
<li><p>An item can't be re-queued, even after being dequeued, because the <code>inputBuffer</code> is never cleared. I'm not sure if this is intentional; if re-adding an item is a valid use case you'll want to evict that item's ID from the <code>inputBuffer</code> in <code>Dequeue</code>.</p></li>
<li><p>Items lose their type once they're put in the queue: You may enqueue a <code>Document</code>, but when it's dequeued you'll have an <code>IItem</code> you'll need to cast back to <code>Document</code>. The solution to this would be to make the class generic, which would look something like this:</p></li>
</ol>



<pre class="lang-cs prettyprint-override"><code>public class Provider&lt;TItem&gt; where TItem : IItem
{
    private readonly Queue&lt;TItem&gt; queue = new Queue&lt;TItem&gt;();
    private readonly HashSet&lt;TItem&gt; inputBuffer = new HashSet&lt;TItem&gt;();

    // other methods and fields ...

    private bool CanAdd(TItem feedingItem)
    {
        return !inputBuffer.Contains(feedingItem.Id) // IItem.Id is still accessible
            &amp;&amp; !queue.Count &gt;= maxQueueCount;
    }

    public TItem Dequeue()
    {
        // thread safety code ...
        return queue.Dequeue();
    }
}
</code></pre>

<p>And would be used something like this:</p>



<pre class="lang-cs prettyprint-override"><code>var queueProvider = new Provider&lt;Document&gt;();
var inputDoc = new Document();
queueProvider.TryEnqueue(inputDoc);
var outputDoc = queueProvider.Dequeue(); // Type of outputDoc is Document
var outputId = outputDoc.MessageId; // MessageId is accessible without cast
</code></pre>

<p>Beyond that, my only advice would be to consider the names carefully:</p>

<ul>
<li><p>The class is called <code>Provider</code>, but it behaves like a queue. Why not call it a <code>ConcurrentQueue</code>, or even <code>CappedConcurrentQueue</code> to hint at the maximum size limitation?</p></li>
<li><p>If the <code>IItem</code> interface is intended only for use with queues, I would suggest you ensure it's in a queue-specific namespace, or rename it to <code>IQueueItem</code> (maybe both). If it's intended for more general use, I would suggest naming it something more indicative of its details... perhaps <code>IIdentifiable</code>, since its only method provides an identifier?</p></li>
<li><p>The collection of item IDs currently in the queue is called <code>inputBuffer</code>, which to me indicates that it's a temporary place to hold items before they enter the real queue (<a href="http://definr.com/buffer" rel="nofollow noreferrer">like definition 3 here</a>). I would have named it something more descriptive of its actual use, like <code>currentItemIds</code>.</p></li>
<li><p>The argument to <code>TryEnqueue</code> is called <code>feedingItem</code>, but the idea that I'm feeding the item into the queue is already suggested by the name of the method I'm calling. The standard library's <code>Queue.Enqueue</code> just calls its argument <code>item</code>, and I would agree that's sufficient.</p></li>
</ul>
    </div>