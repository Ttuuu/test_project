<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, the names in your code are not very clear.
What does <code>Maps</code> mean? why <code>COLOR_RED</code>, and why is the associated code <code>ABC</code>?
Do you have only one value in you enum?</p>

<p>Maybe this is just an example code, but this is rather difficult to analyze.</p>

<p>For example, if your value was named <code>ABC</code>, you could simply call <code>Maps.valueOf("ABC")</code> to have the associated enum and get the corresponding description without needing a internal map.</p>

<p>Of course, if you need both <code>Colors</code> and <code>Codes</code>, you will have to relate them somehow. But <strong>why</strong> even use <em>Strings</em>? Maybe you could have another enumeration called <code>Colors</code> (defining COLOR_RED), so that the relationship between a color and a code is done only using enumerated types. </p>

<p>I haven't written in Java for some time now, but if I remember correctly, <code>EnumMap</code>s (e.g. from <code>Colors</code> to <code>Codes</code> and conversely) are very efficient  (like integer indices in an array); moreover, <code>switch</code> case over enums are also more efficient and provide more feedback from the compiler: static analysis can tell you whether you take into account all the possible enums, or not; this simplifies a lot your code because you don't need to bother with error checking.</p>

<p>Of course, Strings are necessary when dealing with data coming from outside of your application. But the can be avoided most of the time when exchanging data internally.</p>

<p>Hope this helps.</p>
    </div>