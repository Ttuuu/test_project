<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, you should encapsulate your functionality in a function, unless you really want to use your code only once. At the moment you would have to duplicate your code somewhat just to check a second credit card. So instead let us write a function with a doc string:</p>

<pre><code>def is_valid_card_number(sequence):
    """Returns `True' if the sequence is a valid credit card number.

    A valid credit card number
    - must contain exactly 16 digits,
    - must start with a 4, 5 or 6 
    - must only consist of digits (0-9) or hyphens '-',
    - may have digits in groups of 4, separated by one hyphen "-". 
    - must NOT use any other separator like ' ' , '_',
    - must NOT have 4 or more consecutive repeated digits.
    """

    #  do your stuff here
</code></pre>

<p>However, credit card numbers follow a fixed pattern, and therefore are a perfect candidate for regular expressions:</p>

<pre><code>import re

PATTERN='^([456][0-9]{3})-?([0-9]{4})-?([0-9]{4})-?([0-9]{4})$'
</code></pre>

<p>This might seem arcane, so let us have a look at that pattern. Anything inside parentheses is considered a group. So we have four groups: <code>([456][0-9]{3})</code> and three times <code>([0-9]{4})</code>. The hyphens in between have <code>?</code> and are therefore optional. If they exist, they must occur once, so <code>--</code> is not allowed.</p>

<p>The <code>[â€¦]</code> indicates are character class. Only characters inside that class are allowed at that point. The <code>^</code> indicates that we're describing the start of our string, not some point in the middle. So we have to start with 456. That requriement is now met. We're followed by 3 (<code>{3}</code>) digits. Our first group therefore consists of four digits, and so do the others. The <code>$</code> makes sure that there is nothing left: our string has to stop there.</p>

<p>The <a href="https://docs.python.org/3/library/re.html" rel="noreferrer">re</a> documentation provides more information.</p>

<p>We now have met most of our conditions:</p>

<ul>
<li>we have 16 digits </li>
<li>we have groups of four</li>
<li>we only have digits or hyphens</li>
<li>we start with a 4, 5 or 6</li>
</ul>

<p>We're missing the four consecutive digits. This is now tricky, since it's not clear whether the hyphens are part of the run. If they are only invalid four 4 character groups, we can simply check whether the current character <code>* 4</code> is the complete group:</p>

<pre><code>import re

PATTERN='^([456][0-9]{3})-?([0-9]{4})-?([0-9]{4})-?([0-9]{4})$'

def is_valid_card_number(sequence):
    """Returns `True' if the sequence is a valid credit card number.

    A valid credit card number
    - must contain exactly 16 digits,
    - must start with a 4, 5 or 6 
    - must only consist of digits (0-9) or hyphens '-',
    - may have digits in groups of 4, separated by one hyphen "-". 
    - must NOT use any other separator like ' ' , '_',
    - must NOT have 4 or more consecutive repeated digits.
    """

    match = re.match(PATTERN,sequence)

    if match == None:
        return False

    for group in match.groups:
        if group[0] * 4 == group:
            return False
    return True
</code></pre>

<p>If the repeated digits may also not span hyphens/groups it gets a little bit more complicated, but not too much. This is left as an exercise, though.</p>

<p>That being said: make sure to handle multiple numbers, not a single one. That way you will be able to check your code easier. But that depends. If it's a single use script, you probably don't have a need for a function.</p>
    </div>