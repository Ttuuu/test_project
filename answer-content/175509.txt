<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks good in many aspects!</p>

<p>Thumbs up for the <code>Operation</code> interface and its implementations.</p>

<p>Thumbs up for the JUnit tests.</p>

<p>Thumbs up for the <code>operationMap</code>.</p>

<p>What I'd do differently is the cardinality / life cycle of the <code>Calculator</code> instance(s). </p>

<p>You are creating a new <code>Calculator</code> for every calculation you are doing (and together with the <code>Calculator</code>, new <code>Operation</code>s).</p>

<p>I'd have one <code>Calculator</code> instance, filling the <code>operationMap</code> the way you did, but not taking the <code>double operand1, double operand2, char operation</code> parameters in the constructor. I'd move them to the makeCalculation() method, changing that to <code>makeCalculation(double operand1, double operand2, char operation)</code>.</p>

<p>This way the Calculator's initialization needs to run only once, and then he's ready for as many calculations as you want - just like a hardware calculator that you typically use for more than one calculation. And there's no longer a need for the Calculator to permanently store the <code>operand1</code>, <code>operand2</code>, and <code>operation</code> as fields.</p>

<p>And some details you could improve:</p>

<ul>
<li><p>You're mixing computation and output (<code>System.out.println()</code> ) in <code>makeCalculation()</code>. That makes your otherwise good calculator unsusable in e.g. a GUI or a web application.</p></li>
<li><p>The error handling in <code>makeCalculation()</code> should throw an exception if something goes wrong instead of printing something to <code>System.out</code>. This tells your caller that you weren't able to compute a result.</p></li>
<li><p>When called with an invalid operation, <code>makeCalculation()</code> might run into a NullPointerException although you try to handle that in your <code>if</code> construct.</p></li>
</ul>
    </div>