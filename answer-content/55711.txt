<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Performance:</h2>

<pre><code>if start_list in list_of_existing_nodes:
    point_index=list_of_existing_nodes.index(start_list)
    nodes_list[point_index][1].append(feature["FID"])
</code></pre>

<p>This is not an efficient way to update an existing element. The fact that you want to lookup a node based on it's coordinates means that you are using the wrong data structure. A dictionary is explicitly designed to make key-based lookups fast, making this type of manipulation easy. This way you can have the point object as the key and the value would be the data object that might have a <code>FID</code> value.</p>

<p>What you have now will cause each look to iterate over the entire list to see if the node exists. Then when it does, iterate again to find the index. As the number of nodes increase, the lookup will take longer and longer. Using a dictionary will take a constant amount of time independent of how many nodes are in the collection.</p>

<hr>

<pre><code>def iterate_features(self):
    feature_set = arcpy.SearchCursor(self.Address)
    for feature in feature_set:
        yield feature

def create_new_dict(self):
    iterator = self.iterate_features()
    for item in iterator:
        # ...
</code></pre>

<p>This is not providing any benefit. If <code>SearchCursor</code> creates a list, then the list has already been allocated containing all of the values. This means your generator method is just adding additional iteration overhead when switching back and forth between contexts. If <code>SearchCursor</code> is already a generator (which I suspect is the case based on the name cursor), you are just wrapping it without adding any additional values.</p>

<hr>

<h2>Other Points:</h2>

<p><code>coordinates_list</code> is never used, so remove it. Additionally, this is the only case where you use <code>list()</code> instead of <code>[]</code>, you should be consistent and use <code>[]</code>.</p>

<hr>

<p>Don't suffix your variables with <code>_list</code>, making the name plural should be sufficient to convey that the value is a collection.</p>

<hr>

<p>A list is not a great data structure for when each index has specific meaning. If you just need a simple data store object, <a href="https://docs.python.org/3.4/library/collections.html#collections.namedtuple" rel="nofollow"><code>namedtuple</code></a> is great for that.</p>

<p>The data you are pulling values from has <code>X</code> and <code>Y</code> attributes. Is there a reason you don't just use that object directly?</p>

<p>Creation of the start and stop point can be cleaned up a lot, even if you stick with lists.</p>

<pre><code>shape = feature["Shape"]
start = [shape.firstPoint.X, shape.firstPoint.Y]
end = [shape.lastPoint.X, shape.lastPoint.Y]
</code></pre>

<hr>

<pre><code>if nodes_list.__len__() is not 0:
</code></pre>

<p>should be </p>

<pre><code>if len(nodes_list) == 0:
</code></pre>

<p>The built-in function is much cleaner and doesn't depend in the internal implementation.</p>

<p><code>is</code> is an identity comparison and <code>==</code> is an equivalence comparison. The fact that an identity comparison works is an implementation detail and is not guaranteed to always be true.</p>

<p>Edit:
Since we are dealing with a list, this check is also equivalent to</p>

<pre><code>if not nodes_list:
</code></pre>

<p>This is the recommended style by the <a href="http://legacy.python.org/dev/peps/pep-0008/" rel="nofollow">style guide</a>.</p>

<hr>

<p>You are performing the same operation for the start and end points. you can create a single function that does the operation instead of repeating the code. When you change to using a dictionary, write the generic function first, then you can call it once for each point.</p>

<hr>

<p>The naming convention for instance variables is lower_case. <code>Address</code> will make other people think it is a class.</p>
    </div>