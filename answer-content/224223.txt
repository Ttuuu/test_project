<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<p>In idiomatic Java, open curly braces belong on the same line, not a newline.</p>

<p>In idiomatic Java, variable names use camelCase. Underscores are only used when naming constants.</p>

<p>Classes not designed for extension should be marked as <code>final</code>. Variables that will not be reassigned should be marked as <code>final</code>. This clarifies the design intent of the author and makes it easier to read the code, because you have a compiler-enforced guarantee against change/extension.</p>

<p>Curly braces should always be used, even when they're optional. They make it easier to read the code and harder to introduce bugs when modifying the code later.</p>

<p>If you haven't read the excellent JavaWorld article on <code>Runtime.exec()</code>, you should. <a href="https://www.javaworld.com/article/2071275/when-runtime-exec---won-t.html" rel="nofollow noreferrer">https://www.javaworld.com/article/2071275/when-runtime-exec---won-t.html</a></p>

<p>You may also consider using <code>ProcessBuilder</code>. It's a little easier to read and is more flexible. <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html</a></p>

<p>If IntelliJ has some framework for logging, that may be preferable to writing directly to <code>System.out</code> and <code>System.err</code> (with <code>e.printStackTrace()</code>). This is doubly true if, as it appears, your <code>System.out</code> calls are intended for debugging purposes.</p>

<h1>TidyImportAction</h1>

<p>You should probably add a no-arg constructor so you can specify the action name.</p>

<p><code>pyflyby_output</code> is built, but never used. As is, it should be removed.</p>

<p><code>p</code> is a poor name for a variable. <code>process</code> would be better.</p>

<p><code>p</code> can be defined inside the <code>try</code> block.</p>

<p>Your <code>null</code> checks do nothing. If <code>s</code> was null, you'd break out of the <code>while</code> loop. If you somehow got past that, you'd get a <code>NullPointerException</code> when checking if it started with <code>[PYFLYBY]</code>.</p>

<p>Modifying a <code>String</code> is expensive. Use the mutable <code>StringBuilder</code> instead. The compiler is probably doing this for you behind the scenes.</p>

<p>There's no value to <code>finalModified_source_code</code>. Just use the <code>String</code> value.</p>

<h1>HotImportsAction</h1>

<p><code>hotimports_enabled</code> is a <code>Boolean</code> (object), but can never be null. You should prefer <code>boolean</code> (primitive). It's slightly more efficient, and also makes it clear that it cannot ever be null.</p>

<p><code>hotimports_enabled</code> should be <code>private</code>, as it's not intended to be available outside <code>HotImportsAction</code>.</p>

<p>Don't explicitly compare boolean values to <code>true</code> and <code>false</code>. Just use <code>if (whatever)</code>, not <code>if (whatever == true)</code>.</p>

<p>Delete commented-out code. All of your non-code comments are really just visual noise and can also be removed.</p>

<p>Guard clauses make your code less indented in general, and thus easier to read.</p>

<p><code>actionPerformed</code> should be annotated with <code>@Override</code>.</p>

<p><code>psi_file</code> is unused and should be removed. Likewise <code>print_expressions</code>.</p>

<p>Catch the most specific exception you can. In particular, catch <code>IOException</code> instead of <code>Exception</code>.</p>

<p></p><hr>
If you were to make all of these changes, your code might look more like:

<pre><code>public final class TidyImportAction extends AnAction {

    public TidyImportAction() {
        super("Tidy Import");
    }

    @Override
    public void actionPerformed(final AnActionEvent event) {
        final Document document = event.getData(LangDataKeys.EDITOR).getDocument();
        final String sourceCode = document.getText().replace("\"","\\\"");
        final String[] cmd = {
                "/bin/sh",
                "-c",
                String.format("echo \"%s\" | tidy-imports", sourceCode)
        };

        try {
            final Process process = Runtime.getRuntime().exec(cmd);
            final BufferedReader standardInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
            final BufferedReader standardError = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            final StringBuilder modifiedSourceCode = new StringBuilder();

            String s = "";
            while ((s = standardInput.readLine()) != null) {
                if (!s.startsWith("[PYFLYBY]")) {
                    modifiedSourceCode.append(s).append("\n");
                }
            }

            while ((s = standardError.readLine()) != null) {
                if (!s.startsWith("[PYFLYBY]")) {
                    modifiedSourceCode.append(s);
                }
            }

            ApplicationManager.getApplication().runWriteAction(() -&gt; {
                document.setText(modifiedSourceCode.toString());
            });


        } catch (final IOException e) {
            e.printStackTrace();
        }
    }

}
</code></pre>

<hr>

<pre><code>public final class HotImportsAction extends AnAction {

    private boolean hotImportsEnabled = false;

    public HotImportsAction() {
        super("Enable HotImports");
        System.out.println("Registering file watch");

        VirtualFileManager.getInstance().addVirtualFileListener(new VirtualFileListener() {
            @Override
            public void contentsChanged(final VirtualFileEvent event) {
                final VirtualFile virtualFile = event.getFile();
                System.out.println("contentsChanged: " + virtualFile.toString());

                if (!virtualFile.toString().endsWith(".py")) {
                    return;
                }

                System.out.println("hotImportsEnabled = " + hotImportsEnabled);
                if (!hotImportsEnabled) {
                    return;
                }

                System.out.println("File Changed: " + virtualFile.toString());

                final DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                System.out.println(dateFormat.format(new Date()));

                final String filePath = event.getFile().getPath();

                runTidyImports(filePath);
                virtualFile.refresh(false, false);
            }
        });
    }

    @Override
    public void actionPerformed(final AnActionEvent event) {
        final Presentation presentation = event.getPresentation();
        if (hotImportsEnabled) {
            presentation.setText("Enable HotImports");
        } else {
            runTidyImports(event.getData(PlatformDataKeys.VIRTUAL_FILE).getPath());
            presentation.setText("Disable HotImports");
        }
        hotImportsEnabled = !hotImportsEnabled;

        event.getData(PlatformDataKeys.VIRTUAL_FILE).refresh(false, false);
    }

    public static void runTidyImports(final String filePath) {
        System.out.println("Running tidy-imports on " + filePath);
        if (filePath == null || !filePath.endsWith(".py")) {
            return;
        }
        try {
            final Process p = Runtime.getRuntime().exec("tidy-imports -r " + filePath);
            final BufferedReader standardInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
            final BufferedReader standardError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

            System.out.println("Here is the standard output of the command:\n");
            String s = null;
            while ((s = standardInput.readLine()) != null) {
                System.out.println(s);
            }
            System.out.println("Here is the standard error of the command (if any):\n");
            while ((s = standardError.readLine()) != null) {
                System.out.println(s);
            }
        } catch (final IOException e) {
            System.out.println("exception happened - here's what I know: ");
            e.printStackTrace();
        }
    }
}
</code></pre>
    </div>