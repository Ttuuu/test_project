<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>EDIT: Takes 10 minutes to learn BF -- and I didn't realize it was so simple.</p>
<ol>
<li>Is this readable and understandable?</li>
<li>Does my use of the $-lines makes sense?</li>
<li>Does it help to understand the code?</li>
<li>Can it be even more optimized somehow?</li>
</ol>
<p>Your assert messages are a little strange for me, but I poke fun at how the Spring Framework checks it's own private values to be null and throwing an exception if they are (for the user to handle).</p>
<p>The <code>100</code>, <code>200</code>, and <code>250</code> could easily be read to 10, 20, 25 and multiply by 10 on the countdown loop.</p>
<p><code>Write out the first ones</code> but then having the <code>$name 'zero'</code> is unclear because you're on 48/49 -- it's unclear which 'zero' you're referring to. Because you're already printed out (yes your pointer is on zero again but I see a one).</p>
<pre><code>0
1
</code></pre>
<p><code>Digit 1 Value X</code> is fine and it's easy enough to scale. Though I would use "One's place for value X" instead.</p>
<p>The extra increments before and after `$name 'digitStart' are also "what did he do here, and why?"</p>
<p>After taking the time to read how BF works, the "Set A = C and stop at C" is still confusing.</p>
<p>I would also move your Groovy declarations to before the assignment instead of after</p>
<pre><code>$ name 'X'
&gt; +
</code></pre>
<p>for example. As a reader that goes line by line, seeing B = A before A has been declared to be something is weird.</p>
<p>Your actual printing out and calculation loop is clever. I was trying to find how you tested if the value got above 9 for the longest time.</p>
<p>Leaving this even though it's completely unneeded and unrelated at this point in case someone wants it.
Just for ridiculous reference, this is the one's place repeating sequence. (Length of 60)</p>
<pre><code>0, 1, 1, 2, 3, 5, 8, 3, 1, 4, 5, 9, 4, 3, 7, 0, 7, 7, 4, 1, 5, 6, 1, 7, 8, 5, 3, 8, 1, 9, 0, 9, 9, 8, 7, 5, 2, 7, 9, 6, 5, 1, 6, 7, 3, 0, 3, 3, 6, 9, 5, 4, 9, 3, 2, 5, 7, 2, 9, 1
</code></pre>
    </div>