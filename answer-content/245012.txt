<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using Map, below is the code:</p>
<pre><code>func (receiver *Receiver) Print(nextSequenceIn uint64, object *data.Object, outputFile io.Writer) bool {
    receiver.receivedObjects[nextSequenceIn] = object
    if receiver.nextSeqNumExpected == nextSequenceIn { // set the next sequence expected
        key := nextSequenceIn + 1
        delete(receiver.receivedObjects, nextSequenceIn)
        for {
            if _, ok := receiver.receivedObjects[key]; !ok {
                receiver.nextSeqNumExpected = key
                break
            }
            key++
        }
    }
    fmt.Fprintf(outputFile, "[ ")
    continu := receiver.printBatch(outputFile)
    fmt.Fprintf(outputFile, "]")
    receiver.printedSequences = 0
    fmt.Fprintf(outputFile, "   ----------for input value %d\n", nextSequenceIn)
    return continu
}

func (receiver *Receiver) printBatch(outputFile io.Writer) bool {
    sequenceNumber := uint64(0)
    batchSize := config.GetBatchSize()
    for sequenceNumber+(batchSize-1) &lt; receiver.nextSeqNumExpected { // received unbroken sequences are [0, receiver.nextSeqNumExpected-1]
        if receiver.printedSequences+batchSize &gt; receiver.maxObjectsToPrint {
            receiver.Log.Printf("****Max objects(%d) to print is reached\n", receiver.maxObjectsToPrint)
            return false
        }
        for j := sequenceNumber; j &lt; sequenceNumber+batchSize; j++ {
            fmt.Fprintf(outputFile, "%d, ", j)
            receiver.printedSequences++

        }
        sequenceNumber += batchSize
    }
    return true
}
</code></pre>
<p>Ran below commands:</p>
<pre><code>$ export BATCH_SIZE=3
$ export MAX_OBJECTS_TO_PRINT=25
$ 
$ ~/code/bin/threadapp 
*****Main exit
$
</code></pre>
<hr>
<p><a href="https://github.com/shamhub/threadapp/blob/master/receiver_output" rel="nofollow noreferrer">here</a> is the output</p>
    </div>