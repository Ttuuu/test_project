<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Writing Style</h2>

<ol>
<li><p>In Swift, semicolons are not needed at the end of a line.</p></li>
<li><p>Specifying <code>self</code> in <code>self.suit</code> and <code>self.rank</code> is not needed (since there is no possible confusion). The compiler can infer that you are referring to the properties of this class.</p></li>
</ol>

<hr>

<h2>Initializer</h2>

<p>With <code>rank</code> and <code>suit</code> defined as integers, a card would be initialized with <code>-1</code> as rank and suit if <code>n &lt; 0</code>. As defined, the initializer would produce an invalid card. An honest initializer would fail instead :</p>

<pre><code>init?(n: Int) {
    guard n &gt;= 0 &amp;&amp; n &lt;= 51 else {
        return nil
    }
    rank = n % 13
    suit = n / 13
}
</code></pre>

<p>And since the suit and rank properties can't be changed (you've defined them as private properties with getter methods), it would be appropriate to define them as 
 constants:  <code>let</code> instead of <code>var</code>: </p>

<pre><code>private let rank: Int
private let suit: Int
</code></pre>

<hr>

<h2>Type Choices</h2>

<ol>
<li><p>Creating a card based on an integer isn't very intuitive. An alternative choice, as you've mentioned, would be using enums. Such an approach avoids the possibility of creating an invalid <code>Card</code> :</p>

<pre><code>enum Suit: Character {
    case spades = "♠", hearts = "♡", diamonds = "♢", clubs = "♣"
}

enum Rank: Int {
    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king
}
</code></pre></li>
</ol>

<p>Usually, it is not sufficient to look for equality when comparing the rank of a card. The value associated with a rank could be defined in a Blackjack game <a href="https://docs.swift.org/swift-book/LanguageGuide/NestedTypes.html" rel="nofollow noreferrer">this way</a>.</p>

<ol start="2">
<li>Using a struct instead of a class would be encouraged here since there is no flagrant purpose of having a shared mutable state for a Card instance. Plus, value types are stored in the Stack instead of the Heap, which allows quicker access. </li>
</ol>

<hr>

<p>Here is a version of your code with all the previous suggestions :</p>

<pre><code>enum Suit: Character {
    case spades = "♠", hearts = "♡", diamonds = "♢", clubs = "♣"
}

enum Rank: Int {
    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king
}

class Card {

    private let rank: Rank
    private let suit: Suit

    init(_ rank: Rank, of suit: Suit) {
        self.rank = rank
        self.suit = suit
    }

    func getRank() -&gt; Rank {
        return rank
    }

    func getSuit() -&gt; Suit {
        return suit
    }

    func compareRank(with otherCard: Card) -&gt; Bool {
        return rank == otherCard.getRank()
    }

    func compareSuit(with otherCard: Card) -&gt; Bool {
        return suit == otherCard.getSuit()
    }
}
</code></pre>

<p>And you could use it like so :</p>

<pre><code>let a = Card(.ace, of: .spades)
let q = Card(.queen, of: .hearts)

print(a.getRank())              //ace
print(a.getSuit())              //spades
print(a.getSuit().rawValue)     //♠
print(q.getRank().rawValue)     //12
print(a.compareRank(with: q))   //false
print(a.compareSuit(with: q))   //false
</code></pre>
    </div>