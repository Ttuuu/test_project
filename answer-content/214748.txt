<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Don't repeat yourself</h3>

<p>Some snippets appear repeatedly in the code, for example:</p>

<blockquote>
<pre><code>if type -p some-command &gt;/dev/null; then ...
</code></pre>
</blockquote>

<p>Make it a function:</p>

<pre><code>have_command() {
    type -p "$1" &gt;/dev/null
}
</code></pre>

<p>And then you can write more naturally:</p>

<pre><code>if have_command notify-send; then
    notify-send ...
fi
</code></pre>

<p>The same for checking if running in terminal:</p>

<pre><code>in_terminal() {
    [ -t 0 ]
}
</code></pre>

<h3>Avoid excessively long lines</h3>

<p>It can be annoying to have to scroll to the right to see what this line is about:</p>

<blockquote>
<pre><code>[ -t 0 ] || if type -p notify-send &gt;/dev/null; then notify-send "$1"; else xmessage -buttons Ok:0 -nearmouse "$1" -timeout 10; fi
</code></pre>
</blockquote>

<p>On top of that, I think an <code>if</code> statement is easiest to read in this form:</p>

<pre><code>if ...; then
    ...
else
    ...
fi
</code></pre>

<p>Lastly, I think it's hard to read when an <code>if</code> statement is chained after a previous command with <code>||</code>.</p>

<p>I would find this easier to read:</p>

<pre><code>in_terminal &amp;&amp; return
if have_command notify-send; then
    notify-send "$1"
else
    xmessage -buttons Ok:0 -nearmouse "$1" -timeout 10
fi
</code></pre>

<h3>Use more functions</h3>

<p>This piece of code tries to detect an editor to use, by checking multiple alternatives:</p>

<blockquote>
<pre><code>editor=${VISUAL:-$EDITOR}
if [ -z "$editor" ];then
    if type -p nano &gt;/dev/null;then editor="nano"; fi
fi
if [ -z "$editor" ];then
    if type -p vim &gt;/dev/null;then editor="vim"; fi
fi
if [ -z "$editor" ];then
    echo "edit '$tmphost' to your liking, then hit Enter"
    read -p "I'll wait ... "
else
    "$editor" "$tmphost"
fi
</code></pre>
</blockquote>

<p>What's not great about this is if the first check succeeds, the other checks still run.
I mean, if <code>EDITOR</code> is already defined, then <code>if [ -z "$editor" ]</code> will still be executed 3 times for nothing.</p>

<p>This is a good opportunity to use a function with <em>early returns</em>:</p>

<pre><code>find_editor() {
    local editor=${VISUAL:-$EDITOR}
    if [ "$editor" ]; then
        echo "$editor"
        return
    fi

    for cmd in nano vim; then
        if have_command "$cmd"; then
            echo "$cmd"
            return
        fi
    done
}

editor=$(find_editor)

if [ -z "$editor" ]; then
    echo "edit '$tmphost' to your liking, then hit Enter"
    read -p "I'll wait ... "
else
    "$editor" "$tmphost"
fi
</code></pre>

<h3>Simplify conditions</h3>

<p>This condition is written more complicated than it needs to be:</p>

<blockquote>
<pre><code>if [ ! -z "$usegui" ];then
</code></pre>
</blockquote>

<p>You can simplify to:</p>

<pre><code>if [ "$usegui" ]; then
</code></pre>

<h3>Missed double-quoting</h3>

<p>You did a good job double-quoting variables used as command arguments. Here's one place you missed:</p>

<blockquote>
<pre><code>trap "rm $tmphost" EXIT
</code></pre>
</blockquote>

<p>This would be better written as:</p>

<pre><code>trap 'rm "$tmphost"' EXIT
</code></pre>
    </div>