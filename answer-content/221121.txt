<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could use <a href="https://docs.microsoft.com/de-de/dotnet/api/system.threading.threadpool.registerwaitforsingleobject?view=netframework-4.7.1" rel="nofollow noreferrer"><code>ThreadPool.RegisterWaitForSingleObject</code></a> to register a callback when a the <code>WaitHandle</code> (<code>Semaphore</code> extends <code>WaitHandle</code>) is signaled.</p>

<p>Together with a <code>TaskCompletionSource</code> you could completely remove all your wait loops.</p>

<p>Example:</p>

<pre><code>private async Task Run()
{
    var semaphore = new Semaphore(0, 1);
    await AwaitWaitHandle(semaphore, CancellationToken.None, TimeSpan.FromMilliseconds(-1));
}

private Task AwaitWaitHandle(WaitHandle handle, CancellationToken cancellationToken, TimeSpan timeout)
{
    var taskCompletionSource = new TaskCompletionSource&lt;bool&gt;();

    var reg = ThreadPool.RegisterWaitForSingleObject(handle,
        (state, timedOut) =&gt;
        {
            // Handle timeout
            if (timedOut)
                taskCompletionSource.TrySetCanceled();

            taskCompletionSource.TrySetResult(true);
        }, null, timeout, true);

    // Handle cancellation
    cancellationToken.Register(() =&gt;
    {
        reg.Unregister(handle);
        taskCompletionSource.TrySetCanceled();
    });

    return taskCompletionSource.Task;
}
</code></pre>

<p>You could use <code>AwaitWaitHandle</code> in your <code>SemaphoreAsync</code> implementation to await the Semaphore.</p>
    </div>