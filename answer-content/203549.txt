<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, the code review:</p>

<blockquote>
<pre><code>long int numArrs(int arr[], int n)
</code></pre>
</blockquote>

<p>With C++14, you can do better than use built-in arrays (decaying to a pointer in a function, whatever the signature says): use rather <code>std::vector</code>, or <code>std::array</code> if you know the size at compile time.</p>

<blockquote>
<pre><code>{
    int numEvens[n], l, i, j, evensIJ;
</code></pre>
</blockquote>

<p>Don't declare your variables unless you're ready to define them. Wait as much as possible to keep the declaration near to where you use your variable.</p>

<blockquote>
<pre><code>    if (arr[0] &amp; 1) numEvens[0] = 0;
    else numEvens[0] = 1;
</code></pre>
</blockquote>

<p>Try not to clutter your code with useless repetitions. For instance you might write:</p>

<pre><code>numEvens[0] = (arr[0] &amp; 1) ? 0 : 1;
</code></pre>

<p>or </p>

<pre><code>numEvens[0] = !(arr[0] &amp; 1);
</code></pre>

<p>By the way, don't hesitate to declare short functions that the compiler will inline, they'll make your code clearer:</p>

<pre><code>constexpr bool is_odd(int i) { return i &amp; 1; }
</code></pre>

<blockquote>
<pre><code>    for (i = 1; i &lt; n; i++)
        numEvens[i] = (arr[i] &amp; 1) ? (numEvens[i - 1]) : (1 + numEvens[i - 1]);
</code></pre>
</blockquote>

<p>Raw loops (<code>for</code> loops which don't say what they're doing) should be replaced with standard, named algorithms whenever you can. Look for instance at <code>std::partial_sum</code>.</p>

<blockquote>
<pre><code>    long int count = 0;
    for (l = 2; l &lt;= n; l += 2)
</code></pre>
</blockquote>

<p>try to give your variables more meaningful names, e.g : <code>l</code> -&gt; <code>length</code></p>

<blockquote>
<pre><code>    {
        if (l &gt; n) break;
        for (i = 0; i &lt; n - l + 1; i++)
        {
            j = i + l - 1;
            evensIJ = numEvens[j] - numEvens[i] + ((arr[i] &amp; 1) ? 0 : 1);
            if (2*evensIJ == (j - i + 1))
                count++;
        }
    }

    return count;
}
</code></pre>
</blockquote>

<p>This nested loop is why it's taking too much time. There's an <code>O(n)</code> algorithm for this, which relies on dynamic programming (your program doesn't, in my opinion). </p>

<p>The idea is to use a map to keep track of the imbalances you've seen; whenever you come back to an imbalance, it means that you're correcting it, and so you increase your result by the number of times you've visited it:</p>

<pre><code>long int count_balanced_subarrays(const std::vector&lt;int&gt;&amp; input) {

    std::map&lt;int, int&gt; imbalances;
    imbalances[0] = 1; // 0 is the initial position, that's why it's already marked

    unsigned odd_count = 0;
    unsigned even_count = 0;

    long int res = 0; 
    for (unsigned i = 0; i &lt; input.size(); ++i) {
        if (input[i] &amp; 1) ++odd_count;
        else ++even_count;
        res += imbalances[odd_count - even_count]++;
    } 
    return res;
}
</code></pre>
    </div>