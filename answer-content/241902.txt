<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've already done a good job cleaning things up, and running <code>clippy</code> puts you far ahead of other code I've seen. I'll be writing recommendations for other stuff you could add to make it nicer for the user, but is in no way necessary.</p>

<pre class="lang-rust prettyprint-override"><code>pub fn new() -&gt; Session {
    Session {
        scores: [(Player::Nought, 0), (Player::Cross, 0)]
            .iter()
            .copied()
            .collect(),
        first_player: Session::DEFAULT_FIRST_PLAYER,
    }
}
</code></pre>

<p>Just mentioning that <a href="https://docs.rs/maplit/1.0.2/maplit/macro.hashmap.html" rel="nofollow noreferrer"><code>maplit</code></a> has a macro to do this all in one. As I said earlier, there's no reason to do so, but it's an option.</p>

<p> </p>

<pre class="lang-rust prettyprint-override"><code>pub fn run(&amp;mut self) {}
fn display_help(&amp;self) {}
</code></pre>

<p>I'd refactor this to define the commands and their help messages in one, and then just iterate over them to print help and match input. You could do a <code>.map(str::len).max()</code> to get the largest command for right aligning. I'd also get rid of the extra space in between each entry.</p>

<p>However, if you want an even cooler selection menu, I'd check out <a href="https://docs.rs/dialoguer/0.6.2/dialoguer/struct.Select.html" rel="nofollow noreferrer"><code>dialoguer</code></a>. It will allow you to select what you want with up and down arrows to select an option:
<a href="https://i.stack.imgur.com/Uz5V8.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Uz5V8.png" alt="Selection prompt"></a></p>

<p> </p>

<pre class="lang-rust prettyprint-override"><code>fn rows(&amp;self) -&gt; impl Iterator&lt;Item = impl Iterator&lt;Item = &amp;Cell&gt;&gt; {}
fn columns(&amp;self) -&gt; impl Iterator&lt;Item = impl Iterator&lt;Item = &amp;Cell&gt;&gt; {}
fn diagonals(&amp;self) -&gt; impl Iterator&lt;Item = impl Iterator&lt;Item = &amp;Cell&gt;&gt; {}
</code></pre>

<p>Those should return <code>Iterator</code>s over <code>Cell</code>s, not <code>&amp;Cell</code>s. Just throw a <code>.copied()</code> at the end. You can then remove <code>occupied_by</code>'s lifetime stuff.</p>

<p> </p>

<pre class="lang-rust prettyprint-override"><code>pub fn wins(&amp;self, player: Player) -&gt; bool {
    self.rows().any(|row| occupied_by(row, player))
        || self.columns().any(|column| occupied_by(column, player))
        || self
        .diagonals()
        .any(|diagonal| occupied_by(diagonal, player))
}
</code></pre>

<p>Instead of asking if someone won, ask <em>who</em> won. See if the row is <a href="https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html#method.all_equal" rel="nofollow noreferrer"><code>all_equal</code></a>, and if so, return that <code>Player</code>. You'll probably be using <a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.or_else" rel="nofollow noreferrer"><code>Option::or_else</code></a> for that.</p>

<p> </p>

<pre class="lang-rust prettyprint-override"><code>#[derive(Debug, Eq, PartialEq)]
pub struct PlaceError {
    pub pos: Pos,
    pub occupied_by: Player,
}
</code></pre>

<p>Error types should implement <a href="https://doc.rust-lang.org/std/error/trait.Error.html" rel="nofollow noreferrer"><code>Error</code></a>.</p>

<blockquote>
  <p>I organized my code according to the Refactoring to Improve Modularity and Error Handling section of the book, but src/lib.rs and src/main.rs feel vacuous. Is this considered good design?</p>
</blockquote>

<p>Yes, it allows people to use it in many different use cases. Someone could take it and then embed it in their own games program that bundles a bunch of games together.</p>

<blockquote>
  <p>Am I over-engineering everything?</p>
</blockquote>

<p>Yeah you are. Tic-tac-toe, by definition, has two players. And you enforce that through the use of the <code>Player</code> enum. Then, you go and use a <code>HashMap</code> to store scores. There's no need to do this. Just store the X and O scores as two integers.</p>

<blockquote>
  <p>I used <code>impl Iterator&lt;Item = impl Iterator&lt;Item = &amp;Cell&gt;&gt;</code> as the return type of <code>Board::rows</code>, <code>Board::columns</code>, and <code>Board::diagonals</code>, because their implementations use different kinds of iterators.  Is it OK to unify the return types like this?</p>
</blockquote>

<p>Yes! Do things like that whenever you can.</p>

<p> </p>

<pre><code>if let Err(message) = input
    .parse()
    .or_else(|_| Err("Invalid move".to_owned()))
    .and_then(|pos| Pos::new(pos).ok_or_else(|| "Invalid position".to_owned()))
    .and_then(|pos| {
        self.board.place(pos, player).or_else(|place_error| {
            Err(format!(
                "Position {} occupied by {}",
                place_error.pos, place_error.occupied_by
            ))
        })
    })
</code></pre>

<p>Replace <code>.or_else(|_| Err("Invalid move".to_owned()))</code> with <code>.map_err(|_| "Invalid move".to_owned())</code>. Even better, use <a href="https://docs.rs/anyhow/1.0.28/anyhow/" rel="nofollow noreferrer"><code>anyhow</code></a>'s <code>.with_context()</code>, because <code>String</code>s aren't the best error type as they don't implement <a href="https://doc.rust-lang.org/std/error/trait.Error.html" rel="nofollow noreferrer"><code>Error</code></a>.</p>

<p>Here's that part rewritten with <code>anyhow</code>:</p>

<pre class="lang-rust prettyprint-override"><code>use anyhow::{bail, Context};
if let Err(message) = input
    .parse()
    .context("Invalid move")
    .and_then(|pos| Pos::new(pos).context("Invalid position"))
    .and_then(|pos| self.board.place(pos, player).map_err(Into::into))
{
    eprintln!("{:#}", message);
    continue;
}
</code></pre>

<p>That depends on implementing <code>Error</code> for <code>PlaceError</code>:</p>

<pre class="lang-rust prettyprint-override"><code>impl fmt::Display for PlaceError {
    fn fmt(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; fmt::Result {
        write!(f, "Position {} occupied by {}", self.pos, self.occupied_by)
    }
}
impl std::error::Error for PlaceError {}
</code></pre>
    </div>