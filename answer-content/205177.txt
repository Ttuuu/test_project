<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Redundant Code</h3>

<p>In your <code>push()</code> function, you have these two cases which are redundant:</p>

<blockquote>
<pre><code>// if stack is empty
if (head == NULL)
{
    strcpy(temp -&gt; string, element);
    temp -&gt; next = NULL;
    return temp;
}

strcpy(temp -&gt; string, element);
temp -&gt; next = head;
return temp;
</code></pre>
</blockquote>

<p>You can just remove the special case for <code>head == NULL</code> and be left with this, which handles both cases:</p>

<pre><code>strcpy(temp -&gt; string, element);
temp -&gt; next = head;
return temp;
</code></pre>

<h3>Better to iterate than recurse</h3>

<p>Your <code>destroy_stack()</code> function is recursive, and that could be a problem if the stack has millions of elements because it could cause your program stack to overflow.  It is easy enough to write an iterative version of that function instead, like this:</p>

<pre><code>void destroy_stack(node *p)
{
    while (p != NULL)
    {
        node *next = p-&gt;next;
        free(p);
        p = next;
    }
}
</code></pre>

<h3>Minor issues</h3>

<ul>
<li>In <code>push()</code>, using <code>strcpy()</code> is unsafe because <code>element</code> might exceed 20 characters and you will overflow your buffer.</li>
<li>In <code>push()</code>, if <code>malloc()</code> returns <code>NULL</code>, you return <code>NULL</code> and thus destroy/leak the rest of the stack.  Perhaps you should just return <code>head</code> instead, to preserve the rest of the stack.</li>
<li>In <code>pop()</code>, you might want to check for <code>head == NULL</code>, otherwise you must depend on the caller to never pass <code>NULL</code> to your function.</li>
</ul>
    </div>