<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Variables and logic 1</strong></p>
<p>I think it would be more standard to call the sides 0 and 1 and use those numbers to represent them.</p>
<p>If you do, you can simplify the side choosing code a bit, for example if the computer chooses <code>computer_side = 1</code> then you do <code>player_side = 1 - computer_side</code>  and vice versa. If the computer was 1 then player becomes 0 and it works both ways.</p>
<p><strong>Logic 2</strong></p>
<p><code>check_win('O', side) if side == 'X' else check_win('X', side)</code></p>
<p>This is unnecessarily complex and you don't need two different cases for it.
After each move, you just need to check if anybody wins, since only one player can win after any move (by the game rules).</p>
<p>All you need to keep track of is which side the player is, and in the <code>check_win</code> function you check both sides if either wins, then act accordingly.</p>
<p><strong>Logic 3</strong></p>
<pre><code>def ai_place(side):
    check_if_full()
</code></pre>
<p>It seems very unintuitive for me to check if the board is full before placing and then ending the game. I would check if the board is full <strong>after</strong> each move, not <strong>before</strong>.</p>
<p>It's also related so the <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> . A function called <code>ai_place</code> should only handle ai_placing, and it should already be taken care of that the board is not full (by checking that somewhere else, before calling this function).</p>
<p><strong>Naming</strong></p>
<pre><code>def play():
    player, computer, value = who_starts()
</code></pre>
<p>Since <code>value</code> represents "should the player start?" then it should be named something that indicates that too, for example <code>player_starts</code> is a fine name.</p>
<p>That also makes the next line
<code>if player_starts:</code> which is <strong>very</strong> readable, rather than <code>if value is True:</code></p>
<p><strong>Other</strong></p>
<pre><code>if value is True:
    player_place(player), ai_place(computer)  # The player won, so will start first
else:
    ai_place(computer), player_place(player)  # The computer won, starting first
</code></pre>
<p>You are "abusing" <a href="https://realpython.com/python-lists-tuples/" rel="nofollow noreferrer">tuple notation</a> here for no reason. A comma between two expressions creates a tuple.
Just put these on one line each since you're not actually using the tuple for anything.</p>
<pre><code>if value is True:
    player_place(player)
    ai_place(computer)  # The player won, so will start first
else:
    ai_place(computer)
    player_place(player)  # The computer won, starting first
</code></pre>
    </div>