<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend nesting dictionaries for your conversions. Usually if you have a long chain of <code>elif</code> comparisons to a string or number, you should use a dictionary.</p>

<p>You can store the first unit as the primary key, and then the second value is the key of the second unit. The values then all need to be a number that you can multiply by in order to perform the conversion. So to divide by 1000, instead the value to multiply by is <code>1/1000</code>. You could technically store functions to call in order to evaluate the conversions but just numbers is simpler.</p>

<pre><code>conversions = {
                "mm": {"mm": 1, "cm": 1/10, "m": 1/1000, "km": 1/1000000},
                "cm": {"mm": 10, "cm": 1, "m": 1/100, "km": 1/100000},
                "m":  {"mm": 1000, "cm": 100, "m": 1, "km": 1/1000},
                "km": {"mm": 100000, "cm": 10000, "m": 1000, "km": 1},
              }
</code></pre>

<p>This makes it easier to see if all of them are implemented, they're kept in neat rows so you can make sure none of the math seems off. Another advantage is that you can automatically generate a list of values to tell the user about.</p>

<pre><code>unit1 = raw_input ("Which unit would you like to convert from?\n"
                   "We support: " + ", ".join(conversions.keys()))
unit2 = raw_input ("Which unit would you like to convert to?\n")
                   "We support: " + ", ".join(conversions[unit1].keys()))
</code></pre>

<p>Also you could now make sure that the user is typing in a valid key this way.</p>

<pre><code>while True:
    try:
        unit1 = raw_input ("Which unit would you like to convert from?\n"
                           "We support: "
                           ", ".join(conversions.keys())).lower()
        unit2 = raw_input ("Which unit would you like to convert to?\m")
                           "We support: "
                           ", ".join(conversions[unit1].keys())).lower()
        convert = conversions[unit1][unit2]
    except KeyError:
        print ("That is not a valid key, please try again")
</code></pre>

<p><code>conversions[unit1][unit2]</code> is just called in order to test whether the key exists and will raise an error if it doesn't so that the user will be told to enter new keys. I also added <code>.lower()</code> so that if the user inputs <code>CM</code>, <code>Cm</code> or even <code>cM</code> they'll all be converted to <code>cm</code> to match the key.</p>

<p>I recommend wrapping the number input similarly, as it prevents errors later.</p>

<pre><code>while True:
    try:
        num1 = float(raw_input("Enter your value: " ))
    except ValueError:
        print ("That is not a valid float, please try again.")
</code></pre>

<p>Now when it comes to the actual logic, it's really quite simple since both values are already prepared:</p>

<pre><code>ans = num1 * convert
</code></pre>
    </div>