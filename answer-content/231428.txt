<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>Shop</code> constructor kind of threw me off guard when I read it:</p>

<pre><code>def __init__(self, ID):
    self.ID = ID
    self.username, \
    self.password, \
    self.coins, \
    self.my_items = retrieve_user_data(ID)
</code></pre>

<p>I find this to be very confusing to read. It isn't obvious what's going on until you get to the bottom and realize that it's a tuple deconstruction. I'd probably use an intermediate object to make it read cleaner. I'd also add type annotations:</p>

<pre><code>def __init__(self, ID: str):
    self.ID: str = ID  # Really, this should be lowercase, but that shadows the built-in unfortunately.

    username, password, raw_coins, items = retrieve_user_data(ID)

    self.username: str = username
    self.password: str = password
    self.coins: int = int(raw_coins)
    self.my_items: str = items
</code></pre>

<p>It makes it a little longer, but I think it reads much better.</p>

<hr>

<p>I think <code>purchase</code> can be improved quite a bit as well. The main thing that I see wrong with it is how you're handling errors. Returning a string message is messy. If the caller wants to know what went wrong (and handle it programmatically), they need to match the string against known message which is both slower, and more error prone than other methods.</p>

<p>To fix these issues, I'd decide if I needed to handle multiple different errors, or just one error. If I only had one error, I'd change your function to return a <code>bool</code> to indicate success. You have two possible errors though that may need to be handled differently. I think the cleanest solution would be to have an enum of <code>PurchaseTransactionOutcome</code>s that lets the caller know what happened:</p>

<pre><code>from enum import Enum

class PurchaseTransactionOutcome(Enum):
    ITEM_NOT_FOUND = 0
    INSUFFICIENT_COINS = 1
    CANCELLED_BY_USER = 2
    SUCCESS = 3
</code></pre>

<p>The benefits of this are it'll be faster (although that's not likely an issue in most cases), and it's more self documenting. If the user sees that the method returns a <code>PurchaseTransactionOutcome</code>, they can easily check to see what all of the possible outcomes are that they'll need to handle. It also prevents typos. If you typed the string wrong in either the method or the calling code, any checks against a certain outcome would fail. Enums can't lead to silent typos though. <code>PurchaseTransactionOutcome.INSUFICIENT_COINS</code> would cause a error before the code even runs. </p>

<p>And to handle the nesting, I'd just switch to <code>elifs</code>. After making the above changes, I'd write this method closer to:</p>

<pre><code>def purchase(self, item) -&gt; PurchaseTransactionOutcome:
    if (item not in ITEMS_DATA or item == "Item"):
        return PurchaseTransactionOutcome.ITEM_NOT_FOUND

    else:
        item_cost = ITEMS_DATA[item]
        if self.coins &lt; item_cost:
            return PurchaseTransactionOutcome.INSUFFICIENT_COINS

        else:
            verify_purchase = input(f"You will spend {item_cost} coins. Want to proceed? Y/N \n")
            if verify_purchase.lower() == 'y':
                self.coins -= item_cost
                self.my_items.append(item)
                self.update_data()
                return PurchaseTransactionOutcome.SUCCESS

            else:
                return PurchaseTransactionOutcome.CANCELLED_BY_USER
</code></pre>

<p>Yes, for your case here, this is gross overkill. It is something to keep in mind though once you start writing more "real" code.</p>

<p>Now to check for success, you can write:</p>

<pre><code>result = user.purchase("sword")

if result != PurchaseTransactionOutcome.SUCCESS:
    . . .  # Figure out what error and handle it
</code></pre>

<hr>

<p>In <code>ITEMS_DATA</code>, for some reason you're storing header names inside the "database". This is forcing you to do weird things like <code>... or item == "Item"</code> checks. I'm guessing you're doing this to help <code>show_all_items</code>. I would take the header names out and just have <code>show_all_items</code> handle that:</p>

<pre><code>ITEMS_DATA = {'Sword': 100,
              'Shield': 510,
              'Horse': 1200,
              'Big e': 99999999}

def show_all_items(self):
    body = f'{"Name":10} Price\n'
    for item_name, price in ITEMS_DATA.items():
        body += f'{item_name:10} {price} \n'
    print(body)
</code></pre>

<p>Or to avoid duplication, you can add the headers right before the data is iterated over:</p>

<pre><code>def show_all_items(self):
    body = ''
    for item_name, price in [["Name", "Price"]] + list(ITEMS_DATA.items()):
        body += f'{item_name:10} {price} \n'
    print(body)
</code></pre>

<p>I agree with @Gloweye though, all these methods shouldn't be printing. Ideally, all the data a function needs should be taken in as parameters, and all the data that a function produces should be simply returned. <em>Eventually</em> you need to call <code>input</code> and <code>print</code> <em>somewhere</em>, but be choosy where that somewhere is. Calling functions like <code>print</code> and <code>input</code> in arbitrary spots will make it more difficult to adapt to changed later because you've baked into your code exactly how the program is able to take and produce data. If you switch to a full UI later, you're going to have to go around and change every function that calls <code>print</code> and <code>input</code>.</p>
    </div>