<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Why use a build.rs here? Why not read english.csv in at runtime? For the purposes of an exercise like that I'm surprised you went to the trouble of converting the csv file into rust code like that.</p>

<p>If you wanted to move as much work as possible to compile time you only went part way. You still have to postprocess the returned HashMap by converting the u8 to chars and converting the 0-100 range to 0-1. Why not do that additional conversion work up front.</p>

<pre><code>include!(concat!(env!("OUT_DIR"), "/english_frequencies.rs"));
</code></pre>

<p>Given that it is rust code, I wonder if you could instead use:</p>

<pre><code>mod english_frequencies;
</code></pre>

<p>Thus including the rust code as a module instead of inserting the code literally here. (I'm not sure I've not tried it).</p>

<pre><code>        .map(|(k, freq)| (k.clone() as char, (freq / 100.0) * (message.len() as f32)))
</code></pre>

<p>You clone <code>char</code>/<code>u8</code> a a lot, but you don't need to. They are copy types and will be "cloned" automatically in most contexts.</p>

<pre><code>            let count = match acc.get(&amp;c) {
                Some(x) =&gt; x.clone() + 1,
                None =&gt; 1,
            };

            acc.insert(c, count);
</code></pre>

<p>This whole bit can be replaced by:</p>

<pre><code>*acc.entry(c).or_insert(0) += 1;
</code></pre>

<p>Moving on...</p>

<pre><code>fn chi_statistic(observed: HashMap&lt;char, isize&gt;, expected: HashMap&lt;char, f32&gt;) -&gt; f32 {
</code></pre>

<p>It is a bit weird that this function takes ownership of the HashMaps. You don't need to consume the hashmaps in the function, so I'd expect borrows.</p>

<pre><code>        let exp = match expected.get(&amp;key) {
            Some(x) =&gt; x.clone() as f32,
            None =&gt; 0.0000001, //non-zero, but tiny possibility
        };
</code></pre>

<p>You can write this as:</p>

<pre><code> let exp = expected.get(&amp;key).map(|x| x as f32).unwrap_or(0.0000001);
</code></pre>

<p>I'm not sure whether that's better or not, but it is an option.</p>
    </div>