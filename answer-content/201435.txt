<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Your main question</h1>

<p>I have trouble understanding it, because:</p>

<ul>
<li><strong>minor reason</strong>:<br>
(unless I'm missing something obvious) whatever way you encode the array parts, the resulting query string is quite valid in both cases;<br>
so the only possible criterion for choosing a method rather than the other one would be to find which one is faster... and this sounds a bit overkill!</li>
<li><strong>major reason</strong>:<br>
you initially referred to the PHP <code>http_build_query()</code> function, so I'd expect you work the same, i.e. for a given <code>key: [val_1, val_2]</code>:

<ul>
<li>you're currently returning <code>key=val_1,val_2</code></li>
<li>while it should be <code>key=val_1&amp;key=val_2</code></li>
</ul></li>
</ul>

<p>To match the latter case, I'd suggest something like this:</p>

<pre><code>const output = Object.entries(params).map(
  (pair) =&gt; {
    let [key, val] = pair;
    // normalize val to always an array
    val = (val instanceof Array) ? val : [val];
    // encode key only once
    key = encodeURIComponent(key);
    // then make a different query string for each val member
    return val.map(
      (member) =&gt; `${key}=${encodeURIComponent(member)}`
    ).join('&amp;');
  }
).join('&amp;');
</code></pre>

<h1>Your complementary question</h1>

<p>To implement null or undefined, first you have to decide how they must be managed: they might be simply omitted, or included with no value (its often useful to have query params where only its presence/absence is meaningful for the underlying application).</p>

<p>Anyway you may simply add any of these capabilities; instead of</p>

<pre><code>    return val.map(
      (member) =&gt; `${key}=${encodeURIComponent(member)}`
    ).join('&amp;');
</code></pre>

<p>you can include null/undefined params simply with:</p>

<pre><code>return val.map(
  (member) =&gt; (member ? `${key}=${encodeURIComponent(member)}` : `${key}`)
).join('&amp;');
</code></pre>

<p><em>(NOTE: it's up to you to enhance this with more precise tests if desired, in order to keep <code>0</code> as <code>key=0</code>, or <code>''</code> as <code>key=</code>)</em></p>

<p>or you can omit them with a slightly different method:</p>

<pre><code>return val.reduce(
  (result, member) =&gt; {
    if (member) {
      result.push(`${key}=${encodeURIComponent(member)}`);
    }
    return result;
  },
  []
).join('&amp;');
</code></pre>
    </div>