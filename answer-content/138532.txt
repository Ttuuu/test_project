<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>I think you can just inherit <code>ElementCollection</code> from <code>List&lt;Element&gt;</code> if all you do is wrap <code>List</code> methods and override <code>ToString</code>.</li>
<li><p>Recursive methods are hard enough to understand and debug in their own right. When you add enumerator which you move manually to the mix, it becomes even harder. I think you should come up with non-recursive solution. Here is a solution I came up with (which might not cover some edge cases):</p>

<pre><code>public static Message ToTree(this IEnumerable&lt;Element&gt; elements)
{
    var message = new Message();
    var parents = new Stack&lt;ElementCollection&gt;();
    parents.Push(message);
    foreach (var element in elements)
    {
        while (element.Parent() != parents.Peek().GetType())
        {
            parents.Pop();
        }
        parents.Peek().Add(element);
        parents.Push(element);
    }
    return message;
}
</code></pre>

<p>you can get rid of <code>Stack</code>, if you add <code>Parent</code> property to your elements, and you can further improve it by adding meaningful exceptions when input has incorrect fromat.</p></li>
</ol>
    </div>