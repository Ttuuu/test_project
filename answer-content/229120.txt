<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>app</code> function is just the same as the <code>print</code> function. So there is no need for it to exist at the moment.</p>

<p>When working with files you should always use the <a href="https://effbot.org/zone/python-with-statement.htm" rel="noreferrer"><code>with</code> keyword</a> to ensure the file is properly closed (even in the case of exceptions).</p>

<p>The <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code> module has a <code>Path</code> object</a> which makes handling file paths a lot easier.</p>

<p>You are doing a lot of unnecessary stuff. To get rid of this I would change your file format to more accurately describe the data. You have usernames and each username has a password and an email. That sounds like a dictionary to me. An easy way to save a dictionary to a file is to do so in JSON format. There is a <a href="https://docs.python.org/3/library/json.html" rel="noreferrer"><code>json</code> module</a> in the standard-library, which is very easy to use.</p>

<pre><code>import json
from pathlib import Path

def get_users(file_name):
    with open(file_name) as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def add_user(file_name):
    users = get_users(file_name) if Path(file_name).exists() else {}

    while True:
        username = input("\nEnter a username: ")
        if username not in users:
            break
        print("\nUsername already in use.")

    email = input("Enter an e-mail address: ")

    while True:
        password = input("Enter a password: ")
        password_confirm = input("Confirm password: ")
        if password == password_confirm:
            break
        print("\nPasswords did not match.\n")

    users[username] = email, password

    with open(file_name, "w") as f:
        json.dump(users, f)
</code></pre>

<p>This could be improved further by using the <a href="https://docs.python.org/3.7/library/getpass.html" rel="noreferrer"><code>getpass</code> module</a>. This way the password is not visible on screen while it is being typed. For actual security you would want to save the password not in plaintext, but this is left as an exercise.</p>

<p>The actual login code becomes a lot easier with this as well, because you don't need to see if the username string is contained in the file content (and the same for the password and then match the positions...), you just have a dictionary:</p>

<pre><code>def login(file_name):
    users = get_users(file_name)
    if not users:
        print("\nError: 0 account(s) found in database\n")
        return

    user_name = input("\nEnter username: ")
    if user_name not in users:
        print("\nUsername incorrect.")
        return
    password = input("Enter password: ")
    if password != users[username][1]:
        print("\nPassword incorrect.")
        return
    print("Login Successful")
    return user_name, users[user_name]
</code></pre>

<p>The main code is mostly unchanged. I would put everything into an infinite <code>while True</code> loop to avoid hitting the stack limit at some point (a problem recursive code has in Python). I also added a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__":</code> guard</a> to allow importing from this script without running the code. The actual file path is only needed at this point, everything else has it as a parameter.</p>

<pre><code>DB_PATH = Path("C:/Users/Tom/Desktop/test/login_project/account_info.txt")

def main(file_name=DB_PATH):
    print("\nWelcome.\n")
    commands = {"create", "login", "exit"}

    while True:
        print("Please continue to login or create an account.")
        print("(Type 'login' to login, or 'create' to create an account).")
        print("('exit' to close program)\n")
        user_input = input("- ")
        if user_input not in commands:
            print("\nEnter a valid command.\n")
            continue
        if user_input == "create":
            add_user(file_name)
        elif user_input == "login":
            user = login(file_name)
            if user:
                print(user[0])
        else:
            print("\nClosing...\nClosed.")
            return

if __name__ == "__main__":
    main()
</code></pre>

<p>If you wanted to take this further, I would probably make the user database a class that automatically saves to disk on modifications and reads when needed. Something like <a href="https://codereview.stackexchange.com/a/188292/98493">this</a>.</p>
    </div>