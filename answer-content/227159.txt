<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've essentially built a doubly-linked list that also performs its own memory management.</p>

<p>Regarding linked lists:</p>

<ul>
<li>This makes indexing is an <span class="math-container">\$O(n)\$</span> operation, compared to <span class="math-container">\$O(1)\$</span> for <code>List&lt;T&gt;</code>. Searching from the end for indexes beyond the center helps, but it does not fundamentally change this performance characteristic.</li>
<li>Adding is an <span class="math-container">\$O(1)\$</span> operation, similar to <code>List&lt;T&gt;</code> (which is <span class="math-container">\$O(1)\$</span> on average).</li>
<li>Inserting and removing-at can also be <span class="math-container">\$O(1)\$</span>, but only if you provide the right API (for an example, see <code>LinkedList&lt;T&gt;</code>'s <code>AddAfter/Before/First/Last</code> methods). Your current implementation is <span class="math-container">\$O(n)\$</span>, similar to <code>List&lt;T&gt;</code>.</li>
<li>Like <code>List&lt;T&gt;</code>, iterating is <span class="math-container">\$O(n)\$</span>, but having to follow a chain of pointers will make it slower than <code>List&lt;T&gt;</code>, which stores its items in a contiguous block of memory. Pointer-chasing is also less cache-friendly.</li>
</ul>

<hr>

<p>Regarding custom memory management, GCHandles allow you to access managed objects from unmanaged code, but you don't have any unmanaged code here. This only introduces problems:</p>

<ul>
<li>It limits your list to only types that do not contain reference fields (<code>Add</code> will throw an <code>ArgumentException</code> (Object contains non-primitive or non-blittable data.) for all but the most basic types).</li>
<li>It involves extra allocations, which take additional time and memory.</li>
<li>It introduces the risk of leaking memory/handles.</li>
<li>Pinning objects can make the garbage collector less efficient - it'll hinder memory compaction.</li>
<li>Unexpected program terminations.</li>
</ul>

<p>Creating a small <code>LinkedListNode&lt;T&gt;</code> class instead would be a much better idea.</p>

<hr>

<p>There are also other problems with your code:</p>

<ul>
<li>Indexing is broken: <code>list[0]</code> returns the second item, while the first item is located at <code>list[-1]</code>... and around the center, a higher index might actually give you an earlier item.</li>
<li>There's no bounds-checking: <code>list[-2]</code> and <code>list[list.Count + 2]</code> result in an <code>AccessViolationException</code> (if you're lucky) rather than an <code>OutOfRangeException</code>.</li>
<li><code>RemoveAt</code> seems to be implemented, but it fails with an <code>InvalidOperationException</code> (if it doesn't cause the program to terminate instead).</li>
</ul>
    </div>