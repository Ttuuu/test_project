<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug - doesn't handle leap years</h3>
<p>I got as far as your first function:</p>
<blockquote>
<pre><code>public int getYear() {
    return FIRST_YEAR + (int)(milisecond / MILISECONDS_PER_YEAR);
}
</code></pre>
</blockquote>
<p>and immediately saw that this wasn't going to work, because the number of milliseconds in a year isn't constant.  In leap years, there is an extra day's worth of milliseconds.  So for example, if your input value were <code>Dec 31, 1972</code>, your <code>getYear()</code> function would mistakenly return <code>1973</code>.  It gets worse the farther you get from 1970.</p>
<h3>Bug - can return negative day of year</h3>
<p>Moving on to the second function:</p>
<blockquote>
<pre><code>public int getDayOfYear() {
    long milisecondMinusYears = (milisecond % MILISECONDS_PER_YEAR);
    int dayOfYear = (int) ((milisecondMinusYears + MILISECONDS_PER_DAY)/ MILISECONDS_PER_DAY) - getTotalOfLeapYears();

    return dayOfYear;
}
</code></pre>
</blockquote>
<p>Here, there is some attempt to adjust for leap years, but it isn't correct.  The first part of the calculation for <code>dayOfYear</code> produces a number in the range <code>1..365</code>, but then you subtract the number of leap years, which could be some large number.  Suppose the input year is 2010 and there were 10 leap years since 1970.  Your function will return a number in the range <code>-9..355</code>, which is definitely wrong.</p>
<p>This function should return a value in the range <code>1..365</code> for regular years or <code>1..366</code> for leap years.</p>
<h3>A strange question</h3>
<p>I find it odd that you asked this question:</p>
<blockquote>
<p>Any idea why I need to add another hour and a day?</p>
</blockquote>
<p>If you added that code, I assume you must have had a reason to do it, so wouldn't you already know why?  What happens if you don't add the extra hour and day?  Did you write this code?</p>
<h3>In response to comment</h3>
<p>OK so you tested the current time <code>3/27/19 10:14</code> and your program gave you <code>3/26/19 9:14</code>, so you added a day and an hour to fix the problem.  However, you made the fix without actually figuring out why your logic was wrong in the first place, so your fix may not be correct.  When bugs occur, you should determine the cause of the problem so that you can apply the correct fix, otherwise you won't know whether you have really fixed the problem.</p>
<p>One way to do this is to test simple known values and examine the results.  For example, if you give the input <code>0</code> to the program, it should refer to <code>1/1/1970 00:00</code> and your program should return <code>1</code> for the day of the year and <code>0</code> for the hour.  Prior to your change, your program would give <code>0</code> for the day of the year and <code>0</code> for the hour.  After your change, your program correctly gives <code>1</code> for the day of the year but incorrectly <code>1</code> for the hour.</p>
<p>For the day of year, the reason for the bug is simple.  Day of year is supposed to be in the range 1..365 (i.e. one-based, ignoring leap year for now) but your division results in a number in the range 0..364 (i.e. zero-based).  Therefore you need to add one to shift from zero-based to one-based.  However, note that once you change your result to be one-based, all functions that internally use <code>dayOfYear()</code> need to adjust for that, namely <code>getMonth()</code>.</p>
<p>For the hour, the reason for the problem is not quite as clear.  Assuming you want to return a military time hour (0..23), then the result you calculated is already in the correct range, and in fact, the correct value.  I suspect that the reason your hour is one hour off from "now" is that you are on daylight savings time.  Again, if you had tested various known times and edge cases, such as <code>12/31/1970 23:59</code>, you would have seen that your current program returned <code>24</code> for the hour, which is not correct.</p>
    </div>