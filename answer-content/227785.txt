<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to limit my initial answer to not include modules, but I'll also cover a module that can help out some here too later.</p>

<pre class="lang-perl prettyprint-override"><code>my $initial_color = '#FF0000';
my $final_color   = '#00FF00';
</code></pre>

<p>While there's nothing wrong with using underscores, the tendency in Perl 6 has been to move towards hyphens, which would give us <code>$initial-color</code> and <code>$final-color</code>.  </p>

<pre><code>my @initial   = ($initial_color ~~ /\#(..)(..)(..)/).list.map: { .Str.parse-base(16) };
</code></pre>

<p>This is a bit of personal preference, I'd write this as </p>

<pre><code>my @initial = .map: *.Str.parse-base(16) with $initial-color ~~ /\#(..)(..)(..)/;
</code></pre>

<p>Since it allows you to get rid of most of the parentheses/braces.  Note that in any case, you don't need the <code>.list</code> because your <code>Match</code> is already an <code>Iterable</code>.  But this is of course a pure matter of taste (some might prefer parentheses around the <code>.map</code> to emphasize it's separate from the <code>with</code> postfix.</p>

<p>You can also prestore the regex, particularly if you plan on using it more often:</p>

<pre class="lang-perl prettyprint-override"><code>my $hex-format = /\#(..)(..)(..)/;
my @initial = .map: *.Str.parse-base(16) with $initial-color ~~ $hex-format;
</code></pre>

<p>Your next two lines have two different techniques for applying math operators across lists: </p>

<pre><code>my @range     = @final Z- @initial; 
my @increment = @range.map: { $_ / $gradient };
</code></pre>

<p>You could use a zip operator for both ( <code>@range Z/ ($gradient xx 3)</code> ), or you could opt for a hyper meta operator:</p>

<pre><code>my @range     = @final «-» @initial;
my @increment = @range «/» $gradient
</code></pre>

<p>Now for generating the colors themselves, you had</p>

<pre><code>my @color;
@color.push: @initial;
for (1..$gradient) -&gt; $i {
  @color.push: @(@color[$i-1]) Z+ @increment;
}

for (0..$gradient) -&gt; $i {
  @color[$i] = '#' ~ ( @(@color[$i]).map: { .base(16,0).fmt('%02s') } ).join;
}
</code></pre>

<p>First the easy things.  If I see a variable <code>@color</code>, I assume it is a single entity with multiple constituent entities (one color, three values — R, G, B).  But in this case, it's a list of colors, so the variable name is best used in plural.  Also, you don't need parentheses around the list for the for loop.  Just <code>for 0..$gradient -&gt; $i</code> works. </p>

<p>Your first for loop uses the previous item to determine the next one, so you have a push outside the loop.  There's a few ways to solve this.  If you have to do an initial step like that, I like to put it in the loop using <code>FIRST</code> (or <code>once</code>, both are functionally equivalent here).</p>

<pre class="lang-perl prettyprint-override"><code>my @color;
for 1..$gradient -&gt; $i {
  FIRST @color.push(@initial);
  @color.push: @(@color[$i-1]) Z+ @increment;
}
</code></pre>

<p>But we can actually rewrite this to calculate the value without relying upon the previous entry:</p>

<pre class="lang-perl prettyprint-override"><code>my @color;
for 0..$gradient -&gt; $step {
  @color.push: @initial «+» @increment «*» $step;
}
</code></pre>

<p>This could be even further reduced into a one liner, but I don't think that's necessary nor desirable here.  What's great here about the hyper operators is that they read like scalar arithmetic (<code>$initial + $increment * $step</code>) so readability is maintained.</p>

<p>Your second loop can also be simplified quite a bit by just looping on the values.  I think it makes most sense to just put them into a new array</p>

<pre class="lang-perl prettyprint-override"><code>my @html-colors;
for @colors -&gt; @color {
  @html-colors.push: '#' ~ @color.map( *.base(16,0).fmt: '%02s' ).join;
}
</code></pre>

<p>Anytime, though, you have a <code>.map</code> that has another method chain in its code block, you have a candidate for a hyper method call <code>».</code>  </p>

<pre class="lang-perl prettyprint-override"><code>my @html-colors;
for @colors -&gt; @color {
  @html-colors.push: '#' ~ @color».base(16,0)».fmt('%02s').join;
}
</code></pre>

<p>Basically, <code>».foo</code> means <em>take every element and <code>.foo</code> it</em>, and it returns a list of the values, which can be <code>».bar</code> on every element.  Note that <code>.join</code> doesn't have the hyperoperator, because we want to act on the resulting list.</p>

<p>But you could also loop in a rw manner (notice the <code>&lt;-&gt;</code>) with</p>

<pre class="lang-perl prettyprint-override"><code>for @colors &lt;-&gt; @color {
  @colors = '#' ~ @color».base(16,0)».fmt('%02s').join;
}
</code></pre>

<p>Because now both loops though are <code>0 .. $gradient</code>, it might make sense to merge them:</p>

<pre class="lang-perl prettyprint-override"><code>my @colors
for 0..$gradient -&gt; $step {
  my @intermediate = @initial »+» @increment »*» $step;
  @colors.push: '#' ~ @intermediate».base(16,0)».fmt('%02s').join;
}
</code></pre>

<p>Lastly when you print, remember you can just loop on the color items:</p>

<pre><code>for @colors -&gt; $color {
  $fh.print: "&lt;span style='background-color:$color'&gt;&amp;nbsp;&lt;/span&gt;"; 
}
</code></pre>

<p>Which also allows a one liner using the topic variable <code>$_</code> (and in this case, absent doing anything else, makes more sense to me):</p>

<pre><code>$fh.print: "&lt;span style='background-color:$_'&gt;&amp;nbsp;&lt;/span&gt;" for @colors;
</code></pre>

<p>Since it's effectively the same loop, this is, of course, a candidate for putting back in the main loop, but there's something to be said for separating the calculations from the final output. </p>

<p>Rewritten, my version would be:</p>

<pre class="lang-perl prettyprint-override"><code>my $initial-color = '#FF0000';
my $final-color   = '#00FF00';
my $gradient      = 10;

my $hex-format = /\#(..)(..)(..)/;

my @initial = .map: *.Str.parse-base(16) with $initial-color ~~ $hex-format;
my @final   = .map: *.Str.parse-base(16) with   $final-color ~~ $hex-format;

my @increment = (@final »-» @initial) »/» $gradient;

my @colors;

for 0..$gradient -&gt; $step {
  my @intermediate = @initial »+» @increment »*» $step;
  @colors.push: '#' ~ @intermediate».base(16,0)».fmt('%02s').join;
}

my $fh = open '/tmp/delete.html', :w;
$fh.print: "&lt;span style='background-color:$_'&gt;&amp;nbsp;&lt;/span&gt;" for @colors; 
$fh.print: '&amp;nbsp';
$fh.close;
</code></pre>
    </div>