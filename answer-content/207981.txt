<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thank you for your interest in improving your code! Please, don't be confused about amount of comments. Programming is all about mastering your skills!</p>

<h1>What's wrong with the code?</h1>

<h2>You leak memory!</h2>

<p>For each call of <code>new</code> there <strong>must be a call</strong> for <code>delete</code>. Otherwise objects are not removed. Think of these operators as a C++ wrappers around <code>malloc</code> and <code>free</code> calls.</p>

<h1>What could be improved?</h1>

<h2>Use T type in your methods</h2>

<p>You used <code>int k</code> as a function argument, but an actual type you want is <code>T</code>. So it goes:</p>

<pre><code>ListNode&lt;T&gt; * removeKFromList(ListNode&lt;T&gt; * l, T k)
</code></pre>

<p>Same for <code>print</code> method.</p>

<h2>Use auto</h2>

<p>When you change your signature to <code>ListNode&lt;T&gt;</code> notice, that using <code>auto</code> for statements, like</p>

<pre><code>ListNode&lt;int&gt; *L2 = new ListNode&lt;int&gt;(node-&gt;value);
</code></pre>

<p>would not require any additional changes in the return types:</p>

<pre><code>auto *L2 = new ListNode&lt;T&gt;(node-&gt;value);
</code></pre>

<p>It is common to use lowercase letters for variable names, even though you create all the list objects in uppercase.</p>

<p>Moreover, it looks nicer. But, do not overload your code with <code>auto</code>.
Use it only when it is obvious, what the type of your variable is.
So iterators, lambdas and new operators are the common case.</p>

<h2>Variable &amp; method names</h2>

<p>Naming method <code>removeKFromList</code> suggests "remove <strong>key</strong> from the list", so we expect ListNode to contain pairs of key-value. It is confusing to see only <code>T value</code> in the struct, treated as a key in your methods. So it is better to rename method removeAllFromList. <strong>All</strong> here would stand for <strong>all occurrences</strong>. Do not use terms "key" and "value" <strong>together</strong>, unless you mean dictionary. Now: </p>

<pre><code>ListNode&lt;T&gt; * removeAllFromList(ListNode&lt;T&gt; * l, T value)
</code></pre>

<p>It is considered a good practice to name variables in the way it makes sense what they stand for. Anyone should understand their meaning without reading more then couple of lines of code ahead. Ideally, write your code like a book. It wouldn't require much efforts. Try not to use variable names shorter then 3 symbols (except some particular cases, like in for-loop iteration):</p>

<pre><code>ListNode&lt;T&gt; * removeAllFromList(ListNode&lt;T&gt; * list, T value)
</code></pre>

<p>Now we see another issue. If you pass <code>ListNode&lt;T&gt; *</code> it is actually a <strong>node</strong>, that is being passed by, but not the <strong>list</strong>. Fix:</p>

<pre><code>ListNode&lt;T&gt; * removeAllFromList(ListNode&lt;T&gt; * node, T value)
</code></pre>

<h2>const &amp;</h2>

<p>If integer instantiation is used, it is only a 4 bytes that are copied, so performance changes are unnoticeable. But since we use more complex classes, that would be an issue.
Use const &amp; to fix this:</p>

<pre><code>ListNode&lt;T&gt; *removeAllFromList(const ListNode&lt;T&gt; *node, const T &amp;value)
</code></pre>

<p>Also make sure that nodes are not modified by writing <code>const ListNode&lt;T&gt; *node</code></p>

<h2>Style</h2>

<p>Usually, it is hard to manually track all your spaces and tabulation. Use code refactoring tools. You sometimes mix styles by writing <code>) {</code> and <code>){</code> with or without a space. We love perfection:)</p>

<h2>Nesting levels</h2>

<p>When you write:</p>

<pre><code>if(l == nullptr){
    return nullptr;
}else{
   // ...
}
</code></pre>

<p>It is better to omit else body. That makes code more readable:</p>

<pre><code>if (l == nullptr) {
    return nullptr;
}
   // ...
</code></pre>

<p>Reducing the amount of nested levels is good. And yes, use spaces.</p>

<h2>File separation</h2>

<p>ListNode methods are better placed in Node.cpp file, because they are relevant to ListNode.</p>

<h2>Explicit</h2>

<p>You may want to use <code>explicit</code> keyword to avoid unintentional type conversions.</p>

<h1>What else could be improved?</h1>

<h3>Create LinkedList class</h3>

<p>It is good to encapsulate your ListNode implementation. Hide your nodes, so no one could modify the values from outside, causing memory leaks or any kind of unintended behavior. It would also allow you to control memory by calling <code>delete</code> on each <code>ListNode</code> element in destructor.</p>

<p>There are more issues I may cover. But, please, start with those, provided above.
The method removeAllFromList could now look like this:</p>

<pre><code>template&lt;typename T&gt;
shared_ptr&lt;ListNode&lt;T&gt;&gt; removeAllFromList(shared_ptr&lt;ListNode&lt;T&gt;&gt; node, const T &amp;value) {
    if (node == nullptr) {
        return nullptr;
    }

    // The beginning node
    shared_ptr&lt;ListNode&lt;T&gt;&gt; root = nullptr;

    // Node used for iteration
    shared_ptr&lt;ListNode&lt;T&gt;&gt; current = nullptr;

    while (node != nullptr) {
        if (node-&gt;value == value) {
            node = node-&gt;next;
            continue;
        }
        if (root == nullptr) {
            root = std::make_shared&lt;ListNode&lt;T&gt;&gt;(node-&gt;value);
            current = root;
        } else {
            current-&gt;next = std::make_shared&lt;ListNode&lt;T&gt;&gt;(node-&gt;value);
            current = current-&gt;next;
        }

        node = node-&gt;next;
    }

    return root;
}
</code></pre>

<p>In my answer, I assume that you need to <strong>create a copy</strong> of the linked list and delete <strong>all</strong> the nodes with the value provided.</p>
    </div>