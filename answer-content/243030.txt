<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a good start for a script. The next step should be separating in-/output from the functions doing the actual work.</p>

<p>In addition, whenever you make multiple requests to the same server, you should use a <a href="https://2.python-requests.org/en/v1.1.0/user/advanced/#session-objects" rel="nofollow noreferrer"><code>requests.Session</code></a>, which will re-use the connection. You can also pass a dictionary <code>params</code> which will be the URL-encoded parameters for the request. The <code>Session</code> can take a default value for that.</p>

<p>You should always use <a href="https://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer"><code>with</code></a> when opening a file or resource. This way it is ensured that it is closed properly, even if an exception occurs during the intervening code.</p>

<p>You can write multiple rows at once using <a href="https://www.tutorialspoint.com/python/file_writelines.htm" rel="nofollow noreferrer"><code>writelines</code></a>. You can even pass an iterable to this function and it will iterate for you.</p>

<p>I would write your script something like this:</p>

<pre><code>import requests

URL = "https://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/"
PARAMS = {"key": "removed"}

def url_available(session, url):
    response = session.get(URL, params={"vanityurl": url}).json()
    return response['response']['success'] == 42

def main():
    session = requests.Session()
    session.params = PARAMS
    with open('ok.txt') as in_file, open('www.txt', 'w') as out_file:
        out_file.writelines(url for url in in_file
                            if url_available(session, url.strip()))

if __name__ == "__main__":
    with Timer("main"):
        main()
</code></pre>

<p>To this you should add a <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer"><code>docstring</code></a> to each function describing what it does, but that is left as an exercise :).</p>

<p>Here <code>Timer</code> is a simple class that starts a timer when the context is entered and reports the result when the <code>with</code> block is finished:</p>

<pre><code>from time import perf_counter

class Timer:
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        self.start = perf_counter

    def __exit__(self, *args):
        diff = round(perf_counter() - self.start, 2)
        print(f'{self.name} finished in {diff} second(s)')
</code></pre>
    </div>