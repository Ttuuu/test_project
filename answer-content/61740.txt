<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><em>I recently tinkered with it to allow me to have my PC shutdown at a specific time.</em></p>
</blockquote>

<p>That's what happens to code: it <em>needs to change</em>, at one point or another. The one major problem you have here, is that <strong><em>everything</em></strong> is stuffed in the form's code-behind.</p>

<p>From a <a href="/questions/tagged/design-pattern" class="post-tag" title="show questions tagged 'design-pattern'" rel="tag">design-pattern</a> point of view, what you have is a <em>Smart UI</em> - the <em>View</em> is stealing the show, and contains the entire program.</p>

<blockquote>
  <p><em>This kind of approach is not always bad. It is fine if you want something quick and simple that isn’t going to change. For example if you want to create a quick demo, or explore how something works.</em></p>
  
  <p><em>However, most of the time an application will change and that’s where things will get messy, particular if you have a lot of Smart UIs in one application.</em></p>
  
  <p><em>Maintenance will get difficult. A supposedly simple change could affect anything else associated with the same class. Over time the code will likely messier and messier as more maintainers work with the same code.</em></p>
  
  <p><sub><a href="http://geekswithblogs.net/gregorymalcolm/archive/2009/07/14/user-interface-patterns.aspx" rel="nofollow">http://geekswithblogs.net/gregorymalcolm/archive/2009/07/14/user-interface-patterns.aspx</a></sub></p>
</blockquote>

<p>What you've called <code>frmMain</code> is a <code>class</code>, a <em>first-class</em> citizen of the language you're using. Classes should only have a single <em>purpose</em>. If we agree that a <em>Smart UI</em> isn't what we're looking for, then you need more classes - think of what the <em>responsibilities</em> of each class should be.</p>

<hr>

<h3>Model</h3>

<p>Your <em>Model</em> is your <em>data</em> - in this case, it's bits &amp; pieces of information, like:</p>

<ul>
<li>Some <em>time span</em> that indicates the delay between now and shutdown/restart.</li>
<li>Some <em>bit</em> that indicates whether we want to shutdown or restart.</li>
<li>Some <em>date/time</em> that indicates exactly when we're going to shutdown/restart.</li>
</ul>

<p>You can write a class that's responsible for containing that information (here with a placeholder name):</p>

<pre><code>Public Enum OnTimerElapsedAction
    Shutdown
    Restart
End Enum

Public Class Model
    Public Property SelectedTimeSpan As TimeSpan
    Public Property SelectedDateTime As DateTime
    Public Property SelectedAction As OnTimerElapsedAction
End Class
</code></pre>

<h3>View</h3>

<p>The form is your <em>View</em>, and <em>should be</em> nothing more than that: the application's logic shouldn't be written in the form's code-behind, burried in button click event handler procedures. I suggest you look into the <em>Model-View-Presenter</em> pattern.</p>

<p><strong>Redundancies</strong></p>

<p>The <code>Shutdown_Restart()</code> method clearly is doing way too many things. In fact, it's such a central part of your application, that it belongs in its very own, specialized class, exposing two methods:</p>

<pre><code>Public Sub Shutdown()
Public Sub Restart()
</code></pre>

<p>What's the difference between this:</p>

<pre><code>    If DelayOrTime = 1 Then
        'Shutdown PC
        If radShutdown_d.Checked Then
            System.Diagnostics.Process.Start("Shutdown", "/s")
            tmrDelayCount.Enabled = False

            'Restart PC
        ElseIf radRestart_d.Checked Then
            System.Diagnostics.Process.Start("Shutdown", "/r")
            tmrDelayCount.Enabled = False
        End If
</code></pre>

<p>And this:</p>

<pre><code>    ElseIf DelayOrTime = 2 Then
        'Shutdown PC
        If radShutdown_t.Checked Then
            System.Diagnostics.Process.Start("Shutdown", "/s")
            tmrCheckTime.Enabled = False

            'Restart PC
        ElseIf radRestart_t.Checked Then
            System.Diagnostics.Process.Start("Shutdown", "/r")
            tmrCheckTime.Enabled = False
        End If
    End If
</code></pre>

<p>?</p>

<p>You need a method that parameterizes the <em>variables</em> here, and write code <em>once</em> - you're repeating yourself.</p>

<hr>

<p>I'd like to <em>call</em> out on this line:</p>

<blockquote>
<pre><code>If CurHour = Hours And CurMinute = Minutes Then
    Call Shutdown_Restart()
End If
</code></pre>
</blockquote>

<p>I don't understand why you're using <code>Call</code> here. Please see <a href="http://msdn.microsoft.com/en-us/library/sxz296wz.aspx" rel="nofollow">MSDN</a> for appropriate usage.</p>

<hr>

<h3>Strings</h3>

<p>You don't need to have this:</p>

<blockquote>
<pre><code>Public show_hrs As String 'Store hours as String
Public show_mins As String 'Store minutes as String
Public show_secs As String 'Store seconds as String
</code></pre>
</blockquote>

<p>And looking here...</p>

<blockquote>
<pre><code>'Display the countdown
lblCountdown.Text = show_hrs &amp; " : " &amp; show_mins &amp; " : " &amp; show_secs 'Display Countdown
</code></pre>
</blockquote>

<p>Two things: one has already been mentioned by @RubberDuck - the comments are maddening, remove them. The other thing is that by concatenating <code>String</code> objects like this, you're actually <em>creating</em> many more <code>String</code> objects than you think you're creating.</p>

<p>A <code>String</code> in .net is an <em>immutable</em> type. This means you're creating a whole bunch of objects. Let's see:</p>

<blockquote>
<pre><code>lblCountdown.Text = show_hrs &amp; " : " &amp; show_mins &amp; " : " &amp; show_secs
</code></pre>
</blockquote>

<ul>
<li><code>lblCountdown.Text</code> is one.</li>
<li><code>show_hrs</code> is another.</li>
<li><code>" : "</code> is a third.</li>
<li><code>show_mins</code> is a fourth.</li>
<li><code>" : "</code> would be yet another, but the compiler is smart enough to use the same instance as the 3rd (since .net 2.0 that is).</li>
<li><code>show_secs</code> makes it six.</li>
<li><code>show_hrs &amp; " : "</code> is a seventh.</li>
<li><code>show_hrs &amp; " : " &amp; show_mins</code> and we're at eight.</li>
<li><code>show_hrs &amp; " : " &amp; show_mins &amp; " : "</code> is nine.</li>
<li><code>show_hrs &amp; " : " &amp; show_mins &amp; " : " &amp; show_secs</code> was already counted, it's the  reference we're assigning to <code>lblCountdown.Text</code></li>
</ul>

<p>So 8 objects created, when all you really <em>need</em>, is to <em>format a time span into a string</em>. <code>TimeSpan.ToString()</code> can do that. <a href="/questions/tagged/vb.net" class="post-tag" title="show questions tagged 'vb.net'" rel="tag">vb.net</a> isn't just a <em>language</em> - ".NET" is a <em>framework</em>, getting to know what it's made of can only be beneficial; I highly recommend you take a look at what the <a href="http://msdn.microsoft.com/en-us/library/system(v=vs.110).aspx" rel="nofollow"><code>System</code> namespace</a> has in store for you:</p>

<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/system.string(v=vs.110).aspx" rel="nofollow"><code>System.String</code></a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx" rel="nofollow"><code>System.DateTime</code></a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/system.timespan(v=vs.110).aspx" rel="nofollow"><code>System.TimeSpan</code></a></li>
</ul>

<hr>

<blockquote>
<pre><code>Private Sub frmMain_Load(ByVal sender As System.Object, ByVal e As System.EventArgs)
Handles MyBase.Load
</code></pre>
</blockquote>

<p>If you're <em>importing</em> the <code>System</code> namespace in your code file, there is no reason to fully qualify <code>System.Object</code> and <code>System.EventArgs</code> - you can dismiss the namespace and simply refer to the type names, <code>Object</code> and <code>EventArgs</code>. Doing so removes clutter. </p>

<hr>

<p>There is <em>a lot more</em> that can be said about this code. In my opinion the most pressing concern is the <em>Smart UI</em>. When you're done refactoring, the form should only be concerned with... <em>presentation</em> concerns; the actual logic belongs elsewhere.</p>
    </div>