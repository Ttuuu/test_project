<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Proposed Solution</h2>

<pre><code>public static JObject ModifyDoubleIntegers(JObject source) {
        if (source == null) return null;
        var target = new JObject(source);
        var properties = target.DescendantsAndSelf().Where(
            x =&gt; x.Type == JTokenType.Float).Select(x =&gt; x.Parent).OfType&lt;JProperty&gt;();
        foreach (var property in properties.Where(x
            =&gt; Regex.IsMatch(x.Value.ToObject&lt;string&gt;(), @"^\d*$")))
        {
            property.Value = property.Value.ToObject&lt;long&gt;();
        }
        return target;
    }
</code></pre>

<hr>

<h2>Remark</h2>

<p>When parsing the sample json file you provided, all integers were parsed as <code>JTokenType.Integer</code> and all floats as <code>JTokenType.Float</code>, so I feel this entire problem is mute. Everything gets parsed correctly by calling <code>JObject.Parse(json)</code>.  </p>

<blockquote>
  <p>How did you end up having integer values in a <code>JTokenType.Float</code>?</p>
</blockquote>

<hr>

<h2>Review</h2>

<p>First of all, you don't need to loop <code>n</code> levels deep. There is a convenient method <code>JContainer.DescendantsAndSelf</code> that does the trick for you. I also changed the variable names to more common names.</p>

<blockquote>
<pre><code>public JObject ModifyDoubleIntegers(JObject objectToModify)
{
    JObject resultObjectModified = new JObject();
    foreach (var item in objectToModify)
    {
        ..
</code></pre>
</blockquote>

<pre><code> public static JObject ModifyDoubleIntegers(JObject source) {
        if (source == null) return null;
        var target = new JObject(source);
        var properties = target.DescendantsAndSelf();
        ..
</code></pre>

<hr>

<p>Now, to change the <code>float</code> values to <code>long</code>, you need to obtain all <em>descendants</em> of type <code>JTokenType.Float</code> and select their <em>parent</em> <code>JProperty</code>.</p>

<blockquote>
<pre><code>foreach (var grandChildItem in grandChild)
 {
     if (grandChildItem.Value.Type == JTokenType.Float))
     {
          ..
</code></pre>
</blockquote>

<pre><code>var properties = target.DescendantsAndSelf().Where(
     x =&gt; x.Type == JTokenType.Float).Select(x =&gt; x.Parent).OfType&lt;JProperty&gt;();
</code></pre>

<hr>

<p>The last step is to change from <code>float</code> to <code>long</code>. I would not filter on <code>Contains('.')</code>, since this depends on your thread's <code>CultureInfo</code>. At my computer, I would have to check on <code>Contains(',')</code>. [after remarks OP] We should use a context-free check on <code>float</code>. The best I can come up with is <code>Regex.IsMatch(value, @"^\d*$")</code>.</p>

<blockquote>
<pre><code> if (grandChildItem.Value.Type == JTokenType.Float 
           &amp;&amp; !grandChildItem.Value.ToString().Contains('.'))      
  {
      grandChildValues.Add(new JProperty(
           grandChildItem.Key, grandChildItem.Value.ToObject&lt;long&gt;()));      
  }
</code></pre>
</blockquote>

<pre><code>foreach (var property in properties.Where(x
     =&gt; Regex.IsMatch(x.Value.ToObject&lt;string&gt;(), @"^\d*$")))
{ 
     property.Value = property.Value.ToObject&lt;long&gt;();
}
</code></pre>

<hr>
    </div>