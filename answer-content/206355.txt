<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answers suggests various strategies for fixing performance. It does not consider other aspects of the code. It does not look at numerical analysis. (If there is a cheaper way to do the actual calculation to measure progress, that's not something I can tell you.)</p>

<p>First, this code goes through a <em>lot</em> of iterations. You know that most of the time  you will not have hit the next progress marker. If you only check your progress every 100 times through the loop, you've reduced the time spent in this expensive operation to 1%. (You will lose accuracy for things that take fewer iterations, but for fast cases a progress bar is less important.)</p>

<p>Another option would be to compute the progress in a separate process. The main process could push the difference between <code>next_pi</code> and <code>current_pi</code> onto a stack, which the progress process could pop off whenever it finishes the last calculation. </p>

<p>Finally, you could estimate/lie. Graph running time (or number of iterations) vs number of digits. Is this a nice function? Then you can guess how long the computation like that will take up front, and base your progress on that. I am not a math person, so I have no idea if this is practical. If not, maybe it can get you thinking in a better direction.</p>
    </div>