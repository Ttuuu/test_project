<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You aren’t using <code>try-with-resources</code>, so you are having to A) manually close the <code>Scanner</code> yourself, and B) catch an exception just to print the stack-trace, which would happen automatically if you didn’t explicitly catch any exceptions.  Additionally, you aren’t closing the scanner if an exception happens before you manually close the scanner, since execution directly jumps to your <code>catch</code> statement.  You’d need a <code>finally</code> clause to close the scanner no matter how the <code>try</code> block is exited, and then you’d have to be worried about a possible exception in the <code>finally</code> clause, but all this is exactly what <code>try-with-resources</code> is designed for.</p>

<p>You should write your main function like:</p>

<pre><code>public static void main(String[] args) throws Exception {
    try (Scanner sc = new Scanner(System.in)) {
        int size = sc.nextInt();
        MagicSquare m = new MagicSquare(size);
        m.solve(0);
    }
}
</code></pre>

<p>Note you don’t need to call <code>sc.close()</code>, nor do you need a <code>catch ()</code> clause.  Of course, you should add your timing and print statements to the above; they were omitted for brevity.</p>

<hr>

<h2>Algorithm</h2>

<p>You’re original code tried 16 different values for the first cell, then 15 for the next cell, 14 for the next, 13 for the next, and so on, down to the last cell where one number remained.  This gave <code>16!</code> possible squares to check for “magicness”.</p>

<p>This new algorithm tries 16 different values for the first cell, 15 for the second, 14 for the third, and computes the value for the fourth cell.  On the next row, it repeats this with 12 values for the fifth cell, 11 for the next, 10 for the next, and computes the value for the eighth cell.  Ditto for the 3rd row, and finally the last row is computed.  This gives:</p>

<pre><code>16*15*14 * 12*11*10 * 8*7*6 = 1,490,227,200 possible squares
</code></pre>

<p>which is an improvement of 14,040 times over <code>16!</code> possible squares.  We can further improve this.  After exploring the row 0 solution space, instead of exploring the row 1 solution space (where you again have 4 unknowns and must pick 3 values and compute the fourth), explore the column 0 solution space.  Here, we already have 1 known value (from row 0), so only need to explore 3 unknowns by picking 2 and computing the 3rd.  After that, you continue with row 1, followed by column 1, then row 2 and column 2, and so on alternating between rows and columns.  In the case of a 4x4 magic square, these are the number of possibilities you end up with each cell (<code>1</code> cells being directly computed):</p>

<pre><code>16 15 14  1
12  9  8  1
11  6  4  1
 1  1  1  1
</code></pre>

<p>Total possibilities = <code>16*15*14 * 12*11 * 9*8 * 6 * 4 = 766,402,560</code> which is half as many possibilities, so can run in approximately half the time!</p>

<p>We can do even better, at the expense of determining a more complicated exploration path.  After exploring row 0 and column 0, you have 2 knowns on one of the diagonals.  This means if you can explore the diagonal next, with only 2 remaining unknowns, by picking 1 value for one diagonal cell (say, row 2, col 1), and computing the other (row 1, col 2).  Then continue exploration of the rows and columns, alternating between rows and columns as you go.  The 4x4 magic square exploration possibility space becomes:</p>

<pre><code>16 15 14  1
12  7  1  1
11  9  4  1
 1  1  1  1
</code></pre>

<p>Total possibilities = <code>16*15*14 * 12*11 * 9 * 7 * 4 = 111,767,040</code>, which is approximately 1/13th of your current solution’s exploration space, and so could run in just 8% of your current time.</p>
    </div>