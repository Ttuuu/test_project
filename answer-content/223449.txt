<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your double for-loop:</p>

<pre><code>  const double distThreshold = thisThreadsData-&gt;distThreshold;

  for(unsigned int i = 0; i &lt; validAlphas.size(); i++)
  {
      // Loop over all triangles (potential betas)
      for(unsigned int j = 0; j &lt; numTris; j++)
      {
        if(checkPairValid(i, j, distThreshold))
</code></pre>

<p>calls <code>checkPairValid()</code>:</p>

<pre><code>bool checkPairValid(const unsigned int i,
                    const unsigned int j,
                    const double distThreshold
                    )
{
  double path_dist_sqrd;

  if(!validAlphaIndex[j] &amp;&amp; triActive[j])
  {
    alphaCoords[0] = rayTracer-&gt;m_vecTriFixedInfo[validAlphas[i]].center.x();
    //...

    // Determine distance squared between alpha and beta
    // (x2-x1)^2 + (y2-y1)^2 +(z2-z1)^2
    path_dist_sqrd = pow((betaCoords[0] - alphaCoords[0]), 2)
                   + pow((betaCoords[1] - alphaCoords[1]), 2)
                   + pow((betaCoords[2] - alphaCoords[2]), 2);

    // Doing this instead of doing the sqrt to save doing the sqrt when not
    // needed for performance
    if(path_dist_sqrd &lt;= pow(distThreshold, 2))
    {
</code></pre>

<p>If you moved the <code>!validAlphaIndex[j] &amp;&amp; triActive[j]</code> check out of <code>checkPairValid()</code>, to the caller (the double loop), you could avoid the overhead of the function call when those indices are not valid.  Alternately, generate a list of the <code>j</code> indices once, and just loop over the valid indices, replacing <span class="math-container">\$O(n^2)\$</span> validity/active checks with a <span class="math-container">\$O(n)\$</span> validity/active check.</p>

<p>Also, you are doing calculations on <code>path_dist_sqrd</code> to avoid the square-root.  Yet, you are still calling <code>pow(distThreshold, 2)</code> on the order of <span class="math-container">\$50,000^2\$</span> times, when that value is constant.  <code>pow()</code> is not a fast function, or <code>sqrt(x)</code> would simply be defined as <code>pow(x, 0.5)</code>.</p>

<p>Additionally, each call of <code>checkPairValid()</code> has to look up <code>validAlphas[i]</code>, to get the correct index into <code>rayTracer-&gt;m_vecTriFixedInfo[__]</code>.  This value is needed three times, and the compiler will likely cache the value.  But it will not be cached across the 50,000 calls of the inner loop, where <code>i</code> remains constant.  Instead of passing in an index to an index, look up <code>validAlpha[i]</code> in the outer loop, and pass that triangle index to <code>checkPairValid()</code>.  Or lookup and cache <code>rayTracer-&gt;m_vecTriFixedInfo[validAlphas[i]].center</code> in the outer loop, and pass a reference to that coordinate to <code>checkPairValid()</code>.</p>
    </div>