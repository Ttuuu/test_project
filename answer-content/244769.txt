<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code has several areas where it can be improved.</p>
<p>The first is that you should separate the parsing code from the platform code (<code>Toast</code>). Kotlin has a great testing framework, in which it is easy to write "parsing <code>"1 2/3"</code> should return <code>listOf(1, 2, 3)</code>". This testing code works best if you run it directly on your developing machine, and without any <code>Toast</code> or <code>Activity</code>.</p>
<p>The next thing is that you should not use <code>List&lt;Int&gt;</code> in places where you originally wanted to say <code>Fraction</code> or maybe, to be more specific, <code>MixedFraction</code>. The point is that <code>listOf(1, 2, 3, 4, 5)</code> is a valid list but not a valid fraction. By using a specifically constrained type you force the Kotlin compiler to check your code for you.</p>
<pre class="lang-kotlin prettyprint-override"><code>class Fraction(
    val int: Int,
    val num: Int,
    val den: Int
)
</code></pre>
<p>To make your parser extensible to expressions that are more complicated, you must not use <code>contains</code>. Instead, the best-practice way is to split the input into tokens first (often using regular expressions) and then to combine these tokens to expression trees (using <a href="https://en.m.wikipedia.org/wiki/Canonical_LR_parser" rel="nofollow noreferrer">a parser that only looks at the very next token to decide what to do next</a>). The details of all of this are covered in any good book on compiler construction.</p>
<p>In your case, the tokens would be:</p>
<ul>
<li>unsigned integer</li>
<li>fraction slash</li>
<li>unary minus sign</li>
</ul>
<p>Note that there is no "space" token, as that is usually left out when defining an expression language.</p>
    </div>