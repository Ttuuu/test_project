<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some observations:</p>

<ul>
<li><p>It seems that <a href="https://en.cppreference.com/w/cpp/algorithm/adjacent_find" rel="nofollow noreferrer"><code>std::adjacent_find</code></a> essentially already does what you want, which is extracting all continuous sub-strings consisting of uppercase letters.</p></li>
<li><p>Removing duplicates from a vector might be fine, but you can also avoid this completely by inserting the found elements into a <code>std::set</code>. I suspect that the number of unique variables is always small, so this is a cleaner approach.</p></li>
<li><p>There is no reason for <code>isCapital</code> to be a member function. Instead, it should be a free function. Remember that interfaces should be complete but minimal. But in fact, there's no reason for the function in the first place: the standard already has <code>std::isupper</code> that we should rather use.</p></li>
</ul>

<p>So with these in mind, we can re-write your function to e.g.,:</p>

<pre><code>std::vector&lt;std::string&gt; get_variables(const std::string&amp; str)
{
    std::set&lt;std::string&gt; vars;

    for (auto first = str.cbegin(); first != str.cend(); )
    {
        auto var_end = std::adjacent_find(first, str.cend(),
            [](char a, char b) 
        { 
            return std::isupper(static_cast&lt;unsighed char&gt;(a)) !=
                std::isupper(static_cast&lt;unsigned char&gt;(b)); 
        });

        if (var_end != str.cend())
        {
            ++var_end;
        }

        if (std::isupper(static_cast&lt;unsigned char&gt;(*first)))
        {
            vars.insert(std::string(first, var_end));
        }

        first = var_end;
    }

    return std::vector&lt;std::string&gt;(vars.cbegin(), vars.cend());
}
</code></pre>

<p>Notice that we've cast <code>char</code> to <code>unsigned char</code> before the call to <code>std::isupper</code> (thanks to <a href="https://codereview.stackexchange.com/users/42409/deduplicator">Deduplicator</a> for explaining this to me). The reason is that <code>std::isupper</code> takes an argument of type <code>int</code> which must be in the range of unsigned char (or special value EOF, -1). Unfortunately, a plain <code>char</code> has either the range of signed char or unsigned char, so we perform a cast to confer to this common convention of character classification functions.</p>
    </div>