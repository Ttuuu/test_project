<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>What is Slow?</h2>
<p>It is hard to know what people mean by slow. Your expectation may be comparable to a good C multi threaded Mandelbrot viewer zooming at 60fps, and slow means your code is more like 30-20fps.</p>
<p>So all I can do is give you some pointers in regard to performance.</p>
<p>Use ctx.getImageData to create an array to hold the pixels as 32Bit ints. Use a Uint32Array to hold the pallet colors so you can move them to the image pixels in one step.</p>
<p>In performance code don't create and then dump arrays. <code>var arr = []</code> has a lot of overhead. so does <code>a.push(1)</code> even dumping an array has overhead <code>arr = undefined</code></p>
<p>Don't do what is not needed inside performance code. At the very core of the render you had a completely redundant calculation that amounted to about 1/3 of the calculations done in the inner loop. that one line would have been 20% of the CPU cost (if you had all else optimal)</p>
<h2>A slight improvement</h2>
<p>Below is a quick example of the above points. I don't know if its the type of improvement you are looking for, (there are faster algorithms but they are complex) For a single thread JS per pixel Mandelbrot its about as fast as it can be done using the standard method.</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const blindmansPallet = {
    color: (r, g, b, a = 255) =&gt; ({r, g, b, a}),
    createLookup(range, size) {
        var idx = 0;
        blindmansPallet.range = range;
        blindmansPallet.int32 = new Uint32Array(size);
        const int8 = new Uint8ClampedArray(blindmansPallet.int32.buffer);
        const rangeStep = size / (range.length -1);
        for(let i = 0; i &lt; size; i ++) {
            const low = i / rangeStep | 0;
            const high = low + 1;
            const unitDistBetweenRange = (i - (low * rangeStep)) / rangeStep;
            const u = unitDistBetweenRange;
            const lRGBA = range[low];
            const hRGBA = range[high];
            int8[idx++] = ((hRGBA.r ** 2 - lRGBA.r ** 2) * u + lRGBA.r ** 2) ** 0.5;
            int8[idx++] = ((hRGBA.g ** 2 - lRGBA.g ** 2) * u + lRGBA.g ** 2) ** 0.5;
            int8[idx++] = ((hRGBA.b ** 2 - lRGBA.b ** 2) * u + lRGBA.b ** 2) ** 0.5;
            int8[idx++] = ((hRGBA.a ** 2 - lRGBA.a ** 2) * u + lRGBA.a ** 2) ** 0.5;
        }
        return blindmansPallet.int32;
    }
};

;(() =&gt; {
    var panX = -3.5, panY = -1.5, zoom = 50, maxI = 100;
    const pallet = blindmansPallet.createLookup([
            blindmansPallet.color(0x00, 0x07, 0x64), 
            blindmansPallet.color(0x20, 0x6b, 0xcb), 
            blindmansPallet.color(0xed, 0xff, 0xff), 
            blindmansPallet.color(0xff, 0xaa, 0x00), 
            blindmansPallet.color(0x00, 0x02, 0x00)
        ], maxI
    );

    const ctx = canvas.getContext("2d");
    const W = canvas.width, H = canvas.height;
    const imgData = ctx.getImageData(0,0,W,H);
    const pixels = new Uint32Array(imgData.data.buffer);
    canvas.addEventListener("click",(e) =&gt; {
       var mx = panX + e.clientX / zoom;
       var my = panY + e.clientY / zoom;
       zoom *= 1.20;
       panX = mx - (e.clientX / zoom);
       panY = my - (e.clientY / zoom);
       draw(zoom, panX, panY);
    });

    draw(zoom, panX, panY);
    function draw(zoom, panX, panY, w = W, h = H, maxI = 100) {
        var px,py,x,y,xOld,yOld,xNew,yNew,i;
        for (px = 0; px &lt; w; px++) {
            for (py = 0; py &lt; h; py++) {
                xOld = x = panX + px / zoom;
                yOld = y = panY + py / zoom;
                for (i = 0; i &lt; maxI; i++) {
                    xNew = (xOld * xOld) - (yOld * yOld) - x;
                    yNew = (2 * xOld * yOld) - y;
                    if (xNew * xNew + yNew * yNew &gt; 4) { break }
                    xOld = xNew;
                    yOld = yNew;
                }
                pixels[px + py * W] = pallet[i];
            }
        }
        ctx.putImageData(imgData,0,0);
    }
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
    font-family: verdana;
    user-select: none;    
    -moz-user-select: none;    
}
canvas {
   cursor: crosshair;
   border: 1px solid black;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="canvas" width="400" hieght="250" style="cursor:crosshair"&gt;&lt;/canvas&gt;
&lt;div&gt;Click to image to zoom. 400px by 250px single thread&lt;/div&gt;</code></pre>
</div>
</div>

<h2>More performance</h2>
<p>For better you can use web-workers and share the typed arrays.</p>
<p>You can use previous rendering to estimate where to add detail as you zoom in (a type of quad tree renderer).</p>
<p>You can have instant refresh. That is, rather than wait for a frame to finish, as soon as a pan/zoom request is made, you drop the current processing and start on the new frame (this gives the illusion of better performance)</p>
    </div>