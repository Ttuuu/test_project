<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Simply modifying this algorithm will not solve the problem in the required time. When n=10, this code is going through every permutation of an array of 30 integers. That is 30! (about 2^107) permutations. Going faster through the loop in paths() will not be enough.</p>

<p>I would suggest a backtracking solution, which cuts down the search space enormously. I think the answer when n=10 should be around 125,000,000. I'd also claim the code should run in under 30 seconds.</p>

<p>Obligatory code review comment. In the loop in main(), there is an out of bounds bug when evaluating buff[j+1] when j == e-1;</p>

<p>Here is the code that I wrote using a backtracking approach.</p>

<pre><code>#include&lt;iostream&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
using namespace std;

class TripCounter {
public:
    TripCounter(int cities, int visits) : length(cities*visits) {
        for (auto i = 1; i &lt;= cities; i++)
            pool[i] = visits;
    }

    long Count() {
        count = 0;
        BackTracker(0);
        return count;
    }

private:
    void BackTracker(int level) {
        if (level == length) {
            count++;
            return;
        }
        for (auto&amp; bucket : pool) {
            if (IsValidAtLevel(bucket, level)) {
                trip.push_back(bucket.first);
                bucket.second--;
                BackTracker(level + 1);
                bucket.second++;
                trip.erase(trip.end() - 1);
            }
        }
    }

    bool IsValidAtLevel(pair&lt;int, int&gt; bucket, int level) {
        if (bucket.second == 0)
            return false;
        if (level == 0)
            return true;
        if (bucket.first == trip[level - 1])
            return false;
        return true;
    }

private:
    map&lt;int, int&gt; pool;
    int const length = 0;
    vector&lt;int&gt; trip;
    int count = 0;
};

int main() {
    int n;
    cin &gt;&gt; n;

    auto counter = TripCounter(3, n);
    cout &lt;&lt; "Backtracking: " &lt;&lt; counter.Count() &lt;&lt; endl;
}
</code></pre>
    </div>