<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Avoiding <code>else</code></h3>

<p>If you can avoid <code>else</code> then it can simplify indentation. For example: </p>

<blockquote>
<pre><code>if (!fs.existsSync(name)) {
    fs.mkdirSync(name);
} else {
    throw new Error(`directory ${name} already exist`);
}
</code></pre>
</blockquote>

<p>The error can be thrown the error if the name exists, but if not just go ahead with the call to <code>fs.mkdirSync()</code>:</p>

<pre><code>if (fs.existsSync(name)) {
    throw new Error(`directory ${name} already exist`);
} 
fs.mkdirSync(name);
</code></pre>

<p>In some cases you may have to manually <code>return</code> or <code>exit</code> if the statement inside the first conditional doesn't return early or terminate the process - e.g. inside <code>onCopyDone()</code>.</p>

<h3>Use <code>const</code> instead of <code>let</code> when appropriate</h3>

<p>It is wise to get in the habit of using <code>const</code> for any value that doesn't get re-assigned. Then if you need to have a variable that changes, switch to using <code>let</code>. This affects variables like <code>result</code> in the callback inside <code>replaceInFile()</code>.</p>

<h3>Arrow functions</h3>

<p>The parentheses are not necessary on arrow functions with only one argument. Also, a single line doesn't need to have brackets - while this would lead to the return value of the statement getting returned, it shouldn't matter in most cases - so this:</p>

<blockquote>
<pre><code>i.stdout.on('data', (data) =&gt; {
    console.log(`stdout: ${data}`);
});
</code></pre>
</blockquote>

<p>can be simplified to:</p>

<pre><code>i.stdout.on('data', data =&gt; console.log(`stdout: ${data}`));
</code></pre>
    </div>