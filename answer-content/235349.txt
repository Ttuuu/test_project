<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Consider the edge cases</h1>
<p>The first thing I tried to do was:</p>
<pre><code>#include &lt;iostream&gt;
int main()
{
    std::cout &lt;&lt; FindMaximumSubarray({});
}
</code></pre>
<p>This resulted in a stack overflow, since we check for a unitary vector but not for an empty one.</p>
<p>Consider using a larger type for the accumulator, as the sum is liable to overflow if the inputs are large.  Ideally, you'd want to use a type that can represent <code>SIZE_MAX</code> times the range of <code>int</code>.</p>
<h1>Make good use of <code>&lt;algorithm&gt;</code></h1>
<p>Instead of <code>FindMaximumNumber()</code>, we can simply use <code>std::max()</code>:</p>
<pre><code>  return std::max({FindMaximumSubarray({vec.begin(), vec.begin() + midIndex}),
                   FindMaximumSubarray({vec.begin() + midIndex, vec.end()}),
                   FindMaximumSubarrayCrossing(vec)});
</code></pre>
<p>We can use <code>std::find_if()</code> to find the first and last positive values, immediately trimming off parts of the input which will never contribute.</p>
<h1>Other observations</h1>
<p>Internal functions ought to have internal (<code>static</code>) linkage.</p>
<p>Use the correct type for <code>midIndex</code> - it should be a <code>std::size_t</code>.  Simply using <code>auto</code> would avoid that mistake.</p>
<p><code>FindMaximumSubarrayCrossing</code> contains two code blocks that are almost identical - it may be worth refactoring to reduce duplication.</p>
<p>When we test <code>sum &gt; leftSum</code>, that's exactly equivalent (in the absence of overflow) to <code>*itr &gt; 0</code>.  That observation may help in identifying a more efficient algorithm.</p>
<p>Using <code>INT_MIN</code> as a marker is risky, given that that's a valid input value.</p>
<p>We could just use <code>std::find_if()</code> to locate zero-crossings and <code>std::accumulate()</code> to total each positive and each negative run.  Then see which runs combine usefully.</p>
    </div>