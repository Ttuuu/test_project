<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Finally only for unconditional execution</h2>

<p>I am not a React user, and as such I may be missing something unique to the React way. </p>

<p>It seams very strange that you use a <code>finally</code> block to execute code you don't want to guarantee execution.</p>

<blockquote>
  <p>As far as I see it, these are my options for dealing with this:</p>
</blockquote>

<p>You list 5 options... Why not a 6th?</p>

<ol start="6">
<li>Remove the <code>finally { ... }</code> block setting the is loading state after the <code>try catch</code> and having the catch return if unmounted.</li>
</ol>

<p>If I ignore React the <em>"Idomatic way to ignore <code>finally</code> block..."</em> is to remove it.</p>

<p>eg</p>

<pre><code>async componentDidMount() {
    try {
        this.axiosCancelTokenSource = axios.CancelToken.source()
        this.setState({ isLoading: true })
        const { data } = await axios.get('...', {
            cancelToken: this.axiosCancelTokenSource.token,
        })
        this.setState({ data })
    } catch(error) {
         if (axios.isCancel(error)) return
         handleError(error)
    }
    this.setState({ isLoading: false })
}
</code></pre>

<h3>Catch only known exceptions</h3>

<p><code>try ... catch</code> should only be used to wrap code that is known to throw a known set of exceptions (in this case network, data, or forced exceptions related to <code>axios.get</code>). </p>

<p>Wrapping all code automatically in a <code>try catch</code> means that it is possible to catch unknown exceptions (AKA BUGS) effectively hiding/obscuring the erroneous behavior during the development cycle.</p>

<h3>Example</h3>

<p>Removing the <code>try</code> from around known safe code, catching only exceptions related to the functions role.</p>

<pre><code>// pseudo code as example only
async mount() {
    loading = (isLoading = true) =&gt; this.setState({isLoading});
    cancelToken = axios.CancelToken.source();
    loading();
    try {
        this.setState({data: (await axios.get("...", {cancelToken})).data});
    } catch (e) {
         if (axios.isCancel(e)) { return }
         handleError(e);
    } 
    loading(false);
}
</code></pre>
    </div>