<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Initial thoughts</h1>

<p>The code is not bad - has most consistent indentation using tabs. The game plays fine in Chrome on my macbook pro. I know <a href="https://codereview.stackexchange.com/revisions/242944/1">you initially asked how to convert it to "object Oriented Design"</a>. The current code is somewhat object-oriented already using JavaScripts objects. </p>

<h1>Suggestions</h1>

<h2>Game play</h2>

<p>The score does not appear to be reset after subsequent starts. This is typically a feature in many games.</p>

<p>For mobile users an option to detect motion might be considered for controlling the direction of the car - e.g. with the <a href="https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent" rel="nofollow noreferrer">DeviceMotionEvent API</a>.</p>

<h2>Code</h2>

<h3>Variable scope</h3>

<p>Limit the scope of variables to blocks and functions by using <code>const</code> as a default when declaring variables and functions. If re-assignment is needed then use <code>let</code> (e.g. in a loop). This can help avoid potential bugs where variables get over-written accidentally.</p>

<p>In a larger application you would want to limit the scope of all the variables declared at the top - e.g. <code>redGamePiece</code>, <code>backgroundRoad</code>, etc. An <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow noreferrer">IIFE</a> or <a href="https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch09s03.html" rel="nofollow noreferrer">revealing module</a> can assist with doing this.</p>

<h3>Braces</h3>

<p>Some braces are placed on a new line:</p>

<blockquote>
<pre><code>function updateGameArea()
{
</code></pre>
</blockquote>

<p>Many style guides disallow this - e.g. <a href="https://google.github.io/styleguide/jsguide.html#formatting-braces" rel="nofollow noreferrer">the Google JS Style guide</a></p>

<blockquote>
  <h3>4.1.2 Nonempty blocks: K&amp;R style</h3>
  
  <p>Braces follow the Kernighan and Ritchie style ("<a href="http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html" rel="nofollow noreferrer">Egyptian brackets</a>") for nonempty blocks and block-like constructs:</p>
  
  <ul>
  <li>No line break before the opening brace.</li>
  <li>Line break after the opening brace.</li>
  <li>Line break before the closing brace.</li>
  <li>Line break after the closing brace <em>if</em> that brace terminates a statement or the body of a function or class statement, or a class method. Specifically, there is no line break after the brace if it is followed by <code>else</code>, <code>catch</code>, <code>while</code>, or a comma, semicolon, or right-parenthesis.</li>
  </ul>
</blockquote>

<h3>Animation frames</h3>

<p><code>SetInterval()</code> is acceptable for many machines but for machines with lower resources (e.g. older machines, mobile devices) it would be wise to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame" rel="nofollow noreferrer"><code>requestAnimationFrame()</code></a> instead. For more information on this matter, refer to this blog post: <a href="https://hacks.mozilla.org/2011/08/animating-with-javascript-from-setinterval-to-requestanimationframe/" rel="nofollow noreferrer"><em>Animating with javascript: from setInterval to requestAnimationFrame</em></a>. </p>

<h3>Prototypal inheritance</h3>

<p>The methods are added to each instance of the classes - e.g. <code>myGameArea</code> has methods <code>load</code>, <code>start</code>, <code>clear</code>, and <code>stop</code> while each <code>component</code> instance has its own <code>update</code>, <code>newPos</code>, and <code>crashWith</code> method. For better performance<sup><a href="https://stackoverflow.com/a/4508498/1575353">1</a></sup> these should be added to the prototypes. </p>

<p>For example: </p>

<pre><code>function myGameArea() {
    this.canvas = document.getElementById("myCanvas");
}

myGameArea.prototype.load = function() {
    this.canvas.width = canvasW;   
    // etc...
}
myGameArea.prototype.start = function() {
    clearInterval(this.loadInterval);
    this.interval = setInterval(updateGameArea, 20);
}
</code></pre>

<h3>Class syntax</h3>

<p>You could convert the code to the newer ES6 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">class syntax</a> - bear in mind that it is "<em>primarily syntactical sugar over JavaScript's existing prototype-based inheritance</em>". If there were many subclasses then it would help simplify setting up the prototypal inheritance. </p>

<h3>Looping</h3>

<p>Some loops can be simplified - e.g. instead of the first <code>for</code> loop in <code>updateGameArea()</code>:</p>

<blockquote>
<pre><code> for (i = 0; i &lt; myObstacles.length; i += 1) {
    if (redGamePiece.crashWith(myObstacles[i])) {
      myGameArea.stop();
      return;
    }
}
</code></pre>
</blockquote>

<p>A <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of" rel="nofollow noreferrer"><code>for...of</code> loop</a> could eliminate the need to dereference the obstacle at the current index:</p>

<pre><code>for (const obstacle of myObstacles) {
    if (redGamePiece.crashWith(obstacle)) {
      myGameArea.stop();
      return;
    }
}
</code></pre>

<p>That could be simplified even further using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" rel="nofollow noreferrer"><code>Array.some()</code></a>:</p>

<pre><code>if (myObstacles.some(obstacle =&gt; redGamePiece.crashWith(obstacle))) {
    myGameArea.stop();
    return;
}
</code></pre>

<p><sup>1</sup><sub><a href="https://stackoverflow.com/a/4508498/1575353">https://stackoverflow.com/a/4508498/1575353</a>)</sub> </p>
    </div>