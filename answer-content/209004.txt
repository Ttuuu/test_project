<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Although the description claims that most C++ types are supported, I see only <code>int</code> and two kinds of string.  The <code>std::hash</code> class <a href="https://en.cppreference.com/w/cpp/utility/hash#Standard_specializations_for_basic_types" rel="nofollow noreferrer">is specialized</a> for quite a few more types than that:</p>

<pre><code>template&lt;&gt; struct hash&lt;bool&gt;;
template&lt;&gt; struct hash&lt;char&gt;;
template&lt;&gt; struct hash&lt;signed char&gt;;
template&lt;&gt; struct hash&lt;unsigned char&gt;;
template&lt;&gt; struct hash&lt;char16_t&gt;;
template&lt;&gt; struct hash&lt;char32_t&gt;;
template&lt;&gt; struct hash&lt;wchar_t&gt;;
template&lt;&gt; struct hash&lt;short&gt;;
template&lt;&gt; struct hash&lt;unsigned short&gt;;
template&lt;&gt; struct hash&lt;int&gt;;
template&lt;&gt; struct hash&lt;unsigned int&gt;;
template&lt;&gt; struct hash&lt;long&gt;;
template&lt;&gt; struct hash&lt;long long&gt;;
template&lt;&gt; struct hash&lt;unsigned long&gt;;
template&lt;&gt; struct hash&lt;unsigned long long&gt;;
template&lt;&gt; struct hash&lt;float&gt;;
template&lt;&gt; struct hash&lt;double&gt;;
template&lt;&gt; struct hash&lt;long double&gt;;
template&lt; class T &gt; struct hash&lt;T*&gt;;
</code></pre>

<p>In addition, the <code>std::string</code> hash is very collision-prone, as it uses only the length of the string (and the <code>char*</code> version doesn't even use <code>std::strlen()</code> - are you intending to even reinvent that wheel?).</p>

<hr>

<p><code>std::size_t</code> is missing its necessary include (usually <code>&lt;cstdlib&gt;</code>) and is consistently misspelt.</p>

<p>We need to include <code>&lt;stdexcept&gt;</code> for <code>std::out_of_range</code> and <code>std::invalid_argument</code>.</p>

<hr>

<p>The compiler-generated copy constructor won't do what we want with <code>hash_entries</code> or <code>filled_positions</code> - that's dangerous, and will lead to multiple objects believing they own the pointers, and double deletion.</p>

<hr>

<p><code>cbegin()</code> and <code>cend()</code> functions ought to be usable on a <code>const hash_map</code> (and <code>begin()</code> and <code>end()</code> ought to be overloaded suitably, too).  Other const methods are lacking (such as <code>find()</code>) which make const maps much less useful than they ought to be.</p>
    </div>