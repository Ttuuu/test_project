<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>1) Remove unused headers</h1>
<p>You don't need <code>stdlib.h</code> and <code>stdio.h</code>. These are C headers, and you'll rarely use them in C++ (and if you need to use them, use <code>cstdlib</code> and <code>cstdio</code>). Similarly, don't use <code>time.h</code> in C++; C++ provides much better functionality in the form of the <code>chrono</code> library.</p>
<h1>2)Forward declarations</h1>
<p>You don't need to forward declare your classes, since you're already including them.</p>
<h1>3) Random number generation</h1>
<p>Don't use <code>srand</code> and <code>rand</code>. These are C methods for random number generations, and truthfully aren't that random at all. Prefer using <code>random</code> library provided by the STL.</p>
<h1>4) Static</h1>
<p>Your use of <code>static</code> in the <code>main</code> method doesn't make sense, since <code>main</code> is not a function you will be calling repeatedly.</p>
<h1>5) while(true)</h1>
<p>The <code>while(true)</code> doesn't make any sense; it's not doing anything. You can safely remove it from the code.</p>
<h1>6) Don't use <code>exit</code></h1>
<p>I suspect you're using <code>exit</code> because the outer infinite loop; once you've removed the loop, you should use <code>window.Close()</code> method. This exits the game loop, and allows you to do any resource cleanup or post game-loop activity.</p>
<h1>7)  Separate simulation and render logic</h1>
<p>Your simulation and render logic are interspersed together. You first check if the snake is in contact with the food, then render the frame, and then check if the snake is biting itself. Ideally, you'd want the simulation and render logic grouped together, possibly as separate functions.</p>
<h1>8) Use <code>std::this_thread::sleep_for</code> instead of <code>_sleep</code>.</h1>
<h1>9) Call <code>sf::display</code> only once per frame.</h1>
<p>You have multiple <code>display</code> calls per frame. You only want to call display once per frame, after you've sent all data to be displayed by using <code>sf::draw</code>.</p>
<h1>10) <code>playAgain</code></h1>
<p>playAgain can be consolidated into the main game loop, instead of running a separate infinite loop. Just something for you to look into.</p>
<h1>11) Better error messages</h1>
<p>Suppose your <code>newFont</code> methods cannot find the font. It just silently exits. The developer has no idea what happened. Instead, provide the developer with a complete error message explaining what failed. Something like "Unable to allocate font: &lt;font_path&gt;". This allows the developer to fix the issue. Better yet, have a backup font in case font allocation fails; this allows the game to run even if it can't find the font.</p>
<h1>12) You don't need a <code>break</code> statement in the switch body if you're returning a value.</h1>
<h1>13) <code>static</code> data members in Snake</h1>
<p>The use of static data members in the <code>Snake</code> class binds all instances to a particular configuration for Snake. If I want to have multiple snakes (I don't know; maybe you're creating a local multiplayer version), each with different colors or thickness, I'm out of luck. Consider making them instance data members.</p>
<h1>14) <code>SnakeFood::isTouching()</code> should be <code>const</code>. Similarly, <code>Snake::isTouchingFood</code> and <code>Snake::isTouchingSelf</code> should be <code>const</code>.</h1>
<h1>15) <code>body.begin() + 0</code> is the same as <code>body.begin()</code>.</h1>
<h1>16) General advice</h1>
<p>One way you can improve your design is to have <code>snake</code> contain a <code>simulate</code> or <code>update</code> method, which simulate the snake i.e. moving, checking if out of bounds, check if eating the food or biting itself; then inside your game loop, you can simply do <code>snake.simulate()</code>, it's much cleaner code.</p>
<p>Learn to use STL features, instead of C library features; the former is much more robust than the latter.</p>
    </div>