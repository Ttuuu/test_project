<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In most cases, the line that's invoking the function call is the code that knows about the UI. So it's logical that it's done at the call site rather than elsewhere. For example:</p>

<pre><code>// Define functionality in inert functions.
const getData = () =&gt; fetch(...).then(res =&gt; res.json())

const processData = () =&gt; { ... }

const showWaitMessage = () =&gt; { ... }

chost hideWaitMessage = () =&gt; { ... }

// When you actually want to do stuff, just call them.   
showWaitMessage()

getData() 
  .then(data =&gt; {
    hideWaitMessage()
    processData(data)
  })
</code></pre>

<p>In more structured frameworks like Angular, you'll have greater separation between UI code and logic code. You don't want to call UI functions in places that have no business with the UI at all.</p>

<pre><code>// A class housing all the data fetching logic.
// In this code, you'll have no (official/non-hacky) way to reach the UI.
@Injectable({ ... })
class DataService {
  constructor(someHttpClient){
    this.someHttpClient = someHttpClient
  }
  getData(){
    return this.someHttpClient.fetch().then(r =&gt; r.json())
  }
}

// A class that handles the UI.
@Component({ ... })
class YourComponent {
  constructor(dataService) {
    this.dataService = dataService
  }
  showWaitMessage() {
    ...
  }
  hideWaitMessage() {
    ...
  }
  processData() {
    ...
  }
  async doSomething(){
    this.showWaitMessage()
    const data = this.dataService.getData()
    this.hideWaitMessage()
    this.processData(data) 
  }
}
</code></pre>

<p>You can read more about this by researching on <a href="https://en.wikipedia.org/wiki/Inversion_of_control" rel="nofollow noreferrer">Inversion of Control</a>. In a gist, you write small independent functions. Then some "glue code" just calls into these functions to compose a larger functionality. In the example above, <code>doSomething()</code> glues together <code>showWaitMessage</code>, <code>getData</code>, <code>hideWaitMessage</code> and <code>processData</code> while all four functions are unaware of each other.</p>
    </div>