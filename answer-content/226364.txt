<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Non-Local Variables</h2>

<p><code>ans</code> is visible (for reading) inside of <code>helper</code>.  It just can't be changed, although its contents can be modified.</p>

<p>So yes,  <code>ans = [0]</code> is an ugly hack.  You don't need it.  What you need in its place is <code>nonlocal</code>.</p>

<pre><code>def maximumAverageSubtree(self, root: TreeNode) -&gt; float:
    ans = 0

    def helper(node):
        nonlocal ans     # &lt;--- Refer to ans in outer (but not global) scope

        if not node:
            return 0, 0

        left_sum, left_count = helper(node.left)
        right_sum, right_count = helper(node.right)

        ans = max(ans, (left_sum + right_sum + node.val) / (left_count + right_count + 1))

        return left_sum + right_sum + node.val, left_count + right_count + 1

    helper(root)

    return ans
</code></pre>

<h2>Arbitrary-named, narrowly-scoped recursive function</h2>

<p>In this case, you're going to need to get used to it.</p>

<p>Instead of creating a new function, which is visible outside the <code>maximumAverageSubtree</code> function, this <code>helper</code> is only useful to this function.  It does not need to exposed to the outside, so it makes sense to hide it inside.</p>

<p>This is a common paradigm in Python.  Decorators use this all the time.  For example, a <code>@timed</code> decorator has an internal <code>wrapper()</code> function.</p>

<pre><code>def timed(func):

    def wrapper(*argv, **kwargs):
        start_time = time.perf_counter()
        result = func(*argv, **kwargs)
        end_time = time.perf_counter()
        print(func.__name__, "took", end_time - start_time, "seconds")
        return result

    return wrapper
</code></pre>

<p>The function shouldn't be arbitrarily named; its name should reflect its purpose.  Here, we are wrapping a call to another function, so <code>wrapper()</code> makes sense.</p>

<p>Above, you have a <code>helper()</code> function.  That probably could be named better.  Maybe <code>process_subtree(node)</code>.  But it is "scoped" inside <code>maximumAverageSubtree()</code>, so its name doesn't need to repeat that level of detail.</p>
    </div>