<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>Your function <strong>fails to write a NUL terminator</strong> at the end of the output.  That means that the caller must zero the entire buffer before calling the function (or else use a <code>static</code> buffer).</p>

<p>The output does have a superfluous space at the end, though.</p>

<p>As a rule, whenever you call a function to write to a string buffer, you <strong>must also pass the buffer's size</strong>.  Otherwise, the function has no way of knowing when to stop before the <strong>buffer overflows</strong>.  (That's why poorly designed functions such as <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/gets.html" rel="noreferrer"><code>gets(char *buf)</code></a> and <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/sprintf.html" rel="noreferrer"><code>sprintf(char *s, const char *format, …)</code></a> should be shunned, and you should use the safer alternatives <code>fgets(char *s, int n, FILE *stream)</code> and <code>snprintf(char *s, size_t n, const char *format, …)</code> instead.)</p>

<p>Therefore, I recommend that <code>words()</code> be designed similar to <code>snprintf()</code>: it should accept one more parameter for the buffer size, and it should return the length of the string that was written (or should have been written).</p>

<p>It's annoying that your string arrays are off <strong>"off by one"</strong>, such that you have to write <code>-1</code> in <code>digits[r - 1]</code>, <code>teens[l - 1]</code>, and <code>tens[r - 1]</code>.</p>

<p>The <strong><code>hundreds</code> array is altogether misnamed</strong>, as it has nothing to do with hundreds.  I'd call it <a href="https://en.wikipedia.org/wiki/Long_and_short_scales" rel="noreferrer"><code>scales</code></a>.</p>

<h2>Algorithm and implementation</h2>

<p>Your string manipulation is inefficient:</p>

<ul>
<li><strong>Prepending</strong> any string (using <code>strprep()</code>) involves copying characters.  It would be worthwhile to rework the algorithm such that it only needs to write its output sequentially and never needs to prepend anything.</li>
<li>If you <em>did</em> have to prepend a string, it would be smarter to avoid allocating a temporary string using <code>strdup()</code>, then freeing it.  Using <code>memmove()</code>, with <strong>no temporarily allocated memory</strong>, would be smarter.</li>
</ul>

<p>By the way, the <code>strprep()</code> function, being a helper function, should be declared <code>static</code>.</p>

<p>The special case…</p>

<blockquote>
<pre><code>if(!strlen(dest))
{
    strcpy(dest, "zero");
}
</code></pre>
</blockquote>

<p>… should be handled at the very beginning of <code>words()</code>, using <code>if (n == 0)</code>, <strong>avoiding <code>strlen()</code></strong>, which would have to traverse the output character by character to determine the length.  (And remember, <code>strlen()</code> doesn't even work, since you don't ensure that the output is NUL-terminated.)</p>

<p><code>n = (n - r) / 10</code> can be simply written as <code>n /= 10</code>.</p>

<p>Nobody likes to read code with uncommented <strong>cryptic variable names</strong> like this:</p>

<blockquote>
<pre><code>unsigned int l, r, m, d = 0, t = 0;
</code></pre>
</blockquote>

<p>After staring at your code for a <em>very</em> long time, I have figured out that…</p>

<ul>
<li><code>d</code> is the exponent of 10 (and would probably be better named <code>exponent</code>).</li>
<li><code>t</code> is just <code>d / 3</code> (and should therefore be eliminated).</li>
<li><code>m</code> is just <code>d % 3</code> (and should therefore be eliminated).</li>
<li><code>r</code> is the rightmost digit currently being considered.</li>
<li><code>l</code> is the digit to the right of <code>r</code>.</li>
</ul>

<h2>Minimal rewrite</h2>

<p>Here is a slightly revised version of your code, with the following goals:</p>

<ul>
<li><code>NUL</code> terminator</li>
<li><code>strprep()</code> without a temporary string allocation</li>
<li>character arrays without the off-by-one annoyance</li>
<li>simpler special case for <code>0</code></li>
<li>fewer variables, with more intuitive names</li>
</ul>



<pre><code>#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

const char *digits[] = { NULL, "one ", "two ", "three ", "four ", "five ", "six ", "seven ", "eight ", "nine " };
const char *tens[] = { NULL, "ten ", "twenty ", "thirty ", "forty ", "fifty ", "sixty ", "seventy ", "eighty ", "ninety " };
const char *teens[] = { "ten ", "eleven ", "twelve ", "thirteen ", "fourteen ", "fifteen ", "sixteen ", "seventeen ", "eighteen ", "nineteen " };
const char *scales[] = { "", "thousand ", "million ", "billion " };

static void strprep(const char *prefix, char *dest) {
    size_t prefix_len = strlen(prefix);
    memmove(dest + prefix_len, dest, strlen(dest) + 1);
    memcpy(dest, prefix, prefix_len);
}

void words(unsigned int n, char *dest) {
    if (n == 0) {
        strcpy(dest, "zero");
        return;
    }

    *dest = '\0';

    int prev_digit;
    for (int exponent = 0; n; exponent++) {
        int digit = n % 10,
            remaining_digits = n / 10;

        if ((exponent % 3 == 0) &amp;&amp; (n % 1000)) {
            strprep(scales[exponent / 3], dest);
        }

        if (digit) {
            switch (exponent % 3) {
              case 0:
                if (remaining_digits % 10 != 1) {
                    strprep(digits[digit], dest);
                }
                break;
              case 1:
                if (digit == 1) {
                    strprep(teens[prev_digit], dest);
                } else {
                    strprep(tens[digit], dest);
                }
                break;
              case 2:
                strprep("hundred ", dest);
                strprep(digits[digit], dest);
                break;
            }
        }

        prev_digit = digit;
        n = remaining_digits;
    }
}
</code></pre>

<h2>Suggested solution</h2>

<p>I recommend using a completely different algorithm, because:</p>

<ul>
<li>For efficiency, the algorithm needs to always append, never prepend.</li>
<li>You need to keep track of the number of bytes written, so as to avoid buffer overflow.</li>
<li><p>Your algorithm is hard to understand.  When considering the ones digit, it needs to look ahead to see whether the tens digit is <code>1</code>, in which case it should temporarily output nothing.  When considering the tens digit, if it's <code>1</code>, then it needs to consult the previously saved ones digit (which is the only place where <code>l</code> is used).</p>

<p>I recommend considering groups of three digits at a time, so that you have a variable which represents the hundreds, the tens, and the ones digit.</p></li>
</ul>

<p>This ends up being a lot of <code>snprintf()</code> calls, keeping track of the number of characters written.</p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;stdio.h&gt;

static const char *digits[] = {
    "", "one", "two", "three", "four", "five",
    "six", "seven", "eight", "nine"
};
static const char *teens[] = {
    "ten", "eleven", "twelve", "thirteen", "fourteen",
    "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"
};
static const char *tens[] = {
    "", "ten", "twenty", "thirty", "forty",
    "fifty", "sixty", "seventy", "eighty", "ninety"
};
static const char *scales[] = { "", "thousand", "million", "billion" };

/**
 * Given 0 &lt;= n &lt; 1000, writes n as English words to buf, followed by a NUL
 * terminator.  If n == 0, then just a NUL terminator is written.
 *
 * Returns the length of the output written, excluding the NUL terminator
 * (or the length of the string that should have been written, if the return
 * value is greater than or equal to the buffer size).
 */
static int words1k(int n, char *buf, size_t size) {
    assert(0 &lt;= n &amp;&amp; n &lt; 1000);
    int h = n / 100,
        t = (n % 100) / 10,
        o = (n % 10);
    switch (t) {
      case 0:
        return snprintf(buf, size, "%s%s%s%s",
            digits[h], (h ? " hundred" : ""),
            (h &amp;&amp; o ? " " : ""), digits[o]);
      case 1:
        return snprintf(buf, size, "%s%s%s",
            digits[h], (h ? " hundred " : ""), teens[o]);
      default:
        return snprintf(buf, size, "%s%s%s%s%s",
            digits[h], (h ? " hundred " : ""),
            tens[t], (t &amp;&amp; o ? "-" : ""), digits[o]);
    }
}

/**
 * Writes n as English words to buf, followed by a NUL terminator.
 * (A buffer size of 120 is recommended.)
 *
 * Returns the length of the output written, excluding the NUL terminator
 * (or the length of the string that should have been written, if the return
 * value is greater than or equal to the buffer size).
 */
int words(unsigned int n, char *buf, size_t size) {
    size_t len = 0;
    if (n == 0) {
        return snprintf(buf, size, "zero");
    } /* else if (n &lt; 0) {
        int nlen = snprintf(buf, size, "negative ");
        len = words(-n, buf + nlen, (size &gt; nlen ? size - nlen : 0));
        return nlen + len;
    } */
    for (int s = 3, scale = 1000000000; s &gt;= 0; s--, scale /= 1000) {
        // If there was any previous output, leave room for a space after it
        int start_pos = len ? len + 1 : 0;
        int klen = words1k(n / scale, buf + start_pos, (size &gt; start_pos ? size - start_pos : 0));
        // If there was previous output and recent output, then write the space
        if (len &amp;&amp; klen) {
            if (len &lt; size) buf[len] = ' ';
            len++;
        }
        len += klen;
        if (klen &amp;&amp; s) {
            len += snprintf(buf + len, (size &gt; len ? size - len : 0), " %s", scales[s]);
        }
        n %= scale;
    }
    return len;
}
</code></pre>
    </div>