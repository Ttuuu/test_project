<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm sure it'll be fairly easy for you to confirm if your code is working (you can find test cases all over the place), so I'm not looking too closely at correctness, so much as overall logic.</p>

<p>So, on the whole, it seems to make logical sense, but it's not an efficient implementation of Dijkstra. As you know, Dijkstra's algorithm involves having an ever increasing collection of nodes and picking the smallest path out of your collection (it's that simple).</p>

<p>The main flaw is in your <code>minDistance()</code> method. What you're doing there is effectively iterating over all the nodes you've selected and finding the shortest part out. That's an <code>O(n)</code> operation. This step in Dijkstra is crucial and should be done in <code>O(log N)</code> time. This can be done using a set or a heap. Since you always want the minimum path out, all you need to do is keep track of the paths out and pick the min at each stage.</p>

<p>As I mentioned, you can do this with a set/heap. I think <a href="http://www.algolist.com/code/cpp/Dijkstra's_algorithm" rel="nofollow noreferrer"><em>this example</em></a> should help clear this up.</p>
    </div>