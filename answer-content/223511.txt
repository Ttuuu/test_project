<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Usage of main()</strong><br>
In C++ <code>main()</code> should only be called by the operating system, <a href="https://en.cppreference.com/w/cpp/language/main_function" rel="nofollow noreferrer">never by the program itself</a>, it is the entry point into the program from the operating system. <a href="https://stackoverflow.com/questions/204476/what-should-main-return-in-c-and-c/18721336">The definition of <code>main()</code> is integer so that it can return the status of the program to whatever is calling it</a>.</p>
<p>Due to the recursive nature of the use of <code>main()</code> in this program it is possible that a stack overflow will occur and that may cause security risks on the computer running this program. A stack overflow may have other undesired side affects as well.</p>
<blockquote>
<p><strong>EDIT</strong>  As pointed out by @TobySpeight calling <code>main()</code> from inside a c++ program results in Undefined Behavior. This means that it could do almost anything and none of what would do can be expected and is probably a bad thing. For example data within the program can be corrupted. Back when I started programming it could have shut down the computer by causing a Kernel Panic.</p>
<p>There is a perfectly good loop in <code>main()</code> for executing the game, to run another game put the game loop and the sleep statement into an outer loop.</p>
</blockquote>
<p>This is an example of <code>main()</code> without calling itself, it compiles, I don't know if it works:</p>
<pre><code>int main() {

    HWND console = GetConsoleWindow();
    RECT r;
    GetWindowRect(console, &amp;r); //stores the console's current dimensions
    MoveWindow(console, r.left, r.top, 900, 900, TRUE); // 800 width, 100 height
    string playAgain("no");

    do {
        setup();
        while (!gameOver) {
            changeP();
            pick();
            draw();
            result(winCheck(pChar));
        }
        std::cout &lt;&lt; "Enter yes to play again";
        std::getline(std::cin, playAgain);
    } while (playAgain.compare("yes") == 0);

}
</code></pre>
<p><strong>using namespace std</strong><br>
The use of this statement may cause collisions of function names and variables, it would be much better to use <code>std::cin</code>, <code>std::cout</code> and <code>std::string</code> rather than having this statement in the code. Having this statement in a header file can cause even more confusion. As you write more complex program that are object oriented you may find yourself defining <code>cin</code> and <code>cout</code> for your objects so that they can be input or output.</p>
<p><strong>Global Variables</strong><br>
The use of global variables makes writing and debugging code more difficult. Global variables may be modified anywhere in the program and changes to a variable can be difficult to track down.</p>
<p><strong>Magic Numbers</strong><br>
Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, since it isn't clear what they are or mean.</p>
<p>There are a number of numeric constants used in the code, such as 0, 1, 2, 4, 14, 40, and 219. This makes the code harder to read and understand. It isn't clear what <code>pColor = 4</code> or <code>pColor = 14</code> are doing and it really isn't clear what this statement is doing <code>field[i][j] = 219;</code></p>
<p>You can use <code>const int PLAYER_ONE = 1;</code> or <code>const int FIELD_HEIGHT = 7; const int FIELD_WIDTH = 8;</code> to define symbolic constants rather than numbers. This will make the code easier to read, and if you need to change the size of field you only need to edit in one place rather than multiple places. It will also make easier to understand any for loops that move through the <code>field</code> matrix.</p>
<p><strong>String Versus C Style String</strong><br>
The code already includes the C++ string class, it might be better if p1, p2 and player were defined as string rather C style character arrays. The built in <code>std::cin</code> and <code>std::cout</code> already know how to handle the string class.</p>
<p><strong>Use struct or class</strong><br>
There could be a struct or class that represents a player. It could have the fields <code>int id;</code>, <code>string name;</code> and <code>int color;</code>. This would reduce the number of variables for each player.</p>
<pre><code>    std::cin &gt;&gt; p1.name;

    std::cin &gt;&gt; p2.name;
</code></pre>
<p>or the struct or class could contain a function that gets the user name.</p>
    </div>