<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OK, so I'm going to start with your DFS method.  You're right - you should be able to do it without those vars in the outer function.  You should be able to work out why - after all, you have vals in the outer layer of your BFS method.  Why?  Because your BFS uses a recursive helper function, so the vals are only used once (and could be discarded).</p>

<p>So your DFS function should really use recursion, but I suspect you may have rejected recursion because you couldn't see how <strong>visited</strong> would be properly preserved as a recursive function popped back and forth.  The answer is <strong>foldLeft</strong>.</p>

<pre><code>def DFS(start: Vertex, g: Graph): List[Vertex] = {

  def DFS0(v: Vertex, visited: List[Vertex]): List[Vertex] = {
    if (visited.contains(v))
      visited
    else {
      val neighbours:List[Vertex] = g(v) filterNot visited.contains 
      neighbours.foldLeft(v :: visited)((b,a) =&gt; DFS0(a,b))
    } 
  }
  DFS0(start,List()).reverse
} 
</code></pre>

<p>I don't have space here to explain foldLeft, if you've never encountered it - maybe Matt Malone's <a href="http://oldfashionedsoftware.com/2009/07/10/scala-code-review-foldleft-and-foldright/">blog post</a> will help.  You can rewrite almost anything with <strong>foldLeft</strong>, although it isn't always a good idea.  Definitely the right thing to do here, though.  Notice that I completely dropped your <strong>result</strong> var since <strong>visited</strong> <em>is</em> the result, the way you are doing this.</p>

<p>My version of your DFS method is entirely functional, which is how Scala really wants to be used.  Note also the lack of braces and brackets in </p>

<pre><code>val neighbours:List[Vertex] = g(v) filterNot visited.contains
</code></pre>

<p>It <em>can</em> be written </p>

<pre><code>val neighbours:List[Vertex] = g(v).filterNot(visited.contains)
</code></pre>

<p>but the Scala style is to omit the brackets and braces except where essential.</p>

<p>Your BFS method is similarly over-populated.  I've slimmed it down a little without altering the basic way it works:</p>

<pre><code>def BFS(start: Vertex, g: Graph): List[List[Vertex]] = {

  def BFS0(elems: List[Vertex],visited: List[List[Vertex]]): List[List[Vertex]] = {
    val newNeighbors = elems.flatMap(g(_)).filterNot(visited.flatten.contains).distinct
    if (newNeighbors.isEmpty) 
      visited
    else
      BFS0(newNeighbors, newNeighbors :: visited)
  }

  BFS0(List(start),List(List(start))).reverse
} 
</code></pre>

<p>It still gives the same results.</p>

<p>The other big point to make is that while Scala is a functional language it is also an Object Oriented language.  Those DFS and BFS methods should belong to a graph object, preferably at least derived from a generic class.  Something like this:</p>

<pre><code>class Graph[T] {
  type Vertex = T
  type GraphMap = Map[Vertex,List[Vertex]]
  var g:GraphMap = Map()

  def BFS(start: Vertex): List[List[Vertex]] = {

    def BFS0(elems: List[Vertex],visited: List[List[Vertex]]): List[List[Vertex]] = {
      val newNeighbors = elems.flatMap(g(_)).filterNot(visited.flatten.contains).distinct
      if (newNeighbors.isEmpty)
        visited
      else
        BFS0(newNeighbors, newNeighbors :: visited)
    }

    BFS0(List(start),List(List(start))).reverse
  }

  def DFS(start: Vertex): List[Vertex] = {

    def DFS0(v: Vertex, visited: List[Vertex]): List[Vertex] = {
      if (visited.contains(v))
        visited
      else {
        val neighbours:List[Vertex] = g(v) filterNot visited.contains
        neighbours.foldLeft(v :: visited)((b,a) =&gt; DFS0(a,b))
      }
    }
    DFS0(start,List()).reverse 
  }
}
</code></pre>

<p>And then you could do this:</p>

<pre><code>scala&gt; var intGraph = new Graph[Int]
scala&gt; intGraph.g = Map(1 -&gt; List(2,4), 2-&gt; List(1,3), 3-&gt; List(2,4), 4-&gt; List(1,3))
scala&gt; intGraph.BFS(1)
res2: List[List[Int]] = List(List(1), List(2, 4), List(3))
scala&gt; intGraph.BFS(2)
res3: List[List[Int]] = List(List(2), List(1, 3), List(4))
scala&gt; intGraph.DFS(3)
res4: List[Int] = List(3, 2, 1, 4)
</code></pre>

<p>or this:</p>

<pre><code>scala&gt; var sGraph = new Graph[String]
scala&gt; sGraph.g = Map("Apple" -&gt; List ("Banana","Pear","Grape"), "Banana" -&gt; List("Apple","Plum"), "Pear" -&gt; List("Apple","Plum"), "Grape" -&gt; List("Apple","Plum"), "Plum" -&gt; List ("Banana","Pear","Grape"))
scala&gt; sGraph.BFS("Apple")
res6: List[List[java.lang.String]] = List(List(Apple), List(Banana, Pear, Grape), List(Plum))
</code></pre>
    </div>