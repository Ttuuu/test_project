<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>"Before going too far" - is the tip of the iceberg as I see it :)</p>

<p>If it's just a simple lab, nothing fancy, tutorial for the sake of testing some functionality and everything should remain small and in one file 
then ignore the rest of what I'm saying. </p>

<p>Otherwise, if that is a long ongoing project, it should be production-ready and etc.., there are lots of aspects to consider so it still a hard question to answer.</p>

<p>To simplify and I'm sure many would not agree with me.</p>

<p>I consider a single source, a monolith chat application.</p>

<p>Try to disconnect the WebSocket from the business logic and create a clear cut boundary.</p>

<p>Because you want to unit test all parts of the system you should plan your code around testing - so business logic should be seeing as a black box that you can test as unit.</p>

<p>Imagine that from one side of the boundary you are passing a generic message package.
Inside the boundary, the message package is broken and the real action/parameters are extracted and a function is dispatched based on these values to handle the request.</p>

<p>This actually starts forming a request/response flow - that flow should have validation, use case handler, presentation handler along the way.</p>

<p>your action handler should be generic and allow adding more functionality into the communication protocol, so you should use a factory pattern to create action handlers by name.</p>

<p>I hope this helps</p>
    </div>