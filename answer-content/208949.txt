<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Return value</strong></p>

<p>Adding a few tests, we have:</p>

<pre><code>print(anyequalto([10, 15, 3, 7], 17))
print(anyequalto([10, 15, 3, 7], 18))
print(anyequalto([10, 15, 3, 7], 19))
</code></pre>

<p>giving</p>

<pre><code>True
True
None
</code></pre>

<p>The <code>None</code> value seems a bit unexpected to me. We'd probably want <code>False</code> to be returned in that particular case.</p>

<p>Also, even if you expect <code>None</code> to be returned in that case, the <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">Python Style Guide</a> recommends being explicit for that (emphasis is mine):</p>

<blockquote>
  <p>Be consistent in return statements. Either all return statements in a
  function should return an expression, or none of them should. If any
  return statement returns an expression, any return statements where no
  value is returned should explicitly state this as return None, and <strong>an
  explicit return statement should be present at the end of the function
  (if reachable)</strong>.</p>
</blockquote>

<p><strong>Names, documentation and tests</strong></p>

<p>The variables names could be clearer.</p>

<p>Also, the function behavior can be described in a docstring.</p>

<p>Finally, it could be worth writing tests for it.</p>

<p>You'd get something like:</p>

<pre><code>def anyequalto(num_lst, n):
    """Return True if 2 numbers from `num_lst` add up to n, False otherwise."""
    for i in num_lst:
        if n - i in num_lst:
            return True
    return False

TESTS = [
    # Random tests cases
    ([10, 15, 3, 7], 17, True),
    ([10, 15, 3, 7], 18, True),
    ([10, 15, 3, 7], 19, False),
    # Edge case
    ([], 0, False),
    ([], 1, False),
    # Same value
    ([5, 5], 10, True),
    ([5], 10, True),
    # Zero
    ([5, 0], 0, True),
    ([5, 0], 5, True),
    ([5, 0], 2, False),
]

for (lst, n, expected_res) in TESTS:
    res = anyequalto(lst, n)
    if res != expected_res:
        print("Error with ", lst, n, "got", res, "expected", expected_res)
</code></pre>

<p><strong>Data structure</strong></p>

<p>At the moment, you can iterate on the list (via the <code>in</code> check) for each element of the list. This leads to an <code>O(nÂ²)</code> behavior.</p>

<p>You can makes t hings more efficient by building a set to perform the <code>in</code> test in constant time and have an overall <code>O(n)</code> behavior.</p>

<pre><code>def anyequalto(num_lst, n):
    """Return True if 2 numbers from `num_lst` add up to n, False otherwise."""
    num_set = set(num_lst)
    for i in num_set:
        if n - i in num_set:
            return True
    return False
</code></pre>

<p><strong>Using the Python toolbox</strong></p>

<p>The solution you are using could be written in a more concise and efficient way using the <a href="https://docs.python.org/2/library/functions.html#all" rel="noreferrer"><code>all</code></a> or <a href="https://docs.python.org/2/library/functions.html#any" rel="noreferrer"><code>any</code></a> builtin.</p>

<p>You have something like:</p>

<pre><code>def anyequalto(num_lst, n):
    """Return True if 2 numbers from `num_lst` add up to n, False otherwise."""
    num_set = set(num_lst)
    return any(n - i in num_set for i in num_set)
</code></pre>
    </div>