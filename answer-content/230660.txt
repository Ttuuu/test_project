<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The initial approach definitely has a number of "bottlenecks" and space for optimizations.
Let me present and explain the crucial points:</p>

<ul>
<li>starting with good naming: don't give Python identifiers/functions <em>camelCased</em> names. We'll have <code>find_path</code>, <code>get_successors</code> etc. </li>
<li><code>explored</code> dict accumulates a great number of dictionaries (<code>nodes</code>) indexed by their <code>id</code> attribute (<em>"hash"</em>). But those dictionaries are not used, only keys are used to keep track of processing unique <code>id</code>s (<em>hashes</em>). Memory-free solution for this point is using <code>set</code> instead to keep unique hashes. <code>explored = set()</code></li>
<li><code>unexplored</code> list. At the end of the processing I noticed it grown to size of <code>53003</code>. As the main operations on this list are appending to and popping out the 1st item - the optimized way would be to use a high-performance <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>deque</code></a> object (Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same <code>O(1)</code> performance in either direction)</li>
<li>function <code>move</code> performs a lot of <em>falsy</em> calls (returning <code>None</code>). That makes the caller <code>get_successors</code> accumulate both valid and <em>falsy</em> movements (<code>moves</code> list) and perform filtration on each call. Instead, we'll make <code>get_successors</code> to work as generator function which yields only successfully moved nodes (after <em>valid</em> movements)</li>
<li>looping over <code>for successor in getSuccessors(node):</code> performs a hundreds of redundant iterations testing <em>successors</em>(nodes) which hashes were already present in <code>explored</code> <em>hash</em> storage. To watch that happened you can add <code>else:</code> branch with debugging printing to <code>if successor['id'] not in explored: ...</code> condition within the loop. 
To avoid that, in connection to the previous Optimization tip, we'll extend <code>get_successors</code> function more to get correctly moved nodes that aren't present in <code>explored</code> hash-set.</li>
</ul>

<hr>

<p>From theory to practice:</p>

<pre><code>import numpy as np
import time
from collections import deque


def swap(array, pos1, pos2):
    result = np.copy(array)
    result[pos1], result[pos2] = result[pos2], result[pos1]
    return result


def create(state, pos):
    return {'id': hash(state.tostring()), 'state': state, 'pos': pos}


def move(node, change):
    new_pos = (node['pos'][0] + change[0], node['pos'][1] + change[1])  # np.add(node['pos'], change) is slower.

    if 0 &lt;= new_pos[0] &lt;= 2 and 0 &lt;= new_pos[1] &lt;= 2:  # Valid index
        new_state = swap(node['state'], node['pos'], new_pos)
        return create(new_state, new_pos)


def get_successors(node, explored):
    for new_pos in ((-1, 0), (1, 0), (0, -1), (0, 1)):
        changed_node = move(node, new_pos)
        if changed_node and changed_node['id'] not in explored:
            yield changed_node


def find_path(init, goal):
    explored = set()  # Already explored nodes.
    pos = np.where(init == 0)
    unexplored = deque([create(init, (pos[0][0], pos[1][0]))])  # Unexplored nodes.

    while True:
        if not unexplored:  # If there is no node to explore, puzzle has no solution.
            return None

        node = unexplored.popleft()

        if np.array_equal(node['state'], goal):
            return 'Success'  # Should be path, but for now is not important.

        explored.add(node['id'])

        for successor in get_successors(node, explored):  # Add successors to unexplored nodes.
            unexplored.append(successor)


start = time.time()
init = np.array([[7, 2, 4], [5, 0, 6], [8, 3, 1]])
goal = np.array([[1, 3, 0], [5, 2, 6], [4, 7, 8]])

print(find_path(init, goal))
end = time.time()
print(end - start)
</code></pre>

<p>The output:</p>

<pre><code>Success
5.768321752548218
</code></pre>
    </div>