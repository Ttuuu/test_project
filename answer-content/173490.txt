<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The <code>while not x:</code> loop can be replaced with a <code>while True</code> loop and you can break out of it using <code>break</code> statement:</p>

<pre><code>while True:
    result = self.income_ask()
    if result == 'y':
        ...
    else:
        ...
        break
</code></pre></li>
<li><p>Try not to include the name of the data-structure(<code>list</code>, <code>dict</code> etc) in your variable names. <code>self.income_list</code> could be replaced with <code>self.incomes</code> and <code>self.income_name</code> should be <code>self.income_names</code>.</p></li>
<li><p>These two list-comprehensions are unnecessary <code>name = [name for name in self.income_name]</code> and <code>income = [income for income in self.income_list]</code>. <code>incomedict</code> could directly use <code>dict(zip(self.income_name, self.income_list))</code>.  Plus again the variable names <code>name</code> and <code>income</code> should be <code>names</code> and <code>incomes</code>.</p></li>
<li><p>You can iterate over (key, value) pairs of a dict using <code>.items()</code>: <code>for name, income in incomedict.items():</code>.</p></li>
<li><p>Use string formatting to make your code more-readable, for example: <code>print('You are in the negative, you have a deficit of ${amount}.format(amount=valoutput))</code>. If you're on Python 3.6+ then look into <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer"><code>f-strings</code></a> as well.</p></li>
<li><p>You should only be using <code>incomedict</code> and <code>expensedict</code> instead of maintaining four names and expense/income lists. Apart from saving space another advantage is that a user can repeat a same name again and you will be able to handle it easily by adding it to existing name.</p></li>
<li><p>There's too much state modification happening in your methods. Try to do that as minimum as possible because it makes the code very hard to debug and understand. For example it's not clear what <code>self.expense_sum()</code> does, but it updates the <code>self.expenses</code>. It should ideally be a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a> returning the sum and in rare cases if you do need to update the state then make sure the method is named appropriately i.e. <code>self.update_expenses_sum</code>.</p></li>
</ul>
    </div>