<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Naming of data members: I would avoid duplicating the information that carries with the type. Can you think of something more meaningful?</p></li>
<li><p>Unsigned vs. signed integer for handling the size: as the maximum size is passed to the contructor as an <code>int</code>, <code>static_cast&lt;int&gt;(_set.size())</code> should be safe. However, when it's foreseeable that you'll implement the class template using containers from the standard library (they all use <code>std::size_t</code> for their sizes), why not go with <code>std::size_t</code> for <code>Cache</code>, too?</p></li>
<li><p>Related to the above: always compile with warnings enabled. <code>clang++ -Wall -pedantic -Wsign-conversion -Wextra -std=c++11</code> gives me</p>

<blockquote>
  <p>warning: comparison of integers of different signs [...]</p>

<pre><code>if(_set.size() == _maxSize){ // if set is 'full'
</code></pre>
</blockquote>

<p>Again, as <code>_maxSize</code> is an <code>int</code>, this can be considered a non-issue in practice, but it's still somewhat brittle, if you change some implementation details later on.</p></li>
<li><p>You can only instantiate the <code>Cache</code> template when <code>T</code> mets the standard hash container requirements (i.e., a <code>std::hash</code> specialization is available as well as a comparison operator). To make your class template more reusable, consider adding template parameters that can be passed to <code>std::unordered_set</code>. If they have sensible defaults, you don't need to specify them most of the time.</p>

<pre><code>template &lt;class T, class Hash = std::hash&lt;T&gt;, class EqualTo = std::equal_to&lt;T&gt;&gt;
class Cache {
    std::unordered_set&lt;T, Hash, EqualTo&gt; _set;
    // ...
};
</code></pre></li>
<li><p>When caching an object, you save it twice, one in <code>_queue</code> and once in <code>_set</code>. For small objects, the duplication might be acceptable, but what if <code>T</code> is large? Remember that <code>std::unordered_map</code> doesn't invalidate iterators/pointers upon insertion and removal of entries. Consider a <code>std::queue</code> of iterators into <code>_set</code>.</p></li>
<li><p>Passing <code>T</code> by value in <code>bool add(T value)</code> can be a reasonable choice as long as you <code>std::move</code> it when it's used the last time and <code>T</code> supports move semantics. In your case:</p>

<pre><code>bool add(T value) {
   // ...
   _queue.push(value); // Don't move here
   _set.insert(std::move(value));  // ... but here!
}
</code></pre>

<p>You could also consider an overload set <code>bool add(const T&amp;)</code> and <code>bool add(T&amp;&amp;)</code> instead as <code>std::vector::push_back</code> does for example.</p></li>
<li><p>When you worry about performance and you have varying max. cache sizes known at compile time, consider adding a non-type <code>std::size_t</code> template parameter to <code>Cache</code>. This way, you could specialize on smaller caches to e.g. use <code>std::vector</code> instead of <code>std::unordered_map</code>, which can be faster due fewer cache (ha!) misses. You need to do some benchmarking first though, and take different <code>sizeof(T)</code> into account.</p></li>
<li><p>A last note on performance: <code>std::unordered_set</code> was designed as a drop-in replacement for <code>std::set</code>. That's why it doesn't invalidate iterators/pointers into an instance, but that's also why it's not the fastest hash set. Of course, make sure to benchmark this properly, but you might want to have a look at some open address hash set, e.g. the one provided by abseil could be an option.</p></li>
</ul>
    </div>