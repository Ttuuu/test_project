<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Extract routine logic into methods.</h2>

<p>Your evaluation process should be its own method. This is something you'd want to repeat and it would make it easy to test multiple cases.</p>

<p>Your main method could just be:</p>

<pre><code>public static void main(String[] args) {
    System.out.println(isPalindromic("racecar"));
}
</code></pre>

<h1>Use JUnit tests</h1>

<p>On the topic of tests, get into the habit of writing them, a good framework for testing is <a href="https://github.com/junit-team/junit">JUnit</a>. You generally want to test something for edge cases and ensure that it works before sharing.</p>

<p>Example test case:</p>

<pre><code>@Test 
public void validPalindromes() {
    assertTrue(isPalindromic("racecar"));
    assertTrue(isPalindromic("mom"));
    assertTrue(isPalindromic("avid diva"));
}
</code></pre>

<h2>Semantic considerations of palindrome</h2>

<p>One decision you should make is how you want to account for letter case, and punctuation. The sentence, "A car, a man, a maraca." is a palindrome by English standards, but whether it is or not will be up to your implementation.</p>

<h1>A better way to check for palindrome.</h1>

<p>What you want to do is just reverse a string and test it against the string, fortunately <code>StringBuilder</code> has a <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html#reverse()">reverse</a> method.</p>

<pre><code>public static String reverse(String str) {  
    return new StringBuilder(str).reverse().toString();
}
</code></pre>

<p>So to check if a word is a valid string, you can simply have:</p>

<pre><code>public static boolean isPalindromic(String str) {
    return str.equals(reverse(str));
}
</code></pre>

<p>If you want to account for letter case you can use <code>equalsIgnoreCase</code> and for punctuation you should use a <a href="http://www.tutorialspoint.com/java/java_regular_expressions.htm">Regex</a>.</p>

<p>Adding these factors in would give us:</p>

<pre><code>public static boolean isPalindromic(String str) {
  String potentialPalindrome = str.replaceAll("[^a-zA-Z]", "");
  return potentialPalindrome.equalsIgnoreCase(reverse(potentialPalindrome));
}
</code></pre>

<h3>Simplest implementation</h3>

<p>If you don't want the overhead of using StringBuilder, you can always use a loop:</p>

<pre><code>public static boolean isPalindromic(String s) {
    for (int i = 0, j = s.length() - 1; i &lt; j; i++, j--) {
        if (s.charAt(i) != s.charAt(j)) {
            return false;
        }
    }
    return true;
}
</code></pre>
    </div>