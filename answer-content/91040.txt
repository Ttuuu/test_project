<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a subtle problem with your code - different casing will mean two entries in your dictionary:</p>

<ul>
<li>ankle  </li>
<li>ankLe</li>
<li>Ankle</li>
</ul>

<p>will all be counted seperately in your solution.</p>

<p>You can fix that by passing an <code>IEqualityComparer&lt;string&gt;</code> which ignores casing when you create your dictionary.</p>

<pre><code>var wordCount = new Dictionary&lt;string, int&gt;(StringComparer.OrdinalIgnoreCase);
</code></pre>

<p>For what it's worth - I'm going to give you a Linq alternative which on my machine is comparable to your solution in terms of speed (on a smaller file though) with significantly less code.</p>

<pre><code>var wordCounts =
        File.ReadLines(path)
            .SelectMany(l =&gt; l.Split(seperators, StringSplitOptions.RemoveEmptyEntries))
            .GroupBy(word =&gt; word.ToLower())
            .Select(group =&gt; new { Word = group.Key, Count = group.Count() })
            .ToDictionary(group =&gt; group.Word, group =&gt; group.Count);
</code></pre>

<p>Notice that I'm normalizing to lowercase.</p>
    </div>