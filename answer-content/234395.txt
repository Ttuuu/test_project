<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another answer here gives some good advanced advice, I'm going to point out some basics</p>
<p>If I was teaching C++, I would give this program an A for effort, but a C- for execution. It is not totally clear by reading the code that the program actually runs as expected.</p>
<h2>Goto</h2>
<p>Don't use <code>goto</code> unless it is absolutely necessary for error handling. If this was the early years of BASIC or FORTRAN the <code>goto</code> would be ok, but not in C, C++ or other high level languages.</p>
<p>The current use of <code>goto</code> could be avoided by returning to the calling function after the function <code>play()</code> completes. This would also remove the call to <code>mainMenu()</code> since that is the calling function to be returned to.</p>
<h2>Global Variables</h2>
<p>Generally variables should be declared where they are needed and should be limited to the smallest scope possible, for instance <code>chanName</code> and <code>chanName2</code> should be declared in the function <code>play()</code> and passed to any other functions that need them.</p>
<p>Global variables should be avoided when possible, they make programming very difficult, it is hard to find where global variables are modified within a program, and they can cause linking errors in larger programs that have more than once source file. They make maintaining a program a nightmare. Two good articles on why global variables are bad are <a href="https://wiki.c2.com/?GlobalVariablesAreBad" rel="nofollow noreferrer">GlobalVariablesAreBad</a> and this <a href="https://stackoverflow.com/questions/484635/are-global-variables-bad">stackoverflow question</a>.</p>
<h2>Avoid <code>using namespace std</code></h2>
<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>
<h2>Complexity</h2>
<p>The function <code>play()</code> is too complex (does too much). Because it is doing too much it has a <code>goto</code> in it which greatly increases the complexity of the function. Complex functions are hard to read, write, debug and maintain. They can be a major cause of logic errors. A good programming practice is to keep breaking down functions into smaller and smaller functions until each function is very simple to write and debug. The complexity of the function also hides the fact that the is a type related logic error in the function</p>
<pre><code>while (choice != '1');
{
    for (int i = 0; i &lt; 3; i++) {
        for (int j = 0; j &lt; 3; j++) {
            matrix[i][j] = i * 3 + (j + 1) + 48;
        }
    }

    rear = 0;
    player = 'X';

}
</code></pre>
<p>The semicolon after the while loop prevents any following code from executing.</p>
<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
    </div>