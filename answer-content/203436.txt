<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, your function is still pure. A pure function has only two requirements:</p>

<ol>
<li>The return value will always be the same given the same arguments.</li>
<li>Evaluation will produce no side effects.</li>
</ol>

<p>Since <code>filterMultipleOf</code> only uses integers, the second is obviously met, no mutation is possible. The first requirement is also met. Calling <code>filterMultipleOf(1)</code> creates a function which is distinct from the function created by calling <code>filterMultipleOf(2)</code>. See <a href="https://softwareengineering.stackexchange.com/q/235175/257523">this question</a> on software engineering for an alternative explanation.</p>

<p>Is there a better way to express this function? Yes.</p>

<ol>
<li><p>Just because your functions are short doesn't mean stop thinking about names. <code>x</code> and <code>y</code> are about as vague as you can get. Renaming <code>x</code> to <code>factor</code> and <code>y</code> to <code>multiple</code> immediately makes the function clearer. Also, <code>multiplesOf</code> takes a list of <code>factors</code>, not a list of <code>multiples</code>.</p>

<p>Naming variables after their type is generally a bad idea. <code>int</code> should be called <code>multiple</code>. <code>list</code> is a bit more difficult. In this case I would leave it as is since I can't quickly come up with a better name (<code>numbers</code> really doesn't help much).</p></li>
<li><p>You can pass functions around without specifying a single partial. Do <code>multiples.map(filterMultipleOf)</code> instead of <code>multiples.map(filterMultipleOf(_))</code></p></li>
<li><p>I don't see the need for <code>filterMultipleOf</code>, you can just use an anonymous function without losing any meaning. <code>factors.map(factor =&gt; (multiple: Int) =&gt; multiple % factor == 0)</code></p></li>
<li><p>Choosing to create a function for each factor makes your function logic take more space since you now have to call each function. I believe it is more clear to create a helper function that checks all factors:</p>

<pre class="lang-scala prettyprint-override"><code>def multiplesOf(list: List[Int], factors: List[Int]): List[Int] = {
  val isMultiple = (multiple: Int) =&gt; factors.exists(factor =&gt; multiple % factor == 0)
  list.filter(isMultiple)
}
</code></pre>

<p>You could further reduce this function by providing <code>isMultiple</code> as a lambda, but this is really dependent on your style. I'd go for it in this case.</p>

<pre class="lang-scala prettyprint-override"><code>def multiplesOf(list: List[Int], factors: List[Int]): List[Int] = {
  list.filter(multiple =&gt; factors.exists(factor =&gt; multiple % factor == 0))
}
</code></pre></li>
<li><p>It might be worth questioning the public API for this function. As it stands, it is only useful for lists of integers. What happens if you have a list of another type - say, <code>Person</code> and you want all people whose age is a multiple of 3 or 5? Right now, you can't use this function.</p>

<p>If the function was slightly modified to tell if a single integer is a multiple of some factor, then you can use the function.</p>

<pre class="lang-scala prettyprint-override"><code>val multipleOf = (multiple: Int, factors: List[Int]) =&gt;
  factors.exists(factor =&gt; multiple % factor == 0)

class Person(var name: String, var age: Int) {
  override def toString: String = s"$name is $age"
}

val people = List(
  new Person("Adam", 25),
  new Person("Bob", 7),
  new Person("Cate", 12),
  new Person("Dave", 20),
  new Person("Edward", 8)
)

people
  .filter(person =&gt; multipleOf(person.age, List(3, 5)))
  .foreach(println)
</code></pre>

<p>With this change, your original function can be trivially defined:</p>

<pre class="lang-scala prettyprint-override"><code>val multipleOf = (multiple: Int, factors: List[Int]) =&gt;
  factors.exists(factor =&gt; multiple % factor == 0)

val multiplesOf = (list: List[Int], factors: List[Int]) =&gt;
  list.filter(multipleOf(_, factors))
</code></pre></li>
</ol>
    </div>