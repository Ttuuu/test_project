<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Types</h2>

<p>The code uses <code>Int</code>. The largest <code>Int</code> in C# is ~2e9. This means that once a row has two cells each greater than 1e9, there will be an overflow. Even though using <code>uint</code> only means the code can calculate one more row prior to overflow, there's no reason to use a signed value. Using <code>long</code> puts overflow much further into the computation and <code>ulong</code> would again probably give us one more row than <code>long</code>. <a href="https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger?redirectedfrom=MSDN&amp;view=netframework-4.8" rel="nofollow noreferrer"><code>BigInteger</code></a> takes overflow off the table.</p>

<h2>Memory</h2>

<p>The memory of footprint of the proposed code is an area where performance can be improved. Without considering possible compiler optimization, it allocates O(n<sup>2</sup>)  memory locations (n rows averaging n/2 length). </p>

<h2>Hardening</h2>

<p>Robustness could be improved by a streaming results as they are calculated. Consider the case:</p>

<pre><code>PascalTriangle.Generate(int64.MaxValue);  //9,223,372,036,854,775,807
</code></pre>

<p>The proposed code will probably <a href="https://docs.microsoft.com/en-us/dotnet/api/system.outofmemoryexception?view=netframework-4.8" rel="nofollow noreferrer"><code>OutOfMemoryException</code></a> without producing any work. It's not that a streaming solution will necessarily complete the task. But if we stream, we might have the last row before it crashed and that's enough to <strong>restart</strong> from where we were instead of being back at triangle one. </p>

<p>The memory footprint of a streaming solution is O(n). We can quickly calculate row <strong>r<sub>i+1</sub></strong> by retaining row <strong>r<sub>i</sub></strong>. The maximum memory to calculate a row when streaming is 2n-1 memory locations.</p>

<h2>Protocols</h2>

<pre><code>[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]
</code></pre>

<p>Looks a lot like a protocol. The proposed code does not return the data in the format of its specification. It returns a C# object, instead. There's no basis to assume that the <em>consuming</em> code is under our control or even relies on .NET.  </p>

<p>Of course we have to assume something about the consuming code. Outputting a stream of <code>byte</code>s is traditionally a very low denominator for API's. The output can be encoded as ASCII characters. The example output (without whitespace) becomes:</p>

<pre><code>91 91 49 93 44 91 49 44 49 93 44 91 49 44 50 44 49 93 44 91 49 44 51 44 51 44 49 93 44 91 49 44 52 44 54 44 52 44 49 93 93 
</code></pre>

<h2>Bandwidth</h2>

<p>The streamed ASCII is 41 bytes. Naively, the proposed code uses 60 bytes (15 four byte integers). If <code>ulong</code>s were used the ASCII would tend to be more space efficient until the cell values in the Triange approached 10e6 (six ascii digits and a <code>,</code>) and approximately as efficient until cell values approached 10e7 (seven ascii digits and a <code>,</code>).</p>

<p>A custom binary encoding would allow two characters per byte. We only need to encode 14 characters: <code>EOF</code>,<code>0-9</code>,<code>[</code>,<code>]</code>, and <code>,</code>. We still have bits left in our <a href="https://en.wikipedia.org/wiki/Nibble" rel="nofollow noreferrer">nibble</a> to include the space and newline characters and stream formatted output that matches the example.</p>

<h2>Leetcode</h2>

<p>The Leetcode problem looks a lot like Fizzbuzz. But unlike Fizzbuzz, the Leetcode problem isn't bounded from one to one hundred. The considerations I've listed in this review would be inappropriate to Fizzbuzz solutions. Fizzbuzz doens't have any unknown conditions. Fizzbuzz can't be <a href="https://en.wikipedia.org/wiki/Fuzzing" rel="nofollow noreferrer">fuzzed</a>. </p>

<p>Leetcode questions have unknowns. They can be fuzzed. They scale beyond 'one to one hundred'. That's what makes them useful starting points for engineering analysis. Unlike Fizzbuzz, they <strong>can</strong> be used to answer important questions in addition to "can the person write a loop and do they know the modulo operator?". Leetcode solutions that look like Fizzbuzz solutions are at the low end of solution quality.</p>

<h2>Remarks</h2>

<ul>
<li>It's good that within limits the proposed code works. </li>
<li>A more thorough test suite would be a starting point to increase it's robustness. </li>
<li>Because the code returns an .NET object, it is not clear that the code meets the specification.</li>
<li>Documentation is absent. Even comments</li>
<li>The code embodies assumptions about the input that may be unwarranted.  </li>
</ul>

<h2>Laziness</h2>

<p>Because the stream abstraction entails the idea of a consumer, a program using streams only needs to produce values as quickly as the consumer consumes them. The memory footprint can be reduced further by lazily calculating each value.</p>

<p>Cell <code>i</code> in row <code>j</code> can be computed directly on an as needed basis using factorials. Factorials are slower (more computationally intensive) than simple addition. It's a tradeoff. That's engineering.</p>
    </div>