<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>
<p>As example code, there is a fair amount to comment on. For an eclipse plugin, I would at least expect you to select-all and <kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>F</kbd> ....</p>
<ol>
<li>consistent use of braces (on the end of the line, not start of the new line)</li>
<li>consistent spacing between values and operators <code>jsonResponse+=line;</code> to <code>jsonResponse += line;</code></li>
</ol>
<p>The formatted code looks like:</p>
<blockquote>
<pre><code>    HttpURLConnection httpconn = null;
    BufferedReader breader = null;
    try {
        URL url = new URL(this.web_service_url);
        httpconn = (HttpURLConnection) url.openConnection();
        httpconn.setRequestMethod("GET");
        System.out.println(httpconn.getResponseMessage());
        if (httpconn.getResponseCode() == HttpURLConnection.HTTP_OK) {
            breader = new BufferedReader(new InputStreamReader(
                    httpconn.getInputStream()));
            String line = null;
            while ((line = breader.readLine()) != null) {
                jsonResponse += line;
            }
            // System.out.println(jsonResponse);
            // display_json_results(jsonResponse);
        }
    } catch (MalformedURLException e) {
        MessageDialog.openError(Display.getDefault().getShells()[0],
                "Invalid URL", e.getMessage());
    } catch (ProtocolException e) {
        MessageDialog.openError(Display.getDefault().getShells()[0],
                "Invalid Protocol", e.getMessage());
    } catch (IOException e2) {
        Log.info("Failed to access the data" + e2.getMessage());
    } finally {
        try {
            breader.close();
        } catch (IOException e) {
            Log.info("Failed to release resources" + e.getMessage());
        }

    }
</code></pre>
</blockquote>
<p>Working with the formatted code now:</p>
<ul>
<li>Why do you have an active <code>System.out.println(httpconn.getResponseMessage());</code> in the code? That should be commented out. Use the Log for that.</li>
<li>Why are the HttpURLConnection and BufferedReader declared outside the try-block? There is no need.</li>
<li>The BufferedReader should be opened with a try-with-resource block to perform the auto-close.</li>
<li>you are losing newlines on the BufferedReader's <code>readLine()</code>. You should use a different system, or alternatively add the newline back in... unless you are using some other mechanism to reformat thte JSON.</li>
<li>you should be appending to a StringBuilder, not doing String concatenation (<code>jsonResonse += line;</code> == BAD)</li>
<li>why have commented-out code in example code? Get rid of the <code>println's</code> and the <code>display_json_results</code></li>
</ul>
<h1>Exception Handling</h1>
<p>This exception-handling has a lot of problems I can see.</p>
<ol>
<li><p>you are throwing away all stack traces.... you do not report them! Why?</p>
</li>
<li><p>you have different forms of exception naming in your handlers. Two of them call the exception <code>e</code>. The third is called <code>e2</code>. Use meaningful names, or use consistent names. The mix is.... mixed up.</p>
</li>
<li><p>Calling <code>Log.info("Failed to access the data" + e2.getMessage());</code> is ... poor. If you have the Log available, it should at least be a warning! Also, you should pass the full exception to the Log, and log the full trace. Finally, you do not have a space between the 'data' and the <code>e2.getMessage()</code> in the output... <code>.... access the data"</code> should be <code>... access the data: "</code></p>
</li>
<li><p>When there is an exception, you should help the user by indicating what data was causing the exception. In this case, the errors/dialogs should contain <code>this.web_service_url</code> since that was the source of the problem.</p>
</li>
<li><p>Since you have the log, not only should you be outputting the exception message for the URL formats to the Display, but also to the Log.</p>
</li>
</ol>
<h2>Quick reformat</h2>
<p>I messed with the code, and got the following:</p>
<pre><code>  try {
        URL url = new URL(this.web_service_url);
        HttpURLConnection httpconn = (HttpURLConnection) url.openConnection();
        httpconn.setRequestMethod("GET");
        //System.out.println(httpconn.getResponseMessage());
        if (httpconn.getResponseCode() == HttpURLConnection.HTTP_OK) {
            try (BufferedReader breader = new BufferedReader(new InputStreamReader(
                    httpconn.getInputStream()));) {
                String line = null;
                while ((line = breader.readLine()) != null) {
                    jsonResponse.append(line).append("\n");
                }
            }
            // System.out.println(jsonResponse);
            // display_json_results(jsonResponse);
        }
    } catch (MalformedURLException mue) {
        Log.warn("Invalid URL " + this.web_service_url, mue);
        MessageDialog.openError(Display.getDefault().getShells()[0],
                "Invalid URL " + this.web_service_url, mue.getMessage());
    } catch (ProtocolException pe) {
        Log.warn("Protocol Exception " + this.web_service_url, pe);
        MessageDialog.openError(Display.getDefault().getShells()[0],
                "Invalid Protocol " + this.web_service_url, pe.getMessage());
    } catch (IOException ioe) {
        Log.warn("Failed to access the data " + this.web_service_url, ioe);
    }

}
</code></pre>
    </div>