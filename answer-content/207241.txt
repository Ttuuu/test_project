<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can only add to the already said, that your algorithm has the potential to run for ever - theoretically speaking. </p>

<hr>

<p>The most effective approach is to select chars from a list of valid chars. If using the numbers [0, 9] and the English letters [a, z] and [A, Z] we end up with 62 entries which will cause a <code>byte</code> based random selection be biased because <code>256 % 62 != 0</code>. The problem can be solved by either adding two more chars resulting in 64 char:</p>

<pre><code>  const string chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-+";
</code></pre>

<p>or reduce the valid chars to 32:</p>

<pre><code>const string chars = "0123456789ABCDEFGHIJKLMNOPQRSTUV";
</code></pre>

<p>There are pros and cons to both obviously, but both can be used i an efficient algorithm like:</p>

<pre><code>public string Generate(int length)
{
  const string chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-+";

  using (var rng = new RNGCryptoServiceProvider())
  {
    char[] result = new char[length];
    byte[] buffer = new byte[length];
    int range = chars.Length;
    rng.GetBytes(buffer);

    for (int i = 0; i &lt; length; i++)
    {
      result[i] = chars[buffer[i] % range];
    }

    return new string(result);
  }
}
</code></pre>

<p>This should be unbiased.</p>

<p>I deliberately avoid the use of LINQ, because it is nearly always slower than more "native" code. This not to say, I in general avoid using LINQ, because I use it very often and gladly, but it is my experience that when it comes to performance, LINQ is often significantly slower than <em>comparable</em>, well written traditional code.</p>
    </div>