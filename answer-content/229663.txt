<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>API</h2>

<p>I assume it's part of the platform requirements, but <code>int[]</code> is a terrible data-structure for storing the <code>(k, h)</code> pair, because it could have any length and implies an ordering that doesn't really exist. This should be a small class or immutable struct. (Not a Tuple, because Tuples are structural, and therefore only solve part of the problem).</p>

<p>Even if this was imposed upon me, I would want to map it to something sensible before doing anything else. This mapping would act as a (necessary) validation layer, to check I'm not being given nonsense.</p>

<h2><code>ReconstructQueueList</code></h2>

<p>This should document what it does.</p>

<p>I don't see the point in initialising every element of <code>res</code>, when you could just assign them a copy of the existing person array when you set them. This makes the code much tidier. I would move the declaration of <code>res</code> toward where it is actually used.</p>

<p><code>list</code> is a completely meaningless variable name. These are the positions in the queue that you have yet to be assigned, so I will call it <code>positions</code>; however, I'm sure you can think of something much better. I would create <code>positions</code> with <code>Enumerable.Range(0, people.Length)</code>, which is more compact and has less scope for errors. I doubt the added overhead will be significant, but feel free to measure it.</p>

<h2><code>PairComparer</code></h2>

<p><code>PairComparer</code> is not a fantastic name for something that sorts people.</p>

<p>It's good that you've given some description of what the custom comparer does. However, I don't understand the description you provide.</p>

<p>I'd prefer to see <code>x[0].CompareTo(y[0])</code> instead of <code>x[0] = y[0]</code>: it's much clearer what is going on, and it doesn't risk overflowing for numbers with large magnitude.</p>

<h2>Performance</h2>

<p><em>This section is pretty underwhelming</em></p>

<p>If we ignore the problem size limit of 1100 (where did they find that number?), the main performance concern is the <code>List.Remove(int)</code> calls, which means this algorithm is quadratic in the worst case (though linear in the best case). You can address this by using a data-structure which allows <code>log(n)</code> removal by index. I threw together a simple <code>OrderedShrinkList</code>, where removing every has a cost of <code>n log(n)</code> and <code>n</code> is the number of elements with which it begins, and ran some benchmarks.</p>

<p>Swapping this appears to give a significant performance boost for large problems: it is 10 times faster on a particular random instance of size 200000 <a href="https://gist.github.com/VisualMelon/9ba073e688f4d5fc651be0b798ef85f7" rel="nofollow noreferrer">gist of code and results</a> (it seems to be slower for smaller ones).</p>

<p>Running small problems (e.g. size 1100 and smaller), the potential inefficiency of <code>List</code> based method is not immediately revealed, and the overhead of my shoddy <code>OrderedShrinkList</code> seems to make it significantly slower. I've run out of energy to keep trying things, but a linked list might actually improve things, because it replacing a linear 'move' with a linear scan, and you can choose at which end to start.</p>

<p><em>Note: I did run benchmark for some different seeds, and the general trend was similar, but this isn't the most rigorous test ever.</em></p>
    </div>