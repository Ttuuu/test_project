<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hi thanks for sharing your code, </p>

<p>You should stick to Python naming conventions, check out the PEP8 style guide.</p>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a></p>

<p>Based off of this, your rod class should be <code>class Rod:</code> and <code>movepiece</code> should be <code>move_piece</code></p>

<p>For your global variables, you could fix this by having a <code>Game</code> or <code>Hanoi</code> class.</p>

<pre><code>class Hanoi:

    def __init__(self, rod1, rod2, rod3):
        self.rod1 = rod1
        self.rod2 = rod2
        self.rod3 = rod3
        ...
</code></pre>

<p>Watch out for using <code>eval</code>. There are lots of reasons not to use <code>eval</code>, but the one I want to talk about is that here you're relying on the user to know variable names. Variable names should <strong>never matter</strong>. But here if you were to change a variable name, your program would not function as intended.</p>

<p>If the goal is to call a method on a Rod object based on user input, just do a standard if/elif block</p>

<pre><code>if source == 1:
    piece = self.rod1.top()
elif some_condition:
    ...
</code></pre>

<p>If you're using <code>eval</code> to call methods like this, just call the methods instead.</p>

<p><code>list(range(1,level+1))</code> if you look at the documentation for the <code>range</code> function, it already returns a list, you can just use <code>range(1,level+1)</code></p>

<p>There seem to be some unnecessary offsets throughout your code, why use <code>range(1, level + 1)</code> and not just <code>range(level)</code> you can just take the user input value and subtract 1 from it in one place, in Python counting starts from 0 :)</p>

<p><code>def __init__(self,n):</code> n is a very poor name for a variable, use something like <code>num</code> or <code>number</code> instead, anything to improve readability goes a long way.</p>

<p>in your <code>movepiece()</code> function, you call <code>movepiece</code> again inside, I don't think there's any real benefit to using recursion here, I think it would be simpler to understand a simple loop instead, and it would also be simpler to reason about and leave less room for error.</p>

<pre><code>while !game_over:
    # game loop
</code></pre>

<p>This way you don't need to worry about <code>maximum recursion depth exceeded</code> either, not that that would really be a problem here anyway.</p>

<p>This while loop <code>rod2.state!=list(range(1,level+1)) and rod3.state!=list(range(1,level+1)</code> could be a lot simpler.</p>

<p>Try breaking it down into multiple <strong>well named</strong> boolean values instead.</p>

<pre><code>meaningful_name_for_this = rod2.state!=list(range(1,level+1))
meaningful_name_for_that = rod3.state!=list(range(1,level+1)
while meaningful_name_for_this and meaningful_name_for_that:
    # do your loop code
</code></pre>

<p>Make your code as <strong>self documenting</strong> as possible.</p>

<p><code>destination=int(move.split(" ")[1])</code></p>

<p>Avoid <strong>magic numbers</strong> where possible, whenever you need specific values like this, make them a well named constant instead.</p>

<p><code>destination=int(move.split(" ")[DESTINATION_INDEX])</code></p>

<p>especially if you reuse them throughout your code base.</p>

<p>Hopefully some of this was useful to you!</p>

<p><strong>Edit</strong>:</p>

<p>Here's an example of what your <code>move_piece</code> method could look like
Here it's a method of some <code>Hanoi</code> or <code>Game</code> object.</p>

<pre><code>def move_piece(self):
    move = INVALID_VALUE  # some constant
    while not self._is_move_valid(move):  # method that checks if a move is okay or not
        move = self._prompt_for_move() # reads user input

    # if we're here, we know that the move is definitely valid
    self._perform_movement(move)  # does the work on the Rod objects
</code></pre>

<p>I've made up some methods here, in your code you have the logic to do these actions, so I'll let you fill in those!</p>

<p>Notice now how short this method is, the shorter the method the better, even though it's made up of many calls to other methods, by giving them all good clear names, you should be able to see what the method is doing without looking at the bodies of these other methods.</p>
    </div>