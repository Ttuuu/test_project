<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can see a few big wins in terms of making this easier to read and understand;</p>

<p><strong>Smaller Functions</strong></p>

<p>At the moment, you have a <code>PlayWithTheUser()</code> function which is very long and contains all of the program logic directly. This would be better split out into several separate functions, so that your initial play function looks more like;</p>

<pre><code>public static void Play() {
    EnsureUserReady();
    var name = GetUserName();
    while (true) {
        PlayRound(name);
    }
}
</code></pre>

<p>In this, each of the functions <code>EnsureUserReady()</code>, <code>GetUserName()</code>, and <code>PlayRound()</code> would be doing what their names suggest (roughly the separate sections of your initial code, potentially each split out further). </p>

<p>The idea is that any function only really does one thing at whichever level of abstraction it is working on. So e.g. <code>PlayRound()</code> is a single thing in terms of the outer function, but probably splits itself into a few separate functions: e.g. <code>GetUserPlay()</code> (which takes in the user input), <code>GetComputerPlay()</code> (which outputs the computer's choice - maybe easy now, but it could get more nuanced if you wanted), and <code>DetermineWinner(userPlay, computerPlay)</code> (which prints the output).</p>

<p><strong>Enums</strong></p>

<p>C# has an enum type, which is perfect for this type of small-number-of-valid-choices thing. So instead of using integers that mean rock, paper, and scissors, you can define;</p>

<pre><code>public enum Play {
    Rock,
    Paper,
    Scissors
}
</code></pre>

<p>(This should be given a better name, but I can't think of one off the top of my head.)</p>

<p>This can then be used for comparison a lot more easily, and it's a lot clearer to check if a variable is equal to <code>Play.Rock</code> than if it is equal to <code>1</code>, for example.</p>

<p>It does mean that you'll need to do something a little different to parse input into this type. There are integers underlying enum values, so they can be entered that way if you specify in the enum which integer should map to which value, but you may want to consider having the user entering a string or a letter and parse that (as it's going to be a bit easier for the user to remember which option they are choosing that way).</p>

<p><strong>Start/End control</strong></p>

<p>You've got a comment in the code that says it will be first to 3 points, but at the moment that isn't tracked in the code - it will just continue forever. There should either be a way for the user to exit at a point they choose, or a defined end (or possibly both).</p>

<p>This might mean checking at the end of each round whether the user wants to continue, and probably means keeping track of the total scores. Exactly how you want to implement this will vary based on exactly what you want to do.</p>

<p>Somewhat relatedly, using <code>while (true)</code> is always a bit worrying in terms of being an infinite loop if there<code>s nothing guaranteed to break out of it. It is clearer (and safer in terms of accidentally introducing bugs) to refactor to have</code>while (condition)` where condition is then updated within the loop (whether that's a counter, or a toggle for whether the user wants to continue, or a property of the score, or something else).</p>

<hr>

<p>So, those are some things to start off with. There's a lot you could decide you wanted to change based on exactly what you might want to do (e.g. cleaning up the win/lose checking, taking the game out into a separate class which might be stateful to keep track of scores etc), but the above should give you a good set of first pass improvements.</p>

<p>In terms of learning - I suggest you try things and see where you get, and then look for another review.</p>
    </div>