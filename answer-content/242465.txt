<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't have <code>word_meaning</code>, is that another dependency ?</p>

<p>Since you are already using the <code>random</code> module, you can simply select a random element from a list with <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer">random.choice</a> like this:</p>

<pre><code>rand_word = random.choice(word_dict)
</code></pre>

<p>instead of:</p>

<pre><code>rand_word = word_dict[random.randint(0, len(word_dict)-1)]
</code></pre>

<p>Here you are picking only one element at a time, but if you wanted to select several <strong>unique</strong> elements (no repeating items) then you would use <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer">random.sample</a>.</p>

<hr>

<p>Your list of words is a constant, make it so:</p>

<pre><code>word_dict = (
'attach', 'compete', 'day', 'frail', 'grubby', 'gusty', 'interfere', 'lumpy', 'memory',
'necessary', 'neck', 'park', 'picayune', 'sophisticated', 'spiky', 'whistle'
)
</code></pre>

<p>(did a simple search &amp; replace in Notepad++). NB: I have sorted it too.</p>

<p>The way you are <code>split</code>ting the string is awkward and the comma delimiter is superfluous. This design choice forces you to waste one line per word and makes the code longer for no benefit.</p>

<p>Note that I made it a <strong>tuple</strong> (non mutable) instead of a list, hence the parentheses.</p>

<p>You could also load the list from a text file, if you want flexibility and separate data from code.</p>

<hr>

<p>It is not safe to rely on <code>\n</code> as a line break delimiter because it is platform-specific. On Windows/Mac it is different although Python <em>should</em> still interpret it the same. But you never know. Think about portability issues.</p>

<p>Relying on <strong>global variables</strong> is probably not so Pythonic. You could pass <code>chances</code> as a <strong>parameter</strong> to your functions. And if you make changes to that value, then return the value in your functions.</p>

<p>Using a global variable could make debugging harder because the variable can be altered in so many places. If you refactor your functions at some point the variable could even be out of sync.</p>

<hr>

<p>I would aim for <strong>minimal variable scope</strong>. If <code>hidden_word_1</code> (not a great name) is only used in <code>user_guess</code> then it need no be defined as a global variable.</p>

<hr>

<p>I cannot run your code right now but I am not convinced you need a recursive function. You simply need a while loop eg <code>while chances &gt; 0:</code> and decrement the counter after each wrong response.</p>
    </div>