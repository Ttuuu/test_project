<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for the game. I applied most changes suggested by <a href="https://codereview.stackexchange.com/users/82612/dair">@Dair</a> and <a href="https://codereview.stackexchange.com/users/201170/vurmux">@vurmux</a> as well as partially the suggestions from <a href="https://codereview.stackexchange.com/users/50567/peter-cordes">@Peter Cordes</a> (some of them are not so simple). After that, there were still some things left:</p>

<h3>Game logic</h3>

<p>I'm not sure whether it was intentional, but the snake does not collide with itself. In usual snake games, if the snake bites into her tail, the game is over as well.</p>

<h3>Swallowed keypresses</h3>

<p>When playing the game, I noticed that I sometimes cannot perform a U-turn when I needed to. It seems that the first keypress got lost.</p>

<p>The reason is here:</p>

<pre><code>pressed = pygame.key.get_pressed()
if pressed[pygame.K_RIGHT] or pressed[pygame.K_d]:
    ...
</code></pre>

<p>which should be changed to</p>

<pre><code>if event.type == pygame.KEYDOWN:
    if event.key == pygame.K_RIGHT or event.key == pygame.K_d:
        snake.change_dir(Direction.RIGHT)
    elif event.key == pygame.K_LEFT or event.key == pygame.K_a:
        snake.change_dir(Direction.LEFT)
    elif event.key == pygame.K_UP or event.key == pygame.K_w:
        snake.change_dir(Direction.UP)
    elif event.key == pygame.K_DOWN or event.key == pygame.K_s:
        snake.change_dir(Direction.DOWN)
</code></pre>

<p>However, this brings us to an interesting other problem: doing 2 changes without moving the snake makes the snake run into the opposite direction immediately (without hitting itself as noted before).</p>

<p>Since <code>pygame.event.get()</code> consumes all events, it would be up to you, queuing the events yourself and processing them the next frame.</p>

<h3>High CPU usage when game is over</h3>

<p>When the game is over, it uses ~14% CPU time on my machine, which means that 1 core is 100% busy. Adding a <code>pygame.time.delay(60)</code> into the <code>while is_over</code> loop helps.</p>

<h3>Classes in files</h3>

<p>In addition I tried to apply another principle, which is to have each class in a separate file. Doing so is quite simple with an IDE like Pycharm, since it has the move-refactoring. Unfortunately, it doesn't work any more, because of this:</p>

<p>After the refactoring, Food has</p>

<pre><code>from game import bg_width, block_size, bg_height
</code></pre>

<p>So one's left with a cycle of imports due to the use of global variables. Looking at the food class for possible resolutions, you could pass the necessary dependencies as parameters:</p>

<pre><code>def spawn(self, bg_width:int, bg_height:int, block_size:int) -&gt; Tuple[int, int]:
</code></pre>

<p>After the refactoring, Snake has</p>

<pre><code>from game import block_size
</code></pre>

<p>and a similar solution can apply.</p>

<h3>Static members</h3>

<p>Your classes seem to define the properties twice, once in <code>__init__</code> and once as static members. I don't see any usage of the static members, so these can be removed in <code>Snake</code>:</p>

<pre><code>head: List[int, int]
color: Tuple[int, int, int]
body: List[List[int, int]]
direction: str
size: int
</code></pre>

<p>and in <code>Food</code>:</p>

<pre><code>x: int
y: int
color: Tuple[int, int, int]
state: bool
position: Tuple[int, int]
</code></pre>

<h3>Naming</h3>

<p>Assuming that <code>bg</code> is short for <em>background</em>, I really wonder whether that's the correct term here. The snake is moving on a board, not on a background I'd say. In the comment for that line, you call it <em>screen width and height</em>, which may accidentally be the case as well.</p>

<p>Considering a future version of the game where you add a nice background graphic and display the score below the board, neither <em>background</em> nor <em>screen</em> would match any more.</p>

<h3>Code duplication</h3>

<p>With the change before, I noticed that there's duplicate code in the Food class. Inside <code>__init__</code>, it basically <code>spawn</code>s itself.</p>

<p>This duplication can be removed and adding </p>

<pre><code>food = Food(BLUE)
food.spawn(bg_width, bg_height, block_size)
</code></pre>

<p>It can later be discussed whether or not Food needs to be spawned that early.</p>

<h3>Potential stack overflow in game over mode</h3>

<p>Once the game is over, there's a loop handling the situation:</p>

<pre><code>while is_over:
</code></pre>

<p>I expected the game to get out of this loop when a new round begins. However, that's not the case. Instead there is</p>

<pre><code>if event.key == pygame.K_r:
    game()
</code></pre>

<p>This is a recursive call. It's unlikely that it will cause problems in this particular game, but in general, this may cause stack overflows.</p>

<p>It can be resolved by introducing another loop</p>

<pre><code>while running:
    while is_over and running:
        ...

    # Initialization code here

    while running and not is_over:
        ...
</code></pre>

<p>Instead of calling <code>game()</code>, you can then set <code>is_over = False</code>. </p>

<h3>Unused variable / unreachable code</h3>

<p>The <code>while running</code> loop can be replaced by a <code>while True</code>, since there's no other assignment to <code>running</code> which would terminate the loop.</p>

<p>This also means that the code after <code>while running</code> will never be reached:</p>

<pre><code>pygame.quit()
quit()
</code></pre>

<p>Changing the exit routine to <code>running = False</code>, you save some duplicate code and the code runs to the end. This is e.g. helpful if you later want to implement saving a highscore list etc. If you have many exit points during your program, it will be harder to implement something at the end of the game.</p>

<p>You can also omit <code>quit()</code>, because it is not helpful as the last statement of your code.</p>

<h3>Smaller improvements</h3>

<p><code>food.update()</code> is only called with <code>False</code> as a parameter. It's never called with <code>True</code>. So this argument can be omitted and go hard-coded into the <code>update()</code> method. The code then looks like this:</p>

<pre><code>while running:
    ...
    food_pos = food.spawn(board_width, board_height, block_size)
    if collision(snake, *food_pos):
        score += 1
        food.update()
</code></pre>

<p>This reads like the food is spawning in a new place with every frame. IMHO it reads better like this:</p>

<pre><code>while running:
    ...
    food_pos = food.??? # whatever 
    if collision(snake, *food_pos):
        score += 1
        food.spawn(board_width, board_height, block_size)
</code></pre>

<p>Because that makes it clear that food only spaws whenever it collided with the snake aka. it was eaten.</p>

<h3>Snake direction change</h3>

<p>Note: <a href="https://codereview.stackexchange.com/users/50567/peter-cordes">@Peter Cordes</a>' vector approach is even more elegant. Perhaps the following might show you a refactoring you can apply in other cases as well when a vector does not fit.</p>

<p>After applying the enum suggestion, the direction check looks like this</p>

<pre><code>def change_dir(self, direction: Direction) -&gt; None:
    if self.direction != Direction.LEFT and direction == Direction.RIGHT:
        self.direction = Direction.RIGHT
    elif self.direction != Direction.RIGHT and direction == Direction.LEFT:
        self.direction = Direction.LEFT
    elif self.direction != Direction.DOWN and direction == Direction.UP:
        self.direction = Direction.UP
    elif self.direction != Direction.UP and direction == Direction.DOWN:
        self.direction = Direction.DOWN
</code></pre>

<p>Combining <code>self.direction = Direction.RIGHT</code> and <code>direction == Direction.RIGHT</code>, we can simplify</p>

<pre><code>self.direction = direction
</code></pre>

<p>This applies to all 4 cases, so we end up with</p>

<pre><code>def change_dir(self, direction: Direction) -&gt; None:
    if self.direction != Direction.LEFT and direction == Direction.RIGHT:
        self.direction = direction
    elif self.direction != Direction.RIGHT and direction == Direction.LEFT:
        self.direction = direction
    elif self.direction != Direction.DOWN and direction == Direction.UP:
        self.direction = direction
    elif self.direction != Direction.UP and direction == Direction.DOWN:
        self.direction = direction
</code></pre>

<p>Now, we can argue that this is duplicate code and remove the duplication:</p>

<pre><code>def change_dir(self, direction: Direction) -&gt; None:
    if (self.direction != Direction.LEFT and direction == Direction.RIGHT) or \
            (self.direction != Direction.RIGHT and direction == Direction.LEFT) or \
            (self.direction != Direction.DOWN and direction == Direction.UP) or \
            (self.direction != Direction.UP and direction == Direction.DOWN):
        self.direction = direction
</code></pre>

<p>Personally, I'd even prefer</p>

<pre><code>def change_dir(self, direction: Direction) -&gt; None:
    if self.is_opposite_direction(direction, self.direction):
        return
    self.direction = direction
</code></pre>
    </div>