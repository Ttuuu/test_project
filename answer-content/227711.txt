<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I was curious about why you kept the initial size inside each of the arrays until I finaly noticed the<br>
<code>arrays[i][0]</code> in the check if that array still has elements to proces during the algorithm. If we replace that with <code>arrays[i].length-1</code> we no longer need to store those.</p>

<p>Another major issue, like Nathan pointed out is how many String objects you're creating while parsing the input. The easiest solution to this is to use a Scanner instead of a BufferedReader. That way, you can directly read the <code>nextShort()</code>.</p>

<pre><code>    Scanner reader = new Scanner(new InputStreamReader(System.in));

    short k = reader.nextShort();
    short[][] arrays = new short[k][];

    int arrayLength = 0;
    int[] minPositionInArrays = new int[k]; // note here: now correctly initialised to 0's
    for (int i = 0; i &lt; k; i++) {
        short size = reader.nextShort();
        arrays[i] = new short[size];
        for (int j = 0; j &lt; size; j++) {
            arrays[i][j] = reader.nextShort();
        }
        arrayLength += size;
    }
    reader.close();
</code></pre>

<hr>

<p>The recommended complexity is O(k ⋅ log(k) ⋅ length_array). Yours seems to be O(k ⋅ (k ⋅ length_array)).</p>

<p>Since we need to proces k ⋅ length_array items anyway, we can't change that. So how can you get the other k in that complexity formula down to a log(k)?</p>

<p>The solution is to sort all the lists initially and then use the fact that they're sorted when processing each element. How to actually implement this I'll leave up to you :)</p>

<hr>

<p>Final remark: If the memory limit is 10MB and the input is at most 1024*(10*1024) = 10.485.760 numbers (~=10MB) this seems almost impossible to me. That would mean storying all numbers into a single array in the first place and sorting them in-place. But you don't know how big this array needs to be before you read the last line of the input.</p>

<p>I'm assuming the actual limit is a bit more lenient, or it wasn't set with java in mind :)</p>
    </div>