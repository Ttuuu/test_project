<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In some point my solution is similar to both @mathias-ettinger solution and @coderodde suggestions. </p>

<pre><code>class Node:
    def __init__(self, value, range):
        self.value = value
        self.range = range
        self.childs = []

    def addChilds(self, nodes):
        self.childs = nodes


class TreeHeight:

    def create_tree(self, node):
        if node:
            child_idx = [i for i,x in enumerate(self.parent) if x == node.range]
            child_nodes = [self.nodes[i] for i in child_idx]
            node.addChilds(child_nodes)
            for child in node.childs:
                self.create_tree(child)


    def read(self):
        self.n = int(sys.stdin.readline())
        self.parent = list(map(int, sys.stdin.readline().split()))
        self.nodes = [Node(vertex,i) for i, vertex in enumerate(self.parent)]

    def get_height(self,node):
        return 1 + max((self.get_height(c) for c in node.childs), default=0)

    def compute_height(self):
        # Replace this code with a faster implementation
        root_idx = self.parent.index(-1)
        if root_idx == -1:
            return 0

        root = self.nodes[root_idx]
        child_idx = [i for i,x in enumerate(self.parent) if x == root_idx]
        child_nodes = [self.nodes[i] for i in child_idx]
        root.addChilds(child_nodes)
        for child in root.childs:
            self.create_tree(child)

        return self.get_height(root)


def main():
  tree = TreeHeight()
  tree.read()
  print(tree.compute_height())

threading.Thread(target=main).start()
</code></pre>

<p>But I agree with @jaime that you don't need to create a tree to compute it's height.</p>
    </div>