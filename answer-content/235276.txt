<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some of the issues I've found with your code. But there are
many more left and it is very hard to review your code without seeing
some sample data files. Consider rewriting your code, taking these
suggestions into account and then posting another request for code
review.</p>

<h3>Avoid mixing import styles</h3>

<pre><code>import re
from datetime import datetime
import pandas as pd
import numpy as np
from tkinter import filedialog
from tkinter import *
import os, sys
import glob
from matplotlib.backends.backend_pdf import PdfPages
import time
</code></pre>

<p>It is ugly and can be confusing to mix import styles. Choose the one
you like, either <code>from foo import bar</code> or <code>import foo [as bar]</code>, and
stick with that as much as possible.</p>

<h3>Wrap code in <code>main</code></h3>

<p>Writing code at the module level means that the global namespace is
modified when the code runs. Suppose you have the following code:</p>

<pre><code>y = ...
...
for i in range(x):
    ...
for i in range(y):
    ...
</code></pre>

<p>You decide to refactor the second for-loop into its own function, but
you forget to pass <code>y</code> as a parameter:</p>

<pre><code>def new_fun():
    for i in range(y):
        ...
y = ...
...
for i in range(x):
    ...
new_fun()
</code></pre>

<p>The code contains a bug but still runs. It can cause nasty and hard to
debug bugs (has happened to me several times before I wised
up). Therefore, it's good practice to always wrap the main code in a
<code>main</code>, even for small scripts. Like this:</p>

<pre><code>def main():
    ...
if __name__ == '__main__':
    main()
</code></pre>

<h3>Follow PEP 8</h3>

<p>Follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> - Python's
style guide. So use snake-case instead of camel-case for variable
names. E.g <code>list_of_files</code> instead of <code>listOfFiles</code>.</p>

<h3>Naming</h3>

<p>Ensure that names are accurate, understandable and follows PEP 8. E.g</p>

<pre><code>choosen_dir = get_filenames()
os.chdir(choosen_dir)
</code></pre>

<p>The function gets a <em>directory</em> not filenames, so it should be called
<code>get_dir</code>.</p>

<p>The name <code>file</code> should be avoided because it clashes with a
Python builtin. I'd replace it with <code>fname</code>.</p>

<p>Also names such as <code>W1R43</code>, <code>L_W1R43</code> and <code>ListL</code> are very cryptic. I
have looked at the code for a while but I still have no idea what they
are about.</p>

<h3>Intermediate lists</h3>

<p>You have code like</p>

<pre><code>listOfFiles = []
...
for file in glob.glob("*.csv"):
    listOfFiles.append(file)
for file in listOfFiles:
    ...
</code></pre>

<p>Instead you can just write</p>

<pre><code>for file in glob.glob("*.csv")
</code></pre>

<p>without creating the <code>listOfFiles</code> list.</p>

<h3>ToDate</h3>

<p>I don't understand the purpose of this class. I think you can just write:</p>

<pre><code>df_l['LDUR'] = pd.to_datetime(df_l['LDUR'])
df_l['LDOP'] = pd.to_datetime(df_l['LDOP'])
df_m['LDUR'] = pd.to_datetime(df_m['LDUR'])
df_m['LDOP'] = pd.to_datetime(df_m['LDOP'])
</code></pre>
    </div>