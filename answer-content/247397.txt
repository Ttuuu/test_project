<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Language choice</h1>
<p>A lot of your commentary on this code revolves around whether bash is a good choice for this project.  I would say, yes, it is a good choice.  You have shell commands, and you want to make a bit of a wrapper around them.  That's a perfect use case for shell, even with so many more recent choices available.</p>
<p>A related concern that you raised is</p>
<blockquote>
<p>I am a Python developer and I fear I may have written a Python-script in Bash.</p>
</blockquote>
<p>Yeah, maybe, a bit.  But that's life in coding.  Everything you do is going to be influenced by previous languages you've been exposed to.  Most shell programs don't involve arrays, but there's nothing wrong with you taking advantage of unpopular features.  I will talk about making this like native shell in the review below.</p>
<h1>code review</h1>
<ul>
<li>Your use of indentation and quoting is excellent.</li>
<li>Nice variables names.  Yay for copying the command line arguments into named variables.</li>
<li>Your style guide seems like a reasonable choice although I just skimmed it.  I've liked <a href="https://google.github.io/styleguide/shellguide.html" rel="nofollow noreferrer">google's style guide</a> and <a href="https://www.shellcheck.net/" rel="nofollow noreferrer">shellcheck</a>.  Shellcheck is a linter so it could be used in your CI pipeline.</li>
<li>I like that you <code>exit</code> after some commands that could fail.  It would be nice from the calling perspective if you used distinct exit codes.  It would also be a good idea to check that <code>rm</code>, <code>mkdir</code> and <code>cp</code> succeeded.</li>
<li>Did you try it without <code>eval</code>ing the command?  I didn't try it, but I'm guessing you can skip the <code>eval</code>.</li>
<li>So, back to the arrays being unusual in a shell script... The shell will split a string into arguments if they are separated by spaces.  You could make <code>languages</code> be a long space-delimited string and not worry about turning it into an array.  The for loop would become <code>for lang in $languages; do</code> and the shell would give you one at a time.  It also works your way and it should be decipherable to folks who aren't used to arrays in the shell, so I wouldn't worry about it.</li>
<li>The <code>if</code> at the top would usually be expressed like <code>if [[ "$*" &lt; 3 ]]</code>.  Your way is fine.  The <code>(( ))</code> tells the shell to "do math in here" and that works here, but you might want to do string comparisons or check file existance.  Then you'll need the <code>[[ ]]</code>.</li>
</ul>
    </div>