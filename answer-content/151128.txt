<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Something that I really enjoy doing in Swift is making use of of enumerations.</p>

<p>You could create a <code>CalculatorOperation</code> enum that extracts some of your code into an type like this: </p>

<pre><code>enum CalculatorOperation {

    case add
    case subtract
    case multiply
    case divide

    init?(from buttonTitle: String) {
        switch buttonTitle {
        case "+": self = .add
        case "-": self = .subtract
        case "*": self = .multiply
        case "/": self = .divide
        default: return nil
        }
    }

    func apply(to left: Int, and right: Int) -&gt; Int {

        switch self {
        case .add:
            return left + right

        case .subtract:
            return left - right

        case .multiply:
            return left * right

        case .divide:
            return left / right
        }
    }
}
</code></pre>

<p>Then, your view controller becomes a lot more manageable.</p>

<p>I'd also separate out your <code>@IBActions</code> so that you have one for when people tap on an operation button, and another action specifically for dealing with when people tap the '=' button. </p>

<pre><code>class ViewController: UIViewController {

    @IBOutlet var inputLabel: UILabel!

    var firstNumber: Int = 0
    var currentOperation: CalculatorOperation? = nil

    // connect 1,2,3,4,5,6,7,8,9,0 buttons to this action
    @IBAction func updateNumber(_ numberButton: UIButton) {

        // update the input label with whatever number has been pressed
        let numberTitle = numberButton.currentTitle!
        inputLabel.text = inputLabel.text! + numberTitle
    }

    // connect '+', '-', '*', '/' buttons to this action
    @IBAction func updateOperation(_ operationButton: UIButton) {

        // update the operation based on the key pressed
        let operationTitle = operationButton.currentTitle!
        currentOperation = CalculatorOperation(from: operationTitle)

        // save the number shown in the input as the first number
        let currentinput = inputLabel.text!
        firstNumber = Int(currentinput)!

        // clear out the input label so it's ready for new number to be entered
        inputLabel.text = ""
    }

    // connect '=' button to this action
    @IBAction func performCalculation(_ sender: UIButton) {

        // get the second number from whatever is currently in the input label
        let currentinput = inputLabel.text!
        let secondNumber = Int(currentinput)!

        let finalValue = currentOperation!.apply(to: firstNumber, and: secondNumber)

        // update input label with the calculated value
        inputLabel.text = String(finalValue)
    }
}
</code></pre>

<p>Something else I've found really helpful lately is to start in a playground, and make sure that my logic is working before jumping into a an app.</p>

<p>The playgrounds are always re-compiling in the background as you type, so it's a great way to get early feedback on logic errors and spot bugs.</p>

<p>Here's an example where I noticed that the division isn't worked as expected because we're using <code>Int</code> (so should probably cast to a <code>Double</code>)</p>

<p><a href="https://i.stack.imgur.com/mVBsg.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/mVBsg.jpg" alt="enter image description here"></a></p>
    </div>