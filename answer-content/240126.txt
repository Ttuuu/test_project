<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The Good</h2>

<p>The code is fairly readable, horizontal spacing is good.</p>

<p>The variables are declared as they are needed.</p>

<p>You didn't use <code>using namespace std;</code> which is very good for a beginner.</p>

<h2>Macros in C++</h2>

<p>Macros are included in C++ to support some backward compatibility with the C programming language that it grew out of, but they generally aren't used in C++ because they aren't type safe. Replacements for macros are inline functions, and lambda expressions or closures.</p>

<p>An alternate to what is in the code is to use <code>typedef</code>. A second alternative is to use <code>using ll = long long;</code>.</p>

<p>The best thing might be to find what types C++ supports and use that instead. You can find a list of the types provided by the <code>cstdint</code> header file <a href="https://en.cppreference.com/w/cpp/header/cstdint" rel="nofollow noreferrer">here</a>.</p>

<p>Another alternative is to just use <code>long long</code> rather than shortening it. C++ is not a scripting language and C++ coders are used to things like this.</p>

<h2>Beginning a Variable or Function with Double Underscore.</h2>

<p>Function names and variables should start with letters rather than underscores, double underscore is reserved for special usage.</p>

<h2>Variable Names</h2>

<p>Single letter variable names make the code very hard to understand, I don't even have a clue what <code>c</code>, <code>q</code>, <code>l</code>, <code>r</code> or <code>v</code> are or I would try to guess at their meanings.</p>

<p>Variables <code>i</code> and <code>j</code> are used as indexes into the vector, it would be better if these variables were of type <code>size_t</code> rather than <code>long long</code> because <code>size_t</code> is defined as unsigned and can't be negitive. It would very rare to have an array or vector that would require the address space of a <code>long long</code>.</p>

<h2>One Variable Declaration Per Line</h2>

<p>The code contains this line</p>

<pre><code>        ll l, r, v;
</code></pre>

<p>To make the code more maintainable each variable should be declared and initialized on it's own line.</p>

<pre><code>        ll l = 0;
        ll r = 0;
        ll v = 0;
</code></pre>

<h2>Vertical Spacing</h2>

<p>To make the code more readable it needs some vertical spacing, one line between logical blocks:</p>

<pre><code>#include &lt;vector&gt;
#include &lt;iostream&gt;

using ll = long long;

ll __hash__(const std::vector&lt;int&gt; &amp;arr) {
    ll front = arr[0];
    for(ll i = 1; i &lt; arr.size(); i++){
        front = arr[i] - front;
    }
    return front;
}

int main() {
    std::vector&lt;int&gt; arr;

    ll size;
    std::cin &gt;&gt; size;
    for (ll i = 0; i &lt; size; ++i) {
        ll c;
        std::cin &gt;&gt; c;
        arr.push_back(c);
    }

    ll q;
    std::cin &gt;&gt; q;
    for (size_t i = 0; i &lt; q; ++i) {
        ll l, r, v;
        std::cin &gt;&gt; l &gt;&gt; r &gt;&gt; v;
        for(size_t j = l - 1; j &lt; r; ++j){
            arr[j] += v;
        }
        std::cout &lt;&lt; __hash__(arr) &lt;&lt; std::endl;
    }

    return 0;
}
</code></pre>
    </div>