<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I also noticed some variables can be declared with <code>const</code> instead of <code>let</code> - like <code>key</code>, since it is never re-assigned within the <code>forEach</code> callback.</p>

<pre><code>dataCells.forEach((dataCell) =&gt; {
  const key = dataCell.dataset.key; // The more general name ...
</code></pre>

<hr>

<p>You could abstract out the URL to the top, as a constant (or else in a configuration file). That way if the URL ever changes, you can do it in one spot, instead of having to find it mixed in with the code. </p>

<pre><code>const API_URL = 'https://swapi.co/api/starships/';
</code></pre>

<p>Similarly, the options for <code>fetch()</code> could be stored in a constant</p>

<pre><code>  const fetchOptions = {mode: 'cors'};
</code></pre>

<hr>

<p>Another option to simplify things is to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" rel="nofollow noreferrer">Promise.all()`</a> to run the two API requests concurrently, and then to get the JSON from each response. </p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const API_URL = 'https://swapi.co/api/starships/';
(() =&gt; {
  const dataCells = [...document.getElementsByClassName('data-cell')];
  const starShipOne = document.getElementById('starShipOne');
  const starShipTwo = document.getElementById('starShipTwo');

  function removeHigherValueClass() {
    dataCells.forEach((dataCell) =&gt; {
      dataCell.classList.remove('higher-value');
    });
  }
  const fetchOptions = {mode: 'cors'};
  function getData() {
    const oneResponse = fetch(API_URL + starShipOne.value, fetchOptions);

    const twoResponse = fetch(API_URL + starShipTwo.value, fetchOptions);
    return Promise.all([oneResponse, twoResponse]);
  }
  function getJSONFromResponses(responses) {
    return Promise.all(responses.map(response =&gt; response.json()));
  }
  function updateDOM(json) {
    dataCells.forEach((dataCell, i) =&gt; {
      const key = dataCell.dataset.key; // The more general name ...
      dataCell.textContent = json[i % 2][key];
      // Starship One == 0, Starship Two == 1
      if (!isNaN(json[0][key])) { // If it is computable, comparable data ...

        if (parseFloat(json[i % 2][key]) &gt; parseFloat(json[(i + 1) % 2][key])) { // ... then compare the current spec. Class has only to be attached if one value is really higher. No attachment when equal.
          dataCell.classList.add('higher-value');
        }
      }
    });
  }

  document
    .getElementById('compare')
    .addEventListener('click', () =&gt; {
      removeHigherValueClass();
      getData().then(getJSONFromResponses).then(updateDOM);
    });
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>html {
  background-color: rgba(245, 245, 245, .5);
}

.higher-value {
  background-color: pink;
  font-weight: 900;
}

.main-wrap {
  max-width: 800px;
  margin: 40px auto;
}

.main-nav {
  margin: 0 0 30px;
}

.data-cell {
  text-align: center;
  width: 200px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;section&gt;
  &lt;div class="main-wrap"&gt;
    &lt;h3&gt;Select two Starships from the dropdown lists to compare&lt;/h3&gt;
    &lt;nav class="main-nav"&gt;
      &lt;select id="starShipOne"&gt;
        &lt;option value="2" selected="selected"&gt;CR90 Corvette&lt;/option&gt;
        &lt;option value="75"&gt;V-wing&lt;/option&gt;
        &lt;option value="74"&gt;Belbullab-22 Starfighter&lt;/option&gt;
        &lt;option value="65"&gt;Jedi Interceptor&lt;/option&gt;

        &lt;option value="3"&gt;Star Destroyer&lt;/option&gt;
        &lt;option value="59"&gt;Trade Fedaration Cruiser&lt;/option&gt;
        &lt;option value="58"&gt;Solar Sailer&lt;/option&gt;
        &lt;option value="63"&gt;Republic Attack Cruiser&lt;/option&gt;

        &lt;option value="28"&gt;A-wing&lt;/option&gt;
        &lt;option value="29"&gt;B-wing&lt;/option&gt;
        &lt;option value="39"&gt;Naboo Fighter&lt;/option&gt;
        &lt;option value="10"&gt;Millenium Falcon&lt;/option&gt;
      &lt;/select&gt;
      &lt;select id="starShipTwo"&gt;
        &lt;option value="2"&gt;CR90 Corvette&lt;/option&gt;
        &lt;option value="75" selected="selected"&gt;V-wing&lt;/option&gt;
        &lt;option value="74"&gt;Belbullab-22 Starfighter&lt;/option&gt;
        &lt;option value="65"&gt;Jedi Interceptor&lt;/option&gt;

        &lt;option value="3"&gt;Star Destroyer&lt;/option&gt;
        &lt;option value="59"&gt;Trade Fedaration Cruiser&lt;/option&gt;
        &lt;option value="58"&gt;Solar Sailer&lt;/option&gt;
        &lt;option value="63"&gt;Republic Attack Cruiser&lt;/option&gt;

        &lt;option value="28"&gt;A-wing&lt;/option&gt;
        &lt;option value="29"&gt;B-wing&lt;/option&gt;
        &lt;option value="39"&gt;Naboo Fighter&lt;/option&gt;
        &lt;option value="10"&gt;Millenium Falcon&lt;/option&gt;
      &lt;/select&gt;
      &lt;button id="compare"&gt;Compare&lt;/button&gt;
    &lt;/nav&gt;
    &lt;table border="1"&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;/th&gt;
        &lt;th&gt;Starship 1&lt;/th&gt;
        &lt;th&gt;Starship 2&lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Name&lt;/td&gt;
        &lt;!-- 'data-key' will later determine the row. 
                         id='data-key-value[ 0 || 1 ]' determines the cell --&gt;
        &lt;td class="data-cell" data-key="name" id="name0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="name" id="name1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Cost&lt;/td&gt;
        &lt;td class="data-cell" data-key="cost_in_credits" id="cost_in_credits0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="cost_in_credits" id="cost_in_credits1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Speed&lt;/td&gt;
        &lt;td class="data-cell" data-key="max_atmosphering_speed" id="max_atmosphering_speed0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="max_atmosphering_speed" id="max_atmosphering_speed1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Cargo Size&lt;/td&gt;
        &lt;td class="data-cell" data-key="cargo_capacity" id="cargo_capacity0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="cargo_capacity" id="cargo_capacity1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Passengers&lt;/td&gt;
        &lt;td class="data-cell" data-key="passengers" id="passengers0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="passengers" id="passengers1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>
</div>
</div>


<hr>

<p>I know this was originally tagged with <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> but I've been learning more about the <a href="/questions/tagged/ecmascript-2017" class="post-tag" title="show questions tagged 'ecmascript-2017'" rel="tag">ecmascript-2017</a> features like the keyword <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" rel="nofollow noreferrer"><code>await</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" rel="nofollow noreferrer"><code>async function</code></a>s and after having used them a bit realize that they could be used to simplify the code here immensely. For example, instead of using the generator function, you could make it a regular function (but with the <code>async</code> keyword before it) and just add <code>await</code> before each asynchronous request:</p>

<pre><code>async function getData() {
    const oneResponse = await fetch(API_URL + starShipOne.value, fetchOptions);
    const firstJSON = await oneResponse.json();

    const twoResponse = await fetch(API_URL + starShipTwo.value, fetchOptions);
    const secondJSON = await twoResponse.json();
    return [firstJSON, secondJSON];
}
</code></pre>

<p>Then there is no need to have the code that calls <code>.next()</code> on the iterator. Instead, just call <code>.then(updateDOM)</code>:</p>

<pre><code>getData().then(updateDOM);
</code></pre>

<p>See rewritten code using those updates</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const API_URL = 'https://swapi.co/api/starships/';
(() =&gt; {
  const dataCells = [...document.getElementsByClassName('data-cell')];
  const starShipOne = document.getElementById('starShipOne');
  const starShipTwo = document.getElementById('starShipTwo');

  function removeHigherValueClass() {
    dataCells.forEach((dataCell) =&gt; {
      dataCell.classList.remove('higher-value');
    });
  }
  const fetchOptions = {mode: 'cors'};
  async function getData() {
    const oneResponse = await fetch(API_URL + starShipOne.value, fetchOptions);
    const firstJSON = await oneResponse.json();

    const twoResponse = await fetch(API_URL + starShipTwo.value, fetchOptions);
    const secondJSON = await twoResponse.json();
    return [firstJSON, secondJSON];
  }
  function updateDOM(json) {
    dataCells.forEach((dataCell, i) =&gt; {
      const key = dataCell.dataset.key; // The more general name ...
      dataCell.textContent = json[i % 2][key];
      // Starship One == 0, Starship Two == 1
      if (!isNaN(json[0][key])) { // If it is computable, comparable data ...

        if (parseFloat(json[i % 2][key]) &gt; parseFloat(json[(i + 1) % 2][key])) { // ... then compare the current spec. Class has only to be attached if one value is really higher. No attachment when equal.
          dataCell.classList.add('higher-value');
        }
      }
    });
  }

  document
    .getElementById('compare')
    .addEventListener('click', () =&gt; {
      removeHigherValueClass();
      getData().then(updateDOM);
    });
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>html {
  background-color: rgba(245, 245, 245, .5);
}

.higher-value {
  background-color: pink;
  font-weight: 900;
}

.main-wrap {
  max-width: 800px;
  margin: 40px auto;
}

.main-nav {
  margin: 0 0 30px;
}

.data-cell {
  text-align: center;
  width: 200px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;section&gt;
  &lt;div class="main-wrap"&gt;
    &lt;h3&gt;Select two Starships from the dropdown lists to compare&lt;/h3&gt;
    &lt;nav class="main-nav"&gt;
      &lt;select id="starShipOne"&gt;
        &lt;option value="2" selected="selected"&gt;CR90 Corvette&lt;/option&gt;
        &lt;option value="75"&gt;V-wing&lt;/option&gt;
        &lt;option value="74"&gt;Belbullab-22 Starfighter&lt;/option&gt;
        &lt;option value="65"&gt;Jedi Interceptor&lt;/option&gt;

        &lt;option value="3"&gt;Star Destroyer&lt;/option&gt;
        &lt;option value="59"&gt;Trade Fedaration Cruiser&lt;/option&gt;
        &lt;option value="58"&gt;Solar Sailer&lt;/option&gt;
        &lt;option value="63"&gt;Republic Attack Cruiser&lt;/option&gt;

        &lt;option value="28"&gt;A-wing&lt;/option&gt;
        &lt;option value="29"&gt;B-wing&lt;/option&gt;
        &lt;option value="39"&gt;Naboo Fighter&lt;/option&gt;
        &lt;option value="10"&gt;Millenium Falcon&lt;/option&gt;
      &lt;/select&gt;
      &lt;select id="starShipTwo"&gt;
        &lt;option value="2"&gt;CR90 Corvette&lt;/option&gt;
        &lt;option value="75" selected="selected"&gt;V-wing&lt;/option&gt;
        &lt;option value="74"&gt;Belbullab-22 Starfighter&lt;/option&gt;
        &lt;option value="65"&gt;Jedi Interceptor&lt;/option&gt;

        &lt;option value="3"&gt;Star Destroyer&lt;/option&gt;
        &lt;option value="59"&gt;Trade Fedaration Cruiser&lt;/option&gt;
        &lt;option value="58"&gt;Solar Sailer&lt;/option&gt;
        &lt;option value="63"&gt;Republic Attack Cruiser&lt;/option&gt;

        &lt;option value="28"&gt;A-wing&lt;/option&gt;
        &lt;option value="29"&gt;B-wing&lt;/option&gt;
        &lt;option value="39"&gt;Naboo Fighter&lt;/option&gt;
        &lt;option value="10"&gt;Millenium Falcon&lt;/option&gt;
      &lt;/select&gt;
      &lt;button id="compare"&gt;Compare&lt;/button&gt;
    &lt;/nav&gt;
    &lt;table border="1"&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;/th&gt;
        &lt;th&gt;Starship 1&lt;/th&gt;
        &lt;th&gt;Starship 2&lt;/th&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Name&lt;/td&gt;
        &lt;!-- 'data-key' will later determine the row. 
                         id='data-key-value[ 0 || 1 ]' determines the cell --&gt;
        &lt;td class="data-cell" data-key="name" id="name0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="name" id="name1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Cost&lt;/td&gt;
        &lt;td class="data-cell" data-key="cost_in_credits" id="cost_in_credits0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="cost_in_credits" id="cost_in_credits1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Speed&lt;/td&gt;
        &lt;td class="data-cell" data-key="max_atmosphering_speed" id="max_atmosphering_speed0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="max_atmosphering_speed" id="max_atmosphering_speed1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Cargo Size&lt;/td&gt;
        &lt;td class="data-cell" data-key="cargo_capacity" id="cargo_capacity0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="cargo_capacity" id="cargo_capacity1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Passengers&lt;/td&gt;
        &lt;td class="data-cell" data-key="passengers" id="passengers0"&gt;&lt;/td&gt;
        &lt;td class="data-cell" data-key="passengers" id="passengers1"&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>
</div>
</div>

    </div>