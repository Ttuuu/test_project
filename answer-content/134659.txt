<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ol>
<li>It is generally recommended to follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">pep8</a> style for Python code. For example no space between function names and paranthesis, <code>lower_case_function_names</code>,  spaces after commas, etc.</li>
<li>You can define your grid in a single operation rather than 5. </li>
<li>For <code>print</code>, you can use <code>*</code> to unpack your nested list, then use <code>sep='\n'</code> to put each row on a different line.</li>
<li>It would be better to have at least one top-level function, rather than doing everything in the root of the script.</li>
<li>You don't need global variables, it is better to pass the variables as arguments and return the result.</li>
<li>For print, if you give multiple values as arguments, spaces are automatically inserted between the arguments.</li>
<li>You don't get any benefit from using a custom exception here, just use a <code>break</code> in your <code>if</code> test.</li>
<li>you can use one-line <code>if</code> tests (called "ternary expressions") to simplify some of your code.</li>
<li>There isn't much benefit from a simple one-line function that is only used in one place.  It makes things harder to read and slows the code down a tiny bit.  Just inline the code.</li>
<li>There isn't much point using a sentinel variable (like <code>looop</code>) when you just assign <code>False</code> to it at a certain point.  Just use <code>break</code>, and <code>continue</code> if need be to skip later parts of the loop.</li>
<li>It is better to put the absolute minimal amount of code possible in your <code>try</code> block to avoid accidentally catching the wrong exception.</li>
<li>you can combine multiple comparisons, such as <code>0 &lt; userInput &lt; 5</code>.</li>
<li>You can use <code>return</code> instead of <code>break</code> to exit out of a <code>while</code> loop if you just want to return the result at that point with no further processing.</li>
<li>You can use <code>in</code> to test if a value is in a list or other sequence of values rather then using <code>and</code>.</li>
<li>You never use <code>counter</code> in <code>placement_def</code>.</li>
<li>The <code>0</code> is implied in <code>range(0, x)</code>, so you can leave it out.</li>
<li>Rather than using <code>range</code> and indexing a list, it is easier to iterate over the list directly.</li>
<li>You always subtract <code>1</code> from <code>userInput</code>.  It would be easier to subtract one at the beginning.</li>
<li>Rather than appending a list several times to another list, use <code>extend</code> to append the all the elements at once.</li>
<li><code>check</code> doesn't need to be global, its state is never shared between functions.</li>
<li>You can use <code>all</code> to simplify checking rows or columns, and <code>zip</code> to transpose lists.</li>
<li>You can use <code>any</code> and <code>all</code> to simplify your checks for whether a player has won and for whether the grid is full.</li>
<li>You could simplify the code somewhat by having the check functions return a boolean, then printing in <code>checks_def</code>.</li>
<li>I don't think <code>placement_def</code> is correct.  You get a user input every time through the loop, rather than just once, and you overwrite the value if it is the current use or empty, when you want to overwrite only if empty.  Further, you loop from top to bottom, when you want to loop from bottom to top.</li>
<li>You hard-code the grid size, but it would be easy to allow the user to specify a square grid size.</li>
</ol>

<p>So here is my code:</p>

<pre><code>def play(n=None):
    if n is None:
        while True:
            try:
                n = int(input('Input the grid size: '))
            except ValueError:
                print('Invalid input')
                continue
            if n &lt;= 0:
                print('Invalid input')
                continue
            break

    grids = [[0]*n for _ in range(n)]
    user = 1
    print('Current board:')
    print(*grids, sep='\n')
    while True:
        user_input = get_input(user, grids, n)
        place_piece(user_input, user, grids)
        print('Current board:')
        print(*grids, sep='\n')

        if (check_won(grids, user, n) or
                check_won(zip(*grids), user, n) or
                diagcheck_won(grids, user, n) or
                diagcheck_won(grids[::-1], user, n)):
            print('Player', user, 'has won')
            return

        if not any(0 in grid for grid in grids):
            return

        user = 2 if user == 1 else 1


def get_input(user, grids, n):
    instr = 'Input a slot player {0} from 1 to {1}: '.format(user, n)
    while True:
        try:
            user_input = int(input(instr))
        except ValueError:
            print('invalid input:', user_input)
            continue
        if 0 &gt; user_input or user_input &gt; n+1:
            print('invalid input:', user_input)
        elif grids[0][user_input-1] != 0:
            print('slot', user_input, 'is full try again')
        else:
            return user_input-1


def place_piece(user_input, user, grids):
    for grid in grids[::-1]:
        if not grid[user_input]:
            grid[user_input] = user
            return


def check_won(grids, user, n):
    return any(all(cell == user for cell in grid) for grid in grids)


def diagcheck_won(grids, user, n):
    return all(grids[x][x] == user for x in range(n))


if __name__ == '__main__':
    play()
</code></pre>

<p>Note that this could be simplified even further using <code>numpy</code> arrays, but that is more advanced.</p>
    </div>