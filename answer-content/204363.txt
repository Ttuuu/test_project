<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I'm just looking for some general critiques.</p>
</blockquote>

<p><strong>Fixed width types</strong></p>

<p>Rather than <code>int, unsigned char, unsigned short</code>, I'd go right into using <code>int32_t, uint8_t, uint16_t</code>.  It conveys code's intent and is more portable amongst platforms with variant <code>int</code> size. </p>

<p>Fixed width types do prevent portability to non 2's complement machines and those with <code>CHAR_BIT &gt; 8</code>, yet those rare platforms are likely very troublesome to code this task for anyways.</p>

<p><strong>Complete memory map</strong></p>

<p>Consider a complete 64k map including the <em>unusable</em> locations.  Perhaps use a <code>union</code> of 64k bytes.  Certain to simplify <code>ReadMemory()</code> and <code>WriteMemory()</code>.</p>

<p><strong>Reliance on packed structures</strong></p>

<p><code>regs</code> only makes sense if <code>struct</code> are packed.  As packing tends to be implementation defined, consider adding <code>_Static_assert()</code> to insure adherence.</p>

<pre><code>    union Registers
    {
        struct { unsigned short int AF, BC, DE, HL, SP, PC; };
        struct { unsigned char F, A, C, B, E, D, L, H, SPL, SPH, PCL, PCH; };
    } regs;

    _Static_assert(offsetof(regs, PC) == 10, "Oops, `short` not packed as expected");  
    _Static_assert(offsetof(regs, PCH) == 11, "Oops, `char` not packed as expected");  
</code></pre>

<p><strong>Use more than one .c file</strong></p>

<p>Perhaps one for instructions, memory, etc?</p>

<p><strong>Unneeded code</strong></p>

<p><code>address &gt;= 0x0000</code> is always true as <code>address</code> is <em>unsigned</em>.  It may look symmetric in code presentation, yet it can trigger warnings.  Recommend deletion.</p>

<p><strong>Unclear code source</strong></p>

<p><code>BIT_7</code>, <code>BIT_0</code> and <em>many</em> others are not defined here.  Where are they defined? If in <code>#include "define.h"</code>, I'd expect that file posted here too so reviewers may successfully compile.</p>

<p><strong>Minor: Powers of 2 as decimal</strong></p>

<p>Powers of 2 as decimal constants, more than 1024, like <code>16777216</code> tend to be easy to mis-code and harder to review.</p>

<p>Code could use <code>16*1024*1204</code> but that has problems too.  See <a href="https://stackoverflow.com/a/40637622/2410359">There are reasons not to use <code>1000 * 1000 * 1000</code></a></p>

<p>Usually better to append a <code>u</code> to insure the constant is <em>unsigned</em> when coding powers-of-2 and especially powers-of-2-minus-1.</p>

<p><strong>Minor: Format to presentation width</strong></p>

<p>Code should readily accommodate, through an auto formatter, the presentation width and not run-off to the right.</p>

<pre><code>unsigned char GB_CycleTable[0x100] = { //0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F
                                 /*0x00*/  4,  12,   8,   8,   4,   4,   8,   4,  20,   8,   8,   8,   4,   4,   8,   4,
                                 /*0x10*/  0,  12,   8,   8,   4,   4,   8,   4,  12,   8,   8,   8,   4,   4,   8,   4,
                                 /*0x20*/  8,  12,   8,   8,   4,   4,   8,   4,   8,   8,   8,   8,   4,   4,   8,   4,
                                 /*0x30*/  8,  12,   8,   8,  12,  12,  12,   4,   8,   8,   8,   8,   4,   4,   8,   4,
...
                                 /*0xF0*/ 12,  12,   8,   4,   0,  16,   8,  16,  12,   8,  16,   4,   0,   0,   8,  16
};
</code></pre>

<p>vs. </p>

<pre><code>unsigned char GB_CycleTable[0x100] = {
    /*0x00*/4, 12, 8, 8, 4, 4, 8, 4, 20, 8, 8, 8, 4, 4, 8, 4,
    /*0x10*/0, 12, 8, 8, 4, 4, 8, 4, 12, 8, 8, 8, 4, 4, 8, 4,
    /*0x20*/8, 12, 8, 8, 4, 4, 8, 4, 8, 8, 8, 8, 4, 4, 8, 4,
    ....
</code></pre>

<p>Other alternatives</p>

<p>Since all are small multiples of 4, use <code>#define</code> or <code>enum</code></p>

<pre><code>#define M1 4
#define M2 8
#define M3 12
#define M4 16
#define M5 20
#define M6 24

/*0x00*/ M1, M3, M2, M2, M1, M1, M2, M1, M5, M2, M2, M2, M1, M1, M2, M1,
</code></pre>

<p>If you really want to line up the columns, use 8 0xXX values/line.</p>

<p>In this narrow case, I'd even consider 2-digit <em>octal</em> as all values appear to be &lt; 64.</p>
    </div>