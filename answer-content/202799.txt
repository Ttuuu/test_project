<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is there a situation where the compiler will not optimize away the wrapper because the wrapper and the original function have different semantics?</p>
</blockquote>

<p>Yes to the first part and no to the second. Any optimizing compiler will inline your wrapper, as it consists of only one return statement.</p>

<p>But on the other hand, the original function might have different semantics: It might be <code>constexpr</code> for example, and your alias will not be.</p>

<blockquote>
  <p>Does this fail to compile for some functions?</p>
</blockquote>

<p>No (except for the <code>constexpr</code> part).</p>

<p>So here are some improvements you can use:</p>

<ol>
<li><p>Templates are implicitly <code>inline</code>, so you don't need to write it explicitly.</p></li>
<li><p>Use a lambda to combat the missing <code>constexpr</code>ness of the alias, because since C++17 lambdas are implicitly <code>constexpr</code> if they can be.</p></li>
</ol>

<p>This will get you:</p>

<pre><code>#define FUN_ALIAS(NEW_NAME, ...)                                                \
  inline auto NEW_NAME = [](auto &amp;&amp;... args)                                   \
    noexcept(noexcept(__VA_ARGS__(std::forward&lt;decltype(args)&gt;(args)...)))     \
    -&gt; decltype(auto) {                                                        \
    return __VA_ARGS__(std::forward&lt;decltype(args)&gt;(args)...);                \
  };
</code></pre>
    </div>