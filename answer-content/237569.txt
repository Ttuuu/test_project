<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Includes and <code>using namespace std;</code></h1>

<p>You should not use <code>#include &lt;bits/stdc++.h&gt;</code> in any serious program, since this will pull in <a href="https://stackoverflow.com/a/25311198"><em>all</em> standard library headers</a>.</p>

<p>Together with <code>using namespace std;</code> this brings a high chance of causing headache, because of <a href="https://stackoverflow.com/q/1452721">possible name collisions and ambiguities</a>.</p>

<p>To get the standard library function you use, just include</p>

<pre><code>#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;cmath&gt;
</code></pre>

<p>and better use the full-qualified name with leading <code>std::</code>.</p>

<h1>The algorithm</h1>

<p>Since you are only interested in a single position of the three possible tokens, there is no need to have a <code>std::vector</code> to store all of them.</p>

<p>You can also stop parsing the string once you have found the value at the desired position.</p>

<p>In the example below I've removed the Rcpp stuff, but I'm sure you'll be able to adapt it to your needs.</p>

<p>It uses a range-based <code>for</code> loop, mostly stolen from the <a href="https://en.cppreference.com/w/cpp/string/basic_string/getline" rel="noreferrer"><code>std::getline</code> documentation</a> with an additional counter variable to be able to abort early.</p>

<p>If the approach using <code>std::stod</code> is not robust enough for all your cases, you could also switch back to your original implementation using <code>std::istringstream</code>.</p>

<pre><code>#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;cmath&gt;

#include &lt;iostream&gt;   // only needed for main

double ReturnUncertainty(std::string vcfield, int DSfield, int aa, int bb) 
{
    std::stringstream checkMain(vcfield);

    double dose = 0;
    int i = 0;
    for(std::string intermediate; std::getline(checkMain, intermediate, ':'); ++i) { 
        if(i == DSfield) {
            dose = std::stod(intermediate);
            break;
        }
    }

    return std::fabs(aa + bb - dose);
}

int main() {
    std::cout &lt;&lt; ReturnUncertainty("1/1:1.88:0,0.12,0.88", 1, 1, 1) &lt;&lt; std::endl;
}
</code></pre>

<p>I have not measured the performance against your code, but I'm fairly confident that it would be faster.</p>
    </div>