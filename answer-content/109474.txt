<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><code>String Name;</code> – Variable names begin with lowercase by convention: <code>String name;</code>.</li>
<li><code>unit_price; unit_type;</code> – Variable names are camel case by convention: <code>unitPrice; unitType;</code></li>
<li><code>boolean groupOffer</code> – It's convention to start <code>boolean</code> variables with <code>is...</code>, <code>has...</code>, <code>can...</code>, <code>must...</code>: <code>boolean isEligibleForGroupOffer</code>. Such you also don't need the comment.</li>
<li><p><code>int unit_price;</code>  <code>int buy,get;</code></p>

<ul>
<li><p>Your amounts are integers only? Really? Not <code>float</code> or <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/math/BigDecimal.html" rel="nofollow noreferrer"><code>BigDecimal</code></a>:</p>

<blockquote>
  <p><strong><a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Currency.html" rel="nofollow noreferrer">Currency</a></strong></p>
  
  <p>It is recommended to use <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/math/BigDecimal.html" rel="nofollow noreferrer">BigDecimal</a> class while dealing with Currency or monetary values as it provides better handling of floating point numbers and their operations.</p>
</blockquote></li>
<li><code>buy</code> and <code>get</code> are verbs that fit better to a method name. Do you mean <code>buyingPrice</code> and <code>sellingPrice</code>?</li>
<li>More than one variable declaration per line is discouraged.</li>
</ul></li>
<li>I'd rename <code>UnitType</code> to <code>SellingUnit</code>and <code>NUMERIC</code> to <code>PIECES</code>.</li>
<li><p>I'd implement the body of your first constructor with just:</p>

<pre><code>this(name, unitPrice, sellingUnit, isEligibleForGroupOffer, 0, 0);
</code></pre></li>
<li><p>And the one of the second with:</p>

<pre><code>this.name = name;
this.unitPrice = unitPrice;
this.sellingUnit = sellingUnit;
this.isEligibleForGroupOffer= isEligibleForGroupOffer;
this.buyingPrice = buyingPrice;
this.sellingPrice = sellingPrice;
</code></pre></li>
<li><p>I'd add a space after the commas in parameter and argument lists for easier reading.</p></li>
<li>I'd change <code>static ... getPrice(...)</code> to a non-static member of <code>Product</code> with then a header of <code>public BigDecimal getPriceFor(float quantity)</code>.</li>
<li>It's convention to separate name and parenthesis in statements like <code>if (...)</code> with a space to easily distinguish them from method invocations.</li>
<li><p>I'd simplify:</p>

<pre><code>float price = product.unit_price * quantity;
//To decrease the price of free items.
if(product.groupOffer) {
  price = (quantity/(product.buy+product.get)) * product.buy * product.unit_price; 
}
return price;
</code></pre>

<p>to:</p>

<pre><code>return isEligibleForGroupOffer  //To decrease the price of free items.
         ? quantity / (buyingPrice + sellingPrice) * buyingPrice * unitPrice
         : unitPrice * quantity;
</code></pre></li>
</ol>
    </div>