<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
                    <div>
            <aside class="s-notice s-notice__info js-post-notice mb16" role="status">
        <div class="grid fd-column fw-nowrap">
            <div class="grid fw-nowrap">
                <div class="grid--cell fl1 lh-lg">
                    <div class="grid--cell fl1 lh-lg">
                        <p>We are looking for answers that provide insightful observations about the code in the question. Answers that consist of independent solutions with no justification do not constitute a code review, and may be removed.</p>
                        
                    </div>
                </div>
            </div>
        </div>
</aside>

    </div>

<ul>
<li>We can create a method to serve dynamically the redundant <code>TouchableOpacity</code> block as below:</li>
</ul>
<pre class="lang-js prettyprint-override"><code>&lt;TouchableOpacity
                        style={{
                            padding: width * 0.05,
                            borderBottomWidth: 1,
                            borderBottomColor: Colors.PRIMARY_OFF_WHITE
                        }}
                        onPress={() =&gt; this.setModal(setModal)}
                    &gt;
                        &lt;Components.BodyText style={{ fontSize: 18 }} text={textContent} /&gt;
                    &lt;/TouchableOpacity&gt;
</code></pre>
<ul>
<li>Destructuring the <code>State</code> and <code>Props</code> using ES6 destructuring.</li>
</ul>
<pre><code>const {visible, modalData, modalType} = this.state;
const {navigation} = this.props;
</code></pre>
<ul>
<li>To keep <code>main</code> render clean we can further extract the <code>IMG</code>, <code>ROW</code> JSX into a method <code>__renderImgNameRow</code></li>
</ul>
<pre class="lang-js prettyprint-override"><code>import React from 'react';
import { StyleSheet, ScrollView, View, Dimensions, Image } from 'react-native';
import * as Colors from '../assets/colors';
import * as Components from '../components';
import { onProfileChange } from '../actions/Profile';
import { TouchableOpacity } from 'react-native-gesture-handler';
import { connect } from 'react-redux';
const { width } = Dimensions.get('window');

class AccountScreen extends React.Component {
    constructor (props) {
        super(props);
        this.state = {
            visible: false,
            modalType: null,
            modalData: ''
        };
        this.listener = props.onProfileChange(this.props.email);
    }
    setModal = (type) =&gt; {
        this.setState({ visible: !this.state.visible, modalType: type, modalData: this.props[type] });
    };
    renderConditionalOptions = () =&gt; {
        if (this.props.role === 'a') {
            return (
                &lt;View&gt;
                    {this.props.activated !== true ? (
                        this.__renderLowerTouchables('activate', 'Activate/De-Activate')
                    ) : null}
                    {this.__renderLowerTouchables('adultRated', 'Change Content Rating')}
                    {this.__renderLowerTouchables('categories', 'Modify Categories')}

                    &lt;TouchableOpacity
                        style={{
                            padding: width * 0.05,
                            borderBottomWidth: 1,
                            borderBottomColor: Colors.PRIMARY_OFF_WHITE
                        }}
                        onPress={() =&gt; this.verificationProcess}
                    &gt;
                        &lt;Components.BodyText style={{ fontSize: 18 }} text={'Get Verified'} /&gt;
                    &lt;/TouchableOpacity&gt;
                &lt;/View&gt;
            );
        }
    };

    __renderLowerTouchables = (setModal, textContent) =&gt; {
        return (
            &lt;TouchableOpacity
                        style={{
                            padding: width * 0.05,
                            borderBottomWidth: 1,
                            borderBottomColor: Colors.PRIMARY_OFF_WHITE
                        }}
                        onPress={() =&gt; this.setModal(setModal)}
                    &gt;
                        &lt;Components.BodyText style={{ fontSize: 18 }} text={textContent} /&gt;
                    &lt;/TouchableOpacity&gt;
        )
    }

    __renderImgNameRow = () =&gt; {
        return (
            &lt;View style={{ justifyContent: 'space-evenly', alignItems: 'center', flexDirection: 'row' }}&gt;
                        &lt;TouchableOpacity
                            onPress={() =&gt; this.setModal('profileImg')}
                            style={{
                                alignItems: 'center',
                                justifyContent: 'center',
                                borderColor: Colors.PRIMARY_GREEN,
                                borderWidth: 5,
                                borderRadius: width * 0.7,
                                backgroundColor: Colors.PRIMARY_OFF_WHITE,
                                width: width * 0.35,
                                height: width * 0.35
                            }}
                        &gt;
                            &lt;Image
                                style={{ borderRadius: width * 0.5, height: width * 0.33, width: width * 0.33 }}
                                source={
                                    this.props.profileImg != '' ? (
                                        { uri: this.props.profileImg }
                                    ) : (
                                        require('../assets/img/white-user.png')
                                    )
                                }
                                resizeMode={'contain'}
                            /&gt;
                        &lt;/TouchableOpacity&gt;

                        &lt;View style={{ alignItems: 'center' }}&gt;
                            &lt;Components.BodyText
                                text={this.props.legalName}
                                style={{
                                    fontSize: 22,
                                    fontWeight: 'bold',
                                    marginTop: width * 0.01
                                }}
                            /&gt;
                            {/* Edit Username  */}
                            &lt;TouchableOpacity
                                onPress={() =&gt; this.setModal('username')}
                                style={{
                                    borderWidth: 1,
                                    borderColor: Colors.PRIMARY_OFF_WHITE,
                                    borderRadius: width,
                                    paddingHorizontal: width * 0.025,
                                    paddingVertical: width * 0.015,
                                    marginTop: width * 0.01
                                }}
                            &gt;
                                &lt;Components.BodyText
                                    text={'@' + this.props.username}
                                    style={{ textAlign: 'center', fontSize: 16 }}
                                /&gt;
                            &lt;/TouchableOpacity&gt;
                        &lt;/View&gt;
                    &lt;/View&gt;
        )
    }

    render () {
        const {visible, modalData, modalType} = this.state;
        const {navigation} = this.props;
        return (
            &lt;ScrollView style={styles.container}&gt;
                {/* HEADER CONTAINER CONTAINER */}
                &lt;View style={styles.headerContainer}&gt;
                    {/* IMG / NAME ROW */}
                    {__renderImgNameRow()}
                &lt;/View&gt;
                {/* LOWER CONTAINER */}
                &lt;View
                    style={style.lowerContainer}
                &gt;
                    {this.__renderLowerTouchables('email', 'Update Email')}
                    {this.__renderLowerTouchables('password', 'Change Password')}
                    {this.__renderLowerTouchables('phoneNumber', 'Update Phone Number')}
                    {/* CONDITIONAL OPTIONS */}
                    {this.renderConditionalOptions()}
                &lt;/View&gt;

                {visible &amp;&amp; (
                    &lt;Components.AccountModal
                        visible={visible}
                        data={modalData}
                        type={modalType}
                        closeModal={this.setModal}
                        navigation={navigation}
                    /&gt;
                )}
            &lt;/ScrollView&gt;
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //justifyContent: 'space-between',
        backgroundColor: Colors.PRIMARY_OFF_WHITE
    },
    headerContainer: {
        borderBottomLeftRadius: 25,
        borderBottomRightRadius: 25,
        width: width,
        backgroundColor: 'white',
        shadowColor: '#333',
        shadowOffset: {
            width: 3,
            height: 3
        },
        shadowOpacity: 0.5,
        shadowRadius: 10,
        elevation: 15,
        paddingVertical: width * 0.05,
        marginBottom: 30
    },
    lowerContainer: {
                        borderTopLeftRadius: 25,
                        borderTopRightRadius: 25,
                        borderBottomLeftRadius: 25,
                        borderBottomRightRadius: 25,
                        backgroundColor: 'white',
                        width: width,
                        marginBottom: width * 0.05
                    }
});

const mapStateToProps = ({ profile }) =&gt; {
    const {
        role,
        activated,
        profileImg,
        legalName,
        username,
        email,
        phoneNumber,
        bio,
        adultRated,
        categories,
        verified
    } = profile;

    return {
        role,
        activated,
        profileImg,
        legalName,
        username,
        email,
        phoneNumber,
        bio,
        adultRated,
        categories,
        verified
    };
};

const mapDispatchToProps = { onProfileChange };

export default connect(mapStateToProps, mapDispatchToProps)(AccountScreen);
</code></pre>
    </div>