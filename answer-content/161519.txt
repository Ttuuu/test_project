<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The only optimization obvious to me is to reduce the number of iterations in the inner loop by the factor of two:</p>

<pre><code>def count_ways_v2(n):
    c = [0] * (n + 1)
    c[0] = 1
    c[1] = 1
    for i in range(2, n + 1):
        sum_w = 0
        for j in xrange(0, i / 2):
            sum_w += 2 * c[j] * c[i - j- 1]
        if i % 2 == 1:
            sum_w += c[i / 2] * c[i / 2] # Handle the case in which i is odd:
        c[i] = sum_w
    return c[n]
</code></pre>

<p>Hope it helps.</p>

<p><strong>Edit</strong></p>

<p><a href="https://codereview.stackexchange.com/users/42401/peilonrayz">@Peilonrayz</a> suggests an improvement: your and mine versions run in quadratic time, yet via <a href="https://oeis.org/A000108" rel="nofollow noreferrer">Catalan numbers</a> you can do it in linear time:</p>

<pre><code>def count_ways_catalan(n):
    a, b = 1, 1
    for k in range(2, n + 1):
        a *= n + k
        b *= k
    return a / b
</code></pre>
    </div>