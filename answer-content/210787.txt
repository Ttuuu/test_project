<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Why one way re-sizing?</strong></p>

<p><code>vector_resize()</code> only allows the vector to grow.</p>

<p><strong><code>vector_insert()</code> growth oddity</strong></p>

<p>Code can grow the vector size indefinitely if done by inserting at the end, yet quietly fails if the insert is far beyond the end.</p>

<p>I'd expect the function to not grow at all or allow an insertion anywhere.</p>

<p><strong>Sort can overflow</strong></p>

<p>In <code>sort()</code>, rather than <code>return a - b</code> (with its UB overflow), use the idiomatic, not overflow possible: <code>return (a &gt; b) - (a &lt; b)</code>.</p>

<p><strong>Avoid C++ keywords</strong></p>

<p>For potential portability as well as clarity, avoid <code>new</code> as an object in C code.</p>

<p>Code <em>looks</em> wrong.</p>

<pre><code>void** new = malloc(sizeof(void*) * size);
</code></pre>

<p><strong>Allocate to the size of the de-referenced object</strong></p>

<p>Avoid size errors.  Do not allocate to the size of the type.  The below is easier to code right, review and maintain.</p>

<pre><code>// void** new = malloc(sizeof(void*) * size);
void** nu = malloc(sizeof *nu * size);
</code></pre>

<p><strong>Allow state</strong></p>

<p>With <code>vector_any()</code> pass in a <em>state</em> argument and return <code>int</code> for additional flexibility.</p>

<pre><code>static int vector_any_alt(vector* v, void *state, int (*func)(state, int, const void*))  {
  for(int i = 0; i &lt; vector_size(v); i++) {
    int retval = func(state, i, v-&gt;data[i]);
    if (retval) {
      return retval;
    }
  }
  return 0;
}
</code></pre>

<p><strong>Minor: <code>int</code> indexing vs. <code>size_t</code></strong></p>

<p>I would have used <code>size_t</code> indexing rather than <code>int</code>, yet I suspect OP's desires <code>int</code>.</p>

<p><strong>Naming</strong></p>

<p>Why call use <code>.max</code> instead of <code>.capacity</code>? or<br>
Why call use <code>vector_capacity()</code> instead of <code>vector_max()</code>.</p>

<p><strong>Use <code>const</code></strong></p>

<p>Various functions like <code>vector_is_empty(vector* v)</code> convey meaning better, allow for expanded use and sometime optimize better with <code>const</code>.</p>

<pre><code>// vector_is_empty(vector* v)
vector_is_empty(const vector* v)
</code></pre>

<p><strong>Use <code>(void)</code></strong></p>

<p>With <code>()</code>, no parameters checking occurs allowing <code>vector_create(1,2,3)</code> to not generate an error.</p>

<pre><code>// static vector* vector_create()
static vector* vector_create(void)
</code></pre>

<p><strong>Why clear to capacity?</strong></p>

<p><code>vector_clear()</code> clears all <code>v-&gt;max</code> rather than <code>v&gt;size</code>.</p>

<p><strong>Why upper case object name?</strong></p>

<p><code>static int VECTOR_DEFAULT_SIZE = 1;</code> will certainly throw off users.  Consider <code>static int vector_default_size = 1;</code></p>
    </div>