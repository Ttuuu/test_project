<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, @Kerndog73 did an execellent review and mostly I will try to address things he didn't.</p>

<p>You mention that perhaps you should have used functions, you are correct. Generally the main program
is used to control the rest of the program. The main program should call functions that parse the
commandline, functions that set up for the rest of the program, functions that perform the main
logic of the program and functions that clean up whatever needs to be cleaned up.</p>

<p><strong>Common Macros</strong><br>
The code already includes stdlib.h. The include file contains two macros that are widely used,
<code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code>. The code might be more readable of these two macros were
used. It is possible that the values of EXIT_SUCCESS and EXIT_FAILURE may change from architecture
to architecture but the macros are defined on every system.</p>

<pre><code>int main(int argc, char *argv[])
{
    int exit_status = EXIT_SUCCESS;

    // validate the command line argument's parameters
    if (argc != 2)
    {
        printf("Please use a single alphabetic command line argument\n");
        return EXIT_FAILURE;
    }
    else if (argc == 2)
    {
        for (int z = 0, n = strlen(argv[1]); z &lt; n; z++)
        {
            if (isalpha(argv[1][z]) == false)
            {
                printf("Please use a single alphabetic command line argument\n");
                return EXIT_FAILURE;
            }
        }
    }

    int exit_status = execute_program_logic(argv[1]);

    return exit_status;
}
</code></pre>

<p><strong>Boolean Values</strong><br>
The original C specification didn't specify a boolean variable type, and conditions returned
integer values. Many programmers defined constants TRUE and FALSE as 1 and 0. There has been
the addition of stdbool.h in later versions of C that defines a boolean type and the values <code>true</code>
and <code>false</code>. It's possible that cs50.h either includes stdbool.h or it defines true and false, but
it would be better if stdbool was explicitly included in the code.</p>

<p><strong>Global Variables</strong><br>
@Kerndog73 is correct that using global variables is a bad programming practice. It is very hard to
correctly write code that uses global variables, and it is even harder to maintain. One may have to
search thousands of lines of code in multiple files to find where a global variable is being changed.
Global variables aren't needed at all when all of the code is in a single function.</p>

<p><strong>Magic Numbers</strong><br>
The code contains the number 26 in two places, this is obviously the number of letters between <code>a</code> and <code>z</code>,
but in many cases that wouldn't be as clear, and it is defintely less readable than ALPHABET_COUNT or
SIZE_ATOZ.</p>

<pre><code>#define SIZE_ATOZ        26
</code></pre>

<p>This number can also be derived by <code>'z' - 'a'</code> which also might be more meaningful.</p>

<p><strong>Use Common Library Functions When Possible</strong><br>
The code contains this line</p>

<pre><code>    char* plaintext = get_string();
</code></pre>

<p>The cs50 header file may define get_string(), however, <a href="https://stackoverflow.com/questions/41554334/implicit-declaration-of-function-get-string">some students may have had problems using it</a>. It
might be better to use the common C I/O <a href="https://www.techonthenet.com/c_language/standard_library_functions/stdio_h/fgets.php" rel="nofollow noreferrer">fgets()</a> or <a href="http://c-for-dummies.com/blog/?p=1112" rel="nofollow noreferrer">getline</a>(), these should be available on all systems.
You can write your own get_string() using either one of these functions.</p>

<p><strong>Initialize Variables on Separate Lines</strong><br>
It is more readable and easier to maintain if variables are initialized on separate lines.
The code contains</p>

<pre><code>        for (int z = 0, n = strlen(argv[1]); z &lt; n; z++)
        {
            if (isalpha(argv[1][z]) == false)
            {
                printf("Please use a single alphabetic command line argument\n");
                return 1;
            }
        }
</code></pre>

<p>If you are going to inialize n here, it would be better to put the initization above the loop. The code
could be simpler by just using strlen in the condition portion:</p>

<pre><code>        for (int z = 0; z &lt; strlen(argv[1]); z++)
        {
            if (isalpha(argv[1][z]) == false)
            {
                printf("Please use a single alphabetic command line argument\n");
                return 1;
            }
        }
</code></pre>

<p><em>Note:</em> My compiler reports a warning because strlen returns unsigned long (size_t)  rather than int.</p>
    </div>