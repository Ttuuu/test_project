<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>General Observations</strong><br>
The game could have more than 2 players, you might want to use a container class to store the players. If this is a single player against the computer, it might be better if <code>enemy</code> was renamed to computer.</p>
<p><strong>Avoid <code>using namespace std;</code></strong><br>
If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>
<p><strong>Magic Numbers - Make the Code as Self Documenting as Possible</strong><br>
There are Magic Numbers in the <code>convertToInt()</code> function (0, 1, 2), it might be better to use an <a href="https://en.cppreference.com/w/cpp/language/enum" rel="noreferrer">ENUM</a> or create symbolic constants for them to make the code more readble and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintenance easier. In this case an ENUM is probably better.</p>
<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>
<p>It is better to have self documenting code using enums or symbolic constants, because it makes the code easier to read and maintain. Using comments is good where necessary, but they need to be maintained as well as the code, so it is better to write self documenting code.</p>
<p>If you use an <a href="https://en.cppreference.com/w/cpp/container/map" rel="noreferrer">std::map&lt;&gt;</a> the function <code>convertToInt()</code> isn't necessary, table look up is generally faster than logic, and easier to maintain or expand:</p>
<pre><code>#include &lt;map&gt;
using objectType = enum {ROCK, PAPER, SCISSORS};
using objectTypeMap = std::map&lt;std::string, objectType &gt;;


objectTypeMap initChoices()
{
    std::map&lt;std::string, objectType &gt; choices;
    choices.insert({"Rock", ROCK});
    choices.insert({"rock", ROCK});
    choices.insert({"Paper", PAPER});
    choices.insert({"Paper", PAPER});
    choices.insert({"Scissors", SCISSORS});
    choices.insert({"scissors", SCISSORS});

    return choices;
}
</code></pre>
<p>In main():</p>
<pre><code>    ...
    string playerChoice {};
    string enemyChoice {};
    objectType playerIChoice {};
    objectTypeMap stringConverter = initChoices();

    ...
        playerIChoice = stringConverter[playerChoice];         //converts valid input into integers to compare with enemy's choice
    ...
</code></pre>
    </div>