<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It depends on your needs, but generally I would say that the second approach would be better.</p>
<p>Why? because it allows you to run multiple tasks and that gives flexibility to your system. Now the use of <code>synchronized</code> may be troublesome if there are many threads running, if you don't need to handle <code>static</code> or shared resources/variables it would be better to not use it.</p>
<p>Now, in the first place your classes has no <code>static</code> variables, and does not access to shared resources so synchronization is not needed. In the case of the class <code>HealthCheck2</code>, the following method will work fine without <code>synchronized</code></p>
<pre class="lang-java prettyprint-override"><code>    private void check() {
        //the variable diff isn't needed either
        if (ChronoUnit.MILLIS.between(lastActiveTime, Instant.now()) &gt; 100)
            onExpire();
    }
</code></pre>
<p>Why? Because the check method is uniquely owned by each <code>HealthCheck2</code> instance, even if they call the <code>start</code> method, the <code>scheduler</code> and the <code>future</code> variables are equally owned.</p>
<p>I think you could remember when you were learning about static <em>variables</em> and <em>methods</em> that these are accessible and modifiable by any class instance. Well, the oposite is true, non-static variables and methods are unique for each instance.</p>
<p>Hope it helped you.</p>
    </div>