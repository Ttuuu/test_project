<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Always check the result of <code>scanf()</code></h1>

<p>This code optimistically assumes that numeric inputs are successfully parsed.  We need to check that the result of <code>scanf()</code> (the number of conversions successfully parsed and assigned) matches our expectations before using any of the values.</p>

<h1>Don't use <code>assert()</code> for testing input validity</h1>

<p>When reading user input, if we wish to check that we have more than 0 tests and more than 0 entries in each test, then <code>assert()</code> is the wrong tool.  Remember that it can be disabled by defining <code>NDEBUG</code>, and it commonly is, for optimized builds.</p>

<p>Consider also using unsigned types for values that can't be negative.</p>

<h1>Always check the result of memory allocation</h1>

<p>Allocation functions such as <code>calloc()</code> can always fail.  Again, <code>assert()</code> is not a robust means to check these.</p>

<h1>Unexpected output in the bagging area</h1>

<p>It looks like these statements were accidentally left in after a debugging session, and should be removed:</p>

<blockquote>
<pre><code>printf("Mid-&gt;%d\n", mid);
</code></pre>
</blockquote>



<blockquote>
<pre><code>printf("N1-&gt;%d\nN2-&gt;%d\n", n1,n2);
</code></pre>
</blockquote>

<h1>No need to compute mid-point at end of recursion</h1>

<p>Here, we only need <code>mid</code> if <code>start&lt;end</code>:</p>

<blockquote>
<pre><code>void mergeSort(int*num,int start,int end)
{
    int mid;
    mid=start+((end-start)/2);
    if(start&lt;end)
    {
        mergeSort(num,start,mid);
        mergeSort(num,(mid+1),end);
        mergeSequence(num,start,mid,end);
    }
}
</code></pre>
</blockquote>

<p>We can re-write it as</p>

<pre><code>void mergeSort(int *num, int start, int end)
{
    if (start &lt; end) {
        const int mid = start + (end-start)/2;
        mergeSort(num, start, mid);
        mergeSort(num, mid+1, end);
        mergeSequence(num, start, mid, end);
    }
    /* else, start==end, and no work to do */
}
</code></pre>
    </div>