<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When using the logger module, you usually want to initialize the logger once per script, at the beginning, and usually with the name of the file (or another descriptive name) as the argument. This way you can distinguish where each logging call comes from (although you have disabled that with your particular choice of formatting string).</p>

<p>Since you are already catching all exceptions, you should probably raise an exception if the connection fails, instead of hoping one is raised when you try to get the JSON object out of the responses.</p>

<p>When you do log exceptions, you are currently printing the exception to the standard output. If you let <code>logging</code> deal with this you could use all functionalities of the module, like outputting to different output streams (<code>stderr</code> usually, for, well, errors). You can either use <code>logger.exception</code> for this or pass the flag <code>exc_info=True</code>. The former uses the logging level <code>logging.ERROR</code>, the latter allows you to use it with any level.</p>

<pre><code>import requests as rq
from datetime import datetime
import logging
import objectpath  # Read the library doc: http://objectpath.org/

logger = logging.getLogger(__name__)

def get_api_data(url):
    try:
        response = rq.get(url)
        response.raise_for_status()
        logger.debug("Getting API data - Done")
        api_data = response.json()
        logger.debug("Converting API data to JSON - Done")
        return api_data
    except Exception as e:
        logger.debug("Exception occurred.", exc_info=True)

def main():
    # CoinDesk API Link
    API_LINK = 'https://api.coindesk.com/v1/bpi/currentprice.json'

    # Getting the data from API
    data = get_api_data(API_LINK)
    tree_data = objectpath.Tree(data)

    time = next(tree_data.execute('$..updated'))
    price = next(tree_data.execute('$..USD'))

    print(f"The price in {price['description']} - USD: {price['rate']}")
    print(f"Time of the price: {time}")


if __name__ == '__main__':
    LOG_FORMAT = '%(levelname)s : %(asctime)s - %(message)s'
    logging.basicConfig(level=logging.DEBUG,
                        format=LOG_FORMAT, filemode='w')
    main()
</code></pre>

<p>I also used <code>next</code> instead of <code>tuple</code> and <code>list</code>, which just gets the next element from the generators (no need to get all if you only need one), which also removed the superfluous <code>()</code> around the time, moved the formatting completely into the string, gave the function a parameter to change the URL from the outside and renamed <code>API_DATA</code> to <code>response</code> (since it is not a global constant).</p>
    </div>