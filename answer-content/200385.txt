<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1) Control flow clarity</h3>

<pre><code>if a and b: ...
elif a and not b: ...
elif not a and b: ...
elif not a and not b: ...
</code></pre>

<p>can be improved to</p>

<pre><code>if a:
    if b: ...
    else: ...
else:
    if b: ...
    else: ...
</code></pre>

<h3>2) Remove unnecessary function calls</h3>

<p><code>' '.join([a, b])</code> can be simplified to <code>a + ' ' + b</code>. In your case, since you're appending <code>b</code>, you can do <code>a += ' ' + b</code>.</p>

<h3>3) Implicit slicing notation</h3>

<p><code>line[0:-2]</code> can be <code>line[:-2]</code>.</p>

<h3>4) Consolidate constants</h3>

<p>The regex string is a constant and is used multiple times. It can be moved to the top as a constant (or even outside the function).</p>

<h3>5) Remove unnecessary comments</h3>

<p>Assume the reader is familiar with built-in functions like <code>str.split()</code>. Thus, <code># remove \n and other spaces</code> is unnecessary.</p>

<h3>6) Readability</h3>

<ul>
<li>Include exactly one space before and after an assignment. e.g <code>line = line.strip()</code>.</li>
<li>No need for <code>if a == True</code> or <code>if a == False</code>. Instead, do <code>if a</code> or <code>if not a</code>.</li>
<li>Remove unnecessary line breaks near the top.</li>
<li>Add spaces after commas in a function's parameters. e.g: <code>f(a, b)</code> instead of <code>f(a,b)</code>.</li>
<li>Pick either <code>camelCase</code> or <code>under_scores</code> for variable names. Don't use both.</li>
</ul>

<h2>Final result:</h2>

<pre><code>def get_tokens(file_paths):
    REGEX = r'(?&lt;!\\\n)^(0[xX][0-9a-fA-F]+)([^\n]*)'

    for path in file_paths:
        rule_capture = False
        with open(path) as f:
            for line in f:
                line = line.strip()
                if line.startswith('#'): # ignore comments
                    continue

                if line.endswith('\\'):
                    if rule_capture:
                        buffer += ' ' + line[:-2]
                    else:
                        buffer = line[:-2]
                        rule_capture = True
                else:
                    if rule_capture:
                        buffer += ' ' + line
                        rule_capture = False
                        event_rule_match = re.search(REGEX, buffer)
                        yield event_rule_match.group(1), event_rule_match.group(2)
                        buffer = ''
                    else:
                        event_rule_match = re.search(REGEX, line)
                        if event_rule_match:
                            yield event_rule_match.group(1), event_rule_match.group(2)
</code></pre>

<p>Notice I didn't change any of the logic, but just moved things around or removed things. See if you can simplify the logic (e.g. removing unnecessary assignments, etc).</p>
    </div>