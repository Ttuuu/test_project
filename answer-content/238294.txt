<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Missing includes</h1>
<p>We need to include <code>&lt;stdio.h&gt;</code> (for <code>printf</code>); this also defines <code>size_t</code> for us (but see next item).</p>
<h1>Don't mix I/O with algorithms</h1>
<p>The code is hard to re-use, because we can't give a different array to sort, or do anything with the result apart from printing.  Prefer an interface like this:</p>
<pre><code>#include &lt;stddef.h&gt;  /* for size_t */

void selection_sort(int *array, size_t len);
</code></pre>
<p>We can use it like this:</p>
<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    int arr[] = { 2, 4, -22, 4, 2, 1 };
    const size_t len = sizeof arr / sizeof *arr;

    selection_sort(arr, len);

    for (size_t i = 0;  i &lt; len;  ++i) {
        printf("%d ", arr[i]);
    }
    puts("");
}
</code></pre>
<h1>Unused variable</h1>
<p>What's the point of <code>minIdx</code>? We never use it after it's initialised.</p>
<h1>Use appropriate types</h1>
<p>We should be using <code>size_t</code> for lengths and indices, rather than <code>int</code>.</p>
<hr>
<h1>Modified code</h1>
<p>Here's what I arrived at after making the improvements above:</p>
<pre><code>#include &lt;stddef.h&gt;

void selection_sort(int *arr, size_t len)
{
    for (size_t i = 0;  i &lt; len;  i++) {
        for (size_t j = i + 1;  j &lt; len;  j++) {
            if (arr[i] &gt; arr[j]) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

#include &lt;stdio.h&gt;
int main(void)
{
    int arr[] = { 2, 4, -22, 4, 2, 1 };
    const size_t len = sizeof arr / sizeof *arr;

    selection_sort(arr, len);

    for (size_t i = 0;  i &lt; len;  ++i) {
        printf("%d ", arr[i]);
    }
    puts("");
}
</code></pre>
    </div>