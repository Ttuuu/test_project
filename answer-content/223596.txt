<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your program is clearly written, and works correctly (to the best of my knowledge). I don't think that the time complexity is <span class="math-container">\$O(n)\$</span> can be improved, because the array must be traversed in order to locate the dangerous thunderheads. Your algorithm already optimizes that by checking only every second element (if that is a safe spot), relying on the fact that a solution is guaranteed.</p>

<p>The program can be improved a bit though. The <code>while location &lt; c.count</code> condition of the main loop will always be true because the loop is always “early left” at</p>

<pre><code>if location &gt;= c.count {
    break
}
</code></pre>

<p>As a consequence, the program computes one location beyond the array bounds which is not needed (and not counted). This can be simplified by using a while-loop instead:</p>

<pre><code>while location &lt; c.count - 1 {
    if (location + 2 &lt; c.count) &amp;&amp;
        (c[location + 2] == 0) {
        location += 2
    } else {
        location += 1
    }
    jump += 1
}
</code></pre>

<p>This is shorter and easier to understand because there is only one terminating condition for the loop instead of two.</p>

<p>A possible improvement <em>might</em> be to run the loop until one of the last <em>two</em> positions it reached, because then the test against the array count is done only once per iteration and not twice:</p>

<pre><code>while location &lt; c.count - 2 {
    if c[location + 2] == 0 {
        location += 2
    } else {
        location += 1
    }
    jump += 1
}
return location == c.count - 1 ? jump : jump + 1
</code></pre>

<p>A further optimization would be to use that if we do a size 1 jump because of a thunderhead, the following jump will always be of size 2:</p>

<pre><code>while location &lt; c.count - 2 {
    if c[location + 2] == 0 {
        // Jump two positions:
        location += 2
        jump += 1
    } else {
        // Jump one position and then two positions:
        location += 3
        jump += 2
    }
}
return location == c.count - 1 ? jump : jump + 1
</code></pre>

<p>But the performance increase will probably be negligible since the arrays have at most 100 elements.</p>

<p>Some minor points: The parentheses in</p>

<pre><code>if (location + 2 &lt; c.count) &amp;&amp;
    (c[location + 2] == 0)
</code></pre>

<p>are not needed because the comparison operators have a higher precedence than the logical operators:</p>

<pre><code>if location + 2 &lt; c.count &amp;&amp; c[location + 2] == 0
</code></pre>

<p>Finally, I would name the counter variable <code>jumps</code> or <code>jumpCount</code> to better describe its purpose.</p>
    </div>