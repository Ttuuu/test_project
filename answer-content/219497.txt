<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code contains a bug. Finding this bug is quite hard because the one test case from the instructions has a remarkable property:</p>

<ul>
<li>the lengths of the bars vary from 3 to 4 (which is 2 numbers in total)</li>
<li>the breadths of the bars vary from 5 to 6 (which is also 2 numbers in total)</li>
</ul>

<p>Your code in <code>makeSetOfChocolatesOutOfTheLimits</code> reads:</p>

<pre><code>for (int i = 0; i &lt; lengthLimits.length; i++) {
    for (int j = 0; j &lt; widthLimits.length; j++) {
        Chocolate rectangle = new Chocolate(lengthLimits[i], widthLimits[j]);
        chocolates.add(rectangle);
    }
}
</code></pre>

<p>You pass the <code>lengthLimits</code> as an array of 2 numbers, which are the min and the max.</p>

<p>In the outer <code>for</code> loop, the variable <code>i</code> will first get the value 0 and then the value 1, and then stop. This is because the <code>lengthLimits</code> contains 2 numbers (min and max). It works in this one test case, but in general it is wrong.</p>

<p>If you passed <code>{1, 5}</code> as the length limits, you would expect that <code>lengthLimits[i]</code> goes from 1 to 5. Instead, it only ever becomes 1 or 5, but never 2, 3, 4.</p>

<p>To fix this, you have to change your code:</p>

<pre><code>for (int i = lengthLimits[0]; i &lt;= lengthLimits[1]; i++) {
    // ...
}
</code></pre>

<p>Making this bug is avoidable. An array, by definition, can be empty, it can contain a single element or two or many. You use it to always store exactly 2 elements. You don't need all this other flexibility. Therefore using an array is bad style. When using an array, it often makes sense to do something with each element in the array. That's something else you don't need here.</p>

<p>Therefore, instead of an array, it makes more sense to use a range of integers, since that matches the wording in the instructions. In Java this is written as <code>IntStream lengthLimits = IntStream.rangeClosed(min, max)</code>. While it looks good at first, it is part of the Java Streams API, which is really hard to use and requires you to write more code than strictly necessary.</p>

<p>Therefore, the best way to loop over all possible lengths is still:</p>

<pre><code>for (int length = minLength; length &lt;= maxLength; length++) {
    // ...
}
</code></pre>

<p>It's the same code as above, just with better names. It's annoying to write the variable <code>length</code> 3 times in this simple loop. Another variant is:</p>

<pre><code>for (int length : IntStream.rangeClosed(minLength, maxLength).toArray()) {
    // ...
}
</code></pre>

<p>It looks really complicated, but at least you cannot make typos in the <code>length</code> variable name anymore.</p>

<hr>

<p>It's also possible to write this code without any objects at all. Since this is a simple numerical problem, this makes sense. For larger tasks and problems it's entirely sensible to define several classes, since otherwise the code gets too complicated to understand.</p>

<p>A possible variant that focuses on structurally simple code is:</p>

<pre><code>import java.util.Objects;

public class Chocolate {

    /**
     * In how many square pieces is a chocolate bar split
     * if each time the largest possible square piece is cut off?
     */
    private static int pieces(int width, int height) {
        int large = Math.max(width, height);
        int small = Math.min(width, height);
        int pieces = 0;
        while (small != 0) {
            pieces += large / small;
            int nextSmall = large % small;
            large = small;
            small = nextSmall;
        }
        return pieces;
    }

    /**
     * Given a box containing all combinations of rectangular chocolate
     * bars in the given size ranges, in how many pieces will they be
     * split?
     */
    private static int pieces(int minWidth, int maxWidth, int minHeight, int maxHeight) {
        int pieces = 0;
        for (int width = minWidth; width &lt;= maxWidth; width++) {
            for (int height = minHeight; height &lt;= maxHeight; height++) {
                pieces += pieces(width, height);
            }
        }
        return pieces;
    }

    // In practice, using a proper unit testing framework is better than this ad-hoc code.
    private static void assertEquals(Object expected, Object actual) {
        if (!Objects.equals(expected, actual)) {
            throw new AssertionError("Expected " + expected + ", got " + actual + ".");
        }
    }

    public static void main(String[] args) {
        assertEquals(4, pieces(5, 3));
        assertEquals(5, pieces(5, 4));
        assertEquals(2, pieces(6, 3));
        assertEquals(3, pieces(6, 4));
        assertEquals(7, pieces(1, 7));
        assertEquals(0, pieces(0, 1000));

        assertEquals(14, pieces(5, 6, 3, 4));
        assertEquals(30, pieces(1, 4, 2, 4)); // your code had returned 9
    }
}
</code></pre>
    </div>