<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off I think your use case is a nifty way of getting into Python, and it looks like aside from the bugs that others have already pointed out you'll likely soon be unstoppable.</p>

<p>However, instead of <em>simplifying</em> the code I'd suggest modularizing as well as making use of <code>__doc__</code> strings. It'll make adding features much easier in the future, and if you so choose, allow for making a full application with <a href="https://kivy.org/" rel="nofollow noreferrer"><em><code>Kivy</code></em></a>, <a href="https://www.blender.org/" rel="nofollow noreferrer"><em><code>Blender</code></em></a>, or one of the other many GUI frameworks for Python development. Plus modularizing or abstraction allows for simplifying the intentions/usage.</p>

<blockquote>
  <p>Some notes before diving-in...</p>
  
  <ul>
  <li><p>it's probably a good idea to get a snack and drink; I'm a <em>bit verbose</em> and am about to compress <em>some years</em> of knowledge</p></li>
  <li><p><em><code>__bar__</code></em> when spoken is <a href="https://www.urbandictionary.com/define.php?term=dunder" rel="nofollow noreferrer"><em>"dunder bar"</em> </a>, and the <em>phylum</em> that they're classified under are <a href="https://rszalski.github.io/magicmethods/" rel="nofollow noreferrer"><em>"magic methods"</em></a></p></li>
  <li><p>what I share is <strong>not</strong> <em>gospel</em> as such, but a collection of tricks I wish someone had shown me when I was getting into Python</p></li>
  </ul>
  
  <p>... okay back on track.</p>
</blockquote>

<p>Here's some example code inspired by yours that shows some of what I was going on about in your question's comments...</p>

<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python

import time
import random


print_separator = "".join(['_' for _ in range(9)])
__author__ = "S0AndS0"

#
# Functions
#

def question(message):
    """ Returns response to `message` from user """
    return input("{message}? ".format(message = message))


#
# Classes
#

class Gone_Fishing(dict):
    """
    Gone_Fishing is a simple simulation inspired by
    [Python - Fishing Simulator](https://codereview.stackexchange.com/q/217357/197446)

    ## Arguments

    - `fishes`, `dict`ionary such as `{'cod': {'amount': 0, 'chances': [1, 2]}}`
    - `min_chance`, `int`eger of min number that `random.randint` may generate
    - `max_chance`, `int`eger of max number that `random.randint` may generate
    """

    def __init__(self, fishes, min_chance = 1, max_chance = 10, **kwargs):
        super(Gone_Fishing, self).__init__(**kwargs)
        self.update(fishes = fishes,
                    chances = {'min': min_chance, 'max': max_chance})

    @staticmethod
    def keep_fishing(message, expected):
        """ Return `bool`ean of if `response` to `message` matches `expected` """
        response = question(message)
        if not response or not isinstance(response, str):
            return False

        return response.lower() == expected

    @property
    def dump_cooler(self):
        """
        Returns `score`, a `dict`ionary similar to `{'cod': 5, 'tire': 2}`,
        after printing and reseting _`amount`s_ caught
        """
        score = {}
        for fish, data in self['fishes'].items():
            if data['amount'] &gt; 0:
                score.update({fish: data['amount']})
                if data['amount'] &gt; 1 and data.get('plural'):
                    fish = data['plural']

                print("{amount} {fish}".format(**{
                    'fish': fish,
                    'amount': data['amount']}))

                data['amount'] = 0

        return score

    def catch(self, chance):
        """ Returns `None` or name of `fish` caught based on `chance` """
        caught = []
        for fish, data in self['fishes'].items():
            if chance in data['chances']:
                caught.append(fish)

        return caught

    def main_loop(self):
        """
        Asks questions, adds to _cooler_ anything caught, and prints score when finished
        """
        first = True
        message = 'Go fishing'
        expected = 'yes'
        while self.keep_fishing(message, expected):
            time.sleep(1)
            if first:
                first = False
                message = "Keep fishing"

            chances = random.randint(self['chances']['min'], self['chances']['max'])
            caught = self.catch(chances)
            if caught:
                for fish in caught:
                    self['fishes'][fish]['amount'] += 1
                    fancy_fish = ' '.join(fish.split('_')).title()
                    print("You caught a {fish}".format(fish = fancy_fish))
            else:
                print("Nothing was caught this time.")

        print("{0}\nThanks for playing".format(print_separator))
        if True in [x['amount'] &gt; 0 for x in self['fishes'].values()]:
            print("You caught")
            self.dump_cooler
        print(print_separator)


if __name__ == '__main__':
    """
    This block of code is not executed during import
    and instead is usually run when a file is executed,
    eg. `python gone_fishing.py`, making it a good
    place for simple unit tests and example usage.
    """
    gone_fishing = Gone_Fishing(
        fishes = {
            'cod': {'amount': 0, 'chances': [1]},
            'salmon': {'amount': 0, 'chances': [5]},
            'shark': {'amount': 0, 'chances': [9, 10], 'plural': 'sharks'},
            'wild_fish': {'amount': 0, 'chances': [7], 'plural': 'wild_fishes'},
            'old_shoe': {'amount': 0, 'chances': [10, 15], 'plural': 'old_shoes'},
            'tire': {'amount': 0, 'chances': [2, 19], 'plural': 'tires'},
        },
        min_chances = 0,
        max_chances = 20,
    )

    gone_fishing.main_loop()
</code></pre>

<p>... okay there's a <em>bit</em> going on up there, so feel free to dissect it's operation by adding <a href="https://stackoverflow.com/a/6980836/2632107"><em><code>breakpoints</code></em></a> or <em><code>print(something)</code></em> lines.</p>

<hr>

<p>Here's what output of running the above script may look like</p>

<pre><code># python gone_fishing.py
Go fishing? 'yes'
You caught a Wild Fish
Keep fishing? 'yes'
Nothing was caught this time.
Keep fishing? 'yes'
You caught a Shark
You caught a Old Shoe
Keep fishing? 'yes'
Nothing was caught this time.
# ... trimmed for brevity
Keep fishing? 'no'
_________
Thanks for playing
You caught
2 sharks
1 tire
2 wild_fishes
1 cod
_________
</code></pre>

<hr>

<p>Taking it from the top <code>print_separator = "".join(['_' for _ in range(9)])</code> is what I like to use when generating strings of repeating characters because it's easy to make something that outputs <code>_-_-_</code> via <code>"-".join(['_' for _ in range(3)])</code>.</p>

<blockquote>
  <p>Note from the future; check the comments of this answer for some swell suggestions from @Izaak van Dongen.</p>
</blockquote>

<hr>

<p>By defining a class that inherits from the built in <code>dict</code>ionary <code>class</code> (that's what the <code>class Gone_Fishing(dict):</code> line did), I'm being a bit lazy as this allows for <em>dumping</em> all saved states via...</p>

<pre class="lang-py prettyprint-override"><code>print(gone_fishing)
# -&gt; {'cod': {'amount': 2, 'chances': [1]}, ...}
</code></pre>

<blockquote>
  <p>... and while I'm on the tangent of getting info back out...</p>
</blockquote>

<pre class="lang-py prettyprint-override"><code>print(gone_fishing.main_loop.__doc__)
# Or
# help(gone_fishing.main_loop)
</code></pre>

<blockquote>
  <p>... will print the previously mentioned <code>__doc__</code> strings.</p>
</blockquote>

<p>... and figuring out where you too can avoid re-inventing the wheel is just something that'll get picked up over time. Personally I choose to view it as <em>expanding one's vocabulary</em>, when I discover some built-in that's been waiting to solve some edge-case.</p>

<hr>

<p>The <code>__init__</code> <code>method</code> <em>absorbs</em> three arguments and re-assigns'em with <code>self.update()</code> so that other methods that use the <code>self</code> argument are able to get and/or modify <code>class</code> saved states; more on that latter.</p>

<blockquote>
  <p>Side note; the <code>__init__</code> method is one of many that are called implicitly by preforming some action with an object, eg. <code>__add__</code> is called implicitly by using <code>+</code> between two <code>Objects</code> with a <code>__add__</code> method (side-side note, I'll get into why that was an <em><code>a</code></em> and not an <em><code>an</code></em> in a bit), which is why the following works with lists...</p>
</blockquote>

<pre class="lang-py prettyprint-override"><code>list_one = [3, 2, 1]
list_two = [0, -1, -2]

list_one + list_two
# -&gt; [3, 2, 1, 0, -1, -2]
</code></pre>

<p>That bit with <code>**kwargs</code> stands for <em><code>key word arguments</code></em> which passes things as a <em>bare</em> <code>dict</code>ionary, the other syntax you may run across is <code>*args</code>, which passes things as a <em>bare</em> <code>list</code> of arguments; there be some <em>fanciness</em> that can be done with this syntax that I'll not get into at this point other than saying that context matters. However, you'll find some examples of passing an unwrapped dictionary, such as to <code>format</code> via <code>print("{amount} {fish}".format(**{...}))</code>, which hint hint, is a great way of passing variable parameter names.</p>

<blockquote>
  <p>This is one of those idiomatic things that you can pick-up with some experimentation (and grokking-out others' code bases); it's super powerful so use it often but be kind to your future self too.</p>
</blockquote>

<p>The bit with <code>super(Gone_Fishing, self).__init__(**kwargs)</code> is what allows the <code>Gone_Fishing</code> <code>class</code> to call <code>dict</code>'s <code>__init__</code> from within it's own <code>__init__</code> <code>method</code>... indeed that was a little convoluted so taking a sec to unpack that...</p>

<pre class="lang-py prettyprint-override"><code>class SomeThing(dict):
    def __init__(self, an_argument = None, **kwargs):
        super(SomeThing, self).__init__(**kwargs)
        self.update({'an_argument': an_argument})
</code></pre>

<p>... it's possible to call <code>self.update()</code> from within <code>SomeThing.___init__</code> without causing confusion of intent, where as to have <code>SomeThing</code> still operate as a <code>dict</code>ionary, eg. assigning <code>something = SomeThing(spam = 'Spam')</code> without causing errors, one should use <code>super(SomeThing, self).__init__(**kwargs)</code> to allow Python to preform it's voodoo with figuring out which inheriting <code>class</code>'ll take responsibility for those arguments.</p>

<blockquote>
  <p>That does mean that one could do <code>class SomeThing(dict, Iterator)</code>, and have that mean something but I'll not get into that here; kinda already covered that specifically on <a href="https://math.stackexchange.com/users/657433/s0ands0"><em>math stack</em></a> in regards to graph modeling and prioritization.</p>
</blockquote>

<hr>

<p>The <code>@staticmethod</code> and other <a href="https://www.geeksforgeeks.org/decorators-in-python/" rel="nofollow noreferrer"><em><code>decorators</code></em></a> are ways of denoting a special use <code>method</code>. In the case of <code>property</code>s they operate <em>similarly</em> to <code>Object</code> properties, eg...</p>

<pre class="lang-py prettyprint-override"><code>class Test_Obj:
    pass

o = Test_Obj()
o.foo = 'Foo'

print(o.foo)
# -&gt; Foo
</code></pre>

<p>... but can only be <em>gotten</em> not <em>set</em>, which makes'em a great place to stash dynamic or semiprivate properties about an <code>Object</code>.</p>

<p>In the case of <code>staticmethod</code>s, they're not passed a reference to <code>self</code> so cannot easily access or modify saved states, but they can be more easily used without initializing so operate similarly to regular functions, eg...</p>

<pre class="lang-py prettyprint-override"><code>responses = []

responses.append(question("Where to"))
print("I heard -&gt; {response}".format(response = responses[-1]))
for _ in range(7):
    responses.append(question("... are you sure"))
    print("I heard -&gt; {response}".format(response = responses[-1]))

print("Okay... though...")
</code></pre>

<blockquote>
  <p>Note also the various <code>.format()</code> usages are to show ways of <em>future prepping</em> (for perhaps using <code>f strings</code> in the future), as well as making strings somewhat more explicit.</p>
</blockquote>

<p>Generally I use'em to make the intended usage more explicit but that's not to say that you couldn't get lost in the amount of options available just for decorating a <code>method</code>.</p>

<blockquote>
  <p>Note from the future; as pointed out by @Maarten Fabré I indeed slipped in some superfluous use of the <code>staticmethod</code> decorator, good catch there, and this'll now serve as an example of <em>getting carried away</em> when <code>decorat</code>ing.</p>
  
  <p>Generally I use <code>staticmethod</code>s when I've a class that isn't concerned with it's internal state but isn't large enough to warrant it's own file, very edge case kinda thing, and usually it means that I should probably split'em out into a file that organizes similar functions. Hopefully recent edits now look closer to <em>proper</em> for future readers.</p>
</blockquote>

<hr>

<p>That bit within the <code>main_loop</code> <code>method</code> with <code>while self.keep_fishing(message, expected)</code>, when unwrapped I think you'll really like, it's returning <code>True</code> or <code>False</code> at the <em>top</em> of every iteration based on asking the user a question and comparing their response with what's expected.</p>

<p>And the bit with <code>if True in [x['amount'] &gt; 0 for x in self['fishes'].values()]</code> is something that <em>masks</em> data using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><em><code>list comprehensions</code></em></a>, I'll advise against getting too <em>fancy</em> with'em, and instead try to utilize'em whenever it doesn't make code less readable. Also don't get to attached to such cleverness because <a href="http://www.numpy.org/" rel="nofollow noreferrer"><em><code>numpy</code></em></a>, <a href="https://pandas.pydata.org/" rel="nofollow noreferrer"><em><code>pandas</code></em></a>, or one of the many other libraries, will preform similar tasks far faster.</p>

<hr>

<p>The things happening bellow the <code>if __name__ == '__main__':</code>, aside from the <em>doc string</em> ...</p>

<blockquote>
  <p>Side note for those new to Python; sure you could call'em <em>"dunder docs"</em> and those <em>in the know</em> would know what you where saying, but they'd also likely <em>smize</em> at ya too, and saying <em>"dundar doc string"</em> if timed when a listener is drinking could have messy consequences... so "pro-tip", callem <em>"doc strings"</em> to be <em><code>super</code> <code>class</code>y</em> when talking about Python code ;-)</p>
</blockquote>

<pre class="lang-py prettyprint-override"><code>gone_fishing = Gone_Fishing(fishes = {
    'cod': {'amount': 0, 'chances': [1]},
    'salmon': {'amount': 0, 'chances': [2]},
    'shark': {'amount': 0, 'chances': [3], 'plural': 'sharks'},
    'wild_fish': {'amount': 0, 'chances': [4], 'plural': 'wild_fishes'},
    'old_shoe': {'amount': 0, 'chances': [5, 6], 'plural': 'old_shoes'},
    'tire': {'amount': 0, 'chances': [7, 8], 'plural': 'tires'},
})
</code></pre>

<p>... and how the above is parsed could take <em>some words</em> to do a full <em>stack trace</em>, but the gist is that <code>chances</code> is a <code>list</code> that you could even have overlapping integers, eg. a <code>shark</code> who had an <code>old_shoe</code> inside could be...</p>

<pre class="lang-py prettyprint-override"><code>gone_fishing['fishes']['shark']['chances'].append(5)
</code></pre>

<p>... though without adjustments to other values that would make for a very large shoal of soul hungry sharks.</p>

<blockquote>
  <p>Note from the future; I've made adjustments to the code to enable overlapping values and returning of more than one result; there probably be <em>better</em> ways of doing it but this is also an example of iterative development now.</p>
</blockquote>

<hr>

<p>When you've figured out how <code>plural</code> is an optional key value pair within a nested dictionary you'll start seeing similar things in other code (at least it's one of those things I've not been unable to unsee), try not to get messy with that trick though, otherwise I think it's self-explanatory as to the intentions of it's usage.</p>

<hr>

<p>The arguments that I didn't assign, <code>min_chance</code> and <code>max_chance</code>, much like the <code>chances</code> with <code>sharks</code> could be updated similarly, eg...</p>

<pre class="lang-py prettyprint-override"><code>gone_fishing['chances']['max'] = 20
</code></pre>

<p>... though initializing a new trip would look like...</p>

<pre class="lang-py prettyprint-override"><code>another_fishing_trip = Gone_Fishing(
    fishes = {
        'cod': {'amount': 0, 'chances': [1]},
        'salmon': {'amount': 0, 'chances': [5]},
        'shark': {'amount': 0, 'chances': [9, 10], 'plural': 'sharks'},
        'wild_fish': {'amount': 0, 'chances': [7], 'plural': 'wild_fishes'},
        'old_shoe': {'amount': 0, 'chances': [10, 15], 'plural': 'old_shoes'},
        'tire': {'amount': 0, 'chances': [2, 19], 'plural': 'tires'},
    },
    min_chances = 0,
    max_chances = 20,
)
</code></pre>

<p>... which serves as an example of something you'd be wise to avoid doing to your own code, swapping words especially isn't going to win any points from a <em>future self</em> or other developers.</p>

<hr>

<p>There's certainly more room for improvement, eg. having <em><code>gone_fishing['fishes'][fish_name]['amount']</code></em> subtracted from, while adding to <em><code>gone_fishing['cooler']</code></em> or similar structure; just for a start. But this was all just to expose quick-n-dirty methods of organizing the problem space with Object Oriented Programing.</p>

<p>Hopefully having code with a bit more abstraction shows ya that going with something that looks a bit more complex can allow for simplifying the usage and future <a href="https://en.wikipedia.org/wiki/Feature_creep" rel="nofollow noreferrer"><em><code>feature creep</code></em></a>. Please keep us posted if ya make something more out of your learning project.</p>
    </div>