<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorry you didn't get the position, but perhaps the interviewers/code reviewers were looking for something else or some very specific things.</p>
<p>You cannot, in fact, use <code>useSelector</code> or <code>useDispatch</code>, nor any other react hook as they are only compatible with functional components. Other than that this appears to be clean and readable code, although it does have some redundancy.</p>
<h3>Suggestions</h3>
<ol>
<li>The constructor doesn't actually do anything, so it can be removed</li>
<li>All the class functions simply proxy props that are passed, so they, too, can be removed</li>
<li>This <em>is</em> debatable, but IMO you should explicitly map the actions to props that you will use, it makes it clearer what the component can do</li>
<li>The connect HOC's second parameter <code>mapDispatchToProps</code> automagically wraps each actionCreator with a call to dispatch as well</li>
<li>It appears <code>this.props.expenses</code> object shape is identical to the props <code>ExpenseTable</code> takes, so you can spread those in, more DRY</li>
</ol>
<h3>Nit-picky Suggestions</h3>
<ol>
<li>Try to be as precise/explicit when defining proptypes</li>
<li>Consistently use semi-colons</li>
<li>In react only Components are PascalCased, most other variables and objects should be normal camelCased</li>
<li>Destructure props to be more DRY, i.e. much less <code>this.props.X</code>, <code>this.props.Y</code>, <code>this.props.Z</code>. This one is debatable however as the argument against is that not destructuring them it is easy to see what is a prop versus state versus neither. I say you can just look to the top of the function where variables should normally be defined anyway to glean these details.</li>
</ol>
<p>Component</p>
<pre><code>import React, { Component } from 'react';
import { connect } from 'react-redux';
import { PropTypes } from 'prop-types';
import ExpenseTable from '../components/ExpenseTable';
import {
    CancelEditing,
    CreateExpense,
    DeleteExpense,
    StartEditing,
    UpdateExpense,
} from '../actions/ExpenseActions';

export class ExpenseContainer extends Component {
    render() {
        const {
            CancelEditing,
            CreateExpense,
            DeleteExpense,
            expenses,
            StartEditing,
            UpdateExpense,
        } = this.props;

        return (
            &lt;div className="expense-container"&gt;
                &lt;ExpenseTable
                    {...expenses}
                    createExpense={CreateExpense}
                    startEditing={StartEditing}
                    cancelEditing={CancelEditing}
                    editExpense={UpdateExpense}
                    deleteExpense={DeleteExpense}
                /&gt;
            &lt;/div&gt;
        );
    }
}

ExpenseContainer.propTypes = {
    CancelEditing: PropTypes.func.isRequired,
    CreateExpense: PropTypes.func.isRequired,
    DeleteExpense: PropTypes.func.isRequired,
    StartEditing: PropTypes.func.isRequired,
    UpdateExpense: PropTypes.func.isRequired,
    expenses: PropTypes.shape({
      expenses: PropTypes.string.isRequired, // or number or whatever the specific type is
      subTotal: PropTypes.string.isRequired,
      total: PropTypes.string.isRequired,
    }).isRequired
};

function mapStateToProps(state) {
    return {
        expenses: state.expenses
    }
};

const mapDispatchToProps = {
    CancelEditing,
    CreateExpense,
    DeleteExpense,
    StartEditing,
    UpdateExpense,
};

export default connect(mapStateToProps, mapDispatchToProps)(ExpenseContainer);
</code></pre>
<p>A final suggestion would be to just convert <code>ExpenseContainer</code> to a functional component since it doesn't use <em>any</em> of the class-based lifecycle functions.</p>
<pre><code>export const ExpenseContainer = ({
    CancelEditing,
    CreateExpense,
    DeleteExpense,
    expenses,
    StartEditing,
    UpdateExpense,
}) =&gt; (
    &lt;div className="expense-container"&gt;
        &lt;ExpenseTable
            {...expenses}
            createExpense={CreateExpense}
            startEditing={StartEditing}
            cancelEditing={CancelEditing}
            editExpense={UpdateExpense}
            deleteExpense = {DeleteExpense}
        /&gt;
    &lt;/div&gt;
);

ExpenseContainer.propTypes = { ... };

function mapStateToProps(state) { ... };

const mapDispatchToProps = { ... };

export default connect(mapStateToProps, mapDispatchToProps)(ExpenseContainer);
</code></pre>
    </div>