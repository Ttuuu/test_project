<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your SQL query is never going to be efficient because it has wildcard at the start, and is not Sargable (<code>LIKE N'%015558'</code>).</p>

<p>Assuming your database allows it, what you should do in this scenario is to create a <code>PERSISTED</code> computed SQL column which is set to <code>REVERSE(IdentificationNo)</code>, and create an index on that column.</p>

<p>Combine this with the advice from @RobH, and make your query something similar.</p>

<pre><code>WHERE [ReversedIdentificationNo] LIKE + splitItem.Reverse() + '%'
</code></pre>

<p>This way, your query will use an index seek (instead of an index scan) and potentially be magnitudes faster.</p>

<p>EDIT: 
With a variable number of <code>IdentificationNo</code> that you intend of searching, you run into a cache pollution issue. For every distinct number of parameters, your SQL engine will <em>not</em> be able to reuse an existing query cache plan. This is very common issue when dynamically generating SQL statements (especially without SQL paramters). </p>

<p>To avoid this, you could use a temp table / table type.</p>

<p><code>CREATE TYPE Ids AS TABLE ( ID varchar(128) PRIMARY KEY )</code></p>

<p>Then, instead of constructing a bunch of <code>OR</code> statements, you just insert all your <code>splitItem</code> into this temp table. Finally, your query looks something like the following.</p>

<pre><code>WHERE EXISTS (
    SELECT 1 
    FROM @Ids
    WHERE [ReversedIdentificationNo] LIKE [Id] + '%'
)
</code></pre>
    </div>