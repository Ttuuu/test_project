<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The easiest way to implement Timsort in Python is of course to use the built-in version:</p>

<pre><code>def timsort(x):
    return sorted(x)
</code></pre>

<p>Since you don't learn anything from that, implementing it yourself is of course nice.</p>

<p>First, some general comments.</p>

<ul>
<li>Python has an official style-guide, PEP8. It recommends using <code>lower_case</code> for variables and functions. It also recommends using empty lines sparingly.</li>
<li>You don't need to pass the length to the algorithm. Every indexable Python object has a length, so just use <code>len(unsorted)</code>.</li>
<li>Your type hints say that this function can only take lists of integers. It works perfectly fine with lists of any comparable type, just like the built-in <code>sorted</code>.</li>
<li>Choosing to modify the input list in-place is perfectly fine for lists (after all, <code>list.sort</code> does the same thing). But if you do that, it should be noted in the <code>docstring</code>. You could, however, also choose to conform closer to <code>sorted</code> and first copy the iterable into a list (simply copying if it already is a list), sorting it in-place and returning it. This would change the signature to <code>tim_sort(x: Iterable[Any]) -&gt; List[Any]</code>.</li>
<li>The built-in sorting functions all take a <code>key</code> argument, which is called once per argument. This results in effectively sorting <code>[(key(element), element) for element in x]</code> and afterwards returning only the second element from each inner tuple.</li>
</ul>

<p>Now, let's take a closer look at your actual code.</p>

<p>You use <code>while</code> loops quite a lot. While (pun intended) they almost always work, they are not always the most efficient (in readability) way to accomplish your goal. In the <code>merge</code> function you can replace the last two <code>while</code> loops with list slice assignments. I would also simplify the setting of <code>left_side</code> and <code>right_side</code> by using <code>left</code>, <code>middle</code> and <code>right</code> instead of <code>left</code>, <code>middle</code>, <code>len1</code> and <code>len2</code>.</p>

<pre><code>def merge(unsorted: List[int], left: int, middle: int, right: int) -&gt; None:
    """ Merges two sorted arrays """
    len1 = middle - left + 1
    len2 = right - middle
    left_side  = iter(unsorted[left:middle + 1])
    right_side = iter(unsorted[middle + 1:right + 1])

    i = j = 0
    k = left
    while i &lt; len1 and j &lt; len2:
        if left_side[i] &lt;= right_side[j]:
            unsorted[k] = left_side[i]
            i += 1
        else:
            unsorted[k] = right_side[j]
            j += 1
        k += 1

    unsorted[k:] = left_side[i:]
    unsorted[k + len1 - i:] = right_side[j:]
</code></pre>

<p>Instead of slices, you can also create a new list and use <code>extend</code>:</p>

<pre><code>def merge(unsorted: List[int], left: int, middle: int, right: int) -&gt; None:
    """ Merges two sorted arrays """
    len1 = middle - left + 1
    len2 = right - middle
    left_side  = iter(unsorted[left:middle + 1])
    right_side = iter(unsorted[middle + 1:right + 1])

    i = j = 0
    k = left
    out = []
    while i &lt; len1 and j &lt; len2:
        if left_side[i] &lt;= right_side[j]:
            out.append(left_side[i])
            i += 1
        else:
            out.append(right_side[j])
            j += 1
        k += 1
    out.extend(left_side[i:]
    out.extend(right_side[j:]
    unsorted[:] = out
</code></pre>

<p>The first <code>while</code> loop could also use iterators instead of indices, but that is left as an exercise for now.</p>
    </div>