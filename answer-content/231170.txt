<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>some minore issues only...</p>

<h2>naming / return type</h2>

<p><code>public static Path getLatestFile()</code> assumes that you return only <strong>ONE</strong> file, but it's easily possible that you have two files of the same date... so you should maybe return a <code>Set&lt;Path&gt;</code> from your method <code>getLatestFiles()</code>. This method would return <strong>all</strong> files with the latest time stamp.</p>

<h2>use a logging framework</h2>

<p>you should write infos into a proper logging stream:</p>

<pre><code>System.out.println("Latest file: " + pathToReturn + " - " + attr.creationTime().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
</code></pre>

<h2>note:</h2>

<p>you could write the corresponding information <strong>directly</strong> inside the loop.  </p>

<pre><code>for (Path path : pathSet) {
        attr = getBasicFileAttributes(path);
        if (attr.creationTime().toMillis() &gt; fileTime) {
        fileTime = attr.creationTime().toMillis();
            pathToReturn = path;
            //here
            System.out.println("Latest file: " + pathToReturn + " - " + attr.creationTime().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        }
    }

    //instead of here:
    //attr = getBasicFileAttributes(pathToReturn);
    //System.out.println("Latest file: " + pathToReturn + " - " + attr.creationTime().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
</code></pre>

<h2>more significant code (tell, don't ask):</h2>

<p>maybe it's just my style but i would really directly return what is said:</p>

<pre><code>private static BasicFileAttributes getBasicFileAttributes(Path pathToReturn) throws IOException {
    return Files.readAttributes(pathToReturn, BasicFileAttributes.class);
}
</code></pre>

<h2>use a test case</h2>

<p>instead of testing your code in a main-methode write a junit test. that makes the code clearer to read and you can get rid of the methods <code>getFilesFromDirectory()</code> and <code>iteratePaths()</code> which are only for testing.</p>

<p>ever since the test methods are still in review let me advise you about these:</p>

<h2>possible NPE</h2>

<p>it's possible to create a <code>NullPointerException</code>:</p>

<pre><code>Stream&lt;Path&gt; stream = null;
try {...} catch (IOException e) {...}
//if an exception is raised within this block above an NPE will be thrown!
stream.close();
</code></pre>

<p>maybe you could consider a try-with-resources block? maybe you don't care because it's a mere test method, haha =)</p>

<h2>use a Logger / Handle Exceptions</h2>

<p>what do you do if an exception really happens? you should implement the actions that should happen in case of exception - not just printing to stacktrace:</p>

<pre><code>Stream&lt;Path&gt; stream = null;
    try {...} catch (IOException e) {
        //don't print - take actions instead!
        //e.printStackTrace();
    }
</code></pre>

<p>as said above, maybe you don't care because it's a mere test method...</p>
    </div>