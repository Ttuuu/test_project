<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks extremely nice and well-structured to me. It exhibits modern C++ coding idioms. You also include references to the standard in your code. All of these are greatly appreciated.</p>

<p>Here are some suggestions:</p>

<ol>
<li><p>I like sorting <code>#include</code>s according to alphabetical order. Like this:</p>

<pre><code>#include &lt;condition_variable&gt;
#include &lt;functional&gt; //bind
#include &lt;future&gt; //packaged_task
#include &lt;mutex&gt;
#include &lt;queue&gt;
#include &lt;thread&gt;
#include &lt;type_traits&gt; //invoke_result
#include &lt;vector&gt;
</code></pre></li>
<li><p>You do not put you class in a namespace. I would suggest doing so.</p></li>
<li><p>The constructor of <code>std::thread</code> passes the Callable object by rvalue reference. Why not keep consistent with it?</p></li>
<li><p>Instead of saying</p>

<pre><code>//F must be Callable, and invoking F with ...Args must be well-formed.
</code></pre>

<p>in a comment, why not express your intent with code?</p>

<pre><code>template &lt;typename F, typename... Args,
    std::enable_if_t&lt;std::is_invocable_v&lt;F&amp;&amp;, Args&amp;&amp;...&gt;, int&gt; = 0&gt;
auto execute(F&amp;&amp;, Args&amp;&amp;...);
</code></pre></li>
<li><p>You precede all of your private types and data members with an underscore. This is probably a styling issue, but it is not really necessary since private members can't introduce name clash anyway.</p></li>
<li><p><code>std::unique_ptr&lt;_task_container_base&gt;</code> is repeated several types. Consider introducing a name for it. Furthermore, your <code>allocate_task_container</code> function repeats the return type. Instead of</p>

<pre><code>return std::unique_ptr&lt;_task_container_base&gt;(
    new _task_container&lt;_Func&gt;(std::forward&lt;_Func&gt;(f))
);
</code></pre>

<p>You can just use</p>

<pre><code>return new _task_container&lt;_Func&gt;(std::forward&lt;_Func&gt;(f));
</code></pre></li>
</ol>
    </div>