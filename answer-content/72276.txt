<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a number of issues with your implementation:</p>

<ol>
<li><p>Use <code>Comparator&lt;Dto&gt;</code>, not <code>Comparator&lt;Object&gt;</code>. Then there is no reason for check for instanceof. And the compiler will prevent you from trying to sort a collection of any other type of object.</p></li>
<li><p>Relational operators don't work for strings (which <code>getName()</code> obviously returns).</p></li>
<li><p>Null checking is needed.</p></li>
</ol>

<p>Following is an implementation that might actually work:</p>

<pre><code>public class MyComparator implements Comparator&lt;Dto&gt; {
    @Override
    public int compare(final Dto address1, final Dto address2) {
        if (address1 == null &amp;&amp; address2 == null) {
            return 0;
        }
        if (address1 == null &amp;&amp; address2 != null) {
            return -1;
        }
        if (address1 != null &amp;&amp; address2 == null) {
            return 1;
        }

        // here we know that both address1 and address2 are not null
        int result = 0;
        final String name1 = address1.getName();
        final String name2 = address2.getName();

        if (name1 == null &amp;&amp; name2 == null) {
            result = 0;
        } else if (name1 == null &amp;&amp; name2 != null) {
            result = -1;
        } else if (name1 != null &amp;&amp; name2 == null) {
            result = 1;
        }
        else {
            result = name1.compareTo(name2);
        }

        //if the Names are the same then compare the Number
        if (result == 0) {
            if (address1.Number() &lt; address2.Number()) {
                result = -1;
            } else if (address1.Number() &gt; address2.Number()) {
                result = 1;
            } else {
                result = 0;
            }
        }

        //if the Numbers are the same then compare the Other Field
        if (result == 0) {
            if (address1.Other() &lt; address2.Other()) {
                result = -1;
            } else if (address1.Other() &gt; address2.Other()) {
                result = 1;
            } else {
                result = 0;
            }
        }

        return result;
}
</code></pre>

<p>This assumes that <code>Number()</code> and <code>Other()</code> return some sort of base type (e.g., <code>int</code>).</p>

<p>Another possibility, if you have control over the <code>Dto</code> class, is to have <code>Dto</code> implement <code>Comparator&lt;Dto&gt;</code>, then put the compare method in that class. Then you can simply do</p>

<pre><code>Collections.sort(out);
</code></pre>

<p>assuming out is a collection of <code>Dto</code> objects.</p>
    </div>