<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's a good attempt, it reads easily and I like that you nested the <code>FizzBuzz</code> check within <code>Fizz</code> branch. </p>

<p>This doesn't look like most of the code you see in the wild, though, so a good exercise would be to extract a function for the FizzBuzz logic that is independent from the loop over numbers.</p>

<pre><code>def get_fizzbuzz(num:int) -&gt; str:
    result = ""
    # fizzbuzz logic
    if num % 3 == 0:
        if num % 5 == 0:
            result = "FizzBuzz"
        # ...
    return result
</code></pre>

<p>You could even make it more flexible by optionally allowing different numbers to be entered instead of 3 and 5, while still using 3 and 5 as default values, like so:</p>

<pre><code> def get_fizzbuzz(num:int, fizz:int = 3, buzz:int = 5) -&gt; str:
    result = ""
    # fizzbuzz logic
    if num % fizz == 0:
        if num % buzz == 0:
            result = "FizzBuzz"
        # ...
    return result   
</code></pre>

<p>Then you can just call the function in a loop using the default values:</p>

<pre><code>for num in range(1, 101):
    print(get_fizzbuzz(num))
</code></pre>

<p>Or alternatively with different values for <code>fizz</code> and <code>buzz</code>:</p>

<pre><code>for num in range(1, 101):
    print(get_fizzbuzz(num, 5, 7))
</code></pre>

<p>That will help you make your code more modular.</p>

<p>Note that I used Python 3's <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> in the function definition, which are completely optional but can make the code more clear, as well as provide <a href="https://code.tutsplus.com/tutorials/python-3-type-hints-and-static-analysis--cms-25731" rel="nofollow noreferrer">static code analysis</a> with certain tools. </p>
    </div>