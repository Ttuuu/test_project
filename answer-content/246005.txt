<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Can you make a generic implementation that handles any order?</h1>
<p>You are handling each of the supported orders completely separately. That's not very generic, and then you might wonder if it is a good idea to make the order a template argument in the first place. But there is a structure to how you calculate an n'th order derivative. So try to write generic code that handles any given order, or at least so that there are only two versions, one for odd and one for even orders.</p>
<p>In particular, this would then also get rid of all the magic constants that you have in the code right now, as it would force you to write an expression to derive those constants.</p>
<h1>Guarding against compiler optimizations</h1>
<p>You already mentioned that <code>-ffast-math</code> will optimize away the following:</p>
<pre><code>Real temp = x + h;
h = temp - x;
</code></pre>
<p>But what you actually want to ensure is that <code>x + h != x</code>. But that also might be optimized away. So how about checking that <code>x + h &gt;= nextafter(x, std::numeric_limits&lt;Real&gt;::max)</code>? And you can avoid an <code>if</code>-statement by writing:</p>
<pre><code>h = std::max(x + h, std::nextafter(x, std::numeric_limit&lt;Real&gt;::max)) - x;
</code></pre>
<h1>Fractions</h1>
<p>I'm not sure what good <code>std::boost::constants::half&lt;Real&gt;</code> and related constants bring here, when it obviously is limited in the number of fractions that are pre-defined, and that you have to fall back to writing fractions the normal way for anyway. Try to be consistent, and since you can't be consistent using <code>std::boost::constants</code>, I would not use it at all. Instead of writing <code>(Real)1 / (Real)/5</code>, I would write <code>Real(1) / 5</code>.</p>
<p>Also, just divide <code>Real</code> values by two by writing <code>/ 2</code> instead of <code>* half&lt;Real&gt;()</code>, the latter is very hard to read and brings no benefit.</p>
<h1>Add links in the comments to the formulas used</h1>
<p>Someone else reading your code would probably like to know why you used those formulas. Link to some stable source online (Wikipedia, StackOverflow), or reference related papers or books.</p>
<h1>Is the choice of <code>h</code> good for all functions?</h1>
<p>I can think of some situations where the derivation function doesn't work well. In particular, if <code>x</code> is much larger than 1, then <code>h</code> will be chosen such that the first order derivative is <code>(f(x) - f(std::nextafter(x, ...))) / h</code>. So the smallest possible difference in the argument of <code>f()</code> is used. But what if my function <code>f(x)</code> is of the form <code>a + b * x</code>, where 0 &lt; <code>b</code> &lt; 1? Then the derivative will be 0. The same might happen if <code>a</code> is much larger than <code>x</code>.
In these case, you would have gotten a much better estimate if you chose a larger value for <code>h</code>.</p>
<p>Of course, you can never tell by just taking a few samples of <code>f()</code> around <code>x</code> what the appropriate value of <code>h</code> is. So maybe GSL is right in just asking the caller for a step size. But if you want to use the smallest possible value of <code>h</code>, then there are consequences to what functions it will work well on, and you should include some remarks in the documentation about the limitations of your approach. You could of course also accept an optional extra parameter that is a multiplier for <code>h</code>, and which defaults to <code>1</code>.</p>
    </div>