<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Step 1 in this type of scenario is to identify the actors and behaviors in the description. We are not making a stock exchange which monitors companies values with relation to their itemized finances every nanosecond, we are <em>only</em> making <em>exactly</em> what is being described.</p>

<p><strong>Write a program the feeds in prices</strong>. Actors? Behaviors? Prices being fed somewhere is a behavior, so no actors yet. Unfortunately, the word "program" isn't clarified with the type of program, so let's call this a register program, and that is where the prices will be fed in to.</p>

<p><strong>If the item is a Book, Food or Medical product there is no tax, if not there is a 10% tax (other item).</strong> Actors? Behaviors? There are four actors here, Book, Food, Medical, Other. They each have a tax behavior. They are all products. We previously know that we are also dealing with prices from these actors.</p>

<p><strong>If the item is an import there is a 5% tax (it's possible to have an import and "other item" type of item with 15% tax (10 + 5)).</strong> Actors? Behaviors? There is the behavior of an import for a product. This is a modification of an already existing actor.</p>

<p><strong>The program needs to print receipts</strong> Actors? Behaviors? This goes back to not having a name for a program, so I will assume program is my Register class again. Print is an action and receipt shows a format with a name attached.</p>

<p>This is the end of parsing the requirements. So far we have the requirement of a register class, a class for each product type, a base class to share the behaviors, and an enum for tax modification. The register class should be able to calculate the prices and print. Let's break this out a little.</p>

<p>The enum for taxes and the base product class</p>

<pre><code>public enum TaxModificationPercent
{
    Import  = 5
}

public abstract class Product
{
    public decimal Price { get; protected set; }
    public string Name { get; protected set; }
    protected decimal _Tax = 0;
    public virtual decimal Tax 
    { 
        get { return _Tax; } 
        protected set { _Tax = value; }
    }

    public Product(string Name, decimal Price)
    {
        this.Name = Name;
        this.Price = Price;
    }

    public Product(string Name, decimal Price, TaxModificationPercent taxMod) 
        : this(Name,Price)
    {
        this.Tax += (decimal)taxMod/100;
    }
}
</code></pre>

<p>The set of product classes</p>

<pre><code>public class Book : Product
{
    public Book(string Name, decimal Price) : base(Name, Price){}
    public Book(string Name, decimal Price,TaxModificationPercent taxMod) 
        : base (Name, Price, taxMod){}
}

public class Food : Product
{
    public Food(string Name, decimal Price) : base(Name, Price){}
    public Food(string Name, decimal Price,TaxModificationPercent taxMod) 
        : base (Name, Price, taxMod){}
}

public class Medical : Product
{
    public Medical(string Name, decimal Price) : base(Name, Price){}
    public Medical(string Name, decimal Price,TaxModificationPercent taxMod) 
        : base (Name, Price, taxMod){}
}

public class Other : Product
{
    private decimal _tax = 0.1M;
    public override decimal Tax 
    { 
        get { return _tax; } 
        protected set { _tax = value; }
    }

    public Other(string Name, decimal Price) : base(Name, Price){}

    public Other(string Name, decimal Price,TaxModificationPercent taxMod) 
        : base (Name, Price, taxMod){}
}
</code></pre>

<p>And the register class which will hold the products and print receipts</p>

<pre><code>public class Register
{
    private List&lt;Product&gt; products = new List&lt;Product&gt;();

    public void Feed(Product product)
    {
        this.products.Add(product);
    }

    public void Print()
    {
        decimal total = 0;
        foreach(var nameGroup in this.products.GroupBy( p =&gt; p.Name ))
        {
            decimal item = nameGroup.Sum( p =&gt; p.Price );
            total += item;
            StringBuilder lineItem = new StringBuilder();
            lineItem
                .Append(nameGroup.Key)
                .Append(": " )
                .Append(string.Format("{0:C}",item));
            if( nameGroup.Count() &gt; 1 ) 
                lineItem.Append(" (")
                    .Append(nameGroup.Count())
                    .Append(" @ ")
                    .Append(string.Format("{0:C}",nameGroup.First().Price))
                    .Append(")");
            Console.WriteLine(lineItem.ToString());
        }
        decimal tax = this.products.Sum( p =&gt; p.Price*p.Tax );
        Console.WriteLine("Sales Taxes: " + string.Format("{0:C}",tax));
        Console.WriteLine("Total: " + string.Format("{0:C}",total));
    }
}
</code></pre>

<p>Finally, the use for this would be to simply add new instances of these items</p>

<pre><code>var register = new Register();

register.Feed(new Book("Robinson Crusoe",4.56M));
register.Feed(new Book("Robinson Crusoe",4.56M));
register.Feed(new Food("Imported dog food",6.52M,TaxModificationPercent.Import));//Was uncertain if this was Food or Other
register.Feed(new Other("Perfume",6.23M));

register.Print();
</code></pre>

<p>Here is a demo: <a href="https://dotnetfiddle.net/gCTYOt" rel="nofollow noreferrer">https://dotnetfiddle.net/gCTYOt</a><br>
<a href="https://codereview.stackexchange.com/a/90002/11718">back to top</a></p>
    </div>