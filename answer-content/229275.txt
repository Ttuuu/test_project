<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, note how you're duplicating calculations:</p>

<pre><code>print(num//2)
num = num //2
</code></pre>

<p>This may not cause issues with this specific code, but it isn't a good practice. You're doing twice as much work as you need to, which can cause performance issues once you start writing more complicated code. Do the calculation once, and save the result. In this case though, all you need to do is reverse those lines and use <code>num</code>:</p>

<pre><code>num = num // 2
print(num)
</code></pre>

<p>Also, make sure you have proper spacing <a href="https://www.python.org/dev/peps/pep-0008/#other-recommendations" rel="noreferrer">around operators, and be consistent</a>.</p>

<hr>

<p>Your <code>if</code> and <code>elif</code> cases are exclusive of each other, and your <code>else</code> should never happen. If the first condition is true, then other must be false and vice-versa. There's no need for the second check. Once rewritten, you'll see that printing in every case isn't necessary. You can just print after:</p>

<pre><code>while num &gt; 1:
    if num % 2 == 0:
        num = num // 2

    else:
        num = 3 * num + 1

    print(num)
</code></pre>

<p>Since you're just reassinging <code>num</code> one of two options based on a condition, a conditional expression can be used here cleanly as well:</p>

<pre><code>while num &gt; 1:
    num = (num // 2) if num % 2 == 0 else (3 * num + 1)
    print(num)
</code></pre>

<p>The braces aren't necessary, but I think they're useful here due to the number of operators involved.</p>

<hr>

<hr>

<p>Printing the numbers isn't ideal here. In most code, you need to be able to <em>use</em> the data that you produce. If you wanted to analyze the produced sequence, you would have to do something intercept the stdout, which is expensive and overly complicated. Make it a function that accumulates and returns a list. In the following examples, I also added some <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">type hints</a> to make it clearer what the type of the data is:</p>

<pre><code>from typing import List

def collatz(starting_num: int) -&gt; List[int]:
    nums = [starting_num]

    num = starting_num
    while num &gt; 1:
        num = (num // 2) if num % 2 == 0 else (3 * num + 1)
        nums.append(num)

    return nums
</code></pre>

<p>Or, a much cleaner approach is to make it a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="noreferrer">generator that yields the numbers</a>:</p>

<pre><code># Calling this function returns a generator that produces ints
# Ignore the two Nones, as they aren't needed for this kind of generator
def collatz_gen(starting_num: int) -&gt; Generator[int, None, None]:
    yield starting_num

    num = starting_num
    while num &gt; 1:
        num = (num // 2) if num % 2 == 0 else (3 * num + 1)
        yield num

&gt;&gt;&gt; list(collatz_gen(5))
[5, 16, 8, 4, 2, 1]
</code></pre>

<hr>

<hr>

<p>There's a few notable things about <code>getNum</code>:</p>

<p><a href="https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles" rel="noreferrer">Python uses "snake_case"</a>, not "camelCase".</p>

<hr>

<p>Your use of <code>global num</code> here is unnecessary and confusing. Just like before, explicitly <code>return</code> any data that the function produces:</p>

<pre><code>def get_num() -&gt; int:
    raw_num = input("&gt; ")

    try:
        return int(raw_num)

    except ValueError:
        print('Please enter a number')
        return get_num()
</code></pre>

<p>Note how instead of reassigning a global <code>num</code>, we're just returning the number. I also spaced things out a bit, and used some more appropriate names. Conceptually, I'd say that <code>num = input("&gt; ")</code> is wrong. At the time that that runs, <code>num</code> does <em>not</em> contain a number (it contains a string).</p>

<hr>

<p>This isn't a good use of recursion. It <em>likely</em> won't cause you any problems, but if your user is really dumb and enters wrong data ~1000 times, your program will crash. Just use a loop:</p>

<pre><code>def get_num() -&gt; int:
    while True:
        raw_num = input("&gt; ")

        try:
            return int(raw_num)

        except ValueError:
            print('Please enter a number')
</code></pre>

<p>In languages like Python, be careful using recursion in cases where you have no guarantees about how many times the function will recurse.</p>

<hr>

<p>I'd also probably name this something closer to <code>ask_for_num</code>. "get" doesn't make it very clear about where the data is coming from.</p>

<hr>

<hr>

<p>Taken altogether, you'll end up with:</p>

<pre><code>from typing import Generator

def collatz_gen(starting_num: int) -&gt; Generator[int, None, None]:
    yield starting_num

    num = starting_num
    while num &gt; 1:
        num = (num // 2) if num % 2 == 0 else (3 * num + 1)
        yield num

def ask_for_num() -&gt; int:
    while True:
        raw_num = input("&gt; ")

        try:
            return int(raw_num)

        except ValueError:
            print('Please enter a number')
</code></pre>

<p>Which can be used like:</p>

<pre><code>num = ask_for_num()

for n in collatz_gen(num):
    print(n)
</code></pre>
    </div>