<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a very interesting idea! I have to say your implementation is definitely different from how I would have tackled that.</p>

<p>There are two main axes of improvement that I see:</p>

<h2>1: Why Pointers?</h2>

<p>I don't think you should be treating this as a pointer, but as an object wrapper instead. There is no reason to not be able to apply this to a stack-based object.</p>

<p>If someone wants pointer-like functionality, nothing is stopping them from creating a <code>std::unique_ptr&lt;ProtectedObject&lt;T&gt;&gt;</code> or <code>std::shared_ptr&lt;ProtectedObject&lt;T&gt;&gt;</code></p>

<h2>2: RAII, please!</h2>

<p>If the unprotect -&gt; reprotect flow really should be handled through RAII. Think <code>std::mutex</code> and <code>std::unique_lock</code> as references.</p>

<p>The idea with this is to make it impossible to accidentally leave an object unprotected because of an early <code>return</code> or thrown exception. </p>

<hr>

<p>A few notes on the code itself while I'm at it:</p>

<h2>Duck typing or type erasure, choose one.</h2>

<p>When taking a duck-typed operation as template parameter, creating a polymorphic base class is just redundant, and extra weight. Eventually, you want to use concepts instead, but for now, documentation is enough.</p>

<h2>Spelling:</h2>

<p>it's Primitive, not Primative.</p>

<h2>Broken code:</h2>

<p>Your copy constructor won't compile: <code>swap()</code> requires non-const operands.</p>

<h2>Do not encrypt in <code>swap</code></h2>

<p><code>swap</code> should leave the objects in swapped state. Forcefully encrypting the objects will just lead to surprises. </p>

<p>At worse, throw an exception if one of them is currently unencrypted, but don't surprise users like that.</p>

<h2>Why is <code>overwriteOnExit</code> even an option?</h2>

<p>You zero the data whenever you encrypt, so I fail to see a scenario where you would ever want that set to false.</p>

<p>If anything, should you move to RAII semantics, it should actually be illegal to destroy the object when it is in an unencrypted state,</p>

<h3>followup feedback:</h3>

<blockquote>
  <p>Thanks for the input! First, the reason I'm implementing this as a pointer class is because for my use cases, I need to protect dynamically allocated data. Wrapping the class around the <code>unique_ptr</code> makes this easy.</p>
</blockquote>

<p>This kinda violates the separation of concerns principle. Have a class/function do 1 thing and do it well is generally preferable.</p>

<blockquote>
  <p>I'm a little confused on what you're saying about choosing between duck-typing and type erasure. I'm pretty new to programming, and while I did some research, I'm not really sure what you mean, you think I should get rid of the polymorphic base Serializer? </p>
</blockquote>

<p>Basically, virtual functions (type erasure) are only needed when you need to access an instance through a pointer to the base. Since you are instantiating the subclass, and accessing the methods through it directly, you don't need the virtual interface. You can simply use the object as if it had the interface (duck typing).</p>

<blockquote>
  <p>Data is automatically unencrypted whenever the user requests it, so I don't see how encrypting in <code>swap</code> is an issue. I'm just making sure when copying or moving, the other <code>ProtectedPtr</code> that may never be used again is safely encrypted.</p>
</blockquote>

<p>The thing with this is that <code>swap(a, b)</code> has the implicit contract that <code>b</code> will be in the same state <code>a</code> was, and vice-versa. Doing otherwise can lead to surprises, and surprises are never good.</p>
    </div>