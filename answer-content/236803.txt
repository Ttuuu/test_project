<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer: I have never worked with <code>multiprocessing</code>, so I can't comment on that implementation.</p>

<hr>

<h1>Handling Files</h1>

<p>I noticed at the top of the file you open a file, but never close it. (For the argument that an anonymous file is closed right after the statement is executed, see <a href="https://stackoverflow.com/a/38660881/8968906">this</a> post). Leaving files open is <a href="https://stackoverflow.com/a/25070939/8968906">not a good idea</a>. You should always close your files; leaving files open can slow down your program. I'd change that line to the code below:</p>

<pre><code>with open('Subsets/unique_ids_final.txt') as file:
    uid = list(line.strip() for line in file.readlines())
</code></pre>

<p>While it is more typing, <code>with</code> automatically closes the file after the inner code is run.</p>

<h1>List Comprehension</h1>

<p>A couple of you <code>for</code> loops can be reduced to one line statements. You can create a list directly with a <code>for</code> loop. Take a look:</p>

<pre><code>tlines = [line for line in lines if line.split('*')[30] in id_pct1]
</code></pre>

<p>Same with <code>jobs</code>:</p>

<pre><code>jobs = [
    pool.apply_async(worker, (chunk_start, chunk_size, q))
    for chunk_start, chunk_size in chunkify('myfile.txt')
]
</code></pre>

<h1>One line <code>if</code> statements</h1>

<p>This </p>

<pre><code>if m == 'kill': break
</code></pre>

<p>should be this</p>

<pre><code>if m == 'kill':
    break
</code></pre>

<p>Even though it's one line, <em>one word</em>, you should still indent.</p>

<h1>Docstrings</h1>

<p>You should include docstrings when you write functions, methods, and classes. They are used to provide more description. Take a look:</p>

<pre><code>def worker(chunk_start, chunk_size, q) -&gt; List[str]:
    """
    Read original file and write 1% sample using multiprocessing

    :param &lt;type&gt; chunk_start: &lt;description&gt;
    :param &lt;type&gt; chunk_size: &lt;description&gt;
    :param &lt;type&gt; q: &lt;description&gt;

    :return: List[str]
    """
</code></pre>

<p>I had trouble following your code and understanding what variables were what types. Essentially, when labeling parameters in your docstrings, the format I used goes as follows:</p>

<pre><code>:param &lt;type of parameter&gt; &lt;name of parameter&gt;: &lt;description about parameter&gt;
</code></pre>

<p>And returns are as follows:</p>

<pre><code>:return: &lt;type to return&gt;
</code></pre>

<p>If you want docbuilders, consider using <a href="https://www.sphinx-doc.org/en/master/" rel="nofollow noreferrer"><code>sphinx</code></a>.</p>

<h1>Type Hints</h1>

<p>These help portray what types are accepted and returned by a function/method. Take a look:</p>

<pre><code>def add(x: int, y: int) -&gt; int:
    return x + y
</code></pre>

<p>While this is a very straightforward example, the idea is still there.</p>

<h1>Variable/Parameter Names</h1>

<p>These should be in <code>snake_case</code>, not <code>mixedCase</code>.</p>

<pre><code>chunkStart -&gt; chunk_start
chunkSize -&gt; chunk_size
</code></pre>
    </div>