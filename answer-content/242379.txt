<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider the polymorphic function:</p>

<pre><code>axis :: [a] -&gt; Axis a
axis [x,y,z] = Axis x y z
</code></pre>

<p>You want to apply this at each of the four "list levels" of the output <code>[[[[a]]]]</code> of <code>nestList</code>.  So, if you have:</p>

<pre><code>lst4 : [[[[Char]]]]
lst4 = nestList "295743861431865927876192543387459216612387495549216738763534189928671354154938672"
</code></pre>

<p>you want to write:</p>

<pre><code>axis lst4 :: Axis [[[Char]]]
</code></pre>

<p>to replace the outermost list with an <code>Axis</code>, then you want to <code>fmap axis</code> over the <code>Axis</code>:</p>

<pre><code>fmap axis . axis $ lst4 :: Axis (Axis [[Char]])
</code></pre>

<p>to replace the second-level list with an <code>Axis</code>, then you want to do a double-<code>fmap (fmap axis)</code>:</p>

<pre><code>fmap (fmap axis) . fmap axis . axis $ lst4 :: Axis (Axis (Axis [Char]))
</code></pre>

<p>to replace the third-level list, and finally the innermost list:</p>

<pre><code>fmap (fmap (fmap axis)) . fmap (fmap axis) . fmap axis . axis $ lst4 :: Axis (Axis (Axis (Axis Char)))
</code></pre>

<p>So, you actually have:</p>

<pre><code>axify :: [[[[a]]]] -&gt; Board a
axify = fmap (fmap (fmap axis)) . fmap (fmap axis) . fmap axis . axis
</code></pre>

<p>Alternatively, instead of using the functor instance for <code>Axis</code>, you could use the functor instance for lists, starting from the inside out:</p>

<pre><code>axify = axis . map axis . map (map axis) . map (map (map axis))
</code></pre>
    </div>