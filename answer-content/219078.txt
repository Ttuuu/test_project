<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yet another possibility is to use a <code>namedtuple</code> to hold the coins.</p>

<pre><code>from collections import namedtuple

class Currency(namedtuple("Currency", "gold silver copper")):

    def __new__(cls, copper):
        gold, copper = divmod(copper, 10000)
        silver, copper = divmod(copper, 100)
        return super().__new__(cls, gold, silver, copper)

    def __str__(self):
        return "{} gold, {} silver, {} copper".format(*self)

c = Currency(1234567)

print(c)
</code></pre>

<p>Here, Iâ€™ve hard-coded the conversion, but this could easily be adapted to variable exchange rate between gold, silver and copper coins, similar to other answers.</p>

<p>The benefit of the named tuple is the individual coin counts are accessible:</p>

<pre><code>print(c.gold, c.silver, c.copper)
</code></pre>

<p>Since we now have a class for the <code>Currency</code> object, it would be possible to add basic arithmetic operators, so operations can be concisely expressed, if desired.</p>
    </div>