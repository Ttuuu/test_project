<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    long target_number = 600851475143;
</code></pre>

<p>Others commented on the truncation issue here. Just to expand on how you should choose integral types.</p>

<ol>
<li>Use an unsigned integer type if you need

<ol>
<li>Two's-complement arithmetic or </li>
<li>bit pattern representation</li>
</ol></li>
<li>Use the smallest signed fixed-size integer type from <code>&lt;cstdint&gt;</code> that will suffice if you are

<ol>
<li>Storing a lot of integers in a data structure or </li>
<li>Trying to represent a value you wouldn't want to count yourself</li>
</ol></li>
<li>Inherit types from data structures to avoid mixing signed and unsigned types (<code>std::size_t</code>, <code>std::vector&lt;T, A&gt;::size_type</code>, etc).</li>
<li>Use <code>int</code>.</li>
</ol>

<p>In this case, you've got a really large number you probably would never want to count, so use the smallest signed fixed integer type that can represent it.</p>

<pre><code>    std::int64_t target_number = 600851475143;
</code></pre>

<hr>

<pre><code>    int current_prime = get_prime_above(1);
    while (target_number &gt; 1) {
</code></pre>

<p>Minimize the scope of your variables.</p>

<pre><code>    for (int current_prime = 2; target_number &gt; 1; ) {
</code></pre>

<hr>

<pre><code>    std::sort(primes.begin(), primes.end());
    std::reverse(primes.begin(), primes.end());
    // access primes[0]
</code></pre>

<p>You wrote a slower version of <code>std::max_element</code>. Do you even need to keep a container of all prime factors? Would a single element representing the maximum prime factor be sufficient?</p>

<hr>

<pre><code>    long target_number = 600851475143;

    std::vector&lt;int&gt; primes;
    int current_prime = get_prime_above(1);
    while (target_number &gt; 1) {
        long result = target_number % (long) current_prime;
        if (result != 0) {
            current_prime = get_prime_above(current_prime);
            continue;
        }

        primes.push_back(current_prime);
        target_number = (long) target_number / (long) current_prime;
        current_prime = get_prime_above(1);
    }
</code></pre>

<p>Looking at your algorithm, you end up duplicating a lot of work because of the reset on <code>current_prime</code>. Consider a target number of 125. You check all values until you find a divisible prime, in this case 2, 3, 4, and 5. You then reduce the target and throw away the work you did. So you check 2, 3, 4, and 5 again, reduce, then trash the work. And again for a third time. This ends up being quite wasteful. The fundamental theorem of arithmetic says that every integer greater than <span class="math-container">\$1\$</span> either is a prime or can be represented as the product of prime numbers and it's representation is unique.</p>

<p><span class="math-container">$$
1200 = 2^4 \times 75 = 2^4 \times 3^1 \times 25 = 2^4 \times 3^1 \times 5^2
$$</span></p>

<p>In the above example, the remaining target will never be divisible by 2 once all factors of 2 are exhausted. You don't need to check it again. The same is true for 3, 4, and 5.  Logically, instead of primality testing values, you can shortcut that and just do the divisibility test.</p>

<pre><code>    std::int64_t target_number = 600851475143;
    std::int64_t largest_factor = 0;

    for (std::int64_t candidate = 2; candidate * candidate &lt;= target_number; /* */ ) {
        if (target_number % candidate != 0) {
            ++candidate;
            continue;
        }

        target_number = target_number / candidate;
        largest_factor = candidate;
    }

    if (target_number &gt; largest_factor) {
        largest_factor = target_number;
    }

    std::cout &lt;&lt; "Largest prime: " &lt;&lt; largest_factor &lt;&lt; '\n';
</code></pre>

<p>You can, of course, speed this up further using wheels to skip unnecessary division checks. The simplest is skipping all evens.</p>
    </div>