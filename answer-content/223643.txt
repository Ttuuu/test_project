<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of suggestions and comments that may help you improve your code.</p>

<h2>Update your compiler</h2>

<p>If you are actually limited to C++03, you're foregoing well over a decade's worth of compiler and language advancement that would have made this code much simpler and probably faster.  For instance all of the <code>pthread</code> business could probably be much more elegantly handled using <a href="https://en.cppreference.com/w/cpp/thread/async" rel="nofollow noreferrer"><code>std::async</code></a> and you'd be able to use references for efficiency and clarity.  Without that, your path will be much harder and the code much less elegant and less robust than it should be.</p>

<h2>Create and use a 3D point type</h2>

<p>There are many instances in which 3 dimensional points are being used, but calculations for each is written out individually.  Instead, I'd suggest that the code would be shorter, simpler and easier to read, understand and maintain if it used a <code>Point3D</code> class.  </p>

<h2>Think carefully about performance</h2>

<p>The <code>checkPairValid</code> function is likely to be a performance bottleneck because of its use of floating point operations <code>pow</code> and <code>sqrt</code>.  First consider these lines:</p>

<pre><code>// Determine distance squared between alpha and beta
// (x2-x1)^2 + (y2-y1)^2 +(z2-z1)^2
pathDist = sqrt(pow((betaCoords[0] - alphaCoords[0]), 2)
            + pow((betaCoords[1] - alphaCoords[1]), 2)
            + pow((betaCoords[2] - alphaCoords[2]), 2));
</code></pre>

<p>The comment and the code don't match.  In this case, I'd make them match by omitting <code>sqrt</code> (which should actually be <code>std::sqrt</code>).  I'd also suggest that multiplication is likely to be faster than invoking <code>pow</code> (which should be <code>std::pow</code>).  I'd use a templated 3D point class (as mentioned above) and define a function like this:</p>

<pre><code>T squaredDist(const Point3D&lt;T&gt;&amp; other) const {
    T dx = loc[0] - other.loc[0];
    T dy = loc[1] - other.loc[1];
    T dz = loc[2] - other.loc[2];
    return dx * dx + dy * dy + dz * dz;
}
</code></pre>

<p>Then you can compare with a squared threshold instead of the existing <code>distThreshold</code> for speed.</p>

<p>We also have these three lines:</p>

<pre><code>ray.dir[0] = (betaCoords[0] - alphaCoords[0]) / pathDist;
ray.dir[1] = (betaCoords[1] - alphaCoords[1]) / pathDist;
ray.dir[2] = (betaCoords[2] - alphaCoords[2]) / pathDist;
</code></pre>

<p>If this is indeed intended to be a direction vector as the name suggests, it is probably not necessary to divide by the <code>pathDist</code> since it's the same direction either way. That would also save some calculation.  In short, here's how I'd rewrite that function:</p>

<pre><code>/**
 * @brief checkPairValid - Checks if a pair of points form a valid path
 * @param alpha - An alpha point
 * @param beta - A beta point
 * @param distThreshold - The square of the max distance apart the 
 * point's centers can be 
 * @param shoot - Function that returns false if there is a path
 * @return Whether the pair forms a valid path
 */
bool checkPairValid(const Point3D&lt;double&gt; &amp;alpha,
                    const Point3D&lt;double&gt; &amp;beta,
                    const double squaredDistThreshold,
                    bool (*shoot)(nanort::Ray&lt;double&gt;)
                    )
{
  double squaredPathDist = alpha.squaredDist(beta);
  if(squaredPathDist &lt; squaredDistThreshold)
  {
    // Set up a nanort::Ray's origin, direction, and max distance
    nanort::Ray&lt;double&gt; ray(alpha, beta-alpha, std::sqrt(squaredPathDist));

    // Call passed shoot function to check for a path
    return !shoot(ray);
  }
  // The distance is too far between alpha and beta
  return false;
}
</code></pre>

<p>This is not only easier to read than the original but also no longer has any reliance on global variables.</p>
    </div>