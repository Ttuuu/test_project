<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This kind of test boils down the the familiarity of built-in JavaScript APIs. The naive way to go about this problem is to scan through the string and do the checks manually. However...</p>

<p>Pass a function as second argument of <code>string.replace()</code> and it will call that function for each match it encounters. The return value of this function becomes the replacement. So instead of manually scanning the string, you can let <code>string.replace()</code> do that heavy-lifting. Note that passing a string as first argument to replace only makes it run <em>once</em>, which is why the first argument is a RegExp with a <code>g</code> flag constructed from the string you want replaced.</p>

<p>Also, a minor suggestion. Instead of comparing the first letter with its upper case version to see if it is upper case, you can use <code>regex.test()</code> to see if a character matches a pattern that only matches uppercase. It's a bit shorter, if length is what you're after.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function myReplace(str, before, after) {
  return str.replace(new RegExp(before, 'g'), match =&gt; {
    return (/[A-Z]/).test(before[0]) ? `${after[0].toUpperCase()}${after.slice(1)}` : after
  })
}

console.log(myReplace("Let us go to the store", "store", "mall"))
console.log(myReplace("He is Sleeping on the couch", "Sleeping", "sitting"))
console.log(myReplace("This has a spellngi error", "spellngi", "spelling"))
console.log(myReplace("His name is Tom", "Tom", "john"))
console.log(myReplace("Let us get back to more Coding", "Coding", "algorithms"))
console.log(myReplace("foo foo foo foo bar foo", "foo", "baz"))</code></pre>
</div>
</div>

    </div>