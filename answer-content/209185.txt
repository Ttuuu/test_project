<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Your question</h2>

<blockquote>
  <p>I want to know if the way i did is correct, and if there's a safer way to do this</p>
</blockquote>

<p>You need to ask how secure <code>$_SESSION['email']</code> is. Could that value be updated, perhaps by a user profile update page?</p>

<p>Would it be simpler to use an attribute that would perhaps be stored in a relational table, to allow multiple users to be denoted as an admin? </p>

<h2>Other review points</h2>

<ul>
<li><p><strong>Use consistent indentation for the sake of readability</strong> maybe it was consistent before pasting in here but the block below has inconsistent indentation:</p>

<blockquote>
<pre><code>if( $_SESSION['logged_in'] != 1 || $_SESSION['email'] != 'admin17598@outlook.com'){
$_SESSION['message'] = "Algo deu errado :/";
header("location: ../error.php");
exit;

}else {
 $username = $_SESSION['username'];
} 
</code></pre>
</blockquote>

<p>Be consistent with the indentation - generally 4 (or sometimes 2) spaces are a convention.</p>

<pre><code>if( $_SESSION['logged_in'] != 1 || $_SESSION['email'] != 'admin17598@outlook.com'){
    $_SESSION['message'] = "Algo deu errado :/";
    header("location: ../error.php");
    exit;

}else {
    $username = $_SESSION['username'];
} 
</code></pre></li>
<li><p><strong>Store values in constants</strong> That way they can be updated in one spot instead of each spot they occur.</p>

<pre><code>const ADMIN_EMAIL_ADDRESS = 'admin17598@outlook.com';
</code></pre>

<p>Then that constant name can be used instead of the value, e.g.:</p>

<pre><code>if($_SESSION['email'] == ADMIN_EMAIL_ADDRESS){ 
</code></pre></li>
<li><p><strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself (A.K.A. <strong>D.R.Y.</strong>). I see the following lines in login.php    </p>

<pre><code>$ckeckEmail = $conn-&gt;prepare("SELECT * FROM users WHERE `email` = :email");
$ckeckEmail-&gt;bindValue(':email', $email);
$ckeckEmail-&gt;execute();
</code></pre>

<p>And similarly in register.php:</p>

<pre><code>$result = $conn-&gt;prepare("SELECT * FROM users WHERE `email` = :email");
$result-&gt;bindParam(':email', $email);
$result-&gt;execute();
</code></pre>

<p>Bearing in mind that the variable names are different, the rest of the code is identical. Those lines could be abstracted out into a function that could be called in both places.</p></li>
<li><p><strong>use <code>SELECT count(*)</code> instead of <code>SELECT *</code> for a count</strong> in profile.php, those queries select all rows, but all you use them for is the count. if there are thousands of relevant rows, those queries could be returning a lot of wasted data.</p></li>
<li><strong>empty <code>try/catch</code></strong> - I know <a href="https://codereview.stackexchange.com/users/101565/your-common-sense">@Your Common Sense</a> already mentioned this in <a href="https://codereview.stackexchange.com/a/208335/120114">the answer to your previous question</a> but there is still an empty <code>catch</code> in login.php. What should happen when an exception is caught? Should an error message be displayed (and page execution stopped)? This is important to consider, especially if there is a PDO exception like database server offline, credentials changed, database name changed, etc. Read more about this in <a href="https://codereview.stackexchange.com/a/209223/120114">the answer I just added</a>.</li>
</ul>
    </div>