<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(Disclamer: I only know Kotlin theoretically)</p>

<p>You can avoid the second <code>try</code>/<code>catch</code> by using <code>String.toIntOrNull</code> instead of <code>String.toInt</code>.</p>

<p>And by extracting the <code>LocalDateTime</code> conversion into a separate function, that also returns <code>null</code> when it fails (which also would help fulfill the single responsibility principle), you could then use a functional approach with the <a href="https://kotlinlang.org/docs/reference/null-safety.html#safe-calls" rel="nofollow noreferrer">safe call operator (<code>?.</code>)</a>, the <a href="https://kotlinlang.org/docs/reference/null-safety.html#elvis-operator" rel="nofollow noreferrer">Elvis operator (<code>?:</code>)</a> and the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/run.html" rel="nofollow noreferrer"><code>run</code> extension method</a>:</p>

<pre><code>enum class RangeValueType {
    INT,
    DATE,
    STRING
}

fun parseLocalDateTime(value: String): LocalDateTime? {
    try {
        return LocalDateTime.parse(value)
    } catch (dtpe: DateTimeParseException) {
        return null;
    }
}

fun parseValue(value: String): Pair&lt;RangeValueType, Any&gt; {
    return parseLocalDateTime(value)?.run { Pair(RangeValueType.DATE, this) } ?:
             value.toIntOrNull()?.run { Pair(RangeValueType.INT, this) } ?: 
             value.run { Pair(RangeValueType.STRING, this) } 
}
</code></pre>

<p><a href="https://pl.kotl.in/zS84_1uVa" rel="nofollow noreferrer">Runable version</a> </p>

<p>(NB: enum constants should be written all capitalized so they are not confused with types.)</p>
    </div>