<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are still a couple of rouge non-PEP8-compliant variable names: <code>serviceAll</code> and <code>hostsAll</code>.</p>

<p>This is a minor detail, but to avoid too much nesting I would suggest inverting this condition <code>if response.status_code == 200:</code>. Then you can write it like this:</p>

<pre><code>if response.status_code != 200:
    continue # or raise an exception

html = BeautifulSoup(response.text, "html.parser")
</code></pre>

<p>IMO, such code is much easier to read. These kind of checks are also called guards (<a href="https://en.wikipedia.org/wiki/Guard_(computer_science)" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Guard_(computer_science)</a>).</p>

<p>Instead of iterating through all the <code>td</code> tags, I would store them in a list and then extract the necessary elements with an index:</p>

<pre><code>td_elements = list(html.select('td'))
hosts_all = td_elements[3].text.split('\n')
service_all = td_elements[12].text.split('\n')
</code></pre>

<p>Next, I would like to focus on the <code>print_stats</code> function. It takes way to many parameters and has become tough to work with. I suggest storing all variables you extract from the HTML in a dictionary, which you can then pass to the <code>print_stats</code> function.</p>

<pre><code>extracted_information = {
    'hosts_up': hosts_all[12],
    'hosts_down': hosts_all[13],
    'hosts_unreachable': hosts_all[14],
    'hosts_pending': hosts_all[15],
    'hosts_problems': hosts_all[24],
    'hosts_types': hosts_all[25],
    'service_ok': service_all[13],
    'service_warning': service_all[14],
    'service_unknown': service_all[15],
    'service_critical': service_all[16],
    'service_problems': service_all[26],
    'service_types': service_all[27],
}
</code></pre>

<p>Then you would call the <code>print_stats</code> function like this: <code>print_stats(user, url, extracted_information)</code>.</p>

<p>Of course, we now have to rewrite the print_stats function itself. The Python format function can also take named parameters. For example: <code>"{param1} and {param2}".format(param1="a", param2="b")</code> would return string <code>"a and b"</code>. Using this we can rewrite the template string and pass the "unpacked" <code>extracted_information</code> dictionary to the <code>format</code> function.</p>

<pre><code>def print_stats(user, url, extracted_information):
    template = """{user}@{url}:
                Hosts
    Up\tDown\tUnreachable\tPending\tProblems\tTypes
    {hosts_up}\t{hosts_down}\t{hosts_unreachable}\t\t{hosts_pending}\t{hosts_problems}\t\t{hosts_types}
                Services
    OK\tWarning\tUnknown\tCritical\tProblems\tTypes
    {service_ok}\t{service_warning}\t{service_unknown}\t{service_critical}\t\t{service_problems}\t\t{service_types}"""

    print(template.format(user=user, url=url, **extracted_information))
</code></pre>
    </div>