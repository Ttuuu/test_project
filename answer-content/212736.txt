<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Every time you execute a <code>go</code> statement it is passed to the scheduler. What if scheduling is delayed? <code>wg.Add(1)</code> is not executed and <code>wg.Wait()</code> is true. For example, run your code in the Go Playground where <code>GOMAXPROCS</code> is <code>1</code>.</p>

<pre><code>package main

import (
    "sync"
)

func main() {
    var wg sync.WaitGroup
    n := 5
    ch := make(chan int, n)
    for i := 0; i &lt; n; i++ {
        println("Processing ", i)
        go process(i, ch)
        go consume(ch, &amp;wg)
    }
    println("Finished the process")
    wg.Wait()
}

func consume(ch chan int, wg *sync.WaitGroup) {
    wg.Add(1)
    defer wg.Done()
    println("Result ", &lt;-ch)
}

func process(i int, ch chan int) {
    ch &lt;- (i * 5)
}
</code></pre>

<p>Playground: <a href="https://play.golang.org/p/dQ_lFRz2Y8a" rel="nofollow noreferrer">https://play.golang.org/p/dQ_lFRz2Y8a</a></p>

<p>Output:</p>

<pre><code>Processing  0
Processing  1
Processing  2
Processing  3
Processing  4
Finished the process
</code></pre>

<hr>

<p>Make sure that all the <code>wg.Add</code>s are run before <code>wg.Wait</code>. Move the <code>println("Finished the process")</code> to the correct place after the <code>wg.Wait</code>. For example,</p>

<p><code>waiting.go</code>:</p>

<pre><code>package main

import (
    "runtime"
    "sync"
)

func main() {
    println("GOMAXPROCS", runtime.GOMAXPROCS(0))
    var wg sync.WaitGroup
    n := 5
    ch := make(chan int, n)
    for i := 0; i &lt; n; i++ {
        println("Processing ", i)
        go process(i, ch)
        wg.Add(1)
        go consume(ch, &amp;wg)
    }
    wg.Wait()
    println("Finished the process")
}

func consume(ch chan int, wg *sync.WaitGroup) {
    defer wg.Done()
    println("Result ", &lt;-ch)
}

func process(i int, ch chan int) {
    ch &lt;- (i * 5)
}
</code></pre>

<p>Playground: <a href="https://play.golang.org/p/3czBixAjxdT" rel="nofollow noreferrer">https://play.golang.org/p/3czBixAjxdT</a></p>

<p>Output:</p>

<pre><code>GOMAXPROCS 1
Processing  0
Processing  1
Processing  2
Processing  3
Processing  4
Result  0
Result  5
Result  10
Result  15
Result  20
Finished the process
</code></pre>

<p>Run the <a href="https://golang.org/doc/articles/race_detector.html" rel="nofollow noreferrer">Go data race detector</a> to check for data races. It finds none.</p>

<pre><code>$ go run -race waiting.go
GOMAXPROCS 4
Processing  0
Processing  1
Result  0
Processing  2
Result  5
Processing  3
Result  10
Processing  4
Result  15
Result  20
Finished the process
$
</code></pre>
    </div>