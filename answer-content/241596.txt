<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What a cool topic!</p>

<p>Here are my comments on your code:</p>

<hr>

<p>Please post everything next time!  You didn't post helpers.h, so I made my own helpers.h out of helpers.c and some guesses:</p>

<pre><code>#include &lt;math.h&gt;
#include "bmp.h"

void grayscale(int height, int width, RGBTRIPLE image[height][width]);
void reflect(int height, int width, RGBTRIPLE image[height][width]);
void blur(int height, int width, RGBTRIPLE image[height][width]);
void edges(int height, int width, RGBTRIPLE image[height][width]);
</code></pre>

<p>Hopefully I'm not missing anything!  But this compiles, and even with <code>-Wall -Wextra -pedantic</code> there are no warnings.  Nice :)</p>

<hr>

<p>I tried the Sobel filter on a few BMPs.  It seems to mostly work (yay!), but I got a segmentation fault on the large ish images I tried (few MB).  That's because you do this:</p>

<pre><code>RGBTRIPLE image2[height + 2][width + 2];
</code></pre>

<p>This will take up a lot of stack space -- too much for my computer to handle.  A better idea is to allocate your images on the heap.  Look at filter.c for an example.  You want something like:</p>

<pre><code>RGBTRIPLE(*image2)[width + 2] = calloc(height + 2, sizeof(RGBTRIPLE) * (width + 2));
</code></pre>

<p>This makes the big BMPs work!  You'll also have to <code>free</code> this memory since it's being allocated on the heap.</p>

<hr>

<p>In the function <code>greyscale</code>:</p>

<pre><code>float average;
....
average = 1.0 * (image[i][j].rgbtBlue + image[i][j].rgbtGreen + image[i][j].rgbtRed) / 3;
</code></pre>

<p>A lot of C programmers declare all of their variables at the beginning of functions.  <a href="https://en.wikipedia.org/wiki/ANSI_C#C89" rel="nofollow noreferrer">C89</a> required that local variables be declared at the beginning of the block they live in, and some people took that to the extreme and declared stuff as far up as they could go.</p>

<p>In 2020, you don't have to do this.  You haven't followed C89 in a lot of other places anyway (compile with <code>-std=c89</code> to see the 60 warnings and 3 errors).  So you might as well do:</p>

<pre><code>float average = ....
</code></pre>

<p>This way you avoid uninitialized variables, and you will never have to scroll up/down/up/down... while reading your C code.</p>

<p>As a nit, I think instead of <code>1.0 * (...) / 3</code> you could just as easily have written <code>(...) / 3.0</code>.  Or better yet, just do integer division.  You're about to round anyway.  Does it matter if you are 0.33/255 off?</p>

<p>Either way, if you're going to round average, you might as well make it an <code>int</code> and then call <code>round</code> once instead of calling <code>round(average)</code> three times.</p>

<hr>

<p>In the function <code>reflect</code>:</p>

<p>How about making a function <code>void swap(BYTE* lhs, BYTE* rhs, int size);</code>?  Then you can write</p>

<pre><code>for (int i  ....) {
    for (int j .....) {
        swap(image[i][j], image[i][width - j - 1], sizeof(RGBTRIPLE));
    }
}
</code></pre>

<p>instead of 9 bulky lines of code.</p>

<hr>

<p>In the function <code>blur</code>:</p>

<pre><code>float averageGreen;
</code></pre>

<p>Same comment as before about initializing at the top of functions.</p>

<pre><code>RGBTRIPLE image2[height][width];
</code></pre>

<p>Same comment about stack vs. heap.  This will fail for large images.  Also, how about a better name like "blurredImage" or something to that effect.  Most of your names are good, but it's a bad sign when you have to use a counter to distinguish your variables in human readable code.</p>

<pre><code>for (int r = i - 1; r &lt;= i + 1 &amp;&amp; r &lt; height; r++) 
{
    if (r &lt; 0)
    {
        continue;
    }
</code></pre>

<p>This breaks my brain. Cognitive overload. No wonder you wrote "it took me way too long to make all the for loops work."</p>

<ol>
<li><p>it looks like you did get it right (as far as I can tell...), so good job.  Even though it's not as elegant as it could be, it's good you stuck with it.</p></li>
<li><p>As you write more code, you'll get used to writing loops/boolean logic, and this will get easier.  That said there are some guidelines to make this easier.</p></li>
</ol>

<p>I think my brain blew while I read this because you wrote <code>&amp;&amp; r &lt; height</code> in the for loop's condition and then put <code>if (r &lt; 0)</code> in an if statement.  You didn't separate concerns well enough.</p>

<p>Your first concern is to find <code>i</code> and <code>j</code>.</p>

<p>Your second concern is to find how far from <code>i</code> and <code>j</code> you need to stray.</p>

<p>And your final concern is to avoid going out of bounds.</p>

<p>How does this look?</p>

<pre><code>for (int i = 0; i &lt; height; ++i) {
    for (int j = 0; j &lt; width; ++j) {
        for (int i_offset = -1; i_offset &lt;= -1; ++i_offset) {
            for (int j_offset = -1; j_offset &lt;= -1; ++j_offset) {
                int row = i + i_offset;
                int col = j + j_offset;
                if (0 &lt;= row &amp;&amp; row &lt; height &amp;&amp; ...) {
                    ...
                }
            }
        }
    }
}
</code></pre>

<p>I think this is relatively easy to read.</p>

<p>Some would argue this is less efficient since you'll run through all the <code>col</code> values when <code>row</code> is out of bounds.  Don't listen to these arguments though -- the compiler can hoist these checks for you (at least Clang 10.0.0 with <code>-O</code> does this).  As a rule, write the clear thing and only optimize manually if you have to.</p>

<blockquote>
  <p>I could probably rewrite the function using the 0 padding as well, like for the edge one but this seems cleaner.</p>
</blockquote>

<p>I agree that in this case it's cleaner not to use 0 padding.  How could you figure out <code>count</code> if you use 0 padding?</p>

<pre><code>for (int i = 0; i &lt; height; i++)
{
    for (int j = 0; j &lt; width; j++)
    {
        image[i][j] = image2[i][j];
    }
}
</code></pre>

<p>You basically want to do <code>image = image2</code>.  This can be done more elegantly.</p>

<p>First idea (very common idiom): use <code>memcpy</code>.  It will be faster and it's easier to read.</p>

<p>Second idea (maybe controversial):</p>

<pre><code>swap(image, image2); // swap the pointers
free(image2); // free the original image
</code></pre>

<p>Faster and simpler!  This only works if you know you can call <code>free</code> on the memory passed into the function -- that's a strong assumption! In this case you can (assuming you fix your declaration of <code>image2</code> to use <code>calloc</code> or similar), but you should at the very least add a comment to the function definition saying you plan to free the argument.</p>

<hr>

<p>In the function edges:</p>

<pre><code>int GxBlue;
</code></pre>

<p>Same comment.</p>

<pre><code>//initialise the Gx and Gy kernels
</code></pre>

<p>Good to see <code>Gx</code> and <code>Gy</code> written out so clearly!  An uglier implementation would have <code>-1 * blah + 1 * bleh + ...</code>.  Good that you didn't do that.</p>

<pre><code>RGBTRIPLE image2[height + 2][width + 2];
</code></pre>

<p>Same comment.</p>

<pre><code>//if on edges add 0
</code></pre>

<p>If you use <code>calloc</code>, then you can assume the memory you receive is zeroed out.</p>

<pre><code>//else add original array values
if (i &gt; 0 &amp;&amp; i &lt; height + 1  &amp;&amp; j &gt; 0 &amp;&amp; j &lt; width + 1)
</code></pre>

<p>How about just <code>else</code> instead of this comment/a written out negation of the condition?  This isn't just a style tip -- you don't want to make it hard for the compiler to prove it only needs to compute the condition once.</p>

<pre><code>if (sqrt(GxBlue * GxBlue + GyBlue * GyBlue) &gt; 255)
{
    image3[i - 1][j - 1].rgbtBlue = 255;
}
else
{
    image3[i - 1][j - 1].rgbtBlue = round(sqrt(GxBlue * GxBlue + GyBlue * GyBlue));
}
</code></pre>

<p>How about</p>

<pre><code>image3[i - 1][j - 1].rgbtBlue = edgeHelper(GxBlue);
</code></pre>

<p>Where <code>edgeHelper</code> is a function that looks like:</p>

<pre><code>BYTE edgeHelper(float Gx, float Gy) {
    float magnitude = round(euclideanDistance(Gx, Gy));
    return magnitude &gt; 255 ? 255 : magnitude; 
}
</code></pre>

<p>Note that I've rounded before doing the comparison rather than after.  I don't think it matters much, but it's a difference all the same.  You'll have to figure out <code>euclideanDistance</code> but I think you'll have no issue with it!</p>

<pre><code>image[i][j].rgbtBlue = image3[i][j].rgbtBlue;
image[i][j].rgbtGreen = image3[i][j].rgbtGreen;
image[i][j].rgbtRed = image3[i][j].rgbtRed;
</code></pre>

<p>Earlier in your program you wrote <code>image[i][j] = image2[i][j]</code> .. that was better than this! but the same comments apply regardless.  Since you [height + 2][width + 2] and relied on having 0s in memory rather than doing bound checks, you can no longer do that swap/free hack.</p>

<hr>

<p>Architectural tip:</p>

<p>How about adding (and using) these:</p>

<pre><code>// could store height/width in the image
struct Image { ... };

Image* createImage(int height, int width);

void destroyImage(Image*);

void swapImage(Image*, Image*);

// this could return 0 for out of bounds
RGBTRIPLE getPixel(Image*, int i, int j);

setPixel(Image*, int i, int j, RGBTRIPLE);

// this would help you get rid of a lot of the for loops!
forEachImageIndex(Image*, void(*callback)(Image*, int j, int j));
</code></pre>

<p>Properly using these would probably mean modifying <code>filter.c</code>, but maybe it's worth thinking about.</p>

<hr>

<blockquote>
  <p>Is there any way of writing the edge function code cleaner and more efficient for a beginer</p>
</blockquote>

<p>I think I already answered about cleanliness, but I'll answer here about efficiency.  Your code is pretty efficient.  One of the beautiful things about C is that it encourages writing simple code, and the compiler can do a really good job optimizing simple code for you.  I played around with different compiler flags, and Clang can optimize/vectorize this pretty well.</p>

<hr>

<blockquote>
  <p>For the edge function I admit the padding with 0 ... I found on stackoverflow, ... I just used the idea. Is it a bad practice or something that is usually done?</p>
</blockquote>

<p>There are a few concerns here:</p>

<ul>
<li><p>Can you legally copy stuff from SO?  I'll link you to an answer that can explain better than I can: <a href="https://meta.stackoverflow.com/questions/339152/plagiarism-and-using-copying-code-from-stack-overflow-and-submitting-it-in-an-as">https://meta.stackoverflow.com/questions/339152/plagiarism-and-using-copying-code-from-stack-overflow-and-submitting-it-in-an-as</a>.</p></li>
<li><p>Is it a good idea to copy <em>ideas</em> from SO?  In my opinion, it's OK as long as you understand what you're copying.  You should copy a link to what you're copying (except for the most generic ideas).</p></li>
<li><p>Is it a good idea to copy <em>code</em> from SO?  Copying code is so dangerous.  I would avoid it if you can.</p></li>
<li><p>"Is copying code from SO common" It is so common that <a href="https://www.google.com/search?q=meme+copy+code+from+stack+overflow&amp;client=safari&amp;rls=en&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=2ahUKEwiY95uTrZTpAhXRYDUKHT53Cd8Q_AUoAXoECA0QAw&amp;biw=1173&amp;bih=1066#imgrc=IuMWBXiP3qmTwM" rel="nofollow noreferrer">people have made memes about it</a>.  But that doesn't make it a good idea...</p></li>
</ul>

<p>TL;DR: I think what you did is OK, but you should cite SO.com somewhere.</p>

<hr>

<p>General tips:</p>

<ul>
<li>Learn more of stdlib.h like <code>memcpy</code> and when to use <code>malloc</code>/<code>free</code>.</li>
<li>Don't be afraid to make helper functions to avoid repetitive code.</li>
<li>Use a more modern C standard/more modern C style guide.</li>
<li>Test your code with lots of files.  Seek out big ones/small ones/weird ones etc.  You could have caught that segfault.</li>
<li>Keep practicing!</li>
</ul>
    </div>