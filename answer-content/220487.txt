<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The algorithm can be rewritten to use <em>Linq</em> instead of a <em>Queue</em>.</p>

<blockquote>
<pre><code>public IList&lt;IList&lt;int&gt;&gt; LevelOrder(Node root)
        {
            IList&lt;IList&lt;int&gt;&gt; result = new List&lt;IList&lt;int&gt;&gt;();
            Queue&lt;Node&gt; Q = new Queue&lt;Node&gt;();
  ..
</code></pre>
</blockquote>

<p>This increases readability. (At the cost of performance?) I use <code>IEnumerable</code> when mutation of the list is not required and <code>IList</code> otherwise.</p>

<pre><code>public static IEnumerable&lt;IEnumerable&lt;int&gt;&gt; LevelOrder(Node root) 
{
    var valuesByBreadth = new List&lt;IEnumerable&lt;int&gt;&gt;();
    LevelOrder(new[] { root }, valuesByBreadth);
    return valuesByBreadth;
}

private static void LevelOrder(IEnumerable&lt;Node&gt; breadth, IList&lt;IEnumerable&lt;int&gt;&gt; valuesByBreadth) 
{
    if (breadth.Any()) {
        valuesByBreadth.Add(breadth.Select(x =&gt; x.val).ToList());
        LevelOrder(breadth.SelectMany(x =&gt; x.children), valuesByBreadth);
    }
}
</code></pre>

<blockquote>
  <p>No-where in the spec is it said that a null input should produce a
  null output, and this is a design decision which needs to be
  documented. - VisualMelon</p>
</blockquote>

<p>I have asserted the children always be set. No need for boiler-plate <code>null</code> checks, at the expensive of slight <em>object creation</em> overhead.</p>

<pre><code>public class Node
    {
        public int val;
        public IList&lt;Node&gt; children;

        public Node() {
        }

        public Node(int val, IList&lt;Node&gt; children) {
            this.val = val;
            this.children = children ?? new List&lt;Node&gt;();
        }
    }
</code></pre>

<p><em>test entrypoint</em> (I used a console app and debugged the results, but you are better of writing a unit test.)</p>

<pre><code>public static void Main()
    {
        var node3 = new List&lt;Node&gt;();
        node3.Add(new Node(5, null));
        node3.Add(new Node(6, null));

        var node1 = new List&lt;Node&gt;();
        node1.Add(new Node(3, node3));
        node1.Add(new Node(2, null));
        node1.Add(new Node(4, null));

        var root = new Node(1, node1);
        var result = LevelOrder(root);

        Console.ReadKey();
    }
</code></pre>
    </div>