<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>The <code>Timeout</code> class doesn't solve the problem you have</h1>

<p>If you write:</p>

<pre><code>message = (read from bluetooth);
if(timeout.timeout() == true)
    message = "timed out";
</code></pre>

<p>Then it will first wait for the message to be read from Bluetooth, which might take more than 10 seconds, and then once you have the message, it will check whether more than 10 seconds have passed since the start, and if so it will discard the message you got. The fact that the timer is run in its own thread does not magically make <code>(read from bluetooth)</code> exit after the timer expires.</p>

<p>What you instead have to do is run the <code>(read from bluetooth)</code> command in a thread, and wait at most 10 seconds for that to complete. With C++11, you can do this very easily with <a href="https://en.cppreference.com/w/cpp/thread/async" rel="nofollow noreferrer"><code>std::async()</code></a>:</p>

<pre><code>#include &lt;future&gt;
#include &lt;chrono&gt;

...

auto future = std::async(std::launch::async, [] {
    return (read from bluetooth);
});

auto status = future.wait_for(std::chrono::seconds(10));

if (status == std::future_status::ready)
    message = future.get();
else
    message = "timed out";
</code></pre>

<p>The problem however is that if there is a timeout, the thread running the Bluetooth read command is still running. When exiting the scope, the destructor of <code>future</code> will block until the thread finishes execution. So this kind of approach has a limited use.</p>

<p>The best solution would be to find some wait to make <code>(read from bluetooth)</code> itself give up after 10 seconds, or have some way to cause it to stop waiting for data.</p>

<h1>Identifiers with double underscores are reserved</h1>

<p>You should not use identifiers that start with underscores, or contain double underscores, as they are <a href="https://en.cppreference.com/w/cpp/language/identifiers" rel="nofollow noreferrer">reserved</a>, and might be used by the compiler and/or the standard library. This even applies to macros, so instead of:</p>

<pre><code>#ifndef __timeout_h__
#define __timeout_h__
</code></pre>

<p>Write:</p>

<pre><code>#ifndef timeout_h
#define timeout_h
</code></pre>

<p>Or use the following pragma that most compilers understand, and that ensure that a header file is only read once:</p>

<pre><code>#pragma once
</code></pre>

<h1>Store durations as <code>std::chrono::duration</code></h1>

<p>Avoid storing timeouts as <code>int</code>, this limits the resolution. Instead, consider using <code>std::chrono::duration</code> to store the timeout period.</p>

<h1>Make member functions <code>const</code> where appropriate</h1>

<p>If a member function doesn't modify any member variables, mark it as <code>const</code>, like so:</p>

<pre><code>class Timeout {
    ...
    bool timeout() const;
}
</code></pre>

<h1>Ensure variables are properly initialized</h1>

<p>You never initialize <code>alert</code> to <code>false</code>, so a call to <code>timeout()</code> might return an uninitialized value.</p>

<h1>Use <a href="https://en.cppreference.com/w/cpp/atomic/atomic" rel="nofollow noreferrer"><code>std::atomic&lt;&gt;</code></a> variables when communicating between threads</h1>

<p>If you write:</p>

<pre><code>Timeout timeout(10);
// do something
if (timeout.timeout())
    ...
</code></pre>

<p>Then the compiler might know that <code>alert</code> is set to <code>false</code> in the first line, and if it can prove that <code>do something</code> never touches the variable <code>timeout</code>, then it can assume in the third line that <code>alert</code> will always be <code>false</code>. To ensure the compiler does not make such assumptions when threads are involved, you have to tell it that it should atomically read and write this flag.</p>

<h1>Do you need a separate thread at all?</h1>

<p>The only thing your <code>Timeoutthread</code> does is sleep for a certain amount of time, then set a variable. You know that the threads sets that variable a given number of seconds after it starts. So instead of using a thread, you can just store the current time when an instance of <code>Timeout</code> is created in a separate member variable, and in <code>timeout()</code> just check the difference between the current time now and the time stored in that member variable.</p>
    </div>