<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For me, there is way too much code to review. So I could make just a brief outline. </p>

<p>first of all, I think here you inclined to the opposite extremity, creating classes with no methods other than constructor. I don't think it's a good move. So I would take Login and Logout back into the main class as methods.</p>

<p>There are many places that can be written more efficiently. For example,</p>

<pre><code>        $userData = $this-&gt;db-&gt;row("SELECT system_user_id, fname, lname, uname, email, last_login FROM system_users WHERE uname = :username AND password = :password", array('username' =&gt; $username, 'password' =&gt; sha1($password)));

        if ($userData)
            return $userData;
        else
            return false;
</code></pre>

<p>is the same as</p>

<pre><code>return $this-&gt;db-&gt;row("SELECT system_user_id, fname, lname, uname, email, last_login FROM system_users WHERE uname = :username AND password = :password", array('username' =&gt; $username, 'password' =&gt; sha1($password)));
</code></pre>

<p>on a side note, as you can see, it is very hard to read (and review) such big lines. You must split your code so it would fit for the screen: </p>

<pre><code>$sql = "SELECT system_user_id, fname, lname, uname, email, last_login 
        FROM system_users WHERE uname = :username AND password = :password";
$data = array('username' =&gt; $username, 'password' =&gt; sha1($password));
return $this-&gt;db-&gt;row($sql, $data);
</code></pre>

<p>and now it was revealed that you are using an outdated and insecure approach to hashing passwords. You must hash them using <a href="http://php.net/manual/en/function.password-hash.php" rel="nofollow noreferrer">password_hash()</a> and verify using password_verify(). I've got a handy example for this, <a href="https://phpdelusions.net/pdo_examples/password_hash" rel="nofollow noreferrer">Authenticating a user using PDO and password_verify()</a>.</p>

<p>Another example of rather heavily duplicated code, a literal example of the WET acronym (Write Everything Twice) is SystemUser's constructor. Why not to make it this way</p>

<pre><code>public function __construct($systemUserId = NULL)
{
    $this-&gt;id = $systemUserId ?? $this-&gt;systemUserDetatils-&gt;getUserFromSession();
    $this-&gt;systemUserDetatils   = new \MyApp\Models\SystemUser\SystemUserDetails();
    if ( $this-&gt;id ) {
        $this-&gt;systemUserDetatils-&gt;get($this);
    }
}
</code></pre>

<p>So here we are effectively writing everything once, making our code DRY (Don't Repeat Yourself) by fist setting <code>$this-&gt;id</code> to either <code>$systemUserId</code> if it's set or whatever <code>$this-&gt;systemUserDetatils-&gt;getUserFromSession()</code> returns otherwise, and then populating the user details. </p>
    </div>