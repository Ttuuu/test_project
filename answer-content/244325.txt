<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Answers to your questions</h1>
<blockquote>
<p>In <code>MurmurHash3_size_t()</code>, I check <code>SIZE_MAX</code> to tell whether I'm on a 32 bit system or a 64 bit system. Does this check make sense, are there alternatives which are better?</p>
</blockquote>
<p>I think it's not worth it to write a generic version of this that avoids checking <code>SIZE_MAX</code>, even though that is possible. Machines with a different size_t size than 32 or 64 bits are uncommon, unless you're talking about 8 and 16 bit machines, but I'm assuming you are not interested in using bigints on those.</p>
<p>But don't forget to <code>#include &lt;cstdint&gt;</code>, otherwise <code>SIZE_MAX</code> might not be defined! Alternatively, use <code>sizeof(size_t) == 4</code> and <code>== 8</code>, in combination with <code>if constexpr (...)</code> instead of <code>#if ...</code>.</p>
<blockquote>
<p>Near the end of the file hash_mpz.cpp, I have the statement return hash&lt;mpz_srcptr&gt; { }(x.get_mpz_t());. Does this create an object of type hash&lt;mpz_srcptr&gt; for every calculated hash value?</p>
</blockquote>
<p>Technically, yet. But those objects don't have any member variables, just a member function <code>operator()</code>, which is resolved at compile-time, so there is no need to worry about inefficiencies here.</p>
<blockquote>
<p>I'm not sure whether I'm using the references const mpz_class &amp;x and const mpz_t &amp;x in the most efficient way. This is partly due to GMP being a C library, mpz_t is a 1 element array with element type __mpz_struct and mpz_class being something rather obscure to me.</p>
</blockquote>
<p>Using const references to the objects is perfectly fine.</p>
<blockquote>
<p>Last but not least, do you see anything else which can be improved?</p>
</blockquote>
<p>Yes, see below.</p>
<h1>Your functions don't handle negative bigints correctly</h1>
<p>As it mentions in the excerpt from <code>gmp.h</code> you posted, <code>_mp_size</code> will be negative for negative bigints. You need to handle this. One way would just be to write:</p>
<pre><code>return MurmurHash3_size_t(..., abs(x-&gt;_mp_size) * sizeof(mp_limb_t), ...);
</code></pre>
<p>However, this means that for a given positive number, that number and its negative will get the same hash value. It may or may not be an issue for your application. One possible solution is to use a different seed value for negative numbers.</p>
<h1>Consider using <code>std::hash</code> to calculate the hash</h1>
<p>Yes, you can use <code>std::hash</code> instead of implementing your own. Of course, you need to pick an appropriate existing specialization <code>std::hash</code>. You could iterate over the limbs in the bignum, which are either 32 or 64 bit integers, so you could <code>std::hash</code> those individually, but then the questions is how to combine them. Just adding or XORing them might not result in a good final hash value if there are any patterns in the input. But in C++17, there is a specialization of <code>std::hash</code> for <code>std::string_view</code>. So you can create a view for the limb array, and hash that:</p>
<pre><code>size_t hash&lt;mpz_srcptr&gt;::operator()(const mpz_srcptr x) const {
    std::string_view view{reinterpret_cast&lt;char *&gt;(x-&gt;_mp_d), abs(x-&gt;_mp_size) * sizeof(mp_limb_t)};
    return std::hash&lt;std::string_view&gt;{}(view);
}
</code></pre>
<p>There is a good chance that the standard library's hash function for strings is a variant of MurmurHash, see for example <a href="https://stackoverflow.com/questions/19411742/what-is-the-default-hash-function-used-in-c-stdunordered-map">this question</a>.</p>
<h1>Use the appropriate cast operator instead of C-style casts</h1>
<p>You should use <code>static_cast&lt;&gt;()</code> if possible to cast similar types, so the compiler will be able to generate an error if you are doing incorrect casts. For example:</p>
<pre><code>size_t hash&lt;mpz_t&gt;::operator()(const mpz_t x) const {
    return hash&lt;mpz_srcptr&gt;{}(static_cast&lt;mpz_srcptr&gt;(x));
}
</code></pre>
    </div>