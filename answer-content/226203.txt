<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Revised from my C# version
Using a set instead of a dictionary or hashtable uses less space
We casefold to ignore case sensitivity and then by sorting this we can try to fail out early. If we have any more than 2 odd letters (which will happen any time we check a third unique char) then we fail out.  But we don't want to fail when checking the second member, because it could possibly be removed.
If we didn't fail early we still want to make sure we have at most one odd letter. Therefore the final boolean comparison returns appropriately.</p>

<pre class="lang-py prettyprint-override"><code>    def isPermutedPalindrome(input_string):      
      if (len(input_string) &lt; 2):
        return True
      input_string = sorted(input_string.casefold())

      char_set = set()
      for letter in input_string:
        if letter == ' ':
          continue
        if letter in char_set:
          char_set.remove(letter)
        else:
          char_set.add(letter)
        if (len(char_set) &gt; 2):
          return False
      return (len(char_set) &lt; 2)
</code></pre>
    </div>