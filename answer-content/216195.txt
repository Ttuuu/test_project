<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem as a single call is trivial at best with the optimal solution being</p>

<pre><code>const values = [1,2,3,4,5,6,7,8,9];
function sum(i,j) {
    var sum = 0;
    while(i &lt; j) { sum += values[i++] }
    return sum;
}
</code></pre>

<h2>Caching is impractical</h2>

<p>The answer by <a href="https://codereview.stackexchange.com/a/216180/120556">Marc Rohloff</a> suggests that caching the results is one way to do this. It has some flaws.  <span class="math-container">\$O(n^2)\$</span> storage <span class="math-container">\$O(n^3)\$</span> complexity to get all possible solutions and make have sum perform at <span class="math-container">\$O(1)\$</span></p>

<h2>Much in little, MIP maps</h2>

<p>This problem is very similar to a CG problem regarding the rendering of images. To avoid small versions of a larger image looking pixelated each rendered pixel is the mean of the many pixels it represented. In other words a rendered pixel is <code>sumPixels(a,b) / (b-a)</code> (pixels from <code>a</code> to <code>b</code>) which is identical to this problem.</p>

<p>The solution was called MIP mapping (MIP is for the Latin "multum in parvo", meaning "much in little") (now more often called mipmaps)</p>

<p>Mipmaps work by pre processing the image, creating multiple copies, each copy is half the size of the previous image. So for a square 256pixel image you would have to create a 8 more images of 128, 64, 32, 16, 8, 4, 2, and 1 pixels (normally the maps would be limited to only a few steps)</p>

<p>The storage thus becomes <span class="math-container">\$O(2n)\$</span> and the same for the pre-processing complexity. In other words a pre-processing <span class="math-container">\$O(n)\$</span> storage and processing solution to the problem of summing continuous sets from a larger set. </p>

<p>The rendering per pixel was typically <span class="math-container">\$O(2)\$</span> or <span class="math-container">\$O(1)\$</span> </p>

<h2>Applying the MIP</h2>

<p>In javascript we can create a function that will return a function. That means we can use closure to encapsulate the pre-processed data.</p>

<p>As we need the precise value for each set we can not use the CG mipmap method as it calculates a near enough approximation. To get the precise value we need a little more complexity. Its something near <span class="math-container">\$O(log(log(n))\$</span> per sum</p>

<h2>First the pre-processing</h2>

<p>We create multiple maps each half the size of the previous map. We use the results of the previous map to calculate the new map. As some map sizes can not be divided by two we need to tack on some zeros</p>

<pre><code>function createSumFunction(array) {
    const mipMaps = [array];
    (function () {
        var from = array;
        while(from.length &gt; 2) {
            let i = 0;
            const to = [];
            while(i &lt; from.length) {
                to.push(from[i++] + (from[i] !== undefined ? from[i] : 0));
                i++;
            }
            mipMaps.push(to)
            from = to;
        }         
        mipMaps.push([from[0] + from[1]]);
    })();

    // more code to follow
</code></pre>

<h2>Getting the sum</h2>

<p>The inputs are <code>i</code> and <code>j</code>. (left and right)</p>

<p>First thing is reduce <code>j</code> by 1</p>

<p>To get the sum we start at the first map, from the left if we are at an odd position get the value to the left and add that value to a sum for the left side. For the right side we do the same but rather if we are at an even location get the value to the right and add it to the sum for the right side.</p>

<p>The half and round the values for i, and j and step to the next map up (half sized). If <code>i === j</code> get the value at i and subtract the left sum and right sum. The result is the value we are after.</p>

<p>The max number of steps will be <span class="math-container">\$O(log(n))\$</span> and the min will be <span class="math-container">\$O(1)\$</span></p>

<p>The second half of the solution returning the sum function. Note, it is missing some argument vetting, see snippet at bottom for better argument vetting.</p>

<pre><code>return function(i,j) {
    j--;
    var k = 0, subL = 0, subR = 0;
    while(k &lt; mipMaps.length) { // could also be while(true)
        const m = mipMaps[k ++];
        subL += i % 2 ? m[i - 1] : 0;
        subR += j % 2 ? 0 :  m[j + 1];
        i &gt;&gt;= 1;
        j &gt;&gt;= 1;
        if (i === j) { return mipMaps[k][i] - subL - subR }
    }
}
</code></pre>

<h2>Solution pre <span class="math-container">\$O(n)\$</span> RAM/CPU and <code>sum</code> <span class="math-container">\$O(1)\$</span> RAM <span class="math-container">\$O(log(n))\$</span> CPU</h2>

<p>As one function that does the pre process and returns the sum function. Add some checks to the sum input to ensure that the values i,j are not in conflict. It is assumed that they are in range. It is also assumed that the input array is more than 1 item long (or what would the point be?)</p>

<p>I have only tested positive values (but assume it will work for all numbers) and I have only tested for power of two array sizes, I leave that for you to work out (hint the right side may not end at an odd index)</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function createSumFunction(array) {
    const mipMaps = [array];
    (()=&gt;{ // to keep closure clean
        var from = array;
        while (from.length &gt; 2) {
            let i = 0;
            const to = [];
            while(i &lt; from.length) {
                to.push(from[i++] + (from[i] !== undefined ? from[i] : 0));
                i++;
            }
            mipMaps.push(to)
            from = to;
        }
        mipMaps.push([from[0] + from[1]]);
    })();
    return function(i, j) {
        var k = 0, subL = 0, subR = 0;
        if (i === j) { return NaN }
        if (j &lt; i) { [j, i] = [i, j] }
        j--;
        if (i === j) { return mipMaps[0][i] }
        while (k &lt; mipMaps.length) { // could also be while(true)
            const m = mipMaps[k ++];
            subL += i % 2 ? m[i - 1] : 0;
            subR += j % 2 ? 0 :  m[j + 1]; // &lt;&lt; hint fix
            i &gt;&gt;= 1;
            j &gt;&gt;= 1;
            if (i === j) { return mipMaps[k][i] - subL - subR }
        }
    }
}
const sum = createSumFunction([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8]);
console.log(sum(0,16));</code></pre>
</div>
</div>

    </div>