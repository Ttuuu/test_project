<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><span class="math-container">\$\DeclareMathOperator{\Oh}{O}\$</span>Frankly, the code in the HackerRank editor is a large mess.  It is promoting crap like <code>#include &lt;bits/stdc++.h&gt;</code> and <code>using namespace std;</code>, and the code contains many problems: <code>int</code> for traversing a <code>std::vector</code>, copying containers around, etc.  Not to mention bad practices like <code>i++</code>, explicitly calling <code>fout.close()</code>, not using standard algorithm, etc.  It really shouldn't be like that.</p>

<p>In your code, the whole <code>getPosition</code> function is redundant.  Use <code>std::lower_bound</code> instead.  And since <code>std::vector::erase</code> is <span class="math-container">\$\Oh(n)\$</span>, the code is <span class="math-container">\$\Oh(n^2)\$</span>, which is unnecessary inefficient.</p>

<p>The problem is very simple and can be finished in several lines without sacrificing readability:</p>

<pre><code>using score_t = long;
using rank_t = long;

// scores is passed by value to take advantage of possible optimization.
rank_t get_rank(std::vector&lt;score_t&gt; scores, score_t alice_score)
{
    scores.erase(std::unique(scores.begin(), scores.end()), scores.end());

    auto it = std::lower_bound(scores.begin(), scores.end(), alice_score, std::greater&lt;&gt;{});
    return it - scores.begin() + 1;
}
</code></pre>

<p>The code is <span class="math-container">\$\Oh(n)\$</span> and I don't think you can do better.  Note that each score of Alice's is independent, so it makes no sense to process them together in a function.  I used <code>long</code> because the problem seems to require numbers as large as <span class="math-container">\$10^9\$</span>.  <code>scores</code> will be modified in the function, so instead of making a copy manually, we let the compiler do so for us in the parameter list.  This enables possible optimization opportunities.</p>

<p>Here, we used two standard algorithms:</p>

<ul>
<li><p><code>std::unique</code>, which "removes" adjacent equal elements.  Standard algorithms cannot change the size of <code>scores</code> via iterators, so <code>std::unique</code> makes sure that the first <span class="math-container">\$N\$</span> elements are the result, where <span class="math-container">\$N\$</span> is the number of elements in the result.  The rest of the elements are placed in a valid but otherwise unspecified state.  Then, we call <code>erase</code> to erase these garbage elements.  This is also known as the <a href="https://stackoverflow.com/q/799314">remove-erase idiom</a>.</p></li>
<li><p><code>std::lower_bound</code>, which performs a binary search and returns the first element that compares not "less" than the provided value.  By default, "less" is defined by <code>&lt;</code>, thus operating on an ascending sequence.  In this case, we use <code>std::greater&lt;&gt;</code> to define "less" by <code>&gt;</code>, so that <code>std::lower_bound</code> is adapted to work on a descending sequence.</p></li>
</ul>

<hr>

<p>Now let's go through your code: (regardless of whether the code is what hackerrank gives you)</p>

<pre><code>int getPosition(vector&lt;int&gt; scores,int value,int start,int end){
</code></pre>

<p>As I said, this function is provided by the standard library and you shouldn't be reinventing your own without a good reason.  If you want to see how the standard version looks like, there is an example implementation at <a href="https://en.cppreference.com/w/cpp/algorithm/lower_bound" rel="nofollow noreferrer">cppreference</a>.</p>

<hr>

<pre><code>vector&lt;int&gt; climbingLeaderboard(vector&lt;int&gt; scores, vector&lt;int&gt; alice) {
</code></pre>

<p>As I said before, this function is illogical.  It should handle one Alice-score at a time.  Also, <code>climbingLeaderboard</code> isn't really a good function name.</p>

<p>Passing <code>scores</code> by value is justified because you modify it in the functions, but passing <code>alice</code> by value introduces an unnecessary copy.  It should be passed by const reference instead.  And <code>int</code> is not only a magic type, but also a type that is not sufficiently large here.</p>

<hr>

<pre><code>int i=1;
while(1){
    if(i == scores.size()){
        break;
    }
    if(scores[i]==scores[i-1]){
        scores.erase(scores.begin() + i);
        continue;
    }
    i++;
}
</code></pre>

<p><strong>Space.</strong>  Also, I am not sure what you are trying to achieve with the <code>while (1)</code> loop here: you are obfuscating the code by refusing to place the condition in the proper place.  And <code>int</code> isn't the correct type to use here.  Use <code>size_type</code> (or at least a named type).  <code>++i</code> should be used instead of <code>i++</code> in a discarded value expression.</p>

<p>And you are essentially reimplementing the <span class="math-container">\$\Oh(n)\$</span> <code>std::unique</code> in a <span class="math-container">\$\Oh(n^2)\$</span> way.  Just use the standard algorithm and avoid reinventing the wheel.</p>

<hr>

<pre><code>vector&lt;int&gt; results;
int endValue = scores.size()-1;
</code></pre>

<p>In this particular case, we know that <code>!scores.empty()</code>, but storing the result in a <code>int</code> is still inadvisable.  Use <code>auto</code> or <code>std::vector&lt;int&gt;::size_type</code>.</p>

<hr>

<pre><code>for(int j=0;j&lt;alice.size();j++){
    endValue = getPosition(scores,alice[j],0,endValue);
    results.insert(results.end(),endValue+1);
}
</code></pre>

<p>Again, space.  And <code>++j</code> not <code>j++</code>.  And the third line is just</p>

<pre><code>results.push_back(endValue + 1);
</code></pre>

<p>There is no reason to use <code>insert</code> + iterator here.</p>

<hr>

<pre><code>    return results;

    }
</code></pre>

<p>Is the weird indentation a copy-paste problem?</p>
    </div>