<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Avoid object creation</h2>

<p>The SDL library does a <em>lot</em> of memory allocation and deallocation which tends to slow things down a bit.  You can avoid that problem by using references in several of your "range for" loops.  For example, in <code>Gamestate::update()</code> you could use this:</p>

<pre><code>// Count neighbours of each cell
for (const Cell &amp;c : board) {
    for (Cell &amp;n : c.get_neighbours()) {
</code></pre>

<p>By using references, you avoid the <code>Cell</code> construction/deletion that would otherwise occur.</p>

<h2>Reuse objects where practical</h2>

<p>Instead of creating a new <code>Cell</code> inside <code>InputHandler::get_input_mouse</code> each time, why not just update the one that already exists?  For convenience, you could create this <code>Cell</code> member function:</p>

<pre><code>void setPos(int xval, int yval) { x=xval; y=yval; }
</code></pre>

<p>And alter the line within <code>get_input_mouse</code> to use it instead of doing yet another <code>Cell</code> creation/destruction cycle:</p>

<pre><code>highlighted_cell.setPos((int)floor((mouse_pos_x + camera_x) / zoom),
                    (int)floor((mouse_pos_y + camera_y) / zoom));
</code></pre>

<h2>Rethink <code>get_neighbours</code></h2>

<p>You're right to question whether the current method is efficient.  It's not particularly, because it requires the creation and destruction of many objects (the <code>std::vector</code> and each of the <code>Cell</code>s within it) each time it's called.  This is also true of the <code>num_neighbors</code> map.</p>

<p>A small improvement might be to define a <code>neighbours</code> array which can be constructed once and reused:</p>

<pre><code>static const std::array&lt;Cell, 9&gt; neighbours{{ 
    {-1, -1}, { 0, -1}, {+1, -1},
    {-1,  0}, { 0,  0}, {+1,  0},
    {-1, +1}, { 0, +1}, {+1, +1} 
}};
</code></pre>

<p>Then the cell counting would look like this:</p>

<pre><code>for (Cell n : neighbours) {
    n += c;
    if (!num_neighbours.count(n)) {
        num_neighbours.emplace(n, 0);
    }
    ++num_neighbours[n];    // Note each cell counts itself as a neighbour
}
</code></pre>

<p>In this version, it still creates a new <code>Cell</code> for each iteration (note that this version of the loop is not using a reference) but at least the <code>std::vector</code> is not being created/destroyed each call.</p>

<p>The <code>map</code> could also be made <code>static</code> and then simply <code>clear()</code> it each iteration instead of incurring the construct/destroy overhead.</p>

<h2>Provide a "zoom extents" function</h2>

<p>In the case of a prolific colony, it may not be easy to see the whole thing on screen.  One feature enhancement might be to calculate a bounding box for all cells in the board and zoom to that if some particular key is pressed.</p>

<h2>Change the name of the window</h2>

<p>I was somewhat surprised to see this window titled "dungeon"!  I assume that was a cut-and-paste from some other program, but it probably should be changed.</p>
    </div>