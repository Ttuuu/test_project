<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>1. Review</h3>

<ol>
<li><p>The function <code>knapsack</code> lacks a docstring that would explain what arguments the function takes (what kind of things are in <code>items</code>? must <code>items</code> be a sequence, or can it be an iterable?) and what it returns.</p></li>
<li><p>This kind of function is ideal for <a href="http://docs.python.org/3/library/doctest.html" rel="noreferrer">doctests</a>.</p></li>
<li><p>The comments say things like "Create an (N+1) by (W+1) 2-d list". But what is N and what is W? Presumably N is <code>len(items)</code> and W is <code>maxweight</code>, so it would be a good idea to use the same names in the comments and the code:</p>

<pre><code>N = len(items)
W = maxweight
</code></pre></li>
<li><p>The comment above <code>bestvalues</code> fails to explain what the values in this table mean. I would write something like this:</p>

<pre><code># bestvalues[i][j] is the best sum of values for any
# subsequence of the first i items, whose weights sum
# to no more than j.
</code></pre>

<p>This makes it obvious why <span class="math-container">\$0 ≤ i ≤ N\$</span> and why <span class="math-container">\$0 ≤ j ≤ W\$</span>.</p></li>
<li><p>In a loop like:</p>

<pre><code>bestvalues = [[0] * (maxweight + 1)
              for i in xrange(len(items) + 1)]
</code></pre>

<p>where the loop variable (here <code>i</code>) is unused, it's conventional to name it <code>_</code>.</p></li>
<li><p>These lines could be omitted:</p>

<pre><code># Increment i, because the first row (0) is the case where no items
# are chosen, and is already initialized as 0, so we're skipping it
i += 1
</code></pre>

<p>and then in the rest of the code, use <code>i + 1</code> instead of <code>i</code> and <code>i</code> instead of <code>i - 1</code>.</p></li>
<li><p>The reconstruction loop:</p>

<pre><code>i = N
while i &gt; 0:
    # code
    i -= 1
</code></pre>

<p>can be written like this:</p>

<pre><code>for i in reversed(range(1, N + 1)):
    # code
</code></pre></li>
<li><p>The code prints an error message like this:</p>

<pre><code>print('usage: knapsack.py [file]')
</code></pre>

<p>Error messages ought to go to standard error (not standard output). And it's a good idea not to hard-code the name of the program, because it would be easy to rename the program but forget to update the code. So write instead:</p>

<pre><code>sys.stderr.write("usage: {0} [file]\n".format(sys.argv[0]))
</code></pre></li>
<li><p>The block of code that reads the problem description and prints the result only runs when <code>__name__ == '__main__'</code>. This makes it hard to test, for example from the interactive interpreter. It's usually best to put this kind of code in its own function, like this:</p>

<pre><code>def main(filename):
    with open(filename) as f:
        # etc.

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('usage: knapsack.py [file]')
        sys.exit(1)
    main(sys.argv[1])
</code></pre>

<p>and now you can run <code>main('problem.txt')</code> from the interpreter to test it.</p></li>
<li><p>The code reads the whole of the file into memory as a list of lines:</p>

<pre><code>lines = f.readlines()
</code></pre>

<p>this is harmless here because the file is small, but it's usually better to process a file one line at a time, like this:</p>

<pre><code>with open(filename) as f:
    maxweight = int(next(f))
    items = [[int(word) for word in line.split()] for line in f]
</code></pre></li>
</ol>

<h3>2. Recursive approach</h3>

<p>Any dynamic programming algorithm can be implemented in two ways: by building a table of partial results from the bottom up (as in the code in the post), or by recursively computing the result from the top down, using <a href="http://en.wikipedia.org/wiki/Memoization" rel="noreferrer">memoization</a> to avoid computing any partial result more than once.</p>

<p>The top-down approach often results in slightly simpler and clearer code, and it only computes the partial results that are needed for the particular problem instance (whereas in the bottom-up approach it's often hard to avoid computing all partial results even if some of them go unused).</p>

<p>So we could use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="noreferrer"><code>@functools.lru_cache</code></a> to implement a top-down solution, like this:</p>

<pre><code>from functools import lru_cache

def knapsack(items, maxweight):
    """Solve the knapsack problem by finding the most valuable subsequence
    of items that weighs no more than maxweight.

    items must be a sequence of pairs (value, weight), where value is a
    number and weight is a non-negative integer.

    maxweight is a non-negative integer.

    Return a pair whose first element is the sum of values in the most
    valuable subsequence, and whose second element is the subsequence.

    &gt;&gt;&gt; items = [(4, 12), (2, 1), (6, 4), (1, 1), (2, 2)]
    &gt;&gt;&gt; knapsack(items, 15)
    (11, [(2, 1), (6, 4), (1, 1), (2, 2)])

    """
    @lru_cache(maxsize=None)
    def bestvalue(i, j):
        # Return the value of the most valuable subsequence of the first
        # i elements in items whose weights sum to no more than j.
        if j &lt; 0:
            return float('-inf')
        if i == 0:
            return 0
        value, weight = items[i - 1]
        return max(bestvalue(i - 1, j), bestvalue(i - 1, j - weight) + value)

    j = maxweight
    result = []
    for i in reversed(range(len(items))):
        if bestvalue(i + 1, j) != bestvalue(i, j):
            result.append(items[i])
            j -= items[i][1]
    result.reverse()
    return bestvalue(len(items), maxweight), result
</code></pre>

<p>To see how many partial solutions this needs to compute, print <code>bestvalue.cache_info()</code> just before returning the result. When solving the example problem in the docstring, this outputs:</p>

<pre><code>CacheInfo(hits=17, misses=42, maxsize=None, currsize=42)
</code></pre>

<p>The 42 entries in the cache are fewer than the 96 partial solutions computed by the bottom up approach.</p>
    </div>