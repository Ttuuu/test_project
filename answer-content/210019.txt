<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>bool IsPrime(unsigned long n){
    unsigned long k;
    for(k = 2; k*k &lt;= n; k++){
        if(n % k == 0){
            return false;
        }
    }
    return true;
}
</code></pre>
</blockquote>

<p>A couple things off the bat.  </p>

<pre><code>bool isPrime(unsigned long n) {
    for (unsigned long k = 2; k*k &lt;= n; k++) {
        if (n % k == 0) {
            return false;
        }
    }

    return true;
}
</code></pre>

<p>The general standard is to name functions either camelCase or snake_case.  You used PascalCase, which is generally only used for classes and structs.  </p>

<p>It is standard to declare loop variables that are not used outside the loop in the <code>for</code> declaration.  That's one of the advantages of a <code>for</code> loop, that it allows you to do that.  </p>

<p>But neither of those would cause performance problems.  This code checks if each number from 2 to <span class="math-container">\$\sqrt{n}\$</span> is a factor of <code>n</code>.  But you don't need to check all the numbers.  You only need to check the primes.  And of course, you generate a list of primes, so it's easy enough to save that and check just the primes.  </p>

<p>Something like </p>

<pre><code>bool isPrime(unsigned long n, unsigned long *primes) {
    for (size_t k = 0; primes[k]*primes[k] &lt;= n; k++) {
        if (n % primes[k] == 0) {
            return false;
        }
    }

    return true;
}
</code></pre>

<p>Back in the calling function, you will need to add some code to handle <code>primes</code>.  </p>

<p>Before the loop.  </p>

<pre><code>unsigned long *primes = malloc(2 * sizeof *primes);
if (!primes) {
    // panic:  exit, return, or whatever seems reasonable
}
primes[0] = 2;
primes[1] = 3;

size_t length = 2;
</code></pre>

<p>Then take </p>

<blockquote>
<pre><code>    unsigned long m, l = 2, k = 1;
    scanf("%lu", &amp;m);
    if (m == 1) {
      printf("%d\n", 2);
    } else if(m == 2){
      printf("%d\n", 3);
    }else{
    while(1){
</code></pre>
</blockquote>

<p>and replace it with </p>

<pre><code>    size_t m;
    scanf("%u", &amp;m);
    if (m &gt; length) {
        unsigned long *temp = realloc(primes, m * sizeof *primes);

        if (!temp) {
            free(primes);
            // panic:  same way as last time
        }

        primes = temp;
    }
    m--;

    unsigned long candidate = 5;
    unsigned long increment = 4;
    while (length &lt;= m) {
         increment = 6 - increment;
</code></pre>

<p>This changes the array index to <code>size_t</code>.  This will easily support 10,000, which is the maximum <code>m</code> (what HackerRank calls <span class="math-container">\$N\$</span>).  </p>

<p>This also changes <code>l</code> to a <code>size_t</code>, since it has to be smaller than <code>m</code> and it will index an array.  </p>

<p>This expands the <code>primes</code> array as necessary to handle the inputs.  </p>

<p>I moved declarations to when they are initialized.  </p>

<p>Your <code>k</code> code has some problems:  </p>

<ol>
<li>You do an increment, a multiplication, a subtraction, and an addition every two iterations.  </li>
<li>You do two iterations of <code>l</code> per loop iteration.  </li>
<li>You have to duplicate code to handle both the same.  </li>
<li>You have to loop forever since the exit criterion is hidden.  </li>
<li>You have to check two conditions before the loop to handle the first two primes.  </li>
</ol>

<p>This version of the code prepares to do </p>

<ol>
<li>One iteration per loop iteration.  </li>
<li>The exit criterion is in the loop declaration.  </li>
<li>This does one subtraction and one addition on every iteration.  </li>
<li>The code no longer needs duplicated.  </li>
<li>No special cases are needed for the first two primes.  </li>
<li>The solution can be printed after the loop, once rather than in four different places.  </li>
<li>If some previous test looked for a later prime, we remember that and don't enter the loop at all.  </li>
</ol>

<p>The <code>candidate</code> variable will have the same values as <code>6*k-1</code> and <code>6*k+1</code>.  The increment will alternate between 2 and 4 (<code>6-2=4</code> and <code>6-4=2</code>).  So <code>candidate</code> will be 5, 7, 11, 13, 17, ...  Just as previously.  </p>

<p>The rest of the loop can be </p>

<pre><code>        if (isPrime(candidate, primes)) {
            primes[length] = candidate;
            length++;
        }

        candidate += increment;
    }
</code></pre>

<p>And then </p>

<pre><code>    printf("%lu\n", primes[m]);
</code></pre>

<p>If <code>m</code> was originally 1, it will now be 0 and <code>primes[0]</code> is 2.  If <code>m</code> was originally 2, it will now be 1 and <code>primes[1]</code> is 3.  So there's the special cases.  </p>

<p>Outside the outer loop, you should </p>

<pre><code>free(primes);
</code></pre>

<p>The big performance improvements are </p>

<ol>
<li>Not recalculating the same primes for each test case.  </li>
<li>Not checking for non-prime factors in <code>isPrime</code>.  </li>
</ol>
    </div>