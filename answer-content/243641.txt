<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP-8</h1>
<p>The <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> has many recommendations for the formatting of Python code that all developers should (must!) follow.  These include</p>
<ul>
<li>single blank space around binary operators, eg <code>negative_flag = False</code>, not <code>negative_flag=False</code></li>
<li>no blanks after <code>(</code> or before <code>)</code>, eg <code>print(number_holder * -1)</code> not <code>print( number_holder*-1 )</code></li>
</ul>
<h1>Useless code</h1>
<p><code>int(number)</code> can only ever return an <code>int</code>, or raise an exception.  There are no other possibilities.  So if no exception is raised, the <code>if</code> condition will always be true, making the <code>if</code> statement an unnecessary control structure:</p>
<pre><code>try:
    if type(int(number)) == int:
        ...
except:
    ...
</code></pre>
<p>Similarly you only exit this loop if <code>response == 'n' or response == 'y'</code></p>
<pre><code>while True:
    response = input("Do you want to continue?(y or n) - ")
    if response=='n' or response=='y':
        break
    else:
        print("Wrong input")
        continue
</code></pre>
<p>So why test both possibilities?</p>
<pre><code>if response == 'n': # Conditions for only two valid answer.
    break
elif response == 'y':
    continue
</code></pre>
<p>From the comment, it seems you have already realized this.  So why <code>elif response == 'y':</code>?  Why not simple <code>else:</code>?</p>
<p>Finally, every last one of the <code>continue</code> statements is used as the last statement in a control structure, in a loop.  Without the <code>continue</code> statement, the loop would be restarting anyway, so these can all be omitted.</p>
<h1>Only catch the exceptions you expect</h1>
<p>Consider this code:</p>
<pre><code>while True:
    number = input("Enter a number : ")
    try:
        if type(int(number)) == int:
            break
    except:
         print("Wrong input. Only integers are allowed.")
         continue
</code></pre>
<p>Try pressing <code>Control-C</code> at the input prompt to quit the program.  Whoops!  Why isn't the program terminating?  Because <code>Control-C</code> raises the <code>KeyboardInterrupt</code> exception, which you catch, display an inappropriate error messages, and then loop back for another try.  How unexpected.</p>
<p>You want to catch <code>ValueError</code> exceptions, only.</p>
<pre><code>while True:
    try:
        number = int(input("Enter a number: "))
        break
    except ValueError:
        print("Wrong input.  Only integers are allowed.")
</code></pre>
<p>Note the absence of useless <code>if</code> statements and <code>continue</code> statements.</p>
<h1>Any Base?</h1>
<p>Your program is supposed to convert from "any base" to decimal.  But really, you only allow base 2 through base 10 input.  You don't allow <code>FF</code> to be converted from base 16 to base 10.</p>
<h1>To Base 10</h1>
<p>You've got a lot of code to convert a number to base 10.  This functionality is built-in to Python.  If your intention is not <a href="/questions/tagged/reinventing-the-wheel" class="post-tag" title="show questions tagged 'reinventing-the-wheel'" rel="tag">reinventing-the-wheel</a>, you should use the <a href="https://docs.python.org/3/library/functions.html?highlight=int#int" rel="nofollow noreferrer"><code>int(x, base=10)</code></a> function.</p>
<h1>Reworked Code</h1>
<pre><code>while True:

    number = input("Enter a number: ")

    while True:
        try:
            base = int(input("Enter the base the number is in: "))
            if base &gt;= 2:
                break
            print("Base should be greater than or equal to 2")
        except ValueError:
            print("Wrong input.  Only integers are allowed")

    try:
        print(int(number, base))
    except ValueError:
        print(f"Unable to convert {number!r} to base {base}")

    while True:
        response = input("Do you want to continue? (y or n): ")
        if response in {'y', 'n'}:
            break
        print("Wrong input")

    if response == 'n':
        break
</code></pre>
<p>Or super condensed:</p>
<pre><code>print("Press Control-C to stop.")
while True:
    try:
        print(int(input("Number: "), int(input("Base: "))))
    except ValueError as err:
        print("Invalid input:", err)
    except KeyboardInterrupt:
        print("Conversions to base-10 complete.")
        break


        
</code></pre>
    </div>