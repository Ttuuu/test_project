<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As an alternative to the "efficiency" focused options in my other answer, here is an option which is just very terse. Given we can't have words &gt; 26 characters which are isograms, this might be just enough? </p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;unordered_set&gt;
#include &lt;cctype&gt;

bool is_isogram(std::string s) {
  std::transform(s.begin(), s.end(), s.begin(), [](unsigned char c) { return std::toupper(c); });
  return std::unordered_set&lt;char&gt;(s.begin(), s.end()).size() == s.size();
}

</code></pre>

<p>It's closer (!) to what one might write in a language like python. </p>

<pre class="lang-py prettyprint-override"><code>def is_isogram(s):
  return len(s) == len(set(s.upper()))

</code></pre>
    </div>