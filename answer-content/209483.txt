<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I spoke with some people on the #d IRC channel, and came up with a few things</p>

<p>The main bit of which was using the recursive function to return the range, rather than the result and using a reference parameter as the actual output. Makes the function a bit "harder" to use, but ultimately makes the implementation much easier and more generalisable (see <code>R</code> template parameter). This also means that the <code>.array</code> and <code>.dup</code> can be removed from the main function</p>

<p>I'd still like a function that pops and returns the value, so repeated <code>.front</code> &amp; <code>.popFront()</code> isn't necessary, but seems like that might be a design decision, like C++'s <code>std::stack::pop</code></p>

<p>Also added some <code>unittest</code> blocks to hold the examples</p>

<pre><code>import std.algorithm;
import std.conv;
import std.file;
import std.range;
import std.stdio;

R sum_metadata(R)(R r, ref int count)
{
    int num_child = r.front;
    r.popFront;
    int num_metadata = r.front;
    r.popFront;

    for (int i; i &lt; num_child; i++) {
        r = r.sum_metadata(count);
    }

    count += r.take(num_metadata).sum;
    return r.dropExactly(num_metadata);
}

R node_value(R)(R r, ref int count)
{
    int num_child = r.front;
    r.popFront;
    int num_metadata = r.front;
    r.popFront;

    int[] child_values;
    for (int i; i &lt; num_child; i++) {
        int val;
        r = r.node_value(val);
        child_values ~= val;
    }

    if (num_child == 0) {
        count += r.take(num_metadata).sum;
    } else {
        // Ignore out of range
        count += r.take(num_metadata).filter!(a =&gt; 0 &lt; a &amp;&amp; a &lt;= child_values.length).map!(a =&gt; child_values[a - 1]).sum;
    }
    return r.drop(num_metadata);
}

void main(string[] args)
{
    auto input = readText(args[1]).split.map!(a =&gt; to!int(a));
    int sum;
    input.sum_metadata(sum);
    writeln("Metadata total: ", sum);
    int val;
    input.node_value(val);
    writeln("Node value: ", val);
}

unittest
{
    auto input = [2, 3, 0, 3, 10, 11, 12, 1, 1, 0, 1, 99, 2, 1, 1, 2];
    int sum;
    input.sum_metadata(sum);
    assert(sum == 138);
}

unittest
{
    auto input = [2, 3, 0, 3, 10, 11, 12, 1, 1, 0, 1, 99, 2, 1, 1, 2];
    int val;
    input.node_value(val);
    assert(val == 66);
}
</code></pre>
    </div>