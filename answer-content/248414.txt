<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As the main point of the question is about performance and not refactoring, I will address the performance of the code.</p>
<p>Unfortunately, the question doesn't include actual numbers, just</p>
<blockquote>
<p>my Insertion sort was way faster than my Selection sort on random input (about one fourth the running time), and Insertion was a clear winner even for its worst case of reverse-sorted input.</p>
</blockquote>
<p>I compiled the above code with GCC 9.2.1 on Linux, because it is the version on the computer I'm currently using.</p>
<p>The results are:</p>
<ul>
<li><p>For the code in the question, random order:</p>
<pre><code>  10350 distinct values sorted
  Selection sort on 16384 items: 78 ms
  Insertion sort on 16384 items: 38 ms
</code></pre>
</li>
<li><p>For inverse sorted input:</p>
<pre><code>  16384 distinct values sorted
  Selection sort on 16384 items: 77 ms
  Insertion sort on 16384 items: 77 ms
</code></pre>
</li>
</ul>
<p>Variation when running it multiple times is around 1ms, so the results should be sufficiently exact.</p>
<p>That means:</p>
<ul>
<li>Your compiler is probably not as good at optimizing the selection sort, or better at optimizing the insertion sort.</li>
<li>It is to be expected that the insertion sort is faster on  random data. That is because the insertion sort has a break condition in the inner loop. While both have a complexity of O(n^2), insertion sort will on average for random data only need to check half of the already sorted data, while selection sort must always check the complete unsorted rest of the data. In the case of reverse sorted input data, both algorithms need the same number inner loop executions.</li>
</ul>
<p>It is correct that insertion moves more data around, but the way you are doing it, you get it basically for free. What that means is that the value to be moved has already been read and available for the following write, and the write goes to a memory location that is already in the cache.<br>
Other architectures and compilers may lead to different results.</p>
<p>In case someone is interested in the math, the number of comparisons for the selection sort is n*(n-1)/2. This is also the worst case number for insertion sort, while the average number for insertion sort on random data is just half that value, n*(n-1)/2/2</p>
    </div>