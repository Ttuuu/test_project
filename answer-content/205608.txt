<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>A Quick Note</h2>

<p>First, welcome to CodeReview.SE! Secondly, welcome to the <code>C#</code> world! Your question in general is likely to receive a lot of opinion based answers, but from a <code>CodeReview</code> standpoint, I'll be glad to point out some things that could be updated. My review will exclude preference type changes such as brace placement; however, be warned that my code is formatted with the opening braces at end of line and excludes braces that aren't needed.</p>

<hr>

<h2>Expression Bodied Methods</h2>

<p>So one cool thing I would like to start with is <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members" rel="nofollow noreferrer">expression bodied methods</a>. These things are awesome for methods you know will always be one line executions, and they can be applied to any method (including events)! Take your <code>res_Click</code> and <code>tie</code> methods for example:</p>

<pre><code>private void res_Click(object sender, EventArgs e) {
    Resetgame();
}
public void tie() {
    MessageBox.Show("Tie!");
}
</code></pre>

<p>These can be easily converted into expression bodied methods:</p>

<pre><code>private void res_Click(object sender, EventArgs e) =&gt; Resetgame();
public void tie() =&gt; MessageBox.Show("Tie!");
</code></pre>

<p>They will both still function in the same manner, but will allow you to clean up some of those excess braces (especially useful in large files with a lot of single line methods). A practical example of the usefulness of these are with <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/using-conversion-operators" rel="nofollow noreferrer">implicit/explicit conversions</a> and <a href="https://msdn.microsoft.com/en-us/library/5tk49fh2.aspx" rel="nofollow noreferrer">operand methods</a> for custom data types. Say you have a two dimensional vector class, which can obviously be converted to three and four dimensional vector objects. There are a lot of methods that have to be written, and a lot of them are single lines:</p>

<pre><code>public static implicit operator Vector4(Vector2 v) =&gt; return new Vector4(v.X, v.Y, 0, 0);
public static implicit operator Vector4(Vector3 v) =&gt; return new Vector4(v.X, v.Y, v.Z, 0);
public static operator Vector4+(Vector4 v1, Vector4 v2) =&gt; return new Vector4(v1.X + v2.X, v1.Y + v2.Y, v1.Z + v2.Z, v1.W + v2.W);
</code></pre>

<hr>

<h2>Documentation</h2>

<p>Another thing I would like to point out is <a href="https://docs.microsoft.com/en-us/dotnet/csharp/codedoc" rel="nofollow noreferrer">documentation for your code</a>. Your method <code>tie</code> contains a comment <code>/**/</code> on entry that tells us what it does. <code>C#</code> has a built in documentation feature that allows you to describe what a method, property, variable, argument, etc is for. For example:</p>

<pre><code>/// &lt;summary&gt;
/// Displays a message box in the event of a tie.
/// &lt;/summary&gt;
public void tie() =&gt; MessageBox.Show("Tie!");
</code></pre>

<p>The text window will actually generate this markup for you when you type <code>///</code> on the line directly above a method, property, variable, etc. This is not only useful when someone else is reviewing your code, but also when you're putting out code for someone else to use in the form of a public API. This markup essentially what is being displayed to you when you're seeing intellisense!</p>

<hr>

<h2>Refactoring</h2>

<p>There is basic level refactoring that can be done:</p>

<ul>
<li>Logical Evaluations</li>
<li>Naming</li>
<li><code>if-elseif-else</code> Structure</li>
</ul>

<p>Overall, your code is well written and is easily readable and refactoring is definitely a matter of opinion. For example extra braces in the large logic tree in the <code>Checkwin</code> method; in my opinion, all of the extra braces aren't needed as they just take up space. I'll start with the easy one here being the logical evaluations in the <code>Playerstatus</code> method.</p>

<pre><code>if (player1 == true)
</code></pre>

<p>Since <code>player1</code> is a <code>bool</code> you can simply rewrite the <code>if</code> as:</p>

<pre><code>if (player1)
</code></pre>

<p>I would change the name of the variable to something like <code>player1sTurn</code>, this makes it easier to understand, as I had to read the comment to ensure I knew what was going on there. I would also change the name of the method to something like <code>DetermineWhosTurnItIs</code>; it doesn't have to be as long, but a more descriptive name is better than a short name that doesn't make sense.</p>

<p>A good practice for naming conventions is:</p>

<ul>
<li>Ensure the name is descriptive.</li>
<li>Use PascalCasing for variables.</li>
<li>Use <a href="https://en.wikipedia.org/wiki/Camel_case" rel="nofollow noreferrer">camelCasing</a> for methods and properties.</li>
<li>Use <a href="https://en.wikipedia.org/wiki/Snake_case" rel="nofollow noreferrer">UPPER_SNAKE_CASE</a> for constants.</li>
</ul>

<p>I'm not saying that everyone follows this pattern, but a lot of companies still use these guidelines to this day. It's best to get into a good habit for naming conventions early on so that it's second nature in the professional world!</p>

<p>I would definitely add comments to your structure there to clarify what is happening in detail.</p>

<p>One of the biggest benefits I see for your code is utilizing a multi-dimensional array.</p>

<hr>

<h2>Using a Muli-Dimensional Array</h2>

<p>Using a <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays" rel="nofollow noreferrer">multi-dimensional array</a> would be a big benefit in a game like <code>Tic Tac Toe</code>. For the simple reason that the game itself is a two-dimensional array. <code>C#</code> allows you to create multi-dimensional arrays and the easiest to follow is the two-dimensional array. Learning it now could help you later on with future projects such as Tetris! For example:</p>

<pre><code>public char[,] gameBoard = new char[,] {
    { 'n', 'n', 'n' },
    { 'n', 'n', 'n' },
    { 'n', 'n', 'n' }
};
</code></pre>

<p>This allows you to visualize the board in code quite easily and is simple to modify!</p>

<pre><code>// Change the top-right slot to an x.
gameBoard[0, 2] = 'x';
// Change the bottom middle slot to an o.
gameBoard[2, 1] = 'o';
// Change the middle first slot to an x.
gameBoard[1, 0] = 'x';
</code></pre>

<p>Then logical evaluation is also easy:</p>

<pre><code>if (gameBoard[0, 0] == gameBoard[0, 1] &amp;&amp; gameBoard[0, 1] == gameBoard[0, 2])
    if (gameBoard[0, 0] == 'x')
        P1win();
    else
        P2win();
</code></pre>

<hr>

<h2>Final Thoughts</h2>

<p>I'm sure there are a few other things that could be touched up in your code, and there is usually <em>100 different ways to do the same thing</em> when it comes to software development. Overall, your code was easy to understand and did what it was supposed to do, so +1 from me! My advice, just keep up the good work and keep learning! I wish you the best of luck in your future endeavors and I hope to see you come back to CodeReview.SE at some point in the future!</p>
    </div>