<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From a quick glance, the code looks pretty OK; good use of structs, relatively self-contained functions, nice indentation. So it's mainly some small stuff that can be improved:</p>

<h2>Use static const variables instead of #define</h2>

<p>Instead of</p>

<pre><code># define HUMAN_PLAYER 'X'
</code></pre>

<p>Write:</p>

<pre><code>static const char HUMAN_PLAYER = 'X';
</code></pre>

<h2>Consider using enums</h2>

<p>Instead of passing a <code>char</code> around to represent the player, you could use an enum instead. This makes it clear that it is a separate type. For example:</p>

<pre><code>typedef enum player {
  NONE = '\0',
  HUMAN_PLAYER = 'X',
  AI_PLAYER = 'O',
} player_t;
</code></pre>

<h2>Use <code>bool</code> types where appropriate</h2>

<p>Instead of returning the integers <code>1</code> and <code>0</code> to indicate success and failure, use the <code>bool</code> type. For example:</p>

<pre><code>#include &lt;stdbool.h&gt;
...
bool has_won(Point last_destination, char player, Board *board) {
  // columns
  for (int i = 1; i &lt; board-&gt;size; i++) {
    if (board-&gt;cells[last_destination.x][i] != player)
      break;
    if (i == board-&gt;size - 1) {
      return true;
    }
  }
}
</code></pre>

<h2>Simplify <code>if (foo) return true; else return false</code></h2>

<p>Just return <code>foo</code> directly! For example:</p>

<pre><code>bool is_a_draw(Board *board) {
  return board-&gt;nmoves_played == pow(board-&gt;size, 2) - 1;
}
</code></pre>

<h2>Avoid floating point functions when working with integers</h2>

<p>The expression <code>pow(board-&gt;size, 2)</code> will convert your integers to doubles, and later on they will probably be converted back to something else. It is best to avoid this, and just write <code>board-&gt;size * board-&gt;size</code>. If you square integers often, write a simple function that does this:</p>

<pre><code>int square(int x) {
  return x * x;
}
</code></pre>

<p>Or in this case, you could maybe store the square of the board size in its own variable.</p>

<h2>Use sizeof(variable) instead of sizeof(type) where possible</h2>

<p>As @chux already mentioned, you have an error using <code>sizeof</code>. It is always best to repeat the variable name instead of its type, and ensure you take the size of the struct itself, not of the pointer. So:</p>

<pre><code>MiniMaxMove *moves = malloc(sizeof *moves * board-&gt;size * board-&gt;size);
</code></pre>

<h2>Don't use arbitrary limits</h2>

<p>You are setting some arbitrary limits for <code>best_score</code>:</p>

<pre><code>int best_score = -10000;
</code></pre>

<p>This in effect puts a limit on your board size. Either you should use the actual lowest value possible for an <code>int</code> here:</p>

<pre><code>#include &lt;limits.h&gt;
...
int best_score = INT_MIN;
</code></pre>

<p>Or initialize it using the first score found:</p>

<pre><code>  int best_move_idx = 0;
  int best_score = moves[0].score;
  if (player == AI_PLAYER) {
    for (unsigned int i = 1; i &lt; moves_size; i++) {
      if (moves[i].score &gt; best_score) {
        ...
</code></pre>

<h2>Always free the memory you allocated</h2>

<p>You called <code>malloc()</code>, but I don't see a <code>free()</code>. In your case, I would do the following to clean up the array properly, while not causing a problem with the <code>return</code> statement:</p>

<pre><code>  ...
  MiniMaxMove best_move = moves[best_move_idx];
  free(moves);
  return best_move;
}
</code></pre>

<h2>Avoid allocating memory if it is not necessary</h2>

<p>Looking closer at the code, you don't actually need to allocate the array <code>moves</code> at all. In the first for-loop in <code>minimax()</code>, you add items to the array, and then later you are just trying to find the best item in the array. You could instead just keep track of only the best item found so far in the first for-loop! So instead of:</p>

<pre><code>moves[moves_size++] = move;
</code></pre>

<p>Don't allocate the array <code>moves</code>, just keep one <code>MiniMaxMove best_move</code> around, and replace the above line with something like:</p>

<pre><code>if (player == AI_PLAYER) {
  if (move.score &gt; best_move.score) {
     best_move = move;
  }
} else {
  if (move.score &lt; best_move.score) {
     best_move = move;
  }
}
</code></pre>
    </div>