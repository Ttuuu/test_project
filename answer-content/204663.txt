<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When generating prime numbers with the sieve of Eratosthenes, you can treat 2 as a special case.  All other prime numbers are odd, so you can increment by 2:</p>

<pre><code>for(int p = 3; p*p &lt;= n; p += 2)
</code></pre>

<p>When you find a prime number <span class="math-container">\$p\$</span>, you have already eliminated all multiples of prime numbers below <span class="math-container">\$p\$</span>.  This means starting at <span class="math-container">\$2p\$</span> and going up is eliminating already eliminated multiples.  You can start at <span class="math-container">\$p^2\$</span>, and since you are only concerned with odd numbers, go up multiples of <span class="math-container">\$2p\$</span></p>

<pre><code>        for(int j = p*p; j &lt;= n; j += 2*p)
</code></pre>

<p>When looping over the array for printing, you could again skip all even numbers, by going up by 2.  But make sure you start on an odd number!</p>

<pre><code>m |= 1;
for(int i = m; i &lt;= n; i += 2) 
</code></pre>

<p>If you reversed your sense of the flag array, so <code>true</code> means "not prime", you wouldn't have to loop through the array to set all elements to <code>true</code> at the start.  They would start off as <code>false</code>, which would mean "prime".</p>

<p>Marking all prime numbers on one pass, and then looping through your marked array printing out prime numbers is looping twice for possibly no reason.  You can simply print out the prime numbers as you find them, if it is inside the required range.  It would require some juggling, and optimization tricks to ensure you print out a number only when required, and only exactly once.</p>

<hr>

<p>You generate the sieve 10 times, if you have 10 test cases.  Maybe you could examine all 10 test cases, find the largest end point, and generate the sieve once???</p>
    </div>