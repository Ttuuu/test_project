<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug with <code>WHERE</code> conditions</h2>

<p>I tried running the sample code:</p>

<blockquote>
<pre><code>$test = new QueryBuilder();
echo $test
    -&gt;table()
    -&gt;select(['id', 'name'])
    -&gt;Where(['name= \'john\''])
    -&gt;whereNotIn(['id &gt; 1'])
    -&gt;get();
</code></pre>
</blockquote>

<p>It threw an exception because the argument to the <code>table</code> method was null (which would yield an empty array per the default argument value), so I changed it to pass an array with a single string literal <code>['users']</code> to <code>-&gt;table()</code>. Then when I ran it again, I saw the string literal returned below:</p>

<blockquote>
<pre><code>SELECT id, name FROM users  WHERE name= 'john'  NOTIN NOT IN id &gt; 1 
</code></pre>
</blockquote>

<p>Correct me if this is wrong but most SQL engines need to have the predicates combined with the <code>AND</code> and <code>OR</code> keywords, and those where conditions <code>NOTIN NOT IN</code> would definitely yield an error. It is unclear how the <code>NOT IN</code> should be combined with the <code>id &gt; 1</code>... My best guess is that a sub-query would be needed for that to work... something like </p>

<blockquote>
<pre><code>SELECT id, name FROM users  WHERE name= 'john'  AND id NOT IN (SELECT id FROM users WHERE id &gt; 1)
</code></pre>
</blockquote>

<p>Given that issue, I would say to your question "<em>Is this class reliable enough?</em>": No it isn't reliable, but maybe if that issue is resolved then it would be.</p>

<h3>Constructor is useless</h3>

<p>The only affects of the constructor are to set the two properties (instance variables) to primitive values (i.e. an empty string literal and <code>null</code>). Those could be initialized when declared since those values can be evaluated at compile time. Thus the constructor can be removed once those initializations are added to the declarations:</p>

<pre><code>class Builder {
    private $query = '';
    private $table = null;
</code></pre>

<p>One advantage here would be that if this class had a parent class, then any method that overrides the same method in the parent class would need to have the same signature or at least pass sufficient parameters when calling the parent method is needed. </p>

<h3>Variables declared even if not used</h3>

<p>While the next section describes how to eliminate variables like <code>$index</code>, I do notice that variable is often declared as a local varible assigned the value <code>1</code> at the start of methods (like <code>__call()</code>, <code>table()</code>, <code>select()</code>). However in some cases the method may return early - for example in <code>table()</code> an exception is thrown if the <code>$tables</code> argument is null or empty. While it is only an integer, it is wise to not assign values to variables until they are needed. Imagine a large object was assigned to a variable there after calling a function (or multiple functions) - if the method returned early, then the CPU cycles used to get the variable from the function would then be wasted.</p>

<h3>Use <code>implode()</code> instead of conditionally appending seperators</h3>

<p>I see a few places like the block from <code>select()</code> below, where array elements are appended to the <code>query</code> property and then commas are added if end of the list hasn't been reached:</p>

<blockquote>
<pre><code>foreach($cols as $value) {
    $this-&gt;query .= $value;
    if($index &lt; count($cols)) {
        $this-&gt;query .= ', ';
    }
    $index++;
}
</code></pre>
</blockquote>

<p>That can be simplified using <a href="http://php.net/implode" rel="nofollow noreferrer"><code>implode()</code></a> with the comma and space used as the <a href="http://php.net/manual/en/function.implode.php#refsect1-function.implode-parameters" rel="nofollow noreferrer"><code>$glue</code></a> and the array <code>$cols</code> as the <a href="http://php.net/manual/en/function.implode.php#refsect1-function.implode-parameters" rel="nofollow noreferrer"><code>$pieces</code></a> parameters.</p>

<pre><code>$this-&gt;query .= implode(', ', $cols);
</code></pre>

<p>And this makes <code>$index</code> superfluous so it can be removed.   </p>
    </div>