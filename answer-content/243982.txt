<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would make a few suggestions, rather than just saving the input string it would be better, as you suggest, to save the output of the <code>get_rows</code> function in memory, so you don't have to recreate it every time.
Similarly when you want an individual row or column, it seems inefficient to gather all the rows, (and then all the columns) just to reject all but one of them.
Your comments say <code>produces i-th (column/row)...</code> but the variable is referred to as <code>index</code></p>
<p>Minor points:
You don't need to save <code>rows</code> as a variable in _get_columns, you can just use <code>[list(row) for row in zip(*self._get_rows())]</code></p>
<p>you could reduce _get_rows to one line : <code>[[int(char) for char in row_string.split()] for row_string in self.matrix_string.split('\n')]</code></p>
<p>I'm assuming that you don't need to check if the input is invalid, because that isn't part of the testing suite. However you may want to do it anyway if you plan on using this class again.</p>
<p>In terms of style the code is good. The first comment under <code>class Matrix</code> doesn't really say anything and there are more newlines than are necessary, but other than that everything looks good.</p>
<p>You could try something like:</p>
<pre><code>class Matrix:
    """Class representation of an integer matrix indexed from 1
    ...

    Attributes
    ----------
    rows: List[List(int)]
        A list of the rows of values in the matrix.

    Methods
    -------
    row(self, i)
        returns the i-th row.

    column(self, i)
        returns the i-th column.
    """

    def __init__(self, matrix_string):
        """Save a list of rows from the input string.
        - matrix_string: A space and new line seperated string of values
        in the matrix.
        """
        self.rows = self._get_rows(matrix_string)

    def _get_rows(self, matrix_string):
        """Produce a list of rows of the matrix.
        - matrix_string: A space and new line seperated string of values
        in the matrix.
        """
        rows = []
        for row_string in matrix_string.split('\n'):
            rows.append([int(char) for char in row_string.split()])
        return rows

    def _get_columns(self):
        """Produce a list of columns of the matrix."""
        return [list(row) for row in zip(*self.rows)]

    def row(self, i):
        """Produce i-th row of the matrix with first index being 1."""
        return self.rows[i - 1]

    def column(self, i):
        """Produce i-th column of the matrix with first index being 1."""
        return [row[i - 1] for row in self.rows]

</code></pre>
<p>or you could drop the <code>_get_rows</code> and change the <code>__init__</code> to:</p>
<pre><code>    def __init__(self, matrix_string):
        """Save a list of rows from the input string.
        - matrix_string: A space and new line seperated string of values
        in the matrix.
        """
        self.rows = [[int(x) for x in row.split()] for row in matrix_string.split("\n")]

</code></pre>
<p>In terms of performance:</p>
<p>using cProfile and the following script:</p>
<pre><code>if __name__ == "__main__":
    for _ in range(100000):
        matrix = Matrix("1 2 3 4\n5 6 7 8\n9 8 7 6\n1000 2000 3000 4000")
        for i in range(1, 5):
            matrix.column(i)
            matrix.row(i)

</code></pre>
<p>Produces for the old matrix definition:
<code>12900228 function calls (12900222 primitive calls) in 10.239 seconds</code>
For the my definition:
<code>1900228 function calls (1900222 primitive calls) in 1.359 seconds</code></p>
    </div>