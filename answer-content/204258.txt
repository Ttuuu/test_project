<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, there is a more elegant way.<br>
I recommend creating a new utility module to hold your formatBooks function.  Import the module into any component that needs it.  </p>

<p>A good approach is:</p>

<ol>
<li>Create very simple Controls. </li>
<li>Create the data you wish you had to keep your control simple. </li>
<li>Test your control, with that data. </li>
<li>Select/transform your data from the data you have to the data you want. </li>
<li>Finally use your transformed data</li>
</ol>

<p><strong>1. Create very simple Controls.</strong> </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const Book = props =&gt; (&lt;li&gt;{props.title}&lt;/li&gt;)
const Header = props =&gt; (&lt;li className='header'&gt;{props.shelfTitle}&lt;/li&gt;)
const Group = props =&gt; {
    const {shelfTitle, books} = props;
    const booksMap = title =&gt; (&lt;Book title={title}/&gt;)
    const booksList = books.map(booksMap)
    //prefer &lt;React.Fragment&gt; over &lt;div&gt;
    return (
        &lt;div&gt;
            &lt;Header shelfTitle={shelfTitle}/&gt;
            {booksList}
        &lt;/div&gt;)
}
const GroupList = props =&gt; {
    const groupMap = d =&gt; (&lt;Group  shelfTitle={d.shelfTitle} books={d.books}/&gt;)
    const booksList = props.bookData.map(groupMap)
    return (&lt;ul&gt;
        {booksList}
    &lt;/ul&gt;)
}</code></pre>
</div>
</div>


<p><strong>2. Create the data you wish you had to keep your control simple.</strong> </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const groupedBooksData = [
    {shelfTitle:"Read", books: ["Deep Work"]},
    {shelfTitle: "Want To Read", books:["Antifragile", "MindSet"]}
]</code></pre>
</div>
</div>


<p><strong>3. Test your control, with that data.</strong> </p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const groupedBooksData = [
    {shelfTitle:"Read", books: ["Deep Work"]},
    {shelfTitle: "Want To Read", books:["Antifragile", "MindSet"]}
]
const Book = props =&gt; (&lt;li&gt;{props.title}&lt;/li&gt;)
const Header = props =&gt; (&lt;li className='header'&gt;{props.shelfTitle}&lt;/li&gt;)
const Group = props =&gt; {
    const {shelfTitle, books} = props;
    const booksMap = title =&gt; (&lt;Book title={title}/&gt;)
    const booksList = books.map(booksMap)
    //prefer &lt;React.Fragment&gt; 
    return (
        &lt;div&gt;
            &lt;Header shelfTitle={shelfTitle}/&gt;
            {booksList}
        &lt;/div&gt;)
}
const GroupList = props =&gt; {
    const groupMap = d =&gt; (&lt;Group  shelfTitle={d.shelfTitle} books={d.books}/&gt;)
    const booksList = props.bookData.map(groupMap)
    return (&lt;ul&gt;
        {booksList}
    &lt;/ul&gt;)
}

// Render it
ReactDOM.render(
&lt;GroupList bookData={groupedBooksData} /&gt;,
document.getElementById("react")
);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>li {
  list-style-type: none;
}

.header {
  font-weight: bold;
  width: 100%;
  color: white;
  background-color: black;
}

li {
  padding: 4px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="react"&gt;&lt;/div&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js"&gt;&lt;/script&gt;</code></pre>
</div>
</div>


<p><strong>4. Select/transform your data from the data you have to the data you want.</strong> 
Often data you get from an api isn't in the form/shape you want.  This is a good time to practice TDD.  Avoid forEach in favor of map, reduce, filter and sort.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>//data you have
const books = [  
    { title: "Deep Work", shelf: "read" },
    { title: "Antifragile", shelf: "wantToRead"  },
    { title: "Mindset", shelf: "wantToRead" },  
    { title: "How to Win Friends and Influence People", shelf: "currentlyReading"  },
    { title: "The Power of Habit", shelf: "read"  },    
    { title: "Fooled By Randomness", shelf: "listenTo" }
]

const reduceToLists = (accumulator, item, i) =&gt; { 
    const oldTable = accumulator[item.shelf] || []
    oldTable.push(item.title)
    accumulator[item.shelf] = oldTable
    console.log(i, item, accumulator)
    return accumulator; 
}
const formatBooks = list =&gt; list.reduce(reduceToLists, {})
const result = formatBooks(books)
// reduceToLists is called books.length times and 
// has a console.log(
//i              item                                accumulator)
//0 {title: "Deep Work", shelf: "read"}         {read: [Deep Work]}
//1 {title: "Antifragile", shelf: "wantToRead"} {read: [Deep Work], wantToRead: [Antifragile]}
//2 {title: "Mindset", shelf: "wantToRead"}     {read: [Deep Work], wantToRead: [Antifragile, Mindset]}
//.....

console.log("Data you want", result);</code></pre>
</div>
</div>


<p>Prefer pure functions and immutable data.  This function is equivalent to reduceToLists but is pure and immutable.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>//Data you have
const books = [  
    { title: "Deep Work", shelf: "read" },
    { title: "Antifragile", shelf: "wantToRead"  },
    { title: "Mindset", shelf: "wantToRead" },  
    { title: "How to Win Friends and Influence People", shelf: "currentlyReading"  },
    { title: "The Power of Habit", shelf: "read"  },
    { title: "Clean Code", shelf: "read"  },
    { title: "Fooled By Randomness", shelf: "listenTo" },
    { title: "Purple Cow", shelf: "read"  },
    
]

const reduceToLists = (accumulator, item, i) =&gt; { 
    const oldTable = accumulator[item.shelf] || []
    oldTable.push(item.title)
    accumulator[item.shelf] = oldTable
    console.log(i, item, accumulator)
    return accumulator; 
}
const formatBooks = list =&gt; list.reduce(reduceToLists, {})


const titleCaseMap = {
    wantToRead: "Want To Read",
    read: "Read",
    currentlyReading: "Currently Reading",
    listenTo: "Listen To"
}// actually would use: https://github.com/blakeembrey/change-case 


//use formatBooks
const transformListOfBooks = books =&gt; {
    const booksObj = formatBooks(books); //{read: [Deep Work, ...], wantToRead: [Antifragile, Mindset, ...]}
    const keys = Object.keys(booksObj); //[read, wantToRead, currentlyReading, ...]
    const mapToTitle = (key, i) =&gt; { 
        const result = {
            title: titleCaseMap[key],
            list: booksObj[key]
        };
        console.log(i, key, result)
        return result;
    }
    //without console.log above can be simplified to 
    //const mapToTitle = key =&gt; ({title: titleCaseMap[key], list: booksObj[key]}) 
    return keys.map(mapToTitle)  
}

console.log("Data you want", transformListOfBooks(books))</code></pre>
</div>
</div>


<p><strong>5.  Finally use selected data</strong></p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>//Data you have
const books = [  
    { title: "Deep Work", shelf: "read" },
    { title: "Antifragile", shelf: "wantToRead"  },
    { title: "Mindset", shelf: "wantToRead" },  
    { title: "How to Win Friends and Influence People", shelf: "currentlyReading"  },
    { title: "The Power of Habit", shelf: "read"  },
    { title: "Clean Code", shelf: "read"  },
    { title: "Fooled By Randomness", shelf: "listenTo" },
    { title: "Purple Cow", shelf: "read"  },
    
]

const reduceToLists = (accumulator, item, i) =&gt; { 
    const oldTable = accumulator[item.shelf] || []
    oldTable.push(item.title)
    accumulator[item.shelf] = oldTable
    console.log(i, item, accumulator)
    return accumulator; 
}
const formatBooks = list =&gt; list.reduce(reduceToLists, {})


const titleCaseMap = {
    wantToRead: "Want To Read",
    read: "Read",
    currentlyReading: "Currently Reading",
    listenTo: "Listen To"
}// actually would use: https://github.com/blakeembrey/change-case 


//use formatBooks
const transformListOfBooks = books =&gt; {
    const booksObj = formatBooks(books); //{read: [Deep Work, ...], wantToRead: [Antifragile, Mindset, ...]}
    const keys = Object.keys(booksObj); //[read, wantToRead, currentlyReading, ...]
    const mapToTitle = key =&gt; ({shelfTitle: titleCaseMap[key], books: booksObj[key]}) 
    return keys.map(mapToTitle)  
}



const Book = props =&gt; (&lt;li&gt;{props.title}&lt;/li&gt;)
const Header = props =&gt; (&lt;li className='header'&gt;{props.shelfTitle}&lt;/li&gt;)
const Group = props =&gt; {
    const {shelfTitle, books} = props;
    const booksMap = title =&gt; (&lt;Book title={title}/&gt;)
    const booksList = books.map(booksMap)
    //prefer &lt;React.Fragment&gt; 
    return (
        &lt;div&gt;
            &lt;Header shelfTitle={shelfTitle}/&gt;
            {booksList}
        &lt;/div&gt;)
}
const GroupList = props =&gt; {
    const groupMap = d =&gt; (&lt;Group  shelfTitle={d.shelfTitle} books={d.books}/&gt;)
    const booksList = props.bookData.map(groupMap)
    return (&lt;ul&gt;
        {booksList}
    &lt;/ul&gt;)
}
const dataYouWant= transformListOfBooks(books);
// Render it
ReactDOM.render(
&lt;GroupList bookData={dataYouWant} /&gt;,
document.getElementById("react")
);</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>li {
  list-style-type: none;
}

.header {
  font-weight: bold;
  width: 100%;
  color: white;
  background-color: black;
}

li {
  padding: 4px;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;div id="react"&gt;&lt;/div&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js"&gt;&lt;/script&gt;</code></pre>
</div>
</div>

    </div>