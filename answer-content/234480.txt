<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This strategy will work for any <code>IO</code> action, and so should be generalized.</p>

<pre><code>once :: IO a -&gt; IO (IO a)
once ioa = do
  cache &lt;- newIORef Nothing
  return $ readIORef cache &gt;&gt;= \case
    Nothing -&gt; do
      a &lt;- ioa
      writeIORef cache $ Just a
      return a
    Just a -&gt; return a

main = do
  fileContentsGetter     &lt;- once readFileContents
  -- First time reading the file accesses the disk
  _                      &lt;- try fileContentsGetter
  fileContentsFromMemory &lt;- try fileContentsGetter
  print fileContentsFromMemory
</code></pre>

<p>Note that if two threads call the getter at the same time, they will both find the cache empty, and both read the file. <code>System.IO.Memoize</code> <a href="https://hackage.haskell.org/package/io-memoize-1.1.1.0/docs/System-IO-Memoize.html#v:once" rel="nofollow noreferrer">provides</a> a <code>once</code> that isn't vulnerable to this.</p>

<p>(<code>catch</code> and re<code>throw</code> in the definition of <code>readFileContents</code> lets you rescue <code>logEx</code>.)</p>
    </div>