<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Prelude</h2>

<blockquote>
  <p>I'm using the static member Depth to keep track of how deep the
  visitor has gone. Could it be problematic having state on my extension
  methods static class?</p>
</blockquote>

<p>It would be uncommon. In fact, I wouldn't use extension methods to begin with. Tree walking should be performed by a dedicated tree walker.</p>

<blockquote>
  <p>Would the SurveyPart abstract class make more sense as an interface?</p>
</blockquote>

<p>I would definately keep the abstract class, but perhaps it could implement an interface. I don't think it would hurt the design to have an interface as well.</p>

<blockquote>
  <p>Am I using Visitor and Composite in the right way, or am I borking
  them up?</p>
</blockquote>

<ul>
<li>You have implemented the <a href="https://www.infoworld.com/article/3173065/implementing-the-composite-design-pattern-in-c.html" rel="nofollow noreferrer">Composite</a> pattern correctly.</li>
<li>This is a good example of the <a href="https://exceptionnotfound.net/visitor-the-daily-design-pattern/" rel="nofollow noreferrer">Visitor</a> pattern. I don't think you have implemented this pattern correctly. What you did do is implement in the spirit of the pattern: "<em>Visitor lets you define a new operation without changing the classes of the elements on which it operates.</em>"</li>
</ul>

<p><strong>Tree Walking</strong></p>

<p>Your survey project is a perfect example of how to walk a tree of objects. There are two common patterns for walking a tree. They are both used heavely in compiler generators. A good source for understanding the difference is given <a href="https://saumitra.me/blog/antlr4-visitor-vs-listener-pattern/" rel="nofollow noreferrer">here</a> .</p>

<ol>
<li>Visitor Pattern</li>
<li>Listener Pattern</li>
</ol>

<p>The main difference is that a visitor acts upon the caller whenever it gets accepted by that caller, while a listener gets notified about the steps in a tree walk over the caller. The listener requires a tree walker to get called. All will become clear in my proposed solution further in the review.</p>

<blockquote>
  <p><strong>The text rendering of your survey fits better as a listener pattern.</strong></p>
</blockquote>

<p>pseudo-code:</p>

<pre><code>- tree walker: walks survey
- listener: writes 'hello survey'
- tree walker: walks section
- listener: pushes indent
- listener: writes 'hello section'
- ..
- tree walker: exits section
- listener: pops indent
- tree walker: exits survey
- listener: pops indent
</code></pre>

<hr>

<h2>Model Design</h2>

<p>I would keep the abstract class, accomodate it with an interface, and see no reason why <code>Children</code> have to be abstract. Since the class is abstract, it could do with a protected constructor.</p>

<blockquote>
<pre><code> public abstract class SurveyPart
 {
     public abstract List&lt;SurveyPart&gt; Children { get; set; }
 }
</code></pre>
</blockquote>

<pre><code>public interface ISurveyPart
{
    IList&lt;ISurveyPart&gt; Children { get; set; }
}

public abstract class SurveyPart : ISurveyPart
{
    public IList&lt;ISurveyPart&gt; Children { get; set; }

    protected SurveyPart() {
        Children = new List&lt;ISurveyPart&gt;();
    }
}
</code></pre>

<p>The derived classes can then be simplified. You no longer have to create <code>Children</code> for each of them. I have also made a design decision to include <code>Survey</code> as derived type of <code>SurveyPart</code>. <a href="https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument?view=netframework-4.8" rel="nofollow noreferrer">Many tree API's</a> allow for the container to be part of the nodes.</p>

<pre><code>public class Survey : SurveyPart
{
    public Survey() { }
}

public class Question : SurveyPart
{
    public string QuestionText { get; set; }
    public Question() {}
}

public class Section : SurveyPart
{
    public string Header { get; set; }
    public Section() { }
}
</code></pre>

<hr>

<h2>Pattern Design</h2>

<p>As suggested in the foreword, I would opt for a listener pattern. However, you could combine it neatly with the visitor pattern. So let's do that :-)</p>

<p>First, we'll have to create some interfaces. </p>

<pre><code>public interface ISurveyListener
{
    void Enter();
    void Enter(ISurveyPart surveyPart);
    void Exit(ISurveyPart surveyPart);
    void Exit();
}

public interface ISurveyVisitor
{
    void Visit(ISurveyPart surveyPart);
}
</code></pre>

<p>It is very important to see how the listener and visitor each have their own way of dealing with <code>ISurveyPart</code>. <code>ISurveyListener</code> gets called by <code>SurveyTreeWalker</code> and <code>ISurveyVisitor</code> gets called by <code>SurveyPart</code>.</p>

<pre><code>public interface ISurveyPart
{
    IList&lt;ISurveyPart&gt; Children { get; set; }
    void Accept(ISurveyVisitor visitor);
}

public abstract class SurveyPart : ISurveyPart
{
    public IList&lt;ISurveyPart&gt; Children { get; set; }

    protected SurveyPart() {
        Children = new List&lt;ISurveyPart&gt;();
    }

    public virtual void Accept(ISurveyVisitor visitor) {
        if (visitor == null) return;
        visitor.Visit(this);
        if (Children == null) return;
        foreach (var child in Children) {
            child.Accept(visitor);
        }
    }
}

public class SurveyTreeWalker
{
    public static void Walk(ISurveyPart surveyPart, ISurveyListener listener) {
        listener.Enter();
        WalkNode(surveyPart, listener);
        listener.Exit();
    }

    public static void WalkNode(ISurveyPart surveyPart, ISurveyListener listener) {
        if (surveyPart == null) return;
        listener.Enter(surveyPart);
        if (surveyPart.Children != null) {
            foreach (var child in surveyPart.Children) {
                WalkNode(child, listener);
            }
        }
        listener.Exit(surveyPart);
    }
}
</code></pre>

<hr>

<h2>Text Rendering</h2>

<p>Now that we have our model and patterns ready, we can implement <code>SurveyTextRenderer</code>. It is both a <code>ISurveyVisitor</code> and <code>ISurveyListener</code>. For rendering the entire tree, we will use it as listener.</p>

<p>We first make a base class that adheres to our patterns. 3 abstract <code>Render</code> methods are available for derived classes to render the survey parts to text. There is functionality for writing with indentations: <code>PushIndent</code>, <code>PopIndent</code>, <code>Write</code>, <code>WriteLine</code>. The visitor pattern is implemented as to render the accepting survey part. The listener pattern is implemented as to visit the survey parts and deal with indentations.</p>

<pre><code>public abstract class SurveyTextRendererBase : ISurveyVisitor, ISurveyListener
{
    public const string DefaultIndentToken = "\t";
    public TextWriter Writer { get; set; }
    public string IndentToken { get; set; }
    protected string IndentText { get { return string.Join(string.Empty, indent); } }

    private Stack&lt;string&gt; indent;
    private ISurveyPart rootPart;

    protected SurveyTextRendererBase(TextWriter writer) {
        Writer = writer;
        IndentToken = DefaultIndentToken;
    }

    protected abstract void Render(Survey survey);
    protected abstract void Render(Question question);
    protected abstract void Render(Section section);

    protected virtual void Render(ISurveyPart surveyPart) {
        if (surveyPart == null) return;
        if (surveyPart is Survey) Render(surveyPart as Survey);
        if (surveyPart is Question) Render(surveyPart as Question);
        if (surveyPart is Section) Render(surveyPart as Section);
    }

    public void Visit(ISurveyPart surveyPart) {
        Render(surveyPart);
    }

    public void Enter() {
        indent = new Stack&lt;string&gt;();
    }

    public void Enter(ISurveyPart surveyPart) {
        if (rootPart == null) {
            rootPart = surveyPart;
        } else {
            PushIndent();
        }
        Visit(surveyPart);
    }

    public void Exit(ISurveyPart surveyPart) {
        if (surveyPart != rootPart) {
            PopIndent();
        }
    }

    public void Exit() {
        indent = null;
        rootPart = null;
    }

    protected void Write(string text) {
        Writer.Write(string.Format("{0}{1}", IndentText, text));
    }

    protected void WriteLine(string text) {
        Writer.WriteLine(string.Format("{0}{1}", IndentText, text));
    }

    protected void PushIndent() {
        indent.Push(IndentToken);
    }

    protected bool PopIndent() {
        if (indent.Any()) {
            indent.Pop();
            return true;
        }
        return false;
    }
}
</code></pre>

<p>The specific class <code>SurveyTextRenderer</code> performs the rendering as specifed in the OP's situation.</p>

<pre><code>public class SurveyTextRenderer : SurveyTextRendererBase
{
    public SurveyTextRenderer(TextWriter writer) 
        : base (writer) {
    }

    protected override void Render(Survey survey) {
        WriteLine("Survey");
        WriteLine(new string('-', "Survey".Length));
    }

    protected override void Render(Question question) {
        WriteLine("Q: " + question.QuestionText);
    }

    protected override void Render(Section section) {
        WriteLine("S:" + section.Header);
    }
}
</code></pre>

<hr>

<h2>Usage Scenario</h2>

<p>Let's put the example data in a method <code>CreateTestSurvey</code>. Now we can perform the following test and get the output the OP requested.</p>

<pre><code>public static void Main()
{
    var survey = CreateTestSurvey();
    var canvas = new StringBuilder();

    using (var writer = new StringWriter(canvas)) 
    {
        SurveyTreeWalker.Walk(survey, new SurveyTextRenderer(writer));
    }

    Console.Write(canvas.ToString());
    Console.ReadKey();
}
</code></pre>
    </div>