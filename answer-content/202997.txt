<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Classes</h1>

<p>There are a few things you can do to simplify:</p>

<pre><code>std::vector&lt;std::pair&lt;Word, Occurences&gt;&gt; most_frequent_words(const std::map&lt;Word, Occurences&gt;&amp; words_with_occurences);
std::vector&lt;Word&gt; longest_words(const std::map&lt;Word, Occurences&gt;&amp; words_with_occurences);
std::vector&lt;Word&gt; shortest_words(const std::map&lt;Word, Occurences&gt;&amp; words_with_occurences);
</code></pre>

<p>First, I want to pay attention to:</p>

<pre><code>std::vector&lt;std::pair&lt;Word, Occurences&gt;&gt; most_frequent_words(const std::map&lt;Word, Occurences&gt;&amp; words_with_occurences);
</code></pre>

<p>in particular. Are you trying to return a list of the most frequent words? Or are you trying to return the most frequent words <em>and</em> their frequency? I would consider separating into two functions: a function that, given a particular word, retrieves the number of occurrences of that word, and one that simply gets a list of the most frequent words.</p>

<p>There are some caveats to this (regarding efficiency). Now, let's think about something more important. You always pass: <code>const std::map&lt;Word, Occurences&gt;&amp; words_with_occurences</code> into each function. Seems kind of repetitive.</p>

<p>The initial temptation is to create a global variable called <code>words_with_occurences</code> that <code>most_frequent_words</code>, <code>longest_words</code> and <code>shortest_words</code> use instead of the parameter you have suggested, but as it has been said multiple times, global variables are bad. Class members are not though!</p>

<p>I am rather surprised you have not used a class, so I am uncertain if you have any exposure to classes. I am not entirely sure what a good C++ tutorial for classes is but maybe someone else can help with that.</p>

<p>Once you acquire a basic understanding of classes the outline is as follows:</p>

<ol>
<li>Create a <code>class</code> call it something like <a href="https://en.wikipedia.org/wiki/N-gram" rel="nofollow noreferrer"><code>Ngram</code></a>. This class is responsible for handling data related to word count and frequency.</li>
<li>In the constructor, create <code>words_with_occurrences</code> member that can be later referred to by other methods.</li>
<li>Now you can define the <code>most_frequent_words</code> <code>longest_words</code> and <code>shortest_words</code> without the <code>words_with_occurrences</code> parameter you have supplied.</li>
<li>Any <code>Ngram</code> object should have an initialization parameter that specifies the data source to generate <code>words_with_occurrences</code> from.</li>
</ol>

<h1>FLUID</h1>

<p>Creating a GUI can be annoying, there are often multiple ways to assist with the creation of a GUI. Often, even if a GUI is built on top of a language, there is another language/language extension/tool that helps actually create the GUI.</p>

<p>For instance, developing and iPhone app you have Swift or Objective-C as the "underlying language" and a tool like <a href="https://developer.apple.com/xcode/interface-builder/" rel="nofollow noreferrer">Interface Builder</a>. Android has a similar set of tools. Developing on the web, roughly speaking, you have HTML for structuring the contents of the code, CSS for styling, and Javascript as the "underlying language".</p>

<p>It is a little difficult express exactly what I mean by "underlying language". In the case of HTML/CSS/JavaScript, HTML and CSS are not used for heavy computation, nor or they often used for dynamically generating content. Javascript on the other hand is.</p>

<p>In the case of FLTK, <a href="http://www.fltk.org/doc-2.0/html/index.html" rel="nofollow noreferrer">FLUID</a> takes a similar role to (at least) HTML and, in many cases, be used over C++ to describe the static parts of your user interface. The parts of your GUI that are static (don't change) should probably be designed with FLUID, it will vastly simplify much of your code.</p>
    </div>