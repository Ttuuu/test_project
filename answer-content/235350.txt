<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All enumerations have a default <code>valueOf(String)</code> method that throw an <code>IllegalArgumentException</code> so your first idea is coherent.</p>

<p>I would say that it depends (..). It depends of your use cases:</p>

<ul>
<li>If he conversion would be called form an unsafe (user/api) input, then there are chances that you receive an unexpected symbol. And using <code>Optional</code> will force the developer to handle that case more explicitely. </li>
<li>If the convesrion is made from a safe input (code/config), then you can live with the exception.</li>
</ul>

<p>In the book <em>Effective Java</em>  from <em>Joshua Bloch</em> (Addison-Wesley Professional, 978-0134685991) there is a full chapter on that subject (in the 2nd edition):</p>

<blockquote>
  <p>Enum types have an automatically generated valueOf(String) method that
  translates a constantâ€™s name into the constant itself.</p>
  
  <p>[..]</p>
  
  <p>The following code
  (with the type name changed appropriately) will do the trick for any enum, so long
  as each constant has a unique string representation: </p>
</blockquote>

<pre><code>// Implementing a fromString method on an enum type
private static final Map&lt;String, Operation&gt; stringToEnum
        = new HashMap&lt;String, Operation&gt;();
static { // Initialize map from constant name to enum constant
    for (Operation op : values())
        stringToEnum.put(op.toString(), op);
    }

// Returns Operation for string, or null if string is invalid
public static Operation fromString(String symbol) {
    return stringToEnum.get(symbol);
}
</code></pre>

<p>That chapter (and the whole book) is worth the read: <em>CHAPTER 6 ENUMS AND ANNOTATIONS</em></p>
    </div>