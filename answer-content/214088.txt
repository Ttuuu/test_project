<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Linear in space</h3>

<p>Both are linear in space.  </p>

<p>The first one is linear because the <code>StringBuilder</code> makes a copy of the string.  </p>

<p>The second one is linear because <code>toCharArray</code> makes a copy of the string.  We know it can't use the backing array of the string, because the string is immutable.  Clearly you can modify the character array.  We can ignore the swap variable (<code>c</code>), as it is either constant space or </p>

<p>We can consider a Java compiler (even if none currently work this way) that would release the backing array to the <code>toCharArray</code>, but we can't guarantee that.  Because the calling code may want to use the string <em>after</em> calling this method.  So the assumption in the method is that we are creating a new array.  </p>

<p>If the input is a string and the output is a different string (and we can't change the original string, so it has to be different), then linear time is the best we could possibly do.  So even without the intermediate variable, these would still be linear in space.  Both create new strings.  </p>

<h3>Linear in time</h3>

<p>Both are linear in time.  </p>

<p>The first one does <span class="math-container">\$n\$</span> iterations with one <code>append</code> operation per iteration.  The <code>append</code> operations should be constant time.  There may be occasional copy operations that can be amortized to be constant time per <code>append</code> operation or linear time overall.  That's <span class="math-container">\$\mathcal{O}(n)\$</span>.  </p>

<p>The second one does <span class="math-container">\$\frac{n}{2}\$</span> iterations with two array assignments per iteration.  That's also linear, <span class="math-container">\$\mathcal{O}(n)\$</span>.  Because <span class="math-container">\$\frac{n}{2}\$</span> grows linearly with <span class="math-container">\$n\$</span> and two is a constant.  </p>

<h3>Constant space</h3>

<p>To have a method be constant in space, it needs to return the same memory that brings the input.  E.g. </p>

<pre><code>public void reverse(char[] chars) {
    for (int i = 0, j = chars.length - 1; i &lt; j; i++, j--) {
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
    }
}
</code></pre>

<p>This is constant in space and linear in time.  But it neither takes nor returns a string.  </p>

<h3>Constant space and time</h3>

<p>There's a sort of backwards way of reversing a string in constant time and space.  </p>

<pre><code>class ReversedString {

    private String string;

    public ReversedString(String string) {
        this.string = string;
    }

    public char charAt(int index) {
        return string.charAt(string.length() - 1 - index);
    }

}
</code></pre>

<p>But we wouldn't be able to just use this as a string without creating a new string.  The only operation that works (so far) is <code>charAt</code>.  We might be able to make other operations work, but not all of them.  In particular, a <code>toString</code> would be linear in time and space, just like the original methods.  Because it would have to make a new string of the same length.  </p>
    </div>