<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Assuming you define min and max (or use std::min, std::max), you can do this:</p>

<pre><code>int low, mid, high;
// Find the minimum of number 1 and the minimum of number 2 and number 3.
low = std::min(num1, std::min(num2, num3));
// Find the maximum of the minimum of number 1 and number 2 and the minimum of number 2 and number 3.
mid = std::max(std::min(num1, num2), std::min(num2, num3));
// Find the maximum of number 1 and the maximum of number 2 and number 3.
high = std::max(num1, std:max(num2, num3));
</code></pre>

<p>Which basically moves all of your if-else logic into standard library calls.</p>

<p>By the way, a popular method for switching numbers in place without a temporary integer goes as follows:</p>

<pre><code>x = x ^ y;
y = y ^ x;
x = x ^ y;
</code></pre>

<p>Which replaces the need for a temp variable. Try it out and see.</p>

<pre><code>if(a &gt; b) {
    a = a ^ b;
    b = b ^ a;
    a = a ^ b;
}
if(b &gt; c) {
    b = b ^ c;
    c = c ^ b;
    b = b ^ c;
}
if(a &gt; b) {
    a = a ^ b;
    b = b ^ a;
    a = a ^ b;
}
</code></pre>

<p>Of course, you could instead use std::swap. However, given all the alternatives, if performance was a non-issue (e.g. absolute clock cycle count was unimportant), I'd impress simply using std::min and std::max.</p>
    </div>