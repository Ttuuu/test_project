<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That is a humungous procedure you got there. It's all in one piece and it's following a lot of conventions from older VBA code that you should not let become a habit.</p>

<p>The first of these "conventions" is to declare every variable at the top of the block they're scoped to. This is a relic of "ye olden days" where it was important to know up front what things were in a procedure and how you could refer to them. See what that does to the readability of your code on a screen that is not in portrait orientation:</p>

<p><a href="https://i.stack.imgur.com/Z8kiE.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Z8kiE.png" alt="declarations section from the question screenshotted"></a></p>

<p>This is... not really useful, because I can't even remotely tell what variable is needed where and even <strong>whether</strong> it's needed.</p>

<p><strong>Declare variables as close as possible to their usage</strong>.<br>
This has the added benefit of reducing the mental strain when reading the code. You don't need to remember every variable declaration, only those in close proximity to understand the code.</p>

<p>While we're at that section: I noticed that you prefixed every single one of these variables with a <code>v</code>, most likely for "Variable". Don't do that. This adds no useful information to the name of the variable and should frankly speaking be unnecessary.</p>

<blockquote>
<pre><code>'Check that there is a workbook open
If ActiveSheet Is Nothing Then vError = "You need to open a workbook in order to do this"
If vError &lt;&gt; "" Then GoTo ErrorHandler
</code></pre>
</blockquote>

<p>Let's rewrite this a bit. For one the comment is a lie, this doesn't check that a workbook is open, it checks that the ActiveSheet property of the global Application object is not Nothing. In addition you're making this somewhat harder to read by forcing yourself into single-line if-statements:</p>

<pre><code>If ActiveSheet Is Nothing Then
    vError = "You need to open a workbook and select a sheet in order to do this"
    GoTo ErrorHandler
End If
</code></pre>

<hr>

<p>Doing all the work is long and tedious. This code can benefit a lot from extracting subroutines into actual subroutines or Functions. Consider encapsulating blocks of code that have an explanatory comment into their own function:</p>

<pre><code>Sub SolveDijkstra()
    If Not CheckWorkbook() Then Exit Sub

    Dim settings As DijkstraSettings
    Set settings = GetSettingsFromCurrentSheet()

    If Not CheckSettings(settings) Then Exit Sub

    CleanOutputArea()
    Dim graph As Graph
    Set graph = GetPathsFromDataSheet()

    If Not CheckGraph(graph) Then Exit Sub

    Dim path As DijkstraSolution
    Set path = Dijkstra(graph, settings)

    If path.HasSolution Then
        WritePathToOutput(path)
    Else
        WriteErrorToOutput("No path found from source to destination")
    End If

    MsgBox "Done", vbOKOnly + vbInformation, "Path and Distance"
End Sub
</code></pre>

<p>This "reimagination" has the clear benefit of allowing us to abstract the tedious separate steps into methods and objects. We don't need to understand the <strong>10</strong> different loops to grasp what this sub does. </p>

<p>Note that this also sidesteps the usage of GoTo which is ... problematic in some contexts.</p>

<hr>

<p>In closing I want to explicitly call out stuff I noticed as outstanding:</p>

<ul>
<li>You always access a cell's value explicitly through <code>Value</code> :+1:</li>
<li>You use a dictionary to keep track of the cost for a given node</li>
<li>You reinstate error handling after <code>On Error Resume Next</code> statements and seem to have tried to keep OERN areas as small as possible</li>
<li>You validate your input and have a pretty clean way of getting it from your sheet</li>
</ul>

<p>What's missing to take your VBA coding to the next step is the use of objects and user-defined types as well as noting that you don't need to reuse a block of code to extract it.</p>
    </div>