<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An addendum to <a href="/a/202102">hoffmale's excellent answer</a> (read and upvote that one first!):</p>

<ul>
<li><p>Prefer to initialize members, rather than assign them during construction:</p>

<pre><code>template&lt;typename T&gt;
MinHeap&lt;T&gt;::MinHeap(size_t n)
    : arr{new T[n]},
      capacity{n},
      length{0}
{
}
</code></pre>

<p>That's clearer, and allows compiler warnings such as <code>-Weffc++</code> let you know if you missed any.</p></li>
<li><p>Consider providing a constructor that accepts a <code>std::initializer_list</code>, which can be much more efficient than adding elements one at a time:</p>

<pre><code>template&lt;typename T&gt;
MinHeap&lt;T&gt;::MinHeap(std::initializer_list&lt;T&gt; values)
    : MinHeap(values.size())
{
    std::copy(values.begin(), values.end(), arr);
    length = values.size();
    heapify(0);
}
</code></pre></li>
<li><p><code>std::size_t</code> is consistently misspelt.  Either add <code>using std::size_t;</code>, or (better, for a header) write it in full, throughout.</p></li>
<li><p><code>get_min()</code> and <code>print_heap()</code> shouldn't modify the heap, so declare them <code>const</code>.</p></li>
<li><p>No need to explicitly qualify calls to other members using <code>this-&gt;</code> - that's just unnecessary clutter.</p></li>
<li><p>If you must print error messages, write them to the error stream, rather than mixing them into the output:</p>

<pre><code>catch(OutofRange&amp; e)
{
    std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
}
</code></pre></li>
<li><p><code>delete_by_index</code> assigns a <code>T</code> to <code>int</code> in this line:</p>

<pre><code>int del_val = arr[index];
</code></pre>

<p>That looks like it was meant to be</p>

<pre><code>const T del_val = arr[index];
</code></pre>

<p>or perhaps simply</p>

<pre><code>const auto del_val = arr[index];
</code></pre>

<p>Also, this function accepts its index as an <code>int</code>, where <code>std::size_t</code> is more appropriate - that's also the case for <code>heapify</code>.</p></li>
<li><p>Once <code>delete_by_index()</code> is fixed to not need <code>std::numeric_limits</code>, then <code>T</code> is no longer constrained to be an arithmetic type, and we should be able to use any type with a working <code>&lt;</code> operator (e.g. <code>std::string</code>) as the value type.  In fact, the test program (which doesn't exercise <code>delete_by_index()</code>) works with <code>std::string</code> once the other minor bugs are fixed.</p></li>
<li><p>In the test program, let's make <code>input</code> a <code>const</code> value, and use range-based <code>for</code> to iterate over it:</p>

<pre><code>auto const input = {"35", "33", "42", "10", "14",
                    "19", "27", "44", "26", "31"};


// Insert input values to the heap
for (auto const&amp; i: input)
{
    h1.insert(i);
    h1.print_heap();
}


// Delete the minimum value
for (auto const&amp; i: input)
{
    del_val = h1.delete_min();
    std::clog &lt;&lt; "Deleted value: " &lt;&lt; del_val &lt;&lt; std::endl;
    h1.print_heap();
}
</code></pre></li>
<li><p>Finally, consider using a unit-test framework to exercise the code and check that the correct results or exceptions are produced.  Done correctly, that can give a more complete test suite, allowing refactoring to be done with higher confidence against introducing new bugs.  And you don't have to inspect reams of output to be sure that the tests have passed.</p></li>
</ul>
    </div>