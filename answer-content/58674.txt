<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Methods <code>Set</code> and <code>Get</code> Properties through their <code>Get</code> and <code>Set</code> methods, so it isn't a really good idea to perform operations on properties inside their get and set methods.</p>

<p>you should use the object methods to do this.</p>

<blockquote>
<pre><code>public string DisplayErrors
{
    get
    {
        var errorString = "";
        if (HasErrors)
        {
            errorString += Issues.Where(x =&gt; x.name == "Errors").First().groups.First().errors.Aggregate("", (data, t) =&gt; data + t.value+"\n");
        }
        return errorString;

    }
}
</code></pre>
</blockquote>

<p>should be like this</p>

<pre><code>public string DisplayErrors (bool inputBoolean)
{
    var errorString = "";
    if (inputBoolean)
    {
         errorString += Issues.Where(x =&gt; x.name == "Errors").First().groups.First().errors.Aggregate("", (data, t) =&gt; data + t.value+"\n");
    }
    return errorString;
}

Console.WriteLine(DisplayErrors(HasErrors));
</code></pre>

<p><code>DisplayErrors</code> is an action to me, so it should be a method that the object performs not a property of the object,  </p>

<ul>
<li>Property = description</li>
<li>Method = Action</li>
</ul>

<hr>

<p>Look at what is in the <code>HasWarnings</code> property.  A boolean property should be an object flag that is set to true or false, a method inside the object can get or set the flag (to either true or false) or it can be visible to something interacting with the object. </p>

<p>All of this makes me think over the whole piece of code,  if I create a new object all of these properties are referring to other properties nothing is set.</p>

<p><code>Warnings</code> property looks at <code>HasWarnings</code> property which in turn looks at <code>HasNoIssues</code> property (which really should be something like <code>HasIssues</code>) inside of a class called <code>Issues</code> , it has Issues.</p>

<p>This isn't a completed, working class, if you develop it farther you should see that this isn't a good design at all</p>

<p><code>HasWarnings</code> should be a property, but it shouldn't look to another property for it's value.  </p>

<p>There needs to be a constructor that sets the basic properties, this is where you say </p>

<pre><code>if (HasIssues) {
    HasWarnings = Issues.Where(x =&gt; x.name == "Warnings").Count() &gt; 0;
} else {
    HasWarnings = false;
}
</code></pre>
    </div>