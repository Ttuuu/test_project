<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Parse URLs with <code>furl</code></h3>

<p>This method looks like a hacky way to get the value of the <code>code</code> parameter from a query string:</p>

<blockquote>
<pre><code>def parse_code(url):
    return (url.split("code=")[1]).split("&amp;state=")[0]
</code></pre>
</blockquote>

<p>Since the script already imports <code>furl</code>, why not use it for this job:</p>

<pre><code>def parse_code(url):
    return furl(url).args.get('code', '')
</code></pre>

<p>As you mentioned in a comment, the parameters in the URL are not proper query parameters following <code>?</code>, but encoded in the URL fragment after <code>#</code>.
In this case, I suggest to replace the beginning of the string until <code>#</code> with <code>?</code>, and then apply <code>furl</code>:</p>

<pre><code>def parse_code(url):
    # urls contain the parameters encoded in the fragment after #
    url = '?' + url[url.find('#')+1:]
    return furl(url).args.get('code', '')
</code></pre>

<h3>Avoid magic values</h3>

<p>It's good that you have defined some constants at the top of the file.
It would be good to go a bit further and define some more,
because there are still quite many magic values scattered around in the code,
for example these definitely deserve some explanation (by a good name),
or to come from configuration:</p>

<blockquote>
<pre><code>'redirect_uri': 'https://oauth.vk.com/blank.html',
'v': 5.92,
# ...

'client_id': 6782333,
'user_id': 8573490,
# ...

return ''.join(secrets.choice(symbols) for _ in range(12))
#                                                     ^^ why 12?
</code></pre>
</blockquote>

<h3>Avoid redundant local variables</h3>

<p>There are some local variables that are set once and then immediately returned. I don't see much value brought by these variables, I would return the values directly, for example here:</p>

<blockquote>
<pre><code>input_url = input(INP_MSG)
return input_url
# ...

with open(tkn_file) as file:
    data = json.load(file)
return data
# ...
</code></pre>
</blockquote>
    </div>