<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few points:</p>

<ul>
<li><p>As mentioned in the previous review, the lambda expression in <code>lambda s: shell_sort(s, 5)</code> is no longer needed once the second parameter of <code>shell_sort</code> has a default value, since the function can be called by <code>shell_sort(input_list)</code> just like other functions. Therefore using <code>shell_sort</code> is sufficient.</p></li>
<li><p>This piece of code is not correctly written.</p>

<pre><code>def shell_sort(input_list: List[T], sublist_increment: int = 5) -&gt; List[T]:
    try:
        if sublist_increment // 2 == 0:
            return
    finally:
        ...
</code></pre>

<p>It should be like this.</p>

<pre><code>def shell_sort(input_list: List[T], sublist_increment: int = 5) -&gt; List[T]:
    # `//` is floor division so this is the equivalent form.
    # I am not sure whether the logic is actually correct or not.
    # Maybe it should just be `sublist_increment &lt; 2` instead.
    if 0 &lt;= sublist_increment &lt; 2:
        raise ValueError(" ... error message ...")

    ... remaining code ...
</code></pre></li>
<li><p>As suggested by others in the previous review, the functions modify the input in-place. So it is better not to return a list (simply omit the return statements). And it is called this way:</p>

<pre><code>list_items = ...
func(list_items)

... list_items holds the output so it can be used directly ...
</code></pre></li>
<li><p>In small programs, test cases can be better organized as a list or tuple and iterated over during tests, similarly as the tested functions. It makes adding new tests cases (either manually crafted or automatically generated) easier. For larger projects one would need other tools such as <code>pytest</code>.</p>

<pre><code>GENERATED_INTEGER_TEST = [random.randint(-100, 100) for _ in range(50)]  # `_` represents a don't-care variable
GENERATED_FLOAT_TEST = [random.uniform(-10, 10) for _ in range(50)]

test_cases = (
    ["Test 1 (Normal)", [10, 45, 20, 30, ....]],
    ["Test 2 (Sorted list)", [10, 20, 30]],
    ["Test 3 (Reverse ordered list)", [0, -10, -24, -33]],
    ["Test 4 (Randomly generated integers)", GENERATED_INTEGER_TEST],
    ....
    ["Test .... (Randomly generated floats)", GENERATED_FLOAT_TEST]
)

# Add expected output
for test_case in test_cases:
    test_case.append(sorted(test_case[1]))

...

# Actual testing
for func_description, func in sorting_algorithms:
    print("Testing", func_description)
    for test_description, test_input, expected_output in test:
        output = test_input[:]
        func(output)

        message = "passed" if output == expected_output else "failed"
        print(test_description, message)

        ... print inputs and outputs if needed, using `test_input` and `output` ...
</code></pre>

<p>Also note that <em>test cases need to be designed to cover different kinds of inputs that go through different code branches, including edge cases that can possibly lead to bugs</em>. Here, tests on floats would succeed as long as corresponding integer tests succeed. So there is no need to repeat every test for both integer and floats. In other words, as long as the comparision operators are well-defined, the type of inputs is not a feature that can lead to different behaviour of the tested functions. You need to look for other variations instead, as shown in the sample code above. <br><br>
As a side remark, the sample code also demonstrates generating random numbers using the <code>random</code> module so <code>scipy</code> is no longer needed.</p></li>
</ul>
    </div>