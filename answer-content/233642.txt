<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Keep your global environment clean - no need to define <code>nums</code> and <code>numVals</code> globally. Just create them in the <code>main</code> function and pass them to the appropriate functions.</p>

<pre class="lang-golang prettyprint-override"><code>nums := initSlice(size)
</code></pre></li>
<li><p>You can save on memory by creating the <code>sortArr</code> array at the initialization phase, and pass it along with <code>arr</code>.</p>

<pre class="lang-golang prettyprint-override"><code>go mergeSort(arr[:len(arr)/2], res[:len(sortArr)/2], leftMS)
go mergeSort(arr[len(arr)/2:], res[len(sortArr)/2:], rightMS)
</code></pre></li>
<li><p>You can init <code>numVals</code> to <code>100</code> and then change it if an arg was provided:</p>

<pre class="lang-golang prettyprint-override"><code>size := 100
if len(os.Args) &gt;= 2 {
    size, _ = strconv.Atoi(os.Args[1])
}
</code></pre></li>
<li><p>Add a buffer to <code>leftMS</code> and <code>rightMS</code>. This way their goroutines will be closed when they are done. Currently if the right side is done before the left, then it will have to wait because you are reading <code>leftMS</code> first.</p>

<pre class="lang-golang prettyprint-override"><code>leftMS, rightMS := make(chan []byte, 1), make(chan []byte, 1)
</code></pre></li>
<li><p>Comments always start with an empty space: <code>//Combine both sides</code> -&gt; <code>// Combine both sides</code></p></li>
</ol>
    </div>