<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>- error handling</strong></p>

<pre><code>int nanosleep(const struct timespec *req, struct timespec *rem);
int clock_gettime(clockid_tÂ clk_id, struct timespec *tp);
</code></pre>

<p>Return an error code.  You may want to react to it or not, but probably you should let the user know, so I would change these:</p>

<pre><code>int ktimer_keep(ktimer_t *k);
int ktimer_reset(ktimer_t *k, double tstep);
int ktimer_init(ktimer_t *k, double tstep)
</code></pre>

<p>You also may (or may not) want to force the user to read the error code (GCC extension):</p>

<pre><code>int ktimer_keep(ktimer_t *k) __attribute__((warn_unused_result));
</code></pre>

<p><a href="https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#Common-Function-Attributes" rel="nofollow noreferrer">Documentation here</a>.</p>

<hr>

<p><strong>- types</strong></p>

<p><code>struct timespec::tv_sec</code> is of type <code>time_t</code>, not <code>unsigned long</code></p>

<p><code>struct timespec::tv_nsec</code> is of type <code>long</code>, not <code>unsigned long</code></p>

<p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/time.h.html" rel="nofollow noreferrer"></a></p>

<hr>

<p><strong>- precision</strong></p>

<p><code>double</code> is typically 64 bits (it can't represent all 64-bit integers), <code>long</code> is also typically 64 bits, but <code>long double</code> is typically larger than 64 bits (it's implementation defined, but it's more or less stable) and usually can represent all 64-bit integers, so maybe it would be a better type.</p>

<p>Remember to use the correct constants if you do change to this type: <code>1e-9L</code> I think it is.</p>

<hr>

<p><strong>- Unnecessary else</strong>  (From Linux <a href="https://github.com/torvalds/linux/blob/master/scripts/checkpatch.pl" rel="nofollow noreferrer">checkpatch.pl</a>)</p>

<p>"<code>else</code> is not generally useful after a break or return."</p>

<p>I add to that sentence a <code>continue</code>, <code>goto</code> or <code>exit()</code>.</p>

<p>Example:</p>

<pre class="lang-c prettyprint-override"><code>if (err)
        return;
else
        printf("Hello world!\n");
</code></pre>

<p>is equivalent to this, which is easier to read:</p>

<pre class="lang-c prettyprint-override"><code>if (err)
        return;
printf("Hello world!\n");
</code></pre>

<hr>

<p><strong>EDIT:</strong> continue revision</p>

<hr>

<p>In your case, I would use <code>goto</code> to move all the error handling to the end of the function, and let the error-free path clear (this is opinion based; feel free to disagree):</p>

<pre><code>int ktimer_keep(ktimer_t *k)
{
        struct timespec req = { .tv_sec = 0 };
        struct timespec rem = { .tv_sec = 0 };

        if (clock_gettime(CLOCK_REALTIME, &amp;rem))
                goto err_lib;
        req = tsdiff (&amp;k-&gt;next, &amp;rem);

        if (req.tv_sec &lt; 0 || req.tv_nsec &lt; 0)
                goto err_past;
        if (nanosleep(&amp;req, &amp;rem))
                goto err_lib;

        set_nextstep(k);
        return 0;
err_past:
        fputs("error: next timestep is in the past.\n", stderr);
        return -1;
err_lib:
        perror("Write something meaningful here");
        // Maybe some more cleanup here
        return errno;
}
</code></pre>

<hr>

<p><strong>- casts (unneeded?)</strong></p>

<pre><code>if ((double)req.tv_sec &lt; 0 || (double)req.tv_nsec &lt; 0)
</code></pre>

<p>I don't see why you would need to cast that</p>

<hr>

<p><strong>- Warn user if misusing the function</strong></p>

<p>Given that you are using GCC, you can ensure that the user doesn't shoot himself in the foot passing a <code>NULL</code> pointer to your functions.  You can do that with</p>

<pre><code>int ktimer_keep (ktimer_t *k) __attribute__((nonnull(1)));
</code></pre>

<p><a href="https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#Common-Function-Attributes" rel="nofollow noreferrer">Documentation here</a>.</p>
    </div>