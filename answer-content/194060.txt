<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's the extension method I've created.</p>

<pre><code>    /// &lt;summary&gt;
    /// Concurrently Executes async actions for each item of &lt;see cref="IEnumerable&lt;typeparamref name="T"/&gt;
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;Type of IEnumerable&lt;/typeparam&gt;
    /// &lt;param name="enumerable"&gt;instance of &lt;see cref="IEnumerable&lt;typeparamref name="T"/&gt;"/&gt;&lt;/param&gt;
    /// &lt;param name="action"&gt;an async &lt;see cref="Action" /&gt; to execute&lt;/param&gt;
    /// &lt;param name="maxActionsToRunInParallel"&gt;Optional, max numbers of the actions to run in parallel,
    /// Must be grater than 0&lt;/param&gt;
    /// &lt;returns&gt;A Task representing an async operation&lt;/returns&gt;
    /// &lt;exception cref="ArgumentOutOfRangeException"&gt;If the maxActionsToRunInParallel is less than 1&lt;/exception&gt;
    public static async Task ForEachAsyncConcurrent&lt;T&gt;(
        this IEnumerable&lt;T&gt; enumerable,
        Func&lt;T, Task&gt; action,
        int? maxActionsToRunInParallel = null)
    {
        if (maxActionsToRunInParallel.HasValue)
        {
            using (var semaphoreSlim = new SemaphoreSlim(
                maxActionsToRunInParallel.Value, maxActionsToRunInParallel.Value))
            {
                var tasksWithThrottler = new List&lt;Task&gt;();

                foreach (var item in enumerable)
                {
                    // Increment the number of currently running tasks and wait if they are more than limit.
                    await semaphoreSlim.WaitAsync();

                    tasksWithThrottler.Add(Task.Run(async () =&gt;
                    {                            
                        await action(item).ContinueWith(res =&gt;
                        {
                            // action is completed, so decrement the number of currently running tasks
                            semaphoreSlim.Release();
                        });
                    }));
                }

                // Wait for all tasks to complete.
                await Task.WhenAll(tasksWithThrottler.ToArray());
            }
        }
        else
        {
            await Task.WhenAll(enumerable.Select(item =&gt; action(item)));
        }
    }
</code></pre>

<p>Sample Usage:</p>

<pre><code>await enumerable.ForEachAsyncConcurrent(
    async item =&gt;
    {
        await SomeAsyncMethod(item);
    },
    5);
</code></pre>
    </div>