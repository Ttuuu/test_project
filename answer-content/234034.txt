<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In my opinion, your implementation is good if you have a single xml file and only need one, here is some recommendations.</p>

<p>1) I suggest that you rename the class <code>Config</code> to <code>AbstractXmlConfig</code> or <code>XmlConfig</code> for readability, but it's up to you.</p>

<p>2) In the class <code>Config</code>, you can use the <code>filename</code> variable to load the xml / properties file; instead of using the hardcoded one. Also, i suggest that you inline the <code>init</code> method in the constructor.</p>

<p><strong>Inlined</strong></p>

<pre class="lang-java prettyprint-override"><code>    public Config(String filename){
        this.filename = filename;
        try {
            properties = new Properties();
            InputStream fis = getClass().getClassLoader().getResourceAsStream(filename);
            properties.loadFromXML(fis);

        } catch (IOException e) {
            e.printStackTrace();
            throw new IllegalArgumentException(MSG_SETTING_NOT_FOUNT);
        }
    }

</code></pre>

<p><strong>With method</strong></p>

<pre class="lang-java prettyprint-override"><code>    public Config(String filename){
        this.filename = filename;
        init(filename);
    }

    private void init(String filename) {
        try {
            properties = new Properties();
            InputStream fis = getClass().getClassLoader().getResourceAsStream(filename);
            properties.loadFromXML(fis);

        } catch (IOException e) {
            e.printStackTrace();
            throw new IllegalArgumentException(MSG_SETTING_NOT_FOUNT);
        }
    }
</code></pre>

<h1>Future proofing</h1>

<p>1) For the methods that convert to a string, you can make an interface for them in case that you have multiple implementations of the <code>ConfigStorage</code>; in my opinion, it's always a big plus to be able to make custom data sources without refactoring the entire software to add a new type that not rely on the <code>Properties</code>.</p>

<pre class="lang-java prettyprint-override"><code>public interface ValueConverter {
    int getInt(String key);

    float getFloat(String key);

    boolean getBoolean(String key);
}
</code></pre>

<pre class="lang-java prettyprint-override"><code>public abstract class Config implements ValueConverter {
   //[...]
}

</code></pre>

<h3>Full example</h3>

<p><strong>XmlConfigStorageImpl</strong></p>

<pre class="lang-java prettyprint-override"><code>public class XmlConfigStorageImpl extends AbstractXmlConfig {

    private static final String SETTINGS_FILENAME = "storage.cfg.xml";
    private static final String KEY_HOST = "host";
    private static final String KEY_PORT = "port";
    private static final String KEY_USERNAME = "username";
    private static final String KEY_PASSWORD = "password";
    private static final String KEY_CONNECTION_TYPE = "connection_type";
    private static final String KEY_SEPARATOR= "separator";
    private static final String KEY_REMOTE_ROOT = "remote_root";
    private static final String KEY_SUBDIR_UPLOADED = "subdir_uploaded";


    public XmlConfigStorageImpl() {
        super(SETTINGS_FILENAME);
    }

    public String getHost(){ return getString(KEY_HOST); }

    public int getPort(){ return getInt(KEY_PORT); }

    public String getUsername(){ return getString(KEY_USERNAME); }

    public String getPassword(){ return getString(KEY_PASSWORD); }

    public String getSeparator(){ return getString(KEY_SEPARATOR); }

    public String getConnectionType(){ return getString(KEY_CONNECTION_TYPE); }

    public String getRemoteRoot(){ return getString(KEY_REMOTE_ROOT); }

    public String getSubdirUploaded(){ return getString(KEY_SUBDIR_UPLOADED); }
}
</code></pre>

<p><strong>AbstractXmlConfig</strong></p>

<pre class="lang-java prettyprint-override"><code>public abstract class AbstractXmlConfig implements ValueConverter {
    private static final String MSG_SETTING_NOT_FOUNT = "Settings file not found";

    private final String filename;
    private Properties properties;

    public AbstractXmlConfig(String filename) {
        this.filename = filename;
        init(filename);
    }

    private void init(String filename) {
        try {
            properties = new Properties();
            InputStream fis = getClass().getClassLoader().getResourceAsStream(filename);
            properties.loadFromXML(fis);
        } catch (IOException e) {
            e.printStackTrace();
            throw new IllegalArgumentException(MSG_SETTING_NOT_FOUNT);
        }
    }

    public String getFilename() {
        return filename;
    }

    public String getString(String key) {
        return properties.getProperty(key);
    }

    @Override
    public int getInt(String key) {
        return Integer.parseInt(properties.getProperty(key));
    }

    @Override
    public float getFloat(String key) {
        return Float.parseFloat(properties.getProperty(key));
    }

    @Override
    public boolean getBoolean(String key) {
        return Boolean.parseBoolean(properties.getProperty(key));
    }
}

</code></pre>

<p><strong>ValueConverter</strong></p>

<pre class="lang-java prettyprint-override"><code>public interface ValueConverter {
    int getInt(String key);

    float getFloat(String key);

    boolean getBoolean(String key);
}

<span class="math-container">```</span>
</code></pre>
    </div>