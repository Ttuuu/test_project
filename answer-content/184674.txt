<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em>comparative-review</em>:</strong><br>
In both variants, both "traversing indices" get compared to their (respective upper) limit in each traversal of the "proper merge loop".<br>
While "the copy2res-loops" should never execute in <code>merge1</code>, the "<code>res</code>-index" gets compared to its limit right from the start.<br>
In <code>merge2</code>, the "proper merge loop" isn't traversed as often.<br>
Exactly one of the copy2res-loops should be traversed for the same total.</p>

<p>remarks:  </p>

<ul>
<li><code>merge()</code> isn't <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#styleguide" rel="nofollow noreferrer">doc-comment</a>ed.<br>
the comments for <code>start</code>&amp;<code>mid</code> might as well be <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#@param" rel="nofollow noreferrer"><code>@param</code></a>s,<br>
<code>index of mid</code> looks off,<br>
all three may be <code>final</code>.  </li>
<li>Both <code>subarray</code>s include their start - excluding <code>end</code> would be consistent.  </li>
<li>I don't get the <em>inversion counting</em> - lack of documentation doesn't help.</li>
</ul>

<p>Speed-up:  </p>

<ul>
<li>beware memory hierarchy effects<br>
old school complexity analysis assumes uniform memory access time - far from what I'd want to pay and wait for.</li>
<li>don't copy back and fro. Use the auxiliary sequence as the/one source for the next pass.</li>
<li>don't convert between <code>Integer</code> and <code>int</code> time and again.  </li>
<li>when using <code>List</code>s, avoid relying on the "random accessors" to be fast<br>
(implementing <a href="https://docs.oracle.com/javase/9/docs/api/java/util/RandomAccess.html" rel="nofollow noreferrer"><code>RandomAccess</code></a> is a hint - read backwards, its doc recommends to "always")<br>
use <code>ListIterator</code>s to iterate <code>List</code>s  (note how they (optionally) support <a href="https://docs.oracle.com/javase/9/docs/api/java/util/ListIterator.html#set-E-" rel="nofollow noreferrer">set(newValue)</a>)</li>
<li>don't time-consumingly ponder/implement variants unless you

<ul>
<li><em>established</em> it matters</li>
<li><em>fixed</em> a <em>measure</em> for <em>good enough</em></li>
</ul></li>
<li>converting to arrays and never looking back (with the possible exception of a terminating conversion/copy back) is an option promising sequential storage and allowing <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/System.html#arraycopy-java.lang.Object-int-java.lang.Object-int-int-" rel="nofollow noreferrer">bulk operations</a>. With <code>List</code>s, <a href="https://docs.oracle.com/javase/9/docs/api/java/util/List.html#replaceAll-java.util.function.UnaryOperator-" rel="nofollow noreferrer">operations</a> on <a href="https://docs.oracle.com/javase/9/docs/api/java/util/List.html#subList-int-int-" rel="nofollow noreferrer">sublists</a> <em>may</em> be more efficient.  </li>
<li>Most JREs allow a peek at <a href="https://docs.oracle.com/javase/9/docs/api/java/util/List.html#sort-java.util.Comparator-" rel="nofollow noreferrer">their implementation</a> (have a look at <code>java.util.Arrays</code>, too).</li>
</ul>
    </div>