<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That's a very unconventional usage of the term <a href="https://en.wikipedia.org/wiki/Precision_%28computer_science%29" rel="noreferrer">"precision"</a>.  I think that "comparison" would be the appropriate word here.</p>

<p>The <code>Test</code> class is severely underdeveloped.  The constructor fails to construct a useful object.  Furthermore, representing the comparison as one of four magic strings is cryptic and unhelpful.  On top of that, the <code>Test</code> class doesn't even know how to execute its own test, forcing you to write a separate <code>handle_non_exact_answer()</code> function.</p>

<p>It's rather weird that <code>handle_non_exact_answer()</code> returns <code>True</code> or <code>False</code> to indicate whether the comparison was one of the four recognized magic strings.  I would consider an unrecognizable comparison as an error, and raise an exception — preferably when the <code>Test</code> is constructed, not when you try to perform the test.</p>

<p>Printing the "passed" or "failed" result limits the function's reusability.  It should return <code>True</code> or <code>False</code> instead, and let the caller decide what to do with the result.</p>

<p>The if-else chain is more idiomatically done using a dictionary lookup.</p>

<p>Your <code>main()</code> test isn't very effective.  You don't print the randomly chosen number, so it's hard to tell whether the results are correct.  Also, you've used <code>test</code> to mean two different things: the first test ("greater than 0"), and also the iteration variable (<code>for test in tests: …</code>), which is unnecessarily confusing.</p>

<h2>Suggested solution</h2>

<pre><code>import operator
import random

class ComparisonTest:
    COMPARATORS = {
        'less': operator.lt,
        'more': operator.gt,
        'lesser': operator.le,
        'greater': operator.ge,
    }

    def __init__(self, comparison, threshold):
        try:
            self._func = lambda n: self.COMPARATORS[comparison](n, threshold)
        except KeyError:
            raise ValueError('Invalid comparison: {0}'.format(comparison))

    def __call__(self, n):
        return self._func(n)

def main():
    n = random.randint(-1, 1)
    print('n = {0}'.format(n))
    test0 = ComparisonTest('greater', 0)
    test1 = ComparisonTest('lesser', 0)
    test2 = ComparisonTest('more', 0)
    test3 = ComparisonTest('less', 0)
    for test in [test0, test1, test2, test3]:
        print("passed" if test(n) else "failed")

if __name__ == "__main__":
    main()
</code></pre>

<h2>More compact implementation</h2>

<p>Here's a more compact way to write <code>ComparisonTest</code>, using <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="noreferrer"><code>functools.partial()</code></a>.  (Use the same <code>main()</code> function as above.)</p>

<pre><code>from functools import partial
import operator

def ComparisonTest(comparison, threshold):
    try:
        return partial({
            'less': operator.gt,  # Comparisons are intentionally reversed
            'more': operator.lt,
            'lesser': operator.ge,
            'greater': operator.le,
        }[comparison], threshold)
    except KeyError:
        raise ValueError('Invalid comparison: {0}'.format(comparison))
</code></pre>
    </div>