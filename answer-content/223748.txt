<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's been a long time since I've coded in C, so bear with me.</p>

<h2>#define</h2>

<p>Your implementation's <code>#define</code> statements puzzle me. <code>#define</code> is a directive, essentially a macro, best used to define <em>constants</em>. With that said:</p>

<ul>
<li>You should use <code>typedef</code> for type definitions. <code>#define</code> will only be respected by a preprocessor as a copy/paste directive, and nothing more. <code>typedef</code> will actually name a new type.</li>
</ul>

<p>Example:</p>

<pre class="lang-c prettyprint-override"><code>// using #define
#define PTR char*

PTR a, b, c; // creates char *a, char b, char c
</code></pre>

<pre class="lang-c prettyprint-override"><code>// using typedef
typedef char* PTR;

PTR a, b, c; // creates char *a, char *b, char *c
</code></pre>

<ul>
<li>Why not use <code>NULL</code> for null pointer?</li>
<li>Why redefine malloc/free? You don't lose any clarity by leaving them as-is</li>
<li><code>memequ(a, b, n)</code> should just be a function, regardless of how simple it is</li>
</ul>

<h2>assert</h2>

<p>The <code>assert</code> statement below already necessitates the following condition. Its corresponding <code>else</code> statement will never be executed.</p>

<pre class="lang-c prettyprint-override"><code>assert(16 &lt;= capacity &amp;&amp; capacity &lt; HASHTABLE_MAX_CAPACITY);
if (16 &lt;= capacity &amp;&amp; capacity &lt; HASHTABLE_MAX_CAPACITY) {
</code></pre>

<p>And while we're looking at those lines, why is 16 hardcoded here? Wouldn't it make sense to <code>#define</code> that as a minimum capacity?</p>

<pre class="lang-c prettyprint-override"><code>#define HASHTABLE_MIN_CAPACITY 16
</code></pre>

<h2>enum</h2>

<p>On that same note, the <code>enum</code> in HASHTABLE_DEFINITION doesn't make sense. Enums are generally used to define constants <em>of the same enumeration</em>.</p>

<p>Example:</p>

<pre class="lang-c prettyprint-override"><code>enum State{SUCCESS, FAILED, INTERRUPTED}
</code></pre>

<p>I would recommend making them <code>const</code> variables instead.</p>

<p>I haven't read through any of the hashtable logic itself yet, but I felt the rest here was important enough already.</p>
    </div>