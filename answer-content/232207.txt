<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>C's string implementation is <a href="https://en.wikipedia.org/wiki/Null-terminated_string" rel="nofollow noreferrer">null-terminated</a>. Thus, as long as,</p>

<ol>
<li>one doesn't care about the original string, (this may not be possible if you have a <code>const char *</code>,) and</li>
<li>one has at least one <code>char</code> that one is willing to discard per block, (usually the block delimiter,) to turn into '\0',</li>
</ol>

<p>one can do this in place without copying. This tokenizing is very common, and <code>string.h</code> from the standard library has functions that will help. For example, <code>strtok</code>, (and thread-safe extension to the ISO C standard, <code>strtok_r</code>,) or non-standard, but <code>strsep</code> is an improvement, (possible <a href="https://opensource.apple.com/source/Libc/Libc-167/string.subproj/strsep.c.auto.html" rel="nofollow noreferrer">implementation</a>.) In this code, this takes advantage that <code>argv</code> is writable and uses it to come up with some strings which are separated by <code>strchr</code>.</p>

<pre><code>#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;assert.h&gt;

/** One could probably store this, but printing it is easier. */
static void print(const char *p) { printf("codeBuffer &lt;- %s\n", p); }

/** `str0` is a string that get separated by '!'. */
static void str_sep_bang(char *str0, void (*const callback)(const char *)) {
    char *str1;
    assert(str0 &amp;&amp; callback);
    for( ; ; ) {
        if((str1 = strchr(str0, '!'))) *str1 = '\0';
        if(*str0 != '\0') callback(str0);
        if(!str1) break;
        str0 = str1 + 1;
    }
}

int main(int argc, char **argv) {
    int i;
    for(i = 1; i &lt; argc; i++) {
        printf("You passed: %s.\n", argv[i]);
        str_sep_bang(argv[i], &amp;print);
    }
    return 0;
}
</code></pre>

<p>This prints out,</p>

<pre><code>bin/stringthing foo\!bar\!baz\!qux \!\!
You passed: foo!bar!baz!qux.
codeBuffer &lt;- foo
codeBuffer &lt;- bar
codeBuffer &lt;- baz
codeBuffer &lt;- qux
You passed: !!.
</code></pre>

<p>However, if one needs to store these values, you need space, (an array of <code>char *</code>, same as is passed in <code>argv</code>.) Usually that involves dynamic allocation or static allocation of the maximum size. As well, accessing this list is only valid while the data from the underlying string doesn't change or go out-of-scope; this is why crossing different modules typically involves duplication of the underlying data.</p>
    </div>