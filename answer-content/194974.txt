<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So after a couple hours of tinkering around I've come to the conclusion that 'people' are wrong and <code>string.Split</code> has been optimized into oblivion by microsoft.</p>

<p>Here is a gist with my code for parsing the data from Spans</p>

<p><a href="https://gist.github.com/KelsonBall/8234cc08825799e95c3224e7a74d7f5c" rel="noreferrer">CharSpanExtensions.cs</a></p>

<p>The idea is that it uses ReadOnlySpan to represent a string and enumerates over it exactly once. The data is only ever copied to create new (small) strings in <code>ConsumeDateTime</code> and <code>ConsumeString</code>, and that is done with a direct unsafe pointer into the data of the span.</p>

<p>Adding a test for the span implementation to your code looked like this</p>

<pre><code>static List&lt;TickMessage&gt; GetTickMessages(ReadOnlySpan&lt;char&gt; data)
{
    var ticks = new List&lt;TickMessage&gt;();
    while (data.Length &gt; 0)
    {
        ticks.Add(new TickMessage(
            data.ConsumeDateTime(out data),
            data.ConsumeFloat(out data),
            data.ConsumeInt(out data),
            data.ConsumeInt(out data),
            data.ConsumeFloat(out data),
            data.ConsumeFloat(out data),
            data.ConsumeInt(out data),
            data.ConsumeChar(out data),
            data.ConsumeInt(out data),
            data.ConsumeString(out data)));
    }
    return ticks;
}
</code></pre>

<p>Benchmarks were as follows</p>

<pre><code>dotnet core 2.1
| Method    | Milliseconds |
| --------- | ------------ |
| Substring | 2616         |
| Split     | 703          |
| Span      | 1757         |

netframework 4.6.2
| Method    | Milliseconds |
| --------- | ------------ |
| Substring | 3562         |
| Split     | 841          |
| Span      | 2602         |
</code></pre>

<p>Something <code>string.Split</code> is doing is making it faster to enumerate over all the data twice (at least once to split the data, then at least once for each parsed item to parse it) than to use direct pointers on the stack (Span) and enumerate over the data once.</p>

<p>Creating strings and using the frameworks <code>float.Parse</code> and <code>int.Parse</code> methods made my Span crawling code significantly slower, probably because of the additional heap allocations from creating the strings to use the parse methods.</p>

<p>There is almost certainly more room for optimization in my code, but I doubt it'd get near the huge lead that <code>string.Split</code> has.</p>
    </div>