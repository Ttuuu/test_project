<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Robustness</strong></p>

<p>Your design lacks robustness. I.e. it relies on a specific parent-child relation described with object references but it does not enforce that the relation is sound in the data structure. You allow insertion of parentless entries and entries with different parent to a directory.</p>

<p><strong>Representation of reality</strong></p>

<p>Since this is a representation of a concrete idea, it should reflect the restrictions of the idea in the design. A <code>file</code> does not exist in a void, it always has a parent <code>directory</code>. Note that naming is relevant here, a document may exist as an e-mail attachment or a blob in a database but it becomes a file only when it is placed into a directory tree in a file system. So, you should prevent creation of files that are not attached to a directory by making the <code>Entry</code> class an interface and allowing insertion only via methods in the <code>Directory</code>. E.g.</p>

<pre><code>public class Directory {
    public Entry createFile(String name) {
        return new ConcreteFile(...);
    }
}
</code></pre>

<p>With this you are in control of enforcing the integrity of the data structure. Likewise the <code>Directory</code> only exists in a file system. If you remove it, it becomes an archive of documents. It should be an interface and initialized via a <code>FileSystem</code> object.</p>

<pre><code>public clas FileSystem {
    public Directory getRoot() {
        ....
    }
}
</code></pre>

<p>Methods for manipulating entries (copying, moving and deletion) should then be implemented in the entry, not the directory. When done this way the user is spared the complication of having to obtain a reference to the parent in order to delete an entry.</p>

<p>But how do you create the <code>FileSystem</code>? Well, the FileSystem should be an interface too, created with a <code>FileSystemBuilder</code>. But that's probably a subject of a separate question. :)</p>

<p><strong>Misc</strong></p>

<p><code>Integer</code> is the wrong type to represent file sizes. It's too small. Use <code>long</code>.</p>

<p>There is no need for us to use <code>long</code> for temporal types anymore. It's a historical artifact from the limitations of long gone hardware. You could very well use <a href="https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html" rel="nofollow noreferrer">java.time.ZonedDateTime</a> and save yourself from a lot of hassle in the future.</p>

<p>For future reference: <em>use a temporal types that include time zones whenever it is possible</em>.</p>

<p>Size is a vague term in this context. In Java's collections it means the number of elements in a collection. For a direcetory I would have to look for documentation about whether it means number of files in it or not. The java.io.File class uses <code>length</code>. I would rename the method to "calculateSize" to signal that it does recursive calculation and can cause a whole lot of IO.</p>
    </div>