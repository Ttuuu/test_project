<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The Great!</h2>
<p>You're not making the basic beginner error of using <code>using namespace std;</code>! The <code>main()</code> function is only 3 lines of code.</p>
<p>The function declarations in the <code>nbody</code> class that don't change things include <code>const</code> which will help optimization later.</p>
<p>The code utilizes the C++ random number generation rather than the C <code>srand()</code> and <code>rand()</code> functions.</p>
<p>Because Nbody was implemented as a class it is very easy to change <code>main()</code> so that it can accept user input for the values of <code>n</code>, <code>dt</code> and <code>t_max</code>.</p>
<h2>Missing Header</h2>
<p>The <code>#include &lt;string&gt;</code> is missing from <code>nbody.cpp</code>; this is necessary when compiling the code in most cases.</p>
<h2>The Obsolete</h2>
<p>The use of <code>inline</code> function declarations is <a href="https://en.cppreference.com/w/cpp/language/inline" rel="noreferrer">now only a suggestion to the compiler</a>. Optimizing compilers can and will do a better job of optimizing by inlining code based.</p>
<p>The body of the <code>Nbody</code> constructor uses an obsolete form of initialization, rather than using <code>()</code> as in the following code</p>
<pre><code>Nbody::Nbody(int n_, double dt_, double t_max_) : n(n_), dt(dt_), t_max(t_max_) {
    init_data();
}
</code></pre>
<p>use braces <code>{}</code>:</p>
<pre><code>Nbody::Nbody(int n_, double dt_, double t_max_)
: n{n_}, dt{dt_}, t_max{t_max_}
{
    init_data();
}
</code></pre>
<p>Putting the initialization on a separate line makes it easier to find.</p>
<h2>Prefer STL Container Classes</h2>
<p>Prefer STL container classes such as <code>std::vector</code> or <code>std::array</code> over old C style arrays. The <code>std::array&lt;type, size&gt;</code> class is a fixed size array. The <code>std::vector&lt;type&gt;</code> is a variable sized array. STL container classes provide iterators so that pointers aren't necessary. The use of <code>std::vector&lt;Particle&gt; p;</code> might reduce the number of parameters to the constructor. It would definitely remove the need for the variable <code>n</code> within the <code>Nbody</code> class since <code>p.size()</code> would always contain the number of particles after <code>Nbody::init_data()</code> has run. Also after <code>Nbody::init_data()</code> has run iterators could be used to access the particles in <code>p</code> and would allow the code to use a ranged for loop such as</p>
<pre><code>void Nbody::write_data(int step) const {
    std::ofstream results;
    std::string file_name = "data_" + std::to_string(step) + ".log";
    results.open(file_name);
    if (results.fail()) { // or (!results) ?
        std::cerr &lt;&lt; "Error\n" &lt;&lt; std::endl;
    } else {
        for (auto particle : p) {
            results &lt;&lt; t &lt;&lt; " ";
            results &lt;&lt; particle.m &lt;&lt; " ";
            for (int d=0; d&lt;DIM; d++) {
                results &lt;&lt; particle.x[d] &lt;&lt; " ";
            }
            for (int d=0; d&lt;DIM; d++) {
                results &lt;&lt; particle.v[d] &lt;&lt; " ";
            }
            for (int d=0; d&lt;DIM; d++) {
                results &lt;&lt; particle.F[d] &lt;&lt; " ";
            }
            results &lt;&lt; std::endl;
        }
        results.close();
    }
}
</code></pre>
<p>Another benefit of making <code>p</code> an STL container class is that the destructor for the class <code>Nbody</code> can then be a default constructor and the array of particles doesn't need to be allocated in the class declaration.</p>
<h2>Variable Names</h2>
<p>It's not really clear by just reading the code what the variables <code>n_</code>, <code>n</code>, <code>dt_</code>, <code>dt</code>, <code>t_max_</code>, <code>t_max</code>, <code>x</code>, <code>F</code> and <code>v</code> and <code>p</code> are. For instance, I assume <code>dt</code> means Delta Time, but it is not clear that this is true. The array <code>p</code> might be renamed <code>particles</code>, if I'm correct about <code>dt</code> than deltaTime might be more appropriate.</p>
<p>Yes there are comments for some of the variable names, but if I had to maintain the code I'd rather work with code that was self-documenting than depending on comments.</p>
<p>Example</p>
<pre><code>void Nbody::write_data(int step) const {
    std::ofstream results;
    std::string file_name = "data_" + std::to_string(step) + ".log";
    results.open(file_name);
    if (results.fail()) { // or (!results) ?
        std::cerr &lt;&lt; "Error\n" &lt;&lt; std::endl;
    } else {
        for (auto particle : particles) {
            results &lt;&lt; t &lt;&lt; " ";
            results &lt;&lt; particle.mass &lt;&lt; " ";
            for (int d=0; d&lt;DIM; d++) {
                results &lt;&lt; particle.position[d] &lt;&lt; " ";
            }
            for (int d=0; d&lt;DIM; d++) {
                results &lt;&lt; particle.velocity[d] &lt;&lt; " ";
            }
            for (int d=0; d&lt;DIM; d++) {
                results &lt;&lt; particle.Force[d] &lt;&lt; " ";
            }
            results &lt;&lt; std::endl;
        }
        results.close();
    }
}
</code></pre>
<h2>Style</h2>
<p>Some, not all, developers prefer to see the public declarations of a class before the private declarations of a class. This is because it becomes easier to find the public interface of the class.</p>
<p>The function <code>void init_data()</code> is not necessary unless you are planning to have multiple constructors, it might be better to move that code into the constructor.</p>
<p>If the functions <code>print_parameter()</code> and <code>print_data()</code> are debug functions it might be better to put them within <code>#ifdef DEBUG</code> and <code>#endif</code>.</p>
<p>In the current implementation <code>return 0;</code> from <code>main()</code> is not necessary. If error handling code is added and there is a <code>return 1;</code> it might be better to keep it. It might also be better to use <code>return EXIT_SUCCESS;</code> and <code>EXIT_FAILURE</code> which are defined in <code>cstdlib</code> (<code>#include &lt;cstdlib&gt;</code>).</p>
<h2>Suggestions</h2>
<p>It might be better to allow the user to name the output file that the results go into, either by input through a user interface or as part of the command line arguments. The name could default to the current file name in case the user doesn't specify one.</p>
<p>It might also be better to have only one output file.</p>
    </div>