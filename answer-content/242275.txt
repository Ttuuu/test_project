<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>game_end = True
while game:        
    if point_player == 3:
        game_end = False
    elif point_ai == 3:
        game_end = False
    if game_end:

        ...


    else:
        if point_ai &gt; point_player:
            print("The A.I won! RIP U")
        else:
            print("Dang! You won this time.")
        exit()
</code></pre>

<p>Could be simplified to:</p>

<pre><code>while True:        
    if point_player == 3 or point_ai == 3:
        break

        ...

if point_ai &gt; point_player:
    print("The A.I won! RIP U")
else:
    print("Dang! You won this time.")
</code></pre>

<hr>

<p>All of the </p>

<pre><code>while rock:
    print("Oh! That's a tie no points.")
    break
</code></pre>

<p>Could be written as:</p>

<pre><code>if rock:
    print("Oh! That's a tie no points.")
</code></pre>

<hr>

<p>Instead of <code>point_ai = point_ai + 1</code>, you can shorten that to <code>point_ai += 1</code>. I would also separate out the code that decides who wins as it makes it a little bit easier to understand what is going on with the logic.</p>

<pre><code>    winner = 'tie' # should be either 'player', 'tie', or 'ai'
    if ai_response == "Rock":
        if scissor: 
            winner = 'ai'
        if paper: 
            winner = 'player'
    elif ai_response == "Paper":
        if rock: 
            winner = 'ai'
        if scissor: 
            winner = 'player'
    elif ai_response == "Scissor":
        if rock: 
            winner = 'player'
        if paper: 
            winner = 'ai'

    if winner == 'tie':
        print("Oh! That's a tie no points.")
    if winner == 'player':
        print("Looks like you beat the A.I! +1 Point")
        player_points += 1
    if winner == 'ai':
        print("Oh, you lost :( +1 to A.I")
        ai_points += 1
</code></pre>

<hr>

<p>It feels weird having the <code>rock</code>, <code>paper</code>, <code>scissors</code> Booleans to represent the choice the player made, and then having a string for the choice the ai made. I would use the same data type for both. If we stuck with using strings for both, and with some changes to some variable names, we get:</p>

<pre><code>while True:
    if player_points == 3 or ai_points == 3:
        break
    print("Choose an option. (R,P,S)")
    player_choice = input()
    if player_choice == 'R':
        player_choice = 'Rock'
    elif player_choice == 'P':
        player_choice = 'Paper'
    elif player_choice == 'S':
        player_choice = 'Scissor'
    else:
        print("That's not an option")
        exit()
    print("=======================")
    print("You chose " + player_choice)
    ai_choice = random.choice(option)
    print("The A.I chose " + ai_choice)
    print("=======================")

    winner = 'tie' # should be either 'player', 'tie', or 'ai'
    if ai_choice == "Rock":
        if player_choice == 'Scissor': 
            winner = 'ai'
        if player_choice == 'Paper': 
            winner = 'player'
    elif ai_choice == "Paper":
        if player_choice == 'Rock': 
            winner = 'ai'
        if player_choice == 'Scissor':
            winner = 'player'
    elif ai_choice == "Scissor":
        if player_choice == 'Rock': 
            winner = 'player'
        if player_choice == 'Paper': 
            winner = 'ai'

    if winner == 'tie':
        print("Oh! That's a tie no points.")
    if winner == 'player':
        print("Looks like you beat the A.I! +1 Point")
        player_points += 1
    if winner == 'ai':
        print("Oh, you lost :( +1 to A.I")
        ai_points += 1

    print("You have " + str(player_points) + " points")
    print("The A.I has " + str(ai_points) + " points.")
    print("=======================")
</code></pre>

<hr>

<p>That looks worse in some ways, mostly because of the longer variable names, but everything is going to get better soon. I think now it's about time to break this game up into multiple functions. I like to have all of my print statements in a separate from the logic. In this case, I'm going to keep all of the print statements inside of the <code>start_game</code> function, and we'll put all of the logic outside of the <code>start_game</code> function. This helps us easily read through and understand what is going on, and then if we're having a problem, we can investigate the particular function whose logic is producing incorrect results. This also makes it easier to unit test the logic.</p>

<pre><code>def get_players_choice():
    print("Choose an option. (R,P,S)")
    player_choice = input()
    if player_choice == 'R':
        player_choice = 'Rock'
    elif player_choice == 'P':
        player_choice = 'Paper'
    elif player_choice == 'S':
        player_choice = 'Scissor'
    else:
        player_choice = False

    return player_choice

def get_ai_choice():
    return random.choice(option)

def calculate_winner(player_choice, ai_choice):
    ''' returns either 'player', 'tie', or 'ai' '''
    winner = 'tie'
    if ai_choice == "Rock":
        if player_choice == 'Scissor': 
            winner = 'ai'
        if player_choice == 'Paper': 
            winner = 'player'
    elif ai_choice == "Paper":
        if player_choice == 'Rock': 
            winner = 'ai'
        if player_choice == 'Scissor':
            winner = 'player'
    elif ai_choice == "Scissor":
        if player_choice == 'Rock': 
            winner = 'player'
        if player_choice == 'Paper': 
            winner = 'ai'
    return winner

def display_results(winner):
    if winner == 'tie':
        print("Oh! That's a tie no points.")
    elif winner == 'player':
        print("Looks like you beat the A.I! +1 Point")
    elif winner == 'ai':
        print("Oh, you lost :( +1 to A.I")

    print("You have " + str(player_points) + " points")
    print("The A.I has " + str(ai_points) + " points.")
    print("=======================")

def start_game():
    player_points = 0
    ai_points = 0
    while True:
        if player_points == 3 or ai_points == 3:
            break

        player_choice = get_players_choice()
        if player_choice is False:
            print("That's not an option")
            exit()

        print("=======================")
        print("You chose " + player_choice)
        ai_choice = get_ai_choice()
        print("The A.I chose " + ai_choice)
        print("=======================")

        winner = calculate_winner(player_choice, ai_choice)

        if winner == 'player':
            player_points += 1
        elif winner == 'ai':
            ai_points += 1

        display_results(winner)

    if ai_points &gt; player_points:
        print("The A.I won! RIP U")
    else:
        print("Dang! You won this time.")
</code></pre>

<hr>

<p>Now a little improvement as we refactor. This is kind of like chess, the more you do it, the more patterns just jump out at you. Let's start with the <code>get_players_choice</code> function. One pattern is that when asking for input from the user, instead of requiring 'R', 'P', 'S', we can grab the first character, lowercase it, and then check against that. We would then be accepting 'r', 'R', 'rock', 'Rock', or anything else that starts with the letter 'r'. Some other things:</p>

<pre><code>    print("Choose an option. (R,P,S)")
    player_choice = input()
</code></pre>

<p>Is the same as </p>

<pre><code>player_choice = input("Choose an option. (R,P,S)")
</code></pre>

<p>While I said I like to keep the print statements and the logic separate, <code>display_results</code> is a function that is obviously all about displaying text on the screen, and in the same way it would be expected that a function called <code>get_players_choice</code> is doing more than just logic. We're going to be using the input function, and that requires asking the user for input, and it requires telling them if the input is invalid. Anyhow, here is my revised <code>get_players_choice</code> function.</p>

<pre><code>def get_players_choice():
    while True:
        player_choice = input("Choose an option (R,P,S), or push enter to exit")

        if not player_choice: # If they pushed enter
            return False

        first_char = player_choice[0].lower()

        if first_char == 'r':
            return 'Rock'
        elif first_char == 'p':
            return 'Paper'
        elif first_char == 's':
            return 'Scissor'

        print("That's not an option")
</code></pre>

<hr>

<p>That display_choices and display_results can actually be combined together. And we end up with this as the final result. There are still some additional improvements that can be made, but what those are matters on what your goals are. Is it important that the code can be extended easily? Is performance important? Do you like object oriented designs? Etc.</p>

<pre><code>''' A Rock Papers Scissors game '''
import random

def get_players_choice():
    while True:
        player_choice = input("Choose an option (R,P,S), or push enter to exit: ")

        if not player_choice: # If they pushed enter
            return False

        first_char = player_choice[0].lower()

        if first_char == 'r':
            return 'Rock'
        if first_char == 'p':
            return 'Paper'
        if first_char == 's':
            return 'Scissor'

        print("That's not an option")


def get_ais_choice():
    return random.choice(["Rock", "Paper", "Scissor"])

def calculate_winner(player, ai):
    ''' Takes either 'Rock', 'Paper', or 'Scissors', for both the player and the ai.
        returns either 'player', 'tie', or 'ai' '''

    if ai == "Rock":
        if player == 'Scissor': return 'ai'
        if player == 'Paper':   return 'player'

    elif ai == "Paper":
        if player == 'Rock':    return 'ai'
        if player == 'Scissor': return 'player'

    elif ai == "Scissor":
        if player == 'Rock':   return 'player'
        if player == 'Paper':  return 'ai'

    return 'tie'

def display_round_outcome(player_choice, ai_choice, winner, player_points, ai_points):
    print("=======================")
    print("You chose " + player_choice)
    print("The A.I chose " + ai_choice)
    print("=======================")

    if winner == 'tie':
        print("Oh! That's a tie no points.")
    elif winner == 'player':
        print("Looks like you beat the A.I! +1 Point")
    elif winner == 'ai':
        print("Oh, you lost :( +1 to A.I")

    print(f"You have {player_points} points")
    print(f"The A.I has {ai_points} points.")
    print("=======================")


def start_game():
    player_points = 0
    ai_points = 0

    while True:
        if player_points &gt;= 3 or ai_points &gt;= 3:
            break

        player_choice = get_players_choice()
        ai_choice = get_ais_choice()

        if player_choice is False:
            break

        winner = calculate_winner(player_choice, ai_choice)

        if winner == 'player':
            player_points += 1
        elif winner == 'ai':
            ai_points += 1

        display_round_outcome(player_choice, ai_choice, winner, player_points, ai_points)

    if ai_points &gt; player_points:
        print("The A.I won! RIP U")
    elif ai_points == player_points:
        print("It's a tie.")
    else:
        print("Dang! You won this time.")


print("|=========================|")
print("|    Rock Paper Scissor   |")
print("|       (R) (P) (S)       |")
print("|=========================|")
print("Would you like to start? y/n")
answer = input()
if answer == "y":
    print("Welcome to the game of Rock Paper Scissors")
    start_game()
elif answer == "n":
    print('Well ok then.. Fine leave')
else:
    print("That's not an option.")
</code></pre>

<p>Let me know what questions you have, and what I wrote to quickly and didn't do a good job in explaining me decisions with. But I hope that kind of helps seeing how I would refactor this code, and hopefully you can see how much easier it is to read and debug the final version when you have everything split chunks of code. The difference is a lot more obvious when it's complicated code that you wrote a long time ago, or that something else wrote, and you're trying to figure out what is going on.</p>
    </div>