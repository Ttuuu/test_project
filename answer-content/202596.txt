<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd argue that you really don't need to do any more than what Heslacher has mentioned.</p>

<p>That said, if you ever find yourself needing to test for more than one subject line, I might suggest moving to using a <code>Set&lt;String&gt;</code> in concert with a <a href="https://help.salesforce.com/articleView?id=custommetadatatypes_overview.htm&amp;type=5" rel="nofollow noreferrer">Custom Metadata Type</a>.</p>

<p>Doing this decouples the configuration from the code that uses it, which allows you to make changes to the <em>specific</em> behavior of code without the need for a deployment (the <em>general</em> behavior of your code, delete cases where the subject matches x, y, and z, will be unchanged).</p>

<p>The code for that might look something like this</p>

<pre><code>trigger CaseDeleteDatabaseCompaction on Case (after insert) {

    // You initially used a List&lt;Id&gt; here to get around the fact that records 
    //   stored in trigger context variables (i.e. Trigger.new and the like) are
    //   read-only in "after" triggers.
    // This likely violates the Principle of Least Astonishment, so I recommend
    //   using a List&lt;Case&gt; instead.
    List&lt;Case&gt; casesToDelete = new List&lt;Case&gt;();
    Set&lt;String&gt; targetCaseSubjects = new Set&lt;String&gt;();

    // Custom Metadata Types have a __mdt suffix (as opposed to __c for 
    //   custom objects and custom settings)
    // Other than that, they behave (mostly) like any ol' SObject
    // Queries for Custom Metadata Types do not count against your 100 query per-transaction
    //   governor limit (unless it involves a long text area field)
    for(Case_Delete_Subjects__mdt configuredSubject :[SELECT Subject__c FROM Case_Delete_Subjects__mdt]){
        targetCaseSubjects.add(configuredSubject.Subject__c);
    }

    for (Case currentCase: Trigger.New) {
        System.debug('Subject: ' + currentCase.Subject);

        // Set.contains() is your friend.
        // It helps to avoid long IF conditions
        // The drawback is that, unlike regular string equality using ==, contains() is
        //   case-sensitive
        if (targetCaseSubjects.contains(a.Subject)) 
        {
            // We can't directly use trigger.new with a delete DML statement
            // However, if we clone() the record in trigger.new, it becomes a 
            //   completely separate in-memory instance of the record (as opposed
            //   to a reference to the same memory location as the record in trigger.new)
            // That allows us to work around the restrictions on trigger.new
            // The clone() method is ridiculously fast, so much so that it should
            //   never be a concern for your CPU limit
            casesToDelete.add(currentCase.clone());

            // The downside of the above is that you're consuming extra heap space
            //   to store that cloned instance.
            // If heap space is an issue for you (it isn't for most people), then 
            //   you could instead use the SObject constructor method below to 
            //   achieve the same result with (potentially) a lot less heap usage
            //casesToDelete.add(new Case(Id = currentCase.Id));
            System.debug('Adding ID: ' + currentCase.Id);
        }
    }

    // The guard against performing DML on empty lists is unnecessary.
    // If there is nothing to perform DML on, Salesforce won't try to perform the DML
    //   (or, at the very least, not count it against your limits)


    // Using the Database class's dml methods is usually best reserved for cases where
    //   you want to detect and handle partial failures.
    // For most people's use-cases, the regular DML statements are just fine.
    delete casesToDelete;
}
</code></pre>
    </div>