<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an interesting problem. I think your solution will be possible and much, much faster if you <a href="http://en.wikipedia.org/wiki/Memoization">use memoization</a>. This is the process where you remember your previous calculations and reuse them in your current calculations.</p>

<p>So, for example, suppose you process your array row-by-row.... if your input 2D array is:</p>

<pre><code>1 1 1 1 1 1 1
1 1 1 1 1 1 1
1 1 1 1 1 1 1
1 1 1 1 1 1 1
1 1 1 1 1 1 1
1 1 1 1 1 1 1
1 1 1 1 1 1 1
</code></pre>

<p>And we were now processing the second row, and fourth column, our current result would look like (our current position is marked with a <code>?</code>):</p>

<pre><code>1 2 3 4 5 6 7
2 4 6 ? 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
</code></pre>

<p>Now, at that position, we know that the value will be 8 because we are human, and can see that. The best algorithm on the computer though, to get that 8, is that we can split the data we know in to 4 areas....</p>

<p>Consider the input data again (I have marked our spot with the parenthesis):</p>

<pre><code>1 1 1 1 1 1 1
1 1 1(1)1 1 1
1 1 1 1 1 1 1
1 1 1 1 1 1 1
1 1 1 1 1 1 1
1 1 1 1 1 1 1
1 1 1 1 1 1 1
</code></pre>

<p>The 4 areas that we can think of as special are:</p>

<ol>
<li>the value we are processing right now (the value <code>1</code>)</li>
<li>the column above the us (contains the values <code>[1]</code>)</li>
<li>the row we have processed so far (contains the values <code>[1, 1, 1]</code>)</li>
<li>the <strong>rectangle</strong> above-left of where we are so far (contains the value <code>[1, 1, 1]</code> as well)</li>
</ol>

<p>Now, what is the sum of the values in the rectangle? We know that, because we have our grid right now which looks like:</p>

<pre><code>1 2(3)4 5 6 7
2 4 6 ? 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
</code></pre>

<p>So, the rectangle from (0,0) to (0,2) has the sum <code>3</code> which has already been calculated (and which I have marked with parenthesis).</p>

<p>We have also calculated the sum of the data in the row to the left of us... look at the grid again:</p>

<pre><code>1 2(3)4 5 6 7
2 4(6)? 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
</code></pre>

<p>The sum of the values in the row to the left is the difference between the rectangle above left, and the rectangle plain-left, or <code>6 - 3</code> == <code>3</code>.</p>

<p>Similarly, the sum of the values in the column above us, is the sum of the rectangle above us, less the rectangle above-left of us.</p>

<p>So, for any position in the solution matrix, the solution-sum of the values is:</p>

<ol>
<li>the value at this point</li>
<li>plus the sum of all values above-left of us</li>
<li>plus the sum of all values above us</li>
<li>plus the sum of all values to the left.</li>
</ol>

<p>Using a more convenient input format than the scanner, this can all be done in a single loop....</p>

<pre><code>int[][] sumAboveLeft(int[] datasource) {
    if (datasource == null || datasource.length == 0 || datasource.length != datasource[0] * datasource[0] + 1) {
        throw new IllegalArgumentException();
    }
    // first value in the source data is the matriz size
    final int size = datasource[0];
    // because the first value is the size, we expect the loop limit to be unusual.
    final int limit = datasource.length - 1;

    int[][] result = new int[size][size];

    for (int i = 0; i &lt; limit; i++) {
        // convert the linnear/flat address to a row/column
        int row = i / size;
        int col = i % size;

        // rectangle-sum above us
        int abovesum = row &gt; 0 ? result[row - 1][col] : 0;
        // rectangle-sum to left of us
        int leftsum = col &gt; 0 ? result[row][col - 1] : 0;
        // rectangle-sum above-left of us.
        int aboveleftsum = (col &gt; 0 &amp;&amp; row &gt; 0) ? result[row - 1][col - 1] : 0;
        // our value at this point (note the index+1 offset because the first value is the size)
        int val = datasource[i + 1];
        // the sum here is
        // the value here
        // plus above-left-rectangle-sum
        // plus above-column-sum
        // plus left-row-sum
        result[row][col] = val
                         + aboveleftsum
                         + (leftsum - aboveleftsum)
                         + (abovesum - aboveleftsum);
    }
    return result;

}
</code></pre>

<p>I have put a lot of comments in there for you...</p>

<p>I have also tested it with:</p>

<pre><code>public static void main(String[] args) {
    System.out.println(Arrays.deepToString(sumAboveLeft(new int[]{
         7,
         1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1,
    })));
}
</code></pre>

<p>So, the process can be done in <em>O(n)</em>, where n is the number of members in the matrix.</p>
    </div>