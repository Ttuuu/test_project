<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is difficult to know exactly what the root cause of the slowness but I see some possible inefficiencies in the code. </p>

<p>The first thing I see is that the <code>body</code> and list of tables are fetched once for each iteration of the length of <code>conceptData</code>: </p>

<blockquote>
<pre><code>var body = doc.getBody();
var table = body.getTables()[i*1+1];
</code></pre>
</blockquote>

<p>I am not aware of how expensive those calls are but if they take a lot of time the 
 that likely gets multiplied by the number of loop iterations. You could try moving the calls to fetch the body and list of tables out of the <code>for</code> loop:</p>

<pre><code>var body = doc.getBody();
var tables = body.getTables();
</code></pre>

<p>Then inside the <code>for</code> loop set the <code>table</code> accordingly: </p>

<pre><code>for (i=0; i&lt;conceptData.length; i++) {
  var table = tables[i*1+1];
</code></pre>

<hr>

<p>After reading <a href="https://codereview.stackexchange.com/a/200689/120114">this answer to a similar post about a google apps script tot hide cells</a> and <a href="https://developers.google.com/apps-script/guides/support/best-practices" rel="nofollow noreferrer">this Google Apps Scripts <em>Best Practices</em> page</a> I would suggest you look into fetching a range of cells into an array, modifying the array and then writing out the modified array to the cells. I see there is documentation for <a href="https://developers.google.com/sheets/api/guides/values" rel="nofollow noreferrer">reading and writing ranges of cells</a> though you may need to use different API objects than you currently are using, as well as promises, though maybe you are using an older version of the API. </p>

<hr>

<p>Another thing I noticed is that <code>var td</code> gets repeated for each cell modified in the loop. While it isn’t wrong, you technically don’t need to repeat the <code>var</code> keyword after it has been declared once within the function, and some might argue that there is little need to assign the value because it is only used once (before being re-assigned).</p>

<p>You could avoid the assignment by chaining the calls- for example:</p>

<pre><code>table.getCell(0,0)
  .setText('No.Folio:\n'+conc.folio+'\nNo. Doc. \n'+studentData.documento);

table.getCell(0,1)
  .setText('Concepto:\n'+conc.conceptoname);
</code></pre>

<p>Also, <code>newTable</code> doesn’t appear to be used so there is no point in assigning it:</p>

<blockquote>
<pre><code>var newTable = body.insertTable(body.getNumChildren()-1,copy);
</code></pre>
</blockquote>

<p>Just insert the table:</p>

<pre><code>body.insertTable(body.getNumChildren()-1,copy);
</code></pre>
    </div>