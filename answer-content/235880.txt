<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>cascaded_union</code> function can take more than one object, so you should be able to do:</p>

<pre><code>from shapely.geometry import Polygon, MultiPolygon
from shapely.ops import cascaded_union

def get_region(vertices, triangles):
    regions = MultiPolygon([Polygon([vertices[i] for i in triangle])
                            for triangle in triangles])
    return list(cascaded_union(regions).exterior.coords)
</code></pre>

<p>When deleting <code>triangle[72]</code> from your example, which is not really a triangle and the reason for your <code>try...except ValueError</code>, this gives the same area for this function and yours, <code>1060307.0</code>.</p>

<p>If you cannot delete those zero-size triangles manually, you can do it programmatically as well:</p>

<pre><code>def get_region(vertices, triangles):
    polygons = (Polygon([vertices[i] for i in triangle])
                for triangle in triangles)
    regions = MultiPolygon([p for p in polygons if p.area &gt; 0])
    return list(cascaded_union(regions).exterior.coords)
</code></pre>

<p>I would leave getting the points of the exterior to the caller, or another function, but I left it here in order to not change the interface.</p>

<p>Note that <a href="https://shapely.readthedocs.io/en/stable/manual.html#shapely.ops.cascaded_union" rel="nofollow noreferrer"><code>cascaded_union</code> may be superseded by <code>unary_union</code></a>, depending on the version you are using.</p>

<p>I am not sure why you use the datastructure you have. It would be easier to directly store the vertices for each triangle as a three-tuple, so that you could just do:</p>

<pre><code>def get_region(triangles):
    polygons = (Polygon(triangle) for triangle in triangles)
    regions = MultiPolygon([p for p in polygons if p.area &gt; 0])
    return list(cascaded_union(regions).exterior.coords)
</code></pre>
    </div>