<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To address your first question:</p>
<blockquote>
<p>Is the callable type hint here preferred as opposed to closure?</p>
</blockquote>
<p>There is a very similar question on StackOverflow: <a href="https://stackoverflow.com/q/29730720/1575353"><em>PHP: Type hinting - Difference between <code>Closure</code> and <code>Callable</code></em></a>. It has three answers.</p>
<p>The first line of <a href="https://stackoverflow.com/a/40942212/1575353">the answer by Xorifelse</a> explains:</p>
<blockquote>
<p>The main difference between them is that a <a href="http://php.net/manual/en/class.closure.php" rel="nofollow noreferrer"><code>closure</code></a> is a <em>class</em> and <a href="http://php.net/manual/en/language.types.callable.php" rel="nofollow noreferrer"><code>callable</code></a> a <em>type</em>.</p>
</blockquote>
<p>And the last line of <a href="https://stackoverflow.com/a/29730810/1575353">the accepted answer by Rizier123</a> has this suggestion:</p>
<blockquote>
<p>So if you only want to type hint anonymous function use: <code>Closure</code> and if you want also to allow normal functions use <code>callable</code> as type hint.</p>
</blockquote>
<hr>
<p><em>And now, for <strike>something completely different</strike> general code review comments:</em></p>
<h3>Variable naming</h3>
<p>The name <code>$k</code> is a little too brief... <code>$key</code> isn't very long and describes what the variable is.</p>
<h3>Simplifying ternary expressions</h3>
<p>Correct me if I am mistaken but as long as PHP 5.3+ is used then this line:</p>
<blockquote>
<pre><code>$serialize = $serialize ? $serialize : 'serialize';
</code></pre>
</blockquote>
<p>could be shortened using the fact that:</p>
<blockquote>
<p>The expression <code>(expr1) ? (expr2) : (expr3)</code> evaluates to expr2 if expr1 evaluates to <strong>TRUE</strong>, and expr3 if expr1 evaluates to <strong>FALSE</strong>.<br> <em>Since PHP 5.3, it is possible to leave out the middle part of the ternary operator. Expression <code>expr1 ?: expr3</code> returns expr1 if expr1 evaluates to <strong><code>TRUE</code></strong>, and expr3 otherwise.</em><sup><a href="https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>
<p>to the following:</p>
<pre><code>$serialize = $serialize ?: 'serialize';
</code></pre>
<p>If PHP 7+ is used (which hopefully is the case, since at the time of writing, 7.2+ are actively maintained<sup><a href="https://www.php.net/supported-versions.php" rel="nofollow noreferrer">2</a></sup>) then the <a href="https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.null-coalesce-op" rel="nofollow noreferrer">null coalescing operator i.e. <code>??</code></a> could also be used to simplify cases where a fallback should be used if a non-null value does not exist - e.g. :</p>
<blockquote>
<pre><code> return isset($cache[$k]) ? $cache[$k] : ($cache[$k] = $fn(...$args));
</code></pre>
</blockquote>
<p>Can become:</p>
<pre><code>return $cache[$k] ?? ($cache[$k] = $fn(...$args));
</code></pre>
    </div>