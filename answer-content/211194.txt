<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>spelling: <code>adjancecy_list</code></p></li>
<li><p>The <code>Graph</code> class doesn't own the cost list or the adjacency list, or do anything graph-like. It should probably be called <code>PathFinder</code> or simply turned into a free function, e.g.:</p>

<pre><code>ShortestPathSearchResult FindShortestPath(const AdjacencyListType&amp;, const CostEdgeVector&amp;, const NodeType&amp; source, const NodeType&amp; destination);
</code></pre></li>
<li><p><code>NodeType</code> is really an index so it should probably be <code>NodeIndex</code> instead, and be the same type as used for indexing the adjacency list and cost list (<code>std::size_t</code>).</p></li>
<li><p><code>int</code> is used in several places where we should be using <code>NodeType</code> or <code>CostType</code> instead.</p></li>
<li><p><strong>Bug:</strong> In the simple example given, both the adjacency and cost list are empty (i.e. there are no nodes). However, <code>shortest_path</code> returns <code>0</code> for the given target / source node index, instead of <code>-1</code>. This is because it checks for equality between the source and target nodes before checking that the nodes actually exist.</p></li>
<li><p>It's better to throw an exception when given invalid input (nodes that don't exist). Currently there's no difference between invalid input (returns <code>-1</code>) and simply not being able to find a path.</p></li>
<li><p>Don't use exceptions for flow control (the try catch block). We can simply check the target index is valid earlier in the function (as with the source index).</p></li>
</ul>
    </div>