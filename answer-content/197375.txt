<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Too much messing about in hyper space.</h1>

<p>You have way too much messing about. <code>Object.assign</code> is slow and more so when you don't need it.</p>

<h2>RegExp is fast</h2>

<p>If you are going to search strings use a <code>RegExp</code> it is far far quicker. And if not don't convert the same value to lower (or upper) case every time you need to check it. Once is all you need to do.</p>

<p>I can not quite workout where you are getting <code>element.key</code> from. </p>

<h2>Set and Map for lookups</h2>

<p>Rather than search manually over an array of keys you can use a <code>Set</code> that will provide fast hash table lookup</p>

<pre><code>// at the very start of the search create an empty set
var foundKeys = new Set(); 

...

// then rather than loop over iwoList check if the set already has the key
if (!foundKeys.has(object.key)) { 
    foundKeys.add(object.key);  // if not add the new one
    this.iwoList.push(object);
}
// saving a mass of cycles.
</code></pre>

<h2>Look for the quick answer</h2>

<p>It would be better to check the <code>foundKeys</code> set right at the start before you search the object. No point searching for a match only to dump the result because you have that key. Make it the first thing to check before you search the object, first thing inside the loop would be the best way to avoid many cycles.    </p>

<h2>Bloat also eats cycles</h2>

<p>Its all a little hanging out and bloated at the start.</p>

<blockquote>
<pre><code> let object = Object.assign({}, element);  // object is copied from element
 object['key'] = element.key;  // then you copy key, but key will be in object from the line above
 let keys = Object.keys(object)   // then create a keys array and a iterator index
 for (let i = 0; i &lt; keys.length; i++) {
   let prop = keys[i]  // another variable 
   let item = object[prop]  // and another
</code></pre>
</blockquote>

<p>Why not just the one line, same as the 6 above just much quicker...</p>

<pre><code>for(const item of Object.values(element)){
</code></pre>

<h2>The rewrite</h2>

<p>Without more info, I read your code to find the first instance of the search term and add the object that it was part of from the <code>objectArray</code> to the result.</p>

<p>Checking arrays, and objects, and matching any strings or numbers found, case insensitive. </p>

<p>As a standalone function the following returns an array of objects that contain a property that matches <code>keyword</code>. I would assume that the objects come from a JSON so have ignored any cyclic references problems (which can be checked with a <code>Set</code> if needed)</p>

<p>The string matching is via a <code>regExp</code></p>

<p>The whole thing is just an extended <code>Array.filter</code> call</p>

<pre><code>function search(array, keyword) {
  const regExp = new RegExp(keyword,"gi");
  const check = obj =&gt; {
    if (obj !== null &amp;&amp; typeof obj === "object") { return Object.values(obj).some(check) }
    if (Array.isArray(obj)) { return obj.some(check) }
    return (typeof obj === "string" || typeof obj === "number") &amp;&amp; regExp.test(obj);
  }
  return array.filter(check);
}
</code></pre>
    </div>