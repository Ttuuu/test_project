<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>What is <code>$1</code> ?</h3>

<p>All the functions except <code>checker</code> include a call <code>checker $1</code>.
But none of those functions are called with a parameter,
so <code>$1</code> is never actually defined.
The only function that is called with a parameter is <code>checker</code>,
but it doesn't actually use a parameter.</p>

<p>As such, you could remove all the <code>$1</code> without changing the behavior of the program.</p>

<p>More importantly, when you want to use <code>$1</code> for something,
it's good to assign it to a variable with a descriptive name.
That way the reader can understand the purpose.
In the current program it's hard to tell if <code>$1</code> is simple negligence and oversight,
or a bug waiting to explode.
If it had a descriptive name, I could make a more educated guess.</p>

<h3>Always quote variables used in command parameters</h3>

<p>Instead of <code>checker $1</code> always write <code>checker "$1"</code>.</p>

<h3>Checking if a file is empty</h3>

<p><code>checker</code> checks if a file is empty by counting lines.
A simpler way exists using the <code>[ -s ... ]</code> builtin:</p>

<pre><code>checker() {
    [ -s ~/backupMessageError.txt ]
}
</code></pre>

<p>Notice that there's no need to write <code>if [ -s ... ]; then return 0; else return 1; fi</code>,
since the exit code of a function is the exit code of the last command,
so we can simply use the command without the <code>if-else</code>.</p>

<h3>Use better names</h3>

<p>The current function names don't help understand what the program is doing.
In fact they are all <em>nouns</em>, when the natural choice would be <em>verbs</em>, or <em>questions</em>.
For example <code>checker</code> checks if there were any errors.
A more natural naming would be <code>seenAnyErrors</code>.
Notice how the code could read like prose:</p>

<pre><code>if seenAnyErrors; then
    sendErrorReport
else
    createBackups
fi
</code></pre>

<h3>Improve error handling</h3>

<p>The current error handling is not so good. Let's take a closer look at for example:</p>

<blockquote>
<pre><code>tar -I pigz -cf backupFolder1.tar.gz folder1 2&gt;&gt; ~/backupMessageError.txt
tar -I pigz -cf backupFolder2.tar.gz folder2 2&gt;&gt; ~/backupMessageError.txt
tar -I pigz -cf backupFolder3.tar.gz folder3 2&gt;&gt; ~/backupMessageError.txt

if seenAnyErrors; then ...; fi
</code></pre>
</blockquote>

<p>What if the first <code>tar</code> command fails?
Is your intention to continue with the others anyway?</p>

<p>The current way of checking for errors expects that a failing command writes something to <code>stderr</code>. That's not necessarily the case always, therefore it would be fragile to rely on that. A more reliable way is using the exit code.</p>

<p>A better way to write the above, relying on exit code, would be:</p>

<pre><code>failures=0

tar -I pigz -cf backupFolder1.tar.gz folder1 2&gt;&gt; "$errors"
((failures += $?))

tar -I pigz -cf backupFolder2.tar.gz folder2 2&gt;&gt; "$errors"
((failures += $?))

tar -I pigz -cf backupFolder3.tar.gz folder3 2&gt;&gt; "$errors"
((failures += $?))

if [ "$failures" != 0 ]; then ...; fi
</code></pre>

<h3>Don't double-quote <code>~</code></h3>

<p>I believe this is an error:</p>

<blockquote>
<pre><code>readonly MESSAGE="~/backupMessageError.txt"
</code></pre>
</blockquote>

<p>When <code>~</code> is double-quoted, the shell won't expand it to <code>$HOME</code>.
As it is, I think the command <code>mail -s "$SUBJECT" "$TO" &lt; $MESSAGE</code> will fail with "No such file or directory" error. That variable definition should have been written as:</p>

<pre><code>readonly MESSAGE=~/backupMessageError.txt
</code></pre>
    </div>