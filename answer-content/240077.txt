<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some possible improvements:</p>

<p>Your <code>ArrayRangeException</code> has a <code>getMessage</code> property that is never referenced elsewhere (even if a consumer were to know about it, it would be much simpler for it to just use the <code>.message</code> property). But it's still basically just an object wrapper around a string. Since you're going to be throwing, you might consider using a built-in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError" rel="nofollow noreferrer">RangeError</a> instead, eg:</p>

<pre><code>if (toIndex &gt; arrayLength) {
    throw new RangeError(
        "'toIndex' is too large: " + toIndex + ', array length: ' +
        arrayLength);
}
</code></pre>

<p>You can also consider using template literals, which some consider to be more readable than concatenation:</p>

<pre><code>if (toIndex &gt; arrayLength) {
    throw new RangeError(`'toIndex' is too large: ${toIndex}, array length: ${arrayLength}`);
}
</code></pre>

<p><code>RangeCheck</code> isn't a constructor, so it probably shouldn't be capitalized.</p>

<p>Your <code>RunHeap</code> constructor assigns lots of function properties directly to the instance, and chains them with the comma operator:</p>

<pre><code>this.pushRun = function(fromIndex, toIndex) {
  // ...
},
this.popElement = function() {
  // ...
},
this.swap = function(array, index1, index2) {
  // ...
</code></pre>

<p>The comma operator <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Comma_Operator" rel="nofollow noreferrer">evaluates each of its operands (from left to right) and returns the value of the last operand</a>. This can be <a href="https://stackoverflow.com/questions/3561043/what-does-a-comma-do-in-javascript-expressions">somewhat</a> <a href="https://stackoverflow.com/questions/9579546/when-is-the-comma-operator-useful">confusing</a>, and so is often forbidden by code style guides. Since each function assignment here can be standalone, have each be a separate statement instead, and separate them with semicolons:</p>

<pre><code>this.pushRun = function(fromIndex, toIndex) {
  // ...
};
this.popElement = function() {
  // ...
};
this.swap = function(array, index1, index2) {
  // ...
</code></pre>

<p>But there's another issue - this creates those <code>pushRun</code>, <code>popElement</code>, <code>swap</code> methods anew <em>every time</em> the <code>RunHeap</code> constructor is run. This is inefficient; the functions are all the same. Put them on the prototype instead, so that they only have to be created once:</p>

<pre><code>function RunHeap(array, cmp) {
    this.cmp = cmp;
    // ...
}
RunHeap.prototype.pushRun = function(fromIndex, toIndex) {
    // ...
};

RunHeap.prototype.popElement = function() {
  // ...
</code></pre>

<p>Since you're already using ES6+ syntax (which is great, you should), it'd probably be a good idea to use it everywhere - instead of a <code>function</code> that you call <code>new</code> on, you can use <code>class</code>, they're a bit more concise and readable, and are the preferred modern way of doing things:</p>

<pre><code>class RunHeap {
    constructor(array, cmp) {
        this.cmp = cmp;
        // ...
    }
    pushRun(fromIndex, toIndex) {
        const nodeIndex = this.size++;
        // ...
    }
    popElement() {
        const returnValue = this.array[this.fromIndexArray[0]];
        // ...
</code></pre>

<p>Using <code>++</code> / <code>--</code> as a standalone statement is fine, but they can sometimes be confusing when they're used as an expression. (This is the same idea behind avoiding <a href="https://eslint.org/docs/rules/no-multi-assign" rel="nofollow noreferrer">chained assignments</a> and <a href="https://eslint.org/docs/rules/no-cond-assign" rel="nofollow noreferrer">conditional assignments</a>) You might consider putting the increments/decrements on their own line, eg replace</p>

<pre><code>const last1 = this.fromIndexArray[--this.size];
</code></pre>

<p>with</p>

<pre><code>this.size--;
const last1 = this.fromIndexArray[this.size];
</code></pre>

<p>Same for the other instances of pre/post increment-as-expression.</p>

<p>(even if <em>you</em> find the first version readable at a glance, I wouldn't bet on most readers of the code seeing it the same way)</p>

<p><code>if (cmp != 0) {</code> When comparing, best to use strict equality, <a href="https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons">not loose equality</a>.</p>

<p><code>for (i = Math.floor(this.size / 2); i &gt;= 0; --i) {</code> Best to always declare variables before using them - this will either implicitly create a global variable <code>i</code>, or throw an error if in strict mode. (change to <code>let i =</code>) (Same for <code>for (i1 = fromIndex, i2 = toIndex;</code> and <code>head = left</code>)</p>

<p>The <code>swap</code> function does the same thing as is done in each iteration of the <code>reverseRun</code> loop. Maybe have <code>reverseRun</code> call <code>swap</code>?</p>

<p>ES6 allows for default arguments in the case nothing is passed:</p>

<pre><code>Array.prototype.heapSelectionSort = function (cmp, fromIndex, toIndex) {
    if (!cmp) {
        cmp = (a, b) =&gt; a - b;
    }

    if (!fromIndex) {
        fromIndex = 0;
    }

    if (!toIndex) {
        toIndex = this.length;
    }
</code></pre>

<p>can be:</p>

<pre><code>Array.prototype.heapSelectionSort = function (
    cmp = (a, b) =&gt; a - b,
    fromIndex = 0,
    toIndex = this.length
) {
</code></pre>

<p>It's <a href="https://stackoverflow.com/q/14034180">usually a bad idea</a> to mutate the built-in objects, like <code>Array.prototype</code>. (Bad frameworks putting non-standard methods onto prototypes <a href="https://stackoverflow.com/a/55934491">is why</a> we have <code>Array.prototype.flat</code> instead of <code>Array.prototype.flatten</code>, and <code>Array.prototype.includes</code> instead of <code>Array.prototype.contains</code>.) It can cause a few problems. You could have <code>heapSelectionSort</code> be a standalone function instead.</p>

<p>In full:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const heapSelectionSort = (() =&gt; {
    'use strict';
    function rangeCheck(arrayLength, fromIndex, toIndex) {
        if (fromIndex &lt; 0) {
            throw new RangeError(`'fromIndex' is negative: ${fromIndex}`);
        }
        if (toIndex &gt; arrayLength) {
            throw new RangeError(`'toIndex' is too large: ${toIndex}, array length: ${arrayLength}`);
        }
        if (fromIndex &gt; toIndex) {
            throw new RangeError(`fromIndex(${fromIndex}) &gt; toIndex(${toIndex})`);
        }
    }

    const swap = (array, index1, index2) =&gt; {
        const tmp = array[index1];
        array[index1] = array[index2];
        array[index2] = tmp;
    };

    class RunHeap {
        constructor(array, cmp) {
            this.cmp = cmp;
            this.array = array;
            const auxArrayLength = (array.length &gt;&gt;&gt; 1) + 1;
            this.fromIndexArray = Array(auxArrayLength);
            this.toIndexArray = Array(auxArrayLength);
            this.size = 0;
        }
        pushRun(fromIndex, toIndex) {
            this.fromIndexArray[this.size] = fromIndex;
            this.toIndexArray[this.size] = toIndex;
            this.size++;
        }
        popElement() {
            const returnValue = this.array[this.fromIndexArray[0]];
            this.fromIndexArray[0]++;

            if (this.fromIndexArray[0] === this.toIndexArray[0]) {
                this.size--;
                const last1 = this.fromIndexArray[this.size];
                this.fromIndexArray[0] = last1;

                const last2 = this.toIndexArray[this.size];
                this.toIndexArray[0] = last2;
            }

            this.siftDown(0);
            return returnValue;
        }
        isLessThan(runIndex1, runIndex2) {
            const element1 = this.array[this.fromIndexArray[runIndex1]];
            const element2 = this.array[this.fromIndexArray[runIndex2]];
            const cmp = this.cmp(element1, element2);

            if (cmp !== 0) {
                return cmp &lt; 0;
            }

            return this.fromIndexArray[runIndex1] &lt; this.fromIndexArray[runIndex2];
        }

        siftDown(index) {
            let nodeIndex = index;
            let leftChildIndex = (index &lt;&lt; 1) + 1;
            let rightChildIndex = leftChildIndex + 1;
            let minIndex = index;

            while (true) {
                if (leftChildIndex &lt; this.size &amp;&amp; this.isLessThan(leftChildIndex, nodeIndex)) {
                    minIndex = leftChildIndex;
                }

                if (rightChildIndex &lt; this.size &amp;&amp; this.isLessThan(rightChildIndex, minIndex)) {
                    minIndex = rightChildIndex;
                }

                if (minIndex === nodeIndex) {
                    return;
                }

                swap(this.fromIndexArray, minIndex, nodeIndex);
                swap(this.toIndexArray, minIndex, nodeIndex);

                nodeIndex = minIndex;
                leftChildIndex = (nodeIndex &lt;&lt; 1) + 1;
                rightChildIndex = leftChildIndex + 1;
            }
        }

        buildHeap() {
            for (let i = Math.floor(this.size / 2); i &gt;= 0; i--) {
                this.siftDown(i);
            }
        }

        extendRun(length) {
            this.toIndexArray[this.size - 1] += length;
        }

        appendRun(fromIndex, toIndex) {
            this.fromIndexArray[this.size] = fromIndex;
            this.toIndexArray[this.size] = toIndex;
            this.size++;
        }
    }

    function reverseRun(array, fromIndex, toIndex) {
        for (let i1 = fromIndex, i2 = toIndex; i1 &lt; i2; i1++ , i2--) {
            swap(array, i1, i2);
        }
    }

    function createRunHeap(array, cmp) {
        const runHeap = new RunHeap(array, cmp);
        let left = 0;
        let right = 1;
        const last = array.length - 1;
        let previousWasDescending = false;

        while (left &lt; last) {
            const head = left;
            right = left + 1;

            if (cmp(array[left], array[right]) &lt;= 0) {
                while (left &lt; last &amp;&amp; cmp(array[left], array[right]) &lt;= 0) {
                    left++;
                    right++;
                }

                if (previousWasDescending) {
                    if (cmp(array[head - 1], array[head]) &lt;= 0) {
                        runHeap.extendRun(right - head);
                    } else {
                        runHeap.appendRun(head, right);
                    }
                } else {
                    runHeap.appendRun(head, right);
                }

                previousWasDescending = false;
            } else { // Scan a descending run:
                while (left &lt; last &amp;&amp; cmp(array[left], array[right]) &gt; 0) {
                    left++;
                    right++;
                }

                reverseRun(array, head, left);

                if (previousWasDescending) {
                    if (cmp(array[head - 1], array[head]) &lt;= 0) {
                        runHeap.extendRun(right - head);
                    } else {
                        runHeap.appendRun(head, right);
                    }
                } else {
                    runHeap.appendRun(head, right);
                }

                previousWasDescending = true;
            }

            left++;
            right++;
        }

        if (left === last) {
            if (cmp(array[last - 1], array[last]) &lt;= 0) {
                runHeap.extendRun(1);
            } else {
                runHeap.appendRun(last, last + 1);
            }
        }

        return runHeap;
    }

    return (
        arr,
        cmp = (a, b) =&gt; a - b,
        fromIndex = 0,
        toIndex = arr.length
    ) =&gt; {
        rangeCheck(arr.length, fromIndex, toIndex);

        if (toIndex - fromIndex &lt; 2) {
            return arr;
        }

        const aux = arr.slice(fromIndex, toIndex);
        const runHeap = createRunHeap(aux, cmp);
        runHeap.buildHeap();

        let index = fromIndex;

        while (index &lt; toIndex) {
            arr[index] = runHeap.popElement();
            index++;
        }

        return arr;
    };
})();

console.log(
  heapSelectionSort([4, 5, 0, 1, 7, 8])
);</code></pre>
</div>
</div>

    </div>