<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My tests indicate that adding an instance of TTestClass to the AppSessionVariables Dictionary does not survive a state loss.</p>

<pre><code>Private Sub SetVariable()
    Rem ...Code
    End

End Sub
</code></pre>

<p>Adding <strong>End</strong> to <code>SetVariable</code> and then calling <code>GetVariable</code> throws this error:</p>

<p><a href="https://i.stack.imgur.com/WzUgn.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/WzUgn.png" alt="Immediate Window"></a></p>

<p>Simple Key/Value pairs do, however, persist.  The values persist even after closing and reopening the workbook.  Closing the Excel.Application destroys the reference.</p>

<h2>Saving and Restoring the Object's State</h2>

<p>It should be the responsibility of the class to determine how to save and restore its state.  This will not only make it easier to implement but will also allow you to store private field values.</p>

<p>All the classes to be saved should Implement a common Interface which defines the methods used to save and restore the settings.  Having each object store its setting in its own dictionary and adding the objects dictionary to the AppSessionVariables's persistent dictionary will encapsulate the objects settings making it easier to work with.  </p>

<p>To test my design I created an IVBASerializable Interface and two classes that Implement it.  The classes are successfully saved and restored as long as the application is not closed.</p>

<h2>Interface: IVBASerializable</h2>

<pre><code>Attribute VB_Name = "IVBASerializable"

Option Explicit

Public Function Save() As Boolean
End Function

Public Function Restore() As Boolean
End Function

Public Property Get Guid() As String
End Property

Public Property Let Guid(ByVal Value As String)
End Property

Public Property Get ToString() As String
End Property

Public Property Get ClassName() As String
End Property
</code></pre>

<h2>Class: SerializableRange</h2>

<pre><code>Attribute VB_Name = "SerializableRange"

Option Explicit
Implements IVBASerializable

Private Type Members
    RangeExternalAddress As String
End Type

Private this As Members
Private Created As Date
Public Guid As String

Private Sub Class_Initialize()
    Created = Date
End Sub

Public Property Get ClassName() As String
    ClassName = TypeName(Me)
End Property

Private Property Get IVBASerializable_ClassName() As String
    IVBASerializable_ClassName = ClassName
End Property

Private Property Get IVBASerializable_Guid() As String
    IVBASerializable_Guid = Guid
End Property

Private Property Let IVBASerializable_Guid(ByVal Value As String)
    Guid = Value
End Property

Private Property Get IVBASerializable_ToString() As String
    Dim Values(3) As String
    Values(0) = "Address: " &amp; this.RangeExternalAddress
    Values(1) = "Row Count: " &amp; Range.Rows.Count
    Values(2) = "Column Count: " &amp; Range.Columns.Count
    Values(3) = "Created: " &amp; Created

    IVBASerializable_ToString = Join(Values, vbNewLine)
End Property

Public Property Get Range() As Range
    Set Range = Application.Range(this.RangeExternalAddress)
End Property

Public Property Let Range(ByVal newRange As Range)
    this.RangeExternalAddress = newRange.Address(External:=True)
End Property

Public Property Get Self() As SerializableRange
    Set Self = Me
End Property



Private Function IVBASerializable_Restore() As Boolean
    IVBASerializable_Restore = Restore
End Function

Private Function IVBASerializable_Save() As Boolean
    IVBASerializable_Save = Save
End Function

Public Function Restore() As Boolean
    If AppSessionVariables.Exists(Guid) Then
        Dim Map As Scripting.Dictionary
        Set Map = AppSessionVariables.Item(Guid)
        Map("Created") = Created
        this.RangeExternalAddress = Map("RangeExternalAddress")
    End If
End Function

Public Function Save() As Boolean
    If Len(Guid) &gt; 0 Then
        Dim Map As New Scripting.Dictionary
        Map("RangeExternalAddress") = this.RangeExternalAddress
        Map("Created") = Created
        AppSessionVariables.Add Guid, Map
    End If
End Function
</code></pre>

<h2>Class: SerializableSize</h2>

<pre><code>Attribute VB_Name = "SerializableSize"

Option Explicit
Implements IVBASerializable

Private Type Members
    Guid As String
    Shape As Shape
End Type

Private this As Members
Public Guid As String
Private Created As Date
Public Width As Single
Public Height As Single

Private Sub Class_Initialize()
    Created = Date
End Sub

Public Property Get ClassName() As String
    ClassName = TypeName(Me)
End Property

Private Property Get IVBASerializable_ClassName() As String
    IVBASerializable_ClassName = ClassName
End Property

Private Property Get IVBASerializable_Guid() As String
    IVBASerializable_Guid = Guid
End Property

Private Property Let IVBASerializable_Guid(ByVal Value As String)
    Guid = Value
End Property

Private Property Get IVBASerializable_ToString() As String
    Dim Values(2) As String
    Values(0) = "Width: " &amp; Width
    Values(1) = "Height: " &amp; Height
    Values(2) = "Created: " &amp; Created

    IVBASerializable_ToString = Join(Values, vbNewLine)
End Property

Public Property Get Self() As SerializableSize
    Set Self = Me
End Property

Private Function IVBASerializable_Restore() As Boolean
    IVBASerializable_Restore = Restore
End Function

Private Function IVBASerializable_Save() As Boolean
    IVBASerializable_Save = Save
End Function

Public Function Restore() As Boolean
    If AppSessionVariables.Exists(Guid) Then
        Dim Map As Scripting.Dictionary
        Set Map = AppSessionVariables.Item(Guid)
        Width = Map("Width")
        Height = Map("Height")
    End If
End Function

Public Function Save() As Boolean
    If Len(Guid) &gt; 0 Then
        Dim Map As New Scripting.Dictionary
        Map("Created") = Created
        Map("Width") = Width
        Map("Height") = Height
        AppSessionVariables.Add Guid, Map
    End If
End Function
</code></pre>

<h2>UnitTest</h2>

<pre><code>Option Explicit
Public Enum DefaultSerializables
    Range1
    Range2
    Size1
    Size2
    [_First] = Range1
    [_Last] = Size2
End Enum

Public Serializables() As IVBASerializable

Public Sub TestPart1()
    InitSerializables
    SaveSerializables
    Debug.Print "TestPart1"
    PrintSerializables
    Erase Serializables
    End
End Sub

Public Sub TestPart2()
    Debug.Print
    Debug.Print "TestPart2"
    RestoreSerializables
    PrintSerializables
End Sub

Private Sub InitSerializables()
    ReDim Serializables(0 To DefaultSerializables.[_Last])

    With New SerializableRange
        Set Serializables(Range1) = .Self
        .Guid = .ClassName &amp; ";" &amp; Range1
        .Range = Sheet1.Range("A1:C20")
    End With

    With New SerializableRange
        Set Serializables(Range2) = .Self
        .Guid = .ClassName &amp; ";" &amp; Range2
        .Range = Sheet1.Range("AA1:AC20")
    End With

    With New SerializableSize
        Set Serializables(Size1) = .Self
        .Guid = .ClassName &amp; ";" &amp; Size1
        .Height = Sheet1.Shapes(1).Height
        .Width = Sheet1.Shapes(1).Width
    End With

     With New SerializableSize
        Set Serializables(Size2) = .Self
        .Guid = .ClassName &amp; ";" &amp; Size2
        .Height = Sheet1.Shapes(2).Height
        .Width = Sheet1.Shapes(2).Width
    End With

End Sub

Sub SaveSerializables()
    Dim n As Long
    For n = DefaultSerializables.[_First] To DefaultSerializables.[_Last]
        Serializables(n).Save
    Next
End Sub

Sub RestoreSerializables()
    ReDim Serializables(0 To DefaultSerializables.[_Last])

    With New SerializableRange
        Set Serializables(Range1) = .Self
        .Guid = .ClassName &amp; ";" &amp; Range1
        .Restore
    End With

    With New SerializableRange
        Set Serializables(Range2) = .Self
        .Guid = .ClassName &amp; ";" &amp; Range2
        .Restore
    End With

    With New SerializableSize
        Set Serializables(Size1) = .Self
        .Guid = .ClassName &amp; ";" &amp; Size1
        .Restore
    End With

     With New SerializableSize
        Set Serializables(Size2) = .Self
        .Guid = .ClassName &amp; ";" &amp; Size2
        .Restore
    End With
End Sub

Sub PrintSerializables()
    Dim n As Long
    For n = DefaultSerializables.[_First] To DefaultSerializables.[_Last]
        Debug.Print Serializables(n).ToString
    Next
End Sub
</code></pre>

<h2>Test Results</h2>

<p><a href="https://i.stack.imgur.com/UQl7n.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/UQl7n.png" alt="Test Results"></a></p>
    </div>