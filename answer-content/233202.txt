<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Reducing the amount of code in any program is good because that reduces the possible errors or bugs in the code. Providing general functions that can be reused is a good habit to get into.</p>

<h2>DRY Code</h2>

<p>There is a programming principle called the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">Don't Repeat Yourself Principle</a> sometimes referred to as DRY code. If you find yourself repeating the same code multiple times it is better to encapsulate it in a function. If it is possible to loop through the code that can reduce repetition as well.</p>

<p>As shown in another answer all the if statements of the form </p>

<pre><code>        if (diceRoll1 == **x** &amp;&amp; diceRoll2 == diceRoll1 &amp;&amp; diceRoll3 == diceRoll1) {
            printf("Congratulations! You won **YY** credits.\n");
        }
</code></pre>

<p>Can be reduced to a simple function that can be reused.</p>

<p>This code can also be simplified, although it is not absolutely necessary</p>

<pre><code>    diceRoll1 = (rand() % 6) + 1;
    diceRoll2 = (rand() % 6) + 1;
    diceRoll3 = (rand() % 6) + 1;
</code></pre>

<p>Can be </p>

<pre><code>static constexpr int dieFaces = 6;      // Allows the number of faces of the dice to be changed in one place
                                        // if this is used in a board game such as D &amp; D

int rollOneDie()
{
    return (rand() % dieFaces) + 1;
}

void rollTheDice(int &amp;die1, int &amp;die2, int &amp;die3)
{
    die1 = rollOneDie();
    die2 = rollOneDie();
    die3 = rollOneDie();
}
</code></pre>

<p>Any time I see variables with the names <code>var1</code>, <code>var2</code> and <code>var3</code> I see the potential for using an array instead of separate variables. The entire program might be simplified if instead of 3 separate variables <code>diceRoll1</code>, <code>diceRoll2</code> and <code>diceRoll3</code> there was one array of dice. This would also allow the program to be easily changed so that more or less dice are used.</p>

<pre><code>static constexpr int diceCount = 3;
static constexpr int highScore = 90;
static constexpr int normalScore = 40;
static constexpr int lowScore = 10;
static constexpr int noScore = 0;

void rollTheDice2(int dice[])
{
    for (int i = 0; i &lt; diceCount; i++)
    {
        dice[i] = rollOneDie();
    }
}

bool allTheDiceEqualThisNumber(int dice[],int faceValue)
{
    for (int i = 0; i &lt; diceCount; i++)
    {
        if (dice[i] != faceValue)
        {
            return false;
        }
    }
    return true;
}

int earnCredit(int dice[])
{
    if (allTheDiceEqualThisNumber(dice, dieFaces))
    {
        return highScore;
    }
    else if (allTheDiceEqualThisNumber(dice, 1))
    {
        return lowScore;
    }
    else
    {
        for (int i = 2; i &lt; dieFaces - 1; i++) {
            if (allTheDiceEqualThisNumber(dice, i)) {
                return normalScore;
            }
        }
    }
    return noScore;
}

void showDice(int dice[])
{
    printf("Your dices are ");
    for (int i = 0; i &lt; diceCount; i++)
    {
        printf("%d ", dice[i]);
    }
    printf("\n");
}

void playGame()
{
    int diceRolls[diceCount];

    rollTheDice2(diceRolls);

    showDice(diceRolls);

    int newCredits = earnCredit(diceRolls);
    if (newCredits &gt; 0)
    {
        printf("Congratulations! You won 90 credits.\n");
    }
}
</code></pre>

<h2>Complexity</h2>

<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<pre><code>int main(void)
{
    srand((int)time(NULL));

    char yn;

    do {
        printf("\nDo you want to play? (y/n): ");
        scanf_s("%c", &amp;yn);
        getchar();

        if (yn == 'n') {
            printf("Coward!");
            getchar();
            return 0;
        }

        playGame();

    } while (yn != 'n');


    getchar();
    return 0;
}
</code></pre>

<h2>Magic Numbers</h2>

<p>There are Magic Numbers in the <code>main()</code> function (6, 90, 40, 10), it might be better to create symbolic constants for them to make the code more readble and easier to maintain. These numbers may be used in many places and being able to change them by editing only one line makes maintenance easier.</p>

<p>Numeric constants in code are sometimes referred to as <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">Magic Numbers</a>, because there is no obvious meaning for them. There is a discussion of this on <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">stackoverflow</a>.</p>

<p>The possible symbolic constants are show in the examples for <strong>DRY Code</strong></p>

<h2>C versus C++</h2>

<p>This question was originally tagged with <strong>C</strong> rather than <strong>C++</strong>. The strict version of <code>C</code> can't compile <code>#include &lt;iostream&gt;</code>, it uses <code>#include &lt;stdio.h&gt;</code> instead. Also input in <code>C++</code> generally prefers</p>

<pre><code>std::cin &gt;&gt; variableName;
</code></pre>

<p>over <code>scanf</code>, <code>scanf_s</code> or <code>getchar()</code> and </p>

<pre><code>std::cout &lt;&lt; "Your score was " &lt;&lt; variableName &lt;&lt; "\n";
</code></pre>

<p>over printf().</p>

<p>C++ also has a newer random number generator with better distribution using <code>#include &lt;random&gt;</code>.</p>
    </div>