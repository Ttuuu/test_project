<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes, of course. (It's always <em>possible</em> to eliminate unstructured constructs by use of structured programming.) I recommend Kernighan &amp; Plauger's <em>The Elements of Programming Style</em> for developing your own sense of structured programming.</p>

<p>Come on this journey with me!</p>

<p>Step 1: That confusing <code>if</code> at the top of the loop.</p>

<pre><code>while (true) {
    const char c1 = *i;
    if( c1 != '*' )
    {
        i++;
        if( i != fileEnd )
            continue;
        break;
    }
</code></pre>

<p><code>c1</code> is never used again, so we can eliminate it. Then, <code>break</code>ing the loop means going to the end of the loop and setting a "don't do this loop again" flag; so let's make that flag; we'll call it <code>done</code>. Then <code>continue</code>ing the loop means going to the end <em>without</em> setting that flag. So at this point we have</p>

<pre><code>template&lt;class It&gt;
It skipMultilineComment(It it, It fileEnd)
{
    bool done = false;
    while (!done) {
        if (*it != '*') {
            ++it;
            done = (it == fileEnd);
        } else {
            // Found '*' character
        FoundAsterisk:
            ++it;
            if (it == fileEnd) break;
            if (*it == '*') {
                /* Found another '*' character; can be more: ****/
                goto FoundAsterisk;
            } else if (*it != '/') {
                ++it;
                if (it != fileEnd) continue;
                break;
            }
            // Finally, found the closing token, "*/"
            ++it;
            return it;
        }
    }
    logError( "fatal error C1071: unexpected end of file found in comment" );
    throw E_INVALIDARG;
}
</code></pre>

<p>Notice that I've cleaned up some whitespace style and renamed <code>i</code> (traditionally a name for an integer loop control variable) to <code>it</code> (traditionally a name for an iterator). I've also made the function a template so that I can get rid of that global-scope <code>typedef</code> at the top.</p>

<p>Okay, let's pull out the next <code>break</code>... or, no, let's skip down to that similar <code>continue/break</code> tangle at the bottom of the loop, and sort that out. Same transformation as before. I'll just show the loop, because nothing outside it has changed.</p>

<pre><code>    while (!done) {
        if (*it != '*') {
            ++it;
            done = (it == fileEnd);
        } else {
            // Found '*' character
        FoundAsterisk:
            ++it;
            if (it == fileEnd) break;
            if (*it == '*') {
                /* Found another '*' character; can be more: ****/
                goto FoundAsterisk;
            } else if (*it == '/') {
                // Finally found the closing token, "*/"
                ++it;
                return it;
            } else {
                ++it;
                done = (it == fileEnd);
            }
        }
    }
</code></pre>

<p>Notice that I am also habitually untangling your <code>if/else</code> blocks. You don't want to have <code>if (a == x) ... else if (a != y) ... else if (a == z) ...</code> because that's just plain confusing. <code>if/else</code> chains should read like switch statements: one handler per interesting value. So here we have one handler for <code>*it == '*'</code>, and one handler for <code>*it == '/'</code>, and then one catch-all "else" handler.</p>

<p>Let's follow that guideline and refactor the outer <code>if (*it != '*')</code> as well.
Notice that once we do that, we don't need the comment <code>// Found '*' character</code> anymore, because it's obvious from the code itself. Getting to remove pointless comments is one of the most satisfying parts of the refactoring process!</p>

<pre><code>    while (!done) {
        if (*it == '*') {
        FoundAsterisk:
            ++it;
            if (it == fileEnd) {
                done = true;
            } else if (*it == '*') {
                goto FoundAsterisk;
            } else if (*it == '/') {
                // Finally found the closing token, "*/"
                ++it;
                return it;
            } else {
                ++it;
                done = (it == fileEnd);
            }
        } else {
            ++it;
            done = (it == fileEnd);
        }
    }
</code></pre>

<p>Okay, let's tackle that <code>goto</code>. The fundamental algorithm here is, "While we're looking at a <code>*</code> character, increment <code>it</code>. But if we reach the end of the string, then stop." Normally we'd spell that as</p>

<pre><code>while (it != fileEnd &amp;&amp; *it == '*') { ++it; }
</code></pre>

<p>Let's see if we can shoehorn that line of code into our function in a natural way.</p>

<pre><code>    while (!done) {
        if (*it == '*') {
            while (it != fileEnd &amp;&amp; *it == '*') {
                ++it;
            }
            if (it == fileEnd) {
                done = true;
            } else if (*it == '/') {
                // Finally found the closing token, "*/"
                ++it;
                return it;
            } else {
                ++it;
                done = (it == fileEnd);
            }
        } else {
            ++it;
            done = (it == fileEnd);
        }
    }
</code></pre>

<p>Notice that every path to the bottom of the outer loop now ends with <code>done = (it == fileEnd)</code> (except in one case where we already know <code>it == fileEnd</code> and so we just set <code>done = true</code>). So basically we just keep going until <code>it == fileEnd</code>. That's our loop condition.</p>

<pre><code>    while (it != fileEnd) {
        if (*it == '*') {
            while (it != fileEnd &amp;&amp; *it == '*') {
                ++it;
            }
            if (it == fileEnd) {
            } else if (*it == '/') {
                // Finally found the closing token, "*/"
                ++it;
                return it;
            } else {
                ++it;
            }
        } else {
            ++it;
        }
    }
</code></pre>

<p>Okay, but, now we've got a loop <em>within</em> a loop. You know what? Maybe what we really want here is a simple state machine: Either we've just seen a <code>*</code>, or we haven't. If we have, and the next character is <code>/</code>, then we're done. Otherwise, keep going. That would code up like this:</p>

<pre><code>template&lt;class It&gt;
It skipMultilineComment(It it, It fileEnd)
{
    for (bool seenStar = false; it != fileEnd; ++it) {
        if (*it == '/' &amp;&amp; seenStar) {
            return it + 1;
        }
        seenStar = (*it == '*');
    }
    logError( "fatal error C1071: unexpected end of file found in comment" );
    throw E_INVALIDARG;
}
</code></pre>

<p>Yes. I like that better. But wait, we can do better than that! All we seem to be doing is looking for the string <code>"*/"</code> inside a longer string. That's <em>string search</em>, and there are library functions for that!</p>

<pre><code>#include &lt;string.h&gt;

const char *skipMultilineComment(const char *it, const char *fileEnd)
{
    if (const char *p = memmem(it, fileEnd - it, "*/", 2)) {
        return p + 2;
    }
    logError( "fatal error C1071: unexpected end of file found in comment" );
    throw E_INVALIDARG;
}
</code></pre>

<p>or in C++17,</p>

<pre><code>std::string_view skipMultilineComment(std::string_view text)
{
    size_t pos = text.find("*/");
    if (pos != text.npos) {
        return text.substr(pos + 2);
    }
    logError( "fatal error C1071: unexpected end of file found in comment" );
    throw E_INVALIDARG;
}
</code></pre>
    </div>