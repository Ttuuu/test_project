<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<p>ways to make it faster without totally changing the premises (as it were).</p>
</blockquote>
<p>I'm not sure where you draw that line, but I'll try to stay on the right side of it by suggesting a series of incremental changes to the "meat" of the algorithm,</p>
<blockquote>
<pre><code>   while is_prime(y) != True:
      for i in prime_lst:
        if y % i == 0:
          y = y/i
          factors_lst.append(i)
</code></pre>
</blockquote>
<h1>Handling repeated factors</h1>
<p>Currently a repeated factor requires the inner <code>for</code>-loop to complete, and <code>y</code> to be tested for primality again (which by the way effectively finds a factor as well, since it uses Trial Division, but it does not return that factor), then the inner <code>for</code>-loop has to start from scratch first trying a bunch of small divisors that have already been rejected in the previous iteration of the outer loop.</p>
<p>That duplication/re-scanning could be avoided by removing <em>all</em> instances of a given factor at once, by changing the <code>if</code> to <code>while</code>:</p>
<pre><code>for i in prime_lst:
    while y % i == 0:
        y = y / i
        factors_lst.append(i)
</code></pre>
<p>As a bonus, the list of factors is created in order, so it does not need to be sorted .. except that <code>factors_lst.append(y)</code> can append either a big prime or 1. Rather than appending <code>y</code> blindly, sorting the list, and then removing <code>1</code> from the front, I would suggest conditionally appending <code>y</code>:</p>
<pre><code>if y &gt; 1:
    factors_lst.append(y)
</code></pre>
<h1>Removing <code>prime_lst</code></h1>
<p>Building <code>prime_lst</code> is actually the slowest part of the code. It costs more time than it saves by the effect of only trying primes as factors. Simply trying a range of integers is already faster. But what range? Actually a range from <code>2</code> to <code>c</code> is too much: it does not take into account that <code>y</code> is going down as factors are found. So there is no pre-determined range that fits the bill, but it could be done like this:</p>
<pre><code>i = 2
while i * i &lt;= y:
    while y % i == 0:
        y = y / i          # note: use // in Python 3
        factors_lst.append(i)
    i = i + 1
</code></pre>
<p>Where <code>i * i &lt;= y</code> is a similar sort of condition as <code>i &lt; c</code>, except it takes the changing <code>y</code> into account, without repeatedly taking square roots.</p>
<p>Note that checking whether <code>i</code> is a prime is not necessary. <code>y % i == 0</code> can only succeed if <code>i</code> is prime, because if <code>i</code> was a composite <code>a * b</code>, then <code>a</code> and <code>b</code> would have already been divided out of <code>y</code>, making <code>i</code> not a divisor of <code>y</code>.</p>
<h1>Doing half the work</h1>
<p>The only even prime is 2. All other even numbers can be skipped as divisors: composites cannot be factors anyway. Unlike finding a list of primes first, just skipping even numbers is essentially free. The catch is that handling 2 itself is now trickier:</p>
<pre><code>def prime_factors(y):
    factors_lst = []
    while y % 2 == 0:
        y = y / 2
        factors_lst.append(2)
    i = 3
    while i * i &lt;= y:
        while y % i == 0:
            y = y / i
            factors_lst.append(i)
        i = i + 2
    if y &gt; 1:
        factors_lst.append(y)
    return factors_lst
</code></pre>
<h1>Time test</h1>
<p>Factoring a fairly big composite with big factors, namely <code>222222227 * 232222223 * 322222223</code>, took nearly 23 seconds on my PC. The original method struggles very hard with that, due to trying to build a very big list of primes first. Using a simple/hacky version of Pollard's rho algorithm to find factors took only 0.13 seconds.</p>
    </div>