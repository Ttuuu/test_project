<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks good, but the structure could be better.</p>

<p>For example, <code>main</code> gets called by <code>main_basis</code>. Please don't.
<code>main</code> should be the top level function.</p>

<p>So let's start by renaming <code>main</code> to <code>base</code> (there's probably a better name) and <code>main_basis</code> to <code>main</code>. Last couple of lines end up like this:</p>

<pre><code>if __name__ == "__main__":
    main( (-2, 1),
          (-1, 2),
          color_func = color_bases)
</code></pre>

<p>So what's this doing halfway between the function definitions?</p>

<pre><code>points = [ [(x, y) for x in range(-WIDTH//2, WIDTH//2) if x % UNIT == 0 or y % UNIT == 0] \
           for y in range(-HEIGHT//2, HEIGHT//2) ]
</code></pre>

<p>If it's never modified after creation, make it a PSEUDOCONST and put it up top, near the rest of them.</p>

<p>The comment above it is a bit odd as well.</p>

<pre><code># In case you prefer just points, no lines
#points = [ [(x, y) for x in range(-WIDTH//2, WIDTH//2, UNIT ) ] for y in range(-HEIGHT//2, HEIGHT//2, UNIT) ]
</code></pre>

<blockquote>
  <p>In case you prefer just points</p>
</blockquote>

<p>Smells like an <code>if</code> to me. Variables to the rescue!</p>

<pre><code>if I_WANT_POINTS_INSTEAD_OF_LINES:
    points = [ [(x, y) for x in range(-WIDTH//2, WIDTH//2, UNIT ) ] for y in range(-HEIGHT//2, HEIGHT//2, UNIT) ]
else:
    points = [ [(x, y) for x in range(-WIDTH//2, WIDTH//2) if x % UNIT == 0 or y % UNIT == 0] \
        for y in range(-HEIGHT//2, HEIGHT//2) ]
</code></pre>

<p>The points-instead-of-lines don't really render well on my machine so you might want to check that. It also looks like you need a smaller step size when you want points, or it will be all over too soon. We should probably wrap the whole thing in a function, but it's not a requirement.</p>

<pre><code>from pygame.locals import *
</code></pre>

<p>Doesn't look like you're actually using that, so it can be removed.</p>

<p>After polishing away the PEP8 errors and warnings (whitespace in the wrong places, redundant <code>\</code> line continuations between brackets, lines too long, etc.), and replacing <code>range</code> by the faster <code>xrange</code>, the final result could look like this:</p>

<pre><code>import pygame
import time
import numpy

HEIGHT = 600
WIDTH = 600
SCREEN_SIZE = (HEIGHT, WIDTH)
UNIT = 100
STEP = 0.01
I_WANT_POINTS_INSTEAD_OF_LINES = False

if I_WANT_POINTS_INSTEAD_OF_LINES:
    POINTS = [[(x, y) for x in xrange(-WIDTH//2, WIDTH//2, UNIT)]
              for y in xrange(-HEIGHT//2, HEIGHT//2, UNIT)]
else:
    POINTS = [[(x, y) for x in xrange(-WIDTH//2, WIDTH//2)
              if x % UNIT == 0 or y % UNIT == 0]
              for y in xrange(-HEIGHT//2, HEIGHT//2)]

screen = pygame.display.set_mode(SCREEN_SIZE)


def transform_point((x, y), a, b, c, d):
    return (a*x + b*y, c*x + d*y)


def transform_point_basis((x, y), (e1x, e1y), (e2x, e2y)):
    return transform_point((x, y), e1x, e2x, e1y, e2y)


def twod_map(f, xss):
    return [[f(item) for item in xs] for xs in xss]


def color_bases((x, y)):
    """
    Colors the 1-st canonical base (0,1) red,
    The        2-nd canonical base (1,0) green
    """
    if (distance_from_o((x, y)) &lt; UNIT and y == 0 and x &gt; 0):
        return (255, 0, 0)
    if (distance_from_o((x, y)) &lt; UNIT and x == 0 and y &gt; 0):
        return (0, 255, 0)
    return (255, 255, 255)


def bright_by_distance((x, y)):
    return (255 - distance_from_o((x, y)) // 3 % 256,
            255 - distance_from_o((x, y)) // 3 % 256,
            255 - distance_from_o((x, y)) // 3 % 256)


def color_up_right((x, y)):
    """
    The most right a point was in the original state, the red-der it is.
    The most height a point was in the original state, the green-er it is.
    Does not work for size &gt; 3*255.
    """
    return (int(x + WIDTH//2)//3 % 255, int(-y + HEIGHT//2)//3 % 255, 0)


def base(final_coefficients, color_func=color_bases):
    for percentage in numpy.arange(0, 1, STEP):
        final_a, final_b, final_c, final_d = final_coefficients

        # In identity matrix, a and d start at one and c and c start from 0
        # In fact transform_point( point , 1, 0, 0, 1) = point
        # So to represent the transformation a and d must start
        # similar to 1 and become more and more similar to the final
        a = 1 * ((1 - percentage)) + percentage * final_a
        d = 1 * ((1 - percentage)) + percentage * final_d
        b = percentage * final_b
        c = percentage * final_c

        # map(lambda k: float(k) * (float(percentage)) , final_coefficients)
        koefficients = (a, b, c, d)
        show_points(twod_map(lambda p: transform_point(p, a, b, c, d), POINTS),
                    POINTS, color_func)

    # Be sure final state is precise
    show_points(twod_map(
                lambda p: transform_point(p, *final_coefficients), POINTS),
                POINTS, color_func)


def main(base_effect1, base_effect2, color_func=color_bases):
    final_coefficients = base_effect1[0], base_effect2[0], \
                         base_effect1[1], base_effect2[1]
    base(final_coefficients, color_func=color_func)


def distance_from_o(p):
    return int((p[0]**2 + p[1]**2)**0.5)


def to_cartesian((x, y), width=WIDTH, height=HEIGHT):
    return int(x + width//2), int(-y + height//2)


def draw_basic_grid(screen, grid):
    pygame.display.flip()
    screen.fill((0, 0, 0))
    for l in grid:
        for p in l:
            coords = to_cartesian(p)
            screen.set_at(coords, (50, 50, 50))


def show_points(POINTS, originals, color_func=color_bases):

    draw_basic_grid(screen, originals)

    # Original points are needed for coloring.
    for (line, lineorig) in zip(POINTS, originals):
        for (point, original) in zip(line, lineorig):
            screen.set_at(to_cartesian(point),
                          color_func((original)))


if __name__ == "__main__":
    main((-2, 1),
         (-1, 2),
         color_func=color_bases)
</code></pre>

<p>Would you ever want to add functionality I'd probably put the whole thing in a class, but that's a matter of preference.</p>
    </div>