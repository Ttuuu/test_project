<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The problem is backwards. You would never present a exclusion list for random values, rather you would present a list to randomly pick from.</p>
<p>Anyways to fit the problem.</p>
<h1>Two ways this can be done</h1>
<ol>
<li>Guessing</li>
<li>Deterministically</li>
</ol>
<h2>Guessing</h2>
<p>Your method use a random guess, you guess that the number is not in the list. If it is you guess again. This works well when the list contains only a small set of the numbers.</p>
<p>However when the exclusion list gets larger you need to make more guess to find one that is not in the list. The number of guess grows very fast as your exclusion list gets closer to excluding all.</p>
<p>This is the worst possible performance at <span class="math-container">\$O(m^{-(1/n)})\$</span> it has an Infinity</p>
<p>The other problem with guessing is that you can not know how long the function is going to run for. This makes it totally unsuitable for many real time applications.</p>
<h2>Deterministically</h2>
<p>You can improve the overall performance and have a function that has a known fixed time to get a result.</p>
<p>However is is much slower when the exclusion list is relatively small.</p>
<p>The performance is linear at <span class="math-container">\$O(n)\$</span></p>
<p>If the exclusion set does not change between calls it get even less complex at <span class="math-container">\$O(1)\$</span> which is the best you can get.</p>
<h2>Example</h2>
<p>The <span class="math-container">\$O(n)\$</span> solution</p>
<p>It returns <code>undefined</code> if it can not find a number rather than throw. You should not be solving the calling function problems as the other answers suggest.</p>
<pre><code>const getRandNotInList = (n, list) =&gt; {
    const picks = [];
    const getPickable = () =&gt; {
        var i = 0; dir = Math.sign(n);
        list = new Set(list);
        while (i !== n) {
            !list.has(i) &amp;&amp; picks.push(i);
            i += dir;
        }
    }
    n = Math.floor(n);        
    if (n === 0) { return list.includes(0) ? undefined : 0 }
    getPickable();
    return picks[Math.random() * picks.length | 0]; // (| 0) same as Math.floor 
                                                    // (only for positive ints).
}
</code></pre>
    </div>