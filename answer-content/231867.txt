<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I will assume that you really, really want to use the classes defined in the library and not make your own. Presumably the library classes offer other benefits that were not otherwise relevant to the question.</p>

<p>One thought is that you could define an interface that offers a function with the same signature as <code>getPoints</code>, though with a different function name.</p>

<pre><code>public interface PointListGettable {
    public Point[] getPointList();
}
</code></pre>

<p>(You'd probably want to come up with a better name than <code>PointListGettable</code>, however.)</p>

<p>Extend the offending classes so they implement this interface. For example:</p>

<pre><code>public MyDestination extends Destination implements PointListGettable {
    public Point[] getPointList() {
        return getPoints();
    }
}
</code></pre>

<p>Now you can implement a function with a signature like</p>

<pre><code>public PointListGettable getCurrentMapObjectWithPoint(Point point, PointListGettable [] bases)
</code></pre>

<p>but rather than define a function like your <code>getpointsArrayFromMapObject</code>, within the body of the <code>for(PointListGettable model: bases)</code> loop you can just write <code>model.getPointList()</code>.</p>

<p>If it's just a matter of getting around one perceived defect in the inheritance scheme without using <code>instanceof</code>, however, I'm not sure all this is worth it.</p>
    </div>