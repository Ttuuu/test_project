<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This design looks to me like a massive violation of <a href="https://en.wikipedia.org/wiki/KISS_principle" rel="noreferrer">KISS</a>. For a start, I don't see the benefit of <code>CastTo</code> and <code>CastTo&lt;T&gt;</code>. It seems to me that they could be eliminated by tweaking the wrapped conversion methods to work more like <code>int.TryParse</code> with two return values: one to say whether the conversion succeeded, and the other to tell you what the result was. This doesn't necessarily need to use the same pattern of <code>bool</code> return value and <code>out</code> parameter for the result: it could use <code>Tuple</code> and C# 7's tuple unwrapping, for example. But it would simplify the 57 lines of code in the question to 19:</p>

<pre><code>public static T To&lt;T&gt;(this object @this)
{
    if (typeof(T) == typeof(DateTime) || typeof(T) == typeof(DateTime?))
    {
        if (@this is string actualStringValue &amp;&amp; _tryCastStringToDateTime(actualStringValue, out var result))
            return result;
    }

    else if (typeof(T) == typeof(bool) || typeof(T) == typeof(bool?))
    {
        if (@this is string actualStringValue &amp;&amp; _tryCastStringToBoolean(actualStringValue, out var result))
            return result;

        else if (@this is int actualIntegerValue &amp;&amp; _tryCastIntegerToBoolean(actualIntegerValue, out result))
            return result;
    }

    return (T) Convert.ChangeType(@this, typeof(T));
}
</code></pre>

<hr>

<p><strong>However</strong>, that code still raises red flags. There are situations where you have no choice but to use <code>== typeof(...)</code>, but they are rare and mainly related to serialisation. Normally it's a sign that the code should be refactored. This method seems to be actively fighting against the type system. So I would agree completely with the person who told you that it's an abuse of generics. Consider also that if you expose the parse methods as</p>

<pre><code>public static bool ToBool(this string str) { ... }
public static bool ToBool(this int i) { ... }
public static bool ToBool(this object obj)
{
    if (obj is string str) return ToBool(str);
    if (obj is int i) return ToBool(i);
    return (bool)Convert.ChangeType(obj, typeof(bool));
}
</code></pre>

<p>then in many actual use cases the compiler will be able to bind directly to the more specific method and skip the runtime checks.</p>

<p>(NB Code not tested, may have compile-time errors, but the principle is the important thing).</p>
    </div>