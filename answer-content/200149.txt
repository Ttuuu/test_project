<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This kind of problem seems like it could benefit from using a link list.  This will shorten your code quite a bit and, if I'm not mistaken improve your time complexity quite a bit too:</p>

<pre><code>class Node {

    public String[] pair = new String[2];
    public Node next = null;

    public Node() {
    }

    public Node(String[] pair) {
        this.pair = Arrays.copyOf(pair, 2);
    }
}

static void sortPairs(String[][] pairs) {
    Node root = new Node(pairs[0]);
    Node end = root;
    int size = 1;
    int limit = pairs.length - 1;
    swap(pairs,0, limit);
    int start = 0;
    while (size &lt; pairs.length) {
        for (int i = start; i &lt; limit; ++i) {
            if (pairs[i][0].equals(end.pair[1])) {
                end.next = new Node(pairs[i]);
                end = end.next;
                swap(pairs,i, --limit);
                ++size;
            }
            if (pairs[i][1].equals(root.pair[0])) {
                Node temp = new Node(pairs[i]);
                temp.next = root;
                root = temp;
                swap(pairs,i, --limit);
                ++size;
            }
        }
    }
    for(int i =0;i &lt; pairs.length; ++i){
        pairs[i] = root.pair;
        root = root.next;
    }
}

private static void swap(String[][] arr, int indexA, int indexB) {
    String[] temp = arr[indexA];
    arr[indexA] = arr[indexB];
    arr[indexB] = temp;
}
</code></pre>

<p>The main part of this basically starts with the first pair and looks for either a match to the front or the end.  whenever it finds a match it's added to the link list and swapped to the bottom of the array.  </p>

<p>As swaps occur the numerical limit of the loop keeps getting adjusted shorter, until the link list size matches the array.  </p>

<p>Each ordered pair is, then, written back to the array in order.  If your end goal is just to print out the pairs, you could omit  this step and return the root Node.</p>

<p>Your problem statement didn't mention one way or the other, so I assumed, as per your example, that no airport gets visited twice.</p>

<p><strong>Note</strong> for brevity sake I kept the properties of the Node class public, instead of using getters/setters.</p>

<p><strong>2.0</strong></p>

<p>I did some more studying of the problem and came up with, what appears to me, a O(n) solution.  Basically I combined the creation of the HashMap and filtering of the start city in one loop and rebuilding the array in a second loop:</p>

<pre><code>static void sortPairs2(String[][] pairs) {
        TreeMap&lt;String, Integer&gt; startCity = new TreeMap&lt;&gt;();
        HashMap&lt;String, String[][]&gt; cities = new HashMap&lt;&gt;();
        for (String[] pair : pairs) {
            if (!cities.containsKey(pair[0])) {
                cities.put(pair[0], new String[2][]);
            }
            cities.get(pair[0])[1] = pair;
            if (!cities.containsKey(pair[1])) {
                cities.put(pair[1], new String[2][]);
            }
            cities.get(pair[1])[0] = pair;
            startCity.compute(pair[0], ((t, u) -&gt; (u == null) ? 1 : ++u));
            if(startCity.get(pair[0]) == 2) {
                startCity.remove(pair[0]);
            }
            startCity.compute(pair[1], ((t, u) -&gt; (u == null) ? 1 : ++u));
            if(startCity.get(pair[1]) == 2) {
                startCity.remove(pair[1]);
            }               
        }
        String[][] firstTemp = cities.get(startCity.firstKey());
        String[][] lastTemp = cities.get(startCity.lastKey());
        if(firstTemp[1] == null) {
            pairs[0] = lastTemp[1];
        }
        else {
            pairs[0] = firstTemp[1];
        }
        int limit = pairs.length;           
        for(int i = 1;i &lt; limit;++i) {
            String[][] tempList = cities.get(pairs[i-1][1]);
            pairs[i] = tempList[1];
        }
    }
</code></pre>
    </div>