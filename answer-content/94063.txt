<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Yes.</strong>  It's possible to write this code cleanly and succinctly - and I can imagine implementing it as a single function (in an appropriately named class) or a small class with significantly more functionality.</p>

<p>However I don't believe in giving an answer.  What I have done is provided notes about how one could improve this code, and at the end a different way of thinking about the problem.  It's now your job to learn from what has been written, apply it to your work, and come up with an improved solution.</p>

<p>Good luck!</p>

<h1>Any</h1>

<pre><code>public bool checkListLength(List&lt;string&gt; source)
    {
      return source.Count == 0;
    }
</code></pre>

<p>This method is somewhat pointless - it's longer than the logic and not clearly named.  Instead, consider using 'source.Count == 0' or an extension method such as 'source.Any()'.</p>

<h1>Params</h1>

<pre><code>public string getText(List&lt;string&gt; source, List&lt;string&gt; backup_source...
</code></pre>

<p>This is where the 'params' keyword can come in useful:</p>

<pre><code>public string getText(Random rand, params List&lt;string&gt;[] sources)
</code></pre>

<p>You can use it as such:</p>

<pre><code>...getText(rand, firstList);
...getText(rand, firstList, secondList, thirdList);
</code></pre>

<h1>Private Field</h1>

<p>You keep passing a <code>Random</code> around.  This creates more work for everyone, and doesn't server a clearly defined purpose.  The generator should be responsible for maintaining the <code>Random</code>.</p>

<pre><code>class text_generator
{
    Random rand = new Random();
    ....
}
</code></pre>

<p>Alternatively, one could create a static Random class that handles it for the entire project.</p>

<pre><code>public static class RandomManager
{
    Random rand = new Random();

    public static int Next(int min, int max)
    {
        return rand.Next(min,max);
    }
    ....
}
</code></pre>

<p>Which would be used like so:</p>

<pre><code>RandomManager.Next(0,10);
</code></pre>

<h1>CamelCase</h1>

<p>We tend to use CamelCase in C#.  UpperCamelCase for Property, Method, Class and NameSpaces, and lowerCameCase for fields, parameter and variable names.</p>

<p><code>text_generator</code> is a class, so <code>TextGenerator</code>.
<code>getText</code> is a method name so <code>GetText</code>.
<code>index</code> is a variable, so <code>index</code> is correct.
<code>source</code> is a parameter, so <code>source</code> is correct.</p>

<h1>Naming</h1>

<p>As mentioned <code>checkListLength</code> is a long name that doesn't describe what it does - maybe <code>IsEmpty</code> would have been more appropriate.  You've called this <code>text_generator</code>... and yet it doesn't <em>generate</em> any text.  Maybe <code>RandomDialog</code> might have been a better name.  With this class name <code>RandomDialog.getText(...)</code> might be better named <code>RandomDialog.FromLists(..)</code>.</p>

<h1>Correctness</h1>

<p>The code as is will throw an exception if the provided lists are null or empty... you either need to handle these statements or through a more informational guard statement yourself.  You should also document this through comments.</p>

<pre><code>/// &lt;summary&gt;
/// This function....
/// &lt;/summary&gt;
/// &lt;param name="sources"&gt;Sources is ... and must have a valid item to retrieve or an ArgumentException will be thrown!&lt;/param&gt;
/// &lt;returns&gt;What this method returns.&lt;/returns&gt;
public string GetText(params List&lt;string&gt;[] sources)
    {
      if (sources == null || sources.Count == 0)
          throw new ArgumentException("Sources cannot be null or empty");

      var listWithItems = sources.FirstOrDefault(s =&gt; s != null &amp;&amp; s.Any());

      if (listWithItems == null)
          throw new ArgumentException("No items could be found in sources!");
      ....
   }
</code></pre>

<h1>Intent</h1>

<p>A very important thing in programming is being able to describe your <em>intent</em> - which is what you want to do.  From your comment:  </p>

<blockquote>
  <p>I Generate random elements from a list without repetition until all of
  them are used. Then it starts anew</p>
</blockquote>

<p>This is not what your code does.  It does not 'generate' random items, it retrieves items in a random order and removes them from the incoming list.  It does not start anew... it crashes.  <strong><em>You either need to restate your intent, change how your code implements this intent, or both.</em></strong></p>

<h1>Side Effects</h1>

<p>As @RubberDuck so elegantly puts it:</p>

<blockquote>
  <p>A method named GetXxx shouldn't have side effects. It's surprising to
  call a "Get" method and have it modify the objects you send into it.</p>
</blockquote>

<p>Look into something called the <em><a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">Principle of Least Astonishment</a></em> - it's a great way of thinking!</p>

<blockquote>
  <p>The principle of least astonishment (POLA) applies to user interface
  and software design, from the ergonomics standpoint. It is
  alternatively referred to as the law or rule of least astonishment, or
  of least surprise. "If a necessary feature has a high astonishment
  factor, it may be necessary to redesign the feature."</p>
</blockquote>

<h1>Possible Solution</h1>

<p>Given what I <em>think</em> you're looking for, consider using a <code>Queue&lt;T&gt;</code>.  A queue is a data structure that returns to you, in order, items in a once-off manner.  Since you want to prove one or more lists, and have the results ordered in a specific manner I would create a method that does this.  That is it takes in collection of <code>List&lt;T&gt;</code>s using the params keyword, and returns a queue populated according to your logic.</p>

<p>If you need to add some more logic - e.g. repopulate this queue once it's been finished - I would then wrap it in a class to perform this functionality.  For bonus points (and for more advanced users) look into interfaces/concepts such as <code>IEnumerable&lt;T&gt;/IEnumerator&lt;T&gt;</code> to see if you can turn this into a <em>infinite, steamed, deferred, side-effect-free, query-able enumerable</em> :) </p>
    </div>