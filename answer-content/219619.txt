<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>At first glance your code looks nice and clean. And even though the naming goes against PEP8 would be near perfect style.</p>

<p>I then entered your code into PyCharm, and then and there I knew this was unfortunately a facade.</p>

<p>Firstly I don't think you've set your linter up correctly. As within seconds I knew your code wasn't PEP8 compliant due to using camel case function names.</p>

<blockquote>
  <p>I have feed it through a PEP8 program and it returned no errors</p>
</blockquote>

<ol>
<li>PEP 8 convention is to use <code>snake_case</code> rather than <code>quitContinue</code> or <code>CtoF_Calc</code>.</li>
<li>You have a couple of miss-spelt words, <code>Prog</code> and "entet".</li>
<li>It's advised against having bare <code>except</code> statements as they catch too many errors and lead to hard to debug errors. This can actually be seen in your program, it's hidden a bug that you probably don't know about.</li>
<li><code>celciusCalc</code> is undefined, and so is a bug in your program.</li>
<li>PEP8 and linters are quite finicky when it comes to whitespace. <code>value*(9/5)</code> should have spaces either side of the operators.</li>
<li>You have a 'pointless statement', <code>FtoC_Calc</code>. This is as you forgot to call the function. And so causes a bug in your program.</li>
</ol>

<p>And so I recommend you look into configuring your linter to get the maximum amount of warnings possible. I personally use Prospector and Flake 8 with a butt tone of plugins.</p>

<hr>

<ol>
<li>In <code>FtoC_Calc</code> you state the range in celsius, which is confusing. If I'm using your program I likely won't know what the equivalent in Fahrenheit is.</li>
<li><p>Keep the code in the <code>try</code> statement to be as small as possible. Looking at the <code>except</code> it looks like the purpose is to handle when you don't enter floating point integer values.</p>

<ol>
<li>You haven't put the call to <code>float</code> in the <code>try</code> and so you have another bug.</li>
<li>You should use <code>except ValueError</code>.</li>
<li>You can put all the code that is currently in the <code>try</code> in an <code>else</code> statement.</li>
<li>You should replace <code>celciusCalc()</code> with <code>FtoC_Calc</code> and <code>CtoF_Calc</code>.</li>
</ol></li>
<li><p>Currently your design is sub-optimal, <code>FtoC_Calc</code> interacts with the user and performs the mathematical calculations.</p>

<p>It also uses recursion rather than loops to cycle through the function calls, leading not only to spaghetti code, but toward getting a <code>RuntimeError</code> where you exceed the recursion depth.</p>

<p>This is all rather easy to deal with. Split the function into three distinct functions:</p>

<ol>
<li><p>One that gets a floating point integer from the user. And handles interactions with the user if they enter an incorrect value.</p>

<p>If a user enters an incorrect value you'll want to have your <code>try</code> statement in a <code>while</code> loop to continuously ask for input.</p>

<p>By giving a range or an 'is_invalid' function to this function you can reduce the amount of duplicated code.</p></li>
<li><p>The function to convert C to F.</p></li>
<li>The function that calls both of these functions.</li>
</ol></li>
<li><p>The majority of your code in <code>make_selection</code> is not needed. No exceptions should be raised from these functions, and it isn't the correct place to handle them.</p></li>
<li><p><code>quit_continue</code> should be changed to a function that returns a boolean. This can be used in <code>mainProg</code> to determine if the user will continue using the program or exit.</p>

<p>This means <code>mainProg</code> should contain a while loop to continuously allow the user to enter values they want to convert.</p>

<p>It should be noted that <code>quit_continue</code> shouldn't need the <code>try</code> and should never reach the except. However adding more code the way you did would make this assumption to be less safe as the program becomes more and more problematic.</p></li>
<li><p>I changed your string delimiters as one of my tools errors on <code>"</code>, as I commonly use <code>'</code>. Using <code>"</code> is perfectly acceptable.</p></li>
</ol>

<pre><code>#!/usr/bin/python
"""
Program: Temperature Coversion (C to F, or F to C)
Date:    02 May 2019
Author:  Jason P. Karle
Remark:  This program was inspired by a Python exercise that
asks you to create a program that will convert one Celsius value to Fahrenheit;
so a program that can be executed with three lines of code.
However, I wanted to make something that would allow the user to
convert to and from either C of F, and do so multiple times, until the user
decides to end the program. This was also an exercise for me to
advance not only my code skills, but how I structure a program.
"""


def input_float(prompt, is_invalid):
    while True:
        try:
            value = float(input(prompt))
        except ValueError:
            print('That is not a number!')
        else:
            if is_invalid(value):
                print('That is not a valid number.')
                continue
            return value


def c_to_f(value):
    return (value * (9 / 5)) + 32


def f_to_c(value):
    return (5 / 9) * (value - 32)


def convert_c_to_f():
    print('\nThank you, please enter the')
    print('value you want to convert.')
    print('Enter a value between -273.5°C to')
    print('+5.5 dectillion °C')
    celsius = input_float(': ', lambda v: v &lt; -273.5 or 5.5**30 &lt; v)
    fahrenheit = c_to_f(celsius)
    print(f'{celsius}°C equals: {fahrenheit}°F')


def convert_f_to_c():
    print('\nThank you, please enter the')
    print('value you want to convert.')
    print('Enter a value between -459.5°F to')
    print('+42 dectillion °F')
    celsius = input_float(': ', lambda v: v &lt; -459.5 or 42**30 &lt; v)
    celsius = f_to_c(fahrenheit)
    print(f'{fahrenheit}°F equals: {celsius}°C')


def quit_continue():
    print('\nDo you want to:\n')
    print('     1. Make another conversion; or')
    print('     2. Exit the program?\n')
    answer = input('Make you selection: ')
    return answer == '1'


def main():
    while True:
        print('Please enter the number')
        print('corresponding to what you')
        print('want to convert:')
        print('     1. Celsius to Fahrenheit')
        print('     2. Fahrenheit to Celsius')
        print('     3. Exit\n')
        selection = input('Enter 1, 2 or 3: ')
        if selection == '1':
            convert_c_to_f()
        elif selection == '2':
            convert_f_to_c()
        else:
            return
        if not quit_continue():
            return


if __name__ == '__main__':
    print('Welcome to the temperature')
    print('conversion program!\n')
    main()

</code></pre>
    </div>