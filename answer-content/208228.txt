<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think <code>Parallel.Invoke()</code> is  better than <code>Task.Run()</code>. <code>Parallel.Invoke()</code> is best performance wise for parallel task also interface object is not Disposed after Completed  HTTP request. it's working as background task.</p>

<pre><code>public class LogWriter
{
    #region Private Members

    // If writer is not static class, still need to keep single message list; same for other members
    private static ConcurrentQueue&lt;string&gt; _logMessages = new ConcurrentQueue&lt;string&gt;();
    private static object locker = new object();
    private static bool _stopAfterCurrentQueue = false;
    private static bool _discardQueueAndStop = false;

    private static CancellationTokenSource _tokenSource = new CancellationTokenSource();
    private static readonly SemaphoreSlim _messageEnqueuedSignal = new SemaphoreSlim(0);
    #endregion

    public static void Write(string text)
    {

        if (!_tokenSource.IsCancellationRequested)
        {
            if (!_stopAfterCurrentQueue &amp;&amp; !_discardQueueAndStop)
            {
                Parallel.Invoke(() =&gt;
                {
                    _logMessages.Enqueue(text);
                    _messageEnqueuedSignal.Release();
                });

                Parallel.Invoke( async () =&gt;
                    {
                        await _messageEnqueuedSignal.WaitAsync(_tokenSource.Token);
                        while (!_logMessages.IsEmpty)
                        {
                            foreach (var item in _logMessages)
                            {

                                _logMessages.TryDequeue(out string current);
                                lock (locker)
                                {
                                // Will be replaced by StreamWriter
                                File.AppendAllText("Log_" + DateTime.Now.ToString("yyyyMMMdd") + ".txt", current + Environment.NewLine);
                                }
                            }
                        }
                    });
            }
        }
    }

    public void ProcessCurrentAndStop()
    {
        // Only stops accepting new messages, will process the current queue
        _stopAfterCurrentQueue = true;
    }

    public void DiscardQueueAndStop()
    {
        // Cancels subsequent Enqueue
        _tokenSource.Cancel();

        // No more writing even if there is something in the queue
        _discardQueueAndStop = true;
    }

    public void RestartLogging()
    {
        _stopAfterCurrentQueue = false;
        _discardQueueAndStop = false;

        _tokenSource.Dispose();
        _tokenSource = new CancellationTokenSource();
    }
}
</code></pre>
    </div>