<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have <code>showDescription</code> directly printing out the message. Avoid printing in arbitrary functions whenever possible. It's much better to have things return Strings, then print at the call site as needed. I'd change that function to:</p>

<pre><code>private static String produceDescription() {
    return "You have to guess a number between " + lowerRange + " and " + upperRange + ".\n"
           + "You have " + tries + " tries.");
}

. . .

System.out.println(produceDescription());
</code></pre>

<p>Why? Two highly-related reasons:</p>

<ul>
<li><p>Whenever possible, functions should <em>return</em> the data that they produce. Can you guarantee that for a function like this you will <em>always</em> want to directly print that data? Let the caller decide how they want to use the data that the function produces. Forcing the data to be printed makes the function less useful in the long term. As an example...</p></li>
<li><p>If you ever decide to adapt this program to use a full GUI, you're directly printing and will need to modify every function that is calling <code>println</code>. The less functions you have that are using data in a specific way, the easier it will be to alter your program later.</p></li>
</ul>

<hr>

<p>I would not make everything <code>static</code> here. Again, what if in the future you wanted to run two games at the same time (like if you created a server that allows people to connect to it and play)? I'd get rid of <code>static</code> everywhere, and make everything plain instance methods/properties, then just instantiate a instance of the game in <code>main</code>.</p>

<hr>

<p><code>Main</code> is a poor name for this class. Ideally, it should be a description of what the object accomplishes. What if you ever imported this class so it can be used elsewhere? A class called <code>Main</code> doesn't make it immediately obvious what it is used for. I'd change the name to something like <code>NumberGuessingGame</code>.</p>

<hr>

<pre><code>run = input.nextLine().equalsIgnoreCase("Y") ? true : false;
</code></pre>

<p>is redundant. Ternary expressions are cool, but they're often overused. Think about it, what does <code>equalsIgnoreCase</code> return? A <code>bool</code> (<code>true</code> or <code>false</code>). You're then using that bool as a condition to the ternary... to get the same thing that <code>equalsIgnoreCase</code> returned originally.</p>

<p>Just get rid of the ternary:</p>

<pre><code>run = input.nextLine().equalsIgnoreCase("Y");
</code></pre>

<p>And on the topic of conditions, a little later you have:</p>

<pre><code>while (triesSoFar &lt; tries &amp;&amp; won == false) {
</code></pre>

<p><code>won == false</code> certainly isn't <em>wrong</em>, but comparing against a boolean value directly is almost always unnecessary. Just write:</p>

<pre><code>while (triesSoFar &lt; tries &amp;&amp; !won) {
</code></pre>

<p>Remember, <code>!</code> is read as "not". "While tries to far is less than tries, and they haven't (not) won".</p>

<hr>

<p><code>tries</code> is a bad name. It isn't representing the number of tries taken (that's <code>triesSoFar</code>), it's representing the <em>max</em> number of tries allowed. Change it to something like <code>maxAllowedTries</code>.</p>

<p>Naming is <em>very</em> important. It is one of the key things that allows someone to be able to read your code and quickly know what's going on. Make sure your functions and variable names accurately describe what they do, or you'll make other people's lives more difficult when they need to read your code. You'll also make your own life more difficult if you ever come back to this program, because you <em>will</em> eventually forget parts of this program after some time.</p>

<hr>

<pre><code>System.out.print("Your try: ");
</code></pre>

<p>Isn't actually guaranteed to print right away. <code>print</code> and <code>println</code> use a "buffer" to hold text while waiting to print. That buffer is only "flushed" (printed out) when the text exceeds a certain length, or a newline (<code>\n</code>) is reached. You have short text here, and because you're using <code>print</code>, no newline is being added to the buffer. You may find that if you made this text a little shorter, it wouldn't print until some other text had be printed as well, which will make your program confusing.</p>

<p>If you use <code>print</code> instead of <code>println</code>, it can be a good idea to add a call to <code>System.out.flush()</code> after it to make sure everything is printed when you want it to be.</p>

<hr>

<p>Just to show a potentially appropriate use of a ternary, you have:</p>

<pre><code>if (won) {
  System.out.println("You found the secret number!");
} else {
  System.out.println("You lose. The secret number was " + randomNumber + ".");
}
</code></pre>

<p>Which isn't bad, but it could be shorted a bit:</p>

<pre><code>String message = won ? "You found the secret number!"
                     : ("You lose. The secret number was " + randomNumber + ".");

System.out.println(message);
</code></pre>

<p>I'm not <em>necessarily</em> advocating for this way, but I thought I'd show it. It allows you to get rid of the multiple calls to <code>println</code>.</p>

<hr>

<pre><code>  int guess = Integer.parseInt(input.nextLine());
  if (guess &gt; randomNumber) {
    System.out.println("The secret number is smaller.");
  } else if (guess &lt; randomNumber) {
    System.out.println("The secret number is higher.");
  } else {
    won = true;
    break;
  }
</code></pre>

<p>is a <em>dense</em> chunk of code. I prefer to add more spacing around things. I like blank lines above <code>if</code>s and <code>else</code>s so it's easier to see at a glance the distinct blocks. I'd make it:</p>

<pre><code>  int guess = Integer.parseInt(input.nextLine());

  if (guess &gt; randomNumber) {
    System.out.println("The secret number is smaller.");

  } else if (guess &lt; randomNumber) {
    System.out.println("The secret number is higher.");

  } else {
    won = true;
    break;
  }
</code></pre>

<p>That generally makes it easier to pick things out by eye when scanning over a document.</p>

<hr>

<hr>

<p>There's some more stuff, but unfortunately, I have to go. Good luck!</p>
    </div>