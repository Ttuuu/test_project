<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice separation of functionality, well done!</p>

<p>There are some important details that the other review doesn’t address:</p>

<pre><code>int greed(list_type die_rolls)
</code></pre>

<p>Here you are taking a <code>std::vector</code> by value. This means it will ve copied. It’s a small array, it probably doesn’t matter here at all, but you should get used to passing larger objects and objects that own stuff (a vector owns a piece of memory in the heap) by reference. Appropriate would be:</p>

<pre><code>int greed(list_type const&amp; die_rolls)
</code></pre>

<p>Next, you use a <code>std::map&lt;int, int&gt; cnt</code> to count die rolls. But you only index it using values 1-6. You should use a <code>std::vector</code> here. You’d waste the first element (index 0), but indexing into a vector is much faster than indexing into a map, and it takes less memory to boot. Or, since you know the size at compile time, you could use a <code>std::array&lt;int,7&gt;</code> instead. This is a fixed-sized array that lives entirely on the stack, it doesn’t allocate heap memory.</p>

<p>Next you do</p>

<pre><code>for (int i = 1; i &lt;= 6; ++i)
{
    cnt[i] = 0;
}
</code></pre>

<p>Since we’re using a <code>std::vector</code> or <code>std::array</code> now, you can use <code>std::fill</code>:</p>

<pre><code>std::fill(cnt.begin(), cnt.end(), 0);
</code></pre>

<p><code>std::array</code> even has a <code>fill</code> member function:</p>

<pre><code>cnt.fill(0);
</code></pre>

<p>However, it is even easier to rely on value initialization:</p>

<pre><code>std::array&lt;int,7&gt; cnt{};
</code></pre>

<p>This value-initializes each element of <code>cnt</code> to <code>int{}</code>, meaning each element will have a value of 0.</p>
    </div>