<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Missing includes:</p>

<pre><code>#include &lt;cstddef&gt;
#include &lt;stdexcept&gt;
#include &lt;utility&gt;

#ifdef DEBUG
#include &lt;iostream&gt;
#endif
</code></pre>

<p>Also, <code>std::size_t</code> is misspelt throughout.</p>

<hr>

<p>We seem to be missing <code>const</code> overloads for <code>at()</code> and <code>operator[]</code>.  They are certainly worth having.</p>

<hr>

<p>There's a few instances of the code to find a particular key within a bucket:</p>

<pre><code>auto found = std::find_if(bucket.begin(), bucket.end(),
                          [&amp;key](const pair_t&amp; pair) { return pair.first == key; });
</code></pre>

<p>(my linebreak added for legibility).</p>

<p>It's probably worth refactoring that into a small function of its own (remember that it's almost certainly going to be inlined, making no change to the object code).</p>

<p>That's frequently followed by</p>

<pre><code>  if (bucket.empty() || found == bucket.end()) {
</code></pre>

<p>There's no value in the <code>bucket.empty()</code> test - if the bucket was empty, then <code>found</code> will inevitable be <code>bucket.end()</code>.  (There's no benefit to moving the <code>bucket.empty()</code> test before the <code>std::find_f()</code>; just remove it).</p>

<hr>

<p>We could make the member function signatures much easier to read by including the definitions within the class body.  For example, compare this:</p>

<blockquote>
<pre><code>template&lt;class Key, class T, class Hash&gt;
const typename HashTable&lt;Key, T, Hash&gt;::bucket_t&amp; HashTable&lt;Key, T, Hash&gt;::_resolve_key(const Key&amp; key) const {
  return _table[_hash_f(key) % _capacity];
}

template&lt;class Key, class T, class Hash&gt;
typename HashTable&lt;Key, T, Hash&gt;::bucket_t&amp; HashTable&lt;Key, T, Hash&gt;::_resolve_key(const Key&amp; key) {
  return _table[_hash_f(key) % _capacity];
}
</code></pre>
</blockquote>

<p>with:</p>

<pre><code>private:

    const bucket_t&amp; _resolve_key(const Key&amp; key) const
    {
        return _table[_hash_f(key) % _capacity];
    }

    bucket_t&amp; _resolve_key(const Key&amp; key)
    {
        return _table[_hash_f(key) % _capacity];
    }
</code></pre>

<hr>

<p>To reduce copying, I think <code>insert()</code> should take its argument by value, and then <code>std::move()</code> it:</p>

<pre><code>void HashTable&lt;Key, T, Hash&gt;::insert(HashTable::pair_t pair)
{
    bucket_t&amp; bucket = _resolve_key(pair.first);
    bucket.push_back(std::move(pair));
</code></pre>

<p>In passing, should <code>insert()</code> allow us to add elements with keys that are already in the bucket?  That's not what <code>std::unordered_map::insert()</code> does.</p>

<p><code>_expand_and_rehash()</code> is another function where we could usefully move instead of copying.  We should be able to get the whole class working with move-only types; it's worth adding tests that instantiate and use the class with <code>T</code> as (say) <code>std::unique_ptr</code> and dealing with copies until that works.</p>

<hr>

<p>Since this is intended to hold "huge amounts" of entries, we really need a <code>reserve()</code> member, for those cases where we construct before knowing how many elements we'll add (e.g. when a <code>HashTable</code> is a member of some other object).</p>

<p>Consider the usage pattern (mainly the mix of insert, lookup, and erase) to decide whether <code>std::list</code> is the appropriate type for <code>bucket_t</code>.  We might want to implement our own (perhaps a "chunked list", for example, to reduce the number of individual allocations).</p>

<hr>

<p>It's just style, but I'm not a big fan of prefixing the private members with <code>_</code>.  It makes the code look like Python rather than C++, and hurts readability.</p>

<p>I have a simple theory that if we need a mnemonic to keep track of which identifiers are which, then there's probably too much in the class and we need to think about splitting its responsibilities.</p>

<hr>

<p>Final thought: I'm not sure what I'm missing, but I don't see anything here that makes this class any more suitable than <code>std::unordered_map</code> for "huge numbers of objects".  That suggests we need to add some comments to point out the adaptations.</p>
    </div>