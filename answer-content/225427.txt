<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>float32_t</code>   <code>float64_t</code></strong></p>

<p>Since the goal is: </p>

<blockquote>
  <p><code>float32_t</code> and <code>float64_t</code> is that those types are always their fixed size</p>
</blockquote>

<p>the macros nearly achieve that.</p>

<hr>

<blockquote>
  <p>is checking float size by its mantissa a wise/safe thing to do? If not, what alternative can I take?</p>
</blockquote>

<p><strong>Big caveat</strong>: OP's expressed goal is <em>same size</em>, not same <em>encoding</em>.  Two systems may have a 32-bit <code>float</code>, yet different mantissa, exponent range and other properties.  The biggest "safety" concern is assuming same floating point properties with same <em>size</em>.</p>

<p>C allows for a great diversity of implementations though.  The macros accommodate most current compilers well, yet they are not specified to be always <code>typedef</code> 32/64 bit types.</p>

<p>To be clear, checking <code>xxx_MANT_DIG, FLT_RADIX, xxx_MIN_EXP, ...</code> is <strong>not</strong> sufficient, in general, even though it may be practically sufficient.</p>

<p>It fundamental comes down to:</p>

<blockquote>
  <p>what should code do if it encounters a novel implementation?  </p>
</blockquote>

<p>I'd go with testing for the <a href="https://www.youtube.com/watch?v=vtSmfws0_To" rel="nofollow noreferrer">usual suspects</a> and expand code when I encounter a true counter case.</p>

<pre><code>#ifndef __float64_t_defined
  #if FLT_RADIX==2 &amp;&amp; DBL_MANT_DIG==53 &amp;&amp; DBL_MIN_EXP == -1021
    #define __float64_t_defined
    typedef double float64_t;
  #elif FLT_RADIX==2 &amp;&amp; FLT_MANT_DIG==53 &amp;&amp; FLT_MIN_EXP == -1021
    #define __float64_t_defined
    typedef float float64_t;
  // Expand list for variants that I have found 
  #elif FLT_RADIX==2 &amp;&amp; DBL_MANT_DIG==TBD &amp;&amp; DBL_MIN_EXP == TBD
  #else
    #error TBD code for float64_t
  #endif
#endif
</code></pre>

<p>Note: Code like <code>DBL_MANT_DIG==24</code> is not even C compliant with <code>FLT_RADIX==2</code>.  <code>DBL_MANT_DIG &gt;= 34</code> to meet precision requirements.   This looks like a test for a non-real machine.</p>

<hr>

<p>I recommend 2 additions:</p>

<p>Report fail to <code>typedef</code> right away with <code>#error</code></p>

<pre><code>#   elif LDBL_MANT_DIG==53
#       define __float64_t_defined
        typedef long double float64_t;

// Add
#   else
#     error TBD code for float64_t

#   endif
</code></pre>

<p>With C11 or later, use <code>_Static_assert</code></p>

<pre><code>_Static_assert(sizeof (float64_t)*CHAR_BIT == 64, "Unexpected `float64_t` size");
</code></pre>

<p>With early compilers, see <a href="https://stackoverflow.com/a/3385694/2410359">Static assert in C</a> and others.</p>

<hr>

<p><strong>floatmax_t</strong></p>

<p>After taking advantage or known <code>COMPILER_CLANG, COMPILER_GCC</code> compilers, I'd recommend more conventional code - Simply test for <a href="https://stackoverflow.com/a/4991754/2410359">C99 or later</a>.</p>

<pre><code>#ifndef __floatmax_t_defined
#   if defined(COMPILER_CLANG) || defined(COMPILER_GCC)
#       define __floatmax_t_defined
        typedef double floatmax_t TYPE_MODE(__XF__);
#   elif (__STDC_VERSION__ &gt;= 199901L)
#       define __floatmax_t_defined
        typedef long double floatmax_t;
#   else
#       define __floatmax_t_defined
        typedef double floatmax_t;
#   endif
#endif
</code></pre>

<hr>

<p>Similar question I posed</p>

<p><a href="https://codereview.stackexchange.com/q/215113/29485">Detecting unicorn and dinosaur compilers</a></p>
    </div>