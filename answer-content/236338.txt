<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The majority of your function consists of parsing a string of 12 characters into six numbers, expecting that each number is represented as a two-digit hexadecimal value in the input string. This is unfortunate, since it obfuscates the core of this function - the algorithm by which the checksum is computed!</p>

<p>Luckily, this kind of parsing is so common that there's a ready-made function in the standard library for this task, called <a href="http://www.cplusplus.com/reference/cstdio/sscanf/" rel="nofollow noreferrer"><code>sscanf</code></a>. Reusing <code>sscanf</code> instead of doing your own parsing also does away with any bugs you may have introduced, so your perfectly reasonable expectation of</p>

<pre><code>if((n0^n1^n2^n3^n4)==n5))   return true; 
else return false;
</code></pre>

<p>working should be met.</p>

<p>Lastly, you might like to consider a stylistic adjustment and eliminate the unneeded <code>if</code> statement, given that for some expression <code>e</code>, the code</p>

<pre><code>if (e) return true;
else return false;
</code></pre>

<p>is equivalent to</p>

<pre><code>return e;
</code></pre>

<p>Thus, you could shorten your function to</p>

<pre class="lang-c prettyprint-override"><code>bool checksum(char card[])
{
    unsigned n0, n1, n2, n3, n4, n5;
    int num_fields_converted;

    num_fields_converted = sscanf(card, "%02X%02X%02X%02X%02X%02X", &amp;n0, &amp;n1, &amp;n2, &amp;n3, &amp;n4, &amp;n5);

    assert(num_fields_converted == 6 || !"Input string malformed");

    return (n0 ^ n1 ^ n2 ^ n3 ^ n4) == n5;
}
</code></pre>

<p>This nicely emphasises the actual way by which the <code>checksum</code> function computes its output value: it XOR's the first five bytes and then verifies that this equals the sixth byte.</p>

<p>Note that this assumes (by checking the <code>sscanf</code> return value) that the input string is well-formed before bothering to verify the checksum. Instead of using an <code>assert</code>, some other behaviour might be more convenient in your use case (e.g. returning <code>false</code>).</p>
    </div>