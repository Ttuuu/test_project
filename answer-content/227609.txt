<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Coor</code> has the comment <code>coordinates</code> ... yeah, that's exactly what the
name should be then.  But actually, <code>Point</code> seems easier and doesn't
have to be abbreviated, or perhaps be more general and say <code>Vector</code>, or
<code>Vec2</code>, that seems fairly common for games (despite it being an
abbreviation).  Not using the AWT class makes sense to me too.</p>

<p>The <code>hashCode</code> method
<a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Object.html#hashCode()" rel="nofollow noreferrer">is okay</a>,
though it could probably be a bit more random in its output (not that it
matters for such small numbers of it.</p>

<p>The <code>equals</code> method
<a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)" rel="nofollow noreferrer">could be more safe</a>
and also consider passing in arbitrary objects (or <code>null</code>) for
comparison.  Violating this is probably okay for this limited scope, but
in general that shouldn't be skipped.</p>

<p>Also the return statement can be simplified.</p>

<pre><code>@Override
public boolean equals(Object o) {
    if (o == null || !(o instanceof Coor)) {
        return false;
    }
    Coor c = (Coor) o;
    return x == c.getX() &amp;&amp; y == c.getY();
}
</code></pre>

<hr>

<p>The <code>Food</code> class uses these abbreviated names, <code>img</code>, <code>rnd</code>, etc.  I'd
suggest writing them out and giving them some more descriptive names in
general.</p>

<p>The loop in <code>generateLocation</code> seems a bit bogus to me, why skip a
random number of random numbers before picking one?  If you have
problems getting repeated numbers each run of the program you should
perhaps initialise it from a truly random source.</p>

<hr>

<p><code>Snake</code> has <code>velX</code> and <code>velY</code> - that's exactly where a <code>Vector</code> would
come in handy again.  After all it's exactly that, a 2-tuple exactly
like what <code>Coor</code> is.</p>

<p><code>checkDeath</code> could use a <code>for (x : body) ...</code> for the death check, plus,
once <code>dead = true</code> was set, a <code>break</code> would also be good.</p>

<hr>

<p>Okay, so generally, I'd suggest not carrying around a set of empty
spaces.  Keeping the taken coordinates for the snake and for the food is
fine.  Using those you can immediately see which coordinates are empty
... all the ones that aren't taken.  Given the few food items and the
length of the snake the list of coordinates that's easy enough to check
against.</p>

<p>Apart from that <code>MyKeyAdapter</code> (well that should be <code>MyKeyAdaptor</code>) is a
bit weird how it's just inline there like that.  And that goes for the
other classes too, it's all mixing the representation via Swing with the
game state and that's, at least for bigger games/projects, not
advisable.  Then again, it's snake.  Just consider how you'd handle
extending this code to encompass more features, like different kinds of
objects, or how e.g. customisable key bindings would work.</p>

<p>So, it'd perhaps make sense to have a <code>Renderable</code> interface for the
<code>render</code> method, then keep a list of objects to render in a more generic
fashion, or even combine it with the <code>tick</code> method (perhaps with a
default implementation on the interface) to update all game objects.</p>
    </div>