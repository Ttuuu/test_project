<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks decent, though it would be better if it had more code for handling errors. </p>

<p>Indentation is very uniform throughout the code. There is some repeated code in the promise callbacks to some of the API endpoint requests in the controller functions (e.g. to set the <code>categories</code>, <code>posts</code> and <code>pagination</code> properties on <code>$scope</code>) that could be abstracted to a named function in order to DRY out that code. That function could also loop over the properties to set from <code>response.data</code> and assign them to <code>$scope</code>.</p>

<p>Some <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like arrow functions are used, and thus <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Property_definitions" rel="nofollow noreferrer">the shorthand property definition notation</a> could simplify object initialization - e.g. This block in the <code>PostCommentController</code> code:</p>

<blockquote>
<pre><code>      $scope.newComment = {
            slug: slug,
            post_id: post_id,
            name: $scope.name,
            email: $scope.email,
            comment: $scope.comment
        };
</code></pre>
</blockquote>

<p>could be simplified to:</p>

<pre><code>        $scope.newComment = {
            slug,
            post_id,
            name: $scope.name,
            email: $scope.email,
            comment: $scope.comment
        };
</code></pre>

<p>Also, in that function for the <code>PostCommentController</code> there is variable declared with <code>let</code>:</p>

<blockquote>
<pre><code>      //Current post id
        let post_id = response.data.post.id;
</code></pre>
</blockquote>

<p>This variable never gets reassigned, and to prevent accidental reassignment <code>const</code> can be used instead of <code>let</code>.</p>
    </div>