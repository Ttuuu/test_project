<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have multiple performance ideas, some smaller than others but consistent good performance choices are a good mindset to be in.</p>

<p>Minor notes, you can get a list of characters from a string just using <code>list()</code>. So instead of your list comprehension, use <code>letter_list = list(str)</code>. Note that I agree you should use a different name than <code>str</code>, but for now I'm focusing on performance.</p>

<p>Also when you call <code>len(letter_list)</code> it's slower than getting the length of a string, so call <code>len(str)</code> instead. Generally, strings are faster than lists. If you don't need more complex list capabilities, stick with strings. So instead of making vowel and consonant lists, make them strings.</p>

<p>But even more efficient than lists, are integers. And you create lists of each person's words as if those matter. But all you need is a count of these values. Replacing every <code>append</code> with <code>+= 1</code> would be much faster. This is the main source of slowness I believe.</p>

<pre><code>for array in all_word:
    if array[0] in vowel:
        person_b_words += 1
    else:
        person_a_words += 1
</code></pre>

<p>We also only need to loop once if you use an <code>else</code>. It might be faster to use <code>sum</code> here, but that does get more complicated and might not actually prove helpful. If you're interested to know more I could explain later.</p>

<p>Now of course you no longer need multiple <code>len</code> calls, you can just compare the variables directly as they're both integers. You should also use <code>elif</code> and <code>else</code> statements since you know only one of the conditions is possible.</p>

<pre><code>if person_a_words == person_b_words:
    print 'Draw'
elif person_a_words &gt; person_b_words:
    print person_a_name, person_a_words
else:
    print person_b_name, person_b_words
</code></pre>

<p>I think another thing you could is find a more intelligent way to iterate over all the sequeunces. You make a huge list of strings, but you only need the first letter of each. It'd be easier if you used a loop that got each first letter the appropriate amount of times rather than your huge list based on the indices range.</p>
    </div>