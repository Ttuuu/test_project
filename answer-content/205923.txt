<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would use the vectorized functions <code>pmin</code> and <code>pmax</code> to compute the two vectors of minimum and maximum values respectively:</p>

<pre><code>f1 &lt;- pmin(df$food_1, df$food_2)
f2 &lt;- pmax(df$food_1, df$food_2)
df$food_1 &lt;- f1
df$food_2 &lt;- f2
</code></pre>

<p>If you want, you can do it all in one statement:</p>

<pre><code>df[c('food_1', 'food_2')] &lt;- list(pmin(df$food_1, df$food_2),
                                  pmax(df$food_1, df$food_2))
</code></pre>

<p>Another vectorized approach could use <code>ifelse</code>:</p>

<pre><code>f1 &lt;- ifelse(df$food_1 &lt; df$food_2, df$food_1, df$food_2)
f2 &lt;- ifelse(df$food_1 &lt; df$food_2, df$food_2, df$food_1)
df$food_1 &lt;- f1
df$food_2 &lt;- f2
</code></pre>

<p>Testing on a large data.frame of 250k rows like you mentioned:</p>

<pre><code>n &lt;- 250000
df &lt;- data.frame(food_1 = sample(c("APPLE 1534", "PEAR 2525",
                                   "BANANA 3045", "WATERMELON 5000"), n, replace = TRUE),
                 food_2 = sample(c("ORANGE 2035", "BROCCOLI 5000",
                                   "BLUEBERRY 2000", "TOMATO 3000"), n, replace = TRUE),
                 stringsAsFactors = FALSE)
</code></pre>

<p>both approaches are quite fast, e.g.:</p>

<pre><code>system.time({
   df[c('food_1', 'food_2')] &lt;- list(pmin(df$food_1, df$food_2),
                                     pmax(df$food_1, df$food_2))
})
#   user  system elapsed 
#  0.150   0.001   0.151 
</code></pre>

<p>while Andreas' solution takes ~10 seconds and yours would take over 30 minutes if I extrapolate correctly.</p>
    </div>