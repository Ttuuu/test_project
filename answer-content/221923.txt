<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Please read over <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> as your naming style is unidiomatic, and would cause programmers to be confused when seeing your code in the wild.</li>
<li>I would move getting and setting a node by index into their own functions.</li>
<li><code>if self.value &gt;= 0</code> only hinders your code, the value <code>-1</code> is perfectly valid in binary trees. It also means that you're limiting <code>value</code> to types that can be compared to integers, meaning you can't enter strings.</li>
<li>Using recursion in <code>addNode</code> is a good idea, but I find the non-recursive alternate to be easier to understand.</li>
<li>Your code doesn't care if I enter <code>addNode([0, 2], 1)</code>. This seems fishy as if this were a Trinary Tree that would mean something completely different. I recommend raising a <code>ValueError</code> in this case.</li>
<li>Your <code>printTree</code> is pretty good.</li>
<li>I'd change the <code>level</code> argument in <code>printTree</code> to be a keyword argument only. This is because then it's explicit that it's changing the level, and it's something normal code shouldn't accidentally change.</li>
<li>Personally I think <code>if self.left is not None</code> is better here than <code>if self.left</code>, but as <code>Node</code> can't be falsy it doesn't matter too much.</li>
<li>I've added some basic docstrings, defined in <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP 257</a>.</li>
<li>I have also added some <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>typing</code></a> to your code.</li>
<li>By using <code>typing</code> and <a href="https://pypi.org/project/mypy/" rel="nofollow noreferrer">mypy</a> I found that <code>addNode</code> can error when the specified path doesn't exist. It would be better in these cases to raise an error telling the user why.</li>
<li>You can use a <code>if __name__ == '__main__':</code> guard to prevent code running on import. This means if you later import this code in another module then the testing code won't run.</li>
</ul>

<pre><code>from __future__ import annotations

from typing import Any, Optional, Sequence


class Node:
    """Test binary tree."""

    def __init__(
            self,
            value: Any,
            right: Optional[Node] = None,
            left: Optional[Node] = None,
    ):
        """Initialize binary tree, with specified children nodes."""
        self.value = value
        self.right = right
        self.left = left

    def _get_index(self, index: int) -&gt; Optional[Node]:
        """Get node via integer index."""
        if index == 0:
            return self.left
        elif index == 1:
            return self.right
        else:
            raise ValueError(f'Invalid index {index}')

    def _set_index(self, index: int, value: Node) -&gt; None:
        """Set node via integer index."""
        if index == 0:
            self.left = value
        elif index == 1:
            self.right = value
        else:
            raise ValueError(f'Invalid index {index}')

    def add_node(self, parents: Sequence[int], value: Node) -&gt; None:
        """Add the provided node to the tree."""
        node: Optional[Node] = self
        for index in parents[:-1]:
            if node is not None:
                node = node._get_index(index)
        if node is None:
            raise ValueError("Parent node doesn't exist.")
        node._set_index(parents[-1], value)

    def add_value(self, parents: Sequence[int], value: Any) -&gt; None:
        """Add the provided value to the tree."""
        self.add_node(parents, Node(value))

    def print_tree(self, *, level: int = 0) -&gt; None:
        """Print the tree."""
        print('  ' * level + str(self.value))
        for child in (self.left, self.right):
            if child is not None:
                child.print_tree(level=level + 1)


if __name__ == '__main__':
    tree = Node(0)
    tree.add_value([0], 1)
    tree.add_value([1], 1)
    r"""
    Graph looks like
       0
      / \
     1   1
     """

    tree.add_value([0, 0], 3)
    tree.add_value([0, 1], 8)
    tree.add_value([1, 0], 4)
    tree.add_value([1, 1], 7)
    r"""
    Graph looks like
               0
             /   \
            1      1
           / \    / \
          3  8    4  7
    """
    tree.print_tree()
</code></pre>
    </div>