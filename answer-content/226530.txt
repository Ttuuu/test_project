<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to review your <code>Main</code> code and let someone else address the <code>Test</code> code.</p>

<p>I'll start with a few minor issues.</p>

<p>Breaking up long lines often makes them easier to scan/parse/comprehend.</p>

<pre><code>def isAnagram(word: String, anagram: String) : Boolean =
  word.toLowerCase.toSeq.sorted.unwrap == anagram.toLowerCase.toSeq.sorted.unwrap
</code></pre>

<p>Also, you're using <code>.toSeq</code> to get to the non-deprecated <code>.sorted</code> method, but there's no reason to <code>.unwrap</code> it to get back to a <code>String</code>. The <code>==</code> comparison will work on a <code>WrappedString</code>.</p>

<p><code>Using.apply()</code> returns a <code>Try[A]</code>, which your code ignores. If an exception is thrown (<code>words.txt</code> isn't where it should be?) then your app silently returns without reporting any errors. You might want to consider <code>Using.resource()</code> instead. It won't try to catch any exceptions.</p>

<p>Using pattern matching just to determine if <code>anagrams</code> is populated or not seems a bit bizarre. In fact, it doesn't need to be a <code>List</code> at all.</p>

<pre><code>val anagrams = source.getLines()
                     .filter(isAnagram(word, _))
                     .mkString(", ")

if (anagrams.isEmpty) println("none")
else                  println(anagrams)
</code></pre>

<p>A big, <strong>big</strong>, problem with your algorithm is that the user-input, <code>word</code>, is processed for comparison (<code>toLowerCase</code> and <code>toSeq</code> and <code>sorted</code>) for <em>every</em> word in the dictionary. (<em>*Ouch!*</em>) It should only be done once.</p>

<p>But my biggest issue with the design is your choice of user experience (UX). Prompting for user input has many pitfalls. I won't go into the whole rigamarole about using the IO monad in an FP context, instead I'll just point out that simplifying the user I/O can greatly enhance the app's utility.</p>

<p>What if the user wants to count the number of anagrams for a given word? If your app had a small and simple usage profile (<code>usage: anagrams &lt;word&gt;</code>) then the task would be easy.</p>

<pre><code>%%&gt; anagrams Star | wc -w
5
%%&gt;
</code></pre>

<p>From there you can imagine simple feature enhancements to make it more useful.</p>

<pre><code>%%&gt; anagrams Star bets ENDING
Star: arts, rats, tars, tsar
bets: best
ENDING: ginned
%%&gt;
</code></pre>
    </div>