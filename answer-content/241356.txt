<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>gameBoard       = [['' for j in range(3)] for i in range(3)]
displayBoard    = [[' ' for j in range(46)] for i in range(25)]
</code></pre>

<p>For me, time spend aligning source code is time wasted. It takes too much time initially. Moreover, if any variable is renamed throughout the code (or cleaned up etc. etc.), the aligning will get messed up. So it actively interferes with refactoring. This is highly subjective though, and I like to <strong>look</strong> at aligned code.</p>

<hr>

<pre><code>gameBoard       = [['' for j in range(3)] for i in range(3)]
</code></pre>

<p>A game board (or game board state, more precisely) consists of squares, filled with X'es or O's. What's missing is an object to represent those. For me, this is a bit too "stringly typed".</p>

<pre><code>displayBoard    = [[' ' for j in range(46)] for i in range(25)]
</code></pre>

<p>This is the start of a problem in the code: unexplained numeric literals. Why 46 or 25? Just perform the calculations and let the computer compute. Make named constants out of the calculations and then use those.</p>

<pre><code>player = 'X'#Player x to go first
</code></pre>

<p>If you name the identifier <code>currentPlayer</code> then the comment would not be necessary. Often choosing a good name will make comments unnecessary.</p>

<p>I'd try and avoid trailing comments as they tend to disappear on long lines. Again, this is somewhat subjective.</p>

<p>Use spaces before and after <code>#</code> please.</p>

<pre><code>updateGameBoard(square, player)
updateDisplayBoard(square, player)
</code></pre>

<p>I spot a design issue here. The UI should display the state of the game, captured in <code>gameBoard</code>. So I would expect a <code>printDisplayBoard(gameBoard)</code> instead. Currently the game logic and UI is mixed <em>and</em> duplicated.</p>

<pre><code>if moveCounter &gt;= 4:
    checkIfWon(player)
</code></pre>

<p>This is not so intuitive to me. The game ends when a row, column or diagonal of three elements is formed. Currently you may have two winning players! If the board is filled without this happening then the game is a draw.</p>

<p>Deviating from this game logic is not a good idea as it is easy to make mistakes. Moreover, and more importantly, it fails if the application is ever extended to, for instance, a 4x4 board. Now I don't expect "tic tac toe too" to happen soon, but for actual application code, this is rather important.</p>

<p>My SudokuSolver was programmed as generically as possible. When I was done it literally took a minute to support differently sized and even special Sudoku's with additional diagonals and such. This shows the importance of programming as generically as possible.</p>

<pre><code>def initGame():
</code></pre>

<p>I'd create <code>drawHorizontalLine</code> and <code>drawVertialLine</code> functions or similar.</p>

<pre><code>displayBoard[0][0]   = '1'
displayBoard[0][16]  = '2'
displayBoard[0][32]  = '3'
</code></pre>

<p>I like how you clearly mark the squares of the board. However, this also is one of the clearest examples of you doing the computing instead of the computer. It should be relatively easy to create a single <code>for</code> loop and compute the <code>x</code> and <code>y</code> of the positions.</p>

<p>Basically you're buffering the image before displaying it, rather than making a single <code>print</code> with spaghetti code. That's very good.</p>

<pre><code>os.system('cls' if os.name == 'nt' else 'clear')  # Clear screen
.
.
.
os.system('cls' if os.name == 'nt' else 'clear')  # Clear screen
</code></pre>

<p><strong>Repeat 10 times: "I will keep to DRY principles".</strong></p>

<p>If you repeat such a line, then put the line in a function and call that. If you add another method of clearing the screen then likely one of the locations with the same line of code will be forgotten. Looking at the comment, you've already thought of a name and started typing.</p>

<p>Of course, there is a lot of DRY (don't repeat yourself) failures where the same code is used but with different integer values, but this one stood out.</p>

<pre><code>shapes = [...]
</code></pre>

<p>Do you really want that variable to be assigned the entire shape all the time? That needs to be a constant or - in real code - a resource that is being read <em>once</em>.</p>

<pre><code>num = int(num[0])
</code></pre>

<p>Wait, what? Why? If the reason for code is not immediately clear, then I expect a comment!</p>

<pre><code>offsets = [[0 ,0],[0 ,16],[0 ,32],
           [9 ,0],[9 ,16],[9 ,32],
           [17,0],[17,16],[17,32]]
</code></pre>

<p>Which offsets would that be? End of code, must be Friday :)</p>

<pre><code>def numToIndex(num):
</code></pre>

<p>Finally, a function that calculates things! I <em>knew</em> you could do it.</p>
    </div>