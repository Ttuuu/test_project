<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the best designs come from usage. And your usage could be far simpler:</p>

<pre><code>from datatable import DataTable

padding = 2
header = ["Country", "Capital", "Population"]

table = [
    ["Germany", "Berlin", "82800000"],
    ["South Korea", "Seoul", "51446201"],
    ["China", "Beijing", "1403500365"],
    ["France", "Paris", "67201000"],
    ["Australia", "Canberra", "24877800"],
    ["Netherlands", "Amsterdam", "17200671"],
    ["Iceland", "Reykjavik", "348580"]
]

# Delete a row
del table[3]

# Update cell with a new value
table[1][1] = "SEOUL!!"

# Edit header
header[2] = "PEOPLE!!"

# Sort table alphabetically by capital
table = sorted(table, key=lambda r: r[1])

# Show the table
t = DataTable(header, padding)
for row in table:
    t.add_row(row)
t.display()
</code></pre>

<p>This shows the most complicated aspect is interfacing with your code. And it shows that the majority of your code is not needed. To simplify the "show the table" section you can make your code a function. And so the following is all the code we need to know, so that we can create the function.</p>

<blockquote>
<pre><code>class DataTable:

    """
    Defines the padding between the text and each cell in the table
    """
    padding = 2

    """
    Holds the width of the widest entry of each column in the table
    """
    column_widths = []

    """
    Holds the description for each column header
    """
    table_headers = []

    """
    Holds all the rows and their information
    """
    table_data = []

    def __init__(self, table_headers, cell_padding):
        """
        Creates a new data table of a given size.
        :param table_headers: Array of table headers
        :param cell_padding: The padding between the cell text and the cell border
        """
        self.table_headers.append(table_headers)
        self.calculate_widths()
        self.padding = cell_padding

    def calculate_widths(self):
        """
        Calculate the correct width to the row and cell borders based on the content length in the data table.
        :return: None
        """
        # If no headers exist it is not possible to calculate the table widths
        if len(self.table_headers) == 0:
            raise Exception("Header required to calculate widths")

        # If no column widths were set initialize them using the header text width
        if len(self.column_widths) == 0:
            for i in range(0, len(self.table_headers[0])):
                self.column_widths.append(len(self.table_headers[0][i]))

        # If the table has no rows the header defines the widths
        for i in range(0, len(self.table_headers[0])):
            self.column_widths[i] = len(self.table_headers[0][i])  # check if [0] is right thing to use here

        # If the table has rows check all for larger widths then the current one
        for i in range(0, len(self.table_data)):
            for j in range(0, len(self.table_data[i])):
                if len(self.table_data[i][j]) &gt; self.column_widths[j]:
                    self.column_widths[j] = len(self.table_data[i][j])

    def print_separator(self):
        """
        Generates a separator line that fits the table width
        :return: The separator line
        """
        output = "+"
        for i in range(0, len(self.column_widths)):
            output += ("-" * self.column_widths[i]) + ("-" * 2 * self.padding) + "+"
        return output

    def print_header(self):
        """
        Generates the table header of the data table formatted for printing
        :return:
        """
        output = ""
        for i in range(0, len(self.table_headers[0])):
            text = self.table_headers[0][i]
            diff = self.column_widths[i] - len(self.table_headers[0][i])
            output += ("|" + " " * self.padding + text + diff * " " + " " * self.padding)
        return output + "|"

    def print_rows(self):
        """
        Prints all rows and the intersecting separators of the data table
        :return: None
        """
        output = ""
        for j in range(0, len(self.table_data)):
            for i in range(0, len(self.table_data[j])):
                text = self.table_data[j][i]
                diff = self.column_widths[i] - len(self.table_data[j][i])
                output += ("|" + " " * self.padding + text + diff * " " + " " * self.padding)
            if j != len(self.table_data) - 1:
                output += "|\n"
            else:
                output += "|"
        return output

    def display(self):
        """
        Displays the formatted data table in text form
        :return: None
        """
        print(self.print_separator())
        print(self.print_header())
        print(self.print_separator())
        print(self.print_rows())
        print(self.print_separator())
</code></pre>
</blockquote>

<ol>
<li><p><code>calculate_widths</code> can be simplified by:</p>

<ol>
<li>Join the headers to the rows for the following calculations.</li>
<li>Rotate the table by using <code>zip</code>.</li>
<li>Change all the values to their length.</li>
<li>Find the longest via <code>max</code>.</li>
</ol>

<p>This will result in a 1d list of the maximum, and doesn't require any headers.</p></li>
<li><p><code>print_separator</code> can be simplified by:</p>

<ol>
<li>Using a list comprehension and <code>str.join</code>.</li>
<li>Calculating the amount of "-" characters together.</li>
</ol></li>
<li><p><code>print_header</code> and <code>print_rows</code> can use the same underlying function, differentiated by the input you give it. And so I'm ignoring <code>print_header</code>.</p></li>
<li><code>print_rows</code> can be simplified by:

<ol>
<li>Performing the separation of each row with a newline outside the function. And make the function <code>yield</code> each row.</li>
<li>Looping Pythonically through data via <code>for row in self.table_data</code>, rather than through a range and indexing the data.</li>
<li>You can use <code>str.format</code> to pad text to a width.</li>
</ol></li>
</ol>

<p>To make the changes I made to each function very apparent below is what they look like after the changes, but before making everything a single function.</p>

<pre><code>class DataTable:
    padding = 2
    column_widths = []
    table_headers = []
    table_data = []

    def __init__(self, table_headers, cell_padding):
        self.table_headers.append(table_headers)
        self.padding = cell_padding

    def calculate_widths(self):
        table = []
        if self.table_headers:
            table += [self.table_headers]
        table += self.table_data
        table = zip(*table)
        self.column_widths = [max(len(t) for t in row) for row in table]


    def print_separator(self):
        row = ["-" * (width + 2 * self.padding) for width in self.column_widths]
        return "+{}+".format("+".join(row))

    def print_rows(self, data):
        for row in data:
            row = [
                "|{p}{text: &lt;{width}}{p}|".format(
                    text=text,
                    width=width,
                    p=" " * self.padding
                )
                for text, width in zip(row, self.column_widths)
            ]
            yield "|{}|".format("|".join(row))

    def display(self):
        self.calculate_widths()
        print(self.print_separator())
        print(next(self.print_rows([self.table_headers])))
        print(self.print_separator())
        print("\n".join(self.print_rows(self.table_data)))
        print(self.print_separator())
</code></pre>

<p>After this I'd change the code to a couple of functions:</p>

<pre><code>def _calculate_widths(data, header):
    table = []
    if header:
        table += [header]
    table += data
    table = zip(*table)
    return [max(len(t) for t in row) for row in table]


def _pretty_rows(data, padding, widths):
    for row in data:
        yield "|".join(
            ['']
            + [
                "|{p}{text: &lt;{width}}{p}|".format(
                    text=text,
                    width=width,
                    p=" " * padding
                )
                for text, width in zip(row, widths)
            ]
            + ['']
        )


def _pretty_table(data, padding, header):
    widths = _calculate_widths(data, header)
    seperator = "+".join(
        [""]
        + ["-" * (width + 2 * padding) for width in widths]
        + [""]
    )
    if header:
        yield seperator
        yield from _pretty_rows([header], padding, widths)
    yield separator
    yield from _pretty_rows(rows, padding, widths)
    yield seperator


def pretty_table(data, *, padding=2, header=None):
    return '\n'.join(_pretty_table(
        data=data,
        padding=padding,
        header=header
    ))
</code></pre>



<pre><code># Show the table
print(pretty_table(table, header=header, padding=padding))
</code></pre>
    </div>