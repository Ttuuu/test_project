<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I like that you've tried to include some processing within object's methods, which is what objects should look like from OOP perspective, but you've chosen wrong case for it IMO.</p>

<h3>Naming &amp; API</h3>

<p>The class name and its API is confusing. Request itself shouldn't produce the response - the remote server does. Request is usually the data structure type which contains values that can be read from it, so that class representing remote server could fetch response based on it. The API of this server (that, in your case, encapsulates bunch of <strong>curl commands</strong>) would be:</p>

<pre><code>$response = $httpServer-&gt;send($request);
</code></pre>

<p>Your <code>get()</code>, <code>post()</code>, ...etc. methods are a good candidates for static factory methods (named constructors) producing concrete, possibly immutable request object, while replacing method parameter in primary constructor:</p>

<pre><code>class HttpRequest
{
    public static function post($url, $header, $options, $body)
    {
        return self::__construct('POST', $url, $header, $options, $body);
    }

    public function __construct($method, $url, $header, $options, $body)
    {
        $this-&gt;method = $method;
        $this-&gt;url    = $url;
        ...
    }

    public function method(): string
    {
        return $this-&gt;method;
    }
    ...
}
</code></pre>

<h3>Encapsulating I/O</h3>

<p>Since http structure is well defined and request contains complete information, its handler (remote server object) will be generic low level library - it won't need to change depending on where this request is sent.</p>

<p>The layer (might be a single class) where you create this request, pass it to server object and process the response will be an <strong>adapter</strong> to abstract data <strong>port</strong> (google for <code>ports and adapters</code>). For example (ignore names here):</p>

<pre><code>class FacebookService implements UserDataGateway
{
    public function __construct(APIConfig $config, RemoteServer $server)
    {
        $this-&gt;config = $config;
        $this-&gt;server = $server;
    }

    public function userData($userId): array
    {
        $request  = ... //prepare request using $this-&gt;config and given $userId
        $response = $this-&gt;server-&gt;send($request);

        return json_decode($response-&gt;body(), true);
    }
    ...
}
</code></pre>

<p>By encapsulating http, the class that will get (and call) <code>UserDataGateway</code> might work with this <code>FacebookService</code> as well as with local SQL database or other remote service providing user data - it only needds to return it based on some user's id. It can also be tested in isolation from remote/database calls (this example likely returns plain view model data, so ther will be no logic to test).</p>

<h3>Already invented stuff</h3>

<p>Take a look at <a href="https://www.php-fig.org/psr/psr-7/" rel="nofollow noreferrer">PSR-7</a> and its implementations like <a href="https://github.com/zendframework/zend-diactoros" rel="nofollow noreferrer">Zend-Diactoros</a> and remote server libraries like <a href="https://github.com/guzzle/guzzle" rel="nofollow noreferrer">Guzzle</a> which will implement <a href="https://www.php-fig.org/psr/psr-18/" rel="nofollow noreferrer">PSR-18</a>* in near future.</p>

<p>*) Calling remote server a <code>Client</code> is another kind of naming blunder IMO where you look at object from perspective of the entity it internally communicates with instead object that makes calls, but what can you do ¯\_(ツ)_/¯</p>

<p>Anyway, it would be strange if someone called me a "customer" at home after coming back with groceries for breakfast.</p>
    </div>