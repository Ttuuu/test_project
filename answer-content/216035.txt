<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I recommend establishing a single "lookup" array that groups your three filtering arrays and assigns new, meaningful grouping keys.  Something like this:</p>

<pre><code>$method_filters = [
    'exists' =&gt; [
        'full pallet' =&gt; [
            171 =&gt; [
                    'pakkelabels_shipping_gls_private',
                    'pakkelabels_shipping_postnord_private',
                    'pakkelabels_shipping_gls',
                    'pakkelabels_shipping_pdk',
                    'flat_rate:15',
                    'flat_rate:14'
                   ],
        ],
        'half pallet' =&gt; [
            169 =&gt; [
                    'pakkelabels_shipping_gls_private',
                    'pakkelabels_shipping_postnord_private',
                    'pakkelabels_shipping_gls',
                    'pakkelabels_shipping_pdk',
                    'flat_rate:15'
                   ],
        ],
        'quarter pallet' =&gt; [
            211 =&gt; [
                    'pakkelabels_shipping_gls_private',
                    'pakkelabels_shipping_postnord_private',
                    'pakkelabels_shipping_gls',
                    'pakkelabels_shipping_pdk'
                   ],
        ]
    ],
    'not exists' =&gt; [
        'full pallet' =&gt; [
            171 =&gt; [
                    'flat_rate:12'
                   ]
        ],
        'half pallet' =&gt; [
            169 =&gt; [
                    'flat_rate:14'
                   ]
        ],
        'quarter pallet' =&gt; [
            211 =&gt; [
                    'flat_rate:15'
                   ]
        ]
    ]
];
</code></pre>

<p>In php7+, you can even <code>define()</code> the array as a constant since your design will never need to mutate the initial values.  Constants have the added benefit of being accessible in any scope so you won't need to pass the array into your function.</p>

<p>Now that your data is all in one place, you can write a single function with parameters to drill down to the appropriate subarray or you can use foreach loops to traverse all of the subarrays.</p>

<p>When you are isolating your cart ids with <code>foreach(WC()-&gt;cart-&gt;get_cart_contents() as $key =&gt; $values) {</code>...</p>

<ol>
<li>You don't use <code>$key</code> so that declaration can be omitted.</li>
<li>You can enjoy the ease of comparison in your next step by storing the ids as keys in your temporary array.</li>
</ol>

<p>Something like this:</p>

<pre><code>foreach(WC()-&gt;cart-&gt;get_cart_contents() as $item) {
    $class_ids[$item['data']-&gt;get_shipping_class_id()] = '';
}
</code></pre>

<p>Now there are a few different ways to design the iterative <code>unset()</code> task.</p>

<pre><code>foreach ($method_filters as $filter_type =&gt; $pallet_filters) {               // iterate exists/not exists level
    foreach ($pallet_filters as $pallet_type =&gt; $shipping_methods) {         // iterate different pallets level
        if ($filter_type == 'exists') {
            $qualifiers = array_intersect_key($shipping_methods, $class_ids);
        } else {
            $qualifiers = array_diff_key($shipping_methods, $class_ids);
        }
        foreach ($qualifiers as $class_id =&gt; $method_names) {  // only iterate if there are qualifying class ids
            foreach ($method_names as $method_name) {
                unset($available_shipping_methods[$method_name]);
            }
        }
    }
}
</code></pre>

<p>Granted there will be a number of ways to set up the lookup array and a number of ways of iterating the lookup array data.  I have performed a basic check that my suggestions work - and I think it works as desired - but you should definitely test it on your project data to be absolutely sure.  <a href="https://3v4l.org/r4WPg" rel="nofollow noreferrer">https://3v4l.org/r4WPg</a> or with a CONSTANT: <a href="https://3v4l.org/uqcte" rel="nofollow noreferrer">https://3v4l.org/uqcte</a></p>

<p>With such a busy block of language constructs, it is imperative that you practice sensible variable naming so that no one gets blurry-eyed reviewing your script (not that you had that issue in your posted code).</p>
    </div>