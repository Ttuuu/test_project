<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you have different validation rules for different API calls, then I see no problem to extract them into different classes. A side note: DRYing out code is not free, it introduces new abstraction that results in a new layer of indirection, which doesn't help much to see the details of what's happening.</p>

<p>I'm not sure if you need to include <code>ActiveModel::Conversion</code> and <code>ActiveModel::Naming</code>. At least in Rails 5 including only <code>ActiveModel::Validations</code> is enough.</p>

<p>You can override the <code>read_attribute_for_validation</code> method instead of doing metaprogramming in the constructor.</p>

<p>I'd use a base class to let the validation rule classes to concentrate on the actual rules.</p>

<p>How about something like this?</p>

<pre><code>module ApiParamsValidation
  class Base
    include ActiveModel::Validations

    attr_reader :params

    def initialize(params)
      @params = params
    end

    def read_attribute_for_validation(key)
      params[key]
    end
  end
end

module ApiParamsValidation
  class Email &lt; Base
    EMAIL_VALIDATION_PATTERN = /\A[-a-z0-9_+\.]+\@([-a-z0-9]+\.)+[a-z0-9]{2,4}\z/i

    validates :email, format: { with: EMAIL_VALIDATION_PATTERN }
  end
end
</code></pre>

<p>You can read more about a nested case with some extra tests <a href="https://blog.kalina.tech/2019/12/nested-api-parameter-validation-in-rails.html" rel="nofollow noreferrer">here</a>.</p>
    </div>