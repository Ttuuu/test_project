<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use proper functions instead of macros</h1>

<p>Macros can get surprisingly hard to handle. For example <code>IS_MINE(MINE ^ MINE)</code> returns true, whereas <code>IS_MINE((MINE ^ MINE))</code> returns false.</p>

<p>Since you use C99, prefer inline functions instead:</p>

<pre><code>inline int IS_MINE(int tile) { return tile == MINE; }
</code></pre>

<h1>Prefer proper (constant) variables instead of macros</h1>

<pre><code>static const int MINE = 9;
static const int FLAG = 9;
static const int EMPTY = 0;
</code></pre>

<p>That's important as soon as you change <code>int</code> to another type, as the compiler can now issue warnings.</p>

<h1>Make function-specific read-only data <code>static</code> and <code>const</code></h1>

<p>The <code>cell</code> in <code>print_field</code> never gets changed, and only needs to get initialized once. We do not need to conjure a new <code>cell</code> every time.</p>

<p>Also, we have to make sure that we don't change the contents of <code>cell</code>, so we should make it <code>const</code>:</p>

<pre><code>static const char *cell[12] = {
    ....
};
</code></pre>

<h1>Keep the global variables to a minimum</h1>

<p>Yes, it's a game, but a proper <code>struct</code> that contains your current state makes sure that you a) don't accidentally change a global variable where you didn't intend to and b) don't forget any game variable.</p>

<h1>Use enumerations for variables that contain only some distinct values</h1>

<p>The neighbours can get explored in two circumstances, therefore either <code>why = 1</code> or <code>why = 2</code> in <code>explore_neighbors</code>.</p>

<p>But those are magic numbers. We can enumerate those reasons and use the enumeration instead:</p>

<pre><code>enum exploration {
    EXPLORE_EMPTY_CELLS,      //!&lt; explores all surrounding non-mine cells
    REVEAL_SURROUNDING_CELLS  //!&lt; explores all cells around the current cell
};
</code></pre>

<p>It's a lot easier to read later in your code. Compare</p>

<pre><code>explore_neighbors(x, y, EXPLORE_EMPTY_CELLS);
</code></pre>

<p>to</p>

<pre><code>explore_neighbors(x, y, 1);
</code></pre>

<h1>Use descriptive variable names</h1>

<p><code>i</code> for iteration is fine, but <code>w</code> for "exploration reason <strong>w</strong>hy" isn't.</p>

<h1>Keep the scope of your variables short</h1>

<p>You already use C99, so keep the scope of your variables to a minimum. You never use <code>flag</code> outside of your <code>while(1)</code> in <code>play_game</code>, so move it into the loop, for example.</p>

<h1>Use <code>sizeof</code> instead of magic numbers on arrays with static size</h1>

<p>In <code>play_game</code>, you use <code>99</code> twice:</p>

<pre><code>char input_buf[99];

print_field();

while(1) {
    // prompt
    printf("&gt; ");
    fgets(input_buf, 99, stdin);
</code></pre>

<p>That's error prone. You might change <code>99</code>, get a phone call or get called into a meeting, and then you forgot to change the other. Instead, use <code>sizeof</code> or a compile-time constant instead:</p>

<pre><code>print_field();

while(1) {
    char input_buf[99];
    // prompt
    printf("&gt; ");
    fgets(input_buf, sizeof(input_buf), stdin);
</code></pre>

<p>Use <code>sizeof(array)/sizeof(array[0])</code> if you don't use <code>char</code> in a similar situation.</p>

<h1>Prefer a single allocation for a field</h1>

<p>We don't need to call <code>malloc</code> so often. A single call is fine if we access the cells like</p>

<pre><code>field[x + y * width];
</code></pre>

<p>or similar. Less allocations means less possible errors. You can use</p>

<pre><code>// If you keep `width' and `height' global, the function
// will be index_ptr(int x, int y, int * memory)

inline int* index_ptr(int width, int height, int x, int y, int * memory) {
    assert(0 &lt;= x &amp;&amp; x &lt; width);
    assert(0 &lt;= y &amp;&amp; y &lt; height);

    return memory + x + (y * width);
}

inline int index(int width, int height, int x, int y, int * memory) {
    return *index_ptr(width, height, x, y, memory);
}
</code></pre>

<p>if you don't want to remember the formula. Note that this has the nice side-effect that we now can add additional checks for our accesses.</p>

<p>Our allocation for <code>field</code> and <code>mask</code> gets now easy as well:</p>

<pre><code>field = malloc(sizeof(*field) * width * height);
mask  = malloc(sizeof(*mask) * width * height);
</code></pre>
    </div>