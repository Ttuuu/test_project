<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>std::min_element</code> is unwarranted. The list is initially sorted, and <code>remove_if</code> guarantees to maintain the order of remaining elements. A minimal element is <code>*l.cbegin()</code>.</p></li>
<li><p><code>removeElementsInListDivisibleByP</code> is very hard to read. Consider <code>remove_multiples_of_P</code>.</p></li>
<li><p>The list initialization loop really wants to be <code>std::iota</code>.</p></li>
<li><p>The sieving does work, but it seems less efficient than the classical one.</p></li>
<li><p>If an <code>std::vector</code> <em>can</em> be used, it performs better than <code>std::list</code> (mostly due to preferential locality and less memory overhead). You may want to experiment.</p></li>
<li><p>I don't see what <code>adjacent_find</code> is supposed to do. Is it a remnant of some debugging code, perhaps?</p></li>
</ul>
    </div>