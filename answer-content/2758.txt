<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can make it an extension, so you can do</p>

<pre><code>string result = DateTime.Now.GetTimeSpan();
</code></pre>

<p>Here is how I did it a few time ago </p>

<pre><code>  /// &lt;summary&gt;
    /// Provide extentions for the DateTime Object.
    /// &lt;/summary&gt;
    public static class DateTimeExtensions
    {
        /// &lt;summary&gt;
        /// Gets the relative time for a datetime.
        /// &lt;/summary&gt;
        /// &lt;param name="dateTime"&gt;The datetime to get the relative time.&lt;/param&gt;
        /// &lt;returns&gt;A relative time in english.&lt;/returns&gt;
        public static string GetTimeSpan(this DateTime dateTime)
        {
            TimeSpan diff = DateTime.Now.Subtract(dateTime);

            if (diff.TotalMinutes &lt; 1)
            {
                return string.Format("{0:D2} second{1} ago", diff.Seconds, PluralizeIfNeeded(diff.Seconds));
            }

            if (diff.TotalHours &lt; 1)
            {
                return string.Format("{0:D2} minute{1} ago", diff.Minutes, PluralizeIfNeeded(diff.Minutes));
            }

            if (diff.TotalDays &lt; 1)
            {
                return string.Format("{0:D2} hour{2} and {1:D2} minute{3} ago", diff.Hours, diff.Minutes, PluralizeIfNeeded(diff.Hours), PluralizeIfNeeded(diff.Minutes));
            }

            if (diff.TotalDays &lt;= 2)
            {
                return string.Format(
                    "{0:D2} day{3}, {1:D2} hour{4} and {2:D2} minute{5} ago",
                    diff.Days,
                    diff.Hours,
                    diff.Minutes,
                    PluralizeIfNeeded(diff.Days),
                    PluralizeIfNeeded(diff.Hours),
                    PluralizeIfNeeded(diff.Minutes));
            }

            if (diff.TotalDays &lt;= 30)
            {
                return string.Format("{0:D2} days ago", diff.TotalDays);
            }

            return string.Format("{0:g}", dateTime);
        }

        /// &lt;summary&gt;
        /// Gets a 's' if value is &gt; 1.
        /// &lt;/summary&gt;
        /// &lt;param name="testValue"&gt;The value to test.&lt;/param&gt;
        /// &lt;returns&gt;An 's' if value is &gt; 1, otherwise an empty string.&lt;/returns&gt;
        private static string PluralizeIfNeeded(int testValue)
        {
            return testValue &gt; 1 ? "s" : string.Empty;
        }
    }
</code></pre>
    </div>