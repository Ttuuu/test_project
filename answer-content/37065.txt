<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things I noticed right off of the bat:</p>

<ul>
<li>You never check to see if your input is <code>null</code>.  This opens you up immediately to a <code>NullPointerException</code> if your API is misused.</li>
<li>You don't handle the case of a 1-length <code>String</code> being passed in, which opens you up to an <code>IndexOutOfBoundsException</code>.</li>
<li>You are constantly calling <code>.substring(1, 2)</code> or the like in order to retrieve one character of the <code>String</code>; this is less efficient than using the <code>.chatAt(1)</code> method, and you could simply store the character in a <code>char</code> variable for future reference.</li>
<li>There's no need to use something like <code>str.substring(2, str.length())</code>; you can simply call this as <code>str.substring(2)</code>.  <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring%28int%29" rel="noreferrer">The String API is actually pretty powerful.</a></li>
</ul>

<p>Here's my five minute rendition of it.  Actually, my version uses inline <code>if</code> statements because I find that it makes the code more concise and readable, but I laid it out a bit more to make it more intuitive for you.</p>

<pre><code>public static String deFront(String str) {

    if(str == null || (str.length() &lt; 2) {
        return "";
    }

    boolean keepFirst = str.charAt(0) == 'a';
    boolean keepSecond = str.charAt(0) == 'b';

    if(keepFirst &amp;&amp; keepSecond) {
        return str;
    }
    else if(!keepFirst &amp;&amp; !keepSecond) {
        return str.substring(2);
    }
    else if(!keepFirst &amp;&amp; keepSecond) {
        return str.substring(1);
    }
    else if(keepFirst &amp;&amp; !keepSecond) {
        return str.charAt(0) + str.substring(2);
    }

    throw new IllegalArgumentException("Something weird happened.");    
}
</code></pre>

<p>Notice that I immediately check for <code>null</code> in the first line.  Because <a href="http://en.wikipedia.org/wiki/Short-circuit_evaluation#Avoiding_the_execution_of_second_expression.27s_side_effects" rel="noreferrer">logical operators "short-circuit" in Java</a>, if <code>str == null</code>, the <code>str.length() &lt; 2</code> condition will never even be evaluated since the <code>||</code> will evaluate to <code>true</code> regardless.</p>

<p>Next, notice that I store whether or not to trim the associated characters in a <code>boolean</code> variable right off the bat.  This prevents me from constantly having to examine and break up the passed in <code>str</code>, which not only makes my code slightly more efficient but, more importantly, makes it vastly more readable.</p>

<p>Finally, the <a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/definition.html" rel="noreferrer">throwing Exceptions</a> bit at the end might be a bit more advanced than your level, but there's nothing like a taste of the fun stuff you'll get to do to keep you interested. :)  At first I simply had the last line as <code>return null</code>, since every ending branch must return <em>something</em>.  But because the code should never reach that line anyway (since I have an exhaustive list of all possibilities in my if/else-if blocks), I thought it was better to throw an Exception (i.e., raise an error the program) in case it ever happened for some reason, since it means something fundamentally broke.</p>

<p>Note that I could have also just left the last <code>else if()</code> block as an <code>else</code> in order to avoid the need to do something like that, but I wanted to make the code as explicit as possible for you to read through and understand.</p>

<p>For reference, here's how I originally wrote it:</p>

<pre><code>public static String deFront(String str) {

    if(str == null || str.length() &lt; 2) return "";

    boolean keepFirst = str.charAt(0) == 'a';
    boolean keepSecond = str.charAt(0) == 'b';

    if(!keepFirst &amp;&amp; !keepSecond) return str.substring(2);
    else if(!keepFirst &amp;&amp; keepSecond) return str.substring(1);
    else if(keepFirst &amp;&amp; !keepSecond) return str.charAt(0) + str.substring(2);
    else return str;
}
</code></pre>

<p>One last note: I could have just had them all be <code>if</code> statements as well, since each only returns and removes the method call from the stack anyway, but I find that it makes the code more readable to have <code>else if</code>s, since it means the conditionals are logically joined to the reader.</p>

<p><strong>EDIT:</strong> I actually had to expand the initial checks slightly.  Technically speaking, given your rules, if the <code>String</code> is passed in as <code>"a"</code>, it should return <code>"a"</code>, not the empty string.</p>

<pre><code>public static String deFront(String str) {

    if(str == null) return "";
    else if(str.equals("a")) return str;
    else if(str.length() &lt; 2) return "";

    boolean keepFirst = str.charAt(0) == 'a';
    boolean keepSecond = str.charAt(0) == 'b';

    if(!keepFirst &amp;&amp; !keepSecond) return str.substring(2);
    else if(!keepFirst &amp;&amp; keepSecond) return str.substring(1);
    else if(keepFirst &amp;&amp; !keepSecond) return str.charAt(0) + str.substring(2);
    else return str;
}
</code></pre>
    </div>