<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have to dissapoint you because this is not a state-pattern what you have written. This is some strange hybrid that I don't know what to call.</p>

<p>When you take a look at the <a href="https://sourcemaking.com/design_patterns/state" rel="nofollow noreferrer">State Design Pattern</a> then you can find there the following checklist:</p>

<blockquote>
  <ul>
  <li>Define a "context" class to present a single interface to the outside world.</li>
  <li>Define a State abstract base class.</li>
  <li>Represent the different "states" of the state machine as derived classes of the State base class.</li>
  <li>Define state-specific behavior in the appropriate State derived classes.</li>
  <li>Maintain a pointer to the current "state" in the "context" class.
  To change the state of the state machine, change the current "state" pointer.</li>
  </ul>
</blockquote>

<p>Your code fails the last two of them. The <code>SteakState</code>s instead of returning the next state uses a <em>lookup</em> class. This is wrong because each state should encapsulate the logic that leads to the next state which is usually unique to this state. If it isn't, then it doesn't make sense to use the state-pattern because it's cheaper to solve it in another way. Probably similar to your current solution but with fewer classes.</p>

<hr>

<p>I have <em>upgraded</em> your code according to the above state-pattern rules. Here's an example. Don't take it to serious, especially the <code>async/await</code>. I did it only for demonstration purposes and intentionally didn't use the <code>Async</code> suffix to make it more readable.</p>

<hr>

<p>You start with the <code>Raw</code> state and let the <code>while</code> loop <em>cook</em> the stake until it's done. It can also be any other state that you start with.</p>

<pre><code>static async Task Main(string[] args)
{
    var steak = new Steak
    {
        Current = new Raw()
    };

    while (await steak.Current.Next(steak) != null)
    {

    }
}
</code></pre>

<p>Each state has a max temperature and a method to the next state:</p>

<pre><code>public interface ISteakState
{
    int MaxTemperature { get; }

    Task&lt;ISteakState&gt; Next(Steak context);
}
</code></pre>

<p>The said <em>context</em> is <code>Steak</code> in this case. For cooking purposes it also maintains the previous state.</p>

<pre><code>// Context
public class Steak
{
    private ISteakState _current;
    public ISteakState Previous { get; private set; }
    public ISteakState Current
    {
        get =&gt; _current; set
        {
            Previous = _current;
            _current = value;
        }
    }
}
</code></pre>

<p><code>SteakState</code> has a helper <code>Cook</code> method that for the sake of this demonstation prints the time it takes to cook the stake.</p>

<pre><code>public abstract class SteakState : ISteakState
{
    private int _maxTemperature;

    protected SteakState(int maxTemperature)
    {
        _maxTemperature = maxTemperature;
    }

    public int MaxTemperature =&gt; _maxTemperature;

    public abstract Task&lt;ISteakState&gt; Next(Steak context);

    protected async Task Cook(int minTemperature)
    {
        var cookDelay = (MaxTemperature - minTemperature);
        Console.WriteLine($"Cooking for {cookDelay / 10} minutes.");
        await Task.Delay(cookDelay * 100);
        Console.WriteLine($"Steak is now {GetType().Name}");
    }
}
</code></pre>

<p>Each of the states sets it's max temperature and returns the next state. This is where you configure how a steak should be cooked. It also updates the <code>Current</code> state of the <code>Steak</code>.</p>

<pre><code>public class Raw : SteakState
{
    public Raw() : base(50) { }

    public override async Task&lt;ISteakState&gt; Next(Steak context)
    {
        Console.WriteLine($"Starting cooking...");
        await Cook(context.Previous?.MaxTemperature ?? 0);
        return context.Current = new Rare();
    }
}

public class Rare : SteakState
{
    public Rare() : base(105) { }

    public override async Task&lt;ISteakState&gt; Next(Steak context)
    {
        await Cook(context.Previous?.MaxTemperature ?? 0);
        return context.Current = new Medium();
    }
}

public class Medium : SteakState
{
    public Medium() : base(125) { }

    public override async Task&lt;ISteakState&gt; Next(Steak context)
    {
        await Cook(context.Previous?.MaxTemperature ?? 0);
        return context.Current = new WellDone();
    }
}

public class WellDone : SteakState
{
    public WellDone() : base(165) { }

    public override async Task&lt;ISteakState&gt; Next(Steak context)
    {
        await Cook(context.Previous?.MaxTemperature ?? 0);
        return default;
    }
}
</code></pre>

<p>The last state doesn't return any state and the <code>while</code> loop stops there.</p>

<hr>

<p>This is not 100% clean-code as there are still some repetitions but it should be enough to show the idea.</p>
    </div>