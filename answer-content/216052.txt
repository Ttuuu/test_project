<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, your calls to <code>.ba</code> aren't being resolved for <code>other</code>, so that's forcing use of reflection. If you run <code>lein check</code>, you'll see:</p>

<pre><code>Reflection warning, thread_test.clj:22:22 - reference to field ba on java.lang.Object can't be resolved.
</code></pre>

<p>This has the potential to slow the method down, although it only happens once per call, so the effect wouldn't be huge.</p>

<p>Use explicit type hints to ensure it knows what types you're working with, just like you did below that:</p>

<pre><code>(let [m (alength ^bytes (.ba ^Bytes this))
      n (alength ^bytes (.ba ^Bytes other))
</code></pre>

<p>I tried type hinting the parameters instead, and got an error I've never gotten before. I think it was looking for a <code>compareTo</code> with <code>Object</code> parameters, so saying the parameters were <code>Bytes</code> was throwing it.</p>

<hr>

<p>Other than that, I don't see anything performance related. I'll just point out, in case you don't know, <code>this</code>' <code>ba</code> is actually in scope. You can use it directly which gets rid of some bulk, although makes some of the code less symmetrical:</p>

<pre><code>(deftype Bytes [^bytes ba]
  Comparable
  (compareTo
    [_ other]
    (let [m (alength ba) ; Here
          n (alength ^bytes (.ba ^Bytes other))
          l (min m n)]
      (loop [i 0]
        (if (&lt; i l)
          (let [a (aget ba i) ; And here
                b (aget ^bytes (.ba ^Bytes other) i)
                d (compare a b)]
            (if (zero? d)
              (recur (inc i))
              d))
          (compare m n))))))
</code></pre>
    </div>