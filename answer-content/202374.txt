<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You seem to have a good grasp of the concepts - this is looking pretty good for a first effort!</p>
<p>Those accessors (<code>setAge()</code> + <code>getAge()</code>, and <code>setName()</code> + <code>getName()</code>) are exactly equivalent to making the members <code>age()</code> and <code>name()</code> public, which would be simpler and clearer.  I'll assume that you're later going to add some code to check that the values are reasonable (don't allow negative ages, for example, nor empty or whitespace-only names).</p>
<p>Note also that the "get" accessors can be marked <code>const</code>, because they don't change the <code>Person</code>:</p>
<pre><code>int getAge() const {
    return age;
}

std::string getName() const {
    return name;
}
</code></pre>
<p>In passing, I'll note that storing age as a member might not be the best design, especially when storing to a file that might be read back several years later.  If we store the year of birth, that's something that won't normally change, and we can always calculate the age from it.</p>
<hr>
<p>The <code>operator&gt;&gt;()</code> is mostly what I'd expect.  You can chain the reading like this:</p>
<pre><code>int age;
std::string name;
is &gt;&gt; age &gt;&gt; name;
</code></pre>
<p>However, there's a bug here.  <code>is &gt;&gt; name</code> will read up to the next <em>whitespace</em>, but our names can have whitespace in them.  We actually want to read up to the next <em>newline</em>, like this:</p>
<pre><code>std::string name;
std::getline(is, name);
</code></pre>
<p>Another consideration here is that we don't want to update the person if we failed to read both values (otherwise, <code>operator&lt;&lt;()</code> could be a <code>friend</code> function, and read directly to <code>person.age</code> and <code>person.name</code>).  We can easily test whether the reads succeeded:</p>
<pre><code>if (is) {
    person.setAge(age);
    person.setName(name);
}
</code></pre>
<p>When we have a reader, it's a good idea to have a matching writer that produces the same format.  That's very simple to write:</p>
<pre><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Person&amp; person) {
    return os &lt;&lt; person.getAge() &lt;&lt; ' '
              &lt;&lt; person.getName() &lt;&lt; '\n';
}
</code></pre>
<p>Note that we have a reference to a <code>const</code> person here - the writer is promising not to modify <code>person</code>.</p>
<hr>
<p>When reading the people in, we don't need to copy each line of text into a buffer (once we've fixed the bug I mentioned with reading names) - we can stream directly from the file stream into the person object:</p>
<pre><code>std::vector&lt;Person&gt; people;

Person person;
while (mysamefile &gt;&gt; person) {
    people.push_back(std::move(person));
}
</code></pre>
<p>(The <code>std::move()</code> is a non-essential optimisation - it says we won't be using <code>person</code> until it's re-written using <code>&gt;&gt;</code>).</p>
<hr>
<p>When displaying the people, we can make the code simpler using range-based <code>for</code> like this:</p>
<pre><code>for (const Person&amp; person: people) {
    person.printInfo();
    std::cout &lt;&lt; "\n\n";
}
</code></pre>
<p>Of course, this is slightly different, because we're now printing the newlines after the last person too.  A good way to solve this is to print the newlines <em>before</em> each person, but not if it's the first person.  To do this, we can initially set our separator to be an empty string, and update after it's used:</p>
<pre><code>auto separator = "";
for (const Person&amp; person: people) {
    std::cout &lt;&lt; separator;
    separator = "\n\n";

    person.printInfo();
}
</code></pre>
<p>A nice touch would be to allow printing to somewhere other than <code>std::cout</code>, by passing the stream as an argument to <code>printInfo()</code>:</p>
<pre><code>void printInfo(std::ostream&amp; out = std::cout) const {
    out &lt;&lt; "Name: " &lt;&lt; name &lt;&lt; '\n'
        &lt;&lt; "Age: " &lt;&lt; age &lt;&lt; '\n';
}
</code></pre>
<hr>
<h1>Modified code</h1>
<p>I've rearranged the headers a bit, to ease the process for when you want to separate the class definition from the test program.  I've changed the file read/write to work purely in memory for the test (I don't like tests that leave files lying about; using real files also increases fragility of the tests).  And I've added some validation of ages and names.</p>
<pre><code>#include &lt;algorithm&gt;
#include &lt;istream&gt;
#include &lt;ostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;

class Person
{
private:
    int age;
    std::string name;

public:
    void setAge(int age) {
        if (age &lt; 0) {
            throw std::range_error("Negative age");
        }
        this-&gt;age = age;
    }

    int getAge() const {
        return age;
    }

    void setName(std::string name) {
        auto first_nonspace
            = std::find_if_not(name.begin(), name.end(),
                               [](unsigned char c){ return std::isspace(c); });
        if (first_nonspace == name.end()) {
            throw std::range_error("Invalid name");
        }
        this-&gt;name = name;
    }

    std::string getName() const {
        return name;
    }

    void printInfo(std::ostream&amp; out) const {
        out &lt;&lt; "Name: " &lt;&lt; name &lt;&lt; '\n'
            &lt;&lt; "Age: " &lt;&lt; age &lt;&lt; '\n';
    }
};

std::istream&amp; operator&gt;&gt;(std::istream&amp; is, Person&amp; person)
{
    int age;
    is &gt;&gt; age;

    std::string name;
    std::getline(is, name);

    if (is) {
        person.setAge(age);
        person.setName(name);
    }

    return is;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Person&amp; person)
{
    return os &lt;&lt; person.getAge() &lt;&lt; ' '
              &lt;&lt; person.getName() &lt;&lt; '\n';
}


#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;

int main()
{
    std::ostringstream myfile;
    myfile &lt;&lt; "3 Baby\n";
    myfile &lt;&lt; "48 Linus Torvalds\n";
    myfile &lt;&lt; "62 Bill Gates\n";
    myfile &lt;&lt; "115 Kane Tanaka\n";

    std::istringstream mysamefile(myfile.str());

    std::vector&lt;Person&gt; people;
    Person person;
    while (mysamefile &gt;&gt; person) {
        people.push_back(std::move(person));
    }

    auto separator = "";
    for (const Person&amp; person: people) {
        std::cout &lt;&lt; separator;
        separator = "\n\n";

        person.printInfo(std::cout);
    }
}
</code></pre>
    </div>