<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid <code>using namespace std;</code></h2>

<p>To know why:</p>

<ul>
<li>Read <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">this</a> SO thread</li>
<li>Check Standard C++ recommendations: <a href="https://isocpp.org/wiki/faq/coding-standards#using-namespace-std" rel="nofollow noreferrer">here</a>, <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#sf6-use-using-namespace-directives-for-transition-for-foundation-libraries-such-as-std-or-within-a-local-scope-only" rel="nofollow noreferrer">here</a></li>
<li>Read <a href="https://www.geeksforgeeks.org/using-namespace-std-considered-bad-practice/" rel="nofollow noreferrer">this</a> blog</li>
</ul>

<h2>Memory management</h2>

<h3>delete</h3>

<p>Each time you write <code>new</code> think about <code>delete</code>. (And in this case, about <code>delete []</code>). If you manually allocate memory, you should care about freeing otherwise welcome to memory leaks.</p>

<h3>smart pointers</h3>

<p>If you to have to use pointer (and ask yourself, "do I really need to?") try to use <a href="https://www.internalpointers.com/post/beginner-s-look-smart-pointers-modern-c" rel="nofollow noreferrer">smart pointers</a> instead of raw pointers. (and if no choice, use them <a href="https://isocpp.org/wiki/faq/freestore-mgmt" rel="nofollow noreferrer">correctly</a>)</p>

<ul>
<li>It's the Standard <a href="https://www.meetingcpp.com/blog/items/an-overview-on-smart-pointers.html" rel="nofollow noreferrer">way to go</a></li>
<li>There are <a href="https://www.fluentcpp.com/2017/08/22/smart-developers-use-smart-pointers-smart-pointers-basics/" rel="nofollow noreferrer">many advantages</a></li>
<li>For almost <a href="https://stackoverflow.com/questions/22295665/how-much-is-the-overhead-of-smart-pointers-compared-to-normal-pointers-in-c">zero-overhead</a></li>
</ul>

<h2>Adopt <a href="https://isocpp.org/wiki/faq/coding-standards" rel="nofollow noreferrer">Standards</a></h2>

<h3>Containers</h3>

<p>Choose and use <a href="https://stackoverflow.com/questions/10699265/how-can-i-efficiently-select-a-standard-library-container-in-c11">proper</a> types and <a href="https://isocpp.org/wiki/faq/containers" rel="nofollow noreferrer">containers</a>.</p>

<h3>Algorithms</h3>

<p>It's really <a href="https://www.fluentcpp.com/2017/01/05/the-importance-of-knowing-stl-algorithms/" rel="nofollow noreferrer">important</a> to <a href="https://isocpp.org/wiki/faq/cpp11-library-stl" rel="nofollow noreferrer">know your algorithms</a>.</p>

<h2>Misc</h2>

<h3>Const-correctness</h3>

<p>When a parameter doesn't have to change, <a href="https://isocpp.org/wiki/faq/const-correctness" rel="nofollow noreferrer">make it const</a>.</p>

<h3>Includes</h3>

<p>Include only requested header. Why including <code>&lt;cstdlib&gt;</code> here ?</p>

<h3>iostream</h3>

<p><a href="https://stackoverflow.com/questions/748014/do-i-need-to-manually-close-an-ifstream">Don't close manually istream</a> if you don't have to.</p>

<h3>std::end</h3>

<p><a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">Avoid using <code>std::endl</code></a>. It send <code>'\n'</code> to the steam and then flush the steam. If you need to flush, do it <a href="https://en.cppreference.com/w/cpp/io/manip/flush" rel="nofollow noreferrer">explicitly</a>.</p>

<h3>Inputtings and parameters</h3>

<p>Always  <a href="https://stackoverflow.com/questions/16934183/integer-validation-for-input">validate inputs</a>. Don't assume that users don't try to break your program.</p>

<h3>Variables</h3>

<p>Define variable in the <a href="https://stackoverflow.com/questions/3773396/declare-variables-at-top-of-function-or-in-separate-scopes">closest scope possible</a> and use names that make sense.</p>
    </div>