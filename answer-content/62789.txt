<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All you need to make a sensible vector class is this:</p>

<pre><code>class vector {
    float e[3];
public:
    vector(float a = 0, float b = 0, float c = 0)  : e[0](a), e[1](b), e[2](c) { }
    float&amp; operator(int i) { return e[i]; }
    float  operator(int i) const { return e[i]; }
    static int const size;
    /* repeat for -, * and / -- same pattern */
    vector&amp; operator += (vector const&amp; b) {
       e[0] += b[0]; e[1] += b[1]; e[2] += b[2];
       return *this;
    }
};
</code></pre>

<p>All your binary operators can (and should) be declared outside of the class, taking const arguments and returning a const value, like so:</p>

<pre><code>vector const operator + (vector const&amp; a, vector const&amp; b) {
    return vector(a) += b;
}
</code></pre>

<p>For the dot product, length, angles and such, define functions which take const arguments and simply use the [] operator. You could use a template implementation so you could reuse those functions for any size vector.</p>

<pre><code>template&lt;typename T&gt;
float sum(T a) {
    float s = 0;
    for (int i = 0; i &lt; a.size; ++i) s += a[i];
    return s;
}

template&lt;typename T&gt;
float dot(T a, T b) {
    return sum(a * b);
}

template&lt;typename T&gt;
float length(T a) {
     return sqrt(dot(a, a));
}
</code></pre>

<p>Note that the * operator should multiply each element of the vectors and store them in the result vector, by element -- this is not the dot product.</p>

<p>You may also want to add a set of comparison operators, as you see fit.</p>

<p>The reason for having the [] operator is that it allows us to access the object as a const while also allowing us to use the same operator (when appropriate) as non-const.</p>

<p>I have included the static const variable size to allow iteration over vectors of any size. You will need a line in some file which defines the variable:</p>

<pre><code>int const vector::size = 3;
</code></pre>

<p>Remember to only have that line in a source file (i.e. not a header file).</p>

<p>Anonymous structs is a standard feature from C++11 onwards -- if you have a modern compiler, you should be able to use anonymous structs as much as you'd like.</p>
    </div>