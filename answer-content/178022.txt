<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>First thoughts</h1>

<p>The code is very easy to follow, once I'd followed the link to the softmax definition (it may be worth including the Wikipedia link in the function's comment).</p>

<h1>Interface</h1>

<p>This is a destructive operation; it might be desirable to provided a non-destructive option:</p>

<pre><code>template &lt;typename IterIn, typename IterOut = IterIn&gt;
void softmax (IterIn beg, IterIn end, IterOut dest = beg)
</code></pre>

<p>If you're feeling experimental, consider using concepts to constrain the iterator types.</p>

<h1>Add const where possible</h1>

<p>A little help to your readers:</p>

<pre><code>  auto const max_ele { *std::max_element(beg, end) };

  VType const exptot = std::accumulate(beg, end, 0.0);
</code></pre>

<h1>Bugfix - use the correct <code>accumulate()</code></h1>

<p>By passing the <code>double</code> value <code>0.0</code> as the third argument to <code>std::accumulate()</code>, we cause it to infer <code>double</code> for its type.  That's not what we want if <code>VType</code> is <code>long double</code> or some user-defined floating type.  We should instead use <code>VType</code> explicitly, using one of</p>

<ul>
<li><pre><code>VType const exptot = std::accumulate&lt;IterIn, VType&gt;(beg, end, 0.0);
</code></pre></li>
<li><pre><code>VType const exptot = std::accumulate(beg, end, VType{});
</code></pre></li>
</ul>

<p>Prefer the second of these, as C++20 says:</p>

<blockquote>
  <p>The number and order of deducible template parameters for algorithm
  declarations are unspecified, except where explicitly stated
  otherwise. [<em>Note</em>: Consequently, the algorithms may not be called with
  explicitly-specified template argument lists. — <em>end note</em>]</p>
</blockquote>

<h1>Consider accumulating as you exponentiate</h1>

<p>We can save one pass over the input, at some expense to simplicity, by accumulating as we go:</p>

<pre><code>  VType exptot = 0;

  std::transform(
      beg,
      end,
      beg,
      [&amp;](VType x){ auto ex = std::exp(x - max_ele); exptot += ex; return ex; });
</code></pre>
    </div>