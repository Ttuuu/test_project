<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Just be lazy. Don't do what you're told. They'll never know.</p>
<p>Instead of truly increasing the bottom <code>i</code> values right away, just make a note at the <code>i</code>-th value from the bottom to increase it by <code>v</code> when it gets popped. And when that pop happens, move the note to the value below, so it gets increased by <code>v</code> as well (when it gets popped). And so on, so that this will add <code>v</code> to <em>all</em> bottom <code>i</code> values (when they get popped).</p>
<p>To support multiple <code>inc</code> operations: If a value already has a note to add <code>w</code> to it (and all values below it), change that to <code>w + v</code>.</p>
<p>For easier coding, just store <em>all</em> values along with such a note, but with initial adding value <code>0</code>.</p>
<p>Now all three operations are O(1).</p>
<p>Oh wait. Not quite O(1), since you're using a deque so you can't access an arbitrary index in O(1). That's actually a problem in your solution as well. Your increasing the bottom <code>i</code> values isn't O(i) but only O(i<sup>2</sup>). If you switch to a list, yours would be O(i) and mine would be O(1). This loses the O(1) of appending/popping to/from a deque, but the list still does them in <em>amortized</em> O(1). So then all three operations are amortized O(1). Alternatively you could keep your deque and store the notes in a separate <em>dict</em>, but then it's O(1) just as much as dict access is O(1) (i.e., not truly, but practically), and I suspect it would be a bit slower than the list version.</p>
    </div>