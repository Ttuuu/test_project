<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Misha's answer is on the right track - as far as i know, a NavigableSet is the best tool in the standard library. A trie would be perfect, but there isn't one!</p>

<p>However, it's not enough to just look for the lexicographically closest prefix, because there might be unrelated prefixes in between the true prefix and the search string. Consider the set of prefixes "pot" and "potash", and the input string "potato".</p>

<p>Instead, you have to find the closest prefix, and then walk backwards through the set of prefixes until you either find a match, or find something that can't possibly be a prefix. I think this should do it:</p>

<pre><code>private String[] search(NavigableSet&lt;String&gt; prefixes, String inputString) {
    Iterator&lt;String&gt; it = prefixes.headSet(inputString, true).descendingIterator();
    while (it.hasNext()) {
        String prefix = it.next();
        if (inputString.startsWith(prefix)) return new String[]{prefix, inputString.substring(prefix.length())};
        else if (prefix.charAt(0) != inputString.charAt(0)) return null;
    }
    return null;
}
</code></pre>

<p>Although i have not tested this thoroughly.</p>
    </div>