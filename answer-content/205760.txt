<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General Comments:</h2>

<p>This does not compile for me:</p>

<pre><code>if (method == to_string(Method::GET))
              ^^^^^^^^^
</code></pre>

<p>Is this supposed to be <code>std::to_string</code>? Or a home written method.</p>

<p>Either way that seems like a very inefficient method of getting the string.</p>

<p>Same comment for:</p>

<pre><code>if (version == to_string(Version::HTTP_1_0)) 
               ^^^^^^^^^
</code></pre>

<h2>Header</h2>

<p>Your header class:</p>

<pre><code>    Header (const std::string&amp; key, const std::string&amp; value) noexcept
        : key(key)
        , value(value)
    {}
</code></pre>

<p>That works fine. But it may be nice to have a move version of the constructor.</p>

<pre><code>    Header (std::string&amp;&amp; key, std::string&amp;&amp; value) noexcept
        : key(std::move(key))
        , value(std::move(value))
    {}
</code></pre>

<p>This will make it optimally efficient and prevent extra copying.</p>

<p>Why do you have a deserialize static method?</p>

<pre><code>    static Header deserialize(const std::string&amp; header)
</code></pre>

<p>Why not make this another constructor? You should be able to construct a header from a line you read from the request.</p>

<p>This is a very expensive implementation of this operation. You can split to split this line into multiple words. Then you combine the multiple words inserting space into them (not sure that even preserves the original intent). The Key and value part are not required to be separated by a space (see rfc2616) only a colon is required. Leading and trailing white space around the value may be removed (but not space in the middle).</p>

<pre><code>    static Header deserialize(const std::string&amp; header)
    {
        std::vector&lt;std::string&gt; segments = split(header, " ");

        const std::string key = segments[0].substr(0, segments[0].size() - 1);

        segments.erase(segments.begin());

        const std::string value = concat(segments, " ");

        return Header(key, value);
    }
</code></pre>

<p>The simplest method is to use <code>std::stringstream</code>. </p>

<pre><code>    static Header deserialize(const std::string&amp; header)
    {
        std::stringstream headerStream(header);
        std::string       key;
        std::string       value;
        std::getline(headerStream, key, ':');
        std::getline(headerStream, value);

        // Erase remove idiom
        std::erase(std::remove_if(std::begin(value), std::end(value)), std::end(value), [](char c){return std::is_space(c);});

        return Header(key, value);
    }
</code></pre>

<p>Slightly harder but still better would be to do it manually using find.</p>

<pre><code>    static Header deserialize(const std::string&amp; header)
    {
        std::size_t  pos = header.find(':');
        if (pos == std::string::npos) {
            throw appropriate_exception;
        }
        std::string key(header.substr(0, pos));

        std::size_t  first = header.find_first_not_of(" \t", pos + 1);
        std::size_t  last  = header.find_last_not_of(" \t");
        std::string value(header.substr(first, last - first + 1));

        return Header(key, value);
    }
</code></pre>

<h2>Request</h2>

<p>Does the header not already have a key and and a value?</p>

<pre><code>    std::map&lt;std::string, Header&gt; headers;
</code></pre>

<p>So this should be</p>

<pre><code>    std::vector&lt;Header&gt; headers;
</code></pre>

<p>In the header I was willing to overlook that serialize used string concatenation because it was so short. But here in the request its getting long and bulky. You need to look at using a stream.</p>

<p>Personally I would pass in a stream and ask the object to serialize itself to the stream (rather than building a string). But you can serialize to a string stream convert that to a string and return it.</p>

<p>Again your usage of <code>split()</code> to get a list of tokens is horrible and unreadable. Please re-write to be maintainable.</p>

<h2>Response</h2>

<p>Now in response you do need a map to hold the headers. But you need a map of header to multiple values.</p>

<pre><code>std::map&lt;std::string, Header&gt; headers;
</code></pre>

<p>This should be:</p>

<pre><code>std::map&lt;std::string, std::vector&lt;Header&gt;&gt; headers;
</code></pre>

<p>The reason is that the HTTP headers can contain the same key multiple times (each time with a different value). The underlying code should be able to distinguish these different header values.</p>

<p>So for a given <code>key</code> you should potentially get multiple values back.</p>

<p>Again your usage of <code>split()</code> makes the code basically unreadable.</p>

<h2>Utility functions</h2>

<p>Much easier ways to write these functions:</p>

<pre><code>std::vector&lt;std::string&gt; split(const std::string&amp; str, const std::string&amp; delim) noexcept
{
    std::stringstream        strstream(str);
    std::vector&lt;std::string&gt; result;

    std::string word;
    while(std::getline(str, word, delim)) {
        result.push_back(word);
    }
    return result;
}
std::string concat(const std::vector&lt;std::string&gt;&amp; strings, const std::string&amp; delim = "") noexcept
{
    if (strings.size() == 0) {
        return "";
    }
    if (strings.size() == 1) {
        return strings[0];
    }
    std::stringstream result;

    std::copy(std::begin(strings), std::end(strings) - 1, std::ostream_iterator(result, " "));
    result &lt;&lt; strings.last();
    return result.str();
}
</code></pre>
    </div>