<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Bug:</p>

<pre><code>const JValue&amp; operator[](const std::string&amp; name) const 
{ 
     return this[children_name_indexes_.at(name)]; 
}
</code></pre>

<p>This won't do what you want. This is a plain UB nonsense. It should've been:</p>

<pre><code>const JValue&amp; operator[](const std::string&amp; name) const 
{ 
     return (*this)[children_name_indexes_.at(name)];
     // or
     // return operator[](children_name_indexes_.at(name)); 
}
</code></pre>

<p>About <code>auto</code> usage:</p>

<pre><code>auto stack_symbol = (machine_stack.GetSize() &gt; 0) ? machine_stack.GetTop() : ParserStackSymbol::None;   

auto next_transition_container = states_manager_.GetNextTransition(current_state_type, input, stack_symbol);
const auto&amp; next_transition = next_transition_container.transition;
</code></pre>

<p>All of these should be named types instead of <code>auto</code>. Abusing <code>auto</code> makes harder to reason about types one works with.</p>

<p>It is helpful to use <code>auto</code> for user-doesn't-care types like incomprehensible iterators or in template cases when one doesn't know the type at all. Usually, it is fine to use for-loop though <code>for(auto&amp;&amp; elem : some_vector_or_map)</code> as it is normally clear what type that is.</p>

<p>Error Reporting Mechanism:</p>

<pre><code>JsonReader(std::ostream&amp; error_output_stream = std::cerr, 
           std::ostream&amp; debug_output_stream = std::cout, bool debug_output = false);
</code></pre>

<p>It is fine to use some tools for debugging but users shouldn't be bothered with debug/error output streams. Throw an exception that describes what's the problem. Nobody likes exceptions but this the best way to deal with this problem. At most add an option to obtain the reported error without any throws.</p>

<p>If you write it for a specific library then use their logger class instead of <code>std::cout</code> or <code>std::ostream</code>. As these aren't good for logging in general. If any multithreaded code does multi-threaded printing you will end up with corrupted logs and <code>std::ostream</code> doesn't have any suitable API to deal with it. </p>

<p>Main Issue: <strong>API</strong></p>

<p>boost utilizes their <code>property_tree</code> for parsing/storing json. </p>

<p>In this property tree one can easily access value stored even in grand-grand-children.</p>

<pre><code>  int a = boost_aptree.get&lt;int&gt;("a.long.path.to.the.value");
</code></pre>

<p>In your case it would have to be something like:</p>

<pre><code>  int a = (int)aparsedJson["a"]["long"]["path"]["to"]["the"]["value"].GetNumberValue().value();
</code></pre>

<p>It is not even so horrible when you write it knowing the path but what about when you want to forward the path to some other place?</p>

<p>Also if one wants to make it safe from exceptions and obtain in optional form in boost one would have to write just <code>get_optional</code> instead of <code>get</code> and in your case it would be a nightmare of a bunch of lines.</p>

<p>Same is true for setting values and not just getting them.</p>

<p>I believe boost also utilizes some smart lookup mechanism separate from the tree structure while in yours each node has its own lookup (the unordered_map) and it is only one level deep - which is totally inefficient as when there are several child-levels to the json. It has to apply a string lookup for each level of depth.</p>

<p>Summary:</p>

<p>Overall I agree with @indi answer, I just added a couple of points he missed or I felt he didn't address enough. Overall, the code is written well in a clean way.</p>
    </div>