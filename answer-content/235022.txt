<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Almost six years later...</em> I discovered a bug in the code below:</p>

<pre><code>@Override
public boolean isAllowedPlay(TTBase tile) {
    TTBase area = tile.getParent();
    if (area == null)
        return false;
    TTBase game = tile.getParent().getParent();

    if (!tile.getWonBy().equals(TTPlayer.NONE))
        return false;
    if (area.getWonBy().isExactlyOnePlayer())
        return false;
    if (game.isWon())
        return false;

    return activeBoard == null || activeBoard == area || activeBoard.getWonBy() != TTPlayer.NONE;
}
</code></pre>

<p>Now let's say that we have this map:</p>

<pre><code>__O __X XOX
_O_ _OO XOX
O_X X_O OXO

__O X_O O_X
X_O OX_ O_X
O_O OXX OXO

X_X O__ ___
X_X XOO XXX
XXO OXO OXX
</code></pre>

<p>Looking at the "bigger picture" the areas won are</p>

<pre><code>O__
OXO
XOX
</code></pre>

<p>Say that the last move was the 'X' in "__X" on the first row. This leads to the <code>activeBoard</code> being the area in the top right. This area is not won by anyone, but the whole area is full. So it should somehow be considered as a draw. The statement <code>activeBoard.getWonBy() != TTPlayer.NONE</code> will return false in this case, which leads to no current tile is allowed to play at. The game is stuck.</p>

<p>The solution: Support draws.</p>
    </div>