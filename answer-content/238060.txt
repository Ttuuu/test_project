<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm still thinking about recursion, but i think you nailed it with your solution!</p>

<p>However to better understand your code I have made some cosmetically changes:</p>

<ul>
<li>removed the <code>glyphs</code> list and used string literals when <code>glyphs</code> was used</li>
<li>changed variable name <code>tree</code> to <code>display_rows</code></li>
<li>changed variable name <code>glyph</code> to <code>prefix</code></li>
<li>changed the type of <code>item</code> to string</li>
<li>added more 'air' to the code by using empty lines and replacing comments to keep them within the 80 characters limit</li>
</ul>

<p>This led to:</p>

<pre><code>def tree_string_to_display_string(tree_string):
    """change 'tuple-tree-string' to a string for display"""

    display_rows = []
    prefix = []
    item = ''

    for char in tree_string:

        if char in ',)' and item:

            # add glyph prefix and current item to tree
            display_rows.append(prefix + [item.strip()])
            item = ''

        if char == ',':

            # update glyph prefix for new item in sublist
            prefix = ['│ '] * (len(prefix)-1) + ['├─']

        elif char == ')':

            # update glyph prefix for last item in sublist
            display_rows[-1][-2] = '└─'
            prefix = prefix[:-1] 

        elif char == '(':

            # update glyph prefix for first item in sublist
            prefix.append('┬─')

        else:

            # other chars are simply added to current item
            item += char

    return '\n'.join(''.join(node) for node in display_rows)


s = '( A, B multi-word item , (C,D), ( E  , ,  F ), G  )'
print(tree_string_to_display_string(s))

s = '(01, (02,  03, 04), 05, ((06, 07), 08), (09, (10, 11), (12, 13), 14), 15)'
print(tree_string_to_display_string(s))
</code></pre>
    </div>