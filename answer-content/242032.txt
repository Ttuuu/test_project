<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Without rewriting the entire thing, there are a bunch of pointers I can give you:</p>

<pre class="lang-py prettyprint-override"><code>hung_man1 = "                      O\n"
hung_man2 = "                     /"
hung_man3 = "|" #added this line and removed | from prior
hung_man4 = "\\ \n" #added this line and removed \\ \n from prior
hung_man5 = "                      |\n"
hung_man6 = "                     / "
hung_man7 = "\\ \n" # added this line and removed \\ \n from prior
</code></pre>

<p>Is not something you would ever want to do.
When you find yourself naming variables <code>name</code> + <code>number</code>, think of lists:</p>

<pre class="lang-py prettyprint-override"><code>hung_man = [
    "                      O\n",
    "                     /",
    "|",  # added this line and removed | from prior
    "\\ \n",  # added this line and removed \\ \n from prior
    "                      |\n",
    "                     / ",
    "\\ \n",  # added this line and removed \\ \n from prior
]
</code></pre>

<p>This gets rid of </p>

<pre class="lang-py prettyprint-override"><code># Stuff the entire hangman construction into a list
hung_man = hung_man1,hung_man2,hung_man3,hung_man4, hung_man5, hung_man6, hung_man7
</code></pre>

<p>which is incidentally not a list, but a <code>tuple</code>.
You may have never noticed because these behave the same in your code.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>os.system("cls")
</code></pre>

<p>does not work on Unix-based systems.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>print("")
print("")
print("   AND NOW IT'S TIME TO PLAY.... ")
print("          !!!HANGMAN!!!")
print("")
print("")
</code></pre>

<p>can just be</p>

<pre class="lang-py prettyprint-override"><code>print("\n\n   AND NOW IT'S TIME TO PLAY.... ")
print("          !!!HANGMAN!!!\n\n")
</code></pre>

<hr>

<pre class="lang-py prettyprint-override"><code># I store the length of the word
word_size = len(computer_pick)
</code></pre>

<p>If that comment helps you learn or remember in any way, keep it, but under normal circumstances, it should definitely be removed.
It just replicates what the code says almost verbatim.
If the code ever changes, the comment can become outdated and confusing (comments lie, code never does).</p>

<hr>

<pre class="lang-py prettyprint-override"><code># Quick function to chop the word into letters - currently unused.
def split(word):
    return [char for char in word]
</code></pre>

<p>already exists in the form of <code>list(word)</code>.
Other than that, there is <code>str.split</code> to split a string according to some delimiter, which is not what your function does but might be handy for the future.
Note that you can just iterate over a string naturally, no need to convert it to a list or similar.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>print("The word you are guessing has", word_size, "letters:")
print("")
print("")
</code></pre>

<p>This could be</p>

<pre class="lang-py prettyprint-override"><code>print(f"The word you are guessing has {word_size} letters:", end="\n\n")
</code></pre>

<p>f-strings are powerful, convenient and fast.</p>

<hr>

<pre class="lang-py prettyprint-override"><code># Initializing more variables game_round is not used, wrong_guess is counter, winner is status
game_round = 0
wrong_guess = 0
winner = False
</code></pre>

<p>But <code>game_round</code> occurs later on, where it also has a similar comment.
It therefore seems used at first sight.
According to the comment, it is not.
Therefore, just use fewer comments in general and do not leave unused lines in the code, if at all possible.
Look into version control systems like <code>git</code> if you want to handle this properly.</p>

<p><code>winner</code> sounds like it should be a string containing the winner's name or similar.
<code>won</code> is more suitable to signal a <code>bool</code>.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>for character in range(word_size):
    display_word.append("___  ")
</code></pre>

<p>works, but <code>display_word</code> is initialized to an empty list way earlier.
Keep the <code>display_word = []</code> line close to where it is used.</p>

<p>Also, <code>"___  "</code> works, but "explicit is better than implicit" (<code>import this</code>).
Someone might come along and think the spaces are accidents.</p>

<p>Lastly, list comprehension will make all of this faster and more readable:</p>

<pre class="lang-py prettyprint-override"><code>display_word = ["_" * 3 + " " * 2 for _ in range(word_size)]
</code></pre>

<p>Notice the <code>_</code> for "this variable is unused".
Your <code>character</code> variable from before was wrong or at least very misleading, since <code>range</code> yields integers.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>    for character in range(word_size):
        print(display_word[character], end="")
</code></pre>

<p>can just be</p>

<pre class="lang-py prettyprint-override"><code>    for word in display_word:
        print(word, end="")
</code></pre>

<hr>

<pre class="lang-py prettyprint-override"><code>if my_guess.lower() in computer_pick:
</code></pre>

<p>is very confusing.
I entered capital letters into the game and they are silently dropped without error or hangman-penalty.</p>

<p>This is because the following line lacks a <code>.lower()</code> call to <code>my_guess</code>:</p>

<pre class="lang-py prettyprint-override"><code>        matching_letters = [i for i, x in enumerate(computer_pick) if x == my_guess]
</code></pre>

<p>Just put it into the <code>input</code> line:</p>

<pre class="lang-py prettyprint-override"><code>    my_guess = input("What letter do you think is in the word? ").lower()
</code></pre>

<p>Note that the list comprehension has poor variable naming as well, namely <code>x</code>.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>        if "___  " not in display_word:
            for character in range(word_size):
                print(display_word[character], end="")
            print("")
            winner = True
</code></pre>

<p>Here, <code>winner = True</code> can be replaced by a simple <code>break</code>.
This allows you to get rid of the <code>winner</code> variable altogether.</p>

<p>There is also the possibility to add an <code>else</code> block to your <code>while</code> block.
This executes if no <code>break</code> occurred but the <code>while</code> condition evaluated to <code>False</code>.
Aka, your <code>while</code> loop finished, no <code>break</code> was found (here, this is the winning flag).
Thus, you can put handling the losing situation there.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>if wrong_guess &gt; 6:
</code></pre>

<p>Alongside <code>while wrong_guess &lt; 7</code> above, you hard-coded the numbers here as well.
These two can go out of sync, breaking your program.
Using the <code>while</code>/<code>else</code> construct, you can avoid this problem altogether.</p>

<p>In general, extract any repetition into variables.
This also applies to for example <code>"___  "</code>, which you use multiple times.</p>
    </div>