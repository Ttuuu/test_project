<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    public int Compare(KeyValuePair&lt;int, string&gt; x, KeyValuePair&lt;int, string&gt; y)
    {
        if (x.Key == y.Key)
        {
            return 0;
        }
        if (x.Key &gt; y.Key)
        {
            return 1;
        }
        return -1;
    }
</code></pre>
</blockquote>

<p>can just be implemented through <code>Key</code>:</p>

<pre><code>    public int Compare(KeyValuePair&lt;int, string&gt; x, KeyValuePair&lt;int, string&gt; y)
    {
        return x.Key.CompareTo(y.Key);
    }
</code></pre>

<hr>

<blockquote>
<pre><code>list.BinarySearch(0, list.Count, new KeyValuePair&lt;int, string&gt;(timestamp, "}"), new TimeComparer());
</code></pre>
</blockquote>

<p>The first two arguments to <code>list.BinarySearch</code> are the default behaviour, so this can be simplified to:</p>

<pre><code>list.BinarySearch(new KeyValuePair&lt;int, string&gt;(timestamp, "}"), new TimeComparer());
</code></pre>

<p>Also, the use of <code>BinarySearch</code> assumes that <code>list</code> is sorted. Is it? (Note: I see that this is handled in the challenge, assuming it for your API is maybe not the best thing still)</p>

<hr>

<blockquote>
<pre><code>            //   value is negative
            int tempKey = -1 * i - 2;
</code></pre>
</blockquote>

<p>Deserves maybe a bit more comments than <code>value is negative</code>. <code>If BinarySearch returns a negative number, it respresents the binary complement of the index of the first item in list that is higher than the item we looked for. Since we want the first item that is one lower, -1.</code></p>

<p>And then replace the operation for retrieving the correct index in terms of the actual definition:</p>

<pre><code>int tempKey = ~i - 1;
</code></pre>

<hr>

<p>Assuming your <code>list</code> is sorted, you can quite easily check if the timestamp is present to begin with: compare it to the first and last items in the list for early exits.</p>

<hr>

<p><code>Hash</code> (weird name for a dictionary) doesn't need to be <code>public</code>; it is exposed through <code>get</code> and <code>set</code>. Make it a <code>private readonly</code> field.</p>

<p>The same goes for the <code>TimeStampComparer</code> class, its functionality is specific to <code>TimeMap</code>, so nest the class and make it <code>private</code>.</p>
    </div>