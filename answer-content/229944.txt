<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Sum generator</h2>

<pre><code>    dis = 0
    dis += math.pow((point2[0]-point1[0]),2)
    dis += math.pow((point2[1]-point1[1]),2)
    dis += math.pow((point2[2]-point1[2]),2)
</code></pre>

<p>can be</p>

<pre><code>    dis = sum((p2 - p1)**2 for p1, p2 in zip(point1, point2))
</code></pre>

<h2>Type hints</h2>

<p>PEP484 type hints will help the static analysis and readability of your code. For example,</p>

<pre><code>def calculate_distance(point1: Sequence[float], point2: Sequence[float]) -&gt; float:
</code></pre>

<h2>Variable naming</h2>

<p>Never call anything <code>list1</code> or <code>list2</code>. What do the lists actually contain? What are they for? Are they full of license plates? Death certificates? Deeds to property on the moon?</p>

<h2>Typo</h2>

<p><code>interalist</code> = <code>intra-list</code>.</p>

<h2>Point tuples</h2>

<p>From what I can tell, many of your sequences are actually three-dimensional points. There are easier or at least more legible ways to represent this, perhaps as a namedtuple:</p>

<pre><code>from collections import namedtuple

Point = namedtuple('Point', ('x', 'y', 'z'))
# ...
list1 = [['a', Point(1.2,3.6,4.5)] ...
</code></pre>

<h2>f-strings</h2>

<p><code>p2[0]+'_'+list1[i][0]</code></p>

<p>can be</p>

<pre><code>f'{p2[0]}_{list1[i][0]}'
</code></pre>

<p>or, if you use named tuples - and assuming that this is a <code>Point</code> -</p>

<pre><code>f'{p2.x}_{list1[i].x}'
</code></pre>

<h2>Loop like a native</h2>

<pre><code>    for i in range(len(list1)):
            p1 = list1[i][1]
</code></pre>

<p>can become</p>

<pre><code>for item1 in list1:
    p1 = item1[1]
</code></pre>

<p>In other words, don't use C-style indexing when you can just iterate over the items in an iterable.</p>

<h2>Use <code>isclose</code></h2>

<pre><code>if abs(dis1-dis2) &lt; 0.1:
</code></pre>

<p>is better represented with a call to <a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow noreferrer"><code>isclose</code></a>.</p>

<h2>Null conditions</h2>

<p>Don't do this:</p>

<pre><code>    if len(list1) == 0:
            pass
    else:
</code></pre>

<p>Just write</p>

<pre><code>if len(list1) != 0:
    # ...
</code></pre>

<h2>List creation</h2>

<p>This:</p>

<pre><code>   #make empty list
   newl = []
   #store old group in newl
   newl.extend(d)
</code></pre>

<p>should simply be</p>

<pre><code>new1 = list(d)
</code></pre>
    </div>