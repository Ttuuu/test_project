<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Prelude</h1>
<p>First of all, good work! I can see the effort you put into grokking something so foreign, and I would like to commend you for it. I will be focusing on reviewing what I think you can improve, but don't let these critiques discourage you—all code can be improved, but not all code works.</p>
<p>I'll be doing a combination of making general comments and addressing blocks of code, in order from top to bottom. In each section the code will generally not be runnable, since I'll be putting side-by-side comparisons of your code and my code. I'll include the full revision at the end.</p>
<p>I'm not the foremost expert on all things Haskell, so take my comments however you wish. I hope they help!</p>
<h1>Comments</h1>
<p>I recommend using <a href="https://haskell-haddock.readthedocs.io/en/latest/markup.html" rel="nofollow noreferrer">haddock</a> syntax to markup your comments. In my revised code, I use this syntax.</p>
<h1>Use of <code>StateT</code></h1>
<p>Since this is an exercise, I think it's fine to use <code>StateT</code> so you can learn how to work with monad stacks. But since the <code>Hangman</code> datatype is so simple, you could also just pass it throughout your functions. If I were making hangman, I would probably do this since why bother with the complexity of having a monad stack when it's just as convenient to write regular functions?</p>
<p>One way you can refactor is to observe that <code>State a s</code> is essentially equivalent to <code>s -&gt; (a, s)</code>, so you could, say, pass around tuples instead. You could also make your <code>guess</code> function be of type <code>Hangman -&gt; Hangman</code> so that it modifies the game state and then you could decide in <code>gameLoop</code> what status to return. In this case, you wouldn't even need to pass around tuples.</p>
<h1>Type aliases</h1>
<p>When you have a monad stack (in your case, <code>StateT Hangman IO</code>), it's common to see people make a type alias for it like <code>type HangmanM a = StateT Hangman IO a</code>. I think you need to explicitly take the type variable as an argument, but you may be able to avoid it.</p>
<p>You only use this stack once, so you don't really need to make an alias – I did because I end up using it twice due to a revision.</p>
<h1>Smart constructors</h1>
<p>Later in your code you make a sample <code>Hangman</code> value manually. You might eventually want to make arbitrary <code>String</code>s and <code>Int</code>s into these values, so it's conventional to make a smart constructor like so</p>
<pre class="lang-hs prettyprint-override"><code>mkHangman :: String -&gt; Int -&gt; Hangman
mkHangman word lives = Hangman (map Hidden word) lives Set.empty
</code></pre>
<p>You'll see that I define <code>sampleMan</code> as <code>mkHangman "apple" 7</code>.</p>
<h1><code>playGame</code></h1>
<p>I think it makes more sense to have game-ending logic in <code>playGame</code>, so I pattern match on the output of <code>runStateT gameLoop hangman</code> and print based on it.</p>
<pre class="lang-hs prettyprint-override"><code>-- Yours
playGame :: Hangman -&gt; IO (Status, Hangman)
playGame = runStateT gameLoop

-- Mine
playGame :: Hangman -&gt; IO ()
playGame hangman = do
  (status, _hangman') &lt;- runStateT gameLoop hangman
  case status of
    -- You could print the number of guesses remaining here, if so desired.
    Victory -&gt; putStrLn "Victory!"
    -- You could print what the word was here, if so desired.
    Defeat  -&gt; putStrLn "Defeat!"
    _       -&gt; error $
      "Expected status to be Victory or Defeat, got " ++ show status ++ "."
</code></pre>
<h1><code>gameLoop</code></h1>
<p>I don't really think that the general structure of this code is that bad. There's basically one place where you falter.</p>
<p>You don't use your monad stack.</p>
<p>The <code>State Hangman Status</code> returned by <code>guess</code> and the <code>StateT IO Hangman Status</code> returned by <code>gameLoop</code> are different stacks. You essentially pull the state out of the game loop and then reconstruct it for <code>guess</code>. You'll see that I change the type of <code>state</code> to be <code>StateT IO Hangman Status</code>. That way, I can just do <code>val &lt;- guess newGuess</code> in order to get the result.</p>
<p>Likewise, I don't have to worry about putting things back in the state. I let <code>guess</code> modify the state and then I pull the new state out to print it if <code>guess</code> returns <code>Playing</code>.</p>
<p>You'll notice that this code isn't really that different aside from some reordering.</p>
<pre class="lang-hs prettyprint-override"><code>-- Yours
gameLoop :: StateT Hangman IO Status
gameLoop = do
  newGuess &lt;- liftIO IO.getChar
  liftIO $ putStrLn $ "Your guess: " ++ [newGuess]
  hangman  &lt;- get
  let (val, newHangman) = runState (guess newGuess) hangman
  case val of
    Repeat  -&gt; do
      put hangman
      liftIO $ putStrLn "You already tried that.\n"
      gameLoop
    Victory -&gt; liftIO $ putStrLn "\nVictory!" &gt;&gt; return Victory
    Defeat  -&gt; liftIO $ putStrLn "\nDefeat!" &gt;&gt; return Defeat
    Playing -&gt; do
      put newHangman
      liftIO $ putStrLn $ show newHangman ++ "\n"
      gameLoop

-- Mine
gameLoop :: HangmanM Status
gameLoop = do
  newGuess &lt;- liftIO IO.getChar
  liftIO $ putStrLn $ "Your guess: " ++ [newGuess]
  val &lt;- guess newGuess
  case val of
    Repeat  -&gt; do
      liftIO $ putStrLn "You already tried that.\n"
      gameLoop
    Playing -&gt; do
      newHangman &lt;- get
      liftIO $ putStrLn (show newHangman ++ "\n")
      gameLoop
    Victory -&gt; return Victory
    Defeat  -&gt; return Defeat
</code></pre>
<h1><code>guess</code></h1>
<p>I pretty much refactored <code>gameLoop</code> by offloading some extra work to <code>guess</code>. This function is very different. One thing I used to help simplify it was the language <a href="https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/guide-to-ghc-extensions/basic-syntax-extensions#multiwayif" rel="nofollow noreferrer">pragma <code>MultiWayIf</code></a> to construct multiple branches of an <code>if</code> statement at the same depth. It makes the code look a lot cleaner without so many <code>if then else</code>s.</p>
<p>Since <code>guess</code> and <code>gameLoop</code> share the same monad stack, I can just <code>get</code> the current state and use <code>put</code> to modify it. I only use <code>put</code> if the state is being changed, which saves some work.</p>
<p>I also left some things for you to add if you wanted to—your code doesn't handle upper/lower case and erroneous characters (e.g. '1' or '¢').</p>
<pre class="lang-hs prettyprint-override"><code>-- Yours
guess :: Char -&gt; State Hangman Status
guess guessChar = do
  h@(Hangman word lives guessedChars) &lt;- get
  if guessChar `elem` guessedChars 
    then do -- If char was already guessed, prompt user to repeat
      put h
      return Repeat
    else do
      let decrementedLives = lives - 1
          newGuessedChars  = Set.insert guessChar guessedChars 
      if Hidden guessChar `elem` word -- If guess is correct
        then do 
          let updatedWordStatus = updateWord word guessChar
          put (Hangman updatedWordStatus decrementedLives newGuessedChars)
          return $ hasWon updatedWordStatus -- If won, return Victory
        else 
          if decrementedLives == 0 
            then return Defeat
            else do -- Keep playing!
              put (Hangman word decrementedLives newGuessedChars)
              return Playing

-- Mine
guess :: Char -&gt; HangmanM Status
guess guessChar = do
  Hangman word lives guessedChars &lt;- get
  let newLives = lives - 1
  if 
     -- TODO: deal with invalid character guesses
     | False -&gt;
       undefined
     | newLives &lt;= 0 -&gt; 
       return Defeat
     | guessChar `elem` guessedChars -&gt;
       return Repeat
     | otherwise -&gt; do
       let updatedWord = updateWord word guessChar
       put $ Hangman updatedWord newLives (Set.insert guessChar guessedChars)
       return $ hasWon updatedWord
  where
    -- TODO: deal with letter case
    normalizedGuess = undefined
</code></pre>
<h1><code>updateWord</code> and <code>hasWon</code></h1>
<p>I didn't really change these. I used a <a href="http://learnyouahaskell.com/syntax-in-functions#guards-guards" rel="nofollow noreferrer">guard</a> to simplify your helper for <code>updateWord</code> and renamed a few things. You can see the changes in the full code.</p>
<h1>Full code</h1>
<p>Feel free to ask about anything that I didn't comment on, whether it be my revised code or your initial code. Full disclaimer: I made pretty big changes and didn't write tests, so our versions may differ!</p>
<pre class="lang-hs prettyprint-override"><code>{-# LANGUAGE MultiWayIf #-}
{- A simple gameLoop of hangman.-}
module Hangman where

import qualified Data.Set as Set
import qualified System.IO as IO
import qualified System.Random as Rand
import Control.Monad.State
import Control.Monad.IO.Class(liftIO)

-- | Letters comprising a hangman word.
data Letter 
  = Hidden Char 
  | Revealed Char 
  deriving (Eq)

-- | A hangman word in a game.
type Term    = [Letter]

-- | Guessed characters in a game.
type Guessed = Set.Set Char

-- | A Hangman game.
data Hangman = Hangman { word         :: Term    -- ^ Guessed word so far.
                       , lives        :: Int     -- ^ Number of lives.
                       , guessedChars :: Guessed -- ^ Guessed characters.
                       } 

-- Helper type alias for the Hangman monad stack.
type HangmanM a = StateT Hangman IO a

-- | Smart constructor to make a hangman game with a fully hidden word and a 
-- certain number of lives.
mkHangman :: String -&gt; Int -&gt; Hangman
mkHangman word lives = Hangman (map Hidden word) lives Set.empty

-- | Hangman game status.
data Status  
  = Playing  -- ^ Game in progress.
  | Defeat 
  | Victory 
  | Repeat   -- ^ Repeat a turn.
  deriving (Show)

letterToChar :: Letter -&gt; Char
letterToChar (Hidden _)      = '_'
letterToChar (Revealed char) = char

instance Show Hangman where
  show (Hangman word lives guessedChars) =
    unwords [ shownWord
            , "  Lives: "
            , show lives
            , "\nGuesses so far: "
            , shownGuessedChars
            ]
      where
        shownWord         = map letterToChar word
        shownGuessedChars = Set.elems guessedChars

main = do
  IO.hSetEcho IO.stdin False
  IO.hSetBuffering IO.stdin IO.NoBuffering
  playGame sampleMan

playGame :: Hangman -&gt; IO ()
playGame hangman = do
  (status, _hangman') &lt;- runStateT gameLoop hangman
  case status of
    -- You could print the number of guesses remaining here, if so desired.
    Victory -&gt; putStrLn "Victory!"
    -- You could print what the word was here, if so desired.
    Defeat  -&gt; putStrLn "Defeat!"
    _       -&gt; error $
      "Expected status to be Victory or Defeat, got " ++ show status ++ "."

-- | Gets character from stdin, guesses it,
-- and then performs action based on the guess result.
-- Loops back to the begin if game hasn't ended.
gameLoop :: HangmanM Status
gameLoop = do
  newGuess &lt;- liftIO IO.getChar
  liftIO $ putStrLn $ "Your guess: " ++ [newGuess]
  val &lt;- guess newGuess
  case val of
    Repeat  -&gt; do
      liftIO $ putStrLn "You already tried that.\n"
      gameLoop
    Playing -&gt; do
      newHangman &lt;- get
      liftIO $ putStrLn (show newHangman ++ "\n")
      gameLoop
    Victory -&gt; return Victory
    Defeat  -&gt; return Defeat

-- | Function that returns the hangman state and game state after a guess.
guess :: Char -&gt; HangmanM Status
guess guessChar = do
  Hangman word lives guessedChars &lt;- get
  let newLives = lives - 1
  if 
     -- TODO: deal with invalid character guesses
     | False -&gt;
       undefined
     | newLives &lt;= 0 -&gt; 
       return Defeat
     | guessChar `elem` guessedChars -&gt;
       return Repeat
     | otherwise -&gt; do
       let updatedWord = updateWord word guessChar
       put $ Hangman updatedWord newLives (Set.insert guessChar guessedChars)
       return $ hasWon updatedWord
  where
    -- TODO: deal with letter case
    normalizedGuess = undefined

-- | When we get a correct guess, update hidden char to revealed.
--  Otherwise, do nothing.
updateWord :: Term -&gt; Char -&gt; Term
updateWord word guessChar = map helper word
  where 
    helper (Hidden hiddenChar)
      | hiddenChar == guessChar = Revealed guessChar
    helper val                  = val

-- | If all letters are revealed, game is won.
hasWon :: Term -&gt; Status
hasWon word = if all isRevealed word then Victory else Playing
  where 
    isRevealed (Hidden _)   = False
    isRevealed (Revealed _) = True

-- | Sample hangman word
sampleMan  = mkHangman "apple" 7
<span class="math-container">```</span>
</code></pre>
    </div>