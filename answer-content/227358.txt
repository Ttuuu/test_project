<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Practically speaking, this function is probably not the single bottleneck of your application, which would mean it takes more than 30% of the total run time. Therefore you don't need to optimize this code for speed, but for correctness and legibility.</p>

<p>If you want to get the maximum speed out of this little function nevertheless, you should look at the implementation of <code>StrToInt64</code> and implement the essential from that function yourself. Approximately like this:</p>

<pre class="lang-pascal prettyprint-override"><code>function CleanNumber(s: String): Int64;
var
  i, num, limit10, limit1: Int64;
begin
  limit10 := MaxInt64 div 10;
  limit1 := MaxInt64 mod 10;

  num := 0;
  for i := 1 to Length(s) do
    if (s[i] &gt;= '0') and (s[i] &lt;= '9') then begin
      if num &gt; limit10 then raise EValue();
      if (num = limit10) and (Ord(s[i]) - Ord('0') &gt; limit1) then raise EValue();

      num := 10 * num + Ord(s[i]) - Ord('0');
    end;
  Result := num;
end;
</code></pre>

<p>I didn't test the code and I'm not sure about the correct syntax for throwing exceptions, but I expect the basic algorithm to work fine. Some test cases:</p>

<pre class="lang-pascal prettyprint-override"><code>''
'0'
'9'
'100'
'1.0.0'
'1234567890123456789'
'9223372036854775807'
'9223372036854775808' // too large
'-9223372036854775808' // also too large
'aaaaaaaaaaaaaa' // =&gt; 0
</code></pre>
    </div>