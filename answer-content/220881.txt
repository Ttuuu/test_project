<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>The initial question did not state it had to work only for positive integers. But after an edit, it does, rendering my answer mute. Anyway, I leave my answer up for those how are interested in an altered solution to work for all integers, regardless of sign.</p>

<blockquote>
<pre><code>public static void Main()     
{
    // 11111111111111111111111111110011
    Console.WriteLine(Convert.ToString(-13, 2)); 
    // 0 -&gt; incorrect         
    Console.WriteLine(FindGap(-13));  
}
</code></pre>
</blockquote>

<p>After proposed fix:</p>

<pre><code>public static void Main()   
{
    // 11111111111111111111111111110011
    Console.WriteLine(Convert.ToString(-13, 2)); 
    // 2 -&gt; correct
    Console.WriteLine(FindGap(-13));    
}
</code></pre>

<p>FindGaps with binary arithmetic works also for strict negative numbers if we first translate the <code>int</code> to <code>uint</code>.</p>

<blockquote>
<pre><code>public static int FindGap(int number)
    {
        ..

        if (number == 0)
            return 0;

        ..
    }
</code></pre>
</blockquote>

<pre><code>public static int FindGap(int number)
    {
        ..
        //var n = BitConverter.ToUInt32(BitConverter.GetBytes(number), 0);
        var n = unchecked((uint)number); // even better approach

        if (n == 0)
            return 0;
       ..
    }
</code></pre>

<hr>

<h2>Proposed Solution</h2>

<pre><code>public static int FindGap(int number)
    {
        int maxGapSize = 0;
        int currGapSize = 0;
        var n = unchecked((uint)number);

        if (n == 0)
            return 0;

        while (n % 2 == 0)
            n = n &gt;&gt; 1;

        while (n &gt; 0)
        {
            if(n%2 == 0)
            {
                currGapSize++;
            }
            else
            {
                maxGapSize = Math.Max(currGapSize, maxGapSize);
                currGapSize = 0;
            }
            n = n &gt;&gt; 1;
        }

        return maxGapSize;
    }
</code></pre>

<hr>

<h2>Remarks</h2>

<p>Int32 storage in C#:</p>

<blockquote>
  <p>In addition to working with individual integers as decimal values, you
  may want to perform bitwise operations with integer values, or work
  with the binary or hexadecimal representations of integer values.
  Int32 values are represented in 31 bits, with the thirty-second bit
  used as a sign bit. Positive values are represented by using
  sign-and-magnitude representation. Negative values are in two's
  complement representation. This is important to keep in mind when you
  perform bitwise operations on Int32 values or when you work with
  individual bits. In order to perform a numeric, Boolean, or comparison
  operation on any two non-decimal values, both values must use the same
  representation.</p>
</blockquote>

<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators" rel="nofollow noreferrer">About bit-shifting in C#</a></p>

<ul>
<li>If the first operand is of type int or long, the right-shift operator performs an <strong>arithmetic shift</strong>: the value of the most significant bit (the sign bit) of the first operand is propagated to the high-order empty bit positions. That is, the high-order empty bit positions are set to zero if the first operand is non-negative and set to one if it's negative.</li>
<li>If the first operand is of type uint or ulong, the right-shift operator performs a <strong>logical shift</strong>: the high-order empty bit positions are always set to zero.</li>
</ul>

<p>This means that -1 is represented as <code>11111111111111111111111111111111</code>. If we would allow <code>&gt;&gt;</code> on this value, we would get the value back, causing an infinite loop in your flow at <code>n = n &gt;&gt; 1;</code>. By converting the storage of the bytes from <code>int</code> to <code>uint</code> (is not the same as casting), we can perform all bit operations as expected. Hence, <code>var n = unchecked((uint)number);</code>.</p>
    </div>