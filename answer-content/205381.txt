<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Write the <code>check</code> target's commands with lines in between</h2>

<p>You can easily enhance the user experience by:</p>

<p>Inserting a blank line in between the command itself and its output.</p>

<hr>

<h2>Write a <code>distrib</code> target to automatically make a package for further distribution</h2>

<p>If you ever intend to distribute this code, it has to be easily packageable, so it should:</p>

<ul>
<li><p>Remove possibly, not necessarily existing package files.</p></li>
<li><p>Create some distribution directory.</p></li>
<li><p>Compute the <code>SHA512SUMS</code> file.</p></li>
<li><p>Copy only what is necessary - the scripts and the <code>Makefile</code>.</p></li>
<li><p>The rest (<code>LICENSE</code> and <code>README.md</code>) may change and should be downloaded directly from GitHub.</p></li>
<li><p>On Cygwin for instance, all created files on the NTFS file system are marked executable. Thus, you should ensure proper permissions are in place.</p></li>
<li><p><code>tar</code> the directory with your favorite compression method.</p></li>
<li><p>And finally, delete the temporary directory.</p></li>
</ul>

<hr>

<h2><a href="https://codereview.stackexchange.com/users/75307/toby-speight">Toby Speight</a> has <a href="https://codereview.stackexchange.com/a/205391/104270">pointed out a few things</a> I adopted and enhanced in some cases</h2>

<blockquote>
  <p>Instead of testing for the existence of the files, we should make the <code>check</code> target depend on them.</p>
</blockquote>

<ul>
<li>I also added <code>SHA512SUMS</code> file, which is needed too.</li>
</ul>

<blockquote>
  <p><code>script_name_1</code> and <code>script_name_2</code> are completely unhelpful variable names.</p>
</blockquote>

<ul>
<li>I agree, renamed to <code>encrypt_script</code> and <code>decrypt_script</code>.</li>
</ul>

<blockquote>
  <p>The <code>install</code> target should depend on <code>check</code>.</p>
</blockquote>

<ul>
<li>I agree, dependency added.</li>
</ul>

<blockquote>
  <p>I'm not convinced that this is a good thing: <code>user_id</code> and <code>group_id</code>.</p>
</blockquote>

<ul>
<li>After testing in Cygwin and Linux Mint, it seems these are unnecessary. Commented out, just in case, someone will provide a reason to use it.</li>
</ul>

<blockquote>
  <p><code>DESTDIR</code> specifies where the root directory is... + <code>PREFIX</code> works somewhat like your <code>DESTDIR</code>...</p>
</blockquote>

<ul>
<li>After reading some articles, it seems you are right, code changed.</li>
</ul>

<hr>

<h2>Things I changed myself for a reason</h2>

<ul>
<li><p>Those <code>.PHONY</code>s seem to be possible to declate in one line.</p></li>
<li><p>Target <code>uninstall</code> tries to remove the directory also in case it is empty.</p></li>
<li><p>And a few nice touches.</p></li>
</ul>

<hr>

<h2>Enhanced re-write based on the above information</h2>

<pre><code>PREFIX?=/usr/local/bin
install_path=$(DESTDIR)$(PREFIX)

encrypt_script=encrypt-file-aes256
decrypt_script=decrypt-file-aes256
distrib_name=openssl-file-encryption-decryption-shell-scripts

#user_id=$(shell id --name --user)
#group_id=$(shell id --name --group)

.PHONY: check install uninstall distrib

check: $(encrypt_script) $(decrypt_script) SHA512SUMS
    echo &amp;&amp; sha512sum --check --status SHA512SUMS &amp;&amp; ( echo "Ok. You may use 'sudo make install' or '(sudo) make install PREFIX=SomeDir' command now." ) || ( echo "ERROR: Files hash sum mismatch!" &amp;&amp; echo &amp;&amp; exit 1 )

install: check
    echo &amp;&amp; [ -d $(install_path) ] || mkdir --parents $(install_path)
    install --verbose --mode=0755 --target-directory=$(install_path) $(encrypt_script) $(decrypt_script) # --owner=$(user_id) --group=$(group_id)

uninstall:
    rm $(install_path)/$(encrypt_script) $(install_path)/$(decrypt_script)
    rmdir --ignore-fail-on-non-empty $(install_path)

distrib: $(encrypt_script) $(decrypt_script) Makefile
    rm --force $(distrib_name).tar.xz
    rm --force --recursive $(distrib_name)
    mkdir $(distrib_name)
    sha512sum $(encrypt_script) $(decrypt_script) &gt; $(distrib_name)/SHA512SUMS
    cp $(encrypt_script) $(decrypt_script) Makefile $(distrib_name)
    wget --quiet --output-document=$(distrib_name)/LICENSE https://raw.githubusercontent.com/burianvlastimil/openssl-file-encryption-decryption-shell-scripts/master/LICENSE
    wget --quiet --output-document=$(distrib_name)/README.md https://raw.githubusercontent.com/burianvlastimil/openssl-file-encryption-decryption-shell-scripts/master/README.md
    chmod 755 $(distrib_name)/$(encrypt_script) $(distrib_name)/$(decrypt_script)
    chmod 644 $(distrib_name)/Makefile $(distrib_name)/SHA512SUMS $(distrib_name)/LICENSE $(distrib_name)/README.md
    tar --create --xz --file=$(distrib_name).tar.xz $(distrib_name)/*
    rm --force --recursive $(distrib_name)
</code></pre>
    </div>