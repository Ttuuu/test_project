<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After simplifications, your <em>infinite</em> code (from your <em>answer</em>) turns out to be equivalent to</p>

<pre><code>import Data.List (tails)
import Data.List.Ordered (minus, unionAll)

primes = ([2,3,5,7] ++) . minus n7sl . unionAll $
                  [ map (x*) xs | xs@(x:_) &lt;- tails n7sl ]
</code></pre>

<p>The main difference is that whereas your code builds the matrix</p>

<pre><code>&gt; mapM_ print $ take 20 $ zip n7sl [take i n7sl | i &lt;- [1..]]
(11,[11])
(13,[11,13])
(17,[11,13,17])
(19,[11,13,17,19])
(23,[11,13,17,19,23])
(29,[11,13,17,19,23,29])
(31,[11,13,17,19,23,29,31])
(37,[11,13,17,19,23,29,31,37])
(41,[11,13,17,19,23,29,31,37,41])
(43,[11,13,17,19,23,29,31,37,41,43])
(47,[11,13,17,19,23,29,31,37,41,43,47])
(53,[11,13,17,19,23,29,31,37,41,43,47,53])
(59,[11,13,17,19,23,29,31,37,41,43,47,53,59])
(61,[11,13,17,19,23,29,31,37,41,43,47,53,59,61])
(67,[11,13,17,19,23,29,31,37,41,43,47,53,59,61,67])
(71,[11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71])
(73,[11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73])
(79,[11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79])
(83,[11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83])
(89,[11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89])
</code></pre>

<p>by rows (in each row, the list is multiplied by the first number in the tuple), and processes it by rows -- putting them through the <code>unionAll</code> process -- the rewrite in this answer is <em>as if</em> working on the <em>same</em> matrix <em>by columns</em> (after the multiplication by the first number in the tuple, again).</p>

<p>Because <code>tails</code> is much less computationally demanding compared with your repeated use of <code>take</code>, and because we use <code>minus</code> from <code>Data.List.Ordered</code> package instead of your <code>rms</code> (with the flipped order of arguments), this runs much <em>much</em> faster now. Testing in GHCi:</p>

<pre><code>&gt; primes !! 1000000
15485867
it :: Integral a =&gt; a
(2.12 secs, 3734834160 bytes)

&gt; primes !! 500000
7368791
it :: Integral a =&gt; a
(0.98 secs, 1765893576 bytes)

&gt; logBase 2 (2.12 / 0.98)
1.113210610447991
</code></pre>

<p>Yes, that's a <em>million</em> primes that it now reaches, in just over 2 seconds, at about <i>n<sup>1.1</sup></i> <a href="https://en.wikipedia.org/wiki/Analysis_of_algorithms#Empirical_orders_of_growth" rel="nofollow noreferrer">empirical orders of growth</a> (in n primes produced), which is quite good (the coefficient, not the time; arithmoi's code reaches the one millionth  prime in 0.1 seconds on the same computer).</p>

<p>This is not a sieve of Eratosthenes though. It builds the multiples not from primes, but from the 2-3-5-7-wheel enumeration. </p>

<hr>

<p>For <em>proper</em> testing always compile with the <code>-O2</code> switch and run the resulting standalone executable at the shell, with <code>+RTS -s</code> run-time options (to get the time and space statistics).</p>
    </div>