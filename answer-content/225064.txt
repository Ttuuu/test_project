<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's one suggestion related to usability. Say I want to make this code work:</p>

<pre><code>h = HashTable()
h.put('hello', 'world')
h.put((1,2), (3, 4))
h.put(95.7, 76.2)
</code></pre>

<p>I have to define a custom hash function to handle the tuples and floats as keys. The only way I can add a custom hash function, however, is to modify your hash table code and add it to the map in the body of the <code>_hash</code> method. That means I can't just use your code; I have to be able to modify it to customize it.</p>

<p>The custom hash function I would write would look something like this:</p>

<pre><code>def custom_hash():
    if type(key) is tuple:
        # turn tuple into integer
    elif type(key) is float:
        # turn float into integer
    # Otherwise the key has already been converted
    return key % self._size
</code></pre>

<p>I have to add another case to my conditional every time I need to support a new type as key. Suppose I want to use dates as keys, or booleans, or named tuples, or some new class I define. This function could turn really long and ugly after a while.</p>

<p>The built-in Python dictionary avoids this by having objects which can be used as keys implement a <code>__hash__</code> method as described at <a href="https://stackoverflow.com/a/8998010/3376926">https://stackoverflow.com/a/8998010/3376926</a>. Then your <code>_hash</code> method becomes this:</p>

<pre><code>def _hash(key):
    return key.__hash__() % self._size
</code></pre>

<p>The key itself has logic to convert itself into an integer that your code doesn't need to know anything about, and I can add all the new key types I want without needing to modify your source.</p>
    </div>