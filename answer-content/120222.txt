<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know this isn't what you're interested in, but I'm going to talk about style first - as is, I can't read this at all.</p>

<p>The biggest issue is that you seem to have some sort of dislike for whitespace - why?
Whitespace is your friend, and is the difference between legible and illegible code.  If you really want some obfuscated code, then write it normally and then send it through an obfuscator.  You need more newlines, spaces around operators, etc.</p>

<p>You could also follow the Python naming conventions better - variables and functions should be named with <code>lower_snake_case</code>.</p>

<p>I've also cleaned some things up in terms of variables (i.e. the characters are in the <code>string</code> module), the ternary expression, when you set the <code>start_time</code> (you want that to be as tight as possible), etc.</p>

<p>At this point, your code looks like this:</p>

<pre><code>#!/usr/bin/python/ 
# -*- coding: utf-8 -*
from __future__ import division

import sys
import re
import string
import crypt
import random
import time


def generate_tripcode(password):
    shift_jis = password.encode("shift_jis", "ignore")
    tripcode = crypt.crypt(
        shift_jis, re.compile(r'[^\.-ElapsedUpdates]')\
            .sub('.', (shift_jis + '...')[1:3])\
            .translate(string.maketrans(':;&lt;=&gt;?@[\\]^_`', 'ABCDEFGabcdef'))
        )[-10:]
    return tripcode


def generate_random_string(length):
    return ''.join(random.choice(characters) for _ in xrange(length))


def get_check(chk, tf):
    return chk if tf else string.lower(chk)


def display_statistics(matches, total, elapsed, rate, elapsed_seconds):
    print """
    Caught interrupt.
    {matches}    matches found
    {total}  codes generated in {elapsed}
    Average of ~{rate} tripcodes generated per second
    """.format(**locals())
        if matches &gt; 0: 
            print "1 match found every ~{} seconds".format(round(elapsed_seconds / matches, 2))
            print "1 match found in every ~{} tripcodes".format(int(round(total / matches)))


try: 
    update_count = 0
    elapsed_updates = 0
    total = 0
    matches = 0
    rate = 0
    elapsed_count = 0
    filetext = ""
    characters = string.printable.split()[0] # get all non-whitespace, non-weird characters
    random.seed(time.time())    #Seed the random module with the current time

    is_case_sensitive = Respond.query("Search for exact case / case-sensitive?")


    find = sys.argv[1]

    if not is_case_sensitive:
        find = find.lower()

    absolute_start_time = time.time()
    start_time = time.time()
    while True:
        update_count += 1
        elapsed_count += 1
        total += 1
        password = generate_random_string(7)
        tripcode = generate_tripcode(password)

        if re.search(find, get_check(tripcode, is_case_sensitive)) &gt; -1:
            output_string = "{}   &gt;&gt;&gt;   {}\n".format(password, tripcode)
            filetext == output_string
            print "\033[K\r",   #Flush out any text from the current line
            print output_string
            mathces += 1

        if update_count == 100:
            update_count = 0
            elapsed_updates += 1
            status = "{} tripcodes    {}   tripcodes/sec\r".format(total, rate)
            print status

        if elapsed_updates == 10:
            elapsed_range = time.time() - start_time
            rate = int(round(elapsed_count / elapsed_range))
            elapsed_count = 0
            elapsed_updates = 0
            start_time = time.time()
except KeyboardInterrupt: 
    elapsed_seconds = time.time() - absolute_start_time
    elapsed = time.strftime("%M minutes, %S seconds", time.gmtime(elapsed_seconds))
    rate = int(round(total/elapsed_seconds))

    # Print statistics. 
    display_statistics(matches, total, elapsed, rate, elapsed_seconds)
    print "Writing matches to file...",

    with open("t.txt", "a") as file_:
        file_.write(filetext)
    print "done."
</code></pre>

<p>Now as for performance, the big choke is probably <code>generate_tripcode</code> - the most obvious way to make it faster is to move as many of the computations that don't change outside of the function.</p>

<p>Your regular expression has a minor bug - you indicated that you want to replace the characters <code>.-z</code>, however as written it will replace the <em>range</em> of characters from <code>.</code> to <code>z</code> - to fix this, make the <code>-</code> the last character in the regex.</p>

<pre><code>regex = re.compile(r'[^\.z-]')
translator = string.maketrans(':;&lt;=&gt;?@[\\]^_`', 'ABCDEFGabcdef')

def generate_tripcode(password):
    shift_jis = password.encode("shift_jis", "ignore")
    tripcode = crypt.crypt(
        shift_jis, regex.sub('.', (shift_jis + '...')[1:3]).translate(translator)
    )[-10:]
    return tripcode
</code></pre>

<p>Otherwise, if you can use a different cryptographic hash that is faster you'll probably see a much bigger performance increase, however that isn't an option for this situation. That is also part of why they use cryptographic hashes - to prevent you from doing this :)</p>

<p>In general though, if you want to push your computer to the limits, don't write the performance intensive code in Python - either write it in C/C++ entirely, or write an extension to handle the part that needs to be fast.</p>

<h3>Everything below this was invalidated by a comment - left here for posterity</h3>

<p>Your regular expression doesn't make sense to me either - you're saying you want to replace everything but the characters <code>.-ElapsedUpt</code> with a period?  If so, you have a bug - putting the <code>-</code> where you did means the range from <code>.</code> to <code>E</code> - if you want to exclude <code>-</code>, put it at the end. It still doesn't really make sense to me though - if those are the only characters you want, why don't you make that your <code>characters</code> string? Also, you won't ever have the characters in your translation after that regex - all of them would have been replaced with a period.</p>

<p>That being said, while preserving the intent of your code, I'd rewrite the function to look like this, which is probably going to give you a bit of a performance boost</p>

<pre><code>regex = re.compile(r'[^\.ElapsedUpdates-]')
translator = string.maketrans(':;&lt;=&gt;?@[\\]^_`', 'ABCDEFGabcdef')

def generate_tripcode(password):
    shift_jis = (password.encode("shift_jis", "ignore") + '...')[1:3]
    tripcode = crypt.crypt(
        shift_jis, regex.sub('.', shift_jis).translate(translator)
    )[-10:]
    return tripcode
</code></pre>
    </div>