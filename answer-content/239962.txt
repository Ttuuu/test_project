<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review:</h2>

<p>I don't like this as it gives you an extra level of indirection.</p>

<pre><code>struct json_array {
    std::vector&lt;json_value&gt; array;
};
</code></pre>

<p>You can simply use another name:</p>

<p>using json_array = std::vector;</p>

<p>This gives you a specific name for the array and removes the level of indirection.</p>

<hr>

<p>Sure this is resonable:</p>

<pre><code>struct json_object {
    std::map &lt; std::string, json_value&gt; object;
</code></pre>

<p>Note That if you try and access an element that does not exist it will add it to the object (even if you are just reading).</p>

<pre><code>    json_value&amp; operator [](std::string key) {
        return object[key];
</code></pre>

<p>Maybe this is desirable, depends on your use case.</p>

<pre><code>    }
};
</code></pre>

<p>But sometimes you pass by const reference. In this case you can not access members of the object because there is no const access to members. I would a way to accesses elements from a const reference.</p>

<pre><code>  json_value const&amp; operator [](std::string key) const {
        auto find object.find(key);
        if (find != object.end()) {
            return find-&gt;second;
        }
        // Not sure what you want to do if the object does not exist.
  }
</code></pre>

<hr>

<p>Not really sure what <code>json20</code> is for?</p>

<pre><code>class json20 {
</code></pre>

<p>You don't need it to hold the JSON that is what <code>json_value</code> is for. To me this is JSON parsers, which is fine but you don't need to store the json_value inside. Personally I would rename this to JsonParser and then use to read a stream that returns a json_value object.</p>

<hr>

<p>The stream operator <code>&gt;&gt;</code> drops all leading white space so you don't actually need to write your own.</p>

<pre><code>static void eat_whitespace(std::istream&amp; istrm) {
</code></pre>

<hr>

<p>Personally I would write eat_whitespace like this:</p>

<pre><code>static void eat_whitespace(std::istream&amp; istrm) {

    int ch;
    while (istrm &gt;&gt; ch &amp;&amp; std::isspace(ch)) {
        // Do nothing
    }
    if (istrm) {
        istrm.unget();  // We read a non whitespace. Put it back.
    }
}
</code></pre>

<hr>

<p>So because <code>operator&gt;&gt;</code> drops leading white space we can re-write get_next_token</p>

<pre><code>static char get_next_token(std::istream&amp; istrm) {
    char ch = static_cast&lt;char&gt;(-1);
    istrm &gt;&gt; ch;  // Don't care if it does not work.
                  // If the read fails then `ch` is unmodified.
                  // So it will have a value of -1.
    return ch;
}
</code></pre>

<hr>

<p>OK. Streaming:</p>

<pre><code>std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, const json_value&amp; v) {
</code></pre>

<p>For boolean values we can simplify it:</p>

<pre><code>        // IF you want to do it manually.
        os &lt;&lt; (std::get&lt;1&gt;(v)) ? "true" : "false";

        // Using the stream operator.
        os &lt;&lt; std::boolalpha &lt;&lt; std::get&lt;1&gt;(v);
</code></pre>

<hr>

<p>For objects like the json_object, json_arry and json_null I would write their own stream operators.</p>

<pre><code>    std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, json_array const&amp; v);
    std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, json_object const&amp; v);
    std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, json_null const&amp; v);
</code></pre>

<p>Now you can simplify case 3/4/5:</p>

<pre><code>    case 3:  os &lt;&lt; std::get&lt;3&gt;(v); break;
    case 4:  os &lt;&lt; std::get&lt;4&gt;(v); break;
    case 5:  os &lt;&lt; std::get&lt;5&gt;(v); break; 
</code></pre>

<hr>

<p>Lets simplify the <code>try_string()</code></p>

<pre><code>static bool try_string(std::istream&amp; istrm, json_value&amp; value) {

    char ch;
    if (istrm &gt;&gt; ch) {
        if (ch != '"') {
            istrm.unget();
            return false;
        }

        std::string s;
        std::getline(istrm, s, '"');
        value.emplace&lt;2&gt;(s);
        return true;
    }
    return false;
}
</code></pre>

<hr>

<p>Pretty sure your try_number does not conform to the JSON standard.</p>

<pre><code>static bool try_number(std::istream&amp; istrm, json_value&amp; value) {
</code></pre>

<p><a href="https://www.json.org/json-en.html" rel="nofollow noreferrer">https://www.json.org/json-en.html</a></p>

<ul>
<li>Your code will read a number with multiple <code>.</code> in it.</li>
<li>Numbers can not start with 0 (unless it is just zero or zero with a fraction).</li>
<li>You don't support E suffix to numbers.</li>
</ul>

<hr>

<p>Personally I would convert the C++ code for parsing JSON into LEX code to parse JSON values. The code for lex is a lot simpler:</p>
    </div>