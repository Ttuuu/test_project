<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another thing I noticed is this:</p>

<blockquote>
<pre><code>} catch (PDOerrorInfo $e){}
</code></pre>
</blockquote>

<p>What is <code>PDOerrorInfo</code>? Did you declare that as a subclass of <a href="http://php.net/manual/en/class.exception.php" rel="nofollow noreferrer"><code>Exception</code></a>? If so, when do you expect that to be thrown? Otherwise are you thinking of the PDO method <a href="http://php.net/manual/en/pdo.errorinfo.php" rel="nofollow noreferrer"><code>errorInfo()</code></a>? If that is the case, this catch is basically useless, since a <code>catch</code> can basically only handle instances of <a href="http://php.net/manual/en/class.exception.php" rel="nofollow noreferrer"><code>Exception</code></a>. Apparently <a href="https://www.tehplayground.com/0CFSJlDWxqBMSI99" rel="nofollow noreferrer">there won't be any warning</a> about this mistake but if a <a href="http://php.net/manual/en/class.pdoexception.php" rel="nofollow noreferrer"><code>PDOException</code></a> is thrown, it won't be caught by the code above.</p>

<p>Generally you would want to have code to notify you or somebody else who can handle the issue of the exception:</p>

<pre><code>try{
    $ckeckEmail = $conn-&gt;prepare("SELECT * FROM users WHERE `email` = :email");
    $ckeckEmail-&gt;bindValue(':email', $email);
    $ckeckEmail-&gt;execute();
    $user = $ckeckEmail-&gt;fetch(PDO::FETCH_ASSOC);    
    $RowCount = $ckeckEmail-&gt;rowCount();
} 
catch (PDOException $e){ //PDO specific exception
    //call to email or log message, likely using $e-&gt;getMessage()
}
catch (Exception $e){ //General exception
    //call to email or log message, likely using $e-&gt;getMessage()
}
</code></pre>

<p>Though you could just combine those two <code>catch</code> statements into a single for any exception. Just be aware that <a href="http://php.net/manual/en/class.pdoexception.php" rel="nofollow noreferrer"><code>PDOException</code></a> uses a string for the <code>$code</code> property instead of an int like <code>Exception</code> uses.</p>

<pre><code>try {
    //database actions
}
catch (Exception $e){ //any instance of Exception, including PDOException
    //call to email or log message, likely using $e-&gt;getMessage()
}
</code></pre>

<p>After reading <a href="https://codereview.stackexchange.com/questions/209182/user-profile-system-with-php-and-pdo-conditional-links-for-admin/209185?noredirect=1#comment404283_209185">your comment</a>:</p>

<blockquote>
  <p>About the <code>catch (PDOerrorInfo $e){}</code> i heard that i should leave it empty to not show users any kind of error that could compromisse my database security. </p>
</blockquote>

<p>It is important to note that an exception could occur for many reasons like database connection issues (e.g. database server offline, incorrect credentials from the PHP code, etc.) so this is more a matter of handling scenarios where things are not correctly setup and less about security. And nothing requires you to show errors to the user - it is recommended that you make it visible to whoever is responsible for handling it (typically you or a team if you have one), e.g. via email, logging it in a log file, etc.</p>
    </div>