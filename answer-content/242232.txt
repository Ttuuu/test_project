<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <strong>linked-list implementation</strong> of a stack is well written in respect to you're being a learner.</p>

<h3>Observations</h3>

<p>.. from a foreign Software Developer's perspective (experienced in Java) that never coded in C++:</p>

<ul>
<li><code>Stack</code> could be implemented as <code>class</code>, instead of <code>struct</code> (benefit: information hiding)</li>
<li><code>pop()</code> should return a value (e.g. <code>char</code> instead of a node or <code>StackElement</code>)</li>
<li>there's no method <code>size()</code> which returns the stack's size as <code>int</code></li>
</ul>

<p>See <em>Robert Sedgwick</em>'s book <a href="https://www.pearson.com/us/higher-education/program/Sedgewick-Algorithms-in-C/PGM326041.html" rel="nofollow noreferrer">Algorithms in C++, 3rd ed.</a>, where he writes about <strong>Stack Implementations</strong>. Beware it's from 1999 but includes following <a href="https://www.cs.princeton.edu/~rs/Algs3.cxx1-4/code.txt" rel="nofollow noreferrer">example C++ Stack class</a> to derive some <strong>encapsulation advice</strong> (private VS public):</p>

<pre class="lang-c prettyprint-override"><code>template &lt;class Item&gt;

class STACK {

  private:

    struct node {
      Item item;
      node * next;
      node(Item x, node * t) {
        item = x;
        next = t;
      }
    };

    typedef node * link;
    link head;

  public:

    STACK(int) {
      head = 0;
    }

    int empty() const {
      return head == 0;
    }

    void push(Item x) {
      head = new node(x, head);
    }

    Item pop() {
      Item v = head - &gt; item;
      link t = head - &gt; next;
      delete head;
      head = t;
      return v;
    }
};
</code></pre>

<h3>Incompleteness Warning</h3>

<p>Since I am a "native" Java developer, I can better judge on the  or similar <a href="https://algs4.cs.princeton.edu/13stacks/Stack.java.html" rel="nofollow noreferrer">Java Implementation of a Stack</a> using <em>generics</em>.
Thus I will miss some points that other experienced C++ developers may answer for sure.</p>
    </div>