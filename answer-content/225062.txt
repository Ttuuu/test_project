<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I first played a few rounds of the game and I immediately liked it.</p>

<p>The screen motion is smooth, the colors have a nice contrast, and I liked that it is even possible to play snake in single-player mode.</p>

<p>On the start screen, the icing on the cake would be if the wasd text would be in blue, the arrow keys would be in green and the neutral text would be in a neutral color. This would emphasize the player colors even more.</p>

<p>When I played and my snake was 2 cells long, I could make a u-turn, which is not possible with larger snakes. This feels a little inconsistent, and traditional snake games don't allow u-turns at all.</p>

<p>The initial positions of the snakes can be in the very top row where the status is displayed. This is confusing since there is a conflict about what to show on top. The snakes should not be allowed to be in the very top row at all.</p>

<p>As the green player, I can run over the blue snake in its starting position without getting penalized. Is that intentional? I had expected that my snake would die whenever it runs into an obstacle, or anything else that is not the red apple.</p>

<p>When the snake currently goes to the right, and I press Up, Right very quickly, I expect that the snake goes one step up and then turns right. Depending on the exact timing of when the next step is taken, this either works as expected, or the Right key is silently swallowed. This inconsistency makes the game a bit unpleasant.</p>

<p>So much for the game play. All in all, what you have right now already feels good, and the fine points that I mentioned above can probably added without investing too much time and effort.</p>

<p>Regarding your code, I will go from the top to the bottom and just add remarks to everything that I find:</p>

<pre><code>class Block {
  constructor(x, y, w, h, col) {
</code></pre>

<p>The meaning of the first variables was immediately clear to me. I thought that <code>col</code> would mean <code>column</code>, but that was wrong. Therefore, whenever an abbreviation is ambiguous, it's better to use the full name instead, in this case <code>color</code>.</p>

<pre><code>    ctx.fillStyle = "rgb" + this.col;
</code></pre>

<p>From this line I infer that <code>col</code> should be something like <code>(0,0,255)</code>, including the parentheses. That's not the standard form of a color that most programmers would expect. It would be more flexible if the color were specified as <code>rgb(0,0,255)</code> instead. This would allow the color to be specified as <code>#0000ff</code> or <code>#00f</code> or <code>blue</code>, or even with alpha channel.</p>

<pre><code>class Snake {
  constructor(x, y, w, h, col, col2, name, ins) {
</code></pre>

<p>What is <code>col</code> and <code>col2</code>? It would be better to name them <code>headColor</code> and <code>tailColor</code>. Then I would not have to guess anything. Same for <code>ins</code>. My first guess is that it means <code>insert</code>, but that doesn't make sense here.</p>

<pre><code>    this.bod = [];
</code></pre>

<p>This should be <code>body</code> instead.</p>

<pre><code>    this.spd = 25;
</code></pre>

<p>This should be <code>speed</code> instead, or whatever you mean by <code>spd</code>.</p>

<pre><code>    this.vel = [0, 0];
</code></pre>

<p>This should be <code>velocity</code>.</p>

<pre><code>  win() {
    ctx.textAlign = "center";
</code></pre>

<p>The abbreviation <code>ctx</code> usually means <code>context</code>. This is a very abstract term. You can probably find a more concrete term, like <code>field</code>.</p>

<pre><code>    ctx.clearRect(0, 0, width, height);
</code></pre>

<p>Compared to your other variable names, <code>width</code> and <code>height</code> are really long. But they are immediately understandable, therefore they are not <em>too</em> long, but exactly right.</p>

<pre><code>  move(tx, ty) {
</code></pre>

<p>What does the <code>t</code> mean here? I usually call these variables <code>dx</code> and <code>dy</code>, and they are pronounced delta-x and delta-y.</p>

<pre><code>  update() {
    if (this.bod[0].x == food.x &amp;&amp; this.bod[0].y == food.y) {
      this.grow(food.x, food.y);
      food.x = Math.floor(Math.random() * 19) * 25;
      food.y = Math.floor(Math.random() * 19) * 25
    }
</code></pre>

<p>The food should not appear on either of the snakes. Therefore you need to generate a food position, see if the space is empty, and if it is not, try again and again, until you succeed.</p>

<pre><code>  ctx = canvas.getContext('2d');
</code></pre>

<p>Ah, ok, since <code>ctx</code> is called <code>Context</code> by the Canvas, that name is perfect. I didn't know that when I did read the code further above.</p>

<pre><code>  ply1 = new Snake(Math.floor(Math.random() * 19) * 25, Math.floor(Math.random() * 19) * 25, 25, 25, "(25, 150, 25)", "(0, 255, 0)", "GREEN",[37, 38, 39, 40])
  ply2 = new Snake(Math.floor(Math.random() * 19) * 25, Math.floor(Math.random() * 19) * 25, 25, 25, "(25, 25, 150)", "(0, 0, 255)", "BLUE", [65, 87, 68, 83]);
  food = new Block(Math.floor(Math.random() * 19) * 25, Math.floor(Math.random() * 19) * 25, 25, 25, "(255, 0, 0)");
</code></pre>

<p>The expression <code>Math.floor(Math.random() * 19)</code> appears so often and always means the same, therefore you should write a new function called <code>randomX()</code> or <code>randomY()</code>.</p>

<pre><code>  ctx.fillStyle = "rgb" + ply1.col;
</code></pre>

<p>In chess, a <em>ply</em> is a half-move. You should rather write <code>player</code> instead.</p>

<p>All in all, you structured your code quite well.</p>

<p>One other thing that I noticed is that you use the number 25 excessively. It is usually a good idea to have two separate coordinate systems: one for the game field (0..18, 0..18), and one for the screen. The 25 should only appear in the screen coordinates since they have nothing to do with the game by itself. If you do this correctly, you can scale the game by just changing a single number in the code. There should be these constants and conversion functions:</p>

<pre><code>// Game coordinates
const fieldWidth = 19;
const fieldHeight = 19;

// Screen coordinates
const cellWidth = 25;
const cellHeight = 25;

function fieldToScreenX(fieldX) {
    return fieldX * cellWidth;
}

function screenToFieldX(screenX) {
    return Math.floor(screenX / cellWidth);
}
</code></pre>
    </div>