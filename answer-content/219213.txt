<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A <code>Person</code> class encapsulates the attributes/methods and logic for the <code>Person</code> object. Currently inherits from <code>Object</code>, but you can at any time extend this logic by creating an new super class or children and distribute the logic between those hierarchies. </p>

<pre><code>class Person extends Object {
    constructor(props) {
       super
       this.name = props.name
       this.chores = props.chores
    }

    addSubject() {
      if (this.isFound) { return new People().push(person) }
      // your choice to either create a chore class or write some subroutine
      else { person.chores.forEach( chore =&gt; chore.addChore ) }
    }

    // either pass targetPerson as param or add it to the Person object as attribute
    isFound() { this.name !== this.state.targetPerson }

}
</code></pre>

<pre><code>people = [ new Person('Grace', 'clean kitchen', 'wash dog'..), etc..]
</code></pre>

<p>I also believe the <code>onDrop</code> subroutine should just have the responsibility of <code>dropping person</code> or <code>returning</code> a new <code>people</code> object. It would be an <code>instance method</code> of the <code>People</code> class</p>

<pre><code>class People extends Object {
    drop = () =&gt; {
      this.each( person =&gt; person.addSubject() )
      // etc...
    }

}
</code></pre>
    </div>