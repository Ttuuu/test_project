<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Injecting <code>IConfiguration</code> is more and more being seen as an indicator of Single Responsibility Principle (SRP) violation when the framework allows for a more SOLID approach of dealing with configuration at the composition root.</p>
<p>Also the creation of new <code>HttpClient</code> manually can cause issues</p>
<h3>Reference <a href="https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/" rel="nofollow noreferrer">You're using HttpClient wrong</a></h3>
<p>Both API service implementations have done this. Both implementations only need the client injected so it should be configured to do so</p>
<p><em>ConfigureServices</em></p>
<pre><code>var host = Configuration.GetSection("Data").GetSection("Host").Value;
projectsControllerBaseAddress = new Uri(host + "api/projects/");
projectsFavoritesControllerBaseAddress = new Uri(host + "api/projectfavorites/");

//Register Typed clients
services.AddHttpClient&lt;IProjectsService, ProjectService&gt;(client =&gt; {
    client.BaseAddress = projectsControllerBaseAddress;
    
    //...any other settings needed
});

services.AddHttpClient&lt;IProjectFavoritesService, ProjectFavoritesService&gt;(client =&gt; {
    client.BaseAddress = projectsFavoritesControllerBaseAddress;
    
    //...any other settings needed
})
</code></pre>
<p>Reference <a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#how-to-use-typed-clients-with-httpclientfactory" rel="nofollow noreferrer">How to use Typed Clients with HttpClientFactory</a></p>
<p>This removes the need for creating the clients within the services as it will be injected by the framework that will also manage its lifetime.</p>
<p><code>ProjectService</code> Refactored:</p>
<pre><code>public class ProjectsService : IProjectsService {
    private readonly HttpClient client;

    public ProjectsService(HttpClient client) {
        if (client == null) { throw new ArgumentNullException(nameof(client)); }
        this.client = client;
    }

    public async Task&lt;int&gt; AddProject(ProjectsDTO dto) {
        var response = await client.PostAsJsonAsync(nameof(ProjectsController.AddProject), dto);
        if (response.IsSuccessStatusCode) {
            var message = await response.Content.ReadAsStringAsync();
            if (int.TryParse(message, out var id)) {
                return id;
            }
        }
        return -1;
    }

    public async Task&lt;int&gt; ModifyProject(ProjectsDTO dto) {
        var response = await client.PutAsJsonAsync(nameof(ProjectsController.ModifyProject), dto);
        if (response.IsSuccessStatusCode) {
            var message = await response.Content.ReadAsStringAsync();
            if (int.TryParse(message, out var id)) {
                return id;
            }
        }
        return -1;
    }

    public async Task RemoveProject(int id) {
        await client.DeleteAsync($"{nameof(ProjectsController.RemoveProject)}?id={id}");
    }

    public async Task&lt;ProjectsDTO&gt; GetProject(int id) {
        var response = await client.GetAsync($"{nameof(ProjectsController.GetProject)}?id={id}");
        if (response.IsSuccessStatusCode) {
            var message = await response.Content.ReadAsJsonAsync&lt;ProjectsDTO&gt;();
            return message;
        }
        return null; //Should consider NullObject pattern
    }

    public async Task&lt;List&lt;ProjectsDTO&gt;&gt; GetProjects() {
        var response = await client.GetAsync(nameof(ProjectsController.GetProjects));
        if (response.IsSuccessStatusCode) {
            var message = await response.Content.ReadAsJsonAsync&lt;List&lt;ProjectsDTO&gt;&gt;();
            return message;
        }
        return new List&lt;ProjectsDTO&gt;(); //Return empty list to avoid null errors.
    }
}
</code></pre>
<p><code>ProjectFavoritesService</code> Refactored</p>
<pre><code>public class ProjectFavoritesService : IProjectFavoritesService {
    private readonly HttpClient client;
    
    public ProjectFavoritesService(IConfiguration configuration) {
        if (configuration == null) { throw new ArgumentNullException(nameof(configuration)); }
        this.client = client;
    }

    public async Task AddFavorite(ProjectFavoritesDTO dto) {
        await client.PostAsJsonAsync(nameof(ProjectFavoritesController.AddFavorite), dto);
    }

    public async Task RemoveFavorite(ProjectFavoritesDTO dto) {
        await client.DeleteAsJsonAsync(nameof(ProjectFavoritesController.RemoveFavorite), dto);
    }

    public async Task&lt;List&lt;ProjectFavoritesDTO&gt;&gt; GetFavoritesByUser(string userId) {
        var response = await client.GetAsync($"{nameof(ProjectFavoritesController.GetFavoritesByUser)}?userId={userId}");
        if (response.IsSuccessStatusCode) {
            var message = await response.Content.ReadAsJsonAsync&lt;List&lt;ProjectFavoritesDTO&gt;&gt;();
            return message;
        }
        return List&lt;ProjectFavoritesDTO&gt;();
    }

    public async Task&lt;List&lt;ProjectFavoritesDTO&gt;&gt; GetFavoritesByProject(int projectId) {
        var response = await client.GetAsync($"{nameof(ProjectFavoritesController.GetFavoritesByProject)}?projectId={projectId}");
        if (response.IsSuccessStatusCode) {
            var message = await response.Content.ReadAsJsonAsync&lt;List&lt;ProjectFavoritesDTO&gt;&gt;();
            return message;
        }
        return new List&lt;ProjectFavoritesDTO&gt;();
    }
}
</code></pre>
<p>Your service functions returning lists should return an empty list to avoid null errors and you should also consider using Null Object Pattern for functions returning reference types.</p>
    </div>