<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">

<p>I'm unfamiliar with the algorithm. It looks neat, but I couldn't tell you if it's optimal or not. Most optimization comes from improving the way you go about the algorithm, so I'll suggest stuff for readability.</p>
<h1>Don't stutter</h1>
<p>When you check <code>isOutOfMap()</code> for <code>position</code> and <code>destination</code>, there's no need to break them up into multiple if statements. Same goes for <code>isBlocked()</code>.</p>
<pre class="lang-java prettyprint-override"><code>if (isOutOfMap(map, position.x, position.y)
        || isOutOfMap(map, destination.x, destination.y)
        || isBlocked(map, position.x, position.y)
        || isBlocked(map, destination.x, destination.y)) {
    return null;
}
</code></pre>
<p>While we're at it, why have overloaded methods for <code>isOutOfMap()</code> and <code>isBlocked()</code>? The ultimate result is that you're avoiding directly accessing the <code>Point</code>'s parameters <code>x</code> and <code>y</code>.</p>
<p>I would remove <code>isOutofMap(int[][], Point)</code> and <code>isBlocked(int[][], Point)</code> and opt for directly passing the <code>Point</code>'s <code>x</code> and <code>y</code> coordinates.</p>
<h1>Use an <code>Exception</code></h1>
<p>Instead of throwing an <code>Error</code>, throw an <code>Exception</code>. You can't recover from an <code>Error</code>, it terminates program execution. Throw an <code>Exception</code>.</p>
<pre class="lang-java prettyprint-override"><code>throw new IllegalStateException("Map overload");
</code></pre>
<p>If you use <code>IllegalStateException</code> you won't need to add <code>throws</code>. I'd opt for the most specific exception type you can find, or make one yourself.</p>
<h1>Use the right loops</h1>
<p>You've got <code>stepCount</code>, <code>while(!queue1.isEmpty())</code> and at the end <code>stepCount++</code>. That's a for loop. Rather than calling it <code>stepCount</code> (redundant), go with old faithful <code>i</code>. It's clear that you're counting with it.</p>
<h1>Decrease the complexity</h1>
<p><code>findPath()</code> is a pretty complex method. We should move some things to their own methods.</p>
<p>If we arrive at our destination, we can call the <code>arrived()</code> method:</p>
<pre class="lang-java prettyprint-override"><code>private Point[] arrived(int[][] map, int size, Point p) {
    Point[] optimalPath = new Point[size];

    computeSolution(map, p.x, p.y, size, optimalPath);

    resetMap(map);

    return optimalPath;
}
</code></pre>
<p>I'm sure there are other places to clean up, but you get my point.</p>
<h1>Use <code>final</code> where it makes sense</h1>
<p>While others may disagree, I prefer annotating things as <code>final</code> when they are, in fact, <code>final</code>. This lets me know if I accidentially try to modify the value, when it shouldn't really be modified.</p>
<h1>Use the right structures</h1>
<p>You're using <code>LinkedList</code> but calling it a queue. While it's true that <code>LinkedList</code> implements the <code>Queue</code> interface, as it goes:</p>
<blockquote>
<p>This class is likely to be faster than <code>Stack</code> when used as a stack and faster than <code>LinkedList</code> when used as a queue.</p>
<p><em>- <a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html" rel="nofollow noreferrer">ArrayDeque</a></em></p>
</blockquote>
<p>So we'll trust them. Instead of using <code>LinkedList</code>, we can use an <code>ArrayDeque</code>.</p>
<h1>Code</h1>
<p>Here's the code I ended up with. Hope this has helped.</p>
<pre class="lang-java prettyprint-override"><code>import java.awt.Point;
import java.util.ArrayDeque;
import java.util.Queue;

/**
 * Created by Ilya Gazman on 10/17/2018.
 */
public class BFS {

    private static final boolean DEBUG = false;

    public Point[] findPath(final int[][] map,
                            final Point position,
                            final Point destination) {
        if (isOutOfMap(map, position.x, position.y)
                || isOutOfMap(map, destination.x, destination.y)
                || isBlocked(map, position.x, position.y)
                || isBlocked(map, destination.x, destination.y)) {
            return null;
        }

        Queue&lt;Point&gt; queue1 = new ArrayDeque&lt;&gt;();
        Queue&lt;Point&gt; queue2 = new ArrayDeque&lt;&gt;();

        queue1.add(position);

        map[position.y][position.x] = -1;

        for (int i = 2; !queue1.isEmpty(); i++) {
            if (queue1.size() &gt;= map.length * map[0].length) {
                throw new IllegalStateException("Map overload");
            }

            for (Point point : queue1) {
                if (point.x == destination.x &amp;&amp; point.y == destination.y) {
                    return arrived(map, i - 1, point);
                }

                final Queue&lt;Point&gt; finalQueue = queue2;
                final int finalStepCount = i;

                lookAround(map, point, (x, y) -&gt; {
                    if (isBlocked(map, x, y)) {
                        return;
                    }

                    Point e = new Point(x, y);

                    finalQueue.add(e);

                    map[e.y][e.x] = -finalStepCount;
                });
            }

            if (DEBUG) {
                printMap(map);
            }

            queue1 = queue2;
            queue2 = new ArrayDeque&lt;&gt;();
        }

        resetMap(map);

        return null;
    }

    private static boolean isOutOfMap(final int[][] map,
                                      final int x,
                                      final int y) {
        return x &lt; 0 || y &lt; 0 || map.length &lt;= y || map[0].length &lt;= x;
    }

    private boolean isBlocked(final int[][] map, final int x, final int y) {
        final int i = map[y][x];
        return i &lt; 0 || i == 1;
    }

    private Point[] arrived(final int[][] map, final int size, final Point p) {
        final Point[] optimalPath = new Point[size];

        computeSolution(map, p.x, p.y, size, optimalPath);

        resetMap(map);

        return optimalPath;
    }

    private void resetMap(final int[][] map) {
        for (int y = 0; y &lt; map.length; y++) {
            for (int x = 0; x &lt; map[0].length; x++) {
                if (map[y][x] &lt; 0) {
                    map[y][x] = 0;
                }
            }
        }
    }

    private void printMap(final int[][] map) {
        for (final int[] r : map) {
            for (final int i : r) {
                System.out.print(i + "\t");
            }

            System.out.println();
        }

        System.out.println("****************************************");
    }

    private void computeSolution(final int[][] map,
                                 final int x,
                                 final int y,
                                 final int stepCount,
                                 final Point[] optimalPath) {
        if (isOutOfMap(map, x, y)
                || map[y][x] == 0
                || map[y][x] != -stepCount) {
            return;
        }

        final Point p = new Point(x, y);

        optimalPath[stepCount - 1] = p;

        lookAround(map, p, (x1, y1) -&gt; computeSolution(map, x1, y1, stepCount - 1, optimalPath));
    }

    private void lookAround(final int[][] map,
                            final Point p,
                            final Callback callback) {
        callback.look(map, p.x + 1, p.y + 1);
        callback.look(map, p.x - 1, p.y + 1);
        callback.look(map, p.x - 1, p.y - 1);
        callback.look(map, p.x + 1, p.y - 1);
        callback.look(map, p.x + 1, p.y);
        callback.look(map, p.x - 1, p.y);
        callback.look(map, p.x, p.y + 1);
        callback.look(map, p.x, p.y - 1);
    }

    private interface Callback {
        default void look(final int[][] map, final int x, final int y) {
            if (isOutOfMap(map, x, y)) {
                return;
            }
            onLook(x, y);
        }

        void onLook(int x, int y);
    }
}
</code></pre>
    </div>