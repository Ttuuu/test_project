<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a portability problem here, where you use a constant that's probably your local value of <code>CHAR_BIT</code>:</p>

<pre><code>for (; i &lt; sizeof(float) * 8; ++i) {
</code></pre>

<p>In passing, it would be clearer to write <code>sizeof value</code> rather than <code>sizeof (float)</code> to be clearer what needs to match (and to simplify writing a <code>double</code> version, should you need it).</p>

<p>There also seems to be an assumption on the relationship of <code>int</code> and <code>float</code> representations; if  <code>sizeof (int)</code> â‰  <code>sizeof (float)</code> then the result may be padded and/or truncated (yes, it could be padded at one end and truncated at the other, depending on the endianness of the system).</p>

<p>If you can be so specific about the systems you're targeting, you might as well go the whole hog and unroll the loop into a series of masks against constant single-bit values.</p>

<p>I don't know whether it affects the generated code (inspect and profile!), but a branchless way to expand a single bit <code>b</code> (0 or 1) into 0 or 255 respectively would be</p>

<pre><code>int i = (~b + 1) &amp; 0xFF;
</code></pre>

<p>Alternatively, if you have 8-bit <code>char</code>, you could make the mask implicit:</p>

<pre><code>unsigned char i = ~b + 1;
</code></pre>

<p>Er, on further thought, simply <code>255 * i</code> might be better.  Anyway, everything is easier if you shift the input to meet the mask rather than <em>vice versa</em>.</p>
    </div>