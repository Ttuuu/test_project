<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I figured a <a href="https://rossdrew.github.io//emulating-opcodes/" rel="nofollow noreferrer">much nicer way</a> to deal with this.  Break it down into the repeatable elements, i.e. <em>Addressing Mode</em> and <em>Operation</em> then code them all separately and immutably, combining them in the right way to get all <em>OpCode</em>s.  Effectively doing functional programming in Java.</p>

<p><strong>First</strong>: If you represent an operation, say ASL(<em>arithmatic shift left</em>) as an Enum (<code>Operation</code>), which has a parameter that is a lamba of a <code>@FunctionalInterface</code> (in this case called <code>AddressedValueInstruction</code>) and accepts two bytes and returns a result.
 (Note: <code>RoxByte</code> is just my custom implementation of a byte)</p>

<pre><code>public enum Operation implements AddressedValueInstruction {
/** Shift all bits in byte left by one place, setting flags based on the result */
    ASL((a,r,m,v) -&gt; {
        final RoxByte newValue = a.asl(v);
        r.setFlagsBasedOn(newValue);
        return newValue;
    }),

    ...

    @Override
    public RoxByte perform(Mos6502Alu alu, Registers registers, Memory memory, RoxByte value) {
        return instruction.perform(alu, registers, memory, value);
    }
</code></pre>

<p><strong>Second</strong>: If you represent the Addressing Mode as an Enum then -similar to <code>Operation</code>- have one of the Enum parameters as a <code>@FunctionalInterface</code> (called <code>Addressable</code>) lambda you can say <code>MyEnum.address(AddressedValueInstruction)</code> which will address a value, then sent it to the given operation then address the result.</p>

<pre><code>public enum AddressingMode implements Addressable {
    /** Expects no argument, operation will be performed using the Accumulator Register*/
    ACCUMULATOR("Accumulator", 1, (r, m, a, i) -&gt; {
        final RoxByte value = r.getRegister(Registers.Register.ACCUMULATOR);
        r.setRegister(Registers.Register.ACCUMULATOR, i.perform(a, r, m, value));
    }),

    ...

    @Override
    public void address(Registers r, Memory m, Mos6502Alu alu, AddressedValueInstruction instruction) {
        address.address(r, m, alu, instruction);
    }
</code></pre>

<p><strong>Third</strong>: This means you can create opcodes in the same way by creating combinations of addressing modes and operations with no specific code required, i.e. <code>ASL_ACCUMULATOR(ACCUMULATOR, ASL)</code> and it can be run with <code>ASL_ACCUMULATOR.perform()</code></p>

<pre><code>public enum OpCode implements Mos6502Instruction {
    ASL_A(0x0A, ACCUMULATOR, ASL),
    ...

    @Override
    public void perform(Mos6502Alu alu, Registers registers, Memory memory) {
        addressingMode.address(registers, memory, alu, operation::perform);
    }
</code></pre>

<p>This approach has the benefits of a class per opcode approach, without all the boiler plate.</p>
    </div>