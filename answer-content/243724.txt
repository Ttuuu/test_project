<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Don't use <code>StringBuilder</code> in <code>searchbtn_Click</code>; use a <code>Join</code>ed <code>List&lt;string&gt;</code></strong></p>
<p>You're combining a small number of small strings, so there's likely no real performance benefits in using a <code>StringBuilder</code>.</p>
<p>I would suggest creating a <code>List&lt;string&gt;</code> and then calling <code>string.Join</code> on the list:</p>
<pre><code>var parts = new List&lt;string&gt;();
if (documentName.Text.Length &gt; 0) {
    parts.Add($"document_name like '%{documentName.Text}%'");
}
if (docRef.Text.Length &gt; 0) {
    parts.Add($"document_reference like '%{docRef.Text}%'");
}
if (section.Text.Length &gt; 0) {
    parts.Add($"section ={Int32.Parse(section.Text)}");
}
(data.DataSource as DataTable).DefaultView.RowFilter = string.Join(" and ", parts);
</code></pre>
<p>I might go even further and build the controls and formatted parts into some kind of collection of pairs, which could then be filtered and the appropriate results passed into <code>Join</code>:</p>
<pre><code>var parts = new (string text, string part)[] {
        (documentName.Text, $"document_name like '%{documentName.Text}%'"),
        (docRef.Text, $"document_reference like '%{docRef.Text}%'"),
        (section.Text, $"section = {Int32.Parse(section.Text)}")
    }
    .Where(x =&gt; x.text.Length &gt; 0)
    .Select(x =&gt; x.part);
(data.DataSource as DataTable).DefaultView.RowFilter = string.Join(" and ", parts);
</code></pre>
<hr>
<p><strong>Refactor form-finding code into a separate method</strong></p>
<p>You're searching in multiple places for a form based on the value of the form's <code>Text</code> property. I would suggest you refactor this code into a separate method; something like this:</p>
<pre><code>private Form findForm(string text) {
    var found = Application.OpenForms.Cast&lt;Form&gt;().FirstOrDefault(f =&gt; f.Text == text);

    // C# 8 syntax; for earlier versions use 'if (found != null) {
    if (found is {}) {
        found.BringToFront();
        if (found.WindowState == FormWindowState.Minimized) {
            found.WindowState = FormWindowState.Normal;
        }
    }
    return found;
}
</code></pre>
<p>Then, for example in <code>addNewDocument_Click</code>, you could write:</p>
<pre><code>var found = findForm("New Document");
if (found is null) {
    var newDoc = new AddNewDocument(this);
    newDoc.Show();
}
</code></pre>
<hr>
<p>Consider putting the SQL statement in a separate <code>const</code>. This makes it easier to see what's going on at the start of your <code>using</code> block.</p>
<p>Since you're not using the inner <code>dataSet</code> variable, you can remove the innermost <code>using</code>.</p>
<p>I would also suggest making use of the new <code>using</code> statement in C# 8 if you can:</p>
<pre><code>using var conn = new MySqlConnection(ConnectionString.ConnString);
using var mySqlDataAdapter = new MySqlDataAdapter(sql, conn);
DataSet DS = new DataSet();
mySqlDataAdapter.Fill(DS);
...
</code></pre>
<p>Alternatively, use the single-statement <code>using</code> form for the outer <code>using</code>:</p>
<pre><code>using (var conn = new MySqlConnection(ConnectionString.ConnString))
using (var mySqlDataAdapter = new MySqlDataAdapter(sql, conn)) {
    DataSet DS = new DataSet();
    mySqlDataAdapter.Fill(DS);
    ...
}
</code></pre>
    </div>