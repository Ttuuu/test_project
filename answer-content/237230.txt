<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's strange to use a <em>signed</em> type for length, but that appears to be imposed on you by the problem statement, so blame a poor specification for that.</p>

<p>Despite the letters <code>std</code>, <code>&lt;bits/stdc++.h&gt;</code> is not a standard header, so you have a portability bug.  Even where it exists, it brings in far more than you need, so get used to including just the headers you need.</p>

<p>Avoid <code>using namespace std;</code> - that deprives you of the benefits of namespacing.  If you really can't type <code>std::</code> where needed, then import <em>just the names you need</em> into the <em>smallest reasonable scope</em>:</p>

<pre><code>void check2()
{
    using std::cin;
    using std::cout;
    using std::endl;
    //...
}
</code></pre>

<p>Prefer to use <em>initialisers</em> to set members - a good compiler (e.g. <code>g++ -Weffc++</code>) can warn when you forget one:</p>

<pre><code>Box()
    : Box{0, 0, 0}
{
}

Box(int length, int breadth, int height)
    : length{length},
      breadth{breadth},
      height{height}
{
}
</code></pre>

<p>We can omit the <code>Box(const Box&amp;)</code> constructor, as the compiler-generated one is identical.</p>

<p>Many methods are missing <code>const</code> qualifiers:</p>

<pre><code>int getLength() const;
int getBreadth () const;
int getHeight() const;
long long CalculateVolume() const;

bool operator&lt;(const Box&amp; b) const;
</code></pre>

<p><code>check2</code> is a completely meaningless name; choose a name that demonstrates its purpose.  Similarly, what does <code>temp</code> mean to the reader?</p>

<p>When reading input, always check the state of the stream afterwards:</p>

<pre><code>if (!(std::cin &gt;&gt; l &gt;&gt; b &gt;&gt; h)) {
    // deal with input error here
}
</code></pre>
    </div>