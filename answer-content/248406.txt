<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#include&lt;fstream&gt;
#include&lt;assert.h&gt;
</code></pre>
<p>This would be easier to read with some spaces between <code>#include</code> and the header name.</p>
<p><code>&lt;assert.h&gt;</code> is a C standard library header file. C++ supplies its own version of the C headers which put their content into the <code>std</code> namespace, and we should use that version instead. These headers have <code>c</code> added to the front, and no extension, e.g. <code>#include &lt;cassert&gt;</code>.</p>
<p>It's nice to arrange includes in alphabetical order.</p>
<p>Note also that we don't need all these headers - include only what you need.</p>
<hr>
<pre><code>using namespace std;
</code></pre>
<p>This is a bad habit to get into. It can lead to name collisions for large projects. It's best to avoid it and type the namespace where you need to (e.g. <code>std::vector</code>).</p>
<hr>
<pre><code>inline void keep_window_open() { char ch; cin &gt;&gt; ch; }
</code></pre>
<p>This function isn't used! If you're using visual studio (or the microsoft compilers in general), you can set the linker subsystem to <code>CONSOLE</code>, which keeps the console window open after the program finishes running.</p>
<hr>
<pre><code>int sum{ 0 }, number;
vector&lt;int&gt; numbers;
string word;
</code></pre>
<p>Variables should be declared as close to the point of use as possible:</p>
<ul>
<li>We don't need <code>sum</code> until much later.</li>
<li><code>number</code> can be declared inside the loop.</li>
<li><code>numbers</code> is only needed after we've opened the file (just before the loop).</li>
<li><code>word</code> isn't needed until an inner scope of the loop.</li>
</ul>
<p>Variables should not be reused (unless there is a significant performance hit - e.g. allocating large objects in memory), as it makes it harder to spot mistakes.</p>
<hr>
<pre><code>fstream file;
file.open("file1.txt", fstream::in);
</code></pre>
<p>We can use the <code>fstream</code> constructor to open the file, instead of opening the file in a separate step.</p>
<p>We could use <code>ifstream</code>, since we're only interested in file input.</p>
<hr>
<pre><code>while (true) {
    file &gt;&gt; number;
    if (file.eof()) {
        numbers.push_back(number);
        break;
    }
    else if (file.fail()) { 
        file.clear();
        file &gt;&gt; word;
    }
    else if (file.bad()) exit(1);
    else numbers.push_back(number);
}
</code></pre>
<p>There's nothing wrong with <code>while (true)</code>. It's often much clearer than trying to cram lots of logic into the loop condition.</p>
<p>There's also nothing wrong with multiple exit points, or <code>return</code> statements. We should <code>return</code> (or <code>break</code> or <code>continue</code>) as soon as possible in our code to simplify the logic and avoid unnecessary branching and nesting.</p>
<p>There are a couple of things we can simplify here:</p>
<ul>
<li>We should only have one point where we add a number to the vector (duplicate code is harder to maintain).</li>
<li>If we exit the loop with <code>break</code> or <code>return</code> (or start a new loop iteration with <code>continue</code>), we don't need to use an <code>else if</code> because the <code>else</code> is implicit. We can just use a separate <code>if</code> statement.</li>
</ul>
<p>There's also a subtle bug here. <a href="https://en.cppreference.com/w/cpp/io/basic_ios/bad" rel="nofollow noreferrer">When the <code>bad</code> bit on a stream is set, the <code>fail()</code> function also returns <code>true</code></a>! So instead of <code>exit()</code>ing, we'll try to clear the (unrecoverable) error, the <code>bad</code> bit will be set again, and we end up in an infinite loop. So we need to check <code>bad()</code> before we check <code>fail()</code>.</p>
<hr>
<p>It would be nice to print some error messages to <code>std::cerr</code> if something goes wrong (the file doesn't open, or reading from it fails).</p>
<p>It would be nice to have a comment or two where the purpose of the code isn't immediately clear (e.g. what <code>word</code> is used for).</p>
<hr>
<p>Applying this we might end up with the following:</p>
<pre><code>#include &lt;cstdlib&gt;
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main() {
    
    std::string filename = "file1.txt";
    std::ifstream file(filename);
    
    if (!file.is_open()) {
        std::cerr &lt;&lt; "failed to open file: " &lt;&lt; filename &lt;&lt; "\n";
        return EXIT_FAILURE;
    }

    std::vector&lt;int&gt; numbers;
    
    while (true) {
        
        int number;
        file &gt;&gt; number;
        
        if (file.bad()) {
            std::cerr &lt;&lt; "unrecoverable error while reading from file: " &lt;&lt; filename &lt;&lt; "\n";
            return EXIT_FAILURE;
        }
        
        if (file.fail()) {
            // input was not an integer! 
            // clear the error, and discard input until the next whitespace
            file.clear();
            std::string word;
            file &gt;&gt; word;
            continue;
        }
        
        numbers.push_back(number);
        
        if (file.eof()) {
            break;
        }
    }

    int sum = 0;
    for (int x : numbers) sum += x;
    
    std::cout &lt;&lt; sum &lt;&lt; "\n";
}
</code></pre>
    </div>