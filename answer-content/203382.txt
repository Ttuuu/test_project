<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Yes I think your usage of <code>unique_ptr</code> is correct. The only recommendation I would make is to use <code>make_unique</code> for construction:</p>

<pre><code>explicit Queue(std::size_t space) : 
    q_ptr(std::make_unique&lt;T[]&gt;(space)), 
    capacity(space) {}
</code></pre>

<p><a href="https://stackoverflow.com/a/22571331/9052753">This answer</a> provides motivation for its use. I've also used <code>explicit</code> to avoid implicit conversion from <code>size_t</code> to <code>Queue</code>. And I made use of a member initialization list.</p>

<p>I wrote the following tests using googletest:</p>

<pre><code>TEST(QueueTester, testEmpty) {
    Queue&lt;int&gt; queue(0);
    EXPECT_EQ(0, queue.size());
}

TEST(QueueTester, testSingle) {
    Queue&lt;int&gt; queue(1);
    EXPECT_EQ(0, queue.size());
    queue.push(0);
    EXPECT_EQ(1, queue.size());
}
</code></pre>

<p>But neither passed. I corrected this by using the following:</p>

<pre><code>int front_idx = 0;
</code></pre>

<p>And changing <code>push</code>:</p>

<pre><code>template&lt;typename T&gt;
void Queue&lt;T&gt;::push(T value)
{
    if (back_idx - front_idx + 1 == capacity)
    {
        std::cerr &lt;&lt; "Queue full\n";
        return;
    }
    q_ptr[++back_idx] = value;
}
</code></pre>

<p>I changed <code>front</code> and <code>back</code> to return references to the elements to allow the user to modify the contents. I also wrote overloads for returning <code>const</code> references to allow reading when the <code>Queue</code> is passed by <code>const</code> reference:</p>

<pre><code>template&lt;typename T&gt;
T &amp;Queue&lt;T&gt;::front()
{
    return q_ptr[front_idx];
}

template&lt;typename T&gt;
T &amp;Queue&lt;T&gt;::back()
{
    return q_ptr[back_idx];
}

template&lt;typename T&gt;
const T &amp;Queue&lt;T&gt;::front() const
{
    return q_ptr[front_idx];
}

template&lt;typename T&gt;
const T &amp;Queue&lt;T&gt;::back() const
{
    return q_ptr[back_idx];
}
</code></pre>

<p>I further noticed that <code>push</code>, given a nonzero <code>front_idx</code>, will write past the end of the array pointed to by <code>q_ptr</code>. I took inspiration from <a href="https://www.geeksforgeeks.org/queue-set-1introduction-and-array-implementation/" rel="nofollow noreferrer">this page</a> and modified the code to store elements circularly around the array. Here is the final implementation:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;cstddef&gt;

template&lt;typename T&gt;
class Queue
{
    std::unique_ptr&lt;T[]&gt; q_ptr;
    int front_idx = 0;
    int back_idx = -1;
    std::size_t _size = 0;
    std::size_t capacity;
public:
    explicit Queue(std::size_t space) :
        q_ptr(std::make_unique&lt;T[]&gt;(space)),
        capacity(space)
    {
    }
    void push(T value);
    void pop();
    bool full();
    bool empty();
    T &amp;front();
    T &amp;back();
    const T &amp;front() const;
    const T &amp;back() const;
    std::size_t size() const;
};

template&lt;typename T&gt;
void Queue&lt;T&gt;::push(T value)
{
    if (full())
    {
        std::cerr &lt;&lt; "Queue full\n";
        return;
    }
    back_idx = (back_idx + 1) % capacity;
    q_ptr[back_idx] = value;
    ++_size;
}

template&lt;typename T&gt;
bool Queue&lt;T&gt;::full()
{
    return _size == capacity;
}

template&lt;typename T&gt;
void Queue&lt;T&gt;::pop()
{
    if (empty())
    {
        std::cerr &lt;&lt; "Empty queue\n";
        return;
    }
    q_ptr[front_idx] = T{};
    front_idx = (front_idx + 1) % capacity;
    --_size;
}

template&lt;typename T&gt;
bool Queue&lt;T&gt;::empty()
{
    return _size == 0;
}

template&lt;typename T&gt;
T &amp;Queue&lt;T&gt;::front()
{
    return q_ptr[front_idx];
}

template&lt;typename T&gt;
T &amp;Queue&lt;T&gt;::back()
{
    return q_ptr[back_idx];
}

template&lt;typename T&gt;
const T &amp;Queue&lt;T&gt;::front() const
{
    return q_ptr[front_idx];
}

template&lt;typename T&gt;
const T &amp;Queue&lt;T&gt;::back() const
{
    return q_ptr[back_idx];
}

template&lt;typename T&gt;
std::size_t Queue&lt;T&gt;::size() const
{
    return _size;
}
</code></pre>
    </div>