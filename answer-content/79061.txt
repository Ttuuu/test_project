<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You shouldn't put the input reading and creating the array into one method, because this is violating the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow">single responsibility principle</a> which   </p>

<blockquote>
  <p>Martin defines a responsibility as a reason to change, and concludes that a class or module should have one, and only one, reason to change. As an example, consider a module that compiles and prints a report. Such a module can be changed for two reasons. First, the content of the report can change. Second, the format of the report can change. These two things change for very different causes; one substantive, and one cosmetic. The single responsibility principle says that these two aspects of the problem are really two separate responsibilities, and should therefore be in separate classes or modules. It would be a bad design to couple two things that change for different reasons at different times.</p>
</blockquote>

<p>SRP means that each method should be responsible for one thing only. So your method is doing to much. It is reading input from the user and also is creating the array.  </p>

<hr>

<p>Methods should be named by using meaningful names. This isn't the case for <code>TestMethod</code>.  </p>

<hr>

<p><code>charReplace</code> isn't a good name, because you don't replace but initialize each element.  </p>

<hr>

<p>Basically the using of a <code>for</code> loop is the best way to achieve the desired goal. Another way would be to use the <code>String</code>'s overloaded constructor and then calling <code>ToCharArray()</code> on the created string.  </p>

<pre><code>public static char[] GetInitializedArray(int length, char initialValue)
{
    return (new String(initialValue, length)).ToCharArray();
}  
</code></pre>

<hr>

<p>By using a <code>for</code> loop this method could be made generic. In this way you could use the method to create initialized arrays of any <code>type</code> you need.    </p>

<p>This would look like  </p>

<pre><code>public static T[] GetInitializedArray&lt;T&gt;(int length, T initialValue)
{
    T[] result = new T[length];
    for (int i = 0; i &lt; length; i++)
    {
        result[i] = initialValue;
    }
    return result;
}  
</code></pre>

<p>and can be used like  </p>

<pre><code>char[] values = GetInitializedArray&lt;char&gt;(10, 'Y');  
</code></pre>
    </div>