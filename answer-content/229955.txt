<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would suggest following:</p>

<ol>
<li>Place operations to the objects that contain data for this operation. It will improve encapsulation and allow more flexible code reuse.
Also it will be easy to test such implementation because of small methods.  </li>
<li>Use more convenient structure. In this case <code>Map&lt;String, LoanAccount&gt;</code> (map id to loanAccount) instead of <code>List&lt;LoanAccount&gt;</code></li>
</ol>

<p>As you can see in this case service contains only required logic (how to react on loan absence). It is easy to read, test and understand.</p>

<p><strong>LoanAccountService.java</strong></p>

<pre><code>public class LoanAccountService{

    private Bank bank;

    public LoanAccountService(Bank bank) {
        this.bank = bank;
    }

    public LoanAccount update(LoanAccount loanAccount) {
        if (!bank.updateLoanAccount(loanAccount)) {
            throw new IllegalArgumentException("The object does not exist.");
        }
        return loanAccount;
    }
}
</code></pre>

<p><strong>Bank.java</strong></p>

<pre><code>@Getter
@Setter
public class Bank {
    private Map&lt;String, LoanAccount&gt; loanAccounts;

    public boolean updateLoanAccount(LoanAccount loanAccount) {
        LoanAccount loan = loanAccounts.get(loanAccount.getId());
        if (loan != null) {
            loan.update(loanAccount);
            return true;
        }
        return false;
    }
}
</code></pre>

<p><strong>LoanAccount.java</strong></p>

<pre><code>@Getter
@Setter
public class LoanAccount {
    private String id;
    private Integer numberOfInstallments;
    private LoanAccountType type;
    private Date creationDate;
    private BigDecimal loanAmount;

    public void update(LoanAccount loanAccount) {
        this.setCreationDate(loanAccount.getCreationDate());
        this.setLoanAmount(loanAccount.getLoanAmount());
        this.setNumberOfInstallments(loanAccount.getNumberOfInstallments());
        this.setType(loanAccount.getType());
    }
}
</code></pre>

<p>If you can't use this approach, you could made a small refactoring of the service (less code and "if conditions" are good things):</p>

<pre><code>public LoanAccount update(LoanAccount loanAccount) {
    LoanAccount account = bank.getLoanAccounts()
            .stream()
            .filter(la -&gt; la.getId().equals(loanAccount.getId()))
            .findAny()
            .orElseThrow(() -&gt;  new IllegalArgumentException("The object does not exist."));
    account.setCreationDate(loanAccount.getCreationDate());
    account.setLoanAmount(loanAccount.getLoanAmount());
    account.setNumberOfInstallments(loanAccount.getNumberOfInstallments());
    account.setType(loanAccount.getType());
    return account;
}
</code></pre>

<p>Also I think you should return updated loan account.</p>
    </div>