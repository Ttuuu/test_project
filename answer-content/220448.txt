<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wow, this is a large amount of code. I appreciate your work. I can't provide a complete review by now, so this answer will be updated gradually.</p>

<p>I assume C++17. I use <a href="https://timsong-cpp.github.io/cppwp/n4659/" rel="nofollow noreferrer">N4659</a> as a reference.</p>

<p>You don't provide your code for <code>"kmemory.h"</code>. In a <a href="https://codereview.stackexchange.com/questions/220433/stdvector-implementation?noredirect=1#comment425936_220433">comment</a>, you mentioned that it just contains the move range algorithms. I can't review it, so I will assume that it is correct.</p>

<h1>Bugs</h1>

<ol>
<li><p><code>pointer</code> (i.e., <code>typename std::allocator_traits&lt;Allocator&gt;::pointer</code>) may not be a random-access iterator. I would suggest directly using <code>T*</code> for <code>iterator</code>. Similarly for <code>const_iterator</code>.</p>

<pre><code>using iterator = T*;
using const_iterator = const T*;
</code></pre></li>
<li><p>You did not implement constructors. You say they are trivial to the implementation and they are not complete, but implementing some of them are actually quite a challenge (for example, the copy and move operations with 100% conforming behavior) ;-)</p></li>
<li><p>Your <code>const</code> version of <code>at</code> is an infinite loop.</p>

<pre><code>const_reference at(size_type n) const
{
  return at(n);
}
</code></pre></li>
</ol>

<h1>Suggestions</h1>

<ol>
<li><p>Your <code>allocator_base</code> attempts to implement the empty-base optimization for derivable-from allocators. This is a good idea.</p>

<p>For me, the deriving version makes more sense as the primary template because most allocators should sensibly be derivable from. Moreover, you use <code>enable_if</code> for dispatch. That's a bit overkill. I would change your code to:</p>

<pre><code>// deriving version
template &lt;typename T, bool&gt;
struct allocator_base { /* ... */ };

// non-deriving version
template &lt;typename T&gt;
struct allocator_base&lt;T, std::is_final_v&lt;T&gt;&gt; { /* ... */ };
</code></pre></li>
<li><p><code>shrink_to_fit</code> is a non-binding request, but is it really a good idea to make it a no-op? ;-) It is actually trivial to implement.</p></li>
<li><p>In <code>pop_back</code>, you use a runtime <code>if</code> to determine the trivial destructibility of the element type. Why not decide it at compile time with the help of <code>if constexpr</code>?</p>

<pre><code>if constexpr (!std::is_trivially_destructible_v&lt;T&gt;)
  back().~T();
</code></pre></li>
</ol>
    </div>