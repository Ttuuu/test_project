<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use <code>hypot()</code></h1>

<p>C has a standard library function to calculate the hypothenuse of a right-angled triangle. You can use it to calculate a distance this way:</p>

<pre><code>int DistTo(Point &amp; other) const {
    return std::hypot(other.x - x, other.y - y);
}
</code></pre>

<h1>Prefer <code>'\n'</code> instead of <code>std::endl</code></h1>

<p>Prefer using <code>'\n'</code> to end a line. <code>std::endl</code> is equivalent to <code>'\n'</code> plus a flush of the output buffer. Flushing unnecessarily can lead to bad performance.</p>

<h1>Overload <code>operator&lt;&lt;</code> to add support for printing in your own classes</h1>

<p>It's always nicer if you can make your classes work like existing types in the standard library. This includes printing them. Instead of having to call a member function named <code>Print()</code>, it's much nicer if you could just write:</p>

<pre><code>Point pt;
...
std::cout &lt;&lt; "Move to: " &lt;&lt; pt &lt;&lt; '\n';
</code></pre>

<p>To do this, you need to add an <code>operator&lt;&lt;</code> overload outside the class. To make it able to access your class's private members, declare it as a friend, like so:</p>

<pre><code>struct Point {
    ...
    friend std::ostream &amp;operator&lt;&lt;(ostream &amp;os, const Point &amp;point);
};

std::ostream &amp;operator&lt;&lt;(ostream &amp;os, const Point &amp;point) {
    os &lt;&lt; '(' &lt;&lt; point.x &lt;&lt; ", " &lt;&lt; point.y &lt;&lt; ')';
}
</code></pre>

<p>Your class doesn't have private member variables, so the <code>friend</code> declaration is not necessary, but it doesn't hurt either.</p>

<h1>Wrong use <code>std::shared_ptr</code> for <code>connections</code></h1>

<p>Each <code>Node</code> can have connections to multiple other nodes. If you want to use <code>std::shared_ptr</code> to ensure proper ownership tracking, then <code>connections</code> must be a <code>std::vector</code> of <code>std::shared_ptr&lt;Node&gt;</code>s, not a <code>std::shared_ptr</code> of a <code>std::vector&lt;Node&gt;</code>. Otherwise, only the list structure itself is tracked. This is particularly important because copying a <code>Node</code> in your case no longer copies the list of connections, but just shares a reference to a single list.</p>

<p>Related to this:</p>

<h1>Make the constructor of <code>Node</code> take a <code>std::shared_ptr&lt;Node&gt; parent</code></h1>

<p>Your constructor of <code>class Node</code> takes a raw pointer to a parent node, and then stores it into a <code>std::shared_ptr&lt;Node&gt;</code>. This is problematic, because you can write the following code:</p>

<pre><code>Node child;

{
    Node parent;
    child = Node({}, &amp;parent); // child.parent points to parent
} // lifetime of parent ends here, child.parent is now invalid
</code></pre>

<p>You have to ensure you have a <code>std::shared_ptr</code> of the parent node before calling the constructor of the child. Change the constructor to:</p>

<pre><code>Node(Point position = {}, std::shared_ptr&lt;Node&gt; parent = {}): position(position), parent(parent) {};
</code></pre>

<p>Of course, this means you need to have shared pointers from the very start. So <code>Astar()</code> should get a vector of shared pointers:</p>

<pre><code>std::vector&lt;Point&gt; Astar(Point &amp;start_pos, Point &amp;end_pos, const std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;all_nodes)
{
    std::shared_ptr&lt;Node&gt; start_node;
    std::shared_ptr&lt;Node&gt; end_node;

    for (auto &amp;node: all_nodes)
    {
        ...
    }
    ...
}
</code></pre>

<p>If you want to avoid this, then alternatively:</p>

<h1>Consider adding a <code>class Graph</code> that owns the <code>Node</code>s</h1>

<p>To avoid having to use <code>std::shared_ptr</code> everywhere, but to ensure pointers to parent nodes are always valid, consider adding a <code>class Graph</code> that manages the collection of <code>Node</code>s. Internally, it could just use a <code>std::vector&lt;Node&gt;</code> to store the nodes; you just have to make sure that when you add and remove nodes from a <code>Graph</code>, that connections and parent/child relationships have been properly deleted beforehand.</p>

<p>If you have a <code>class Graph</code>, you can make <code>Astar()</code> a member function of it. It would look like:</p>

<pre><code>class Graph {
    std::vector&lt;Node&gt; nodes;

public:
    Node &amp;AddNode(Point position) {
        nodes.emplace_back(position);
        return nodes.back();
    }

    void AddConnection(Node &amp;a, Node &amp;b) {
        a.AddConnection(b);
    }

    ...

    std::vector&lt;Point&gt; Astar(Point &amp; start_pos, Point &amp; end_pos);
};

std::vector&lt;Point&gt; Graph::Astar(Point &amp; start_pos, Point &amp; end_pos)
{
    // Find the start and end nodes
    Node start_node;
    Node end_node;

    for (auto &amp;node: nodes)
    {
        ...
    }

    ...
}
</code></pre>

<h1>Make <code>Astar()</code> take start and end <code>Node</code>s instead of <code>Point</code>s</h1>

<p>Instead of telling <code>Astar()</code> the start and end position, why not tell it the start and end <code>Node</code>s to use? This avoids having to scan the whole list of nodes to find the ones matching the given positions, and avoids potential issues if a given position matches zero or more than one <code>Node</code>. So:</p>

<pre><code>std::vector&lt;Point&gt; Astar(Node &amp;start_node, Node &amp;end_node, std::vector&lt;Node&gt; all_nodes);
</code></pre>

<h1>Avoid copying variables unnecessarily</h1>

<p>There's a lot of copying going on in your code, that might not be necessary. In particular, instead of making copies of <code>Node</code>s all the time, it might be more efficient to just keep references or pointers to the elements of <code>all_nodes</code>.</p>

<p>Note that some information from the A* algorithm is stored in <code>struct Node</code>. So if you do use references/pointers instead of copies, then you have to ensure only one thread is running <code>Astar()</code> on a given vector of <code>Node</code>s at any time.</p>

<h1>Use <code>std::any_of()</code> instead of <code>std::find_if()</code> if you only need a boolean result</h1>

<p>To check if a child is on the closed list, you can use <code>std::any_of()</code> instead of <code>std::find_if()</code>:</p>

<pre><code>if (std::any_of(closed_list.begin(), closed_list.end(), [&amp;child](Point &amp; pt){return pt == child.position);}))
    continue;
</code></pre>

<p>This saves a bit of typing. The same goes for checking if a child is on the closed list.</p>
    </div>