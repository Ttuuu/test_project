<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Preliminary thoughts</h1>

<p>The script looks decent and makes good use of <a href="/questions/tagged/ecmascript-6" class="post-tag" title="show questions tagged 'ecmascript-6'" rel="tag">ecmascript-6</a> features like arrow functions and template literals. I like the use of the chalk and Ora plugins. </p>

<h1>Main questions</h1>

<blockquote>
  <p><em>I'd like to know if there is any other way for me to create, start and stop my spinners which doesn't involve creating 3 separate ones for various 'checkpoint' sections of my code.</em></p>
</blockquote>

<p>I admit that I wasn't familiar with the library <a href="https://github.com/sindresorhus/ora" rel="nofollow noreferrer">ora</a> but after reading over the API I see that a single spinner can be used for all three lines. See the sample below, where the first spinner is re-used in place of <code>secondSpinner</code>:</p>

<pre><code>const spinner = new Ora(
    `Creating a new React project named: ${name} ... this may take a while\n`
);
spinner.start(); 

// 4. Create a create-react-app project
  execShellCommand(`npx create-react-app ${name}`).then(() =&gt; {
    spinner.succeed();
    console.log(`Project ${name} created!\n\n`);

    // 5. Remove the existing .gitignore file from that project folder
    spinner.start(`Removing the original ${name}/.gitignore file...\n`);
</code></pre>

<p>And then after the gitignore file is unlinked, that spinner can be referenced again</p>

<pre><code>  spinner.succeed();
  console.log(`Original ${name}/.gitignore file removed!\n\n`);

  // 6. Place new .gitignore file in that project directory
  spinner.start(`Placing new .gitignore file...\n`);
</code></pre>

<blockquote>
  <p><em>And whether my use of <code>exec()</code> is efficient/ best suited for this kind of CLI app.</em></p>
</blockquote>

<p>I looked at <a href="https://stackabuse.com/executing-shell-commands-with-node-js/" rel="nofollow noreferrer">this post</a> which mentions using <code>exec()</code> as well as <code>spawn()</code>:</p>

<blockquote>
  <h3>When to use exec and spawn?</h3>
  
  <p>The key difference between <code>exec()</code> and <code>spawn()</code> is how they return the data. As <code>exec()</code> stores all the output in a buffer, it is more memory intensive than <code>spawn()</code>, which streams the output as it comes.</p>
  
  <p>Generally, if you are not expecting large amounts of data to be returned, you can use <code>exec()</code> for simplicity. Good examples of use-cases are creating a folder or getting the status of a file. However, if you are expecting a large amount of output from your command, then you should use <code>spawn()</code>. A good example would be using command to manipulate binary data and then loading it in to your Node.js program.</p>
</blockquote>

<p>You could consider switching the code to using <code>spawn()</code> but it appears the argument handling may need to be altered. </p>

<p>Another thing to consider would be instead of deleting the gitignore file, just overwrite it with the contents of the downloaded file - then if that happens to fail then it wouldn't be deleted.</p>

<h1>Other feedback</h1>

<h2>Error handling</h2>

<p>It would be wise to add error handling functions - for example, chain on a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch" rel="nofollow noreferrer"><code>.catch()</code></a> after the <code>execShellCommand.then()</code> call.</p>

<h2>Callback hell</h2>

<p>The code becomes <em>not-so-shallow</em> i.e. has a few indentation levels towards the final steps. <a href="http://callbackhell.com/" rel="nofollow noreferrer">CallbackHell.com</a> has some tips to avoid this - e.g. naming those anonymous callback functions, just as you did with <code>execShellCommand()</code>. This may require passing parameters - can be done with <code>Function.bind()</code>.</p>

<h2>Constants</h2>

<p>These can be used for values that never change</p>

<blockquote>
<pre><code>`https://raw.githubusercontent.com/github/gitignore/master/Node.gitignore`,
</code></pre>
</blockquote>

<p>This seems like a good candidate for a constant declared at the beginning of the code. While it appears it is only used in one spot, it is a bit long to have sitting in the code, and if it ever needs to be updated in the future, it would be easier to find it at the top of the code instead of buried in the code.</p>

<p>I would call that constant something like <code>GITHUB_NODE_GITIGNORE_PATH</code> - which isn't exactly brief but it is shorter than the entire URL.</p>

<h2>Other uses for <code>const</code></h2>

<p>Other variables that don't get re-assigned can be declared with <code>const</code> as well, even if they aren't really a <em>constant</em> - e.g. arrays that get pushed into, objects that get mutated. This helps avoid accidental re-assignment. Notice in the sample code I gave above to re-use a single spinner I used <code>const spinner</code>.</p>

<h2>Readline closed in two spots</h2>

<p>I see <code>readline.close();</code> in two spots - one within the callback function to <code>newGitignore.on("finish")</code> as well as one at the end of the callback function to </p>

<blockquote>
<pre><code>readline.question(`What is your project name? `
</code></pre>
</blockquote>

<p>Perhaps only one call should exist - possibly in a <code>.finally()</code> callback.</p>
    </div>