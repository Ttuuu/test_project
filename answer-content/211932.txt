<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Use capital letters with underscores for constants <a href="https://pep8.org/#constants" rel="nofollow noreferrer">https://pep8.org/#constants</a>
There is no need to wrap alphabet string into parentheses:</li>
</ol>

<pre><code>ALPHABET = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-_.;#@"
LENGTH = 6
</code></pre>

<ol start="2">
<li><p>Expression <code>str(pw)</code> does nothing so you can remove it. You probably meant <code>pw = str(pw)</code> but it is redundant since <code>pw</code> already is <code>str</code></p></li>
<li><p>You do not need <code>array</code> variable at all, just iterate over input file line by line. Also, unpacking is more readable:</p></li>
</ol>

<pre><code>    for line in ins:
        user, password, *rest = line.split(":")
        users.append(user)
        passwd.append(password)
</code></pre>

<ol start="4">
<li><p>Since you ignore passwords <code>"*"</code> and <code>"!"</code> it is better to filter them out when reading from file.</p></li>
<li><p>Since <code>ins</code> is not used after generating <code>users</code> and <code>passwd</code> lists you do not need to place rest of code inside <code>with</code> block. Actually, the first block may look like:</p></li>
</ol>

<pre><code>#getting passwords and username from shadow file
with open("shadow_test", "r") as ins:
    users = []                                                         
    passwd = []
    for line in ins:
        user, password, *rest = line.split(":")
        if password not in ('*', '!'):
            users.append(user)
            passwd.append(password)
</code></pre>

<ol start="6">
<li><p>Why do you need <code>for _ in range(12)</code> loop? Just to make the program 12 times slower? Remove it.</p></li>
<li><p>Do not use names of built-in funciton names for variables, like <code>list</code>. BTW, why do you need it at all? Just iterate over all possible words and look for their hash in <code>passwd</code>:</p></li>
</ol>

<pre><code>passwords = (''.join(word) for word in itertools.product(ALPHABET, repeat=LENGTH))
for pswd in passwords:
    # calculate hash of pswd and if it is equal to one in passwd print it
</code></pre>

<ol start="8">
<li>When you compare generated hash with elements of passwd you do not need to iterate over all usernames and print them all! Actually it is better to make "password hash" -&gt; "username" dictionary so you can check if <code>generatedpassword</code> is one of given password hashes faster (because checking that <code>dict</code> has a key generally is faster than checking each element of array):</li>
</ol>

<pre><code>with open("shadow_test", "r") as ins:
    data = dict()
    for line in ins:
        username, password, *rest = line.split(":")
        if password not in ('*', '!'):
            data[password] = username

password_hash = md5hash("qwerty")  # assume it is a function for calculating md5
if passwod_hash in data:
    print("qwerty is password of", data[password_hash])
</code></pre>

<ol start="9">
<li>It is probably better to remove <code>"$1$"</code> from stored records rather than add it to each calculated hash:</li>
</ol>

<pre><code>if password not in ('*', '!'):
    assert password.startswith("$1$"), "Expect password records to begin with $1$"
    data[password[3:]] = username  # remove $1$ 
</code></pre>

<p>So the whole solution may look like:</p>

<pre><code>import hashlib
import itertools


def md5hash(char_sequence):
    string = ''.join(char_sequence)
    hash_object = hashlib.md5(string.encode())
    return hash_object.hexdigest()


# possible characters in user password
ALPHABET = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-_.;#@"
# password length
LENGTH = 6

# getting passwords and username from shadow file
with open("shadow_test", "r") as ins:
    data = dict()  # hash -&gt; username mapping from shadow file
    for line in ins:
        username, password, *rest = line.split(":")
        if password not in ('*', '!'):
            data[password[3:]] = username  # remove $1$

# bruteforce
for word in itertools.product(ALPHABET, repeat=LENGTH):
    generated_hash = md5hash(word)
    if generated_hash in data:
        print('The password of user', data[generated_hash], 'is:', word)
```
</code></pre>
    </div>