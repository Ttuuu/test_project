<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An alternative approach would fully leverage the many standard algorithms and containers in the standard library.  Here's one such mechanism:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;unordered_map&gt;
#include &lt;algorithm&gt;

int main()
{
    // test vector to demonstrate solution
    const std::vector&lt;int&gt; input{1,2,3,4,2,3,4,1,1,2,1,2,1,2,1,3,5};
    std::unordered_map&lt;int, int&gt; count;
    for (int i : input) {
        ++count[i];
    }
    std::vector&lt;std::pair&lt;int, int&gt;&gt; pairs;
    pairs.reserve(count.size());
    std::copy(count.begin(), count.end(), std::back_inserter(pairs));
    int k = 3;
    std::partial_sort(pairs.begin(), pairs.begin()+k, pairs.end(),
          [](const std::pair&lt;int, int&gt; &amp;a, const std::pair&lt;int, int&gt; &amp;b) {
                 return a.second &gt; b.second;
           }
    );
    for (int i = 0; i &lt; k; ++i) {
        std::cout &lt;&lt; pairs[i].first &lt;&lt; ", " &lt;&lt; pairs[i].second &lt;&lt; '\n';
    }
}
</code></pre>

<h2>Output</h2>

<p>The output to this sample program is the top <code>k</code> data items with their associated count:</p>

<pre><code>1, 6
2, 5
3, 3
</code></pre>

<h2>Key points:</h2>

<h3>Use unordered containers for efficiency</h3>

<p>One can use either a <code>std::map</code> as you have done, or a <code>std::unordered_map</code> as in this code.  The latter often confers a performance advantage when ordering is not needed, as in this application.</p>

<h3>Use <code>std::partial_sort</code></h3>

<p>We can use <a href="http://en.cppreference.com/w/cpp/algorithm/partial_sort" rel="noreferrer"><code>std::partial_sort</code></a> with a custom predicate to have the program only order the first <code>k</code> entries in the list.  This can be faster than sorting the entire list when only a fraction of the list needs to be sorted.</p>

<h3>Use <code>std::copy</code> where practical</h3>

<p>Rather than copy the entries piece by piece, if you can use <code>std::copy</code>, it's both more clear to readers of the code and sometimes more efficient.</p>

<h3>Use existing data structures where practical</h3>

<p>The original code uses a custom <code>Node</code> class, but it's essentially no different from the <code>std::pair&lt;int, int&gt;</code> that is natively used by <code>std::map</code> and <code>std::unordered_map</code>.</p>

<h3>Use <code>reserve</code> to avoid dynamically resizing</h3>

<p>The revised code uses <code>reserve</code> to allocate exactly the number of items needed in the <code>std::vector</code>.  This can save time and memory because it avoids reallocation and copying that happens when such data structures must be expanded as items are added.</p>
    </div>