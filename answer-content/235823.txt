<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Since <a href="https://stackoverflow.com/questions/11020172/are-char-argv-arguments-in-main-null-terminated">command line arguments are null-terminated</a>, we can avoid <code>strlen()</code> entirely by just running through the string until we hit <code>'\0'</code>; this also gets rid of <code>contin</code> and <code>i</code></li>
<li><code>(*p &gt; 0x2F &amp;&amp; *p &lt; 0x3A)</code> isn't very obvious, I'd just use <code>'0'</code> and <code>'9'</code> to make it easier to understand the intention and to be consistent with the rest of the code</li>
<li>You could use <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code> instead of <code>0</code> and <code>1</code> respectively</li>
<li>For consistency, I'd replace your call to <code>exit()</code> with a simple <code>return</code> </li>
<li>I'd remove the <code>amount:</code> part of the print; it should be clear from the context (running this program) what the output actually is; this would also make processing the output easier</li>
</ul>

<p>Putting it all together, we end up with this short piece:</p>

<pre><code>int main(int argc, char *argv[]) {
    if (argc &lt; 2)
        return EXIT_FAILURE;

    char *p = argv[1];
    int amount = 0;

    while (*p) {
        if (*p &lt; '0')
            return EXIT_FAILURE;
        if (*p &gt; '9')
            return EXIT_FAILURE;

        amount = (amount * 10) + (*p++ - '0');
    }

    fprintf(stdout, "%i\n", amount);
    return EXIT_SUCCESS;
}
</code></pre>

<p>Note, however, that this doesn't account for:</p>

<ul>
<li>negative numbers (starting with a <code>-</code>)</li>
<li>positive numbers starting with a <code>+</code></li>
<li>any leading whitespace</li>
</ul>

<p>Furthermore:</p>

<ul>
<li>If the input starts with a number and has a letter following sometimes later, it will <code>break</code> out and print the number it has found until then; but if the first character found is a letter, the program prints <code>0</code> and reports success, which could be by design, but could also be considered a bug</li>
<li>The use of <code>*p++</code> can be a bit dangerous if this was code shared with less experienced programmers, as simply changing it to <code>++*p</code> would increase the <em>value</em> pointed to instead of the pointer itself; changing it to <code>*(p++)</code> might help</li>
<li>While this comes down to taste, I would argue to <em>always</em> use curly braces, even for one-liners: otherwise, adding another line later would break the code; also consistency is a plus</li>
<li>Adding support for leading whitespace is easy and also supports my previous point, as missing brackets would break the program:</li>
</ul>

<pre><code>    if (*p == ' ') {
        *p++;
        continue;
    }
</code></pre>

<ul>
<li>If you don't want to implement support for negative numbers, it might be reasonable to change the type of <code>amount</code> to <code>unsigned</code> or - even better - <a href="https://en.wikipedia.org/wiki/C_data_types" rel="nofollow noreferrer"><code>unsigned long long</code></a>, which would give you a possible range of [0, +18446744073709551615]</li>
<li>Naive handling of negative integers would be quite easy to implement (but note <a href="https://codereview.stackexchange.com/a/235825/216848">Roland's answer</a> for caveats with this):</li>
</ul>

<pre><code>    int sign = 1;

    if (*p == '-') {
        sign = -1;
        *p++;
    }

    /* loop */

    amount *= sign;
</code></pre>
    </div>