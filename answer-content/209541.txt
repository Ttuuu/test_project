<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is my solution with complexity: time <span class="math-container">\$O(N*log(N))\$</span>, space <span class="math-container">\$O(1)\$</span>.</p>

<pre><code>static double findGrantsCap(double[] grantsArray, double newBudget) {
if (grantsArray == null || 
    grantsArray.length == 0 || 
    (grantsArray.length == 1 &amp;&amp; grantsArray[0] &lt;= newBudget)) {
  return newBudget;
}

Arrays.sort(grantsArray);
double cap = newBudget / grantsArray.length;
double allocated = 0.0;

for (int i=0; i&lt;grantsArray.length; i++) {
 double currentRequestValue = grantsArray[i];
 if (currentRequestValue &lt;= cap) {
   allocated += currentRequestValue;
   int divisor = (grantsArray.length - i - 1);
   // If last index in the array is below the cap divisor will be "0"
   // It means that all the items in the carousel can be allocated as they are
   cap = divisor != 0 ? (newBudget - allocated) / divisor : currentRequestValue;
 }
}

return cap;
}
</code></pre>
    </div>