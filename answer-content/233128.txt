<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thanks for sharing your code.</p>

<p>Unfortunately your code has a lot of issues to be addressed:</p>

<h1>Code Style</h1>

<h2>Code format</h2>

<p>Your code looks messy because you don't use indentation to structure blocks.
Learn how to invoke the <em>auto formatter</em> of your IDE or how to apply it automatically 
when saving.</p>

<h2>Comments</h2>

<p>You have lots of <em>inline comments</em> that repeat what the code does.
Such comments are useless at best, dangerous in long living projects since the tend 
to stay unchanged while the code develops. 
This way they turn into lies because they now say something dirrerent then the code 
itself.</p>

<p>So write <em>inline comments</em> that explain <strong>why</strong> the code is like it is. </p>

<p>When ever you feel you need an <em>inline comment</em> think twice if better <em>identifier names</em> 
could support better readability.</p>

<h2>Naming</h2>

<p>Finding good names is the hardest part in programming. So always take your time to think about your identifier names.</p>

<h3>Naming conventions</h3>

<p>Please keep to the <a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">Java Naming Conventions</a>.
This dies nt only include the <em>camelCase</em> style, but also how identifiers are "constructed". 
E.g. names of methods should start with a <em>verb</em> and explain what their main task is.</p>

<p>example:<br>
your method <code>eachBallPath()</code> should better be <code>printPathsOfAllBalls()</code> or<br>
method <code>ballInSlot()</code> should better be <code>findFrequencyOfRight()</code>.</p>

<h3>Choose names from the problem domain</h3>

<p>Always use expressive names for your identifiers taken from the <em>problem domain</em>, not from the technical solution.
An example from you code is the variable <code>currentLetter</code> which would better be <code>currentTurn</code>.</p>

<h3>Avoid Single letter names</h3>

<p>Do not use single letter names or abbreviations. 
There are only few exceptions like loop variables or <strong>very</strong> common  abbreviations. 
While reading this code your brain has to do additional work to resolve single letters to their meaning. </p>

<p>E.g. you have a valiable <code>R</code> that could be <code>rightTurn</code>.</p>

<p>In conjunction with the previous issue the better code would read as:</p>

<pre><code>    int frequencyOfRight = 0;
    char rightTurn = 'R';
    for (int i = 0; i &lt; path.length(); i++) {
        char currentTurn = path.charAt(i); 
        if (currentTurn == rightTurn)
            frequencyOfRight++;
    }
</code></pre>

<h1>General Coding</h1>

<h2>avoid magic numbers</h2>

<p>Your code uses lots of literal values. 
Usually this applies to <em>numbers</em> only but I for myself extend this to <em>Strings</em> too.
You should create <em>constants</em> for them with expressive names to make your code more 
readable. </p>

<p>example:</p>

<pre><code>private static final String RIGHT_TURN = "R";
private static final String LEFT_TURN = "L";
private static final double TURN_RIGHT_CHANCE = 0.5;

// ... 

    String path = new String(""); 
    for (int i = 0; i &lt; rowsOfNails; i++) { 
        double random = Math.random(); 
        if (random &lt; TURN_RIGHT_CHANCE)
            path = path + LEFT_TURN;
        if (random &gt;= TURN_RIGHT_CHANCE)
            path = path + RIGHT_TURN;
    }
    return path;
</code></pre>

<h2>avoid unnecessary evaluations</h2>

<p>The code above has another issue: you have two <code>if</code> condition to separate the opposit 
cases. 
Why donn't simply use the <code>else</code> key word?</p>

<pre><code>        if (random &lt; TURN_RIGHT_CHANCE)
            path = path + LEFT_TURN;
        else
            path = path + RIGHT_TURN;
</code></pre>

<p>You might also go one step further an use the "elvis operator" (ternary operator):</p>

<pre><code>       path = random &lt; TURN_RIGHT_CHANCE ? LEFT_TURN : RIGHT_TURN;
</code></pre>

<h2>avoid explicit String object creation</h2>

<p>The code <code>String path = new String("")</code> is in your small program logically the same as  <code>String path = ""</code>.
But it can have subtle impact on performance and logic. 
Just don't do it unless you really know why.</p>

<h2>don't share singelton resources</h2>

<p>In the beginning you create two instances of the <code>Scanner</code> class wrapping the same  <code>System.in</code> 
object. 
This is a really bad idea.</p>

<p>On top these <code>Scanner</code> instances have misleading names.
They pretend to hold the <em>number of balls</em> and the <em>number of slots</em> respectively, but 
in fact they hold the <em>user input</em>.</p>
    </div>