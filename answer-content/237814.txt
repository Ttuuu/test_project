<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Neither of your implementations is "advantageous" over other because both of them are C-style, unidiomatic C++ code â€” they are really C code with a handful of C++ additions.  Moreover, they share many errors.  This review will (hopefully) help you convert your code to C++ style and fix these errors.</p>

<h1>Formatting</h1>

<p>The indentation of the first implementation is a nightmare.  Fix it by consistently indenting everything by 4 spaces and make sure lines on the same indentation level align with each other.  Also, comma tokens should generally be followed by a space.</p>

<h1>General design</h1>

<p>You code does not provide a suitable interface because "BST Node" is an implementation detail.  Users do not want to work directly with nodes most of the time; they want to work with the trees.  Therefore, you should provide a class to encapsulate the tree.  The insert and search functions should be member functions of the tree, not free functions.</p>

<h1>Memory management</h1>

<p>You use <code>new</code> to allocate nodes, but never <code>delete</code> them.  In other words, you are constantly leaking memory.  This makes your code not reusable.  You should use a smart pointer (e.g., <code>std::unique_ptr</code>) instead of raw pointers in order to solve this problem.</p>

<h1>Miscellaneous</h1>

<p><code>#include &lt;stdio.h&gt;</code> is redundant and should be removed.</p>

<p>Instead of the type-unsafe <code>NULL</code>, use <code>nullptr</code>.</p>

<hr>

<p>Here's how I'd put the whole thing together (minimal version):</p>

<pre><code>#include &lt;initializer_list&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;

class Binary_search_tree {
    struct Node {
        int value{};
        std::unique_ptr&lt;Node&gt; left{};
        std::unique_ptr&lt;Node&gt; right{};
    };
public:
    Binary_search_tree() = default;
    Binary_search_tree(std::initializer_list&lt;int&gt; init)
    {
        for (auto elem : init) {
            insert(elem);
        }
    }
    void insert(int value)
    {
        insert_at(root, value);
    }
    bool contains(int value) const
    {
        return contains_at(root, value);
    }
private:
    void insert_at(std::unique_ptr&lt;Node&gt;&amp; node, int value)
    {
        if (!node) {
            node.reset(new Node{value});
        } else if (value &lt; node-&gt;value) {
            insert_at(node-&gt;left, value);
        } else {
            insert_at(node-&gt;right, value);
        }
    }
    bool contains_at(const std::unique_ptr&lt;Node&gt;&amp; node, int value) const
    {
        if (!node) {
            return false;
        } else if (value &lt; node-&gt;value) {
            return contains_at(node-&gt;left, value);
        } else if (node-&gt;value &lt; value) {
            return contains_at(node-&gt;right, value);
        } else {
            return true;
        }
    }
    std::unique_ptr&lt;Node&gt; root{};
};

int main()
{
    Binary_search_tree tree{31, 41, 59, 26, 53, 59};

    int num;
    std::cout &lt;&lt; "Enter the number: \n";
    std::cin &gt;&gt; num;

    if (tree.contains(num)) {
        std::cout &lt;&lt; "Found\n";
    } else {
        std::cout &lt;&lt; "Not Found\n";
    }

    return 0;
}
</code></pre>

<p>(<a href="https://wandbox.org/permlink/7cUuoRLpC0gyWZGK" rel="nofollow noreferrer">live demo</a>)</p>
    </div>