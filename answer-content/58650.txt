<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answer is late to the party, but I thought this needed to be said:</p>

<p>In most cases when you think static is a good idea for shared state, you should at least consider dependency injection instead.</p>

<p>In other words:</p>

<blockquote>
  <p>Is using a static variable in a lambda function ok, or considered a bad practice?</p>
</blockquote>

<p>It is perfectly valid C++, but consider using an injected seed instead:</p>

<pre><code>int main()
{
    vector&lt;int&gt; vec(100);

    int count = 0;
    // look ma', no static!
    generate(vec.begin(), vec.end(), [&amp;count] () { return count++; });
}
</code></pre>

<p>In this (simplistic) example, the two are functionally equivalent. In practice though, <code>static</code> shares state between calls, even when you don't want it to (e.g. you may want to call this from multiple threads in the future, each with it's own <code>count</code>).</p>

<p>Both are acceptable and correct C++ (YMMV), but the <code>[&amp;count]</code> alternative leads to less (hidden) side effects, more testable code, more re-usable code and a better habbit to cultivate in written code.</p>
    </div>