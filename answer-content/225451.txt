<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Async Synchronization</h2>

<p><code>CreateCommandQueryController</code> provides method <code>Post</code> as seen below. I am personally not a fan of using expression body definition (arrow natotation) on multiline code. We have parentheses for that. More importantly, there is no need whatsoever to call <code>ConfigureAwait(false)</code> at a controller entrypoint method. Either ASP.NET provides a synchronization context (.NET Framework) and it can handle synchronization just fine, or it will not have a context (.NET Core) in which case configuring the await is redundant anyway.</p>

<blockquote>
<pre><code>[HttpPost]
public async Task&lt;IActionResult&gt; Post([FromBody] CreateCommandQuery commandQuery) =&gt;
    await _responseMediator.ExecuteAsync(commandQuery).ConfigureAwait(false);
</code></pre>
</blockquote>

<pre><code>[HttpPost]
public async Task&lt;IActionResult&gt; Post([FromBody] CreateCommandQuery commandQuery) 
{
    return await _responseMediator.ExecuteAsync(commandQuery);
}
</code></pre>

<hr>

<h2>Layer Complexity</h2>

<p><code>CommandQueryHandler</code> uses both the mediator and some helper class. This introduces additional class complexity. Why can't the mediator handle that helper part?</p>

<blockquote>
<pre><code>public async Task&lt;IResult&lt;int&gt;&gt; ExecuteAsync(
    CreateCommandQuery commandQuery, CancellationToken token = default(CancellationToken))
{
    var digimonId = await _repositoryMediator.ExecuteAsync&lt;int&gt;(commandQuery, token).ConfigureAwait(false);
    return ResultHelper.Successful(digimonId);
}
</code></pre>
</blockquote>

<pre><code> return await _repositoryMediator.ExecuteAsyncAsSucceeded&lt;int&gt;(commandQuery, token).ConfigureAwait(false);
</code></pre>

<p>I am not convinced about using a custom mapping mediator <code>IMapperMediator</code>. Use third-party frameworks for aspects such as logging and mapping. Do not introduce yet another layer for wrapping existing frameworks. And don't roll out your own framework for such aspects. The existing frameworks are mature and extensible.</p>

<hr>
    </div>