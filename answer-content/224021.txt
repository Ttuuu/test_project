<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It may well be more efficient to compute <code>std::sqrt(max)</code> once upfront than to multiply <code>n * n</code> every time around the loop.</p>

<p>Removing an element by value from the set is O(log <em>n</em>), where <em>n</em> is the set size at the time.  This will likely make this method slower than writing to elements in a fixed-size storage (such as a <code>std::vector</code> that's never resized), and creating the return set from that.  Also, <code>find()</code> is much slower than vector lookup.</p>

<p>I think we can probably test <code>m * n &lt;= max</code> instead of the more expensive <code>m &lt;= max / n</code>, if we can arrange that the multiplication doesn't overflow.  It will be fine if <code>2 * n &lt; std::numeric_limits&lt;number_t&gt;::max() - max</code>.  Also, no need to start at <code>2 * n</code> when removing - we can start at <code>n * n</code> instead, as all the lower multiples have already been removed due to their smaller factor(s).</p>

<p>And a tiny improvement to the test code - we can stream a single character <code>'\n'</code> to output rather than the string <code>"\n"</code>.</p>
    </div>