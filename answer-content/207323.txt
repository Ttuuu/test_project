<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is very much C style code. You could likely extract the functionality out of your <code>Generateur</code> class into reusable functions and the reclassify this as C.</p>

<p>If you wanted to keep this in C++ I would completely rewrite this.</p>

<p>Start with your headers. Use the C++ versions of C Library headers. They are prefixed with <code>c</code> and don't end in <code>.h</code>:</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
</code></pre>

<p>Also use conventional C++ constructs. C++ has <a href="https://en.cppreference.com/w/cpp/language/raii" rel="noreferrer">RAII</a> containers that handle memory management for you. It has iterators as well so you don't need to maintain raw pointers. </p>

<p>I/O is typically done with <code>&lt;iostream&gt;</code></p>

<p>You would also benefit from not declaring multiple variables on a single line. It is error prone and difficult to read.</p>

<p>It is also customary in C++ to put the type specifier with the type not the variable. This is part of the reason that doing multiple declarations on a single line can be error prone.</p>

<pre><code>char *first, *middle, *last, *tmp, *ptr;
</code></pre>

<p>would look like this:</p>

<pre><code>char* first;
char* middle;
char* last;
char* tmp;
char* ptr;
</code></pre>

<p>You would also benefit from the use of more whitespace around your operators. It's simply more readable. Also prefer prefix increment/decrement to postfix. <a href="https://softwareengineering.stackexchange.com/a/60002/297895">Postfix returns an unmodified copy</a>, so unless you need the copy don't use it.</p>

<pre><code>for(int a = 0; a &lt; (min + loop); ++a)
</code></pre>

<p><code>class</code> is <code>private</code> by default. It is however conventional to list public members and functions first and then declare private members and functions. The reason is anyone (including you) using your class needs to know what publicly accessibly parts they have available. The implementation details however rarely matter (once you get them working right).</p>

<p>You should also make the class reusable. your Generator runs on construction but there is no public function to use it again. Once it's used it can't be used again. might as well make it a function then. Make a callable function like <code>generate_pass()</code> and have it make a new password for you. You can have the function accept input if needed. perhaps seed it from a PRNG.</p>

<p>You should also initialize member variables in your class whenever possible. Assignment in the constructor is not the same thing. There are a couple different methods for this but I will just start with brace initialization because that is the most preferred where possible. It looks something like this:</p>

<pre><code>private:
    bool two{ false };
    bool three{ false };
</code></pre>
    </div>