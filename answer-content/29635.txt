<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly, let's fix up some errors that exist in the code. </p>

<ol>
<li>You're missing an <code>#endif</code> at the end of your <code>unique_ptr.h</code> file. </li>
<li>Both <code>template &lt;class U, class D&gt; unique_ptr(unique_ptr&lt;U, D&gt; &amp;);</code> and <code>template &lt;class U, class D&gt; unique_ptr &amp;operator=(unique_ptr&lt;U, D&gt; &amp;);</code> don't require template redefinitions. They should both just be <code>unique_ptr(unique_ptr &amp;);</code> and <code>unique_ptr&amp; operator=(unique_ptr&amp;);</code>.</li>
<li>You need an <code>#include &lt;algorithm&gt;</code> to use <code>std::swap</code>. You probably also want to change it to <code>using std::swap</code> within your <code>swap</code> function. It should be <code>unique_ptr&lt;T, D&gt;::swap</code>, not <code>swap</code>. You've also got an extra <code>.</code> after <code>_ptr</code> in this function.</li>
<li>In your <code>reset</code> function in the <code>.inl</code> file, it's an error to redeclare the default parameter; that is, it should be <code>template &lt;class T, class D&gt; void unique_ptr&lt;T, D&gt;::reset(T *p)</code> (without the <code>= 0</code>).</li>
</ol>

<p>Some general comments:</p>

<pre><code>if (p) {
    delete p;
    p = 0;
}
</code></pre>

<p>The <code>if</code> is unnecessary. <code>delete</code> (and <code>delete[]</code>) already do a <code>NULL</code> check, and are a no-op if their argument is <code>NULL</code>.</p>

<p>Variables starting with <code>_</code> are reserved for compiler usage. Switch to appending at the end of the variable name (<code>ptr_</code>) instead.</p>

<p>Your <code>T operator*() const;</code> should be returning by <code>T&amp;</code> instead.</p>

<p>Your <code>get</code> function is trying to return a dereferenced pointer:</p>

<pre><code>template &lt;class T, class D&gt;
T *unique_ptr&lt;T, D&gt;::get() const
{
    return *_ptr; // Should be return _ptr;
}
</code></pre>

<p>There are likely other things I've missed. Also, it's worth pointing out that your use cases will be severely constrained without move semantics and move aware containers.</p>
    </div>