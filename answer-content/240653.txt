<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally, you should only put a <code>Vec</code> inside of a <code>Vec</code> if the inner <code>Vec</code> will have a dynamic size. Otherwise, you lose a lot of performance due to indirection (you have a pointer to an array of pointers, which points to each row), which screws with the CPU cache. Instead, you should use a single <code>Vec</code> which has a size of <code>width * height</code>. This pattern is so common that there's a crate to do just that—<a href="https://docs.rs/ndarray/0.13.0/ndarray/macro.array.html" rel="nofollow noreferrer">ndarray</a> (see also <a href="https://docs.rs/ndarray/0.13.0/ndarray/struct.ArrayBase.html#indexing-and-dimension" rel="nofollow noreferrer">this</a>). However, you could also write your own wrapper functions that multiply the column by the width and add the height.</p>

<blockquote>
  <p>is using methods instead of functions generally favoured in Rust? or is it more of a stylistic choice, where OOP people use methods and functional people use functions?</p>
</blockquote>

<p>It really depends. When using the newtype pattern (which you are), absolutely use methods—it's the most ergonomic option. However, using free functions is a great idea when working with other types where it doesn't make sense to have a struct. You should think of structs as data, not logic. Using a struct to hold data and using functions to operate on that data is great. However, using a struct to hold logic generally means that you should rethink your layout. That's not always the case, but is a good start.</p>
    </div>