<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p>Your solution naively walks the array of ascending integers from starting position <code>s = 0</code>. In some situations, this means you are walking tons of negative numbers, knowing they can never match an array index, which is always nonnegative. </p>

<h2>Optimization</h2>

<p>You could optimize <code>s</code> before walking the array. Since array indices are <em>nonnegative integers</em>, you should skip walking the array where the values are <em>strict negative</em>.</p>

<p>As en example, if <code>input = [-10000, -9999, ..., 0, 1]</code> you just want to check 0 and 1.</p>

<p>The way I would optimize the algorithm:</p>

<ul>
<li>determine starting point <code>s</code>

<ul>
<li>if first item is positive: <code>s</code> = 0</li>
<li>if last item is strict negative: return -1</li>
<li>perform <em>binary search</em> to find <code>s</code> (you want <code>s</code> to hold the first positive integer in the array)</li>
</ul></li>
<li>walk <code>i</code> as from <code>s</code> to end of array

<ul>
<li>on match: return match</li>
<li>on <code>array[i]</code> &gt; <code>i</code>: return -1</li>
<li>on end reached without match: return -1</li>
</ul></li>
</ul>

<h3>Optimized Time Complexity</h3>

<p>~<span class="math-container">\$0(\lg m)\$</span> with <code>m &lt;= n</code> and <code>m</code> being the number of positive integers in the array</p>
    </div>