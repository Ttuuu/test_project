<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Statement-like macros should normally be wrapped in <code>do</code>...<code>while(0)</code>.  They should also avoid multiple expansion of arguments.  So instead of</p>

<blockquote>
<pre><code>#define TIMER_START(timer) \
    timer.start = clock();

#define TIMER_STOP(timer) \
    timer.stop = clock();

#define TIMER_CALC(timer) \
    timer.result = (double)(((timer.stop - timer.start) * 1000.0) / CLOCKS_PER_SEC);
</code></pre>
</blockquote>

<p>I'd recommend</p>

<pre><code>#define TIMER_START(timer)                      \
    do { (timer).start = clock(); } while (0)

#define TIMER_STOP(timer)                       \
    do { (timer).stop = clock(); } while (0)

#define TIMER_CALC(timer)                               \
    do {                                                \
        struct timer_s* t = &amp;(timer);                   \
        t-&gt;result = (double)(t-&gt;stop - t-&gt;start)        \
            * 1000.0 / CLOCKS_PER_SEC;                  \
    } while (0)
</code></pre>

<p>or (more likely) a set of real functions instead.</p>

<p>(I fixed the cast that was in the wrong place - it's the result of the subtraction that's an integer value that may lose precision when promoted to <code>double</code> for the multiplication).</p>

<hr>

<p><code>typedef struct timer_s timer_t</code> collides with a POSIX reserved identifier, so probably worth avoiding.</p>

<hr>

<p>Please don't embed terminal-specific codes like this:</p>

<blockquote>
<pre><code>static const char *cmc_test_color[] = {"\x1b[32m", "\x1b[31m", "\x1b[35m"};
</code></pre>
</blockquote>

<p>That becomes an impenetrable mess (or worse) on terminal types other than the ones you've considered.  It's better to adapt to the actual known terminal type, perhaps using a library such as termcap.</p>

<hr>

<p>It seems strange that <code>VERBOSE</code> is a compile-time setting, rather than a run-time parameter here:</p>

<pre><code>#define CMC_CREATE_UNIT(UNAME, VERBOSE, BODY)
</code></pre>

<hr>

<p>One of the statement-like macros has a stray semicolon after its definition:</p>

<pre><code>#define CMC_CREATE_TEST(TNAME, BODY) \
    {                                \
    ...                              \
    } while (0);
</code></pre>

<hr>

<p><code>+= 1</code> is more idiomatically written as <code>++</code>:</p>

<pre><code>    ++tinfo.total;
</code></pre>

<p>Similarly, write <code>-= 1</code> using <code>--</code>.</p>

<hr>

<p>We'd like the unit-test program to exit with success status only if all tests succeeded.  If any fail, we want to know (e.g. to stop the build at that point).  I suggest creating the test function with an <code>int</code> return type to support this, and ending with <code>return tinfo.aborted || tinfo.failed</code>.</p>

<hr>

<p>The behaviour when <code>CMC_TEST_ABORT()</code> is used is strange.  It's the only code that's setting <code>tinfo.aborted</code>, so we could move the <code>if (tinfo.aborted)</code> block directly into that code.  OTOH, we shouldn't be printing the elapsed time in that case, as we've skipped the <code>TIMER_STOP(timer);</code> and <code>TIMER_CALC(timer);</code> lines.</p>

<hr>

<p>Finally, I know it's not really up for review, but I couldn't resist making observations on the <code>gcd()</code> function used for testing:</p>

<p>There's no need for a specific <code>p==0</code> test - the flow without the test already does the right thing (but the <code>q==0</code> test <em>is</em> required, as it's used as divisor in the <code>%</code> operation).</p>

<p>We can reduce duplication, by moving <code>p % q</code> into the test:</p>

<pre><code>uintmax_t gcd(uintmax_t p, uintmax_t q)
{
    if (q == 0) {
        return p;
    }

    uintmax_t r;
    while ((r = p % q) != 0) {
        p = q;
        q = r;
    }

    return q;
}
</code></pre>
    </div>