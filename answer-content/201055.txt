<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You may want to step back and make sure you know where you want to put the responsibility for compliance, and how you want your users to express their expectations.  My initial impression (an outsider's to your problem set, of course) is that you're expecting a good deal from "novice" users -- multiple inheritance, classes with arbitrary fields, and set-like operator overloads.  I'm a bit worried that less advanced Python users may not be able to make effective use of what you're offering them.  I know I had to read it over a couple of times to get the relationship between the moving parts down.</p>

<p>Some questions to consider when thinking it over:</p>

<h3>When does compliance matter?</h3>

<p>This really depends on your usage pattern. Do you want or expect the objects to get dynamic attributes at runtime?  Generally that's not a great pattern for adopt for the scenario you sketched in your post, since it's an invitation to attribute errors; but of course you might be dealing with existing code that likes adding and deleting attributes.  </p>

<p>On the other hand you might simply want to enforce compliance late: a simple assert hasattr(arg, attribute) in the calling code would handle those arguments in a structured way -- you could make a function with clear error messages encourage use that way. If you knew the gamut of expected properties in advance, you could invest in providing compound assertions for your users.</p>

<h3>Which attributes?</h3>

<p>Unless you really need dynamic attribute creation during runs, it seems like a bad practice to encourage in the kind of environment you're describing.  It might be a more sustainable choice to invest in preventing attribute addition and deletion of any kind; that will enforce something approximating type safety regardless of the public interface the class presents. A unit test framework that tests for the presence of the expected attributes might be a better "promise" to maintain than a complex metaprogramming system that may not be well understood by the newer members of the staff.</p>

<p>A related question is whether you care about the distinction between instance and class attributes.  If you really care about support for dynamic attributes you may need to check for class attributes separately, since dynamically editing those could change the state of other instance without warning. Again, here's a case where it might be better to invest in tests rather than trying to anticipate a very arbitrary execution environment.  </p>

<p>Overall, it feels as if you want to support both extremes of Python at once: a very loosey-goosey approach with dynamism and a buttoned-down approach with, eg, type checking.  I fear that will send a hard-to-decipher message to less experienced Python users; it's probably safer to run all one way with true duck-typing, or all the other with a stricter class based approach.</p>

<h3>architecture</h3>

<p>With all that said, I think the meat of what you're trying to get at here can probably be done in a simpler way that's also a bit more newbie friendly.  </p>

<p>Rather than metaclasses and mixins, a class decorator is pretty simple for even junior coders to grok -- and it also has the advantage of making the intentions really explicit. Here's a rough idea of what feels like a more entry level version:</p>

<pre><code>class Interfaces(object):

    def __init__(self, interfaces):
        self.interface_set = set(interfaces)

    def __call__(self, cls):
        # note when patching the class SLF is needed to replace 'self'
        # which will be the decorator's self in this context!

        # save the promise set
        cls_interface_set = set(self.interface_set)
        if hasattr(cls, '_interfaces'):
            cls_interface_set &amp;= cls._interfaces
        cls._interfaces = cls_interface_set

        # stash the raw __init__ and replace with a checked version
        _raw_init = cls.__init__

        def replace_init(SLF, *args, **kwargs):
            _raw_init(SLF, *args, **kwargs)
            for attrib in SLF._interfaces:
                assert hasattr(SLF, attrib), "{} instance does not define '{}'".format(cls, attrib)
        cls.__init__ = replace_init

        # make the promises available as
        def get_interfaces(SLF):
            return SLF._interfaces

        cls.interfaces = property(get_interfaces)

        # prevent deletions.  I'd probably prevent this in all cases...
        def no_deletion(SLF, name):
            if name in SLF._interfaces:
                raise AttributeError("Cannot delete interface property")
            del SLF.__dict__[name]

        cls.__delattr__ = no_deletion

        return cls

def implements(obj, required):
    # fast path, using interfaces:
    if hasattr(obj, 'interfaces'):
        return obj.interfaces &gt;= required

    #slow path, using hasattr
    for attrib in required:
        if not hasattr(obj, attrib):
            return False
    return true



@Interfaces({'a', 'b'})
class Example(object):

    def __init__(self, *args, **kwargs):
        self.a = args[0]
        for k, v in kwargs.items():
            setattr(self, k, v)

# this works:
test = Example(1, b=2)
print test.interfaces
# set(['a','b'])

required = {'b','a'}
print implements(test, required)
# True

more_required = {'a', 'c'}
print implements(test, more_required)
# False

# this fails -- it doesn't get a 'b'
test2 = Example(3)
# AssertionError: &lt;class '__main__.Example'&gt; instance does not define 'b'
</code></pre>

<p>Doing the same job in a metaclass would make the code a little cleaner, but you'd have to ask you junior coders to include the metaclass and also to move the attribute interface declaration into a class-level attribute. </p>

<p>As written this would take any iterable as argument to the decorator.  Good practice would be to declare interface sets as named constants and use those in preference to literals:</p>

<pre><code>BIRD = {'fly', 'nest'}
AQUATIC {'swim'}
</code></pre>

<p>and then compose those in the decorator   </p>

<pre><code>@Interfaces (BIRD | AQUATIC}
class Duck (object):
    #...etc
</code></pre>

<p>This would not be appropriate if the gamut of names were very large, however -- if people have to run to another file to know what <code>OVIPAROUS | SEQUIPEDALIAN</code> gets them as an interface to implement the system will have a hard time picking up adopters.</p>
    </div>