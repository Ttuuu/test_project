<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>whereas:</p>

<pre><code>a*x**3 + b*x**2 + c*x = ((a*x + b)*x + c)*x
</code></pre>

<p>h/t @ Emily L. for "Horner" reference:</p>

<p><a href="https://en.wikipedia.org/wiki/Horner%27s_method" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Horner%27s_method</a></p>

<p>and h/t @ Davidmh for noting improvements in computational speed / precision of this method</p>

<p>gale-church cited it like this in 1990:</p>

<pre><code>import math

def pnorm(z):

    t = 1 / (1 + 0.2316419 * z)
    pd = (1 - 0.3989423 *
      math.exp(-z * z / 2) *
        ((((1.330274429 * t - 1.821255978) * t
           + 1.781477937) * t - 0.356563782) * t + 0.319381530) * t)

    return pd
</code></pre>

<p>This method conveniently avoids the t^n issue.</p>

<p>citation:</p>

<p><a href="https://i.stack.imgur.com/NaO2w.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/NaO2w.png" alt="enter image description here"></a></p>

<p><a href="https://i.stack.imgur.com/irTu3.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/irTu3.png" alt="enter image description here"></a></p>

<p>source:</p>

<p><a href="http://www.aclweb.org/anthology/J93-1004" rel="nofollow noreferrer">http://www.aclweb.org/anthology/J93-1004</a></p>

<p>page 21 of 28 in the pdf</p>

<p>page 95 of the journal <em>Computational Linguistics Volume 19, Number 1</em> </p>

<p>I might "prettify" to:</p>

<pre><code>def pnorm(z):

t = 1 / (1 + 0.2316419 * z)
pd = (1 - 0.3989423 * math.exp(-z * z / 2) *
      ((((1.330274429 * t - 
          1.821255978) * t + 
          1.781477937) * t - 
          0.356563782) * t + 
          0.319381530) * t )

return pd
</code></pre>

<p>if you check the </p>

<p>Abromowitz and Stegun, Handbook of Mathematical Functions</p>

<p>page 932 equation 26.2.17</p>

<p>citation:</p>

<p><a href="http://people.math.sfu.ca/~cbm/aands/page_932.htm" rel="nofollow noreferrer">http://people.math.sfu.ca/~cbm/aands/page_932.htm</a></p>

<p>you'll find this:</p>

<p><a href="https://i.stack.imgur.com/vxvEr.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/vxvEr.png" alt="enter image description here"></a></p>

<p>from which we can create a table giving us:</p>

<pre><code>def pnorm(z):

    p  =  0.2316419
    b1 =  0.319381530
    b2 = -0.356563782
    b3 =  1.781477937
    b4 = -1.821255978
    b5 =  1.330274429
    t = 1 / (1 + p * z)
    pd = (1 - 0.3989423 * math.exp(-z * z / 2) *
          ((((b5 * t + b4) * t + b3) * t + b2) * t + b1) * t )

    return pd
</code></pre>

<p>Then from the previous page; 931 you will find:</p>

<p><a href="https://i.stack.imgur.com/w3Lsb.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/w3Lsb.png" alt="enter image description here"></a></p>

<pre><code>Zx = (1/√(2* π))*e(-z*z/2)
</code></pre>

<p>in python:</p>

<pre><code>Zx = (1/math.sqrt(2* math.pi))*math.exp(-z*z/2)
</code></pre>

<p>and we find that (1/√(2* π)) = 0.3989423</p>

<p>also, I think I like this:</p>

<pre><code>t * (b1 + t * (b2 + t * (b3 + t * (b4 + t * b5))))
</code></pre>

<p>better than:</p>

<pre><code>(((b5 * t + b4) * t + b3) * t + b2) * t + b1) * t 
</code></pre>

<p>so then, finally:</p>

<pre><code>import math

def pnorm(z):

    p  =  0.2316419
    b1 =  0.319381530
    b2 = -0.356563782
    b3 =  1.781477937
    b4 = -1.821255978
    b5 =  1.330274429
    t  = 1 / (1 + p * z)
    Zx = (1 / math.sqrt(2 * math.pi)) * math.exp(-z * z / 2)
    pd = Zx *  t * (b1 + t * (b2 - t * (b3 + t * (b4 - t * b5))))

    return (1 - pd) 
</code></pre>

<p>checking my work against the op's</p>

<pre><code>import matplotlib.pyplot as plt
import numpy as np
import math




def norm_cdf(z):
  """ Use the norm distribution functions as of Gale-Church (1993) srcfile. """
  # Equation 26.2.17 from Abramowitz and Stegun (1964:p.932)

  t = 1.0 / (1+0.2316419*z) # t = 1/(1+pz) , p=0.2316419
  probdist = 1 - 0.3989423*math.exp(-z*z/2) * ((0.319381530 * t)+ \
                                         (-0.356563782* math.pow(t,2))+ \
                                         (1.781477937 * math.pow(t,3)) + \
                                         (-1.821255978* math.pow(t,4)) + \
                                         (1.330274429 * math.pow(t,5)))

  return probdist

for z in np.arange (-3,3,0.01):
    zf = pnorm(z)
    plt.plot(z,zf, c='red', marker = '.', ms=1)

for z in np.arange (-3,3,0.01):
    zf = norm_cdf(z)+0.1 #offset 0.1
    plt.plot(z,zf, c='blue', marker = '.', ms=1)

plt.show()
plt.pause(0.1)
</code></pre>

<p><a href="https://i.stack.imgur.com/SM329.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/SM329.png" alt="enter image description here"></a></p>

<p>I was expecting the Horner method to be faster, so I ran a time test, substituting:</p>

<pre><code>#Zx = (1.0 / math.sqrt(2.0 * math.pi)) * math.exp(-z * z / 2.0)
Zx = 0.3989423* math.exp(-z * z / 2.0)
</code></pre>

<p>to make it fair and upping the np.arrange resolution to 0.0001:</p>

<pre><code>t0 = time.time()
for z in np.arange (-3,3,0.0001):
    zf = pnorm(z)
t1 = time.time()
for z in np.arange (-3,3,0.0001):
    zf = norm_cdf(z)
t2 = time.time()

print ('pnorm time    : %s' % (t1-t0))
print ('norm_cdf time : %s' % (t2-t1))
</code></pre>

<p>and the results, spinning my quad core AMD 7950 FM2+ w/ 16G ram pretty hard (albeit with several other apps running)... defied my expectations:</p>

<pre><code>&gt;&gt;&gt;
pnorm time    : 81.4725670815
norm_cdf time : 80.7865998745
</code></pre>

<p>The Horner method was not faster</p>
    </div>