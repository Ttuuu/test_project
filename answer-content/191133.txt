<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><em>How can I simplify this code so that when I add more values and I'm not writing up another 30-40 <code>if</code> statements?</em></p>
</blockquote>

<p>One could define a mapping (similar to the second option in <a href="https://codereview.stackexchange.com/a/191118/120114">Valentin's answer</a>) that is similar to a 2-dimensional associative array. This can be achieved in JavaScript using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects" rel="nofollow noreferrer">objects</a>- optionally using a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> object.</p>

<pre><code>var mapping = { //format: presenceValue: { taxonomyValue: attributeValue }
    "allRecords": {
        "allRecords": "allRecords", 
        "Animals": "Animals",
        "Plants": "Plants",
        "Communities": "Communities"
    },
    "Extant": {
        "allRecords": "Extant", 
        "Animals": "eAnimals",
        "Plants": "ePlants",
        "Communities": "eCommunities"
    },
    "Historic/Extirpated": {
        "allRecords": "Historic/Extirpated", 
        "Animals": "hAnimals",
        "Plants": "hPlants",
        "Communities": "hCommunities"
    }
};
</code></pre>

<p>Then simply assign the value from that mapping using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Bracket_notation" rel="nofollow noreferrer">bracket notation</a> of the mapping object:</p>

<pre><code>var attributeValue = mapping[presenceValue][taxonomyValue];
</code></pre>

<p>If one wanted to ensure that attributeValue wouldn't get assign to <code>undefined</code>, you could check if the keys exist using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" rel="nofollow noreferrer">Object.hasOwnProperty()</a> :</p>

<pre><code>if (mapping.hasOwnProperty(presenceValue) &amp;&amp; mapping[presenceValue].hasOwnProperty(taxonomyValue)) {
    var attributeValue = mapping[presenceValue][taxonomyValue];
    //rest of code to utilize that value
}
</code></pre>

<p>or else the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in" rel="nofollow noreferrer"><code>in</code></a> operator</p>

<pre><code>if (presenceValue in mapping &amp;&amp; taxonomyValue in mapping[presenceValue]) {
    var attributeValue = mapping[presenceValue][taxonomyValue];
    //rest of code to utilize that value
}
</code></pre>

<p>That declaration of <code>mapping</code> could be stored outside of the <code>updateMap()</code> function, possibly in an external JSON file.</p>

<p>You could also consider using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow noreferrer">Map</a> instead of a plain object.</p>

<h2>Other review points</h2>

<h3>Multiple jQuery libraries loaded</h3>

<p>I noticed that <a href="https://rihorn.github.io/kybiodiversity/" rel="nofollow noreferrer">the linked map page</a> includes two versions of jQuery (i.e. 3.3.1 and 3.2.1). While those two likely won't have any conflicting code, including that library twice is pointless, and while most browser cache it, this leads to an additional 34.6 KB that the user must download.</p>

<p>You might consider whether you really need jQuery... check out <a href="http://youmightnotneedjquery.com/" rel="nofollow noreferrer">youmightnotneedjquery.com/</a> for alternatives. The page already has 6 other scripts included...</p>

<p>I ran the page through the <a href="http://yslow.org/" rel="nofollow noreferrer">Yslow plugin</a> - gave it a <em>B</em> rating:</p>

<p><a href="https://i.imgur.com/TkYtoLS.png" rel="nofollow noreferrer"><img src="https://i.imgur.com/TkYtoLS.png" alt="1"></a></p>

<h3>Store DOM references in a variable (or constant)</h3>

<p>The <code>updateMap()</code> function does a DOM lookup to get the value of the radio buttons on every call. Those DOM references should be stored in a variable (or a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer">constant</a> if the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const#Browser_compatibility" rel="nofollow noreferrer">browsers that support <code>const</code></a> are sufficient). I know you mentioned you are considering switching to using select lists so I suggest simply storing references to those by <em>id</em> attribute value in a function when the DOM is ready (e.g. jQuery's <a href="http://api.jquery.com/ready/" rel="nofollow noreferrer">.ready()</a>).</p>

<h3>Avoid extra anonymous function</h3>

<p>I see a couple places where change handlers are set up like below:</p>

<blockquote>
<pre><code>$('input[name="toggle"]').change(function () {
  // call updateMap function
  updateMap(dataLayer);
});
//....
$('input[name=toggle2]').change(function () {
  // call updateMap function
  updateMap(dataLayer);
});
</code></pre>
</blockquote>

<p>Those could be simplified using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow noreferrer"><code>Function.bind()</code></a> to create <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partially_applied_functions" rel="nofollow noreferrer">partially applied functions</a>, which would allow for the removal of the extra wrapping function:</p>

<pre><code>$('input[name="toggle"], input[name=toggle2]').change(updateMap.bind(null, dataLayer));
</code></pre>

<p>Notice that the CSS selectors were combined with a comma. A class name or other technique could be employed to select those elements.</p>

<p>Read more about removing extra anonymous functions in <a href="https://toddmotto.com/avoiding-anonymous-javascript-functions/" rel="nofollow noreferrer">this article</a></p>
    </div>