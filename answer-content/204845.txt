<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm a big fan of <code>tput</code>, which many script authors seem to overlook, for generating appropriate terminal escapes.  Perhaps my enthusiasm started back in the early '90s, when using idiosyncratic (non-ANSI) terminals, but it still glows bright whenever I run a command in an Emacs buffer or output to a file.</p>
<hr>
<p>A style point, on which you may disagree: I prefer not to enclose parameter names in braces unless it's required (for transforming the expansion, or to separate from an immediately subsequent word).  So <code>[ "$#" -ne 3 ]</code> rather than <code>[ "${#}" -ne 3 ]</code>, for example.  The braces aren't <em>wrong</em>, but do feel unidiomatic there.</p>
<hr>
<p>A simple improvement: you can save a lot of doubled-backslashes in the <code>printf</code> format strings by using single quotes rather than double quotes (this also protects you against accidentally expanding variables into the format string).  I also find it easier to match arguments to format if I make judicious use of line continuation.  Example:</p>
<pre><code>    printf '%s%b()\n\n\t%s%b%s\n\nexit code = %b%s\n' \
           "$bold_yellow" "$2" \
           "$nocolor" "$3" "$bold_red" \
           "$1" "$nocolor" &gt;&amp;2
</code></pre>
<hr>
<p>The definition of <code>is_number</code> isn't shown in your example function, but something similar is written in full here:</p>
<pre><code># check if the first argument is a number
# if not, print out an internal error without colors
if ! [ "${1}" -eq "${1}" ] 2&gt; /dev/null
then
</code></pre>
<p>I think it makes sense to have <code>is_number</code> for that test; it would certainly reduce the need for comments:</p>
<pre><code>if ! is_number "$1"
then    # print out an internal error without colors
</code></pre>
<hr>
<p>It probably makes sense to redirect output to the error stream once at the beginning of <code>print_error_and_exit</code>, since we won't be generating any ordinary output from this point onwards:</p>
<pre><code>print_error_and_exit()
{
    exec &gt;&amp;2
</code></pre>
<p>That saves the tedium of adding a redirect to every output command, and neatly avoids the easy mistake of missing one.</p>
<hr>
<p>When we test that <code>tput</code> succeeds, perhaps we should <code>tput sgr0</code> without redirecting to null, so that the output device is in a known state (thus killing two birds with one stone)?</p>
<p>If <code>tput</code> works at all, then when its argument can't be converted, its output is empty, which is fine.  If we want to be really robust when <code>tput</code> doesn't even exist, then we could test like this:</p>
<pre><code>tput sgr0 2&gt;/dev/null || alias tput=true
</code></pre>
<p>Then we don't need a separate branch for the non-coloured output (we'll just output empty strings in the formatting positions).  That won't quite work as I've written it, unless we specifically export the alias to sub-shells, but we can more conveniently just use a variable:</p>
<pre><code>tput=tput
$tput sgr0 2&gt;/dev/null || tput=true
</code></pre>
<p>We might also choose to test that the output is a tty (<code>test -t 1</code>, if we've done the <code>exec</code> I suggested, else <code>test -t 2</code>).</p>
<hr>
<p><code>$bold_yellow</code> saves no typing compared to <code>$bold$yellow</code>, and it's only used once anyway, so it can easily be eliminated.  Same for <code>$bold$red</code>.</p>
<hr>
<h1>Modified code</h1>
<p>Applying my suggestions, we get:</p>
<pre><code>is_number()
{
    test "$1" -eq "$1" 2&gt;/dev/null
}

print_error_and_exit()
# expected arguments:
# $1 = exit code
# $2 = error origin (usually function name)
# $3 = error message
{
    # all output to error stream
    exec &gt;&amp;2

    if [ "$#" -ne 3 ]
    then    # wrong argument count - internal error
        printf 'print_error_and_exit() internal error\n\n\tWrong number of arguments has been passed: %b!\n\tExpected the following 3:\n\t\t<span class="math-container">\$1 - exit code\n\t\t\$</span>2 - error origin\n\t\t\$3 - error message\n\nexit code = 1\n' \
               "$#"
        exit 1
    fi

    if ! is_number "$1"
    then    # wrong argument type - internal error
        printf 'print_error_and_exit() internal error\n\n\tThe first argument is not a number: %b!\n\tExpected an exit code from the script.\n\nexit code = 1\n' \
               "$1"
        exit 1
    fi

    # if tput doesn't work, then ignore
    tput=tput
    test -t 1 || tput=true
    $tput sgr0 2&gt;/dev/null || tput=true
    
    # colors definitions
    readonly bold=$($tput bold)
    readonly red=$($tput setaf 1)
    readonly yellow=$($tput setaf 3)
    readonly nocolor=$($tput sgr0)

    # highlight the error origin and the exit code
    printf '%s%b()\n\n\t%s%b%s\n\nexit code = %b%s\n' \
           "${bold}$yellow" "$2" \
           "$nocolor" "$3" "${bold}$red" \
           "$1" "$nocolor"

    exit "$1"
}
</code></pre>
    </div>