<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>        explicit tree_node( const Ty&amp; value,
            const tree_node* parent = nullptr ) :
</code></pre>

<p>Might be better for <code>parent</code> to not be a default argument. (The root node is the special case for which it would be better to explicitly specify the <code>nullptr</code>).</p>

<hr>

<pre><code>        void insert_child( Ty value )
        {
            if( value &lt;= this-&gt;value )
            {
                left = std::make_unique&lt;tree_node&gt;( value, this );
            }
            else
            {
                right = std::make_unique&lt;tree_node&gt;( value, this );
            }
        }
</code></pre>

<p>Maybe check that left and right are null before setting the value, or rename this function to <code>replace_child</code> or something.</p>

<p>Also, is it intentional to allow equal values? (This has consequences for finding nodes.)</p>

<hr>

<p>Speaking of which, the instructions say "in addition to the usual operations"...</p>

<p>I'd say this lacks a lot of the "usual operations", e.g. finding, iteration, erasure etc.</p>

<hr>

<pre><code>    mutable std::mt19937 gen_;
</code></pre>

<p>Hmm. I think it might be better to have the user pass in the rng as a parameter to the <code>pick_random</code> function. That would allow using multiple rng's to access the same data.</p>

<hr>

<pre><code>        tree_node* node = root_.get(),
            * parent{};
</code></pre>

<p>Ick. Separate definitions would be much clearer.</p>

<hr>

<pre><code>        const uniform distribution( min, max );

        return distribution( gen_ );
</code></pre>

<p>This causes a compiler error for me because <code>uniform_int_distribution::operator()</code> isn't <code>const</code>.</p>

<hr>

<pre><code>    [[nodiscard]] auto next( const std::size_t&amp; min, const std::size_t&amp; max ) const -&gt; std::size_t
</code></pre>

<p>I doubt passing <code>std::size_t</code> by <code>const&amp;</code> is faster than by value.</p>

<p>Specifying the return type as auto, and then listing the return type after the function seems like unnecessary typing. We could just specify the return type up front.</p>

<hr>

<pre><code>    [[nodiscard]] auto pick_random() const -&gt; Ty&amp; { return pick_random( *root_ ); }
    [[nodiscard]] auto pick_random( tree_node&amp; node ) const -&gt; Ty&amp; ...
</code></pre>

<p>These should return <code>Ty const&amp;</code> (or by value) not <code>Ty&amp;</code>. Changing the values in the nodes will break the tree!</p>

<p>Since we have no access to <code>tree_node</code>s outside the class, that second function should probably be <code>private</code>.</p>

<p>We might want to <code>throw</code> a specific error for an empty tree. (If we implemented iterators, we could return an end iterator, which would be better still.)</p>
    </div>