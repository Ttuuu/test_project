<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>for (int i = 0; i &lt; package.size(); ++i)
</code></pre>

<p>I'd use for (auto&amp; p : package) instead if the index (i) is not used for anything.</p>

<pre><code>outFile &lt;&lt; package[i].getPartId() &lt;&lt; "," &lt;&lt; endl;
</code></pre>

<p>Remember that std::endl flushes the stream. This is very minor, but I'd use a manual '\n' and then flush when the whole object is written.</p>

<pre><code>bOutFile.write((char*)&amp;package[i], sizeof(package[i]));
</code></pre>

<p>This is I do not like at all. Copying objects like this is problematic when you have objects with more complex data. I.e. pointers or dynamically allocated memory.</p>

<p>Take a look at serialization/deserialization, I found this read quite good concerning the topic: <a href="https://rubentorresbonet.wordpress.com/2014/08/25/an-overview-of-data-serialization-techniques-in-c/" rel="nofollow noreferrer">https://rubentorresbonet.wordpress.com/2014/08/25/an-overview-of-data-serialization-techniques-in-c/</a></p>

<pre><code>Packet(int partId, string description, double price, int partCount
</code></pre>

<p>Make the passed arguments const references instead! (Otherwise an extra copy will be done)</p>
    </div>