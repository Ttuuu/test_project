<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Java provides an (intrinsic) <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#numberOfTrailingZeros-int-" rel="nofollow noreferrer">method</a> that returns the count of trailing zeros. This method can be used to largely reduce the count of checks by processing all consecutive 0s/1s at once instead of processing the provided number bit by bit.</p>

<pre><code>import static java.lang.Integer.numberOfTrailingZeros;
import static java.lang.Math.max;
...
public static int solution(int n) {
    int max = 0;
    while ((n &gt;&gt;&gt;= numberOfTrailingZeros(~(n | n - 1))) != 0)
        max = max(numberOfTrailingZeros(n), max);
    return max;
}
</code></pre>

<p><code>n &gt;&gt;&gt;= numberOfTrailingZeros(~(n | n - 1))</code> removes all trailing zeros and all following 1s. (Rightpropagates the lowest bit and inverses -&gt; i.e. ...00101100 becomes ...11010000, thus n would be shifted by 4 and become ...0010)</p>

<p>Approximated performance over 1&lt;&lt;20 random values (used System#nanoTime and not JMH, thus results not completely reliable, but the tendency is visible):</p>

<pre><code>a-ina : 158 ns/op
janos : 114 ns/op
nevay :  24 ns/op
</code></pre>
    </div>