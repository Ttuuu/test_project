<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution to this particular problem is fine in its own way. However when it comes to scaling, it will become quite messy. Since I don't see any scope of improvement/tweaking in your approach, I suggest an alternative solution.</p>

<p>As pointed out in the comments, you can get what you want with <strong>Outlet Collections</strong>, since they are basically an array of <code>UIKit</code> objects, thus making it easy to manipulate them for our specific case.</p>

<hr>

<h2>Step 1</h2>

<p>First off, connect your textfields to an Outlet Collection, and delegates in <strong>Interface Builder</strong> itself <em>(as shown in the image below)</em>, which gets rid of the redundant </p>

<pre><code>@IBOutlet var txtOTP1: UITextField!
</code></pre>

<p>and </p>

<pre><code>txtOTP1.delegate = self
</code></pre>

<p>statements.</p>

<p><a href="https://i.stack.imgur.com/3MuEQ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/3MuEQ.png" alt="Outlet Collection -- IB"></a></p>

<pre><code>@IBOutlet var textFieldsOutletCollection: [UITextField]!
</code></pre>

<hr>

<h2>Step 2</h2>

<p>We are going to use a dictionary with the textfield as the <code>key</code> and its corresponding index in the outlet collection as the <code>value</code>:</p>

<pre><code>var textFieldsIndexes:[UITextField:Int] = [:]

override func viewDidLoad() {
    for index in 0 ..&lt; textFieldsOutletCollection.count {
        textFieldsIndexes[textFieldsOutletCollection[index]] = index
    }
    super.viewDidLoad()
}
</code></pre>

<hr>

<h2>Step 3</h2>

<p>The basic idea is, we can get the index of the textfield in our collection by supplying <em>(to the dictionary)</em> the textfield object we get in <code>shouldChangeCharactersIn</code> method, and then make the next or previous textfield the first responder:</p>

<pre><code>enum Direction { case left, right }

func setNextResponder(_ index:Int?, direction:Direction) {

    guard let index = index else { return }

    if direction == .left {
        index == 0 ?
            (_ = textFieldsOutletCollection.first?.resignFirstResponder()) :
            (_ = textFieldsOutletCollection[(index - 1)].becomeFirstResponder())
    } else {
        index == textFieldsOutletCollection.count - 1 ?
            (_ = textFieldsOutletCollection.last?.resignFirstResponder()) :
            (_ = textFieldsOutletCollection[(index + 1)].becomeFirstResponder())
    }

}
</code></pre>

<hr>

<h2>Step 4</h2>

<p>Now the <code>shouldChangeCharactersIn</code> method becomes more simple and clean:</p>

<pre><code>func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool {
    if range.length == 0 {
        setNextResponder(textFieldsIndexes[textField], direction: .right)
        textField.text = string            
        return true
    } else if range.length == 1 {
        setNextResponder(textFieldsIndexes[textField], direction: .left)
        textField.text = ""            
        return false
    }
    return false
}
</code></pre>

<hr>

<h2>Final Code</h2>

<p>With all the above code combined, your view controller should look like this:</p>

<pre><code>import UIKit

class ViewController: UIViewController, UITextFieldDelegate {

    @IBOutlet var textFieldsOutletCollection: [UITextField]!

    var textFieldsIndexes:[UITextField:Int] = [:]

    override func viewDidLoad() {
        super.viewDidLoad()
        for index in 0 ..&lt; textFieldsOutletCollection.count {
            textFieldsIndexes[textFieldsOutletCollection[index]] = index
        }
    }

    enum Direction { case left, right }

    func setNextResponder(_ index:Int?, direction:Direction) {

        guard let index = index else { return }

        if direction == .left {
            index == 0 ?
                (_ = textFieldsOutletCollection.first?.resignFirstResponder()) :
                (_ = textFieldsOutletCollection[(index - 1)].becomeFirstResponder())
        } else {
            index == textFieldsOutletCollection.count - 1 ?
                (_ = textFieldsOutletCollection.last?.resignFirstResponder()) :
                (_ = textFieldsOutletCollection[(index + 1)].becomeFirstResponder())
        }

    }

    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool {

        if range.length == 0 {
            textField.text = string
            setNextResponder(textFieldsIndexes[textField], direction: .right)
            return true
        } else if range.length == 1 {
            textField.text = ""
            setNextResponder(textFieldsIndexes[textField], direction: .left)
            return false
        }

        return false

    }

}
</code></pre>

<p>This method should theoretically work for <strong>infinite</strong> number of <code>UITextField</code>s with same amount of code as opposed to your approach, in which the amount of code is dependent on the number of textfields used, which is not handsome/pretty.</p>
    </div>