<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that you do the <em>same thing</em> if the array is empty or if the last item's <code>localeDate</code> doesn't match - you can combine those two paths.</p>

<p>You only want to update the existing object if the last item exists and its date matches, so I'd first set a flag for that, which can be done concisely via optional chaining.</p>

<p>Then, <code>.map</code> looks a bit verbose when all items of the array are unchanged <em>except for one</em> - you could consider using <code>.slice</code> instead to take all but the last item, spread them into a new array, then add the changed object as the last item.</p>

<pre><code>useEffect(() =&gt; {
    // update item if date matches
    const changeExistingItem = data[data.length - 1]?.date === localeDate;
    const updatedData = changeExistingItem
        ? [...data.slice(0, data.length - 1), { ...data[data.length - 1], round }]
        : [...data, { round, date: localeDate }];
    setData(updatedData);
}, [round]);
</code></pre>

<p>Also see that you can use shorthand property names to keep things concise: <code>{ someProp: someProp</code> simplifies to <code>{ someProp</code> in modern Javascript.</p>

<p>As a side note: <a href="https://softwareengineering.stackexchange.com/questions/278652/how-much-should-i-be-using-let-vs-const-in-es6">always use <code>const</code></a> to declare variables, whenever possible. When you use <code>let</code>, you're warning readers of the code that you <em>may be reassigning</em> that variable name in the future, which results in more cognitive overhead.</p>
    </div>