<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First I'd get rid of the dependency on <code>num</code>, since that's just a counter,
and you can use <code>take num</code> on an infinite list of <code>errorDiffuses</code>:</p>

<pre><code>errorDiffuses :: Double -&gt; Double -&gt; [Int]
errorDiffuses v err = tv : errorDiffuses v (err + v - fromIntegral tv)
 where
  tv = truncate (v + err)
</code></pre>

<p>So we have:</p>

<pre><code>errorDiffuse' :: Double -&gt; Int -&gt; Double -&gt; [Int]
errorDiffuse' v num err = take num $ errorDiffuses v err
</code></pre>

<p>Then I'd think about generating the list of <code>errorDiffuses</code> differently.
Since we're trying to generate a list, that makes me think of <code>unfolds</code>,
which you can find in Data.List:</p>

<pre><code>unfoldr :: (b -&gt; Maybe (a, b)) -&gt; b -&gt; [a]
</code></pre>

<p>The unfold takes a function that, given a seed, produces the next
value in the outputted list, along with a new seed. The function
starts with an intitial seed, and keeps using those seeds, adding to the
list until the function returns <code>Nothing</code>.</p>

<p>The function we're looking for is the following:</p>

<pre><code>nextErrorDiffuse :: Double -&gt; Double -&gt; Maybe (Int, Double)
nextErrorDiffuse v err = Just (tv, err + v - fromIntegral tv)
 where
  tv = truncate (v + err)
</code></pre>

<p>Our list is infinite, so we always return a <code>Just</code> value. The value that is output at each stage is <code>tv</code>, and the next "seed" is given by <code>err + v - fromIntegral tv</code>.</p>

<p>Putting things together we have:</p>

<pre><code>errorDiffuse'' :: Double -&gt; Int -&gt; Double -&gt; [Int]
errorDiffuse'' v num err = take num $ unfoldr (nextErrorDiffuse v) err
</code></pre>
    </div>