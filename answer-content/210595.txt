<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you should replace <code>mixedBaseInc</code> with a generator that returns the combinations of indexes. That would simplify XProd by taking out <code>numElms</code> and the construction of <code>digits</code>.</p>

<p>That gives you the <em>option</em> to parallelise XProd by instantiating more instances of the goroutine that outputs the product vectors (because the closure no longer binds <code>digits</code>). <em>If</em> that is the bottleneck then that improves throughput.</p>

<p>However it depends on the program where this is used; if most of the work is done by the consumer of the output vectors then the best speed-up is for the consumer to consume in a way that can be parallelised.</p>

<p>An alternative approach is to build the output vectors one element at a time â€” <a href="https://github.com/schwarmco/go-cartesian-product/blob/master/cartesian.go" rel="nofollow noreferrer">https://github.com/schwarmco/go-cartesian-product/blob/master/cartesian.go</a> for example . That solution has pros and cons and it's a bit more complicated to increase its parallelism, but it might be much better on some inputs (perhaps if there are a large number of small input sets to the product).</p>
    </div>