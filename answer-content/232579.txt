<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which reommends using <code>lower_case</code> for functions and variables.</p>

<p>There is also a standard for documenting functions, called <code>docstring</code> convention, which is codified in <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP257</a>.</p>

<p>In addition, you could use <code>elif</code> to avoid checking all <code>if</code> conditions if you have already found your file type. Or even better, put them all into a dictionary. Note that this now raises a <code>KeyError</code> for an undefined file type (which is a good thing). If you don't want that, use <code>FILE_TYPES.get(file_type, (0, ''))</code> instead.</p>

<p>I renamed your <code>to1D</code> function to <code>ravel</code>, because <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel_multi_index.html#numpy.ravel_multi_index" rel="nofollow noreferrer">that is what this operation is called in <code>numpy</code></a>.</p>

<pre><code>import struct

FILE_TYPES = {"signed int": (2, '&gt;h'),
              "unsigned int": (2, '&gt;H'),
              "unsigned byte": (1, '&gt;B'),
              "float": (4, '&gt;f')})

def ravel(x, y, width):
    """Convert `x`, `y` indexes of 2D array into index i of a 1D array.
       Assumes that the array is of one consistent `width`.

       x: index for cols in the 2D
       y: index for rows in the 2D
    """
    return x + width * y

def read_binary_as(file_name, x, y, file_type, width=3601):
    """Read the value at position `x`, `y` from array in `file_name`.
       Assumes that all values are of the same `file_type`
       and that each row has the same `width`.
    """
    size, coding = FILE_TYPES[file_type]
    offset = ravel(x, y, width) * size
    with open(file_name, 'b') as file:
        file.seek(offset)
        return struct.unpack(coding, file.read(size))[0]
</code></pre>
    </div>