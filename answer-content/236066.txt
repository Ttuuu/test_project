<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should clear <code>characterBuffer</code> at the end of <code>addString</code> instead of <code>addOperator</code>.</p>

<p>There is no need for <code>characterBuffer</code> to be a member field. Instead make it a local in <code>addLexemes</code> and pass it (by ref) when needed.</p>

<p>There is a very consistent patter that every time you call <code>addOperator</code> you call <code>addString</code> right before. Therefor you can put <code>addString</code> in <code>addOperator</code>.</p>

<pre><code>// first adds the string in 'precedingStringBuffer' as string if not empty
// then adds an operator as a lexeme in the 'lexeme' vector, and token in 'tokens' vector
void lexical_analyzer::addOperator(std::string&amp; precedingStringBuffer, la_enum::token tok, const std::string&amp; str, int pos, int sz)
{
    addString(characterBuffer);
    lexemes.push_back(std::string(str, pos, sz));
    tokens.push_back(tok);
}
</code></pre>

<p>If that is the amount of tokens you will be using then the switch is fine. You are unlikely to get anything better than what the compiler can generate for the switch.</p>

<p>For the single character tokens you could use the ascii value of the character as value for the token and values from 257 for the multi character values.</p>

<p>The <code>COUNTER</code> and <code>SINGLE_CAPTURE</code> only allow for a single digit between the braces, this can be troublesome if you ever need something more than 9 in there.</p>
    </div>