<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>The variable name <code>master</code> doesn't make any sense, as your function accepts a sequence containing sequences you should name it something that makes more sense. For eg we can use <code>seq</code> or <code>iterable</code> here:</p></li>
<li><p><code>row_count</code> will make more sense than <code>master_count</code>.</p></li>
<li><p><code>if not master</code> should be checked first, even before checking the length.</p></li>
<li><p><code>if master_count != len(master[0])</code> can fail we any of the rows after the first row contain different number of items. I've used <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> with a generator expression in my answers below.</p></li>
<li>You can totally use a for-loop here, avoid indexing as much as possible in Python. Normal for-loops are more-readable.</li>
</ul>

<hr>

<p>My first suggestion is going to use indexing only to get the column items. To get the column items for a particular row I've created a function <code>get_column</code> that accepts an iterable and an index as its arguments and lazily yield item on at that index from each row of that iterable.</p>

<p>The looping over rows in done using the <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a> function, it returns both the index and the current row. We can use this index to get the column items by passing it to <code>get_column</code>. Later we <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow noreferrer"><code>izip()</code></a>(returns an iterator) the current row and the column items and check if <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> of the items don't match:</p>

<pre><code>from itertools import izip


def get_column(seq, ind):
    for row in seq:
        yield row[ind]


def symmetric(seq):
    if not seq: # checks to see if the list is empty
        return True

    row_count = len(seq)

    #check to make sure the list is a square
    if any(len(row) != row_count for row in seq):
        return False

    for ind, row in enumerate(seq):
        column = get_column(seq, ind)
        if any(row_item != col_item  for row_item, col_item in izip(row, column)):
            return False
    return True
</code></pre>

<hr>

<p>Another way that doesn't use indexing at all.</p>

<p>Here I've used <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow noreferrer"><code>izip</code></a> with splat operator <code>*</code>(explained in <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a>'s docs), it is the recommended way to transpose an iterable in Python. Note that * will unpack the whole iterable at once, so if it was an iterator then we are actually consuming it all at once. The transposed iterator is than passed to <a href="https://docs.python.org/2/library/itertools.html#itertools.imap" rel="nofollow noreferrer"><code>imap</code></a> so that each of transposed items(<code>izip</code> returns tuples) can be converted to list which is then going to us simply compare each row with a column using <code>!=</code> operator, i.e no <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> based for-loop for comparison here. It's weird that Python doesn't support <a href="https://stackoverflow.com/questions/2345092/python-why-is-comparison-between-lists-and-tuples-not-supported">comparing tuple with a list</a>, hence this conversion to list is required.</p>

<p>But if the array if huge then the conversion to list and then comparing using <code>!=</code> is actually going to be slow because it will require at least one complete loop over the tuple to convert it to a list, in that case we can remove <code>imap</code> call and within the loop simply compare the items using <code>izip</code> and <code>any()</code>(added this is comments).:</p>

<pre><code>from itertools import izip, imap


def symmetric(seq):

    if not seq: # checks to see if the list is empty
        return True

    row_count = len(seq)

    #check to make sure the list is a square
    if any(len(row) != row_count for row in seq):
        return False

    columns = imap(list, izip(*seq))

    for row, col in izip(seq, columns):
        if row != col:
            return False
    # or
    # columns = izip(*seq)
    # for row, col in izip(seq, columns):
    #     if any(row_item != col_item for row_item, col_item in izip(row, col)):
    #         return False

    return True
</code></pre>
    </div>