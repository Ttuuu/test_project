<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a great project to do. <a href="https://github.com/carcigenicate/mandelbrot/tree/master/src/mandelbrot" rel="nofollow noreferrer">I did a similar project in Swing</a>; except using Clojure's Seesaw wrapper library. You can add many interesting add-on panels to it. My favorite panels that I came up with were a panel that lets the user decide how they want things colored, and one that allowed multiple images to be saved to disk in parallel. It was a great lesson in handling complex async processes. They're worth considering trying.</p>

<p>Anyways, onto some suggestions:</p>

<p><code>diverges</code> can be made <em>much</em> more interesting if you allow it to return the <code>i</code> value that it fails at. This allows you to color your pixels based on the returned value of <code>i</code>, which adds a whole new dimension to what you can produce. <a href="https://drive.google.com/open?id=1asITJjqs-L7Iw7EeKFn6JiLYgbokGxlM" rel="nofollow noreferrer">This</a> is my favorite image that I've ever produced (linking externally because it's 80 MB large; it's just my Google Drive. It's safe I swear!). Here's a <em>tiny</em> sample of it:</p>

<p><a href="https://i.stack.imgur.com/ymKTu.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/ymKTu.jpg" alt="Colored Mandelbrot Sample"></a></p>

<p>I'd change it to something like:</p>

<pre><code>private int divergesAt(double real, double complex)
{
    ComplexNumber cn = new ComplexNumber(real, complex);
    ComplexNumber z = new ComplexNumber(0);

    for(int i = 0; i &lt; beta; i++)
    {
        z.add(z.square(), cn);

        if(z.real*z.real + z.complex*z.complex &gt; 4) { // Don't neglect braces!
            return i;
        }
    }

    return beta;
}
</code></pre>

<p>Then when you want to decide what color to make that pixel, do something like:</p>

<pre><code>int iters = divergesAt(x, y);

// java.awt.Color
Color pixelColor = new Color(wrap(x * iters), wrap(y * iters), wrap((x + y) * iters);
</code></pre>

<p>Where <code>wrap</code> is some function that wraps the value to ensure that it's always between 0 and 255.</p>

<p>You can create much more complicated "equations" as well though. <a href="https://github.com/carcigenicate/mandelbrot/blob/master/src/mandelbrot/coloring.clj" rel="nofollow noreferrer">Here</a> are some example equations that I used (in Clojure; although you should be able to figure out what's going on). <code>wr</code> is a <code>wrap</code> shortcut, <code>co</code> is a <code>Color</code> constructor shortcut, <code>x</code> and <code>y</code> are the pixel coordinates, and <code>n</code> is the number of iterations that pixel failed at. Play around with it. I spent days just trying out different coloring methods.</p>

<hr>

<p>On top of that, I have a couple comments regarding your <code>diverages</code> function:</p>

<ul>
<li><p>I would use far more whitespace, like how I showed in my example. Cramming everything together doesn't lend itself to readability.</p></li>
<li><p>It's very confusing to have <code>ComplexNumber</code> as a mutable class. It's a number. Numbers are immutable. Ideally, the class methods should all return new <code>ComplexNumbers</code> instead of mutating themselves. This has the potential to be expensive; especially in a language like Java that doesn't lend itself to dealing with immutability. It will make your code make more sense though, and prevent bugs from popping up caused by background mutation.</p></li>
<li><p>Don't be tempted to neglect braces just because they aren't necessary! Many odd bugs have occurred because we told ourselves "I'll definitely remember to add braces if I refactor this later". Limit your ability to cause future problems for yourself.</p></li>
</ul>

<hr>

<p>On your question about precision, the only way I found around that was to use <code>BigDecimal</code>; but this creates <em>massive</em> performance problems. I found using doubles actually lets you zoom in pretty far before stuff starts getting weird. I actually found my iteration limits (like your <code>beta</code> here) to be larger deciding factors in how the final image looks. Anything less than 200 for the limit causes noticeable missed details to start popping up. </p>
    </div>