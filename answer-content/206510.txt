<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Errors</h1>

<pre>


</pre>

<p>The code block above is an example where your program will fail. Any empty line will lead to an empty list in <code>words ""</code> and therefore to <code>head []</code>, which calls <code>error</code>.</p>

<h1>Standard library</h1>

<p>That being said, there are some other issues with your code. You use <code>unlines</code> in <code>fixLines</code>, yet <code>leadWords</code> is essentially <code>lines</code>, although it also uses <code>head . words</code> internally. If we rewrite <code>leadWords</code> with <code>map</code>, we end up with</p>

<pre><code>leadWords = map (head . words) . lines
</code></pre>

<p>which immediately shows the possible error on empty lines. Still, we can fix this if we write another function:</p>

<pre><code>firstWord :: String -&gt; Maybe String
firstWord xs = case words xs of
                   (x : _) -&gt; Just x
                   _       -&gt; Nothing
</code></pre>

<p>Now we can use <code>mapMaybe</code> from <code>Data.Maybe</code> to write <code>leadWords</code>:</p>

<pre><code>leadWords :: String -&gt; [String]
leadWords = mapMaybe firstWord . lines
</code></pre>

<h1>Type signatures</h1>

<p>Other than that, you should really add type signatures to your top-level functions. Only <code>fixLines</code> has one, and its not clear why that one got special handling.</p>

<h1>Code complexity</h1>

<p><code>main</code> is overly complicated, too. We can just inline <code>mainWidth</code>, as its local binding doesn't yield any more comfort:</p>

<pre><code>main :: IO ()
main =  do
    args &lt;- getArgs
    case args of 
        [input, output] -&gt; interactWith fixLines input output
        _               -&gt; putStrLn "error: exactly two arguments needed"
</code></pre>

<p>Alternatively, we can provide <code>mainWith</code> <em>as top level function</em> and use that in <code>main</code>. </p>

<h1>Complete code</h1>

<p>If we apply all remarks given above, we end up with something similar to the following code:</p>

<pre><code>import Data.Maybe (mapMaybe)

mainWith :: (String -&gt; String) -&gt; IO ()
mainWith f = do
    args &lt;- getArgs
    case args of 
        [input, output] -&gt; interactWith f input output
        _               -&gt; putStrLn "error: exactly two arguments needed"

fixLines :: String -&gt; String
fixLines = unlines . leadWords

main :: IO ()
main = mainWith fixLines

-- for completeness

leadWords :: String -&gt; [String]
leadWords = mapMaybe firstWord . lines

firstWord :: String -&gt; Maybe String
firstWord xs = case words xs of
                     (x : _) -&gt; Just x
                     _       -&gt; Nothing

-- That's just personal preference, your style is fine.
interactWith :: (String -&gt; String) -&gt; FilePath -&gt; FilePath -&gt; IO ()
interactWith f input output = readFile input &gt;&gt;= writeFile output . f
</code></pre>

<p>In short:</p>

<ul>
<li>add type signatures to top-level functions</li>
<li>don't use <code>head</code> on lists that might be empty</li>
<li>use standard library types when possible (<code>Maybe</code>)</li>
<li>use standard library functions when possible (<code>map</code>, <code>lines</code> and <code>mapMaybe</code>)</li>
</ul>
    </div>