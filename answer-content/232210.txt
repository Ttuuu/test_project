<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While your goals may be admirable, I think that, when performance takes a large hit, the whole approach needs to be re-examined. This is atleast 5X's slower than a comparable one liner, even after removing the <code>Combine()</code> method and just returning an <code>IEnumerable&lt;string&gt;</code>. </p>

<p>If someone wanted to test with different terms(ie 7 and 9) and/or different words(ie "Fazz" and "Bizz") your code would need to be modified and re-compiled.</p>

<p>The <code>DoThis</code> method doesn't check that the <code>data</code> is an appropriate parameter for the <code>action</code>.</p>

<p>The methods particular to <code>Fizz</code> and <code>Buzz</code> basically are just duplicated code.  It would seem to me that methods that also take the appropriate <code>Fizz</code> or <code>Buzz</code> value would still be useable but would eliminate much of the duplication.</p>

<p>Here's the one liner I used as comparison:</p>

<pre><code>using kvp = KeyValuePair&lt;int, string&gt;;

/// &lt;summary&gt;
/// Creates IEnumerable&lt;string&gt; with the appropriate FizzBuzz values.
/// &lt;/summary&gt;
/// &lt;param name="terms"&gt; This must be 2 elements long&lt;/param&gt;
public static IEnumerable&lt;string&gt; FizzBuzz(this int limit, bool parallel = false,
                                           params KeyValuePair&lt;int, string&gt;[] terms)
{
    if(terms.Length != 2)
    {
        throw new ArgumentException("'terms' length must be 2");
    }
    if (parallel)
    {
        return Enumerable.Range(1, limit)
            .AsParallel()
            .Select(x =&gt;
            {
                var fizz = x % terms[0].Key == 0;
                var buzz = x % terms[1].Key == 0;
                return (fizz &amp;&amp; buzz) ? $"{terms[0].Value}{terms[1].Value}" : (fizz || buzz) 
                       ? fizz ? terms[0].Value : terms[1].Value : x.ToString();
            });

    }
    else
    {
        return Enumerable.Range(1, limit)
            .Select(x =&gt;
            {
                var fizz = x % terms[0].Key == 0;
                var buzz = x % terms[1].Key == 0;
                return (fizz &amp;&amp; buzz) ? $"{terms[0].Value}{terms[1].Value}" : (fizz || buzz) 
                       ? fizz ? terms[0].Value : terms[1].Value : x.ToString();
            });
    }

}
</code></pre>
    </div>