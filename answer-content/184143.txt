<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I hope that since you asked...</p>

<blockquote>
  <p>Is there a way I could have avoided the 'o' counter in my for loop and instead selected the array in a different way?</p>
</blockquote>

<p>... you're open to completely different approaches. If that's correct, I reckon that there is a simpler way to do this.</p>

<h3>Just slice that array</h3>

<p>Actually, you almost get it when you did:</p>

<pre><code>inArr.sort();
</code></pre>

<p>As you'll see, sorting the array is the key here. If you stop to think, after sorting (in ascending order) your array:</p>

<ul>
<li><code>minSum</code> is just the sum of all elements <strong>except the last one</strong>;</li>
<li><code>maxSum</code> is just the sum of all elements <strong>except the first one</strong>.</li>
</ul>

<p>That being said, you can sort your array...</p>

<pre><code>arr.sort();
</code></pre>

<p>... and, after that, using a very basic function to sum elements, like <code>reduce</code>...</p>

<pre><code>function sum(subArr) {
  return subArr.reduce(function(a, b) {
    return a + b;
  }, 0);
}
</code></pre>

<p>... that you call on different slices of the array:</p>

<pre><code>var minSum = sum(arr.slice(0, -1))//all elements except the last one
var maxSum = sum(arr.slice(1))//all elements except the first one
</code></pre>

<p>Here is the demo, with different arrays:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function miniMaxSum(arr) {
  arr.sort();
  var minSum = sum(arr.slice(0, -1))
  var maxSum = sum(arr.slice(1))
  console.log(minSum, maxSum)
}

function sum(subArr) {
  return subArr.reduce(function(a, b) {
    return a + b;
  }, 0);
}

miniMaxSum([1, 4, 2, 5, 3])
miniMaxSum([42, 24, 12, 57, 3])
miniMaxSum([100, 102, 101, 103, 104])</code></pre>
</div>
</div>


<h3>It gets simpler</h3>

<p>The solution above, using <code>reduce</code>, works with an array of any length:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function miniMaxSum(arr) {
  arr.sort();
  var minSum = sum(arr.slice(0, -1))
  var maxSum = sum(arr.slice(1))
  console.log(minSum, maxSum)
}

function sum(subArr) {
  return subArr.reduce(function(a, b) {
    return a + b;
  }, 0);
}

miniMaxSum([1, 4, 7, 5, 3, 8, 6, 2])</code></pre>
</div>
</div>


<p>However, as the the challenge says that you'll always be given <strong>five</strong> integers, and as your very solution only accepts an array with 5 integers...</p>

<pre><code>i &gt;= arr.length - 4, o &lt; 4
</code></pre>

<p>... this could be even simpler, dropping both the <code>reduce</code> and the <code>for</code> loop: </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function miniMaxSum(arr) {
  arr.sort();
  var minSum = arr[0] + arr[1] + arr[2] + arr[3]
  var maxSum = arr[1] + arr[2] + arr[3] + arr[4]
  console.log(minSum, maxSum)
}

miniMaxSum([1, 4, 2, 5, 3])
miniMaxSum([42, 24, 12, 57, 3])
miniMaxSum([100, 102, 101, 103, 104])</code></pre>
</div>
</div>


<h3>It gets even more simple: no sort</h3>

<p>Using <code>sort</code> can greatly increase the time complexity. The good news is that there is a solution without <code>sort</code>. It's based on this simple logic, as described in <a href="https://codereview.stackexchange.com/a/184170/143592">this other answer</a>:</p>

<ul>
<li><code>minSum</code> is just the sum of all elements <strong>except the smallest one</strong>;</li>
<li><code>maxSum</code> is just the sum of all elements <strong>except the biggest one</strong>.</li>
</ul>

<p>Therefore, you just need to sum all elements, then subtract the smaller one to get <code>minSum</code> and subtract the biggest one to get <code>maxSum</code>.</p>

<p>So, here is yet another solution, without any <code>sort</code>:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function miniMaxSum(arr) {
  var min = Infinity,
    max = -Infinity,
    count = 0;
  for (var i = 0; i &lt; arr.length; i++) {
    count += arr[i];
    min = arr[i] &lt; min ? arr[i] : min;
    max = arr[i] &gt; max ? arr[i] : max;
  }
  console.log(count - min, count - max)
}

miniMaxSum([1, 4, 2, 5, 3])
miniMaxSum([42, 24, 12, 57, 3])
miniMaxSum([100, 102, 101, 103, 104])</code></pre>
</div>
</div>


<h3>Performance</h3>

<p>Regarding the performance, your code (<code>for</code> loop) is around 5% faster than mine (<code>reduce</code>), have a look here: </p>

<p><a href="https://jsperf.com/minmaxsum" rel="noreferrer">https://jsperf.com/minmaxsum</a></p>

<p>I believe 5% is not a big value, but if you are ultra-concerned about performance, stick with the <code>for</code> loop.</p>

<p>Of course, the simple solution (just adding the elements of the array) is, as expected, faster than both:</p>

<p><a href="https://jsperf.com/minmaxsum-v2/1" rel="noreferrer">https://jsperf.com/minmaxsum-v2/1</a></p>

<p>Funnily enough, the "no sort" version doesn't seem to be that fast in the JSPerf test:</p>

<p><a href="https://jsperf.com/min-max-sum-v3/1" rel="noreferrer">https://jsperf.com/min-max-sum-v3/1</a></p>

<hr>

<p>PS: be careful with the names: in your snippet you have a parameter named <code>inArr</code>, but there is no <code>arr</code> anywhere.</p>
    </div>