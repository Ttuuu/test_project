<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>handleFileSelect</code> is an <a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch3.html" rel="nofollow noreferrer">Impure Function</a></h1>

<p><code>handleFileSelect</code> has in your code snippet a dependence to <code>fr</code> which is decleraded outside of the function. To make the function pure you can pass <code>fr</code> as argument.</p>

<pre><code>// impure..
function handleFileSelect (evt) {
    fr.readAsText(evt.target.files[0])
}

// pure
function handleFileSelect (fr, evt) {
    fr.readAsText(evt.target.files[0])
}
</code></pre>

<h1>Put Side Effects Into a <a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch8.html#old-mcdonald-had-effects" rel="nofollow noreferrer">Wrapper</a></h1>

<blockquote>
  <p>A pure function returns for the same input always the same output.</p>
</blockquote>

<p>The function <code>writeInfo</code> contains side effects because we access the DOM. We could wrap the DOM functions in to a wrapper called <a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch8.html#old-mcdonald-had-effects" rel="nofollow noreferrer"><code>IO</code></a> which will always return a function - <em>always the same function</em>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const IO = x =&gt; ({
    map: (fn) =&gt; IO(x(fn)),
    run: () =&gt; x()
})

// more about compose and the benefits on
// https://medium.com/javascript-scene/composing-software-an-introduction-27b72500d6ea
const compose = (f, g) =&gt; x =&gt; f(g(x))

const getElementById = id =&gt; IO(() =&gt; document.getElementById(id))
const writeInnerHTML = value =&gt; element =&gt; IO(() =&gt; element.run().innerHTML = value)

const selectAndWrite = value =&gt; compose(
  writeInnerHTML(value),
  getElementById
)

const writeInfo = data =&gt; IO(() =&gt; {
  selectAndWrite('Traveler: ' + data.traveler_num)('traveler_num').run()
  selectAndWrite('First Name: ' + data.first_name)('first_name').run()
})

// ONLY this call is impure
writeInfo({
  traveler_num: 500,
  first_name: 'Steven'
}).run()</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;ul&gt;
  &lt;li id="traveler_num"&gt;&lt;/li&gt;
  &lt;li id="first_name"&gt;&lt;/li&gt;
&lt;ul&gt;</code></pre>
</div>
</div>


<h1><a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch8.html#pure-error-handling" rel="nofollow noreferrer">Either</a> You Can Parse to a JSON or Not..</h1>

<p>In the following I want to introduce a <a href="https://medium.com/@dtinth/what-is-a-functor-dcf510b098b6" rel="nofollow noreferrer">functor</a> calles <a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch8.html#pure-error-handling" rel="nofollow noreferrer">Either</a> which is split into to functors <code>Left</code> and <code>Right</code>. If we can parse a string succesfully we will return a <code>Right</code> with the parsed value otherwise we will return <code>Left</code> with an error message. </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const Left = x =&gt; ({
  map: (fn) =&gt; Left(x),
  get: () =&gt; x
})

const Right = x =&gt; ({
  map: (fn) =&gt; Right(fn(x)),
  get: () =&gt; x
})

const tryFunction = (errorMessage, fn) =&gt; x =&gt; {
  try {
    return Right(fn(x))
  } catch (error) {
    return Left(errorMessage)
  }
}

const parseToJson = tryFunction('Can\'t pase to JSON', JSON.parse)

console.log('should be {"name": "Random Name"}:', parseToJson('{"name": "Random Name"}').get())
console.log('should be "Can\'t pase to JSON":', parseToJson('{name: Random Name}').get())</code></pre>
</div>
</div>


<h1>References</h1>

<p>The free online book <a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/" rel="nofollow noreferrer">mostly-adequate-guide</a> is very good<br>
The series <a href="https://medium.com/javascript-scene/composing-software-an-introduction-27b72500d6ea" rel="nofollow noreferrer">composing-software</a> is a good way to start</p>
    </div>