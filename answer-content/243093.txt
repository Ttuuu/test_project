<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Avoid repeating in the CSS. The rules for the classes <code>chevron-up</code> and <code>chevron-down</code> are identical except for the image. Have a separate rule f√ºr the common properties like this:</p>

<pre><code>.chevron-up, .chevron-down {
  height: 30px;
  width: 30px;
  display: inline-block;
  background-repeat: no-repeat;
  background-position: center;
}

.chevron-up {
  background-image: url(...);
}

.chevron-down {
  background-image: url(...);
}
</code></pre>

<p>(NB, unless it's just for this example, don't use <code>data:</code> URLs. They bloat the CSS.)</p>

<p>Or, if you have more similar icons, use a separate class:</p>

<pre><code>.icon {
  height: 30px;
  width: 30px;
  display: inline-block;
  background-repeat: no-repeat;
  background-position: center;
}

.chevron-up {
  background-image: url(...);
}

.chevron-down {
  background-image: url(...);
}
</code></pre>

<p>with</p>

<pre><code>&lt;span class="icon chevron-up"&gt;&lt;/span&gt;
</code></pre>

<p>BTW, it's invalid HTML to use self-closing tags (<code>&lt;span /&gt;</code>) on elements such as <code>span</code>. They must be written with explicit start and end tags.</p>

<p>You should consider removing these icon elements anyway. HTML should contain content and empty elements like that aren't content. Instead use the CSS pseudo-element <code>::after</code>:</p>

<pre><code>.collapsible::after {
  content: "";
  height: 30px;
  width: 30px;
  display: inline-block;
  background-repeat: no-repeat;
  background-position: center;
  background-image: url(...); // chevron-down icon
}

.collapsible.active::after {
  background-image: url(...); // chevron-up icon
}
</code></pre>

<p>This way you also don't need to switch the <code>chevron-up</code>/<code>chevron-down</code> classes in the JavaScript.</p>

<p>In JavaScript don't use the <code>on...</code> event properties. The <code>on...</code> properties only allow a single event handler, that can be overwritten by a different script. Instead us <code>addEventListener</code>.</p>
    </div>