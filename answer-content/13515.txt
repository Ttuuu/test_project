<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might consider making this an extension method on <code>Pair</code> instead of <code>object</code>.  You could simplify it to this:</p>

<pre><code>public static IEnumerable&lt;Pair&gt; Flatten(this Pair p, List&lt;Pair&gt; toBuild = null)
{
   if (toBuild == null)
      toBuild = new List&lt;Pair&gt;();

   if (p.First is Pair)
   {
      (p.First as Pair).Flatten(toBuild);
   }
   else if (p.First is IEnumerable)
   {
      foreach (object o in (p.First as IEnumerable).OfType&lt;object&gt;().Where(ob =&gt; ob is Pair))
      {
         (o as Pair).Flatten(toBuild);
      }
   }

   //repeat for p.Second

  toBuild.Add(p);
  return toBuild;
}
</code></pre>

<p>You can use it like this:</p>

<pre><code>var result = myPair.Flatten();
</code></pre>

<p>Or on an <code>IEnumerable&lt;Pair&gt;</code>:</p>

<pre><code>var result = myList.SelectMany(p =&gt; p.Flatten());
</code></pre>

<p>Or on a regular <code>IEnumerable</code>:</p>

<pre><code>var result = myList.OfType&lt;object&gt;().Where(o =&gt; o is Pair)
  .SelectMany(p =&gt; (p as Pair).Flatten());
</code></pre>
    </div>