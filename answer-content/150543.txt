<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, you should ask yourself whether the names you chose are good. For example, a typical game of connect four takes place on a single <em>Board</em>, yet you defined an array of boards and call this array a board. This doesn't make sense.</p>

<p>A completely different topic is spelling rules. In Java, field and variable names start with a lowercase letter. You have <code>Board Board</code> sometimes, which confuses every reader.</p>

<p>You did not say what you mean by <em>optimize</em>. But no matter if it's for speed or for clarity, you should separate the complicated game logic from the user interface logic. Doing this enables you to test the game logic using unit tests.</p>

<p>If you strive for speed, you should remember the last position where a piece was dropped, since you only need to check at this particular position whether there is a new row of 4.</p>

<p>Please use a program that formats your code whenever you save it. This will make it look more consistent.</p>

<p>Your use of the random number generator is unfair, since it favors lower indexes. A quick fix would be <code>(int)(Math.random() * bestMoves.size())</code>, but that still looks complicated. A better way is to define a random number generator and ask it for integer numbers:</p>

<pre><code>class MiniMax {
    Random rnd = new Random();

    int randomMove() {
        return bestMoves.get(rnd.nextInt(bestMoves.size());
    }
}
</code></pre>

<p>Note that I changed the class name from <code>Tree</code> to <code>MiniMax</code>. By choosing clear names you make the comments of the form <code>// This is â€¦</code> superfluous.</p>
    </div>