<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Coding style</h3>

<p>Your code passes the <a href="http://pep8online.com" rel="nofollow noreferrer">PEP8 online</a> check without errors or warnings, that's great.</p>

<h3>Naming</h3>

<p>The function name <code>function</code> is pretty non-descriptive. The Leetcode template uses <code>canJump</code>, but according to Python <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a></p>

<blockquote>
  <p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p>
</blockquote>

<p>that would be <code>can_jump</code>. Your <code>output</code> array stores which positions are reachable from the initial position, a better name might be <code>reachable</code>. The <code>index</code> is the current <em>position,</em> and <code>number</code> is the <em>jump width</em> at that position.</p>

<h3>Coding improvements</h3>

<p>The <code>output</code>/<code>reachable</code> array should be an array of <em>boolean</em> values instead of integers. The test</p>

<pre><code>if output[index] == 0:
    continue
</code></pre>

<p>is not needed, and the test</p>

<pre><code>if output[last_index] == 1:
    return True
</code></pre>

<p>needs only to be done at reachable positions. Summarizing the suggestions so far, we have</p>

<pre><code>def can_jump(nums):
    if len(nums) == 1:
        return True
    reachable = [False] * len(nums)
    last_pos = len(nums) - 1
    reachable[0] = True

    for pos, jump_width in enumerate(nums):
        if reachable[pos]:
            stop_at = min(last_pos, pos + jump_width)
            for i in range(pos, stop_at + 1):
                reachable[i] = True
            if reachable[last_pos]:
                return True
    return False
</code></pre>

<h3>Performance improvements</h3>

<p>The crucial observation is that the list of reachable positions is always an <em>interval</em> (from position <code>0</code> to some maximal reachable position). This interval can be described by a single integer variable</p>

<pre><code>last_reachable = 0
</code></pre>

<p>which is updated while traversing the array. I won't deprive you of the satisfaction to program the solution yourself, therefore I'll mention only the general idea. While enumerating the array:</p>

<ul>
<li>If the current position is not reachable then return <code>False</code>.</li>
<li>Otherwise, update <code>last_reachable</code> with the maximum of its current value and the greatest position reachable from the current position.</li>
<li>Return <code>True</code> as soon as the final position turns out to be reachable. </li>
</ul>

<p>This approach needs less memory (no additional array), and only a simple loop instead of nested loops.</p>
    </div>