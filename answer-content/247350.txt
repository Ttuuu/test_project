<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Generalizing your graph search function</h1>
<p>The reason you had to write two versions of the graph search algorithm is that you merged the search operation with the action you want to perform on each node. You have to separate the two.</p>
<p>There are various approaches you could use. One is to create an iterator class that can be used to iterate over the graph in the desired order, so that you could just write something like:</p>
<pre><code>for (auto v: dfs(matrix)) {
    path.push_back(v);
}
</code></pre>
<p>Alternatively, you can write a function that takes a <a href="https://en.cppreference.com/w/cpp/utility/functional" rel="nofollow noreferrer">function object</a> as a parameter, and applies it on each node that it finds in the desired order. You also want to avoid having to pass <code>visited</code> and <code>v</code> as a parameter to <code>dfs()</code>, since those variables are just internal details of the DFS algorithm, you should not expose that.</p>
<pre><code>static void dfs_impl(const matrix_t &amp;matrix, std::function&lt;void(int)&gt; &amp;func, static void dfs_impl(const matrix_t &amp;matrix, const std::function&lt;void(int)&gt; &amp;func, std::vector&lt;bool&gt; &amp;visited, int v) {
    visited[v] = true;

    func(v);

    for (int i = 0; i &lt; matrix.size(); ++i) {
        if (matrix[v][i] &amp;&amp; !visited[i]) {
            dfs_impl(matrix, func, visited, i);
        }
    }
}

void dfs2(const matrix_t &amp;matrix, int root, const std::function&lt;void(int)&gt; &amp;func) {
    std::vector&lt;bool&gt; visited(matrix.size());
    dfs_impl(matrix, func, visited, root);
}
</code></pre>
<p>Now you can call it like so:</p>
<pre><code>pts_t get_path() const {
    pts_t path_points;

    dfs(matrix, 0, [&amp;](int v){ path_points.push_back(points[v]); });

    path_points.push_back(path_points.front());
    return path_points;
}
</code></pre>
<p>And instead of calling <code>dfs_ep()</code>, you can write the following:</p>
<pre><code>matrix_t get_vertex_endpoints() const {
    matrix_t chains;
    std::vector&lt;bool&gt; visited(points.size());

    for (int i = 0; i &lt; points.size(); i++) {
        if (visited[i]) {
            continue;
        }

        std::vector&lt;int&gt; chain;

        dfs(matrix, i, [&amp;](int v){
            visited[v] = true;

            if (std::count(matrix[v].begin, matrix[v].end, 1) &lt;= 1) {
                chain.push_back(v);
            }
        });

        chains.push_back(chain);
    }

    return chains;
}
</code></pre>
<p>Note that here we had to keep a local vector <code>visited</code>. You could make it so you still pass a reference to <code>visited</code> to the function <code>dfs()</code>, but I find this is not as clean. Another approach is to have <code>dfs()</code> return an iterator to the next unvisited node:</p>
<pre><code>int dfs(...) {
    std::vector&lt;bool&gt; visited(matrix.size());
    dfs_impl(matrix, func, visited, root);
    return std::find(visited.begin() + root, visited.end(), false) - visited.begin();
}
</code></pre>
<p>In that case, you can rewrite <code>get_vertex_endpoints()</code> like so:</p>
<pre><code>matrix_t get_vertex_endpoints() const {
    ...
    for (int i = 0; i &lt; points.size();) {
        ...
        i = dfs(matrix, i, [&amp;](int v){
            ...
</code></pre>
<h1>Nesting <code>for</code>-loops</h1>
<p>It is probably possible to make the four nested <code>for</code>-loops in <code>get_distinct_pairs()</code> look better. You could make a class that allows iteration over pairs, and use some kind of <a href="https://ericniebler.github.io/range-v3/structranges_1_1views_1_1cartesian__product__fn.html" rel="nofollow noreferrer">Cartesian product</a> iterator from existing libraries, and use C++17 structured bindings to make the <code>for</code>-loops look approximately like this:</p>
<pre><code>for (auto [chain1, chain2]: pairs(chains)) {
    for (auto [vertex1, vertex2]: cartesian_product(chain1, chain2) {
        pairs.push_back({vertex1, vertex2});
    }
}
</code></pre>
<p>However, those functions are not in the standard library, so to be portable you'd have to implement them yourself. I don't think four nested loops is bad here, the comment explains what you are going to do.</p>
<p>The complexity is still just O(n^2).</p>
<h1>Other ways to make the code more readable</h1>
<p>There are lots of functions in the standard library that can help you. I already shown a few example above, where I used <a href="https://en.cppreference.com/w/cpp/algorithm/count" rel="nofollow noreferrer"><code>std::count()</code></a> and <a href="https://en.cppreference.com/w/cpp/algorithm/find" rel="nofollow noreferrer"><code>std::find()</code></a> to remove manual loops. Not only does it make the code shorter, it also expresses intent explicitly.</p>
<p>There's also some places where you can use <code>auto</code>, structured bindings and so on to reduce the amount of code without hurting readability. I'll mention some more specific things that can be improved below.</p>
<h1>Use <code>std::hypot()</code></h1>
<p>To compute the distance between two 2D points, you can make use of <a href="https://en.cppreference.com/w/cpp/numeric/math/hypot" rel="nofollow noreferrer"><code>std::hypot()</code></a>:</p>
<pre><code>double compute_distance(const pt_t&amp; pt1, const pt_t&amp; pt2) {
    return std::hypot(pt1.first - pt2.first, pt1.second - pt2.second);
}
</code></pre>
<h1>Write <code>std::ostream</code> formatters instead of <code>print()</code> functions</h1>
<p>Instead of writing <code>print_point(pt)</code>, wouldn't it be nicer to be able to write <code>std::cout &lt;&lt; pt &lt;&lt; '\n'</code>? You can do this by converting your printing functions to overload the <code>&lt;&lt;</code>-operator of <code>std::ostream</code>, like so:</p>
<pre><code>std::ostream &amp;operator&lt;&lt;(std::ostream &amp;o, const pt_t &amp;pt) {
    return o &lt;&lt; "(" &lt;&lt; pt.first &lt;&lt; ", " &lt;&lt; pt.second &lt;&lt; ")";
}
</code></pre>
<p>Apart from printing your own objects in a more idiomatic way, it's now also much more generic, and allows you to print to files, stringstreams, and everything else that is a <code>std::ostream</code>.</p>
<h1>Use <code>const</code> where appropariate</h1>
<p>Any time a function takes a pointer or reference parameter, and does not modify it, you should mark it as <code>const</code>, so the compiler can better optimize your code, and can give an error if you accidentily do modify it.</p>
<p>Also, class member functions that do not modify any of the member variables should also be marked <code>const</code>.</p>
    </div>