<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>file1_path == file2_path</code> surely tells that paths refer to the same file. However, even if <code>file1_path != file2_path</code> they still may refer to the same file.</p>
</li>
<li><p><code>file1_exists = std::filesystem::exists(file1_path);</code> introduces a TOC-TOU race condition. The file may exist at the time of test, yet disappear by the time of use. See the next bullet.</p>
</li>
<li><p><code>std::filesystem::rename</code> may fail. You call it tree times. If the second, or third call fails (with an exception!), the filesystem ends up not exactly in a state one would expect. Use a <code>noexcept</code> overload, test the <code>error_code</code> after each call, and roll back all actions prior to failure. That would also automagically take care of the nonexistent paths.</p>
</li>
<li><p>Do not <code>assert</code>. It is only good to catch bugs, not the runtime problems. In the production code (compiled with <code>-DNDEBUG</code>) it does nothing, and your program wouldn't detect an <code>mkstemp</code> failure.</p>
</li>
<li><p>The program silently does nothing if called with, say, 4 arguments. It also takes so much effort if called with 2 arguments. Calling <code>print_help()</code> any time <code>argc != 3</code> is much more straightforward.</p>
</li>
</ul>
    </div>