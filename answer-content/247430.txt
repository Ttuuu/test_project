<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This answer is more philosophical than it is technical, as your question revolves around intent and communication, not technical implementation or syntax (directly). You have some expectations, but aren't quite taking them to their logical conclusion.</p>
<p>If you're just interested in the code, read the last section. The rest is explanation and justification as to why this is a better approach.</p>
<hr>
<h2>Your intentions are unclear</h2>
<blockquote>
<p>I want the user of the class to know that setting the Slug property to null is supported</p>
</blockquote>
<blockquote>
<p>... it requires the user of the Post class to know that a null value can be safely passed into its Slug property -- something I wish to avoid"</p>
</blockquote>
<p>That's a contradiction.</p>
<p>The reason I'm bringing this up is because this question revolves around communication between developer and consumer, not technical implementation (directly). But if you want your developer and consumer to be on the same page, you need to first know what that page is supposed to be, and that contradiction isn't helping you.</p>
<hr>
<h2>The typical property</h2>
<p>Generally, you expect a gettable and settable property to retain the state you set.</p>
<pre><code>var myClass = new MyClass();
myClass.MyProperty = "hello";

Assert.AreEqual(myClass.MyProperty, "hello"); // Should pass!
</code></pre>
<p>That is the default expectation on how a property behaves. Is that behavior set in stone? No. Clearly, the language/compiler allows you to implement your properties completely differently.</p>
<p>But doing so means you go against the consumer's natural intuition on how a property behaves.</p>
<p>The conclusion I'm trying to get to here is that <strong>you need a valid reason to deviate from the default property behavior</strong>, if you want to justify the cognitive cost to your consumer, who now has to know about this atypical behavior in your implementation.</p>
<p>Sometimes, this can already be contextually understood, e.g. if your setter cleans up an understandable-but-abnormal value (e.g. a file path with consecutive separators). Sometimes, this requires documentation to explain to the consumer.</p>
<p>I have no idea what a <code>Slug</code> is, so I can't judge this part. Based on the root your question, it would seem that this needs to be explicitly communicated to the consumer.</p>
<hr>
<h2>The <code>null</code> crutch</h2>
<p>Historically, <code>null</code> is a controversial topic. Some developers hate it, some use it religiously. I'm not making any definitive statements here. Let's avoid a holy war and try to find middle ground: <code>null</code> can have its purposes, but <code>null</code> can also be abused.</p>
<p>One clear abuse of <code>null</code> is when developers use it as an additional value which they don't bother to further define. The clearest example here is turning a <code>bool</code> into a <code>bool?</code> when a third state needs to be added. It should've been an enum with 3 members, but <code>null</code> is being introduced as the third value instead, as a shortcut.</p>
<p>What you're doing here is similar. Your <code>Slug</code> doesn't have "the chosen value or <code>null</code>", your <code>Slug</code> has "the chosen value <strong>or a default value</strong>". You've just <em>chosen</em> to represent that <em>choice</em> of setting the default value using <code>null</code> (and then subsequently translate a <code>null</code> into the actual default value you want), which in my book counts as the same <code>null</code> abuse I just described.</p>
<hr>
<h2>Solution: the named default</h2>
<p>We've addressed several issues:</p>
<ul>
<li>The way you're suggesting to use your property is atypical and would require the consumer to learn the specifics of your implementation</li>
<li>The way you're suggesting <code>null</code> should be used to set a (non-null) default value is atypical and would require the consumer to learn the specifics of your implementation.</li>
</ul>
<p>This can't live in the same world as:</p>
<ul>
<li>You want the code to be self-documenting towards the consumer.</li>
</ul>
<p><strong>If you stray from the beaten path, then people won't find their way on their own.</strong></p>
<p>To solve the above issues, we should make the "default" value an explicit part of the contract of your <code>Post</code> class. This way, your consumer can figure out that there is a default value, and how to set it, without needing to read additional documentation.</p>
<p>The simplest solution here is to stick with a non-null property, and add a secondary route to set that property value.</p>
<pre><code>public class Post
{
    public string Title { get; }
    public string Slug { get; set; }

    public Post(string title)
    {
        Title = title;
        SetDefaultSlug();
    }

    public void SetDefaultSlug()
    {
        Slug = title.Slugify();
    }
}
</code></pre>
<p>The main difference between this answer and the already given answer by dumetrulo is that <strong>this version can revert back to the default</strong>, whereas the other answer's default, once removed, cannot be retrieved (since your consumer doesn't know how you calculate the default value.</p>
<hr>
<p>Additionally, you can argue that you should still use the default value when the custom value doesn't pass a certain validation (e.g. no empty strings).<br>
I can see arguments pro and con, depending on whether you consider this a valid responsibility of your class. That's a contextual consideration which I cannot conclusively judge. Should you judge it to be relevant, you can change your <code>Slug</code> property to:</p>
<pre><code>private string _slug;
public string Slug
{
    get
    {
        return ValidateSlug()
                 ? _slug
                 : title.Slugify();
    }
    set { _slug = value; }

}

private bool ValidateSlug()
{
    return !String.IsNullOrWhitespace(_slug);
}
</code></pre>
<p><em>A null or empty check is just a basic example. This could be based on length, profanity filter, ... Your business validation is your own decision.</em></p>
<p>However, do keep in mind that we're getting into atypical property behavior again. If your <code>Post</code>'s responsibility includes sanitizing the slug (which would be the basis for adding the above code), then that's a valid justification for changing the property's default behavior.</p>
<p>But that depends on the notion that the consumer inherently understands that the <code>Post</code> class will sanitize the slug as it sees fit.</p>
    </div>