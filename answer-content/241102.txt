<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>File layout</h2>

<p>The choice of splitting your data into three files seems odd to me. I'm not sure what <code>cs-values</code> is, but I imagine you can get away with only <code>records.csv</code> and columns:</p>

<ul>
<li><code>start_time</code></li>
<li><code>end_time</code></li>
<li><code>state</code></li>
<li><code>cs_values</code></li>
</ul>

<p>(Underscore for consistency.) Duration wouldn't be useful to store separately since it can be calculated as the difference between the start and end. <code>state</code> would be serialized from an enumeration, being <code>PENDING</code>, etc.</p>

<h2>Typo</h2>

<p><code>displayes</code> -&gt; <code>displays</code></p>

<h2>Negative length?</h2>

<pre><code>if len(p) &lt;= 0:
</code></pre>

<p>doesn't make a lot of sense for a <code>dict</code>. If you write <code>if not p</code>, it will catch both a <code>None</code> reference and a zero-length reference. Dictionaries can never have a negative length.</p>

<h2>Inner lists</h2>

<p>The brackets should be dropped from this:</p>

<pre><code>max([len(key) for key in p.keys()])
</code></pre>

<p>because you don't need an intermediate, in-memory list.</p>

<h2>display_dict</h2>

<p>I'm not sure what this offers that <code>pprint</code> doesn't. I would just use <code>pprint</code>. The formatting is not exactly the same, but <code>pprint</code> has more functionality for nested structures and is a built-in module.</p>

<h2>Global constants</h2>

<pre><code>time_format = '%Y-%m-%d %H:%M:%S.%f' #python datetime default format.
</code></pre>

<p>should have a capitalized variable, i.e. <code>TIME_FORMAT</code>.</p>

<h2>Unpacking</h2>

<pre><code>        activity = line[0]
        time = dt.strptime(line[1], time_format) 
</code></pre>

<p>can use unpacking from <code>line</code>:</p>

<pre><code>activity, time_str = line
</code></pre>

<h2>Read-or-create</h2>

<p>This logic seems odd:</p>

<pre><code>try:
    with open('pending.csv', 'r+', newline='') as p:
        csv_reader = reader(p)
        pending = {}
        for line in csv_reader:
            activity = line[0]
            time = dt.strptime(line[1], time_format) 
            pending[activity] = time
#if the file doesn't exist create it:
except FileNotFoundError:                     
    with open('pending.csv', 'x') as p:
        pending = {}
</code></pre>

<p>If the file does not exist, why create it here? Write mode will create it if it does not exist.</p>

<h2>Did you mean</h2>

<p>This:</p>

<pre><code>#checking for typos.
typo = 0
for char in 'duration':
    if char in new_activity:
        typo += 1
</code></pre>

<p>is a somewhat rough string distance. You should read about the <a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow noreferrer">Levenshtein distance</a>.</p>

<h2>Multiple <code>print</code></h2>

<p>This:</p>

<pre><code>print(), print(), print(), print(), print(), print(), print(), print() 
</code></pre>

<p>can just be replaced by</p>

<pre><code>print('\n' * 7)
</code></pre>
    </div>