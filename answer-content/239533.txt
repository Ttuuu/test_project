<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off, some minor nitpicks on style.</p>

<ul>
<li>In Python, variables are usually given names <code>like_this</code> rather than <code>likeThis</code> - most of your names are fine, but <code>userInput</code> should probably be <code>user_input</code> instead.</li>
<li>You usually want a space on each side of operators, <code>guess = int(input())</code> is more pleasant to look at than <code>guess=int(input())</code></li>
</ul>

<p>Second, your program's behaviour is different from what I'd expect in some subtle ways.</p>

<ul>
<li>If I enter a number above 20, I get both a reminder that "[you] said between 0 and 20" and a message that says my guess is "too big". While both are <em>accurate</em>, only the first is really necessary.</li>
<li>If I enter a negative number, I'm <em>not</em> reminded that my guess must be between 0 and 20, I'm just told that my guess is too low. Again, that is <em>true</em>, but since you already have a message that says my guess is outside the acceptable range, I'd expect to see that message instead.</li>
<li>If I enter something that isn't a number at all, the program crashes entirely. I would've expected you to catch the <code>ValueError</code> thrown by the <code>guess = int(input())</code> line and give me a cheeky error message instead.</li>
</ul>

<p>Third, structure.</p>

<ul>
<li>Why is the <code>if num == guess</code> there? The program seems to behave exactly the same if that function begins with the <code>while ...</code> line, and the code feels a bit cleaner.</li>
<li><code>random_num_checker</code> is reponsible for asking the player for numbers until they guess the right one. Why, then, does it not also prompt for the first guess, but rather expect that one to be passed as an argument? It feels weird.</li>
<li>Constants should preferably be defined in one place only, in case you want to change them. I'd have liked to see the lowest and highest possible guesses be defined as constants. It's not a huge deal in a small program like this, but it's generally good practice.</li>
<li>On a related note, taking the minimumand maximum allowed guesses as parameters would make the <code>random_num_checker</code> function more flexible.</li>
</ul>

<p>Based on this, I'd write something kind of like this:</p>

<pre><code>MIN_GUESS = 0
MAX_GUESS = 20

def random_num_checker(goal, min_guess, max_guess):
    # Some sanity checks, in case someone wants to use this function for their own game
    if type(goal) is not int:
        raise TypeError(f'Goal must be an int, was {type(goal)}')
    elif goal &lt; min_guess or goal &gt; max_guess:
        raise ValueError(f'Goal must be within the allowed guessing range ({min_guess}-{max_guess}), was {goal}')

    print(f'Enter a number between {min_guess} and {max_guess}')
    guess = None
    while guess != goal:
        try:
            guess = int(input())

            if guess &gt; max_guess or guess &lt; min_guess:
                print(f'I said between {min_guess} and {max_guess}')
            elif guess &gt; goal:
                print('Too high')
            elif guess &lt; goal:
                print('Too low')
        except ValueError:
            print('That doesn\'t look like a number to me')
            guess = None

    print("CORRECT")


random_number = random.randint(MIN_GUESS, MAX_GUESS)
random_num_checker(random_number, MIN_GUESS, MAX_GUESS)
</code></pre>
    </div>