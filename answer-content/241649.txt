<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Addressing your questions:</p>

<ol>
<li><p>Readability</p>

<p>The docstrings are generally fine. Not too long, not too short.</p>

<ul>
<li><p>Type hints:</p>

<p>Your type hints should not go into the first line of the docstring. That line is reserved for a brief description of the function.
Type hints go into the function signature directly, for example:</p>

<pre class="lang-py prettyprint-override"><code>def path_maker(self, root: str, file_name: str) -&gt; str:
    """Brief description.

    More.
    """
    pass
</code></pre></li>
<li><p>PEP8:</p>

<p>You followed conventions for the most part, which is good. Remaining points are:</p>

<ul>
<li>module names are <code>snake_case</code>, that is <code>ExtraInfo</code> should be <code>extra_info</code>. Note how at the time of writing, SE's syntax highlighting for Python flags your <code>ExtraInfo</code> module as a class instead.</li>
<li>Globals are <code>UPPERCASE</code>, i.e. <code>types, locations, docs, working_directories</code> become <code>TYPES, LOCATIONS, DOCS, WORKING_DIRECTORIES</code>.</li>
</ul></li>
</ul></li>
<li><p>Logical Errors</p>

<ul>
<li><p><code>break</code> is unreachable in <code>category_selector</code>:</p>

<pre class="lang-py prettyprint-override"><code>if extension != False:
    for category in types:
        if extension in types[category]:
            return category
            break
    return False
</code></pre>

<p>and <code>if extension != False</code> can just be <code>if extension</code>.</p></li>
</ul></li>
</ol>

<p>3./4. How to improve it and a better approach</p>

<p>Enter <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a>.
This module will be the single biggest improvement you can afford yourself in regards to your code.
It will get rid of the filthy string manipulations of <code>os.path</code>.
Paths will be treated as proper objects and the code will probably run OS-agnostically.</p>

<p>All of this assumes <code>from pathlib import Path</code>.</p>

<p>Without actually rewriting the entire thing for you, here are a couple of examples for the achievable simplifications:</p>

<hr>

<pre class="lang-py prettyprint-override"><code>os.path.join(root, file_name)
</code></pre>

<p>is turned into a method on a <code>Path</code>-like object:</p>

<pre class="lang-py prettyprint-override"><code>root.join(file_name)
</code></pre>

<p>To borrow one of your doctests:</p>

<pre class="lang-py prettyprint-override"><code>root = Path("home", "hama", "Downloads")
file_name = Path("area.cpp")
root.joinpath(file_name)
</code></pre>

<p>will output</p>

<pre class="lang-py prettyprint-override"><code>PosixPath('home/hama/Downloads/area.cpp')
</code></pre>

<p>on Unix.
Note the <code>*args</code> approach I took in declaring <code>Path()</code>.
No slashes used.
This gets rid of confusion about forward- and backward-slashes, so your script can run on any OS you want.
You can also pass your normal strings, like <code>home/hama/Downloads/area.cpp</code>, or iterables of string like lists.
<code>pathlib</code> understands a great deal of these.</p>

<p><code>file_name</code> can even be whatever <em>path</em> you would want, not just a single name.
This includes relative parts, aka <code>..</code>.
Then can then be resolved using the <code>resolve</code> method.</p>

<hr>

<p>In <code>extension_finder</code>,</p>

<pre class="lang-py prettyprint-override"><code>if os.path.exists(path):
    if os.path.isfile(path):
        return os.path.splitext(path)[1]
    return False
</code></pre>

<p>can be simplified using</p>

<pre class="lang-py prettyprint-override"><code>path.suffix
</code></pre>

<p>If <code>path</code> is a directory, the <code>.suffix</code> attribute will be an empty string.
You could then just rely on the empty string behaving falsy in boolean contexts.
The only thing you do with <code>extension_finder</code> is feeding it into <code>category_selector</code>.
More on that method later.</p>

<p>Note that, given the method name, <code>extension_finder</code>, I feel like it is not that method's responsibility to check for file existence.
You be the judge of that.
For existence checking, <code>Path</code> objects have <code>is_file()</code>, which includes <code>exists()</code> functionality.</p>

<p>Also note how for that function, you pass <code>self</code> and <code>path</code>, but do not use <code>self</code>.
This method is a prime candidate for a <code>staticmethod</code>.</p>

<pre class="lang-py prettyprint-override"><code>@staticmethod
def extension_finder(path: Path) -&gt; str:
    """Returns a path's file suffix.

    &gt;&gt;&gt; extension_finder("/home/hama/Downloads/area.cpp")
    ".cpp"
    &gt;&gt;&gt; extension_finder("/home/hama/Downloads/FuzzBuzz.py")
    ".py"
    """

    return path.suffix
</code></pre>

<p>Now that this method was simplified so strongly through the excellent <code>pathlib</code> capabilities, it stands to question whether you want to keep it around at all.
In this form, I vote for no.</p>

<hr>

<p>The logic in <code>category_selector</code> could then just be</p>

<pre class="lang-py prettyprint-override"><code>for category in types:
    if extension in types[category]:
        return category
</code></pre>

<p><code>extension</code> can now be an empty string, and as such is never found in <code>types[category]</code>. So that works as before.
The <code>return False</code> is now omitted.
If no match is found, the loop falls through and the function returns its default, <code>None</code>, which behaves like <code>False</code> in the boolean checks involving <code>category_selection</code>.</p>

<p>Note that if you want to retain the current behaviour, i.e. returning a special object, not an empty string from <code>extension_finder</code> if no <code>extension</code> was found, I suggest using <code>None</code> over <code>False</code>.
Same goes for <code>category_selector</code> here.
A return of <code>None</code> for a category makes much more sense: no category was found.
Returning <code>False</code> behaves similarly, but is less clear.</p>

<hr>

<p><code>get_prefix</code> and <code>get_original_name</code> are duplicate code, they are each other's opposite.
Really, only one method is required.
This method could be called <code>split_custom_prefix</code> and return a tuple for you to unpack.
It can look like</p>

<pre class="lang-py prettyprint-override"><code>stem = path.stem
if self.category_selector(self.extension_finder(path)) not in docs:
    split = 2
else:
    split = 3

return stem[:split], stem[split:]
</code></pre>

<p>where <code>stem</code> is the filename without the <em>last</em> extension.</p>

<p>Note that <code>2</code> and <code>3</code> are magic numbers.
You should find a way to avoid them, and codify their meaning into variables or logic with meaningful names.
Towards this, among many other things, you could look to <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer"><code>enum</code></a>.</p>

<hr>

<pre class="lang-py prettyprint-override"><code>for root, directories, files in os.walk(path.directory_path):
    root, directories, files = root, directories, files
    break
</code></pre>

<p>is an interesting one.
You do not use <code>directories</code> later on.
Name such variables <code>_</code>, as per convention, to signal that you have to accept an argument in that position but do not actually use it.</p>

<pre class="lang-py prettyprint-override"><code>root, directories, files = root, directories, files
</code></pre>

<p>Did you code this at 3 AM? ;)
This line can just be deleted.</p>

<p>I am not aware of an <code>os.walk</code> equivalent in <code>pathlib</code>.
If you really require the former, here is a better approach:</p>

<pre class="lang-py prettyprint-override"><code>root, directories, files = next(os.walk(path.directory_path))
</code></pre>

<p>using <code>next</code> to trigger the <code>generator</code> object returned by <code>os.walk</code> once.</p>

<hr>

<p>I am a fan of inverting logic like this</p>

<pre class="lang-py prettyprint-override"><code>if not (" " in current_file):
    new_file_destination = path.copy(
        current_file, destination_root)
else:
    continue
</code></pre>

<p>to</p>

<pre class="lang-py prettyprint-override"><code>if " " in current_file:
    continue
new_file_destination = path.copy(current_file, destination_root)
</code></pre>

<p>Gets rid of <code>else</code> (indentation) and is easier to understand.</p>

<hr>

<p>Lastly, avoid globals.
It is strange for the class to access globals.
You can assign these as instance or class attributes, whatever fits better.
For your categories, all instances can share the information, so class attribute it is.
Look into the <code>property</code> decorator to play around with this.
For example, this allows you to make the attributes immutable.</p>
    </div>