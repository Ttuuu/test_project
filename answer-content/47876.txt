<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few cosmetic changes to makes your code more beautiful/pythonic :</p>

<p><strong>Fix formatting</strong></p>

<ul>
<li>Remove some line breaks as it makes the code harder to read</li>
<li>Change variables name to follow <a href="http://legacy.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a></li>
<li>Your code lacks documentation making it hard to understand.</li>
</ul>

<p><strong>Use <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="noreferrer">enumerate</a></strong></p>

<p>Enumerate does exactly what you are trying to achieve : keep track of the index while looping on an iterable. Just use <code>for indexofitem,item in enumerate(List):</code>.</p>

<p><strong>Remove levels of nested logic</strong></p>

<p>Using <code>elif</code>, you could make your code a bit easier to follow. The inside of the <code>for-loop</code> becomes :</p>

<pre><code>    if breakcounter &lt;= numberofbreaks:
        if indexofitem &lt; nextbreakindex:
            templist1.append(item)
        elif breakcounter &lt; (numberofbreaks - 1):
            templist1.append(item)
            templist2.append(templist1)
            templist1 = []
            breakcounter +=1
        elif indexofitem &lt;= lastindexval and indexofitem &lt;= totalitems:
            templist1.append(item)
            templist2.append(templist1)
            templist1 = []
        elif indexofitem &gt;= lastindexval and indexofitem &lt; totalitems + 1:
            finalcounter += 1
            templist3.append(item)
            if finalcounter == finalcounttrigger:
                templist2.append(templist3)
</code></pre>

<p><strong>Rewrite your comparisons</strong></p>

<p>In Python, you can write comparisons in a very natural way : <code>indexofitem &gt;= lastindexval and indexofitem &lt; totalitems + 1</code> becomes <code>lastindexval &lt;= indexofitem &lt; totalitems + 1</code>.</p>

<p><strong>Use smart indices to get the last element of array</strong></p>

<p>You can rewrite <code>lastindexval = index[(len(index)-1)]</code> with the much clearer <code>lastindexval = index[-1]</code>.</p>

<p><strong>Rethink your logic</strong></p>

<p>You have <code>totalitems = len(List)</code> and <code>indexofitem</code> going from <code>0</code> to <code>len(List) - 1</code> (included). Thus, <code>indexofitem &lt;= totalitems</code> is not an interesting condition to check. The same goes for <code>indexofitem &lt; totalitems + 1</code>.</p>

<p>Once this is removed, we have :</p>

<pre><code>    #Less than the last cut
    if breakcounter &lt;= numberofbreaks:
        if indexofitem &lt; nextbreakindex:
            templist1.append(item)
        elif breakcounter &lt; (numberofbreaks - 1):
            templist1.append(item)
            templist2.append(templist1)
            templist1 = []
            breakcounter +=1
        elif indexofitem &lt;= lastindexval:
            templist1.append(item)
            templist2.append(templist1)
            templist1 = []
        elif lastindexval &lt;= indexofitem:
            finalcounter += 1
            templist3.append(item)
            if finalcounter == finalcounttrigger:
                templist2.append(templist3)
</code></pre>

<p><strong>Re-think your logic (bis)</strong></p>

<p>On the code above, the last 2 <code>elif</code> checks are a bit redundant : if we don't go into the <code>indexofitem &lt;= lastindexval</code> block then we must have <code>lastindexval &lt; indexofitem</code> and ``lastindexval &lt;= indexofitem` must be true.</p>

<p>After cleaning this, the code looks like :</p>

<pre><code>    for indexofitem,item in enumerate(List):
        nextbreakindex = index[breakcounter]

        #Less than the last cut
        if breakcounter &lt;= numberofbreaks:
            if indexofitem &lt; nextbreakindex:
                templist1.append(item)
            elif breakcounter &lt; (numberofbreaks - 1):
                templist1.append(item)
                templist2.append(templist1)
                templist1 = []
                breakcounter +=1
            elif indexofitem &lt;= lastindexval:
                templist1.append(item)
                templist2.append(templist1)
                templist1 = []
            else:
                finalcounter += 1
                templist3.append(item)
                if finalcounter == finalcounttrigger:
                    templist2.append(templist3)
    return templist2
</code></pre>

<p><strong>Re-think your logic (ter)</strong></p>

<p>Nothing happens in the loop if <code>breakcounter &gt; numberofbreaks</code> as <code>breakcounter</code> and <code>numberofbreaks</code> are not changed. If this is really the case, we might as well just break out of the loop. However, things are even better than this : once again we are in a situation that cannot happen. This can be seen in two different ways :</p>

<ul>
<li><p>if <code>breakcounter</code> was to be bigger than <code>numberofbreaks</code>, <code>nextbreakindex = index[breakcounter]</code> would have thrown an exception.</p></li>
<li><p><code>breakcounter</code> only gets incremented one element at a time. This happens only if <code>breakcounter &lt; (numberofbreaks - 1)</code>. Thus, once <code>breakcounter</code> reaches <code>numberofbreaks - 1</code>, it stops growing.</p></li>
</ul>

<p>At the end of this rewriting, your code looks like :</p>

<pre><code>def lindexsplit(List,*lindex):
    index = list(lindex)
    index.sort()

    templist1 = []
    templist2 = []
    templist3 = []

    breakcounter = 0
    finalcounter = 0

    numberofbreaks = len(index)

    lastindexval = index[-1]
    finalcounttrigger = (len(List)-(lastindexval+1))

    for indexofitem,item in enumerate(List):
        nextbreakindex = index[breakcounter]

        if indexofitem &lt; nextbreakindex:
            print "A"
            templist1.append(item)
        elif breakcounter &lt; (numberofbreaks - 1):
            print "B"
            templist1.append(item)
            templist2.append(templist1)
            templist1 = []
            breakcounter +=1
        elif indexofitem &lt;= lastindexval:
            print "C"
            templist1.append(item)
            templist2.append(templist1)
            templist1 = []
        else:
            print "D"
            finalcounter += 1
            templist3.append(item)
            if finalcounter == finalcounttrigger:
                templist2.append(templist3)
    return templist2
</code></pre>

<p>I reckon there is still a lot more to improve and a much more simple solution could be written (as suggested in the comments). </p>
    </div>