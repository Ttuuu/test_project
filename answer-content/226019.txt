<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After running through a few ideas in my first pass at the current implementation, I ended up with this refactored approach to simplify your build process</p>

<pre><code>public RequestCallback&lt;TContext&gt; Build&lt;TContext&gt;() {
    var next = new RequestCallback&lt;TContext&gt;(context =&gt; Task.CompletedTask);
    while (_middlewareTypes.Any()) {
        var middlewareType = _middlewareTypes.Pop();            
        var middlewareInstance = _lifetimeScope.Resolve(middlewareType, new TypedParameter(typeof(RequestCallback&lt;TContext&gt;), next));
        var nextInvoke = getNextInvoke(middlewareType);
        next = (RequestCallback&lt;TContext&gt;)nextInvoke.CreateDelegate(typeof(RequestCallback&lt;TContext&gt;), middlewareInstance);
    }
    return next;
}

MethodInfo getNextInvoke(Type type) {
    return type.GetMethod("Invoke") ?? type.GetMethod("InvokeAsync");
}
</code></pre>

<p>Since you are already starting at the end of the pipeline, I figured you could have the dummy delegate to begin with </p>

<pre><code>var next = new RequestCallback&lt;TContext&gt;(context =&gt; Task.CompletedTask);
</code></pre>

<p>and use that as the next in the pipeline.</p>

<p>From there it was a matter of passing the delegate on to the next in line when resolving the middleware.</p>

<p>Your <code>CreateNext</code> seemed a little over complicated at first glance, then I remembered that you can create a delegate directly from a <code>MethodInfo</code> using the instance.</p>

<pre><code>next = (RequestCallback&lt;TContext&gt;)nextInvoke.CreateDelegate(typeof(RequestCallback&lt;TContext&gt;), middlewareInstance);
</code></pre>

<p>Using a quick unit test I was able to reproduce your demo to prove my refactor did not break the expected behavior</p>

<pre><code>[TestClass]
public class PipelineBuilderTests {
    [TestMethod]
    public async Task PipelineBuilder_Should_Build_Delegate() {
        //Arrange
        var pipelineBuilder = new PipelineBuilder();
        pipelineBuilder.Add&lt;M1&gt;();
        pipelineBuilder.Add&lt;M2&gt;();
        pipelineBuilder.Add&lt;M3&gt;();
        pipelineBuilder.Add&lt;M4&gt;();
        var next = pipelineBuilder.Build&lt;TestContext&gt;();
        var context = new TestContext { Message = "" };
        string expected = "Spongebob Squarepants";

        //Act
        await next(context);

        //Assert (FluentAssertions)
        context.Message.Should().Be(expected);
    }
}
</code></pre>
    </div>