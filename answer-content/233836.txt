<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Integer Division</h2>

<p>Python comes with a built-in integer division operator.  So instead of writing <code>int(c / 2) + 1</code>, you could simply write <code>c // 2 + 1</code>.  It is slightly faster.</p>

<h2>Unnecessary List Creation</h2>

<p>Creating a list of <code>factors</code> just to <code>sum(factors)</code> afterwards is unnecessary busy work, which takes time.  Simply add up the factors as you find them:</p>

<pre><code>def factor(c):
    total = 0
    for d in range(1, c // 2 + 1):
        if c % d == 0:
            total += d
    return total
</code></pre>

<p>Or, use a generator expression with <code>sum()</code>:</p>

<pre><code>def factor(c):
    return sum(d for d in range(1, c // 2 + 1) if c % d == 0)
</code></pre>

<p>There is no need to store the factors you found.</p>

<h2>Move Invariants out of Loops</h2>

<p>Consider:</p>

<pre><code>def sum_ammicable(x):
    ...
    for a in range(1, x):
        for b in range(1, x):
            if a != b:
                if factor(a) == b and ...:
                    ...
    ...
</code></pre>

<p>How many times is <code>factor(a)</code> computed when <code>a==1</code>?  If <code>x == 10000</code>, it gets computed 10000 times ... once for each <code>b</code> value.  How many times when <code>a==2</code>?  It'll get computed 10000 times as well.  But does <code>factor(a)</code> depend on the value of <code>b</code>?  No.  Each time you compute <code>factor(a)</code>, for the same value of <code>a</code>, the same result is produced.</p>

<p>Can you calculate this value once per <code>a</code> loop?  Sure!  Move it out of the <code>b</code> loop!</p>

<pre><code>def sum_ammicable(x):
    ...
    for a in range(1, x):
        factor_a = factor(a)
        for b in range(1, x):
            if a != b:
                if factor_a == b and ...:
                    ...
    ...
</code></pre>

<p>Instead of computing <code>factor(a)</code> 100,000,000 times, you now only compute it 10,000 times, which should be a significant improvement in speed.</p>

<p>Finally, considering that:</p>

<pre><code>        for b in range(1, x):
            ...
                if factor_a == b and ...:
                    ...
</code></pre>

<p>will only execute the rest of the <code>if</code> statement (and perhaps the body of the <code>if</code>) for exactly one value of <code>b</code>, do you really need to loop over all 10,000 possible <code>b</code> values?  With a little thought, and a little reworking of the code, you can remove the <code>b</code> loop altogether!</p>

<h2>Group Related Code Together</h2>

<p>You start with </p>

<pre><code>start = time.time()

n = int(input("Enter a number"))
</code></pre>

<p>then 2 function definitions, and then you continue with mainline code:</p>

<pre><code>print(sum_ammicable(n))

end = time.time()
print(end -start)
</code></pre>

<p>Move the code together, after the function declarations.  Even better, place it inside a <code>if __name__ == '__main__':</code> guard, so you can import <code>factor(c)</code> and <code>sum_ammicable(x)</code> functions into other code:</p>

<pre><code>if __name__ == '__main__':

    start = time.time()

    n = int(input("Enter a number"))

    print(sum_ammicable(n))

    end = time.time()
    print(end - start)
</code></pre>

<p>Now that this code isn't separated by 2 functions, it becomes apparent you are timing how long the user takes to "Enter a number" in addition to the time it takes to compute <code>sum_ammicable(n)</code>.  Is the user's reaction &amp; typing speed really being profiled here?  Perhaps you want to move <code>start = time.time()</code> after the input statement.</p>

<p>Pro tip: use <code>time.perf_counter()</code> instead of <code>time.time()</code> for higher accuracy profiling.</p>

<hr>

<p>Algorithmic improvements are covered on the Project Euler site itself.  Read the problem <a href="https://projecteuler.net/overview=021" rel="nofollow noreferrer">overview</a> after successfully completing the problem for some additional dramatic improvements.  There is no need to reproduce their analysis here.</p>
    </div>