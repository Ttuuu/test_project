<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>struct Game {
    room: usize,
    inventory: Vec&lt;Item&gt;,
    rooms: Vec&lt;Room&gt;
}
</code></pre>

<p>I would recommend <code>current_room</code> instead of <code>room</code>. The meaning is slightly clearer.</p>

<p>You have several functions like the following, the comments here apply to all of them</p>

<pre><code>    fn exits(&amp;self) {
        let mut index = 0;
        let mut s = String::from(
            format!("{} has {} exits:", &amp;self.room().name, &amp;self.room().exits.len())
        );
</code></pre>

<p><code>format!</code> already produces a <code>String</code>, so you don't need <code>String::from</code>. You also do not need the <code>&amp;</code> because the <code>format!</code> macro will already add them.</p>

<pre><code>        for exit in &amp;self.room().exits {
</code></pre>

<p>You can <code>for (index, exit) in self.room().exits.iter().enumerate() {</code>. Then you don't need to keep track of the index yourself. </p>

<pre><code>            s = format!("{}\n({}) {}", s, index, self.rooms[*exit].name);
</code></pre>

<p>Rather than assign a new string object, it probably makes sense to use <code>s.push_str</code> to onto the existing string.</p>

<pre><code>            index += 1;
        }

        println!("{}", s);
</code></pre>

<p>There doesn't appear to be a good reason to build up a string object and then print it. Your code would be simpler here if you just <code>println!</code> each piece of the string as you build it.</p>

<pre><code>    }


    let mut rooms = vec![
        Room {
            name: String::from("Bedroom"),
            description: String::from("A tidy, clean bedroom with 1 door and a balcony"),
            exits: vec![1, 2],
            items: vec![ Item {
                name: String::from("Key"),
                description: String::from("A golden key")
            }]
        },
</code></pre>

<p>All your strings are static, so you may want to consider using <code>&amp;'static str</code> to hold the various strings instead of <code>String</code> which will avoid having to call <code>String::from</code> when you create the room objects here. </p>

<p>You may also want to consider installing <a href="https://github.com/rust-lang-nursery/rust-clippy" rel="nofollow noreferrer">clippy</a>. It is an extra Cargo command (<code>cargo clippy</code>) that has a number of extra lints for common Rust mistakes. It points to several of the points I showed here.    </p>
    </div>