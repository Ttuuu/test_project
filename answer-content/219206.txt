<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<p>Is this code wrapped in a function? I ask because in the first line, i.e. </p>

<blockquote>
<pre><code>config = {"levels": {"first": ["a", "b", "c"], "second": ["d", "e", "f"]}};
</code></pre>
</blockquote>

<p><code>config</code> is declared outside any brackets and without any keyword like <code>var</code>, <code>let</code> or <code>const</code>, which leads to it being declared globally. It is wise to avoid using global variables unless you are absolutely sure you have no other way to accomplish a task. This avoids scenarios like unintentional re-assignment and tight coupling.</p>

<p>Also, unless a variable is re-assigned, it is wise to use <code>const</code> instead of <code>let</code>. This will prevent unintentional re-assignment. <code>combine</code> could be declared with <code>const</code> since it is never re-assigned. </p>

<hr>

<p>Whenever an array is declared and then added to via a loop (like <code>forEach</code>) you should consider using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" rel="nofollow noreferrer"><code>map</code></a> method instead. </p>

<p>So the following lines </p>

<blockquote>
<pre><code>let combine = [];
 Object.keys(config["levels"]).forEach(key=&gt;combine.push(config["levels"][key]));
</code></pre>
</blockquote>

<p>Could be rewritten like this:</p>

<pre><code>const combine = Object.keys(config["levels"]).map(key=&gt;combine.push(config["levels"][key]));
</code></pre>

<p>Perhaps it would be helpful to go through <a href="http://reactivex.io/learnrx/" rel="nofollow noreferrer">these functional JS exercises</a>, where you practice implementing methods like <code>map</code>, <code>filter</code>, <code>reduce</code>. </p>

<hr>

<p>As was mentioned in a comment, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#Dot_notation" rel="nofollow noreferrer">dot notation</a> can be used instead of bracket notation to accessing object properties. It is <a href="https://stackoverflow.com/a/4968448/1575353">"<em>faster to write and clearer to read</em>"</a><sup><a href="https://stackoverflow.com/a/4968448/1575353">1</a></sup></p>

<h2>A Simpler Technique</h2>

<p>One simplification would be to use <code>Object.values()</code> to get the nested arrays, and then use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" rel="nofollow noreferrer"><code>Array.flat()</code></a> to join the arrays together.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const config = {"levels": {"first": ["a", "b", "c"], "second": ["d", "e", "f"]}};
const levels = Object.values(config.levels).flat();
console.log("levels: ", levels);</code></pre>
</div>
</div>


<p><sup>1</sup><sub><a href="https://stackoverflow.com/a/4968448/1575353">https://stackoverflow.com/a/4968448/1575353</a></sub></p>
    </div>