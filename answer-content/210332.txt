<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Tests and bugs</strong></p>

<p>Your code looks mostly good. Before trying to go and change the code to see what can be improved. I usually try to write a few simple tests. This is even easier when you have a reference implementation that can be compared to your function. In your case, I wrote:</p>

<pre><code>TESTS = [
    [],
    [0],
    [0, 0, 0],
    [0, 1, 2],
    [0, 1, 2, 3, 4, 5],
    [5, 4, 3, 2, 1, 0],
    [5, 2, 3, 1, 0, 4],
    [5, 2, 5, 3, 1, 3, 0, 4, 5],
]

for t in TESTS:
    print(t)
    ref_lst, tst_lst = list(t), list(t)
    ref_lst.sort()
    natural_merge(tst_lst)
    print(ref_lst, tst_lst)
    assert ref_lst == tst_lst
</code></pre>

<p>which leads to a first comment: the empty list is not handled properly and the function never returns.</p>

<p><strong>Improving <code>merge</code></strong></p>

<p>The case <code>elif len(aux_lo) or len(aux_hi)</code> seems complicated as we check <code>if aux_lo</code> just after. Things would be clearer if we were to split in two different cases:</p>

<pre><code>    if len(aux_lo) and len(aux_hi):
        a[i] = aux_lo.popleft() if aux_lo[0] &lt; aux_hi[0] else aux_hi.popleft()
    elif len(aux_lo):
        a[i] = aux_lo.popleft()
    elif len(aux_hi):
        a[i] = aux_hi.popleft()
</code></pre>

<p>Also, we could reuse the fact that in a boolean context, list are considered to be true if and only if they are not empty to write:</p>

<pre><code>for i in range(lo, hi):
    if aux_lo and aux_hi:
        a[i] = aux_lo.popleft() if aux_lo[0] &lt; aux_hi[0] else aux_hi.popleft()
    elif aux_lo:
        a[i] = aux_lo.popleft()
    elif aux_hi:
        a[i] = aux_hi.popleft()
</code></pre>

<p><strong>Improving <code>find_next_stop</code></strong></p>

<p>You don't need so many parenthesis.</p>

<p>You could store <code>len(a) - 1</code> in a variable in order not to re-compute it every time.</p>

<p>The name <code>_stop</code> is pretty ugly. I do not have any great suggestion for an alternative but <code>end</code> seems okay-ish.</p>

<p><strong>More tests... and more bugs</strong></p>

<p>I wanted to add a few tests to verify an assumption... and I stumbled upon another issue.</p>

<p>Here is the corresponding test suite:</p>

<pre><code>TESTS = [
    [],
    [0],
    [0, 0, 0],
    [0, 1, 2],
    [0, 1, 2, 3, 4, 5],
    [5, 4, 3, 2, 1, 0],
    [0, 1, 2, 2, 1, 0],
    [0, 1, 2, 3, 2, 1, 0],
    [5, 2, 3, 1, 0, 4],
    [5, 2, 5, 3, 1, 3, 0, 4, 5],
    [5, 2, 5, 3, 1, 3, 0, 4, 5, 3, 1, 0, 1, 5, 2, 5, 3, 1, 3, 0, 4, 5],
]
</code></pre>

<hr>

<p>Taking into account my comments and the fix you tried to add in the question, we now have:</p>

<pre><code>from collections import deque

def merge(a, lo, mi, hi):
    aux_lo = deque(a[lo:mi])
    aux_hi = deque(a[mi:hi])

    for i in range(lo, hi):
        if aux_lo and aux_hi:
            a[i] = aux_lo.popleft() if aux_lo[0] &lt; aux_hi[0] else aux_hi.popleft()
        elif aux_lo:
            a[i] = aux_lo.popleft()
        elif aux_hi:
            a[i] = aux_hi.popleft()

def find_next_stop(a, start):
    upper = len(a) - 1
    if start &gt;= upper:
        return start

    stop = start + 1
    if a[start] &lt;= a[stop]:
        while stop &lt; upper and a[stop] &lt;= a[stop+1]:
            stop += 1
    else:
        while stop &lt; upper and a[stop] &gt;= a[stop+1]:
            stop += 1

        end = stop
        while start &lt; end:
            a[end], a[start] = a[start], a[end]
            start += 1
            end -= 1
    return stop

def natural_merge(a):
    upper = len(a) - 1
    if upper &lt;= 0:
        return
    lo = hi = 0
    while True:
        lo = hi
        mi = find_next_stop(a, lo)
        if lo == 0 and mi == upper:
            return
        hi = find_next_stop(a, mi)
        if mi == hi == upper:
            lo = hi = 0
        else:
            merge(a, lo, mi, hi)



TESTS = [
    [],
    [0],
    [0, 0, 0],
    [0, 1, 2],
    [0, 1, 2, 3, 4, 5],
    [5, 4, 3, 2, 1, 0],
    [0, 1, 2, 2, 1, 0],
    [0, 1, 2, 3, 2, 1, 0],
    [5, 2, 3, 1, 0, 4],
    [5, 2, 5, 3, 1, 3, 0, 4, 5],
    [5, 2, 5, 3, 1, 3, 0, 4, 5, 3, 1, 0, 1, 5, 2, 5, 3, 1, 3, 0, 4, 5],
]

for t in TESTS:
    print(t)
    ref_lst, tst_lst = list(t), list(t)
    ref_lst.sort()
    natural_merge(tst_lst)
    print(ref_lst, tst_lst)
    assert ref_lst == tst_lst
</code></pre>

<p><strong>More improvements in <code>find_next_stop</code></strong></p>

<p>We have a <code>while</code> loop but we can compute the number of iterations we'll need: it corresponds to have the distance between <code>start</code> and <code>stop</code>. We could use a <code>for _ in range</code> loop to perform this. It has pros and cons but one of the key aspect is that we do not need to change <code>start</code> and <code>stop</code>, thus we don't need to copy the value in a variable.</p>

<pre><code>    for k in range((1 + stop - start) // 2):
        i, j = start + k, stop - k
        a[i], a[j] = a[j], a[i]
</code></pre>

<p><strong>More improvements in <code>natural_merge</code></strong></p>

<p>A few steps can be used to re-organise the function:</p>

<ul>
<li>see that we can move the assignment <code>lo = hi</code> from the beginning of the loop to the end of the loop with no impact</li>
<li>realise that it is already done in the first branch of the test already so move it to the <code>else</code> block exclusively</li>
<li>see that the initialisation of <code>hi</code> is not required anymore</li>
<li>notice that the condition <code>mi == upper</code> is checked in 2 places (with the same value of <code>mi</code> and <code>upper</code> and that if <code>lo != 0</code>, we see that <code>mi == upper</code> directly leads to <code>find_next(a, mi)</code> returning <code>upper</code> and thus ending with <code>mi == hi == upper</code> and thus to the assignment <code>lo = hi = 0</code>.</li>
</ul>

<p>At this stage, we have:</p>

<pre><code>def natural_merge(a):
    upper = len(a) - 1
    if upper &lt;= 0:
        return
    lo = 0
    while True:
        mi = find_next_stop(a, lo)
        if mi == upper:
            if lo == 0:
                return
            lo = hi = 0
        else:
            hi = find_next_stop(a, mi)
            merge(a, lo, mi, hi)
            lo = hi
</code></pre>

<p>We can go further:</p>

<ul>
<li>the assignment <code>hi = 0</code> has no effect</li>
<li>we can reorganise conditions</li>
</ul>

<p>We'd get</p>

<pre><code>def natural_merge(a):
    upper = len(a) - 1
    if upper &lt;= 0:
        return
    lo = 0
    while True:
        mi = find_next_stop(a, lo)
        if mi != upper:
            hi = find_next_stop(a, mi)
            merge(a, lo, mi, hi)
            lo = hi
        elif lo == 0:
            return
        else:
            lo = 0
</code></pre>

<p>Interestingly, removing <code>lo = hi</code> leads a much more efficient code on my benchmark: the function returns much more quickly (because we always have <code>lo == 0</code>, we get out of the loop as soon as <code>mi == upper</code>) and the list is still fully sorted.</p>

<pre><code>def natural_merge(a):
    upper = len(a) - 1
    if upper &lt;= 0:
        return
    while True:
        mi = find_next_stop(a, 0)
        if mi == upper:
            return
        hi = find_next_stop(a, mi)
        merge(a, 0, mi, hi)
</code></pre>

<p>This looked surprising at first but thinking about it, it looks like this may be the way this algorithm is supposed to be.</p>
    </div>