<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's good practice to preserve file permissions on copy, especially as your backup may replace the original.  <code>cp -p</code> does so.</p>

<p>Most file-handling commands can't handle filenames beginning with hyphen, unless you terminate the options with <code>--</code>, as in  <code>mv -- $old $new</code>.  It's prudent to include the terminator whenever you're sending user-supplied filenames to a command.</p>

<p><code>while read .. do rm</code> gives me the willies.  I'd instead keep track of .tmp files we've created, and remove those, as in:</p>

<pre><code># array
declare -a to_remove
...
# queue removal on successful copy else exit
cp -p -- "$VERFILE" "$VERFILE.tmp" &amp;&amp; to_remove+=( "$VERFILE.tmp" ) || exit 1 
...
if git commit "$@"
then 
    git tag -f "$TIMESTAMP"
    rm -f -- "${to_remove[@]}"
else
    for backup in "${to_remove[@]}"
    do
        original="${backup%.tmp}"
        # no need to explicitly test existence: just attempt the mv + bail on failure
        mv -- "$backup" "$original" &amp;&amp;  git reset HEAD "$original" &gt;&amp; /dev/null
    done
fi
</code></pre>

<p><code>echo</code> and <code>echo ""</code> are equivalent.</p>

<p><code>$@</code> should be double-quoted; this protects internal quotes.  Unquoted <code>$*</code> is appropriate to use when you know quoting is unnecessary.</p>

<p>You can use <code>[[ .. ]]</code> instead of <code>[ .. ]</code> to do tests. The former is a bash builtin and saves a fork.</p>

<p>Your tests can use the more specific <code>-f</code> (is file or symlink to file) instead of <code>-e</code> (exists).</p>

<p><code>&gt;&amp; /dev/null</code> is equivalent to <code>&gt;/dev/null 2&gt;&amp;1</code>.</p>
    </div>