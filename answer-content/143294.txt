<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Should not assume null termination</h3>
<p>This code in the server assumes that the client will send null terminated data:</p>
<blockquote>
<pre><code>//Receive a message from client
while( (read_size = recv(sock , client_message , 2000 , 0)) &gt; 0 )
{
    //Send the message back to client
    write(sock , client_message , strlen(client_message));
    printf("%s\n",client_message);
}
</code></pre>
</blockquote>
<p>There are several problems with that:</p>
<ol>
<li>The client could not send null terminated data.</li>
<li>The client could send a string longer than 2000 bytes, which would look unterminated.</li>
<li>Even if the client were well behaved, sockets don't necessarily send/receive all of their data in one chunk.  So the client might send a 1000 byte string but your <code>recv()</code> call might only read 500 bytes (with no null termination).</li>
</ol>
<p>To fix this,you should use <code>read_size</code> to terminate the string yourself (and make your buffer bigger by one character).  Or pick a new message protocol that sends a length followed by a string of that length, so you can better determine where each message ends.</p>
    </div>