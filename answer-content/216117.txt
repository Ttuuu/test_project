<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, don't panic. 10 is just not enough (indeed, it only gives you <a href="https://en.wikipedia.org/wiki/Taylor%27s_theorem#Example" rel="noreferrer">5 decimal places</a>. Try 20, and obtain</p>

<pre><code>2.71828182846
</code></pre>

<p>which is much closer.</p>

<p>Now, Python uses a native floating point, which may only give you that many digits of precision (say, 30). To get more, you need to work with another representations; <code>fractions.Fraction</code> looks like a good candidate.</p>

<p>Finally, calls to <code>math.factorial</code> waste too much computing power. It is better to compute factorials as you go, e.g.</p>

<pre><code>    denom = 1
    for i in range(1, x):
        e += 1 / denom
        denom *= i
</code></pre>
    </div>