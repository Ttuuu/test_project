<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The computed property <code>minBills</code> modifies the <code>value</code> property, which would
be unexpected to the caller:</p>

<pre><code>let cash = Cash(value: 50.0)
print(cash.minBills!) // [1, 0, 0, 0, 0, 0, 0, 0, 0]  OK!
print(cash.minBills!) // [0, 0, 0, 0, 0, 0, 0, 0, 0]  What?
</code></pre>

<p>Better make <code>value</code> a constant property:</p>

<pre><code>let value: Double
</code></pre>

<p>and create a mutable copy only for the computation.</p>

<pre><code>let bills = [50.00, 20.00, 10.00, 5.00, 1.00, 0.25, 0.10, 0.05, 0.01]
</code></pre>

<p>can be made a type property</p>

<pre><code>static let bills = [50.00, 20.00, 10.00, 5.00, 1.00, 0.25, 0.10, 0.05, 0.01]
</code></pre>

<p>because it is the same for each instance.</p>

<p>But why do you need a class at all? This could be just a (free) function</p>

<pre><code>func minimumBills(for value: Double, withDenominations: [Double]) -&gt; [Int]?
</code></pre>

<p>instead. Or, if you plan to add more functionality to the <code>Cash</code> type,
consider defining it as a <code>struct</code> unless the reference semantics of a class
are explicitly needed.</p>

<p>Another possible design would be to define a <code>CoinSystem</code> type with
“factory methods” for known coin systems:</p>

<pre><code>public struct CoinSystem {
    let denominations: [Double]

    public init(denominations: [Double]) {
        self.denominations = denominations
    }

    public func optimalBills(for value: Double) -&gt; [Int]? {
        // ... computation here ...
    }

    public static var usDollar = CoinSystem(denominations:
        [50.00, 20.00, 10.00, 5.00, 1.00, 0.25, 0.10, 0.05, 0.01])
}
</code></pre>

<p>This would be used as</p>

<pre><code>let usCoins = CoinSystem.usDollar
let optimal = usCoins.optimalBills(for: 12.34)
</code></pre>

<p>and allows adding more coin systems easily.</p>

<p>Now let us consider the “main code,” i.e. the computation of</p>

<pre><code>public var minBills:[Int]?
</code></pre>

<p><code>tempArray</code> and <code>tempValue</code> are bad variable names because they do not 
indicate what the variable stands for. Also <code>tempValue</code> is only needed
inside the scope of the for-loop.</p>

<p>Returning early on error conditions simplifies the code and saves one
indentation level:</p>

<pre><code>if value &lt; 0 { return nil }
</code></pre>

<p>or</p>

<pre><code>guard value &gt;= 0 else { return nil }
</code></pre>

<p>Iterating of the <code>bills</code> array is better done with</p>

<pre><code>for bill in bills {
    // ...
}
</code></pre>

<p>instead of subscripting.</p>

<p>Summarizing these suggestions, the code could look like this:</p>

<pre><code>public struct CoinSystem {
    let denominations: [Double]

    public init(denominations: [Double]) {
        self.denominations = denominations
    }

    public func optimalBills(for value: Double) -&gt; [Int]? {
        guard value &gt;= 0 else { return nil }

        var remainingValue = value
        var result = [Int]()
        for denomination in denominations {
            let count = Int(remainingValue/denomination)
            remainingValue -= Double(count) * denomination
            result.append(count)
        }

        return result
    }

    public static var usDollar = CoinSystem(denominations:
        [50.00, 20.00, 10.00, 5.00, 1.00, 0.25, 0.10, 0.05, 0.01])
}
</code></pre>

<hr>

<p>You said </p>

<blockquote>
  <p>.... outside of an occasional error I'm having with computing pennies ...</p>
</blockquote>

<p>That is to be expected, because <code>Double</code> is  <em>binary</em> floating point number,
and cannot represent all (decimal) fractions exactly. Good resources for
this topic are</p>

<ul>
<li><a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></li>
<li><a href="https://stackoverflow.com/q/588004/1187415">Is floating point math broken?</a> on Stack Overflow.</li>
</ul>

<p>Possible remedies are</p>

<ul>
<li>Work with <em>integers</em> only (representing cents, or whatever the lowest
possible denomination is).</li>
<li>Use the <a href="https://developer.apple.com/documentation/foundation/decimal" rel="nofollow noreferrer"><code>Decimal</code></a>
type to represent the monetary values.</li>
</ul>

<hr>

<p><strong>Finally:</strong> What you are solving is the <a href="https://en.wikipedia.org/wiki/Change-making_problem" rel="nofollow noreferrer">Change-making problem</a>,
and your approach is the “greedy method:” Always pick the largest denomination
which is not greater than the remaining amount. 
This gives the optimal result for so-called “canonical coin systems,”
like the one used in the US, but not necessarily for arbitrary coin systems.</p>

<p>The general problem can be solved with dynamic programming, and you'll find
further information in the above referenced Wikipedia page.</p>
    </div>