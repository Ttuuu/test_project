<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think a different approach is needed to achieve a better performance. The current approach recomputes the Jaccard similarity from scratch for each possible threshold value. However, going from one threshold to the next, only a small fraction of prediction values change as well as the intersection and the union. Therefore a lot of unnecessary computation is performed.</p>

<p>A better approach can first compute for each patch a histogram of the prediction probabilities given ground truth = 1, using the thresholds as bin edges. The frequency counts in each bin give the amount of predictions affected going from one threshold to the next. Therefore, the Jaccard similarity values for all thresholds can be computed directly from cummulative frequency counts derived from the histogram.</p>

<p>In your case, the prediction probabilities are used directly as thresholds. Therefore the histograms coincide with the inputs sorted by the probabilities. Consider the following example input probablities and true labels:</p>

<pre><code>Label    1    1    0    0    1     0    0    0
Prob     0.9  0.8  0.7  0.6  0.45  0.4  0.2  0.1
</code></pre>

<p>The labels themselves are also the counts of true positive instances within each interval. Given a threshold <span class="math-container">\$t\$</span> and its index <span class="math-container">\$i\$</span>, <span class="math-container">\$|Label \cap Predicted|\$</span> is just the sum of labels with indices <span class="math-container">\$\leq i\$</span>, which is the cumulative sum of labels until <span class="math-container">\$i\$</span>. Also note that <span class="math-container">\$|Predicted|=i+1\$</span> and <span class="math-container">\$Label\$</span> is the count of true positive instances. Therefore the Jaccard similarity</p>

<p><span class="math-container">$$
\begin{align*}
Jaccard(Label, Predicted) &amp; = \frac{|Label \cap Predicted|}{|Label \cup Predicted|} \\
 &amp; = \frac{|Label \cap Predicted|}{|Label|+|Predicted|-|Label \cap Predicted|} \\
 &amp; = \frac{cumsum(Label, i)}{(\text{# of true positive instances}) + i + 1 - cumsum(Label, i)}
\end{align*}
$$</span></p>

<p>This computation can be easily vectorized for all possible <span class="math-container">\$i\$</span>s to get a Jaccard similarity vector for every threshold.</p>
    </div>