<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It would have been nice to have the data file so that we could test the code to provide an even better review.</p>

<h2>Complexity</h2>

<p>Almost All of the functions are too complex (do too much) and should be broken up into multiple functions. Multiple functions are easier to read, write, debug and maintain. A single function that performs a single operation is much easier to debug and write. Specifically these functions are too complex, <code>vector&lt;int&gt; calculatePrognose(double days, string file_name)</code>, <code>void displayData(string file_name, int prognose_days = -1)</code> and <code>int main(int argc, char **argv)</code>.</p>

<p>There is also a programming principle called the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> that applies here. The Single Responsibility Principle states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>The entire <code>while(true)</code> loop in <code>main()</code> should be a function. The entire block of code within </p>

<pre><code>        } else if (use_choice == "i") {
            ...
        }
</code></pre>

<p>Would be a sub-function of the <code>while(true)</code> loop function.</p>

<p>Another example, this snippet from vector calculatePrognose(double days, string file_name) would make a good function:</p>

<pre><code>    for(int i = 1; i &lt; vector_list.size(); i++) {

        // CHECK IF LAST NUMBER IS ZERO TO PREVENT A DIVISION THROUGH ZERO
        if (last_dead_count != 0) {
            avg_dead_factor += stoi(vector_list[i][2]) / last_dead_count;
            last_dead_count = stoi(vector_list[i][2]);

        } else {
            // INCREMENT COUNTER FOR TIMES ZERO PEOPLE WERE DEAD
            zero_dead++;
        }

        // CHECK IF LAST NUMBER IS ZERO TO PREVENT A DIVISION THROUGH ZERO
        if (last_infected_count != 0) {
            avg_infected_factor += stoi(vector_list[i][1]) / last_infected_count;
            last_infected_count = stoi(vector_list[i][1]);

        } else {
            // INCREMENT COUNTER FOR TIMES ZERO PEOPLE WERE INFECTED
            zero_infected++;
        }

        // SET LAST INFECTED COUNT TO CURRENT COUNT
        last_infected_count = stoi(vector_list[i][1]);
        last_dead_count = stoi(vector_list[i][2]);
    }
</code></pre>

<h2>Avoid <code>using namespace std;</code></h2>

<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This [stack overflow question][3] discusses this in more detail.</p>

<h2>Initialize The Local Variables When They are Declared</h2>

<p>In C++ local variables do not have a default value, they should all be initialized. My complier reports one warning where a variable is used before it is initialized, <code>avg_dead_factor</code> in <code>vector&lt;int&gt; calculatePrognose(double days, string file_name)</code>. </p>

<pre><code>uninitialized local variable 'avg_dead_factor' used
</code></pre>

<p>The code contains this line:</p>

<pre><code>avg_dead_factor, avg_infected_factor = 0;
</code></pre>

<p>Only <code>avg_infected_factor</code> will be initialized in the above code.</p>

<p>To make it easier to maintain the code, each variable should be delcared and initialized on a single line:</p>

<pre><code>vector&lt;int&gt; calculatePrognose(double days, string file_name) {
    // DECLARES VARIABLES
    int zero_dead = 0;
    int zero_infected = 0;
    double avg_infected_factor = 0;
    double avg_dead_factor = 0;
    double last_infected_count = 0;
    double last_dead_count = 0;
    double infected = 0;
    double dead = 0;
</code></pre>

<p>It is important to note that variables should be declared as they are needed and only within the scope that they are needed. The above snippet is only an example.</p>

<p>Code should be as self documenting as possible and comments like <code>// DECLARES VARIABLES</code> are not necessary.</p>

<h2>Global Variables</h2>

<p>Generally you've done a pretty good job of avoiding global variables, with one glaring exception:</p>

<pre><code>string file_name = "/home/adrianone/Schreibtisch/Development/CPPDevelopment/Corona/coronaprognose/corona_numbers.dat";
</code></pre>

<p>It might be better if this was declared in <code>main()</code> and passed to the functions that need it. This value could be an argument that is passed into the program from the command line to make the program easier to use without modifying it.</p>
    </div>