<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are having a <strong>bug</strong> here because you will always skip the first row of the datatable.</p>

<blockquote>
<pre><code>var csvContent = string.Empty;
int colCount = ds.Tables[0].Columns.Count;
for (int row_no = 0; row_no &lt; ds.Tables[0].Rows.Count; row_no++)
{
    var arr = new List&lt;string&gt;();
    if (row_no == 0)
    {
        for (int i = 0; i &lt; colCount; i++)
        {
            arr.Add(ds.Tables[0].Columns[i].ColumnName);
        }
    }
    else
    {
        object[] objarr = ds.Tables[0].Rows[row_no].ItemArray;

        arr = ((IEnumerable)objarr).Cast&lt;object&gt;()
                     .Select(x =&gt; x.ToString())
                     .ToList();
    }
    csvContent += string.Join("|", arr) + "\n";
}  
</code></pre>
</blockquote>

<p>In addition why would you want to check for <code>row_no == 0</code> for each datarow, which simply means checking this 30k times?</p>

<p>You should extract the retrieving of the columnnames to a separate method and if wanted int an extension method like so  </p>

<pre><code>public static IEnumerable&lt;string&gt; RetrieveColumnNames(this DataTable dataTable)
{
    if (dataTable == null) { yield break; }
    foreach (DataColumn column in dataTable.Columns)
    {
        yield return column.ColumnName;
    }
}  
</code></pre>

<p>This  </p>

<blockquote>
<pre><code>        object[] objarr = ds.Tables[0].Rows[row_no].ItemArray;

        arr = ((IEnumerable)objarr).Cast&lt;object&gt;()
                     .Select(x =&gt; x.ToString())
                     .ToList();  
</code></pre>
</blockquote>

<p>is somehow strange itself. The <code>ItemArray</code> property of a <code>DataRow</code> is an <code>object[]</code> and if you use <code>string.Join()</code> with an <code>object[]</code> the <code>ToString()</code> method of each object will be called by it. </p>

<p>If reffering to a <code>DataRow</code> or <code>DataColumn</code> by using <code>ds.Tables[0]</code> more than once you should introduce a separate variable which just hold a reference to <code>ds.Tables[0]</code>.  </p>

<p>Like @NikitaB mentioned in a comment to @t3chb0t answer  </p>

<blockquote>
  <p>I think that the code would be even more efficient, if instead of
  building one huge string with <code>StringBuilder</code>, OP were to write directly
  into output <code>csv</code> stream on every iteration. At the very least it should
  reduce the memory consumption for larger files. </p>
</blockquote>

<p>Putting this all together the former loop could look like so  </p>

<pre><code>StreamWriter csv = new StreamWriter(newCSV);

var dataTable = ds.Tables[0];

csv.WriteLine(string.Join("|", dataTable.RetrieveColumnNames()));

for (int rowNo = 0; row_no &lt; dataTable.Rows.Count; rowNo++)
{
    object[] objarr = dataTable.Rows[rowNo].ItemArray;
    csv.WriteLine(string.Join("|", objarr));
}
</code></pre>
    </div>