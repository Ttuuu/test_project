<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll focus mostly on the performance issue and only hint at a few design ones at the end.</p>

<p>For this use-case, I'd say stay away from <code>numpy</code>. <code>numpy</code> has some pretty high overhead, which you tend to amortize by faster computations at a "massive" scale. Which is not the case here.</p>

<p>You use <code>numpy</code> for vector addition and for trigonometric functions. In the latter case, you can see that using numpy is the wrong approach. A quick benchmark:</p>

<pre><code>In [5]: import numpy as np                                                                                                                                                                                                                                                                                            

In [6]: %timeit np.cos(0.6)                                                                                                                                                                                                                                                                                           
630 ns ± 19.1 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

In [7]: import math                                                                                                                                                                                                                                                                                                   

In [8]: %timeit math.cos(0.6)                                                                                                                                                                                                                                                                                         
70.7 ns ± 1.47 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)

In [9]: from math import cos                                                                                                                                                                                                                                                                                          

In [10]: %timeit cos(0.6)                                                                                                                                                                                                                                                                                             
44.1 ns ± 0.51 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)

</code></pre>

<p><code>numpy</code> is ~10x slower than pure Python, and importing the function locally which gives you an extra bump.</p>

<p>For vectors of length 2, probably the overhead of using it is way higher than the computational wins. That's even more when you apply a trigonometric function to a single value (scalar). </p>

<p>If you still want to go on with <code>numpy</code> you'd most likely want to focus on the <code>rotation</code> function.</p>

<pre><code>def rotation(angle):
    rotation = numpy.array([[numpy.cos(angle), -numpy.sin(angle)], [numpy.sin(angle), numpy.cos(angle)]])
    return rotation
</code></pre>

<p>Here you calculate twice each trigonometric function used. you could just calculate each once and reuse it</p>

<pre><code>def rotation_reuse(angle):
    c, s = numpy.cos(angle), numpy.sin(angle)
    return numpy.array(((c,-s), (s, c)))
</code></pre>

<p>Again, benchmarking this change</p>

<pre><code>In [17] %timeit rotation(0.6)                                                                                                                                                                                                                                                                                        
4.3 µs ± 252 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

In [18]: %timeit rotation_reuse(0.6)                                                                                                                                                                                                                                                                                        
2.68 µs ± 30.6 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>

<p>You can see that it takes basically half the time, as you could expect by doing half the amount of operations.</p>

<p>And if we continue with what we learned already</p>

<pre><code>In [20]: def new_rotation(angle): 
    ...:     c, s = cos(angle), sin(angle) 
    ...:     return numpy.array(((c,-s), (s, c))) 
    ...:                                                                                                                                                                                                                                                                                                              

In [21]: %timeit new_rotation(0.6)                                                                                                                                                                                                                                                                                        
1.22 µs ± 18.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>

<p>Another 2x improvement, while keeping a <code>numpy</code> array as return value. This won't break the rest of your operations with the positions and velocities. You'd have to check if doing a manual loop to do those is faster or not than using <code>numpy</code>.</p>

<p>Furthermore, on a more "design" level, you have a lot of duplicated code between the <code>Ship</code> and <code>Asteroid</code> functions. Here, you most likely should try to have a class and then create instances, and thus reducing the amount of duplication. </p>

<p>Also, in Python, people tend to write class definitions with the first letter uppercase and functions all lowercase. You have <code>Ship</code> and <code>Asteroid</code> as functions. This ties with the previous paragraph, maybe you already kinda realized that those things are proper entities that deserve a more substantial modeling. </p>

<p>Moreover, improve the doctrings of the functions. As it is now, it's rather hard for a casual reader to understand what's happening.</p>
    </div>