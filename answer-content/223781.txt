<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What a wall of text!  Also known as write-only code, or job security.</p>

<p>You want to write understandable code, that you can come back to in 6 months, and within 5 minutes understand enough to change it, if necessary.  This has a for-loop over a sorted list comprehension, with embedded if-then-else, of a zip of two sorted json queries, with a lambda thrown in to influence sorting.  This isn't functional programming; it's dysfunctional programming.</p>

<hr>

<p>Let me begin with <code>parsestats</code>, because I can at least begin to understand it.</p>

<p>First, the name <code>parsestats</code> is itself a wall of characters.  How do I pronounce that word?  "par-sest-ats"?  Oh!  "parse stats"!  Write function names with <code>snake_case</code>, to aid the reader find the words in your compound name.  So this function should be called <code>parse_stats</code>.</p>

<p>In this function, you repeat <code>hero['pickBan']</code> 8 times.  This is a lot of repetition.  It means the Python interpreter is looking up the same element in a dictionary repeatedly, which means the code is not going to win any speed contests.  Look up the value once, and reuse that value, instead of relooking it up over and over again.  This is awkward to do in a list comprehension, so lets use a helper function:</p>

<pre><code>def parse_stats(herodata):

    def stats(hero_id, pick_ban):
        # ... TBD ... 

    return [ stats(hero['heroId'], hero['pickBan']) for hero in herodata['heroes']]
</code></pre>

<p>A 14-line list comprehension just got turned into a 1 line list comprehension, and <code>hero['pickBan']</code> got stored in the function argument <code>pick_ban</code>, for reuse multiple times.  I'm liking the direction this is going.</p>

<p>Now, what stats are being collected?  Looks like you've got 8 stats: 4 from this week, and the same 4 from the previous week.  Maybe we could compute those 4 stats in a function, passing in different selectors to grab the correct data?</p>

<pre><code>def parse_stats(herodata):

    def stats(hero_id, pick_ban):

        def week_stats(pick, ban, pick_count, ban_count):

            return pick_ban[pick]['matchCount'] / pick_count * 1000,
                   pick_ban[ban]['matchCount'] / ban_count * 1000,
                   pick_ban[pick]['wins'] * 100,
                   pick_ban[ban]['wins'] * 100

        this_week = week_stats('pick', 'ban', this_week_pick, this_week_ban)
        last_week = week_stats('pickLastWeek', 'banLastWeek', last_week_pick, last_week_ban)

        return hero_id, *this_week, *last_week

    this_week_pick = herodata['matchPickCount']
    this_week_ban = herodata['matchBanCount']
    last_week_pick = herodata['matchLastWeekPickCount']
    last_week_ban = herodata['matchLastWeekBanCount']

    return [ stats(hero['heroId'], hero['pickBan']) for hero in herodata['heroes']]
</code></pre>

<p>Is that the clearest way?  Maybe we want to use a <code>when</code> selector, instead:</p>

<pre><code>def parse_stats(herodata):

    def stats(hero_id, pick_ban):

        def stats_for(when):

            pick = pick_ban[f'pick{when}']
            ban = pick_ban[f'ban{when}']

            return pick['matchCount'] / herodata[f'match{when}PickCount'] * 1000,
                   ban['matchCount'] / herodata[f'match{when}BanCount'] * 1000,
                   pick['wins'] * 100,
                   ban['wins'] * 100

        this_week = stats_for('')
        last_week = stats_for('LastWeek')

        return hero_id, *this_week, *last_week

    return [ stats(hero['heroId'], hero['pickBan']) for hero in herodata['heroes']]
</code></pre>

<p>Which would make it easier to select <code>'LastMonth'</code> stats, too.</p>

<hr>

<p>Is a <code>tuple</code> really the best data structure for <code>parse_stats</code> to return?  The 0th element is the hero id.  What is the 2nd element?  Which element is last week's pick win percentage?  What is <code>[1]</code>, or <code>[3]</code>?</p>

<p>How about using a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a>?</p>

<pre><code>from collections import namedtuple

Stats = named tuple('Stats',
                    ('id',
                     'pick_rate', 'ban_rate', 'pick_wins', 'ban_wins',
                     'pick_rate_last_week', 'ban_rate_last_week', 'pick_wins_last_week', 'ban_wins_last_week'))

# ...

def parse_stats(herodata):
    def stats(hero_id, pick_ban):
        # ...
        return Stats(hero_id, *this_week, *last_week)
</code></pre>

<p>Or maybe make a tuple of tuples.</p>

<pre><code>Stats = namedtuple('Stats', 'id, this_week, last_week')
WeekStats = namedtuple('WeekStats', 'pick_rate, ban_rate, pick_wins, ban_wins')

def parse_stats(herodata):
    def stats(hero_id, pick_ban):
        # ...
        return Stats(hero_id, WeekStats(*this_week), WeekStats(*last_week))
</code></pre>

<p>And you can refer to <code>uni.id</code> and <code>imm.this_week.pick_rate</code> instead of <code>uni[0]</code> and <code>imm[1]</code>.</p>

<hr>

<p>Ok, the elephant in the program:</p>

<pre><code>print(f"{'Hero,':&lt;20}{'Value':&gt;7}")
for hero in sorted(ridiculous_list_comprehension, key=lambda tup: tup[1], reverse = True):
    print("{:&lt;20}{:&gt;7.2f}".format(inline_dictionary_definition[hero[0]], hero[1]))
</code></pre>

<p>First off, this should be a function, not code executed when Python parses the program text.  Use a <code>if __name__ == '__main__':</code> guard call the function if you want the code executed immediately upon parsing:</p>

<pre><code>def print_mashup():
    print(f"{'Hero,':&lt;20}{'Value':&gt;7}")
    for hero in sorted(ridiculous_list_comprehension, key=lambda tup: tup[1], reverse = True):
        print("{:&lt;20}{:&gt;7.2f}".format(inline_dictionary_definition[hero[0]], hero[1]))

if __name__ == '__main__':
    print_mashup()
</code></pre>

<p>Of course, name the function according to what it really is doing.</p>

<pre><code>for hero in sorted(...):
</code></pre>

<p>Uhm, no.  The output of <code>sorted()</code> isn't a list of <code>hero</code> objects.  You parsed all that <code>hero</code> data in <code>parse_stats</code>, and this is a much condensed summary of two values of those statistics, combined from two different data sets.  It is a list of two-value tuples.  Give those individual values names:</p>

<pre><code>for hero_id, score in sorted(...):
</code></pre>

<p>I'm guess the "value" is some kind of score.  Maybe <code>rating</code> is a better name.  At any rate, this is way more descriptive than the <code>hero[0]</code> and <code>hero[1]</code> references made in the print statement of the body of the loop.</p>

<pre><code>        print("{:&lt;20}{:&gt;7.2f}".format(inline_dictionary_definition[hero[0]], hero[1]))
</code></pre>

<p>Is that <code>inline_dictionary_definition</code> being constructed each and every iteration of the body of the <code>for</code> loop, so that one value can be extracted from the dictionary?  Be kind.  Create it once.</p>

<pre><code>def print_mashup():
    print(f"{'Hero,':&lt;20}{'Value':&gt;7}")

    HERO_BY_ID = {1: 'Anti-Mage', 2: 'Axe', ... 129: 'Mars'}

    for hero_id, score in sorted(ridiculous_list_comprehension, key=lambda tup: tup[1], reverse = True):
        print(f"{HERO_BY_ID[hero_id]:&lt;20}{score:&gt;7.2f}")
</code></pre>

<p>As for the <code>ridiculous_list_comprehension</code>, I haven't a clue what <code>"simple"</code> is compared to <code>"simple?rank=8"</code>, or what the calculated value is supposed to mean.  Or what <code>uni</code> and <code>imm</code> are supposed to be abbreviations for.  There are all sorts of unknowns.  Do the json queries return exactly the same <code>hero_id</code> sets?  Can there be an extra one in either of the sets, in which case sorting and zipping doesn't guarantee the data matches up properly!</p>

<p>I'm happy that you're happy to have written a program that you will personally use.  I'd be happier if someone else could understand it, and use it too.</p>
    </div>