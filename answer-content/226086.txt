<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Developer gone 'rogue'</h2>

<blockquote>
  <p><em>I am not entirely happy with this code. The reason is, in the future, a developer may forget that HtmlSanitizerFactory should be used for
  instantiating HtmlSanitizer... so he would create his new ModelBinder
  ..</em></p>
</blockquote>

<p>For this to happen, a developer has to dive in your code and deliberately change</p>

<blockquote>
<pre><code>private HtmlSanitizer _htmlSanitizer = HtmlSanitizerFactory.CreateInstance();
</code></pre>
</blockquote>

<p>to</p>

<pre><code> private HtmlSanitizer _htmlSanitizer = new HtmlSanitizer();
</code></pre>

<p>He would probably have a good reason to. And if not, other developers in the team should review and challenge that change. After all, it's best practice to perform code reviews, typically with <em>pull requests</em>.</p>

<hr>

<h2>Test-Driven Development</h2>

<p>You have introduced a dependency on a third-party class in your code. Generally, when providing such API code, you would like to reduce the hard dependencies to a minimum. What you could do, is use its interface <code>IHtmlSanitizer</code> instead. This allows for white-bow testing such as</p>

<pre><code>string unsanitizedMessageHtmlString = ".."; // some input
IHtmlSanitizer sanitizer = Mock&lt;IHtmlSanitizer&gt;(); // using some mock method ..
sanitizer.AssertWasCalled(m =&gt; m.Sanitize(unsanitizedMessageHtmlString));
</code></pre>

<p>You could go a step further and refactor out the third-party dependency entirely by providing your own interface. An adapter class mapping the third-party interface to yours can than be provided in a different library if you wish interop with that API. I am not suggesting this is a must. You should decide which dependencies you want to include in your own API.</p>

<h3>Regression</h3>

<blockquote>
  <p><em>But it is likely that a year from now, we need to developer a new model binder to sanitize a different HTML input. It is at that point
  that the developer could forget to initialize the sanitizer using the
  factory.</em></p>
</blockquote>

<p>In the comments you stated you are worried for new developers to use that class in a wrong way, possibly introducing bugs. These bugs should become apparent when providing <em>unit tests</em>. With white-box tests you can check whether <code>PostProcessNode</code> was registered to. And with black-box tests you could easily verify the content of the sanitized string.</p>

<p>It also wouldn't hurt to provide a team Wiki with guidelines, do's and dont's for new developers to get acquainted with the conventions and avoidable regressions.</p>

<hr>

<h2>Dependency Injection</h2>

<p>Instead of calling the factory to get an instance of <code>HtmlSanitizer</code>, you should use <em>Dependency Injection</em>. One way to do so is to have the dependency injected through the constructor.</p>

<pre><code>public AllowAndSanitizeHtmlBinder(IHtmlSanitizer htmlSanitizer)
{
    _htmlSanitizer = htmlSanitizer;
}
</code></pre>

<p>You would typically have an Ioc container where you register the dependencies. I don't know enough about the <code>IModelBinder</code>'s lifetime scope, so you may also want to register these to the container.</p>

<pre><code>container.RegisterSingleInstance&lt;IHtmlSanitizer&gt;(HtmlSanitizerFactory.CreateInstance());
</code></pre>

<hr>

<h2>Resource Management</h2>

<p>I don't like the third-party class <a href="https://github.com/mganss/HtmlSanitizer/blob/master/src/HtmlSanitizer/HtmlSanitizer.cs" rel="nofollow noreferrer">HtmlSanitizer</a>. The events are never cleared and the class does not implement <code>IDisposable</code>. It's a memory leak waiting to occur. You need to find a way to dispose these instances yourself and make sure to unsubscribe from:</p>

<blockquote>
<pre><code> sanitizer.PostProcessNode += (s, e) =&gt;  (e.Node 
     as IHtmlAnchorElement)?.SetAttribute("red", "nofollow noreferrer");
</code></pre>
</blockquote>
    </div>