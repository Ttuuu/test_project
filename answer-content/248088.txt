<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, the <code>DynamicClass</code> wraps a whole class loader for a single class.
If you need multiple classes from the same jar, you will have to create a complete
class loader and read the complete jar <em>for every single class</em>. This seems overkill,
but may well be OK in your context.</p>
<p>Apart from that there's not much to say, as you basically create a wrapper around three
lines of code.</p>
<p>Regarding <code>DynamicParser</code>: here it gets ugly. So you know that you have two methods called
<code>parse()</code> one with a string parameter and one with a reader. Why don't these classes simply
implement an interface which encompasses <code>parse(String</code> and <code>parse(Reader)</code>? I see reflection
as a last resort when all else fails, and in this case, simply implementing an interface
seems much easier and much clearer.</p>
<p>I don't know whether you only need this for a kind of "pluggable parser" or if you
have multiple locations in your code where you need this code, but from what I see,
I'd do the following:</p>
<p>1 - Create an interface <code>Parser</code> which declares the methods as above</p>
<p>2 - Create a utility class, which can load such a parser from a jar</p>
<pre><code>public static Parser loadParser(String fqn, Path jar) {
    // basically do the same as DynamicClass,
    // but upcast to parser and return an instance
}
</code></pre>
<p>3 - Use the Parser (as a strongly typed interface) in the client code</p>
<hr>
<p>Edit following the comment: I did not miss the third constructor, it just did not make any sense for me.</p>
<p>So you have multiple uses like this:</p>
<pre><code>DynamicClass dc1 = new DynamicClass("Thingy1", myJar);
...
DynamicClass dc2 = new DynamicClass("Thingy2", dc1.getClassLoader());
</code></pre>
<p>Where the locations are not necessarily related.</p>
<p>If someone inserts another call somewhere else in the code, which coincidentally is somewhere <em>before</em> dc1, he will have to:</p>
<pre><code>DynamicClass dc0 = new DynamicClass("Thingy0", myJar);
</code></pre>
<p>... and then <em>change</em> the original call to</p>
<pre><code>DynamicClass dc1 = new DynamicClass("Thingy1", dc0.getClassLoader());
</code></pre>
<p>In my world this is inacceptable. If you do caching, do it in the class itself, maybe by a static map or so, but keep it out of the public interface.</p>
<p>Regarding the interface: I feel like close-voting the question for missing review context now.</p>
<p>Nevertheless, I cannot see any reason why you use two different classes for DynamicParser and Parser. Just have DynamicParser implement an interface Parser and be done.</p>
    </div>