<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to focus on World, because it's the simplest part and also the main logic behind the program.</p>

<p>The biggest change I'd make is <strong>make World immutable</strong>. Every time you make a change to World, you create a new instance of it. That simplifies thing within World and also gives you free 'history', theoretically allowing you to go back and forth between time steps. It'll also mean you don't need an apply/update.</p>

<p>Some things to do that:</p>

<ul>
<li>Make everything final: WORLDSIZE should already be final. It's not being modified anywhere, and if you want a different sized world, make a new one.</li>
<li>Make your constructor private. If you want to create a world, use static builder methods to do that.</li>
</ul>

<p>Then <strong>move away from primitives</strong>.</p>

<ul>
<li>Don't use <code>int</code>, use <code>boolean</code>: <code>boolean isAlive</code>. What if someone (like you) sets something to 3 by accident? What does that mean? Maybe you do want a cell to have more than two states at some point. Then use an <code>enum</code>. But you can change that later if you do need it (<a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a>).</li>
<li>Don't use <code>boolean</code>, create your own object. If you have some kind of <code>Cell</code> class, then you can do things like connect neighbours, e.g. <code>cell.getNeighbors</code> and work with that directly. This can be initialised in the constructor. It's more hard work to start with, but it makes the other functions much more straight-forward. You can also call <code>kill</code> or <code>setState(...)</code> or whatever. Then it's self-documenting. And now you can also get rid of your 2D-arry completely, you just need a single List/array to contain a reference to all the cells!</li>
</ul>

<p>A couple of more minor things, given the code that is there:</p>

<ul>
<li>Rename <code>getNeighborCells</code>. It doesn't get the neighbours, it gets the count.</li>
<li>Similarly with <code>createRandomWorld</code>. It's not actually creating a world, it's initialising it. This kinda goes hand-in-hand with the immutability. This would be your builder that creates a new <code>World</code> object randomly initialised.</li>
<li>You might consider taking the logic out of the <code>applyRules</code> and passing it in as a "strategy". This would be easy with lambdas (with later versions of Java), and you could also provide a series of static, standard strategies, even a default by overloading the method.</li>
<li>You have <code>if (world[i][j] == ALIVE)</code> and then <code>if (world[i][j] == 0)</code>: this is an example of the problem caused by ints. How do you know 0 is <code>DEAD</code>? The compiler doesn't, so it can't check if that's actually what you mean.</li>
<li>Simplify those ifs in the <code>apply</code> method: the second one can be an else, for instance (it's actually not needed at all because you've already checked it's <code>ALIVE</code>).</li>
</ul>

<p>As far as I can see, the whole logic can be simplified to:</p>

<pre><code>if (numberOfNeighbors &lt; 2 || numberOfNeighbors &gt; 3) {
  cell.kill();
} else if (numberOfNeighbors == 3) {
  cell.resurrect();
}
</code></pre>

<p>Another advantage of moving to your own custom objects which you can interact with directly is you can take advantage of Java streams (although seeing your Timer, I'm assuming you're using an ooolder version):</p>

<pre><code>public World applyStrategy(Function&lt;Cell, CellState&gt; strategy) {
  return new World(allCells.stream()
      .map(cell -&gt; Cell.createCell(cell, strategy.apply(cell)))
      .toArray(String[]::new))
}

// In main...
World latestIteration = lastIteration.applyStrategy(cell -&gt; {
  int numberOfNeighbors = cell.getNeighborCount();
  if (numberOfNeighbors &lt; 2 || numberOfNeighbors &gt; 3) {
    return CellState.DEAD;
  } else if (numberOfNeighbors == 3) {
    return CellState.ALIVE;
  }
  return cell.getState();
}
</code></pre>

<p>Now that your <code>World</code> class is so simple (just an array of cell references), you can pass the new array/list of cells to a private constructor. And you would need a constructor in your <code>Cell</code> class for copying a given <code>Cell</code> and applying the given state (or, as given here, a static builder method).</p>

<p>Edit: Although you could change it to a <code>List</code>, given the size never changes, you can happily leave it as an array.</p>
    </div>