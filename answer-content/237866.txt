<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Algorithm:</strong><br>
It's brute-force, but for ten elements that's fine.  However, I don't think it will work correctly - it's going to stop at five pairs regardless of how many were generated.  </p>

<p>Also, the outer loop should stop before the last element and the inner loop should start one after the current value of the outer loop.  Otherwise you're just making the same comparison multiple times.</p>

<p>The main thing I would suggest that there are other data structures besides basic arrays.  In this case, a vector of pairs would work well.</p>

<pre><code>std::vector&lt;std::pair&lt;int,int&gt;&gt; results;

...

results.push_back(std::make_pair(input[a], input[b]));

...

if(results.size() == 0) 
{
    std::cout &lt;&lt; "No sum of integers found to equal desired total.\n";
}

...

for(int i = 0; i &lt; results.size(); ++i) 
{
    std::cout &lt;&lt; '(' &lt;&lt; results[i].first &lt;&lt; ", " &lt;&lt; results[i].second &lt;&lt; ')';
</code></pre>

<p>.<br>
.<br>
<strong>Style:</strong><br>
Always put brackets around your blocks, especially when there's a matching block that does have them (the if/else for showing the results).  </p>

<p>Give variables meaningful names, and don't re-use them just because they're the same type.  Also, you don't need to (and usually shouldn't) declare them all at the top of the method; declare them where they're used.</p>

<p>Separate the target number as its own variable, having it as the last item of the input array is less clear.</p>

<p>If you're not calling them anything more specific, <strong>i</strong> and <strong>j</strong> are the usual convention for loop variables.</p>

<p>The fake delay for "critical calculations" that in fact are already done is a bit silly. :P</p>
    </div>