<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the use of StringBuilder is making the code harder to read and isn't giving you a great benefit for the cost of read-ability or maintainability.  </p>

<p>To add spaces to the end of a string there is a method build in <a href="https://docs.microsoft.com/en-us/dotnet/api/system.string.padright?view=netframework-4.7.2" rel="nofollow noreferrer">PadRight</a>.  No need to create a new method just to use a string builder.   </p>

<p>Also ShiftText seems over complicated and again just using string would make it more maintainable and easier to read.  Compare it to this example</p>

<pre><code>private static void ShiftText(ref string text, Direction direction)
{
    var textLength = text.Length;

    switch (direction)
    {
        case Direction.LeftToRight:
            text = text.Substring(textLength - 1) + text.Substring(0, textLength - 1);
            break;
        case Direction.RightToLeft:
            text = text.Substring(1, textLength - 1) + text.Substring(0, 1);
            break;
    }
}
</code></pre>

<p>No need for Modulo method or a loop to shift array of chars.  </p>

<p>Then the UpdateLoop pads the text using the built in PadRight and passes it by ref. </p>

<pre><code>private static void UpdateLoop(string text, Direction direction = Direction.LeftToRight, int updateRate = 100)
{
    var movingText = text.PadRight(text.Length + 5);

    while (true)
    {
        ShiftText(ref movingText, direction);
        Console.Write($"\r{movingText}");
        Thread.Sleep(updateRate);
    }
}
</code></pre>

<p>I wouldn't worry about micro optimizations and would recommend reading <a href="https://blog.codinghorror.com/the-sad-tragedy-of-micro-optimization-theater/" rel="nofollow noreferrer">The Sad Tragedy Of Micro Optimization</a> blog  </p>

<p>If you really really wanted to be optimized the best would be to create a dictionary that contained all the strings shifted and just used the index position to get the string again to reuse.  But I wouldn't go that way unless performance or memory usage was an issue.</p>
    </div>