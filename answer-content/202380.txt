<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another, slightly slower, approach, but which helps you in future Project Euler problems, is using the same algorithm as in <a href="https://codereview.stackexchange.com/a/202370/98493">the answer</a> by <a href="https://codereview.stackexchange.com/users/65096/maxb">@maxb</a>, but instead of dividing by every number, only divide by the primes up to \$\sqrt{n}\$. For this you can use a <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow noreferrer">prime sieve</a> (a fast method to get all primes up to some number):</p>

<pre><code>def prime_sieve(limit):
    prime = [True] * limit
    prime[0] = prime[1] = False

    for i, is_prime in enumerate(prime):
        if is_prime:
            yield i
            for n in range(i * i, limit, i):
                prime[n] = False

def prime_factors(n):
    for p in prime_sieve(int(n ** 0.5) + 1):
        while n % p == 0:
            n //= p
            yield p
    if n != 1:
        yield n

if __name__ == "__main__":
    for n in (13195, 600851475143):
        print(n, max(prime_factors(n)))
</code></pre>

<p>Here I used a basic implementation of the sieve of Eratosthenes in pure Python. <a href="https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n/3035188#3035188">Faster implementations exist</a>.</p>

<p>Some speed comparisons:</p>

<pre><code>%timeit max(prime_factors(13195))
19.2 µs ± 771 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

%timeit get_max_prime_factor(13195)
3.55 µs ± 68.6 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

%timeit find_factors(13195).pop()
873 µs ± 217 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>

<p>And for the actual number in the problem:</p>

<pre><code>%timeit max(prime_factors(600851475143))
120 ms ± 1.54 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

%timeit get_max_prime_factor(600851475143)
394 µs ± 6.68 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

%timeit find_factors(600851475143).pop()
running for more than 10 minutes...
</code></pre>
    </div>