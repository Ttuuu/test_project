<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all, I find the code very well written.</p>

<p>I don't really understand the purpose of the <code>Argon2Hash.create</code> class method, but I'd venture it is for convenience and testing, so it's harmless to keep it; with a slight change, though:</p>

<pre><code>class Argon2Hash(str):
    @classmethod
    def create(cls, password, hasher=PASSWORD_HASHER):
        return cls(hasher, hasher.hash(password))
    ...
</code></pre>

<p>so it is easier to create hashs from strings using the default hasher. And for consistency sake, you should probably switch the order of the arguments for <code>__new__</code> and <code>__init__</code> as well.</p>

<hr>

<p>I am also uneasy with the way you handle password and field length. What would happen if I used an <code>Argon2Field</code> and provided a <code>max_length</code> that happen to be less than what <code>hasher.hash</code> return? I bet that upon saving the model using such field into the database it would raise some kind of validation error.</p>

<p>In the same vein, there is no easy way to specify a minimum password length per field (minimum in the sense of raw data, not hashed one).</p>

<p>So, instead of enabling the user to override <code>max_length</code>, I would always compute it from the <code>hasher</code>; and Iâ€™d add an option to specify the minimal acceptable length for the raw password:</p>

<pre><code>class Argon2Field(PasswordField):
    """An Argon2 password field."""

    accessor_class = Argon2FieldAccessor

    def __init__(self, min_length=None, hasher=PASSWORD_HASHER, **kwargs):
        """Initializes the char field, defaulting
        max_length to the respective hash length.
        """

        max_length = len(hasher.hash(''))
        super().__init__(max_length=max_length, **kwargs)

        self.min_password_length = min_length
        self.hasher = hasher

    ...


class Argon2FieldAccessor(FieldAccessor):
    """Accessor class for Argon2Field."""

    ...

    def __set__(self, instance, value):
        """Sets the password hash."""
        if value is not None:
            if isinstance(value, Argon2Hash):
                value = str(value)
            else:
                # If value is a plain text password, hash it.
                min_length = self.field.min_password_length
                if min_length is not None and len(value) &lt; min_length:
                    raise PasswordTooShortError(len(value), min_length)

                value = self.field.hasher.hash(value)

        super().__set__(instance, value)
</code></pre>
    </div>