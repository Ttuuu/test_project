<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ok, I think I found something noteworthy not yet mentioned by VisualMelon.</p>

<p>You are already using <code>MathF</code> to perform some operations for you, why not redirect some others to <code>Math</code>?</p>

<blockquote>
<pre><code>public Vector3 Min(Vector3 min)
{
    this.X = (this.X &lt; min.X) ? this.X : min.X;
    this.Y = (this.Y &lt; min.Y) ? this.Y : min.Y;
    this.Z = (this.Z &lt; min.Z) ? this.Z : min.Z;
    return this;
}
</code></pre>
</blockquote>

<p>could be written as:</p>

<pre><code>public Vector3 Min(Vector3 min)
{
    this.X = Math.Min(this.X, min.X);
    this.Y = Math.Min(this.Y, min.Y);
    this.Z = Math.Min(this.Z, min.Z);
    return this;
}
</code></pre>

<p>You could do the equivalent for method <code>Max</code>.</p>

<p>Note an inconsistency or at least a very confusing meaning of the variables <code>min</code> and <code>max</code>. In methods <code>Min</code> and <code>Max</code> you take the min, respectively max of the current value with the provided value. While in <code>Clamp</code> you turn the meaning of min and max around.</p>

<p>I would refactor <code>Min</code> and <code>Max</code> to use the same definition for min and max as <code>Clamp</code>. This way, the provided variable is a boundary, just as in <code>Clamp</code>.</p>

<pre><code>public Vector3 Min(Vector3 max)
{
    this.X = Math.Min(this.X, max.X);
    this.Y = Math.Min(this.Y, max.Y);
    this.Z = Math.Min(this.Z, max.Z);
    return this;
}

public Vector3 Max(Vector3 min)
{
    this.X = Math.Max(this.X, min.X);
    this.Y = Math.Max(this.Y, min.Y);
    this.Z = Math.Max(this.Z, min.Z);
    return this;
}
</code></pre>

<p>Clamp could then be rewritten (you could also add some validation that max &gt; min):</p>

<pre><code>public Vector3 Clamp(Vector3 min, Vector3 max)
{
    this.Max(min);
    this.Min(max);
    return this;
}
</code></pre>

<p>One other thing about the original <code>Clamp</code> code:</p>

<blockquote>
<pre><code>public Vector3 Clamp(Vector3 min, Vector3 max)
{
    this.X = (this.X &lt; min.X) ? min.X : this.X = (this.X &gt; max.X) ? max.X : this.X;
    this.Y = (this.Y &lt; min.Y) ? min.Y : this.Y = (this.Y &gt; max.Y) ? max.Y : this.Y;
    this.Z = (this.Z &lt; min.Z) ? min.Z : this.Z = (this.Z &gt; max.Z) ? max.Z : this.Z;
    return this;
}
</code></pre>
</blockquote>

<p>You don't have to assign this.* to itself in the ternary operations. You could simplify to:</p>

<pre><code>public Vector3 Clamp(Vector3 min, Vector3 max)
{
    this.X = (this.X &lt; min.X) ? min.X : (this.X &gt; max.X) ? max.X : this.X;
    this.Y = (this.Y &lt; min.Y) ? min.Y : (this.Y &gt; max.Y) ? max.Y : this.Y;
    this.Z = (this.Z &lt; min.Z) ? min.Z : (this.Z &gt; max.Z) ? max.Z : this.Z;
    return this;
}
</code></pre>

<p>Or a bit more compact using <code>Math</code>:</p>

<pre><code>public Vector3 Clamp(Vector3 min, Vector3 max)
{
    this.X = Math.Min(Math.Max(this.X, min.X), max.X);
    this.Y = Math.Min(Math.Max(this.Y, min.Y), max.Y);
    this.Z = Math.Min(Math.Max(this.Z, min.Z), max.Z);
    return this;
}
</code></pre>

<p>Beyond this, I would also favor to use immutable classes. So instead of changing the instance coordinates, I would create a new instance of a <code>Vector3</code> instead. If the entire API is written this way, your fluent methods make sense and would consistently return new instances on chaining.</p>
    </div>