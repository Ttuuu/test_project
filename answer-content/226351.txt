<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><strong>Docstrings</strong>: You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer"><code>docstring</code></a> at the beginning of every method, class and module you write. This will allow documentation to identify what your program is supposed to accomplish.</li>
<li><strong>Wildcard Import Statements</strong>: <code>from ... import *</code> should be avoided. You can end up importing something that you don't use/need, which can cause name collisions and other issues. You should refer to <a href="https://stackoverflow.com/a/3615206/8968906">this StackOverflow answer</a> for more information. Figure out what you need and what you don't need from  <code>graphics</code>.</li>
<li><strong>Unused Imports</strong>: You don't use <code>from threading import Timer</code>. This creates a dependency that does not need to exist and makes the code more difficult to read.</li>
<li><strong>Multiple Imports on one line</strong>: You have <code>import keyboard, random, time</code>. This does not comply with <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">PEP-8s section on Imports</a>. You should put each import on it's own line, with the exception of importing multiple specific things from a module, like so: <code>from ... import ..., ...</code>.</li>
<li><strong>Ordering Imports</strong>: You should order your imports like so: 

<ol>
<li><blockquote>
  <p>Standard library imports</p>
</blockquote></li>
<li><blockquote>
  <p>Related third party imports</p>
</blockquote></li>
<li><blockquote>
  <p>Local application/library specific imports</p>
</blockquote></li>
</ol></li>
<li><strong>Variable/Operator Spacing</strong>: You should have a space before and after the <code>=</code>/<code>+=</code>/<code>-=</code>, etc, for variable assignment or other operators. <strong>Yes</strong>: <code>i += 1</code> <strong>NO</strong>: <code>i+=1</code>.</li>
<li><strong>Constant Variable Naming</strong>: Any variables that are constants in your program should be UPPERCASE.</li>
<li><strong>Split code into methods</strong>: You have a lot of code that can be grouped into methods/classes. I don't have the time to do it for you, so I'll leave it up to you :).</li>
<li><strong>Boolean Comparison (game==True)</strong>: Having <code>while game==True:</code> is unnecessary. You can use the variable itself as the boolean expression. Instead, do <code>while game:</code>, which is easier to read and <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP-8 Compliant</a>.</li>
<li><strong>Global Variables</strong>: <a href="http://wiki.c2.com/?GlobalVariablesAreBad" rel="nofollow noreferrer">Global Variables are Bad!</a> You'll have to implement this into your program without using globals on your own, again I don't have the time to rewrite everything.</li>
<li><strong>Enumerate vs range(len(...))</strong>: Multiple times you have <code>for i in range(len(...)):</code>. You should use <code>for index, value in enumerate(...)</code> instead. <a href="https://stackoverflow.com/a/24150815/8968906">This StackOverflow answer</a> goes into detail about why you should make this change.</li>
<li><strong>Use _ for unused loop variables</strong>: When you use <code>enumerate</code>, and don't need the value but only the index, use <code>for index, _ in enumerate(...)</code>. The <code>_</code> makes it clear that that variable should be ignored, and isn't useful.</li>
<li><strong>Parameter '=' Spacing</strong>: When inserting variables like <code>parameter_name=variable</code>, there shouldn't be a space. Same when you have default parameters in method declarations.</li>
<li><strong>Variable Naming snake_case</strong>: Variables should be <code>snake_case</code>, not <code>camelCase</code>.</li>
</ul>

<p><strong><em>Updated Code</em></strong></p>

<pre><code>"""
Module Docstring
A description of your program goes here
"""

import random
import time
import keyboard

from graphics import *

# configurations
WIDTH = 400
GRID_HEIGHT = WIDTH
HEIGHT = 470
TIMER = False
GAME = True
SCORE = 0
BONUS = 0
X = 70
Y = 30
RADIUS = 10
LENGTH = RADIUS * 2
PLAYER_LENGTH = 3
POISON_LENGTH = PLAYER_LENGTH
i = 0
k = 0
POINT_RADIUS = 5
POINTS = False
CHERRY_POINTS = False
KEY = "Right"
COUNTDOWN = 0

# set coordinations
C_X = 90
C_Y = 30
COORD_X = [10]
COORD_Y = [10]

while COORD_X[len(COORD_X) - 1] != (WIDTH - 10):
    C_X += 20
    COORD_X.append(C_X)

while COORD_Y[len(COORD_Y) - 1] != 390:
    C_Y += 20
    COORD_Y.append(C_Y)

RANDOM_X = random.choice(COORD_X)
RANDOM_Y = random.choice(COORD_Y)
CHERRY_RANDOM_X = random.choice(COORD_X)
CHERRY_RANDOM_Y = random.choice(COORD_Y)
POISON_RANDOM_X = random.choice(COORD_X)
POISON_RANDOM_Y = random.choice(COORD_Y)

#window setup
WINDOW = GraphWin("SNAKE", WIDTH, HEIGHT, autoflush=False)
WINDOW.setBackground(color_rgb(15, 15, 15))

# grid
LINE_X = 20
while LINE_X &lt; WIDTH:
    GRID_X = Line(Point(LINE_X, 0), Point(LINE_X, GRID_HEIGHT))
    GRID_X.setOutline(color_rgb(25, 25, 25))
    GRID_X.draw(WINDOW)
    LINE_X += 20
LINE_Y = 20
while LINE_Y &lt;= GRID_HEIGHT:
    GRID_X = Line(Point(0, LINE_Y), Point(WIDTH, LINE_Y))
    GRID_X.setOutline(color_rgb(25, 25, 25))
    GRID_X.draw(WINDOW)
    LINE_Y += 20

# snake banner
UI = Rectangle(Point(0, 400), Point(WIDTH, HEIGHT))
UI.setFill(color_rgb(102, 51, 0))
UI.setOutline(color_rgb(102, 51, 0))
UI.draw(WINDOW)
SNAKE_TITLE = Text(Point(WIDTH / 2, 420), "SNAKE")
SNAKE_TITLE.setTextColor("green")
SNAKE_TITLE.setSize(20)
SNAKE_TITLE.draw(WINDOW)
SCORE_TITLE = Text(Point(320, 424), "SCORE")
SCORE_TITLE.setTextColor("white")
SCORE_TITLE.setSize(10)
SCORE_TITLE.draw(WINDOW)
SCORE_UI = Text(Point(320, 435), SCORE)
SCORE_UI.setTextColor("white")
SCORE_UI.setSize(10)
SCORE_UI.draw(WINDOW)

# make player
PLAYER = {}
PLAYER[0] = Rectangle(Point(X - 20 - RADIUS, Y - RADIUS), Point(X - 20 + RADIUS, Y + RADIUS))
PLAYER[1] = Rectangle(Point(X - 40 - RADIUS, Y - RADIUS), Point(X - 40 + RADIUS, Y + RADIUS))
PLAYER[2] = Rectangle(Point(X - 60 - RADIUS, Y - RADIUS), Point(X - 60 + RADIUS, Y + RADIUS))

# make poison
POISON = {}

def main():    

    global TIMER, SCORE_UI, SCORE, BONUS, PLAYER_LENGTH, POISON_LENGTH, X, Y, POINTS, CHERRY_POINTS, RANDOM_X, RANDOM_Y, CHERRY_RANDOM_X, CHERRY_RANDOM_Y, POISON_RANDOM_X, POISON_RANDOM_Y, KEY, COUNTDOWN, k, GAME

    while GAME:
        # score update
        SCORE_UI.undraw()
        SCORE_UI = Text(Point(320, 435), SCORE)
        SCORE_UI.setTextColor("white")
        SCORE_UI.setSize(10)
        SCORE_UI.draw(WINDOW)

        # generating new body blocks
        if len(PLAYER) &lt; PLAYER_LENGTH:
            i += 1
            PLAYER[i] = PLAYER[i - 1].clone()

        # body following player
        PLAYER[0].undraw()
        for i in range(1, len(PLAYER)):
            PLAYER[len(PLAYER) - i].undraw()
            PLAYER[len(PLAYER) - i] = PLAYER[len(PLAYER) - i - 1].clone()
            PLAYER[len(PLAYER) - i].draw(WINDOW)

        # update player's head coordinate
        PLAYER[0] = Rectangle(Point(X - RADIUS, Y - RADIUS), Point(X + RADIUS, Y + RADIUS))
        PLAYER[0].setFill("green")
        PLAYER[0].setWidth(2)
        PLAYER[0].draw(WINDOW)

        # player movement
        if keyboard.is_pressed("Up") and KEY != "Down":
            KEY = "Up"
        elif keyboard.is_pressed("Left") and KEY != "Right":
            KEY = "Left"
        elif keyboard.is_pressed("Down") and KEY != "Up":
            KEY = "Down"
        elif keyboard.is_pressed("Right") and KEY != "Left":
            KEY = "Right"
        if KEY == "Up":
            Y -= LENGTH
        elif KEY == "Left":
            X -= LENGTH
        elif KEY == "Down":
            Y += LENGTH
        elif KEY == "Right":
            X += LENGTH

        # point
        if not points: # generates new point when eaten
            point = Rectangle(Point(RANDOM_X - POINT_RADIUS, RANDOM_Y - POINT_RADIUS), Point(RANDOM_X + POINT_RADIUS, RANDOM_Y + POINT_RADIUS))
            point.setFill("white")
            point.setWidth(2)
            point.draw(WINDOW)
            points = True
        if PLAYER[0].getCenter().getX() == point.getCenter().getX() and PLAYER[0].getCenter().getY() == point.getCenter().getY(): # when player eats the point
            point.undraw()
            PLAYER_LENGTH += 1
            POISON_LENGTH += 1
            SCORE += 200 + BONUS
            RANDOM_X = random.choice(COORD_X)
            RANDOM_Y = random.choice(COORD_Y)
            for i, _ in enumerate(PLAYER):
                if (point.getCenter().getX() == PLAYER[i].getCenter().getX() and point.getCenter().getY() == PLAYER[i].getCenter().getY()) or (CHERRY_POINTS and cherry_point.getCenter().getX() == point.getCenter().getX() and cherry_point.getCenter().getY() == point.getCenter().getY()): # regenerate x and y coordinate if they share the same coordinate as player and cherry
                    RANDOM_X = random.choice(COORD_X)
                    RANDOM_Y = random.choice(COORD_Y)
            for i, _ in enumerate(POISON): # regenerate x and y coordinate if point shares the same coordinate to other array of poisons
                if point.getCenter().getX() == POISON[i].getCenter().getX() and point.getCenter().getY() == POISON[i].getCenter().getY():
                    CHERRY_RANDOM_X = random.choice(COORD_X)
                    CHERRY_RANDOM_Y = random.choice(COORD_Y)
            points = False

        # cherry
        if COUNTDOWN == 150:
            COUNTDOWN = 0
            if not CHERRY_POINTS: # generates new cherry from countdown
                cherry_point = Rectangle(Point(CHERRY_RANDOM_X - POINT_RADIUS, CHERRY_RANDOM_Y - POINT_RADIUS), Point(CHERRY_RANDOM_X + POINT_RADIUS, CHERRY_RANDOM_Y + POINT_RADIUS))
                cherry_point.setFill(color_rgb(213, 0, 50))
                cherry_point.setWidth(2)
                cherry_point.draw(WINDOW)
                CHERRY_POINTS = True
        if CHERRY_POINTS:
            for i in range(2, 6): # cherry blinks between countdown 40 to 100
                if COUNTDOWN == 20 * i:
                    cherry_point.undraw()
                elif COUNTDOWN == 10 + (20 * i):
                    cherry_point.draw(WINDOW)
            if COUNTDOWN &gt;= 100: # when countdown becomes 100, remove cherry and reset count down
                CHERRY_POINTS = False
                COUNTDOWN = 0
                CHERRY_RANDOM_X = random.choice(COORD_X)
                CHERRY_RANDOM_Y = random.choice(COORD_Y)
        if CHERRY_POINTS and PLAYER[0].getCenter().getX() == cherry_point.getCenter().getX() and PLAYER[0].getCenter().getY() == cherry_point.getCenter().getY(): # when player eats the cherry
            cherry_point.undraw()
            SCORE += 500
            CHERRY_RANDOM_X = random.choice(COORD_X)
            CHERRY_RANDOM_Y = random.choice(COORD_Y)
            for i, _ in enumerate(PLAYER):
                if (cherry_point.getCenter().getX() == PLAYER[i].getCenter().getX() and cherry_point.getCenter().getY() == PLAYER[i].getCenter().getY()) or (cherry_point.getCenter().getX() == point.getCenter().getX() and cherry_point.getCenter().getY() == point.getCenter().getY()): # regenerate x and y coordinate if they share the same coordinate as player and point
                    CHERRY_RANDOM_X = random.choice(COORD_X)
                    CHERRY_RANDOM_Y = random.choice(COORD_Y)
            for i, _ in enumerate(POISON): # regenerate x and y coordinate if cherry shares the same coordinate to other array of poisons
                if cherry_point.getCenter().getX() == POISON[i].getCenter().getX() and cherry_point.getCenter().getY() == POISON[i].getCenter().getY():
                    CHERRY_RANDOM_X = random.choice(COORD_X)
                    CHERRY_RANDOM_Y = random.choice(COORD_Y)
            CHERRY_POINTS = False

        # poison
        if POISON_LENGTH % 5 == 0: # generates a poison block each time the player size reaches the multiple of 5
            POISON[k] = Rectangle(Point(POISON_RANDOM_X - POINT_RADIUS, POISON_RANDOM_Y - POINT_RADIUS), Point(POISON_RANDOM_X + POINT_RADIUS, POISON_RANDOM_Y + POINT_RADIUS))
            POISON[k].setFill("green")
            POISON[k].setWidth(2)
            POISON[k].draw(WINDOW)
            POISON_RANDOM_X = random.choice(COORD_X)
            POISON_RANDOM_Y = random.choice(COORD_Y)
            for i, _ in enumerate(PLAYER):
                if POISON[k].getCenter().getX() == PLAYER[i].getCenter().getX() and POISON[k].getCenter().getY() == PLAYER[i].getCenter().getY() or (POISON[k].getCenter().getX() == point.getCenter().getX() and POISON[k].getCenter().getY() == point.getCenter().getY()) or (CHERRY_POINTS and POISON[k].getCenter().getX() == cherry_point.getCenter().getX() and POISON[k].getCenter().getY() == cherry_point.getCenter().getY()): # regenerate x and y coordinate if they share the same coordinate as player and point and cherry
                    POISON_RANDOM_X = random.choice(COORD_X)
                    POISON_RANDOM_Y = random.choice(COORD_Y)
            for i, _ in enumerate(POISON):
                if POISON[k].getCenter().getX() == POISON[i].getCenter().getX() and POISON[k].getCenter().getY() == POISON[i].getCenter().getY(): # regenerate x and y coordinate if new poison shares the same coordinate to other array of poisons
                    POISON_RANDOM_X = random.choice(COORD_X)
                    POISON_RANDOM_Y = random.choice(COORD_Y)
            BONUS += 50
            k += 1
            POISON_LENGTH += 1

        # game over requirements
        for i, _ in enumerate(POISON): # if player touches poison
            if PLAYER[0].getCenter().getX() == POISON[i].getCenter().getX() and PLAYER[0].getCenter().getY() == POISON[i].getCenter().getY():
                GAME = False
        for i in range(2, len(PLAYER)): # if player touches its own body or reach out of window
            if PLAYER[0].getCenter().getX() == PLAYER[i].getCenter().getX() and PLAYER[0].getCenter().getY() == PLAYER[i].getCenter().getY() or X &lt; 0 or X &gt; WIDTH or Y &lt; 0 or Y &gt; GRID_HEIGHT:
                GAME = False

        # FPS
        update(10)
        COUNTDOWN += 1


    # GAME OVER
    game_over = Text(Point(WIDTH / 2, 200), "GAME OVER")
    game_over.setTextColor("red")
    game_over.setSize(30)
    game_over.draw(WINDOW)
    update()
    time.sleep(2)
    WINDOW.close()

main()
</code></pre>
    </div>