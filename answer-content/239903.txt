<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using 4 variables (<code>a1,a2,b1,b2</code>) to define a rectangle is awkward.  You need to pass all 4 variables, and remember what the correct order of the variables are.</p>

<p>Consider:</p>

<pre><code>def convert_to_standard(a1,a2,b1,b2):
    ...

def intersects(h,a1,a2,b1,b2):
    if h &lt; 0:
        return "incorrect"

    a1,b1,a2,b2 = convert_to_standard(a1,b1,a2,b2)

    ...
</code></pre>

<p>Is this correct?  You've passed <code>b1</code> to <code>a2</code> and <code>a2</code> to <code>b1</code>!  </p>

<p>As suggested by <a href="https://codereview.stackexchange.com/a/239892/100620">Sam Stafford</a>, using a tuple of tuples can help.</p>

<pre><code>Rect = Tuple[Tuple[int, int], Tuple[int, int]]
</code></pre>

<p>But it still isn't clear if the first coordinate is the lower left, or the upper left.  Better would be to use a <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer"><code>NamedTuple</code></a>:</p>

<pre><code>from typing import NamedTuple

class Rectangle(NamedTuple):
    left: float
    bottom: float
    right: float
    top: float
</code></pre>

<p>This <code>Rectangle</code> class gives you named members from <code>rect.left</code> through <code>rect.top</code>, which makes it easy to tell what the values represent.</p>

<p>The <code>convert_to_standard()</code> functionality can be added as a <code>@classmethod</code> to this class, returning a normalized <code>Rectangle</code> regardless of the vertex orientation:</p>

<pre><code>    @classmethod
    def normalize(self, x1, y1, x2, y2) -&gt; 'Rectangle':
        return Rectangle(min(x1, x2), min(y1, y2), max(x1, x2), max(y1, y2))
</code></pre>

<p>You can add a <code>@property</code> for the rectangle's width and height, ensuring the width and height are never negative:</p>

<pre><code>    @property
    def width(self) -&gt; float:
        return max(self.right - self.left, 0)

    @property
    def height(self) -&gt; float:
        return max(self.top - self.bottom, 0)
</code></pre>

<p>As well as a <code>@property</code> for the rectangle's area:</p>

<pre><code>    @property
    def area(self) -&gt; float:
        return self.width * self.height
</code></pre>

<p>You can add a method to determine if a rectangle is valid or not, based on this area.  <code>if rect</code> will return <code>True</code> only for valid rectangles, which have a positive area, so must have a top coordinate larger than the bottom, and a right coordinate larger than the left:</p>

<pre><code>    def __bool__(self):
        return self.area &gt; 0
</code></pre>

<p>Finally, we can define a method which returns the intersection of two <code>Rectangle</code> objects:</p>

<pre><code>    def intersect(self, other):
       if not isinstance(other, Rectangle):
           raise TypeError("Not a rectangle")
       return Rectangle(max(self.left, other.left), max(self.bottom, other.bottom),
                        min(self.right, other.right), min(self.top, other.top))
</code></pre>

<p>And we can write some code to quickly exercise this class, based on the diagram given at the top.  (Also, notice the use of <code>f"..."</code> strings for formatted output):</p>

<pre><code>if __name__ == '__main__':
    h = 5
    rh = Rectangle(0, 0, 6, h)
    r1 = Rectangle.normalize(-6, -4, 2, 1)
    r2 = Rectangle.normalize(-3, 7, 3, 5)   # flipped top-bottom
    r3 = Rectangle.normalize(9, 2, 5, 4)    # flipped left-right

    for rect in (r1, r2, r3):
        intersection = rh.intersect(rect)
        if intersection:
            print(f"{rect} intersection area = {intersection.area}")
        else:
            print(f"{rect} No intersection")
</code></pre>

<p>Output:</p>

<blockquote>
<pre><code>Rectangle(left=-6, bottom=-4, right=2, top=1) intersection area = 2
Rectangle(left=-3, bottom=5, right=3, top=7) No intersection
Rectangle(left=5, bottom=2, right=9, top=4) intersection area = 2
</code></pre>
</blockquote>

<h1>PEP-8</h1>

<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> is a style guide for Python.  It defines certain conventions to improve conformity and readability amongst Python programs.  Things like:</p>

<ul>
<li>All commas (such as in function parameters and arguments) must be followed by one space.</li>
<li>Variables must be <code>snake_case</code>, which you follow except for <code>A</code> for area.</li>
</ul>

<h1>Consistent Return Types</h1>

<p>What does <code>intersects(h,a1,a2,b1,b2)</code> return?  A <code>bool</code>?  If so, you can test it like:</p>

<pre><code>if intersect(h, a1, a2, b1, b2):
    ...
else:
    ...
</code></pre>

<p>Except, it can also return the string <code>"incorrect"</code>, which is treated as <code>True</code> in all conditionals.  So instead you must test the return value as <code>is True</code>, <code>is False</code> and <code>== "incorrect"</code>, and hope you don't accidentally write <code>== "Incorrect"</code> or <code>== "invalid"</code>.</p>

<p>It is much better to raise an exception when incorrect arguments are passed to the function, such as <code>intersect()</code> raising a <code>TypeError</code> when not given a <code>Rectangle</code> argument.</p>

<p>Also, you are doing the computation up to 3 times!  This is inefficient; you should store the return value from <code>intersect(h, a1, a2, b1, b2)</code> in a local variable, and then test that value, instead of doing the intersection calculations repeatedly.</p>
    </div>