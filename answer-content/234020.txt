<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Else-if etc.</strong></p>

<p>Well, you often find the requirement "single return" in coding standards. Whether you like it or not, don't put any deeper meaning to it. This is just the same as I'd say "fix your formatting" (:-)) if it was my project. The only life lesson here is, that in 95% of a developer's work you will not be able to define the standard, and just have to follow. Just deal with it.</p>

<p><strong>List return</strong></p>

<p>As far as I understand your code, you specifically create a list locally in a method just to return it. So, there is no outer scope involved, no external "ownership" for the collection, nothing of that sort. Therefore, restricting the possible operations on the return value, which you created specifically for the caller, makes no sense. (Your best practices probably stem from the returning of internal object values - there, I absolutely agree with you.)</p>

<p>Furthermore, there also is a standard in the given project: if every method returns a modifiable collection, the user will expect this. Having a <em>single</em> method in the middle of the project wich behaves differently will stick out like a sore thumb.</p>

<p>What I <em>personally</em> would do is, to document the concrete return value in the method signature. So, instead of returning a generic <code>List</code> (aka I don't tell you whether you can modify the list, I don't tell you whether you can index-access the list, etc.) I'd return an <code>ArrayList</code>. (Principle behind this: always demand the smallest contract possible in your parameters, and return the biggest contract you can afford.) (And let's face it: all this "you can change the implementation later" that everyone tells you is pure B.S. - it is <em>never</em> done in practice.) - But probably that would lead to conflicts with the maintainer again.</p>

<p>Bottom line: that's life in software. There's no personal fault on your side, and no personal fault in the maintainer's views either. Different projects have different approaches, and as a programmer, you have to learn to adapt.</p>

<p>And regarding the changes and ownership: do it yourself. Take responsibility for your code, your logic, and your reasoning behind it, even <em>if</em> you have to adhere to a standard to get it accepted.</p>
    </div>