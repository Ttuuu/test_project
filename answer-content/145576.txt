<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're almost there. But first, a few code smells:</p>

<pre><code>function getLocation(query, map, object, delay) {
    ...
    service.textSearch({ query: query }, function (results, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
            ...
            object.lang = loc.lng();
            object.lat = loc.lat();
            deferred.resolve(object);
        }
        ...
    ...
}
</code></pre>

<p>Your function returns a promise that resolves with an object containing <code>lat</code> and <code>long</code>. However, you are mutating an object called <code>object</code>. The problem here is the unwanted side effect. If you ever want to use this function elsewhere, you have to supply it an unnecessary object. If you also pass in an existing object, you unintentionally introduce <code>lat</code> and <code>long</code>.</p>

<pre><code>if (status == google.maps.places.PlacesServiceStatus.OK) {
  ...
} else {
  if (status === "OVER_QUERY_LIMIT") {
    ...
  }
}
</code></pre>

<p>That <code>google.maps.places.PlacesServiceStatus.OK</code> is very long and visually annoying. Consider putting it in a shorter variable. Also, the <code>if</code> statement in the <code>else</code> block can be collapsed as an <code>else if</code> of the first <code>if</code> statement.</p>

<p>Lastly, the deferred pattern is actually an anti-pattern. Wrap your operation in a promise constructor instead of having a dangling deferred.</p>

<p>If I understand correctly, you need to do a location request, and retry on fail. You simply call your API. Resolve and reject accordingly.</p>

<pre><code>function getLocation(query, map, retryTimeout){
  var service = new google.maps.places.PlacesService(map);
  var OK = google.maps.places.PlacesServiceStatus.OK;
  var OVER_LIMIT = 'OVER_QUERY_LIMIT';

  return new Promise(function(resolve, reject){
    service.textSearch({ query: query }, function (results, status) {
      var loc = results[0].geometry.location;

      if(status === OK ){
        resolve({ lat: loc.lat(), lang: loc.lang() });
      } else if(status === OVER_LIMIT){

        // The most interesting part. Reschedule a retry.
        setTimeout(function(){

          // When the promise of this call resolves then...
          // call the resolve/reject of the enclosing (previous) promise
          getLocation(query, map, retryTimeout).then(resolve, reject);
        }, retryTimeout);

      } else {
        reject(new Error(status));
      }
    });
  });
}

// Usage:
var object= {...}
var locationPromise = getLocation(query, map, 1000);

locationPromise.then(function(locationData){
  // Only then do you mutate. Only have getLocation get the location data.
  // Mutating object is not its concern. It's the consumer's concern.
  object.lat = locationData.lat;
  object.lang = locationData.lang;
});
</code></pre>

<p>Now here's the trick. In order to make <code>getLocation</code> act like a recursive call, you simply call <code>getLocation</code> again, but hand over the <code>resolve</code> and <code>reject</code> of the enclosing promise as its callbacks. When the succeeding <code>getLocation</code> call succeeds, it will call the previous promise's callbacks.</p>

<p>So in terms of execution, it's not really recursive and the entire operation is still async. However, how the promises enclose each other one call after the other and pass on their <code>resolve</code> and <code>reject</code> as callbacks to the next makes it act recursive.</p>

<p>Of course we cannot escape the wrath of <code>setTimeout</code> since we need it for delay.</p>

<p>Since Promises are not widely supported yet, you can use Angular's built-in <code>$q</code> which does the same thing, and probably more.</p>
    </div>