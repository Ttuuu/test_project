<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>cstack_alloc failure</h2>

<p>This:</p>

<pre><code>cstack* stack = cstack_alloc(4, sizeof(int));
</code></pre>

<p>does not check for a null, which you return from here:</p>

<pre><code>if (!new_stack)
{
    return NULL;
}
</code></pre>

<p>There are two problems with this. First, if it fails, it will not be graceful; it will likely segfault. Second, you are discarding <code>errno</code> information, and would be well-served to call <code>perror</code>.</p>

<h2>Logic inversion</h2>

<p>This is a matter of style, but I usually like to convert this kind of logic:</p>

<pre><code>if (stack)
{
    if (stack-&gt;data)
    {
        free(stack-&gt;data);
        stack-&gt;data = NULL;
    }

    stack-&gt;item_size = 0;
    stack-&gt;top = NULL;
    stack-&gt;cap = NULL;

    free(stack);
}
</code></pre>

<p>into</p>

<pre><code>if (!stack)
    return;
// ...
</code></pre>

<p>It will probably not affect the output of the compiler, and is easier on the eyes and brain.</p>

<h2>printf</h2>

<p>Why <code>fprintf(stdout, "1. push\n");</code> when you can simply <code>printf</code>? Better yet, <code>puts</code>, which does not need to process a format string.</p>

<p>The same goes for <code>fscanf(stdin, "%d", &amp;choice);</code>, which can just use <code>scanf</code>.</p>

<h2>Input validation</h2>

<pre><code>fscanf(stdin, "%d", &amp;choice);
</code></pre>

<p>should return 1 on success. It's important that you validate this, in case someone entered text that is non-numeric.</p>
    </div>