<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Method Names</h1>

<p>Robert C. Martin, who wrote the book "Clean Code", sad</p>

<blockquote>
  <p><a href="https://www.goodreads.com/author/quotes/45372.Robert_C_Martin?page=2" rel="nofollow noreferrer">Donâ€™t Use a Comment When You Can Use a Function or a Variable</a></p>
</blockquote>

<p>In your case you have the function (or method) but you need to clarify what it does with a comment because of the meaningless name of the method.</p>

<blockquote>
<pre><code>// heuristics in our case - manhattan distance
public int h(Vertex s, Vertex s_goal) { /* ... */ }

// incremental cost of moving from node s to next node with cost
public int g(Vertex s, int cost) { /* ... */ }

// total cost of the path via node s
public int f(Vertex s) { /* ... */ }
</code></pre>
</blockquote>

<p>They could be named like <code>distance</code>, <code>incrementalCost</code> and <code>totalCost</code>.</p>

<p>Simply change the name of the </p>

<h1><a href="http://wiki.c2.com/?FeatureEnvySmell" rel="nofollow noreferrer">Feature Envy</a></h1>

<blockquote>
  <p>The whole point of objects is that they are a technique to package data with the processes used on that data. [...]</p>
</blockquote>

<p>Why do you decide to use a <code>ComputationUtils</code> instead of object methods on <code>Vertex</code>?</p>

<p>Two examples:</p>

<blockquote>
<pre><code>public int h(Vertex s, Vertex s_goal) {
    return Math.abs(s.getColumn() - s_goal.getColumn()) + Math.abs(s.getRow() - s_goal.getRow());
   }
</code></pre>
</blockquote>

<pre><code>public int distanceTo(Vertex other) {
    return Math.abs(column - other.column) + Math.abs(row - other.row);
}
</code></pre>

<p>and </p>

<blockquote>
<pre><code>public int f(Vertex s) {
   return s.getG() + s.getH();
}
</code></pre>
</blockquote>

<pre><code>public int totalCost() {
    return g + h;
}
</code></pre>

<hr>

<h1>Hidden Methods</h1>

<p>This point goes hand in hand with <em>Feature Envy</em>. You have a heavy use of the getter methods of <code>Vertex</code> and let other objects interact with the data. </p>

<blockquote>
<pre><code>int g = ComputationUtils.g(current, cost);
/* ... */
if (g &lt; adjacent.getG()) {/* ... */}
</code></pre>
</blockquote>

<p>The same could be expressed with a method <code>current#hasSmallerCostAs(otherVertex)</code>. This would improve the readability by reducing the number of variables (<code>g</code>), additional operations (<code>ComputationUtils#g</code>) and abstracts the logic trough the name of the method.</p>

<pre><code>if(current.hasSmallerCostAs(adjacent)) {/* ... */}
</code></pre>
    </div>