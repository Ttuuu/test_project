<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Outside of <code>&lt;iostream&gt;</code>, your code looks like C rather than C++. That isn't necessarily bad, since you're dealing with C style strings, but you could also consider alternatives.</p>

<h2>C style reversing</h2>

<p>The function seems to take an array as its first argument, but it's actually completely equivalent to:</p>

<pre><code>void inPlaceReverseString(char* str, int size);
</code></pre>

<p>So you don't need to use array indexing and may as well manipulate pointers directly, which is more traditional, concise and readable:</p>

<pre><code>void inPlaceReverseString(char* str, int size) {
    char* end = str + size;
    while (str &lt; --end) std::swap(*str++, *end);
}
</code></pre>

<p>Since you use <code>std::swap</code>, you could as well use other small C++ language or library features (conventions included):</p>

<pre><code>void inPlaceReverseString(char* first, int size) {
    auto last = std::next(first, size);
    while (first &lt; --last) std::swap(*first++, *last);
}
</code></pre>

<h2>C++ style reversing</h2>

<p>Since <code>std::swap(*first++, *last)</code> can be replaced by <code>std::iter_swap(first++, last)</code>, you could have chosen the latter, which is arguably more readable. That substitution is possible because pointers are iterators in C++. Which also leads us to what an in place reversing function  would look like in C++:</p>

<pre><code>template &lt;typename Iterator&gt;
void reverse(Iterator first, Iterator last) {
    while (first &lt; --last) std::iter_swap(first++, last);
}
</code></pre>

<p>This is rather interesting, because it can reverse a <code>vector</code> or a <code>list</code> as well, or anything that has a bidirectional iterator interface actually. It will soon be possible to constrain the argument type with a <code>concept</code> (voted for C++20):</p>

<pre><code>// given a Bidirectional_iterator concept
template &lt;Bidirectional_iterator Iterator&gt;
void reverse(Iterator first, Iterator last) {
    while (first &lt; --last) std::iter_swap(first++, last);
}
</code></pre>

<p>If we are given a c_style string and its size, we can then call reverse this way:</p>

<pre><code>reverse(str, str+size);
</code></pre>

<p>Of course, it could be better to use a RAII container over a C string, but since it's part of the question...</p>
    </div>