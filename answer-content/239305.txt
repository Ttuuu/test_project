<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One quick performance boost for your database is to use the fact that you can insert multiple rows at the same time. Which you can use in your code both for the IPs and for the hashes, so this can be quite useful:</p>

<pre><code>def add_multiple(self, table, values):
    sql = f"INSERT OR IGNORE INTO {table} VALUES (?)"
    self.cur.executemany(sql, [(value,) for value in values])
</code></pre>

<p>Note that I used <code>INSERT OR IGNORE</code> to ignore already existing rows. <strong>Beware that this command is susceptible to SQL-injection</strong>, because a malicious value for <code>table</code> can do anything in this command (same as in yours). In this case it should be fairly easy to avoid this, since you know all legal table names, so just whitelist them explicitly.</p>

<pre><code>def __init__(self, ...):
    ...
    self.tables = {"virus_md5_hashes",
                   "processed_virusshare_urls",
                   "high_risk_ips"}

def add(self, table, value):
    if table not in self.tables:
        raise ValueError("This table does not exist")
    sql = f"INSERT OR IGNORE INTO {table} VALUES (?)"
    self.cur.execute(sql, (value,))

def add_multiple(self, table, values):
    if table not in self.tables:
        raise ValueError("This table does not exist")
    sql = f"INSERT OR IGNORE INTO {table} VALUES (?)"
    self.cur.executemany(sql, [(value,) for value in values])
</code></pre>

<p>Your update functions need to be only slightly modified for the multiple insert to work:</p>

<pre><code>def update_md5_hashes(self):
    '''
    updates the sqlite database of known virus md5 hashes
    '''
    for n, url in enumerate(self.virusshare_urls):
        reprint(f"Downloading known virus hashes {n+1}/{len(urls)}")
        if not self.exists('url', 'processed_virusshare_urls', url):
            self.add_multiple('virus_md5_hashes', self.get_virusshare_hashes(url))
            self.add('processed_virusshare_urls', url)
            self.conn.commit()
    print()

IP_ADDRESS = re.compile(r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')

def update_high_risk_ips(self):
    for n, source in enumerate(self.ip_blacklists):
        reprint(f"Downloading ips list: {n+1}/{len(sources)}")
        try: 
            r = requests.get(source)
            self.add_many('high_risk_ips', IP_ADDRESS.findall(r.text))
        except requests.exceptions.RequestException:
            print(f"Exception at {source}")
    print()
</code></pre>

<p>I would also put your virusshare URLs and blacklisted IP sources as an attribute of the class so you can change it at runtime, if needed. You can also make them properties if you don't like them being changed, but want to have them accessible nevertheless.</p>

<p>Note that in the first function you do have a <code>self.conn.commit</code> (which I moved under the <code>if</code>, no need for a commit if you didn't do anything), but not in the latter. This could be a bug.</p>
    </div>