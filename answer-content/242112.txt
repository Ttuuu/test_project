<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Not a fan of all your single or double letter variable names. Please write out variables like <code>time</code>, <code>datetime</code> and <code>timedelta</code>.</p>

<p>However I do think <code>s</code> is more readable than a written out variable name.</p></li>
<li><p>I would prefer it if <code>decode_time</code> copied <code>t</code> before mutating it. This makes your code easier to use as there are no side effects.</p>

<pre class="lang-py prettyprint-override"><code>t = t.copy()
data_type = t.pop('_type')
</code></pre></li>
<li><p>You can change the <code>if</code>s in <code>decode_time</code> to use a dictionary to make the code easier to extend.</p>

<p>If you have more than two data types then the dictionary will allow you to reduce duplicate code.</p>

<p>You can use either of the following based on your preference.</p>

<pre class="lang-py prettyprint-override"><code>DECODES = {
    'datetime': datetime.datetime,
    'timedelta': datetime.timedelta,
}
</code></pre>

<pre class="lang-py prettyprint-override"><code>try:
    fn = DECODES[data_type]
except KeyError:
    pass
else:
    return fn(**t)
</code></pre>

<pre class="lang-py prettyprint-override"><code>return DECODES.get(data_type, lambda **kwargs: kwargs)(**t)
</code></pre></li>
<li><p>You kinda just gave up on seconds in <code>display_pending</code>. You've not calculated how many seconds it would need nor have you adjusted for when it's 1.</p>

<p>To reduce the amount of duplication you can use a fairly simple for loop and a dictionary. We can build the dictionary with the existing code to build the variables. If we assign the values to the name to print, we can iterate over the dictionary getting all the information needed to display each unit.</p>

<p>With some carefully placed assignments we can exploit the fact that dictionaries are sorted and have the same output you currently have.</p>

<p>Additionally we can use a comprehension for some sugar to filter missing units.</p>

<pre class="lang-py prettyprint-override"><code>duration = {'Day': duration_so_far.days}
remainder, seconds = divmod(duration_so_far.seconds, 60)
duration['Hour'], duration['Minute'] = divmod(remainder, 60)
duration['Second'] = seconds

time = ' '.join(
    f'{v} {k}{"s" if v != 1 else ""}'
    for k, v in duration.items()
    if v
)

...

print(f'{"." * max_len:{max_len}} | {time}\n')
</code></pre></li>
<li><p>I would recommend toning down the amount of <code>print</code>s you have. These have side effects like deleting the type in <code>decode_time</code>. This makes your code harder to:</p>

<ul>
<li>Test - now you need to wrap <code>sys.std.out</code> for basic functions.</li>
<li>Understand - others now have to second guess each and every one of your functions. This is because you've done it once and not been explicit about it, what's to stop you from doing it twice?</li>
<li>Maintain - refactoring your code to keep the same output is more challenging without a complete rewrite.</li>
</ul></li>
</ul>
    </div>