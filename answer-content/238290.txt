<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Maybe you have not gotten this far in your study, but there are actually solutions for this within OOP.</p>

<p>Alternative constructors can be done in Python by <a href="https://www.geeksforgeeks.org/classmethod-in-python/" rel="nofollow noreferrer">using a <code>classmethod</code></a> (since function overloading is not so easy). Classmethods take as a first argument the class instead of an instance (customarily called <code>cls</code> instead of <code>self</code>) and return an instance of that class. You can create them by decorating a method with <code>@classmethod</code>.</p>

<p>Keeping track of all instances created can be done by having a mutable class attribute which gets updated in the <code>__init__</code> method.</p>

<p>In addition I also removed your <code>print_info</code> method and added a <code>__str__</code> method which prints what you need later, instead. The <code>__str__</code> method is called whenever you do <code>str(x)</code>, which happens internally also in the <code>print</code> function. The <code>__str__</code> and <code>__repr__</code> methods are similar, but not the same. The former is for when you want a nice human-readable visualization of the instance, and the latter should be a complete representation of the instance, ideally such that <code>eval(repr(x)) == x</code>. For more information <a href="https://www.geeksforgeeks.org/str-vs-repr-in-python/" rel="nofollow noreferrer">read this</a>.</p>

<pre><code>class Teacher:
    all_teachers = {}

    def __init__(self, name, subject, room_number):
        self.name = name
        self.subject = subject
        self.room_number = room_number
        self.all_teachers[name] = self

    @classmethod
    def from_user(cls):
        """Interactive creation of a teacher."""
        print("")
        name = input("Please enter a teachers name: ")
        subject = input("Please enter that teachers subject: ")
        room_number = input("Please enter what room that teacher teaches in: ")
        return cls(name, subject, room_number)

    def __str__(self):
        return f"{self.name.capitalize()} teaches {self.subject} in room {self.room_number}"

if __name__ == "__main__":
    print("Please enter the name of 10 teachers, the subject they teach, and the room they teach that subject in.")
    teachers = [Teacher.from_user() for _ in range(10)]

    for teacher in teachers:
        print(teacher)
        print()
</code></pre>

<p>The dictionary containing all teachers was not even needed, but you can access it via <code>Teacher.all_teachers</code> or <code>teacher.all_teachers</code>, where <code>teacher</code> is an instance.</p>

<p>Instead I used a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to build a list of teachers.</p>

<p>I also added a <a href="https://stackoverflow.com/q/419163/4042267"><code>if __name__ == "__main__":</code></a> guard to allow importing from this script without it running.</p>
    </div>