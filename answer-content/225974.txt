<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would create a separate method for calculating averages and use variables for them, so that the code is more legible.</p>

<p>I don't personally like the use of arrays such as <code>sum[]</code> and <code>avg[]</code> because looping over them makes it hard to tell what you are trying to access. If you do want to use them, I would save their indices (or offsets) in static final fields so that the accesses looks like this:</p>

<pre><code>    sum[i + X_OFFSET] = ...;
    sum[i + Y_OFFSET] = ...;
    sum[i + Z_OFFSET] = ...;
</code></pre>

<p>I used the stream API for convenience - a loop would be fine too.</p>

<pre><code>private static final int X_OFFSET = 0;
private static final int Y_OFFSET = 1;
private static final int Z_OFFSET = 2;

public static void centerVertices(FloatBuffer buf) {

    float[] objVertices = new float[buf.capacity()];
    buf.get(objVertices);

    float xAvg = (float) getAverage(objVertices, X_OFFSET);
    float yAvg = (float) getAverage(objVertices, Y_OFFSET);
    float zAvg = (float) getAverage(objVertices, Z_OFFSET);

    for (int i = 0; i &lt; objVertices.length; i += 3) {
        objVertices[i + X_OFFSET] -= xAvg;
        objVertices[i + Y_OFFSET] -= yAvg;
        objVertices[i + Z_OFFSET] -= zAvg;
    }

    for (int i = 0; i &lt; objVertices.length; i++) {
        buf.put(i, objVertices[i]);
    }
}

/**
 * Get the average of every third element in the array (with offset)
 */
private static double getAverage(float[] arr, int offset) {
    return IntStream //
            .range(0, arr.length) //
            .filter(i -&gt; i % 3 == offset) //
            .mapToDouble(i -&gt; arr[i]).average() //
            .getAsDouble();
}
<span class="math-container">```</span>
</code></pre>
    </div>