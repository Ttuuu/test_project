<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Don't change the API</h1>
<p>The LeetCode problem gives you the public API:</p>
<pre><code>int numPoints(vector&lt;vector&lt;int&gt;&gt;&amp; points, int r)
</code></pre>
<p>Don't change <code>int</code> to <code>int_fast32_t</code>, since this might cause your function to become incompatible with what LeetCode expects. If you want to use <code>int_fast32_t</code> internally, that is fine.</p>
<h1>Make functions that do not access member variables <code>static</code></h1>
<p>This applies to <code>getEuclideanDistance()</code>.</p>
<h1>Make functions that do not change member variables <code>const</code></h1>
<p>This applies to <code>getDartboardCenter()</code>.</p>
<h1>Naming things</h1>
<p>It's one of the two hard things in computer science, along with cache invalidation and off-by-one errors.</p>
<p>Your function <code>getDartboardCenter()</code> does not in fact return the center of the dartboard. It just returns two guesses based on two input points. And only one element of the pair is ever used. Maybe <code>getCandidateCenter()</code> is a better name.</p>
<p>Also, <code>temp_point</code> is not a point, it is a distance, so name it <code>temp_distance</code> or <code>temp_dist</code>.</p>
<h1>Use <code>std::hypot()</code></h1>
<p>The standard library already has a function for you that can help you calculate the euclidian distance: <a href="https://en.cppreference.com/w/cpp/numeric/math/hypot" rel="nofollow noreferrer"><code>std::hypot()</code></a>. So:</p>
<pre><code>static double getEuclideanDistance(const Point&amp; a, const Point&amp; b) {
    return std::hypot(a.x - b.x, a.y - b.y);
}
</code></pre>
<p>But even better:</p>
<h1>Avoid unnecessary floating point math</h1>
<p>You have already noticed that floating point math is not infinitely precise. However, integer math is (as long as you don't exceed the maximum value an integer variable can hold). You can check if a given point with integer coordinates is within a circle centered at the origin with radius <code>R</code> by writing:</p>
<pre><code>int R; // radius
int x, y; // point coordinates

if (x * x + y * y &lt;= R * R) {
    // point x, y is inside the circle
}
</code></pre>
<p>There might be more math that can be done using integers.</p>
<h1>Simplify your trigonometry</h1>
<p>Given two doubles, <code>dx</code> and <code>dy</code>, and:</p>
<pre><code>double theta = std::atan2(dy, dx);
double dist = std::hypot(dy, dx);
</code></pre>
<p>Then <code>std::sin(theta) * dist == dy</code>, and <code>std::cos(theta) * dist == dx</code>. This means that you didn't need to use these trigonometric functions at all, and could have written:</p>
<pre><code>const double temp_dist = getEuclideanDistance(a, b);
const double euc_dist = std::sqrt(std::pow(R, 2) - std::pow(temp_dist / 2, 2));
const double scaled_dist = euc_dist / temp_dist;
center.first.x = mid.x - scaled_dist * a;
center.first.y = mid.y - scaled_dist * b;
</code></pre>
<p>This could be further simplified a bit.</p>
    </div>