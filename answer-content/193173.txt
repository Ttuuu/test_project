<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>I assume "next" in <code>getNextPositionAndVelocity</code> means "after one unit of whatever temporal unit you use in the unit of the velocity", since the change of a position based on a velocity only makes sense in the context of a time span.</p>

<p>As for your code, you could simply model the path of the object by breaking it up into subpaths where the direction does not change, like this:</p>

<pre class="lang-java prettyprint-override"><code>public double[] getNextPositionAndVelocity(double position, double velocity, double max) {
    double remainingDistance = Math.abs(velocity);
    double currentVelocity = velocity;
    double currentPosition = position;

    while (remainingDistance &gt; 0.0) {
        double nextBoundary;
        if (currentVelocity &lt; 0.0) {
            nextBoundary = 0.0;
        } else {
            assert currentVelocity &gt; 0.0; //cannot be 0 or NaN, not if we're in the loop
            nextBoundary = max;
        }

        double maximumDistanceToTravelInCurrentDirection = Math.abs(nextBoundary - currentPosition);

        if (maximumDistanceToTravelInCurrentDirection &lt;= remainingDistance) {
            currentPosition = nextBoundary;
            remainingDistance -= maximumDistanceToTravelInCurrentDirection;
            currentVelocity *= -1;
        } else {
            currentPosition += remainingDistance * Math.signum(currentVelocity);
            remainingDistance = 0;
        }
    }

    return new double[]{currentPosition, currentVelocity};
}
</code></pre>

<p>Admittedly, this is more code than your version, but then, you don't consider the possibility that the range is smaller than the velocity, and if this is the case, an object might bounce off an edge more than once.</p>

<p>The above code could be optimized by first calculating the velocity modulo twice the range, because after two range lenghts, the position and velocity of the object will be identical to its initial position and velocity.</p>

<p>Also, you should validate the arguments. This not only entails checking whether the arguments are valid with respect to each other (e.g. whether <code>position</code> lies within the permitted range), but also handling special cases like the infinities or <code>Double.NaN</code>. E.g., if you check whether <code>position &gt;= 0 &amp;&amp; position &lt;= max</code>, then you automatically have <code>NaN</code> covered for <code>position</code> and <code>max</code>, because the comparison operators and the equality operator <code>==</code> always return <code>false</code> if one operand is <code>NaN</code> (even <code>Double.NaN == Double.NaN</code> returns <code>false</code>, which is why there's a method <code>Double.isNaN(double)</code>), but <code>position</code> might still be <code>Double.POSITIVE_INFINITY</code> if <code>max</code> is also <code>Double.POSITIVE_INFINITY</code>. Also, <code>max</code> should probably be greater than <code>0</code> (which would not be covered by the aforementioned condition either).</p>
    </div>