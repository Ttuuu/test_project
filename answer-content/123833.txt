<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a really good effort for a first major project! It's very straightforward and easy to understand. Here are a few ways you could take it to the next level.</p>
<h1>Avoid Global Variables</h1>
<p>Right now you have 4 global variables:</p>
<pre><code>int balance;
int pot;
int deck[52];
int sdeck[52];
</code></pre>
<p>These should be local variables inside the <code>main()</code> function and you should pass them to the other functions that need to access them. There are 2 reasons:</p>
<ol>
<li>As it is now, it's difficult to find who changed them when they change</li>
<li>If you ever want to expand this (perhaps to be a server that serves games to multiple groups of people at the same time), having globals won't work.</li>
</ol>
<h1>Avoid Magic Numbers</h1>
<p>You created a constant <code>CARDS</code> but then you only use it once. You should use it to declare your decks, too (and I'd rename it to <code>NUM_CARDS</code>):</p>
<pre><code>int deck[NUM_CARDS];
int sdeck[NUM_CARDS];
</code></pre>
<p>While you're unlikely to ever need to change the number of cards in a deck, using a constant can clarify the code and save you from typos. (And actually, there are <a href="https://en.wikipedia.org/wiki/Euchre" rel="nofollow noreferrer">a few games that use fewer than 52 cards</a>).</p>
<h1>Use Arrays for Looking Things Up</h1>
<p>In your <code>csuit()</code> and <code>cface()</code> functions, you have a bunch of <code>case</code> statements to convert between an <code>int</code> and a string. You could do this more easily with an array, like this:</p>
<pre><code>const char* csuit(const int v)
{
    const char* kSuits[] = {
        "Hearts",
        "Clubs",
        "Diamonds",
        "Spades"
    };
    return kSuits [ v % 4 ];
}
</code></pre>
<p>You can do a similar thing with <code>cface()</code>.</p>
<h1>Simplify</h1>
<p>Several of your functions have complicated nested <code>while</code> loops. I'd try to simplify them. I'd make the one in <code>main()</code> it more like this:</p>
<pre><code>while (strcmp(input, "quit") != 0)
{
    if (strcmp(input, "play") == 0)
    {
        play();
    }
    else if (strcmp(input, "help") == 0)
    {
        printf("Type 'play' to begin the game.\n");
    }

    scanf("%s", input);
}
</code></pre>
<p>You can eliminate the call to <code>quit()</code> as your <code>main()</code> will just exit when the user enters "quit".</p>
<p>On the subject of simplifying, I'd probably also break <code>turn()</code> into smaller functions, and try to make the logic simpler. Perhaps use a state machine.</p>
    </div>