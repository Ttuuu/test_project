<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Do not use explicit loops unless you absolutely have to</h2>

<p>Many functions in R are vectorized and your code will be much faster if you leverage this instead of writing your own loops.</p>

<p>For example, you can compute the first part of your <code>newID</code> with a single <code>paste()</code> call:</p>

<pre><code>dat$newID &lt;- paste("Ind", dat$ID)
</code></pre>

<pre><code>    x ID change newID
1   1  0      0 Ind 0
2   2  0      0 Ind 0
3   3  0      0 Ind 0
4   4  0      0 Ind 0
5   5  0      1 Ind 0
6   6  0      0 Ind 0
7   7  0      1 Ind 0
8   8  0      0 Ind 0
9   9  0      0 Ind 0
10 10  0      0 Ind 0
11  1  1      1 Ind 1
12  2  1      0 Ind 1
13  3  1      0 Ind 1
14  4  1      0 Ind 1
15  5  1      1 Ind 1
16  6  1      0 Ind 1
17  7  1      1 Ind 1
18  8  1      0 Ind 1
19  9  1      0 Ind 1
...
</code></pre>

<h2>The second part of your <code>newID</code> is simply the cumulative sum of <code>change</code></h2>

<p>The most tricky part here is to reset the counter each time the <code>ID</code> changes. A way to do this is to use the function <code>by</code>, which will execute a given function on a group of rows depending on the values of a grouping variable (here <code>ID</code>):</p>

<pre><code>by(dat, dat$ID, function(x) {
  cumsum(x$change)
})
</code></pre>

<pre><code>dat$ID: 0
 [1] 0 0 0 0 1 1 2 2 2 2
--------------------------------------------------------------------------------------------- 
dat$ID: 1
 [1] 1 1 1 1 2 2 3 3 3 3
--------------------------------------------------------------------------------------------- 
dat$ID: 2
 [1] 1 1 1 1 2 2 3 3 3 3
</code></pre>

<p>The two issues here are:</p>

<ul>
<li><code>by</code> returns a list so we have to use <code>unlist()</code> before trying to put the result in a data.frame column</li>
</ul>

<pre><code>dat$newID &lt;- unlist(by(dat, dat$ID, function(x) {
  cumsum(x$change)
}))
</code></pre>

<ul>
<li>because <code>change</code> doesn't start with 1, the values for the first <code>ID</code> are shifted by one. We can fix this by changing the first value manually.</li>
</ul>

<h2>Put everything together</h2>

<pre><code>dat$change[1] &lt;- 1

dat$newID &lt;- unlist(by(dat, dat$ID, function(x) {
  cumsum(x$change)
}))

dat$newID &lt;- paste0("Ind ", dat$ID, "|", dat$newID)
</code></pre>

<p>And you get exactly the output you were asking for, without any explicit <code>for</code> loops!</p>
    </div>