<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The input validation</h3>

<p><code>is_valid_permutation()</code> does not verify if the elements in the two lists
are unique. As an example</p>

<pre><code>is_valid_permutation([[1, 1, 1, 2], [2, 2, 2, 1]])
</code></pre>

<p>returns <code>True</code> (and </p>

<pre><code>from_permutation_to_disjoints_cycles([[1, 1, 1, 2], [2, 2, 2, 1]])
</code></pre>

<p>aborts later with a <code>ValueError</code> because some index is not found).
This can for example be fixed by checking </p>

<pre><code>len(in_perm[0]) == len(in_perm[1]) == len(set(in_perm[0]))
</code></pre>

<p>instead of</p>

<pre><code>len(in_perm[0]) == len(in_perm[1])
</code></pre>

<p>Restricting the input to lists of <em>integers</em> seems unnecessary to me,
the conversion from the Cauchy notation to cycles works perfectly with arbitrary values (as long as they are hashable):</p>

<pre><code>&gt;&gt;&gt; print(from_permutation_to_disjoints_cycles([["a", "b", "c", "d"], ["b", "a", "d", "c"]]))
[['a', 'b'], ['c', 'd']]
</code></pre>

<p>For invalid input, <code>ValueError</code> seems more
appropriate to me, <code>IOError</code> is meant for I/O related failures, such
as reading or writing data.</p>

<h3>From Cauchy notation to cycles</h3>

<p><code>decouple_permutation()</code> can be simplified to</p>

<pre><code>def decouple_permutation(perm):
    """
    from [[1, 2, 3, 4, 5], [3, 4, 5, 2, 1]]
    to   [[1,3], [2,4], [3,5], [4,2], [5,1]]
    """
    return [list(a) for a in zip(perm[0], perm[1]) if a[0] != a[1]]
</code></pre>

<p>the check for <code>perm[0] != perm[1]</code> is not necessary.</p>

<p>However, I would suggest to use a <em>dictionary</em> instead of a list of lists
to store the mappings. Dictionary lookup is much faster than a (linear)
search in a list (what <code>index()</code> does). This leads to the following
implementation:</p>

<pre><code>def from_permutation_to_disjoints_cycles(perm):
    mappings = { a: b for a, b in zip(*perm) if a != b }
    cycles = []
    for a in perm[0]:
        b = mappings.pop(a, None)
        if b is None:
            continue # `a` has already been handled
        cycle = [a]
        while a != b:
            cycle.append(b)
            b = mappings.pop(b)
        cycles.append(cycle)
    return cycles
</code></pre>

<p>For each initial value which has not been handled, we build a complete
cycle by dictionary lookups. <code>pop()</code> retrieves the next element of a
cycle <em>and</em> removes the pair from the dictionary, so that it will not be
handled again. Apart from appending to the cycles, no list modifications
are done. </p>

<p>(<em>Remark:</em> My initial suggestion did not work correctly. This new version
does essentially what the “pseudo code” in <a href="https://codereview.stackexchange.com/a/201756/35991">Acccumulation's answer</a>
describes. The implementation however is different.)</p>

<p>In my test this was significantly faster for large permutations (benchmark
below).</p>

<p>Finally, your code does not return cycles with a single element:</p>

<pre><code>&gt;&gt;&gt; from_permutation_to_disjoints_cycles([[1, 2, 3, 4], [2, 3, 1, 4]])
[[1, 2, 3]]
</code></pre>

<p>As a consequence, the reverse conversion gives not the original permutation:</p>

<pre><code>&gt;&gt;&gt; from_disjoint_cycles_to_permutation([[1, 2, 3]])
[[1, 2, 3], [2, 3, 1]]
</code></pre>

<p>With the dictionary approach, this can be fixed by removing the <code>if a != b</code> condition:</p>

<pre><code>def from_permutation_to_disjoints_cycles(perm):
    mappings = { a: b for a, b in zip(*perm) }
    cycles = []
    for a in perm[0]:
        b = mappings.pop(a, None)
        if b is None:
            continue # `a` has already been handled
        cycle = [a]
        while a != b:
            cycle.append(b)
            b = mappings.pop(b)
        cycles.append(cycle)
    return cycles
</code></pre>

<p>Now</p>

<pre><code>&gt;&gt;&gt; from_permutation_to_disjoints_cycles([[1, 2, 3, 4], [2, 3, 1, 4]])
[[1, 2, 3], [4]]

&gt;&gt;&gt; from_disjoint_cycles_to_permutation([[1, 2, 3], [4]])
[[1, 2, 3, 4], [2, 3, 1, 4]]
</code></pre>

<p><strong>Benchmark</strong></p>

<p>A primitive benchmark, for the permutation which reverses the first 1000
integers (without the input validation):</p>

<pre><code>import time

perm = [[x for x in range(1, 1001)], [x for x in reversed(range(1, 1001))]]

start = time.time()
c = from_permutation_to_disjoints_cycles(perm)
end = time.time()
print((end - start) * 1000)
</code></pre>

<p>Result (on a 1,2 GHz MacBook):</p>

<ul>
<li>Your code: 20 milliseconds,</li>
<li>My code: 0.8 milliseconds.</li>
</ul>

<h3>From cycles to Cauchy notation</h3>

<p>The conversion from the Cauchy notation to cycles works with arbitrary
(distinct) integers (or even arbitrary values), but the reverse
conversion assumes that the values are consecutive integers starting
at 1:</p>

<pre><code>&gt;&gt;&gt; from_permutation_to_disjoints_cycles([[2, 3, 5, 6], [3, 2, 6, 5]])
[[2, 3], [5, 6]]

&gt;&gt;&gt; from_disjoint_cycles_to_permutation([[2, 3], [5, 6]]))
[[1, 2, 3, 4, 5, 6], [0, 3, 2, 0, 6, 5]
</code></pre>

<p>An alternative approach would be to <code>zip()</code> each cycle with a rotation
of itself, to get the list of mapping pairs:</p>

<pre><code>def from_disjoint_cycles_to_permutation(dc):
    """
    from [[1, 3, 5], [2, 4]]
    to   [[1, 2, 3, 4, 5], [3, 4, 5, 2, 1]]
    """
    pairs = [(a, b) for cycle in dc for a, b in zip(cycle, cycle[1:] + cycle[:1])]
    return [list(i) for i in zip(*pairs)]
</code></pre>

<p>(The transposition method is taken from <a href="https://stackoverflow.com/a/6473742/1187415">Transpose list of lists</a> on Stack Overflow.)</p>

<p>Now the reverse conversion works as expected:</p>

<pre><code>&gt;&gt;&gt; from_permutation_to_disjoints_cycles([[2, 3, 5, 6], [3, 2, 6, 5]])
[[2, 3], [5, 6]]

&gt;&gt;&gt; from_disjoint_cycles_to_permutation([[2, 3], [5, 6]]))
[[2, 3, 5, 6], [3, 2, 6, 5]]
</code></pre>

<p>and the function is not limited to integers anymore.</p>

<h3>Using Sympy</h3>

<p>The <a href="http://docs.sympy.org/latest/modules/combinatorics/permutations.html" rel="nofollow noreferrer">Permutation</a>
class from Sympy provides functions to convert between the
different representations.</p>

<p><em>Example</em> (the permutations elements are zero-based integers):</p>

<pre><code>&gt;&gt;&gt; from sympy.combinatorics import Permutation

&gt;&gt;&gt; p1 = Permutation([2, 0, 1, 5, 4, 3])
&gt;&gt;&gt; p1.cyclic_form
[[0, 2, 1], [3, 5]]
&gt;&gt;&gt; p1.full_cyclic_form
[[0, 2, 1], [3, 5], [4]]

&gt;&gt;&gt; p2 = Permutation([[0, 2, 1], [3, 5]])
&gt;&gt;&gt; p2.array_form
[2, 0, 1, 5, 4, 3]
</code></pre>
    </div>