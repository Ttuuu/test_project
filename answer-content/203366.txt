<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>I'd recommend avoiding returning the value from <code>pop</code>. If <code>T</code>'s copy constructor throws, you lose the data. So I would introduce <code>T top() const</code> and use it along with non-returning <code>void pop()</code>. This approach is used in <code>STL</code> containers which have a <code>pop</code> method. Also calling <code>pop</code> on empty list leads to UB.</p></li>
<li><p>In my opinion, a linked list based on <code>std::unique_ptr</code> looks more natural. But if you switch to that you will lose some functionality used in your approach based on <code>std::shared_ptr</code>, like <code>head</code> and <code>tail</code> point to one node, and the lack of copy-constructor and assignment operator.  </p></li>
<li><p>Having a <code>search</code> method is nice, but more generic would be having compatibility with <em>forward iterator</em>s that makes it possible to use STL algorithms with your container.</p></li>
<li><p>You didn't define copy-constructor and assignment operator. Is that done intentionally because shared pointers were used? Try to make test returning local copy of a <code>LinkedList</code> object from the function; I wonder what the result would be. From my point of view, it would be nice to have more STL-like behavior for the container.</p></li>
</ol>
    </div>