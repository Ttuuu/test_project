<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Choosing the generic type (and parameters)</h3>

<p>The Fenwick tree stores cumulative values of its elements, and is based on the ability to compute the sum and difference of those elements. You made a very general implementation, where “sum” and “difference” are provided as closure parameters. But it cannot be ensured that these are proper inverse operations of each other, and a slight variation of your <code>multiplicativeTree</code> example demonstrates the problem:</p>

<pre><code>let multiplicativeTree = FenwickTree(count: 4, neutralElement: 1,
                                     forward: *, reverse: /)

multiplicativeTree.update(index: 0, with: 5)
print(multiplicativeTree.accumulated(at: 0))    // 5   OK

multiplicativeTree.update(index: 0, with: 10)
print(multiplicativeTree.accumulated(at: 0))    // 10  still OK

multiplicativeTree.update(index: 0, with: 13)
print(multiplicativeTree.accumulated(at: 0))    // 10  what?

multiplicativeTree.update(index: 0, with: 11)
print(multiplicativeTree.accumulated(at: 0))    // 0   what???
</code></pre>

<p>I would require the elements to conform to the <a href="https://developer.apple.com/documentation/swift/additivearithmetic" rel="nofollow noreferrer"><code>AdditiveArithmetic</code></a> protocol instead. That protocol</p>

<ul>
<li>requires addition and subtraction, making the <code>forward</code> and <code>reverse</code> parameter obsolete,</li>
<li>requires a <code>.zero</code> element, making the <code>neutralElement</code> parameter obsolete, and</li>
<li>provides <em>semantics:</em> according to <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0233-additive-arithmetic-protocol.md" rel="nofollow noreferrer">SE-0223</a>, it <em>“roughly corresponds to the mathematic notion of an <a href="https://en.wikipedia.org/wiki/Additive_group" rel="nofollow noreferrer">additive group</a>.”</em></li>
</ul>

<p><code>AdditiveArithmetic</code> is adopted by all binary integer and floating point types, that probably covers most use-cases. If you really need a data structure where updating a value is done via multiplication then you can define a custom type which implements <code>AdditiveArithmetic</code> accordingly.</p>

<p>The declaration and initialization then simplifies to</p>

<pre><code>class FenwickTree&lt;T: AdditiveArithmetic&gt;  {

    private let count   : Int

    private var data    : [T]
    private var tree    : [T]

    init(count: Int) {
        self.count = count
        self.data = Array(repeating: .zero, count: count)
        self.tree = Array(repeating: .zero, count: count + 1)
    }

    // ...
}
</code></pre>

<p>and sums/differences can just be computed with <code>+</code> and <code>-</code>, making the code even better readable.</p>

<h3>Accessing the elements</h3>

<p>There is a </p>

<pre><code>func update(index: Int, with newValue: T) {
</code></pre>

<p>to set new value at an index, but no method to <em>get</em> a single value. I would suggest to implement the <code>subscript</code> method instead, with both a getter and a setter:</p>

<pre><code>subscript(index: Int) -&gt; T {
    get {
        return data[index]
    }
    set {
        // ... update `data` and `tree`
    }
}
</code></pre>

<p>And not much more work is needed to make <code>FenwickTree</code> a (mutable, random access)  <code>Collection</code>.</p>

<h3>A wider range of ranges ...</h3>

<p>The <code>accumulated(in:)</code> method becomes much more flexible if it takes a <code>RangeExpression</code> parameter instead of a <code>Range</code>:</p>

<pre><code>func accumulated&lt;R&gt;(in range: R) -&gt; T
where R: RangeExpression, R.Bound == Int
{
    let realRange = range.relative(to: 0..&lt;count)
    let cumulatedLow = accumulated(at: realRange.lowerBound - 1)
    let cumulatedHigh = accumulated(at: realRange.upperBound - 1)
    return cumulatedHigh - cumulatedLow
}
</code></pre>

<p>Now you can call it with half-open, closed, or partial ranges:</p>

<pre><code>additiveTree.accumulated(in: 1..&lt;2))
additiveTree.accumulated(in: 1...3))
additiveTree.accumulated(in: 2...))
additiveTree.accumulated(in: ..&lt;4))
additiveTree.accumulated(in: ...3))
</code></pre>

<p>The last line is equivalent to your </p>

<pre><code>additiveTree.accumulated(at: 3))
</code></pre>

<p>which means that <code>accumulated(at:)</code> is no longer needed as a public method (which solves the problem of the similar names of those methods.)</p>

<h3>Further suggestions</h3>

<p>The index operations</p>

<pre><code> treeIndex += treeIndex &amp; -treeIndex
 treeIndex -= treeIndex &amp; -treeIndex
</code></pre>

<p>look like magic to the first reader of your code. I would move that to helper methods (which the compiler inlines) and document it.</p>

<p>The <code>tree[0]</code> element is never accessed. With slight modifications of the index calculations you can save one element in that array, i.e. initialize it as</p>

<pre><code>  self.tree = Array(repeating: .zero, count: count)
</code></pre>

<p>For example, the accumulation would be</p>

<pre><code>func accumulated(at index: Int) -&gt; T {
    guard index &gt;= 0 else { return .zero }
    var sum = tree[0]
    var treeIndex = index
    while treeIndex &gt; 0 {
        sum += tree[treeIndex]
        treeIndex -= treeIndex &amp; -treeIndex
    }
    return sum
}
</code></pre>

<p>Finally, a single element can be retrieved from the <code>tree</code> array alone, by computing the difference of two tree nodes (this is also described in the Fenwick article). Therefore, at the cost of slightly more computation, you can get rid of the <code>self.data</code> array and save memory.</p>
    </div>