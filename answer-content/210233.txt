<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Don't abuse <code>using namespace std</code></h2>

<p>Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  It is particularly bad to put it into a header file, so please don't do that.</p>

<h2>Use the approprate data types</h2>

<p>If the <code>Coord</code> values are <code>unsigned char</code>, then the loops that generate coordinates should use that instead.  For convenience, and to allow for flexibility, I'd suggest either something like this:</p>

<pre><code>using CoordInt = unsigned char;
struct Coord
{
    CoordInt x;
    CoordInt y;
};
</code></pre>

<p>or perhaps better, make <code>Coord</code> a class and do validation of the coordinates in the constructor so that it is not possible to create invalid coordinates.</p>

<h2>Do better error checking</h2>

<p>If the coordinates passed to <code>Board::move</code> are invalid (i.e. not actually on the board, the program will not work as intended due to <em>undefined behavior</em>.  Eliminate that either by doing validation of the coordinates where needed or, as per the previous suggestion, make it impossible for invalid coordinates to be constructed.</p>

<h2>Don't mislead the user</h2>

<p>The user is told "make a move by writing old then new coordinates of the piece you want to move ex: (0,1) -&gt; (0,5)" but if the user actually enters those <strong>zero-based</strong> coordinates, the program crashes, because what the program <em>actually</em> expects are 1-based coordinates without commas or parentheses or any other punctuation.  This leads directly to the next suggestion.</p>

<h2>Use standard nomenclature where it applies</h2>

<p>In chess, the <a href="https://en.wikipedia.org/wiki/Algebraic_notation_(chess)" rel="nofollow noreferrer">standard algebraic notation</a> has been widely used for decades.  Experienced chess players will already know that notation, and it won't matter to players who aren't already familiar.  Use that notation instead of the number pairs the program currently used.</p>

<h2>Don't use <code>std::endl</code> if <code>'\n'</code> will do</h2>

<p>Using <code>std::endl</code> emits a <code>\n</code> and flushes the stream.  Unless you really need the stream flushed, you can improve the performance of the code by simply emitting <code>'\n'</code> instead of using the potentially more computationally costly <code>std::endl</code>.</p>

<h2>Use <code>delete</code> instead of <code>free</code> in C++</h2>

<p>The <code>Board</code> destructor uses <code>free</code> instead of <code>delete</code> which is an error.  C++ uses <code>new</code> and <code>delete</code>.  The other suggestions say you shouldn't use <code>free</code> and <code>delete</code> at all, but I understand that your intent is to have <code>Piece</code> be a base class, so this usage is appropriate once you fix this error.</p>

<h2>Use const where practical</h2>

<p>The current <code>Piece::get_owner()</code> routine does not (and should not) modify the underlying object, and so it should be declared <code>const</code>:</p>

<pre><code>Player get_owner() const { return owner; }
</code></pre>

<p>The same is true of <code>Presenter::draw()</code>.</p>

<h2>Reduce the use of raw pointers where practical</h2>

<p>There is no useful thing that a <code>Presenter</code> can do with a <code>Board</code> pointer that is <code>nullptr</code>, so I'd strongly recommend using a <code>std::shared_ptr</code> instead or by having the <code>Board</code> object be a member of the <code>Presenter</code> class.</p>

<h2>Let the compiler create default destructor</h2>

<p>The compiler will create a destructor by default which is essentially identical to what you've got for the <code>Presenter</code> class, so you can simply omit both the declaration and implementation from your code.</p>

<h2>Use consistent file names</h2>

<p>Is it <code>board.h</code> or <code>Board.h</code>?  <code>Presenter.h</code> or <code>presenter.h</code>?  It's important to be consistent because consistency aids reader comprehension.</p>

<h2>Rethink the class design</h2>

<p>If we think about a future version of this program that actually has rooks, knights, etc.  What will each piece need to determine whether a move is valid?  The current interface only passes the proposed new coordinates to <code>change_position</code>.  However, this is not enough information.  A bishop, for instance, cannot jump over other pieces, so determining a valid move will require examining all of the points between the current and proposed position as well.  This information more properly belongs to the <code>Board</code> class, so I would recommend passing a <code>Board</code> reference to the <code>Piece</code> to allow it to check for move validity.  Also, for some moves, such as castling, or capturing a pawn <em>en passant</em>, two pieces are involved and not only their positions but something about their history must be known.  For all of these reasons, I'd suggest that only the <code>Board</code> should know about positions, and to eliminate the <code>Coord</code> member from each <code>Piece</code> and that any move validity checking should pass not only the proposed <code>Coord</code> but the <code>Board</code> and current <code>Coord</code> as well.</p>
    </div>