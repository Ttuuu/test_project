<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Functions</h2>
<p>For many reasons, you should attempt to move your global code into functions. Reasons include testability, meaningful stack traces, and de-cluttering the global namespace.</p>
<h2>User input</h2>
<p>This prompt:</p>
<pre><code>input("Input set of integers for S : ")
</code></pre>
<p>is missing a description to the user that they should be entering a comma-delimited list.</p>
<p>This input:</p>
<pre><code>input('enter list for C (eg. [[1,2,3],[4,5,6]]): ')
</code></pre>
<p>forces the user (who, we should assume, is not a programmer) to both understand and use JSON. JSON is intended as an application-friendly and not user-friendly serialization format. Instead, consider "assisting" the user by looping through and accepting multiple comma-separated (for consistency) lists. Given your example, a loop would execute twice and each iteration would produce a list of three items.</p>
<h2>Iteration</h2>
<pre><code>for a in range(0, len(s)):
    s[a] = int(s[a])
</code></pre>
<p>can be</p>
<pre><code>s = [int(a) for a in s]
</code></pre>
<h2>In-place addition</h2>
<pre><code>count = count + 1
</code></pre>
<p>can be</p>
<pre><code>count += 1
</code></pre>
<h2>Boolean comparison</h2>
<pre><code>if sympy.isprime(count) == True:
</code></pre>
<p>should be</p>
<pre><code>if sympy.isprime(count):
</code></pre>
<h2>Iteration of a counted variable</h2>
<pre><code>count = len(s)//3
while True:
    count = count + 1
</code></pre>
<p>should be</p>
<pre><code>for count in itertools.count(len(s)//3):
</code></pre>
<h2>Wrapping</h2>
<p>This is a minor thing, but the comments starting at</p>
<pre><code># This is a SUPER Greedy
</code></pre>
<p>are wrapped to a very small column count. Typically, the smallest column wrap you'll find in the wild is 80. It's probably a good idea to reformat this so that each line goes up to 80 characters long.</p>
<h2>Temporary variables</h2>
<p>Consider</p>
<pre><code>n = len(s)
</code></pre>
<p>to simplify expressions like</p>
<pre><code>len(s)*241*((len(s)*241)-1)*((len(s)*241)-2)//6
</code></pre>
<h2>More iteration</h2>
<pre><code>delete = []
for a in range(0, len(c)):
    for i in permutations(c[a], 3):
</code></pre>
<p>should be</p>
<pre><code>for a in c:
    for i in permutations(a, 3):
    # ...
</code></pre>
<h2>Variable naming</h2>
<pre><code>opps = 0
</code></pre>
<p>?</p>
    </div>