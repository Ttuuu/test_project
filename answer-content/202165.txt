<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The range-based <code>for</code> loop</h2>
<p>This works via the <code>begin()</code> and <code>end()</code> <strong>functions</strong>.<br>
So for any class <code>X</code> if there are stand alone functions <code>begin(X&amp;)</code> and <code>end(X&amp;)</code> the range based <code>for</code> will work. Normally this will default to the <code>std::begin()</code> and <code>std::end()</code> but if you have written explicit versions of these functions in the same namespace as <code>X</code> these will be used.</p>
<p>Example:</p>
<pre><code>#include &lt;iostream&gt;

namespace Y
{
    class X
    {
        public:
            char data[14] = "This is text";
    };

    char* begin(X&amp; obj) {
        return obj.data;
    }

    char* end(X&amp; obj) {
        return obj.data + 10;
    }
}

int main()
{
    Y::X   x;
    for(auto const&amp; a: x) {
        std::cout &lt;&lt; a;
    }
}
</code></pre>
<p>OK. So what happens if you don't write your own <code>begin()</code> and <code>end()</code> functions?</p>
<p>In this case it will use the standard versions of these functions. <code>std::begin()</code> which will call the <code>begin()</code> method on the object and <code>std::end()</code> which will call the <code>end()</code> method on the object.</p>
<p>Example 2:</p>
<pre><code>#include &lt;iostream&gt;

namespace Y
{
    class X
    {
            char data[14] = "This is text";
        public:
            char* begin() {
                return data;
            }

            char* end() {
                return data + 10;
            }
    };
}

int main()
{
    Y::X   x;
    for(auto const&amp; a: x) {
        std::cout &lt;&lt; a;
    }
}
</code></pre>
<h2>How to think of range based for</h2>
<p>You can think of ranged based for as a compiler shortcut.</p>
<pre><code>for(&lt;Type&gt; &lt;Var&gt; : &lt;Obj&gt;) {
    &lt;CODE&gt;
}
</code></pre>
<p>Is just short hand for:</p>
<pre><code>{
    using std::begin;
    using std::end;

    auto __end = end(&lt;Obj&gt;);

    for(auto __loop = begin(&lt;Obj&gt;); __loop != __end; ++__loop) {
        &lt;Type&gt; &lt;Var&gt; = *__loop;
        &lt;CODE&gt;
    }
}
</code></pre>
<h2>Implementation of Iterators</h2>
<p>The implementation of an iterator is based on the "Iterator Concept". There are actually five types of iterator in C++. But since you are using vector as your example implementation we should consider the "Random Access Iterator Concept".</p>
<p>To qualify as a random access iterator you have to uphold a specific contract. Here is some documentation on it.</p>
<p><a href="https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator</a></p>
<p>Not only does the iterator need to define certain methods (with specific requirements on how they work together). But your type also needs to define certain types via <code>std::iterator_traits</code>.</p>
<h3>Types</h3>
<p>You need to define the following types:</p>
<ul>
<li>value_type:<br>
When the iterator is de-referenced this is the type you get.</li>
<li>difference_type:<br>
When you subtract two iterators this is the type of the result</li>
<li>pointer:<br>
A type that points at type <code>value_type</code></li>
<li>reference:<br>
A type that can be used as a reference to a value of type <code>value_type</code></li>
<li>iterator_category:<br>
A type that represents the <a href="https://en.cppreference.com/w/cpp/iterator/iterator_tags" rel="nofollow noreferrer">category</a> of the iterator.</li>
</ul>
<p>So you could have written your own specialization of the <code>iterator_traits</code> class</p>
<pre><code>namespace std
{
    template&lt;typename T&gt;
    class iterator_traits&lt;Vector&lt;T&gt;::Iterator&gt;
    {
        using value_type = T;
        using difference_type = std::ptrdiff_t;
        using pointer = T*;
        using reference  = T&amp;;
        using iteratory_category = std::random_access_iterator_tag;
    };
}
</code></pre>
<p>But that is a little bit like actual hard work. The designers of the STL actually got smart and the default implementation of this type refer back to the iterator type to get these types. So you can define these types in your iterator (and not define a specialization of the <code>iterator_traits</code> class).</p>
<p>Rather do this:</p>
<pre><code>template&lt;typename T&gt;
class Vector
{
    class Iterator
    {
        using value_type = T;
        using difference_type = std::ptrdiff_t;
        using pointer = T*;
        using reference  = T&amp;;
        using iterator_category = std::random_access_iterator_tag;
    };
    ....
}
</code></pre>
<p>Note: If you follow the advice above and use a pointer as your iterator. The <code>iterator_traits</code> for pointer types are well defined in the standard and no work is required.</p>
<h3>Properties of an Iterator</h3>
<p>The basic properties of an iterator are:</p>
<ul>
<li>Default Constructible    *** Currently not supported.</li>
<li>Copy Constructible</li>
<li>Copy Assignable</li>
<li>Destructible</li>
<li>Swappable      *** Currently not supported.</li>
<li>Equality Comparable  *** Currently not supported (you need ==)</li>
<li>objects returned via de-referencing need to be mutable (not supported)</li>
</ul>
<p>Supported actions for a random access iterator:</p>
<pre><code>*i                  // returns the current value
*i  = v             // Assign value `v` to the value dererenced.
++i                 // increments the iterator (returns a reference)
--i                 // See above
i++                 // increments the iterator (but returns a reference to the original)
i--                 // See above
*i++                // returns the current value and increments the iterator
*i--                // See above

i += n              // Moves the iterator forward
i -= n              // Same as last one
i + n               // Creates a new iterator moved forward from i
n + i               // Same as last one
i - n               // Same as last one

i1 - i2             // returns the distance between the iterators.

i[n]                // returns the item n steps forward from this iterator.
i-&gt;m                // Access the member `m` referenced by i

i1 &lt;  i2            // Compare iterators
i1 &gt;  i2
i1 &lt;= i2
i1 &gt;= i2
i1 == i2
i1 != i2
</code></pre>
<p>OK So I have dumped an all lot of requirements on iterators here. But it is not as bad as it seems. Have a look at an iterator I built for a stack overflow question.</p>
<p><a href="https://stackoverflow.com/a/1120224/14065">https://stackoverflow.com/a/1120224/14065</a></p>
<p>This iterator is only a forward iterator (so it has fewer requirements). But it shows you how to implement the main basic requirements very quickly. The rest should not be too hard to implement for random accesses iterator.</p>
<p>Got bored so here:</p>
<pre><code>class Iterator
{
public:
    using value_type = T;
    using pointer    = T*;
    using reference  = T&amp;;
    using difference_type = std::ptrdiff_t;
    using iterator_category = std::random_access_iterator_tag;

    Iterator():                    v(nullptr), i(0) {}   
    Iterator(Vector&lt;T&gt;* v, int i): v(v),       i(i) {}
    // Default Copy/Move Are Fine.
    // Default Destructor fine.

    reference       operator*()             {return (*v)[i];}
    const reference operator*()       const {return (*v)[i];}
    pointer         operator-&gt;()            {return &amp;((*v)[i]);}
    const pointer   operator-&gt;()      const {return &amp;((*v)[i]);}
    reference       operator[](int m)       {return (*v)[i + m];}
    const reference operator[](int m) const {return (*v)[i + m];}
    

    Iterator&amp; operator++()       {++i;return *this;}
    Iterator&amp; operator--()       {--i;return *this;}
    Iterator  operator++(int)    {Iterator r(*this);++i;return r;}
    Iterator  operator--(int)    {Iterator r(*this);--i;return r;}

    Iterator&amp; operator+=(int n)  {i += n;return *this;}
    Iterator&amp; operator-=(int n)  {i -= n;return *this;}

    Iterator operator+(int n)   const {Iterator r(*this);return r += n;}
    Iterator operator-(int n)   const {Iterator r(*this);return r -= n;}

    difference_type operator-(Iterator const&amp; r) const {return i - r.i;}

    // Note: comparing iterator from different containers
    //       is undefined behavior so we don't need to check
    //       if they are the same container.
    bool operator&lt;(Iterator const&amp; r)  const {return i &lt;  r.i;}
    bool operator&lt;=(Iterator const&amp; r) const {return i &lt;= r.i;}
    bool operator&gt;(Iterator const&amp; r)  const {return i &gt;  r.i;}
    bool operator&gt;=(Iterator const&amp; r) const {return i &gt;= r.i;}
    bool operator!=(const Iterator &amp;r) const {return i != r.i;}
    bool operator==(const Iterator &amp;r) const {return i == r.i;}

private:
    Vector&lt;T&gt;* v;
    int        i;
};
</code></pre>
<h2>The Container.</h2>
<p>Since you were asking about Iterators I will not give input on the Vector just yet (but lets say it needs work).</p>
<p>I have written a couple of articles on implementing the vector that you can have a look at.</p>
<p><a href="http://lokiastari.com/series/" rel="nofollow noreferrer">http://lokiastari.com/series/</a></p>
    </div>