<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's not only your first iteration that's wrong...</p>

<pre><code>for (int i = 0; i &lt; GetNextRandom(_count); i++)
{
    _current = _current.Next;
}
</code></pre>

<p>You're executing <code>GetNextRandom</code> on every loop, which returns a different number... Say that the random returns 12, 31, 2.</p>

<p>Loop 1:<br>
i = 0 which is less than 12. Great, keep walking the linked list<br>
Loop 2:<br>
i = 1 which is less than 31. Great, keep going.<br>
Loop 3:<br>
i = 2 which is not less than 2. Stop there.</p>

<p>Even though the random gave you <code>12</code>, you've only moved twice! Hopefully, it's intuitive that you're going to move to the next link fewer times on average. I don't feel up to the maths to prove this... I think of it like this, the chance of getting consecutive numbers all over x decreases as x increases.</p>

<p>If my explanation doesn't make sense, chuck a <code>Console.WriteLine</code> in <code>GetNextRandom</code>. You should notice a random number of calls before each value is produced. </p>

<p>You should be doing something like:</p>

<pre><code>int max = GetNextRandom(_count);
for (int i = 0; i &lt; max; i++)
{
    _current = _current.Next;
}
</code></pre>

<p>I think using an unbound random number generator just hides the problem.</p>

<hr>

<p>You may be wondering now why I said you're going to move fewer times as a result of regenerating the upper bound on each loop but you said</p>

<blockquote>
  <p>However, it appears to have a bias towards the returning an item near the end of the list as its first item</p>
</blockquote>

<p>Look at how you're creating your Linked List... <code>_current</code> stays as the first item throughout the creation so you end up with:</p>

<p>I1 -&gt; I5 -&gt; I4 -&gt; I3 -&gt; I2</p>

<p>You also skip <code>_current</code> in your <code>Pop</code> (you return <code>_current.Next</code>) which means that if you pop in order you get I5, I4, I3, I2, I1. So your bias is toward the <em>beginning</em> of the list.</p>
    </div>